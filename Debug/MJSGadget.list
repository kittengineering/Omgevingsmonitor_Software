
MJSGadget.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e360  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000990  0800e420  0800e420  0000f420  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800edb0  0800edb0  0001020c  2**0
                  CONTENTS
  4 .ARM          00000008  0800edb0  0800edb0  0000fdb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800edb8  0800edb8  0001020c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800edb8  0800edb8  0000fdb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800edbc  0800edbc  0000fdbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000020c  20000000  0800edc0  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e54  2000020c  0800efcc  0001020c  2**2
                  ALLOC
 10 ._user_heap_stack 00000500  20001060  0800efcc  00011060  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0001020c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001588b  00000000  00000000  00010234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004265  00000000  00000000  00025abf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012c0  00000000  00000000  00029d28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e2c  00000000  00000000  0002afe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a14b  00000000  00000000  0002be14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e4c5  00000000  00000000  00045f5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b453  00000000  00000000  00064424  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ef877  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000054bc  00000000  00000000  000ef8bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  000f4d78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000020c 	.word	0x2000020c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800e408 	.word	0x0800e408

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000210 	.word	0x20000210
 8000104:	0800e408 	.word	0x0800e408

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			@ (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	@ 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			@ (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	@ 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	@ 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			@ (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			@ (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 ffd3 	bl	80023e8 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 ff13 	bl	8002278 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 ffc5 	bl	80023e8 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 ffbb 	bl	80023e8 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 ff3d 	bl	8002300 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			@ (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 ff33 	bl	8002300 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			@ (mov r8, r8)

080004a8 <__aeabi_cfrcmple>:
 80004a8:	4684      	mov	ip, r0
 80004aa:	0008      	movs	r0, r1
 80004ac:	4661      	mov	r1, ip
 80004ae:	e7ff      	b.n	80004b0 <__aeabi_cfcmpeq>

080004b0 <__aeabi_cfcmpeq>:
 80004b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004b2:	f000 fc6f 	bl	8000d94 <__lesf2>
 80004b6:	2800      	cmp	r0, #0
 80004b8:	d401      	bmi.n	80004be <__aeabi_cfcmpeq+0xe>
 80004ba:	2100      	movs	r1, #0
 80004bc:	42c8      	cmn	r0, r1
 80004be:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004c0 <__aeabi_fcmpeq>:
 80004c0:	b510      	push	{r4, lr}
 80004c2:	f000 fbef 	bl	8000ca4 <__eqsf2>
 80004c6:	4240      	negs	r0, r0
 80004c8:	3001      	adds	r0, #1
 80004ca:	bd10      	pop	{r4, pc}

080004cc <__aeabi_fcmplt>:
 80004cc:	b510      	push	{r4, lr}
 80004ce:	f000 fc61 	bl	8000d94 <__lesf2>
 80004d2:	2800      	cmp	r0, #0
 80004d4:	db01      	blt.n	80004da <__aeabi_fcmplt+0xe>
 80004d6:	2000      	movs	r0, #0
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	2001      	movs	r0, #1
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	46c0      	nop			@ (mov r8, r8)

080004e0 <__aeabi_fcmple>:
 80004e0:	b510      	push	{r4, lr}
 80004e2:	f000 fc57 	bl	8000d94 <__lesf2>
 80004e6:	2800      	cmp	r0, #0
 80004e8:	dd01      	ble.n	80004ee <__aeabi_fcmple+0xe>
 80004ea:	2000      	movs	r0, #0
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	2001      	movs	r0, #1
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	46c0      	nop			@ (mov r8, r8)

080004f4 <__aeabi_fcmpgt>:
 80004f4:	b510      	push	{r4, lr}
 80004f6:	f000 fbfd 	bl	8000cf4 <__gesf2>
 80004fa:	2800      	cmp	r0, #0
 80004fc:	dc01      	bgt.n	8000502 <__aeabi_fcmpgt+0xe>
 80004fe:	2000      	movs	r0, #0
 8000500:	bd10      	pop	{r4, pc}
 8000502:	2001      	movs	r0, #1
 8000504:	bd10      	pop	{r4, pc}
 8000506:	46c0      	nop			@ (mov r8, r8)

08000508 <__aeabi_fcmpge>:
 8000508:	b510      	push	{r4, lr}
 800050a:	f000 fbf3 	bl	8000cf4 <__gesf2>
 800050e:	2800      	cmp	r0, #0
 8000510:	da01      	bge.n	8000516 <__aeabi_fcmpge+0xe>
 8000512:	2000      	movs	r0, #0
 8000514:	bd10      	pop	{r4, pc}
 8000516:	2001      	movs	r0, #1
 8000518:	bd10      	pop	{r4, pc}
 800051a:	46c0      	nop			@ (mov r8, r8)

0800051c <__aeabi_uldivmod>:
 800051c:	2b00      	cmp	r3, #0
 800051e:	d111      	bne.n	8000544 <__aeabi_uldivmod+0x28>
 8000520:	2a00      	cmp	r2, #0
 8000522:	d10f      	bne.n	8000544 <__aeabi_uldivmod+0x28>
 8000524:	2900      	cmp	r1, #0
 8000526:	d100      	bne.n	800052a <__aeabi_uldivmod+0xe>
 8000528:	2800      	cmp	r0, #0
 800052a:	d002      	beq.n	8000532 <__aeabi_uldivmod+0x16>
 800052c:	2100      	movs	r1, #0
 800052e:	43c9      	mvns	r1, r1
 8000530:	0008      	movs	r0, r1
 8000532:	b407      	push	{r0, r1, r2}
 8000534:	4802      	ldr	r0, [pc, #8]	@ (8000540 <__aeabi_uldivmod+0x24>)
 8000536:	a102      	add	r1, pc, #8	@ (adr r1, 8000540 <__aeabi_uldivmod+0x24>)
 8000538:	1840      	adds	r0, r0, r1
 800053a:	9002      	str	r0, [sp, #8]
 800053c:	bd03      	pop	{r0, r1, pc}
 800053e:	46c0      	nop			@ (mov r8, r8)
 8000540:	fffffee9 	.word	0xfffffee9
 8000544:	b403      	push	{r0, r1}
 8000546:	4668      	mov	r0, sp
 8000548:	b501      	push	{r0, lr}
 800054a:	9802      	ldr	r0, [sp, #8]
 800054c:	f000 f834 	bl	80005b8 <__udivmoddi4>
 8000550:	9b01      	ldr	r3, [sp, #4]
 8000552:	469e      	mov	lr, r3
 8000554:	b002      	add	sp, #8
 8000556:	bc0c      	pop	{r2, r3}
 8000558:	4770      	bx	lr
 800055a:	46c0      	nop			@ (mov r8, r8)

0800055c <__aeabi_lmul>:
 800055c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800055e:	46ce      	mov	lr, r9
 8000560:	4699      	mov	r9, r3
 8000562:	0c03      	lsrs	r3, r0, #16
 8000564:	469c      	mov	ip, r3
 8000566:	0413      	lsls	r3, r2, #16
 8000568:	4647      	mov	r7, r8
 800056a:	0c1b      	lsrs	r3, r3, #16
 800056c:	001d      	movs	r5, r3
 800056e:	000e      	movs	r6, r1
 8000570:	4661      	mov	r1, ip
 8000572:	0404      	lsls	r4, r0, #16
 8000574:	0c24      	lsrs	r4, r4, #16
 8000576:	b580      	push	{r7, lr}
 8000578:	0007      	movs	r7, r0
 800057a:	0c10      	lsrs	r0, r2, #16
 800057c:	434b      	muls	r3, r1
 800057e:	4365      	muls	r5, r4
 8000580:	4341      	muls	r1, r0
 8000582:	4360      	muls	r0, r4
 8000584:	0c2c      	lsrs	r4, r5, #16
 8000586:	18c0      	adds	r0, r0, r3
 8000588:	1824      	adds	r4, r4, r0
 800058a:	468c      	mov	ip, r1
 800058c:	42a3      	cmp	r3, r4
 800058e:	d903      	bls.n	8000598 <__aeabi_lmul+0x3c>
 8000590:	2380      	movs	r3, #128	@ 0x80
 8000592:	025b      	lsls	r3, r3, #9
 8000594:	4698      	mov	r8, r3
 8000596:	44c4      	add	ip, r8
 8000598:	4649      	mov	r1, r9
 800059a:	4379      	muls	r1, r7
 800059c:	4356      	muls	r6, r2
 800059e:	0c23      	lsrs	r3, r4, #16
 80005a0:	042d      	lsls	r5, r5, #16
 80005a2:	0c2d      	lsrs	r5, r5, #16
 80005a4:	1989      	adds	r1, r1, r6
 80005a6:	4463      	add	r3, ip
 80005a8:	0424      	lsls	r4, r4, #16
 80005aa:	1960      	adds	r0, r4, r5
 80005ac:	18c9      	adds	r1, r1, r3
 80005ae:	bcc0      	pop	{r6, r7}
 80005b0:	46b9      	mov	r9, r7
 80005b2:	46b0      	mov	r8, r6
 80005b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005b6:	46c0      	nop			@ (mov r8, r8)

080005b8 <__udivmoddi4>:
 80005b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005ba:	4657      	mov	r7, sl
 80005bc:	464e      	mov	r6, r9
 80005be:	4645      	mov	r5, r8
 80005c0:	46de      	mov	lr, fp
 80005c2:	b5e0      	push	{r5, r6, r7, lr}
 80005c4:	0004      	movs	r4, r0
 80005c6:	000d      	movs	r5, r1
 80005c8:	4692      	mov	sl, r2
 80005ca:	4699      	mov	r9, r3
 80005cc:	b083      	sub	sp, #12
 80005ce:	428b      	cmp	r3, r1
 80005d0:	d830      	bhi.n	8000634 <__udivmoddi4+0x7c>
 80005d2:	d02d      	beq.n	8000630 <__udivmoddi4+0x78>
 80005d4:	4649      	mov	r1, r9
 80005d6:	4650      	mov	r0, sl
 80005d8:	f002 ff2e 	bl	8003438 <__clzdi2>
 80005dc:	0029      	movs	r1, r5
 80005de:	0006      	movs	r6, r0
 80005e0:	0020      	movs	r0, r4
 80005e2:	f002 ff29 	bl	8003438 <__clzdi2>
 80005e6:	1a33      	subs	r3, r6, r0
 80005e8:	4698      	mov	r8, r3
 80005ea:	3b20      	subs	r3, #32
 80005ec:	d434      	bmi.n	8000658 <__udivmoddi4+0xa0>
 80005ee:	469b      	mov	fp, r3
 80005f0:	4653      	mov	r3, sl
 80005f2:	465a      	mov	r2, fp
 80005f4:	4093      	lsls	r3, r2
 80005f6:	4642      	mov	r2, r8
 80005f8:	001f      	movs	r7, r3
 80005fa:	4653      	mov	r3, sl
 80005fc:	4093      	lsls	r3, r2
 80005fe:	001e      	movs	r6, r3
 8000600:	42af      	cmp	r7, r5
 8000602:	d83b      	bhi.n	800067c <__udivmoddi4+0xc4>
 8000604:	42af      	cmp	r7, r5
 8000606:	d100      	bne.n	800060a <__udivmoddi4+0x52>
 8000608:	e079      	b.n	80006fe <__udivmoddi4+0x146>
 800060a:	465b      	mov	r3, fp
 800060c:	1ba4      	subs	r4, r4, r6
 800060e:	41bd      	sbcs	r5, r7
 8000610:	2b00      	cmp	r3, #0
 8000612:	da00      	bge.n	8000616 <__udivmoddi4+0x5e>
 8000614:	e076      	b.n	8000704 <__udivmoddi4+0x14c>
 8000616:	2200      	movs	r2, #0
 8000618:	2300      	movs	r3, #0
 800061a:	9200      	str	r2, [sp, #0]
 800061c:	9301      	str	r3, [sp, #4]
 800061e:	2301      	movs	r3, #1
 8000620:	465a      	mov	r2, fp
 8000622:	4093      	lsls	r3, r2
 8000624:	9301      	str	r3, [sp, #4]
 8000626:	2301      	movs	r3, #1
 8000628:	4642      	mov	r2, r8
 800062a:	4093      	lsls	r3, r2
 800062c:	9300      	str	r3, [sp, #0]
 800062e:	e029      	b.n	8000684 <__udivmoddi4+0xcc>
 8000630:	4282      	cmp	r2, r0
 8000632:	d9cf      	bls.n	80005d4 <__udivmoddi4+0x1c>
 8000634:	2200      	movs	r2, #0
 8000636:	2300      	movs	r3, #0
 8000638:	9200      	str	r2, [sp, #0]
 800063a:	9301      	str	r3, [sp, #4]
 800063c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <__udivmoddi4+0x8e>
 8000642:	601c      	str	r4, [r3, #0]
 8000644:	605d      	str	r5, [r3, #4]
 8000646:	9800      	ldr	r0, [sp, #0]
 8000648:	9901      	ldr	r1, [sp, #4]
 800064a:	b003      	add	sp, #12
 800064c:	bcf0      	pop	{r4, r5, r6, r7}
 800064e:	46bb      	mov	fp, r7
 8000650:	46b2      	mov	sl, r6
 8000652:	46a9      	mov	r9, r5
 8000654:	46a0      	mov	r8, r4
 8000656:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000658:	4642      	mov	r2, r8
 800065a:	469b      	mov	fp, r3
 800065c:	2320      	movs	r3, #32
 800065e:	1a9b      	subs	r3, r3, r2
 8000660:	4652      	mov	r2, sl
 8000662:	40da      	lsrs	r2, r3
 8000664:	4641      	mov	r1, r8
 8000666:	0013      	movs	r3, r2
 8000668:	464a      	mov	r2, r9
 800066a:	408a      	lsls	r2, r1
 800066c:	0017      	movs	r7, r2
 800066e:	4642      	mov	r2, r8
 8000670:	431f      	orrs	r7, r3
 8000672:	4653      	mov	r3, sl
 8000674:	4093      	lsls	r3, r2
 8000676:	001e      	movs	r6, r3
 8000678:	42af      	cmp	r7, r5
 800067a:	d9c3      	bls.n	8000604 <__udivmoddi4+0x4c>
 800067c:	2200      	movs	r2, #0
 800067e:	2300      	movs	r3, #0
 8000680:	9200      	str	r2, [sp, #0]
 8000682:	9301      	str	r3, [sp, #4]
 8000684:	4643      	mov	r3, r8
 8000686:	2b00      	cmp	r3, #0
 8000688:	d0d8      	beq.n	800063c <__udivmoddi4+0x84>
 800068a:	07fb      	lsls	r3, r7, #31
 800068c:	0872      	lsrs	r2, r6, #1
 800068e:	431a      	orrs	r2, r3
 8000690:	4646      	mov	r6, r8
 8000692:	087b      	lsrs	r3, r7, #1
 8000694:	e00e      	b.n	80006b4 <__udivmoddi4+0xfc>
 8000696:	42ab      	cmp	r3, r5
 8000698:	d101      	bne.n	800069e <__udivmoddi4+0xe6>
 800069a:	42a2      	cmp	r2, r4
 800069c:	d80c      	bhi.n	80006b8 <__udivmoddi4+0x100>
 800069e:	1aa4      	subs	r4, r4, r2
 80006a0:	419d      	sbcs	r5, r3
 80006a2:	2001      	movs	r0, #1
 80006a4:	1924      	adds	r4, r4, r4
 80006a6:	416d      	adcs	r5, r5
 80006a8:	2100      	movs	r1, #0
 80006aa:	3e01      	subs	r6, #1
 80006ac:	1824      	adds	r4, r4, r0
 80006ae:	414d      	adcs	r5, r1
 80006b0:	2e00      	cmp	r6, #0
 80006b2:	d006      	beq.n	80006c2 <__udivmoddi4+0x10a>
 80006b4:	42ab      	cmp	r3, r5
 80006b6:	d9ee      	bls.n	8000696 <__udivmoddi4+0xde>
 80006b8:	3e01      	subs	r6, #1
 80006ba:	1924      	adds	r4, r4, r4
 80006bc:	416d      	adcs	r5, r5
 80006be:	2e00      	cmp	r6, #0
 80006c0:	d1f8      	bne.n	80006b4 <__udivmoddi4+0xfc>
 80006c2:	9800      	ldr	r0, [sp, #0]
 80006c4:	9901      	ldr	r1, [sp, #4]
 80006c6:	465b      	mov	r3, fp
 80006c8:	1900      	adds	r0, r0, r4
 80006ca:	4169      	adcs	r1, r5
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	db24      	blt.n	800071a <__udivmoddi4+0x162>
 80006d0:	002b      	movs	r3, r5
 80006d2:	465a      	mov	r2, fp
 80006d4:	4644      	mov	r4, r8
 80006d6:	40d3      	lsrs	r3, r2
 80006d8:	002a      	movs	r2, r5
 80006da:	40e2      	lsrs	r2, r4
 80006dc:	001c      	movs	r4, r3
 80006de:	465b      	mov	r3, fp
 80006e0:	0015      	movs	r5, r2
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	db2a      	blt.n	800073c <__udivmoddi4+0x184>
 80006e6:	0026      	movs	r6, r4
 80006e8:	409e      	lsls	r6, r3
 80006ea:	0033      	movs	r3, r6
 80006ec:	0026      	movs	r6, r4
 80006ee:	4647      	mov	r7, r8
 80006f0:	40be      	lsls	r6, r7
 80006f2:	0032      	movs	r2, r6
 80006f4:	1a80      	subs	r0, r0, r2
 80006f6:	4199      	sbcs	r1, r3
 80006f8:	9000      	str	r0, [sp, #0]
 80006fa:	9101      	str	r1, [sp, #4]
 80006fc:	e79e      	b.n	800063c <__udivmoddi4+0x84>
 80006fe:	42a3      	cmp	r3, r4
 8000700:	d8bc      	bhi.n	800067c <__udivmoddi4+0xc4>
 8000702:	e782      	b.n	800060a <__udivmoddi4+0x52>
 8000704:	4642      	mov	r2, r8
 8000706:	2320      	movs	r3, #32
 8000708:	2100      	movs	r1, #0
 800070a:	1a9b      	subs	r3, r3, r2
 800070c:	2200      	movs	r2, #0
 800070e:	9100      	str	r1, [sp, #0]
 8000710:	9201      	str	r2, [sp, #4]
 8000712:	2201      	movs	r2, #1
 8000714:	40da      	lsrs	r2, r3
 8000716:	9201      	str	r2, [sp, #4]
 8000718:	e785      	b.n	8000626 <__udivmoddi4+0x6e>
 800071a:	4642      	mov	r2, r8
 800071c:	2320      	movs	r3, #32
 800071e:	1a9b      	subs	r3, r3, r2
 8000720:	002a      	movs	r2, r5
 8000722:	4646      	mov	r6, r8
 8000724:	409a      	lsls	r2, r3
 8000726:	0023      	movs	r3, r4
 8000728:	40f3      	lsrs	r3, r6
 800072a:	4644      	mov	r4, r8
 800072c:	4313      	orrs	r3, r2
 800072e:	002a      	movs	r2, r5
 8000730:	40e2      	lsrs	r2, r4
 8000732:	001c      	movs	r4, r3
 8000734:	465b      	mov	r3, fp
 8000736:	0015      	movs	r5, r2
 8000738:	2b00      	cmp	r3, #0
 800073a:	dad4      	bge.n	80006e6 <__udivmoddi4+0x12e>
 800073c:	4642      	mov	r2, r8
 800073e:	002f      	movs	r7, r5
 8000740:	2320      	movs	r3, #32
 8000742:	0026      	movs	r6, r4
 8000744:	4097      	lsls	r7, r2
 8000746:	1a9b      	subs	r3, r3, r2
 8000748:	40de      	lsrs	r6, r3
 800074a:	003b      	movs	r3, r7
 800074c:	4333      	orrs	r3, r6
 800074e:	e7cd      	b.n	80006ec <__udivmoddi4+0x134>

08000750 <__aeabi_fadd>:
 8000750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000752:	46ce      	mov	lr, r9
 8000754:	4647      	mov	r7, r8
 8000756:	0243      	lsls	r3, r0, #9
 8000758:	0a5a      	lsrs	r2, r3, #9
 800075a:	024e      	lsls	r6, r1, #9
 800075c:	0045      	lsls	r5, r0, #1
 800075e:	0fc4      	lsrs	r4, r0, #31
 8000760:	0048      	lsls	r0, r1, #1
 8000762:	4691      	mov	r9, r2
 8000764:	0e2d      	lsrs	r5, r5, #24
 8000766:	0a72      	lsrs	r2, r6, #9
 8000768:	0e00      	lsrs	r0, r0, #24
 800076a:	4694      	mov	ip, r2
 800076c:	b580      	push	{r7, lr}
 800076e:	099b      	lsrs	r3, r3, #6
 8000770:	0fc9      	lsrs	r1, r1, #31
 8000772:	09b6      	lsrs	r6, r6, #6
 8000774:	1a2a      	subs	r2, r5, r0
 8000776:	428c      	cmp	r4, r1
 8000778:	d021      	beq.n	80007be <__aeabi_fadd+0x6e>
 800077a:	2a00      	cmp	r2, #0
 800077c:	dd0d      	ble.n	800079a <__aeabi_fadd+0x4a>
 800077e:	2800      	cmp	r0, #0
 8000780:	d12d      	bne.n	80007de <__aeabi_fadd+0x8e>
 8000782:	2e00      	cmp	r6, #0
 8000784:	d100      	bne.n	8000788 <__aeabi_fadd+0x38>
 8000786:	e08d      	b.n	80008a4 <__aeabi_fadd+0x154>
 8000788:	1e51      	subs	r1, r2, #1
 800078a:	2a01      	cmp	r2, #1
 800078c:	d100      	bne.n	8000790 <__aeabi_fadd+0x40>
 800078e:	e11d      	b.n	80009cc <__aeabi_fadd+0x27c>
 8000790:	2aff      	cmp	r2, #255	@ 0xff
 8000792:	d100      	bne.n	8000796 <__aeabi_fadd+0x46>
 8000794:	e0ab      	b.n	80008ee <__aeabi_fadd+0x19e>
 8000796:	000a      	movs	r2, r1
 8000798:	e027      	b.n	80007ea <__aeabi_fadd+0x9a>
 800079a:	2a00      	cmp	r2, #0
 800079c:	d04d      	beq.n	800083a <__aeabi_fadd+0xea>
 800079e:	1b42      	subs	r2, r0, r5
 80007a0:	2d00      	cmp	r5, #0
 80007a2:	d000      	beq.n	80007a6 <__aeabi_fadd+0x56>
 80007a4:	e0cc      	b.n	8000940 <__aeabi_fadd+0x1f0>
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d100      	bne.n	80007ac <__aeabi_fadd+0x5c>
 80007aa:	e079      	b.n	80008a0 <__aeabi_fadd+0x150>
 80007ac:	1e54      	subs	r4, r2, #1
 80007ae:	2a01      	cmp	r2, #1
 80007b0:	d100      	bne.n	80007b4 <__aeabi_fadd+0x64>
 80007b2:	e128      	b.n	8000a06 <__aeabi_fadd+0x2b6>
 80007b4:	2aff      	cmp	r2, #255	@ 0xff
 80007b6:	d100      	bne.n	80007ba <__aeabi_fadd+0x6a>
 80007b8:	e097      	b.n	80008ea <__aeabi_fadd+0x19a>
 80007ba:	0022      	movs	r2, r4
 80007bc:	e0c5      	b.n	800094a <__aeabi_fadd+0x1fa>
 80007be:	2a00      	cmp	r2, #0
 80007c0:	dc00      	bgt.n	80007c4 <__aeabi_fadd+0x74>
 80007c2:	e096      	b.n	80008f2 <__aeabi_fadd+0x1a2>
 80007c4:	2800      	cmp	r0, #0
 80007c6:	d04f      	beq.n	8000868 <__aeabi_fadd+0x118>
 80007c8:	2dff      	cmp	r5, #255	@ 0xff
 80007ca:	d100      	bne.n	80007ce <__aeabi_fadd+0x7e>
 80007cc:	e08f      	b.n	80008ee <__aeabi_fadd+0x19e>
 80007ce:	2180      	movs	r1, #128	@ 0x80
 80007d0:	04c9      	lsls	r1, r1, #19
 80007d2:	430e      	orrs	r6, r1
 80007d4:	2a1b      	cmp	r2, #27
 80007d6:	dd51      	ble.n	800087c <__aeabi_fadd+0x12c>
 80007d8:	002a      	movs	r2, r5
 80007da:	3301      	adds	r3, #1
 80007dc:	e018      	b.n	8000810 <__aeabi_fadd+0xc0>
 80007de:	2dff      	cmp	r5, #255	@ 0xff
 80007e0:	d100      	bne.n	80007e4 <__aeabi_fadd+0x94>
 80007e2:	e084      	b.n	80008ee <__aeabi_fadd+0x19e>
 80007e4:	2180      	movs	r1, #128	@ 0x80
 80007e6:	04c9      	lsls	r1, r1, #19
 80007e8:	430e      	orrs	r6, r1
 80007ea:	2101      	movs	r1, #1
 80007ec:	2a1b      	cmp	r2, #27
 80007ee:	dc08      	bgt.n	8000802 <__aeabi_fadd+0xb2>
 80007f0:	0031      	movs	r1, r6
 80007f2:	2020      	movs	r0, #32
 80007f4:	40d1      	lsrs	r1, r2
 80007f6:	1a82      	subs	r2, r0, r2
 80007f8:	4096      	lsls	r6, r2
 80007fa:	0032      	movs	r2, r6
 80007fc:	1e50      	subs	r0, r2, #1
 80007fe:	4182      	sbcs	r2, r0
 8000800:	4311      	orrs	r1, r2
 8000802:	1a5b      	subs	r3, r3, r1
 8000804:	015a      	lsls	r2, r3, #5
 8000806:	d459      	bmi.n	80008bc <__aeabi_fadd+0x16c>
 8000808:	2107      	movs	r1, #7
 800080a:	002a      	movs	r2, r5
 800080c:	4019      	ands	r1, r3
 800080e:	d049      	beq.n	80008a4 <__aeabi_fadd+0x154>
 8000810:	210f      	movs	r1, #15
 8000812:	4019      	ands	r1, r3
 8000814:	2904      	cmp	r1, #4
 8000816:	d000      	beq.n	800081a <__aeabi_fadd+0xca>
 8000818:	3304      	adds	r3, #4
 800081a:	0159      	lsls	r1, r3, #5
 800081c:	d542      	bpl.n	80008a4 <__aeabi_fadd+0x154>
 800081e:	1c50      	adds	r0, r2, #1
 8000820:	2afe      	cmp	r2, #254	@ 0xfe
 8000822:	d03a      	beq.n	800089a <__aeabi_fadd+0x14a>
 8000824:	019b      	lsls	r3, r3, #6
 8000826:	b2c0      	uxtb	r0, r0
 8000828:	0a5b      	lsrs	r3, r3, #9
 800082a:	05c0      	lsls	r0, r0, #23
 800082c:	4318      	orrs	r0, r3
 800082e:	07e4      	lsls	r4, r4, #31
 8000830:	4320      	orrs	r0, r4
 8000832:	bcc0      	pop	{r6, r7}
 8000834:	46b9      	mov	r9, r7
 8000836:	46b0      	mov	r8, r6
 8000838:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800083a:	20fe      	movs	r0, #254	@ 0xfe
 800083c:	4680      	mov	r8, r0
 800083e:	1c6f      	adds	r7, r5, #1
 8000840:	0038      	movs	r0, r7
 8000842:	4647      	mov	r7, r8
 8000844:	4207      	tst	r7, r0
 8000846:	d000      	beq.n	800084a <__aeabi_fadd+0xfa>
 8000848:	e08e      	b.n	8000968 <__aeabi_fadd+0x218>
 800084a:	2d00      	cmp	r5, #0
 800084c:	d000      	beq.n	8000850 <__aeabi_fadd+0x100>
 800084e:	e0b4      	b.n	80009ba <__aeabi_fadd+0x26a>
 8000850:	2b00      	cmp	r3, #0
 8000852:	d100      	bne.n	8000856 <__aeabi_fadd+0x106>
 8000854:	e0db      	b.n	8000a0e <__aeabi_fadd+0x2be>
 8000856:	2e00      	cmp	r6, #0
 8000858:	d06c      	beq.n	8000934 <__aeabi_fadd+0x1e4>
 800085a:	1b98      	subs	r0, r3, r6
 800085c:	0145      	lsls	r5, r0, #5
 800085e:	d400      	bmi.n	8000862 <__aeabi_fadd+0x112>
 8000860:	e0f7      	b.n	8000a52 <__aeabi_fadd+0x302>
 8000862:	000c      	movs	r4, r1
 8000864:	1af3      	subs	r3, r6, r3
 8000866:	e03d      	b.n	80008e4 <__aeabi_fadd+0x194>
 8000868:	2e00      	cmp	r6, #0
 800086a:	d01b      	beq.n	80008a4 <__aeabi_fadd+0x154>
 800086c:	1e51      	subs	r1, r2, #1
 800086e:	2a01      	cmp	r2, #1
 8000870:	d100      	bne.n	8000874 <__aeabi_fadd+0x124>
 8000872:	e082      	b.n	800097a <__aeabi_fadd+0x22a>
 8000874:	2aff      	cmp	r2, #255	@ 0xff
 8000876:	d03a      	beq.n	80008ee <__aeabi_fadd+0x19e>
 8000878:	000a      	movs	r2, r1
 800087a:	e7ab      	b.n	80007d4 <__aeabi_fadd+0x84>
 800087c:	0031      	movs	r1, r6
 800087e:	2020      	movs	r0, #32
 8000880:	40d1      	lsrs	r1, r2
 8000882:	1a82      	subs	r2, r0, r2
 8000884:	4096      	lsls	r6, r2
 8000886:	0032      	movs	r2, r6
 8000888:	1e50      	subs	r0, r2, #1
 800088a:	4182      	sbcs	r2, r0
 800088c:	430a      	orrs	r2, r1
 800088e:	189b      	adds	r3, r3, r2
 8000890:	015a      	lsls	r2, r3, #5
 8000892:	d5b9      	bpl.n	8000808 <__aeabi_fadd+0xb8>
 8000894:	1c6a      	adds	r2, r5, #1
 8000896:	2dfe      	cmp	r5, #254	@ 0xfe
 8000898:	d175      	bne.n	8000986 <__aeabi_fadd+0x236>
 800089a:	20ff      	movs	r0, #255	@ 0xff
 800089c:	2300      	movs	r3, #0
 800089e:	e7c4      	b.n	800082a <__aeabi_fadd+0xda>
 80008a0:	000c      	movs	r4, r1
 80008a2:	0033      	movs	r3, r6
 80008a4:	08db      	lsrs	r3, r3, #3
 80008a6:	2aff      	cmp	r2, #255	@ 0xff
 80008a8:	d146      	bne.n	8000938 <__aeabi_fadd+0x1e8>
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d0f5      	beq.n	800089a <__aeabi_fadd+0x14a>
 80008ae:	2280      	movs	r2, #128	@ 0x80
 80008b0:	03d2      	lsls	r2, r2, #15
 80008b2:	4313      	orrs	r3, r2
 80008b4:	025b      	lsls	r3, r3, #9
 80008b6:	20ff      	movs	r0, #255	@ 0xff
 80008b8:	0a5b      	lsrs	r3, r3, #9
 80008ba:	e7b6      	b.n	800082a <__aeabi_fadd+0xda>
 80008bc:	019f      	lsls	r7, r3, #6
 80008be:	09bf      	lsrs	r7, r7, #6
 80008c0:	0038      	movs	r0, r7
 80008c2:	f002 fd9b 	bl	80033fc <__clzsi2>
 80008c6:	3805      	subs	r0, #5
 80008c8:	4087      	lsls	r7, r0
 80008ca:	4285      	cmp	r5, r0
 80008cc:	dc24      	bgt.n	8000918 <__aeabi_fadd+0x1c8>
 80008ce:	003b      	movs	r3, r7
 80008d0:	2120      	movs	r1, #32
 80008d2:	1b42      	subs	r2, r0, r5
 80008d4:	3201      	adds	r2, #1
 80008d6:	40d3      	lsrs	r3, r2
 80008d8:	1a8a      	subs	r2, r1, r2
 80008da:	4097      	lsls	r7, r2
 80008dc:	1e7a      	subs	r2, r7, #1
 80008de:	4197      	sbcs	r7, r2
 80008e0:	2200      	movs	r2, #0
 80008e2:	433b      	orrs	r3, r7
 80008e4:	0759      	lsls	r1, r3, #29
 80008e6:	d193      	bne.n	8000810 <__aeabi_fadd+0xc0>
 80008e8:	e797      	b.n	800081a <__aeabi_fadd+0xca>
 80008ea:	000c      	movs	r4, r1
 80008ec:	0033      	movs	r3, r6
 80008ee:	08db      	lsrs	r3, r3, #3
 80008f0:	e7db      	b.n	80008aa <__aeabi_fadd+0x15a>
 80008f2:	2a00      	cmp	r2, #0
 80008f4:	d014      	beq.n	8000920 <__aeabi_fadd+0x1d0>
 80008f6:	1b42      	subs	r2, r0, r5
 80008f8:	2d00      	cmp	r5, #0
 80008fa:	d14b      	bne.n	8000994 <__aeabi_fadd+0x244>
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d0d0      	beq.n	80008a2 <__aeabi_fadd+0x152>
 8000900:	1e51      	subs	r1, r2, #1
 8000902:	2a01      	cmp	r2, #1
 8000904:	d100      	bne.n	8000908 <__aeabi_fadd+0x1b8>
 8000906:	e09e      	b.n	8000a46 <__aeabi_fadd+0x2f6>
 8000908:	2aff      	cmp	r2, #255	@ 0xff
 800090a:	d0ef      	beq.n	80008ec <__aeabi_fadd+0x19c>
 800090c:	000a      	movs	r2, r1
 800090e:	2a1b      	cmp	r2, #27
 8000910:	dd5f      	ble.n	80009d2 <__aeabi_fadd+0x282>
 8000912:	0002      	movs	r2, r0
 8000914:	1c73      	adds	r3, r6, #1
 8000916:	e77b      	b.n	8000810 <__aeabi_fadd+0xc0>
 8000918:	4b50      	ldr	r3, [pc, #320]	@ (8000a5c <__aeabi_fadd+0x30c>)
 800091a:	1a2a      	subs	r2, r5, r0
 800091c:	403b      	ands	r3, r7
 800091e:	e7e1      	b.n	80008e4 <__aeabi_fadd+0x194>
 8000920:	21fe      	movs	r1, #254	@ 0xfe
 8000922:	1c6a      	adds	r2, r5, #1
 8000924:	4211      	tst	r1, r2
 8000926:	d13b      	bne.n	80009a0 <__aeabi_fadd+0x250>
 8000928:	2d00      	cmp	r5, #0
 800092a:	d15d      	bne.n	80009e8 <__aeabi_fadd+0x298>
 800092c:	2b00      	cmp	r3, #0
 800092e:	d07f      	beq.n	8000a30 <__aeabi_fadd+0x2e0>
 8000930:	2e00      	cmp	r6, #0
 8000932:	d17f      	bne.n	8000a34 <__aeabi_fadd+0x2e4>
 8000934:	2200      	movs	r2, #0
 8000936:	08db      	lsrs	r3, r3, #3
 8000938:	025b      	lsls	r3, r3, #9
 800093a:	0a5b      	lsrs	r3, r3, #9
 800093c:	b2d0      	uxtb	r0, r2
 800093e:	e774      	b.n	800082a <__aeabi_fadd+0xda>
 8000940:	28ff      	cmp	r0, #255	@ 0xff
 8000942:	d0d2      	beq.n	80008ea <__aeabi_fadd+0x19a>
 8000944:	2480      	movs	r4, #128	@ 0x80
 8000946:	04e4      	lsls	r4, r4, #19
 8000948:	4323      	orrs	r3, r4
 800094a:	2401      	movs	r4, #1
 800094c:	2a1b      	cmp	r2, #27
 800094e:	dc07      	bgt.n	8000960 <__aeabi_fadd+0x210>
 8000950:	001c      	movs	r4, r3
 8000952:	2520      	movs	r5, #32
 8000954:	40d4      	lsrs	r4, r2
 8000956:	1aaa      	subs	r2, r5, r2
 8000958:	4093      	lsls	r3, r2
 800095a:	1e5a      	subs	r2, r3, #1
 800095c:	4193      	sbcs	r3, r2
 800095e:	431c      	orrs	r4, r3
 8000960:	1b33      	subs	r3, r6, r4
 8000962:	0005      	movs	r5, r0
 8000964:	000c      	movs	r4, r1
 8000966:	e74d      	b.n	8000804 <__aeabi_fadd+0xb4>
 8000968:	1b9f      	subs	r7, r3, r6
 800096a:	017a      	lsls	r2, r7, #5
 800096c:	d422      	bmi.n	80009b4 <__aeabi_fadd+0x264>
 800096e:	2f00      	cmp	r7, #0
 8000970:	d1a6      	bne.n	80008c0 <__aeabi_fadd+0x170>
 8000972:	2400      	movs	r4, #0
 8000974:	2000      	movs	r0, #0
 8000976:	2300      	movs	r3, #0
 8000978:	e757      	b.n	800082a <__aeabi_fadd+0xda>
 800097a:	199b      	adds	r3, r3, r6
 800097c:	2501      	movs	r5, #1
 800097e:	3201      	adds	r2, #1
 8000980:	0159      	lsls	r1, r3, #5
 8000982:	d400      	bmi.n	8000986 <__aeabi_fadd+0x236>
 8000984:	e740      	b.n	8000808 <__aeabi_fadd+0xb8>
 8000986:	2101      	movs	r1, #1
 8000988:	4835      	ldr	r0, [pc, #212]	@ (8000a60 <__aeabi_fadd+0x310>)
 800098a:	4019      	ands	r1, r3
 800098c:	085b      	lsrs	r3, r3, #1
 800098e:	4003      	ands	r3, r0
 8000990:	430b      	orrs	r3, r1
 8000992:	e7a7      	b.n	80008e4 <__aeabi_fadd+0x194>
 8000994:	28ff      	cmp	r0, #255	@ 0xff
 8000996:	d0a9      	beq.n	80008ec <__aeabi_fadd+0x19c>
 8000998:	2180      	movs	r1, #128	@ 0x80
 800099a:	04c9      	lsls	r1, r1, #19
 800099c:	430b      	orrs	r3, r1
 800099e:	e7b6      	b.n	800090e <__aeabi_fadd+0x1be>
 80009a0:	2aff      	cmp	r2, #255	@ 0xff
 80009a2:	d100      	bne.n	80009a6 <__aeabi_fadd+0x256>
 80009a4:	e779      	b.n	800089a <__aeabi_fadd+0x14a>
 80009a6:	199b      	adds	r3, r3, r6
 80009a8:	085b      	lsrs	r3, r3, #1
 80009aa:	0759      	lsls	r1, r3, #29
 80009ac:	d000      	beq.n	80009b0 <__aeabi_fadd+0x260>
 80009ae:	e72f      	b.n	8000810 <__aeabi_fadd+0xc0>
 80009b0:	08db      	lsrs	r3, r3, #3
 80009b2:	e7c1      	b.n	8000938 <__aeabi_fadd+0x1e8>
 80009b4:	000c      	movs	r4, r1
 80009b6:	1af7      	subs	r7, r6, r3
 80009b8:	e782      	b.n	80008c0 <__aeabi_fadd+0x170>
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d12c      	bne.n	8000a18 <__aeabi_fadd+0x2c8>
 80009be:	2e00      	cmp	r6, #0
 80009c0:	d193      	bne.n	80008ea <__aeabi_fadd+0x19a>
 80009c2:	2380      	movs	r3, #128	@ 0x80
 80009c4:	2400      	movs	r4, #0
 80009c6:	20ff      	movs	r0, #255	@ 0xff
 80009c8:	03db      	lsls	r3, r3, #15
 80009ca:	e72e      	b.n	800082a <__aeabi_fadd+0xda>
 80009cc:	2501      	movs	r5, #1
 80009ce:	1b9b      	subs	r3, r3, r6
 80009d0:	e718      	b.n	8000804 <__aeabi_fadd+0xb4>
 80009d2:	0019      	movs	r1, r3
 80009d4:	2520      	movs	r5, #32
 80009d6:	40d1      	lsrs	r1, r2
 80009d8:	1aaa      	subs	r2, r5, r2
 80009da:	4093      	lsls	r3, r2
 80009dc:	1e5a      	subs	r2, r3, #1
 80009de:	4193      	sbcs	r3, r2
 80009e0:	430b      	orrs	r3, r1
 80009e2:	0005      	movs	r5, r0
 80009e4:	199b      	adds	r3, r3, r6
 80009e6:	e753      	b.n	8000890 <__aeabi_fadd+0x140>
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d100      	bne.n	80009ee <__aeabi_fadd+0x29e>
 80009ec:	e77e      	b.n	80008ec <__aeabi_fadd+0x19c>
 80009ee:	2e00      	cmp	r6, #0
 80009f0:	d100      	bne.n	80009f4 <__aeabi_fadd+0x2a4>
 80009f2:	e77c      	b.n	80008ee <__aeabi_fadd+0x19e>
 80009f4:	2280      	movs	r2, #128	@ 0x80
 80009f6:	03d2      	lsls	r2, r2, #15
 80009f8:	4591      	cmp	r9, r2
 80009fa:	d302      	bcc.n	8000a02 <__aeabi_fadd+0x2b2>
 80009fc:	4594      	cmp	ip, r2
 80009fe:	d200      	bcs.n	8000a02 <__aeabi_fadd+0x2b2>
 8000a00:	0033      	movs	r3, r6
 8000a02:	08db      	lsrs	r3, r3, #3
 8000a04:	e753      	b.n	80008ae <__aeabi_fadd+0x15e>
 8000a06:	000c      	movs	r4, r1
 8000a08:	1af3      	subs	r3, r6, r3
 8000a0a:	3501      	adds	r5, #1
 8000a0c:	e6fa      	b.n	8000804 <__aeabi_fadd+0xb4>
 8000a0e:	2e00      	cmp	r6, #0
 8000a10:	d0af      	beq.n	8000972 <__aeabi_fadd+0x222>
 8000a12:	000c      	movs	r4, r1
 8000a14:	0033      	movs	r3, r6
 8000a16:	e78d      	b.n	8000934 <__aeabi_fadd+0x1e4>
 8000a18:	2e00      	cmp	r6, #0
 8000a1a:	d100      	bne.n	8000a1e <__aeabi_fadd+0x2ce>
 8000a1c:	e767      	b.n	80008ee <__aeabi_fadd+0x19e>
 8000a1e:	2280      	movs	r2, #128	@ 0x80
 8000a20:	03d2      	lsls	r2, r2, #15
 8000a22:	4591      	cmp	r9, r2
 8000a24:	d3ed      	bcc.n	8000a02 <__aeabi_fadd+0x2b2>
 8000a26:	4594      	cmp	ip, r2
 8000a28:	d2eb      	bcs.n	8000a02 <__aeabi_fadd+0x2b2>
 8000a2a:	000c      	movs	r4, r1
 8000a2c:	0033      	movs	r3, r6
 8000a2e:	e7e8      	b.n	8000a02 <__aeabi_fadd+0x2b2>
 8000a30:	0033      	movs	r3, r6
 8000a32:	e77f      	b.n	8000934 <__aeabi_fadd+0x1e4>
 8000a34:	199b      	adds	r3, r3, r6
 8000a36:	2200      	movs	r2, #0
 8000a38:	0159      	lsls	r1, r3, #5
 8000a3a:	d5b9      	bpl.n	80009b0 <__aeabi_fadd+0x260>
 8000a3c:	4a07      	ldr	r2, [pc, #28]	@ (8000a5c <__aeabi_fadd+0x30c>)
 8000a3e:	4013      	ands	r3, r2
 8000a40:	08db      	lsrs	r3, r3, #3
 8000a42:	2201      	movs	r2, #1
 8000a44:	e778      	b.n	8000938 <__aeabi_fadd+0x1e8>
 8000a46:	199b      	adds	r3, r3, r6
 8000a48:	3201      	adds	r2, #1
 8000a4a:	3501      	adds	r5, #1
 8000a4c:	0159      	lsls	r1, r3, #5
 8000a4e:	d49a      	bmi.n	8000986 <__aeabi_fadd+0x236>
 8000a50:	e6da      	b.n	8000808 <__aeabi_fadd+0xb8>
 8000a52:	1e03      	subs	r3, r0, #0
 8000a54:	d08d      	beq.n	8000972 <__aeabi_fadd+0x222>
 8000a56:	08db      	lsrs	r3, r3, #3
 8000a58:	e76e      	b.n	8000938 <__aeabi_fadd+0x1e8>
 8000a5a:	46c0      	nop			@ (mov r8, r8)
 8000a5c:	fbffffff 	.word	0xfbffffff
 8000a60:	7dffffff 	.word	0x7dffffff

08000a64 <__aeabi_fdiv>:
 8000a64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a66:	464f      	mov	r7, r9
 8000a68:	4646      	mov	r6, r8
 8000a6a:	46d6      	mov	lr, sl
 8000a6c:	0244      	lsls	r4, r0, #9
 8000a6e:	b5c0      	push	{r6, r7, lr}
 8000a70:	0047      	lsls	r7, r0, #1
 8000a72:	1c0e      	adds	r6, r1, #0
 8000a74:	0a64      	lsrs	r4, r4, #9
 8000a76:	0e3f      	lsrs	r7, r7, #24
 8000a78:	0fc5      	lsrs	r5, r0, #31
 8000a7a:	2f00      	cmp	r7, #0
 8000a7c:	d03c      	beq.n	8000af8 <__aeabi_fdiv+0x94>
 8000a7e:	2fff      	cmp	r7, #255	@ 0xff
 8000a80:	d042      	beq.n	8000b08 <__aeabi_fdiv+0xa4>
 8000a82:	2300      	movs	r3, #0
 8000a84:	2280      	movs	r2, #128	@ 0x80
 8000a86:	4699      	mov	r9, r3
 8000a88:	469a      	mov	sl, r3
 8000a8a:	00e4      	lsls	r4, r4, #3
 8000a8c:	04d2      	lsls	r2, r2, #19
 8000a8e:	4314      	orrs	r4, r2
 8000a90:	3f7f      	subs	r7, #127	@ 0x7f
 8000a92:	0273      	lsls	r3, r6, #9
 8000a94:	0a5b      	lsrs	r3, r3, #9
 8000a96:	4698      	mov	r8, r3
 8000a98:	0073      	lsls	r3, r6, #1
 8000a9a:	0e1b      	lsrs	r3, r3, #24
 8000a9c:	0ff6      	lsrs	r6, r6, #31
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d01b      	beq.n	8000ada <__aeabi_fdiv+0x76>
 8000aa2:	2bff      	cmp	r3, #255	@ 0xff
 8000aa4:	d013      	beq.n	8000ace <__aeabi_fdiv+0x6a>
 8000aa6:	4642      	mov	r2, r8
 8000aa8:	2180      	movs	r1, #128	@ 0x80
 8000aaa:	00d2      	lsls	r2, r2, #3
 8000aac:	04c9      	lsls	r1, r1, #19
 8000aae:	4311      	orrs	r1, r2
 8000ab0:	4688      	mov	r8, r1
 8000ab2:	2000      	movs	r0, #0
 8000ab4:	3b7f      	subs	r3, #127	@ 0x7f
 8000ab6:	0029      	movs	r1, r5
 8000ab8:	1aff      	subs	r7, r7, r3
 8000aba:	464b      	mov	r3, r9
 8000abc:	4071      	eors	r1, r6
 8000abe:	b2c9      	uxtb	r1, r1
 8000ac0:	2b0f      	cmp	r3, #15
 8000ac2:	d900      	bls.n	8000ac6 <__aeabi_fdiv+0x62>
 8000ac4:	e0b5      	b.n	8000c32 <__aeabi_fdiv+0x1ce>
 8000ac6:	4a74      	ldr	r2, [pc, #464]	@ (8000c98 <__aeabi_fdiv+0x234>)
 8000ac8:	009b      	lsls	r3, r3, #2
 8000aca:	58d3      	ldr	r3, [r2, r3]
 8000acc:	469f      	mov	pc, r3
 8000ace:	4643      	mov	r3, r8
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d13f      	bne.n	8000b54 <__aeabi_fdiv+0xf0>
 8000ad4:	3fff      	subs	r7, #255	@ 0xff
 8000ad6:	3302      	adds	r3, #2
 8000ad8:	e003      	b.n	8000ae2 <__aeabi_fdiv+0x7e>
 8000ada:	4643      	mov	r3, r8
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d12d      	bne.n	8000b3c <__aeabi_fdiv+0xd8>
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	0029      	movs	r1, r5
 8000ae4:	464a      	mov	r2, r9
 8000ae6:	4071      	eors	r1, r6
 8000ae8:	b2c9      	uxtb	r1, r1
 8000aea:	431a      	orrs	r2, r3
 8000aec:	2a0e      	cmp	r2, #14
 8000aee:	d838      	bhi.n	8000b62 <__aeabi_fdiv+0xfe>
 8000af0:	486a      	ldr	r0, [pc, #424]	@ (8000c9c <__aeabi_fdiv+0x238>)
 8000af2:	0092      	lsls	r2, r2, #2
 8000af4:	5882      	ldr	r2, [r0, r2]
 8000af6:	4697      	mov	pc, r2
 8000af8:	2c00      	cmp	r4, #0
 8000afa:	d113      	bne.n	8000b24 <__aeabi_fdiv+0xc0>
 8000afc:	2304      	movs	r3, #4
 8000afe:	4699      	mov	r9, r3
 8000b00:	3b03      	subs	r3, #3
 8000b02:	2700      	movs	r7, #0
 8000b04:	469a      	mov	sl, r3
 8000b06:	e7c4      	b.n	8000a92 <__aeabi_fdiv+0x2e>
 8000b08:	2c00      	cmp	r4, #0
 8000b0a:	d105      	bne.n	8000b18 <__aeabi_fdiv+0xb4>
 8000b0c:	2308      	movs	r3, #8
 8000b0e:	4699      	mov	r9, r3
 8000b10:	3b06      	subs	r3, #6
 8000b12:	27ff      	movs	r7, #255	@ 0xff
 8000b14:	469a      	mov	sl, r3
 8000b16:	e7bc      	b.n	8000a92 <__aeabi_fdiv+0x2e>
 8000b18:	230c      	movs	r3, #12
 8000b1a:	4699      	mov	r9, r3
 8000b1c:	3b09      	subs	r3, #9
 8000b1e:	27ff      	movs	r7, #255	@ 0xff
 8000b20:	469a      	mov	sl, r3
 8000b22:	e7b6      	b.n	8000a92 <__aeabi_fdiv+0x2e>
 8000b24:	0020      	movs	r0, r4
 8000b26:	f002 fc69 	bl	80033fc <__clzsi2>
 8000b2a:	2776      	movs	r7, #118	@ 0x76
 8000b2c:	1f43      	subs	r3, r0, #5
 8000b2e:	409c      	lsls	r4, r3
 8000b30:	2300      	movs	r3, #0
 8000b32:	427f      	negs	r7, r7
 8000b34:	4699      	mov	r9, r3
 8000b36:	469a      	mov	sl, r3
 8000b38:	1a3f      	subs	r7, r7, r0
 8000b3a:	e7aa      	b.n	8000a92 <__aeabi_fdiv+0x2e>
 8000b3c:	4640      	mov	r0, r8
 8000b3e:	f002 fc5d 	bl	80033fc <__clzsi2>
 8000b42:	4642      	mov	r2, r8
 8000b44:	1f43      	subs	r3, r0, #5
 8000b46:	409a      	lsls	r2, r3
 8000b48:	2376      	movs	r3, #118	@ 0x76
 8000b4a:	425b      	negs	r3, r3
 8000b4c:	1a1b      	subs	r3, r3, r0
 8000b4e:	4690      	mov	r8, r2
 8000b50:	2000      	movs	r0, #0
 8000b52:	e7b0      	b.n	8000ab6 <__aeabi_fdiv+0x52>
 8000b54:	2303      	movs	r3, #3
 8000b56:	464a      	mov	r2, r9
 8000b58:	431a      	orrs	r2, r3
 8000b5a:	4691      	mov	r9, r2
 8000b5c:	2003      	movs	r0, #3
 8000b5e:	33fc      	adds	r3, #252	@ 0xfc
 8000b60:	e7a9      	b.n	8000ab6 <__aeabi_fdiv+0x52>
 8000b62:	000d      	movs	r5, r1
 8000b64:	20ff      	movs	r0, #255	@ 0xff
 8000b66:	2200      	movs	r2, #0
 8000b68:	05c0      	lsls	r0, r0, #23
 8000b6a:	07ed      	lsls	r5, r5, #31
 8000b6c:	4310      	orrs	r0, r2
 8000b6e:	4328      	orrs	r0, r5
 8000b70:	bce0      	pop	{r5, r6, r7}
 8000b72:	46ba      	mov	sl, r7
 8000b74:	46b1      	mov	r9, r6
 8000b76:	46a8      	mov	r8, r5
 8000b78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b7a:	000d      	movs	r5, r1
 8000b7c:	2000      	movs	r0, #0
 8000b7e:	2200      	movs	r2, #0
 8000b80:	e7f2      	b.n	8000b68 <__aeabi_fdiv+0x104>
 8000b82:	4653      	mov	r3, sl
 8000b84:	2b02      	cmp	r3, #2
 8000b86:	d0ed      	beq.n	8000b64 <__aeabi_fdiv+0x100>
 8000b88:	2b03      	cmp	r3, #3
 8000b8a:	d033      	beq.n	8000bf4 <__aeabi_fdiv+0x190>
 8000b8c:	46a0      	mov	r8, r4
 8000b8e:	2b01      	cmp	r3, #1
 8000b90:	d105      	bne.n	8000b9e <__aeabi_fdiv+0x13a>
 8000b92:	2000      	movs	r0, #0
 8000b94:	2200      	movs	r2, #0
 8000b96:	e7e7      	b.n	8000b68 <__aeabi_fdiv+0x104>
 8000b98:	0035      	movs	r5, r6
 8000b9a:	2803      	cmp	r0, #3
 8000b9c:	d07a      	beq.n	8000c94 <__aeabi_fdiv+0x230>
 8000b9e:	003b      	movs	r3, r7
 8000ba0:	337f      	adds	r3, #127	@ 0x7f
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	dd2d      	ble.n	8000c02 <__aeabi_fdiv+0x19e>
 8000ba6:	4642      	mov	r2, r8
 8000ba8:	0752      	lsls	r2, r2, #29
 8000baa:	d007      	beq.n	8000bbc <__aeabi_fdiv+0x158>
 8000bac:	220f      	movs	r2, #15
 8000bae:	4641      	mov	r1, r8
 8000bb0:	400a      	ands	r2, r1
 8000bb2:	2a04      	cmp	r2, #4
 8000bb4:	d002      	beq.n	8000bbc <__aeabi_fdiv+0x158>
 8000bb6:	2204      	movs	r2, #4
 8000bb8:	4694      	mov	ip, r2
 8000bba:	44e0      	add	r8, ip
 8000bbc:	4642      	mov	r2, r8
 8000bbe:	0112      	lsls	r2, r2, #4
 8000bc0:	d505      	bpl.n	8000bce <__aeabi_fdiv+0x16a>
 8000bc2:	4642      	mov	r2, r8
 8000bc4:	4b36      	ldr	r3, [pc, #216]	@ (8000ca0 <__aeabi_fdiv+0x23c>)
 8000bc6:	401a      	ands	r2, r3
 8000bc8:	003b      	movs	r3, r7
 8000bca:	4690      	mov	r8, r2
 8000bcc:	3380      	adds	r3, #128	@ 0x80
 8000bce:	2bfe      	cmp	r3, #254	@ 0xfe
 8000bd0:	dcc8      	bgt.n	8000b64 <__aeabi_fdiv+0x100>
 8000bd2:	4642      	mov	r2, r8
 8000bd4:	0192      	lsls	r2, r2, #6
 8000bd6:	0a52      	lsrs	r2, r2, #9
 8000bd8:	b2d8      	uxtb	r0, r3
 8000bda:	e7c5      	b.n	8000b68 <__aeabi_fdiv+0x104>
 8000bdc:	2280      	movs	r2, #128	@ 0x80
 8000bde:	2500      	movs	r5, #0
 8000be0:	20ff      	movs	r0, #255	@ 0xff
 8000be2:	03d2      	lsls	r2, r2, #15
 8000be4:	e7c0      	b.n	8000b68 <__aeabi_fdiv+0x104>
 8000be6:	2280      	movs	r2, #128	@ 0x80
 8000be8:	03d2      	lsls	r2, r2, #15
 8000bea:	4214      	tst	r4, r2
 8000bec:	d002      	beq.n	8000bf4 <__aeabi_fdiv+0x190>
 8000bee:	4643      	mov	r3, r8
 8000bf0:	4213      	tst	r3, r2
 8000bf2:	d049      	beq.n	8000c88 <__aeabi_fdiv+0x224>
 8000bf4:	2280      	movs	r2, #128	@ 0x80
 8000bf6:	03d2      	lsls	r2, r2, #15
 8000bf8:	4322      	orrs	r2, r4
 8000bfa:	0252      	lsls	r2, r2, #9
 8000bfc:	20ff      	movs	r0, #255	@ 0xff
 8000bfe:	0a52      	lsrs	r2, r2, #9
 8000c00:	e7b2      	b.n	8000b68 <__aeabi_fdiv+0x104>
 8000c02:	2201      	movs	r2, #1
 8000c04:	1ad3      	subs	r3, r2, r3
 8000c06:	2b1b      	cmp	r3, #27
 8000c08:	dcc3      	bgt.n	8000b92 <__aeabi_fdiv+0x12e>
 8000c0a:	4642      	mov	r2, r8
 8000c0c:	40da      	lsrs	r2, r3
 8000c0e:	4643      	mov	r3, r8
 8000c10:	379e      	adds	r7, #158	@ 0x9e
 8000c12:	40bb      	lsls	r3, r7
 8000c14:	1e59      	subs	r1, r3, #1
 8000c16:	418b      	sbcs	r3, r1
 8000c18:	431a      	orrs	r2, r3
 8000c1a:	0753      	lsls	r3, r2, #29
 8000c1c:	d004      	beq.n	8000c28 <__aeabi_fdiv+0x1c4>
 8000c1e:	230f      	movs	r3, #15
 8000c20:	4013      	ands	r3, r2
 8000c22:	2b04      	cmp	r3, #4
 8000c24:	d000      	beq.n	8000c28 <__aeabi_fdiv+0x1c4>
 8000c26:	3204      	adds	r2, #4
 8000c28:	0153      	lsls	r3, r2, #5
 8000c2a:	d529      	bpl.n	8000c80 <__aeabi_fdiv+0x21c>
 8000c2c:	2001      	movs	r0, #1
 8000c2e:	2200      	movs	r2, #0
 8000c30:	e79a      	b.n	8000b68 <__aeabi_fdiv+0x104>
 8000c32:	4642      	mov	r2, r8
 8000c34:	0163      	lsls	r3, r4, #5
 8000c36:	0155      	lsls	r5, r2, #5
 8000c38:	42ab      	cmp	r3, r5
 8000c3a:	d215      	bcs.n	8000c68 <__aeabi_fdiv+0x204>
 8000c3c:	201b      	movs	r0, #27
 8000c3e:	2200      	movs	r2, #0
 8000c40:	3f01      	subs	r7, #1
 8000c42:	2601      	movs	r6, #1
 8000c44:	001c      	movs	r4, r3
 8000c46:	0052      	lsls	r2, r2, #1
 8000c48:	005b      	lsls	r3, r3, #1
 8000c4a:	2c00      	cmp	r4, #0
 8000c4c:	db01      	blt.n	8000c52 <__aeabi_fdiv+0x1ee>
 8000c4e:	429d      	cmp	r5, r3
 8000c50:	d801      	bhi.n	8000c56 <__aeabi_fdiv+0x1f2>
 8000c52:	1b5b      	subs	r3, r3, r5
 8000c54:	4332      	orrs	r2, r6
 8000c56:	3801      	subs	r0, #1
 8000c58:	2800      	cmp	r0, #0
 8000c5a:	d1f3      	bne.n	8000c44 <__aeabi_fdiv+0x1e0>
 8000c5c:	1e58      	subs	r0, r3, #1
 8000c5e:	4183      	sbcs	r3, r0
 8000c60:	4313      	orrs	r3, r2
 8000c62:	4698      	mov	r8, r3
 8000c64:	000d      	movs	r5, r1
 8000c66:	e79a      	b.n	8000b9e <__aeabi_fdiv+0x13a>
 8000c68:	201a      	movs	r0, #26
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	1b5b      	subs	r3, r3, r5
 8000c6e:	e7e8      	b.n	8000c42 <__aeabi_fdiv+0x1de>
 8000c70:	3b02      	subs	r3, #2
 8000c72:	425a      	negs	r2, r3
 8000c74:	4153      	adcs	r3, r2
 8000c76:	425b      	negs	r3, r3
 8000c78:	0035      	movs	r5, r6
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	b2d8      	uxtb	r0, r3
 8000c7e:	e773      	b.n	8000b68 <__aeabi_fdiv+0x104>
 8000c80:	0192      	lsls	r2, r2, #6
 8000c82:	2000      	movs	r0, #0
 8000c84:	0a52      	lsrs	r2, r2, #9
 8000c86:	e76f      	b.n	8000b68 <__aeabi_fdiv+0x104>
 8000c88:	431a      	orrs	r2, r3
 8000c8a:	0252      	lsls	r2, r2, #9
 8000c8c:	0035      	movs	r5, r6
 8000c8e:	20ff      	movs	r0, #255	@ 0xff
 8000c90:	0a52      	lsrs	r2, r2, #9
 8000c92:	e769      	b.n	8000b68 <__aeabi_fdiv+0x104>
 8000c94:	4644      	mov	r4, r8
 8000c96:	e7ad      	b.n	8000bf4 <__aeabi_fdiv+0x190>
 8000c98:	0800e8e8 	.word	0x0800e8e8
 8000c9c:	0800e928 	.word	0x0800e928
 8000ca0:	f7ffffff 	.word	0xf7ffffff

08000ca4 <__eqsf2>:
 8000ca4:	b570      	push	{r4, r5, r6, lr}
 8000ca6:	0042      	lsls	r2, r0, #1
 8000ca8:	024e      	lsls	r6, r1, #9
 8000caa:	004c      	lsls	r4, r1, #1
 8000cac:	0245      	lsls	r5, r0, #9
 8000cae:	0a6d      	lsrs	r5, r5, #9
 8000cb0:	0e12      	lsrs	r2, r2, #24
 8000cb2:	0fc3      	lsrs	r3, r0, #31
 8000cb4:	0a76      	lsrs	r6, r6, #9
 8000cb6:	0e24      	lsrs	r4, r4, #24
 8000cb8:	0fc9      	lsrs	r1, r1, #31
 8000cba:	2aff      	cmp	r2, #255	@ 0xff
 8000cbc:	d010      	beq.n	8000ce0 <__eqsf2+0x3c>
 8000cbe:	2cff      	cmp	r4, #255	@ 0xff
 8000cc0:	d00c      	beq.n	8000cdc <__eqsf2+0x38>
 8000cc2:	2001      	movs	r0, #1
 8000cc4:	42a2      	cmp	r2, r4
 8000cc6:	d10a      	bne.n	8000cde <__eqsf2+0x3a>
 8000cc8:	42b5      	cmp	r5, r6
 8000cca:	d108      	bne.n	8000cde <__eqsf2+0x3a>
 8000ccc:	428b      	cmp	r3, r1
 8000cce:	d00f      	beq.n	8000cf0 <__eqsf2+0x4c>
 8000cd0:	2a00      	cmp	r2, #0
 8000cd2:	d104      	bne.n	8000cde <__eqsf2+0x3a>
 8000cd4:	0028      	movs	r0, r5
 8000cd6:	1e43      	subs	r3, r0, #1
 8000cd8:	4198      	sbcs	r0, r3
 8000cda:	e000      	b.n	8000cde <__eqsf2+0x3a>
 8000cdc:	2001      	movs	r0, #1
 8000cde:	bd70      	pop	{r4, r5, r6, pc}
 8000ce0:	2001      	movs	r0, #1
 8000ce2:	2cff      	cmp	r4, #255	@ 0xff
 8000ce4:	d1fb      	bne.n	8000cde <__eqsf2+0x3a>
 8000ce6:	4335      	orrs	r5, r6
 8000ce8:	d1f9      	bne.n	8000cde <__eqsf2+0x3a>
 8000cea:	404b      	eors	r3, r1
 8000cec:	0018      	movs	r0, r3
 8000cee:	e7f6      	b.n	8000cde <__eqsf2+0x3a>
 8000cf0:	2000      	movs	r0, #0
 8000cf2:	e7f4      	b.n	8000cde <__eqsf2+0x3a>

08000cf4 <__gesf2>:
 8000cf4:	b530      	push	{r4, r5, lr}
 8000cf6:	0042      	lsls	r2, r0, #1
 8000cf8:	0244      	lsls	r4, r0, #9
 8000cfa:	024d      	lsls	r5, r1, #9
 8000cfc:	0fc3      	lsrs	r3, r0, #31
 8000cfe:	0048      	lsls	r0, r1, #1
 8000d00:	0a64      	lsrs	r4, r4, #9
 8000d02:	0e12      	lsrs	r2, r2, #24
 8000d04:	0a6d      	lsrs	r5, r5, #9
 8000d06:	0e00      	lsrs	r0, r0, #24
 8000d08:	0fc9      	lsrs	r1, r1, #31
 8000d0a:	2aff      	cmp	r2, #255	@ 0xff
 8000d0c:	d019      	beq.n	8000d42 <__gesf2+0x4e>
 8000d0e:	28ff      	cmp	r0, #255	@ 0xff
 8000d10:	d00b      	beq.n	8000d2a <__gesf2+0x36>
 8000d12:	2a00      	cmp	r2, #0
 8000d14:	d11e      	bne.n	8000d54 <__gesf2+0x60>
 8000d16:	2800      	cmp	r0, #0
 8000d18:	d10b      	bne.n	8000d32 <__gesf2+0x3e>
 8000d1a:	2d00      	cmp	r5, #0
 8000d1c:	d027      	beq.n	8000d6e <__gesf2+0x7a>
 8000d1e:	2c00      	cmp	r4, #0
 8000d20:	d134      	bne.n	8000d8c <__gesf2+0x98>
 8000d22:	2900      	cmp	r1, #0
 8000d24:	d02f      	beq.n	8000d86 <__gesf2+0x92>
 8000d26:	0008      	movs	r0, r1
 8000d28:	bd30      	pop	{r4, r5, pc}
 8000d2a:	2d00      	cmp	r5, #0
 8000d2c:	d128      	bne.n	8000d80 <__gesf2+0x8c>
 8000d2e:	2a00      	cmp	r2, #0
 8000d30:	d101      	bne.n	8000d36 <__gesf2+0x42>
 8000d32:	2c00      	cmp	r4, #0
 8000d34:	d0f5      	beq.n	8000d22 <__gesf2+0x2e>
 8000d36:	428b      	cmp	r3, r1
 8000d38:	d107      	bne.n	8000d4a <__gesf2+0x56>
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d023      	beq.n	8000d86 <__gesf2+0x92>
 8000d3e:	0018      	movs	r0, r3
 8000d40:	e7f2      	b.n	8000d28 <__gesf2+0x34>
 8000d42:	2c00      	cmp	r4, #0
 8000d44:	d11c      	bne.n	8000d80 <__gesf2+0x8c>
 8000d46:	28ff      	cmp	r0, #255	@ 0xff
 8000d48:	d014      	beq.n	8000d74 <__gesf2+0x80>
 8000d4a:	1e58      	subs	r0, r3, #1
 8000d4c:	2302      	movs	r3, #2
 8000d4e:	4018      	ands	r0, r3
 8000d50:	3801      	subs	r0, #1
 8000d52:	e7e9      	b.n	8000d28 <__gesf2+0x34>
 8000d54:	2800      	cmp	r0, #0
 8000d56:	d0f8      	beq.n	8000d4a <__gesf2+0x56>
 8000d58:	428b      	cmp	r3, r1
 8000d5a:	d1f6      	bne.n	8000d4a <__gesf2+0x56>
 8000d5c:	4282      	cmp	r2, r0
 8000d5e:	dcf4      	bgt.n	8000d4a <__gesf2+0x56>
 8000d60:	dbeb      	blt.n	8000d3a <__gesf2+0x46>
 8000d62:	42ac      	cmp	r4, r5
 8000d64:	d8f1      	bhi.n	8000d4a <__gesf2+0x56>
 8000d66:	2000      	movs	r0, #0
 8000d68:	42ac      	cmp	r4, r5
 8000d6a:	d2dd      	bcs.n	8000d28 <__gesf2+0x34>
 8000d6c:	e7e5      	b.n	8000d3a <__gesf2+0x46>
 8000d6e:	2c00      	cmp	r4, #0
 8000d70:	d0da      	beq.n	8000d28 <__gesf2+0x34>
 8000d72:	e7ea      	b.n	8000d4a <__gesf2+0x56>
 8000d74:	2d00      	cmp	r5, #0
 8000d76:	d103      	bne.n	8000d80 <__gesf2+0x8c>
 8000d78:	428b      	cmp	r3, r1
 8000d7a:	d1e6      	bne.n	8000d4a <__gesf2+0x56>
 8000d7c:	2000      	movs	r0, #0
 8000d7e:	e7d3      	b.n	8000d28 <__gesf2+0x34>
 8000d80:	2002      	movs	r0, #2
 8000d82:	4240      	negs	r0, r0
 8000d84:	e7d0      	b.n	8000d28 <__gesf2+0x34>
 8000d86:	2001      	movs	r0, #1
 8000d88:	4240      	negs	r0, r0
 8000d8a:	e7cd      	b.n	8000d28 <__gesf2+0x34>
 8000d8c:	428b      	cmp	r3, r1
 8000d8e:	d0e8      	beq.n	8000d62 <__gesf2+0x6e>
 8000d90:	e7db      	b.n	8000d4a <__gesf2+0x56>
 8000d92:	46c0      	nop			@ (mov r8, r8)

08000d94 <__lesf2>:
 8000d94:	b530      	push	{r4, r5, lr}
 8000d96:	0042      	lsls	r2, r0, #1
 8000d98:	0244      	lsls	r4, r0, #9
 8000d9a:	024d      	lsls	r5, r1, #9
 8000d9c:	0fc3      	lsrs	r3, r0, #31
 8000d9e:	0048      	lsls	r0, r1, #1
 8000da0:	0a64      	lsrs	r4, r4, #9
 8000da2:	0e12      	lsrs	r2, r2, #24
 8000da4:	0a6d      	lsrs	r5, r5, #9
 8000da6:	0e00      	lsrs	r0, r0, #24
 8000da8:	0fc9      	lsrs	r1, r1, #31
 8000daa:	2aff      	cmp	r2, #255	@ 0xff
 8000dac:	d01a      	beq.n	8000de4 <__lesf2+0x50>
 8000dae:	28ff      	cmp	r0, #255	@ 0xff
 8000db0:	d00e      	beq.n	8000dd0 <__lesf2+0x3c>
 8000db2:	2a00      	cmp	r2, #0
 8000db4:	d11e      	bne.n	8000df4 <__lesf2+0x60>
 8000db6:	2800      	cmp	r0, #0
 8000db8:	d10e      	bne.n	8000dd8 <__lesf2+0x44>
 8000dba:	2d00      	cmp	r5, #0
 8000dbc:	d02a      	beq.n	8000e14 <__lesf2+0x80>
 8000dbe:	2c00      	cmp	r4, #0
 8000dc0:	d00c      	beq.n	8000ddc <__lesf2+0x48>
 8000dc2:	428b      	cmp	r3, r1
 8000dc4:	d01d      	beq.n	8000e02 <__lesf2+0x6e>
 8000dc6:	1e58      	subs	r0, r3, #1
 8000dc8:	2302      	movs	r3, #2
 8000dca:	4018      	ands	r0, r3
 8000dcc:	3801      	subs	r0, #1
 8000dce:	e010      	b.n	8000df2 <__lesf2+0x5e>
 8000dd0:	2d00      	cmp	r5, #0
 8000dd2:	d10d      	bne.n	8000df0 <__lesf2+0x5c>
 8000dd4:	2a00      	cmp	r2, #0
 8000dd6:	d120      	bne.n	8000e1a <__lesf2+0x86>
 8000dd8:	2c00      	cmp	r4, #0
 8000dda:	d11e      	bne.n	8000e1a <__lesf2+0x86>
 8000ddc:	2900      	cmp	r1, #0
 8000dde:	d023      	beq.n	8000e28 <__lesf2+0x94>
 8000de0:	0008      	movs	r0, r1
 8000de2:	e006      	b.n	8000df2 <__lesf2+0x5e>
 8000de4:	2c00      	cmp	r4, #0
 8000de6:	d103      	bne.n	8000df0 <__lesf2+0x5c>
 8000de8:	28ff      	cmp	r0, #255	@ 0xff
 8000dea:	d1ec      	bne.n	8000dc6 <__lesf2+0x32>
 8000dec:	2d00      	cmp	r5, #0
 8000dee:	d017      	beq.n	8000e20 <__lesf2+0x8c>
 8000df0:	2002      	movs	r0, #2
 8000df2:	bd30      	pop	{r4, r5, pc}
 8000df4:	2800      	cmp	r0, #0
 8000df6:	d0e6      	beq.n	8000dc6 <__lesf2+0x32>
 8000df8:	428b      	cmp	r3, r1
 8000dfa:	d1e4      	bne.n	8000dc6 <__lesf2+0x32>
 8000dfc:	4282      	cmp	r2, r0
 8000dfe:	dce2      	bgt.n	8000dc6 <__lesf2+0x32>
 8000e00:	db04      	blt.n	8000e0c <__lesf2+0x78>
 8000e02:	42ac      	cmp	r4, r5
 8000e04:	d8df      	bhi.n	8000dc6 <__lesf2+0x32>
 8000e06:	2000      	movs	r0, #0
 8000e08:	42ac      	cmp	r4, r5
 8000e0a:	d2f2      	bcs.n	8000df2 <__lesf2+0x5e>
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d00b      	beq.n	8000e28 <__lesf2+0x94>
 8000e10:	0018      	movs	r0, r3
 8000e12:	e7ee      	b.n	8000df2 <__lesf2+0x5e>
 8000e14:	2c00      	cmp	r4, #0
 8000e16:	d0ec      	beq.n	8000df2 <__lesf2+0x5e>
 8000e18:	e7d5      	b.n	8000dc6 <__lesf2+0x32>
 8000e1a:	428b      	cmp	r3, r1
 8000e1c:	d1d3      	bne.n	8000dc6 <__lesf2+0x32>
 8000e1e:	e7f5      	b.n	8000e0c <__lesf2+0x78>
 8000e20:	2000      	movs	r0, #0
 8000e22:	428b      	cmp	r3, r1
 8000e24:	d0e5      	beq.n	8000df2 <__lesf2+0x5e>
 8000e26:	e7ce      	b.n	8000dc6 <__lesf2+0x32>
 8000e28:	2001      	movs	r0, #1
 8000e2a:	4240      	negs	r0, r0
 8000e2c:	e7e1      	b.n	8000df2 <__lesf2+0x5e>
 8000e2e:	46c0      	nop			@ (mov r8, r8)

08000e30 <__aeabi_fmul>:
 8000e30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e32:	464f      	mov	r7, r9
 8000e34:	4646      	mov	r6, r8
 8000e36:	46d6      	mov	lr, sl
 8000e38:	0243      	lsls	r3, r0, #9
 8000e3a:	0a5b      	lsrs	r3, r3, #9
 8000e3c:	0045      	lsls	r5, r0, #1
 8000e3e:	b5c0      	push	{r6, r7, lr}
 8000e40:	4699      	mov	r9, r3
 8000e42:	1c0f      	adds	r7, r1, #0
 8000e44:	0e2d      	lsrs	r5, r5, #24
 8000e46:	0fc6      	lsrs	r6, r0, #31
 8000e48:	2d00      	cmp	r5, #0
 8000e4a:	d100      	bne.n	8000e4e <__aeabi_fmul+0x1e>
 8000e4c:	e088      	b.n	8000f60 <__aeabi_fmul+0x130>
 8000e4e:	2dff      	cmp	r5, #255	@ 0xff
 8000e50:	d100      	bne.n	8000e54 <__aeabi_fmul+0x24>
 8000e52:	e08d      	b.n	8000f70 <__aeabi_fmul+0x140>
 8000e54:	2280      	movs	r2, #128	@ 0x80
 8000e56:	00db      	lsls	r3, r3, #3
 8000e58:	04d2      	lsls	r2, r2, #19
 8000e5a:	431a      	orrs	r2, r3
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	4691      	mov	r9, r2
 8000e60:	4698      	mov	r8, r3
 8000e62:	469a      	mov	sl, r3
 8000e64:	3d7f      	subs	r5, #127	@ 0x7f
 8000e66:	027c      	lsls	r4, r7, #9
 8000e68:	007b      	lsls	r3, r7, #1
 8000e6a:	0a64      	lsrs	r4, r4, #9
 8000e6c:	0e1b      	lsrs	r3, r3, #24
 8000e6e:	0fff      	lsrs	r7, r7, #31
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d068      	beq.n	8000f46 <__aeabi_fmul+0x116>
 8000e74:	2bff      	cmp	r3, #255	@ 0xff
 8000e76:	d021      	beq.n	8000ebc <__aeabi_fmul+0x8c>
 8000e78:	2280      	movs	r2, #128	@ 0x80
 8000e7a:	00e4      	lsls	r4, r4, #3
 8000e7c:	04d2      	lsls	r2, r2, #19
 8000e7e:	4314      	orrs	r4, r2
 8000e80:	4642      	mov	r2, r8
 8000e82:	3b7f      	subs	r3, #127	@ 0x7f
 8000e84:	195b      	adds	r3, r3, r5
 8000e86:	2100      	movs	r1, #0
 8000e88:	1c5d      	adds	r5, r3, #1
 8000e8a:	2a0a      	cmp	r2, #10
 8000e8c:	dc2e      	bgt.n	8000eec <__aeabi_fmul+0xbc>
 8000e8e:	407e      	eors	r6, r7
 8000e90:	4642      	mov	r2, r8
 8000e92:	2a02      	cmp	r2, #2
 8000e94:	dc23      	bgt.n	8000ede <__aeabi_fmul+0xae>
 8000e96:	3a01      	subs	r2, #1
 8000e98:	2a01      	cmp	r2, #1
 8000e9a:	d900      	bls.n	8000e9e <__aeabi_fmul+0x6e>
 8000e9c:	e0bd      	b.n	800101a <__aeabi_fmul+0x1ea>
 8000e9e:	2902      	cmp	r1, #2
 8000ea0:	d06e      	beq.n	8000f80 <__aeabi_fmul+0x150>
 8000ea2:	2901      	cmp	r1, #1
 8000ea4:	d12c      	bne.n	8000f00 <__aeabi_fmul+0xd0>
 8000ea6:	2000      	movs	r0, #0
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	05c0      	lsls	r0, r0, #23
 8000eac:	07f6      	lsls	r6, r6, #31
 8000eae:	4310      	orrs	r0, r2
 8000eb0:	4330      	orrs	r0, r6
 8000eb2:	bce0      	pop	{r5, r6, r7}
 8000eb4:	46ba      	mov	sl, r7
 8000eb6:	46b1      	mov	r9, r6
 8000eb8:	46a8      	mov	r8, r5
 8000eba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ebc:	002b      	movs	r3, r5
 8000ebe:	33ff      	adds	r3, #255	@ 0xff
 8000ec0:	2c00      	cmp	r4, #0
 8000ec2:	d065      	beq.n	8000f90 <__aeabi_fmul+0x160>
 8000ec4:	2203      	movs	r2, #3
 8000ec6:	4641      	mov	r1, r8
 8000ec8:	4311      	orrs	r1, r2
 8000eca:	0032      	movs	r2, r6
 8000ecc:	3501      	adds	r5, #1
 8000ece:	4688      	mov	r8, r1
 8000ed0:	407a      	eors	r2, r7
 8000ed2:	35ff      	adds	r5, #255	@ 0xff
 8000ed4:	290a      	cmp	r1, #10
 8000ed6:	dd00      	ble.n	8000eda <__aeabi_fmul+0xaa>
 8000ed8:	e0d8      	b.n	800108c <__aeabi_fmul+0x25c>
 8000eda:	0016      	movs	r6, r2
 8000edc:	2103      	movs	r1, #3
 8000ede:	4640      	mov	r0, r8
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	4082      	lsls	r2, r0
 8000ee4:	20a6      	movs	r0, #166	@ 0xa6
 8000ee6:	00c0      	lsls	r0, r0, #3
 8000ee8:	4202      	tst	r2, r0
 8000eea:	d020      	beq.n	8000f2e <__aeabi_fmul+0xfe>
 8000eec:	4653      	mov	r3, sl
 8000eee:	2b02      	cmp	r3, #2
 8000ef0:	d046      	beq.n	8000f80 <__aeabi_fmul+0x150>
 8000ef2:	2b03      	cmp	r3, #3
 8000ef4:	d100      	bne.n	8000ef8 <__aeabi_fmul+0xc8>
 8000ef6:	e0bb      	b.n	8001070 <__aeabi_fmul+0x240>
 8000ef8:	4651      	mov	r1, sl
 8000efa:	464c      	mov	r4, r9
 8000efc:	2901      	cmp	r1, #1
 8000efe:	d0d2      	beq.n	8000ea6 <__aeabi_fmul+0x76>
 8000f00:	002b      	movs	r3, r5
 8000f02:	337f      	adds	r3, #127	@ 0x7f
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	dd70      	ble.n	8000fea <__aeabi_fmul+0x1ba>
 8000f08:	0762      	lsls	r2, r4, #29
 8000f0a:	d004      	beq.n	8000f16 <__aeabi_fmul+0xe6>
 8000f0c:	220f      	movs	r2, #15
 8000f0e:	4022      	ands	r2, r4
 8000f10:	2a04      	cmp	r2, #4
 8000f12:	d000      	beq.n	8000f16 <__aeabi_fmul+0xe6>
 8000f14:	3404      	adds	r4, #4
 8000f16:	0122      	lsls	r2, r4, #4
 8000f18:	d503      	bpl.n	8000f22 <__aeabi_fmul+0xf2>
 8000f1a:	4b63      	ldr	r3, [pc, #396]	@ (80010a8 <__aeabi_fmul+0x278>)
 8000f1c:	401c      	ands	r4, r3
 8000f1e:	002b      	movs	r3, r5
 8000f20:	3380      	adds	r3, #128	@ 0x80
 8000f22:	2bfe      	cmp	r3, #254	@ 0xfe
 8000f24:	dc2c      	bgt.n	8000f80 <__aeabi_fmul+0x150>
 8000f26:	01a2      	lsls	r2, r4, #6
 8000f28:	0a52      	lsrs	r2, r2, #9
 8000f2a:	b2d8      	uxtb	r0, r3
 8000f2c:	e7bd      	b.n	8000eaa <__aeabi_fmul+0x7a>
 8000f2e:	2090      	movs	r0, #144	@ 0x90
 8000f30:	0080      	lsls	r0, r0, #2
 8000f32:	4202      	tst	r2, r0
 8000f34:	d127      	bne.n	8000f86 <__aeabi_fmul+0x156>
 8000f36:	38b9      	subs	r0, #185	@ 0xb9
 8000f38:	38ff      	subs	r0, #255	@ 0xff
 8000f3a:	4210      	tst	r0, r2
 8000f3c:	d06d      	beq.n	800101a <__aeabi_fmul+0x1ea>
 8000f3e:	003e      	movs	r6, r7
 8000f40:	46a1      	mov	r9, r4
 8000f42:	468a      	mov	sl, r1
 8000f44:	e7d2      	b.n	8000eec <__aeabi_fmul+0xbc>
 8000f46:	2c00      	cmp	r4, #0
 8000f48:	d141      	bne.n	8000fce <__aeabi_fmul+0x19e>
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	4642      	mov	r2, r8
 8000f4e:	431a      	orrs	r2, r3
 8000f50:	4690      	mov	r8, r2
 8000f52:	002b      	movs	r3, r5
 8000f54:	4642      	mov	r2, r8
 8000f56:	2101      	movs	r1, #1
 8000f58:	1c5d      	adds	r5, r3, #1
 8000f5a:	2a0a      	cmp	r2, #10
 8000f5c:	dd97      	ble.n	8000e8e <__aeabi_fmul+0x5e>
 8000f5e:	e7c5      	b.n	8000eec <__aeabi_fmul+0xbc>
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d126      	bne.n	8000fb2 <__aeabi_fmul+0x182>
 8000f64:	2304      	movs	r3, #4
 8000f66:	4698      	mov	r8, r3
 8000f68:	3b03      	subs	r3, #3
 8000f6a:	2500      	movs	r5, #0
 8000f6c:	469a      	mov	sl, r3
 8000f6e:	e77a      	b.n	8000e66 <__aeabi_fmul+0x36>
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d118      	bne.n	8000fa6 <__aeabi_fmul+0x176>
 8000f74:	2308      	movs	r3, #8
 8000f76:	4698      	mov	r8, r3
 8000f78:	3b06      	subs	r3, #6
 8000f7a:	25ff      	movs	r5, #255	@ 0xff
 8000f7c:	469a      	mov	sl, r3
 8000f7e:	e772      	b.n	8000e66 <__aeabi_fmul+0x36>
 8000f80:	20ff      	movs	r0, #255	@ 0xff
 8000f82:	2200      	movs	r2, #0
 8000f84:	e791      	b.n	8000eaa <__aeabi_fmul+0x7a>
 8000f86:	2280      	movs	r2, #128	@ 0x80
 8000f88:	2600      	movs	r6, #0
 8000f8a:	20ff      	movs	r0, #255	@ 0xff
 8000f8c:	03d2      	lsls	r2, r2, #15
 8000f8e:	e78c      	b.n	8000eaa <__aeabi_fmul+0x7a>
 8000f90:	4641      	mov	r1, r8
 8000f92:	2202      	movs	r2, #2
 8000f94:	3501      	adds	r5, #1
 8000f96:	4311      	orrs	r1, r2
 8000f98:	4688      	mov	r8, r1
 8000f9a:	35ff      	adds	r5, #255	@ 0xff
 8000f9c:	290a      	cmp	r1, #10
 8000f9e:	dca5      	bgt.n	8000eec <__aeabi_fmul+0xbc>
 8000fa0:	2102      	movs	r1, #2
 8000fa2:	407e      	eors	r6, r7
 8000fa4:	e774      	b.n	8000e90 <__aeabi_fmul+0x60>
 8000fa6:	230c      	movs	r3, #12
 8000fa8:	4698      	mov	r8, r3
 8000faa:	3b09      	subs	r3, #9
 8000fac:	25ff      	movs	r5, #255	@ 0xff
 8000fae:	469a      	mov	sl, r3
 8000fb0:	e759      	b.n	8000e66 <__aeabi_fmul+0x36>
 8000fb2:	0018      	movs	r0, r3
 8000fb4:	f002 fa22 	bl	80033fc <__clzsi2>
 8000fb8:	464a      	mov	r2, r9
 8000fba:	1f43      	subs	r3, r0, #5
 8000fbc:	2576      	movs	r5, #118	@ 0x76
 8000fbe:	409a      	lsls	r2, r3
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	426d      	negs	r5, r5
 8000fc4:	4691      	mov	r9, r2
 8000fc6:	4698      	mov	r8, r3
 8000fc8:	469a      	mov	sl, r3
 8000fca:	1a2d      	subs	r5, r5, r0
 8000fcc:	e74b      	b.n	8000e66 <__aeabi_fmul+0x36>
 8000fce:	0020      	movs	r0, r4
 8000fd0:	f002 fa14 	bl	80033fc <__clzsi2>
 8000fd4:	4642      	mov	r2, r8
 8000fd6:	1f43      	subs	r3, r0, #5
 8000fd8:	409c      	lsls	r4, r3
 8000fda:	1a2b      	subs	r3, r5, r0
 8000fdc:	3b76      	subs	r3, #118	@ 0x76
 8000fde:	2100      	movs	r1, #0
 8000fe0:	1c5d      	adds	r5, r3, #1
 8000fe2:	2a0a      	cmp	r2, #10
 8000fe4:	dc00      	bgt.n	8000fe8 <__aeabi_fmul+0x1b8>
 8000fe6:	e752      	b.n	8000e8e <__aeabi_fmul+0x5e>
 8000fe8:	e780      	b.n	8000eec <__aeabi_fmul+0xbc>
 8000fea:	2201      	movs	r2, #1
 8000fec:	1ad3      	subs	r3, r2, r3
 8000fee:	2b1b      	cmp	r3, #27
 8000ff0:	dd00      	ble.n	8000ff4 <__aeabi_fmul+0x1c4>
 8000ff2:	e758      	b.n	8000ea6 <__aeabi_fmul+0x76>
 8000ff4:	359e      	adds	r5, #158	@ 0x9e
 8000ff6:	0022      	movs	r2, r4
 8000ff8:	40ac      	lsls	r4, r5
 8000ffa:	40da      	lsrs	r2, r3
 8000ffc:	1e63      	subs	r3, r4, #1
 8000ffe:	419c      	sbcs	r4, r3
 8001000:	4322      	orrs	r2, r4
 8001002:	0753      	lsls	r3, r2, #29
 8001004:	d004      	beq.n	8001010 <__aeabi_fmul+0x1e0>
 8001006:	230f      	movs	r3, #15
 8001008:	4013      	ands	r3, r2
 800100a:	2b04      	cmp	r3, #4
 800100c:	d000      	beq.n	8001010 <__aeabi_fmul+0x1e0>
 800100e:	3204      	adds	r2, #4
 8001010:	0153      	lsls	r3, r2, #5
 8001012:	d537      	bpl.n	8001084 <__aeabi_fmul+0x254>
 8001014:	2001      	movs	r0, #1
 8001016:	2200      	movs	r2, #0
 8001018:	e747      	b.n	8000eaa <__aeabi_fmul+0x7a>
 800101a:	0c21      	lsrs	r1, r4, #16
 800101c:	464a      	mov	r2, r9
 800101e:	0424      	lsls	r4, r4, #16
 8001020:	0c24      	lsrs	r4, r4, #16
 8001022:	0027      	movs	r7, r4
 8001024:	0c10      	lsrs	r0, r2, #16
 8001026:	0412      	lsls	r2, r2, #16
 8001028:	0c12      	lsrs	r2, r2, #16
 800102a:	4344      	muls	r4, r0
 800102c:	4357      	muls	r7, r2
 800102e:	4348      	muls	r0, r1
 8001030:	4351      	muls	r1, r2
 8001032:	0c3a      	lsrs	r2, r7, #16
 8001034:	1909      	adds	r1, r1, r4
 8001036:	1852      	adds	r2, r2, r1
 8001038:	4294      	cmp	r4, r2
 800103a:	d903      	bls.n	8001044 <__aeabi_fmul+0x214>
 800103c:	2180      	movs	r1, #128	@ 0x80
 800103e:	0249      	lsls	r1, r1, #9
 8001040:	468c      	mov	ip, r1
 8001042:	4460      	add	r0, ip
 8001044:	043f      	lsls	r7, r7, #16
 8001046:	0411      	lsls	r1, r2, #16
 8001048:	0c3f      	lsrs	r7, r7, #16
 800104a:	19c9      	adds	r1, r1, r7
 800104c:	018c      	lsls	r4, r1, #6
 800104e:	1e67      	subs	r7, r4, #1
 8001050:	41bc      	sbcs	r4, r7
 8001052:	0c12      	lsrs	r2, r2, #16
 8001054:	0e89      	lsrs	r1, r1, #26
 8001056:	1812      	adds	r2, r2, r0
 8001058:	430c      	orrs	r4, r1
 800105a:	0192      	lsls	r2, r2, #6
 800105c:	4314      	orrs	r4, r2
 800105e:	0112      	lsls	r2, r2, #4
 8001060:	d50e      	bpl.n	8001080 <__aeabi_fmul+0x250>
 8001062:	2301      	movs	r3, #1
 8001064:	0862      	lsrs	r2, r4, #1
 8001066:	401c      	ands	r4, r3
 8001068:	4314      	orrs	r4, r2
 800106a:	e749      	b.n	8000f00 <__aeabi_fmul+0xd0>
 800106c:	003e      	movs	r6, r7
 800106e:	46a1      	mov	r9, r4
 8001070:	2280      	movs	r2, #128	@ 0x80
 8001072:	464b      	mov	r3, r9
 8001074:	03d2      	lsls	r2, r2, #15
 8001076:	431a      	orrs	r2, r3
 8001078:	0252      	lsls	r2, r2, #9
 800107a:	20ff      	movs	r0, #255	@ 0xff
 800107c:	0a52      	lsrs	r2, r2, #9
 800107e:	e714      	b.n	8000eaa <__aeabi_fmul+0x7a>
 8001080:	001d      	movs	r5, r3
 8001082:	e73d      	b.n	8000f00 <__aeabi_fmul+0xd0>
 8001084:	0192      	lsls	r2, r2, #6
 8001086:	2000      	movs	r0, #0
 8001088:	0a52      	lsrs	r2, r2, #9
 800108a:	e70e      	b.n	8000eaa <__aeabi_fmul+0x7a>
 800108c:	290f      	cmp	r1, #15
 800108e:	d1ed      	bne.n	800106c <__aeabi_fmul+0x23c>
 8001090:	2280      	movs	r2, #128	@ 0x80
 8001092:	464b      	mov	r3, r9
 8001094:	03d2      	lsls	r2, r2, #15
 8001096:	4213      	tst	r3, r2
 8001098:	d0ea      	beq.n	8001070 <__aeabi_fmul+0x240>
 800109a:	4214      	tst	r4, r2
 800109c:	d1e8      	bne.n	8001070 <__aeabi_fmul+0x240>
 800109e:	003e      	movs	r6, r7
 80010a0:	20ff      	movs	r0, #255	@ 0xff
 80010a2:	4322      	orrs	r2, r4
 80010a4:	e701      	b.n	8000eaa <__aeabi_fmul+0x7a>
 80010a6:	46c0      	nop			@ (mov r8, r8)
 80010a8:	f7ffffff 	.word	0xf7ffffff

080010ac <__aeabi_fsub>:
 80010ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010ae:	4647      	mov	r7, r8
 80010b0:	46ce      	mov	lr, r9
 80010b2:	024e      	lsls	r6, r1, #9
 80010b4:	0243      	lsls	r3, r0, #9
 80010b6:	0045      	lsls	r5, r0, #1
 80010b8:	0a72      	lsrs	r2, r6, #9
 80010ba:	0fc4      	lsrs	r4, r0, #31
 80010bc:	0048      	lsls	r0, r1, #1
 80010be:	b580      	push	{r7, lr}
 80010c0:	4694      	mov	ip, r2
 80010c2:	0a5f      	lsrs	r7, r3, #9
 80010c4:	0e2d      	lsrs	r5, r5, #24
 80010c6:	099b      	lsrs	r3, r3, #6
 80010c8:	0e00      	lsrs	r0, r0, #24
 80010ca:	0fc9      	lsrs	r1, r1, #31
 80010cc:	09b6      	lsrs	r6, r6, #6
 80010ce:	28ff      	cmp	r0, #255	@ 0xff
 80010d0:	d024      	beq.n	800111c <__aeabi_fsub+0x70>
 80010d2:	2201      	movs	r2, #1
 80010d4:	4051      	eors	r1, r2
 80010d6:	1a2a      	subs	r2, r5, r0
 80010d8:	428c      	cmp	r4, r1
 80010da:	d00f      	beq.n	80010fc <__aeabi_fsub+0x50>
 80010dc:	2a00      	cmp	r2, #0
 80010de:	dc00      	bgt.n	80010e2 <__aeabi_fsub+0x36>
 80010e0:	e16a      	b.n	80013b8 <__aeabi_fsub+0x30c>
 80010e2:	2800      	cmp	r0, #0
 80010e4:	d135      	bne.n	8001152 <__aeabi_fsub+0xa6>
 80010e6:	2e00      	cmp	r6, #0
 80010e8:	d100      	bne.n	80010ec <__aeabi_fsub+0x40>
 80010ea:	e0a2      	b.n	8001232 <__aeabi_fsub+0x186>
 80010ec:	1e51      	subs	r1, r2, #1
 80010ee:	2a01      	cmp	r2, #1
 80010f0:	d100      	bne.n	80010f4 <__aeabi_fsub+0x48>
 80010f2:	e124      	b.n	800133e <__aeabi_fsub+0x292>
 80010f4:	2aff      	cmp	r2, #255	@ 0xff
 80010f6:	d021      	beq.n	800113c <__aeabi_fsub+0x90>
 80010f8:	000a      	movs	r2, r1
 80010fa:	e02f      	b.n	800115c <__aeabi_fsub+0xb0>
 80010fc:	2a00      	cmp	r2, #0
 80010fe:	dc00      	bgt.n	8001102 <__aeabi_fsub+0x56>
 8001100:	e167      	b.n	80013d2 <__aeabi_fsub+0x326>
 8001102:	2800      	cmp	r0, #0
 8001104:	d05e      	beq.n	80011c4 <__aeabi_fsub+0x118>
 8001106:	2dff      	cmp	r5, #255	@ 0xff
 8001108:	d018      	beq.n	800113c <__aeabi_fsub+0x90>
 800110a:	2180      	movs	r1, #128	@ 0x80
 800110c:	04c9      	lsls	r1, r1, #19
 800110e:	430e      	orrs	r6, r1
 8001110:	2a1b      	cmp	r2, #27
 8001112:	dc00      	bgt.n	8001116 <__aeabi_fsub+0x6a>
 8001114:	e076      	b.n	8001204 <__aeabi_fsub+0x158>
 8001116:	002a      	movs	r2, r5
 8001118:	3301      	adds	r3, #1
 800111a:	e032      	b.n	8001182 <__aeabi_fsub+0xd6>
 800111c:	002a      	movs	r2, r5
 800111e:	3aff      	subs	r2, #255	@ 0xff
 8001120:	4691      	mov	r9, r2
 8001122:	2e00      	cmp	r6, #0
 8001124:	d042      	beq.n	80011ac <__aeabi_fsub+0x100>
 8001126:	428c      	cmp	r4, r1
 8001128:	d055      	beq.n	80011d6 <__aeabi_fsub+0x12a>
 800112a:	464a      	mov	r2, r9
 800112c:	2a00      	cmp	r2, #0
 800112e:	d100      	bne.n	8001132 <__aeabi_fsub+0x86>
 8001130:	e09c      	b.n	800126c <__aeabi_fsub+0x1c0>
 8001132:	2d00      	cmp	r5, #0
 8001134:	d100      	bne.n	8001138 <__aeabi_fsub+0x8c>
 8001136:	e077      	b.n	8001228 <__aeabi_fsub+0x17c>
 8001138:	000c      	movs	r4, r1
 800113a:	0033      	movs	r3, r6
 800113c:	08db      	lsrs	r3, r3, #3
 800113e:	2b00      	cmp	r3, #0
 8001140:	d100      	bne.n	8001144 <__aeabi_fsub+0x98>
 8001142:	e06e      	b.n	8001222 <__aeabi_fsub+0x176>
 8001144:	2280      	movs	r2, #128	@ 0x80
 8001146:	03d2      	lsls	r2, r2, #15
 8001148:	4313      	orrs	r3, r2
 800114a:	025b      	lsls	r3, r3, #9
 800114c:	20ff      	movs	r0, #255	@ 0xff
 800114e:	0a5b      	lsrs	r3, r3, #9
 8001150:	e024      	b.n	800119c <__aeabi_fsub+0xf0>
 8001152:	2dff      	cmp	r5, #255	@ 0xff
 8001154:	d0f2      	beq.n	800113c <__aeabi_fsub+0x90>
 8001156:	2180      	movs	r1, #128	@ 0x80
 8001158:	04c9      	lsls	r1, r1, #19
 800115a:	430e      	orrs	r6, r1
 800115c:	2101      	movs	r1, #1
 800115e:	2a1b      	cmp	r2, #27
 8001160:	dc08      	bgt.n	8001174 <__aeabi_fsub+0xc8>
 8001162:	0031      	movs	r1, r6
 8001164:	2020      	movs	r0, #32
 8001166:	40d1      	lsrs	r1, r2
 8001168:	1a82      	subs	r2, r0, r2
 800116a:	4096      	lsls	r6, r2
 800116c:	0032      	movs	r2, r6
 800116e:	1e50      	subs	r0, r2, #1
 8001170:	4182      	sbcs	r2, r0
 8001172:	4311      	orrs	r1, r2
 8001174:	1a5b      	subs	r3, r3, r1
 8001176:	015a      	lsls	r2, r3, #5
 8001178:	d460      	bmi.n	800123c <__aeabi_fsub+0x190>
 800117a:	2107      	movs	r1, #7
 800117c:	002a      	movs	r2, r5
 800117e:	4019      	ands	r1, r3
 8001180:	d057      	beq.n	8001232 <__aeabi_fsub+0x186>
 8001182:	210f      	movs	r1, #15
 8001184:	4019      	ands	r1, r3
 8001186:	2904      	cmp	r1, #4
 8001188:	d000      	beq.n	800118c <__aeabi_fsub+0xe0>
 800118a:	3304      	adds	r3, #4
 800118c:	0159      	lsls	r1, r3, #5
 800118e:	d550      	bpl.n	8001232 <__aeabi_fsub+0x186>
 8001190:	1c50      	adds	r0, r2, #1
 8001192:	2afe      	cmp	r2, #254	@ 0xfe
 8001194:	d045      	beq.n	8001222 <__aeabi_fsub+0x176>
 8001196:	019b      	lsls	r3, r3, #6
 8001198:	b2c0      	uxtb	r0, r0
 800119a:	0a5b      	lsrs	r3, r3, #9
 800119c:	05c0      	lsls	r0, r0, #23
 800119e:	4318      	orrs	r0, r3
 80011a0:	07e4      	lsls	r4, r4, #31
 80011a2:	4320      	orrs	r0, r4
 80011a4:	bcc0      	pop	{r6, r7}
 80011a6:	46b9      	mov	r9, r7
 80011a8:	46b0      	mov	r8, r6
 80011aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80011ac:	2201      	movs	r2, #1
 80011ae:	4051      	eors	r1, r2
 80011b0:	428c      	cmp	r4, r1
 80011b2:	d1ba      	bne.n	800112a <__aeabi_fsub+0x7e>
 80011b4:	464a      	mov	r2, r9
 80011b6:	2a00      	cmp	r2, #0
 80011b8:	d010      	beq.n	80011dc <__aeabi_fsub+0x130>
 80011ba:	2d00      	cmp	r5, #0
 80011bc:	d100      	bne.n	80011c0 <__aeabi_fsub+0x114>
 80011be:	e098      	b.n	80012f2 <__aeabi_fsub+0x246>
 80011c0:	2300      	movs	r3, #0
 80011c2:	e7bb      	b.n	800113c <__aeabi_fsub+0x90>
 80011c4:	2e00      	cmp	r6, #0
 80011c6:	d034      	beq.n	8001232 <__aeabi_fsub+0x186>
 80011c8:	1e51      	subs	r1, r2, #1
 80011ca:	2a01      	cmp	r2, #1
 80011cc:	d06e      	beq.n	80012ac <__aeabi_fsub+0x200>
 80011ce:	2aff      	cmp	r2, #255	@ 0xff
 80011d0:	d0b4      	beq.n	800113c <__aeabi_fsub+0x90>
 80011d2:	000a      	movs	r2, r1
 80011d4:	e79c      	b.n	8001110 <__aeabi_fsub+0x64>
 80011d6:	2a00      	cmp	r2, #0
 80011d8:	d000      	beq.n	80011dc <__aeabi_fsub+0x130>
 80011da:	e088      	b.n	80012ee <__aeabi_fsub+0x242>
 80011dc:	20fe      	movs	r0, #254	@ 0xfe
 80011de:	1c6a      	adds	r2, r5, #1
 80011e0:	4210      	tst	r0, r2
 80011e2:	d000      	beq.n	80011e6 <__aeabi_fsub+0x13a>
 80011e4:	e092      	b.n	800130c <__aeabi_fsub+0x260>
 80011e6:	2d00      	cmp	r5, #0
 80011e8:	d000      	beq.n	80011ec <__aeabi_fsub+0x140>
 80011ea:	e0a4      	b.n	8001336 <__aeabi_fsub+0x28a>
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d100      	bne.n	80011f2 <__aeabi_fsub+0x146>
 80011f0:	e0cb      	b.n	800138a <__aeabi_fsub+0x2de>
 80011f2:	2e00      	cmp	r6, #0
 80011f4:	d000      	beq.n	80011f8 <__aeabi_fsub+0x14c>
 80011f6:	e0ca      	b.n	800138e <__aeabi_fsub+0x2e2>
 80011f8:	2200      	movs	r2, #0
 80011fa:	08db      	lsrs	r3, r3, #3
 80011fc:	025b      	lsls	r3, r3, #9
 80011fe:	0a5b      	lsrs	r3, r3, #9
 8001200:	b2d0      	uxtb	r0, r2
 8001202:	e7cb      	b.n	800119c <__aeabi_fsub+0xf0>
 8001204:	0031      	movs	r1, r6
 8001206:	2020      	movs	r0, #32
 8001208:	40d1      	lsrs	r1, r2
 800120a:	1a82      	subs	r2, r0, r2
 800120c:	4096      	lsls	r6, r2
 800120e:	0032      	movs	r2, r6
 8001210:	1e50      	subs	r0, r2, #1
 8001212:	4182      	sbcs	r2, r0
 8001214:	430a      	orrs	r2, r1
 8001216:	189b      	adds	r3, r3, r2
 8001218:	015a      	lsls	r2, r3, #5
 800121a:	d5ae      	bpl.n	800117a <__aeabi_fsub+0xce>
 800121c:	1c6a      	adds	r2, r5, #1
 800121e:	2dfe      	cmp	r5, #254	@ 0xfe
 8001220:	d14a      	bne.n	80012b8 <__aeabi_fsub+0x20c>
 8001222:	20ff      	movs	r0, #255	@ 0xff
 8001224:	2300      	movs	r3, #0
 8001226:	e7b9      	b.n	800119c <__aeabi_fsub+0xf0>
 8001228:	22ff      	movs	r2, #255	@ 0xff
 800122a:	2b00      	cmp	r3, #0
 800122c:	d14b      	bne.n	80012c6 <__aeabi_fsub+0x21a>
 800122e:	000c      	movs	r4, r1
 8001230:	0033      	movs	r3, r6
 8001232:	08db      	lsrs	r3, r3, #3
 8001234:	2aff      	cmp	r2, #255	@ 0xff
 8001236:	d100      	bne.n	800123a <__aeabi_fsub+0x18e>
 8001238:	e781      	b.n	800113e <__aeabi_fsub+0x92>
 800123a:	e7df      	b.n	80011fc <__aeabi_fsub+0x150>
 800123c:	019f      	lsls	r7, r3, #6
 800123e:	09bf      	lsrs	r7, r7, #6
 8001240:	0038      	movs	r0, r7
 8001242:	f002 f8db 	bl	80033fc <__clzsi2>
 8001246:	3805      	subs	r0, #5
 8001248:	4087      	lsls	r7, r0
 800124a:	4285      	cmp	r5, r0
 800124c:	dc21      	bgt.n	8001292 <__aeabi_fsub+0x1e6>
 800124e:	003b      	movs	r3, r7
 8001250:	2120      	movs	r1, #32
 8001252:	1b42      	subs	r2, r0, r5
 8001254:	3201      	adds	r2, #1
 8001256:	40d3      	lsrs	r3, r2
 8001258:	1a8a      	subs	r2, r1, r2
 800125a:	4097      	lsls	r7, r2
 800125c:	1e7a      	subs	r2, r7, #1
 800125e:	4197      	sbcs	r7, r2
 8001260:	2200      	movs	r2, #0
 8001262:	433b      	orrs	r3, r7
 8001264:	0759      	lsls	r1, r3, #29
 8001266:	d000      	beq.n	800126a <__aeabi_fsub+0x1be>
 8001268:	e78b      	b.n	8001182 <__aeabi_fsub+0xd6>
 800126a:	e78f      	b.n	800118c <__aeabi_fsub+0xe0>
 800126c:	20fe      	movs	r0, #254	@ 0xfe
 800126e:	1c6a      	adds	r2, r5, #1
 8001270:	4210      	tst	r0, r2
 8001272:	d112      	bne.n	800129a <__aeabi_fsub+0x1ee>
 8001274:	2d00      	cmp	r5, #0
 8001276:	d152      	bne.n	800131e <__aeabi_fsub+0x272>
 8001278:	2b00      	cmp	r3, #0
 800127a:	d07c      	beq.n	8001376 <__aeabi_fsub+0x2ca>
 800127c:	2e00      	cmp	r6, #0
 800127e:	d0bb      	beq.n	80011f8 <__aeabi_fsub+0x14c>
 8001280:	1b9a      	subs	r2, r3, r6
 8001282:	0150      	lsls	r0, r2, #5
 8001284:	d400      	bmi.n	8001288 <__aeabi_fsub+0x1dc>
 8001286:	e08b      	b.n	80013a0 <__aeabi_fsub+0x2f4>
 8001288:	2401      	movs	r4, #1
 800128a:	2200      	movs	r2, #0
 800128c:	1af3      	subs	r3, r6, r3
 800128e:	400c      	ands	r4, r1
 8001290:	e7e8      	b.n	8001264 <__aeabi_fsub+0x1b8>
 8001292:	4b56      	ldr	r3, [pc, #344]	@ (80013ec <__aeabi_fsub+0x340>)
 8001294:	1a2a      	subs	r2, r5, r0
 8001296:	403b      	ands	r3, r7
 8001298:	e7e4      	b.n	8001264 <__aeabi_fsub+0x1b8>
 800129a:	1b9f      	subs	r7, r3, r6
 800129c:	017a      	lsls	r2, r7, #5
 800129e:	d446      	bmi.n	800132e <__aeabi_fsub+0x282>
 80012a0:	2f00      	cmp	r7, #0
 80012a2:	d1cd      	bne.n	8001240 <__aeabi_fsub+0x194>
 80012a4:	2400      	movs	r4, #0
 80012a6:	2000      	movs	r0, #0
 80012a8:	2300      	movs	r3, #0
 80012aa:	e777      	b.n	800119c <__aeabi_fsub+0xf0>
 80012ac:	199b      	adds	r3, r3, r6
 80012ae:	2501      	movs	r5, #1
 80012b0:	3201      	adds	r2, #1
 80012b2:	0159      	lsls	r1, r3, #5
 80012b4:	d400      	bmi.n	80012b8 <__aeabi_fsub+0x20c>
 80012b6:	e760      	b.n	800117a <__aeabi_fsub+0xce>
 80012b8:	2101      	movs	r1, #1
 80012ba:	484d      	ldr	r0, [pc, #308]	@ (80013f0 <__aeabi_fsub+0x344>)
 80012bc:	4019      	ands	r1, r3
 80012be:	085b      	lsrs	r3, r3, #1
 80012c0:	4003      	ands	r3, r0
 80012c2:	430b      	orrs	r3, r1
 80012c4:	e7ce      	b.n	8001264 <__aeabi_fsub+0x1b8>
 80012c6:	1e57      	subs	r7, r2, #1
 80012c8:	2a01      	cmp	r2, #1
 80012ca:	d05a      	beq.n	8001382 <__aeabi_fsub+0x2d6>
 80012cc:	000c      	movs	r4, r1
 80012ce:	2aff      	cmp	r2, #255	@ 0xff
 80012d0:	d033      	beq.n	800133a <__aeabi_fsub+0x28e>
 80012d2:	2201      	movs	r2, #1
 80012d4:	2f1b      	cmp	r7, #27
 80012d6:	dc07      	bgt.n	80012e8 <__aeabi_fsub+0x23c>
 80012d8:	2120      	movs	r1, #32
 80012da:	1bc9      	subs	r1, r1, r7
 80012dc:	001a      	movs	r2, r3
 80012de:	408b      	lsls	r3, r1
 80012e0:	40fa      	lsrs	r2, r7
 80012e2:	1e59      	subs	r1, r3, #1
 80012e4:	418b      	sbcs	r3, r1
 80012e6:	431a      	orrs	r2, r3
 80012e8:	0005      	movs	r5, r0
 80012ea:	1ab3      	subs	r3, r6, r2
 80012ec:	e743      	b.n	8001176 <__aeabi_fsub+0xca>
 80012ee:	2d00      	cmp	r5, #0
 80012f0:	d123      	bne.n	800133a <__aeabi_fsub+0x28e>
 80012f2:	22ff      	movs	r2, #255	@ 0xff
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d09b      	beq.n	8001230 <__aeabi_fsub+0x184>
 80012f8:	1e51      	subs	r1, r2, #1
 80012fa:	2a01      	cmp	r2, #1
 80012fc:	d0d6      	beq.n	80012ac <__aeabi_fsub+0x200>
 80012fe:	2aff      	cmp	r2, #255	@ 0xff
 8001300:	d01b      	beq.n	800133a <__aeabi_fsub+0x28e>
 8001302:	291b      	cmp	r1, #27
 8001304:	dd2c      	ble.n	8001360 <__aeabi_fsub+0x2b4>
 8001306:	0002      	movs	r2, r0
 8001308:	1c73      	adds	r3, r6, #1
 800130a:	e73a      	b.n	8001182 <__aeabi_fsub+0xd6>
 800130c:	2aff      	cmp	r2, #255	@ 0xff
 800130e:	d088      	beq.n	8001222 <__aeabi_fsub+0x176>
 8001310:	199b      	adds	r3, r3, r6
 8001312:	085b      	lsrs	r3, r3, #1
 8001314:	0759      	lsls	r1, r3, #29
 8001316:	d000      	beq.n	800131a <__aeabi_fsub+0x26e>
 8001318:	e733      	b.n	8001182 <__aeabi_fsub+0xd6>
 800131a:	08db      	lsrs	r3, r3, #3
 800131c:	e76e      	b.n	80011fc <__aeabi_fsub+0x150>
 800131e:	2b00      	cmp	r3, #0
 8001320:	d110      	bne.n	8001344 <__aeabi_fsub+0x298>
 8001322:	2e00      	cmp	r6, #0
 8001324:	d043      	beq.n	80013ae <__aeabi_fsub+0x302>
 8001326:	2401      	movs	r4, #1
 8001328:	0033      	movs	r3, r6
 800132a:	400c      	ands	r4, r1
 800132c:	e706      	b.n	800113c <__aeabi_fsub+0x90>
 800132e:	2401      	movs	r4, #1
 8001330:	1af7      	subs	r7, r6, r3
 8001332:	400c      	ands	r4, r1
 8001334:	e784      	b.n	8001240 <__aeabi_fsub+0x194>
 8001336:	2b00      	cmp	r3, #0
 8001338:	d104      	bne.n	8001344 <__aeabi_fsub+0x298>
 800133a:	0033      	movs	r3, r6
 800133c:	e6fe      	b.n	800113c <__aeabi_fsub+0x90>
 800133e:	2501      	movs	r5, #1
 8001340:	1b9b      	subs	r3, r3, r6
 8001342:	e718      	b.n	8001176 <__aeabi_fsub+0xca>
 8001344:	2e00      	cmp	r6, #0
 8001346:	d100      	bne.n	800134a <__aeabi_fsub+0x29e>
 8001348:	e6f8      	b.n	800113c <__aeabi_fsub+0x90>
 800134a:	2280      	movs	r2, #128	@ 0x80
 800134c:	03d2      	lsls	r2, r2, #15
 800134e:	4297      	cmp	r7, r2
 8001350:	d304      	bcc.n	800135c <__aeabi_fsub+0x2b0>
 8001352:	4594      	cmp	ip, r2
 8001354:	d202      	bcs.n	800135c <__aeabi_fsub+0x2b0>
 8001356:	2401      	movs	r4, #1
 8001358:	0033      	movs	r3, r6
 800135a:	400c      	ands	r4, r1
 800135c:	08db      	lsrs	r3, r3, #3
 800135e:	e6f1      	b.n	8001144 <__aeabi_fsub+0x98>
 8001360:	001a      	movs	r2, r3
 8001362:	2520      	movs	r5, #32
 8001364:	40ca      	lsrs	r2, r1
 8001366:	1a69      	subs	r1, r5, r1
 8001368:	408b      	lsls	r3, r1
 800136a:	1e59      	subs	r1, r3, #1
 800136c:	418b      	sbcs	r3, r1
 800136e:	4313      	orrs	r3, r2
 8001370:	0005      	movs	r5, r0
 8001372:	199b      	adds	r3, r3, r6
 8001374:	e750      	b.n	8001218 <__aeabi_fsub+0x16c>
 8001376:	2e00      	cmp	r6, #0
 8001378:	d094      	beq.n	80012a4 <__aeabi_fsub+0x1f8>
 800137a:	2401      	movs	r4, #1
 800137c:	0033      	movs	r3, r6
 800137e:	400c      	ands	r4, r1
 8001380:	e73a      	b.n	80011f8 <__aeabi_fsub+0x14c>
 8001382:	000c      	movs	r4, r1
 8001384:	2501      	movs	r5, #1
 8001386:	1af3      	subs	r3, r6, r3
 8001388:	e6f5      	b.n	8001176 <__aeabi_fsub+0xca>
 800138a:	0033      	movs	r3, r6
 800138c:	e734      	b.n	80011f8 <__aeabi_fsub+0x14c>
 800138e:	199b      	adds	r3, r3, r6
 8001390:	2200      	movs	r2, #0
 8001392:	0159      	lsls	r1, r3, #5
 8001394:	d5c1      	bpl.n	800131a <__aeabi_fsub+0x26e>
 8001396:	4a15      	ldr	r2, [pc, #84]	@ (80013ec <__aeabi_fsub+0x340>)
 8001398:	4013      	ands	r3, r2
 800139a:	08db      	lsrs	r3, r3, #3
 800139c:	2201      	movs	r2, #1
 800139e:	e72d      	b.n	80011fc <__aeabi_fsub+0x150>
 80013a0:	2a00      	cmp	r2, #0
 80013a2:	d100      	bne.n	80013a6 <__aeabi_fsub+0x2fa>
 80013a4:	e77e      	b.n	80012a4 <__aeabi_fsub+0x1f8>
 80013a6:	0013      	movs	r3, r2
 80013a8:	2200      	movs	r2, #0
 80013aa:	08db      	lsrs	r3, r3, #3
 80013ac:	e726      	b.n	80011fc <__aeabi_fsub+0x150>
 80013ae:	2380      	movs	r3, #128	@ 0x80
 80013b0:	2400      	movs	r4, #0
 80013b2:	20ff      	movs	r0, #255	@ 0xff
 80013b4:	03db      	lsls	r3, r3, #15
 80013b6:	e6f1      	b.n	800119c <__aeabi_fsub+0xf0>
 80013b8:	2a00      	cmp	r2, #0
 80013ba:	d100      	bne.n	80013be <__aeabi_fsub+0x312>
 80013bc:	e756      	b.n	800126c <__aeabi_fsub+0x1c0>
 80013be:	1b47      	subs	r7, r0, r5
 80013c0:	003a      	movs	r2, r7
 80013c2:	2d00      	cmp	r5, #0
 80013c4:	d100      	bne.n	80013c8 <__aeabi_fsub+0x31c>
 80013c6:	e730      	b.n	800122a <__aeabi_fsub+0x17e>
 80013c8:	2280      	movs	r2, #128	@ 0x80
 80013ca:	04d2      	lsls	r2, r2, #19
 80013cc:	000c      	movs	r4, r1
 80013ce:	4313      	orrs	r3, r2
 80013d0:	e77f      	b.n	80012d2 <__aeabi_fsub+0x226>
 80013d2:	2a00      	cmp	r2, #0
 80013d4:	d100      	bne.n	80013d8 <__aeabi_fsub+0x32c>
 80013d6:	e701      	b.n	80011dc <__aeabi_fsub+0x130>
 80013d8:	1b41      	subs	r1, r0, r5
 80013da:	2d00      	cmp	r5, #0
 80013dc:	d101      	bne.n	80013e2 <__aeabi_fsub+0x336>
 80013de:	000a      	movs	r2, r1
 80013e0:	e788      	b.n	80012f4 <__aeabi_fsub+0x248>
 80013e2:	2280      	movs	r2, #128	@ 0x80
 80013e4:	04d2      	lsls	r2, r2, #19
 80013e6:	4313      	orrs	r3, r2
 80013e8:	e78b      	b.n	8001302 <__aeabi_fsub+0x256>
 80013ea:	46c0      	nop			@ (mov r8, r8)
 80013ec:	fbffffff 	.word	0xfbffffff
 80013f0:	7dffffff 	.word	0x7dffffff

080013f4 <__aeabi_fcmpun>:
 80013f4:	0243      	lsls	r3, r0, #9
 80013f6:	024a      	lsls	r2, r1, #9
 80013f8:	0040      	lsls	r0, r0, #1
 80013fa:	0049      	lsls	r1, r1, #1
 80013fc:	0a5b      	lsrs	r3, r3, #9
 80013fe:	0a52      	lsrs	r2, r2, #9
 8001400:	0e09      	lsrs	r1, r1, #24
 8001402:	0e00      	lsrs	r0, r0, #24
 8001404:	28ff      	cmp	r0, #255	@ 0xff
 8001406:	d006      	beq.n	8001416 <__aeabi_fcmpun+0x22>
 8001408:	2000      	movs	r0, #0
 800140a:	29ff      	cmp	r1, #255	@ 0xff
 800140c:	d102      	bne.n	8001414 <__aeabi_fcmpun+0x20>
 800140e:	1e53      	subs	r3, r2, #1
 8001410:	419a      	sbcs	r2, r3
 8001412:	0010      	movs	r0, r2
 8001414:	4770      	bx	lr
 8001416:	38fe      	subs	r0, #254	@ 0xfe
 8001418:	2b00      	cmp	r3, #0
 800141a:	d1fb      	bne.n	8001414 <__aeabi_fcmpun+0x20>
 800141c:	e7f4      	b.n	8001408 <__aeabi_fcmpun+0x14>
 800141e:	46c0      	nop			@ (mov r8, r8)

08001420 <__aeabi_f2iz>:
 8001420:	0241      	lsls	r1, r0, #9
 8001422:	0042      	lsls	r2, r0, #1
 8001424:	0fc3      	lsrs	r3, r0, #31
 8001426:	0a49      	lsrs	r1, r1, #9
 8001428:	2000      	movs	r0, #0
 800142a:	0e12      	lsrs	r2, r2, #24
 800142c:	2a7e      	cmp	r2, #126	@ 0x7e
 800142e:	dd03      	ble.n	8001438 <__aeabi_f2iz+0x18>
 8001430:	2a9d      	cmp	r2, #157	@ 0x9d
 8001432:	dd02      	ble.n	800143a <__aeabi_f2iz+0x1a>
 8001434:	4a09      	ldr	r2, [pc, #36]	@ (800145c <__aeabi_f2iz+0x3c>)
 8001436:	1898      	adds	r0, r3, r2
 8001438:	4770      	bx	lr
 800143a:	2080      	movs	r0, #128	@ 0x80
 800143c:	0400      	lsls	r0, r0, #16
 800143e:	4301      	orrs	r1, r0
 8001440:	2a95      	cmp	r2, #149	@ 0x95
 8001442:	dc07      	bgt.n	8001454 <__aeabi_f2iz+0x34>
 8001444:	2096      	movs	r0, #150	@ 0x96
 8001446:	1a82      	subs	r2, r0, r2
 8001448:	40d1      	lsrs	r1, r2
 800144a:	4248      	negs	r0, r1
 800144c:	2b00      	cmp	r3, #0
 800144e:	d1f3      	bne.n	8001438 <__aeabi_f2iz+0x18>
 8001450:	0008      	movs	r0, r1
 8001452:	e7f1      	b.n	8001438 <__aeabi_f2iz+0x18>
 8001454:	3a96      	subs	r2, #150	@ 0x96
 8001456:	4091      	lsls	r1, r2
 8001458:	e7f7      	b.n	800144a <__aeabi_f2iz+0x2a>
 800145a:	46c0      	nop			@ (mov r8, r8)
 800145c:	7fffffff 	.word	0x7fffffff

08001460 <__aeabi_i2f>:
 8001460:	b570      	push	{r4, r5, r6, lr}
 8001462:	2800      	cmp	r0, #0
 8001464:	d013      	beq.n	800148e <__aeabi_i2f+0x2e>
 8001466:	17c3      	asrs	r3, r0, #31
 8001468:	18c5      	adds	r5, r0, r3
 800146a:	405d      	eors	r5, r3
 800146c:	0fc4      	lsrs	r4, r0, #31
 800146e:	0028      	movs	r0, r5
 8001470:	f001 ffc4 	bl	80033fc <__clzsi2>
 8001474:	239e      	movs	r3, #158	@ 0x9e
 8001476:	0001      	movs	r1, r0
 8001478:	1a1b      	subs	r3, r3, r0
 800147a:	2b96      	cmp	r3, #150	@ 0x96
 800147c:	dc0f      	bgt.n	800149e <__aeabi_i2f+0x3e>
 800147e:	2808      	cmp	r0, #8
 8001480:	d034      	beq.n	80014ec <__aeabi_i2f+0x8c>
 8001482:	3908      	subs	r1, #8
 8001484:	408d      	lsls	r5, r1
 8001486:	026d      	lsls	r5, r5, #9
 8001488:	0a6d      	lsrs	r5, r5, #9
 800148a:	b2d8      	uxtb	r0, r3
 800148c:	e002      	b.n	8001494 <__aeabi_i2f+0x34>
 800148e:	2400      	movs	r4, #0
 8001490:	2000      	movs	r0, #0
 8001492:	2500      	movs	r5, #0
 8001494:	05c0      	lsls	r0, r0, #23
 8001496:	4328      	orrs	r0, r5
 8001498:	07e4      	lsls	r4, r4, #31
 800149a:	4320      	orrs	r0, r4
 800149c:	bd70      	pop	{r4, r5, r6, pc}
 800149e:	2b99      	cmp	r3, #153	@ 0x99
 80014a0:	dc16      	bgt.n	80014d0 <__aeabi_i2f+0x70>
 80014a2:	1f42      	subs	r2, r0, #5
 80014a4:	2805      	cmp	r0, #5
 80014a6:	d000      	beq.n	80014aa <__aeabi_i2f+0x4a>
 80014a8:	4095      	lsls	r5, r2
 80014aa:	002a      	movs	r2, r5
 80014ac:	4811      	ldr	r0, [pc, #68]	@ (80014f4 <__aeabi_i2f+0x94>)
 80014ae:	4002      	ands	r2, r0
 80014b0:	076e      	lsls	r6, r5, #29
 80014b2:	d009      	beq.n	80014c8 <__aeabi_i2f+0x68>
 80014b4:	260f      	movs	r6, #15
 80014b6:	4035      	ands	r5, r6
 80014b8:	2d04      	cmp	r5, #4
 80014ba:	d005      	beq.n	80014c8 <__aeabi_i2f+0x68>
 80014bc:	3204      	adds	r2, #4
 80014be:	0155      	lsls	r5, r2, #5
 80014c0:	d502      	bpl.n	80014c8 <__aeabi_i2f+0x68>
 80014c2:	239f      	movs	r3, #159	@ 0x9f
 80014c4:	4002      	ands	r2, r0
 80014c6:	1a5b      	subs	r3, r3, r1
 80014c8:	0192      	lsls	r2, r2, #6
 80014ca:	0a55      	lsrs	r5, r2, #9
 80014cc:	b2d8      	uxtb	r0, r3
 80014ce:	e7e1      	b.n	8001494 <__aeabi_i2f+0x34>
 80014d0:	2205      	movs	r2, #5
 80014d2:	1a12      	subs	r2, r2, r0
 80014d4:	0028      	movs	r0, r5
 80014d6:	40d0      	lsrs	r0, r2
 80014d8:	0002      	movs	r2, r0
 80014da:	0008      	movs	r0, r1
 80014dc:	301b      	adds	r0, #27
 80014de:	4085      	lsls	r5, r0
 80014e0:	0028      	movs	r0, r5
 80014e2:	1e45      	subs	r5, r0, #1
 80014e4:	41a8      	sbcs	r0, r5
 80014e6:	4302      	orrs	r2, r0
 80014e8:	0015      	movs	r5, r2
 80014ea:	e7de      	b.n	80014aa <__aeabi_i2f+0x4a>
 80014ec:	026d      	lsls	r5, r5, #9
 80014ee:	2096      	movs	r0, #150	@ 0x96
 80014f0:	0a6d      	lsrs	r5, r5, #9
 80014f2:	e7cf      	b.n	8001494 <__aeabi_i2f+0x34>
 80014f4:	fbffffff 	.word	0xfbffffff

080014f8 <__aeabi_ui2f>:
 80014f8:	b570      	push	{r4, r5, r6, lr}
 80014fa:	1e04      	subs	r4, r0, #0
 80014fc:	d00e      	beq.n	800151c <__aeabi_ui2f+0x24>
 80014fe:	f001 ff7d 	bl	80033fc <__clzsi2>
 8001502:	239e      	movs	r3, #158	@ 0x9e
 8001504:	0001      	movs	r1, r0
 8001506:	1a1b      	subs	r3, r3, r0
 8001508:	2b96      	cmp	r3, #150	@ 0x96
 800150a:	dc0c      	bgt.n	8001526 <__aeabi_ui2f+0x2e>
 800150c:	2808      	cmp	r0, #8
 800150e:	d02f      	beq.n	8001570 <__aeabi_ui2f+0x78>
 8001510:	3908      	subs	r1, #8
 8001512:	408c      	lsls	r4, r1
 8001514:	0264      	lsls	r4, r4, #9
 8001516:	0a64      	lsrs	r4, r4, #9
 8001518:	b2d8      	uxtb	r0, r3
 800151a:	e001      	b.n	8001520 <__aeabi_ui2f+0x28>
 800151c:	2000      	movs	r0, #0
 800151e:	2400      	movs	r4, #0
 8001520:	05c0      	lsls	r0, r0, #23
 8001522:	4320      	orrs	r0, r4
 8001524:	bd70      	pop	{r4, r5, r6, pc}
 8001526:	2b99      	cmp	r3, #153	@ 0x99
 8001528:	dc16      	bgt.n	8001558 <__aeabi_ui2f+0x60>
 800152a:	1f42      	subs	r2, r0, #5
 800152c:	2805      	cmp	r0, #5
 800152e:	d000      	beq.n	8001532 <__aeabi_ui2f+0x3a>
 8001530:	4094      	lsls	r4, r2
 8001532:	0022      	movs	r2, r4
 8001534:	4810      	ldr	r0, [pc, #64]	@ (8001578 <__aeabi_ui2f+0x80>)
 8001536:	4002      	ands	r2, r0
 8001538:	0765      	lsls	r5, r4, #29
 800153a:	d009      	beq.n	8001550 <__aeabi_ui2f+0x58>
 800153c:	250f      	movs	r5, #15
 800153e:	402c      	ands	r4, r5
 8001540:	2c04      	cmp	r4, #4
 8001542:	d005      	beq.n	8001550 <__aeabi_ui2f+0x58>
 8001544:	3204      	adds	r2, #4
 8001546:	0154      	lsls	r4, r2, #5
 8001548:	d502      	bpl.n	8001550 <__aeabi_ui2f+0x58>
 800154a:	239f      	movs	r3, #159	@ 0x9f
 800154c:	4002      	ands	r2, r0
 800154e:	1a5b      	subs	r3, r3, r1
 8001550:	0192      	lsls	r2, r2, #6
 8001552:	0a54      	lsrs	r4, r2, #9
 8001554:	b2d8      	uxtb	r0, r3
 8001556:	e7e3      	b.n	8001520 <__aeabi_ui2f+0x28>
 8001558:	0002      	movs	r2, r0
 800155a:	0020      	movs	r0, r4
 800155c:	321b      	adds	r2, #27
 800155e:	4090      	lsls	r0, r2
 8001560:	0002      	movs	r2, r0
 8001562:	1e50      	subs	r0, r2, #1
 8001564:	4182      	sbcs	r2, r0
 8001566:	2005      	movs	r0, #5
 8001568:	1a40      	subs	r0, r0, r1
 800156a:	40c4      	lsrs	r4, r0
 800156c:	4314      	orrs	r4, r2
 800156e:	e7e0      	b.n	8001532 <__aeabi_ui2f+0x3a>
 8001570:	0264      	lsls	r4, r4, #9
 8001572:	2096      	movs	r0, #150	@ 0x96
 8001574:	0a64      	lsrs	r4, r4, #9
 8001576:	e7d3      	b.n	8001520 <__aeabi_ui2f+0x28>
 8001578:	fbffffff 	.word	0xfbffffff

0800157c <__aeabi_dadd>:
 800157c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800157e:	4657      	mov	r7, sl
 8001580:	464e      	mov	r6, r9
 8001582:	4645      	mov	r5, r8
 8001584:	46de      	mov	lr, fp
 8001586:	b5e0      	push	{r5, r6, r7, lr}
 8001588:	b083      	sub	sp, #12
 800158a:	9000      	str	r0, [sp, #0]
 800158c:	9101      	str	r1, [sp, #4]
 800158e:	030c      	lsls	r4, r1, #12
 8001590:	004f      	lsls	r7, r1, #1
 8001592:	0fce      	lsrs	r6, r1, #31
 8001594:	0a61      	lsrs	r1, r4, #9
 8001596:	9c00      	ldr	r4, [sp, #0]
 8001598:	031d      	lsls	r5, r3, #12
 800159a:	0f64      	lsrs	r4, r4, #29
 800159c:	430c      	orrs	r4, r1
 800159e:	9900      	ldr	r1, [sp, #0]
 80015a0:	9200      	str	r2, [sp, #0]
 80015a2:	9301      	str	r3, [sp, #4]
 80015a4:	00c8      	lsls	r0, r1, #3
 80015a6:	0059      	lsls	r1, r3, #1
 80015a8:	0d4b      	lsrs	r3, r1, #21
 80015aa:	4699      	mov	r9, r3
 80015ac:	9a00      	ldr	r2, [sp, #0]
 80015ae:	9b01      	ldr	r3, [sp, #4]
 80015b0:	0a6d      	lsrs	r5, r5, #9
 80015b2:	0fd9      	lsrs	r1, r3, #31
 80015b4:	0f53      	lsrs	r3, r2, #29
 80015b6:	432b      	orrs	r3, r5
 80015b8:	469a      	mov	sl, r3
 80015ba:	9b00      	ldr	r3, [sp, #0]
 80015bc:	0d7f      	lsrs	r7, r7, #21
 80015be:	00da      	lsls	r2, r3, #3
 80015c0:	4694      	mov	ip, r2
 80015c2:	464a      	mov	r2, r9
 80015c4:	46b0      	mov	r8, r6
 80015c6:	1aba      	subs	r2, r7, r2
 80015c8:	428e      	cmp	r6, r1
 80015ca:	d100      	bne.n	80015ce <__aeabi_dadd+0x52>
 80015cc:	e0b0      	b.n	8001730 <__aeabi_dadd+0x1b4>
 80015ce:	2a00      	cmp	r2, #0
 80015d0:	dc00      	bgt.n	80015d4 <__aeabi_dadd+0x58>
 80015d2:	e078      	b.n	80016c6 <__aeabi_dadd+0x14a>
 80015d4:	4649      	mov	r1, r9
 80015d6:	2900      	cmp	r1, #0
 80015d8:	d100      	bne.n	80015dc <__aeabi_dadd+0x60>
 80015da:	e0e9      	b.n	80017b0 <__aeabi_dadd+0x234>
 80015dc:	49c9      	ldr	r1, [pc, #804]	@ (8001904 <__aeabi_dadd+0x388>)
 80015de:	428f      	cmp	r7, r1
 80015e0:	d100      	bne.n	80015e4 <__aeabi_dadd+0x68>
 80015e2:	e195      	b.n	8001910 <__aeabi_dadd+0x394>
 80015e4:	2501      	movs	r5, #1
 80015e6:	2a38      	cmp	r2, #56	@ 0x38
 80015e8:	dc16      	bgt.n	8001618 <__aeabi_dadd+0x9c>
 80015ea:	2180      	movs	r1, #128	@ 0x80
 80015ec:	4653      	mov	r3, sl
 80015ee:	0409      	lsls	r1, r1, #16
 80015f0:	430b      	orrs	r3, r1
 80015f2:	469a      	mov	sl, r3
 80015f4:	2a1f      	cmp	r2, #31
 80015f6:	dd00      	ble.n	80015fa <__aeabi_dadd+0x7e>
 80015f8:	e1e7      	b.n	80019ca <__aeabi_dadd+0x44e>
 80015fa:	2120      	movs	r1, #32
 80015fc:	4655      	mov	r5, sl
 80015fe:	1a8b      	subs	r3, r1, r2
 8001600:	4661      	mov	r1, ip
 8001602:	409d      	lsls	r5, r3
 8001604:	40d1      	lsrs	r1, r2
 8001606:	430d      	orrs	r5, r1
 8001608:	4661      	mov	r1, ip
 800160a:	4099      	lsls	r1, r3
 800160c:	1e4b      	subs	r3, r1, #1
 800160e:	4199      	sbcs	r1, r3
 8001610:	4653      	mov	r3, sl
 8001612:	40d3      	lsrs	r3, r2
 8001614:	430d      	orrs	r5, r1
 8001616:	1ae4      	subs	r4, r4, r3
 8001618:	1b45      	subs	r5, r0, r5
 800161a:	42a8      	cmp	r0, r5
 800161c:	4180      	sbcs	r0, r0
 800161e:	4240      	negs	r0, r0
 8001620:	1a24      	subs	r4, r4, r0
 8001622:	0223      	lsls	r3, r4, #8
 8001624:	d400      	bmi.n	8001628 <__aeabi_dadd+0xac>
 8001626:	e10f      	b.n	8001848 <__aeabi_dadd+0x2cc>
 8001628:	0264      	lsls	r4, r4, #9
 800162a:	0a64      	lsrs	r4, r4, #9
 800162c:	2c00      	cmp	r4, #0
 800162e:	d100      	bne.n	8001632 <__aeabi_dadd+0xb6>
 8001630:	e139      	b.n	80018a6 <__aeabi_dadd+0x32a>
 8001632:	0020      	movs	r0, r4
 8001634:	f001 fee2 	bl	80033fc <__clzsi2>
 8001638:	0003      	movs	r3, r0
 800163a:	3b08      	subs	r3, #8
 800163c:	2120      	movs	r1, #32
 800163e:	0028      	movs	r0, r5
 8001640:	1aca      	subs	r2, r1, r3
 8001642:	40d0      	lsrs	r0, r2
 8001644:	409c      	lsls	r4, r3
 8001646:	0002      	movs	r2, r0
 8001648:	409d      	lsls	r5, r3
 800164a:	4322      	orrs	r2, r4
 800164c:	429f      	cmp	r7, r3
 800164e:	dd00      	ble.n	8001652 <__aeabi_dadd+0xd6>
 8001650:	e173      	b.n	800193a <__aeabi_dadd+0x3be>
 8001652:	1bd8      	subs	r0, r3, r7
 8001654:	3001      	adds	r0, #1
 8001656:	1a09      	subs	r1, r1, r0
 8001658:	002c      	movs	r4, r5
 800165a:	408d      	lsls	r5, r1
 800165c:	40c4      	lsrs	r4, r0
 800165e:	1e6b      	subs	r3, r5, #1
 8001660:	419d      	sbcs	r5, r3
 8001662:	0013      	movs	r3, r2
 8001664:	40c2      	lsrs	r2, r0
 8001666:	408b      	lsls	r3, r1
 8001668:	4325      	orrs	r5, r4
 800166a:	2700      	movs	r7, #0
 800166c:	0014      	movs	r4, r2
 800166e:	431d      	orrs	r5, r3
 8001670:	076b      	lsls	r3, r5, #29
 8001672:	d009      	beq.n	8001688 <__aeabi_dadd+0x10c>
 8001674:	230f      	movs	r3, #15
 8001676:	402b      	ands	r3, r5
 8001678:	2b04      	cmp	r3, #4
 800167a:	d005      	beq.n	8001688 <__aeabi_dadd+0x10c>
 800167c:	1d2b      	adds	r3, r5, #4
 800167e:	42ab      	cmp	r3, r5
 8001680:	41ad      	sbcs	r5, r5
 8001682:	426d      	negs	r5, r5
 8001684:	1964      	adds	r4, r4, r5
 8001686:	001d      	movs	r5, r3
 8001688:	0223      	lsls	r3, r4, #8
 800168a:	d400      	bmi.n	800168e <__aeabi_dadd+0x112>
 800168c:	e12d      	b.n	80018ea <__aeabi_dadd+0x36e>
 800168e:	4a9d      	ldr	r2, [pc, #628]	@ (8001904 <__aeabi_dadd+0x388>)
 8001690:	3701      	adds	r7, #1
 8001692:	4297      	cmp	r7, r2
 8001694:	d100      	bne.n	8001698 <__aeabi_dadd+0x11c>
 8001696:	e0d3      	b.n	8001840 <__aeabi_dadd+0x2c4>
 8001698:	4646      	mov	r6, r8
 800169a:	499b      	ldr	r1, [pc, #620]	@ (8001908 <__aeabi_dadd+0x38c>)
 800169c:	08ed      	lsrs	r5, r5, #3
 800169e:	4021      	ands	r1, r4
 80016a0:	074a      	lsls	r2, r1, #29
 80016a2:	432a      	orrs	r2, r5
 80016a4:	057c      	lsls	r4, r7, #21
 80016a6:	024d      	lsls	r5, r1, #9
 80016a8:	0b2d      	lsrs	r5, r5, #12
 80016aa:	0d64      	lsrs	r4, r4, #21
 80016ac:	0524      	lsls	r4, r4, #20
 80016ae:	432c      	orrs	r4, r5
 80016b0:	07f6      	lsls	r6, r6, #31
 80016b2:	4334      	orrs	r4, r6
 80016b4:	0010      	movs	r0, r2
 80016b6:	0021      	movs	r1, r4
 80016b8:	b003      	add	sp, #12
 80016ba:	bcf0      	pop	{r4, r5, r6, r7}
 80016bc:	46bb      	mov	fp, r7
 80016be:	46b2      	mov	sl, r6
 80016c0:	46a9      	mov	r9, r5
 80016c2:	46a0      	mov	r8, r4
 80016c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016c6:	2a00      	cmp	r2, #0
 80016c8:	d100      	bne.n	80016cc <__aeabi_dadd+0x150>
 80016ca:	e084      	b.n	80017d6 <__aeabi_dadd+0x25a>
 80016cc:	464a      	mov	r2, r9
 80016ce:	1bd2      	subs	r2, r2, r7
 80016d0:	2f00      	cmp	r7, #0
 80016d2:	d000      	beq.n	80016d6 <__aeabi_dadd+0x15a>
 80016d4:	e16d      	b.n	80019b2 <__aeabi_dadd+0x436>
 80016d6:	0025      	movs	r5, r4
 80016d8:	4305      	orrs	r5, r0
 80016da:	d100      	bne.n	80016de <__aeabi_dadd+0x162>
 80016dc:	e127      	b.n	800192e <__aeabi_dadd+0x3b2>
 80016de:	1e56      	subs	r6, r2, #1
 80016e0:	2a01      	cmp	r2, #1
 80016e2:	d100      	bne.n	80016e6 <__aeabi_dadd+0x16a>
 80016e4:	e23b      	b.n	8001b5e <__aeabi_dadd+0x5e2>
 80016e6:	4d87      	ldr	r5, [pc, #540]	@ (8001904 <__aeabi_dadd+0x388>)
 80016e8:	42aa      	cmp	r2, r5
 80016ea:	d100      	bne.n	80016ee <__aeabi_dadd+0x172>
 80016ec:	e26a      	b.n	8001bc4 <__aeabi_dadd+0x648>
 80016ee:	2501      	movs	r5, #1
 80016f0:	2e38      	cmp	r6, #56	@ 0x38
 80016f2:	dc12      	bgt.n	800171a <__aeabi_dadd+0x19e>
 80016f4:	0032      	movs	r2, r6
 80016f6:	2a1f      	cmp	r2, #31
 80016f8:	dd00      	ble.n	80016fc <__aeabi_dadd+0x180>
 80016fa:	e1f8      	b.n	8001aee <__aeabi_dadd+0x572>
 80016fc:	2620      	movs	r6, #32
 80016fe:	0025      	movs	r5, r4
 8001700:	1ab6      	subs	r6, r6, r2
 8001702:	0007      	movs	r7, r0
 8001704:	4653      	mov	r3, sl
 8001706:	40b0      	lsls	r0, r6
 8001708:	40d4      	lsrs	r4, r2
 800170a:	40b5      	lsls	r5, r6
 800170c:	40d7      	lsrs	r7, r2
 800170e:	1e46      	subs	r6, r0, #1
 8001710:	41b0      	sbcs	r0, r6
 8001712:	1b1b      	subs	r3, r3, r4
 8001714:	469a      	mov	sl, r3
 8001716:	433d      	orrs	r5, r7
 8001718:	4305      	orrs	r5, r0
 800171a:	4662      	mov	r2, ip
 800171c:	1b55      	subs	r5, r2, r5
 800171e:	45ac      	cmp	ip, r5
 8001720:	4192      	sbcs	r2, r2
 8001722:	4653      	mov	r3, sl
 8001724:	4252      	negs	r2, r2
 8001726:	000e      	movs	r6, r1
 8001728:	464f      	mov	r7, r9
 800172a:	4688      	mov	r8, r1
 800172c:	1a9c      	subs	r4, r3, r2
 800172e:	e778      	b.n	8001622 <__aeabi_dadd+0xa6>
 8001730:	2a00      	cmp	r2, #0
 8001732:	dc00      	bgt.n	8001736 <__aeabi_dadd+0x1ba>
 8001734:	e08e      	b.n	8001854 <__aeabi_dadd+0x2d8>
 8001736:	4649      	mov	r1, r9
 8001738:	2900      	cmp	r1, #0
 800173a:	d175      	bne.n	8001828 <__aeabi_dadd+0x2ac>
 800173c:	4661      	mov	r1, ip
 800173e:	4653      	mov	r3, sl
 8001740:	4319      	orrs	r1, r3
 8001742:	d100      	bne.n	8001746 <__aeabi_dadd+0x1ca>
 8001744:	e0f6      	b.n	8001934 <__aeabi_dadd+0x3b8>
 8001746:	1e51      	subs	r1, r2, #1
 8001748:	2a01      	cmp	r2, #1
 800174a:	d100      	bne.n	800174e <__aeabi_dadd+0x1d2>
 800174c:	e191      	b.n	8001a72 <__aeabi_dadd+0x4f6>
 800174e:	4d6d      	ldr	r5, [pc, #436]	@ (8001904 <__aeabi_dadd+0x388>)
 8001750:	42aa      	cmp	r2, r5
 8001752:	d100      	bne.n	8001756 <__aeabi_dadd+0x1da>
 8001754:	e0dc      	b.n	8001910 <__aeabi_dadd+0x394>
 8001756:	2501      	movs	r5, #1
 8001758:	2938      	cmp	r1, #56	@ 0x38
 800175a:	dc14      	bgt.n	8001786 <__aeabi_dadd+0x20a>
 800175c:	000a      	movs	r2, r1
 800175e:	2a1f      	cmp	r2, #31
 8001760:	dd00      	ble.n	8001764 <__aeabi_dadd+0x1e8>
 8001762:	e1a2      	b.n	8001aaa <__aeabi_dadd+0x52e>
 8001764:	2120      	movs	r1, #32
 8001766:	4653      	mov	r3, sl
 8001768:	1a89      	subs	r1, r1, r2
 800176a:	408b      	lsls	r3, r1
 800176c:	001d      	movs	r5, r3
 800176e:	4663      	mov	r3, ip
 8001770:	40d3      	lsrs	r3, r2
 8001772:	431d      	orrs	r5, r3
 8001774:	4663      	mov	r3, ip
 8001776:	408b      	lsls	r3, r1
 8001778:	0019      	movs	r1, r3
 800177a:	1e4b      	subs	r3, r1, #1
 800177c:	4199      	sbcs	r1, r3
 800177e:	4653      	mov	r3, sl
 8001780:	40d3      	lsrs	r3, r2
 8001782:	430d      	orrs	r5, r1
 8001784:	18e4      	adds	r4, r4, r3
 8001786:	182d      	adds	r5, r5, r0
 8001788:	4285      	cmp	r5, r0
 800178a:	4180      	sbcs	r0, r0
 800178c:	4240      	negs	r0, r0
 800178e:	1824      	adds	r4, r4, r0
 8001790:	0223      	lsls	r3, r4, #8
 8001792:	d559      	bpl.n	8001848 <__aeabi_dadd+0x2cc>
 8001794:	4b5b      	ldr	r3, [pc, #364]	@ (8001904 <__aeabi_dadd+0x388>)
 8001796:	3701      	adds	r7, #1
 8001798:	429f      	cmp	r7, r3
 800179a:	d051      	beq.n	8001840 <__aeabi_dadd+0x2c4>
 800179c:	2101      	movs	r1, #1
 800179e:	4b5a      	ldr	r3, [pc, #360]	@ (8001908 <__aeabi_dadd+0x38c>)
 80017a0:	086a      	lsrs	r2, r5, #1
 80017a2:	401c      	ands	r4, r3
 80017a4:	4029      	ands	r1, r5
 80017a6:	430a      	orrs	r2, r1
 80017a8:	07e5      	lsls	r5, r4, #31
 80017aa:	4315      	orrs	r5, r2
 80017ac:	0864      	lsrs	r4, r4, #1
 80017ae:	e75f      	b.n	8001670 <__aeabi_dadd+0xf4>
 80017b0:	4661      	mov	r1, ip
 80017b2:	4653      	mov	r3, sl
 80017b4:	4319      	orrs	r1, r3
 80017b6:	d100      	bne.n	80017ba <__aeabi_dadd+0x23e>
 80017b8:	e0bc      	b.n	8001934 <__aeabi_dadd+0x3b8>
 80017ba:	1e51      	subs	r1, r2, #1
 80017bc:	2a01      	cmp	r2, #1
 80017be:	d100      	bne.n	80017c2 <__aeabi_dadd+0x246>
 80017c0:	e164      	b.n	8001a8c <__aeabi_dadd+0x510>
 80017c2:	4d50      	ldr	r5, [pc, #320]	@ (8001904 <__aeabi_dadd+0x388>)
 80017c4:	42aa      	cmp	r2, r5
 80017c6:	d100      	bne.n	80017ca <__aeabi_dadd+0x24e>
 80017c8:	e16a      	b.n	8001aa0 <__aeabi_dadd+0x524>
 80017ca:	2501      	movs	r5, #1
 80017cc:	2938      	cmp	r1, #56	@ 0x38
 80017ce:	dd00      	ble.n	80017d2 <__aeabi_dadd+0x256>
 80017d0:	e722      	b.n	8001618 <__aeabi_dadd+0x9c>
 80017d2:	000a      	movs	r2, r1
 80017d4:	e70e      	b.n	80015f4 <__aeabi_dadd+0x78>
 80017d6:	4a4d      	ldr	r2, [pc, #308]	@ (800190c <__aeabi_dadd+0x390>)
 80017d8:	1c7d      	adds	r5, r7, #1
 80017da:	4215      	tst	r5, r2
 80017dc:	d000      	beq.n	80017e0 <__aeabi_dadd+0x264>
 80017de:	e0d0      	b.n	8001982 <__aeabi_dadd+0x406>
 80017e0:	0025      	movs	r5, r4
 80017e2:	4662      	mov	r2, ip
 80017e4:	4653      	mov	r3, sl
 80017e6:	4305      	orrs	r5, r0
 80017e8:	431a      	orrs	r2, r3
 80017ea:	2f00      	cmp	r7, #0
 80017ec:	d000      	beq.n	80017f0 <__aeabi_dadd+0x274>
 80017ee:	e137      	b.n	8001a60 <__aeabi_dadd+0x4e4>
 80017f0:	2d00      	cmp	r5, #0
 80017f2:	d100      	bne.n	80017f6 <__aeabi_dadd+0x27a>
 80017f4:	e1a8      	b.n	8001b48 <__aeabi_dadd+0x5cc>
 80017f6:	2a00      	cmp	r2, #0
 80017f8:	d100      	bne.n	80017fc <__aeabi_dadd+0x280>
 80017fa:	e16a      	b.n	8001ad2 <__aeabi_dadd+0x556>
 80017fc:	4663      	mov	r3, ip
 80017fe:	1ac5      	subs	r5, r0, r3
 8001800:	4653      	mov	r3, sl
 8001802:	1ae2      	subs	r2, r4, r3
 8001804:	42a8      	cmp	r0, r5
 8001806:	419b      	sbcs	r3, r3
 8001808:	425b      	negs	r3, r3
 800180a:	1ad3      	subs	r3, r2, r3
 800180c:	021a      	lsls	r2, r3, #8
 800180e:	d400      	bmi.n	8001812 <__aeabi_dadd+0x296>
 8001810:	e203      	b.n	8001c1a <__aeabi_dadd+0x69e>
 8001812:	4663      	mov	r3, ip
 8001814:	1a1d      	subs	r5, r3, r0
 8001816:	45ac      	cmp	ip, r5
 8001818:	4192      	sbcs	r2, r2
 800181a:	4653      	mov	r3, sl
 800181c:	4252      	negs	r2, r2
 800181e:	1b1c      	subs	r4, r3, r4
 8001820:	000e      	movs	r6, r1
 8001822:	4688      	mov	r8, r1
 8001824:	1aa4      	subs	r4, r4, r2
 8001826:	e723      	b.n	8001670 <__aeabi_dadd+0xf4>
 8001828:	4936      	ldr	r1, [pc, #216]	@ (8001904 <__aeabi_dadd+0x388>)
 800182a:	428f      	cmp	r7, r1
 800182c:	d070      	beq.n	8001910 <__aeabi_dadd+0x394>
 800182e:	2501      	movs	r5, #1
 8001830:	2a38      	cmp	r2, #56	@ 0x38
 8001832:	dca8      	bgt.n	8001786 <__aeabi_dadd+0x20a>
 8001834:	2180      	movs	r1, #128	@ 0x80
 8001836:	4653      	mov	r3, sl
 8001838:	0409      	lsls	r1, r1, #16
 800183a:	430b      	orrs	r3, r1
 800183c:	469a      	mov	sl, r3
 800183e:	e78e      	b.n	800175e <__aeabi_dadd+0x1e2>
 8001840:	003c      	movs	r4, r7
 8001842:	2500      	movs	r5, #0
 8001844:	2200      	movs	r2, #0
 8001846:	e731      	b.n	80016ac <__aeabi_dadd+0x130>
 8001848:	2307      	movs	r3, #7
 800184a:	402b      	ands	r3, r5
 800184c:	2b00      	cmp	r3, #0
 800184e:	d000      	beq.n	8001852 <__aeabi_dadd+0x2d6>
 8001850:	e710      	b.n	8001674 <__aeabi_dadd+0xf8>
 8001852:	e093      	b.n	800197c <__aeabi_dadd+0x400>
 8001854:	2a00      	cmp	r2, #0
 8001856:	d074      	beq.n	8001942 <__aeabi_dadd+0x3c6>
 8001858:	464a      	mov	r2, r9
 800185a:	1bd2      	subs	r2, r2, r7
 800185c:	2f00      	cmp	r7, #0
 800185e:	d100      	bne.n	8001862 <__aeabi_dadd+0x2e6>
 8001860:	e0c7      	b.n	80019f2 <__aeabi_dadd+0x476>
 8001862:	4928      	ldr	r1, [pc, #160]	@ (8001904 <__aeabi_dadd+0x388>)
 8001864:	4589      	cmp	r9, r1
 8001866:	d100      	bne.n	800186a <__aeabi_dadd+0x2ee>
 8001868:	e185      	b.n	8001b76 <__aeabi_dadd+0x5fa>
 800186a:	2501      	movs	r5, #1
 800186c:	2a38      	cmp	r2, #56	@ 0x38
 800186e:	dc12      	bgt.n	8001896 <__aeabi_dadd+0x31a>
 8001870:	2180      	movs	r1, #128	@ 0x80
 8001872:	0409      	lsls	r1, r1, #16
 8001874:	430c      	orrs	r4, r1
 8001876:	2a1f      	cmp	r2, #31
 8001878:	dd00      	ble.n	800187c <__aeabi_dadd+0x300>
 800187a:	e1ab      	b.n	8001bd4 <__aeabi_dadd+0x658>
 800187c:	2120      	movs	r1, #32
 800187e:	0025      	movs	r5, r4
 8001880:	1a89      	subs	r1, r1, r2
 8001882:	0007      	movs	r7, r0
 8001884:	4088      	lsls	r0, r1
 8001886:	408d      	lsls	r5, r1
 8001888:	40d7      	lsrs	r7, r2
 800188a:	1e41      	subs	r1, r0, #1
 800188c:	4188      	sbcs	r0, r1
 800188e:	40d4      	lsrs	r4, r2
 8001890:	433d      	orrs	r5, r7
 8001892:	4305      	orrs	r5, r0
 8001894:	44a2      	add	sl, r4
 8001896:	4465      	add	r5, ip
 8001898:	4565      	cmp	r5, ip
 800189a:	4192      	sbcs	r2, r2
 800189c:	4252      	negs	r2, r2
 800189e:	4452      	add	r2, sl
 80018a0:	0014      	movs	r4, r2
 80018a2:	464f      	mov	r7, r9
 80018a4:	e774      	b.n	8001790 <__aeabi_dadd+0x214>
 80018a6:	0028      	movs	r0, r5
 80018a8:	f001 fda8 	bl	80033fc <__clzsi2>
 80018ac:	0003      	movs	r3, r0
 80018ae:	3318      	adds	r3, #24
 80018b0:	2b1f      	cmp	r3, #31
 80018b2:	dc00      	bgt.n	80018b6 <__aeabi_dadd+0x33a>
 80018b4:	e6c2      	b.n	800163c <__aeabi_dadd+0xc0>
 80018b6:	002a      	movs	r2, r5
 80018b8:	3808      	subs	r0, #8
 80018ba:	4082      	lsls	r2, r0
 80018bc:	429f      	cmp	r7, r3
 80018be:	dd00      	ble.n	80018c2 <__aeabi_dadd+0x346>
 80018c0:	e0a9      	b.n	8001a16 <__aeabi_dadd+0x49a>
 80018c2:	1bdb      	subs	r3, r3, r7
 80018c4:	1c58      	adds	r0, r3, #1
 80018c6:	281f      	cmp	r0, #31
 80018c8:	dc00      	bgt.n	80018cc <__aeabi_dadd+0x350>
 80018ca:	e1ac      	b.n	8001c26 <__aeabi_dadd+0x6aa>
 80018cc:	0015      	movs	r5, r2
 80018ce:	3b1f      	subs	r3, #31
 80018d0:	40dd      	lsrs	r5, r3
 80018d2:	2820      	cmp	r0, #32
 80018d4:	d005      	beq.n	80018e2 <__aeabi_dadd+0x366>
 80018d6:	2340      	movs	r3, #64	@ 0x40
 80018d8:	1a1b      	subs	r3, r3, r0
 80018da:	409a      	lsls	r2, r3
 80018dc:	1e53      	subs	r3, r2, #1
 80018de:	419a      	sbcs	r2, r3
 80018e0:	4315      	orrs	r5, r2
 80018e2:	2307      	movs	r3, #7
 80018e4:	2700      	movs	r7, #0
 80018e6:	402b      	ands	r3, r5
 80018e8:	e7b0      	b.n	800184c <__aeabi_dadd+0x2d0>
 80018ea:	08ed      	lsrs	r5, r5, #3
 80018ec:	4b05      	ldr	r3, [pc, #20]	@ (8001904 <__aeabi_dadd+0x388>)
 80018ee:	0762      	lsls	r2, r4, #29
 80018f0:	432a      	orrs	r2, r5
 80018f2:	08e4      	lsrs	r4, r4, #3
 80018f4:	429f      	cmp	r7, r3
 80018f6:	d00f      	beq.n	8001918 <__aeabi_dadd+0x39c>
 80018f8:	0324      	lsls	r4, r4, #12
 80018fa:	0b25      	lsrs	r5, r4, #12
 80018fc:	057c      	lsls	r4, r7, #21
 80018fe:	0d64      	lsrs	r4, r4, #21
 8001900:	e6d4      	b.n	80016ac <__aeabi_dadd+0x130>
 8001902:	46c0      	nop			@ (mov r8, r8)
 8001904:	000007ff 	.word	0x000007ff
 8001908:	ff7fffff 	.word	0xff7fffff
 800190c:	000007fe 	.word	0x000007fe
 8001910:	08c0      	lsrs	r0, r0, #3
 8001912:	0762      	lsls	r2, r4, #29
 8001914:	4302      	orrs	r2, r0
 8001916:	08e4      	lsrs	r4, r4, #3
 8001918:	0013      	movs	r3, r2
 800191a:	4323      	orrs	r3, r4
 800191c:	d100      	bne.n	8001920 <__aeabi_dadd+0x3a4>
 800191e:	e186      	b.n	8001c2e <__aeabi_dadd+0x6b2>
 8001920:	2580      	movs	r5, #128	@ 0x80
 8001922:	032d      	lsls	r5, r5, #12
 8001924:	4325      	orrs	r5, r4
 8001926:	032d      	lsls	r5, r5, #12
 8001928:	4cc3      	ldr	r4, [pc, #780]	@ (8001c38 <__aeabi_dadd+0x6bc>)
 800192a:	0b2d      	lsrs	r5, r5, #12
 800192c:	e6be      	b.n	80016ac <__aeabi_dadd+0x130>
 800192e:	4660      	mov	r0, ip
 8001930:	4654      	mov	r4, sl
 8001932:	000e      	movs	r6, r1
 8001934:	0017      	movs	r7, r2
 8001936:	08c5      	lsrs	r5, r0, #3
 8001938:	e7d8      	b.n	80018ec <__aeabi_dadd+0x370>
 800193a:	4cc0      	ldr	r4, [pc, #768]	@ (8001c3c <__aeabi_dadd+0x6c0>)
 800193c:	1aff      	subs	r7, r7, r3
 800193e:	4014      	ands	r4, r2
 8001940:	e696      	b.n	8001670 <__aeabi_dadd+0xf4>
 8001942:	4abf      	ldr	r2, [pc, #764]	@ (8001c40 <__aeabi_dadd+0x6c4>)
 8001944:	1c79      	adds	r1, r7, #1
 8001946:	4211      	tst	r1, r2
 8001948:	d16b      	bne.n	8001a22 <__aeabi_dadd+0x4a6>
 800194a:	0022      	movs	r2, r4
 800194c:	4302      	orrs	r2, r0
 800194e:	2f00      	cmp	r7, #0
 8001950:	d000      	beq.n	8001954 <__aeabi_dadd+0x3d8>
 8001952:	e0db      	b.n	8001b0c <__aeabi_dadd+0x590>
 8001954:	2a00      	cmp	r2, #0
 8001956:	d100      	bne.n	800195a <__aeabi_dadd+0x3de>
 8001958:	e12d      	b.n	8001bb6 <__aeabi_dadd+0x63a>
 800195a:	4662      	mov	r2, ip
 800195c:	4653      	mov	r3, sl
 800195e:	431a      	orrs	r2, r3
 8001960:	d100      	bne.n	8001964 <__aeabi_dadd+0x3e8>
 8001962:	e0b6      	b.n	8001ad2 <__aeabi_dadd+0x556>
 8001964:	4663      	mov	r3, ip
 8001966:	18c5      	adds	r5, r0, r3
 8001968:	4285      	cmp	r5, r0
 800196a:	4180      	sbcs	r0, r0
 800196c:	4454      	add	r4, sl
 800196e:	4240      	negs	r0, r0
 8001970:	1824      	adds	r4, r4, r0
 8001972:	0223      	lsls	r3, r4, #8
 8001974:	d502      	bpl.n	800197c <__aeabi_dadd+0x400>
 8001976:	000f      	movs	r7, r1
 8001978:	4bb0      	ldr	r3, [pc, #704]	@ (8001c3c <__aeabi_dadd+0x6c0>)
 800197a:	401c      	ands	r4, r3
 800197c:	003a      	movs	r2, r7
 800197e:	0028      	movs	r0, r5
 8001980:	e7d8      	b.n	8001934 <__aeabi_dadd+0x3b8>
 8001982:	4662      	mov	r2, ip
 8001984:	1a85      	subs	r5, r0, r2
 8001986:	42a8      	cmp	r0, r5
 8001988:	4192      	sbcs	r2, r2
 800198a:	4653      	mov	r3, sl
 800198c:	4252      	negs	r2, r2
 800198e:	4691      	mov	r9, r2
 8001990:	1ae3      	subs	r3, r4, r3
 8001992:	001a      	movs	r2, r3
 8001994:	464b      	mov	r3, r9
 8001996:	1ad2      	subs	r2, r2, r3
 8001998:	0013      	movs	r3, r2
 800199a:	4691      	mov	r9, r2
 800199c:	021a      	lsls	r2, r3, #8
 800199e:	d454      	bmi.n	8001a4a <__aeabi_dadd+0x4ce>
 80019a0:	464a      	mov	r2, r9
 80019a2:	464c      	mov	r4, r9
 80019a4:	432a      	orrs	r2, r5
 80019a6:	d000      	beq.n	80019aa <__aeabi_dadd+0x42e>
 80019a8:	e640      	b.n	800162c <__aeabi_dadd+0xb0>
 80019aa:	2600      	movs	r6, #0
 80019ac:	2400      	movs	r4, #0
 80019ae:	2500      	movs	r5, #0
 80019b0:	e67c      	b.n	80016ac <__aeabi_dadd+0x130>
 80019b2:	4da1      	ldr	r5, [pc, #644]	@ (8001c38 <__aeabi_dadd+0x6bc>)
 80019b4:	45a9      	cmp	r9, r5
 80019b6:	d100      	bne.n	80019ba <__aeabi_dadd+0x43e>
 80019b8:	e090      	b.n	8001adc <__aeabi_dadd+0x560>
 80019ba:	2501      	movs	r5, #1
 80019bc:	2a38      	cmp	r2, #56	@ 0x38
 80019be:	dd00      	ble.n	80019c2 <__aeabi_dadd+0x446>
 80019c0:	e6ab      	b.n	800171a <__aeabi_dadd+0x19e>
 80019c2:	2580      	movs	r5, #128	@ 0x80
 80019c4:	042d      	lsls	r5, r5, #16
 80019c6:	432c      	orrs	r4, r5
 80019c8:	e695      	b.n	80016f6 <__aeabi_dadd+0x17a>
 80019ca:	0011      	movs	r1, r2
 80019cc:	4655      	mov	r5, sl
 80019ce:	3920      	subs	r1, #32
 80019d0:	40cd      	lsrs	r5, r1
 80019d2:	46a9      	mov	r9, r5
 80019d4:	2a20      	cmp	r2, #32
 80019d6:	d006      	beq.n	80019e6 <__aeabi_dadd+0x46a>
 80019d8:	2140      	movs	r1, #64	@ 0x40
 80019da:	4653      	mov	r3, sl
 80019dc:	1a8a      	subs	r2, r1, r2
 80019de:	4093      	lsls	r3, r2
 80019e0:	4662      	mov	r2, ip
 80019e2:	431a      	orrs	r2, r3
 80019e4:	4694      	mov	ip, r2
 80019e6:	4665      	mov	r5, ip
 80019e8:	1e6b      	subs	r3, r5, #1
 80019ea:	419d      	sbcs	r5, r3
 80019ec:	464b      	mov	r3, r9
 80019ee:	431d      	orrs	r5, r3
 80019f0:	e612      	b.n	8001618 <__aeabi_dadd+0x9c>
 80019f2:	0021      	movs	r1, r4
 80019f4:	4301      	orrs	r1, r0
 80019f6:	d100      	bne.n	80019fa <__aeabi_dadd+0x47e>
 80019f8:	e0c4      	b.n	8001b84 <__aeabi_dadd+0x608>
 80019fa:	1e51      	subs	r1, r2, #1
 80019fc:	2a01      	cmp	r2, #1
 80019fe:	d100      	bne.n	8001a02 <__aeabi_dadd+0x486>
 8001a00:	e0fb      	b.n	8001bfa <__aeabi_dadd+0x67e>
 8001a02:	4d8d      	ldr	r5, [pc, #564]	@ (8001c38 <__aeabi_dadd+0x6bc>)
 8001a04:	42aa      	cmp	r2, r5
 8001a06:	d100      	bne.n	8001a0a <__aeabi_dadd+0x48e>
 8001a08:	e0b5      	b.n	8001b76 <__aeabi_dadd+0x5fa>
 8001a0a:	2501      	movs	r5, #1
 8001a0c:	2938      	cmp	r1, #56	@ 0x38
 8001a0e:	dd00      	ble.n	8001a12 <__aeabi_dadd+0x496>
 8001a10:	e741      	b.n	8001896 <__aeabi_dadd+0x31a>
 8001a12:	000a      	movs	r2, r1
 8001a14:	e72f      	b.n	8001876 <__aeabi_dadd+0x2fa>
 8001a16:	4c89      	ldr	r4, [pc, #548]	@ (8001c3c <__aeabi_dadd+0x6c0>)
 8001a18:	1aff      	subs	r7, r7, r3
 8001a1a:	4014      	ands	r4, r2
 8001a1c:	0762      	lsls	r2, r4, #29
 8001a1e:	08e4      	lsrs	r4, r4, #3
 8001a20:	e76a      	b.n	80018f8 <__aeabi_dadd+0x37c>
 8001a22:	4a85      	ldr	r2, [pc, #532]	@ (8001c38 <__aeabi_dadd+0x6bc>)
 8001a24:	4291      	cmp	r1, r2
 8001a26:	d100      	bne.n	8001a2a <__aeabi_dadd+0x4ae>
 8001a28:	e0e3      	b.n	8001bf2 <__aeabi_dadd+0x676>
 8001a2a:	4663      	mov	r3, ip
 8001a2c:	18c2      	adds	r2, r0, r3
 8001a2e:	4282      	cmp	r2, r0
 8001a30:	4180      	sbcs	r0, r0
 8001a32:	0023      	movs	r3, r4
 8001a34:	4240      	negs	r0, r0
 8001a36:	4453      	add	r3, sl
 8001a38:	181b      	adds	r3, r3, r0
 8001a3a:	07dd      	lsls	r5, r3, #31
 8001a3c:	085c      	lsrs	r4, r3, #1
 8001a3e:	2307      	movs	r3, #7
 8001a40:	0852      	lsrs	r2, r2, #1
 8001a42:	4315      	orrs	r5, r2
 8001a44:	000f      	movs	r7, r1
 8001a46:	402b      	ands	r3, r5
 8001a48:	e700      	b.n	800184c <__aeabi_dadd+0x2d0>
 8001a4a:	4663      	mov	r3, ip
 8001a4c:	1a1d      	subs	r5, r3, r0
 8001a4e:	45ac      	cmp	ip, r5
 8001a50:	4192      	sbcs	r2, r2
 8001a52:	4653      	mov	r3, sl
 8001a54:	4252      	negs	r2, r2
 8001a56:	1b1c      	subs	r4, r3, r4
 8001a58:	000e      	movs	r6, r1
 8001a5a:	4688      	mov	r8, r1
 8001a5c:	1aa4      	subs	r4, r4, r2
 8001a5e:	e5e5      	b.n	800162c <__aeabi_dadd+0xb0>
 8001a60:	2d00      	cmp	r5, #0
 8001a62:	d000      	beq.n	8001a66 <__aeabi_dadd+0x4ea>
 8001a64:	e091      	b.n	8001b8a <__aeabi_dadd+0x60e>
 8001a66:	2a00      	cmp	r2, #0
 8001a68:	d138      	bne.n	8001adc <__aeabi_dadd+0x560>
 8001a6a:	2480      	movs	r4, #128	@ 0x80
 8001a6c:	2600      	movs	r6, #0
 8001a6e:	0324      	lsls	r4, r4, #12
 8001a70:	e756      	b.n	8001920 <__aeabi_dadd+0x3a4>
 8001a72:	4663      	mov	r3, ip
 8001a74:	18c5      	adds	r5, r0, r3
 8001a76:	4285      	cmp	r5, r0
 8001a78:	4180      	sbcs	r0, r0
 8001a7a:	4454      	add	r4, sl
 8001a7c:	4240      	negs	r0, r0
 8001a7e:	1824      	adds	r4, r4, r0
 8001a80:	2701      	movs	r7, #1
 8001a82:	0223      	lsls	r3, r4, #8
 8001a84:	d400      	bmi.n	8001a88 <__aeabi_dadd+0x50c>
 8001a86:	e6df      	b.n	8001848 <__aeabi_dadd+0x2cc>
 8001a88:	2702      	movs	r7, #2
 8001a8a:	e687      	b.n	800179c <__aeabi_dadd+0x220>
 8001a8c:	4663      	mov	r3, ip
 8001a8e:	1ac5      	subs	r5, r0, r3
 8001a90:	42a8      	cmp	r0, r5
 8001a92:	4180      	sbcs	r0, r0
 8001a94:	4653      	mov	r3, sl
 8001a96:	4240      	negs	r0, r0
 8001a98:	1ae4      	subs	r4, r4, r3
 8001a9a:	2701      	movs	r7, #1
 8001a9c:	1a24      	subs	r4, r4, r0
 8001a9e:	e5c0      	b.n	8001622 <__aeabi_dadd+0xa6>
 8001aa0:	0762      	lsls	r2, r4, #29
 8001aa2:	08c0      	lsrs	r0, r0, #3
 8001aa4:	4302      	orrs	r2, r0
 8001aa6:	08e4      	lsrs	r4, r4, #3
 8001aa8:	e736      	b.n	8001918 <__aeabi_dadd+0x39c>
 8001aaa:	0011      	movs	r1, r2
 8001aac:	4653      	mov	r3, sl
 8001aae:	3920      	subs	r1, #32
 8001ab0:	40cb      	lsrs	r3, r1
 8001ab2:	4699      	mov	r9, r3
 8001ab4:	2a20      	cmp	r2, #32
 8001ab6:	d006      	beq.n	8001ac6 <__aeabi_dadd+0x54a>
 8001ab8:	2140      	movs	r1, #64	@ 0x40
 8001aba:	4653      	mov	r3, sl
 8001abc:	1a8a      	subs	r2, r1, r2
 8001abe:	4093      	lsls	r3, r2
 8001ac0:	4662      	mov	r2, ip
 8001ac2:	431a      	orrs	r2, r3
 8001ac4:	4694      	mov	ip, r2
 8001ac6:	4665      	mov	r5, ip
 8001ac8:	1e6b      	subs	r3, r5, #1
 8001aca:	419d      	sbcs	r5, r3
 8001acc:	464b      	mov	r3, r9
 8001ace:	431d      	orrs	r5, r3
 8001ad0:	e659      	b.n	8001786 <__aeabi_dadd+0x20a>
 8001ad2:	0762      	lsls	r2, r4, #29
 8001ad4:	08c0      	lsrs	r0, r0, #3
 8001ad6:	4302      	orrs	r2, r0
 8001ad8:	08e4      	lsrs	r4, r4, #3
 8001ada:	e70d      	b.n	80018f8 <__aeabi_dadd+0x37c>
 8001adc:	4653      	mov	r3, sl
 8001ade:	075a      	lsls	r2, r3, #29
 8001ae0:	4663      	mov	r3, ip
 8001ae2:	08d8      	lsrs	r0, r3, #3
 8001ae4:	4653      	mov	r3, sl
 8001ae6:	000e      	movs	r6, r1
 8001ae8:	4302      	orrs	r2, r0
 8001aea:	08dc      	lsrs	r4, r3, #3
 8001aec:	e714      	b.n	8001918 <__aeabi_dadd+0x39c>
 8001aee:	0015      	movs	r5, r2
 8001af0:	0026      	movs	r6, r4
 8001af2:	3d20      	subs	r5, #32
 8001af4:	40ee      	lsrs	r6, r5
 8001af6:	2a20      	cmp	r2, #32
 8001af8:	d003      	beq.n	8001b02 <__aeabi_dadd+0x586>
 8001afa:	2540      	movs	r5, #64	@ 0x40
 8001afc:	1aaa      	subs	r2, r5, r2
 8001afe:	4094      	lsls	r4, r2
 8001b00:	4320      	orrs	r0, r4
 8001b02:	1e42      	subs	r2, r0, #1
 8001b04:	4190      	sbcs	r0, r2
 8001b06:	0005      	movs	r5, r0
 8001b08:	4335      	orrs	r5, r6
 8001b0a:	e606      	b.n	800171a <__aeabi_dadd+0x19e>
 8001b0c:	2a00      	cmp	r2, #0
 8001b0e:	d07c      	beq.n	8001c0a <__aeabi_dadd+0x68e>
 8001b10:	4662      	mov	r2, ip
 8001b12:	4653      	mov	r3, sl
 8001b14:	08c0      	lsrs	r0, r0, #3
 8001b16:	431a      	orrs	r2, r3
 8001b18:	d100      	bne.n	8001b1c <__aeabi_dadd+0x5a0>
 8001b1a:	e6fa      	b.n	8001912 <__aeabi_dadd+0x396>
 8001b1c:	0762      	lsls	r2, r4, #29
 8001b1e:	4310      	orrs	r0, r2
 8001b20:	2280      	movs	r2, #128	@ 0x80
 8001b22:	08e4      	lsrs	r4, r4, #3
 8001b24:	0312      	lsls	r2, r2, #12
 8001b26:	4214      	tst	r4, r2
 8001b28:	d008      	beq.n	8001b3c <__aeabi_dadd+0x5c0>
 8001b2a:	08d9      	lsrs	r1, r3, #3
 8001b2c:	4211      	tst	r1, r2
 8001b2e:	d105      	bne.n	8001b3c <__aeabi_dadd+0x5c0>
 8001b30:	4663      	mov	r3, ip
 8001b32:	08d8      	lsrs	r0, r3, #3
 8001b34:	4653      	mov	r3, sl
 8001b36:	000c      	movs	r4, r1
 8001b38:	075b      	lsls	r3, r3, #29
 8001b3a:	4318      	orrs	r0, r3
 8001b3c:	0f42      	lsrs	r2, r0, #29
 8001b3e:	00c0      	lsls	r0, r0, #3
 8001b40:	08c0      	lsrs	r0, r0, #3
 8001b42:	0752      	lsls	r2, r2, #29
 8001b44:	4302      	orrs	r2, r0
 8001b46:	e6e7      	b.n	8001918 <__aeabi_dadd+0x39c>
 8001b48:	2a00      	cmp	r2, #0
 8001b4a:	d100      	bne.n	8001b4e <__aeabi_dadd+0x5d2>
 8001b4c:	e72d      	b.n	80019aa <__aeabi_dadd+0x42e>
 8001b4e:	4663      	mov	r3, ip
 8001b50:	08d8      	lsrs	r0, r3, #3
 8001b52:	4653      	mov	r3, sl
 8001b54:	075a      	lsls	r2, r3, #29
 8001b56:	000e      	movs	r6, r1
 8001b58:	4302      	orrs	r2, r0
 8001b5a:	08dc      	lsrs	r4, r3, #3
 8001b5c:	e6cc      	b.n	80018f8 <__aeabi_dadd+0x37c>
 8001b5e:	4663      	mov	r3, ip
 8001b60:	1a1d      	subs	r5, r3, r0
 8001b62:	45ac      	cmp	ip, r5
 8001b64:	4192      	sbcs	r2, r2
 8001b66:	4653      	mov	r3, sl
 8001b68:	4252      	negs	r2, r2
 8001b6a:	1b1c      	subs	r4, r3, r4
 8001b6c:	000e      	movs	r6, r1
 8001b6e:	4688      	mov	r8, r1
 8001b70:	1aa4      	subs	r4, r4, r2
 8001b72:	3701      	adds	r7, #1
 8001b74:	e555      	b.n	8001622 <__aeabi_dadd+0xa6>
 8001b76:	4663      	mov	r3, ip
 8001b78:	08d9      	lsrs	r1, r3, #3
 8001b7a:	4653      	mov	r3, sl
 8001b7c:	075a      	lsls	r2, r3, #29
 8001b7e:	430a      	orrs	r2, r1
 8001b80:	08dc      	lsrs	r4, r3, #3
 8001b82:	e6c9      	b.n	8001918 <__aeabi_dadd+0x39c>
 8001b84:	4660      	mov	r0, ip
 8001b86:	4654      	mov	r4, sl
 8001b88:	e6d4      	b.n	8001934 <__aeabi_dadd+0x3b8>
 8001b8a:	08c0      	lsrs	r0, r0, #3
 8001b8c:	2a00      	cmp	r2, #0
 8001b8e:	d100      	bne.n	8001b92 <__aeabi_dadd+0x616>
 8001b90:	e6bf      	b.n	8001912 <__aeabi_dadd+0x396>
 8001b92:	0762      	lsls	r2, r4, #29
 8001b94:	4310      	orrs	r0, r2
 8001b96:	2280      	movs	r2, #128	@ 0x80
 8001b98:	08e4      	lsrs	r4, r4, #3
 8001b9a:	0312      	lsls	r2, r2, #12
 8001b9c:	4214      	tst	r4, r2
 8001b9e:	d0cd      	beq.n	8001b3c <__aeabi_dadd+0x5c0>
 8001ba0:	08dd      	lsrs	r5, r3, #3
 8001ba2:	4215      	tst	r5, r2
 8001ba4:	d1ca      	bne.n	8001b3c <__aeabi_dadd+0x5c0>
 8001ba6:	4663      	mov	r3, ip
 8001ba8:	08d8      	lsrs	r0, r3, #3
 8001baa:	4653      	mov	r3, sl
 8001bac:	075b      	lsls	r3, r3, #29
 8001bae:	000e      	movs	r6, r1
 8001bb0:	002c      	movs	r4, r5
 8001bb2:	4318      	orrs	r0, r3
 8001bb4:	e7c2      	b.n	8001b3c <__aeabi_dadd+0x5c0>
 8001bb6:	4663      	mov	r3, ip
 8001bb8:	08d9      	lsrs	r1, r3, #3
 8001bba:	4653      	mov	r3, sl
 8001bbc:	075a      	lsls	r2, r3, #29
 8001bbe:	430a      	orrs	r2, r1
 8001bc0:	08dc      	lsrs	r4, r3, #3
 8001bc2:	e699      	b.n	80018f8 <__aeabi_dadd+0x37c>
 8001bc4:	4663      	mov	r3, ip
 8001bc6:	08d8      	lsrs	r0, r3, #3
 8001bc8:	4653      	mov	r3, sl
 8001bca:	075a      	lsls	r2, r3, #29
 8001bcc:	000e      	movs	r6, r1
 8001bce:	4302      	orrs	r2, r0
 8001bd0:	08dc      	lsrs	r4, r3, #3
 8001bd2:	e6a1      	b.n	8001918 <__aeabi_dadd+0x39c>
 8001bd4:	0011      	movs	r1, r2
 8001bd6:	0027      	movs	r7, r4
 8001bd8:	3920      	subs	r1, #32
 8001bda:	40cf      	lsrs	r7, r1
 8001bdc:	2a20      	cmp	r2, #32
 8001bde:	d003      	beq.n	8001be8 <__aeabi_dadd+0x66c>
 8001be0:	2140      	movs	r1, #64	@ 0x40
 8001be2:	1a8a      	subs	r2, r1, r2
 8001be4:	4094      	lsls	r4, r2
 8001be6:	4320      	orrs	r0, r4
 8001be8:	1e42      	subs	r2, r0, #1
 8001bea:	4190      	sbcs	r0, r2
 8001bec:	0005      	movs	r5, r0
 8001bee:	433d      	orrs	r5, r7
 8001bf0:	e651      	b.n	8001896 <__aeabi_dadd+0x31a>
 8001bf2:	000c      	movs	r4, r1
 8001bf4:	2500      	movs	r5, #0
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	e558      	b.n	80016ac <__aeabi_dadd+0x130>
 8001bfa:	4460      	add	r0, ip
 8001bfc:	4560      	cmp	r0, ip
 8001bfe:	4192      	sbcs	r2, r2
 8001c00:	4454      	add	r4, sl
 8001c02:	4252      	negs	r2, r2
 8001c04:	0005      	movs	r5, r0
 8001c06:	18a4      	adds	r4, r4, r2
 8001c08:	e73a      	b.n	8001a80 <__aeabi_dadd+0x504>
 8001c0a:	4653      	mov	r3, sl
 8001c0c:	075a      	lsls	r2, r3, #29
 8001c0e:	4663      	mov	r3, ip
 8001c10:	08d9      	lsrs	r1, r3, #3
 8001c12:	4653      	mov	r3, sl
 8001c14:	430a      	orrs	r2, r1
 8001c16:	08dc      	lsrs	r4, r3, #3
 8001c18:	e67e      	b.n	8001918 <__aeabi_dadd+0x39c>
 8001c1a:	001a      	movs	r2, r3
 8001c1c:	001c      	movs	r4, r3
 8001c1e:	432a      	orrs	r2, r5
 8001c20:	d000      	beq.n	8001c24 <__aeabi_dadd+0x6a8>
 8001c22:	e6ab      	b.n	800197c <__aeabi_dadd+0x400>
 8001c24:	e6c1      	b.n	80019aa <__aeabi_dadd+0x42e>
 8001c26:	2120      	movs	r1, #32
 8001c28:	2500      	movs	r5, #0
 8001c2a:	1a09      	subs	r1, r1, r0
 8001c2c:	e519      	b.n	8001662 <__aeabi_dadd+0xe6>
 8001c2e:	2200      	movs	r2, #0
 8001c30:	2500      	movs	r5, #0
 8001c32:	4c01      	ldr	r4, [pc, #4]	@ (8001c38 <__aeabi_dadd+0x6bc>)
 8001c34:	e53a      	b.n	80016ac <__aeabi_dadd+0x130>
 8001c36:	46c0      	nop			@ (mov r8, r8)
 8001c38:	000007ff 	.word	0x000007ff
 8001c3c:	ff7fffff 	.word	0xff7fffff
 8001c40:	000007fe 	.word	0x000007fe

08001c44 <__aeabi_ddiv>:
 8001c44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c46:	46de      	mov	lr, fp
 8001c48:	4645      	mov	r5, r8
 8001c4a:	4657      	mov	r7, sl
 8001c4c:	464e      	mov	r6, r9
 8001c4e:	b5e0      	push	{r5, r6, r7, lr}
 8001c50:	b087      	sub	sp, #28
 8001c52:	9200      	str	r2, [sp, #0]
 8001c54:	9301      	str	r3, [sp, #4]
 8001c56:	030b      	lsls	r3, r1, #12
 8001c58:	0b1b      	lsrs	r3, r3, #12
 8001c5a:	469b      	mov	fp, r3
 8001c5c:	0fca      	lsrs	r2, r1, #31
 8001c5e:	004b      	lsls	r3, r1, #1
 8001c60:	0004      	movs	r4, r0
 8001c62:	4680      	mov	r8, r0
 8001c64:	0d5b      	lsrs	r3, r3, #21
 8001c66:	9202      	str	r2, [sp, #8]
 8001c68:	d100      	bne.n	8001c6c <__aeabi_ddiv+0x28>
 8001c6a:	e16a      	b.n	8001f42 <__aeabi_ddiv+0x2fe>
 8001c6c:	4ad4      	ldr	r2, [pc, #848]	@ (8001fc0 <__aeabi_ddiv+0x37c>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d100      	bne.n	8001c74 <__aeabi_ddiv+0x30>
 8001c72:	e18c      	b.n	8001f8e <__aeabi_ddiv+0x34a>
 8001c74:	4659      	mov	r1, fp
 8001c76:	0f42      	lsrs	r2, r0, #29
 8001c78:	00c9      	lsls	r1, r1, #3
 8001c7a:	430a      	orrs	r2, r1
 8001c7c:	2180      	movs	r1, #128	@ 0x80
 8001c7e:	0409      	lsls	r1, r1, #16
 8001c80:	4311      	orrs	r1, r2
 8001c82:	00c2      	lsls	r2, r0, #3
 8001c84:	4690      	mov	r8, r2
 8001c86:	4acf      	ldr	r2, [pc, #828]	@ (8001fc4 <__aeabi_ddiv+0x380>)
 8001c88:	4689      	mov	r9, r1
 8001c8a:	4692      	mov	sl, r2
 8001c8c:	449a      	add	sl, r3
 8001c8e:	2300      	movs	r3, #0
 8001c90:	2400      	movs	r4, #0
 8001c92:	9303      	str	r3, [sp, #12]
 8001c94:	9e00      	ldr	r6, [sp, #0]
 8001c96:	9f01      	ldr	r7, [sp, #4]
 8001c98:	033b      	lsls	r3, r7, #12
 8001c9a:	0b1b      	lsrs	r3, r3, #12
 8001c9c:	469b      	mov	fp, r3
 8001c9e:	007b      	lsls	r3, r7, #1
 8001ca0:	0030      	movs	r0, r6
 8001ca2:	0d5b      	lsrs	r3, r3, #21
 8001ca4:	0ffd      	lsrs	r5, r7, #31
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d100      	bne.n	8001cac <__aeabi_ddiv+0x68>
 8001caa:	e128      	b.n	8001efe <__aeabi_ddiv+0x2ba>
 8001cac:	4ac4      	ldr	r2, [pc, #784]	@ (8001fc0 <__aeabi_ddiv+0x37c>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d100      	bne.n	8001cb4 <__aeabi_ddiv+0x70>
 8001cb2:	e177      	b.n	8001fa4 <__aeabi_ddiv+0x360>
 8001cb4:	4659      	mov	r1, fp
 8001cb6:	0f72      	lsrs	r2, r6, #29
 8001cb8:	00c9      	lsls	r1, r1, #3
 8001cba:	430a      	orrs	r2, r1
 8001cbc:	2180      	movs	r1, #128	@ 0x80
 8001cbe:	0409      	lsls	r1, r1, #16
 8001cc0:	4311      	orrs	r1, r2
 8001cc2:	468b      	mov	fp, r1
 8001cc4:	49bf      	ldr	r1, [pc, #764]	@ (8001fc4 <__aeabi_ddiv+0x380>)
 8001cc6:	00f2      	lsls	r2, r6, #3
 8001cc8:	468c      	mov	ip, r1
 8001cca:	4651      	mov	r1, sl
 8001ccc:	4463      	add	r3, ip
 8001cce:	1acb      	subs	r3, r1, r3
 8001cd0:	469a      	mov	sl, r3
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	9e02      	ldr	r6, [sp, #8]
 8001cd6:	406e      	eors	r6, r5
 8001cd8:	2c0f      	cmp	r4, #15
 8001cda:	d827      	bhi.n	8001d2c <__aeabi_ddiv+0xe8>
 8001cdc:	49ba      	ldr	r1, [pc, #744]	@ (8001fc8 <__aeabi_ddiv+0x384>)
 8001cde:	00a4      	lsls	r4, r4, #2
 8001ce0:	5909      	ldr	r1, [r1, r4]
 8001ce2:	468f      	mov	pc, r1
 8001ce4:	46cb      	mov	fp, r9
 8001ce6:	4642      	mov	r2, r8
 8001ce8:	9e02      	ldr	r6, [sp, #8]
 8001cea:	9b03      	ldr	r3, [sp, #12]
 8001cec:	2b02      	cmp	r3, #2
 8001cee:	d016      	beq.n	8001d1e <__aeabi_ddiv+0xda>
 8001cf0:	2b03      	cmp	r3, #3
 8001cf2:	d100      	bne.n	8001cf6 <__aeabi_ddiv+0xb2>
 8001cf4:	e2a6      	b.n	8002244 <__aeabi_ddiv+0x600>
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d000      	beq.n	8001cfc <__aeabi_ddiv+0xb8>
 8001cfa:	e0df      	b.n	8001ebc <__aeabi_ddiv+0x278>
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	2300      	movs	r3, #0
 8001d00:	2400      	movs	r4, #0
 8001d02:	4690      	mov	r8, r2
 8001d04:	051b      	lsls	r3, r3, #20
 8001d06:	4323      	orrs	r3, r4
 8001d08:	07f6      	lsls	r6, r6, #31
 8001d0a:	4333      	orrs	r3, r6
 8001d0c:	4640      	mov	r0, r8
 8001d0e:	0019      	movs	r1, r3
 8001d10:	b007      	add	sp, #28
 8001d12:	bcf0      	pop	{r4, r5, r6, r7}
 8001d14:	46bb      	mov	fp, r7
 8001d16:	46b2      	mov	sl, r6
 8001d18:	46a9      	mov	r9, r5
 8001d1a:	46a0      	mov	r8, r4
 8001d1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d1e:	2200      	movs	r2, #0
 8001d20:	2400      	movs	r4, #0
 8001d22:	4690      	mov	r8, r2
 8001d24:	4ba6      	ldr	r3, [pc, #664]	@ (8001fc0 <__aeabi_ddiv+0x37c>)
 8001d26:	e7ed      	b.n	8001d04 <__aeabi_ddiv+0xc0>
 8001d28:	002e      	movs	r6, r5
 8001d2a:	e7df      	b.n	8001cec <__aeabi_ddiv+0xa8>
 8001d2c:	45cb      	cmp	fp, r9
 8001d2e:	d200      	bcs.n	8001d32 <__aeabi_ddiv+0xee>
 8001d30:	e1d4      	b.n	80020dc <__aeabi_ddiv+0x498>
 8001d32:	d100      	bne.n	8001d36 <__aeabi_ddiv+0xf2>
 8001d34:	e1cf      	b.n	80020d6 <__aeabi_ddiv+0x492>
 8001d36:	2301      	movs	r3, #1
 8001d38:	425b      	negs	r3, r3
 8001d3a:	469c      	mov	ip, r3
 8001d3c:	4644      	mov	r4, r8
 8001d3e:	4648      	mov	r0, r9
 8001d40:	2700      	movs	r7, #0
 8001d42:	44e2      	add	sl, ip
 8001d44:	465b      	mov	r3, fp
 8001d46:	0e15      	lsrs	r5, r2, #24
 8001d48:	021b      	lsls	r3, r3, #8
 8001d4a:	431d      	orrs	r5, r3
 8001d4c:	0c19      	lsrs	r1, r3, #16
 8001d4e:	042b      	lsls	r3, r5, #16
 8001d50:	0212      	lsls	r2, r2, #8
 8001d52:	9500      	str	r5, [sp, #0]
 8001d54:	0c1d      	lsrs	r5, r3, #16
 8001d56:	4691      	mov	r9, r2
 8001d58:	9102      	str	r1, [sp, #8]
 8001d5a:	9503      	str	r5, [sp, #12]
 8001d5c:	f7fe fa76 	bl	800024c <__aeabi_uidivmod>
 8001d60:	0002      	movs	r2, r0
 8001d62:	436a      	muls	r2, r5
 8001d64:	040b      	lsls	r3, r1, #16
 8001d66:	0c21      	lsrs	r1, r4, #16
 8001d68:	4680      	mov	r8, r0
 8001d6a:	4319      	orrs	r1, r3
 8001d6c:	428a      	cmp	r2, r1
 8001d6e:	d909      	bls.n	8001d84 <__aeabi_ddiv+0x140>
 8001d70:	9d00      	ldr	r5, [sp, #0]
 8001d72:	2301      	movs	r3, #1
 8001d74:	46ac      	mov	ip, r5
 8001d76:	425b      	negs	r3, r3
 8001d78:	4461      	add	r1, ip
 8001d7a:	469c      	mov	ip, r3
 8001d7c:	44e0      	add	r8, ip
 8001d7e:	428d      	cmp	r5, r1
 8001d80:	d800      	bhi.n	8001d84 <__aeabi_ddiv+0x140>
 8001d82:	e1fb      	b.n	800217c <__aeabi_ddiv+0x538>
 8001d84:	1a88      	subs	r0, r1, r2
 8001d86:	9902      	ldr	r1, [sp, #8]
 8001d88:	f7fe fa60 	bl	800024c <__aeabi_uidivmod>
 8001d8c:	9a03      	ldr	r2, [sp, #12]
 8001d8e:	0424      	lsls	r4, r4, #16
 8001d90:	4342      	muls	r2, r0
 8001d92:	0409      	lsls	r1, r1, #16
 8001d94:	0c24      	lsrs	r4, r4, #16
 8001d96:	0003      	movs	r3, r0
 8001d98:	430c      	orrs	r4, r1
 8001d9a:	42a2      	cmp	r2, r4
 8001d9c:	d906      	bls.n	8001dac <__aeabi_ddiv+0x168>
 8001d9e:	9900      	ldr	r1, [sp, #0]
 8001da0:	3b01      	subs	r3, #1
 8001da2:	468c      	mov	ip, r1
 8001da4:	4464      	add	r4, ip
 8001da6:	42a1      	cmp	r1, r4
 8001da8:	d800      	bhi.n	8001dac <__aeabi_ddiv+0x168>
 8001daa:	e1e1      	b.n	8002170 <__aeabi_ddiv+0x52c>
 8001dac:	1aa0      	subs	r0, r4, r2
 8001dae:	4642      	mov	r2, r8
 8001db0:	0412      	lsls	r2, r2, #16
 8001db2:	431a      	orrs	r2, r3
 8001db4:	4693      	mov	fp, r2
 8001db6:	464b      	mov	r3, r9
 8001db8:	4659      	mov	r1, fp
 8001dba:	0c1b      	lsrs	r3, r3, #16
 8001dbc:	001d      	movs	r5, r3
 8001dbe:	9304      	str	r3, [sp, #16]
 8001dc0:	040b      	lsls	r3, r1, #16
 8001dc2:	4649      	mov	r1, r9
 8001dc4:	0409      	lsls	r1, r1, #16
 8001dc6:	0c09      	lsrs	r1, r1, #16
 8001dc8:	000c      	movs	r4, r1
 8001dca:	0c1b      	lsrs	r3, r3, #16
 8001dcc:	435c      	muls	r4, r3
 8001dce:	0c12      	lsrs	r2, r2, #16
 8001dd0:	436b      	muls	r3, r5
 8001dd2:	4688      	mov	r8, r1
 8001dd4:	4351      	muls	r1, r2
 8001dd6:	436a      	muls	r2, r5
 8001dd8:	0c25      	lsrs	r5, r4, #16
 8001dda:	46ac      	mov	ip, r5
 8001ddc:	185b      	adds	r3, r3, r1
 8001dde:	4463      	add	r3, ip
 8001de0:	4299      	cmp	r1, r3
 8001de2:	d903      	bls.n	8001dec <__aeabi_ddiv+0x1a8>
 8001de4:	2180      	movs	r1, #128	@ 0x80
 8001de6:	0249      	lsls	r1, r1, #9
 8001de8:	468c      	mov	ip, r1
 8001dea:	4462      	add	r2, ip
 8001dec:	0c19      	lsrs	r1, r3, #16
 8001dee:	0424      	lsls	r4, r4, #16
 8001df0:	041b      	lsls	r3, r3, #16
 8001df2:	0c24      	lsrs	r4, r4, #16
 8001df4:	188a      	adds	r2, r1, r2
 8001df6:	191c      	adds	r4, r3, r4
 8001df8:	4290      	cmp	r0, r2
 8001dfa:	d302      	bcc.n	8001e02 <__aeabi_ddiv+0x1be>
 8001dfc:	d116      	bne.n	8001e2c <__aeabi_ddiv+0x1e8>
 8001dfe:	42a7      	cmp	r7, r4
 8001e00:	d214      	bcs.n	8001e2c <__aeabi_ddiv+0x1e8>
 8001e02:	465b      	mov	r3, fp
 8001e04:	9d00      	ldr	r5, [sp, #0]
 8001e06:	3b01      	subs	r3, #1
 8001e08:	444f      	add	r7, r9
 8001e0a:	9305      	str	r3, [sp, #20]
 8001e0c:	454f      	cmp	r7, r9
 8001e0e:	419b      	sbcs	r3, r3
 8001e10:	46ac      	mov	ip, r5
 8001e12:	425b      	negs	r3, r3
 8001e14:	4463      	add	r3, ip
 8001e16:	18c0      	adds	r0, r0, r3
 8001e18:	4285      	cmp	r5, r0
 8001e1a:	d300      	bcc.n	8001e1e <__aeabi_ddiv+0x1da>
 8001e1c:	e1a1      	b.n	8002162 <__aeabi_ddiv+0x51e>
 8001e1e:	4282      	cmp	r2, r0
 8001e20:	d900      	bls.n	8001e24 <__aeabi_ddiv+0x1e0>
 8001e22:	e1f6      	b.n	8002212 <__aeabi_ddiv+0x5ce>
 8001e24:	d100      	bne.n	8001e28 <__aeabi_ddiv+0x1e4>
 8001e26:	e1f1      	b.n	800220c <__aeabi_ddiv+0x5c8>
 8001e28:	9b05      	ldr	r3, [sp, #20]
 8001e2a:	469b      	mov	fp, r3
 8001e2c:	1b3c      	subs	r4, r7, r4
 8001e2e:	42a7      	cmp	r7, r4
 8001e30:	41bf      	sbcs	r7, r7
 8001e32:	9d00      	ldr	r5, [sp, #0]
 8001e34:	1a80      	subs	r0, r0, r2
 8001e36:	427f      	negs	r7, r7
 8001e38:	1bc0      	subs	r0, r0, r7
 8001e3a:	4285      	cmp	r5, r0
 8001e3c:	d100      	bne.n	8001e40 <__aeabi_ddiv+0x1fc>
 8001e3e:	e1d0      	b.n	80021e2 <__aeabi_ddiv+0x59e>
 8001e40:	9902      	ldr	r1, [sp, #8]
 8001e42:	f7fe fa03 	bl	800024c <__aeabi_uidivmod>
 8001e46:	9a03      	ldr	r2, [sp, #12]
 8001e48:	040b      	lsls	r3, r1, #16
 8001e4a:	4342      	muls	r2, r0
 8001e4c:	0c21      	lsrs	r1, r4, #16
 8001e4e:	0007      	movs	r7, r0
 8001e50:	4319      	orrs	r1, r3
 8001e52:	428a      	cmp	r2, r1
 8001e54:	d900      	bls.n	8001e58 <__aeabi_ddiv+0x214>
 8001e56:	e178      	b.n	800214a <__aeabi_ddiv+0x506>
 8001e58:	1a88      	subs	r0, r1, r2
 8001e5a:	9902      	ldr	r1, [sp, #8]
 8001e5c:	f7fe f9f6 	bl	800024c <__aeabi_uidivmod>
 8001e60:	9a03      	ldr	r2, [sp, #12]
 8001e62:	0424      	lsls	r4, r4, #16
 8001e64:	4342      	muls	r2, r0
 8001e66:	0409      	lsls	r1, r1, #16
 8001e68:	0c24      	lsrs	r4, r4, #16
 8001e6a:	0003      	movs	r3, r0
 8001e6c:	430c      	orrs	r4, r1
 8001e6e:	42a2      	cmp	r2, r4
 8001e70:	d900      	bls.n	8001e74 <__aeabi_ddiv+0x230>
 8001e72:	e15d      	b.n	8002130 <__aeabi_ddiv+0x4ec>
 8001e74:	4641      	mov	r1, r8
 8001e76:	1aa4      	subs	r4, r4, r2
 8001e78:	043a      	lsls	r2, r7, #16
 8001e7a:	431a      	orrs	r2, r3
 8001e7c:	9d04      	ldr	r5, [sp, #16]
 8001e7e:	0413      	lsls	r3, r2, #16
 8001e80:	0c1b      	lsrs	r3, r3, #16
 8001e82:	4359      	muls	r1, r3
 8001e84:	4647      	mov	r7, r8
 8001e86:	436b      	muls	r3, r5
 8001e88:	469c      	mov	ip, r3
 8001e8a:	0c10      	lsrs	r0, r2, #16
 8001e8c:	4347      	muls	r7, r0
 8001e8e:	0c0b      	lsrs	r3, r1, #16
 8001e90:	44bc      	add	ip, r7
 8001e92:	4463      	add	r3, ip
 8001e94:	4368      	muls	r0, r5
 8001e96:	429f      	cmp	r7, r3
 8001e98:	d903      	bls.n	8001ea2 <__aeabi_ddiv+0x25e>
 8001e9a:	2580      	movs	r5, #128	@ 0x80
 8001e9c:	026d      	lsls	r5, r5, #9
 8001e9e:	46ac      	mov	ip, r5
 8001ea0:	4460      	add	r0, ip
 8001ea2:	0c1f      	lsrs	r7, r3, #16
 8001ea4:	0409      	lsls	r1, r1, #16
 8001ea6:	041b      	lsls	r3, r3, #16
 8001ea8:	0c09      	lsrs	r1, r1, #16
 8001eaa:	183f      	adds	r7, r7, r0
 8001eac:	185b      	adds	r3, r3, r1
 8001eae:	42bc      	cmp	r4, r7
 8001eb0:	d200      	bcs.n	8001eb4 <__aeabi_ddiv+0x270>
 8001eb2:	e102      	b.n	80020ba <__aeabi_ddiv+0x476>
 8001eb4:	d100      	bne.n	8001eb8 <__aeabi_ddiv+0x274>
 8001eb6:	e0fd      	b.n	80020b4 <__aeabi_ddiv+0x470>
 8001eb8:	2301      	movs	r3, #1
 8001eba:	431a      	orrs	r2, r3
 8001ebc:	4b43      	ldr	r3, [pc, #268]	@ (8001fcc <__aeabi_ddiv+0x388>)
 8001ebe:	4453      	add	r3, sl
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	dc00      	bgt.n	8001ec6 <__aeabi_ddiv+0x282>
 8001ec4:	e0ae      	b.n	8002024 <__aeabi_ddiv+0x3e0>
 8001ec6:	0751      	lsls	r1, r2, #29
 8001ec8:	d000      	beq.n	8001ecc <__aeabi_ddiv+0x288>
 8001eca:	e198      	b.n	80021fe <__aeabi_ddiv+0x5ba>
 8001ecc:	4659      	mov	r1, fp
 8001ece:	01c9      	lsls	r1, r1, #7
 8001ed0:	d506      	bpl.n	8001ee0 <__aeabi_ddiv+0x29c>
 8001ed2:	4659      	mov	r1, fp
 8001ed4:	4b3e      	ldr	r3, [pc, #248]	@ (8001fd0 <__aeabi_ddiv+0x38c>)
 8001ed6:	4019      	ands	r1, r3
 8001ed8:	2380      	movs	r3, #128	@ 0x80
 8001eda:	468b      	mov	fp, r1
 8001edc:	00db      	lsls	r3, r3, #3
 8001ede:	4453      	add	r3, sl
 8001ee0:	493c      	ldr	r1, [pc, #240]	@ (8001fd4 <__aeabi_ddiv+0x390>)
 8001ee2:	428b      	cmp	r3, r1
 8001ee4:	dd00      	ble.n	8001ee8 <__aeabi_ddiv+0x2a4>
 8001ee6:	e71a      	b.n	8001d1e <__aeabi_ddiv+0xda>
 8001ee8:	4659      	mov	r1, fp
 8001eea:	08d2      	lsrs	r2, r2, #3
 8001eec:	0749      	lsls	r1, r1, #29
 8001eee:	4311      	orrs	r1, r2
 8001ef0:	465a      	mov	r2, fp
 8001ef2:	055b      	lsls	r3, r3, #21
 8001ef4:	0254      	lsls	r4, r2, #9
 8001ef6:	4688      	mov	r8, r1
 8001ef8:	0b24      	lsrs	r4, r4, #12
 8001efa:	0d5b      	lsrs	r3, r3, #21
 8001efc:	e702      	b.n	8001d04 <__aeabi_ddiv+0xc0>
 8001efe:	465a      	mov	r2, fp
 8001f00:	9b00      	ldr	r3, [sp, #0]
 8001f02:	431a      	orrs	r2, r3
 8001f04:	d100      	bne.n	8001f08 <__aeabi_ddiv+0x2c4>
 8001f06:	e07e      	b.n	8002006 <__aeabi_ddiv+0x3c2>
 8001f08:	465b      	mov	r3, fp
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d100      	bne.n	8001f10 <__aeabi_ddiv+0x2cc>
 8001f0e:	e100      	b.n	8002112 <__aeabi_ddiv+0x4ce>
 8001f10:	4658      	mov	r0, fp
 8001f12:	f001 fa73 	bl	80033fc <__clzsi2>
 8001f16:	0002      	movs	r2, r0
 8001f18:	0003      	movs	r3, r0
 8001f1a:	3a0b      	subs	r2, #11
 8001f1c:	271d      	movs	r7, #29
 8001f1e:	9e00      	ldr	r6, [sp, #0]
 8001f20:	1aba      	subs	r2, r7, r2
 8001f22:	0019      	movs	r1, r3
 8001f24:	4658      	mov	r0, fp
 8001f26:	40d6      	lsrs	r6, r2
 8001f28:	3908      	subs	r1, #8
 8001f2a:	4088      	lsls	r0, r1
 8001f2c:	0032      	movs	r2, r6
 8001f2e:	4302      	orrs	r2, r0
 8001f30:	4693      	mov	fp, r2
 8001f32:	9a00      	ldr	r2, [sp, #0]
 8001f34:	408a      	lsls	r2, r1
 8001f36:	4928      	ldr	r1, [pc, #160]	@ (8001fd8 <__aeabi_ddiv+0x394>)
 8001f38:	4453      	add	r3, sl
 8001f3a:	468a      	mov	sl, r1
 8001f3c:	449a      	add	sl, r3
 8001f3e:	2300      	movs	r3, #0
 8001f40:	e6c8      	b.n	8001cd4 <__aeabi_ddiv+0x90>
 8001f42:	465b      	mov	r3, fp
 8001f44:	4303      	orrs	r3, r0
 8001f46:	4699      	mov	r9, r3
 8001f48:	d056      	beq.n	8001ff8 <__aeabi_ddiv+0x3b4>
 8001f4a:	465b      	mov	r3, fp
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d100      	bne.n	8001f52 <__aeabi_ddiv+0x30e>
 8001f50:	e0cd      	b.n	80020ee <__aeabi_ddiv+0x4aa>
 8001f52:	4658      	mov	r0, fp
 8001f54:	f001 fa52 	bl	80033fc <__clzsi2>
 8001f58:	230b      	movs	r3, #11
 8001f5a:	425b      	negs	r3, r3
 8001f5c:	469c      	mov	ip, r3
 8001f5e:	0002      	movs	r2, r0
 8001f60:	4484      	add	ip, r0
 8001f62:	4666      	mov	r6, ip
 8001f64:	231d      	movs	r3, #29
 8001f66:	1b9b      	subs	r3, r3, r6
 8001f68:	0026      	movs	r6, r4
 8001f6a:	0011      	movs	r1, r2
 8001f6c:	4658      	mov	r0, fp
 8001f6e:	40de      	lsrs	r6, r3
 8001f70:	3908      	subs	r1, #8
 8001f72:	4088      	lsls	r0, r1
 8001f74:	0033      	movs	r3, r6
 8001f76:	4303      	orrs	r3, r0
 8001f78:	4699      	mov	r9, r3
 8001f7a:	0023      	movs	r3, r4
 8001f7c:	408b      	lsls	r3, r1
 8001f7e:	4698      	mov	r8, r3
 8001f80:	4b16      	ldr	r3, [pc, #88]	@ (8001fdc <__aeabi_ddiv+0x398>)
 8001f82:	2400      	movs	r4, #0
 8001f84:	1a9b      	subs	r3, r3, r2
 8001f86:	469a      	mov	sl, r3
 8001f88:	2300      	movs	r3, #0
 8001f8a:	9303      	str	r3, [sp, #12]
 8001f8c:	e682      	b.n	8001c94 <__aeabi_ddiv+0x50>
 8001f8e:	465a      	mov	r2, fp
 8001f90:	4302      	orrs	r2, r0
 8001f92:	4691      	mov	r9, r2
 8001f94:	d12a      	bne.n	8001fec <__aeabi_ddiv+0x3a8>
 8001f96:	2200      	movs	r2, #0
 8001f98:	469a      	mov	sl, r3
 8001f9a:	2302      	movs	r3, #2
 8001f9c:	4690      	mov	r8, r2
 8001f9e:	2408      	movs	r4, #8
 8001fa0:	9303      	str	r3, [sp, #12]
 8001fa2:	e677      	b.n	8001c94 <__aeabi_ddiv+0x50>
 8001fa4:	465a      	mov	r2, fp
 8001fa6:	9b00      	ldr	r3, [sp, #0]
 8001fa8:	431a      	orrs	r2, r3
 8001faa:	4b0d      	ldr	r3, [pc, #52]	@ (8001fe0 <__aeabi_ddiv+0x39c>)
 8001fac:	469c      	mov	ip, r3
 8001fae:	44e2      	add	sl, ip
 8001fb0:	2a00      	cmp	r2, #0
 8001fb2:	d117      	bne.n	8001fe4 <__aeabi_ddiv+0x3a0>
 8001fb4:	2302      	movs	r3, #2
 8001fb6:	431c      	orrs	r4, r3
 8001fb8:	2300      	movs	r3, #0
 8001fba:	469b      	mov	fp, r3
 8001fbc:	3302      	adds	r3, #2
 8001fbe:	e689      	b.n	8001cd4 <__aeabi_ddiv+0x90>
 8001fc0:	000007ff 	.word	0x000007ff
 8001fc4:	fffffc01 	.word	0xfffffc01
 8001fc8:	0800e964 	.word	0x0800e964
 8001fcc:	000003ff 	.word	0x000003ff
 8001fd0:	feffffff 	.word	0xfeffffff
 8001fd4:	000007fe 	.word	0x000007fe
 8001fd8:	000003f3 	.word	0x000003f3
 8001fdc:	fffffc0d 	.word	0xfffffc0d
 8001fe0:	fffff801 	.word	0xfffff801
 8001fe4:	2303      	movs	r3, #3
 8001fe6:	0032      	movs	r2, r6
 8001fe8:	431c      	orrs	r4, r3
 8001fea:	e673      	b.n	8001cd4 <__aeabi_ddiv+0x90>
 8001fec:	469a      	mov	sl, r3
 8001fee:	2303      	movs	r3, #3
 8001ff0:	46d9      	mov	r9, fp
 8001ff2:	240c      	movs	r4, #12
 8001ff4:	9303      	str	r3, [sp, #12]
 8001ff6:	e64d      	b.n	8001c94 <__aeabi_ddiv+0x50>
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	4698      	mov	r8, r3
 8001ffc:	469a      	mov	sl, r3
 8001ffe:	3301      	adds	r3, #1
 8002000:	2404      	movs	r4, #4
 8002002:	9303      	str	r3, [sp, #12]
 8002004:	e646      	b.n	8001c94 <__aeabi_ddiv+0x50>
 8002006:	2301      	movs	r3, #1
 8002008:	431c      	orrs	r4, r3
 800200a:	2300      	movs	r3, #0
 800200c:	469b      	mov	fp, r3
 800200e:	3301      	adds	r3, #1
 8002010:	e660      	b.n	8001cd4 <__aeabi_ddiv+0x90>
 8002012:	2300      	movs	r3, #0
 8002014:	2480      	movs	r4, #128	@ 0x80
 8002016:	4698      	mov	r8, r3
 8002018:	2600      	movs	r6, #0
 800201a:	4b92      	ldr	r3, [pc, #584]	@ (8002264 <__aeabi_ddiv+0x620>)
 800201c:	0324      	lsls	r4, r4, #12
 800201e:	e671      	b.n	8001d04 <__aeabi_ddiv+0xc0>
 8002020:	2201      	movs	r2, #1
 8002022:	4252      	negs	r2, r2
 8002024:	2101      	movs	r1, #1
 8002026:	1ac9      	subs	r1, r1, r3
 8002028:	2938      	cmp	r1, #56	@ 0x38
 800202a:	dd00      	ble.n	800202e <__aeabi_ddiv+0x3ea>
 800202c:	e666      	b.n	8001cfc <__aeabi_ddiv+0xb8>
 800202e:	291f      	cmp	r1, #31
 8002030:	dc00      	bgt.n	8002034 <__aeabi_ddiv+0x3f0>
 8002032:	e0ab      	b.n	800218c <__aeabi_ddiv+0x548>
 8002034:	201f      	movs	r0, #31
 8002036:	4240      	negs	r0, r0
 8002038:	1ac3      	subs	r3, r0, r3
 800203a:	4658      	mov	r0, fp
 800203c:	40d8      	lsrs	r0, r3
 800203e:	0003      	movs	r3, r0
 8002040:	2920      	cmp	r1, #32
 8002042:	d004      	beq.n	800204e <__aeabi_ddiv+0x40a>
 8002044:	4658      	mov	r0, fp
 8002046:	4988      	ldr	r1, [pc, #544]	@ (8002268 <__aeabi_ddiv+0x624>)
 8002048:	4451      	add	r1, sl
 800204a:	4088      	lsls	r0, r1
 800204c:	4302      	orrs	r2, r0
 800204e:	1e51      	subs	r1, r2, #1
 8002050:	418a      	sbcs	r2, r1
 8002052:	431a      	orrs	r2, r3
 8002054:	2307      	movs	r3, #7
 8002056:	0019      	movs	r1, r3
 8002058:	2400      	movs	r4, #0
 800205a:	4011      	ands	r1, r2
 800205c:	4213      	tst	r3, r2
 800205e:	d00c      	beq.n	800207a <__aeabi_ddiv+0x436>
 8002060:	230f      	movs	r3, #15
 8002062:	4013      	ands	r3, r2
 8002064:	2b04      	cmp	r3, #4
 8002066:	d100      	bne.n	800206a <__aeabi_ddiv+0x426>
 8002068:	e0f9      	b.n	800225e <__aeabi_ddiv+0x61a>
 800206a:	1d11      	adds	r1, r2, #4
 800206c:	4291      	cmp	r1, r2
 800206e:	419b      	sbcs	r3, r3
 8002070:	000a      	movs	r2, r1
 8002072:	425b      	negs	r3, r3
 8002074:	0759      	lsls	r1, r3, #29
 8002076:	025b      	lsls	r3, r3, #9
 8002078:	0b1c      	lsrs	r4, r3, #12
 800207a:	08d2      	lsrs	r2, r2, #3
 800207c:	430a      	orrs	r2, r1
 800207e:	4690      	mov	r8, r2
 8002080:	2300      	movs	r3, #0
 8002082:	e63f      	b.n	8001d04 <__aeabi_ddiv+0xc0>
 8002084:	2480      	movs	r4, #128	@ 0x80
 8002086:	464b      	mov	r3, r9
 8002088:	0324      	lsls	r4, r4, #12
 800208a:	4223      	tst	r3, r4
 800208c:	d009      	beq.n	80020a2 <__aeabi_ddiv+0x45e>
 800208e:	465b      	mov	r3, fp
 8002090:	4223      	tst	r3, r4
 8002092:	d106      	bne.n	80020a2 <__aeabi_ddiv+0x45e>
 8002094:	431c      	orrs	r4, r3
 8002096:	0324      	lsls	r4, r4, #12
 8002098:	002e      	movs	r6, r5
 800209a:	4690      	mov	r8, r2
 800209c:	4b71      	ldr	r3, [pc, #452]	@ (8002264 <__aeabi_ddiv+0x620>)
 800209e:	0b24      	lsrs	r4, r4, #12
 80020a0:	e630      	b.n	8001d04 <__aeabi_ddiv+0xc0>
 80020a2:	2480      	movs	r4, #128	@ 0x80
 80020a4:	464b      	mov	r3, r9
 80020a6:	0324      	lsls	r4, r4, #12
 80020a8:	431c      	orrs	r4, r3
 80020aa:	0324      	lsls	r4, r4, #12
 80020ac:	9e02      	ldr	r6, [sp, #8]
 80020ae:	4b6d      	ldr	r3, [pc, #436]	@ (8002264 <__aeabi_ddiv+0x620>)
 80020b0:	0b24      	lsrs	r4, r4, #12
 80020b2:	e627      	b.n	8001d04 <__aeabi_ddiv+0xc0>
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d100      	bne.n	80020ba <__aeabi_ddiv+0x476>
 80020b8:	e700      	b.n	8001ebc <__aeabi_ddiv+0x278>
 80020ba:	9800      	ldr	r0, [sp, #0]
 80020bc:	1e51      	subs	r1, r2, #1
 80020be:	4684      	mov	ip, r0
 80020c0:	4464      	add	r4, ip
 80020c2:	4284      	cmp	r4, r0
 80020c4:	d200      	bcs.n	80020c8 <__aeabi_ddiv+0x484>
 80020c6:	e084      	b.n	80021d2 <__aeabi_ddiv+0x58e>
 80020c8:	42bc      	cmp	r4, r7
 80020ca:	d200      	bcs.n	80020ce <__aeabi_ddiv+0x48a>
 80020cc:	e0ae      	b.n	800222c <__aeabi_ddiv+0x5e8>
 80020ce:	d100      	bne.n	80020d2 <__aeabi_ddiv+0x48e>
 80020d0:	e0c1      	b.n	8002256 <__aeabi_ddiv+0x612>
 80020d2:	000a      	movs	r2, r1
 80020d4:	e6f0      	b.n	8001eb8 <__aeabi_ddiv+0x274>
 80020d6:	4542      	cmp	r2, r8
 80020d8:	d900      	bls.n	80020dc <__aeabi_ddiv+0x498>
 80020da:	e62c      	b.n	8001d36 <__aeabi_ddiv+0xf2>
 80020dc:	464b      	mov	r3, r9
 80020de:	07dc      	lsls	r4, r3, #31
 80020e0:	0858      	lsrs	r0, r3, #1
 80020e2:	4643      	mov	r3, r8
 80020e4:	085b      	lsrs	r3, r3, #1
 80020e6:	431c      	orrs	r4, r3
 80020e8:	4643      	mov	r3, r8
 80020ea:	07df      	lsls	r7, r3, #31
 80020ec:	e62a      	b.n	8001d44 <__aeabi_ddiv+0x100>
 80020ee:	f001 f985 	bl	80033fc <__clzsi2>
 80020f2:	2315      	movs	r3, #21
 80020f4:	469c      	mov	ip, r3
 80020f6:	4484      	add	ip, r0
 80020f8:	0002      	movs	r2, r0
 80020fa:	4663      	mov	r3, ip
 80020fc:	3220      	adds	r2, #32
 80020fe:	2b1c      	cmp	r3, #28
 8002100:	dc00      	bgt.n	8002104 <__aeabi_ddiv+0x4c0>
 8002102:	e72e      	b.n	8001f62 <__aeabi_ddiv+0x31e>
 8002104:	0023      	movs	r3, r4
 8002106:	3808      	subs	r0, #8
 8002108:	4083      	lsls	r3, r0
 800210a:	4699      	mov	r9, r3
 800210c:	2300      	movs	r3, #0
 800210e:	4698      	mov	r8, r3
 8002110:	e736      	b.n	8001f80 <__aeabi_ddiv+0x33c>
 8002112:	f001 f973 	bl	80033fc <__clzsi2>
 8002116:	0002      	movs	r2, r0
 8002118:	0003      	movs	r3, r0
 800211a:	3215      	adds	r2, #21
 800211c:	3320      	adds	r3, #32
 800211e:	2a1c      	cmp	r2, #28
 8002120:	dc00      	bgt.n	8002124 <__aeabi_ddiv+0x4e0>
 8002122:	e6fb      	b.n	8001f1c <__aeabi_ddiv+0x2d8>
 8002124:	9900      	ldr	r1, [sp, #0]
 8002126:	3808      	subs	r0, #8
 8002128:	4081      	lsls	r1, r0
 800212a:	2200      	movs	r2, #0
 800212c:	468b      	mov	fp, r1
 800212e:	e702      	b.n	8001f36 <__aeabi_ddiv+0x2f2>
 8002130:	9900      	ldr	r1, [sp, #0]
 8002132:	3b01      	subs	r3, #1
 8002134:	468c      	mov	ip, r1
 8002136:	4464      	add	r4, ip
 8002138:	42a1      	cmp	r1, r4
 800213a:	d900      	bls.n	800213e <__aeabi_ddiv+0x4fa>
 800213c:	e69a      	b.n	8001e74 <__aeabi_ddiv+0x230>
 800213e:	42a2      	cmp	r2, r4
 8002140:	d800      	bhi.n	8002144 <__aeabi_ddiv+0x500>
 8002142:	e697      	b.n	8001e74 <__aeabi_ddiv+0x230>
 8002144:	1e83      	subs	r3, r0, #2
 8002146:	4464      	add	r4, ip
 8002148:	e694      	b.n	8001e74 <__aeabi_ddiv+0x230>
 800214a:	46ac      	mov	ip, r5
 800214c:	4461      	add	r1, ip
 800214e:	3f01      	subs	r7, #1
 8002150:	428d      	cmp	r5, r1
 8002152:	d900      	bls.n	8002156 <__aeabi_ddiv+0x512>
 8002154:	e680      	b.n	8001e58 <__aeabi_ddiv+0x214>
 8002156:	428a      	cmp	r2, r1
 8002158:	d800      	bhi.n	800215c <__aeabi_ddiv+0x518>
 800215a:	e67d      	b.n	8001e58 <__aeabi_ddiv+0x214>
 800215c:	1e87      	subs	r7, r0, #2
 800215e:	4461      	add	r1, ip
 8002160:	e67a      	b.n	8001e58 <__aeabi_ddiv+0x214>
 8002162:	4285      	cmp	r5, r0
 8002164:	d000      	beq.n	8002168 <__aeabi_ddiv+0x524>
 8002166:	e65f      	b.n	8001e28 <__aeabi_ddiv+0x1e4>
 8002168:	45b9      	cmp	r9, r7
 800216a:	d900      	bls.n	800216e <__aeabi_ddiv+0x52a>
 800216c:	e65c      	b.n	8001e28 <__aeabi_ddiv+0x1e4>
 800216e:	e656      	b.n	8001e1e <__aeabi_ddiv+0x1da>
 8002170:	42a2      	cmp	r2, r4
 8002172:	d800      	bhi.n	8002176 <__aeabi_ddiv+0x532>
 8002174:	e61a      	b.n	8001dac <__aeabi_ddiv+0x168>
 8002176:	1e83      	subs	r3, r0, #2
 8002178:	4464      	add	r4, ip
 800217a:	e617      	b.n	8001dac <__aeabi_ddiv+0x168>
 800217c:	428a      	cmp	r2, r1
 800217e:	d800      	bhi.n	8002182 <__aeabi_ddiv+0x53e>
 8002180:	e600      	b.n	8001d84 <__aeabi_ddiv+0x140>
 8002182:	46ac      	mov	ip, r5
 8002184:	1e83      	subs	r3, r0, #2
 8002186:	4698      	mov	r8, r3
 8002188:	4461      	add	r1, ip
 800218a:	e5fb      	b.n	8001d84 <__aeabi_ddiv+0x140>
 800218c:	4837      	ldr	r0, [pc, #220]	@ (800226c <__aeabi_ddiv+0x628>)
 800218e:	0014      	movs	r4, r2
 8002190:	4450      	add	r0, sl
 8002192:	4082      	lsls	r2, r0
 8002194:	465b      	mov	r3, fp
 8002196:	0017      	movs	r7, r2
 8002198:	4083      	lsls	r3, r0
 800219a:	40cc      	lsrs	r4, r1
 800219c:	1e7a      	subs	r2, r7, #1
 800219e:	4197      	sbcs	r7, r2
 80021a0:	4323      	orrs	r3, r4
 80021a2:	433b      	orrs	r3, r7
 80021a4:	001a      	movs	r2, r3
 80021a6:	465b      	mov	r3, fp
 80021a8:	40cb      	lsrs	r3, r1
 80021aa:	0751      	lsls	r1, r2, #29
 80021ac:	d009      	beq.n	80021c2 <__aeabi_ddiv+0x57e>
 80021ae:	210f      	movs	r1, #15
 80021b0:	4011      	ands	r1, r2
 80021b2:	2904      	cmp	r1, #4
 80021b4:	d005      	beq.n	80021c2 <__aeabi_ddiv+0x57e>
 80021b6:	1d11      	adds	r1, r2, #4
 80021b8:	4291      	cmp	r1, r2
 80021ba:	4192      	sbcs	r2, r2
 80021bc:	4252      	negs	r2, r2
 80021be:	189b      	adds	r3, r3, r2
 80021c0:	000a      	movs	r2, r1
 80021c2:	0219      	lsls	r1, r3, #8
 80021c4:	d400      	bmi.n	80021c8 <__aeabi_ddiv+0x584>
 80021c6:	e755      	b.n	8002074 <__aeabi_ddiv+0x430>
 80021c8:	2200      	movs	r2, #0
 80021ca:	2301      	movs	r3, #1
 80021cc:	2400      	movs	r4, #0
 80021ce:	4690      	mov	r8, r2
 80021d0:	e598      	b.n	8001d04 <__aeabi_ddiv+0xc0>
 80021d2:	000a      	movs	r2, r1
 80021d4:	42bc      	cmp	r4, r7
 80021d6:	d000      	beq.n	80021da <__aeabi_ddiv+0x596>
 80021d8:	e66e      	b.n	8001eb8 <__aeabi_ddiv+0x274>
 80021da:	454b      	cmp	r3, r9
 80021dc:	d000      	beq.n	80021e0 <__aeabi_ddiv+0x59c>
 80021de:	e66b      	b.n	8001eb8 <__aeabi_ddiv+0x274>
 80021e0:	e66c      	b.n	8001ebc <__aeabi_ddiv+0x278>
 80021e2:	4b23      	ldr	r3, [pc, #140]	@ (8002270 <__aeabi_ddiv+0x62c>)
 80021e4:	4a23      	ldr	r2, [pc, #140]	@ (8002274 <__aeabi_ddiv+0x630>)
 80021e6:	4453      	add	r3, sl
 80021e8:	4592      	cmp	sl, r2
 80021ea:	da00      	bge.n	80021ee <__aeabi_ddiv+0x5aa>
 80021ec:	e718      	b.n	8002020 <__aeabi_ddiv+0x3dc>
 80021ee:	2101      	movs	r1, #1
 80021f0:	4249      	negs	r1, r1
 80021f2:	1d0a      	adds	r2, r1, #4
 80021f4:	428a      	cmp	r2, r1
 80021f6:	4189      	sbcs	r1, r1
 80021f8:	4249      	negs	r1, r1
 80021fa:	448b      	add	fp, r1
 80021fc:	e666      	b.n	8001ecc <__aeabi_ddiv+0x288>
 80021fe:	210f      	movs	r1, #15
 8002200:	4011      	ands	r1, r2
 8002202:	2904      	cmp	r1, #4
 8002204:	d100      	bne.n	8002208 <__aeabi_ddiv+0x5c4>
 8002206:	e661      	b.n	8001ecc <__aeabi_ddiv+0x288>
 8002208:	0011      	movs	r1, r2
 800220a:	e7f2      	b.n	80021f2 <__aeabi_ddiv+0x5ae>
 800220c:	42bc      	cmp	r4, r7
 800220e:	d800      	bhi.n	8002212 <__aeabi_ddiv+0x5ce>
 8002210:	e60a      	b.n	8001e28 <__aeabi_ddiv+0x1e4>
 8002212:	2302      	movs	r3, #2
 8002214:	425b      	negs	r3, r3
 8002216:	469c      	mov	ip, r3
 8002218:	9900      	ldr	r1, [sp, #0]
 800221a:	444f      	add	r7, r9
 800221c:	454f      	cmp	r7, r9
 800221e:	419b      	sbcs	r3, r3
 8002220:	44e3      	add	fp, ip
 8002222:	468c      	mov	ip, r1
 8002224:	425b      	negs	r3, r3
 8002226:	4463      	add	r3, ip
 8002228:	18c0      	adds	r0, r0, r3
 800222a:	e5ff      	b.n	8001e2c <__aeabi_ddiv+0x1e8>
 800222c:	4649      	mov	r1, r9
 800222e:	9d00      	ldr	r5, [sp, #0]
 8002230:	0048      	lsls	r0, r1, #1
 8002232:	4548      	cmp	r0, r9
 8002234:	4189      	sbcs	r1, r1
 8002236:	46ac      	mov	ip, r5
 8002238:	4249      	negs	r1, r1
 800223a:	4461      	add	r1, ip
 800223c:	4681      	mov	r9, r0
 800223e:	3a02      	subs	r2, #2
 8002240:	1864      	adds	r4, r4, r1
 8002242:	e7c7      	b.n	80021d4 <__aeabi_ddiv+0x590>
 8002244:	2480      	movs	r4, #128	@ 0x80
 8002246:	465b      	mov	r3, fp
 8002248:	0324      	lsls	r4, r4, #12
 800224a:	431c      	orrs	r4, r3
 800224c:	0324      	lsls	r4, r4, #12
 800224e:	4690      	mov	r8, r2
 8002250:	4b04      	ldr	r3, [pc, #16]	@ (8002264 <__aeabi_ddiv+0x620>)
 8002252:	0b24      	lsrs	r4, r4, #12
 8002254:	e556      	b.n	8001d04 <__aeabi_ddiv+0xc0>
 8002256:	4599      	cmp	r9, r3
 8002258:	d3e8      	bcc.n	800222c <__aeabi_ddiv+0x5e8>
 800225a:	000a      	movs	r2, r1
 800225c:	e7bd      	b.n	80021da <__aeabi_ddiv+0x596>
 800225e:	2300      	movs	r3, #0
 8002260:	e708      	b.n	8002074 <__aeabi_ddiv+0x430>
 8002262:	46c0      	nop			@ (mov r8, r8)
 8002264:	000007ff 	.word	0x000007ff
 8002268:	0000043e 	.word	0x0000043e
 800226c:	0000041e 	.word	0x0000041e
 8002270:	000003ff 	.word	0x000003ff
 8002274:	fffffc02 	.word	0xfffffc02

08002278 <__eqdf2>:
 8002278:	b5f0      	push	{r4, r5, r6, r7, lr}
 800227a:	4657      	mov	r7, sl
 800227c:	46de      	mov	lr, fp
 800227e:	464e      	mov	r6, r9
 8002280:	4645      	mov	r5, r8
 8002282:	b5e0      	push	{r5, r6, r7, lr}
 8002284:	000d      	movs	r5, r1
 8002286:	0004      	movs	r4, r0
 8002288:	0fe8      	lsrs	r0, r5, #31
 800228a:	4683      	mov	fp, r0
 800228c:	0309      	lsls	r1, r1, #12
 800228e:	0fd8      	lsrs	r0, r3, #31
 8002290:	0b09      	lsrs	r1, r1, #12
 8002292:	4682      	mov	sl, r0
 8002294:	4819      	ldr	r0, [pc, #100]	@ (80022fc <__eqdf2+0x84>)
 8002296:	468c      	mov	ip, r1
 8002298:	031f      	lsls	r7, r3, #12
 800229a:	0069      	lsls	r1, r5, #1
 800229c:	005e      	lsls	r6, r3, #1
 800229e:	0d49      	lsrs	r1, r1, #21
 80022a0:	0b3f      	lsrs	r7, r7, #12
 80022a2:	0d76      	lsrs	r6, r6, #21
 80022a4:	4281      	cmp	r1, r0
 80022a6:	d018      	beq.n	80022da <__eqdf2+0x62>
 80022a8:	4286      	cmp	r6, r0
 80022aa:	d00f      	beq.n	80022cc <__eqdf2+0x54>
 80022ac:	2001      	movs	r0, #1
 80022ae:	42b1      	cmp	r1, r6
 80022b0:	d10d      	bne.n	80022ce <__eqdf2+0x56>
 80022b2:	45bc      	cmp	ip, r7
 80022b4:	d10b      	bne.n	80022ce <__eqdf2+0x56>
 80022b6:	4294      	cmp	r4, r2
 80022b8:	d109      	bne.n	80022ce <__eqdf2+0x56>
 80022ba:	45d3      	cmp	fp, sl
 80022bc:	d01c      	beq.n	80022f8 <__eqdf2+0x80>
 80022be:	2900      	cmp	r1, #0
 80022c0:	d105      	bne.n	80022ce <__eqdf2+0x56>
 80022c2:	4660      	mov	r0, ip
 80022c4:	4320      	orrs	r0, r4
 80022c6:	1e43      	subs	r3, r0, #1
 80022c8:	4198      	sbcs	r0, r3
 80022ca:	e000      	b.n	80022ce <__eqdf2+0x56>
 80022cc:	2001      	movs	r0, #1
 80022ce:	bcf0      	pop	{r4, r5, r6, r7}
 80022d0:	46bb      	mov	fp, r7
 80022d2:	46b2      	mov	sl, r6
 80022d4:	46a9      	mov	r9, r5
 80022d6:	46a0      	mov	r8, r4
 80022d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022da:	2001      	movs	r0, #1
 80022dc:	428e      	cmp	r6, r1
 80022de:	d1f6      	bne.n	80022ce <__eqdf2+0x56>
 80022e0:	4661      	mov	r1, ip
 80022e2:	4339      	orrs	r1, r7
 80022e4:	000f      	movs	r7, r1
 80022e6:	4317      	orrs	r7, r2
 80022e8:	4327      	orrs	r7, r4
 80022ea:	d1f0      	bne.n	80022ce <__eqdf2+0x56>
 80022ec:	465b      	mov	r3, fp
 80022ee:	4652      	mov	r2, sl
 80022f0:	1a98      	subs	r0, r3, r2
 80022f2:	1e43      	subs	r3, r0, #1
 80022f4:	4198      	sbcs	r0, r3
 80022f6:	e7ea      	b.n	80022ce <__eqdf2+0x56>
 80022f8:	2000      	movs	r0, #0
 80022fa:	e7e8      	b.n	80022ce <__eqdf2+0x56>
 80022fc:	000007ff 	.word	0x000007ff

08002300 <__gedf2>:
 8002300:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002302:	4657      	mov	r7, sl
 8002304:	464e      	mov	r6, r9
 8002306:	4645      	mov	r5, r8
 8002308:	46de      	mov	lr, fp
 800230a:	b5e0      	push	{r5, r6, r7, lr}
 800230c:	000d      	movs	r5, r1
 800230e:	030f      	lsls	r7, r1, #12
 8002310:	0b39      	lsrs	r1, r7, #12
 8002312:	b083      	sub	sp, #12
 8002314:	0004      	movs	r4, r0
 8002316:	4680      	mov	r8, r0
 8002318:	9101      	str	r1, [sp, #4]
 800231a:	0058      	lsls	r0, r3, #1
 800231c:	0fe9      	lsrs	r1, r5, #31
 800231e:	4f31      	ldr	r7, [pc, #196]	@ (80023e4 <__gedf2+0xe4>)
 8002320:	0d40      	lsrs	r0, r0, #21
 8002322:	468c      	mov	ip, r1
 8002324:	006e      	lsls	r6, r5, #1
 8002326:	0319      	lsls	r1, r3, #12
 8002328:	4682      	mov	sl, r0
 800232a:	4691      	mov	r9, r2
 800232c:	0d76      	lsrs	r6, r6, #21
 800232e:	0b09      	lsrs	r1, r1, #12
 8002330:	0fd8      	lsrs	r0, r3, #31
 8002332:	42be      	cmp	r6, r7
 8002334:	d01f      	beq.n	8002376 <__gedf2+0x76>
 8002336:	45ba      	cmp	sl, r7
 8002338:	d00f      	beq.n	800235a <__gedf2+0x5a>
 800233a:	2e00      	cmp	r6, #0
 800233c:	d12f      	bne.n	800239e <__gedf2+0x9e>
 800233e:	4655      	mov	r5, sl
 8002340:	9e01      	ldr	r6, [sp, #4]
 8002342:	4334      	orrs	r4, r6
 8002344:	2d00      	cmp	r5, #0
 8002346:	d127      	bne.n	8002398 <__gedf2+0x98>
 8002348:	430a      	orrs	r2, r1
 800234a:	d03a      	beq.n	80023c2 <__gedf2+0xc2>
 800234c:	2c00      	cmp	r4, #0
 800234e:	d145      	bne.n	80023dc <__gedf2+0xdc>
 8002350:	2800      	cmp	r0, #0
 8002352:	d11a      	bne.n	800238a <__gedf2+0x8a>
 8002354:	2001      	movs	r0, #1
 8002356:	4240      	negs	r0, r0
 8002358:	e017      	b.n	800238a <__gedf2+0x8a>
 800235a:	4311      	orrs	r1, r2
 800235c:	d13b      	bne.n	80023d6 <__gedf2+0xd6>
 800235e:	2e00      	cmp	r6, #0
 8002360:	d102      	bne.n	8002368 <__gedf2+0x68>
 8002362:	9f01      	ldr	r7, [sp, #4]
 8002364:	4327      	orrs	r7, r4
 8002366:	d0f3      	beq.n	8002350 <__gedf2+0x50>
 8002368:	4584      	cmp	ip, r0
 800236a:	d109      	bne.n	8002380 <__gedf2+0x80>
 800236c:	4663      	mov	r3, ip
 800236e:	2b00      	cmp	r3, #0
 8002370:	d0f0      	beq.n	8002354 <__gedf2+0x54>
 8002372:	4660      	mov	r0, ip
 8002374:	e009      	b.n	800238a <__gedf2+0x8a>
 8002376:	9f01      	ldr	r7, [sp, #4]
 8002378:	4327      	orrs	r7, r4
 800237a:	d12c      	bne.n	80023d6 <__gedf2+0xd6>
 800237c:	45b2      	cmp	sl, r6
 800237e:	d024      	beq.n	80023ca <__gedf2+0xca>
 8002380:	4663      	mov	r3, ip
 8002382:	2002      	movs	r0, #2
 8002384:	3b01      	subs	r3, #1
 8002386:	4018      	ands	r0, r3
 8002388:	3801      	subs	r0, #1
 800238a:	b003      	add	sp, #12
 800238c:	bcf0      	pop	{r4, r5, r6, r7}
 800238e:	46bb      	mov	fp, r7
 8002390:	46b2      	mov	sl, r6
 8002392:	46a9      	mov	r9, r5
 8002394:	46a0      	mov	r8, r4
 8002396:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002398:	2c00      	cmp	r4, #0
 800239a:	d0d9      	beq.n	8002350 <__gedf2+0x50>
 800239c:	e7e4      	b.n	8002368 <__gedf2+0x68>
 800239e:	4654      	mov	r4, sl
 80023a0:	2c00      	cmp	r4, #0
 80023a2:	d0ed      	beq.n	8002380 <__gedf2+0x80>
 80023a4:	4584      	cmp	ip, r0
 80023a6:	d1eb      	bne.n	8002380 <__gedf2+0x80>
 80023a8:	4556      	cmp	r6, sl
 80023aa:	dce9      	bgt.n	8002380 <__gedf2+0x80>
 80023ac:	dbde      	blt.n	800236c <__gedf2+0x6c>
 80023ae:	9b01      	ldr	r3, [sp, #4]
 80023b0:	428b      	cmp	r3, r1
 80023b2:	d8e5      	bhi.n	8002380 <__gedf2+0x80>
 80023b4:	d1da      	bne.n	800236c <__gedf2+0x6c>
 80023b6:	45c8      	cmp	r8, r9
 80023b8:	d8e2      	bhi.n	8002380 <__gedf2+0x80>
 80023ba:	2000      	movs	r0, #0
 80023bc:	45c8      	cmp	r8, r9
 80023be:	d2e4      	bcs.n	800238a <__gedf2+0x8a>
 80023c0:	e7d4      	b.n	800236c <__gedf2+0x6c>
 80023c2:	2000      	movs	r0, #0
 80023c4:	2c00      	cmp	r4, #0
 80023c6:	d0e0      	beq.n	800238a <__gedf2+0x8a>
 80023c8:	e7da      	b.n	8002380 <__gedf2+0x80>
 80023ca:	4311      	orrs	r1, r2
 80023cc:	d103      	bne.n	80023d6 <__gedf2+0xd6>
 80023ce:	4584      	cmp	ip, r0
 80023d0:	d1d6      	bne.n	8002380 <__gedf2+0x80>
 80023d2:	2000      	movs	r0, #0
 80023d4:	e7d9      	b.n	800238a <__gedf2+0x8a>
 80023d6:	2002      	movs	r0, #2
 80023d8:	4240      	negs	r0, r0
 80023da:	e7d6      	b.n	800238a <__gedf2+0x8a>
 80023dc:	4584      	cmp	ip, r0
 80023de:	d0e6      	beq.n	80023ae <__gedf2+0xae>
 80023e0:	e7ce      	b.n	8002380 <__gedf2+0x80>
 80023e2:	46c0      	nop			@ (mov r8, r8)
 80023e4:	000007ff 	.word	0x000007ff

080023e8 <__ledf2>:
 80023e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023ea:	4657      	mov	r7, sl
 80023ec:	464e      	mov	r6, r9
 80023ee:	4645      	mov	r5, r8
 80023f0:	46de      	mov	lr, fp
 80023f2:	b5e0      	push	{r5, r6, r7, lr}
 80023f4:	000d      	movs	r5, r1
 80023f6:	030f      	lsls	r7, r1, #12
 80023f8:	0004      	movs	r4, r0
 80023fa:	4680      	mov	r8, r0
 80023fc:	0fe8      	lsrs	r0, r5, #31
 80023fe:	0b39      	lsrs	r1, r7, #12
 8002400:	4684      	mov	ip, r0
 8002402:	b083      	sub	sp, #12
 8002404:	0058      	lsls	r0, r3, #1
 8002406:	4f30      	ldr	r7, [pc, #192]	@ (80024c8 <__ledf2+0xe0>)
 8002408:	0d40      	lsrs	r0, r0, #21
 800240a:	9101      	str	r1, [sp, #4]
 800240c:	031e      	lsls	r6, r3, #12
 800240e:	0069      	lsls	r1, r5, #1
 8002410:	4682      	mov	sl, r0
 8002412:	4691      	mov	r9, r2
 8002414:	0d49      	lsrs	r1, r1, #21
 8002416:	0b36      	lsrs	r6, r6, #12
 8002418:	0fd8      	lsrs	r0, r3, #31
 800241a:	42b9      	cmp	r1, r7
 800241c:	d020      	beq.n	8002460 <__ledf2+0x78>
 800241e:	45ba      	cmp	sl, r7
 8002420:	d00f      	beq.n	8002442 <__ledf2+0x5a>
 8002422:	2900      	cmp	r1, #0
 8002424:	d12b      	bne.n	800247e <__ledf2+0x96>
 8002426:	9901      	ldr	r1, [sp, #4]
 8002428:	430c      	orrs	r4, r1
 800242a:	4651      	mov	r1, sl
 800242c:	2900      	cmp	r1, #0
 800242e:	d137      	bne.n	80024a0 <__ledf2+0xb8>
 8002430:	4332      	orrs	r2, r6
 8002432:	d038      	beq.n	80024a6 <__ledf2+0xbe>
 8002434:	2c00      	cmp	r4, #0
 8002436:	d144      	bne.n	80024c2 <__ledf2+0xda>
 8002438:	2800      	cmp	r0, #0
 800243a:	d119      	bne.n	8002470 <__ledf2+0x88>
 800243c:	2001      	movs	r0, #1
 800243e:	4240      	negs	r0, r0
 8002440:	e016      	b.n	8002470 <__ledf2+0x88>
 8002442:	4316      	orrs	r6, r2
 8002444:	d113      	bne.n	800246e <__ledf2+0x86>
 8002446:	2900      	cmp	r1, #0
 8002448:	d102      	bne.n	8002450 <__ledf2+0x68>
 800244a:	9f01      	ldr	r7, [sp, #4]
 800244c:	4327      	orrs	r7, r4
 800244e:	d0f3      	beq.n	8002438 <__ledf2+0x50>
 8002450:	4584      	cmp	ip, r0
 8002452:	d020      	beq.n	8002496 <__ledf2+0xae>
 8002454:	4663      	mov	r3, ip
 8002456:	2002      	movs	r0, #2
 8002458:	3b01      	subs	r3, #1
 800245a:	4018      	ands	r0, r3
 800245c:	3801      	subs	r0, #1
 800245e:	e007      	b.n	8002470 <__ledf2+0x88>
 8002460:	9f01      	ldr	r7, [sp, #4]
 8002462:	4327      	orrs	r7, r4
 8002464:	d103      	bne.n	800246e <__ledf2+0x86>
 8002466:	458a      	cmp	sl, r1
 8002468:	d1f4      	bne.n	8002454 <__ledf2+0x6c>
 800246a:	4316      	orrs	r6, r2
 800246c:	d01f      	beq.n	80024ae <__ledf2+0xc6>
 800246e:	2002      	movs	r0, #2
 8002470:	b003      	add	sp, #12
 8002472:	bcf0      	pop	{r4, r5, r6, r7}
 8002474:	46bb      	mov	fp, r7
 8002476:	46b2      	mov	sl, r6
 8002478:	46a9      	mov	r9, r5
 800247a:	46a0      	mov	r8, r4
 800247c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800247e:	4654      	mov	r4, sl
 8002480:	2c00      	cmp	r4, #0
 8002482:	d0e7      	beq.n	8002454 <__ledf2+0x6c>
 8002484:	4584      	cmp	ip, r0
 8002486:	d1e5      	bne.n	8002454 <__ledf2+0x6c>
 8002488:	4551      	cmp	r1, sl
 800248a:	dce3      	bgt.n	8002454 <__ledf2+0x6c>
 800248c:	db03      	blt.n	8002496 <__ledf2+0xae>
 800248e:	9b01      	ldr	r3, [sp, #4]
 8002490:	42b3      	cmp	r3, r6
 8002492:	d8df      	bhi.n	8002454 <__ledf2+0x6c>
 8002494:	d00f      	beq.n	80024b6 <__ledf2+0xce>
 8002496:	4663      	mov	r3, ip
 8002498:	2b00      	cmp	r3, #0
 800249a:	d0cf      	beq.n	800243c <__ledf2+0x54>
 800249c:	4660      	mov	r0, ip
 800249e:	e7e7      	b.n	8002470 <__ledf2+0x88>
 80024a0:	2c00      	cmp	r4, #0
 80024a2:	d0c9      	beq.n	8002438 <__ledf2+0x50>
 80024a4:	e7d4      	b.n	8002450 <__ledf2+0x68>
 80024a6:	2000      	movs	r0, #0
 80024a8:	2c00      	cmp	r4, #0
 80024aa:	d0e1      	beq.n	8002470 <__ledf2+0x88>
 80024ac:	e7d2      	b.n	8002454 <__ledf2+0x6c>
 80024ae:	4584      	cmp	ip, r0
 80024b0:	d1d0      	bne.n	8002454 <__ledf2+0x6c>
 80024b2:	2000      	movs	r0, #0
 80024b4:	e7dc      	b.n	8002470 <__ledf2+0x88>
 80024b6:	45c8      	cmp	r8, r9
 80024b8:	d8cc      	bhi.n	8002454 <__ledf2+0x6c>
 80024ba:	2000      	movs	r0, #0
 80024bc:	45c8      	cmp	r8, r9
 80024be:	d2d7      	bcs.n	8002470 <__ledf2+0x88>
 80024c0:	e7e9      	b.n	8002496 <__ledf2+0xae>
 80024c2:	4584      	cmp	ip, r0
 80024c4:	d0e3      	beq.n	800248e <__ledf2+0xa6>
 80024c6:	e7c5      	b.n	8002454 <__ledf2+0x6c>
 80024c8:	000007ff 	.word	0x000007ff

080024cc <__aeabi_dmul>:
 80024cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024ce:	4657      	mov	r7, sl
 80024d0:	46de      	mov	lr, fp
 80024d2:	464e      	mov	r6, r9
 80024d4:	4645      	mov	r5, r8
 80024d6:	b5e0      	push	{r5, r6, r7, lr}
 80024d8:	001f      	movs	r7, r3
 80024da:	030b      	lsls	r3, r1, #12
 80024dc:	0b1b      	lsrs	r3, r3, #12
 80024de:	0016      	movs	r6, r2
 80024e0:	469a      	mov	sl, r3
 80024e2:	0fca      	lsrs	r2, r1, #31
 80024e4:	004b      	lsls	r3, r1, #1
 80024e6:	0004      	movs	r4, r0
 80024e8:	4693      	mov	fp, r2
 80024ea:	b087      	sub	sp, #28
 80024ec:	0d5b      	lsrs	r3, r3, #21
 80024ee:	d100      	bne.n	80024f2 <__aeabi_dmul+0x26>
 80024f0:	e0d5      	b.n	800269e <__aeabi_dmul+0x1d2>
 80024f2:	4abb      	ldr	r2, [pc, #748]	@ (80027e0 <__aeabi_dmul+0x314>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d100      	bne.n	80024fa <__aeabi_dmul+0x2e>
 80024f8:	e0f8      	b.n	80026ec <__aeabi_dmul+0x220>
 80024fa:	4651      	mov	r1, sl
 80024fc:	0f42      	lsrs	r2, r0, #29
 80024fe:	00c9      	lsls	r1, r1, #3
 8002500:	430a      	orrs	r2, r1
 8002502:	2180      	movs	r1, #128	@ 0x80
 8002504:	0409      	lsls	r1, r1, #16
 8002506:	4311      	orrs	r1, r2
 8002508:	00c2      	lsls	r2, r0, #3
 800250a:	4691      	mov	r9, r2
 800250c:	4ab5      	ldr	r2, [pc, #724]	@ (80027e4 <__aeabi_dmul+0x318>)
 800250e:	468a      	mov	sl, r1
 8002510:	189d      	adds	r5, r3, r2
 8002512:	2300      	movs	r3, #0
 8002514:	4698      	mov	r8, r3
 8002516:	9302      	str	r3, [sp, #8]
 8002518:	033c      	lsls	r4, r7, #12
 800251a:	007b      	lsls	r3, r7, #1
 800251c:	0ffa      	lsrs	r2, r7, #31
 800251e:	0030      	movs	r0, r6
 8002520:	0b24      	lsrs	r4, r4, #12
 8002522:	0d5b      	lsrs	r3, r3, #21
 8002524:	9200      	str	r2, [sp, #0]
 8002526:	d100      	bne.n	800252a <__aeabi_dmul+0x5e>
 8002528:	e096      	b.n	8002658 <__aeabi_dmul+0x18c>
 800252a:	4aad      	ldr	r2, [pc, #692]	@ (80027e0 <__aeabi_dmul+0x314>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d031      	beq.n	8002594 <__aeabi_dmul+0xc8>
 8002530:	0f72      	lsrs	r2, r6, #29
 8002532:	00e4      	lsls	r4, r4, #3
 8002534:	4322      	orrs	r2, r4
 8002536:	2480      	movs	r4, #128	@ 0x80
 8002538:	0424      	lsls	r4, r4, #16
 800253a:	4314      	orrs	r4, r2
 800253c:	4aa9      	ldr	r2, [pc, #676]	@ (80027e4 <__aeabi_dmul+0x318>)
 800253e:	00f0      	lsls	r0, r6, #3
 8002540:	4694      	mov	ip, r2
 8002542:	4463      	add	r3, ip
 8002544:	195b      	adds	r3, r3, r5
 8002546:	1c5a      	adds	r2, r3, #1
 8002548:	9201      	str	r2, [sp, #4]
 800254a:	4642      	mov	r2, r8
 800254c:	2600      	movs	r6, #0
 800254e:	2a0a      	cmp	r2, #10
 8002550:	dc42      	bgt.n	80025d8 <__aeabi_dmul+0x10c>
 8002552:	465a      	mov	r2, fp
 8002554:	9900      	ldr	r1, [sp, #0]
 8002556:	404a      	eors	r2, r1
 8002558:	4693      	mov	fp, r2
 800255a:	4642      	mov	r2, r8
 800255c:	2a02      	cmp	r2, #2
 800255e:	dc32      	bgt.n	80025c6 <__aeabi_dmul+0xfa>
 8002560:	3a01      	subs	r2, #1
 8002562:	2a01      	cmp	r2, #1
 8002564:	d900      	bls.n	8002568 <__aeabi_dmul+0x9c>
 8002566:	e149      	b.n	80027fc <__aeabi_dmul+0x330>
 8002568:	2e02      	cmp	r6, #2
 800256a:	d100      	bne.n	800256e <__aeabi_dmul+0xa2>
 800256c:	e0ca      	b.n	8002704 <__aeabi_dmul+0x238>
 800256e:	2e01      	cmp	r6, #1
 8002570:	d13d      	bne.n	80025ee <__aeabi_dmul+0x122>
 8002572:	2300      	movs	r3, #0
 8002574:	2400      	movs	r4, #0
 8002576:	2200      	movs	r2, #0
 8002578:	0010      	movs	r0, r2
 800257a:	465a      	mov	r2, fp
 800257c:	051b      	lsls	r3, r3, #20
 800257e:	4323      	orrs	r3, r4
 8002580:	07d2      	lsls	r2, r2, #31
 8002582:	4313      	orrs	r3, r2
 8002584:	0019      	movs	r1, r3
 8002586:	b007      	add	sp, #28
 8002588:	bcf0      	pop	{r4, r5, r6, r7}
 800258a:	46bb      	mov	fp, r7
 800258c:	46b2      	mov	sl, r6
 800258e:	46a9      	mov	r9, r5
 8002590:	46a0      	mov	r8, r4
 8002592:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002594:	4b92      	ldr	r3, [pc, #584]	@ (80027e0 <__aeabi_dmul+0x314>)
 8002596:	4326      	orrs	r6, r4
 8002598:	18eb      	adds	r3, r5, r3
 800259a:	2e00      	cmp	r6, #0
 800259c:	d100      	bne.n	80025a0 <__aeabi_dmul+0xd4>
 800259e:	e0bb      	b.n	8002718 <__aeabi_dmul+0x24c>
 80025a0:	2203      	movs	r2, #3
 80025a2:	4641      	mov	r1, r8
 80025a4:	4311      	orrs	r1, r2
 80025a6:	465a      	mov	r2, fp
 80025a8:	4688      	mov	r8, r1
 80025aa:	9900      	ldr	r1, [sp, #0]
 80025ac:	404a      	eors	r2, r1
 80025ae:	2180      	movs	r1, #128	@ 0x80
 80025b0:	0109      	lsls	r1, r1, #4
 80025b2:	468c      	mov	ip, r1
 80025b4:	0029      	movs	r1, r5
 80025b6:	4461      	add	r1, ip
 80025b8:	9101      	str	r1, [sp, #4]
 80025ba:	4641      	mov	r1, r8
 80025bc:	290a      	cmp	r1, #10
 80025be:	dd00      	ble.n	80025c2 <__aeabi_dmul+0xf6>
 80025c0:	e233      	b.n	8002a2a <__aeabi_dmul+0x55e>
 80025c2:	4693      	mov	fp, r2
 80025c4:	2603      	movs	r6, #3
 80025c6:	4642      	mov	r2, r8
 80025c8:	2701      	movs	r7, #1
 80025ca:	4097      	lsls	r7, r2
 80025cc:	21a6      	movs	r1, #166	@ 0xa6
 80025ce:	003a      	movs	r2, r7
 80025d0:	00c9      	lsls	r1, r1, #3
 80025d2:	400a      	ands	r2, r1
 80025d4:	420f      	tst	r7, r1
 80025d6:	d031      	beq.n	800263c <__aeabi_dmul+0x170>
 80025d8:	9e02      	ldr	r6, [sp, #8]
 80025da:	2e02      	cmp	r6, #2
 80025dc:	d100      	bne.n	80025e0 <__aeabi_dmul+0x114>
 80025de:	e235      	b.n	8002a4c <__aeabi_dmul+0x580>
 80025e0:	2e03      	cmp	r6, #3
 80025e2:	d100      	bne.n	80025e6 <__aeabi_dmul+0x11a>
 80025e4:	e1d2      	b.n	800298c <__aeabi_dmul+0x4c0>
 80025e6:	4654      	mov	r4, sl
 80025e8:	4648      	mov	r0, r9
 80025ea:	2e01      	cmp	r6, #1
 80025ec:	d0c1      	beq.n	8002572 <__aeabi_dmul+0xa6>
 80025ee:	9a01      	ldr	r2, [sp, #4]
 80025f0:	4b7d      	ldr	r3, [pc, #500]	@ (80027e8 <__aeabi_dmul+0x31c>)
 80025f2:	4694      	mov	ip, r2
 80025f4:	4463      	add	r3, ip
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	dc00      	bgt.n	80025fc <__aeabi_dmul+0x130>
 80025fa:	e0c0      	b.n	800277e <__aeabi_dmul+0x2b2>
 80025fc:	0742      	lsls	r2, r0, #29
 80025fe:	d009      	beq.n	8002614 <__aeabi_dmul+0x148>
 8002600:	220f      	movs	r2, #15
 8002602:	4002      	ands	r2, r0
 8002604:	2a04      	cmp	r2, #4
 8002606:	d005      	beq.n	8002614 <__aeabi_dmul+0x148>
 8002608:	1d02      	adds	r2, r0, #4
 800260a:	4282      	cmp	r2, r0
 800260c:	4180      	sbcs	r0, r0
 800260e:	4240      	negs	r0, r0
 8002610:	1824      	adds	r4, r4, r0
 8002612:	0010      	movs	r0, r2
 8002614:	01e2      	lsls	r2, r4, #7
 8002616:	d506      	bpl.n	8002626 <__aeabi_dmul+0x15a>
 8002618:	4b74      	ldr	r3, [pc, #464]	@ (80027ec <__aeabi_dmul+0x320>)
 800261a:	9a01      	ldr	r2, [sp, #4]
 800261c:	401c      	ands	r4, r3
 800261e:	2380      	movs	r3, #128	@ 0x80
 8002620:	4694      	mov	ip, r2
 8002622:	00db      	lsls	r3, r3, #3
 8002624:	4463      	add	r3, ip
 8002626:	4a72      	ldr	r2, [pc, #456]	@ (80027f0 <__aeabi_dmul+0x324>)
 8002628:	4293      	cmp	r3, r2
 800262a:	dc6b      	bgt.n	8002704 <__aeabi_dmul+0x238>
 800262c:	0762      	lsls	r2, r4, #29
 800262e:	08c0      	lsrs	r0, r0, #3
 8002630:	0264      	lsls	r4, r4, #9
 8002632:	055b      	lsls	r3, r3, #21
 8002634:	4302      	orrs	r2, r0
 8002636:	0b24      	lsrs	r4, r4, #12
 8002638:	0d5b      	lsrs	r3, r3, #21
 800263a:	e79d      	b.n	8002578 <__aeabi_dmul+0xac>
 800263c:	2190      	movs	r1, #144	@ 0x90
 800263e:	0089      	lsls	r1, r1, #2
 8002640:	420f      	tst	r7, r1
 8002642:	d163      	bne.n	800270c <__aeabi_dmul+0x240>
 8002644:	2288      	movs	r2, #136	@ 0x88
 8002646:	423a      	tst	r2, r7
 8002648:	d100      	bne.n	800264c <__aeabi_dmul+0x180>
 800264a:	e0d7      	b.n	80027fc <__aeabi_dmul+0x330>
 800264c:	9b00      	ldr	r3, [sp, #0]
 800264e:	46a2      	mov	sl, r4
 8002650:	469b      	mov	fp, r3
 8002652:	4681      	mov	r9, r0
 8002654:	9602      	str	r6, [sp, #8]
 8002656:	e7bf      	b.n	80025d8 <__aeabi_dmul+0x10c>
 8002658:	0023      	movs	r3, r4
 800265a:	4333      	orrs	r3, r6
 800265c:	d100      	bne.n	8002660 <__aeabi_dmul+0x194>
 800265e:	e07f      	b.n	8002760 <__aeabi_dmul+0x294>
 8002660:	2c00      	cmp	r4, #0
 8002662:	d100      	bne.n	8002666 <__aeabi_dmul+0x19a>
 8002664:	e1ad      	b.n	80029c2 <__aeabi_dmul+0x4f6>
 8002666:	0020      	movs	r0, r4
 8002668:	f000 fec8 	bl	80033fc <__clzsi2>
 800266c:	0002      	movs	r2, r0
 800266e:	0003      	movs	r3, r0
 8002670:	3a0b      	subs	r2, #11
 8002672:	201d      	movs	r0, #29
 8002674:	0019      	movs	r1, r3
 8002676:	1a82      	subs	r2, r0, r2
 8002678:	0030      	movs	r0, r6
 800267a:	3908      	subs	r1, #8
 800267c:	40d0      	lsrs	r0, r2
 800267e:	408c      	lsls	r4, r1
 8002680:	4304      	orrs	r4, r0
 8002682:	0030      	movs	r0, r6
 8002684:	4088      	lsls	r0, r1
 8002686:	4a5b      	ldr	r2, [pc, #364]	@ (80027f4 <__aeabi_dmul+0x328>)
 8002688:	1aeb      	subs	r3, r5, r3
 800268a:	4694      	mov	ip, r2
 800268c:	4463      	add	r3, ip
 800268e:	1c5a      	adds	r2, r3, #1
 8002690:	9201      	str	r2, [sp, #4]
 8002692:	4642      	mov	r2, r8
 8002694:	2600      	movs	r6, #0
 8002696:	2a0a      	cmp	r2, #10
 8002698:	dc00      	bgt.n	800269c <__aeabi_dmul+0x1d0>
 800269a:	e75a      	b.n	8002552 <__aeabi_dmul+0x86>
 800269c:	e79c      	b.n	80025d8 <__aeabi_dmul+0x10c>
 800269e:	4653      	mov	r3, sl
 80026a0:	4303      	orrs	r3, r0
 80026a2:	4699      	mov	r9, r3
 80026a4:	d054      	beq.n	8002750 <__aeabi_dmul+0x284>
 80026a6:	4653      	mov	r3, sl
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d100      	bne.n	80026ae <__aeabi_dmul+0x1e2>
 80026ac:	e177      	b.n	800299e <__aeabi_dmul+0x4d2>
 80026ae:	4650      	mov	r0, sl
 80026b0:	f000 fea4 	bl	80033fc <__clzsi2>
 80026b4:	230b      	movs	r3, #11
 80026b6:	425b      	negs	r3, r3
 80026b8:	469c      	mov	ip, r3
 80026ba:	0002      	movs	r2, r0
 80026bc:	4484      	add	ip, r0
 80026be:	0011      	movs	r1, r2
 80026c0:	4650      	mov	r0, sl
 80026c2:	3908      	subs	r1, #8
 80026c4:	4088      	lsls	r0, r1
 80026c6:	231d      	movs	r3, #29
 80026c8:	4680      	mov	r8, r0
 80026ca:	4660      	mov	r0, ip
 80026cc:	1a1b      	subs	r3, r3, r0
 80026ce:	0020      	movs	r0, r4
 80026d0:	40d8      	lsrs	r0, r3
 80026d2:	0003      	movs	r3, r0
 80026d4:	4640      	mov	r0, r8
 80026d6:	4303      	orrs	r3, r0
 80026d8:	469a      	mov	sl, r3
 80026da:	0023      	movs	r3, r4
 80026dc:	408b      	lsls	r3, r1
 80026de:	4699      	mov	r9, r3
 80026e0:	2300      	movs	r3, #0
 80026e2:	4d44      	ldr	r5, [pc, #272]	@ (80027f4 <__aeabi_dmul+0x328>)
 80026e4:	4698      	mov	r8, r3
 80026e6:	1aad      	subs	r5, r5, r2
 80026e8:	9302      	str	r3, [sp, #8]
 80026ea:	e715      	b.n	8002518 <__aeabi_dmul+0x4c>
 80026ec:	4652      	mov	r2, sl
 80026ee:	4302      	orrs	r2, r0
 80026f0:	4691      	mov	r9, r2
 80026f2:	d126      	bne.n	8002742 <__aeabi_dmul+0x276>
 80026f4:	2200      	movs	r2, #0
 80026f6:	001d      	movs	r5, r3
 80026f8:	2302      	movs	r3, #2
 80026fa:	4692      	mov	sl, r2
 80026fc:	3208      	adds	r2, #8
 80026fe:	4690      	mov	r8, r2
 8002700:	9302      	str	r3, [sp, #8]
 8002702:	e709      	b.n	8002518 <__aeabi_dmul+0x4c>
 8002704:	2400      	movs	r4, #0
 8002706:	2200      	movs	r2, #0
 8002708:	4b35      	ldr	r3, [pc, #212]	@ (80027e0 <__aeabi_dmul+0x314>)
 800270a:	e735      	b.n	8002578 <__aeabi_dmul+0xac>
 800270c:	2300      	movs	r3, #0
 800270e:	2480      	movs	r4, #128	@ 0x80
 8002710:	469b      	mov	fp, r3
 8002712:	0324      	lsls	r4, r4, #12
 8002714:	4b32      	ldr	r3, [pc, #200]	@ (80027e0 <__aeabi_dmul+0x314>)
 8002716:	e72f      	b.n	8002578 <__aeabi_dmul+0xac>
 8002718:	2202      	movs	r2, #2
 800271a:	4641      	mov	r1, r8
 800271c:	4311      	orrs	r1, r2
 800271e:	2280      	movs	r2, #128	@ 0x80
 8002720:	0112      	lsls	r2, r2, #4
 8002722:	4694      	mov	ip, r2
 8002724:	002a      	movs	r2, r5
 8002726:	4462      	add	r2, ip
 8002728:	4688      	mov	r8, r1
 800272a:	9201      	str	r2, [sp, #4]
 800272c:	290a      	cmp	r1, #10
 800272e:	dd00      	ble.n	8002732 <__aeabi_dmul+0x266>
 8002730:	e752      	b.n	80025d8 <__aeabi_dmul+0x10c>
 8002732:	465a      	mov	r2, fp
 8002734:	2000      	movs	r0, #0
 8002736:	9900      	ldr	r1, [sp, #0]
 8002738:	0004      	movs	r4, r0
 800273a:	404a      	eors	r2, r1
 800273c:	4693      	mov	fp, r2
 800273e:	2602      	movs	r6, #2
 8002740:	e70b      	b.n	800255a <__aeabi_dmul+0x8e>
 8002742:	220c      	movs	r2, #12
 8002744:	001d      	movs	r5, r3
 8002746:	2303      	movs	r3, #3
 8002748:	4681      	mov	r9, r0
 800274a:	4690      	mov	r8, r2
 800274c:	9302      	str	r3, [sp, #8]
 800274e:	e6e3      	b.n	8002518 <__aeabi_dmul+0x4c>
 8002750:	2300      	movs	r3, #0
 8002752:	469a      	mov	sl, r3
 8002754:	3304      	adds	r3, #4
 8002756:	4698      	mov	r8, r3
 8002758:	3b03      	subs	r3, #3
 800275a:	2500      	movs	r5, #0
 800275c:	9302      	str	r3, [sp, #8]
 800275e:	e6db      	b.n	8002518 <__aeabi_dmul+0x4c>
 8002760:	4642      	mov	r2, r8
 8002762:	3301      	adds	r3, #1
 8002764:	431a      	orrs	r2, r3
 8002766:	002b      	movs	r3, r5
 8002768:	4690      	mov	r8, r2
 800276a:	1c5a      	adds	r2, r3, #1
 800276c:	9201      	str	r2, [sp, #4]
 800276e:	4642      	mov	r2, r8
 8002770:	2400      	movs	r4, #0
 8002772:	2000      	movs	r0, #0
 8002774:	2601      	movs	r6, #1
 8002776:	2a0a      	cmp	r2, #10
 8002778:	dc00      	bgt.n	800277c <__aeabi_dmul+0x2b0>
 800277a:	e6ea      	b.n	8002552 <__aeabi_dmul+0x86>
 800277c:	e72c      	b.n	80025d8 <__aeabi_dmul+0x10c>
 800277e:	2201      	movs	r2, #1
 8002780:	1ad2      	subs	r2, r2, r3
 8002782:	2a38      	cmp	r2, #56	@ 0x38
 8002784:	dd00      	ble.n	8002788 <__aeabi_dmul+0x2bc>
 8002786:	e6f4      	b.n	8002572 <__aeabi_dmul+0xa6>
 8002788:	2a1f      	cmp	r2, #31
 800278a:	dc00      	bgt.n	800278e <__aeabi_dmul+0x2c2>
 800278c:	e12a      	b.n	80029e4 <__aeabi_dmul+0x518>
 800278e:	211f      	movs	r1, #31
 8002790:	4249      	negs	r1, r1
 8002792:	1acb      	subs	r3, r1, r3
 8002794:	0021      	movs	r1, r4
 8002796:	40d9      	lsrs	r1, r3
 8002798:	000b      	movs	r3, r1
 800279a:	2a20      	cmp	r2, #32
 800279c:	d005      	beq.n	80027aa <__aeabi_dmul+0x2de>
 800279e:	4a16      	ldr	r2, [pc, #88]	@ (80027f8 <__aeabi_dmul+0x32c>)
 80027a0:	9d01      	ldr	r5, [sp, #4]
 80027a2:	4694      	mov	ip, r2
 80027a4:	4465      	add	r5, ip
 80027a6:	40ac      	lsls	r4, r5
 80027a8:	4320      	orrs	r0, r4
 80027aa:	1e42      	subs	r2, r0, #1
 80027ac:	4190      	sbcs	r0, r2
 80027ae:	4318      	orrs	r0, r3
 80027b0:	2307      	movs	r3, #7
 80027b2:	0019      	movs	r1, r3
 80027b4:	2400      	movs	r4, #0
 80027b6:	4001      	ands	r1, r0
 80027b8:	4203      	tst	r3, r0
 80027ba:	d00c      	beq.n	80027d6 <__aeabi_dmul+0x30a>
 80027bc:	230f      	movs	r3, #15
 80027be:	4003      	ands	r3, r0
 80027c0:	2b04      	cmp	r3, #4
 80027c2:	d100      	bne.n	80027c6 <__aeabi_dmul+0x2fa>
 80027c4:	e140      	b.n	8002a48 <__aeabi_dmul+0x57c>
 80027c6:	1d03      	adds	r3, r0, #4
 80027c8:	4283      	cmp	r3, r0
 80027ca:	41a4      	sbcs	r4, r4
 80027cc:	0018      	movs	r0, r3
 80027ce:	4264      	negs	r4, r4
 80027d0:	0761      	lsls	r1, r4, #29
 80027d2:	0264      	lsls	r4, r4, #9
 80027d4:	0b24      	lsrs	r4, r4, #12
 80027d6:	08c2      	lsrs	r2, r0, #3
 80027d8:	2300      	movs	r3, #0
 80027da:	430a      	orrs	r2, r1
 80027dc:	e6cc      	b.n	8002578 <__aeabi_dmul+0xac>
 80027de:	46c0      	nop			@ (mov r8, r8)
 80027e0:	000007ff 	.word	0x000007ff
 80027e4:	fffffc01 	.word	0xfffffc01
 80027e8:	000003ff 	.word	0x000003ff
 80027ec:	feffffff 	.word	0xfeffffff
 80027f0:	000007fe 	.word	0x000007fe
 80027f4:	fffffc0d 	.word	0xfffffc0d
 80027f8:	0000043e 	.word	0x0000043e
 80027fc:	4649      	mov	r1, r9
 80027fe:	464a      	mov	r2, r9
 8002800:	0409      	lsls	r1, r1, #16
 8002802:	0c09      	lsrs	r1, r1, #16
 8002804:	000d      	movs	r5, r1
 8002806:	0c16      	lsrs	r6, r2, #16
 8002808:	0c02      	lsrs	r2, r0, #16
 800280a:	0400      	lsls	r0, r0, #16
 800280c:	0c00      	lsrs	r0, r0, #16
 800280e:	4345      	muls	r5, r0
 8002810:	46ac      	mov	ip, r5
 8002812:	0005      	movs	r5, r0
 8002814:	4375      	muls	r5, r6
 8002816:	46a8      	mov	r8, r5
 8002818:	0015      	movs	r5, r2
 800281a:	000f      	movs	r7, r1
 800281c:	4375      	muls	r5, r6
 800281e:	9200      	str	r2, [sp, #0]
 8002820:	9502      	str	r5, [sp, #8]
 8002822:	002a      	movs	r2, r5
 8002824:	9d00      	ldr	r5, [sp, #0]
 8002826:	436f      	muls	r7, r5
 8002828:	4665      	mov	r5, ip
 800282a:	0c2d      	lsrs	r5, r5, #16
 800282c:	46a9      	mov	r9, r5
 800282e:	4447      	add	r7, r8
 8002830:	444f      	add	r7, r9
 8002832:	45b8      	cmp	r8, r7
 8002834:	d905      	bls.n	8002842 <__aeabi_dmul+0x376>
 8002836:	0015      	movs	r5, r2
 8002838:	2280      	movs	r2, #128	@ 0x80
 800283a:	0252      	lsls	r2, r2, #9
 800283c:	4690      	mov	r8, r2
 800283e:	4445      	add	r5, r8
 8002840:	9502      	str	r5, [sp, #8]
 8002842:	0c3d      	lsrs	r5, r7, #16
 8002844:	9503      	str	r5, [sp, #12]
 8002846:	4665      	mov	r5, ip
 8002848:	042d      	lsls	r5, r5, #16
 800284a:	043f      	lsls	r7, r7, #16
 800284c:	0c2d      	lsrs	r5, r5, #16
 800284e:	46ac      	mov	ip, r5
 8002850:	003d      	movs	r5, r7
 8002852:	4465      	add	r5, ip
 8002854:	9504      	str	r5, [sp, #16]
 8002856:	0c25      	lsrs	r5, r4, #16
 8002858:	0424      	lsls	r4, r4, #16
 800285a:	0c24      	lsrs	r4, r4, #16
 800285c:	46ac      	mov	ip, r5
 800285e:	0025      	movs	r5, r4
 8002860:	4375      	muls	r5, r6
 8002862:	46a8      	mov	r8, r5
 8002864:	4665      	mov	r5, ip
 8002866:	000f      	movs	r7, r1
 8002868:	4369      	muls	r1, r5
 800286a:	4441      	add	r1, r8
 800286c:	4689      	mov	r9, r1
 800286e:	4367      	muls	r7, r4
 8002870:	0c39      	lsrs	r1, r7, #16
 8002872:	4449      	add	r1, r9
 8002874:	436e      	muls	r6, r5
 8002876:	4588      	cmp	r8, r1
 8002878:	d903      	bls.n	8002882 <__aeabi_dmul+0x3b6>
 800287a:	2280      	movs	r2, #128	@ 0x80
 800287c:	0252      	lsls	r2, r2, #9
 800287e:	4690      	mov	r8, r2
 8002880:	4446      	add	r6, r8
 8002882:	0c0d      	lsrs	r5, r1, #16
 8002884:	46a8      	mov	r8, r5
 8002886:	0035      	movs	r5, r6
 8002888:	4445      	add	r5, r8
 800288a:	9505      	str	r5, [sp, #20]
 800288c:	9d03      	ldr	r5, [sp, #12]
 800288e:	043f      	lsls	r7, r7, #16
 8002890:	46a8      	mov	r8, r5
 8002892:	0c3f      	lsrs	r7, r7, #16
 8002894:	0409      	lsls	r1, r1, #16
 8002896:	19c9      	adds	r1, r1, r7
 8002898:	4488      	add	r8, r1
 800289a:	4645      	mov	r5, r8
 800289c:	9503      	str	r5, [sp, #12]
 800289e:	4655      	mov	r5, sl
 80028a0:	042e      	lsls	r6, r5, #16
 80028a2:	0c36      	lsrs	r6, r6, #16
 80028a4:	0c2f      	lsrs	r7, r5, #16
 80028a6:	0035      	movs	r5, r6
 80028a8:	4345      	muls	r5, r0
 80028aa:	4378      	muls	r0, r7
 80028ac:	4681      	mov	r9, r0
 80028ae:	0038      	movs	r0, r7
 80028b0:	46a8      	mov	r8, r5
 80028b2:	0c2d      	lsrs	r5, r5, #16
 80028b4:	46aa      	mov	sl, r5
 80028b6:	9a00      	ldr	r2, [sp, #0]
 80028b8:	4350      	muls	r0, r2
 80028ba:	4372      	muls	r2, r6
 80028bc:	444a      	add	r2, r9
 80028be:	4452      	add	r2, sl
 80028c0:	4591      	cmp	r9, r2
 80028c2:	d903      	bls.n	80028cc <__aeabi_dmul+0x400>
 80028c4:	2580      	movs	r5, #128	@ 0x80
 80028c6:	026d      	lsls	r5, r5, #9
 80028c8:	46a9      	mov	r9, r5
 80028ca:	4448      	add	r0, r9
 80028cc:	0c15      	lsrs	r5, r2, #16
 80028ce:	46a9      	mov	r9, r5
 80028d0:	4645      	mov	r5, r8
 80028d2:	042d      	lsls	r5, r5, #16
 80028d4:	0c2d      	lsrs	r5, r5, #16
 80028d6:	46a8      	mov	r8, r5
 80028d8:	4665      	mov	r5, ip
 80028da:	437d      	muls	r5, r7
 80028dc:	0412      	lsls	r2, r2, #16
 80028de:	4448      	add	r0, r9
 80028e0:	4490      	add	r8, r2
 80028e2:	46a9      	mov	r9, r5
 80028e4:	0032      	movs	r2, r6
 80028e6:	4665      	mov	r5, ip
 80028e8:	4362      	muls	r2, r4
 80028ea:	436e      	muls	r6, r5
 80028ec:	437c      	muls	r4, r7
 80028ee:	0c17      	lsrs	r7, r2, #16
 80028f0:	1936      	adds	r6, r6, r4
 80028f2:	19bf      	adds	r7, r7, r6
 80028f4:	42bc      	cmp	r4, r7
 80028f6:	d903      	bls.n	8002900 <__aeabi_dmul+0x434>
 80028f8:	2480      	movs	r4, #128	@ 0x80
 80028fa:	0264      	lsls	r4, r4, #9
 80028fc:	46a4      	mov	ip, r4
 80028fe:	44e1      	add	r9, ip
 8002900:	9c02      	ldr	r4, [sp, #8]
 8002902:	9e03      	ldr	r6, [sp, #12]
 8002904:	46a4      	mov	ip, r4
 8002906:	9d05      	ldr	r5, [sp, #20]
 8002908:	4466      	add	r6, ip
 800290a:	428e      	cmp	r6, r1
 800290c:	4189      	sbcs	r1, r1
 800290e:	46ac      	mov	ip, r5
 8002910:	0412      	lsls	r2, r2, #16
 8002912:	043c      	lsls	r4, r7, #16
 8002914:	0c12      	lsrs	r2, r2, #16
 8002916:	18a2      	adds	r2, r4, r2
 8002918:	4462      	add	r2, ip
 800291a:	4249      	negs	r1, r1
 800291c:	1854      	adds	r4, r2, r1
 800291e:	4446      	add	r6, r8
 8002920:	46a4      	mov	ip, r4
 8002922:	4546      	cmp	r6, r8
 8002924:	41a4      	sbcs	r4, r4
 8002926:	4682      	mov	sl, r0
 8002928:	4264      	negs	r4, r4
 800292a:	46a0      	mov	r8, r4
 800292c:	42aa      	cmp	r2, r5
 800292e:	4192      	sbcs	r2, r2
 8002930:	458c      	cmp	ip, r1
 8002932:	4189      	sbcs	r1, r1
 8002934:	44e2      	add	sl, ip
 8002936:	44d0      	add	r8, sl
 8002938:	4249      	negs	r1, r1
 800293a:	4252      	negs	r2, r2
 800293c:	430a      	orrs	r2, r1
 800293e:	45a0      	cmp	r8, r4
 8002940:	41a4      	sbcs	r4, r4
 8002942:	4582      	cmp	sl, r0
 8002944:	4189      	sbcs	r1, r1
 8002946:	4264      	negs	r4, r4
 8002948:	4249      	negs	r1, r1
 800294a:	430c      	orrs	r4, r1
 800294c:	4641      	mov	r1, r8
 800294e:	0c3f      	lsrs	r7, r7, #16
 8002950:	19d2      	adds	r2, r2, r7
 8002952:	1912      	adds	r2, r2, r4
 8002954:	0dcc      	lsrs	r4, r1, #23
 8002956:	9904      	ldr	r1, [sp, #16]
 8002958:	0270      	lsls	r0, r6, #9
 800295a:	4308      	orrs	r0, r1
 800295c:	1e41      	subs	r1, r0, #1
 800295e:	4188      	sbcs	r0, r1
 8002960:	4641      	mov	r1, r8
 8002962:	444a      	add	r2, r9
 8002964:	0df6      	lsrs	r6, r6, #23
 8002966:	0252      	lsls	r2, r2, #9
 8002968:	4330      	orrs	r0, r6
 800296a:	0249      	lsls	r1, r1, #9
 800296c:	4314      	orrs	r4, r2
 800296e:	4308      	orrs	r0, r1
 8002970:	01d2      	lsls	r2, r2, #7
 8002972:	d535      	bpl.n	80029e0 <__aeabi_dmul+0x514>
 8002974:	2201      	movs	r2, #1
 8002976:	0843      	lsrs	r3, r0, #1
 8002978:	4002      	ands	r2, r0
 800297a:	4313      	orrs	r3, r2
 800297c:	07e0      	lsls	r0, r4, #31
 800297e:	4318      	orrs	r0, r3
 8002980:	0864      	lsrs	r4, r4, #1
 8002982:	e634      	b.n	80025ee <__aeabi_dmul+0x122>
 8002984:	9b00      	ldr	r3, [sp, #0]
 8002986:	46a2      	mov	sl, r4
 8002988:	469b      	mov	fp, r3
 800298a:	4681      	mov	r9, r0
 800298c:	2480      	movs	r4, #128	@ 0x80
 800298e:	4653      	mov	r3, sl
 8002990:	0324      	lsls	r4, r4, #12
 8002992:	431c      	orrs	r4, r3
 8002994:	0324      	lsls	r4, r4, #12
 8002996:	464a      	mov	r2, r9
 8002998:	4b2e      	ldr	r3, [pc, #184]	@ (8002a54 <__aeabi_dmul+0x588>)
 800299a:	0b24      	lsrs	r4, r4, #12
 800299c:	e5ec      	b.n	8002578 <__aeabi_dmul+0xac>
 800299e:	f000 fd2d 	bl	80033fc <__clzsi2>
 80029a2:	2315      	movs	r3, #21
 80029a4:	469c      	mov	ip, r3
 80029a6:	4484      	add	ip, r0
 80029a8:	0002      	movs	r2, r0
 80029aa:	4663      	mov	r3, ip
 80029ac:	3220      	adds	r2, #32
 80029ae:	2b1c      	cmp	r3, #28
 80029b0:	dc00      	bgt.n	80029b4 <__aeabi_dmul+0x4e8>
 80029b2:	e684      	b.n	80026be <__aeabi_dmul+0x1f2>
 80029b4:	2300      	movs	r3, #0
 80029b6:	4699      	mov	r9, r3
 80029b8:	0023      	movs	r3, r4
 80029ba:	3808      	subs	r0, #8
 80029bc:	4083      	lsls	r3, r0
 80029be:	469a      	mov	sl, r3
 80029c0:	e68e      	b.n	80026e0 <__aeabi_dmul+0x214>
 80029c2:	f000 fd1b 	bl	80033fc <__clzsi2>
 80029c6:	0002      	movs	r2, r0
 80029c8:	0003      	movs	r3, r0
 80029ca:	3215      	adds	r2, #21
 80029cc:	3320      	adds	r3, #32
 80029ce:	2a1c      	cmp	r2, #28
 80029d0:	dc00      	bgt.n	80029d4 <__aeabi_dmul+0x508>
 80029d2:	e64e      	b.n	8002672 <__aeabi_dmul+0x1a6>
 80029d4:	0002      	movs	r2, r0
 80029d6:	0034      	movs	r4, r6
 80029d8:	3a08      	subs	r2, #8
 80029da:	2000      	movs	r0, #0
 80029dc:	4094      	lsls	r4, r2
 80029de:	e652      	b.n	8002686 <__aeabi_dmul+0x1ba>
 80029e0:	9301      	str	r3, [sp, #4]
 80029e2:	e604      	b.n	80025ee <__aeabi_dmul+0x122>
 80029e4:	4b1c      	ldr	r3, [pc, #112]	@ (8002a58 <__aeabi_dmul+0x58c>)
 80029e6:	0021      	movs	r1, r4
 80029e8:	469c      	mov	ip, r3
 80029ea:	0003      	movs	r3, r0
 80029ec:	9d01      	ldr	r5, [sp, #4]
 80029ee:	40d3      	lsrs	r3, r2
 80029f0:	4465      	add	r5, ip
 80029f2:	40a9      	lsls	r1, r5
 80029f4:	4319      	orrs	r1, r3
 80029f6:	0003      	movs	r3, r0
 80029f8:	40ab      	lsls	r3, r5
 80029fa:	1e58      	subs	r0, r3, #1
 80029fc:	4183      	sbcs	r3, r0
 80029fe:	4319      	orrs	r1, r3
 8002a00:	0008      	movs	r0, r1
 8002a02:	40d4      	lsrs	r4, r2
 8002a04:	074b      	lsls	r3, r1, #29
 8002a06:	d009      	beq.n	8002a1c <__aeabi_dmul+0x550>
 8002a08:	230f      	movs	r3, #15
 8002a0a:	400b      	ands	r3, r1
 8002a0c:	2b04      	cmp	r3, #4
 8002a0e:	d005      	beq.n	8002a1c <__aeabi_dmul+0x550>
 8002a10:	1d0b      	adds	r3, r1, #4
 8002a12:	428b      	cmp	r3, r1
 8002a14:	4180      	sbcs	r0, r0
 8002a16:	4240      	negs	r0, r0
 8002a18:	1824      	adds	r4, r4, r0
 8002a1a:	0018      	movs	r0, r3
 8002a1c:	0223      	lsls	r3, r4, #8
 8002a1e:	d400      	bmi.n	8002a22 <__aeabi_dmul+0x556>
 8002a20:	e6d6      	b.n	80027d0 <__aeabi_dmul+0x304>
 8002a22:	2301      	movs	r3, #1
 8002a24:	2400      	movs	r4, #0
 8002a26:	2200      	movs	r2, #0
 8002a28:	e5a6      	b.n	8002578 <__aeabi_dmul+0xac>
 8002a2a:	290f      	cmp	r1, #15
 8002a2c:	d1aa      	bne.n	8002984 <__aeabi_dmul+0x4b8>
 8002a2e:	2380      	movs	r3, #128	@ 0x80
 8002a30:	4652      	mov	r2, sl
 8002a32:	031b      	lsls	r3, r3, #12
 8002a34:	421a      	tst	r2, r3
 8002a36:	d0a9      	beq.n	800298c <__aeabi_dmul+0x4c0>
 8002a38:	421c      	tst	r4, r3
 8002a3a:	d1a7      	bne.n	800298c <__aeabi_dmul+0x4c0>
 8002a3c:	431c      	orrs	r4, r3
 8002a3e:	9b00      	ldr	r3, [sp, #0]
 8002a40:	0002      	movs	r2, r0
 8002a42:	469b      	mov	fp, r3
 8002a44:	4b03      	ldr	r3, [pc, #12]	@ (8002a54 <__aeabi_dmul+0x588>)
 8002a46:	e597      	b.n	8002578 <__aeabi_dmul+0xac>
 8002a48:	2400      	movs	r4, #0
 8002a4a:	e6c1      	b.n	80027d0 <__aeabi_dmul+0x304>
 8002a4c:	2400      	movs	r4, #0
 8002a4e:	4b01      	ldr	r3, [pc, #4]	@ (8002a54 <__aeabi_dmul+0x588>)
 8002a50:	0022      	movs	r2, r4
 8002a52:	e591      	b.n	8002578 <__aeabi_dmul+0xac>
 8002a54:	000007ff 	.word	0x000007ff
 8002a58:	0000041e 	.word	0x0000041e

08002a5c <__aeabi_dsub>:
 8002a5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a5e:	464e      	mov	r6, r9
 8002a60:	4645      	mov	r5, r8
 8002a62:	46de      	mov	lr, fp
 8002a64:	4657      	mov	r7, sl
 8002a66:	b5e0      	push	{r5, r6, r7, lr}
 8002a68:	b085      	sub	sp, #20
 8002a6a:	9000      	str	r0, [sp, #0]
 8002a6c:	9101      	str	r1, [sp, #4]
 8002a6e:	030c      	lsls	r4, r1, #12
 8002a70:	004f      	lsls	r7, r1, #1
 8002a72:	0fce      	lsrs	r6, r1, #31
 8002a74:	0a61      	lsrs	r1, r4, #9
 8002a76:	9c00      	ldr	r4, [sp, #0]
 8002a78:	46b0      	mov	r8, r6
 8002a7a:	0f64      	lsrs	r4, r4, #29
 8002a7c:	430c      	orrs	r4, r1
 8002a7e:	9900      	ldr	r1, [sp, #0]
 8002a80:	0d7f      	lsrs	r7, r7, #21
 8002a82:	00c8      	lsls	r0, r1, #3
 8002a84:	0011      	movs	r1, r2
 8002a86:	001a      	movs	r2, r3
 8002a88:	031b      	lsls	r3, r3, #12
 8002a8a:	469c      	mov	ip, r3
 8002a8c:	9100      	str	r1, [sp, #0]
 8002a8e:	9201      	str	r2, [sp, #4]
 8002a90:	0051      	lsls	r1, r2, #1
 8002a92:	0d4b      	lsrs	r3, r1, #21
 8002a94:	4699      	mov	r9, r3
 8002a96:	9b01      	ldr	r3, [sp, #4]
 8002a98:	9d00      	ldr	r5, [sp, #0]
 8002a9a:	0fd9      	lsrs	r1, r3, #31
 8002a9c:	4663      	mov	r3, ip
 8002a9e:	0f6a      	lsrs	r2, r5, #29
 8002aa0:	0a5b      	lsrs	r3, r3, #9
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	00ea      	lsls	r2, r5, #3
 8002aa6:	4694      	mov	ip, r2
 8002aa8:	4693      	mov	fp, r2
 8002aaa:	4ac1      	ldr	r2, [pc, #772]	@ (8002db0 <__aeabi_dsub+0x354>)
 8002aac:	9003      	str	r0, [sp, #12]
 8002aae:	9302      	str	r3, [sp, #8]
 8002ab0:	4591      	cmp	r9, r2
 8002ab2:	d100      	bne.n	8002ab6 <__aeabi_dsub+0x5a>
 8002ab4:	e0cd      	b.n	8002c52 <__aeabi_dsub+0x1f6>
 8002ab6:	2501      	movs	r5, #1
 8002ab8:	4069      	eors	r1, r5
 8002aba:	464d      	mov	r5, r9
 8002abc:	1b7d      	subs	r5, r7, r5
 8002abe:	46aa      	mov	sl, r5
 8002ac0:	428e      	cmp	r6, r1
 8002ac2:	d100      	bne.n	8002ac6 <__aeabi_dsub+0x6a>
 8002ac4:	e080      	b.n	8002bc8 <__aeabi_dsub+0x16c>
 8002ac6:	2d00      	cmp	r5, #0
 8002ac8:	dc00      	bgt.n	8002acc <__aeabi_dsub+0x70>
 8002aca:	e335      	b.n	8003138 <__aeabi_dsub+0x6dc>
 8002acc:	4649      	mov	r1, r9
 8002ace:	2900      	cmp	r1, #0
 8002ad0:	d100      	bne.n	8002ad4 <__aeabi_dsub+0x78>
 8002ad2:	e0df      	b.n	8002c94 <__aeabi_dsub+0x238>
 8002ad4:	4297      	cmp	r7, r2
 8002ad6:	d100      	bne.n	8002ada <__aeabi_dsub+0x7e>
 8002ad8:	e194      	b.n	8002e04 <__aeabi_dsub+0x3a8>
 8002ada:	4652      	mov	r2, sl
 8002adc:	2501      	movs	r5, #1
 8002ade:	2a38      	cmp	r2, #56	@ 0x38
 8002ae0:	dc19      	bgt.n	8002b16 <__aeabi_dsub+0xba>
 8002ae2:	2280      	movs	r2, #128	@ 0x80
 8002ae4:	9b02      	ldr	r3, [sp, #8]
 8002ae6:	0412      	lsls	r2, r2, #16
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	9302      	str	r3, [sp, #8]
 8002aec:	4652      	mov	r2, sl
 8002aee:	2a1f      	cmp	r2, #31
 8002af0:	dd00      	ble.n	8002af4 <__aeabi_dsub+0x98>
 8002af2:	e1e3      	b.n	8002ebc <__aeabi_dsub+0x460>
 8002af4:	4653      	mov	r3, sl
 8002af6:	2220      	movs	r2, #32
 8002af8:	4661      	mov	r1, ip
 8002afa:	9d02      	ldr	r5, [sp, #8]
 8002afc:	1ad2      	subs	r2, r2, r3
 8002afe:	4095      	lsls	r5, r2
 8002b00:	40d9      	lsrs	r1, r3
 8002b02:	430d      	orrs	r5, r1
 8002b04:	4661      	mov	r1, ip
 8002b06:	4091      	lsls	r1, r2
 8002b08:	000a      	movs	r2, r1
 8002b0a:	1e51      	subs	r1, r2, #1
 8002b0c:	418a      	sbcs	r2, r1
 8002b0e:	4315      	orrs	r5, r2
 8002b10:	9a02      	ldr	r2, [sp, #8]
 8002b12:	40da      	lsrs	r2, r3
 8002b14:	1aa4      	subs	r4, r4, r2
 8002b16:	1b45      	subs	r5, r0, r5
 8002b18:	42a8      	cmp	r0, r5
 8002b1a:	4180      	sbcs	r0, r0
 8002b1c:	4240      	negs	r0, r0
 8002b1e:	1a24      	subs	r4, r4, r0
 8002b20:	0223      	lsls	r3, r4, #8
 8002b22:	d400      	bmi.n	8002b26 <__aeabi_dsub+0xca>
 8002b24:	e13d      	b.n	8002da2 <__aeabi_dsub+0x346>
 8002b26:	0264      	lsls	r4, r4, #9
 8002b28:	0a64      	lsrs	r4, r4, #9
 8002b2a:	2c00      	cmp	r4, #0
 8002b2c:	d100      	bne.n	8002b30 <__aeabi_dsub+0xd4>
 8002b2e:	e147      	b.n	8002dc0 <__aeabi_dsub+0x364>
 8002b30:	0020      	movs	r0, r4
 8002b32:	f000 fc63 	bl	80033fc <__clzsi2>
 8002b36:	0003      	movs	r3, r0
 8002b38:	3b08      	subs	r3, #8
 8002b3a:	2120      	movs	r1, #32
 8002b3c:	0028      	movs	r0, r5
 8002b3e:	1aca      	subs	r2, r1, r3
 8002b40:	40d0      	lsrs	r0, r2
 8002b42:	409c      	lsls	r4, r3
 8002b44:	0002      	movs	r2, r0
 8002b46:	409d      	lsls	r5, r3
 8002b48:	4322      	orrs	r2, r4
 8002b4a:	429f      	cmp	r7, r3
 8002b4c:	dd00      	ble.n	8002b50 <__aeabi_dsub+0xf4>
 8002b4e:	e177      	b.n	8002e40 <__aeabi_dsub+0x3e4>
 8002b50:	1bd8      	subs	r0, r3, r7
 8002b52:	3001      	adds	r0, #1
 8002b54:	1a09      	subs	r1, r1, r0
 8002b56:	002c      	movs	r4, r5
 8002b58:	408d      	lsls	r5, r1
 8002b5a:	40c4      	lsrs	r4, r0
 8002b5c:	1e6b      	subs	r3, r5, #1
 8002b5e:	419d      	sbcs	r5, r3
 8002b60:	0013      	movs	r3, r2
 8002b62:	40c2      	lsrs	r2, r0
 8002b64:	408b      	lsls	r3, r1
 8002b66:	4325      	orrs	r5, r4
 8002b68:	2700      	movs	r7, #0
 8002b6a:	0014      	movs	r4, r2
 8002b6c:	431d      	orrs	r5, r3
 8002b6e:	076b      	lsls	r3, r5, #29
 8002b70:	d009      	beq.n	8002b86 <__aeabi_dsub+0x12a>
 8002b72:	230f      	movs	r3, #15
 8002b74:	402b      	ands	r3, r5
 8002b76:	2b04      	cmp	r3, #4
 8002b78:	d005      	beq.n	8002b86 <__aeabi_dsub+0x12a>
 8002b7a:	1d2b      	adds	r3, r5, #4
 8002b7c:	42ab      	cmp	r3, r5
 8002b7e:	41ad      	sbcs	r5, r5
 8002b80:	426d      	negs	r5, r5
 8002b82:	1964      	adds	r4, r4, r5
 8002b84:	001d      	movs	r5, r3
 8002b86:	0223      	lsls	r3, r4, #8
 8002b88:	d400      	bmi.n	8002b8c <__aeabi_dsub+0x130>
 8002b8a:	e140      	b.n	8002e0e <__aeabi_dsub+0x3b2>
 8002b8c:	4a88      	ldr	r2, [pc, #544]	@ (8002db0 <__aeabi_dsub+0x354>)
 8002b8e:	3701      	adds	r7, #1
 8002b90:	4297      	cmp	r7, r2
 8002b92:	d100      	bne.n	8002b96 <__aeabi_dsub+0x13a>
 8002b94:	e101      	b.n	8002d9a <__aeabi_dsub+0x33e>
 8002b96:	2601      	movs	r6, #1
 8002b98:	4643      	mov	r3, r8
 8002b9a:	4986      	ldr	r1, [pc, #536]	@ (8002db4 <__aeabi_dsub+0x358>)
 8002b9c:	08ed      	lsrs	r5, r5, #3
 8002b9e:	4021      	ands	r1, r4
 8002ba0:	074a      	lsls	r2, r1, #29
 8002ba2:	432a      	orrs	r2, r5
 8002ba4:	057c      	lsls	r4, r7, #21
 8002ba6:	024d      	lsls	r5, r1, #9
 8002ba8:	0b2d      	lsrs	r5, r5, #12
 8002baa:	0d64      	lsrs	r4, r4, #21
 8002bac:	401e      	ands	r6, r3
 8002bae:	0524      	lsls	r4, r4, #20
 8002bb0:	432c      	orrs	r4, r5
 8002bb2:	07f6      	lsls	r6, r6, #31
 8002bb4:	4334      	orrs	r4, r6
 8002bb6:	0010      	movs	r0, r2
 8002bb8:	0021      	movs	r1, r4
 8002bba:	b005      	add	sp, #20
 8002bbc:	bcf0      	pop	{r4, r5, r6, r7}
 8002bbe:	46bb      	mov	fp, r7
 8002bc0:	46b2      	mov	sl, r6
 8002bc2:	46a9      	mov	r9, r5
 8002bc4:	46a0      	mov	r8, r4
 8002bc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002bc8:	2d00      	cmp	r5, #0
 8002bca:	dc00      	bgt.n	8002bce <__aeabi_dsub+0x172>
 8002bcc:	e2d0      	b.n	8003170 <__aeabi_dsub+0x714>
 8002bce:	4649      	mov	r1, r9
 8002bd0:	2900      	cmp	r1, #0
 8002bd2:	d000      	beq.n	8002bd6 <__aeabi_dsub+0x17a>
 8002bd4:	e0d4      	b.n	8002d80 <__aeabi_dsub+0x324>
 8002bd6:	4661      	mov	r1, ip
 8002bd8:	9b02      	ldr	r3, [sp, #8]
 8002bda:	4319      	orrs	r1, r3
 8002bdc:	d100      	bne.n	8002be0 <__aeabi_dsub+0x184>
 8002bde:	e12b      	b.n	8002e38 <__aeabi_dsub+0x3dc>
 8002be0:	1e69      	subs	r1, r5, #1
 8002be2:	2d01      	cmp	r5, #1
 8002be4:	d100      	bne.n	8002be8 <__aeabi_dsub+0x18c>
 8002be6:	e1d9      	b.n	8002f9c <__aeabi_dsub+0x540>
 8002be8:	4295      	cmp	r5, r2
 8002bea:	d100      	bne.n	8002bee <__aeabi_dsub+0x192>
 8002bec:	e10a      	b.n	8002e04 <__aeabi_dsub+0x3a8>
 8002bee:	2501      	movs	r5, #1
 8002bf0:	2938      	cmp	r1, #56	@ 0x38
 8002bf2:	dc17      	bgt.n	8002c24 <__aeabi_dsub+0x1c8>
 8002bf4:	468a      	mov	sl, r1
 8002bf6:	4653      	mov	r3, sl
 8002bf8:	2b1f      	cmp	r3, #31
 8002bfa:	dd00      	ble.n	8002bfe <__aeabi_dsub+0x1a2>
 8002bfc:	e1e7      	b.n	8002fce <__aeabi_dsub+0x572>
 8002bfe:	2220      	movs	r2, #32
 8002c00:	1ad2      	subs	r2, r2, r3
 8002c02:	9b02      	ldr	r3, [sp, #8]
 8002c04:	4661      	mov	r1, ip
 8002c06:	4093      	lsls	r3, r2
 8002c08:	001d      	movs	r5, r3
 8002c0a:	4653      	mov	r3, sl
 8002c0c:	40d9      	lsrs	r1, r3
 8002c0e:	4663      	mov	r3, ip
 8002c10:	4093      	lsls	r3, r2
 8002c12:	001a      	movs	r2, r3
 8002c14:	430d      	orrs	r5, r1
 8002c16:	1e51      	subs	r1, r2, #1
 8002c18:	418a      	sbcs	r2, r1
 8002c1a:	4653      	mov	r3, sl
 8002c1c:	4315      	orrs	r5, r2
 8002c1e:	9a02      	ldr	r2, [sp, #8]
 8002c20:	40da      	lsrs	r2, r3
 8002c22:	18a4      	adds	r4, r4, r2
 8002c24:	182d      	adds	r5, r5, r0
 8002c26:	4285      	cmp	r5, r0
 8002c28:	4180      	sbcs	r0, r0
 8002c2a:	4240      	negs	r0, r0
 8002c2c:	1824      	adds	r4, r4, r0
 8002c2e:	0223      	lsls	r3, r4, #8
 8002c30:	d400      	bmi.n	8002c34 <__aeabi_dsub+0x1d8>
 8002c32:	e0b6      	b.n	8002da2 <__aeabi_dsub+0x346>
 8002c34:	4b5e      	ldr	r3, [pc, #376]	@ (8002db0 <__aeabi_dsub+0x354>)
 8002c36:	3701      	adds	r7, #1
 8002c38:	429f      	cmp	r7, r3
 8002c3a:	d100      	bne.n	8002c3e <__aeabi_dsub+0x1e2>
 8002c3c:	e0ad      	b.n	8002d9a <__aeabi_dsub+0x33e>
 8002c3e:	2101      	movs	r1, #1
 8002c40:	4b5c      	ldr	r3, [pc, #368]	@ (8002db4 <__aeabi_dsub+0x358>)
 8002c42:	086a      	lsrs	r2, r5, #1
 8002c44:	401c      	ands	r4, r3
 8002c46:	4029      	ands	r1, r5
 8002c48:	430a      	orrs	r2, r1
 8002c4a:	07e5      	lsls	r5, r4, #31
 8002c4c:	4315      	orrs	r5, r2
 8002c4e:	0864      	lsrs	r4, r4, #1
 8002c50:	e78d      	b.n	8002b6e <__aeabi_dsub+0x112>
 8002c52:	4a59      	ldr	r2, [pc, #356]	@ (8002db8 <__aeabi_dsub+0x35c>)
 8002c54:	9b02      	ldr	r3, [sp, #8]
 8002c56:	4692      	mov	sl, r2
 8002c58:	4662      	mov	r2, ip
 8002c5a:	44ba      	add	sl, r7
 8002c5c:	431a      	orrs	r2, r3
 8002c5e:	d02c      	beq.n	8002cba <__aeabi_dsub+0x25e>
 8002c60:	428e      	cmp	r6, r1
 8002c62:	d02e      	beq.n	8002cc2 <__aeabi_dsub+0x266>
 8002c64:	4652      	mov	r2, sl
 8002c66:	2a00      	cmp	r2, #0
 8002c68:	d060      	beq.n	8002d2c <__aeabi_dsub+0x2d0>
 8002c6a:	2f00      	cmp	r7, #0
 8002c6c:	d100      	bne.n	8002c70 <__aeabi_dsub+0x214>
 8002c6e:	e0db      	b.n	8002e28 <__aeabi_dsub+0x3cc>
 8002c70:	4663      	mov	r3, ip
 8002c72:	000e      	movs	r6, r1
 8002c74:	9c02      	ldr	r4, [sp, #8]
 8002c76:	08d8      	lsrs	r0, r3, #3
 8002c78:	0762      	lsls	r2, r4, #29
 8002c7a:	4302      	orrs	r2, r0
 8002c7c:	08e4      	lsrs	r4, r4, #3
 8002c7e:	0013      	movs	r3, r2
 8002c80:	4323      	orrs	r3, r4
 8002c82:	d100      	bne.n	8002c86 <__aeabi_dsub+0x22a>
 8002c84:	e254      	b.n	8003130 <__aeabi_dsub+0x6d4>
 8002c86:	2580      	movs	r5, #128	@ 0x80
 8002c88:	032d      	lsls	r5, r5, #12
 8002c8a:	4325      	orrs	r5, r4
 8002c8c:	032d      	lsls	r5, r5, #12
 8002c8e:	4c48      	ldr	r4, [pc, #288]	@ (8002db0 <__aeabi_dsub+0x354>)
 8002c90:	0b2d      	lsrs	r5, r5, #12
 8002c92:	e78c      	b.n	8002bae <__aeabi_dsub+0x152>
 8002c94:	4661      	mov	r1, ip
 8002c96:	9b02      	ldr	r3, [sp, #8]
 8002c98:	4319      	orrs	r1, r3
 8002c9a:	d100      	bne.n	8002c9e <__aeabi_dsub+0x242>
 8002c9c:	e0cc      	b.n	8002e38 <__aeabi_dsub+0x3dc>
 8002c9e:	0029      	movs	r1, r5
 8002ca0:	3901      	subs	r1, #1
 8002ca2:	2d01      	cmp	r5, #1
 8002ca4:	d100      	bne.n	8002ca8 <__aeabi_dsub+0x24c>
 8002ca6:	e188      	b.n	8002fba <__aeabi_dsub+0x55e>
 8002ca8:	4295      	cmp	r5, r2
 8002caa:	d100      	bne.n	8002cae <__aeabi_dsub+0x252>
 8002cac:	e0aa      	b.n	8002e04 <__aeabi_dsub+0x3a8>
 8002cae:	2501      	movs	r5, #1
 8002cb0:	2938      	cmp	r1, #56	@ 0x38
 8002cb2:	dd00      	ble.n	8002cb6 <__aeabi_dsub+0x25a>
 8002cb4:	e72f      	b.n	8002b16 <__aeabi_dsub+0xba>
 8002cb6:	468a      	mov	sl, r1
 8002cb8:	e718      	b.n	8002aec <__aeabi_dsub+0x90>
 8002cba:	2201      	movs	r2, #1
 8002cbc:	4051      	eors	r1, r2
 8002cbe:	428e      	cmp	r6, r1
 8002cc0:	d1d0      	bne.n	8002c64 <__aeabi_dsub+0x208>
 8002cc2:	4653      	mov	r3, sl
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d100      	bne.n	8002cca <__aeabi_dsub+0x26e>
 8002cc8:	e0be      	b.n	8002e48 <__aeabi_dsub+0x3ec>
 8002cca:	2f00      	cmp	r7, #0
 8002ccc:	d000      	beq.n	8002cd0 <__aeabi_dsub+0x274>
 8002cce:	e138      	b.n	8002f42 <__aeabi_dsub+0x4e6>
 8002cd0:	46ca      	mov	sl, r9
 8002cd2:	0022      	movs	r2, r4
 8002cd4:	4302      	orrs	r2, r0
 8002cd6:	d100      	bne.n	8002cda <__aeabi_dsub+0x27e>
 8002cd8:	e1e2      	b.n	80030a0 <__aeabi_dsub+0x644>
 8002cda:	4653      	mov	r3, sl
 8002cdc:	1e59      	subs	r1, r3, #1
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d100      	bne.n	8002ce4 <__aeabi_dsub+0x288>
 8002ce2:	e20d      	b.n	8003100 <__aeabi_dsub+0x6a4>
 8002ce4:	4a32      	ldr	r2, [pc, #200]	@ (8002db0 <__aeabi_dsub+0x354>)
 8002ce6:	4592      	cmp	sl, r2
 8002ce8:	d100      	bne.n	8002cec <__aeabi_dsub+0x290>
 8002cea:	e1d2      	b.n	8003092 <__aeabi_dsub+0x636>
 8002cec:	2701      	movs	r7, #1
 8002cee:	2938      	cmp	r1, #56	@ 0x38
 8002cf0:	dc13      	bgt.n	8002d1a <__aeabi_dsub+0x2be>
 8002cf2:	291f      	cmp	r1, #31
 8002cf4:	dd00      	ble.n	8002cf8 <__aeabi_dsub+0x29c>
 8002cf6:	e1ee      	b.n	80030d6 <__aeabi_dsub+0x67a>
 8002cf8:	2220      	movs	r2, #32
 8002cfa:	9b02      	ldr	r3, [sp, #8]
 8002cfc:	1a52      	subs	r2, r2, r1
 8002cfe:	0025      	movs	r5, r4
 8002d00:	0007      	movs	r7, r0
 8002d02:	469a      	mov	sl, r3
 8002d04:	40cc      	lsrs	r4, r1
 8002d06:	4090      	lsls	r0, r2
 8002d08:	4095      	lsls	r5, r2
 8002d0a:	40cf      	lsrs	r7, r1
 8002d0c:	44a2      	add	sl, r4
 8002d0e:	1e42      	subs	r2, r0, #1
 8002d10:	4190      	sbcs	r0, r2
 8002d12:	4653      	mov	r3, sl
 8002d14:	432f      	orrs	r7, r5
 8002d16:	4307      	orrs	r7, r0
 8002d18:	9302      	str	r3, [sp, #8]
 8002d1a:	003d      	movs	r5, r7
 8002d1c:	4465      	add	r5, ip
 8002d1e:	4565      	cmp	r5, ip
 8002d20:	4192      	sbcs	r2, r2
 8002d22:	9b02      	ldr	r3, [sp, #8]
 8002d24:	4252      	negs	r2, r2
 8002d26:	464f      	mov	r7, r9
 8002d28:	18d4      	adds	r4, r2, r3
 8002d2a:	e780      	b.n	8002c2e <__aeabi_dsub+0x1d2>
 8002d2c:	4a23      	ldr	r2, [pc, #140]	@ (8002dbc <__aeabi_dsub+0x360>)
 8002d2e:	1c7d      	adds	r5, r7, #1
 8002d30:	4215      	tst	r5, r2
 8002d32:	d000      	beq.n	8002d36 <__aeabi_dsub+0x2da>
 8002d34:	e0aa      	b.n	8002e8c <__aeabi_dsub+0x430>
 8002d36:	4662      	mov	r2, ip
 8002d38:	0025      	movs	r5, r4
 8002d3a:	9b02      	ldr	r3, [sp, #8]
 8002d3c:	4305      	orrs	r5, r0
 8002d3e:	431a      	orrs	r2, r3
 8002d40:	2f00      	cmp	r7, #0
 8002d42:	d000      	beq.n	8002d46 <__aeabi_dsub+0x2ea>
 8002d44:	e0f5      	b.n	8002f32 <__aeabi_dsub+0x4d6>
 8002d46:	2d00      	cmp	r5, #0
 8002d48:	d100      	bne.n	8002d4c <__aeabi_dsub+0x2f0>
 8002d4a:	e16b      	b.n	8003024 <__aeabi_dsub+0x5c8>
 8002d4c:	2a00      	cmp	r2, #0
 8002d4e:	d100      	bne.n	8002d52 <__aeabi_dsub+0x2f6>
 8002d50:	e152      	b.n	8002ff8 <__aeabi_dsub+0x59c>
 8002d52:	4663      	mov	r3, ip
 8002d54:	1ac5      	subs	r5, r0, r3
 8002d56:	9b02      	ldr	r3, [sp, #8]
 8002d58:	1ae2      	subs	r2, r4, r3
 8002d5a:	42a8      	cmp	r0, r5
 8002d5c:	419b      	sbcs	r3, r3
 8002d5e:	425b      	negs	r3, r3
 8002d60:	1ad3      	subs	r3, r2, r3
 8002d62:	021a      	lsls	r2, r3, #8
 8002d64:	d400      	bmi.n	8002d68 <__aeabi_dsub+0x30c>
 8002d66:	e1d5      	b.n	8003114 <__aeabi_dsub+0x6b8>
 8002d68:	4663      	mov	r3, ip
 8002d6a:	1a1d      	subs	r5, r3, r0
 8002d6c:	45ac      	cmp	ip, r5
 8002d6e:	4192      	sbcs	r2, r2
 8002d70:	2601      	movs	r6, #1
 8002d72:	9b02      	ldr	r3, [sp, #8]
 8002d74:	4252      	negs	r2, r2
 8002d76:	1b1c      	subs	r4, r3, r4
 8002d78:	4688      	mov	r8, r1
 8002d7a:	1aa4      	subs	r4, r4, r2
 8002d7c:	400e      	ands	r6, r1
 8002d7e:	e6f6      	b.n	8002b6e <__aeabi_dsub+0x112>
 8002d80:	4297      	cmp	r7, r2
 8002d82:	d03f      	beq.n	8002e04 <__aeabi_dsub+0x3a8>
 8002d84:	4652      	mov	r2, sl
 8002d86:	2501      	movs	r5, #1
 8002d88:	2a38      	cmp	r2, #56	@ 0x38
 8002d8a:	dd00      	ble.n	8002d8e <__aeabi_dsub+0x332>
 8002d8c:	e74a      	b.n	8002c24 <__aeabi_dsub+0x1c8>
 8002d8e:	2280      	movs	r2, #128	@ 0x80
 8002d90:	9b02      	ldr	r3, [sp, #8]
 8002d92:	0412      	lsls	r2, r2, #16
 8002d94:	4313      	orrs	r3, r2
 8002d96:	9302      	str	r3, [sp, #8]
 8002d98:	e72d      	b.n	8002bf6 <__aeabi_dsub+0x19a>
 8002d9a:	003c      	movs	r4, r7
 8002d9c:	2500      	movs	r5, #0
 8002d9e:	2200      	movs	r2, #0
 8002da0:	e705      	b.n	8002bae <__aeabi_dsub+0x152>
 8002da2:	2307      	movs	r3, #7
 8002da4:	402b      	ands	r3, r5
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d000      	beq.n	8002dac <__aeabi_dsub+0x350>
 8002daa:	e6e2      	b.n	8002b72 <__aeabi_dsub+0x116>
 8002dac:	e06b      	b.n	8002e86 <__aeabi_dsub+0x42a>
 8002dae:	46c0      	nop			@ (mov r8, r8)
 8002db0:	000007ff 	.word	0x000007ff
 8002db4:	ff7fffff 	.word	0xff7fffff
 8002db8:	fffff801 	.word	0xfffff801
 8002dbc:	000007fe 	.word	0x000007fe
 8002dc0:	0028      	movs	r0, r5
 8002dc2:	f000 fb1b 	bl	80033fc <__clzsi2>
 8002dc6:	0003      	movs	r3, r0
 8002dc8:	3318      	adds	r3, #24
 8002dca:	2b1f      	cmp	r3, #31
 8002dcc:	dc00      	bgt.n	8002dd0 <__aeabi_dsub+0x374>
 8002dce:	e6b4      	b.n	8002b3a <__aeabi_dsub+0xde>
 8002dd0:	002a      	movs	r2, r5
 8002dd2:	3808      	subs	r0, #8
 8002dd4:	4082      	lsls	r2, r0
 8002dd6:	429f      	cmp	r7, r3
 8002dd8:	dd00      	ble.n	8002ddc <__aeabi_dsub+0x380>
 8002dda:	e0b9      	b.n	8002f50 <__aeabi_dsub+0x4f4>
 8002ddc:	1bdb      	subs	r3, r3, r7
 8002dde:	1c58      	adds	r0, r3, #1
 8002de0:	281f      	cmp	r0, #31
 8002de2:	dc00      	bgt.n	8002de6 <__aeabi_dsub+0x38a>
 8002de4:	e1a0      	b.n	8003128 <__aeabi_dsub+0x6cc>
 8002de6:	0015      	movs	r5, r2
 8002de8:	3b1f      	subs	r3, #31
 8002dea:	40dd      	lsrs	r5, r3
 8002dec:	2820      	cmp	r0, #32
 8002dee:	d005      	beq.n	8002dfc <__aeabi_dsub+0x3a0>
 8002df0:	2340      	movs	r3, #64	@ 0x40
 8002df2:	1a1b      	subs	r3, r3, r0
 8002df4:	409a      	lsls	r2, r3
 8002df6:	1e53      	subs	r3, r2, #1
 8002df8:	419a      	sbcs	r2, r3
 8002dfa:	4315      	orrs	r5, r2
 8002dfc:	2307      	movs	r3, #7
 8002dfe:	2700      	movs	r7, #0
 8002e00:	402b      	ands	r3, r5
 8002e02:	e7d0      	b.n	8002da6 <__aeabi_dsub+0x34a>
 8002e04:	08c0      	lsrs	r0, r0, #3
 8002e06:	0762      	lsls	r2, r4, #29
 8002e08:	4302      	orrs	r2, r0
 8002e0a:	08e4      	lsrs	r4, r4, #3
 8002e0c:	e737      	b.n	8002c7e <__aeabi_dsub+0x222>
 8002e0e:	08ea      	lsrs	r2, r5, #3
 8002e10:	0763      	lsls	r3, r4, #29
 8002e12:	431a      	orrs	r2, r3
 8002e14:	4bd3      	ldr	r3, [pc, #844]	@ (8003164 <__aeabi_dsub+0x708>)
 8002e16:	08e4      	lsrs	r4, r4, #3
 8002e18:	429f      	cmp	r7, r3
 8002e1a:	d100      	bne.n	8002e1e <__aeabi_dsub+0x3c2>
 8002e1c:	e72f      	b.n	8002c7e <__aeabi_dsub+0x222>
 8002e1e:	0324      	lsls	r4, r4, #12
 8002e20:	0b25      	lsrs	r5, r4, #12
 8002e22:	057c      	lsls	r4, r7, #21
 8002e24:	0d64      	lsrs	r4, r4, #21
 8002e26:	e6c2      	b.n	8002bae <__aeabi_dsub+0x152>
 8002e28:	46ca      	mov	sl, r9
 8002e2a:	0022      	movs	r2, r4
 8002e2c:	4302      	orrs	r2, r0
 8002e2e:	d158      	bne.n	8002ee2 <__aeabi_dsub+0x486>
 8002e30:	4663      	mov	r3, ip
 8002e32:	000e      	movs	r6, r1
 8002e34:	9c02      	ldr	r4, [sp, #8]
 8002e36:	9303      	str	r3, [sp, #12]
 8002e38:	9b03      	ldr	r3, [sp, #12]
 8002e3a:	4657      	mov	r7, sl
 8002e3c:	08da      	lsrs	r2, r3, #3
 8002e3e:	e7e7      	b.n	8002e10 <__aeabi_dsub+0x3b4>
 8002e40:	4cc9      	ldr	r4, [pc, #804]	@ (8003168 <__aeabi_dsub+0x70c>)
 8002e42:	1aff      	subs	r7, r7, r3
 8002e44:	4014      	ands	r4, r2
 8002e46:	e692      	b.n	8002b6e <__aeabi_dsub+0x112>
 8002e48:	4dc8      	ldr	r5, [pc, #800]	@ (800316c <__aeabi_dsub+0x710>)
 8002e4a:	1c7a      	adds	r2, r7, #1
 8002e4c:	422a      	tst	r2, r5
 8002e4e:	d000      	beq.n	8002e52 <__aeabi_dsub+0x3f6>
 8002e50:	e084      	b.n	8002f5c <__aeabi_dsub+0x500>
 8002e52:	0022      	movs	r2, r4
 8002e54:	4302      	orrs	r2, r0
 8002e56:	2f00      	cmp	r7, #0
 8002e58:	d000      	beq.n	8002e5c <__aeabi_dsub+0x400>
 8002e5a:	e0ef      	b.n	800303c <__aeabi_dsub+0x5e0>
 8002e5c:	2a00      	cmp	r2, #0
 8002e5e:	d100      	bne.n	8002e62 <__aeabi_dsub+0x406>
 8002e60:	e0e5      	b.n	800302e <__aeabi_dsub+0x5d2>
 8002e62:	4662      	mov	r2, ip
 8002e64:	9902      	ldr	r1, [sp, #8]
 8002e66:	430a      	orrs	r2, r1
 8002e68:	d100      	bne.n	8002e6c <__aeabi_dsub+0x410>
 8002e6a:	e0c5      	b.n	8002ff8 <__aeabi_dsub+0x59c>
 8002e6c:	4663      	mov	r3, ip
 8002e6e:	18c5      	adds	r5, r0, r3
 8002e70:	468c      	mov	ip, r1
 8002e72:	4285      	cmp	r5, r0
 8002e74:	4180      	sbcs	r0, r0
 8002e76:	4464      	add	r4, ip
 8002e78:	4240      	negs	r0, r0
 8002e7a:	1824      	adds	r4, r4, r0
 8002e7c:	0223      	lsls	r3, r4, #8
 8002e7e:	d502      	bpl.n	8002e86 <__aeabi_dsub+0x42a>
 8002e80:	4bb9      	ldr	r3, [pc, #740]	@ (8003168 <__aeabi_dsub+0x70c>)
 8002e82:	3701      	adds	r7, #1
 8002e84:	401c      	ands	r4, r3
 8002e86:	46ba      	mov	sl, r7
 8002e88:	9503      	str	r5, [sp, #12]
 8002e8a:	e7d5      	b.n	8002e38 <__aeabi_dsub+0x3dc>
 8002e8c:	4662      	mov	r2, ip
 8002e8e:	1a85      	subs	r5, r0, r2
 8002e90:	42a8      	cmp	r0, r5
 8002e92:	4192      	sbcs	r2, r2
 8002e94:	4252      	negs	r2, r2
 8002e96:	4691      	mov	r9, r2
 8002e98:	9b02      	ldr	r3, [sp, #8]
 8002e9a:	1ae3      	subs	r3, r4, r3
 8002e9c:	001a      	movs	r2, r3
 8002e9e:	464b      	mov	r3, r9
 8002ea0:	1ad2      	subs	r2, r2, r3
 8002ea2:	0013      	movs	r3, r2
 8002ea4:	4691      	mov	r9, r2
 8002ea6:	021a      	lsls	r2, r3, #8
 8002ea8:	d46c      	bmi.n	8002f84 <__aeabi_dsub+0x528>
 8002eaa:	464a      	mov	r2, r9
 8002eac:	464c      	mov	r4, r9
 8002eae:	432a      	orrs	r2, r5
 8002eb0:	d000      	beq.n	8002eb4 <__aeabi_dsub+0x458>
 8002eb2:	e63a      	b.n	8002b2a <__aeabi_dsub+0xce>
 8002eb4:	2600      	movs	r6, #0
 8002eb6:	2400      	movs	r4, #0
 8002eb8:	2500      	movs	r5, #0
 8002eba:	e678      	b.n	8002bae <__aeabi_dsub+0x152>
 8002ebc:	9902      	ldr	r1, [sp, #8]
 8002ebe:	4653      	mov	r3, sl
 8002ec0:	000d      	movs	r5, r1
 8002ec2:	3a20      	subs	r2, #32
 8002ec4:	40d5      	lsrs	r5, r2
 8002ec6:	2b20      	cmp	r3, #32
 8002ec8:	d006      	beq.n	8002ed8 <__aeabi_dsub+0x47c>
 8002eca:	2240      	movs	r2, #64	@ 0x40
 8002ecc:	1ad2      	subs	r2, r2, r3
 8002ece:	000b      	movs	r3, r1
 8002ed0:	4093      	lsls	r3, r2
 8002ed2:	4662      	mov	r2, ip
 8002ed4:	431a      	orrs	r2, r3
 8002ed6:	4693      	mov	fp, r2
 8002ed8:	465b      	mov	r3, fp
 8002eda:	1e5a      	subs	r2, r3, #1
 8002edc:	4193      	sbcs	r3, r2
 8002ede:	431d      	orrs	r5, r3
 8002ee0:	e619      	b.n	8002b16 <__aeabi_dsub+0xba>
 8002ee2:	4653      	mov	r3, sl
 8002ee4:	1e5a      	subs	r2, r3, #1
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d100      	bne.n	8002eec <__aeabi_dsub+0x490>
 8002eea:	e0c6      	b.n	800307a <__aeabi_dsub+0x61e>
 8002eec:	4e9d      	ldr	r6, [pc, #628]	@ (8003164 <__aeabi_dsub+0x708>)
 8002eee:	45b2      	cmp	sl, r6
 8002ef0:	d100      	bne.n	8002ef4 <__aeabi_dsub+0x498>
 8002ef2:	e6bd      	b.n	8002c70 <__aeabi_dsub+0x214>
 8002ef4:	4688      	mov	r8, r1
 8002ef6:	000e      	movs	r6, r1
 8002ef8:	2501      	movs	r5, #1
 8002efa:	2a38      	cmp	r2, #56	@ 0x38
 8002efc:	dc10      	bgt.n	8002f20 <__aeabi_dsub+0x4c4>
 8002efe:	2a1f      	cmp	r2, #31
 8002f00:	dc7f      	bgt.n	8003002 <__aeabi_dsub+0x5a6>
 8002f02:	2120      	movs	r1, #32
 8002f04:	0025      	movs	r5, r4
 8002f06:	1a89      	subs	r1, r1, r2
 8002f08:	0007      	movs	r7, r0
 8002f0a:	4088      	lsls	r0, r1
 8002f0c:	408d      	lsls	r5, r1
 8002f0e:	40d7      	lsrs	r7, r2
 8002f10:	40d4      	lsrs	r4, r2
 8002f12:	1e41      	subs	r1, r0, #1
 8002f14:	4188      	sbcs	r0, r1
 8002f16:	9b02      	ldr	r3, [sp, #8]
 8002f18:	433d      	orrs	r5, r7
 8002f1a:	1b1b      	subs	r3, r3, r4
 8002f1c:	4305      	orrs	r5, r0
 8002f1e:	9302      	str	r3, [sp, #8]
 8002f20:	4662      	mov	r2, ip
 8002f22:	1b55      	subs	r5, r2, r5
 8002f24:	45ac      	cmp	ip, r5
 8002f26:	4192      	sbcs	r2, r2
 8002f28:	9b02      	ldr	r3, [sp, #8]
 8002f2a:	4252      	negs	r2, r2
 8002f2c:	464f      	mov	r7, r9
 8002f2e:	1a9c      	subs	r4, r3, r2
 8002f30:	e5f6      	b.n	8002b20 <__aeabi_dsub+0xc4>
 8002f32:	2d00      	cmp	r5, #0
 8002f34:	d000      	beq.n	8002f38 <__aeabi_dsub+0x4dc>
 8002f36:	e0b7      	b.n	80030a8 <__aeabi_dsub+0x64c>
 8002f38:	2a00      	cmp	r2, #0
 8002f3a:	d100      	bne.n	8002f3e <__aeabi_dsub+0x4e2>
 8002f3c:	e0f0      	b.n	8003120 <__aeabi_dsub+0x6c4>
 8002f3e:	2601      	movs	r6, #1
 8002f40:	400e      	ands	r6, r1
 8002f42:	4663      	mov	r3, ip
 8002f44:	9802      	ldr	r0, [sp, #8]
 8002f46:	08d9      	lsrs	r1, r3, #3
 8002f48:	0742      	lsls	r2, r0, #29
 8002f4a:	430a      	orrs	r2, r1
 8002f4c:	08c4      	lsrs	r4, r0, #3
 8002f4e:	e696      	b.n	8002c7e <__aeabi_dsub+0x222>
 8002f50:	4c85      	ldr	r4, [pc, #532]	@ (8003168 <__aeabi_dsub+0x70c>)
 8002f52:	1aff      	subs	r7, r7, r3
 8002f54:	4014      	ands	r4, r2
 8002f56:	0762      	lsls	r2, r4, #29
 8002f58:	08e4      	lsrs	r4, r4, #3
 8002f5a:	e760      	b.n	8002e1e <__aeabi_dsub+0x3c2>
 8002f5c:	4981      	ldr	r1, [pc, #516]	@ (8003164 <__aeabi_dsub+0x708>)
 8002f5e:	428a      	cmp	r2, r1
 8002f60:	d100      	bne.n	8002f64 <__aeabi_dsub+0x508>
 8002f62:	e0c9      	b.n	80030f8 <__aeabi_dsub+0x69c>
 8002f64:	4663      	mov	r3, ip
 8002f66:	18c1      	adds	r1, r0, r3
 8002f68:	4281      	cmp	r1, r0
 8002f6a:	4180      	sbcs	r0, r0
 8002f6c:	9b02      	ldr	r3, [sp, #8]
 8002f6e:	4240      	negs	r0, r0
 8002f70:	18e3      	adds	r3, r4, r3
 8002f72:	181b      	adds	r3, r3, r0
 8002f74:	07dd      	lsls	r5, r3, #31
 8002f76:	085c      	lsrs	r4, r3, #1
 8002f78:	2307      	movs	r3, #7
 8002f7a:	0849      	lsrs	r1, r1, #1
 8002f7c:	430d      	orrs	r5, r1
 8002f7e:	0017      	movs	r7, r2
 8002f80:	402b      	ands	r3, r5
 8002f82:	e710      	b.n	8002da6 <__aeabi_dsub+0x34a>
 8002f84:	4663      	mov	r3, ip
 8002f86:	1a1d      	subs	r5, r3, r0
 8002f88:	45ac      	cmp	ip, r5
 8002f8a:	4192      	sbcs	r2, r2
 8002f8c:	2601      	movs	r6, #1
 8002f8e:	9b02      	ldr	r3, [sp, #8]
 8002f90:	4252      	negs	r2, r2
 8002f92:	1b1c      	subs	r4, r3, r4
 8002f94:	4688      	mov	r8, r1
 8002f96:	1aa4      	subs	r4, r4, r2
 8002f98:	400e      	ands	r6, r1
 8002f9a:	e5c6      	b.n	8002b2a <__aeabi_dsub+0xce>
 8002f9c:	4663      	mov	r3, ip
 8002f9e:	18c5      	adds	r5, r0, r3
 8002fa0:	9b02      	ldr	r3, [sp, #8]
 8002fa2:	4285      	cmp	r5, r0
 8002fa4:	4180      	sbcs	r0, r0
 8002fa6:	469c      	mov	ip, r3
 8002fa8:	4240      	negs	r0, r0
 8002faa:	4464      	add	r4, ip
 8002fac:	1824      	adds	r4, r4, r0
 8002fae:	2701      	movs	r7, #1
 8002fb0:	0223      	lsls	r3, r4, #8
 8002fb2:	d400      	bmi.n	8002fb6 <__aeabi_dsub+0x55a>
 8002fb4:	e6f5      	b.n	8002da2 <__aeabi_dsub+0x346>
 8002fb6:	2702      	movs	r7, #2
 8002fb8:	e641      	b.n	8002c3e <__aeabi_dsub+0x1e2>
 8002fba:	4663      	mov	r3, ip
 8002fbc:	1ac5      	subs	r5, r0, r3
 8002fbe:	42a8      	cmp	r0, r5
 8002fc0:	4180      	sbcs	r0, r0
 8002fc2:	9b02      	ldr	r3, [sp, #8]
 8002fc4:	4240      	negs	r0, r0
 8002fc6:	1ae4      	subs	r4, r4, r3
 8002fc8:	2701      	movs	r7, #1
 8002fca:	1a24      	subs	r4, r4, r0
 8002fcc:	e5a8      	b.n	8002b20 <__aeabi_dsub+0xc4>
 8002fce:	9d02      	ldr	r5, [sp, #8]
 8002fd0:	4652      	mov	r2, sl
 8002fd2:	002b      	movs	r3, r5
 8002fd4:	3a20      	subs	r2, #32
 8002fd6:	40d3      	lsrs	r3, r2
 8002fd8:	0019      	movs	r1, r3
 8002fda:	4653      	mov	r3, sl
 8002fdc:	2b20      	cmp	r3, #32
 8002fde:	d006      	beq.n	8002fee <__aeabi_dsub+0x592>
 8002fe0:	2240      	movs	r2, #64	@ 0x40
 8002fe2:	1ad2      	subs	r2, r2, r3
 8002fe4:	002b      	movs	r3, r5
 8002fe6:	4093      	lsls	r3, r2
 8002fe8:	4662      	mov	r2, ip
 8002fea:	431a      	orrs	r2, r3
 8002fec:	4693      	mov	fp, r2
 8002fee:	465d      	mov	r5, fp
 8002ff0:	1e6b      	subs	r3, r5, #1
 8002ff2:	419d      	sbcs	r5, r3
 8002ff4:	430d      	orrs	r5, r1
 8002ff6:	e615      	b.n	8002c24 <__aeabi_dsub+0x1c8>
 8002ff8:	0762      	lsls	r2, r4, #29
 8002ffa:	08c0      	lsrs	r0, r0, #3
 8002ffc:	4302      	orrs	r2, r0
 8002ffe:	08e4      	lsrs	r4, r4, #3
 8003000:	e70d      	b.n	8002e1e <__aeabi_dsub+0x3c2>
 8003002:	0011      	movs	r1, r2
 8003004:	0027      	movs	r7, r4
 8003006:	3920      	subs	r1, #32
 8003008:	40cf      	lsrs	r7, r1
 800300a:	2a20      	cmp	r2, #32
 800300c:	d005      	beq.n	800301a <__aeabi_dsub+0x5be>
 800300e:	2140      	movs	r1, #64	@ 0x40
 8003010:	1a8a      	subs	r2, r1, r2
 8003012:	4094      	lsls	r4, r2
 8003014:	0025      	movs	r5, r4
 8003016:	4305      	orrs	r5, r0
 8003018:	9503      	str	r5, [sp, #12]
 800301a:	9d03      	ldr	r5, [sp, #12]
 800301c:	1e6a      	subs	r2, r5, #1
 800301e:	4195      	sbcs	r5, r2
 8003020:	433d      	orrs	r5, r7
 8003022:	e77d      	b.n	8002f20 <__aeabi_dsub+0x4c4>
 8003024:	2a00      	cmp	r2, #0
 8003026:	d100      	bne.n	800302a <__aeabi_dsub+0x5ce>
 8003028:	e744      	b.n	8002eb4 <__aeabi_dsub+0x458>
 800302a:	2601      	movs	r6, #1
 800302c:	400e      	ands	r6, r1
 800302e:	4663      	mov	r3, ip
 8003030:	08d9      	lsrs	r1, r3, #3
 8003032:	9b02      	ldr	r3, [sp, #8]
 8003034:	075a      	lsls	r2, r3, #29
 8003036:	430a      	orrs	r2, r1
 8003038:	08dc      	lsrs	r4, r3, #3
 800303a:	e6f0      	b.n	8002e1e <__aeabi_dsub+0x3c2>
 800303c:	2a00      	cmp	r2, #0
 800303e:	d028      	beq.n	8003092 <__aeabi_dsub+0x636>
 8003040:	4662      	mov	r2, ip
 8003042:	9f02      	ldr	r7, [sp, #8]
 8003044:	08c0      	lsrs	r0, r0, #3
 8003046:	433a      	orrs	r2, r7
 8003048:	d100      	bne.n	800304c <__aeabi_dsub+0x5f0>
 800304a:	e6dc      	b.n	8002e06 <__aeabi_dsub+0x3aa>
 800304c:	0762      	lsls	r2, r4, #29
 800304e:	4310      	orrs	r0, r2
 8003050:	2280      	movs	r2, #128	@ 0x80
 8003052:	08e4      	lsrs	r4, r4, #3
 8003054:	0312      	lsls	r2, r2, #12
 8003056:	4214      	tst	r4, r2
 8003058:	d009      	beq.n	800306e <__aeabi_dsub+0x612>
 800305a:	08fd      	lsrs	r5, r7, #3
 800305c:	4215      	tst	r5, r2
 800305e:	d106      	bne.n	800306e <__aeabi_dsub+0x612>
 8003060:	4663      	mov	r3, ip
 8003062:	2601      	movs	r6, #1
 8003064:	002c      	movs	r4, r5
 8003066:	08d8      	lsrs	r0, r3, #3
 8003068:	077b      	lsls	r3, r7, #29
 800306a:	4318      	orrs	r0, r3
 800306c:	400e      	ands	r6, r1
 800306e:	0f42      	lsrs	r2, r0, #29
 8003070:	00c0      	lsls	r0, r0, #3
 8003072:	08c0      	lsrs	r0, r0, #3
 8003074:	0752      	lsls	r2, r2, #29
 8003076:	4302      	orrs	r2, r0
 8003078:	e601      	b.n	8002c7e <__aeabi_dsub+0x222>
 800307a:	4663      	mov	r3, ip
 800307c:	1a1d      	subs	r5, r3, r0
 800307e:	45ac      	cmp	ip, r5
 8003080:	4192      	sbcs	r2, r2
 8003082:	9b02      	ldr	r3, [sp, #8]
 8003084:	4252      	negs	r2, r2
 8003086:	1b1c      	subs	r4, r3, r4
 8003088:	000e      	movs	r6, r1
 800308a:	4688      	mov	r8, r1
 800308c:	2701      	movs	r7, #1
 800308e:	1aa4      	subs	r4, r4, r2
 8003090:	e546      	b.n	8002b20 <__aeabi_dsub+0xc4>
 8003092:	4663      	mov	r3, ip
 8003094:	08d9      	lsrs	r1, r3, #3
 8003096:	9b02      	ldr	r3, [sp, #8]
 8003098:	075a      	lsls	r2, r3, #29
 800309a:	430a      	orrs	r2, r1
 800309c:	08dc      	lsrs	r4, r3, #3
 800309e:	e5ee      	b.n	8002c7e <__aeabi_dsub+0x222>
 80030a0:	4663      	mov	r3, ip
 80030a2:	9c02      	ldr	r4, [sp, #8]
 80030a4:	9303      	str	r3, [sp, #12]
 80030a6:	e6c7      	b.n	8002e38 <__aeabi_dsub+0x3dc>
 80030a8:	08c0      	lsrs	r0, r0, #3
 80030aa:	2a00      	cmp	r2, #0
 80030ac:	d100      	bne.n	80030b0 <__aeabi_dsub+0x654>
 80030ae:	e6aa      	b.n	8002e06 <__aeabi_dsub+0x3aa>
 80030b0:	0762      	lsls	r2, r4, #29
 80030b2:	4310      	orrs	r0, r2
 80030b4:	2280      	movs	r2, #128	@ 0x80
 80030b6:	08e4      	lsrs	r4, r4, #3
 80030b8:	0312      	lsls	r2, r2, #12
 80030ba:	4214      	tst	r4, r2
 80030bc:	d0d7      	beq.n	800306e <__aeabi_dsub+0x612>
 80030be:	9f02      	ldr	r7, [sp, #8]
 80030c0:	08fd      	lsrs	r5, r7, #3
 80030c2:	4215      	tst	r5, r2
 80030c4:	d1d3      	bne.n	800306e <__aeabi_dsub+0x612>
 80030c6:	4663      	mov	r3, ip
 80030c8:	2601      	movs	r6, #1
 80030ca:	08d8      	lsrs	r0, r3, #3
 80030cc:	077b      	lsls	r3, r7, #29
 80030ce:	002c      	movs	r4, r5
 80030d0:	4318      	orrs	r0, r3
 80030d2:	400e      	ands	r6, r1
 80030d4:	e7cb      	b.n	800306e <__aeabi_dsub+0x612>
 80030d6:	000a      	movs	r2, r1
 80030d8:	0027      	movs	r7, r4
 80030da:	3a20      	subs	r2, #32
 80030dc:	40d7      	lsrs	r7, r2
 80030de:	2920      	cmp	r1, #32
 80030e0:	d005      	beq.n	80030ee <__aeabi_dsub+0x692>
 80030e2:	2240      	movs	r2, #64	@ 0x40
 80030e4:	1a52      	subs	r2, r2, r1
 80030e6:	4094      	lsls	r4, r2
 80030e8:	0025      	movs	r5, r4
 80030ea:	4305      	orrs	r5, r0
 80030ec:	9503      	str	r5, [sp, #12]
 80030ee:	9d03      	ldr	r5, [sp, #12]
 80030f0:	1e6a      	subs	r2, r5, #1
 80030f2:	4195      	sbcs	r5, r2
 80030f4:	432f      	orrs	r7, r5
 80030f6:	e610      	b.n	8002d1a <__aeabi_dsub+0x2be>
 80030f8:	0014      	movs	r4, r2
 80030fa:	2500      	movs	r5, #0
 80030fc:	2200      	movs	r2, #0
 80030fe:	e556      	b.n	8002bae <__aeabi_dsub+0x152>
 8003100:	9b02      	ldr	r3, [sp, #8]
 8003102:	4460      	add	r0, ip
 8003104:	4699      	mov	r9, r3
 8003106:	4560      	cmp	r0, ip
 8003108:	4192      	sbcs	r2, r2
 800310a:	444c      	add	r4, r9
 800310c:	4252      	negs	r2, r2
 800310e:	0005      	movs	r5, r0
 8003110:	18a4      	adds	r4, r4, r2
 8003112:	e74c      	b.n	8002fae <__aeabi_dsub+0x552>
 8003114:	001a      	movs	r2, r3
 8003116:	001c      	movs	r4, r3
 8003118:	432a      	orrs	r2, r5
 800311a:	d000      	beq.n	800311e <__aeabi_dsub+0x6c2>
 800311c:	e6b3      	b.n	8002e86 <__aeabi_dsub+0x42a>
 800311e:	e6c9      	b.n	8002eb4 <__aeabi_dsub+0x458>
 8003120:	2480      	movs	r4, #128	@ 0x80
 8003122:	2600      	movs	r6, #0
 8003124:	0324      	lsls	r4, r4, #12
 8003126:	e5ae      	b.n	8002c86 <__aeabi_dsub+0x22a>
 8003128:	2120      	movs	r1, #32
 800312a:	2500      	movs	r5, #0
 800312c:	1a09      	subs	r1, r1, r0
 800312e:	e517      	b.n	8002b60 <__aeabi_dsub+0x104>
 8003130:	2200      	movs	r2, #0
 8003132:	2500      	movs	r5, #0
 8003134:	4c0b      	ldr	r4, [pc, #44]	@ (8003164 <__aeabi_dsub+0x708>)
 8003136:	e53a      	b.n	8002bae <__aeabi_dsub+0x152>
 8003138:	2d00      	cmp	r5, #0
 800313a:	d100      	bne.n	800313e <__aeabi_dsub+0x6e2>
 800313c:	e5f6      	b.n	8002d2c <__aeabi_dsub+0x2d0>
 800313e:	464b      	mov	r3, r9
 8003140:	1bda      	subs	r2, r3, r7
 8003142:	4692      	mov	sl, r2
 8003144:	2f00      	cmp	r7, #0
 8003146:	d100      	bne.n	800314a <__aeabi_dsub+0x6ee>
 8003148:	e66f      	b.n	8002e2a <__aeabi_dsub+0x3ce>
 800314a:	2a38      	cmp	r2, #56	@ 0x38
 800314c:	dc05      	bgt.n	800315a <__aeabi_dsub+0x6fe>
 800314e:	2680      	movs	r6, #128	@ 0x80
 8003150:	0436      	lsls	r6, r6, #16
 8003152:	4334      	orrs	r4, r6
 8003154:	4688      	mov	r8, r1
 8003156:	000e      	movs	r6, r1
 8003158:	e6d1      	b.n	8002efe <__aeabi_dsub+0x4a2>
 800315a:	4688      	mov	r8, r1
 800315c:	000e      	movs	r6, r1
 800315e:	2501      	movs	r5, #1
 8003160:	e6de      	b.n	8002f20 <__aeabi_dsub+0x4c4>
 8003162:	46c0      	nop			@ (mov r8, r8)
 8003164:	000007ff 	.word	0x000007ff
 8003168:	ff7fffff 	.word	0xff7fffff
 800316c:	000007fe 	.word	0x000007fe
 8003170:	2d00      	cmp	r5, #0
 8003172:	d100      	bne.n	8003176 <__aeabi_dsub+0x71a>
 8003174:	e668      	b.n	8002e48 <__aeabi_dsub+0x3ec>
 8003176:	464b      	mov	r3, r9
 8003178:	1bd9      	subs	r1, r3, r7
 800317a:	2f00      	cmp	r7, #0
 800317c:	d101      	bne.n	8003182 <__aeabi_dsub+0x726>
 800317e:	468a      	mov	sl, r1
 8003180:	e5a7      	b.n	8002cd2 <__aeabi_dsub+0x276>
 8003182:	2701      	movs	r7, #1
 8003184:	2938      	cmp	r1, #56	@ 0x38
 8003186:	dd00      	ble.n	800318a <__aeabi_dsub+0x72e>
 8003188:	e5c7      	b.n	8002d1a <__aeabi_dsub+0x2be>
 800318a:	2280      	movs	r2, #128	@ 0x80
 800318c:	0412      	lsls	r2, r2, #16
 800318e:	4314      	orrs	r4, r2
 8003190:	e5af      	b.n	8002cf2 <__aeabi_dsub+0x296>
 8003192:	46c0      	nop			@ (mov r8, r8)

08003194 <__aeabi_dcmpun>:
 8003194:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003196:	46c6      	mov	lr, r8
 8003198:	031e      	lsls	r6, r3, #12
 800319a:	0b36      	lsrs	r6, r6, #12
 800319c:	46b0      	mov	r8, r6
 800319e:	4e0d      	ldr	r6, [pc, #52]	@ (80031d4 <__aeabi_dcmpun+0x40>)
 80031a0:	030c      	lsls	r4, r1, #12
 80031a2:	004d      	lsls	r5, r1, #1
 80031a4:	005f      	lsls	r7, r3, #1
 80031a6:	b500      	push	{lr}
 80031a8:	0b24      	lsrs	r4, r4, #12
 80031aa:	0d6d      	lsrs	r5, r5, #21
 80031ac:	0d7f      	lsrs	r7, r7, #21
 80031ae:	42b5      	cmp	r5, r6
 80031b0:	d00b      	beq.n	80031ca <__aeabi_dcmpun+0x36>
 80031b2:	4908      	ldr	r1, [pc, #32]	@ (80031d4 <__aeabi_dcmpun+0x40>)
 80031b4:	2000      	movs	r0, #0
 80031b6:	428f      	cmp	r7, r1
 80031b8:	d104      	bne.n	80031c4 <__aeabi_dcmpun+0x30>
 80031ba:	4646      	mov	r6, r8
 80031bc:	4316      	orrs	r6, r2
 80031be:	0030      	movs	r0, r6
 80031c0:	1e43      	subs	r3, r0, #1
 80031c2:	4198      	sbcs	r0, r3
 80031c4:	bc80      	pop	{r7}
 80031c6:	46b8      	mov	r8, r7
 80031c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80031ca:	4304      	orrs	r4, r0
 80031cc:	2001      	movs	r0, #1
 80031ce:	2c00      	cmp	r4, #0
 80031d0:	d1f8      	bne.n	80031c4 <__aeabi_dcmpun+0x30>
 80031d2:	e7ee      	b.n	80031b2 <__aeabi_dcmpun+0x1e>
 80031d4:	000007ff 	.word	0x000007ff

080031d8 <__aeabi_d2iz>:
 80031d8:	000b      	movs	r3, r1
 80031da:	0002      	movs	r2, r0
 80031dc:	b570      	push	{r4, r5, r6, lr}
 80031de:	4d16      	ldr	r5, [pc, #88]	@ (8003238 <__aeabi_d2iz+0x60>)
 80031e0:	030c      	lsls	r4, r1, #12
 80031e2:	b082      	sub	sp, #8
 80031e4:	0049      	lsls	r1, r1, #1
 80031e6:	2000      	movs	r0, #0
 80031e8:	9200      	str	r2, [sp, #0]
 80031ea:	9301      	str	r3, [sp, #4]
 80031ec:	0b24      	lsrs	r4, r4, #12
 80031ee:	0d49      	lsrs	r1, r1, #21
 80031f0:	0fde      	lsrs	r6, r3, #31
 80031f2:	42a9      	cmp	r1, r5
 80031f4:	dd04      	ble.n	8003200 <__aeabi_d2iz+0x28>
 80031f6:	4811      	ldr	r0, [pc, #68]	@ (800323c <__aeabi_d2iz+0x64>)
 80031f8:	4281      	cmp	r1, r0
 80031fa:	dd03      	ble.n	8003204 <__aeabi_d2iz+0x2c>
 80031fc:	4b10      	ldr	r3, [pc, #64]	@ (8003240 <__aeabi_d2iz+0x68>)
 80031fe:	18f0      	adds	r0, r6, r3
 8003200:	b002      	add	sp, #8
 8003202:	bd70      	pop	{r4, r5, r6, pc}
 8003204:	2080      	movs	r0, #128	@ 0x80
 8003206:	0340      	lsls	r0, r0, #13
 8003208:	4320      	orrs	r0, r4
 800320a:	4c0e      	ldr	r4, [pc, #56]	@ (8003244 <__aeabi_d2iz+0x6c>)
 800320c:	1a64      	subs	r4, r4, r1
 800320e:	2c1f      	cmp	r4, #31
 8003210:	dd08      	ble.n	8003224 <__aeabi_d2iz+0x4c>
 8003212:	4b0d      	ldr	r3, [pc, #52]	@ (8003248 <__aeabi_d2iz+0x70>)
 8003214:	1a5b      	subs	r3, r3, r1
 8003216:	40d8      	lsrs	r0, r3
 8003218:	0003      	movs	r3, r0
 800321a:	4258      	negs	r0, r3
 800321c:	2e00      	cmp	r6, #0
 800321e:	d1ef      	bne.n	8003200 <__aeabi_d2iz+0x28>
 8003220:	0018      	movs	r0, r3
 8003222:	e7ed      	b.n	8003200 <__aeabi_d2iz+0x28>
 8003224:	4b09      	ldr	r3, [pc, #36]	@ (800324c <__aeabi_d2iz+0x74>)
 8003226:	9a00      	ldr	r2, [sp, #0]
 8003228:	469c      	mov	ip, r3
 800322a:	0003      	movs	r3, r0
 800322c:	4461      	add	r1, ip
 800322e:	408b      	lsls	r3, r1
 8003230:	40e2      	lsrs	r2, r4
 8003232:	4313      	orrs	r3, r2
 8003234:	e7f1      	b.n	800321a <__aeabi_d2iz+0x42>
 8003236:	46c0      	nop			@ (mov r8, r8)
 8003238:	000003fe 	.word	0x000003fe
 800323c:	0000041d 	.word	0x0000041d
 8003240:	7fffffff 	.word	0x7fffffff
 8003244:	00000433 	.word	0x00000433
 8003248:	00000413 	.word	0x00000413
 800324c:	fffffbed 	.word	0xfffffbed

08003250 <__aeabi_i2d>:
 8003250:	b570      	push	{r4, r5, r6, lr}
 8003252:	2800      	cmp	r0, #0
 8003254:	d016      	beq.n	8003284 <__aeabi_i2d+0x34>
 8003256:	17c3      	asrs	r3, r0, #31
 8003258:	18c5      	adds	r5, r0, r3
 800325a:	405d      	eors	r5, r3
 800325c:	0fc4      	lsrs	r4, r0, #31
 800325e:	0028      	movs	r0, r5
 8003260:	f000 f8cc 	bl	80033fc <__clzsi2>
 8003264:	4b10      	ldr	r3, [pc, #64]	@ (80032a8 <__aeabi_i2d+0x58>)
 8003266:	1a1b      	subs	r3, r3, r0
 8003268:	055b      	lsls	r3, r3, #21
 800326a:	0d5b      	lsrs	r3, r3, #21
 800326c:	280a      	cmp	r0, #10
 800326e:	dc14      	bgt.n	800329a <__aeabi_i2d+0x4a>
 8003270:	0002      	movs	r2, r0
 8003272:	002e      	movs	r6, r5
 8003274:	3215      	adds	r2, #21
 8003276:	4096      	lsls	r6, r2
 8003278:	220b      	movs	r2, #11
 800327a:	1a12      	subs	r2, r2, r0
 800327c:	40d5      	lsrs	r5, r2
 800327e:	032d      	lsls	r5, r5, #12
 8003280:	0b2d      	lsrs	r5, r5, #12
 8003282:	e003      	b.n	800328c <__aeabi_i2d+0x3c>
 8003284:	2400      	movs	r4, #0
 8003286:	2300      	movs	r3, #0
 8003288:	2500      	movs	r5, #0
 800328a:	2600      	movs	r6, #0
 800328c:	051b      	lsls	r3, r3, #20
 800328e:	432b      	orrs	r3, r5
 8003290:	07e4      	lsls	r4, r4, #31
 8003292:	4323      	orrs	r3, r4
 8003294:	0030      	movs	r0, r6
 8003296:	0019      	movs	r1, r3
 8003298:	bd70      	pop	{r4, r5, r6, pc}
 800329a:	380b      	subs	r0, #11
 800329c:	4085      	lsls	r5, r0
 800329e:	032d      	lsls	r5, r5, #12
 80032a0:	2600      	movs	r6, #0
 80032a2:	0b2d      	lsrs	r5, r5, #12
 80032a4:	e7f2      	b.n	800328c <__aeabi_i2d+0x3c>
 80032a6:	46c0      	nop			@ (mov r8, r8)
 80032a8:	0000041e 	.word	0x0000041e

080032ac <__aeabi_ui2d>:
 80032ac:	b510      	push	{r4, lr}
 80032ae:	1e04      	subs	r4, r0, #0
 80032b0:	d010      	beq.n	80032d4 <__aeabi_ui2d+0x28>
 80032b2:	f000 f8a3 	bl	80033fc <__clzsi2>
 80032b6:	4b0e      	ldr	r3, [pc, #56]	@ (80032f0 <__aeabi_ui2d+0x44>)
 80032b8:	1a1b      	subs	r3, r3, r0
 80032ba:	055b      	lsls	r3, r3, #21
 80032bc:	0d5b      	lsrs	r3, r3, #21
 80032be:	280a      	cmp	r0, #10
 80032c0:	dc0f      	bgt.n	80032e2 <__aeabi_ui2d+0x36>
 80032c2:	220b      	movs	r2, #11
 80032c4:	0021      	movs	r1, r4
 80032c6:	1a12      	subs	r2, r2, r0
 80032c8:	40d1      	lsrs	r1, r2
 80032ca:	3015      	adds	r0, #21
 80032cc:	030a      	lsls	r2, r1, #12
 80032ce:	4084      	lsls	r4, r0
 80032d0:	0b12      	lsrs	r2, r2, #12
 80032d2:	e001      	b.n	80032d8 <__aeabi_ui2d+0x2c>
 80032d4:	2300      	movs	r3, #0
 80032d6:	2200      	movs	r2, #0
 80032d8:	051b      	lsls	r3, r3, #20
 80032da:	4313      	orrs	r3, r2
 80032dc:	0020      	movs	r0, r4
 80032de:	0019      	movs	r1, r3
 80032e0:	bd10      	pop	{r4, pc}
 80032e2:	0022      	movs	r2, r4
 80032e4:	380b      	subs	r0, #11
 80032e6:	4082      	lsls	r2, r0
 80032e8:	0312      	lsls	r2, r2, #12
 80032ea:	2400      	movs	r4, #0
 80032ec:	0b12      	lsrs	r2, r2, #12
 80032ee:	e7f3      	b.n	80032d8 <__aeabi_ui2d+0x2c>
 80032f0:	0000041e 	.word	0x0000041e

080032f4 <__aeabi_d2f>:
 80032f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032f6:	004b      	lsls	r3, r1, #1
 80032f8:	030f      	lsls	r7, r1, #12
 80032fa:	0d5b      	lsrs	r3, r3, #21
 80032fc:	4c3b      	ldr	r4, [pc, #236]	@ (80033ec <__aeabi_d2f+0xf8>)
 80032fe:	0f45      	lsrs	r5, r0, #29
 8003300:	b083      	sub	sp, #12
 8003302:	0a7f      	lsrs	r7, r7, #9
 8003304:	1c5e      	adds	r6, r3, #1
 8003306:	432f      	orrs	r7, r5
 8003308:	9000      	str	r0, [sp, #0]
 800330a:	9101      	str	r1, [sp, #4]
 800330c:	0fca      	lsrs	r2, r1, #31
 800330e:	00c5      	lsls	r5, r0, #3
 8003310:	4226      	tst	r6, r4
 8003312:	d00b      	beq.n	800332c <__aeabi_d2f+0x38>
 8003314:	4936      	ldr	r1, [pc, #216]	@ (80033f0 <__aeabi_d2f+0xfc>)
 8003316:	185c      	adds	r4, r3, r1
 8003318:	2cfe      	cmp	r4, #254	@ 0xfe
 800331a:	dd13      	ble.n	8003344 <__aeabi_d2f+0x50>
 800331c:	20ff      	movs	r0, #255	@ 0xff
 800331e:	2300      	movs	r3, #0
 8003320:	05c0      	lsls	r0, r0, #23
 8003322:	4318      	orrs	r0, r3
 8003324:	07d2      	lsls	r2, r2, #31
 8003326:	4310      	orrs	r0, r2
 8003328:	b003      	add	sp, #12
 800332a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800332c:	2b00      	cmp	r3, #0
 800332e:	d102      	bne.n	8003336 <__aeabi_d2f+0x42>
 8003330:	2000      	movs	r0, #0
 8003332:	2300      	movs	r3, #0
 8003334:	e7f4      	b.n	8003320 <__aeabi_d2f+0x2c>
 8003336:	433d      	orrs	r5, r7
 8003338:	d0f0      	beq.n	800331c <__aeabi_d2f+0x28>
 800333a:	2380      	movs	r3, #128	@ 0x80
 800333c:	03db      	lsls	r3, r3, #15
 800333e:	20ff      	movs	r0, #255	@ 0xff
 8003340:	433b      	orrs	r3, r7
 8003342:	e7ed      	b.n	8003320 <__aeabi_d2f+0x2c>
 8003344:	2c00      	cmp	r4, #0
 8003346:	dd14      	ble.n	8003372 <__aeabi_d2f+0x7e>
 8003348:	9b00      	ldr	r3, [sp, #0]
 800334a:	00ff      	lsls	r7, r7, #3
 800334c:	019b      	lsls	r3, r3, #6
 800334e:	1e58      	subs	r0, r3, #1
 8003350:	4183      	sbcs	r3, r0
 8003352:	0f69      	lsrs	r1, r5, #29
 8003354:	433b      	orrs	r3, r7
 8003356:	430b      	orrs	r3, r1
 8003358:	0759      	lsls	r1, r3, #29
 800335a:	d041      	beq.n	80033e0 <__aeabi_d2f+0xec>
 800335c:	210f      	movs	r1, #15
 800335e:	4019      	ands	r1, r3
 8003360:	2904      	cmp	r1, #4
 8003362:	d028      	beq.n	80033b6 <__aeabi_d2f+0xc2>
 8003364:	3304      	adds	r3, #4
 8003366:	0159      	lsls	r1, r3, #5
 8003368:	d525      	bpl.n	80033b6 <__aeabi_d2f+0xc2>
 800336a:	3401      	adds	r4, #1
 800336c:	2300      	movs	r3, #0
 800336e:	b2e0      	uxtb	r0, r4
 8003370:	e7d6      	b.n	8003320 <__aeabi_d2f+0x2c>
 8003372:	0021      	movs	r1, r4
 8003374:	3117      	adds	r1, #23
 8003376:	dbdb      	blt.n	8003330 <__aeabi_d2f+0x3c>
 8003378:	2180      	movs	r1, #128	@ 0x80
 800337a:	201e      	movs	r0, #30
 800337c:	0409      	lsls	r1, r1, #16
 800337e:	4339      	orrs	r1, r7
 8003380:	1b00      	subs	r0, r0, r4
 8003382:	281f      	cmp	r0, #31
 8003384:	dd1b      	ble.n	80033be <__aeabi_d2f+0xca>
 8003386:	2602      	movs	r6, #2
 8003388:	4276      	negs	r6, r6
 800338a:	1b34      	subs	r4, r6, r4
 800338c:	000e      	movs	r6, r1
 800338e:	40e6      	lsrs	r6, r4
 8003390:	0034      	movs	r4, r6
 8003392:	2820      	cmp	r0, #32
 8003394:	d004      	beq.n	80033a0 <__aeabi_d2f+0xac>
 8003396:	4817      	ldr	r0, [pc, #92]	@ (80033f4 <__aeabi_d2f+0x100>)
 8003398:	4684      	mov	ip, r0
 800339a:	4463      	add	r3, ip
 800339c:	4099      	lsls	r1, r3
 800339e:	430d      	orrs	r5, r1
 80033a0:	002b      	movs	r3, r5
 80033a2:	1e59      	subs	r1, r3, #1
 80033a4:	418b      	sbcs	r3, r1
 80033a6:	4323      	orrs	r3, r4
 80033a8:	0759      	lsls	r1, r3, #29
 80033aa:	d015      	beq.n	80033d8 <__aeabi_d2f+0xe4>
 80033ac:	210f      	movs	r1, #15
 80033ae:	2400      	movs	r4, #0
 80033b0:	4019      	ands	r1, r3
 80033b2:	2904      	cmp	r1, #4
 80033b4:	d117      	bne.n	80033e6 <__aeabi_d2f+0xf2>
 80033b6:	019b      	lsls	r3, r3, #6
 80033b8:	0a5b      	lsrs	r3, r3, #9
 80033ba:	b2e0      	uxtb	r0, r4
 80033bc:	e7b0      	b.n	8003320 <__aeabi_d2f+0x2c>
 80033be:	4c0e      	ldr	r4, [pc, #56]	@ (80033f8 <__aeabi_d2f+0x104>)
 80033c0:	191c      	adds	r4, r3, r4
 80033c2:	002b      	movs	r3, r5
 80033c4:	40a5      	lsls	r5, r4
 80033c6:	40c3      	lsrs	r3, r0
 80033c8:	40a1      	lsls	r1, r4
 80033ca:	1e68      	subs	r0, r5, #1
 80033cc:	4185      	sbcs	r5, r0
 80033ce:	4329      	orrs	r1, r5
 80033d0:	430b      	orrs	r3, r1
 80033d2:	2400      	movs	r4, #0
 80033d4:	0759      	lsls	r1, r3, #29
 80033d6:	d1c1      	bne.n	800335c <__aeabi_d2f+0x68>
 80033d8:	019b      	lsls	r3, r3, #6
 80033da:	2000      	movs	r0, #0
 80033dc:	0a5b      	lsrs	r3, r3, #9
 80033de:	e79f      	b.n	8003320 <__aeabi_d2f+0x2c>
 80033e0:	08db      	lsrs	r3, r3, #3
 80033e2:	b2e0      	uxtb	r0, r4
 80033e4:	e79c      	b.n	8003320 <__aeabi_d2f+0x2c>
 80033e6:	3304      	adds	r3, #4
 80033e8:	e7e5      	b.n	80033b6 <__aeabi_d2f+0xc2>
 80033ea:	46c0      	nop			@ (mov r8, r8)
 80033ec:	000007fe 	.word	0x000007fe
 80033f0:	fffffc80 	.word	0xfffffc80
 80033f4:	fffffca2 	.word	0xfffffca2
 80033f8:	fffffc82 	.word	0xfffffc82

080033fc <__clzsi2>:
 80033fc:	211c      	movs	r1, #28
 80033fe:	2301      	movs	r3, #1
 8003400:	041b      	lsls	r3, r3, #16
 8003402:	4298      	cmp	r0, r3
 8003404:	d301      	bcc.n	800340a <__clzsi2+0xe>
 8003406:	0c00      	lsrs	r0, r0, #16
 8003408:	3910      	subs	r1, #16
 800340a:	0a1b      	lsrs	r3, r3, #8
 800340c:	4298      	cmp	r0, r3
 800340e:	d301      	bcc.n	8003414 <__clzsi2+0x18>
 8003410:	0a00      	lsrs	r0, r0, #8
 8003412:	3908      	subs	r1, #8
 8003414:	091b      	lsrs	r3, r3, #4
 8003416:	4298      	cmp	r0, r3
 8003418:	d301      	bcc.n	800341e <__clzsi2+0x22>
 800341a:	0900      	lsrs	r0, r0, #4
 800341c:	3904      	subs	r1, #4
 800341e:	a202      	add	r2, pc, #8	@ (adr r2, 8003428 <__clzsi2+0x2c>)
 8003420:	5c10      	ldrb	r0, [r2, r0]
 8003422:	1840      	adds	r0, r0, r1
 8003424:	4770      	bx	lr
 8003426:	46c0      	nop			@ (mov r8, r8)
 8003428:	02020304 	.word	0x02020304
 800342c:	01010101 	.word	0x01010101
	...

08003438 <__clzdi2>:
 8003438:	b510      	push	{r4, lr}
 800343a:	2900      	cmp	r1, #0
 800343c:	d103      	bne.n	8003446 <__clzdi2+0xe>
 800343e:	f7ff ffdd 	bl	80033fc <__clzsi2>
 8003442:	3020      	adds	r0, #32
 8003444:	e002      	b.n	800344c <__clzdi2+0x14>
 8003446:	0008      	movs	r0, r1
 8003448:	f7ff ffd8 	bl	80033fc <__clzsi2>
 800344c:	bd10      	pop	{r4, pc}
 800344e:	46c0      	nop			@ (mov r8, r8)

08003450 <ESP_Init>:

#include "ESP.h"

static UART_HandleTypeDef* EspUart = NULL;

void ESP_Init(UART_HandleTypeDef* espUart) {
 8003450:	b580      	push	{r7, lr}
 8003452:	b082      	sub	sp, #8
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  EspUart = espUart;
 8003458:	4b03      	ldr	r3, [pc, #12]	@ (8003468 <ESP_Init+0x18>)
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	601a      	str	r2, [r3, #0]
}
 800345e:	46c0      	nop			@ (mov r8, r8)
 8003460:	46bd      	mov	sp, r7
 8003462:	b002      	add	sp, #8
 8003464:	bd80      	pop	{r7, pc}
 8003466:	46c0      	nop			@ (mov r8, r8)
 8003468:	20000228 	.word	0x20000228

0800346c <I2CSensors_Init>:
static I2C_HandleTypeDef* SensorI2C = NULL;

static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);
static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);

void I2CSensors_Init(I2C_HandleTypeDef* sensorI2C) {
 800346c:	b580      	push	{r7, lr}
 800346e:	b082      	sub	sp, #8
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
    SensorI2C = sensorI2C;
 8003474:	4b09      	ldr	r3, [pc, #36]	@ (800349c <I2CSensors_Init+0x30>)
 8003476:	687a      	ldr	r2, [r7, #4]
 8003478:	601a      	str	r2, [r3, #0]
    HT_Init(ReadI2C, WriteI2C);
 800347a:	4a09      	ldr	r2, [pc, #36]	@ (80034a0 <I2CSensors_Init+0x34>)
 800347c:	4b09      	ldr	r3, [pc, #36]	@ (80034a4 <I2CSensors_Init+0x38>)
 800347e:	0011      	movs	r1, r2
 8003480:	0018      	movs	r0, r3
 8003482:	f000 f9ef 	bl	8003864 <HT_Init>
    Gas_Init(ReadI2C, WriteI2C);
 8003486:	4a06      	ldr	r2, [pc, #24]	@ (80034a0 <I2CSensors_Init+0x34>)
 8003488:	4b06      	ldr	r3, [pc, #24]	@ (80034a4 <I2CSensors_Init+0x38>)
 800348a:	0011      	movs	r1, r2
 800348c:	0018      	movs	r0, r3
 800348e:	f000 f8b0 	bl	80035f2 <Gas_Init>
}
 8003492:	46c0      	nop			@ (mov r8, r8)
 8003494:	46bd      	mov	sp, r7
 8003496:	b002      	add	sp, #8
 8003498:	bd80      	pop	{r7, pc}
 800349a:	46c0      	nop			@ (mov r8, r8)
 800349c:	2000022c 	.word	0x2000022c
 80034a0:	080034fd 	.word	0x080034fd
 80034a4:	080034a9 	.word	0x080034a9

080034a8 <ReadI2C>:

static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 80034a8:	b5b0      	push	{r4, r5, r7, lr}
 80034aa:	b084      	sub	sp, #16
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6039      	str	r1, [r7, #0]
 80034b0:	0011      	movs	r1, r2
 80034b2:	1dfb      	adds	r3, r7, #7
 80034b4:	1c02      	adds	r2, r0, #0
 80034b6:	701a      	strb	r2, [r3, #0]
 80034b8:	1dbb      	adds	r3, r7, #6
 80034ba:	1c0a      	adds	r2, r1, #0
 80034bc:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Receive_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 80034be:	4b0e      	ldr	r3, [pc, #56]	@ (80034f8 <ReadI2C+0x50>)
 80034c0:	6818      	ldr	r0, [r3, #0]
 80034c2:	1dfb      	adds	r3, r7, #7
 80034c4:	781b      	ldrb	r3, [r3, #0]
 80034c6:	b29b      	uxth	r3, r3
 80034c8:	18db      	adds	r3, r3, r3
 80034ca:	b299      	uxth	r1, r3
 80034cc:	1dbb      	adds	r3, r7, #6
 80034ce:	781b      	ldrb	r3, [r3, #0]
 80034d0:	b29b      	uxth	r3, r3
 80034d2:	250f      	movs	r5, #15
 80034d4:	197c      	adds	r4, r7, r5
 80034d6:	683a      	ldr	r2, [r7, #0]
 80034d8:	f003 fe8a 	bl	80071f0 <HAL_I2C_Master_Receive_DMA>
 80034dc:	0003      	movs	r3, r0
 80034de:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 80034e0:	197b      	adds	r3, r7, r5
 80034e2:	781b      	ldrb	r3, [r3, #0]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d001      	beq.n	80034ec <ReadI2C+0x44>
        return false;
 80034e8:	2300      	movs	r3, #0
 80034ea:	e000      	b.n	80034ee <ReadI2C+0x46>
    }
    return true;
 80034ec:	2301      	movs	r3, #1
}
 80034ee:	0018      	movs	r0, r3
 80034f0:	46bd      	mov	sp, r7
 80034f2:	b004      	add	sp, #16
 80034f4:	bdb0      	pop	{r4, r5, r7, pc}
 80034f6:	46c0      	nop			@ (mov r8, r8)
 80034f8:	2000022c 	.word	0x2000022c

080034fc <WriteI2C>:

static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 80034fc:	b5b0      	push	{r4, r5, r7, lr}
 80034fe:	b084      	sub	sp, #16
 8003500:	af00      	add	r7, sp, #0
 8003502:	6039      	str	r1, [r7, #0]
 8003504:	0011      	movs	r1, r2
 8003506:	1dfb      	adds	r3, r7, #7
 8003508:	1c02      	adds	r2, r0, #0
 800350a:	701a      	strb	r2, [r3, #0]
 800350c:	1dbb      	adds	r3, r7, #6
 800350e:	1c0a      	adds	r2, r1, #0
 8003510:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Transmit_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 8003512:	4b0e      	ldr	r3, [pc, #56]	@ (800354c <WriteI2C+0x50>)
 8003514:	6818      	ldr	r0, [r3, #0]
 8003516:	1dfb      	adds	r3, r7, #7
 8003518:	781b      	ldrb	r3, [r3, #0]
 800351a:	b29b      	uxth	r3, r3
 800351c:	18db      	adds	r3, r3, r3
 800351e:	b299      	uxth	r1, r3
 8003520:	1dbb      	adds	r3, r7, #6
 8003522:	781b      	ldrb	r3, [r3, #0]
 8003524:	b29b      	uxth	r3, r3
 8003526:	250f      	movs	r5, #15
 8003528:	197c      	adds	r4, r7, r5
 800352a:	683a      	ldr	r2, [r7, #0]
 800352c:	f003 fd5a 	bl	8006fe4 <HAL_I2C_Master_Transmit_DMA>
 8003530:	0003      	movs	r3, r0
 8003532:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 8003534:	197b      	adds	r3, r7, r5
 8003536:	781b      	ldrb	r3, [r3, #0]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d001      	beq.n	8003540 <WriteI2C+0x44>
        return false;
 800353c:	2300      	movs	r3, #0
 800353e:	e000      	b.n	8003542 <WriteI2C+0x46>
    }
    return true;
 8003540:	2301      	movs	r3, #1
}
 8003542:	0018      	movs	r0, r3
 8003544:	46bd      	mov	sp, r7
 8003546:	b004      	add	sp, #16
 8003548:	bdb0      	pop	{r4, r5, r7, pc}
 800354a:	46c0      	nop			@ (mov r8, r8)
 800354c:	2000022c 	.word	0x2000022c

08003550 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b082      	sub	sp, #8
 8003554:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003556:	4b10      	ldr	r3, [pc, #64]	@ (8003598 <MX_DMA_Init+0x48>)
 8003558:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800355a:	4b0f      	ldr	r3, [pc, #60]	@ (8003598 <MX_DMA_Init+0x48>)
 800355c:	2101      	movs	r1, #1
 800355e:	430a      	orrs	r2, r1
 8003560:	631a      	str	r2, [r3, #48]	@ 0x30
 8003562:	4b0d      	ldr	r3, [pc, #52]	@ (8003598 <MX_DMA_Init+0x48>)
 8003564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003566:	2201      	movs	r2, #1
 8003568:	4013      	ands	r3, r2
 800356a:	607b      	str	r3, [r7, #4]
 800356c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800356e:	2200      	movs	r2, #0
 8003570:	2100      	movs	r1, #0
 8003572:	200a      	movs	r0, #10
 8003574:	f003 f86a 	bl	800664c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8003578:	200a      	movs	r0, #10
 800357a:	f003 f87c 	bl	8006676 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 800357e:	2200      	movs	r2, #0
 8003580:	2100      	movs	r1, #0
 8003582:	200b      	movs	r0, #11
 8003584:	f003 f862 	bl	800664c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 8003588:	200b      	movs	r0, #11
 800358a:	f003 f874 	bl	8006676 <HAL_NVIC_EnableIRQ>

}
 800358e:	46c0      	nop			@ (mov r8, r8)
 8003590:	46bd      	mov	sp, r7
 8003592:	b002      	add	sp, #8
 8003594:	bd80      	pop	{r7, pc}
 8003596:	46c0      	nop			@ (mov r8, r8)
 8003598:	40021000 	.word	0x40021000

0800359c <Gadget_Init>:
    .VOC_measurementEnabled = true,
    .NO_measurementEnabled = false,
    .MIC_measurementEnabled = true
};

void Gadget_Init(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s, UART_HandleTypeDef* espUart) {
 800359c:	b580      	push	{r7, lr}
 800359e:	b084      	sub	sp, #16
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	60f8      	str	r0, [r7, #12]
 80035a4:	60b9      	str	r1, [r7, #8]
 80035a6:	607a      	str	r2, [r7, #4]
  // TODO: Add gadget re-init. So it works after sleep mode again.
  // Check battery power
  // Init sensor + peripherals
  Meas_SetEnabledSensors(SensorSetTest);
 80035a8:	4b0b      	ldr	r3, [pc, #44]	@ (80035d8 <Gadget_Init+0x3c>)
 80035aa:	6818      	ldr	r0, [r3, #0]
 80035ac:	f000 fdcc 	bl	8004148 <Meas_SetEnabledSensors>
  Meas_Init(sensorI2C, micI2s);
 80035b0:	68ba      	ldr	r2, [r7, #8]
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	0011      	movs	r1, r2
 80035b6:	0018      	movs	r0, r3
 80035b8:	f000 fc1c 	bl	8003df4 <Meas_Init>
  ESP_Init(espUart);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	0018      	movs	r0, r3
 80035c0:	f7ff ff46 	bl	8003450 <ESP_Init>
//  Gadget_SetSleepDuration();
  Info("Gadget initialised.");
 80035c4:	4a05      	ldr	r2, [pc, #20]	@ (80035dc <Gadget_Init+0x40>)
 80035c6:	4b06      	ldr	r3, [pc, #24]	@ (80035e0 <Gadget_Init+0x44>)
 80035c8:	0019      	movs	r1, r3
 80035ca:	2002      	movs	r0, #2
 80035cc:	f002 fb46 	bl	8005c5c <CreateLine>
}
 80035d0:	46c0      	nop			@ (mov r8, r8)
 80035d2:	46bd      	mov	sp, r7
 80035d4:	b004      	add	sp, #16
 80035d6:	bd80      	pop	{r7, pc}
 80035d8:	20000230 	.word	0x20000230
 80035dc:	0800e420 	.word	0x0800e420
 80035e0:	0800e434 	.word	0x0800e434

080035e4 <UpkeepGadget>:

void Gadget_ReInit(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s) {

}

void UpkeepGadget() {
 80035e4:	b580      	push	{r7, lr}
 80035e6:	af00      	add	r7, sp, #0
   * 	Yes: create data format
   * 	Transmit data
   * 	Close connection
   * 	Disable ESP
   */
  Meas_Upkeep();
 80035e8:	f000 fd60 	bl	80040ac <Meas_Upkeep>
//  }
//  if(Battery) {
//    Meas_SetEnabledSensors(SensorSetBatt);
//  }

}
 80035ec:	46c0      	nop			@ (mov r8, r8)
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}

080035f2 <Gas_Init>:

#include "gasSensor.h"
#include "stm32l0xx_it.h"
#include "utils.h"

void Gas_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 80035f2:	b580      	push	{r7, lr}
 80035f4:	b082      	sub	sp, #8
 80035f6:	af00      	add	r7, sp, #0
 80035f8:	6078      	str	r0, [r7, #4]
 80035fa:	6039      	str	r1, [r7, #0]
  SGP_Init(readFunction, writeFunction);
 80035fc:	683a      	ldr	r2, [r7, #0]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	0011      	movs	r1, r2
 8003602:	0018      	movs	r0, r3
 8003604:	f001 fdf0 	bl	80051e8 <SGP_Init>
}
 8003608:	46c0      	nop			@ (mov r8, r8)
 800360a:	46bd      	mov	sp, r7
 800360c:	b002      	add	sp, #8
 800360e:	bd80      	pop	{r7, pc}

08003610 <Gas_StartMeasurement>:

void Gas_StartMeasurement(void){
 8003610:	b580      	push	{r7, lr}
 8003612:	af00      	add	r7, sp, #0
  SGP_StartMeasurement();
 8003614:	f001 fe02 	bl	800521c <SGP_StartMeasurement>
}
 8003618:	46c0      	nop			@ (mov r8, r8)
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}

0800361e <Gas_GetMeasurementValues>:

bool Gas_GetMeasurementValues(int32_t* vocIndex) {
 800361e:	b580      	push	{r7, lr}
 8003620:	b082      	sub	sp, #8
 8003622:	af00      	add	r7, sp, #0
 8003624:	6078      	str	r0, [r7, #4]
  return SGP_GetMeasurementValues(vocIndex);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	0018      	movs	r0, r3
 800362a:	f001 fe4f 	bl	80052cc <SGP_GetMeasurementValues>
 800362e:	0003      	movs	r3, r0
}
 8003630:	0018      	movs	r0, r3
 8003632:	46bd      	mov	sp, r7
 8003634:	b002      	add	sp, #8
 8003636:	bd80      	pop	{r7, pc}

08003638 <Gas_DeviceConnected>:

bool Gas_DeviceConnected(void) {
 8003638:	b580      	push	{r7, lr}
 800363a:	af00      	add	r7, sp, #0
  return SGP_DeviceConnected();
 800363c:	f001 ff50 	bl	80054e0 <SGP_DeviceConnected>
 8003640:	0003      	movs	r3, r0
}
 8003642:	0018      	movs	r0, r3
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}

08003648 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8003648:	b590      	push	{r4, r7, lr}
 800364a:	b08b      	sub	sp, #44	@ 0x2c
 800364c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800364e:	2414      	movs	r4, #20
 8003650:	193b      	adds	r3, r7, r4
 8003652:	0018      	movs	r0, r3
 8003654:	2314      	movs	r3, #20
 8003656:	001a      	movs	r2, r3
 8003658:	2100      	movs	r1, #0
 800365a:	f008 fb89 	bl	800bd70 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800365e:	4b79      	ldr	r3, [pc, #484]	@ (8003844 <MX_GPIO_Init+0x1fc>)
 8003660:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003662:	4b78      	ldr	r3, [pc, #480]	@ (8003844 <MX_GPIO_Init+0x1fc>)
 8003664:	2104      	movs	r1, #4
 8003666:	430a      	orrs	r2, r1
 8003668:	62da      	str	r2, [r3, #44]	@ 0x2c
 800366a:	4b76      	ldr	r3, [pc, #472]	@ (8003844 <MX_GPIO_Init+0x1fc>)
 800366c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800366e:	2204      	movs	r2, #4
 8003670:	4013      	ands	r3, r2
 8003672:	613b      	str	r3, [r7, #16]
 8003674:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003676:	4b73      	ldr	r3, [pc, #460]	@ (8003844 <MX_GPIO_Init+0x1fc>)
 8003678:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800367a:	4b72      	ldr	r3, [pc, #456]	@ (8003844 <MX_GPIO_Init+0x1fc>)
 800367c:	2180      	movs	r1, #128	@ 0x80
 800367e:	430a      	orrs	r2, r1
 8003680:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003682:	4b70      	ldr	r3, [pc, #448]	@ (8003844 <MX_GPIO_Init+0x1fc>)
 8003684:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003686:	2280      	movs	r2, #128	@ 0x80
 8003688:	4013      	ands	r3, r2
 800368a:	60fb      	str	r3, [r7, #12]
 800368c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800368e:	4b6d      	ldr	r3, [pc, #436]	@ (8003844 <MX_GPIO_Init+0x1fc>)
 8003690:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003692:	4b6c      	ldr	r3, [pc, #432]	@ (8003844 <MX_GPIO_Init+0x1fc>)
 8003694:	2101      	movs	r1, #1
 8003696:	430a      	orrs	r2, r1
 8003698:	62da      	str	r2, [r3, #44]	@ 0x2c
 800369a:	4b6a      	ldr	r3, [pc, #424]	@ (8003844 <MX_GPIO_Init+0x1fc>)
 800369c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800369e:	2201      	movs	r2, #1
 80036a0:	4013      	ands	r3, r2
 80036a2:	60bb      	str	r3, [r7, #8]
 80036a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80036a6:	4b67      	ldr	r3, [pc, #412]	@ (8003844 <MX_GPIO_Init+0x1fc>)
 80036a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036aa:	4b66      	ldr	r3, [pc, #408]	@ (8003844 <MX_GPIO_Init+0x1fc>)
 80036ac:	2102      	movs	r1, #2
 80036ae:	430a      	orrs	r2, r1
 80036b0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80036b2:	4b64      	ldr	r3, [pc, #400]	@ (8003844 <MX_GPIO_Init+0x1fc>)
 80036b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036b6:	2202      	movs	r2, #2
 80036b8:	4013      	ands	r3, r2
 80036ba:	607b      	str	r3, [r7, #4]
 80036bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80036be:	4b61      	ldr	r3, [pc, #388]	@ (8003844 <MX_GPIO_Init+0x1fc>)
 80036c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036c2:	4b60      	ldr	r3, [pc, #384]	@ (8003844 <MX_GPIO_Init+0x1fc>)
 80036c4:	2108      	movs	r1, #8
 80036c6:	430a      	orrs	r2, r1
 80036c8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80036ca:	4b5e      	ldr	r3, [pc, #376]	@ (8003844 <MX_GPIO_Init+0x1fc>)
 80036cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036ce:	2208      	movs	r2, #8
 80036d0:	4013      	ands	r3, r2
 80036d2:	603b      	str	r3, [r7, #0]
 80036d4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MIC_Trigger_GPIO_Port, MIC_Trigger_Pin, GPIO_PIN_RESET);
 80036d6:	2380      	movs	r3, #128	@ 0x80
 80036d8:	00db      	lsls	r3, r3, #3
 80036da:	485b      	ldr	r0, [pc, #364]	@ (8003848 <MX_GPIO_Init+0x200>)
 80036dc:	2200      	movs	r2, #0
 80036de:	0019      	movs	r1, r3
 80036e0:	f003 fbb2 	bl	8006e48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(STATUS_LED_GPIO_Port, STATUS_LED_Pin, GPIO_PIN_RESET);
 80036e4:	2380      	movs	r3, #128	@ 0x80
 80036e6:	005b      	lsls	r3, r3, #1
 80036e8:	4858      	ldr	r0, [pc, #352]	@ (800384c <MX_GPIO_Init+0x204>)
 80036ea:	2200      	movs	r2, #0
 80036ec:	0019      	movs	r1, r3
 80036ee:	f003 fbab 	bl	8006e48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Wireless_EN_GPIO_Port, Wireless_EN_Pin, GPIO_PIN_SET);
 80036f2:	2380      	movs	r3, #128	@ 0x80
 80036f4:	0219      	lsls	r1, r3, #8
 80036f6:	23a0      	movs	r3, #160	@ 0xa0
 80036f8:	05db      	lsls	r3, r3, #23
 80036fa:	2201      	movs	r2, #1
 80036fc:	0018      	movs	r0, r3
 80036fe:	f003 fba3 	bl	8006e48 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC0 PC1 PC2
                           PC3 PC4 PC5 PC6
                           PC7 PC9 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
 8003702:	193b      	adds	r3, r7, r4
 8003704:	4a52      	ldr	r2, [pc, #328]	@ (8003850 <MX_GPIO_Init+0x208>)
 8003706:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003708:	193b      	adds	r3, r7, r4
 800370a:	2203      	movs	r2, #3
 800370c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800370e:	193b      	adds	r3, r7, r4
 8003710:	2200      	movs	r2, #0
 8003712:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003714:	193b      	adds	r3, r7, r4
 8003716:	4a4d      	ldr	r2, [pc, #308]	@ (800384c <MX_GPIO_Init+0x204>)
 8003718:	0019      	movs	r1, r3
 800371a:	0010      	movs	r0, r2
 800371c:	f003 fa16 	bl	8006b4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003720:	193b      	adds	r3, r7, r4
 8003722:	2203      	movs	r2, #3
 8003724:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003726:	193b      	adds	r3, r7, r4
 8003728:	2203      	movs	r2, #3
 800372a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800372c:	193b      	adds	r3, r7, r4
 800372e:	2200      	movs	r2, #0
 8003730:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003732:	193b      	adds	r3, r7, r4
 8003734:	4a47      	ldr	r2, [pc, #284]	@ (8003854 <MX_GPIO_Init+0x20c>)
 8003736:	0019      	movs	r1, r3
 8003738:	0010      	movs	r0, r2
 800373a:	f003 fa07 	bl	8006b4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA2 PA3 PA4
                           PA5 PA6 PA7 PA8
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 800373e:	193b      	adds	r3, r7, r4
 8003740:	4a45      	ldr	r2, [pc, #276]	@ (8003858 <MX_GPIO_Init+0x210>)
 8003742:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003744:	193b      	adds	r3, r7, r4
 8003746:	2203      	movs	r2, #3
 8003748:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800374a:	193b      	adds	r3, r7, r4
 800374c:	2200      	movs	r2, #0
 800374e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003750:	193a      	adds	r2, r7, r4
 8003752:	23a0      	movs	r3, #160	@ 0xa0
 8003754:	05db      	lsls	r3, r3, #23
 8003756:	0011      	movs	r1, r2
 8003758:	0018      	movs	r0, r3
 800375a:	f003 f9f7 	bl	8006b4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB11
                           PB14 PB3 PB4 PB5
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_11
 800375e:	193b      	adds	r3, r7, r4
 8003760:	4a3e      	ldr	r2, [pc, #248]	@ (800385c <MX_GPIO_Init+0x214>)
 8003762:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_14|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003764:	193b      	adds	r3, r7, r4
 8003766:	2203      	movs	r2, #3
 8003768:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800376a:	193b      	adds	r3, r7, r4
 800376c:	2200      	movs	r2, #0
 800376e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003770:	193b      	adds	r3, r7, r4
 8003772:	4a35      	ldr	r2, [pc, #212]	@ (8003848 <MX_GPIO_Init+0x200>)
 8003774:	0019      	movs	r1, r3
 8003776:	0010      	movs	r0, r2
 8003778:	f003 f9e8 	bl	8006b4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MIC_Trigger_Pin;
 800377c:	0021      	movs	r1, r4
 800377e:	187b      	adds	r3, r7, r1
 8003780:	2280      	movs	r2, #128	@ 0x80
 8003782:	00d2      	lsls	r2, r2, #3
 8003784:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003786:	000c      	movs	r4, r1
 8003788:	193b      	adds	r3, r7, r4
 800378a:	2201      	movs	r2, #1
 800378c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800378e:	193b      	adds	r3, r7, r4
 8003790:	2200      	movs	r2, #0
 8003792:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003794:	193b      	adds	r3, r7, r4
 8003796:	2203      	movs	r2, #3
 8003798:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(MIC_Trigger_GPIO_Port, &GPIO_InitStruct);
 800379a:	193b      	adds	r3, r7, r4
 800379c:	4a2a      	ldr	r2, [pc, #168]	@ (8003848 <MX_GPIO_Init+0x200>)
 800379e:	0019      	movs	r1, r3
 80037a0:	0010      	movs	r0, r2
 80037a2:	f003 f9d3 	bl	8006b4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = STATUS_LED_Pin;
 80037a6:	0021      	movs	r1, r4
 80037a8:	187b      	adds	r3, r7, r1
 80037aa:	2280      	movs	r2, #128	@ 0x80
 80037ac:	0052      	lsls	r2, r2, #1
 80037ae:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80037b0:	000c      	movs	r4, r1
 80037b2:	193b      	adds	r3, r7, r4
 80037b4:	2201      	movs	r2, #1
 80037b6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037b8:	193b      	adds	r3, r7, r4
 80037ba:	2200      	movs	r2, #0
 80037bc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037be:	193b      	adds	r3, r7, r4
 80037c0:	2200      	movs	r2, #0
 80037c2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(STATUS_LED_GPIO_Port, &GPIO_InitStruct);
 80037c4:	193b      	adds	r3, r7, r4
 80037c6:	4a21      	ldr	r2, [pc, #132]	@ (800384c <MX_GPIO_Init+0x204>)
 80037c8:	0019      	movs	r1, r3
 80037ca:	0010      	movs	r0, r2
 80037cc:	f003 f9be 	bl	8006b4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Wireless_EN_Pin;
 80037d0:	0021      	movs	r1, r4
 80037d2:	187b      	adds	r3, r7, r1
 80037d4:	2280      	movs	r2, #128	@ 0x80
 80037d6:	0212      	lsls	r2, r2, #8
 80037d8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80037da:	000c      	movs	r4, r1
 80037dc:	193b      	adds	r3, r7, r4
 80037de:	2201      	movs	r2, #1
 80037e0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037e2:	193b      	adds	r3, r7, r4
 80037e4:	2200      	movs	r2, #0
 80037e6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037e8:	193b      	adds	r3, r7, r4
 80037ea:	2200      	movs	r2, #0
 80037ec:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(Wireless_EN_GPIO_Port, &GPIO_InitStruct);
 80037ee:	193a      	adds	r2, r7, r4
 80037f0:	23a0      	movs	r3, #160	@ 0xa0
 80037f2:	05db      	lsls	r3, r3, #23
 80037f4:	0011      	movs	r1, r2
 80037f6:	0018      	movs	r0, r3
 80037f8:	f003 f9a8 	bl	8006b4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80037fc:	193b      	adds	r3, r7, r4
 80037fe:	2204      	movs	r2, #4
 8003800:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003802:	193b      	adds	r3, r7, r4
 8003804:	2203      	movs	r2, #3
 8003806:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003808:	193b      	adds	r3, r7, r4
 800380a:	2200      	movs	r2, #0
 800380c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800380e:	193b      	adds	r3, r7, r4
 8003810:	4a13      	ldr	r2, [pc, #76]	@ (8003860 <MX_GPIO_Init+0x218>)
 8003812:	0019      	movs	r1, r3
 8003814:	0010      	movs	r0, r2
 8003816:	f003 f999 	bl	8006b4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Wireless_PG_Pin;
 800381a:	0021      	movs	r1, r4
 800381c:	187b      	adds	r3, r7, r1
 800381e:	2280      	movs	r2, #128	@ 0x80
 8003820:	0052      	lsls	r2, r2, #1
 8003822:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003824:	187b      	adds	r3, r7, r1
 8003826:	2200      	movs	r2, #0
 8003828:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800382a:	187b      	adds	r3, r7, r1
 800382c:	2200      	movs	r2, #0
 800382e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Wireless_PG_GPIO_Port, &GPIO_InitStruct);
 8003830:	187b      	adds	r3, r7, r1
 8003832:	4a05      	ldr	r2, [pc, #20]	@ (8003848 <MX_GPIO_Init+0x200>)
 8003834:	0019      	movs	r1, r3
 8003836:	0010      	movs	r0, r2
 8003838:	f003 f988 	bl	8006b4c <HAL_GPIO_Init>

}
 800383c:	46c0      	nop			@ (mov r8, r8)
 800383e:	46bd      	mov	sp, r7
 8003840:	b00b      	add	sp, #44	@ 0x2c
 8003842:	bd90      	pop	{r4, r7, pc}
 8003844:	40021000 	.word	0x40021000
 8003848:	50000400 	.word	0x50000400
 800384c:	50000800 	.word	0x50000800
 8003850:	00003aff 	.word	0x00003aff
 8003854:	50001c00 	.word	0x50001c00
 8003858:	000011fd 	.word	0x000011fd
 800385c:	00004a3f 	.word	0x00004a3f
 8003860:	50000c00 	.word	0x50000c00

08003864 <HT_Init>:
#include <stdlib.h>
#include "humidTemp.h"
#include "utils.h"
#include "wsenHIDS.h"

void HT_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 8003864:	b580      	push	{r7, lr}
 8003866:	b082      	sub	sp, #8
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
 800386c:	6039      	str	r1, [r7, #0]
  HIDS_Init(readFunction, writeFunction);
 800386e:	683a      	ldr	r2, [r7, #0]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	0011      	movs	r1, r2
 8003874:	0018      	movs	r0, r3
 8003876:	f002 fb49 	bl	8005f0c <HIDS_Init>
}
 800387a:	46c0      	nop			@ (mov r8, r8)
 800387c:	46bd      	mov	sp, r7
 800387e:	b002      	add	sp, #8
 8003880:	bd80      	pop	{r7, pc}

08003882 <HT_StartMeasurement>:

void HT_StartMeasurement() {
 8003882:	b580      	push	{r7, lr}
 8003884:	af00      	add	r7, sp, #0
  HIDS_StartMeasurement();
 8003886:	f002 fb63 	bl	8005f50 <HIDS_StartMeasurement>
}
 800388a:	46c0      	nop			@ (mov r8, r8)
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}

08003890 <HT_GetMeasurementValues>:

void HT_SetMeasurementDuration(uint32_t duration) {
  HIDS_SetMeasurementDuration(duration);
}

bool HT_GetMeasurementValues(float* humidity_perc, float* temperature) {
 8003890:	b580      	push	{r7, lr}
 8003892:	b082      	sub	sp, #8
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
 8003898:	6039      	str	r1, [r7, #0]
  return HIDS_GetMeasurementValues(humidity_perc, temperature);
 800389a:	683a      	ldr	r2, [r7, #0]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	0011      	movs	r1, r2
 80038a0:	0018      	movs	r0, r3
 80038a2:	f002 fc31 	bl	8006108 <HIDS_GetMeasurementValues>
 80038a6:	0003      	movs	r3, r0
}
 80038a8:	0018      	movs	r0, r3
 80038aa:	46bd      	mov	sp, r7
 80038ac:	b002      	add	sp, #8
 80038ae:	bd80      	pop	{r7, pc}

080038b0 <HT_DeviceConnected>:

bool HT_DeviceConnected() {
 80038b0:	b580      	push	{r7, lr}
 80038b2:	af00      	add	r7, sp, #0
  return HIDS_DeviceConnected();
 80038b4:	f002 fbcc 	bl	8006050 <HIDS_DeviceConnected>
 80038b8:	0003      	movs	r3, r0
}
 80038ba:	0018      	movs	r0, r3
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}

080038c0 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80038c4:	4b1b      	ldr	r3, [pc, #108]	@ (8003934 <MX_I2C1_Init+0x74>)
 80038c6:	4a1c      	ldr	r2, [pc, #112]	@ (8003938 <MX_I2C1_Init+0x78>)
 80038c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 80038ca:	4b1a      	ldr	r3, [pc, #104]	@ (8003934 <MX_I2C1_Init+0x74>)
 80038cc:	4a1b      	ldr	r2, [pc, #108]	@ (800393c <MX_I2C1_Init+0x7c>)
 80038ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80038d0:	4b18      	ldr	r3, [pc, #96]	@ (8003934 <MX_I2C1_Init+0x74>)
 80038d2:	2200      	movs	r2, #0
 80038d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80038d6:	4b17      	ldr	r3, [pc, #92]	@ (8003934 <MX_I2C1_Init+0x74>)
 80038d8:	2201      	movs	r2, #1
 80038da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80038dc:	4b15      	ldr	r3, [pc, #84]	@ (8003934 <MX_I2C1_Init+0x74>)
 80038de:	2200      	movs	r2, #0
 80038e0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80038e2:	4b14      	ldr	r3, [pc, #80]	@ (8003934 <MX_I2C1_Init+0x74>)
 80038e4:	2200      	movs	r2, #0
 80038e6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80038e8:	4b12      	ldr	r3, [pc, #72]	@ (8003934 <MX_I2C1_Init+0x74>)
 80038ea:	2200      	movs	r2, #0
 80038ec:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80038ee:	4b11      	ldr	r3, [pc, #68]	@ (8003934 <MX_I2C1_Init+0x74>)
 80038f0:	2200      	movs	r2, #0
 80038f2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80038f4:	4b0f      	ldr	r3, [pc, #60]	@ (8003934 <MX_I2C1_Init+0x74>)
 80038f6:	2200      	movs	r2, #0
 80038f8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80038fa:	4b0e      	ldr	r3, [pc, #56]	@ (8003934 <MX_I2C1_Init+0x74>)
 80038fc:	0018      	movs	r0, r3
 80038fe:	f003 fadb 	bl	8006eb8 <HAL_I2C_Init>
 8003902:	1e03      	subs	r3, r0, #0
 8003904:	d001      	beq.n	800390a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8003906:	f000 fa23 	bl	8003d50 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800390a:	4b0a      	ldr	r3, [pc, #40]	@ (8003934 <MX_I2C1_Init+0x74>)
 800390c:	2100      	movs	r1, #0
 800390e:	0018      	movs	r0, r3
 8003910:	f005 fa4a 	bl	8008da8 <HAL_I2CEx_ConfigAnalogFilter>
 8003914:	1e03      	subs	r3, r0, #0
 8003916:	d001      	beq.n	800391c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003918:	f000 fa1a 	bl	8003d50 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800391c:	4b05      	ldr	r3, [pc, #20]	@ (8003934 <MX_I2C1_Init+0x74>)
 800391e:	2100      	movs	r1, #0
 8003920:	0018      	movs	r0, r3
 8003922:	f005 fa8d 	bl	8008e40 <HAL_I2CEx_ConfigDigitalFilter>
 8003926:	1e03      	subs	r3, r0, #0
 8003928:	d001      	beq.n	800392e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800392a:	f000 fa11 	bl	8003d50 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800392e:	46c0      	nop			@ (mov r8, r8)
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}
 8003934:	20000234 	.word	0x20000234
 8003938:	40005400 	.word	0x40005400
 800393c:	00303d5b 	.word	0x00303d5b

08003940 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003940:	b590      	push	{r4, r7, lr}
 8003942:	b089      	sub	sp, #36	@ 0x24
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003948:	240c      	movs	r4, #12
 800394a:	193b      	adds	r3, r7, r4
 800394c:	0018      	movs	r0, r3
 800394e:	2314      	movs	r3, #20
 8003950:	001a      	movs	r2, r3
 8003952:	2100      	movs	r1, #0
 8003954:	f008 fa0c 	bl	800bd70 <memset>
  if(i2cHandle->Instance==I2C1)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a45      	ldr	r2, [pc, #276]	@ (8003a74 <HAL_I2C_MspInit+0x134>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d000      	beq.n	8003964 <HAL_I2C_MspInit+0x24>
 8003962:	e082      	b.n	8003a6a <HAL_I2C_MspInit+0x12a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003964:	4b44      	ldr	r3, [pc, #272]	@ (8003a78 <HAL_I2C_MspInit+0x138>)
 8003966:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003968:	4b43      	ldr	r3, [pc, #268]	@ (8003a78 <HAL_I2C_MspInit+0x138>)
 800396a:	2102      	movs	r1, #2
 800396c:	430a      	orrs	r2, r1
 800396e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003970:	4b41      	ldr	r3, [pc, #260]	@ (8003a78 <HAL_I2C_MspInit+0x138>)
 8003972:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003974:	2202      	movs	r2, #2
 8003976:	4013      	ands	r3, r2
 8003978:	60bb      	str	r3, [r7, #8]
 800397a:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800397c:	0021      	movs	r1, r4
 800397e:	187b      	adds	r3, r7, r1
 8003980:	22c0      	movs	r2, #192	@ 0xc0
 8003982:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003984:	187b      	adds	r3, r7, r1
 8003986:	2212      	movs	r2, #18
 8003988:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800398a:	187b      	adds	r3, r7, r1
 800398c:	2200      	movs	r2, #0
 800398e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003990:	187b      	adds	r3, r7, r1
 8003992:	2203      	movs	r2, #3
 8003994:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8003996:	187b      	adds	r3, r7, r1
 8003998:	2201      	movs	r2, #1
 800399a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800399c:	187b      	adds	r3, r7, r1
 800399e:	4a37      	ldr	r2, [pc, #220]	@ (8003a7c <HAL_I2C_MspInit+0x13c>)
 80039a0:	0019      	movs	r1, r3
 80039a2:	0010      	movs	r0, r2
 80039a4:	f003 f8d2 	bl	8006b4c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80039a8:	4b33      	ldr	r3, [pc, #204]	@ (8003a78 <HAL_I2C_MspInit+0x138>)
 80039aa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80039ac:	4b32      	ldr	r3, [pc, #200]	@ (8003a78 <HAL_I2C_MspInit+0x138>)
 80039ae:	2180      	movs	r1, #128	@ 0x80
 80039b0:	0389      	lsls	r1, r1, #14
 80039b2:	430a      	orrs	r2, r1
 80039b4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel3;
 80039b6:	4b32      	ldr	r3, [pc, #200]	@ (8003a80 <HAL_I2C_MspInit+0x140>)
 80039b8:	4a32      	ldr	r2, [pc, #200]	@ (8003a84 <HAL_I2C_MspInit+0x144>)
 80039ba:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_6;
 80039bc:	4b30      	ldr	r3, [pc, #192]	@ (8003a80 <HAL_I2C_MspInit+0x140>)
 80039be:	2206      	movs	r2, #6
 80039c0:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80039c2:	4b2f      	ldr	r3, [pc, #188]	@ (8003a80 <HAL_I2C_MspInit+0x140>)
 80039c4:	2200      	movs	r2, #0
 80039c6:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80039c8:	4b2d      	ldr	r3, [pc, #180]	@ (8003a80 <HAL_I2C_MspInit+0x140>)
 80039ca:	2200      	movs	r2, #0
 80039cc:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80039ce:	4b2c      	ldr	r3, [pc, #176]	@ (8003a80 <HAL_I2C_MspInit+0x140>)
 80039d0:	2280      	movs	r2, #128	@ 0x80
 80039d2:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80039d4:	4b2a      	ldr	r3, [pc, #168]	@ (8003a80 <HAL_I2C_MspInit+0x140>)
 80039d6:	2200      	movs	r2, #0
 80039d8:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80039da:	4b29      	ldr	r3, [pc, #164]	@ (8003a80 <HAL_I2C_MspInit+0x140>)
 80039dc:	2200      	movs	r2, #0
 80039de:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80039e0:	4b27      	ldr	r3, [pc, #156]	@ (8003a80 <HAL_I2C_MspInit+0x140>)
 80039e2:	2200      	movs	r2, #0
 80039e4:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80039e6:	4b26      	ldr	r3, [pc, #152]	@ (8003a80 <HAL_I2C_MspInit+0x140>)
 80039e8:	2200      	movs	r2, #0
 80039ea:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80039ec:	4b24      	ldr	r3, [pc, #144]	@ (8003a80 <HAL_I2C_MspInit+0x140>)
 80039ee:	0018      	movs	r0, r3
 80039f0:	f002 fe5e 	bl	80066b0 <HAL_DMA_Init>
 80039f4:	1e03      	subs	r3, r0, #0
 80039f6:	d001      	beq.n	80039fc <HAL_I2C_MspInit+0xbc>
    {
      Error_Handler();
 80039f8:	f000 f9aa 	bl	8003d50 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	4a20      	ldr	r2, [pc, #128]	@ (8003a80 <HAL_I2C_MspInit+0x140>)
 8003a00:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003a02:	4b1f      	ldr	r3, [pc, #124]	@ (8003a80 <HAL_I2C_MspInit+0x140>)
 8003a04:	687a      	ldr	r2, [r7, #4]
 8003a06:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel2;
 8003a08:	4b1f      	ldr	r3, [pc, #124]	@ (8003a88 <HAL_I2C_MspInit+0x148>)
 8003a0a:	4a20      	ldr	r2, [pc, #128]	@ (8003a8c <HAL_I2C_MspInit+0x14c>)
 8003a0c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_6;
 8003a0e:	4b1e      	ldr	r3, [pc, #120]	@ (8003a88 <HAL_I2C_MspInit+0x148>)
 8003a10:	2206      	movs	r2, #6
 8003a12:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003a14:	4b1c      	ldr	r3, [pc, #112]	@ (8003a88 <HAL_I2C_MspInit+0x148>)
 8003a16:	2210      	movs	r2, #16
 8003a18:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003a1a:	4b1b      	ldr	r3, [pc, #108]	@ (8003a88 <HAL_I2C_MspInit+0x148>)
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003a20:	4b19      	ldr	r3, [pc, #100]	@ (8003a88 <HAL_I2C_MspInit+0x148>)
 8003a22:	2280      	movs	r2, #128	@ 0x80
 8003a24:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003a26:	4b18      	ldr	r3, [pc, #96]	@ (8003a88 <HAL_I2C_MspInit+0x148>)
 8003a28:	2200      	movs	r2, #0
 8003a2a:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003a2c:	4b16      	ldr	r3, [pc, #88]	@ (8003a88 <HAL_I2C_MspInit+0x148>)
 8003a2e:	2200      	movs	r2, #0
 8003a30:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8003a32:	4b15      	ldr	r3, [pc, #84]	@ (8003a88 <HAL_I2C_MspInit+0x148>)
 8003a34:	2200      	movs	r2, #0
 8003a36:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003a38:	4b13      	ldr	r3, [pc, #76]	@ (8003a88 <HAL_I2C_MspInit+0x148>)
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8003a3e:	4b12      	ldr	r3, [pc, #72]	@ (8003a88 <HAL_I2C_MspInit+0x148>)
 8003a40:	0018      	movs	r0, r3
 8003a42:	f002 fe35 	bl	80066b0 <HAL_DMA_Init>
 8003a46:	1e03      	subs	r3, r0, #0
 8003a48:	d001      	beq.n	8003a4e <HAL_I2C_MspInit+0x10e>
    {
      Error_Handler();
 8003a4a:	f000 f981 	bl	8003d50 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	4a0d      	ldr	r2, [pc, #52]	@ (8003a88 <HAL_I2C_MspInit+0x148>)
 8003a52:	639a      	str	r2, [r3, #56]	@ 0x38
 8003a54:	4b0c      	ldr	r3, [pc, #48]	@ (8003a88 <HAL_I2C_MspInit+0x148>)
 8003a56:	687a      	ldr	r2, [r7, #4]
 8003a58:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	2100      	movs	r1, #0
 8003a5e:	2017      	movs	r0, #23
 8003a60:	f002 fdf4 	bl	800664c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 8003a64:	2017      	movs	r0, #23
 8003a66:	f002 fe06 	bl	8006676 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8003a6a:	46c0      	nop			@ (mov r8, r8)
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	b009      	add	sp, #36	@ 0x24
 8003a70:	bd90      	pop	{r4, r7, pc}
 8003a72:	46c0      	nop			@ (mov r8, r8)
 8003a74:	40005400 	.word	0x40005400
 8003a78:	40021000 	.word	0x40021000
 8003a7c:	50000400 	.word	0x50000400
 8003a80:	20000288 	.word	0x20000288
 8003a84:	40020030 	.word	0x40020030
 8003a88:	200002d0 	.word	0x200002d0
 8003a8c:	4002001c 	.word	0x4002001c

08003a90 <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
DMA_HandleTypeDef hdma_spi2_rx;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8003a94:	4b10      	ldr	r3, [pc, #64]	@ (8003ad8 <MX_I2S2_Init+0x48>)
 8003a96:	4a11      	ldr	r2, [pc, #68]	@ (8003adc <MX_I2S2_Init+0x4c>)
 8003a98:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 8003a9a:	4b0f      	ldr	r3, [pc, #60]	@ (8003ad8 <MX_I2S2_Init+0x48>)
 8003a9c:	22c0      	movs	r2, #192	@ 0xc0
 8003a9e:	0092      	lsls	r2, r2, #2
 8003aa0:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_MSB;
 8003aa2:	4b0d      	ldr	r3, [pc, #52]	@ (8003ad8 <MX_I2S2_Init+0x48>)
 8003aa4:	2210      	movs	r2, #16
 8003aa6:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_32B;
 8003aa8:	4b0b      	ldr	r3, [pc, #44]	@ (8003ad8 <MX_I2S2_Init+0x48>)
 8003aaa:	2205      	movs	r2, #5
 8003aac:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8003aae:	4b0a      	ldr	r3, [pc, #40]	@ (8003ad8 <MX_I2S2_Init+0x48>)
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 8003ab4:	4b08      	ldr	r3, [pc, #32]	@ (8003ad8 <MX_I2S2_Init+0x48>)
 8003ab6:	22fa      	movs	r2, #250	@ 0xfa
 8003ab8:	0152      	lsls	r2, r2, #5
 8003aba:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_HIGH;
 8003abc:	4b06      	ldr	r3, [pc, #24]	@ (8003ad8 <MX_I2S2_Init+0x48>)
 8003abe:	2208      	movs	r2, #8
 8003ac0:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8003ac2:	4b05      	ldr	r3, [pc, #20]	@ (8003ad8 <MX_I2S2_Init+0x48>)
 8003ac4:	0018      	movs	r0, r3
 8003ac6:	f005 fa07 	bl	8008ed8 <HAL_I2S_Init>
 8003aca:	1e03      	subs	r3, r0, #0
 8003acc:	d001      	beq.n	8003ad2 <MX_I2S2_Init+0x42>
  {
    Error_Handler();
 8003ace:	f000 f93f 	bl	8003d50 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8003ad2:	46c0      	nop			@ (mov r8, r8)
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}
 8003ad8:	20000318 	.word	0x20000318
 8003adc:	40003800 	.word	0x40003800

08003ae0 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8003ae0:	b590      	push	{r4, r7, lr}
 8003ae2:	b089      	sub	sp, #36	@ 0x24
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ae8:	240c      	movs	r4, #12
 8003aea:	193b      	adds	r3, r7, r4
 8003aec:	0018      	movs	r0, r3
 8003aee:	2314      	movs	r3, #20
 8003af0:	001a      	movs	r2, r3
 8003af2:	2100      	movs	r1, #0
 8003af4:	f008 f93c 	bl	800bd70 <memset>
  if(i2sHandle->Instance==SPI2)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a2d      	ldr	r2, [pc, #180]	@ (8003bb4 <HAL_I2S_MspInit+0xd4>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d154      	bne.n	8003bac <HAL_I2S_MspInit+0xcc>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003b02:	4b2d      	ldr	r3, [pc, #180]	@ (8003bb8 <HAL_I2S_MspInit+0xd8>)
 8003b04:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003b06:	4b2c      	ldr	r3, [pc, #176]	@ (8003bb8 <HAL_I2S_MspInit+0xd8>)
 8003b08:	2180      	movs	r1, #128	@ 0x80
 8003b0a:	01c9      	lsls	r1, r1, #7
 8003b0c:	430a      	orrs	r2, r1
 8003b0e:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b10:	4b29      	ldr	r3, [pc, #164]	@ (8003bb8 <HAL_I2S_MspInit+0xd8>)
 8003b12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b14:	4b28      	ldr	r3, [pc, #160]	@ (8003bb8 <HAL_I2S_MspInit+0xd8>)
 8003b16:	2102      	movs	r1, #2
 8003b18:	430a      	orrs	r2, r1
 8003b1a:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003b1c:	4b26      	ldr	r3, [pc, #152]	@ (8003bb8 <HAL_I2S_MspInit+0xd8>)
 8003b1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b20:	2202      	movs	r2, #2
 8003b22:	4013      	ands	r3, r2
 8003b24:	60bb      	str	r3, [r7, #8]
 8003b26:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8003b28:	193b      	adds	r3, r7, r4
 8003b2a:	22b0      	movs	r2, #176	@ 0xb0
 8003b2c:	0212      	lsls	r2, r2, #8
 8003b2e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b30:	0021      	movs	r1, r4
 8003b32:	187b      	adds	r3, r7, r1
 8003b34:	2202      	movs	r2, #2
 8003b36:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b38:	187b      	adds	r3, r7, r1
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b3e:	187b      	adds	r3, r7, r1
 8003b40:	2200      	movs	r2, #0
 8003b42:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8003b44:	187b      	adds	r3, r7, r1
 8003b46:	2200      	movs	r2, #0
 8003b48:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b4a:	187b      	adds	r3, r7, r1
 8003b4c:	4a1b      	ldr	r2, [pc, #108]	@ (8003bbc <HAL_I2S_MspInit+0xdc>)
 8003b4e:	0019      	movs	r1, r3
 8003b50:	0010      	movs	r0, r2
 8003b52:	f002 fffb 	bl	8006b4c <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel4;
 8003b56:	4b1a      	ldr	r3, [pc, #104]	@ (8003bc0 <HAL_I2S_MspInit+0xe0>)
 8003b58:	4a1a      	ldr	r2, [pc, #104]	@ (8003bc4 <HAL_I2S_MspInit+0xe4>)
 8003b5a:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_2;
 8003b5c:	4b18      	ldr	r3, [pc, #96]	@ (8003bc0 <HAL_I2S_MspInit+0xe0>)
 8003b5e:	2202      	movs	r2, #2
 8003b60:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003b62:	4b17      	ldr	r3, [pc, #92]	@ (8003bc0 <HAL_I2S_MspInit+0xe0>)
 8003b64:	2200      	movs	r2, #0
 8003b66:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003b68:	4b15      	ldr	r3, [pc, #84]	@ (8003bc0 <HAL_I2S_MspInit+0xe0>)
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003b6e:	4b14      	ldr	r3, [pc, #80]	@ (8003bc0 <HAL_I2S_MspInit+0xe0>)
 8003b70:	2280      	movs	r2, #128	@ 0x80
 8003b72:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003b74:	4b12      	ldr	r3, [pc, #72]	@ (8003bc0 <HAL_I2S_MspInit+0xe0>)
 8003b76:	2280      	movs	r2, #128	@ 0x80
 8003b78:	0052      	lsls	r2, r2, #1
 8003b7a:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003b7c:	4b10      	ldr	r3, [pc, #64]	@ (8003bc0 <HAL_I2S_MspInit+0xe0>)
 8003b7e:	2280      	movs	r2, #128	@ 0x80
 8003b80:	00d2      	lsls	r2, r2, #3
 8003b82:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8003b84:	4b0e      	ldr	r3, [pc, #56]	@ (8003bc0 <HAL_I2S_MspInit+0xe0>)
 8003b86:	2220      	movs	r2, #32
 8003b88:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003b8a:	4b0d      	ldr	r3, [pc, #52]	@ (8003bc0 <HAL_I2S_MspInit+0xe0>)
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8003b90:	4b0b      	ldr	r3, [pc, #44]	@ (8003bc0 <HAL_I2S_MspInit+0xe0>)
 8003b92:	0018      	movs	r0, r3
 8003b94:	f002 fd8c 	bl	80066b0 <HAL_DMA_Init>
 8003b98:	1e03      	subs	r3, r0, #0
 8003b9a:	d001      	beq.n	8003ba0 <HAL_I2S_MspInit+0xc0>
    {
      Error_Handler();
 8003b9c:	f000 f8d8 	bl	8003d50 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmarx,hdma_spi2_rx);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	4a07      	ldr	r2, [pc, #28]	@ (8003bc0 <HAL_I2S_MspInit+0xe0>)
 8003ba4:	631a      	str	r2, [r3, #48]	@ 0x30
 8003ba6:	4b06      	ldr	r3, [pc, #24]	@ (8003bc0 <HAL_I2S_MspInit+0xe0>)
 8003ba8:	687a      	ldr	r2, [r7, #4]
 8003baa:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8003bac:	46c0      	nop			@ (mov r8, r8)
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	b009      	add	sp, #36	@ 0x24
 8003bb2:	bd90      	pop	{r4, r7, pc}
 8003bb4:	40003800 	.word	0x40003800
 8003bb8:	40021000 	.word	0x40021000
 8003bbc:	50000400 	.word	0x50000400
 8003bc0:	20000354 	.word	0x20000354
 8003bc4:	40020044 	.word	0x40020044

08003bc8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b082      	sub	sp, #8
 8003bcc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003bce:	f002 fbfd 	bl	80063cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003bd2:	f000 f841 	bl	8003c58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003bd6:	f7ff fd37 	bl	8003648 <MX_GPIO_Init>
  MX_DMA_Init();
 8003bda:	f7ff fcb9 	bl	8003550 <MX_DMA_Init>
  MX_I2C1_Init();
 8003bde:	f7ff fe6f 	bl	80038c0 <MX_I2C1_Init>
  MX_I2S2_Init();
 8003be2:	f7ff ff55 	bl	8003a90 <MX_I2S2_Init>
  MX_USART4_UART_Init();
 8003be6:	f001 ff17 	bl	8005a18 <MX_USART4_UART_Init>
  MX_USART1_UART_Init();
 8003bea:	f001 fee5 	bl	80059b8 <MX_USART1_UART_Init>
  MX_RTC_Init();
 8003bee:	f000 fb93 	bl	8004318 <MX_RTC_Init>
	 * : Default network: Sensor community
	 * : Different modes for outside and inside (check solar?)
	 * : Add CLI via usb-c
	 * : Network not found? Sleep
	 */
  uint32_t LedBlinkTimestamp = HAL_GetTick() + LED_BLINK_INTERVAL;
 8003bf2:	f002 fc51 	bl	8006498 <HAL_GetTick>
 8003bf6:	0003      	movs	r3, r0
 8003bf8:	22fa      	movs	r2, #250	@ 0xfa
 8003bfa:	0092      	lsls	r2, r2, #2
 8003bfc:	4694      	mov	ip, r2
 8003bfe:	4463      	add	r3, ip
 8003c00:	607b      	str	r3, [r7, #4]
  SetVerboseLevel(VERBOSE_ALL);
 8003c02:	2003      	movs	r0, #3
 8003c04:	f002 f8a6 	bl	8005d54 <SetVerboseLevel>
  BinaryReleaseInfo();
 8003c08:	f002 f8bc 	bl	8005d84 <BinaryReleaseInfo>
  Gadget_Init(&hi2c1, &hi2s2, &huart4);
 8003c0c:	4a0e      	ldr	r2, [pc, #56]	@ (8003c48 <main+0x80>)
 8003c0e:	490f      	ldr	r1, [pc, #60]	@ (8003c4c <main+0x84>)
 8003c10:	4b0f      	ldr	r3, [pc, #60]	@ (8003c50 <main+0x88>)
 8003c12:	0018      	movs	r0, r3
 8003c14:	f7ff fcc2 	bl	800359c <Gadget_Init>
  /* USER CODE BEGIN WHILE */
//  MIC_Start(16000, 512);
  while (1) {
//    MIC_GetSample();
	  // Upkeep gadget
    UpkeepGadget();
 8003c18:	f7ff fce4 	bl	80035e4 <UpkeepGadget>

    if(TimestampIsReached(LedBlinkTimestamp)) {
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	0018      	movs	r0, r3
 8003c20:	f001 ffc6 	bl	8005bb0 <TimestampIsReached>
 8003c24:	1e03      	subs	r3, r0, #0
 8003c26:	d0f7      	beq.n	8003c18 <main+0x50>
      HAL_GPIO_TogglePin(STATUS_LED_GPIO_Port, STATUS_LED_Pin);
 8003c28:	2380      	movs	r3, #128	@ 0x80
 8003c2a:	005b      	lsls	r3, r3, #1
 8003c2c:	4a09      	ldr	r2, [pc, #36]	@ (8003c54 <main+0x8c>)
 8003c2e:	0019      	movs	r1, r3
 8003c30:	0010      	movs	r0, r2
 8003c32:	f003 f926 	bl	8006e82 <HAL_GPIO_TogglePin>
      LedBlinkTimestamp = HAL_GetTick() + LED_BLINK_INTERVAL;
 8003c36:	f002 fc2f 	bl	8006498 <HAL_GetTick>
 8003c3a:	0003      	movs	r3, r0
 8003c3c:	22fa      	movs	r2, #250	@ 0xfa
 8003c3e:	0092      	lsls	r2, r2, #2
 8003c40:	4694      	mov	ip, r2
 8003c42:	4463      	add	r3, ip
 8003c44:	607b      	str	r3, [r7, #4]
    UpkeepGadget();
 8003c46:	e7e7      	b.n	8003c18 <main+0x50>
 8003c48:	2000066c 	.word	0x2000066c
 8003c4c:	20000318 	.word	0x20000318
 8003c50:	20000234 	.word	0x20000234
 8003c54:	50000800 	.word	0x50000800

08003c58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003c58:	b590      	push	{r4, r7, lr}
 8003c5a:	b09d      	sub	sp, #116	@ 0x74
 8003c5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003c5e:	2438      	movs	r4, #56	@ 0x38
 8003c60:	193b      	adds	r3, r7, r4
 8003c62:	0018      	movs	r0, r3
 8003c64:	2338      	movs	r3, #56	@ 0x38
 8003c66:	001a      	movs	r2, r3
 8003c68:	2100      	movs	r1, #0
 8003c6a:	f008 f881 	bl	800bd70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003c6e:	2324      	movs	r3, #36	@ 0x24
 8003c70:	18fb      	adds	r3, r7, r3
 8003c72:	0018      	movs	r0, r3
 8003c74:	2314      	movs	r3, #20
 8003c76:	001a      	movs	r2, r3
 8003c78:	2100      	movs	r1, #0
 8003c7a:	f008 f879 	bl	800bd70 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003c7e:	003b      	movs	r3, r7
 8003c80:	0018      	movs	r0, r3
 8003c82:	2324      	movs	r3, #36	@ 0x24
 8003c84:	001a      	movs	r2, r3
 8003c86:	2100      	movs	r1, #0
 8003c88:	f008 f872 	bl	800bd70 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003c8c:	4b2d      	ldr	r3, [pc, #180]	@ (8003d44 <SystemClock_Config+0xec>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a2d      	ldr	r2, [pc, #180]	@ (8003d48 <SystemClock_Config+0xf0>)
 8003c92:	401a      	ands	r2, r3
 8003c94:	4b2b      	ldr	r3, [pc, #172]	@ (8003d44 <SystemClock_Config+0xec>)
 8003c96:	2180      	movs	r1, #128	@ 0x80
 8003c98:	0109      	lsls	r1, r1, #4
 8003c9a:	430a      	orrs	r2, r1
 8003c9c:	601a      	str	r2, [r3, #0]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8003c9e:	f005 fc3d 	bl	800951c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8003ca2:	4b2a      	ldr	r3, [pc, #168]	@ (8003d4c <SystemClock_Config+0xf4>)
 8003ca4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003ca6:	4b29      	ldr	r3, [pc, #164]	@ (8003d4c <SystemClock_Config+0xf4>)
 8003ca8:	4927      	ldr	r1, [pc, #156]	@ (8003d48 <SystemClock_Config+0xf0>)
 8003caa:	400a      	ands	r2, r1
 8003cac:	651a      	str	r2, [r3, #80]	@ 0x50

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8003cae:	193b      	adds	r3, r7, r4
 8003cb0:	2206      	movs	r2, #6
 8003cb2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8003cb4:	193b      	adds	r3, r7, r4
 8003cb6:	2280      	movs	r2, #128	@ 0x80
 8003cb8:	0052      	lsls	r2, r2, #1
 8003cba:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003cbc:	193b      	adds	r3, r7, r4
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003cc2:	193b      	adds	r3, r7, r4
 8003cc4:	2210      	movs	r2, #16
 8003cc6:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003cc8:	193b      	adds	r3, r7, r4
 8003cca:	2200      	movs	r2, #0
 8003ccc:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003cce:	193b      	adds	r3, r7, r4
 8003cd0:	0018      	movs	r0, r3
 8003cd2:	f005 fc31 	bl	8009538 <HAL_RCC_OscConfig>
 8003cd6:	1e03      	subs	r3, r0, #0
 8003cd8:	d001      	beq.n	8003cde <SystemClock_Config+0x86>
  {
    Error_Handler();
 8003cda:	f000 f839 	bl	8003d50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003cde:	2124      	movs	r1, #36	@ 0x24
 8003ce0:	187b      	adds	r3, r7, r1
 8003ce2:	220f      	movs	r2, #15
 8003ce4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8003ce6:	187b      	adds	r3, r7, r1
 8003ce8:	2201      	movs	r2, #1
 8003cea:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003cec:	187b      	adds	r3, r7, r1
 8003cee:	2200      	movs	r2, #0
 8003cf0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003cf2:	187b      	adds	r3, r7, r1
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003cf8:	187b      	adds	r3, r7, r1
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003cfe:	187b      	adds	r3, r7, r1
 8003d00:	2100      	movs	r1, #0
 8003d02:	0018      	movs	r0, r3
 8003d04:	f005 ffec 	bl	8009ce0 <HAL_RCC_ClockConfig>
 8003d08:	1e03      	subs	r3, r0, #0
 8003d0a:	d001      	beq.n	8003d10 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8003d0c:	f000 f820 	bl	8003d50 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1
 8003d10:	003b      	movs	r3, r7
 8003d12:	2229      	movs	r2, #41	@ 0x29
 8003d14:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_RTC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003d16:	003b      	movs	r3, r7
 8003d18:	2200      	movs	r2, #0
 8003d1a:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003d1c:	003b      	movs	r3, r7
 8003d1e:	2200      	movs	r2, #0
 8003d20:	615a      	str	r2, [r3, #20]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003d22:	003b      	movs	r3, r7
 8003d24:	2280      	movs	r2, #128	@ 0x80
 8003d26:	0252      	lsls	r2, r2, #9
 8003d28:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003d2a:	003b      	movs	r3, r7
 8003d2c:	0018      	movs	r0, r3
 8003d2e:	f006 f9fb 	bl	800a128 <HAL_RCCEx_PeriphCLKConfig>
 8003d32:	1e03      	subs	r3, r0, #0
 8003d34:	d001      	beq.n	8003d3a <SystemClock_Config+0xe2>
  {
    Error_Handler();
 8003d36:	f000 f80b 	bl	8003d50 <Error_Handler>
  }
}
 8003d3a:	46c0      	nop			@ (mov r8, r8)
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	b01d      	add	sp, #116	@ 0x74
 8003d40:	bd90      	pop	{r4, r7, pc}
 8003d42:	46c0      	nop			@ (mov r8, r8)
 8003d44:	40007000 	.word	0x40007000
 8003d48:	ffffe7ff 	.word	0xffffe7ff
 8003d4c:	40021000 	.word	0x40021000

08003d50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003d54:	b672      	cpsid	i
}
 8003d56:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003d58:	46c0      	nop			@ (mov r8, r8)
 8003d5a:	e7fd      	b.n	8003d58 <Error_Handler+0x8>

08003d5c <HT_StartMeasurementWrapper>:
static MeasurementParameters Measurements[MEAS_MEASUREMENT_COUNT];
static EnabledMeasurements MeasEnabled;
static MeasurementState MeasState = MEAS_STATE_INIT;
static uint8_t CurrentMeasurementIndex = 0;

static void HT_StartMeasurementWrapper(void) {
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	af00      	add	r7, sp, #0
  HT_StartMeasurement();
 8003d60:	f7ff fd8f 	bl	8003882 <HT_StartMeasurement>
}
 8003d64:	46c0      	nop			@ (mov r8, r8)
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}
	...

08003d6c <HT_IsMeasurementDoneWrapper>:

static bool HT_IsMeasurementDoneWrapper(void) {
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	af00      	add	r7, sp, #0
  return HT_GetMeasurementValues(&MeasurementCtx.humidityPerc, &MeasurementCtx.temperature);
 8003d70:	4a04      	ldr	r2, [pc, #16]	@ (8003d84 <HT_IsMeasurementDoneWrapper+0x18>)
 8003d72:	4b05      	ldr	r3, [pc, #20]	@ (8003d88 <HT_IsMeasurementDoneWrapper+0x1c>)
 8003d74:	0011      	movs	r1, r2
 8003d76:	0018      	movs	r0, r3
 8003d78:	f7ff fd8a 	bl	8003890 <HT_GetMeasurementValues>
 8003d7c:	0003      	movs	r3, r0
}
 8003d7e:	0018      	movs	r0, r3
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}
 8003d84:	200003a0 	.word	0x200003a0
 8003d88:	2000039c 	.word	0x2000039c

08003d8c <VOC_StartMeasurementWrapper>:

static void VOC_StartMeasurementWrapper(void) {
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	af00      	add	r7, sp, #0
  Gas_StartMeasurement();
 8003d90:	f7ff fc3e 	bl	8003610 <Gas_StartMeasurement>
}
 8003d94:	46c0      	nop			@ (mov r8, r8)
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}
	...

08003d9c <VOC_IsMeasurementDoneWrapper>:

static bool VOC_IsMeasurementDoneWrapper(void) {
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	af00      	add	r7, sp, #0
  return Gas_GetMeasurementValues(&MeasurementCtx.vocIndex);
 8003da0:	4b03      	ldr	r3, [pc, #12]	@ (8003db0 <VOC_IsMeasurementDoneWrapper+0x14>)
 8003da2:	0018      	movs	r0, r3
 8003da4:	f7ff fc3b 	bl	800361e <Gas_GetMeasurementValues>
 8003da8:	0003      	movs	r3, r0
}
 8003daa:	0018      	movs	r0, r3
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}
 8003db0:	200003a4 	.word	0x200003a4

08003db4 <NO_StartMeasurementWrapper>:

static void NO_StartMeasurementWrapper(void) {
 8003db4:	b580      	push	{r7, lr}
 8003db6:	af00      	add	r7, sp, #0
  // TODO: Implement NO wrapper.
}
 8003db8:	46c0      	nop			@ (mov r8, r8)
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}

08003dbe <NO_IsMeasurementDoneWrapper>:

static bool NO_IsMeasurementDoneWrapper(void) {
 8003dbe:	b580      	push	{r7, lr}
 8003dc0:	af00      	add	r7, sp, #0
  return true;
 8003dc2:	2301      	movs	r3, #1
}
 8003dc4:	0018      	movs	r0, r3
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}
	...

08003dcc <MIC_StartMeasurementWrapper>:

static void MIC_StartMeasurementWrapper(void) {
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	af00      	add	r7, sp, #0
  MIC_Start(SAMPLE_RATE_48K, NR_SAMPLES_128);
 8003dd0:	2380      	movs	r3, #128	@ 0x80
 8003dd2:	009b      	lsls	r3, r3, #2
 8003dd4:	4a03      	ldr	r2, [pc, #12]	@ (8003de4 <MIC_StartMeasurementWrapper+0x18>)
 8003dd6:	0019      	movs	r1, r3
 8003dd8:	0010      	movs	r0, r2
 8003dda:	f000 fa11 	bl	8004200 <MIC_Start>
}
 8003dde:	46c0      	nop			@ (mov r8, r8)
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}
 8003de4:	0000bb80 	.word	0x0000bb80

08003de8 <MIC_IsMeasurementDoneWrapper>:

static bool MIC_IsMeasurementDoneWrapper(void) {
 8003de8:	b580      	push	{r7, lr}
 8003dea:	af00      	add	r7, sp, #0
    return false;
 8003dec:	2300      	movs	r3, #0
}
 8003dee:	0018      	movs	r0, r3
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}

08003df4 <Meas_Init>:

void Meas_Init(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s) {
 8003df4:	b5b0      	push	{r4, r5, r7, lr}
 8003df6:	b094      	sub	sp, #80	@ 0x50
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	6039      	str	r1, [r7, #0]
  MeasState = MEAS_STATE_INIT;
 8003dfe:	4b5b      	ldr	r3, [pc, #364]	@ (8003f6c <Meas_Init+0x178>)
 8003e00:	2200      	movs	r2, #0
 8003e02:	701a      	strb	r2, [r3, #0]
  if(MeasEnabled.HT_measurementEnabled || MeasEnabled.VOC_measurementEnabled) {
 8003e04:	4b5a      	ldr	r3, [pc, #360]	@ (8003f70 <Meas_Init+0x17c>)
 8003e06:	781b      	ldrb	r3, [r3, #0]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d103      	bne.n	8003e14 <Meas_Init+0x20>
 8003e0c:	4b58      	ldr	r3, [pc, #352]	@ (8003f70 <Meas_Init+0x17c>)
 8003e0e:	785b      	ldrb	r3, [r3, #1]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d027      	beq.n	8003e64 <Meas_Init+0x70>
    I2CSensors_Init(sensorI2C);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	0018      	movs	r0, r3
 8003e18:	f7ff fb28 	bl	800346c <I2CSensors_Init>
    if(!HT_DeviceConnected()) {
 8003e1c:	f7ff fd48 	bl	80038b0 <HT_DeviceConnected>
 8003e20:	0003      	movs	r3, r0
 8003e22:	001a      	movs	r2, r3
 8003e24:	2301      	movs	r3, #1
 8003e26:	4053      	eors	r3, r2
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d008      	beq.n	8003e40 <Meas_Init+0x4c>
       Error("HT device not connected!");
 8003e2e:	4a51      	ldr	r2, [pc, #324]	@ (8003f74 <Meas_Init+0x180>)
 8003e30:	4b51      	ldr	r3, [pc, #324]	@ (8003f78 <Meas_Init+0x184>)
 8003e32:	0019      	movs	r1, r3
 8003e34:	2001      	movs	r0, #1
 8003e36:	f001 ff11 	bl	8005c5c <CreateLine>
       MeasEnabled.HT_measurementEnabled = false;
 8003e3a:	4b4d      	ldr	r3, [pc, #308]	@ (8003f70 <Meas_Init+0x17c>)
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	701a      	strb	r2, [r3, #0]
    }
    if(!Gas_DeviceConnected()) {
 8003e40:	f7ff fbfa 	bl	8003638 <Gas_DeviceConnected>
 8003e44:	0003      	movs	r3, r0
 8003e46:	001a      	movs	r2, r3
 8003e48:	2301      	movs	r3, #1
 8003e4a:	4053      	eors	r3, r2
 8003e4c:	b2db      	uxtb	r3, r3
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d008      	beq.n	8003e64 <Meas_Init+0x70>
       Error("SGP device not connected!");
 8003e52:	4a4a      	ldr	r2, [pc, #296]	@ (8003f7c <Meas_Init+0x188>)
 8003e54:	4b48      	ldr	r3, [pc, #288]	@ (8003f78 <Meas_Init+0x184>)
 8003e56:	0019      	movs	r1, r3
 8003e58:	2001      	movs	r0, #1
 8003e5a:	f001 feff 	bl	8005c5c <CreateLine>
       MeasEnabled.VOC_measurementEnabled = false;
 8003e5e:	4b44      	ldr	r3, [pc, #272]	@ (8003f70 <Meas_Init+0x17c>)
 8003e60:	2200      	movs	r2, #0
 8003e62:	705a      	strb	r2, [r3, #1]
    }
  }
  if(MeasEnabled.MIC_measurementEnabled) {
 8003e64:	4b42      	ldr	r3, [pc, #264]	@ (8003f70 <Meas_Init+0x17c>)
 8003e66:	78db      	ldrb	r3, [r3, #3]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d003      	beq.n	8003e74 <Meas_Init+0x80>
    MIC_Init(micI2s);
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	0018      	movs	r0, r3
 8003e70:	f000 f9b8 	bl	80041e4 <MIC_Init>
  }
  uint8_t offset = 0;
 8003e74:	254f      	movs	r5, #79	@ 0x4f
 8003e76:	197b      	adds	r3, r7, r5
 8003e78:	2200      	movs	r2, #0
 8003e7a:	701a      	strb	r2, [r3, #0]
  Measurements[offset++] = (MeasurementParameters) {HT_StartMeasurementWrapper, HT_IsMeasurementDoneWrapper, &MeasurementCtx.HT_measurementDone, MeasEnabled.HT_measurementEnabled};
 8003e7c:	197b      	adds	r3, r7, r5
 8003e7e:	781b      	ldrb	r3, [r3, #0]
 8003e80:	197a      	adds	r2, r7, r5
 8003e82:	1c59      	adds	r1, r3, #1
 8003e84:	7011      	strb	r1, [r2, #0]
 8003e86:	4a3a      	ldr	r2, [pc, #232]	@ (8003f70 <Meas_Init+0x17c>)
 8003e88:	7814      	ldrb	r4, [r2, #0]
 8003e8a:	4a3d      	ldr	r2, [pc, #244]	@ (8003f80 <Meas_Init+0x18c>)
 8003e8c:	0119      	lsls	r1, r3, #4
 8003e8e:	483d      	ldr	r0, [pc, #244]	@ (8003f84 <Meas_Init+0x190>)
 8003e90:	5088      	str	r0, [r1, r2]
 8003e92:	493b      	ldr	r1, [pc, #236]	@ (8003f80 <Meas_Init+0x18c>)
 8003e94:	011a      	lsls	r2, r3, #4
 8003e96:	188a      	adds	r2, r1, r2
 8003e98:	3204      	adds	r2, #4
 8003e9a:	493b      	ldr	r1, [pc, #236]	@ (8003f88 <Meas_Init+0x194>)
 8003e9c:	6011      	str	r1, [r2, #0]
 8003e9e:	4938      	ldr	r1, [pc, #224]	@ (8003f80 <Meas_Init+0x18c>)
 8003ea0:	011a      	lsls	r2, r3, #4
 8003ea2:	188a      	adds	r2, r1, r2
 8003ea4:	3208      	adds	r2, #8
 8003ea6:	4939      	ldr	r1, [pc, #228]	@ (8003f8c <Meas_Init+0x198>)
 8003ea8:	6011      	str	r1, [r2, #0]
 8003eaa:	4a35      	ldr	r2, [pc, #212]	@ (8003f80 <Meas_Init+0x18c>)
 8003eac:	011b      	lsls	r3, r3, #4
 8003eae:	18d3      	adds	r3, r2, r3
 8003eb0:	330c      	adds	r3, #12
 8003eb2:	1c22      	adds	r2, r4, #0
 8003eb4:	701a      	strb	r2, [r3, #0]
  Measurements[offset++] = (MeasurementParameters) {VOC_StartMeasurementWrapper, VOC_IsMeasurementDoneWrapper, &MeasurementCtx.VOC_measurementDone, MeasEnabled.VOC_measurementEnabled};
 8003eb6:	197b      	adds	r3, r7, r5
 8003eb8:	781b      	ldrb	r3, [r3, #0]
 8003eba:	197a      	adds	r2, r7, r5
 8003ebc:	1c59      	adds	r1, r3, #1
 8003ebe:	7011      	strb	r1, [r2, #0]
 8003ec0:	4a2b      	ldr	r2, [pc, #172]	@ (8003f70 <Meas_Init+0x17c>)
 8003ec2:	7854      	ldrb	r4, [r2, #1]
 8003ec4:	4a2e      	ldr	r2, [pc, #184]	@ (8003f80 <Meas_Init+0x18c>)
 8003ec6:	0119      	lsls	r1, r3, #4
 8003ec8:	4831      	ldr	r0, [pc, #196]	@ (8003f90 <Meas_Init+0x19c>)
 8003eca:	5088      	str	r0, [r1, r2]
 8003ecc:	492c      	ldr	r1, [pc, #176]	@ (8003f80 <Meas_Init+0x18c>)
 8003ece:	011a      	lsls	r2, r3, #4
 8003ed0:	188a      	adds	r2, r1, r2
 8003ed2:	3204      	adds	r2, #4
 8003ed4:	492f      	ldr	r1, [pc, #188]	@ (8003f94 <Meas_Init+0x1a0>)
 8003ed6:	6011      	str	r1, [r2, #0]
 8003ed8:	4929      	ldr	r1, [pc, #164]	@ (8003f80 <Meas_Init+0x18c>)
 8003eda:	011a      	lsls	r2, r3, #4
 8003edc:	188a      	adds	r2, r1, r2
 8003ede:	3208      	adds	r2, #8
 8003ee0:	492d      	ldr	r1, [pc, #180]	@ (8003f98 <Meas_Init+0x1a4>)
 8003ee2:	6011      	str	r1, [r2, #0]
 8003ee4:	4a26      	ldr	r2, [pc, #152]	@ (8003f80 <Meas_Init+0x18c>)
 8003ee6:	011b      	lsls	r3, r3, #4
 8003ee8:	18d3      	adds	r3, r2, r3
 8003eea:	330c      	adds	r3, #12
 8003eec:	1c22      	adds	r2, r4, #0
 8003eee:	701a      	strb	r2, [r3, #0]
  Measurements[offset++] = (MeasurementParameters) {NO_StartMeasurementWrapper, NO_IsMeasurementDoneWrapper, &MeasurementCtx.NO_measurementDone, MeasEnabled.NO_measurementEnabled};
 8003ef0:	197b      	adds	r3, r7, r5
 8003ef2:	781b      	ldrb	r3, [r3, #0]
 8003ef4:	197a      	adds	r2, r7, r5
 8003ef6:	1c59      	adds	r1, r3, #1
 8003ef8:	7011      	strb	r1, [r2, #0]
 8003efa:	4a1d      	ldr	r2, [pc, #116]	@ (8003f70 <Meas_Init+0x17c>)
 8003efc:	7894      	ldrb	r4, [r2, #2]
 8003efe:	4a20      	ldr	r2, [pc, #128]	@ (8003f80 <Meas_Init+0x18c>)
 8003f00:	0119      	lsls	r1, r3, #4
 8003f02:	4826      	ldr	r0, [pc, #152]	@ (8003f9c <Meas_Init+0x1a8>)
 8003f04:	5088      	str	r0, [r1, r2]
 8003f06:	491e      	ldr	r1, [pc, #120]	@ (8003f80 <Meas_Init+0x18c>)
 8003f08:	011a      	lsls	r2, r3, #4
 8003f0a:	188a      	adds	r2, r1, r2
 8003f0c:	3204      	adds	r2, #4
 8003f0e:	4924      	ldr	r1, [pc, #144]	@ (8003fa0 <Meas_Init+0x1ac>)
 8003f10:	6011      	str	r1, [r2, #0]
 8003f12:	491b      	ldr	r1, [pc, #108]	@ (8003f80 <Meas_Init+0x18c>)
 8003f14:	011a      	lsls	r2, r3, #4
 8003f16:	188a      	adds	r2, r1, r2
 8003f18:	3208      	adds	r2, #8
 8003f1a:	4922      	ldr	r1, [pc, #136]	@ (8003fa4 <Meas_Init+0x1b0>)
 8003f1c:	6011      	str	r1, [r2, #0]
 8003f1e:	4a18      	ldr	r2, [pc, #96]	@ (8003f80 <Meas_Init+0x18c>)
 8003f20:	011b      	lsls	r3, r3, #4
 8003f22:	18d3      	adds	r3, r2, r3
 8003f24:	330c      	adds	r3, #12
 8003f26:	1c22      	adds	r2, r4, #0
 8003f28:	701a      	strb	r2, [r3, #0]
  Measurements[offset++] = (MeasurementParameters) {MIC_StartMeasurementWrapper, MIC_IsMeasurementDoneWrapper, &MeasurementCtx.MIC_measurementDone, MeasEnabled.MIC_measurementEnabled};
 8003f2a:	197b      	adds	r3, r7, r5
 8003f2c:	781b      	ldrb	r3, [r3, #0]
 8003f2e:	197a      	adds	r2, r7, r5
 8003f30:	1c59      	adds	r1, r3, #1
 8003f32:	7011      	strb	r1, [r2, #0]
 8003f34:	4a0e      	ldr	r2, [pc, #56]	@ (8003f70 <Meas_Init+0x17c>)
 8003f36:	78d4      	ldrb	r4, [r2, #3]
 8003f38:	4a11      	ldr	r2, [pc, #68]	@ (8003f80 <Meas_Init+0x18c>)
 8003f3a:	0119      	lsls	r1, r3, #4
 8003f3c:	481a      	ldr	r0, [pc, #104]	@ (8003fa8 <Meas_Init+0x1b4>)
 8003f3e:	5088      	str	r0, [r1, r2]
 8003f40:	490f      	ldr	r1, [pc, #60]	@ (8003f80 <Meas_Init+0x18c>)
 8003f42:	011a      	lsls	r2, r3, #4
 8003f44:	188a      	adds	r2, r1, r2
 8003f46:	3204      	adds	r2, #4
 8003f48:	4918      	ldr	r1, [pc, #96]	@ (8003fac <Meas_Init+0x1b8>)
 8003f4a:	6011      	str	r1, [r2, #0]
 8003f4c:	490c      	ldr	r1, [pc, #48]	@ (8003f80 <Meas_Init+0x18c>)
 8003f4e:	011a      	lsls	r2, r3, #4
 8003f50:	188a      	adds	r2, r1, r2
 8003f52:	3208      	adds	r2, #8
 8003f54:	4916      	ldr	r1, [pc, #88]	@ (8003fb0 <Meas_Init+0x1bc>)
 8003f56:	6011      	str	r1, [r2, #0]
 8003f58:	4a09      	ldr	r2, [pc, #36]	@ (8003f80 <Meas_Init+0x18c>)
 8003f5a:	011b      	lsls	r3, r3, #4
 8003f5c:	18d3      	adds	r3, r2, r3
 8003f5e:	330c      	adds	r3, #12
 8003f60:	1c22      	adds	r2, r4, #0
 8003f62:	701a      	strb	r2, [r3, #0]
}
 8003f64:	46c0      	nop			@ (mov r8, r8)
 8003f66:	46bd      	mov	sp, r7
 8003f68:	b014      	add	sp, #80	@ 0x50
 8003f6a:	bdb0      	pop	{r4, r5, r7, pc}
 8003f6c:	200003f0 	.word	0x200003f0
 8003f70:	200003ec 	.word	0x200003ec
 8003f74:	0800e438 	.word	0x0800e438
 8003f78:	0800e454 	.word	0x0800e454
 8003f7c:	0800e458 	.word	0x0800e458
 8003f80:	200003ac 	.word	0x200003ac
 8003f84:	08003d5d 	.word	0x08003d5d
 8003f88:	08003d6d 	.word	0x08003d6d
 8003f8c:	200003a8 	.word	0x200003a8
 8003f90:	08003d8d 	.word	0x08003d8d
 8003f94:	08003d9d 	.word	0x08003d9d
 8003f98:	200003a9 	.word	0x200003a9
 8003f9c:	08003db5 	.word	0x08003db5
 8003fa0:	08003dbf 	.word	0x08003dbf
 8003fa4:	200003aa 	.word	0x200003aa
 8003fa8:	08003dcd 	.word	0x08003dcd
 8003fac:	08003de9 	.word	0x08003de9
 8003fb0:	200003ab 	.word	0x200003ab

08003fb4 <StartMeasurements>:

void StartMeasurements(void) {
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	af00      	add	r7, sp, #0
  for(CurrentMeasurementIndex = 0; CurrentMeasurementIndex < MEAS_MEASUREMENT_COUNT; CurrentMeasurementIndex++) {
 8003fb8:	4b10      	ldr	r3, [pc, #64]	@ (8003ffc <StartMeasurements+0x48>)
 8003fba:	2200      	movs	r2, #0
 8003fbc:	701a      	strb	r2, [r3, #0]
 8003fbe:	e015      	b.n	8003fec <StartMeasurements+0x38>
    if(Measurements[CurrentMeasurementIndex].enabled) {
 8003fc0:	4b0e      	ldr	r3, [pc, #56]	@ (8003ffc <StartMeasurements+0x48>)
 8003fc2:	781b      	ldrb	r3, [r3, #0]
 8003fc4:	4a0e      	ldr	r2, [pc, #56]	@ (8004000 <StartMeasurements+0x4c>)
 8003fc6:	011b      	lsls	r3, r3, #4
 8003fc8:	18d3      	adds	r3, r2, r3
 8003fca:	330c      	adds	r3, #12
 8003fcc:	781b      	ldrb	r3, [r3, #0]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d006      	beq.n	8003fe0 <StartMeasurements+0x2c>
      Measurements[CurrentMeasurementIndex].startFunc();
 8003fd2:	4b0a      	ldr	r3, [pc, #40]	@ (8003ffc <StartMeasurements+0x48>)
 8003fd4:	781b      	ldrb	r3, [r3, #0]
 8003fd6:	001a      	movs	r2, r3
 8003fd8:	4b09      	ldr	r3, [pc, #36]	@ (8004000 <StartMeasurements+0x4c>)
 8003fda:	0112      	lsls	r2, r2, #4
 8003fdc:	58d3      	ldr	r3, [r2, r3]
 8003fde:	4798      	blx	r3
  for(CurrentMeasurementIndex = 0; CurrentMeasurementIndex < MEAS_MEASUREMENT_COUNT; CurrentMeasurementIndex++) {
 8003fe0:	4b06      	ldr	r3, [pc, #24]	@ (8003ffc <StartMeasurements+0x48>)
 8003fe2:	781b      	ldrb	r3, [r3, #0]
 8003fe4:	3301      	adds	r3, #1
 8003fe6:	b2da      	uxtb	r2, r3
 8003fe8:	4b04      	ldr	r3, [pc, #16]	@ (8003ffc <StartMeasurements+0x48>)
 8003fea:	701a      	strb	r2, [r3, #0]
 8003fec:	4b03      	ldr	r3, [pc, #12]	@ (8003ffc <StartMeasurements+0x48>)
 8003fee:	781b      	ldrb	r3, [r3, #0]
 8003ff0:	2b03      	cmp	r3, #3
 8003ff2:	d9e5      	bls.n	8003fc0 <StartMeasurements+0xc>
    }
  }
}
 8003ff4:	46c0      	nop			@ (mov r8, r8)
 8003ff6:	46c0      	nop			@ (mov r8, r8)
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}
 8003ffc:	200003f1 	.word	0x200003f1
 8004000:	200003ac 	.word	0x200003ac

08004004 <ResetMeasurements>:

void ResetMeasurements(void) {
 8004004:	b580      	push	{r7, lr}
 8004006:	af00      	add	r7, sp, #0
  MeasurementCtx.humidityPerc = 0;
 8004008:	4b0b      	ldr	r3, [pc, #44]	@ (8004038 <ResetMeasurements+0x34>)
 800400a:	2200      	movs	r2, #0
 800400c:	601a      	str	r2, [r3, #0]
  MeasurementCtx.temperature = 0;
 800400e:	4b0a      	ldr	r3, [pc, #40]	@ (8004038 <ResetMeasurements+0x34>)
 8004010:	2200      	movs	r2, #0
 8004012:	605a      	str	r2, [r3, #4]
  MeasurementCtx.vocIndex = 0;
 8004014:	4b08      	ldr	r3, [pc, #32]	@ (8004038 <ResetMeasurements+0x34>)
 8004016:	2200      	movs	r2, #0
 8004018:	609a      	str	r2, [r3, #8]
  MeasurementCtx.HT_measurementDone = false;
 800401a:	4b07      	ldr	r3, [pc, #28]	@ (8004038 <ResetMeasurements+0x34>)
 800401c:	2200      	movs	r2, #0
 800401e:	731a      	strb	r2, [r3, #12]
  MeasurementCtx.VOC_measurementDone = false;
 8004020:	4b05      	ldr	r3, [pc, #20]	@ (8004038 <ResetMeasurements+0x34>)
 8004022:	2200      	movs	r2, #0
 8004024:	735a      	strb	r2, [r3, #13]
  MeasurementCtx.NO_measurementDone = false;
 8004026:	4b04      	ldr	r3, [pc, #16]	@ (8004038 <ResetMeasurements+0x34>)
 8004028:	2200      	movs	r2, #0
 800402a:	739a      	strb	r2, [r3, #14]
  MeasurementCtx.MIC_measurementDone = false;
 800402c:	4b02      	ldr	r3, [pc, #8]	@ (8004038 <ResetMeasurements+0x34>)
 800402e:	2200      	movs	r2, #0
 8004030:	73da      	strb	r2, [r3, #15]
}
 8004032:	46c0      	nop			@ (mov r8, r8)
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}
 8004038:	2000039c 	.word	0x2000039c

0800403c <MeasurementsCompleted>:

bool MeasurementsCompleted(void) {
 800403c:	b580      	push	{r7, lr}
 800403e:	af00      	add	r7, sp, #0
  for(CurrentMeasurementIndex = 0; CurrentMeasurementIndex < MEAS_MEASUREMENT_COUNT; CurrentMeasurementIndex++) {
 8004040:	4b18      	ldr	r3, [pc, #96]	@ (80040a4 <MeasurementsCompleted+0x68>)
 8004042:	2200      	movs	r2, #0
 8004044:	701a      	strb	r2, [r3, #0]
 8004046:	e024      	b.n	8004092 <MeasurementsCompleted+0x56>
    if(Measurements[CurrentMeasurementIndex].enabled) {
 8004048:	4b16      	ldr	r3, [pc, #88]	@ (80040a4 <MeasurementsCompleted+0x68>)
 800404a:	781b      	ldrb	r3, [r3, #0]
 800404c:	4a16      	ldr	r2, [pc, #88]	@ (80040a8 <MeasurementsCompleted+0x6c>)
 800404e:	011b      	lsls	r3, r3, #4
 8004050:	18d3      	adds	r3, r2, r3
 8004052:	330c      	adds	r3, #12
 8004054:	781b      	ldrb	r3, [r3, #0]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d015      	beq.n	8004086 <MeasurementsCompleted+0x4a>
      if(Measurements[CurrentMeasurementIndex].doneFunc()) {
 800405a:	4b12      	ldr	r3, [pc, #72]	@ (80040a4 <MeasurementsCompleted+0x68>)
 800405c:	781b      	ldrb	r3, [r3, #0]
 800405e:	4a12      	ldr	r2, [pc, #72]	@ (80040a8 <MeasurementsCompleted+0x6c>)
 8004060:	011b      	lsls	r3, r3, #4
 8004062:	18d3      	adds	r3, r2, r3
 8004064:	3304      	adds	r3, #4
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4798      	blx	r3
 800406a:	1e03      	subs	r3, r0, #0
 800406c:	d009      	beq.n	8004082 <MeasurementsCompleted+0x46>
        *Measurements[CurrentMeasurementIndex].doneFlag = true;
 800406e:	4b0d      	ldr	r3, [pc, #52]	@ (80040a4 <MeasurementsCompleted+0x68>)
 8004070:	781b      	ldrb	r3, [r3, #0]
 8004072:	4a0d      	ldr	r2, [pc, #52]	@ (80040a8 <MeasurementsCompleted+0x6c>)
 8004074:	011b      	lsls	r3, r3, #4
 8004076:	18d3      	adds	r3, r2, r3
 8004078:	3308      	adds	r3, #8
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	2201      	movs	r2, #1
 800407e:	701a      	strb	r2, [r3, #0]
 8004080:	e001      	b.n	8004086 <MeasurementsCompleted+0x4a>
      }else {
        return false;
 8004082:	2300      	movs	r3, #0
 8004084:	e00a      	b.n	800409c <MeasurementsCompleted+0x60>
  for(CurrentMeasurementIndex = 0; CurrentMeasurementIndex < MEAS_MEASUREMENT_COUNT; CurrentMeasurementIndex++) {
 8004086:	4b07      	ldr	r3, [pc, #28]	@ (80040a4 <MeasurementsCompleted+0x68>)
 8004088:	781b      	ldrb	r3, [r3, #0]
 800408a:	3301      	adds	r3, #1
 800408c:	b2da      	uxtb	r2, r3
 800408e:	4b05      	ldr	r3, [pc, #20]	@ (80040a4 <MeasurementsCompleted+0x68>)
 8004090:	701a      	strb	r2, [r3, #0]
 8004092:	4b04      	ldr	r3, [pc, #16]	@ (80040a4 <MeasurementsCompleted+0x68>)
 8004094:	781b      	ldrb	r3, [r3, #0]
 8004096:	2b03      	cmp	r3, #3
 8004098:	d9d6      	bls.n	8004048 <MeasurementsCompleted+0xc>
      }
    }
  }
  return true;
 800409a:	2301      	movs	r3, #1
}
 800409c:	0018      	movs	r0, r3
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}
 80040a2:	46c0      	nop			@ (mov r8, r8)
 80040a4:	200003f1 	.word	0x200003f1
 80040a8:	200003ac 	.word	0x200003ac

080040ac <Meas_Upkeep>:

void Meas_Upkeep(void) {
 80040ac:	b580      	push	{r7, lr}
 80040ae:	af00      	add	r7, sp, #0
  switch(MeasState) {
 80040b0:	4b1e      	ldr	r3, [pc, #120]	@ (800412c <Meas_Upkeep+0x80>)
 80040b2:	781b      	ldrb	r3, [r3, #0]
 80040b4:	2b05      	cmp	r3, #5
 80040b6:	d830      	bhi.n	800411a <Meas_Upkeep+0x6e>
 80040b8:	009a      	lsls	r2, r3, #2
 80040ba:	4b1d      	ldr	r3, [pc, #116]	@ (8004130 <Meas_Upkeep+0x84>)
 80040bc:	18d3      	adds	r3, r2, r3
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	469f      	mov	pc, r3
  case MEAS_STATE_OFF:
    Debug("Measurements are turned off.");
 80040c2:	4a1c      	ldr	r2, [pc, #112]	@ (8004134 <Meas_Upkeep+0x88>)
 80040c4:	4b1c      	ldr	r3, [pc, #112]	@ (8004138 <Meas_Upkeep+0x8c>)
 80040c6:	0019      	movs	r1, r3
 80040c8:	2003      	movs	r0, #3
 80040ca:	f001 fdc7 	bl	8005c5c <CreateLine>
    break;
 80040ce:	e029      	b.n	8004124 <Meas_Upkeep+0x78>

  case MEAS_STATE_INIT:
    ResetMeasurements();
 80040d0:	f7ff ff98 	bl	8004004 <ResetMeasurements>
    MeasState = MEAS_STATE_START_MEASUREMENTS;
 80040d4:	4b15      	ldr	r3, [pc, #84]	@ (800412c <Meas_Upkeep+0x80>)
 80040d6:	2201      	movs	r2, #1
 80040d8:	701a      	strb	r2, [r3, #0]
    break;
 80040da:	e023      	b.n	8004124 <Meas_Upkeep+0x78>

  case MEAS_STATE_START_MEASUREMENTS:
    StartMeasurements();
 80040dc:	f7ff ff6a 	bl	8003fb4 <StartMeasurements>
    MeasState = MEAS_STATE_WAIT_FOR_COMPLETION;
 80040e0:	4b12      	ldr	r3, [pc, #72]	@ (800412c <Meas_Upkeep+0x80>)
 80040e2:	2202      	movs	r2, #2
 80040e4:	701a      	strb	r2, [r3, #0]
   break;
 80040e6:	e01d      	b.n	8004124 <Meas_Upkeep+0x78>

  case MEAS_STATE_WAIT_FOR_COMPLETION:
    if(MeasurementsCompleted()) {
 80040e8:	f7ff ffa8 	bl	800403c <MeasurementsCompleted>
 80040ec:	1e03      	subs	r3, r0, #0
 80040ee:	d018      	beq.n	8004122 <Meas_Upkeep+0x76>
      MeasState = MEAS_STATE_PROCESS_RESULTS;
 80040f0:	4b0e      	ldr	r3, [pc, #56]	@ (800412c <Meas_Upkeep+0x80>)
 80040f2:	2203      	movs	r2, #3
 80040f4:	701a      	strb	r2, [r3, #0]
    }
    break;
 80040f6:	e014      	b.n	8004122 <Meas_Upkeep+0x76>

  case MEAS_STATE_PROCESS_RESULTS:
    Debug("Processing results.");
 80040f8:	4a10      	ldr	r2, [pc, #64]	@ (800413c <Meas_Upkeep+0x90>)
 80040fa:	4b0f      	ldr	r3, [pc, #60]	@ (8004138 <Meas_Upkeep+0x8c>)
 80040fc:	0019      	movs	r1, r3
 80040fe:	2003      	movs	r0, #3
 8004100:	f001 fdac 	bl	8005c5c <CreateLine>
    Debug("SGP40 index value: %d", MeasurementCtx.vocIndex);
 8004104:	4b0e      	ldr	r3, [pc, #56]	@ (8004140 <Meas_Upkeep+0x94>)
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	4a0e      	ldr	r2, [pc, #56]	@ (8004144 <Meas_Upkeep+0x98>)
 800410a:	490b      	ldr	r1, [pc, #44]	@ (8004138 <Meas_Upkeep+0x8c>)
 800410c:	2003      	movs	r0, #3
 800410e:	f001 fda5 	bl	8005c5c <CreateLine>
    // TODO: Return values and let gadget handle with too high humidity and the sensor values
    // TODO: Check if all measurements are ready for the next measurement before switching states. Only check for the enabled measurements.
//    Debug("Humidity value: %3.2f%%, Temperature value: %3.2fC", MeasurementCtx.humidityPerc, MeasurementCtx.temperature);
    MeasState = MEAS_STATE_INIT;
 8004112:	4b06      	ldr	r3, [pc, #24]	@ (800412c <Meas_Upkeep+0x80>)
 8004114:	2200      	movs	r2, #0
 8004116:	701a      	strb	r2, [r3, #0]
    break;
 8004118:	e004      	b.n	8004124 <Meas_Upkeep+0x78>

  default:
    // Handle unexpected state
    MeasState = MEAS_STATE_INIT;
 800411a:	4b04      	ldr	r3, [pc, #16]	@ (800412c <Meas_Upkeep+0x80>)
 800411c:	2200      	movs	r2, #0
 800411e:	701a      	strb	r2, [r3, #0]
    break;
 8004120:	e000      	b.n	8004124 <Meas_Upkeep+0x78>
    break;
 8004122:	46c0      	nop			@ (mov r8, r8)
  }
}
 8004124:	46c0      	nop			@ (mov r8, r8)
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}
 800412a:	46c0      	nop			@ (mov r8, r8)
 800412c:	200003f0 	.word	0x200003f0
 8004130:	0800e9a4 	.word	0x0800e9a4
 8004134:	0800e474 	.word	0x0800e474
 8004138:	0800e494 	.word	0x0800e494
 800413c:	0800e498 	.word	0x0800e498
 8004140:	2000039c 	.word	0x2000039c
 8004144:	0800e4ac 	.word	0x0800e4ac

08004148 <Meas_SetEnabledSensors>:

void Meas_SetEnabledSensors(EnabledMeasurements enabled) {
 8004148:	b590      	push	{r4, r7, lr}
 800414a:	b085      	sub	sp, #20
 800414c:	af00      	add	r7, sp, #0
 800414e:	1d3b      	adds	r3, r7, #4
 8004150:	6018      	str	r0, [r3, #0]
  uint8_t offset = 0;
 8004152:	240f      	movs	r4, #15
 8004154:	193b      	adds	r3, r7, r4
 8004156:	2200      	movs	r2, #0
 8004158:	701a      	strb	r2, [r3, #0]
  MeasEnabled = enabled;
 800415a:	4b20      	ldr	r3, [pc, #128]	@ (80041dc <Meas_SetEnabledSensors+0x94>)
 800415c:	1d3a      	adds	r2, r7, #4
 800415e:	6812      	ldr	r2, [r2, #0]
 8004160:	601a      	str	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.HT_measurementEnabled;
 8004162:	193b      	adds	r3, r7, r4
 8004164:	781b      	ldrb	r3, [r3, #0]
 8004166:	193a      	adds	r2, r7, r4
 8004168:	1c59      	adds	r1, r3, #1
 800416a:	7011      	strb	r1, [r2, #0]
 800416c:	0018      	movs	r0, r3
 800416e:	1d3b      	adds	r3, r7, #4
 8004170:	7819      	ldrb	r1, [r3, #0]
 8004172:	4a1b      	ldr	r2, [pc, #108]	@ (80041e0 <Meas_SetEnabledSensors+0x98>)
 8004174:	0103      	lsls	r3, r0, #4
 8004176:	18d3      	adds	r3, r2, r3
 8004178:	330c      	adds	r3, #12
 800417a:	1c0a      	adds	r2, r1, #0
 800417c:	701a      	strb	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.VOC_measurementEnabled;
 800417e:	193b      	adds	r3, r7, r4
 8004180:	781b      	ldrb	r3, [r3, #0]
 8004182:	193a      	adds	r2, r7, r4
 8004184:	1c59      	adds	r1, r3, #1
 8004186:	7011      	strb	r1, [r2, #0]
 8004188:	0018      	movs	r0, r3
 800418a:	1d3b      	adds	r3, r7, #4
 800418c:	7859      	ldrb	r1, [r3, #1]
 800418e:	4a14      	ldr	r2, [pc, #80]	@ (80041e0 <Meas_SetEnabledSensors+0x98>)
 8004190:	0103      	lsls	r3, r0, #4
 8004192:	18d3      	adds	r3, r2, r3
 8004194:	330c      	adds	r3, #12
 8004196:	1c0a      	adds	r2, r1, #0
 8004198:	701a      	strb	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.NO_measurementEnabled;
 800419a:	193b      	adds	r3, r7, r4
 800419c:	781b      	ldrb	r3, [r3, #0]
 800419e:	193a      	adds	r2, r7, r4
 80041a0:	1c59      	adds	r1, r3, #1
 80041a2:	7011      	strb	r1, [r2, #0]
 80041a4:	0018      	movs	r0, r3
 80041a6:	1d3b      	adds	r3, r7, #4
 80041a8:	7899      	ldrb	r1, [r3, #2]
 80041aa:	4a0d      	ldr	r2, [pc, #52]	@ (80041e0 <Meas_SetEnabledSensors+0x98>)
 80041ac:	0103      	lsls	r3, r0, #4
 80041ae:	18d3      	adds	r3, r2, r3
 80041b0:	330c      	adds	r3, #12
 80041b2:	1c0a      	adds	r2, r1, #0
 80041b4:	701a      	strb	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.MIC_measurementEnabled;
 80041b6:	193b      	adds	r3, r7, r4
 80041b8:	781b      	ldrb	r3, [r3, #0]
 80041ba:	193a      	adds	r2, r7, r4
 80041bc:	1c59      	adds	r1, r3, #1
 80041be:	7011      	strb	r1, [r2, #0]
 80041c0:	0018      	movs	r0, r3
 80041c2:	1d3b      	adds	r3, r7, #4
 80041c4:	78d9      	ldrb	r1, [r3, #3]
 80041c6:	4a06      	ldr	r2, [pc, #24]	@ (80041e0 <Meas_SetEnabledSensors+0x98>)
 80041c8:	0103      	lsls	r3, r0, #4
 80041ca:	18d3      	adds	r3, r2, r3
 80041cc:	330c      	adds	r3, #12
 80041ce:	1c0a      	adds	r2, r1, #0
 80041d0:	701a      	strb	r2, [r3, #0]
}
 80041d2:	46c0      	nop			@ (mov r8, r8)
 80041d4:	46bd      	mov	sp, r7
 80041d6:	b005      	add	sp, #20
 80041d8:	bd90      	pop	{r4, r7, pc}
 80041da:	46c0      	nop			@ (mov r8, r8)
 80041dc:	200003ec 	.word	0x200003ec
 80041e0:	200003ac 	.word	0x200003ac

080041e4 <MIC_Init>:
static uint32_t StartTime = 0;
static uint32_t StartupDoneTime = 0;
static volatile bool StartUpDone = false;
static volatile bool DataReady = false;

void MIC_Init(I2S_HandleTypeDef* i2SHandle) { I2SHandle = i2SHandle; }
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b082      	sub	sp, #8
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
 80041ec:	4b03      	ldr	r3, [pc, #12]	@ (80041fc <MIC_Init+0x18>)
 80041ee:	687a      	ldr	r2, [r7, #4]
 80041f0:	601a      	str	r2, [r3, #0]
 80041f2:	46c0      	nop			@ (mov r8, r8)
 80041f4:	46bd      	mov	sp, r7
 80041f6:	b002      	add	sp, #8
 80041f8:	bd80      	pop	{r7, pc}
 80041fa:	46c0      	nop			@ (mov r8, r8)
 80041fc:	200003f4 	.word	0x200003f4

08004200 <MIC_Start>:
  uint32_t audioValue = data[1] | (data[0] << 16);
  audioValue = audioValue >> 7;
  return audioValue;
}

void MIC_Start(uint32_t sampleRate, uint16_t nrSamples) {
 8004200:	b5b0      	push	{r4, r5, r7, lr}
 8004202:	b084      	sub	sp, #16
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
 8004208:	000a      	movs	r2, r1
 800420a:	1cbb      	adds	r3, r7, #2
 800420c:	801a      	strh	r2, [r3, #0]
  if (I2SHandle == NULL) {
 800420e:	4b19      	ldr	r3, [pc, #100]	@ (8004274 <MIC_Start+0x74>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d106      	bne.n	8004224 <MIC_Start+0x24>
    Error("Microphone is not initialised.");
 8004216:	4a18      	ldr	r2, [pc, #96]	@ (8004278 <MIC_Start+0x78>)
 8004218:	4b18      	ldr	r3, [pc, #96]	@ (800427c <MIC_Start+0x7c>)
 800421a:	0019      	movs	r1, r3
 800421c:	2001      	movs	r0, #1
 800421e:	f001 fd1d 	bl	8005c5c <CreateLine>
    return;
 8004222:	e023      	b.n	800426c <MIC_Start+0x6c>
  }

//  UpdateSampleRate(sampleRate);

  StartTime = HAL_GetTick();
 8004224:	f002 f938 	bl	8006498 <HAL_GetTick>
 8004228:	0002      	movs	r2, r0
 800422a:	4b15      	ldr	r3, [pc, #84]	@ (8004280 <MIC_Start+0x80>)
 800422c:	601a      	str	r2, [r3, #0]
  StartupDoneTime = StartTime + 20;
 800422e:	4b14      	ldr	r3, [pc, #80]	@ (8004280 <MIC_Start+0x80>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	3314      	adds	r3, #20
 8004234:	001a      	movs	r2, r3
 8004236:	4b13      	ldr	r3, [pc, #76]	@ (8004284 <MIC_Start+0x84>)
 8004238:	601a      	str	r2, [r3, #0]
  StartUpDone = false;
 800423a:	4b13      	ldr	r3, [pc, #76]	@ (8004288 <MIC_Start+0x88>)
 800423c:	2200      	movs	r2, #0
 800423e:	701a      	strb	r2, [r3, #0]
  DataReady = false;
 8004240:	4b12      	ldr	r3, [pc, #72]	@ (800428c <MIC_Start+0x8c>)
 8004242:	2200      	movs	r2, #0
 8004244:	701a      	strb	r2, [r3, #0]

  HAL_StatusTypeDef status = HAL_I2S_Receive_DMA(I2SHandle, (uint16_t*)AudioRxBuffer, 256);
 8004246:	4b0b      	ldr	r3, [pc, #44]	@ (8004274 <MIC_Start+0x74>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	250f      	movs	r5, #15
 800424c:	197c      	adds	r4, r7, r5
 800424e:	2280      	movs	r2, #128	@ 0x80
 8004250:	0052      	lsls	r2, r2, #1
 8004252:	490f      	ldr	r1, [pc, #60]	@ (8004290 <MIC_Start+0x90>)
 8004254:	0018      	movs	r0, r3
 8004256:	f004 ff31 	bl	80090bc <HAL_I2S_Receive_DMA>
 800425a:	0003      	movs	r3, r0
 800425c:	7023      	strb	r3, [r4, #0]
//      HAL_I2S_Receive_DMA(I2SHandle, (uint16_t*)AudioRxBuffer,
//                          AUDIO_RX_BUFFER >> 1); //>>1 because reading half word

  Info("Status %d", status);
 800425e:	197b      	adds	r3, r7, r5
 8004260:	781b      	ldrb	r3, [r3, #0]
 8004262:	4a0c      	ldr	r2, [pc, #48]	@ (8004294 <MIC_Start+0x94>)
 8004264:	490c      	ldr	r1, [pc, #48]	@ (8004298 <MIC_Start+0x98>)
 8004266:	2002      	movs	r0, #2
 8004268:	f001 fcf8 	bl	8005c5c <CreateLine>
}
 800426c:	46bd      	mov	sp, r7
 800426e:	b004      	add	sp, #16
 8004270:	bdb0      	pop	{r4, r5, r7, pc}
 8004272:	46c0      	nop			@ (mov r8, r8)
 8004274:	200003f4 	.word	0x200003f4
 8004278:	0800e4c4 	.word	0x0800e4c4
 800427c:	0800e4e4 	.word	0x0800e4e4
 8004280:	200004f8 	.word	0x200004f8
 8004284:	200004fc 	.word	0x200004fc
 8004288:	20000500 	.word	0x20000500
 800428c:	20000501 	.word	0x20000501
 8004290:	200003f8 	.word	0x200003f8
 8004294:	0800e4e8 	.word	0x0800e4e8
 8004298:	0800e4f4 	.word	0x0800e4f4

0800429c <HAL_I2S_RxCpltCallback>:
    Info("0x%08x", sample);
  }
}

// #TODO Also include half full callback
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef* hi2s) {
 800429c:	b580      	push	{r7, lr}
 800429e:	b082      	sub	sp, #8
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  if (hi2s != I2SHandle)
 80042a4:	4b17      	ldr	r3, [pc, #92]	@ (8004304 <HAL_I2S_RxCpltCallback+0x68>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	687a      	ldr	r2, [r7, #4]
 80042aa:	429a      	cmp	r2, r3
 80042ac:	d126      	bne.n	80042fc <HAL_I2S_RxCpltCallback+0x60>
    return;

  if (StartUpDone) {
 80042ae:	4b16      	ldr	r3, [pc, #88]	@ (8004308 <HAL_I2S_RxCpltCallback+0x6c>)
 80042b0:	781b      	ldrb	r3, [r3, #0]
 80042b2:	b2db      	uxtb	r3, r3
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d00f      	beq.n	80042d8 <HAL_I2S_RxCpltCallback+0x3c>
    HAL_I2S_DMAStop(I2SHandle);
 80042b8:	4b12      	ldr	r3, [pc, #72]	@ (8004304 <HAL_I2S_RxCpltCallback+0x68>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	0018      	movs	r0, r3
 80042be:	f004 ffbf 	bl	8009240 <HAL_I2S_DMAStop>
    DataReady = true;
 80042c2:	4b12      	ldr	r3, [pc, #72]	@ (800430c <HAL_I2S_RxCpltCallback+0x70>)
 80042c4:	2201      	movs	r2, #1
 80042c6:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(MIC_Trigger_GPIO_Port, MIC_Trigger_Pin, GPIO_PIN_RESET);
 80042c8:	2380      	movs	r3, #128	@ 0x80
 80042ca:	00db      	lsls	r3, r3, #3
 80042cc:	4810      	ldr	r0, [pc, #64]	@ (8004310 <HAL_I2S_RxCpltCallback+0x74>)
 80042ce:	2200      	movs	r2, #0
 80042d0:	0019      	movs	r1, r3
 80042d2:	f002 fdb9 	bl	8006e48 <HAL_GPIO_WritePin>
 80042d6:	e012      	b.n	80042fe <HAL_I2S_RxCpltCallback+0x62>
  } else if (TimestampIsReached(StartupDoneTime)) {
 80042d8:	4b0e      	ldr	r3, [pc, #56]	@ (8004314 <HAL_I2S_RxCpltCallback+0x78>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	0018      	movs	r0, r3
 80042de:	f001 fc67 	bl	8005bb0 <TimestampIsReached>
 80042e2:	1e03      	subs	r3, r0, #0
 80042e4:	d00b      	beq.n	80042fe <HAL_I2S_RxCpltCallback+0x62>
    StartUpDone = true;
 80042e6:	4b08      	ldr	r3, [pc, #32]	@ (8004308 <HAL_I2S_RxCpltCallback+0x6c>)
 80042e8:	2201      	movs	r2, #1
 80042ea:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(MIC_Trigger_GPIO_Port, MIC_Trigger_Pin, GPIO_PIN_SET);
 80042ec:	2380      	movs	r3, #128	@ 0x80
 80042ee:	00db      	lsls	r3, r3, #3
 80042f0:	4807      	ldr	r0, [pc, #28]	@ (8004310 <HAL_I2S_RxCpltCallback+0x74>)
 80042f2:	2201      	movs	r2, #1
 80042f4:	0019      	movs	r1, r3
 80042f6:	f002 fda7 	bl	8006e48 <HAL_GPIO_WritePin>
 80042fa:	e000      	b.n	80042fe <HAL_I2S_RxCpltCallback+0x62>
    return;
 80042fc:	46c0      	nop			@ (mov r8, r8)
  }
}
 80042fe:	46bd      	mov	sp, r7
 8004300:	b002      	add	sp, #8
 8004302:	bd80      	pop	{r7, pc}
 8004304:	200003f4 	.word	0x200003f4
 8004308:	20000500 	.word	0x20000500
 800430c:	20000501 	.word	0x20000501
 8004310:	50000400 	.word	0x50000400
 8004314:	200004fc 	.word	0x200004fc

08004318 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800431c:	4b11      	ldr	r3, [pc, #68]	@ (8004364 <MX_RTC_Init+0x4c>)
 800431e:	4a12      	ldr	r2, [pc, #72]	@ (8004368 <MX_RTC_Init+0x50>)
 8004320:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8004322:	4b10      	ldr	r3, [pc, #64]	@ (8004364 <MX_RTC_Init+0x4c>)
 8004324:	2200      	movs	r2, #0
 8004326:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8004328:	4b0e      	ldr	r3, [pc, #56]	@ (8004364 <MX_RTC_Init+0x4c>)
 800432a:	227f      	movs	r2, #127	@ 0x7f
 800432c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800432e:	4b0d      	ldr	r3, [pc, #52]	@ (8004364 <MX_RTC_Init+0x4c>)
 8004330:	22ff      	movs	r2, #255	@ 0xff
 8004332:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8004334:	4b0b      	ldr	r3, [pc, #44]	@ (8004364 <MX_RTC_Init+0x4c>)
 8004336:	2200      	movs	r2, #0
 8004338:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800433a:	4b0a      	ldr	r3, [pc, #40]	@ (8004364 <MX_RTC_Init+0x4c>)
 800433c:	2200      	movs	r2, #0
 800433e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8004340:	4b08      	ldr	r3, [pc, #32]	@ (8004364 <MX_RTC_Init+0x4c>)
 8004342:	2200      	movs	r2, #0
 8004344:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8004346:	4b07      	ldr	r3, [pc, #28]	@ (8004364 <MX_RTC_Init+0x4c>)
 8004348:	2200      	movs	r2, #0
 800434a:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800434c:	4b05      	ldr	r3, [pc, #20]	@ (8004364 <MX_RTC_Init+0x4c>)
 800434e:	0018      	movs	r0, r3
 8004350:	f006 f846 	bl	800a3e0 <HAL_RTC_Init>
 8004354:	1e03      	subs	r3, r0, #0
 8004356:	d001      	beq.n	800435c <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8004358:	f7ff fcfa 	bl	8003d50 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800435c:	46c0      	nop			@ (mov r8, r8)
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}
 8004362:	46c0      	nop			@ (mov r8, r8)
 8004364:	20000504 	.word	0x20000504
 8004368:	40002800 	.word	0x40002800

0800436c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b082      	sub	sp, #8
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a06      	ldr	r2, [pc, #24]	@ (8004394 <HAL_RTC_MspInit+0x28>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d106      	bne.n	800438c <HAL_RTC_MspInit+0x20>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800437e:	4b06      	ldr	r3, [pc, #24]	@ (8004398 <HAL_RTC_MspInit+0x2c>)
 8004380:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004382:	4b05      	ldr	r3, [pc, #20]	@ (8004398 <HAL_RTC_MspInit+0x2c>)
 8004384:	2180      	movs	r1, #128	@ 0x80
 8004386:	02c9      	lsls	r1, r1, #11
 8004388:	430a      	orrs	r2, r1
 800438a:	651a      	str	r2, [r3, #80]	@ 0x50
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800438c:	46c0      	nop			@ (mov r8, r8)
 800438e:	46bd      	mov	sp, r7
 8004390:	b002      	add	sp, #8
 8004392:	bd80      	pop	{r7, pc}
 8004394:	40002800 	.word	0x40002800
 8004398:	40021000 	.word	0x40021000

0800439c <GasIndexAlgorithm_init_with_sampling_interval>:
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample);

void GasIndexAlgorithm_init_with_sampling_interval(
    GasIndexAlgorithmParams* params, int32_t algorithm_type,
    float sampling_interval) {
 800439c:	b580      	push	{r7, lr}
 800439e:	b084      	sub	sp, #16
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	60f8      	str	r0, [r7, #12]
 80043a4:	60b9      	str	r1, [r7, #8]
 80043a6:	607a      	str	r2, [r7, #4]
    params->mAlgorithm_Type = algorithm_type;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	68ba      	ldr	r2, [r7, #8]
 80043ac:	601a      	str	r2, [r3, #0]
    params->mSamplingInterval = sampling_interval;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	687a      	ldr	r2, [r7, #4]
 80043b2:	605a      	str	r2, [r3, #4]
    if ((algorithm_type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	2b01      	cmp	r3, #1
 80043b8:	d113      	bne.n	80043e2 <GasIndexAlgorithm_init_with_sampling_interval+0x46>
        params->mIndex_Offset = GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	22fe      	movs	r2, #254	@ 0xfe
 80043be:	0592      	lsls	r2, r2, #22
 80043c0:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_NOX_SRAW_MINIMUM;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	4a1a      	ldr	r2, [pc, #104]	@ (8004430 <GasIndexAlgorithm_init_with_sampling_interval+0x94>)
 80043c6:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	4a1a      	ldr	r2, [pc, #104]	@ (8004434 <GasIndexAlgorithm_init_with_sampling_interval+0x98>)
 80043cc:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_NOX_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_NOX;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	4a19      	ldr	r2, [pc, #100]	@ (8004438 <GasIndexAlgorithm_init_with_sampling_interval+0x9c>)
 80043d2:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	4a19      	ldr	r2, [pc, #100]	@ (800443c <GasIndexAlgorithm_init_with_sampling_interval+0xa0>)
 80043d8:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_NOX;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_NOX;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	4a18      	ldr	r2, [pc, #96]	@ (8004440 <GasIndexAlgorithm_init_with_sampling_interval+0xa4>)
 80043de:	61da      	str	r2, [r3, #28]
 80043e0:	e011      	b.n	8004406 <GasIndexAlgorithm_init_with_sampling_interval+0x6a>
    } else {
        params->mIndex_Offset = GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	4a17      	ldr	r2, [pc, #92]	@ (8004444 <GasIndexAlgorithm_init_with_sampling_interval+0xa8>)
 80043e6:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_VOC_SRAW_MINIMUM;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	4a17      	ldr	r2, [pc, #92]	@ (8004448 <GasIndexAlgorithm_init_with_sampling_interval+0xac>)
 80043ec:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	4a16      	ldr	r2, [pc, #88]	@ (800444c <GasIndexAlgorithm_init_with_sampling_interval+0xb0>)
 80043f2:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_VOC_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_VOC;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	4a16      	ldr	r2, [pc, #88]	@ (8004450 <GasIndexAlgorithm_init_with_sampling_interval+0xb4>)
 80043f8:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	4a15      	ldr	r2, [pc, #84]	@ (8004454 <GasIndexAlgorithm_init_with_sampling_interval+0xb8>)
 80043fe:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_VOC;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_VOC;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	4a15      	ldr	r2, [pc, #84]	@ (8004458 <GasIndexAlgorithm_init_with_sampling_interval+0xbc>)
 8004404:	61da      	str	r2, [r3, #28]
    }
    params->mIndex_Gain = GasIndexAlgorithm_INDEX_GAIN;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	4a14      	ldr	r2, [pc, #80]	@ (800445c <GasIndexAlgorithm_init_with_sampling_interval+0xc0>)
 800440a:	621a      	str	r2, [r3, #32]
    params->mTau_Mean_Hours = GasIndexAlgorithm_TAU_MEAN_HOURS;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	4a14      	ldr	r2, [pc, #80]	@ (8004460 <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 8004410:	625a      	str	r2, [r3, #36]	@ 0x24
    params->mTau_Variance_Hours = GasIndexAlgorithm_TAU_VARIANCE_HOURS;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	4a12      	ldr	r2, [pc, #72]	@ (8004460 <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 8004416:	629a      	str	r2, [r3, #40]	@ 0x28
    params->mSraw_Std_Initial = GasIndexAlgorithm_SRAW_STD_INITIAL;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	4a12      	ldr	r2, [pc, #72]	@ (8004464 <GasIndexAlgorithm_init_with_sampling_interval+0xc8>)
 800441c:	62da      	str	r2, [r3, #44]	@ 0x2c
    GasIndexAlgorithm_reset(params);
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	0018      	movs	r0, r3
 8004422:	f000 f831 	bl	8004488 <GasIndexAlgorithm_reset>
}
 8004426:	46c0      	nop			@ (mov r8, r8)
 8004428:	46bd      	mov	sp, r7
 800442a:	b004      	add	sp, #16
 800442c:	bd80      	pop	{r7, pc}
 800442e:	46c0      	nop			@ (mov r8, r8)
 8004430:	00002710 	.word	0x00002710
 8004434:	44340000 	.word	0x44340000
 8004438:	46859800 	.word	0x46859800
 800443c:	46a05000 	.word	0x46a05000
 8004440:	41f00000 	.word	0x41f00000
 8004444:	42c80000 	.word	0x42c80000
 8004448:	00004e20 	.word	0x00004e20
 800444c:	43340000 	.word	0x43340000
 8004450:	4528c000 	.word	0x4528c000
 8004454:	45a32000 	.word	0x45a32000
 8004458:	43aa0000 	.word	0x43aa0000
 800445c:	43660000 	.word	0x43660000
 8004460:	41400000 	.word	0x41400000
 8004464:	42480000 	.word	0x42480000

08004468 <GasIndexAlgorithm_init>:

void GasIndexAlgorithm_init(GasIndexAlgorithmParams* params,
                            int32_t algorithm_type) {
 8004468:	b580      	push	{r7, lr}
 800446a:	b082      	sub	sp, #8
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
 8004470:	6039      	str	r1, [r7, #0]
    GasIndexAlgorithm_init_with_sampling_interval(
 8004472:	22fe      	movs	r2, #254	@ 0xfe
 8004474:	0592      	lsls	r2, r2, #22
 8004476:	6839      	ldr	r1, [r7, #0]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	0018      	movs	r0, r3
 800447c:	f7ff ff8e 	bl	800439c <GasIndexAlgorithm_init_with_sampling_interval>
        params, algorithm_type, GasIndexAlgorithm_DEFAULT_SAMPLING_INTERVAL);
}
 8004480:	46c0      	nop			@ (mov r8, r8)
 8004482:	46bd      	mov	sp, r7
 8004484:	b002      	add	sp, #8
 8004486:	bd80      	pop	{r7, pc}

08004488 <GasIndexAlgorithm_reset>:

void GasIndexAlgorithm_reset(GasIndexAlgorithmParams* params) {
 8004488:	b580      	push	{r7, lr}
 800448a:	b082      	sub	sp, #8
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
    params->mUptime = 0.f;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2200      	movs	r2, #0
 8004494:	631a      	str	r2, [r3, #48]	@ 0x30
    params->mSraw = 0.f;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2200      	movs	r2, #0
 800449a:	635a      	str	r2, [r3, #52]	@ 0x34
    params->mGas_Index = 0;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2200      	movs	r2, #0
 80044a0:	639a      	str	r2, [r3, #56]	@ 0x38
    GasIndexAlgorithm__init_instances(params);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	0018      	movs	r0, r3
 80044a6:	f000 f805 	bl	80044b4 <GasIndexAlgorithm__init_instances>
}
 80044aa:	46c0      	nop			@ (mov r8, r8)
 80044ac:	46bd      	mov	sp, r7
 80044ae:	b002      	add	sp, #8
 80044b0:	bd80      	pop	{r7, pc}
	...

080044b4 <GasIndexAlgorithm__init_instances>:

static void GasIndexAlgorithm__init_instances(GasIndexAlgorithmParams* params) {
 80044b4:	b590      	push	{r4, r7, lr}
 80044b6:	b083      	sub	sp, #12
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]

    GasIndexAlgorithm__mean_variance_estimator__set_parameters(params);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	0018      	movs	r0, r3
 80044c0:	f000 f8e8 	bl	8004694 <GasIndexAlgorithm__mean_variance_estimator__set_parameters>
    GasIndexAlgorithm__mox_model__set_parameters(
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	0018      	movs	r0, r3
 80044c8:	f000 f9a6 	bl	8004818 <GasIndexAlgorithm__mean_variance_estimator__get_std>
 80044cc:	1c04      	adds	r4, r0, #0
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	0018      	movs	r0, r3
 80044d2:	f000 f9ab 	bl	800482c <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 80044d6:	1c02      	adds	r2, r0, #0
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	1c21      	adds	r1, r4, #0
 80044dc:	0018      	movs	r0, r3
 80044de:	f000 fc3b 	bl	8004d58 <GasIndexAlgorithm__mox_model__set_parameters>
        params, GasIndexAlgorithm__mean_variance_estimator__get_std(params),
        GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	d107      	bne.n	80044fa <GasIndexAlgorithm__init_instances+0x46>
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 80044ea:	23fe      	movs	r3, #254	@ 0xfe
 80044ec:	059b      	lsls	r3, r3, #22
 80044ee:	4a0a      	ldr	r2, [pc, #40]	@ (8004518 <GasIndexAlgorithm__init_instances+0x64>)
 80044f0:	490a      	ldr	r1, [pc, #40]	@ (800451c <GasIndexAlgorithm__init_instances+0x68>)
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	f000 fc86 	bl	8004e04 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
 80044f8:	e005      	b.n	8004506 <GasIndexAlgorithm__init_instances+0x52>
            params, GasIndexAlgorithm_SIGMOID_X0_NOX,
            GasIndexAlgorithm_SIGMOID_K_NOX,
            GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT);
    } else {
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 80044fa:	4b09      	ldr	r3, [pc, #36]	@ (8004520 <GasIndexAlgorithm__init_instances+0x6c>)
 80044fc:	4a09      	ldr	r2, [pc, #36]	@ (8004524 <GasIndexAlgorithm__init_instances+0x70>)
 80044fe:	490a      	ldr	r1, [pc, #40]	@ (8004528 <GasIndexAlgorithm__init_instances+0x74>)
 8004500:	6878      	ldr	r0, [r7, #4]
 8004502:	f000 fc7f 	bl	8004e04 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
            params, GasIndexAlgorithm_SIGMOID_X0_VOC,
            GasIndexAlgorithm_SIGMOID_K_VOC,
            GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT);
    }
    GasIndexAlgorithm__adaptive_lowpass__set_parameters(params);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	0018      	movs	r0, r3
 800450a:	f000 fd35 	bl	8004f78 <GasIndexAlgorithm__adaptive_lowpass__set_parameters>
}
 800450e:	46c0      	nop			@ (mov r8, r8)
 8004510:	46bd      	mov	sp, r7
 8004512:	b003      	add	sp, #12
 8004514:	bd90      	pop	{r4, r7, pc}
 8004516:	46c0      	nop			@ (mov r8, r8)
 8004518:	bc257a78 	.word	0xbc257a78
 800451c:	44198000 	.word	0x44198000
 8004520:	42c80000 	.word	0x42c80000
 8004524:	bbd4fdf4 	.word	0xbbd4fdf4
 8004528:	43550000 	.word	0x43550000

0800452c <GasIndexAlgorithm_process>:
    *gain_factor = ((int32_t)(params->mIndex_Gain));
    return;
}

void GasIndexAlgorithm_process(GasIndexAlgorithmParams* params, int32_t sraw,
                               int32_t* gas_index) {
 800452c:	b590      	push	{r4, r7, lr}
 800452e:	b085      	sub	sp, #20
 8004530:	af00      	add	r7, sp, #0
 8004532:	60f8      	str	r0, [r7, #12]
 8004534:	60b9      	str	r1, [r7, #8]
 8004536:	607a      	str	r2, [r7, #4]

    if ((params->mUptime <= GasIndexAlgorithm_INITIAL_BLACKOUT)) {
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800453c:	4952      	ldr	r1, [pc, #328]	@ (8004688 <GasIndexAlgorithm_process+0x15c>)
 800453e:	1c18      	adds	r0, r3, #0
 8004540:	f7fb ffce 	bl	80004e0 <__aeabi_fcmple>
 8004544:	1e03      	subs	r3, r0, #0
 8004546:	d00c      	beq.n	8004562 <GasIndexAlgorithm_process+0x36>
        params->mUptime = (params->mUptime + params->mSamplingInterval);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	1c19      	adds	r1, r3, #0
 8004552:	1c10      	adds	r0, r2, #0
 8004554:	f7fc f8fc 	bl	8000750 <__aeabi_fadd>
 8004558:	1c03      	adds	r3, r0, #0
 800455a:	1c1a      	adds	r2, r3, #0
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	631a      	str	r2, [r3, #48]	@ 0x30
 8004560:	e080      	b.n	8004664 <GasIndexAlgorithm_process+0x138>
    } else {
        if (((sraw > 0) && (sraw < 65000))) {
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	2b00      	cmp	r3, #0
 8004566:	dd25      	ble.n	80045b4 <GasIndexAlgorithm_process+0x88>
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	4a48      	ldr	r2, [pc, #288]	@ (800468c <GasIndexAlgorithm_process+0x160>)
 800456c:	4293      	cmp	r3, r2
 800456e:	dc21      	bgt.n	80045b4 <GasIndexAlgorithm_process+0x88>
            if ((sraw < (params->mSraw_Minimum + 1))) {
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	68db      	ldr	r3, [r3, #12]
 8004574:	68ba      	ldr	r2, [r7, #8]
 8004576:	429a      	cmp	r2, r3
 8004578:	dc04      	bgt.n	8004584 <GasIndexAlgorithm_process+0x58>
                sraw = (params->mSraw_Minimum + 1);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	68db      	ldr	r3, [r3, #12]
 800457e:	3301      	adds	r3, #1
 8004580:	60bb      	str	r3, [r7, #8]
 8004582:	e00d      	b.n	80045a0 <GasIndexAlgorithm_process+0x74>
            } else if ((sraw > (params->mSraw_Minimum + 32767))) {
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	68db      	ldr	r3, [r3, #12]
 8004588:	4a41      	ldr	r2, [pc, #260]	@ (8004690 <GasIndexAlgorithm_process+0x164>)
 800458a:	4694      	mov	ip, r2
 800458c:	4463      	add	r3, ip
 800458e:	68ba      	ldr	r2, [r7, #8]
 8004590:	429a      	cmp	r2, r3
 8004592:	dd05      	ble.n	80045a0 <GasIndexAlgorithm_process+0x74>
                sraw = (params->mSraw_Minimum + 32767);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	68db      	ldr	r3, [r3, #12]
 8004598:	4a3d      	ldr	r2, [pc, #244]	@ (8004690 <GasIndexAlgorithm_process+0x164>)
 800459a:	4694      	mov	ip, r2
 800459c:	4463      	add	r3, ip
 800459e:	60bb      	str	r3, [r7, #8]
            }
            params->mSraw = ((float)((sraw - params->mSraw_Minimum)));
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	68db      	ldr	r3, [r3, #12]
 80045a4:	68ba      	ldr	r2, [r7, #8]
 80045a6:	1ad3      	subs	r3, r2, r3
 80045a8:	0018      	movs	r0, r3
 80045aa:	f7fc ff59 	bl	8001460 <__aeabi_i2f>
 80045ae:	1c02      	adds	r2, r0, #0
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	635a      	str	r2, [r3, #52]	@ 0x34
        }
        if (((params->mAlgorithm_Type ==
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d005      	beq.n	80045c8 <GasIndexAlgorithm_process+0x9c>
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
             GasIndexAlgorithm__mean_variance_estimator__is_initialized(
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	0018      	movs	r0, r3
 80045c0:	f000 f945 	bl	800484e <GasIndexAlgorithm__mean_variance_estimator__is_initialized>
 80045c4:	1e03      	subs	r3, r0, #0
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
 80045c6:	d014      	beq.n	80045f2 <GasIndexAlgorithm_process+0xc6>
                 params))) {
            params->mGas_Index =
                GasIndexAlgorithm__mox_model__process(params, params->mSraw);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	1c11      	adds	r1, r2, #0
 80045d0:	0018      	movs	r0, r3
 80045d2:	f000 fbd1 	bl	8004d78 <GasIndexAlgorithm__mox_model__process>
 80045d6:	1c02      	adds	r2, r0, #0
            params->mGas_Index =
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	639a      	str	r2, [r3, #56]	@ 0x38
            params->mGas_Index = GasIndexAlgorithm__sigmoid_scaled__process(
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	1c11      	adds	r1, r2, #0
 80045e4:	0018      	movs	r0, r3
 80045e6:	f000 fc25 	bl	8004e34 <GasIndexAlgorithm__sigmoid_scaled__process>
 80045ea:	1c02      	adds	r2, r0, #0
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	639a      	str	r2, [r3, #56]	@ 0x38
 80045f0:	e003      	b.n	80045fa <GasIndexAlgorithm_process+0xce>
                params, params->mGas_Index);
        } else {
            params->mGas_Index = params->mIndex_Offset;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	689a      	ldr	r2, [r3, #8]
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        params->mGas_Index = GasIndexAlgorithm__adaptive_lowpass__process(
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	1c11      	adds	r1, r2, #0
 8004602:	0018      	movs	r0, r3
 8004604:	f000 fcec 	bl	8004fe0 <GasIndexAlgorithm__adaptive_lowpass__process>
 8004608:	1c02      	adds	r2, r0, #0
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	639a      	str	r2, [r3, #56]	@ 0x38
            params, params->mGas_Index);
        if ((params->mGas_Index < 0.5f)) {
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004612:	21fc      	movs	r1, #252	@ 0xfc
 8004614:	0589      	lsls	r1, r1, #22
 8004616:	1c18      	adds	r0, r3, #0
 8004618:	f7fb ff58 	bl	80004cc <__aeabi_fcmplt>
 800461c:	1e03      	subs	r3, r0, #0
 800461e:	d003      	beq.n	8004628 <GasIndexAlgorithm_process+0xfc>
            params->mGas_Index = 0.5f;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	22fc      	movs	r2, #252	@ 0xfc
 8004624:	0592      	lsls	r2, r2, #22
 8004626:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        if ((params->mSraw > 0.f)) {
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800462c:	2100      	movs	r1, #0
 800462e:	1c18      	adds	r0, r3, #0
 8004630:	f7fb ff60 	bl	80004f4 <__aeabi_fcmpgt>
 8004634:	1e03      	subs	r3, r0, #0
 8004636:	d015      	beq.n	8004664 <GasIndexAlgorithm_process+0x138>
            GasIndexAlgorithm__mean_variance_estimator__process(params,
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	1c11      	adds	r1, r2, #0
 8004640:	0018      	movs	r0, r3
 8004642:	f000 fa4f 	bl	8004ae4 <GasIndexAlgorithm__mean_variance_estimator__process>
                                                                params->mSraw);
            GasIndexAlgorithm__mox_model__set_parameters(
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	0018      	movs	r0, r3
 800464a:	f000 f8e5 	bl	8004818 <GasIndexAlgorithm__mean_variance_estimator__get_std>
 800464e:	1c04      	adds	r4, r0, #0
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	0018      	movs	r0, r3
 8004654:	f000 f8ea 	bl	800482c <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 8004658:	1c02      	adds	r2, r0, #0
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	1c21      	adds	r1, r4, #0
 800465e:	0018      	movs	r0, r3
 8004660:	f000 fb7a 	bl	8004d58 <GasIndexAlgorithm__mox_model__set_parameters>
                params,
                GasIndexAlgorithm__mean_variance_estimator__get_std(params),
                GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
        }
    }
    *gas_index = ((int32_t)((params->mGas_Index + 0.5f)));
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004668:	21fc      	movs	r1, #252	@ 0xfc
 800466a:	0589      	lsls	r1, r1, #22
 800466c:	1c18      	adds	r0, r3, #0
 800466e:	f7fc f86f 	bl	8000750 <__aeabi_fadd>
 8004672:	1c03      	adds	r3, r0, #0
 8004674:	1c18      	adds	r0, r3, #0
 8004676:	f7fc fed3 	bl	8001420 <__aeabi_f2iz>
 800467a:	0002      	movs	r2, r0
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	601a      	str	r2, [r3, #0]
    return;
 8004680:	46c0      	nop			@ (mov r8, r8)
}
 8004682:	46bd      	mov	sp, r7
 8004684:	b005      	add	sp, #20
 8004686:	bd90      	pop	{r4, r7, pc}
 8004688:	42340000 	.word	0x42340000
 800468c:	0000fde7 	.word	0x0000fde7
 8004690:	00007fff 	.word	0x00007fff

08004694 <GasIndexAlgorithm__mean_variance_estimator__set_parameters>:

static void GasIndexAlgorithm__mean_variance_estimator__set_parameters(
    GasIndexAlgorithmParams* params) {
 8004694:	b5b0      	push	{r4, r5, r7, lr}
 8004696:	b082      	sub	sp, #8
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]

    params->m_Mean_Variance_Estimator___Initialized = false;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	223c      	movs	r2, #60	@ 0x3c
 80046a0:	2100      	movs	r1, #0
 80046a2:	5499      	strb	r1, [r3, r2]
    params->m_Mean_Variance_Estimator___Mean = 0.f;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2200      	movs	r2, #0
 80046a8:	641a      	str	r2, [r3, #64]	@ 0x40
    params->m_Mean_Variance_Estimator___Sraw_Offset = 0.f;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2200      	movs	r2, #0
 80046ae:	645a      	str	r2, [r3, #68]	@ 0x44
    params->m_Mean_Variance_Estimator___Std = params->mSraw_Std_Initial;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	649a      	str	r2, [r3, #72]	@ 0x48
    params->m_Mean_Variance_Estimator___Gamma_Mean =
        (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
          (params->mSamplingInterval / 3600.f)) /
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	4952      	ldr	r1, [pc, #328]	@ (8004808 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 80046be:	1c18      	adds	r0, r3, #0
 80046c0:	f7fc f9d0 	bl	8000a64 <__aeabi_fdiv>
 80046c4:	1c03      	adds	r3, r0, #0
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 80046c6:	2188      	movs	r1, #136	@ 0x88
 80046c8:	05c9      	lsls	r1, r1, #23
 80046ca:	1c18      	adds	r0, r3, #0
 80046cc:	f7fc fbb0 	bl	8000e30 <__aeabi_fmul>
 80046d0:	1c03      	adds	r3, r0, #0
 80046d2:	1c1d      	adds	r5, r3, #0
         (params->mTau_Mean_Hours + (params->mSamplingInterval / 3600.f)));
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	494a      	ldr	r1, [pc, #296]	@ (8004808 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 80046de:	1c18      	adds	r0, r3, #0
 80046e0:	f7fc f9c0 	bl	8000a64 <__aeabi_fdiv>
 80046e4:	1c03      	adds	r3, r0, #0
 80046e6:	1c19      	adds	r1, r3, #0
 80046e8:	1c20      	adds	r0, r4, #0
 80046ea:	f7fc f831 	bl	8000750 <__aeabi_fadd>
 80046ee:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 80046f0:	1c19      	adds	r1, r3, #0
 80046f2:	1c28      	adds	r0, r5, #0
 80046f4:	f7fc f9b6 	bl	8000a64 <__aeabi_fdiv>
 80046f8:	1c03      	adds	r3, r0, #0
 80046fa:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Mean =
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	64da      	str	r2, [r3, #76]	@ 0x4c
    params->m_Mean_Variance_Estimator___Gamma_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          (params->mSamplingInterval / 3600.f)) /
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	4940      	ldr	r1, [pc, #256]	@ (8004808 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 8004706:	1c18      	adds	r0, r3, #0
 8004708:	f7fc f9ac 	bl	8000a64 <__aeabi_fdiv>
 800470c:	1c03      	adds	r3, r0, #0
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 800470e:	2185      	movs	r1, #133	@ 0x85
 8004710:	05c9      	lsls	r1, r1, #23
 8004712:	1c18      	adds	r0, r3, #0
 8004714:	f7fc fb8c 	bl	8000e30 <__aeabi_fmul>
 8004718:	1c03      	adds	r3, r0, #0
 800471a:	1c1d      	adds	r5, r3, #0
         (params->mTau_Variance_Hours + (params->mSamplingInterval / 3600.f)));
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	4938      	ldr	r1, [pc, #224]	@ (8004808 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 8004726:	1c18      	adds	r0, r3, #0
 8004728:	f7fc f99c 	bl	8000a64 <__aeabi_fdiv>
 800472c:	1c03      	adds	r3, r0, #0
 800472e:	1c19      	adds	r1, r3, #0
 8004730:	1c20      	adds	r0, r4, #0
 8004732:	f7fc f80d 	bl	8000750 <__aeabi_fadd>
 8004736:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 8004738:	1c19      	adds	r1, r3, #0
 800473a:	1c28      	adds	r0, r5, #0
 800473c:	f7fc f992 	bl	8000a64 <__aeabi_fdiv>
 8004740:	1c03      	adds	r3, r0, #0
 8004742:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Variance =
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	651a      	str	r2, [r3, #80]	@ 0x50
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	2b01      	cmp	r3, #1
 800474e:	d118      	bne.n	8004782 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0xee>
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 8004754:	2188      	movs	r1, #136	@ 0x88
 8004756:	05c9      	lsls	r1, r1, #23
 8004758:	1c18      	adds	r0, r3, #0
 800475a:	f7fc fb69 	bl	8000e30 <__aeabi_fmul>
 800475e:	1c03      	adds	r3, r0, #0
 8004760:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
              params->mSamplingInterval));
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
 8004766:	4929      	ldr	r1, [pc, #164]	@ (800480c <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x178>)
 8004768:	1c18      	adds	r0, r3, #0
 800476a:	f7fb fff1 	bl	8000750 <__aeabi_fadd>
 800476e:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 8004770:	1c19      	adds	r1, r3, #0
 8004772:	1c20      	adds	r0, r4, #0
 8004774:	f7fc f976 	bl	8000a64 <__aeabi_fdiv>
 8004778:	1c03      	adds	r3, r0, #0
 800477a:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	655a      	str	r2, [r3, #84]	@ 0x54
 8004780:	e017      	b.n	80047b2 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x11e>
    } else {
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 8004786:	2188      	movs	r1, #136	@ 0x88
 8004788:	05c9      	lsls	r1, r1, #23
 800478a:	1c18      	adds	r0, r3, #0
 800478c:	f7fc fb50 	bl	8000e30 <__aeabi_fmul>
 8004790:	1c03      	adds	r3, r0, #0
 8004792:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
              params->mSamplingInterval));
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
 8004798:	491d      	ldr	r1, [pc, #116]	@ (8004810 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x17c>)
 800479a:	1c18      	adds	r0, r3, #0
 800479c:	f7fb ffd8 	bl	8000750 <__aeabi_fadd>
 80047a0:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 80047a2:	1c19      	adds	r1, r3, #0
 80047a4:	1c20      	adds	r0, r4, #0
 80047a6:	f7fc f95d 	bl	8000a64 <__aeabi_fdiv>
 80047aa:	1c03      	adds	r3, r0, #0
 80047ac:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          params->mSamplingInterval) /
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	685b      	ldr	r3, [r3, #4]
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 80047b6:	2185      	movs	r1, #133	@ 0x85
 80047b8:	05c9      	lsls	r1, r1, #23
 80047ba:	1c18      	adds	r0, r3, #0
 80047bc:	f7fc fb38 	bl	8000e30 <__aeabi_fmul>
 80047c0:	1c03      	adds	r3, r0, #0
 80047c2:	1c1c      	adds	r4, r3, #0
         (GasIndexAlgorithm_TAU_INITIAL_VARIANCE + params->mSamplingInterval));
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	4912      	ldr	r1, [pc, #72]	@ (8004814 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x180>)
 80047ca:	1c18      	adds	r0, r3, #0
 80047cc:	f7fb ffc0 	bl	8000750 <__aeabi_fadd>
 80047d0:	1c03      	adds	r3, r0, #0
          params->mSamplingInterval) /
 80047d2:	1c19      	adds	r1, r3, #0
 80047d4:	1c20      	adds	r0, r4, #0
 80047d6:	f7fc f945 	bl	8000a64 <__aeabi_fdiv>
 80047da:	1c03      	adds	r3, r0, #0
 80047dc:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	659a      	str	r2, [r3, #88]	@ 0x58
    params->m_Mean_Variance_Estimator__Gamma_Mean = 0.f;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2200      	movs	r2, #0
 80047e6:	65da      	str	r2, [r3, #92]	@ 0x5c
    params->m_Mean_Variance_Estimator__Gamma_Variance = 0.f;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2200      	movs	r2, #0
 80047ec:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Uptime_Gamma = 0.f;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2200      	movs	r2, #0
 80047f2:	665a      	str	r2, [r3, #100]	@ 0x64
    params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2200      	movs	r2, #0
 80047f8:	669a      	str	r2, [r3, #104]	@ 0x68
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2200      	movs	r2, #0
 80047fe:	66da      	str	r2, [r3, #108]	@ 0x6c
}
 8004800:	46c0      	nop			@ (mov r8, r8)
 8004802:	46bd      	mov	sp, r7
 8004804:	b002      	add	sp, #8
 8004806:	bdb0      	pop	{r4, r5, r7, pc}
 8004808:	45610000 	.word	0x45610000
 800480c:	44960000 	.word	0x44960000
 8004810:	41a00000 	.word	0x41a00000
 8004814:	451c4000 	.word	0x451c4000

08004818 <GasIndexAlgorithm__mean_variance_estimator__get_std>:
    params->m_Mean_Variance_Estimator___Uptime_Gamma = uptime_gamma;
    params->m_Mean_Variance_Estimator___Initialized = true;
}

static float GasIndexAlgorithm__mean_variance_estimator__get_std(
    const GasIndexAlgorithmParams* params) {
 8004818:	b580      	push	{r7, lr}
 800481a:	b082      	sub	sp, #8
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Std;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
}
 8004824:	1c18      	adds	r0, r3, #0
 8004826:	46bd      	mov	sp, r7
 8004828:	b002      	add	sp, #8
 800482a:	bd80      	pop	{r7, pc}

0800482c <GasIndexAlgorithm__mean_variance_estimator__get_mean>:

static float GasIndexAlgorithm__mean_variance_estimator__get_mean(
    const GasIndexAlgorithmParams* params) {
 800482c:	b580      	push	{r7, lr}
 800482e:	b082      	sub	sp, #8
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]

    return (params->m_Mean_Variance_Estimator___Mean +
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
            params->m_Mean_Variance_Estimator___Sraw_Offset);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    return (params->m_Mean_Variance_Estimator___Mean +
 800483c:	1c19      	adds	r1, r3, #0
 800483e:	1c10      	adds	r0, r2, #0
 8004840:	f7fb ff86 	bl	8000750 <__aeabi_fadd>
 8004844:	1c03      	adds	r3, r0, #0
}
 8004846:	1c18      	adds	r0, r3, #0
 8004848:	46bd      	mov	sp, r7
 800484a:	b002      	add	sp, #8
 800484c:	bd80      	pop	{r7, pc}

0800484e <GasIndexAlgorithm__mean_variance_estimator__is_initialized>:

static bool GasIndexAlgorithm__mean_variance_estimator__is_initialized(
    GasIndexAlgorithmParams* params) {
 800484e:	b580      	push	{r7, lr}
 8004850:	b082      	sub	sp, #8
 8004852:	af00      	add	r7, sp, #0
 8004854:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Initialized;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	223c      	movs	r2, #60	@ 0x3c
 800485a:	5c9b      	ldrb	r3, [r3, r2]
}
 800485c:	0018      	movs	r0, r3
 800485e:	46bd      	mov	sp, r7
 8004860:	b002      	add	sp, #8
 8004862:	bd80      	pop	{r7, pc}

08004864 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>:

static void GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(
    GasIndexAlgorithmParams* params) {
 8004864:	b5b0      	push	{r4, r5, r7, lr}
 8004866:	b08c      	sub	sp, #48	@ 0x30
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
    float gamma_variance;
    float gating_threshold_variance;
    float sigmoid_gating_variance;

    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
                    params->mSamplingInterval);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	685b      	ldr	r3, [r3, #4]
    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
 8004870:	1c19      	adds	r1, r3, #0
 8004872:	4895      	ldr	r0, [pc, #596]	@ (8004ac8 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x264>)
 8004874:	f7fc fc1a 	bl	80010ac <__aeabi_fsub>
 8004878:	1c03      	adds	r3, r0, #0
 800487a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if ((params->m_Mean_Variance_Estimator___Uptime_Gamma < uptime_limit)) {
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004880:	1c19      	adds	r1, r3, #0
 8004882:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004884:	f7fb fe36 	bl	80004f4 <__aeabi_fcmpgt>
 8004888:	1e03      	subs	r3, r0, #0
 800488a:	d00b      	beq.n	80048a4 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x40>
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
             params->mSamplingInterval);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 8004894:	1c19      	adds	r1, r3, #0
 8004896:	1c10      	adds	r0, r2, #0
 8004898:	f7fb ff5a 	bl	8000750 <__aeabi_fadd>
 800489c:	1c03      	adds	r3, r0, #0
 800489e:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    if ((params->m_Mean_Variance_Estimator___Uptime_Gating < uptime_limit)) {
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80048a8:	1c19      	adds	r1, r3, #0
 80048aa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80048ac:	f7fb fe22 	bl	80004f4 <__aeabi_fcmpgt>
 80048b0:	1e03      	subs	r3, r0, #0
 80048b2:	d00b      	beq.n	80048cc <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x68>
        params->m_Mean_Variance_Estimator___Uptime_Gating =
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
             params->mSamplingInterval);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 80048bc:	1c19      	adds	r1, r3, #0
 80048be:	1c10      	adds	r0, r2, #0
 80048c0:	f7fb ff46 	bl	8000750 <__aeabi_fadd>
 80048c4:	1c03      	adds	r3, r0, #0
 80048c6:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gating =
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6959      	ldr	r1, [r3, #20]
 80048d0:	4a7e      	ldr	r2, [pc, #504]	@ (8004acc <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	0018      	movs	r0, r3
 80048d6:	f000 f9f1 	bl	8004cbc <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Mean,
        GasIndexAlgorithm_INIT_TRANSITION_MEAN);
    sigmoid_gamma_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	1c11      	adds	r1, r2, #0
 80048e2:	0018      	movs	r0, r3
 80048e4:	f000 f9fa 	bl	8004cdc <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 80048e8:	1c03      	adds	r3, r0, #0
 80048ea:	62bb      	str	r3, [r7, #40]	@ 0x28
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 80048f8:	1c19      	adds	r1, r3, #0
 80048fa:	1c10      	adds	r0, r2, #0
 80048fc:	f7fc fbd6 	bl	80010ac <__aeabi_fsub>
 8004900:	1c03      	adds	r3, r0, #0
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 8004902:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004904:	1c18      	adds	r0, r3, #0
 8004906:	f7fc fa93 	bl	8000e30 <__aeabi_fmul>
 800490a:	1c03      	adds	r3, r0, #0
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 800490c:	1c19      	adds	r1, r3, #0
 800490e:	1c20      	adds	r0, r4, #0
 8004910:	f7fb ff1e 	bl	8000750 <__aeabi_fadd>
 8004914:	1c03      	adds	r3, r0, #0
 8004916:	627b      	str	r3, [r7, #36]	@ 0x24
                   sigmoid_gamma_mean));
    gating_threshold_mean =
        (params->mGating_Threshold +
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 8004920:	1c19      	adds	r1, r3, #0
 8004922:	486b      	ldr	r0, [pc, #428]	@ (8004ad0 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 8004924:	f7fc fbc2 	bl	80010ac <__aeabi_fsub>
 8004928:	1c03      	adds	r3, r0, #0
 800492a:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	1c11      	adds	r1, r2, #0
 8004934:	0018      	movs	r0, r3
 8004936:	f000 f9d1 	bl	8004cdc <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800493a:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 800493c:	1c19      	adds	r1, r3, #0
 800493e:	1c28      	adds	r0, r5, #0
 8004940:	f7fc fa76 	bl	8000e30 <__aeabi_fmul>
 8004944:	1c03      	adds	r3, r0, #0
    gating_threshold_mean =
 8004946:	1c19      	adds	r1, r3, #0
 8004948:	1c20      	adds	r0, r4, #0
 800494a:	f7fb ff01 	bl	8000750 <__aeabi_fadd>
 800494e:	1c03      	adds	r3, r0, #0
 8004950:	623b      	str	r3, [r7, #32]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 8004952:	4a60      	ldr	r2, [pc, #384]	@ (8004ad4 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 8004954:	6a39      	ldr	r1, [r7, #32]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	0018      	movs	r0, r3
 800495a:	f000 f9af 	bl	8004cbc <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_mean,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	1c11      	adds	r1, r2, #0
 8004966:	0018      	movs	r0, r3
 8004968:	f000 f9b8 	bl	8004cdc <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800496c:	1c03      	adds	r3, r0, #0
 800496e:	61fb      	str	r3, [r7, #28]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Mean =
        (sigmoid_gating_mean * gamma_mean);
 8004970:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004972:	69f8      	ldr	r0, [r7, #28]
 8004974:	f7fc fa5c 	bl	8000e30 <__aeabi_fmul>
 8004978:	1c03      	adds	r3, r0, #0
 800497a:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Mean =
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	65da      	str	r2, [r3, #92]	@ 0x5c
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6999      	ldr	r1, [r3, #24]
 8004984:	4a51      	ldr	r2, [pc, #324]	@ (8004acc <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	0018      	movs	r0, r3
 800498a:	f000 f997 	bl	8004cbc <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Variance,
        GasIndexAlgorithm_INIT_TRANSITION_VARIANCE);
    sigmoid_gamma_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	1c11      	adds	r1, r2, #0
 8004996:	0018      	movs	r0, r3
 8004998:	f000 f9a0 	bl	8004cdc <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800499c:	1c03      	adds	r3, r0, #0
 800499e:	61bb      	str	r3, [r7, #24]
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_variance =
        (params->m_Mean_Variance_Estimator___Gamma_Variance +
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6d1c      	ldr	r4, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 80049ac:	1c19      	adds	r1, r3, #0
 80049ae:	1c10      	adds	r0, r2, #0
 80049b0:	f7fc fb7c 	bl	80010ac <__aeabi_fsub>
 80049b4:	1c03      	adds	r3, r0, #0
 80049b6:	1c1d      	adds	r5, r3, #0
          (sigmoid_gamma_variance - sigmoid_gamma_mean)));
 80049b8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80049ba:	69b8      	ldr	r0, [r7, #24]
 80049bc:	f7fc fb76 	bl	80010ac <__aeabi_fsub>
 80049c0:	1c03      	adds	r3, r0, #0
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 80049c2:	1c19      	adds	r1, r3, #0
 80049c4:	1c28      	adds	r0, r5, #0
 80049c6:	f7fc fa33 	bl	8000e30 <__aeabi_fmul>
 80049ca:	1c03      	adds	r3, r0, #0
    gamma_variance =
 80049cc:	1c19      	adds	r1, r3, #0
 80049ce:	1c20      	adds	r0, r4, #0
 80049d0:	f7fb febe 	bl	8000750 <__aeabi_fadd>
 80049d4:	1c03      	adds	r3, r0, #0
 80049d6:	617b      	str	r3, [r7, #20]
    gating_threshold_variance =
        (params->mGating_Threshold +
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 80049e0:	1c19      	adds	r1, r3, #0
 80049e2:	483b      	ldr	r0, [pc, #236]	@ (8004ad0 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 80049e4:	f7fc fb62 	bl	80010ac <__aeabi_fsub>
 80049e8:	1c03      	adds	r3, r0, #0
 80049ea:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	1c11      	adds	r1, r2, #0
 80049f4:	0018      	movs	r0, r3
 80049f6:	f000 f971 	bl	8004cdc <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 80049fa:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 80049fc:	1c19      	adds	r1, r3, #0
 80049fe:	1c28      	adds	r0, r5, #0
 8004a00:	f7fc fa16 	bl	8000e30 <__aeabi_fmul>
 8004a04:	1c03      	adds	r3, r0, #0
    gating_threshold_variance =
 8004a06:	1c19      	adds	r1, r3, #0
 8004a08:	1c20      	adds	r0, r4, #0
 8004a0a:	f7fb fea1 	bl	8000750 <__aeabi_fadd>
 8004a0e:	1c03      	adds	r3, r0, #0
 8004a10:	613b      	str	r3, [r7, #16]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 8004a12:	4a30      	ldr	r2, [pc, #192]	@ (8004ad4 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 8004a14:	6939      	ldr	r1, [r7, #16]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	0018      	movs	r0, r3
 8004a1a:	f000 f94f 	bl	8004cbc <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_variance,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	1c11      	adds	r1, r2, #0
 8004a26:	0018      	movs	r0, r3
 8004a28:	f000 f958 	bl	8004cdc <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8004a2c:	1c03      	adds	r3, r0, #0
 8004a2e:	60fb      	str	r3, [r7, #12]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Variance =
        (sigmoid_gating_variance * gamma_variance);
 8004a30:	6979      	ldr	r1, [r7, #20]
 8004a32:	68f8      	ldr	r0, [r7, #12]
 8004a34:	f7fc f9fc 	bl	8000e30 <__aeabi_fmul>
 8004a38:	1c03      	adds	r3, r0, #0
 8004a3a:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Variance =
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6edc      	ldr	r4, [r3, #108]	@ 0x6c
         ((params->mSamplingInterval / 60.f) *
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	4923      	ldr	r1, [pc, #140]	@ (8004ad8 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x274>)
 8004a4a:	1c18      	adds	r0, r3, #0
 8004a4c:	f7fc f80a 	bl	8000a64 <__aeabi_fdiv>
 8004a50:	1c03      	adds	r3, r0, #0
 8004a52:	1c1d      	adds	r5, r3, #0
          (((1.f - sigmoid_gating_mean) *
 8004a54:	69f9      	ldr	r1, [r7, #28]
 8004a56:	20fe      	movs	r0, #254	@ 0xfe
 8004a58:	0580      	lsls	r0, r0, #22
 8004a5a:	f7fc fb27 	bl	80010ac <__aeabi_fsub>
 8004a5e:	1c03      	adds	r3, r0, #0
 8004a60:	491e      	ldr	r1, [pc, #120]	@ (8004adc <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x278>)
 8004a62:	1c18      	adds	r0, r3, #0
 8004a64:	f7fc f9e4 	bl	8000e30 <__aeabi_fmul>
 8004a68:	1c03      	adds	r3, r0, #0
            (1.f + GasIndexAlgorithm_GATING_MAX_RATIO)) -
 8004a6a:	491d      	ldr	r1, [pc, #116]	@ (8004ae0 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x27c>)
 8004a6c:	1c18      	adds	r0, r3, #0
 8004a6e:	f7fc fb1d 	bl	80010ac <__aeabi_fsub>
 8004a72:	1c03      	adds	r3, r0, #0
         ((params->mSamplingInterval / 60.f) *
 8004a74:	1c19      	adds	r1, r3, #0
 8004a76:	1c28      	adds	r0, r5, #0
 8004a78:	f7fc f9da 	bl	8000e30 <__aeabi_fmul>
 8004a7c:	1c03      	adds	r3, r0, #0
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 8004a7e:	1c19      	adds	r1, r3, #0
 8004a80:	1c20      	adds	r0, r4, #0
 8004a82:	f7fb fe65 	bl	8000750 <__aeabi_fadd>
 8004a86:	1c03      	adds	r3, r0, #0
 8004a88:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	66da      	str	r2, [r3, #108]	@ 0x6c
           GasIndexAlgorithm_GATING_MAX_RATIO)));
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes < 0.f)) {
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a92:	2100      	movs	r1, #0
 8004a94:	1c18      	adds	r0, r3, #0
 8004a96:	f7fb fd19 	bl	80004cc <__aeabi_fcmplt>
 8004a9a:	1e03      	subs	r3, r0, #0
 8004a9c:	d002      	beq.n	8004aa4 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x240>
        params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
         params->mGating_Max_Duration_Minutes)) {
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	691b      	ldr	r3, [r3, #16]
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 8004aac:	1c19      	adds	r1, r3, #0
 8004aae:	1c10      	adds	r0, r2, #0
 8004ab0:	f7fb fd20 	bl	80004f4 <__aeabi_fcmpgt>
 8004ab4:	1e03      	subs	r3, r0, #0
 8004ab6:	d100      	bne.n	8004aba <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x256>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
    }
}
 8004ab8:	e002      	b.n	8004ac0 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x25c>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2200      	movs	r2, #0
 8004abe:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004ac0:	46c0      	nop			@ (mov r8, r8)
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	b00c      	add	sp, #48	@ 0x30
 8004ac6:	bdb0      	pop	{r4, r5, r7, pc}
 8004ac8:	46fffe00 	.word	0x46fffe00
 8004acc:	3c23d70a 	.word	0x3c23d70a
 8004ad0:	43ff0000 	.word	0x43ff0000
 8004ad4:	3db851ec 	.word	0x3db851ec
 8004ad8:	42700000 	.word	0x42700000
 8004adc:	3fa66666 	.word	0x3fa66666
 8004ae0:	3e99999a 	.word	0x3e99999a

08004ae4 <GasIndexAlgorithm__mean_variance_estimator__process>:

static void GasIndexAlgorithm__mean_variance_estimator__process(
    GasIndexAlgorithmParams* params, float sraw) {
 8004ae4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ae6:	b087      	sub	sp, #28
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
 8004aec:	6039      	str	r1, [r7, #0]

    float delta_sgp;
    float c;
    float additional_scaling;

    if ((params->m_Mean_Variance_Estimator___Initialized == false)) {
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	223c      	movs	r2, #60	@ 0x3c
 8004af2:	5c9b      	ldrb	r3, [r3, r2]
 8004af4:	2201      	movs	r2, #1
 8004af6:	4053      	eors	r3, r2
 8004af8:	b2db      	uxtb	r3, r3
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d00a      	beq.n	8004b14 <GasIndexAlgorithm__mean_variance_estimator__process+0x30>
        params->m_Mean_Variance_Estimator___Initialized = true;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	223c      	movs	r2, #60	@ 0x3c
 8004b02:	2101      	movs	r1, #1
 8004b04:	5499      	strb	r1, [r3, r2]
        params->m_Mean_Variance_Estimator___Sraw_Offset = sraw;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	683a      	ldr	r2, [r7, #0]
 8004b0a:	645a      	str	r2, [r3, #68]	@ 0x44
        params->m_Mean_Variance_Estimator___Mean = 0.f;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	641a      	str	r2, [r3, #64]	@ 0x40
        params->m_Mean_Variance_Estimator___Mean =
            (params->m_Mean_Variance_Estimator___Mean +
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
              GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING));
    }
}
 8004b12:	e0c8      	b.n	8004ca6 <GasIndexAlgorithm__mean_variance_estimator__process+0x1c2>
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b18:	4965      	ldr	r1, [pc, #404]	@ (8004cb0 <GasIndexAlgorithm__mean_variance_estimator__process+0x1cc>)
 8004b1a:	1c18      	adds	r0, r3, #0
 8004b1c:	f7fb fcf4 	bl	8000508 <__aeabi_fcmpge>
 8004b20:	1e03      	subs	r3, r0, #0
 8004b22:	d107      	bne.n	8004b34 <GasIndexAlgorithm__mean_variance_estimator__process+0x50>
             (params->m_Mean_Variance_Estimator___Mean <= -100.f))) {
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 8004b28:	4962      	ldr	r1, [pc, #392]	@ (8004cb4 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d0>)
 8004b2a:	1c18      	adds	r0, r3, #0
 8004b2c:	f7fb fcd8 	bl	80004e0 <__aeabi_fcmple>
 8004b30:	1e03      	subs	r3, r0, #0
 8004b32:	d00e      	beq.n	8004b52 <GasIndexAlgorithm__mean_variance_estimator__process+0x6e>
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
                 params->m_Mean_Variance_Estimator___Mean);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 8004b3c:	1c19      	adds	r1, r3, #0
 8004b3e:	1c10      	adds	r0, r2, #0
 8004b40:	f7fb fe06 	bl	8000750 <__aeabi_fadd>
 8004b44:	1c03      	adds	r3, r0, #0
 8004b46:	1c1a      	adds	r2, r3, #0
            params->m_Mean_Variance_Estimator___Sraw_Offset =
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	645a      	str	r2, [r3, #68]	@ 0x44
            params->m_Mean_Variance_Estimator___Mean = 0.f;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	641a      	str	r2, [r3, #64]	@ 0x40
        sraw = (sraw - params->m_Mean_Variance_Estimator___Sraw_Offset);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b56:	1c19      	adds	r1, r3, #0
 8004b58:	6838      	ldr	r0, [r7, #0]
 8004b5a:	f7fc faa7 	bl	80010ac <__aeabi_fsub>
 8004b5e:	1c03      	adds	r3, r0, #0
 8004b60:	603b      	str	r3, [r7, #0]
        GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(params);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	0018      	movs	r0, r3
 8004b66:	f7ff fe7d 	bl	8004864 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>
        delta_sgp = ((sraw - params->m_Mean_Variance_Estimator___Mean) /
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b6e:	1c19      	adds	r1, r3, #0
 8004b70:	6838      	ldr	r0, [r7, #0]
 8004b72:	f7fc fa9b 	bl	80010ac <__aeabi_fsub>
 8004b76:	1c03      	adds	r3, r0, #0
 8004b78:	2185      	movs	r1, #133	@ 0x85
 8004b7a:	05c9      	lsls	r1, r1, #23
 8004b7c:	1c18      	adds	r0, r3, #0
 8004b7e:	f7fb ff71 	bl	8000a64 <__aeabi_fdiv>
 8004b82:	1c03      	adds	r3, r0, #0
 8004b84:	60fb      	str	r3, [r7, #12]
        if ((delta_sgp < 0.f)) {
 8004b86:	2100      	movs	r1, #0
 8004b88:	68f8      	ldr	r0, [r7, #12]
 8004b8a:	f7fb fc9f 	bl	80004cc <__aeabi_fcmplt>
 8004b8e:	1e03      	subs	r3, r0, #0
 8004b90:	d008      	beq.n	8004ba4 <GasIndexAlgorithm__mean_variance_estimator__process+0xc0>
            c = (params->m_Mean_Variance_Estimator___Std - delta_sgp);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b96:	68f9      	ldr	r1, [r7, #12]
 8004b98:	1c18      	adds	r0, r3, #0
 8004b9a:	f7fc fa87 	bl	80010ac <__aeabi_fsub>
 8004b9e:	1c03      	adds	r3, r0, #0
 8004ba0:	617b      	str	r3, [r7, #20]
 8004ba2:	e007      	b.n	8004bb4 <GasIndexAlgorithm__mean_variance_estimator__process+0xd0>
            c = (params->m_Mean_Variance_Estimator___Std + delta_sgp);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ba8:	1c19      	adds	r1, r3, #0
 8004baa:	68f8      	ldr	r0, [r7, #12]
 8004bac:	f7fb fdd0 	bl	8000750 <__aeabi_fadd>
 8004bb0:	1c03      	adds	r3, r0, #0
 8004bb2:	617b      	str	r3, [r7, #20]
        additional_scaling = 1.f;
 8004bb4:	23fe      	movs	r3, #254	@ 0xfe
 8004bb6:	059b      	lsls	r3, r3, #22
 8004bb8:	613b      	str	r3, [r7, #16]
        if ((c > 1440.f)) {
 8004bba:	493f      	ldr	r1, [pc, #252]	@ (8004cb8 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 8004bbc:	6978      	ldr	r0, [r7, #20]
 8004bbe:	f7fb fc99 	bl	80004f4 <__aeabi_fcmpgt>
 8004bc2:	1e03      	subs	r3, r0, #0
 8004bc4:	d010      	beq.n	8004be8 <GasIndexAlgorithm__mean_variance_estimator__process+0x104>
            additional_scaling = ((c / 1440.f) * (c / 1440.f));
 8004bc6:	493c      	ldr	r1, [pc, #240]	@ (8004cb8 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 8004bc8:	6978      	ldr	r0, [r7, #20]
 8004bca:	f7fb ff4b 	bl	8000a64 <__aeabi_fdiv>
 8004bce:	1c03      	adds	r3, r0, #0
 8004bd0:	1c1c      	adds	r4, r3, #0
 8004bd2:	4939      	ldr	r1, [pc, #228]	@ (8004cb8 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 8004bd4:	6978      	ldr	r0, [r7, #20]
 8004bd6:	f7fb ff45 	bl	8000a64 <__aeabi_fdiv>
 8004bda:	1c03      	adds	r3, r0, #0
 8004bdc:	1c19      	adds	r1, r3, #0
 8004bde:	1c20      	adds	r0, r4, #0
 8004be0:	f7fc f926 	bl	8000e30 <__aeabi_fmul>
 8004be4:	1c03      	adds	r3, r0, #0
 8004be6:	613b      	str	r3, [r7, #16]
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING -
 8004bec:	1c19      	adds	r1, r3, #0
 8004bee:	2085      	movs	r0, #133	@ 0x85
 8004bf0:	05c0      	lsls	r0, r0, #23
 8004bf2:	f7fc fa5b 	bl	80010ac <__aeabi_fsub>
 8004bf6:	1c03      	adds	r3, r0, #0
            (sqrtf((additional_scaling *
 8004bf8:	6939      	ldr	r1, [r7, #16]
 8004bfa:	1c18      	adds	r0, r3, #0
 8004bfc:	f7fc f918 	bl	8000e30 <__aeabi_fmul>
 8004c00:	1c03      	adds	r3, r0, #0
 8004c02:	1c18      	adds	r0, r3, #0
 8004c04:	f009 fa50 	bl	800e0a8 <sqrtf>
 8004c08:	1c06      	adds	r6, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
                   (params->m_Mean_Variance_Estimator___Std /
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6c9d      	ldr	r5, [r3, #72]	@ 0x48
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 8004c12:	2185      	movs	r1, #133	@ 0x85
 8004c14:	05c9      	lsls	r1, r1, #23
 8004c16:	6938      	ldr	r0, [r7, #16]
 8004c18:	f7fc f90a 	bl	8000e30 <__aeabi_fmul>
 8004c1c:	1c03      	adds	r3, r0, #0
                   (params->m_Mean_Variance_Estimator___Std /
 8004c1e:	1c19      	adds	r1, r3, #0
 8004c20:	1c28      	adds	r0, r5, #0
 8004c22:	f7fb ff1f 	bl	8000a64 <__aeabi_fdiv>
 8004c26:	1c03      	adds	r3, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 8004c28:	1c19      	adds	r1, r3, #0
 8004c2a:	1c20      	adds	r0, r4, #0
 8004c2c:	f7fc f900 	bl	8000e30 <__aeabi_fmul>
 8004c30:	1c03      	adds	r3, r0, #0
 8004c32:	1c1c      	adds	r4, r3, #0
                  (((params->m_Mean_Variance_Estimator__Gamma_Variance *
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c38:	68f9      	ldr	r1, [r7, #12]
 8004c3a:	1c18      	adds	r0, r3, #0
 8004c3c:	f7fc f8f8 	bl	8000e30 <__aeabi_fmul>
 8004c40:	1c03      	adds	r3, r0, #0
                     delta_sgp) /
 8004c42:	6939      	ldr	r1, [r7, #16]
 8004c44:	1c18      	adds	r0, r3, #0
 8004c46:	f7fb ff0d 	bl	8000a64 <__aeabi_fdiv>
 8004c4a:	1c03      	adds	r3, r0, #0
                    additional_scaling) *
 8004c4c:	68f9      	ldr	r1, [r7, #12]
 8004c4e:	1c18      	adds	r0, r3, #0
 8004c50:	f7fc f8ee 	bl	8000e30 <__aeabi_fmul>
 8004c54:	1c03      	adds	r3, r0, #0
             sqrtf(
 8004c56:	1c19      	adds	r1, r3, #0
 8004c58:	1c20      	adds	r0, r4, #0
 8004c5a:	f7fb fd79 	bl	8000750 <__aeabi_fadd>
 8004c5e:	1c03      	adds	r3, r0, #0
 8004c60:	1c18      	adds	r0, r3, #0
 8004c62:	f009 fa21 	bl	800e0a8 <sqrtf>
 8004c66:	1c03      	adds	r3, r0, #0
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 8004c68:	1c19      	adds	r1, r3, #0
 8004c6a:	1c30      	adds	r0, r6, #0
 8004c6c:	f7fc f8e0 	bl	8000e30 <__aeabi_fmul>
 8004c70:	1c03      	adds	r3, r0, #0
 8004c72:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Std =
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	649a      	str	r2, [r3, #72]	@ 0x48
            (params->m_Mean_Variance_Estimator___Mean +
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c80:	68f9      	ldr	r1, [r7, #12]
 8004c82:	1c18      	adds	r0, r3, #0
 8004c84:	f7fc f8d4 	bl	8000e30 <__aeabi_fmul>
 8004c88:	1c03      	adds	r3, r0, #0
 8004c8a:	2182      	movs	r1, #130	@ 0x82
 8004c8c:	05c9      	lsls	r1, r1, #23
 8004c8e:	1c18      	adds	r0, r3, #0
 8004c90:	f7fb fee8 	bl	8000a64 <__aeabi_fdiv>
 8004c94:	1c03      	adds	r3, r0, #0
            (params->m_Mean_Variance_Estimator___Mean +
 8004c96:	1c19      	adds	r1, r3, #0
 8004c98:	1c20      	adds	r0, r4, #0
 8004c9a:	f7fb fd59 	bl	8000750 <__aeabi_fadd>
 8004c9e:	1c03      	adds	r3, r0, #0
 8004ca0:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Mean =
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8004ca6:	46c0      	nop			@ (mov r8, r8)
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	b007      	add	sp, #28
 8004cac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004cae:	46c0      	nop			@ (mov r8, r8)
 8004cb0:	42c80000 	.word	0x42c80000
 8004cb4:	c2c80000 	.word	0xc2c80000
 8004cb8:	44b40000 	.word	0x44b40000

08004cbc <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>:

static void
GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K) {
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b084      	sub	sp, #16
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	60f8      	str	r0, [r7, #12]
 8004cc4:	60b9      	str	r1, [r7, #8]
 8004cc6:	607a      	str	r2, [r7, #4]

    params->m_Mean_Variance_Estimator___Sigmoid__K = K;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	687a      	ldr	r2, [r7, #4]
 8004ccc:	671a      	str	r2, [r3, #112]	@ 0x70
    params->m_Mean_Variance_Estimator___Sigmoid__X0 = X0;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	68ba      	ldr	r2, [r7, #8]
 8004cd2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004cd4:	46c0      	nop			@ (mov r8, r8)
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	b004      	add	sp, #16
 8004cda:	bd80      	pop	{r7, pc}

08004cdc <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>:

static float GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
    GasIndexAlgorithmParams* params, float sample) {
 8004cdc:	b590      	push	{r4, r7, lr}
 8004cde:	b085      	sub	sp, #20
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
 8004ce4:	6039      	str	r1, [r7, #0]

    float x;

    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6f1c      	ldr	r4, [r3, #112]	@ 0x70
         (sample - params->m_Mean_Variance_Estimator___Sigmoid__X0));
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004cee:	1c19      	adds	r1, r3, #0
 8004cf0:	6838      	ldr	r0, [r7, #0]
 8004cf2:	f7fc f9db 	bl	80010ac <__aeabi_fsub>
 8004cf6:	1c03      	adds	r3, r0, #0
    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 8004cf8:	1c19      	adds	r1, r3, #0
 8004cfa:	1c20      	adds	r0, r4, #0
 8004cfc:	f7fc f898 	bl	8000e30 <__aeabi_fmul>
 8004d00:	1c03      	adds	r3, r0, #0
 8004d02:	60fb      	str	r3, [r7, #12]
    if ((x < -50.f)) {
 8004d04:	4912      	ldr	r1, [pc, #72]	@ (8004d50 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x74>)
 8004d06:	68f8      	ldr	r0, [r7, #12]
 8004d08:	f7fb fbe0 	bl	80004cc <__aeabi_fcmplt>
 8004d0c:	1e03      	subs	r3, r0, #0
 8004d0e:	d002      	beq.n	8004d16 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x3a>
        return 1.f;
 8004d10:	23fe      	movs	r3, #254	@ 0xfe
 8004d12:	059b      	lsls	r3, r3, #22
 8004d14:	e018      	b.n	8004d48 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else if ((x > 50.f)) {
 8004d16:	490f      	ldr	r1, [pc, #60]	@ (8004d54 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x78>)
 8004d18:	68f8      	ldr	r0, [r7, #12]
 8004d1a:	f7fb fbeb 	bl	80004f4 <__aeabi_fcmpgt>
 8004d1e:	1e03      	subs	r3, r0, #0
 8004d20:	d001      	beq.n	8004d26 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x4a>
        return 0.f;
 8004d22:	2300      	movs	r3, #0
 8004d24:	e010      	b.n	8004d48 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else {
        return (1.f / (1.f + expf(x)));
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	1c18      	adds	r0, r3, #0
 8004d2a:	f009 f995 	bl	800e058 <expf>
 8004d2e:	1c03      	adds	r3, r0, #0
 8004d30:	21fe      	movs	r1, #254	@ 0xfe
 8004d32:	0589      	lsls	r1, r1, #22
 8004d34:	1c18      	adds	r0, r3, #0
 8004d36:	f7fb fd0b 	bl	8000750 <__aeabi_fadd>
 8004d3a:	1c03      	adds	r3, r0, #0
 8004d3c:	1c19      	adds	r1, r3, #0
 8004d3e:	20fe      	movs	r0, #254	@ 0xfe
 8004d40:	0580      	lsls	r0, r0, #22
 8004d42:	f7fb fe8f 	bl	8000a64 <__aeabi_fdiv>
 8004d46:	1c03      	adds	r3, r0, #0
    }
}
 8004d48:	1c18      	adds	r0, r3, #0
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	b005      	add	sp, #20
 8004d4e:	bd90      	pop	{r4, r7, pc}
 8004d50:	c2480000 	.word	0xc2480000
 8004d54:	42480000 	.word	0x42480000

08004d58 <GasIndexAlgorithm__mox_model__set_parameters>:

static void
GasIndexAlgorithm__mox_model__set_parameters(GasIndexAlgorithmParams* params,
                                             float SRAW_STD, float SRAW_MEAN) {
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b084      	sub	sp, #16
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	60f8      	str	r0, [r7, #12]
 8004d60:	60b9      	str	r1, [r7, #8]
 8004d62:	607a      	str	r2, [r7, #4]

    params->m_Mox_Model__Sraw_Std = SRAW_STD;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	68ba      	ldr	r2, [r7, #8]
 8004d68:	679a      	str	r2, [r3, #120]	@ 0x78
    params->m_Mox_Model__Sraw_Mean = SRAW_MEAN;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	687a      	ldr	r2, [r7, #4]
 8004d6e:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8004d70:	46c0      	nop			@ (mov r8, r8)
 8004d72:	46bd      	mov	sp, r7
 8004d74:	b004      	add	sp, #16
 8004d76:	bd80      	pop	{r7, pc}

08004d78 <GasIndexAlgorithm__mox_model__process>:

static float
GasIndexAlgorithm__mox_model__process(GasIndexAlgorithmParams* params,
                                      float sraw) {
 8004d78:	b590      	push	{r4, r7, lr}
 8004d7a:	b083      	sub	sp, #12
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
 8004d80:	6039      	str	r1, [r7, #0]

    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	2b01      	cmp	r3, #1
 8004d88:	d114      	bne.n	8004db4 <GasIndexAlgorithm__mox_model__process+0x3c>
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004d8e:	1c19      	adds	r1, r3, #0
 8004d90:	6838      	ldr	r0, [r7, #0]
 8004d92:	f7fc f98b 	bl	80010ac <__aeabi_fsub>
 8004d96:	1c03      	adds	r3, r0, #0
 8004d98:	4918      	ldr	r1, [pc, #96]	@ (8004dfc <GasIndexAlgorithm__mox_model__process+0x84>)
 8004d9a:	1c18      	adds	r0, r3, #0
 8004d9c:	f7fb fe62 	bl	8000a64 <__aeabi_fdiv>
 8004da0:	1c03      	adds	r3, r0, #0
 8004da2:	1c1a      	adds	r2, r3, #0
                 GasIndexAlgorithm_SRAW_STD_NOX) *
                params->mIndex_Gain);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6a1b      	ldr	r3, [r3, #32]
                 GasIndexAlgorithm_SRAW_STD_NOX) *
 8004da8:	1c19      	adds	r1, r3, #0
 8004daa:	1c10      	adds	r0, r2, #0
 8004dac:	f7fc f840 	bl	8000e30 <__aeabi_fmul>
 8004db0:	1c03      	adds	r3, r0, #0
 8004db2:	e01f      	b.n	8004df4 <GasIndexAlgorithm__mox_model__process+0x7c>
    } else {
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004db8:	1c19      	adds	r1, r3, #0
 8004dba:	6838      	ldr	r0, [r7, #0]
 8004dbc:	f7fc f976 	bl	80010ac <__aeabi_fsub>
 8004dc0:	1c03      	adds	r3, r0, #0
 8004dc2:	1c1a      	adds	r2, r3, #0
 8004dc4:	2380      	movs	r3, #128	@ 0x80
 8004dc6:	061b      	lsls	r3, r3, #24
 8004dc8:	4053      	eors	r3, r2
 8004dca:	001c      	movs	r4, r3
                 (-1.f * (params->m_Mox_Model__Sraw_Std +
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004dd0:	490b      	ldr	r1, [pc, #44]	@ (8004e00 <GasIndexAlgorithm__mox_model__process+0x88>)
 8004dd2:	1c18      	adds	r0, r3, #0
 8004dd4:	f7fb fcbc 	bl	8000750 <__aeabi_fadd>
 8004dd8:	1c03      	adds	r3, r0, #0
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 8004dda:	1c19      	adds	r1, r3, #0
 8004ddc:	1c20      	adds	r0, r4, #0
 8004dde:	f7fb fe41 	bl	8000a64 <__aeabi_fdiv>
 8004de2:	1c03      	adds	r3, r0, #0
 8004de4:	1c1a      	adds	r2, r3, #0
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
                params->mIndex_Gain);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6a1b      	ldr	r3, [r3, #32]
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
 8004dea:	1c19      	adds	r1, r3, #0
 8004dec:	1c10      	adds	r0, r2, #0
 8004dee:	f7fc f81f 	bl	8000e30 <__aeabi_fmul>
 8004df2:	1c03      	adds	r3, r0, #0
    }
}
 8004df4:	1c18      	adds	r0, r3, #0
 8004df6:	46bd      	mov	sp, r7
 8004df8:	b003      	add	sp, #12
 8004dfa:	bd90      	pop	{r4, r7, pc}
 8004dfc:	44fa0000 	.word	0x44fa0000
 8004e00:	435c0000 	.word	0x435c0000

08004e04 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>:

static void GasIndexAlgorithm__sigmoid_scaled__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K, float offset_default) {
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b084      	sub	sp, #16
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	60f8      	str	r0, [r7, #12]
 8004e0c:	60b9      	str	r1, [r7, #8]
 8004e0e:	607a      	str	r2, [r7, #4]
 8004e10:	603b      	str	r3, [r7, #0]

    params->m_Sigmoid_Scaled__K = K;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2180      	movs	r1, #128	@ 0x80
 8004e16:	687a      	ldr	r2, [r7, #4]
 8004e18:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__X0 = X0;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	2184      	movs	r1, #132	@ 0x84
 8004e1e:	68ba      	ldr	r2, [r7, #8]
 8004e20:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__Offset_Default = offset_default;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	2188      	movs	r1, #136	@ 0x88
 8004e26:	683a      	ldr	r2, [r7, #0]
 8004e28:	505a      	str	r2, [r3, r1]
}
 8004e2a:	46c0      	nop			@ (mov r8, r8)
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	b004      	add	sp, #16
 8004e30:	bd80      	pop	{r7, pc}
	...

08004e34 <GasIndexAlgorithm__sigmoid_scaled__process>:

static float
GasIndexAlgorithm__sigmoid_scaled__process(GasIndexAlgorithmParams* params,
                                           float sample) {
 8004e34:	b590      	push	{r4, r7, lr}
 8004e36:	b085      	sub	sp, #20
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
 8004e3c:	6039      	str	r1, [r7, #0]

    float x;
    float shift;

    x = (params->m_Sigmoid_Scaled__K * (sample - params->m_Sigmoid_Scaled__X0));
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2280      	movs	r2, #128	@ 0x80
 8004e42:	589c      	ldr	r4, [r3, r2]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2284      	movs	r2, #132	@ 0x84
 8004e48:	589b      	ldr	r3, [r3, r2]
 8004e4a:	1c19      	adds	r1, r3, #0
 8004e4c:	6838      	ldr	r0, [r7, #0]
 8004e4e:	f7fc f92d 	bl	80010ac <__aeabi_fsub>
 8004e52:	1c03      	adds	r3, r0, #0
 8004e54:	1c19      	adds	r1, r3, #0
 8004e56:	1c20      	adds	r0, r4, #0
 8004e58:	f7fb ffea 	bl	8000e30 <__aeabi_fmul>
 8004e5c:	1c03      	adds	r3, r0, #0
 8004e5e:	60bb      	str	r3, [r7, #8]
    if ((x < -50.f)) {
 8004e60:	4940      	ldr	r1, [pc, #256]	@ (8004f64 <GasIndexAlgorithm__sigmoid_scaled__process+0x130>)
 8004e62:	68b8      	ldr	r0, [r7, #8]
 8004e64:	f7fb fb32 	bl	80004cc <__aeabi_fcmplt>
 8004e68:	1e03      	subs	r3, r0, #0
 8004e6a:	d001      	beq.n	8004e70 <GasIndexAlgorithm__sigmoid_scaled__process+0x3c>
        return GasIndexAlgorithm_SIGMOID_L;
 8004e6c:	4b3e      	ldr	r3, [pc, #248]	@ (8004f68 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 8004e6e:	e075      	b.n	8004f5c <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else if ((x > 50.f)) {
 8004e70:	493e      	ldr	r1, [pc, #248]	@ (8004f6c <GasIndexAlgorithm__sigmoid_scaled__process+0x138>)
 8004e72:	68b8      	ldr	r0, [r7, #8]
 8004e74:	f7fb fb3e 	bl	80004f4 <__aeabi_fcmpgt>
 8004e78:	1e03      	subs	r3, r0, #0
 8004e7a:	d001      	beq.n	8004e80 <GasIndexAlgorithm__sigmoid_scaled__process+0x4c>
        return 0.f;
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	e06d      	b.n	8004f5c <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else {
        if ((sample >= 0.f)) {
 8004e80:	2100      	movs	r1, #0
 8004e82:	6838      	ldr	r0, [r7, #0]
 8004e84:	f7fb fb40 	bl	8000508 <__aeabi_fcmpge>
 8004e88:	1e03      	subs	r3, r0, #0
 8004e8a:	d047      	beq.n	8004f1c <GasIndexAlgorithm__sigmoid_scaled__process+0xe8>
            if ((params->m_Sigmoid_Scaled__Offset_Default == 1.f)) {
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2288      	movs	r2, #136	@ 0x88
 8004e90:	589b      	ldr	r3, [r3, r2]
 8004e92:	21fe      	movs	r1, #254	@ 0xfe
 8004e94:	0589      	lsls	r1, r1, #22
 8004e96:	1c18      	adds	r0, r3, #0
 8004e98:	f7fb fb12 	bl	80004c0 <__aeabi_fcmpeq>
 8004e9c:	1e03      	subs	r3, r0, #0
 8004e9e:	d00e      	beq.n	8004ebe <GasIndexAlgorithm__sigmoid_scaled__process+0x8a>
                shift = ((500.f / 499.f) * (1.f - params->mIndex_Offset));
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	689b      	ldr	r3, [r3, #8]
 8004ea4:	1c19      	adds	r1, r3, #0
 8004ea6:	20fe      	movs	r0, #254	@ 0xfe
 8004ea8:	0580      	lsls	r0, r0, #22
 8004eaa:	f7fc f8ff 	bl	80010ac <__aeabi_fsub>
 8004eae:	1c03      	adds	r3, r0, #0
 8004eb0:	492f      	ldr	r1, [pc, #188]	@ (8004f70 <GasIndexAlgorithm__sigmoid_scaled__process+0x13c>)
 8004eb2:	1c18      	adds	r0, r3, #0
 8004eb4:	f7fb ffbc 	bl	8000e30 <__aeabi_fmul>
 8004eb8:	1c03      	adds	r3, r0, #0
 8004eba:	60fb      	str	r3, [r7, #12]
 8004ebc:	e012      	b.n	8004ee4 <GasIndexAlgorithm__sigmoid_scaled__process+0xb0>
            } else {
                shift = ((GasIndexAlgorithm_SIGMOID_L -
                          (5.f * params->mIndex_Offset)) /
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	689b      	ldr	r3, [r3, #8]
 8004ec2:	492c      	ldr	r1, [pc, #176]	@ (8004f74 <GasIndexAlgorithm__sigmoid_scaled__process+0x140>)
 8004ec4:	1c18      	adds	r0, r3, #0
 8004ec6:	f7fb ffb3 	bl	8000e30 <__aeabi_fmul>
 8004eca:	1c03      	adds	r3, r0, #0
                shift = ((GasIndexAlgorithm_SIGMOID_L -
 8004ecc:	1c19      	adds	r1, r3, #0
 8004ece:	4826      	ldr	r0, [pc, #152]	@ (8004f68 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 8004ed0:	f7fc f8ec 	bl	80010ac <__aeabi_fsub>
 8004ed4:	1c03      	adds	r3, r0, #0
 8004ed6:	2181      	movs	r1, #129	@ 0x81
 8004ed8:	05c9      	lsls	r1, r1, #23
 8004eda:	1c18      	adds	r0, r3, #0
 8004edc:	f7fb fdc2 	bl	8000a64 <__aeabi_fdiv>
 8004ee0:	1c03      	adds	r3, r0, #0
 8004ee2:	60fb      	str	r3, [r7, #12]
                         4.f);
            }
            return (((GasIndexAlgorithm_SIGMOID_L + shift) / (1.f + expf(x))) -
 8004ee4:	4920      	ldr	r1, [pc, #128]	@ (8004f68 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 8004ee6:	68f8      	ldr	r0, [r7, #12]
 8004ee8:	f7fb fc32 	bl	8000750 <__aeabi_fadd>
 8004eec:	1c03      	adds	r3, r0, #0
 8004eee:	1c1c      	adds	r4, r3, #0
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	1c18      	adds	r0, r3, #0
 8004ef4:	f009 f8b0 	bl	800e058 <expf>
 8004ef8:	1c03      	adds	r3, r0, #0
 8004efa:	21fe      	movs	r1, #254	@ 0xfe
 8004efc:	0589      	lsls	r1, r1, #22
 8004efe:	1c18      	adds	r0, r3, #0
 8004f00:	f7fb fc26 	bl	8000750 <__aeabi_fadd>
 8004f04:	1c03      	adds	r3, r0, #0
 8004f06:	1c19      	adds	r1, r3, #0
 8004f08:	1c20      	adds	r0, r4, #0
 8004f0a:	f7fb fdab 	bl	8000a64 <__aeabi_fdiv>
 8004f0e:	1c03      	adds	r3, r0, #0
 8004f10:	68f9      	ldr	r1, [r7, #12]
 8004f12:	1c18      	adds	r0, r3, #0
 8004f14:	f7fc f8ca 	bl	80010ac <__aeabi_fsub>
 8004f18:	1c03      	adds	r3, r0, #0
 8004f1a:	e01f      	b.n	8004f5c <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
                    shift);
        } else {
            return ((params->mIndex_Offset /
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	689a      	ldr	r2, [r3, #8]
                     params->m_Sigmoid_Scaled__Offset_Default) *
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2188      	movs	r1, #136	@ 0x88
 8004f24:	585b      	ldr	r3, [r3, r1]
            return ((params->mIndex_Offset /
 8004f26:	1c19      	adds	r1, r3, #0
 8004f28:	1c10      	adds	r0, r2, #0
 8004f2a:	f7fb fd9b 	bl	8000a64 <__aeabi_fdiv>
 8004f2e:	1c03      	adds	r3, r0, #0
 8004f30:	1c1c      	adds	r4, r3, #0
                    (GasIndexAlgorithm_SIGMOID_L / (1.f + expf(x))));
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	1c18      	adds	r0, r3, #0
 8004f36:	f009 f88f 	bl	800e058 <expf>
 8004f3a:	1c03      	adds	r3, r0, #0
 8004f3c:	21fe      	movs	r1, #254	@ 0xfe
 8004f3e:	0589      	lsls	r1, r1, #22
 8004f40:	1c18      	adds	r0, r3, #0
 8004f42:	f7fb fc05 	bl	8000750 <__aeabi_fadd>
 8004f46:	1c03      	adds	r3, r0, #0
 8004f48:	1c19      	adds	r1, r3, #0
 8004f4a:	4807      	ldr	r0, [pc, #28]	@ (8004f68 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 8004f4c:	f7fb fd8a 	bl	8000a64 <__aeabi_fdiv>
 8004f50:	1c03      	adds	r3, r0, #0
                     params->m_Sigmoid_Scaled__Offset_Default) *
 8004f52:	1c19      	adds	r1, r3, #0
 8004f54:	1c20      	adds	r0, r4, #0
 8004f56:	f7fb ff6b 	bl	8000e30 <__aeabi_fmul>
 8004f5a:	1c03      	adds	r3, r0, #0
        }
    }
}
 8004f5c:	1c18      	adds	r0, r3, #0
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	b005      	add	sp, #20
 8004f62:	bd90      	pop	{r4, r7, pc}
 8004f64:	c2480000 	.word	0xc2480000
 8004f68:	43fa0000 	.word	0x43fa0000
 8004f6c:	42480000 	.word	0x42480000
 8004f70:	3f8041ab 	.word	0x3f8041ab
 8004f74:	40a00000 	.word	0x40a00000

08004f78 <GasIndexAlgorithm__adaptive_lowpass__set_parameters>:

static void GasIndexAlgorithm__adaptive_lowpass__set_parameters(
    GasIndexAlgorithmParams* params) {
 8004f78:	b590      	push	{r4, r7, lr}
 8004f7a:	b083      	sub	sp, #12
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]

    params->m_Adaptive_Lowpass__A1 =
        (params->mSamplingInterval /
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_FAST + params->mSamplingInterval));
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	4913      	ldr	r1, [pc, #76]	@ (8004fd8 <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x60>)
 8004f8a:	1c18      	adds	r0, r3, #0
 8004f8c:	f7fb fbe0 	bl	8000750 <__aeabi_fadd>
 8004f90:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 8004f92:	1c19      	adds	r1, r3, #0
 8004f94:	1c20      	adds	r0, r4, #0
 8004f96:	f7fb fd65 	bl	8000a64 <__aeabi_fdiv>
 8004f9a:	1c03      	adds	r3, r0, #0
 8004f9c:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A1 =
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	228c      	movs	r2, #140	@ 0x8c
 8004fa2:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass__A2 =
        (params->mSamplingInterval /
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_SLOW + params->mSamplingInterval));
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	490b      	ldr	r1, [pc, #44]	@ (8004fdc <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x64>)
 8004fae:	1c18      	adds	r0, r3, #0
 8004fb0:	f7fb fbce 	bl	8000750 <__aeabi_fadd>
 8004fb4:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 8004fb6:	1c19      	adds	r1, r3, #0
 8004fb8:	1c20      	adds	r0, r4, #0
 8004fba:	f7fb fd53 	bl	8000a64 <__aeabi_fdiv>
 8004fbe:	1c03      	adds	r3, r0, #0
 8004fc0:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A2 =
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2290      	movs	r2, #144	@ 0x90
 8004fc6:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___Initialized = false;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2294      	movs	r2, #148	@ 0x94
 8004fcc:	2100      	movs	r1, #0
 8004fce:	5499      	strb	r1, [r3, r2]
}
 8004fd0:	46c0      	nop			@ (mov r8, r8)
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	b003      	add	sp, #12
 8004fd6:	bd90      	pop	{r4, r7, pc}
 8004fd8:	41a00000 	.word	0x41a00000
 8004fdc:	43fa0000 	.word	0x43fa0000

08004fe0 <GasIndexAlgorithm__adaptive_lowpass__process>:

static float
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample) {
 8004fe0:	b590      	push	{r4, r7, lr}
 8004fe2:	b087      	sub	sp, #28
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
 8004fe8:	6039      	str	r1, [r7, #0]
    float abs_delta;
    float F1;
    float tau_a;
    float a3;

    if ((params->m_Adaptive_Lowpass___Initialized == false)) {
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2294      	movs	r2, #148	@ 0x94
 8004fee:	5c9b      	ldrb	r3, [r3, r2]
 8004ff0:	2201      	movs	r2, #1
 8004ff2:	4053      	eors	r3, r2
 8004ff4:	b2db      	uxtb	r3, r3
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d00f      	beq.n	800501a <GasIndexAlgorithm__adaptive_lowpass__process+0x3a>
        params->m_Adaptive_Lowpass___X1 = sample;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2198      	movs	r1, #152	@ 0x98
 8004ffe:	683a      	ldr	r2, [r7, #0]
 8005000:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X2 = sample;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	219c      	movs	r1, #156	@ 0x9c
 8005006:	683a      	ldr	r2, [r7, #0]
 8005008:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X3 = sample;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	21a0      	movs	r1, #160	@ 0xa0
 800500e:	683a      	ldr	r2, [r7, #0]
 8005010:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___Initialized = true;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2294      	movs	r2, #148	@ 0x94
 8005016:	2101      	movs	r1, #1
 8005018:	5499      	strb	r1, [r3, r2]
    }
    params->m_Adaptive_Lowpass___X1 =
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	228c      	movs	r2, #140	@ 0x8c
 800501e:	589b      	ldr	r3, [r3, r2]
 8005020:	1c19      	adds	r1, r3, #0
 8005022:	20fe      	movs	r0, #254	@ 0xfe
 8005024:	0580      	lsls	r0, r0, #22
 8005026:	f7fc f841 	bl	80010ac <__aeabi_fsub>
 800502a:	1c03      	adds	r3, r0, #0
 800502c:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X1) +
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2298      	movs	r2, #152	@ 0x98
 8005032:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 8005034:	1c19      	adds	r1, r3, #0
 8005036:	f7fb fefb 	bl	8000e30 <__aeabi_fmul>
 800503a:	1c03      	adds	r3, r0, #0
 800503c:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A1 * sample));
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	228c      	movs	r2, #140	@ 0x8c
 8005042:	589b      	ldr	r3, [r3, r2]
 8005044:	6839      	ldr	r1, [r7, #0]
 8005046:	1c18      	adds	r0, r3, #0
 8005048:	f7fb fef2 	bl	8000e30 <__aeabi_fmul>
 800504c:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X1) +
 800504e:	1c19      	adds	r1, r3, #0
 8005050:	1c20      	adds	r0, r4, #0
 8005052:	f7fb fb7d 	bl	8000750 <__aeabi_fadd>
 8005056:	1c03      	adds	r3, r0, #0
 8005058:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X1 =
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2298      	movs	r2, #152	@ 0x98
 800505e:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___X2 =
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2290      	movs	r2, #144	@ 0x90
 8005064:	589b      	ldr	r3, [r3, r2]
 8005066:	1c19      	adds	r1, r3, #0
 8005068:	20fe      	movs	r0, #254	@ 0xfe
 800506a:	0580      	lsls	r0, r0, #22
 800506c:	f7fc f81e 	bl	80010ac <__aeabi_fsub>
 8005070:	1c03      	adds	r3, r0, #0
 8005072:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X2) +
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	229c      	movs	r2, #156	@ 0x9c
 8005078:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 800507a:	1c19      	adds	r1, r3, #0
 800507c:	f7fb fed8 	bl	8000e30 <__aeabi_fmul>
 8005080:	1c03      	adds	r3, r0, #0
 8005082:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A2 * sample));
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2290      	movs	r2, #144	@ 0x90
 8005088:	589b      	ldr	r3, [r3, r2]
 800508a:	6839      	ldr	r1, [r7, #0]
 800508c:	1c18      	adds	r0, r3, #0
 800508e:	f7fb fecf 	bl	8000e30 <__aeabi_fmul>
 8005092:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X2) +
 8005094:	1c19      	adds	r1, r3, #0
 8005096:	1c20      	adds	r0, r4, #0
 8005098:	f7fb fb5a 	bl	8000750 <__aeabi_fadd>
 800509c:	1c03      	adds	r3, r0, #0
 800509e:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X2 =
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	229c      	movs	r2, #156	@ 0x9c
 80050a4:	5099      	str	r1, [r3, r2]
    abs_delta =
        (params->m_Adaptive_Lowpass___X1 - params->m_Adaptive_Lowpass___X2);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2298      	movs	r2, #152	@ 0x98
 80050aa:	589a      	ldr	r2, [r3, r2]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	219c      	movs	r1, #156	@ 0x9c
 80050b0:	585b      	ldr	r3, [r3, r1]
    abs_delta =
 80050b2:	1c19      	adds	r1, r3, #0
 80050b4:	1c10      	adds	r0, r2, #0
 80050b6:	f7fb fff9 	bl	80010ac <__aeabi_fsub>
 80050ba:	1c03      	adds	r3, r0, #0
 80050bc:	617b      	str	r3, [r7, #20]
    if ((abs_delta < 0.f)) {
 80050be:	2100      	movs	r1, #0
 80050c0:	6978      	ldr	r0, [r7, #20]
 80050c2:	f7fb fa03 	bl	80004cc <__aeabi_fcmplt>
 80050c6:	1e03      	subs	r3, r0, #0
 80050c8:	d004      	beq.n	80050d4 <GasIndexAlgorithm__adaptive_lowpass__process+0xf4>
        abs_delta = (-1.f * abs_delta);
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	2280      	movs	r2, #128	@ 0x80
 80050ce:	0612      	lsls	r2, r2, #24
 80050d0:	4053      	eors	r3, r2
 80050d2:	617b      	str	r3, [r7, #20]
    }
    F1 = expf((GasIndexAlgorithm_LP_ALPHA * abs_delta));
 80050d4:	4923      	ldr	r1, [pc, #140]	@ (8005164 <GasIndexAlgorithm__adaptive_lowpass__process+0x184>)
 80050d6:	6978      	ldr	r0, [r7, #20]
 80050d8:	f7fb feaa 	bl	8000e30 <__aeabi_fmul>
 80050dc:	1c03      	adds	r3, r0, #0
 80050de:	1c18      	adds	r0, r3, #0
 80050e0:	f008 ffba 	bl	800e058 <expf>
 80050e4:	1c03      	adds	r3, r0, #0
 80050e6:	613b      	str	r3, [r7, #16]
    tau_a = (((GasIndexAlgorithm_LP_TAU_SLOW - GasIndexAlgorithm_LP_TAU_FAST) *
 80050e8:	491f      	ldr	r1, [pc, #124]	@ (8005168 <GasIndexAlgorithm__adaptive_lowpass__process+0x188>)
 80050ea:	6938      	ldr	r0, [r7, #16]
 80050ec:	f7fb fea0 	bl	8000e30 <__aeabi_fmul>
 80050f0:	1c03      	adds	r3, r0, #0
 80050f2:	491e      	ldr	r1, [pc, #120]	@ (800516c <GasIndexAlgorithm__adaptive_lowpass__process+0x18c>)
 80050f4:	1c18      	adds	r0, r3, #0
 80050f6:	f7fb fb2b 	bl	8000750 <__aeabi_fadd>
 80050fa:	1c03      	adds	r3, r0, #0
 80050fc:	60fb      	str	r3, [r7, #12]
              F1) +
             GasIndexAlgorithm_LP_TAU_FAST);
    a3 = (params->mSamplingInterval / (params->mSamplingInterval + tau_a));
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	685c      	ldr	r4, [r3, #4]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	68f9      	ldr	r1, [r7, #12]
 8005108:	1c18      	adds	r0, r3, #0
 800510a:	f7fb fb21 	bl	8000750 <__aeabi_fadd>
 800510e:	1c03      	adds	r3, r0, #0
 8005110:	1c19      	adds	r1, r3, #0
 8005112:	1c20      	adds	r0, r4, #0
 8005114:	f7fb fca6 	bl	8000a64 <__aeabi_fdiv>
 8005118:	1c03      	adds	r3, r0, #0
 800511a:	60bb      	str	r3, [r7, #8]
    params->m_Adaptive_Lowpass___X3 =
        (((1.f - a3) * params->m_Adaptive_Lowpass___X3) + (a3 * sample));
 800511c:	68b9      	ldr	r1, [r7, #8]
 800511e:	20fe      	movs	r0, #254	@ 0xfe
 8005120:	0580      	lsls	r0, r0, #22
 8005122:	f7fb ffc3 	bl	80010ac <__aeabi_fsub>
 8005126:	1c03      	adds	r3, r0, #0
 8005128:	1c18      	adds	r0, r3, #0
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	22a0      	movs	r2, #160	@ 0xa0
 800512e:	589b      	ldr	r3, [r3, r2]
 8005130:	1c19      	adds	r1, r3, #0
 8005132:	f7fb fe7d 	bl	8000e30 <__aeabi_fmul>
 8005136:	1c03      	adds	r3, r0, #0
 8005138:	1c1c      	adds	r4, r3, #0
 800513a:	6839      	ldr	r1, [r7, #0]
 800513c:	68b8      	ldr	r0, [r7, #8]
 800513e:	f7fb fe77 	bl	8000e30 <__aeabi_fmul>
 8005142:	1c03      	adds	r3, r0, #0
 8005144:	1c19      	adds	r1, r3, #0
 8005146:	1c20      	adds	r0, r4, #0
 8005148:	f7fb fb02 	bl	8000750 <__aeabi_fadd>
 800514c:	1c03      	adds	r3, r0, #0
 800514e:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X3 =
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	22a0      	movs	r2, #160	@ 0xa0
 8005154:	5099      	str	r1, [r3, r2]
    return params->m_Adaptive_Lowpass___X3;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	22a0      	movs	r2, #160	@ 0xa0
 800515a:	589b      	ldr	r3, [r3, r2]
}
 800515c:	1c18      	adds	r0, r3, #0
 800515e:	46bd      	mov	sp, r7
 8005160:	b007      	add	sp, #28
 8005162:	bd90      	pop	{r4, r7, pc}
 8005164:	be4ccccd 	.word	0xbe4ccccd
 8005168:	43f00000 	.word	0x43f00000
 800516c:	41a00000 	.word	0x41a00000

08005170 <ReadRegister>:
//#define SGP_TEST_BUFFER_SIZE 6
//#define SGP_TEST_SEGMENT_SIZE 3
// static uint8_t SGP_TestBuffer[SGP_TEST_BUFFER_SIZE] = {0xBE, 0xEF, 0x92,
// 0xBE, 0xEF, 0x92};

static void ReadRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 8005170:	b590      	push	{r4, r7, lr}
 8005172:	b083      	sub	sp, #12
 8005174:	af00      	add	r7, sp, #0
 8005176:	6039      	str	r1, [r7, #0]
 8005178:	0011      	movs	r1, r2
 800517a:	1dfb      	adds	r3, r7, #7
 800517c:	1c02      	adds	r2, r0, #0
 800517e:	701a      	strb	r2, [r3, #0]
 8005180:	1dbb      	adds	r3, r7, #6
 8005182:	1c0a      	adds	r2, r1, #0
 8005184:	701a      	strb	r2, [r3, #0]
  if (ReadFunction != NULL) {
 8005186:	4b08      	ldr	r3, [pc, #32]	@ (80051a8 <ReadRegister+0x38>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d008      	beq.n	80051a0 <ReadRegister+0x30>
    ReadFunction(address, buffer, nrBytes);
 800518e:	4b06      	ldr	r3, [pc, #24]	@ (80051a8 <ReadRegister+0x38>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	1dba      	adds	r2, r7, #6
 8005194:	7814      	ldrb	r4, [r2, #0]
 8005196:	6839      	ldr	r1, [r7, #0]
 8005198:	1dfa      	adds	r2, r7, #7
 800519a:	7810      	ldrb	r0, [r2, #0]
 800519c:	0022      	movs	r2, r4
 800519e:	4798      	blx	r3
  }
}
 80051a0:	46c0      	nop			@ (mov r8, r8)
 80051a2:	46bd      	mov	sp, r7
 80051a4:	b003      	add	sp, #12
 80051a6:	bd90      	pop	{r4, r7, pc}
 80051a8:	20000528 	.word	0x20000528

080051ac <WriteRegister>:

static void WriteRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 80051ac:	b590      	push	{r4, r7, lr}
 80051ae:	b083      	sub	sp, #12
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6039      	str	r1, [r7, #0]
 80051b4:	0011      	movs	r1, r2
 80051b6:	1dfb      	adds	r3, r7, #7
 80051b8:	1c02      	adds	r2, r0, #0
 80051ba:	701a      	strb	r2, [r3, #0]
 80051bc:	1dbb      	adds	r3, r7, #6
 80051be:	1c0a      	adds	r2, r1, #0
 80051c0:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 80051c2:	4b08      	ldr	r3, [pc, #32]	@ (80051e4 <WriteRegister+0x38>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d008      	beq.n	80051dc <WriteRegister+0x30>
    WriteFunction(address, buffer, nrBytes);
 80051ca:	4b06      	ldr	r3, [pc, #24]	@ (80051e4 <WriteRegister+0x38>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	1dba      	adds	r2, r7, #6
 80051d0:	7814      	ldrb	r4, [r2, #0]
 80051d2:	6839      	ldr	r1, [r7, #0]
 80051d4:	1dfa      	adds	r2, r7, #7
 80051d6:	7810      	ldrb	r0, [r2, #0]
 80051d8:	0022      	movs	r2, r4
 80051da:	4798      	blx	r3
  }
}
 80051dc:	46c0      	nop			@ (mov r8, r8)
 80051de:	46bd      	mov	sp, r7
 80051e0:	b003      	add	sp, #12
 80051e2:	bd90      	pop	{r4, r7, pc}
 80051e4:	2000052c 	.word	0x2000052c

080051e8 <SGP_Init>:

void SGP_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b082      	sub	sp, #8
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
 80051f0:	6039      	str	r1, [r7, #0]
  ReadFunction = readFunction;
 80051f2:	4b07      	ldr	r3, [pc, #28]	@ (8005210 <SGP_Init+0x28>)
 80051f4:	687a      	ldr	r2, [r7, #4]
 80051f6:	601a      	str	r2, [r3, #0]
  WriteFunction = writeFunction;
 80051f8:	4b06      	ldr	r3, [pc, #24]	@ (8005214 <SGP_Init+0x2c>)
 80051fa:	683a      	ldr	r2, [r7, #0]
 80051fc:	601a      	str	r2, [r3, #0]
  GasIndexAlgorithm_init(&params, GasIndexAlgorithm_ALGORITHM_TYPE_VOC);
 80051fe:	4b06      	ldr	r3, [pc, #24]	@ (8005218 <SGP_Init+0x30>)
 8005200:	2100      	movs	r1, #0
 8005202:	0018      	movs	r0, r3
 8005204:	f7ff f930 	bl	8004468 <GasIndexAlgorithm_init>
}
 8005208:	46c0      	nop			@ (mov r8, r8)
 800520a:	46bd      	mov	sp, r7
 800520c:	b002      	add	sp, #8
 800520e:	bd80      	pop	{r7, pc}
 8005210:	20000528 	.word	0x20000528
 8005214:	2000052c 	.word	0x2000052c
 8005218:	2000053c 	.word	0x2000053c

0800521c <SGP_StartMeasurement>:

void SGP_StartMeasurement(void) {
 800521c:	b580      	push	{r7, lr}
 800521e:	af00      	add	r7, sp, #0
  WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 8005220:	4b0a      	ldr	r3, [pc, #40]	@ (800524c <SGP_StartMeasurement+0x30>)
 8005222:	2208      	movs	r2, #8
 8005224:	0019      	movs	r1, r3
 8005226:	2059      	movs	r0, #89	@ 0x59
 8005228:	f7ff ffc0 	bl	80051ac <WriteRegister>
  SGP_HeatUpTime = GetCurrentHalTicks() + SGP_SENSOR_HEATUP_TIME;
 800522c:	f000 fda2 	bl	8005d74 <GetCurrentHalTicks>
 8005230:	0003      	movs	r3, r0
 8005232:	33aa      	adds	r3, #170	@ 0xaa
 8005234:	001a      	movs	r2, r3
 8005236:	4b06      	ldr	r3, [pc, #24]	@ (8005250 <SGP_StartMeasurement+0x34>)
 8005238:	601a      	str	r2, [r3, #0]
  HeatUpIsDone = false;
 800523a:	4b06      	ldr	r3, [pc, #24]	@ (8005254 <SGP_StartMeasurement+0x38>)
 800523c:	2200      	movs	r2, #0
 800523e:	701a      	strb	r2, [r3, #0]
  MeasurementIsReady = false;
 8005240:	4b05      	ldr	r3, [pc, #20]	@ (8005258 <SGP_StartMeasurement+0x3c>)
 8005242:	2200      	movs	r2, #0
 8005244:	701a      	strb	r2, [r3, #0]
}
 8005246:	46c0      	nop			@ (mov r8, r8)
 8005248:	46bd      	mov	sp, r7
 800524a:	bd80      	pop	{r7, pc}
 800524c:	20000008 	.word	0x20000008
 8005250:	20000014 	.word	0x20000014
 8005254:	2000053a 	.word	0x2000053a
 8005258:	2000053b 	.word	0x2000053b

0800525c <SGP_HeatedUp>:

static bool SGP_HeatedUp(void) { return TimestampIsReached(SGP_HeatUpTime); }
 800525c:	b580      	push	{r7, lr}
 800525e:	af00      	add	r7, sp, #0
 8005260:	4b04      	ldr	r3, [pc, #16]	@ (8005274 <SGP_HeatedUp+0x18>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	0018      	movs	r0, r3
 8005266:	f000 fca3 	bl	8005bb0 <TimestampIsReached>
 800526a:	0003      	movs	r3, r0
 800526c:	0018      	movs	r0, r3
 800526e:	46bd      	mov	sp, r7
 8005270:	bd80      	pop	{r7, pc}
 8005272:	46c0      	nop			@ (mov r8, r8)
 8005274:	20000014 	.word	0x20000014

08005278 <SGP_MeasurementReady>:

static bool SGP_MeasurementReady(void) {
 8005278:	b580      	push	{r7, lr}
 800527a:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_IdleTime);
 800527c:	4b04      	ldr	r3, [pc, #16]	@ (8005290 <SGP_MeasurementReady+0x18>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	0018      	movs	r0, r3
 8005282:	f000 fc95 	bl	8005bb0 <TimestampIsReached>
 8005286:	0003      	movs	r3, r0
}
 8005288:	0018      	movs	r0, r3
 800528a:	46bd      	mov	sp, r7
 800528c:	bd80      	pop	{r7, pc}
 800528e:	46c0      	nop			@ (mov r8, r8)
 8005290:	2000001c 	.word	0x2000001c

08005294 <SGP_MeasurementDone>:

static bool SGP_MeasurementDone(void) {
 8005294:	b580      	push	{r7, lr}
 8005296:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_MeasurementDutyCycle);
 8005298:	4b04      	ldr	r3, [pc, #16]	@ (80052ac <SGP_MeasurementDone+0x18>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	0018      	movs	r0, r3
 800529e:	f000 fc87 	bl	8005bb0 <TimestampIsReached>
 80052a2:	0003      	movs	r3, r0
}
 80052a4:	0018      	movs	r0, r3
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}
 80052aa:	46c0      	nop			@ (mov r8, r8)
 80052ac:	20000018 	.word	0x20000018

080052b0 <SGP_TurnHeaterOff>:

void SGP_TurnHeaterOff(void) {
 80052b0:	b580      	push	{r7, lr}
 80052b2:	af00      	add	r7, sp, #0
  // This command could take from 0.1 to 1ms.
  WriteRegister(SGP_I2C_ADDRESS, TurnHeaterOffBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 80052b4:	4b04      	ldr	r3, [pc, #16]	@ (80052c8 <SGP_TurnHeaterOff+0x18>)
 80052b6:	2202      	movs	r2, #2
 80052b8:	0019      	movs	r1, r3
 80052ba:	2059      	movs	r0, #89	@ 0x59
 80052bc:	f7ff ff76 	bl	80051ac <WriteRegister>
}
 80052c0:	46c0      	nop			@ (mov r8, r8)
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}
 80052c6:	46c0      	nop			@ (mov r8, r8)
 80052c8:	20000000 	.word	0x20000000

080052cc <SGP_GetMeasurementValues>:

bool SGP_GetMeasurementValues(int32_t *vocIndex) {
 80052cc:	b590      	push	{r4, r7, lr}
 80052ce:	b087      	sub	sp, #28
 80052d0:	af02      	add	r7, sp, #8
 80052d2:	6078      	str	r0, [r7, #4]
  // TODO: Don't parse the values 0 since VOC index is still measuring.
  // Maybe use the
  if (SGP_HeatedUp() && !HeatUpIsDone) {
 80052d4:	f7ff ffc2 	bl	800525c <SGP_HeatedUp>
 80052d8:	1e03      	subs	r3, r0, #0
 80052da:	d01c      	beq.n	8005316 <SGP_GetMeasurementValues+0x4a>
 80052dc:	4b6b      	ldr	r3, [pc, #428]	@ (800548c <SGP_GetMeasurementValues+0x1c0>)
 80052de:	781b      	ldrb	r3, [r3, #0]
 80052e0:	2201      	movs	r2, #1
 80052e2:	4053      	eors	r3, r2
 80052e4:	b2db      	uxtb	r3, r3
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d015      	beq.n	8005316 <SGP_GetMeasurementValues+0x4a>
    Debug("SGP is heated up, starting the measurement.");
 80052ea:	4a69      	ldr	r2, [pc, #420]	@ (8005490 <SGP_GetMeasurementValues+0x1c4>)
 80052ec:	4b69      	ldr	r3, [pc, #420]	@ (8005494 <SGP_GetMeasurementValues+0x1c8>)
 80052ee:	0019      	movs	r1, r3
 80052f0:	2003      	movs	r0, #3
 80052f2:	f000 fcb3 	bl	8005c5c <CreateLine>
    HeatUpIsDone = true;
 80052f6:	4b65      	ldr	r3, [pc, #404]	@ (800548c <SGP_GetMeasurementValues+0x1c0>)
 80052f8:	2201      	movs	r2, #1
 80052fa:	701a      	strb	r2, [r3, #0]
    // SGP is heated up, we ignore the output and start another measurement.
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 80052fc:	4b66      	ldr	r3, [pc, #408]	@ (8005498 <SGP_GetMeasurementValues+0x1cc>)
 80052fe:	2208      	movs	r2, #8
 8005300:	0019      	movs	r1, r3
 8005302:	2059      	movs	r0, #89	@ 0x59
 8005304:	f7ff ff52 	bl	80051ac <WriteRegister>
    SGP_IdleTime = GetCurrentHalTicks() + SGP_SENSOR_IDLE_TIME;
 8005308:	f000 fd34 	bl	8005d74 <GetCurrentHalTicks>
 800530c:	0003      	movs	r3, r0
 800530e:	331e      	adds	r3, #30
 8005310:	001a      	movs	r2, r3
 8005312:	4b62      	ldr	r3, [pc, #392]	@ (800549c <SGP_GetMeasurementValues+0x1d0>)
 8005314:	601a      	str	r2, [r3, #0]
  }
  if (HeatUpIsDone && SGP_MeasurementReady() && !MeasurementIsReady) {
 8005316:	4b5d      	ldr	r3, [pc, #372]	@ (800548c <SGP_GetMeasurementValues+0x1c0>)
 8005318:	781b      	ldrb	r3, [r3, #0]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d100      	bne.n	8005320 <SGP_GetMeasurementValues+0x54>
 800531e:	e09c      	b.n	800545a <SGP_GetMeasurementValues+0x18e>
 8005320:	f7ff ffaa 	bl	8005278 <SGP_MeasurementReady>
 8005324:	1e03      	subs	r3, r0, #0
 8005326:	d100      	bne.n	800532a <SGP_GetMeasurementValues+0x5e>
 8005328:	e097      	b.n	800545a <SGP_GetMeasurementValues+0x18e>
 800532a:	4b5d      	ldr	r3, [pc, #372]	@ (80054a0 <SGP_GetMeasurementValues+0x1d4>)
 800532c:	781b      	ldrb	r3, [r3, #0]
 800532e:	2201      	movs	r2, #1
 8005330:	4053      	eors	r3, r2
 8005332:	b2db      	uxtb	r3, r3
 8005334:	2b00      	cmp	r3, #0
 8005336:	d100      	bne.n	800533a <SGP_GetMeasurementValues+0x6e>
 8005338:	e08f      	b.n	800545a <SGP_GetMeasurementValues+0x18e>
    Debug("Measurement[%i] is ready, reading buffer.", SGP_AmountOfSamplesDone + 1);
 800533a:	4b5a      	ldr	r3, [pc, #360]	@ (80054a4 <SGP_GetMeasurementValues+0x1d8>)
 800533c:	781b      	ldrb	r3, [r3, #0]
 800533e:	3301      	adds	r3, #1
 8005340:	4a59      	ldr	r2, [pc, #356]	@ (80054a8 <SGP_GetMeasurementValues+0x1dc>)
 8005342:	4954      	ldr	r1, [pc, #336]	@ (8005494 <SGP_GetMeasurementValues+0x1c8>)
 8005344:	2003      	movs	r0, #3
 8005346:	f000 fc89 	bl	8005c5c <CreateLine>
    MeasurementIsReady = true;
 800534a:	4b55      	ldr	r3, [pc, #340]	@ (80054a0 <SGP_GetMeasurementValues+0x1d4>)
 800534c:	2201      	movs	r2, #1
 800534e:	701a      	strb	r2, [r3, #0]
    // Measurement is ready to be read, also turning the heater off.
    ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH);
 8005350:	4b56      	ldr	r3, [pc, #344]	@ (80054ac <SGP_GetMeasurementValues+0x1e0>)
 8005352:	2203      	movs	r2, #3
 8005354:	0019      	movs	r1, r3
 8005356:	2059      	movs	r0, #89	@ 0x59
 8005358:	f7ff ff0a 	bl	8005170 <ReadRegister>
    if (!CheckCRC(SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH, SGP_MEASURE_BUFFER_RESPONSE_LENGTH)) {
 800535c:	4b53      	ldr	r3, [pc, #332]	@ (80054ac <SGP_GetMeasurementValues+0x1e0>)
 800535e:	2203      	movs	r2, #3
 8005360:	2103      	movs	r1, #3
 8005362:	0018      	movs	r0, r3
 8005364:	f000 f8fc 	bl	8005560 <CheckCRC>
 8005368:	0003      	movs	r3, r0
 800536a:	001a      	movs	r2, r3
 800536c:	2301      	movs	r3, #1
 800536e:	4053      	eors	r3, r2
 8005370:	b2db      	uxtb	r3, r3
 8005372:	2b00      	cmp	r3, #0
 8005374:	d02a      	beq.n	80053cc <SGP_GetMeasurementValues+0x100>
      Error("SGP measurements CRC check failed.");
 8005376:	4a4e      	ldr	r2, [pc, #312]	@ (80054b0 <SGP_GetMeasurementValues+0x1e4>)
 8005378:	4b4e      	ldr	r3, [pc, #312]	@ (80054b4 <SGP_GetMeasurementValues+0x1e8>)
 800537a:	0019      	movs	r1, r3
 800537c:	2001      	movs	r0, #1
 800537e:	f000 fc6d 	bl	8005c5c <CreateLine>
      Info("SGP_Measure buffer structure:");
 8005382:	4a4d      	ldr	r2, [pc, #308]	@ (80054b8 <SGP_GetMeasurementValues+0x1ec>)
 8005384:	4b4d      	ldr	r3, [pc, #308]	@ (80054bc <SGP_GetMeasurementValues+0x1f0>)
 8005386:	0019      	movs	r1, r3
 8005388:	2002      	movs	r0, #2
 800538a:	f000 fc67 	bl	8005c5c <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 800538e:	230f      	movs	r3, #15
 8005390:	18fb      	adds	r3, r7, r3
 8005392:	2200      	movs	r2, #0
 8005394:	701a      	strb	r2, [r3, #0]
 8005396:	e012      	b.n	80053be <SGP_GetMeasurementValues+0xf2>
        Debug("SGP_Measurement buffer[%d]: %d", i, SGP_ReadBuffer[i]);
 8005398:	240f      	movs	r4, #15
 800539a:	193b      	adds	r3, r7, r4
 800539c:	7818      	ldrb	r0, [r3, #0]
 800539e:	193b      	adds	r3, r7, r4
 80053a0:	781b      	ldrb	r3, [r3, #0]
 80053a2:	4a42      	ldr	r2, [pc, #264]	@ (80054ac <SGP_GetMeasurementValues+0x1e0>)
 80053a4:	5cd3      	ldrb	r3, [r2, r3]
 80053a6:	4a46      	ldr	r2, [pc, #280]	@ (80054c0 <SGP_GetMeasurementValues+0x1f4>)
 80053a8:	493a      	ldr	r1, [pc, #232]	@ (8005494 <SGP_GetMeasurementValues+0x1c8>)
 80053aa:	9300      	str	r3, [sp, #0]
 80053ac:	0003      	movs	r3, r0
 80053ae:	2003      	movs	r0, #3
 80053b0:	f000 fc54 	bl	8005c5c <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 80053b4:	193b      	adds	r3, r7, r4
 80053b6:	781a      	ldrb	r2, [r3, #0]
 80053b8:	193b      	adds	r3, r7, r4
 80053ba:	3201      	adds	r2, #1
 80053bc:	701a      	strb	r2, [r3, #0]
 80053be:	230f      	movs	r3, #15
 80053c0:	18fb      	adds	r3, r7, r3
 80053c2:	781b      	ldrb	r3, [r3, #0]
 80053c4:	2b02      	cmp	r3, #2
 80053c6:	d9e7      	bls.n	8005398 <SGP_GetMeasurementValues+0xcc>
      }
      return false;
 80053c8:	2300      	movs	r3, #0
 80053ca:	e05b      	b.n	8005484 <SGP_GetMeasurementValues+0x1b8>
    }
    SGP_MeasurementDutyCycle = GetCurrentHalTicks() + SGP_SENSOR_DUTYCYCLE;
 80053cc:	f000 fcd2 	bl	8005d74 <GetCurrentHalTicks>
 80053d0:	0003      	movs	r3, r0
 80053d2:	22fa      	movs	r2, #250	@ 0xfa
 80053d4:	0092      	lsls	r2, r2, #2
 80053d6:	189a      	adds	r2, r3, r2
 80053d8:	4b3a      	ldr	r3, [pc, #232]	@ (80054c4 <SGP_GetMeasurementValues+0x1f8>)
 80053da:	601a      	str	r2, [r3, #0]
    SGP_TurnHeaterOff();
 80053dc:	f7ff ff68 	bl	80052b0 <SGP_TurnHeaterOff>
    SGP_AmountOfSamplesDone += 1;
 80053e0:	4b30      	ldr	r3, [pc, #192]	@ (80054a4 <SGP_GetMeasurementValues+0x1d8>)
 80053e2:	781b      	ldrb	r3, [r3, #0]
 80053e4:	3301      	adds	r3, #1
 80053e6:	b2da      	uxtb	r2, r3
 80053e8:	4b2e      	ldr	r3, [pc, #184]	@ (80054a4 <SGP_GetMeasurementValues+0x1d8>)
 80053ea:	701a      	strb	r2, [r3, #0]
    if (SGP_AmountOfSamplesDone >= SGP_TotalSamples) {
 80053ec:	4b2d      	ldr	r3, [pc, #180]	@ (80054a4 <SGP_GetMeasurementValues+0x1d8>)
 80053ee:	781a      	ldrb	r2, [r3, #0]
 80053f0:	4b35      	ldr	r3, [pc, #212]	@ (80054c8 <SGP_GetMeasurementValues+0x1fc>)
 80053f2:	781b      	ldrb	r3, [r3, #0]
 80053f4:	429a      	cmp	r2, r3
 80053f6:	d330      	bcc.n	800545a <SGP_GetMeasurementValues+0x18e>
      uint16_t rawSignal = ((SGP_ReadBuffer[1] << 8) | (SGP_ReadBuffer[0]));
 80053f8:	4b2c      	ldr	r3, [pc, #176]	@ (80054ac <SGP_GetMeasurementValues+0x1e0>)
 80053fa:	785b      	ldrb	r3, [r3, #1]
 80053fc:	021b      	lsls	r3, r3, #8
 80053fe:	b21a      	sxth	r2, r3
 8005400:	4b2a      	ldr	r3, [pc, #168]	@ (80054ac <SGP_GetMeasurementValues+0x1e0>)
 8005402:	781b      	ldrb	r3, [r3, #0]
 8005404:	b21b      	sxth	r3, r3
 8005406:	4313      	orrs	r3, r2
 8005408:	b21a      	sxth	r2, r3
 800540a:	240c      	movs	r4, #12
 800540c:	193b      	adds	r3, r7, r4
 800540e:	801a      	strh	r2, [r3, #0]
      Debug("rawSignal value: %d", rawSignal);
 8005410:	193b      	adds	r3, r7, r4
 8005412:	881b      	ldrh	r3, [r3, #0]
 8005414:	4a2d      	ldr	r2, [pc, #180]	@ (80054cc <SGP_GetMeasurementValues+0x200>)
 8005416:	491f      	ldr	r1, [pc, #124]	@ (8005494 <SGP_GetMeasurementValues+0x1c8>)
 8005418:	2003      	movs	r0, #3
 800541a:	f000 fc1f 	bl	8005c5c <CreateLine>
      int32_t tempVocIndex = 0;
 800541e:	2300      	movs	r3, #0
 8005420:	60bb      	str	r3, [r7, #8]
      GasIndexAlgorithm_process(&params, rawSignal, &tempVocIndex);
 8005422:	193b      	adds	r3, r7, r4
 8005424:	8819      	ldrh	r1, [r3, #0]
 8005426:	2308      	movs	r3, #8
 8005428:	18fa      	adds	r2, r7, r3
 800542a:	4b29      	ldr	r3, [pc, #164]	@ (80054d0 <SGP_GetMeasurementValues+0x204>)
 800542c:	0018      	movs	r0, r3
 800542e:	f7ff f87d 	bl	800452c <GasIndexAlgorithm_process>
      Debug("vocIndex value: %d", tempVocIndex);
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	4a27      	ldr	r2, [pc, #156]	@ (80054d4 <SGP_GetMeasurementValues+0x208>)
 8005436:	4917      	ldr	r1, [pc, #92]	@ (8005494 <SGP_GetMeasurementValues+0x1c8>)
 8005438:	2003      	movs	r0, #3
 800543a:	f000 fc0f 	bl	8005c5c <CreateLine>
//      *vocIndex = 1337;
      *vocIndex = tempVocIndex;
 800543e:	68ba      	ldr	r2, [r7, #8]
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	601a      	str	r2, [r3, #0]
      SGP_AmountOfSamplesDone = 0;
 8005444:	4b17      	ldr	r3, [pc, #92]	@ (80054a4 <SGP_GetMeasurementValues+0x1d8>)
 8005446:	2200      	movs	r2, #0
 8005448:	701a      	strb	r2, [r3, #0]
      Debug("Measurement completely done.");
 800544a:	4a23      	ldr	r2, [pc, #140]	@ (80054d8 <SGP_GetMeasurementValues+0x20c>)
 800544c:	4b11      	ldr	r3, [pc, #68]	@ (8005494 <SGP_GetMeasurementValues+0x1c8>)
 800544e:	0019      	movs	r1, r3
 8005450:	2003      	movs	r0, #3
 8005452:	f000 fc03 	bl	8005c5c <CreateLine>
//      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
//        Debug("SGP_Measurement buffer[%d]: %d", i, SGP_ReadBuffer[i]);
//      }
      return true;
 8005456:	2301      	movs	r3, #1
 8005458:	e014      	b.n	8005484 <SGP_GetMeasurementValues+0x1b8>
    }
  }
  if (SGP_MeasurementDone() && HeatUpIsDone && MeasurementIsReady) {
 800545a:	f7ff ff1b 	bl	8005294 <SGP_MeasurementDone>
 800545e:	1e03      	subs	r3, r0, #0
 8005460:	d00f      	beq.n	8005482 <SGP_GetMeasurementValues+0x1b6>
 8005462:	4b0a      	ldr	r3, [pc, #40]	@ (800548c <SGP_GetMeasurementValues+0x1c0>)
 8005464:	781b      	ldrb	r3, [r3, #0]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d00b      	beq.n	8005482 <SGP_GetMeasurementValues+0x1b6>
 800546a:	4b0d      	ldr	r3, [pc, #52]	@ (80054a0 <SGP_GetMeasurementValues+0x1d4>)
 800546c:	781b      	ldrb	r3, [r3, #0]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d007      	beq.n	8005482 <SGP_GetMeasurementValues+0x1b6>
    // Starting next measurement
    Debug("Starting next measurement.");
 8005472:	4a1a      	ldr	r2, [pc, #104]	@ (80054dc <SGP_GetMeasurementValues+0x210>)
 8005474:	4b07      	ldr	r3, [pc, #28]	@ (8005494 <SGP_GetMeasurementValues+0x1c8>)
 8005476:	0019      	movs	r1, r3
 8005478:	2003      	movs	r0, #3
 800547a:	f000 fbef 	bl	8005c5c <CreateLine>
    SGP_StartMeasurement();
 800547e:	f7ff fecd 	bl	800521c <SGP_StartMeasurement>
  }
  return false;
 8005482:	2300      	movs	r3, #0
}
 8005484:	0018      	movs	r0, r3
 8005486:	46bd      	mov	sp, r7
 8005488:	b005      	add	sp, #20
 800548a:	bd90      	pop	{r4, r7, pc}
 800548c:	2000053a 	.word	0x2000053a
 8005490:	0800e50c 	.word	0x0800e50c
 8005494:	0800e538 	.word	0x0800e538
 8005498:	20000008 	.word	0x20000008
 800549c:	2000001c 	.word	0x2000001c
 80054a0:	2000053b 	.word	0x2000053b
 80054a4:	20000539 	.word	0x20000539
 80054a8:	0800e53c 	.word	0x0800e53c
 80054ac:	20000530 	.word	0x20000530
 80054b0:	0800e568 	.word	0x0800e568
 80054b4:	0800e58c 	.word	0x0800e58c
 80054b8:	0800e590 	.word	0x0800e590
 80054bc:	0800e5b0 	.word	0x0800e5b0
 80054c0:	0800e5b4 	.word	0x0800e5b4
 80054c4:	20000018 	.word	0x20000018
 80054c8:	20000010 	.word	0x20000010
 80054cc:	0800e5d4 	.word	0x0800e5d4
 80054d0:	2000053c 	.word	0x2000053c
 80054d4:	0800e5e8 	.word	0x0800e5e8
 80054d8:	0800e5fc 	.word	0x0800e5fc
 80054dc:	0800e61c 	.word	0x0800e61c

080054e0 <SGP_DeviceConnected>:

bool SGP_DeviceConnected(void) {
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b084      	sub	sp, #16
 80054e4:	af02      	add	r7, sp, #8
  WriteRegister(SGP_I2C_ADDRESS, GetSerialNumberBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 80054e6:	4b1a      	ldr	r3, [pc, #104]	@ (8005550 <SGP_DeviceConnected+0x70>)
 80054e8:	2202      	movs	r2, #2
 80054ea:	0019      	movs	r1, r3
 80054ec:	2059      	movs	r0, #89	@ 0x59
 80054ee:	f7ff fe5d 	bl	80051ac <WriteRegister>
  HAL_Delay(1); // 1ms delay for the sensor to respond (according to datasheet)
 80054f2:	2001      	movs	r0, #1
 80054f4:	f000 ffda 	bl	80064ac <HAL_Delay>
  ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH);
 80054f8:	4b16      	ldr	r3, [pc, #88]	@ (8005554 <SGP_DeviceConnected+0x74>)
 80054fa:	2209      	movs	r2, #9
 80054fc:	0019      	movs	r1, r3
 80054fe:	2059      	movs	r0, #89	@ 0x59
 8005500:	f7ff fe36 	bl	8005170 <ReadRegister>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 8005504:	1dfb      	adds	r3, r7, #7
 8005506:	2200      	movs	r2, #0
 8005508:	701a      	strb	r2, [r3, #0]
 800550a:	e011      	b.n	8005530 <SGP_DeviceConnected+0x50>
    Info("SGP_Device serial ID[%d]: 0x%X", i, SGP_ReadBuffer[i]);
 800550c:	1dfb      	adds	r3, r7, #7
 800550e:	7818      	ldrb	r0, [r3, #0]
 8005510:	1dfb      	adds	r3, r7, #7
 8005512:	781b      	ldrb	r3, [r3, #0]
 8005514:	4a0f      	ldr	r2, [pc, #60]	@ (8005554 <SGP_DeviceConnected+0x74>)
 8005516:	5cd3      	ldrb	r3, [r2, r3]
 8005518:	4a0f      	ldr	r2, [pc, #60]	@ (8005558 <SGP_DeviceConnected+0x78>)
 800551a:	4910      	ldr	r1, [pc, #64]	@ (800555c <SGP_DeviceConnected+0x7c>)
 800551c:	9300      	str	r3, [sp, #0]
 800551e:	0003      	movs	r3, r0
 8005520:	2002      	movs	r0, #2
 8005522:	f000 fb9b 	bl	8005c5c <CreateLine>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 8005526:	1dfb      	adds	r3, r7, #7
 8005528:	781a      	ldrb	r2, [r3, #0]
 800552a:	1dfb      	adds	r3, r7, #7
 800552c:	3201      	adds	r2, #1
 800552e:	701a      	strb	r2, [r3, #0]
 8005530:	1dfb      	adds	r3, r7, #7
 8005532:	781b      	ldrb	r3, [r3, #0]
 8005534:	2b08      	cmp	r3, #8
 8005536:	d9e9      	bls.n	800550c <SGP_DeviceConnected+0x2c>
  }
  return CheckCRC(SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH, SGP_SERIAL_NUMBER_SEGMENT_SIZE);
 8005538:	4b06      	ldr	r3, [pc, #24]	@ (8005554 <SGP_DeviceConnected+0x74>)
 800553a:	2203      	movs	r2, #3
 800553c:	2109      	movs	r1, #9
 800553e:	0018      	movs	r0, r3
 8005540:	f000 f80e 	bl	8005560 <CheckCRC>
 8005544:	0003      	movs	r3, r0
}
 8005546:	0018      	movs	r0, r3
 8005548:	46bd      	mov	sp, r7
 800554a:	b002      	add	sp, #8
 800554c:	bd80      	pop	{r7, pc}
 800554e:	46c0      	nop			@ (mov r8, r8)
 8005550:	20000004 	.word	0x20000004
 8005554:	20000530 	.word	0x20000530
 8005558:	0800e638 	.word	0x0800e638
 800555c:	0800e5b0 	.word	0x0800e5b0

08005560 <CheckCRC>:

static bool CheckCRC(uint8_t *data, uint8_t dataLength, uint8_t segmentSize) {
 8005560:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005562:	b08f      	sub	sp, #60	@ 0x3c
 8005564:	af00      	add	r7, sp, #0
 8005566:	6278      	str	r0, [r7, #36]	@ 0x24
 8005568:	0008      	movs	r0, r1
 800556a:	0011      	movs	r1, r2
 800556c:	2323      	movs	r3, #35	@ 0x23
 800556e:	18fb      	adds	r3, r7, r3
 8005570:	1c02      	adds	r2, r0, #0
 8005572:	701a      	strb	r2, [r3, #0]
 8005574:	2322      	movs	r3, #34	@ 0x22
 8005576:	18fb      	adds	r3, r7, r3
 8005578:	1c0a      	adds	r2, r1, #0
 800557a:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 800557c:	2317      	movs	r3, #23
 800557e:	2220      	movs	r2, #32
 8005580:	189b      	adds	r3, r3, r2
 8005582:	19db      	adds	r3, r3, r7
 8005584:	2200      	movs	r2, #0
 8005586:	701a      	strb	r2, [r3, #0]
 8005588:	e09f      	b.n	80056ca <CheckCRC+0x16a>
 800558a:	466b      	mov	r3, sp
 800558c:	001e      	movs	r6, r3
    uint8_t crcData[segmentSize];
 800558e:	2322      	movs	r3, #34	@ 0x22
 8005590:	18fb      	adds	r3, r7, r3
 8005592:	781b      	ldrb	r3, [r3, #0]
 8005594:	001a      	movs	r2, r3
 8005596:	3a01      	subs	r2, #1
 8005598:	633a      	str	r2, [r7, #48]	@ 0x30
 800559a:	60bb      	str	r3, [r7, #8]
 800559c:	2200      	movs	r2, #0
 800559e:	60fa      	str	r2, [r7, #12]
 80055a0:	68b8      	ldr	r0, [r7, #8]
 80055a2:	68f9      	ldr	r1, [r7, #12]
 80055a4:	0002      	movs	r2, r0
 80055a6:	0f52      	lsrs	r2, r2, #29
 80055a8:	000c      	movs	r4, r1
 80055aa:	00e4      	lsls	r4, r4, #3
 80055ac:	61fc      	str	r4, [r7, #28]
 80055ae:	69fc      	ldr	r4, [r7, #28]
 80055b0:	4314      	orrs	r4, r2
 80055b2:	61fc      	str	r4, [r7, #28]
 80055b4:	0002      	movs	r2, r0
 80055b6:	00d2      	lsls	r2, r2, #3
 80055b8:	61ba      	str	r2, [r7, #24]
 80055ba:	603b      	str	r3, [r7, #0]
 80055bc:	2200      	movs	r2, #0
 80055be:	607a      	str	r2, [r7, #4]
 80055c0:	6838      	ldr	r0, [r7, #0]
 80055c2:	6879      	ldr	r1, [r7, #4]
 80055c4:	0002      	movs	r2, r0
 80055c6:	0f52      	lsrs	r2, r2, #29
 80055c8:	000c      	movs	r4, r1
 80055ca:	00e4      	lsls	r4, r4, #3
 80055cc:	617c      	str	r4, [r7, #20]
 80055ce:	697c      	ldr	r4, [r7, #20]
 80055d0:	4314      	orrs	r4, r2
 80055d2:	617c      	str	r4, [r7, #20]
 80055d4:	0002      	movs	r2, r0
 80055d6:	00d2      	lsls	r2, r2, #3
 80055d8:	613a      	str	r2, [r7, #16]
 80055da:	3307      	adds	r3, #7
 80055dc:	08db      	lsrs	r3, r3, #3
 80055de:	00db      	lsls	r3, r3, #3
 80055e0:	466a      	mov	r2, sp
 80055e2:	1ad3      	subs	r3, r2, r3
 80055e4:	469d      	mov	sp, r3
 80055e6:	466b      	mov	r3, sp
 80055e8:	3300      	adds	r3, #0
 80055ea:	62fb      	str	r3, [r7, #44]	@ 0x2c

    for (uint8_t j = 0; j < segmentSize; j++) {
 80055ec:	2316      	movs	r3, #22
 80055ee:	2220      	movs	r2, #32
 80055f0:	189b      	adds	r3, r3, r2
 80055f2:	19db      	adds	r3, r3, r7
 80055f4:	2200      	movs	r2, #0
 80055f6:	701a      	strb	r2, [r3, #0]
 80055f8:	e01e      	b.n	8005638 <CheckCRC+0xd8>
      crcData[j] = data[i + j];
 80055fa:	2317      	movs	r3, #23
 80055fc:	2220      	movs	r2, #32
 80055fe:	189b      	adds	r3, r3, r2
 8005600:	19db      	adds	r3, r3, r7
 8005602:	781a      	ldrb	r2, [r3, #0]
 8005604:	2116      	movs	r1, #22
 8005606:	2320      	movs	r3, #32
 8005608:	18cb      	adds	r3, r1, r3
 800560a:	19db      	adds	r3, r3, r7
 800560c:	781b      	ldrb	r3, [r3, #0]
 800560e:	18d3      	adds	r3, r2, r3
 8005610:	001a      	movs	r2, r3
 8005612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005614:	189a      	adds	r2, r3, r2
 8005616:	0008      	movs	r0, r1
 8005618:	2320      	movs	r3, #32
 800561a:	18cb      	adds	r3, r1, r3
 800561c:	19db      	adds	r3, r3, r7
 800561e:	781b      	ldrb	r3, [r3, #0]
 8005620:	7811      	ldrb	r1, [r2, #0]
 8005622:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005624:	54d1      	strb	r1, [r2, r3]
    for (uint8_t j = 0; j < segmentSize; j++) {
 8005626:	2320      	movs	r3, #32
 8005628:	18c3      	adds	r3, r0, r3
 800562a:	19db      	adds	r3, r3, r7
 800562c:	781a      	ldrb	r2, [r3, #0]
 800562e:	2320      	movs	r3, #32
 8005630:	18c3      	adds	r3, r0, r3
 8005632:	19db      	adds	r3, r3, r7
 8005634:	3201      	adds	r2, #1
 8005636:	701a      	strb	r2, [r3, #0]
 8005638:	2316      	movs	r3, #22
 800563a:	2220      	movs	r2, #32
 800563c:	189b      	adds	r3, r3, r2
 800563e:	19da      	adds	r2, r3, r7
 8005640:	2322      	movs	r3, #34	@ 0x22
 8005642:	18fb      	adds	r3, r7, r3
 8005644:	7812      	ldrb	r2, [r2, #0]
 8005646:	781b      	ldrb	r3, [r3, #0]
 8005648:	429a      	cmp	r2, r3
 800564a:	d3d6      	bcc.n	80055fa <CheckCRC+0x9a>
    }
    uint8_t crc = data[i + segmentSize - 1];
 800564c:	2417      	movs	r4, #23
 800564e:	2320      	movs	r3, #32
 8005650:	18e3      	adds	r3, r4, r3
 8005652:	19db      	adds	r3, r3, r7
 8005654:	781a      	ldrb	r2, [r3, #0]
 8005656:	2322      	movs	r3, #34	@ 0x22
 8005658:	18fb      	adds	r3, r7, r3
 800565a:	781b      	ldrb	r3, [r3, #0]
 800565c:	18d3      	adds	r3, r2, r3
 800565e:	3b01      	subs	r3, #1
 8005660:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005662:	18d2      	adds	r2, r2, r3
 8005664:	250b      	movs	r5, #11
 8005666:	2320      	movs	r3, #32
 8005668:	18eb      	adds	r3, r5, r3
 800566a:	19db      	adds	r3, r3, r7
 800566c:	7812      	ldrb	r2, [r2, #0]
 800566e:	701a      	strb	r2, [r3, #0]

    if (CalculateCRC(crcData, segmentSize - 1) != crc) {
 8005670:	2322      	movs	r3, #34	@ 0x22
 8005672:	18fb      	adds	r3, r7, r3
 8005674:	781b      	ldrb	r3, [r3, #0]
 8005676:	3b01      	subs	r3, #1
 8005678:	b2da      	uxtb	r2, r3
 800567a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800567c:	0011      	movs	r1, r2
 800567e:	0018      	movs	r0, r3
 8005680:	f000 f838 	bl	80056f4 <CalculateCRC>
 8005684:	0003      	movs	r3, r0
 8005686:	001a      	movs	r2, r3
 8005688:	2320      	movs	r3, #32
 800568a:	18eb      	adds	r3, r5, r3
 800568c:	19db      	adds	r3, r3, r7
 800568e:	781b      	ldrb	r3, [r3, #0]
 8005690:	4293      	cmp	r3, r2
 8005692:	d00c      	beq.n	80056ae <CheckCRC+0x14e>
      Error("CRC check failed for segment: %d.", i + 1);
 8005694:	2320      	movs	r3, #32
 8005696:	18e3      	adds	r3, r4, r3
 8005698:	19db      	adds	r3, r3, r7
 800569a:	781b      	ldrb	r3, [r3, #0]
 800569c:	3301      	adds	r3, #1
 800569e:	4a13      	ldr	r2, [pc, #76]	@ (80056ec <CheckCRC+0x18c>)
 80056a0:	4913      	ldr	r1, [pc, #76]	@ (80056f0 <CheckCRC+0x190>)
 80056a2:	2001      	movs	r0, #1
 80056a4:	f000 fada 	bl	8005c5c <CreateLine>
      return false;
 80056a8:	2300      	movs	r3, #0
 80056aa:	46b5      	mov	sp, r6
 80056ac:	e019      	b.n	80056e2 <CheckCRC+0x182>
 80056ae:	46b5      	mov	sp, r6
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 80056b0:	2217      	movs	r2, #23
 80056b2:	2320      	movs	r3, #32
 80056b4:	18d3      	adds	r3, r2, r3
 80056b6:	19db      	adds	r3, r3, r7
 80056b8:	2120      	movs	r1, #32
 80056ba:	1852      	adds	r2, r2, r1
 80056bc:	19d1      	adds	r1, r2, r7
 80056be:	2222      	movs	r2, #34	@ 0x22
 80056c0:	18ba      	adds	r2, r7, r2
 80056c2:	7809      	ldrb	r1, [r1, #0]
 80056c4:	7812      	ldrb	r2, [r2, #0]
 80056c6:	188a      	adds	r2, r1, r2
 80056c8:	701a      	strb	r2, [r3, #0]
 80056ca:	2317      	movs	r3, #23
 80056cc:	2220      	movs	r2, #32
 80056ce:	189b      	adds	r3, r3, r2
 80056d0:	19da      	adds	r2, r3, r7
 80056d2:	2323      	movs	r3, #35	@ 0x23
 80056d4:	18fb      	adds	r3, r7, r3
 80056d6:	7812      	ldrb	r2, [r2, #0]
 80056d8:	781b      	ldrb	r3, [r3, #0]
 80056da:	429a      	cmp	r2, r3
 80056dc:	d200      	bcs.n	80056e0 <CheckCRC+0x180>
 80056de:	e754      	b.n	800558a <CheckCRC+0x2a>
    }
  }
  return true;
 80056e0:	2301      	movs	r3, #1
}
 80056e2:	0018      	movs	r0, r3
 80056e4:	46bd      	mov	sp, r7
 80056e6:	b00f      	add	sp, #60	@ 0x3c
 80056e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80056ea:	46c0      	nop			@ (mov r8, r8)
 80056ec:	0800e658 	.word	0x0800e658
 80056f0:	0800e58c 	.word	0x0800e58c

080056f4 <CalculateCRC>:

static uint8_t CalculateCRC(uint8_t *data, uint8_t length) {
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b084      	sub	sp, #16
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
 80056fc:	000a      	movs	r2, r1
 80056fe:	1cfb      	adds	r3, r7, #3
 8005700:	701a      	strb	r2, [r3, #0]
  uint8_t crc = SGP_CRC_INIT_VALUE;
 8005702:	230f      	movs	r3, #15
 8005704:	18fb      	adds	r3, r7, r3
 8005706:	22ff      	movs	r2, #255	@ 0xff
 8005708:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 800570a:	230e      	movs	r3, #14
 800570c:	18fb      	adds	r3, r7, r3
 800570e:	2200      	movs	r2, #0
 8005710:	701a      	strb	r2, [r3, #0]
 8005712:	e037      	b.n	8005784 <CalculateCRC+0x90>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 8005714:	230e      	movs	r3, #14
 8005716:	18fb      	adds	r3, r7, r3
 8005718:	781b      	ldrb	r3, [r3, #0]
 800571a:	687a      	ldr	r2, [r7, #4]
 800571c:	18d3      	adds	r3, r2, r3
 800571e:	7819      	ldrb	r1, [r3, #0]
 8005720:	220f      	movs	r2, #15
 8005722:	18bb      	adds	r3, r7, r2
 8005724:	18ba      	adds	r2, r7, r2
 8005726:	7812      	ldrb	r2, [r2, #0]
 8005728:	404a      	eors	r2, r1
 800572a:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 800572c:	230d      	movs	r3, #13
 800572e:	18fb      	adds	r3, r7, r3
 8005730:	2200      	movs	r2, #0
 8005732:	701a      	strb	r2, [r3, #0]
 8005734:	e01b      	b.n	800576e <CalculateCRC+0x7a>
      // If the leftmost (most significant) bit is set
      if (crc & SGP_CRC_MSB_MASK) {
 8005736:	210f      	movs	r1, #15
 8005738:	187b      	adds	r3, r7, r1
 800573a:	781b      	ldrb	r3, [r3, #0]
 800573c:	b25b      	sxtb	r3, r3
 800573e:	2b00      	cmp	r3, #0
 8005740:	da09      	bge.n	8005756 <CalculateCRC+0x62>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ SGP_CRC_POLYNOMIAL;
 8005742:	187b      	adds	r3, r7, r1
 8005744:	781b      	ldrb	r3, [r3, #0]
 8005746:	005b      	lsls	r3, r3, #1
 8005748:	b25b      	sxtb	r3, r3
 800574a:	2231      	movs	r2, #49	@ 0x31
 800574c:	4053      	eors	r3, r2
 800574e:	b25a      	sxtb	r2, r3
 8005750:	187b      	adds	r3, r7, r1
 8005752:	701a      	strb	r2, [r3, #0]
 8005754:	e005      	b.n	8005762 <CalculateCRC+0x6e>
      } else {
        crc <<= 1;
 8005756:	230f      	movs	r3, #15
 8005758:	18fa      	adds	r2, r7, r3
 800575a:	18fb      	adds	r3, r7, r3
 800575c:	781b      	ldrb	r3, [r3, #0]
 800575e:	18db      	adds	r3, r3, r3
 8005760:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 8005762:	210d      	movs	r1, #13
 8005764:	187b      	adds	r3, r7, r1
 8005766:	781a      	ldrb	r2, [r3, #0]
 8005768:	187b      	adds	r3, r7, r1
 800576a:	3201      	adds	r2, #1
 800576c:	701a      	strb	r2, [r3, #0]
 800576e:	230d      	movs	r3, #13
 8005770:	18fb      	adds	r3, r7, r3
 8005772:	781b      	ldrb	r3, [r3, #0]
 8005774:	2b07      	cmp	r3, #7
 8005776:	d9de      	bls.n	8005736 <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 8005778:	210e      	movs	r1, #14
 800577a:	187b      	adds	r3, r7, r1
 800577c:	781a      	ldrb	r2, [r3, #0]
 800577e:	187b      	adds	r3, r7, r1
 8005780:	3201      	adds	r2, #1
 8005782:	701a      	strb	r2, [r3, #0]
 8005784:	230e      	movs	r3, #14
 8005786:	18fa      	adds	r2, r7, r3
 8005788:	1cfb      	adds	r3, r7, #3
 800578a:	7812      	ldrb	r2, [r2, #0]
 800578c:	781b      	ldrb	r3, [r3, #0]
 800578e:	429a      	cmp	r2, r3
 8005790:	d3c0      	bcc.n	8005714 <CalculateCRC+0x20>
      }
    }
  }
  //  Info("SGP_CRC calculated value: 0x%X", crc);
  return crc;
 8005792:	230f      	movs	r3, #15
 8005794:	18fb      	adds	r3, r7, r3
 8005796:	781b      	ldrb	r3, [r3, #0]
}
 8005798:	0018      	movs	r0, r3
 800579a:	46bd      	mov	sp, r7
 800579c:	b004      	add	sp, #16
 800579e:	bd80      	pop	{r7, pc}

080057a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80057a4:	4b07      	ldr	r3, [pc, #28]	@ (80057c4 <HAL_MspInit+0x24>)
 80057a6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80057a8:	4b06      	ldr	r3, [pc, #24]	@ (80057c4 <HAL_MspInit+0x24>)
 80057aa:	2101      	movs	r1, #1
 80057ac:	430a      	orrs	r2, r1
 80057ae:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80057b0:	4b04      	ldr	r3, [pc, #16]	@ (80057c4 <HAL_MspInit+0x24>)
 80057b2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80057b4:	4b03      	ldr	r3, [pc, #12]	@ (80057c4 <HAL_MspInit+0x24>)
 80057b6:	2180      	movs	r1, #128	@ 0x80
 80057b8:	0549      	lsls	r1, r1, #21
 80057ba:	430a      	orrs	r2, r1
 80057bc:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80057be:	46c0      	nop			@ (mov r8, r8)
 80057c0:	46bd      	mov	sp, r7
 80057c2:	bd80      	pop	{r7, pc}
 80057c4:	40021000 	.word	0x40021000

080057c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80057cc:	46c0      	nop			@ (mov r8, r8)
 80057ce:	e7fd      	b.n	80057cc <NMI_Handler+0x4>

080057d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80057d4:	46c0      	nop			@ (mov r8, r8)
 80057d6:	e7fd      	b.n	80057d4 <HardFault_Handler+0x4>

080057d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80057dc:	46c0      	nop			@ (mov r8, r8)
 80057de:	46bd      	mov	sp, r7
 80057e0:	bd80      	pop	{r7, pc}

080057e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80057e2:	b580      	push	{r7, lr}
 80057e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80057e6:	46c0      	nop			@ (mov r8, r8)
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bd80      	pop	{r7, pc}

080057ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80057f0:	f000 fe40 	bl	8006474 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80057f4:	46c0      	nop			@ (mov r8, r8)
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bd80      	pop	{r7, pc}
	...

080057fc <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8005800:	4b05      	ldr	r3, [pc, #20]	@ (8005818 <DMA1_Channel2_3_IRQHandler+0x1c>)
 8005802:	0018      	movs	r0, r3
 8005804:	f001 f8b9 	bl	800697a <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8005808:	4b04      	ldr	r3, [pc, #16]	@ (800581c <DMA1_Channel2_3_IRQHandler+0x20>)
 800580a:	0018      	movs	r0, r3
 800580c:	f001 f8b5 	bl	800697a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8005810:	46c0      	nop			@ (mov r8, r8)
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}
 8005816:	46c0      	nop			@ (mov r8, r8)
 8005818:	200002d0 	.word	0x200002d0
 800581c:	20000288 	.word	0x20000288

08005820 <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8005824:	4b03      	ldr	r3, [pc, #12]	@ (8005834 <DMA1_Channel4_5_6_7_IRQHandler+0x14>)
 8005826:	0018      	movs	r0, r3
 8005828:	f001 f8a7 	bl	800697a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 800582c:	46c0      	nop			@ (mov r8, r8)
 800582e:	46bd      	mov	sp, r7
 8005830:	bd80      	pop	{r7, pc}
 8005832:	46c0      	nop			@ (mov r8, r8)
 8005834:	20000354 	.word	0x20000354

08005838 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 800583c:	4b09      	ldr	r3, [pc, #36]	@ (8005864 <I2C1_IRQHandler+0x2c>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	699a      	ldr	r2, [r3, #24]
 8005842:	23e0      	movs	r3, #224	@ 0xe0
 8005844:	00db      	lsls	r3, r3, #3
 8005846:	4013      	ands	r3, r2
 8005848:	d004      	beq.n	8005854 <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 800584a:	4b06      	ldr	r3, [pc, #24]	@ (8005864 <I2C1_IRQHandler+0x2c>)
 800584c:	0018      	movs	r0, r3
 800584e:	f001 fdef 	bl	8007430 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 8005852:	e003      	b.n	800585c <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 8005854:	4b03      	ldr	r3, [pc, #12]	@ (8005864 <I2C1_IRQHandler+0x2c>)
 8005856:	0018      	movs	r0, r3
 8005858:	f001 fdd0 	bl	80073fc <HAL_I2C_EV_IRQHandler>
}
 800585c:	46c0      	nop			@ (mov r8, r8)
 800585e:	46bd      	mov	sp, r7
 8005860:	bd80      	pop	{r7, pc}
 8005862:	46c0      	nop			@ (mov r8, r8)
 8005864:	20000234 	.word	0x20000234

08005868 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	af00      	add	r7, sp, #0
  return 1;
 800586c:	2301      	movs	r3, #1
}
 800586e:	0018      	movs	r0, r3
 8005870:	46bd      	mov	sp, r7
 8005872:	bd80      	pop	{r7, pc}

08005874 <_kill>:

int _kill(int pid, int sig)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b082      	sub	sp, #8
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
 800587c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800587e:	f006 fad1 	bl	800be24 <__errno>
 8005882:	0003      	movs	r3, r0
 8005884:	2216      	movs	r2, #22
 8005886:	601a      	str	r2, [r3, #0]
  return -1;
 8005888:	2301      	movs	r3, #1
 800588a:	425b      	negs	r3, r3
}
 800588c:	0018      	movs	r0, r3
 800588e:	46bd      	mov	sp, r7
 8005890:	b002      	add	sp, #8
 8005892:	bd80      	pop	{r7, pc}

08005894 <_exit>:

void _exit (int status)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b082      	sub	sp, #8
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800589c:	2301      	movs	r3, #1
 800589e:	425a      	negs	r2, r3
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	0011      	movs	r1, r2
 80058a4:	0018      	movs	r0, r3
 80058a6:	f7ff ffe5 	bl	8005874 <_kill>
  while (1) {}    /* Make sure we hang here */
 80058aa:	46c0      	nop			@ (mov r8, r8)
 80058ac:	e7fd      	b.n	80058aa <_exit+0x16>

080058ae <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80058ae:	b580      	push	{r7, lr}
 80058b0:	b086      	sub	sp, #24
 80058b2:	af00      	add	r7, sp, #0
 80058b4:	60f8      	str	r0, [r7, #12]
 80058b6:	60b9      	str	r1, [r7, #8]
 80058b8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80058ba:	2300      	movs	r3, #0
 80058bc:	617b      	str	r3, [r7, #20]
 80058be:	e00a      	b.n	80058d6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80058c0:	e000      	b.n	80058c4 <_read+0x16>
 80058c2:	bf00      	nop
 80058c4:	0001      	movs	r1, r0
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	1c5a      	adds	r2, r3, #1
 80058ca:	60ba      	str	r2, [r7, #8]
 80058cc:	b2ca      	uxtb	r2, r1
 80058ce:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80058d0:	697b      	ldr	r3, [r7, #20]
 80058d2:	3301      	adds	r3, #1
 80058d4:	617b      	str	r3, [r7, #20]
 80058d6:	697a      	ldr	r2, [r7, #20]
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	429a      	cmp	r2, r3
 80058dc:	dbf0      	blt.n	80058c0 <_read+0x12>
  }

  return len;
 80058de:	687b      	ldr	r3, [r7, #4]
}
 80058e0:	0018      	movs	r0, r3
 80058e2:	46bd      	mov	sp, r7
 80058e4:	b006      	add	sp, #24
 80058e6:	bd80      	pop	{r7, pc}

080058e8 <_close>:
  }
  return len;
}

int _close(int file)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b082      	sub	sp, #8
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80058f0:	2301      	movs	r3, #1
 80058f2:	425b      	negs	r3, r3
}
 80058f4:	0018      	movs	r0, r3
 80058f6:	46bd      	mov	sp, r7
 80058f8:	b002      	add	sp, #8
 80058fa:	bd80      	pop	{r7, pc}

080058fc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b082      	sub	sp, #8
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
 8005904:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	2280      	movs	r2, #128	@ 0x80
 800590a:	0192      	lsls	r2, r2, #6
 800590c:	605a      	str	r2, [r3, #4]
  return 0;
 800590e:	2300      	movs	r3, #0
}
 8005910:	0018      	movs	r0, r3
 8005912:	46bd      	mov	sp, r7
 8005914:	b002      	add	sp, #8
 8005916:	bd80      	pop	{r7, pc}

08005918 <_isatty>:

int _isatty(int file)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b082      	sub	sp, #8
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005920:	2301      	movs	r3, #1
}
 8005922:	0018      	movs	r0, r3
 8005924:	46bd      	mov	sp, r7
 8005926:	b002      	add	sp, #8
 8005928:	bd80      	pop	{r7, pc}

0800592a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800592a:	b580      	push	{r7, lr}
 800592c:	b084      	sub	sp, #16
 800592e:	af00      	add	r7, sp, #0
 8005930:	60f8      	str	r0, [r7, #12]
 8005932:	60b9      	str	r1, [r7, #8]
 8005934:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005936:	2300      	movs	r3, #0
}
 8005938:	0018      	movs	r0, r3
 800593a:	46bd      	mov	sp, r7
 800593c:	b004      	add	sp, #16
 800593e:	bd80      	pop	{r7, pc}

08005940 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b086      	sub	sp, #24
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005948:	4a14      	ldr	r2, [pc, #80]	@ (800599c <_sbrk+0x5c>)
 800594a:	4b15      	ldr	r3, [pc, #84]	@ (80059a0 <_sbrk+0x60>)
 800594c:	1ad3      	subs	r3, r2, r3
 800594e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005954:	4b13      	ldr	r3, [pc, #76]	@ (80059a4 <_sbrk+0x64>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d102      	bne.n	8005962 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800595c:	4b11      	ldr	r3, [pc, #68]	@ (80059a4 <_sbrk+0x64>)
 800595e:	4a12      	ldr	r2, [pc, #72]	@ (80059a8 <_sbrk+0x68>)
 8005960:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005962:	4b10      	ldr	r3, [pc, #64]	@ (80059a4 <_sbrk+0x64>)
 8005964:	681a      	ldr	r2, [r3, #0]
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	18d3      	adds	r3, r2, r3
 800596a:	693a      	ldr	r2, [r7, #16]
 800596c:	429a      	cmp	r2, r3
 800596e:	d207      	bcs.n	8005980 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005970:	f006 fa58 	bl	800be24 <__errno>
 8005974:	0003      	movs	r3, r0
 8005976:	220c      	movs	r2, #12
 8005978:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800597a:	2301      	movs	r3, #1
 800597c:	425b      	negs	r3, r3
 800597e:	e009      	b.n	8005994 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005980:	4b08      	ldr	r3, [pc, #32]	@ (80059a4 <_sbrk+0x64>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005986:	4b07      	ldr	r3, [pc, #28]	@ (80059a4 <_sbrk+0x64>)
 8005988:	681a      	ldr	r2, [r3, #0]
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	18d2      	adds	r2, r2, r3
 800598e:	4b05      	ldr	r3, [pc, #20]	@ (80059a4 <_sbrk+0x64>)
 8005990:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8005992:	68fb      	ldr	r3, [r7, #12]
}
 8005994:	0018      	movs	r0, r3
 8005996:	46bd      	mov	sp, r7
 8005998:	b006      	add	sp, #24
 800599a:	bd80      	pop	{r7, pc}
 800599c:	20005000 	.word	0x20005000
 80059a0:	00000400 	.word	0x00000400
 80059a4:	200005e0 	.word	0x200005e0
 80059a8:	20001060 	.word	0x20001060

080059ac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80059b0:	46c0      	nop			@ (mov r8, r8)
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bd80      	pop	{r7, pc}
	...

080059b8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart4;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80059bc:	4b14      	ldr	r3, [pc, #80]	@ (8005a10 <MX_USART1_UART_Init+0x58>)
 80059be:	4a15      	ldr	r2, [pc, #84]	@ (8005a14 <MX_USART1_UART_Init+0x5c>)
 80059c0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80059c2:	4b13      	ldr	r3, [pc, #76]	@ (8005a10 <MX_USART1_UART_Init+0x58>)
 80059c4:	22e1      	movs	r2, #225	@ 0xe1
 80059c6:	0252      	lsls	r2, r2, #9
 80059c8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80059ca:	4b11      	ldr	r3, [pc, #68]	@ (8005a10 <MX_USART1_UART_Init+0x58>)
 80059cc:	2200      	movs	r2, #0
 80059ce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80059d0:	4b0f      	ldr	r3, [pc, #60]	@ (8005a10 <MX_USART1_UART_Init+0x58>)
 80059d2:	2200      	movs	r2, #0
 80059d4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80059d6:	4b0e      	ldr	r3, [pc, #56]	@ (8005a10 <MX_USART1_UART_Init+0x58>)
 80059d8:	2200      	movs	r2, #0
 80059da:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80059dc:	4b0c      	ldr	r3, [pc, #48]	@ (8005a10 <MX_USART1_UART_Init+0x58>)
 80059de:	220c      	movs	r2, #12
 80059e0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80059e2:	4b0b      	ldr	r3, [pc, #44]	@ (8005a10 <MX_USART1_UART_Init+0x58>)
 80059e4:	2200      	movs	r2, #0
 80059e6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80059e8:	4b09      	ldr	r3, [pc, #36]	@ (8005a10 <MX_USART1_UART_Init+0x58>)
 80059ea:	2200      	movs	r2, #0
 80059ec:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80059ee:	4b08      	ldr	r3, [pc, #32]	@ (8005a10 <MX_USART1_UART_Init+0x58>)
 80059f0:	2200      	movs	r2, #0
 80059f2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80059f4:	4b06      	ldr	r3, [pc, #24]	@ (8005a10 <MX_USART1_UART_Init+0x58>)
 80059f6:	2200      	movs	r2, #0
 80059f8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80059fa:	4b05      	ldr	r3, [pc, #20]	@ (8005a10 <MX_USART1_UART_Init+0x58>)
 80059fc:	0018      	movs	r0, r3
 80059fe:	f004 fe21 	bl	800a644 <HAL_UART_Init>
 8005a02:	1e03      	subs	r3, r0, #0
 8005a04:	d001      	beq.n	8005a0a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8005a06:	f7fe f9a3 	bl	8003d50 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8005a0a:	46c0      	nop			@ (mov r8, r8)
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bd80      	pop	{r7, pc}
 8005a10:	200005e4 	.word	0x200005e4
 8005a14:	40013800 	.word	0x40013800

08005a18 <MX_USART4_UART_Init>:
/* USART4 init function */

void MX_USART4_UART_Init(void)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 8005a1c:	4b14      	ldr	r3, [pc, #80]	@ (8005a70 <MX_USART4_UART_Init+0x58>)
 8005a1e:	4a15      	ldr	r2, [pc, #84]	@ (8005a74 <MX_USART4_UART_Init+0x5c>)
 8005a20:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8005a22:	4b13      	ldr	r3, [pc, #76]	@ (8005a70 <MX_USART4_UART_Init+0x58>)
 8005a24:	22e1      	movs	r2, #225	@ 0xe1
 8005a26:	0252      	lsls	r2, r2, #9
 8005a28:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8005a2a:	4b11      	ldr	r3, [pc, #68]	@ (8005a70 <MX_USART4_UART_Init+0x58>)
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8005a30:	4b0f      	ldr	r3, [pc, #60]	@ (8005a70 <MX_USART4_UART_Init+0x58>)
 8005a32:	2200      	movs	r2, #0
 8005a34:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8005a36:	4b0e      	ldr	r3, [pc, #56]	@ (8005a70 <MX_USART4_UART_Init+0x58>)
 8005a38:	2200      	movs	r2, #0
 8005a3a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8005a3c:	4b0c      	ldr	r3, [pc, #48]	@ (8005a70 <MX_USART4_UART_Init+0x58>)
 8005a3e:	220c      	movs	r2, #12
 8005a40:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005a42:	4b0b      	ldr	r3, [pc, #44]	@ (8005a70 <MX_USART4_UART_Init+0x58>)
 8005a44:	2200      	movs	r2, #0
 8005a46:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8005a48:	4b09      	ldr	r3, [pc, #36]	@ (8005a70 <MX_USART4_UART_Init+0x58>)
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005a4e:	4b08      	ldr	r3, [pc, #32]	@ (8005a70 <MX_USART4_UART_Init+0x58>)
 8005a50:	2200      	movs	r2, #0
 8005a52:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005a54:	4b06      	ldr	r3, [pc, #24]	@ (8005a70 <MX_USART4_UART_Init+0x58>)
 8005a56:	2200      	movs	r2, #0
 8005a58:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8005a5a:	4b05      	ldr	r3, [pc, #20]	@ (8005a70 <MX_USART4_UART_Init+0x58>)
 8005a5c:	0018      	movs	r0, r3
 8005a5e:	f004 fdf1 	bl	800a644 <HAL_UART_Init>
 8005a62:	1e03      	subs	r3, r0, #0
 8005a64:	d001      	beq.n	8005a6a <MX_USART4_UART_Init+0x52>
  {
    Error_Handler();
 8005a66:	f7fe f973 	bl	8003d50 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 8005a6a:	46c0      	nop			@ (mov r8, r8)
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bd80      	pop	{r7, pc}
 8005a70:	2000066c 	.word	0x2000066c
 8005a74:	40004c00 	.word	0x40004c00

08005a78 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005a78:	b590      	push	{r4, r7, lr}
 8005a7a:	b08b      	sub	sp, #44	@ 0x2c
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a80:	2414      	movs	r4, #20
 8005a82:	193b      	adds	r3, r7, r4
 8005a84:	0018      	movs	r0, r3
 8005a86:	2314      	movs	r3, #20
 8005a88:	001a      	movs	r2, r3
 8005a8a:	2100      	movs	r1, #0
 8005a8c:	f006 f970 	bl	800bd70 <memset>
  if(uartHandle->Instance==USART1)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4a42      	ldr	r2, [pc, #264]	@ (8005ba0 <HAL_UART_MspInit+0x128>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d12b      	bne.n	8005af2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005a9a:	4b42      	ldr	r3, [pc, #264]	@ (8005ba4 <HAL_UART_MspInit+0x12c>)
 8005a9c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005a9e:	4b41      	ldr	r3, [pc, #260]	@ (8005ba4 <HAL_UART_MspInit+0x12c>)
 8005aa0:	2180      	movs	r1, #128	@ 0x80
 8005aa2:	01c9      	lsls	r1, r1, #7
 8005aa4:	430a      	orrs	r2, r1
 8005aa6:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005aa8:	4b3e      	ldr	r3, [pc, #248]	@ (8005ba4 <HAL_UART_MspInit+0x12c>)
 8005aaa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005aac:	4b3d      	ldr	r3, [pc, #244]	@ (8005ba4 <HAL_UART_MspInit+0x12c>)
 8005aae:	2101      	movs	r1, #1
 8005ab0:	430a      	orrs	r2, r1
 8005ab2:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005ab4:	4b3b      	ldr	r3, [pc, #236]	@ (8005ba4 <HAL_UART_MspInit+0x12c>)
 8005ab6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ab8:	2201      	movs	r2, #1
 8005aba:	4013      	ands	r3, r2
 8005abc:	613b      	str	r3, [r7, #16]
 8005abe:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8005ac0:	193b      	adds	r3, r7, r4
 8005ac2:	22c0      	movs	r2, #192	@ 0xc0
 8005ac4:	00d2      	lsls	r2, r2, #3
 8005ac6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ac8:	0021      	movs	r1, r4
 8005aca:	187b      	adds	r3, r7, r1
 8005acc:	2202      	movs	r2, #2
 8005ace:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ad0:	187b      	adds	r3, r7, r1
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005ad6:	187b      	adds	r3, r7, r1
 8005ad8:	2203      	movs	r2, #3
 8005ada:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8005adc:	187b      	adds	r3, r7, r1
 8005ade:	2204      	movs	r2, #4
 8005ae0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005ae2:	187a      	adds	r2, r7, r1
 8005ae4:	23a0      	movs	r3, #160	@ 0xa0
 8005ae6:	05db      	lsls	r3, r3, #23
 8005ae8:	0011      	movs	r1, r2
 8005aea:	0018      	movs	r0, r3
 8005aec:	f001 f82e 	bl	8006b4c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }
}
 8005af0:	e051      	b.n	8005b96 <HAL_UART_MspInit+0x11e>
  else if(uartHandle->Instance==USART4)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4a2c      	ldr	r2, [pc, #176]	@ (8005ba8 <HAL_UART_MspInit+0x130>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d14c      	bne.n	8005b96 <HAL_UART_MspInit+0x11e>
    __HAL_RCC_USART4_CLK_ENABLE();
 8005afc:	4b29      	ldr	r3, [pc, #164]	@ (8005ba4 <HAL_UART_MspInit+0x12c>)
 8005afe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005b00:	4b28      	ldr	r3, [pc, #160]	@ (8005ba4 <HAL_UART_MspInit+0x12c>)
 8005b02:	2180      	movs	r1, #128	@ 0x80
 8005b04:	0309      	lsls	r1, r1, #12
 8005b06:	430a      	orrs	r2, r1
 8005b08:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005b0a:	4b26      	ldr	r3, [pc, #152]	@ (8005ba4 <HAL_UART_MspInit+0x12c>)
 8005b0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b0e:	4b25      	ldr	r3, [pc, #148]	@ (8005ba4 <HAL_UART_MspInit+0x12c>)
 8005b10:	2101      	movs	r1, #1
 8005b12:	430a      	orrs	r2, r1
 8005b14:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005b16:	4b23      	ldr	r3, [pc, #140]	@ (8005ba4 <HAL_UART_MspInit+0x12c>)
 8005b18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	4013      	ands	r3, r2
 8005b1e:	60fb      	str	r3, [r7, #12]
 8005b20:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005b22:	4b20      	ldr	r3, [pc, #128]	@ (8005ba4 <HAL_UART_MspInit+0x12c>)
 8005b24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b26:	4b1f      	ldr	r3, [pc, #124]	@ (8005ba4 <HAL_UART_MspInit+0x12c>)
 8005b28:	2104      	movs	r1, #4
 8005b2a:	430a      	orrs	r2, r1
 8005b2c:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005b2e:	4b1d      	ldr	r3, [pc, #116]	@ (8005ba4 <HAL_UART_MspInit+0x12c>)
 8005b30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b32:	2204      	movs	r2, #4
 8005b34:	4013      	ands	r3, r2
 8005b36:	60bb      	str	r3, [r7, #8]
 8005b38:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8005b3a:	2414      	movs	r4, #20
 8005b3c:	193b      	adds	r3, r7, r4
 8005b3e:	2202      	movs	r2, #2
 8005b40:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b42:	193b      	adds	r3, r7, r4
 8005b44:	2202      	movs	r2, #2
 8005b46:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b48:	193b      	adds	r3, r7, r4
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005b4e:	193b      	adds	r3, r7, r4
 8005b50:	2203      	movs	r2, #3
 8005b52:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 8005b54:	193b      	adds	r3, r7, r4
 8005b56:	2206      	movs	r2, #6
 8005b58:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005b5a:	193a      	adds	r2, r7, r4
 8005b5c:	23a0      	movs	r3, #160	@ 0xa0
 8005b5e:	05db      	lsls	r3, r3, #23
 8005b60:	0011      	movs	r1, r2
 8005b62:	0018      	movs	r0, r3
 8005b64:	f000 fff2 	bl	8006b4c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005b68:	0021      	movs	r1, r4
 8005b6a:	187b      	adds	r3, r7, r1
 8005b6c:	2280      	movs	r2, #128	@ 0x80
 8005b6e:	00d2      	lsls	r2, r2, #3
 8005b70:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b72:	187b      	adds	r3, r7, r1
 8005b74:	2202      	movs	r2, #2
 8005b76:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b78:	187b      	adds	r3, r7, r1
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005b7e:	187b      	adds	r3, r7, r1
 8005b80:	2203      	movs	r2, #3
 8005b82:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 8005b84:	187b      	adds	r3, r7, r1
 8005b86:	2206      	movs	r2, #6
 8005b88:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005b8a:	187b      	adds	r3, r7, r1
 8005b8c:	4a07      	ldr	r2, [pc, #28]	@ (8005bac <HAL_UART_MspInit+0x134>)
 8005b8e:	0019      	movs	r1, r3
 8005b90:	0010      	movs	r0, r2
 8005b92:	f000 ffdb 	bl	8006b4c <HAL_GPIO_Init>
}
 8005b96:	46c0      	nop			@ (mov r8, r8)
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	b00b      	add	sp, #44	@ 0x2c
 8005b9c:	bd90      	pop	{r4, r7, pc}
 8005b9e:	46c0      	nop			@ (mov r8, r8)
 8005ba0:	40013800 	.word	0x40013800
 8005ba4:	40021000 	.word	0x40021000
 8005ba8:	40004c00 	.word	0x40004c00
 8005bac:	50000800 	.word	0x50000800

08005bb0 <TimestampIsReached>:
VerboseLevel CurrentVerboseLevel = VERBOSE_ALL;
#define TEXTBUFFER_LEN 1024

extern UART_HandleTypeDef huart1;

bool TimestampIsReached(uint32_t timestamp) {
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b086      	sub	sp, #24
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
  uint32_t now = HAL_GetTick();
 8005bb8:	f000 fc6e 	bl	8006498 <HAL_GetTick>
 8005bbc:	0003      	movs	r3, r0
 8005bbe:	617b      	str	r3, [r7, #20]
  const uint32_t HALF_TIME = 0x7FFFFFFF; // ~25 days max timestamp delay
 8005bc0:	4b1c      	ldr	r3, [pc, #112]	@ (8005c34 <TimestampIsReached+0x84>)
 8005bc2:	613b      	str	r3, [r7, #16]

  // Ensures that the difference between now and timestamp is less than half of
  // the maximum value of the counter. This confirms that the timestamp is not
  // too far in the past.
  bool noOverflow = (now >= timestamp && now - timestamp < HALF_TIME);
 8005bc4:	697a      	ldr	r2, [r7, #20]
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	429a      	cmp	r2, r3
 8005bca:	d307      	bcc.n	8005bdc <TimestampIsReached+0x2c>
 8005bcc:	697a      	ldr	r2, [r7, #20]
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	1ad3      	subs	r3, r2, r3
 8005bd2:	693a      	ldr	r2, [r7, #16]
 8005bd4:	429a      	cmp	r2, r3
 8005bd6:	d901      	bls.n	8005bdc <TimestampIsReached+0x2c>
 8005bd8:	2201      	movs	r2, #1
 8005bda:	e000      	b.n	8005bde <TimestampIsReached+0x2e>
 8005bdc:	2200      	movs	r2, #0
 8005bde:	230f      	movs	r3, #15
 8005be0:	18fb      	adds	r3, r7, r3
 8005be2:	701a      	strb	r2, [r3, #0]
 8005be4:	781a      	ldrb	r2, [r3, #0]
 8005be6:	2101      	movs	r1, #1
 8005be8:	400a      	ands	r2, r1
 8005bea:	701a      	strb	r2, [r3, #0]
  // Ensures that the timestamp is so far ahead that it would have wrapped
  // around past the maximum value of the counter indicating an overflow
  // scenario.
  bool overflowWithTimestampAhead =
      (now < timestamp && timestamp - now > HALF_TIME);
 8005bec:	697a      	ldr	r2, [r7, #20]
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	429a      	cmp	r2, r3
 8005bf2:	d207      	bcs.n	8005c04 <TimestampIsReached+0x54>
 8005bf4:	687a      	ldr	r2, [r7, #4]
 8005bf6:	697b      	ldr	r3, [r7, #20]
 8005bf8:	1ad3      	subs	r3, r2, r3
 8005bfa:	693a      	ldr	r2, [r7, #16]
 8005bfc:	429a      	cmp	r2, r3
 8005bfe:	d201      	bcs.n	8005c04 <TimestampIsReached+0x54>
 8005c00:	2201      	movs	r2, #1
 8005c02:	e000      	b.n	8005c06 <TimestampIsReached+0x56>
 8005c04:	2200      	movs	r2, #0
  bool overflowWithTimestampAhead =
 8005c06:	200e      	movs	r0, #14
 8005c08:	183b      	adds	r3, r7, r0
 8005c0a:	701a      	strb	r2, [r3, #0]
 8005c0c:	781a      	ldrb	r2, [r3, #0]
 8005c0e:	2101      	movs	r1, #1
 8005c10:	400a      	ands	r2, r1
 8005c12:	701a      	strb	r2, [r3, #0]

  if (noOverflow || overflowWithTimestampAhead) {
 8005c14:	230f      	movs	r3, #15
 8005c16:	18fb      	adds	r3, r7, r3
 8005c18:	781b      	ldrb	r3, [r3, #0]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d103      	bne.n	8005c26 <TimestampIsReached+0x76>
 8005c1e:	183b      	adds	r3, r7, r0
 8005c20:	781b      	ldrb	r3, [r3, #0]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d001      	beq.n	8005c2a <TimestampIsReached+0x7a>
    // Timestamp has been reached
    return true;
 8005c26:	2301      	movs	r3, #1
 8005c28:	e000      	b.n	8005c2c <TimestampIsReached+0x7c>
  }

  // Timestamp not yet reached
  return false;
 8005c2a:	2300      	movs	r3, #0
}
 8005c2c:	0018      	movs	r0, r3
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	b006      	add	sp, #24
 8005c32:	bd80      	pop	{r7, pc}
 8005c34:	7fffffff 	.word	0x7fffffff

08005c38 <AddTimestamp>:

static void AddTimestamp(char *stamp) {
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b082      	sub	sp, #8
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
  sprintf(stamp, "[%08lu] ", (uint32_t)HAL_GetTick());
 8005c40:	f000 fc2a 	bl	8006498 <HAL_GetTick>
 8005c44:	0002      	movs	r2, r0
 8005c46:	4904      	ldr	r1, [pc, #16]	@ (8005c58 <AddTimestamp+0x20>)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	0018      	movs	r0, r3
 8005c4c:	f005 ffec 	bl	800bc28 <siprintf>
}
 8005c50:	46c0      	nop			@ (mov r8, r8)
 8005c52:	46bd      	mov	sp, r7
 8005c54:	b002      	add	sp, #8
 8005c56:	bd80      	pop	{r7, pc}
 8005c58:	0800e700 	.word	0x0800e700

08005c5c <CreateLine>:

void CreateLine(VerboseLevel verboseLevel, char *tag, char *format, ...) {
 8005c5c:	b40c      	push	{r2, r3}
 8005c5e:	b5b0      	push	{r4, r5, r7, lr}
 8005c60:	4c2b      	ldr	r4, [pc, #172]	@ (8005d10 <CreateLine+0xb4>)
 8005c62:	44a5      	add	sp, r4
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	0002      	movs	r2, r0
 8005c68:	6039      	str	r1, [r7, #0]
 8005c6a:	4b2a      	ldr	r3, [pc, #168]	@ (8005d14 <CreateLine+0xb8>)
 8005c6c:	2182      	movs	r1, #130	@ 0x82
 8005c6e:	00c9      	lsls	r1, r1, #3
 8005c70:	185b      	adds	r3, r3, r1
 8005c72:	19db      	adds	r3, r3, r7
 8005c74:	701a      	strb	r2, [r3, #0]

  if (verboseLevel > CurrentVerboseLevel) {
 8005c76:	4b28      	ldr	r3, [pc, #160]	@ (8005d18 <CreateLine+0xbc>)
 8005c78:	781b      	ldrb	r3, [r3, #0]
 8005c7a:	4a26      	ldr	r2, [pc, #152]	@ (8005d14 <CreateLine+0xb8>)
 8005c7c:	1852      	adds	r2, r2, r1
 8005c7e:	19d2      	adds	r2, r2, r7
 8005c80:	7812      	ldrb	r2, [r2, #0]
 8005c82:	429a      	cmp	r2, r3
 8005c84:	d83b      	bhi.n	8005cfe <CreateLine+0xa2>
    return;
  }
  char textBuffer[TEXTBUFFER_LEN];

  // Format the initial part of the message with the tag and timestamp
  sprintf(textBuffer, "%s ", tag);
 8005c86:	683a      	ldr	r2, [r7, #0]
 8005c88:	4924      	ldr	r1, [pc, #144]	@ (8005d1c <CreateLine+0xc0>)
 8005c8a:	240c      	movs	r4, #12
 8005c8c:	193b      	adds	r3, r7, r4
 8005c8e:	0018      	movs	r0, r3
 8005c90:	f005 ffca 	bl	800bc28 <siprintf>

  if (CurrentVerboseLevel > VERBOSE_MINIMAL) {
 8005c94:	4b20      	ldr	r3, [pc, #128]	@ (8005d18 <CreateLine+0xbc>)
 8005c96:	781b      	ldrb	r3, [r3, #0]
 8005c98:	2b01      	cmp	r3, #1
 8005c9a:	d909      	bls.n	8005cb0 <CreateLine+0x54>
    AddTimestamp(&textBuffer[strlen(textBuffer)]);
 8005c9c:	193b      	adds	r3, r7, r4
 8005c9e:	0018      	movs	r0, r3
 8005ca0:	f7fa fa32 	bl	8000108 <strlen>
 8005ca4:	0002      	movs	r2, r0
 8005ca6:	193b      	adds	r3, r7, r4
 8005ca8:	189b      	adds	r3, r3, r2
 8005caa:	0018      	movs	r0, r3
 8005cac:	f7ff ffc4 	bl	8005c38 <AddTimestamp>
  }
  int lineOffset = strlen(textBuffer);
 8005cb0:	240c      	movs	r4, #12
 8005cb2:	193b      	adds	r3, r7, r4
 8005cb4:	0018      	movs	r0, r3
 8005cb6:	f7fa fa27 	bl	8000108 <strlen>
 8005cba:	0003      	movs	r3, r0
 8005cbc:	4918      	ldr	r1, [pc, #96]	@ (8005d20 <CreateLine+0xc4>)
 8005cbe:	187a      	adds	r2, r7, r1
 8005cc0:	6013      	str	r3, [r2, #0]

  // Format the rest of the message with the variable arguments
  va_list args;
  va_start(args, format);
 8005cc2:	4b18      	ldr	r3, [pc, #96]	@ (8005d24 <CreateLine+0xc8>)
 8005cc4:	2508      	movs	r5, #8
 8005cc6:	195b      	adds	r3, r3, r5
 8005cc8:	19db      	adds	r3, r3, r7
 8005cca:	60bb      	str	r3, [r7, #8]
  vsnprintf(&textBuffer[lineOffset], TEXTBUFFER_LEN - lineOffset, format, args);
 8005ccc:	193a      	adds	r2, r7, r4
 8005cce:	187b      	adds	r3, r7, r1
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	18d0      	adds	r0, r2, r3
 8005cd4:	187b      	adds	r3, r7, r1
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	2280      	movs	r2, #128	@ 0x80
 8005cda:	00d2      	lsls	r2, r2, #3
 8005cdc:	1ad3      	subs	r3, r2, r3
 8005cde:	0019      	movs	r1, r3
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	2283      	movs	r2, #131	@ 0x83
 8005ce4:	00d2      	lsls	r2, r2, #3
 8005ce6:	1952      	adds	r2, r2, r5
 8005ce8:	19d2      	adds	r2, r2, r7
 8005cea:	6812      	ldr	r2, [r2, #0]
 8005cec:	f006 f834 	bl	800bd58 <vsniprintf>
  va_end(args);

  // Print the final formatted message
  printf("%s\r\n", textBuffer);
 8005cf0:	193a      	adds	r2, r7, r4
 8005cf2:	4b0d      	ldr	r3, [pc, #52]	@ (8005d28 <CreateLine+0xcc>)
 8005cf4:	0011      	movs	r1, r2
 8005cf6:	0018      	movs	r0, r3
 8005cf8:	f005 ff86 	bl	800bc08 <iprintf>
 8005cfc:	e000      	b.n	8005d00 <CreateLine+0xa4>
    return;
 8005cfe:	46c0      	nop			@ (mov r8, r8)
}
 8005d00:	46bd      	mov	sp, r7
 8005d02:	2382      	movs	r3, #130	@ 0x82
 8005d04:	00db      	lsls	r3, r3, #3
 8005d06:	449d      	add	sp, r3
 8005d08:	bcb0      	pop	{r4, r5, r7}
 8005d0a:	bc08      	pop	{r3}
 8005d0c:	b002      	add	sp, #8
 8005d0e:	4718      	bx	r3
 8005d10:	fffffbf0 	.word	0xfffffbf0
 8005d14:	fffffbf7 	.word	0xfffffbf7
 8005d18:	20000024 	.word	0x20000024
 8005d1c:	0800e70c 	.word	0x0800e70c
 8005d20:	0000040c 	.word	0x0000040c
 8005d24:	0000041c 	.word	0x0000041c
 8005d28:	0800e710 	.word	0x0800e710

08005d2c <_write>:

int _write(int fd, const void *buf, size_t count) {
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b084      	sub	sp, #16
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	60f8      	str	r0, [r7, #12]
 8005d34:	60b9      	str	r1, [r7, #8]
 8005d36:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart1, buf, count, 100);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	b29a      	uxth	r2, r3
 8005d3c:	68b9      	ldr	r1, [r7, #8]
 8005d3e:	4804      	ldr	r0, [pc, #16]	@ (8005d50 <_write+0x24>)
 8005d40:	2364      	movs	r3, #100	@ 0x64
 8005d42:	f004 fcd3 	bl	800a6ec <HAL_UART_Transmit>
  return count;
 8005d46:	687b      	ldr	r3, [r7, #4]
}
 8005d48:	0018      	movs	r0, r3
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	b004      	add	sp, #16
 8005d4e:	bd80      	pop	{r7, pc}
 8005d50:	200005e4 	.word	0x200005e4

08005d54 <SetVerboseLevel>:

void SetVerboseLevel(VerboseLevel level) { CurrentVerboseLevel = level; }
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b082      	sub	sp, #8
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	0002      	movs	r2, r0
 8005d5c:	1dfb      	adds	r3, r7, #7
 8005d5e:	701a      	strb	r2, [r3, #0]
 8005d60:	4b03      	ldr	r3, [pc, #12]	@ (8005d70 <SetVerboseLevel+0x1c>)
 8005d62:	1dfa      	adds	r2, r7, #7
 8005d64:	7812      	ldrb	r2, [r2, #0]
 8005d66:	701a      	strb	r2, [r3, #0]
 8005d68:	46c0      	nop			@ (mov r8, r8)
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	b002      	add	sp, #8
 8005d6e:	bd80      	pop	{r7, pc}
 8005d70:	20000024 	.word	0x20000024

08005d74 <GetCurrentHalTicks>:

uint32_t GetCurrentHalTicks(void) {
 8005d74:	b580      	push	{r7, lr}
 8005d76:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005d78:	f000 fb8e 	bl	8006498 <HAL_GetTick>
 8005d7c:	0003      	movs	r3, r0
}
 8005d7e:	0018      	movs	r0, r3
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bd80      	pop	{r7, pc}

08005d84 <BinaryReleaseInfo>:

void BinaryReleaseInfo() {
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b082      	sub	sp, #8
 8005d88:	af02      	add	r7, sp, #8
  Info("=-=-=-=-=-=WOTS Gadget started.=-=-=-=-=-=");
 8005d8a:	4a0f      	ldr	r2, [pc, #60]	@ (8005dc8 <BinaryReleaseInfo+0x44>)
 8005d8c:	4b0f      	ldr	r3, [pc, #60]	@ (8005dcc <BinaryReleaseInfo+0x48>)
 8005d8e:	0019      	movs	r1, r3
 8005d90:	2002      	movs	r0, #2
 8005d92:	f7ff ff63 	bl	8005c5c <CreateLine>
  Info("Build on: %s at %s", __DATE__, __TIME__);
 8005d96:	480e      	ldr	r0, [pc, #56]	@ (8005dd0 <BinaryReleaseInfo+0x4c>)
 8005d98:	4a0e      	ldr	r2, [pc, #56]	@ (8005dd4 <BinaryReleaseInfo+0x50>)
 8005d9a:	490c      	ldr	r1, [pc, #48]	@ (8005dcc <BinaryReleaseInfo+0x48>)
 8005d9c:	4b0e      	ldr	r3, [pc, #56]	@ (8005dd8 <BinaryReleaseInfo+0x54>)
 8005d9e:	9300      	str	r3, [sp, #0]
 8005da0:	0003      	movs	r3, r0
 8005da2:	2002      	movs	r0, #2
 8005da4:	f7ff ff5a 	bl	8005c5c <CreateLine>
  // Format: YY'w'WWv
  Info("Git: 24w28a");
 8005da8:	4a0c      	ldr	r2, [pc, #48]	@ (8005ddc <BinaryReleaseInfo+0x58>)
 8005daa:	4b08      	ldr	r3, [pc, #32]	@ (8005dcc <BinaryReleaseInfo+0x48>)
 8005dac:	0019      	movs	r1, r3
 8005dae:	2002      	movs	r0, #2
 8005db0:	f7ff ff54 	bl	8005c5c <CreateLine>
  Info("Software version: %s", SRC_VERSION);
 8005db4:	4b0a      	ldr	r3, [pc, #40]	@ (8005de0 <BinaryReleaseInfo+0x5c>)
 8005db6:	4a0b      	ldr	r2, [pc, #44]	@ (8005de4 <BinaryReleaseInfo+0x60>)
 8005db8:	4904      	ldr	r1, [pc, #16]	@ (8005dcc <BinaryReleaseInfo+0x48>)
 8005dba:	2002      	movs	r0, #2
 8005dbc:	f7ff ff4e 	bl	8005c5c <CreateLine>
}
 8005dc0:	46c0      	nop			@ (mov r8, r8)
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bd80      	pop	{r7, pc}
 8005dc6:	46c0      	nop			@ (mov r8, r8)
 8005dc8:	0800e718 	.word	0x0800e718
 8005dcc:	0800e744 	.word	0x0800e744
 8005dd0:	0800e748 	.word	0x0800e748
 8005dd4:	0800e754 	.word	0x0800e754
 8005dd8:	0800e768 	.word	0x0800e768
 8005ddc:	0800e774 	.word	0x0800e774
 8005de0:	0800e780 	.word	0x0800e780
 8005de4:	0800e788 	.word	0x0800e788

08005de8 <ReadRegister>:
static bool MeasurementDone = false;

//static uint32_t SensorNextRunTime = HIDS_SENSOR_WAIT_TIME_HIGH;
//static uint32_t SensorWaitTime_ms = HIDS_SENSOR_WAIT_TIME_HIGH;

static void ReadRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8005de8:	b590      	push	{r4, r7, lr}
 8005dea:	b083      	sub	sp, #12
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6039      	str	r1, [r7, #0]
 8005df0:	0011      	movs	r1, r2
 8005df2:	1dfb      	adds	r3, r7, #7
 8005df4:	1c02      	adds	r2, r0, #0
 8005df6:	701a      	strb	r2, [r3, #0]
 8005df8:	1dbb      	adds	r3, r7, #6
 8005dfa:	1c0a      	adds	r2, r1, #0
 8005dfc:	701a      	strb	r2, [r3, #0]
	if (ReadFunction != NULL) {
 8005dfe:	4b08      	ldr	r3, [pc, #32]	@ (8005e20 <ReadRegister+0x38>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d008      	beq.n	8005e18 <ReadRegister+0x30>
		ReadFunction(address, buffer, nrBytes);
 8005e06:	4b06      	ldr	r3, [pc, #24]	@ (8005e20 <ReadRegister+0x38>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	1dba      	adds	r2, r7, #6
 8005e0c:	7814      	ldrb	r4, [r2, #0]
 8005e0e:	6839      	ldr	r1, [r7, #0]
 8005e10:	1dfa      	adds	r2, r7, #7
 8005e12:	7810      	ldrb	r0, [r2, #0]
 8005e14:	0022      	movs	r2, r4
 8005e16:	4798      	blx	r3
	}
}
 8005e18:	46c0      	nop			@ (mov r8, r8)
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	b003      	add	sp, #12
 8005e1e:	bd90      	pop	{r4, r7, pc}
 8005e20:	200006f4 	.word	0x200006f4

08005e24 <WriteRegister>:

static void WriteRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8005e24:	b590      	push	{r4, r7, lr}
 8005e26:	b083      	sub	sp, #12
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6039      	str	r1, [r7, #0]
 8005e2c:	0011      	movs	r1, r2
 8005e2e:	1dfb      	adds	r3, r7, #7
 8005e30:	1c02      	adds	r2, r0, #0
 8005e32:	701a      	strb	r2, [r3, #0]
 8005e34:	1dbb      	adds	r3, r7, #6
 8005e36:	1c0a      	adds	r2, r1, #0
 8005e38:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 8005e3a:	4b08      	ldr	r3, [pc, #32]	@ (8005e5c <WriteRegister+0x38>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d008      	beq.n	8005e54 <WriteRegister+0x30>
    WriteFunction(address, buffer, nrBytes);
 8005e42:	4b06      	ldr	r3, [pc, #24]	@ (8005e5c <WriteRegister+0x38>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	1dba      	adds	r2, r7, #6
 8005e48:	7814      	ldrb	r4, [r2, #0]
 8005e4a:	6839      	ldr	r1, [r7, #0]
 8005e4c:	1dfa      	adds	r2, r7, #7
 8005e4e:	7810      	ldrb	r0, [r2, #0]
 8005e50:	0022      	movs	r2, r4
 8005e52:	4798      	blx	r3
  }
}
 8005e54:	46c0      	nop			@ (mov r8, r8)
 8005e56:	46bd      	mov	sp, r7
 8005e58:	b003      	add	sp, #12
 8005e5a:	bd90      	pop	{r4, r7, pc}
 8005e5c:	200006f8 	.word	0x200006f8

08005e60 <CalculateCRC>:

static uint8_t CalculateCRC(uint8_t* data, uint8_t length) {
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b084      	sub	sp, #16
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
 8005e68:	000a      	movs	r2, r1
 8005e6a:	1cfb      	adds	r3, r7, #3
 8005e6c:	701a      	strb	r2, [r3, #0]
  uint8_t crc = HIDS_CRC_INIT_VALUE;
 8005e6e:	230f      	movs	r3, #15
 8005e70:	18fb      	adds	r3, r7, r3
 8005e72:	22ff      	movs	r2, #255	@ 0xff
 8005e74:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 8005e76:	230e      	movs	r3, #14
 8005e78:	18fb      	adds	r3, r7, r3
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	701a      	strb	r2, [r3, #0]
 8005e7e:	e037      	b.n	8005ef0 <CalculateCRC+0x90>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 8005e80:	230e      	movs	r3, #14
 8005e82:	18fb      	adds	r3, r7, r3
 8005e84:	781b      	ldrb	r3, [r3, #0]
 8005e86:	687a      	ldr	r2, [r7, #4]
 8005e88:	18d3      	adds	r3, r2, r3
 8005e8a:	7819      	ldrb	r1, [r3, #0]
 8005e8c:	220f      	movs	r2, #15
 8005e8e:	18bb      	adds	r3, r7, r2
 8005e90:	18ba      	adds	r2, r7, r2
 8005e92:	7812      	ldrb	r2, [r2, #0]
 8005e94:	404a      	eors	r2, r1
 8005e96:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 8005e98:	230d      	movs	r3, #13
 8005e9a:	18fb      	adds	r3, r7, r3
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	701a      	strb	r2, [r3, #0]
 8005ea0:	e01b      	b.n	8005eda <CalculateCRC+0x7a>
      // If the leftmost (most significant) bit is set
      if (crc & HIDS_CRC_MSB_MASK) {
 8005ea2:	210f      	movs	r1, #15
 8005ea4:	187b      	adds	r3, r7, r1
 8005ea6:	781b      	ldrb	r3, [r3, #0]
 8005ea8:	b25b      	sxtb	r3, r3
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	da09      	bge.n	8005ec2 <CalculateCRC+0x62>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ HIDS_CRC_POLYNOMIAL;
 8005eae:	187b      	adds	r3, r7, r1
 8005eb0:	781b      	ldrb	r3, [r3, #0]
 8005eb2:	005b      	lsls	r3, r3, #1
 8005eb4:	b25b      	sxtb	r3, r3
 8005eb6:	2231      	movs	r2, #49	@ 0x31
 8005eb8:	4053      	eors	r3, r2
 8005eba:	b25a      	sxtb	r2, r3
 8005ebc:	187b      	adds	r3, r7, r1
 8005ebe:	701a      	strb	r2, [r3, #0]
 8005ec0:	e005      	b.n	8005ece <CalculateCRC+0x6e>
      } else {
          crc <<= 1;
 8005ec2:	230f      	movs	r3, #15
 8005ec4:	18fa      	adds	r2, r7, r3
 8005ec6:	18fb      	adds	r3, r7, r3
 8005ec8:	781b      	ldrb	r3, [r3, #0]
 8005eca:	18db      	adds	r3, r3, r3
 8005ecc:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 8005ece:	210d      	movs	r1, #13
 8005ed0:	187b      	adds	r3, r7, r1
 8005ed2:	781a      	ldrb	r2, [r3, #0]
 8005ed4:	187b      	adds	r3, r7, r1
 8005ed6:	3201      	adds	r2, #1
 8005ed8:	701a      	strb	r2, [r3, #0]
 8005eda:	230d      	movs	r3, #13
 8005edc:	18fb      	adds	r3, r7, r3
 8005ede:	781b      	ldrb	r3, [r3, #0]
 8005ee0:	2b07      	cmp	r3, #7
 8005ee2:	d9de      	bls.n	8005ea2 <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 8005ee4:	210e      	movs	r1, #14
 8005ee6:	187b      	adds	r3, r7, r1
 8005ee8:	781a      	ldrb	r2, [r3, #0]
 8005eea:	187b      	adds	r3, r7, r1
 8005eec:	3201      	adds	r2, #1
 8005eee:	701a      	strb	r2, [r3, #0]
 8005ef0:	230e      	movs	r3, #14
 8005ef2:	18fa      	adds	r2, r7, r3
 8005ef4:	1cfb      	adds	r3, r7, #3
 8005ef6:	7812      	ldrb	r2, [r2, #0]
 8005ef8:	781b      	ldrb	r3, [r3, #0]
 8005efa:	429a      	cmp	r2, r3
 8005efc:	d3c0      	bcc.n	8005e80 <CalculateCRC+0x20>
      }
    }
  }

//  Debug("CRC calculated value: 0x%X", crc);
  return crc;
 8005efe:	230f      	movs	r3, #15
 8005f00:	18fb      	adds	r3, r7, r3
 8005f02:	781b      	ldrb	r3, [r3, #0]
}
 8005f04:	0018      	movs	r0, r3
 8005f06:	46bd      	mov	sp, r7
 8005f08:	b004      	add	sp, #16
 8005f0a:	bd80      	pop	{r7, pc}

08005f0c <HIDS_Init>:
  uint8_t heaterReg = HeaterMode;
  WriteRegister(HIDS_I2C_ADDRESS, &heaterReg, 1);
  Info("Started the heater in mode: %d", heaterReg);
}

void HIDS_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b082      	sub	sp, #8
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
 8005f14:	6039      	str	r1, [r7, #0]
	ReadFunction = readFunction;
 8005f16:	4b0a      	ldr	r3, [pc, #40]	@ (8005f40 <HIDS_Init+0x34>)
 8005f18:	687a      	ldr	r2, [r7, #4]
 8005f1a:	601a      	str	r2, [r3, #0]
	WriteFunction = writeFunction;
 8005f1c:	4b09      	ldr	r3, [pc, #36]	@ (8005f44 <HIDS_Init+0x38>)
 8005f1e:	683a      	ldr	r2, [r7, #0]
 8005f20:	601a      	str	r2, [r3, #0]
	HIDS_SetMeasurementMode(MeasureMode);
 8005f22:	4b09      	ldr	r3, [pc, #36]	@ (8005f48 <HIDS_Init+0x3c>)
 8005f24:	781b      	ldrb	r3, [r3, #0]
 8005f26:	0018      	movs	r0, r3
 8005f28:	f000 f8d0 	bl	80060cc <HIDS_SetMeasurementMode>
	HIDS_SetHeaterMode(HeaterMode);
 8005f2c:	4b07      	ldr	r3, [pc, #28]	@ (8005f4c <HIDS_Init+0x40>)
 8005f2e:	781b      	ldrb	r3, [r3, #0]
 8005f30:	0018      	movs	r0, r3
 8005f32:	f000 f82b 	bl	8005f8c <HIDS_SetHeaterMode>
//	HIDS_EnableHeater();
	// TODO: Enable heater after measurement is done and humidity is above a certain percentage, use formula.
}
 8005f36:	46c0      	nop			@ (mov r8, r8)
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	b002      	add	sp, #8
 8005f3c:	bd80      	pop	{r7, pc}
 8005f3e:	46c0      	nop			@ (mov r8, r8)
 8005f40:	200006f4 	.word	0x200006f4
 8005f44:	200006f8 	.word	0x200006f8
 8005f48:	20000026 	.word	0x20000026
 8005f4c:	20000025 	.word	0x20000025

08005f50 <HIDS_StartMeasurement>:

void HIDS_StartMeasurement(void) {
 8005f50:	b580      	push	{r7, lr}
 8005f52:	af00      	add	r7, sp, #0
  HIDS_NextRunTime = GetCurrentHalTicks() + HIDS_Interval_ms;
 8005f54:	f7ff ff0e 	bl	8005d74 <GetCurrentHalTicks>
 8005f58:	0002      	movs	r2, r0
 8005f5a:	4b08      	ldr	r3, [pc, #32]	@ (8005f7c <HIDS_StartMeasurement+0x2c>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	18d2      	adds	r2, r2, r3
 8005f60:	4b07      	ldr	r3, [pc, #28]	@ (8005f80 <HIDS_StartMeasurement+0x30>)
 8005f62:	601a      	str	r2, [r3, #0]
  WriteRegister(HIDS_I2C_ADDRESS, &MeasureMode, 1);
 8005f64:	4b07      	ldr	r3, [pc, #28]	@ (8005f84 <HIDS_StartMeasurement+0x34>)
 8005f66:	2201      	movs	r2, #1
 8005f68:	0019      	movs	r1, r3
 8005f6a:	2044      	movs	r0, #68	@ 0x44
 8005f6c:	f7ff ff5a 	bl	8005e24 <WriteRegister>
  MeasurementDone = false;
 8005f70:	4b05      	ldr	r3, [pc, #20]	@ (8005f88 <HIDS_StartMeasurement+0x38>)
 8005f72:	2200      	movs	r2, #0
 8005f74:	701a      	strb	r2, [r3, #0]
}
 8005f76:	46c0      	nop			@ (mov r8, r8)
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	bd80      	pop	{r7, pc}
 8005f7c:	2000002c 	.word	0x2000002c
 8005f80:	20000028 	.word	0x20000028
 8005f84:	20000026 	.word	0x20000026
 8005f88:	2000070a 	.word	0x2000070a

08005f8c <HIDS_SetHeaterMode>:

void HIDS_SetMeasurementDuration(uint32_t duration) {
  HIDS_MeasurementDuration = duration;
}

void HIDS_SetHeaterMode(HIDSHeaterModes modeHeater) {
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b082      	sub	sp, #8
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	0002      	movs	r2, r0
 8005f94:	1dfb      	adds	r3, r7, #7
 8005f96:	701a      	strb	r2, [r3, #0]
  HeaterMode = modeHeater;
 8005f98:	4b03      	ldr	r3, [pc, #12]	@ (8005fa8 <HIDS_SetHeaterMode+0x1c>)
 8005f9a:	1dfa      	adds	r2, r7, #7
 8005f9c:	7812      	ldrb	r2, [r2, #0]
 8005f9e:	701a      	strb	r2, [r3, #0]
}
 8005fa0:	46c0      	nop			@ (mov r8, r8)
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	b002      	add	sp, #8
 8005fa6:	bd80      	pop	{r7, pc}
 8005fa8:	20000025 	.word	0x20000025

08005fac <CheckCRC>:

static bool CheckCRC(uint8_t* data) {
 8005fac:	b590      	push	{r4, r7, lr}
 8005fae:	b085      	sub	sp, #20
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
  // Data format: 2 bytes for data, followed by an 8-bit CRC

	// Check CRC for the first segment
	uint8_t crcData1[2] = {data[0], data[1]};
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	781a      	ldrb	r2, [r3, #0]
 8005fb8:	210c      	movs	r1, #12
 8005fba:	187b      	adds	r3, r7, r1
 8005fbc:	701a      	strb	r2, [r3, #0]
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	785a      	ldrb	r2, [r3, #1]
 8005fc2:	187b      	adds	r3, r7, r1
 8005fc4:	705a      	strb	r2, [r3, #1]
	uint8_t crc1 = data[2];
 8005fc6:	240f      	movs	r4, #15
 8005fc8:	193b      	adds	r3, r7, r4
 8005fca:	687a      	ldr	r2, [r7, #4]
 8005fcc:	7892      	ldrb	r2, [r2, #2]
 8005fce:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData1, 2) != crc1) {
 8005fd0:	187b      	adds	r3, r7, r1
 8005fd2:	2102      	movs	r1, #2
 8005fd4:	0018      	movs	r0, r3
 8005fd6:	f7ff ff43 	bl	8005e60 <CalculateCRC>
 8005fda:	0003      	movs	r3, r0
 8005fdc:	001a      	movs	r2, r3
 8005fde:	193b      	adds	r3, r7, r4
 8005fe0:	781b      	ldrb	r3, [r3, #0]
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d007      	beq.n	8005ff6 <CheckCRC+0x4a>
		Error("CRC check failed for the first segment.");
 8005fe6:	4a17      	ldr	r2, [pc, #92]	@ (8006044 <CheckCRC+0x98>)
 8005fe8:	4b17      	ldr	r3, [pc, #92]	@ (8006048 <CheckCRC+0x9c>)
 8005fea:	0019      	movs	r1, r3
 8005fec:	2001      	movs	r0, #1
 8005fee:	f7ff fe35 	bl	8005c5c <CreateLine>
		return false;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	e021      	b.n	800603a <CheckCRC+0x8e>
	}

	// Check CRC for the second segment
	uint8_t crcData2[2] = {data[3], data[4]};
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	78da      	ldrb	r2, [r3, #3]
 8005ffa:	2108      	movs	r1, #8
 8005ffc:	187b      	adds	r3, r7, r1
 8005ffe:	701a      	strb	r2, [r3, #0]
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	791a      	ldrb	r2, [r3, #4]
 8006004:	187b      	adds	r3, r7, r1
 8006006:	705a      	strb	r2, [r3, #1]
	uint8_t crc2 = data[5];
 8006008:	240e      	movs	r4, #14
 800600a:	193b      	adds	r3, r7, r4
 800600c:	687a      	ldr	r2, [r7, #4]
 800600e:	7952      	ldrb	r2, [r2, #5]
 8006010:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData2, 2) != crc2) {
 8006012:	187b      	adds	r3, r7, r1
 8006014:	2102      	movs	r1, #2
 8006016:	0018      	movs	r0, r3
 8006018:	f7ff ff22 	bl	8005e60 <CalculateCRC>
 800601c:	0003      	movs	r3, r0
 800601e:	001a      	movs	r2, r3
 8006020:	193b      	adds	r3, r7, r4
 8006022:	781b      	ldrb	r3, [r3, #0]
 8006024:	4293      	cmp	r3, r2
 8006026:	d007      	beq.n	8006038 <CheckCRC+0x8c>
		Error("CRC check failed for the second segment.");
 8006028:	4a08      	ldr	r2, [pc, #32]	@ (800604c <CheckCRC+0xa0>)
 800602a:	4b07      	ldr	r3, [pc, #28]	@ (8006048 <CheckCRC+0x9c>)
 800602c:	0019      	movs	r1, r3
 800602e:	2001      	movs	r0, #1
 8006030:	f7ff fe14 	bl	8005c5c <CreateLine>
		return false;
 8006034:	2300      	movs	r3, #0
 8006036:	e000      	b.n	800603a <CheckCRC+0x8e>
	}
	return true;
 8006038:	2301      	movs	r3, #1
}
 800603a:	0018      	movs	r0, r3
 800603c:	46bd      	mov	sp, r7
 800603e:	b005      	add	sp, #20
 8006040:	bd90      	pop	{r4, r7, pc}
 8006042:	46c0      	nop			@ (mov r8, r8)
 8006044:	0800e7c4 	.word	0x0800e7c4
 8006048:	0800e7ec 	.word	0x0800e7ec
 800604c:	0800e7f0 	.word	0x0800e7f0

08006050 <HIDS_DeviceConnected>:

bool HIDS_DeviceConnected(void) {
 8006050:	b580      	push	{r7, lr}
 8006052:	b084      	sub	sp, #16
 8006054:	af02      	add	r7, sp, #8
	uint8_t serialReg = HIDS_SERIAL_NUMBER_REG;
 8006056:	1dbb      	adds	r3, r7, #6
 8006058:	2289      	movs	r2, #137	@ 0x89
 800605a:	701a      	strb	r2, [r3, #0]
	WriteRegister(HIDS_I2C_ADDRESS, &serialReg, 1);
 800605c:	1dbb      	adds	r3, r7, #6
 800605e:	2201      	movs	r2, #1
 8006060:	0019      	movs	r1, r3
 8006062:	2044      	movs	r0, #68	@ 0x44
 8006064:	f7ff fede 	bl	8005e24 <WriteRegister>
	HAL_Delay(30);
 8006068:	201e      	movs	r0, #30
 800606a:	f000 fa1f 	bl	80064ac <HAL_Delay>
	ReadRegister(HIDS_I2C_ADDRESS, SerialBuffer, HIDS_SERIAL_BUFFER_LENGTH);
 800606e:	4b14      	ldr	r3, [pc, #80]	@ (80060c0 <HIDS_DeviceConnected+0x70>)
 8006070:	2206      	movs	r2, #6
 8006072:	0019      	movs	r1, r3
 8006074:	2044      	movs	r0, #68	@ 0x44
 8006076:	f7ff feb7 	bl	8005de8 <ReadRegister>

	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 800607a:	1dfb      	adds	r3, r7, #7
 800607c:	2200      	movs	r2, #0
 800607e:	701a      	strb	r2, [r3, #0]
 8006080:	e011      	b.n	80060a6 <HIDS_DeviceConnected+0x56>
		Info("HIDS_Device serial ID[%d]: 0x%X", i, SerialBuffer[i]);
 8006082:	1dfb      	adds	r3, r7, #7
 8006084:	7818      	ldrb	r0, [r3, #0]
 8006086:	1dfb      	adds	r3, r7, #7
 8006088:	781b      	ldrb	r3, [r3, #0]
 800608a:	4a0d      	ldr	r2, [pc, #52]	@ (80060c0 <HIDS_DeviceConnected+0x70>)
 800608c:	5cd3      	ldrb	r3, [r2, r3]
 800608e:	4a0d      	ldr	r2, [pc, #52]	@ (80060c4 <HIDS_DeviceConnected+0x74>)
 8006090:	490d      	ldr	r1, [pc, #52]	@ (80060c8 <HIDS_DeviceConnected+0x78>)
 8006092:	9300      	str	r3, [sp, #0]
 8006094:	0003      	movs	r3, r0
 8006096:	2002      	movs	r0, #2
 8006098:	f7ff fde0 	bl	8005c5c <CreateLine>
	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 800609c:	1dfb      	adds	r3, r7, #7
 800609e:	781a      	ldrb	r2, [r3, #0]
 80060a0:	1dfb      	adds	r3, r7, #7
 80060a2:	3201      	adds	r2, #1
 80060a4:	701a      	strb	r2, [r3, #0]
 80060a6:	1dfb      	adds	r3, r7, #7
 80060a8:	781b      	ldrb	r3, [r3, #0]
 80060aa:	2b05      	cmp	r3, #5
 80060ac:	d9e9      	bls.n	8006082 <HIDS_DeviceConnected+0x32>
	}
	return CheckCRC(SerialBuffer);
 80060ae:	4b04      	ldr	r3, [pc, #16]	@ (80060c0 <HIDS_DeviceConnected+0x70>)
 80060b0:	0018      	movs	r0, r3
 80060b2:	f7ff ff7b 	bl	8005fac <CheckCRC>
 80060b6:	0003      	movs	r3, r0
}
 80060b8:	0018      	movs	r0, r3
 80060ba:	46bd      	mov	sp, r7
 80060bc:	b002      	add	sp, #8
 80060be:	bd80      	pop	{r7, pc}
 80060c0:	200006fc 	.word	0x200006fc
 80060c4:	0800e81c 	.word	0x0800e81c
 80060c8:	0800e7c0 	.word	0x0800e7c0

080060cc <HIDS_SetMeasurementMode>:

void HIDS_SetMeasurementMode(HIDSMeasureModes modeMeasure) {
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b082      	sub	sp, #8
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	0002      	movs	r2, r0
 80060d4:	1dfb      	adds	r3, r7, #7
 80060d6:	701a      	strb	r2, [r3, #0]
	MeasureMode = modeMeasure;
 80060d8:	4b03      	ldr	r3, [pc, #12]	@ (80060e8 <HIDS_SetMeasurementMode+0x1c>)
 80060da:	1dfa      	adds	r2, r7, #7
 80060dc:	7812      	ldrb	r2, [r2, #0]
 80060de:	701a      	strb	r2, [r3, #0]
}
 80060e0:	46c0      	nop			@ (mov r8, r8)
 80060e2:	46bd      	mov	sp, r7
 80060e4:	b002      	add	sp, #8
 80060e6:	bd80      	pop	{r7, pc}
 80060e8:	20000026 	.word	0x20000026

080060ec <HIDS_MeasurementReady>:

bool HIDS_MeasurementReady(void) {
 80060ec:	b580      	push	{r7, lr}
 80060ee:	af00      	add	r7, sp, #0
  return TimestampIsReached(HIDS_NextRunTime);
 80060f0:	4b04      	ldr	r3, [pc, #16]	@ (8006104 <HIDS_MeasurementReady+0x18>)
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	0018      	movs	r0, r3
 80060f6:	f7ff fd5b 	bl	8005bb0 <TimestampIsReached>
 80060fa:	0003      	movs	r3, r0
}
 80060fc:	0018      	movs	r0, r3
 80060fe:	46bd      	mov	sp, r7
 8006100:	bd80      	pop	{r7, pc}
 8006102:	46c0      	nop			@ (mov r8, r8)
 8006104:	20000028 	.word	0x20000028

08006108 <HIDS_GetMeasurementValues>:
void HIDS_SoftReset(void){
  uint8_t resetReg = HIDS_SOFT_RESET_REG;
  WriteRegister(HIDS_I2C_ADDRESS, &resetReg, 1);
}

bool HIDS_GetMeasurementValues(float* humidity, float* temperature) {
 8006108:	b590      	push	{r4, r7, lr}
 800610a:	b08d      	sub	sp, #52	@ 0x34
 800610c:	af02      	add	r7, sp, #8
 800610e:	6078      	str	r0, [r7, #4]
 8006110:	6039      	str	r1, [r7, #0]
  // TODO: Store last measurement humidity for sgp40 measurement.
  if(MeasurementDone) return true;
 8006112:	4b87      	ldr	r3, [pc, #540]	@ (8006330 <HIDS_GetMeasurementValues+0x228>)
 8006114:	781b      	ldrb	r3, [r3, #0]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d001      	beq.n	800611e <HIDS_GetMeasurementValues+0x16>
 800611a:	2301      	movs	r3, #1
 800611c:	e103      	b.n	8006326 <HIDS_GetMeasurementValues+0x21e>
  if(!HIDS_MeasurementReady()) return false;
 800611e:	f7ff ffe5 	bl	80060ec <HIDS_MeasurementReady>
 8006122:	0003      	movs	r3, r0
 8006124:	001a      	movs	r2, r3
 8006126:	2301      	movs	r3, #1
 8006128:	4053      	eors	r3, r2
 800612a:	b2db      	uxtb	r3, r3
 800612c:	2b00      	cmp	r3, #0
 800612e:	d001      	beq.n	8006134 <HIDS_GetMeasurementValues+0x2c>
 8006130:	2300      	movs	r3, #0
 8006132:	e0f8      	b.n	8006326 <HIDS_GetMeasurementValues+0x21e>
  uint32_t amountOfMeasurements = HIDS_MeasurementDuration / HIDS_Interval_ms;
 8006134:	4b7f      	ldr	r3, [pc, #508]	@ (8006334 <HIDS_GetMeasurementValues+0x22c>)
 8006136:	681a      	ldr	r2, [r3, #0]
 8006138:	4b7f      	ldr	r3, [pc, #508]	@ (8006338 <HIDS_GetMeasurementValues+0x230>)
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	0019      	movs	r1, r3
 800613e:	0010      	movs	r0, r2
 8006140:	f7f9 fffe 	bl	8000140 <__udivsi3>
 8006144:	0003      	movs	r3, r0
 8006146:	617b      	str	r3, [r7, #20]
  float currentTemperature;
  float currentHumidity;
  static float temperatures[HIDS_MAX_MEASUREMENTS];
  static float humidities[HIDS_MAX_MEASUREMENTS];

  Debug("HT measurements: %d out of %d completed.", measurements + 1, amountOfMeasurements);
 8006148:	4b7c      	ldr	r3, [pc, #496]	@ (800633c <HIDS_GetMeasurementValues+0x234>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	1c58      	adds	r0, r3, #1
 800614e:	4a7c      	ldr	r2, [pc, #496]	@ (8006340 <HIDS_GetMeasurementValues+0x238>)
 8006150:	497c      	ldr	r1, [pc, #496]	@ (8006344 <HIDS_GetMeasurementValues+0x23c>)
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	9300      	str	r3, [sp, #0]
 8006156:	0003      	movs	r3, r0
 8006158:	2003      	movs	r0, #3
 800615a:	f7ff fd7f 	bl	8005c5c <CreateLine>
  ReadRegister(HIDS_I2C_ADDRESS, MeasureBuffer, HIDS_MEASURE_BUFFER_LENGTH);
 800615e:	4b7a      	ldr	r3, [pc, #488]	@ (8006348 <HIDS_GetMeasurementValues+0x240>)
 8006160:	2206      	movs	r2, #6
 8006162:	0019      	movs	r1, r3
 8006164:	2044      	movs	r0, #68	@ 0x44
 8006166:	f7ff fe3f 	bl	8005de8 <ReadRegister>
	if(!CheckCRC(MeasureBuffer)) {
 800616a:	4b77      	ldr	r3, [pc, #476]	@ (8006348 <HIDS_GetMeasurementValues+0x240>)
 800616c:	0018      	movs	r0, r3
 800616e:	f7ff ff1d 	bl	8005fac <CheckCRC>
 8006172:	0003      	movs	r3, r0
 8006174:	001a      	movs	r2, r3
 8006176:	2301      	movs	r3, #1
 8006178:	4053      	eors	r3, r2
 800617a:	b2db      	uxtb	r3, r3
 800617c:	2b00      	cmp	r3, #0
 800617e:	d02a      	beq.n	80061d6 <HIDS_GetMeasurementValues+0xce>
		Error("HIDS measurements CRC check failed.");
 8006180:	4a72      	ldr	r2, [pc, #456]	@ (800634c <HIDS_GetMeasurementValues+0x244>)
 8006182:	4b73      	ldr	r3, [pc, #460]	@ (8006350 <HIDS_GetMeasurementValues+0x248>)
 8006184:	0019      	movs	r1, r3
 8006186:	2001      	movs	r0, #1
 8006188:	f7ff fd68 	bl	8005c5c <CreateLine>
		Info("Measure buffer structure:");
 800618c:	4a71      	ldr	r2, [pc, #452]	@ (8006354 <HIDS_GetMeasurementValues+0x24c>)
 800618e:	4b72      	ldr	r3, [pc, #456]	@ (8006358 <HIDS_GetMeasurementValues+0x250>)
 8006190:	0019      	movs	r1, r3
 8006192:	2002      	movs	r0, #2
 8006194:	f7ff fd62 	bl	8005c5c <CreateLine>
		for(uint8_t i = 0; i < HIDS_MEASURE_BUFFER_LENGTH; i++) {
 8006198:	2327      	movs	r3, #39	@ 0x27
 800619a:	18fb      	adds	r3, r7, r3
 800619c:	2200      	movs	r2, #0
 800619e:	701a      	strb	r2, [r3, #0]
 80061a0:	e012      	b.n	80061c8 <HIDS_GetMeasurementValues+0xc0>
			Debug("HIDS_Measurement buffer[%d]: %d", i, MeasureBuffer[i]);
 80061a2:	2427      	movs	r4, #39	@ 0x27
 80061a4:	193b      	adds	r3, r7, r4
 80061a6:	7818      	ldrb	r0, [r3, #0]
 80061a8:	193b      	adds	r3, r7, r4
 80061aa:	781b      	ldrb	r3, [r3, #0]
 80061ac:	4a66      	ldr	r2, [pc, #408]	@ (8006348 <HIDS_GetMeasurementValues+0x240>)
 80061ae:	5cd3      	ldrb	r3, [r2, r3]
 80061b0:	4a6a      	ldr	r2, [pc, #424]	@ (800635c <HIDS_GetMeasurementValues+0x254>)
 80061b2:	4964      	ldr	r1, [pc, #400]	@ (8006344 <HIDS_GetMeasurementValues+0x23c>)
 80061b4:	9300      	str	r3, [sp, #0]
 80061b6:	0003      	movs	r3, r0
 80061b8:	2003      	movs	r0, #3
 80061ba:	f7ff fd4f 	bl	8005c5c <CreateLine>
		for(uint8_t i = 0; i < HIDS_MEASURE_BUFFER_LENGTH; i++) {
 80061be:	193b      	adds	r3, r7, r4
 80061c0:	781a      	ldrb	r2, [r3, #0]
 80061c2:	193b      	adds	r3, r7, r4
 80061c4:	3201      	adds	r2, #1
 80061c6:	701a      	strb	r2, [r3, #0]
 80061c8:	2327      	movs	r3, #39	@ 0x27
 80061ca:	18fb      	adds	r3, r7, r3
 80061cc:	781b      	ldrb	r3, [r3, #0]
 80061ce:	2b05      	cmp	r3, #5
 80061d0:	d9e7      	bls.n	80061a2 <HIDS_GetMeasurementValues+0x9a>
		}
		return false;
 80061d2:	2300      	movs	r3, #0
 80061d4:	e0a7      	b.n	8006326 <HIDS_GetMeasurementValues+0x21e>

  // Humidity formula in percentage:
  //  RH = ((-6 + 125 * SRH) / (2^16 - 1))
  // Temperature formula in degrees Celsius:
  //  T = ((-45 + (175 * ST) / (2^16 - 1)))
	currentTemperature = (((175 * (MeasureBuffer[0] << 8) | MeasureBuffer[1])) / HIDS_POW_2_16_MINUS_1);
 80061d6:	4b5c      	ldr	r3, [pc, #368]	@ (8006348 <HIDS_GetMeasurementValues+0x240>)
 80061d8:	781b      	ldrb	r3, [r3, #0]
 80061da:	021b      	lsls	r3, r3, #8
 80061dc:	22af      	movs	r2, #175	@ 0xaf
 80061de:	4353      	muls	r3, r2
 80061e0:	4a59      	ldr	r2, [pc, #356]	@ (8006348 <HIDS_GetMeasurementValues+0x240>)
 80061e2:	7852      	ldrb	r2, [r2, #1]
 80061e4:	4313      	orrs	r3, r2
 80061e6:	0018      	movs	r0, r3
 80061e8:	f7fd f832 	bl	8003250 <__aeabi_i2d>
 80061ec:	2200      	movs	r2, #0
 80061ee:	4b5c      	ldr	r3, [pc, #368]	@ (8006360 <HIDS_GetMeasurementValues+0x258>)
 80061f0:	f7fb fd28 	bl	8001c44 <__aeabi_ddiv>
 80061f4:	0002      	movs	r2, r0
 80061f6:	000b      	movs	r3, r1
 80061f8:	0010      	movs	r0, r2
 80061fa:	0019      	movs	r1, r3
 80061fc:	f7fd f87a 	bl	80032f4 <__aeabi_d2f>
 8006200:	1c03      	adds	r3, r0, #0
 8006202:	613b      	str	r3, [r7, #16]
	currentTemperature += -45;
 8006204:	4957      	ldr	r1, [pc, #348]	@ (8006364 <HIDS_GetMeasurementValues+0x25c>)
 8006206:	6938      	ldr	r0, [r7, #16]
 8006208:	f7fa ff50 	bl	80010ac <__aeabi_fsub>
 800620c:	1c03      	adds	r3, r0, #0
 800620e:	613b      	str	r3, [r7, #16]
	currentHumidity = ((125 * ((MeasureBuffer[3] << 8) | MeasureBuffer[4]) / HIDS_POW_2_16_MINUS_1));
 8006210:	4b4d      	ldr	r3, [pc, #308]	@ (8006348 <HIDS_GetMeasurementValues+0x240>)
 8006212:	78db      	ldrb	r3, [r3, #3]
 8006214:	021b      	lsls	r3, r3, #8
 8006216:	4a4c      	ldr	r2, [pc, #304]	@ (8006348 <HIDS_GetMeasurementValues+0x240>)
 8006218:	7912      	ldrb	r2, [r2, #4]
 800621a:	431a      	orrs	r2, r3
 800621c:	0013      	movs	r3, r2
 800621e:	015b      	lsls	r3, r3, #5
 8006220:	1a9b      	subs	r3, r3, r2
 8006222:	009b      	lsls	r3, r3, #2
 8006224:	189b      	adds	r3, r3, r2
 8006226:	0018      	movs	r0, r3
 8006228:	f7fd f812 	bl	8003250 <__aeabi_i2d>
 800622c:	2200      	movs	r2, #0
 800622e:	4b4c      	ldr	r3, [pc, #304]	@ (8006360 <HIDS_GetMeasurementValues+0x258>)
 8006230:	f7fb fd08 	bl	8001c44 <__aeabi_ddiv>
 8006234:	0002      	movs	r2, r0
 8006236:	000b      	movs	r3, r1
 8006238:	0010      	movs	r0, r2
 800623a:	0019      	movs	r1, r3
 800623c:	f7fd f85a 	bl	80032f4 <__aeabi_d2f>
 8006240:	1c03      	adds	r3, r0, #0
 8006242:	60fb      	str	r3, [r7, #12]
	currentHumidity += -6;
 8006244:	4948      	ldr	r1, [pc, #288]	@ (8006368 <HIDS_GetMeasurementValues+0x260>)
 8006246:	68f8      	ldr	r0, [r7, #12]
 8006248:	f7fa ff30 	bl	80010ac <__aeabi_fsub>
 800624c:	1c03      	adds	r3, r0, #0
 800624e:	60fb      	str	r3, [r7, #12]

	if(measurements < amountOfMeasurements) {
 8006250:	4b3a      	ldr	r3, [pc, #232]	@ (800633c <HIDS_GetMeasurementValues+0x234>)
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	697a      	ldr	r2, [r7, #20]
 8006256:	429a      	cmp	r2, r3
 8006258:	d910      	bls.n	800627c <HIDS_GetMeasurementValues+0x174>
	  temperatures[measurements] = currentTemperature;
 800625a:	4b38      	ldr	r3, [pc, #224]	@ (800633c <HIDS_GetMeasurementValues+0x234>)
 800625c:	681a      	ldr	r2, [r3, #0]
 800625e:	4b43      	ldr	r3, [pc, #268]	@ (800636c <HIDS_GetMeasurementValues+0x264>)
 8006260:	0092      	lsls	r2, r2, #2
 8006262:	6939      	ldr	r1, [r7, #16]
 8006264:	50d1      	str	r1, [r2, r3]
	  humidities[measurements] = currentHumidity;
 8006266:	4b35      	ldr	r3, [pc, #212]	@ (800633c <HIDS_GetMeasurementValues+0x234>)
 8006268:	681a      	ldr	r2, [r3, #0]
 800626a:	4b41      	ldr	r3, [pc, #260]	@ (8006370 <HIDS_GetMeasurementValues+0x268>)
 800626c:	0092      	lsls	r2, r2, #2
 800626e:	68f9      	ldr	r1, [r7, #12]
 8006270:	50d1      	str	r1, [r2, r3]
	  measurements++;
 8006272:	4b32      	ldr	r3, [pc, #200]	@ (800633c <HIDS_GetMeasurementValues+0x234>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	1c5a      	adds	r2, r3, #1
 8006278:	4b30      	ldr	r3, [pc, #192]	@ (800633c <HIDS_GetMeasurementValues+0x234>)
 800627a:	601a      	str	r2, [r3, #0]
	}

	if (measurements >= amountOfMeasurements) {
 800627c:	4b2f      	ldr	r3, [pc, #188]	@ (800633c <HIDS_GetMeasurementValues+0x234>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	697a      	ldr	r2, [r7, #20]
 8006282:	429a      	cmp	r2, r3
 8006284:	d84c      	bhi.n	8006320 <HIDS_GetMeasurementValues+0x218>
	  // Measurements done, calculating average and returning it.
    float sumTemperature = 0.0;
 8006286:	2300      	movs	r3, #0
 8006288:	623b      	str	r3, [r7, #32]
    float sumHumidity = 0.0;
 800628a:	2300      	movs	r3, #0
 800628c:	61fb      	str	r3, [r7, #28]
    for (uint32_t i = 0; i < measurements; i++) {
 800628e:	2300      	movs	r3, #0
 8006290:	61bb      	str	r3, [r7, #24]
 8006292:	e016      	b.n	80062c2 <HIDS_GetMeasurementValues+0x1ba>
        sumTemperature += temperatures[i];
 8006294:	4b35      	ldr	r3, [pc, #212]	@ (800636c <HIDS_GetMeasurementValues+0x264>)
 8006296:	69ba      	ldr	r2, [r7, #24]
 8006298:	0092      	lsls	r2, r2, #2
 800629a:	58d3      	ldr	r3, [r2, r3]
 800629c:	1c19      	adds	r1, r3, #0
 800629e:	6a38      	ldr	r0, [r7, #32]
 80062a0:	f7fa fa56 	bl	8000750 <__aeabi_fadd>
 80062a4:	1c03      	adds	r3, r0, #0
 80062a6:	623b      	str	r3, [r7, #32]
        sumHumidity += humidities[i];
 80062a8:	4b31      	ldr	r3, [pc, #196]	@ (8006370 <HIDS_GetMeasurementValues+0x268>)
 80062aa:	69ba      	ldr	r2, [r7, #24]
 80062ac:	0092      	lsls	r2, r2, #2
 80062ae:	58d3      	ldr	r3, [r2, r3]
 80062b0:	1c19      	adds	r1, r3, #0
 80062b2:	69f8      	ldr	r0, [r7, #28]
 80062b4:	f7fa fa4c 	bl	8000750 <__aeabi_fadd>
 80062b8:	1c03      	adds	r3, r0, #0
 80062ba:	61fb      	str	r3, [r7, #28]
    for (uint32_t i = 0; i < measurements; i++) {
 80062bc:	69bb      	ldr	r3, [r7, #24]
 80062be:	3301      	adds	r3, #1
 80062c0:	61bb      	str	r3, [r7, #24]
 80062c2:	4b1e      	ldr	r3, [pc, #120]	@ (800633c <HIDS_GetMeasurementValues+0x234>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	69ba      	ldr	r2, [r7, #24]
 80062c8:	429a      	cmp	r2, r3
 80062ca:	d3e3      	bcc.n	8006294 <HIDS_GetMeasurementValues+0x18c>
    }

    *temperature = sumTemperature / measurements;
 80062cc:	4b1b      	ldr	r3, [pc, #108]	@ (800633c <HIDS_GetMeasurementValues+0x234>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	0018      	movs	r0, r3
 80062d2:	f7fb f911 	bl	80014f8 <__aeabi_ui2f>
 80062d6:	1c03      	adds	r3, r0, #0
 80062d8:	1c19      	adds	r1, r3, #0
 80062da:	6a38      	ldr	r0, [r7, #32]
 80062dc:	f7fa fbc2 	bl	8000a64 <__aeabi_fdiv>
 80062e0:	1c03      	adds	r3, r0, #0
 80062e2:	1c1a      	adds	r2, r3, #0
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	601a      	str	r2, [r3, #0]
    *humidity = sumHumidity / measurements;
 80062e8:	4b14      	ldr	r3, [pc, #80]	@ (800633c <HIDS_GetMeasurementValues+0x234>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	0018      	movs	r0, r3
 80062ee:	f7fb f903 	bl	80014f8 <__aeabi_ui2f>
 80062f2:	1c03      	adds	r3, r0, #0
 80062f4:	1c19      	adds	r1, r3, #0
 80062f6:	69f8      	ldr	r0, [r7, #28]
 80062f8:	f7fa fbb4 	bl	8000a64 <__aeabi_fdiv>
 80062fc:	1c03      	adds	r3, r0, #0
 80062fe:	1c1a      	adds	r2, r3, #0
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	601a      	str	r2, [r3, #0]

    measurements = 0;
 8006304:	4b0d      	ldr	r3, [pc, #52]	@ (800633c <HIDS_GetMeasurementValues+0x234>)
 8006306:	2200      	movs	r2, #0
 8006308:	601a      	str	r2, [r3, #0]
    MeasurementDone = true;
 800630a:	4b09      	ldr	r3, [pc, #36]	@ (8006330 <HIDS_GetMeasurementValues+0x228>)
 800630c:	2201      	movs	r2, #1
 800630e:	701a      	strb	r2, [r3, #0]
    Debug("HIDS measurement is done.");
 8006310:	4a18      	ldr	r2, [pc, #96]	@ (8006374 <HIDS_GetMeasurementValues+0x26c>)
 8006312:	4b0c      	ldr	r3, [pc, #48]	@ (8006344 <HIDS_GetMeasurementValues+0x23c>)
 8006314:	0019      	movs	r1, r3
 8006316:	2003      	movs	r0, #3
 8006318:	f7ff fca0 	bl	8005c5c <CreateLine>
    return true;
 800631c:	2301      	movs	r3, #1
 800631e:	e002      	b.n	8006326 <HIDS_GetMeasurementValues+0x21e>
	}
	// Starting another measurement, still not done with all measurements.
	HIDS_StartMeasurement();
 8006320:	f7ff fe16 	bl	8005f50 <HIDS_StartMeasurement>
	return false;
 8006324:	2300      	movs	r3, #0
}
 8006326:	0018      	movs	r0, r3
 8006328:	46bd      	mov	sp, r7
 800632a:	b00b      	add	sp, #44	@ 0x2c
 800632c:	bd90      	pop	{r4, r7, pc}
 800632e:	46c0      	nop			@ (mov r8, r8)
 8006330:	2000070a 	.word	0x2000070a
 8006334:	20000030 	.word	0x20000030
 8006338:	2000002c 	.word	0x2000002c
 800633c:	2000070c 	.word	0x2000070c
 8006340:	0800e83c 	.word	0x0800e83c
 8006344:	0800e868 	.word	0x0800e868
 8006348:	20000704 	.word	0x20000704
 800634c:	0800e86c 	.word	0x0800e86c
 8006350:	0800e7ec 	.word	0x0800e7ec
 8006354:	0800e890 	.word	0x0800e890
 8006358:	0800e7c0 	.word	0x0800e7c0
 800635c:	0800e8ac 	.word	0x0800e8ac
 8006360:	40efffe0 	.word	0x40efffe0
 8006364:	42340000 	.word	0x42340000
 8006368:	40c00000 	.word	0x40c00000
 800636c:	20000710 	.word	0x20000710
 8006370:	20000b10 	.word	0x20000b10
 8006374:	0800e8cc 	.word	0x0800e8cc

08006378 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8006378:	480d      	ldr	r0, [pc, #52]	@ (80063b0 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800637a:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 800637c:	f7ff fb16 	bl	80059ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006380:	480c      	ldr	r0, [pc, #48]	@ (80063b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8006382:	490d      	ldr	r1, [pc, #52]	@ (80063b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8006384:	4a0d      	ldr	r2, [pc, #52]	@ (80063bc <LoopForever+0xe>)
  movs r3, #0
 8006386:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006388:	e002      	b.n	8006390 <LoopCopyDataInit>

0800638a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800638a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800638c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800638e:	3304      	adds	r3, #4

08006390 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006390:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006392:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006394:	d3f9      	bcc.n	800638a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006396:	4a0a      	ldr	r2, [pc, #40]	@ (80063c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8006398:	4c0a      	ldr	r4, [pc, #40]	@ (80063c4 <LoopForever+0x16>)
  movs r3, #0
 800639a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800639c:	e001      	b.n	80063a2 <LoopFillZerobss>

0800639e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800639e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80063a0:	3204      	adds	r2, #4

080063a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80063a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80063a4:	d3fb      	bcc.n	800639e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80063a6:	f005 fd43 	bl	800be30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80063aa:	f7fd fc0d 	bl	8003bc8 <main>

080063ae <LoopForever>:

LoopForever:
    b LoopForever
 80063ae:	e7fe      	b.n	80063ae <LoopForever>
   ldr   r0, =_estack
 80063b0:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80063b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80063b8:	2000020c 	.word	0x2000020c
  ldr r2, =_sidata
 80063bc:	0800edc0 	.word	0x0800edc0
  ldr r2, =_sbss
 80063c0:	2000020c 	.word	0x2000020c
  ldr r4, =_ebss
 80063c4:	20001060 	.word	0x20001060

080063c8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80063c8:	e7fe      	b.n	80063c8 <ADC1_COMP_IRQHandler>
	...

080063cc <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b082      	sub	sp, #8
 80063d0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80063d2:	1dfb      	adds	r3, r7, #7
 80063d4:	2200      	movs	r2, #0
 80063d6:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80063d8:	4b0b      	ldr	r3, [pc, #44]	@ (8006408 <HAL_Init+0x3c>)
 80063da:	681a      	ldr	r2, [r3, #0]
 80063dc:	4b0a      	ldr	r3, [pc, #40]	@ (8006408 <HAL_Init+0x3c>)
 80063de:	2140      	movs	r1, #64	@ 0x40
 80063e0:	430a      	orrs	r2, r1
 80063e2:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80063e4:	2003      	movs	r0, #3
 80063e6:	f000 f811 	bl	800640c <HAL_InitTick>
 80063ea:	1e03      	subs	r3, r0, #0
 80063ec:	d003      	beq.n	80063f6 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80063ee:	1dfb      	adds	r3, r7, #7
 80063f0:	2201      	movs	r2, #1
 80063f2:	701a      	strb	r2, [r3, #0]
 80063f4:	e001      	b.n	80063fa <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80063f6:	f7ff f9d3 	bl	80057a0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80063fa:	1dfb      	adds	r3, r7, #7
 80063fc:	781b      	ldrb	r3, [r3, #0]
}
 80063fe:	0018      	movs	r0, r3
 8006400:	46bd      	mov	sp, r7
 8006402:	b002      	add	sp, #8
 8006404:	bd80      	pop	{r7, pc}
 8006406:	46c0      	nop			@ (mov r8, r8)
 8006408:	40022000 	.word	0x40022000

0800640c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800640c:	b590      	push	{r4, r7, lr}
 800640e:	b083      	sub	sp, #12
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006414:	4b14      	ldr	r3, [pc, #80]	@ (8006468 <HAL_InitTick+0x5c>)
 8006416:	681c      	ldr	r4, [r3, #0]
 8006418:	4b14      	ldr	r3, [pc, #80]	@ (800646c <HAL_InitTick+0x60>)
 800641a:	781b      	ldrb	r3, [r3, #0]
 800641c:	0019      	movs	r1, r3
 800641e:	23fa      	movs	r3, #250	@ 0xfa
 8006420:	0098      	lsls	r0, r3, #2
 8006422:	f7f9 fe8d 	bl	8000140 <__udivsi3>
 8006426:	0003      	movs	r3, r0
 8006428:	0019      	movs	r1, r3
 800642a:	0020      	movs	r0, r4
 800642c:	f7f9 fe88 	bl	8000140 <__udivsi3>
 8006430:	0003      	movs	r3, r0
 8006432:	0018      	movs	r0, r3
 8006434:	f000 f92f 	bl	8006696 <HAL_SYSTICK_Config>
 8006438:	1e03      	subs	r3, r0, #0
 800643a:	d001      	beq.n	8006440 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800643c:	2301      	movs	r3, #1
 800643e:	e00f      	b.n	8006460 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2b03      	cmp	r3, #3
 8006444:	d80b      	bhi.n	800645e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006446:	6879      	ldr	r1, [r7, #4]
 8006448:	2301      	movs	r3, #1
 800644a:	425b      	negs	r3, r3
 800644c:	2200      	movs	r2, #0
 800644e:	0018      	movs	r0, r3
 8006450:	f000 f8fc 	bl	800664c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006454:	4b06      	ldr	r3, [pc, #24]	@ (8006470 <HAL_InitTick+0x64>)
 8006456:	687a      	ldr	r2, [r7, #4]
 8006458:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800645a:	2300      	movs	r3, #0
 800645c:	e000      	b.n	8006460 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800645e:	2301      	movs	r3, #1
}
 8006460:	0018      	movs	r0, r3
 8006462:	46bd      	mov	sp, r7
 8006464:	b003      	add	sp, #12
 8006466:	bd90      	pop	{r4, r7, pc}
 8006468:	20000020 	.word	0x20000020
 800646c:	20000038 	.word	0x20000038
 8006470:	20000034 	.word	0x20000034

08006474 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006478:	4b05      	ldr	r3, [pc, #20]	@ (8006490 <HAL_IncTick+0x1c>)
 800647a:	781b      	ldrb	r3, [r3, #0]
 800647c:	001a      	movs	r2, r3
 800647e:	4b05      	ldr	r3, [pc, #20]	@ (8006494 <HAL_IncTick+0x20>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	18d2      	adds	r2, r2, r3
 8006484:	4b03      	ldr	r3, [pc, #12]	@ (8006494 <HAL_IncTick+0x20>)
 8006486:	601a      	str	r2, [r3, #0]
}
 8006488:	46c0      	nop			@ (mov r8, r8)
 800648a:	46bd      	mov	sp, r7
 800648c:	bd80      	pop	{r7, pc}
 800648e:	46c0      	nop			@ (mov r8, r8)
 8006490:	20000038 	.word	0x20000038
 8006494:	20000f10 	.word	0x20000f10

08006498 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	af00      	add	r7, sp, #0
  return uwTick;
 800649c:	4b02      	ldr	r3, [pc, #8]	@ (80064a8 <HAL_GetTick+0x10>)
 800649e:	681b      	ldr	r3, [r3, #0]
}
 80064a0:	0018      	movs	r0, r3
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bd80      	pop	{r7, pc}
 80064a6:	46c0      	nop			@ (mov r8, r8)
 80064a8:	20000f10 	.word	0x20000f10

080064ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b084      	sub	sp, #16
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80064b4:	f7ff fff0 	bl	8006498 <HAL_GetTick>
 80064b8:	0003      	movs	r3, r0
 80064ba:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	3301      	adds	r3, #1
 80064c4:	d005      	beq.n	80064d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80064c6:	4b0a      	ldr	r3, [pc, #40]	@ (80064f0 <HAL_Delay+0x44>)
 80064c8:	781b      	ldrb	r3, [r3, #0]
 80064ca:	001a      	movs	r2, r3
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	189b      	adds	r3, r3, r2
 80064d0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80064d2:	46c0      	nop			@ (mov r8, r8)
 80064d4:	f7ff ffe0 	bl	8006498 <HAL_GetTick>
 80064d8:	0002      	movs	r2, r0
 80064da:	68bb      	ldr	r3, [r7, #8]
 80064dc:	1ad3      	subs	r3, r2, r3
 80064de:	68fa      	ldr	r2, [r7, #12]
 80064e0:	429a      	cmp	r2, r3
 80064e2:	d8f7      	bhi.n	80064d4 <HAL_Delay+0x28>
  {
  }
}
 80064e4:	46c0      	nop			@ (mov r8, r8)
 80064e6:	46c0      	nop			@ (mov r8, r8)
 80064e8:	46bd      	mov	sp, r7
 80064ea:	b004      	add	sp, #16
 80064ec:	bd80      	pop	{r7, pc}
 80064ee:	46c0      	nop			@ (mov r8, r8)
 80064f0:	20000038 	.word	0x20000038

080064f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b082      	sub	sp, #8
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	0002      	movs	r2, r0
 80064fc:	1dfb      	adds	r3, r7, #7
 80064fe:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8006500:	1dfb      	adds	r3, r7, #7
 8006502:	781b      	ldrb	r3, [r3, #0]
 8006504:	2b7f      	cmp	r3, #127	@ 0x7f
 8006506:	d809      	bhi.n	800651c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006508:	1dfb      	adds	r3, r7, #7
 800650a:	781b      	ldrb	r3, [r3, #0]
 800650c:	001a      	movs	r2, r3
 800650e:	231f      	movs	r3, #31
 8006510:	401a      	ands	r2, r3
 8006512:	4b04      	ldr	r3, [pc, #16]	@ (8006524 <__NVIC_EnableIRQ+0x30>)
 8006514:	2101      	movs	r1, #1
 8006516:	4091      	lsls	r1, r2
 8006518:	000a      	movs	r2, r1
 800651a:	601a      	str	r2, [r3, #0]
  }
}
 800651c:	46c0      	nop			@ (mov r8, r8)
 800651e:	46bd      	mov	sp, r7
 8006520:	b002      	add	sp, #8
 8006522:	bd80      	pop	{r7, pc}
 8006524:	e000e100 	.word	0xe000e100

08006528 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006528:	b590      	push	{r4, r7, lr}
 800652a:	b083      	sub	sp, #12
 800652c:	af00      	add	r7, sp, #0
 800652e:	0002      	movs	r2, r0
 8006530:	6039      	str	r1, [r7, #0]
 8006532:	1dfb      	adds	r3, r7, #7
 8006534:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8006536:	1dfb      	adds	r3, r7, #7
 8006538:	781b      	ldrb	r3, [r3, #0]
 800653a:	2b7f      	cmp	r3, #127	@ 0x7f
 800653c:	d828      	bhi.n	8006590 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800653e:	4a2f      	ldr	r2, [pc, #188]	@ (80065fc <__NVIC_SetPriority+0xd4>)
 8006540:	1dfb      	adds	r3, r7, #7
 8006542:	781b      	ldrb	r3, [r3, #0]
 8006544:	b25b      	sxtb	r3, r3
 8006546:	089b      	lsrs	r3, r3, #2
 8006548:	33c0      	adds	r3, #192	@ 0xc0
 800654a:	009b      	lsls	r3, r3, #2
 800654c:	589b      	ldr	r3, [r3, r2]
 800654e:	1dfa      	adds	r2, r7, #7
 8006550:	7812      	ldrb	r2, [r2, #0]
 8006552:	0011      	movs	r1, r2
 8006554:	2203      	movs	r2, #3
 8006556:	400a      	ands	r2, r1
 8006558:	00d2      	lsls	r2, r2, #3
 800655a:	21ff      	movs	r1, #255	@ 0xff
 800655c:	4091      	lsls	r1, r2
 800655e:	000a      	movs	r2, r1
 8006560:	43d2      	mvns	r2, r2
 8006562:	401a      	ands	r2, r3
 8006564:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	019b      	lsls	r3, r3, #6
 800656a:	22ff      	movs	r2, #255	@ 0xff
 800656c:	401a      	ands	r2, r3
 800656e:	1dfb      	adds	r3, r7, #7
 8006570:	781b      	ldrb	r3, [r3, #0]
 8006572:	0018      	movs	r0, r3
 8006574:	2303      	movs	r3, #3
 8006576:	4003      	ands	r3, r0
 8006578:	00db      	lsls	r3, r3, #3
 800657a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800657c:	481f      	ldr	r0, [pc, #124]	@ (80065fc <__NVIC_SetPriority+0xd4>)
 800657e:	1dfb      	adds	r3, r7, #7
 8006580:	781b      	ldrb	r3, [r3, #0]
 8006582:	b25b      	sxtb	r3, r3
 8006584:	089b      	lsrs	r3, r3, #2
 8006586:	430a      	orrs	r2, r1
 8006588:	33c0      	adds	r3, #192	@ 0xc0
 800658a:	009b      	lsls	r3, r3, #2
 800658c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800658e:	e031      	b.n	80065f4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006590:	4a1b      	ldr	r2, [pc, #108]	@ (8006600 <__NVIC_SetPriority+0xd8>)
 8006592:	1dfb      	adds	r3, r7, #7
 8006594:	781b      	ldrb	r3, [r3, #0]
 8006596:	0019      	movs	r1, r3
 8006598:	230f      	movs	r3, #15
 800659a:	400b      	ands	r3, r1
 800659c:	3b08      	subs	r3, #8
 800659e:	089b      	lsrs	r3, r3, #2
 80065a0:	3306      	adds	r3, #6
 80065a2:	009b      	lsls	r3, r3, #2
 80065a4:	18d3      	adds	r3, r2, r3
 80065a6:	3304      	adds	r3, #4
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	1dfa      	adds	r2, r7, #7
 80065ac:	7812      	ldrb	r2, [r2, #0]
 80065ae:	0011      	movs	r1, r2
 80065b0:	2203      	movs	r2, #3
 80065b2:	400a      	ands	r2, r1
 80065b4:	00d2      	lsls	r2, r2, #3
 80065b6:	21ff      	movs	r1, #255	@ 0xff
 80065b8:	4091      	lsls	r1, r2
 80065ba:	000a      	movs	r2, r1
 80065bc:	43d2      	mvns	r2, r2
 80065be:	401a      	ands	r2, r3
 80065c0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	019b      	lsls	r3, r3, #6
 80065c6:	22ff      	movs	r2, #255	@ 0xff
 80065c8:	401a      	ands	r2, r3
 80065ca:	1dfb      	adds	r3, r7, #7
 80065cc:	781b      	ldrb	r3, [r3, #0]
 80065ce:	0018      	movs	r0, r3
 80065d0:	2303      	movs	r3, #3
 80065d2:	4003      	ands	r3, r0
 80065d4:	00db      	lsls	r3, r3, #3
 80065d6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80065d8:	4809      	ldr	r0, [pc, #36]	@ (8006600 <__NVIC_SetPriority+0xd8>)
 80065da:	1dfb      	adds	r3, r7, #7
 80065dc:	781b      	ldrb	r3, [r3, #0]
 80065de:	001c      	movs	r4, r3
 80065e0:	230f      	movs	r3, #15
 80065e2:	4023      	ands	r3, r4
 80065e4:	3b08      	subs	r3, #8
 80065e6:	089b      	lsrs	r3, r3, #2
 80065e8:	430a      	orrs	r2, r1
 80065ea:	3306      	adds	r3, #6
 80065ec:	009b      	lsls	r3, r3, #2
 80065ee:	18c3      	adds	r3, r0, r3
 80065f0:	3304      	adds	r3, #4
 80065f2:	601a      	str	r2, [r3, #0]
}
 80065f4:	46c0      	nop			@ (mov r8, r8)
 80065f6:	46bd      	mov	sp, r7
 80065f8:	b003      	add	sp, #12
 80065fa:	bd90      	pop	{r4, r7, pc}
 80065fc:	e000e100 	.word	0xe000e100
 8006600:	e000ed00 	.word	0xe000ed00

08006604 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b082      	sub	sp, #8
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	1e5a      	subs	r2, r3, #1
 8006610:	2380      	movs	r3, #128	@ 0x80
 8006612:	045b      	lsls	r3, r3, #17
 8006614:	429a      	cmp	r2, r3
 8006616:	d301      	bcc.n	800661c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006618:	2301      	movs	r3, #1
 800661a:	e010      	b.n	800663e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800661c:	4b0a      	ldr	r3, [pc, #40]	@ (8006648 <SysTick_Config+0x44>)
 800661e:	687a      	ldr	r2, [r7, #4]
 8006620:	3a01      	subs	r2, #1
 8006622:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006624:	2301      	movs	r3, #1
 8006626:	425b      	negs	r3, r3
 8006628:	2103      	movs	r1, #3
 800662a:	0018      	movs	r0, r3
 800662c:	f7ff ff7c 	bl	8006528 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006630:	4b05      	ldr	r3, [pc, #20]	@ (8006648 <SysTick_Config+0x44>)
 8006632:	2200      	movs	r2, #0
 8006634:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006636:	4b04      	ldr	r3, [pc, #16]	@ (8006648 <SysTick_Config+0x44>)
 8006638:	2207      	movs	r2, #7
 800663a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800663c:	2300      	movs	r3, #0
}
 800663e:	0018      	movs	r0, r3
 8006640:	46bd      	mov	sp, r7
 8006642:	b002      	add	sp, #8
 8006644:	bd80      	pop	{r7, pc}
 8006646:	46c0      	nop			@ (mov r8, r8)
 8006648:	e000e010 	.word	0xe000e010

0800664c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800664c:	b580      	push	{r7, lr}
 800664e:	b084      	sub	sp, #16
 8006650:	af00      	add	r7, sp, #0
 8006652:	60b9      	str	r1, [r7, #8]
 8006654:	607a      	str	r2, [r7, #4]
 8006656:	210f      	movs	r1, #15
 8006658:	187b      	adds	r3, r7, r1
 800665a:	1c02      	adds	r2, r0, #0
 800665c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800665e:	68ba      	ldr	r2, [r7, #8]
 8006660:	187b      	adds	r3, r7, r1
 8006662:	781b      	ldrb	r3, [r3, #0]
 8006664:	b25b      	sxtb	r3, r3
 8006666:	0011      	movs	r1, r2
 8006668:	0018      	movs	r0, r3
 800666a:	f7ff ff5d 	bl	8006528 <__NVIC_SetPriority>
}
 800666e:	46c0      	nop			@ (mov r8, r8)
 8006670:	46bd      	mov	sp, r7
 8006672:	b004      	add	sp, #16
 8006674:	bd80      	pop	{r7, pc}

08006676 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006676:	b580      	push	{r7, lr}
 8006678:	b082      	sub	sp, #8
 800667a:	af00      	add	r7, sp, #0
 800667c:	0002      	movs	r2, r0
 800667e:	1dfb      	adds	r3, r7, #7
 8006680:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006682:	1dfb      	adds	r3, r7, #7
 8006684:	781b      	ldrb	r3, [r3, #0]
 8006686:	b25b      	sxtb	r3, r3
 8006688:	0018      	movs	r0, r3
 800668a:	f7ff ff33 	bl	80064f4 <__NVIC_EnableIRQ>
}
 800668e:	46c0      	nop			@ (mov r8, r8)
 8006690:	46bd      	mov	sp, r7
 8006692:	b002      	add	sp, #8
 8006694:	bd80      	pop	{r7, pc}

08006696 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006696:	b580      	push	{r7, lr}
 8006698:	b082      	sub	sp, #8
 800669a:	af00      	add	r7, sp, #0
 800669c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	0018      	movs	r0, r3
 80066a2:	f7ff ffaf 	bl	8006604 <SysTick_Config>
 80066a6:	0003      	movs	r3, r0
}
 80066a8:	0018      	movs	r0, r3
 80066aa:	46bd      	mov	sp, r7
 80066ac:	b002      	add	sp, #8
 80066ae:	bd80      	pop	{r7, pc}

080066b0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b084      	sub	sp, #16
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d101      	bne.n	80066c2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80066be:	2301      	movs	r3, #1
 80066c0:	e061      	b.n	8006786 <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	4a32      	ldr	r2, [pc, #200]	@ (8006790 <HAL_DMA_Init+0xe0>)
 80066c8:	4694      	mov	ip, r2
 80066ca:	4463      	add	r3, ip
 80066cc:	2114      	movs	r1, #20
 80066ce:	0018      	movs	r0, r3
 80066d0:	f7f9 fd36 	bl	8000140 <__udivsi3>
 80066d4:	0003      	movs	r3, r0
 80066d6:	009a      	lsls	r2, r3, #2
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	4a2d      	ldr	r2, [pc, #180]	@ (8006794 <HAL_DMA_Init+0xe4>)
 80066e0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2225      	movs	r2, #37	@ 0x25
 80066e6:	2102      	movs	r1, #2
 80066e8:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	4a28      	ldr	r2, [pc, #160]	@ (8006798 <HAL_DMA_Init+0xe8>)
 80066f6:	4013      	ands	r3, r2
 80066f8:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8006702:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	691b      	ldr	r3, [r3, #16]
 8006708:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800670e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	699b      	ldr	r3, [r3, #24]
 8006714:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800671a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	6a1b      	ldr	r3, [r3, #32]
 8006720:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006722:	68fa      	ldr	r2, [r7, #12]
 8006724:	4313      	orrs	r3, r2
 8006726:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	68fa      	ldr	r2, [r7, #12]
 800672e:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	689a      	ldr	r2, [r3, #8]
 8006734:	2380      	movs	r3, #128	@ 0x80
 8006736:	01db      	lsls	r3, r3, #7
 8006738:	429a      	cmp	r2, r3
 800673a:	d018      	beq.n	800676e <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800673c:	4b17      	ldr	r3, [pc, #92]	@ (800679c <HAL_DMA_Init+0xec>)
 800673e:	681a      	ldr	r2, [r3, #0]
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006744:	211c      	movs	r1, #28
 8006746:	400b      	ands	r3, r1
 8006748:	210f      	movs	r1, #15
 800674a:	4099      	lsls	r1, r3
 800674c:	000b      	movs	r3, r1
 800674e:	43d9      	mvns	r1, r3
 8006750:	4b12      	ldr	r3, [pc, #72]	@ (800679c <HAL_DMA_Init+0xec>)
 8006752:	400a      	ands	r2, r1
 8006754:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8006756:	4b11      	ldr	r3, [pc, #68]	@ (800679c <HAL_DMA_Init+0xec>)
 8006758:	6819      	ldr	r1, [r3, #0]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	685a      	ldr	r2, [r3, #4]
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006762:	201c      	movs	r0, #28
 8006764:	4003      	ands	r3, r0
 8006766:	409a      	lsls	r2, r3
 8006768:	4b0c      	ldr	r3, [pc, #48]	@ (800679c <HAL_DMA_Init+0xec>)
 800676a:	430a      	orrs	r2, r1
 800676c:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2200      	movs	r2, #0
 8006772:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2225      	movs	r2, #37	@ 0x25
 8006778:	2101      	movs	r1, #1
 800677a:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2224      	movs	r2, #36	@ 0x24
 8006780:	2100      	movs	r1, #0
 8006782:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006784:	2300      	movs	r3, #0
}
 8006786:	0018      	movs	r0, r3
 8006788:	46bd      	mov	sp, r7
 800678a:	b004      	add	sp, #16
 800678c:	bd80      	pop	{r7, pc}
 800678e:	46c0      	nop			@ (mov r8, r8)
 8006790:	bffdfff8 	.word	0xbffdfff8
 8006794:	40020000 	.word	0x40020000
 8006798:	ffff800f 	.word	0xffff800f
 800679c:	400200a8 	.word	0x400200a8

080067a0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b086      	sub	sp, #24
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	60f8      	str	r0, [r7, #12]
 80067a8:	60b9      	str	r1, [r7, #8]
 80067aa:	607a      	str	r2, [r7, #4]
 80067ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80067ae:	2317      	movs	r3, #23
 80067b0:	18fb      	adds	r3, r7, r3
 80067b2:	2200      	movs	r2, #0
 80067b4:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	2224      	movs	r2, #36	@ 0x24
 80067ba:	5c9b      	ldrb	r3, [r3, r2]
 80067bc:	2b01      	cmp	r3, #1
 80067be:	d101      	bne.n	80067c4 <HAL_DMA_Start_IT+0x24>
 80067c0:	2302      	movs	r3, #2
 80067c2:	e04f      	b.n	8006864 <HAL_DMA_Start_IT+0xc4>
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	2224      	movs	r2, #36	@ 0x24
 80067c8:	2101      	movs	r1, #1
 80067ca:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	2225      	movs	r2, #37	@ 0x25
 80067d0:	5c9b      	ldrb	r3, [r3, r2]
 80067d2:	b2db      	uxtb	r3, r3
 80067d4:	2b01      	cmp	r3, #1
 80067d6:	d13a      	bne.n	800684e <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	2225      	movs	r2, #37	@ 0x25
 80067dc:	2102      	movs	r1, #2
 80067de:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	2200      	movs	r2, #0
 80067e4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	681a      	ldr	r2, [r3, #0]
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	2101      	movs	r1, #1
 80067f2:	438a      	bics	r2, r1
 80067f4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	687a      	ldr	r2, [r7, #4]
 80067fa:	68b9      	ldr	r1, [r7, #8]
 80067fc:	68f8      	ldr	r0, [r7, #12]
 80067fe:	f000 f976 	bl	8006aee <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006806:	2b00      	cmp	r3, #0
 8006808:	d008      	beq.n	800681c <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	681a      	ldr	r2, [r3, #0]
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	210e      	movs	r1, #14
 8006816:	430a      	orrs	r2, r1
 8006818:	601a      	str	r2, [r3, #0]
 800681a:	e00f      	b.n	800683c <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	681a      	ldr	r2, [r3, #0]
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	2104      	movs	r1, #4
 8006828:	438a      	bics	r2, r1
 800682a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	681a      	ldr	r2, [r3, #0]
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	210a      	movs	r1, #10
 8006838:	430a      	orrs	r2, r1
 800683a:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	681a      	ldr	r2, [r3, #0]
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	2101      	movs	r1, #1
 8006848:	430a      	orrs	r2, r1
 800684a:	601a      	str	r2, [r3, #0]
 800684c:	e007      	b.n	800685e <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	2224      	movs	r2, #36	@ 0x24
 8006852:	2100      	movs	r1, #0
 8006854:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8006856:	2317      	movs	r3, #23
 8006858:	18fb      	adds	r3, r7, r3
 800685a:	2202      	movs	r2, #2
 800685c:	701a      	strb	r2, [r3, #0]
  }
  return status;
 800685e:	2317      	movs	r3, #23
 8006860:	18fb      	adds	r3, r7, r3
 8006862:	781b      	ldrb	r3, [r3, #0]
}
 8006864:	0018      	movs	r0, r3
 8006866:	46bd      	mov	sp, r7
 8006868:	b006      	add	sp, #24
 800686a:	bd80      	pop	{r7, pc}

0800686c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b084      	sub	sp, #16
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006874:	230f      	movs	r3, #15
 8006876:	18fb      	adds	r3, r7, r3
 8006878:	2200      	movs	r2, #0
 800687a:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2225      	movs	r2, #37	@ 0x25
 8006880:	5c9b      	ldrb	r3, [r3, r2]
 8006882:	b2db      	uxtb	r3, r3
 8006884:	2b02      	cmp	r3, #2
 8006886:	d008      	beq.n	800689a <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2204      	movs	r2, #4
 800688c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2224      	movs	r2, #36	@ 0x24
 8006892:	2100      	movs	r1, #0
 8006894:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8006896:	2301      	movs	r3, #1
 8006898:	e024      	b.n	80068e4 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	681a      	ldr	r2, [r3, #0]
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	210e      	movs	r1, #14
 80068a6:	438a      	bics	r2, r1
 80068a8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	681a      	ldr	r2, [r3, #0]
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	2101      	movs	r1, #1
 80068b6:	438a      	bics	r2, r1
 80068b8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068be:	221c      	movs	r2, #28
 80068c0:	401a      	ands	r2, r3
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068c6:	2101      	movs	r1, #1
 80068c8:	4091      	lsls	r1, r2
 80068ca:	000a      	movs	r2, r1
 80068cc:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2225      	movs	r2, #37	@ 0x25
 80068d2:	2101      	movs	r1, #1
 80068d4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2224      	movs	r2, #36	@ 0x24
 80068da:	2100      	movs	r1, #0
 80068dc:	5499      	strb	r1, [r3, r2]

    return status;
 80068de:	230f      	movs	r3, #15
 80068e0:	18fb      	adds	r3, r7, r3
 80068e2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80068e4:	0018      	movs	r0, r3
 80068e6:	46bd      	mov	sp, r7
 80068e8:	b004      	add	sp, #16
 80068ea:	bd80      	pop	{r7, pc}

080068ec <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b084      	sub	sp, #16
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80068f4:	210f      	movs	r1, #15
 80068f6:	187b      	adds	r3, r7, r1
 80068f8:	2200      	movs	r2, #0
 80068fa:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2225      	movs	r2, #37	@ 0x25
 8006900:	5c9b      	ldrb	r3, [r3, r2]
 8006902:	b2db      	uxtb	r3, r3
 8006904:	2b02      	cmp	r3, #2
 8006906:	d006      	beq.n	8006916 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2204      	movs	r2, #4
 800690c:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800690e:	187b      	adds	r3, r7, r1
 8006910:	2201      	movs	r2, #1
 8006912:	701a      	strb	r2, [r3, #0]
 8006914:	e02a      	b.n	800696c <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	681a      	ldr	r2, [r3, #0]
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	210e      	movs	r1, #14
 8006922:	438a      	bics	r2, r1
 8006924:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	681a      	ldr	r2, [r3, #0]
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	2101      	movs	r1, #1
 8006932:	438a      	bics	r2, r1
 8006934:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800693a:	221c      	movs	r2, #28
 800693c:	401a      	ands	r2, r3
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006942:	2101      	movs	r1, #1
 8006944:	4091      	lsls	r1, r2
 8006946:	000a      	movs	r2, r1
 8006948:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2225      	movs	r2, #37	@ 0x25
 800694e:	2101      	movs	r1, #1
 8006950:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2224      	movs	r2, #36	@ 0x24
 8006956:	2100      	movs	r1, #0
 8006958:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800695e:	2b00      	cmp	r3, #0
 8006960:	d004      	beq.n	800696c <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006966:	687a      	ldr	r2, [r7, #4]
 8006968:	0010      	movs	r0, r2
 800696a:	4798      	blx	r3
    }
  }
  return status;
 800696c:	230f      	movs	r3, #15
 800696e:	18fb      	adds	r3, r7, r3
 8006970:	781b      	ldrb	r3, [r3, #0]
}
 8006972:	0018      	movs	r0, r3
 8006974:	46bd      	mov	sp, r7
 8006976:	b004      	add	sp, #16
 8006978:	bd80      	pop	{r7, pc}

0800697a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800697a:	b580      	push	{r7, lr}
 800697c:	b084      	sub	sp, #16
 800697e:	af00      	add	r7, sp, #0
 8006980:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006996:	221c      	movs	r2, #28
 8006998:	4013      	ands	r3, r2
 800699a:	2204      	movs	r2, #4
 800699c:	409a      	lsls	r2, r3
 800699e:	0013      	movs	r3, r2
 80069a0:	68fa      	ldr	r2, [r7, #12]
 80069a2:	4013      	ands	r3, r2
 80069a4:	d026      	beq.n	80069f4 <HAL_DMA_IRQHandler+0x7a>
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	2204      	movs	r2, #4
 80069aa:	4013      	ands	r3, r2
 80069ac:	d022      	beq.n	80069f4 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	2220      	movs	r2, #32
 80069b6:	4013      	ands	r3, r2
 80069b8:	d107      	bne.n	80069ca <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	681a      	ldr	r2, [r3, #0]
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	2104      	movs	r1, #4
 80069c6:	438a      	bics	r2, r1
 80069c8:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069ce:	221c      	movs	r2, #28
 80069d0:	401a      	ands	r2, r3
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069d6:	2104      	movs	r1, #4
 80069d8:	4091      	lsls	r1, r2
 80069da:	000a      	movs	r2, r1
 80069dc:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d100      	bne.n	80069e8 <HAL_DMA_IRQHandler+0x6e>
 80069e6:	e071      	b.n	8006acc <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069ec:	687a      	ldr	r2, [r7, #4]
 80069ee:	0010      	movs	r0, r2
 80069f0:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 80069f2:	e06b      	b.n	8006acc <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069f8:	221c      	movs	r2, #28
 80069fa:	4013      	ands	r3, r2
 80069fc:	2202      	movs	r2, #2
 80069fe:	409a      	lsls	r2, r3
 8006a00:	0013      	movs	r3, r2
 8006a02:	68fa      	ldr	r2, [r7, #12]
 8006a04:	4013      	ands	r3, r2
 8006a06:	d02d      	beq.n	8006a64 <HAL_DMA_IRQHandler+0xea>
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	2202      	movs	r2, #2
 8006a0c:	4013      	ands	r3, r2
 8006a0e:	d029      	beq.n	8006a64 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	2220      	movs	r2, #32
 8006a18:	4013      	ands	r3, r2
 8006a1a:	d10b      	bne.n	8006a34 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	681a      	ldr	r2, [r3, #0]
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	210a      	movs	r1, #10
 8006a28:	438a      	bics	r2, r1
 8006a2a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2225      	movs	r2, #37	@ 0x25
 8006a30:	2101      	movs	r1, #1
 8006a32:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a38:	221c      	movs	r2, #28
 8006a3a:	401a      	ands	r2, r3
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a40:	2102      	movs	r1, #2
 8006a42:	4091      	lsls	r1, r2
 8006a44:	000a      	movs	r2, r1
 8006a46:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2224      	movs	r2, #36	@ 0x24
 8006a4c:	2100      	movs	r1, #0
 8006a4e:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d039      	beq.n	8006acc <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a5c:	687a      	ldr	r2, [r7, #4]
 8006a5e:	0010      	movs	r0, r2
 8006a60:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8006a62:	e033      	b.n	8006acc <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a68:	221c      	movs	r2, #28
 8006a6a:	4013      	ands	r3, r2
 8006a6c:	2208      	movs	r2, #8
 8006a6e:	409a      	lsls	r2, r3
 8006a70:	0013      	movs	r3, r2
 8006a72:	68fa      	ldr	r2, [r7, #12]
 8006a74:	4013      	ands	r3, r2
 8006a76:	d02a      	beq.n	8006ace <HAL_DMA_IRQHandler+0x154>
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	2208      	movs	r2, #8
 8006a7c:	4013      	ands	r3, r2
 8006a7e:	d026      	beq.n	8006ace <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	681a      	ldr	r2, [r3, #0]
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	210e      	movs	r1, #14
 8006a8c:	438a      	bics	r2, r1
 8006a8e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a94:	221c      	movs	r2, #28
 8006a96:	401a      	ands	r2, r3
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a9c:	2101      	movs	r1, #1
 8006a9e:	4091      	lsls	r1, r2
 8006aa0:	000a      	movs	r2, r1
 8006aa2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2201      	movs	r2, #1
 8006aa8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2225      	movs	r2, #37	@ 0x25
 8006aae:	2101      	movs	r1, #1
 8006ab0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2224      	movs	r2, #36	@ 0x24
 8006ab6:	2100      	movs	r1, #0
 8006ab8:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d005      	beq.n	8006ace <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ac6:	687a      	ldr	r2, [r7, #4]
 8006ac8:	0010      	movs	r0, r2
 8006aca:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8006acc:	46c0      	nop			@ (mov r8, r8)
 8006ace:	46c0      	nop			@ (mov r8, r8)
}
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	b004      	add	sp, #16
 8006ad4:	bd80      	pop	{r7, pc}

08006ad6 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8006ad6:	b580      	push	{r7, lr}
 8006ad8:	b082      	sub	sp, #8
 8006ada:	af00      	add	r7, sp, #0
 8006adc:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2225      	movs	r2, #37	@ 0x25
 8006ae2:	5c9b      	ldrb	r3, [r3, r2]
 8006ae4:	b2db      	uxtb	r3, r3
}
 8006ae6:	0018      	movs	r0, r3
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	b002      	add	sp, #8
 8006aec:	bd80      	pop	{r7, pc}

08006aee <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006aee:	b580      	push	{r7, lr}
 8006af0:	b084      	sub	sp, #16
 8006af2:	af00      	add	r7, sp, #0
 8006af4:	60f8      	str	r0, [r7, #12]
 8006af6:	60b9      	str	r1, [r7, #8]
 8006af8:	607a      	str	r2, [r7, #4]
 8006afa:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b00:	221c      	movs	r2, #28
 8006b02:	401a      	ands	r2, r3
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b08:	2101      	movs	r1, #1
 8006b0a:	4091      	lsls	r1, r2
 8006b0c:	000a      	movs	r2, r1
 8006b0e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	683a      	ldr	r2, [r7, #0]
 8006b16:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	689b      	ldr	r3, [r3, #8]
 8006b1c:	2b10      	cmp	r3, #16
 8006b1e:	d108      	bne.n	8006b32 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	687a      	ldr	r2, [r7, #4]
 8006b26:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	68ba      	ldr	r2, [r7, #8]
 8006b2e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006b30:	e007      	b.n	8006b42 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	68ba      	ldr	r2, [r7, #8]
 8006b38:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	687a      	ldr	r2, [r7, #4]
 8006b40:	60da      	str	r2, [r3, #12]
}
 8006b42:	46c0      	nop			@ (mov r8, r8)
 8006b44:	46bd      	mov	sp, r7
 8006b46:	b004      	add	sp, #16
 8006b48:	bd80      	pop	{r7, pc}
	...

08006b4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b086      	sub	sp, #24
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
 8006b54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006b56:	2300      	movs	r3, #0
 8006b58:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8006b5e:	2300      	movs	r3, #0
 8006b60:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8006b62:	e155      	b.n	8006e10 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	2101      	movs	r1, #1
 8006b6a:	697a      	ldr	r2, [r7, #20]
 8006b6c:	4091      	lsls	r1, r2
 8006b6e:	000a      	movs	r2, r1
 8006b70:	4013      	ands	r3, r2
 8006b72:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d100      	bne.n	8006b7c <HAL_GPIO_Init+0x30>
 8006b7a:	e146      	b.n	8006e0a <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	685b      	ldr	r3, [r3, #4]
 8006b80:	2203      	movs	r2, #3
 8006b82:	4013      	ands	r3, r2
 8006b84:	2b01      	cmp	r3, #1
 8006b86:	d005      	beq.n	8006b94 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	685b      	ldr	r3, [r3, #4]
 8006b8c:	2203      	movs	r2, #3
 8006b8e:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006b90:	2b02      	cmp	r3, #2
 8006b92:	d130      	bne.n	8006bf6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	689b      	ldr	r3, [r3, #8]
 8006b98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8006b9a:	697b      	ldr	r3, [r7, #20]
 8006b9c:	005b      	lsls	r3, r3, #1
 8006b9e:	2203      	movs	r2, #3
 8006ba0:	409a      	lsls	r2, r3
 8006ba2:	0013      	movs	r3, r2
 8006ba4:	43da      	mvns	r2, r3
 8006ba6:	693b      	ldr	r3, [r7, #16]
 8006ba8:	4013      	ands	r3, r2
 8006baa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	68da      	ldr	r2, [r3, #12]
 8006bb0:	697b      	ldr	r3, [r7, #20]
 8006bb2:	005b      	lsls	r3, r3, #1
 8006bb4:	409a      	lsls	r2, r3
 8006bb6:	0013      	movs	r3, r2
 8006bb8:	693a      	ldr	r2, [r7, #16]
 8006bba:	4313      	orrs	r3, r2
 8006bbc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	693a      	ldr	r2, [r7, #16]
 8006bc2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	685b      	ldr	r3, [r3, #4]
 8006bc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006bca:	2201      	movs	r2, #1
 8006bcc:	697b      	ldr	r3, [r7, #20]
 8006bce:	409a      	lsls	r2, r3
 8006bd0:	0013      	movs	r3, r2
 8006bd2:	43da      	mvns	r2, r3
 8006bd4:	693b      	ldr	r3, [r7, #16]
 8006bd6:	4013      	ands	r3, r2
 8006bd8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	685b      	ldr	r3, [r3, #4]
 8006bde:	091b      	lsrs	r3, r3, #4
 8006be0:	2201      	movs	r2, #1
 8006be2:	401a      	ands	r2, r3
 8006be4:	697b      	ldr	r3, [r7, #20]
 8006be6:	409a      	lsls	r2, r3
 8006be8:	0013      	movs	r3, r2
 8006bea:	693a      	ldr	r2, [r7, #16]
 8006bec:	4313      	orrs	r3, r2
 8006bee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	693a      	ldr	r2, [r7, #16]
 8006bf4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	685b      	ldr	r3, [r3, #4]
 8006bfa:	2203      	movs	r2, #3
 8006bfc:	4013      	ands	r3, r2
 8006bfe:	2b03      	cmp	r3, #3
 8006c00:	d017      	beq.n	8006c32 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	68db      	ldr	r3, [r3, #12]
 8006c06:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006c08:	697b      	ldr	r3, [r7, #20]
 8006c0a:	005b      	lsls	r3, r3, #1
 8006c0c:	2203      	movs	r2, #3
 8006c0e:	409a      	lsls	r2, r3
 8006c10:	0013      	movs	r3, r2
 8006c12:	43da      	mvns	r2, r3
 8006c14:	693b      	ldr	r3, [r7, #16]
 8006c16:	4013      	ands	r3, r2
 8006c18:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	689a      	ldr	r2, [r3, #8]
 8006c1e:	697b      	ldr	r3, [r7, #20]
 8006c20:	005b      	lsls	r3, r3, #1
 8006c22:	409a      	lsls	r2, r3
 8006c24:	0013      	movs	r3, r2
 8006c26:	693a      	ldr	r2, [r7, #16]
 8006c28:	4313      	orrs	r3, r2
 8006c2a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	693a      	ldr	r2, [r7, #16]
 8006c30:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	685b      	ldr	r3, [r3, #4]
 8006c36:	2203      	movs	r2, #3
 8006c38:	4013      	ands	r3, r2
 8006c3a:	2b02      	cmp	r3, #2
 8006c3c:	d123      	bne.n	8006c86 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006c3e:	697b      	ldr	r3, [r7, #20]
 8006c40:	08da      	lsrs	r2, r3, #3
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	3208      	adds	r2, #8
 8006c46:	0092      	lsls	r2, r2, #2
 8006c48:	58d3      	ldr	r3, [r2, r3]
 8006c4a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8006c4c:	697b      	ldr	r3, [r7, #20]
 8006c4e:	2207      	movs	r2, #7
 8006c50:	4013      	ands	r3, r2
 8006c52:	009b      	lsls	r3, r3, #2
 8006c54:	220f      	movs	r2, #15
 8006c56:	409a      	lsls	r2, r3
 8006c58:	0013      	movs	r3, r2
 8006c5a:	43da      	mvns	r2, r3
 8006c5c:	693b      	ldr	r3, [r7, #16]
 8006c5e:	4013      	ands	r3, r2
 8006c60:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	691a      	ldr	r2, [r3, #16]
 8006c66:	697b      	ldr	r3, [r7, #20]
 8006c68:	2107      	movs	r1, #7
 8006c6a:	400b      	ands	r3, r1
 8006c6c:	009b      	lsls	r3, r3, #2
 8006c6e:	409a      	lsls	r2, r3
 8006c70:	0013      	movs	r3, r2
 8006c72:	693a      	ldr	r2, [r7, #16]
 8006c74:	4313      	orrs	r3, r2
 8006c76:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8006c78:	697b      	ldr	r3, [r7, #20]
 8006c7a:	08da      	lsrs	r2, r3, #3
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	3208      	adds	r2, #8
 8006c80:	0092      	lsls	r2, r2, #2
 8006c82:	6939      	ldr	r1, [r7, #16]
 8006c84:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006c8c:	697b      	ldr	r3, [r7, #20]
 8006c8e:	005b      	lsls	r3, r3, #1
 8006c90:	2203      	movs	r2, #3
 8006c92:	409a      	lsls	r2, r3
 8006c94:	0013      	movs	r3, r2
 8006c96:	43da      	mvns	r2, r3
 8006c98:	693b      	ldr	r3, [r7, #16]
 8006c9a:	4013      	ands	r3, r2
 8006c9c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	685b      	ldr	r3, [r3, #4]
 8006ca2:	2203      	movs	r2, #3
 8006ca4:	401a      	ands	r2, r3
 8006ca6:	697b      	ldr	r3, [r7, #20]
 8006ca8:	005b      	lsls	r3, r3, #1
 8006caa:	409a      	lsls	r2, r3
 8006cac:	0013      	movs	r3, r2
 8006cae:	693a      	ldr	r2, [r7, #16]
 8006cb0:	4313      	orrs	r3, r2
 8006cb2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	693a      	ldr	r2, [r7, #16]
 8006cb8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	685a      	ldr	r2, [r3, #4]
 8006cbe:	23c0      	movs	r3, #192	@ 0xc0
 8006cc0:	029b      	lsls	r3, r3, #10
 8006cc2:	4013      	ands	r3, r2
 8006cc4:	d100      	bne.n	8006cc8 <HAL_GPIO_Init+0x17c>
 8006cc6:	e0a0      	b.n	8006e0a <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006cc8:	4b57      	ldr	r3, [pc, #348]	@ (8006e28 <HAL_GPIO_Init+0x2dc>)
 8006cca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006ccc:	4b56      	ldr	r3, [pc, #344]	@ (8006e28 <HAL_GPIO_Init+0x2dc>)
 8006cce:	2101      	movs	r1, #1
 8006cd0:	430a      	orrs	r2, r1
 8006cd2:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8006cd4:	4a55      	ldr	r2, [pc, #340]	@ (8006e2c <HAL_GPIO_Init+0x2e0>)
 8006cd6:	697b      	ldr	r3, [r7, #20]
 8006cd8:	089b      	lsrs	r3, r3, #2
 8006cda:	3302      	adds	r3, #2
 8006cdc:	009b      	lsls	r3, r3, #2
 8006cde:	589b      	ldr	r3, [r3, r2]
 8006ce0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8006ce2:	697b      	ldr	r3, [r7, #20]
 8006ce4:	2203      	movs	r2, #3
 8006ce6:	4013      	ands	r3, r2
 8006ce8:	009b      	lsls	r3, r3, #2
 8006cea:	220f      	movs	r2, #15
 8006cec:	409a      	lsls	r2, r3
 8006cee:	0013      	movs	r3, r2
 8006cf0:	43da      	mvns	r2, r3
 8006cf2:	693b      	ldr	r3, [r7, #16]
 8006cf4:	4013      	ands	r3, r2
 8006cf6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8006cf8:	687a      	ldr	r2, [r7, #4]
 8006cfa:	23a0      	movs	r3, #160	@ 0xa0
 8006cfc:	05db      	lsls	r3, r3, #23
 8006cfe:	429a      	cmp	r2, r3
 8006d00:	d01f      	beq.n	8006d42 <HAL_GPIO_Init+0x1f6>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	4a4a      	ldr	r2, [pc, #296]	@ (8006e30 <HAL_GPIO_Init+0x2e4>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d019      	beq.n	8006d3e <HAL_GPIO_Init+0x1f2>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	4a49      	ldr	r2, [pc, #292]	@ (8006e34 <HAL_GPIO_Init+0x2e8>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d013      	beq.n	8006d3a <HAL_GPIO_Init+0x1ee>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	4a48      	ldr	r2, [pc, #288]	@ (8006e38 <HAL_GPIO_Init+0x2ec>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d00d      	beq.n	8006d36 <HAL_GPIO_Init+0x1ea>
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	4a47      	ldr	r2, [pc, #284]	@ (8006e3c <HAL_GPIO_Init+0x2f0>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d007      	beq.n	8006d32 <HAL_GPIO_Init+0x1e6>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	4a46      	ldr	r2, [pc, #280]	@ (8006e40 <HAL_GPIO_Init+0x2f4>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d101      	bne.n	8006d2e <HAL_GPIO_Init+0x1e2>
 8006d2a:	2305      	movs	r3, #5
 8006d2c:	e00a      	b.n	8006d44 <HAL_GPIO_Init+0x1f8>
 8006d2e:	2306      	movs	r3, #6
 8006d30:	e008      	b.n	8006d44 <HAL_GPIO_Init+0x1f8>
 8006d32:	2304      	movs	r3, #4
 8006d34:	e006      	b.n	8006d44 <HAL_GPIO_Init+0x1f8>
 8006d36:	2303      	movs	r3, #3
 8006d38:	e004      	b.n	8006d44 <HAL_GPIO_Init+0x1f8>
 8006d3a:	2302      	movs	r3, #2
 8006d3c:	e002      	b.n	8006d44 <HAL_GPIO_Init+0x1f8>
 8006d3e:	2301      	movs	r3, #1
 8006d40:	e000      	b.n	8006d44 <HAL_GPIO_Init+0x1f8>
 8006d42:	2300      	movs	r3, #0
 8006d44:	697a      	ldr	r2, [r7, #20]
 8006d46:	2103      	movs	r1, #3
 8006d48:	400a      	ands	r2, r1
 8006d4a:	0092      	lsls	r2, r2, #2
 8006d4c:	4093      	lsls	r3, r2
 8006d4e:	693a      	ldr	r2, [r7, #16]
 8006d50:	4313      	orrs	r3, r2
 8006d52:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006d54:	4935      	ldr	r1, [pc, #212]	@ (8006e2c <HAL_GPIO_Init+0x2e0>)
 8006d56:	697b      	ldr	r3, [r7, #20]
 8006d58:	089b      	lsrs	r3, r3, #2
 8006d5a:	3302      	adds	r3, #2
 8006d5c:	009b      	lsls	r3, r3, #2
 8006d5e:	693a      	ldr	r2, [r7, #16]
 8006d60:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006d62:	4b38      	ldr	r3, [pc, #224]	@ (8006e44 <HAL_GPIO_Init+0x2f8>)
 8006d64:	689b      	ldr	r3, [r3, #8]
 8006d66:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	43da      	mvns	r2, r3
 8006d6c:	693b      	ldr	r3, [r7, #16]
 8006d6e:	4013      	ands	r3, r2
 8006d70:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	685a      	ldr	r2, [r3, #4]
 8006d76:	2380      	movs	r3, #128	@ 0x80
 8006d78:	035b      	lsls	r3, r3, #13
 8006d7a:	4013      	ands	r3, r2
 8006d7c:	d003      	beq.n	8006d86 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8006d7e:	693a      	ldr	r2, [r7, #16]
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	4313      	orrs	r3, r2
 8006d84:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8006d86:	4b2f      	ldr	r3, [pc, #188]	@ (8006e44 <HAL_GPIO_Init+0x2f8>)
 8006d88:	693a      	ldr	r2, [r7, #16]
 8006d8a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8006d8c:	4b2d      	ldr	r3, [pc, #180]	@ (8006e44 <HAL_GPIO_Init+0x2f8>)
 8006d8e:	68db      	ldr	r3, [r3, #12]
 8006d90:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	43da      	mvns	r2, r3
 8006d96:	693b      	ldr	r3, [r7, #16]
 8006d98:	4013      	ands	r3, r2
 8006d9a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	685a      	ldr	r2, [r3, #4]
 8006da0:	2380      	movs	r3, #128	@ 0x80
 8006da2:	039b      	lsls	r3, r3, #14
 8006da4:	4013      	ands	r3, r2
 8006da6:	d003      	beq.n	8006db0 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8006da8:	693a      	ldr	r2, [r7, #16]
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	4313      	orrs	r3, r2
 8006dae:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8006db0:	4b24      	ldr	r3, [pc, #144]	@ (8006e44 <HAL_GPIO_Init+0x2f8>)
 8006db2:	693a      	ldr	r2, [r7, #16]
 8006db4:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8006db6:	4b23      	ldr	r3, [pc, #140]	@ (8006e44 <HAL_GPIO_Init+0x2f8>)
 8006db8:	685b      	ldr	r3, [r3, #4]
 8006dba:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	43da      	mvns	r2, r3
 8006dc0:	693b      	ldr	r3, [r7, #16]
 8006dc2:	4013      	ands	r3, r2
 8006dc4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	685a      	ldr	r2, [r3, #4]
 8006dca:	2380      	movs	r3, #128	@ 0x80
 8006dcc:	029b      	lsls	r3, r3, #10
 8006dce:	4013      	ands	r3, r2
 8006dd0:	d003      	beq.n	8006dda <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8006dd2:	693a      	ldr	r2, [r7, #16]
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	4313      	orrs	r3, r2
 8006dd8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8006dda:	4b1a      	ldr	r3, [pc, #104]	@ (8006e44 <HAL_GPIO_Init+0x2f8>)
 8006ddc:	693a      	ldr	r2, [r7, #16]
 8006dde:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006de0:	4b18      	ldr	r3, [pc, #96]	@ (8006e44 <HAL_GPIO_Init+0x2f8>)
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	43da      	mvns	r2, r3
 8006dea:	693b      	ldr	r3, [r7, #16]
 8006dec:	4013      	ands	r3, r2
 8006dee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	685a      	ldr	r2, [r3, #4]
 8006df4:	2380      	movs	r3, #128	@ 0x80
 8006df6:	025b      	lsls	r3, r3, #9
 8006df8:	4013      	ands	r3, r2
 8006dfa:	d003      	beq.n	8006e04 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8006dfc:	693a      	ldr	r2, [r7, #16]
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	4313      	orrs	r3, r2
 8006e02:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8006e04:	4b0f      	ldr	r3, [pc, #60]	@ (8006e44 <HAL_GPIO_Init+0x2f8>)
 8006e06:	693a      	ldr	r2, [r7, #16]
 8006e08:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8006e0a:	697b      	ldr	r3, [r7, #20]
 8006e0c:	3301      	adds	r3, #1
 8006e0e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	681a      	ldr	r2, [r3, #0]
 8006e14:	697b      	ldr	r3, [r7, #20]
 8006e16:	40da      	lsrs	r2, r3
 8006e18:	1e13      	subs	r3, r2, #0
 8006e1a:	d000      	beq.n	8006e1e <HAL_GPIO_Init+0x2d2>
 8006e1c:	e6a2      	b.n	8006b64 <HAL_GPIO_Init+0x18>
  }
}
 8006e1e:	46c0      	nop			@ (mov r8, r8)
 8006e20:	46c0      	nop			@ (mov r8, r8)
 8006e22:	46bd      	mov	sp, r7
 8006e24:	b006      	add	sp, #24
 8006e26:	bd80      	pop	{r7, pc}
 8006e28:	40021000 	.word	0x40021000
 8006e2c:	40010000 	.word	0x40010000
 8006e30:	50000400 	.word	0x50000400
 8006e34:	50000800 	.word	0x50000800
 8006e38:	50000c00 	.word	0x50000c00
 8006e3c:	50001000 	.word	0x50001000
 8006e40:	50001c00 	.word	0x50001c00
 8006e44:	40010400 	.word	0x40010400

08006e48 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b082      	sub	sp, #8
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
 8006e50:	0008      	movs	r0, r1
 8006e52:	0011      	movs	r1, r2
 8006e54:	1cbb      	adds	r3, r7, #2
 8006e56:	1c02      	adds	r2, r0, #0
 8006e58:	801a      	strh	r2, [r3, #0]
 8006e5a:	1c7b      	adds	r3, r7, #1
 8006e5c:	1c0a      	adds	r2, r1, #0
 8006e5e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006e60:	1c7b      	adds	r3, r7, #1
 8006e62:	781b      	ldrb	r3, [r3, #0]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d004      	beq.n	8006e72 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006e68:	1cbb      	adds	r3, r7, #2
 8006e6a:	881a      	ldrh	r2, [r3, #0]
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8006e70:	e003      	b.n	8006e7a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8006e72:	1cbb      	adds	r3, r7, #2
 8006e74:	881a      	ldrh	r2, [r3, #0]
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8006e7a:	46c0      	nop			@ (mov r8, r8)
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	b002      	add	sp, #8
 8006e80:	bd80      	pop	{r7, pc}

08006e82 <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006e82:	b580      	push	{r7, lr}
 8006e84:	b084      	sub	sp, #16
 8006e86:	af00      	add	r7, sp, #0
 8006e88:	6078      	str	r0, [r7, #4]
 8006e8a:	000a      	movs	r2, r1
 8006e8c:	1cbb      	adds	r3, r7, #2
 8006e8e:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	695b      	ldr	r3, [r3, #20]
 8006e94:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006e96:	1cbb      	adds	r3, r7, #2
 8006e98:	881b      	ldrh	r3, [r3, #0]
 8006e9a:	68fa      	ldr	r2, [r7, #12]
 8006e9c:	4013      	ands	r3, r2
 8006e9e:	041a      	lsls	r2, r3, #16
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	43db      	mvns	r3, r3
 8006ea4:	1cb9      	adds	r1, r7, #2
 8006ea6:	8809      	ldrh	r1, [r1, #0]
 8006ea8:	400b      	ands	r3, r1
 8006eaa:	431a      	orrs	r2, r3
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	619a      	str	r2, [r3, #24]
}
 8006eb0:	46c0      	nop			@ (mov r8, r8)
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	b004      	add	sp, #16
 8006eb6:	bd80      	pop	{r7, pc}

08006eb8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b082      	sub	sp, #8
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d101      	bne.n	8006eca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006ec6:	2301      	movs	r3, #1
 8006ec8:	e082      	b.n	8006fd0 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2241      	movs	r2, #65	@ 0x41
 8006ece:	5c9b      	ldrb	r3, [r3, r2]
 8006ed0:	b2db      	uxtb	r3, r3
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d107      	bne.n	8006ee6 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2240      	movs	r2, #64	@ 0x40
 8006eda:	2100      	movs	r1, #0
 8006edc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	0018      	movs	r0, r3
 8006ee2:	f7fc fd2d 	bl	8003940 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2241      	movs	r2, #65	@ 0x41
 8006eea:	2124      	movs	r1, #36	@ 0x24
 8006eec:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	681a      	ldr	r2, [r3, #0]
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	2101      	movs	r1, #1
 8006efa:	438a      	bics	r2, r1
 8006efc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	685a      	ldr	r2, [r3, #4]
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	4934      	ldr	r1, [pc, #208]	@ (8006fd8 <HAL_I2C_Init+0x120>)
 8006f08:	400a      	ands	r2, r1
 8006f0a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	689a      	ldr	r2, [r3, #8]
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	4931      	ldr	r1, [pc, #196]	@ (8006fdc <HAL_I2C_Init+0x124>)
 8006f18:	400a      	ands	r2, r1
 8006f1a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	68db      	ldr	r3, [r3, #12]
 8006f20:	2b01      	cmp	r3, #1
 8006f22:	d108      	bne.n	8006f36 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	689a      	ldr	r2, [r3, #8]
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	2180      	movs	r1, #128	@ 0x80
 8006f2e:	0209      	lsls	r1, r1, #8
 8006f30:	430a      	orrs	r2, r1
 8006f32:	609a      	str	r2, [r3, #8]
 8006f34:	e007      	b.n	8006f46 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	689a      	ldr	r2, [r3, #8]
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	2184      	movs	r1, #132	@ 0x84
 8006f40:	0209      	lsls	r1, r1, #8
 8006f42:	430a      	orrs	r2, r1
 8006f44:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	68db      	ldr	r3, [r3, #12]
 8006f4a:	2b02      	cmp	r3, #2
 8006f4c:	d104      	bne.n	8006f58 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	2280      	movs	r2, #128	@ 0x80
 8006f54:	0112      	lsls	r2, r2, #4
 8006f56:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	685a      	ldr	r2, [r3, #4]
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	491f      	ldr	r1, [pc, #124]	@ (8006fe0 <HAL_I2C_Init+0x128>)
 8006f64:	430a      	orrs	r2, r1
 8006f66:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	68da      	ldr	r2, [r3, #12]
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	491a      	ldr	r1, [pc, #104]	@ (8006fdc <HAL_I2C_Init+0x124>)
 8006f74:	400a      	ands	r2, r1
 8006f76:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	691a      	ldr	r2, [r3, #16]
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	695b      	ldr	r3, [r3, #20]
 8006f80:	431a      	orrs	r2, r3
 8006f82:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	699b      	ldr	r3, [r3, #24]
 8006f88:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	430a      	orrs	r2, r1
 8006f90:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	69d9      	ldr	r1, [r3, #28]
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6a1a      	ldr	r2, [r3, #32]
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	430a      	orrs	r2, r1
 8006fa0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	681a      	ldr	r2, [r3, #0]
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	2101      	movs	r1, #1
 8006fae:	430a      	orrs	r2, r1
 8006fb0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2241      	movs	r2, #65	@ 0x41
 8006fbc:	2120      	movs	r1, #32
 8006fbe:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2242      	movs	r2, #66	@ 0x42
 8006fca:	2100      	movs	r1, #0
 8006fcc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006fce:	2300      	movs	r3, #0
}
 8006fd0:	0018      	movs	r0, r3
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	b002      	add	sp, #8
 8006fd6:	bd80      	pop	{r7, pc}
 8006fd8:	f0ffffff 	.word	0xf0ffffff
 8006fdc:	ffff7fff 	.word	0xffff7fff
 8006fe0:	02008000 	.word	0x02008000

08006fe4 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 8006fe4:	b5b0      	push	{r4, r5, r7, lr}
 8006fe6:	b088      	sub	sp, #32
 8006fe8:	af02      	add	r7, sp, #8
 8006fea:	60f8      	str	r0, [r7, #12]
 8006fec:	0008      	movs	r0, r1
 8006fee:	607a      	str	r2, [r7, #4]
 8006ff0:	0019      	movs	r1, r3
 8006ff2:	230a      	movs	r3, #10
 8006ff4:	18fb      	adds	r3, r7, r3
 8006ff6:	1c02      	adds	r2, r0, #0
 8006ff8:	801a      	strh	r2, [r3, #0]
 8006ffa:	2308      	movs	r3, #8
 8006ffc:	18fb      	adds	r3, r7, r3
 8006ffe:	1c0a      	adds	r2, r1, #0
 8007000:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	2241      	movs	r2, #65	@ 0x41
 8007006:	5c9b      	ldrb	r3, [r3, r2]
 8007008:	b2db      	uxtb	r3, r3
 800700a:	2b20      	cmp	r3, #32
 800700c:	d000      	beq.n	8007010 <HAL_I2C_Master_Transmit_DMA+0x2c>
 800700e:	e0dd      	b.n	80071cc <HAL_I2C_Master_Transmit_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	699a      	ldr	r2, [r3, #24]
 8007016:	2380      	movs	r3, #128	@ 0x80
 8007018:	021b      	lsls	r3, r3, #8
 800701a:	401a      	ands	r2, r3
 800701c:	2380      	movs	r3, #128	@ 0x80
 800701e:	021b      	lsls	r3, r3, #8
 8007020:	429a      	cmp	r2, r3
 8007022:	d101      	bne.n	8007028 <HAL_I2C_Master_Transmit_DMA+0x44>
    {
      return HAL_BUSY;
 8007024:	2302      	movs	r3, #2
 8007026:	e0d2      	b.n	80071ce <HAL_I2C_Master_Transmit_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	2240      	movs	r2, #64	@ 0x40
 800702c:	5c9b      	ldrb	r3, [r3, r2]
 800702e:	2b01      	cmp	r3, #1
 8007030:	d101      	bne.n	8007036 <HAL_I2C_Master_Transmit_DMA+0x52>
 8007032:	2302      	movs	r3, #2
 8007034:	e0cb      	b.n	80071ce <HAL_I2C_Master_Transmit_DMA+0x1ea>
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	2240      	movs	r2, #64	@ 0x40
 800703a:	2101      	movs	r1, #1
 800703c:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	2241      	movs	r2, #65	@ 0x41
 8007042:	2121      	movs	r1, #33	@ 0x21
 8007044:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	2242      	movs	r2, #66	@ 0x42
 800704a:	2110      	movs	r1, #16
 800704c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	2200      	movs	r2, #0
 8007052:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	687a      	ldr	r2, [r7, #4]
 8007058:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	2208      	movs	r2, #8
 800705e:	18ba      	adds	r2, r7, r2
 8007060:	8812      	ldrh	r2, [r2, #0]
 8007062:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	4a5c      	ldr	r2, [pc, #368]	@ (80071d8 <HAL_I2C_Master_Transmit_DMA+0x1f4>)
 8007068:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	4a5b      	ldr	r2, [pc, #364]	@ (80071dc <HAL_I2C_Master_Transmit_DMA+0x1f8>)
 800706e:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007074:	b29b      	uxth	r3, r3
 8007076:	2bff      	cmp	r3, #255	@ 0xff
 8007078:	d906      	bls.n	8007088 <HAL_I2C_Master_Transmit_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	22ff      	movs	r2, #255	@ 0xff
 800707e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8007080:	2380      	movs	r3, #128	@ 0x80
 8007082:	045b      	lsls	r3, r3, #17
 8007084:	617b      	str	r3, [r7, #20]
 8007086:	e007      	b.n	8007098 <HAL_I2C_Master_Transmit_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800708c:	b29a      	uxth	r2, r3
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8007092:	2380      	movs	r3, #128	@ 0x80
 8007094:	049b      	lsls	r3, r3, #18
 8007096:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800709c:	2b00      	cmp	r3, #0
 800709e:	d100      	bne.n	80070a2 <HAL_I2C_Master_Transmit_DMA+0xbe>
 80070a0:	e078      	b.n	8007194 <HAL_I2C_Master_Transmit_DMA+0x1b0>
    {
      if (hi2c->hdmatx != NULL)
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d023      	beq.n	80070f2 <HAL_I2C_Master_Transmit_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070ae:	4a4c      	ldr	r2, [pc, #304]	@ (80071e0 <HAL_I2C_Master_Transmit_DMA+0x1fc>)
 80070b0:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070b6:	4a4b      	ldr	r2, [pc, #300]	@ (80071e4 <HAL_I2C_Master_Transmit_DMA+0x200>)
 80070b8:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070be:	2200      	movs	r2, #0
 80070c0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070c6:	2200      	movs	r2, #0
 80070c8:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80070ce:	6879      	ldr	r1, [r7, #4]
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	3328      	adds	r3, #40	@ 0x28
 80070d6:	001a      	movs	r2, r3
                                         hi2c->XferSize);
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 80070dc:	2513      	movs	r5, #19
 80070de:	197c      	adds	r4, r7, r5
 80070e0:	f7ff fb5e 	bl	80067a0 <HAL_DMA_Start_IT>
 80070e4:	0003      	movs	r3, r0
 80070e6:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 80070e8:	197b      	adds	r3, r7, r5
 80070ea:	781b      	ldrb	r3, [r3, #0]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d13d      	bne.n	800716c <HAL_I2C_Master_Transmit_DMA+0x188>
 80070f0:	e013      	b.n	800711a <HAL_I2C_Master_Transmit_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	2241      	movs	r2, #65	@ 0x41
 80070f6:	2120      	movs	r1, #32
 80070f8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	2242      	movs	r2, #66	@ 0x42
 80070fe:	2100      	movs	r1, #0
 8007100:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007106:	2280      	movs	r2, #128	@ 0x80
 8007108:	431a      	orrs	r2, r3
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	2240      	movs	r2, #64	@ 0x40
 8007112:	2100      	movs	r1, #0
 8007114:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8007116:	2301      	movs	r3, #1
 8007118:	e059      	b.n	80071ce <HAL_I2C_Master_Transmit_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800711e:	b2da      	uxtb	r2, r3
 8007120:	697c      	ldr	r4, [r7, #20]
 8007122:	230a      	movs	r3, #10
 8007124:	18fb      	adds	r3, r7, r3
 8007126:	8819      	ldrh	r1, [r3, #0]
 8007128:	68f8      	ldr	r0, [r7, #12]
 800712a:	4b2f      	ldr	r3, [pc, #188]	@ (80071e8 <HAL_I2C_Master_Transmit_DMA+0x204>)
 800712c:	9300      	str	r3, [sp, #0]
 800712e:	0023      	movs	r3, r4
 8007130:	f001 fd0e 	bl	8008b50 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007138:	b29a      	uxth	r2, r3
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800713e:	1ad3      	subs	r3, r2, r3
 8007140:	b29a      	uxth	r2, r3
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	2240      	movs	r2, #64	@ 0x40
 800714a:	2100      	movs	r1, #0
 800714c:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	2110      	movs	r1, #16
 8007152:	0018      	movs	r0, r3
 8007154:	f001 fd36 	bl	8008bc4 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	681a      	ldr	r2, [r3, #0]
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	2180      	movs	r1, #128	@ 0x80
 8007164:	01c9      	lsls	r1, r1, #7
 8007166:	430a      	orrs	r2, r1
 8007168:	601a      	str	r2, [r3, #0]
 800716a:	e02d      	b.n	80071c8 <HAL_I2C_Master_Transmit_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	2241      	movs	r2, #65	@ 0x41
 8007170:	2120      	movs	r1, #32
 8007172:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	2242      	movs	r2, #66	@ 0x42
 8007178:	2100      	movs	r1, #0
 800717a:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007180:	2210      	movs	r2, #16
 8007182:	431a      	orrs	r2, r3
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	2240      	movs	r2, #64	@ 0x40
 800718c:	2100      	movs	r1, #0
 800718e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8007190:	2301      	movs	r3, #1
 8007192:	e01c      	b.n	80071ce <HAL_I2C_Master_Transmit_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	4a15      	ldr	r2, [pc, #84]	@ (80071ec <HAL_I2C_Master_Transmit_DMA+0x208>)
 8007198:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800719e:	b2da      	uxtb	r2, r3
 80071a0:	2380      	movs	r3, #128	@ 0x80
 80071a2:	049c      	lsls	r4, r3, #18
 80071a4:	230a      	movs	r3, #10
 80071a6:	18fb      	adds	r3, r7, r3
 80071a8:	8819      	ldrh	r1, [r3, #0]
 80071aa:	68f8      	ldr	r0, [r7, #12]
 80071ac:	4b0e      	ldr	r3, [pc, #56]	@ (80071e8 <HAL_I2C_Master_Transmit_DMA+0x204>)
 80071ae:	9300      	str	r3, [sp, #0]
 80071b0:	0023      	movs	r3, r4
 80071b2:	f001 fccd 	bl	8008b50 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	2240      	movs	r2, #64	@ 0x40
 80071ba:	2100      	movs	r1, #0
 80071bc:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	2101      	movs	r1, #1
 80071c2:	0018      	movs	r0, r3
 80071c4:	f001 fcfe 	bl	8008bc4 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 80071c8:	2300      	movs	r3, #0
 80071ca:	e000      	b.n	80071ce <HAL_I2C_Master_Transmit_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80071cc:	2302      	movs	r3, #2
  }
}
 80071ce:	0018      	movs	r0, r3
 80071d0:	46bd      	mov	sp, r7
 80071d2:	b006      	add	sp, #24
 80071d4:	bdb0      	pop	{r4, r5, r7, pc}
 80071d6:	46c0      	nop			@ (mov r8, r8)
 80071d8:	ffff0000 	.word	0xffff0000
 80071dc:	080079e9 	.word	0x080079e9
 80071e0:	080089a1 	.word	0x080089a1
 80071e4:	08008ae1 	.word	0x08008ae1
 80071e8:	80002000 	.word	0x80002000
 80071ec:	08007595 	.word	0x08007595

080071f0 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 80071f0:	b5b0      	push	{r4, r5, r7, lr}
 80071f2:	b088      	sub	sp, #32
 80071f4:	af02      	add	r7, sp, #8
 80071f6:	60f8      	str	r0, [r7, #12]
 80071f8:	0008      	movs	r0, r1
 80071fa:	607a      	str	r2, [r7, #4]
 80071fc:	0019      	movs	r1, r3
 80071fe:	230a      	movs	r3, #10
 8007200:	18fb      	adds	r3, r7, r3
 8007202:	1c02      	adds	r2, r0, #0
 8007204:	801a      	strh	r2, [r3, #0]
 8007206:	2308      	movs	r3, #8
 8007208:	18fb      	adds	r3, r7, r3
 800720a:	1c0a      	adds	r2, r1, #0
 800720c:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	2241      	movs	r2, #65	@ 0x41
 8007212:	5c9b      	ldrb	r3, [r3, r2]
 8007214:	b2db      	uxtb	r3, r3
 8007216:	2b20      	cmp	r3, #32
 8007218:	d000      	beq.n	800721c <HAL_I2C_Master_Receive_DMA+0x2c>
 800721a:	e0dd      	b.n	80073d8 <HAL_I2C_Master_Receive_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	699a      	ldr	r2, [r3, #24]
 8007222:	2380      	movs	r3, #128	@ 0x80
 8007224:	021b      	lsls	r3, r3, #8
 8007226:	401a      	ands	r2, r3
 8007228:	2380      	movs	r3, #128	@ 0x80
 800722a:	021b      	lsls	r3, r3, #8
 800722c:	429a      	cmp	r2, r3
 800722e:	d101      	bne.n	8007234 <HAL_I2C_Master_Receive_DMA+0x44>
    {
      return HAL_BUSY;
 8007230:	2302      	movs	r3, #2
 8007232:	e0d2      	b.n	80073da <HAL_I2C_Master_Receive_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	2240      	movs	r2, #64	@ 0x40
 8007238:	5c9b      	ldrb	r3, [r3, r2]
 800723a:	2b01      	cmp	r3, #1
 800723c:	d101      	bne.n	8007242 <HAL_I2C_Master_Receive_DMA+0x52>
 800723e:	2302      	movs	r3, #2
 8007240:	e0cb      	b.n	80073da <HAL_I2C_Master_Receive_DMA+0x1ea>
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	2240      	movs	r2, #64	@ 0x40
 8007246:	2101      	movs	r1, #1
 8007248:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	2241      	movs	r2, #65	@ 0x41
 800724e:	2122      	movs	r1, #34	@ 0x22
 8007250:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	2242      	movs	r2, #66	@ 0x42
 8007256:	2110      	movs	r1, #16
 8007258:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	2200      	movs	r2, #0
 800725e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	687a      	ldr	r2, [r7, #4]
 8007264:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	2208      	movs	r2, #8
 800726a:	18ba      	adds	r2, r7, r2
 800726c:	8812      	ldrh	r2, [r2, #0]
 800726e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	4a5c      	ldr	r2, [pc, #368]	@ (80073e4 <HAL_I2C_Master_Receive_DMA+0x1f4>)
 8007274:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	4a5b      	ldr	r2, [pc, #364]	@ (80073e8 <HAL_I2C_Master_Receive_DMA+0x1f8>)
 800727a:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007280:	b29b      	uxth	r3, r3
 8007282:	2bff      	cmp	r3, #255	@ 0xff
 8007284:	d906      	bls.n	8007294 <HAL_I2C_Master_Receive_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	22ff      	movs	r2, #255	@ 0xff
 800728a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800728c:	2380      	movs	r3, #128	@ 0x80
 800728e:	045b      	lsls	r3, r3, #17
 8007290:	617b      	str	r3, [r7, #20]
 8007292:	e007      	b.n	80072a4 <HAL_I2C_Master_Receive_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007298:	b29a      	uxth	r2, r3
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800729e:	2380      	movs	r3, #128	@ 0x80
 80072a0:	049b      	lsls	r3, r3, #18
 80072a2:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d100      	bne.n	80072ae <HAL_I2C_Master_Receive_DMA+0xbe>
 80072ac:	e078      	b.n	80073a0 <HAL_I2C_Master_Receive_DMA+0x1b0>
    {
      if (hi2c->hdmarx != NULL)
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d023      	beq.n	80072fe <HAL_I2C_Master_Receive_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072ba:	4a4c      	ldr	r2, [pc, #304]	@ (80073ec <HAL_I2C_Master_Receive_DMA+0x1fc>)
 80072bc:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072c2:	4a4b      	ldr	r2, [pc, #300]	@ (80073f0 <HAL_I2C_Master_Receive_DMA+0x200>)
 80072c4:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072ca:	2200      	movs	r2, #0
 80072cc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072d2:	2200      	movs	r2, #0
 80072d4:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	3324      	adds	r3, #36	@ 0x24
 80072e0:	0019      	movs	r1, r3
 80072e2:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 80072e8:	2513      	movs	r5, #19
 80072ea:	197c      	adds	r4, r7, r5
 80072ec:	f7ff fa58 	bl	80067a0 <HAL_DMA_Start_IT>
 80072f0:	0003      	movs	r3, r0
 80072f2:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 80072f4:	197b      	adds	r3, r7, r5
 80072f6:	781b      	ldrb	r3, [r3, #0]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d13d      	bne.n	8007378 <HAL_I2C_Master_Receive_DMA+0x188>
 80072fc:	e013      	b.n	8007326 <HAL_I2C_Master_Receive_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	2241      	movs	r2, #65	@ 0x41
 8007302:	2120      	movs	r1, #32
 8007304:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	2242      	movs	r2, #66	@ 0x42
 800730a:	2100      	movs	r1, #0
 800730c:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007312:	2280      	movs	r2, #128	@ 0x80
 8007314:	431a      	orrs	r2, r3
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	2240      	movs	r2, #64	@ 0x40
 800731e:	2100      	movs	r1, #0
 8007320:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8007322:	2301      	movs	r3, #1
 8007324:	e059      	b.n	80073da <HAL_I2C_Master_Receive_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800732a:	b2da      	uxtb	r2, r3
 800732c:	697c      	ldr	r4, [r7, #20]
 800732e:	230a      	movs	r3, #10
 8007330:	18fb      	adds	r3, r7, r3
 8007332:	8819      	ldrh	r1, [r3, #0]
 8007334:	68f8      	ldr	r0, [r7, #12]
 8007336:	4b2f      	ldr	r3, [pc, #188]	@ (80073f4 <HAL_I2C_Master_Receive_DMA+0x204>)
 8007338:	9300      	str	r3, [sp, #0]
 800733a:	0023      	movs	r3, r4
 800733c:	f001 fc08 	bl	8008b50 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007344:	b29a      	uxth	r2, r3
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800734a:	1ad3      	subs	r3, r2, r3
 800734c:	b29a      	uxth	r2, r3
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	2240      	movs	r2, #64	@ 0x40
 8007356:	2100      	movs	r1, #0
 8007358:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	2110      	movs	r1, #16
 800735e:	0018      	movs	r0, r3
 8007360:	f001 fc30 	bl	8008bc4 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	681a      	ldr	r2, [r3, #0]
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	2180      	movs	r1, #128	@ 0x80
 8007370:	0209      	lsls	r1, r1, #8
 8007372:	430a      	orrs	r2, r1
 8007374:	601a      	str	r2, [r3, #0]
 8007376:	e02d      	b.n	80073d4 <HAL_I2C_Master_Receive_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	2241      	movs	r2, #65	@ 0x41
 800737c:	2120      	movs	r1, #32
 800737e:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	2242      	movs	r2, #66	@ 0x42
 8007384:	2100      	movs	r1, #0
 8007386:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800738c:	2210      	movs	r2, #16
 800738e:	431a      	orrs	r2, r3
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	2240      	movs	r2, #64	@ 0x40
 8007398:	2100      	movs	r1, #0
 800739a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800739c:	2301      	movs	r3, #1
 800739e:	e01c      	b.n	80073da <HAL_I2C_Master_Receive_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	4a15      	ldr	r2, [pc, #84]	@ (80073f8 <HAL_I2C_Master_Receive_DMA+0x208>)
 80073a4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80073aa:	b2da      	uxtb	r2, r3
 80073ac:	2380      	movs	r3, #128	@ 0x80
 80073ae:	049c      	lsls	r4, r3, #18
 80073b0:	230a      	movs	r3, #10
 80073b2:	18fb      	adds	r3, r7, r3
 80073b4:	8819      	ldrh	r1, [r3, #0]
 80073b6:	68f8      	ldr	r0, [r7, #12]
 80073b8:	4b0e      	ldr	r3, [pc, #56]	@ (80073f4 <HAL_I2C_Master_Receive_DMA+0x204>)
 80073ba:	9300      	str	r3, [sp, #0]
 80073bc:	0023      	movs	r3, r4
 80073be:	f001 fbc7 	bl	8008b50 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	2240      	movs	r2, #64	@ 0x40
 80073c6:	2100      	movs	r1, #0
 80073c8:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	2101      	movs	r1, #1
 80073ce:	0018      	movs	r0, r3
 80073d0:	f001 fbf8 	bl	8008bc4 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 80073d4:	2300      	movs	r3, #0
 80073d6:	e000      	b.n	80073da <HAL_I2C_Master_Receive_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80073d8:	2302      	movs	r3, #2
  }
}
 80073da:	0018      	movs	r0, r3
 80073dc:	46bd      	mov	sp, r7
 80073de:	b006      	add	sp, #24
 80073e0:	bdb0      	pop	{r4, r5, r7, pc}
 80073e2:	46c0      	nop			@ (mov r8, r8)
 80073e4:	ffff0000 	.word	0xffff0000
 80073e8:	080079e9 	.word	0x080079e9
 80073ec:	08008a41 	.word	0x08008a41
 80073f0:	08008ae1 	.word	0x08008ae1
 80073f4:	80002400 	.word	0x80002400
 80073f8:	08007595 	.word	0x08007595

080073fc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b084      	sub	sp, #16
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	699b      	ldr	r3, [r3, #24]
 800740a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007418:	2b00      	cmp	r3, #0
 800741a:	d005      	beq.n	8007428 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007420:	68ba      	ldr	r2, [r7, #8]
 8007422:	68f9      	ldr	r1, [r7, #12]
 8007424:	6878      	ldr	r0, [r7, #4]
 8007426:	4798      	blx	r3
  }
}
 8007428:	46c0      	nop			@ (mov r8, r8)
 800742a:	46bd      	mov	sp, r7
 800742c:	b004      	add	sp, #16
 800742e:	bd80      	pop	{r7, pc}

08007430 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b086      	sub	sp, #24
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	699b      	ldr	r3, [r3, #24]
 800743e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8007448:	697a      	ldr	r2, [r7, #20]
 800744a:	2380      	movs	r3, #128	@ 0x80
 800744c:	005b      	lsls	r3, r3, #1
 800744e:	4013      	ands	r3, r2
 8007450:	d00e      	beq.n	8007470 <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8007452:	693b      	ldr	r3, [r7, #16]
 8007454:	2280      	movs	r2, #128	@ 0x80
 8007456:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8007458:	d00a      	beq.n	8007470 <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800745e:	2201      	movs	r2, #1
 8007460:	431a      	orrs	r2, r3
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	2280      	movs	r2, #128	@ 0x80
 800746c:	0052      	lsls	r2, r2, #1
 800746e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8007470:	697a      	ldr	r2, [r7, #20]
 8007472:	2380      	movs	r3, #128	@ 0x80
 8007474:	00db      	lsls	r3, r3, #3
 8007476:	4013      	ands	r3, r2
 8007478:	d00e      	beq.n	8007498 <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800747a:	693b      	ldr	r3, [r7, #16]
 800747c:	2280      	movs	r2, #128	@ 0x80
 800747e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8007480:	d00a      	beq.n	8007498 <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007486:	2208      	movs	r2, #8
 8007488:	431a      	orrs	r2, r3
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	2280      	movs	r2, #128	@ 0x80
 8007494:	00d2      	lsls	r2, r2, #3
 8007496:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8007498:	697a      	ldr	r2, [r7, #20]
 800749a:	2380      	movs	r3, #128	@ 0x80
 800749c:	009b      	lsls	r3, r3, #2
 800749e:	4013      	ands	r3, r2
 80074a0:	d00e      	beq.n	80074c0 <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80074a2:	693b      	ldr	r3, [r7, #16]
 80074a4:	2280      	movs	r2, #128	@ 0x80
 80074a6:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80074a8:	d00a      	beq.n	80074c0 <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074ae:	2202      	movs	r2, #2
 80074b0:	431a      	orrs	r2, r3
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	2280      	movs	r2, #128	@ 0x80
 80074bc:	0092      	lsls	r2, r2, #2
 80074be:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074c4:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	220b      	movs	r2, #11
 80074ca:	4013      	ands	r3, r2
 80074cc:	d005      	beq.n	80074da <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 80074ce:	68fa      	ldr	r2, [r7, #12]
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	0011      	movs	r1, r2
 80074d4:	0018      	movs	r0, r3
 80074d6:	f001 f915 	bl	8008704 <I2C_ITError>
  }
}
 80074da:	46c0      	nop			@ (mov r8, r8)
 80074dc:	46bd      	mov	sp, r7
 80074de:	b006      	add	sp, #24
 80074e0:	bd80      	pop	{r7, pc}

080074e2 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80074e2:	b580      	push	{r7, lr}
 80074e4:	b082      	sub	sp, #8
 80074e6:	af00      	add	r7, sp, #0
 80074e8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80074ea:	46c0      	nop			@ (mov r8, r8)
 80074ec:	46bd      	mov	sp, r7
 80074ee:	b002      	add	sp, #8
 80074f0:	bd80      	pop	{r7, pc}

080074f2 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80074f2:	b580      	push	{r7, lr}
 80074f4:	b082      	sub	sp, #8
 80074f6:	af00      	add	r7, sp, #0
 80074f8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80074fa:	46c0      	nop			@ (mov r8, r8)
 80074fc:	46bd      	mov	sp, r7
 80074fe:	b002      	add	sp, #8
 8007500:	bd80      	pop	{r7, pc}

08007502 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007502:	b580      	push	{r7, lr}
 8007504:	b082      	sub	sp, #8
 8007506:	af00      	add	r7, sp, #0
 8007508:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800750a:	46c0      	nop			@ (mov r8, r8)
 800750c:	46bd      	mov	sp, r7
 800750e:	b002      	add	sp, #8
 8007510:	bd80      	pop	{r7, pc}

08007512 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007512:	b580      	push	{r7, lr}
 8007514:	b082      	sub	sp, #8
 8007516:	af00      	add	r7, sp, #0
 8007518:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800751a:	46c0      	nop			@ (mov r8, r8)
 800751c:	46bd      	mov	sp, r7
 800751e:	b002      	add	sp, #8
 8007520:	bd80      	pop	{r7, pc}

08007522 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8007522:	b580      	push	{r7, lr}
 8007524:	b082      	sub	sp, #8
 8007526:	af00      	add	r7, sp, #0
 8007528:	6078      	str	r0, [r7, #4]
 800752a:	0008      	movs	r0, r1
 800752c:	0011      	movs	r1, r2
 800752e:	1cfb      	adds	r3, r7, #3
 8007530:	1c02      	adds	r2, r0, #0
 8007532:	701a      	strb	r2, [r3, #0]
 8007534:	003b      	movs	r3, r7
 8007536:	1c0a      	adds	r2, r1, #0
 8007538:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800753a:	46c0      	nop			@ (mov r8, r8)
 800753c:	46bd      	mov	sp, r7
 800753e:	b002      	add	sp, #8
 8007540:	bd80      	pop	{r7, pc}

08007542 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007542:	b580      	push	{r7, lr}
 8007544:	b082      	sub	sp, #8
 8007546:	af00      	add	r7, sp, #0
 8007548:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800754a:	46c0      	nop			@ (mov r8, r8)
 800754c:	46bd      	mov	sp, r7
 800754e:	b002      	add	sp, #8
 8007550:	bd80      	pop	{r7, pc}

08007552 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007552:	b580      	push	{r7, lr}
 8007554:	b082      	sub	sp, #8
 8007556:	af00      	add	r7, sp, #0
 8007558:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800755a:	46c0      	nop			@ (mov r8, r8)
 800755c:	46bd      	mov	sp, r7
 800755e:	b002      	add	sp, #8
 8007560:	bd80      	pop	{r7, pc}

08007562 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007562:	b580      	push	{r7, lr}
 8007564:	b082      	sub	sp, #8
 8007566:	af00      	add	r7, sp, #0
 8007568:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800756a:	46c0      	nop			@ (mov r8, r8)
 800756c:	46bd      	mov	sp, r7
 800756e:	b002      	add	sp, #8
 8007570:	bd80      	pop	{r7, pc}

08007572 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8007572:	b580      	push	{r7, lr}
 8007574:	b082      	sub	sp, #8
 8007576:	af00      	add	r7, sp, #0
 8007578:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800757a:	46c0      	nop			@ (mov r8, r8)
 800757c:	46bd      	mov	sp, r7
 800757e:	b002      	add	sp, #8
 8007580:	bd80      	pop	{r7, pc}

08007582 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007582:	b580      	push	{r7, lr}
 8007584:	b082      	sub	sp, #8
 8007586:	af00      	add	r7, sp, #0
 8007588:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800758a:	46c0      	nop			@ (mov r8, r8)
 800758c:	46bd      	mov	sp, r7
 800758e:	b002      	add	sp, #8
 8007590:	bd80      	pop	{r7, pc}
	...

08007594 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8007594:	b590      	push	{r4, r7, lr}
 8007596:	b089      	sub	sp, #36	@ 0x24
 8007598:	af02      	add	r7, sp, #8
 800759a:	60f8      	str	r0, [r7, #12]
 800759c:	60b9      	str	r1, [r7, #8]
 800759e:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	2240      	movs	r2, #64	@ 0x40
 80075a8:	5c9b      	ldrb	r3, [r3, r2]
 80075aa:	2b01      	cmp	r3, #1
 80075ac:	d101      	bne.n	80075b2 <I2C_Master_ISR_IT+0x1e>
 80075ae:	2302      	movs	r3, #2
 80075b0:	e113      	b.n	80077da <I2C_Master_ISR_IT+0x246>
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	2240      	movs	r2, #64	@ 0x40
 80075b6:	2101      	movs	r1, #1
 80075b8:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80075ba:	697b      	ldr	r3, [r7, #20]
 80075bc:	2210      	movs	r2, #16
 80075be:	4013      	ands	r3, r2
 80075c0:	d012      	beq.n	80075e8 <I2C_Master_ISR_IT+0x54>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2210      	movs	r2, #16
 80075c6:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80075c8:	d00e      	beq.n	80075e8 <I2C_Master_ISR_IT+0x54>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	2210      	movs	r2, #16
 80075d0:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075d6:	2204      	movs	r2, #4
 80075d8:	431a      	orrs	r2, r3
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	0018      	movs	r0, r3
 80075e2:	f001 f9ba 	bl	800895a <I2C_Flush_TXDR>
 80075e6:	e0e5      	b.n	80077b4 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80075e8:	697b      	ldr	r3, [r7, #20]
 80075ea:	2204      	movs	r2, #4
 80075ec:	4013      	ands	r3, r2
 80075ee:	d021      	beq.n	8007634 <I2C_Master_ISR_IT+0xa0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2204      	movs	r2, #4
 80075f4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80075f6:	d01d      	beq.n	8007634 <I2C_Master_ISR_IT+0xa0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80075f8:	697b      	ldr	r3, [r7, #20]
 80075fa:	2204      	movs	r2, #4
 80075fc:	4393      	bics	r3, r2
 80075fe:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800760a:	b2d2      	uxtb	r2, r2
 800760c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007612:	1c5a      	adds	r2, r3, #1
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800761c:	3b01      	subs	r3, #1
 800761e:	b29a      	uxth	r2, r3
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007628:	b29b      	uxth	r3, r3
 800762a:	3b01      	subs	r3, #1
 800762c:	b29a      	uxth	r2, r3
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007632:	e0bf      	b.n	80077b4 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007634:	697b      	ldr	r3, [r7, #20]
 8007636:	2202      	movs	r2, #2
 8007638:	4013      	ands	r3, r2
 800763a:	d01c      	beq.n	8007676 <I2C_Master_ISR_IT+0xe2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2202      	movs	r2, #2
 8007640:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007642:	d018      	beq.n	8007676 <I2C_Master_ISR_IT+0xe2>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007648:	781a      	ldrb	r2, [r3, #0]
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007654:	1c5a      	adds	r2, r3, #1
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800765e:	3b01      	subs	r3, #1
 8007660:	b29a      	uxth	r2, r3
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800766a:	b29b      	uxth	r3, r3
 800766c:	3b01      	subs	r3, #1
 800766e:	b29a      	uxth	r2, r3
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007674:	e09e      	b.n	80077b4 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8007676:	697b      	ldr	r3, [r7, #20]
 8007678:	2280      	movs	r2, #128	@ 0x80
 800767a:	4013      	ands	r3, r2
 800767c:	d100      	bne.n	8007680 <I2C_Master_ISR_IT+0xec>
 800767e:	e069      	b.n	8007754 <I2C_Master_ISR_IT+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2240      	movs	r2, #64	@ 0x40
 8007684:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8007686:	d065      	beq.n	8007754 <I2C_Master_ISR_IT+0x1c0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800768c:	b29b      	uxth	r3, r3
 800768e:	2b00      	cmp	r3, #0
 8007690:	d04a      	beq.n	8007728 <I2C_Master_ISR_IT+0x194>
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007696:	2b00      	cmp	r3, #0
 8007698:	d146      	bne.n	8007728 <I2C_Master_ISR_IT+0x194>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	685b      	ldr	r3, [r3, #4]
 80076a0:	b29a      	uxth	r2, r3
 80076a2:	2112      	movs	r1, #18
 80076a4:	187b      	adds	r3, r7, r1
 80076a6:	0592      	lsls	r2, r2, #22
 80076a8:	0d92      	lsrs	r2, r2, #22
 80076aa:	801a      	strh	r2, [r3, #0]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80076b0:	b29b      	uxth	r3, r3
 80076b2:	2bff      	cmp	r3, #255	@ 0xff
 80076b4:	d910      	bls.n	80076d8 <I2C_Master_ISR_IT+0x144>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	22ff      	movs	r2, #255	@ 0xff
 80076ba:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80076c0:	b2da      	uxtb	r2, r3
 80076c2:	2380      	movs	r3, #128	@ 0x80
 80076c4:	045c      	lsls	r4, r3, #17
 80076c6:	187b      	adds	r3, r7, r1
 80076c8:	8819      	ldrh	r1, [r3, #0]
 80076ca:	68f8      	ldr	r0, [r7, #12]
 80076cc:	2300      	movs	r3, #0
 80076ce:	9300      	str	r3, [sp, #0]
 80076d0:	0023      	movs	r3, r4
 80076d2:	f001 fa3d 	bl	8008b50 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80076d6:	e03c      	b.n	8007752 <I2C_Master_ISR_IT+0x1be>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80076dc:	b29a      	uxth	r2, r3
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076e6:	4a3f      	ldr	r2, [pc, #252]	@ (80077e4 <I2C_Master_ISR_IT+0x250>)
 80076e8:	4293      	cmp	r3, r2
 80076ea:	d00e      	beq.n	800770a <I2C_Master_ISR_IT+0x176>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80076f0:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 80076f6:	2312      	movs	r3, #18
 80076f8:	18fb      	adds	r3, r7, r3
 80076fa:	8819      	ldrh	r1, [r3, #0]
 80076fc:	68f8      	ldr	r0, [r7, #12]
 80076fe:	2300      	movs	r3, #0
 8007700:	9300      	str	r3, [sp, #0]
 8007702:	0023      	movs	r3, r4
 8007704:	f001 fa24 	bl	8008b50 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007708:	e023      	b.n	8007752 <I2C_Master_ISR_IT+0x1be>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800770e:	b2da      	uxtb	r2, r3
 8007710:	2380      	movs	r3, #128	@ 0x80
 8007712:	049c      	lsls	r4, r3, #18
 8007714:	2312      	movs	r3, #18
 8007716:	18fb      	adds	r3, r7, r3
 8007718:	8819      	ldrh	r1, [r3, #0]
 800771a:	68f8      	ldr	r0, [r7, #12]
 800771c:	2300      	movs	r3, #0
 800771e:	9300      	str	r3, [sp, #0]
 8007720:	0023      	movs	r3, r4
 8007722:	f001 fa15 	bl	8008b50 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007726:	e014      	b.n	8007752 <I2C_Master_ISR_IT+0x1be>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	685a      	ldr	r2, [r3, #4]
 800772e:	2380      	movs	r3, #128	@ 0x80
 8007730:	049b      	lsls	r3, r3, #18
 8007732:	401a      	ands	r2, r3
 8007734:	2380      	movs	r3, #128	@ 0x80
 8007736:	049b      	lsls	r3, r3, #18
 8007738:	429a      	cmp	r2, r3
 800773a:	d004      	beq.n	8007746 <I2C_Master_ISR_IT+0x1b2>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	0018      	movs	r0, r3
 8007740:	f000 fcf4 	bl	800812c <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007744:	e036      	b.n	80077b4 <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	2140      	movs	r1, #64	@ 0x40
 800774a:	0018      	movs	r0, r3
 800774c:	f000 ffda 	bl	8008704 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007750:	e030      	b.n	80077b4 <I2C_Master_ISR_IT+0x220>
 8007752:	e02f      	b.n	80077b4 <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8007754:	697b      	ldr	r3, [r7, #20]
 8007756:	2240      	movs	r2, #64	@ 0x40
 8007758:	4013      	ands	r3, r2
 800775a:	d02b      	beq.n	80077b4 <I2C_Master_ISR_IT+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2240      	movs	r2, #64	@ 0x40
 8007760:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8007762:	d027      	beq.n	80077b4 <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007768:	b29b      	uxth	r3, r3
 800776a:	2b00      	cmp	r3, #0
 800776c:	d11d      	bne.n	80077aa <I2C_Master_ISR_IT+0x216>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	685a      	ldr	r2, [r3, #4]
 8007774:	2380      	movs	r3, #128	@ 0x80
 8007776:	049b      	lsls	r3, r3, #18
 8007778:	401a      	ands	r2, r3
 800777a:	2380      	movs	r3, #128	@ 0x80
 800777c:	049b      	lsls	r3, r3, #18
 800777e:	429a      	cmp	r2, r3
 8007780:	d018      	beq.n	80077b4 <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007786:	4a17      	ldr	r2, [pc, #92]	@ (80077e4 <I2C_Master_ISR_IT+0x250>)
 8007788:	4293      	cmp	r3, r2
 800778a:	d109      	bne.n	80077a0 <I2C_Master_ISR_IT+0x20c>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	685a      	ldr	r2, [r3, #4]
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	2180      	movs	r1, #128	@ 0x80
 8007798:	01c9      	lsls	r1, r1, #7
 800779a:	430a      	orrs	r2, r1
 800779c:	605a      	str	r2, [r3, #4]
 800779e:	e009      	b.n	80077b4 <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	0018      	movs	r0, r3
 80077a4:	f000 fcc2 	bl	800812c <I2C_ITMasterSeqCplt>
 80077a8:	e004      	b.n	80077b4 <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	2140      	movs	r1, #64	@ 0x40
 80077ae:	0018      	movs	r0, r3
 80077b0:	f000 ffa8 	bl	8008704 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80077b4:	697b      	ldr	r3, [r7, #20]
 80077b6:	2220      	movs	r2, #32
 80077b8:	4013      	ands	r3, r2
 80077ba:	d009      	beq.n	80077d0 <I2C_Master_ISR_IT+0x23c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2220      	movs	r2, #32
 80077c0:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80077c2:	d005      	beq.n	80077d0 <I2C_Master_ISR_IT+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 80077c4:	697a      	ldr	r2, [r7, #20]
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	0011      	movs	r1, r2
 80077ca:	0018      	movs	r0, r3
 80077cc:	f000 fd54 	bl	8008278 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	2240      	movs	r2, #64	@ 0x40
 80077d4:	2100      	movs	r1, #0
 80077d6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80077d8:	2300      	movs	r3, #0
}
 80077da:	0018      	movs	r0, r3
 80077dc:	46bd      	mov	sp, r7
 80077de:	b007      	add	sp, #28
 80077e0:	bd90      	pop	{r4, r7, pc}
 80077e2:	46c0      	nop			@ (mov r8, r8)
 80077e4:	ffff0000 	.word	0xffff0000

080077e8 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b086      	sub	sp, #24
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	60f8      	str	r0, [r7, #12]
 80077f0:	60b9      	str	r1, [r7, #8]
 80077f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077f8:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80077fa:	68bb      	ldr	r3, [r7, #8]
 80077fc:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	2240      	movs	r2, #64	@ 0x40
 8007802:	5c9b      	ldrb	r3, [r3, r2]
 8007804:	2b01      	cmp	r3, #1
 8007806:	d101      	bne.n	800780c <I2C_Slave_ISR_IT+0x24>
 8007808:	2302      	movs	r3, #2
 800780a:	e0e6      	b.n	80079da <I2C_Slave_ISR_IT+0x1f2>
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	2240      	movs	r2, #64	@ 0x40
 8007810:	2101      	movs	r1, #1
 8007812:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007814:	693b      	ldr	r3, [r7, #16]
 8007816:	2220      	movs	r2, #32
 8007818:	4013      	ands	r3, r2
 800781a:	d009      	beq.n	8007830 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2220      	movs	r2, #32
 8007820:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007822:	d005      	beq.n	8007830 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8007824:	693a      	ldr	r2, [r7, #16]
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	0011      	movs	r1, r2
 800782a:	0018      	movs	r0, r3
 800782c:	f000 fdf2 	bl	8008414 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007830:	693b      	ldr	r3, [r7, #16]
 8007832:	2210      	movs	r2, #16
 8007834:	4013      	ands	r3, r2
 8007836:	d052      	beq.n	80078de <I2C_Slave_ISR_IT+0xf6>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2210      	movs	r2, #16
 800783c:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800783e:	d04e      	beq.n	80078de <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007844:	b29b      	uxth	r3, r3
 8007846:	2b00      	cmp	r3, #0
 8007848:	d12d      	bne.n	80078a6 <I2C_Slave_ISR_IT+0xbe>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	2241      	movs	r2, #65	@ 0x41
 800784e:	5c9b      	ldrb	r3, [r3, r2]
 8007850:	b2db      	uxtb	r3, r3
 8007852:	2b28      	cmp	r3, #40	@ 0x28
 8007854:	d10b      	bne.n	800786e <I2C_Slave_ISR_IT+0x86>
 8007856:	697a      	ldr	r2, [r7, #20]
 8007858:	2380      	movs	r3, #128	@ 0x80
 800785a:	049b      	lsls	r3, r3, #18
 800785c:	429a      	cmp	r2, r3
 800785e:	d106      	bne.n	800786e <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8007860:	693a      	ldr	r2, [r7, #16]
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	0011      	movs	r1, r2
 8007866:	0018      	movs	r0, r3
 8007868:	f000 fef4 	bl	8008654 <I2C_ITListenCplt>
 800786c:	e036      	b.n	80078dc <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	2241      	movs	r2, #65	@ 0x41
 8007872:	5c9b      	ldrb	r3, [r3, r2]
 8007874:	b2db      	uxtb	r3, r3
 8007876:	2b29      	cmp	r3, #41	@ 0x29
 8007878:	d110      	bne.n	800789c <I2C_Slave_ISR_IT+0xb4>
 800787a:	697b      	ldr	r3, [r7, #20]
 800787c:	4a59      	ldr	r2, [pc, #356]	@ (80079e4 <I2C_Slave_ISR_IT+0x1fc>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d00c      	beq.n	800789c <I2C_Slave_ISR_IT+0xb4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	2210      	movs	r2, #16
 8007888:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	0018      	movs	r0, r3
 800788e:	f001 f864 	bl	800895a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	0018      	movs	r0, r3
 8007896:	f000 fc8b 	bl	80081b0 <I2C_ITSlaveSeqCplt>
 800789a:	e01f      	b.n	80078dc <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	2210      	movs	r2, #16
 80078a2:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80078a4:	e091      	b.n	80079ca <I2C_Slave_ISR_IT+0x1e2>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	2210      	movs	r2, #16
 80078ac:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80078b2:	2204      	movs	r2, #4
 80078b4:	431a      	orrs	r2, r3
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80078ba:	697b      	ldr	r3, [r7, #20]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d005      	beq.n	80078cc <I2C_Slave_ISR_IT+0xe4>
 80078c0:	697a      	ldr	r2, [r7, #20]
 80078c2:	2380      	movs	r3, #128	@ 0x80
 80078c4:	045b      	lsls	r3, r3, #17
 80078c6:	429a      	cmp	r2, r3
 80078c8:	d000      	beq.n	80078cc <I2C_Slave_ISR_IT+0xe4>
 80078ca:	e07e      	b.n	80079ca <I2C_Slave_ISR_IT+0x1e2>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	0011      	movs	r1, r2
 80078d4:	0018      	movs	r0, r3
 80078d6:	f000 ff15 	bl	8008704 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80078da:	e076      	b.n	80079ca <I2C_Slave_ISR_IT+0x1e2>
 80078dc:	e075      	b.n	80079ca <I2C_Slave_ISR_IT+0x1e2>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80078de:	693b      	ldr	r3, [r7, #16]
 80078e0:	2204      	movs	r2, #4
 80078e2:	4013      	ands	r3, r2
 80078e4:	d02f      	beq.n	8007946 <I2C_Slave_ISR_IT+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2204      	movs	r2, #4
 80078ea:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80078ec:	d02b      	beq.n	8007946 <I2C_Slave_ISR_IT+0x15e>
  {
    if (hi2c->XferCount > 0U)
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80078f2:	b29b      	uxth	r3, r3
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d018      	beq.n	800792a <I2C_Slave_ISR_IT+0x142>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007902:	b2d2      	uxtb	r2, r2
 8007904:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800790a:	1c5a      	adds	r2, r3, #1
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007914:	3b01      	subs	r3, #1
 8007916:	b29a      	uxth	r2, r3
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007920:	b29b      	uxth	r3, r3
 8007922:	3b01      	subs	r3, #1
 8007924:	b29a      	uxth	r2, r3
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800792e:	b29b      	uxth	r3, r3
 8007930:	2b00      	cmp	r3, #0
 8007932:	d14c      	bne.n	80079ce <I2C_Slave_ISR_IT+0x1e6>
 8007934:	697b      	ldr	r3, [r7, #20]
 8007936:	4a2b      	ldr	r2, [pc, #172]	@ (80079e4 <I2C_Slave_ISR_IT+0x1fc>)
 8007938:	4293      	cmp	r3, r2
 800793a:	d048      	beq.n	80079ce <I2C_Slave_ISR_IT+0x1e6>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	0018      	movs	r0, r3
 8007940:	f000 fc36 	bl	80081b0 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8007944:	e043      	b.n	80079ce <I2C_Slave_ISR_IT+0x1e6>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007946:	693b      	ldr	r3, [r7, #16]
 8007948:	2208      	movs	r2, #8
 800794a:	4013      	ands	r3, r2
 800794c:	d00a      	beq.n	8007964 <I2C_Slave_ISR_IT+0x17c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2208      	movs	r2, #8
 8007952:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007954:	d006      	beq.n	8007964 <I2C_Slave_ISR_IT+0x17c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8007956:	693a      	ldr	r2, [r7, #16]
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	0011      	movs	r1, r2
 800795c:	0018      	movs	r0, r3
 800795e:	f000 fb41 	bl	8007fe4 <I2C_ITAddrCplt>
 8007962:	e035      	b.n	80079d0 <I2C_Slave_ISR_IT+0x1e8>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007964:	693b      	ldr	r3, [r7, #16]
 8007966:	2202      	movs	r2, #2
 8007968:	4013      	ands	r3, r2
 800796a:	d031      	beq.n	80079d0 <I2C_Slave_ISR_IT+0x1e8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2202      	movs	r2, #2
 8007970:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007972:	d02d      	beq.n	80079d0 <I2C_Slave_ISR_IT+0x1e8>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007978:	b29b      	uxth	r3, r3
 800797a:	2b00      	cmp	r3, #0
 800797c:	d018      	beq.n	80079b0 <I2C_Slave_ISR_IT+0x1c8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007982:	781a      	ldrb	r2, [r3, #0]
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800798e:	1c5a      	adds	r2, r3, #1
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007998:	b29b      	uxth	r3, r3
 800799a:	3b01      	subs	r3, #1
 800799c:	b29a      	uxth	r2, r3
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80079a6:	3b01      	subs	r3, #1
 80079a8:	b29a      	uxth	r2, r3
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	851a      	strh	r2, [r3, #40]	@ 0x28
 80079ae:	e00f      	b.n	80079d0 <I2C_Slave_ISR_IT+0x1e8>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80079b0:	697a      	ldr	r2, [r7, #20]
 80079b2:	2380      	movs	r3, #128	@ 0x80
 80079b4:	045b      	lsls	r3, r3, #17
 80079b6:	429a      	cmp	r2, r3
 80079b8:	d002      	beq.n	80079c0 <I2C_Slave_ISR_IT+0x1d8>
 80079ba:	697b      	ldr	r3, [r7, #20]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d107      	bne.n	80079d0 <I2C_Slave_ISR_IT+0x1e8>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	0018      	movs	r0, r3
 80079c4:	f000 fbf4 	bl	80081b0 <I2C_ITSlaveSeqCplt>
 80079c8:	e002      	b.n	80079d0 <I2C_Slave_ISR_IT+0x1e8>
    if (hi2c->XferCount == 0U)
 80079ca:	46c0      	nop			@ (mov r8, r8)
 80079cc:	e000      	b.n	80079d0 <I2C_Slave_ISR_IT+0x1e8>
    if ((hi2c->XferCount == 0U) && \
 80079ce:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	2240      	movs	r2, #64	@ 0x40
 80079d4:	2100      	movs	r1, #0
 80079d6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80079d8:	2300      	movs	r3, #0
}
 80079da:	0018      	movs	r0, r3
 80079dc:	46bd      	mov	sp, r7
 80079de:	b006      	add	sp, #24
 80079e0:	bd80      	pop	{r7, pc}
 80079e2:	46c0      	nop			@ (mov r8, r8)
 80079e4:	ffff0000 	.word	0xffff0000

080079e8 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 80079e8:	b590      	push	{r4, r7, lr}
 80079ea:	b089      	sub	sp, #36	@ 0x24
 80079ec:	af02      	add	r7, sp, #8
 80079ee:	60f8      	str	r0, [r7, #12]
 80079f0:	60b9      	str	r1, [r7, #8]
 80079f2:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	2240      	movs	r2, #64	@ 0x40
 80079f8:	5c9b      	ldrb	r3, [r3, r2]
 80079fa:	2b01      	cmp	r3, #1
 80079fc:	d101      	bne.n	8007a02 <I2C_Master_ISR_DMA+0x1a>
 80079fe:	2302      	movs	r3, #2
 8007a00:	e0e7      	b.n	8007bd2 <I2C_Master_ISR_DMA+0x1ea>
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	2240      	movs	r2, #64	@ 0x40
 8007a06:	2101      	movs	r1, #1
 8007a08:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8007a0a:	68bb      	ldr	r3, [r7, #8]
 8007a0c:	2210      	movs	r2, #16
 8007a0e:	4013      	ands	r3, r2
 8007a10:	d017      	beq.n	8007a42 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2210      	movs	r2, #16
 8007a16:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8007a18:	d013      	beq.n	8007a42 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	2210      	movs	r2, #16
 8007a20:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a26:	2204      	movs	r2, #4
 8007a28:	431a      	orrs	r2, r3
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	2120      	movs	r1, #32
 8007a32:	0018      	movs	r0, r3
 8007a34:	f001 f8c6 	bl	8008bc4 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	0018      	movs	r0, r3
 8007a3c:	f000 ff8d 	bl	800895a <I2C_Flush_TXDR>
 8007a40:	e0c2      	b.n	8007bc8 <I2C_Master_ISR_DMA+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8007a42:	68bb      	ldr	r3, [r7, #8]
 8007a44:	2280      	movs	r2, #128	@ 0x80
 8007a46:	4013      	ands	r3, r2
 8007a48:	d100      	bne.n	8007a4c <I2C_Master_ISR_DMA+0x64>
 8007a4a:	e07c      	b.n	8007b46 <I2C_Master_ISR_DMA+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2240      	movs	r2, #64	@ 0x40
 8007a50:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8007a52:	d100      	bne.n	8007a56 <I2C_Master_ISR_DMA+0x6e>
 8007a54:	e077      	b.n	8007b46 <I2C_Master_ISR_DMA+0x15e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	681a      	ldr	r2, [r3, #0]
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	2140      	movs	r1, #64	@ 0x40
 8007a62:	438a      	bics	r2, r1
 8007a64:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a6a:	b29b      	uxth	r3, r3
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d055      	beq.n	8007b1c <I2C_Master_ISR_DMA+0x134>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	685b      	ldr	r3, [r3, #4]
 8007a76:	b29a      	uxth	r2, r3
 8007a78:	2312      	movs	r3, #18
 8007a7a:	18fb      	adds	r3, r7, r3
 8007a7c:	0592      	lsls	r2, r2, #22
 8007a7e:	0d92      	lsrs	r2, r2, #22
 8007a80:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a86:	b29b      	uxth	r3, r3
 8007a88:	2bff      	cmp	r3, #255	@ 0xff
 8007a8a:	d906      	bls.n	8007a9a <I2C_Master_ISR_DMA+0xb2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	22ff      	movs	r2, #255	@ 0xff
 8007a90:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 8007a92:	2380      	movs	r3, #128	@ 0x80
 8007a94:	045b      	lsls	r3, r3, #17
 8007a96:	617b      	str	r3, [r7, #20]
 8007a98:	e010      	b.n	8007abc <I2C_Master_ISR_DMA+0xd4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a9e:	b29a      	uxth	r2, r3
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007aa8:	4a4c      	ldr	r2, [pc, #304]	@ (8007bdc <I2C_Master_ISR_DMA+0x1f4>)
 8007aaa:	4293      	cmp	r3, r2
 8007aac:	d003      	beq.n	8007ab6 <I2C_Master_ISR_DMA+0xce>
        {
          xfermode = hi2c->XferOptions;
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ab2:	617b      	str	r3, [r7, #20]
 8007ab4:	e002      	b.n	8007abc <I2C_Master_ISR_DMA+0xd4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8007ab6:	2380      	movs	r3, #128	@ 0x80
 8007ab8:	049b      	lsls	r3, r3, #18
 8007aba:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007ac0:	b2da      	uxtb	r2, r3
 8007ac2:	697c      	ldr	r4, [r7, #20]
 8007ac4:	2312      	movs	r3, #18
 8007ac6:	18fb      	adds	r3, r7, r3
 8007ac8:	8819      	ldrh	r1, [r3, #0]
 8007aca:	68f8      	ldr	r0, [r7, #12]
 8007acc:	2300      	movs	r3, #0
 8007ace:	9300      	str	r3, [sp, #0]
 8007ad0:	0023      	movs	r3, r4
 8007ad2:	f001 f83d 	bl	8008b50 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007ada:	b29a      	uxth	r2, r3
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007ae0:	1ad3      	subs	r3, r2, r3
 8007ae2:	b29a      	uxth	r2, r3
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	2241      	movs	r2, #65	@ 0x41
 8007aec:	5c9b      	ldrb	r3, [r3, r2]
 8007aee:	b2db      	uxtb	r3, r3
 8007af0:	2b22      	cmp	r3, #34	@ 0x22
 8007af2:	d109      	bne.n	8007b08 <I2C_Master_ISR_DMA+0x120>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	681a      	ldr	r2, [r3, #0]
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	2180      	movs	r1, #128	@ 0x80
 8007b00:	0209      	lsls	r1, r1, #8
 8007b02:	430a      	orrs	r2, r1
 8007b04:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8007b06:	e05f      	b.n	8007bc8 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	681a      	ldr	r2, [r3, #0]
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	2180      	movs	r1, #128	@ 0x80
 8007b14:	01c9      	lsls	r1, r1, #7
 8007b16:	430a      	orrs	r2, r1
 8007b18:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8007b1a:	e055      	b.n	8007bc8 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	685a      	ldr	r2, [r3, #4]
 8007b22:	2380      	movs	r3, #128	@ 0x80
 8007b24:	049b      	lsls	r3, r3, #18
 8007b26:	401a      	ands	r2, r3
 8007b28:	2380      	movs	r3, #128	@ 0x80
 8007b2a:	049b      	lsls	r3, r3, #18
 8007b2c:	429a      	cmp	r2, r3
 8007b2e:	d004      	beq.n	8007b3a <I2C_Master_ISR_DMA+0x152>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	0018      	movs	r0, r3
 8007b34:	f000 fafa 	bl	800812c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8007b38:	e046      	b.n	8007bc8 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	2140      	movs	r1, #64	@ 0x40
 8007b3e:	0018      	movs	r0, r3
 8007b40:	f000 fde0 	bl	8008704 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8007b44:	e040      	b.n	8007bc8 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8007b46:	68bb      	ldr	r3, [r7, #8]
 8007b48:	2240      	movs	r2, #64	@ 0x40
 8007b4a:	4013      	ands	r3, r2
 8007b4c:	d02c      	beq.n	8007ba8 <I2C_Master_ISR_DMA+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2240      	movs	r2, #64	@ 0x40
 8007b52:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8007b54:	d028      	beq.n	8007ba8 <I2C_Master_ISR_DMA+0x1c0>
  {
    if (hi2c->XferCount == 0U)
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b5a:	b29b      	uxth	r3, r3
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d11d      	bne.n	8007b9c <I2C_Master_ISR_DMA+0x1b4>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	685a      	ldr	r2, [r3, #4]
 8007b66:	2380      	movs	r3, #128	@ 0x80
 8007b68:	049b      	lsls	r3, r3, #18
 8007b6a:	401a      	ands	r2, r3
 8007b6c:	2380      	movs	r3, #128	@ 0x80
 8007b6e:	049b      	lsls	r3, r3, #18
 8007b70:	429a      	cmp	r2, r3
 8007b72:	d028      	beq.n	8007bc6 <I2C_Master_ISR_DMA+0x1de>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b78:	4a18      	ldr	r2, [pc, #96]	@ (8007bdc <I2C_Master_ISR_DMA+0x1f4>)
 8007b7a:	4293      	cmp	r3, r2
 8007b7c:	d109      	bne.n	8007b92 <I2C_Master_ISR_DMA+0x1aa>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	685a      	ldr	r2, [r3, #4]
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	2180      	movs	r1, #128	@ 0x80
 8007b8a:	01c9      	lsls	r1, r1, #7
 8007b8c:	430a      	orrs	r2, r1
 8007b8e:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8007b90:	e019      	b.n	8007bc6 <I2C_Master_ISR_DMA+0x1de>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	0018      	movs	r0, r3
 8007b96:	f000 fac9 	bl	800812c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8007b9a:	e014      	b.n	8007bc6 <I2C_Master_ISR_DMA+0x1de>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	2140      	movs	r1, #64	@ 0x40
 8007ba0:	0018      	movs	r0, r3
 8007ba2:	f000 fdaf 	bl	8008704 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8007ba6:	e00e      	b.n	8007bc6 <I2C_Master_ISR_DMA+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007ba8:	68bb      	ldr	r3, [r7, #8]
 8007baa:	2220      	movs	r2, #32
 8007bac:	4013      	ands	r3, r2
 8007bae:	d00b      	beq.n	8007bc8 <I2C_Master_ISR_DMA+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2220      	movs	r2, #32
 8007bb4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007bb6:	d007      	beq.n	8007bc8 <I2C_Master_ISR_DMA+0x1e0>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8007bb8:	68ba      	ldr	r2, [r7, #8]
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	0011      	movs	r1, r2
 8007bbe:	0018      	movs	r0, r3
 8007bc0:	f000 fb5a 	bl	8008278 <I2C_ITMasterCplt>
 8007bc4:	e000      	b.n	8007bc8 <I2C_Master_ISR_DMA+0x1e0>
    if (hi2c->XferCount == 0U)
 8007bc6:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	2240      	movs	r2, #64	@ 0x40
 8007bcc:	2100      	movs	r1, #0
 8007bce:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007bd0:	2300      	movs	r3, #0
}
 8007bd2:	0018      	movs	r0, r3
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	b007      	add	sp, #28
 8007bd8:	bd90      	pop	{r4, r7, pc}
 8007bda:	46c0      	nop			@ (mov r8, r8)
 8007bdc:	ffff0000 	.word	0xffff0000

08007be0 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8007be0:	b590      	push	{r4, r7, lr}
 8007be2:	b089      	sub	sp, #36	@ 0x24
 8007be4:	af02      	add	r7, sp, #8
 8007be6:	60f8      	str	r0, [r7, #12]
 8007be8:	60b9      	str	r1, [r7, #8]
 8007bea:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8007bec:	4b88      	ldr	r3, [pc, #544]	@ (8007e10 <I2C_Mem_ISR_DMA+0x230>)
 8007bee:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	2240      	movs	r2, #64	@ 0x40
 8007bf4:	5c9b      	ldrb	r3, [r3, r2]
 8007bf6:	2b01      	cmp	r3, #1
 8007bf8:	d101      	bne.n	8007bfe <I2C_Mem_ISR_DMA+0x1e>
 8007bfa:	2302      	movs	r3, #2
 8007bfc:	e104      	b.n	8007e08 <I2C_Mem_ISR_DMA+0x228>
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	2240      	movs	r2, #64	@ 0x40
 8007c02:	2101      	movs	r1, #1
 8007c04:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8007c06:	68bb      	ldr	r3, [r7, #8]
 8007c08:	2210      	movs	r2, #16
 8007c0a:	4013      	ands	r3, r2
 8007c0c:	d017      	beq.n	8007c3e <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	2210      	movs	r2, #16
 8007c12:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8007c14:	d013      	beq.n	8007c3e <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	2210      	movs	r2, #16
 8007c1c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c22:	2204      	movs	r2, #4
 8007c24:	431a      	orrs	r2, r3
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	2120      	movs	r1, #32
 8007c2e:	0018      	movs	r0, r3
 8007c30:	f000 ffc8 	bl	8008bc4 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	0018      	movs	r0, r3
 8007c38:	f000 fe8f 	bl	800895a <I2C_Flush_TXDR>
 8007c3c:	e0df      	b.n	8007dfe <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007c3e:	68bb      	ldr	r3, [r7, #8]
 8007c40:	2202      	movs	r2, #2
 8007c42:	4013      	ands	r3, r2
 8007c44:	d00d      	beq.n	8007c62 <I2C_Mem_ISR_DMA+0x82>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2202      	movs	r2, #2
 8007c4a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007c4c:	d009      	beq.n	8007c62 <I2C_Mem_ISR_DMA+0x82>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	68fa      	ldr	r2, [r7, #12]
 8007c54:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8007c56:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	2201      	movs	r2, #1
 8007c5c:	4252      	negs	r2, r2
 8007c5e:	651a      	str	r2, [r3, #80]	@ 0x50
 8007c60:	e0cd      	b.n	8007dfe <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8007c62:	68bb      	ldr	r3, [r7, #8]
 8007c64:	2280      	movs	r2, #128	@ 0x80
 8007c66:	4013      	ands	r3, r2
 8007c68:	d05e      	beq.n	8007d28 <I2C_Mem_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2240      	movs	r2, #64	@ 0x40
 8007c6e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8007c70:	d05a      	beq.n	8007d28 <I2C_Mem_ISR_DMA+0x148>
  {
    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	2110      	movs	r1, #16
 8007c76:	0018      	movs	r0, r3
 8007c78:	f000 ffa4 	bl	8008bc4 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007c80:	b29b      	uxth	r3, r3
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d04a      	beq.n	8007d1c <I2C_Mem_ISR_DMA+0x13c>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007c8a:	b29b      	uxth	r3, r3
 8007c8c:	2bff      	cmp	r3, #255	@ 0xff
 8007c8e:	d910      	bls.n	8007cb2 <I2C_Mem_ISR_DMA+0xd2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	22ff      	movs	r2, #255	@ 0xff
 8007c94:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c9a:	b299      	uxth	r1, r3
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007ca0:	b2da      	uxtb	r2, r3
 8007ca2:	2380      	movs	r3, #128	@ 0x80
 8007ca4:	045b      	lsls	r3, r3, #17
 8007ca6:	68f8      	ldr	r0, [r7, #12]
 8007ca8:	2400      	movs	r4, #0
 8007caa:	9400      	str	r4, [sp, #0]
 8007cac:	f000 ff50 	bl	8008b50 <I2C_TransferConfig>
 8007cb0:	e011      	b.n	8007cd6 <I2C_Mem_ISR_DMA+0xf6>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007cb6:	b29a      	uxth	r2, r3
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007cc0:	b299      	uxth	r1, r3
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007cc6:	b2da      	uxtb	r2, r3
 8007cc8:	2380      	movs	r3, #128	@ 0x80
 8007cca:	049b      	lsls	r3, r3, #18
 8007ccc:	68f8      	ldr	r0, [r7, #12]
 8007cce:	2400      	movs	r4, #0
 8007cd0:	9400      	str	r4, [sp, #0]
 8007cd2:	f000 ff3d 	bl	8008b50 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007cda:	b29a      	uxth	r2, r3
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007ce0:	1ad3      	subs	r3, r2, r3
 8007ce2:	b29a      	uxth	r2, r3
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	2241      	movs	r2, #65	@ 0x41
 8007cec:	5c9b      	ldrb	r3, [r3, r2]
 8007cee:	b2db      	uxtb	r3, r3
 8007cf0:	2b22      	cmp	r3, #34	@ 0x22
 8007cf2:	d109      	bne.n	8007d08 <I2C_Mem_ISR_DMA+0x128>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	681a      	ldr	r2, [r3, #0]
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	2180      	movs	r1, #128	@ 0x80
 8007d00:	0209      	lsls	r1, r1, #8
 8007d02:	430a      	orrs	r2, r1
 8007d04:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8007d06:	e07a      	b.n	8007dfe <I2C_Mem_ISR_DMA+0x21e>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	681a      	ldr	r2, [r3, #0]
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	2180      	movs	r1, #128	@ 0x80
 8007d14:	01c9      	lsls	r1, r1, #7
 8007d16:	430a      	orrs	r2, r1
 8007d18:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8007d1a:	e070      	b.n	8007dfe <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	2140      	movs	r1, #64	@ 0x40
 8007d20:	0018      	movs	r0, r3
 8007d22:	f000 fcef 	bl	8008704 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8007d26:	e06a      	b.n	8007dfe <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8007d28:	68bb      	ldr	r3, [r7, #8]
 8007d2a:	2240      	movs	r2, #64	@ 0x40
 8007d2c:	4013      	ands	r3, r2
 8007d2e:	d058      	beq.n	8007de2 <I2C_Mem_ISR_DMA+0x202>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2240      	movs	r2, #64	@ 0x40
 8007d34:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8007d36:	d054      	beq.n	8007de2 <I2C_Mem_ISR_DMA+0x202>
  {
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	2241      	movs	r2, #65	@ 0x41
 8007d3c:	5c9b      	ldrb	r3, [r3, r2]
 8007d3e:	b2db      	uxtb	r3, r3
 8007d40:	2b22      	cmp	r3, #34	@ 0x22
 8007d42:	d101      	bne.n	8007d48 <I2C_Mem_ISR_DMA+0x168>
    {
      direction = I2C_GENERATE_START_READ;
 8007d44:	4b33      	ldr	r3, [pc, #204]	@ (8007e14 <I2C_Mem_ISR_DMA+0x234>)
 8007d46:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007d4c:	b29b      	uxth	r3, r3
 8007d4e:	2bff      	cmp	r3, #255	@ 0xff
 8007d50:	d911      	bls.n	8007d76 <I2C_Mem_ISR_DMA+0x196>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	22ff      	movs	r2, #255	@ 0xff
 8007d56:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007d5c:	b299      	uxth	r1, r3
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007d62:	b2da      	uxtb	r2, r3
 8007d64:	2380      	movs	r3, #128	@ 0x80
 8007d66:	045c      	lsls	r4, r3, #17
 8007d68:	68f8      	ldr	r0, [r7, #12]
 8007d6a:	697b      	ldr	r3, [r7, #20]
 8007d6c:	9300      	str	r3, [sp, #0]
 8007d6e:	0023      	movs	r3, r4
 8007d70:	f000 feee 	bl	8008b50 <I2C_TransferConfig>
 8007d74:	e012      	b.n	8007d9c <I2C_Mem_ISR_DMA+0x1bc>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007d7a:	b29a      	uxth	r2, r3
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007d84:	b299      	uxth	r1, r3
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007d8a:	b2da      	uxtb	r2, r3
 8007d8c:	2380      	movs	r3, #128	@ 0x80
 8007d8e:	049c      	lsls	r4, r3, #18
 8007d90:	68f8      	ldr	r0, [r7, #12]
 8007d92:	697b      	ldr	r3, [r7, #20]
 8007d94:	9300      	str	r3, [sp, #0]
 8007d96:	0023      	movs	r3, r4
 8007d98:	f000 feda 	bl	8008b50 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007da0:	b29a      	uxth	r2, r3
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007da6:	1ad3      	subs	r3, r2, r3
 8007da8:	b29a      	uxth	r2, r3
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	2241      	movs	r2, #65	@ 0x41
 8007db2:	5c9b      	ldrb	r3, [r3, r2]
 8007db4:	b2db      	uxtb	r3, r3
 8007db6:	2b22      	cmp	r3, #34	@ 0x22
 8007db8:	d109      	bne.n	8007dce <I2C_Mem_ISR_DMA+0x1ee>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	681a      	ldr	r2, [r3, #0]
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	2180      	movs	r1, #128	@ 0x80
 8007dc6:	0209      	lsls	r1, r1, #8
 8007dc8:	430a      	orrs	r2, r1
 8007dca:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007dcc:	e017      	b.n	8007dfe <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	681a      	ldr	r2, [r3, #0]
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	2180      	movs	r1, #128	@ 0x80
 8007dda:	01c9      	lsls	r1, r1, #7
 8007ddc:	430a      	orrs	r2, r1
 8007dde:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007de0:	e00d      	b.n	8007dfe <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007de2:	68bb      	ldr	r3, [r7, #8]
 8007de4:	2220      	movs	r2, #32
 8007de6:	4013      	ands	r3, r2
 8007de8:	d009      	beq.n	8007dfe <I2C_Mem_ISR_DMA+0x21e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	2220      	movs	r2, #32
 8007dee:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007df0:	d005      	beq.n	8007dfe <I2C_Mem_ISR_DMA+0x21e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8007df2:	68ba      	ldr	r2, [r7, #8]
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	0011      	movs	r1, r2
 8007df8:	0018      	movs	r0, r3
 8007dfa:	f000 fa3d 	bl	8008278 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	2240      	movs	r2, #64	@ 0x40
 8007e02:	2100      	movs	r1, #0
 8007e04:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007e06:	2300      	movs	r3, #0
}
 8007e08:	0018      	movs	r0, r3
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	b007      	add	sp, #28
 8007e0e:	bd90      	pop	{r4, r7, pc}
 8007e10:	80002000 	.word	0x80002000
 8007e14:	80002400 	.word	0x80002400

08007e18 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b088      	sub	sp, #32
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	60f8      	str	r0, [r7, #12]
 8007e20:	60b9      	str	r1, [r7, #8]
 8007e22:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e28:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	2240      	movs	r2, #64	@ 0x40
 8007e32:	5c9b      	ldrb	r3, [r3, r2]
 8007e34:	2b01      	cmp	r3, #1
 8007e36:	d101      	bne.n	8007e3c <I2C_Slave_ISR_DMA+0x24>
 8007e38:	2302      	movs	r3, #2
 8007e3a:	e0cd      	b.n	8007fd8 <I2C_Slave_ISR_DMA+0x1c0>
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	2240      	movs	r2, #64	@ 0x40
 8007e40:	2101      	movs	r1, #1
 8007e42:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007e44:	68bb      	ldr	r3, [r7, #8]
 8007e46:	2220      	movs	r2, #32
 8007e48:	4013      	ands	r3, r2
 8007e4a:	d009      	beq.n	8007e60 <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2220      	movs	r2, #32
 8007e50:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007e52:	d005      	beq.n	8007e60 <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8007e54:	68ba      	ldr	r2, [r7, #8]
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	0011      	movs	r1, r2
 8007e5a:	0018      	movs	r0, r3
 8007e5c:	f000 fada 	bl	8008414 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8007e60:	68bb      	ldr	r3, [r7, #8]
 8007e62:	2210      	movs	r2, #16
 8007e64:	4013      	ands	r3, r2
 8007e66:	d100      	bne.n	8007e6a <I2C_Slave_ISR_DMA+0x52>
 8007e68:	e0a3      	b.n	8007fb2 <I2C_Slave_ISR_DMA+0x19a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	2210      	movs	r2, #16
 8007e6e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8007e70:	d100      	bne.n	8007e74 <I2C_Slave_ISR_DMA+0x5c>
 8007e72:	e09e      	b.n	8007fb2 <I2C_Slave_ISR_DMA+0x19a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8007e74:	687a      	ldr	r2, [r7, #4]
 8007e76:	2380      	movs	r3, #128	@ 0x80
 8007e78:	01db      	lsls	r3, r3, #7
 8007e7a:	4013      	ands	r3, r2
 8007e7c:	d105      	bne.n	8007e8a <I2C_Slave_ISR_DMA+0x72>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8007e7e:	687a      	ldr	r2, [r7, #4]
 8007e80:	2380      	movs	r3, #128	@ 0x80
 8007e82:	021b      	lsls	r3, r3, #8
 8007e84:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8007e86:	d100      	bne.n	8007e8a <I2C_Slave_ISR_DMA+0x72>
 8007e88:	e08c      	b.n	8007fa4 <I2C_Slave_ISR_DMA+0x18c>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d00c      	beq.n	8007eac <I2C_Slave_ISR_DMA+0x94>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8007e92:	687a      	ldr	r2, [r7, #4]
 8007e94:	2380      	movs	r3, #128	@ 0x80
 8007e96:	021b      	lsls	r3, r3, #8
 8007e98:	4013      	ands	r3, r2
 8007e9a:	d007      	beq.n	8007eac <I2C_Slave_ISR_DMA+0x94>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	685b      	ldr	r3, [r3, #4]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d101      	bne.n	8007eac <I2C_Slave_ISR_DMA+0x94>
          {
            treatdmanack = 1U;
 8007ea8:	2301      	movs	r3, #1
 8007eaa:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d00c      	beq.n	8007ece <I2C_Slave_ISR_DMA+0xb6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8007eb4:	687a      	ldr	r2, [r7, #4]
 8007eb6:	2380      	movs	r3, #128	@ 0x80
 8007eb8:	01db      	lsls	r3, r3, #7
 8007eba:	4013      	ands	r3, r2
 8007ebc:	d007      	beq.n	8007ece <I2C_Slave_ISR_DMA+0xb6>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	685b      	ldr	r3, [r3, #4]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d101      	bne.n	8007ece <I2C_Slave_ISR_DMA+0xb6>
          {
            treatdmanack = 1U;
 8007eca:	2301      	movs	r3, #1
 8007ecc:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8007ece:	69fb      	ldr	r3, [r7, #28]
 8007ed0:	2b01      	cmp	r3, #1
 8007ed2:	d12d      	bne.n	8007f30 <I2C_Slave_ISR_DMA+0x118>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	2241      	movs	r2, #65	@ 0x41
 8007ed8:	5c9b      	ldrb	r3, [r3, r2]
 8007eda:	b2db      	uxtb	r3, r3
 8007edc:	2b28      	cmp	r3, #40	@ 0x28
 8007ede:	d10b      	bne.n	8007ef8 <I2C_Slave_ISR_DMA+0xe0>
 8007ee0:	69ba      	ldr	r2, [r7, #24]
 8007ee2:	2380      	movs	r3, #128	@ 0x80
 8007ee4:	049b      	lsls	r3, r3, #18
 8007ee6:	429a      	cmp	r2, r3
 8007ee8:	d106      	bne.n	8007ef8 <I2C_Slave_ISR_DMA+0xe0>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8007eea:	68ba      	ldr	r2, [r7, #8]
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	0011      	movs	r1, r2
 8007ef0:	0018      	movs	r0, r3
 8007ef2:	f000 fbaf 	bl	8008654 <I2C_ITListenCplt>
 8007ef6:	e054      	b.n	8007fa2 <I2C_Slave_ISR_DMA+0x18a>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	2241      	movs	r2, #65	@ 0x41
 8007efc:	5c9b      	ldrb	r3, [r3, r2]
 8007efe:	b2db      	uxtb	r3, r3
 8007f00:	2b29      	cmp	r3, #41	@ 0x29
 8007f02:	d110      	bne.n	8007f26 <I2C_Slave_ISR_DMA+0x10e>
 8007f04:	69bb      	ldr	r3, [r7, #24]
 8007f06:	4a36      	ldr	r2, [pc, #216]	@ (8007fe0 <I2C_Slave_ISR_DMA+0x1c8>)
 8007f08:	4293      	cmp	r3, r2
 8007f0a:	d00c      	beq.n	8007f26 <I2C_Slave_ISR_DMA+0x10e>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	2210      	movs	r2, #16
 8007f12:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	0018      	movs	r0, r3
 8007f18:	f000 fd1f 	bl	800895a <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	0018      	movs	r0, r3
 8007f20:	f000 f946 	bl	80081b0 <I2C_ITSlaveSeqCplt>
 8007f24:	e03d      	b.n	8007fa2 <I2C_Slave_ISR_DMA+0x18a>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	2210      	movs	r2, #16
 8007f2c:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8007f2e:	e03e      	b.n	8007fae <I2C_Slave_ISR_DMA+0x196>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	2210      	movs	r2, #16
 8007f36:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f3c:	2204      	movs	r2, #4
 8007f3e:	431a      	orrs	r2, r3
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8007f44:	2317      	movs	r3, #23
 8007f46:	18fb      	adds	r3, r7, r3
 8007f48:	68fa      	ldr	r2, [r7, #12]
 8007f4a:	2141      	movs	r1, #65	@ 0x41
 8007f4c:	5c52      	ldrb	r2, [r2, r1]
 8007f4e:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8007f50:	69bb      	ldr	r3, [r7, #24]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d004      	beq.n	8007f60 <I2C_Slave_ISR_DMA+0x148>
 8007f56:	69ba      	ldr	r2, [r7, #24]
 8007f58:	2380      	movs	r3, #128	@ 0x80
 8007f5a:	045b      	lsls	r3, r3, #17
 8007f5c:	429a      	cmp	r2, r3
 8007f5e:	d126      	bne.n	8007fae <I2C_Slave_ISR_DMA+0x196>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007f60:	2217      	movs	r2, #23
 8007f62:	18bb      	adds	r3, r7, r2
 8007f64:	781b      	ldrb	r3, [r3, #0]
 8007f66:	2b21      	cmp	r3, #33	@ 0x21
 8007f68:	d003      	beq.n	8007f72 <I2C_Slave_ISR_DMA+0x15a>
 8007f6a:	18bb      	adds	r3, r7, r2
 8007f6c:	781b      	ldrb	r3, [r3, #0]
 8007f6e:	2b29      	cmp	r3, #41	@ 0x29
 8007f70:	d103      	bne.n	8007f7a <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	2221      	movs	r2, #33	@ 0x21
 8007f76:	631a      	str	r2, [r3, #48]	@ 0x30
 8007f78:	e00b      	b.n	8007f92 <I2C_Slave_ISR_DMA+0x17a>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007f7a:	2217      	movs	r2, #23
 8007f7c:	18bb      	adds	r3, r7, r2
 8007f7e:	781b      	ldrb	r3, [r3, #0]
 8007f80:	2b22      	cmp	r3, #34	@ 0x22
 8007f82:	d003      	beq.n	8007f8c <I2C_Slave_ISR_DMA+0x174>
 8007f84:	18bb      	adds	r3, r7, r2
 8007f86:	781b      	ldrb	r3, [r3, #0]
 8007f88:	2b2a      	cmp	r3, #42	@ 0x2a
 8007f8a:	d102      	bne.n	8007f92 <I2C_Slave_ISR_DMA+0x17a>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	2222      	movs	r2, #34	@ 0x22
 8007f90:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	0011      	movs	r1, r2
 8007f9a:	0018      	movs	r0, r3
 8007f9c:	f000 fbb2 	bl	8008704 <I2C_ITError>
      if (treatdmanack == 1U)
 8007fa0:	e005      	b.n	8007fae <I2C_Slave_ISR_DMA+0x196>
 8007fa2:	e004      	b.n	8007fae <I2C_Slave_ISR_DMA+0x196>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	2210      	movs	r2, #16
 8007faa:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8007fac:	e00f      	b.n	8007fce <I2C_Slave_ISR_DMA+0x1b6>
      if (treatdmanack == 1U)
 8007fae:	46c0      	nop			@ (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8007fb0:	e00d      	b.n	8007fce <I2C_Slave_ISR_DMA+0x1b6>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007fb2:	68bb      	ldr	r3, [r7, #8]
 8007fb4:	2208      	movs	r2, #8
 8007fb6:	4013      	ands	r3, r2
 8007fb8:	d009      	beq.n	8007fce <I2C_Slave_ISR_DMA+0x1b6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	2208      	movs	r2, #8
 8007fbe:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007fc0:	d005      	beq.n	8007fce <I2C_Slave_ISR_DMA+0x1b6>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8007fc2:	68ba      	ldr	r2, [r7, #8]
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	0011      	movs	r1, r2
 8007fc8:	0018      	movs	r0, r3
 8007fca:	f000 f80b 	bl	8007fe4 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	2240      	movs	r2, #64	@ 0x40
 8007fd2:	2100      	movs	r1, #0
 8007fd4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007fd6:	2300      	movs	r3, #0
}
 8007fd8:	0018      	movs	r0, r3
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	b008      	add	sp, #32
 8007fde:	bd80      	pop	{r7, pc}
 8007fe0:	ffff0000 	.word	0xffff0000

08007fe4 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007fe4:	b5b0      	push	{r4, r5, r7, lr}
 8007fe6:	b084      	sub	sp, #16
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
 8007fec:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	2241      	movs	r2, #65	@ 0x41
 8007ff2:	5c9b      	ldrb	r3, [r3, r2]
 8007ff4:	b2db      	uxtb	r3, r3
 8007ff6:	001a      	movs	r2, r3
 8007ff8:	2328      	movs	r3, #40	@ 0x28
 8007ffa:	4013      	ands	r3, r2
 8007ffc:	2b28      	cmp	r3, #40	@ 0x28
 8007ffe:	d000      	beq.n	8008002 <I2C_ITAddrCplt+0x1e>
 8008000:	e088      	b.n	8008114 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	699b      	ldr	r3, [r3, #24]
 8008008:	0c1b      	lsrs	r3, r3, #16
 800800a:	b2da      	uxtb	r2, r3
 800800c:	250f      	movs	r5, #15
 800800e:	197b      	adds	r3, r7, r5
 8008010:	2101      	movs	r1, #1
 8008012:	400a      	ands	r2, r1
 8008014:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	699b      	ldr	r3, [r3, #24]
 800801c:	0c1b      	lsrs	r3, r3, #16
 800801e:	b29a      	uxth	r2, r3
 8008020:	200c      	movs	r0, #12
 8008022:	183b      	adds	r3, r7, r0
 8008024:	21fe      	movs	r1, #254	@ 0xfe
 8008026:	400a      	ands	r2, r1
 8008028:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	689b      	ldr	r3, [r3, #8]
 8008030:	b29a      	uxth	r2, r3
 8008032:	240a      	movs	r4, #10
 8008034:	193b      	adds	r3, r7, r4
 8008036:	0592      	lsls	r2, r2, #22
 8008038:	0d92      	lsrs	r2, r2, #22
 800803a:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	68db      	ldr	r3, [r3, #12]
 8008042:	b29a      	uxth	r2, r3
 8008044:	2308      	movs	r3, #8
 8008046:	18fb      	adds	r3, r7, r3
 8008048:	21fe      	movs	r1, #254	@ 0xfe
 800804a:	400a      	ands	r2, r1
 800804c:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	68db      	ldr	r3, [r3, #12]
 8008052:	2b02      	cmp	r3, #2
 8008054:	d148      	bne.n	80080e8 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8008056:	0021      	movs	r1, r4
 8008058:	187b      	adds	r3, r7, r1
 800805a:	881b      	ldrh	r3, [r3, #0]
 800805c:	09db      	lsrs	r3, r3, #7
 800805e:	b29a      	uxth	r2, r3
 8008060:	183b      	adds	r3, r7, r0
 8008062:	881b      	ldrh	r3, [r3, #0]
 8008064:	4053      	eors	r3, r2
 8008066:	b29b      	uxth	r3, r3
 8008068:	001a      	movs	r2, r3
 800806a:	2306      	movs	r3, #6
 800806c:	4013      	ands	r3, r2
 800806e:	d120      	bne.n	80080b2 <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8008070:	183b      	adds	r3, r7, r0
 8008072:	187a      	adds	r2, r7, r1
 8008074:	8812      	ldrh	r2, [r2, #0]
 8008076:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800807c:	1c5a      	adds	r2, r3, #1
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008086:	2b02      	cmp	r3, #2
 8008088:	d14c      	bne.n	8008124 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	2200      	movs	r2, #0
 800808e:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	2208      	movs	r2, #8
 8008096:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2240      	movs	r2, #64	@ 0x40
 800809c:	2100      	movs	r1, #0
 800809e:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80080a0:	183b      	adds	r3, r7, r0
 80080a2:	881a      	ldrh	r2, [r3, #0]
 80080a4:	197b      	adds	r3, r7, r5
 80080a6:	7819      	ldrb	r1, [r3, #0]
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	0018      	movs	r0, r3
 80080ac:	f7ff fa39 	bl	8007522 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80080b0:	e038      	b.n	8008124 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 80080b2:	240c      	movs	r4, #12
 80080b4:	193b      	adds	r3, r7, r4
 80080b6:	2208      	movs	r2, #8
 80080b8:	18ba      	adds	r2, r7, r2
 80080ba:	8812      	ldrh	r2, [r2, #0]
 80080bc:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80080be:	2380      	movs	r3, #128	@ 0x80
 80080c0:	021a      	lsls	r2, r3, #8
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	0011      	movs	r1, r2
 80080c6:	0018      	movs	r0, r3
 80080c8:	f000 fe0a 	bl	8008ce0 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2240      	movs	r2, #64	@ 0x40
 80080d0:	2100      	movs	r1, #0
 80080d2:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80080d4:	193b      	adds	r3, r7, r4
 80080d6:	881a      	ldrh	r2, [r3, #0]
 80080d8:	230f      	movs	r3, #15
 80080da:	18fb      	adds	r3, r7, r3
 80080dc:	7819      	ldrb	r1, [r3, #0]
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	0018      	movs	r0, r3
 80080e2:	f7ff fa1e 	bl	8007522 <HAL_I2C_AddrCallback>
}
 80080e6:	e01d      	b.n	8008124 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80080e8:	2380      	movs	r3, #128	@ 0x80
 80080ea:	021a      	lsls	r2, r3, #8
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	0011      	movs	r1, r2
 80080f0:	0018      	movs	r0, r3
 80080f2:	f000 fdf5 	bl	8008ce0 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	2240      	movs	r2, #64	@ 0x40
 80080fa:	2100      	movs	r1, #0
 80080fc:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80080fe:	230c      	movs	r3, #12
 8008100:	18fb      	adds	r3, r7, r3
 8008102:	881a      	ldrh	r2, [r3, #0]
 8008104:	230f      	movs	r3, #15
 8008106:	18fb      	adds	r3, r7, r3
 8008108:	7819      	ldrb	r1, [r3, #0]
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	0018      	movs	r0, r3
 800810e:	f7ff fa08 	bl	8007522 <HAL_I2C_AddrCallback>
}
 8008112:	e007      	b.n	8008124 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	2208      	movs	r2, #8
 800811a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2240      	movs	r2, #64	@ 0x40
 8008120:	2100      	movs	r1, #0
 8008122:	5499      	strb	r1, [r3, r2]
}
 8008124:	46c0      	nop			@ (mov r8, r8)
 8008126:	46bd      	mov	sp, r7
 8008128:	b004      	add	sp, #16
 800812a:	bdb0      	pop	{r4, r5, r7, pc}

0800812c <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b082      	sub	sp, #8
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2242      	movs	r2, #66	@ 0x42
 8008138:	2100      	movs	r1, #0
 800813a:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2241      	movs	r2, #65	@ 0x41
 8008140:	5c9b      	ldrb	r3, [r3, r2]
 8008142:	b2db      	uxtb	r3, r3
 8008144:	2b21      	cmp	r3, #33	@ 0x21
 8008146:	d117      	bne.n	8008178 <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2241      	movs	r2, #65	@ 0x41
 800814c:	2120      	movs	r1, #32
 800814e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	2211      	movs	r2, #17
 8008154:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	2200      	movs	r2, #0
 800815a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2101      	movs	r1, #1
 8008160:	0018      	movs	r0, r3
 8008162:	f000 fdbd 	bl	8008ce0 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2240      	movs	r2, #64	@ 0x40
 800816a:	2100      	movs	r1, #0
 800816c:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	0018      	movs	r0, r3
 8008172:	f7ff f9b6 	bl	80074e2 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008176:	e016      	b.n	80081a6 <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2241      	movs	r2, #65	@ 0x41
 800817c:	2120      	movs	r1, #32
 800817e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2212      	movs	r2, #18
 8008184:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	2200      	movs	r2, #0
 800818a:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2102      	movs	r1, #2
 8008190:	0018      	movs	r0, r3
 8008192:	f000 fda5 	bl	8008ce0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	2240      	movs	r2, #64	@ 0x40
 800819a:	2100      	movs	r1, #0
 800819c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	0018      	movs	r0, r3
 80081a2:	f7ff f9a6 	bl	80074f2 <HAL_I2C_MasterRxCpltCallback>
}
 80081a6:	46c0      	nop			@ (mov r8, r8)
 80081a8:	46bd      	mov	sp, r7
 80081aa:	b002      	add	sp, #8
 80081ac:	bd80      	pop	{r7, pc}
	...

080081b0 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b084      	sub	sp, #16
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2242      	movs	r2, #66	@ 0x42
 80081c4:	2100      	movs	r1, #0
 80081c6:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80081c8:	68fa      	ldr	r2, [r7, #12]
 80081ca:	2380      	movs	r3, #128	@ 0x80
 80081cc:	01db      	lsls	r3, r3, #7
 80081ce:	4013      	ands	r3, r2
 80081d0:	d008      	beq.n	80081e4 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	681a      	ldr	r2, [r3, #0]
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	4924      	ldr	r1, [pc, #144]	@ (8008270 <I2C_ITSlaveSeqCplt+0xc0>)
 80081de:	400a      	ands	r2, r1
 80081e0:	601a      	str	r2, [r3, #0]
 80081e2:	e00c      	b.n	80081fe <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80081e4:	68fa      	ldr	r2, [r7, #12]
 80081e6:	2380      	movs	r3, #128	@ 0x80
 80081e8:	021b      	lsls	r3, r3, #8
 80081ea:	4013      	ands	r3, r2
 80081ec:	d007      	beq.n	80081fe <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	681a      	ldr	r2, [r3, #0]
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	491e      	ldr	r1, [pc, #120]	@ (8008274 <I2C_ITSlaveSeqCplt+0xc4>)
 80081fa:	400a      	ands	r2, r1
 80081fc:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	2241      	movs	r2, #65	@ 0x41
 8008202:	5c9b      	ldrb	r3, [r3, r2]
 8008204:	b2db      	uxtb	r3, r3
 8008206:	2b29      	cmp	r3, #41	@ 0x29
 8008208:	d114      	bne.n	8008234 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	2241      	movs	r2, #65	@ 0x41
 800820e:	2128      	movs	r1, #40	@ 0x28
 8008210:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	2221      	movs	r2, #33	@ 0x21
 8008216:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2101      	movs	r1, #1
 800821c:	0018      	movs	r0, r3
 800821e:	f000 fd5f 	bl	8008ce0 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2240      	movs	r2, #64	@ 0x40
 8008226:	2100      	movs	r1, #0
 8008228:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	0018      	movs	r0, r3
 800822e:	f7ff f968 	bl	8007502 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8008232:	e019      	b.n	8008268 <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2241      	movs	r2, #65	@ 0x41
 8008238:	5c9b      	ldrb	r3, [r3, r2]
 800823a:	b2db      	uxtb	r3, r3
 800823c:	2b2a      	cmp	r3, #42	@ 0x2a
 800823e:	d113      	bne.n	8008268 <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2241      	movs	r2, #65	@ 0x41
 8008244:	2128      	movs	r1, #40	@ 0x28
 8008246:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2222      	movs	r2, #34	@ 0x22
 800824c:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	2102      	movs	r1, #2
 8008252:	0018      	movs	r0, r3
 8008254:	f000 fd44 	bl	8008ce0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2240      	movs	r2, #64	@ 0x40
 800825c:	2100      	movs	r1, #0
 800825e:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	0018      	movs	r0, r3
 8008264:	f7ff f955 	bl	8007512 <HAL_I2C_SlaveRxCpltCallback>
}
 8008268:	46c0      	nop			@ (mov r8, r8)
 800826a:	46bd      	mov	sp, r7
 800826c:	b004      	add	sp, #16
 800826e:	bd80      	pop	{r7, pc}
 8008270:	ffffbfff 	.word	0xffffbfff
 8008274:	ffff7fff 	.word	0xffff7fff

08008278 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008278:	b580      	push	{r7, lr}
 800827a:	b086      	sub	sp, #24
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
 8008280:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	2220      	movs	r2, #32
 800828c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	2241      	movs	r2, #65	@ 0x41
 8008292:	5c9b      	ldrb	r3, [r3, r2]
 8008294:	b2db      	uxtb	r3, r3
 8008296:	2b21      	cmp	r3, #33	@ 0x21
 8008298:	d108      	bne.n	80082ac <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	2101      	movs	r1, #1
 800829e:	0018      	movs	r0, r3
 80082a0:	f000 fd1e 	bl	8008ce0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2211      	movs	r2, #17
 80082a8:	631a      	str	r2, [r3, #48]	@ 0x30
 80082aa:	e00d      	b.n	80082c8 <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2241      	movs	r2, #65	@ 0x41
 80082b0:	5c9b      	ldrb	r3, [r3, r2]
 80082b2:	b2db      	uxtb	r3, r3
 80082b4:	2b22      	cmp	r3, #34	@ 0x22
 80082b6:	d107      	bne.n	80082c8 <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2102      	movs	r1, #2
 80082bc:	0018      	movs	r0, r3
 80082be:	f000 fd0f 	bl	8008ce0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	2212      	movs	r2, #18
 80082c6:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	685a      	ldr	r2, [r3, #4]
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	494e      	ldr	r1, [pc, #312]	@ (800840c <I2C_ITMasterCplt+0x194>)
 80082d4:	400a      	ands	r2, r1
 80082d6:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	2200      	movs	r2, #0
 80082dc:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	4a4b      	ldr	r2, [pc, #300]	@ (8008410 <I2C_ITMasterCplt+0x198>)
 80082e2:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 80082e4:	697b      	ldr	r3, [r7, #20]
 80082e6:	2210      	movs	r2, #16
 80082e8:	4013      	ands	r3, r2
 80082ea:	d009      	beq.n	8008300 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	2210      	movs	r2, #16
 80082f2:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80082f8:	2204      	movs	r2, #4
 80082fa:	431a      	orrs	r2, r3
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	2241      	movs	r2, #65	@ 0x41
 8008304:	5c9b      	ldrb	r3, [r3, r2]
 8008306:	b2db      	uxtb	r3, r3
 8008308:	2b60      	cmp	r3, #96	@ 0x60
 800830a:	d109      	bne.n	8008320 <I2C_ITMasterCplt+0xa8>
 800830c:	697b      	ldr	r3, [r7, #20]
 800830e:	2204      	movs	r2, #4
 8008310:	4013      	ands	r3, r2
 8008312:	d005      	beq.n	8008320 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800831a:	b2db      	uxtb	r3, r3
 800831c:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800831e:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	0018      	movs	r0, r3
 8008324:	f000 fb19 	bl	800895a <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800832c:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	2241      	movs	r2, #65	@ 0x41
 8008332:	5c9b      	ldrb	r3, [r3, r2]
 8008334:	b2db      	uxtb	r3, r3
 8008336:	2b60      	cmp	r3, #96	@ 0x60
 8008338:	d002      	beq.n	8008340 <I2C_ITMasterCplt+0xc8>
 800833a:	693b      	ldr	r3, [r7, #16]
 800833c:	2b00      	cmp	r3, #0
 800833e:	d007      	beq.n	8008350 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	0011      	movs	r1, r2
 8008348:	0018      	movs	r0, r3
 800834a:	f000 f9db 	bl	8008704 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800834e:	e058      	b.n	8008402 <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2241      	movs	r2, #65	@ 0x41
 8008354:	5c9b      	ldrb	r3, [r3, r2]
 8008356:	b2db      	uxtb	r3, r3
 8008358:	2b21      	cmp	r3, #33	@ 0x21
 800835a:	d126      	bne.n	80083aa <I2C_ITMasterCplt+0x132>
    hi2c->State = HAL_I2C_STATE_READY;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2241      	movs	r2, #65	@ 0x41
 8008360:	2120      	movs	r1, #32
 8008362:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2200      	movs	r2, #0
 8008368:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	2242      	movs	r2, #66	@ 0x42
 800836e:	5c9b      	ldrb	r3, [r3, r2]
 8008370:	b2db      	uxtb	r3, r3
 8008372:	2b40      	cmp	r3, #64	@ 0x40
 8008374:	d10c      	bne.n	8008390 <I2C_ITMasterCplt+0x118>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	2242      	movs	r2, #66	@ 0x42
 800837a:	2100      	movs	r1, #0
 800837c:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	2240      	movs	r2, #64	@ 0x40
 8008382:	2100      	movs	r1, #0
 8008384:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	0018      	movs	r0, r3
 800838a:	f7ff f8e2 	bl	8007552 <HAL_I2C_MemTxCpltCallback>
}
 800838e:	e038      	b.n	8008402 <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2242      	movs	r2, #66	@ 0x42
 8008394:	2100      	movs	r1, #0
 8008396:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2240      	movs	r2, #64	@ 0x40
 800839c:	2100      	movs	r1, #0
 800839e:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	0018      	movs	r0, r3
 80083a4:	f7ff f89d 	bl	80074e2 <HAL_I2C_MasterTxCpltCallback>
}
 80083a8:	e02b      	b.n	8008402 <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	2241      	movs	r2, #65	@ 0x41
 80083ae:	5c9b      	ldrb	r3, [r3, r2]
 80083b0:	b2db      	uxtb	r3, r3
 80083b2:	2b22      	cmp	r3, #34	@ 0x22
 80083b4:	d125      	bne.n	8008402 <I2C_ITMasterCplt+0x18a>
    hi2c->State = HAL_I2C_STATE_READY;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	2241      	movs	r2, #65	@ 0x41
 80083ba:	2120      	movs	r1, #32
 80083bc:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	2200      	movs	r2, #0
 80083c2:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	2242      	movs	r2, #66	@ 0x42
 80083c8:	5c9b      	ldrb	r3, [r3, r2]
 80083ca:	b2db      	uxtb	r3, r3
 80083cc:	2b40      	cmp	r3, #64	@ 0x40
 80083ce:	d10c      	bne.n	80083ea <I2C_ITMasterCplt+0x172>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2242      	movs	r2, #66	@ 0x42
 80083d4:	2100      	movs	r1, #0
 80083d6:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	2240      	movs	r2, #64	@ 0x40
 80083dc:	2100      	movs	r1, #0
 80083de:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	0018      	movs	r0, r3
 80083e4:	f7ff f8bd 	bl	8007562 <HAL_I2C_MemRxCpltCallback>
}
 80083e8:	e00b      	b.n	8008402 <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	2242      	movs	r2, #66	@ 0x42
 80083ee:	2100      	movs	r1, #0
 80083f0:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	2240      	movs	r2, #64	@ 0x40
 80083f6:	2100      	movs	r1, #0
 80083f8:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	0018      	movs	r0, r3
 80083fe:	f7ff f878 	bl	80074f2 <HAL_I2C_MasterRxCpltCallback>
}
 8008402:	46c0      	nop			@ (mov r8, r8)
 8008404:	46bd      	mov	sp, r7
 8008406:	b006      	add	sp, #24
 8008408:	bd80      	pop	{r7, pc}
 800840a:	46c0      	nop			@ (mov r8, r8)
 800840c:	fe00e800 	.word	0xfe00e800
 8008410:	ffff0000 	.word	0xffff0000

08008414 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008414:	b580      	push	{r7, lr}
 8008416:	b086      	sub	sp, #24
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
 800841c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8008426:	683b      	ldr	r3, [r7, #0]
 8008428:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800842a:	200f      	movs	r0, #15
 800842c:	183b      	adds	r3, r7, r0
 800842e:	687a      	ldr	r2, [r7, #4]
 8008430:	2141      	movs	r1, #65	@ 0x41
 8008432:	5c52      	ldrb	r2, [r2, r1]
 8008434:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	2220      	movs	r2, #32
 800843c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800843e:	183b      	adds	r3, r7, r0
 8008440:	781b      	ldrb	r3, [r3, #0]
 8008442:	2b21      	cmp	r3, #33	@ 0x21
 8008444:	d003      	beq.n	800844e <I2C_ITSlaveCplt+0x3a>
 8008446:	183b      	adds	r3, r7, r0
 8008448:	781b      	ldrb	r3, [r3, #0]
 800844a:	2b29      	cmp	r3, #41	@ 0x29
 800844c:	d109      	bne.n	8008462 <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800844e:	4a7b      	ldr	r2, [pc, #492]	@ (800863c <I2C_ITSlaveCplt+0x228>)
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	0011      	movs	r1, r2
 8008454:	0018      	movs	r0, r3
 8008456:	f000 fc43 	bl	8008ce0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	2221      	movs	r2, #33	@ 0x21
 800845e:	631a      	str	r2, [r3, #48]	@ 0x30
 8008460:	e011      	b.n	8008486 <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8008462:	220f      	movs	r2, #15
 8008464:	18bb      	adds	r3, r7, r2
 8008466:	781b      	ldrb	r3, [r3, #0]
 8008468:	2b22      	cmp	r3, #34	@ 0x22
 800846a:	d003      	beq.n	8008474 <I2C_ITSlaveCplt+0x60>
 800846c:	18bb      	adds	r3, r7, r2
 800846e:	781b      	ldrb	r3, [r3, #0]
 8008470:	2b2a      	cmp	r3, #42	@ 0x2a
 8008472:	d108      	bne.n	8008486 <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8008474:	4a72      	ldr	r2, [pc, #456]	@ (8008640 <I2C_ITSlaveCplt+0x22c>)
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	0011      	movs	r1, r2
 800847a:	0018      	movs	r0, r3
 800847c:	f000 fc30 	bl	8008ce0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2222      	movs	r2, #34	@ 0x22
 8008484:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	685a      	ldr	r2, [r3, #4]
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	2180      	movs	r1, #128	@ 0x80
 8008492:	0209      	lsls	r1, r1, #8
 8008494:	430a      	orrs	r2, r1
 8008496:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	685a      	ldr	r2, [r3, #4]
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	4968      	ldr	r1, [pc, #416]	@ (8008644 <I2C_ITSlaveCplt+0x230>)
 80084a4:	400a      	ands	r2, r1
 80084a6:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	0018      	movs	r0, r3
 80084ac:	f000 fa55 	bl	800895a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80084b0:	693a      	ldr	r2, [r7, #16]
 80084b2:	2380      	movs	r3, #128	@ 0x80
 80084b4:	01db      	lsls	r3, r3, #7
 80084b6:	4013      	ands	r3, r2
 80084b8:	d013      	beq.n	80084e2 <I2C_ITSlaveCplt+0xce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	681a      	ldr	r2, [r3, #0]
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	4960      	ldr	r1, [pc, #384]	@ (8008648 <I2C_ITSlaveCplt+0x234>)
 80084c6:	400a      	ands	r2, r1
 80084c8:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d01f      	beq.n	8008512 <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	685b      	ldr	r3, [r3, #4]
 80084da:	b29a      	uxth	r2, r3
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80084e0:	e017      	b.n	8008512 <I2C_ITSlaveCplt+0xfe>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80084e2:	693a      	ldr	r2, [r7, #16]
 80084e4:	2380      	movs	r3, #128	@ 0x80
 80084e6:	021b      	lsls	r3, r3, #8
 80084e8:	4013      	ands	r3, r2
 80084ea:	d012      	beq.n	8008512 <I2C_ITSlaveCplt+0xfe>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	681a      	ldr	r2, [r3, #0]
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	4955      	ldr	r1, [pc, #340]	@ (800864c <I2C_ITSlaveCplt+0x238>)
 80084f8:	400a      	ands	r2, r1
 80084fa:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008500:	2b00      	cmp	r3, #0
 8008502:	d006      	beq.n	8008512 <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	685b      	ldr	r3, [r3, #4]
 800850c:	b29a      	uxth	r2, r3
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8008512:	697b      	ldr	r3, [r7, #20]
 8008514:	2204      	movs	r2, #4
 8008516:	4013      	ands	r3, r2
 8008518:	d020      	beq.n	800855c <I2C_ITSlaveCplt+0x148>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800851a:	697b      	ldr	r3, [r7, #20]
 800851c:	2204      	movs	r2, #4
 800851e:	4393      	bics	r3, r2
 8008520:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800852c:	b2d2      	uxtb	r2, r2
 800852e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008534:	1c5a      	adds	r2, r3, #1
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800853e:	2b00      	cmp	r3, #0
 8008540:	d00c      	beq.n	800855c <I2C_ITSlaveCplt+0x148>
    {
      hi2c->XferSize--;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008546:	3b01      	subs	r3, #1
 8008548:	b29a      	uxth	r2, r3
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008552:	b29b      	uxth	r3, r3
 8008554:	3b01      	subs	r3, #1
 8008556:	b29a      	uxth	r2, r3
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008560:	b29b      	uxth	r3, r3
 8008562:	2b00      	cmp	r3, #0
 8008564:	d005      	beq.n	8008572 <I2C_ITSlaveCplt+0x15e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800856a:	2204      	movs	r2, #4
 800856c:	431a      	orrs	r2, r3
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	2242      	movs	r2, #66	@ 0x42
 8008576:	2100      	movs	r1, #0
 8008578:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	2200      	movs	r2, #0
 800857e:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008584:	2b00      	cmp	r3, #0
 8008586:	d013      	beq.n	80085b0 <I2C_ITSlaveCplt+0x19c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	0011      	movs	r1, r2
 8008590:	0018      	movs	r0, r3
 8008592:	f000 f8b7 	bl	8008704 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	2241      	movs	r2, #65	@ 0x41
 800859a:	5c9b      	ldrb	r3, [r3, r2]
 800859c:	b2db      	uxtb	r3, r3
 800859e:	2b28      	cmp	r3, #40	@ 0x28
 80085a0:	d147      	bne.n	8008632 <I2C_ITSlaveCplt+0x21e>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80085a2:	697a      	ldr	r2, [r7, #20]
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	0011      	movs	r1, r2
 80085a8:	0018      	movs	r0, r3
 80085aa:	f000 f853 	bl	8008654 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80085ae:	e040      	b.n	8008632 <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085b4:	4a26      	ldr	r2, [pc, #152]	@ (8008650 <I2C_ITSlaveCplt+0x23c>)
 80085b6:	4293      	cmp	r3, r2
 80085b8:	d016      	beq.n	80085e8 <I2C_ITSlaveCplt+0x1d4>
    I2C_ITSlaveSeqCplt(hi2c);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	0018      	movs	r0, r3
 80085be:	f7ff fdf7 	bl	80081b0 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	4a22      	ldr	r2, [pc, #136]	@ (8008650 <I2C_ITSlaveCplt+0x23c>)
 80085c6:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2241      	movs	r2, #65	@ 0x41
 80085cc:	2120      	movs	r1, #32
 80085ce:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	2200      	movs	r2, #0
 80085d4:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	2240      	movs	r2, #64	@ 0x40
 80085da:	2100      	movs	r1, #0
 80085dc:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	0018      	movs	r0, r3
 80085e2:	f7fe ffae 	bl	8007542 <HAL_I2C_ListenCpltCallback>
}
 80085e6:	e024      	b.n	8008632 <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2241      	movs	r2, #65	@ 0x41
 80085ec:	5c9b      	ldrb	r3, [r3, r2]
 80085ee:	b2db      	uxtb	r3, r3
 80085f0:	2b22      	cmp	r3, #34	@ 0x22
 80085f2:	d10f      	bne.n	8008614 <I2C_ITSlaveCplt+0x200>
    hi2c->State = HAL_I2C_STATE_READY;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	2241      	movs	r2, #65	@ 0x41
 80085f8:	2120      	movs	r1, #32
 80085fa:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2200      	movs	r2, #0
 8008600:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2240      	movs	r2, #64	@ 0x40
 8008606:	2100      	movs	r1, #0
 8008608:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	0018      	movs	r0, r3
 800860e:	f7fe ff80 	bl	8007512 <HAL_I2C_SlaveRxCpltCallback>
}
 8008612:	e00e      	b.n	8008632 <I2C_ITSlaveCplt+0x21e>
    hi2c->State = HAL_I2C_STATE_READY;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	2241      	movs	r2, #65	@ 0x41
 8008618:	2120      	movs	r1, #32
 800861a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2200      	movs	r2, #0
 8008620:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	2240      	movs	r2, #64	@ 0x40
 8008626:	2100      	movs	r1, #0
 8008628:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	0018      	movs	r0, r3
 800862e:	f7fe ff68 	bl	8007502 <HAL_I2C_SlaveTxCpltCallback>
}
 8008632:	46c0      	nop			@ (mov r8, r8)
 8008634:	46bd      	mov	sp, r7
 8008636:	b006      	add	sp, #24
 8008638:	bd80      	pop	{r7, pc}
 800863a:	46c0      	nop			@ (mov r8, r8)
 800863c:	00008001 	.word	0x00008001
 8008640:	00008002 	.word	0x00008002
 8008644:	fe00e800 	.word	0xfe00e800
 8008648:	ffffbfff 	.word	0xffffbfff
 800864c:	ffff7fff 	.word	0xffff7fff
 8008650:	ffff0000 	.word	0xffff0000

08008654 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b082      	sub	sp, #8
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
 800865c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	4a26      	ldr	r2, [pc, #152]	@ (80086fc <I2C_ITListenCplt+0xa8>)
 8008662:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2200      	movs	r2, #0
 8008668:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	2241      	movs	r2, #65	@ 0x41
 800866e:	2120      	movs	r1, #32
 8008670:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	2242      	movs	r2, #66	@ 0x42
 8008676:	2100      	movs	r1, #0
 8008678:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	2200      	movs	r2, #0
 800867e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	2204      	movs	r2, #4
 8008684:	4013      	ands	r3, r2
 8008686:	d022      	beq.n	80086ce <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008692:	b2d2      	uxtb	r2, r2
 8008694:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800869a:	1c5a      	adds	r2, r3, #1
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d012      	beq.n	80086ce <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80086ac:	3b01      	subs	r3, #1
 80086ae:	b29a      	uxth	r2, r3
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80086b8:	b29b      	uxth	r3, r3
 80086ba:	3b01      	subs	r3, #1
 80086bc:	b29a      	uxth	r2, r3
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80086c6:	2204      	movs	r2, #4
 80086c8:	431a      	orrs	r2, r3
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80086ce:	4a0c      	ldr	r2, [pc, #48]	@ (8008700 <I2C_ITListenCplt+0xac>)
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	0011      	movs	r1, r2
 80086d4:	0018      	movs	r0, r3
 80086d6:	f000 fb03 	bl	8008ce0 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	2210      	movs	r2, #16
 80086e0:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	2240      	movs	r2, #64	@ 0x40
 80086e6:	2100      	movs	r1, #0
 80086e8:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	0018      	movs	r0, r3
 80086ee:	f7fe ff28 	bl	8007542 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80086f2:	46c0      	nop			@ (mov r8, r8)
 80086f4:	46bd      	mov	sp, r7
 80086f6:	b002      	add	sp, #8
 80086f8:	bd80      	pop	{r7, pc}
 80086fa:	46c0      	nop			@ (mov r8, r8)
 80086fc:	ffff0000 	.word	0xffff0000
 8008700:	00008003 	.word	0x00008003

08008704 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b084      	sub	sp, #16
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
 800870c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800870e:	200f      	movs	r0, #15
 8008710:	183b      	adds	r3, r7, r0
 8008712:	687a      	ldr	r2, [r7, #4]
 8008714:	2141      	movs	r1, #65	@ 0x41
 8008716:	5c52      	ldrb	r2, [r2, r1]
 8008718:	701a      	strb	r2, [r3, #0]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	2242      	movs	r2, #66	@ 0x42
 800871e:	2100      	movs	r1, #0
 8008720:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	4a72      	ldr	r2, [pc, #456]	@ (80088f0 <I2C_ITError+0x1ec>)
 8008726:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2200      	movs	r2, #0
 800872c:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008732:	683b      	ldr	r3, [r7, #0]
 8008734:	431a      	orrs	r2, r3
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800873a:	183b      	adds	r3, r7, r0
 800873c:	781b      	ldrb	r3, [r3, #0]
 800873e:	2b28      	cmp	r3, #40	@ 0x28
 8008740:	d007      	beq.n	8008752 <I2C_ITError+0x4e>
 8008742:	183b      	adds	r3, r7, r0
 8008744:	781b      	ldrb	r3, [r3, #0]
 8008746:	2b29      	cmp	r3, #41	@ 0x29
 8008748:	d003      	beq.n	8008752 <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800874a:	183b      	adds	r3, r7, r0
 800874c:	781b      	ldrb	r3, [r3, #0]
 800874e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008750:	d10c      	bne.n	800876c <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	2103      	movs	r1, #3
 8008756:	0018      	movs	r0, r3
 8008758:	f000 fac2 	bl	8008ce0 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	2241      	movs	r2, #65	@ 0x41
 8008760:	2128      	movs	r1, #40	@ 0x28
 8008762:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	4a63      	ldr	r2, [pc, #396]	@ (80088f4 <I2C_ITError+0x1f0>)
 8008768:	635a      	str	r2, [r3, #52]	@ 0x34
 800876a:	e032      	b.n	80087d2 <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800876c:	4a62      	ldr	r2, [pc, #392]	@ (80088f8 <I2C_ITError+0x1f4>)
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	0011      	movs	r1, r2
 8008772:	0018      	movs	r0, r3
 8008774:	f000 fab4 	bl	8008ce0 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	0018      	movs	r0, r3
 800877c:	f000 f8ed 	bl	800895a <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	2241      	movs	r2, #65	@ 0x41
 8008784:	5c9b      	ldrb	r3, [r3, r2]
 8008786:	b2db      	uxtb	r3, r3
 8008788:	2b60      	cmp	r3, #96	@ 0x60
 800878a:	d01f      	beq.n	80087cc <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2241      	movs	r2, #65	@ 0x41
 8008790:	2120      	movs	r1, #32
 8008792:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	699b      	ldr	r3, [r3, #24]
 800879a:	2220      	movs	r2, #32
 800879c:	4013      	ands	r3, r2
 800879e:	2b20      	cmp	r3, #32
 80087a0:	d114      	bne.n	80087cc <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	699b      	ldr	r3, [r3, #24]
 80087a8:	2210      	movs	r2, #16
 80087aa:	4013      	ands	r3, r2
 80087ac:	2b10      	cmp	r3, #16
 80087ae:	d109      	bne.n	80087c4 <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	2210      	movs	r2, #16
 80087b6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80087bc:	2204      	movs	r2, #4
 80087be:	431a      	orrs	r2, r3
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	2220      	movs	r2, #32
 80087ca:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2200      	movs	r2, #0
 80087d0:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087d6:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d03b      	beq.n	8008858 <I2C_ITError+0x154>
 80087e0:	68bb      	ldr	r3, [r7, #8]
 80087e2:	2b11      	cmp	r3, #17
 80087e4:	d002      	beq.n	80087ec <I2C_ITError+0xe8>
 80087e6:	68bb      	ldr	r3, [r7, #8]
 80087e8:	2b21      	cmp	r3, #33	@ 0x21
 80087ea:	d135      	bne.n	8008858 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	681a      	ldr	r2, [r3, #0]
 80087f2:	2380      	movs	r3, #128	@ 0x80
 80087f4:	01db      	lsls	r3, r3, #7
 80087f6:	401a      	ands	r2, r3
 80087f8:	2380      	movs	r3, #128	@ 0x80
 80087fa:	01db      	lsls	r3, r3, #7
 80087fc:	429a      	cmp	r2, r3
 80087fe:	d107      	bne.n	8008810 <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	681a      	ldr	r2, [r3, #0]
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	493c      	ldr	r1, [pc, #240]	@ (80088fc <I2C_ITError+0x1f8>)
 800880c:	400a      	ands	r2, r1
 800880e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008814:	0018      	movs	r0, r3
 8008816:	f7fe f95e 	bl	8006ad6 <HAL_DMA_GetState>
 800881a:	0003      	movs	r3, r0
 800881c:	2b01      	cmp	r3, #1
 800881e:	d016      	beq.n	800884e <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008824:	4a36      	ldr	r2, [pc, #216]	@ (8008900 <I2C_ITError+0x1fc>)
 8008826:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	2240      	movs	r2, #64	@ 0x40
 800882c:	2100      	movs	r1, #0
 800882e:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008834:	0018      	movs	r0, r3
 8008836:	f7fe f859 	bl	80068ec <HAL_DMA_Abort_IT>
 800883a:	1e03      	subs	r3, r0, #0
 800883c:	d051      	beq.n	80088e2 <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008842:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008848:	0018      	movs	r0, r3
 800884a:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800884c:	e049      	b.n	80088e2 <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	0018      	movs	r0, r3
 8008852:	f000 f859 	bl	8008908 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008856:	e044      	b.n	80088e2 <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800885c:	2b00      	cmp	r3, #0
 800885e:	d03b      	beq.n	80088d8 <I2C_ITError+0x1d4>
 8008860:	68bb      	ldr	r3, [r7, #8]
 8008862:	2b12      	cmp	r3, #18
 8008864:	d002      	beq.n	800886c <I2C_ITError+0x168>
 8008866:	68bb      	ldr	r3, [r7, #8]
 8008868:	2b22      	cmp	r3, #34	@ 0x22
 800886a:	d135      	bne.n	80088d8 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	681a      	ldr	r2, [r3, #0]
 8008872:	2380      	movs	r3, #128	@ 0x80
 8008874:	021b      	lsls	r3, r3, #8
 8008876:	401a      	ands	r2, r3
 8008878:	2380      	movs	r3, #128	@ 0x80
 800887a:	021b      	lsls	r3, r3, #8
 800887c:	429a      	cmp	r2, r3
 800887e:	d107      	bne.n	8008890 <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	681a      	ldr	r2, [r3, #0]
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	491e      	ldr	r1, [pc, #120]	@ (8008904 <I2C_ITError+0x200>)
 800888c:	400a      	ands	r2, r1
 800888e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008894:	0018      	movs	r0, r3
 8008896:	f7fe f91e 	bl	8006ad6 <HAL_DMA_GetState>
 800889a:	0003      	movs	r3, r0
 800889c:	2b01      	cmp	r3, #1
 800889e:	d016      	beq.n	80088ce <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80088a4:	4a16      	ldr	r2, [pc, #88]	@ (8008900 <I2C_ITError+0x1fc>)
 80088a6:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	2240      	movs	r2, #64	@ 0x40
 80088ac:	2100      	movs	r1, #0
 80088ae:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80088b4:	0018      	movs	r0, r3
 80088b6:	f7fe f819 	bl	80068ec <HAL_DMA_Abort_IT>
 80088ba:	1e03      	subs	r3, r0, #0
 80088bc:	d013      	beq.n	80088e6 <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80088c2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80088c8:	0018      	movs	r0, r3
 80088ca:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80088cc:	e00b      	b.n	80088e6 <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	0018      	movs	r0, r3
 80088d2:	f000 f819 	bl	8008908 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80088d6:	e006      	b.n	80088e6 <I2C_ITError+0x1e2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	0018      	movs	r0, r3
 80088dc:	f000 f814 	bl	8008908 <I2C_TreatErrorCallback>
  }
}
 80088e0:	e002      	b.n	80088e8 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80088e2:	46c0      	nop			@ (mov r8, r8)
 80088e4:	e000      	b.n	80088e8 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80088e6:	46c0      	nop			@ (mov r8, r8)
}
 80088e8:	46c0      	nop			@ (mov r8, r8)
 80088ea:	46bd      	mov	sp, r7
 80088ec:	b004      	add	sp, #16
 80088ee:	bd80      	pop	{r7, pc}
 80088f0:	ffff0000 	.word	0xffff0000
 80088f4:	080077e9 	.word	0x080077e9
 80088f8:	00008003 	.word	0x00008003
 80088fc:	ffffbfff 	.word	0xffffbfff
 8008900:	08008b13 	.word	0x08008b13
 8008904:	ffff7fff 	.word	0xffff7fff

08008908 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8008908:	b580      	push	{r7, lr}
 800890a:	b082      	sub	sp, #8
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	2241      	movs	r2, #65	@ 0x41
 8008914:	5c9b      	ldrb	r3, [r3, r2]
 8008916:	b2db      	uxtb	r3, r3
 8008918:	2b60      	cmp	r3, #96	@ 0x60
 800891a:	d10f      	bne.n	800893c <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2241      	movs	r2, #65	@ 0x41
 8008920:	2120      	movs	r1, #32
 8008922:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2200      	movs	r2, #0
 8008928:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	2240      	movs	r2, #64	@ 0x40
 800892e:	2100      	movs	r1, #0
 8008930:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	0018      	movs	r0, r3
 8008936:	f7fe fe24 	bl	8007582 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800893a:	e00a      	b.n	8008952 <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	2200      	movs	r2, #0
 8008940:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	2240      	movs	r2, #64	@ 0x40
 8008946:	2100      	movs	r1, #0
 8008948:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	0018      	movs	r0, r3
 800894e:	f7fe fe10 	bl	8007572 <HAL_I2C_ErrorCallback>
}
 8008952:	46c0      	nop			@ (mov r8, r8)
 8008954:	46bd      	mov	sp, r7
 8008956:	b002      	add	sp, #8
 8008958:	bd80      	pop	{r7, pc}

0800895a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800895a:	b580      	push	{r7, lr}
 800895c:	b082      	sub	sp, #8
 800895e:	af00      	add	r7, sp, #0
 8008960:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	699b      	ldr	r3, [r3, #24]
 8008968:	2202      	movs	r2, #2
 800896a:	4013      	ands	r3, r2
 800896c:	2b02      	cmp	r3, #2
 800896e:	d103      	bne.n	8008978 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	2200      	movs	r2, #0
 8008976:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	699b      	ldr	r3, [r3, #24]
 800897e:	2201      	movs	r2, #1
 8008980:	4013      	ands	r3, r2
 8008982:	2b01      	cmp	r3, #1
 8008984:	d007      	beq.n	8008996 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	699a      	ldr	r2, [r3, #24]
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	2101      	movs	r1, #1
 8008992:	430a      	orrs	r2, r1
 8008994:	619a      	str	r2, [r3, #24]
  }
}
 8008996:	46c0      	nop			@ (mov r8, r8)
 8008998:	46bd      	mov	sp, r7
 800899a:	b002      	add	sp, #8
 800899c:	bd80      	pop	{r7, pc}
	...

080089a0 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80089a0:	b580      	push	{r7, lr}
 80089a2:	b084      	sub	sp, #16
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089ac:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	681a      	ldr	r2, [r3, #0]
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	4920      	ldr	r1, [pc, #128]	@ (8008a3c <I2C_DMAMasterTransmitCplt+0x9c>)
 80089ba:	400a      	ands	r2, r1
 80089bc:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80089c2:	b29b      	uxth	r3, r3
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d105      	bne.n	80089d4 <I2C_DMAMasterTransmitCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	2120      	movs	r1, #32
 80089cc:	0018      	movs	r0, r3
 80089ce:	f000 f8f9 	bl	8008bc4 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 80089d2:	e02e      	b.n	8008a32 <I2C_DMAMasterTransmitCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089d8:	68fa      	ldr	r2, [r7, #12]
 80089da:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 80089dc:	189a      	adds	r2, r3, r2
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80089e6:	b29b      	uxth	r3, r3
 80089e8:	2bff      	cmp	r3, #255	@ 0xff
 80089ea:	d903      	bls.n	80089f4 <I2C_DMAMasterTransmitCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	22ff      	movs	r2, #255	@ 0xff
 80089f0:	851a      	strh	r2, [r3, #40]	@ 0x28
 80089f2:	e004      	b.n	80089fe <I2C_DMAMasterTransmitCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80089f8:	b29a      	uxth	r2, r3
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a06:	0019      	movs	r1, r3
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	3328      	adds	r3, #40	@ 0x28
 8008a0e:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8008a14:	f7fd fec4 	bl	80067a0 <HAL_DMA_Start_IT>
 8008a18:	1e03      	subs	r3, r0, #0
 8008a1a:	d005      	beq.n	8008a28 <I2C_DMAMasterTransmitCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	2110      	movs	r1, #16
 8008a20:	0018      	movs	r0, r3
 8008a22:	f7ff fe6f 	bl	8008704 <I2C_ITError>
}
 8008a26:	e004      	b.n	8008a32 <I2C_DMAMasterTransmitCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	2140      	movs	r1, #64	@ 0x40
 8008a2c:	0018      	movs	r0, r3
 8008a2e:	f000 f8c9 	bl	8008bc4 <I2C_Enable_IRQ>
}
 8008a32:	46c0      	nop			@ (mov r8, r8)
 8008a34:	46bd      	mov	sp, r7
 8008a36:	b004      	add	sp, #16
 8008a38:	bd80      	pop	{r7, pc}
 8008a3a:	46c0      	nop			@ (mov r8, r8)
 8008a3c:	ffffbfff 	.word	0xffffbfff

08008a40 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b084      	sub	sp, #16
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a4c:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	681a      	ldr	r2, [r3, #0]
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	4920      	ldr	r1, [pc, #128]	@ (8008adc <I2C_DMAMasterReceiveCplt+0x9c>)
 8008a5a:	400a      	ands	r2, r1
 8008a5c:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008a62:	b29b      	uxth	r3, r3
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d105      	bne.n	8008a74 <I2C_DMAMasterReceiveCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	2120      	movs	r1, #32
 8008a6c:	0018      	movs	r0, r3
 8008a6e:	f000 f8a9 	bl	8008bc4 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8008a72:	e02e      	b.n	8008ad2 <I2C_DMAMasterReceiveCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a78:	68fa      	ldr	r2, [r7, #12]
 8008a7a:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8008a7c:	189a      	adds	r2, r3, r2
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008a86:	b29b      	uxth	r3, r3
 8008a88:	2bff      	cmp	r3, #255	@ 0xff
 8008a8a:	d903      	bls.n	8008a94 <I2C_DMAMasterReceiveCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	22ff      	movs	r2, #255	@ 0xff
 8008a90:	851a      	strh	r2, [r3, #40]	@ 0x28
 8008a92:	e004      	b.n	8008a9e <I2C_DMAMasterReceiveCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008a98:	b29a      	uxth	r2, r3
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	3324      	adds	r3, #36	@ 0x24
 8008aa8:	0019      	movs	r1, r3
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008aae:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8008ab4:	f7fd fe74 	bl	80067a0 <HAL_DMA_Start_IT>
 8008ab8:	1e03      	subs	r3, r0, #0
 8008aba:	d005      	beq.n	8008ac8 <I2C_DMAMasterReceiveCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	2110      	movs	r1, #16
 8008ac0:	0018      	movs	r0, r3
 8008ac2:	f7ff fe1f 	bl	8008704 <I2C_ITError>
}
 8008ac6:	e004      	b.n	8008ad2 <I2C_DMAMasterReceiveCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	2140      	movs	r1, #64	@ 0x40
 8008acc:	0018      	movs	r0, r3
 8008ace:	f000 f879 	bl	8008bc4 <I2C_Enable_IRQ>
}
 8008ad2:	46c0      	nop			@ (mov r8, r8)
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	b004      	add	sp, #16
 8008ad8:	bd80      	pop	{r7, pc}
 8008ada:	46c0      	nop			@ (mov r8, r8)
 8008adc:	ffff7fff 	.word	0xffff7fff

08008ae0 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b084      	sub	sp, #16
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008aec:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	685a      	ldr	r2, [r3, #4]
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	2180      	movs	r1, #128	@ 0x80
 8008afa:	0209      	lsls	r1, r1, #8
 8008afc:	430a      	orrs	r2, r1
 8008afe:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	2110      	movs	r1, #16
 8008b04:	0018      	movs	r0, r3
 8008b06:	f7ff fdfd 	bl	8008704 <I2C_ITError>
}
 8008b0a:	46c0      	nop			@ (mov r8, r8)
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	b004      	add	sp, #16
 8008b10:	bd80      	pop	{r7, pc}

08008b12 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8008b12:	b580      	push	{r7, lr}
 8008b14:	b084      	sub	sp, #16
 8008b16:	af00      	add	r7, sp, #0
 8008b18:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b1e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d003      	beq.n	8008b30 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b2c:	2200      	movs	r2, #0
 8008b2e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d003      	beq.n	8008b40 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	0018      	movs	r0, r3
 8008b44:	f7ff fee0 	bl	8008908 <I2C_TreatErrorCallback>
}
 8008b48:	46c0      	nop			@ (mov r8, r8)
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	b004      	add	sp, #16
 8008b4e:	bd80      	pop	{r7, pc}

08008b50 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8008b50:	b590      	push	{r4, r7, lr}
 8008b52:	b087      	sub	sp, #28
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	60f8      	str	r0, [r7, #12]
 8008b58:	0008      	movs	r0, r1
 8008b5a:	0011      	movs	r1, r2
 8008b5c:	607b      	str	r3, [r7, #4]
 8008b5e:	240a      	movs	r4, #10
 8008b60:	193b      	adds	r3, r7, r4
 8008b62:	1c02      	adds	r2, r0, #0
 8008b64:	801a      	strh	r2, [r3, #0]
 8008b66:	2009      	movs	r0, #9
 8008b68:	183b      	adds	r3, r7, r0
 8008b6a:	1c0a      	adds	r2, r1, #0
 8008b6c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008b6e:	193b      	adds	r3, r7, r4
 8008b70:	881b      	ldrh	r3, [r3, #0]
 8008b72:	059b      	lsls	r3, r3, #22
 8008b74:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008b76:	183b      	adds	r3, r7, r0
 8008b78:	781b      	ldrb	r3, [r3, #0]
 8008b7a:	0419      	lsls	r1, r3, #16
 8008b7c:	23ff      	movs	r3, #255	@ 0xff
 8008b7e:	041b      	lsls	r3, r3, #16
 8008b80:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008b82:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008b88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b8a:	4313      	orrs	r3, r2
 8008b8c:	005b      	lsls	r3, r3, #1
 8008b8e:	085b      	lsrs	r3, r3, #1
 8008b90:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	685b      	ldr	r3, [r3, #4]
 8008b98:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008b9a:	0d51      	lsrs	r1, r2, #21
 8008b9c:	2280      	movs	r2, #128	@ 0x80
 8008b9e:	00d2      	lsls	r2, r2, #3
 8008ba0:	400a      	ands	r2, r1
 8008ba2:	4907      	ldr	r1, [pc, #28]	@ (8008bc0 <I2C_TransferConfig+0x70>)
 8008ba4:	430a      	orrs	r2, r1
 8008ba6:	43d2      	mvns	r2, r2
 8008ba8:	401a      	ands	r2, r3
 8008baa:	0011      	movs	r1, r2
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	697a      	ldr	r2, [r7, #20]
 8008bb2:	430a      	orrs	r2, r1
 8008bb4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8008bb6:	46c0      	nop			@ (mov r8, r8)
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	b007      	add	sp, #28
 8008bbc:	bd90      	pop	{r4, r7, pc}
 8008bbe:	46c0      	nop			@ (mov r8, r8)
 8008bc0:	03ff63ff 	.word	0x03ff63ff

08008bc4 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8008bc4:	b580      	push	{r7, lr}
 8008bc6:	b084      	sub	sp, #16
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]
 8008bcc:	000a      	movs	r2, r1
 8008bce:	1cbb      	adds	r3, r7, #2
 8008bd0:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008bda:	4b3e      	ldr	r3, [pc, #248]	@ (8008cd4 <I2C_Enable_IRQ+0x110>)
 8008bdc:	429a      	cmp	r2, r3
 8008bde:	d035      	beq.n	8008c4c <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8008be4:	4b3c      	ldr	r3, [pc, #240]	@ (8008cd8 <I2C_Enable_IRQ+0x114>)
 8008be6:	429a      	cmp	r2, r3
 8008be8:	d030      	beq.n	8008c4c <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8008bee:	4b3b      	ldr	r3, [pc, #236]	@ (8008cdc <I2C_Enable_IRQ+0x118>)
 8008bf0:	429a      	cmp	r2, r3
 8008bf2:	d02b      	beq.n	8008c4c <I2C_Enable_IRQ+0x88>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8008bf4:	1cbb      	adds	r3, r7, #2
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	5e9b      	ldrsh	r3, [r3, r2]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	da03      	bge.n	8008c06 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	22b8      	movs	r2, #184	@ 0xb8
 8008c02:	4313      	orrs	r3, r2
 8008c04:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8008c06:	1cbb      	adds	r3, r7, #2
 8008c08:	881b      	ldrh	r3, [r3, #0]
 8008c0a:	2201      	movs	r2, #1
 8008c0c:	4013      	ands	r3, r2
 8008c0e:	d003      	beq.n	8008c18 <I2C_Enable_IRQ+0x54>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	22f2      	movs	r2, #242	@ 0xf2
 8008c14:	4313      	orrs	r3, r2
 8008c16:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8008c18:	1cbb      	adds	r3, r7, #2
 8008c1a:	881b      	ldrh	r3, [r3, #0]
 8008c1c:	2202      	movs	r2, #2
 8008c1e:	4013      	ands	r3, r2
 8008c20:	d003      	beq.n	8008c2a <I2C_Enable_IRQ+0x66>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	22f4      	movs	r2, #244	@ 0xf4
 8008c26:	4313      	orrs	r3, r2
 8008c28:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8008c2a:	1cbb      	adds	r3, r7, #2
 8008c2c:	881b      	ldrh	r3, [r3, #0]
 8008c2e:	2b10      	cmp	r3, #16
 8008c30:	d103      	bne.n	8008c3a <I2C_Enable_IRQ+0x76>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	2290      	movs	r2, #144	@ 0x90
 8008c36:	4313      	orrs	r3, r2
 8008c38:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8008c3a:	1cbb      	adds	r3, r7, #2
 8008c3c:	881b      	ldrh	r3, [r3, #0]
 8008c3e:	2b20      	cmp	r3, #32
 8008c40:	d13c      	bne.n	8008cbc <I2C_Enable_IRQ+0xf8>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	2220      	movs	r2, #32
 8008c46:	4313      	orrs	r3, r2
 8008c48:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8008c4a:	e037      	b.n	8008cbc <I2C_Enable_IRQ+0xf8>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8008c4c:	1cbb      	adds	r3, r7, #2
 8008c4e:	2200      	movs	r2, #0
 8008c50:	5e9b      	ldrsh	r3, [r3, r2]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	da03      	bge.n	8008c5e <I2C_Enable_IRQ+0x9a>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	22b8      	movs	r2, #184	@ 0xb8
 8008c5a:	4313      	orrs	r3, r2
 8008c5c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8008c5e:	1cbb      	adds	r3, r7, #2
 8008c60:	881b      	ldrh	r3, [r3, #0]
 8008c62:	2201      	movs	r2, #1
 8008c64:	4013      	ands	r3, r2
 8008c66:	d003      	beq.n	8008c70 <I2C_Enable_IRQ+0xac>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	22f2      	movs	r2, #242	@ 0xf2
 8008c6c:	4313      	orrs	r3, r2
 8008c6e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8008c70:	1cbb      	adds	r3, r7, #2
 8008c72:	881b      	ldrh	r3, [r3, #0]
 8008c74:	2202      	movs	r2, #2
 8008c76:	4013      	ands	r3, r2
 8008c78:	d003      	beq.n	8008c82 <I2C_Enable_IRQ+0xbe>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	22f4      	movs	r2, #244	@ 0xf4
 8008c7e:	4313      	orrs	r3, r2
 8008c80:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8008c82:	1cbb      	adds	r3, r7, #2
 8008c84:	881b      	ldrh	r3, [r3, #0]
 8008c86:	2b10      	cmp	r3, #16
 8008c88:	d103      	bne.n	8008c92 <I2C_Enable_IRQ+0xce>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	2290      	movs	r2, #144	@ 0x90
 8008c8e:	4313      	orrs	r3, r2
 8008c90:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8008c92:	1cbb      	adds	r3, r7, #2
 8008c94:	881b      	ldrh	r3, [r3, #0]
 8008c96:	2b20      	cmp	r3, #32
 8008c98:	d103      	bne.n	8008ca2 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	2260      	movs	r2, #96	@ 0x60
 8008c9e:	4313      	orrs	r3, r2
 8008ca0:	60fb      	str	r3, [r7, #12]
    }

    if ((hi2c->XferISR != I2C_Mem_ISR_DMA) && (InterruptRequest == I2C_XFER_RELOAD_IT))
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008ca6:	4b0d      	ldr	r3, [pc, #52]	@ (8008cdc <I2C_Enable_IRQ+0x118>)
 8008ca8:	429a      	cmp	r2, r3
 8008caa:	d007      	beq.n	8008cbc <I2C_Enable_IRQ+0xf8>
 8008cac:	1cbb      	adds	r3, r7, #2
 8008cae:	881b      	ldrh	r3, [r3, #0]
 8008cb0:	2b40      	cmp	r3, #64	@ 0x40
 8008cb2:	d103      	bne.n	8008cbc <I2C_Enable_IRQ+0xf8>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	2240      	movs	r2, #64	@ 0x40
 8008cb8:	4313      	orrs	r3, r2
 8008cba:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	6819      	ldr	r1, [r3, #0]
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	68fa      	ldr	r2, [r7, #12]
 8008cc8:	430a      	orrs	r2, r1
 8008cca:	601a      	str	r2, [r3, #0]
}
 8008ccc:	46c0      	nop			@ (mov r8, r8)
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	b004      	add	sp, #16
 8008cd2:	bd80      	pop	{r7, pc}
 8008cd4:	080079e9 	.word	0x080079e9
 8008cd8:	08007e19 	.word	0x08007e19
 8008cdc:	08007be1 	.word	0x08007be1

08008ce0 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	b084      	sub	sp, #16
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
 8008ce8:	000a      	movs	r2, r1
 8008cea:	1cbb      	adds	r3, r7, #2
 8008cec:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8008cee:	2300      	movs	r3, #0
 8008cf0:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8008cf2:	1cbb      	adds	r3, r7, #2
 8008cf4:	881b      	ldrh	r3, [r3, #0]
 8008cf6:	2201      	movs	r2, #1
 8008cf8:	4013      	ands	r3, r2
 8008cfa:	d010      	beq.n	8008d1e <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	2242      	movs	r2, #66	@ 0x42
 8008d00:	4313      	orrs	r3, r2
 8008d02:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2241      	movs	r2, #65	@ 0x41
 8008d08:	5c9b      	ldrb	r3, [r3, r2]
 8008d0a:	b2db      	uxtb	r3, r3
 8008d0c:	001a      	movs	r2, r3
 8008d0e:	2328      	movs	r3, #40	@ 0x28
 8008d10:	4013      	ands	r3, r2
 8008d12:	2b28      	cmp	r3, #40	@ 0x28
 8008d14:	d003      	beq.n	8008d1e <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	22b0      	movs	r2, #176	@ 0xb0
 8008d1a:	4313      	orrs	r3, r2
 8008d1c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8008d1e:	1cbb      	adds	r3, r7, #2
 8008d20:	881b      	ldrh	r3, [r3, #0]
 8008d22:	2202      	movs	r2, #2
 8008d24:	4013      	ands	r3, r2
 8008d26:	d010      	beq.n	8008d4a <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	2244      	movs	r2, #68	@ 0x44
 8008d2c:	4313      	orrs	r3, r2
 8008d2e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	2241      	movs	r2, #65	@ 0x41
 8008d34:	5c9b      	ldrb	r3, [r3, r2]
 8008d36:	b2db      	uxtb	r3, r3
 8008d38:	001a      	movs	r2, r3
 8008d3a:	2328      	movs	r3, #40	@ 0x28
 8008d3c:	4013      	ands	r3, r2
 8008d3e:	2b28      	cmp	r3, #40	@ 0x28
 8008d40:	d003      	beq.n	8008d4a <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	22b0      	movs	r2, #176	@ 0xb0
 8008d46:	4313      	orrs	r3, r2
 8008d48:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8008d4a:	1cbb      	adds	r3, r7, #2
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	5e9b      	ldrsh	r3, [r3, r2]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	da03      	bge.n	8008d5c <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	22b8      	movs	r2, #184	@ 0xb8
 8008d58:	4313      	orrs	r3, r2
 8008d5a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8008d5c:	1cbb      	adds	r3, r7, #2
 8008d5e:	881b      	ldrh	r3, [r3, #0]
 8008d60:	2b10      	cmp	r3, #16
 8008d62:	d103      	bne.n	8008d6c <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	2290      	movs	r2, #144	@ 0x90
 8008d68:	4313      	orrs	r3, r2
 8008d6a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8008d6c:	1cbb      	adds	r3, r7, #2
 8008d6e:	881b      	ldrh	r3, [r3, #0]
 8008d70:	2b20      	cmp	r3, #32
 8008d72:	d103      	bne.n	8008d7c <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	2220      	movs	r2, #32
 8008d78:	4313      	orrs	r3, r2
 8008d7a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8008d7c:	1cbb      	adds	r3, r7, #2
 8008d7e:	881b      	ldrh	r3, [r3, #0]
 8008d80:	2b40      	cmp	r3, #64	@ 0x40
 8008d82:	d103      	bne.n	8008d8c <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	2240      	movs	r2, #64	@ 0x40
 8008d88:	4313      	orrs	r3, r2
 8008d8a:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	681a      	ldr	r2, [r3, #0]
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	43d9      	mvns	r1, r3
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	400a      	ands	r2, r1
 8008d9c:	601a      	str	r2, [r3, #0]
}
 8008d9e:	46c0      	nop			@ (mov r8, r8)
 8008da0:	46bd      	mov	sp, r7
 8008da2:	b004      	add	sp, #16
 8008da4:	bd80      	pop	{r7, pc}
	...

08008da8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b082      	sub	sp, #8
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
 8008db0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	2241      	movs	r2, #65	@ 0x41
 8008db6:	5c9b      	ldrb	r3, [r3, r2]
 8008db8:	b2db      	uxtb	r3, r3
 8008dba:	2b20      	cmp	r3, #32
 8008dbc:	d138      	bne.n	8008e30 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	2240      	movs	r2, #64	@ 0x40
 8008dc2:	5c9b      	ldrb	r3, [r3, r2]
 8008dc4:	2b01      	cmp	r3, #1
 8008dc6:	d101      	bne.n	8008dcc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008dc8:	2302      	movs	r3, #2
 8008dca:	e032      	b.n	8008e32 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	2240      	movs	r2, #64	@ 0x40
 8008dd0:	2101      	movs	r1, #1
 8008dd2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	2241      	movs	r2, #65	@ 0x41
 8008dd8:	2124      	movs	r1, #36	@ 0x24
 8008dda:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	681a      	ldr	r2, [r3, #0]
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	2101      	movs	r1, #1
 8008de8:	438a      	bics	r2, r1
 8008dea:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	681a      	ldr	r2, [r3, #0]
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	4911      	ldr	r1, [pc, #68]	@ (8008e3c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8008df8:	400a      	ands	r2, r1
 8008dfa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	6819      	ldr	r1, [r3, #0]
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	683a      	ldr	r2, [r7, #0]
 8008e08:	430a      	orrs	r2, r1
 8008e0a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	681a      	ldr	r2, [r3, #0]
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	2101      	movs	r1, #1
 8008e18:	430a      	orrs	r2, r1
 8008e1a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	2241      	movs	r2, #65	@ 0x41
 8008e20:	2120      	movs	r1, #32
 8008e22:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2240      	movs	r2, #64	@ 0x40
 8008e28:	2100      	movs	r1, #0
 8008e2a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	e000      	b.n	8008e32 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008e30:	2302      	movs	r3, #2
  }
}
 8008e32:	0018      	movs	r0, r3
 8008e34:	46bd      	mov	sp, r7
 8008e36:	b002      	add	sp, #8
 8008e38:	bd80      	pop	{r7, pc}
 8008e3a:	46c0      	nop			@ (mov r8, r8)
 8008e3c:	ffffefff 	.word	0xffffefff

08008e40 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b084      	sub	sp, #16
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
 8008e48:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	2241      	movs	r2, #65	@ 0x41
 8008e4e:	5c9b      	ldrb	r3, [r3, r2]
 8008e50:	b2db      	uxtb	r3, r3
 8008e52:	2b20      	cmp	r3, #32
 8008e54:	d139      	bne.n	8008eca <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	2240      	movs	r2, #64	@ 0x40
 8008e5a:	5c9b      	ldrb	r3, [r3, r2]
 8008e5c:	2b01      	cmp	r3, #1
 8008e5e:	d101      	bne.n	8008e64 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008e60:	2302      	movs	r3, #2
 8008e62:	e033      	b.n	8008ecc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	2240      	movs	r2, #64	@ 0x40
 8008e68:	2101      	movs	r1, #1
 8008e6a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	2241      	movs	r2, #65	@ 0x41
 8008e70:	2124      	movs	r1, #36	@ 0x24
 8008e72:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	681a      	ldr	r2, [r3, #0]
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	2101      	movs	r1, #1
 8008e80:	438a      	bics	r2, r1
 8008e82:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	4a11      	ldr	r2, [pc, #68]	@ (8008ed4 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8008e90:	4013      	ands	r3, r2
 8008e92:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008e94:	683b      	ldr	r3, [r7, #0]
 8008e96:	021b      	lsls	r3, r3, #8
 8008e98:	68fa      	ldr	r2, [r7, #12]
 8008e9a:	4313      	orrs	r3, r2
 8008e9c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	68fa      	ldr	r2, [r7, #12]
 8008ea4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	681a      	ldr	r2, [r3, #0]
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	2101      	movs	r1, #1
 8008eb2:	430a      	orrs	r2, r1
 8008eb4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	2241      	movs	r2, #65	@ 0x41
 8008eba:	2120      	movs	r1, #32
 8008ebc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	2240      	movs	r2, #64	@ 0x40
 8008ec2:	2100      	movs	r1, #0
 8008ec4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	e000      	b.n	8008ecc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008eca:	2302      	movs	r3, #2
  }
}
 8008ecc:	0018      	movs	r0, r3
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	b004      	add	sp, #16
 8008ed2:	bd80      	pop	{r7, pc}
 8008ed4:	fffff0ff 	.word	0xfffff0ff

08008ed8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	b088      	sub	sp, #32
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d101      	bne.n	8008eea <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8008ee6:	2301      	movs	r3, #1
 8008ee8:	e0e1      	b.n	80090ae <HAL_I2S_Init+0x1d6>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	2235      	movs	r2, #53	@ 0x35
 8008eee:	5c9b      	ldrb	r3, [r3, r2]
 8008ef0:	b2db      	uxtb	r3, r3
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d107      	bne.n	8008f06 <HAL_I2S_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	2234      	movs	r2, #52	@ 0x34
 8008efa:	2100      	movs	r1, #0
 8008efc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	0018      	movs	r0, r3
 8008f02:	f7fa fded 	bl	8003ae0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	2235      	movs	r2, #53	@ 0x35
 8008f0a:	2102      	movs	r1, #2
 8008f0c:	5499      	strb	r1, [r3, r2]

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	69da      	ldr	r2, [r3, #28]
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	4967      	ldr	r1, [pc, #412]	@ (80090b8 <HAL_I2S_Init+0x1e0>)
 8008f1a:	400a      	ands	r2, r1
 8008f1c:	61da      	str	r2, [r3, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	2202      	movs	r2, #2
 8008f24:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	695b      	ldr	r3, [r3, #20]
 8008f2a:	2b02      	cmp	r3, #2
 8008f2c:	d073      	beq.n	8009016 <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	68db      	ldr	r3, [r3, #12]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d102      	bne.n	8008f3c <HAL_I2S_Init+0x64>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8008f36:	2310      	movs	r3, #16
 8008f38:	617b      	str	r3, [r7, #20]
 8008f3a:	e001      	b.n	8008f40 <HAL_I2S_Init+0x68>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8008f3c:	2320      	movs	r3, #32
 8008f3e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	689b      	ldr	r3, [r3, #8]
 8008f44:	2b20      	cmp	r3, #32
 8008f46:	d802      	bhi.n	8008f4e <HAL_I2S_Init+0x76>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8008f48:	697b      	ldr	r3, [r7, #20]
 8008f4a:	005b      	lsls	r3, r3, #1
 8008f4c:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCC_GetSysClockFreq();
 8008f4e:	f001 f80f 	bl	8009f70 <HAL_RCC_GetSysClockFreq>
 8008f52:	0003      	movs	r3, r0
 8008f54:	60fb      	str	r3, [r7, #12]

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	691a      	ldr	r2, [r3, #16]
 8008f5a:	2380      	movs	r3, #128	@ 0x80
 8008f5c:	009b      	lsls	r3, r3, #2
 8008f5e:	429a      	cmp	r2, r3
 8008f60:	d131      	bne.n	8008fc6 <HAL_I2S_Init+0xee>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	68db      	ldr	r3, [r3, #12]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d016      	beq.n	8008f98 <HAL_I2S_Init+0xc0>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8008f6a:	697b      	ldr	r3, [r7, #20]
 8008f6c:	009b      	lsls	r3, r3, #2
 8008f6e:	0019      	movs	r1, r3
 8008f70:	68f8      	ldr	r0, [r7, #12]
 8008f72:	f7f7 f8e5 	bl	8000140 <__udivsi3>
 8008f76:	0003      	movs	r3, r0
 8008f78:	001a      	movs	r2, r3
 8008f7a:	0013      	movs	r3, r2
 8008f7c:	009b      	lsls	r3, r3, #2
 8008f7e:	189b      	adds	r3, r3, r2
 8008f80:	005b      	lsls	r3, r3, #1
 8008f82:	001a      	movs	r2, r3
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	695b      	ldr	r3, [r3, #20]
 8008f88:	0019      	movs	r1, r3
 8008f8a:	0010      	movs	r0, r2
 8008f8c:	f7f7 f8d8 	bl	8000140 <__udivsi3>
 8008f90:	0003      	movs	r3, r0
 8008f92:	3305      	adds	r3, #5
 8008f94:	613b      	str	r3, [r7, #16]
 8008f96:	e02a      	b.n	8008fee <HAL_I2S_Init+0x116>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8008f98:	697b      	ldr	r3, [r7, #20]
 8008f9a:	00db      	lsls	r3, r3, #3
 8008f9c:	0019      	movs	r1, r3
 8008f9e:	68f8      	ldr	r0, [r7, #12]
 8008fa0:	f7f7 f8ce 	bl	8000140 <__udivsi3>
 8008fa4:	0003      	movs	r3, r0
 8008fa6:	001a      	movs	r2, r3
 8008fa8:	0013      	movs	r3, r2
 8008faa:	009b      	lsls	r3, r3, #2
 8008fac:	189b      	adds	r3, r3, r2
 8008fae:	005b      	lsls	r3, r3, #1
 8008fb0:	001a      	movs	r2, r3
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	695b      	ldr	r3, [r3, #20]
 8008fb6:	0019      	movs	r1, r3
 8008fb8:	0010      	movs	r0, r2
 8008fba:	f7f7 f8c1 	bl	8000140 <__udivsi3>
 8008fbe:	0003      	movs	r3, r0
 8008fc0:	3305      	adds	r3, #5
 8008fc2:	613b      	str	r3, [r7, #16]
 8008fc4:	e013      	b.n	8008fee <HAL_I2S_Init+0x116>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8008fc6:	6979      	ldr	r1, [r7, #20]
 8008fc8:	68f8      	ldr	r0, [r7, #12]
 8008fca:	f7f7 f8b9 	bl	8000140 <__udivsi3>
 8008fce:	0003      	movs	r3, r0
 8008fd0:	001a      	movs	r2, r3
 8008fd2:	0013      	movs	r3, r2
 8008fd4:	009b      	lsls	r3, r3, #2
 8008fd6:	189b      	adds	r3, r3, r2
 8008fd8:	005b      	lsls	r3, r3, #1
 8008fda:	001a      	movs	r2, r3
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	695b      	ldr	r3, [r3, #20]
 8008fe0:	0019      	movs	r1, r3
 8008fe2:	0010      	movs	r0, r2
 8008fe4:	f7f7 f8ac 	bl	8000140 <__udivsi3>
 8008fe8:	0003      	movs	r3, r0
 8008fea:	3305      	adds	r3, #5
 8008fec:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8008fee:	693b      	ldr	r3, [r7, #16]
 8008ff0:	210a      	movs	r1, #10
 8008ff2:	0018      	movs	r0, r3
 8008ff4:	f7f7 f8a4 	bl	8000140 <__udivsi3>
 8008ff8:	0003      	movs	r3, r0
 8008ffa:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8008ffc:	693b      	ldr	r3, [r7, #16]
 8008ffe:	2201      	movs	r2, #1
 8009000:	4013      	ands	r3, r2
 8009002:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8009004:	693a      	ldr	r2, [r7, #16]
 8009006:	69bb      	ldr	r3, [r7, #24]
 8009008:	1ad3      	subs	r3, r2, r3
 800900a:	085b      	lsrs	r3, r3, #1
 800900c:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800900e:	69bb      	ldr	r3, [r7, #24]
 8009010:	021b      	lsls	r3, r3, #8
 8009012:	61bb      	str	r3, [r7, #24]
 8009014:	e003      	b.n	800901e <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8009016:	2302      	movs	r3, #2
 8009018:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800901a:	2300      	movs	r3, #0
 800901c:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800901e:	69fb      	ldr	r3, [r7, #28]
 8009020:	2b01      	cmp	r3, #1
 8009022:	d902      	bls.n	800902a <HAL_I2S_Init+0x152>
 8009024:	69fb      	ldr	r3, [r7, #28]
 8009026:	2bff      	cmp	r3, #255	@ 0xff
 8009028:	d907      	bls.n	800903a <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800902e:	2210      	movs	r2, #16
 8009030:	431a      	orrs	r2, r3
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	639a      	str	r2, [r3, #56]	@ 0x38
    return  HAL_ERROR;
 8009036:	2301      	movs	r3, #1
 8009038:	e039      	b.n	80090ae <HAL_I2S_Init+0x1d6>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	691a      	ldr	r2, [r3, #16]
 800903e:	69bb      	ldr	r3, [r7, #24]
 8009040:	431a      	orrs	r2, r3
 8009042:	0011      	movs	r1, r2
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	69fa      	ldr	r2, [r7, #28]
 800904a:	430a      	orrs	r2, r1
 800904c:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	69db      	ldr	r3, [r3, #28]
 8009054:	4a18      	ldr	r2, [pc, #96]	@ (80090b8 <HAL_I2S_Init+0x1e0>)
 8009056:	401a      	ands	r2, r3
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	6859      	ldr	r1, [r3, #4]
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	689b      	ldr	r3, [r3, #8]
 8009060:	4319      	orrs	r1, r3
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	68db      	ldr	r3, [r3, #12]
 8009066:	4319      	orrs	r1, r3
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	699b      	ldr	r3, [r3, #24]
 800906c:	430b      	orrs	r3, r1
 800906e:	431a      	orrs	r2, r3
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	2180      	movs	r1, #128	@ 0x80
 8009076:	0109      	lsls	r1, r1, #4
 8009078:	430a      	orrs	r2, r1
 800907a:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	689b      	ldr	r3, [r3, #8]
 8009080:	2b30      	cmp	r3, #48	@ 0x30
 8009082:	d003      	beq.n	800908c <HAL_I2S_Init+0x1b4>
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	689b      	ldr	r3, [r3, #8]
 8009088:	2bb0      	cmp	r3, #176	@ 0xb0
 800908a:	d108      	bne.n	800909e <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	69da      	ldr	r2, [r3, #28]
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	2180      	movs	r1, #128	@ 0x80
 8009098:	0149      	lsls	r1, r1, #5
 800909a:	430a      	orrs	r2, r1
 800909c:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	2200      	movs	r2, #0
 80090a2:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	2235      	movs	r2, #53	@ 0x35
 80090a8:	2101      	movs	r1, #1
 80090aa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80090ac:	2300      	movs	r3, #0
}
 80090ae:	0018      	movs	r0, r3
 80090b0:	46bd      	mov	sp, r7
 80090b2:	b008      	add	sp, #32
 80090b4:	bd80      	pop	{r7, pc}
 80090b6:	46c0      	nop			@ (mov r8, r8)
 80090b8:	fffff040 	.word	0xfffff040

080090bc <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b086      	sub	sp, #24
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	60f8      	str	r0, [r7, #12]
 80090c4:	60b9      	str	r1, [r7, #8]
 80090c6:	1dbb      	adds	r3, r7, #6
 80090c8:	801a      	strh	r2, [r3, #0]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 80090ca:	68bb      	ldr	r3, [r7, #8]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d003      	beq.n	80090d8 <HAL_I2S_Receive_DMA+0x1c>
 80090d0:	1dbb      	adds	r3, r7, #6
 80090d2:	881b      	ldrh	r3, [r3, #0]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d101      	bne.n	80090dc <HAL_I2S_Receive_DMA+0x20>
  {
    return  HAL_ERROR;
 80090d8:	2301      	movs	r3, #1
 80090da:	e0a6      	b.n	800922a <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	2234      	movs	r2, #52	@ 0x34
 80090e0:	5c9b      	ldrb	r3, [r3, r2]
 80090e2:	b2db      	uxtb	r3, r3
 80090e4:	2b01      	cmp	r3, #1
 80090e6:	d101      	bne.n	80090ec <HAL_I2S_Receive_DMA+0x30>
 80090e8:	2302      	movs	r3, #2
 80090ea:	e09e      	b.n	800922a <HAL_I2S_Receive_DMA+0x16e>
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	2234      	movs	r2, #52	@ 0x34
 80090f0:	2101      	movs	r1, #1
 80090f2:	5499      	strb	r1, [r3, r2]

  if (hi2s->State != HAL_I2S_STATE_READY)
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	2235      	movs	r2, #53	@ 0x35
 80090f8:	5c9b      	ldrb	r3, [r3, r2]
 80090fa:	b2db      	uxtb	r3, r3
 80090fc:	2b01      	cmp	r3, #1
 80090fe:	d005      	beq.n	800910c <HAL_I2S_Receive_DMA+0x50>
  {
    __HAL_UNLOCK(hi2s);
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	2234      	movs	r2, #52	@ 0x34
 8009104:	2100      	movs	r1, #0
 8009106:	5499      	strb	r1, [r3, r2]
    return HAL_BUSY;
 8009108:	2302      	movs	r3, #2
 800910a:	e08e      	b.n	800922a <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	2235      	movs	r2, #53	@ 0x35
 8009110:	2104      	movs	r1, #4
 8009112:	5499      	strb	r1, [r3, r2]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	2200      	movs	r2, #0
 8009118:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->pRxBuffPtr = pData;
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	68ba      	ldr	r2, [r7, #8]
 800911e:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	69db      	ldr	r3, [r3, #28]
 8009126:	2207      	movs	r2, #7
 8009128:	4013      	ands	r3, r2
 800912a:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 800912c:	697b      	ldr	r3, [r7, #20]
 800912e:	2b03      	cmp	r3, #3
 8009130:	d002      	beq.n	8009138 <HAL_I2S_Receive_DMA+0x7c>
 8009132:	697b      	ldr	r3, [r7, #20]
 8009134:	2b05      	cmp	r3, #5
 8009136:	d10c      	bne.n	8009152 <HAL_I2S_Receive_DMA+0x96>
  {
    hi2s->RxXferSize = (Size << 1U);
 8009138:	1dbb      	adds	r3, r7, #6
 800913a:	881b      	ldrh	r3, [r3, #0]
 800913c:	18db      	adds	r3, r3, r3
 800913e:	b29a      	uxth	r2, r3
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = (Size << 1U);
 8009144:	1dbb      	adds	r3, r7, #6
 8009146:	881b      	ldrh	r3, [r3, #0]
 8009148:	18db      	adds	r3, r3, r3
 800914a:	b29a      	uxth	r2, r3
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8009150:	e007      	b.n	8009162 <HAL_I2S_Receive_DMA+0xa6>
  }
  else
  {
    hi2s->RxXferSize = Size;
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	1dba      	adds	r2, r7, #6
 8009156:	8812      	ldrh	r2, [r2, #0]
 8009158:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = Size;
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	1dba      	adds	r2, r7, #6
 800915e:	8812      	ldrh	r2, [r2, #0]
 8009160:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009166:	4a33      	ldr	r2, [pc, #204]	@ (8009234 <HAL_I2S_Receive_DMA+0x178>)
 8009168:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800916e:	4a32      	ldr	r2, [pc, #200]	@ (8009238 <HAL_I2S_Receive_DMA+0x17c>)
 8009170:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009176:	4a31      	ldr	r2, [pc, #196]	@ (800923c <HAL_I2S_Receive_DMA+0x180>)
 8009178:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	69da      	ldr	r2, [r3, #28]
 8009180:	23c0      	movs	r3, #192	@ 0xc0
 8009182:	009b      	lsls	r3, r3, #2
 8009184:	401a      	ands	r2, r3
 8009186:	23c0      	movs	r3, #192	@ 0xc0
 8009188:	009b      	lsls	r3, r3, #2
 800918a:	429a      	cmp	r2, r3
 800918c:	d10a      	bne.n	80091a4 <HAL_I2S_Receive_DMA+0xe8>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800918e:	2300      	movs	r3, #0
 8009190:	613b      	str	r3, [r7, #16]
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	68db      	ldr	r3, [r3, #12]
 8009198:	613b      	str	r3, [r7, #16]
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	689b      	ldr	r3, [r3, #8]
 80091a0:	613b      	str	r3, [r7, #16]
 80091a2:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	330c      	adds	r3, #12
 80091ae:	0019      	movs	r1, r3
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091b4:	001a      	movs	r2, r3
                                 hi2s->RxXferSize))
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80091ba:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 80091bc:	f7fd faf0 	bl	80067a0 <HAL_DMA_Start_IT>
 80091c0:	1e03      	subs	r3, r0, #0
 80091c2:	d00f      	beq.n	80091e4 <HAL_I2S_Receive_DMA+0x128>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091c8:	2208      	movs	r2, #8
 80091ca:	431a      	orrs	r2, r3
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	639a      	str	r2, [r3, #56]	@ 0x38
    hi2s->State = HAL_I2S_STATE_READY;
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	2235      	movs	r2, #53	@ 0x35
 80091d4:	2101      	movs	r1, #1
 80091d6:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hi2s);
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	2234      	movs	r2, #52	@ 0x34
 80091dc:	2100      	movs	r1, #0
 80091de:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80091e0:	2301      	movs	r3, #1
 80091e2:	e022      	b.n	800922a <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	69da      	ldr	r2, [r3, #28]
 80091ea:	2380      	movs	r3, #128	@ 0x80
 80091ec:	00db      	lsls	r3, r3, #3
 80091ee:	4013      	ands	r3, r2
 80091f0:	d108      	bne.n	8009204 <HAL_I2S_Receive_DMA+0x148>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	69da      	ldr	r2, [r3, #28]
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	2180      	movs	r1, #128	@ 0x80
 80091fe:	00c9      	lsls	r1, r1, #3
 8009200:	430a      	orrs	r2, r1
 8009202:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	685b      	ldr	r3, [r3, #4]
 800920a:	2201      	movs	r2, #1
 800920c:	4013      	ands	r3, r2
 800920e:	d107      	bne.n	8009220 <HAL_I2S_Receive_DMA+0x164>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	685a      	ldr	r2, [r3, #4]
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	2101      	movs	r1, #1
 800921c:	430a      	orrs	r2, r1
 800921e:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	2234      	movs	r2, #52	@ 0x34
 8009224:	2100      	movs	r1, #0
 8009226:	5499      	strb	r1, [r3, r2]
  return HAL_OK;
 8009228:	2300      	movs	r3, #0
}
 800922a:	0018      	movs	r0, r3
 800922c:	46bd      	mov	sp, r7
 800922e:	b006      	add	sp, #24
 8009230:	bd80      	pop	{r7, pc}
 8009232:	46c0      	nop			@ (mov r8, r8)
 8009234:	0800943d 	.word	0x0800943d
 8009238:	080093f9 	.word	0x080093f9
 800923c:	0800945b 	.word	0x0800945b

08009240 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 8009240:	b580      	push	{r7, lr}
 8009242:	b086      	sub	sp, #24
 8009244:	af00      	add	r7, sp, #0
 8009246:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009248:	2317      	movs	r3, #23
 800924a:	18fb      	adds	r3, r7, r3
 800924c:	2200      	movs	r2, #0
 800924e:	701a      	strb	r2, [r3, #0]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	685a      	ldr	r2, [r3, #4]
 8009254:	2380      	movs	r3, #128	@ 0x80
 8009256:	009b      	lsls	r3, r3, #2
 8009258:	429a      	cmp	r2, r3
 800925a:	d003      	beq.n	8009264 <HAL_I2S_DMAStop+0x24>
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	685b      	ldr	r3, [r3, #4]
 8009260:	2b00      	cmp	r3, #0
 8009262:	d158      	bne.n	8009316 <HAL_I2S_DMAStop+0xd6>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009268:	2b00      	cmp	r3, #0
 800926a:	d010      	beq.n	800928e <HAL_I2S_DMAStop+0x4e>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009270:	0018      	movs	r0, r3
 8009272:	f7fd fafb 	bl	800686c <HAL_DMA_Abort>
 8009276:	1e03      	subs	r3, r0, #0
 8009278:	d009      	beq.n	800928e <HAL_I2S_DMAStop+0x4e>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800927e:	2208      	movs	r2, #8
 8009280:	431a      	orrs	r2, r3
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 8009286:	2317      	movs	r3, #23
 8009288:	18fb      	adds	r3, r7, r3
 800928a:	2201      	movs	r2, #1
 800928c:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 800928e:	6878      	ldr	r0, [r7, #4]
 8009290:	2364      	movs	r3, #100	@ 0x64
 8009292:	2201      	movs	r2, #1
 8009294:	2102      	movs	r1, #2
 8009296:	f000 f907 	bl	80094a8 <I2S_WaitFlagStateUntilTimeout>
 800929a:	1e03      	subs	r3, r0, #0
 800929c:	d00d      	beq.n	80092ba <HAL_I2S_DMAStop+0x7a>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092a2:	2201      	movs	r2, #1
 80092a4:	431a      	orrs	r2, r3
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	2235      	movs	r2, #53	@ 0x35
 80092ae:	2101      	movs	r1, #1
 80092b0:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 80092b2:	2317      	movs	r3, #23
 80092b4:	18fb      	adds	r3, r7, r3
 80092b6:	2201      	movs	r2, #1
 80092b8:	701a      	strb	r2, [r3, #0]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 80092ba:	6878      	ldr	r0, [r7, #4]
 80092bc:	2364      	movs	r3, #100	@ 0x64
 80092be:	2200      	movs	r2, #0
 80092c0:	2180      	movs	r1, #128	@ 0x80
 80092c2:	f000 f8f1 	bl	80094a8 <I2S_WaitFlagStateUntilTimeout>
 80092c6:	1e03      	subs	r3, r0, #0
 80092c8:	d00d      	beq.n	80092e6 <HAL_I2S_DMAStop+0xa6>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092ce:	2201      	movs	r2, #1
 80092d0:	431a      	orrs	r2, r3
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	2235      	movs	r2, #53	@ 0x35
 80092da:	2101      	movs	r1, #1
 80092dc:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 80092de:	2317      	movs	r3, #23
 80092e0:	18fb      	adds	r3, r7, r3
 80092e2:	2201      	movs	r2, #1
 80092e4:	701a      	strb	r2, [r3, #0]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	69da      	ldr	r2, [r3, #28]
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	4938      	ldr	r1, [pc, #224]	@ (80093d4 <HAL_I2S_DMAStop+0x194>)
 80092f2:	400a      	ands	r2, r1
 80092f4:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80092f6:	2300      	movs	r3, #0
 80092f8:	613b      	str	r3, [r7, #16]
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	689b      	ldr	r3, [r3, #8]
 8009300:	613b      	str	r3, [r7, #16]
 8009302:	693b      	ldr	r3, [r7, #16]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	685a      	ldr	r2, [r3, #4]
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	2102      	movs	r1, #2
 8009310:	438a      	bics	r2, r1
 8009312:	605a      	str	r2, [r3, #4]
 8009314:	e053      	b.n	80093be <HAL_I2S_DMAStop+0x17e>

  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	685a      	ldr	r2, [r3, #4]
 800931a:	23c0      	movs	r3, #192	@ 0xc0
 800931c:	009b      	lsls	r3, r3, #2
 800931e:	429a      	cmp	r2, r3
 8009320:	d005      	beq.n	800932e <HAL_I2S_DMAStop+0xee>
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	685a      	ldr	r2, [r3, #4]
 8009326:	2380      	movs	r3, #128	@ 0x80
 8009328:	005b      	lsls	r3, r3, #1
 800932a:	429a      	cmp	r2, r3
 800932c:	d147      	bne.n	80093be <HAL_I2S_DMAStop+0x17e>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009332:	2b00      	cmp	r3, #0
 8009334:	d010      	beq.n	8009358 <HAL_I2S_DMAStop+0x118>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800933a:	0018      	movs	r0, r3
 800933c:	f7fd fa96 	bl	800686c <HAL_DMA_Abort>
 8009340:	1e03      	subs	r3, r0, #0
 8009342:	d009      	beq.n	8009358 <HAL_I2S_DMAStop+0x118>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009348:	2208      	movs	r2, #8
 800934a:	431a      	orrs	r2, r3
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 8009350:	2317      	movs	r3, #23
 8009352:	18fb      	adds	r3, r7, r3
 8009354:	2201      	movs	r2, #1
 8009356:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	69da      	ldr	r2, [r3, #28]
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	491c      	ldr	r1, [pc, #112]	@ (80093d4 <HAL_I2S_DMAStop+0x194>)
 8009364:	400a      	ands	r2, r1
 8009366:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8009368:	2300      	movs	r3, #0
 800936a:	60fb      	str	r3, [r7, #12]
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	68db      	ldr	r3, [r3, #12]
 8009372:	60fb      	str	r3, [r7, #12]
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	689b      	ldr	r3, [r3, #8]
 800937a:	60fb      	str	r3, [r7, #12]
 800937c:	68fb      	ldr	r3, [r7, #12]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	685a      	ldr	r2, [r3, #4]
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	2101      	movs	r1, #1
 800938a:	438a      	bics	r2, r1
 800938c:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	685a      	ldr	r2, [r3, #4]
 8009392:	2380      	movs	r3, #128	@ 0x80
 8009394:	005b      	lsls	r3, r3, #1
 8009396:	429a      	cmp	r2, r3
 8009398:	d10e      	bne.n	80093b8 <HAL_I2S_DMAStop+0x178>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800939e:	2240      	movs	r2, #64	@ 0x40
 80093a0:	431a      	orrs	r2, r3
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	2235      	movs	r2, #53	@ 0x35
 80093aa:	2101      	movs	r1, #1
 80093ac:	5499      	strb	r1, [r3, r2]
      errorcode = HAL_ERROR;
 80093ae:	2317      	movs	r3, #23
 80093b0:	18fb      	adds	r3, r7, r3
 80093b2:	2201      	movs	r2, #1
 80093b4:	701a      	strb	r2, [r3, #0]
 80093b6:	e002      	b.n	80093be <HAL_I2S_DMAStop+0x17e>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	2235      	movs	r2, #53	@ 0x35
 80093c2:	2101      	movs	r1, #1
 80093c4:	5499      	strb	r1, [r3, r2]

  return errorcode;
 80093c6:	2317      	movs	r3, #23
 80093c8:	18fb      	adds	r3, r7, r3
 80093ca:	781b      	ldrb	r3, [r3, #0]
}
 80093cc:	0018      	movs	r0, r3
 80093ce:	46bd      	mov	sp, r7
 80093d0:	b006      	add	sp, #24
 80093d2:	bd80      	pop	{r7, pc}
 80093d4:	fffffbff 	.word	0xfffffbff

080093d8 <HAL_I2S_RxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80093d8:	b580      	push	{r7, lr}
 80093da:	b082      	sub	sp, #8
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxHalfCpltCallback could be implemented in the user file
   */
}
 80093e0:	46c0      	nop			@ (mov r8, r8)
 80093e2:	46bd      	mov	sp, r7
 80093e4:	b002      	add	sp, #8
 80093e6:	bd80      	pop	{r7, pc}

080093e8 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80093e8:	b580      	push	{r7, lr}
 80093ea:	b082      	sub	sp, #8
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80093f0:	46c0      	nop			@ (mov r8, r8)
 80093f2:	46bd      	mov	sp, r7
 80093f4:	b002      	add	sp, #8
 80093f6:	bd80      	pop	{r7, pc}

080093f8 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b084      	sub	sp, #16
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009404:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	69db      	ldr	r3, [r3, #28]
 800940a:	2b00      	cmp	r3, #0
 800940c:	d10e      	bne.n	800942c <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	685a      	ldr	r2, [r3, #4]
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	2101      	movs	r1, #1
 800941a:	438a      	bics	r2, r1
 800941c:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	2200      	movs	r2, #0
 8009422:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	2235      	movs	r2, #53	@ 0x35
 8009428:	2101      	movs	r1, #1
 800942a:	5499      	strb	r1, [r3, r2]
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	0018      	movs	r0, r3
 8009430:	f7fa ff34 	bl	800429c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8009434:	46c0      	nop			@ (mov r8, r8)
 8009436:	46bd      	mov	sp, r7
 8009438:	b004      	add	sp, #16
 800943a:	bd80      	pop	{r7, pc}

0800943c <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800943c:	b580      	push	{r7, lr}
 800943e:	b084      	sub	sp, #16
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009448:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	0018      	movs	r0, r3
 800944e:	f7ff ffc3 	bl	80093d8 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8009452:	46c0      	nop			@ (mov r8, r8)
 8009454:	46bd      	mov	sp, r7
 8009456:	b004      	add	sp, #16
 8009458:	bd80      	pop	{r7, pc}

0800945a <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 800945a:	b580      	push	{r7, lr}
 800945c:	b084      	sub	sp, #16
 800945e:	af00      	add	r7, sp, #0
 8009460:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009466:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	685a      	ldr	r2, [r3, #4]
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	2103      	movs	r1, #3
 8009474:	438a      	bics	r2, r1
 8009476:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	2200      	movs	r2, #0
 800947c:	845a      	strh	r2, [r3, #34]	@ 0x22
  hi2s->RxXferCount = 0U;
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	2200      	movs	r2, #0
 8009482:	855a      	strh	r2, [r3, #42]	@ 0x2a

  hi2s->State = HAL_I2S_STATE_READY;
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	2235      	movs	r2, #53	@ 0x35
 8009488:	2101      	movs	r1, #1
 800948a:	5499      	strb	r1, [r3, r2]

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009490:	2208      	movs	r2, #8
 8009492:	431a      	orrs	r2, r3
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	0018      	movs	r0, r3
 800949c:	f7ff ffa4 	bl	80093e8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80094a0:	46c0      	nop			@ (mov r8, r8)
 80094a2:	46bd      	mov	sp, r7
 80094a4:	b004      	add	sp, #16
 80094a6:	bd80      	pop	{r7, pc}

080094a8 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 80094a8:	b580      	push	{r7, lr}
 80094aa:	b086      	sub	sp, #24
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	60f8      	str	r0, [r7, #12]
 80094b0:	60b9      	str	r1, [r7, #8]
 80094b2:	603b      	str	r3, [r7, #0]
 80094b4:	1dfb      	adds	r3, r7, #7
 80094b6:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 80094b8:	f7fc ffee 	bl	8006498 <HAL_GetTick>
 80094bc:	0003      	movs	r3, r0
 80094be:	617b      	str	r3, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 80094c0:	e017      	b.n	80094f2 <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 80094c2:	683b      	ldr	r3, [r7, #0]
 80094c4:	3301      	adds	r3, #1
 80094c6:	d014      	beq.n	80094f2 <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 80094c8:	f7fc ffe6 	bl	8006498 <HAL_GetTick>
 80094cc:	0002      	movs	r2, r0
 80094ce:	697b      	ldr	r3, [r7, #20]
 80094d0:	1ad3      	subs	r3, r2, r3
 80094d2:	683a      	ldr	r2, [r7, #0]
 80094d4:	429a      	cmp	r2, r3
 80094d6:	d902      	bls.n	80094de <I2S_WaitFlagStateUntilTimeout+0x36>
 80094d8:	683b      	ldr	r3, [r7, #0]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d109      	bne.n	80094f2 <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	2235      	movs	r2, #53	@ 0x35
 80094e2:	2101      	movs	r1, #1
 80094e4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	2234      	movs	r2, #52	@ 0x34
 80094ea:	2100      	movs	r1, #0
 80094ec:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80094ee:	2303      	movs	r3, #3
 80094f0:	e00f      	b.n	8009512 <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	689b      	ldr	r3, [r3, #8]
 80094f8:	68ba      	ldr	r2, [r7, #8]
 80094fa:	4013      	ands	r3, r2
 80094fc:	68ba      	ldr	r2, [r7, #8]
 80094fe:	1ad3      	subs	r3, r2, r3
 8009500:	425a      	negs	r2, r3
 8009502:	4153      	adcs	r3, r2
 8009504:	b2db      	uxtb	r3, r3
 8009506:	001a      	movs	r2, r3
 8009508:	1dfb      	adds	r3, r7, #7
 800950a:	781b      	ldrb	r3, [r3, #0]
 800950c:	429a      	cmp	r2, r3
 800950e:	d1d8      	bne.n	80094c2 <I2S_WaitFlagStateUntilTimeout+0x1a>
      }
    }
  }
  return HAL_OK;
 8009510:	2300      	movs	r3, #0
}
 8009512:	0018      	movs	r0, r3
 8009514:	46bd      	mov	sp, r7
 8009516:	b006      	add	sp, #24
 8009518:	bd80      	pop	{r7, pc}
	...

0800951c <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800951c:	b580      	push	{r7, lr}
 800951e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 8009520:	4b04      	ldr	r3, [pc, #16]	@ (8009534 <HAL_PWR_EnableBkUpAccess+0x18>)
 8009522:	681a      	ldr	r2, [r3, #0]
 8009524:	4b03      	ldr	r3, [pc, #12]	@ (8009534 <HAL_PWR_EnableBkUpAccess+0x18>)
 8009526:	2180      	movs	r1, #128	@ 0x80
 8009528:	0049      	lsls	r1, r1, #1
 800952a:	430a      	orrs	r2, r1
 800952c:	601a      	str	r2, [r3, #0]
}
 800952e:	46c0      	nop			@ (mov r8, r8)
 8009530:	46bd      	mov	sp, r7
 8009532:	bd80      	pop	{r7, pc}
 8009534:	40007000 	.word	0x40007000

08009538 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009538:	b5b0      	push	{r4, r5, r7, lr}
 800953a:	b08a      	sub	sp, #40	@ 0x28
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	2b00      	cmp	r3, #0
 8009544:	d102      	bne.n	800954c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8009546:	2301      	movs	r3, #1
 8009548:	f000 fbbf 	bl	8009cca <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800954c:	4bc9      	ldr	r3, [pc, #804]	@ (8009874 <HAL_RCC_OscConfig+0x33c>)
 800954e:	68db      	ldr	r3, [r3, #12]
 8009550:	220c      	movs	r2, #12
 8009552:	4013      	ands	r3, r2
 8009554:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009556:	4bc7      	ldr	r3, [pc, #796]	@ (8009874 <HAL_RCC_OscConfig+0x33c>)
 8009558:	68da      	ldr	r2, [r3, #12]
 800955a:	2380      	movs	r3, #128	@ 0x80
 800955c:	025b      	lsls	r3, r3, #9
 800955e:	4013      	ands	r3, r2
 8009560:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	2201      	movs	r2, #1
 8009568:	4013      	ands	r3, r2
 800956a:	d100      	bne.n	800956e <HAL_RCC_OscConfig+0x36>
 800956c:	e07e      	b.n	800966c <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800956e:	69fb      	ldr	r3, [r7, #28]
 8009570:	2b08      	cmp	r3, #8
 8009572:	d007      	beq.n	8009584 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8009574:	69fb      	ldr	r3, [r7, #28]
 8009576:	2b0c      	cmp	r3, #12
 8009578:	d112      	bne.n	80095a0 <HAL_RCC_OscConfig+0x68>
 800957a:	69ba      	ldr	r2, [r7, #24]
 800957c:	2380      	movs	r3, #128	@ 0x80
 800957e:	025b      	lsls	r3, r3, #9
 8009580:	429a      	cmp	r2, r3
 8009582:	d10d      	bne.n	80095a0 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009584:	4bbb      	ldr	r3, [pc, #748]	@ (8009874 <HAL_RCC_OscConfig+0x33c>)
 8009586:	681a      	ldr	r2, [r3, #0]
 8009588:	2380      	movs	r3, #128	@ 0x80
 800958a:	029b      	lsls	r3, r3, #10
 800958c:	4013      	ands	r3, r2
 800958e:	d100      	bne.n	8009592 <HAL_RCC_OscConfig+0x5a>
 8009590:	e06b      	b.n	800966a <HAL_RCC_OscConfig+0x132>
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	685b      	ldr	r3, [r3, #4]
 8009596:	2b00      	cmp	r3, #0
 8009598:	d167      	bne.n	800966a <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800959a:	2301      	movs	r3, #1
 800959c:	f000 fb95 	bl	8009cca <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	685a      	ldr	r2, [r3, #4]
 80095a4:	2380      	movs	r3, #128	@ 0x80
 80095a6:	025b      	lsls	r3, r3, #9
 80095a8:	429a      	cmp	r2, r3
 80095aa:	d107      	bne.n	80095bc <HAL_RCC_OscConfig+0x84>
 80095ac:	4bb1      	ldr	r3, [pc, #708]	@ (8009874 <HAL_RCC_OscConfig+0x33c>)
 80095ae:	681a      	ldr	r2, [r3, #0]
 80095b0:	4bb0      	ldr	r3, [pc, #704]	@ (8009874 <HAL_RCC_OscConfig+0x33c>)
 80095b2:	2180      	movs	r1, #128	@ 0x80
 80095b4:	0249      	lsls	r1, r1, #9
 80095b6:	430a      	orrs	r2, r1
 80095b8:	601a      	str	r2, [r3, #0]
 80095ba:	e027      	b.n	800960c <HAL_RCC_OscConfig+0xd4>
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	685a      	ldr	r2, [r3, #4]
 80095c0:	23a0      	movs	r3, #160	@ 0xa0
 80095c2:	02db      	lsls	r3, r3, #11
 80095c4:	429a      	cmp	r2, r3
 80095c6:	d10e      	bne.n	80095e6 <HAL_RCC_OscConfig+0xae>
 80095c8:	4baa      	ldr	r3, [pc, #680]	@ (8009874 <HAL_RCC_OscConfig+0x33c>)
 80095ca:	681a      	ldr	r2, [r3, #0]
 80095cc:	4ba9      	ldr	r3, [pc, #676]	@ (8009874 <HAL_RCC_OscConfig+0x33c>)
 80095ce:	2180      	movs	r1, #128	@ 0x80
 80095d0:	02c9      	lsls	r1, r1, #11
 80095d2:	430a      	orrs	r2, r1
 80095d4:	601a      	str	r2, [r3, #0]
 80095d6:	4ba7      	ldr	r3, [pc, #668]	@ (8009874 <HAL_RCC_OscConfig+0x33c>)
 80095d8:	681a      	ldr	r2, [r3, #0]
 80095da:	4ba6      	ldr	r3, [pc, #664]	@ (8009874 <HAL_RCC_OscConfig+0x33c>)
 80095dc:	2180      	movs	r1, #128	@ 0x80
 80095de:	0249      	lsls	r1, r1, #9
 80095e0:	430a      	orrs	r2, r1
 80095e2:	601a      	str	r2, [r3, #0]
 80095e4:	e012      	b.n	800960c <HAL_RCC_OscConfig+0xd4>
 80095e6:	4ba3      	ldr	r3, [pc, #652]	@ (8009874 <HAL_RCC_OscConfig+0x33c>)
 80095e8:	681a      	ldr	r2, [r3, #0]
 80095ea:	4ba2      	ldr	r3, [pc, #648]	@ (8009874 <HAL_RCC_OscConfig+0x33c>)
 80095ec:	49a2      	ldr	r1, [pc, #648]	@ (8009878 <HAL_RCC_OscConfig+0x340>)
 80095ee:	400a      	ands	r2, r1
 80095f0:	601a      	str	r2, [r3, #0]
 80095f2:	4ba0      	ldr	r3, [pc, #640]	@ (8009874 <HAL_RCC_OscConfig+0x33c>)
 80095f4:	681a      	ldr	r2, [r3, #0]
 80095f6:	2380      	movs	r3, #128	@ 0x80
 80095f8:	025b      	lsls	r3, r3, #9
 80095fa:	4013      	ands	r3, r2
 80095fc:	60fb      	str	r3, [r7, #12]
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	4b9c      	ldr	r3, [pc, #624]	@ (8009874 <HAL_RCC_OscConfig+0x33c>)
 8009602:	681a      	ldr	r2, [r3, #0]
 8009604:	4b9b      	ldr	r3, [pc, #620]	@ (8009874 <HAL_RCC_OscConfig+0x33c>)
 8009606:	499d      	ldr	r1, [pc, #628]	@ (800987c <HAL_RCC_OscConfig+0x344>)
 8009608:	400a      	ands	r2, r1
 800960a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	685b      	ldr	r3, [r3, #4]
 8009610:	2b00      	cmp	r3, #0
 8009612:	d015      	beq.n	8009640 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009614:	f7fc ff40 	bl	8006498 <HAL_GetTick>
 8009618:	0003      	movs	r3, r0
 800961a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800961c:	e009      	b.n	8009632 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800961e:	f7fc ff3b 	bl	8006498 <HAL_GetTick>
 8009622:	0002      	movs	r2, r0
 8009624:	697b      	ldr	r3, [r7, #20]
 8009626:	1ad3      	subs	r3, r2, r3
 8009628:	2b64      	cmp	r3, #100	@ 0x64
 800962a:	d902      	bls.n	8009632 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800962c:	2303      	movs	r3, #3
 800962e:	f000 fb4c 	bl	8009cca <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009632:	4b90      	ldr	r3, [pc, #576]	@ (8009874 <HAL_RCC_OscConfig+0x33c>)
 8009634:	681a      	ldr	r2, [r3, #0]
 8009636:	2380      	movs	r3, #128	@ 0x80
 8009638:	029b      	lsls	r3, r3, #10
 800963a:	4013      	ands	r3, r2
 800963c:	d0ef      	beq.n	800961e <HAL_RCC_OscConfig+0xe6>
 800963e:	e015      	b.n	800966c <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009640:	f7fc ff2a 	bl	8006498 <HAL_GetTick>
 8009644:	0003      	movs	r3, r0
 8009646:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009648:	e008      	b.n	800965c <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800964a:	f7fc ff25 	bl	8006498 <HAL_GetTick>
 800964e:	0002      	movs	r2, r0
 8009650:	697b      	ldr	r3, [r7, #20]
 8009652:	1ad3      	subs	r3, r2, r3
 8009654:	2b64      	cmp	r3, #100	@ 0x64
 8009656:	d901      	bls.n	800965c <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8009658:	2303      	movs	r3, #3
 800965a:	e336      	b.n	8009cca <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800965c:	4b85      	ldr	r3, [pc, #532]	@ (8009874 <HAL_RCC_OscConfig+0x33c>)
 800965e:	681a      	ldr	r2, [r3, #0]
 8009660:	2380      	movs	r3, #128	@ 0x80
 8009662:	029b      	lsls	r3, r3, #10
 8009664:	4013      	ands	r3, r2
 8009666:	d1f0      	bne.n	800964a <HAL_RCC_OscConfig+0x112>
 8009668:	e000      	b.n	800966c <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800966a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	2202      	movs	r2, #2
 8009672:	4013      	ands	r3, r2
 8009674:	d100      	bne.n	8009678 <HAL_RCC_OscConfig+0x140>
 8009676:	e099      	b.n	80097ac <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	68db      	ldr	r3, [r3, #12]
 800967c:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 800967e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009680:	2220      	movs	r2, #32
 8009682:	4013      	ands	r3, r2
 8009684:	d009      	beq.n	800969a <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8009686:	4b7b      	ldr	r3, [pc, #492]	@ (8009874 <HAL_RCC_OscConfig+0x33c>)
 8009688:	681a      	ldr	r2, [r3, #0]
 800968a:	4b7a      	ldr	r3, [pc, #488]	@ (8009874 <HAL_RCC_OscConfig+0x33c>)
 800968c:	2120      	movs	r1, #32
 800968e:	430a      	orrs	r2, r1
 8009690:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8009692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009694:	2220      	movs	r2, #32
 8009696:	4393      	bics	r3, r2
 8009698:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800969a:	69fb      	ldr	r3, [r7, #28]
 800969c:	2b04      	cmp	r3, #4
 800969e:	d005      	beq.n	80096ac <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80096a0:	69fb      	ldr	r3, [r7, #28]
 80096a2:	2b0c      	cmp	r3, #12
 80096a4:	d13e      	bne.n	8009724 <HAL_RCC_OscConfig+0x1ec>
 80096a6:	69bb      	ldr	r3, [r7, #24]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d13b      	bne.n	8009724 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80096ac:	4b71      	ldr	r3, [pc, #452]	@ (8009874 <HAL_RCC_OscConfig+0x33c>)
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	2204      	movs	r2, #4
 80096b2:	4013      	ands	r3, r2
 80096b4:	d004      	beq.n	80096c0 <HAL_RCC_OscConfig+0x188>
 80096b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d101      	bne.n	80096c0 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80096bc:	2301      	movs	r3, #1
 80096be:	e304      	b.n	8009cca <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80096c0:	4b6c      	ldr	r3, [pc, #432]	@ (8009874 <HAL_RCC_OscConfig+0x33c>)
 80096c2:	685b      	ldr	r3, [r3, #4]
 80096c4:	4a6e      	ldr	r2, [pc, #440]	@ (8009880 <HAL_RCC_OscConfig+0x348>)
 80096c6:	4013      	ands	r3, r2
 80096c8:	0019      	movs	r1, r3
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	691b      	ldr	r3, [r3, #16]
 80096ce:	021a      	lsls	r2, r3, #8
 80096d0:	4b68      	ldr	r3, [pc, #416]	@ (8009874 <HAL_RCC_OscConfig+0x33c>)
 80096d2:	430a      	orrs	r2, r1
 80096d4:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80096d6:	4b67      	ldr	r3, [pc, #412]	@ (8009874 <HAL_RCC_OscConfig+0x33c>)
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	2209      	movs	r2, #9
 80096dc:	4393      	bics	r3, r2
 80096de:	0019      	movs	r1, r3
 80096e0:	4b64      	ldr	r3, [pc, #400]	@ (8009874 <HAL_RCC_OscConfig+0x33c>)
 80096e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80096e4:	430a      	orrs	r2, r1
 80096e6:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80096e8:	f000 fc42 	bl	8009f70 <HAL_RCC_GetSysClockFreq>
 80096ec:	0001      	movs	r1, r0
 80096ee:	4b61      	ldr	r3, [pc, #388]	@ (8009874 <HAL_RCC_OscConfig+0x33c>)
 80096f0:	68db      	ldr	r3, [r3, #12]
 80096f2:	091b      	lsrs	r3, r3, #4
 80096f4:	220f      	movs	r2, #15
 80096f6:	4013      	ands	r3, r2
 80096f8:	4a62      	ldr	r2, [pc, #392]	@ (8009884 <HAL_RCC_OscConfig+0x34c>)
 80096fa:	5cd3      	ldrb	r3, [r2, r3]
 80096fc:	000a      	movs	r2, r1
 80096fe:	40da      	lsrs	r2, r3
 8009700:	4b61      	ldr	r3, [pc, #388]	@ (8009888 <HAL_RCC_OscConfig+0x350>)
 8009702:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8009704:	4b61      	ldr	r3, [pc, #388]	@ (800988c <HAL_RCC_OscConfig+0x354>)
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	2513      	movs	r5, #19
 800970a:	197c      	adds	r4, r7, r5
 800970c:	0018      	movs	r0, r3
 800970e:	f7fc fe7d 	bl	800640c <HAL_InitTick>
 8009712:	0003      	movs	r3, r0
 8009714:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8009716:	197b      	adds	r3, r7, r5
 8009718:	781b      	ldrb	r3, [r3, #0]
 800971a:	2b00      	cmp	r3, #0
 800971c:	d046      	beq.n	80097ac <HAL_RCC_OscConfig+0x274>
      {
        return status;
 800971e:	197b      	adds	r3, r7, r5
 8009720:	781b      	ldrb	r3, [r3, #0]
 8009722:	e2d2      	b.n	8009cca <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8009724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009726:	2b00      	cmp	r3, #0
 8009728:	d027      	beq.n	800977a <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800972a:	4b52      	ldr	r3, [pc, #328]	@ (8009874 <HAL_RCC_OscConfig+0x33c>)
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	2209      	movs	r2, #9
 8009730:	4393      	bics	r3, r2
 8009732:	0019      	movs	r1, r3
 8009734:	4b4f      	ldr	r3, [pc, #316]	@ (8009874 <HAL_RCC_OscConfig+0x33c>)
 8009736:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009738:	430a      	orrs	r2, r1
 800973a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800973c:	f7fc feac 	bl	8006498 <HAL_GetTick>
 8009740:	0003      	movs	r3, r0
 8009742:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009744:	e008      	b.n	8009758 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009746:	f7fc fea7 	bl	8006498 <HAL_GetTick>
 800974a:	0002      	movs	r2, r0
 800974c:	697b      	ldr	r3, [r7, #20]
 800974e:	1ad3      	subs	r3, r2, r3
 8009750:	2b02      	cmp	r3, #2
 8009752:	d901      	bls.n	8009758 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8009754:	2303      	movs	r3, #3
 8009756:	e2b8      	b.n	8009cca <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009758:	4b46      	ldr	r3, [pc, #280]	@ (8009874 <HAL_RCC_OscConfig+0x33c>)
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	2204      	movs	r2, #4
 800975e:	4013      	ands	r3, r2
 8009760:	d0f1      	beq.n	8009746 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009762:	4b44      	ldr	r3, [pc, #272]	@ (8009874 <HAL_RCC_OscConfig+0x33c>)
 8009764:	685b      	ldr	r3, [r3, #4]
 8009766:	4a46      	ldr	r2, [pc, #280]	@ (8009880 <HAL_RCC_OscConfig+0x348>)
 8009768:	4013      	ands	r3, r2
 800976a:	0019      	movs	r1, r3
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	691b      	ldr	r3, [r3, #16]
 8009770:	021a      	lsls	r2, r3, #8
 8009772:	4b40      	ldr	r3, [pc, #256]	@ (8009874 <HAL_RCC_OscConfig+0x33c>)
 8009774:	430a      	orrs	r2, r1
 8009776:	605a      	str	r2, [r3, #4]
 8009778:	e018      	b.n	80097ac <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800977a:	4b3e      	ldr	r3, [pc, #248]	@ (8009874 <HAL_RCC_OscConfig+0x33c>)
 800977c:	681a      	ldr	r2, [r3, #0]
 800977e:	4b3d      	ldr	r3, [pc, #244]	@ (8009874 <HAL_RCC_OscConfig+0x33c>)
 8009780:	2101      	movs	r1, #1
 8009782:	438a      	bics	r2, r1
 8009784:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009786:	f7fc fe87 	bl	8006498 <HAL_GetTick>
 800978a:	0003      	movs	r3, r0
 800978c:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800978e:	e008      	b.n	80097a2 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009790:	f7fc fe82 	bl	8006498 <HAL_GetTick>
 8009794:	0002      	movs	r2, r0
 8009796:	697b      	ldr	r3, [r7, #20]
 8009798:	1ad3      	subs	r3, r2, r3
 800979a:	2b02      	cmp	r3, #2
 800979c:	d901      	bls.n	80097a2 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 800979e:	2303      	movs	r3, #3
 80097a0:	e293      	b.n	8009cca <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80097a2:	4b34      	ldr	r3, [pc, #208]	@ (8009874 <HAL_RCC_OscConfig+0x33c>)
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	2204      	movs	r2, #4
 80097a8:	4013      	ands	r3, r2
 80097aa:	d1f1      	bne.n	8009790 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	2210      	movs	r2, #16
 80097b2:	4013      	ands	r3, r2
 80097b4:	d100      	bne.n	80097b8 <HAL_RCC_OscConfig+0x280>
 80097b6:	e0a2      	b.n	80098fe <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80097b8:	69fb      	ldr	r3, [r7, #28]
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d140      	bne.n	8009840 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80097be:	4b2d      	ldr	r3, [pc, #180]	@ (8009874 <HAL_RCC_OscConfig+0x33c>)
 80097c0:	681a      	ldr	r2, [r3, #0]
 80097c2:	2380      	movs	r3, #128	@ 0x80
 80097c4:	009b      	lsls	r3, r3, #2
 80097c6:	4013      	ands	r3, r2
 80097c8:	d005      	beq.n	80097d6 <HAL_RCC_OscConfig+0x29e>
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	69db      	ldr	r3, [r3, #28]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d101      	bne.n	80097d6 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80097d2:	2301      	movs	r3, #1
 80097d4:	e279      	b.n	8009cca <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80097d6:	4b27      	ldr	r3, [pc, #156]	@ (8009874 <HAL_RCC_OscConfig+0x33c>)
 80097d8:	685b      	ldr	r3, [r3, #4]
 80097da:	4a2d      	ldr	r2, [pc, #180]	@ (8009890 <HAL_RCC_OscConfig+0x358>)
 80097dc:	4013      	ands	r3, r2
 80097de:	0019      	movs	r1, r3
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80097e4:	4b23      	ldr	r3, [pc, #140]	@ (8009874 <HAL_RCC_OscConfig+0x33c>)
 80097e6:	430a      	orrs	r2, r1
 80097e8:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80097ea:	4b22      	ldr	r3, [pc, #136]	@ (8009874 <HAL_RCC_OscConfig+0x33c>)
 80097ec:	685b      	ldr	r3, [r3, #4]
 80097ee:	021b      	lsls	r3, r3, #8
 80097f0:	0a19      	lsrs	r1, r3, #8
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	6a1b      	ldr	r3, [r3, #32]
 80097f6:	061a      	lsls	r2, r3, #24
 80097f8:	4b1e      	ldr	r3, [pc, #120]	@ (8009874 <HAL_RCC_OscConfig+0x33c>)
 80097fa:	430a      	orrs	r2, r1
 80097fc:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009802:	0b5b      	lsrs	r3, r3, #13
 8009804:	3301      	adds	r3, #1
 8009806:	2280      	movs	r2, #128	@ 0x80
 8009808:	0212      	lsls	r2, r2, #8
 800980a:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800980c:	4b19      	ldr	r3, [pc, #100]	@ (8009874 <HAL_RCC_OscConfig+0x33c>)
 800980e:	68db      	ldr	r3, [r3, #12]
 8009810:	091b      	lsrs	r3, r3, #4
 8009812:	210f      	movs	r1, #15
 8009814:	400b      	ands	r3, r1
 8009816:	491b      	ldr	r1, [pc, #108]	@ (8009884 <HAL_RCC_OscConfig+0x34c>)
 8009818:	5ccb      	ldrb	r3, [r1, r3]
 800981a:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800981c:	4b1a      	ldr	r3, [pc, #104]	@ (8009888 <HAL_RCC_OscConfig+0x350>)
 800981e:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8009820:	4b1a      	ldr	r3, [pc, #104]	@ (800988c <HAL_RCC_OscConfig+0x354>)
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	2513      	movs	r5, #19
 8009826:	197c      	adds	r4, r7, r5
 8009828:	0018      	movs	r0, r3
 800982a:	f7fc fdef 	bl	800640c <HAL_InitTick>
 800982e:	0003      	movs	r3, r0
 8009830:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8009832:	197b      	adds	r3, r7, r5
 8009834:	781b      	ldrb	r3, [r3, #0]
 8009836:	2b00      	cmp	r3, #0
 8009838:	d061      	beq.n	80098fe <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 800983a:	197b      	adds	r3, r7, r5
 800983c:	781b      	ldrb	r3, [r3, #0]
 800983e:	e244      	b.n	8009cca <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	69db      	ldr	r3, [r3, #28]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d040      	beq.n	80098ca <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8009848:	4b0a      	ldr	r3, [pc, #40]	@ (8009874 <HAL_RCC_OscConfig+0x33c>)
 800984a:	681a      	ldr	r2, [r3, #0]
 800984c:	4b09      	ldr	r3, [pc, #36]	@ (8009874 <HAL_RCC_OscConfig+0x33c>)
 800984e:	2180      	movs	r1, #128	@ 0x80
 8009850:	0049      	lsls	r1, r1, #1
 8009852:	430a      	orrs	r2, r1
 8009854:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009856:	f7fc fe1f 	bl	8006498 <HAL_GetTick>
 800985a:	0003      	movs	r3, r0
 800985c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800985e:	e019      	b.n	8009894 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8009860:	f7fc fe1a 	bl	8006498 <HAL_GetTick>
 8009864:	0002      	movs	r2, r0
 8009866:	697b      	ldr	r3, [r7, #20]
 8009868:	1ad3      	subs	r3, r2, r3
 800986a:	2b02      	cmp	r3, #2
 800986c:	d912      	bls.n	8009894 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 800986e:	2303      	movs	r3, #3
 8009870:	e22b      	b.n	8009cca <HAL_RCC_OscConfig+0x792>
 8009872:	46c0      	nop			@ (mov r8, r8)
 8009874:	40021000 	.word	0x40021000
 8009878:	fffeffff 	.word	0xfffeffff
 800987c:	fffbffff 	.word	0xfffbffff
 8009880:	ffffe0ff 	.word	0xffffe0ff
 8009884:	0800e9bc 	.word	0x0800e9bc
 8009888:	20000020 	.word	0x20000020
 800988c:	20000034 	.word	0x20000034
 8009890:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8009894:	4bca      	ldr	r3, [pc, #808]	@ (8009bc0 <HAL_RCC_OscConfig+0x688>)
 8009896:	681a      	ldr	r2, [r3, #0]
 8009898:	2380      	movs	r3, #128	@ 0x80
 800989a:	009b      	lsls	r3, r3, #2
 800989c:	4013      	ands	r3, r2
 800989e:	d0df      	beq.n	8009860 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80098a0:	4bc7      	ldr	r3, [pc, #796]	@ (8009bc0 <HAL_RCC_OscConfig+0x688>)
 80098a2:	685b      	ldr	r3, [r3, #4]
 80098a4:	4ac7      	ldr	r2, [pc, #796]	@ (8009bc4 <HAL_RCC_OscConfig+0x68c>)
 80098a6:	4013      	ands	r3, r2
 80098a8:	0019      	movs	r1, r3
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80098ae:	4bc4      	ldr	r3, [pc, #784]	@ (8009bc0 <HAL_RCC_OscConfig+0x688>)
 80098b0:	430a      	orrs	r2, r1
 80098b2:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80098b4:	4bc2      	ldr	r3, [pc, #776]	@ (8009bc0 <HAL_RCC_OscConfig+0x688>)
 80098b6:	685b      	ldr	r3, [r3, #4]
 80098b8:	021b      	lsls	r3, r3, #8
 80098ba:	0a19      	lsrs	r1, r3, #8
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	6a1b      	ldr	r3, [r3, #32]
 80098c0:	061a      	lsls	r2, r3, #24
 80098c2:	4bbf      	ldr	r3, [pc, #764]	@ (8009bc0 <HAL_RCC_OscConfig+0x688>)
 80098c4:	430a      	orrs	r2, r1
 80098c6:	605a      	str	r2, [r3, #4]
 80098c8:	e019      	b.n	80098fe <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80098ca:	4bbd      	ldr	r3, [pc, #756]	@ (8009bc0 <HAL_RCC_OscConfig+0x688>)
 80098cc:	681a      	ldr	r2, [r3, #0]
 80098ce:	4bbc      	ldr	r3, [pc, #752]	@ (8009bc0 <HAL_RCC_OscConfig+0x688>)
 80098d0:	49bd      	ldr	r1, [pc, #756]	@ (8009bc8 <HAL_RCC_OscConfig+0x690>)
 80098d2:	400a      	ands	r2, r1
 80098d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80098d6:	f7fc fddf 	bl	8006498 <HAL_GetTick>
 80098da:	0003      	movs	r3, r0
 80098dc:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80098de:	e008      	b.n	80098f2 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80098e0:	f7fc fdda 	bl	8006498 <HAL_GetTick>
 80098e4:	0002      	movs	r2, r0
 80098e6:	697b      	ldr	r3, [r7, #20]
 80098e8:	1ad3      	subs	r3, r2, r3
 80098ea:	2b02      	cmp	r3, #2
 80098ec:	d901      	bls.n	80098f2 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 80098ee:	2303      	movs	r3, #3
 80098f0:	e1eb      	b.n	8009cca <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80098f2:	4bb3      	ldr	r3, [pc, #716]	@ (8009bc0 <HAL_RCC_OscConfig+0x688>)
 80098f4:	681a      	ldr	r2, [r3, #0]
 80098f6:	2380      	movs	r3, #128	@ 0x80
 80098f8:	009b      	lsls	r3, r3, #2
 80098fa:	4013      	ands	r3, r2
 80098fc:	d1f0      	bne.n	80098e0 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	2208      	movs	r2, #8
 8009904:	4013      	ands	r3, r2
 8009906:	d036      	beq.n	8009976 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	695b      	ldr	r3, [r3, #20]
 800990c:	2b00      	cmp	r3, #0
 800990e:	d019      	beq.n	8009944 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009910:	4bab      	ldr	r3, [pc, #684]	@ (8009bc0 <HAL_RCC_OscConfig+0x688>)
 8009912:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009914:	4baa      	ldr	r3, [pc, #680]	@ (8009bc0 <HAL_RCC_OscConfig+0x688>)
 8009916:	2101      	movs	r1, #1
 8009918:	430a      	orrs	r2, r1
 800991a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800991c:	f7fc fdbc 	bl	8006498 <HAL_GetTick>
 8009920:	0003      	movs	r3, r0
 8009922:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009924:	e008      	b.n	8009938 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009926:	f7fc fdb7 	bl	8006498 <HAL_GetTick>
 800992a:	0002      	movs	r2, r0
 800992c:	697b      	ldr	r3, [r7, #20]
 800992e:	1ad3      	subs	r3, r2, r3
 8009930:	2b02      	cmp	r3, #2
 8009932:	d901      	bls.n	8009938 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8009934:	2303      	movs	r3, #3
 8009936:	e1c8      	b.n	8009cca <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009938:	4ba1      	ldr	r3, [pc, #644]	@ (8009bc0 <HAL_RCC_OscConfig+0x688>)
 800993a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800993c:	2202      	movs	r2, #2
 800993e:	4013      	ands	r3, r2
 8009940:	d0f1      	beq.n	8009926 <HAL_RCC_OscConfig+0x3ee>
 8009942:	e018      	b.n	8009976 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009944:	4b9e      	ldr	r3, [pc, #632]	@ (8009bc0 <HAL_RCC_OscConfig+0x688>)
 8009946:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009948:	4b9d      	ldr	r3, [pc, #628]	@ (8009bc0 <HAL_RCC_OscConfig+0x688>)
 800994a:	2101      	movs	r1, #1
 800994c:	438a      	bics	r2, r1
 800994e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009950:	f7fc fda2 	bl	8006498 <HAL_GetTick>
 8009954:	0003      	movs	r3, r0
 8009956:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009958:	e008      	b.n	800996c <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800995a:	f7fc fd9d 	bl	8006498 <HAL_GetTick>
 800995e:	0002      	movs	r2, r0
 8009960:	697b      	ldr	r3, [r7, #20]
 8009962:	1ad3      	subs	r3, r2, r3
 8009964:	2b02      	cmp	r3, #2
 8009966:	d901      	bls.n	800996c <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8009968:	2303      	movs	r3, #3
 800996a:	e1ae      	b.n	8009cca <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800996c:	4b94      	ldr	r3, [pc, #592]	@ (8009bc0 <HAL_RCC_OscConfig+0x688>)
 800996e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009970:	2202      	movs	r2, #2
 8009972:	4013      	ands	r3, r2
 8009974:	d1f1      	bne.n	800995a <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	2204      	movs	r2, #4
 800997c:	4013      	ands	r3, r2
 800997e:	d100      	bne.n	8009982 <HAL_RCC_OscConfig+0x44a>
 8009980:	e0ae      	b.n	8009ae0 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009982:	2023      	movs	r0, #35	@ 0x23
 8009984:	183b      	adds	r3, r7, r0
 8009986:	2200      	movs	r2, #0
 8009988:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800998a:	4b8d      	ldr	r3, [pc, #564]	@ (8009bc0 <HAL_RCC_OscConfig+0x688>)
 800998c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800998e:	2380      	movs	r3, #128	@ 0x80
 8009990:	055b      	lsls	r3, r3, #21
 8009992:	4013      	ands	r3, r2
 8009994:	d109      	bne.n	80099aa <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009996:	4b8a      	ldr	r3, [pc, #552]	@ (8009bc0 <HAL_RCC_OscConfig+0x688>)
 8009998:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800999a:	4b89      	ldr	r3, [pc, #548]	@ (8009bc0 <HAL_RCC_OscConfig+0x688>)
 800999c:	2180      	movs	r1, #128	@ 0x80
 800999e:	0549      	lsls	r1, r1, #21
 80099a0:	430a      	orrs	r2, r1
 80099a2:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 80099a4:	183b      	adds	r3, r7, r0
 80099a6:	2201      	movs	r2, #1
 80099a8:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80099aa:	4b88      	ldr	r3, [pc, #544]	@ (8009bcc <HAL_RCC_OscConfig+0x694>)
 80099ac:	681a      	ldr	r2, [r3, #0]
 80099ae:	2380      	movs	r3, #128	@ 0x80
 80099b0:	005b      	lsls	r3, r3, #1
 80099b2:	4013      	ands	r3, r2
 80099b4:	d11a      	bne.n	80099ec <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80099b6:	4b85      	ldr	r3, [pc, #532]	@ (8009bcc <HAL_RCC_OscConfig+0x694>)
 80099b8:	681a      	ldr	r2, [r3, #0]
 80099ba:	4b84      	ldr	r3, [pc, #528]	@ (8009bcc <HAL_RCC_OscConfig+0x694>)
 80099bc:	2180      	movs	r1, #128	@ 0x80
 80099be:	0049      	lsls	r1, r1, #1
 80099c0:	430a      	orrs	r2, r1
 80099c2:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80099c4:	f7fc fd68 	bl	8006498 <HAL_GetTick>
 80099c8:	0003      	movs	r3, r0
 80099ca:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80099cc:	e008      	b.n	80099e0 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80099ce:	f7fc fd63 	bl	8006498 <HAL_GetTick>
 80099d2:	0002      	movs	r2, r0
 80099d4:	697b      	ldr	r3, [r7, #20]
 80099d6:	1ad3      	subs	r3, r2, r3
 80099d8:	2b64      	cmp	r3, #100	@ 0x64
 80099da:	d901      	bls.n	80099e0 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 80099dc:	2303      	movs	r3, #3
 80099de:	e174      	b.n	8009cca <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80099e0:	4b7a      	ldr	r3, [pc, #488]	@ (8009bcc <HAL_RCC_OscConfig+0x694>)
 80099e2:	681a      	ldr	r2, [r3, #0]
 80099e4:	2380      	movs	r3, #128	@ 0x80
 80099e6:	005b      	lsls	r3, r3, #1
 80099e8:	4013      	ands	r3, r2
 80099ea:	d0f0      	beq.n	80099ce <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	689a      	ldr	r2, [r3, #8]
 80099f0:	2380      	movs	r3, #128	@ 0x80
 80099f2:	005b      	lsls	r3, r3, #1
 80099f4:	429a      	cmp	r2, r3
 80099f6:	d107      	bne.n	8009a08 <HAL_RCC_OscConfig+0x4d0>
 80099f8:	4b71      	ldr	r3, [pc, #452]	@ (8009bc0 <HAL_RCC_OscConfig+0x688>)
 80099fa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80099fc:	4b70      	ldr	r3, [pc, #448]	@ (8009bc0 <HAL_RCC_OscConfig+0x688>)
 80099fe:	2180      	movs	r1, #128	@ 0x80
 8009a00:	0049      	lsls	r1, r1, #1
 8009a02:	430a      	orrs	r2, r1
 8009a04:	651a      	str	r2, [r3, #80]	@ 0x50
 8009a06:	e031      	b.n	8009a6c <HAL_RCC_OscConfig+0x534>
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	689b      	ldr	r3, [r3, #8]
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d10c      	bne.n	8009a2a <HAL_RCC_OscConfig+0x4f2>
 8009a10:	4b6b      	ldr	r3, [pc, #428]	@ (8009bc0 <HAL_RCC_OscConfig+0x688>)
 8009a12:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009a14:	4b6a      	ldr	r3, [pc, #424]	@ (8009bc0 <HAL_RCC_OscConfig+0x688>)
 8009a16:	496c      	ldr	r1, [pc, #432]	@ (8009bc8 <HAL_RCC_OscConfig+0x690>)
 8009a18:	400a      	ands	r2, r1
 8009a1a:	651a      	str	r2, [r3, #80]	@ 0x50
 8009a1c:	4b68      	ldr	r3, [pc, #416]	@ (8009bc0 <HAL_RCC_OscConfig+0x688>)
 8009a1e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009a20:	4b67      	ldr	r3, [pc, #412]	@ (8009bc0 <HAL_RCC_OscConfig+0x688>)
 8009a22:	496b      	ldr	r1, [pc, #428]	@ (8009bd0 <HAL_RCC_OscConfig+0x698>)
 8009a24:	400a      	ands	r2, r1
 8009a26:	651a      	str	r2, [r3, #80]	@ 0x50
 8009a28:	e020      	b.n	8009a6c <HAL_RCC_OscConfig+0x534>
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	689a      	ldr	r2, [r3, #8]
 8009a2e:	23a0      	movs	r3, #160	@ 0xa0
 8009a30:	00db      	lsls	r3, r3, #3
 8009a32:	429a      	cmp	r2, r3
 8009a34:	d10e      	bne.n	8009a54 <HAL_RCC_OscConfig+0x51c>
 8009a36:	4b62      	ldr	r3, [pc, #392]	@ (8009bc0 <HAL_RCC_OscConfig+0x688>)
 8009a38:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009a3a:	4b61      	ldr	r3, [pc, #388]	@ (8009bc0 <HAL_RCC_OscConfig+0x688>)
 8009a3c:	2180      	movs	r1, #128	@ 0x80
 8009a3e:	00c9      	lsls	r1, r1, #3
 8009a40:	430a      	orrs	r2, r1
 8009a42:	651a      	str	r2, [r3, #80]	@ 0x50
 8009a44:	4b5e      	ldr	r3, [pc, #376]	@ (8009bc0 <HAL_RCC_OscConfig+0x688>)
 8009a46:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009a48:	4b5d      	ldr	r3, [pc, #372]	@ (8009bc0 <HAL_RCC_OscConfig+0x688>)
 8009a4a:	2180      	movs	r1, #128	@ 0x80
 8009a4c:	0049      	lsls	r1, r1, #1
 8009a4e:	430a      	orrs	r2, r1
 8009a50:	651a      	str	r2, [r3, #80]	@ 0x50
 8009a52:	e00b      	b.n	8009a6c <HAL_RCC_OscConfig+0x534>
 8009a54:	4b5a      	ldr	r3, [pc, #360]	@ (8009bc0 <HAL_RCC_OscConfig+0x688>)
 8009a56:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009a58:	4b59      	ldr	r3, [pc, #356]	@ (8009bc0 <HAL_RCC_OscConfig+0x688>)
 8009a5a:	495b      	ldr	r1, [pc, #364]	@ (8009bc8 <HAL_RCC_OscConfig+0x690>)
 8009a5c:	400a      	ands	r2, r1
 8009a5e:	651a      	str	r2, [r3, #80]	@ 0x50
 8009a60:	4b57      	ldr	r3, [pc, #348]	@ (8009bc0 <HAL_RCC_OscConfig+0x688>)
 8009a62:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009a64:	4b56      	ldr	r3, [pc, #344]	@ (8009bc0 <HAL_RCC_OscConfig+0x688>)
 8009a66:	495a      	ldr	r1, [pc, #360]	@ (8009bd0 <HAL_RCC_OscConfig+0x698>)
 8009a68:	400a      	ands	r2, r1
 8009a6a:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	689b      	ldr	r3, [r3, #8]
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d015      	beq.n	8009aa0 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009a74:	f7fc fd10 	bl	8006498 <HAL_GetTick>
 8009a78:	0003      	movs	r3, r0
 8009a7a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009a7c:	e009      	b.n	8009a92 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009a7e:	f7fc fd0b 	bl	8006498 <HAL_GetTick>
 8009a82:	0002      	movs	r2, r0
 8009a84:	697b      	ldr	r3, [r7, #20]
 8009a86:	1ad3      	subs	r3, r2, r3
 8009a88:	4a52      	ldr	r2, [pc, #328]	@ (8009bd4 <HAL_RCC_OscConfig+0x69c>)
 8009a8a:	4293      	cmp	r3, r2
 8009a8c:	d901      	bls.n	8009a92 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8009a8e:	2303      	movs	r3, #3
 8009a90:	e11b      	b.n	8009cca <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009a92:	4b4b      	ldr	r3, [pc, #300]	@ (8009bc0 <HAL_RCC_OscConfig+0x688>)
 8009a94:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009a96:	2380      	movs	r3, #128	@ 0x80
 8009a98:	009b      	lsls	r3, r3, #2
 8009a9a:	4013      	ands	r3, r2
 8009a9c:	d0ef      	beq.n	8009a7e <HAL_RCC_OscConfig+0x546>
 8009a9e:	e014      	b.n	8009aca <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009aa0:	f7fc fcfa 	bl	8006498 <HAL_GetTick>
 8009aa4:	0003      	movs	r3, r0
 8009aa6:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009aa8:	e009      	b.n	8009abe <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009aaa:	f7fc fcf5 	bl	8006498 <HAL_GetTick>
 8009aae:	0002      	movs	r2, r0
 8009ab0:	697b      	ldr	r3, [r7, #20]
 8009ab2:	1ad3      	subs	r3, r2, r3
 8009ab4:	4a47      	ldr	r2, [pc, #284]	@ (8009bd4 <HAL_RCC_OscConfig+0x69c>)
 8009ab6:	4293      	cmp	r3, r2
 8009ab8:	d901      	bls.n	8009abe <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8009aba:	2303      	movs	r3, #3
 8009abc:	e105      	b.n	8009cca <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009abe:	4b40      	ldr	r3, [pc, #256]	@ (8009bc0 <HAL_RCC_OscConfig+0x688>)
 8009ac0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009ac2:	2380      	movs	r3, #128	@ 0x80
 8009ac4:	009b      	lsls	r3, r3, #2
 8009ac6:	4013      	ands	r3, r2
 8009ac8:	d1ef      	bne.n	8009aaa <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8009aca:	2323      	movs	r3, #35	@ 0x23
 8009acc:	18fb      	adds	r3, r7, r3
 8009ace:	781b      	ldrb	r3, [r3, #0]
 8009ad0:	2b01      	cmp	r3, #1
 8009ad2:	d105      	bne.n	8009ae0 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009ad4:	4b3a      	ldr	r3, [pc, #232]	@ (8009bc0 <HAL_RCC_OscConfig+0x688>)
 8009ad6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009ad8:	4b39      	ldr	r3, [pc, #228]	@ (8009bc0 <HAL_RCC_OscConfig+0x688>)
 8009ada:	493f      	ldr	r1, [pc, #252]	@ (8009bd8 <HAL_RCC_OscConfig+0x6a0>)
 8009adc:	400a      	ands	r2, r1
 8009ade:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	2220      	movs	r2, #32
 8009ae6:	4013      	ands	r3, r2
 8009ae8:	d049      	beq.n	8009b7e <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	699b      	ldr	r3, [r3, #24]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d026      	beq.n	8009b40 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8009af2:	4b33      	ldr	r3, [pc, #204]	@ (8009bc0 <HAL_RCC_OscConfig+0x688>)
 8009af4:	689a      	ldr	r2, [r3, #8]
 8009af6:	4b32      	ldr	r3, [pc, #200]	@ (8009bc0 <HAL_RCC_OscConfig+0x688>)
 8009af8:	2101      	movs	r1, #1
 8009afa:	430a      	orrs	r2, r1
 8009afc:	609a      	str	r2, [r3, #8]
 8009afe:	4b30      	ldr	r3, [pc, #192]	@ (8009bc0 <HAL_RCC_OscConfig+0x688>)
 8009b00:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009b02:	4b2f      	ldr	r3, [pc, #188]	@ (8009bc0 <HAL_RCC_OscConfig+0x688>)
 8009b04:	2101      	movs	r1, #1
 8009b06:	430a      	orrs	r2, r1
 8009b08:	635a      	str	r2, [r3, #52]	@ 0x34
 8009b0a:	4b34      	ldr	r3, [pc, #208]	@ (8009bdc <HAL_RCC_OscConfig+0x6a4>)
 8009b0c:	6a1a      	ldr	r2, [r3, #32]
 8009b0e:	4b33      	ldr	r3, [pc, #204]	@ (8009bdc <HAL_RCC_OscConfig+0x6a4>)
 8009b10:	2180      	movs	r1, #128	@ 0x80
 8009b12:	0189      	lsls	r1, r1, #6
 8009b14:	430a      	orrs	r2, r1
 8009b16:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009b18:	f7fc fcbe 	bl	8006498 <HAL_GetTick>
 8009b1c:	0003      	movs	r3, r0
 8009b1e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009b20:	e008      	b.n	8009b34 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009b22:	f7fc fcb9 	bl	8006498 <HAL_GetTick>
 8009b26:	0002      	movs	r2, r0
 8009b28:	697b      	ldr	r3, [r7, #20]
 8009b2a:	1ad3      	subs	r3, r2, r3
 8009b2c:	2b02      	cmp	r3, #2
 8009b2e:	d901      	bls.n	8009b34 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8009b30:	2303      	movs	r3, #3
 8009b32:	e0ca      	b.n	8009cca <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009b34:	4b22      	ldr	r3, [pc, #136]	@ (8009bc0 <HAL_RCC_OscConfig+0x688>)
 8009b36:	689b      	ldr	r3, [r3, #8]
 8009b38:	2202      	movs	r2, #2
 8009b3a:	4013      	ands	r3, r2
 8009b3c:	d0f1      	beq.n	8009b22 <HAL_RCC_OscConfig+0x5ea>
 8009b3e:	e01e      	b.n	8009b7e <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8009b40:	4b1f      	ldr	r3, [pc, #124]	@ (8009bc0 <HAL_RCC_OscConfig+0x688>)
 8009b42:	689a      	ldr	r2, [r3, #8]
 8009b44:	4b1e      	ldr	r3, [pc, #120]	@ (8009bc0 <HAL_RCC_OscConfig+0x688>)
 8009b46:	2101      	movs	r1, #1
 8009b48:	438a      	bics	r2, r1
 8009b4a:	609a      	str	r2, [r3, #8]
 8009b4c:	4b23      	ldr	r3, [pc, #140]	@ (8009bdc <HAL_RCC_OscConfig+0x6a4>)
 8009b4e:	6a1a      	ldr	r2, [r3, #32]
 8009b50:	4b22      	ldr	r3, [pc, #136]	@ (8009bdc <HAL_RCC_OscConfig+0x6a4>)
 8009b52:	4923      	ldr	r1, [pc, #140]	@ (8009be0 <HAL_RCC_OscConfig+0x6a8>)
 8009b54:	400a      	ands	r2, r1
 8009b56:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009b58:	f7fc fc9e 	bl	8006498 <HAL_GetTick>
 8009b5c:	0003      	movs	r3, r0
 8009b5e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009b60:	e008      	b.n	8009b74 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009b62:	f7fc fc99 	bl	8006498 <HAL_GetTick>
 8009b66:	0002      	movs	r2, r0
 8009b68:	697b      	ldr	r3, [r7, #20]
 8009b6a:	1ad3      	subs	r3, r2, r3
 8009b6c:	2b02      	cmp	r3, #2
 8009b6e:	d901      	bls.n	8009b74 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8009b70:	2303      	movs	r3, #3
 8009b72:	e0aa      	b.n	8009cca <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009b74:	4b12      	ldr	r3, [pc, #72]	@ (8009bc0 <HAL_RCC_OscConfig+0x688>)
 8009b76:	689b      	ldr	r3, [r3, #8]
 8009b78:	2202      	movs	r2, #2
 8009b7a:	4013      	ands	r3, r2
 8009b7c:	d1f1      	bne.n	8009b62 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d100      	bne.n	8009b88 <HAL_RCC_OscConfig+0x650>
 8009b86:	e09f      	b.n	8009cc8 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009b88:	69fb      	ldr	r3, [r7, #28]
 8009b8a:	2b0c      	cmp	r3, #12
 8009b8c:	d100      	bne.n	8009b90 <HAL_RCC_OscConfig+0x658>
 8009b8e:	e078      	b.n	8009c82 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b94:	2b02      	cmp	r3, #2
 8009b96:	d159      	bne.n	8009c4c <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009b98:	4b09      	ldr	r3, [pc, #36]	@ (8009bc0 <HAL_RCC_OscConfig+0x688>)
 8009b9a:	681a      	ldr	r2, [r3, #0]
 8009b9c:	4b08      	ldr	r3, [pc, #32]	@ (8009bc0 <HAL_RCC_OscConfig+0x688>)
 8009b9e:	4911      	ldr	r1, [pc, #68]	@ (8009be4 <HAL_RCC_OscConfig+0x6ac>)
 8009ba0:	400a      	ands	r2, r1
 8009ba2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009ba4:	f7fc fc78 	bl	8006498 <HAL_GetTick>
 8009ba8:	0003      	movs	r3, r0
 8009baa:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8009bac:	e01c      	b.n	8009be8 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009bae:	f7fc fc73 	bl	8006498 <HAL_GetTick>
 8009bb2:	0002      	movs	r2, r0
 8009bb4:	697b      	ldr	r3, [r7, #20]
 8009bb6:	1ad3      	subs	r3, r2, r3
 8009bb8:	2b02      	cmp	r3, #2
 8009bba:	d915      	bls.n	8009be8 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8009bbc:	2303      	movs	r3, #3
 8009bbe:	e084      	b.n	8009cca <HAL_RCC_OscConfig+0x792>
 8009bc0:	40021000 	.word	0x40021000
 8009bc4:	ffff1fff 	.word	0xffff1fff
 8009bc8:	fffffeff 	.word	0xfffffeff
 8009bcc:	40007000 	.word	0x40007000
 8009bd0:	fffffbff 	.word	0xfffffbff
 8009bd4:	00001388 	.word	0x00001388
 8009bd8:	efffffff 	.word	0xefffffff
 8009bdc:	40010000 	.word	0x40010000
 8009be0:	ffffdfff 	.word	0xffffdfff
 8009be4:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8009be8:	4b3a      	ldr	r3, [pc, #232]	@ (8009cd4 <HAL_RCC_OscConfig+0x79c>)
 8009bea:	681a      	ldr	r2, [r3, #0]
 8009bec:	2380      	movs	r3, #128	@ 0x80
 8009bee:	049b      	lsls	r3, r3, #18
 8009bf0:	4013      	ands	r3, r2
 8009bf2:	d1dc      	bne.n	8009bae <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009bf4:	4b37      	ldr	r3, [pc, #220]	@ (8009cd4 <HAL_RCC_OscConfig+0x79c>)
 8009bf6:	68db      	ldr	r3, [r3, #12]
 8009bf8:	4a37      	ldr	r2, [pc, #220]	@ (8009cd8 <HAL_RCC_OscConfig+0x7a0>)
 8009bfa:	4013      	ands	r3, r2
 8009bfc:	0019      	movs	r1, r3
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c06:	431a      	orrs	r2, r3
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009c0c:	431a      	orrs	r2, r3
 8009c0e:	4b31      	ldr	r3, [pc, #196]	@ (8009cd4 <HAL_RCC_OscConfig+0x79c>)
 8009c10:	430a      	orrs	r2, r1
 8009c12:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009c14:	4b2f      	ldr	r3, [pc, #188]	@ (8009cd4 <HAL_RCC_OscConfig+0x79c>)
 8009c16:	681a      	ldr	r2, [r3, #0]
 8009c18:	4b2e      	ldr	r3, [pc, #184]	@ (8009cd4 <HAL_RCC_OscConfig+0x79c>)
 8009c1a:	2180      	movs	r1, #128	@ 0x80
 8009c1c:	0449      	lsls	r1, r1, #17
 8009c1e:	430a      	orrs	r2, r1
 8009c20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009c22:	f7fc fc39 	bl	8006498 <HAL_GetTick>
 8009c26:	0003      	movs	r3, r0
 8009c28:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8009c2a:	e008      	b.n	8009c3e <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009c2c:	f7fc fc34 	bl	8006498 <HAL_GetTick>
 8009c30:	0002      	movs	r2, r0
 8009c32:	697b      	ldr	r3, [r7, #20]
 8009c34:	1ad3      	subs	r3, r2, r3
 8009c36:	2b02      	cmp	r3, #2
 8009c38:	d901      	bls.n	8009c3e <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8009c3a:	2303      	movs	r3, #3
 8009c3c:	e045      	b.n	8009cca <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8009c3e:	4b25      	ldr	r3, [pc, #148]	@ (8009cd4 <HAL_RCC_OscConfig+0x79c>)
 8009c40:	681a      	ldr	r2, [r3, #0]
 8009c42:	2380      	movs	r3, #128	@ 0x80
 8009c44:	049b      	lsls	r3, r3, #18
 8009c46:	4013      	ands	r3, r2
 8009c48:	d0f0      	beq.n	8009c2c <HAL_RCC_OscConfig+0x6f4>
 8009c4a:	e03d      	b.n	8009cc8 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009c4c:	4b21      	ldr	r3, [pc, #132]	@ (8009cd4 <HAL_RCC_OscConfig+0x79c>)
 8009c4e:	681a      	ldr	r2, [r3, #0]
 8009c50:	4b20      	ldr	r3, [pc, #128]	@ (8009cd4 <HAL_RCC_OscConfig+0x79c>)
 8009c52:	4922      	ldr	r1, [pc, #136]	@ (8009cdc <HAL_RCC_OscConfig+0x7a4>)
 8009c54:	400a      	ands	r2, r1
 8009c56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009c58:	f7fc fc1e 	bl	8006498 <HAL_GetTick>
 8009c5c:	0003      	movs	r3, r0
 8009c5e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8009c60:	e008      	b.n	8009c74 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009c62:	f7fc fc19 	bl	8006498 <HAL_GetTick>
 8009c66:	0002      	movs	r2, r0
 8009c68:	697b      	ldr	r3, [r7, #20]
 8009c6a:	1ad3      	subs	r3, r2, r3
 8009c6c:	2b02      	cmp	r3, #2
 8009c6e:	d901      	bls.n	8009c74 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8009c70:	2303      	movs	r3, #3
 8009c72:	e02a      	b.n	8009cca <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8009c74:	4b17      	ldr	r3, [pc, #92]	@ (8009cd4 <HAL_RCC_OscConfig+0x79c>)
 8009c76:	681a      	ldr	r2, [r3, #0]
 8009c78:	2380      	movs	r3, #128	@ 0x80
 8009c7a:	049b      	lsls	r3, r3, #18
 8009c7c:	4013      	ands	r3, r2
 8009c7e:	d1f0      	bne.n	8009c62 <HAL_RCC_OscConfig+0x72a>
 8009c80:	e022      	b.n	8009cc8 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c86:	2b01      	cmp	r3, #1
 8009c88:	d101      	bne.n	8009c8e <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8009c8a:	2301      	movs	r3, #1
 8009c8c:	e01d      	b.n	8009cca <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8009c8e:	4b11      	ldr	r3, [pc, #68]	@ (8009cd4 <HAL_RCC_OscConfig+0x79c>)
 8009c90:	68db      	ldr	r3, [r3, #12]
 8009c92:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009c94:	69ba      	ldr	r2, [r7, #24]
 8009c96:	2380      	movs	r3, #128	@ 0x80
 8009c98:	025b      	lsls	r3, r3, #9
 8009c9a:	401a      	ands	r2, r3
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ca0:	429a      	cmp	r2, r3
 8009ca2:	d10f      	bne.n	8009cc4 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8009ca4:	69ba      	ldr	r2, [r7, #24]
 8009ca6:	23f0      	movs	r3, #240	@ 0xf0
 8009ca8:	039b      	lsls	r3, r3, #14
 8009caa:	401a      	ands	r2, r3
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009cb0:	429a      	cmp	r2, r3
 8009cb2:	d107      	bne.n	8009cc4 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8009cb4:	69ba      	ldr	r2, [r7, #24]
 8009cb6:	23c0      	movs	r3, #192	@ 0xc0
 8009cb8:	041b      	lsls	r3, r3, #16
 8009cba:	401a      	ands	r2, r3
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8009cc0:	429a      	cmp	r2, r3
 8009cc2:	d001      	beq.n	8009cc8 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8009cc4:	2301      	movs	r3, #1
 8009cc6:	e000      	b.n	8009cca <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8009cc8:	2300      	movs	r3, #0
}
 8009cca:	0018      	movs	r0, r3
 8009ccc:	46bd      	mov	sp, r7
 8009cce:	b00a      	add	sp, #40	@ 0x28
 8009cd0:	bdb0      	pop	{r4, r5, r7, pc}
 8009cd2:	46c0      	nop			@ (mov r8, r8)
 8009cd4:	40021000 	.word	0x40021000
 8009cd8:	ff02ffff 	.word	0xff02ffff
 8009cdc:	feffffff 	.word	0xfeffffff

08009ce0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009ce0:	b5b0      	push	{r4, r5, r7, lr}
 8009ce2:	b084      	sub	sp, #16
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	6078      	str	r0, [r7, #4]
 8009ce8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d101      	bne.n	8009cf4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009cf0:	2301      	movs	r3, #1
 8009cf2:	e128      	b.n	8009f46 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009cf4:	4b96      	ldr	r3, [pc, #600]	@ (8009f50 <HAL_RCC_ClockConfig+0x270>)
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	2201      	movs	r2, #1
 8009cfa:	4013      	ands	r3, r2
 8009cfc:	683a      	ldr	r2, [r7, #0]
 8009cfe:	429a      	cmp	r2, r3
 8009d00:	d91e      	bls.n	8009d40 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009d02:	4b93      	ldr	r3, [pc, #588]	@ (8009f50 <HAL_RCC_ClockConfig+0x270>)
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	2201      	movs	r2, #1
 8009d08:	4393      	bics	r3, r2
 8009d0a:	0019      	movs	r1, r3
 8009d0c:	4b90      	ldr	r3, [pc, #576]	@ (8009f50 <HAL_RCC_ClockConfig+0x270>)
 8009d0e:	683a      	ldr	r2, [r7, #0]
 8009d10:	430a      	orrs	r2, r1
 8009d12:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8009d14:	f7fc fbc0 	bl	8006498 <HAL_GetTick>
 8009d18:	0003      	movs	r3, r0
 8009d1a:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009d1c:	e009      	b.n	8009d32 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009d1e:	f7fc fbbb 	bl	8006498 <HAL_GetTick>
 8009d22:	0002      	movs	r2, r0
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	1ad3      	subs	r3, r2, r3
 8009d28:	4a8a      	ldr	r2, [pc, #552]	@ (8009f54 <HAL_RCC_ClockConfig+0x274>)
 8009d2a:	4293      	cmp	r3, r2
 8009d2c:	d901      	bls.n	8009d32 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8009d2e:	2303      	movs	r3, #3
 8009d30:	e109      	b.n	8009f46 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009d32:	4b87      	ldr	r3, [pc, #540]	@ (8009f50 <HAL_RCC_ClockConfig+0x270>)
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	2201      	movs	r2, #1
 8009d38:	4013      	ands	r3, r2
 8009d3a:	683a      	ldr	r2, [r7, #0]
 8009d3c:	429a      	cmp	r2, r3
 8009d3e:	d1ee      	bne.n	8009d1e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	2202      	movs	r2, #2
 8009d46:	4013      	ands	r3, r2
 8009d48:	d009      	beq.n	8009d5e <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009d4a:	4b83      	ldr	r3, [pc, #524]	@ (8009f58 <HAL_RCC_ClockConfig+0x278>)
 8009d4c:	68db      	ldr	r3, [r3, #12]
 8009d4e:	22f0      	movs	r2, #240	@ 0xf0
 8009d50:	4393      	bics	r3, r2
 8009d52:	0019      	movs	r1, r3
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	689a      	ldr	r2, [r3, #8]
 8009d58:	4b7f      	ldr	r3, [pc, #508]	@ (8009f58 <HAL_RCC_ClockConfig+0x278>)
 8009d5a:	430a      	orrs	r2, r1
 8009d5c:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	2201      	movs	r2, #1
 8009d64:	4013      	ands	r3, r2
 8009d66:	d100      	bne.n	8009d6a <HAL_RCC_ClockConfig+0x8a>
 8009d68:	e089      	b.n	8009e7e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	685b      	ldr	r3, [r3, #4]
 8009d6e:	2b02      	cmp	r3, #2
 8009d70:	d107      	bne.n	8009d82 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009d72:	4b79      	ldr	r3, [pc, #484]	@ (8009f58 <HAL_RCC_ClockConfig+0x278>)
 8009d74:	681a      	ldr	r2, [r3, #0]
 8009d76:	2380      	movs	r3, #128	@ 0x80
 8009d78:	029b      	lsls	r3, r3, #10
 8009d7a:	4013      	ands	r3, r2
 8009d7c:	d120      	bne.n	8009dc0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8009d7e:	2301      	movs	r3, #1
 8009d80:	e0e1      	b.n	8009f46 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	685b      	ldr	r3, [r3, #4]
 8009d86:	2b03      	cmp	r3, #3
 8009d88:	d107      	bne.n	8009d9a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009d8a:	4b73      	ldr	r3, [pc, #460]	@ (8009f58 <HAL_RCC_ClockConfig+0x278>)
 8009d8c:	681a      	ldr	r2, [r3, #0]
 8009d8e:	2380      	movs	r3, #128	@ 0x80
 8009d90:	049b      	lsls	r3, r3, #18
 8009d92:	4013      	ands	r3, r2
 8009d94:	d114      	bne.n	8009dc0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8009d96:	2301      	movs	r3, #1
 8009d98:	e0d5      	b.n	8009f46 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	685b      	ldr	r3, [r3, #4]
 8009d9e:	2b01      	cmp	r3, #1
 8009da0:	d106      	bne.n	8009db0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009da2:	4b6d      	ldr	r3, [pc, #436]	@ (8009f58 <HAL_RCC_ClockConfig+0x278>)
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	2204      	movs	r2, #4
 8009da8:	4013      	ands	r3, r2
 8009daa:	d109      	bne.n	8009dc0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8009dac:	2301      	movs	r3, #1
 8009dae:	e0ca      	b.n	8009f46 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8009db0:	4b69      	ldr	r3, [pc, #420]	@ (8009f58 <HAL_RCC_ClockConfig+0x278>)
 8009db2:	681a      	ldr	r2, [r3, #0]
 8009db4:	2380      	movs	r3, #128	@ 0x80
 8009db6:	009b      	lsls	r3, r3, #2
 8009db8:	4013      	ands	r3, r2
 8009dba:	d101      	bne.n	8009dc0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8009dbc:	2301      	movs	r3, #1
 8009dbe:	e0c2      	b.n	8009f46 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009dc0:	4b65      	ldr	r3, [pc, #404]	@ (8009f58 <HAL_RCC_ClockConfig+0x278>)
 8009dc2:	68db      	ldr	r3, [r3, #12]
 8009dc4:	2203      	movs	r2, #3
 8009dc6:	4393      	bics	r3, r2
 8009dc8:	0019      	movs	r1, r3
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	685a      	ldr	r2, [r3, #4]
 8009dce:	4b62      	ldr	r3, [pc, #392]	@ (8009f58 <HAL_RCC_ClockConfig+0x278>)
 8009dd0:	430a      	orrs	r2, r1
 8009dd2:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009dd4:	f7fc fb60 	bl	8006498 <HAL_GetTick>
 8009dd8:	0003      	movs	r3, r0
 8009dda:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	685b      	ldr	r3, [r3, #4]
 8009de0:	2b02      	cmp	r3, #2
 8009de2:	d111      	bne.n	8009e08 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8009de4:	e009      	b.n	8009dfa <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009de6:	f7fc fb57 	bl	8006498 <HAL_GetTick>
 8009dea:	0002      	movs	r2, r0
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	1ad3      	subs	r3, r2, r3
 8009df0:	4a58      	ldr	r2, [pc, #352]	@ (8009f54 <HAL_RCC_ClockConfig+0x274>)
 8009df2:	4293      	cmp	r3, r2
 8009df4:	d901      	bls.n	8009dfa <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8009df6:	2303      	movs	r3, #3
 8009df8:	e0a5      	b.n	8009f46 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8009dfa:	4b57      	ldr	r3, [pc, #348]	@ (8009f58 <HAL_RCC_ClockConfig+0x278>)
 8009dfc:	68db      	ldr	r3, [r3, #12]
 8009dfe:	220c      	movs	r2, #12
 8009e00:	4013      	ands	r3, r2
 8009e02:	2b08      	cmp	r3, #8
 8009e04:	d1ef      	bne.n	8009de6 <HAL_RCC_ClockConfig+0x106>
 8009e06:	e03a      	b.n	8009e7e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	685b      	ldr	r3, [r3, #4]
 8009e0c:	2b03      	cmp	r3, #3
 8009e0e:	d111      	bne.n	8009e34 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009e10:	e009      	b.n	8009e26 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009e12:	f7fc fb41 	bl	8006498 <HAL_GetTick>
 8009e16:	0002      	movs	r2, r0
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	1ad3      	subs	r3, r2, r3
 8009e1c:	4a4d      	ldr	r2, [pc, #308]	@ (8009f54 <HAL_RCC_ClockConfig+0x274>)
 8009e1e:	4293      	cmp	r3, r2
 8009e20:	d901      	bls.n	8009e26 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8009e22:	2303      	movs	r3, #3
 8009e24:	e08f      	b.n	8009f46 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009e26:	4b4c      	ldr	r3, [pc, #304]	@ (8009f58 <HAL_RCC_ClockConfig+0x278>)
 8009e28:	68db      	ldr	r3, [r3, #12]
 8009e2a:	220c      	movs	r2, #12
 8009e2c:	4013      	ands	r3, r2
 8009e2e:	2b0c      	cmp	r3, #12
 8009e30:	d1ef      	bne.n	8009e12 <HAL_RCC_ClockConfig+0x132>
 8009e32:	e024      	b.n	8009e7e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	685b      	ldr	r3, [r3, #4]
 8009e38:	2b01      	cmp	r3, #1
 8009e3a:	d11b      	bne.n	8009e74 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8009e3c:	e009      	b.n	8009e52 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009e3e:	f7fc fb2b 	bl	8006498 <HAL_GetTick>
 8009e42:	0002      	movs	r2, r0
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	1ad3      	subs	r3, r2, r3
 8009e48:	4a42      	ldr	r2, [pc, #264]	@ (8009f54 <HAL_RCC_ClockConfig+0x274>)
 8009e4a:	4293      	cmp	r3, r2
 8009e4c:	d901      	bls.n	8009e52 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8009e4e:	2303      	movs	r3, #3
 8009e50:	e079      	b.n	8009f46 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8009e52:	4b41      	ldr	r3, [pc, #260]	@ (8009f58 <HAL_RCC_ClockConfig+0x278>)
 8009e54:	68db      	ldr	r3, [r3, #12]
 8009e56:	220c      	movs	r2, #12
 8009e58:	4013      	ands	r3, r2
 8009e5a:	2b04      	cmp	r3, #4
 8009e5c:	d1ef      	bne.n	8009e3e <HAL_RCC_ClockConfig+0x15e>
 8009e5e:	e00e      	b.n	8009e7e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009e60:	f7fc fb1a 	bl	8006498 <HAL_GetTick>
 8009e64:	0002      	movs	r2, r0
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	1ad3      	subs	r3, r2, r3
 8009e6a:	4a3a      	ldr	r2, [pc, #232]	@ (8009f54 <HAL_RCC_ClockConfig+0x274>)
 8009e6c:	4293      	cmp	r3, r2
 8009e6e:	d901      	bls.n	8009e74 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8009e70:	2303      	movs	r3, #3
 8009e72:	e068      	b.n	8009f46 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8009e74:	4b38      	ldr	r3, [pc, #224]	@ (8009f58 <HAL_RCC_ClockConfig+0x278>)
 8009e76:	68db      	ldr	r3, [r3, #12]
 8009e78:	220c      	movs	r2, #12
 8009e7a:	4013      	ands	r3, r2
 8009e7c:	d1f0      	bne.n	8009e60 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009e7e:	4b34      	ldr	r3, [pc, #208]	@ (8009f50 <HAL_RCC_ClockConfig+0x270>)
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	2201      	movs	r2, #1
 8009e84:	4013      	ands	r3, r2
 8009e86:	683a      	ldr	r2, [r7, #0]
 8009e88:	429a      	cmp	r2, r3
 8009e8a:	d21e      	bcs.n	8009eca <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009e8c:	4b30      	ldr	r3, [pc, #192]	@ (8009f50 <HAL_RCC_ClockConfig+0x270>)
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	2201      	movs	r2, #1
 8009e92:	4393      	bics	r3, r2
 8009e94:	0019      	movs	r1, r3
 8009e96:	4b2e      	ldr	r3, [pc, #184]	@ (8009f50 <HAL_RCC_ClockConfig+0x270>)
 8009e98:	683a      	ldr	r2, [r7, #0]
 8009e9a:	430a      	orrs	r2, r1
 8009e9c:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8009e9e:	f7fc fafb 	bl	8006498 <HAL_GetTick>
 8009ea2:	0003      	movs	r3, r0
 8009ea4:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009ea6:	e009      	b.n	8009ebc <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009ea8:	f7fc faf6 	bl	8006498 <HAL_GetTick>
 8009eac:	0002      	movs	r2, r0
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	1ad3      	subs	r3, r2, r3
 8009eb2:	4a28      	ldr	r2, [pc, #160]	@ (8009f54 <HAL_RCC_ClockConfig+0x274>)
 8009eb4:	4293      	cmp	r3, r2
 8009eb6:	d901      	bls.n	8009ebc <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8009eb8:	2303      	movs	r3, #3
 8009eba:	e044      	b.n	8009f46 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009ebc:	4b24      	ldr	r3, [pc, #144]	@ (8009f50 <HAL_RCC_ClockConfig+0x270>)
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	2201      	movs	r2, #1
 8009ec2:	4013      	ands	r3, r2
 8009ec4:	683a      	ldr	r2, [r7, #0]
 8009ec6:	429a      	cmp	r2, r3
 8009ec8:	d1ee      	bne.n	8009ea8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	2204      	movs	r2, #4
 8009ed0:	4013      	ands	r3, r2
 8009ed2:	d009      	beq.n	8009ee8 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009ed4:	4b20      	ldr	r3, [pc, #128]	@ (8009f58 <HAL_RCC_ClockConfig+0x278>)
 8009ed6:	68db      	ldr	r3, [r3, #12]
 8009ed8:	4a20      	ldr	r2, [pc, #128]	@ (8009f5c <HAL_RCC_ClockConfig+0x27c>)
 8009eda:	4013      	ands	r3, r2
 8009edc:	0019      	movs	r1, r3
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	68da      	ldr	r2, [r3, #12]
 8009ee2:	4b1d      	ldr	r3, [pc, #116]	@ (8009f58 <HAL_RCC_ClockConfig+0x278>)
 8009ee4:	430a      	orrs	r2, r1
 8009ee6:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	2208      	movs	r2, #8
 8009eee:	4013      	ands	r3, r2
 8009ef0:	d00a      	beq.n	8009f08 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8009ef2:	4b19      	ldr	r3, [pc, #100]	@ (8009f58 <HAL_RCC_ClockConfig+0x278>)
 8009ef4:	68db      	ldr	r3, [r3, #12]
 8009ef6:	4a1a      	ldr	r2, [pc, #104]	@ (8009f60 <HAL_RCC_ClockConfig+0x280>)
 8009ef8:	4013      	ands	r3, r2
 8009efa:	0019      	movs	r1, r3
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	691b      	ldr	r3, [r3, #16]
 8009f00:	00da      	lsls	r2, r3, #3
 8009f02:	4b15      	ldr	r3, [pc, #84]	@ (8009f58 <HAL_RCC_ClockConfig+0x278>)
 8009f04:	430a      	orrs	r2, r1
 8009f06:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009f08:	f000 f832 	bl	8009f70 <HAL_RCC_GetSysClockFreq>
 8009f0c:	0001      	movs	r1, r0
 8009f0e:	4b12      	ldr	r3, [pc, #72]	@ (8009f58 <HAL_RCC_ClockConfig+0x278>)
 8009f10:	68db      	ldr	r3, [r3, #12]
 8009f12:	091b      	lsrs	r3, r3, #4
 8009f14:	220f      	movs	r2, #15
 8009f16:	4013      	ands	r3, r2
 8009f18:	4a12      	ldr	r2, [pc, #72]	@ (8009f64 <HAL_RCC_ClockConfig+0x284>)
 8009f1a:	5cd3      	ldrb	r3, [r2, r3]
 8009f1c:	000a      	movs	r2, r1
 8009f1e:	40da      	lsrs	r2, r3
 8009f20:	4b11      	ldr	r3, [pc, #68]	@ (8009f68 <HAL_RCC_ClockConfig+0x288>)
 8009f22:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8009f24:	4b11      	ldr	r3, [pc, #68]	@ (8009f6c <HAL_RCC_ClockConfig+0x28c>)
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	250b      	movs	r5, #11
 8009f2a:	197c      	adds	r4, r7, r5
 8009f2c:	0018      	movs	r0, r3
 8009f2e:	f7fc fa6d 	bl	800640c <HAL_InitTick>
 8009f32:	0003      	movs	r3, r0
 8009f34:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8009f36:	197b      	adds	r3, r7, r5
 8009f38:	781b      	ldrb	r3, [r3, #0]
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d002      	beq.n	8009f44 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8009f3e:	197b      	adds	r3, r7, r5
 8009f40:	781b      	ldrb	r3, [r3, #0]
 8009f42:	e000      	b.n	8009f46 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8009f44:	2300      	movs	r3, #0
}
 8009f46:	0018      	movs	r0, r3
 8009f48:	46bd      	mov	sp, r7
 8009f4a:	b004      	add	sp, #16
 8009f4c:	bdb0      	pop	{r4, r5, r7, pc}
 8009f4e:	46c0      	nop			@ (mov r8, r8)
 8009f50:	40022000 	.word	0x40022000
 8009f54:	00001388 	.word	0x00001388
 8009f58:	40021000 	.word	0x40021000
 8009f5c:	fffff8ff 	.word	0xfffff8ff
 8009f60:	ffffc7ff 	.word	0xffffc7ff
 8009f64:	0800e9bc 	.word	0x0800e9bc
 8009f68:	20000020 	.word	0x20000020
 8009f6c:	20000034 	.word	0x20000034

08009f70 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009f70:	b5b0      	push	{r4, r5, r7, lr}
 8009f72:	b08e      	sub	sp, #56	@ 0x38
 8009f74:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8009f76:	4b4c      	ldr	r3, [pc, #304]	@ (800a0a8 <HAL_RCC_GetSysClockFreq+0x138>)
 8009f78:	68db      	ldr	r3, [r3, #12]
 8009f7a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8009f7c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009f7e:	230c      	movs	r3, #12
 8009f80:	4013      	ands	r3, r2
 8009f82:	2b0c      	cmp	r3, #12
 8009f84:	d014      	beq.n	8009fb0 <HAL_RCC_GetSysClockFreq+0x40>
 8009f86:	d900      	bls.n	8009f8a <HAL_RCC_GetSysClockFreq+0x1a>
 8009f88:	e07b      	b.n	800a082 <HAL_RCC_GetSysClockFreq+0x112>
 8009f8a:	2b04      	cmp	r3, #4
 8009f8c:	d002      	beq.n	8009f94 <HAL_RCC_GetSysClockFreq+0x24>
 8009f8e:	2b08      	cmp	r3, #8
 8009f90:	d00b      	beq.n	8009faa <HAL_RCC_GetSysClockFreq+0x3a>
 8009f92:	e076      	b.n	800a082 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8009f94:	4b44      	ldr	r3, [pc, #272]	@ (800a0a8 <HAL_RCC_GetSysClockFreq+0x138>)
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	2210      	movs	r2, #16
 8009f9a:	4013      	ands	r3, r2
 8009f9c:	d002      	beq.n	8009fa4 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8009f9e:	4b43      	ldr	r3, [pc, #268]	@ (800a0ac <HAL_RCC_GetSysClockFreq+0x13c>)
 8009fa0:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8009fa2:	e07c      	b.n	800a09e <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8009fa4:	4b42      	ldr	r3, [pc, #264]	@ (800a0b0 <HAL_RCC_GetSysClockFreq+0x140>)
 8009fa6:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8009fa8:	e079      	b.n	800a09e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8009faa:	4b42      	ldr	r3, [pc, #264]	@ (800a0b4 <HAL_RCC_GetSysClockFreq+0x144>)
 8009fac:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8009fae:	e076      	b.n	800a09e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8009fb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fb2:	0c9a      	lsrs	r2, r3, #18
 8009fb4:	230f      	movs	r3, #15
 8009fb6:	401a      	ands	r2, r3
 8009fb8:	4b3f      	ldr	r3, [pc, #252]	@ (800a0b8 <HAL_RCC_GetSysClockFreq+0x148>)
 8009fba:	5c9b      	ldrb	r3, [r3, r2]
 8009fbc:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8009fbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fc0:	0d9a      	lsrs	r2, r3, #22
 8009fc2:	2303      	movs	r3, #3
 8009fc4:	4013      	ands	r3, r2
 8009fc6:	3301      	adds	r3, #1
 8009fc8:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009fca:	4b37      	ldr	r3, [pc, #220]	@ (800a0a8 <HAL_RCC_GetSysClockFreq+0x138>)
 8009fcc:	68da      	ldr	r2, [r3, #12]
 8009fce:	2380      	movs	r3, #128	@ 0x80
 8009fd0:	025b      	lsls	r3, r3, #9
 8009fd2:	4013      	ands	r3, r2
 8009fd4:	d01a      	beq.n	800a00c <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8009fd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fd8:	61bb      	str	r3, [r7, #24]
 8009fda:	2300      	movs	r3, #0
 8009fdc:	61fb      	str	r3, [r7, #28]
 8009fde:	4a35      	ldr	r2, [pc, #212]	@ (800a0b4 <HAL_RCC_GetSysClockFreq+0x144>)
 8009fe0:	2300      	movs	r3, #0
 8009fe2:	69b8      	ldr	r0, [r7, #24]
 8009fe4:	69f9      	ldr	r1, [r7, #28]
 8009fe6:	f7f6 fab9 	bl	800055c <__aeabi_lmul>
 8009fea:	0002      	movs	r2, r0
 8009fec:	000b      	movs	r3, r1
 8009fee:	0010      	movs	r0, r2
 8009ff0:	0019      	movs	r1, r3
 8009ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ff4:	613b      	str	r3, [r7, #16]
 8009ff6:	2300      	movs	r3, #0
 8009ff8:	617b      	str	r3, [r7, #20]
 8009ffa:	693a      	ldr	r2, [r7, #16]
 8009ffc:	697b      	ldr	r3, [r7, #20]
 8009ffe:	f7f6 fa8d 	bl	800051c <__aeabi_uldivmod>
 800a002:	0002      	movs	r2, r0
 800a004:	000b      	movs	r3, r1
 800a006:	0013      	movs	r3, r2
 800a008:	637b      	str	r3, [r7, #52]	@ 0x34
 800a00a:	e037      	b.n	800a07c <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800a00c:	4b26      	ldr	r3, [pc, #152]	@ (800a0a8 <HAL_RCC_GetSysClockFreq+0x138>)
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	2210      	movs	r2, #16
 800a012:	4013      	ands	r3, r2
 800a014:	d01a      	beq.n	800a04c <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800a016:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a018:	60bb      	str	r3, [r7, #8]
 800a01a:	2300      	movs	r3, #0
 800a01c:	60fb      	str	r3, [r7, #12]
 800a01e:	4a23      	ldr	r2, [pc, #140]	@ (800a0ac <HAL_RCC_GetSysClockFreq+0x13c>)
 800a020:	2300      	movs	r3, #0
 800a022:	68b8      	ldr	r0, [r7, #8]
 800a024:	68f9      	ldr	r1, [r7, #12]
 800a026:	f7f6 fa99 	bl	800055c <__aeabi_lmul>
 800a02a:	0002      	movs	r2, r0
 800a02c:	000b      	movs	r3, r1
 800a02e:	0010      	movs	r0, r2
 800a030:	0019      	movs	r1, r3
 800a032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a034:	603b      	str	r3, [r7, #0]
 800a036:	2300      	movs	r3, #0
 800a038:	607b      	str	r3, [r7, #4]
 800a03a:	683a      	ldr	r2, [r7, #0]
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	f7f6 fa6d 	bl	800051c <__aeabi_uldivmod>
 800a042:	0002      	movs	r2, r0
 800a044:	000b      	movs	r3, r1
 800a046:	0013      	movs	r3, r2
 800a048:	637b      	str	r3, [r7, #52]	@ 0x34
 800a04a:	e017      	b.n	800a07c <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800a04c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a04e:	0018      	movs	r0, r3
 800a050:	2300      	movs	r3, #0
 800a052:	0019      	movs	r1, r3
 800a054:	4a16      	ldr	r2, [pc, #88]	@ (800a0b0 <HAL_RCC_GetSysClockFreq+0x140>)
 800a056:	2300      	movs	r3, #0
 800a058:	f7f6 fa80 	bl	800055c <__aeabi_lmul>
 800a05c:	0002      	movs	r2, r0
 800a05e:	000b      	movs	r3, r1
 800a060:	0010      	movs	r0, r2
 800a062:	0019      	movs	r1, r3
 800a064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a066:	001c      	movs	r4, r3
 800a068:	2300      	movs	r3, #0
 800a06a:	001d      	movs	r5, r3
 800a06c:	0022      	movs	r2, r4
 800a06e:	002b      	movs	r3, r5
 800a070:	f7f6 fa54 	bl	800051c <__aeabi_uldivmod>
 800a074:	0002      	movs	r2, r0
 800a076:	000b      	movs	r3, r1
 800a078:	0013      	movs	r3, r2
 800a07a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 800a07c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a07e:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800a080:	e00d      	b.n	800a09e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800a082:	4b09      	ldr	r3, [pc, #36]	@ (800a0a8 <HAL_RCC_GetSysClockFreq+0x138>)
 800a084:	685b      	ldr	r3, [r3, #4]
 800a086:	0b5b      	lsrs	r3, r3, #13
 800a088:	2207      	movs	r2, #7
 800a08a:	4013      	ands	r3, r2
 800a08c:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800a08e:	6a3b      	ldr	r3, [r7, #32]
 800a090:	3301      	adds	r3, #1
 800a092:	2280      	movs	r2, #128	@ 0x80
 800a094:	0212      	lsls	r2, r2, #8
 800a096:	409a      	lsls	r2, r3
 800a098:	0013      	movs	r3, r2
 800a09a:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800a09c:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 800a09e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 800a0a0:	0018      	movs	r0, r3
 800a0a2:	46bd      	mov	sp, r7
 800a0a4:	b00e      	add	sp, #56	@ 0x38
 800a0a6:	bdb0      	pop	{r4, r5, r7, pc}
 800a0a8:	40021000 	.word	0x40021000
 800a0ac:	003d0900 	.word	0x003d0900
 800a0b0:	00f42400 	.word	0x00f42400
 800a0b4:	007a1200 	.word	0x007a1200
 800a0b8:	0800e9d4 	.word	0x0800e9d4

0800a0bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a0bc:	b580      	push	{r7, lr}
 800a0be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a0c0:	4b02      	ldr	r3, [pc, #8]	@ (800a0cc <HAL_RCC_GetHCLKFreq+0x10>)
 800a0c2:	681b      	ldr	r3, [r3, #0]
}
 800a0c4:	0018      	movs	r0, r3
 800a0c6:	46bd      	mov	sp, r7
 800a0c8:	bd80      	pop	{r7, pc}
 800a0ca:	46c0      	nop			@ (mov r8, r8)
 800a0cc:	20000020 	.word	0x20000020

0800a0d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a0d0:	b580      	push	{r7, lr}
 800a0d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800a0d4:	f7ff fff2 	bl	800a0bc <HAL_RCC_GetHCLKFreq>
 800a0d8:	0001      	movs	r1, r0
 800a0da:	4b06      	ldr	r3, [pc, #24]	@ (800a0f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a0dc:	68db      	ldr	r3, [r3, #12]
 800a0de:	0a1b      	lsrs	r3, r3, #8
 800a0e0:	2207      	movs	r2, #7
 800a0e2:	4013      	ands	r3, r2
 800a0e4:	4a04      	ldr	r2, [pc, #16]	@ (800a0f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 800a0e6:	5cd3      	ldrb	r3, [r2, r3]
 800a0e8:	40d9      	lsrs	r1, r3
 800a0ea:	000b      	movs	r3, r1
}
 800a0ec:	0018      	movs	r0, r3
 800a0ee:	46bd      	mov	sp, r7
 800a0f0:	bd80      	pop	{r7, pc}
 800a0f2:	46c0      	nop			@ (mov r8, r8)
 800a0f4:	40021000 	.word	0x40021000
 800a0f8:	0800e9cc 	.word	0x0800e9cc

0800a0fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a0fc:	b580      	push	{r7, lr}
 800a0fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800a100:	f7ff ffdc 	bl	800a0bc <HAL_RCC_GetHCLKFreq>
 800a104:	0001      	movs	r1, r0
 800a106:	4b06      	ldr	r3, [pc, #24]	@ (800a120 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a108:	68db      	ldr	r3, [r3, #12]
 800a10a:	0adb      	lsrs	r3, r3, #11
 800a10c:	2207      	movs	r2, #7
 800a10e:	4013      	ands	r3, r2
 800a110:	4a04      	ldr	r2, [pc, #16]	@ (800a124 <HAL_RCC_GetPCLK2Freq+0x28>)
 800a112:	5cd3      	ldrb	r3, [r2, r3]
 800a114:	40d9      	lsrs	r1, r3
 800a116:	000b      	movs	r3, r1
}
 800a118:	0018      	movs	r0, r3
 800a11a:	46bd      	mov	sp, r7
 800a11c:	bd80      	pop	{r7, pc}
 800a11e:	46c0      	nop			@ (mov r8, r8)
 800a120:	40021000 	.word	0x40021000
 800a124:	0800e9cc 	.word	0x0800e9cc

0800a128 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a128:	b580      	push	{r7, lr}
 800a12a:	b086      	sub	sp, #24
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 800a130:	2017      	movs	r0, #23
 800a132:	183b      	adds	r3, r7, r0
 800a134:	2200      	movs	r2, #0
 800a136:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	2220      	movs	r2, #32
 800a13e:	4013      	ands	r3, r2
 800a140:	d100      	bne.n	800a144 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 800a142:	e0c7      	b.n	800a2d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a144:	4b9b      	ldr	r3, [pc, #620]	@ (800a3b4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800a146:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a148:	2380      	movs	r3, #128	@ 0x80
 800a14a:	055b      	lsls	r3, r3, #21
 800a14c:	4013      	ands	r3, r2
 800a14e:	d109      	bne.n	800a164 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a150:	4b98      	ldr	r3, [pc, #608]	@ (800a3b4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800a152:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a154:	4b97      	ldr	r3, [pc, #604]	@ (800a3b4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800a156:	2180      	movs	r1, #128	@ 0x80
 800a158:	0549      	lsls	r1, r1, #21
 800a15a:	430a      	orrs	r2, r1
 800a15c:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 800a15e:	183b      	adds	r3, r7, r0
 800a160:	2201      	movs	r2, #1
 800a162:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a164:	4b94      	ldr	r3, [pc, #592]	@ (800a3b8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800a166:	681a      	ldr	r2, [r3, #0]
 800a168:	2380      	movs	r3, #128	@ 0x80
 800a16a:	005b      	lsls	r3, r3, #1
 800a16c:	4013      	ands	r3, r2
 800a16e:	d11a      	bne.n	800a1a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a170:	4b91      	ldr	r3, [pc, #580]	@ (800a3b8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800a172:	681a      	ldr	r2, [r3, #0]
 800a174:	4b90      	ldr	r3, [pc, #576]	@ (800a3b8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800a176:	2180      	movs	r1, #128	@ 0x80
 800a178:	0049      	lsls	r1, r1, #1
 800a17a:	430a      	orrs	r2, r1
 800a17c:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a17e:	f7fc f98b 	bl	8006498 <HAL_GetTick>
 800a182:	0003      	movs	r3, r0
 800a184:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a186:	e008      	b.n	800a19a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a188:	f7fc f986 	bl	8006498 <HAL_GetTick>
 800a18c:	0002      	movs	r2, r0
 800a18e:	693b      	ldr	r3, [r7, #16]
 800a190:	1ad3      	subs	r3, r2, r3
 800a192:	2b64      	cmp	r3, #100	@ 0x64
 800a194:	d901      	bls.n	800a19a <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 800a196:	2303      	movs	r3, #3
 800a198:	e107      	b.n	800a3aa <HAL_RCCEx_PeriphCLKConfig+0x282>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a19a:	4b87      	ldr	r3, [pc, #540]	@ (800a3b8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800a19c:	681a      	ldr	r2, [r3, #0]
 800a19e:	2380      	movs	r3, #128	@ 0x80
 800a1a0:	005b      	lsls	r3, r3, #1
 800a1a2:	4013      	ands	r3, r2
 800a1a4:	d0f0      	beq.n	800a188 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800a1a6:	4b83      	ldr	r3, [pc, #524]	@ (800a3b4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800a1a8:	681a      	ldr	r2, [r3, #0]
 800a1aa:	23c0      	movs	r3, #192	@ 0xc0
 800a1ac:	039b      	lsls	r3, r3, #14
 800a1ae:	4013      	ands	r3, r2
 800a1b0:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	685a      	ldr	r2, [r3, #4]
 800a1b6:	23c0      	movs	r3, #192	@ 0xc0
 800a1b8:	039b      	lsls	r3, r3, #14
 800a1ba:	4013      	ands	r3, r2
 800a1bc:	68fa      	ldr	r2, [r7, #12]
 800a1be:	429a      	cmp	r2, r3
 800a1c0:	d013      	beq.n	800a1ea <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	685a      	ldr	r2, [r3, #4]
 800a1c6:	23c0      	movs	r3, #192	@ 0xc0
 800a1c8:	029b      	lsls	r3, r3, #10
 800a1ca:	401a      	ands	r2, r3
 800a1cc:	23c0      	movs	r3, #192	@ 0xc0
 800a1ce:	029b      	lsls	r3, r3, #10
 800a1d0:	429a      	cmp	r2, r3
 800a1d2:	d10a      	bne.n	800a1ea <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a1d4:	4b77      	ldr	r3, [pc, #476]	@ (800a3b4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800a1d6:	681a      	ldr	r2, [r3, #0]
 800a1d8:	2380      	movs	r3, #128	@ 0x80
 800a1da:	029b      	lsls	r3, r3, #10
 800a1dc:	401a      	ands	r2, r3
 800a1de:	2380      	movs	r3, #128	@ 0x80
 800a1e0:	029b      	lsls	r3, r3, #10
 800a1e2:	429a      	cmp	r2, r3
 800a1e4:	d101      	bne.n	800a1ea <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 800a1e6:	2301      	movs	r3, #1
 800a1e8:	e0df      	b.n	800a3aa <HAL_RCCEx_PeriphCLKConfig+0x282>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800a1ea:	4b72      	ldr	r3, [pc, #456]	@ (800a3b4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800a1ec:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a1ee:	23c0      	movs	r3, #192	@ 0xc0
 800a1f0:	029b      	lsls	r3, r3, #10
 800a1f2:	4013      	ands	r3, r2
 800a1f4:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d03b      	beq.n	800a274 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	685a      	ldr	r2, [r3, #4]
 800a200:	23c0      	movs	r3, #192	@ 0xc0
 800a202:	029b      	lsls	r3, r3, #10
 800a204:	4013      	ands	r3, r2
 800a206:	68fa      	ldr	r2, [r7, #12]
 800a208:	429a      	cmp	r2, r3
 800a20a:	d033      	beq.n	800a274 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	2220      	movs	r2, #32
 800a212:	4013      	ands	r3, r2
 800a214:	d02e      	beq.n	800a274 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800a216:	4b67      	ldr	r3, [pc, #412]	@ (800a3b4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800a218:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a21a:	4a68      	ldr	r2, [pc, #416]	@ (800a3bc <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800a21c:	4013      	ands	r3, r2
 800a21e:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800a220:	4b64      	ldr	r3, [pc, #400]	@ (800a3b4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800a222:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a224:	4b63      	ldr	r3, [pc, #396]	@ (800a3b4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800a226:	2180      	movs	r1, #128	@ 0x80
 800a228:	0309      	lsls	r1, r1, #12
 800a22a:	430a      	orrs	r2, r1
 800a22c:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800a22e:	4b61      	ldr	r3, [pc, #388]	@ (800a3b4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800a230:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a232:	4b60      	ldr	r3, [pc, #384]	@ (800a3b4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800a234:	4962      	ldr	r1, [pc, #392]	@ (800a3c0 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 800a236:	400a      	ands	r2, r1
 800a238:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 800a23a:	4b5e      	ldr	r3, [pc, #376]	@ (800a3b4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800a23c:	68fa      	ldr	r2, [r7, #12]
 800a23e:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800a240:	68fa      	ldr	r2, [r7, #12]
 800a242:	2380      	movs	r3, #128	@ 0x80
 800a244:	005b      	lsls	r3, r3, #1
 800a246:	4013      	ands	r3, r2
 800a248:	d014      	beq.n	800a274 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a24a:	f7fc f925 	bl	8006498 <HAL_GetTick>
 800a24e:	0003      	movs	r3, r0
 800a250:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a252:	e009      	b.n	800a268 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a254:	f7fc f920 	bl	8006498 <HAL_GetTick>
 800a258:	0002      	movs	r2, r0
 800a25a:	693b      	ldr	r3, [r7, #16]
 800a25c:	1ad3      	subs	r3, r2, r3
 800a25e:	4a59      	ldr	r2, [pc, #356]	@ (800a3c4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800a260:	4293      	cmp	r3, r2
 800a262:	d901      	bls.n	800a268 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 800a264:	2303      	movs	r3, #3
 800a266:	e0a0      	b.n	800a3aa <HAL_RCCEx_PeriphCLKConfig+0x282>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a268:	4b52      	ldr	r3, [pc, #328]	@ (800a3b4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800a26a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a26c:	2380      	movs	r3, #128	@ 0x80
 800a26e:	009b      	lsls	r3, r3, #2
 800a270:	4013      	ands	r3, r2
 800a272:	d0ef      	beq.n	800a254 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	2220      	movs	r2, #32
 800a27a:	4013      	ands	r3, r2
 800a27c:	d01f      	beq.n	800a2be <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	685a      	ldr	r2, [r3, #4]
 800a282:	23c0      	movs	r3, #192	@ 0xc0
 800a284:	029b      	lsls	r3, r3, #10
 800a286:	401a      	ands	r2, r3
 800a288:	23c0      	movs	r3, #192	@ 0xc0
 800a28a:	029b      	lsls	r3, r3, #10
 800a28c:	429a      	cmp	r2, r3
 800a28e:	d10c      	bne.n	800a2aa <HAL_RCCEx_PeriphCLKConfig+0x182>
 800a290:	4b48      	ldr	r3, [pc, #288]	@ (800a3b4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	4a4c      	ldr	r2, [pc, #304]	@ (800a3c8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 800a296:	4013      	ands	r3, r2
 800a298:	0019      	movs	r1, r3
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	685a      	ldr	r2, [r3, #4]
 800a29e:	23c0      	movs	r3, #192	@ 0xc0
 800a2a0:	039b      	lsls	r3, r3, #14
 800a2a2:	401a      	ands	r2, r3
 800a2a4:	4b43      	ldr	r3, [pc, #268]	@ (800a3b4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800a2a6:	430a      	orrs	r2, r1
 800a2a8:	601a      	str	r2, [r3, #0]
 800a2aa:	4b42      	ldr	r3, [pc, #264]	@ (800a3b4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800a2ac:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	685a      	ldr	r2, [r3, #4]
 800a2b2:	23c0      	movs	r3, #192	@ 0xc0
 800a2b4:	029b      	lsls	r3, r3, #10
 800a2b6:	401a      	ands	r2, r3
 800a2b8:	4b3e      	ldr	r3, [pc, #248]	@ (800a3b4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800a2ba:	430a      	orrs	r2, r1
 800a2bc:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800a2be:	2317      	movs	r3, #23
 800a2c0:	18fb      	adds	r3, r7, r3
 800a2c2:	781b      	ldrb	r3, [r3, #0]
 800a2c4:	2b01      	cmp	r3, #1
 800a2c6:	d105      	bne.n	800a2d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a2c8:	4b3a      	ldr	r3, [pc, #232]	@ (800a3b4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800a2ca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a2cc:	4b39      	ldr	r3, [pc, #228]	@ (800a3b4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800a2ce:	493f      	ldr	r1, [pc, #252]	@ (800a3cc <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 800a2d0:	400a      	ands	r2, r1
 800a2d2:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	2201      	movs	r2, #1
 800a2da:	4013      	ands	r3, r2
 800a2dc:	d009      	beq.n	800a2f2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800a2de:	4b35      	ldr	r3, [pc, #212]	@ (800a3b4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800a2e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a2e2:	2203      	movs	r2, #3
 800a2e4:	4393      	bics	r3, r2
 800a2e6:	0019      	movs	r1, r3
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	689a      	ldr	r2, [r3, #8]
 800a2ec:	4b31      	ldr	r3, [pc, #196]	@ (800a3b4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800a2ee:	430a      	orrs	r2, r1
 800a2f0:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	2202      	movs	r2, #2
 800a2f8:	4013      	ands	r3, r2
 800a2fa:	d009      	beq.n	800a310 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800a2fc:	4b2d      	ldr	r3, [pc, #180]	@ (800a3b4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800a2fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a300:	220c      	movs	r2, #12
 800a302:	4393      	bics	r3, r2
 800a304:	0019      	movs	r1, r3
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	68da      	ldr	r2, [r3, #12]
 800a30a:	4b2a      	ldr	r3, [pc, #168]	@ (800a3b4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800a30c:	430a      	orrs	r2, r1
 800a30e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	2204      	movs	r2, #4
 800a316:	4013      	ands	r3, r2
 800a318:	d009      	beq.n	800a32e <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a31a:	4b26      	ldr	r3, [pc, #152]	@ (800a3b4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800a31c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a31e:	4a2c      	ldr	r2, [pc, #176]	@ (800a3d0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 800a320:	4013      	ands	r3, r2
 800a322:	0019      	movs	r1, r3
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	691a      	ldr	r2, [r3, #16]
 800a328:	4b22      	ldr	r3, [pc, #136]	@ (800a3b4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800a32a:	430a      	orrs	r2, r1
 800a32c:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	2208      	movs	r2, #8
 800a334:	4013      	ands	r3, r2
 800a336:	d009      	beq.n	800a34c <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800a338:	4b1e      	ldr	r3, [pc, #120]	@ (800a3b4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800a33a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a33c:	4a25      	ldr	r2, [pc, #148]	@ (800a3d4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 800a33e:	4013      	ands	r3, r2
 800a340:	0019      	movs	r1, r3
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	695a      	ldr	r2, [r3, #20]
 800a346:	4b1b      	ldr	r3, [pc, #108]	@ (800a3b4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800a348:	430a      	orrs	r2, r1
 800a34a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	681a      	ldr	r2, [r3, #0]
 800a350:	2380      	movs	r3, #128	@ 0x80
 800a352:	005b      	lsls	r3, r3, #1
 800a354:	4013      	ands	r3, r2
 800a356:	d009      	beq.n	800a36c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800a358:	4b16      	ldr	r3, [pc, #88]	@ (800a3b4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800a35a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a35c:	4a17      	ldr	r2, [pc, #92]	@ (800a3bc <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800a35e:	4013      	ands	r3, r2
 800a360:	0019      	movs	r1, r3
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	699a      	ldr	r2, [r3, #24]
 800a366:	4b13      	ldr	r3, [pc, #76]	@ (800a3b4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800a368:	430a      	orrs	r2, r1
 800a36a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	2240      	movs	r2, #64	@ 0x40
 800a372:	4013      	ands	r3, r2
 800a374:	d009      	beq.n	800a38a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a376:	4b0f      	ldr	r3, [pc, #60]	@ (800a3b4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800a378:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a37a:	4a17      	ldr	r2, [pc, #92]	@ (800a3d8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 800a37c:	4013      	ands	r3, r2
 800a37e:	0019      	movs	r1, r3
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	6a1a      	ldr	r2, [r3, #32]
 800a384:	4b0b      	ldr	r3, [pc, #44]	@ (800a3b4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800a386:	430a      	orrs	r2, r1
 800a388:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	2280      	movs	r2, #128	@ 0x80
 800a390:	4013      	ands	r3, r2
 800a392:	d009      	beq.n	800a3a8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800a394:	4b07      	ldr	r3, [pc, #28]	@ (800a3b4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800a396:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a398:	4a10      	ldr	r2, [pc, #64]	@ (800a3dc <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 800a39a:	4013      	ands	r3, r2
 800a39c:	0019      	movs	r1, r3
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	69da      	ldr	r2, [r3, #28]
 800a3a2:	4b04      	ldr	r3, [pc, #16]	@ (800a3b4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800a3a4:	430a      	orrs	r2, r1
 800a3a6:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800a3a8:	2300      	movs	r3, #0
}
 800a3aa:	0018      	movs	r0, r3
 800a3ac:	46bd      	mov	sp, r7
 800a3ae:	b006      	add	sp, #24
 800a3b0:	bd80      	pop	{r7, pc}
 800a3b2:	46c0      	nop			@ (mov r8, r8)
 800a3b4:	40021000 	.word	0x40021000
 800a3b8:	40007000 	.word	0x40007000
 800a3bc:	fffcffff 	.word	0xfffcffff
 800a3c0:	fff7ffff 	.word	0xfff7ffff
 800a3c4:	00001388 	.word	0x00001388
 800a3c8:	ffcfffff 	.word	0xffcfffff
 800a3cc:	efffffff 	.word	0xefffffff
 800a3d0:	fffff3ff 	.word	0xfffff3ff
 800a3d4:	ffffcfff 	.word	0xffffcfff
 800a3d8:	fbffffff 	.word	0xfbffffff
 800a3dc:	fff3ffff 	.word	0xfff3ffff

0800a3e0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800a3e0:	b5b0      	push	{r4, r5, r7, lr}
 800a3e2:	b084      	sub	sp, #16
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800a3e8:	230f      	movs	r3, #15
 800a3ea:	18fb      	adds	r3, r7, r3
 800a3ec:	2201      	movs	r2, #1
 800a3ee:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d101      	bne.n	800a3fa <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 800a3f6:	2301      	movs	r3, #1
 800a3f8:	e088      	b.n	800a50c <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	2221      	movs	r2, #33	@ 0x21
 800a3fe:	5c9b      	ldrb	r3, [r3, r2]
 800a400:	b2db      	uxtb	r3, r3
 800a402:	2b00      	cmp	r3, #0
 800a404:	d107      	bne.n	800a416 <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	2220      	movs	r2, #32
 800a40a:	2100      	movs	r1, #0
 800a40c:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	0018      	movs	r0, r3
 800a412:	f7f9 ffab 	bl	800436c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	2221      	movs	r2, #33	@ 0x21
 800a41a:	2102      	movs	r1, #2
 800a41c:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	68db      	ldr	r3, [r3, #12]
 800a424:	2210      	movs	r2, #16
 800a426:	4013      	ands	r3, r2
 800a428:	2b10      	cmp	r3, #16
 800a42a:	d05f      	beq.n	800a4ec <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	22ca      	movs	r2, #202	@ 0xca
 800a432:	625a      	str	r2, [r3, #36]	@ 0x24
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	2253      	movs	r2, #83	@ 0x53
 800a43a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800a43c:	250f      	movs	r5, #15
 800a43e:	197c      	adds	r4, r7, r5
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	0018      	movs	r0, r3
 800a444:	f000 f890 	bl	800a568 <RTC_EnterInitMode>
 800a448:	0003      	movs	r3, r0
 800a44a:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 800a44c:	0028      	movs	r0, r5
 800a44e:	183b      	adds	r3, r7, r0
 800a450:	781b      	ldrb	r3, [r3, #0]
 800a452:	2b00      	cmp	r3, #0
 800a454:	d12c      	bne.n	800a4b0 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	689a      	ldr	r2, [r3, #8]
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	492c      	ldr	r1, [pc, #176]	@ (800a514 <HAL_RTC_Init+0x134>)
 800a462:	400a      	ands	r2, r1
 800a464:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	6899      	ldr	r1, [r3, #8]
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	685a      	ldr	r2, [r3, #4]
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	691b      	ldr	r3, [r3, #16]
 800a474:	431a      	orrs	r2, r3
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	699b      	ldr	r3, [r3, #24]
 800a47a:	431a      	orrs	r2, r3
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	430a      	orrs	r2, r1
 800a482:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	687a      	ldr	r2, [r7, #4]
 800a48a:	68d2      	ldr	r2, [r2, #12]
 800a48c:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	6919      	ldr	r1, [r3, #16]
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	689b      	ldr	r3, [r3, #8]
 800a498:	041a      	lsls	r2, r3, #16
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	430a      	orrs	r2, r1
 800a4a0:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800a4a2:	183c      	adds	r4, r7, r0
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	0018      	movs	r0, r3
 800a4a8:	f000 f8a2 	bl	800a5f0 <RTC_ExitInitMode>
 800a4ac:	0003      	movs	r3, r0
 800a4ae:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 800a4b0:	230f      	movs	r3, #15
 800a4b2:	18fb      	adds	r3, r7, r3
 800a4b4:	781b      	ldrb	r3, [r3, #0]
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d113      	bne.n	800a4e2 <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	2103      	movs	r1, #3
 800a4c6:	438a      	bics	r2, r1
 800a4c8:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	69da      	ldr	r2, [r3, #28]
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	695b      	ldr	r3, [r3, #20]
 800a4d8:	431a      	orrs	r2, r3
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	430a      	orrs	r2, r1
 800a4e0:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	22ff      	movs	r2, #255	@ 0xff
 800a4e8:	625a      	str	r2, [r3, #36]	@ 0x24
 800a4ea:	e003      	b.n	800a4f4 <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 800a4ec:	230f      	movs	r3, #15
 800a4ee:	18fb      	adds	r3, r7, r3
 800a4f0:	2200      	movs	r2, #0
 800a4f2:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 800a4f4:	230f      	movs	r3, #15
 800a4f6:	18fb      	adds	r3, r7, r3
 800a4f8:	781b      	ldrb	r3, [r3, #0]
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d103      	bne.n	800a506 <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	2221      	movs	r2, #33	@ 0x21
 800a502:	2101      	movs	r1, #1
 800a504:	5499      	strb	r1, [r3, r2]
  }

  return status;
 800a506:	230f      	movs	r3, #15
 800a508:	18fb      	adds	r3, r7, r3
 800a50a:	781b      	ldrb	r3, [r3, #0]
}
 800a50c:	0018      	movs	r0, r3
 800a50e:	46bd      	mov	sp, r7
 800a510:	b004      	add	sp, #16
 800a512:	bdb0      	pop	{r4, r5, r7, pc}
 800a514:	ff8fffbf 	.word	0xff8fffbf

0800a518 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800a518:	b580      	push	{r7, lr}
 800a51a:	b084      	sub	sp, #16
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a520:	2300      	movs	r3, #0
 800a522:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	4a0e      	ldr	r2, [pc, #56]	@ (800a564 <HAL_RTC_WaitForSynchro+0x4c>)
 800a52a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a52c:	f7fb ffb4 	bl	8006498 <HAL_GetTick>
 800a530:	0003      	movs	r3, r0
 800a532:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800a534:	e00a      	b.n	800a54c <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a536:	f7fb ffaf 	bl	8006498 <HAL_GetTick>
 800a53a:	0002      	movs	r2, r0
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	1ad2      	subs	r2, r2, r3
 800a540:	23fa      	movs	r3, #250	@ 0xfa
 800a542:	009b      	lsls	r3, r3, #2
 800a544:	429a      	cmp	r2, r3
 800a546:	d901      	bls.n	800a54c <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800a548:	2303      	movs	r3, #3
 800a54a:	e006      	b.n	800a55a <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	68db      	ldr	r3, [r3, #12]
 800a552:	2220      	movs	r2, #32
 800a554:	4013      	ands	r3, r2
 800a556:	d0ee      	beq.n	800a536 <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 800a558:	2300      	movs	r3, #0
}
 800a55a:	0018      	movs	r0, r3
 800a55c:	46bd      	mov	sp, r7
 800a55e:	b004      	add	sp, #16
 800a560:	bd80      	pop	{r7, pc}
 800a562:	46c0      	nop			@ (mov r8, r8)
 800a564:	0001ff5f 	.word	0x0001ff5f

0800a568 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800a568:	b580      	push	{r7, lr}
 800a56a:	b084      	sub	sp, #16
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a570:	2300      	movs	r3, #0
 800a572:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800a574:	230f      	movs	r3, #15
 800a576:	18fb      	adds	r3, r7, r3
 800a578:	2200      	movs	r2, #0
 800a57a:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	68db      	ldr	r3, [r3, #12]
 800a582:	2240      	movs	r2, #64	@ 0x40
 800a584:	4013      	ands	r3, r2
 800a586:	d12c      	bne.n	800a5e2 <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	68da      	ldr	r2, [r3, #12]
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	2180      	movs	r1, #128	@ 0x80
 800a594:	430a      	orrs	r2, r1
 800a596:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a598:	f7fb ff7e 	bl	8006498 <HAL_GetTick>
 800a59c:	0003      	movs	r3, r0
 800a59e:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800a5a0:	e014      	b.n	800a5cc <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a5a2:	f7fb ff79 	bl	8006498 <HAL_GetTick>
 800a5a6:	0002      	movs	r2, r0
 800a5a8:	68bb      	ldr	r3, [r7, #8]
 800a5aa:	1ad2      	subs	r2, r2, r3
 800a5ac:	200f      	movs	r0, #15
 800a5ae:	183b      	adds	r3, r7, r0
 800a5b0:	1839      	adds	r1, r7, r0
 800a5b2:	7809      	ldrb	r1, [r1, #0]
 800a5b4:	7019      	strb	r1, [r3, #0]
 800a5b6:	23fa      	movs	r3, #250	@ 0xfa
 800a5b8:	009b      	lsls	r3, r3, #2
 800a5ba:	429a      	cmp	r2, r3
 800a5bc:	d906      	bls.n	800a5cc <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	2221      	movs	r2, #33	@ 0x21
 800a5c2:	2104      	movs	r1, #4
 800a5c4:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 800a5c6:	183b      	adds	r3, r7, r0
 800a5c8:	2201      	movs	r2, #1
 800a5ca:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	68db      	ldr	r3, [r3, #12]
 800a5d2:	2240      	movs	r2, #64	@ 0x40
 800a5d4:	4013      	ands	r3, r2
 800a5d6:	d104      	bne.n	800a5e2 <RTC_EnterInitMode+0x7a>
 800a5d8:	230f      	movs	r3, #15
 800a5da:	18fb      	adds	r3, r7, r3
 800a5dc:	781b      	ldrb	r3, [r3, #0]
 800a5de:	2b01      	cmp	r3, #1
 800a5e0:	d1df      	bne.n	800a5a2 <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 800a5e2:	230f      	movs	r3, #15
 800a5e4:	18fb      	adds	r3, r7, r3
 800a5e6:	781b      	ldrb	r3, [r3, #0]
}
 800a5e8:	0018      	movs	r0, r3
 800a5ea:	46bd      	mov	sp, r7
 800a5ec:	b004      	add	sp, #16
 800a5ee:	bd80      	pop	{r7, pc}

0800a5f0 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800a5f0:	b590      	push	{r4, r7, lr}
 800a5f2:	b085      	sub	sp, #20
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a5f8:	240f      	movs	r4, #15
 800a5fa:	193b      	adds	r3, r7, r4
 800a5fc:	2200      	movs	r2, #0
 800a5fe:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	68da      	ldr	r2, [r3, #12]
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	2180      	movs	r1, #128	@ 0x80
 800a60c:	438a      	bics	r2, r1
 800a60e:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	689b      	ldr	r3, [r3, #8]
 800a616:	2220      	movs	r2, #32
 800a618:	4013      	ands	r3, r2
 800a61a:	d10c      	bne.n	800a636 <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	0018      	movs	r0, r3
 800a620:	f7ff ff7a 	bl	800a518 <HAL_RTC_WaitForSynchro>
 800a624:	1e03      	subs	r3, r0, #0
 800a626:	d006      	beq.n	800a636 <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	2221      	movs	r2, #33	@ 0x21
 800a62c:	2104      	movs	r1, #4
 800a62e:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 800a630:	193b      	adds	r3, r7, r4
 800a632:	2201      	movs	r2, #1
 800a634:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 800a636:	230f      	movs	r3, #15
 800a638:	18fb      	adds	r3, r7, r3
 800a63a:	781b      	ldrb	r3, [r3, #0]
}
 800a63c:	0018      	movs	r0, r3
 800a63e:	46bd      	mov	sp, r7
 800a640:	b005      	add	sp, #20
 800a642:	bd90      	pop	{r4, r7, pc}

0800a644 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a644:	b580      	push	{r7, lr}
 800a646:	b082      	sub	sp, #8
 800a648:	af00      	add	r7, sp, #0
 800a64a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d101      	bne.n	800a656 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a652:	2301      	movs	r3, #1
 800a654:	e044      	b.n	800a6e0 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d107      	bne.n	800a66e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	2278      	movs	r2, #120	@ 0x78
 800a662:	2100      	movs	r1, #0
 800a664:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	0018      	movs	r0, r3
 800a66a:	f7fb fa05 	bl	8005a78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	2224      	movs	r2, #36	@ 0x24
 800a672:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	681a      	ldr	r2, [r3, #0]
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	2101      	movs	r1, #1
 800a680:	438a      	bics	r2, r1
 800a682:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	0018      	movs	r0, r3
 800a688:	f000 f8d0 	bl	800a82c <UART_SetConfig>
 800a68c:	0003      	movs	r3, r0
 800a68e:	2b01      	cmp	r3, #1
 800a690:	d101      	bne.n	800a696 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800a692:	2301      	movs	r3, #1
 800a694:	e024      	b.n	800a6e0 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d003      	beq.n	800a6a6 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	0018      	movs	r0, r3
 800a6a2:	f000 fb61 	bl	800ad68 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	685a      	ldr	r2, [r3, #4]
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	490d      	ldr	r1, [pc, #52]	@ (800a6e8 <HAL_UART_Init+0xa4>)
 800a6b2:	400a      	ands	r2, r1
 800a6b4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	689a      	ldr	r2, [r3, #8]
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	212a      	movs	r1, #42	@ 0x2a
 800a6c2:	438a      	bics	r2, r1
 800a6c4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	681a      	ldr	r2, [r3, #0]
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	2101      	movs	r1, #1
 800a6d2:	430a      	orrs	r2, r1
 800a6d4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	0018      	movs	r0, r3
 800a6da:	f000 fbf9 	bl	800aed0 <UART_CheckIdleState>
 800a6de:	0003      	movs	r3, r0
}
 800a6e0:	0018      	movs	r0, r3
 800a6e2:	46bd      	mov	sp, r7
 800a6e4:	b002      	add	sp, #8
 800a6e6:	bd80      	pop	{r7, pc}
 800a6e8:	ffffb7ff 	.word	0xffffb7ff

0800a6ec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a6ec:	b580      	push	{r7, lr}
 800a6ee:	b08a      	sub	sp, #40	@ 0x28
 800a6f0:	af02      	add	r7, sp, #8
 800a6f2:	60f8      	str	r0, [r7, #12]
 800a6f4:	60b9      	str	r1, [r7, #8]
 800a6f6:	603b      	str	r3, [r7, #0]
 800a6f8:	1dbb      	adds	r3, r7, #6
 800a6fa:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a700:	2b20      	cmp	r3, #32
 800a702:	d000      	beq.n	800a706 <HAL_UART_Transmit+0x1a>
 800a704:	e08c      	b.n	800a820 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 800a706:	68bb      	ldr	r3, [r7, #8]
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d003      	beq.n	800a714 <HAL_UART_Transmit+0x28>
 800a70c:	1dbb      	adds	r3, r7, #6
 800a70e:	881b      	ldrh	r3, [r3, #0]
 800a710:	2b00      	cmp	r3, #0
 800a712:	d101      	bne.n	800a718 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800a714:	2301      	movs	r3, #1
 800a716:	e084      	b.n	800a822 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	689a      	ldr	r2, [r3, #8]
 800a71c:	2380      	movs	r3, #128	@ 0x80
 800a71e:	015b      	lsls	r3, r3, #5
 800a720:	429a      	cmp	r2, r3
 800a722:	d109      	bne.n	800a738 <HAL_UART_Transmit+0x4c>
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	691b      	ldr	r3, [r3, #16]
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d105      	bne.n	800a738 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800a72c:	68bb      	ldr	r3, [r7, #8]
 800a72e:	2201      	movs	r2, #1
 800a730:	4013      	ands	r3, r2
 800a732:	d001      	beq.n	800a738 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 800a734:	2301      	movs	r3, #1
 800a736:	e074      	b.n	800a822 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	2284      	movs	r2, #132	@ 0x84
 800a73c:	2100      	movs	r1, #0
 800a73e:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	2221      	movs	r2, #33	@ 0x21
 800a744:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a746:	f7fb fea7 	bl	8006498 <HAL_GetTick>
 800a74a:	0003      	movs	r3, r0
 800a74c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	1dba      	adds	r2, r7, #6
 800a752:	2150      	movs	r1, #80	@ 0x50
 800a754:	8812      	ldrh	r2, [r2, #0]
 800a756:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	1dba      	adds	r2, r7, #6
 800a75c:	2152      	movs	r1, #82	@ 0x52
 800a75e:	8812      	ldrh	r2, [r2, #0]
 800a760:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	689a      	ldr	r2, [r3, #8]
 800a766:	2380      	movs	r3, #128	@ 0x80
 800a768:	015b      	lsls	r3, r3, #5
 800a76a:	429a      	cmp	r2, r3
 800a76c:	d108      	bne.n	800a780 <HAL_UART_Transmit+0x94>
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	691b      	ldr	r3, [r3, #16]
 800a772:	2b00      	cmp	r3, #0
 800a774:	d104      	bne.n	800a780 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 800a776:	2300      	movs	r3, #0
 800a778:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a77a:	68bb      	ldr	r3, [r7, #8]
 800a77c:	61bb      	str	r3, [r7, #24]
 800a77e:	e003      	b.n	800a788 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 800a780:	68bb      	ldr	r3, [r7, #8]
 800a782:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a784:	2300      	movs	r3, #0
 800a786:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a788:	e02f      	b.n	800a7ea <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a78a:	697a      	ldr	r2, [r7, #20]
 800a78c:	68f8      	ldr	r0, [r7, #12]
 800a78e:	683b      	ldr	r3, [r7, #0]
 800a790:	9300      	str	r3, [sp, #0]
 800a792:	0013      	movs	r3, r2
 800a794:	2200      	movs	r2, #0
 800a796:	2180      	movs	r1, #128	@ 0x80
 800a798:	f000 fc42 	bl	800b020 <UART_WaitOnFlagUntilTimeout>
 800a79c:	1e03      	subs	r3, r0, #0
 800a79e:	d004      	beq.n	800a7aa <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	2220      	movs	r2, #32
 800a7a4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800a7a6:	2303      	movs	r3, #3
 800a7a8:	e03b      	b.n	800a822 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 800a7aa:	69fb      	ldr	r3, [r7, #28]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d10b      	bne.n	800a7c8 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a7b0:	69bb      	ldr	r3, [r7, #24]
 800a7b2:	881b      	ldrh	r3, [r3, #0]
 800a7b4:	001a      	movs	r2, r3
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	05d2      	lsls	r2, r2, #23
 800a7bc:	0dd2      	lsrs	r2, r2, #23
 800a7be:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800a7c0:	69bb      	ldr	r3, [r7, #24]
 800a7c2:	3302      	adds	r3, #2
 800a7c4:	61bb      	str	r3, [r7, #24]
 800a7c6:	e007      	b.n	800a7d8 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a7c8:	69fb      	ldr	r3, [r7, #28]
 800a7ca:	781a      	ldrb	r2, [r3, #0]
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800a7d2:	69fb      	ldr	r3, [r7, #28]
 800a7d4:	3301      	adds	r3, #1
 800a7d6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	2252      	movs	r2, #82	@ 0x52
 800a7dc:	5a9b      	ldrh	r3, [r3, r2]
 800a7de:	b29b      	uxth	r3, r3
 800a7e0:	3b01      	subs	r3, #1
 800a7e2:	b299      	uxth	r1, r3
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	2252      	movs	r2, #82	@ 0x52
 800a7e8:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	2252      	movs	r2, #82	@ 0x52
 800a7ee:	5a9b      	ldrh	r3, [r3, r2]
 800a7f0:	b29b      	uxth	r3, r3
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d1c9      	bne.n	800a78a <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a7f6:	697a      	ldr	r2, [r7, #20]
 800a7f8:	68f8      	ldr	r0, [r7, #12]
 800a7fa:	683b      	ldr	r3, [r7, #0]
 800a7fc:	9300      	str	r3, [sp, #0]
 800a7fe:	0013      	movs	r3, r2
 800a800:	2200      	movs	r2, #0
 800a802:	2140      	movs	r1, #64	@ 0x40
 800a804:	f000 fc0c 	bl	800b020 <UART_WaitOnFlagUntilTimeout>
 800a808:	1e03      	subs	r3, r0, #0
 800a80a:	d004      	beq.n	800a816 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	2220      	movs	r2, #32
 800a810:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800a812:	2303      	movs	r3, #3
 800a814:	e005      	b.n	800a822 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	2220      	movs	r2, #32
 800a81a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800a81c:	2300      	movs	r3, #0
 800a81e:	e000      	b.n	800a822 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 800a820:	2302      	movs	r3, #2
  }
}
 800a822:	0018      	movs	r0, r3
 800a824:	46bd      	mov	sp, r7
 800a826:	b008      	add	sp, #32
 800a828:	bd80      	pop	{r7, pc}
	...

0800a82c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a82c:	b5b0      	push	{r4, r5, r7, lr}
 800a82e:	b08e      	sub	sp, #56	@ 0x38
 800a830:	af00      	add	r7, sp, #0
 800a832:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a834:	231a      	movs	r3, #26
 800a836:	2218      	movs	r2, #24
 800a838:	189b      	adds	r3, r3, r2
 800a83a:	19db      	adds	r3, r3, r7
 800a83c:	2200      	movs	r2, #0
 800a83e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a840:	69fb      	ldr	r3, [r7, #28]
 800a842:	689a      	ldr	r2, [r3, #8]
 800a844:	69fb      	ldr	r3, [r7, #28]
 800a846:	691b      	ldr	r3, [r3, #16]
 800a848:	431a      	orrs	r2, r3
 800a84a:	69fb      	ldr	r3, [r7, #28]
 800a84c:	695b      	ldr	r3, [r3, #20]
 800a84e:	431a      	orrs	r2, r3
 800a850:	69fb      	ldr	r3, [r7, #28]
 800a852:	69db      	ldr	r3, [r3, #28]
 800a854:	4313      	orrs	r3, r2
 800a856:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a858:	69fb      	ldr	r3, [r7, #28]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	4ac3      	ldr	r2, [pc, #780]	@ (800ab6c <UART_SetConfig+0x340>)
 800a860:	4013      	ands	r3, r2
 800a862:	0019      	movs	r1, r3
 800a864:	69fb      	ldr	r3, [r7, #28]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a86a:	430a      	orrs	r2, r1
 800a86c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a86e:	69fb      	ldr	r3, [r7, #28]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	685b      	ldr	r3, [r3, #4]
 800a874:	4abe      	ldr	r2, [pc, #760]	@ (800ab70 <UART_SetConfig+0x344>)
 800a876:	4013      	ands	r3, r2
 800a878:	0019      	movs	r1, r3
 800a87a:	69fb      	ldr	r3, [r7, #28]
 800a87c:	68da      	ldr	r2, [r3, #12]
 800a87e:	69fb      	ldr	r3, [r7, #28]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	430a      	orrs	r2, r1
 800a884:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a886:	69fb      	ldr	r3, [r7, #28]
 800a888:	699b      	ldr	r3, [r3, #24]
 800a88a:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a88c:	69fb      	ldr	r3, [r7, #28]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	4ab8      	ldr	r2, [pc, #736]	@ (800ab74 <UART_SetConfig+0x348>)
 800a892:	4293      	cmp	r3, r2
 800a894:	d004      	beq.n	800a8a0 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a896:	69fb      	ldr	r3, [r7, #28]
 800a898:	6a1b      	ldr	r3, [r3, #32]
 800a89a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a89c:	4313      	orrs	r3, r2
 800a89e:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a8a0:	69fb      	ldr	r3, [r7, #28]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	689b      	ldr	r3, [r3, #8]
 800a8a6:	4ab4      	ldr	r2, [pc, #720]	@ (800ab78 <UART_SetConfig+0x34c>)
 800a8a8:	4013      	ands	r3, r2
 800a8aa:	0019      	movs	r1, r3
 800a8ac:	69fb      	ldr	r3, [r7, #28]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a8b2:	430a      	orrs	r2, r1
 800a8b4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a8b6:	69fb      	ldr	r3, [r7, #28]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	4ab0      	ldr	r2, [pc, #704]	@ (800ab7c <UART_SetConfig+0x350>)
 800a8bc:	4293      	cmp	r3, r2
 800a8be:	d131      	bne.n	800a924 <UART_SetConfig+0xf8>
 800a8c0:	4baf      	ldr	r3, [pc, #700]	@ (800ab80 <UART_SetConfig+0x354>)
 800a8c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a8c4:	2203      	movs	r2, #3
 800a8c6:	4013      	ands	r3, r2
 800a8c8:	2b03      	cmp	r3, #3
 800a8ca:	d01d      	beq.n	800a908 <UART_SetConfig+0xdc>
 800a8cc:	d823      	bhi.n	800a916 <UART_SetConfig+0xea>
 800a8ce:	2b02      	cmp	r3, #2
 800a8d0:	d00c      	beq.n	800a8ec <UART_SetConfig+0xc0>
 800a8d2:	d820      	bhi.n	800a916 <UART_SetConfig+0xea>
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d002      	beq.n	800a8de <UART_SetConfig+0xb2>
 800a8d8:	2b01      	cmp	r3, #1
 800a8da:	d00e      	beq.n	800a8fa <UART_SetConfig+0xce>
 800a8dc:	e01b      	b.n	800a916 <UART_SetConfig+0xea>
 800a8de:	231b      	movs	r3, #27
 800a8e0:	2218      	movs	r2, #24
 800a8e2:	189b      	adds	r3, r3, r2
 800a8e4:	19db      	adds	r3, r3, r7
 800a8e6:	2201      	movs	r2, #1
 800a8e8:	701a      	strb	r2, [r3, #0]
 800a8ea:	e0b4      	b.n	800aa56 <UART_SetConfig+0x22a>
 800a8ec:	231b      	movs	r3, #27
 800a8ee:	2218      	movs	r2, #24
 800a8f0:	189b      	adds	r3, r3, r2
 800a8f2:	19db      	adds	r3, r3, r7
 800a8f4:	2202      	movs	r2, #2
 800a8f6:	701a      	strb	r2, [r3, #0]
 800a8f8:	e0ad      	b.n	800aa56 <UART_SetConfig+0x22a>
 800a8fa:	231b      	movs	r3, #27
 800a8fc:	2218      	movs	r2, #24
 800a8fe:	189b      	adds	r3, r3, r2
 800a900:	19db      	adds	r3, r3, r7
 800a902:	2204      	movs	r2, #4
 800a904:	701a      	strb	r2, [r3, #0]
 800a906:	e0a6      	b.n	800aa56 <UART_SetConfig+0x22a>
 800a908:	231b      	movs	r3, #27
 800a90a:	2218      	movs	r2, #24
 800a90c:	189b      	adds	r3, r3, r2
 800a90e:	19db      	adds	r3, r3, r7
 800a910:	2208      	movs	r2, #8
 800a912:	701a      	strb	r2, [r3, #0]
 800a914:	e09f      	b.n	800aa56 <UART_SetConfig+0x22a>
 800a916:	231b      	movs	r3, #27
 800a918:	2218      	movs	r2, #24
 800a91a:	189b      	adds	r3, r3, r2
 800a91c:	19db      	adds	r3, r3, r7
 800a91e:	2210      	movs	r2, #16
 800a920:	701a      	strb	r2, [r3, #0]
 800a922:	e098      	b.n	800aa56 <UART_SetConfig+0x22a>
 800a924:	69fb      	ldr	r3, [r7, #28]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	4a96      	ldr	r2, [pc, #600]	@ (800ab84 <UART_SetConfig+0x358>)
 800a92a:	4293      	cmp	r3, r2
 800a92c:	d131      	bne.n	800a992 <UART_SetConfig+0x166>
 800a92e:	4b94      	ldr	r3, [pc, #592]	@ (800ab80 <UART_SetConfig+0x354>)
 800a930:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a932:	220c      	movs	r2, #12
 800a934:	4013      	ands	r3, r2
 800a936:	2b0c      	cmp	r3, #12
 800a938:	d01d      	beq.n	800a976 <UART_SetConfig+0x14a>
 800a93a:	d823      	bhi.n	800a984 <UART_SetConfig+0x158>
 800a93c:	2b08      	cmp	r3, #8
 800a93e:	d00c      	beq.n	800a95a <UART_SetConfig+0x12e>
 800a940:	d820      	bhi.n	800a984 <UART_SetConfig+0x158>
 800a942:	2b00      	cmp	r3, #0
 800a944:	d002      	beq.n	800a94c <UART_SetConfig+0x120>
 800a946:	2b04      	cmp	r3, #4
 800a948:	d00e      	beq.n	800a968 <UART_SetConfig+0x13c>
 800a94a:	e01b      	b.n	800a984 <UART_SetConfig+0x158>
 800a94c:	231b      	movs	r3, #27
 800a94e:	2218      	movs	r2, #24
 800a950:	189b      	adds	r3, r3, r2
 800a952:	19db      	adds	r3, r3, r7
 800a954:	2200      	movs	r2, #0
 800a956:	701a      	strb	r2, [r3, #0]
 800a958:	e07d      	b.n	800aa56 <UART_SetConfig+0x22a>
 800a95a:	231b      	movs	r3, #27
 800a95c:	2218      	movs	r2, #24
 800a95e:	189b      	adds	r3, r3, r2
 800a960:	19db      	adds	r3, r3, r7
 800a962:	2202      	movs	r2, #2
 800a964:	701a      	strb	r2, [r3, #0]
 800a966:	e076      	b.n	800aa56 <UART_SetConfig+0x22a>
 800a968:	231b      	movs	r3, #27
 800a96a:	2218      	movs	r2, #24
 800a96c:	189b      	adds	r3, r3, r2
 800a96e:	19db      	adds	r3, r3, r7
 800a970:	2204      	movs	r2, #4
 800a972:	701a      	strb	r2, [r3, #0]
 800a974:	e06f      	b.n	800aa56 <UART_SetConfig+0x22a>
 800a976:	231b      	movs	r3, #27
 800a978:	2218      	movs	r2, #24
 800a97a:	189b      	adds	r3, r3, r2
 800a97c:	19db      	adds	r3, r3, r7
 800a97e:	2208      	movs	r2, #8
 800a980:	701a      	strb	r2, [r3, #0]
 800a982:	e068      	b.n	800aa56 <UART_SetConfig+0x22a>
 800a984:	231b      	movs	r3, #27
 800a986:	2218      	movs	r2, #24
 800a988:	189b      	adds	r3, r3, r2
 800a98a:	19db      	adds	r3, r3, r7
 800a98c:	2210      	movs	r2, #16
 800a98e:	701a      	strb	r2, [r3, #0]
 800a990:	e061      	b.n	800aa56 <UART_SetConfig+0x22a>
 800a992:	69fb      	ldr	r3, [r7, #28]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	4a7c      	ldr	r2, [pc, #496]	@ (800ab88 <UART_SetConfig+0x35c>)
 800a998:	4293      	cmp	r3, r2
 800a99a:	d106      	bne.n	800a9aa <UART_SetConfig+0x17e>
 800a99c:	231b      	movs	r3, #27
 800a99e:	2218      	movs	r2, #24
 800a9a0:	189b      	adds	r3, r3, r2
 800a9a2:	19db      	adds	r3, r3, r7
 800a9a4:	2200      	movs	r2, #0
 800a9a6:	701a      	strb	r2, [r3, #0]
 800a9a8:	e055      	b.n	800aa56 <UART_SetConfig+0x22a>
 800a9aa:	69fb      	ldr	r3, [r7, #28]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	4a77      	ldr	r2, [pc, #476]	@ (800ab8c <UART_SetConfig+0x360>)
 800a9b0:	4293      	cmp	r3, r2
 800a9b2:	d106      	bne.n	800a9c2 <UART_SetConfig+0x196>
 800a9b4:	231b      	movs	r3, #27
 800a9b6:	2218      	movs	r2, #24
 800a9b8:	189b      	adds	r3, r3, r2
 800a9ba:	19db      	adds	r3, r3, r7
 800a9bc:	2200      	movs	r2, #0
 800a9be:	701a      	strb	r2, [r3, #0]
 800a9c0:	e049      	b.n	800aa56 <UART_SetConfig+0x22a>
 800a9c2:	69fb      	ldr	r3, [r7, #28]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	4a6b      	ldr	r2, [pc, #428]	@ (800ab74 <UART_SetConfig+0x348>)
 800a9c8:	4293      	cmp	r3, r2
 800a9ca:	d13e      	bne.n	800aa4a <UART_SetConfig+0x21e>
 800a9cc:	4b6c      	ldr	r3, [pc, #432]	@ (800ab80 <UART_SetConfig+0x354>)
 800a9ce:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a9d0:	23c0      	movs	r3, #192	@ 0xc0
 800a9d2:	011b      	lsls	r3, r3, #4
 800a9d4:	4013      	ands	r3, r2
 800a9d6:	22c0      	movs	r2, #192	@ 0xc0
 800a9d8:	0112      	lsls	r2, r2, #4
 800a9da:	4293      	cmp	r3, r2
 800a9dc:	d027      	beq.n	800aa2e <UART_SetConfig+0x202>
 800a9de:	22c0      	movs	r2, #192	@ 0xc0
 800a9e0:	0112      	lsls	r2, r2, #4
 800a9e2:	4293      	cmp	r3, r2
 800a9e4:	d82a      	bhi.n	800aa3c <UART_SetConfig+0x210>
 800a9e6:	2280      	movs	r2, #128	@ 0x80
 800a9e8:	0112      	lsls	r2, r2, #4
 800a9ea:	4293      	cmp	r3, r2
 800a9ec:	d011      	beq.n	800aa12 <UART_SetConfig+0x1e6>
 800a9ee:	2280      	movs	r2, #128	@ 0x80
 800a9f0:	0112      	lsls	r2, r2, #4
 800a9f2:	4293      	cmp	r3, r2
 800a9f4:	d822      	bhi.n	800aa3c <UART_SetConfig+0x210>
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d004      	beq.n	800aa04 <UART_SetConfig+0x1d8>
 800a9fa:	2280      	movs	r2, #128	@ 0x80
 800a9fc:	00d2      	lsls	r2, r2, #3
 800a9fe:	4293      	cmp	r3, r2
 800aa00:	d00e      	beq.n	800aa20 <UART_SetConfig+0x1f4>
 800aa02:	e01b      	b.n	800aa3c <UART_SetConfig+0x210>
 800aa04:	231b      	movs	r3, #27
 800aa06:	2218      	movs	r2, #24
 800aa08:	189b      	adds	r3, r3, r2
 800aa0a:	19db      	adds	r3, r3, r7
 800aa0c:	2200      	movs	r2, #0
 800aa0e:	701a      	strb	r2, [r3, #0]
 800aa10:	e021      	b.n	800aa56 <UART_SetConfig+0x22a>
 800aa12:	231b      	movs	r3, #27
 800aa14:	2218      	movs	r2, #24
 800aa16:	189b      	adds	r3, r3, r2
 800aa18:	19db      	adds	r3, r3, r7
 800aa1a:	2202      	movs	r2, #2
 800aa1c:	701a      	strb	r2, [r3, #0]
 800aa1e:	e01a      	b.n	800aa56 <UART_SetConfig+0x22a>
 800aa20:	231b      	movs	r3, #27
 800aa22:	2218      	movs	r2, #24
 800aa24:	189b      	adds	r3, r3, r2
 800aa26:	19db      	adds	r3, r3, r7
 800aa28:	2204      	movs	r2, #4
 800aa2a:	701a      	strb	r2, [r3, #0]
 800aa2c:	e013      	b.n	800aa56 <UART_SetConfig+0x22a>
 800aa2e:	231b      	movs	r3, #27
 800aa30:	2218      	movs	r2, #24
 800aa32:	189b      	adds	r3, r3, r2
 800aa34:	19db      	adds	r3, r3, r7
 800aa36:	2208      	movs	r2, #8
 800aa38:	701a      	strb	r2, [r3, #0]
 800aa3a:	e00c      	b.n	800aa56 <UART_SetConfig+0x22a>
 800aa3c:	231b      	movs	r3, #27
 800aa3e:	2218      	movs	r2, #24
 800aa40:	189b      	adds	r3, r3, r2
 800aa42:	19db      	adds	r3, r3, r7
 800aa44:	2210      	movs	r2, #16
 800aa46:	701a      	strb	r2, [r3, #0]
 800aa48:	e005      	b.n	800aa56 <UART_SetConfig+0x22a>
 800aa4a:	231b      	movs	r3, #27
 800aa4c:	2218      	movs	r2, #24
 800aa4e:	189b      	adds	r3, r3, r2
 800aa50:	19db      	adds	r3, r3, r7
 800aa52:	2210      	movs	r2, #16
 800aa54:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800aa56:	69fb      	ldr	r3, [r7, #28]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	4a46      	ldr	r2, [pc, #280]	@ (800ab74 <UART_SetConfig+0x348>)
 800aa5c:	4293      	cmp	r3, r2
 800aa5e:	d000      	beq.n	800aa62 <UART_SetConfig+0x236>
 800aa60:	e09a      	b.n	800ab98 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800aa62:	231b      	movs	r3, #27
 800aa64:	2218      	movs	r2, #24
 800aa66:	189b      	adds	r3, r3, r2
 800aa68:	19db      	adds	r3, r3, r7
 800aa6a:	781b      	ldrb	r3, [r3, #0]
 800aa6c:	2b08      	cmp	r3, #8
 800aa6e:	d01d      	beq.n	800aaac <UART_SetConfig+0x280>
 800aa70:	dc20      	bgt.n	800aab4 <UART_SetConfig+0x288>
 800aa72:	2b04      	cmp	r3, #4
 800aa74:	d015      	beq.n	800aaa2 <UART_SetConfig+0x276>
 800aa76:	dc1d      	bgt.n	800aab4 <UART_SetConfig+0x288>
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d002      	beq.n	800aa82 <UART_SetConfig+0x256>
 800aa7c:	2b02      	cmp	r3, #2
 800aa7e:	d005      	beq.n	800aa8c <UART_SetConfig+0x260>
 800aa80:	e018      	b.n	800aab4 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aa82:	f7ff fb25 	bl	800a0d0 <HAL_RCC_GetPCLK1Freq>
 800aa86:	0003      	movs	r3, r0
 800aa88:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800aa8a:	e01c      	b.n	800aac6 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aa8c:	4b3c      	ldr	r3, [pc, #240]	@ (800ab80 <UART_SetConfig+0x354>)
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	2210      	movs	r2, #16
 800aa92:	4013      	ands	r3, r2
 800aa94:	d002      	beq.n	800aa9c <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800aa96:	4b3e      	ldr	r3, [pc, #248]	@ (800ab90 <UART_SetConfig+0x364>)
 800aa98:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800aa9a:	e014      	b.n	800aac6 <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 800aa9c:	4b3d      	ldr	r3, [pc, #244]	@ (800ab94 <UART_SetConfig+0x368>)
 800aa9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800aaa0:	e011      	b.n	800aac6 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800aaa2:	f7ff fa65 	bl	8009f70 <HAL_RCC_GetSysClockFreq>
 800aaa6:	0003      	movs	r3, r0
 800aaa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800aaaa:	e00c      	b.n	800aac6 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aaac:	2380      	movs	r3, #128	@ 0x80
 800aaae:	021b      	lsls	r3, r3, #8
 800aab0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800aab2:	e008      	b.n	800aac6 <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 800aab4:	2300      	movs	r3, #0
 800aab6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 800aab8:	231a      	movs	r3, #26
 800aaba:	2218      	movs	r2, #24
 800aabc:	189b      	adds	r3, r3, r2
 800aabe:	19db      	adds	r3, r3, r7
 800aac0:	2201      	movs	r2, #1
 800aac2:	701a      	strb	r2, [r3, #0]
        break;
 800aac4:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800aac6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d100      	bne.n	800aace <UART_SetConfig+0x2a2>
 800aacc:	e133      	b.n	800ad36 <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800aace:	69fb      	ldr	r3, [r7, #28]
 800aad0:	685a      	ldr	r2, [r3, #4]
 800aad2:	0013      	movs	r3, r2
 800aad4:	005b      	lsls	r3, r3, #1
 800aad6:	189b      	adds	r3, r3, r2
 800aad8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800aada:	429a      	cmp	r2, r3
 800aadc:	d305      	bcc.n	800aaea <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 800aade:	69fb      	ldr	r3, [r7, #28]
 800aae0:	685b      	ldr	r3, [r3, #4]
 800aae2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800aae4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800aae6:	429a      	cmp	r2, r3
 800aae8:	d906      	bls.n	800aaf8 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 800aaea:	231a      	movs	r3, #26
 800aaec:	2218      	movs	r2, #24
 800aaee:	189b      	adds	r3, r3, r2
 800aaf0:	19db      	adds	r3, r3, r7
 800aaf2:	2201      	movs	r2, #1
 800aaf4:	701a      	strb	r2, [r3, #0]
 800aaf6:	e11e      	b.n	800ad36 <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800aaf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aafa:	613b      	str	r3, [r7, #16]
 800aafc:	2300      	movs	r3, #0
 800aafe:	617b      	str	r3, [r7, #20]
 800ab00:	6939      	ldr	r1, [r7, #16]
 800ab02:	697a      	ldr	r2, [r7, #20]
 800ab04:	000b      	movs	r3, r1
 800ab06:	0e1b      	lsrs	r3, r3, #24
 800ab08:	0010      	movs	r0, r2
 800ab0a:	0205      	lsls	r5, r0, #8
 800ab0c:	431d      	orrs	r5, r3
 800ab0e:	000b      	movs	r3, r1
 800ab10:	021c      	lsls	r4, r3, #8
 800ab12:	69fb      	ldr	r3, [r7, #28]
 800ab14:	685b      	ldr	r3, [r3, #4]
 800ab16:	085b      	lsrs	r3, r3, #1
 800ab18:	60bb      	str	r3, [r7, #8]
 800ab1a:	2300      	movs	r3, #0
 800ab1c:	60fb      	str	r3, [r7, #12]
 800ab1e:	68b8      	ldr	r0, [r7, #8]
 800ab20:	68f9      	ldr	r1, [r7, #12]
 800ab22:	1900      	adds	r0, r0, r4
 800ab24:	4169      	adcs	r1, r5
 800ab26:	69fb      	ldr	r3, [r7, #28]
 800ab28:	685b      	ldr	r3, [r3, #4]
 800ab2a:	603b      	str	r3, [r7, #0]
 800ab2c:	2300      	movs	r3, #0
 800ab2e:	607b      	str	r3, [r7, #4]
 800ab30:	683a      	ldr	r2, [r7, #0]
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	f7f5 fcf2 	bl	800051c <__aeabi_uldivmod>
 800ab38:	0002      	movs	r2, r0
 800ab3a:	000b      	movs	r3, r1
 800ab3c:	0013      	movs	r3, r2
 800ab3e:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ab40:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ab42:	23c0      	movs	r3, #192	@ 0xc0
 800ab44:	009b      	lsls	r3, r3, #2
 800ab46:	429a      	cmp	r2, r3
 800ab48:	d309      	bcc.n	800ab5e <UART_SetConfig+0x332>
 800ab4a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ab4c:	2380      	movs	r3, #128	@ 0x80
 800ab4e:	035b      	lsls	r3, r3, #13
 800ab50:	429a      	cmp	r2, r3
 800ab52:	d204      	bcs.n	800ab5e <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 800ab54:	69fb      	ldr	r3, [r7, #28]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ab5a:	60da      	str	r2, [r3, #12]
 800ab5c:	e0eb      	b.n	800ad36 <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 800ab5e:	231a      	movs	r3, #26
 800ab60:	2218      	movs	r2, #24
 800ab62:	189b      	adds	r3, r3, r2
 800ab64:	19db      	adds	r3, r3, r7
 800ab66:	2201      	movs	r2, #1
 800ab68:	701a      	strb	r2, [r3, #0]
 800ab6a:	e0e4      	b.n	800ad36 <UART_SetConfig+0x50a>
 800ab6c:	efff69f3 	.word	0xefff69f3
 800ab70:	ffffcfff 	.word	0xffffcfff
 800ab74:	40004800 	.word	0x40004800
 800ab78:	fffff4ff 	.word	0xfffff4ff
 800ab7c:	40013800 	.word	0x40013800
 800ab80:	40021000 	.word	0x40021000
 800ab84:	40004400 	.word	0x40004400
 800ab88:	40004c00 	.word	0x40004c00
 800ab8c:	40005000 	.word	0x40005000
 800ab90:	003d0900 	.word	0x003d0900
 800ab94:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ab98:	69fb      	ldr	r3, [r7, #28]
 800ab9a:	69da      	ldr	r2, [r3, #28]
 800ab9c:	2380      	movs	r3, #128	@ 0x80
 800ab9e:	021b      	lsls	r3, r3, #8
 800aba0:	429a      	cmp	r2, r3
 800aba2:	d000      	beq.n	800aba6 <UART_SetConfig+0x37a>
 800aba4:	e070      	b.n	800ac88 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 800aba6:	231b      	movs	r3, #27
 800aba8:	2218      	movs	r2, #24
 800abaa:	189b      	adds	r3, r3, r2
 800abac:	19db      	adds	r3, r3, r7
 800abae:	781b      	ldrb	r3, [r3, #0]
 800abb0:	2b08      	cmp	r3, #8
 800abb2:	d822      	bhi.n	800abfa <UART_SetConfig+0x3ce>
 800abb4:	009a      	lsls	r2, r3, #2
 800abb6:	4b67      	ldr	r3, [pc, #412]	@ (800ad54 <UART_SetConfig+0x528>)
 800abb8:	18d3      	adds	r3, r2, r3
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800abbe:	f7ff fa87 	bl	800a0d0 <HAL_RCC_GetPCLK1Freq>
 800abc2:	0003      	movs	r3, r0
 800abc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800abc6:	e021      	b.n	800ac0c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800abc8:	f7ff fa98 	bl	800a0fc <HAL_RCC_GetPCLK2Freq>
 800abcc:	0003      	movs	r3, r0
 800abce:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800abd0:	e01c      	b.n	800ac0c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800abd2:	4b61      	ldr	r3, [pc, #388]	@ (800ad58 <UART_SetConfig+0x52c>)
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	2210      	movs	r2, #16
 800abd8:	4013      	ands	r3, r2
 800abda:	d002      	beq.n	800abe2 <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800abdc:	4b5f      	ldr	r3, [pc, #380]	@ (800ad5c <UART_SetConfig+0x530>)
 800abde:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800abe0:	e014      	b.n	800ac0c <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 800abe2:	4b5f      	ldr	r3, [pc, #380]	@ (800ad60 <UART_SetConfig+0x534>)
 800abe4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800abe6:	e011      	b.n	800ac0c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800abe8:	f7ff f9c2 	bl	8009f70 <HAL_RCC_GetSysClockFreq>
 800abec:	0003      	movs	r3, r0
 800abee:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800abf0:	e00c      	b.n	800ac0c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800abf2:	2380      	movs	r3, #128	@ 0x80
 800abf4:	021b      	lsls	r3, r3, #8
 800abf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800abf8:	e008      	b.n	800ac0c <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 800abfa:	2300      	movs	r3, #0
 800abfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 800abfe:	231a      	movs	r3, #26
 800ac00:	2218      	movs	r2, #24
 800ac02:	189b      	adds	r3, r3, r2
 800ac04:	19db      	adds	r3, r3, r7
 800ac06:	2201      	movs	r2, #1
 800ac08:	701a      	strb	r2, [r3, #0]
        break;
 800ac0a:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ac0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d100      	bne.n	800ac14 <UART_SetConfig+0x3e8>
 800ac12:	e090      	b.n	800ad36 <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800ac14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac16:	005a      	lsls	r2, r3, #1
 800ac18:	69fb      	ldr	r3, [r7, #28]
 800ac1a:	685b      	ldr	r3, [r3, #4]
 800ac1c:	085b      	lsrs	r3, r3, #1
 800ac1e:	18d2      	adds	r2, r2, r3
 800ac20:	69fb      	ldr	r3, [r7, #28]
 800ac22:	685b      	ldr	r3, [r3, #4]
 800ac24:	0019      	movs	r1, r3
 800ac26:	0010      	movs	r0, r2
 800ac28:	f7f5 fa8a 	bl	8000140 <__udivsi3>
 800ac2c:	0003      	movs	r3, r0
 800ac2e:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ac30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac32:	2b0f      	cmp	r3, #15
 800ac34:	d921      	bls.n	800ac7a <UART_SetConfig+0x44e>
 800ac36:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ac38:	2380      	movs	r3, #128	@ 0x80
 800ac3a:	025b      	lsls	r3, r3, #9
 800ac3c:	429a      	cmp	r2, r3
 800ac3e:	d21c      	bcs.n	800ac7a <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ac40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac42:	b29a      	uxth	r2, r3
 800ac44:	200e      	movs	r0, #14
 800ac46:	2418      	movs	r4, #24
 800ac48:	1903      	adds	r3, r0, r4
 800ac4a:	19db      	adds	r3, r3, r7
 800ac4c:	210f      	movs	r1, #15
 800ac4e:	438a      	bics	r2, r1
 800ac50:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ac52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac54:	085b      	lsrs	r3, r3, #1
 800ac56:	b29b      	uxth	r3, r3
 800ac58:	2207      	movs	r2, #7
 800ac5a:	4013      	ands	r3, r2
 800ac5c:	b299      	uxth	r1, r3
 800ac5e:	1903      	adds	r3, r0, r4
 800ac60:	19db      	adds	r3, r3, r7
 800ac62:	1902      	adds	r2, r0, r4
 800ac64:	19d2      	adds	r2, r2, r7
 800ac66:	8812      	ldrh	r2, [r2, #0]
 800ac68:	430a      	orrs	r2, r1
 800ac6a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800ac6c:	69fb      	ldr	r3, [r7, #28]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	1902      	adds	r2, r0, r4
 800ac72:	19d2      	adds	r2, r2, r7
 800ac74:	8812      	ldrh	r2, [r2, #0]
 800ac76:	60da      	str	r2, [r3, #12]
 800ac78:	e05d      	b.n	800ad36 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 800ac7a:	231a      	movs	r3, #26
 800ac7c:	2218      	movs	r2, #24
 800ac7e:	189b      	adds	r3, r3, r2
 800ac80:	19db      	adds	r3, r3, r7
 800ac82:	2201      	movs	r2, #1
 800ac84:	701a      	strb	r2, [r3, #0]
 800ac86:	e056      	b.n	800ad36 <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ac88:	231b      	movs	r3, #27
 800ac8a:	2218      	movs	r2, #24
 800ac8c:	189b      	adds	r3, r3, r2
 800ac8e:	19db      	adds	r3, r3, r7
 800ac90:	781b      	ldrb	r3, [r3, #0]
 800ac92:	2b08      	cmp	r3, #8
 800ac94:	d822      	bhi.n	800acdc <UART_SetConfig+0x4b0>
 800ac96:	009a      	lsls	r2, r3, #2
 800ac98:	4b32      	ldr	r3, [pc, #200]	@ (800ad64 <UART_SetConfig+0x538>)
 800ac9a:	18d3      	adds	r3, r2, r3
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aca0:	f7ff fa16 	bl	800a0d0 <HAL_RCC_GetPCLK1Freq>
 800aca4:	0003      	movs	r3, r0
 800aca6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800aca8:	e021      	b.n	800acee <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800acaa:	f7ff fa27 	bl	800a0fc <HAL_RCC_GetPCLK2Freq>
 800acae:	0003      	movs	r3, r0
 800acb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800acb2:	e01c      	b.n	800acee <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800acb4:	4b28      	ldr	r3, [pc, #160]	@ (800ad58 <UART_SetConfig+0x52c>)
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	2210      	movs	r2, #16
 800acba:	4013      	ands	r3, r2
 800acbc:	d002      	beq.n	800acc4 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800acbe:	4b27      	ldr	r3, [pc, #156]	@ (800ad5c <UART_SetConfig+0x530>)
 800acc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800acc2:	e014      	b.n	800acee <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 800acc4:	4b26      	ldr	r3, [pc, #152]	@ (800ad60 <UART_SetConfig+0x534>)
 800acc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800acc8:	e011      	b.n	800acee <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800acca:	f7ff f951 	bl	8009f70 <HAL_RCC_GetSysClockFreq>
 800acce:	0003      	movs	r3, r0
 800acd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800acd2:	e00c      	b.n	800acee <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800acd4:	2380      	movs	r3, #128	@ 0x80
 800acd6:	021b      	lsls	r3, r3, #8
 800acd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800acda:	e008      	b.n	800acee <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 800acdc:	2300      	movs	r3, #0
 800acde:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 800ace0:	231a      	movs	r3, #26
 800ace2:	2218      	movs	r2, #24
 800ace4:	189b      	adds	r3, r3, r2
 800ace6:	19db      	adds	r3, r3, r7
 800ace8:	2201      	movs	r2, #1
 800acea:	701a      	strb	r2, [r3, #0]
        break;
 800acec:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800acee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d020      	beq.n	800ad36 <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800acf4:	69fb      	ldr	r3, [r7, #28]
 800acf6:	685b      	ldr	r3, [r3, #4]
 800acf8:	085a      	lsrs	r2, r3, #1
 800acfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800acfc:	18d2      	adds	r2, r2, r3
 800acfe:	69fb      	ldr	r3, [r7, #28]
 800ad00:	685b      	ldr	r3, [r3, #4]
 800ad02:	0019      	movs	r1, r3
 800ad04:	0010      	movs	r0, r2
 800ad06:	f7f5 fa1b 	bl	8000140 <__udivsi3>
 800ad0a:	0003      	movs	r3, r0
 800ad0c:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ad0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad10:	2b0f      	cmp	r3, #15
 800ad12:	d90a      	bls.n	800ad2a <UART_SetConfig+0x4fe>
 800ad14:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ad16:	2380      	movs	r3, #128	@ 0x80
 800ad18:	025b      	lsls	r3, r3, #9
 800ad1a:	429a      	cmp	r2, r3
 800ad1c:	d205      	bcs.n	800ad2a <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ad1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad20:	b29a      	uxth	r2, r3
 800ad22:	69fb      	ldr	r3, [r7, #28]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	60da      	str	r2, [r3, #12]
 800ad28:	e005      	b.n	800ad36 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 800ad2a:	231a      	movs	r3, #26
 800ad2c:	2218      	movs	r2, #24
 800ad2e:	189b      	adds	r3, r3, r2
 800ad30:	19db      	adds	r3, r3, r7
 800ad32:	2201      	movs	r2, #1
 800ad34:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ad36:	69fb      	ldr	r3, [r7, #28]
 800ad38:	2200      	movs	r2, #0
 800ad3a:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800ad3c:	69fb      	ldr	r3, [r7, #28]
 800ad3e:	2200      	movs	r2, #0
 800ad40:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800ad42:	231a      	movs	r3, #26
 800ad44:	2218      	movs	r2, #24
 800ad46:	189b      	adds	r3, r3, r2
 800ad48:	19db      	adds	r3, r3, r7
 800ad4a:	781b      	ldrb	r3, [r3, #0]
}
 800ad4c:	0018      	movs	r0, r3
 800ad4e:	46bd      	mov	sp, r7
 800ad50:	b00e      	add	sp, #56	@ 0x38
 800ad52:	bdb0      	pop	{r4, r5, r7, pc}
 800ad54:	0800e9e0 	.word	0x0800e9e0
 800ad58:	40021000 	.word	0x40021000
 800ad5c:	003d0900 	.word	0x003d0900
 800ad60:	00f42400 	.word	0x00f42400
 800ad64:	0800ea04 	.word	0x0800ea04

0800ad68 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ad68:	b580      	push	{r7, lr}
 800ad6a:	b082      	sub	sp, #8
 800ad6c:	af00      	add	r7, sp, #0
 800ad6e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad74:	2201      	movs	r2, #1
 800ad76:	4013      	ands	r3, r2
 800ad78:	d00b      	beq.n	800ad92 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	685b      	ldr	r3, [r3, #4]
 800ad80:	4a4a      	ldr	r2, [pc, #296]	@ (800aeac <UART_AdvFeatureConfig+0x144>)
 800ad82:	4013      	ands	r3, r2
 800ad84:	0019      	movs	r1, r3
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	430a      	orrs	r2, r1
 800ad90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad96:	2202      	movs	r2, #2
 800ad98:	4013      	ands	r3, r2
 800ad9a:	d00b      	beq.n	800adb4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	685b      	ldr	r3, [r3, #4]
 800ada2:	4a43      	ldr	r2, [pc, #268]	@ (800aeb0 <UART_AdvFeatureConfig+0x148>)
 800ada4:	4013      	ands	r3, r2
 800ada6:	0019      	movs	r1, r3
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	430a      	orrs	r2, r1
 800adb2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800adb8:	2204      	movs	r2, #4
 800adba:	4013      	ands	r3, r2
 800adbc:	d00b      	beq.n	800add6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	685b      	ldr	r3, [r3, #4]
 800adc4:	4a3b      	ldr	r2, [pc, #236]	@ (800aeb4 <UART_AdvFeatureConfig+0x14c>)
 800adc6:	4013      	ands	r3, r2
 800adc8:	0019      	movs	r1, r3
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	430a      	orrs	r2, r1
 800add4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800adda:	2208      	movs	r2, #8
 800addc:	4013      	ands	r3, r2
 800adde:	d00b      	beq.n	800adf8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	685b      	ldr	r3, [r3, #4]
 800ade6:	4a34      	ldr	r2, [pc, #208]	@ (800aeb8 <UART_AdvFeatureConfig+0x150>)
 800ade8:	4013      	ands	r3, r2
 800adea:	0019      	movs	r1, r3
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	430a      	orrs	r2, r1
 800adf6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800adfc:	2210      	movs	r2, #16
 800adfe:	4013      	ands	r3, r2
 800ae00:	d00b      	beq.n	800ae1a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	689b      	ldr	r3, [r3, #8]
 800ae08:	4a2c      	ldr	r2, [pc, #176]	@ (800aebc <UART_AdvFeatureConfig+0x154>)
 800ae0a:	4013      	ands	r3, r2
 800ae0c:	0019      	movs	r1, r3
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	430a      	orrs	r2, r1
 800ae18:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae1e:	2220      	movs	r2, #32
 800ae20:	4013      	ands	r3, r2
 800ae22:	d00b      	beq.n	800ae3c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	689b      	ldr	r3, [r3, #8]
 800ae2a:	4a25      	ldr	r2, [pc, #148]	@ (800aec0 <UART_AdvFeatureConfig+0x158>)
 800ae2c:	4013      	ands	r3, r2
 800ae2e:	0019      	movs	r1, r3
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	430a      	orrs	r2, r1
 800ae3a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae40:	2240      	movs	r2, #64	@ 0x40
 800ae42:	4013      	ands	r3, r2
 800ae44:	d01d      	beq.n	800ae82 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	685b      	ldr	r3, [r3, #4]
 800ae4c:	4a1d      	ldr	r2, [pc, #116]	@ (800aec4 <UART_AdvFeatureConfig+0x15c>)
 800ae4e:	4013      	ands	r3, r2
 800ae50:	0019      	movs	r1, r3
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	430a      	orrs	r2, r1
 800ae5c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ae62:	2380      	movs	r3, #128	@ 0x80
 800ae64:	035b      	lsls	r3, r3, #13
 800ae66:	429a      	cmp	r2, r3
 800ae68:	d10b      	bne.n	800ae82 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	685b      	ldr	r3, [r3, #4]
 800ae70:	4a15      	ldr	r2, [pc, #84]	@ (800aec8 <UART_AdvFeatureConfig+0x160>)
 800ae72:	4013      	ands	r3, r2
 800ae74:	0019      	movs	r1, r3
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	430a      	orrs	r2, r1
 800ae80:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae86:	2280      	movs	r2, #128	@ 0x80
 800ae88:	4013      	ands	r3, r2
 800ae8a:	d00b      	beq.n	800aea4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	685b      	ldr	r3, [r3, #4]
 800ae92:	4a0e      	ldr	r2, [pc, #56]	@ (800aecc <UART_AdvFeatureConfig+0x164>)
 800ae94:	4013      	ands	r3, r2
 800ae96:	0019      	movs	r1, r3
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	430a      	orrs	r2, r1
 800aea2:	605a      	str	r2, [r3, #4]
  }
}
 800aea4:	46c0      	nop			@ (mov r8, r8)
 800aea6:	46bd      	mov	sp, r7
 800aea8:	b002      	add	sp, #8
 800aeaa:	bd80      	pop	{r7, pc}
 800aeac:	fffdffff 	.word	0xfffdffff
 800aeb0:	fffeffff 	.word	0xfffeffff
 800aeb4:	fffbffff 	.word	0xfffbffff
 800aeb8:	ffff7fff 	.word	0xffff7fff
 800aebc:	ffffefff 	.word	0xffffefff
 800aec0:	ffffdfff 	.word	0xffffdfff
 800aec4:	ffefffff 	.word	0xffefffff
 800aec8:	ff9fffff 	.word	0xff9fffff
 800aecc:	fff7ffff 	.word	0xfff7ffff

0800aed0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800aed0:	b580      	push	{r7, lr}
 800aed2:	b092      	sub	sp, #72	@ 0x48
 800aed4:	af02      	add	r7, sp, #8
 800aed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	2284      	movs	r2, #132	@ 0x84
 800aedc:	2100      	movs	r1, #0
 800aede:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800aee0:	f7fb fada 	bl	8006498 <HAL_GetTick>
 800aee4:	0003      	movs	r3, r0
 800aee6:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	2208      	movs	r2, #8
 800aef0:	4013      	ands	r3, r2
 800aef2:	2b08      	cmp	r3, #8
 800aef4:	d12c      	bne.n	800af50 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800aef6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aef8:	2280      	movs	r2, #128	@ 0x80
 800aefa:	0391      	lsls	r1, r2, #14
 800aefc:	6878      	ldr	r0, [r7, #4]
 800aefe:	4a46      	ldr	r2, [pc, #280]	@ (800b018 <UART_CheckIdleState+0x148>)
 800af00:	9200      	str	r2, [sp, #0]
 800af02:	2200      	movs	r2, #0
 800af04:	f000 f88c 	bl	800b020 <UART_WaitOnFlagUntilTimeout>
 800af08:	1e03      	subs	r3, r0, #0
 800af0a:	d021      	beq.n	800af50 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800af0c:	f3ef 8310 	mrs	r3, PRIMASK
 800af10:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800af12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800af14:	63bb      	str	r3, [r7, #56]	@ 0x38
 800af16:	2301      	movs	r3, #1
 800af18:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800af1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af1c:	f383 8810 	msr	PRIMASK, r3
}
 800af20:	46c0      	nop			@ (mov r8, r8)
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	681a      	ldr	r2, [r3, #0]
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	2180      	movs	r1, #128	@ 0x80
 800af2e:	438a      	bics	r2, r1
 800af30:	601a      	str	r2, [r3, #0]
 800af32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af34:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800af36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af38:	f383 8810 	msr	PRIMASK, r3
}
 800af3c:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	2220      	movs	r2, #32
 800af42:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	2278      	movs	r2, #120	@ 0x78
 800af48:	2100      	movs	r1, #0
 800af4a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800af4c:	2303      	movs	r3, #3
 800af4e:	e05f      	b.n	800b010 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	2204      	movs	r2, #4
 800af58:	4013      	ands	r3, r2
 800af5a:	2b04      	cmp	r3, #4
 800af5c:	d146      	bne.n	800afec <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800af5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800af60:	2280      	movs	r2, #128	@ 0x80
 800af62:	03d1      	lsls	r1, r2, #15
 800af64:	6878      	ldr	r0, [r7, #4]
 800af66:	4a2c      	ldr	r2, [pc, #176]	@ (800b018 <UART_CheckIdleState+0x148>)
 800af68:	9200      	str	r2, [sp, #0]
 800af6a:	2200      	movs	r2, #0
 800af6c:	f000 f858 	bl	800b020 <UART_WaitOnFlagUntilTimeout>
 800af70:	1e03      	subs	r3, r0, #0
 800af72:	d03b      	beq.n	800afec <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800af74:	f3ef 8310 	mrs	r3, PRIMASK
 800af78:	60fb      	str	r3, [r7, #12]
  return(result);
 800af7a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800af7c:	637b      	str	r3, [r7, #52]	@ 0x34
 800af7e:	2301      	movs	r3, #1
 800af80:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800af82:	693b      	ldr	r3, [r7, #16]
 800af84:	f383 8810 	msr	PRIMASK, r3
}
 800af88:	46c0      	nop			@ (mov r8, r8)
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	681a      	ldr	r2, [r3, #0]
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	4921      	ldr	r1, [pc, #132]	@ (800b01c <UART_CheckIdleState+0x14c>)
 800af96:	400a      	ands	r2, r1
 800af98:	601a      	str	r2, [r3, #0]
 800af9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800af9c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800af9e:	697b      	ldr	r3, [r7, #20]
 800afa0:	f383 8810 	msr	PRIMASK, r3
}
 800afa4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800afa6:	f3ef 8310 	mrs	r3, PRIMASK
 800afaa:	61bb      	str	r3, [r7, #24]
  return(result);
 800afac:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800afae:	633b      	str	r3, [r7, #48]	@ 0x30
 800afb0:	2301      	movs	r3, #1
 800afb2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800afb4:	69fb      	ldr	r3, [r7, #28]
 800afb6:	f383 8810 	msr	PRIMASK, r3
}
 800afba:	46c0      	nop			@ (mov r8, r8)
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	689a      	ldr	r2, [r3, #8]
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	2101      	movs	r1, #1
 800afc8:	438a      	bics	r2, r1
 800afca:	609a      	str	r2, [r3, #8]
 800afcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afce:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800afd0:	6a3b      	ldr	r3, [r7, #32]
 800afd2:	f383 8810 	msr	PRIMASK, r3
}
 800afd6:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	2280      	movs	r2, #128	@ 0x80
 800afdc:	2120      	movs	r1, #32
 800afde:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	2278      	movs	r2, #120	@ 0x78
 800afe4:	2100      	movs	r1, #0
 800afe6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800afe8:	2303      	movs	r3, #3
 800afea:	e011      	b.n	800b010 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	2220      	movs	r2, #32
 800aff0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	2280      	movs	r2, #128	@ 0x80
 800aff6:	2120      	movs	r1, #32
 800aff8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	2200      	movs	r2, #0
 800affe:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	2200      	movs	r2, #0
 800b004:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	2278      	movs	r2, #120	@ 0x78
 800b00a:	2100      	movs	r1, #0
 800b00c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b00e:	2300      	movs	r3, #0
}
 800b010:	0018      	movs	r0, r3
 800b012:	46bd      	mov	sp, r7
 800b014:	b010      	add	sp, #64	@ 0x40
 800b016:	bd80      	pop	{r7, pc}
 800b018:	01ffffff 	.word	0x01ffffff
 800b01c:	fffffedf 	.word	0xfffffedf

0800b020 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b020:	b580      	push	{r7, lr}
 800b022:	b084      	sub	sp, #16
 800b024:	af00      	add	r7, sp, #0
 800b026:	60f8      	str	r0, [r7, #12]
 800b028:	60b9      	str	r1, [r7, #8]
 800b02a:	603b      	str	r3, [r7, #0]
 800b02c:	1dfb      	adds	r3, r7, #7
 800b02e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b030:	e04b      	b.n	800b0ca <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b032:	69bb      	ldr	r3, [r7, #24]
 800b034:	3301      	adds	r3, #1
 800b036:	d048      	beq.n	800b0ca <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b038:	f7fb fa2e 	bl	8006498 <HAL_GetTick>
 800b03c:	0002      	movs	r2, r0
 800b03e:	683b      	ldr	r3, [r7, #0]
 800b040:	1ad3      	subs	r3, r2, r3
 800b042:	69ba      	ldr	r2, [r7, #24]
 800b044:	429a      	cmp	r2, r3
 800b046:	d302      	bcc.n	800b04e <UART_WaitOnFlagUntilTimeout+0x2e>
 800b048:	69bb      	ldr	r3, [r7, #24]
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d101      	bne.n	800b052 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800b04e:	2303      	movs	r3, #3
 800b050:	e04b      	b.n	800b0ea <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	2204      	movs	r2, #4
 800b05a:	4013      	ands	r3, r2
 800b05c:	d035      	beq.n	800b0ca <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	69db      	ldr	r3, [r3, #28]
 800b064:	2208      	movs	r2, #8
 800b066:	4013      	ands	r3, r2
 800b068:	2b08      	cmp	r3, #8
 800b06a:	d111      	bne.n	800b090 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	2208      	movs	r2, #8
 800b072:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	0018      	movs	r0, r3
 800b078:	f000 f83c 	bl	800b0f4 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	2284      	movs	r2, #132	@ 0x84
 800b080:	2108      	movs	r1, #8
 800b082:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	2278      	movs	r2, #120	@ 0x78
 800b088:	2100      	movs	r1, #0
 800b08a:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 800b08c:	2301      	movs	r3, #1
 800b08e:	e02c      	b.n	800b0ea <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	69da      	ldr	r2, [r3, #28]
 800b096:	2380      	movs	r3, #128	@ 0x80
 800b098:	011b      	lsls	r3, r3, #4
 800b09a:	401a      	ands	r2, r3
 800b09c:	2380      	movs	r3, #128	@ 0x80
 800b09e:	011b      	lsls	r3, r3, #4
 800b0a0:	429a      	cmp	r2, r3
 800b0a2:	d112      	bne.n	800b0ca <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	2280      	movs	r2, #128	@ 0x80
 800b0aa:	0112      	lsls	r2, r2, #4
 800b0ac:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	0018      	movs	r0, r3
 800b0b2:	f000 f81f 	bl	800b0f4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	2284      	movs	r2, #132	@ 0x84
 800b0ba:	2120      	movs	r1, #32
 800b0bc:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	2278      	movs	r2, #120	@ 0x78
 800b0c2:	2100      	movs	r1, #0
 800b0c4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800b0c6:	2303      	movs	r3, #3
 800b0c8:	e00f      	b.n	800b0ea <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	69db      	ldr	r3, [r3, #28]
 800b0d0:	68ba      	ldr	r2, [r7, #8]
 800b0d2:	4013      	ands	r3, r2
 800b0d4:	68ba      	ldr	r2, [r7, #8]
 800b0d6:	1ad3      	subs	r3, r2, r3
 800b0d8:	425a      	negs	r2, r3
 800b0da:	4153      	adcs	r3, r2
 800b0dc:	b2db      	uxtb	r3, r3
 800b0de:	001a      	movs	r2, r3
 800b0e0:	1dfb      	adds	r3, r7, #7
 800b0e2:	781b      	ldrb	r3, [r3, #0]
 800b0e4:	429a      	cmp	r2, r3
 800b0e6:	d0a4      	beq.n	800b032 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b0e8:	2300      	movs	r3, #0
}
 800b0ea:	0018      	movs	r0, r3
 800b0ec:	46bd      	mov	sp, r7
 800b0ee:	b004      	add	sp, #16
 800b0f0:	bd80      	pop	{r7, pc}
	...

0800b0f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b0f4:	b580      	push	{r7, lr}
 800b0f6:	b08e      	sub	sp, #56	@ 0x38
 800b0f8:	af00      	add	r7, sp, #0
 800b0fa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b0fc:	f3ef 8310 	mrs	r3, PRIMASK
 800b100:	617b      	str	r3, [r7, #20]
  return(result);
 800b102:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b104:	637b      	str	r3, [r7, #52]	@ 0x34
 800b106:	2301      	movs	r3, #1
 800b108:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b10a:	69bb      	ldr	r3, [r7, #24]
 800b10c:	f383 8810 	msr	PRIMASK, r3
}
 800b110:	46c0      	nop			@ (mov r8, r8)
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	681a      	ldr	r2, [r3, #0]
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	4926      	ldr	r1, [pc, #152]	@ (800b1b8 <UART_EndRxTransfer+0xc4>)
 800b11e:	400a      	ands	r2, r1
 800b120:	601a      	str	r2, [r3, #0]
 800b122:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b124:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b126:	69fb      	ldr	r3, [r7, #28]
 800b128:	f383 8810 	msr	PRIMASK, r3
}
 800b12c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b12e:	f3ef 8310 	mrs	r3, PRIMASK
 800b132:	623b      	str	r3, [r7, #32]
  return(result);
 800b134:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b136:	633b      	str	r3, [r7, #48]	@ 0x30
 800b138:	2301      	movs	r3, #1
 800b13a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b13c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b13e:	f383 8810 	msr	PRIMASK, r3
}
 800b142:	46c0      	nop			@ (mov r8, r8)
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	689a      	ldr	r2, [r3, #8]
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	2101      	movs	r1, #1
 800b150:	438a      	bics	r2, r1
 800b152:	609a      	str	r2, [r3, #8]
 800b154:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b156:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b158:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b15a:	f383 8810 	msr	PRIMASK, r3
}
 800b15e:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b164:	2b01      	cmp	r3, #1
 800b166:	d118      	bne.n	800b19a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b168:	f3ef 8310 	mrs	r3, PRIMASK
 800b16c:	60bb      	str	r3, [r7, #8]
  return(result);
 800b16e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b170:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b172:	2301      	movs	r3, #1
 800b174:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	f383 8810 	msr	PRIMASK, r3
}
 800b17c:	46c0      	nop			@ (mov r8, r8)
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	681a      	ldr	r2, [r3, #0]
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	2110      	movs	r1, #16
 800b18a:	438a      	bics	r2, r1
 800b18c:	601a      	str	r2, [r3, #0]
 800b18e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b190:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b192:	693b      	ldr	r3, [r7, #16]
 800b194:	f383 8810 	msr	PRIMASK, r3
}
 800b198:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	2280      	movs	r2, #128	@ 0x80
 800b19e:	2120      	movs	r1, #32
 800b1a0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	2200      	movs	r2, #0
 800b1a6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	2200      	movs	r2, #0
 800b1ac:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800b1ae:	46c0      	nop			@ (mov r8, r8)
 800b1b0:	46bd      	mov	sp, r7
 800b1b2:	b00e      	add	sp, #56	@ 0x38
 800b1b4:	bd80      	pop	{r7, pc}
 800b1b6:	46c0      	nop			@ (mov r8, r8)
 800b1b8:	fffffedf 	.word	0xfffffedf

0800b1bc <__cvt>:
 800b1bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b1be:	001f      	movs	r7, r3
 800b1c0:	2300      	movs	r3, #0
 800b1c2:	0016      	movs	r6, r2
 800b1c4:	b08b      	sub	sp, #44	@ 0x2c
 800b1c6:	429f      	cmp	r7, r3
 800b1c8:	da04      	bge.n	800b1d4 <__cvt+0x18>
 800b1ca:	2180      	movs	r1, #128	@ 0x80
 800b1cc:	0609      	lsls	r1, r1, #24
 800b1ce:	187b      	adds	r3, r7, r1
 800b1d0:	001f      	movs	r7, r3
 800b1d2:	232d      	movs	r3, #45	@ 0x2d
 800b1d4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800b1d6:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 800b1d8:	7013      	strb	r3, [r2, #0]
 800b1da:	2320      	movs	r3, #32
 800b1dc:	2203      	movs	r2, #3
 800b1de:	439d      	bics	r5, r3
 800b1e0:	2d46      	cmp	r5, #70	@ 0x46
 800b1e2:	d007      	beq.n	800b1f4 <__cvt+0x38>
 800b1e4:	002b      	movs	r3, r5
 800b1e6:	3b45      	subs	r3, #69	@ 0x45
 800b1e8:	4259      	negs	r1, r3
 800b1ea:	414b      	adcs	r3, r1
 800b1ec:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800b1ee:	3a01      	subs	r2, #1
 800b1f0:	18cb      	adds	r3, r1, r3
 800b1f2:	9310      	str	r3, [sp, #64]	@ 0x40
 800b1f4:	ab09      	add	r3, sp, #36	@ 0x24
 800b1f6:	9304      	str	r3, [sp, #16]
 800b1f8:	ab08      	add	r3, sp, #32
 800b1fa:	9303      	str	r3, [sp, #12]
 800b1fc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b1fe:	9200      	str	r2, [sp, #0]
 800b200:	9302      	str	r3, [sp, #8]
 800b202:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b204:	0032      	movs	r2, r6
 800b206:	9301      	str	r3, [sp, #4]
 800b208:	003b      	movs	r3, r7
 800b20a:	f000 fed1 	bl	800bfb0 <_dtoa_r>
 800b20e:	0004      	movs	r4, r0
 800b210:	2d47      	cmp	r5, #71	@ 0x47
 800b212:	d11b      	bne.n	800b24c <__cvt+0x90>
 800b214:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b216:	07db      	lsls	r3, r3, #31
 800b218:	d511      	bpl.n	800b23e <__cvt+0x82>
 800b21a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b21c:	18c3      	adds	r3, r0, r3
 800b21e:	9307      	str	r3, [sp, #28]
 800b220:	2200      	movs	r2, #0
 800b222:	2300      	movs	r3, #0
 800b224:	0030      	movs	r0, r6
 800b226:	0039      	movs	r1, r7
 800b228:	f7f5 f910 	bl	800044c <__aeabi_dcmpeq>
 800b22c:	2800      	cmp	r0, #0
 800b22e:	d001      	beq.n	800b234 <__cvt+0x78>
 800b230:	9b07      	ldr	r3, [sp, #28]
 800b232:	9309      	str	r3, [sp, #36]	@ 0x24
 800b234:	2230      	movs	r2, #48	@ 0x30
 800b236:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b238:	9907      	ldr	r1, [sp, #28]
 800b23a:	428b      	cmp	r3, r1
 800b23c:	d320      	bcc.n	800b280 <__cvt+0xc4>
 800b23e:	0020      	movs	r0, r4
 800b240:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b242:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800b244:	1b1b      	subs	r3, r3, r4
 800b246:	6013      	str	r3, [r2, #0]
 800b248:	b00b      	add	sp, #44	@ 0x2c
 800b24a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b24c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b24e:	18c3      	adds	r3, r0, r3
 800b250:	9307      	str	r3, [sp, #28]
 800b252:	2d46      	cmp	r5, #70	@ 0x46
 800b254:	d1e4      	bne.n	800b220 <__cvt+0x64>
 800b256:	7803      	ldrb	r3, [r0, #0]
 800b258:	2b30      	cmp	r3, #48	@ 0x30
 800b25a:	d10c      	bne.n	800b276 <__cvt+0xba>
 800b25c:	2200      	movs	r2, #0
 800b25e:	2300      	movs	r3, #0
 800b260:	0030      	movs	r0, r6
 800b262:	0039      	movs	r1, r7
 800b264:	f7f5 f8f2 	bl	800044c <__aeabi_dcmpeq>
 800b268:	2800      	cmp	r0, #0
 800b26a:	d104      	bne.n	800b276 <__cvt+0xba>
 800b26c:	2301      	movs	r3, #1
 800b26e:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800b270:	1a9b      	subs	r3, r3, r2
 800b272:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b274:	6013      	str	r3, [r2, #0]
 800b276:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b278:	9a07      	ldr	r2, [sp, #28]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	18d3      	adds	r3, r2, r3
 800b27e:	e7ce      	b.n	800b21e <__cvt+0x62>
 800b280:	1c59      	adds	r1, r3, #1
 800b282:	9109      	str	r1, [sp, #36]	@ 0x24
 800b284:	701a      	strb	r2, [r3, #0]
 800b286:	e7d6      	b.n	800b236 <__cvt+0x7a>

0800b288 <__exponent>:
 800b288:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b28a:	232b      	movs	r3, #43	@ 0x2b
 800b28c:	0005      	movs	r5, r0
 800b28e:	000c      	movs	r4, r1
 800b290:	b085      	sub	sp, #20
 800b292:	7002      	strb	r2, [r0, #0]
 800b294:	2900      	cmp	r1, #0
 800b296:	da01      	bge.n	800b29c <__exponent+0x14>
 800b298:	424c      	negs	r4, r1
 800b29a:	3302      	adds	r3, #2
 800b29c:	706b      	strb	r3, [r5, #1]
 800b29e:	2c09      	cmp	r4, #9
 800b2a0:	dd2c      	ble.n	800b2fc <__exponent+0x74>
 800b2a2:	ab02      	add	r3, sp, #8
 800b2a4:	1dde      	adds	r6, r3, #7
 800b2a6:	0020      	movs	r0, r4
 800b2a8:	210a      	movs	r1, #10
 800b2aa:	f7f5 f8b9 	bl	8000420 <__aeabi_idivmod>
 800b2ae:	0037      	movs	r7, r6
 800b2b0:	3130      	adds	r1, #48	@ 0x30
 800b2b2:	3e01      	subs	r6, #1
 800b2b4:	0020      	movs	r0, r4
 800b2b6:	7031      	strb	r1, [r6, #0]
 800b2b8:	210a      	movs	r1, #10
 800b2ba:	9401      	str	r4, [sp, #4]
 800b2bc:	f7f4 ffca 	bl	8000254 <__divsi3>
 800b2c0:	9b01      	ldr	r3, [sp, #4]
 800b2c2:	0004      	movs	r4, r0
 800b2c4:	2b63      	cmp	r3, #99	@ 0x63
 800b2c6:	dcee      	bgt.n	800b2a6 <__exponent+0x1e>
 800b2c8:	1eba      	subs	r2, r7, #2
 800b2ca:	1ca8      	adds	r0, r5, #2
 800b2cc:	0001      	movs	r1, r0
 800b2ce:	0013      	movs	r3, r2
 800b2d0:	3430      	adds	r4, #48	@ 0x30
 800b2d2:	7014      	strb	r4, [r2, #0]
 800b2d4:	ac02      	add	r4, sp, #8
 800b2d6:	3407      	adds	r4, #7
 800b2d8:	429c      	cmp	r4, r3
 800b2da:	d80a      	bhi.n	800b2f2 <__exponent+0x6a>
 800b2dc:	2300      	movs	r3, #0
 800b2de:	42a2      	cmp	r2, r4
 800b2e0:	d803      	bhi.n	800b2ea <__exponent+0x62>
 800b2e2:	3309      	adds	r3, #9
 800b2e4:	aa02      	add	r2, sp, #8
 800b2e6:	189b      	adds	r3, r3, r2
 800b2e8:	1bdb      	subs	r3, r3, r7
 800b2ea:	18c0      	adds	r0, r0, r3
 800b2ec:	1b40      	subs	r0, r0, r5
 800b2ee:	b005      	add	sp, #20
 800b2f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b2f2:	781c      	ldrb	r4, [r3, #0]
 800b2f4:	3301      	adds	r3, #1
 800b2f6:	700c      	strb	r4, [r1, #0]
 800b2f8:	3101      	adds	r1, #1
 800b2fa:	e7eb      	b.n	800b2d4 <__exponent+0x4c>
 800b2fc:	2330      	movs	r3, #48	@ 0x30
 800b2fe:	18e4      	adds	r4, r4, r3
 800b300:	70ab      	strb	r3, [r5, #2]
 800b302:	1d28      	adds	r0, r5, #4
 800b304:	70ec      	strb	r4, [r5, #3]
 800b306:	e7f1      	b.n	800b2ec <__exponent+0x64>

0800b308 <_printf_float>:
 800b308:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b30a:	b097      	sub	sp, #92	@ 0x5c
 800b30c:	000d      	movs	r5, r1
 800b30e:	920a      	str	r2, [sp, #40]	@ 0x28
 800b310:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 800b312:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b314:	9009      	str	r0, [sp, #36]	@ 0x24
 800b316:	f000 fd33 	bl	800bd80 <_localeconv_r>
 800b31a:	6803      	ldr	r3, [r0, #0]
 800b31c:	0018      	movs	r0, r3
 800b31e:	930d      	str	r3, [sp, #52]	@ 0x34
 800b320:	f7f4 fef2 	bl	8000108 <strlen>
 800b324:	2300      	movs	r3, #0
 800b326:	900f      	str	r0, [sp, #60]	@ 0x3c
 800b328:	9314      	str	r3, [sp, #80]	@ 0x50
 800b32a:	7e2b      	ldrb	r3, [r5, #24]
 800b32c:	2207      	movs	r2, #7
 800b32e:	930c      	str	r3, [sp, #48]	@ 0x30
 800b330:	682b      	ldr	r3, [r5, #0]
 800b332:	930e      	str	r3, [sp, #56]	@ 0x38
 800b334:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800b336:	6823      	ldr	r3, [r4, #0]
 800b338:	05c9      	lsls	r1, r1, #23
 800b33a:	d545      	bpl.n	800b3c8 <_printf_float+0xc0>
 800b33c:	189b      	adds	r3, r3, r2
 800b33e:	4393      	bics	r3, r2
 800b340:	001a      	movs	r2, r3
 800b342:	3208      	adds	r2, #8
 800b344:	6022      	str	r2, [r4, #0]
 800b346:	2201      	movs	r2, #1
 800b348:	681e      	ldr	r6, [r3, #0]
 800b34a:	685f      	ldr	r7, [r3, #4]
 800b34c:	007b      	lsls	r3, r7, #1
 800b34e:	085b      	lsrs	r3, r3, #1
 800b350:	9311      	str	r3, [sp, #68]	@ 0x44
 800b352:	9610      	str	r6, [sp, #64]	@ 0x40
 800b354:	64ae      	str	r6, [r5, #72]	@ 0x48
 800b356:	64ef      	str	r7, [r5, #76]	@ 0x4c
 800b358:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800b35a:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800b35c:	4ba7      	ldr	r3, [pc, #668]	@ (800b5fc <_printf_float+0x2f4>)
 800b35e:	4252      	negs	r2, r2
 800b360:	f7f7 ff18 	bl	8003194 <__aeabi_dcmpun>
 800b364:	2800      	cmp	r0, #0
 800b366:	d131      	bne.n	800b3cc <_printf_float+0xc4>
 800b368:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800b36a:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800b36c:	2201      	movs	r2, #1
 800b36e:	4ba3      	ldr	r3, [pc, #652]	@ (800b5fc <_printf_float+0x2f4>)
 800b370:	4252      	negs	r2, r2
 800b372:	f7f5 f87b 	bl	800046c <__aeabi_dcmple>
 800b376:	2800      	cmp	r0, #0
 800b378:	d128      	bne.n	800b3cc <_printf_float+0xc4>
 800b37a:	2200      	movs	r2, #0
 800b37c:	2300      	movs	r3, #0
 800b37e:	0030      	movs	r0, r6
 800b380:	0039      	movs	r1, r7
 800b382:	f7f5 f869 	bl	8000458 <__aeabi_dcmplt>
 800b386:	2800      	cmp	r0, #0
 800b388:	d003      	beq.n	800b392 <_printf_float+0x8a>
 800b38a:	002b      	movs	r3, r5
 800b38c:	222d      	movs	r2, #45	@ 0x2d
 800b38e:	3343      	adds	r3, #67	@ 0x43
 800b390:	701a      	strb	r2, [r3, #0]
 800b392:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b394:	4f9a      	ldr	r7, [pc, #616]	@ (800b600 <_printf_float+0x2f8>)
 800b396:	2b47      	cmp	r3, #71	@ 0x47
 800b398:	d900      	bls.n	800b39c <_printf_float+0x94>
 800b39a:	4f9a      	ldr	r7, [pc, #616]	@ (800b604 <_printf_float+0x2fc>)
 800b39c:	2303      	movs	r3, #3
 800b39e:	2400      	movs	r4, #0
 800b3a0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b3a2:	612b      	str	r3, [r5, #16]
 800b3a4:	3301      	adds	r3, #1
 800b3a6:	439a      	bics	r2, r3
 800b3a8:	602a      	str	r2, [r5, #0]
 800b3aa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b3ac:	0029      	movs	r1, r5
 800b3ae:	9300      	str	r3, [sp, #0]
 800b3b0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b3b2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b3b4:	aa15      	add	r2, sp, #84	@ 0x54
 800b3b6:	f000 f9e5 	bl	800b784 <_printf_common>
 800b3ba:	3001      	adds	r0, #1
 800b3bc:	d000      	beq.n	800b3c0 <_printf_float+0xb8>
 800b3be:	e09f      	b.n	800b500 <_printf_float+0x1f8>
 800b3c0:	2001      	movs	r0, #1
 800b3c2:	4240      	negs	r0, r0
 800b3c4:	b017      	add	sp, #92	@ 0x5c
 800b3c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b3c8:	3307      	adds	r3, #7
 800b3ca:	e7b8      	b.n	800b33e <_printf_float+0x36>
 800b3cc:	0032      	movs	r2, r6
 800b3ce:	003b      	movs	r3, r7
 800b3d0:	0030      	movs	r0, r6
 800b3d2:	0039      	movs	r1, r7
 800b3d4:	f7f7 fede 	bl	8003194 <__aeabi_dcmpun>
 800b3d8:	2800      	cmp	r0, #0
 800b3da:	d00b      	beq.n	800b3f4 <_printf_float+0xec>
 800b3dc:	2f00      	cmp	r7, #0
 800b3de:	da03      	bge.n	800b3e8 <_printf_float+0xe0>
 800b3e0:	002b      	movs	r3, r5
 800b3e2:	222d      	movs	r2, #45	@ 0x2d
 800b3e4:	3343      	adds	r3, #67	@ 0x43
 800b3e6:	701a      	strb	r2, [r3, #0]
 800b3e8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b3ea:	4f87      	ldr	r7, [pc, #540]	@ (800b608 <_printf_float+0x300>)
 800b3ec:	2b47      	cmp	r3, #71	@ 0x47
 800b3ee:	d9d5      	bls.n	800b39c <_printf_float+0x94>
 800b3f0:	4f86      	ldr	r7, [pc, #536]	@ (800b60c <_printf_float+0x304>)
 800b3f2:	e7d3      	b.n	800b39c <_printf_float+0x94>
 800b3f4:	2220      	movs	r2, #32
 800b3f6:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 800b3f8:	686b      	ldr	r3, [r5, #4]
 800b3fa:	4394      	bics	r4, r2
 800b3fc:	1c5a      	adds	r2, r3, #1
 800b3fe:	d146      	bne.n	800b48e <_printf_float+0x186>
 800b400:	3307      	adds	r3, #7
 800b402:	606b      	str	r3, [r5, #4]
 800b404:	2380      	movs	r3, #128	@ 0x80
 800b406:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b408:	00db      	lsls	r3, r3, #3
 800b40a:	4313      	orrs	r3, r2
 800b40c:	2200      	movs	r2, #0
 800b40e:	602b      	str	r3, [r5, #0]
 800b410:	9206      	str	r2, [sp, #24]
 800b412:	aa14      	add	r2, sp, #80	@ 0x50
 800b414:	9205      	str	r2, [sp, #20]
 800b416:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800b418:	a90a      	add	r1, sp, #40	@ 0x28
 800b41a:	9204      	str	r2, [sp, #16]
 800b41c:	aa13      	add	r2, sp, #76	@ 0x4c
 800b41e:	9203      	str	r2, [sp, #12]
 800b420:	2223      	movs	r2, #35	@ 0x23
 800b422:	1852      	adds	r2, r2, r1
 800b424:	9202      	str	r2, [sp, #8]
 800b426:	9301      	str	r3, [sp, #4]
 800b428:	686b      	ldr	r3, [r5, #4]
 800b42a:	0032      	movs	r2, r6
 800b42c:	9300      	str	r3, [sp, #0]
 800b42e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b430:	003b      	movs	r3, r7
 800b432:	f7ff fec3 	bl	800b1bc <__cvt>
 800b436:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b438:	0007      	movs	r7, r0
 800b43a:	2c47      	cmp	r4, #71	@ 0x47
 800b43c:	d12d      	bne.n	800b49a <_printf_float+0x192>
 800b43e:	1cd3      	adds	r3, r2, #3
 800b440:	db02      	blt.n	800b448 <_printf_float+0x140>
 800b442:	686b      	ldr	r3, [r5, #4]
 800b444:	429a      	cmp	r2, r3
 800b446:	dd48      	ble.n	800b4da <_printf_float+0x1d2>
 800b448:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b44a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800b44c:	3b02      	subs	r3, #2
 800b44e:	b2db      	uxtb	r3, r3
 800b450:	930c      	str	r3, [sp, #48]	@ 0x30
 800b452:	0028      	movs	r0, r5
 800b454:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800b456:	3901      	subs	r1, #1
 800b458:	3050      	adds	r0, #80	@ 0x50
 800b45a:	9113      	str	r1, [sp, #76]	@ 0x4c
 800b45c:	f7ff ff14 	bl	800b288 <__exponent>
 800b460:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800b462:	0004      	movs	r4, r0
 800b464:	1813      	adds	r3, r2, r0
 800b466:	612b      	str	r3, [r5, #16]
 800b468:	2a01      	cmp	r2, #1
 800b46a:	dc02      	bgt.n	800b472 <_printf_float+0x16a>
 800b46c:	682a      	ldr	r2, [r5, #0]
 800b46e:	07d2      	lsls	r2, r2, #31
 800b470:	d501      	bpl.n	800b476 <_printf_float+0x16e>
 800b472:	3301      	adds	r3, #1
 800b474:	612b      	str	r3, [r5, #16]
 800b476:	2323      	movs	r3, #35	@ 0x23
 800b478:	aa0a      	add	r2, sp, #40	@ 0x28
 800b47a:	189b      	adds	r3, r3, r2
 800b47c:	781b      	ldrb	r3, [r3, #0]
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d100      	bne.n	800b484 <_printf_float+0x17c>
 800b482:	e792      	b.n	800b3aa <_printf_float+0xa2>
 800b484:	002b      	movs	r3, r5
 800b486:	222d      	movs	r2, #45	@ 0x2d
 800b488:	3343      	adds	r3, #67	@ 0x43
 800b48a:	701a      	strb	r2, [r3, #0]
 800b48c:	e78d      	b.n	800b3aa <_printf_float+0xa2>
 800b48e:	2c47      	cmp	r4, #71	@ 0x47
 800b490:	d1b8      	bne.n	800b404 <_printf_float+0xfc>
 800b492:	2b00      	cmp	r3, #0
 800b494:	d1b6      	bne.n	800b404 <_printf_float+0xfc>
 800b496:	3301      	adds	r3, #1
 800b498:	e7b3      	b.n	800b402 <_printf_float+0xfa>
 800b49a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b49c:	0011      	movs	r1, r2
 800b49e:	2b65      	cmp	r3, #101	@ 0x65
 800b4a0:	d9d7      	bls.n	800b452 <_printf_float+0x14a>
 800b4a2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b4a4:	2b66      	cmp	r3, #102	@ 0x66
 800b4a6:	d11a      	bne.n	800b4de <_printf_float+0x1d6>
 800b4a8:	686b      	ldr	r3, [r5, #4]
 800b4aa:	2a00      	cmp	r2, #0
 800b4ac:	dd09      	ble.n	800b4c2 <_printf_float+0x1ba>
 800b4ae:	612a      	str	r2, [r5, #16]
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d102      	bne.n	800b4ba <_printf_float+0x1b2>
 800b4b4:	6829      	ldr	r1, [r5, #0]
 800b4b6:	07c9      	lsls	r1, r1, #31
 800b4b8:	d50b      	bpl.n	800b4d2 <_printf_float+0x1ca>
 800b4ba:	3301      	adds	r3, #1
 800b4bc:	189b      	adds	r3, r3, r2
 800b4be:	612b      	str	r3, [r5, #16]
 800b4c0:	e007      	b.n	800b4d2 <_printf_float+0x1ca>
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d103      	bne.n	800b4ce <_printf_float+0x1c6>
 800b4c6:	2201      	movs	r2, #1
 800b4c8:	6829      	ldr	r1, [r5, #0]
 800b4ca:	4211      	tst	r1, r2
 800b4cc:	d000      	beq.n	800b4d0 <_printf_float+0x1c8>
 800b4ce:	1c9a      	adds	r2, r3, #2
 800b4d0:	612a      	str	r2, [r5, #16]
 800b4d2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b4d4:	2400      	movs	r4, #0
 800b4d6:	65ab      	str	r3, [r5, #88]	@ 0x58
 800b4d8:	e7cd      	b.n	800b476 <_printf_float+0x16e>
 800b4da:	2367      	movs	r3, #103	@ 0x67
 800b4dc:	930c      	str	r3, [sp, #48]	@ 0x30
 800b4de:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800b4e0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b4e2:	4299      	cmp	r1, r3
 800b4e4:	db06      	blt.n	800b4f4 <_printf_float+0x1ec>
 800b4e6:	682b      	ldr	r3, [r5, #0]
 800b4e8:	6129      	str	r1, [r5, #16]
 800b4ea:	07db      	lsls	r3, r3, #31
 800b4ec:	d5f1      	bpl.n	800b4d2 <_printf_float+0x1ca>
 800b4ee:	3101      	adds	r1, #1
 800b4f0:	6129      	str	r1, [r5, #16]
 800b4f2:	e7ee      	b.n	800b4d2 <_printf_float+0x1ca>
 800b4f4:	2201      	movs	r2, #1
 800b4f6:	2900      	cmp	r1, #0
 800b4f8:	dce0      	bgt.n	800b4bc <_printf_float+0x1b4>
 800b4fa:	1892      	adds	r2, r2, r2
 800b4fc:	1a52      	subs	r2, r2, r1
 800b4fe:	e7dd      	b.n	800b4bc <_printf_float+0x1b4>
 800b500:	682a      	ldr	r2, [r5, #0]
 800b502:	0553      	lsls	r3, r2, #21
 800b504:	d408      	bmi.n	800b518 <_printf_float+0x210>
 800b506:	692b      	ldr	r3, [r5, #16]
 800b508:	003a      	movs	r2, r7
 800b50a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b50c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b50e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800b510:	47a0      	blx	r4
 800b512:	3001      	adds	r0, #1
 800b514:	d129      	bne.n	800b56a <_printf_float+0x262>
 800b516:	e753      	b.n	800b3c0 <_printf_float+0xb8>
 800b518:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b51a:	2b65      	cmp	r3, #101	@ 0x65
 800b51c:	d800      	bhi.n	800b520 <_printf_float+0x218>
 800b51e:	e0da      	b.n	800b6d6 <_printf_float+0x3ce>
 800b520:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800b522:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800b524:	2200      	movs	r2, #0
 800b526:	2300      	movs	r3, #0
 800b528:	f7f4 ff90 	bl	800044c <__aeabi_dcmpeq>
 800b52c:	2800      	cmp	r0, #0
 800b52e:	d033      	beq.n	800b598 <_printf_float+0x290>
 800b530:	2301      	movs	r3, #1
 800b532:	4a37      	ldr	r2, [pc, #220]	@ (800b610 <_printf_float+0x308>)
 800b534:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b536:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b538:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800b53a:	47a0      	blx	r4
 800b53c:	3001      	adds	r0, #1
 800b53e:	d100      	bne.n	800b542 <_printf_float+0x23a>
 800b540:	e73e      	b.n	800b3c0 <_printf_float+0xb8>
 800b542:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 800b544:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b546:	42b3      	cmp	r3, r6
 800b548:	db02      	blt.n	800b550 <_printf_float+0x248>
 800b54a:	682b      	ldr	r3, [r5, #0]
 800b54c:	07db      	lsls	r3, r3, #31
 800b54e:	d50c      	bpl.n	800b56a <_printf_float+0x262>
 800b550:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800b552:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b554:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b556:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b558:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b55a:	47a0      	blx	r4
 800b55c:	2400      	movs	r4, #0
 800b55e:	3001      	adds	r0, #1
 800b560:	d100      	bne.n	800b564 <_printf_float+0x25c>
 800b562:	e72d      	b.n	800b3c0 <_printf_float+0xb8>
 800b564:	1e73      	subs	r3, r6, #1
 800b566:	42a3      	cmp	r3, r4
 800b568:	dc0a      	bgt.n	800b580 <_printf_float+0x278>
 800b56a:	682b      	ldr	r3, [r5, #0]
 800b56c:	079b      	lsls	r3, r3, #30
 800b56e:	d500      	bpl.n	800b572 <_printf_float+0x26a>
 800b570:	e105      	b.n	800b77e <_printf_float+0x476>
 800b572:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800b574:	68e8      	ldr	r0, [r5, #12]
 800b576:	4298      	cmp	r0, r3
 800b578:	db00      	blt.n	800b57c <_printf_float+0x274>
 800b57a:	e723      	b.n	800b3c4 <_printf_float+0xbc>
 800b57c:	0018      	movs	r0, r3
 800b57e:	e721      	b.n	800b3c4 <_printf_float+0xbc>
 800b580:	002a      	movs	r2, r5
 800b582:	2301      	movs	r3, #1
 800b584:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b586:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b588:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800b58a:	321a      	adds	r2, #26
 800b58c:	47b8      	blx	r7
 800b58e:	3001      	adds	r0, #1
 800b590:	d100      	bne.n	800b594 <_printf_float+0x28c>
 800b592:	e715      	b.n	800b3c0 <_printf_float+0xb8>
 800b594:	3401      	adds	r4, #1
 800b596:	e7e5      	b.n	800b564 <_printf_float+0x25c>
 800b598:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	dc3a      	bgt.n	800b614 <_printf_float+0x30c>
 800b59e:	2301      	movs	r3, #1
 800b5a0:	4a1b      	ldr	r2, [pc, #108]	@ (800b610 <_printf_float+0x308>)
 800b5a2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b5a4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b5a6:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800b5a8:	47a0      	blx	r4
 800b5aa:	3001      	adds	r0, #1
 800b5ac:	d100      	bne.n	800b5b0 <_printf_float+0x2a8>
 800b5ae:	e707      	b.n	800b3c0 <_printf_float+0xb8>
 800b5b0:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 800b5b2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b5b4:	4333      	orrs	r3, r6
 800b5b6:	d102      	bne.n	800b5be <_printf_float+0x2b6>
 800b5b8:	682b      	ldr	r3, [r5, #0]
 800b5ba:	07db      	lsls	r3, r3, #31
 800b5bc:	d5d5      	bpl.n	800b56a <_printf_float+0x262>
 800b5be:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b5c0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b5c2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b5c4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b5c6:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800b5c8:	47a0      	blx	r4
 800b5ca:	2300      	movs	r3, #0
 800b5cc:	3001      	adds	r0, #1
 800b5ce:	d100      	bne.n	800b5d2 <_printf_float+0x2ca>
 800b5d0:	e6f6      	b.n	800b3c0 <_printf_float+0xb8>
 800b5d2:	930c      	str	r3, [sp, #48]	@ 0x30
 800b5d4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b5d6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800b5d8:	425b      	negs	r3, r3
 800b5da:	4293      	cmp	r3, r2
 800b5dc:	dc01      	bgt.n	800b5e2 <_printf_float+0x2da>
 800b5de:	0033      	movs	r3, r6
 800b5e0:	e792      	b.n	800b508 <_printf_float+0x200>
 800b5e2:	002a      	movs	r2, r5
 800b5e4:	2301      	movs	r3, #1
 800b5e6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b5e8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b5ea:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800b5ec:	321a      	adds	r2, #26
 800b5ee:	47a0      	blx	r4
 800b5f0:	3001      	adds	r0, #1
 800b5f2:	d100      	bne.n	800b5f6 <_printf_float+0x2ee>
 800b5f4:	e6e4      	b.n	800b3c0 <_printf_float+0xb8>
 800b5f6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b5f8:	3301      	adds	r3, #1
 800b5fa:	e7ea      	b.n	800b5d2 <_printf_float+0x2ca>
 800b5fc:	7fefffff 	.word	0x7fefffff
 800b600:	0800ea28 	.word	0x0800ea28
 800b604:	0800ea2c 	.word	0x0800ea2c
 800b608:	0800ea30 	.word	0x0800ea30
 800b60c:	0800ea34 	.word	0x0800ea34
 800b610:	0800ea38 	.word	0x0800ea38
 800b614:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b616:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 800b618:	930c      	str	r3, [sp, #48]	@ 0x30
 800b61a:	429e      	cmp	r6, r3
 800b61c:	dd00      	ble.n	800b620 <_printf_float+0x318>
 800b61e:	001e      	movs	r6, r3
 800b620:	2e00      	cmp	r6, #0
 800b622:	dc31      	bgt.n	800b688 <_printf_float+0x380>
 800b624:	43f3      	mvns	r3, r6
 800b626:	2400      	movs	r4, #0
 800b628:	17db      	asrs	r3, r3, #31
 800b62a:	4033      	ands	r3, r6
 800b62c:	930e      	str	r3, [sp, #56]	@ 0x38
 800b62e:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 800b630:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b632:	1af3      	subs	r3, r6, r3
 800b634:	42a3      	cmp	r3, r4
 800b636:	dc30      	bgt.n	800b69a <_printf_float+0x392>
 800b638:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b63a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800b63c:	429a      	cmp	r2, r3
 800b63e:	dc38      	bgt.n	800b6b2 <_printf_float+0x3aa>
 800b640:	682b      	ldr	r3, [r5, #0]
 800b642:	07db      	lsls	r3, r3, #31
 800b644:	d435      	bmi.n	800b6b2 <_printf_float+0x3aa>
 800b646:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 800b648:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b64a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800b64c:	1b9b      	subs	r3, r3, r6
 800b64e:	1b14      	subs	r4, r2, r4
 800b650:	429c      	cmp	r4, r3
 800b652:	dd00      	ble.n	800b656 <_printf_float+0x34e>
 800b654:	001c      	movs	r4, r3
 800b656:	2c00      	cmp	r4, #0
 800b658:	dc34      	bgt.n	800b6c4 <_printf_float+0x3bc>
 800b65a:	43e3      	mvns	r3, r4
 800b65c:	2600      	movs	r6, #0
 800b65e:	17db      	asrs	r3, r3, #31
 800b660:	401c      	ands	r4, r3
 800b662:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b664:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800b666:	1ad3      	subs	r3, r2, r3
 800b668:	1b1b      	subs	r3, r3, r4
 800b66a:	42b3      	cmp	r3, r6
 800b66c:	dc00      	bgt.n	800b670 <_printf_float+0x368>
 800b66e:	e77c      	b.n	800b56a <_printf_float+0x262>
 800b670:	002a      	movs	r2, r5
 800b672:	2301      	movs	r3, #1
 800b674:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b676:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b678:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800b67a:	321a      	adds	r2, #26
 800b67c:	47b8      	blx	r7
 800b67e:	3001      	adds	r0, #1
 800b680:	d100      	bne.n	800b684 <_printf_float+0x37c>
 800b682:	e69d      	b.n	800b3c0 <_printf_float+0xb8>
 800b684:	3601      	adds	r6, #1
 800b686:	e7ec      	b.n	800b662 <_printf_float+0x35a>
 800b688:	0033      	movs	r3, r6
 800b68a:	003a      	movs	r2, r7
 800b68c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b68e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b690:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800b692:	47a0      	blx	r4
 800b694:	3001      	adds	r0, #1
 800b696:	d1c5      	bne.n	800b624 <_printf_float+0x31c>
 800b698:	e692      	b.n	800b3c0 <_printf_float+0xb8>
 800b69a:	002a      	movs	r2, r5
 800b69c:	2301      	movs	r3, #1
 800b69e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b6a0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b6a2:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800b6a4:	321a      	adds	r2, #26
 800b6a6:	47b0      	blx	r6
 800b6a8:	3001      	adds	r0, #1
 800b6aa:	d100      	bne.n	800b6ae <_printf_float+0x3a6>
 800b6ac:	e688      	b.n	800b3c0 <_printf_float+0xb8>
 800b6ae:	3401      	adds	r4, #1
 800b6b0:	e7bd      	b.n	800b62e <_printf_float+0x326>
 800b6b2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b6b4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b6b6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b6b8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b6ba:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800b6bc:	47a0      	blx	r4
 800b6be:	3001      	adds	r0, #1
 800b6c0:	d1c1      	bne.n	800b646 <_printf_float+0x33e>
 800b6c2:	e67d      	b.n	800b3c0 <_printf_float+0xb8>
 800b6c4:	19ba      	adds	r2, r7, r6
 800b6c6:	0023      	movs	r3, r4
 800b6c8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b6ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b6cc:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800b6ce:	47b0      	blx	r6
 800b6d0:	3001      	adds	r0, #1
 800b6d2:	d1c2      	bne.n	800b65a <_printf_float+0x352>
 800b6d4:	e674      	b.n	800b3c0 <_printf_float+0xb8>
 800b6d6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b6d8:	930c      	str	r3, [sp, #48]	@ 0x30
 800b6da:	2b01      	cmp	r3, #1
 800b6dc:	dc02      	bgt.n	800b6e4 <_printf_float+0x3dc>
 800b6de:	2301      	movs	r3, #1
 800b6e0:	421a      	tst	r2, r3
 800b6e2:	d039      	beq.n	800b758 <_printf_float+0x450>
 800b6e4:	2301      	movs	r3, #1
 800b6e6:	003a      	movs	r2, r7
 800b6e8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b6ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b6ec:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800b6ee:	47b0      	blx	r6
 800b6f0:	3001      	adds	r0, #1
 800b6f2:	d100      	bne.n	800b6f6 <_printf_float+0x3ee>
 800b6f4:	e664      	b.n	800b3c0 <_printf_float+0xb8>
 800b6f6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b6f8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b6fa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b6fc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b6fe:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800b700:	47b0      	blx	r6
 800b702:	3001      	adds	r0, #1
 800b704:	d100      	bne.n	800b708 <_printf_float+0x400>
 800b706:	e65b      	b.n	800b3c0 <_printf_float+0xb8>
 800b708:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800b70a:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800b70c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b70e:	2200      	movs	r2, #0
 800b710:	3b01      	subs	r3, #1
 800b712:	930c      	str	r3, [sp, #48]	@ 0x30
 800b714:	2300      	movs	r3, #0
 800b716:	f7f4 fe99 	bl	800044c <__aeabi_dcmpeq>
 800b71a:	2800      	cmp	r0, #0
 800b71c:	d11a      	bne.n	800b754 <_printf_float+0x44c>
 800b71e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b720:	1c7a      	adds	r2, r7, #1
 800b722:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b724:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b726:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800b728:	47b0      	blx	r6
 800b72a:	3001      	adds	r0, #1
 800b72c:	d10e      	bne.n	800b74c <_printf_float+0x444>
 800b72e:	e647      	b.n	800b3c0 <_printf_float+0xb8>
 800b730:	002a      	movs	r2, r5
 800b732:	2301      	movs	r3, #1
 800b734:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b736:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b738:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800b73a:	321a      	adds	r2, #26
 800b73c:	47b8      	blx	r7
 800b73e:	3001      	adds	r0, #1
 800b740:	d100      	bne.n	800b744 <_printf_float+0x43c>
 800b742:	e63d      	b.n	800b3c0 <_printf_float+0xb8>
 800b744:	3601      	adds	r6, #1
 800b746:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b748:	429e      	cmp	r6, r3
 800b74a:	dbf1      	blt.n	800b730 <_printf_float+0x428>
 800b74c:	002a      	movs	r2, r5
 800b74e:	0023      	movs	r3, r4
 800b750:	3250      	adds	r2, #80	@ 0x50
 800b752:	e6da      	b.n	800b50a <_printf_float+0x202>
 800b754:	2600      	movs	r6, #0
 800b756:	e7f6      	b.n	800b746 <_printf_float+0x43e>
 800b758:	003a      	movs	r2, r7
 800b75a:	e7e2      	b.n	800b722 <_printf_float+0x41a>
 800b75c:	002a      	movs	r2, r5
 800b75e:	2301      	movs	r3, #1
 800b760:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b762:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b764:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800b766:	3219      	adds	r2, #25
 800b768:	47b0      	blx	r6
 800b76a:	3001      	adds	r0, #1
 800b76c:	d100      	bne.n	800b770 <_printf_float+0x468>
 800b76e:	e627      	b.n	800b3c0 <_printf_float+0xb8>
 800b770:	3401      	adds	r4, #1
 800b772:	68eb      	ldr	r3, [r5, #12]
 800b774:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800b776:	1a9b      	subs	r3, r3, r2
 800b778:	42a3      	cmp	r3, r4
 800b77a:	dcef      	bgt.n	800b75c <_printf_float+0x454>
 800b77c:	e6f9      	b.n	800b572 <_printf_float+0x26a>
 800b77e:	2400      	movs	r4, #0
 800b780:	e7f7      	b.n	800b772 <_printf_float+0x46a>
 800b782:	46c0      	nop			@ (mov r8, r8)

0800b784 <_printf_common>:
 800b784:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b786:	0016      	movs	r6, r2
 800b788:	9301      	str	r3, [sp, #4]
 800b78a:	688a      	ldr	r2, [r1, #8]
 800b78c:	690b      	ldr	r3, [r1, #16]
 800b78e:	000c      	movs	r4, r1
 800b790:	9000      	str	r0, [sp, #0]
 800b792:	4293      	cmp	r3, r2
 800b794:	da00      	bge.n	800b798 <_printf_common+0x14>
 800b796:	0013      	movs	r3, r2
 800b798:	0022      	movs	r2, r4
 800b79a:	6033      	str	r3, [r6, #0]
 800b79c:	3243      	adds	r2, #67	@ 0x43
 800b79e:	7812      	ldrb	r2, [r2, #0]
 800b7a0:	2a00      	cmp	r2, #0
 800b7a2:	d001      	beq.n	800b7a8 <_printf_common+0x24>
 800b7a4:	3301      	adds	r3, #1
 800b7a6:	6033      	str	r3, [r6, #0]
 800b7a8:	6823      	ldr	r3, [r4, #0]
 800b7aa:	069b      	lsls	r3, r3, #26
 800b7ac:	d502      	bpl.n	800b7b4 <_printf_common+0x30>
 800b7ae:	6833      	ldr	r3, [r6, #0]
 800b7b0:	3302      	adds	r3, #2
 800b7b2:	6033      	str	r3, [r6, #0]
 800b7b4:	6822      	ldr	r2, [r4, #0]
 800b7b6:	2306      	movs	r3, #6
 800b7b8:	0015      	movs	r5, r2
 800b7ba:	401d      	ands	r5, r3
 800b7bc:	421a      	tst	r2, r3
 800b7be:	d027      	beq.n	800b810 <_printf_common+0x8c>
 800b7c0:	0023      	movs	r3, r4
 800b7c2:	3343      	adds	r3, #67	@ 0x43
 800b7c4:	781b      	ldrb	r3, [r3, #0]
 800b7c6:	1e5a      	subs	r2, r3, #1
 800b7c8:	4193      	sbcs	r3, r2
 800b7ca:	6822      	ldr	r2, [r4, #0]
 800b7cc:	0692      	lsls	r2, r2, #26
 800b7ce:	d430      	bmi.n	800b832 <_printf_common+0xae>
 800b7d0:	0022      	movs	r2, r4
 800b7d2:	9901      	ldr	r1, [sp, #4]
 800b7d4:	9800      	ldr	r0, [sp, #0]
 800b7d6:	9d08      	ldr	r5, [sp, #32]
 800b7d8:	3243      	adds	r2, #67	@ 0x43
 800b7da:	47a8      	blx	r5
 800b7dc:	3001      	adds	r0, #1
 800b7de:	d025      	beq.n	800b82c <_printf_common+0xa8>
 800b7e0:	2206      	movs	r2, #6
 800b7e2:	6823      	ldr	r3, [r4, #0]
 800b7e4:	2500      	movs	r5, #0
 800b7e6:	4013      	ands	r3, r2
 800b7e8:	2b04      	cmp	r3, #4
 800b7ea:	d105      	bne.n	800b7f8 <_printf_common+0x74>
 800b7ec:	6833      	ldr	r3, [r6, #0]
 800b7ee:	68e5      	ldr	r5, [r4, #12]
 800b7f0:	1aed      	subs	r5, r5, r3
 800b7f2:	43eb      	mvns	r3, r5
 800b7f4:	17db      	asrs	r3, r3, #31
 800b7f6:	401d      	ands	r5, r3
 800b7f8:	68a3      	ldr	r3, [r4, #8]
 800b7fa:	6922      	ldr	r2, [r4, #16]
 800b7fc:	4293      	cmp	r3, r2
 800b7fe:	dd01      	ble.n	800b804 <_printf_common+0x80>
 800b800:	1a9b      	subs	r3, r3, r2
 800b802:	18ed      	adds	r5, r5, r3
 800b804:	2600      	movs	r6, #0
 800b806:	42b5      	cmp	r5, r6
 800b808:	d120      	bne.n	800b84c <_printf_common+0xc8>
 800b80a:	2000      	movs	r0, #0
 800b80c:	e010      	b.n	800b830 <_printf_common+0xac>
 800b80e:	3501      	adds	r5, #1
 800b810:	68e3      	ldr	r3, [r4, #12]
 800b812:	6832      	ldr	r2, [r6, #0]
 800b814:	1a9b      	subs	r3, r3, r2
 800b816:	42ab      	cmp	r3, r5
 800b818:	ddd2      	ble.n	800b7c0 <_printf_common+0x3c>
 800b81a:	0022      	movs	r2, r4
 800b81c:	2301      	movs	r3, #1
 800b81e:	9901      	ldr	r1, [sp, #4]
 800b820:	9800      	ldr	r0, [sp, #0]
 800b822:	9f08      	ldr	r7, [sp, #32]
 800b824:	3219      	adds	r2, #25
 800b826:	47b8      	blx	r7
 800b828:	3001      	adds	r0, #1
 800b82a:	d1f0      	bne.n	800b80e <_printf_common+0x8a>
 800b82c:	2001      	movs	r0, #1
 800b82e:	4240      	negs	r0, r0
 800b830:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b832:	2030      	movs	r0, #48	@ 0x30
 800b834:	18e1      	adds	r1, r4, r3
 800b836:	3143      	adds	r1, #67	@ 0x43
 800b838:	7008      	strb	r0, [r1, #0]
 800b83a:	0021      	movs	r1, r4
 800b83c:	1c5a      	adds	r2, r3, #1
 800b83e:	3145      	adds	r1, #69	@ 0x45
 800b840:	7809      	ldrb	r1, [r1, #0]
 800b842:	18a2      	adds	r2, r4, r2
 800b844:	3243      	adds	r2, #67	@ 0x43
 800b846:	3302      	adds	r3, #2
 800b848:	7011      	strb	r1, [r2, #0]
 800b84a:	e7c1      	b.n	800b7d0 <_printf_common+0x4c>
 800b84c:	0022      	movs	r2, r4
 800b84e:	2301      	movs	r3, #1
 800b850:	9901      	ldr	r1, [sp, #4]
 800b852:	9800      	ldr	r0, [sp, #0]
 800b854:	9f08      	ldr	r7, [sp, #32]
 800b856:	321a      	adds	r2, #26
 800b858:	47b8      	blx	r7
 800b85a:	3001      	adds	r0, #1
 800b85c:	d0e6      	beq.n	800b82c <_printf_common+0xa8>
 800b85e:	3601      	adds	r6, #1
 800b860:	e7d1      	b.n	800b806 <_printf_common+0x82>
	...

0800b864 <_printf_i>:
 800b864:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b866:	b08b      	sub	sp, #44	@ 0x2c
 800b868:	9206      	str	r2, [sp, #24]
 800b86a:	000a      	movs	r2, r1
 800b86c:	3243      	adds	r2, #67	@ 0x43
 800b86e:	9307      	str	r3, [sp, #28]
 800b870:	9005      	str	r0, [sp, #20]
 800b872:	9203      	str	r2, [sp, #12]
 800b874:	7e0a      	ldrb	r2, [r1, #24]
 800b876:	000c      	movs	r4, r1
 800b878:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b87a:	2a78      	cmp	r2, #120	@ 0x78
 800b87c:	d809      	bhi.n	800b892 <_printf_i+0x2e>
 800b87e:	2a62      	cmp	r2, #98	@ 0x62
 800b880:	d80b      	bhi.n	800b89a <_printf_i+0x36>
 800b882:	2a00      	cmp	r2, #0
 800b884:	d100      	bne.n	800b888 <_printf_i+0x24>
 800b886:	e0bc      	b.n	800ba02 <_printf_i+0x19e>
 800b888:	497b      	ldr	r1, [pc, #492]	@ (800ba78 <_printf_i+0x214>)
 800b88a:	9104      	str	r1, [sp, #16]
 800b88c:	2a58      	cmp	r2, #88	@ 0x58
 800b88e:	d100      	bne.n	800b892 <_printf_i+0x2e>
 800b890:	e090      	b.n	800b9b4 <_printf_i+0x150>
 800b892:	0025      	movs	r5, r4
 800b894:	3542      	adds	r5, #66	@ 0x42
 800b896:	702a      	strb	r2, [r5, #0]
 800b898:	e022      	b.n	800b8e0 <_printf_i+0x7c>
 800b89a:	0010      	movs	r0, r2
 800b89c:	3863      	subs	r0, #99	@ 0x63
 800b89e:	2815      	cmp	r0, #21
 800b8a0:	d8f7      	bhi.n	800b892 <_printf_i+0x2e>
 800b8a2:	f7f4 fc43 	bl	800012c <__gnu_thumb1_case_shi>
 800b8a6:	0016      	.short	0x0016
 800b8a8:	fff6001f 	.word	0xfff6001f
 800b8ac:	fff6fff6 	.word	0xfff6fff6
 800b8b0:	001ffff6 	.word	0x001ffff6
 800b8b4:	fff6fff6 	.word	0xfff6fff6
 800b8b8:	fff6fff6 	.word	0xfff6fff6
 800b8bc:	003600a1 	.word	0x003600a1
 800b8c0:	fff60080 	.word	0xfff60080
 800b8c4:	00b2fff6 	.word	0x00b2fff6
 800b8c8:	0036fff6 	.word	0x0036fff6
 800b8cc:	fff6fff6 	.word	0xfff6fff6
 800b8d0:	0084      	.short	0x0084
 800b8d2:	0025      	movs	r5, r4
 800b8d4:	681a      	ldr	r2, [r3, #0]
 800b8d6:	3542      	adds	r5, #66	@ 0x42
 800b8d8:	1d11      	adds	r1, r2, #4
 800b8da:	6019      	str	r1, [r3, #0]
 800b8dc:	6813      	ldr	r3, [r2, #0]
 800b8de:	702b      	strb	r3, [r5, #0]
 800b8e0:	2301      	movs	r3, #1
 800b8e2:	e0a0      	b.n	800ba26 <_printf_i+0x1c2>
 800b8e4:	6818      	ldr	r0, [r3, #0]
 800b8e6:	6809      	ldr	r1, [r1, #0]
 800b8e8:	1d02      	adds	r2, r0, #4
 800b8ea:	060d      	lsls	r5, r1, #24
 800b8ec:	d50b      	bpl.n	800b906 <_printf_i+0xa2>
 800b8ee:	6806      	ldr	r6, [r0, #0]
 800b8f0:	601a      	str	r2, [r3, #0]
 800b8f2:	2e00      	cmp	r6, #0
 800b8f4:	da03      	bge.n	800b8fe <_printf_i+0x9a>
 800b8f6:	232d      	movs	r3, #45	@ 0x2d
 800b8f8:	9a03      	ldr	r2, [sp, #12]
 800b8fa:	4276      	negs	r6, r6
 800b8fc:	7013      	strb	r3, [r2, #0]
 800b8fe:	4b5e      	ldr	r3, [pc, #376]	@ (800ba78 <_printf_i+0x214>)
 800b900:	270a      	movs	r7, #10
 800b902:	9304      	str	r3, [sp, #16]
 800b904:	e018      	b.n	800b938 <_printf_i+0xd4>
 800b906:	6806      	ldr	r6, [r0, #0]
 800b908:	601a      	str	r2, [r3, #0]
 800b90a:	0649      	lsls	r1, r1, #25
 800b90c:	d5f1      	bpl.n	800b8f2 <_printf_i+0x8e>
 800b90e:	b236      	sxth	r6, r6
 800b910:	e7ef      	b.n	800b8f2 <_printf_i+0x8e>
 800b912:	6808      	ldr	r0, [r1, #0]
 800b914:	6819      	ldr	r1, [r3, #0]
 800b916:	c940      	ldmia	r1!, {r6}
 800b918:	0605      	lsls	r5, r0, #24
 800b91a:	d402      	bmi.n	800b922 <_printf_i+0xbe>
 800b91c:	0640      	lsls	r0, r0, #25
 800b91e:	d500      	bpl.n	800b922 <_printf_i+0xbe>
 800b920:	b2b6      	uxth	r6, r6
 800b922:	6019      	str	r1, [r3, #0]
 800b924:	4b54      	ldr	r3, [pc, #336]	@ (800ba78 <_printf_i+0x214>)
 800b926:	270a      	movs	r7, #10
 800b928:	9304      	str	r3, [sp, #16]
 800b92a:	2a6f      	cmp	r2, #111	@ 0x6f
 800b92c:	d100      	bne.n	800b930 <_printf_i+0xcc>
 800b92e:	3f02      	subs	r7, #2
 800b930:	0023      	movs	r3, r4
 800b932:	2200      	movs	r2, #0
 800b934:	3343      	adds	r3, #67	@ 0x43
 800b936:	701a      	strb	r2, [r3, #0]
 800b938:	6863      	ldr	r3, [r4, #4]
 800b93a:	60a3      	str	r3, [r4, #8]
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	db03      	blt.n	800b948 <_printf_i+0xe4>
 800b940:	2104      	movs	r1, #4
 800b942:	6822      	ldr	r2, [r4, #0]
 800b944:	438a      	bics	r2, r1
 800b946:	6022      	str	r2, [r4, #0]
 800b948:	2e00      	cmp	r6, #0
 800b94a:	d102      	bne.n	800b952 <_printf_i+0xee>
 800b94c:	9d03      	ldr	r5, [sp, #12]
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d00c      	beq.n	800b96c <_printf_i+0x108>
 800b952:	9d03      	ldr	r5, [sp, #12]
 800b954:	0030      	movs	r0, r6
 800b956:	0039      	movs	r1, r7
 800b958:	f7f4 fc78 	bl	800024c <__aeabi_uidivmod>
 800b95c:	9b04      	ldr	r3, [sp, #16]
 800b95e:	3d01      	subs	r5, #1
 800b960:	5c5b      	ldrb	r3, [r3, r1]
 800b962:	702b      	strb	r3, [r5, #0]
 800b964:	0033      	movs	r3, r6
 800b966:	0006      	movs	r6, r0
 800b968:	429f      	cmp	r7, r3
 800b96a:	d9f3      	bls.n	800b954 <_printf_i+0xf0>
 800b96c:	2f08      	cmp	r7, #8
 800b96e:	d109      	bne.n	800b984 <_printf_i+0x120>
 800b970:	6823      	ldr	r3, [r4, #0]
 800b972:	07db      	lsls	r3, r3, #31
 800b974:	d506      	bpl.n	800b984 <_printf_i+0x120>
 800b976:	6862      	ldr	r2, [r4, #4]
 800b978:	6923      	ldr	r3, [r4, #16]
 800b97a:	429a      	cmp	r2, r3
 800b97c:	dc02      	bgt.n	800b984 <_printf_i+0x120>
 800b97e:	2330      	movs	r3, #48	@ 0x30
 800b980:	3d01      	subs	r5, #1
 800b982:	702b      	strb	r3, [r5, #0]
 800b984:	9b03      	ldr	r3, [sp, #12]
 800b986:	1b5b      	subs	r3, r3, r5
 800b988:	6123      	str	r3, [r4, #16]
 800b98a:	9b07      	ldr	r3, [sp, #28]
 800b98c:	0021      	movs	r1, r4
 800b98e:	9300      	str	r3, [sp, #0]
 800b990:	9805      	ldr	r0, [sp, #20]
 800b992:	9b06      	ldr	r3, [sp, #24]
 800b994:	aa09      	add	r2, sp, #36	@ 0x24
 800b996:	f7ff fef5 	bl	800b784 <_printf_common>
 800b99a:	3001      	adds	r0, #1
 800b99c:	d148      	bne.n	800ba30 <_printf_i+0x1cc>
 800b99e:	2001      	movs	r0, #1
 800b9a0:	4240      	negs	r0, r0
 800b9a2:	b00b      	add	sp, #44	@ 0x2c
 800b9a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b9a6:	2220      	movs	r2, #32
 800b9a8:	6809      	ldr	r1, [r1, #0]
 800b9aa:	430a      	orrs	r2, r1
 800b9ac:	6022      	str	r2, [r4, #0]
 800b9ae:	2278      	movs	r2, #120	@ 0x78
 800b9b0:	4932      	ldr	r1, [pc, #200]	@ (800ba7c <_printf_i+0x218>)
 800b9b2:	9104      	str	r1, [sp, #16]
 800b9b4:	0021      	movs	r1, r4
 800b9b6:	3145      	adds	r1, #69	@ 0x45
 800b9b8:	700a      	strb	r2, [r1, #0]
 800b9ba:	6819      	ldr	r1, [r3, #0]
 800b9bc:	6822      	ldr	r2, [r4, #0]
 800b9be:	c940      	ldmia	r1!, {r6}
 800b9c0:	0610      	lsls	r0, r2, #24
 800b9c2:	d402      	bmi.n	800b9ca <_printf_i+0x166>
 800b9c4:	0650      	lsls	r0, r2, #25
 800b9c6:	d500      	bpl.n	800b9ca <_printf_i+0x166>
 800b9c8:	b2b6      	uxth	r6, r6
 800b9ca:	6019      	str	r1, [r3, #0]
 800b9cc:	07d3      	lsls	r3, r2, #31
 800b9ce:	d502      	bpl.n	800b9d6 <_printf_i+0x172>
 800b9d0:	2320      	movs	r3, #32
 800b9d2:	4313      	orrs	r3, r2
 800b9d4:	6023      	str	r3, [r4, #0]
 800b9d6:	2e00      	cmp	r6, #0
 800b9d8:	d001      	beq.n	800b9de <_printf_i+0x17a>
 800b9da:	2710      	movs	r7, #16
 800b9dc:	e7a8      	b.n	800b930 <_printf_i+0xcc>
 800b9de:	2220      	movs	r2, #32
 800b9e0:	6823      	ldr	r3, [r4, #0]
 800b9e2:	4393      	bics	r3, r2
 800b9e4:	6023      	str	r3, [r4, #0]
 800b9e6:	e7f8      	b.n	800b9da <_printf_i+0x176>
 800b9e8:	681a      	ldr	r2, [r3, #0]
 800b9ea:	680d      	ldr	r5, [r1, #0]
 800b9ec:	1d10      	adds	r0, r2, #4
 800b9ee:	6949      	ldr	r1, [r1, #20]
 800b9f0:	6018      	str	r0, [r3, #0]
 800b9f2:	6813      	ldr	r3, [r2, #0]
 800b9f4:	062e      	lsls	r6, r5, #24
 800b9f6:	d501      	bpl.n	800b9fc <_printf_i+0x198>
 800b9f8:	6019      	str	r1, [r3, #0]
 800b9fa:	e002      	b.n	800ba02 <_printf_i+0x19e>
 800b9fc:	066d      	lsls	r5, r5, #25
 800b9fe:	d5fb      	bpl.n	800b9f8 <_printf_i+0x194>
 800ba00:	8019      	strh	r1, [r3, #0]
 800ba02:	2300      	movs	r3, #0
 800ba04:	9d03      	ldr	r5, [sp, #12]
 800ba06:	6123      	str	r3, [r4, #16]
 800ba08:	e7bf      	b.n	800b98a <_printf_i+0x126>
 800ba0a:	681a      	ldr	r2, [r3, #0]
 800ba0c:	1d11      	adds	r1, r2, #4
 800ba0e:	6019      	str	r1, [r3, #0]
 800ba10:	6815      	ldr	r5, [r2, #0]
 800ba12:	2100      	movs	r1, #0
 800ba14:	0028      	movs	r0, r5
 800ba16:	6862      	ldr	r2, [r4, #4]
 800ba18:	f000 fa31 	bl	800be7e <memchr>
 800ba1c:	2800      	cmp	r0, #0
 800ba1e:	d001      	beq.n	800ba24 <_printf_i+0x1c0>
 800ba20:	1b40      	subs	r0, r0, r5
 800ba22:	6060      	str	r0, [r4, #4]
 800ba24:	6863      	ldr	r3, [r4, #4]
 800ba26:	6123      	str	r3, [r4, #16]
 800ba28:	2300      	movs	r3, #0
 800ba2a:	9a03      	ldr	r2, [sp, #12]
 800ba2c:	7013      	strb	r3, [r2, #0]
 800ba2e:	e7ac      	b.n	800b98a <_printf_i+0x126>
 800ba30:	002a      	movs	r2, r5
 800ba32:	6923      	ldr	r3, [r4, #16]
 800ba34:	9906      	ldr	r1, [sp, #24]
 800ba36:	9805      	ldr	r0, [sp, #20]
 800ba38:	9d07      	ldr	r5, [sp, #28]
 800ba3a:	47a8      	blx	r5
 800ba3c:	3001      	adds	r0, #1
 800ba3e:	d0ae      	beq.n	800b99e <_printf_i+0x13a>
 800ba40:	6823      	ldr	r3, [r4, #0]
 800ba42:	079b      	lsls	r3, r3, #30
 800ba44:	d415      	bmi.n	800ba72 <_printf_i+0x20e>
 800ba46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba48:	68e0      	ldr	r0, [r4, #12]
 800ba4a:	4298      	cmp	r0, r3
 800ba4c:	daa9      	bge.n	800b9a2 <_printf_i+0x13e>
 800ba4e:	0018      	movs	r0, r3
 800ba50:	e7a7      	b.n	800b9a2 <_printf_i+0x13e>
 800ba52:	0022      	movs	r2, r4
 800ba54:	2301      	movs	r3, #1
 800ba56:	9906      	ldr	r1, [sp, #24]
 800ba58:	9805      	ldr	r0, [sp, #20]
 800ba5a:	9e07      	ldr	r6, [sp, #28]
 800ba5c:	3219      	adds	r2, #25
 800ba5e:	47b0      	blx	r6
 800ba60:	3001      	adds	r0, #1
 800ba62:	d09c      	beq.n	800b99e <_printf_i+0x13a>
 800ba64:	3501      	adds	r5, #1
 800ba66:	68e3      	ldr	r3, [r4, #12]
 800ba68:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ba6a:	1a9b      	subs	r3, r3, r2
 800ba6c:	42ab      	cmp	r3, r5
 800ba6e:	dcf0      	bgt.n	800ba52 <_printf_i+0x1ee>
 800ba70:	e7e9      	b.n	800ba46 <_printf_i+0x1e2>
 800ba72:	2500      	movs	r5, #0
 800ba74:	e7f7      	b.n	800ba66 <_printf_i+0x202>
 800ba76:	46c0      	nop			@ (mov r8, r8)
 800ba78:	0800ea3a 	.word	0x0800ea3a
 800ba7c:	0800ea4b 	.word	0x0800ea4b

0800ba80 <std>:
 800ba80:	2300      	movs	r3, #0
 800ba82:	b510      	push	{r4, lr}
 800ba84:	0004      	movs	r4, r0
 800ba86:	6003      	str	r3, [r0, #0]
 800ba88:	6043      	str	r3, [r0, #4]
 800ba8a:	6083      	str	r3, [r0, #8]
 800ba8c:	8181      	strh	r1, [r0, #12]
 800ba8e:	6643      	str	r3, [r0, #100]	@ 0x64
 800ba90:	81c2      	strh	r2, [r0, #14]
 800ba92:	6103      	str	r3, [r0, #16]
 800ba94:	6143      	str	r3, [r0, #20]
 800ba96:	6183      	str	r3, [r0, #24]
 800ba98:	0019      	movs	r1, r3
 800ba9a:	2208      	movs	r2, #8
 800ba9c:	305c      	adds	r0, #92	@ 0x5c
 800ba9e:	f000 f967 	bl	800bd70 <memset>
 800baa2:	4b0b      	ldr	r3, [pc, #44]	@ (800bad0 <std+0x50>)
 800baa4:	6224      	str	r4, [r4, #32]
 800baa6:	6263      	str	r3, [r4, #36]	@ 0x24
 800baa8:	4b0a      	ldr	r3, [pc, #40]	@ (800bad4 <std+0x54>)
 800baaa:	62a3      	str	r3, [r4, #40]	@ 0x28
 800baac:	4b0a      	ldr	r3, [pc, #40]	@ (800bad8 <std+0x58>)
 800baae:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800bab0:	4b0a      	ldr	r3, [pc, #40]	@ (800badc <std+0x5c>)
 800bab2:	6323      	str	r3, [r4, #48]	@ 0x30
 800bab4:	4b0a      	ldr	r3, [pc, #40]	@ (800bae0 <std+0x60>)
 800bab6:	429c      	cmp	r4, r3
 800bab8:	d005      	beq.n	800bac6 <std+0x46>
 800baba:	4b0a      	ldr	r3, [pc, #40]	@ (800bae4 <std+0x64>)
 800babc:	429c      	cmp	r4, r3
 800babe:	d002      	beq.n	800bac6 <std+0x46>
 800bac0:	4b09      	ldr	r3, [pc, #36]	@ (800bae8 <std+0x68>)
 800bac2:	429c      	cmp	r4, r3
 800bac4:	d103      	bne.n	800bace <std+0x4e>
 800bac6:	0020      	movs	r0, r4
 800bac8:	3058      	adds	r0, #88	@ 0x58
 800baca:	f000 f9d5 	bl	800be78 <__retarget_lock_init_recursive>
 800bace:	bd10      	pop	{r4, pc}
 800bad0:	0800bc69 	.word	0x0800bc69
 800bad4:	0800bc91 	.word	0x0800bc91
 800bad8:	0800bcc9 	.word	0x0800bcc9
 800badc:	0800bcf5 	.word	0x0800bcf5
 800bae0:	20000f14 	.word	0x20000f14
 800bae4:	20000f7c 	.word	0x20000f7c
 800bae8:	20000fe4 	.word	0x20000fe4

0800baec <stdio_exit_handler>:
 800baec:	b510      	push	{r4, lr}
 800baee:	4a03      	ldr	r2, [pc, #12]	@ (800bafc <stdio_exit_handler+0x10>)
 800baf0:	4903      	ldr	r1, [pc, #12]	@ (800bb00 <stdio_exit_handler+0x14>)
 800baf2:	4804      	ldr	r0, [pc, #16]	@ (800bb04 <stdio_exit_handler+0x18>)
 800baf4:	f000 f86c 	bl	800bbd0 <_fwalk_sglue>
 800baf8:	bd10      	pop	{r4, pc}
 800bafa:	46c0      	nop			@ (mov r8, r8)
 800bafc:	2000003c 	.word	0x2000003c
 800bb00:	0800db3d 	.word	0x0800db3d
 800bb04:	2000004c 	.word	0x2000004c

0800bb08 <cleanup_stdio>:
 800bb08:	6841      	ldr	r1, [r0, #4]
 800bb0a:	4b0b      	ldr	r3, [pc, #44]	@ (800bb38 <cleanup_stdio+0x30>)
 800bb0c:	b510      	push	{r4, lr}
 800bb0e:	0004      	movs	r4, r0
 800bb10:	4299      	cmp	r1, r3
 800bb12:	d001      	beq.n	800bb18 <cleanup_stdio+0x10>
 800bb14:	f002 f812 	bl	800db3c <_fflush_r>
 800bb18:	68a1      	ldr	r1, [r4, #8]
 800bb1a:	4b08      	ldr	r3, [pc, #32]	@ (800bb3c <cleanup_stdio+0x34>)
 800bb1c:	4299      	cmp	r1, r3
 800bb1e:	d002      	beq.n	800bb26 <cleanup_stdio+0x1e>
 800bb20:	0020      	movs	r0, r4
 800bb22:	f002 f80b 	bl	800db3c <_fflush_r>
 800bb26:	68e1      	ldr	r1, [r4, #12]
 800bb28:	4b05      	ldr	r3, [pc, #20]	@ (800bb40 <cleanup_stdio+0x38>)
 800bb2a:	4299      	cmp	r1, r3
 800bb2c:	d002      	beq.n	800bb34 <cleanup_stdio+0x2c>
 800bb2e:	0020      	movs	r0, r4
 800bb30:	f002 f804 	bl	800db3c <_fflush_r>
 800bb34:	bd10      	pop	{r4, pc}
 800bb36:	46c0      	nop			@ (mov r8, r8)
 800bb38:	20000f14 	.word	0x20000f14
 800bb3c:	20000f7c 	.word	0x20000f7c
 800bb40:	20000fe4 	.word	0x20000fe4

0800bb44 <global_stdio_init.part.0>:
 800bb44:	b510      	push	{r4, lr}
 800bb46:	4b09      	ldr	r3, [pc, #36]	@ (800bb6c <global_stdio_init.part.0+0x28>)
 800bb48:	4a09      	ldr	r2, [pc, #36]	@ (800bb70 <global_stdio_init.part.0+0x2c>)
 800bb4a:	2104      	movs	r1, #4
 800bb4c:	601a      	str	r2, [r3, #0]
 800bb4e:	4809      	ldr	r0, [pc, #36]	@ (800bb74 <global_stdio_init.part.0+0x30>)
 800bb50:	2200      	movs	r2, #0
 800bb52:	f7ff ff95 	bl	800ba80 <std>
 800bb56:	2201      	movs	r2, #1
 800bb58:	2109      	movs	r1, #9
 800bb5a:	4807      	ldr	r0, [pc, #28]	@ (800bb78 <global_stdio_init.part.0+0x34>)
 800bb5c:	f7ff ff90 	bl	800ba80 <std>
 800bb60:	2202      	movs	r2, #2
 800bb62:	2112      	movs	r1, #18
 800bb64:	4805      	ldr	r0, [pc, #20]	@ (800bb7c <global_stdio_init.part.0+0x38>)
 800bb66:	f7ff ff8b 	bl	800ba80 <std>
 800bb6a:	bd10      	pop	{r4, pc}
 800bb6c:	2000104c 	.word	0x2000104c
 800bb70:	0800baed 	.word	0x0800baed
 800bb74:	20000f14 	.word	0x20000f14
 800bb78:	20000f7c 	.word	0x20000f7c
 800bb7c:	20000fe4 	.word	0x20000fe4

0800bb80 <__sfp_lock_acquire>:
 800bb80:	b510      	push	{r4, lr}
 800bb82:	4802      	ldr	r0, [pc, #8]	@ (800bb8c <__sfp_lock_acquire+0xc>)
 800bb84:	f000 f979 	bl	800be7a <__retarget_lock_acquire_recursive>
 800bb88:	bd10      	pop	{r4, pc}
 800bb8a:	46c0      	nop			@ (mov r8, r8)
 800bb8c:	20001055 	.word	0x20001055

0800bb90 <__sfp_lock_release>:
 800bb90:	b510      	push	{r4, lr}
 800bb92:	4802      	ldr	r0, [pc, #8]	@ (800bb9c <__sfp_lock_release+0xc>)
 800bb94:	f000 f972 	bl	800be7c <__retarget_lock_release_recursive>
 800bb98:	bd10      	pop	{r4, pc}
 800bb9a:	46c0      	nop			@ (mov r8, r8)
 800bb9c:	20001055 	.word	0x20001055

0800bba0 <__sinit>:
 800bba0:	b510      	push	{r4, lr}
 800bba2:	0004      	movs	r4, r0
 800bba4:	f7ff ffec 	bl	800bb80 <__sfp_lock_acquire>
 800bba8:	6a23      	ldr	r3, [r4, #32]
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d002      	beq.n	800bbb4 <__sinit+0x14>
 800bbae:	f7ff ffef 	bl	800bb90 <__sfp_lock_release>
 800bbb2:	bd10      	pop	{r4, pc}
 800bbb4:	4b04      	ldr	r3, [pc, #16]	@ (800bbc8 <__sinit+0x28>)
 800bbb6:	6223      	str	r3, [r4, #32]
 800bbb8:	4b04      	ldr	r3, [pc, #16]	@ (800bbcc <__sinit+0x2c>)
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d1f6      	bne.n	800bbae <__sinit+0xe>
 800bbc0:	f7ff ffc0 	bl	800bb44 <global_stdio_init.part.0>
 800bbc4:	e7f3      	b.n	800bbae <__sinit+0xe>
 800bbc6:	46c0      	nop			@ (mov r8, r8)
 800bbc8:	0800bb09 	.word	0x0800bb09
 800bbcc:	2000104c 	.word	0x2000104c

0800bbd0 <_fwalk_sglue>:
 800bbd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bbd2:	0014      	movs	r4, r2
 800bbd4:	2600      	movs	r6, #0
 800bbd6:	9000      	str	r0, [sp, #0]
 800bbd8:	9101      	str	r1, [sp, #4]
 800bbda:	68a5      	ldr	r5, [r4, #8]
 800bbdc:	6867      	ldr	r7, [r4, #4]
 800bbde:	3f01      	subs	r7, #1
 800bbe0:	d504      	bpl.n	800bbec <_fwalk_sglue+0x1c>
 800bbe2:	6824      	ldr	r4, [r4, #0]
 800bbe4:	2c00      	cmp	r4, #0
 800bbe6:	d1f8      	bne.n	800bbda <_fwalk_sglue+0xa>
 800bbe8:	0030      	movs	r0, r6
 800bbea:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800bbec:	89ab      	ldrh	r3, [r5, #12]
 800bbee:	2b01      	cmp	r3, #1
 800bbf0:	d908      	bls.n	800bc04 <_fwalk_sglue+0x34>
 800bbf2:	220e      	movs	r2, #14
 800bbf4:	5eab      	ldrsh	r3, [r5, r2]
 800bbf6:	3301      	adds	r3, #1
 800bbf8:	d004      	beq.n	800bc04 <_fwalk_sglue+0x34>
 800bbfa:	0029      	movs	r1, r5
 800bbfc:	9800      	ldr	r0, [sp, #0]
 800bbfe:	9b01      	ldr	r3, [sp, #4]
 800bc00:	4798      	blx	r3
 800bc02:	4306      	orrs	r6, r0
 800bc04:	3568      	adds	r5, #104	@ 0x68
 800bc06:	e7ea      	b.n	800bbde <_fwalk_sglue+0xe>

0800bc08 <iprintf>:
 800bc08:	b40f      	push	{r0, r1, r2, r3}
 800bc0a:	b507      	push	{r0, r1, r2, lr}
 800bc0c:	4905      	ldr	r1, [pc, #20]	@ (800bc24 <iprintf+0x1c>)
 800bc0e:	ab04      	add	r3, sp, #16
 800bc10:	6808      	ldr	r0, [r1, #0]
 800bc12:	cb04      	ldmia	r3!, {r2}
 800bc14:	6881      	ldr	r1, [r0, #8]
 800bc16:	9301      	str	r3, [sp, #4]
 800bc18:	f001 fdee 	bl	800d7f8 <_vfiprintf_r>
 800bc1c:	b003      	add	sp, #12
 800bc1e:	bc08      	pop	{r3}
 800bc20:	b004      	add	sp, #16
 800bc22:	4718      	bx	r3
 800bc24:	20000048 	.word	0x20000048

0800bc28 <siprintf>:
 800bc28:	b40e      	push	{r1, r2, r3}
 800bc2a:	b500      	push	{lr}
 800bc2c:	490b      	ldr	r1, [pc, #44]	@ (800bc5c <siprintf+0x34>)
 800bc2e:	b09c      	sub	sp, #112	@ 0x70
 800bc30:	ab1d      	add	r3, sp, #116	@ 0x74
 800bc32:	9002      	str	r0, [sp, #8]
 800bc34:	9006      	str	r0, [sp, #24]
 800bc36:	9107      	str	r1, [sp, #28]
 800bc38:	9104      	str	r1, [sp, #16]
 800bc3a:	4809      	ldr	r0, [pc, #36]	@ (800bc60 <siprintf+0x38>)
 800bc3c:	4909      	ldr	r1, [pc, #36]	@ (800bc64 <siprintf+0x3c>)
 800bc3e:	cb04      	ldmia	r3!, {r2}
 800bc40:	9105      	str	r1, [sp, #20]
 800bc42:	6800      	ldr	r0, [r0, #0]
 800bc44:	a902      	add	r1, sp, #8
 800bc46:	9301      	str	r3, [sp, #4]
 800bc48:	f001 fcb0 	bl	800d5ac <_svfiprintf_r>
 800bc4c:	2200      	movs	r2, #0
 800bc4e:	9b02      	ldr	r3, [sp, #8]
 800bc50:	701a      	strb	r2, [r3, #0]
 800bc52:	b01c      	add	sp, #112	@ 0x70
 800bc54:	bc08      	pop	{r3}
 800bc56:	b003      	add	sp, #12
 800bc58:	4718      	bx	r3
 800bc5a:	46c0      	nop			@ (mov r8, r8)
 800bc5c:	7fffffff 	.word	0x7fffffff
 800bc60:	20000048 	.word	0x20000048
 800bc64:	ffff0208 	.word	0xffff0208

0800bc68 <__sread>:
 800bc68:	b570      	push	{r4, r5, r6, lr}
 800bc6a:	000c      	movs	r4, r1
 800bc6c:	250e      	movs	r5, #14
 800bc6e:	5f49      	ldrsh	r1, [r1, r5]
 800bc70:	f000 f8b0 	bl	800bdd4 <_read_r>
 800bc74:	2800      	cmp	r0, #0
 800bc76:	db03      	blt.n	800bc80 <__sread+0x18>
 800bc78:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800bc7a:	181b      	adds	r3, r3, r0
 800bc7c:	6563      	str	r3, [r4, #84]	@ 0x54
 800bc7e:	bd70      	pop	{r4, r5, r6, pc}
 800bc80:	89a3      	ldrh	r3, [r4, #12]
 800bc82:	4a02      	ldr	r2, [pc, #8]	@ (800bc8c <__sread+0x24>)
 800bc84:	4013      	ands	r3, r2
 800bc86:	81a3      	strh	r3, [r4, #12]
 800bc88:	e7f9      	b.n	800bc7e <__sread+0x16>
 800bc8a:	46c0      	nop			@ (mov r8, r8)
 800bc8c:	ffffefff 	.word	0xffffefff

0800bc90 <__swrite>:
 800bc90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc92:	001f      	movs	r7, r3
 800bc94:	898b      	ldrh	r3, [r1, #12]
 800bc96:	0005      	movs	r5, r0
 800bc98:	000c      	movs	r4, r1
 800bc9a:	0016      	movs	r6, r2
 800bc9c:	05db      	lsls	r3, r3, #23
 800bc9e:	d505      	bpl.n	800bcac <__swrite+0x1c>
 800bca0:	230e      	movs	r3, #14
 800bca2:	5ec9      	ldrsh	r1, [r1, r3]
 800bca4:	2200      	movs	r2, #0
 800bca6:	2302      	movs	r3, #2
 800bca8:	f000 f880 	bl	800bdac <_lseek_r>
 800bcac:	89a3      	ldrh	r3, [r4, #12]
 800bcae:	4a05      	ldr	r2, [pc, #20]	@ (800bcc4 <__swrite+0x34>)
 800bcb0:	0028      	movs	r0, r5
 800bcb2:	4013      	ands	r3, r2
 800bcb4:	81a3      	strh	r3, [r4, #12]
 800bcb6:	0032      	movs	r2, r6
 800bcb8:	230e      	movs	r3, #14
 800bcba:	5ee1      	ldrsh	r1, [r4, r3]
 800bcbc:	003b      	movs	r3, r7
 800bcbe:	f000 f89d 	bl	800bdfc <_write_r>
 800bcc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bcc4:	ffffefff 	.word	0xffffefff

0800bcc8 <__sseek>:
 800bcc8:	b570      	push	{r4, r5, r6, lr}
 800bcca:	000c      	movs	r4, r1
 800bccc:	250e      	movs	r5, #14
 800bcce:	5f49      	ldrsh	r1, [r1, r5]
 800bcd0:	f000 f86c 	bl	800bdac <_lseek_r>
 800bcd4:	89a3      	ldrh	r3, [r4, #12]
 800bcd6:	1c42      	adds	r2, r0, #1
 800bcd8:	d103      	bne.n	800bce2 <__sseek+0x1a>
 800bcda:	4a05      	ldr	r2, [pc, #20]	@ (800bcf0 <__sseek+0x28>)
 800bcdc:	4013      	ands	r3, r2
 800bcde:	81a3      	strh	r3, [r4, #12]
 800bce0:	bd70      	pop	{r4, r5, r6, pc}
 800bce2:	2280      	movs	r2, #128	@ 0x80
 800bce4:	0152      	lsls	r2, r2, #5
 800bce6:	4313      	orrs	r3, r2
 800bce8:	81a3      	strh	r3, [r4, #12]
 800bcea:	6560      	str	r0, [r4, #84]	@ 0x54
 800bcec:	e7f8      	b.n	800bce0 <__sseek+0x18>
 800bcee:	46c0      	nop			@ (mov r8, r8)
 800bcf0:	ffffefff 	.word	0xffffefff

0800bcf4 <__sclose>:
 800bcf4:	b510      	push	{r4, lr}
 800bcf6:	230e      	movs	r3, #14
 800bcf8:	5ec9      	ldrsh	r1, [r1, r3]
 800bcfa:	f000 f845 	bl	800bd88 <_close_r>
 800bcfe:	bd10      	pop	{r4, pc}

0800bd00 <_vsniprintf_r>:
 800bd00:	b530      	push	{r4, r5, lr}
 800bd02:	0014      	movs	r4, r2
 800bd04:	0005      	movs	r5, r0
 800bd06:	001a      	movs	r2, r3
 800bd08:	b09b      	sub	sp, #108	@ 0x6c
 800bd0a:	2c00      	cmp	r4, #0
 800bd0c:	da05      	bge.n	800bd1a <_vsniprintf_r+0x1a>
 800bd0e:	238b      	movs	r3, #139	@ 0x8b
 800bd10:	6003      	str	r3, [r0, #0]
 800bd12:	2001      	movs	r0, #1
 800bd14:	4240      	negs	r0, r0
 800bd16:	b01b      	add	sp, #108	@ 0x6c
 800bd18:	bd30      	pop	{r4, r5, pc}
 800bd1a:	2382      	movs	r3, #130	@ 0x82
 800bd1c:	4668      	mov	r0, sp
 800bd1e:	009b      	lsls	r3, r3, #2
 800bd20:	8183      	strh	r3, [r0, #12]
 800bd22:	2300      	movs	r3, #0
 800bd24:	9100      	str	r1, [sp, #0]
 800bd26:	9104      	str	r1, [sp, #16]
 800bd28:	429c      	cmp	r4, r3
 800bd2a:	d000      	beq.n	800bd2e <_vsniprintf_r+0x2e>
 800bd2c:	1e63      	subs	r3, r4, #1
 800bd2e:	9302      	str	r3, [sp, #8]
 800bd30:	9305      	str	r3, [sp, #20]
 800bd32:	2301      	movs	r3, #1
 800bd34:	4669      	mov	r1, sp
 800bd36:	425b      	negs	r3, r3
 800bd38:	81cb      	strh	r3, [r1, #14]
 800bd3a:	0028      	movs	r0, r5
 800bd3c:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800bd3e:	f001 fc35 	bl	800d5ac <_svfiprintf_r>
 800bd42:	1c43      	adds	r3, r0, #1
 800bd44:	da01      	bge.n	800bd4a <_vsniprintf_r+0x4a>
 800bd46:	238b      	movs	r3, #139	@ 0x8b
 800bd48:	602b      	str	r3, [r5, #0]
 800bd4a:	2c00      	cmp	r4, #0
 800bd4c:	d0e3      	beq.n	800bd16 <_vsniprintf_r+0x16>
 800bd4e:	2200      	movs	r2, #0
 800bd50:	9b00      	ldr	r3, [sp, #0]
 800bd52:	701a      	strb	r2, [r3, #0]
 800bd54:	e7df      	b.n	800bd16 <_vsniprintf_r+0x16>
	...

0800bd58 <vsniprintf>:
 800bd58:	b513      	push	{r0, r1, r4, lr}
 800bd5a:	4c04      	ldr	r4, [pc, #16]	@ (800bd6c <vsniprintf+0x14>)
 800bd5c:	9300      	str	r3, [sp, #0]
 800bd5e:	0013      	movs	r3, r2
 800bd60:	000a      	movs	r2, r1
 800bd62:	0001      	movs	r1, r0
 800bd64:	6820      	ldr	r0, [r4, #0]
 800bd66:	f7ff ffcb 	bl	800bd00 <_vsniprintf_r>
 800bd6a:	bd16      	pop	{r1, r2, r4, pc}
 800bd6c:	20000048 	.word	0x20000048

0800bd70 <memset>:
 800bd70:	0003      	movs	r3, r0
 800bd72:	1882      	adds	r2, r0, r2
 800bd74:	4293      	cmp	r3, r2
 800bd76:	d100      	bne.n	800bd7a <memset+0xa>
 800bd78:	4770      	bx	lr
 800bd7a:	7019      	strb	r1, [r3, #0]
 800bd7c:	3301      	adds	r3, #1
 800bd7e:	e7f9      	b.n	800bd74 <memset+0x4>

0800bd80 <_localeconv_r>:
 800bd80:	4800      	ldr	r0, [pc, #0]	@ (800bd84 <_localeconv_r+0x4>)
 800bd82:	4770      	bx	lr
 800bd84:	20000188 	.word	0x20000188

0800bd88 <_close_r>:
 800bd88:	2300      	movs	r3, #0
 800bd8a:	b570      	push	{r4, r5, r6, lr}
 800bd8c:	4d06      	ldr	r5, [pc, #24]	@ (800bda8 <_close_r+0x20>)
 800bd8e:	0004      	movs	r4, r0
 800bd90:	0008      	movs	r0, r1
 800bd92:	602b      	str	r3, [r5, #0]
 800bd94:	f7f9 fda8 	bl	80058e8 <_close>
 800bd98:	1c43      	adds	r3, r0, #1
 800bd9a:	d103      	bne.n	800bda4 <_close_r+0x1c>
 800bd9c:	682b      	ldr	r3, [r5, #0]
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d000      	beq.n	800bda4 <_close_r+0x1c>
 800bda2:	6023      	str	r3, [r4, #0]
 800bda4:	bd70      	pop	{r4, r5, r6, pc}
 800bda6:	46c0      	nop			@ (mov r8, r8)
 800bda8:	20001050 	.word	0x20001050

0800bdac <_lseek_r>:
 800bdac:	b570      	push	{r4, r5, r6, lr}
 800bdae:	0004      	movs	r4, r0
 800bdb0:	0008      	movs	r0, r1
 800bdb2:	0011      	movs	r1, r2
 800bdb4:	001a      	movs	r2, r3
 800bdb6:	2300      	movs	r3, #0
 800bdb8:	4d05      	ldr	r5, [pc, #20]	@ (800bdd0 <_lseek_r+0x24>)
 800bdba:	602b      	str	r3, [r5, #0]
 800bdbc:	f7f9 fdb5 	bl	800592a <_lseek>
 800bdc0:	1c43      	adds	r3, r0, #1
 800bdc2:	d103      	bne.n	800bdcc <_lseek_r+0x20>
 800bdc4:	682b      	ldr	r3, [r5, #0]
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d000      	beq.n	800bdcc <_lseek_r+0x20>
 800bdca:	6023      	str	r3, [r4, #0]
 800bdcc:	bd70      	pop	{r4, r5, r6, pc}
 800bdce:	46c0      	nop			@ (mov r8, r8)
 800bdd0:	20001050 	.word	0x20001050

0800bdd4 <_read_r>:
 800bdd4:	b570      	push	{r4, r5, r6, lr}
 800bdd6:	0004      	movs	r4, r0
 800bdd8:	0008      	movs	r0, r1
 800bdda:	0011      	movs	r1, r2
 800bddc:	001a      	movs	r2, r3
 800bdde:	2300      	movs	r3, #0
 800bde0:	4d05      	ldr	r5, [pc, #20]	@ (800bdf8 <_read_r+0x24>)
 800bde2:	602b      	str	r3, [r5, #0]
 800bde4:	f7f9 fd63 	bl	80058ae <_read>
 800bde8:	1c43      	adds	r3, r0, #1
 800bdea:	d103      	bne.n	800bdf4 <_read_r+0x20>
 800bdec:	682b      	ldr	r3, [r5, #0]
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d000      	beq.n	800bdf4 <_read_r+0x20>
 800bdf2:	6023      	str	r3, [r4, #0]
 800bdf4:	bd70      	pop	{r4, r5, r6, pc}
 800bdf6:	46c0      	nop			@ (mov r8, r8)
 800bdf8:	20001050 	.word	0x20001050

0800bdfc <_write_r>:
 800bdfc:	b570      	push	{r4, r5, r6, lr}
 800bdfe:	0004      	movs	r4, r0
 800be00:	0008      	movs	r0, r1
 800be02:	0011      	movs	r1, r2
 800be04:	001a      	movs	r2, r3
 800be06:	2300      	movs	r3, #0
 800be08:	4d05      	ldr	r5, [pc, #20]	@ (800be20 <_write_r+0x24>)
 800be0a:	602b      	str	r3, [r5, #0]
 800be0c:	f7f9 ff8e 	bl	8005d2c <_write>
 800be10:	1c43      	adds	r3, r0, #1
 800be12:	d103      	bne.n	800be1c <_write_r+0x20>
 800be14:	682b      	ldr	r3, [r5, #0]
 800be16:	2b00      	cmp	r3, #0
 800be18:	d000      	beq.n	800be1c <_write_r+0x20>
 800be1a:	6023      	str	r3, [r4, #0]
 800be1c:	bd70      	pop	{r4, r5, r6, pc}
 800be1e:	46c0      	nop			@ (mov r8, r8)
 800be20:	20001050 	.word	0x20001050

0800be24 <__errno>:
 800be24:	4b01      	ldr	r3, [pc, #4]	@ (800be2c <__errno+0x8>)
 800be26:	6818      	ldr	r0, [r3, #0]
 800be28:	4770      	bx	lr
 800be2a:	46c0      	nop			@ (mov r8, r8)
 800be2c:	20000048 	.word	0x20000048

0800be30 <__libc_init_array>:
 800be30:	b570      	push	{r4, r5, r6, lr}
 800be32:	2600      	movs	r6, #0
 800be34:	4c0c      	ldr	r4, [pc, #48]	@ (800be68 <__libc_init_array+0x38>)
 800be36:	4d0d      	ldr	r5, [pc, #52]	@ (800be6c <__libc_init_array+0x3c>)
 800be38:	1b64      	subs	r4, r4, r5
 800be3a:	10a4      	asrs	r4, r4, #2
 800be3c:	42a6      	cmp	r6, r4
 800be3e:	d109      	bne.n	800be54 <__libc_init_array+0x24>
 800be40:	2600      	movs	r6, #0
 800be42:	f002 fae1 	bl	800e408 <_init>
 800be46:	4c0a      	ldr	r4, [pc, #40]	@ (800be70 <__libc_init_array+0x40>)
 800be48:	4d0a      	ldr	r5, [pc, #40]	@ (800be74 <__libc_init_array+0x44>)
 800be4a:	1b64      	subs	r4, r4, r5
 800be4c:	10a4      	asrs	r4, r4, #2
 800be4e:	42a6      	cmp	r6, r4
 800be50:	d105      	bne.n	800be5e <__libc_init_array+0x2e>
 800be52:	bd70      	pop	{r4, r5, r6, pc}
 800be54:	00b3      	lsls	r3, r6, #2
 800be56:	58eb      	ldr	r3, [r5, r3]
 800be58:	4798      	blx	r3
 800be5a:	3601      	adds	r6, #1
 800be5c:	e7ee      	b.n	800be3c <__libc_init_array+0xc>
 800be5e:	00b3      	lsls	r3, r6, #2
 800be60:	58eb      	ldr	r3, [r5, r3]
 800be62:	4798      	blx	r3
 800be64:	3601      	adds	r6, #1
 800be66:	e7f2      	b.n	800be4e <__libc_init_array+0x1e>
 800be68:	0800edb8 	.word	0x0800edb8
 800be6c:	0800edb8 	.word	0x0800edb8
 800be70:	0800edbc 	.word	0x0800edbc
 800be74:	0800edb8 	.word	0x0800edb8

0800be78 <__retarget_lock_init_recursive>:
 800be78:	4770      	bx	lr

0800be7a <__retarget_lock_acquire_recursive>:
 800be7a:	4770      	bx	lr

0800be7c <__retarget_lock_release_recursive>:
 800be7c:	4770      	bx	lr

0800be7e <memchr>:
 800be7e:	b2c9      	uxtb	r1, r1
 800be80:	1882      	adds	r2, r0, r2
 800be82:	4290      	cmp	r0, r2
 800be84:	d101      	bne.n	800be8a <memchr+0xc>
 800be86:	2000      	movs	r0, #0
 800be88:	4770      	bx	lr
 800be8a:	7803      	ldrb	r3, [r0, #0]
 800be8c:	428b      	cmp	r3, r1
 800be8e:	d0fb      	beq.n	800be88 <memchr+0xa>
 800be90:	3001      	adds	r0, #1
 800be92:	e7f6      	b.n	800be82 <memchr+0x4>

0800be94 <quorem>:
 800be94:	b5f0      	push	{r4, r5, r6, r7, lr}
 800be96:	6902      	ldr	r2, [r0, #16]
 800be98:	690f      	ldr	r7, [r1, #16]
 800be9a:	b087      	sub	sp, #28
 800be9c:	0006      	movs	r6, r0
 800be9e:	000b      	movs	r3, r1
 800bea0:	2000      	movs	r0, #0
 800bea2:	9102      	str	r1, [sp, #8]
 800bea4:	42ba      	cmp	r2, r7
 800bea6:	db6d      	blt.n	800bf84 <quorem+0xf0>
 800bea8:	3f01      	subs	r7, #1
 800beaa:	00bc      	lsls	r4, r7, #2
 800beac:	3314      	adds	r3, #20
 800beae:	9305      	str	r3, [sp, #20]
 800beb0:	191b      	adds	r3, r3, r4
 800beb2:	9303      	str	r3, [sp, #12]
 800beb4:	0033      	movs	r3, r6
 800beb6:	3314      	adds	r3, #20
 800beb8:	191c      	adds	r4, r3, r4
 800beba:	9301      	str	r3, [sp, #4]
 800bebc:	6823      	ldr	r3, [r4, #0]
 800bebe:	9304      	str	r3, [sp, #16]
 800bec0:	9b03      	ldr	r3, [sp, #12]
 800bec2:	9804      	ldr	r0, [sp, #16]
 800bec4:	681d      	ldr	r5, [r3, #0]
 800bec6:	3501      	adds	r5, #1
 800bec8:	0029      	movs	r1, r5
 800beca:	f7f4 f939 	bl	8000140 <__udivsi3>
 800bece:	9b04      	ldr	r3, [sp, #16]
 800bed0:	9000      	str	r0, [sp, #0]
 800bed2:	42ab      	cmp	r3, r5
 800bed4:	d32b      	bcc.n	800bf2e <quorem+0x9a>
 800bed6:	9b05      	ldr	r3, [sp, #20]
 800bed8:	9d01      	ldr	r5, [sp, #4]
 800beda:	469c      	mov	ip, r3
 800bedc:	2300      	movs	r3, #0
 800bede:	9305      	str	r3, [sp, #20]
 800bee0:	9304      	str	r3, [sp, #16]
 800bee2:	4662      	mov	r2, ip
 800bee4:	ca08      	ldmia	r2!, {r3}
 800bee6:	6828      	ldr	r0, [r5, #0]
 800bee8:	4694      	mov	ip, r2
 800beea:	9a00      	ldr	r2, [sp, #0]
 800beec:	b299      	uxth	r1, r3
 800beee:	4351      	muls	r1, r2
 800bef0:	9a05      	ldr	r2, [sp, #20]
 800bef2:	0c1b      	lsrs	r3, r3, #16
 800bef4:	1889      	adds	r1, r1, r2
 800bef6:	9a00      	ldr	r2, [sp, #0]
 800bef8:	4353      	muls	r3, r2
 800befa:	0c0a      	lsrs	r2, r1, #16
 800befc:	189b      	adds	r3, r3, r2
 800befe:	0c1a      	lsrs	r2, r3, #16
 800bf00:	b289      	uxth	r1, r1
 800bf02:	9205      	str	r2, [sp, #20]
 800bf04:	b282      	uxth	r2, r0
 800bf06:	1a52      	subs	r2, r2, r1
 800bf08:	9904      	ldr	r1, [sp, #16]
 800bf0a:	0c00      	lsrs	r0, r0, #16
 800bf0c:	1852      	adds	r2, r2, r1
 800bf0e:	b29b      	uxth	r3, r3
 800bf10:	1411      	asrs	r1, r2, #16
 800bf12:	1ac3      	subs	r3, r0, r3
 800bf14:	185b      	adds	r3, r3, r1
 800bf16:	1419      	asrs	r1, r3, #16
 800bf18:	b292      	uxth	r2, r2
 800bf1a:	041b      	lsls	r3, r3, #16
 800bf1c:	431a      	orrs	r2, r3
 800bf1e:	9b03      	ldr	r3, [sp, #12]
 800bf20:	9104      	str	r1, [sp, #16]
 800bf22:	c504      	stmia	r5!, {r2}
 800bf24:	4563      	cmp	r3, ip
 800bf26:	d2dc      	bcs.n	800bee2 <quorem+0x4e>
 800bf28:	6823      	ldr	r3, [r4, #0]
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d030      	beq.n	800bf90 <quorem+0xfc>
 800bf2e:	0030      	movs	r0, r6
 800bf30:	9902      	ldr	r1, [sp, #8]
 800bf32:	f001 f9c5 	bl	800d2c0 <__mcmp>
 800bf36:	2800      	cmp	r0, #0
 800bf38:	db23      	blt.n	800bf82 <quorem+0xee>
 800bf3a:	0034      	movs	r4, r6
 800bf3c:	2500      	movs	r5, #0
 800bf3e:	9902      	ldr	r1, [sp, #8]
 800bf40:	3414      	adds	r4, #20
 800bf42:	3114      	adds	r1, #20
 800bf44:	6823      	ldr	r3, [r4, #0]
 800bf46:	c901      	ldmia	r1!, {r0}
 800bf48:	9302      	str	r3, [sp, #8]
 800bf4a:	466b      	mov	r3, sp
 800bf4c:	891b      	ldrh	r3, [r3, #8]
 800bf4e:	b282      	uxth	r2, r0
 800bf50:	1a9a      	subs	r2, r3, r2
 800bf52:	9b02      	ldr	r3, [sp, #8]
 800bf54:	1952      	adds	r2, r2, r5
 800bf56:	0c00      	lsrs	r0, r0, #16
 800bf58:	0c1b      	lsrs	r3, r3, #16
 800bf5a:	1a1b      	subs	r3, r3, r0
 800bf5c:	1410      	asrs	r0, r2, #16
 800bf5e:	181b      	adds	r3, r3, r0
 800bf60:	141d      	asrs	r5, r3, #16
 800bf62:	b292      	uxth	r2, r2
 800bf64:	041b      	lsls	r3, r3, #16
 800bf66:	431a      	orrs	r2, r3
 800bf68:	9b03      	ldr	r3, [sp, #12]
 800bf6a:	c404      	stmia	r4!, {r2}
 800bf6c:	428b      	cmp	r3, r1
 800bf6e:	d2e9      	bcs.n	800bf44 <quorem+0xb0>
 800bf70:	9a01      	ldr	r2, [sp, #4]
 800bf72:	00bb      	lsls	r3, r7, #2
 800bf74:	18d3      	adds	r3, r2, r3
 800bf76:	681a      	ldr	r2, [r3, #0]
 800bf78:	2a00      	cmp	r2, #0
 800bf7a:	d013      	beq.n	800bfa4 <quorem+0x110>
 800bf7c:	9b00      	ldr	r3, [sp, #0]
 800bf7e:	3301      	adds	r3, #1
 800bf80:	9300      	str	r3, [sp, #0]
 800bf82:	9800      	ldr	r0, [sp, #0]
 800bf84:	b007      	add	sp, #28
 800bf86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bf88:	6823      	ldr	r3, [r4, #0]
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d104      	bne.n	800bf98 <quorem+0x104>
 800bf8e:	3f01      	subs	r7, #1
 800bf90:	9b01      	ldr	r3, [sp, #4]
 800bf92:	3c04      	subs	r4, #4
 800bf94:	42a3      	cmp	r3, r4
 800bf96:	d3f7      	bcc.n	800bf88 <quorem+0xf4>
 800bf98:	6137      	str	r7, [r6, #16]
 800bf9a:	e7c8      	b.n	800bf2e <quorem+0x9a>
 800bf9c:	681a      	ldr	r2, [r3, #0]
 800bf9e:	2a00      	cmp	r2, #0
 800bfa0:	d104      	bne.n	800bfac <quorem+0x118>
 800bfa2:	3f01      	subs	r7, #1
 800bfa4:	9a01      	ldr	r2, [sp, #4]
 800bfa6:	3b04      	subs	r3, #4
 800bfa8:	429a      	cmp	r2, r3
 800bfaa:	d3f7      	bcc.n	800bf9c <quorem+0x108>
 800bfac:	6137      	str	r7, [r6, #16]
 800bfae:	e7e5      	b.n	800bf7c <quorem+0xe8>

0800bfb0 <_dtoa_r>:
 800bfb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bfb2:	0014      	movs	r4, r2
 800bfb4:	001d      	movs	r5, r3
 800bfb6:	69c6      	ldr	r6, [r0, #28]
 800bfb8:	b09d      	sub	sp, #116	@ 0x74
 800bfba:	940a      	str	r4, [sp, #40]	@ 0x28
 800bfbc:	950b      	str	r5, [sp, #44]	@ 0x2c
 800bfbe:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 800bfc0:	9003      	str	r0, [sp, #12]
 800bfc2:	2e00      	cmp	r6, #0
 800bfc4:	d10f      	bne.n	800bfe6 <_dtoa_r+0x36>
 800bfc6:	2010      	movs	r0, #16
 800bfc8:	f000 fe30 	bl	800cc2c <malloc>
 800bfcc:	9b03      	ldr	r3, [sp, #12]
 800bfce:	1e02      	subs	r2, r0, #0
 800bfd0:	61d8      	str	r0, [r3, #28]
 800bfd2:	d104      	bne.n	800bfde <_dtoa_r+0x2e>
 800bfd4:	21ef      	movs	r1, #239	@ 0xef
 800bfd6:	4bc7      	ldr	r3, [pc, #796]	@ (800c2f4 <_dtoa_r+0x344>)
 800bfd8:	48c7      	ldr	r0, [pc, #796]	@ (800c2f8 <_dtoa_r+0x348>)
 800bfda:	f001 feab 	bl	800dd34 <__assert_func>
 800bfde:	6046      	str	r6, [r0, #4]
 800bfe0:	6086      	str	r6, [r0, #8]
 800bfe2:	6006      	str	r6, [r0, #0]
 800bfe4:	60c6      	str	r6, [r0, #12]
 800bfe6:	9b03      	ldr	r3, [sp, #12]
 800bfe8:	69db      	ldr	r3, [r3, #28]
 800bfea:	6819      	ldr	r1, [r3, #0]
 800bfec:	2900      	cmp	r1, #0
 800bfee:	d00b      	beq.n	800c008 <_dtoa_r+0x58>
 800bff0:	685a      	ldr	r2, [r3, #4]
 800bff2:	2301      	movs	r3, #1
 800bff4:	4093      	lsls	r3, r2
 800bff6:	604a      	str	r2, [r1, #4]
 800bff8:	608b      	str	r3, [r1, #8]
 800bffa:	9803      	ldr	r0, [sp, #12]
 800bffc:	f000 ff16 	bl	800ce2c <_Bfree>
 800c000:	2200      	movs	r2, #0
 800c002:	9b03      	ldr	r3, [sp, #12]
 800c004:	69db      	ldr	r3, [r3, #28]
 800c006:	601a      	str	r2, [r3, #0]
 800c008:	2d00      	cmp	r5, #0
 800c00a:	da1e      	bge.n	800c04a <_dtoa_r+0x9a>
 800c00c:	2301      	movs	r3, #1
 800c00e:	603b      	str	r3, [r7, #0]
 800c010:	006b      	lsls	r3, r5, #1
 800c012:	085b      	lsrs	r3, r3, #1
 800c014:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c016:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800c018:	4bb8      	ldr	r3, [pc, #736]	@ (800c2fc <_dtoa_r+0x34c>)
 800c01a:	4ab8      	ldr	r2, [pc, #736]	@ (800c2fc <_dtoa_r+0x34c>)
 800c01c:	403b      	ands	r3, r7
 800c01e:	4293      	cmp	r3, r2
 800c020:	d116      	bne.n	800c050 <_dtoa_r+0xa0>
 800c022:	4bb7      	ldr	r3, [pc, #732]	@ (800c300 <_dtoa_r+0x350>)
 800c024:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800c026:	6013      	str	r3, [r2, #0]
 800c028:	033b      	lsls	r3, r7, #12
 800c02a:	0b1b      	lsrs	r3, r3, #12
 800c02c:	4323      	orrs	r3, r4
 800c02e:	d101      	bne.n	800c034 <_dtoa_r+0x84>
 800c030:	f000 fd83 	bl	800cb3a <_dtoa_r+0xb8a>
 800c034:	4bb3      	ldr	r3, [pc, #716]	@ (800c304 <_dtoa_r+0x354>)
 800c036:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800c038:	9308      	str	r3, [sp, #32]
 800c03a:	2a00      	cmp	r2, #0
 800c03c:	d002      	beq.n	800c044 <_dtoa_r+0x94>
 800c03e:	4bb2      	ldr	r3, [pc, #712]	@ (800c308 <_dtoa_r+0x358>)
 800c040:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800c042:	6013      	str	r3, [r2, #0]
 800c044:	9808      	ldr	r0, [sp, #32]
 800c046:	b01d      	add	sp, #116	@ 0x74
 800c048:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c04a:	2300      	movs	r3, #0
 800c04c:	603b      	str	r3, [r7, #0]
 800c04e:	e7e2      	b.n	800c016 <_dtoa_r+0x66>
 800c050:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c052:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c054:	9212      	str	r2, [sp, #72]	@ 0x48
 800c056:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c058:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800c05a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800c05c:	2200      	movs	r2, #0
 800c05e:	2300      	movs	r3, #0
 800c060:	f7f4 f9f4 	bl	800044c <__aeabi_dcmpeq>
 800c064:	1e06      	subs	r6, r0, #0
 800c066:	d00b      	beq.n	800c080 <_dtoa_r+0xd0>
 800c068:	2301      	movs	r3, #1
 800c06a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800c06c:	6013      	str	r3, [r2, #0]
 800c06e:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800c070:	2b00      	cmp	r3, #0
 800c072:	d002      	beq.n	800c07a <_dtoa_r+0xca>
 800c074:	4ba5      	ldr	r3, [pc, #660]	@ (800c30c <_dtoa_r+0x35c>)
 800c076:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800c078:	6013      	str	r3, [r2, #0]
 800c07a:	4ba5      	ldr	r3, [pc, #660]	@ (800c310 <_dtoa_r+0x360>)
 800c07c:	9308      	str	r3, [sp, #32]
 800c07e:	e7e1      	b.n	800c044 <_dtoa_r+0x94>
 800c080:	ab1a      	add	r3, sp, #104	@ 0x68
 800c082:	9301      	str	r3, [sp, #4]
 800c084:	ab1b      	add	r3, sp, #108	@ 0x6c
 800c086:	9300      	str	r3, [sp, #0]
 800c088:	9803      	ldr	r0, [sp, #12]
 800c08a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800c08c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c08e:	f001 f9cd 	bl	800d42c <__d2b>
 800c092:	007a      	lsls	r2, r7, #1
 800c094:	9005      	str	r0, [sp, #20]
 800c096:	0d52      	lsrs	r2, r2, #21
 800c098:	d100      	bne.n	800c09c <_dtoa_r+0xec>
 800c09a:	e07b      	b.n	800c194 <_dtoa_r+0x1e4>
 800c09c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c09e:	9618      	str	r6, [sp, #96]	@ 0x60
 800c0a0:	0319      	lsls	r1, r3, #12
 800c0a2:	4b9c      	ldr	r3, [pc, #624]	@ (800c314 <_dtoa_r+0x364>)
 800c0a4:	0b09      	lsrs	r1, r1, #12
 800c0a6:	430b      	orrs	r3, r1
 800c0a8:	499b      	ldr	r1, [pc, #620]	@ (800c318 <_dtoa_r+0x368>)
 800c0aa:	1857      	adds	r7, r2, r1
 800c0ac:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800c0ae:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800c0b0:	0019      	movs	r1, r3
 800c0b2:	2200      	movs	r2, #0
 800c0b4:	4b99      	ldr	r3, [pc, #612]	@ (800c31c <_dtoa_r+0x36c>)
 800c0b6:	f7f6 fcd1 	bl	8002a5c <__aeabi_dsub>
 800c0ba:	4a99      	ldr	r2, [pc, #612]	@ (800c320 <_dtoa_r+0x370>)
 800c0bc:	4b99      	ldr	r3, [pc, #612]	@ (800c324 <_dtoa_r+0x374>)
 800c0be:	f7f6 fa05 	bl	80024cc <__aeabi_dmul>
 800c0c2:	4a99      	ldr	r2, [pc, #612]	@ (800c328 <_dtoa_r+0x378>)
 800c0c4:	4b99      	ldr	r3, [pc, #612]	@ (800c32c <_dtoa_r+0x37c>)
 800c0c6:	f7f5 fa59 	bl	800157c <__aeabi_dadd>
 800c0ca:	0004      	movs	r4, r0
 800c0cc:	0038      	movs	r0, r7
 800c0ce:	000d      	movs	r5, r1
 800c0d0:	f7f7 f8be 	bl	8003250 <__aeabi_i2d>
 800c0d4:	4a96      	ldr	r2, [pc, #600]	@ (800c330 <_dtoa_r+0x380>)
 800c0d6:	4b97      	ldr	r3, [pc, #604]	@ (800c334 <_dtoa_r+0x384>)
 800c0d8:	f7f6 f9f8 	bl	80024cc <__aeabi_dmul>
 800c0dc:	0002      	movs	r2, r0
 800c0de:	000b      	movs	r3, r1
 800c0e0:	0020      	movs	r0, r4
 800c0e2:	0029      	movs	r1, r5
 800c0e4:	f7f5 fa4a 	bl	800157c <__aeabi_dadd>
 800c0e8:	0004      	movs	r4, r0
 800c0ea:	000d      	movs	r5, r1
 800c0ec:	f7f7 f874 	bl	80031d8 <__aeabi_d2iz>
 800c0f0:	2200      	movs	r2, #0
 800c0f2:	9004      	str	r0, [sp, #16]
 800c0f4:	2300      	movs	r3, #0
 800c0f6:	0020      	movs	r0, r4
 800c0f8:	0029      	movs	r1, r5
 800c0fa:	f7f4 f9ad 	bl	8000458 <__aeabi_dcmplt>
 800c0fe:	2800      	cmp	r0, #0
 800c100:	d00b      	beq.n	800c11a <_dtoa_r+0x16a>
 800c102:	9804      	ldr	r0, [sp, #16]
 800c104:	f7f7 f8a4 	bl	8003250 <__aeabi_i2d>
 800c108:	002b      	movs	r3, r5
 800c10a:	0022      	movs	r2, r4
 800c10c:	f7f4 f99e 	bl	800044c <__aeabi_dcmpeq>
 800c110:	4243      	negs	r3, r0
 800c112:	4158      	adcs	r0, r3
 800c114:	9b04      	ldr	r3, [sp, #16]
 800c116:	1a1b      	subs	r3, r3, r0
 800c118:	9304      	str	r3, [sp, #16]
 800c11a:	2301      	movs	r3, #1
 800c11c:	9315      	str	r3, [sp, #84]	@ 0x54
 800c11e:	9b04      	ldr	r3, [sp, #16]
 800c120:	2b16      	cmp	r3, #22
 800c122:	d810      	bhi.n	800c146 <_dtoa_r+0x196>
 800c124:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800c126:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800c128:	9a04      	ldr	r2, [sp, #16]
 800c12a:	4b83      	ldr	r3, [pc, #524]	@ (800c338 <_dtoa_r+0x388>)
 800c12c:	00d2      	lsls	r2, r2, #3
 800c12e:	189b      	adds	r3, r3, r2
 800c130:	681a      	ldr	r2, [r3, #0]
 800c132:	685b      	ldr	r3, [r3, #4]
 800c134:	f7f4 f990 	bl	8000458 <__aeabi_dcmplt>
 800c138:	2800      	cmp	r0, #0
 800c13a:	d047      	beq.n	800c1cc <_dtoa_r+0x21c>
 800c13c:	9b04      	ldr	r3, [sp, #16]
 800c13e:	3b01      	subs	r3, #1
 800c140:	9304      	str	r3, [sp, #16]
 800c142:	2300      	movs	r3, #0
 800c144:	9315      	str	r3, [sp, #84]	@ 0x54
 800c146:	2200      	movs	r2, #0
 800c148:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800c14a:	9206      	str	r2, [sp, #24]
 800c14c:	1bdb      	subs	r3, r3, r7
 800c14e:	1e5a      	subs	r2, r3, #1
 800c150:	d53e      	bpl.n	800c1d0 <_dtoa_r+0x220>
 800c152:	2201      	movs	r2, #1
 800c154:	1ad3      	subs	r3, r2, r3
 800c156:	9306      	str	r3, [sp, #24]
 800c158:	2300      	movs	r3, #0
 800c15a:	930d      	str	r3, [sp, #52]	@ 0x34
 800c15c:	9b04      	ldr	r3, [sp, #16]
 800c15e:	2b00      	cmp	r3, #0
 800c160:	db38      	blt.n	800c1d4 <_dtoa_r+0x224>
 800c162:	9a04      	ldr	r2, [sp, #16]
 800c164:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c166:	4694      	mov	ip, r2
 800c168:	4463      	add	r3, ip
 800c16a:	930d      	str	r3, [sp, #52]	@ 0x34
 800c16c:	2300      	movs	r3, #0
 800c16e:	9214      	str	r2, [sp, #80]	@ 0x50
 800c170:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c172:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800c174:	2401      	movs	r4, #1
 800c176:	2b09      	cmp	r3, #9
 800c178:	d867      	bhi.n	800c24a <_dtoa_r+0x29a>
 800c17a:	2b05      	cmp	r3, #5
 800c17c:	dd02      	ble.n	800c184 <_dtoa_r+0x1d4>
 800c17e:	2400      	movs	r4, #0
 800c180:	3b04      	subs	r3, #4
 800c182:	9322      	str	r3, [sp, #136]	@ 0x88
 800c184:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800c186:	1e98      	subs	r0, r3, #2
 800c188:	2803      	cmp	r0, #3
 800c18a:	d867      	bhi.n	800c25c <_dtoa_r+0x2ac>
 800c18c:	f7f3 ffc4 	bl	8000118 <__gnu_thumb1_case_uqi>
 800c190:	5b383a2b 	.word	0x5b383a2b
 800c194:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800c196:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 800c198:	18f6      	adds	r6, r6, r3
 800c19a:	4b68      	ldr	r3, [pc, #416]	@ (800c33c <_dtoa_r+0x38c>)
 800c19c:	18f2      	adds	r2, r6, r3
 800c19e:	2a20      	cmp	r2, #32
 800c1a0:	dd0f      	ble.n	800c1c2 <_dtoa_r+0x212>
 800c1a2:	2340      	movs	r3, #64	@ 0x40
 800c1a4:	1a9b      	subs	r3, r3, r2
 800c1a6:	409f      	lsls	r7, r3
 800c1a8:	4b65      	ldr	r3, [pc, #404]	@ (800c340 <_dtoa_r+0x390>)
 800c1aa:	0038      	movs	r0, r7
 800c1ac:	18f3      	adds	r3, r6, r3
 800c1ae:	40dc      	lsrs	r4, r3
 800c1b0:	4320      	orrs	r0, r4
 800c1b2:	f7f7 f87b 	bl	80032ac <__aeabi_ui2d>
 800c1b6:	2201      	movs	r2, #1
 800c1b8:	4b62      	ldr	r3, [pc, #392]	@ (800c344 <_dtoa_r+0x394>)
 800c1ba:	1e77      	subs	r7, r6, #1
 800c1bc:	18cb      	adds	r3, r1, r3
 800c1be:	9218      	str	r2, [sp, #96]	@ 0x60
 800c1c0:	e776      	b.n	800c0b0 <_dtoa_r+0x100>
 800c1c2:	2320      	movs	r3, #32
 800c1c4:	0020      	movs	r0, r4
 800c1c6:	1a9b      	subs	r3, r3, r2
 800c1c8:	4098      	lsls	r0, r3
 800c1ca:	e7f2      	b.n	800c1b2 <_dtoa_r+0x202>
 800c1cc:	9015      	str	r0, [sp, #84]	@ 0x54
 800c1ce:	e7ba      	b.n	800c146 <_dtoa_r+0x196>
 800c1d0:	920d      	str	r2, [sp, #52]	@ 0x34
 800c1d2:	e7c3      	b.n	800c15c <_dtoa_r+0x1ac>
 800c1d4:	9b06      	ldr	r3, [sp, #24]
 800c1d6:	9a04      	ldr	r2, [sp, #16]
 800c1d8:	1a9b      	subs	r3, r3, r2
 800c1da:	9306      	str	r3, [sp, #24]
 800c1dc:	4253      	negs	r3, r2
 800c1de:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c1e0:	2300      	movs	r3, #0
 800c1e2:	9314      	str	r3, [sp, #80]	@ 0x50
 800c1e4:	e7c5      	b.n	800c172 <_dtoa_r+0x1c2>
 800c1e6:	2300      	movs	r3, #0
 800c1e8:	9310      	str	r3, [sp, #64]	@ 0x40
 800c1ea:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c1ec:	930e      	str	r3, [sp, #56]	@ 0x38
 800c1ee:	9309      	str	r3, [sp, #36]	@ 0x24
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	dc13      	bgt.n	800c21c <_dtoa_r+0x26c>
 800c1f4:	2301      	movs	r3, #1
 800c1f6:	001a      	movs	r2, r3
 800c1f8:	930e      	str	r3, [sp, #56]	@ 0x38
 800c1fa:	9309      	str	r3, [sp, #36]	@ 0x24
 800c1fc:	9223      	str	r2, [sp, #140]	@ 0x8c
 800c1fe:	e00d      	b.n	800c21c <_dtoa_r+0x26c>
 800c200:	2301      	movs	r3, #1
 800c202:	e7f1      	b.n	800c1e8 <_dtoa_r+0x238>
 800c204:	2300      	movs	r3, #0
 800c206:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800c208:	9310      	str	r3, [sp, #64]	@ 0x40
 800c20a:	4694      	mov	ip, r2
 800c20c:	9b04      	ldr	r3, [sp, #16]
 800c20e:	4463      	add	r3, ip
 800c210:	930e      	str	r3, [sp, #56]	@ 0x38
 800c212:	3301      	adds	r3, #1
 800c214:	9309      	str	r3, [sp, #36]	@ 0x24
 800c216:	2b00      	cmp	r3, #0
 800c218:	dc00      	bgt.n	800c21c <_dtoa_r+0x26c>
 800c21a:	2301      	movs	r3, #1
 800c21c:	9a03      	ldr	r2, [sp, #12]
 800c21e:	2100      	movs	r1, #0
 800c220:	69d0      	ldr	r0, [r2, #28]
 800c222:	2204      	movs	r2, #4
 800c224:	0015      	movs	r5, r2
 800c226:	3514      	adds	r5, #20
 800c228:	429d      	cmp	r5, r3
 800c22a:	d91b      	bls.n	800c264 <_dtoa_r+0x2b4>
 800c22c:	6041      	str	r1, [r0, #4]
 800c22e:	9803      	ldr	r0, [sp, #12]
 800c230:	f000 fdb8 	bl	800cda4 <_Balloc>
 800c234:	9008      	str	r0, [sp, #32]
 800c236:	2800      	cmp	r0, #0
 800c238:	d117      	bne.n	800c26a <_dtoa_r+0x2ba>
 800c23a:	21b0      	movs	r1, #176	@ 0xb0
 800c23c:	4b42      	ldr	r3, [pc, #264]	@ (800c348 <_dtoa_r+0x398>)
 800c23e:	482e      	ldr	r0, [pc, #184]	@ (800c2f8 <_dtoa_r+0x348>)
 800c240:	9a08      	ldr	r2, [sp, #32]
 800c242:	31ff      	adds	r1, #255	@ 0xff
 800c244:	e6c9      	b.n	800bfda <_dtoa_r+0x2a>
 800c246:	2301      	movs	r3, #1
 800c248:	e7dd      	b.n	800c206 <_dtoa_r+0x256>
 800c24a:	2300      	movs	r3, #0
 800c24c:	9410      	str	r4, [sp, #64]	@ 0x40
 800c24e:	9322      	str	r3, [sp, #136]	@ 0x88
 800c250:	3b01      	subs	r3, #1
 800c252:	930e      	str	r3, [sp, #56]	@ 0x38
 800c254:	9309      	str	r3, [sp, #36]	@ 0x24
 800c256:	2200      	movs	r2, #0
 800c258:	3313      	adds	r3, #19
 800c25a:	e7cf      	b.n	800c1fc <_dtoa_r+0x24c>
 800c25c:	2301      	movs	r3, #1
 800c25e:	9310      	str	r3, [sp, #64]	@ 0x40
 800c260:	3b02      	subs	r3, #2
 800c262:	e7f6      	b.n	800c252 <_dtoa_r+0x2a2>
 800c264:	3101      	adds	r1, #1
 800c266:	0052      	lsls	r2, r2, #1
 800c268:	e7dc      	b.n	800c224 <_dtoa_r+0x274>
 800c26a:	9b03      	ldr	r3, [sp, #12]
 800c26c:	9a08      	ldr	r2, [sp, #32]
 800c26e:	69db      	ldr	r3, [r3, #28]
 800c270:	601a      	str	r2, [r3, #0]
 800c272:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c274:	2b0e      	cmp	r3, #14
 800c276:	d900      	bls.n	800c27a <_dtoa_r+0x2ca>
 800c278:	e0d9      	b.n	800c42e <_dtoa_r+0x47e>
 800c27a:	2c00      	cmp	r4, #0
 800c27c:	d100      	bne.n	800c280 <_dtoa_r+0x2d0>
 800c27e:	e0d6      	b.n	800c42e <_dtoa_r+0x47e>
 800c280:	9b04      	ldr	r3, [sp, #16]
 800c282:	2b00      	cmp	r3, #0
 800c284:	dd64      	ble.n	800c350 <_dtoa_r+0x3a0>
 800c286:	210f      	movs	r1, #15
 800c288:	9a04      	ldr	r2, [sp, #16]
 800c28a:	4b2b      	ldr	r3, [pc, #172]	@ (800c338 <_dtoa_r+0x388>)
 800c28c:	400a      	ands	r2, r1
 800c28e:	00d2      	lsls	r2, r2, #3
 800c290:	189b      	adds	r3, r3, r2
 800c292:	681e      	ldr	r6, [r3, #0]
 800c294:	685f      	ldr	r7, [r3, #4]
 800c296:	9b04      	ldr	r3, [sp, #16]
 800c298:	2402      	movs	r4, #2
 800c29a:	111d      	asrs	r5, r3, #4
 800c29c:	05db      	lsls	r3, r3, #23
 800c29e:	d50a      	bpl.n	800c2b6 <_dtoa_r+0x306>
 800c2a0:	4b2a      	ldr	r3, [pc, #168]	@ (800c34c <_dtoa_r+0x39c>)
 800c2a2:	400d      	ands	r5, r1
 800c2a4:	6a1a      	ldr	r2, [r3, #32]
 800c2a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c2a8:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800c2aa:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800c2ac:	f7f5 fcca 	bl	8001c44 <__aeabi_ddiv>
 800c2b0:	900a      	str	r0, [sp, #40]	@ 0x28
 800c2b2:	910b      	str	r1, [sp, #44]	@ 0x2c
 800c2b4:	3401      	adds	r4, #1
 800c2b6:	4b25      	ldr	r3, [pc, #148]	@ (800c34c <_dtoa_r+0x39c>)
 800c2b8:	930c      	str	r3, [sp, #48]	@ 0x30
 800c2ba:	2d00      	cmp	r5, #0
 800c2bc:	d108      	bne.n	800c2d0 <_dtoa_r+0x320>
 800c2be:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800c2c0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c2c2:	0032      	movs	r2, r6
 800c2c4:	003b      	movs	r3, r7
 800c2c6:	f7f5 fcbd 	bl	8001c44 <__aeabi_ddiv>
 800c2ca:	900a      	str	r0, [sp, #40]	@ 0x28
 800c2cc:	910b      	str	r1, [sp, #44]	@ 0x2c
 800c2ce:	e05a      	b.n	800c386 <_dtoa_r+0x3d6>
 800c2d0:	2301      	movs	r3, #1
 800c2d2:	421d      	tst	r5, r3
 800c2d4:	d009      	beq.n	800c2ea <_dtoa_r+0x33a>
 800c2d6:	18e4      	adds	r4, r4, r3
 800c2d8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c2da:	0030      	movs	r0, r6
 800c2dc:	681a      	ldr	r2, [r3, #0]
 800c2de:	685b      	ldr	r3, [r3, #4]
 800c2e0:	0039      	movs	r1, r7
 800c2e2:	f7f6 f8f3 	bl	80024cc <__aeabi_dmul>
 800c2e6:	0006      	movs	r6, r0
 800c2e8:	000f      	movs	r7, r1
 800c2ea:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c2ec:	106d      	asrs	r5, r5, #1
 800c2ee:	3308      	adds	r3, #8
 800c2f0:	e7e2      	b.n	800c2b8 <_dtoa_r+0x308>
 800c2f2:	46c0      	nop			@ (mov r8, r8)
 800c2f4:	0800ea69 	.word	0x0800ea69
 800c2f8:	0800ea80 	.word	0x0800ea80
 800c2fc:	7ff00000 	.word	0x7ff00000
 800c300:	0000270f 	.word	0x0000270f
 800c304:	0800ea65 	.word	0x0800ea65
 800c308:	0800ea68 	.word	0x0800ea68
 800c30c:	0800ea39 	.word	0x0800ea39
 800c310:	0800ea38 	.word	0x0800ea38
 800c314:	3ff00000 	.word	0x3ff00000
 800c318:	fffffc01 	.word	0xfffffc01
 800c31c:	3ff80000 	.word	0x3ff80000
 800c320:	636f4361 	.word	0x636f4361
 800c324:	3fd287a7 	.word	0x3fd287a7
 800c328:	8b60c8b3 	.word	0x8b60c8b3
 800c32c:	3fc68a28 	.word	0x3fc68a28
 800c330:	509f79fb 	.word	0x509f79fb
 800c334:	3fd34413 	.word	0x3fd34413
 800c338:	0800eb78 	.word	0x0800eb78
 800c33c:	00000432 	.word	0x00000432
 800c340:	00000412 	.word	0x00000412
 800c344:	fe100000 	.word	0xfe100000
 800c348:	0800ead8 	.word	0x0800ead8
 800c34c:	0800eb50 	.word	0x0800eb50
 800c350:	9b04      	ldr	r3, [sp, #16]
 800c352:	2402      	movs	r4, #2
 800c354:	2b00      	cmp	r3, #0
 800c356:	d016      	beq.n	800c386 <_dtoa_r+0x3d6>
 800c358:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800c35a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800c35c:	220f      	movs	r2, #15
 800c35e:	425d      	negs	r5, r3
 800c360:	402a      	ands	r2, r5
 800c362:	4bd7      	ldr	r3, [pc, #860]	@ (800c6c0 <_dtoa_r+0x710>)
 800c364:	00d2      	lsls	r2, r2, #3
 800c366:	189b      	adds	r3, r3, r2
 800c368:	681a      	ldr	r2, [r3, #0]
 800c36a:	685b      	ldr	r3, [r3, #4]
 800c36c:	f7f6 f8ae 	bl	80024cc <__aeabi_dmul>
 800c370:	2701      	movs	r7, #1
 800c372:	2300      	movs	r3, #0
 800c374:	900a      	str	r0, [sp, #40]	@ 0x28
 800c376:	910b      	str	r1, [sp, #44]	@ 0x2c
 800c378:	4ed2      	ldr	r6, [pc, #840]	@ (800c6c4 <_dtoa_r+0x714>)
 800c37a:	112d      	asrs	r5, r5, #4
 800c37c:	2d00      	cmp	r5, #0
 800c37e:	d000      	beq.n	800c382 <_dtoa_r+0x3d2>
 800c380:	e0ba      	b.n	800c4f8 <_dtoa_r+0x548>
 800c382:	2b00      	cmp	r3, #0
 800c384:	d1a1      	bne.n	800c2ca <_dtoa_r+0x31a>
 800c386:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800c388:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800c38a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d100      	bne.n	800c392 <_dtoa_r+0x3e2>
 800c390:	e0bd      	b.n	800c50e <_dtoa_r+0x55e>
 800c392:	2200      	movs	r2, #0
 800c394:	0030      	movs	r0, r6
 800c396:	0039      	movs	r1, r7
 800c398:	4bcb      	ldr	r3, [pc, #812]	@ (800c6c8 <_dtoa_r+0x718>)
 800c39a:	f7f4 f85d 	bl	8000458 <__aeabi_dcmplt>
 800c39e:	2800      	cmp	r0, #0
 800c3a0:	d100      	bne.n	800c3a4 <_dtoa_r+0x3f4>
 800c3a2:	e0b4      	b.n	800c50e <_dtoa_r+0x55e>
 800c3a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d100      	bne.n	800c3ac <_dtoa_r+0x3fc>
 800c3aa:	e0b0      	b.n	800c50e <_dtoa_r+0x55e>
 800c3ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	dd39      	ble.n	800c426 <_dtoa_r+0x476>
 800c3b2:	9b04      	ldr	r3, [sp, #16]
 800c3b4:	2200      	movs	r2, #0
 800c3b6:	3b01      	subs	r3, #1
 800c3b8:	930c      	str	r3, [sp, #48]	@ 0x30
 800c3ba:	0030      	movs	r0, r6
 800c3bc:	4bc3      	ldr	r3, [pc, #780]	@ (800c6cc <_dtoa_r+0x71c>)
 800c3be:	0039      	movs	r1, r7
 800c3c0:	f7f6 f884 	bl	80024cc <__aeabi_dmul>
 800c3c4:	900a      	str	r0, [sp, #40]	@ 0x28
 800c3c6:	910b      	str	r1, [sp, #44]	@ 0x2c
 800c3c8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c3ca:	3401      	adds	r4, #1
 800c3cc:	0020      	movs	r0, r4
 800c3ce:	9311      	str	r3, [sp, #68]	@ 0x44
 800c3d0:	f7f6 ff3e 	bl	8003250 <__aeabi_i2d>
 800c3d4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c3d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c3d8:	f7f6 f878 	bl	80024cc <__aeabi_dmul>
 800c3dc:	4bbc      	ldr	r3, [pc, #752]	@ (800c6d0 <_dtoa_r+0x720>)
 800c3de:	2200      	movs	r2, #0
 800c3e0:	f7f5 f8cc 	bl	800157c <__aeabi_dadd>
 800c3e4:	4bbb      	ldr	r3, [pc, #748]	@ (800c6d4 <_dtoa_r+0x724>)
 800c3e6:	0006      	movs	r6, r0
 800c3e8:	18cf      	adds	r7, r1, r3
 800c3ea:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d000      	beq.n	800c3f2 <_dtoa_r+0x442>
 800c3f0:	e091      	b.n	800c516 <_dtoa_r+0x566>
 800c3f2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800c3f4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c3f6:	2200      	movs	r2, #0
 800c3f8:	4bb7      	ldr	r3, [pc, #732]	@ (800c6d8 <_dtoa_r+0x728>)
 800c3fa:	f7f6 fb2f 	bl	8002a5c <__aeabi_dsub>
 800c3fe:	0032      	movs	r2, r6
 800c400:	003b      	movs	r3, r7
 800c402:	0004      	movs	r4, r0
 800c404:	000d      	movs	r5, r1
 800c406:	f7f4 f83b 	bl	8000480 <__aeabi_dcmpgt>
 800c40a:	2800      	cmp	r0, #0
 800c40c:	d000      	beq.n	800c410 <_dtoa_r+0x460>
 800c40e:	e29d      	b.n	800c94c <_dtoa_r+0x99c>
 800c410:	2180      	movs	r1, #128	@ 0x80
 800c412:	0609      	lsls	r1, r1, #24
 800c414:	187b      	adds	r3, r7, r1
 800c416:	0032      	movs	r2, r6
 800c418:	0020      	movs	r0, r4
 800c41a:	0029      	movs	r1, r5
 800c41c:	f7f4 f81c 	bl	8000458 <__aeabi_dcmplt>
 800c420:	2800      	cmp	r0, #0
 800c422:	d000      	beq.n	800c426 <_dtoa_r+0x476>
 800c424:	e130      	b.n	800c688 <_dtoa_r+0x6d8>
 800c426:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c428:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 800c42a:	930a      	str	r3, [sp, #40]	@ 0x28
 800c42c:	940b      	str	r4, [sp, #44]	@ 0x2c
 800c42e:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800c430:	2b00      	cmp	r3, #0
 800c432:	da00      	bge.n	800c436 <_dtoa_r+0x486>
 800c434:	e177      	b.n	800c726 <_dtoa_r+0x776>
 800c436:	9a04      	ldr	r2, [sp, #16]
 800c438:	2a0e      	cmp	r2, #14
 800c43a:	dd00      	ble.n	800c43e <_dtoa_r+0x48e>
 800c43c:	e173      	b.n	800c726 <_dtoa_r+0x776>
 800c43e:	4ba0      	ldr	r3, [pc, #640]	@ (800c6c0 <_dtoa_r+0x710>)
 800c440:	00d2      	lsls	r2, r2, #3
 800c442:	189b      	adds	r3, r3, r2
 800c444:	685c      	ldr	r4, [r3, #4]
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	9306      	str	r3, [sp, #24]
 800c44a:	9407      	str	r4, [sp, #28]
 800c44c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c44e:	2b00      	cmp	r3, #0
 800c450:	da03      	bge.n	800c45a <_dtoa_r+0x4aa>
 800c452:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c454:	2b00      	cmp	r3, #0
 800c456:	dc00      	bgt.n	800c45a <_dtoa_r+0x4aa>
 800c458:	e106      	b.n	800c668 <_dtoa_r+0x6b8>
 800c45a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800c45c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800c45e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c460:	9d08      	ldr	r5, [sp, #32]
 800c462:	3b01      	subs	r3, #1
 800c464:	195b      	adds	r3, r3, r5
 800c466:	930a      	str	r3, [sp, #40]	@ 0x28
 800c468:	9a06      	ldr	r2, [sp, #24]
 800c46a:	9b07      	ldr	r3, [sp, #28]
 800c46c:	0030      	movs	r0, r6
 800c46e:	0039      	movs	r1, r7
 800c470:	f7f5 fbe8 	bl	8001c44 <__aeabi_ddiv>
 800c474:	f7f6 feb0 	bl	80031d8 <__aeabi_d2iz>
 800c478:	9009      	str	r0, [sp, #36]	@ 0x24
 800c47a:	f7f6 fee9 	bl	8003250 <__aeabi_i2d>
 800c47e:	9a06      	ldr	r2, [sp, #24]
 800c480:	9b07      	ldr	r3, [sp, #28]
 800c482:	f7f6 f823 	bl	80024cc <__aeabi_dmul>
 800c486:	0002      	movs	r2, r0
 800c488:	000b      	movs	r3, r1
 800c48a:	0030      	movs	r0, r6
 800c48c:	0039      	movs	r1, r7
 800c48e:	f7f6 fae5 	bl	8002a5c <__aeabi_dsub>
 800c492:	002b      	movs	r3, r5
 800c494:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c496:	3501      	adds	r5, #1
 800c498:	3230      	adds	r2, #48	@ 0x30
 800c49a:	701a      	strb	r2, [r3, #0]
 800c49c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c49e:	002c      	movs	r4, r5
 800c4a0:	429a      	cmp	r2, r3
 800c4a2:	d000      	beq.n	800c4a6 <_dtoa_r+0x4f6>
 800c4a4:	e131      	b.n	800c70a <_dtoa_r+0x75a>
 800c4a6:	0002      	movs	r2, r0
 800c4a8:	000b      	movs	r3, r1
 800c4aa:	f7f5 f867 	bl	800157c <__aeabi_dadd>
 800c4ae:	9a06      	ldr	r2, [sp, #24]
 800c4b0:	9b07      	ldr	r3, [sp, #28]
 800c4b2:	0006      	movs	r6, r0
 800c4b4:	000f      	movs	r7, r1
 800c4b6:	f7f3 ffe3 	bl	8000480 <__aeabi_dcmpgt>
 800c4ba:	2800      	cmp	r0, #0
 800c4bc:	d000      	beq.n	800c4c0 <_dtoa_r+0x510>
 800c4be:	e10f      	b.n	800c6e0 <_dtoa_r+0x730>
 800c4c0:	9a06      	ldr	r2, [sp, #24]
 800c4c2:	9b07      	ldr	r3, [sp, #28]
 800c4c4:	0030      	movs	r0, r6
 800c4c6:	0039      	movs	r1, r7
 800c4c8:	f7f3 ffc0 	bl	800044c <__aeabi_dcmpeq>
 800c4cc:	2800      	cmp	r0, #0
 800c4ce:	d003      	beq.n	800c4d8 <_dtoa_r+0x528>
 800c4d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c4d2:	07dd      	lsls	r5, r3, #31
 800c4d4:	d500      	bpl.n	800c4d8 <_dtoa_r+0x528>
 800c4d6:	e103      	b.n	800c6e0 <_dtoa_r+0x730>
 800c4d8:	9905      	ldr	r1, [sp, #20]
 800c4da:	9803      	ldr	r0, [sp, #12]
 800c4dc:	f000 fca6 	bl	800ce2c <_Bfree>
 800c4e0:	2300      	movs	r3, #0
 800c4e2:	7023      	strb	r3, [r4, #0]
 800c4e4:	9b04      	ldr	r3, [sp, #16]
 800c4e6:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800c4e8:	3301      	adds	r3, #1
 800c4ea:	6013      	str	r3, [r2, #0]
 800c4ec:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d100      	bne.n	800c4f4 <_dtoa_r+0x544>
 800c4f2:	e5a7      	b.n	800c044 <_dtoa_r+0x94>
 800c4f4:	601c      	str	r4, [r3, #0]
 800c4f6:	e5a5      	b.n	800c044 <_dtoa_r+0x94>
 800c4f8:	423d      	tst	r5, r7
 800c4fa:	d005      	beq.n	800c508 <_dtoa_r+0x558>
 800c4fc:	6832      	ldr	r2, [r6, #0]
 800c4fe:	6873      	ldr	r3, [r6, #4]
 800c500:	f7f5 ffe4 	bl	80024cc <__aeabi_dmul>
 800c504:	003b      	movs	r3, r7
 800c506:	3401      	adds	r4, #1
 800c508:	106d      	asrs	r5, r5, #1
 800c50a:	3608      	adds	r6, #8
 800c50c:	e736      	b.n	800c37c <_dtoa_r+0x3cc>
 800c50e:	9b04      	ldr	r3, [sp, #16]
 800c510:	930c      	str	r3, [sp, #48]	@ 0x30
 800c512:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c514:	e75a      	b.n	800c3cc <_dtoa_r+0x41c>
 800c516:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800c518:	4b69      	ldr	r3, [pc, #420]	@ (800c6c0 <_dtoa_r+0x710>)
 800c51a:	3a01      	subs	r2, #1
 800c51c:	00d2      	lsls	r2, r2, #3
 800c51e:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800c520:	189b      	adds	r3, r3, r2
 800c522:	681a      	ldr	r2, [r3, #0]
 800c524:	685b      	ldr	r3, [r3, #4]
 800c526:	2900      	cmp	r1, #0
 800c528:	d04c      	beq.n	800c5c4 <_dtoa_r+0x614>
 800c52a:	2000      	movs	r0, #0
 800c52c:	496b      	ldr	r1, [pc, #428]	@ (800c6dc <_dtoa_r+0x72c>)
 800c52e:	f7f5 fb89 	bl	8001c44 <__aeabi_ddiv>
 800c532:	0032      	movs	r2, r6
 800c534:	003b      	movs	r3, r7
 800c536:	f7f6 fa91 	bl	8002a5c <__aeabi_dsub>
 800c53a:	9a08      	ldr	r2, [sp, #32]
 800c53c:	0006      	movs	r6, r0
 800c53e:	4694      	mov	ip, r2
 800c540:	000f      	movs	r7, r1
 800c542:	9b08      	ldr	r3, [sp, #32]
 800c544:	9316      	str	r3, [sp, #88]	@ 0x58
 800c546:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c548:	4463      	add	r3, ip
 800c54a:	9311      	str	r3, [sp, #68]	@ 0x44
 800c54c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800c54e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c550:	f7f6 fe42 	bl	80031d8 <__aeabi_d2iz>
 800c554:	0005      	movs	r5, r0
 800c556:	f7f6 fe7b 	bl	8003250 <__aeabi_i2d>
 800c55a:	0002      	movs	r2, r0
 800c55c:	000b      	movs	r3, r1
 800c55e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800c560:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c562:	f7f6 fa7b 	bl	8002a5c <__aeabi_dsub>
 800c566:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c568:	3530      	adds	r5, #48	@ 0x30
 800c56a:	1c5c      	adds	r4, r3, #1
 800c56c:	701d      	strb	r5, [r3, #0]
 800c56e:	0032      	movs	r2, r6
 800c570:	003b      	movs	r3, r7
 800c572:	900a      	str	r0, [sp, #40]	@ 0x28
 800c574:	910b      	str	r1, [sp, #44]	@ 0x2c
 800c576:	f7f3 ff6f 	bl	8000458 <__aeabi_dcmplt>
 800c57a:	2800      	cmp	r0, #0
 800c57c:	d16a      	bne.n	800c654 <_dtoa_r+0x6a4>
 800c57e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c580:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c582:	2000      	movs	r0, #0
 800c584:	4950      	ldr	r1, [pc, #320]	@ (800c6c8 <_dtoa_r+0x718>)
 800c586:	f7f6 fa69 	bl	8002a5c <__aeabi_dsub>
 800c58a:	0032      	movs	r2, r6
 800c58c:	003b      	movs	r3, r7
 800c58e:	f7f3 ff63 	bl	8000458 <__aeabi_dcmplt>
 800c592:	2800      	cmp	r0, #0
 800c594:	d000      	beq.n	800c598 <_dtoa_r+0x5e8>
 800c596:	e0a5      	b.n	800c6e4 <_dtoa_r+0x734>
 800c598:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c59a:	42a3      	cmp	r3, r4
 800c59c:	d100      	bne.n	800c5a0 <_dtoa_r+0x5f0>
 800c59e:	e742      	b.n	800c426 <_dtoa_r+0x476>
 800c5a0:	2200      	movs	r2, #0
 800c5a2:	0030      	movs	r0, r6
 800c5a4:	0039      	movs	r1, r7
 800c5a6:	4b49      	ldr	r3, [pc, #292]	@ (800c6cc <_dtoa_r+0x71c>)
 800c5a8:	f7f5 ff90 	bl	80024cc <__aeabi_dmul>
 800c5ac:	2200      	movs	r2, #0
 800c5ae:	0006      	movs	r6, r0
 800c5b0:	000f      	movs	r7, r1
 800c5b2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800c5b4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c5b6:	4b45      	ldr	r3, [pc, #276]	@ (800c6cc <_dtoa_r+0x71c>)
 800c5b8:	f7f5 ff88 	bl	80024cc <__aeabi_dmul>
 800c5bc:	9416      	str	r4, [sp, #88]	@ 0x58
 800c5be:	900a      	str	r0, [sp, #40]	@ 0x28
 800c5c0:	910b      	str	r1, [sp, #44]	@ 0x2c
 800c5c2:	e7c3      	b.n	800c54c <_dtoa_r+0x59c>
 800c5c4:	0030      	movs	r0, r6
 800c5c6:	0039      	movs	r1, r7
 800c5c8:	f7f5 ff80 	bl	80024cc <__aeabi_dmul>
 800c5cc:	9d08      	ldr	r5, [sp, #32]
 800c5ce:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800c5d0:	002b      	movs	r3, r5
 800c5d2:	4694      	mov	ip, r2
 800c5d4:	9016      	str	r0, [sp, #88]	@ 0x58
 800c5d6:	9117      	str	r1, [sp, #92]	@ 0x5c
 800c5d8:	4463      	add	r3, ip
 800c5da:	9319      	str	r3, [sp, #100]	@ 0x64
 800c5dc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800c5de:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c5e0:	f7f6 fdfa 	bl	80031d8 <__aeabi_d2iz>
 800c5e4:	0004      	movs	r4, r0
 800c5e6:	f7f6 fe33 	bl	8003250 <__aeabi_i2d>
 800c5ea:	000b      	movs	r3, r1
 800c5ec:	0002      	movs	r2, r0
 800c5ee:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800c5f0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c5f2:	f7f6 fa33 	bl	8002a5c <__aeabi_dsub>
 800c5f6:	3430      	adds	r4, #48	@ 0x30
 800c5f8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c5fa:	702c      	strb	r4, [r5, #0]
 800c5fc:	3501      	adds	r5, #1
 800c5fe:	0006      	movs	r6, r0
 800c600:	000f      	movs	r7, r1
 800c602:	42ab      	cmp	r3, r5
 800c604:	d129      	bne.n	800c65a <_dtoa_r+0x6aa>
 800c606:	9816      	ldr	r0, [sp, #88]	@ 0x58
 800c608:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 800c60a:	9b08      	ldr	r3, [sp, #32]
 800c60c:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 800c60e:	469c      	mov	ip, r3
 800c610:	2200      	movs	r2, #0
 800c612:	4b32      	ldr	r3, [pc, #200]	@ (800c6dc <_dtoa_r+0x72c>)
 800c614:	4464      	add	r4, ip
 800c616:	f7f4 ffb1 	bl	800157c <__aeabi_dadd>
 800c61a:	0002      	movs	r2, r0
 800c61c:	000b      	movs	r3, r1
 800c61e:	0030      	movs	r0, r6
 800c620:	0039      	movs	r1, r7
 800c622:	f7f3 ff2d 	bl	8000480 <__aeabi_dcmpgt>
 800c626:	2800      	cmp	r0, #0
 800c628:	d15c      	bne.n	800c6e4 <_dtoa_r+0x734>
 800c62a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800c62c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c62e:	2000      	movs	r0, #0
 800c630:	492a      	ldr	r1, [pc, #168]	@ (800c6dc <_dtoa_r+0x72c>)
 800c632:	f7f6 fa13 	bl	8002a5c <__aeabi_dsub>
 800c636:	0002      	movs	r2, r0
 800c638:	000b      	movs	r3, r1
 800c63a:	0030      	movs	r0, r6
 800c63c:	0039      	movs	r1, r7
 800c63e:	f7f3 ff0b 	bl	8000458 <__aeabi_dcmplt>
 800c642:	2800      	cmp	r0, #0
 800c644:	d100      	bne.n	800c648 <_dtoa_r+0x698>
 800c646:	e6ee      	b.n	800c426 <_dtoa_r+0x476>
 800c648:	0023      	movs	r3, r4
 800c64a:	3c01      	subs	r4, #1
 800c64c:	7822      	ldrb	r2, [r4, #0]
 800c64e:	2a30      	cmp	r2, #48	@ 0x30
 800c650:	d0fa      	beq.n	800c648 <_dtoa_r+0x698>
 800c652:	001c      	movs	r4, r3
 800c654:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c656:	9304      	str	r3, [sp, #16]
 800c658:	e73e      	b.n	800c4d8 <_dtoa_r+0x528>
 800c65a:	2200      	movs	r2, #0
 800c65c:	4b1b      	ldr	r3, [pc, #108]	@ (800c6cc <_dtoa_r+0x71c>)
 800c65e:	f7f5 ff35 	bl	80024cc <__aeabi_dmul>
 800c662:	900a      	str	r0, [sp, #40]	@ 0x28
 800c664:	910b      	str	r1, [sp, #44]	@ 0x2c
 800c666:	e7b9      	b.n	800c5dc <_dtoa_r+0x62c>
 800c668:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d10c      	bne.n	800c688 <_dtoa_r+0x6d8>
 800c66e:	9806      	ldr	r0, [sp, #24]
 800c670:	9907      	ldr	r1, [sp, #28]
 800c672:	2200      	movs	r2, #0
 800c674:	4b18      	ldr	r3, [pc, #96]	@ (800c6d8 <_dtoa_r+0x728>)
 800c676:	f7f5 ff29 	bl	80024cc <__aeabi_dmul>
 800c67a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c67c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c67e:	f7f3 ff09 	bl	8000494 <__aeabi_dcmpge>
 800c682:	2800      	cmp	r0, #0
 800c684:	d100      	bne.n	800c688 <_dtoa_r+0x6d8>
 800c686:	e164      	b.n	800c952 <_dtoa_r+0x9a2>
 800c688:	2600      	movs	r6, #0
 800c68a:	0037      	movs	r7, r6
 800c68c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c68e:	9c08      	ldr	r4, [sp, #32]
 800c690:	43db      	mvns	r3, r3
 800c692:	930c      	str	r3, [sp, #48]	@ 0x30
 800c694:	2300      	movs	r3, #0
 800c696:	9304      	str	r3, [sp, #16]
 800c698:	0031      	movs	r1, r6
 800c69a:	9803      	ldr	r0, [sp, #12]
 800c69c:	f000 fbc6 	bl	800ce2c <_Bfree>
 800c6a0:	2f00      	cmp	r7, #0
 800c6a2:	d0d7      	beq.n	800c654 <_dtoa_r+0x6a4>
 800c6a4:	9b04      	ldr	r3, [sp, #16]
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d005      	beq.n	800c6b6 <_dtoa_r+0x706>
 800c6aa:	42bb      	cmp	r3, r7
 800c6ac:	d003      	beq.n	800c6b6 <_dtoa_r+0x706>
 800c6ae:	0019      	movs	r1, r3
 800c6b0:	9803      	ldr	r0, [sp, #12]
 800c6b2:	f000 fbbb 	bl	800ce2c <_Bfree>
 800c6b6:	0039      	movs	r1, r7
 800c6b8:	9803      	ldr	r0, [sp, #12]
 800c6ba:	f000 fbb7 	bl	800ce2c <_Bfree>
 800c6be:	e7c9      	b.n	800c654 <_dtoa_r+0x6a4>
 800c6c0:	0800eb78 	.word	0x0800eb78
 800c6c4:	0800eb50 	.word	0x0800eb50
 800c6c8:	3ff00000 	.word	0x3ff00000
 800c6cc:	40240000 	.word	0x40240000
 800c6d0:	401c0000 	.word	0x401c0000
 800c6d4:	fcc00000 	.word	0xfcc00000
 800c6d8:	40140000 	.word	0x40140000
 800c6dc:	3fe00000 	.word	0x3fe00000
 800c6e0:	9b04      	ldr	r3, [sp, #16]
 800c6e2:	930c      	str	r3, [sp, #48]	@ 0x30
 800c6e4:	0023      	movs	r3, r4
 800c6e6:	001c      	movs	r4, r3
 800c6e8:	3b01      	subs	r3, #1
 800c6ea:	781a      	ldrb	r2, [r3, #0]
 800c6ec:	2a39      	cmp	r2, #57	@ 0x39
 800c6ee:	d108      	bne.n	800c702 <_dtoa_r+0x752>
 800c6f0:	9a08      	ldr	r2, [sp, #32]
 800c6f2:	429a      	cmp	r2, r3
 800c6f4:	d1f7      	bne.n	800c6e6 <_dtoa_r+0x736>
 800c6f6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800c6f8:	9908      	ldr	r1, [sp, #32]
 800c6fa:	3201      	adds	r2, #1
 800c6fc:	920c      	str	r2, [sp, #48]	@ 0x30
 800c6fe:	2230      	movs	r2, #48	@ 0x30
 800c700:	700a      	strb	r2, [r1, #0]
 800c702:	781a      	ldrb	r2, [r3, #0]
 800c704:	3201      	adds	r2, #1
 800c706:	701a      	strb	r2, [r3, #0]
 800c708:	e7a4      	b.n	800c654 <_dtoa_r+0x6a4>
 800c70a:	2200      	movs	r2, #0
 800c70c:	4bc6      	ldr	r3, [pc, #792]	@ (800ca28 <_dtoa_r+0xa78>)
 800c70e:	f7f5 fedd 	bl	80024cc <__aeabi_dmul>
 800c712:	2200      	movs	r2, #0
 800c714:	2300      	movs	r3, #0
 800c716:	0006      	movs	r6, r0
 800c718:	000f      	movs	r7, r1
 800c71a:	f7f3 fe97 	bl	800044c <__aeabi_dcmpeq>
 800c71e:	2800      	cmp	r0, #0
 800c720:	d100      	bne.n	800c724 <_dtoa_r+0x774>
 800c722:	e6a1      	b.n	800c468 <_dtoa_r+0x4b8>
 800c724:	e6d8      	b.n	800c4d8 <_dtoa_r+0x528>
 800c726:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 800c728:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 800c72a:	9c06      	ldr	r4, [sp, #24]
 800c72c:	2f00      	cmp	r7, #0
 800c72e:	d014      	beq.n	800c75a <_dtoa_r+0x7aa>
 800c730:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800c732:	2a01      	cmp	r2, #1
 800c734:	dd00      	ble.n	800c738 <_dtoa_r+0x788>
 800c736:	e0c8      	b.n	800c8ca <_dtoa_r+0x91a>
 800c738:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800c73a:	2a00      	cmp	r2, #0
 800c73c:	d100      	bne.n	800c740 <_dtoa_r+0x790>
 800c73e:	e0be      	b.n	800c8be <_dtoa_r+0x90e>
 800c740:	4aba      	ldr	r2, [pc, #744]	@ (800ca2c <_dtoa_r+0xa7c>)
 800c742:	189b      	adds	r3, r3, r2
 800c744:	9a06      	ldr	r2, [sp, #24]
 800c746:	2101      	movs	r1, #1
 800c748:	18d2      	adds	r2, r2, r3
 800c74a:	9206      	str	r2, [sp, #24]
 800c74c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c74e:	9803      	ldr	r0, [sp, #12]
 800c750:	18d3      	adds	r3, r2, r3
 800c752:	930d      	str	r3, [sp, #52]	@ 0x34
 800c754:	f000 fc22 	bl	800cf9c <__i2b>
 800c758:	0007      	movs	r7, r0
 800c75a:	2c00      	cmp	r4, #0
 800c75c:	d00e      	beq.n	800c77c <_dtoa_r+0x7cc>
 800c75e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c760:	2b00      	cmp	r3, #0
 800c762:	dd0b      	ble.n	800c77c <_dtoa_r+0x7cc>
 800c764:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c766:	0023      	movs	r3, r4
 800c768:	4294      	cmp	r4, r2
 800c76a:	dd00      	ble.n	800c76e <_dtoa_r+0x7be>
 800c76c:	0013      	movs	r3, r2
 800c76e:	9a06      	ldr	r2, [sp, #24]
 800c770:	1ae4      	subs	r4, r4, r3
 800c772:	1ad2      	subs	r2, r2, r3
 800c774:	9206      	str	r2, [sp, #24]
 800c776:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c778:	1ad3      	subs	r3, r2, r3
 800c77a:	930d      	str	r3, [sp, #52]	@ 0x34
 800c77c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d01f      	beq.n	800c7c2 <_dtoa_r+0x812>
 800c782:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c784:	2b00      	cmp	r3, #0
 800c786:	d100      	bne.n	800c78a <_dtoa_r+0x7da>
 800c788:	e0b5      	b.n	800c8f6 <_dtoa_r+0x946>
 800c78a:	2d00      	cmp	r5, #0
 800c78c:	d010      	beq.n	800c7b0 <_dtoa_r+0x800>
 800c78e:	0039      	movs	r1, r7
 800c790:	002a      	movs	r2, r5
 800c792:	9803      	ldr	r0, [sp, #12]
 800c794:	f000 fccc 	bl	800d130 <__pow5mult>
 800c798:	9a05      	ldr	r2, [sp, #20]
 800c79a:	0001      	movs	r1, r0
 800c79c:	0007      	movs	r7, r0
 800c79e:	9803      	ldr	r0, [sp, #12]
 800c7a0:	f000 fc14 	bl	800cfcc <__multiply>
 800c7a4:	0006      	movs	r6, r0
 800c7a6:	9905      	ldr	r1, [sp, #20]
 800c7a8:	9803      	ldr	r0, [sp, #12]
 800c7aa:	f000 fb3f 	bl	800ce2c <_Bfree>
 800c7ae:	9605      	str	r6, [sp, #20]
 800c7b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c7b2:	1b5a      	subs	r2, r3, r5
 800c7b4:	42ab      	cmp	r3, r5
 800c7b6:	d004      	beq.n	800c7c2 <_dtoa_r+0x812>
 800c7b8:	9905      	ldr	r1, [sp, #20]
 800c7ba:	9803      	ldr	r0, [sp, #12]
 800c7bc:	f000 fcb8 	bl	800d130 <__pow5mult>
 800c7c0:	9005      	str	r0, [sp, #20]
 800c7c2:	2101      	movs	r1, #1
 800c7c4:	9803      	ldr	r0, [sp, #12]
 800c7c6:	f000 fbe9 	bl	800cf9c <__i2b>
 800c7ca:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c7cc:	0006      	movs	r6, r0
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d100      	bne.n	800c7d4 <_dtoa_r+0x824>
 800c7d2:	e1bc      	b.n	800cb4e <_dtoa_r+0xb9e>
 800c7d4:	001a      	movs	r2, r3
 800c7d6:	0001      	movs	r1, r0
 800c7d8:	9803      	ldr	r0, [sp, #12]
 800c7da:	f000 fca9 	bl	800d130 <__pow5mult>
 800c7de:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800c7e0:	0006      	movs	r6, r0
 800c7e2:	2500      	movs	r5, #0
 800c7e4:	2b01      	cmp	r3, #1
 800c7e6:	dc16      	bgt.n	800c816 <_dtoa_r+0x866>
 800c7e8:	2500      	movs	r5, #0
 800c7ea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c7ec:	42ab      	cmp	r3, r5
 800c7ee:	d10e      	bne.n	800c80e <_dtoa_r+0x85e>
 800c7f0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c7f2:	031b      	lsls	r3, r3, #12
 800c7f4:	42ab      	cmp	r3, r5
 800c7f6:	d10a      	bne.n	800c80e <_dtoa_r+0x85e>
 800c7f8:	4b8d      	ldr	r3, [pc, #564]	@ (800ca30 <_dtoa_r+0xa80>)
 800c7fa:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c7fc:	4213      	tst	r3, r2
 800c7fe:	d006      	beq.n	800c80e <_dtoa_r+0x85e>
 800c800:	9b06      	ldr	r3, [sp, #24]
 800c802:	3501      	adds	r5, #1
 800c804:	3301      	adds	r3, #1
 800c806:	9306      	str	r3, [sp, #24]
 800c808:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c80a:	3301      	adds	r3, #1
 800c80c:	930d      	str	r3, [sp, #52]	@ 0x34
 800c80e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c810:	2001      	movs	r0, #1
 800c812:	2b00      	cmp	r3, #0
 800c814:	d008      	beq.n	800c828 <_dtoa_r+0x878>
 800c816:	6933      	ldr	r3, [r6, #16]
 800c818:	3303      	adds	r3, #3
 800c81a:	009b      	lsls	r3, r3, #2
 800c81c:	18f3      	adds	r3, r6, r3
 800c81e:	6858      	ldr	r0, [r3, #4]
 800c820:	f000 fb6c 	bl	800cefc <__hi0bits>
 800c824:	2320      	movs	r3, #32
 800c826:	1a18      	subs	r0, r3, r0
 800c828:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c82a:	1818      	adds	r0, r3, r0
 800c82c:	0002      	movs	r2, r0
 800c82e:	231f      	movs	r3, #31
 800c830:	401a      	ands	r2, r3
 800c832:	4218      	tst	r0, r3
 800c834:	d065      	beq.n	800c902 <_dtoa_r+0x952>
 800c836:	3301      	adds	r3, #1
 800c838:	1a9b      	subs	r3, r3, r2
 800c83a:	2b04      	cmp	r3, #4
 800c83c:	dd5d      	ble.n	800c8fa <_dtoa_r+0x94a>
 800c83e:	231c      	movs	r3, #28
 800c840:	1a9b      	subs	r3, r3, r2
 800c842:	9a06      	ldr	r2, [sp, #24]
 800c844:	18e4      	adds	r4, r4, r3
 800c846:	18d2      	adds	r2, r2, r3
 800c848:	9206      	str	r2, [sp, #24]
 800c84a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c84c:	18d3      	adds	r3, r2, r3
 800c84e:	930d      	str	r3, [sp, #52]	@ 0x34
 800c850:	9b06      	ldr	r3, [sp, #24]
 800c852:	2b00      	cmp	r3, #0
 800c854:	dd05      	ble.n	800c862 <_dtoa_r+0x8b2>
 800c856:	001a      	movs	r2, r3
 800c858:	9905      	ldr	r1, [sp, #20]
 800c85a:	9803      	ldr	r0, [sp, #12]
 800c85c:	f000 fcc4 	bl	800d1e8 <__lshift>
 800c860:	9005      	str	r0, [sp, #20]
 800c862:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c864:	2b00      	cmp	r3, #0
 800c866:	dd05      	ble.n	800c874 <_dtoa_r+0x8c4>
 800c868:	0031      	movs	r1, r6
 800c86a:	001a      	movs	r2, r3
 800c86c:	9803      	ldr	r0, [sp, #12]
 800c86e:	f000 fcbb 	bl	800d1e8 <__lshift>
 800c872:	0006      	movs	r6, r0
 800c874:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800c876:	2b00      	cmp	r3, #0
 800c878:	d045      	beq.n	800c906 <_dtoa_r+0x956>
 800c87a:	0031      	movs	r1, r6
 800c87c:	9805      	ldr	r0, [sp, #20]
 800c87e:	f000 fd1f 	bl	800d2c0 <__mcmp>
 800c882:	2800      	cmp	r0, #0
 800c884:	da3f      	bge.n	800c906 <_dtoa_r+0x956>
 800c886:	9b04      	ldr	r3, [sp, #16]
 800c888:	220a      	movs	r2, #10
 800c88a:	3b01      	subs	r3, #1
 800c88c:	930c      	str	r3, [sp, #48]	@ 0x30
 800c88e:	9905      	ldr	r1, [sp, #20]
 800c890:	2300      	movs	r3, #0
 800c892:	9803      	ldr	r0, [sp, #12]
 800c894:	f000 faee 	bl	800ce74 <__multadd>
 800c898:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c89a:	9005      	str	r0, [sp, #20]
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d100      	bne.n	800c8a2 <_dtoa_r+0x8f2>
 800c8a0:	e15c      	b.n	800cb5c <_dtoa_r+0xbac>
 800c8a2:	2300      	movs	r3, #0
 800c8a4:	0039      	movs	r1, r7
 800c8a6:	220a      	movs	r2, #10
 800c8a8:	9803      	ldr	r0, [sp, #12]
 800c8aa:	f000 fae3 	bl	800ce74 <__multadd>
 800c8ae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c8b0:	0007      	movs	r7, r0
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	dc55      	bgt.n	800c962 <_dtoa_r+0x9b2>
 800c8b6:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800c8b8:	2b02      	cmp	r3, #2
 800c8ba:	dc2d      	bgt.n	800c918 <_dtoa_r+0x968>
 800c8bc:	e051      	b.n	800c962 <_dtoa_r+0x9b2>
 800c8be:	2336      	movs	r3, #54	@ 0x36
 800c8c0:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800c8c2:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 800c8c4:	9c06      	ldr	r4, [sp, #24]
 800c8c6:	1a9b      	subs	r3, r3, r2
 800c8c8:	e73c      	b.n	800c744 <_dtoa_r+0x794>
 800c8ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c8cc:	1e5d      	subs	r5, r3, #1
 800c8ce:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c8d0:	42ab      	cmp	r3, r5
 800c8d2:	db08      	blt.n	800c8e6 <_dtoa_r+0x936>
 800c8d4:	1b5d      	subs	r5, r3, r5
 800c8d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c8d8:	9c06      	ldr	r4, [sp, #24]
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	db00      	blt.n	800c8e0 <_dtoa_r+0x930>
 800c8de:	e731      	b.n	800c744 <_dtoa_r+0x794>
 800c8e0:	1ae4      	subs	r4, r4, r3
 800c8e2:	2300      	movs	r3, #0
 800c8e4:	e72e      	b.n	800c744 <_dtoa_r+0x794>
 800c8e6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c8e8:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800c8ea:	1aeb      	subs	r3, r5, r3
 800c8ec:	18d3      	adds	r3, r2, r3
 800c8ee:	950f      	str	r5, [sp, #60]	@ 0x3c
 800c8f0:	9314      	str	r3, [sp, #80]	@ 0x50
 800c8f2:	2500      	movs	r5, #0
 800c8f4:	e7ef      	b.n	800c8d6 <_dtoa_r+0x926>
 800c8f6:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800c8f8:	e75e      	b.n	800c7b8 <_dtoa_r+0x808>
 800c8fa:	2b04      	cmp	r3, #4
 800c8fc:	d0a8      	beq.n	800c850 <_dtoa_r+0x8a0>
 800c8fe:	331c      	adds	r3, #28
 800c900:	e79f      	b.n	800c842 <_dtoa_r+0x892>
 800c902:	0013      	movs	r3, r2
 800c904:	e7fb      	b.n	800c8fe <_dtoa_r+0x94e>
 800c906:	9b04      	ldr	r3, [sp, #16]
 800c908:	930c      	str	r3, [sp, #48]	@ 0x30
 800c90a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c90c:	930e      	str	r3, [sp, #56]	@ 0x38
 800c90e:	2b00      	cmp	r3, #0
 800c910:	dc23      	bgt.n	800c95a <_dtoa_r+0x9aa>
 800c912:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800c914:	2b02      	cmp	r3, #2
 800c916:	dd20      	ble.n	800c95a <_dtoa_r+0x9aa>
 800c918:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d000      	beq.n	800c920 <_dtoa_r+0x970>
 800c91e:	e6b5      	b.n	800c68c <_dtoa_r+0x6dc>
 800c920:	0031      	movs	r1, r6
 800c922:	2205      	movs	r2, #5
 800c924:	9803      	ldr	r0, [sp, #12]
 800c926:	f000 faa5 	bl	800ce74 <__multadd>
 800c92a:	0006      	movs	r6, r0
 800c92c:	0001      	movs	r1, r0
 800c92e:	9805      	ldr	r0, [sp, #20]
 800c930:	f000 fcc6 	bl	800d2c0 <__mcmp>
 800c934:	2800      	cmp	r0, #0
 800c936:	dc00      	bgt.n	800c93a <_dtoa_r+0x98a>
 800c938:	e6a8      	b.n	800c68c <_dtoa_r+0x6dc>
 800c93a:	9b08      	ldr	r3, [sp, #32]
 800c93c:	9a08      	ldr	r2, [sp, #32]
 800c93e:	1c5c      	adds	r4, r3, #1
 800c940:	2331      	movs	r3, #49	@ 0x31
 800c942:	7013      	strb	r3, [r2, #0]
 800c944:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c946:	3301      	adds	r3, #1
 800c948:	930c      	str	r3, [sp, #48]	@ 0x30
 800c94a:	e6a3      	b.n	800c694 <_dtoa_r+0x6e4>
 800c94c:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 800c94e:	0037      	movs	r7, r6
 800c950:	e7f3      	b.n	800c93a <_dtoa_r+0x98a>
 800c952:	9b04      	ldr	r3, [sp, #16]
 800c954:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 800c956:	930c      	str	r3, [sp, #48]	@ 0x30
 800c958:	e7f9      	b.n	800c94e <_dtoa_r+0x99e>
 800c95a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d100      	bne.n	800c962 <_dtoa_r+0x9b2>
 800c960:	e100      	b.n	800cb64 <_dtoa_r+0xbb4>
 800c962:	2c00      	cmp	r4, #0
 800c964:	dd05      	ble.n	800c972 <_dtoa_r+0x9c2>
 800c966:	0039      	movs	r1, r7
 800c968:	0022      	movs	r2, r4
 800c96a:	9803      	ldr	r0, [sp, #12]
 800c96c:	f000 fc3c 	bl	800d1e8 <__lshift>
 800c970:	0007      	movs	r7, r0
 800c972:	0038      	movs	r0, r7
 800c974:	2d00      	cmp	r5, #0
 800c976:	d018      	beq.n	800c9aa <_dtoa_r+0x9fa>
 800c978:	6879      	ldr	r1, [r7, #4]
 800c97a:	9803      	ldr	r0, [sp, #12]
 800c97c:	f000 fa12 	bl	800cda4 <_Balloc>
 800c980:	1e04      	subs	r4, r0, #0
 800c982:	d105      	bne.n	800c990 <_dtoa_r+0x9e0>
 800c984:	0022      	movs	r2, r4
 800c986:	4b2b      	ldr	r3, [pc, #172]	@ (800ca34 <_dtoa_r+0xa84>)
 800c988:	482b      	ldr	r0, [pc, #172]	@ (800ca38 <_dtoa_r+0xa88>)
 800c98a:	492c      	ldr	r1, [pc, #176]	@ (800ca3c <_dtoa_r+0xa8c>)
 800c98c:	f7ff fb25 	bl	800bfda <_dtoa_r+0x2a>
 800c990:	0039      	movs	r1, r7
 800c992:	693a      	ldr	r2, [r7, #16]
 800c994:	310c      	adds	r1, #12
 800c996:	3202      	adds	r2, #2
 800c998:	0092      	lsls	r2, r2, #2
 800c99a:	300c      	adds	r0, #12
 800c99c:	f001 f9c0 	bl	800dd20 <memcpy>
 800c9a0:	2201      	movs	r2, #1
 800c9a2:	0021      	movs	r1, r4
 800c9a4:	9803      	ldr	r0, [sp, #12]
 800c9a6:	f000 fc1f 	bl	800d1e8 <__lshift>
 800c9aa:	9b08      	ldr	r3, [sp, #32]
 800c9ac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c9ae:	9306      	str	r3, [sp, #24]
 800c9b0:	3b01      	subs	r3, #1
 800c9b2:	189b      	adds	r3, r3, r2
 800c9b4:	2201      	movs	r2, #1
 800c9b6:	9704      	str	r7, [sp, #16]
 800c9b8:	0007      	movs	r7, r0
 800c9ba:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c9bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c9be:	4013      	ands	r3, r2
 800c9c0:	930e      	str	r3, [sp, #56]	@ 0x38
 800c9c2:	0031      	movs	r1, r6
 800c9c4:	9805      	ldr	r0, [sp, #20]
 800c9c6:	f7ff fa65 	bl	800be94 <quorem>
 800c9ca:	9904      	ldr	r1, [sp, #16]
 800c9cc:	0005      	movs	r5, r0
 800c9ce:	900a      	str	r0, [sp, #40]	@ 0x28
 800c9d0:	9805      	ldr	r0, [sp, #20]
 800c9d2:	f000 fc75 	bl	800d2c0 <__mcmp>
 800c9d6:	003a      	movs	r2, r7
 800c9d8:	900d      	str	r0, [sp, #52]	@ 0x34
 800c9da:	0031      	movs	r1, r6
 800c9dc:	9803      	ldr	r0, [sp, #12]
 800c9de:	f000 fc8b 	bl	800d2f8 <__mdiff>
 800c9e2:	2201      	movs	r2, #1
 800c9e4:	68c3      	ldr	r3, [r0, #12]
 800c9e6:	0004      	movs	r4, r0
 800c9e8:	3530      	adds	r5, #48	@ 0x30
 800c9ea:	9209      	str	r2, [sp, #36]	@ 0x24
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d104      	bne.n	800c9fa <_dtoa_r+0xa4a>
 800c9f0:	0001      	movs	r1, r0
 800c9f2:	9805      	ldr	r0, [sp, #20]
 800c9f4:	f000 fc64 	bl	800d2c0 <__mcmp>
 800c9f8:	9009      	str	r0, [sp, #36]	@ 0x24
 800c9fa:	0021      	movs	r1, r4
 800c9fc:	9803      	ldr	r0, [sp, #12]
 800c9fe:	f000 fa15 	bl	800ce2c <_Bfree>
 800ca02:	9b06      	ldr	r3, [sp, #24]
 800ca04:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ca06:	1c5c      	adds	r4, r3, #1
 800ca08:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800ca0a:	4313      	orrs	r3, r2
 800ca0c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ca0e:	4313      	orrs	r3, r2
 800ca10:	d116      	bne.n	800ca40 <_dtoa_r+0xa90>
 800ca12:	2d39      	cmp	r5, #57	@ 0x39
 800ca14:	d02f      	beq.n	800ca76 <_dtoa_r+0xac6>
 800ca16:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	dd01      	ble.n	800ca20 <_dtoa_r+0xa70>
 800ca1c:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800ca1e:	3531      	adds	r5, #49	@ 0x31
 800ca20:	9b06      	ldr	r3, [sp, #24]
 800ca22:	701d      	strb	r5, [r3, #0]
 800ca24:	e638      	b.n	800c698 <_dtoa_r+0x6e8>
 800ca26:	46c0      	nop			@ (mov r8, r8)
 800ca28:	40240000 	.word	0x40240000
 800ca2c:	00000433 	.word	0x00000433
 800ca30:	7ff00000 	.word	0x7ff00000
 800ca34:	0800ead8 	.word	0x0800ead8
 800ca38:	0800ea80 	.word	0x0800ea80
 800ca3c:	000002ef 	.word	0x000002ef
 800ca40:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	db04      	blt.n	800ca50 <_dtoa_r+0xaa0>
 800ca46:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800ca48:	4313      	orrs	r3, r2
 800ca4a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ca4c:	4313      	orrs	r3, r2
 800ca4e:	d11e      	bne.n	800ca8e <_dtoa_r+0xade>
 800ca50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	dde4      	ble.n	800ca20 <_dtoa_r+0xa70>
 800ca56:	9905      	ldr	r1, [sp, #20]
 800ca58:	2201      	movs	r2, #1
 800ca5a:	9803      	ldr	r0, [sp, #12]
 800ca5c:	f000 fbc4 	bl	800d1e8 <__lshift>
 800ca60:	0031      	movs	r1, r6
 800ca62:	9005      	str	r0, [sp, #20]
 800ca64:	f000 fc2c 	bl	800d2c0 <__mcmp>
 800ca68:	2800      	cmp	r0, #0
 800ca6a:	dc02      	bgt.n	800ca72 <_dtoa_r+0xac2>
 800ca6c:	d1d8      	bne.n	800ca20 <_dtoa_r+0xa70>
 800ca6e:	07eb      	lsls	r3, r5, #31
 800ca70:	d5d6      	bpl.n	800ca20 <_dtoa_r+0xa70>
 800ca72:	2d39      	cmp	r5, #57	@ 0x39
 800ca74:	d1d2      	bne.n	800ca1c <_dtoa_r+0xa6c>
 800ca76:	2339      	movs	r3, #57	@ 0x39
 800ca78:	9a06      	ldr	r2, [sp, #24]
 800ca7a:	7013      	strb	r3, [r2, #0]
 800ca7c:	0023      	movs	r3, r4
 800ca7e:	001c      	movs	r4, r3
 800ca80:	3b01      	subs	r3, #1
 800ca82:	781a      	ldrb	r2, [r3, #0]
 800ca84:	2a39      	cmp	r2, #57	@ 0x39
 800ca86:	d04f      	beq.n	800cb28 <_dtoa_r+0xb78>
 800ca88:	3201      	adds	r2, #1
 800ca8a:	701a      	strb	r2, [r3, #0]
 800ca8c:	e604      	b.n	800c698 <_dtoa_r+0x6e8>
 800ca8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	dd03      	ble.n	800ca9c <_dtoa_r+0xaec>
 800ca94:	2d39      	cmp	r5, #57	@ 0x39
 800ca96:	d0ee      	beq.n	800ca76 <_dtoa_r+0xac6>
 800ca98:	3501      	adds	r5, #1
 800ca9a:	e7c1      	b.n	800ca20 <_dtoa_r+0xa70>
 800ca9c:	9b06      	ldr	r3, [sp, #24]
 800ca9e:	9a06      	ldr	r2, [sp, #24]
 800caa0:	701d      	strb	r5, [r3, #0]
 800caa2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800caa4:	4293      	cmp	r3, r2
 800caa6:	d02a      	beq.n	800cafe <_dtoa_r+0xb4e>
 800caa8:	2300      	movs	r3, #0
 800caaa:	220a      	movs	r2, #10
 800caac:	9905      	ldr	r1, [sp, #20]
 800caae:	9803      	ldr	r0, [sp, #12]
 800cab0:	f000 f9e0 	bl	800ce74 <__multadd>
 800cab4:	9b04      	ldr	r3, [sp, #16]
 800cab6:	9005      	str	r0, [sp, #20]
 800cab8:	42bb      	cmp	r3, r7
 800caba:	d109      	bne.n	800cad0 <_dtoa_r+0xb20>
 800cabc:	2300      	movs	r3, #0
 800cabe:	220a      	movs	r2, #10
 800cac0:	9904      	ldr	r1, [sp, #16]
 800cac2:	9803      	ldr	r0, [sp, #12]
 800cac4:	f000 f9d6 	bl	800ce74 <__multadd>
 800cac8:	9004      	str	r0, [sp, #16]
 800caca:	0007      	movs	r7, r0
 800cacc:	9406      	str	r4, [sp, #24]
 800cace:	e778      	b.n	800c9c2 <_dtoa_r+0xa12>
 800cad0:	9904      	ldr	r1, [sp, #16]
 800cad2:	2300      	movs	r3, #0
 800cad4:	220a      	movs	r2, #10
 800cad6:	9803      	ldr	r0, [sp, #12]
 800cad8:	f000 f9cc 	bl	800ce74 <__multadd>
 800cadc:	2300      	movs	r3, #0
 800cade:	9004      	str	r0, [sp, #16]
 800cae0:	220a      	movs	r2, #10
 800cae2:	0039      	movs	r1, r7
 800cae4:	9803      	ldr	r0, [sp, #12]
 800cae6:	f000 f9c5 	bl	800ce74 <__multadd>
 800caea:	e7ee      	b.n	800caca <_dtoa_r+0xb1a>
 800caec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800caee:	2401      	movs	r4, #1
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	dd00      	ble.n	800caf6 <_dtoa_r+0xb46>
 800caf4:	001c      	movs	r4, r3
 800caf6:	9b08      	ldr	r3, [sp, #32]
 800caf8:	191c      	adds	r4, r3, r4
 800cafa:	2300      	movs	r3, #0
 800cafc:	9304      	str	r3, [sp, #16]
 800cafe:	9905      	ldr	r1, [sp, #20]
 800cb00:	2201      	movs	r2, #1
 800cb02:	9803      	ldr	r0, [sp, #12]
 800cb04:	f000 fb70 	bl	800d1e8 <__lshift>
 800cb08:	0031      	movs	r1, r6
 800cb0a:	9005      	str	r0, [sp, #20]
 800cb0c:	f000 fbd8 	bl	800d2c0 <__mcmp>
 800cb10:	2800      	cmp	r0, #0
 800cb12:	dcb3      	bgt.n	800ca7c <_dtoa_r+0xacc>
 800cb14:	d101      	bne.n	800cb1a <_dtoa_r+0xb6a>
 800cb16:	07ed      	lsls	r5, r5, #31
 800cb18:	d4b0      	bmi.n	800ca7c <_dtoa_r+0xacc>
 800cb1a:	0023      	movs	r3, r4
 800cb1c:	001c      	movs	r4, r3
 800cb1e:	3b01      	subs	r3, #1
 800cb20:	781a      	ldrb	r2, [r3, #0]
 800cb22:	2a30      	cmp	r2, #48	@ 0x30
 800cb24:	d0fa      	beq.n	800cb1c <_dtoa_r+0xb6c>
 800cb26:	e5b7      	b.n	800c698 <_dtoa_r+0x6e8>
 800cb28:	9a08      	ldr	r2, [sp, #32]
 800cb2a:	429a      	cmp	r2, r3
 800cb2c:	d1a7      	bne.n	800ca7e <_dtoa_r+0xace>
 800cb2e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800cb30:	3301      	adds	r3, #1
 800cb32:	930c      	str	r3, [sp, #48]	@ 0x30
 800cb34:	2331      	movs	r3, #49	@ 0x31
 800cb36:	7013      	strb	r3, [r2, #0]
 800cb38:	e5ae      	b.n	800c698 <_dtoa_r+0x6e8>
 800cb3a:	4b15      	ldr	r3, [pc, #84]	@ (800cb90 <_dtoa_r+0xbe0>)
 800cb3c:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800cb3e:	9308      	str	r3, [sp, #32]
 800cb40:	4b14      	ldr	r3, [pc, #80]	@ (800cb94 <_dtoa_r+0xbe4>)
 800cb42:	2a00      	cmp	r2, #0
 800cb44:	d001      	beq.n	800cb4a <_dtoa_r+0xb9a>
 800cb46:	f7ff fa7b 	bl	800c040 <_dtoa_r+0x90>
 800cb4a:	f7ff fa7b 	bl	800c044 <_dtoa_r+0x94>
 800cb4e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800cb50:	2b01      	cmp	r3, #1
 800cb52:	dc00      	bgt.n	800cb56 <_dtoa_r+0xba6>
 800cb54:	e648      	b.n	800c7e8 <_dtoa_r+0x838>
 800cb56:	2001      	movs	r0, #1
 800cb58:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 800cb5a:	e665      	b.n	800c828 <_dtoa_r+0x878>
 800cb5c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	dc00      	bgt.n	800cb64 <_dtoa_r+0xbb4>
 800cb62:	e6d6      	b.n	800c912 <_dtoa_r+0x962>
 800cb64:	2400      	movs	r4, #0
 800cb66:	0031      	movs	r1, r6
 800cb68:	9805      	ldr	r0, [sp, #20]
 800cb6a:	f7ff f993 	bl	800be94 <quorem>
 800cb6e:	9b08      	ldr	r3, [sp, #32]
 800cb70:	3030      	adds	r0, #48	@ 0x30
 800cb72:	5518      	strb	r0, [r3, r4]
 800cb74:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cb76:	3401      	adds	r4, #1
 800cb78:	0005      	movs	r5, r0
 800cb7a:	429c      	cmp	r4, r3
 800cb7c:	dab6      	bge.n	800caec <_dtoa_r+0xb3c>
 800cb7e:	2300      	movs	r3, #0
 800cb80:	220a      	movs	r2, #10
 800cb82:	9905      	ldr	r1, [sp, #20]
 800cb84:	9803      	ldr	r0, [sp, #12]
 800cb86:	f000 f975 	bl	800ce74 <__multadd>
 800cb8a:	9005      	str	r0, [sp, #20]
 800cb8c:	e7eb      	b.n	800cb66 <_dtoa_r+0xbb6>
 800cb8e:	46c0      	nop			@ (mov r8, r8)
 800cb90:	0800ea5c 	.word	0x0800ea5c
 800cb94:	0800ea64 	.word	0x0800ea64

0800cb98 <_free_r>:
 800cb98:	b570      	push	{r4, r5, r6, lr}
 800cb9a:	0005      	movs	r5, r0
 800cb9c:	1e0c      	subs	r4, r1, #0
 800cb9e:	d010      	beq.n	800cbc2 <_free_r+0x2a>
 800cba0:	3c04      	subs	r4, #4
 800cba2:	6823      	ldr	r3, [r4, #0]
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	da00      	bge.n	800cbaa <_free_r+0x12>
 800cba8:	18e4      	adds	r4, r4, r3
 800cbaa:	0028      	movs	r0, r5
 800cbac:	f000 f8ea 	bl	800cd84 <__malloc_lock>
 800cbb0:	4a1d      	ldr	r2, [pc, #116]	@ (800cc28 <_free_r+0x90>)
 800cbb2:	6813      	ldr	r3, [r2, #0]
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d105      	bne.n	800cbc4 <_free_r+0x2c>
 800cbb8:	6063      	str	r3, [r4, #4]
 800cbba:	6014      	str	r4, [r2, #0]
 800cbbc:	0028      	movs	r0, r5
 800cbbe:	f000 f8e9 	bl	800cd94 <__malloc_unlock>
 800cbc2:	bd70      	pop	{r4, r5, r6, pc}
 800cbc4:	42a3      	cmp	r3, r4
 800cbc6:	d908      	bls.n	800cbda <_free_r+0x42>
 800cbc8:	6820      	ldr	r0, [r4, #0]
 800cbca:	1821      	adds	r1, r4, r0
 800cbcc:	428b      	cmp	r3, r1
 800cbce:	d1f3      	bne.n	800cbb8 <_free_r+0x20>
 800cbd0:	6819      	ldr	r1, [r3, #0]
 800cbd2:	685b      	ldr	r3, [r3, #4]
 800cbd4:	1809      	adds	r1, r1, r0
 800cbd6:	6021      	str	r1, [r4, #0]
 800cbd8:	e7ee      	b.n	800cbb8 <_free_r+0x20>
 800cbda:	001a      	movs	r2, r3
 800cbdc:	685b      	ldr	r3, [r3, #4]
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d001      	beq.n	800cbe6 <_free_r+0x4e>
 800cbe2:	42a3      	cmp	r3, r4
 800cbe4:	d9f9      	bls.n	800cbda <_free_r+0x42>
 800cbe6:	6811      	ldr	r1, [r2, #0]
 800cbe8:	1850      	adds	r0, r2, r1
 800cbea:	42a0      	cmp	r0, r4
 800cbec:	d10b      	bne.n	800cc06 <_free_r+0x6e>
 800cbee:	6820      	ldr	r0, [r4, #0]
 800cbf0:	1809      	adds	r1, r1, r0
 800cbf2:	1850      	adds	r0, r2, r1
 800cbf4:	6011      	str	r1, [r2, #0]
 800cbf6:	4283      	cmp	r3, r0
 800cbf8:	d1e0      	bne.n	800cbbc <_free_r+0x24>
 800cbfa:	6818      	ldr	r0, [r3, #0]
 800cbfc:	685b      	ldr	r3, [r3, #4]
 800cbfe:	1841      	adds	r1, r0, r1
 800cc00:	6011      	str	r1, [r2, #0]
 800cc02:	6053      	str	r3, [r2, #4]
 800cc04:	e7da      	b.n	800cbbc <_free_r+0x24>
 800cc06:	42a0      	cmp	r0, r4
 800cc08:	d902      	bls.n	800cc10 <_free_r+0x78>
 800cc0a:	230c      	movs	r3, #12
 800cc0c:	602b      	str	r3, [r5, #0]
 800cc0e:	e7d5      	b.n	800cbbc <_free_r+0x24>
 800cc10:	6820      	ldr	r0, [r4, #0]
 800cc12:	1821      	adds	r1, r4, r0
 800cc14:	428b      	cmp	r3, r1
 800cc16:	d103      	bne.n	800cc20 <_free_r+0x88>
 800cc18:	6819      	ldr	r1, [r3, #0]
 800cc1a:	685b      	ldr	r3, [r3, #4]
 800cc1c:	1809      	adds	r1, r1, r0
 800cc1e:	6021      	str	r1, [r4, #0]
 800cc20:	6063      	str	r3, [r4, #4]
 800cc22:	6054      	str	r4, [r2, #4]
 800cc24:	e7ca      	b.n	800cbbc <_free_r+0x24>
 800cc26:	46c0      	nop			@ (mov r8, r8)
 800cc28:	2000105c 	.word	0x2000105c

0800cc2c <malloc>:
 800cc2c:	b510      	push	{r4, lr}
 800cc2e:	4b03      	ldr	r3, [pc, #12]	@ (800cc3c <malloc+0x10>)
 800cc30:	0001      	movs	r1, r0
 800cc32:	6818      	ldr	r0, [r3, #0]
 800cc34:	f000 f826 	bl	800cc84 <_malloc_r>
 800cc38:	bd10      	pop	{r4, pc}
 800cc3a:	46c0      	nop			@ (mov r8, r8)
 800cc3c:	20000048 	.word	0x20000048

0800cc40 <sbrk_aligned>:
 800cc40:	b570      	push	{r4, r5, r6, lr}
 800cc42:	4e0f      	ldr	r6, [pc, #60]	@ (800cc80 <sbrk_aligned+0x40>)
 800cc44:	000d      	movs	r5, r1
 800cc46:	6831      	ldr	r1, [r6, #0]
 800cc48:	0004      	movs	r4, r0
 800cc4a:	2900      	cmp	r1, #0
 800cc4c:	d102      	bne.n	800cc54 <sbrk_aligned+0x14>
 800cc4e:	f001 f855 	bl	800dcfc <_sbrk_r>
 800cc52:	6030      	str	r0, [r6, #0]
 800cc54:	0029      	movs	r1, r5
 800cc56:	0020      	movs	r0, r4
 800cc58:	f001 f850 	bl	800dcfc <_sbrk_r>
 800cc5c:	1c43      	adds	r3, r0, #1
 800cc5e:	d103      	bne.n	800cc68 <sbrk_aligned+0x28>
 800cc60:	2501      	movs	r5, #1
 800cc62:	426d      	negs	r5, r5
 800cc64:	0028      	movs	r0, r5
 800cc66:	bd70      	pop	{r4, r5, r6, pc}
 800cc68:	2303      	movs	r3, #3
 800cc6a:	1cc5      	adds	r5, r0, #3
 800cc6c:	439d      	bics	r5, r3
 800cc6e:	42a8      	cmp	r0, r5
 800cc70:	d0f8      	beq.n	800cc64 <sbrk_aligned+0x24>
 800cc72:	1a29      	subs	r1, r5, r0
 800cc74:	0020      	movs	r0, r4
 800cc76:	f001 f841 	bl	800dcfc <_sbrk_r>
 800cc7a:	3001      	adds	r0, #1
 800cc7c:	d1f2      	bne.n	800cc64 <sbrk_aligned+0x24>
 800cc7e:	e7ef      	b.n	800cc60 <sbrk_aligned+0x20>
 800cc80:	20001058 	.word	0x20001058

0800cc84 <_malloc_r>:
 800cc84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cc86:	2203      	movs	r2, #3
 800cc88:	1ccb      	adds	r3, r1, #3
 800cc8a:	4393      	bics	r3, r2
 800cc8c:	3308      	adds	r3, #8
 800cc8e:	0005      	movs	r5, r0
 800cc90:	001f      	movs	r7, r3
 800cc92:	2b0c      	cmp	r3, #12
 800cc94:	d234      	bcs.n	800cd00 <_malloc_r+0x7c>
 800cc96:	270c      	movs	r7, #12
 800cc98:	42b9      	cmp	r1, r7
 800cc9a:	d833      	bhi.n	800cd04 <_malloc_r+0x80>
 800cc9c:	0028      	movs	r0, r5
 800cc9e:	f000 f871 	bl	800cd84 <__malloc_lock>
 800cca2:	4e37      	ldr	r6, [pc, #220]	@ (800cd80 <_malloc_r+0xfc>)
 800cca4:	6833      	ldr	r3, [r6, #0]
 800cca6:	001c      	movs	r4, r3
 800cca8:	2c00      	cmp	r4, #0
 800ccaa:	d12f      	bne.n	800cd0c <_malloc_r+0x88>
 800ccac:	0039      	movs	r1, r7
 800ccae:	0028      	movs	r0, r5
 800ccb0:	f7ff ffc6 	bl	800cc40 <sbrk_aligned>
 800ccb4:	0004      	movs	r4, r0
 800ccb6:	1c43      	adds	r3, r0, #1
 800ccb8:	d15f      	bne.n	800cd7a <_malloc_r+0xf6>
 800ccba:	6834      	ldr	r4, [r6, #0]
 800ccbc:	9400      	str	r4, [sp, #0]
 800ccbe:	9b00      	ldr	r3, [sp, #0]
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d14a      	bne.n	800cd5a <_malloc_r+0xd6>
 800ccc4:	2c00      	cmp	r4, #0
 800ccc6:	d052      	beq.n	800cd6e <_malloc_r+0xea>
 800ccc8:	6823      	ldr	r3, [r4, #0]
 800ccca:	0028      	movs	r0, r5
 800cccc:	18e3      	adds	r3, r4, r3
 800ccce:	9900      	ldr	r1, [sp, #0]
 800ccd0:	9301      	str	r3, [sp, #4]
 800ccd2:	f001 f813 	bl	800dcfc <_sbrk_r>
 800ccd6:	9b01      	ldr	r3, [sp, #4]
 800ccd8:	4283      	cmp	r3, r0
 800ccda:	d148      	bne.n	800cd6e <_malloc_r+0xea>
 800ccdc:	6823      	ldr	r3, [r4, #0]
 800ccde:	0028      	movs	r0, r5
 800cce0:	1aff      	subs	r7, r7, r3
 800cce2:	0039      	movs	r1, r7
 800cce4:	f7ff ffac 	bl	800cc40 <sbrk_aligned>
 800cce8:	3001      	adds	r0, #1
 800ccea:	d040      	beq.n	800cd6e <_malloc_r+0xea>
 800ccec:	6823      	ldr	r3, [r4, #0]
 800ccee:	19db      	adds	r3, r3, r7
 800ccf0:	6023      	str	r3, [r4, #0]
 800ccf2:	6833      	ldr	r3, [r6, #0]
 800ccf4:	685a      	ldr	r2, [r3, #4]
 800ccf6:	2a00      	cmp	r2, #0
 800ccf8:	d133      	bne.n	800cd62 <_malloc_r+0xde>
 800ccfa:	9b00      	ldr	r3, [sp, #0]
 800ccfc:	6033      	str	r3, [r6, #0]
 800ccfe:	e019      	b.n	800cd34 <_malloc_r+0xb0>
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	dac9      	bge.n	800cc98 <_malloc_r+0x14>
 800cd04:	230c      	movs	r3, #12
 800cd06:	602b      	str	r3, [r5, #0]
 800cd08:	2000      	movs	r0, #0
 800cd0a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800cd0c:	6821      	ldr	r1, [r4, #0]
 800cd0e:	1bc9      	subs	r1, r1, r7
 800cd10:	d420      	bmi.n	800cd54 <_malloc_r+0xd0>
 800cd12:	290b      	cmp	r1, #11
 800cd14:	d90a      	bls.n	800cd2c <_malloc_r+0xa8>
 800cd16:	19e2      	adds	r2, r4, r7
 800cd18:	6027      	str	r7, [r4, #0]
 800cd1a:	42a3      	cmp	r3, r4
 800cd1c:	d104      	bne.n	800cd28 <_malloc_r+0xa4>
 800cd1e:	6032      	str	r2, [r6, #0]
 800cd20:	6863      	ldr	r3, [r4, #4]
 800cd22:	6011      	str	r1, [r2, #0]
 800cd24:	6053      	str	r3, [r2, #4]
 800cd26:	e005      	b.n	800cd34 <_malloc_r+0xb0>
 800cd28:	605a      	str	r2, [r3, #4]
 800cd2a:	e7f9      	b.n	800cd20 <_malloc_r+0x9c>
 800cd2c:	6862      	ldr	r2, [r4, #4]
 800cd2e:	42a3      	cmp	r3, r4
 800cd30:	d10e      	bne.n	800cd50 <_malloc_r+0xcc>
 800cd32:	6032      	str	r2, [r6, #0]
 800cd34:	0028      	movs	r0, r5
 800cd36:	f000 f82d 	bl	800cd94 <__malloc_unlock>
 800cd3a:	0020      	movs	r0, r4
 800cd3c:	2207      	movs	r2, #7
 800cd3e:	300b      	adds	r0, #11
 800cd40:	1d23      	adds	r3, r4, #4
 800cd42:	4390      	bics	r0, r2
 800cd44:	1ac2      	subs	r2, r0, r3
 800cd46:	4298      	cmp	r0, r3
 800cd48:	d0df      	beq.n	800cd0a <_malloc_r+0x86>
 800cd4a:	1a1b      	subs	r3, r3, r0
 800cd4c:	50a3      	str	r3, [r4, r2]
 800cd4e:	e7dc      	b.n	800cd0a <_malloc_r+0x86>
 800cd50:	605a      	str	r2, [r3, #4]
 800cd52:	e7ef      	b.n	800cd34 <_malloc_r+0xb0>
 800cd54:	0023      	movs	r3, r4
 800cd56:	6864      	ldr	r4, [r4, #4]
 800cd58:	e7a6      	b.n	800cca8 <_malloc_r+0x24>
 800cd5a:	9c00      	ldr	r4, [sp, #0]
 800cd5c:	6863      	ldr	r3, [r4, #4]
 800cd5e:	9300      	str	r3, [sp, #0]
 800cd60:	e7ad      	b.n	800ccbe <_malloc_r+0x3a>
 800cd62:	001a      	movs	r2, r3
 800cd64:	685b      	ldr	r3, [r3, #4]
 800cd66:	42a3      	cmp	r3, r4
 800cd68:	d1fb      	bne.n	800cd62 <_malloc_r+0xde>
 800cd6a:	2300      	movs	r3, #0
 800cd6c:	e7da      	b.n	800cd24 <_malloc_r+0xa0>
 800cd6e:	230c      	movs	r3, #12
 800cd70:	0028      	movs	r0, r5
 800cd72:	602b      	str	r3, [r5, #0]
 800cd74:	f000 f80e 	bl	800cd94 <__malloc_unlock>
 800cd78:	e7c6      	b.n	800cd08 <_malloc_r+0x84>
 800cd7a:	6007      	str	r7, [r0, #0]
 800cd7c:	e7da      	b.n	800cd34 <_malloc_r+0xb0>
 800cd7e:	46c0      	nop			@ (mov r8, r8)
 800cd80:	2000105c 	.word	0x2000105c

0800cd84 <__malloc_lock>:
 800cd84:	b510      	push	{r4, lr}
 800cd86:	4802      	ldr	r0, [pc, #8]	@ (800cd90 <__malloc_lock+0xc>)
 800cd88:	f7ff f877 	bl	800be7a <__retarget_lock_acquire_recursive>
 800cd8c:	bd10      	pop	{r4, pc}
 800cd8e:	46c0      	nop			@ (mov r8, r8)
 800cd90:	20001054 	.word	0x20001054

0800cd94 <__malloc_unlock>:
 800cd94:	b510      	push	{r4, lr}
 800cd96:	4802      	ldr	r0, [pc, #8]	@ (800cda0 <__malloc_unlock+0xc>)
 800cd98:	f7ff f870 	bl	800be7c <__retarget_lock_release_recursive>
 800cd9c:	bd10      	pop	{r4, pc}
 800cd9e:	46c0      	nop			@ (mov r8, r8)
 800cda0:	20001054 	.word	0x20001054

0800cda4 <_Balloc>:
 800cda4:	b570      	push	{r4, r5, r6, lr}
 800cda6:	69c5      	ldr	r5, [r0, #28]
 800cda8:	0006      	movs	r6, r0
 800cdaa:	000c      	movs	r4, r1
 800cdac:	2d00      	cmp	r5, #0
 800cdae:	d10e      	bne.n	800cdce <_Balloc+0x2a>
 800cdb0:	2010      	movs	r0, #16
 800cdb2:	f7ff ff3b 	bl	800cc2c <malloc>
 800cdb6:	1e02      	subs	r2, r0, #0
 800cdb8:	61f0      	str	r0, [r6, #28]
 800cdba:	d104      	bne.n	800cdc6 <_Balloc+0x22>
 800cdbc:	216b      	movs	r1, #107	@ 0x6b
 800cdbe:	4b19      	ldr	r3, [pc, #100]	@ (800ce24 <_Balloc+0x80>)
 800cdc0:	4819      	ldr	r0, [pc, #100]	@ (800ce28 <_Balloc+0x84>)
 800cdc2:	f000 ffb7 	bl	800dd34 <__assert_func>
 800cdc6:	6045      	str	r5, [r0, #4]
 800cdc8:	6085      	str	r5, [r0, #8]
 800cdca:	6005      	str	r5, [r0, #0]
 800cdcc:	60c5      	str	r5, [r0, #12]
 800cdce:	69f5      	ldr	r5, [r6, #28]
 800cdd0:	68eb      	ldr	r3, [r5, #12]
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d013      	beq.n	800cdfe <_Balloc+0x5a>
 800cdd6:	69f3      	ldr	r3, [r6, #28]
 800cdd8:	00a2      	lsls	r2, r4, #2
 800cdda:	68db      	ldr	r3, [r3, #12]
 800cddc:	189b      	adds	r3, r3, r2
 800cdde:	6818      	ldr	r0, [r3, #0]
 800cde0:	2800      	cmp	r0, #0
 800cde2:	d118      	bne.n	800ce16 <_Balloc+0x72>
 800cde4:	2101      	movs	r1, #1
 800cde6:	000d      	movs	r5, r1
 800cde8:	40a5      	lsls	r5, r4
 800cdea:	1d6a      	adds	r2, r5, #5
 800cdec:	0030      	movs	r0, r6
 800cdee:	0092      	lsls	r2, r2, #2
 800cdf0:	f000 ffbe 	bl	800dd70 <_calloc_r>
 800cdf4:	2800      	cmp	r0, #0
 800cdf6:	d00c      	beq.n	800ce12 <_Balloc+0x6e>
 800cdf8:	6044      	str	r4, [r0, #4]
 800cdfa:	6085      	str	r5, [r0, #8]
 800cdfc:	e00d      	b.n	800ce1a <_Balloc+0x76>
 800cdfe:	2221      	movs	r2, #33	@ 0x21
 800ce00:	2104      	movs	r1, #4
 800ce02:	0030      	movs	r0, r6
 800ce04:	f000 ffb4 	bl	800dd70 <_calloc_r>
 800ce08:	69f3      	ldr	r3, [r6, #28]
 800ce0a:	60e8      	str	r0, [r5, #12]
 800ce0c:	68db      	ldr	r3, [r3, #12]
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d1e1      	bne.n	800cdd6 <_Balloc+0x32>
 800ce12:	2000      	movs	r0, #0
 800ce14:	bd70      	pop	{r4, r5, r6, pc}
 800ce16:	6802      	ldr	r2, [r0, #0]
 800ce18:	601a      	str	r2, [r3, #0]
 800ce1a:	2300      	movs	r3, #0
 800ce1c:	6103      	str	r3, [r0, #16]
 800ce1e:	60c3      	str	r3, [r0, #12]
 800ce20:	e7f8      	b.n	800ce14 <_Balloc+0x70>
 800ce22:	46c0      	nop			@ (mov r8, r8)
 800ce24:	0800ea69 	.word	0x0800ea69
 800ce28:	0800eae9 	.word	0x0800eae9

0800ce2c <_Bfree>:
 800ce2c:	b570      	push	{r4, r5, r6, lr}
 800ce2e:	69c6      	ldr	r6, [r0, #28]
 800ce30:	0005      	movs	r5, r0
 800ce32:	000c      	movs	r4, r1
 800ce34:	2e00      	cmp	r6, #0
 800ce36:	d10e      	bne.n	800ce56 <_Bfree+0x2a>
 800ce38:	2010      	movs	r0, #16
 800ce3a:	f7ff fef7 	bl	800cc2c <malloc>
 800ce3e:	1e02      	subs	r2, r0, #0
 800ce40:	61e8      	str	r0, [r5, #28]
 800ce42:	d104      	bne.n	800ce4e <_Bfree+0x22>
 800ce44:	218f      	movs	r1, #143	@ 0x8f
 800ce46:	4b09      	ldr	r3, [pc, #36]	@ (800ce6c <_Bfree+0x40>)
 800ce48:	4809      	ldr	r0, [pc, #36]	@ (800ce70 <_Bfree+0x44>)
 800ce4a:	f000 ff73 	bl	800dd34 <__assert_func>
 800ce4e:	6046      	str	r6, [r0, #4]
 800ce50:	6086      	str	r6, [r0, #8]
 800ce52:	6006      	str	r6, [r0, #0]
 800ce54:	60c6      	str	r6, [r0, #12]
 800ce56:	2c00      	cmp	r4, #0
 800ce58:	d007      	beq.n	800ce6a <_Bfree+0x3e>
 800ce5a:	69eb      	ldr	r3, [r5, #28]
 800ce5c:	6862      	ldr	r2, [r4, #4]
 800ce5e:	68db      	ldr	r3, [r3, #12]
 800ce60:	0092      	lsls	r2, r2, #2
 800ce62:	189b      	adds	r3, r3, r2
 800ce64:	681a      	ldr	r2, [r3, #0]
 800ce66:	6022      	str	r2, [r4, #0]
 800ce68:	601c      	str	r4, [r3, #0]
 800ce6a:	bd70      	pop	{r4, r5, r6, pc}
 800ce6c:	0800ea69 	.word	0x0800ea69
 800ce70:	0800eae9 	.word	0x0800eae9

0800ce74 <__multadd>:
 800ce74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ce76:	000f      	movs	r7, r1
 800ce78:	9001      	str	r0, [sp, #4]
 800ce7a:	000c      	movs	r4, r1
 800ce7c:	001e      	movs	r6, r3
 800ce7e:	2000      	movs	r0, #0
 800ce80:	690d      	ldr	r5, [r1, #16]
 800ce82:	3714      	adds	r7, #20
 800ce84:	683b      	ldr	r3, [r7, #0]
 800ce86:	3001      	adds	r0, #1
 800ce88:	b299      	uxth	r1, r3
 800ce8a:	4351      	muls	r1, r2
 800ce8c:	0c1b      	lsrs	r3, r3, #16
 800ce8e:	4353      	muls	r3, r2
 800ce90:	1989      	adds	r1, r1, r6
 800ce92:	0c0e      	lsrs	r6, r1, #16
 800ce94:	199b      	adds	r3, r3, r6
 800ce96:	0c1e      	lsrs	r6, r3, #16
 800ce98:	b289      	uxth	r1, r1
 800ce9a:	041b      	lsls	r3, r3, #16
 800ce9c:	185b      	adds	r3, r3, r1
 800ce9e:	c708      	stmia	r7!, {r3}
 800cea0:	4285      	cmp	r5, r0
 800cea2:	dcef      	bgt.n	800ce84 <__multadd+0x10>
 800cea4:	2e00      	cmp	r6, #0
 800cea6:	d022      	beq.n	800ceee <__multadd+0x7a>
 800cea8:	68a3      	ldr	r3, [r4, #8]
 800ceaa:	42ab      	cmp	r3, r5
 800ceac:	dc19      	bgt.n	800cee2 <__multadd+0x6e>
 800ceae:	6861      	ldr	r1, [r4, #4]
 800ceb0:	9801      	ldr	r0, [sp, #4]
 800ceb2:	3101      	adds	r1, #1
 800ceb4:	f7ff ff76 	bl	800cda4 <_Balloc>
 800ceb8:	1e07      	subs	r7, r0, #0
 800ceba:	d105      	bne.n	800cec8 <__multadd+0x54>
 800cebc:	003a      	movs	r2, r7
 800cebe:	21ba      	movs	r1, #186	@ 0xba
 800cec0:	4b0c      	ldr	r3, [pc, #48]	@ (800cef4 <__multadd+0x80>)
 800cec2:	480d      	ldr	r0, [pc, #52]	@ (800cef8 <__multadd+0x84>)
 800cec4:	f000 ff36 	bl	800dd34 <__assert_func>
 800cec8:	0021      	movs	r1, r4
 800ceca:	6922      	ldr	r2, [r4, #16]
 800cecc:	310c      	adds	r1, #12
 800cece:	3202      	adds	r2, #2
 800ced0:	0092      	lsls	r2, r2, #2
 800ced2:	300c      	adds	r0, #12
 800ced4:	f000 ff24 	bl	800dd20 <memcpy>
 800ced8:	0021      	movs	r1, r4
 800ceda:	9801      	ldr	r0, [sp, #4]
 800cedc:	f7ff ffa6 	bl	800ce2c <_Bfree>
 800cee0:	003c      	movs	r4, r7
 800cee2:	1d2b      	adds	r3, r5, #4
 800cee4:	009b      	lsls	r3, r3, #2
 800cee6:	18e3      	adds	r3, r4, r3
 800cee8:	3501      	adds	r5, #1
 800ceea:	605e      	str	r6, [r3, #4]
 800ceec:	6125      	str	r5, [r4, #16]
 800ceee:	0020      	movs	r0, r4
 800cef0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800cef2:	46c0      	nop			@ (mov r8, r8)
 800cef4:	0800ead8 	.word	0x0800ead8
 800cef8:	0800eae9 	.word	0x0800eae9

0800cefc <__hi0bits>:
 800cefc:	2280      	movs	r2, #128	@ 0x80
 800cefe:	0003      	movs	r3, r0
 800cf00:	0252      	lsls	r2, r2, #9
 800cf02:	2000      	movs	r0, #0
 800cf04:	4293      	cmp	r3, r2
 800cf06:	d201      	bcs.n	800cf0c <__hi0bits+0x10>
 800cf08:	041b      	lsls	r3, r3, #16
 800cf0a:	3010      	adds	r0, #16
 800cf0c:	2280      	movs	r2, #128	@ 0x80
 800cf0e:	0452      	lsls	r2, r2, #17
 800cf10:	4293      	cmp	r3, r2
 800cf12:	d201      	bcs.n	800cf18 <__hi0bits+0x1c>
 800cf14:	3008      	adds	r0, #8
 800cf16:	021b      	lsls	r3, r3, #8
 800cf18:	2280      	movs	r2, #128	@ 0x80
 800cf1a:	0552      	lsls	r2, r2, #21
 800cf1c:	4293      	cmp	r3, r2
 800cf1e:	d201      	bcs.n	800cf24 <__hi0bits+0x28>
 800cf20:	3004      	adds	r0, #4
 800cf22:	011b      	lsls	r3, r3, #4
 800cf24:	2280      	movs	r2, #128	@ 0x80
 800cf26:	05d2      	lsls	r2, r2, #23
 800cf28:	4293      	cmp	r3, r2
 800cf2a:	d201      	bcs.n	800cf30 <__hi0bits+0x34>
 800cf2c:	3002      	adds	r0, #2
 800cf2e:	009b      	lsls	r3, r3, #2
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	db03      	blt.n	800cf3c <__hi0bits+0x40>
 800cf34:	3001      	adds	r0, #1
 800cf36:	4213      	tst	r3, r2
 800cf38:	d100      	bne.n	800cf3c <__hi0bits+0x40>
 800cf3a:	2020      	movs	r0, #32
 800cf3c:	4770      	bx	lr

0800cf3e <__lo0bits>:
 800cf3e:	6803      	ldr	r3, [r0, #0]
 800cf40:	0001      	movs	r1, r0
 800cf42:	2207      	movs	r2, #7
 800cf44:	0018      	movs	r0, r3
 800cf46:	4010      	ands	r0, r2
 800cf48:	4213      	tst	r3, r2
 800cf4a:	d00d      	beq.n	800cf68 <__lo0bits+0x2a>
 800cf4c:	3a06      	subs	r2, #6
 800cf4e:	2000      	movs	r0, #0
 800cf50:	4213      	tst	r3, r2
 800cf52:	d105      	bne.n	800cf60 <__lo0bits+0x22>
 800cf54:	3002      	adds	r0, #2
 800cf56:	4203      	tst	r3, r0
 800cf58:	d003      	beq.n	800cf62 <__lo0bits+0x24>
 800cf5a:	40d3      	lsrs	r3, r2
 800cf5c:	0010      	movs	r0, r2
 800cf5e:	600b      	str	r3, [r1, #0]
 800cf60:	4770      	bx	lr
 800cf62:	089b      	lsrs	r3, r3, #2
 800cf64:	600b      	str	r3, [r1, #0]
 800cf66:	e7fb      	b.n	800cf60 <__lo0bits+0x22>
 800cf68:	b29a      	uxth	r2, r3
 800cf6a:	2a00      	cmp	r2, #0
 800cf6c:	d101      	bne.n	800cf72 <__lo0bits+0x34>
 800cf6e:	2010      	movs	r0, #16
 800cf70:	0c1b      	lsrs	r3, r3, #16
 800cf72:	b2da      	uxtb	r2, r3
 800cf74:	2a00      	cmp	r2, #0
 800cf76:	d101      	bne.n	800cf7c <__lo0bits+0x3e>
 800cf78:	3008      	adds	r0, #8
 800cf7a:	0a1b      	lsrs	r3, r3, #8
 800cf7c:	071a      	lsls	r2, r3, #28
 800cf7e:	d101      	bne.n	800cf84 <__lo0bits+0x46>
 800cf80:	3004      	adds	r0, #4
 800cf82:	091b      	lsrs	r3, r3, #4
 800cf84:	079a      	lsls	r2, r3, #30
 800cf86:	d101      	bne.n	800cf8c <__lo0bits+0x4e>
 800cf88:	3002      	adds	r0, #2
 800cf8a:	089b      	lsrs	r3, r3, #2
 800cf8c:	07da      	lsls	r2, r3, #31
 800cf8e:	d4e9      	bmi.n	800cf64 <__lo0bits+0x26>
 800cf90:	3001      	adds	r0, #1
 800cf92:	085b      	lsrs	r3, r3, #1
 800cf94:	d1e6      	bne.n	800cf64 <__lo0bits+0x26>
 800cf96:	2020      	movs	r0, #32
 800cf98:	e7e2      	b.n	800cf60 <__lo0bits+0x22>
	...

0800cf9c <__i2b>:
 800cf9c:	b510      	push	{r4, lr}
 800cf9e:	000c      	movs	r4, r1
 800cfa0:	2101      	movs	r1, #1
 800cfa2:	f7ff feff 	bl	800cda4 <_Balloc>
 800cfa6:	2800      	cmp	r0, #0
 800cfa8:	d107      	bne.n	800cfba <__i2b+0x1e>
 800cfaa:	2146      	movs	r1, #70	@ 0x46
 800cfac:	4c05      	ldr	r4, [pc, #20]	@ (800cfc4 <__i2b+0x28>)
 800cfae:	0002      	movs	r2, r0
 800cfb0:	4b05      	ldr	r3, [pc, #20]	@ (800cfc8 <__i2b+0x2c>)
 800cfb2:	0020      	movs	r0, r4
 800cfb4:	31ff      	adds	r1, #255	@ 0xff
 800cfb6:	f000 febd 	bl	800dd34 <__assert_func>
 800cfba:	2301      	movs	r3, #1
 800cfbc:	6144      	str	r4, [r0, #20]
 800cfbe:	6103      	str	r3, [r0, #16]
 800cfc0:	bd10      	pop	{r4, pc}
 800cfc2:	46c0      	nop			@ (mov r8, r8)
 800cfc4:	0800eae9 	.word	0x0800eae9
 800cfc8:	0800ead8 	.word	0x0800ead8

0800cfcc <__multiply>:
 800cfcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cfce:	0014      	movs	r4, r2
 800cfd0:	690a      	ldr	r2, [r1, #16]
 800cfd2:	6923      	ldr	r3, [r4, #16]
 800cfd4:	000d      	movs	r5, r1
 800cfd6:	b08b      	sub	sp, #44	@ 0x2c
 800cfd8:	429a      	cmp	r2, r3
 800cfda:	db02      	blt.n	800cfe2 <__multiply+0x16>
 800cfdc:	0023      	movs	r3, r4
 800cfde:	000c      	movs	r4, r1
 800cfe0:	001d      	movs	r5, r3
 800cfe2:	6927      	ldr	r7, [r4, #16]
 800cfe4:	692e      	ldr	r6, [r5, #16]
 800cfe6:	6861      	ldr	r1, [r4, #4]
 800cfe8:	19bb      	adds	r3, r7, r6
 800cfea:	9303      	str	r3, [sp, #12]
 800cfec:	68a3      	ldr	r3, [r4, #8]
 800cfee:	19ba      	adds	r2, r7, r6
 800cff0:	4293      	cmp	r3, r2
 800cff2:	da00      	bge.n	800cff6 <__multiply+0x2a>
 800cff4:	3101      	adds	r1, #1
 800cff6:	f7ff fed5 	bl	800cda4 <_Balloc>
 800cffa:	9002      	str	r0, [sp, #8]
 800cffc:	2800      	cmp	r0, #0
 800cffe:	d106      	bne.n	800d00e <__multiply+0x42>
 800d000:	21b1      	movs	r1, #177	@ 0xb1
 800d002:	4b49      	ldr	r3, [pc, #292]	@ (800d128 <__multiply+0x15c>)
 800d004:	4849      	ldr	r0, [pc, #292]	@ (800d12c <__multiply+0x160>)
 800d006:	9a02      	ldr	r2, [sp, #8]
 800d008:	0049      	lsls	r1, r1, #1
 800d00a:	f000 fe93 	bl	800dd34 <__assert_func>
 800d00e:	9b02      	ldr	r3, [sp, #8]
 800d010:	2200      	movs	r2, #0
 800d012:	3314      	adds	r3, #20
 800d014:	469c      	mov	ip, r3
 800d016:	19bb      	adds	r3, r7, r6
 800d018:	009b      	lsls	r3, r3, #2
 800d01a:	4463      	add	r3, ip
 800d01c:	9304      	str	r3, [sp, #16]
 800d01e:	4663      	mov	r3, ip
 800d020:	9904      	ldr	r1, [sp, #16]
 800d022:	428b      	cmp	r3, r1
 800d024:	d32a      	bcc.n	800d07c <__multiply+0xb0>
 800d026:	0023      	movs	r3, r4
 800d028:	00bf      	lsls	r7, r7, #2
 800d02a:	3314      	adds	r3, #20
 800d02c:	3514      	adds	r5, #20
 800d02e:	9308      	str	r3, [sp, #32]
 800d030:	00b6      	lsls	r6, r6, #2
 800d032:	19db      	adds	r3, r3, r7
 800d034:	9305      	str	r3, [sp, #20]
 800d036:	19ab      	adds	r3, r5, r6
 800d038:	9309      	str	r3, [sp, #36]	@ 0x24
 800d03a:	2304      	movs	r3, #4
 800d03c:	9306      	str	r3, [sp, #24]
 800d03e:	0023      	movs	r3, r4
 800d040:	9a05      	ldr	r2, [sp, #20]
 800d042:	3315      	adds	r3, #21
 800d044:	9501      	str	r5, [sp, #4]
 800d046:	429a      	cmp	r2, r3
 800d048:	d305      	bcc.n	800d056 <__multiply+0x8a>
 800d04a:	1b13      	subs	r3, r2, r4
 800d04c:	3b15      	subs	r3, #21
 800d04e:	089b      	lsrs	r3, r3, #2
 800d050:	3301      	adds	r3, #1
 800d052:	009b      	lsls	r3, r3, #2
 800d054:	9306      	str	r3, [sp, #24]
 800d056:	9b01      	ldr	r3, [sp, #4]
 800d058:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d05a:	4293      	cmp	r3, r2
 800d05c:	d310      	bcc.n	800d080 <__multiply+0xb4>
 800d05e:	9b03      	ldr	r3, [sp, #12]
 800d060:	2b00      	cmp	r3, #0
 800d062:	dd05      	ble.n	800d070 <__multiply+0xa4>
 800d064:	9b04      	ldr	r3, [sp, #16]
 800d066:	3b04      	subs	r3, #4
 800d068:	9304      	str	r3, [sp, #16]
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d056      	beq.n	800d11e <__multiply+0x152>
 800d070:	9b02      	ldr	r3, [sp, #8]
 800d072:	9a03      	ldr	r2, [sp, #12]
 800d074:	0018      	movs	r0, r3
 800d076:	611a      	str	r2, [r3, #16]
 800d078:	b00b      	add	sp, #44	@ 0x2c
 800d07a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d07c:	c304      	stmia	r3!, {r2}
 800d07e:	e7cf      	b.n	800d020 <__multiply+0x54>
 800d080:	9b01      	ldr	r3, [sp, #4]
 800d082:	6818      	ldr	r0, [r3, #0]
 800d084:	b280      	uxth	r0, r0
 800d086:	2800      	cmp	r0, #0
 800d088:	d01e      	beq.n	800d0c8 <__multiply+0xfc>
 800d08a:	4667      	mov	r7, ip
 800d08c:	2500      	movs	r5, #0
 800d08e:	9e08      	ldr	r6, [sp, #32]
 800d090:	ce02      	ldmia	r6!, {r1}
 800d092:	683b      	ldr	r3, [r7, #0]
 800d094:	9307      	str	r3, [sp, #28]
 800d096:	b28b      	uxth	r3, r1
 800d098:	4343      	muls	r3, r0
 800d09a:	001a      	movs	r2, r3
 800d09c:	466b      	mov	r3, sp
 800d09e:	0c09      	lsrs	r1, r1, #16
 800d0a0:	8b9b      	ldrh	r3, [r3, #28]
 800d0a2:	4341      	muls	r1, r0
 800d0a4:	18d3      	adds	r3, r2, r3
 800d0a6:	9a07      	ldr	r2, [sp, #28]
 800d0a8:	195b      	adds	r3, r3, r5
 800d0aa:	0c12      	lsrs	r2, r2, #16
 800d0ac:	1889      	adds	r1, r1, r2
 800d0ae:	0c1a      	lsrs	r2, r3, #16
 800d0b0:	188a      	adds	r2, r1, r2
 800d0b2:	b29b      	uxth	r3, r3
 800d0b4:	0c15      	lsrs	r5, r2, #16
 800d0b6:	0412      	lsls	r2, r2, #16
 800d0b8:	431a      	orrs	r2, r3
 800d0ba:	9b05      	ldr	r3, [sp, #20]
 800d0bc:	c704      	stmia	r7!, {r2}
 800d0be:	42b3      	cmp	r3, r6
 800d0c0:	d8e6      	bhi.n	800d090 <__multiply+0xc4>
 800d0c2:	4663      	mov	r3, ip
 800d0c4:	9a06      	ldr	r2, [sp, #24]
 800d0c6:	509d      	str	r5, [r3, r2]
 800d0c8:	9b01      	ldr	r3, [sp, #4]
 800d0ca:	6818      	ldr	r0, [r3, #0]
 800d0cc:	0c00      	lsrs	r0, r0, #16
 800d0ce:	d020      	beq.n	800d112 <__multiply+0x146>
 800d0d0:	4663      	mov	r3, ip
 800d0d2:	0025      	movs	r5, r4
 800d0d4:	4661      	mov	r1, ip
 800d0d6:	2700      	movs	r7, #0
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	3514      	adds	r5, #20
 800d0dc:	682a      	ldr	r2, [r5, #0]
 800d0de:	680e      	ldr	r6, [r1, #0]
 800d0e0:	b292      	uxth	r2, r2
 800d0e2:	4342      	muls	r2, r0
 800d0e4:	0c36      	lsrs	r6, r6, #16
 800d0e6:	1992      	adds	r2, r2, r6
 800d0e8:	19d2      	adds	r2, r2, r7
 800d0ea:	0416      	lsls	r6, r2, #16
 800d0ec:	b29b      	uxth	r3, r3
 800d0ee:	431e      	orrs	r6, r3
 800d0f0:	600e      	str	r6, [r1, #0]
 800d0f2:	cd40      	ldmia	r5!, {r6}
 800d0f4:	684b      	ldr	r3, [r1, #4]
 800d0f6:	0c36      	lsrs	r6, r6, #16
 800d0f8:	4346      	muls	r6, r0
 800d0fa:	b29b      	uxth	r3, r3
 800d0fc:	0c12      	lsrs	r2, r2, #16
 800d0fe:	18f3      	adds	r3, r6, r3
 800d100:	189b      	adds	r3, r3, r2
 800d102:	9a05      	ldr	r2, [sp, #20]
 800d104:	0c1f      	lsrs	r7, r3, #16
 800d106:	3104      	adds	r1, #4
 800d108:	42aa      	cmp	r2, r5
 800d10a:	d8e7      	bhi.n	800d0dc <__multiply+0x110>
 800d10c:	4662      	mov	r2, ip
 800d10e:	9906      	ldr	r1, [sp, #24]
 800d110:	5053      	str	r3, [r2, r1]
 800d112:	9b01      	ldr	r3, [sp, #4]
 800d114:	3304      	adds	r3, #4
 800d116:	9301      	str	r3, [sp, #4]
 800d118:	2304      	movs	r3, #4
 800d11a:	449c      	add	ip, r3
 800d11c:	e79b      	b.n	800d056 <__multiply+0x8a>
 800d11e:	9b03      	ldr	r3, [sp, #12]
 800d120:	3b01      	subs	r3, #1
 800d122:	9303      	str	r3, [sp, #12]
 800d124:	e79b      	b.n	800d05e <__multiply+0x92>
 800d126:	46c0      	nop			@ (mov r8, r8)
 800d128:	0800ead8 	.word	0x0800ead8
 800d12c:	0800eae9 	.word	0x0800eae9

0800d130 <__pow5mult>:
 800d130:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d132:	2303      	movs	r3, #3
 800d134:	0015      	movs	r5, r2
 800d136:	0007      	movs	r7, r0
 800d138:	000e      	movs	r6, r1
 800d13a:	401a      	ands	r2, r3
 800d13c:	421d      	tst	r5, r3
 800d13e:	d008      	beq.n	800d152 <__pow5mult+0x22>
 800d140:	4925      	ldr	r1, [pc, #148]	@ (800d1d8 <__pow5mult+0xa8>)
 800d142:	3a01      	subs	r2, #1
 800d144:	0092      	lsls	r2, r2, #2
 800d146:	5852      	ldr	r2, [r2, r1]
 800d148:	2300      	movs	r3, #0
 800d14a:	0031      	movs	r1, r6
 800d14c:	f7ff fe92 	bl	800ce74 <__multadd>
 800d150:	0006      	movs	r6, r0
 800d152:	10ad      	asrs	r5, r5, #2
 800d154:	d03d      	beq.n	800d1d2 <__pow5mult+0xa2>
 800d156:	69fc      	ldr	r4, [r7, #28]
 800d158:	2c00      	cmp	r4, #0
 800d15a:	d10f      	bne.n	800d17c <__pow5mult+0x4c>
 800d15c:	2010      	movs	r0, #16
 800d15e:	f7ff fd65 	bl	800cc2c <malloc>
 800d162:	1e02      	subs	r2, r0, #0
 800d164:	61f8      	str	r0, [r7, #28]
 800d166:	d105      	bne.n	800d174 <__pow5mult+0x44>
 800d168:	21b4      	movs	r1, #180	@ 0xb4
 800d16a:	4b1c      	ldr	r3, [pc, #112]	@ (800d1dc <__pow5mult+0xac>)
 800d16c:	481c      	ldr	r0, [pc, #112]	@ (800d1e0 <__pow5mult+0xb0>)
 800d16e:	31ff      	adds	r1, #255	@ 0xff
 800d170:	f000 fde0 	bl	800dd34 <__assert_func>
 800d174:	6044      	str	r4, [r0, #4]
 800d176:	6084      	str	r4, [r0, #8]
 800d178:	6004      	str	r4, [r0, #0]
 800d17a:	60c4      	str	r4, [r0, #12]
 800d17c:	69fb      	ldr	r3, [r7, #28]
 800d17e:	689c      	ldr	r4, [r3, #8]
 800d180:	9301      	str	r3, [sp, #4]
 800d182:	2c00      	cmp	r4, #0
 800d184:	d108      	bne.n	800d198 <__pow5mult+0x68>
 800d186:	0038      	movs	r0, r7
 800d188:	4916      	ldr	r1, [pc, #88]	@ (800d1e4 <__pow5mult+0xb4>)
 800d18a:	f7ff ff07 	bl	800cf9c <__i2b>
 800d18e:	9b01      	ldr	r3, [sp, #4]
 800d190:	0004      	movs	r4, r0
 800d192:	6098      	str	r0, [r3, #8]
 800d194:	2300      	movs	r3, #0
 800d196:	6003      	str	r3, [r0, #0]
 800d198:	2301      	movs	r3, #1
 800d19a:	421d      	tst	r5, r3
 800d19c:	d00a      	beq.n	800d1b4 <__pow5mult+0x84>
 800d19e:	0031      	movs	r1, r6
 800d1a0:	0022      	movs	r2, r4
 800d1a2:	0038      	movs	r0, r7
 800d1a4:	f7ff ff12 	bl	800cfcc <__multiply>
 800d1a8:	0031      	movs	r1, r6
 800d1aa:	9001      	str	r0, [sp, #4]
 800d1ac:	0038      	movs	r0, r7
 800d1ae:	f7ff fe3d 	bl	800ce2c <_Bfree>
 800d1b2:	9e01      	ldr	r6, [sp, #4]
 800d1b4:	106d      	asrs	r5, r5, #1
 800d1b6:	d00c      	beq.n	800d1d2 <__pow5mult+0xa2>
 800d1b8:	6820      	ldr	r0, [r4, #0]
 800d1ba:	2800      	cmp	r0, #0
 800d1bc:	d107      	bne.n	800d1ce <__pow5mult+0x9e>
 800d1be:	0022      	movs	r2, r4
 800d1c0:	0021      	movs	r1, r4
 800d1c2:	0038      	movs	r0, r7
 800d1c4:	f7ff ff02 	bl	800cfcc <__multiply>
 800d1c8:	2300      	movs	r3, #0
 800d1ca:	6020      	str	r0, [r4, #0]
 800d1cc:	6003      	str	r3, [r0, #0]
 800d1ce:	0004      	movs	r4, r0
 800d1d0:	e7e2      	b.n	800d198 <__pow5mult+0x68>
 800d1d2:	0030      	movs	r0, r6
 800d1d4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d1d6:	46c0      	nop			@ (mov r8, r8)
 800d1d8:	0800eb44 	.word	0x0800eb44
 800d1dc:	0800ea69 	.word	0x0800ea69
 800d1e0:	0800eae9 	.word	0x0800eae9
 800d1e4:	00000271 	.word	0x00000271

0800d1e8 <__lshift>:
 800d1e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d1ea:	000c      	movs	r4, r1
 800d1ec:	0016      	movs	r6, r2
 800d1ee:	6923      	ldr	r3, [r4, #16]
 800d1f0:	1157      	asrs	r7, r2, #5
 800d1f2:	b085      	sub	sp, #20
 800d1f4:	18fb      	adds	r3, r7, r3
 800d1f6:	9301      	str	r3, [sp, #4]
 800d1f8:	3301      	adds	r3, #1
 800d1fa:	9300      	str	r3, [sp, #0]
 800d1fc:	6849      	ldr	r1, [r1, #4]
 800d1fe:	68a3      	ldr	r3, [r4, #8]
 800d200:	9002      	str	r0, [sp, #8]
 800d202:	9a00      	ldr	r2, [sp, #0]
 800d204:	4293      	cmp	r3, r2
 800d206:	db10      	blt.n	800d22a <__lshift+0x42>
 800d208:	9802      	ldr	r0, [sp, #8]
 800d20a:	f7ff fdcb 	bl	800cda4 <_Balloc>
 800d20e:	2300      	movs	r3, #0
 800d210:	0001      	movs	r1, r0
 800d212:	0005      	movs	r5, r0
 800d214:	001a      	movs	r2, r3
 800d216:	3114      	adds	r1, #20
 800d218:	4298      	cmp	r0, r3
 800d21a:	d10c      	bne.n	800d236 <__lshift+0x4e>
 800d21c:	21ef      	movs	r1, #239	@ 0xef
 800d21e:	002a      	movs	r2, r5
 800d220:	4b25      	ldr	r3, [pc, #148]	@ (800d2b8 <__lshift+0xd0>)
 800d222:	4826      	ldr	r0, [pc, #152]	@ (800d2bc <__lshift+0xd4>)
 800d224:	0049      	lsls	r1, r1, #1
 800d226:	f000 fd85 	bl	800dd34 <__assert_func>
 800d22a:	3101      	adds	r1, #1
 800d22c:	005b      	lsls	r3, r3, #1
 800d22e:	e7e8      	b.n	800d202 <__lshift+0x1a>
 800d230:	0098      	lsls	r0, r3, #2
 800d232:	500a      	str	r2, [r1, r0]
 800d234:	3301      	adds	r3, #1
 800d236:	42bb      	cmp	r3, r7
 800d238:	dbfa      	blt.n	800d230 <__lshift+0x48>
 800d23a:	43fb      	mvns	r3, r7
 800d23c:	17db      	asrs	r3, r3, #31
 800d23e:	401f      	ands	r7, r3
 800d240:	00bf      	lsls	r7, r7, #2
 800d242:	0023      	movs	r3, r4
 800d244:	201f      	movs	r0, #31
 800d246:	19c9      	adds	r1, r1, r7
 800d248:	0037      	movs	r7, r6
 800d24a:	6922      	ldr	r2, [r4, #16]
 800d24c:	3314      	adds	r3, #20
 800d24e:	0092      	lsls	r2, r2, #2
 800d250:	189a      	adds	r2, r3, r2
 800d252:	4007      	ands	r7, r0
 800d254:	4206      	tst	r6, r0
 800d256:	d029      	beq.n	800d2ac <__lshift+0xc4>
 800d258:	3001      	adds	r0, #1
 800d25a:	1bc0      	subs	r0, r0, r7
 800d25c:	9003      	str	r0, [sp, #12]
 800d25e:	468c      	mov	ip, r1
 800d260:	2000      	movs	r0, #0
 800d262:	681e      	ldr	r6, [r3, #0]
 800d264:	40be      	lsls	r6, r7
 800d266:	4306      	orrs	r6, r0
 800d268:	4660      	mov	r0, ip
 800d26a:	c040      	stmia	r0!, {r6}
 800d26c:	4684      	mov	ip, r0
 800d26e:	9e03      	ldr	r6, [sp, #12]
 800d270:	cb01      	ldmia	r3!, {r0}
 800d272:	40f0      	lsrs	r0, r6
 800d274:	429a      	cmp	r2, r3
 800d276:	d8f4      	bhi.n	800d262 <__lshift+0x7a>
 800d278:	0026      	movs	r6, r4
 800d27a:	3615      	adds	r6, #21
 800d27c:	2304      	movs	r3, #4
 800d27e:	42b2      	cmp	r2, r6
 800d280:	d304      	bcc.n	800d28c <__lshift+0xa4>
 800d282:	1b13      	subs	r3, r2, r4
 800d284:	3b15      	subs	r3, #21
 800d286:	089b      	lsrs	r3, r3, #2
 800d288:	3301      	adds	r3, #1
 800d28a:	009b      	lsls	r3, r3, #2
 800d28c:	50c8      	str	r0, [r1, r3]
 800d28e:	2800      	cmp	r0, #0
 800d290:	d002      	beq.n	800d298 <__lshift+0xb0>
 800d292:	9b01      	ldr	r3, [sp, #4]
 800d294:	3302      	adds	r3, #2
 800d296:	9300      	str	r3, [sp, #0]
 800d298:	9b00      	ldr	r3, [sp, #0]
 800d29a:	9802      	ldr	r0, [sp, #8]
 800d29c:	3b01      	subs	r3, #1
 800d29e:	0021      	movs	r1, r4
 800d2a0:	612b      	str	r3, [r5, #16]
 800d2a2:	f7ff fdc3 	bl	800ce2c <_Bfree>
 800d2a6:	0028      	movs	r0, r5
 800d2a8:	b005      	add	sp, #20
 800d2aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d2ac:	cb01      	ldmia	r3!, {r0}
 800d2ae:	c101      	stmia	r1!, {r0}
 800d2b0:	429a      	cmp	r2, r3
 800d2b2:	d8fb      	bhi.n	800d2ac <__lshift+0xc4>
 800d2b4:	e7f0      	b.n	800d298 <__lshift+0xb0>
 800d2b6:	46c0      	nop			@ (mov r8, r8)
 800d2b8:	0800ead8 	.word	0x0800ead8
 800d2bc:	0800eae9 	.word	0x0800eae9

0800d2c0 <__mcmp>:
 800d2c0:	b530      	push	{r4, r5, lr}
 800d2c2:	690b      	ldr	r3, [r1, #16]
 800d2c4:	6904      	ldr	r4, [r0, #16]
 800d2c6:	0002      	movs	r2, r0
 800d2c8:	1ae0      	subs	r0, r4, r3
 800d2ca:	429c      	cmp	r4, r3
 800d2cc:	d10f      	bne.n	800d2ee <__mcmp+0x2e>
 800d2ce:	3214      	adds	r2, #20
 800d2d0:	009b      	lsls	r3, r3, #2
 800d2d2:	3114      	adds	r1, #20
 800d2d4:	0014      	movs	r4, r2
 800d2d6:	18c9      	adds	r1, r1, r3
 800d2d8:	18d2      	adds	r2, r2, r3
 800d2da:	3a04      	subs	r2, #4
 800d2dc:	3904      	subs	r1, #4
 800d2de:	6815      	ldr	r5, [r2, #0]
 800d2e0:	680b      	ldr	r3, [r1, #0]
 800d2e2:	429d      	cmp	r5, r3
 800d2e4:	d004      	beq.n	800d2f0 <__mcmp+0x30>
 800d2e6:	2001      	movs	r0, #1
 800d2e8:	429d      	cmp	r5, r3
 800d2ea:	d200      	bcs.n	800d2ee <__mcmp+0x2e>
 800d2ec:	3802      	subs	r0, #2
 800d2ee:	bd30      	pop	{r4, r5, pc}
 800d2f0:	4294      	cmp	r4, r2
 800d2f2:	d3f2      	bcc.n	800d2da <__mcmp+0x1a>
 800d2f4:	e7fb      	b.n	800d2ee <__mcmp+0x2e>
	...

0800d2f8 <__mdiff>:
 800d2f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d2fa:	000c      	movs	r4, r1
 800d2fc:	b087      	sub	sp, #28
 800d2fe:	9000      	str	r0, [sp, #0]
 800d300:	0011      	movs	r1, r2
 800d302:	0020      	movs	r0, r4
 800d304:	0017      	movs	r7, r2
 800d306:	f7ff ffdb 	bl	800d2c0 <__mcmp>
 800d30a:	1e05      	subs	r5, r0, #0
 800d30c:	d110      	bne.n	800d330 <__mdiff+0x38>
 800d30e:	0001      	movs	r1, r0
 800d310:	9800      	ldr	r0, [sp, #0]
 800d312:	f7ff fd47 	bl	800cda4 <_Balloc>
 800d316:	1e02      	subs	r2, r0, #0
 800d318:	d104      	bne.n	800d324 <__mdiff+0x2c>
 800d31a:	4b40      	ldr	r3, [pc, #256]	@ (800d41c <__mdiff+0x124>)
 800d31c:	4840      	ldr	r0, [pc, #256]	@ (800d420 <__mdiff+0x128>)
 800d31e:	4941      	ldr	r1, [pc, #260]	@ (800d424 <__mdiff+0x12c>)
 800d320:	f000 fd08 	bl	800dd34 <__assert_func>
 800d324:	2301      	movs	r3, #1
 800d326:	6145      	str	r5, [r0, #20]
 800d328:	6103      	str	r3, [r0, #16]
 800d32a:	0010      	movs	r0, r2
 800d32c:	b007      	add	sp, #28
 800d32e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d330:	2600      	movs	r6, #0
 800d332:	42b0      	cmp	r0, r6
 800d334:	da03      	bge.n	800d33e <__mdiff+0x46>
 800d336:	0023      	movs	r3, r4
 800d338:	003c      	movs	r4, r7
 800d33a:	001f      	movs	r7, r3
 800d33c:	3601      	adds	r6, #1
 800d33e:	6861      	ldr	r1, [r4, #4]
 800d340:	9800      	ldr	r0, [sp, #0]
 800d342:	f7ff fd2f 	bl	800cda4 <_Balloc>
 800d346:	1e02      	subs	r2, r0, #0
 800d348:	d103      	bne.n	800d352 <__mdiff+0x5a>
 800d34a:	4b34      	ldr	r3, [pc, #208]	@ (800d41c <__mdiff+0x124>)
 800d34c:	4834      	ldr	r0, [pc, #208]	@ (800d420 <__mdiff+0x128>)
 800d34e:	4936      	ldr	r1, [pc, #216]	@ (800d428 <__mdiff+0x130>)
 800d350:	e7e6      	b.n	800d320 <__mdiff+0x28>
 800d352:	6923      	ldr	r3, [r4, #16]
 800d354:	3414      	adds	r4, #20
 800d356:	9300      	str	r3, [sp, #0]
 800d358:	009b      	lsls	r3, r3, #2
 800d35a:	18e3      	adds	r3, r4, r3
 800d35c:	0021      	movs	r1, r4
 800d35e:	9401      	str	r4, [sp, #4]
 800d360:	003c      	movs	r4, r7
 800d362:	9302      	str	r3, [sp, #8]
 800d364:	693b      	ldr	r3, [r7, #16]
 800d366:	3414      	adds	r4, #20
 800d368:	009b      	lsls	r3, r3, #2
 800d36a:	18e3      	adds	r3, r4, r3
 800d36c:	9303      	str	r3, [sp, #12]
 800d36e:	0003      	movs	r3, r0
 800d370:	60c6      	str	r6, [r0, #12]
 800d372:	468c      	mov	ip, r1
 800d374:	2000      	movs	r0, #0
 800d376:	3314      	adds	r3, #20
 800d378:	9304      	str	r3, [sp, #16]
 800d37a:	9305      	str	r3, [sp, #20]
 800d37c:	4663      	mov	r3, ip
 800d37e:	cb20      	ldmia	r3!, {r5}
 800d380:	b2a9      	uxth	r1, r5
 800d382:	000e      	movs	r6, r1
 800d384:	469c      	mov	ip, r3
 800d386:	cc08      	ldmia	r4!, {r3}
 800d388:	0c2d      	lsrs	r5, r5, #16
 800d38a:	b299      	uxth	r1, r3
 800d38c:	1a71      	subs	r1, r6, r1
 800d38e:	1809      	adds	r1, r1, r0
 800d390:	0c1b      	lsrs	r3, r3, #16
 800d392:	1408      	asrs	r0, r1, #16
 800d394:	1aeb      	subs	r3, r5, r3
 800d396:	181b      	adds	r3, r3, r0
 800d398:	1418      	asrs	r0, r3, #16
 800d39a:	b289      	uxth	r1, r1
 800d39c:	041b      	lsls	r3, r3, #16
 800d39e:	4319      	orrs	r1, r3
 800d3a0:	9b05      	ldr	r3, [sp, #20]
 800d3a2:	c302      	stmia	r3!, {r1}
 800d3a4:	9305      	str	r3, [sp, #20]
 800d3a6:	9b03      	ldr	r3, [sp, #12]
 800d3a8:	42a3      	cmp	r3, r4
 800d3aa:	d8e7      	bhi.n	800d37c <__mdiff+0x84>
 800d3ac:	0039      	movs	r1, r7
 800d3ae:	9c03      	ldr	r4, [sp, #12]
 800d3b0:	3115      	adds	r1, #21
 800d3b2:	2304      	movs	r3, #4
 800d3b4:	428c      	cmp	r4, r1
 800d3b6:	d304      	bcc.n	800d3c2 <__mdiff+0xca>
 800d3b8:	1be3      	subs	r3, r4, r7
 800d3ba:	3b15      	subs	r3, #21
 800d3bc:	089b      	lsrs	r3, r3, #2
 800d3be:	3301      	adds	r3, #1
 800d3c0:	009b      	lsls	r3, r3, #2
 800d3c2:	9901      	ldr	r1, [sp, #4]
 800d3c4:	18cd      	adds	r5, r1, r3
 800d3c6:	9904      	ldr	r1, [sp, #16]
 800d3c8:	002e      	movs	r6, r5
 800d3ca:	18cb      	adds	r3, r1, r3
 800d3cc:	001f      	movs	r7, r3
 800d3ce:	9902      	ldr	r1, [sp, #8]
 800d3d0:	428e      	cmp	r6, r1
 800d3d2:	d311      	bcc.n	800d3f8 <__mdiff+0x100>
 800d3d4:	9c02      	ldr	r4, [sp, #8]
 800d3d6:	1ee9      	subs	r1, r5, #3
 800d3d8:	2000      	movs	r0, #0
 800d3da:	428c      	cmp	r4, r1
 800d3dc:	d304      	bcc.n	800d3e8 <__mdiff+0xf0>
 800d3de:	0021      	movs	r1, r4
 800d3e0:	3103      	adds	r1, #3
 800d3e2:	1b49      	subs	r1, r1, r5
 800d3e4:	0889      	lsrs	r1, r1, #2
 800d3e6:	0088      	lsls	r0, r1, #2
 800d3e8:	181b      	adds	r3, r3, r0
 800d3ea:	3b04      	subs	r3, #4
 800d3ec:	6819      	ldr	r1, [r3, #0]
 800d3ee:	2900      	cmp	r1, #0
 800d3f0:	d010      	beq.n	800d414 <__mdiff+0x11c>
 800d3f2:	9b00      	ldr	r3, [sp, #0]
 800d3f4:	6113      	str	r3, [r2, #16]
 800d3f6:	e798      	b.n	800d32a <__mdiff+0x32>
 800d3f8:	4684      	mov	ip, r0
 800d3fa:	ce02      	ldmia	r6!, {r1}
 800d3fc:	b288      	uxth	r0, r1
 800d3fe:	4460      	add	r0, ip
 800d400:	1400      	asrs	r0, r0, #16
 800d402:	0c0c      	lsrs	r4, r1, #16
 800d404:	1904      	adds	r4, r0, r4
 800d406:	4461      	add	r1, ip
 800d408:	1420      	asrs	r0, r4, #16
 800d40a:	b289      	uxth	r1, r1
 800d40c:	0424      	lsls	r4, r4, #16
 800d40e:	4321      	orrs	r1, r4
 800d410:	c702      	stmia	r7!, {r1}
 800d412:	e7dc      	b.n	800d3ce <__mdiff+0xd6>
 800d414:	9900      	ldr	r1, [sp, #0]
 800d416:	3901      	subs	r1, #1
 800d418:	9100      	str	r1, [sp, #0]
 800d41a:	e7e6      	b.n	800d3ea <__mdiff+0xf2>
 800d41c:	0800ead8 	.word	0x0800ead8
 800d420:	0800eae9 	.word	0x0800eae9
 800d424:	00000237 	.word	0x00000237
 800d428:	00000245 	.word	0x00000245

0800d42c <__d2b>:
 800d42c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d42e:	2101      	movs	r1, #1
 800d430:	0016      	movs	r6, r2
 800d432:	001f      	movs	r7, r3
 800d434:	f7ff fcb6 	bl	800cda4 <_Balloc>
 800d438:	1e04      	subs	r4, r0, #0
 800d43a:	d105      	bne.n	800d448 <__d2b+0x1c>
 800d43c:	0022      	movs	r2, r4
 800d43e:	4b25      	ldr	r3, [pc, #148]	@ (800d4d4 <__d2b+0xa8>)
 800d440:	4825      	ldr	r0, [pc, #148]	@ (800d4d8 <__d2b+0xac>)
 800d442:	4926      	ldr	r1, [pc, #152]	@ (800d4dc <__d2b+0xb0>)
 800d444:	f000 fc76 	bl	800dd34 <__assert_func>
 800d448:	033b      	lsls	r3, r7, #12
 800d44a:	007d      	lsls	r5, r7, #1
 800d44c:	0b1b      	lsrs	r3, r3, #12
 800d44e:	0d6d      	lsrs	r5, r5, #21
 800d450:	d002      	beq.n	800d458 <__d2b+0x2c>
 800d452:	2280      	movs	r2, #128	@ 0x80
 800d454:	0352      	lsls	r2, r2, #13
 800d456:	4313      	orrs	r3, r2
 800d458:	9301      	str	r3, [sp, #4]
 800d45a:	2e00      	cmp	r6, #0
 800d45c:	d025      	beq.n	800d4aa <__d2b+0x7e>
 800d45e:	4668      	mov	r0, sp
 800d460:	9600      	str	r6, [sp, #0]
 800d462:	f7ff fd6c 	bl	800cf3e <__lo0bits>
 800d466:	9b01      	ldr	r3, [sp, #4]
 800d468:	9900      	ldr	r1, [sp, #0]
 800d46a:	2800      	cmp	r0, #0
 800d46c:	d01b      	beq.n	800d4a6 <__d2b+0x7a>
 800d46e:	2220      	movs	r2, #32
 800d470:	001e      	movs	r6, r3
 800d472:	1a12      	subs	r2, r2, r0
 800d474:	4096      	lsls	r6, r2
 800d476:	0032      	movs	r2, r6
 800d478:	40c3      	lsrs	r3, r0
 800d47a:	430a      	orrs	r2, r1
 800d47c:	6162      	str	r2, [r4, #20]
 800d47e:	9301      	str	r3, [sp, #4]
 800d480:	9e01      	ldr	r6, [sp, #4]
 800d482:	61a6      	str	r6, [r4, #24]
 800d484:	1e73      	subs	r3, r6, #1
 800d486:	419e      	sbcs	r6, r3
 800d488:	3601      	adds	r6, #1
 800d48a:	6126      	str	r6, [r4, #16]
 800d48c:	2d00      	cmp	r5, #0
 800d48e:	d014      	beq.n	800d4ba <__d2b+0x8e>
 800d490:	2635      	movs	r6, #53	@ 0x35
 800d492:	4b13      	ldr	r3, [pc, #76]	@ (800d4e0 <__d2b+0xb4>)
 800d494:	18ed      	adds	r5, r5, r3
 800d496:	9b08      	ldr	r3, [sp, #32]
 800d498:	182d      	adds	r5, r5, r0
 800d49a:	601d      	str	r5, [r3, #0]
 800d49c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d49e:	1a36      	subs	r6, r6, r0
 800d4a0:	601e      	str	r6, [r3, #0]
 800d4a2:	0020      	movs	r0, r4
 800d4a4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d4a6:	6161      	str	r1, [r4, #20]
 800d4a8:	e7ea      	b.n	800d480 <__d2b+0x54>
 800d4aa:	a801      	add	r0, sp, #4
 800d4ac:	f7ff fd47 	bl	800cf3e <__lo0bits>
 800d4b0:	9b01      	ldr	r3, [sp, #4]
 800d4b2:	2601      	movs	r6, #1
 800d4b4:	6163      	str	r3, [r4, #20]
 800d4b6:	3020      	adds	r0, #32
 800d4b8:	e7e7      	b.n	800d48a <__d2b+0x5e>
 800d4ba:	4b0a      	ldr	r3, [pc, #40]	@ (800d4e4 <__d2b+0xb8>)
 800d4bc:	18c0      	adds	r0, r0, r3
 800d4be:	9b08      	ldr	r3, [sp, #32]
 800d4c0:	6018      	str	r0, [r3, #0]
 800d4c2:	4b09      	ldr	r3, [pc, #36]	@ (800d4e8 <__d2b+0xbc>)
 800d4c4:	18f3      	adds	r3, r6, r3
 800d4c6:	009b      	lsls	r3, r3, #2
 800d4c8:	18e3      	adds	r3, r4, r3
 800d4ca:	6958      	ldr	r0, [r3, #20]
 800d4cc:	f7ff fd16 	bl	800cefc <__hi0bits>
 800d4d0:	0176      	lsls	r6, r6, #5
 800d4d2:	e7e3      	b.n	800d49c <__d2b+0x70>
 800d4d4:	0800ead8 	.word	0x0800ead8
 800d4d8:	0800eae9 	.word	0x0800eae9
 800d4dc:	0000030f 	.word	0x0000030f
 800d4e0:	fffffbcd 	.word	0xfffffbcd
 800d4e4:	fffffbce 	.word	0xfffffbce
 800d4e8:	3fffffff 	.word	0x3fffffff

0800d4ec <__ssputs_r>:
 800d4ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d4ee:	688e      	ldr	r6, [r1, #8]
 800d4f0:	b085      	sub	sp, #20
 800d4f2:	001f      	movs	r7, r3
 800d4f4:	000c      	movs	r4, r1
 800d4f6:	680b      	ldr	r3, [r1, #0]
 800d4f8:	9002      	str	r0, [sp, #8]
 800d4fa:	9203      	str	r2, [sp, #12]
 800d4fc:	42be      	cmp	r6, r7
 800d4fe:	d830      	bhi.n	800d562 <__ssputs_r+0x76>
 800d500:	210c      	movs	r1, #12
 800d502:	5e62      	ldrsh	r2, [r4, r1]
 800d504:	2190      	movs	r1, #144	@ 0x90
 800d506:	00c9      	lsls	r1, r1, #3
 800d508:	420a      	tst	r2, r1
 800d50a:	d028      	beq.n	800d55e <__ssputs_r+0x72>
 800d50c:	2003      	movs	r0, #3
 800d50e:	6921      	ldr	r1, [r4, #16]
 800d510:	1a5b      	subs	r3, r3, r1
 800d512:	9301      	str	r3, [sp, #4]
 800d514:	6963      	ldr	r3, [r4, #20]
 800d516:	4343      	muls	r3, r0
 800d518:	9801      	ldr	r0, [sp, #4]
 800d51a:	0fdd      	lsrs	r5, r3, #31
 800d51c:	18ed      	adds	r5, r5, r3
 800d51e:	1c7b      	adds	r3, r7, #1
 800d520:	181b      	adds	r3, r3, r0
 800d522:	106d      	asrs	r5, r5, #1
 800d524:	42ab      	cmp	r3, r5
 800d526:	d900      	bls.n	800d52a <__ssputs_r+0x3e>
 800d528:	001d      	movs	r5, r3
 800d52a:	0552      	lsls	r2, r2, #21
 800d52c:	d528      	bpl.n	800d580 <__ssputs_r+0x94>
 800d52e:	0029      	movs	r1, r5
 800d530:	9802      	ldr	r0, [sp, #8]
 800d532:	f7ff fba7 	bl	800cc84 <_malloc_r>
 800d536:	1e06      	subs	r6, r0, #0
 800d538:	d02c      	beq.n	800d594 <__ssputs_r+0xa8>
 800d53a:	9a01      	ldr	r2, [sp, #4]
 800d53c:	6921      	ldr	r1, [r4, #16]
 800d53e:	f000 fbef 	bl	800dd20 <memcpy>
 800d542:	89a2      	ldrh	r2, [r4, #12]
 800d544:	4b18      	ldr	r3, [pc, #96]	@ (800d5a8 <__ssputs_r+0xbc>)
 800d546:	401a      	ands	r2, r3
 800d548:	2380      	movs	r3, #128	@ 0x80
 800d54a:	4313      	orrs	r3, r2
 800d54c:	81a3      	strh	r3, [r4, #12]
 800d54e:	9b01      	ldr	r3, [sp, #4]
 800d550:	6126      	str	r6, [r4, #16]
 800d552:	18f6      	adds	r6, r6, r3
 800d554:	6026      	str	r6, [r4, #0]
 800d556:	003e      	movs	r6, r7
 800d558:	6165      	str	r5, [r4, #20]
 800d55a:	1aed      	subs	r5, r5, r3
 800d55c:	60a5      	str	r5, [r4, #8]
 800d55e:	42be      	cmp	r6, r7
 800d560:	d900      	bls.n	800d564 <__ssputs_r+0x78>
 800d562:	003e      	movs	r6, r7
 800d564:	0032      	movs	r2, r6
 800d566:	9903      	ldr	r1, [sp, #12]
 800d568:	6820      	ldr	r0, [r4, #0]
 800d56a:	f000 fbb3 	bl	800dcd4 <memmove>
 800d56e:	2000      	movs	r0, #0
 800d570:	68a3      	ldr	r3, [r4, #8]
 800d572:	1b9b      	subs	r3, r3, r6
 800d574:	60a3      	str	r3, [r4, #8]
 800d576:	6823      	ldr	r3, [r4, #0]
 800d578:	199b      	adds	r3, r3, r6
 800d57a:	6023      	str	r3, [r4, #0]
 800d57c:	b005      	add	sp, #20
 800d57e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d580:	002a      	movs	r2, r5
 800d582:	9802      	ldr	r0, [sp, #8]
 800d584:	f000 fc33 	bl	800ddee <_realloc_r>
 800d588:	1e06      	subs	r6, r0, #0
 800d58a:	d1e0      	bne.n	800d54e <__ssputs_r+0x62>
 800d58c:	6921      	ldr	r1, [r4, #16]
 800d58e:	9802      	ldr	r0, [sp, #8]
 800d590:	f7ff fb02 	bl	800cb98 <_free_r>
 800d594:	230c      	movs	r3, #12
 800d596:	2001      	movs	r0, #1
 800d598:	9a02      	ldr	r2, [sp, #8]
 800d59a:	4240      	negs	r0, r0
 800d59c:	6013      	str	r3, [r2, #0]
 800d59e:	89a2      	ldrh	r2, [r4, #12]
 800d5a0:	3334      	adds	r3, #52	@ 0x34
 800d5a2:	4313      	orrs	r3, r2
 800d5a4:	81a3      	strh	r3, [r4, #12]
 800d5a6:	e7e9      	b.n	800d57c <__ssputs_r+0x90>
 800d5a8:	fffffb7f 	.word	0xfffffb7f

0800d5ac <_svfiprintf_r>:
 800d5ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d5ae:	b0a1      	sub	sp, #132	@ 0x84
 800d5b0:	9003      	str	r0, [sp, #12]
 800d5b2:	001d      	movs	r5, r3
 800d5b4:	898b      	ldrh	r3, [r1, #12]
 800d5b6:	000f      	movs	r7, r1
 800d5b8:	0016      	movs	r6, r2
 800d5ba:	061b      	lsls	r3, r3, #24
 800d5bc:	d511      	bpl.n	800d5e2 <_svfiprintf_r+0x36>
 800d5be:	690b      	ldr	r3, [r1, #16]
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d10e      	bne.n	800d5e2 <_svfiprintf_r+0x36>
 800d5c4:	2140      	movs	r1, #64	@ 0x40
 800d5c6:	f7ff fb5d 	bl	800cc84 <_malloc_r>
 800d5ca:	6038      	str	r0, [r7, #0]
 800d5cc:	6138      	str	r0, [r7, #16]
 800d5ce:	2800      	cmp	r0, #0
 800d5d0:	d105      	bne.n	800d5de <_svfiprintf_r+0x32>
 800d5d2:	230c      	movs	r3, #12
 800d5d4:	9a03      	ldr	r2, [sp, #12]
 800d5d6:	6013      	str	r3, [r2, #0]
 800d5d8:	2001      	movs	r0, #1
 800d5da:	4240      	negs	r0, r0
 800d5dc:	e0cf      	b.n	800d77e <_svfiprintf_r+0x1d2>
 800d5de:	2340      	movs	r3, #64	@ 0x40
 800d5e0:	617b      	str	r3, [r7, #20]
 800d5e2:	2300      	movs	r3, #0
 800d5e4:	ac08      	add	r4, sp, #32
 800d5e6:	6163      	str	r3, [r4, #20]
 800d5e8:	3320      	adds	r3, #32
 800d5ea:	7663      	strb	r3, [r4, #25]
 800d5ec:	3310      	adds	r3, #16
 800d5ee:	76a3      	strb	r3, [r4, #26]
 800d5f0:	9507      	str	r5, [sp, #28]
 800d5f2:	0035      	movs	r5, r6
 800d5f4:	782b      	ldrb	r3, [r5, #0]
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d001      	beq.n	800d5fe <_svfiprintf_r+0x52>
 800d5fa:	2b25      	cmp	r3, #37	@ 0x25
 800d5fc:	d148      	bne.n	800d690 <_svfiprintf_r+0xe4>
 800d5fe:	1bab      	subs	r3, r5, r6
 800d600:	9305      	str	r3, [sp, #20]
 800d602:	42b5      	cmp	r5, r6
 800d604:	d00b      	beq.n	800d61e <_svfiprintf_r+0x72>
 800d606:	0032      	movs	r2, r6
 800d608:	0039      	movs	r1, r7
 800d60a:	9803      	ldr	r0, [sp, #12]
 800d60c:	f7ff ff6e 	bl	800d4ec <__ssputs_r>
 800d610:	3001      	adds	r0, #1
 800d612:	d100      	bne.n	800d616 <_svfiprintf_r+0x6a>
 800d614:	e0ae      	b.n	800d774 <_svfiprintf_r+0x1c8>
 800d616:	6963      	ldr	r3, [r4, #20]
 800d618:	9a05      	ldr	r2, [sp, #20]
 800d61a:	189b      	adds	r3, r3, r2
 800d61c:	6163      	str	r3, [r4, #20]
 800d61e:	782b      	ldrb	r3, [r5, #0]
 800d620:	2b00      	cmp	r3, #0
 800d622:	d100      	bne.n	800d626 <_svfiprintf_r+0x7a>
 800d624:	e0a6      	b.n	800d774 <_svfiprintf_r+0x1c8>
 800d626:	2201      	movs	r2, #1
 800d628:	2300      	movs	r3, #0
 800d62a:	4252      	negs	r2, r2
 800d62c:	6062      	str	r2, [r4, #4]
 800d62e:	a904      	add	r1, sp, #16
 800d630:	3254      	adds	r2, #84	@ 0x54
 800d632:	1852      	adds	r2, r2, r1
 800d634:	1c6e      	adds	r6, r5, #1
 800d636:	6023      	str	r3, [r4, #0]
 800d638:	60e3      	str	r3, [r4, #12]
 800d63a:	60a3      	str	r3, [r4, #8]
 800d63c:	7013      	strb	r3, [r2, #0]
 800d63e:	65a3      	str	r3, [r4, #88]	@ 0x58
 800d640:	4b54      	ldr	r3, [pc, #336]	@ (800d794 <_svfiprintf_r+0x1e8>)
 800d642:	2205      	movs	r2, #5
 800d644:	0018      	movs	r0, r3
 800d646:	7831      	ldrb	r1, [r6, #0]
 800d648:	9305      	str	r3, [sp, #20]
 800d64a:	f7fe fc18 	bl	800be7e <memchr>
 800d64e:	1c75      	adds	r5, r6, #1
 800d650:	2800      	cmp	r0, #0
 800d652:	d11f      	bne.n	800d694 <_svfiprintf_r+0xe8>
 800d654:	6822      	ldr	r2, [r4, #0]
 800d656:	06d3      	lsls	r3, r2, #27
 800d658:	d504      	bpl.n	800d664 <_svfiprintf_r+0xb8>
 800d65a:	2353      	movs	r3, #83	@ 0x53
 800d65c:	a904      	add	r1, sp, #16
 800d65e:	185b      	adds	r3, r3, r1
 800d660:	2120      	movs	r1, #32
 800d662:	7019      	strb	r1, [r3, #0]
 800d664:	0713      	lsls	r3, r2, #28
 800d666:	d504      	bpl.n	800d672 <_svfiprintf_r+0xc6>
 800d668:	2353      	movs	r3, #83	@ 0x53
 800d66a:	a904      	add	r1, sp, #16
 800d66c:	185b      	adds	r3, r3, r1
 800d66e:	212b      	movs	r1, #43	@ 0x2b
 800d670:	7019      	strb	r1, [r3, #0]
 800d672:	7833      	ldrb	r3, [r6, #0]
 800d674:	2b2a      	cmp	r3, #42	@ 0x2a
 800d676:	d016      	beq.n	800d6a6 <_svfiprintf_r+0xfa>
 800d678:	0035      	movs	r5, r6
 800d67a:	2100      	movs	r1, #0
 800d67c:	200a      	movs	r0, #10
 800d67e:	68e3      	ldr	r3, [r4, #12]
 800d680:	782a      	ldrb	r2, [r5, #0]
 800d682:	1c6e      	adds	r6, r5, #1
 800d684:	3a30      	subs	r2, #48	@ 0x30
 800d686:	2a09      	cmp	r2, #9
 800d688:	d950      	bls.n	800d72c <_svfiprintf_r+0x180>
 800d68a:	2900      	cmp	r1, #0
 800d68c:	d111      	bne.n	800d6b2 <_svfiprintf_r+0x106>
 800d68e:	e017      	b.n	800d6c0 <_svfiprintf_r+0x114>
 800d690:	3501      	adds	r5, #1
 800d692:	e7af      	b.n	800d5f4 <_svfiprintf_r+0x48>
 800d694:	9b05      	ldr	r3, [sp, #20]
 800d696:	6822      	ldr	r2, [r4, #0]
 800d698:	1ac0      	subs	r0, r0, r3
 800d69a:	2301      	movs	r3, #1
 800d69c:	4083      	lsls	r3, r0
 800d69e:	4313      	orrs	r3, r2
 800d6a0:	002e      	movs	r6, r5
 800d6a2:	6023      	str	r3, [r4, #0]
 800d6a4:	e7cc      	b.n	800d640 <_svfiprintf_r+0x94>
 800d6a6:	9b07      	ldr	r3, [sp, #28]
 800d6a8:	1d19      	adds	r1, r3, #4
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	9107      	str	r1, [sp, #28]
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	db01      	blt.n	800d6b6 <_svfiprintf_r+0x10a>
 800d6b2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d6b4:	e004      	b.n	800d6c0 <_svfiprintf_r+0x114>
 800d6b6:	425b      	negs	r3, r3
 800d6b8:	60e3      	str	r3, [r4, #12]
 800d6ba:	2302      	movs	r3, #2
 800d6bc:	4313      	orrs	r3, r2
 800d6be:	6023      	str	r3, [r4, #0]
 800d6c0:	782b      	ldrb	r3, [r5, #0]
 800d6c2:	2b2e      	cmp	r3, #46	@ 0x2e
 800d6c4:	d10c      	bne.n	800d6e0 <_svfiprintf_r+0x134>
 800d6c6:	786b      	ldrb	r3, [r5, #1]
 800d6c8:	2b2a      	cmp	r3, #42	@ 0x2a
 800d6ca:	d134      	bne.n	800d736 <_svfiprintf_r+0x18a>
 800d6cc:	9b07      	ldr	r3, [sp, #28]
 800d6ce:	3502      	adds	r5, #2
 800d6d0:	1d1a      	adds	r2, r3, #4
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	9207      	str	r2, [sp, #28]
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	da01      	bge.n	800d6de <_svfiprintf_r+0x132>
 800d6da:	2301      	movs	r3, #1
 800d6dc:	425b      	negs	r3, r3
 800d6de:	9309      	str	r3, [sp, #36]	@ 0x24
 800d6e0:	4e2d      	ldr	r6, [pc, #180]	@ (800d798 <_svfiprintf_r+0x1ec>)
 800d6e2:	2203      	movs	r2, #3
 800d6e4:	0030      	movs	r0, r6
 800d6e6:	7829      	ldrb	r1, [r5, #0]
 800d6e8:	f7fe fbc9 	bl	800be7e <memchr>
 800d6ec:	2800      	cmp	r0, #0
 800d6ee:	d006      	beq.n	800d6fe <_svfiprintf_r+0x152>
 800d6f0:	2340      	movs	r3, #64	@ 0x40
 800d6f2:	1b80      	subs	r0, r0, r6
 800d6f4:	4083      	lsls	r3, r0
 800d6f6:	6822      	ldr	r2, [r4, #0]
 800d6f8:	3501      	adds	r5, #1
 800d6fa:	4313      	orrs	r3, r2
 800d6fc:	6023      	str	r3, [r4, #0]
 800d6fe:	7829      	ldrb	r1, [r5, #0]
 800d700:	2206      	movs	r2, #6
 800d702:	4826      	ldr	r0, [pc, #152]	@ (800d79c <_svfiprintf_r+0x1f0>)
 800d704:	1c6e      	adds	r6, r5, #1
 800d706:	7621      	strb	r1, [r4, #24]
 800d708:	f7fe fbb9 	bl	800be7e <memchr>
 800d70c:	2800      	cmp	r0, #0
 800d70e:	d038      	beq.n	800d782 <_svfiprintf_r+0x1d6>
 800d710:	4b23      	ldr	r3, [pc, #140]	@ (800d7a0 <_svfiprintf_r+0x1f4>)
 800d712:	2b00      	cmp	r3, #0
 800d714:	d122      	bne.n	800d75c <_svfiprintf_r+0x1b0>
 800d716:	2207      	movs	r2, #7
 800d718:	9b07      	ldr	r3, [sp, #28]
 800d71a:	3307      	adds	r3, #7
 800d71c:	4393      	bics	r3, r2
 800d71e:	3308      	adds	r3, #8
 800d720:	9307      	str	r3, [sp, #28]
 800d722:	6963      	ldr	r3, [r4, #20]
 800d724:	9a04      	ldr	r2, [sp, #16]
 800d726:	189b      	adds	r3, r3, r2
 800d728:	6163      	str	r3, [r4, #20]
 800d72a:	e762      	b.n	800d5f2 <_svfiprintf_r+0x46>
 800d72c:	4343      	muls	r3, r0
 800d72e:	0035      	movs	r5, r6
 800d730:	2101      	movs	r1, #1
 800d732:	189b      	adds	r3, r3, r2
 800d734:	e7a4      	b.n	800d680 <_svfiprintf_r+0xd4>
 800d736:	2300      	movs	r3, #0
 800d738:	200a      	movs	r0, #10
 800d73a:	0019      	movs	r1, r3
 800d73c:	3501      	adds	r5, #1
 800d73e:	6063      	str	r3, [r4, #4]
 800d740:	782a      	ldrb	r2, [r5, #0]
 800d742:	1c6e      	adds	r6, r5, #1
 800d744:	3a30      	subs	r2, #48	@ 0x30
 800d746:	2a09      	cmp	r2, #9
 800d748:	d903      	bls.n	800d752 <_svfiprintf_r+0x1a6>
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d0c8      	beq.n	800d6e0 <_svfiprintf_r+0x134>
 800d74e:	9109      	str	r1, [sp, #36]	@ 0x24
 800d750:	e7c6      	b.n	800d6e0 <_svfiprintf_r+0x134>
 800d752:	4341      	muls	r1, r0
 800d754:	0035      	movs	r5, r6
 800d756:	2301      	movs	r3, #1
 800d758:	1889      	adds	r1, r1, r2
 800d75a:	e7f1      	b.n	800d740 <_svfiprintf_r+0x194>
 800d75c:	aa07      	add	r2, sp, #28
 800d75e:	9200      	str	r2, [sp, #0]
 800d760:	0021      	movs	r1, r4
 800d762:	003a      	movs	r2, r7
 800d764:	4b0f      	ldr	r3, [pc, #60]	@ (800d7a4 <_svfiprintf_r+0x1f8>)
 800d766:	9803      	ldr	r0, [sp, #12]
 800d768:	f7fd fdce 	bl	800b308 <_printf_float>
 800d76c:	9004      	str	r0, [sp, #16]
 800d76e:	9b04      	ldr	r3, [sp, #16]
 800d770:	3301      	adds	r3, #1
 800d772:	d1d6      	bne.n	800d722 <_svfiprintf_r+0x176>
 800d774:	89bb      	ldrh	r3, [r7, #12]
 800d776:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800d778:	065b      	lsls	r3, r3, #25
 800d77a:	d500      	bpl.n	800d77e <_svfiprintf_r+0x1d2>
 800d77c:	e72c      	b.n	800d5d8 <_svfiprintf_r+0x2c>
 800d77e:	b021      	add	sp, #132	@ 0x84
 800d780:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d782:	aa07      	add	r2, sp, #28
 800d784:	9200      	str	r2, [sp, #0]
 800d786:	0021      	movs	r1, r4
 800d788:	003a      	movs	r2, r7
 800d78a:	4b06      	ldr	r3, [pc, #24]	@ (800d7a4 <_svfiprintf_r+0x1f8>)
 800d78c:	9803      	ldr	r0, [sp, #12]
 800d78e:	f7fe f869 	bl	800b864 <_printf_i>
 800d792:	e7eb      	b.n	800d76c <_svfiprintf_r+0x1c0>
 800d794:	0800ec40 	.word	0x0800ec40
 800d798:	0800ec46 	.word	0x0800ec46
 800d79c:	0800ec4a 	.word	0x0800ec4a
 800d7a0:	0800b309 	.word	0x0800b309
 800d7a4:	0800d4ed 	.word	0x0800d4ed

0800d7a8 <__sfputc_r>:
 800d7a8:	6893      	ldr	r3, [r2, #8]
 800d7aa:	b510      	push	{r4, lr}
 800d7ac:	3b01      	subs	r3, #1
 800d7ae:	6093      	str	r3, [r2, #8]
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	da04      	bge.n	800d7be <__sfputc_r+0x16>
 800d7b4:	6994      	ldr	r4, [r2, #24]
 800d7b6:	42a3      	cmp	r3, r4
 800d7b8:	db07      	blt.n	800d7ca <__sfputc_r+0x22>
 800d7ba:	290a      	cmp	r1, #10
 800d7bc:	d005      	beq.n	800d7ca <__sfputc_r+0x22>
 800d7be:	6813      	ldr	r3, [r2, #0]
 800d7c0:	1c58      	adds	r0, r3, #1
 800d7c2:	6010      	str	r0, [r2, #0]
 800d7c4:	7019      	strb	r1, [r3, #0]
 800d7c6:	0008      	movs	r0, r1
 800d7c8:	bd10      	pop	{r4, pc}
 800d7ca:	f000 f9e2 	bl	800db92 <__swbuf_r>
 800d7ce:	0001      	movs	r1, r0
 800d7d0:	e7f9      	b.n	800d7c6 <__sfputc_r+0x1e>

0800d7d2 <__sfputs_r>:
 800d7d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7d4:	0006      	movs	r6, r0
 800d7d6:	000f      	movs	r7, r1
 800d7d8:	0014      	movs	r4, r2
 800d7da:	18d5      	adds	r5, r2, r3
 800d7dc:	42ac      	cmp	r4, r5
 800d7de:	d101      	bne.n	800d7e4 <__sfputs_r+0x12>
 800d7e0:	2000      	movs	r0, #0
 800d7e2:	e007      	b.n	800d7f4 <__sfputs_r+0x22>
 800d7e4:	7821      	ldrb	r1, [r4, #0]
 800d7e6:	003a      	movs	r2, r7
 800d7e8:	0030      	movs	r0, r6
 800d7ea:	f7ff ffdd 	bl	800d7a8 <__sfputc_r>
 800d7ee:	3401      	adds	r4, #1
 800d7f0:	1c43      	adds	r3, r0, #1
 800d7f2:	d1f3      	bne.n	800d7dc <__sfputs_r+0xa>
 800d7f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d7f8 <_vfiprintf_r>:
 800d7f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d7fa:	b0a1      	sub	sp, #132	@ 0x84
 800d7fc:	000f      	movs	r7, r1
 800d7fe:	0015      	movs	r5, r2
 800d800:	001e      	movs	r6, r3
 800d802:	9003      	str	r0, [sp, #12]
 800d804:	2800      	cmp	r0, #0
 800d806:	d004      	beq.n	800d812 <_vfiprintf_r+0x1a>
 800d808:	6a03      	ldr	r3, [r0, #32]
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d101      	bne.n	800d812 <_vfiprintf_r+0x1a>
 800d80e:	f7fe f9c7 	bl	800bba0 <__sinit>
 800d812:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d814:	07db      	lsls	r3, r3, #31
 800d816:	d405      	bmi.n	800d824 <_vfiprintf_r+0x2c>
 800d818:	89bb      	ldrh	r3, [r7, #12]
 800d81a:	059b      	lsls	r3, r3, #22
 800d81c:	d402      	bmi.n	800d824 <_vfiprintf_r+0x2c>
 800d81e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800d820:	f7fe fb2b 	bl	800be7a <__retarget_lock_acquire_recursive>
 800d824:	89bb      	ldrh	r3, [r7, #12]
 800d826:	071b      	lsls	r3, r3, #28
 800d828:	d502      	bpl.n	800d830 <_vfiprintf_r+0x38>
 800d82a:	693b      	ldr	r3, [r7, #16]
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d113      	bne.n	800d858 <_vfiprintf_r+0x60>
 800d830:	0039      	movs	r1, r7
 800d832:	9803      	ldr	r0, [sp, #12]
 800d834:	f000 f9f0 	bl	800dc18 <__swsetup_r>
 800d838:	2800      	cmp	r0, #0
 800d83a:	d00d      	beq.n	800d858 <_vfiprintf_r+0x60>
 800d83c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d83e:	07db      	lsls	r3, r3, #31
 800d840:	d503      	bpl.n	800d84a <_vfiprintf_r+0x52>
 800d842:	2001      	movs	r0, #1
 800d844:	4240      	negs	r0, r0
 800d846:	b021      	add	sp, #132	@ 0x84
 800d848:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d84a:	89bb      	ldrh	r3, [r7, #12]
 800d84c:	059b      	lsls	r3, r3, #22
 800d84e:	d4f8      	bmi.n	800d842 <_vfiprintf_r+0x4a>
 800d850:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800d852:	f7fe fb13 	bl	800be7c <__retarget_lock_release_recursive>
 800d856:	e7f4      	b.n	800d842 <_vfiprintf_r+0x4a>
 800d858:	2300      	movs	r3, #0
 800d85a:	ac08      	add	r4, sp, #32
 800d85c:	6163      	str	r3, [r4, #20]
 800d85e:	3320      	adds	r3, #32
 800d860:	7663      	strb	r3, [r4, #25]
 800d862:	3310      	adds	r3, #16
 800d864:	76a3      	strb	r3, [r4, #26]
 800d866:	9607      	str	r6, [sp, #28]
 800d868:	002e      	movs	r6, r5
 800d86a:	7833      	ldrb	r3, [r6, #0]
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d001      	beq.n	800d874 <_vfiprintf_r+0x7c>
 800d870:	2b25      	cmp	r3, #37	@ 0x25
 800d872:	d148      	bne.n	800d906 <_vfiprintf_r+0x10e>
 800d874:	1b73      	subs	r3, r6, r5
 800d876:	9305      	str	r3, [sp, #20]
 800d878:	42ae      	cmp	r6, r5
 800d87a:	d00b      	beq.n	800d894 <_vfiprintf_r+0x9c>
 800d87c:	002a      	movs	r2, r5
 800d87e:	0039      	movs	r1, r7
 800d880:	9803      	ldr	r0, [sp, #12]
 800d882:	f7ff ffa6 	bl	800d7d2 <__sfputs_r>
 800d886:	3001      	adds	r0, #1
 800d888:	d100      	bne.n	800d88c <_vfiprintf_r+0x94>
 800d88a:	e0ae      	b.n	800d9ea <_vfiprintf_r+0x1f2>
 800d88c:	6963      	ldr	r3, [r4, #20]
 800d88e:	9a05      	ldr	r2, [sp, #20]
 800d890:	189b      	adds	r3, r3, r2
 800d892:	6163      	str	r3, [r4, #20]
 800d894:	7833      	ldrb	r3, [r6, #0]
 800d896:	2b00      	cmp	r3, #0
 800d898:	d100      	bne.n	800d89c <_vfiprintf_r+0xa4>
 800d89a:	e0a6      	b.n	800d9ea <_vfiprintf_r+0x1f2>
 800d89c:	2201      	movs	r2, #1
 800d89e:	2300      	movs	r3, #0
 800d8a0:	4252      	negs	r2, r2
 800d8a2:	6062      	str	r2, [r4, #4]
 800d8a4:	a904      	add	r1, sp, #16
 800d8a6:	3254      	adds	r2, #84	@ 0x54
 800d8a8:	1852      	adds	r2, r2, r1
 800d8aa:	1c75      	adds	r5, r6, #1
 800d8ac:	6023      	str	r3, [r4, #0]
 800d8ae:	60e3      	str	r3, [r4, #12]
 800d8b0:	60a3      	str	r3, [r4, #8]
 800d8b2:	7013      	strb	r3, [r2, #0]
 800d8b4:	65a3      	str	r3, [r4, #88]	@ 0x58
 800d8b6:	4b59      	ldr	r3, [pc, #356]	@ (800da1c <_vfiprintf_r+0x224>)
 800d8b8:	2205      	movs	r2, #5
 800d8ba:	0018      	movs	r0, r3
 800d8bc:	7829      	ldrb	r1, [r5, #0]
 800d8be:	9305      	str	r3, [sp, #20]
 800d8c0:	f7fe fadd 	bl	800be7e <memchr>
 800d8c4:	1c6e      	adds	r6, r5, #1
 800d8c6:	2800      	cmp	r0, #0
 800d8c8:	d11f      	bne.n	800d90a <_vfiprintf_r+0x112>
 800d8ca:	6822      	ldr	r2, [r4, #0]
 800d8cc:	06d3      	lsls	r3, r2, #27
 800d8ce:	d504      	bpl.n	800d8da <_vfiprintf_r+0xe2>
 800d8d0:	2353      	movs	r3, #83	@ 0x53
 800d8d2:	a904      	add	r1, sp, #16
 800d8d4:	185b      	adds	r3, r3, r1
 800d8d6:	2120      	movs	r1, #32
 800d8d8:	7019      	strb	r1, [r3, #0]
 800d8da:	0713      	lsls	r3, r2, #28
 800d8dc:	d504      	bpl.n	800d8e8 <_vfiprintf_r+0xf0>
 800d8de:	2353      	movs	r3, #83	@ 0x53
 800d8e0:	a904      	add	r1, sp, #16
 800d8e2:	185b      	adds	r3, r3, r1
 800d8e4:	212b      	movs	r1, #43	@ 0x2b
 800d8e6:	7019      	strb	r1, [r3, #0]
 800d8e8:	782b      	ldrb	r3, [r5, #0]
 800d8ea:	2b2a      	cmp	r3, #42	@ 0x2a
 800d8ec:	d016      	beq.n	800d91c <_vfiprintf_r+0x124>
 800d8ee:	002e      	movs	r6, r5
 800d8f0:	2100      	movs	r1, #0
 800d8f2:	200a      	movs	r0, #10
 800d8f4:	68e3      	ldr	r3, [r4, #12]
 800d8f6:	7832      	ldrb	r2, [r6, #0]
 800d8f8:	1c75      	adds	r5, r6, #1
 800d8fa:	3a30      	subs	r2, #48	@ 0x30
 800d8fc:	2a09      	cmp	r2, #9
 800d8fe:	d950      	bls.n	800d9a2 <_vfiprintf_r+0x1aa>
 800d900:	2900      	cmp	r1, #0
 800d902:	d111      	bne.n	800d928 <_vfiprintf_r+0x130>
 800d904:	e017      	b.n	800d936 <_vfiprintf_r+0x13e>
 800d906:	3601      	adds	r6, #1
 800d908:	e7af      	b.n	800d86a <_vfiprintf_r+0x72>
 800d90a:	9b05      	ldr	r3, [sp, #20]
 800d90c:	6822      	ldr	r2, [r4, #0]
 800d90e:	1ac0      	subs	r0, r0, r3
 800d910:	2301      	movs	r3, #1
 800d912:	4083      	lsls	r3, r0
 800d914:	4313      	orrs	r3, r2
 800d916:	0035      	movs	r5, r6
 800d918:	6023      	str	r3, [r4, #0]
 800d91a:	e7cc      	b.n	800d8b6 <_vfiprintf_r+0xbe>
 800d91c:	9b07      	ldr	r3, [sp, #28]
 800d91e:	1d19      	adds	r1, r3, #4
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	9107      	str	r1, [sp, #28]
 800d924:	2b00      	cmp	r3, #0
 800d926:	db01      	blt.n	800d92c <_vfiprintf_r+0x134>
 800d928:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d92a:	e004      	b.n	800d936 <_vfiprintf_r+0x13e>
 800d92c:	425b      	negs	r3, r3
 800d92e:	60e3      	str	r3, [r4, #12]
 800d930:	2302      	movs	r3, #2
 800d932:	4313      	orrs	r3, r2
 800d934:	6023      	str	r3, [r4, #0]
 800d936:	7833      	ldrb	r3, [r6, #0]
 800d938:	2b2e      	cmp	r3, #46	@ 0x2e
 800d93a:	d10c      	bne.n	800d956 <_vfiprintf_r+0x15e>
 800d93c:	7873      	ldrb	r3, [r6, #1]
 800d93e:	2b2a      	cmp	r3, #42	@ 0x2a
 800d940:	d134      	bne.n	800d9ac <_vfiprintf_r+0x1b4>
 800d942:	9b07      	ldr	r3, [sp, #28]
 800d944:	3602      	adds	r6, #2
 800d946:	1d1a      	adds	r2, r3, #4
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	9207      	str	r2, [sp, #28]
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	da01      	bge.n	800d954 <_vfiprintf_r+0x15c>
 800d950:	2301      	movs	r3, #1
 800d952:	425b      	negs	r3, r3
 800d954:	9309      	str	r3, [sp, #36]	@ 0x24
 800d956:	4d32      	ldr	r5, [pc, #200]	@ (800da20 <_vfiprintf_r+0x228>)
 800d958:	2203      	movs	r2, #3
 800d95a:	0028      	movs	r0, r5
 800d95c:	7831      	ldrb	r1, [r6, #0]
 800d95e:	f7fe fa8e 	bl	800be7e <memchr>
 800d962:	2800      	cmp	r0, #0
 800d964:	d006      	beq.n	800d974 <_vfiprintf_r+0x17c>
 800d966:	2340      	movs	r3, #64	@ 0x40
 800d968:	1b40      	subs	r0, r0, r5
 800d96a:	4083      	lsls	r3, r0
 800d96c:	6822      	ldr	r2, [r4, #0]
 800d96e:	3601      	adds	r6, #1
 800d970:	4313      	orrs	r3, r2
 800d972:	6023      	str	r3, [r4, #0]
 800d974:	7831      	ldrb	r1, [r6, #0]
 800d976:	2206      	movs	r2, #6
 800d978:	482a      	ldr	r0, [pc, #168]	@ (800da24 <_vfiprintf_r+0x22c>)
 800d97a:	1c75      	adds	r5, r6, #1
 800d97c:	7621      	strb	r1, [r4, #24]
 800d97e:	f7fe fa7e 	bl	800be7e <memchr>
 800d982:	2800      	cmp	r0, #0
 800d984:	d040      	beq.n	800da08 <_vfiprintf_r+0x210>
 800d986:	4b28      	ldr	r3, [pc, #160]	@ (800da28 <_vfiprintf_r+0x230>)
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d122      	bne.n	800d9d2 <_vfiprintf_r+0x1da>
 800d98c:	2207      	movs	r2, #7
 800d98e:	9b07      	ldr	r3, [sp, #28]
 800d990:	3307      	adds	r3, #7
 800d992:	4393      	bics	r3, r2
 800d994:	3308      	adds	r3, #8
 800d996:	9307      	str	r3, [sp, #28]
 800d998:	6963      	ldr	r3, [r4, #20]
 800d99a:	9a04      	ldr	r2, [sp, #16]
 800d99c:	189b      	adds	r3, r3, r2
 800d99e:	6163      	str	r3, [r4, #20]
 800d9a0:	e762      	b.n	800d868 <_vfiprintf_r+0x70>
 800d9a2:	4343      	muls	r3, r0
 800d9a4:	002e      	movs	r6, r5
 800d9a6:	2101      	movs	r1, #1
 800d9a8:	189b      	adds	r3, r3, r2
 800d9aa:	e7a4      	b.n	800d8f6 <_vfiprintf_r+0xfe>
 800d9ac:	2300      	movs	r3, #0
 800d9ae:	200a      	movs	r0, #10
 800d9b0:	0019      	movs	r1, r3
 800d9b2:	3601      	adds	r6, #1
 800d9b4:	6063      	str	r3, [r4, #4]
 800d9b6:	7832      	ldrb	r2, [r6, #0]
 800d9b8:	1c75      	adds	r5, r6, #1
 800d9ba:	3a30      	subs	r2, #48	@ 0x30
 800d9bc:	2a09      	cmp	r2, #9
 800d9be:	d903      	bls.n	800d9c8 <_vfiprintf_r+0x1d0>
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	d0c8      	beq.n	800d956 <_vfiprintf_r+0x15e>
 800d9c4:	9109      	str	r1, [sp, #36]	@ 0x24
 800d9c6:	e7c6      	b.n	800d956 <_vfiprintf_r+0x15e>
 800d9c8:	4341      	muls	r1, r0
 800d9ca:	002e      	movs	r6, r5
 800d9cc:	2301      	movs	r3, #1
 800d9ce:	1889      	adds	r1, r1, r2
 800d9d0:	e7f1      	b.n	800d9b6 <_vfiprintf_r+0x1be>
 800d9d2:	aa07      	add	r2, sp, #28
 800d9d4:	9200      	str	r2, [sp, #0]
 800d9d6:	0021      	movs	r1, r4
 800d9d8:	003a      	movs	r2, r7
 800d9da:	4b14      	ldr	r3, [pc, #80]	@ (800da2c <_vfiprintf_r+0x234>)
 800d9dc:	9803      	ldr	r0, [sp, #12]
 800d9de:	f7fd fc93 	bl	800b308 <_printf_float>
 800d9e2:	9004      	str	r0, [sp, #16]
 800d9e4:	9b04      	ldr	r3, [sp, #16]
 800d9e6:	3301      	adds	r3, #1
 800d9e8:	d1d6      	bne.n	800d998 <_vfiprintf_r+0x1a0>
 800d9ea:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d9ec:	07db      	lsls	r3, r3, #31
 800d9ee:	d405      	bmi.n	800d9fc <_vfiprintf_r+0x204>
 800d9f0:	89bb      	ldrh	r3, [r7, #12]
 800d9f2:	059b      	lsls	r3, r3, #22
 800d9f4:	d402      	bmi.n	800d9fc <_vfiprintf_r+0x204>
 800d9f6:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800d9f8:	f7fe fa40 	bl	800be7c <__retarget_lock_release_recursive>
 800d9fc:	89bb      	ldrh	r3, [r7, #12]
 800d9fe:	065b      	lsls	r3, r3, #25
 800da00:	d500      	bpl.n	800da04 <_vfiprintf_r+0x20c>
 800da02:	e71e      	b.n	800d842 <_vfiprintf_r+0x4a>
 800da04:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800da06:	e71e      	b.n	800d846 <_vfiprintf_r+0x4e>
 800da08:	aa07      	add	r2, sp, #28
 800da0a:	9200      	str	r2, [sp, #0]
 800da0c:	0021      	movs	r1, r4
 800da0e:	003a      	movs	r2, r7
 800da10:	4b06      	ldr	r3, [pc, #24]	@ (800da2c <_vfiprintf_r+0x234>)
 800da12:	9803      	ldr	r0, [sp, #12]
 800da14:	f7fd ff26 	bl	800b864 <_printf_i>
 800da18:	e7e3      	b.n	800d9e2 <_vfiprintf_r+0x1ea>
 800da1a:	46c0      	nop			@ (mov r8, r8)
 800da1c:	0800ec40 	.word	0x0800ec40
 800da20:	0800ec46 	.word	0x0800ec46
 800da24:	0800ec4a 	.word	0x0800ec4a
 800da28:	0800b309 	.word	0x0800b309
 800da2c:	0800d7d3 	.word	0x0800d7d3

0800da30 <__sflush_r>:
 800da30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800da32:	220c      	movs	r2, #12
 800da34:	5e8b      	ldrsh	r3, [r1, r2]
 800da36:	0005      	movs	r5, r0
 800da38:	000c      	movs	r4, r1
 800da3a:	071a      	lsls	r2, r3, #28
 800da3c:	d456      	bmi.n	800daec <__sflush_r+0xbc>
 800da3e:	684a      	ldr	r2, [r1, #4]
 800da40:	2a00      	cmp	r2, #0
 800da42:	dc02      	bgt.n	800da4a <__sflush_r+0x1a>
 800da44:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 800da46:	2a00      	cmp	r2, #0
 800da48:	dd4e      	ble.n	800dae8 <__sflush_r+0xb8>
 800da4a:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800da4c:	2f00      	cmp	r7, #0
 800da4e:	d04b      	beq.n	800dae8 <__sflush_r+0xb8>
 800da50:	2200      	movs	r2, #0
 800da52:	2080      	movs	r0, #128	@ 0x80
 800da54:	682e      	ldr	r6, [r5, #0]
 800da56:	602a      	str	r2, [r5, #0]
 800da58:	001a      	movs	r2, r3
 800da5a:	0140      	lsls	r0, r0, #5
 800da5c:	6a21      	ldr	r1, [r4, #32]
 800da5e:	4002      	ands	r2, r0
 800da60:	4203      	tst	r3, r0
 800da62:	d033      	beq.n	800dacc <__sflush_r+0x9c>
 800da64:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800da66:	89a3      	ldrh	r3, [r4, #12]
 800da68:	075b      	lsls	r3, r3, #29
 800da6a:	d506      	bpl.n	800da7a <__sflush_r+0x4a>
 800da6c:	6863      	ldr	r3, [r4, #4]
 800da6e:	1ad2      	subs	r2, r2, r3
 800da70:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800da72:	2b00      	cmp	r3, #0
 800da74:	d001      	beq.n	800da7a <__sflush_r+0x4a>
 800da76:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800da78:	1ad2      	subs	r2, r2, r3
 800da7a:	2300      	movs	r3, #0
 800da7c:	0028      	movs	r0, r5
 800da7e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800da80:	6a21      	ldr	r1, [r4, #32]
 800da82:	47b8      	blx	r7
 800da84:	89a2      	ldrh	r2, [r4, #12]
 800da86:	1c43      	adds	r3, r0, #1
 800da88:	d106      	bne.n	800da98 <__sflush_r+0x68>
 800da8a:	6829      	ldr	r1, [r5, #0]
 800da8c:	291d      	cmp	r1, #29
 800da8e:	d846      	bhi.n	800db1e <__sflush_r+0xee>
 800da90:	4b29      	ldr	r3, [pc, #164]	@ (800db38 <__sflush_r+0x108>)
 800da92:	410b      	asrs	r3, r1
 800da94:	07db      	lsls	r3, r3, #31
 800da96:	d442      	bmi.n	800db1e <__sflush_r+0xee>
 800da98:	2300      	movs	r3, #0
 800da9a:	6063      	str	r3, [r4, #4]
 800da9c:	6923      	ldr	r3, [r4, #16]
 800da9e:	6023      	str	r3, [r4, #0]
 800daa0:	04d2      	lsls	r2, r2, #19
 800daa2:	d505      	bpl.n	800dab0 <__sflush_r+0x80>
 800daa4:	1c43      	adds	r3, r0, #1
 800daa6:	d102      	bne.n	800daae <__sflush_r+0x7e>
 800daa8:	682b      	ldr	r3, [r5, #0]
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d100      	bne.n	800dab0 <__sflush_r+0x80>
 800daae:	6560      	str	r0, [r4, #84]	@ 0x54
 800dab0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800dab2:	602e      	str	r6, [r5, #0]
 800dab4:	2900      	cmp	r1, #0
 800dab6:	d017      	beq.n	800dae8 <__sflush_r+0xb8>
 800dab8:	0023      	movs	r3, r4
 800daba:	3344      	adds	r3, #68	@ 0x44
 800dabc:	4299      	cmp	r1, r3
 800dabe:	d002      	beq.n	800dac6 <__sflush_r+0x96>
 800dac0:	0028      	movs	r0, r5
 800dac2:	f7ff f869 	bl	800cb98 <_free_r>
 800dac6:	2300      	movs	r3, #0
 800dac8:	6363      	str	r3, [r4, #52]	@ 0x34
 800daca:	e00d      	b.n	800dae8 <__sflush_r+0xb8>
 800dacc:	2301      	movs	r3, #1
 800dace:	0028      	movs	r0, r5
 800dad0:	47b8      	blx	r7
 800dad2:	0002      	movs	r2, r0
 800dad4:	1c43      	adds	r3, r0, #1
 800dad6:	d1c6      	bne.n	800da66 <__sflush_r+0x36>
 800dad8:	682b      	ldr	r3, [r5, #0]
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d0c3      	beq.n	800da66 <__sflush_r+0x36>
 800dade:	2b1d      	cmp	r3, #29
 800dae0:	d001      	beq.n	800dae6 <__sflush_r+0xb6>
 800dae2:	2b16      	cmp	r3, #22
 800dae4:	d11a      	bne.n	800db1c <__sflush_r+0xec>
 800dae6:	602e      	str	r6, [r5, #0]
 800dae8:	2000      	movs	r0, #0
 800daea:	e01e      	b.n	800db2a <__sflush_r+0xfa>
 800daec:	690e      	ldr	r6, [r1, #16]
 800daee:	2e00      	cmp	r6, #0
 800daf0:	d0fa      	beq.n	800dae8 <__sflush_r+0xb8>
 800daf2:	680f      	ldr	r7, [r1, #0]
 800daf4:	600e      	str	r6, [r1, #0]
 800daf6:	1bba      	subs	r2, r7, r6
 800daf8:	9201      	str	r2, [sp, #4]
 800dafa:	2200      	movs	r2, #0
 800dafc:	079b      	lsls	r3, r3, #30
 800dafe:	d100      	bne.n	800db02 <__sflush_r+0xd2>
 800db00:	694a      	ldr	r2, [r1, #20]
 800db02:	60a2      	str	r2, [r4, #8]
 800db04:	9b01      	ldr	r3, [sp, #4]
 800db06:	2b00      	cmp	r3, #0
 800db08:	ddee      	ble.n	800dae8 <__sflush_r+0xb8>
 800db0a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800db0c:	0032      	movs	r2, r6
 800db0e:	001f      	movs	r7, r3
 800db10:	0028      	movs	r0, r5
 800db12:	9b01      	ldr	r3, [sp, #4]
 800db14:	6a21      	ldr	r1, [r4, #32]
 800db16:	47b8      	blx	r7
 800db18:	2800      	cmp	r0, #0
 800db1a:	dc07      	bgt.n	800db2c <__sflush_r+0xfc>
 800db1c:	89a2      	ldrh	r2, [r4, #12]
 800db1e:	2340      	movs	r3, #64	@ 0x40
 800db20:	2001      	movs	r0, #1
 800db22:	4313      	orrs	r3, r2
 800db24:	b21b      	sxth	r3, r3
 800db26:	81a3      	strh	r3, [r4, #12]
 800db28:	4240      	negs	r0, r0
 800db2a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800db2c:	9b01      	ldr	r3, [sp, #4]
 800db2e:	1836      	adds	r6, r6, r0
 800db30:	1a1b      	subs	r3, r3, r0
 800db32:	9301      	str	r3, [sp, #4]
 800db34:	e7e6      	b.n	800db04 <__sflush_r+0xd4>
 800db36:	46c0      	nop			@ (mov r8, r8)
 800db38:	dfbffffe 	.word	0xdfbffffe

0800db3c <_fflush_r>:
 800db3c:	690b      	ldr	r3, [r1, #16]
 800db3e:	b570      	push	{r4, r5, r6, lr}
 800db40:	0005      	movs	r5, r0
 800db42:	000c      	movs	r4, r1
 800db44:	2b00      	cmp	r3, #0
 800db46:	d102      	bne.n	800db4e <_fflush_r+0x12>
 800db48:	2500      	movs	r5, #0
 800db4a:	0028      	movs	r0, r5
 800db4c:	bd70      	pop	{r4, r5, r6, pc}
 800db4e:	2800      	cmp	r0, #0
 800db50:	d004      	beq.n	800db5c <_fflush_r+0x20>
 800db52:	6a03      	ldr	r3, [r0, #32]
 800db54:	2b00      	cmp	r3, #0
 800db56:	d101      	bne.n	800db5c <_fflush_r+0x20>
 800db58:	f7fe f822 	bl	800bba0 <__sinit>
 800db5c:	220c      	movs	r2, #12
 800db5e:	5ea3      	ldrsh	r3, [r4, r2]
 800db60:	2b00      	cmp	r3, #0
 800db62:	d0f1      	beq.n	800db48 <_fflush_r+0xc>
 800db64:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800db66:	07d2      	lsls	r2, r2, #31
 800db68:	d404      	bmi.n	800db74 <_fflush_r+0x38>
 800db6a:	059b      	lsls	r3, r3, #22
 800db6c:	d402      	bmi.n	800db74 <_fflush_r+0x38>
 800db6e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800db70:	f7fe f983 	bl	800be7a <__retarget_lock_acquire_recursive>
 800db74:	0028      	movs	r0, r5
 800db76:	0021      	movs	r1, r4
 800db78:	f7ff ff5a 	bl	800da30 <__sflush_r>
 800db7c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800db7e:	0005      	movs	r5, r0
 800db80:	07db      	lsls	r3, r3, #31
 800db82:	d4e2      	bmi.n	800db4a <_fflush_r+0xe>
 800db84:	89a3      	ldrh	r3, [r4, #12]
 800db86:	059b      	lsls	r3, r3, #22
 800db88:	d4df      	bmi.n	800db4a <_fflush_r+0xe>
 800db8a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800db8c:	f7fe f976 	bl	800be7c <__retarget_lock_release_recursive>
 800db90:	e7db      	b.n	800db4a <_fflush_r+0xe>

0800db92 <__swbuf_r>:
 800db92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db94:	0006      	movs	r6, r0
 800db96:	000d      	movs	r5, r1
 800db98:	0014      	movs	r4, r2
 800db9a:	2800      	cmp	r0, #0
 800db9c:	d004      	beq.n	800dba8 <__swbuf_r+0x16>
 800db9e:	6a03      	ldr	r3, [r0, #32]
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	d101      	bne.n	800dba8 <__swbuf_r+0x16>
 800dba4:	f7fd fffc 	bl	800bba0 <__sinit>
 800dba8:	69a3      	ldr	r3, [r4, #24]
 800dbaa:	60a3      	str	r3, [r4, #8]
 800dbac:	89a3      	ldrh	r3, [r4, #12]
 800dbae:	071b      	lsls	r3, r3, #28
 800dbb0:	d502      	bpl.n	800dbb8 <__swbuf_r+0x26>
 800dbb2:	6923      	ldr	r3, [r4, #16]
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d109      	bne.n	800dbcc <__swbuf_r+0x3a>
 800dbb8:	0021      	movs	r1, r4
 800dbba:	0030      	movs	r0, r6
 800dbbc:	f000 f82c 	bl	800dc18 <__swsetup_r>
 800dbc0:	2800      	cmp	r0, #0
 800dbc2:	d003      	beq.n	800dbcc <__swbuf_r+0x3a>
 800dbc4:	2501      	movs	r5, #1
 800dbc6:	426d      	negs	r5, r5
 800dbc8:	0028      	movs	r0, r5
 800dbca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dbcc:	6923      	ldr	r3, [r4, #16]
 800dbce:	6820      	ldr	r0, [r4, #0]
 800dbd0:	b2ef      	uxtb	r7, r5
 800dbd2:	1ac0      	subs	r0, r0, r3
 800dbd4:	6963      	ldr	r3, [r4, #20]
 800dbd6:	b2ed      	uxtb	r5, r5
 800dbd8:	4283      	cmp	r3, r0
 800dbda:	dc05      	bgt.n	800dbe8 <__swbuf_r+0x56>
 800dbdc:	0021      	movs	r1, r4
 800dbde:	0030      	movs	r0, r6
 800dbe0:	f7ff ffac 	bl	800db3c <_fflush_r>
 800dbe4:	2800      	cmp	r0, #0
 800dbe6:	d1ed      	bne.n	800dbc4 <__swbuf_r+0x32>
 800dbe8:	68a3      	ldr	r3, [r4, #8]
 800dbea:	3001      	adds	r0, #1
 800dbec:	3b01      	subs	r3, #1
 800dbee:	60a3      	str	r3, [r4, #8]
 800dbf0:	6823      	ldr	r3, [r4, #0]
 800dbf2:	1c5a      	adds	r2, r3, #1
 800dbf4:	6022      	str	r2, [r4, #0]
 800dbf6:	701f      	strb	r7, [r3, #0]
 800dbf8:	6963      	ldr	r3, [r4, #20]
 800dbfa:	4283      	cmp	r3, r0
 800dbfc:	d004      	beq.n	800dc08 <__swbuf_r+0x76>
 800dbfe:	89a3      	ldrh	r3, [r4, #12]
 800dc00:	07db      	lsls	r3, r3, #31
 800dc02:	d5e1      	bpl.n	800dbc8 <__swbuf_r+0x36>
 800dc04:	2d0a      	cmp	r5, #10
 800dc06:	d1df      	bne.n	800dbc8 <__swbuf_r+0x36>
 800dc08:	0021      	movs	r1, r4
 800dc0a:	0030      	movs	r0, r6
 800dc0c:	f7ff ff96 	bl	800db3c <_fflush_r>
 800dc10:	2800      	cmp	r0, #0
 800dc12:	d0d9      	beq.n	800dbc8 <__swbuf_r+0x36>
 800dc14:	e7d6      	b.n	800dbc4 <__swbuf_r+0x32>
	...

0800dc18 <__swsetup_r>:
 800dc18:	4b2d      	ldr	r3, [pc, #180]	@ (800dcd0 <__swsetup_r+0xb8>)
 800dc1a:	b570      	push	{r4, r5, r6, lr}
 800dc1c:	0005      	movs	r5, r0
 800dc1e:	6818      	ldr	r0, [r3, #0]
 800dc20:	000c      	movs	r4, r1
 800dc22:	2800      	cmp	r0, #0
 800dc24:	d004      	beq.n	800dc30 <__swsetup_r+0x18>
 800dc26:	6a03      	ldr	r3, [r0, #32]
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	d101      	bne.n	800dc30 <__swsetup_r+0x18>
 800dc2c:	f7fd ffb8 	bl	800bba0 <__sinit>
 800dc30:	230c      	movs	r3, #12
 800dc32:	5ee2      	ldrsh	r2, [r4, r3]
 800dc34:	0713      	lsls	r3, r2, #28
 800dc36:	d423      	bmi.n	800dc80 <__swsetup_r+0x68>
 800dc38:	06d3      	lsls	r3, r2, #27
 800dc3a:	d407      	bmi.n	800dc4c <__swsetup_r+0x34>
 800dc3c:	2309      	movs	r3, #9
 800dc3e:	602b      	str	r3, [r5, #0]
 800dc40:	2340      	movs	r3, #64	@ 0x40
 800dc42:	2001      	movs	r0, #1
 800dc44:	4313      	orrs	r3, r2
 800dc46:	81a3      	strh	r3, [r4, #12]
 800dc48:	4240      	negs	r0, r0
 800dc4a:	e03a      	b.n	800dcc2 <__swsetup_r+0xaa>
 800dc4c:	0752      	lsls	r2, r2, #29
 800dc4e:	d513      	bpl.n	800dc78 <__swsetup_r+0x60>
 800dc50:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800dc52:	2900      	cmp	r1, #0
 800dc54:	d008      	beq.n	800dc68 <__swsetup_r+0x50>
 800dc56:	0023      	movs	r3, r4
 800dc58:	3344      	adds	r3, #68	@ 0x44
 800dc5a:	4299      	cmp	r1, r3
 800dc5c:	d002      	beq.n	800dc64 <__swsetup_r+0x4c>
 800dc5e:	0028      	movs	r0, r5
 800dc60:	f7fe ff9a 	bl	800cb98 <_free_r>
 800dc64:	2300      	movs	r3, #0
 800dc66:	6363      	str	r3, [r4, #52]	@ 0x34
 800dc68:	2224      	movs	r2, #36	@ 0x24
 800dc6a:	89a3      	ldrh	r3, [r4, #12]
 800dc6c:	4393      	bics	r3, r2
 800dc6e:	81a3      	strh	r3, [r4, #12]
 800dc70:	2300      	movs	r3, #0
 800dc72:	6063      	str	r3, [r4, #4]
 800dc74:	6923      	ldr	r3, [r4, #16]
 800dc76:	6023      	str	r3, [r4, #0]
 800dc78:	2308      	movs	r3, #8
 800dc7a:	89a2      	ldrh	r2, [r4, #12]
 800dc7c:	4313      	orrs	r3, r2
 800dc7e:	81a3      	strh	r3, [r4, #12]
 800dc80:	6923      	ldr	r3, [r4, #16]
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d10b      	bne.n	800dc9e <__swsetup_r+0x86>
 800dc86:	21a0      	movs	r1, #160	@ 0xa0
 800dc88:	2280      	movs	r2, #128	@ 0x80
 800dc8a:	89a3      	ldrh	r3, [r4, #12]
 800dc8c:	0089      	lsls	r1, r1, #2
 800dc8e:	0092      	lsls	r2, r2, #2
 800dc90:	400b      	ands	r3, r1
 800dc92:	4293      	cmp	r3, r2
 800dc94:	d003      	beq.n	800dc9e <__swsetup_r+0x86>
 800dc96:	0021      	movs	r1, r4
 800dc98:	0028      	movs	r0, r5
 800dc9a:	f000 f91f 	bl	800dedc <__smakebuf_r>
 800dc9e:	230c      	movs	r3, #12
 800dca0:	5ee2      	ldrsh	r2, [r4, r3]
 800dca2:	2101      	movs	r1, #1
 800dca4:	0013      	movs	r3, r2
 800dca6:	400b      	ands	r3, r1
 800dca8:	420a      	tst	r2, r1
 800dcaa:	d00b      	beq.n	800dcc4 <__swsetup_r+0xac>
 800dcac:	2300      	movs	r3, #0
 800dcae:	60a3      	str	r3, [r4, #8]
 800dcb0:	6963      	ldr	r3, [r4, #20]
 800dcb2:	425b      	negs	r3, r3
 800dcb4:	61a3      	str	r3, [r4, #24]
 800dcb6:	2000      	movs	r0, #0
 800dcb8:	6923      	ldr	r3, [r4, #16]
 800dcba:	4283      	cmp	r3, r0
 800dcbc:	d101      	bne.n	800dcc2 <__swsetup_r+0xaa>
 800dcbe:	0613      	lsls	r3, r2, #24
 800dcc0:	d4be      	bmi.n	800dc40 <__swsetup_r+0x28>
 800dcc2:	bd70      	pop	{r4, r5, r6, pc}
 800dcc4:	0791      	lsls	r1, r2, #30
 800dcc6:	d400      	bmi.n	800dcca <__swsetup_r+0xb2>
 800dcc8:	6963      	ldr	r3, [r4, #20]
 800dcca:	60a3      	str	r3, [r4, #8]
 800dccc:	e7f3      	b.n	800dcb6 <__swsetup_r+0x9e>
 800dcce:	46c0      	nop			@ (mov r8, r8)
 800dcd0:	20000048 	.word	0x20000048

0800dcd4 <memmove>:
 800dcd4:	b510      	push	{r4, lr}
 800dcd6:	4288      	cmp	r0, r1
 800dcd8:	d806      	bhi.n	800dce8 <memmove+0x14>
 800dcda:	2300      	movs	r3, #0
 800dcdc:	429a      	cmp	r2, r3
 800dcde:	d008      	beq.n	800dcf2 <memmove+0x1e>
 800dce0:	5ccc      	ldrb	r4, [r1, r3]
 800dce2:	54c4      	strb	r4, [r0, r3]
 800dce4:	3301      	adds	r3, #1
 800dce6:	e7f9      	b.n	800dcdc <memmove+0x8>
 800dce8:	188b      	adds	r3, r1, r2
 800dcea:	4298      	cmp	r0, r3
 800dcec:	d2f5      	bcs.n	800dcda <memmove+0x6>
 800dcee:	3a01      	subs	r2, #1
 800dcf0:	d200      	bcs.n	800dcf4 <memmove+0x20>
 800dcf2:	bd10      	pop	{r4, pc}
 800dcf4:	5c8b      	ldrb	r3, [r1, r2]
 800dcf6:	5483      	strb	r3, [r0, r2]
 800dcf8:	e7f9      	b.n	800dcee <memmove+0x1a>
	...

0800dcfc <_sbrk_r>:
 800dcfc:	2300      	movs	r3, #0
 800dcfe:	b570      	push	{r4, r5, r6, lr}
 800dd00:	4d06      	ldr	r5, [pc, #24]	@ (800dd1c <_sbrk_r+0x20>)
 800dd02:	0004      	movs	r4, r0
 800dd04:	0008      	movs	r0, r1
 800dd06:	602b      	str	r3, [r5, #0]
 800dd08:	f7f7 fe1a 	bl	8005940 <_sbrk>
 800dd0c:	1c43      	adds	r3, r0, #1
 800dd0e:	d103      	bne.n	800dd18 <_sbrk_r+0x1c>
 800dd10:	682b      	ldr	r3, [r5, #0]
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	d000      	beq.n	800dd18 <_sbrk_r+0x1c>
 800dd16:	6023      	str	r3, [r4, #0]
 800dd18:	bd70      	pop	{r4, r5, r6, pc}
 800dd1a:	46c0      	nop			@ (mov r8, r8)
 800dd1c:	20001050 	.word	0x20001050

0800dd20 <memcpy>:
 800dd20:	2300      	movs	r3, #0
 800dd22:	b510      	push	{r4, lr}
 800dd24:	429a      	cmp	r2, r3
 800dd26:	d100      	bne.n	800dd2a <memcpy+0xa>
 800dd28:	bd10      	pop	{r4, pc}
 800dd2a:	5ccc      	ldrb	r4, [r1, r3]
 800dd2c:	54c4      	strb	r4, [r0, r3]
 800dd2e:	3301      	adds	r3, #1
 800dd30:	e7f8      	b.n	800dd24 <memcpy+0x4>
	...

0800dd34 <__assert_func>:
 800dd34:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800dd36:	0014      	movs	r4, r2
 800dd38:	001a      	movs	r2, r3
 800dd3a:	4b09      	ldr	r3, [pc, #36]	@ (800dd60 <__assert_func+0x2c>)
 800dd3c:	0005      	movs	r5, r0
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	000e      	movs	r6, r1
 800dd42:	68d8      	ldr	r0, [r3, #12]
 800dd44:	4b07      	ldr	r3, [pc, #28]	@ (800dd64 <__assert_func+0x30>)
 800dd46:	2c00      	cmp	r4, #0
 800dd48:	d101      	bne.n	800dd4e <__assert_func+0x1a>
 800dd4a:	4b07      	ldr	r3, [pc, #28]	@ (800dd68 <__assert_func+0x34>)
 800dd4c:	001c      	movs	r4, r3
 800dd4e:	4907      	ldr	r1, [pc, #28]	@ (800dd6c <__assert_func+0x38>)
 800dd50:	9301      	str	r3, [sp, #4]
 800dd52:	9402      	str	r4, [sp, #8]
 800dd54:	002b      	movs	r3, r5
 800dd56:	9600      	str	r6, [sp, #0]
 800dd58:	f000 f886 	bl	800de68 <fiprintf>
 800dd5c:	f000 f924 	bl	800dfa8 <abort>
 800dd60:	20000048 	.word	0x20000048
 800dd64:	0800ec5b 	.word	0x0800ec5b
 800dd68:	0800ec96 	.word	0x0800ec96
 800dd6c:	0800ec68 	.word	0x0800ec68

0800dd70 <_calloc_r>:
 800dd70:	b570      	push	{r4, r5, r6, lr}
 800dd72:	0c0b      	lsrs	r3, r1, #16
 800dd74:	0c15      	lsrs	r5, r2, #16
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	d11e      	bne.n	800ddb8 <_calloc_r+0x48>
 800dd7a:	2d00      	cmp	r5, #0
 800dd7c:	d10c      	bne.n	800dd98 <_calloc_r+0x28>
 800dd7e:	b289      	uxth	r1, r1
 800dd80:	b294      	uxth	r4, r2
 800dd82:	434c      	muls	r4, r1
 800dd84:	0021      	movs	r1, r4
 800dd86:	f7fe ff7d 	bl	800cc84 <_malloc_r>
 800dd8a:	1e05      	subs	r5, r0, #0
 800dd8c:	d01a      	beq.n	800ddc4 <_calloc_r+0x54>
 800dd8e:	0022      	movs	r2, r4
 800dd90:	2100      	movs	r1, #0
 800dd92:	f7fd ffed 	bl	800bd70 <memset>
 800dd96:	e016      	b.n	800ddc6 <_calloc_r+0x56>
 800dd98:	1c2b      	adds	r3, r5, #0
 800dd9a:	1c0c      	adds	r4, r1, #0
 800dd9c:	b289      	uxth	r1, r1
 800dd9e:	b292      	uxth	r2, r2
 800dda0:	434a      	muls	r2, r1
 800dda2:	b29b      	uxth	r3, r3
 800dda4:	b2a1      	uxth	r1, r4
 800dda6:	4359      	muls	r1, r3
 800dda8:	0c14      	lsrs	r4, r2, #16
 800ddaa:	190c      	adds	r4, r1, r4
 800ddac:	0c23      	lsrs	r3, r4, #16
 800ddae:	d107      	bne.n	800ddc0 <_calloc_r+0x50>
 800ddb0:	0424      	lsls	r4, r4, #16
 800ddb2:	b292      	uxth	r2, r2
 800ddb4:	4314      	orrs	r4, r2
 800ddb6:	e7e5      	b.n	800dd84 <_calloc_r+0x14>
 800ddb8:	2d00      	cmp	r5, #0
 800ddba:	d101      	bne.n	800ddc0 <_calloc_r+0x50>
 800ddbc:	1c14      	adds	r4, r2, #0
 800ddbe:	e7ed      	b.n	800dd9c <_calloc_r+0x2c>
 800ddc0:	230c      	movs	r3, #12
 800ddc2:	6003      	str	r3, [r0, #0]
 800ddc4:	2500      	movs	r5, #0
 800ddc6:	0028      	movs	r0, r5
 800ddc8:	bd70      	pop	{r4, r5, r6, pc}

0800ddca <__ascii_mbtowc>:
 800ddca:	b082      	sub	sp, #8
 800ddcc:	2900      	cmp	r1, #0
 800ddce:	d100      	bne.n	800ddd2 <__ascii_mbtowc+0x8>
 800ddd0:	a901      	add	r1, sp, #4
 800ddd2:	1e10      	subs	r0, r2, #0
 800ddd4:	d006      	beq.n	800dde4 <__ascii_mbtowc+0x1a>
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d006      	beq.n	800dde8 <__ascii_mbtowc+0x1e>
 800ddda:	7813      	ldrb	r3, [r2, #0]
 800dddc:	600b      	str	r3, [r1, #0]
 800ddde:	7810      	ldrb	r0, [r2, #0]
 800dde0:	1e43      	subs	r3, r0, #1
 800dde2:	4198      	sbcs	r0, r3
 800dde4:	b002      	add	sp, #8
 800dde6:	4770      	bx	lr
 800dde8:	2002      	movs	r0, #2
 800ddea:	4240      	negs	r0, r0
 800ddec:	e7fa      	b.n	800dde4 <__ascii_mbtowc+0x1a>

0800ddee <_realloc_r>:
 800ddee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ddf0:	0006      	movs	r6, r0
 800ddf2:	000c      	movs	r4, r1
 800ddf4:	0015      	movs	r5, r2
 800ddf6:	2900      	cmp	r1, #0
 800ddf8:	d105      	bne.n	800de06 <_realloc_r+0x18>
 800ddfa:	0011      	movs	r1, r2
 800ddfc:	f7fe ff42 	bl	800cc84 <_malloc_r>
 800de00:	0004      	movs	r4, r0
 800de02:	0020      	movs	r0, r4
 800de04:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800de06:	2a00      	cmp	r2, #0
 800de08:	d103      	bne.n	800de12 <_realloc_r+0x24>
 800de0a:	f7fe fec5 	bl	800cb98 <_free_r>
 800de0e:	2400      	movs	r4, #0
 800de10:	e7f7      	b.n	800de02 <_realloc_r+0x14>
 800de12:	f000 f8d0 	bl	800dfb6 <_malloc_usable_size_r>
 800de16:	0007      	movs	r7, r0
 800de18:	4285      	cmp	r5, r0
 800de1a:	d802      	bhi.n	800de22 <_realloc_r+0x34>
 800de1c:	0843      	lsrs	r3, r0, #1
 800de1e:	42ab      	cmp	r3, r5
 800de20:	d3ef      	bcc.n	800de02 <_realloc_r+0x14>
 800de22:	0029      	movs	r1, r5
 800de24:	0030      	movs	r0, r6
 800de26:	f7fe ff2d 	bl	800cc84 <_malloc_r>
 800de2a:	9001      	str	r0, [sp, #4]
 800de2c:	2800      	cmp	r0, #0
 800de2e:	d0ee      	beq.n	800de0e <_realloc_r+0x20>
 800de30:	002a      	movs	r2, r5
 800de32:	42bd      	cmp	r5, r7
 800de34:	d900      	bls.n	800de38 <_realloc_r+0x4a>
 800de36:	003a      	movs	r2, r7
 800de38:	0021      	movs	r1, r4
 800de3a:	9801      	ldr	r0, [sp, #4]
 800de3c:	f7ff ff70 	bl	800dd20 <memcpy>
 800de40:	0021      	movs	r1, r4
 800de42:	0030      	movs	r0, r6
 800de44:	f7fe fea8 	bl	800cb98 <_free_r>
 800de48:	9c01      	ldr	r4, [sp, #4]
 800de4a:	e7da      	b.n	800de02 <_realloc_r+0x14>

0800de4c <__ascii_wctomb>:
 800de4c:	0003      	movs	r3, r0
 800de4e:	1e08      	subs	r0, r1, #0
 800de50:	d005      	beq.n	800de5e <__ascii_wctomb+0x12>
 800de52:	2aff      	cmp	r2, #255	@ 0xff
 800de54:	d904      	bls.n	800de60 <__ascii_wctomb+0x14>
 800de56:	228a      	movs	r2, #138	@ 0x8a
 800de58:	2001      	movs	r0, #1
 800de5a:	601a      	str	r2, [r3, #0]
 800de5c:	4240      	negs	r0, r0
 800de5e:	4770      	bx	lr
 800de60:	2001      	movs	r0, #1
 800de62:	700a      	strb	r2, [r1, #0]
 800de64:	e7fb      	b.n	800de5e <__ascii_wctomb+0x12>
	...

0800de68 <fiprintf>:
 800de68:	b40e      	push	{r1, r2, r3}
 800de6a:	b517      	push	{r0, r1, r2, r4, lr}
 800de6c:	4c05      	ldr	r4, [pc, #20]	@ (800de84 <fiprintf+0x1c>)
 800de6e:	ab05      	add	r3, sp, #20
 800de70:	cb04      	ldmia	r3!, {r2}
 800de72:	0001      	movs	r1, r0
 800de74:	6820      	ldr	r0, [r4, #0]
 800de76:	9301      	str	r3, [sp, #4]
 800de78:	f7ff fcbe 	bl	800d7f8 <_vfiprintf_r>
 800de7c:	bc1e      	pop	{r1, r2, r3, r4}
 800de7e:	bc08      	pop	{r3}
 800de80:	b003      	add	sp, #12
 800de82:	4718      	bx	r3
 800de84:	20000048 	.word	0x20000048

0800de88 <__swhatbuf_r>:
 800de88:	b570      	push	{r4, r5, r6, lr}
 800de8a:	000e      	movs	r6, r1
 800de8c:	001d      	movs	r5, r3
 800de8e:	230e      	movs	r3, #14
 800de90:	5ec9      	ldrsh	r1, [r1, r3]
 800de92:	0014      	movs	r4, r2
 800de94:	b096      	sub	sp, #88	@ 0x58
 800de96:	2900      	cmp	r1, #0
 800de98:	da0c      	bge.n	800deb4 <__swhatbuf_r+0x2c>
 800de9a:	89b2      	ldrh	r2, [r6, #12]
 800de9c:	2380      	movs	r3, #128	@ 0x80
 800de9e:	0011      	movs	r1, r2
 800dea0:	4019      	ands	r1, r3
 800dea2:	421a      	tst	r2, r3
 800dea4:	d114      	bne.n	800ded0 <__swhatbuf_r+0x48>
 800dea6:	2380      	movs	r3, #128	@ 0x80
 800dea8:	00db      	lsls	r3, r3, #3
 800deaa:	2000      	movs	r0, #0
 800deac:	6029      	str	r1, [r5, #0]
 800deae:	6023      	str	r3, [r4, #0]
 800deb0:	b016      	add	sp, #88	@ 0x58
 800deb2:	bd70      	pop	{r4, r5, r6, pc}
 800deb4:	466a      	mov	r2, sp
 800deb6:	f000 f853 	bl	800df60 <_fstat_r>
 800deba:	2800      	cmp	r0, #0
 800debc:	dbed      	blt.n	800de9a <__swhatbuf_r+0x12>
 800debe:	23f0      	movs	r3, #240	@ 0xf0
 800dec0:	9901      	ldr	r1, [sp, #4]
 800dec2:	021b      	lsls	r3, r3, #8
 800dec4:	4019      	ands	r1, r3
 800dec6:	4b04      	ldr	r3, [pc, #16]	@ (800ded8 <__swhatbuf_r+0x50>)
 800dec8:	18c9      	adds	r1, r1, r3
 800deca:	424b      	negs	r3, r1
 800decc:	4159      	adcs	r1, r3
 800dece:	e7ea      	b.n	800dea6 <__swhatbuf_r+0x1e>
 800ded0:	2100      	movs	r1, #0
 800ded2:	2340      	movs	r3, #64	@ 0x40
 800ded4:	e7e9      	b.n	800deaa <__swhatbuf_r+0x22>
 800ded6:	46c0      	nop			@ (mov r8, r8)
 800ded8:	ffffe000 	.word	0xffffe000

0800dedc <__smakebuf_r>:
 800dedc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dede:	2602      	movs	r6, #2
 800dee0:	898b      	ldrh	r3, [r1, #12]
 800dee2:	0005      	movs	r5, r0
 800dee4:	000c      	movs	r4, r1
 800dee6:	b085      	sub	sp, #20
 800dee8:	4233      	tst	r3, r6
 800deea:	d007      	beq.n	800defc <__smakebuf_r+0x20>
 800deec:	0023      	movs	r3, r4
 800deee:	3347      	adds	r3, #71	@ 0x47
 800def0:	6023      	str	r3, [r4, #0]
 800def2:	6123      	str	r3, [r4, #16]
 800def4:	2301      	movs	r3, #1
 800def6:	6163      	str	r3, [r4, #20]
 800def8:	b005      	add	sp, #20
 800defa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800defc:	ab03      	add	r3, sp, #12
 800defe:	aa02      	add	r2, sp, #8
 800df00:	f7ff ffc2 	bl	800de88 <__swhatbuf_r>
 800df04:	9f02      	ldr	r7, [sp, #8]
 800df06:	9001      	str	r0, [sp, #4]
 800df08:	0039      	movs	r1, r7
 800df0a:	0028      	movs	r0, r5
 800df0c:	f7fe feba 	bl	800cc84 <_malloc_r>
 800df10:	2800      	cmp	r0, #0
 800df12:	d108      	bne.n	800df26 <__smakebuf_r+0x4a>
 800df14:	220c      	movs	r2, #12
 800df16:	5ea3      	ldrsh	r3, [r4, r2]
 800df18:	059a      	lsls	r2, r3, #22
 800df1a:	d4ed      	bmi.n	800def8 <__smakebuf_r+0x1c>
 800df1c:	2203      	movs	r2, #3
 800df1e:	4393      	bics	r3, r2
 800df20:	431e      	orrs	r6, r3
 800df22:	81a6      	strh	r6, [r4, #12]
 800df24:	e7e2      	b.n	800deec <__smakebuf_r+0x10>
 800df26:	2380      	movs	r3, #128	@ 0x80
 800df28:	89a2      	ldrh	r2, [r4, #12]
 800df2a:	6020      	str	r0, [r4, #0]
 800df2c:	4313      	orrs	r3, r2
 800df2e:	81a3      	strh	r3, [r4, #12]
 800df30:	9b03      	ldr	r3, [sp, #12]
 800df32:	6120      	str	r0, [r4, #16]
 800df34:	6167      	str	r7, [r4, #20]
 800df36:	2b00      	cmp	r3, #0
 800df38:	d00c      	beq.n	800df54 <__smakebuf_r+0x78>
 800df3a:	0028      	movs	r0, r5
 800df3c:	230e      	movs	r3, #14
 800df3e:	5ee1      	ldrsh	r1, [r4, r3]
 800df40:	f000 f820 	bl	800df84 <_isatty_r>
 800df44:	2800      	cmp	r0, #0
 800df46:	d005      	beq.n	800df54 <__smakebuf_r+0x78>
 800df48:	2303      	movs	r3, #3
 800df4a:	89a2      	ldrh	r2, [r4, #12]
 800df4c:	439a      	bics	r2, r3
 800df4e:	3b02      	subs	r3, #2
 800df50:	4313      	orrs	r3, r2
 800df52:	81a3      	strh	r3, [r4, #12]
 800df54:	89a3      	ldrh	r3, [r4, #12]
 800df56:	9a01      	ldr	r2, [sp, #4]
 800df58:	4313      	orrs	r3, r2
 800df5a:	81a3      	strh	r3, [r4, #12]
 800df5c:	e7cc      	b.n	800def8 <__smakebuf_r+0x1c>
	...

0800df60 <_fstat_r>:
 800df60:	2300      	movs	r3, #0
 800df62:	b570      	push	{r4, r5, r6, lr}
 800df64:	4d06      	ldr	r5, [pc, #24]	@ (800df80 <_fstat_r+0x20>)
 800df66:	0004      	movs	r4, r0
 800df68:	0008      	movs	r0, r1
 800df6a:	0011      	movs	r1, r2
 800df6c:	602b      	str	r3, [r5, #0]
 800df6e:	f7f7 fcc5 	bl	80058fc <_fstat>
 800df72:	1c43      	adds	r3, r0, #1
 800df74:	d103      	bne.n	800df7e <_fstat_r+0x1e>
 800df76:	682b      	ldr	r3, [r5, #0]
 800df78:	2b00      	cmp	r3, #0
 800df7a:	d000      	beq.n	800df7e <_fstat_r+0x1e>
 800df7c:	6023      	str	r3, [r4, #0]
 800df7e:	bd70      	pop	{r4, r5, r6, pc}
 800df80:	20001050 	.word	0x20001050

0800df84 <_isatty_r>:
 800df84:	2300      	movs	r3, #0
 800df86:	b570      	push	{r4, r5, r6, lr}
 800df88:	4d06      	ldr	r5, [pc, #24]	@ (800dfa4 <_isatty_r+0x20>)
 800df8a:	0004      	movs	r4, r0
 800df8c:	0008      	movs	r0, r1
 800df8e:	602b      	str	r3, [r5, #0]
 800df90:	f7f7 fcc2 	bl	8005918 <_isatty>
 800df94:	1c43      	adds	r3, r0, #1
 800df96:	d103      	bne.n	800dfa0 <_isatty_r+0x1c>
 800df98:	682b      	ldr	r3, [r5, #0]
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d000      	beq.n	800dfa0 <_isatty_r+0x1c>
 800df9e:	6023      	str	r3, [r4, #0]
 800dfa0:	bd70      	pop	{r4, r5, r6, pc}
 800dfa2:	46c0      	nop			@ (mov r8, r8)
 800dfa4:	20001050 	.word	0x20001050

0800dfa8 <abort>:
 800dfa8:	2006      	movs	r0, #6
 800dfaa:	b510      	push	{r4, lr}
 800dfac:	f000 f834 	bl	800e018 <raise>
 800dfb0:	2001      	movs	r0, #1
 800dfb2:	f7f7 fc6f 	bl	8005894 <_exit>

0800dfb6 <_malloc_usable_size_r>:
 800dfb6:	1f0b      	subs	r3, r1, #4
 800dfb8:	681b      	ldr	r3, [r3, #0]
 800dfba:	1f18      	subs	r0, r3, #4
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	da01      	bge.n	800dfc4 <_malloc_usable_size_r+0xe>
 800dfc0:	580b      	ldr	r3, [r1, r0]
 800dfc2:	18c0      	adds	r0, r0, r3
 800dfc4:	4770      	bx	lr

0800dfc6 <_raise_r>:
 800dfc6:	b570      	push	{r4, r5, r6, lr}
 800dfc8:	0004      	movs	r4, r0
 800dfca:	000d      	movs	r5, r1
 800dfcc:	291f      	cmp	r1, #31
 800dfce:	d904      	bls.n	800dfda <_raise_r+0x14>
 800dfd0:	2316      	movs	r3, #22
 800dfd2:	6003      	str	r3, [r0, #0]
 800dfd4:	2001      	movs	r0, #1
 800dfd6:	4240      	negs	r0, r0
 800dfd8:	bd70      	pop	{r4, r5, r6, pc}
 800dfda:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	d004      	beq.n	800dfea <_raise_r+0x24>
 800dfe0:	008a      	lsls	r2, r1, #2
 800dfe2:	189b      	adds	r3, r3, r2
 800dfe4:	681a      	ldr	r2, [r3, #0]
 800dfe6:	2a00      	cmp	r2, #0
 800dfe8:	d108      	bne.n	800dffc <_raise_r+0x36>
 800dfea:	0020      	movs	r0, r4
 800dfec:	f000 f830 	bl	800e050 <_getpid_r>
 800dff0:	002a      	movs	r2, r5
 800dff2:	0001      	movs	r1, r0
 800dff4:	0020      	movs	r0, r4
 800dff6:	f000 f819 	bl	800e02c <_kill_r>
 800dffa:	e7ed      	b.n	800dfd8 <_raise_r+0x12>
 800dffc:	2a01      	cmp	r2, #1
 800dffe:	d009      	beq.n	800e014 <_raise_r+0x4e>
 800e000:	1c51      	adds	r1, r2, #1
 800e002:	d103      	bne.n	800e00c <_raise_r+0x46>
 800e004:	2316      	movs	r3, #22
 800e006:	6003      	str	r3, [r0, #0]
 800e008:	2001      	movs	r0, #1
 800e00a:	e7e5      	b.n	800dfd8 <_raise_r+0x12>
 800e00c:	2100      	movs	r1, #0
 800e00e:	0028      	movs	r0, r5
 800e010:	6019      	str	r1, [r3, #0]
 800e012:	4790      	blx	r2
 800e014:	2000      	movs	r0, #0
 800e016:	e7df      	b.n	800dfd8 <_raise_r+0x12>

0800e018 <raise>:
 800e018:	b510      	push	{r4, lr}
 800e01a:	4b03      	ldr	r3, [pc, #12]	@ (800e028 <raise+0x10>)
 800e01c:	0001      	movs	r1, r0
 800e01e:	6818      	ldr	r0, [r3, #0]
 800e020:	f7ff ffd1 	bl	800dfc6 <_raise_r>
 800e024:	bd10      	pop	{r4, pc}
 800e026:	46c0      	nop			@ (mov r8, r8)
 800e028:	20000048 	.word	0x20000048

0800e02c <_kill_r>:
 800e02c:	2300      	movs	r3, #0
 800e02e:	b570      	push	{r4, r5, r6, lr}
 800e030:	4d06      	ldr	r5, [pc, #24]	@ (800e04c <_kill_r+0x20>)
 800e032:	0004      	movs	r4, r0
 800e034:	0008      	movs	r0, r1
 800e036:	0011      	movs	r1, r2
 800e038:	602b      	str	r3, [r5, #0]
 800e03a:	f7f7 fc1b 	bl	8005874 <_kill>
 800e03e:	1c43      	adds	r3, r0, #1
 800e040:	d103      	bne.n	800e04a <_kill_r+0x1e>
 800e042:	682b      	ldr	r3, [r5, #0]
 800e044:	2b00      	cmp	r3, #0
 800e046:	d000      	beq.n	800e04a <_kill_r+0x1e>
 800e048:	6023      	str	r3, [r4, #0]
 800e04a:	bd70      	pop	{r4, r5, r6, pc}
 800e04c:	20001050 	.word	0x20001050

0800e050 <_getpid_r>:
 800e050:	b510      	push	{r4, lr}
 800e052:	f7f7 fc09 	bl	8005868 <_getpid>
 800e056:	bd10      	pop	{r4, pc}

0800e058 <expf>:
 800e058:	b570      	push	{r4, r5, r6, lr}
 800e05a:	1c04      	adds	r4, r0, #0
 800e05c:	f000 f8c2 	bl	800e1e4 <__ieee754_expf>
 800e060:	1c05      	adds	r5, r0, #0
 800e062:	1c20      	adds	r0, r4, #0
 800e064:	f000 f83c 	bl	800e0e0 <finitef>
 800e068:	2800      	cmp	r0, #0
 800e06a:	d00b      	beq.n	800e084 <expf+0x2c>
 800e06c:	490c      	ldr	r1, [pc, #48]	@ (800e0a0 <expf+0x48>)
 800e06e:	1c20      	adds	r0, r4, #0
 800e070:	f7f2 fa40 	bl	80004f4 <__aeabi_fcmpgt>
 800e074:	2800      	cmp	r0, #0
 800e076:	d007      	beq.n	800e088 <expf+0x30>
 800e078:	f7fd fed4 	bl	800be24 <__errno>
 800e07c:	25ff      	movs	r5, #255	@ 0xff
 800e07e:	2322      	movs	r3, #34	@ 0x22
 800e080:	05ed      	lsls	r5, r5, #23
 800e082:	6003      	str	r3, [r0, #0]
 800e084:	1c28      	adds	r0, r5, #0
 800e086:	bd70      	pop	{r4, r5, r6, pc}
 800e088:	4906      	ldr	r1, [pc, #24]	@ (800e0a4 <expf+0x4c>)
 800e08a:	1c20      	adds	r0, r4, #0
 800e08c:	f7f2 fa1e 	bl	80004cc <__aeabi_fcmplt>
 800e090:	2800      	cmp	r0, #0
 800e092:	d0f7      	beq.n	800e084 <expf+0x2c>
 800e094:	f7fd fec6 	bl	800be24 <__errno>
 800e098:	2322      	movs	r3, #34	@ 0x22
 800e09a:	2500      	movs	r5, #0
 800e09c:	6003      	str	r3, [r0, #0]
 800e09e:	e7f1      	b.n	800e084 <expf+0x2c>
 800e0a0:	42b17217 	.word	0x42b17217
 800e0a4:	c2cff1b5 	.word	0xc2cff1b5

0800e0a8 <sqrtf>:
 800e0a8:	b570      	push	{r4, r5, r6, lr}
 800e0aa:	1c05      	adds	r5, r0, #0
 800e0ac:	f000 f822 	bl	800e0f4 <__ieee754_sqrtf>
 800e0b0:	1c29      	adds	r1, r5, #0
 800e0b2:	1c04      	adds	r4, r0, #0
 800e0b4:	1c28      	adds	r0, r5, #0
 800e0b6:	f7f3 f99d 	bl	80013f4 <__aeabi_fcmpun>
 800e0ba:	2800      	cmp	r0, #0
 800e0bc:	d10e      	bne.n	800e0dc <sqrtf+0x34>
 800e0be:	2100      	movs	r1, #0
 800e0c0:	1c28      	adds	r0, r5, #0
 800e0c2:	f7f2 fa03 	bl	80004cc <__aeabi_fcmplt>
 800e0c6:	2800      	cmp	r0, #0
 800e0c8:	d008      	beq.n	800e0dc <sqrtf+0x34>
 800e0ca:	f7fd feab 	bl	800be24 <__errno>
 800e0ce:	2321      	movs	r3, #33	@ 0x21
 800e0d0:	2100      	movs	r1, #0
 800e0d2:	6003      	str	r3, [r0, #0]
 800e0d4:	1c08      	adds	r0, r1, #0
 800e0d6:	f7f2 fcc5 	bl	8000a64 <__aeabi_fdiv>
 800e0da:	1c04      	adds	r4, r0, #0
 800e0dc:	1c20      	adds	r0, r4, #0
 800e0de:	bd70      	pop	{r4, r5, r6, pc}

0800e0e0 <finitef>:
 800e0e0:	22ff      	movs	r2, #255	@ 0xff
 800e0e2:	0043      	lsls	r3, r0, #1
 800e0e4:	085b      	lsrs	r3, r3, #1
 800e0e6:	2001      	movs	r0, #1
 800e0e8:	05d2      	lsls	r2, r2, #23
 800e0ea:	4293      	cmp	r3, r2
 800e0ec:	db00      	blt.n	800e0f0 <finitef+0x10>
 800e0ee:	2000      	movs	r0, #0
 800e0f0:	4770      	bx	lr
	...

0800e0f4 <__ieee754_sqrtf>:
 800e0f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e0f6:	0003      	movs	r3, r0
 800e0f8:	0042      	lsls	r2, r0, #1
 800e0fa:	1c04      	adds	r4, r0, #0
 800e0fc:	20ff      	movs	r0, #255	@ 0xff
 800e0fe:	0852      	lsrs	r2, r2, #1
 800e100:	05c0      	lsls	r0, r0, #23
 800e102:	4282      	cmp	r2, r0
 800e104:	d30a      	bcc.n	800e11c <__ieee754_sqrtf+0x28>
 800e106:	1c21      	adds	r1, r4, #0
 800e108:	1c20      	adds	r0, r4, #0
 800e10a:	f7f2 fe91 	bl	8000e30 <__aeabi_fmul>
 800e10e:	1c01      	adds	r1, r0, #0
 800e110:	1c20      	adds	r0, r4, #0
 800e112:	f7f2 fb1d 	bl	8000750 <__aeabi_fadd>
 800e116:	1c04      	adds	r4, r0, #0
 800e118:	1c20      	adds	r0, r4, #0
 800e11a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800e11c:	2a00      	cmp	r2, #0
 800e11e:	d0fb      	beq.n	800e118 <__ieee754_sqrtf+0x24>
 800e120:	2c00      	cmp	r4, #0
 800e122:	da07      	bge.n	800e134 <__ieee754_sqrtf+0x40>
 800e124:	1c21      	adds	r1, r4, #0
 800e126:	1c20      	adds	r0, r4, #0
 800e128:	f7f2 ffc0 	bl	80010ac <__aeabi_fsub>
 800e12c:	1c01      	adds	r1, r0, #0
 800e12e:	f7f2 fc99 	bl	8000a64 <__aeabi_fdiv>
 800e132:	e7f0      	b.n	800e116 <__ieee754_sqrtf+0x22>
 800e134:	0022      	movs	r2, r4
 800e136:	15e1      	asrs	r1, r4, #23
 800e138:	4002      	ands	r2, r0
 800e13a:	4204      	tst	r4, r0
 800e13c:	d046      	beq.n	800e1cc <__ieee754_sqrtf+0xd8>
 800e13e:	2280      	movs	r2, #128	@ 0x80
 800e140:	000f      	movs	r7, r1
 800e142:	025b      	lsls	r3, r3, #9
 800e144:	0a5b      	lsrs	r3, r3, #9
 800e146:	0412      	lsls	r2, r2, #16
 800e148:	3f7f      	subs	r7, #127	@ 0x7f
 800e14a:	4313      	orrs	r3, r2
 800e14c:	07c9      	lsls	r1, r1, #31
 800e14e:	d400      	bmi.n	800e152 <__ieee754_sqrtf+0x5e>
 800e150:	005b      	lsls	r3, r3, #1
 800e152:	2400      	movs	r4, #0
 800e154:	2180      	movs	r1, #128	@ 0x80
 800e156:	2019      	movs	r0, #25
 800e158:	0026      	movs	r6, r4
 800e15a:	107f      	asrs	r7, r7, #1
 800e15c:	005b      	lsls	r3, r3, #1
 800e15e:	0449      	lsls	r1, r1, #17
 800e160:	1875      	adds	r5, r6, r1
 800e162:	001a      	movs	r2, r3
 800e164:	429d      	cmp	r5, r3
 800e166:	dc02      	bgt.n	800e16e <__ieee754_sqrtf+0x7a>
 800e168:	186e      	adds	r6, r5, r1
 800e16a:	1b5a      	subs	r2, r3, r5
 800e16c:	1864      	adds	r4, r4, r1
 800e16e:	3801      	subs	r0, #1
 800e170:	0053      	lsls	r3, r2, #1
 800e172:	0849      	lsrs	r1, r1, #1
 800e174:	2800      	cmp	r0, #0
 800e176:	d1f3      	bne.n	800e160 <__ieee754_sqrtf+0x6c>
 800e178:	2a00      	cmp	r2, #0
 800e17a:	d019      	beq.n	800e1b0 <__ieee754_sqrtf+0xbc>
 800e17c:	4d17      	ldr	r5, [pc, #92]	@ (800e1dc <__ieee754_sqrtf+0xe8>)
 800e17e:	4e18      	ldr	r6, [pc, #96]	@ (800e1e0 <__ieee754_sqrtf+0xec>)
 800e180:	6828      	ldr	r0, [r5, #0]
 800e182:	6831      	ldr	r1, [r6, #0]
 800e184:	682b      	ldr	r3, [r5, #0]
 800e186:	9301      	str	r3, [sp, #4]
 800e188:	f7f2 ff90 	bl	80010ac <__aeabi_fsub>
 800e18c:	1c01      	adds	r1, r0, #0
 800e18e:	9801      	ldr	r0, [sp, #4]
 800e190:	f7f2 f9a6 	bl	80004e0 <__aeabi_fcmple>
 800e194:	2800      	cmp	r0, #0
 800e196:	d00b      	beq.n	800e1b0 <__ieee754_sqrtf+0xbc>
 800e198:	6828      	ldr	r0, [r5, #0]
 800e19a:	6831      	ldr	r1, [r6, #0]
 800e19c:	f7f2 fad8 	bl	8000750 <__aeabi_fadd>
 800e1a0:	682d      	ldr	r5, [r5, #0]
 800e1a2:	1c01      	adds	r1, r0, #0
 800e1a4:	1c28      	adds	r0, r5, #0
 800e1a6:	f7f2 f991 	bl	80004cc <__aeabi_fcmplt>
 800e1aa:	2800      	cmp	r0, #0
 800e1ac:	d011      	beq.n	800e1d2 <__ieee754_sqrtf+0xde>
 800e1ae:	3402      	adds	r4, #2
 800e1b0:	23fc      	movs	r3, #252	@ 0xfc
 800e1b2:	1064      	asrs	r4, r4, #1
 800e1b4:	059b      	lsls	r3, r3, #22
 800e1b6:	18e3      	adds	r3, r4, r3
 800e1b8:	05fc      	lsls	r4, r7, #23
 800e1ba:	18e4      	adds	r4, r4, r3
 800e1bc:	e7ac      	b.n	800e118 <__ieee754_sqrtf+0x24>
 800e1be:	005b      	lsls	r3, r3, #1
 800e1c0:	3201      	adds	r2, #1
 800e1c2:	4203      	tst	r3, r0
 800e1c4:	d0fb      	beq.n	800e1be <__ieee754_sqrtf+0xca>
 800e1c6:	3a01      	subs	r2, #1
 800e1c8:	1a89      	subs	r1, r1, r2
 800e1ca:	e7b8      	b.n	800e13e <__ieee754_sqrtf+0x4a>
 800e1cc:	2080      	movs	r0, #128	@ 0x80
 800e1ce:	0400      	lsls	r0, r0, #16
 800e1d0:	e7f7      	b.n	800e1c2 <__ieee754_sqrtf+0xce>
 800e1d2:	2301      	movs	r3, #1
 800e1d4:	3401      	adds	r4, #1
 800e1d6:	439c      	bics	r4, r3
 800e1d8:	e7ea      	b.n	800e1b0 <__ieee754_sqrtf+0xbc>
 800e1da:	46c0      	nop			@ (mov r8, r8)
 800e1dc:	20000208 	.word	0x20000208
 800e1e0:	20000204 	.word	0x20000204

0800e1e4 <__ieee754_expf>:
 800e1e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e1e6:	21ff      	movs	r1, #255	@ 0xff
 800e1e8:	0043      	lsls	r3, r0, #1
 800e1ea:	1c04      	adds	r4, r0, #0
 800e1ec:	085b      	lsrs	r3, r3, #1
 800e1ee:	05c9      	lsls	r1, r1, #23
 800e1f0:	428b      	cmp	r3, r1
 800e1f2:	d904      	bls.n	800e1fe <__ieee754_expf+0x1a>
 800e1f4:	1c01      	adds	r1, r0, #0
 800e1f6:	1c20      	adds	r0, r4, #0
 800e1f8:	f7f2 faaa 	bl	8000750 <__aeabi_fadd>
 800e1fc:	e00d      	b.n	800e21a <__ieee754_expf+0x36>
 800e1fe:	0fc6      	lsrs	r6, r0, #31
 800e200:	428b      	cmp	r3, r1
 800e202:	d104      	bne.n	800e20e <__ieee754_expf+0x2a>
 800e204:	2e00      	cmp	r6, #0
 800e206:	d000      	beq.n	800e20a <__ieee754_expf+0x26>
 800e208:	e0ba      	b.n	800e380 <__ieee754_expf+0x19c>
 800e20a:	1c20      	adds	r0, r4, #0
 800e20c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800e20e:	495d      	ldr	r1, [pc, #372]	@ (800e384 <__ieee754_expf+0x1a0>)
 800e210:	4288      	cmp	r0, r1
 800e212:	dd04      	ble.n	800e21e <__ieee754_expf+0x3a>
 800e214:	2000      	movs	r0, #0
 800e216:	f000 f8f1 	bl	800e3fc <__math_oflowf>
 800e21a:	1c04      	adds	r4, r0, #0
 800e21c:	e7f5      	b.n	800e20a <__ieee754_expf+0x26>
 800e21e:	2800      	cmp	r0, #0
 800e220:	da06      	bge.n	800e230 <__ieee754_expf+0x4c>
 800e222:	4a59      	ldr	r2, [pc, #356]	@ (800e388 <__ieee754_expf+0x1a4>)
 800e224:	4293      	cmp	r3, r2
 800e226:	d903      	bls.n	800e230 <__ieee754_expf+0x4c>
 800e228:	2000      	movs	r0, #0
 800e22a:	f000 f8e1 	bl	800e3f0 <__math_uflowf>
 800e22e:	e7f4      	b.n	800e21a <__ieee754_expf+0x36>
 800e230:	4a56      	ldr	r2, [pc, #344]	@ (800e38c <__ieee754_expf+0x1a8>)
 800e232:	4293      	cmp	r3, r2
 800e234:	d96e      	bls.n	800e314 <__ieee754_expf+0x130>
 800e236:	4a56      	ldr	r2, [pc, #344]	@ (800e390 <__ieee754_expf+0x1ac>)
 800e238:	00b5      	lsls	r5, r6, #2
 800e23a:	4293      	cmp	r3, r2
 800e23c:	d84e      	bhi.n	800e2dc <__ieee754_expf+0xf8>
 800e23e:	4b55      	ldr	r3, [pc, #340]	@ (800e394 <__ieee754_expf+0x1b0>)
 800e240:	1c20      	adds	r0, r4, #0
 800e242:	5959      	ldr	r1, [r3, r5]
 800e244:	f7f2 ff32 	bl	80010ac <__aeabi_fsub>
 800e248:	4b53      	ldr	r3, [pc, #332]	@ (800e398 <__ieee754_expf+0x1b4>)
 800e24a:	1c07      	adds	r7, r0, #0
 800e24c:	595b      	ldr	r3, [r3, r5]
 800e24e:	2501      	movs	r5, #1
 800e250:	1bad      	subs	r5, r5, r6
 800e252:	9300      	str	r3, [sp, #0]
 800e254:	1bad      	subs	r5, r5, r6
 800e256:	9900      	ldr	r1, [sp, #0]
 800e258:	1c38      	adds	r0, r7, #0
 800e25a:	f7f2 ff27 	bl	80010ac <__aeabi_fsub>
 800e25e:	1c04      	adds	r4, r0, #0
 800e260:	1c21      	adds	r1, r4, #0
 800e262:	1c20      	adds	r0, r4, #0
 800e264:	f7f2 fde4 	bl	8000e30 <__aeabi_fmul>
 800e268:	494c      	ldr	r1, [pc, #304]	@ (800e39c <__ieee754_expf+0x1b8>)
 800e26a:	1c06      	adds	r6, r0, #0
 800e26c:	f7f2 fde0 	bl	8000e30 <__aeabi_fmul>
 800e270:	494b      	ldr	r1, [pc, #300]	@ (800e3a0 <__ieee754_expf+0x1bc>)
 800e272:	f7f2 ff1b 	bl	80010ac <__aeabi_fsub>
 800e276:	1c31      	adds	r1, r6, #0
 800e278:	f7f2 fdda 	bl	8000e30 <__aeabi_fmul>
 800e27c:	4949      	ldr	r1, [pc, #292]	@ (800e3a4 <__ieee754_expf+0x1c0>)
 800e27e:	f7f2 fa67 	bl	8000750 <__aeabi_fadd>
 800e282:	1c31      	adds	r1, r6, #0
 800e284:	f7f2 fdd4 	bl	8000e30 <__aeabi_fmul>
 800e288:	4947      	ldr	r1, [pc, #284]	@ (800e3a8 <__ieee754_expf+0x1c4>)
 800e28a:	f7f2 ff0f 	bl	80010ac <__aeabi_fsub>
 800e28e:	1c31      	adds	r1, r6, #0
 800e290:	f7f2 fdce 	bl	8000e30 <__aeabi_fmul>
 800e294:	4945      	ldr	r1, [pc, #276]	@ (800e3ac <__ieee754_expf+0x1c8>)
 800e296:	f7f2 fa5b 	bl	8000750 <__aeabi_fadd>
 800e29a:	1c31      	adds	r1, r6, #0
 800e29c:	f7f2 fdc8 	bl	8000e30 <__aeabi_fmul>
 800e2a0:	1c01      	adds	r1, r0, #0
 800e2a2:	1c20      	adds	r0, r4, #0
 800e2a4:	f7f2 ff02 	bl	80010ac <__aeabi_fsub>
 800e2a8:	1c01      	adds	r1, r0, #0
 800e2aa:	1c06      	adds	r6, r0, #0
 800e2ac:	1c20      	adds	r0, r4, #0
 800e2ae:	f7f2 fdbf 	bl	8000e30 <__aeabi_fmul>
 800e2b2:	9001      	str	r0, [sp, #4]
 800e2b4:	2d00      	cmp	r5, #0
 800e2b6:	d140      	bne.n	800e33a <__ieee754_expf+0x156>
 800e2b8:	2180      	movs	r1, #128	@ 0x80
 800e2ba:	1c30      	adds	r0, r6, #0
 800e2bc:	05c9      	lsls	r1, r1, #23
 800e2be:	f7f2 fef5 	bl	80010ac <__aeabi_fsub>
 800e2c2:	1c01      	adds	r1, r0, #0
 800e2c4:	9801      	ldr	r0, [sp, #4]
 800e2c6:	f7f2 fbcd 	bl	8000a64 <__aeabi_fdiv>
 800e2ca:	1c21      	adds	r1, r4, #0
 800e2cc:	f7f2 feee 	bl	80010ac <__aeabi_fsub>
 800e2d0:	1c01      	adds	r1, r0, #0
 800e2d2:	20fe      	movs	r0, #254	@ 0xfe
 800e2d4:	0580      	lsls	r0, r0, #22
 800e2d6:	f7f2 fee9 	bl	80010ac <__aeabi_fsub>
 800e2da:	e79e      	b.n	800e21a <__ieee754_expf+0x36>
 800e2dc:	4934      	ldr	r1, [pc, #208]	@ (800e3b0 <__ieee754_expf+0x1cc>)
 800e2de:	1c20      	adds	r0, r4, #0
 800e2e0:	f7f2 fda6 	bl	8000e30 <__aeabi_fmul>
 800e2e4:	4b33      	ldr	r3, [pc, #204]	@ (800e3b4 <__ieee754_expf+0x1d0>)
 800e2e6:	5959      	ldr	r1, [r3, r5]
 800e2e8:	f7f2 fa32 	bl	8000750 <__aeabi_fadd>
 800e2ec:	f7f3 f898 	bl	8001420 <__aeabi_f2iz>
 800e2f0:	0005      	movs	r5, r0
 800e2f2:	f7f3 f8b5 	bl	8001460 <__aeabi_i2f>
 800e2f6:	4930      	ldr	r1, [pc, #192]	@ (800e3b8 <__ieee754_expf+0x1d4>)
 800e2f8:	1c06      	adds	r6, r0, #0
 800e2fa:	f7f2 fd99 	bl	8000e30 <__aeabi_fmul>
 800e2fe:	1c01      	adds	r1, r0, #0
 800e300:	1c20      	adds	r0, r4, #0
 800e302:	f7f2 fed3 	bl	80010ac <__aeabi_fsub>
 800e306:	492d      	ldr	r1, [pc, #180]	@ (800e3bc <__ieee754_expf+0x1d8>)
 800e308:	1c07      	adds	r7, r0, #0
 800e30a:	1c30      	adds	r0, r6, #0
 800e30c:	f7f2 fd90 	bl	8000e30 <__aeabi_fmul>
 800e310:	9000      	str	r0, [sp, #0]
 800e312:	e7a0      	b.n	800e256 <__ieee754_expf+0x72>
 800e314:	22d0      	movs	r2, #208	@ 0xd0
 800e316:	0592      	lsls	r2, r2, #22
 800e318:	4293      	cmp	r3, r2
 800e31a:	d20c      	bcs.n	800e336 <__ieee754_expf+0x152>
 800e31c:	4928      	ldr	r1, [pc, #160]	@ (800e3c0 <__ieee754_expf+0x1dc>)
 800e31e:	1c20      	adds	r0, r4, #0
 800e320:	f7f2 fa16 	bl	8000750 <__aeabi_fadd>
 800e324:	21fe      	movs	r1, #254	@ 0xfe
 800e326:	0589      	lsls	r1, r1, #22
 800e328:	f7f2 f8e4 	bl	80004f4 <__aeabi_fcmpgt>
 800e32c:	1e05      	subs	r5, r0, #0
 800e32e:	d097      	beq.n	800e260 <__ieee754_expf+0x7c>
 800e330:	21fe      	movs	r1, #254	@ 0xfe
 800e332:	0589      	lsls	r1, r1, #22
 800e334:	e75f      	b.n	800e1f6 <__ieee754_expf+0x12>
 800e336:	2500      	movs	r5, #0
 800e338:	e792      	b.n	800e260 <__ieee754_expf+0x7c>
 800e33a:	2080      	movs	r0, #128	@ 0x80
 800e33c:	1c31      	adds	r1, r6, #0
 800e33e:	05c0      	lsls	r0, r0, #23
 800e340:	f7f2 feb4 	bl	80010ac <__aeabi_fsub>
 800e344:	1c01      	adds	r1, r0, #0
 800e346:	9801      	ldr	r0, [sp, #4]
 800e348:	f7f2 fb8c 	bl	8000a64 <__aeabi_fdiv>
 800e34c:	1c01      	adds	r1, r0, #0
 800e34e:	9800      	ldr	r0, [sp, #0]
 800e350:	f7f2 feac 	bl	80010ac <__aeabi_fsub>
 800e354:	1c39      	adds	r1, r7, #0
 800e356:	f7f2 fea9 	bl	80010ac <__aeabi_fsub>
 800e35a:	1c01      	adds	r1, r0, #0
 800e35c:	20fe      	movs	r0, #254	@ 0xfe
 800e35e:	0580      	lsls	r0, r0, #22
 800e360:	f7f2 fea4 	bl	80010ac <__aeabi_fsub>
 800e364:	002b      	movs	r3, r5
 800e366:	337d      	adds	r3, #125	@ 0x7d
 800e368:	db02      	blt.n	800e370 <__ieee754_expf+0x18c>
 800e36a:	05ec      	lsls	r4, r5, #23
 800e36c:	1824      	adds	r4, r4, r0
 800e36e:	e74c      	b.n	800e20a <__ieee754_expf+0x26>
 800e370:	21d8      	movs	r1, #216	@ 0xd8
 800e372:	3564      	adds	r5, #100	@ 0x64
 800e374:	05ed      	lsls	r5, r5, #23
 800e376:	1828      	adds	r0, r5, r0
 800e378:	0509      	lsls	r1, r1, #20
 800e37a:	f7f2 fd59 	bl	8000e30 <__aeabi_fmul>
 800e37e:	e74c      	b.n	800e21a <__ieee754_expf+0x36>
 800e380:	2400      	movs	r4, #0
 800e382:	e742      	b.n	800e20a <__ieee754_expf+0x26>
 800e384:	42b17217 	.word	0x42b17217
 800e388:	42cff1b5 	.word	0x42cff1b5
 800e38c:	3eb17218 	.word	0x3eb17218
 800e390:	3f851591 	.word	0x3f851591
 800e394:	0800eda0 	.word	0x0800eda0
 800e398:	0800ed98 	.word	0x0800ed98
 800e39c:	3331bb4c 	.word	0x3331bb4c
 800e3a0:	35ddea0e 	.word	0x35ddea0e
 800e3a4:	388ab355 	.word	0x388ab355
 800e3a8:	3b360b61 	.word	0x3b360b61
 800e3ac:	3e2aaaab 	.word	0x3e2aaaab
 800e3b0:	3fb8aa3b 	.word	0x3fb8aa3b
 800e3b4:	0800eda8 	.word	0x0800eda8
 800e3b8:	3f317180 	.word	0x3f317180
 800e3bc:	3717f7d1 	.word	0x3717f7d1
 800e3c0:	7149f2ca 	.word	0x7149f2ca

0800e3c4 <with_errnof>:
 800e3c4:	b570      	push	{r4, r5, r6, lr}
 800e3c6:	000d      	movs	r5, r1
 800e3c8:	1c04      	adds	r4, r0, #0
 800e3ca:	f7fd fd2b 	bl	800be24 <__errno>
 800e3ce:	6005      	str	r5, [r0, #0]
 800e3d0:	1c20      	adds	r0, r4, #0
 800e3d2:	bd70      	pop	{r4, r5, r6, pc}

0800e3d4 <xflowf>:
 800e3d4:	b510      	push	{r4, lr}
 800e3d6:	1c0b      	adds	r3, r1, #0
 800e3d8:	2800      	cmp	r0, #0
 800e3da:	d002      	beq.n	800e3e2 <xflowf+0xe>
 800e3dc:	2380      	movs	r3, #128	@ 0x80
 800e3de:	061b      	lsls	r3, r3, #24
 800e3e0:	18cb      	adds	r3, r1, r3
 800e3e2:	1c18      	adds	r0, r3, #0
 800e3e4:	f7f2 fd24 	bl	8000e30 <__aeabi_fmul>
 800e3e8:	2122      	movs	r1, #34	@ 0x22
 800e3ea:	f7ff ffeb 	bl	800e3c4 <with_errnof>
 800e3ee:	bd10      	pop	{r4, pc}

0800e3f0 <__math_uflowf>:
 800e3f0:	2180      	movs	r1, #128	@ 0x80
 800e3f2:	b510      	push	{r4, lr}
 800e3f4:	0549      	lsls	r1, r1, #21
 800e3f6:	f7ff ffed 	bl	800e3d4 <xflowf>
 800e3fa:	bd10      	pop	{r4, pc}

0800e3fc <__math_oflowf>:
 800e3fc:	21e0      	movs	r1, #224	@ 0xe0
 800e3fe:	b510      	push	{r4, lr}
 800e400:	05c9      	lsls	r1, r1, #23
 800e402:	f7ff ffe7 	bl	800e3d4 <xflowf>
 800e406:	bd10      	pop	{r4, pc}

0800e408 <_init>:
 800e408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e40a:	46c0      	nop			@ (mov r8, r8)
 800e40c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e40e:	bc08      	pop	{r3}
 800e410:	469e      	mov	lr, r3
 800e412:	4770      	bx	lr

0800e414 <_fini>:
 800e414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e416:	46c0      	nop			@ (mov r8, r8)
 800e418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e41a:	bc08      	pop	{r3}
 800e41c:	469e      	mov	lr, r3
 800e41e:	4770      	bx	lr
