
MJSGadget.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
<<<<<<< HEAD
  1 .text         0000fd14  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b98  0800fdd8  0800fdd8  00010dd8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010970  08010970  00012218  2**0
                  CONTENTS
  4 .ARM          00000008  08010970  08010970  00011970  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010978  08010978  00012218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010978  08010978  00011978  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801097c  0801097c  0001197c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000218  20000000  08010980  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000016a0  20000218  08010b98  00012218  2**2
                  ALLOC
 10 ._user_heap_stack 00000500  200018b8  08010b98  000128b8  2**0
=======
  1 .text         0000ffac  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a58  08010070  08010070  00011070  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010ac8  08010ac8  00012224  2**0
                  CONTENTS
  4 .ARM          00000008  08010ac8  08010ac8  00011ac8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010ad0  08010ad0  00012224  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010ad0  08010ad0  00011ad0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08010ad4  08010ad4  00011ad4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000224  20000000  08010ad8  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000019f4  20000224  08010cfc  00012224  2**2
                  ALLOC
 10 ._user_heap_stack 00000500  20001c18  08010cfc  00012c18  2**0
>>>>>>> main
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00012224  2**0
                  CONTENTS, READONLY
<<<<<<< HEAD
 12 .debug_info   0001dc62  00000000  00000000  00012240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005074  00000000  00000000  0002fea2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001890  00000000  00000000  00034f18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000012c0  00000000  00000000  000367a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001adf1  00000000  00000000  00037a68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000259aa  00000000  00000000  00052859  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ea46  00000000  00000000  00078203  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00106c49  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006ab8  00000000  00000000  00106c8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  0010d744  2**0
=======
 12 .debug_info   0001d1ee  00000000  00000000  0001224c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000506f  00000000  00000000  0002f43a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001888  00000000  00000000  000344b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000012b9  00000000  00000000  00035d38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ae30  00000000  00000000  00036ff1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000259b2  00000000  00000000  00051e21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ea39  00000000  00000000  000777d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010620c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006b20  00000000  00000000  00106250  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  0010cd70  2**0
>>>>>>> main
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000224 	.word	0x20000224
 80000e0:	00000000 	.word	0x00000000
<<<<<<< HEAD
 80000e4:	0800fdbc 	.word	0x0800fdbc
=======
 80000e4:	08010054 	.word	0x08010054
>>>>>>> main

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
<<<<<<< HEAD
 8000100:	2000021c 	.word	0x2000021c
 8000104:	0800fdbc 	.word	0x0800fdbc
=======
 8000100:	20000228 	.word	0x20000228
 8000104:	08010054 	.word	0x08010054
>>>>>>> main

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			@ (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	@ 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			@ (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	@ 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	@ 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			@ (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			@ (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f002 f809 	bl	8002454 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 ff49 	bl	80022e4 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fffb 	bl	8002454 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fff1 	bl	8002454 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 ff73 	bl	800236c <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			@ (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 ff69 	bl	800236c <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			@ (mov r8, r8)

080004a8 <__aeabi_cfrcmple>:
 80004a8:	4684      	mov	ip, r0
 80004aa:	0008      	movs	r0, r1
 80004ac:	4661      	mov	r1, ip
 80004ae:	e7ff      	b.n	80004b0 <__aeabi_cfcmpeq>

080004b0 <__aeabi_cfcmpeq>:
 80004b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004b2:	f000 fca5 	bl	8000e00 <__lesf2>
 80004b6:	2800      	cmp	r0, #0
 80004b8:	d401      	bmi.n	80004be <__aeabi_cfcmpeq+0xe>
 80004ba:	2100      	movs	r1, #0
 80004bc:	42c8      	cmn	r0, r1
 80004be:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004c0 <__aeabi_fcmpeq>:
 80004c0:	b510      	push	{r4, lr}
 80004c2:	f000 fc25 	bl	8000d10 <__eqsf2>
 80004c6:	4240      	negs	r0, r0
 80004c8:	3001      	adds	r0, #1
 80004ca:	bd10      	pop	{r4, pc}

080004cc <__aeabi_fcmplt>:
 80004cc:	b510      	push	{r4, lr}
 80004ce:	f000 fc97 	bl	8000e00 <__lesf2>
 80004d2:	2800      	cmp	r0, #0
 80004d4:	db01      	blt.n	80004da <__aeabi_fcmplt+0xe>
 80004d6:	2000      	movs	r0, #0
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	2001      	movs	r0, #1
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	46c0      	nop			@ (mov r8, r8)

080004e0 <__aeabi_fcmple>:
 80004e0:	b510      	push	{r4, lr}
 80004e2:	f000 fc8d 	bl	8000e00 <__lesf2>
 80004e6:	2800      	cmp	r0, #0
 80004e8:	dd01      	ble.n	80004ee <__aeabi_fcmple+0xe>
 80004ea:	2000      	movs	r0, #0
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	2001      	movs	r0, #1
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	46c0      	nop			@ (mov r8, r8)

080004f4 <__aeabi_fcmpgt>:
 80004f4:	b510      	push	{r4, lr}
 80004f6:	f000 fc33 	bl	8000d60 <__gesf2>
 80004fa:	2800      	cmp	r0, #0
 80004fc:	dc01      	bgt.n	8000502 <__aeabi_fcmpgt+0xe>
 80004fe:	2000      	movs	r0, #0
 8000500:	bd10      	pop	{r4, pc}
 8000502:	2001      	movs	r0, #1
 8000504:	bd10      	pop	{r4, pc}
 8000506:	46c0      	nop			@ (mov r8, r8)

08000508 <__aeabi_fcmpge>:
 8000508:	b510      	push	{r4, lr}
 800050a:	f000 fc29 	bl	8000d60 <__gesf2>
 800050e:	2800      	cmp	r0, #0
 8000510:	da01      	bge.n	8000516 <__aeabi_fcmpge+0xe>
 8000512:	2000      	movs	r0, #0
 8000514:	bd10      	pop	{r4, pc}
 8000516:	2001      	movs	r0, #1
 8000518:	bd10      	pop	{r4, pc}
 800051a:	46c0      	nop			@ (mov r8, r8)

0800051c <__aeabi_uldivmod>:
 800051c:	2b00      	cmp	r3, #0
 800051e:	d111      	bne.n	8000544 <__aeabi_uldivmod+0x28>
 8000520:	2a00      	cmp	r2, #0
 8000522:	d10f      	bne.n	8000544 <__aeabi_uldivmod+0x28>
 8000524:	2900      	cmp	r1, #0
 8000526:	d100      	bne.n	800052a <__aeabi_uldivmod+0xe>
 8000528:	2800      	cmp	r0, #0
 800052a:	d002      	beq.n	8000532 <__aeabi_uldivmod+0x16>
 800052c:	2100      	movs	r1, #0
 800052e:	43c9      	mvns	r1, r1
 8000530:	0008      	movs	r0, r1
 8000532:	b407      	push	{r0, r1, r2}
 8000534:	4802      	ldr	r0, [pc, #8]	@ (8000540 <__aeabi_uldivmod+0x24>)
 8000536:	a102      	add	r1, pc, #8	@ (adr r1, 8000540 <__aeabi_uldivmod+0x24>)
 8000538:	1840      	adds	r0, r0, r1
 800053a:	9002      	str	r0, [sp, #8]
 800053c:	bd03      	pop	{r0, r1, pc}
 800053e:	46c0      	nop			@ (mov r8, r8)
 8000540:	fffffee9 	.word	0xfffffee9
 8000544:	b403      	push	{r0, r1}
 8000546:	4668      	mov	r0, sp
 8000548:	b501      	push	{r0, lr}
 800054a:	9802      	ldr	r0, [sp, #8]
 800054c:	f000 f86a 	bl	8000624 <__udivmoddi4>
 8000550:	9b01      	ldr	r3, [sp, #4]
 8000552:	469e      	mov	lr, r3
 8000554:	b002      	add	sp, #8
 8000556:	bc0c      	pop	{r2, r3}
 8000558:	4770      	bx	lr
 800055a:	46c0      	nop			@ (mov r8, r8)

0800055c <__aeabi_lmul>:
 800055c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800055e:	46ce      	mov	lr, r9
 8000560:	4699      	mov	r9, r3
 8000562:	0c03      	lsrs	r3, r0, #16
 8000564:	469c      	mov	ip, r3
 8000566:	0413      	lsls	r3, r2, #16
 8000568:	4647      	mov	r7, r8
 800056a:	0c1b      	lsrs	r3, r3, #16
 800056c:	001d      	movs	r5, r3
 800056e:	000e      	movs	r6, r1
 8000570:	4661      	mov	r1, ip
 8000572:	0404      	lsls	r4, r0, #16
 8000574:	0c24      	lsrs	r4, r4, #16
 8000576:	b580      	push	{r7, lr}
 8000578:	0007      	movs	r7, r0
 800057a:	0c10      	lsrs	r0, r2, #16
 800057c:	434b      	muls	r3, r1
 800057e:	4365      	muls	r5, r4
 8000580:	4341      	muls	r1, r0
 8000582:	4360      	muls	r0, r4
 8000584:	0c2c      	lsrs	r4, r5, #16
 8000586:	18c0      	adds	r0, r0, r3
 8000588:	1824      	adds	r4, r4, r0
 800058a:	468c      	mov	ip, r1
 800058c:	42a3      	cmp	r3, r4
 800058e:	d903      	bls.n	8000598 <__aeabi_lmul+0x3c>
 8000590:	2380      	movs	r3, #128	@ 0x80
 8000592:	025b      	lsls	r3, r3, #9
 8000594:	4698      	mov	r8, r3
 8000596:	44c4      	add	ip, r8
 8000598:	4649      	mov	r1, r9
 800059a:	4379      	muls	r1, r7
 800059c:	4356      	muls	r6, r2
 800059e:	0c23      	lsrs	r3, r4, #16
 80005a0:	042d      	lsls	r5, r5, #16
 80005a2:	0c2d      	lsrs	r5, r5, #16
 80005a4:	1989      	adds	r1, r1, r6
 80005a6:	4463      	add	r3, ip
 80005a8:	0424      	lsls	r4, r4, #16
 80005aa:	1960      	adds	r0, r4, r5
 80005ac:	18c9      	adds	r1, r1, r3
 80005ae:	bcc0      	pop	{r6, r7}
 80005b0:	46b9      	mov	r9, r7
 80005b2:	46b0      	mov	r8, r6
 80005b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005b6:	46c0      	nop			@ (mov r8, r8)

<<<<<<< HEAD
080005b8 <__udivmoddi4>:
 80005b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005ba:	4657      	mov	r7, sl
 80005bc:	464e      	mov	r6, r9
 80005be:	4645      	mov	r5, r8
 80005c0:	46de      	mov	lr, fp
 80005c2:	b5e0      	push	{r5, r6, r7, lr}
 80005c4:	0004      	movs	r4, r0
 80005c6:	000d      	movs	r5, r1
 80005c8:	4692      	mov	sl, r2
 80005ca:	4699      	mov	r9, r3
 80005cc:	b083      	sub	sp, #12
 80005ce:	428b      	cmp	r3, r1
 80005d0:	d830      	bhi.n	8000634 <__udivmoddi4+0x7c>
 80005d2:	d02d      	beq.n	8000630 <__udivmoddi4+0x78>
 80005d4:	4649      	mov	r1, r9
 80005d6:	4650      	mov	r0, sl
 80005d8:	f002 ff2e 	bl	8003438 <__clzdi2>
 80005dc:	0029      	movs	r1, r5
 80005de:	0006      	movs	r6, r0
 80005e0:	0020      	movs	r0, r4
 80005e2:	f002 ff29 	bl	8003438 <__clzdi2>
 80005e6:	1a33      	subs	r3, r6, r0
 80005e8:	4698      	mov	r8, r3
 80005ea:	3b20      	subs	r3, #32
 80005ec:	d434      	bmi.n	8000658 <__udivmoddi4+0xa0>
 80005ee:	469b      	mov	fp, r3
 80005f0:	4653      	mov	r3, sl
 80005f2:	465a      	mov	r2, fp
 80005f4:	4093      	lsls	r3, r2
 80005f6:	4642      	mov	r2, r8
 80005f8:	001f      	movs	r7, r3
 80005fa:	4653      	mov	r3, sl
 80005fc:	4093      	lsls	r3, r2
 80005fe:	001e      	movs	r6, r3
 8000600:	42af      	cmp	r7, r5
 8000602:	d83b      	bhi.n	800067c <__udivmoddi4+0xc4>
 8000604:	42af      	cmp	r7, r5
 8000606:	d100      	bne.n	800060a <__udivmoddi4+0x52>
 8000608:	e079      	b.n	80006fe <__udivmoddi4+0x146>
 800060a:	465b      	mov	r3, fp
 800060c:	1ba4      	subs	r4, r4, r6
 800060e:	41bd      	sbcs	r5, r7
 8000610:	2b00      	cmp	r3, #0
 8000612:	da00      	bge.n	8000616 <__udivmoddi4+0x5e>
 8000614:	e076      	b.n	8000704 <__udivmoddi4+0x14c>
 8000616:	2200      	movs	r2, #0
 8000618:	2300      	movs	r3, #0
 800061a:	9200      	str	r2, [sp, #0]
 800061c:	9301      	str	r3, [sp, #4]
 800061e:	2301      	movs	r3, #1
 8000620:	465a      	mov	r2, fp
 8000622:	4093      	lsls	r3, r2
 8000624:	9301      	str	r3, [sp, #4]
 8000626:	2301      	movs	r3, #1
 8000628:	4642      	mov	r2, r8
 800062a:	4093      	lsls	r3, r2
 800062c:	9300      	str	r3, [sp, #0]
 800062e:	e029      	b.n	8000684 <__udivmoddi4+0xcc>
 8000630:	4282      	cmp	r2, r0
 8000632:	d9cf      	bls.n	80005d4 <__udivmoddi4+0x1c>
 8000634:	2200      	movs	r2, #0
 8000636:	2300      	movs	r3, #0
 8000638:	9200      	str	r2, [sp, #0]
 800063a:	9301      	str	r3, [sp, #4]
 800063c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <__udivmoddi4+0x8e>
 8000642:	601c      	str	r4, [r3, #0]
 8000644:	605d      	str	r5, [r3, #4]
 8000646:	9800      	ldr	r0, [sp, #0]
 8000648:	9901      	ldr	r1, [sp, #4]
 800064a:	b003      	add	sp, #12
 800064c:	bcf0      	pop	{r4, r5, r6, r7}
 800064e:	46bb      	mov	fp, r7
 8000650:	46b2      	mov	sl, r6
 8000652:	46a9      	mov	r9, r5
 8000654:	46a0      	mov	r8, r4
 8000656:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000658:	4642      	mov	r2, r8
=======
080005b8 <__aeabi_f2uiz>:
 80005b8:	219e      	movs	r1, #158	@ 0x9e
 80005ba:	b510      	push	{r4, lr}
 80005bc:	05c9      	lsls	r1, r1, #23
 80005be:	1c04      	adds	r4, r0, #0
 80005c0:	f7ff ffa2 	bl	8000508 <__aeabi_fcmpge>
 80005c4:	2800      	cmp	r0, #0
 80005c6:	d103      	bne.n	80005d0 <__aeabi_f2uiz+0x18>
 80005c8:	1c20      	adds	r0, r4, #0
 80005ca:	f000 ff5f 	bl	800148c <__aeabi_f2iz>
 80005ce:	bd10      	pop	{r4, pc}
 80005d0:	219e      	movs	r1, #158	@ 0x9e
 80005d2:	1c20      	adds	r0, r4, #0
 80005d4:	05c9      	lsls	r1, r1, #23
 80005d6:	f000 fd9f 	bl	8001118 <__aeabi_fsub>
 80005da:	f000 ff57 	bl	800148c <__aeabi_f2iz>
 80005de:	2380      	movs	r3, #128	@ 0x80
 80005e0:	061b      	lsls	r3, r3, #24
 80005e2:	469c      	mov	ip, r3
 80005e4:	4460      	add	r0, ip
 80005e6:	e7f2      	b.n	80005ce <__aeabi_f2uiz+0x16>

080005e8 <__aeabi_d2uiz>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	2200      	movs	r2, #0
 80005ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000620 <__aeabi_d2uiz+0x38>)
 80005ee:	0004      	movs	r4, r0
 80005f0:	000d      	movs	r5, r1
 80005f2:	f7ff ff4f 	bl	8000494 <__aeabi_dcmpge>
 80005f6:	2800      	cmp	r0, #0
 80005f8:	d104      	bne.n	8000604 <__aeabi_d2uiz+0x1c>
 80005fa:	0020      	movs	r0, r4
 80005fc:	0029      	movs	r1, r5
 80005fe:	f002 fe21 	bl	8003244 <__aeabi_d2iz>
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	4b06      	ldr	r3, [pc, #24]	@ (8000620 <__aeabi_d2uiz+0x38>)
 8000606:	2200      	movs	r2, #0
 8000608:	0020      	movs	r0, r4
 800060a:	0029      	movs	r1, r5
 800060c:	f002 fa5c 	bl	8002ac8 <__aeabi_dsub>
 8000610:	f002 fe18 	bl	8003244 <__aeabi_d2iz>
 8000614:	2380      	movs	r3, #128	@ 0x80
 8000616:	061b      	lsls	r3, r3, #24
 8000618:	469c      	mov	ip, r3
 800061a:	4460      	add	r0, ip
 800061c:	e7f1      	b.n	8000602 <__aeabi_d2uiz+0x1a>
 800061e:	46c0      	nop			@ (mov r8, r8)
 8000620:	41e00000 	.word	0x41e00000

08000624 <__udivmoddi4>:
 8000624:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000626:	4657      	mov	r7, sl
 8000628:	464e      	mov	r6, r9
 800062a:	4645      	mov	r5, r8
 800062c:	46de      	mov	lr, fp
 800062e:	b5e0      	push	{r5, r6, r7, lr}
 8000630:	0004      	movs	r4, r0
 8000632:	000d      	movs	r5, r1
 8000634:	4692      	mov	sl, r2
 8000636:	4699      	mov	r9, r3
 8000638:	b083      	sub	sp, #12
 800063a:	428b      	cmp	r3, r1
 800063c:	d830      	bhi.n	80006a0 <__udivmoddi4+0x7c>
 800063e:	d02d      	beq.n	800069c <__udivmoddi4+0x78>
 8000640:	4649      	mov	r1, r9
 8000642:	4650      	mov	r0, sl
 8000644:	f002 ff76 	bl	8003534 <__clzdi2>
 8000648:	0029      	movs	r1, r5
 800064a:	0006      	movs	r6, r0
 800064c:	0020      	movs	r0, r4
 800064e:	f002 ff71 	bl	8003534 <__clzdi2>
 8000652:	1a33      	subs	r3, r6, r0
 8000654:	4698      	mov	r8, r3
 8000656:	3b20      	subs	r3, #32
 8000658:	d434      	bmi.n	80006c4 <__udivmoddi4+0xa0>
>>>>>>> main
 800065a:	469b      	mov	fp, r3
 800065c:	4653      	mov	r3, sl
 800065e:	465a      	mov	r2, fp
 8000660:	4093      	lsls	r3, r2
 8000662:	4642      	mov	r2, r8
 8000664:	001f      	movs	r7, r3
 8000666:	4653      	mov	r3, sl
 8000668:	4093      	lsls	r3, r2
 800066a:	001e      	movs	r6, r3
 800066c:	42af      	cmp	r7, r5
 800066e:	d83b      	bhi.n	80006e8 <__udivmoddi4+0xc4>
 8000670:	42af      	cmp	r7, r5
 8000672:	d100      	bne.n	8000676 <__udivmoddi4+0x52>
 8000674:	e079      	b.n	800076a <__udivmoddi4+0x146>
 8000676:	465b      	mov	r3, fp
 8000678:	1ba4      	subs	r4, r4, r6
 800067a:	41bd      	sbcs	r5, r7
 800067c:	2b00      	cmp	r3, #0
 800067e:	da00      	bge.n	8000682 <__udivmoddi4+0x5e>
 8000680:	e076      	b.n	8000770 <__udivmoddi4+0x14c>
 8000682:	2200      	movs	r2, #0
 8000684:	2300      	movs	r3, #0
 8000686:	9200      	str	r2, [sp, #0]
 8000688:	9301      	str	r3, [sp, #4]
 800068a:	2301      	movs	r3, #1
 800068c:	465a      	mov	r2, fp
 800068e:	4093      	lsls	r3, r2
 8000690:	9301      	str	r3, [sp, #4]
 8000692:	2301      	movs	r3, #1
 8000694:	4642      	mov	r2, r8
 8000696:	4093      	lsls	r3, r2
 8000698:	9300      	str	r3, [sp, #0]
 800069a:	e029      	b.n	80006f0 <__udivmoddi4+0xcc>
 800069c:	4282      	cmp	r2, r0
 800069e:	d9cf      	bls.n	8000640 <__udivmoddi4+0x1c>
 80006a0:	2200      	movs	r2, #0
 80006a2:	2300      	movs	r3, #0
 80006a4:	9200      	str	r2, [sp, #0]
 80006a6:	9301      	str	r3, [sp, #4]
 80006a8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <__udivmoddi4+0x8e>
 80006ae:	601c      	str	r4, [r3, #0]
 80006b0:	605d      	str	r5, [r3, #4]
 80006b2:	9800      	ldr	r0, [sp, #0]
 80006b4:	9901      	ldr	r1, [sp, #4]
 80006b6:	b003      	add	sp, #12
 80006b8:	bcf0      	pop	{r4, r5, r6, r7}
 80006ba:	46bb      	mov	fp, r7
 80006bc:	46b2      	mov	sl, r6
 80006be:	46a9      	mov	r9, r5
 80006c0:	46a0      	mov	r8, r4
 80006c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006c4:	4642      	mov	r2, r8
 80006c6:	469b      	mov	fp, r3
 80006c8:	2320      	movs	r3, #32
 80006ca:	1a9b      	subs	r3, r3, r2
 80006cc:	4652      	mov	r2, sl
 80006ce:	40da      	lsrs	r2, r3
 80006d0:	4641      	mov	r1, r8
 80006d2:	0013      	movs	r3, r2
 80006d4:	464a      	mov	r2, r9
 80006d6:	408a      	lsls	r2, r1
 80006d8:	0017      	movs	r7, r2
 80006da:	4642      	mov	r2, r8
 80006dc:	431f      	orrs	r7, r3
 80006de:	4653      	mov	r3, sl
 80006e0:	4093      	lsls	r3, r2
 80006e2:	001e      	movs	r6, r3
 80006e4:	42af      	cmp	r7, r5
 80006e6:	d9c3      	bls.n	8000670 <__udivmoddi4+0x4c>
 80006e8:	2200      	movs	r2, #0
 80006ea:	2300      	movs	r3, #0
 80006ec:	9200      	str	r2, [sp, #0]
 80006ee:	9301      	str	r3, [sp, #4]
 80006f0:	4643      	mov	r3, r8
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d0d8      	beq.n	80006a8 <__udivmoddi4+0x84>
 80006f6:	07fb      	lsls	r3, r7, #31
 80006f8:	0872      	lsrs	r2, r6, #1
 80006fa:	431a      	orrs	r2, r3
 80006fc:	4646      	mov	r6, r8
 80006fe:	087b      	lsrs	r3, r7, #1
 8000700:	e00e      	b.n	8000720 <__udivmoddi4+0xfc>
 8000702:	42ab      	cmp	r3, r5
 8000704:	d101      	bne.n	800070a <__udivmoddi4+0xe6>
 8000706:	42a2      	cmp	r2, r4
 8000708:	d80c      	bhi.n	8000724 <__udivmoddi4+0x100>
 800070a:	1aa4      	subs	r4, r4, r2
 800070c:	419d      	sbcs	r5, r3
 800070e:	2001      	movs	r0, #1
 8000710:	1924      	adds	r4, r4, r4
 8000712:	416d      	adcs	r5, r5
 8000714:	2100      	movs	r1, #0
 8000716:	3e01      	subs	r6, #1
 8000718:	1824      	adds	r4, r4, r0
 800071a:	414d      	adcs	r5, r1
 800071c:	2e00      	cmp	r6, #0
 800071e:	d006      	beq.n	800072e <__udivmoddi4+0x10a>
 8000720:	42ab      	cmp	r3, r5
 8000722:	d9ee      	bls.n	8000702 <__udivmoddi4+0xde>
 8000724:	3e01      	subs	r6, #1
 8000726:	1924      	adds	r4, r4, r4
 8000728:	416d      	adcs	r5, r5
 800072a:	2e00      	cmp	r6, #0
 800072c:	d1f8      	bne.n	8000720 <__udivmoddi4+0xfc>
 800072e:	9800      	ldr	r0, [sp, #0]
 8000730:	9901      	ldr	r1, [sp, #4]
 8000732:	465b      	mov	r3, fp
 8000734:	1900      	adds	r0, r0, r4
 8000736:	4169      	adcs	r1, r5
 8000738:	2b00      	cmp	r3, #0
 800073a:	db24      	blt.n	8000786 <__udivmoddi4+0x162>
 800073c:	002b      	movs	r3, r5
 800073e:	465a      	mov	r2, fp
 8000740:	4644      	mov	r4, r8
 8000742:	40d3      	lsrs	r3, r2
 8000744:	002a      	movs	r2, r5
 8000746:	40e2      	lsrs	r2, r4
 8000748:	001c      	movs	r4, r3
 800074a:	465b      	mov	r3, fp
 800074c:	0015      	movs	r5, r2
 800074e:	2b00      	cmp	r3, #0
 8000750:	db2a      	blt.n	80007a8 <__udivmoddi4+0x184>
 8000752:	0026      	movs	r6, r4
 8000754:	409e      	lsls	r6, r3
 8000756:	0033      	movs	r3, r6
 8000758:	0026      	movs	r6, r4
 800075a:	4647      	mov	r7, r8
 800075c:	40be      	lsls	r6, r7
 800075e:	0032      	movs	r2, r6
 8000760:	1a80      	subs	r0, r0, r2
 8000762:	4199      	sbcs	r1, r3
 8000764:	9000      	str	r0, [sp, #0]
 8000766:	9101      	str	r1, [sp, #4]
 8000768:	e79e      	b.n	80006a8 <__udivmoddi4+0x84>
 800076a:	42a3      	cmp	r3, r4
 800076c:	d8bc      	bhi.n	80006e8 <__udivmoddi4+0xc4>
 800076e:	e782      	b.n	8000676 <__udivmoddi4+0x52>
 8000770:	4642      	mov	r2, r8
 8000772:	2320      	movs	r3, #32
 8000774:	2100      	movs	r1, #0
 8000776:	1a9b      	subs	r3, r3, r2
 8000778:	2200      	movs	r2, #0
 800077a:	9100      	str	r1, [sp, #0]
 800077c:	9201      	str	r2, [sp, #4]
 800077e:	2201      	movs	r2, #1
 8000780:	40da      	lsrs	r2, r3
 8000782:	9201      	str	r2, [sp, #4]
 8000784:	e785      	b.n	8000692 <__udivmoddi4+0x6e>
 8000786:	4642      	mov	r2, r8
 8000788:	2320      	movs	r3, #32
 800078a:	1a9b      	subs	r3, r3, r2
 800078c:	002a      	movs	r2, r5
 800078e:	4646      	mov	r6, r8
 8000790:	409a      	lsls	r2, r3
 8000792:	0023      	movs	r3, r4
 8000794:	40f3      	lsrs	r3, r6
 8000796:	4644      	mov	r4, r8
 8000798:	4313      	orrs	r3, r2
 800079a:	002a      	movs	r2, r5
 800079c:	40e2      	lsrs	r2, r4
 800079e:	001c      	movs	r4, r3
 80007a0:	465b      	mov	r3, fp
 80007a2:	0015      	movs	r5, r2
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	dad4      	bge.n	8000752 <__udivmoddi4+0x12e>
 80007a8:	4642      	mov	r2, r8
 80007aa:	002f      	movs	r7, r5
 80007ac:	2320      	movs	r3, #32
 80007ae:	0026      	movs	r6, r4
 80007b0:	4097      	lsls	r7, r2
 80007b2:	1a9b      	subs	r3, r3, r2
 80007b4:	40de      	lsrs	r6, r3
 80007b6:	003b      	movs	r3, r7
 80007b8:	4333      	orrs	r3, r6
 80007ba:	e7cd      	b.n	8000758 <__udivmoddi4+0x134>

<<<<<<< HEAD
08000750 <__aeabi_fadd>:
 8000750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000752:	46ce      	mov	lr, r9
 8000754:	4647      	mov	r7, r8
 8000756:	0243      	lsls	r3, r0, #9
 8000758:	0a5a      	lsrs	r2, r3, #9
 800075a:	024e      	lsls	r6, r1, #9
 800075c:	0045      	lsls	r5, r0, #1
 800075e:	0fc4      	lsrs	r4, r0, #31
 8000760:	0048      	lsls	r0, r1, #1
 8000762:	4691      	mov	r9, r2
 8000764:	0e2d      	lsrs	r5, r5, #24
 8000766:	0a72      	lsrs	r2, r6, #9
 8000768:	0e00      	lsrs	r0, r0, #24
 800076a:	4694      	mov	ip, r2
 800076c:	b580      	push	{r7, lr}
 800076e:	099b      	lsrs	r3, r3, #6
 8000770:	0fc9      	lsrs	r1, r1, #31
 8000772:	09b6      	lsrs	r6, r6, #6
 8000774:	1a2a      	subs	r2, r5, r0
 8000776:	428c      	cmp	r4, r1
 8000778:	d021      	beq.n	80007be <__aeabi_fadd+0x6e>
 800077a:	2a00      	cmp	r2, #0
 800077c:	dd0d      	ble.n	800079a <__aeabi_fadd+0x4a>
 800077e:	2800      	cmp	r0, #0
 8000780:	d12d      	bne.n	80007de <__aeabi_fadd+0x8e>
 8000782:	2e00      	cmp	r6, #0
 8000784:	d100      	bne.n	8000788 <__aeabi_fadd+0x38>
 8000786:	e08d      	b.n	80008a4 <__aeabi_fadd+0x154>
 8000788:	1e51      	subs	r1, r2, #1
 800078a:	2a01      	cmp	r2, #1
 800078c:	d100      	bne.n	8000790 <__aeabi_fadd+0x40>
 800078e:	e11d      	b.n	80009cc <__aeabi_fadd+0x27c>
 8000790:	2aff      	cmp	r2, #255	@ 0xff
 8000792:	d100      	bne.n	8000796 <__aeabi_fadd+0x46>
 8000794:	e0ab      	b.n	80008ee <__aeabi_fadd+0x19e>
 8000796:	000a      	movs	r2, r1
 8000798:	e027      	b.n	80007ea <__aeabi_fadd+0x9a>
 800079a:	2a00      	cmp	r2, #0
 800079c:	d04d      	beq.n	800083a <__aeabi_fadd+0xea>
 800079e:	1b42      	subs	r2, r0, r5
 80007a0:	2d00      	cmp	r5, #0
 80007a2:	d000      	beq.n	80007a6 <__aeabi_fadd+0x56>
 80007a4:	e0cc      	b.n	8000940 <__aeabi_fadd+0x1f0>
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d100      	bne.n	80007ac <__aeabi_fadd+0x5c>
 80007aa:	e079      	b.n	80008a0 <__aeabi_fadd+0x150>
 80007ac:	1e54      	subs	r4, r2, #1
 80007ae:	2a01      	cmp	r2, #1
 80007b0:	d100      	bne.n	80007b4 <__aeabi_fadd+0x64>
 80007b2:	e128      	b.n	8000a06 <__aeabi_fadd+0x2b6>
 80007b4:	2aff      	cmp	r2, #255	@ 0xff
 80007b6:	d100      	bne.n	80007ba <__aeabi_fadd+0x6a>
 80007b8:	e097      	b.n	80008ea <__aeabi_fadd+0x19a>
 80007ba:	0022      	movs	r2, r4
 80007bc:	e0c5      	b.n	800094a <__aeabi_fadd+0x1fa>
 80007be:	2a00      	cmp	r2, #0
 80007c0:	dc00      	bgt.n	80007c4 <__aeabi_fadd+0x74>
 80007c2:	e096      	b.n	80008f2 <__aeabi_fadd+0x1a2>
 80007c4:	2800      	cmp	r0, #0
 80007c6:	d04f      	beq.n	8000868 <__aeabi_fadd+0x118>
 80007c8:	2dff      	cmp	r5, #255	@ 0xff
 80007ca:	d100      	bne.n	80007ce <__aeabi_fadd+0x7e>
 80007cc:	e08f      	b.n	80008ee <__aeabi_fadd+0x19e>
 80007ce:	2180      	movs	r1, #128	@ 0x80
 80007d0:	04c9      	lsls	r1, r1, #19
 80007d2:	430e      	orrs	r6, r1
 80007d4:	2a1b      	cmp	r2, #27
 80007d6:	dd51      	ble.n	800087c <__aeabi_fadd+0x12c>
 80007d8:	002a      	movs	r2, r5
 80007da:	3301      	adds	r3, #1
 80007dc:	e018      	b.n	8000810 <__aeabi_fadd+0xc0>
 80007de:	2dff      	cmp	r5, #255	@ 0xff
 80007e0:	d100      	bne.n	80007e4 <__aeabi_fadd+0x94>
 80007e2:	e084      	b.n	80008ee <__aeabi_fadd+0x19e>
 80007e4:	2180      	movs	r1, #128	@ 0x80
 80007e6:	04c9      	lsls	r1, r1, #19
 80007e8:	430e      	orrs	r6, r1
 80007ea:	2101      	movs	r1, #1
 80007ec:	2a1b      	cmp	r2, #27
 80007ee:	dc08      	bgt.n	8000802 <__aeabi_fadd+0xb2>
 80007f0:	0031      	movs	r1, r6
 80007f2:	2020      	movs	r0, #32
 80007f4:	40d1      	lsrs	r1, r2
 80007f6:	1a82      	subs	r2, r0, r2
 80007f8:	4096      	lsls	r6, r2
 80007fa:	0032      	movs	r2, r6
 80007fc:	1e50      	subs	r0, r2, #1
 80007fe:	4182      	sbcs	r2, r0
 8000800:	4311      	orrs	r1, r2
 8000802:	1a5b      	subs	r3, r3, r1
 8000804:	015a      	lsls	r2, r3, #5
 8000806:	d459      	bmi.n	80008bc <__aeabi_fadd+0x16c>
 8000808:	2107      	movs	r1, #7
 800080a:	002a      	movs	r2, r5
 800080c:	4019      	ands	r1, r3
 800080e:	d049      	beq.n	80008a4 <__aeabi_fadd+0x154>
 8000810:	210f      	movs	r1, #15
 8000812:	4019      	ands	r1, r3
 8000814:	2904      	cmp	r1, #4
 8000816:	d000      	beq.n	800081a <__aeabi_fadd+0xca>
 8000818:	3304      	adds	r3, #4
 800081a:	0159      	lsls	r1, r3, #5
 800081c:	d542      	bpl.n	80008a4 <__aeabi_fadd+0x154>
 800081e:	1c50      	adds	r0, r2, #1
 8000820:	2afe      	cmp	r2, #254	@ 0xfe
 8000822:	d03a      	beq.n	800089a <__aeabi_fadd+0x14a>
 8000824:	019b      	lsls	r3, r3, #6
 8000826:	b2c0      	uxtb	r0, r0
 8000828:	0a5b      	lsrs	r3, r3, #9
 800082a:	05c0      	lsls	r0, r0, #23
 800082c:	4318      	orrs	r0, r3
 800082e:	07e4      	lsls	r4, r4, #31
 8000830:	4320      	orrs	r0, r4
 8000832:	bcc0      	pop	{r6, r7}
 8000834:	46b9      	mov	r9, r7
 8000836:	46b0      	mov	r8, r6
 8000838:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800083a:	20fe      	movs	r0, #254	@ 0xfe
 800083c:	4680      	mov	r8, r0
 800083e:	1c6f      	adds	r7, r5, #1
 8000840:	0038      	movs	r0, r7
 8000842:	4647      	mov	r7, r8
 8000844:	4207      	tst	r7, r0
 8000846:	d000      	beq.n	800084a <__aeabi_fadd+0xfa>
 8000848:	e08e      	b.n	8000968 <__aeabi_fadd+0x218>
 800084a:	2d00      	cmp	r5, #0
 800084c:	d000      	beq.n	8000850 <__aeabi_fadd+0x100>
 800084e:	e0b4      	b.n	80009ba <__aeabi_fadd+0x26a>
 8000850:	2b00      	cmp	r3, #0
 8000852:	d100      	bne.n	8000856 <__aeabi_fadd+0x106>
 8000854:	e0db      	b.n	8000a0e <__aeabi_fadd+0x2be>
 8000856:	2e00      	cmp	r6, #0
 8000858:	d06c      	beq.n	8000934 <__aeabi_fadd+0x1e4>
 800085a:	1b98      	subs	r0, r3, r6
 800085c:	0145      	lsls	r5, r0, #5
 800085e:	d400      	bmi.n	8000862 <__aeabi_fadd+0x112>
 8000860:	e0f7      	b.n	8000a52 <__aeabi_fadd+0x302>
 8000862:	000c      	movs	r4, r1
 8000864:	1af3      	subs	r3, r6, r3
 8000866:	e03d      	b.n	80008e4 <__aeabi_fadd+0x194>
 8000868:	2e00      	cmp	r6, #0
 800086a:	d01b      	beq.n	80008a4 <__aeabi_fadd+0x154>
 800086c:	1e51      	subs	r1, r2, #1
 800086e:	2a01      	cmp	r2, #1
 8000870:	d100      	bne.n	8000874 <__aeabi_fadd+0x124>
 8000872:	e082      	b.n	800097a <__aeabi_fadd+0x22a>
 8000874:	2aff      	cmp	r2, #255	@ 0xff
 8000876:	d03a      	beq.n	80008ee <__aeabi_fadd+0x19e>
 8000878:	000a      	movs	r2, r1
 800087a:	e7ab      	b.n	80007d4 <__aeabi_fadd+0x84>
 800087c:	0031      	movs	r1, r6
 800087e:	2020      	movs	r0, #32
 8000880:	40d1      	lsrs	r1, r2
 8000882:	1a82      	subs	r2, r0, r2
 8000884:	4096      	lsls	r6, r2
 8000886:	0032      	movs	r2, r6
 8000888:	1e50      	subs	r0, r2, #1
 800088a:	4182      	sbcs	r2, r0
 800088c:	430a      	orrs	r2, r1
 800088e:	189b      	adds	r3, r3, r2
 8000890:	015a      	lsls	r2, r3, #5
 8000892:	d5b9      	bpl.n	8000808 <__aeabi_fadd+0xb8>
 8000894:	1c6a      	adds	r2, r5, #1
 8000896:	2dfe      	cmp	r5, #254	@ 0xfe
 8000898:	d175      	bne.n	8000986 <__aeabi_fadd+0x236>
 800089a:	20ff      	movs	r0, #255	@ 0xff
 800089c:	2300      	movs	r3, #0
 800089e:	e7c4      	b.n	800082a <__aeabi_fadd+0xda>
 80008a0:	000c      	movs	r4, r1
 80008a2:	0033      	movs	r3, r6
 80008a4:	08db      	lsrs	r3, r3, #3
 80008a6:	2aff      	cmp	r2, #255	@ 0xff
 80008a8:	d146      	bne.n	8000938 <__aeabi_fadd+0x1e8>
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d0f5      	beq.n	800089a <__aeabi_fadd+0x14a>
 80008ae:	2280      	movs	r2, #128	@ 0x80
 80008b0:	03d2      	lsls	r2, r2, #15
 80008b2:	4313      	orrs	r3, r2
 80008b4:	025b      	lsls	r3, r3, #9
 80008b6:	20ff      	movs	r0, #255	@ 0xff
 80008b8:	0a5b      	lsrs	r3, r3, #9
 80008ba:	e7b6      	b.n	800082a <__aeabi_fadd+0xda>
 80008bc:	019f      	lsls	r7, r3, #6
 80008be:	09bf      	lsrs	r7, r7, #6
 80008c0:	0038      	movs	r0, r7
 80008c2:	f002 fd9b 	bl	80033fc <__clzsi2>
 80008c6:	3805      	subs	r0, #5
 80008c8:	4087      	lsls	r7, r0
 80008ca:	4285      	cmp	r5, r0
 80008cc:	dc24      	bgt.n	8000918 <__aeabi_fadd+0x1c8>
 80008ce:	003b      	movs	r3, r7
 80008d0:	2120      	movs	r1, #32
 80008d2:	1b42      	subs	r2, r0, r5
 80008d4:	3201      	adds	r2, #1
 80008d6:	40d3      	lsrs	r3, r2
 80008d8:	1a8a      	subs	r2, r1, r2
 80008da:	4097      	lsls	r7, r2
 80008dc:	1e7a      	subs	r2, r7, #1
 80008de:	4197      	sbcs	r7, r2
 80008e0:	2200      	movs	r2, #0
 80008e2:	433b      	orrs	r3, r7
 80008e4:	0759      	lsls	r1, r3, #29
 80008e6:	d193      	bne.n	8000810 <__aeabi_fadd+0xc0>
 80008e8:	e797      	b.n	800081a <__aeabi_fadd+0xca>
 80008ea:	000c      	movs	r4, r1
 80008ec:	0033      	movs	r3, r6
 80008ee:	08db      	lsrs	r3, r3, #3
 80008f0:	e7db      	b.n	80008aa <__aeabi_fadd+0x15a>
 80008f2:	2a00      	cmp	r2, #0
 80008f4:	d014      	beq.n	8000920 <__aeabi_fadd+0x1d0>
 80008f6:	1b42      	subs	r2, r0, r5
 80008f8:	2d00      	cmp	r5, #0
 80008fa:	d14b      	bne.n	8000994 <__aeabi_fadd+0x244>
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d0d0      	beq.n	80008a2 <__aeabi_fadd+0x152>
 8000900:	1e51      	subs	r1, r2, #1
 8000902:	2a01      	cmp	r2, #1
 8000904:	d100      	bne.n	8000908 <__aeabi_fadd+0x1b8>
 8000906:	e09e      	b.n	8000a46 <__aeabi_fadd+0x2f6>
 8000908:	2aff      	cmp	r2, #255	@ 0xff
 800090a:	d0ef      	beq.n	80008ec <__aeabi_fadd+0x19c>
 800090c:	000a      	movs	r2, r1
 800090e:	2a1b      	cmp	r2, #27
 8000910:	dd5f      	ble.n	80009d2 <__aeabi_fadd+0x282>
 8000912:	0002      	movs	r2, r0
 8000914:	1c73      	adds	r3, r6, #1
 8000916:	e77b      	b.n	8000810 <__aeabi_fadd+0xc0>
 8000918:	4b50      	ldr	r3, [pc, #320]	@ (8000a5c <__aeabi_fadd+0x30c>)
 800091a:	1a2a      	subs	r2, r5, r0
 800091c:	403b      	ands	r3, r7
 800091e:	e7e1      	b.n	80008e4 <__aeabi_fadd+0x194>
 8000920:	21fe      	movs	r1, #254	@ 0xfe
 8000922:	1c6a      	adds	r2, r5, #1
 8000924:	4211      	tst	r1, r2
 8000926:	d13b      	bne.n	80009a0 <__aeabi_fadd+0x250>
 8000928:	2d00      	cmp	r5, #0
 800092a:	d15d      	bne.n	80009e8 <__aeabi_fadd+0x298>
 800092c:	2b00      	cmp	r3, #0
 800092e:	d07f      	beq.n	8000a30 <__aeabi_fadd+0x2e0>
 8000930:	2e00      	cmp	r6, #0
 8000932:	d17f      	bne.n	8000a34 <__aeabi_fadd+0x2e4>
 8000934:	2200      	movs	r2, #0
 8000936:	08db      	lsrs	r3, r3, #3
 8000938:	025b      	lsls	r3, r3, #9
 800093a:	0a5b      	lsrs	r3, r3, #9
 800093c:	b2d0      	uxtb	r0, r2
 800093e:	e774      	b.n	800082a <__aeabi_fadd+0xda>
 8000940:	28ff      	cmp	r0, #255	@ 0xff
 8000942:	d0d2      	beq.n	80008ea <__aeabi_fadd+0x19a>
 8000944:	2480      	movs	r4, #128	@ 0x80
 8000946:	04e4      	lsls	r4, r4, #19
 8000948:	4323      	orrs	r3, r4
 800094a:	2401      	movs	r4, #1
 800094c:	2a1b      	cmp	r2, #27
 800094e:	dc07      	bgt.n	8000960 <__aeabi_fadd+0x210>
 8000950:	001c      	movs	r4, r3
 8000952:	2520      	movs	r5, #32
 8000954:	40d4      	lsrs	r4, r2
 8000956:	1aaa      	subs	r2, r5, r2
 8000958:	4093      	lsls	r3, r2
 800095a:	1e5a      	subs	r2, r3, #1
 800095c:	4193      	sbcs	r3, r2
 800095e:	431c      	orrs	r4, r3
 8000960:	1b33      	subs	r3, r6, r4
 8000962:	0005      	movs	r5, r0
 8000964:	000c      	movs	r4, r1
 8000966:	e74d      	b.n	8000804 <__aeabi_fadd+0xb4>
 8000968:	1b9f      	subs	r7, r3, r6
 800096a:	017a      	lsls	r2, r7, #5
 800096c:	d422      	bmi.n	80009b4 <__aeabi_fadd+0x264>
 800096e:	2f00      	cmp	r7, #0
 8000970:	d1a6      	bne.n	80008c0 <__aeabi_fadd+0x170>
 8000972:	2400      	movs	r4, #0
 8000974:	2000      	movs	r0, #0
 8000976:	2300      	movs	r3, #0
 8000978:	e757      	b.n	800082a <__aeabi_fadd+0xda>
 800097a:	199b      	adds	r3, r3, r6
 800097c:	2501      	movs	r5, #1
 800097e:	3201      	adds	r2, #1
 8000980:	0159      	lsls	r1, r3, #5
 8000982:	d400      	bmi.n	8000986 <__aeabi_fadd+0x236>
 8000984:	e740      	b.n	8000808 <__aeabi_fadd+0xb8>
 8000986:	2101      	movs	r1, #1
 8000988:	4835      	ldr	r0, [pc, #212]	@ (8000a60 <__aeabi_fadd+0x310>)
 800098a:	4019      	ands	r1, r3
 800098c:	085b      	lsrs	r3, r3, #1
 800098e:	4003      	ands	r3, r0
 8000990:	430b      	orrs	r3, r1
 8000992:	e7a7      	b.n	80008e4 <__aeabi_fadd+0x194>
 8000994:	28ff      	cmp	r0, #255	@ 0xff
 8000996:	d0a9      	beq.n	80008ec <__aeabi_fadd+0x19c>
 8000998:	2180      	movs	r1, #128	@ 0x80
 800099a:	04c9      	lsls	r1, r1, #19
 800099c:	430b      	orrs	r3, r1
 800099e:	e7b6      	b.n	800090e <__aeabi_fadd+0x1be>
 80009a0:	2aff      	cmp	r2, #255	@ 0xff
 80009a2:	d100      	bne.n	80009a6 <__aeabi_fadd+0x256>
 80009a4:	e779      	b.n	800089a <__aeabi_fadd+0x14a>
 80009a6:	199b      	adds	r3, r3, r6
 80009a8:	085b      	lsrs	r3, r3, #1
 80009aa:	0759      	lsls	r1, r3, #29
 80009ac:	d000      	beq.n	80009b0 <__aeabi_fadd+0x260>
 80009ae:	e72f      	b.n	8000810 <__aeabi_fadd+0xc0>
 80009b0:	08db      	lsrs	r3, r3, #3
 80009b2:	e7c1      	b.n	8000938 <__aeabi_fadd+0x1e8>
 80009b4:	000c      	movs	r4, r1
 80009b6:	1af7      	subs	r7, r6, r3
 80009b8:	e782      	b.n	80008c0 <__aeabi_fadd+0x170>
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d12c      	bne.n	8000a18 <__aeabi_fadd+0x2c8>
 80009be:	2e00      	cmp	r6, #0
 80009c0:	d193      	bne.n	80008ea <__aeabi_fadd+0x19a>
 80009c2:	2380      	movs	r3, #128	@ 0x80
 80009c4:	2400      	movs	r4, #0
 80009c6:	20ff      	movs	r0, #255	@ 0xff
 80009c8:	03db      	lsls	r3, r3, #15
 80009ca:	e72e      	b.n	800082a <__aeabi_fadd+0xda>
 80009cc:	2501      	movs	r5, #1
 80009ce:	1b9b      	subs	r3, r3, r6
 80009d0:	e718      	b.n	8000804 <__aeabi_fadd+0xb4>
 80009d2:	0019      	movs	r1, r3
 80009d4:	2520      	movs	r5, #32
 80009d6:	40d1      	lsrs	r1, r2
 80009d8:	1aaa      	subs	r2, r5, r2
 80009da:	4093      	lsls	r3, r2
 80009dc:	1e5a      	subs	r2, r3, #1
 80009de:	4193      	sbcs	r3, r2
 80009e0:	430b      	orrs	r3, r1
 80009e2:	0005      	movs	r5, r0
 80009e4:	199b      	adds	r3, r3, r6
 80009e6:	e753      	b.n	8000890 <__aeabi_fadd+0x140>
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d100      	bne.n	80009ee <__aeabi_fadd+0x29e>
 80009ec:	e77e      	b.n	80008ec <__aeabi_fadd+0x19c>
 80009ee:	2e00      	cmp	r6, #0
 80009f0:	d100      	bne.n	80009f4 <__aeabi_fadd+0x2a4>
 80009f2:	e77c      	b.n	80008ee <__aeabi_fadd+0x19e>
 80009f4:	2280      	movs	r2, #128	@ 0x80
 80009f6:	03d2      	lsls	r2, r2, #15
 80009f8:	4591      	cmp	r9, r2
 80009fa:	d302      	bcc.n	8000a02 <__aeabi_fadd+0x2b2>
 80009fc:	4594      	cmp	ip, r2
 80009fe:	d200      	bcs.n	8000a02 <__aeabi_fadd+0x2b2>
 8000a00:	0033      	movs	r3, r6
 8000a02:	08db      	lsrs	r3, r3, #3
 8000a04:	e753      	b.n	80008ae <__aeabi_fadd+0x15e>
 8000a06:	000c      	movs	r4, r1
 8000a08:	1af3      	subs	r3, r6, r3
 8000a0a:	3501      	adds	r5, #1
 8000a0c:	e6fa      	b.n	8000804 <__aeabi_fadd+0xb4>
 8000a0e:	2e00      	cmp	r6, #0
 8000a10:	d0af      	beq.n	8000972 <__aeabi_fadd+0x222>
 8000a12:	000c      	movs	r4, r1
 8000a14:	0033      	movs	r3, r6
 8000a16:	e78d      	b.n	8000934 <__aeabi_fadd+0x1e4>
 8000a18:	2e00      	cmp	r6, #0
 8000a1a:	d100      	bne.n	8000a1e <__aeabi_fadd+0x2ce>
 8000a1c:	e767      	b.n	80008ee <__aeabi_fadd+0x19e>
 8000a1e:	2280      	movs	r2, #128	@ 0x80
 8000a20:	03d2      	lsls	r2, r2, #15
 8000a22:	4591      	cmp	r9, r2
 8000a24:	d3ed      	bcc.n	8000a02 <__aeabi_fadd+0x2b2>
 8000a26:	4594      	cmp	ip, r2
 8000a28:	d2eb      	bcs.n	8000a02 <__aeabi_fadd+0x2b2>
 8000a2a:	000c      	movs	r4, r1
 8000a2c:	0033      	movs	r3, r6
 8000a2e:	e7e8      	b.n	8000a02 <__aeabi_fadd+0x2b2>
 8000a30:	0033      	movs	r3, r6
 8000a32:	e77f      	b.n	8000934 <__aeabi_fadd+0x1e4>
 8000a34:	199b      	adds	r3, r3, r6
 8000a36:	2200      	movs	r2, #0
 8000a38:	0159      	lsls	r1, r3, #5
 8000a3a:	d5b9      	bpl.n	80009b0 <__aeabi_fadd+0x260>
 8000a3c:	4a07      	ldr	r2, [pc, #28]	@ (8000a5c <__aeabi_fadd+0x30c>)
 8000a3e:	4013      	ands	r3, r2
 8000a40:	08db      	lsrs	r3, r3, #3
 8000a42:	2201      	movs	r2, #1
 8000a44:	e778      	b.n	8000938 <__aeabi_fadd+0x1e8>
 8000a46:	199b      	adds	r3, r3, r6
 8000a48:	3201      	adds	r2, #1
 8000a4a:	3501      	adds	r5, #1
 8000a4c:	0159      	lsls	r1, r3, #5
 8000a4e:	d49a      	bmi.n	8000986 <__aeabi_fadd+0x236>
 8000a50:	e6da      	b.n	8000808 <__aeabi_fadd+0xb8>
 8000a52:	1e03      	subs	r3, r0, #0
 8000a54:	d08d      	beq.n	8000972 <__aeabi_fadd+0x222>
 8000a56:	08db      	lsrs	r3, r3, #3
 8000a58:	e76e      	b.n	8000938 <__aeabi_fadd+0x1e8>
 8000a5a:	46c0      	nop			@ (mov r8, r8)
 8000a5c:	fbffffff 	.word	0xfbffffff
 8000a60:	7dffffff 	.word	0x7dffffff

08000a64 <__aeabi_fdiv>:
 8000a64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a66:	464f      	mov	r7, r9
 8000a68:	4646      	mov	r6, r8
 8000a6a:	46d6      	mov	lr, sl
 8000a6c:	0244      	lsls	r4, r0, #9
 8000a6e:	b5c0      	push	{r6, r7, lr}
 8000a70:	0047      	lsls	r7, r0, #1
 8000a72:	1c0e      	adds	r6, r1, #0
 8000a74:	0a64      	lsrs	r4, r4, #9
 8000a76:	0e3f      	lsrs	r7, r7, #24
 8000a78:	0fc5      	lsrs	r5, r0, #31
 8000a7a:	2f00      	cmp	r7, #0
 8000a7c:	d03c      	beq.n	8000af8 <__aeabi_fdiv+0x94>
 8000a7e:	2fff      	cmp	r7, #255	@ 0xff
 8000a80:	d042      	beq.n	8000b08 <__aeabi_fdiv+0xa4>
 8000a82:	2300      	movs	r3, #0
 8000a84:	2280      	movs	r2, #128	@ 0x80
 8000a86:	4699      	mov	r9, r3
 8000a88:	469a      	mov	sl, r3
 8000a8a:	00e4      	lsls	r4, r4, #3
 8000a8c:	04d2      	lsls	r2, r2, #19
 8000a8e:	4314      	orrs	r4, r2
 8000a90:	3f7f      	subs	r7, #127	@ 0x7f
 8000a92:	0273      	lsls	r3, r6, #9
 8000a94:	0a5b      	lsrs	r3, r3, #9
 8000a96:	4698      	mov	r8, r3
 8000a98:	0073      	lsls	r3, r6, #1
 8000a9a:	0e1b      	lsrs	r3, r3, #24
 8000a9c:	0ff6      	lsrs	r6, r6, #31
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d01b      	beq.n	8000ada <__aeabi_fdiv+0x76>
 8000aa2:	2bff      	cmp	r3, #255	@ 0xff
 8000aa4:	d013      	beq.n	8000ace <__aeabi_fdiv+0x6a>
 8000aa6:	4642      	mov	r2, r8
 8000aa8:	2180      	movs	r1, #128	@ 0x80
 8000aaa:	00d2      	lsls	r2, r2, #3
 8000aac:	04c9      	lsls	r1, r1, #19
 8000aae:	4311      	orrs	r1, r2
 8000ab0:	4688      	mov	r8, r1
 8000ab2:	2000      	movs	r0, #0
 8000ab4:	3b7f      	subs	r3, #127	@ 0x7f
 8000ab6:	0029      	movs	r1, r5
 8000ab8:	1aff      	subs	r7, r7, r3
 8000aba:	464b      	mov	r3, r9
 8000abc:	4071      	eors	r1, r6
 8000abe:	b2c9      	uxtb	r1, r1
 8000ac0:	2b0f      	cmp	r3, #15
 8000ac2:	d900      	bls.n	8000ac6 <__aeabi_fdiv+0x62>
 8000ac4:	e0b5      	b.n	8000c32 <__aeabi_fdiv+0x1ce>
 8000ac6:	4a74      	ldr	r2, [pc, #464]	@ (8000c98 <__aeabi_fdiv+0x234>)
 8000ac8:	009b      	lsls	r3, r3, #2
 8000aca:	58d3      	ldr	r3, [r2, r3]
 8000acc:	469f      	mov	pc, r3
 8000ace:	4643      	mov	r3, r8
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d13f      	bne.n	8000b54 <__aeabi_fdiv+0xf0>
 8000ad4:	3fff      	subs	r7, #255	@ 0xff
 8000ad6:	3302      	adds	r3, #2
 8000ad8:	e003      	b.n	8000ae2 <__aeabi_fdiv+0x7e>
 8000ada:	4643      	mov	r3, r8
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d12d      	bne.n	8000b3c <__aeabi_fdiv+0xd8>
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	0029      	movs	r1, r5
 8000ae4:	464a      	mov	r2, r9
 8000ae6:	4071      	eors	r1, r6
 8000ae8:	b2c9      	uxtb	r1, r1
 8000aea:	431a      	orrs	r2, r3
 8000aec:	2a0e      	cmp	r2, #14
 8000aee:	d838      	bhi.n	8000b62 <__aeabi_fdiv+0xfe>
 8000af0:	486a      	ldr	r0, [pc, #424]	@ (8000c9c <__aeabi_fdiv+0x238>)
 8000af2:	0092      	lsls	r2, r2, #2
 8000af4:	5882      	ldr	r2, [r0, r2]
 8000af6:	4697      	mov	pc, r2
 8000af8:	2c00      	cmp	r4, #0
 8000afa:	d113      	bne.n	8000b24 <__aeabi_fdiv+0xc0>
 8000afc:	2304      	movs	r3, #4
 8000afe:	4699      	mov	r9, r3
 8000b00:	3b03      	subs	r3, #3
 8000b02:	2700      	movs	r7, #0
 8000b04:	469a      	mov	sl, r3
 8000b06:	e7c4      	b.n	8000a92 <__aeabi_fdiv+0x2e>
 8000b08:	2c00      	cmp	r4, #0
 8000b0a:	d105      	bne.n	8000b18 <__aeabi_fdiv+0xb4>
 8000b0c:	2308      	movs	r3, #8
 8000b0e:	4699      	mov	r9, r3
 8000b10:	3b06      	subs	r3, #6
 8000b12:	27ff      	movs	r7, #255	@ 0xff
 8000b14:	469a      	mov	sl, r3
 8000b16:	e7bc      	b.n	8000a92 <__aeabi_fdiv+0x2e>
 8000b18:	230c      	movs	r3, #12
 8000b1a:	4699      	mov	r9, r3
 8000b1c:	3b09      	subs	r3, #9
 8000b1e:	27ff      	movs	r7, #255	@ 0xff
 8000b20:	469a      	mov	sl, r3
 8000b22:	e7b6      	b.n	8000a92 <__aeabi_fdiv+0x2e>
 8000b24:	0020      	movs	r0, r4
 8000b26:	f002 fc69 	bl	80033fc <__clzsi2>
 8000b2a:	2776      	movs	r7, #118	@ 0x76
 8000b2c:	1f43      	subs	r3, r0, #5
 8000b2e:	409c      	lsls	r4, r3
 8000b30:	2300      	movs	r3, #0
 8000b32:	427f      	negs	r7, r7
 8000b34:	4699      	mov	r9, r3
 8000b36:	469a      	mov	sl, r3
 8000b38:	1a3f      	subs	r7, r7, r0
 8000b3a:	e7aa      	b.n	8000a92 <__aeabi_fdiv+0x2e>
 8000b3c:	4640      	mov	r0, r8
 8000b3e:	f002 fc5d 	bl	80033fc <__clzsi2>
 8000b42:	4642      	mov	r2, r8
 8000b44:	1f43      	subs	r3, r0, #5
 8000b46:	409a      	lsls	r2, r3
 8000b48:	2376      	movs	r3, #118	@ 0x76
 8000b4a:	425b      	negs	r3, r3
 8000b4c:	1a1b      	subs	r3, r3, r0
 8000b4e:	4690      	mov	r8, r2
 8000b50:	2000      	movs	r0, #0
 8000b52:	e7b0      	b.n	8000ab6 <__aeabi_fdiv+0x52>
 8000b54:	2303      	movs	r3, #3
 8000b56:	464a      	mov	r2, r9
 8000b58:	431a      	orrs	r2, r3
 8000b5a:	4691      	mov	r9, r2
 8000b5c:	2003      	movs	r0, #3
 8000b5e:	33fc      	adds	r3, #252	@ 0xfc
 8000b60:	e7a9      	b.n	8000ab6 <__aeabi_fdiv+0x52>
 8000b62:	000d      	movs	r5, r1
 8000b64:	20ff      	movs	r0, #255	@ 0xff
 8000b66:	2200      	movs	r2, #0
 8000b68:	05c0      	lsls	r0, r0, #23
 8000b6a:	07ed      	lsls	r5, r5, #31
 8000b6c:	4310      	orrs	r0, r2
 8000b6e:	4328      	orrs	r0, r5
 8000b70:	bce0      	pop	{r5, r6, r7}
 8000b72:	46ba      	mov	sl, r7
 8000b74:	46b1      	mov	r9, r6
 8000b76:	46a8      	mov	r8, r5
 8000b78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b7a:	000d      	movs	r5, r1
 8000b7c:	2000      	movs	r0, #0
 8000b7e:	2200      	movs	r2, #0
 8000b80:	e7f2      	b.n	8000b68 <__aeabi_fdiv+0x104>
 8000b82:	4653      	mov	r3, sl
 8000b84:	2b02      	cmp	r3, #2
 8000b86:	d0ed      	beq.n	8000b64 <__aeabi_fdiv+0x100>
 8000b88:	2b03      	cmp	r3, #3
 8000b8a:	d033      	beq.n	8000bf4 <__aeabi_fdiv+0x190>
 8000b8c:	46a0      	mov	r8, r4
 8000b8e:	2b01      	cmp	r3, #1
 8000b90:	d105      	bne.n	8000b9e <__aeabi_fdiv+0x13a>
 8000b92:	2000      	movs	r0, #0
 8000b94:	2200      	movs	r2, #0
 8000b96:	e7e7      	b.n	8000b68 <__aeabi_fdiv+0x104>
 8000b98:	0035      	movs	r5, r6
 8000b9a:	2803      	cmp	r0, #3
 8000b9c:	d07a      	beq.n	8000c94 <__aeabi_fdiv+0x230>
 8000b9e:	003b      	movs	r3, r7
 8000ba0:	337f      	adds	r3, #127	@ 0x7f
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	dd2d      	ble.n	8000c02 <__aeabi_fdiv+0x19e>
 8000ba6:	4642      	mov	r2, r8
 8000ba8:	0752      	lsls	r2, r2, #29
 8000baa:	d007      	beq.n	8000bbc <__aeabi_fdiv+0x158>
 8000bac:	220f      	movs	r2, #15
 8000bae:	4641      	mov	r1, r8
 8000bb0:	400a      	ands	r2, r1
 8000bb2:	2a04      	cmp	r2, #4
 8000bb4:	d002      	beq.n	8000bbc <__aeabi_fdiv+0x158>
 8000bb6:	2204      	movs	r2, #4
 8000bb8:	4694      	mov	ip, r2
 8000bba:	44e0      	add	r8, ip
 8000bbc:	4642      	mov	r2, r8
 8000bbe:	0112      	lsls	r2, r2, #4
 8000bc0:	d505      	bpl.n	8000bce <__aeabi_fdiv+0x16a>
 8000bc2:	4642      	mov	r2, r8
 8000bc4:	4b36      	ldr	r3, [pc, #216]	@ (8000ca0 <__aeabi_fdiv+0x23c>)
 8000bc6:	401a      	ands	r2, r3
 8000bc8:	003b      	movs	r3, r7
 8000bca:	4690      	mov	r8, r2
 8000bcc:	3380      	adds	r3, #128	@ 0x80
 8000bce:	2bfe      	cmp	r3, #254	@ 0xfe
 8000bd0:	dcc8      	bgt.n	8000b64 <__aeabi_fdiv+0x100>
 8000bd2:	4642      	mov	r2, r8
 8000bd4:	0192      	lsls	r2, r2, #6
 8000bd6:	0a52      	lsrs	r2, r2, #9
 8000bd8:	b2d8      	uxtb	r0, r3
 8000bda:	e7c5      	b.n	8000b68 <__aeabi_fdiv+0x104>
 8000bdc:	2280      	movs	r2, #128	@ 0x80
 8000bde:	2500      	movs	r5, #0
 8000be0:	20ff      	movs	r0, #255	@ 0xff
 8000be2:	03d2      	lsls	r2, r2, #15
 8000be4:	e7c0      	b.n	8000b68 <__aeabi_fdiv+0x104>
 8000be6:	2280      	movs	r2, #128	@ 0x80
 8000be8:	03d2      	lsls	r2, r2, #15
 8000bea:	4214      	tst	r4, r2
 8000bec:	d002      	beq.n	8000bf4 <__aeabi_fdiv+0x190>
 8000bee:	4643      	mov	r3, r8
 8000bf0:	4213      	tst	r3, r2
 8000bf2:	d049      	beq.n	8000c88 <__aeabi_fdiv+0x224>
 8000bf4:	2280      	movs	r2, #128	@ 0x80
 8000bf6:	03d2      	lsls	r2, r2, #15
 8000bf8:	4322      	orrs	r2, r4
 8000bfa:	0252      	lsls	r2, r2, #9
 8000bfc:	20ff      	movs	r0, #255	@ 0xff
 8000bfe:	0a52      	lsrs	r2, r2, #9
 8000c00:	e7b2      	b.n	8000b68 <__aeabi_fdiv+0x104>
 8000c02:	2201      	movs	r2, #1
 8000c04:	1ad3      	subs	r3, r2, r3
 8000c06:	2b1b      	cmp	r3, #27
 8000c08:	dcc3      	bgt.n	8000b92 <__aeabi_fdiv+0x12e>
 8000c0a:	4642      	mov	r2, r8
 8000c0c:	40da      	lsrs	r2, r3
 8000c0e:	4643      	mov	r3, r8
 8000c10:	379e      	adds	r7, #158	@ 0x9e
 8000c12:	40bb      	lsls	r3, r7
 8000c14:	1e59      	subs	r1, r3, #1
 8000c16:	418b      	sbcs	r3, r1
 8000c18:	431a      	orrs	r2, r3
 8000c1a:	0753      	lsls	r3, r2, #29
 8000c1c:	d004      	beq.n	8000c28 <__aeabi_fdiv+0x1c4>
 8000c1e:	230f      	movs	r3, #15
 8000c20:	4013      	ands	r3, r2
 8000c22:	2b04      	cmp	r3, #4
 8000c24:	d000      	beq.n	8000c28 <__aeabi_fdiv+0x1c4>
 8000c26:	3204      	adds	r2, #4
 8000c28:	0153      	lsls	r3, r2, #5
 8000c2a:	d529      	bpl.n	8000c80 <__aeabi_fdiv+0x21c>
 8000c2c:	2001      	movs	r0, #1
 8000c2e:	2200      	movs	r2, #0
 8000c30:	e79a      	b.n	8000b68 <__aeabi_fdiv+0x104>
 8000c32:	4642      	mov	r2, r8
 8000c34:	0163      	lsls	r3, r4, #5
 8000c36:	0155      	lsls	r5, r2, #5
 8000c38:	42ab      	cmp	r3, r5
 8000c3a:	d215      	bcs.n	8000c68 <__aeabi_fdiv+0x204>
 8000c3c:	201b      	movs	r0, #27
 8000c3e:	2200      	movs	r2, #0
 8000c40:	3f01      	subs	r7, #1
 8000c42:	2601      	movs	r6, #1
 8000c44:	001c      	movs	r4, r3
 8000c46:	0052      	lsls	r2, r2, #1
 8000c48:	005b      	lsls	r3, r3, #1
 8000c4a:	2c00      	cmp	r4, #0
 8000c4c:	db01      	blt.n	8000c52 <__aeabi_fdiv+0x1ee>
 8000c4e:	429d      	cmp	r5, r3
 8000c50:	d801      	bhi.n	8000c56 <__aeabi_fdiv+0x1f2>
 8000c52:	1b5b      	subs	r3, r3, r5
 8000c54:	4332      	orrs	r2, r6
 8000c56:	3801      	subs	r0, #1
 8000c58:	2800      	cmp	r0, #0
 8000c5a:	d1f3      	bne.n	8000c44 <__aeabi_fdiv+0x1e0>
 8000c5c:	1e58      	subs	r0, r3, #1
 8000c5e:	4183      	sbcs	r3, r0
 8000c60:	4313      	orrs	r3, r2
 8000c62:	4698      	mov	r8, r3
 8000c64:	000d      	movs	r5, r1
 8000c66:	e79a      	b.n	8000b9e <__aeabi_fdiv+0x13a>
 8000c68:	201a      	movs	r0, #26
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	1b5b      	subs	r3, r3, r5
 8000c6e:	e7e8      	b.n	8000c42 <__aeabi_fdiv+0x1de>
 8000c70:	3b02      	subs	r3, #2
 8000c72:	425a      	negs	r2, r3
 8000c74:	4153      	adcs	r3, r2
 8000c76:	425b      	negs	r3, r3
 8000c78:	0035      	movs	r5, r6
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	b2d8      	uxtb	r0, r3
 8000c7e:	e773      	b.n	8000b68 <__aeabi_fdiv+0x104>
 8000c80:	0192      	lsls	r2, r2, #6
 8000c82:	2000      	movs	r0, #0
 8000c84:	0a52      	lsrs	r2, r2, #9
 8000c86:	e76f      	b.n	8000b68 <__aeabi_fdiv+0x104>
 8000c88:	431a      	orrs	r2, r3
 8000c8a:	0252      	lsls	r2, r2, #9
 8000c8c:	0035      	movs	r5, r6
 8000c8e:	20ff      	movs	r0, #255	@ 0xff
 8000c90:	0a52      	lsrs	r2, r2, #9
 8000c92:	e769      	b.n	8000b68 <__aeabi_fdiv+0x104>
 8000c94:	4644      	mov	r4, r8
 8000c96:	e7ad      	b.n	8000bf4 <__aeabi_fdiv+0x190>
 8000c98:	080104bc 	.word	0x080104bc
 8000c9c:	080104fc 	.word	0x080104fc
 8000ca0:	f7ffffff 	.word	0xf7ffffff
=======
080007bc <__aeabi_fadd>:
 80007bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007be:	46ce      	mov	lr, r9
 80007c0:	4647      	mov	r7, r8
 80007c2:	0243      	lsls	r3, r0, #9
 80007c4:	0a5a      	lsrs	r2, r3, #9
 80007c6:	024e      	lsls	r6, r1, #9
 80007c8:	0045      	lsls	r5, r0, #1
 80007ca:	0fc4      	lsrs	r4, r0, #31
 80007cc:	0048      	lsls	r0, r1, #1
 80007ce:	4691      	mov	r9, r2
 80007d0:	0e2d      	lsrs	r5, r5, #24
 80007d2:	0a72      	lsrs	r2, r6, #9
 80007d4:	0e00      	lsrs	r0, r0, #24
 80007d6:	4694      	mov	ip, r2
 80007d8:	b580      	push	{r7, lr}
 80007da:	099b      	lsrs	r3, r3, #6
 80007dc:	0fc9      	lsrs	r1, r1, #31
 80007de:	09b6      	lsrs	r6, r6, #6
 80007e0:	1a2a      	subs	r2, r5, r0
 80007e2:	428c      	cmp	r4, r1
 80007e4:	d021      	beq.n	800082a <__aeabi_fadd+0x6e>
 80007e6:	2a00      	cmp	r2, #0
 80007e8:	dd0d      	ble.n	8000806 <__aeabi_fadd+0x4a>
 80007ea:	2800      	cmp	r0, #0
 80007ec:	d12d      	bne.n	800084a <__aeabi_fadd+0x8e>
 80007ee:	2e00      	cmp	r6, #0
 80007f0:	d100      	bne.n	80007f4 <__aeabi_fadd+0x38>
 80007f2:	e08d      	b.n	8000910 <__aeabi_fadd+0x154>
 80007f4:	1e51      	subs	r1, r2, #1
 80007f6:	2a01      	cmp	r2, #1
 80007f8:	d100      	bne.n	80007fc <__aeabi_fadd+0x40>
 80007fa:	e11d      	b.n	8000a38 <__aeabi_fadd+0x27c>
 80007fc:	2aff      	cmp	r2, #255	@ 0xff
 80007fe:	d100      	bne.n	8000802 <__aeabi_fadd+0x46>
 8000800:	e0ab      	b.n	800095a <__aeabi_fadd+0x19e>
 8000802:	000a      	movs	r2, r1
 8000804:	e027      	b.n	8000856 <__aeabi_fadd+0x9a>
 8000806:	2a00      	cmp	r2, #0
 8000808:	d04d      	beq.n	80008a6 <__aeabi_fadd+0xea>
 800080a:	1b42      	subs	r2, r0, r5
 800080c:	2d00      	cmp	r5, #0
 800080e:	d000      	beq.n	8000812 <__aeabi_fadd+0x56>
 8000810:	e0cc      	b.n	80009ac <__aeabi_fadd+0x1f0>
 8000812:	2b00      	cmp	r3, #0
 8000814:	d100      	bne.n	8000818 <__aeabi_fadd+0x5c>
 8000816:	e079      	b.n	800090c <__aeabi_fadd+0x150>
 8000818:	1e54      	subs	r4, r2, #1
 800081a:	2a01      	cmp	r2, #1
 800081c:	d100      	bne.n	8000820 <__aeabi_fadd+0x64>
 800081e:	e128      	b.n	8000a72 <__aeabi_fadd+0x2b6>
 8000820:	2aff      	cmp	r2, #255	@ 0xff
 8000822:	d100      	bne.n	8000826 <__aeabi_fadd+0x6a>
 8000824:	e097      	b.n	8000956 <__aeabi_fadd+0x19a>
 8000826:	0022      	movs	r2, r4
 8000828:	e0c5      	b.n	80009b6 <__aeabi_fadd+0x1fa>
 800082a:	2a00      	cmp	r2, #0
 800082c:	dc00      	bgt.n	8000830 <__aeabi_fadd+0x74>
 800082e:	e096      	b.n	800095e <__aeabi_fadd+0x1a2>
 8000830:	2800      	cmp	r0, #0
 8000832:	d04f      	beq.n	80008d4 <__aeabi_fadd+0x118>
 8000834:	2dff      	cmp	r5, #255	@ 0xff
 8000836:	d100      	bne.n	800083a <__aeabi_fadd+0x7e>
 8000838:	e08f      	b.n	800095a <__aeabi_fadd+0x19e>
 800083a:	2180      	movs	r1, #128	@ 0x80
 800083c:	04c9      	lsls	r1, r1, #19
 800083e:	430e      	orrs	r6, r1
 8000840:	2a1b      	cmp	r2, #27
 8000842:	dd51      	ble.n	80008e8 <__aeabi_fadd+0x12c>
 8000844:	002a      	movs	r2, r5
 8000846:	3301      	adds	r3, #1
 8000848:	e018      	b.n	800087c <__aeabi_fadd+0xc0>
 800084a:	2dff      	cmp	r5, #255	@ 0xff
 800084c:	d100      	bne.n	8000850 <__aeabi_fadd+0x94>
 800084e:	e084      	b.n	800095a <__aeabi_fadd+0x19e>
 8000850:	2180      	movs	r1, #128	@ 0x80
 8000852:	04c9      	lsls	r1, r1, #19
 8000854:	430e      	orrs	r6, r1
 8000856:	2101      	movs	r1, #1
 8000858:	2a1b      	cmp	r2, #27
 800085a:	dc08      	bgt.n	800086e <__aeabi_fadd+0xb2>
 800085c:	0031      	movs	r1, r6
 800085e:	2020      	movs	r0, #32
 8000860:	40d1      	lsrs	r1, r2
 8000862:	1a82      	subs	r2, r0, r2
 8000864:	4096      	lsls	r6, r2
 8000866:	0032      	movs	r2, r6
 8000868:	1e50      	subs	r0, r2, #1
 800086a:	4182      	sbcs	r2, r0
 800086c:	4311      	orrs	r1, r2
 800086e:	1a5b      	subs	r3, r3, r1
 8000870:	015a      	lsls	r2, r3, #5
 8000872:	d459      	bmi.n	8000928 <__aeabi_fadd+0x16c>
 8000874:	2107      	movs	r1, #7
 8000876:	002a      	movs	r2, r5
 8000878:	4019      	ands	r1, r3
 800087a:	d049      	beq.n	8000910 <__aeabi_fadd+0x154>
 800087c:	210f      	movs	r1, #15
 800087e:	4019      	ands	r1, r3
 8000880:	2904      	cmp	r1, #4
 8000882:	d000      	beq.n	8000886 <__aeabi_fadd+0xca>
 8000884:	3304      	adds	r3, #4
 8000886:	0159      	lsls	r1, r3, #5
 8000888:	d542      	bpl.n	8000910 <__aeabi_fadd+0x154>
 800088a:	1c50      	adds	r0, r2, #1
 800088c:	2afe      	cmp	r2, #254	@ 0xfe
 800088e:	d03a      	beq.n	8000906 <__aeabi_fadd+0x14a>
 8000890:	019b      	lsls	r3, r3, #6
 8000892:	b2c0      	uxtb	r0, r0
 8000894:	0a5b      	lsrs	r3, r3, #9
 8000896:	05c0      	lsls	r0, r0, #23
 8000898:	4318      	orrs	r0, r3
 800089a:	07e4      	lsls	r4, r4, #31
 800089c:	4320      	orrs	r0, r4
 800089e:	bcc0      	pop	{r6, r7}
 80008a0:	46b9      	mov	r9, r7
 80008a2:	46b0      	mov	r8, r6
 80008a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80008a6:	20fe      	movs	r0, #254	@ 0xfe
 80008a8:	4680      	mov	r8, r0
 80008aa:	1c6f      	adds	r7, r5, #1
 80008ac:	0038      	movs	r0, r7
 80008ae:	4647      	mov	r7, r8
 80008b0:	4207      	tst	r7, r0
 80008b2:	d000      	beq.n	80008b6 <__aeabi_fadd+0xfa>
 80008b4:	e08e      	b.n	80009d4 <__aeabi_fadd+0x218>
 80008b6:	2d00      	cmp	r5, #0
 80008b8:	d000      	beq.n	80008bc <__aeabi_fadd+0x100>
 80008ba:	e0b4      	b.n	8000a26 <__aeabi_fadd+0x26a>
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d100      	bne.n	80008c2 <__aeabi_fadd+0x106>
 80008c0:	e0db      	b.n	8000a7a <__aeabi_fadd+0x2be>
 80008c2:	2e00      	cmp	r6, #0
 80008c4:	d06c      	beq.n	80009a0 <__aeabi_fadd+0x1e4>
 80008c6:	1b98      	subs	r0, r3, r6
 80008c8:	0145      	lsls	r5, r0, #5
 80008ca:	d400      	bmi.n	80008ce <__aeabi_fadd+0x112>
 80008cc:	e0f7      	b.n	8000abe <__aeabi_fadd+0x302>
 80008ce:	000c      	movs	r4, r1
 80008d0:	1af3      	subs	r3, r6, r3
 80008d2:	e03d      	b.n	8000950 <__aeabi_fadd+0x194>
 80008d4:	2e00      	cmp	r6, #0
 80008d6:	d01b      	beq.n	8000910 <__aeabi_fadd+0x154>
 80008d8:	1e51      	subs	r1, r2, #1
 80008da:	2a01      	cmp	r2, #1
 80008dc:	d100      	bne.n	80008e0 <__aeabi_fadd+0x124>
 80008de:	e082      	b.n	80009e6 <__aeabi_fadd+0x22a>
 80008e0:	2aff      	cmp	r2, #255	@ 0xff
 80008e2:	d03a      	beq.n	800095a <__aeabi_fadd+0x19e>
 80008e4:	000a      	movs	r2, r1
 80008e6:	e7ab      	b.n	8000840 <__aeabi_fadd+0x84>
 80008e8:	0031      	movs	r1, r6
 80008ea:	2020      	movs	r0, #32
 80008ec:	40d1      	lsrs	r1, r2
 80008ee:	1a82      	subs	r2, r0, r2
 80008f0:	4096      	lsls	r6, r2
 80008f2:	0032      	movs	r2, r6
 80008f4:	1e50      	subs	r0, r2, #1
 80008f6:	4182      	sbcs	r2, r0
 80008f8:	430a      	orrs	r2, r1
 80008fa:	189b      	adds	r3, r3, r2
 80008fc:	015a      	lsls	r2, r3, #5
 80008fe:	d5b9      	bpl.n	8000874 <__aeabi_fadd+0xb8>
 8000900:	1c6a      	adds	r2, r5, #1
 8000902:	2dfe      	cmp	r5, #254	@ 0xfe
 8000904:	d175      	bne.n	80009f2 <__aeabi_fadd+0x236>
 8000906:	20ff      	movs	r0, #255	@ 0xff
 8000908:	2300      	movs	r3, #0
 800090a:	e7c4      	b.n	8000896 <__aeabi_fadd+0xda>
 800090c:	000c      	movs	r4, r1
 800090e:	0033      	movs	r3, r6
 8000910:	08db      	lsrs	r3, r3, #3
 8000912:	2aff      	cmp	r2, #255	@ 0xff
 8000914:	d146      	bne.n	80009a4 <__aeabi_fadd+0x1e8>
 8000916:	2b00      	cmp	r3, #0
 8000918:	d0f5      	beq.n	8000906 <__aeabi_fadd+0x14a>
 800091a:	2280      	movs	r2, #128	@ 0x80
 800091c:	03d2      	lsls	r2, r2, #15
 800091e:	4313      	orrs	r3, r2
 8000920:	025b      	lsls	r3, r3, #9
 8000922:	20ff      	movs	r0, #255	@ 0xff
 8000924:	0a5b      	lsrs	r3, r3, #9
 8000926:	e7b6      	b.n	8000896 <__aeabi_fadd+0xda>
 8000928:	019f      	lsls	r7, r3, #6
 800092a:	09bf      	lsrs	r7, r7, #6
 800092c:	0038      	movs	r0, r7
 800092e:	f002 fde3 	bl	80034f8 <__clzsi2>
 8000932:	3805      	subs	r0, #5
 8000934:	4087      	lsls	r7, r0
 8000936:	4285      	cmp	r5, r0
 8000938:	dc24      	bgt.n	8000984 <__aeabi_fadd+0x1c8>
 800093a:	003b      	movs	r3, r7
 800093c:	2120      	movs	r1, #32
 800093e:	1b42      	subs	r2, r0, r5
 8000940:	3201      	adds	r2, #1
 8000942:	40d3      	lsrs	r3, r2
 8000944:	1a8a      	subs	r2, r1, r2
 8000946:	4097      	lsls	r7, r2
 8000948:	1e7a      	subs	r2, r7, #1
 800094a:	4197      	sbcs	r7, r2
 800094c:	2200      	movs	r2, #0
 800094e:	433b      	orrs	r3, r7
 8000950:	0759      	lsls	r1, r3, #29
 8000952:	d193      	bne.n	800087c <__aeabi_fadd+0xc0>
 8000954:	e797      	b.n	8000886 <__aeabi_fadd+0xca>
 8000956:	000c      	movs	r4, r1
 8000958:	0033      	movs	r3, r6
 800095a:	08db      	lsrs	r3, r3, #3
 800095c:	e7db      	b.n	8000916 <__aeabi_fadd+0x15a>
 800095e:	2a00      	cmp	r2, #0
 8000960:	d014      	beq.n	800098c <__aeabi_fadd+0x1d0>
 8000962:	1b42      	subs	r2, r0, r5
 8000964:	2d00      	cmp	r5, #0
 8000966:	d14b      	bne.n	8000a00 <__aeabi_fadd+0x244>
 8000968:	2b00      	cmp	r3, #0
 800096a:	d0d0      	beq.n	800090e <__aeabi_fadd+0x152>
 800096c:	1e51      	subs	r1, r2, #1
 800096e:	2a01      	cmp	r2, #1
 8000970:	d100      	bne.n	8000974 <__aeabi_fadd+0x1b8>
 8000972:	e09e      	b.n	8000ab2 <__aeabi_fadd+0x2f6>
 8000974:	2aff      	cmp	r2, #255	@ 0xff
 8000976:	d0ef      	beq.n	8000958 <__aeabi_fadd+0x19c>
 8000978:	000a      	movs	r2, r1
 800097a:	2a1b      	cmp	r2, #27
 800097c:	dd5f      	ble.n	8000a3e <__aeabi_fadd+0x282>
 800097e:	0002      	movs	r2, r0
 8000980:	1c73      	adds	r3, r6, #1
 8000982:	e77b      	b.n	800087c <__aeabi_fadd+0xc0>
 8000984:	4b50      	ldr	r3, [pc, #320]	@ (8000ac8 <__aeabi_fadd+0x30c>)
 8000986:	1a2a      	subs	r2, r5, r0
 8000988:	403b      	ands	r3, r7
 800098a:	e7e1      	b.n	8000950 <__aeabi_fadd+0x194>
 800098c:	21fe      	movs	r1, #254	@ 0xfe
 800098e:	1c6a      	adds	r2, r5, #1
 8000990:	4211      	tst	r1, r2
 8000992:	d13b      	bne.n	8000a0c <__aeabi_fadd+0x250>
 8000994:	2d00      	cmp	r5, #0
 8000996:	d15d      	bne.n	8000a54 <__aeabi_fadd+0x298>
 8000998:	2b00      	cmp	r3, #0
 800099a:	d07f      	beq.n	8000a9c <__aeabi_fadd+0x2e0>
 800099c:	2e00      	cmp	r6, #0
 800099e:	d17f      	bne.n	8000aa0 <__aeabi_fadd+0x2e4>
 80009a0:	2200      	movs	r2, #0
 80009a2:	08db      	lsrs	r3, r3, #3
 80009a4:	025b      	lsls	r3, r3, #9
 80009a6:	0a5b      	lsrs	r3, r3, #9
 80009a8:	b2d0      	uxtb	r0, r2
 80009aa:	e774      	b.n	8000896 <__aeabi_fadd+0xda>
 80009ac:	28ff      	cmp	r0, #255	@ 0xff
 80009ae:	d0d2      	beq.n	8000956 <__aeabi_fadd+0x19a>
 80009b0:	2480      	movs	r4, #128	@ 0x80
 80009b2:	04e4      	lsls	r4, r4, #19
 80009b4:	4323      	orrs	r3, r4
 80009b6:	2401      	movs	r4, #1
 80009b8:	2a1b      	cmp	r2, #27
 80009ba:	dc07      	bgt.n	80009cc <__aeabi_fadd+0x210>
 80009bc:	001c      	movs	r4, r3
 80009be:	2520      	movs	r5, #32
 80009c0:	40d4      	lsrs	r4, r2
 80009c2:	1aaa      	subs	r2, r5, r2
 80009c4:	4093      	lsls	r3, r2
 80009c6:	1e5a      	subs	r2, r3, #1
 80009c8:	4193      	sbcs	r3, r2
 80009ca:	431c      	orrs	r4, r3
 80009cc:	1b33      	subs	r3, r6, r4
 80009ce:	0005      	movs	r5, r0
 80009d0:	000c      	movs	r4, r1
 80009d2:	e74d      	b.n	8000870 <__aeabi_fadd+0xb4>
 80009d4:	1b9f      	subs	r7, r3, r6
 80009d6:	017a      	lsls	r2, r7, #5
 80009d8:	d422      	bmi.n	8000a20 <__aeabi_fadd+0x264>
 80009da:	2f00      	cmp	r7, #0
 80009dc:	d1a6      	bne.n	800092c <__aeabi_fadd+0x170>
 80009de:	2400      	movs	r4, #0
 80009e0:	2000      	movs	r0, #0
 80009e2:	2300      	movs	r3, #0
 80009e4:	e757      	b.n	8000896 <__aeabi_fadd+0xda>
 80009e6:	199b      	adds	r3, r3, r6
 80009e8:	2501      	movs	r5, #1
 80009ea:	3201      	adds	r2, #1
 80009ec:	0159      	lsls	r1, r3, #5
 80009ee:	d400      	bmi.n	80009f2 <__aeabi_fadd+0x236>
 80009f0:	e740      	b.n	8000874 <__aeabi_fadd+0xb8>
 80009f2:	2101      	movs	r1, #1
 80009f4:	4835      	ldr	r0, [pc, #212]	@ (8000acc <__aeabi_fadd+0x310>)
 80009f6:	4019      	ands	r1, r3
 80009f8:	085b      	lsrs	r3, r3, #1
 80009fa:	4003      	ands	r3, r0
 80009fc:	430b      	orrs	r3, r1
 80009fe:	e7a7      	b.n	8000950 <__aeabi_fadd+0x194>
 8000a00:	28ff      	cmp	r0, #255	@ 0xff
 8000a02:	d0a9      	beq.n	8000958 <__aeabi_fadd+0x19c>
 8000a04:	2180      	movs	r1, #128	@ 0x80
 8000a06:	04c9      	lsls	r1, r1, #19
 8000a08:	430b      	orrs	r3, r1
 8000a0a:	e7b6      	b.n	800097a <__aeabi_fadd+0x1be>
 8000a0c:	2aff      	cmp	r2, #255	@ 0xff
 8000a0e:	d100      	bne.n	8000a12 <__aeabi_fadd+0x256>
 8000a10:	e779      	b.n	8000906 <__aeabi_fadd+0x14a>
 8000a12:	199b      	adds	r3, r3, r6
 8000a14:	085b      	lsrs	r3, r3, #1
 8000a16:	0759      	lsls	r1, r3, #29
 8000a18:	d000      	beq.n	8000a1c <__aeabi_fadd+0x260>
 8000a1a:	e72f      	b.n	800087c <__aeabi_fadd+0xc0>
 8000a1c:	08db      	lsrs	r3, r3, #3
 8000a1e:	e7c1      	b.n	80009a4 <__aeabi_fadd+0x1e8>
 8000a20:	000c      	movs	r4, r1
 8000a22:	1af7      	subs	r7, r6, r3
 8000a24:	e782      	b.n	800092c <__aeabi_fadd+0x170>
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d12c      	bne.n	8000a84 <__aeabi_fadd+0x2c8>
 8000a2a:	2e00      	cmp	r6, #0
 8000a2c:	d193      	bne.n	8000956 <__aeabi_fadd+0x19a>
 8000a2e:	2380      	movs	r3, #128	@ 0x80
 8000a30:	2400      	movs	r4, #0
 8000a32:	20ff      	movs	r0, #255	@ 0xff
 8000a34:	03db      	lsls	r3, r3, #15
 8000a36:	e72e      	b.n	8000896 <__aeabi_fadd+0xda>
 8000a38:	2501      	movs	r5, #1
 8000a3a:	1b9b      	subs	r3, r3, r6
 8000a3c:	e718      	b.n	8000870 <__aeabi_fadd+0xb4>
 8000a3e:	0019      	movs	r1, r3
 8000a40:	2520      	movs	r5, #32
 8000a42:	40d1      	lsrs	r1, r2
 8000a44:	1aaa      	subs	r2, r5, r2
 8000a46:	4093      	lsls	r3, r2
 8000a48:	1e5a      	subs	r2, r3, #1
 8000a4a:	4193      	sbcs	r3, r2
 8000a4c:	430b      	orrs	r3, r1
 8000a4e:	0005      	movs	r5, r0
 8000a50:	199b      	adds	r3, r3, r6
 8000a52:	e753      	b.n	80008fc <__aeabi_fadd+0x140>
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d100      	bne.n	8000a5a <__aeabi_fadd+0x29e>
 8000a58:	e77e      	b.n	8000958 <__aeabi_fadd+0x19c>
 8000a5a:	2e00      	cmp	r6, #0
 8000a5c:	d100      	bne.n	8000a60 <__aeabi_fadd+0x2a4>
 8000a5e:	e77c      	b.n	800095a <__aeabi_fadd+0x19e>
 8000a60:	2280      	movs	r2, #128	@ 0x80
 8000a62:	03d2      	lsls	r2, r2, #15
 8000a64:	4591      	cmp	r9, r2
 8000a66:	d302      	bcc.n	8000a6e <__aeabi_fadd+0x2b2>
 8000a68:	4594      	cmp	ip, r2
 8000a6a:	d200      	bcs.n	8000a6e <__aeabi_fadd+0x2b2>
 8000a6c:	0033      	movs	r3, r6
 8000a6e:	08db      	lsrs	r3, r3, #3
 8000a70:	e753      	b.n	800091a <__aeabi_fadd+0x15e>
 8000a72:	000c      	movs	r4, r1
 8000a74:	1af3      	subs	r3, r6, r3
 8000a76:	3501      	adds	r5, #1
 8000a78:	e6fa      	b.n	8000870 <__aeabi_fadd+0xb4>
 8000a7a:	2e00      	cmp	r6, #0
 8000a7c:	d0af      	beq.n	80009de <__aeabi_fadd+0x222>
 8000a7e:	000c      	movs	r4, r1
 8000a80:	0033      	movs	r3, r6
 8000a82:	e78d      	b.n	80009a0 <__aeabi_fadd+0x1e4>
 8000a84:	2e00      	cmp	r6, #0
 8000a86:	d100      	bne.n	8000a8a <__aeabi_fadd+0x2ce>
 8000a88:	e767      	b.n	800095a <__aeabi_fadd+0x19e>
 8000a8a:	2280      	movs	r2, #128	@ 0x80
 8000a8c:	03d2      	lsls	r2, r2, #15
 8000a8e:	4591      	cmp	r9, r2
 8000a90:	d3ed      	bcc.n	8000a6e <__aeabi_fadd+0x2b2>
 8000a92:	4594      	cmp	ip, r2
 8000a94:	d2eb      	bcs.n	8000a6e <__aeabi_fadd+0x2b2>
 8000a96:	000c      	movs	r4, r1
 8000a98:	0033      	movs	r3, r6
 8000a9a:	e7e8      	b.n	8000a6e <__aeabi_fadd+0x2b2>
 8000a9c:	0033      	movs	r3, r6
 8000a9e:	e77f      	b.n	80009a0 <__aeabi_fadd+0x1e4>
 8000aa0:	199b      	adds	r3, r3, r6
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	0159      	lsls	r1, r3, #5
 8000aa6:	d5b9      	bpl.n	8000a1c <__aeabi_fadd+0x260>
 8000aa8:	4a07      	ldr	r2, [pc, #28]	@ (8000ac8 <__aeabi_fadd+0x30c>)
 8000aaa:	4013      	ands	r3, r2
 8000aac:	08db      	lsrs	r3, r3, #3
 8000aae:	2201      	movs	r2, #1
 8000ab0:	e778      	b.n	80009a4 <__aeabi_fadd+0x1e8>
 8000ab2:	199b      	adds	r3, r3, r6
 8000ab4:	3201      	adds	r2, #1
 8000ab6:	3501      	adds	r5, #1
 8000ab8:	0159      	lsls	r1, r3, #5
 8000aba:	d49a      	bmi.n	80009f2 <__aeabi_fadd+0x236>
 8000abc:	e6da      	b.n	8000874 <__aeabi_fadd+0xb8>
 8000abe:	1e03      	subs	r3, r0, #0
 8000ac0:	d08d      	beq.n	80009de <__aeabi_fadd+0x222>
 8000ac2:	08db      	lsrs	r3, r3, #3
 8000ac4:	e76e      	b.n	80009a4 <__aeabi_fadd+0x1e8>
 8000ac6:	46c0      	nop			@ (mov r8, r8)
 8000ac8:	fbffffff 	.word	0xfbffffff
 8000acc:	7dffffff 	.word	0x7dffffff

08000ad0 <__aeabi_fdiv>:
 8000ad0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ad2:	464f      	mov	r7, r9
 8000ad4:	4646      	mov	r6, r8
 8000ad6:	46d6      	mov	lr, sl
 8000ad8:	0244      	lsls	r4, r0, #9
 8000ada:	b5c0      	push	{r6, r7, lr}
 8000adc:	0047      	lsls	r7, r0, #1
 8000ade:	1c0e      	adds	r6, r1, #0
 8000ae0:	0a64      	lsrs	r4, r4, #9
 8000ae2:	0e3f      	lsrs	r7, r7, #24
 8000ae4:	0fc5      	lsrs	r5, r0, #31
 8000ae6:	2f00      	cmp	r7, #0
 8000ae8:	d03c      	beq.n	8000b64 <__aeabi_fdiv+0x94>
 8000aea:	2fff      	cmp	r7, #255	@ 0xff
 8000aec:	d042      	beq.n	8000b74 <__aeabi_fdiv+0xa4>
 8000aee:	2300      	movs	r3, #0
 8000af0:	2280      	movs	r2, #128	@ 0x80
 8000af2:	4699      	mov	r9, r3
 8000af4:	469a      	mov	sl, r3
 8000af6:	00e4      	lsls	r4, r4, #3
 8000af8:	04d2      	lsls	r2, r2, #19
 8000afa:	4314      	orrs	r4, r2
 8000afc:	3f7f      	subs	r7, #127	@ 0x7f
 8000afe:	0273      	lsls	r3, r6, #9
 8000b00:	0a5b      	lsrs	r3, r3, #9
 8000b02:	4698      	mov	r8, r3
 8000b04:	0073      	lsls	r3, r6, #1
 8000b06:	0e1b      	lsrs	r3, r3, #24
 8000b08:	0ff6      	lsrs	r6, r6, #31
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d01b      	beq.n	8000b46 <__aeabi_fdiv+0x76>
 8000b0e:	2bff      	cmp	r3, #255	@ 0xff
 8000b10:	d013      	beq.n	8000b3a <__aeabi_fdiv+0x6a>
 8000b12:	4642      	mov	r2, r8
 8000b14:	2180      	movs	r1, #128	@ 0x80
 8000b16:	00d2      	lsls	r2, r2, #3
 8000b18:	04c9      	lsls	r1, r1, #19
 8000b1a:	4311      	orrs	r1, r2
 8000b1c:	4688      	mov	r8, r1
 8000b1e:	2000      	movs	r0, #0
 8000b20:	3b7f      	subs	r3, #127	@ 0x7f
 8000b22:	0029      	movs	r1, r5
 8000b24:	1aff      	subs	r7, r7, r3
 8000b26:	464b      	mov	r3, r9
 8000b28:	4071      	eors	r1, r6
 8000b2a:	b2c9      	uxtb	r1, r1
 8000b2c:	2b0f      	cmp	r3, #15
 8000b2e:	d900      	bls.n	8000b32 <__aeabi_fdiv+0x62>
 8000b30:	e0b5      	b.n	8000c9e <__aeabi_fdiv+0x1ce>
 8000b32:	4a74      	ldr	r2, [pc, #464]	@ (8000d04 <__aeabi_fdiv+0x234>)
 8000b34:	009b      	lsls	r3, r3, #2
 8000b36:	58d3      	ldr	r3, [r2, r3]
 8000b38:	469f      	mov	pc, r3
 8000b3a:	4643      	mov	r3, r8
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d13f      	bne.n	8000bc0 <__aeabi_fdiv+0xf0>
 8000b40:	3fff      	subs	r7, #255	@ 0xff
 8000b42:	3302      	adds	r3, #2
 8000b44:	e003      	b.n	8000b4e <__aeabi_fdiv+0x7e>
 8000b46:	4643      	mov	r3, r8
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d12d      	bne.n	8000ba8 <__aeabi_fdiv+0xd8>
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	0029      	movs	r1, r5
 8000b50:	464a      	mov	r2, r9
 8000b52:	4071      	eors	r1, r6
 8000b54:	b2c9      	uxtb	r1, r1
 8000b56:	431a      	orrs	r2, r3
 8000b58:	2a0e      	cmp	r2, #14
 8000b5a:	d838      	bhi.n	8000bce <__aeabi_fdiv+0xfe>
 8000b5c:	486a      	ldr	r0, [pc, #424]	@ (8000d08 <__aeabi_fdiv+0x238>)
 8000b5e:	0092      	lsls	r2, r2, #2
 8000b60:	5882      	ldr	r2, [r0, r2]
 8000b62:	4697      	mov	pc, r2
 8000b64:	2c00      	cmp	r4, #0
 8000b66:	d113      	bne.n	8000b90 <__aeabi_fdiv+0xc0>
 8000b68:	2304      	movs	r3, #4
 8000b6a:	4699      	mov	r9, r3
 8000b6c:	3b03      	subs	r3, #3
 8000b6e:	2700      	movs	r7, #0
 8000b70:	469a      	mov	sl, r3
 8000b72:	e7c4      	b.n	8000afe <__aeabi_fdiv+0x2e>
 8000b74:	2c00      	cmp	r4, #0
 8000b76:	d105      	bne.n	8000b84 <__aeabi_fdiv+0xb4>
 8000b78:	2308      	movs	r3, #8
 8000b7a:	4699      	mov	r9, r3
 8000b7c:	3b06      	subs	r3, #6
 8000b7e:	27ff      	movs	r7, #255	@ 0xff
 8000b80:	469a      	mov	sl, r3
 8000b82:	e7bc      	b.n	8000afe <__aeabi_fdiv+0x2e>
 8000b84:	230c      	movs	r3, #12
 8000b86:	4699      	mov	r9, r3
 8000b88:	3b09      	subs	r3, #9
 8000b8a:	27ff      	movs	r7, #255	@ 0xff
 8000b8c:	469a      	mov	sl, r3
 8000b8e:	e7b6      	b.n	8000afe <__aeabi_fdiv+0x2e>
 8000b90:	0020      	movs	r0, r4
 8000b92:	f002 fcb1 	bl	80034f8 <__clzsi2>
 8000b96:	2776      	movs	r7, #118	@ 0x76
 8000b98:	1f43      	subs	r3, r0, #5
 8000b9a:	409c      	lsls	r4, r3
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	427f      	negs	r7, r7
 8000ba0:	4699      	mov	r9, r3
 8000ba2:	469a      	mov	sl, r3
 8000ba4:	1a3f      	subs	r7, r7, r0
 8000ba6:	e7aa      	b.n	8000afe <__aeabi_fdiv+0x2e>
 8000ba8:	4640      	mov	r0, r8
 8000baa:	f002 fca5 	bl	80034f8 <__clzsi2>
 8000bae:	4642      	mov	r2, r8
 8000bb0:	1f43      	subs	r3, r0, #5
 8000bb2:	409a      	lsls	r2, r3
 8000bb4:	2376      	movs	r3, #118	@ 0x76
 8000bb6:	425b      	negs	r3, r3
 8000bb8:	1a1b      	subs	r3, r3, r0
 8000bba:	4690      	mov	r8, r2
 8000bbc:	2000      	movs	r0, #0
 8000bbe:	e7b0      	b.n	8000b22 <__aeabi_fdiv+0x52>
 8000bc0:	2303      	movs	r3, #3
 8000bc2:	464a      	mov	r2, r9
 8000bc4:	431a      	orrs	r2, r3
 8000bc6:	4691      	mov	r9, r2
 8000bc8:	2003      	movs	r0, #3
 8000bca:	33fc      	adds	r3, #252	@ 0xfc
 8000bcc:	e7a9      	b.n	8000b22 <__aeabi_fdiv+0x52>
 8000bce:	000d      	movs	r5, r1
 8000bd0:	20ff      	movs	r0, #255	@ 0xff
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	05c0      	lsls	r0, r0, #23
 8000bd6:	07ed      	lsls	r5, r5, #31
 8000bd8:	4310      	orrs	r0, r2
 8000bda:	4328      	orrs	r0, r5
 8000bdc:	bce0      	pop	{r5, r6, r7}
 8000bde:	46ba      	mov	sl, r7
 8000be0:	46b1      	mov	r9, r6
 8000be2:	46a8      	mov	r8, r5
 8000be4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000be6:	000d      	movs	r5, r1
 8000be8:	2000      	movs	r0, #0
 8000bea:	2200      	movs	r2, #0
 8000bec:	e7f2      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000bee:	4653      	mov	r3, sl
 8000bf0:	2b02      	cmp	r3, #2
 8000bf2:	d0ed      	beq.n	8000bd0 <__aeabi_fdiv+0x100>
 8000bf4:	2b03      	cmp	r3, #3
 8000bf6:	d033      	beq.n	8000c60 <__aeabi_fdiv+0x190>
 8000bf8:	46a0      	mov	r8, r4
 8000bfa:	2b01      	cmp	r3, #1
 8000bfc:	d105      	bne.n	8000c0a <__aeabi_fdiv+0x13a>
 8000bfe:	2000      	movs	r0, #0
 8000c00:	2200      	movs	r2, #0
 8000c02:	e7e7      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000c04:	0035      	movs	r5, r6
 8000c06:	2803      	cmp	r0, #3
 8000c08:	d07a      	beq.n	8000d00 <__aeabi_fdiv+0x230>
 8000c0a:	003b      	movs	r3, r7
 8000c0c:	337f      	adds	r3, #127	@ 0x7f
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	dd2d      	ble.n	8000c6e <__aeabi_fdiv+0x19e>
 8000c12:	4642      	mov	r2, r8
 8000c14:	0752      	lsls	r2, r2, #29
 8000c16:	d007      	beq.n	8000c28 <__aeabi_fdiv+0x158>
 8000c18:	220f      	movs	r2, #15
 8000c1a:	4641      	mov	r1, r8
 8000c1c:	400a      	ands	r2, r1
 8000c1e:	2a04      	cmp	r2, #4
 8000c20:	d002      	beq.n	8000c28 <__aeabi_fdiv+0x158>
 8000c22:	2204      	movs	r2, #4
 8000c24:	4694      	mov	ip, r2
 8000c26:	44e0      	add	r8, ip
 8000c28:	4642      	mov	r2, r8
 8000c2a:	0112      	lsls	r2, r2, #4
 8000c2c:	d505      	bpl.n	8000c3a <__aeabi_fdiv+0x16a>
 8000c2e:	4642      	mov	r2, r8
 8000c30:	4b36      	ldr	r3, [pc, #216]	@ (8000d0c <__aeabi_fdiv+0x23c>)
 8000c32:	401a      	ands	r2, r3
 8000c34:	003b      	movs	r3, r7
 8000c36:	4690      	mov	r8, r2
 8000c38:	3380      	adds	r3, #128	@ 0x80
 8000c3a:	2bfe      	cmp	r3, #254	@ 0xfe
 8000c3c:	dcc8      	bgt.n	8000bd0 <__aeabi_fdiv+0x100>
 8000c3e:	4642      	mov	r2, r8
 8000c40:	0192      	lsls	r2, r2, #6
 8000c42:	0a52      	lsrs	r2, r2, #9
 8000c44:	b2d8      	uxtb	r0, r3
 8000c46:	e7c5      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000c48:	2280      	movs	r2, #128	@ 0x80
 8000c4a:	2500      	movs	r5, #0
 8000c4c:	20ff      	movs	r0, #255	@ 0xff
 8000c4e:	03d2      	lsls	r2, r2, #15
 8000c50:	e7c0      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000c52:	2280      	movs	r2, #128	@ 0x80
 8000c54:	03d2      	lsls	r2, r2, #15
 8000c56:	4214      	tst	r4, r2
 8000c58:	d002      	beq.n	8000c60 <__aeabi_fdiv+0x190>
 8000c5a:	4643      	mov	r3, r8
 8000c5c:	4213      	tst	r3, r2
 8000c5e:	d049      	beq.n	8000cf4 <__aeabi_fdiv+0x224>
 8000c60:	2280      	movs	r2, #128	@ 0x80
 8000c62:	03d2      	lsls	r2, r2, #15
 8000c64:	4322      	orrs	r2, r4
 8000c66:	0252      	lsls	r2, r2, #9
 8000c68:	20ff      	movs	r0, #255	@ 0xff
 8000c6a:	0a52      	lsrs	r2, r2, #9
 8000c6c:	e7b2      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000c6e:	2201      	movs	r2, #1
 8000c70:	1ad3      	subs	r3, r2, r3
 8000c72:	2b1b      	cmp	r3, #27
 8000c74:	dcc3      	bgt.n	8000bfe <__aeabi_fdiv+0x12e>
 8000c76:	4642      	mov	r2, r8
 8000c78:	40da      	lsrs	r2, r3
 8000c7a:	4643      	mov	r3, r8
 8000c7c:	379e      	adds	r7, #158	@ 0x9e
 8000c7e:	40bb      	lsls	r3, r7
 8000c80:	1e59      	subs	r1, r3, #1
 8000c82:	418b      	sbcs	r3, r1
 8000c84:	431a      	orrs	r2, r3
 8000c86:	0753      	lsls	r3, r2, #29
 8000c88:	d004      	beq.n	8000c94 <__aeabi_fdiv+0x1c4>
 8000c8a:	230f      	movs	r3, #15
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	2b04      	cmp	r3, #4
 8000c90:	d000      	beq.n	8000c94 <__aeabi_fdiv+0x1c4>
 8000c92:	3204      	adds	r2, #4
 8000c94:	0153      	lsls	r3, r2, #5
 8000c96:	d529      	bpl.n	8000cec <__aeabi_fdiv+0x21c>
 8000c98:	2001      	movs	r0, #1
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	e79a      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000c9e:	4642      	mov	r2, r8
 8000ca0:	0163      	lsls	r3, r4, #5
 8000ca2:	0155      	lsls	r5, r2, #5
 8000ca4:	42ab      	cmp	r3, r5
 8000ca6:	d215      	bcs.n	8000cd4 <__aeabi_fdiv+0x204>
 8000ca8:	201b      	movs	r0, #27
 8000caa:	2200      	movs	r2, #0
 8000cac:	3f01      	subs	r7, #1
 8000cae:	2601      	movs	r6, #1
 8000cb0:	001c      	movs	r4, r3
 8000cb2:	0052      	lsls	r2, r2, #1
 8000cb4:	005b      	lsls	r3, r3, #1
 8000cb6:	2c00      	cmp	r4, #0
 8000cb8:	db01      	blt.n	8000cbe <__aeabi_fdiv+0x1ee>
 8000cba:	429d      	cmp	r5, r3
 8000cbc:	d801      	bhi.n	8000cc2 <__aeabi_fdiv+0x1f2>
 8000cbe:	1b5b      	subs	r3, r3, r5
 8000cc0:	4332      	orrs	r2, r6
 8000cc2:	3801      	subs	r0, #1
 8000cc4:	2800      	cmp	r0, #0
 8000cc6:	d1f3      	bne.n	8000cb0 <__aeabi_fdiv+0x1e0>
 8000cc8:	1e58      	subs	r0, r3, #1
 8000cca:	4183      	sbcs	r3, r0
 8000ccc:	4313      	orrs	r3, r2
 8000cce:	4698      	mov	r8, r3
 8000cd0:	000d      	movs	r5, r1
 8000cd2:	e79a      	b.n	8000c0a <__aeabi_fdiv+0x13a>
 8000cd4:	201a      	movs	r0, #26
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	1b5b      	subs	r3, r3, r5
 8000cda:	e7e8      	b.n	8000cae <__aeabi_fdiv+0x1de>
 8000cdc:	3b02      	subs	r3, #2
 8000cde:	425a      	negs	r2, r3
 8000ce0:	4153      	adcs	r3, r2
 8000ce2:	425b      	negs	r3, r3
 8000ce4:	0035      	movs	r5, r6
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	b2d8      	uxtb	r0, r3
 8000cea:	e773      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000cec:	0192      	lsls	r2, r2, #6
 8000cee:	2000      	movs	r0, #0
 8000cf0:	0a52      	lsrs	r2, r2, #9
 8000cf2:	e76f      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000cf4:	431a      	orrs	r2, r3
 8000cf6:	0252      	lsls	r2, r2, #9
 8000cf8:	0035      	movs	r5, r6
 8000cfa:	20ff      	movs	r0, #255	@ 0xff
 8000cfc:	0a52      	lsrs	r2, r2, #9
 8000cfe:	e769      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000d00:	4644      	mov	r4, r8
 8000d02:	e7ad      	b.n	8000c60 <__aeabi_fdiv+0x190>
 8000d04:	08010600 	.word	0x08010600
 8000d08:	08010640 	.word	0x08010640
 8000d0c:	f7ffffff 	.word	0xf7ffffff
>>>>>>> main

08000d10 <__eqsf2>:
 8000d10:	b570      	push	{r4, r5, r6, lr}
 8000d12:	0042      	lsls	r2, r0, #1
 8000d14:	024e      	lsls	r6, r1, #9
 8000d16:	004c      	lsls	r4, r1, #1
 8000d18:	0245      	lsls	r5, r0, #9
 8000d1a:	0a6d      	lsrs	r5, r5, #9
 8000d1c:	0e12      	lsrs	r2, r2, #24
 8000d1e:	0fc3      	lsrs	r3, r0, #31
 8000d20:	0a76      	lsrs	r6, r6, #9
 8000d22:	0e24      	lsrs	r4, r4, #24
 8000d24:	0fc9      	lsrs	r1, r1, #31
 8000d26:	2aff      	cmp	r2, #255	@ 0xff
 8000d28:	d010      	beq.n	8000d4c <__eqsf2+0x3c>
 8000d2a:	2cff      	cmp	r4, #255	@ 0xff
 8000d2c:	d00c      	beq.n	8000d48 <__eqsf2+0x38>
 8000d2e:	2001      	movs	r0, #1
 8000d30:	42a2      	cmp	r2, r4
 8000d32:	d10a      	bne.n	8000d4a <__eqsf2+0x3a>
 8000d34:	42b5      	cmp	r5, r6
 8000d36:	d108      	bne.n	8000d4a <__eqsf2+0x3a>
 8000d38:	428b      	cmp	r3, r1
 8000d3a:	d00f      	beq.n	8000d5c <__eqsf2+0x4c>
 8000d3c:	2a00      	cmp	r2, #0
 8000d3e:	d104      	bne.n	8000d4a <__eqsf2+0x3a>
 8000d40:	0028      	movs	r0, r5
 8000d42:	1e43      	subs	r3, r0, #1
 8000d44:	4198      	sbcs	r0, r3
 8000d46:	e000      	b.n	8000d4a <__eqsf2+0x3a>
 8000d48:	2001      	movs	r0, #1
 8000d4a:	bd70      	pop	{r4, r5, r6, pc}
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	2cff      	cmp	r4, #255	@ 0xff
 8000d50:	d1fb      	bne.n	8000d4a <__eqsf2+0x3a>
 8000d52:	4335      	orrs	r5, r6
 8000d54:	d1f9      	bne.n	8000d4a <__eqsf2+0x3a>
 8000d56:	404b      	eors	r3, r1
 8000d58:	0018      	movs	r0, r3
 8000d5a:	e7f6      	b.n	8000d4a <__eqsf2+0x3a>
 8000d5c:	2000      	movs	r0, #0
 8000d5e:	e7f4      	b.n	8000d4a <__eqsf2+0x3a>

08000d60 <__gesf2>:
 8000d60:	b530      	push	{r4, r5, lr}
 8000d62:	0042      	lsls	r2, r0, #1
 8000d64:	0244      	lsls	r4, r0, #9
 8000d66:	024d      	lsls	r5, r1, #9
 8000d68:	0fc3      	lsrs	r3, r0, #31
 8000d6a:	0048      	lsls	r0, r1, #1
 8000d6c:	0a64      	lsrs	r4, r4, #9
 8000d6e:	0e12      	lsrs	r2, r2, #24
 8000d70:	0a6d      	lsrs	r5, r5, #9
 8000d72:	0e00      	lsrs	r0, r0, #24
 8000d74:	0fc9      	lsrs	r1, r1, #31
 8000d76:	2aff      	cmp	r2, #255	@ 0xff
 8000d78:	d019      	beq.n	8000dae <__gesf2+0x4e>
 8000d7a:	28ff      	cmp	r0, #255	@ 0xff
 8000d7c:	d00b      	beq.n	8000d96 <__gesf2+0x36>
 8000d7e:	2a00      	cmp	r2, #0
 8000d80:	d11e      	bne.n	8000dc0 <__gesf2+0x60>
 8000d82:	2800      	cmp	r0, #0
 8000d84:	d10b      	bne.n	8000d9e <__gesf2+0x3e>
 8000d86:	2d00      	cmp	r5, #0
 8000d88:	d027      	beq.n	8000dda <__gesf2+0x7a>
 8000d8a:	2c00      	cmp	r4, #0
 8000d8c:	d134      	bne.n	8000df8 <__gesf2+0x98>
 8000d8e:	2900      	cmp	r1, #0
 8000d90:	d02f      	beq.n	8000df2 <__gesf2+0x92>
 8000d92:	0008      	movs	r0, r1
 8000d94:	bd30      	pop	{r4, r5, pc}
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d128      	bne.n	8000dec <__gesf2+0x8c>
 8000d9a:	2a00      	cmp	r2, #0
 8000d9c:	d101      	bne.n	8000da2 <__gesf2+0x42>
 8000d9e:	2c00      	cmp	r4, #0
 8000da0:	d0f5      	beq.n	8000d8e <__gesf2+0x2e>
 8000da2:	428b      	cmp	r3, r1
 8000da4:	d107      	bne.n	8000db6 <__gesf2+0x56>
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d023      	beq.n	8000df2 <__gesf2+0x92>
 8000daa:	0018      	movs	r0, r3
 8000dac:	e7f2      	b.n	8000d94 <__gesf2+0x34>
 8000dae:	2c00      	cmp	r4, #0
 8000db0:	d11c      	bne.n	8000dec <__gesf2+0x8c>
 8000db2:	28ff      	cmp	r0, #255	@ 0xff
 8000db4:	d014      	beq.n	8000de0 <__gesf2+0x80>
 8000db6:	1e58      	subs	r0, r3, #1
 8000db8:	2302      	movs	r3, #2
 8000dba:	4018      	ands	r0, r3
 8000dbc:	3801      	subs	r0, #1
 8000dbe:	e7e9      	b.n	8000d94 <__gesf2+0x34>
 8000dc0:	2800      	cmp	r0, #0
 8000dc2:	d0f8      	beq.n	8000db6 <__gesf2+0x56>
 8000dc4:	428b      	cmp	r3, r1
 8000dc6:	d1f6      	bne.n	8000db6 <__gesf2+0x56>
 8000dc8:	4282      	cmp	r2, r0
 8000dca:	dcf4      	bgt.n	8000db6 <__gesf2+0x56>
 8000dcc:	dbeb      	blt.n	8000da6 <__gesf2+0x46>
 8000dce:	42ac      	cmp	r4, r5
 8000dd0:	d8f1      	bhi.n	8000db6 <__gesf2+0x56>
 8000dd2:	2000      	movs	r0, #0
 8000dd4:	42ac      	cmp	r4, r5
 8000dd6:	d2dd      	bcs.n	8000d94 <__gesf2+0x34>
 8000dd8:	e7e5      	b.n	8000da6 <__gesf2+0x46>
 8000dda:	2c00      	cmp	r4, #0
 8000ddc:	d0da      	beq.n	8000d94 <__gesf2+0x34>
 8000dde:	e7ea      	b.n	8000db6 <__gesf2+0x56>
 8000de0:	2d00      	cmp	r5, #0
 8000de2:	d103      	bne.n	8000dec <__gesf2+0x8c>
 8000de4:	428b      	cmp	r3, r1
 8000de6:	d1e6      	bne.n	8000db6 <__gesf2+0x56>
 8000de8:	2000      	movs	r0, #0
 8000dea:	e7d3      	b.n	8000d94 <__gesf2+0x34>
 8000dec:	2002      	movs	r0, #2
 8000dee:	4240      	negs	r0, r0
 8000df0:	e7d0      	b.n	8000d94 <__gesf2+0x34>
 8000df2:	2001      	movs	r0, #1
 8000df4:	4240      	negs	r0, r0
 8000df6:	e7cd      	b.n	8000d94 <__gesf2+0x34>
 8000df8:	428b      	cmp	r3, r1
 8000dfa:	d0e8      	beq.n	8000dce <__gesf2+0x6e>
 8000dfc:	e7db      	b.n	8000db6 <__gesf2+0x56>
 8000dfe:	46c0      	nop			@ (mov r8, r8)

08000e00 <__lesf2>:
 8000e00:	b530      	push	{r4, r5, lr}
 8000e02:	0042      	lsls	r2, r0, #1
 8000e04:	0244      	lsls	r4, r0, #9
 8000e06:	024d      	lsls	r5, r1, #9
 8000e08:	0fc3      	lsrs	r3, r0, #31
 8000e0a:	0048      	lsls	r0, r1, #1
 8000e0c:	0a64      	lsrs	r4, r4, #9
 8000e0e:	0e12      	lsrs	r2, r2, #24
 8000e10:	0a6d      	lsrs	r5, r5, #9
 8000e12:	0e00      	lsrs	r0, r0, #24
 8000e14:	0fc9      	lsrs	r1, r1, #31
 8000e16:	2aff      	cmp	r2, #255	@ 0xff
 8000e18:	d01a      	beq.n	8000e50 <__lesf2+0x50>
 8000e1a:	28ff      	cmp	r0, #255	@ 0xff
 8000e1c:	d00e      	beq.n	8000e3c <__lesf2+0x3c>
 8000e1e:	2a00      	cmp	r2, #0
 8000e20:	d11e      	bne.n	8000e60 <__lesf2+0x60>
 8000e22:	2800      	cmp	r0, #0
 8000e24:	d10e      	bne.n	8000e44 <__lesf2+0x44>
 8000e26:	2d00      	cmp	r5, #0
 8000e28:	d02a      	beq.n	8000e80 <__lesf2+0x80>
 8000e2a:	2c00      	cmp	r4, #0
 8000e2c:	d00c      	beq.n	8000e48 <__lesf2+0x48>
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d01d      	beq.n	8000e6e <__lesf2+0x6e>
 8000e32:	1e58      	subs	r0, r3, #1
 8000e34:	2302      	movs	r3, #2
 8000e36:	4018      	ands	r0, r3
 8000e38:	3801      	subs	r0, #1
 8000e3a:	e010      	b.n	8000e5e <__lesf2+0x5e>
 8000e3c:	2d00      	cmp	r5, #0
 8000e3e:	d10d      	bne.n	8000e5c <__lesf2+0x5c>
 8000e40:	2a00      	cmp	r2, #0
 8000e42:	d120      	bne.n	8000e86 <__lesf2+0x86>
 8000e44:	2c00      	cmp	r4, #0
 8000e46:	d11e      	bne.n	8000e86 <__lesf2+0x86>
 8000e48:	2900      	cmp	r1, #0
 8000e4a:	d023      	beq.n	8000e94 <__lesf2+0x94>
 8000e4c:	0008      	movs	r0, r1
 8000e4e:	e006      	b.n	8000e5e <__lesf2+0x5e>
 8000e50:	2c00      	cmp	r4, #0
 8000e52:	d103      	bne.n	8000e5c <__lesf2+0x5c>
 8000e54:	28ff      	cmp	r0, #255	@ 0xff
 8000e56:	d1ec      	bne.n	8000e32 <__lesf2+0x32>
 8000e58:	2d00      	cmp	r5, #0
 8000e5a:	d017      	beq.n	8000e8c <__lesf2+0x8c>
 8000e5c:	2002      	movs	r0, #2
 8000e5e:	bd30      	pop	{r4, r5, pc}
 8000e60:	2800      	cmp	r0, #0
 8000e62:	d0e6      	beq.n	8000e32 <__lesf2+0x32>
 8000e64:	428b      	cmp	r3, r1
 8000e66:	d1e4      	bne.n	8000e32 <__lesf2+0x32>
 8000e68:	4282      	cmp	r2, r0
 8000e6a:	dce2      	bgt.n	8000e32 <__lesf2+0x32>
 8000e6c:	db04      	blt.n	8000e78 <__lesf2+0x78>
 8000e6e:	42ac      	cmp	r4, r5
 8000e70:	d8df      	bhi.n	8000e32 <__lesf2+0x32>
 8000e72:	2000      	movs	r0, #0
 8000e74:	42ac      	cmp	r4, r5
 8000e76:	d2f2      	bcs.n	8000e5e <__lesf2+0x5e>
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d00b      	beq.n	8000e94 <__lesf2+0x94>
 8000e7c:	0018      	movs	r0, r3
 8000e7e:	e7ee      	b.n	8000e5e <__lesf2+0x5e>
 8000e80:	2c00      	cmp	r4, #0
 8000e82:	d0ec      	beq.n	8000e5e <__lesf2+0x5e>
 8000e84:	e7d5      	b.n	8000e32 <__lesf2+0x32>
 8000e86:	428b      	cmp	r3, r1
 8000e88:	d1d3      	bne.n	8000e32 <__lesf2+0x32>
 8000e8a:	e7f5      	b.n	8000e78 <__lesf2+0x78>
 8000e8c:	2000      	movs	r0, #0
 8000e8e:	428b      	cmp	r3, r1
 8000e90:	d0e5      	beq.n	8000e5e <__lesf2+0x5e>
 8000e92:	e7ce      	b.n	8000e32 <__lesf2+0x32>
 8000e94:	2001      	movs	r0, #1
 8000e96:	4240      	negs	r0, r0
 8000e98:	e7e1      	b.n	8000e5e <__lesf2+0x5e>
 8000e9a:	46c0      	nop			@ (mov r8, r8)

08000e9c <__aeabi_fmul>:
 8000e9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e9e:	464f      	mov	r7, r9
 8000ea0:	4646      	mov	r6, r8
 8000ea2:	46d6      	mov	lr, sl
 8000ea4:	0243      	lsls	r3, r0, #9
 8000ea6:	0a5b      	lsrs	r3, r3, #9
 8000ea8:	0045      	lsls	r5, r0, #1
 8000eaa:	b5c0      	push	{r6, r7, lr}
 8000eac:	4699      	mov	r9, r3
 8000eae:	1c0f      	adds	r7, r1, #0
 8000eb0:	0e2d      	lsrs	r5, r5, #24
 8000eb2:	0fc6      	lsrs	r6, r0, #31
 8000eb4:	2d00      	cmp	r5, #0
 8000eb6:	d100      	bne.n	8000eba <__aeabi_fmul+0x1e>
 8000eb8:	e088      	b.n	8000fcc <__aeabi_fmul+0x130>
 8000eba:	2dff      	cmp	r5, #255	@ 0xff
 8000ebc:	d100      	bne.n	8000ec0 <__aeabi_fmul+0x24>
 8000ebe:	e08d      	b.n	8000fdc <__aeabi_fmul+0x140>
 8000ec0:	2280      	movs	r2, #128	@ 0x80
 8000ec2:	00db      	lsls	r3, r3, #3
 8000ec4:	04d2      	lsls	r2, r2, #19
 8000ec6:	431a      	orrs	r2, r3
 8000ec8:	2300      	movs	r3, #0
 8000eca:	4691      	mov	r9, r2
 8000ecc:	4698      	mov	r8, r3
 8000ece:	469a      	mov	sl, r3
 8000ed0:	3d7f      	subs	r5, #127	@ 0x7f
 8000ed2:	027c      	lsls	r4, r7, #9
 8000ed4:	007b      	lsls	r3, r7, #1
 8000ed6:	0a64      	lsrs	r4, r4, #9
 8000ed8:	0e1b      	lsrs	r3, r3, #24
 8000eda:	0fff      	lsrs	r7, r7, #31
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d068      	beq.n	8000fb2 <__aeabi_fmul+0x116>
 8000ee0:	2bff      	cmp	r3, #255	@ 0xff
 8000ee2:	d021      	beq.n	8000f28 <__aeabi_fmul+0x8c>
 8000ee4:	2280      	movs	r2, #128	@ 0x80
 8000ee6:	00e4      	lsls	r4, r4, #3
 8000ee8:	04d2      	lsls	r2, r2, #19
 8000eea:	4314      	orrs	r4, r2
 8000eec:	4642      	mov	r2, r8
 8000eee:	3b7f      	subs	r3, #127	@ 0x7f
 8000ef0:	195b      	adds	r3, r3, r5
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	1c5d      	adds	r5, r3, #1
 8000ef6:	2a0a      	cmp	r2, #10
 8000ef8:	dc2e      	bgt.n	8000f58 <__aeabi_fmul+0xbc>
 8000efa:	407e      	eors	r6, r7
 8000efc:	4642      	mov	r2, r8
 8000efe:	2a02      	cmp	r2, #2
 8000f00:	dc23      	bgt.n	8000f4a <__aeabi_fmul+0xae>
 8000f02:	3a01      	subs	r2, #1
 8000f04:	2a01      	cmp	r2, #1
 8000f06:	d900      	bls.n	8000f0a <__aeabi_fmul+0x6e>
 8000f08:	e0bd      	b.n	8001086 <__aeabi_fmul+0x1ea>
 8000f0a:	2902      	cmp	r1, #2
 8000f0c:	d06e      	beq.n	8000fec <__aeabi_fmul+0x150>
 8000f0e:	2901      	cmp	r1, #1
 8000f10:	d12c      	bne.n	8000f6c <__aeabi_fmul+0xd0>
 8000f12:	2000      	movs	r0, #0
 8000f14:	2200      	movs	r2, #0
 8000f16:	05c0      	lsls	r0, r0, #23
 8000f18:	07f6      	lsls	r6, r6, #31
 8000f1a:	4310      	orrs	r0, r2
 8000f1c:	4330      	orrs	r0, r6
 8000f1e:	bce0      	pop	{r5, r6, r7}
 8000f20:	46ba      	mov	sl, r7
 8000f22:	46b1      	mov	r9, r6
 8000f24:	46a8      	mov	r8, r5
 8000f26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f28:	002b      	movs	r3, r5
 8000f2a:	33ff      	adds	r3, #255	@ 0xff
 8000f2c:	2c00      	cmp	r4, #0
 8000f2e:	d065      	beq.n	8000ffc <__aeabi_fmul+0x160>
 8000f30:	2203      	movs	r2, #3
 8000f32:	4641      	mov	r1, r8
 8000f34:	4311      	orrs	r1, r2
 8000f36:	0032      	movs	r2, r6
 8000f38:	3501      	adds	r5, #1
 8000f3a:	4688      	mov	r8, r1
 8000f3c:	407a      	eors	r2, r7
 8000f3e:	35ff      	adds	r5, #255	@ 0xff
 8000f40:	290a      	cmp	r1, #10
 8000f42:	dd00      	ble.n	8000f46 <__aeabi_fmul+0xaa>
 8000f44:	e0d8      	b.n	80010f8 <__aeabi_fmul+0x25c>
 8000f46:	0016      	movs	r6, r2
 8000f48:	2103      	movs	r1, #3
 8000f4a:	4640      	mov	r0, r8
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	4082      	lsls	r2, r0
 8000f50:	20a6      	movs	r0, #166	@ 0xa6
 8000f52:	00c0      	lsls	r0, r0, #3
 8000f54:	4202      	tst	r2, r0
 8000f56:	d020      	beq.n	8000f9a <__aeabi_fmul+0xfe>
 8000f58:	4653      	mov	r3, sl
 8000f5a:	2b02      	cmp	r3, #2
 8000f5c:	d046      	beq.n	8000fec <__aeabi_fmul+0x150>
 8000f5e:	2b03      	cmp	r3, #3
 8000f60:	d100      	bne.n	8000f64 <__aeabi_fmul+0xc8>
 8000f62:	e0bb      	b.n	80010dc <__aeabi_fmul+0x240>
 8000f64:	4651      	mov	r1, sl
 8000f66:	464c      	mov	r4, r9
 8000f68:	2901      	cmp	r1, #1
 8000f6a:	d0d2      	beq.n	8000f12 <__aeabi_fmul+0x76>
 8000f6c:	002b      	movs	r3, r5
 8000f6e:	337f      	adds	r3, #127	@ 0x7f
 8000f70:	2b00      	cmp	r3, #0
<<<<<<< HEAD
 8000f72:	d118      	bne.n	8000fa6 <__aeabi_fmul+0x176>
 8000f74:	2308      	movs	r3, #8
 8000f76:	4698      	mov	r8, r3
 8000f78:	3b06      	subs	r3, #6
 8000f7a:	25ff      	movs	r5, #255	@ 0xff
 8000f7c:	469a      	mov	sl, r3
 8000f7e:	e772      	b.n	8000e66 <__aeabi_fmul+0x36>
 8000f80:	20ff      	movs	r0, #255	@ 0xff
 8000f82:	2200      	movs	r2, #0
 8000f84:	e791      	b.n	8000eaa <__aeabi_fmul+0x7a>
 8000f86:	2280      	movs	r2, #128	@ 0x80
 8000f88:	2600      	movs	r6, #0
 8000f8a:	20ff      	movs	r0, #255	@ 0xff
 8000f8c:	03d2      	lsls	r2, r2, #15
 8000f8e:	e78c      	b.n	8000eaa <__aeabi_fmul+0x7a>
 8000f90:	4641      	mov	r1, r8
 8000f92:	2202      	movs	r2, #2
 8000f94:	3501      	adds	r5, #1
 8000f96:	4311      	orrs	r1, r2
 8000f98:	4688      	mov	r8, r1
 8000f9a:	35ff      	adds	r5, #255	@ 0xff
 8000f9c:	290a      	cmp	r1, #10
 8000f9e:	dca5      	bgt.n	8000eec <__aeabi_fmul+0xbc>
 8000fa0:	2102      	movs	r1, #2
 8000fa2:	407e      	eors	r6, r7
 8000fa4:	e774      	b.n	8000e90 <__aeabi_fmul+0x60>
 8000fa6:	230c      	movs	r3, #12
 8000fa8:	4698      	mov	r8, r3
 8000faa:	3b09      	subs	r3, #9
 8000fac:	25ff      	movs	r5, #255	@ 0xff
 8000fae:	469a      	mov	sl, r3
 8000fb0:	e759      	b.n	8000e66 <__aeabi_fmul+0x36>
 8000fb2:	0018      	movs	r0, r3
 8000fb4:	f002 fa22 	bl	80033fc <__clzsi2>
 8000fb8:	464a      	mov	r2, r9
 8000fba:	1f43      	subs	r3, r0, #5
 8000fbc:	2576      	movs	r5, #118	@ 0x76
 8000fbe:	409a      	lsls	r2, r3
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	426d      	negs	r5, r5
 8000fc4:	4691      	mov	r9, r2
 8000fc6:	4698      	mov	r8, r3
 8000fc8:	469a      	mov	sl, r3
 8000fca:	1a2d      	subs	r5, r5, r0
 8000fcc:	e74b      	b.n	8000e66 <__aeabi_fmul+0x36>
 8000fce:	0020      	movs	r0, r4
 8000fd0:	f002 fa14 	bl	80033fc <__clzsi2>
 8000fd4:	4642      	mov	r2, r8
 8000fd6:	1f43      	subs	r3, r0, #5
 8000fd8:	409c      	lsls	r4, r3
 8000fda:	1a2b      	subs	r3, r5, r0
 8000fdc:	3b76      	subs	r3, #118	@ 0x76
 8000fde:	2100      	movs	r1, #0
 8000fe0:	1c5d      	adds	r5, r3, #1
 8000fe2:	2a0a      	cmp	r2, #10
 8000fe4:	dc00      	bgt.n	8000fe8 <__aeabi_fmul+0x1b8>
 8000fe6:	e752      	b.n	8000e8e <__aeabi_fmul+0x5e>
 8000fe8:	e780      	b.n	8000eec <__aeabi_fmul+0xbc>
 8000fea:	2201      	movs	r2, #1
 8000fec:	1ad3      	subs	r3, r2, r3
 8000fee:	2b1b      	cmp	r3, #27
 8000ff0:	dd00      	ble.n	8000ff4 <__aeabi_fmul+0x1c4>
 8000ff2:	e758      	b.n	8000ea6 <__aeabi_fmul+0x76>
 8000ff4:	359e      	adds	r5, #158	@ 0x9e
 8000ff6:	0022      	movs	r2, r4
 8000ff8:	40ac      	lsls	r4, r5
 8000ffa:	40da      	lsrs	r2, r3
 8000ffc:	1e63      	subs	r3, r4, #1
 8000ffe:	419c      	sbcs	r4, r3
 8001000:	4322      	orrs	r2, r4
 8001002:	0753      	lsls	r3, r2, #29
 8001004:	d004      	beq.n	8001010 <__aeabi_fmul+0x1e0>
 8001006:	230f      	movs	r3, #15
 8001008:	4013      	ands	r3, r2
 800100a:	2b04      	cmp	r3, #4
 800100c:	d000      	beq.n	8001010 <__aeabi_fmul+0x1e0>
 800100e:	3204      	adds	r2, #4
 8001010:	0153      	lsls	r3, r2, #5
 8001012:	d537      	bpl.n	8001084 <__aeabi_fmul+0x254>
 8001014:	2001      	movs	r0, #1
 8001016:	2200      	movs	r2, #0
 8001018:	e747      	b.n	8000eaa <__aeabi_fmul+0x7a>
 800101a:	0c21      	lsrs	r1, r4, #16
 800101c:	464a      	mov	r2, r9
 800101e:	0424      	lsls	r4, r4, #16
 8001020:	0c24      	lsrs	r4, r4, #16
 8001022:	0027      	movs	r7, r4
 8001024:	0c10      	lsrs	r0, r2, #16
 8001026:	0412      	lsls	r2, r2, #16
 8001028:	0c12      	lsrs	r2, r2, #16
 800102a:	4344      	muls	r4, r0
 800102c:	4357      	muls	r7, r2
 800102e:	4348      	muls	r0, r1
 8001030:	4351      	muls	r1, r2
 8001032:	0c3a      	lsrs	r2, r7, #16
 8001034:	1909      	adds	r1, r1, r4
 8001036:	1852      	adds	r2, r2, r1
 8001038:	4294      	cmp	r4, r2
 800103a:	d903      	bls.n	8001044 <__aeabi_fmul+0x214>
 800103c:	2180      	movs	r1, #128	@ 0x80
 800103e:	0249      	lsls	r1, r1, #9
 8001040:	468c      	mov	ip, r1
 8001042:	4460      	add	r0, ip
 8001044:	043f      	lsls	r7, r7, #16
 8001046:	0411      	lsls	r1, r2, #16
 8001048:	0c3f      	lsrs	r7, r7, #16
 800104a:	19c9      	adds	r1, r1, r7
 800104c:	018c      	lsls	r4, r1, #6
 800104e:	1e67      	subs	r7, r4, #1
 8001050:	41bc      	sbcs	r4, r7
 8001052:	0c12      	lsrs	r2, r2, #16
 8001054:	0e89      	lsrs	r1, r1, #26
 8001056:	1812      	adds	r2, r2, r0
 8001058:	430c      	orrs	r4, r1
 800105a:	0192      	lsls	r2, r2, #6
 800105c:	4314      	orrs	r4, r2
 800105e:	0112      	lsls	r2, r2, #4
 8001060:	d50e      	bpl.n	8001080 <__aeabi_fmul+0x250>
 8001062:	2301      	movs	r3, #1
 8001064:	0862      	lsrs	r2, r4, #1
 8001066:	401c      	ands	r4, r3
 8001068:	4314      	orrs	r4, r2
 800106a:	e749      	b.n	8000f00 <__aeabi_fmul+0xd0>
 800106c:	003e      	movs	r6, r7
 800106e:	46a1      	mov	r9, r4
 8001070:	2280      	movs	r2, #128	@ 0x80
 8001072:	464b      	mov	r3, r9
 8001074:	03d2      	lsls	r2, r2, #15
 8001076:	431a      	orrs	r2, r3
 8001078:	0252      	lsls	r2, r2, #9
 800107a:	20ff      	movs	r0, #255	@ 0xff
 800107c:	0a52      	lsrs	r2, r2, #9
 800107e:	e714      	b.n	8000eaa <__aeabi_fmul+0x7a>
 8001080:	001d      	movs	r5, r3
 8001082:	e73d      	b.n	8000f00 <__aeabi_fmul+0xd0>
 8001084:	0192      	lsls	r2, r2, #6
 8001086:	2000      	movs	r0, #0
 8001088:	0a52      	lsrs	r2, r2, #9
 800108a:	e70e      	b.n	8000eaa <__aeabi_fmul+0x7a>
 800108c:	290f      	cmp	r1, #15
 800108e:	d1ed      	bne.n	800106c <__aeabi_fmul+0x23c>
 8001090:	2280      	movs	r2, #128	@ 0x80
 8001092:	464b      	mov	r3, r9
 8001094:	03d2      	lsls	r2, r2, #15
 8001096:	4213      	tst	r3, r2
 8001098:	d0ea      	beq.n	8001070 <__aeabi_fmul+0x240>
 800109a:	4214      	tst	r4, r2
 800109c:	d1e8      	bne.n	8001070 <__aeabi_fmul+0x240>
 800109e:	003e      	movs	r6, r7
 80010a0:	20ff      	movs	r0, #255	@ 0xff
 80010a2:	4322      	orrs	r2, r4
 80010a4:	e701      	b.n	8000eaa <__aeabi_fmul+0x7a>
 80010a6:	46c0      	nop			@ (mov r8, r8)
 80010a8:	f7ffffff 	.word	0xf7ffffff

080010ac <__aeabi_fsub>:
 80010ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010ae:	4647      	mov	r7, r8
 80010b0:	46ce      	mov	lr, r9
 80010b2:	024e      	lsls	r6, r1, #9
 80010b4:	0243      	lsls	r3, r0, #9
 80010b6:	0045      	lsls	r5, r0, #1
 80010b8:	0a72      	lsrs	r2, r6, #9
 80010ba:	0fc4      	lsrs	r4, r0, #31
 80010bc:	0048      	lsls	r0, r1, #1
 80010be:	b580      	push	{r7, lr}
 80010c0:	4694      	mov	ip, r2
 80010c2:	0a5f      	lsrs	r7, r3, #9
 80010c4:	0e2d      	lsrs	r5, r5, #24
 80010c6:	099b      	lsrs	r3, r3, #6
 80010c8:	0e00      	lsrs	r0, r0, #24
 80010ca:	0fc9      	lsrs	r1, r1, #31
 80010cc:	09b6      	lsrs	r6, r6, #6
 80010ce:	28ff      	cmp	r0, #255	@ 0xff
 80010d0:	d024      	beq.n	800111c <__aeabi_fsub+0x70>
 80010d2:	2201      	movs	r2, #1
 80010d4:	4051      	eors	r1, r2
 80010d6:	1a2a      	subs	r2, r5, r0
 80010d8:	428c      	cmp	r4, r1
 80010da:	d00f      	beq.n	80010fc <__aeabi_fsub+0x50>
 80010dc:	2a00      	cmp	r2, #0
 80010de:	dc00      	bgt.n	80010e2 <__aeabi_fsub+0x36>
 80010e0:	e16a      	b.n	80013b8 <__aeabi_fsub+0x30c>
 80010e2:	2800      	cmp	r0, #0
 80010e4:	d135      	bne.n	8001152 <__aeabi_fsub+0xa6>
 80010e6:	2e00      	cmp	r6, #0
 80010e8:	d100      	bne.n	80010ec <__aeabi_fsub+0x40>
 80010ea:	e0a2      	b.n	8001232 <__aeabi_fsub+0x186>
 80010ec:	1e51      	subs	r1, r2, #1
 80010ee:	2a01      	cmp	r2, #1
 80010f0:	d100      	bne.n	80010f4 <__aeabi_fsub+0x48>
 80010f2:	e124      	b.n	800133e <__aeabi_fsub+0x292>
 80010f4:	2aff      	cmp	r2, #255	@ 0xff
 80010f6:	d021      	beq.n	800113c <__aeabi_fsub+0x90>
 80010f8:	000a      	movs	r2, r1
 80010fa:	e02f      	b.n	800115c <__aeabi_fsub+0xb0>
 80010fc:	2a00      	cmp	r2, #0
 80010fe:	dc00      	bgt.n	8001102 <__aeabi_fsub+0x56>
 8001100:	e167      	b.n	80013d2 <__aeabi_fsub+0x326>
 8001102:	2800      	cmp	r0, #0
 8001104:	d05e      	beq.n	80011c4 <__aeabi_fsub+0x118>
 8001106:	2dff      	cmp	r5, #255	@ 0xff
 8001108:	d018      	beq.n	800113c <__aeabi_fsub+0x90>
 800110a:	2180      	movs	r1, #128	@ 0x80
 800110c:	04c9      	lsls	r1, r1, #19
 800110e:	430e      	orrs	r6, r1
 8001110:	2a1b      	cmp	r2, #27
 8001112:	dc00      	bgt.n	8001116 <__aeabi_fsub+0x6a>
 8001114:	e076      	b.n	8001204 <__aeabi_fsub+0x158>
 8001116:	002a      	movs	r2, r5
 8001118:	3301      	adds	r3, #1
 800111a:	e032      	b.n	8001182 <__aeabi_fsub+0xd6>
 800111c:	002a      	movs	r2, r5
 800111e:	3aff      	subs	r2, #255	@ 0xff
 8001120:	4691      	mov	r9, r2
 8001122:	2e00      	cmp	r6, #0
 8001124:	d042      	beq.n	80011ac <__aeabi_fsub+0x100>
 8001126:	428c      	cmp	r4, r1
 8001128:	d055      	beq.n	80011d6 <__aeabi_fsub+0x12a>
 800112a:	464a      	mov	r2, r9
 800112c:	2a00      	cmp	r2, #0
 800112e:	d100      	bne.n	8001132 <__aeabi_fsub+0x86>
 8001130:	e09c      	b.n	800126c <__aeabi_fsub+0x1c0>
 8001132:	2d00      	cmp	r5, #0
 8001134:	d100      	bne.n	8001138 <__aeabi_fsub+0x8c>
 8001136:	e077      	b.n	8001228 <__aeabi_fsub+0x17c>
 8001138:	000c      	movs	r4, r1
 800113a:	0033      	movs	r3, r6
 800113c:	08db      	lsrs	r3, r3, #3
 800113e:	2b00      	cmp	r3, #0
 8001140:	d100      	bne.n	8001144 <__aeabi_fsub+0x98>
 8001142:	e06e      	b.n	8001222 <__aeabi_fsub+0x176>
 8001144:	2280      	movs	r2, #128	@ 0x80
 8001146:	03d2      	lsls	r2, r2, #15
 8001148:	4313      	orrs	r3, r2
 800114a:	025b      	lsls	r3, r3, #9
 800114c:	20ff      	movs	r0, #255	@ 0xff
 800114e:	0a5b      	lsrs	r3, r3, #9
 8001150:	e024      	b.n	800119c <__aeabi_fsub+0xf0>
 8001152:	2dff      	cmp	r5, #255	@ 0xff
 8001154:	d0f2      	beq.n	800113c <__aeabi_fsub+0x90>
 8001156:	2180      	movs	r1, #128	@ 0x80
 8001158:	04c9      	lsls	r1, r1, #19
 800115a:	430e      	orrs	r6, r1
 800115c:	2101      	movs	r1, #1
 800115e:	2a1b      	cmp	r2, #27
 8001160:	dc08      	bgt.n	8001174 <__aeabi_fsub+0xc8>
 8001162:	0031      	movs	r1, r6
 8001164:	2020      	movs	r0, #32
 8001166:	40d1      	lsrs	r1, r2
 8001168:	1a82      	subs	r2, r0, r2
 800116a:	4096      	lsls	r6, r2
 800116c:	0032      	movs	r2, r6
 800116e:	1e50      	subs	r0, r2, #1
 8001170:	4182      	sbcs	r2, r0
 8001172:	4311      	orrs	r1, r2
 8001174:	1a5b      	subs	r3, r3, r1
 8001176:	015a      	lsls	r2, r3, #5
 8001178:	d460      	bmi.n	800123c <__aeabi_fsub+0x190>
 800117a:	2107      	movs	r1, #7
 800117c:	002a      	movs	r2, r5
 800117e:	4019      	ands	r1, r3
 8001180:	d057      	beq.n	8001232 <__aeabi_fsub+0x186>
 8001182:	210f      	movs	r1, #15
 8001184:	4019      	ands	r1, r3
 8001186:	2904      	cmp	r1, #4
 8001188:	d000      	beq.n	800118c <__aeabi_fsub+0xe0>
 800118a:	3304      	adds	r3, #4
 800118c:	0159      	lsls	r1, r3, #5
 800118e:	d550      	bpl.n	8001232 <__aeabi_fsub+0x186>
 8001190:	1c50      	adds	r0, r2, #1
 8001192:	2afe      	cmp	r2, #254	@ 0xfe
 8001194:	d045      	beq.n	8001222 <__aeabi_fsub+0x176>
 8001196:	019b      	lsls	r3, r3, #6
 8001198:	b2c0      	uxtb	r0, r0
 800119a:	0a5b      	lsrs	r3, r3, #9
 800119c:	05c0      	lsls	r0, r0, #23
 800119e:	4318      	orrs	r0, r3
 80011a0:	07e4      	lsls	r4, r4, #31
 80011a2:	4320      	orrs	r0, r4
 80011a4:	bcc0      	pop	{r6, r7}
 80011a6:	46b9      	mov	r9, r7
 80011a8:	46b0      	mov	r8, r6
 80011aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80011ac:	2201      	movs	r2, #1
 80011ae:	4051      	eors	r1, r2
 80011b0:	428c      	cmp	r4, r1
 80011b2:	d1ba      	bne.n	800112a <__aeabi_fsub+0x7e>
 80011b4:	464a      	mov	r2, r9
 80011b6:	2a00      	cmp	r2, #0
 80011b8:	d010      	beq.n	80011dc <__aeabi_fsub+0x130>
 80011ba:	2d00      	cmp	r5, #0
 80011bc:	d100      	bne.n	80011c0 <__aeabi_fsub+0x114>
 80011be:	e098      	b.n	80012f2 <__aeabi_fsub+0x246>
 80011c0:	2300      	movs	r3, #0
 80011c2:	e7bb      	b.n	800113c <__aeabi_fsub+0x90>
 80011c4:	2e00      	cmp	r6, #0
 80011c6:	d034      	beq.n	8001232 <__aeabi_fsub+0x186>
 80011c8:	1e51      	subs	r1, r2, #1
 80011ca:	2a01      	cmp	r2, #1
 80011cc:	d06e      	beq.n	80012ac <__aeabi_fsub+0x200>
 80011ce:	2aff      	cmp	r2, #255	@ 0xff
 80011d0:	d0b4      	beq.n	800113c <__aeabi_fsub+0x90>
 80011d2:	000a      	movs	r2, r1
 80011d4:	e79c      	b.n	8001110 <__aeabi_fsub+0x64>
 80011d6:	2a00      	cmp	r2, #0
 80011d8:	d000      	beq.n	80011dc <__aeabi_fsub+0x130>
 80011da:	e088      	b.n	80012ee <__aeabi_fsub+0x242>
 80011dc:	20fe      	movs	r0, #254	@ 0xfe
 80011de:	1c6a      	adds	r2, r5, #1
 80011e0:	4210      	tst	r0, r2
 80011e2:	d000      	beq.n	80011e6 <__aeabi_fsub+0x13a>
 80011e4:	e092      	b.n	800130c <__aeabi_fsub+0x260>
 80011e6:	2d00      	cmp	r5, #0
 80011e8:	d000      	beq.n	80011ec <__aeabi_fsub+0x140>
 80011ea:	e0a4      	b.n	8001336 <__aeabi_fsub+0x28a>
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d100      	bne.n	80011f2 <__aeabi_fsub+0x146>
 80011f0:	e0cb      	b.n	800138a <__aeabi_fsub+0x2de>
 80011f2:	2e00      	cmp	r6, #0
 80011f4:	d000      	beq.n	80011f8 <__aeabi_fsub+0x14c>
 80011f6:	e0ca      	b.n	800138e <__aeabi_fsub+0x2e2>
 80011f8:	2200      	movs	r2, #0
 80011fa:	08db      	lsrs	r3, r3, #3
 80011fc:	025b      	lsls	r3, r3, #9
 80011fe:	0a5b      	lsrs	r3, r3, #9
 8001200:	b2d0      	uxtb	r0, r2
 8001202:	e7cb      	b.n	800119c <__aeabi_fsub+0xf0>
 8001204:	0031      	movs	r1, r6
 8001206:	2020      	movs	r0, #32
 8001208:	40d1      	lsrs	r1, r2
 800120a:	1a82      	subs	r2, r0, r2
 800120c:	4096      	lsls	r6, r2
 800120e:	0032      	movs	r2, r6
 8001210:	1e50      	subs	r0, r2, #1
 8001212:	4182      	sbcs	r2, r0
 8001214:	430a      	orrs	r2, r1
 8001216:	189b      	adds	r3, r3, r2
 8001218:	015a      	lsls	r2, r3, #5
 800121a:	d5ae      	bpl.n	800117a <__aeabi_fsub+0xce>
 800121c:	1c6a      	adds	r2, r5, #1
 800121e:	2dfe      	cmp	r5, #254	@ 0xfe
 8001220:	d14a      	bne.n	80012b8 <__aeabi_fsub+0x20c>
 8001222:	20ff      	movs	r0, #255	@ 0xff
 8001224:	2300      	movs	r3, #0
 8001226:	e7b9      	b.n	800119c <__aeabi_fsub+0xf0>
 8001228:	22ff      	movs	r2, #255	@ 0xff
 800122a:	2b00      	cmp	r3, #0
 800122c:	d14b      	bne.n	80012c6 <__aeabi_fsub+0x21a>
 800122e:	000c      	movs	r4, r1
 8001230:	0033      	movs	r3, r6
 8001232:	08db      	lsrs	r3, r3, #3
 8001234:	2aff      	cmp	r2, #255	@ 0xff
 8001236:	d100      	bne.n	800123a <__aeabi_fsub+0x18e>
 8001238:	e781      	b.n	800113e <__aeabi_fsub+0x92>
 800123a:	e7df      	b.n	80011fc <__aeabi_fsub+0x150>
 800123c:	019f      	lsls	r7, r3, #6
 800123e:	09bf      	lsrs	r7, r7, #6
 8001240:	0038      	movs	r0, r7
 8001242:	f002 f8db 	bl	80033fc <__clzsi2>
 8001246:	3805      	subs	r0, #5
 8001248:	4087      	lsls	r7, r0
 800124a:	4285      	cmp	r5, r0
 800124c:	dc21      	bgt.n	8001292 <__aeabi_fsub+0x1e6>
 800124e:	003b      	movs	r3, r7
 8001250:	2120      	movs	r1, #32
 8001252:	1b42      	subs	r2, r0, r5
 8001254:	3201      	adds	r2, #1
 8001256:	40d3      	lsrs	r3, r2
 8001258:	1a8a      	subs	r2, r1, r2
 800125a:	4097      	lsls	r7, r2
 800125c:	1e7a      	subs	r2, r7, #1
 800125e:	4197      	sbcs	r7, r2
 8001260:	2200      	movs	r2, #0
 8001262:	433b      	orrs	r3, r7
 8001264:	0759      	lsls	r1, r3, #29
 8001266:	d000      	beq.n	800126a <__aeabi_fsub+0x1be>
 8001268:	e78b      	b.n	8001182 <__aeabi_fsub+0xd6>
 800126a:	e78f      	b.n	800118c <__aeabi_fsub+0xe0>
 800126c:	20fe      	movs	r0, #254	@ 0xfe
 800126e:	1c6a      	adds	r2, r5, #1
 8001270:	4210      	tst	r0, r2
 8001272:	d112      	bne.n	800129a <__aeabi_fsub+0x1ee>
 8001274:	2d00      	cmp	r5, #0
 8001276:	d152      	bne.n	800131e <__aeabi_fsub+0x272>
 8001278:	2b00      	cmp	r3, #0
 800127a:	d07c      	beq.n	8001376 <__aeabi_fsub+0x2ca>
 800127c:	2e00      	cmp	r6, #0
 800127e:	d0bb      	beq.n	80011f8 <__aeabi_fsub+0x14c>
 8001280:	1b9a      	subs	r2, r3, r6
 8001282:	0150      	lsls	r0, r2, #5
 8001284:	d400      	bmi.n	8001288 <__aeabi_fsub+0x1dc>
 8001286:	e08b      	b.n	80013a0 <__aeabi_fsub+0x2f4>
 8001288:	2401      	movs	r4, #1
 800128a:	2200      	movs	r2, #0
 800128c:	1af3      	subs	r3, r6, r3
 800128e:	400c      	ands	r4, r1
 8001290:	e7e8      	b.n	8001264 <__aeabi_fsub+0x1b8>
 8001292:	4b56      	ldr	r3, [pc, #344]	@ (80013ec <__aeabi_fsub+0x340>)
 8001294:	1a2a      	subs	r2, r5, r0
 8001296:	403b      	ands	r3, r7
 8001298:	e7e4      	b.n	8001264 <__aeabi_fsub+0x1b8>
 800129a:	1b9f      	subs	r7, r3, r6
 800129c:	017a      	lsls	r2, r7, #5
 800129e:	d446      	bmi.n	800132e <__aeabi_fsub+0x282>
 80012a0:	2f00      	cmp	r7, #0
 80012a2:	d1cd      	bne.n	8001240 <__aeabi_fsub+0x194>
 80012a4:	2400      	movs	r4, #0
 80012a6:	2000      	movs	r0, #0
 80012a8:	2300      	movs	r3, #0
 80012aa:	e777      	b.n	800119c <__aeabi_fsub+0xf0>
 80012ac:	199b      	adds	r3, r3, r6
 80012ae:	2501      	movs	r5, #1
 80012b0:	3201      	adds	r2, #1
 80012b2:	0159      	lsls	r1, r3, #5
 80012b4:	d400      	bmi.n	80012b8 <__aeabi_fsub+0x20c>
 80012b6:	e760      	b.n	800117a <__aeabi_fsub+0xce>
 80012b8:	2101      	movs	r1, #1
 80012ba:	484d      	ldr	r0, [pc, #308]	@ (80013f0 <__aeabi_fsub+0x344>)
 80012bc:	4019      	ands	r1, r3
 80012be:	085b      	lsrs	r3, r3, #1
 80012c0:	4003      	ands	r3, r0
 80012c2:	430b      	orrs	r3, r1
 80012c4:	e7ce      	b.n	8001264 <__aeabi_fsub+0x1b8>
 80012c6:	1e57      	subs	r7, r2, #1
 80012c8:	2a01      	cmp	r2, #1
 80012ca:	d05a      	beq.n	8001382 <__aeabi_fsub+0x2d6>
 80012cc:	000c      	movs	r4, r1
 80012ce:	2aff      	cmp	r2, #255	@ 0xff
 80012d0:	d033      	beq.n	800133a <__aeabi_fsub+0x28e>
 80012d2:	2201      	movs	r2, #1
 80012d4:	2f1b      	cmp	r7, #27
 80012d6:	dc07      	bgt.n	80012e8 <__aeabi_fsub+0x23c>
 80012d8:	2120      	movs	r1, #32
 80012da:	1bc9      	subs	r1, r1, r7
 80012dc:	001a      	movs	r2, r3
 80012de:	408b      	lsls	r3, r1
 80012e0:	40fa      	lsrs	r2, r7
 80012e2:	1e59      	subs	r1, r3, #1
 80012e4:	418b      	sbcs	r3, r1
 80012e6:	431a      	orrs	r2, r3
 80012e8:	0005      	movs	r5, r0
 80012ea:	1ab3      	subs	r3, r6, r2
 80012ec:	e743      	b.n	8001176 <__aeabi_fsub+0xca>
 80012ee:	2d00      	cmp	r5, #0
 80012f0:	d123      	bne.n	800133a <__aeabi_fsub+0x28e>
 80012f2:	22ff      	movs	r2, #255	@ 0xff
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d09b      	beq.n	8001230 <__aeabi_fsub+0x184>
 80012f8:	1e51      	subs	r1, r2, #1
 80012fa:	2a01      	cmp	r2, #1
 80012fc:	d0d6      	beq.n	80012ac <__aeabi_fsub+0x200>
 80012fe:	2aff      	cmp	r2, #255	@ 0xff
 8001300:	d01b      	beq.n	800133a <__aeabi_fsub+0x28e>
 8001302:	291b      	cmp	r1, #27
 8001304:	dd2c      	ble.n	8001360 <__aeabi_fsub+0x2b4>
 8001306:	0002      	movs	r2, r0
 8001308:	1c73      	adds	r3, r6, #1
 800130a:	e73a      	b.n	8001182 <__aeabi_fsub+0xd6>
 800130c:	2aff      	cmp	r2, #255	@ 0xff
 800130e:	d088      	beq.n	8001222 <__aeabi_fsub+0x176>
 8001310:	199b      	adds	r3, r3, r6
 8001312:	085b      	lsrs	r3, r3, #1
 8001314:	0759      	lsls	r1, r3, #29
 8001316:	d000      	beq.n	800131a <__aeabi_fsub+0x26e>
 8001318:	e733      	b.n	8001182 <__aeabi_fsub+0xd6>
 800131a:	08db      	lsrs	r3, r3, #3
 800131c:	e76e      	b.n	80011fc <__aeabi_fsub+0x150>
 800131e:	2b00      	cmp	r3, #0
 8001320:	d110      	bne.n	8001344 <__aeabi_fsub+0x298>
 8001322:	2e00      	cmp	r6, #0
 8001324:	d043      	beq.n	80013ae <__aeabi_fsub+0x302>
 8001326:	2401      	movs	r4, #1
 8001328:	0033      	movs	r3, r6
 800132a:	400c      	ands	r4, r1
 800132c:	e706      	b.n	800113c <__aeabi_fsub+0x90>
 800132e:	2401      	movs	r4, #1
 8001330:	1af7      	subs	r7, r6, r3
 8001332:	400c      	ands	r4, r1
 8001334:	e784      	b.n	8001240 <__aeabi_fsub+0x194>
 8001336:	2b00      	cmp	r3, #0
 8001338:	d104      	bne.n	8001344 <__aeabi_fsub+0x298>
 800133a:	0033      	movs	r3, r6
 800133c:	e6fe      	b.n	800113c <__aeabi_fsub+0x90>
 800133e:	2501      	movs	r5, #1
 8001340:	1b9b      	subs	r3, r3, r6
 8001342:	e718      	b.n	8001176 <__aeabi_fsub+0xca>
 8001344:	2e00      	cmp	r6, #0
 8001346:	d100      	bne.n	800134a <__aeabi_fsub+0x29e>
 8001348:	e6f8      	b.n	800113c <__aeabi_fsub+0x90>
 800134a:	2280      	movs	r2, #128	@ 0x80
 800134c:	03d2      	lsls	r2, r2, #15
 800134e:	4297      	cmp	r7, r2
 8001350:	d304      	bcc.n	800135c <__aeabi_fsub+0x2b0>
 8001352:	4594      	cmp	ip, r2
 8001354:	d202      	bcs.n	800135c <__aeabi_fsub+0x2b0>
 8001356:	2401      	movs	r4, #1
 8001358:	0033      	movs	r3, r6
 800135a:	400c      	ands	r4, r1
 800135c:	08db      	lsrs	r3, r3, #3
 800135e:	e6f1      	b.n	8001144 <__aeabi_fsub+0x98>
 8001360:	001a      	movs	r2, r3
 8001362:	2520      	movs	r5, #32
 8001364:	40ca      	lsrs	r2, r1
 8001366:	1a69      	subs	r1, r5, r1
 8001368:	408b      	lsls	r3, r1
 800136a:	1e59      	subs	r1, r3, #1
 800136c:	418b      	sbcs	r3, r1
 800136e:	4313      	orrs	r3, r2
 8001370:	0005      	movs	r5, r0
 8001372:	199b      	adds	r3, r3, r6
 8001374:	e750      	b.n	8001218 <__aeabi_fsub+0x16c>
 8001376:	2e00      	cmp	r6, #0
 8001378:	d094      	beq.n	80012a4 <__aeabi_fsub+0x1f8>
 800137a:	2401      	movs	r4, #1
 800137c:	0033      	movs	r3, r6
 800137e:	400c      	ands	r4, r1
 8001380:	e73a      	b.n	80011f8 <__aeabi_fsub+0x14c>
 8001382:	000c      	movs	r4, r1
 8001384:	2501      	movs	r5, #1
 8001386:	1af3      	subs	r3, r6, r3
 8001388:	e6f5      	b.n	8001176 <__aeabi_fsub+0xca>
 800138a:	0033      	movs	r3, r6
 800138c:	e734      	b.n	80011f8 <__aeabi_fsub+0x14c>
 800138e:	199b      	adds	r3, r3, r6
 8001390:	2200      	movs	r2, #0
 8001392:	0159      	lsls	r1, r3, #5
 8001394:	d5c1      	bpl.n	800131a <__aeabi_fsub+0x26e>
 8001396:	4a15      	ldr	r2, [pc, #84]	@ (80013ec <__aeabi_fsub+0x340>)
 8001398:	4013      	ands	r3, r2
 800139a:	08db      	lsrs	r3, r3, #3
 800139c:	2201      	movs	r2, #1
 800139e:	e72d      	b.n	80011fc <__aeabi_fsub+0x150>
 80013a0:	2a00      	cmp	r2, #0
 80013a2:	d100      	bne.n	80013a6 <__aeabi_fsub+0x2fa>
 80013a4:	e77e      	b.n	80012a4 <__aeabi_fsub+0x1f8>
 80013a6:	0013      	movs	r3, r2
 80013a8:	2200      	movs	r2, #0
 80013aa:	08db      	lsrs	r3, r3, #3
 80013ac:	e726      	b.n	80011fc <__aeabi_fsub+0x150>
 80013ae:	2380      	movs	r3, #128	@ 0x80
 80013b0:	2400      	movs	r4, #0
 80013b2:	20ff      	movs	r0, #255	@ 0xff
 80013b4:	03db      	lsls	r3, r3, #15
 80013b6:	e6f1      	b.n	800119c <__aeabi_fsub+0xf0>
 80013b8:	2a00      	cmp	r2, #0
 80013ba:	d100      	bne.n	80013be <__aeabi_fsub+0x312>
 80013bc:	e756      	b.n	800126c <__aeabi_fsub+0x1c0>
 80013be:	1b47      	subs	r7, r0, r5
 80013c0:	003a      	movs	r2, r7
 80013c2:	2d00      	cmp	r5, #0
 80013c4:	d100      	bne.n	80013c8 <__aeabi_fsub+0x31c>
 80013c6:	e730      	b.n	800122a <__aeabi_fsub+0x17e>
 80013c8:	2280      	movs	r2, #128	@ 0x80
 80013ca:	04d2      	lsls	r2, r2, #19
 80013cc:	000c      	movs	r4, r1
 80013ce:	4313      	orrs	r3, r2
 80013d0:	e77f      	b.n	80012d2 <__aeabi_fsub+0x226>
 80013d2:	2a00      	cmp	r2, #0
 80013d4:	d100      	bne.n	80013d8 <__aeabi_fsub+0x32c>
 80013d6:	e701      	b.n	80011dc <__aeabi_fsub+0x130>
 80013d8:	1b41      	subs	r1, r0, r5
 80013da:	2d00      	cmp	r5, #0
 80013dc:	d101      	bne.n	80013e2 <__aeabi_fsub+0x336>
 80013de:	000a      	movs	r2, r1
 80013e0:	e788      	b.n	80012f4 <__aeabi_fsub+0x248>
 80013e2:	2280      	movs	r2, #128	@ 0x80
 80013e4:	04d2      	lsls	r2, r2, #19
 80013e6:	4313      	orrs	r3, r2
 80013e8:	e78b      	b.n	8001302 <__aeabi_fsub+0x256>
 80013ea:	46c0      	nop			@ (mov r8, r8)
 80013ec:	fbffffff 	.word	0xfbffffff
 80013f0:	7dffffff 	.word	0x7dffffff
=======
 8000f72:	dd70      	ble.n	8001056 <__aeabi_fmul+0x1ba>
 8000f74:	0762      	lsls	r2, r4, #29
 8000f76:	d004      	beq.n	8000f82 <__aeabi_fmul+0xe6>
 8000f78:	220f      	movs	r2, #15
 8000f7a:	4022      	ands	r2, r4
 8000f7c:	2a04      	cmp	r2, #4
 8000f7e:	d000      	beq.n	8000f82 <__aeabi_fmul+0xe6>
 8000f80:	3404      	adds	r4, #4
 8000f82:	0122      	lsls	r2, r4, #4
 8000f84:	d503      	bpl.n	8000f8e <__aeabi_fmul+0xf2>
 8000f86:	4b63      	ldr	r3, [pc, #396]	@ (8001114 <__aeabi_fmul+0x278>)
 8000f88:	401c      	ands	r4, r3
 8000f8a:	002b      	movs	r3, r5
 8000f8c:	3380      	adds	r3, #128	@ 0x80
 8000f8e:	2bfe      	cmp	r3, #254	@ 0xfe
 8000f90:	dc2c      	bgt.n	8000fec <__aeabi_fmul+0x150>
 8000f92:	01a2      	lsls	r2, r4, #6
 8000f94:	0a52      	lsrs	r2, r2, #9
 8000f96:	b2d8      	uxtb	r0, r3
 8000f98:	e7bd      	b.n	8000f16 <__aeabi_fmul+0x7a>
 8000f9a:	2090      	movs	r0, #144	@ 0x90
 8000f9c:	0080      	lsls	r0, r0, #2
 8000f9e:	4202      	tst	r2, r0
 8000fa0:	d127      	bne.n	8000ff2 <__aeabi_fmul+0x156>
 8000fa2:	38b9      	subs	r0, #185	@ 0xb9
 8000fa4:	38ff      	subs	r0, #255	@ 0xff
 8000fa6:	4210      	tst	r0, r2
 8000fa8:	d06d      	beq.n	8001086 <__aeabi_fmul+0x1ea>
 8000faa:	003e      	movs	r6, r7
 8000fac:	46a1      	mov	r9, r4
 8000fae:	468a      	mov	sl, r1
 8000fb0:	e7d2      	b.n	8000f58 <__aeabi_fmul+0xbc>
 8000fb2:	2c00      	cmp	r4, #0
 8000fb4:	d141      	bne.n	800103a <__aeabi_fmul+0x19e>
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	4642      	mov	r2, r8
 8000fba:	431a      	orrs	r2, r3
 8000fbc:	4690      	mov	r8, r2
 8000fbe:	002b      	movs	r3, r5
 8000fc0:	4642      	mov	r2, r8
 8000fc2:	2101      	movs	r1, #1
 8000fc4:	1c5d      	adds	r5, r3, #1
 8000fc6:	2a0a      	cmp	r2, #10
 8000fc8:	dd97      	ble.n	8000efa <__aeabi_fmul+0x5e>
 8000fca:	e7c5      	b.n	8000f58 <__aeabi_fmul+0xbc>
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d126      	bne.n	800101e <__aeabi_fmul+0x182>
 8000fd0:	2304      	movs	r3, #4
 8000fd2:	4698      	mov	r8, r3
 8000fd4:	3b03      	subs	r3, #3
 8000fd6:	2500      	movs	r5, #0
 8000fd8:	469a      	mov	sl, r3
 8000fda:	e77a      	b.n	8000ed2 <__aeabi_fmul+0x36>
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d118      	bne.n	8001012 <__aeabi_fmul+0x176>
 8000fe0:	2308      	movs	r3, #8
 8000fe2:	4698      	mov	r8, r3
 8000fe4:	3b06      	subs	r3, #6
 8000fe6:	25ff      	movs	r5, #255	@ 0xff
 8000fe8:	469a      	mov	sl, r3
 8000fea:	e772      	b.n	8000ed2 <__aeabi_fmul+0x36>
 8000fec:	20ff      	movs	r0, #255	@ 0xff
 8000fee:	2200      	movs	r2, #0
 8000ff0:	e791      	b.n	8000f16 <__aeabi_fmul+0x7a>
 8000ff2:	2280      	movs	r2, #128	@ 0x80
 8000ff4:	2600      	movs	r6, #0
 8000ff6:	20ff      	movs	r0, #255	@ 0xff
 8000ff8:	03d2      	lsls	r2, r2, #15
 8000ffa:	e78c      	b.n	8000f16 <__aeabi_fmul+0x7a>
 8000ffc:	4641      	mov	r1, r8
 8000ffe:	2202      	movs	r2, #2
 8001000:	3501      	adds	r5, #1
 8001002:	4311      	orrs	r1, r2
 8001004:	4688      	mov	r8, r1
 8001006:	35ff      	adds	r5, #255	@ 0xff
 8001008:	290a      	cmp	r1, #10
 800100a:	dca5      	bgt.n	8000f58 <__aeabi_fmul+0xbc>
 800100c:	2102      	movs	r1, #2
 800100e:	407e      	eors	r6, r7
 8001010:	e774      	b.n	8000efc <__aeabi_fmul+0x60>
 8001012:	230c      	movs	r3, #12
 8001014:	4698      	mov	r8, r3
 8001016:	3b09      	subs	r3, #9
 8001018:	25ff      	movs	r5, #255	@ 0xff
 800101a:	469a      	mov	sl, r3
 800101c:	e759      	b.n	8000ed2 <__aeabi_fmul+0x36>
 800101e:	0018      	movs	r0, r3
 8001020:	f002 fa6a 	bl	80034f8 <__clzsi2>
 8001024:	464a      	mov	r2, r9
 8001026:	1f43      	subs	r3, r0, #5
 8001028:	2576      	movs	r5, #118	@ 0x76
 800102a:	409a      	lsls	r2, r3
 800102c:	2300      	movs	r3, #0
 800102e:	426d      	negs	r5, r5
 8001030:	4691      	mov	r9, r2
 8001032:	4698      	mov	r8, r3
 8001034:	469a      	mov	sl, r3
 8001036:	1a2d      	subs	r5, r5, r0
 8001038:	e74b      	b.n	8000ed2 <__aeabi_fmul+0x36>
 800103a:	0020      	movs	r0, r4
 800103c:	f002 fa5c 	bl	80034f8 <__clzsi2>
 8001040:	4642      	mov	r2, r8
 8001042:	1f43      	subs	r3, r0, #5
 8001044:	409c      	lsls	r4, r3
 8001046:	1a2b      	subs	r3, r5, r0
 8001048:	3b76      	subs	r3, #118	@ 0x76
 800104a:	2100      	movs	r1, #0
 800104c:	1c5d      	adds	r5, r3, #1
 800104e:	2a0a      	cmp	r2, #10
 8001050:	dc00      	bgt.n	8001054 <__aeabi_fmul+0x1b8>
 8001052:	e752      	b.n	8000efa <__aeabi_fmul+0x5e>
 8001054:	e780      	b.n	8000f58 <__aeabi_fmul+0xbc>
 8001056:	2201      	movs	r2, #1
 8001058:	1ad3      	subs	r3, r2, r3
 800105a:	2b1b      	cmp	r3, #27
 800105c:	dd00      	ble.n	8001060 <__aeabi_fmul+0x1c4>
 800105e:	e758      	b.n	8000f12 <__aeabi_fmul+0x76>
 8001060:	359e      	adds	r5, #158	@ 0x9e
 8001062:	0022      	movs	r2, r4
 8001064:	40ac      	lsls	r4, r5
 8001066:	40da      	lsrs	r2, r3
 8001068:	1e63      	subs	r3, r4, #1
 800106a:	419c      	sbcs	r4, r3
 800106c:	4322      	orrs	r2, r4
 800106e:	0753      	lsls	r3, r2, #29
 8001070:	d004      	beq.n	800107c <__aeabi_fmul+0x1e0>
 8001072:	230f      	movs	r3, #15
 8001074:	4013      	ands	r3, r2
 8001076:	2b04      	cmp	r3, #4
 8001078:	d000      	beq.n	800107c <__aeabi_fmul+0x1e0>
 800107a:	3204      	adds	r2, #4
 800107c:	0153      	lsls	r3, r2, #5
 800107e:	d537      	bpl.n	80010f0 <__aeabi_fmul+0x254>
 8001080:	2001      	movs	r0, #1
 8001082:	2200      	movs	r2, #0
 8001084:	e747      	b.n	8000f16 <__aeabi_fmul+0x7a>
 8001086:	0c21      	lsrs	r1, r4, #16
 8001088:	464a      	mov	r2, r9
 800108a:	0424      	lsls	r4, r4, #16
 800108c:	0c24      	lsrs	r4, r4, #16
 800108e:	0027      	movs	r7, r4
 8001090:	0c10      	lsrs	r0, r2, #16
 8001092:	0412      	lsls	r2, r2, #16
 8001094:	0c12      	lsrs	r2, r2, #16
 8001096:	4344      	muls	r4, r0
 8001098:	4357      	muls	r7, r2
 800109a:	4348      	muls	r0, r1
 800109c:	4351      	muls	r1, r2
 800109e:	0c3a      	lsrs	r2, r7, #16
 80010a0:	1909      	adds	r1, r1, r4
 80010a2:	1852      	adds	r2, r2, r1
 80010a4:	4294      	cmp	r4, r2
 80010a6:	d903      	bls.n	80010b0 <__aeabi_fmul+0x214>
 80010a8:	2180      	movs	r1, #128	@ 0x80
 80010aa:	0249      	lsls	r1, r1, #9
 80010ac:	468c      	mov	ip, r1
 80010ae:	4460      	add	r0, ip
 80010b0:	043f      	lsls	r7, r7, #16
 80010b2:	0411      	lsls	r1, r2, #16
 80010b4:	0c3f      	lsrs	r7, r7, #16
 80010b6:	19c9      	adds	r1, r1, r7
 80010b8:	018c      	lsls	r4, r1, #6
 80010ba:	1e67      	subs	r7, r4, #1
 80010bc:	41bc      	sbcs	r4, r7
 80010be:	0c12      	lsrs	r2, r2, #16
 80010c0:	0e89      	lsrs	r1, r1, #26
 80010c2:	1812      	adds	r2, r2, r0
 80010c4:	430c      	orrs	r4, r1
 80010c6:	0192      	lsls	r2, r2, #6
 80010c8:	4314      	orrs	r4, r2
 80010ca:	0112      	lsls	r2, r2, #4
 80010cc:	d50e      	bpl.n	80010ec <__aeabi_fmul+0x250>
 80010ce:	2301      	movs	r3, #1
 80010d0:	0862      	lsrs	r2, r4, #1
 80010d2:	401c      	ands	r4, r3
 80010d4:	4314      	orrs	r4, r2
 80010d6:	e749      	b.n	8000f6c <__aeabi_fmul+0xd0>
 80010d8:	003e      	movs	r6, r7
 80010da:	46a1      	mov	r9, r4
 80010dc:	2280      	movs	r2, #128	@ 0x80
 80010de:	464b      	mov	r3, r9
 80010e0:	03d2      	lsls	r2, r2, #15
 80010e2:	431a      	orrs	r2, r3
 80010e4:	0252      	lsls	r2, r2, #9
 80010e6:	20ff      	movs	r0, #255	@ 0xff
 80010e8:	0a52      	lsrs	r2, r2, #9
 80010ea:	e714      	b.n	8000f16 <__aeabi_fmul+0x7a>
 80010ec:	001d      	movs	r5, r3
 80010ee:	e73d      	b.n	8000f6c <__aeabi_fmul+0xd0>
 80010f0:	0192      	lsls	r2, r2, #6
 80010f2:	2000      	movs	r0, #0
 80010f4:	0a52      	lsrs	r2, r2, #9
 80010f6:	e70e      	b.n	8000f16 <__aeabi_fmul+0x7a>
 80010f8:	290f      	cmp	r1, #15
 80010fa:	d1ed      	bne.n	80010d8 <__aeabi_fmul+0x23c>
 80010fc:	2280      	movs	r2, #128	@ 0x80
 80010fe:	464b      	mov	r3, r9
 8001100:	03d2      	lsls	r2, r2, #15
 8001102:	4213      	tst	r3, r2
 8001104:	d0ea      	beq.n	80010dc <__aeabi_fmul+0x240>
 8001106:	4214      	tst	r4, r2
 8001108:	d1e8      	bne.n	80010dc <__aeabi_fmul+0x240>
 800110a:	003e      	movs	r6, r7
 800110c:	20ff      	movs	r0, #255	@ 0xff
 800110e:	4322      	orrs	r2, r4
 8001110:	e701      	b.n	8000f16 <__aeabi_fmul+0x7a>
 8001112:	46c0      	nop			@ (mov r8, r8)
 8001114:	f7ffffff 	.word	0xf7ffffff

08001118 <__aeabi_fsub>:
 8001118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800111a:	4647      	mov	r7, r8
 800111c:	46ce      	mov	lr, r9
 800111e:	024e      	lsls	r6, r1, #9
 8001120:	0243      	lsls	r3, r0, #9
 8001122:	0045      	lsls	r5, r0, #1
 8001124:	0a72      	lsrs	r2, r6, #9
 8001126:	0fc4      	lsrs	r4, r0, #31
 8001128:	0048      	lsls	r0, r1, #1
 800112a:	b580      	push	{r7, lr}
 800112c:	4694      	mov	ip, r2
 800112e:	0a5f      	lsrs	r7, r3, #9
 8001130:	0e2d      	lsrs	r5, r5, #24
 8001132:	099b      	lsrs	r3, r3, #6
 8001134:	0e00      	lsrs	r0, r0, #24
 8001136:	0fc9      	lsrs	r1, r1, #31
 8001138:	09b6      	lsrs	r6, r6, #6
 800113a:	28ff      	cmp	r0, #255	@ 0xff
 800113c:	d024      	beq.n	8001188 <__aeabi_fsub+0x70>
 800113e:	2201      	movs	r2, #1
 8001140:	4051      	eors	r1, r2
 8001142:	1a2a      	subs	r2, r5, r0
 8001144:	428c      	cmp	r4, r1
 8001146:	d00f      	beq.n	8001168 <__aeabi_fsub+0x50>
 8001148:	2a00      	cmp	r2, #0
 800114a:	dc00      	bgt.n	800114e <__aeabi_fsub+0x36>
 800114c:	e16a      	b.n	8001424 <__aeabi_fsub+0x30c>
 800114e:	2800      	cmp	r0, #0
 8001150:	d135      	bne.n	80011be <__aeabi_fsub+0xa6>
 8001152:	2e00      	cmp	r6, #0
 8001154:	d100      	bne.n	8001158 <__aeabi_fsub+0x40>
 8001156:	e0a2      	b.n	800129e <__aeabi_fsub+0x186>
 8001158:	1e51      	subs	r1, r2, #1
 800115a:	2a01      	cmp	r2, #1
 800115c:	d100      	bne.n	8001160 <__aeabi_fsub+0x48>
 800115e:	e124      	b.n	80013aa <__aeabi_fsub+0x292>
 8001160:	2aff      	cmp	r2, #255	@ 0xff
 8001162:	d021      	beq.n	80011a8 <__aeabi_fsub+0x90>
 8001164:	000a      	movs	r2, r1
 8001166:	e02f      	b.n	80011c8 <__aeabi_fsub+0xb0>
 8001168:	2a00      	cmp	r2, #0
 800116a:	dc00      	bgt.n	800116e <__aeabi_fsub+0x56>
 800116c:	e167      	b.n	800143e <__aeabi_fsub+0x326>
 800116e:	2800      	cmp	r0, #0
 8001170:	d05e      	beq.n	8001230 <__aeabi_fsub+0x118>
 8001172:	2dff      	cmp	r5, #255	@ 0xff
 8001174:	d018      	beq.n	80011a8 <__aeabi_fsub+0x90>
 8001176:	2180      	movs	r1, #128	@ 0x80
 8001178:	04c9      	lsls	r1, r1, #19
 800117a:	430e      	orrs	r6, r1
 800117c:	2a1b      	cmp	r2, #27
 800117e:	dc00      	bgt.n	8001182 <__aeabi_fsub+0x6a>
 8001180:	e076      	b.n	8001270 <__aeabi_fsub+0x158>
 8001182:	002a      	movs	r2, r5
 8001184:	3301      	adds	r3, #1
 8001186:	e032      	b.n	80011ee <__aeabi_fsub+0xd6>
 8001188:	002a      	movs	r2, r5
 800118a:	3aff      	subs	r2, #255	@ 0xff
 800118c:	4691      	mov	r9, r2
 800118e:	2e00      	cmp	r6, #0
 8001190:	d042      	beq.n	8001218 <__aeabi_fsub+0x100>
 8001192:	428c      	cmp	r4, r1
 8001194:	d055      	beq.n	8001242 <__aeabi_fsub+0x12a>
 8001196:	464a      	mov	r2, r9
 8001198:	2a00      	cmp	r2, #0
 800119a:	d100      	bne.n	800119e <__aeabi_fsub+0x86>
 800119c:	e09c      	b.n	80012d8 <__aeabi_fsub+0x1c0>
 800119e:	2d00      	cmp	r5, #0
 80011a0:	d100      	bne.n	80011a4 <__aeabi_fsub+0x8c>
 80011a2:	e077      	b.n	8001294 <__aeabi_fsub+0x17c>
 80011a4:	000c      	movs	r4, r1
 80011a6:	0033      	movs	r3, r6
 80011a8:	08db      	lsrs	r3, r3, #3
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d100      	bne.n	80011b0 <__aeabi_fsub+0x98>
 80011ae:	e06e      	b.n	800128e <__aeabi_fsub+0x176>
 80011b0:	2280      	movs	r2, #128	@ 0x80
 80011b2:	03d2      	lsls	r2, r2, #15
 80011b4:	4313      	orrs	r3, r2
 80011b6:	025b      	lsls	r3, r3, #9
 80011b8:	20ff      	movs	r0, #255	@ 0xff
 80011ba:	0a5b      	lsrs	r3, r3, #9
 80011bc:	e024      	b.n	8001208 <__aeabi_fsub+0xf0>
 80011be:	2dff      	cmp	r5, #255	@ 0xff
 80011c0:	d0f2      	beq.n	80011a8 <__aeabi_fsub+0x90>
 80011c2:	2180      	movs	r1, #128	@ 0x80
 80011c4:	04c9      	lsls	r1, r1, #19
 80011c6:	430e      	orrs	r6, r1
 80011c8:	2101      	movs	r1, #1
 80011ca:	2a1b      	cmp	r2, #27
 80011cc:	dc08      	bgt.n	80011e0 <__aeabi_fsub+0xc8>
 80011ce:	0031      	movs	r1, r6
 80011d0:	2020      	movs	r0, #32
 80011d2:	40d1      	lsrs	r1, r2
 80011d4:	1a82      	subs	r2, r0, r2
 80011d6:	4096      	lsls	r6, r2
 80011d8:	0032      	movs	r2, r6
 80011da:	1e50      	subs	r0, r2, #1
 80011dc:	4182      	sbcs	r2, r0
 80011de:	4311      	orrs	r1, r2
 80011e0:	1a5b      	subs	r3, r3, r1
 80011e2:	015a      	lsls	r2, r3, #5
 80011e4:	d460      	bmi.n	80012a8 <__aeabi_fsub+0x190>
 80011e6:	2107      	movs	r1, #7
 80011e8:	002a      	movs	r2, r5
 80011ea:	4019      	ands	r1, r3
 80011ec:	d057      	beq.n	800129e <__aeabi_fsub+0x186>
 80011ee:	210f      	movs	r1, #15
 80011f0:	4019      	ands	r1, r3
 80011f2:	2904      	cmp	r1, #4
 80011f4:	d000      	beq.n	80011f8 <__aeabi_fsub+0xe0>
 80011f6:	3304      	adds	r3, #4
 80011f8:	0159      	lsls	r1, r3, #5
 80011fa:	d550      	bpl.n	800129e <__aeabi_fsub+0x186>
 80011fc:	1c50      	adds	r0, r2, #1
 80011fe:	2afe      	cmp	r2, #254	@ 0xfe
 8001200:	d045      	beq.n	800128e <__aeabi_fsub+0x176>
 8001202:	019b      	lsls	r3, r3, #6
 8001204:	b2c0      	uxtb	r0, r0
 8001206:	0a5b      	lsrs	r3, r3, #9
 8001208:	05c0      	lsls	r0, r0, #23
 800120a:	4318      	orrs	r0, r3
 800120c:	07e4      	lsls	r4, r4, #31
 800120e:	4320      	orrs	r0, r4
 8001210:	bcc0      	pop	{r6, r7}
 8001212:	46b9      	mov	r9, r7
 8001214:	46b0      	mov	r8, r6
 8001216:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001218:	2201      	movs	r2, #1
 800121a:	4051      	eors	r1, r2
 800121c:	428c      	cmp	r4, r1
 800121e:	d1ba      	bne.n	8001196 <__aeabi_fsub+0x7e>
 8001220:	464a      	mov	r2, r9
 8001222:	2a00      	cmp	r2, #0
 8001224:	d010      	beq.n	8001248 <__aeabi_fsub+0x130>
 8001226:	2d00      	cmp	r5, #0
 8001228:	d100      	bne.n	800122c <__aeabi_fsub+0x114>
 800122a:	e098      	b.n	800135e <__aeabi_fsub+0x246>
 800122c:	2300      	movs	r3, #0
 800122e:	e7bb      	b.n	80011a8 <__aeabi_fsub+0x90>
 8001230:	2e00      	cmp	r6, #0
 8001232:	d034      	beq.n	800129e <__aeabi_fsub+0x186>
 8001234:	1e51      	subs	r1, r2, #1
 8001236:	2a01      	cmp	r2, #1
 8001238:	d06e      	beq.n	8001318 <__aeabi_fsub+0x200>
 800123a:	2aff      	cmp	r2, #255	@ 0xff
 800123c:	d0b4      	beq.n	80011a8 <__aeabi_fsub+0x90>
 800123e:	000a      	movs	r2, r1
 8001240:	e79c      	b.n	800117c <__aeabi_fsub+0x64>
 8001242:	2a00      	cmp	r2, #0
 8001244:	d000      	beq.n	8001248 <__aeabi_fsub+0x130>
 8001246:	e088      	b.n	800135a <__aeabi_fsub+0x242>
 8001248:	20fe      	movs	r0, #254	@ 0xfe
 800124a:	1c6a      	adds	r2, r5, #1
 800124c:	4210      	tst	r0, r2
 800124e:	d000      	beq.n	8001252 <__aeabi_fsub+0x13a>
 8001250:	e092      	b.n	8001378 <__aeabi_fsub+0x260>
 8001252:	2d00      	cmp	r5, #0
 8001254:	d000      	beq.n	8001258 <__aeabi_fsub+0x140>
 8001256:	e0a4      	b.n	80013a2 <__aeabi_fsub+0x28a>
 8001258:	2b00      	cmp	r3, #0
 800125a:	d100      	bne.n	800125e <__aeabi_fsub+0x146>
 800125c:	e0cb      	b.n	80013f6 <__aeabi_fsub+0x2de>
 800125e:	2e00      	cmp	r6, #0
 8001260:	d000      	beq.n	8001264 <__aeabi_fsub+0x14c>
 8001262:	e0ca      	b.n	80013fa <__aeabi_fsub+0x2e2>
 8001264:	2200      	movs	r2, #0
 8001266:	08db      	lsrs	r3, r3, #3
 8001268:	025b      	lsls	r3, r3, #9
 800126a:	0a5b      	lsrs	r3, r3, #9
 800126c:	b2d0      	uxtb	r0, r2
 800126e:	e7cb      	b.n	8001208 <__aeabi_fsub+0xf0>
 8001270:	0031      	movs	r1, r6
 8001272:	2020      	movs	r0, #32
 8001274:	40d1      	lsrs	r1, r2
 8001276:	1a82      	subs	r2, r0, r2
 8001278:	4096      	lsls	r6, r2
 800127a:	0032      	movs	r2, r6
 800127c:	1e50      	subs	r0, r2, #1
 800127e:	4182      	sbcs	r2, r0
 8001280:	430a      	orrs	r2, r1
 8001282:	189b      	adds	r3, r3, r2
 8001284:	015a      	lsls	r2, r3, #5
 8001286:	d5ae      	bpl.n	80011e6 <__aeabi_fsub+0xce>
 8001288:	1c6a      	adds	r2, r5, #1
 800128a:	2dfe      	cmp	r5, #254	@ 0xfe
 800128c:	d14a      	bne.n	8001324 <__aeabi_fsub+0x20c>
 800128e:	20ff      	movs	r0, #255	@ 0xff
 8001290:	2300      	movs	r3, #0
 8001292:	e7b9      	b.n	8001208 <__aeabi_fsub+0xf0>
 8001294:	22ff      	movs	r2, #255	@ 0xff
 8001296:	2b00      	cmp	r3, #0
 8001298:	d14b      	bne.n	8001332 <__aeabi_fsub+0x21a>
 800129a:	000c      	movs	r4, r1
 800129c:	0033      	movs	r3, r6
 800129e:	08db      	lsrs	r3, r3, #3
 80012a0:	2aff      	cmp	r2, #255	@ 0xff
 80012a2:	d100      	bne.n	80012a6 <__aeabi_fsub+0x18e>
 80012a4:	e781      	b.n	80011aa <__aeabi_fsub+0x92>
 80012a6:	e7df      	b.n	8001268 <__aeabi_fsub+0x150>
 80012a8:	019f      	lsls	r7, r3, #6
 80012aa:	09bf      	lsrs	r7, r7, #6
 80012ac:	0038      	movs	r0, r7
 80012ae:	f002 f923 	bl	80034f8 <__clzsi2>
 80012b2:	3805      	subs	r0, #5
 80012b4:	4087      	lsls	r7, r0
 80012b6:	4285      	cmp	r5, r0
 80012b8:	dc21      	bgt.n	80012fe <__aeabi_fsub+0x1e6>
 80012ba:	003b      	movs	r3, r7
 80012bc:	2120      	movs	r1, #32
 80012be:	1b42      	subs	r2, r0, r5
 80012c0:	3201      	adds	r2, #1
 80012c2:	40d3      	lsrs	r3, r2
 80012c4:	1a8a      	subs	r2, r1, r2
 80012c6:	4097      	lsls	r7, r2
 80012c8:	1e7a      	subs	r2, r7, #1
 80012ca:	4197      	sbcs	r7, r2
 80012cc:	2200      	movs	r2, #0
 80012ce:	433b      	orrs	r3, r7
 80012d0:	0759      	lsls	r1, r3, #29
 80012d2:	d000      	beq.n	80012d6 <__aeabi_fsub+0x1be>
 80012d4:	e78b      	b.n	80011ee <__aeabi_fsub+0xd6>
 80012d6:	e78f      	b.n	80011f8 <__aeabi_fsub+0xe0>
 80012d8:	20fe      	movs	r0, #254	@ 0xfe
 80012da:	1c6a      	adds	r2, r5, #1
 80012dc:	4210      	tst	r0, r2
 80012de:	d112      	bne.n	8001306 <__aeabi_fsub+0x1ee>
 80012e0:	2d00      	cmp	r5, #0
 80012e2:	d152      	bne.n	800138a <__aeabi_fsub+0x272>
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d07c      	beq.n	80013e2 <__aeabi_fsub+0x2ca>
 80012e8:	2e00      	cmp	r6, #0
 80012ea:	d0bb      	beq.n	8001264 <__aeabi_fsub+0x14c>
 80012ec:	1b9a      	subs	r2, r3, r6
 80012ee:	0150      	lsls	r0, r2, #5
 80012f0:	d400      	bmi.n	80012f4 <__aeabi_fsub+0x1dc>
 80012f2:	e08b      	b.n	800140c <__aeabi_fsub+0x2f4>
 80012f4:	2401      	movs	r4, #1
 80012f6:	2200      	movs	r2, #0
 80012f8:	1af3      	subs	r3, r6, r3
 80012fa:	400c      	ands	r4, r1
 80012fc:	e7e8      	b.n	80012d0 <__aeabi_fsub+0x1b8>
 80012fe:	4b56      	ldr	r3, [pc, #344]	@ (8001458 <__aeabi_fsub+0x340>)
 8001300:	1a2a      	subs	r2, r5, r0
 8001302:	403b      	ands	r3, r7
 8001304:	e7e4      	b.n	80012d0 <__aeabi_fsub+0x1b8>
 8001306:	1b9f      	subs	r7, r3, r6
 8001308:	017a      	lsls	r2, r7, #5
 800130a:	d446      	bmi.n	800139a <__aeabi_fsub+0x282>
 800130c:	2f00      	cmp	r7, #0
 800130e:	d1cd      	bne.n	80012ac <__aeabi_fsub+0x194>
 8001310:	2400      	movs	r4, #0
 8001312:	2000      	movs	r0, #0
 8001314:	2300      	movs	r3, #0
 8001316:	e777      	b.n	8001208 <__aeabi_fsub+0xf0>
 8001318:	199b      	adds	r3, r3, r6
 800131a:	2501      	movs	r5, #1
 800131c:	3201      	adds	r2, #1
 800131e:	0159      	lsls	r1, r3, #5
 8001320:	d400      	bmi.n	8001324 <__aeabi_fsub+0x20c>
 8001322:	e760      	b.n	80011e6 <__aeabi_fsub+0xce>
 8001324:	2101      	movs	r1, #1
 8001326:	484d      	ldr	r0, [pc, #308]	@ (800145c <__aeabi_fsub+0x344>)
 8001328:	4019      	ands	r1, r3
 800132a:	085b      	lsrs	r3, r3, #1
 800132c:	4003      	ands	r3, r0
 800132e:	430b      	orrs	r3, r1
 8001330:	e7ce      	b.n	80012d0 <__aeabi_fsub+0x1b8>
 8001332:	1e57      	subs	r7, r2, #1
 8001334:	2a01      	cmp	r2, #1
 8001336:	d05a      	beq.n	80013ee <__aeabi_fsub+0x2d6>
 8001338:	000c      	movs	r4, r1
 800133a:	2aff      	cmp	r2, #255	@ 0xff
 800133c:	d033      	beq.n	80013a6 <__aeabi_fsub+0x28e>
 800133e:	2201      	movs	r2, #1
 8001340:	2f1b      	cmp	r7, #27
 8001342:	dc07      	bgt.n	8001354 <__aeabi_fsub+0x23c>
 8001344:	2120      	movs	r1, #32
 8001346:	1bc9      	subs	r1, r1, r7
 8001348:	001a      	movs	r2, r3
 800134a:	408b      	lsls	r3, r1
 800134c:	40fa      	lsrs	r2, r7
 800134e:	1e59      	subs	r1, r3, #1
 8001350:	418b      	sbcs	r3, r1
 8001352:	431a      	orrs	r2, r3
 8001354:	0005      	movs	r5, r0
 8001356:	1ab3      	subs	r3, r6, r2
 8001358:	e743      	b.n	80011e2 <__aeabi_fsub+0xca>
 800135a:	2d00      	cmp	r5, #0
 800135c:	d123      	bne.n	80013a6 <__aeabi_fsub+0x28e>
 800135e:	22ff      	movs	r2, #255	@ 0xff
 8001360:	2b00      	cmp	r3, #0
 8001362:	d09b      	beq.n	800129c <__aeabi_fsub+0x184>
 8001364:	1e51      	subs	r1, r2, #1
 8001366:	2a01      	cmp	r2, #1
 8001368:	d0d6      	beq.n	8001318 <__aeabi_fsub+0x200>
 800136a:	2aff      	cmp	r2, #255	@ 0xff
 800136c:	d01b      	beq.n	80013a6 <__aeabi_fsub+0x28e>
 800136e:	291b      	cmp	r1, #27
 8001370:	dd2c      	ble.n	80013cc <__aeabi_fsub+0x2b4>
 8001372:	0002      	movs	r2, r0
 8001374:	1c73      	adds	r3, r6, #1
 8001376:	e73a      	b.n	80011ee <__aeabi_fsub+0xd6>
 8001378:	2aff      	cmp	r2, #255	@ 0xff
 800137a:	d088      	beq.n	800128e <__aeabi_fsub+0x176>
 800137c:	199b      	adds	r3, r3, r6
 800137e:	085b      	lsrs	r3, r3, #1
 8001380:	0759      	lsls	r1, r3, #29
 8001382:	d000      	beq.n	8001386 <__aeabi_fsub+0x26e>
 8001384:	e733      	b.n	80011ee <__aeabi_fsub+0xd6>
 8001386:	08db      	lsrs	r3, r3, #3
 8001388:	e76e      	b.n	8001268 <__aeabi_fsub+0x150>
 800138a:	2b00      	cmp	r3, #0
 800138c:	d110      	bne.n	80013b0 <__aeabi_fsub+0x298>
 800138e:	2e00      	cmp	r6, #0
 8001390:	d043      	beq.n	800141a <__aeabi_fsub+0x302>
 8001392:	2401      	movs	r4, #1
 8001394:	0033      	movs	r3, r6
 8001396:	400c      	ands	r4, r1
 8001398:	e706      	b.n	80011a8 <__aeabi_fsub+0x90>
 800139a:	2401      	movs	r4, #1
 800139c:	1af7      	subs	r7, r6, r3
 800139e:	400c      	ands	r4, r1
 80013a0:	e784      	b.n	80012ac <__aeabi_fsub+0x194>
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d104      	bne.n	80013b0 <__aeabi_fsub+0x298>
 80013a6:	0033      	movs	r3, r6
 80013a8:	e6fe      	b.n	80011a8 <__aeabi_fsub+0x90>
 80013aa:	2501      	movs	r5, #1
 80013ac:	1b9b      	subs	r3, r3, r6
 80013ae:	e718      	b.n	80011e2 <__aeabi_fsub+0xca>
 80013b0:	2e00      	cmp	r6, #0
 80013b2:	d100      	bne.n	80013b6 <__aeabi_fsub+0x29e>
 80013b4:	e6f8      	b.n	80011a8 <__aeabi_fsub+0x90>
 80013b6:	2280      	movs	r2, #128	@ 0x80
 80013b8:	03d2      	lsls	r2, r2, #15
 80013ba:	4297      	cmp	r7, r2
 80013bc:	d304      	bcc.n	80013c8 <__aeabi_fsub+0x2b0>
 80013be:	4594      	cmp	ip, r2
 80013c0:	d202      	bcs.n	80013c8 <__aeabi_fsub+0x2b0>
 80013c2:	2401      	movs	r4, #1
 80013c4:	0033      	movs	r3, r6
 80013c6:	400c      	ands	r4, r1
 80013c8:	08db      	lsrs	r3, r3, #3
 80013ca:	e6f1      	b.n	80011b0 <__aeabi_fsub+0x98>
 80013cc:	001a      	movs	r2, r3
 80013ce:	2520      	movs	r5, #32
 80013d0:	40ca      	lsrs	r2, r1
 80013d2:	1a69      	subs	r1, r5, r1
 80013d4:	408b      	lsls	r3, r1
 80013d6:	1e59      	subs	r1, r3, #1
 80013d8:	418b      	sbcs	r3, r1
 80013da:	4313      	orrs	r3, r2
 80013dc:	0005      	movs	r5, r0
 80013de:	199b      	adds	r3, r3, r6
 80013e0:	e750      	b.n	8001284 <__aeabi_fsub+0x16c>
 80013e2:	2e00      	cmp	r6, #0
 80013e4:	d094      	beq.n	8001310 <__aeabi_fsub+0x1f8>
 80013e6:	2401      	movs	r4, #1
 80013e8:	0033      	movs	r3, r6
 80013ea:	400c      	ands	r4, r1
 80013ec:	e73a      	b.n	8001264 <__aeabi_fsub+0x14c>
 80013ee:	000c      	movs	r4, r1
 80013f0:	2501      	movs	r5, #1
 80013f2:	1af3      	subs	r3, r6, r3
 80013f4:	e6f5      	b.n	80011e2 <__aeabi_fsub+0xca>
 80013f6:	0033      	movs	r3, r6
 80013f8:	e734      	b.n	8001264 <__aeabi_fsub+0x14c>
 80013fa:	199b      	adds	r3, r3, r6
 80013fc:	2200      	movs	r2, #0
 80013fe:	0159      	lsls	r1, r3, #5
 8001400:	d5c1      	bpl.n	8001386 <__aeabi_fsub+0x26e>
 8001402:	4a15      	ldr	r2, [pc, #84]	@ (8001458 <__aeabi_fsub+0x340>)
 8001404:	4013      	ands	r3, r2
 8001406:	08db      	lsrs	r3, r3, #3
 8001408:	2201      	movs	r2, #1
 800140a:	e72d      	b.n	8001268 <__aeabi_fsub+0x150>
 800140c:	2a00      	cmp	r2, #0
 800140e:	d100      	bne.n	8001412 <__aeabi_fsub+0x2fa>
 8001410:	e77e      	b.n	8001310 <__aeabi_fsub+0x1f8>
 8001412:	0013      	movs	r3, r2
 8001414:	2200      	movs	r2, #0
 8001416:	08db      	lsrs	r3, r3, #3
 8001418:	e726      	b.n	8001268 <__aeabi_fsub+0x150>
 800141a:	2380      	movs	r3, #128	@ 0x80
 800141c:	2400      	movs	r4, #0
 800141e:	20ff      	movs	r0, #255	@ 0xff
 8001420:	03db      	lsls	r3, r3, #15
 8001422:	e6f1      	b.n	8001208 <__aeabi_fsub+0xf0>
 8001424:	2a00      	cmp	r2, #0
 8001426:	d100      	bne.n	800142a <__aeabi_fsub+0x312>
 8001428:	e756      	b.n	80012d8 <__aeabi_fsub+0x1c0>
 800142a:	1b47      	subs	r7, r0, r5
 800142c:	003a      	movs	r2, r7
 800142e:	2d00      	cmp	r5, #0
 8001430:	d100      	bne.n	8001434 <__aeabi_fsub+0x31c>
 8001432:	e730      	b.n	8001296 <__aeabi_fsub+0x17e>
 8001434:	2280      	movs	r2, #128	@ 0x80
 8001436:	04d2      	lsls	r2, r2, #19
 8001438:	000c      	movs	r4, r1
 800143a:	4313      	orrs	r3, r2
 800143c:	e77f      	b.n	800133e <__aeabi_fsub+0x226>
 800143e:	2a00      	cmp	r2, #0
 8001440:	d100      	bne.n	8001444 <__aeabi_fsub+0x32c>
 8001442:	e701      	b.n	8001248 <__aeabi_fsub+0x130>
 8001444:	1b41      	subs	r1, r0, r5
 8001446:	2d00      	cmp	r5, #0
 8001448:	d101      	bne.n	800144e <__aeabi_fsub+0x336>
 800144a:	000a      	movs	r2, r1
 800144c:	e788      	b.n	8001360 <__aeabi_fsub+0x248>
 800144e:	2280      	movs	r2, #128	@ 0x80
 8001450:	04d2      	lsls	r2, r2, #19
 8001452:	4313      	orrs	r3, r2
 8001454:	e78b      	b.n	800136e <__aeabi_fsub+0x256>
 8001456:	46c0      	nop			@ (mov r8, r8)
 8001458:	fbffffff 	.word	0xfbffffff
 800145c:	7dffffff 	.word	0x7dffffff
>>>>>>> main

08001460 <__aeabi_fcmpun>:
 8001460:	0243      	lsls	r3, r0, #9
 8001462:	024a      	lsls	r2, r1, #9
 8001464:	0040      	lsls	r0, r0, #1
 8001466:	0049      	lsls	r1, r1, #1
 8001468:	0a5b      	lsrs	r3, r3, #9
 800146a:	0a52      	lsrs	r2, r2, #9
 800146c:	0e09      	lsrs	r1, r1, #24
 800146e:	0e00      	lsrs	r0, r0, #24
 8001470:	28ff      	cmp	r0, #255	@ 0xff
 8001472:	d006      	beq.n	8001482 <__aeabi_fcmpun+0x22>
 8001474:	2000      	movs	r0, #0
 8001476:	29ff      	cmp	r1, #255	@ 0xff
 8001478:	d102      	bne.n	8001480 <__aeabi_fcmpun+0x20>
 800147a:	1e53      	subs	r3, r2, #1
 800147c:	419a      	sbcs	r2, r3
 800147e:	0010      	movs	r0, r2
 8001480:	4770      	bx	lr
 8001482:	38fe      	subs	r0, #254	@ 0xfe
 8001484:	2b00      	cmp	r3, #0
 8001486:	d1fb      	bne.n	8001480 <__aeabi_fcmpun+0x20>
 8001488:	e7f4      	b.n	8001474 <__aeabi_fcmpun+0x14>
 800148a:	46c0      	nop			@ (mov r8, r8)

0800148c <__aeabi_f2iz>:
 800148c:	0241      	lsls	r1, r0, #9
 800148e:	0042      	lsls	r2, r0, #1
 8001490:	0fc3      	lsrs	r3, r0, #31
 8001492:	0a49      	lsrs	r1, r1, #9
 8001494:	2000      	movs	r0, #0
 8001496:	0e12      	lsrs	r2, r2, #24
 8001498:	2a7e      	cmp	r2, #126	@ 0x7e
 800149a:	dd03      	ble.n	80014a4 <__aeabi_f2iz+0x18>
 800149c:	2a9d      	cmp	r2, #157	@ 0x9d
 800149e:	dd02      	ble.n	80014a6 <__aeabi_f2iz+0x1a>
 80014a0:	4a09      	ldr	r2, [pc, #36]	@ (80014c8 <__aeabi_f2iz+0x3c>)
 80014a2:	1898      	adds	r0, r3, r2
 80014a4:	4770      	bx	lr
 80014a6:	2080      	movs	r0, #128	@ 0x80
 80014a8:	0400      	lsls	r0, r0, #16
 80014aa:	4301      	orrs	r1, r0
 80014ac:	2a95      	cmp	r2, #149	@ 0x95
 80014ae:	dc07      	bgt.n	80014c0 <__aeabi_f2iz+0x34>
 80014b0:	2096      	movs	r0, #150	@ 0x96
 80014b2:	1a82      	subs	r2, r0, r2
 80014b4:	40d1      	lsrs	r1, r2
 80014b6:	4248      	negs	r0, r1
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d1f3      	bne.n	80014a4 <__aeabi_f2iz+0x18>
 80014bc:	0008      	movs	r0, r1
 80014be:	e7f1      	b.n	80014a4 <__aeabi_f2iz+0x18>
 80014c0:	3a96      	subs	r2, #150	@ 0x96
 80014c2:	4091      	lsls	r1, r2
 80014c4:	e7f7      	b.n	80014b6 <__aeabi_f2iz+0x2a>
 80014c6:	46c0      	nop			@ (mov r8, r8)
 80014c8:	7fffffff 	.word	0x7fffffff

<<<<<<< HEAD
08001460 <__aeabi_i2f>:
 8001460:	b570      	push	{r4, r5, r6, lr}
 8001462:	2800      	cmp	r0, #0
 8001464:	d013      	beq.n	800148e <__aeabi_i2f+0x2e>
 8001466:	17c3      	asrs	r3, r0, #31
 8001468:	18c5      	adds	r5, r0, r3
 800146a:	405d      	eors	r5, r3
 800146c:	0fc4      	lsrs	r4, r0, #31
 800146e:	0028      	movs	r0, r5
 8001470:	f001 ffc4 	bl	80033fc <__clzsi2>
 8001474:	239e      	movs	r3, #158	@ 0x9e
 8001476:	0001      	movs	r1, r0
 8001478:	1a1b      	subs	r3, r3, r0
 800147a:	2b96      	cmp	r3, #150	@ 0x96
 800147c:	dc0f      	bgt.n	800149e <__aeabi_i2f+0x3e>
 800147e:	2808      	cmp	r0, #8
 8001480:	d034      	beq.n	80014ec <__aeabi_i2f+0x8c>
 8001482:	3908      	subs	r1, #8
 8001484:	408d      	lsls	r5, r1
 8001486:	026d      	lsls	r5, r5, #9
 8001488:	0a6d      	lsrs	r5, r5, #9
 800148a:	b2d8      	uxtb	r0, r3
 800148c:	e002      	b.n	8001494 <__aeabi_i2f+0x34>
 800148e:	2400      	movs	r4, #0
 8001490:	2000      	movs	r0, #0
 8001492:	2500      	movs	r5, #0
 8001494:	05c0      	lsls	r0, r0, #23
 8001496:	4328      	orrs	r0, r5
 8001498:	07e4      	lsls	r4, r4, #31
 800149a:	4320      	orrs	r0, r4
 800149c:	bd70      	pop	{r4, r5, r6, pc}
 800149e:	2b99      	cmp	r3, #153	@ 0x99
 80014a0:	dc16      	bgt.n	80014d0 <__aeabi_i2f+0x70>
 80014a2:	1f42      	subs	r2, r0, #5
 80014a4:	2805      	cmp	r0, #5
 80014a6:	d000      	beq.n	80014aa <__aeabi_i2f+0x4a>
 80014a8:	4095      	lsls	r5, r2
 80014aa:	002a      	movs	r2, r5
 80014ac:	4811      	ldr	r0, [pc, #68]	@ (80014f4 <__aeabi_i2f+0x94>)
 80014ae:	4002      	ands	r2, r0
 80014b0:	076e      	lsls	r6, r5, #29
 80014b2:	d009      	beq.n	80014c8 <__aeabi_i2f+0x68>
 80014b4:	260f      	movs	r6, #15
 80014b6:	4035      	ands	r5, r6
 80014b8:	2d04      	cmp	r5, #4
 80014ba:	d005      	beq.n	80014c8 <__aeabi_i2f+0x68>
 80014bc:	3204      	adds	r2, #4
 80014be:	0155      	lsls	r5, r2, #5
 80014c0:	d502      	bpl.n	80014c8 <__aeabi_i2f+0x68>
 80014c2:	239f      	movs	r3, #159	@ 0x9f
 80014c4:	4002      	ands	r2, r0
 80014c6:	1a5b      	subs	r3, r3, r1
 80014c8:	0192      	lsls	r2, r2, #6
 80014ca:	0a55      	lsrs	r5, r2, #9
 80014cc:	b2d8      	uxtb	r0, r3
 80014ce:	e7e1      	b.n	8001494 <__aeabi_i2f+0x34>
 80014d0:	2205      	movs	r2, #5
 80014d2:	1a12      	subs	r2, r2, r0
 80014d4:	0028      	movs	r0, r5
 80014d6:	40d0      	lsrs	r0, r2
 80014d8:	0002      	movs	r2, r0
 80014da:	0008      	movs	r0, r1
 80014dc:	301b      	adds	r0, #27
 80014de:	4085      	lsls	r5, r0
 80014e0:	0028      	movs	r0, r5
 80014e2:	1e45      	subs	r5, r0, #1
 80014e4:	41a8      	sbcs	r0, r5
 80014e6:	4302      	orrs	r2, r0
 80014e8:	0015      	movs	r5, r2
 80014ea:	e7de      	b.n	80014aa <__aeabi_i2f+0x4a>
 80014ec:	026d      	lsls	r5, r5, #9
 80014ee:	2096      	movs	r0, #150	@ 0x96
 80014f0:	0a6d      	lsrs	r5, r5, #9
 80014f2:	e7cf      	b.n	8001494 <__aeabi_i2f+0x34>
 80014f4:	fbffffff 	.word	0xfbffffff

080014f8 <__aeabi_ui2f>:
 80014f8:	b570      	push	{r4, r5, r6, lr}
 80014fa:	1e04      	subs	r4, r0, #0
 80014fc:	d00e      	beq.n	800151c <__aeabi_ui2f+0x24>
 80014fe:	f001 ff7d 	bl	80033fc <__clzsi2>
 8001502:	239e      	movs	r3, #158	@ 0x9e
 8001504:	0001      	movs	r1, r0
 8001506:	1a1b      	subs	r3, r3, r0
 8001508:	2b96      	cmp	r3, #150	@ 0x96
 800150a:	dc0c      	bgt.n	8001526 <__aeabi_ui2f+0x2e>
 800150c:	2808      	cmp	r0, #8
 800150e:	d02f      	beq.n	8001570 <__aeabi_ui2f+0x78>
 8001510:	3908      	subs	r1, #8
 8001512:	408c      	lsls	r4, r1
 8001514:	0264      	lsls	r4, r4, #9
 8001516:	0a64      	lsrs	r4, r4, #9
 8001518:	b2d8      	uxtb	r0, r3
 800151a:	e001      	b.n	8001520 <__aeabi_ui2f+0x28>
 800151c:	2000      	movs	r0, #0
 800151e:	2400      	movs	r4, #0
 8001520:	05c0      	lsls	r0, r0, #23
 8001522:	4320      	orrs	r0, r4
 8001524:	bd70      	pop	{r4, r5, r6, pc}
 8001526:	2b99      	cmp	r3, #153	@ 0x99
 8001528:	dc16      	bgt.n	8001558 <__aeabi_ui2f+0x60>
 800152a:	1f42      	subs	r2, r0, #5
 800152c:	2805      	cmp	r0, #5
 800152e:	d000      	beq.n	8001532 <__aeabi_ui2f+0x3a>
 8001530:	4094      	lsls	r4, r2
 8001532:	0022      	movs	r2, r4
 8001534:	4810      	ldr	r0, [pc, #64]	@ (8001578 <__aeabi_ui2f+0x80>)
 8001536:	4002      	ands	r2, r0
 8001538:	0765      	lsls	r5, r4, #29
 800153a:	d009      	beq.n	8001550 <__aeabi_ui2f+0x58>
 800153c:	250f      	movs	r5, #15
 800153e:	402c      	ands	r4, r5
 8001540:	2c04      	cmp	r4, #4
 8001542:	d005      	beq.n	8001550 <__aeabi_ui2f+0x58>
 8001544:	3204      	adds	r2, #4
 8001546:	0154      	lsls	r4, r2, #5
 8001548:	d502      	bpl.n	8001550 <__aeabi_ui2f+0x58>
 800154a:	239f      	movs	r3, #159	@ 0x9f
 800154c:	4002      	ands	r2, r0
 800154e:	1a5b      	subs	r3, r3, r1
 8001550:	0192      	lsls	r2, r2, #6
 8001552:	0a54      	lsrs	r4, r2, #9
 8001554:	b2d8      	uxtb	r0, r3
 8001556:	e7e3      	b.n	8001520 <__aeabi_ui2f+0x28>
 8001558:	0002      	movs	r2, r0
 800155a:	0020      	movs	r0, r4
 800155c:	321b      	adds	r2, #27
 800155e:	4090      	lsls	r0, r2
 8001560:	0002      	movs	r2, r0
 8001562:	1e50      	subs	r0, r2, #1
 8001564:	4182      	sbcs	r2, r0
 8001566:	2005      	movs	r0, #5
 8001568:	1a40      	subs	r0, r0, r1
 800156a:	40c4      	lsrs	r4, r0
 800156c:	4314      	orrs	r4, r2
 800156e:	e7e0      	b.n	8001532 <__aeabi_ui2f+0x3a>
 8001570:	0264      	lsls	r4, r4, #9
 8001572:	2096      	movs	r0, #150	@ 0x96
 8001574:	0a64      	lsrs	r4, r4, #9
 8001576:	e7d3      	b.n	8001520 <__aeabi_ui2f+0x28>
 8001578:	fbffffff 	.word	0xfbffffff

0800157c <__aeabi_dadd>:
 800157c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800157e:	4657      	mov	r7, sl
 8001580:	464e      	mov	r6, r9
 8001582:	4645      	mov	r5, r8
 8001584:	46de      	mov	lr, fp
 8001586:	b5e0      	push	{r5, r6, r7, lr}
 8001588:	b083      	sub	sp, #12
 800158a:	9000      	str	r0, [sp, #0]
 800158c:	9101      	str	r1, [sp, #4]
 800158e:	030c      	lsls	r4, r1, #12
 8001590:	004f      	lsls	r7, r1, #1
 8001592:	0fce      	lsrs	r6, r1, #31
 8001594:	0a61      	lsrs	r1, r4, #9
 8001596:	9c00      	ldr	r4, [sp, #0]
 8001598:	031d      	lsls	r5, r3, #12
 800159a:	0f64      	lsrs	r4, r4, #29
 800159c:	430c      	orrs	r4, r1
 800159e:	9900      	ldr	r1, [sp, #0]
 80015a0:	9200      	str	r2, [sp, #0]
 80015a2:	9301      	str	r3, [sp, #4]
 80015a4:	00c8      	lsls	r0, r1, #3
 80015a6:	0059      	lsls	r1, r3, #1
 80015a8:	0d4b      	lsrs	r3, r1, #21
 80015aa:	4699      	mov	r9, r3
 80015ac:	9a00      	ldr	r2, [sp, #0]
 80015ae:	9b01      	ldr	r3, [sp, #4]
 80015b0:	0a6d      	lsrs	r5, r5, #9
 80015b2:	0fd9      	lsrs	r1, r3, #31
 80015b4:	0f53      	lsrs	r3, r2, #29
 80015b6:	432b      	orrs	r3, r5
 80015b8:	469a      	mov	sl, r3
 80015ba:	9b00      	ldr	r3, [sp, #0]
 80015bc:	0d7f      	lsrs	r7, r7, #21
 80015be:	00da      	lsls	r2, r3, #3
 80015c0:	4694      	mov	ip, r2
 80015c2:	464a      	mov	r2, r9
 80015c4:	46b0      	mov	r8, r6
 80015c6:	1aba      	subs	r2, r7, r2
 80015c8:	428e      	cmp	r6, r1
 80015ca:	d100      	bne.n	80015ce <__aeabi_dadd+0x52>
 80015cc:	e0b0      	b.n	8001730 <__aeabi_dadd+0x1b4>
 80015ce:	2a00      	cmp	r2, #0
 80015d0:	dc00      	bgt.n	80015d4 <__aeabi_dadd+0x58>
 80015d2:	e078      	b.n	80016c6 <__aeabi_dadd+0x14a>
 80015d4:	4649      	mov	r1, r9
 80015d6:	2900      	cmp	r1, #0
 80015d8:	d100      	bne.n	80015dc <__aeabi_dadd+0x60>
 80015da:	e0e9      	b.n	80017b0 <__aeabi_dadd+0x234>
 80015dc:	49c9      	ldr	r1, [pc, #804]	@ (8001904 <__aeabi_dadd+0x388>)
 80015de:	428f      	cmp	r7, r1
 80015e0:	d100      	bne.n	80015e4 <__aeabi_dadd+0x68>
 80015e2:	e195      	b.n	8001910 <__aeabi_dadd+0x394>
 80015e4:	2501      	movs	r5, #1
 80015e6:	2a38      	cmp	r2, #56	@ 0x38
 80015e8:	dc16      	bgt.n	8001618 <__aeabi_dadd+0x9c>
 80015ea:	2180      	movs	r1, #128	@ 0x80
 80015ec:	4653      	mov	r3, sl
 80015ee:	0409      	lsls	r1, r1, #16
 80015f0:	430b      	orrs	r3, r1
 80015f2:	469a      	mov	sl, r3
 80015f4:	2a1f      	cmp	r2, #31
 80015f6:	dd00      	ble.n	80015fa <__aeabi_dadd+0x7e>
 80015f8:	e1e7      	b.n	80019ca <__aeabi_dadd+0x44e>
 80015fa:	2120      	movs	r1, #32
 80015fc:	4655      	mov	r5, sl
 80015fe:	1a8b      	subs	r3, r1, r2
 8001600:	4661      	mov	r1, ip
 8001602:	409d      	lsls	r5, r3
 8001604:	40d1      	lsrs	r1, r2
 8001606:	430d      	orrs	r5, r1
 8001608:	4661      	mov	r1, ip
 800160a:	4099      	lsls	r1, r3
 800160c:	1e4b      	subs	r3, r1, #1
 800160e:	4199      	sbcs	r1, r3
 8001610:	4653      	mov	r3, sl
 8001612:	40d3      	lsrs	r3, r2
 8001614:	430d      	orrs	r5, r1
 8001616:	1ae4      	subs	r4, r4, r3
 8001618:	1b45      	subs	r5, r0, r5
 800161a:	42a8      	cmp	r0, r5
 800161c:	4180      	sbcs	r0, r0
 800161e:	4240      	negs	r0, r0
 8001620:	1a24      	subs	r4, r4, r0
 8001622:	0223      	lsls	r3, r4, #8
 8001624:	d400      	bmi.n	8001628 <__aeabi_dadd+0xac>
 8001626:	e10f      	b.n	8001848 <__aeabi_dadd+0x2cc>
 8001628:	0264      	lsls	r4, r4, #9
 800162a:	0a64      	lsrs	r4, r4, #9
 800162c:	2c00      	cmp	r4, #0
 800162e:	d100      	bne.n	8001632 <__aeabi_dadd+0xb6>
 8001630:	e139      	b.n	80018a6 <__aeabi_dadd+0x32a>
 8001632:	0020      	movs	r0, r4
 8001634:	f001 fee2 	bl	80033fc <__clzsi2>
 8001638:	0003      	movs	r3, r0
 800163a:	3b08      	subs	r3, #8
 800163c:	2120      	movs	r1, #32
 800163e:	0028      	movs	r0, r5
 8001640:	1aca      	subs	r2, r1, r3
 8001642:	40d0      	lsrs	r0, r2
 8001644:	409c      	lsls	r4, r3
 8001646:	0002      	movs	r2, r0
 8001648:	409d      	lsls	r5, r3
 800164a:	4322      	orrs	r2, r4
 800164c:	429f      	cmp	r7, r3
 800164e:	dd00      	ble.n	8001652 <__aeabi_dadd+0xd6>
 8001650:	e173      	b.n	800193a <__aeabi_dadd+0x3be>
 8001652:	1bd8      	subs	r0, r3, r7
 8001654:	3001      	adds	r0, #1
 8001656:	1a09      	subs	r1, r1, r0
 8001658:	002c      	movs	r4, r5
 800165a:	408d      	lsls	r5, r1
 800165c:	40c4      	lsrs	r4, r0
 800165e:	1e6b      	subs	r3, r5, #1
 8001660:	419d      	sbcs	r5, r3
 8001662:	0013      	movs	r3, r2
 8001664:	40c2      	lsrs	r2, r0
 8001666:	408b      	lsls	r3, r1
 8001668:	4325      	orrs	r5, r4
 800166a:	2700      	movs	r7, #0
 800166c:	0014      	movs	r4, r2
 800166e:	431d      	orrs	r5, r3
 8001670:	076b      	lsls	r3, r5, #29
 8001672:	d009      	beq.n	8001688 <__aeabi_dadd+0x10c>
 8001674:	230f      	movs	r3, #15
 8001676:	402b      	ands	r3, r5
 8001678:	2b04      	cmp	r3, #4
 800167a:	d005      	beq.n	8001688 <__aeabi_dadd+0x10c>
 800167c:	1d2b      	adds	r3, r5, #4
 800167e:	42ab      	cmp	r3, r5
 8001680:	41ad      	sbcs	r5, r5
 8001682:	426d      	negs	r5, r5
 8001684:	1964      	adds	r4, r4, r5
 8001686:	001d      	movs	r5, r3
 8001688:	0223      	lsls	r3, r4, #8
 800168a:	d400      	bmi.n	800168e <__aeabi_dadd+0x112>
 800168c:	e12d      	b.n	80018ea <__aeabi_dadd+0x36e>
 800168e:	4a9d      	ldr	r2, [pc, #628]	@ (8001904 <__aeabi_dadd+0x388>)
 8001690:	3701      	adds	r7, #1
 8001692:	4297      	cmp	r7, r2
 8001694:	d100      	bne.n	8001698 <__aeabi_dadd+0x11c>
 8001696:	e0d3      	b.n	8001840 <__aeabi_dadd+0x2c4>
 8001698:	4646      	mov	r6, r8
 800169a:	499b      	ldr	r1, [pc, #620]	@ (8001908 <__aeabi_dadd+0x38c>)
 800169c:	08ed      	lsrs	r5, r5, #3
 800169e:	4021      	ands	r1, r4
 80016a0:	074a      	lsls	r2, r1, #29
 80016a2:	432a      	orrs	r2, r5
 80016a4:	057c      	lsls	r4, r7, #21
 80016a6:	024d      	lsls	r5, r1, #9
 80016a8:	0b2d      	lsrs	r5, r5, #12
 80016aa:	0d64      	lsrs	r4, r4, #21
 80016ac:	0524      	lsls	r4, r4, #20
 80016ae:	432c      	orrs	r4, r5
 80016b0:	07f6      	lsls	r6, r6, #31
 80016b2:	4334      	orrs	r4, r6
 80016b4:	0010      	movs	r0, r2
 80016b6:	0021      	movs	r1, r4
 80016b8:	b003      	add	sp, #12
 80016ba:	bcf0      	pop	{r4, r5, r6, r7}
 80016bc:	46bb      	mov	fp, r7
 80016be:	46b2      	mov	sl, r6
 80016c0:	46a9      	mov	r9, r5
 80016c2:	46a0      	mov	r8, r4
 80016c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016c6:	2a00      	cmp	r2, #0
 80016c8:	d100      	bne.n	80016cc <__aeabi_dadd+0x150>
 80016ca:	e084      	b.n	80017d6 <__aeabi_dadd+0x25a>
 80016cc:	464a      	mov	r2, r9
 80016ce:	1bd2      	subs	r2, r2, r7
 80016d0:	2f00      	cmp	r7, #0
 80016d2:	d000      	beq.n	80016d6 <__aeabi_dadd+0x15a>
 80016d4:	e16d      	b.n	80019b2 <__aeabi_dadd+0x436>
 80016d6:	0025      	movs	r5, r4
 80016d8:	4305      	orrs	r5, r0
 80016da:	d100      	bne.n	80016de <__aeabi_dadd+0x162>
 80016dc:	e127      	b.n	800192e <__aeabi_dadd+0x3b2>
 80016de:	1e56      	subs	r6, r2, #1
 80016e0:	2a01      	cmp	r2, #1
 80016e2:	d100      	bne.n	80016e6 <__aeabi_dadd+0x16a>
 80016e4:	e23b      	b.n	8001b5e <__aeabi_dadd+0x5e2>
 80016e6:	4d87      	ldr	r5, [pc, #540]	@ (8001904 <__aeabi_dadd+0x388>)
 80016e8:	42aa      	cmp	r2, r5
 80016ea:	d100      	bne.n	80016ee <__aeabi_dadd+0x172>
 80016ec:	e26a      	b.n	8001bc4 <__aeabi_dadd+0x648>
 80016ee:	2501      	movs	r5, #1
 80016f0:	2e38      	cmp	r6, #56	@ 0x38
 80016f2:	dc12      	bgt.n	800171a <__aeabi_dadd+0x19e>
 80016f4:	0032      	movs	r2, r6
 80016f6:	2a1f      	cmp	r2, #31
 80016f8:	dd00      	ble.n	80016fc <__aeabi_dadd+0x180>
 80016fa:	e1f8      	b.n	8001aee <__aeabi_dadd+0x572>
 80016fc:	2620      	movs	r6, #32
 80016fe:	0025      	movs	r5, r4
 8001700:	1ab6      	subs	r6, r6, r2
 8001702:	0007      	movs	r7, r0
 8001704:	4653      	mov	r3, sl
 8001706:	40b0      	lsls	r0, r6
 8001708:	40d4      	lsrs	r4, r2
 800170a:	40b5      	lsls	r5, r6
 800170c:	40d7      	lsrs	r7, r2
 800170e:	1e46      	subs	r6, r0, #1
 8001710:	41b0      	sbcs	r0, r6
 8001712:	1b1b      	subs	r3, r3, r4
 8001714:	469a      	mov	sl, r3
 8001716:	433d      	orrs	r5, r7
 8001718:	4305      	orrs	r5, r0
 800171a:	4662      	mov	r2, ip
 800171c:	1b55      	subs	r5, r2, r5
 800171e:	45ac      	cmp	ip, r5
 8001720:	4192      	sbcs	r2, r2
 8001722:	4653      	mov	r3, sl
 8001724:	4252      	negs	r2, r2
 8001726:	000e      	movs	r6, r1
 8001728:	464f      	mov	r7, r9
 800172a:	4688      	mov	r8, r1
 800172c:	1a9c      	subs	r4, r3, r2
 800172e:	e778      	b.n	8001622 <__aeabi_dadd+0xa6>
 8001730:	2a00      	cmp	r2, #0
 8001732:	dc00      	bgt.n	8001736 <__aeabi_dadd+0x1ba>
 8001734:	e08e      	b.n	8001854 <__aeabi_dadd+0x2d8>
 8001736:	4649      	mov	r1, r9
 8001738:	2900      	cmp	r1, #0
 800173a:	d175      	bne.n	8001828 <__aeabi_dadd+0x2ac>
 800173c:	4661      	mov	r1, ip
 800173e:	4653      	mov	r3, sl
 8001740:	4319      	orrs	r1, r3
 8001742:	d100      	bne.n	8001746 <__aeabi_dadd+0x1ca>
 8001744:	e0f6      	b.n	8001934 <__aeabi_dadd+0x3b8>
 8001746:	1e51      	subs	r1, r2, #1
 8001748:	2a01      	cmp	r2, #1
 800174a:	d100      	bne.n	800174e <__aeabi_dadd+0x1d2>
 800174c:	e191      	b.n	8001a72 <__aeabi_dadd+0x4f6>
 800174e:	4d6d      	ldr	r5, [pc, #436]	@ (8001904 <__aeabi_dadd+0x388>)
 8001750:	42aa      	cmp	r2, r5
 8001752:	d100      	bne.n	8001756 <__aeabi_dadd+0x1da>
 8001754:	e0dc      	b.n	8001910 <__aeabi_dadd+0x394>
 8001756:	2501      	movs	r5, #1
 8001758:	2938      	cmp	r1, #56	@ 0x38
 800175a:	dc14      	bgt.n	8001786 <__aeabi_dadd+0x20a>
 800175c:	000a      	movs	r2, r1
 800175e:	2a1f      	cmp	r2, #31
 8001760:	dd00      	ble.n	8001764 <__aeabi_dadd+0x1e8>
 8001762:	e1a2      	b.n	8001aaa <__aeabi_dadd+0x52e>
 8001764:	2120      	movs	r1, #32
 8001766:	4653      	mov	r3, sl
 8001768:	1a89      	subs	r1, r1, r2
 800176a:	408b      	lsls	r3, r1
 800176c:	001d      	movs	r5, r3
 800176e:	4663      	mov	r3, ip
 8001770:	40d3      	lsrs	r3, r2
 8001772:	431d      	orrs	r5, r3
 8001774:	4663      	mov	r3, ip
 8001776:	408b      	lsls	r3, r1
 8001778:	0019      	movs	r1, r3
 800177a:	1e4b      	subs	r3, r1, #1
 800177c:	4199      	sbcs	r1, r3
 800177e:	4653      	mov	r3, sl
 8001780:	40d3      	lsrs	r3, r2
 8001782:	430d      	orrs	r5, r1
 8001784:	18e4      	adds	r4, r4, r3
 8001786:	182d      	adds	r5, r5, r0
 8001788:	4285      	cmp	r5, r0
 800178a:	4180      	sbcs	r0, r0
 800178c:	4240      	negs	r0, r0
 800178e:	1824      	adds	r4, r4, r0
 8001790:	0223      	lsls	r3, r4, #8
 8001792:	d559      	bpl.n	8001848 <__aeabi_dadd+0x2cc>
 8001794:	4b5b      	ldr	r3, [pc, #364]	@ (8001904 <__aeabi_dadd+0x388>)
 8001796:	3701      	adds	r7, #1
 8001798:	429f      	cmp	r7, r3
 800179a:	d051      	beq.n	8001840 <__aeabi_dadd+0x2c4>
 800179c:	2101      	movs	r1, #1
 800179e:	4b5a      	ldr	r3, [pc, #360]	@ (8001908 <__aeabi_dadd+0x38c>)
 80017a0:	086a      	lsrs	r2, r5, #1
 80017a2:	401c      	ands	r4, r3
 80017a4:	4029      	ands	r1, r5
 80017a6:	430a      	orrs	r2, r1
 80017a8:	07e5      	lsls	r5, r4, #31
 80017aa:	4315      	orrs	r5, r2
 80017ac:	0864      	lsrs	r4, r4, #1
 80017ae:	e75f      	b.n	8001670 <__aeabi_dadd+0xf4>
 80017b0:	4661      	mov	r1, ip
 80017b2:	4653      	mov	r3, sl
 80017b4:	4319      	orrs	r1, r3
 80017b6:	d100      	bne.n	80017ba <__aeabi_dadd+0x23e>
 80017b8:	e0bc      	b.n	8001934 <__aeabi_dadd+0x3b8>
 80017ba:	1e51      	subs	r1, r2, #1
 80017bc:	2a01      	cmp	r2, #1
 80017be:	d100      	bne.n	80017c2 <__aeabi_dadd+0x246>
 80017c0:	e164      	b.n	8001a8c <__aeabi_dadd+0x510>
 80017c2:	4d50      	ldr	r5, [pc, #320]	@ (8001904 <__aeabi_dadd+0x388>)
 80017c4:	42aa      	cmp	r2, r5
 80017c6:	d100      	bne.n	80017ca <__aeabi_dadd+0x24e>
 80017c8:	e16a      	b.n	8001aa0 <__aeabi_dadd+0x524>
 80017ca:	2501      	movs	r5, #1
 80017cc:	2938      	cmp	r1, #56	@ 0x38
 80017ce:	dd00      	ble.n	80017d2 <__aeabi_dadd+0x256>
 80017d0:	e722      	b.n	8001618 <__aeabi_dadd+0x9c>
 80017d2:	000a      	movs	r2, r1
 80017d4:	e70e      	b.n	80015f4 <__aeabi_dadd+0x78>
 80017d6:	4a4d      	ldr	r2, [pc, #308]	@ (800190c <__aeabi_dadd+0x390>)
 80017d8:	1c7d      	adds	r5, r7, #1
 80017da:	4215      	tst	r5, r2
 80017dc:	d000      	beq.n	80017e0 <__aeabi_dadd+0x264>
 80017de:	e0d0      	b.n	8001982 <__aeabi_dadd+0x406>
 80017e0:	0025      	movs	r5, r4
 80017e2:	4662      	mov	r2, ip
 80017e4:	4653      	mov	r3, sl
 80017e6:	4305      	orrs	r5, r0
 80017e8:	431a      	orrs	r2, r3
 80017ea:	2f00      	cmp	r7, #0
 80017ec:	d000      	beq.n	80017f0 <__aeabi_dadd+0x274>
 80017ee:	e137      	b.n	8001a60 <__aeabi_dadd+0x4e4>
 80017f0:	2d00      	cmp	r5, #0
 80017f2:	d100      	bne.n	80017f6 <__aeabi_dadd+0x27a>
 80017f4:	e1a8      	b.n	8001b48 <__aeabi_dadd+0x5cc>
 80017f6:	2a00      	cmp	r2, #0
 80017f8:	d100      	bne.n	80017fc <__aeabi_dadd+0x280>
 80017fa:	e16a      	b.n	8001ad2 <__aeabi_dadd+0x556>
 80017fc:	4663      	mov	r3, ip
 80017fe:	1ac5      	subs	r5, r0, r3
 8001800:	4653      	mov	r3, sl
 8001802:	1ae2      	subs	r2, r4, r3
 8001804:	42a8      	cmp	r0, r5
 8001806:	419b      	sbcs	r3, r3
 8001808:	425b      	negs	r3, r3
 800180a:	1ad3      	subs	r3, r2, r3
 800180c:	021a      	lsls	r2, r3, #8
 800180e:	d400      	bmi.n	8001812 <__aeabi_dadd+0x296>
 8001810:	e203      	b.n	8001c1a <__aeabi_dadd+0x69e>
 8001812:	4663      	mov	r3, ip
 8001814:	1a1d      	subs	r5, r3, r0
 8001816:	45ac      	cmp	ip, r5
 8001818:	4192      	sbcs	r2, r2
 800181a:	4653      	mov	r3, sl
 800181c:	4252      	negs	r2, r2
 800181e:	1b1c      	subs	r4, r3, r4
 8001820:	000e      	movs	r6, r1
 8001822:	4688      	mov	r8, r1
 8001824:	1aa4      	subs	r4, r4, r2
 8001826:	e723      	b.n	8001670 <__aeabi_dadd+0xf4>
 8001828:	4936      	ldr	r1, [pc, #216]	@ (8001904 <__aeabi_dadd+0x388>)
 800182a:	428f      	cmp	r7, r1
 800182c:	d070      	beq.n	8001910 <__aeabi_dadd+0x394>
 800182e:	2501      	movs	r5, #1
 8001830:	2a38      	cmp	r2, #56	@ 0x38
 8001832:	dca8      	bgt.n	8001786 <__aeabi_dadd+0x20a>
 8001834:	2180      	movs	r1, #128	@ 0x80
 8001836:	4653      	mov	r3, sl
 8001838:	0409      	lsls	r1, r1, #16
 800183a:	430b      	orrs	r3, r1
 800183c:	469a      	mov	sl, r3
 800183e:	e78e      	b.n	800175e <__aeabi_dadd+0x1e2>
 8001840:	003c      	movs	r4, r7
 8001842:	2500      	movs	r5, #0
 8001844:	2200      	movs	r2, #0
 8001846:	e731      	b.n	80016ac <__aeabi_dadd+0x130>
 8001848:	2307      	movs	r3, #7
 800184a:	402b      	ands	r3, r5
 800184c:	2b00      	cmp	r3, #0
 800184e:	d000      	beq.n	8001852 <__aeabi_dadd+0x2d6>
 8001850:	e710      	b.n	8001674 <__aeabi_dadd+0xf8>
 8001852:	e093      	b.n	800197c <__aeabi_dadd+0x400>
 8001854:	2a00      	cmp	r2, #0
 8001856:	d074      	beq.n	8001942 <__aeabi_dadd+0x3c6>
 8001858:	464a      	mov	r2, r9
 800185a:	1bd2      	subs	r2, r2, r7
 800185c:	2f00      	cmp	r7, #0
 800185e:	d100      	bne.n	8001862 <__aeabi_dadd+0x2e6>
 8001860:	e0c7      	b.n	80019f2 <__aeabi_dadd+0x476>
 8001862:	4928      	ldr	r1, [pc, #160]	@ (8001904 <__aeabi_dadd+0x388>)
 8001864:	4589      	cmp	r9, r1
 8001866:	d100      	bne.n	800186a <__aeabi_dadd+0x2ee>
 8001868:	e185      	b.n	8001b76 <__aeabi_dadd+0x5fa>
 800186a:	2501      	movs	r5, #1
 800186c:	2a38      	cmp	r2, #56	@ 0x38
 800186e:	dc12      	bgt.n	8001896 <__aeabi_dadd+0x31a>
 8001870:	2180      	movs	r1, #128	@ 0x80
 8001872:	0409      	lsls	r1, r1, #16
 8001874:	430c      	orrs	r4, r1
 8001876:	2a1f      	cmp	r2, #31
 8001878:	dd00      	ble.n	800187c <__aeabi_dadd+0x300>
 800187a:	e1ab      	b.n	8001bd4 <__aeabi_dadd+0x658>
 800187c:	2120      	movs	r1, #32
 800187e:	0025      	movs	r5, r4
 8001880:	1a89      	subs	r1, r1, r2
 8001882:	0007      	movs	r7, r0
 8001884:	4088      	lsls	r0, r1
 8001886:	408d      	lsls	r5, r1
 8001888:	40d7      	lsrs	r7, r2
 800188a:	1e41      	subs	r1, r0, #1
 800188c:	4188      	sbcs	r0, r1
 800188e:	40d4      	lsrs	r4, r2
 8001890:	433d      	orrs	r5, r7
 8001892:	4305      	orrs	r5, r0
 8001894:	44a2      	add	sl, r4
 8001896:	4465      	add	r5, ip
 8001898:	4565      	cmp	r5, ip
 800189a:	4192      	sbcs	r2, r2
 800189c:	4252      	negs	r2, r2
 800189e:	4452      	add	r2, sl
 80018a0:	0014      	movs	r4, r2
 80018a2:	464f      	mov	r7, r9
 80018a4:	e774      	b.n	8001790 <__aeabi_dadd+0x214>
 80018a6:	0028      	movs	r0, r5
 80018a8:	f001 fda8 	bl	80033fc <__clzsi2>
 80018ac:	0003      	movs	r3, r0
 80018ae:	3318      	adds	r3, #24
 80018b0:	2b1f      	cmp	r3, #31
 80018b2:	dc00      	bgt.n	80018b6 <__aeabi_dadd+0x33a>
 80018b4:	e6c2      	b.n	800163c <__aeabi_dadd+0xc0>
 80018b6:	002a      	movs	r2, r5
 80018b8:	3808      	subs	r0, #8
 80018ba:	4082      	lsls	r2, r0
 80018bc:	429f      	cmp	r7, r3
 80018be:	dd00      	ble.n	80018c2 <__aeabi_dadd+0x346>
 80018c0:	e0a9      	b.n	8001a16 <__aeabi_dadd+0x49a>
 80018c2:	1bdb      	subs	r3, r3, r7
 80018c4:	1c58      	adds	r0, r3, #1
 80018c6:	281f      	cmp	r0, #31
 80018c8:	dc00      	bgt.n	80018cc <__aeabi_dadd+0x350>
 80018ca:	e1ac      	b.n	8001c26 <__aeabi_dadd+0x6aa>
 80018cc:	0015      	movs	r5, r2
 80018ce:	3b1f      	subs	r3, #31
 80018d0:	40dd      	lsrs	r5, r3
 80018d2:	2820      	cmp	r0, #32
 80018d4:	d005      	beq.n	80018e2 <__aeabi_dadd+0x366>
 80018d6:	2340      	movs	r3, #64	@ 0x40
 80018d8:	1a1b      	subs	r3, r3, r0
 80018da:	409a      	lsls	r2, r3
 80018dc:	1e53      	subs	r3, r2, #1
 80018de:	419a      	sbcs	r2, r3
 80018e0:	4315      	orrs	r5, r2
 80018e2:	2307      	movs	r3, #7
 80018e4:	2700      	movs	r7, #0
 80018e6:	402b      	ands	r3, r5
 80018e8:	e7b0      	b.n	800184c <__aeabi_dadd+0x2d0>
 80018ea:	08ed      	lsrs	r5, r5, #3
 80018ec:	4b05      	ldr	r3, [pc, #20]	@ (8001904 <__aeabi_dadd+0x388>)
 80018ee:	0762      	lsls	r2, r4, #29
 80018f0:	432a      	orrs	r2, r5
 80018f2:	08e4      	lsrs	r4, r4, #3
 80018f4:	429f      	cmp	r7, r3
 80018f6:	d00f      	beq.n	8001918 <__aeabi_dadd+0x39c>
 80018f8:	0324      	lsls	r4, r4, #12
 80018fa:	0b25      	lsrs	r5, r4, #12
 80018fc:	057c      	lsls	r4, r7, #21
 80018fe:	0d64      	lsrs	r4, r4, #21
 8001900:	e6d4      	b.n	80016ac <__aeabi_dadd+0x130>
 8001902:	46c0      	nop			@ (mov r8, r8)
 8001904:	000007ff 	.word	0x000007ff
 8001908:	ff7fffff 	.word	0xff7fffff
 800190c:	000007fe 	.word	0x000007fe
 8001910:	08c0      	lsrs	r0, r0, #3
 8001912:	0762      	lsls	r2, r4, #29
 8001914:	4302      	orrs	r2, r0
 8001916:	08e4      	lsrs	r4, r4, #3
 8001918:	0013      	movs	r3, r2
 800191a:	4323      	orrs	r3, r4
 800191c:	d100      	bne.n	8001920 <__aeabi_dadd+0x3a4>
 800191e:	e186      	b.n	8001c2e <__aeabi_dadd+0x6b2>
 8001920:	2580      	movs	r5, #128	@ 0x80
 8001922:	032d      	lsls	r5, r5, #12
 8001924:	4325      	orrs	r5, r4
 8001926:	032d      	lsls	r5, r5, #12
 8001928:	4cc3      	ldr	r4, [pc, #780]	@ (8001c38 <__aeabi_dadd+0x6bc>)
 800192a:	0b2d      	lsrs	r5, r5, #12
 800192c:	e6be      	b.n	80016ac <__aeabi_dadd+0x130>
 800192e:	4660      	mov	r0, ip
 8001930:	4654      	mov	r4, sl
 8001932:	000e      	movs	r6, r1
 8001934:	0017      	movs	r7, r2
 8001936:	08c5      	lsrs	r5, r0, #3
 8001938:	e7d8      	b.n	80018ec <__aeabi_dadd+0x370>
 800193a:	4cc0      	ldr	r4, [pc, #768]	@ (8001c3c <__aeabi_dadd+0x6c0>)
 800193c:	1aff      	subs	r7, r7, r3
 800193e:	4014      	ands	r4, r2
 8001940:	e696      	b.n	8001670 <__aeabi_dadd+0xf4>
 8001942:	4abf      	ldr	r2, [pc, #764]	@ (8001c40 <__aeabi_dadd+0x6c4>)
 8001944:	1c79      	adds	r1, r7, #1
 8001946:	4211      	tst	r1, r2
 8001948:	d16b      	bne.n	8001a22 <__aeabi_dadd+0x4a6>
 800194a:	0022      	movs	r2, r4
 800194c:	4302      	orrs	r2, r0
 800194e:	2f00      	cmp	r7, #0
 8001950:	d000      	beq.n	8001954 <__aeabi_dadd+0x3d8>
 8001952:	e0db      	b.n	8001b0c <__aeabi_dadd+0x590>
 8001954:	2a00      	cmp	r2, #0
 8001956:	d100      	bne.n	800195a <__aeabi_dadd+0x3de>
 8001958:	e12d      	b.n	8001bb6 <__aeabi_dadd+0x63a>
 800195a:	4662      	mov	r2, ip
 800195c:	4653      	mov	r3, sl
 800195e:	431a      	orrs	r2, r3
 8001960:	d100      	bne.n	8001964 <__aeabi_dadd+0x3e8>
 8001962:	e0b6      	b.n	8001ad2 <__aeabi_dadd+0x556>
 8001964:	4663      	mov	r3, ip
 8001966:	18c5      	adds	r5, r0, r3
 8001968:	4285      	cmp	r5, r0
 800196a:	4180      	sbcs	r0, r0
 800196c:	4454      	add	r4, sl
 800196e:	4240      	negs	r0, r0
 8001970:	1824      	adds	r4, r4, r0
 8001972:	0223      	lsls	r3, r4, #8
 8001974:	d502      	bpl.n	800197c <__aeabi_dadd+0x400>
 8001976:	000f      	movs	r7, r1
 8001978:	4bb0      	ldr	r3, [pc, #704]	@ (8001c3c <__aeabi_dadd+0x6c0>)
 800197a:	401c      	ands	r4, r3
 800197c:	003a      	movs	r2, r7
 800197e:	0028      	movs	r0, r5
 8001980:	e7d8      	b.n	8001934 <__aeabi_dadd+0x3b8>
 8001982:	4662      	mov	r2, ip
 8001984:	1a85      	subs	r5, r0, r2
 8001986:	42a8      	cmp	r0, r5
 8001988:	4192      	sbcs	r2, r2
 800198a:	4653      	mov	r3, sl
 800198c:	4252      	negs	r2, r2
 800198e:	4691      	mov	r9, r2
 8001990:	1ae3      	subs	r3, r4, r3
 8001992:	001a      	movs	r2, r3
 8001994:	464b      	mov	r3, r9
 8001996:	1ad2      	subs	r2, r2, r3
 8001998:	0013      	movs	r3, r2
 800199a:	4691      	mov	r9, r2
 800199c:	021a      	lsls	r2, r3, #8
 800199e:	d454      	bmi.n	8001a4a <__aeabi_dadd+0x4ce>
 80019a0:	464a      	mov	r2, r9
 80019a2:	464c      	mov	r4, r9
 80019a4:	432a      	orrs	r2, r5
 80019a6:	d000      	beq.n	80019aa <__aeabi_dadd+0x42e>
 80019a8:	e640      	b.n	800162c <__aeabi_dadd+0xb0>
 80019aa:	2600      	movs	r6, #0
 80019ac:	2400      	movs	r4, #0
 80019ae:	2500      	movs	r5, #0
 80019b0:	e67c      	b.n	80016ac <__aeabi_dadd+0x130>
 80019b2:	4da1      	ldr	r5, [pc, #644]	@ (8001c38 <__aeabi_dadd+0x6bc>)
 80019b4:	45a9      	cmp	r9, r5
 80019b6:	d100      	bne.n	80019ba <__aeabi_dadd+0x43e>
 80019b8:	e090      	b.n	8001adc <__aeabi_dadd+0x560>
 80019ba:	2501      	movs	r5, #1
 80019bc:	2a38      	cmp	r2, #56	@ 0x38
 80019be:	dd00      	ble.n	80019c2 <__aeabi_dadd+0x446>
 80019c0:	e6ab      	b.n	800171a <__aeabi_dadd+0x19e>
 80019c2:	2580      	movs	r5, #128	@ 0x80
 80019c4:	042d      	lsls	r5, r5, #16
 80019c6:	432c      	orrs	r4, r5
 80019c8:	e695      	b.n	80016f6 <__aeabi_dadd+0x17a>
 80019ca:	0011      	movs	r1, r2
 80019cc:	4655      	mov	r5, sl
 80019ce:	3920      	subs	r1, #32
 80019d0:	40cd      	lsrs	r5, r1
 80019d2:	46a9      	mov	r9, r5
 80019d4:	2a20      	cmp	r2, #32
 80019d6:	d006      	beq.n	80019e6 <__aeabi_dadd+0x46a>
 80019d8:	2140      	movs	r1, #64	@ 0x40
 80019da:	4653      	mov	r3, sl
 80019dc:	1a8a      	subs	r2, r1, r2
 80019de:	4093      	lsls	r3, r2
 80019e0:	4662      	mov	r2, ip
 80019e2:	431a      	orrs	r2, r3
 80019e4:	4694      	mov	ip, r2
 80019e6:	4665      	mov	r5, ip
 80019e8:	1e6b      	subs	r3, r5, #1
 80019ea:	419d      	sbcs	r5, r3
 80019ec:	464b      	mov	r3, r9
 80019ee:	431d      	orrs	r5, r3
 80019f0:	e612      	b.n	8001618 <__aeabi_dadd+0x9c>
 80019f2:	0021      	movs	r1, r4
 80019f4:	4301      	orrs	r1, r0
 80019f6:	d100      	bne.n	80019fa <__aeabi_dadd+0x47e>
 80019f8:	e0c4      	b.n	8001b84 <__aeabi_dadd+0x608>
 80019fa:	1e51      	subs	r1, r2, #1
 80019fc:	2a01      	cmp	r2, #1
 80019fe:	d100      	bne.n	8001a02 <__aeabi_dadd+0x486>
 8001a00:	e0fb      	b.n	8001bfa <__aeabi_dadd+0x67e>
 8001a02:	4d8d      	ldr	r5, [pc, #564]	@ (8001c38 <__aeabi_dadd+0x6bc>)
 8001a04:	42aa      	cmp	r2, r5
 8001a06:	d100      	bne.n	8001a0a <__aeabi_dadd+0x48e>
 8001a08:	e0b5      	b.n	8001b76 <__aeabi_dadd+0x5fa>
 8001a0a:	2501      	movs	r5, #1
 8001a0c:	2938      	cmp	r1, #56	@ 0x38
 8001a0e:	dd00      	ble.n	8001a12 <__aeabi_dadd+0x496>
 8001a10:	e741      	b.n	8001896 <__aeabi_dadd+0x31a>
 8001a12:	000a      	movs	r2, r1
 8001a14:	e72f      	b.n	8001876 <__aeabi_dadd+0x2fa>
 8001a16:	4c89      	ldr	r4, [pc, #548]	@ (8001c3c <__aeabi_dadd+0x6c0>)
 8001a18:	1aff      	subs	r7, r7, r3
 8001a1a:	4014      	ands	r4, r2
 8001a1c:	0762      	lsls	r2, r4, #29
 8001a1e:	08e4      	lsrs	r4, r4, #3
 8001a20:	e76a      	b.n	80018f8 <__aeabi_dadd+0x37c>
 8001a22:	4a85      	ldr	r2, [pc, #532]	@ (8001c38 <__aeabi_dadd+0x6bc>)
 8001a24:	4291      	cmp	r1, r2
 8001a26:	d100      	bne.n	8001a2a <__aeabi_dadd+0x4ae>
 8001a28:	e0e3      	b.n	8001bf2 <__aeabi_dadd+0x676>
 8001a2a:	4663      	mov	r3, ip
 8001a2c:	18c2      	adds	r2, r0, r3
 8001a2e:	4282      	cmp	r2, r0
 8001a30:	4180      	sbcs	r0, r0
 8001a32:	0023      	movs	r3, r4
 8001a34:	4240      	negs	r0, r0
 8001a36:	4453      	add	r3, sl
 8001a38:	181b      	adds	r3, r3, r0
 8001a3a:	07dd      	lsls	r5, r3, #31
 8001a3c:	085c      	lsrs	r4, r3, #1
 8001a3e:	2307      	movs	r3, #7
 8001a40:	0852      	lsrs	r2, r2, #1
 8001a42:	4315      	orrs	r5, r2
 8001a44:	000f      	movs	r7, r1
 8001a46:	402b      	ands	r3, r5
 8001a48:	e700      	b.n	800184c <__aeabi_dadd+0x2d0>
 8001a4a:	4663      	mov	r3, ip
 8001a4c:	1a1d      	subs	r5, r3, r0
 8001a4e:	45ac      	cmp	ip, r5
 8001a50:	4192      	sbcs	r2, r2
 8001a52:	4653      	mov	r3, sl
 8001a54:	4252      	negs	r2, r2
 8001a56:	1b1c      	subs	r4, r3, r4
 8001a58:	000e      	movs	r6, r1
 8001a5a:	4688      	mov	r8, r1
 8001a5c:	1aa4      	subs	r4, r4, r2
 8001a5e:	e5e5      	b.n	800162c <__aeabi_dadd+0xb0>
 8001a60:	2d00      	cmp	r5, #0
 8001a62:	d000      	beq.n	8001a66 <__aeabi_dadd+0x4ea>
 8001a64:	e091      	b.n	8001b8a <__aeabi_dadd+0x60e>
 8001a66:	2a00      	cmp	r2, #0
 8001a68:	d138      	bne.n	8001adc <__aeabi_dadd+0x560>
 8001a6a:	2480      	movs	r4, #128	@ 0x80
 8001a6c:	2600      	movs	r6, #0
 8001a6e:	0324      	lsls	r4, r4, #12
 8001a70:	e756      	b.n	8001920 <__aeabi_dadd+0x3a4>
 8001a72:	4663      	mov	r3, ip
 8001a74:	18c5      	adds	r5, r0, r3
 8001a76:	4285      	cmp	r5, r0
 8001a78:	4180      	sbcs	r0, r0
 8001a7a:	4454      	add	r4, sl
 8001a7c:	4240      	negs	r0, r0
 8001a7e:	1824      	adds	r4, r4, r0
 8001a80:	2701      	movs	r7, #1
 8001a82:	0223      	lsls	r3, r4, #8
 8001a84:	d400      	bmi.n	8001a88 <__aeabi_dadd+0x50c>
 8001a86:	e6df      	b.n	8001848 <__aeabi_dadd+0x2cc>
 8001a88:	2702      	movs	r7, #2
 8001a8a:	e687      	b.n	800179c <__aeabi_dadd+0x220>
 8001a8c:	4663      	mov	r3, ip
 8001a8e:	1ac5      	subs	r5, r0, r3
 8001a90:	42a8      	cmp	r0, r5
 8001a92:	4180      	sbcs	r0, r0
 8001a94:	4653      	mov	r3, sl
 8001a96:	4240      	negs	r0, r0
 8001a98:	1ae4      	subs	r4, r4, r3
 8001a9a:	2701      	movs	r7, #1
 8001a9c:	1a24      	subs	r4, r4, r0
 8001a9e:	e5c0      	b.n	8001622 <__aeabi_dadd+0xa6>
 8001aa0:	0762      	lsls	r2, r4, #29
 8001aa2:	08c0      	lsrs	r0, r0, #3
 8001aa4:	4302      	orrs	r2, r0
 8001aa6:	08e4      	lsrs	r4, r4, #3
 8001aa8:	e736      	b.n	8001918 <__aeabi_dadd+0x39c>
 8001aaa:	0011      	movs	r1, r2
 8001aac:	4653      	mov	r3, sl
 8001aae:	3920      	subs	r1, #32
 8001ab0:	40cb      	lsrs	r3, r1
 8001ab2:	4699      	mov	r9, r3
 8001ab4:	2a20      	cmp	r2, #32
 8001ab6:	d006      	beq.n	8001ac6 <__aeabi_dadd+0x54a>
 8001ab8:	2140      	movs	r1, #64	@ 0x40
 8001aba:	4653      	mov	r3, sl
 8001abc:	1a8a      	subs	r2, r1, r2
 8001abe:	4093      	lsls	r3, r2
 8001ac0:	4662      	mov	r2, ip
 8001ac2:	431a      	orrs	r2, r3
 8001ac4:	4694      	mov	ip, r2
 8001ac6:	4665      	mov	r5, ip
 8001ac8:	1e6b      	subs	r3, r5, #1
 8001aca:	419d      	sbcs	r5, r3
 8001acc:	464b      	mov	r3, r9
 8001ace:	431d      	orrs	r5, r3
 8001ad0:	e659      	b.n	8001786 <__aeabi_dadd+0x20a>
 8001ad2:	0762      	lsls	r2, r4, #29
 8001ad4:	08c0      	lsrs	r0, r0, #3
 8001ad6:	4302      	orrs	r2, r0
 8001ad8:	08e4      	lsrs	r4, r4, #3
 8001ada:	e70d      	b.n	80018f8 <__aeabi_dadd+0x37c>
 8001adc:	4653      	mov	r3, sl
 8001ade:	075a      	lsls	r2, r3, #29
 8001ae0:	4663      	mov	r3, ip
 8001ae2:	08d8      	lsrs	r0, r3, #3
 8001ae4:	4653      	mov	r3, sl
 8001ae6:	000e      	movs	r6, r1
 8001ae8:	4302      	orrs	r2, r0
 8001aea:	08dc      	lsrs	r4, r3, #3
 8001aec:	e714      	b.n	8001918 <__aeabi_dadd+0x39c>
 8001aee:	0015      	movs	r5, r2
 8001af0:	0026      	movs	r6, r4
 8001af2:	3d20      	subs	r5, #32
 8001af4:	40ee      	lsrs	r6, r5
 8001af6:	2a20      	cmp	r2, #32
 8001af8:	d003      	beq.n	8001b02 <__aeabi_dadd+0x586>
 8001afa:	2540      	movs	r5, #64	@ 0x40
 8001afc:	1aaa      	subs	r2, r5, r2
 8001afe:	4094      	lsls	r4, r2
 8001b00:	4320      	orrs	r0, r4
 8001b02:	1e42      	subs	r2, r0, #1
 8001b04:	4190      	sbcs	r0, r2
 8001b06:	0005      	movs	r5, r0
 8001b08:	4335      	orrs	r5, r6
 8001b0a:	e606      	b.n	800171a <__aeabi_dadd+0x19e>
 8001b0c:	2a00      	cmp	r2, #0
 8001b0e:	d07c      	beq.n	8001c0a <__aeabi_dadd+0x68e>
 8001b10:	4662      	mov	r2, ip
 8001b12:	4653      	mov	r3, sl
 8001b14:	08c0      	lsrs	r0, r0, #3
 8001b16:	431a      	orrs	r2, r3
 8001b18:	d100      	bne.n	8001b1c <__aeabi_dadd+0x5a0>
 8001b1a:	e6fa      	b.n	8001912 <__aeabi_dadd+0x396>
 8001b1c:	0762      	lsls	r2, r4, #29
 8001b1e:	4310      	orrs	r0, r2
 8001b20:	2280      	movs	r2, #128	@ 0x80
 8001b22:	08e4      	lsrs	r4, r4, #3
 8001b24:	0312      	lsls	r2, r2, #12
 8001b26:	4214      	tst	r4, r2
 8001b28:	d008      	beq.n	8001b3c <__aeabi_dadd+0x5c0>
 8001b2a:	08d9      	lsrs	r1, r3, #3
 8001b2c:	4211      	tst	r1, r2
 8001b2e:	d105      	bne.n	8001b3c <__aeabi_dadd+0x5c0>
 8001b30:	4663      	mov	r3, ip
 8001b32:	08d8      	lsrs	r0, r3, #3
 8001b34:	4653      	mov	r3, sl
 8001b36:	000c      	movs	r4, r1
 8001b38:	075b      	lsls	r3, r3, #29
 8001b3a:	4318      	orrs	r0, r3
 8001b3c:	0f42      	lsrs	r2, r0, #29
 8001b3e:	00c0      	lsls	r0, r0, #3
=======
080014cc <__aeabi_i2f>:
 80014cc:	b570      	push	{r4, r5, r6, lr}
 80014ce:	2800      	cmp	r0, #0
 80014d0:	d013      	beq.n	80014fa <__aeabi_i2f+0x2e>
 80014d2:	17c3      	asrs	r3, r0, #31
 80014d4:	18c5      	adds	r5, r0, r3
 80014d6:	405d      	eors	r5, r3
 80014d8:	0fc4      	lsrs	r4, r0, #31
 80014da:	0028      	movs	r0, r5
 80014dc:	f002 f80c 	bl	80034f8 <__clzsi2>
 80014e0:	239e      	movs	r3, #158	@ 0x9e
 80014e2:	0001      	movs	r1, r0
 80014e4:	1a1b      	subs	r3, r3, r0
 80014e6:	2b96      	cmp	r3, #150	@ 0x96
 80014e8:	dc0f      	bgt.n	800150a <__aeabi_i2f+0x3e>
 80014ea:	2808      	cmp	r0, #8
 80014ec:	d034      	beq.n	8001558 <__aeabi_i2f+0x8c>
 80014ee:	3908      	subs	r1, #8
 80014f0:	408d      	lsls	r5, r1
 80014f2:	026d      	lsls	r5, r5, #9
 80014f4:	0a6d      	lsrs	r5, r5, #9
 80014f6:	b2d8      	uxtb	r0, r3
 80014f8:	e002      	b.n	8001500 <__aeabi_i2f+0x34>
 80014fa:	2400      	movs	r4, #0
 80014fc:	2000      	movs	r0, #0
 80014fe:	2500      	movs	r5, #0
 8001500:	05c0      	lsls	r0, r0, #23
 8001502:	4328      	orrs	r0, r5
 8001504:	07e4      	lsls	r4, r4, #31
 8001506:	4320      	orrs	r0, r4
 8001508:	bd70      	pop	{r4, r5, r6, pc}
 800150a:	2b99      	cmp	r3, #153	@ 0x99
 800150c:	dc16      	bgt.n	800153c <__aeabi_i2f+0x70>
 800150e:	1f42      	subs	r2, r0, #5
 8001510:	2805      	cmp	r0, #5
 8001512:	d000      	beq.n	8001516 <__aeabi_i2f+0x4a>
 8001514:	4095      	lsls	r5, r2
 8001516:	002a      	movs	r2, r5
 8001518:	4811      	ldr	r0, [pc, #68]	@ (8001560 <__aeabi_i2f+0x94>)
 800151a:	4002      	ands	r2, r0
 800151c:	076e      	lsls	r6, r5, #29
 800151e:	d009      	beq.n	8001534 <__aeabi_i2f+0x68>
 8001520:	260f      	movs	r6, #15
 8001522:	4035      	ands	r5, r6
 8001524:	2d04      	cmp	r5, #4
 8001526:	d005      	beq.n	8001534 <__aeabi_i2f+0x68>
 8001528:	3204      	adds	r2, #4
 800152a:	0155      	lsls	r5, r2, #5
 800152c:	d502      	bpl.n	8001534 <__aeabi_i2f+0x68>
 800152e:	239f      	movs	r3, #159	@ 0x9f
 8001530:	4002      	ands	r2, r0
 8001532:	1a5b      	subs	r3, r3, r1
 8001534:	0192      	lsls	r2, r2, #6
 8001536:	0a55      	lsrs	r5, r2, #9
 8001538:	b2d8      	uxtb	r0, r3
 800153a:	e7e1      	b.n	8001500 <__aeabi_i2f+0x34>
 800153c:	2205      	movs	r2, #5
 800153e:	1a12      	subs	r2, r2, r0
 8001540:	0028      	movs	r0, r5
 8001542:	40d0      	lsrs	r0, r2
 8001544:	0002      	movs	r2, r0
 8001546:	0008      	movs	r0, r1
 8001548:	301b      	adds	r0, #27
 800154a:	4085      	lsls	r5, r0
 800154c:	0028      	movs	r0, r5
 800154e:	1e45      	subs	r5, r0, #1
 8001550:	41a8      	sbcs	r0, r5
 8001552:	4302      	orrs	r2, r0
 8001554:	0015      	movs	r5, r2
 8001556:	e7de      	b.n	8001516 <__aeabi_i2f+0x4a>
 8001558:	026d      	lsls	r5, r5, #9
 800155a:	2096      	movs	r0, #150	@ 0x96
 800155c:	0a6d      	lsrs	r5, r5, #9
 800155e:	e7cf      	b.n	8001500 <__aeabi_i2f+0x34>
 8001560:	fbffffff 	.word	0xfbffffff

08001564 <__aeabi_ui2f>:
 8001564:	b570      	push	{r4, r5, r6, lr}
 8001566:	1e04      	subs	r4, r0, #0
 8001568:	d00e      	beq.n	8001588 <__aeabi_ui2f+0x24>
 800156a:	f001 ffc5 	bl	80034f8 <__clzsi2>
 800156e:	239e      	movs	r3, #158	@ 0x9e
 8001570:	0001      	movs	r1, r0
 8001572:	1a1b      	subs	r3, r3, r0
 8001574:	2b96      	cmp	r3, #150	@ 0x96
 8001576:	dc0c      	bgt.n	8001592 <__aeabi_ui2f+0x2e>
 8001578:	2808      	cmp	r0, #8
 800157a:	d02f      	beq.n	80015dc <__aeabi_ui2f+0x78>
 800157c:	3908      	subs	r1, #8
 800157e:	408c      	lsls	r4, r1
 8001580:	0264      	lsls	r4, r4, #9
 8001582:	0a64      	lsrs	r4, r4, #9
 8001584:	b2d8      	uxtb	r0, r3
 8001586:	e001      	b.n	800158c <__aeabi_ui2f+0x28>
 8001588:	2000      	movs	r0, #0
 800158a:	2400      	movs	r4, #0
 800158c:	05c0      	lsls	r0, r0, #23
 800158e:	4320      	orrs	r0, r4
 8001590:	bd70      	pop	{r4, r5, r6, pc}
 8001592:	2b99      	cmp	r3, #153	@ 0x99
 8001594:	dc16      	bgt.n	80015c4 <__aeabi_ui2f+0x60>
 8001596:	1f42      	subs	r2, r0, #5
 8001598:	2805      	cmp	r0, #5
 800159a:	d000      	beq.n	800159e <__aeabi_ui2f+0x3a>
 800159c:	4094      	lsls	r4, r2
 800159e:	0022      	movs	r2, r4
 80015a0:	4810      	ldr	r0, [pc, #64]	@ (80015e4 <__aeabi_ui2f+0x80>)
 80015a2:	4002      	ands	r2, r0
 80015a4:	0765      	lsls	r5, r4, #29
 80015a6:	d009      	beq.n	80015bc <__aeabi_ui2f+0x58>
 80015a8:	250f      	movs	r5, #15
 80015aa:	402c      	ands	r4, r5
 80015ac:	2c04      	cmp	r4, #4
 80015ae:	d005      	beq.n	80015bc <__aeabi_ui2f+0x58>
 80015b0:	3204      	adds	r2, #4
 80015b2:	0154      	lsls	r4, r2, #5
 80015b4:	d502      	bpl.n	80015bc <__aeabi_ui2f+0x58>
 80015b6:	239f      	movs	r3, #159	@ 0x9f
 80015b8:	4002      	ands	r2, r0
 80015ba:	1a5b      	subs	r3, r3, r1
 80015bc:	0192      	lsls	r2, r2, #6
 80015be:	0a54      	lsrs	r4, r2, #9
 80015c0:	b2d8      	uxtb	r0, r3
 80015c2:	e7e3      	b.n	800158c <__aeabi_ui2f+0x28>
 80015c4:	0002      	movs	r2, r0
 80015c6:	0020      	movs	r0, r4
 80015c8:	321b      	adds	r2, #27
 80015ca:	4090      	lsls	r0, r2
 80015cc:	0002      	movs	r2, r0
 80015ce:	1e50      	subs	r0, r2, #1
 80015d0:	4182      	sbcs	r2, r0
 80015d2:	2005      	movs	r0, #5
 80015d4:	1a40      	subs	r0, r0, r1
 80015d6:	40c4      	lsrs	r4, r0
 80015d8:	4314      	orrs	r4, r2
 80015da:	e7e0      	b.n	800159e <__aeabi_ui2f+0x3a>
 80015dc:	0264      	lsls	r4, r4, #9
 80015de:	2096      	movs	r0, #150	@ 0x96
 80015e0:	0a64      	lsrs	r4, r4, #9
 80015e2:	e7d3      	b.n	800158c <__aeabi_ui2f+0x28>
 80015e4:	fbffffff 	.word	0xfbffffff

080015e8 <__aeabi_dadd>:
 80015e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015ea:	4657      	mov	r7, sl
 80015ec:	464e      	mov	r6, r9
 80015ee:	4645      	mov	r5, r8
 80015f0:	46de      	mov	lr, fp
 80015f2:	b5e0      	push	{r5, r6, r7, lr}
 80015f4:	b083      	sub	sp, #12
 80015f6:	9000      	str	r0, [sp, #0]
 80015f8:	9101      	str	r1, [sp, #4]
 80015fa:	030c      	lsls	r4, r1, #12
 80015fc:	004f      	lsls	r7, r1, #1
 80015fe:	0fce      	lsrs	r6, r1, #31
 8001600:	0a61      	lsrs	r1, r4, #9
 8001602:	9c00      	ldr	r4, [sp, #0]
 8001604:	031d      	lsls	r5, r3, #12
 8001606:	0f64      	lsrs	r4, r4, #29
 8001608:	430c      	orrs	r4, r1
 800160a:	9900      	ldr	r1, [sp, #0]
 800160c:	9200      	str	r2, [sp, #0]
 800160e:	9301      	str	r3, [sp, #4]
 8001610:	00c8      	lsls	r0, r1, #3
 8001612:	0059      	lsls	r1, r3, #1
 8001614:	0d4b      	lsrs	r3, r1, #21
 8001616:	4699      	mov	r9, r3
 8001618:	9a00      	ldr	r2, [sp, #0]
 800161a:	9b01      	ldr	r3, [sp, #4]
 800161c:	0a6d      	lsrs	r5, r5, #9
 800161e:	0fd9      	lsrs	r1, r3, #31
 8001620:	0f53      	lsrs	r3, r2, #29
 8001622:	432b      	orrs	r3, r5
 8001624:	469a      	mov	sl, r3
 8001626:	9b00      	ldr	r3, [sp, #0]
 8001628:	0d7f      	lsrs	r7, r7, #21
 800162a:	00da      	lsls	r2, r3, #3
 800162c:	4694      	mov	ip, r2
 800162e:	464a      	mov	r2, r9
 8001630:	46b0      	mov	r8, r6
 8001632:	1aba      	subs	r2, r7, r2
 8001634:	428e      	cmp	r6, r1
 8001636:	d100      	bne.n	800163a <__aeabi_dadd+0x52>
 8001638:	e0b0      	b.n	800179c <__aeabi_dadd+0x1b4>
 800163a:	2a00      	cmp	r2, #0
 800163c:	dc00      	bgt.n	8001640 <__aeabi_dadd+0x58>
 800163e:	e078      	b.n	8001732 <__aeabi_dadd+0x14a>
 8001640:	4649      	mov	r1, r9
 8001642:	2900      	cmp	r1, #0
 8001644:	d100      	bne.n	8001648 <__aeabi_dadd+0x60>
 8001646:	e0e9      	b.n	800181c <__aeabi_dadd+0x234>
 8001648:	49c9      	ldr	r1, [pc, #804]	@ (8001970 <__aeabi_dadd+0x388>)
 800164a:	428f      	cmp	r7, r1
 800164c:	d100      	bne.n	8001650 <__aeabi_dadd+0x68>
 800164e:	e195      	b.n	800197c <__aeabi_dadd+0x394>
 8001650:	2501      	movs	r5, #1
 8001652:	2a38      	cmp	r2, #56	@ 0x38
 8001654:	dc16      	bgt.n	8001684 <__aeabi_dadd+0x9c>
 8001656:	2180      	movs	r1, #128	@ 0x80
 8001658:	4653      	mov	r3, sl
 800165a:	0409      	lsls	r1, r1, #16
 800165c:	430b      	orrs	r3, r1
 800165e:	469a      	mov	sl, r3
 8001660:	2a1f      	cmp	r2, #31
 8001662:	dd00      	ble.n	8001666 <__aeabi_dadd+0x7e>
 8001664:	e1e7      	b.n	8001a36 <__aeabi_dadd+0x44e>
 8001666:	2120      	movs	r1, #32
 8001668:	4655      	mov	r5, sl
 800166a:	1a8b      	subs	r3, r1, r2
 800166c:	4661      	mov	r1, ip
 800166e:	409d      	lsls	r5, r3
 8001670:	40d1      	lsrs	r1, r2
 8001672:	430d      	orrs	r5, r1
 8001674:	4661      	mov	r1, ip
 8001676:	4099      	lsls	r1, r3
 8001678:	1e4b      	subs	r3, r1, #1
 800167a:	4199      	sbcs	r1, r3
 800167c:	4653      	mov	r3, sl
 800167e:	40d3      	lsrs	r3, r2
 8001680:	430d      	orrs	r5, r1
 8001682:	1ae4      	subs	r4, r4, r3
 8001684:	1b45      	subs	r5, r0, r5
 8001686:	42a8      	cmp	r0, r5
 8001688:	4180      	sbcs	r0, r0
 800168a:	4240      	negs	r0, r0
 800168c:	1a24      	subs	r4, r4, r0
 800168e:	0223      	lsls	r3, r4, #8
 8001690:	d400      	bmi.n	8001694 <__aeabi_dadd+0xac>
 8001692:	e10f      	b.n	80018b4 <__aeabi_dadd+0x2cc>
 8001694:	0264      	lsls	r4, r4, #9
 8001696:	0a64      	lsrs	r4, r4, #9
 8001698:	2c00      	cmp	r4, #0
 800169a:	d100      	bne.n	800169e <__aeabi_dadd+0xb6>
 800169c:	e139      	b.n	8001912 <__aeabi_dadd+0x32a>
 800169e:	0020      	movs	r0, r4
 80016a0:	f001 ff2a 	bl	80034f8 <__clzsi2>
 80016a4:	0003      	movs	r3, r0
 80016a6:	3b08      	subs	r3, #8
 80016a8:	2120      	movs	r1, #32
 80016aa:	0028      	movs	r0, r5
 80016ac:	1aca      	subs	r2, r1, r3
 80016ae:	40d0      	lsrs	r0, r2
 80016b0:	409c      	lsls	r4, r3
 80016b2:	0002      	movs	r2, r0
 80016b4:	409d      	lsls	r5, r3
 80016b6:	4322      	orrs	r2, r4
 80016b8:	429f      	cmp	r7, r3
 80016ba:	dd00      	ble.n	80016be <__aeabi_dadd+0xd6>
 80016bc:	e173      	b.n	80019a6 <__aeabi_dadd+0x3be>
 80016be:	1bd8      	subs	r0, r3, r7
 80016c0:	3001      	adds	r0, #1
 80016c2:	1a09      	subs	r1, r1, r0
 80016c4:	002c      	movs	r4, r5
 80016c6:	408d      	lsls	r5, r1
 80016c8:	40c4      	lsrs	r4, r0
 80016ca:	1e6b      	subs	r3, r5, #1
 80016cc:	419d      	sbcs	r5, r3
 80016ce:	0013      	movs	r3, r2
 80016d0:	40c2      	lsrs	r2, r0
 80016d2:	408b      	lsls	r3, r1
 80016d4:	4325      	orrs	r5, r4
 80016d6:	2700      	movs	r7, #0
 80016d8:	0014      	movs	r4, r2
 80016da:	431d      	orrs	r5, r3
 80016dc:	076b      	lsls	r3, r5, #29
 80016de:	d009      	beq.n	80016f4 <__aeabi_dadd+0x10c>
 80016e0:	230f      	movs	r3, #15
 80016e2:	402b      	ands	r3, r5
 80016e4:	2b04      	cmp	r3, #4
 80016e6:	d005      	beq.n	80016f4 <__aeabi_dadd+0x10c>
 80016e8:	1d2b      	adds	r3, r5, #4
 80016ea:	42ab      	cmp	r3, r5
 80016ec:	41ad      	sbcs	r5, r5
 80016ee:	426d      	negs	r5, r5
 80016f0:	1964      	adds	r4, r4, r5
 80016f2:	001d      	movs	r5, r3
 80016f4:	0223      	lsls	r3, r4, #8
 80016f6:	d400      	bmi.n	80016fa <__aeabi_dadd+0x112>
 80016f8:	e12d      	b.n	8001956 <__aeabi_dadd+0x36e>
 80016fa:	4a9d      	ldr	r2, [pc, #628]	@ (8001970 <__aeabi_dadd+0x388>)
 80016fc:	3701      	adds	r7, #1
 80016fe:	4297      	cmp	r7, r2
 8001700:	d100      	bne.n	8001704 <__aeabi_dadd+0x11c>
 8001702:	e0d3      	b.n	80018ac <__aeabi_dadd+0x2c4>
 8001704:	4646      	mov	r6, r8
 8001706:	499b      	ldr	r1, [pc, #620]	@ (8001974 <__aeabi_dadd+0x38c>)
 8001708:	08ed      	lsrs	r5, r5, #3
 800170a:	4021      	ands	r1, r4
 800170c:	074a      	lsls	r2, r1, #29
 800170e:	432a      	orrs	r2, r5
 8001710:	057c      	lsls	r4, r7, #21
 8001712:	024d      	lsls	r5, r1, #9
 8001714:	0b2d      	lsrs	r5, r5, #12
 8001716:	0d64      	lsrs	r4, r4, #21
 8001718:	0524      	lsls	r4, r4, #20
 800171a:	432c      	orrs	r4, r5
 800171c:	07f6      	lsls	r6, r6, #31
 800171e:	4334      	orrs	r4, r6
 8001720:	0010      	movs	r0, r2
 8001722:	0021      	movs	r1, r4
 8001724:	b003      	add	sp, #12
 8001726:	bcf0      	pop	{r4, r5, r6, r7}
 8001728:	46bb      	mov	fp, r7
 800172a:	46b2      	mov	sl, r6
 800172c:	46a9      	mov	r9, r5
 800172e:	46a0      	mov	r8, r4
 8001730:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001732:	2a00      	cmp	r2, #0
 8001734:	d100      	bne.n	8001738 <__aeabi_dadd+0x150>
 8001736:	e084      	b.n	8001842 <__aeabi_dadd+0x25a>
 8001738:	464a      	mov	r2, r9
 800173a:	1bd2      	subs	r2, r2, r7
 800173c:	2f00      	cmp	r7, #0
 800173e:	d000      	beq.n	8001742 <__aeabi_dadd+0x15a>
 8001740:	e16d      	b.n	8001a1e <__aeabi_dadd+0x436>
 8001742:	0025      	movs	r5, r4
 8001744:	4305      	orrs	r5, r0
 8001746:	d100      	bne.n	800174a <__aeabi_dadd+0x162>
 8001748:	e127      	b.n	800199a <__aeabi_dadd+0x3b2>
 800174a:	1e56      	subs	r6, r2, #1
 800174c:	2a01      	cmp	r2, #1
 800174e:	d100      	bne.n	8001752 <__aeabi_dadd+0x16a>
 8001750:	e23b      	b.n	8001bca <__aeabi_dadd+0x5e2>
 8001752:	4d87      	ldr	r5, [pc, #540]	@ (8001970 <__aeabi_dadd+0x388>)
 8001754:	42aa      	cmp	r2, r5
 8001756:	d100      	bne.n	800175a <__aeabi_dadd+0x172>
 8001758:	e26a      	b.n	8001c30 <__aeabi_dadd+0x648>
 800175a:	2501      	movs	r5, #1
 800175c:	2e38      	cmp	r6, #56	@ 0x38
 800175e:	dc12      	bgt.n	8001786 <__aeabi_dadd+0x19e>
 8001760:	0032      	movs	r2, r6
 8001762:	2a1f      	cmp	r2, #31
 8001764:	dd00      	ble.n	8001768 <__aeabi_dadd+0x180>
 8001766:	e1f8      	b.n	8001b5a <__aeabi_dadd+0x572>
 8001768:	2620      	movs	r6, #32
 800176a:	0025      	movs	r5, r4
 800176c:	1ab6      	subs	r6, r6, r2
 800176e:	0007      	movs	r7, r0
 8001770:	4653      	mov	r3, sl
 8001772:	40b0      	lsls	r0, r6
 8001774:	40d4      	lsrs	r4, r2
 8001776:	40b5      	lsls	r5, r6
 8001778:	40d7      	lsrs	r7, r2
 800177a:	1e46      	subs	r6, r0, #1
 800177c:	41b0      	sbcs	r0, r6
 800177e:	1b1b      	subs	r3, r3, r4
 8001780:	469a      	mov	sl, r3
 8001782:	433d      	orrs	r5, r7
 8001784:	4305      	orrs	r5, r0
 8001786:	4662      	mov	r2, ip
 8001788:	1b55      	subs	r5, r2, r5
 800178a:	45ac      	cmp	ip, r5
 800178c:	4192      	sbcs	r2, r2
 800178e:	4653      	mov	r3, sl
 8001790:	4252      	negs	r2, r2
 8001792:	000e      	movs	r6, r1
 8001794:	464f      	mov	r7, r9
 8001796:	4688      	mov	r8, r1
 8001798:	1a9c      	subs	r4, r3, r2
 800179a:	e778      	b.n	800168e <__aeabi_dadd+0xa6>
 800179c:	2a00      	cmp	r2, #0
 800179e:	dc00      	bgt.n	80017a2 <__aeabi_dadd+0x1ba>
 80017a0:	e08e      	b.n	80018c0 <__aeabi_dadd+0x2d8>
 80017a2:	4649      	mov	r1, r9
 80017a4:	2900      	cmp	r1, #0
 80017a6:	d175      	bne.n	8001894 <__aeabi_dadd+0x2ac>
 80017a8:	4661      	mov	r1, ip
 80017aa:	4653      	mov	r3, sl
 80017ac:	4319      	orrs	r1, r3
 80017ae:	d100      	bne.n	80017b2 <__aeabi_dadd+0x1ca>
 80017b0:	e0f6      	b.n	80019a0 <__aeabi_dadd+0x3b8>
 80017b2:	1e51      	subs	r1, r2, #1
 80017b4:	2a01      	cmp	r2, #1
 80017b6:	d100      	bne.n	80017ba <__aeabi_dadd+0x1d2>
 80017b8:	e191      	b.n	8001ade <__aeabi_dadd+0x4f6>
 80017ba:	4d6d      	ldr	r5, [pc, #436]	@ (8001970 <__aeabi_dadd+0x388>)
 80017bc:	42aa      	cmp	r2, r5
 80017be:	d100      	bne.n	80017c2 <__aeabi_dadd+0x1da>
 80017c0:	e0dc      	b.n	800197c <__aeabi_dadd+0x394>
 80017c2:	2501      	movs	r5, #1
 80017c4:	2938      	cmp	r1, #56	@ 0x38
 80017c6:	dc14      	bgt.n	80017f2 <__aeabi_dadd+0x20a>
 80017c8:	000a      	movs	r2, r1
 80017ca:	2a1f      	cmp	r2, #31
 80017cc:	dd00      	ble.n	80017d0 <__aeabi_dadd+0x1e8>
 80017ce:	e1a2      	b.n	8001b16 <__aeabi_dadd+0x52e>
 80017d0:	2120      	movs	r1, #32
 80017d2:	4653      	mov	r3, sl
 80017d4:	1a89      	subs	r1, r1, r2
 80017d6:	408b      	lsls	r3, r1
 80017d8:	001d      	movs	r5, r3
 80017da:	4663      	mov	r3, ip
 80017dc:	40d3      	lsrs	r3, r2
 80017de:	431d      	orrs	r5, r3
 80017e0:	4663      	mov	r3, ip
 80017e2:	408b      	lsls	r3, r1
 80017e4:	0019      	movs	r1, r3
 80017e6:	1e4b      	subs	r3, r1, #1
 80017e8:	4199      	sbcs	r1, r3
 80017ea:	4653      	mov	r3, sl
 80017ec:	40d3      	lsrs	r3, r2
 80017ee:	430d      	orrs	r5, r1
 80017f0:	18e4      	adds	r4, r4, r3
 80017f2:	182d      	adds	r5, r5, r0
 80017f4:	4285      	cmp	r5, r0
 80017f6:	4180      	sbcs	r0, r0
 80017f8:	4240      	negs	r0, r0
 80017fa:	1824      	adds	r4, r4, r0
 80017fc:	0223      	lsls	r3, r4, #8
 80017fe:	d559      	bpl.n	80018b4 <__aeabi_dadd+0x2cc>
 8001800:	4b5b      	ldr	r3, [pc, #364]	@ (8001970 <__aeabi_dadd+0x388>)
 8001802:	3701      	adds	r7, #1
 8001804:	429f      	cmp	r7, r3
 8001806:	d051      	beq.n	80018ac <__aeabi_dadd+0x2c4>
 8001808:	2101      	movs	r1, #1
 800180a:	4b5a      	ldr	r3, [pc, #360]	@ (8001974 <__aeabi_dadd+0x38c>)
 800180c:	086a      	lsrs	r2, r5, #1
 800180e:	401c      	ands	r4, r3
 8001810:	4029      	ands	r1, r5
 8001812:	430a      	orrs	r2, r1
 8001814:	07e5      	lsls	r5, r4, #31
 8001816:	4315      	orrs	r5, r2
 8001818:	0864      	lsrs	r4, r4, #1
 800181a:	e75f      	b.n	80016dc <__aeabi_dadd+0xf4>
 800181c:	4661      	mov	r1, ip
 800181e:	4653      	mov	r3, sl
 8001820:	4319      	orrs	r1, r3
 8001822:	d100      	bne.n	8001826 <__aeabi_dadd+0x23e>
 8001824:	e0bc      	b.n	80019a0 <__aeabi_dadd+0x3b8>
 8001826:	1e51      	subs	r1, r2, #1
 8001828:	2a01      	cmp	r2, #1
 800182a:	d100      	bne.n	800182e <__aeabi_dadd+0x246>
 800182c:	e164      	b.n	8001af8 <__aeabi_dadd+0x510>
 800182e:	4d50      	ldr	r5, [pc, #320]	@ (8001970 <__aeabi_dadd+0x388>)
 8001830:	42aa      	cmp	r2, r5
 8001832:	d100      	bne.n	8001836 <__aeabi_dadd+0x24e>
 8001834:	e16a      	b.n	8001b0c <__aeabi_dadd+0x524>
 8001836:	2501      	movs	r5, #1
 8001838:	2938      	cmp	r1, #56	@ 0x38
 800183a:	dd00      	ble.n	800183e <__aeabi_dadd+0x256>
 800183c:	e722      	b.n	8001684 <__aeabi_dadd+0x9c>
 800183e:	000a      	movs	r2, r1
 8001840:	e70e      	b.n	8001660 <__aeabi_dadd+0x78>
 8001842:	4a4d      	ldr	r2, [pc, #308]	@ (8001978 <__aeabi_dadd+0x390>)
 8001844:	1c7d      	adds	r5, r7, #1
 8001846:	4215      	tst	r5, r2
 8001848:	d000      	beq.n	800184c <__aeabi_dadd+0x264>
 800184a:	e0d0      	b.n	80019ee <__aeabi_dadd+0x406>
 800184c:	0025      	movs	r5, r4
 800184e:	4662      	mov	r2, ip
 8001850:	4653      	mov	r3, sl
 8001852:	4305      	orrs	r5, r0
 8001854:	431a      	orrs	r2, r3
 8001856:	2f00      	cmp	r7, #0
 8001858:	d000      	beq.n	800185c <__aeabi_dadd+0x274>
 800185a:	e137      	b.n	8001acc <__aeabi_dadd+0x4e4>
 800185c:	2d00      	cmp	r5, #0
 800185e:	d100      	bne.n	8001862 <__aeabi_dadd+0x27a>
 8001860:	e1a8      	b.n	8001bb4 <__aeabi_dadd+0x5cc>
 8001862:	2a00      	cmp	r2, #0
 8001864:	d100      	bne.n	8001868 <__aeabi_dadd+0x280>
 8001866:	e16a      	b.n	8001b3e <__aeabi_dadd+0x556>
 8001868:	4663      	mov	r3, ip
 800186a:	1ac5      	subs	r5, r0, r3
 800186c:	4653      	mov	r3, sl
 800186e:	1ae2      	subs	r2, r4, r3
 8001870:	42a8      	cmp	r0, r5
 8001872:	419b      	sbcs	r3, r3
 8001874:	425b      	negs	r3, r3
 8001876:	1ad3      	subs	r3, r2, r3
 8001878:	021a      	lsls	r2, r3, #8
 800187a:	d400      	bmi.n	800187e <__aeabi_dadd+0x296>
 800187c:	e203      	b.n	8001c86 <__aeabi_dadd+0x69e>
 800187e:	4663      	mov	r3, ip
 8001880:	1a1d      	subs	r5, r3, r0
 8001882:	45ac      	cmp	ip, r5
 8001884:	4192      	sbcs	r2, r2
 8001886:	4653      	mov	r3, sl
 8001888:	4252      	negs	r2, r2
 800188a:	1b1c      	subs	r4, r3, r4
 800188c:	000e      	movs	r6, r1
 800188e:	4688      	mov	r8, r1
 8001890:	1aa4      	subs	r4, r4, r2
 8001892:	e723      	b.n	80016dc <__aeabi_dadd+0xf4>
 8001894:	4936      	ldr	r1, [pc, #216]	@ (8001970 <__aeabi_dadd+0x388>)
 8001896:	428f      	cmp	r7, r1
 8001898:	d070      	beq.n	800197c <__aeabi_dadd+0x394>
 800189a:	2501      	movs	r5, #1
 800189c:	2a38      	cmp	r2, #56	@ 0x38
 800189e:	dca8      	bgt.n	80017f2 <__aeabi_dadd+0x20a>
 80018a0:	2180      	movs	r1, #128	@ 0x80
 80018a2:	4653      	mov	r3, sl
 80018a4:	0409      	lsls	r1, r1, #16
 80018a6:	430b      	orrs	r3, r1
 80018a8:	469a      	mov	sl, r3
 80018aa:	e78e      	b.n	80017ca <__aeabi_dadd+0x1e2>
 80018ac:	003c      	movs	r4, r7
 80018ae:	2500      	movs	r5, #0
 80018b0:	2200      	movs	r2, #0
 80018b2:	e731      	b.n	8001718 <__aeabi_dadd+0x130>
 80018b4:	2307      	movs	r3, #7
 80018b6:	402b      	ands	r3, r5
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d000      	beq.n	80018be <__aeabi_dadd+0x2d6>
 80018bc:	e710      	b.n	80016e0 <__aeabi_dadd+0xf8>
 80018be:	e093      	b.n	80019e8 <__aeabi_dadd+0x400>
 80018c0:	2a00      	cmp	r2, #0
 80018c2:	d074      	beq.n	80019ae <__aeabi_dadd+0x3c6>
 80018c4:	464a      	mov	r2, r9
 80018c6:	1bd2      	subs	r2, r2, r7
 80018c8:	2f00      	cmp	r7, #0
 80018ca:	d100      	bne.n	80018ce <__aeabi_dadd+0x2e6>
 80018cc:	e0c7      	b.n	8001a5e <__aeabi_dadd+0x476>
 80018ce:	4928      	ldr	r1, [pc, #160]	@ (8001970 <__aeabi_dadd+0x388>)
 80018d0:	4589      	cmp	r9, r1
 80018d2:	d100      	bne.n	80018d6 <__aeabi_dadd+0x2ee>
 80018d4:	e185      	b.n	8001be2 <__aeabi_dadd+0x5fa>
 80018d6:	2501      	movs	r5, #1
 80018d8:	2a38      	cmp	r2, #56	@ 0x38
 80018da:	dc12      	bgt.n	8001902 <__aeabi_dadd+0x31a>
 80018dc:	2180      	movs	r1, #128	@ 0x80
 80018de:	0409      	lsls	r1, r1, #16
 80018e0:	430c      	orrs	r4, r1
 80018e2:	2a1f      	cmp	r2, #31
 80018e4:	dd00      	ble.n	80018e8 <__aeabi_dadd+0x300>
 80018e6:	e1ab      	b.n	8001c40 <__aeabi_dadd+0x658>
 80018e8:	2120      	movs	r1, #32
 80018ea:	0025      	movs	r5, r4
 80018ec:	1a89      	subs	r1, r1, r2
 80018ee:	0007      	movs	r7, r0
 80018f0:	4088      	lsls	r0, r1
 80018f2:	408d      	lsls	r5, r1
 80018f4:	40d7      	lsrs	r7, r2
 80018f6:	1e41      	subs	r1, r0, #1
 80018f8:	4188      	sbcs	r0, r1
 80018fa:	40d4      	lsrs	r4, r2
 80018fc:	433d      	orrs	r5, r7
 80018fe:	4305      	orrs	r5, r0
 8001900:	44a2      	add	sl, r4
 8001902:	4465      	add	r5, ip
 8001904:	4565      	cmp	r5, ip
 8001906:	4192      	sbcs	r2, r2
 8001908:	4252      	negs	r2, r2
 800190a:	4452      	add	r2, sl
 800190c:	0014      	movs	r4, r2
 800190e:	464f      	mov	r7, r9
 8001910:	e774      	b.n	80017fc <__aeabi_dadd+0x214>
 8001912:	0028      	movs	r0, r5
 8001914:	f001 fdf0 	bl	80034f8 <__clzsi2>
 8001918:	0003      	movs	r3, r0
 800191a:	3318      	adds	r3, #24
 800191c:	2b1f      	cmp	r3, #31
 800191e:	dc00      	bgt.n	8001922 <__aeabi_dadd+0x33a>
 8001920:	e6c2      	b.n	80016a8 <__aeabi_dadd+0xc0>
 8001922:	002a      	movs	r2, r5
 8001924:	3808      	subs	r0, #8
 8001926:	4082      	lsls	r2, r0
 8001928:	429f      	cmp	r7, r3
 800192a:	dd00      	ble.n	800192e <__aeabi_dadd+0x346>
 800192c:	e0a9      	b.n	8001a82 <__aeabi_dadd+0x49a>
 800192e:	1bdb      	subs	r3, r3, r7
 8001930:	1c58      	adds	r0, r3, #1
 8001932:	281f      	cmp	r0, #31
 8001934:	dc00      	bgt.n	8001938 <__aeabi_dadd+0x350>
 8001936:	e1ac      	b.n	8001c92 <__aeabi_dadd+0x6aa>
 8001938:	0015      	movs	r5, r2
 800193a:	3b1f      	subs	r3, #31
 800193c:	40dd      	lsrs	r5, r3
 800193e:	2820      	cmp	r0, #32
 8001940:	d005      	beq.n	800194e <__aeabi_dadd+0x366>
 8001942:	2340      	movs	r3, #64	@ 0x40
 8001944:	1a1b      	subs	r3, r3, r0
 8001946:	409a      	lsls	r2, r3
 8001948:	1e53      	subs	r3, r2, #1
 800194a:	419a      	sbcs	r2, r3
 800194c:	4315      	orrs	r5, r2
 800194e:	2307      	movs	r3, #7
 8001950:	2700      	movs	r7, #0
 8001952:	402b      	ands	r3, r5
 8001954:	e7b0      	b.n	80018b8 <__aeabi_dadd+0x2d0>
 8001956:	08ed      	lsrs	r5, r5, #3
 8001958:	4b05      	ldr	r3, [pc, #20]	@ (8001970 <__aeabi_dadd+0x388>)
 800195a:	0762      	lsls	r2, r4, #29
 800195c:	432a      	orrs	r2, r5
 800195e:	08e4      	lsrs	r4, r4, #3
 8001960:	429f      	cmp	r7, r3
 8001962:	d00f      	beq.n	8001984 <__aeabi_dadd+0x39c>
 8001964:	0324      	lsls	r4, r4, #12
 8001966:	0b25      	lsrs	r5, r4, #12
 8001968:	057c      	lsls	r4, r7, #21
 800196a:	0d64      	lsrs	r4, r4, #21
 800196c:	e6d4      	b.n	8001718 <__aeabi_dadd+0x130>
 800196e:	46c0      	nop			@ (mov r8, r8)
 8001970:	000007ff 	.word	0x000007ff
 8001974:	ff7fffff 	.word	0xff7fffff
 8001978:	000007fe 	.word	0x000007fe
 800197c:	08c0      	lsrs	r0, r0, #3
 800197e:	0762      	lsls	r2, r4, #29
 8001980:	4302      	orrs	r2, r0
 8001982:	08e4      	lsrs	r4, r4, #3
 8001984:	0013      	movs	r3, r2
 8001986:	4323      	orrs	r3, r4
 8001988:	d100      	bne.n	800198c <__aeabi_dadd+0x3a4>
 800198a:	e186      	b.n	8001c9a <__aeabi_dadd+0x6b2>
 800198c:	2580      	movs	r5, #128	@ 0x80
 800198e:	032d      	lsls	r5, r5, #12
 8001990:	4325      	orrs	r5, r4
 8001992:	032d      	lsls	r5, r5, #12
 8001994:	4cc3      	ldr	r4, [pc, #780]	@ (8001ca4 <__aeabi_dadd+0x6bc>)
 8001996:	0b2d      	lsrs	r5, r5, #12
 8001998:	e6be      	b.n	8001718 <__aeabi_dadd+0x130>
 800199a:	4660      	mov	r0, ip
 800199c:	4654      	mov	r4, sl
 800199e:	000e      	movs	r6, r1
 80019a0:	0017      	movs	r7, r2
 80019a2:	08c5      	lsrs	r5, r0, #3
 80019a4:	e7d8      	b.n	8001958 <__aeabi_dadd+0x370>
 80019a6:	4cc0      	ldr	r4, [pc, #768]	@ (8001ca8 <__aeabi_dadd+0x6c0>)
 80019a8:	1aff      	subs	r7, r7, r3
 80019aa:	4014      	ands	r4, r2
 80019ac:	e696      	b.n	80016dc <__aeabi_dadd+0xf4>
 80019ae:	4abf      	ldr	r2, [pc, #764]	@ (8001cac <__aeabi_dadd+0x6c4>)
 80019b0:	1c79      	adds	r1, r7, #1
 80019b2:	4211      	tst	r1, r2
 80019b4:	d16b      	bne.n	8001a8e <__aeabi_dadd+0x4a6>
 80019b6:	0022      	movs	r2, r4
 80019b8:	4302      	orrs	r2, r0
 80019ba:	2f00      	cmp	r7, #0
 80019bc:	d000      	beq.n	80019c0 <__aeabi_dadd+0x3d8>
 80019be:	e0db      	b.n	8001b78 <__aeabi_dadd+0x590>
 80019c0:	2a00      	cmp	r2, #0
 80019c2:	d100      	bne.n	80019c6 <__aeabi_dadd+0x3de>
 80019c4:	e12d      	b.n	8001c22 <__aeabi_dadd+0x63a>
 80019c6:	4662      	mov	r2, ip
 80019c8:	4653      	mov	r3, sl
 80019ca:	431a      	orrs	r2, r3
 80019cc:	d100      	bne.n	80019d0 <__aeabi_dadd+0x3e8>
 80019ce:	e0b6      	b.n	8001b3e <__aeabi_dadd+0x556>
 80019d0:	4663      	mov	r3, ip
 80019d2:	18c5      	adds	r5, r0, r3
 80019d4:	4285      	cmp	r5, r0
 80019d6:	4180      	sbcs	r0, r0
 80019d8:	4454      	add	r4, sl
 80019da:	4240      	negs	r0, r0
 80019dc:	1824      	adds	r4, r4, r0
 80019de:	0223      	lsls	r3, r4, #8
 80019e0:	d502      	bpl.n	80019e8 <__aeabi_dadd+0x400>
 80019e2:	000f      	movs	r7, r1
 80019e4:	4bb0      	ldr	r3, [pc, #704]	@ (8001ca8 <__aeabi_dadd+0x6c0>)
 80019e6:	401c      	ands	r4, r3
 80019e8:	003a      	movs	r2, r7
 80019ea:	0028      	movs	r0, r5
 80019ec:	e7d8      	b.n	80019a0 <__aeabi_dadd+0x3b8>
 80019ee:	4662      	mov	r2, ip
 80019f0:	1a85      	subs	r5, r0, r2
 80019f2:	42a8      	cmp	r0, r5
 80019f4:	4192      	sbcs	r2, r2
 80019f6:	4653      	mov	r3, sl
 80019f8:	4252      	negs	r2, r2
 80019fa:	4691      	mov	r9, r2
 80019fc:	1ae3      	subs	r3, r4, r3
 80019fe:	001a      	movs	r2, r3
 8001a00:	464b      	mov	r3, r9
 8001a02:	1ad2      	subs	r2, r2, r3
 8001a04:	0013      	movs	r3, r2
 8001a06:	4691      	mov	r9, r2
 8001a08:	021a      	lsls	r2, r3, #8
 8001a0a:	d454      	bmi.n	8001ab6 <__aeabi_dadd+0x4ce>
 8001a0c:	464a      	mov	r2, r9
 8001a0e:	464c      	mov	r4, r9
 8001a10:	432a      	orrs	r2, r5
 8001a12:	d000      	beq.n	8001a16 <__aeabi_dadd+0x42e>
 8001a14:	e640      	b.n	8001698 <__aeabi_dadd+0xb0>
 8001a16:	2600      	movs	r6, #0
 8001a18:	2400      	movs	r4, #0
 8001a1a:	2500      	movs	r5, #0
 8001a1c:	e67c      	b.n	8001718 <__aeabi_dadd+0x130>
 8001a1e:	4da1      	ldr	r5, [pc, #644]	@ (8001ca4 <__aeabi_dadd+0x6bc>)
 8001a20:	45a9      	cmp	r9, r5
 8001a22:	d100      	bne.n	8001a26 <__aeabi_dadd+0x43e>
 8001a24:	e090      	b.n	8001b48 <__aeabi_dadd+0x560>
 8001a26:	2501      	movs	r5, #1
 8001a28:	2a38      	cmp	r2, #56	@ 0x38
 8001a2a:	dd00      	ble.n	8001a2e <__aeabi_dadd+0x446>
 8001a2c:	e6ab      	b.n	8001786 <__aeabi_dadd+0x19e>
 8001a2e:	2580      	movs	r5, #128	@ 0x80
 8001a30:	042d      	lsls	r5, r5, #16
 8001a32:	432c      	orrs	r4, r5
 8001a34:	e695      	b.n	8001762 <__aeabi_dadd+0x17a>
 8001a36:	0011      	movs	r1, r2
 8001a38:	4655      	mov	r5, sl
 8001a3a:	3920      	subs	r1, #32
 8001a3c:	40cd      	lsrs	r5, r1
 8001a3e:	46a9      	mov	r9, r5
 8001a40:	2a20      	cmp	r2, #32
 8001a42:	d006      	beq.n	8001a52 <__aeabi_dadd+0x46a>
 8001a44:	2140      	movs	r1, #64	@ 0x40
 8001a46:	4653      	mov	r3, sl
 8001a48:	1a8a      	subs	r2, r1, r2
 8001a4a:	4093      	lsls	r3, r2
 8001a4c:	4662      	mov	r2, ip
 8001a4e:	431a      	orrs	r2, r3
 8001a50:	4694      	mov	ip, r2
 8001a52:	4665      	mov	r5, ip
 8001a54:	1e6b      	subs	r3, r5, #1
 8001a56:	419d      	sbcs	r5, r3
 8001a58:	464b      	mov	r3, r9
 8001a5a:	431d      	orrs	r5, r3
 8001a5c:	e612      	b.n	8001684 <__aeabi_dadd+0x9c>
 8001a5e:	0021      	movs	r1, r4
 8001a60:	4301      	orrs	r1, r0
 8001a62:	d100      	bne.n	8001a66 <__aeabi_dadd+0x47e>
 8001a64:	e0c4      	b.n	8001bf0 <__aeabi_dadd+0x608>
 8001a66:	1e51      	subs	r1, r2, #1
 8001a68:	2a01      	cmp	r2, #1
 8001a6a:	d100      	bne.n	8001a6e <__aeabi_dadd+0x486>
 8001a6c:	e0fb      	b.n	8001c66 <__aeabi_dadd+0x67e>
 8001a6e:	4d8d      	ldr	r5, [pc, #564]	@ (8001ca4 <__aeabi_dadd+0x6bc>)
 8001a70:	42aa      	cmp	r2, r5
 8001a72:	d100      	bne.n	8001a76 <__aeabi_dadd+0x48e>
 8001a74:	e0b5      	b.n	8001be2 <__aeabi_dadd+0x5fa>
 8001a76:	2501      	movs	r5, #1
 8001a78:	2938      	cmp	r1, #56	@ 0x38
 8001a7a:	dd00      	ble.n	8001a7e <__aeabi_dadd+0x496>
 8001a7c:	e741      	b.n	8001902 <__aeabi_dadd+0x31a>
 8001a7e:	000a      	movs	r2, r1
 8001a80:	e72f      	b.n	80018e2 <__aeabi_dadd+0x2fa>
 8001a82:	4c89      	ldr	r4, [pc, #548]	@ (8001ca8 <__aeabi_dadd+0x6c0>)
 8001a84:	1aff      	subs	r7, r7, r3
 8001a86:	4014      	ands	r4, r2
 8001a88:	0762      	lsls	r2, r4, #29
 8001a8a:	08e4      	lsrs	r4, r4, #3
 8001a8c:	e76a      	b.n	8001964 <__aeabi_dadd+0x37c>
 8001a8e:	4a85      	ldr	r2, [pc, #532]	@ (8001ca4 <__aeabi_dadd+0x6bc>)
 8001a90:	4291      	cmp	r1, r2
 8001a92:	d100      	bne.n	8001a96 <__aeabi_dadd+0x4ae>
 8001a94:	e0e3      	b.n	8001c5e <__aeabi_dadd+0x676>
 8001a96:	4663      	mov	r3, ip
 8001a98:	18c2      	adds	r2, r0, r3
 8001a9a:	4282      	cmp	r2, r0
 8001a9c:	4180      	sbcs	r0, r0
 8001a9e:	0023      	movs	r3, r4
 8001aa0:	4240      	negs	r0, r0
 8001aa2:	4453      	add	r3, sl
 8001aa4:	181b      	adds	r3, r3, r0
 8001aa6:	07dd      	lsls	r5, r3, #31
 8001aa8:	085c      	lsrs	r4, r3, #1
 8001aaa:	2307      	movs	r3, #7
 8001aac:	0852      	lsrs	r2, r2, #1
 8001aae:	4315      	orrs	r5, r2
 8001ab0:	000f      	movs	r7, r1
 8001ab2:	402b      	ands	r3, r5
 8001ab4:	e700      	b.n	80018b8 <__aeabi_dadd+0x2d0>
 8001ab6:	4663      	mov	r3, ip
 8001ab8:	1a1d      	subs	r5, r3, r0
 8001aba:	45ac      	cmp	ip, r5
 8001abc:	4192      	sbcs	r2, r2
 8001abe:	4653      	mov	r3, sl
 8001ac0:	4252      	negs	r2, r2
 8001ac2:	1b1c      	subs	r4, r3, r4
 8001ac4:	000e      	movs	r6, r1
 8001ac6:	4688      	mov	r8, r1
 8001ac8:	1aa4      	subs	r4, r4, r2
 8001aca:	e5e5      	b.n	8001698 <__aeabi_dadd+0xb0>
 8001acc:	2d00      	cmp	r5, #0
 8001ace:	d000      	beq.n	8001ad2 <__aeabi_dadd+0x4ea>
 8001ad0:	e091      	b.n	8001bf6 <__aeabi_dadd+0x60e>
 8001ad2:	2a00      	cmp	r2, #0
 8001ad4:	d138      	bne.n	8001b48 <__aeabi_dadd+0x560>
 8001ad6:	2480      	movs	r4, #128	@ 0x80
 8001ad8:	2600      	movs	r6, #0
 8001ada:	0324      	lsls	r4, r4, #12
 8001adc:	e756      	b.n	800198c <__aeabi_dadd+0x3a4>
 8001ade:	4663      	mov	r3, ip
 8001ae0:	18c5      	adds	r5, r0, r3
 8001ae2:	4285      	cmp	r5, r0
 8001ae4:	4180      	sbcs	r0, r0
 8001ae6:	4454      	add	r4, sl
 8001ae8:	4240      	negs	r0, r0
 8001aea:	1824      	adds	r4, r4, r0
 8001aec:	2701      	movs	r7, #1
 8001aee:	0223      	lsls	r3, r4, #8
 8001af0:	d400      	bmi.n	8001af4 <__aeabi_dadd+0x50c>
 8001af2:	e6df      	b.n	80018b4 <__aeabi_dadd+0x2cc>
 8001af4:	2702      	movs	r7, #2
 8001af6:	e687      	b.n	8001808 <__aeabi_dadd+0x220>
 8001af8:	4663      	mov	r3, ip
 8001afa:	1ac5      	subs	r5, r0, r3
 8001afc:	42a8      	cmp	r0, r5
 8001afe:	4180      	sbcs	r0, r0
 8001b00:	4653      	mov	r3, sl
 8001b02:	4240      	negs	r0, r0
 8001b04:	1ae4      	subs	r4, r4, r3
 8001b06:	2701      	movs	r7, #1
 8001b08:	1a24      	subs	r4, r4, r0
 8001b0a:	e5c0      	b.n	800168e <__aeabi_dadd+0xa6>
 8001b0c:	0762      	lsls	r2, r4, #29
 8001b0e:	08c0      	lsrs	r0, r0, #3
 8001b10:	4302      	orrs	r2, r0
 8001b12:	08e4      	lsrs	r4, r4, #3
 8001b14:	e736      	b.n	8001984 <__aeabi_dadd+0x39c>
 8001b16:	0011      	movs	r1, r2
 8001b18:	4653      	mov	r3, sl
 8001b1a:	3920      	subs	r1, #32
 8001b1c:	40cb      	lsrs	r3, r1
 8001b1e:	4699      	mov	r9, r3
 8001b20:	2a20      	cmp	r2, #32
 8001b22:	d006      	beq.n	8001b32 <__aeabi_dadd+0x54a>
 8001b24:	2140      	movs	r1, #64	@ 0x40
 8001b26:	4653      	mov	r3, sl
 8001b28:	1a8a      	subs	r2, r1, r2
 8001b2a:	4093      	lsls	r3, r2
 8001b2c:	4662      	mov	r2, ip
 8001b2e:	431a      	orrs	r2, r3
 8001b30:	4694      	mov	ip, r2
 8001b32:	4665      	mov	r5, ip
 8001b34:	1e6b      	subs	r3, r5, #1
 8001b36:	419d      	sbcs	r5, r3
 8001b38:	464b      	mov	r3, r9
 8001b3a:	431d      	orrs	r5, r3
 8001b3c:	e659      	b.n	80017f2 <__aeabi_dadd+0x20a>
 8001b3e:	0762      	lsls	r2, r4, #29
>>>>>>> main
 8001b40:	08c0      	lsrs	r0, r0, #3
 8001b42:	4302      	orrs	r2, r0
 8001b44:	08e4      	lsrs	r4, r4, #3
 8001b46:	e70d      	b.n	8001964 <__aeabi_dadd+0x37c>
 8001b48:	4653      	mov	r3, sl
 8001b4a:	075a      	lsls	r2, r3, #29
 8001b4c:	4663      	mov	r3, ip
 8001b4e:	08d8      	lsrs	r0, r3, #3
 8001b50:	4653      	mov	r3, sl
 8001b52:	000e      	movs	r6, r1
 8001b54:	4302      	orrs	r2, r0
 8001b56:	08dc      	lsrs	r4, r3, #3
 8001b58:	e714      	b.n	8001984 <__aeabi_dadd+0x39c>
 8001b5a:	0015      	movs	r5, r2
 8001b5c:	0026      	movs	r6, r4
 8001b5e:	3d20      	subs	r5, #32
 8001b60:	40ee      	lsrs	r6, r5
 8001b62:	2a20      	cmp	r2, #32
 8001b64:	d003      	beq.n	8001b6e <__aeabi_dadd+0x586>
 8001b66:	2540      	movs	r5, #64	@ 0x40
 8001b68:	1aaa      	subs	r2, r5, r2
 8001b6a:	4094      	lsls	r4, r2
 8001b6c:	4320      	orrs	r0, r4
 8001b6e:	1e42      	subs	r2, r0, #1
 8001b70:	4190      	sbcs	r0, r2
 8001b72:	0005      	movs	r5, r0
 8001b74:	4335      	orrs	r5, r6
 8001b76:	e606      	b.n	8001786 <__aeabi_dadd+0x19e>
 8001b78:	2a00      	cmp	r2, #0
 8001b7a:	d07c      	beq.n	8001c76 <__aeabi_dadd+0x68e>
 8001b7c:	4662      	mov	r2, ip
 8001b7e:	4653      	mov	r3, sl
 8001b80:	08c0      	lsrs	r0, r0, #3
 8001b82:	431a      	orrs	r2, r3
 8001b84:	d100      	bne.n	8001b88 <__aeabi_dadd+0x5a0>
 8001b86:	e6fa      	b.n	800197e <__aeabi_dadd+0x396>
 8001b88:	0762      	lsls	r2, r4, #29
 8001b8a:	4310      	orrs	r0, r2
 8001b8c:	2280      	movs	r2, #128	@ 0x80
 8001b8e:	08e4      	lsrs	r4, r4, #3
 8001b90:	0312      	lsls	r2, r2, #12
 8001b92:	4214      	tst	r4, r2
 8001b94:	d008      	beq.n	8001ba8 <__aeabi_dadd+0x5c0>
 8001b96:	08d9      	lsrs	r1, r3, #3
 8001b98:	4211      	tst	r1, r2
 8001b9a:	d105      	bne.n	8001ba8 <__aeabi_dadd+0x5c0>
 8001b9c:	4663      	mov	r3, ip
 8001b9e:	08d8      	lsrs	r0, r3, #3
 8001ba0:	4653      	mov	r3, sl
 8001ba2:	000c      	movs	r4, r1
 8001ba4:	075b      	lsls	r3, r3, #29
 8001ba6:	4318      	orrs	r0, r3
 8001ba8:	0f42      	lsrs	r2, r0, #29
 8001baa:	00c0      	lsls	r0, r0, #3
 8001bac:	08c0      	lsrs	r0, r0, #3
 8001bae:	0752      	lsls	r2, r2, #29
 8001bb0:	4302      	orrs	r2, r0
 8001bb2:	e6e7      	b.n	8001984 <__aeabi_dadd+0x39c>
 8001bb4:	2a00      	cmp	r2, #0
 8001bb6:	d100      	bne.n	8001bba <__aeabi_dadd+0x5d2>
 8001bb8:	e72d      	b.n	8001a16 <__aeabi_dadd+0x42e>
 8001bba:	4663      	mov	r3, ip
 8001bbc:	08d8      	lsrs	r0, r3, #3
 8001bbe:	4653      	mov	r3, sl
 8001bc0:	075a      	lsls	r2, r3, #29
 8001bc2:	000e      	movs	r6, r1
 8001bc4:	4302      	orrs	r2, r0
 8001bc6:	08dc      	lsrs	r4, r3, #3
 8001bc8:	e6cc      	b.n	8001964 <__aeabi_dadd+0x37c>
 8001bca:	4663      	mov	r3, ip
 8001bcc:	1a1d      	subs	r5, r3, r0
 8001bce:	45ac      	cmp	ip, r5
 8001bd0:	4192      	sbcs	r2, r2
 8001bd2:	4653      	mov	r3, sl
 8001bd4:	4252      	negs	r2, r2
 8001bd6:	1b1c      	subs	r4, r3, r4
 8001bd8:	000e      	movs	r6, r1
 8001bda:	4688      	mov	r8, r1
 8001bdc:	1aa4      	subs	r4, r4, r2
 8001bde:	3701      	adds	r7, #1
 8001be0:	e555      	b.n	800168e <__aeabi_dadd+0xa6>
 8001be2:	4663      	mov	r3, ip
 8001be4:	08d9      	lsrs	r1, r3, #3
 8001be6:	4653      	mov	r3, sl
 8001be8:	075a      	lsls	r2, r3, #29
 8001bea:	430a      	orrs	r2, r1
 8001bec:	08dc      	lsrs	r4, r3, #3
 8001bee:	e6c9      	b.n	8001984 <__aeabi_dadd+0x39c>
 8001bf0:	4660      	mov	r0, ip
 8001bf2:	4654      	mov	r4, sl
 8001bf4:	e6d4      	b.n	80019a0 <__aeabi_dadd+0x3b8>
 8001bf6:	08c0      	lsrs	r0, r0, #3
 8001bf8:	2a00      	cmp	r2, #0
 8001bfa:	d100      	bne.n	8001bfe <__aeabi_dadd+0x616>
 8001bfc:	e6bf      	b.n	800197e <__aeabi_dadd+0x396>
 8001bfe:	0762      	lsls	r2, r4, #29
 8001c00:	4310      	orrs	r0, r2
 8001c02:	2280      	movs	r2, #128	@ 0x80
 8001c04:	08e4      	lsrs	r4, r4, #3
 8001c06:	0312      	lsls	r2, r2, #12
 8001c08:	4214      	tst	r4, r2
 8001c0a:	d0cd      	beq.n	8001ba8 <__aeabi_dadd+0x5c0>
 8001c0c:	08dd      	lsrs	r5, r3, #3
 8001c0e:	4215      	tst	r5, r2
 8001c10:	d1ca      	bne.n	8001ba8 <__aeabi_dadd+0x5c0>
 8001c12:	4663      	mov	r3, ip
 8001c14:	08d8      	lsrs	r0, r3, #3
 8001c16:	4653      	mov	r3, sl
 8001c18:	075b      	lsls	r3, r3, #29
 8001c1a:	000e      	movs	r6, r1
 8001c1c:	002c      	movs	r4, r5
 8001c1e:	4318      	orrs	r0, r3
 8001c20:	e7c2      	b.n	8001ba8 <__aeabi_dadd+0x5c0>
 8001c22:	4663      	mov	r3, ip
 8001c24:	08d9      	lsrs	r1, r3, #3
 8001c26:	4653      	mov	r3, sl
 8001c28:	075a      	lsls	r2, r3, #29
 8001c2a:	430a      	orrs	r2, r1
 8001c2c:	08dc      	lsrs	r4, r3, #3
 8001c2e:	e699      	b.n	8001964 <__aeabi_dadd+0x37c>
 8001c30:	4663      	mov	r3, ip
 8001c32:	08d8      	lsrs	r0, r3, #3
 8001c34:	4653      	mov	r3, sl
 8001c36:	075a      	lsls	r2, r3, #29
 8001c38:	000e      	movs	r6, r1
 8001c3a:	4302      	orrs	r2, r0
 8001c3c:	08dc      	lsrs	r4, r3, #3
 8001c3e:	e6a1      	b.n	8001984 <__aeabi_dadd+0x39c>
 8001c40:	0011      	movs	r1, r2
 8001c42:	0027      	movs	r7, r4
 8001c44:	3920      	subs	r1, #32
 8001c46:	40cf      	lsrs	r7, r1
 8001c48:	2a20      	cmp	r2, #32
 8001c4a:	d003      	beq.n	8001c54 <__aeabi_dadd+0x66c>
 8001c4c:	2140      	movs	r1, #64	@ 0x40
 8001c4e:	1a8a      	subs	r2, r1, r2
 8001c50:	4094      	lsls	r4, r2
 8001c52:	4320      	orrs	r0, r4
 8001c54:	1e42      	subs	r2, r0, #1
 8001c56:	4190      	sbcs	r0, r2
 8001c58:	0005      	movs	r5, r0
 8001c5a:	433d      	orrs	r5, r7
 8001c5c:	e651      	b.n	8001902 <__aeabi_dadd+0x31a>
 8001c5e:	000c      	movs	r4, r1
 8001c60:	2500      	movs	r5, #0
 8001c62:	2200      	movs	r2, #0
 8001c64:	e558      	b.n	8001718 <__aeabi_dadd+0x130>
 8001c66:	4460      	add	r0, ip
 8001c68:	4560      	cmp	r0, ip
 8001c6a:	4192      	sbcs	r2, r2
 8001c6c:	4454      	add	r4, sl
 8001c6e:	4252      	negs	r2, r2
 8001c70:	0005      	movs	r5, r0
 8001c72:	18a4      	adds	r4, r4, r2
 8001c74:	e73a      	b.n	8001aec <__aeabi_dadd+0x504>
 8001c76:	4653      	mov	r3, sl
 8001c78:	075a      	lsls	r2, r3, #29
 8001c7a:	4663      	mov	r3, ip
 8001c7c:	08d9      	lsrs	r1, r3, #3
 8001c7e:	4653      	mov	r3, sl
 8001c80:	430a      	orrs	r2, r1
 8001c82:	08dc      	lsrs	r4, r3, #3
 8001c84:	e67e      	b.n	8001984 <__aeabi_dadd+0x39c>
 8001c86:	001a      	movs	r2, r3
 8001c88:	001c      	movs	r4, r3
 8001c8a:	432a      	orrs	r2, r5
 8001c8c:	d000      	beq.n	8001c90 <__aeabi_dadd+0x6a8>
 8001c8e:	e6ab      	b.n	80019e8 <__aeabi_dadd+0x400>
 8001c90:	e6c1      	b.n	8001a16 <__aeabi_dadd+0x42e>
 8001c92:	2120      	movs	r1, #32
 8001c94:	2500      	movs	r5, #0
 8001c96:	1a09      	subs	r1, r1, r0
 8001c98:	e519      	b.n	80016ce <__aeabi_dadd+0xe6>
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	2500      	movs	r5, #0
 8001c9e:	4c01      	ldr	r4, [pc, #4]	@ (8001ca4 <__aeabi_dadd+0x6bc>)
 8001ca0:	e53a      	b.n	8001718 <__aeabi_dadd+0x130>
 8001ca2:	46c0      	nop			@ (mov r8, r8)
 8001ca4:	000007ff 	.word	0x000007ff
 8001ca8:	ff7fffff 	.word	0xff7fffff
 8001cac:	000007fe 	.word	0x000007fe

<<<<<<< HEAD
08001c44 <__aeabi_ddiv>:
 8001c44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c46:	46de      	mov	lr, fp
 8001c48:	4645      	mov	r5, r8
 8001c4a:	4657      	mov	r7, sl
 8001c4c:	464e      	mov	r6, r9
 8001c4e:	b5e0      	push	{r5, r6, r7, lr}
 8001c50:	b087      	sub	sp, #28
 8001c52:	9200      	str	r2, [sp, #0]
 8001c54:	9301      	str	r3, [sp, #4]
 8001c56:	030b      	lsls	r3, r1, #12
 8001c58:	0b1b      	lsrs	r3, r3, #12
 8001c5a:	469b      	mov	fp, r3
 8001c5c:	0fca      	lsrs	r2, r1, #31
 8001c5e:	004b      	lsls	r3, r1, #1
 8001c60:	0004      	movs	r4, r0
 8001c62:	4680      	mov	r8, r0
 8001c64:	0d5b      	lsrs	r3, r3, #21
 8001c66:	9202      	str	r2, [sp, #8]
 8001c68:	d100      	bne.n	8001c6c <__aeabi_ddiv+0x28>
 8001c6a:	e16a      	b.n	8001f42 <__aeabi_ddiv+0x2fe>
 8001c6c:	4ad4      	ldr	r2, [pc, #848]	@ (8001fc0 <__aeabi_ddiv+0x37c>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d100      	bne.n	8001c74 <__aeabi_ddiv+0x30>
 8001c72:	e18c      	b.n	8001f8e <__aeabi_ddiv+0x34a>
 8001c74:	4659      	mov	r1, fp
 8001c76:	0f42      	lsrs	r2, r0, #29
 8001c78:	00c9      	lsls	r1, r1, #3
 8001c7a:	430a      	orrs	r2, r1
 8001c7c:	2180      	movs	r1, #128	@ 0x80
 8001c7e:	0409      	lsls	r1, r1, #16
 8001c80:	4311      	orrs	r1, r2
 8001c82:	00c2      	lsls	r2, r0, #3
 8001c84:	4690      	mov	r8, r2
 8001c86:	4acf      	ldr	r2, [pc, #828]	@ (8001fc4 <__aeabi_ddiv+0x380>)
 8001c88:	4689      	mov	r9, r1
 8001c8a:	4692      	mov	sl, r2
 8001c8c:	449a      	add	sl, r3
 8001c8e:	2300      	movs	r3, #0
 8001c90:	2400      	movs	r4, #0
 8001c92:	9303      	str	r3, [sp, #12]
 8001c94:	9e00      	ldr	r6, [sp, #0]
 8001c96:	9f01      	ldr	r7, [sp, #4]
 8001c98:	033b      	lsls	r3, r7, #12
 8001c9a:	0b1b      	lsrs	r3, r3, #12
 8001c9c:	469b      	mov	fp, r3
 8001c9e:	007b      	lsls	r3, r7, #1
 8001ca0:	0030      	movs	r0, r6
 8001ca2:	0d5b      	lsrs	r3, r3, #21
 8001ca4:	0ffd      	lsrs	r5, r7, #31
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d100      	bne.n	8001cac <__aeabi_ddiv+0x68>
 8001caa:	e128      	b.n	8001efe <__aeabi_ddiv+0x2ba>
 8001cac:	4ac4      	ldr	r2, [pc, #784]	@ (8001fc0 <__aeabi_ddiv+0x37c>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d100      	bne.n	8001cb4 <__aeabi_ddiv+0x70>
 8001cb2:	e177      	b.n	8001fa4 <__aeabi_ddiv+0x360>
 8001cb4:	4659      	mov	r1, fp
 8001cb6:	0f72      	lsrs	r2, r6, #29
 8001cb8:	00c9      	lsls	r1, r1, #3
 8001cba:	430a      	orrs	r2, r1
 8001cbc:	2180      	movs	r1, #128	@ 0x80
 8001cbe:	0409      	lsls	r1, r1, #16
 8001cc0:	4311      	orrs	r1, r2
 8001cc2:	468b      	mov	fp, r1
 8001cc4:	49bf      	ldr	r1, [pc, #764]	@ (8001fc4 <__aeabi_ddiv+0x380>)
 8001cc6:	00f2      	lsls	r2, r6, #3
 8001cc8:	468c      	mov	ip, r1
 8001cca:	4651      	mov	r1, sl
 8001ccc:	4463      	add	r3, ip
 8001cce:	1acb      	subs	r3, r1, r3
 8001cd0:	469a      	mov	sl, r3
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	9e02      	ldr	r6, [sp, #8]
 8001cd6:	406e      	eors	r6, r5
 8001cd8:	2c0f      	cmp	r4, #15
 8001cda:	d827      	bhi.n	8001d2c <__aeabi_ddiv+0xe8>
 8001cdc:	49ba      	ldr	r1, [pc, #744]	@ (8001fc8 <__aeabi_ddiv+0x384>)
 8001cde:	00a4      	lsls	r4, r4, #2
 8001ce0:	5909      	ldr	r1, [r1, r4]
 8001ce2:	468f      	mov	pc, r1
 8001ce4:	46cb      	mov	fp, r9
 8001ce6:	4642      	mov	r2, r8
 8001ce8:	9e02      	ldr	r6, [sp, #8]
 8001cea:	9b03      	ldr	r3, [sp, #12]
 8001cec:	2b02      	cmp	r3, #2
 8001cee:	d016      	beq.n	8001d1e <__aeabi_ddiv+0xda>
 8001cf0:	2b03      	cmp	r3, #3
 8001cf2:	d100      	bne.n	8001cf6 <__aeabi_ddiv+0xb2>
 8001cf4:	e2a6      	b.n	8002244 <__aeabi_ddiv+0x600>
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d000      	beq.n	8001cfc <__aeabi_ddiv+0xb8>
 8001cfa:	e0df      	b.n	8001ebc <__aeabi_ddiv+0x278>
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	2300      	movs	r3, #0
 8001d00:	2400      	movs	r4, #0
 8001d02:	4690      	mov	r8, r2
 8001d04:	051b      	lsls	r3, r3, #20
 8001d06:	4323      	orrs	r3, r4
 8001d08:	07f6      	lsls	r6, r6, #31
 8001d0a:	4333      	orrs	r3, r6
 8001d0c:	4640      	mov	r0, r8
 8001d0e:	0019      	movs	r1, r3
 8001d10:	b007      	add	sp, #28
 8001d12:	bcf0      	pop	{r4, r5, r6, r7}
 8001d14:	46bb      	mov	fp, r7
 8001d16:	46b2      	mov	sl, r6
 8001d18:	46a9      	mov	r9, r5
 8001d1a:	46a0      	mov	r8, r4
 8001d1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d1e:	2200      	movs	r2, #0
 8001d20:	2400      	movs	r4, #0
 8001d22:	4690      	mov	r8, r2
 8001d24:	4ba6      	ldr	r3, [pc, #664]	@ (8001fc0 <__aeabi_ddiv+0x37c>)
 8001d26:	e7ed      	b.n	8001d04 <__aeabi_ddiv+0xc0>
 8001d28:	002e      	movs	r6, r5
 8001d2a:	e7df      	b.n	8001cec <__aeabi_ddiv+0xa8>
 8001d2c:	45cb      	cmp	fp, r9
 8001d2e:	d200      	bcs.n	8001d32 <__aeabi_ddiv+0xee>
 8001d30:	e1d4      	b.n	80020dc <__aeabi_ddiv+0x498>
 8001d32:	d100      	bne.n	8001d36 <__aeabi_ddiv+0xf2>
 8001d34:	e1cf      	b.n	80020d6 <__aeabi_ddiv+0x492>
 8001d36:	2301      	movs	r3, #1
 8001d38:	425b      	negs	r3, r3
 8001d3a:	469c      	mov	ip, r3
 8001d3c:	4644      	mov	r4, r8
 8001d3e:	4648      	mov	r0, r9
 8001d40:	2700      	movs	r7, #0
 8001d42:	44e2      	add	sl, ip
 8001d44:	465b      	mov	r3, fp
 8001d46:	0e15      	lsrs	r5, r2, #24
 8001d48:	021b      	lsls	r3, r3, #8
 8001d4a:	431d      	orrs	r5, r3
 8001d4c:	0c19      	lsrs	r1, r3, #16
 8001d4e:	042b      	lsls	r3, r5, #16
 8001d50:	0212      	lsls	r2, r2, #8
 8001d52:	9500      	str	r5, [sp, #0]
 8001d54:	0c1d      	lsrs	r5, r3, #16
 8001d56:	4691      	mov	r9, r2
 8001d58:	9102      	str	r1, [sp, #8]
 8001d5a:	9503      	str	r5, [sp, #12]
 8001d5c:	f7fe fa76 	bl	800024c <__aeabi_uidivmod>
 8001d60:	0002      	movs	r2, r0
 8001d62:	436a      	muls	r2, r5
 8001d64:	040b      	lsls	r3, r1, #16
 8001d66:	0c21      	lsrs	r1, r4, #16
 8001d68:	4680      	mov	r8, r0
 8001d6a:	4319      	orrs	r1, r3
 8001d6c:	428a      	cmp	r2, r1
 8001d6e:	d909      	bls.n	8001d84 <__aeabi_ddiv+0x140>
 8001d70:	9d00      	ldr	r5, [sp, #0]
 8001d72:	2301      	movs	r3, #1
 8001d74:	46ac      	mov	ip, r5
 8001d76:	425b      	negs	r3, r3
 8001d78:	4461      	add	r1, ip
 8001d7a:	469c      	mov	ip, r3
 8001d7c:	44e0      	add	r8, ip
 8001d7e:	428d      	cmp	r5, r1
 8001d80:	d800      	bhi.n	8001d84 <__aeabi_ddiv+0x140>
 8001d82:	e1fb      	b.n	800217c <__aeabi_ddiv+0x538>
 8001d84:	1a88      	subs	r0, r1, r2
 8001d86:	9902      	ldr	r1, [sp, #8]
 8001d88:	f7fe fa60 	bl	800024c <__aeabi_uidivmod>
 8001d8c:	9a03      	ldr	r2, [sp, #12]
 8001d8e:	0424      	lsls	r4, r4, #16
 8001d90:	4342      	muls	r2, r0
 8001d92:	0409      	lsls	r1, r1, #16
 8001d94:	0c24      	lsrs	r4, r4, #16
 8001d96:	0003      	movs	r3, r0
 8001d98:	430c      	orrs	r4, r1
 8001d9a:	42a2      	cmp	r2, r4
 8001d9c:	d906      	bls.n	8001dac <__aeabi_ddiv+0x168>
 8001d9e:	9900      	ldr	r1, [sp, #0]
 8001da0:	3b01      	subs	r3, #1
 8001da2:	468c      	mov	ip, r1
 8001da4:	4464      	add	r4, ip
 8001da6:	42a1      	cmp	r1, r4
 8001da8:	d800      	bhi.n	8001dac <__aeabi_ddiv+0x168>
 8001daa:	e1e1      	b.n	8002170 <__aeabi_ddiv+0x52c>
 8001dac:	1aa0      	subs	r0, r4, r2
 8001dae:	4642      	mov	r2, r8
 8001db0:	0412      	lsls	r2, r2, #16
 8001db2:	431a      	orrs	r2, r3
 8001db4:	4693      	mov	fp, r2
 8001db6:	464b      	mov	r3, r9
 8001db8:	4659      	mov	r1, fp
 8001dba:	0c1b      	lsrs	r3, r3, #16
 8001dbc:	001d      	movs	r5, r3
 8001dbe:	9304      	str	r3, [sp, #16]
 8001dc0:	040b      	lsls	r3, r1, #16
 8001dc2:	4649      	mov	r1, r9
 8001dc4:	0409      	lsls	r1, r1, #16
 8001dc6:	0c09      	lsrs	r1, r1, #16
 8001dc8:	000c      	movs	r4, r1
 8001dca:	0c1b      	lsrs	r3, r3, #16
 8001dcc:	435c      	muls	r4, r3
 8001dce:	0c12      	lsrs	r2, r2, #16
 8001dd0:	436b      	muls	r3, r5
 8001dd2:	4688      	mov	r8, r1
 8001dd4:	4351      	muls	r1, r2
 8001dd6:	436a      	muls	r2, r5
 8001dd8:	0c25      	lsrs	r5, r4, #16
 8001dda:	46ac      	mov	ip, r5
 8001ddc:	185b      	adds	r3, r3, r1
 8001dde:	4463      	add	r3, ip
 8001de0:	4299      	cmp	r1, r3
 8001de2:	d903      	bls.n	8001dec <__aeabi_ddiv+0x1a8>
 8001de4:	2180      	movs	r1, #128	@ 0x80
 8001de6:	0249      	lsls	r1, r1, #9
 8001de8:	468c      	mov	ip, r1
 8001dea:	4462      	add	r2, ip
 8001dec:	0c19      	lsrs	r1, r3, #16
 8001dee:	0424      	lsls	r4, r4, #16
 8001df0:	041b      	lsls	r3, r3, #16
 8001df2:	0c24      	lsrs	r4, r4, #16
 8001df4:	188a      	adds	r2, r1, r2
 8001df6:	191c      	adds	r4, r3, r4
 8001df8:	4290      	cmp	r0, r2
 8001dfa:	d302      	bcc.n	8001e02 <__aeabi_ddiv+0x1be>
 8001dfc:	d116      	bne.n	8001e2c <__aeabi_ddiv+0x1e8>
 8001dfe:	42a7      	cmp	r7, r4
 8001e00:	d214      	bcs.n	8001e2c <__aeabi_ddiv+0x1e8>
 8001e02:	465b      	mov	r3, fp
 8001e04:	9d00      	ldr	r5, [sp, #0]
 8001e06:	3b01      	subs	r3, #1
 8001e08:	444f      	add	r7, r9
 8001e0a:	9305      	str	r3, [sp, #20]
 8001e0c:	454f      	cmp	r7, r9
 8001e0e:	419b      	sbcs	r3, r3
 8001e10:	46ac      	mov	ip, r5
 8001e12:	425b      	negs	r3, r3
 8001e14:	4463      	add	r3, ip
 8001e16:	18c0      	adds	r0, r0, r3
 8001e18:	4285      	cmp	r5, r0
 8001e1a:	d300      	bcc.n	8001e1e <__aeabi_ddiv+0x1da>
 8001e1c:	e1a1      	b.n	8002162 <__aeabi_ddiv+0x51e>
 8001e1e:	4282      	cmp	r2, r0
 8001e20:	d900      	bls.n	8001e24 <__aeabi_ddiv+0x1e0>
 8001e22:	e1f6      	b.n	8002212 <__aeabi_ddiv+0x5ce>
 8001e24:	d100      	bne.n	8001e28 <__aeabi_ddiv+0x1e4>
 8001e26:	e1f1      	b.n	800220c <__aeabi_ddiv+0x5c8>
 8001e28:	9b05      	ldr	r3, [sp, #20]
 8001e2a:	469b      	mov	fp, r3
 8001e2c:	1b3c      	subs	r4, r7, r4
 8001e2e:	42a7      	cmp	r7, r4
 8001e30:	41bf      	sbcs	r7, r7
 8001e32:	9d00      	ldr	r5, [sp, #0]
 8001e34:	1a80      	subs	r0, r0, r2
 8001e36:	427f      	negs	r7, r7
 8001e38:	1bc0      	subs	r0, r0, r7
 8001e3a:	4285      	cmp	r5, r0
 8001e3c:	d100      	bne.n	8001e40 <__aeabi_ddiv+0x1fc>
 8001e3e:	e1d0      	b.n	80021e2 <__aeabi_ddiv+0x59e>
 8001e40:	9902      	ldr	r1, [sp, #8]
 8001e42:	f7fe fa03 	bl	800024c <__aeabi_uidivmod>
 8001e46:	9a03      	ldr	r2, [sp, #12]
 8001e48:	040b      	lsls	r3, r1, #16
 8001e4a:	4342      	muls	r2, r0
 8001e4c:	0c21      	lsrs	r1, r4, #16
 8001e4e:	0007      	movs	r7, r0
 8001e50:	4319      	orrs	r1, r3
 8001e52:	428a      	cmp	r2, r1
 8001e54:	d900      	bls.n	8001e58 <__aeabi_ddiv+0x214>
 8001e56:	e178      	b.n	800214a <__aeabi_ddiv+0x506>
 8001e58:	1a88      	subs	r0, r1, r2
 8001e5a:	9902      	ldr	r1, [sp, #8]
 8001e5c:	f7fe f9f6 	bl	800024c <__aeabi_uidivmod>
 8001e60:	9a03      	ldr	r2, [sp, #12]
 8001e62:	0424      	lsls	r4, r4, #16
 8001e64:	4342      	muls	r2, r0
 8001e66:	0409      	lsls	r1, r1, #16
 8001e68:	0c24      	lsrs	r4, r4, #16
 8001e6a:	0003      	movs	r3, r0
 8001e6c:	430c      	orrs	r4, r1
 8001e6e:	42a2      	cmp	r2, r4
 8001e70:	d900      	bls.n	8001e74 <__aeabi_ddiv+0x230>
 8001e72:	e15d      	b.n	8002130 <__aeabi_ddiv+0x4ec>
 8001e74:	4641      	mov	r1, r8
 8001e76:	1aa4      	subs	r4, r4, r2
 8001e78:	043a      	lsls	r2, r7, #16
 8001e7a:	431a      	orrs	r2, r3
 8001e7c:	9d04      	ldr	r5, [sp, #16]
 8001e7e:	0413      	lsls	r3, r2, #16
 8001e80:	0c1b      	lsrs	r3, r3, #16
 8001e82:	4359      	muls	r1, r3
 8001e84:	4647      	mov	r7, r8
 8001e86:	436b      	muls	r3, r5
 8001e88:	469c      	mov	ip, r3
 8001e8a:	0c10      	lsrs	r0, r2, #16
 8001e8c:	4347      	muls	r7, r0
 8001e8e:	0c0b      	lsrs	r3, r1, #16
 8001e90:	44bc      	add	ip, r7
 8001e92:	4463      	add	r3, ip
 8001e94:	4368      	muls	r0, r5
 8001e96:	429f      	cmp	r7, r3
 8001e98:	d903      	bls.n	8001ea2 <__aeabi_ddiv+0x25e>
 8001e9a:	2580      	movs	r5, #128	@ 0x80
 8001e9c:	026d      	lsls	r5, r5, #9
 8001e9e:	46ac      	mov	ip, r5
 8001ea0:	4460      	add	r0, ip
 8001ea2:	0c1f      	lsrs	r7, r3, #16
 8001ea4:	0409      	lsls	r1, r1, #16
 8001ea6:	041b      	lsls	r3, r3, #16
 8001ea8:	0c09      	lsrs	r1, r1, #16
 8001eaa:	183f      	adds	r7, r7, r0
 8001eac:	185b      	adds	r3, r3, r1
 8001eae:	42bc      	cmp	r4, r7
 8001eb0:	d200      	bcs.n	8001eb4 <__aeabi_ddiv+0x270>
 8001eb2:	e102      	b.n	80020ba <__aeabi_ddiv+0x476>
 8001eb4:	d100      	bne.n	8001eb8 <__aeabi_ddiv+0x274>
 8001eb6:	e0fd      	b.n	80020b4 <__aeabi_ddiv+0x470>
 8001eb8:	2301      	movs	r3, #1
 8001eba:	431a      	orrs	r2, r3
 8001ebc:	4b43      	ldr	r3, [pc, #268]	@ (8001fcc <__aeabi_ddiv+0x388>)
 8001ebe:	4453      	add	r3, sl
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	dc00      	bgt.n	8001ec6 <__aeabi_ddiv+0x282>
 8001ec4:	e0ae      	b.n	8002024 <__aeabi_ddiv+0x3e0>
 8001ec6:	0751      	lsls	r1, r2, #29
 8001ec8:	d000      	beq.n	8001ecc <__aeabi_ddiv+0x288>
 8001eca:	e198      	b.n	80021fe <__aeabi_ddiv+0x5ba>
 8001ecc:	4659      	mov	r1, fp
 8001ece:	01c9      	lsls	r1, r1, #7
 8001ed0:	d506      	bpl.n	8001ee0 <__aeabi_ddiv+0x29c>
 8001ed2:	4659      	mov	r1, fp
 8001ed4:	4b3e      	ldr	r3, [pc, #248]	@ (8001fd0 <__aeabi_ddiv+0x38c>)
 8001ed6:	4019      	ands	r1, r3
 8001ed8:	2380      	movs	r3, #128	@ 0x80
 8001eda:	468b      	mov	fp, r1
 8001edc:	00db      	lsls	r3, r3, #3
 8001ede:	4453      	add	r3, sl
 8001ee0:	493c      	ldr	r1, [pc, #240]	@ (8001fd4 <__aeabi_ddiv+0x390>)
 8001ee2:	428b      	cmp	r3, r1
 8001ee4:	dd00      	ble.n	8001ee8 <__aeabi_ddiv+0x2a4>
 8001ee6:	e71a      	b.n	8001d1e <__aeabi_ddiv+0xda>
 8001ee8:	4659      	mov	r1, fp
 8001eea:	08d2      	lsrs	r2, r2, #3
 8001eec:	0749      	lsls	r1, r1, #29
 8001eee:	4311      	orrs	r1, r2
 8001ef0:	465a      	mov	r2, fp
 8001ef2:	055b      	lsls	r3, r3, #21
 8001ef4:	0254      	lsls	r4, r2, #9
 8001ef6:	4688      	mov	r8, r1
 8001ef8:	0b24      	lsrs	r4, r4, #12
 8001efa:	0d5b      	lsrs	r3, r3, #21
 8001efc:	e702      	b.n	8001d04 <__aeabi_ddiv+0xc0>
 8001efe:	465a      	mov	r2, fp
 8001f00:	9b00      	ldr	r3, [sp, #0]
 8001f02:	431a      	orrs	r2, r3
 8001f04:	d100      	bne.n	8001f08 <__aeabi_ddiv+0x2c4>
 8001f06:	e07e      	b.n	8002006 <__aeabi_ddiv+0x3c2>
 8001f08:	465b      	mov	r3, fp
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d100      	bne.n	8001f10 <__aeabi_ddiv+0x2cc>
 8001f0e:	e100      	b.n	8002112 <__aeabi_ddiv+0x4ce>
 8001f10:	4658      	mov	r0, fp
 8001f12:	f001 fa73 	bl	80033fc <__clzsi2>
 8001f16:	0002      	movs	r2, r0
 8001f18:	0003      	movs	r3, r0
 8001f1a:	3a0b      	subs	r2, #11
 8001f1c:	271d      	movs	r7, #29
 8001f1e:	9e00      	ldr	r6, [sp, #0]
 8001f20:	1aba      	subs	r2, r7, r2
 8001f22:	0019      	movs	r1, r3
 8001f24:	4658      	mov	r0, fp
 8001f26:	40d6      	lsrs	r6, r2
 8001f28:	3908      	subs	r1, #8
 8001f2a:	4088      	lsls	r0, r1
 8001f2c:	0032      	movs	r2, r6
 8001f2e:	4302      	orrs	r2, r0
 8001f30:	4693      	mov	fp, r2
 8001f32:	9a00      	ldr	r2, [sp, #0]
 8001f34:	408a      	lsls	r2, r1
 8001f36:	4928      	ldr	r1, [pc, #160]	@ (8001fd8 <__aeabi_ddiv+0x394>)
 8001f38:	4453      	add	r3, sl
 8001f3a:	468a      	mov	sl, r1
 8001f3c:	449a      	add	sl, r3
 8001f3e:	2300      	movs	r3, #0
 8001f40:	e6c8      	b.n	8001cd4 <__aeabi_ddiv+0x90>
 8001f42:	465b      	mov	r3, fp
 8001f44:	4303      	orrs	r3, r0
 8001f46:	4699      	mov	r9, r3
 8001f48:	d056      	beq.n	8001ff8 <__aeabi_ddiv+0x3b4>
 8001f4a:	465b      	mov	r3, fp
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d100      	bne.n	8001f52 <__aeabi_ddiv+0x30e>
 8001f50:	e0cd      	b.n	80020ee <__aeabi_ddiv+0x4aa>
 8001f52:	4658      	mov	r0, fp
 8001f54:	f001 fa52 	bl	80033fc <__clzsi2>
 8001f58:	230b      	movs	r3, #11
 8001f5a:	425b      	negs	r3, r3
 8001f5c:	469c      	mov	ip, r3
 8001f5e:	0002      	movs	r2, r0
 8001f60:	4484      	add	ip, r0
 8001f62:	4666      	mov	r6, ip
 8001f64:	231d      	movs	r3, #29
 8001f66:	1b9b      	subs	r3, r3, r6
 8001f68:	0026      	movs	r6, r4
 8001f6a:	0011      	movs	r1, r2
 8001f6c:	4658      	mov	r0, fp
 8001f6e:	40de      	lsrs	r6, r3
 8001f70:	3908      	subs	r1, #8
 8001f72:	4088      	lsls	r0, r1
 8001f74:	0033      	movs	r3, r6
 8001f76:	4303      	orrs	r3, r0
 8001f78:	4699      	mov	r9, r3
 8001f7a:	0023      	movs	r3, r4
 8001f7c:	408b      	lsls	r3, r1
 8001f7e:	4698      	mov	r8, r3
 8001f80:	4b16      	ldr	r3, [pc, #88]	@ (8001fdc <__aeabi_ddiv+0x398>)
 8001f82:	2400      	movs	r4, #0
 8001f84:	1a9b      	subs	r3, r3, r2
 8001f86:	469a      	mov	sl, r3
 8001f88:	2300      	movs	r3, #0
 8001f8a:	9303      	str	r3, [sp, #12]
 8001f8c:	e682      	b.n	8001c94 <__aeabi_ddiv+0x50>
 8001f8e:	465a      	mov	r2, fp
 8001f90:	4302      	orrs	r2, r0
 8001f92:	4691      	mov	r9, r2
 8001f94:	d12a      	bne.n	8001fec <__aeabi_ddiv+0x3a8>
 8001f96:	2200      	movs	r2, #0
 8001f98:	469a      	mov	sl, r3
 8001f9a:	2302      	movs	r3, #2
 8001f9c:	4690      	mov	r8, r2
 8001f9e:	2408      	movs	r4, #8
 8001fa0:	9303      	str	r3, [sp, #12]
 8001fa2:	e677      	b.n	8001c94 <__aeabi_ddiv+0x50>
 8001fa4:	465a      	mov	r2, fp
 8001fa6:	9b00      	ldr	r3, [sp, #0]
 8001fa8:	431a      	orrs	r2, r3
 8001faa:	4b0d      	ldr	r3, [pc, #52]	@ (8001fe0 <__aeabi_ddiv+0x39c>)
 8001fac:	469c      	mov	ip, r3
 8001fae:	44e2      	add	sl, ip
 8001fb0:	2a00      	cmp	r2, #0
 8001fb2:	d117      	bne.n	8001fe4 <__aeabi_ddiv+0x3a0>
 8001fb4:	2302      	movs	r3, #2
 8001fb6:	431c      	orrs	r4, r3
 8001fb8:	2300      	movs	r3, #0
 8001fba:	469b      	mov	fp, r3
 8001fbc:	3302      	adds	r3, #2
 8001fbe:	e689      	b.n	8001cd4 <__aeabi_ddiv+0x90>
 8001fc0:	000007ff 	.word	0x000007ff
 8001fc4:	fffffc01 	.word	0xfffffc01
 8001fc8:	08010538 	.word	0x08010538
 8001fcc:	000003ff 	.word	0x000003ff
 8001fd0:	feffffff 	.word	0xfeffffff
 8001fd4:	000007fe 	.word	0x000007fe
 8001fd8:	000003f3 	.word	0x000003f3
 8001fdc:	fffffc0d 	.word	0xfffffc0d
 8001fe0:	fffff801 	.word	0xfffff801
 8001fe4:	2303      	movs	r3, #3
 8001fe6:	0032      	movs	r2, r6
 8001fe8:	431c      	orrs	r4, r3
 8001fea:	e673      	b.n	8001cd4 <__aeabi_ddiv+0x90>
 8001fec:	469a      	mov	sl, r3
 8001fee:	2303      	movs	r3, #3
 8001ff0:	46d9      	mov	r9, fp
 8001ff2:	240c      	movs	r4, #12
 8001ff4:	9303      	str	r3, [sp, #12]
 8001ff6:	e64d      	b.n	8001c94 <__aeabi_ddiv+0x50>
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	4698      	mov	r8, r3
 8001ffc:	469a      	mov	sl, r3
 8001ffe:	3301      	adds	r3, #1
 8002000:	2404      	movs	r4, #4
 8002002:	9303      	str	r3, [sp, #12]
 8002004:	e646      	b.n	8001c94 <__aeabi_ddiv+0x50>
 8002006:	2301      	movs	r3, #1
 8002008:	431c      	orrs	r4, r3
 800200a:	2300      	movs	r3, #0
 800200c:	469b      	mov	fp, r3
 800200e:	3301      	adds	r3, #1
 8002010:	e660      	b.n	8001cd4 <__aeabi_ddiv+0x90>
 8002012:	2300      	movs	r3, #0
 8002014:	2480      	movs	r4, #128	@ 0x80
 8002016:	4698      	mov	r8, r3
 8002018:	2600      	movs	r6, #0
 800201a:	4b92      	ldr	r3, [pc, #584]	@ (8002264 <__aeabi_ddiv+0x620>)
 800201c:	0324      	lsls	r4, r4, #12
 800201e:	e671      	b.n	8001d04 <__aeabi_ddiv+0xc0>
 8002020:	2201      	movs	r2, #1
 8002022:	4252      	negs	r2, r2
 8002024:	2101      	movs	r1, #1
 8002026:	1ac9      	subs	r1, r1, r3
 8002028:	2938      	cmp	r1, #56	@ 0x38
 800202a:	dd00      	ble.n	800202e <__aeabi_ddiv+0x3ea>
 800202c:	e666      	b.n	8001cfc <__aeabi_ddiv+0xb8>
 800202e:	291f      	cmp	r1, #31
 8002030:	dc00      	bgt.n	8002034 <__aeabi_ddiv+0x3f0>
 8002032:	e0ab      	b.n	800218c <__aeabi_ddiv+0x548>
 8002034:	201f      	movs	r0, #31
 8002036:	4240      	negs	r0, r0
 8002038:	1ac3      	subs	r3, r0, r3
 800203a:	4658      	mov	r0, fp
 800203c:	40d8      	lsrs	r0, r3
 800203e:	0003      	movs	r3, r0
 8002040:	2920      	cmp	r1, #32
 8002042:	d004      	beq.n	800204e <__aeabi_ddiv+0x40a>
 8002044:	4658      	mov	r0, fp
 8002046:	4988      	ldr	r1, [pc, #544]	@ (8002268 <__aeabi_ddiv+0x624>)
 8002048:	4451      	add	r1, sl
 800204a:	4088      	lsls	r0, r1
 800204c:	4302      	orrs	r2, r0
 800204e:	1e51      	subs	r1, r2, #1
 8002050:	418a      	sbcs	r2, r1
 8002052:	431a      	orrs	r2, r3
 8002054:	2307      	movs	r3, #7
 8002056:	0019      	movs	r1, r3
 8002058:	2400      	movs	r4, #0
 800205a:	4011      	ands	r1, r2
 800205c:	4213      	tst	r3, r2
 800205e:	d00c      	beq.n	800207a <__aeabi_ddiv+0x436>
 8002060:	230f      	movs	r3, #15
 8002062:	4013      	ands	r3, r2
 8002064:	2b04      	cmp	r3, #4
 8002066:	d100      	bne.n	800206a <__aeabi_ddiv+0x426>
 8002068:	e0f9      	b.n	800225e <__aeabi_ddiv+0x61a>
 800206a:	1d11      	adds	r1, r2, #4
 800206c:	4291      	cmp	r1, r2
 800206e:	419b      	sbcs	r3, r3
 8002070:	000a      	movs	r2, r1
 8002072:	425b      	negs	r3, r3
 8002074:	0759      	lsls	r1, r3, #29
 8002076:	025b      	lsls	r3, r3, #9
 8002078:	0b1c      	lsrs	r4, r3, #12
 800207a:	08d2      	lsrs	r2, r2, #3
 800207c:	430a      	orrs	r2, r1
 800207e:	4690      	mov	r8, r2
 8002080:	2300      	movs	r3, #0
 8002082:	e63f      	b.n	8001d04 <__aeabi_ddiv+0xc0>
 8002084:	2480      	movs	r4, #128	@ 0x80
 8002086:	464b      	mov	r3, r9
 8002088:	0324      	lsls	r4, r4, #12
 800208a:	4223      	tst	r3, r4
 800208c:	d009      	beq.n	80020a2 <__aeabi_ddiv+0x45e>
 800208e:	465b      	mov	r3, fp
 8002090:	4223      	tst	r3, r4
 8002092:	d106      	bne.n	80020a2 <__aeabi_ddiv+0x45e>
 8002094:	431c      	orrs	r4, r3
 8002096:	0324      	lsls	r4, r4, #12
 8002098:	002e      	movs	r6, r5
 800209a:	4690      	mov	r8, r2
 800209c:	4b71      	ldr	r3, [pc, #452]	@ (8002264 <__aeabi_ddiv+0x620>)
 800209e:	0b24      	lsrs	r4, r4, #12
 80020a0:	e630      	b.n	8001d04 <__aeabi_ddiv+0xc0>
 80020a2:	2480      	movs	r4, #128	@ 0x80
 80020a4:	464b      	mov	r3, r9
 80020a6:	0324      	lsls	r4, r4, #12
 80020a8:	431c      	orrs	r4, r3
 80020aa:	0324      	lsls	r4, r4, #12
 80020ac:	9e02      	ldr	r6, [sp, #8]
 80020ae:	4b6d      	ldr	r3, [pc, #436]	@ (8002264 <__aeabi_ddiv+0x620>)
 80020b0:	0b24      	lsrs	r4, r4, #12
 80020b2:	e627      	b.n	8001d04 <__aeabi_ddiv+0xc0>
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d100      	bne.n	80020ba <__aeabi_ddiv+0x476>
 80020b8:	e700      	b.n	8001ebc <__aeabi_ddiv+0x278>
 80020ba:	9800      	ldr	r0, [sp, #0]
 80020bc:	1e51      	subs	r1, r2, #1
 80020be:	4684      	mov	ip, r0
 80020c0:	4464      	add	r4, ip
 80020c2:	4284      	cmp	r4, r0
 80020c4:	d200      	bcs.n	80020c8 <__aeabi_ddiv+0x484>
 80020c6:	e084      	b.n	80021d2 <__aeabi_ddiv+0x58e>
 80020c8:	42bc      	cmp	r4, r7
 80020ca:	d200      	bcs.n	80020ce <__aeabi_ddiv+0x48a>
 80020cc:	e0ae      	b.n	800222c <__aeabi_ddiv+0x5e8>
 80020ce:	d100      	bne.n	80020d2 <__aeabi_ddiv+0x48e>
 80020d0:	e0c1      	b.n	8002256 <__aeabi_ddiv+0x612>
 80020d2:	000a      	movs	r2, r1
 80020d4:	e6f0      	b.n	8001eb8 <__aeabi_ddiv+0x274>
 80020d6:	4542      	cmp	r2, r8
 80020d8:	d900      	bls.n	80020dc <__aeabi_ddiv+0x498>
 80020da:	e62c      	b.n	8001d36 <__aeabi_ddiv+0xf2>
 80020dc:	464b      	mov	r3, r9
 80020de:	07dc      	lsls	r4, r3, #31
 80020e0:	0858      	lsrs	r0, r3, #1
 80020e2:	4643      	mov	r3, r8
 80020e4:	085b      	lsrs	r3, r3, #1
 80020e6:	431c      	orrs	r4, r3
 80020e8:	4643      	mov	r3, r8
 80020ea:	07df      	lsls	r7, r3, #31
 80020ec:	e62a      	b.n	8001d44 <__aeabi_ddiv+0x100>
 80020ee:	f001 f985 	bl	80033fc <__clzsi2>
 80020f2:	2315      	movs	r3, #21
 80020f4:	469c      	mov	ip, r3
 80020f6:	4484      	add	ip, r0
 80020f8:	0002      	movs	r2, r0
 80020fa:	4663      	mov	r3, ip
 80020fc:	3220      	adds	r2, #32
 80020fe:	2b1c      	cmp	r3, #28
 8002100:	dc00      	bgt.n	8002104 <__aeabi_ddiv+0x4c0>
 8002102:	e72e      	b.n	8001f62 <__aeabi_ddiv+0x31e>
 8002104:	0023      	movs	r3, r4
 8002106:	3808      	subs	r0, #8
 8002108:	4083      	lsls	r3, r0
 800210a:	4699      	mov	r9, r3
 800210c:	2300      	movs	r3, #0
 800210e:	4698      	mov	r8, r3
 8002110:	e736      	b.n	8001f80 <__aeabi_ddiv+0x33c>
 8002112:	f001 f973 	bl	80033fc <__clzsi2>
 8002116:	0002      	movs	r2, r0
 8002118:	0003      	movs	r3, r0
 800211a:	3215      	adds	r2, #21
 800211c:	3320      	adds	r3, #32
 800211e:	2a1c      	cmp	r2, #28
 8002120:	dc00      	bgt.n	8002124 <__aeabi_ddiv+0x4e0>
 8002122:	e6fb      	b.n	8001f1c <__aeabi_ddiv+0x2d8>
 8002124:	9900      	ldr	r1, [sp, #0]
 8002126:	3808      	subs	r0, #8
 8002128:	4081      	lsls	r1, r0
 800212a:	2200      	movs	r2, #0
 800212c:	468b      	mov	fp, r1
 800212e:	e702      	b.n	8001f36 <__aeabi_ddiv+0x2f2>
 8002130:	9900      	ldr	r1, [sp, #0]
 8002132:	3b01      	subs	r3, #1
 8002134:	468c      	mov	ip, r1
 8002136:	4464      	add	r4, ip
 8002138:	42a1      	cmp	r1, r4
 800213a:	d900      	bls.n	800213e <__aeabi_ddiv+0x4fa>
 800213c:	e69a      	b.n	8001e74 <__aeabi_ddiv+0x230>
 800213e:	42a2      	cmp	r2, r4
 8002140:	d800      	bhi.n	8002144 <__aeabi_ddiv+0x500>
 8002142:	e697      	b.n	8001e74 <__aeabi_ddiv+0x230>
 8002144:	1e83      	subs	r3, r0, #2
 8002146:	4464      	add	r4, ip
 8002148:	e694      	b.n	8001e74 <__aeabi_ddiv+0x230>
 800214a:	46ac      	mov	ip, r5
 800214c:	4461      	add	r1, ip
 800214e:	3f01      	subs	r7, #1
 8002150:	428d      	cmp	r5, r1
 8002152:	d900      	bls.n	8002156 <__aeabi_ddiv+0x512>
 8002154:	e680      	b.n	8001e58 <__aeabi_ddiv+0x214>
 8002156:	428a      	cmp	r2, r1
 8002158:	d800      	bhi.n	800215c <__aeabi_ddiv+0x518>
 800215a:	e67d      	b.n	8001e58 <__aeabi_ddiv+0x214>
 800215c:	1e87      	subs	r7, r0, #2
 800215e:	4461      	add	r1, ip
 8002160:	e67a      	b.n	8001e58 <__aeabi_ddiv+0x214>
 8002162:	4285      	cmp	r5, r0
 8002164:	d000      	beq.n	8002168 <__aeabi_ddiv+0x524>
 8002166:	e65f      	b.n	8001e28 <__aeabi_ddiv+0x1e4>
 8002168:	45b9      	cmp	r9, r7
 800216a:	d900      	bls.n	800216e <__aeabi_ddiv+0x52a>
 800216c:	e65c      	b.n	8001e28 <__aeabi_ddiv+0x1e4>
 800216e:	e656      	b.n	8001e1e <__aeabi_ddiv+0x1da>
 8002170:	42a2      	cmp	r2, r4
 8002172:	d800      	bhi.n	8002176 <__aeabi_ddiv+0x532>
 8002174:	e61a      	b.n	8001dac <__aeabi_ddiv+0x168>
 8002176:	1e83      	subs	r3, r0, #2
 8002178:	4464      	add	r4, ip
 800217a:	e617      	b.n	8001dac <__aeabi_ddiv+0x168>
 800217c:	428a      	cmp	r2, r1
 800217e:	d800      	bhi.n	8002182 <__aeabi_ddiv+0x53e>
 8002180:	e600      	b.n	8001d84 <__aeabi_ddiv+0x140>
 8002182:	46ac      	mov	ip, r5
 8002184:	1e83      	subs	r3, r0, #2
 8002186:	4698      	mov	r8, r3
 8002188:	4461      	add	r1, ip
 800218a:	e5fb      	b.n	8001d84 <__aeabi_ddiv+0x140>
 800218c:	4837      	ldr	r0, [pc, #220]	@ (800226c <__aeabi_ddiv+0x628>)
 800218e:	0014      	movs	r4, r2
 8002190:	4450      	add	r0, sl
 8002192:	4082      	lsls	r2, r0
 8002194:	465b      	mov	r3, fp
 8002196:	0017      	movs	r7, r2
 8002198:	4083      	lsls	r3, r0
 800219a:	40cc      	lsrs	r4, r1
 800219c:	1e7a      	subs	r2, r7, #1
 800219e:	4197      	sbcs	r7, r2
 80021a0:	4323      	orrs	r3, r4
 80021a2:	433b      	orrs	r3, r7
 80021a4:	001a      	movs	r2, r3
 80021a6:	465b      	mov	r3, fp
 80021a8:	40cb      	lsrs	r3, r1
 80021aa:	0751      	lsls	r1, r2, #29
 80021ac:	d009      	beq.n	80021c2 <__aeabi_ddiv+0x57e>
 80021ae:	210f      	movs	r1, #15
 80021b0:	4011      	ands	r1, r2
 80021b2:	2904      	cmp	r1, #4
 80021b4:	d005      	beq.n	80021c2 <__aeabi_ddiv+0x57e>
 80021b6:	1d11      	adds	r1, r2, #4
 80021b8:	4291      	cmp	r1, r2
 80021ba:	4192      	sbcs	r2, r2
 80021bc:	4252      	negs	r2, r2
 80021be:	189b      	adds	r3, r3, r2
 80021c0:	000a      	movs	r2, r1
 80021c2:	0219      	lsls	r1, r3, #8
 80021c4:	d400      	bmi.n	80021c8 <__aeabi_ddiv+0x584>
 80021c6:	e755      	b.n	8002074 <__aeabi_ddiv+0x430>
 80021c8:	2200      	movs	r2, #0
 80021ca:	2301      	movs	r3, #1
 80021cc:	2400      	movs	r4, #0
 80021ce:	4690      	mov	r8, r2
 80021d0:	e598      	b.n	8001d04 <__aeabi_ddiv+0xc0>
 80021d2:	000a      	movs	r2, r1
 80021d4:	42bc      	cmp	r4, r7
 80021d6:	d000      	beq.n	80021da <__aeabi_ddiv+0x596>
 80021d8:	e66e      	b.n	8001eb8 <__aeabi_ddiv+0x274>
 80021da:	454b      	cmp	r3, r9
 80021dc:	d000      	beq.n	80021e0 <__aeabi_ddiv+0x59c>
 80021de:	e66b      	b.n	8001eb8 <__aeabi_ddiv+0x274>
 80021e0:	e66c      	b.n	8001ebc <__aeabi_ddiv+0x278>
 80021e2:	4b23      	ldr	r3, [pc, #140]	@ (8002270 <__aeabi_ddiv+0x62c>)
 80021e4:	4a23      	ldr	r2, [pc, #140]	@ (8002274 <__aeabi_ddiv+0x630>)
 80021e6:	4453      	add	r3, sl
 80021e8:	4592      	cmp	sl, r2
 80021ea:	da00      	bge.n	80021ee <__aeabi_ddiv+0x5aa>
 80021ec:	e718      	b.n	8002020 <__aeabi_ddiv+0x3dc>
 80021ee:	2101      	movs	r1, #1
 80021f0:	4249      	negs	r1, r1
 80021f2:	1d0a      	adds	r2, r1, #4
 80021f4:	428a      	cmp	r2, r1
 80021f6:	4189      	sbcs	r1, r1
 80021f8:	4249      	negs	r1, r1
 80021fa:	448b      	add	fp, r1
 80021fc:	e666      	b.n	8001ecc <__aeabi_ddiv+0x288>
 80021fe:	210f      	movs	r1, #15
 8002200:	4011      	ands	r1, r2
 8002202:	2904      	cmp	r1, #4
 8002204:	d100      	bne.n	8002208 <__aeabi_ddiv+0x5c4>
 8002206:	e661      	b.n	8001ecc <__aeabi_ddiv+0x288>
 8002208:	0011      	movs	r1, r2
 800220a:	e7f2      	b.n	80021f2 <__aeabi_ddiv+0x5ae>
 800220c:	42bc      	cmp	r4, r7
 800220e:	d800      	bhi.n	8002212 <__aeabi_ddiv+0x5ce>
 8002210:	e60a      	b.n	8001e28 <__aeabi_ddiv+0x1e4>
 8002212:	2302      	movs	r3, #2
 8002214:	425b      	negs	r3, r3
 8002216:	469c      	mov	ip, r3
 8002218:	9900      	ldr	r1, [sp, #0]
 800221a:	444f      	add	r7, r9
 800221c:	454f      	cmp	r7, r9
 800221e:	419b      	sbcs	r3, r3
 8002220:	44e3      	add	fp, ip
 8002222:	468c      	mov	ip, r1
 8002224:	425b      	negs	r3, r3
 8002226:	4463      	add	r3, ip
 8002228:	18c0      	adds	r0, r0, r3
 800222a:	e5ff      	b.n	8001e2c <__aeabi_ddiv+0x1e8>
 800222c:	4649      	mov	r1, r9
 800222e:	9d00      	ldr	r5, [sp, #0]
 8002230:	0048      	lsls	r0, r1, #1
 8002232:	4548      	cmp	r0, r9
 8002234:	4189      	sbcs	r1, r1
 8002236:	46ac      	mov	ip, r5
 8002238:	4249      	negs	r1, r1
 800223a:	4461      	add	r1, ip
 800223c:	4681      	mov	r9, r0
 800223e:	3a02      	subs	r2, #2
 8002240:	1864      	adds	r4, r4, r1
 8002242:	e7c7      	b.n	80021d4 <__aeabi_ddiv+0x590>
 8002244:	2480      	movs	r4, #128	@ 0x80
 8002246:	465b      	mov	r3, fp
 8002248:	0324      	lsls	r4, r4, #12
 800224a:	431c      	orrs	r4, r3
 800224c:	0324      	lsls	r4, r4, #12
 800224e:	4690      	mov	r8, r2
 8002250:	4b04      	ldr	r3, [pc, #16]	@ (8002264 <__aeabi_ddiv+0x620>)
 8002252:	0b24      	lsrs	r4, r4, #12
 8002254:	e556      	b.n	8001d04 <__aeabi_ddiv+0xc0>
 8002256:	4599      	cmp	r9, r3
 8002258:	d3e8      	bcc.n	800222c <__aeabi_ddiv+0x5e8>
 800225a:	000a      	movs	r2, r1
 800225c:	e7bd      	b.n	80021da <__aeabi_ddiv+0x596>
 800225e:	2300      	movs	r3, #0
 8002260:	e708      	b.n	8002074 <__aeabi_ddiv+0x430>
 8002262:	46c0      	nop			@ (mov r8, r8)
 8002264:	000007ff 	.word	0x000007ff
 8002268:	0000043e 	.word	0x0000043e
 800226c:	0000041e 	.word	0x0000041e
 8002270:	000003ff 	.word	0x000003ff
 8002274:	fffffc02 	.word	0xfffffc02
=======
08001cb0 <__aeabi_ddiv>:
 8001cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cb2:	46de      	mov	lr, fp
 8001cb4:	4645      	mov	r5, r8
 8001cb6:	4657      	mov	r7, sl
 8001cb8:	464e      	mov	r6, r9
 8001cba:	b5e0      	push	{r5, r6, r7, lr}
 8001cbc:	b087      	sub	sp, #28
 8001cbe:	9200      	str	r2, [sp, #0]
 8001cc0:	9301      	str	r3, [sp, #4]
 8001cc2:	030b      	lsls	r3, r1, #12
 8001cc4:	0b1b      	lsrs	r3, r3, #12
 8001cc6:	469b      	mov	fp, r3
 8001cc8:	0fca      	lsrs	r2, r1, #31
 8001cca:	004b      	lsls	r3, r1, #1
 8001ccc:	0004      	movs	r4, r0
 8001cce:	4680      	mov	r8, r0
 8001cd0:	0d5b      	lsrs	r3, r3, #21
 8001cd2:	9202      	str	r2, [sp, #8]
 8001cd4:	d100      	bne.n	8001cd8 <__aeabi_ddiv+0x28>
 8001cd6:	e16a      	b.n	8001fae <__aeabi_ddiv+0x2fe>
 8001cd8:	4ad4      	ldr	r2, [pc, #848]	@ (800202c <__aeabi_ddiv+0x37c>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d100      	bne.n	8001ce0 <__aeabi_ddiv+0x30>
 8001cde:	e18c      	b.n	8001ffa <__aeabi_ddiv+0x34a>
 8001ce0:	4659      	mov	r1, fp
 8001ce2:	0f42      	lsrs	r2, r0, #29
 8001ce4:	00c9      	lsls	r1, r1, #3
 8001ce6:	430a      	orrs	r2, r1
 8001ce8:	2180      	movs	r1, #128	@ 0x80
 8001cea:	0409      	lsls	r1, r1, #16
 8001cec:	4311      	orrs	r1, r2
 8001cee:	00c2      	lsls	r2, r0, #3
 8001cf0:	4690      	mov	r8, r2
 8001cf2:	4acf      	ldr	r2, [pc, #828]	@ (8002030 <__aeabi_ddiv+0x380>)
 8001cf4:	4689      	mov	r9, r1
 8001cf6:	4692      	mov	sl, r2
 8001cf8:	449a      	add	sl, r3
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	2400      	movs	r4, #0
 8001cfe:	9303      	str	r3, [sp, #12]
 8001d00:	9e00      	ldr	r6, [sp, #0]
 8001d02:	9f01      	ldr	r7, [sp, #4]
 8001d04:	033b      	lsls	r3, r7, #12
 8001d06:	0b1b      	lsrs	r3, r3, #12
 8001d08:	469b      	mov	fp, r3
 8001d0a:	007b      	lsls	r3, r7, #1
 8001d0c:	0030      	movs	r0, r6
 8001d0e:	0d5b      	lsrs	r3, r3, #21
 8001d10:	0ffd      	lsrs	r5, r7, #31
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d100      	bne.n	8001d18 <__aeabi_ddiv+0x68>
 8001d16:	e128      	b.n	8001f6a <__aeabi_ddiv+0x2ba>
 8001d18:	4ac4      	ldr	r2, [pc, #784]	@ (800202c <__aeabi_ddiv+0x37c>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d100      	bne.n	8001d20 <__aeabi_ddiv+0x70>
 8001d1e:	e177      	b.n	8002010 <__aeabi_ddiv+0x360>
 8001d20:	4659      	mov	r1, fp
 8001d22:	0f72      	lsrs	r2, r6, #29
 8001d24:	00c9      	lsls	r1, r1, #3
 8001d26:	430a      	orrs	r2, r1
 8001d28:	2180      	movs	r1, #128	@ 0x80
 8001d2a:	0409      	lsls	r1, r1, #16
 8001d2c:	4311      	orrs	r1, r2
 8001d2e:	468b      	mov	fp, r1
 8001d30:	49bf      	ldr	r1, [pc, #764]	@ (8002030 <__aeabi_ddiv+0x380>)
 8001d32:	00f2      	lsls	r2, r6, #3
 8001d34:	468c      	mov	ip, r1
 8001d36:	4651      	mov	r1, sl
 8001d38:	4463      	add	r3, ip
 8001d3a:	1acb      	subs	r3, r1, r3
 8001d3c:	469a      	mov	sl, r3
 8001d3e:	2300      	movs	r3, #0
 8001d40:	9e02      	ldr	r6, [sp, #8]
 8001d42:	406e      	eors	r6, r5
 8001d44:	2c0f      	cmp	r4, #15
 8001d46:	d827      	bhi.n	8001d98 <__aeabi_ddiv+0xe8>
 8001d48:	49ba      	ldr	r1, [pc, #744]	@ (8002034 <__aeabi_ddiv+0x384>)
 8001d4a:	00a4      	lsls	r4, r4, #2
 8001d4c:	5909      	ldr	r1, [r1, r4]
 8001d4e:	468f      	mov	pc, r1
 8001d50:	46cb      	mov	fp, r9
 8001d52:	4642      	mov	r2, r8
 8001d54:	9e02      	ldr	r6, [sp, #8]
 8001d56:	9b03      	ldr	r3, [sp, #12]
 8001d58:	2b02      	cmp	r3, #2
 8001d5a:	d016      	beq.n	8001d8a <__aeabi_ddiv+0xda>
 8001d5c:	2b03      	cmp	r3, #3
 8001d5e:	d100      	bne.n	8001d62 <__aeabi_ddiv+0xb2>
 8001d60:	e2a6      	b.n	80022b0 <__aeabi_ddiv+0x600>
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d000      	beq.n	8001d68 <__aeabi_ddiv+0xb8>
 8001d66:	e0df      	b.n	8001f28 <__aeabi_ddiv+0x278>
 8001d68:	2200      	movs	r2, #0
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	2400      	movs	r4, #0
 8001d6e:	4690      	mov	r8, r2
 8001d70:	051b      	lsls	r3, r3, #20
 8001d72:	4323      	orrs	r3, r4
 8001d74:	07f6      	lsls	r6, r6, #31
 8001d76:	4333      	orrs	r3, r6
 8001d78:	4640      	mov	r0, r8
 8001d7a:	0019      	movs	r1, r3
 8001d7c:	b007      	add	sp, #28
 8001d7e:	bcf0      	pop	{r4, r5, r6, r7}
 8001d80:	46bb      	mov	fp, r7
 8001d82:	46b2      	mov	sl, r6
 8001d84:	46a9      	mov	r9, r5
 8001d86:	46a0      	mov	r8, r4
 8001d88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	2400      	movs	r4, #0
 8001d8e:	4690      	mov	r8, r2
 8001d90:	4ba6      	ldr	r3, [pc, #664]	@ (800202c <__aeabi_ddiv+0x37c>)
 8001d92:	e7ed      	b.n	8001d70 <__aeabi_ddiv+0xc0>
 8001d94:	002e      	movs	r6, r5
 8001d96:	e7df      	b.n	8001d58 <__aeabi_ddiv+0xa8>
 8001d98:	45cb      	cmp	fp, r9
 8001d9a:	d200      	bcs.n	8001d9e <__aeabi_ddiv+0xee>
 8001d9c:	e1d4      	b.n	8002148 <__aeabi_ddiv+0x498>
 8001d9e:	d100      	bne.n	8001da2 <__aeabi_ddiv+0xf2>
 8001da0:	e1cf      	b.n	8002142 <__aeabi_ddiv+0x492>
 8001da2:	2301      	movs	r3, #1
 8001da4:	425b      	negs	r3, r3
 8001da6:	469c      	mov	ip, r3
 8001da8:	4644      	mov	r4, r8
 8001daa:	4648      	mov	r0, r9
 8001dac:	2700      	movs	r7, #0
 8001dae:	44e2      	add	sl, ip
 8001db0:	465b      	mov	r3, fp
 8001db2:	0e15      	lsrs	r5, r2, #24
 8001db4:	021b      	lsls	r3, r3, #8
 8001db6:	431d      	orrs	r5, r3
 8001db8:	0c19      	lsrs	r1, r3, #16
 8001dba:	042b      	lsls	r3, r5, #16
 8001dbc:	0212      	lsls	r2, r2, #8
 8001dbe:	9500      	str	r5, [sp, #0]
 8001dc0:	0c1d      	lsrs	r5, r3, #16
 8001dc2:	4691      	mov	r9, r2
 8001dc4:	9102      	str	r1, [sp, #8]
 8001dc6:	9503      	str	r5, [sp, #12]
 8001dc8:	f7fe fa40 	bl	800024c <__aeabi_uidivmod>
 8001dcc:	0002      	movs	r2, r0
 8001dce:	436a      	muls	r2, r5
 8001dd0:	040b      	lsls	r3, r1, #16
 8001dd2:	0c21      	lsrs	r1, r4, #16
 8001dd4:	4680      	mov	r8, r0
 8001dd6:	4319      	orrs	r1, r3
 8001dd8:	428a      	cmp	r2, r1
 8001dda:	d909      	bls.n	8001df0 <__aeabi_ddiv+0x140>
 8001ddc:	9d00      	ldr	r5, [sp, #0]
 8001dde:	2301      	movs	r3, #1
 8001de0:	46ac      	mov	ip, r5
 8001de2:	425b      	negs	r3, r3
 8001de4:	4461      	add	r1, ip
 8001de6:	469c      	mov	ip, r3
 8001de8:	44e0      	add	r8, ip
 8001dea:	428d      	cmp	r5, r1
 8001dec:	d800      	bhi.n	8001df0 <__aeabi_ddiv+0x140>
 8001dee:	e1fb      	b.n	80021e8 <__aeabi_ddiv+0x538>
 8001df0:	1a88      	subs	r0, r1, r2
 8001df2:	9902      	ldr	r1, [sp, #8]
 8001df4:	f7fe fa2a 	bl	800024c <__aeabi_uidivmod>
 8001df8:	9a03      	ldr	r2, [sp, #12]
 8001dfa:	0424      	lsls	r4, r4, #16
 8001dfc:	4342      	muls	r2, r0
 8001dfe:	0409      	lsls	r1, r1, #16
 8001e00:	0c24      	lsrs	r4, r4, #16
 8001e02:	0003      	movs	r3, r0
 8001e04:	430c      	orrs	r4, r1
 8001e06:	42a2      	cmp	r2, r4
 8001e08:	d906      	bls.n	8001e18 <__aeabi_ddiv+0x168>
 8001e0a:	9900      	ldr	r1, [sp, #0]
 8001e0c:	3b01      	subs	r3, #1
 8001e0e:	468c      	mov	ip, r1
 8001e10:	4464      	add	r4, ip
 8001e12:	42a1      	cmp	r1, r4
 8001e14:	d800      	bhi.n	8001e18 <__aeabi_ddiv+0x168>
 8001e16:	e1e1      	b.n	80021dc <__aeabi_ddiv+0x52c>
 8001e18:	1aa0      	subs	r0, r4, r2
 8001e1a:	4642      	mov	r2, r8
 8001e1c:	0412      	lsls	r2, r2, #16
 8001e1e:	431a      	orrs	r2, r3
 8001e20:	4693      	mov	fp, r2
 8001e22:	464b      	mov	r3, r9
 8001e24:	4659      	mov	r1, fp
 8001e26:	0c1b      	lsrs	r3, r3, #16
 8001e28:	001d      	movs	r5, r3
 8001e2a:	9304      	str	r3, [sp, #16]
 8001e2c:	040b      	lsls	r3, r1, #16
 8001e2e:	4649      	mov	r1, r9
 8001e30:	0409      	lsls	r1, r1, #16
 8001e32:	0c09      	lsrs	r1, r1, #16
 8001e34:	000c      	movs	r4, r1
 8001e36:	0c1b      	lsrs	r3, r3, #16
 8001e38:	435c      	muls	r4, r3
 8001e3a:	0c12      	lsrs	r2, r2, #16
 8001e3c:	436b      	muls	r3, r5
 8001e3e:	4688      	mov	r8, r1
 8001e40:	4351      	muls	r1, r2
 8001e42:	436a      	muls	r2, r5
 8001e44:	0c25      	lsrs	r5, r4, #16
 8001e46:	46ac      	mov	ip, r5
 8001e48:	185b      	adds	r3, r3, r1
 8001e4a:	4463      	add	r3, ip
 8001e4c:	4299      	cmp	r1, r3
 8001e4e:	d903      	bls.n	8001e58 <__aeabi_ddiv+0x1a8>
 8001e50:	2180      	movs	r1, #128	@ 0x80
 8001e52:	0249      	lsls	r1, r1, #9
 8001e54:	468c      	mov	ip, r1
 8001e56:	4462      	add	r2, ip
 8001e58:	0c19      	lsrs	r1, r3, #16
 8001e5a:	0424      	lsls	r4, r4, #16
 8001e5c:	041b      	lsls	r3, r3, #16
 8001e5e:	0c24      	lsrs	r4, r4, #16
 8001e60:	188a      	adds	r2, r1, r2
 8001e62:	191c      	adds	r4, r3, r4
 8001e64:	4290      	cmp	r0, r2
 8001e66:	d302      	bcc.n	8001e6e <__aeabi_ddiv+0x1be>
 8001e68:	d116      	bne.n	8001e98 <__aeabi_ddiv+0x1e8>
 8001e6a:	42a7      	cmp	r7, r4
 8001e6c:	d214      	bcs.n	8001e98 <__aeabi_ddiv+0x1e8>
 8001e6e:	465b      	mov	r3, fp
 8001e70:	9d00      	ldr	r5, [sp, #0]
 8001e72:	3b01      	subs	r3, #1
 8001e74:	444f      	add	r7, r9
 8001e76:	9305      	str	r3, [sp, #20]
 8001e78:	454f      	cmp	r7, r9
 8001e7a:	419b      	sbcs	r3, r3
 8001e7c:	46ac      	mov	ip, r5
 8001e7e:	425b      	negs	r3, r3
 8001e80:	4463      	add	r3, ip
 8001e82:	18c0      	adds	r0, r0, r3
 8001e84:	4285      	cmp	r5, r0
 8001e86:	d300      	bcc.n	8001e8a <__aeabi_ddiv+0x1da>
 8001e88:	e1a1      	b.n	80021ce <__aeabi_ddiv+0x51e>
 8001e8a:	4282      	cmp	r2, r0
 8001e8c:	d900      	bls.n	8001e90 <__aeabi_ddiv+0x1e0>
 8001e8e:	e1f6      	b.n	800227e <__aeabi_ddiv+0x5ce>
 8001e90:	d100      	bne.n	8001e94 <__aeabi_ddiv+0x1e4>
 8001e92:	e1f1      	b.n	8002278 <__aeabi_ddiv+0x5c8>
 8001e94:	9b05      	ldr	r3, [sp, #20]
 8001e96:	469b      	mov	fp, r3
 8001e98:	1b3c      	subs	r4, r7, r4
 8001e9a:	42a7      	cmp	r7, r4
 8001e9c:	41bf      	sbcs	r7, r7
 8001e9e:	9d00      	ldr	r5, [sp, #0]
 8001ea0:	1a80      	subs	r0, r0, r2
 8001ea2:	427f      	negs	r7, r7
 8001ea4:	1bc0      	subs	r0, r0, r7
 8001ea6:	4285      	cmp	r5, r0
 8001ea8:	d100      	bne.n	8001eac <__aeabi_ddiv+0x1fc>
 8001eaa:	e1d0      	b.n	800224e <__aeabi_ddiv+0x59e>
 8001eac:	9902      	ldr	r1, [sp, #8]
 8001eae:	f7fe f9cd 	bl	800024c <__aeabi_uidivmod>
 8001eb2:	9a03      	ldr	r2, [sp, #12]
 8001eb4:	040b      	lsls	r3, r1, #16
 8001eb6:	4342      	muls	r2, r0
 8001eb8:	0c21      	lsrs	r1, r4, #16
 8001eba:	0007      	movs	r7, r0
 8001ebc:	4319      	orrs	r1, r3
 8001ebe:	428a      	cmp	r2, r1
 8001ec0:	d900      	bls.n	8001ec4 <__aeabi_ddiv+0x214>
 8001ec2:	e178      	b.n	80021b6 <__aeabi_ddiv+0x506>
 8001ec4:	1a88      	subs	r0, r1, r2
 8001ec6:	9902      	ldr	r1, [sp, #8]
 8001ec8:	f7fe f9c0 	bl	800024c <__aeabi_uidivmod>
 8001ecc:	9a03      	ldr	r2, [sp, #12]
 8001ece:	0424      	lsls	r4, r4, #16
 8001ed0:	4342      	muls	r2, r0
 8001ed2:	0409      	lsls	r1, r1, #16
 8001ed4:	0c24      	lsrs	r4, r4, #16
 8001ed6:	0003      	movs	r3, r0
 8001ed8:	430c      	orrs	r4, r1
 8001eda:	42a2      	cmp	r2, r4
 8001edc:	d900      	bls.n	8001ee0 <__aeabi_ddiv+0x230>
 8001ede:	e15d      	b.n	800219c <__aeabi_ddiv+0x4ec>
 8001ee0:	4641      	mov	r1, r8
 8001ee2:	1aa4      	subs	r4, r4, r2
 8001ee4:	043a      	lsls	r2, r7, #16
 8001ee6:	431a      	orrs	r2, r3
 8001ee8:	9d04      	ldr	r5, [sp, #16]
 8001eea:	0413      	lsls	r3, r2, #16
 8001eec:	0c1b      	lsrs	r3, r3, #16
 8001eee:	4359      	muls	r1, r3
 8001ef0:	4647      	mov	r7, r8
 8001ef2:	436b      	muls	r3, r5
 8001ef4:	469c      	mov	ip, r3
 8001ef6:	0c10      	lsrs	r0, r2, #16
 8001ef8:	4347      	muls	r7, r0
 8001efa:	0c0b      	lsrs	r3, r1, #16
 8001efc:	44bc      	add	ip, r7
 8001efe:	4463      	add	r3, ip
 8001f00:	4368      	muls	r0, r5
 8001f02:	429f      	cmp	r7, r3
 8001f04:	d903      	bls.n	8001f0e <__aeabi_ddiv+0x25e>
 8001f06:	2580      	movs	r5, #128	@ 0x80
 8001f08:	026d      	lsls	r5, r5, #9
 8001f0a:	46ac      	mov	ip, r5
 8001f0c:	4460      	add	r0, ip
 8001f0e:	0c1f      	lsrs	r7, r3, #16
 8001f10:	0409      	lsls	r1, r1, #16
 8001f12:	041b      	lsls	r3, r3, #16
 8001f14:	0c09      	lsrs	r1, r1, #16
 8001f16:	183f      	adds	r7, r7, r0
 8001f18:	185b      	adds	r3, r3, r1
 8001f1a:	42bc      	cmp	r4, r7
 8001f1c:	d200      	bcs.n	8001f20 <__aeabi_ddiv+0x270>
 8001f1e:	e102      	b.n	8002126 <__aeabi_ddiv+0x476>
 8001f20:	d100      	bne.n	8001f24 <__aeabi_ddiv+0x274>
 8001f22:	e0fd      	b.n	8002120 <__aeabi_ddiv+0x470>
 8001f24:	2301      	movs	r3, #1
 8001f26:	431a      	orrs	r2, r3
 8001f28:	4b43      	ldr	r3, [pc, #268]	@ (8002038 <__aeabi_ddiv+0x388>)
 8001f2a:	4453      	add	r3, sl
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	dc00      	bgt.n	8001f32 <__aeabi_ddiv+0x282>
 8001f30:	e0ae      	b.n	8002090 <__aeabi_ddiv+0x3e0>
 8001f32:	0751      	lsls	r1, r2, #29
 8001f34:	d000      	beq.n	8001f38 <__aeabi_ddiv+0x288>
 8001f36:	e198      	b.n	800226a <__aeabi_ddiv+0x5ba>
 8001f38:	4659      	mov	r1, fp
 8001f3a:	01c9      	lsls	r1, r1, #7
 8001f3c:	d506      	bpl.n	8001f4c <__aeabi_ddiv+0x29c>
 8001f3e:	4659      	mov	r1, fp
 8001f40:	4b3e      	ldr	r3, [pc, #248]	@ (800203c <__aeabi_ddiv+0x38c>)
 8001f42:	4019      	ands	r1, r3
 8001f44:	2380      	movs	r3, #128	@ 0x80
 8001f46:	468b      	mov	fp, r1
 8001f48:	00db      	lsls	r3, r3, #3
 8001f4a:	4453      	add	r3, sl
 8001f4c:	493c      	ldr	r1, [pc, #240]	@ (8002040 <__aeabi_ddiv+0x390>)
 8001f4e:	428b      	cmp	r3, r1
 8001f50:	dd00      	ble.n	8001f54 <__aeabi_ddiv+0x2a4>
 8001f52:	e71a      	b.n	8001d8a <__aeabi_ddiv+0xda>
 8001f54:	4659      	mov	r1, fp
 8001f56:	08d2      	lsrs	r2, r2, #3
 8001f58:	0749      	lsls	r1, r1, #29
 8001f5a:	4311      	orrs	r1, r2
 8001f5c:	465a      	mov	r2, fp
 8001f5e:	055b      	lsls	r3, r3, #21
 8001f60:	0254      	lsls	r4, r2, #9
 8001f62:	4688      	mov	r8, r1
 8001f64:	0b24      	lsrs	r4, r4, #12
 8001f66:	0d5b      	lsrs	r3, r3, #21
 8001f68:	e702      	b.n	8001d70 <__aeabi_ddiv+0xc0>
 8001f6a:	465a      	mov	r2, fp
 8001f6c:	9b00      	ldr	r3, [sp, #0]
 8001f6e:	431a      	orrs	r2, r3
 8001f70:	d100      	bne.n	8001f74 <__aeabi_ddiv+0x2c4>
 8001f72:	e07e      	b.n	8002072 <__aeabi_ddiv+0x3c2>
 8001f74:	465b      	mov	r3, fp
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d100      	bne.n	8001f7c <__aeabi_ddiv+0x2cc>
 8001f7a:	e100      	b.n	800217e <__aeabi_ddiv+0x4ce>
 8001f7c:	4658      	mov	r0, fp
 8001f7e:	f001 fabb 	bl	80034f8 <__clzsi2>
 8001f82:	0002      	movs	r2, r0
 8001f84:	0003      	movs	r3, r0
 8001f86:	3a0b      	subs	r2, #11
 8001f88:	271d      	movs	r7, #29
 8001f8a:	9e00      	ldr	r6, [sp, #0]
 8001f8c:	1aba      	subs	r2, r7, r2
 8001f8e:	0019      	movs	r1, r3
 8001f90:	4658      	mov	r0, fp
 8001f92:	40d6      	lsrs	r6, r2
 8001f94:	3908      	subs	r1, #8
 8001f96:	4088      	lsls	r0, r1
 8001f98:	0032      	movs	r2, r6
 8001f9a:	4302      	orrs	r2, r0
 8001f9c:	4693      	mov	fp, r2
 8001f9e:	9a00      	ldr	r2, [sp, #0]
 8001fa0:	408a      	lsls	r2, r1
 8001fa2:	4928      	ldr	r1, [pc, #160]	@ (8002044 <__aeabi_ddiv+0x394>)
 8001fa4:	4453      	add	r3, sl
 8001fa6:	468a      	mov	sl, r1
 8001fa8:	449a      	add	sl, r3
 8001faa:	2300      	movs	r3, #0
 8001fac:	e6c8      	b.n	8001d40 <__aeabi_ddiv+0x90>
 8001fae:	465b      	mov	r3, fp
 8001fb0:	4303      	orrs	r3, r0
 8001fb2:	4699      	mov	r9, r3
 8001fb4:	d056      	beq.n	8002064 <__aeabi_ddiv+0x3b4>
 8001fb6:	465b      	mov	r3, fp
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d100      	bne.n	8001fbe <__aeabi_ddiv+0x30e>
 8001fbc:	e0cd      	b.n	800215a <__aeabi_ddiv+0x4aa>
 8001fbe:	4658      	mov	r0, fp
 8001fc0:	f001 fa9a 	bl	80034f8 <__clzsi2>
 8001fc4:	230b      	movs	r3, #11
 8001fc6:	425b      	negs	r3, r3
 8001fc8:	469c      	mov	ip, r3
 8001fca:	0002      	movs	r2, r0
 8001fcc:	4484      	add	ip, r0
 8001fce:	4666      	mov	r6, ip
 8001fd0:	231d      	movs	r3, #29
 8001fd2:	1b9b      	subs	r3, r3, r6
 8001fd4:	0026      	movs	r6, r4
 8001fd6:	0011      	movs	r1, r2
 8001fd8:	4658      	mov	r0, fp
 8001fda:	40de      	lsrs	r6, r3
 8001fdc:	3908      	subs	r1, #8
 8001fde:	4088      	lsls	r0, r1
 8001fe0:	0033      	movs	r3, r6
 8001fe2:	4303      	orrs	r3, r0
 8001fe4:	4699      	mov	r9, r3
 8001fe6:	0023      	movs	r3, r4
 8001fe8:	408b      	lsls	r3, r1
 8001fea:	4698      	mov	r8, r3
 8001fec:	4b16      	ldr	r3, [pc, #88]	@ (8002048 <__aeabi_ddiv+0x398>)
 8001fee:	2400      	movs	r4, #0
 8001ff0:	1a9b      	subs	r3, r3, r2
 8001ff2:	469a      	mov	sl, r3
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	9303      	str	r3, [sp, #12]
 8001ff8:	e682      	b.n	8001d00 <__aeabi_ddiv+0x50>
 8001ffa:	465a      	mov	r2, fp
 8001ffc:	4302      	orrs	r2, r0
 8001ffe:	4691      	mov	r9, r2
 8002000:	d12a      	bne.n	8002058 <__aeabi_ddiv+0x3a8>
 8002002:	2200      	movs	r2, #0
 8002004:	469a      	mov	sl, r3
 8002006:	2302      	movs	r3, #2
 8002008:	4690      	mov	r8, r2
 800200a:	2408      	movs	r4, #8
 800200c:	9303      	str	r3, [sp, #12]
 800200e:	e677      	b.n	8001d00 <__aeabi_ddiv+0x50>
 8002010:	465a      	mov	r2, fp
 8002012:	9b00      	ldr	r3, [sp, #0]
 8002014:	431a      	orrs	r2, r3
 8002016:	4b0d      	ldr	r3, [pc, #52]	@ (800204c <__aeabi_ddiv+0x39c>)
 8002018:	469c      	mov	ip, r3
 800201a:	44e2      	add	sl, ip
 800201c:	2a00      	cmp	r2, #0
 800201e:	d117      	bne.n	8002050 <__aeabi_ddiv+0x3a0>
 8002020:	2302      	movs	r3, #2
 8002022:	431c      	orrs	r4, r3
 8002024:	2300      	movs	r3, #0
 8002026:	469b      	mov	fp, r3
 8002028:	3302      	adds	r3, #2
 800202a:	e689      	b.n	8001d40 <__aeabi_ddiv+0x90>
 800202c:	000007ff 	.word	0x000007ff
 8002030:	fffffc01 	.word	0xfffffc01
 8002034:	0801067c 	.word	0x0801067c
 8002038:	000003ff 	.word	0x000003ff
 800203c:	feffffff 	.word	0xfeffffff
 8002040:	000007fe 	.word	0x000007fe
 8002044:	000003f3 	.word	0x000003f3
 8002048:	fffffc0d 	.word	0xfffffc0d
 800204c:	fffff801 	.word	0xfffff801
 8002050:	2303      	movs	r3, #3
 8002052:	0032      	movs	r2, r6
 8002054:	431c      	orrs	r4, r3
 8002056:	e673      	b.n	8001d40 <__aeabi_ddiv+0x90>
 8002058:	469a      	mov	sl, r3
 800205a:	2303      	movs	r3, #3
 800205c:	46d9      	mov	r9, fp
 800205e:	240c      	movs	r4, #12
 8002060:	9303      	str	r3, [sp, #12]
 8002062:	e64d      	b.n	8001d00 <__aeabi_ddiv+0x50>
 8002064:	2300      	movs	r3, #0
 8002066:	4698      	mov	r8, r3
 8002068:	469a      	mov	sl, r3
 800206a:	3301      	adds	r3, #1
 800206c:	2404      	movs	r4, #4
 800206e:	9303      	str	r3, [sp, #12]
 8002070:	e646      	b.n	8001d00 <__aeabi_ddiv+0x50>
 8002072:	2301      	movs	r3, #1
 8002074:	431c      	orrs	r4, r3
 8002076:	2300      	movs	r3, #0
 8002078:	469b      	mov	fp, r3
 800207a:	3301      	adds	r3, #1
 800207c:	e660      	b.n	8001d40 <__aeabi_ddiv+0x90>
 800207e:	2300      	movs	r3, #0
 8002080:	2480      	movs	r4, #128	@ 0x80
 8002082:	4698      	mov	r8, r3
 8002084:	2600      	movs	r6, #0
 8002086:	4b92      	ldr	r3, [pc, #584]	@ (80022d0 <__aeabi_ddiv+0x620>)
 8002088:	0324      	lsls	r4, r4, #12
 800208a:	e671      	b.n	8001d70 <__aeabi_ddiv+0xc0>
 800208c:	2201      	movs	r2, #1
 800208e:	4252      	negs	r2, r2
 8002090:	2101      	movs	r1, #1
 8002092:	1ac9      	subs	r1, r1, r3
 8002094:	2938      	cmp	r1, #56	@ 0x38
 8002096:	dd00      	ble.n	800209a <__aeabi_ddiv+0x3ea>
 8002098:	e666      	b.n	8001d68 <__aeabi_ddiv+0xb8>
 800209a:	291f      	cmp	r1, #31
 800209c:	dc00      	bgt.n	80020a0 <__aeabi_ddiv+0x3f0>
 800209e:	e0ab      	b.n	80021f8 <__aeabi_ddiv+0x548>
 80020a0:	201f      	movs	r0, #31
 80020a2:	4240      	negs	r0, r0
 80020a4:	1ac3      	subs	r3, r0, r3
 80020a6:	4658      	mov	r0, fp
 80020a8:	40d8      	lsrs	r0, r3
 80020aa:	0003      	movs	r3, r0
 80020ac:	2920      	cmp	r1, #32
 80020ae:	d004      	beq.n	80020ba <__aeabi_ddiv+0x40a>
 80020b0:	4658      	mov	r0, fp
 80020b2:	4988      	ldr	r1, [pc, #544]	@ (80022d4 <__aeabi_ddiv+0x624>)
 80020b4:	4451      	add	r1, sl
 80020b6:	4088      	lsls	r0, r1
 80020b8:	4302      	orrs	r2, r0
 80020ba:	1e51      	subs	r1, r2, #1
 80020bc:	418a      	sbcs	r2, r1
 80020be:	431a      	orrs	r2, r3
 80020c0:	2307      	movs	r3, #7
 80020c2:	0019      	movs	r1, r3
 80020c4:	2400      	movs	r4, #0
 80020c6:	4011      	ands	r1, r2
 80020c8:	4213      	tst	r3, r2
 80020ca:	d00c      	beq.n	80020e6 <__aeabi_ddiv+0x436>
 80020cc:	230f      	movs	r3, #15
 80020ce:	4013      	ands	r3, r2
 80020d0:	2b04      	cmp	r3, #4
 80020d2:	d100      	bne.n	80020d6 <__aeabi_ddiv+0x426>
 80020d4:	e0f9      	b.n	80022ca <__aeabi_ddiv+0x61a>
 80020d6:	1d11      	adds	r1, r2, #4
 80020d8:	4291      	cmp	r1, r2
 80020da:	419b      	sbcs	r3, r3
 80020dc:	000a      	movs	r2, r1
 80020de:	425b      	negs	r3, r3
 80020e0:	0759      	lsls	r1, r3, #29
 80020e2:	025b      	lsls	r3, r3, #9
 80020e4:	0b1c      	lsrs	r4, r3, #12
 80020e6:	08d2      	lsrs	r2, r2, #3
 80020e8:	430a      	orrs	r2, r1
 80020ea:	4690      	mov	r8, r2
 80020ec:	2300      	movs	r3, #0
 80020ee:	e63f      	b.n	8001d70 <__aeabi_ddiv+0xc0>
 80020f0:	2480      	movs	r4, #128	@ 0x80
 80020f2:	464b      	mov	r3, r9
 80020f4:	0324      	lsls	r4, r4, #12
 80020f6:	4223      	tst	r3, r4
 80020f8:	d009      	beq.n	800210e <__aeabi_ddiv+0x45e>
 80020fa:	465b      	mov	r3, fp
 80020fc:	4223      	tst	r3, r4
 80020fe:	d106      	bne.n	800210e <__aeabi_ddiv+0x45e>
 8002100:	431c      	orrs	r4, r3
 8002102:	0324      	lsls	r4, r4, #12
 8002104:	002e      	movs	r6, r5
 8002106:	4690      	mov	r8, r2
 8002108:	4b71      	ldr	r3, [pc, #452]	@ (80022d0 <__aeabi_ddiv+0x620>)
 800210a:	0b24      	lsrs	r4, r4, #12
 800210c:	e630      	b.n	8001d70 <__aeabi_ddiv+0xc0>
 800210e:	2480      	movs	r4, #128	@ 0x80
 8002110:	464b      	mov	r3, r9
 8002112:	0324      	lsls	r4, r4, #12
 8002114:	431c      	orrs	r4, r3
 8002116:	0324      	lsls	r4, r4, #12
 8002118:	9e02      	ldr	r6, [sp, #8]
 800211a:	4b6d      	ldr	r3, [pc, #436]	@ (80022d0 <__aeabi_ddiv+0x620>)
 800211c:	0b24      	lsrs	r4, r4, #12
 800211e:	e627      	b.n	8001d70 <__aeabi_ddiv+0xc0>
 8002120:	2b00      	cmp	r3, #0
 8002122:	d100      	bne.n	8002126 <__aeabi_ddiv+0x476>
 8002124:	e700      	b.n	8001f28 <__aeabi_ddiv+0x278>
 8002126:	9800      	ldr	r0, [sp, #0]
 8002128:	1e51      	subs	r1, r2, #1
 800212a:	4684      	mov	ip, r0
 800212c:	4464      	add	r4, ip
 800212e:	4284      	cmp	r4, r0
 8002130:	d200      	bcs.n	8002134 <__aeabi_ddiv+0x484>
 8002132:	e084      	b.n	800223e <__aeabi_ddiv+0x58e>
 8002134:	42bc      	cmp	r4, r7
 8002136:	d200      	bcs.n	800213a <__aeabi_ddiv+0x48a>
 8002138:	e0ae      	b.n	8002298 <__aeabi_ddiv+0x5e8>
 800213a:	d100      	bne.n	800213e <__aeabi_ddiv+0x48e>
 800213c:	e0c1      	b.n	80022c2 <__aeabi_ddiv+0x612>
 800213e:	000a      	movs	r2, r1
 8002140:	e6f0      	b.n	8001f24 <__aeabi_ddiv+0x274>
 8002142:	4542      	cmp	r2, r8
 8002144:	d900      	bls.n	8002148 <__aeabi_ddiv+0x498>
 8002146:	e62c      	b.n	8001da2 <__aeabi_ddiv+0xf2>
 8002148:	464b      	mov	r3, r9
 800214a:	07dc      	lsls	r4, r3, #31
 800214c:	0858      	lsrs	r0, r3, #1
 800214e:	4643      	mov	r3, r8
 8002150:	085b      	lsrs	r3, r3, #1
 8002152:	431c      	orrs	r4, r3
 8002154:	4643      	mov	r3, r8
 8002156:	07df      	lsls	r7, r3, #31
 8002158:	e62a      	b.n	8001db0 <__aeabi_ddiv+0x100>
 800215a:	f001 f9cd 	bl	80034f8 <__clzsi2>
 800215e:	2315      	movs	r3, #21
 8002160:	469c      	mov	ip, r3
 8002162:	4484      	add	ip, r0
 8002164:	0002      	movs	r2, r0
 8002166:	4663      	mov	r3, ip
 8002168:	3220      	adds	r2, #32
 800216a:	2b1c      	cmp	r3, #28
 800216c:	dc00      	bgt.n	8002170 <__aeabi_ddiv+0x4c0>
 800216e:	e72e      	b.n	8001fce <__aeabi_ddiv+0x31e>
 8002170:	0023      	movs	r3, r4
 8002172:	3808      	subs	r0, #8
 8002174:	4083      	lsls	r3, r0
 8002176:	4699      	mov	r9, r3
 8002178:	2300      	movs	r3, #0
 800217a:	4698      	mov	r8, r3
 800217c:	e736      	b.n	8001fec <__aeabi_ddiv+0x33c>
 800217e:	f001 f9bb 	bl	80034f8 <__clzsi2>
 8002182:	0002      	movs	r2, r0
 8002184:	0003      	movs	r3, r0
 8002186:	3215      	adds	r2, #21
 8002188:	3320      	adds	r3, #32
 800218a:	2a1c      	cmp	r2, #28
 800218c:	dc00      	bgt.n	8002190 <__aeabi_ddiv+0x4e0>
 800218e:	e6fb      	b.n	8001f88 <__aeabi_ddiv+0x2d8>
 8002190:	9900      	ldr	r1, [sp, #0]
 8002192:	3808      	subs	r0, #8
 8002194:	4081      	lsls	r1, r0
 8002196:	2200      	movs	r2, #0
 8002198:	468b      	mov	fp, r1
 800219a:	e702      	b.n	8001fa2 <__aeabi_ddiv+0x2f2>
 800219c:	9900      	ldr	r1, [sp, #0]
 800219e:	3b01      	subs	r3, #1
 80021a0:	468c      	mov	ip, r1
 80021a2:	4464      	add	r4, ip
 80021a4:	42a1      	cmp	r1, r4
 80021a6:	d900      	bls.n	80021aa <__aeabi_ddiv+0x4fa>
 80021a8:	e69a      	b.n	8001ee0 <__aeabi_ddiv+0x230>
 80021aa:	42a2      	cmp	r2, r4
 80021ac:	d800      	bhi.n	80021b0 <__aeabi_ddiv+0x500>
 80021ae:	e697      	b.n	8001ee0 <__aeabi_ddiv+0x230>
 80021b0:	1e83      	subs	r3, r0, #2
 80021b2:	4464      	add	r4, ip
 80021b4:	e694      	b.n	8001ee0 <__aeabi_ddiv+0x230>
 80021b6:	46ac      	mov	ip, r5
 80021b8:	4461      	add	r1, ip
 80021ba:	3f01      	subs	r7, #1
 80021bc:	428d      	cmp	r5, r1
 80021be:	d900      	bls.n	80021c2 <__aeabi_ddiv+0x512>
 80021c0:	e680      	b.n	8001ec4 <__aeabi_ddiv+0x214>
 80021c2:	428a      	cmp	r2, r1
 80021c4:	d800      	bhi.n	80021c8 <__aeabi_ddiv+0x518>
 80021c6:	e67d      	b.n	8001ec4 <__aeabi_ddiv+0x214>
 80021c8:	1e87      	subs	r7, r0, #2
 80021ca:	4461      	add	r1, ip
 80021cc:	e67a      	b.n	8001ec4 <__aeabi_ddiv+0x214>
 80021ce:	4285      	cmp	r5, r0
 80021d0:	d000      	beq.n	80021d4 <__aeabi_ddiv+0x524>
 80021d2:	e65f      	b.n	8001e94 <__aeabi_ddiv+0x1e4>
 80021d4:	45b9      	cmp	r9, r7
 80021d6:	d900      	bls.n	80021da <__aeabi_ddiv+0x52a>
 80021d8:	e65c      	b.n	8001e94 <__aeabi_ddiv+0x1e4>
 80021da:	e656      	b.n	8001e8a <__aeabi_ddiv+0x1da>
 80021dc:	42a2      	cmp	r2, r4
 80021de:	d800      	bhi.n	80021e2 <__aeabi_ddiv+0x532>
 80021e0:	e61a      	b.n	8001e18 <__aeabi_ddiv+0x168>
 80021e2:	1e83      	subs	r3, r0, #2
 80021e4:	4464      	add	r4, ip
 80021e6:	e617      	b.n	8001e18 <__aeabi_ddiv+0x168>
 80021e8:	428a      	cmp	r2, r1
 80021ea:	d800      	bhi.n	80021ee <__aeabi_ddiv+0x53e>
 80021ec:	e600      	b.n	8001df0 <__aeabi_ddiv+0x140>
 80021ee:	46ac      	mov	ip, r5
 80021f0:	1e83      	subs	r3, r0, #2
 80021f2:	4698      	mov	r8, r3
 80021f4:	4461      	add	r1, ip
 80021f6:	e5fb      	b.n	8001df0 <__aeabi_ddiv+0x140>
 80021f8:	4837      	ldr	r0, [pc, #220]	@ (80022d8 <__aeabi_ddiv+0x628>)
 80021fa:	0014      	movs	r4, r2
 80021fc:	4450      	add	r0, sl
 80021fe:	4082      	lsls	r2, r0
 8002200:	465b      	mov	r3, fp
 8002202:	0017      	movs	r7, r2
 8002204:	4083      	lsls	r3, r0
 8002206:	40cc      	lsrs	r4, r1
 8002208:	1e7a      	subs	r2, r7, #1
 800220a:	4197      	sbcs	r7, r2
 800220c:	4323      	orrs	r3, r4
 800220e:	433b      	orrs	r3, r7
 8002210:	001a      	movs	r2, r3
 8002212:	465b      	mov	r3, fp
 8002214:	40cb      	lsrs	r3, r1
 8002216:	0751      	lsls	r1, r2, #29
 8002218:	d009      	beq.n	800222e <__aeabi_ddiv+0x57e>
 800221a:	210f      	movs	r1, #15
 800221c:	4011      	ands	r1, r2
 800221e:	2904      	cmp	r1, #4
 8002220:	d005      	beq.n	800222e <__aeabi_ddiv+0x57e>
 8002222:	1d11      	adds	r1, r2, #4
 8002224:	4291      	cmp	r1, r2
 8002226:	4192      	sbcs	r2, r2
 8002228:	4252      	negs	r2, r2
 800222a:	189b      	adds	r3, r3, r2
 800222c:	000a      	movs	r2, r1
 800222e:	0219      	lsls	r1, r3, #8
 8002230:	d400      	bmi.n	8002234 <__aeabi_ddiv+0x584>
 8002232:	e755      	b.n	80020e0 <__aeabi_ddiv+0x430>
 8002234:	2200      	movs	r2, #0
 8002236:	2301      	movs	r3, #1
 8002238:	2400      	movs	r4, #0
 800223a:	4690      	mov	r8, r2
 800223c:	e598      	b.n	8001d70 <__aeabi_ddiv+0xc0>
 800223e:	000a      	movs	r2, r1
 8002240:	42bc      	cmp	r4, r7
 8002242:	d000      	beq.n	8002246 <__aeabi_ddiv+0x596>
 8002244:	e66e      	b.n	8001f24 <__aeabi_ddiv+0x274>
 8002246:	454b      	cmp	r3, r9
 8002248:	d000      	beq.n	800224c <__aeabi_ddiv+0x59c>
 800224a:	e66b      	b.n	8001f24 <__aeabi_ddiv+0x274>
 800224c:	e66c      	b.n	8001f28 <__aeabi_ddiv+0x278>
 800224e:	4b23      	ldr	r3, [pc, #140]	@ (80022dc <__aeabi_ddiv+0x62c>)
 8002250:	4a23      	ldr	r2, [pc, #140]	@ (80022e0 <__aeabi_ddiv+0x630>)
 8002252:	4453      	add	r3, sl
 8002254:	4592      	cmp	sl, r2
 8002256:	da00      	bge.n	800225a <__aeabi_ddiv+0x5aa>
 8002258:	e718      	b.n	800208c <__aeabi_ddiv+0x3dc>
 800225a:	2101      	movs	r1, #1
 800225c:	4249      	negs	r1, r1
 800225e:	1d0a      	adds	r2, r1, #4
 8002260:	428a      	cmp	r2, r1
 8002262:	4189      	sbcs	r1, r1
 8002264:	4249      	negs	r1, r1
 8002266:	448b      	add	fp, r1
 8002268:	e666      	b.n	8001f38 <__aeabi_ddiv+0x288>
 800226a:	210f      	movs	r1, #15
 800226c:	4011      	ands	r1, r2
 800226e:	2904      	cmp	r1, #4
 8002270:	d100      	bne.n	8002274 <__aeabi_ddiv+0x5c4>
 8002272:	e661      	b.n	8001f38 <__aeabi_ddiv+0x288>
 8002274:	0011      	movs	r1, r2
 8002276:	e7f2      	b.n	800225e <__aeabi_ddiv+0x5ae>
 8002278:	42bc      	cmp	r4, r7
 800227a:	d800      	bhi.n	800227e <__aeabi_ddiv+0x5ce>
 800227c:	e60a      	b.n	8001e94 <__aeabi_ddiv+0x1e4>
 800227e:	2302      	movs	r3, #2
 8002280:	425b      	negs	r3, r3
 8002282:	469c      	mov	ip, r3
 8002284:	9900      	ldr	r1, [sp, #0]
 8002286:	444f      	add	r7, r9
 8002288:	454f      	cmp	r7, r9
 800228a:	419b      	sbcs	r3, r3
 800228c:	44e3      	add	fp, ip
 800228e:	468c      	mov	ip, r1
 8002290:	425b      	negs	r3, r3
 8002292:	4463      	add	r3, ip
 8002294:	18c0      	adds	r0, r0, r3
 8002296:	e5ff      	b.n	8001e98 <__aeabi_ddiv+0x1e8>
 8002298:	4649      	mov	r1, r9
 800229a:	9d00      	ldr	r5, [sp, #0]
 800229c:	0048      	lsls	r0, r1, #1
 800229e:	4548      	cmp	r0, r9
 80022a0:	4189      	sbcs	r1, r1
 80022a2:	46ac      	mov	ip, r5
 80022a4:	4249      	negs	r1, r1
 80022a6:	4461      	add	r1, ip
 80022a8:	4681      	mov	r9, r0
 80022aa:	3a02      	subs	r2, #2
 80022ac:	1864      	adds	r4, r4, r1
 80022ae:	e7c7      	b.n	8002240 <__aeabi_ddiv+0x590>
 80022b0:	2480      	movs	r4, #128	@ 0x80
 80022b2:	465b      	mov	r3, fp
 80022b4:	0324      	lsls	r4, r4, #12
 80022b6:	431c      	orrs	r4, r3
 80022b8:	0324      	lsls	r4, r4, #12
 80022ba:	4690      	mov	r8, r2
 80022bc:	4b04      	ldr	r3, [pc, #16]	@ (80022d0 <__aeabi_ddiv+0x620>)
 80022be:	0b24      	lsrs	r4, r4, #12
 80022c0:	e556      	b.n	8001d70 <__aeabi_ddiv+0xc0>
 80022c2:	4599      	cmp	r9, r3
 80022c4:	d3e8      	bcc.n	8002298 <__aeabi_ddiv+0x5e8>
 80022c6:	000a      	movs	r2, r1
 80022c8:	e7bd      	b.n	8002246 <__aeabi_ddiv+0x596>
 80022ca:	2300      	movs	r3, #0
 80022cc:	e708      	b.n	80020e0 <__aeabi_ddiv+0x430>
 80022ce:	46c0      	nop			@ (mov r8, r8)
 80022d0:	000007ff 	.word	0x000007ff
 80022d4:	0000043e 	.word	0x0000043e
 80022d8:	0000041e 	.word	0x0000041e
 80022dc:	000003ff 	.word	0x000003ff
 80022e0:	fffffc02 	.word	0xfffffc02
>>>>>>> main

080022e4 <__eqdf2>:
 80022e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022e6:	4657      	mov	r7, sl
 80022e8:	46de      	mov	lr, fp
 80022ea:	464e      	mov	r6, r9
 80022ec:	4645      	mov	r5, r8
 80022ee:	b5e0      	push	{r5, r6, r7, lr}
 80022f0:	000d      	movs	r5, r1
 80022f2:	0004      	movs	r4, r0
 80022f4:	0fe8      	lsrs	r0, r5, #31
 80022f6:	4683      	mov	fp, r0
 80022f8:	0309      	lsls	r1, r1, #12
 80022fa:	0fd8      	lsrs	r0, r3, #31
 80022fc:	0b09      	lsrs	r1, r1, #12
 80022fe:	4682      	mov	sl, r0
 8002300:	4819      	ldr	r0, [pc, #100]	@ (8002368 <__eqdf2+0x84>)
 8002302:	468c      	mov	ip, r1
 8002304:	031f      	lsls	r7, r3, #12
 8002306:	0069      	lsls	r1, r5, #1
 8002308:	005e      	lsls	r6, r3, #1
 800230a:	0d49      	lsrs	r1, r1, #21
 800230c:	0b3f      	lsrs	r7, r7, #12
 800230e:	0d76      	lsrs	r6, r6, #21
 8002310:	4281      	cmp	r1, r0
 8002312:	d018      	beq.n	8002346 <__eqdf2+0x62>
 8002314:	4286      	cmp	r6, r0
 8002316:	d00f      	beq.n	8002338 <__eqdf2+0x54>
 8002318:	2001      	movs	r0, #1
 800231a:	42b1      	cmp	r1, r6
 800231c:	d10d      	bne.n	800233a <__eqdf2+0x56>
 800231e:	45bc      	cmp	ip, r7
 8002320:	d10b      	bne.n	800233a <__eqdf2+0x56>
 8002322:	4294      	cmp	r4, r2
 8002324:	d109      	bne.n	800233a <__eqdf2+0x56>
 8002326:	45d3      	cmp	fp, sl
 8002328:	d01c      	beq.n	8002364 <__eqdf2+0x80>
 800232a:	2900      	cmp	r1, #0
 800232c:	d105      	bne.n	800233a <__eqdf2+0x56>
 800232e:	4660      	mov	r0, ip
 8002330:	4320      	orrs	r0, r4
 8002332:	1e43      	subs	r3, r0, #1
 8002334:	4198      	sbcs	r0, r3
 8002336:	e000      	b.n	800233a <__eqdf2+0x56>
 8002338:	2001      	movs	r0, #1
 800233a:	bcf0      	pop	{r4, r5, r6, r7}
 800233c:	46bb      	mov	fp, r7
 800233e:	46b2      	mov	sl, r6
 8002340:	46a9      	mov	r9, r5
 8002342:	46a0      	mov	r8, r4
 8002344:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002346:	2001      	movs	r0, #1
 8002348:	428e      	cmp	r6, r1
 800234a:	d1f6      	bne.n	800233a <__eqdf2+0x56>
 800234c:	4661      	mov	r1, ip
 800234e:	4339      	orrs	r1, r7
 8002350:	000f      	movs	r7, r1
 8002352:	4317      	orrs	r7, r2
 8002354:	4327      	orrs	r7, r4
 8002356:	d1f0      	bne.n	800233a <__eqdf2+0x56>
 8002358:	465b      	mov	r3, fp
 800235a:	4652      	mov	r2, sl
 800235c:	1a98      	subs	r0, r3, r2
 800235e:	1e43      	subs	r3, r0, #1
 8002360:	4198      	sbcs	r0, r3
 8002362:	e7ea      	b.n	800233a <__eqdf2+0x56>
 8002364:	2000      	movs	r0, #0
 8002366:	e7e8      	b.n	800233a <__eqdf2+0x56>
 8002368:	000007ff 	.word	0x000007ff

0800236c <__gedf2>:
 800236c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800236e:	4657      	mov	r7, sl
 8002370:	464e      	mov	r6, r9
 8002372:	4645      	mov	r5, r8
 8002374:	46de      	mov	lr, fp
 8002376:	b5e0      	push	{r5, r6, r7, lr}
 8002378:	000d      	movs	r5, r1
 800237a:	030f      	lsls	r7, r1, #12
 800237c:	0b39      	lsrs	r1, r7, #12
 800237e:	b083      	sub	sp, #12
 8002380:	0004      	movs	r4, r0
 8002382:	4680      	mov	r8, r0
 8002384:	9101      	str	r1, [sp, #4]
 8002386:	0058      	lsls	r0, r3, #1
 8002388:	0fe9      	lsrs	r1, r5, #31
 800238a:	4f31      	ldr	r7, [pc, #196]	@ (8002450 <__gedf2+0xe4>)
 800238c:	0d40      	lsrs	r0, r0, #21
 800238e:	468c      	mov	ip, r1
 8002390:	006e      	lsls	r6, r5, #1
 8002392:	0319      	lsls	r1, r3, #12
 8002394:	4682      	mov	sl, r0
 8002396:	4691      	mov	r9, r2
 8002398:	0d76      	lsrs	r6, r6, #21
 800239a:	0b09      	lsrs	r1, r1, #12
 800239c:	0fd8      	lsrs	r0, r3, #31
 800239e:	42be      	cmp	r6, r7
 80023a0:	d01f      	beq.n	80023e2 <__gedf2+0x76>
 80023a2:	45ba      	cmp	sl, r7
 80023a4:	d00f      	beq.n	80023c6 <__gedf2+0x5a>
 80023a6:	2e00      	cmp	r6, #0
 80023a8:	d12f      	bne.n	800240a <__gedf2+0x9e>
 80023aa:	4655      	mov	r5, sl
 80023ac:	9e01      	ldr	r6, [sp, #4]
 80023ae:	4334      	orrs	r4, r6
 80023b0:	2d00      	cmp	r5, #0
 80023b2:	d127      	bne.n	8002404 <__gedf2+0x98>
 80023b4:	430a      	orrs	r2, r1
 80023b6:	d03a      	beq.n	800242e <__gedf2+0xc2>
 80023b8:	2c00      	cmp	r4, #0
 80023ba:	d145      	bne.n	8002448 <__gedf2+0xdc>
 80023bc:	2800      	cmp	r0, #0
 80023be:	d11a      	bne.n	80023f6 <__gedf2+0x8a>
 80023c0:	2001      	movs	r0, #1
 80023c2:	4240      	negs	r0, r0
 80023c4:	e017      	b.n	80023f6 <__gedf2+0x8a>
 80023c6:	4311      	orrs	r1, r2
 80023c8:	d13b      	bne.n	8002442 <__gedf2+0xd6>
 80023ca:	2e00      	cmp	r6, #0
 80023cc:	d102      	bne.n	80023d4 <__gedf2+0x68>
 80023ce:	9f01      	ldr	r7, [sp, #4]
 80023d0:	4327      	orrs	r7, r4
 80023d2:	d0f3      	beq.n	80023bc <__gedf2+0x50>
 80023d4:	4584      	cmp	ip, r0
 80023d6:	d109      	bne.n	80023ec <__gedf2+0x80>
 80023d8:	4663      	mov	r3, ip
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d0f0      	beq.n	80023c0 <__gedf2+0x54>
 80023de:	4660      	mov	r0, ip
 80023e0:	e009      	b.n	80023f6 <__gedf2+0x8a>
 80023e2:	9f01      	ldr	r7, [sp, #4]
 80023e4:	4327      	orrs	r7, r4
 80023e6:	d12c      	bne.n	8002442 <__gedf2+0xd6>
 80023e8:	45b2      	cmp	sl, r6
 80023ea:	d024      	beq.n	8002436 <__gedf2+0xca>
 80023ec:	4663      	mov	r3, ip
 80023ee:	2002      	movs	r0, #2
 80023f0:	3b01      	subs	r3, #1
 80023f2:	4018      	ands	r0, r3
 80023f4:	3801      	subs	r0, #1
 80023f6:	b003      	add	sp, #12
 80023f8:	bcf0      	pop	{r4, r5, r6, r7}
 80023fa:	46bb      	mov	fp, r7
 80023fc:	46b2      	mov	sl, r6
 80023fe:	46a9      	mov	r9, r5
 8002400:	46a0      	mov	r8, r4
 8002402:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002404:	2c00      	cmp	r4, #0
 8002406:	d0d9      	beq.n	80023bc <__gedf2+0x50>
 8002408:	e7e4      	b.n	80023d4 <__gedf2+0x68>
 800240a:	4654      	mov	r4, sl
 800240c:	2c00      	cmp	r4, #0
 800240e:	d0ed      	beq.n	80023ec <__gedf2+0x80>
 8002410:	4584      	cmp	ip, r0
 8002412:	d1eb      	bne.n	80023ec <__gedf2+0x80>
 8002414:	4556      	cmp	r6, sl
 8002416:	dce9      	bgt.n	80023ec <__gedf2+0x80>
 8002418:	dbde      	blt.n	80023d8 <__gedf2+0x6c>
 800241a:	9b01      	ldr	r3, [sp, #4]
 800241c:	428b      	cmp	r3, r1
 800241e:	d8e5      	bhi.n	80023ec <__gedf2+0x80>
 8002420:	d1da      	bne.n	80023d8 <__gedf2+0x6c>
 8002422:	45c8      	cmp	r8, r9
 8002424:	d8e2      	bhi.n	80023ec <__gedf2+0x80>
 8002426:	2000      	movs	r0, #0
 8002428:	45c8      	cmp	r8, r9
 800242a:	d2e4      	bcs.n	80023f6 <__gedf2+0x8a>
 800242c:	e7d4      	b.n	80023d8 <__gedf2+0x6c>
 800242e:	2000      	movs	r0, #0
 8002430:	2c00      	cmp	r4, #0
 8002432:	d0e0      	beq.n	80023f6 <__gedf2+0x8a>
 8002434:	e7da      	b.n	80023ec <__gedf2+0x80>
 8002436:	4311      	orrs	r1, r2
 8002438:	d103      	bne.n	8002442 <__gedf2+0xd6>
 800243a:	4584      	cmp	ip, r0
 800243c:	d1d6      	bne.n	80023ec <__gedf2+0x80>
 800243e:	2000      	movs	r0, #0
 8002440:	e7d9      	b.n	80023f6 <__gedf2+0x8a>
 8002442:	2002      	movs	r0, #2
 8002444:	4240      	negs	r0, r0
 8002446:	e7d6      	b.n	80023f6 <__gedf2+0x8a>
 8002448:	4584      	cmp	ip, r0
 800244a:	d0e6      	beq.n	800241a <__gedf2+0xae>
 800244c:	e7ce      	b.n	80023ec <__gedf2+0x80>
 800244e:	46c0      	nop			@ (mov r8, r8)
 8002450:	000007ff 	.word	0x000007ff

08002454 <__ledf2>:
 8002454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002456:	4657      	mov	r7, sl
 8002458:	464e      	mov	r6, r9
 800245a:	4645      	mov	r5, r8
 800245c:	46de      	mov	lr, fp
 800245e:	b5e0      	push	{r5, r6, r7, lr}
 8002460:	000d      	movs	r5, r1
 8002462:	030f      	lsls	r7, r1, #12
 8002464:	0004      	movs	r4, r0
 8002466:	4680      	mov	r8, r0
 8002468:	0fe8      	lsrs	r0, r5, #31
 800246a:	0b39      	lsrs	r1, r7, #12
 800246c:	4684      	mov	ip, r0
 800246e:	b083      	sub	sp, #12
 8002470:	0058      	lsls	r0, r3, #1
 8002472:	4f30      	ldr	r7, [pc, #192]	@ (8002534 <__ledf2+0xe0>)
 8002474:	0d40      	lsrs	r0, r0, #21
 8002476:	9101      	str	r1, [sp, #4]
 8002478:	031e      	lsls	r6, r3, #12
 800247a:	0069      	lsls	r1, r5, #1
 800247c:	4682      	mov	sl, r0
 800247e:	4691      	mov	r9, r2
 8002480:	0d49      	lsrs	r1, r1, #21
 8002482:	0b36      	lsrs	r6, r6, #12
 8002484:	0fd8      	lsrs	r0, r3, #31
 8002486:	42b9      	cmp	r1, r7
 8002488:	d020      	beq.n	80024cc <__ledf2+0x78>
 800248a:	45ba      	cmp	sl, r7
 800248c:	d00f      	beq.n	80024ae <__ledf2+0x5a>
 800248e:	2900      	cmp	r1, #0
 8002490:	d12b      	bne.n	80024ea <__ledf2+0x96>
 8002492:	9901      	ldr	r1, [sp, #4]
 8002494:	430c      	orrs	r4, r1
 8002496:	4651      	mov	r1, sl
 8002498:	2900      	cmp	r1, #0
 800249a:	d137      	bne.n	800250c <__ledf2+0xb8>
 800249c:	4332      	orrs	r2, r6
 800249e:	d038      	beq.n	8002512 <__ledf2+0xbe>
 80024a0:	2c00      	cmp	r4, #0
 80024a2:	d144      	bne.n	800252e <__ledf2+0xda>
 80024a4:	2800      	cmp	r0, #0
 80024a6:	d119      	bne.n	80024dc <__ledf2+0x88>
 80024a8:	2001      	movs	r0, #1
 80024aa:	4240      	negs	r0, r0
 80024ac:	e016      	b.n	80024dc <__ledf2+0x88>
 80024ae:	4316      	orrs	r6, r2
 80024b0:	d113      	bne.n	80024da <__ledf2+0x86>
 80024b2:	2900      	cmp	r1, #0
 80024b4:	d102      	bne.n	80024bc <__ledf2+0x68>
 80024b6:	9f01      	ldr	r7, [sp, #4]
 80024b8:	4327      	orrs	r7, r4
 80024ba:	d0f3      	beq.n	80024a4 <__ledf2+0x50>
 80024bc:	4584      	cmp	ip, r0
 80024be:	d020      	beq.n	8002502 <__ledf2+0xae>
 80024c0:	4663      	mov	r3, ip
 80024c2:	2002      	movs	r0, #2
 80024c4:	3b01      	subs	r3, #1
 80024c6:	4018      	ands	r0, r3
 80024c8:	3801      	subs	r0, #1
 80024ca:	e007      	b.n	80024dc <__ledf2+0x88>
 80024cc:	9f01      	ldr	r7, [sp, #4]
 80024ce:	4327      	orrs	r7, r4
 80024d0:	d103      	bne.n	80024da <__ledf2+0x86>
 80024d2:	458a      	cmp	sl, r1
 80024d4:	d1f4      	bne.n	80024c0 <__ledf2+0x6c>
 80024d6:	4316      	orrs	r6, r2
 80024d8:	d01f      	beq.n	800251a <__ledf2+0xc6>
 80024da:	2002      	movs	r0, #2
 80024dc:	b003      	add	sp, #12
 80024de:	bcf0      	pop	{r4, r5, r6, r7}
 80024e0:	46bb      	mov	fp, r7
 80024e2:	46b2      	mov	sl, r6
 80024e4:	46a9      	mov	r9, r5
 80024e6:	46a0      	mov	r8, r4
 80024e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024ea:	4654      	mov	r4, sl
 80024ec:	2c00      	cmp	r4, #0
 80024ee:	d0e7      	beq.n	80024c0 <__ledf2+0x6c>
 80024f0:	4584      	cmp	ip, r0
 80024f2:	d1e5      	bne.n	80024c0 <__ledf2+0x6c>
 80024f4:	4551      	cmp	r1, sl
 80024f6:	dce3      	bgt.n	80024c0 <__ledf2+0x6c>
 80024f8:	db03      	blt.n	8002502 <__ledf2+0xae>
 80024fa:	9b01      	ldr	r3, [sp, #4]
 80024fc:	42b3      	cmp	r3, r6
 80024fe:	d8df      	bhi.n	80024c0 <__ledf2+0x6c>
 8002500:	d00f      	beq.n	8002522 <__ledf2+0xce>
 8002502:	4663      	mov	r3, ip
 8002504:	2b00      	cmp	r3, #0
 8002506:	d0cf      	beq.n	80024a8 <__ledf2+0x54>
 8002508:	4660      	mov	r0, ip
 800250a:	e7e7      	b.n	80024dc <__ledf2+0x88>
 800250c:	2c00      	cmp	r4, #0
 800250e:	d0c9      	beq.n	80024a4 <__ledf2+0x50>
 8002510:	e7d4      	b.n	80024bc <__ledf2+0x68>
 8002512:	2000      	movs	r0, #0
 8002514:	2c00      	cmp	r4, #0
 8002516:	d0e1      	beq.n	80024dc <__ledf2+0x88>
 8002518:	e7d2      	b.n	80024c0 <__ledf2+0x6c>
 800251a:	4584      	cmp	ip, r0
 800251c:	d1d0      	bne.n	80024c0 <__ledf2+0x6c>
 800251e:	2000      	movs	r0, #0
 8002520:	e7dc      	b.n	80024dc <__ledf2+0x88>
 8002522:	45c8      	cmp	r8, r9
 8002524:	d8cc      	bhi.n	80024c0 <__ledf2+0x6c>
 8002526:	2000      	movs	r0, #0
 8002528:	45c8      	cmp	r8, r9
 800252a:	d2d7      	bcs.n	80024dc <__ledf2+0x88>
 800252c:	e7e9      	b.n	8002502 <__ledf2+0xae>
 800252e:	4584      	cmp	ip, r0
 8002530:	d0e3      	beq.n	80024fa <__ledf2+0xa6>
 8002532:	e7c5      	b.n	80024c0 <__ledf2+0x6c>
 8002534:	000007ff 	.word	0x000007ff

08002538 <__aeabi_dmul>:
 8002538:	b5f0      	push	{r4, r5, r6, r7, lr}
 800253a:	4657      	mov	r7, sl
 800253c:	46de      	mov	lr, fp
 800253e:	464e      	mov	r6, r9
 8002540:	4645      	mov	r5, r8
 8002542:	b5e0      	push	{r5, r6, r7, lr}
 8002544:	001f      	movs	r7, r3
 8002546:	030b      	lsls	r3, r1, #12
 8002548:	0b1b      	lsrs	r3, r3, #12
 800254a:	0016      	movs	r6, r2
 800254c:	469a      	mov	sl, r3
 800254e:	0fca      	lsrs	r2, r1, #31
 8002550:	004b      	lsls	r3, r1, #1
 8002552:	0004      	movs	r4, r0
 8002554:	4693      	mov	fp, r2
 8002556:	b087      	sub	sp, #28
 8002558:	0d5b      	lsrs	r3, r3, #21
 800255a:	d100      	bne.n	800255e <__aeabi_dmul+0x26>
 800255c:	e0d5      	b.n	800270a <__aeabi_dmul+0x1d2>
 800255e:	4abb      	ldr	r2, [pc, #748]	@ (800284c <__aeabi_dmul+0x314>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d100      	bne.n	8002566 <__aeabi_dmul+0x2e>
 8002564:	e0f8      	b.n	8002758 <__aeabi_dmul+0x220>
 8002566:	4651      	mov	r1, sl
 8002568:	0f42      	lsrs	r2, r0, #29
 800256a:	00c9      	lsls	r1, r1, #3
 800256c:	430a      	orrs	r2, r1
 800256e:	2180      	movs	r1, #128	@ 0x80
 8002570:	0409      	lsls	r1, r1, #16
 8002572:	4311      	orrs	r1, r2
 8002574:	00c2      	lsls	r2, r0, #3
 8002576:	4691      	mov	r9, r2
 8002578:	4ab5      	ldr	r2, [pc, #724]	@ (8002850 <__aeabi_dmul+0x318>)
 800257a:	468a      	mov	sl, r1
 800257c:	189d      	adds	r5, r3, r2
 800257e:	2300      	movs	r3, #0
 8002580:	4698      	mov	r8, r3
 8002582:	9302      	str	r3, [sp, #8]
 8002584:	033c      	lsls	r4, r7, #12
 8002586:	007b      	lsls	r3, r7, #1
 8002588:	0ffa      	lsrs	r2, r7, #31
 800258a:	0030      	movs	r0, r6
 800258c:	0b24      	lsrs	r4, r4, #12
 800258e:	0d5b      	lsrs	r3, r3, #21
 8002590:	9200      	str	r2, [sp, #0]
 8002592:	d100      	bne.n	8002596 <__aeabi_dmul+0x5e>
 8002594:	e096      	b.n	80026c4 <__aeabi_dmul+0x18c>
 8002596:	4aad      	ldr	r2, [pc, #692]	@ (800284c <__aeabi_dmul+0x314>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d031      	beq.n	8002600 <__aeabi_dmul+0xc8>
 800259c:	0f72      	lsrs	r2, r6, #29
 800259e:	00e4      	lsls	r4, r4, #3
 80025a0:	4322      	orrs	r2, r4
 80025a2:	2480      	movs	r4, #128	@ 0x80
 80025a4:	0424      	lsls	r4, r4, #16
 80025a6:	4314      	orrs	r4, r2
 80025a8:	4aa9      	ldr	r2, [pc, #676]	@ (8002850 <__aeabi_dmul+0x318>)
 80025aa:	00f0      	lsls	r0, r6, #3
 80025ac:	4694      	mov	ip, r2
 80025ae:	4463      	add	r3, ip
 80025b0:	195b      	adds	r3, r3, r5
 80025b2:	1c5a      	adds	r2, r3, #1
 80025b4:	9201      	str	r2, [sp, #4]
 80025b6:	4642      	mov	r2, r8
 80025b8:	2600      	movs	r6, #0
 80025ba:	2a0a      	cmp	r2, #10
 80025bc:	dc42      	bgt.n	8002644 <__aeabi_dmul+0x10c>
 80025be:	465a      	mov	r2, fp
 80025c0:	9900      	ldr	r1, [sp, #0]
 80025c2:	404a      	eors	r2, r1
 80025c4:	4693      	mov	fp, r2
 80025c6:	4642      	mov	r2, r8
 80025c8:	2a02      	cmp	r2, #2
 80025ca:	dc32      	bgt.n	8002632 <__aeabi_dmul+0xfa>
 80025cc:	3a01      	subs	r2, #1
 80025ce:	2a01      	cmp	r2, #1
 80025d0:	d900      	bls.n	80025d4 <__aeabi_dmul+0x9c>
 80025d2:	e149      	b.n	8002868 <__aeabi_dmul+0x330>
 80025d4:	2e02      	cmp	r6, #2
 80025d6:	d100      	bne.n	80025da <__aeabi_dmul+0xa2>
 80025d8:	e0ca      	b.n	8002770 <__aeabi_dmul+0x238>
 80025da:	2e01      	cmp	r6, #1
 80025dc:	d13d      	bne.n	800265a <__aeabi_dmul+0x122>
 80025de:	2300      	movs	r3, #0
 80025e0:	2400      	movs	r4, #0
 80025e2:	2200      	movs	r2, #0
 80025e4:	0010      	movs	r0, r2
 80025e6:	465a      	mov	r2, fp
 80025e8:	051b      	lsls	r3, r3, #20
 80025ea:	4323      	orrs	r3, r4
 80025ec:	07d2      	lsls	r2, r2, #31
 80025ee:	4313      	orrs	r3, r2
 80025f0:	0019      	movs	r1, r3
 80025f2:	b007      	add	sp, #28
 80025f4:	bcf0      	pop	{r4, r5, r6, r7}
 80025f6:	46bb      	mov	fp, r7
 80025f8:	46b2      	mov	sl, r6
 80025fa:	46a9      	mov	r9, r5
 80025fc:	46a0      	mov	r8, r4
 80025fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002600:	4b92      	ldr	r3, [pc, #584]	@ (800284c <__aeabi_dmul+0x314>)
 8002602:	4326      	orrs	r6, r4
 8002604:	18eb      	adds	r3, r5, r3
 8002606:	2e00      	cmp	r6, #0
 8002608:	d100      	bne.n	800260c <__aeabi_dmul+0xd4>
 800260a:	e0bb      	b.n	8002784 <__aeabi_dmul+0x24c>
 800260c:	2203      	movs	r2, #3
 800260e:	4641      	mov	r1, r8
 8002610:	4311      	orrs	r1, r2
 8002612:	465a      	mov	r2, fp
 8002614:	4688      	mov	r8, r1
 8002616:	9900      	ldr	r1, [sp, #0]
 8002618:	404a      	eors	r2, r1
 800261a:	2180      	movs	r1, #128	@ 0x80
 800261c:	0109      	lsls	r1, r1, #4
 800261e:	468c      	mov	ip, r1
 8002620:	0029      	movs	r1, r5
 8002622:	4461      	add	r1, ip
 8002624:	9101      	str	r1, [sp, #4]
 8002626:	4641      	mov	r1, r8
 8002628:	290a      	cmp	r1, #10
 800262a:	dd00      	ble.n	800262e <__aeabi_dmul+0xf6>
 800262c:	e233      	b.n	8002a96 <__aeabi_dmul+0x55e>
 800262e:	4693      	mov	fp, r2
 8002630:	2603      	movs	r6, #3
 8002632:	4642      	mov	r2, r8
 8002634:	2701      	movs	r7, #1
 8002636:	4097      	lsls	r7, r2
 8002638:	21a6      	movs	r1, #166	@ 0xa6
 800263a:	003a      	movs	r2, r7
 800263c:	00c9      	lsls	r1, r1, #3
 800263e:	400a      	ands	r2, r1
 8002640:	420f      	tst	r7, r1
<<<<<<< HEAD
 8002642:	d163      	bne.n	800270c <__aeabi_dmul+0x240>
 8002644:	2288      	movs	r2, #136	@ 0x88
 8002646:	423a      	tst	r2, r7
 8002648:	d100      	bne.n	800264c <__aeabi_dmul+0x180>
 800264a:	e0d7      	b.n	80027fc <__aeabi_dmul+0x330>
 800264c:	9b00      	ldr	r3, [sp, #0]
 800264e:	46a2      	mov	sl, r4
 8002650:	469b      	mov	fp, r3
 8002652:	4681      	mov	r9, r0
 8002654:	9602      	str	r6, [sp, #8]
 8002656:	e7bf      	b.n	80025d8 <__aeabi_dmul+0x10c>
 8002658:	0023      	movs	r3, r4
 800265a:	4333      	orrs	r3, r6
 800265c:	d100      	bne.n	8002660 <__aeabi_dmul+0x194>
 800265e:	e07f      	b.n	8002760 <__aeabi_dmul+0x294>
 8002660:	2c00      	cmp	r4, #0
 8002662:	d100      	bne.n	8002666 <__aeabi_dmul+0x19a>
 8002664:	e1ad      	b.n	80029c2 <__aeabi_dmul+0x4f6>
 8002666:	0020      	movs	r0, r4
 8002668:	f000 fec8 	bl	80033fc <__clzsi2>
 800266c:	0002      	movs	r2, r0
 800266e:	0003      	movs	r3, r0
 8002670:	3a0b      	subs	r2, #11
 8002672:	201d      	movs	r0, #29
 8002674:	0019      	movs	r1, r3
 8002676:	1a82      	subs	r2, r0, r2
 8002678:	0030      	movs	r0, r6
 800267a:	3908      	subs	r1, #8
 800267c:	40d0      	lsrs	r0, r2
 800267e:	408c      	lsls	r4, r1
 8002680:	4304      	orrs	r4, r0
 8002682:	0030      	movs	r0, r6
 8002684:	4088      	lsls	r0, r1
 8002686:	4a5b      	ldr	r2, [pc, #364]	@ (80027f4 <__aeabi_dmul+0x328>)
 8002688:	1aeb      	subs	r3, r5, r3
 800268a:	4694      	mov	ip, r2
 800268c:	4463      	add	r3, ip
 800268e:	1c5a      	adds	r2, r3, #1
 8002690:	9201      	str	r2, [sp, #4]
 8002692:	4642      	mov	r2, r8
 8002694:	2600      	movs	r6, #0
 8002696:	2a0a      	cmp	r2, #10
 8002698:	dc00      	bgt.n	800269c <__aeabi_dmul+0x1d0>
 800269a:	e75a      	b.n	8002552 <__aeabi_dmul+0x86>
 800269c:	e79c      	b.n	80025d8 <__aeabi_dmul+0x10c>
 800269e:	4653      	mov	r3, sl
 80026a0:	4303      	orrs	r3, r0
 80026a2:	4699      	mov	r9, r3
 80026a4:	d054      	beq.n	8002750 <__aeabi_dmul+0x284>
 80026a6:	4653      	mov	r3, sl
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d100      	bne.n	80026ae <__aeabi_dmul+0x1e2>
 80026ac:	e177      	b.n	800299e <__aeabi_dmul+0x4d2>
 80026ae:	4650      	mov	r0, sl
 80026b0:	f000 fea4 	bl	80033fc <__clzsi2>
 80026b4:	230b      	movs	r3, #11
 80026b6:	425b      	negs	r3, r3
 80026b8:	469c      	mov	ip, r3
 80026ba:	0002      	movs	r2, r0
 80026bc:	4484      	add	ip, r0
 80026be:	0011      	movs	r1, r2
 80026c0:	4650      	mov	r0, sl
 80026c2:	3908      	subs	r1, #8
 80026c4:	4088      	lsls	r0, r1
 80026c6:	231d      	movs	r3, #29
 80026c8:	4680      	mov	r8, r0
 80026ca:	4660      	mov	r0, ip
 80026cc:	1a1b      	subs	r3, r3, r0
 80026ce:	0020      	movs	r0, r4
 80026d0:	40d8      	lsrs	r0, r3
 80026d2:	0003      	movs	r3, r0
 80026d4:	4640      	mov	r0, r8
 80026d6:	4303      	orrs	r3, r0
 80026d8:	469a      	mov	sl, r3
 80026da:	0023      	movs	r3, r4
 80026dc:	408b      	lsls	r3, r1
 80026de:	4699      	mov	r9, r3
 80026e0:	2300      	movs	r3, #0
 80026e2:	4d44      	ldr	r5, [pc, #272]	@ (80027f4 <__aeabi_dmul+0x328>)
 80026e4:	4698      	mov	r8, r3
 80026e6:	1aad      	subs	r5, r5, r2
 80026e8:	9302      	str	r3, [sp, #8]
 80026ea:	e715      	b.n	8002518 <__aeabi_dmul+0x4c>
 80026ec:	4652      	mov	r2, sl
 80026ee:	4302      	orrs	r2, r0
 80026f0:	4691      	mov	r9, r2
 80026f2:	d126      	bne.n	8002742 <__aeabi_dmul+0x276>
 80026f4:	2200      	movs	r2, #0
 80026f6:	001d      	movs	r5, r3
 80026f8:	2302      	movs	r3, #2
 80026fa:	4692      	mov	sl, r2
 80026fc:	3208      	adds	r2, #8
 80026fe:	4690      	mov	r8, r2
 8002700:	9302      	str	r3, [sp, #8]
 8002702:	e709      	b.n	8002518 <__aeabi_dmul+0x4c>
 8002704:	2400      	movs	r4, #0
 8002706:	2200      	movs	r2, #0
 8002708:	4b35      	ldr	r3, [pc, #212]	@ (80027e0 <__aeabi_dmul+0x314>)
 800270a:	e735      	b.n	8002578 <__aeabi_dmul+0xac>
 800270c:	2300      	movs	r3, #0
 800270e:	2480      	movs	r4, #128	@ 0x80
 8002710:	469b      	mov	fp, r3
 8002712:	0324      	lsls	r4, r4, #12
 8002714:	4b32      	ldr	r3, [pc, #200]	@ (80027e0 <__aeabi_dmul+0x314>)
 8002716:	e72f      	b.n	8002578 <__aeabi_dmul+0xac>
 8002718:	2202      	movs	r2, #2
 800271a:	4641      	mov	r1, r8
 800271c:	4311      	orrs	r1, r2
 800271e:	2280      	movs	r2, #128	@ 0x80
 8002720:	0112      	lsls	r2, r2, #4
 8002722:	4694      	mov	ip, r2
 8002724:	002a      	movs	r2, r5
 8002726:	4462      	add	r2, ip
 8002728:	4688      	mov	r8, r1
 800272a:	9201      	str	r2, [sp, #4]
 800272c:	290a      	cmp	r1, #10
 800272e:	dd00      	ble.n	8002732 <__aeabi_dmul+0x266>
 8002730:	e752      	b.n	80025d8 <__aeabi_dmul+0x10c>
 8002732:	465a      	mov	r2, fp
 8002734:	2000      	movs	r0, #0
 8002736:	9900      	ldr	r1, [sp, #0]
 8002738:	0004      	movs	r4, r0
 800273a:	404a      	eors	r2, r1
 800273c:	4693      	mov	fp, r2
 800273e:	2602      	movs	r6, #2
 8002740:	e70b      	b.n	800255a <__aeabi_dmul+0x8e>
 8002742:	220c      	movs	r2, #12
 8002744:	001d      	movs	r5, r3
 8002746:	2303      	movs	r3, #3
 8002748:	4681      	mov	r9, r0
 800274a:	4690      	mov	r8, r2
 800274c:	9302      	str	r3, [sp, #8]
 800274e:	e6e3      	b.n	8002518 <__aeabi_dmul+0x4c>
 8002750:	2300      	movs	r3, #0
 8002752:	469a      	mov	sl, r3
 8002754:	3304      	adds	r3, #4
 8002756:	4698      	mov	r8, r3
 8002758:	3b03      	subs	r3, #3
 800275a:	2500      	movs	r5, #0
 800275c:	9302      	str	r3, [sp, #8]
 800275e:	e6db      	b.n	8002518 <__aeabi_dmul+0x4c>
 8002760:	4642      	mov	r2, r8
 8002762:	3301      	adds	r3, #1
 8002764:	431a      	orrs	r2, r3
 8002766:	002b      	movs	r3, r5
 8002768:	4690      	mov	r8, r2
 800276a:	1c5a      	adds	r2, r3, #1
 800276c:	9201      	str	r2, [sp, #4]
 800276e:	4642      	mov	r2, r8
 8002770:	2400      	movs	r4, #0
 8002772:	2000      	movs	r0, #0
 8002774:	2601      	movs	r6, #1
 8002776:	2a0a      	cmp	r2, #10
 8002778:	dc00      	bgt.n	800277c <__aeabi_dmul+0x2b0>
 800277a:	e6ea      	b.n	8002552 <__aeabi_dmul+0x86>
 800277c:	e72c      	b.n	80025d8 <__aeabi_dmul+0x10c>
 800277e:	2201      	movs	r2, #1
 8002780:	1ad2      	subs	r2, r2, r3
 8002782:	2a38      	cmp	r2, #56	@ 0x38
 8002784:	dd00      	ble.n	8002788 <__aeabi_dmul+0x2bc>
 8002786:	e6f4      	b.n	8002572 <__aeabi_dmul+0xa6>
 8002788:	2a1f      	cmp	r2, #31
 800278a:	dc00      	bgt.n	800278e <__aeabi_dmul+0x2c2>
 800278c:	e12a      	b.n	80029e4 <__aeabi_dmul+0x518>
 800278e:	211f      	movs	r1, #31
 8002790:	4249      	negs	r1, r1
 8002792:	1acb      	subs	r3, r1, r3
 8002794:	0021      	movs	r1, r4
 8002796:	40d9      	lsrs	r1, r3
 8002798:	000b      	movs	r3, r1
 800279a:	2a20      	cmp	r2, #32
 800279c:	d005      	beq.n	80027aa <__aeabi_dmul+0x2de>
 800279e:	4a16      	ldr	r2, [pc, #88]	@ (80027f8 <__aeabi_dmul+0x32c>)
 80027a0:	9d01      	ldr	r5, [sp, #4]
 80027a2:	4694      	mov	ip, r2
 80027a4:	4465      	add	r5, ip
 80027a6:	40ac      	lsls	r4, r5
 80027a8:	4320      	orrs	r0, r4
 80027aa:	1e42      	subs	r2, r0, #1
 80027ac:	4190      	sbcs	r0, r2
 80027ae:	4318      	orrs	r0, r3
 80027b0:	2307      	movs	r3, #7
 80027b2:	0019      	movs	r1, r3
 80027b4:	2400      	movs	r4, #0
 80027b6:	4001      	ands	r1, r0
 80027b8:	4203      	tst	r3, r0
 80027ba:	d00c      	beq.n	80027d6 <__aeabi_dmul+0x30a>
 80027bc:	230f      	movs	r3, #15
 80027be:	4003      	ands	r3, r0
 80027c0:	2b04      	cmp	r3, #4
 80027c2:	d100      	bne.n	80027c6 <__aeabi_dmul+0x2fa>
 80027c4:	e140      	b.n	8002a48 <__aeabi_dmul+0x57c>
 80027c6:	1d03      	adds	r3, r0, #4
 80027c8:	4283      	cmp	r3, r0
 80027ca:	41a4      	sbcs	r4, r4
 80027cc:	0018      	movs	r0, r3
 80027ce:	4264      	negs	r4, r4
 80027d0:	0761      	lsls	r1, r4, #29
 80027d2:	0264      	lsls	r4, r4, #9
 80027d4:	0b24      	lsrs	r4, r4, #12
 80027d6:	08c2      	lsrs	r2, r0, #3
 80027d8:	2300      	movs	r3, #0
 80027da:	430a      	orrs	r2, r1
 80027dc:	e6cc      	b.n	8002578 <__aeabi_dmul+0xac>
 80027de:	46c0      	nop			@ (mov r8, r8)
 80027e0:	000007ff 	.word	0x000007ff
 80027e4:	fffffc01 	.word	0xfffffc01
 80027e8:	000003ff 	.word	0x000003ff
 80027ec:	feffffff 	.word	0xfeffffff
 80027f0:	000007fe 	.word	0x000007fe
 80027f4:	fffffc0d 	.word	0xfffffc0d
 80027f8:	0000043e 	.word	0x0000043e
 80027fc:	4649      	mov	r1, r9
 80027fe:	464a      	mov	r2, r9
 8002800:	0409      	lsls	r1, r1, #16
 8002802:	0c09      	lsrs	r1, r1, #16
 8002804:	000d      	movs	r5, r1
 8002806:	0c16      	lsrs	r6, r2, #16
 8002808:	0c02      	lsrs	r2, r0, #16
 800280a:	0400      	lsls	r0, r0, #16
 800280c:	0c00      	lsrs	r0, r0, #16
 800280e:	4345      	muls	r5, r0
 8002810:	46ac      	mov	ip, r5
 8002812:	0005      	movs	r5, r0
 8002814:	4375      	muls	r5, r6
 8002816:	46a8      	mov	r8, r5
 8002818:	0015      	movs	r5, r2
 800281a:	000f      	movs	r7, r1
 800281c:	4375      	muls	r5, r6
 800281e:	9200      	str	r2, [sp, #0]
 8002820:	9502      	str	r5, [sp, #8]
 8002822:	002a      	movs	r2, r5
 8002824:	9d00      	ldr	r5, [sp, #0]
 8002826:	436f      	muls	r7, r5
 8002828:	4665      	mov	r5, ip
 800282a:	0c2d      	lsrs	r5, r5, #16
 800282c:	46a9      	mov	r9, r5
 800282e:	4447      	add	r7, r8
 8002830:	444f      	add	r7, r9
 8002832:	45b8      	cmp	r8, r7
 8002834:	d905      	bls.n	8002842 <__aeabi_dmul+0x376>
 8002836:	0015      	movs	r5, r2
 8002838:	2280      	movs	r2, #128	@ 0x80
 800283a:	0252      	lsls	r2, r2, #9
 800283c:	4690      	mov	r8, r2
 800283e:	4445      	add	r5, r8
 8002840:	9502      	str	r5, [sp, #8]
 8002842:	0c3d      	lsrs	r5, r7, #16
 8002844:	9503      	str	r5, [sp, #12]
 8002846:	4665      	mov	r5, ip
 8002848:	042d      	lsls	r5, r5, #16
 800284a:	043f      	lsls	r7, r7, #16
 800284c:	0c2d      	lsrs	r5, r5, #16
 800284e:	46ac      	mov	ip, r5
 8002850:	003d      	movs	r5, r7
 8002852:	4465      	add	r5, ip
 8002854:	9504      	str	r5, [sp, #16]
 8002856:	0c25      	lsrs	r5, r4, #16
 8002858:	0424      	lsls	r4, r4, #16
 800285a:	0c24      	lsrs	r4, r4, #16
 800285c:	46ac      	mov	ip, r5
 800285e:	0025      	movs	r5, r4
 8002860:	4375      	muls	r5, r6
 8002862:	46a8      	mov	r8, r5
 8002864:	4665      	mov	r5, ip
 8002866:	000f      	movs	r7, r1
 8002868:	4369      	muls	r1, r5
 800286a:	4441      	add	r1, r8
 800286c:	4689      	mov	r9, r1
 800286e:	4367      	muls	r7, r4
 8002870:	0c39      	lsrs	r1, r7, #16
 8002872:	4449      	add	r1, r9
 8002874:	436e      	muls	r6, r5
 8002876:	4588      	cmp	r8, r1
 8002878:	d903      	bls.n	8002882 <__aeabi_dmul+0x3b6>
 800287a:	2280      	movs	r2, #128	@ 0x80
 800287c:	0252      	lsls	r2, r2, #9
 800287e:	4690      	mov	r8, r2
 8002880:	4446      	add	r6, r8
 8002882:	0c0d      	lsrs	r5, r1, #16
 8002884:	46a8      	mov	r8, r5
 8002886:	0035      	movs	r5, r6
 8002888:	4445      	add	r5, r8
 800288a:	9505      	str	r5, [sp, #20]
 800288c:	9d03      	ldr	r5, [sp, #12]
 800288e:	043f      	lsls	r7, r7, #16
 8002890:	46a8      	mov	r8, r5
 8002892:	0c3f      	lsrs	r7, r7, #16
 8002894:	0409      	lsls	r1, r1, #16
 8002896:	19c9      	adds	r1, r1, r7
 8002898:	4488      	add	r8, r1
 800289a:	4645      	mov	r5, r8
 800289c:	9503      	str	r5, [sp, #12]
 800289e:	4655      	mov	r5, sl
 80028a0:	042e      	lsls	r6, r5, #16
 80028a2:	0c36      	lsrs	r6, r6, #16
 80028a4:	0c2f      	lsrs	r7, r5, #16
 80028a6:	0035      	movs	r5, r6
 80028a8:	4345      	muls	r5, r0
 80028aa:	4378      	muls	r0, r7
 80028ac:	4681      	mov	r9, r0
 80028ae:	0038      	movs	r0, r7
 80028b0:	46a8      	mov	r8, r5
 80028b2:	0c2d      	lsrs	r5, r5, #16
 80028b4:	46aa      	mov	sl, r5
 80028b6:	9a00      	ldr	r2, [sp, #0]
 80028b8:	4350      	muls	r0, r2
 80028ba:	4372      	muls	r2, r6
 80028bc:	444a      	add	r2, r9
 80028be:	4452      	add	r2, sl
 80028c0:	4591      	cmp	r9, r2
 80028c2:	d903      	bls.n	80028cc <__aeabi_dmul+0x400>
 80028c4:	2580      	movs	r5, #128	@ 0x80
 80028c6:	026d      	lsls	r5, r5, #9
 80028c8:	46a9      	mov	r9, r5
 80028ca:	4448      	add	r0, r9
 80028cc:	0c15      	lsrs	r5, r2, #16
 80028ce:	46a9      	mov	r9, r5
 80028d0:	4645      	mov	r5, r8
 80028d2:	042d      	lsls	r5, r5, #16
 80028d4:	0c2d      	lsrs	r5, r5, #16
 80028d6:	46a8      	mov	r8, r5
 80028d8:	4665      	mov	r5, ip
 80028da:	437d      	muls	r5, r7
 80028dc:	0412      	lsls	r2, r2, #16
 80028de:	4448      	add	r0, r9
 80028e0:	4490      	add	r8, r2
 80028e2:	46a9      	mov	r9, r5
 80028e4:	0032      	movs	r2, r6
 80028e6:	4665      	mov	r5, ip
 80028e8:	4362      	muls	r2, r4
 80028ea:	436e      	muls	r6, r5
 80028ec:	437c      	muls	r4, r7
 80028ee:	0c17      	lsrs	r7, r2, #16
 80028f0:	1936      	adds	r6, r6, r4
 80028f2:	19bf      	adds	r7, r7, r6
 80028f4:	42bc      	cmp	r4, r7
 80028f6:	d903      	bls.n	8002900 <__aeabi_dmul+0x434>
 80028f8:	2480      	movs	r4, #128	@ 0x80
 80028fa:	0264      	lsls	r4, r4, #9
 80028fc:	46a4      	mov	ip, r4
 80028fe:	44e1      	add	r9, ip
 8002900:	9c02      	ldr	r4, [sp, #8]
 8002902:	9e03      	ldr	r6, [sp, #12]
 8002904:	46a4      	mov	ip, r4
 8002906:	9d05      	ldr	r5, [sp, #20]
 8002908:	4466      	add	r6, ip
 800290a:	428e      	cmp	r6, r1
 800290c:	4189      	sbcs	r1, r1
 800290e:	46ac      	mov	ip, r5
 8002910:	0412      	lsls	r2, r2, #16
 8002912:	043c      	lsls	r4, r7, #16
 8002914:	0c12      	lsrs	r2, r2, #16
 8002916:	18a2      	adds	r2, r4, r2
 8002918:	4462      	add	r2, ip
 800291a:	4249      	negs	r1, r1
 800291c:	1854      	adds	r4, r2, r1
 800291e:	4446      	add	r6, r8
 8002920:	46a4      	mov	ip, r4
 8002922:	4546      	cmp	r6, r8
 8002924:	41a4      	sbcs	r4, r4
 8002926:	4682      	mov	sl, r0
 8002928:	4264      	negs	r4, r4
 800292a:	46a0      	mov	r8, r4
 800292c:	42aa      	cmp	r2, r5
 800292e:	4192      	sbcs	r2, r2
 8002930:	458c      	cmp	ip, r1
 8002932:	4189      	sbcs	r1, r1
 8002934:	44e2      	add	sl, ip
 8002936:	44d0      	add	r8, sl
 8002938:	4249      	negs	r1, r1
 800293a:	4252      	negs	r2, r2
 800293c:	430a      	orrs	r2, r1
 800293e:	45a0      	cmp	r8, r4
 8002940:	41a4      	sbcs	r4, r4
 8002942:	4582      	cmp	sl, r0
 8002944:	4189      	sbcs	r1, r1
 8002946:	4264      	negs	r4, r4
 8002948:	4249      	negs	r1, r1
 800294a:	430c      	orrs	r4, r1
 800294c:	4641      	mov	r1, r8
 800294e:	0c3f      	lsrs	r7, r7, #16
 8002950:	19d2      	adds	r2, r2, r7
 8002952:	1912      	adds	r2, r2, r4
 8002954:	0dcc      	lsrs	r4, r1, #23
 8002956:	9904      	ldr	r1, [sp, #16]
 8002958:	0270      	lsls	r0, r6, #9
 800295a:	4308      	orrs	r0, r1
 800295c:	1e41      	subs	r1, r0, #1
 800295e:	4188      	sbcs	r0, r1
 8002960:	4641      	mov	r1, r8
 8002962:	444a      	add	r2, r9
 8002964:	0df6      	lsrs	r6, r6, #23
 8002966:	0252      	lsls	r2, r2, #9
 8002968:	4330      	orrs	r0, r6
 800296a:	0249      	lsls	r1, r1, #9
 800296c:	4314      	orrs	r4, r2
 800296e:	4308      	orrs	r0, r1
 8002970:	01d2      	lsls	r2, r2, #7
 8002972:	d535      	bpl.n	80029e0 <__aeabi_dmul+0x514>
 8002974:	2201      	movs	r2, #1
 8002976:	0843      	lsrs	r3, r0, #1
 8002978:	4002      	ands	r2, r0
 800297a:	4313      	orrs	r3, r2
 800297c:	07e0      	lsls	r0, r4, #31
 800297e:	4318      	orrs	r0, r3
 8002980:	0864      	lsrs	r4, r4, #1
 8002982:	e634      	b.n	80025ee <__aeabi_dmul+0x122>
 8002984:	9b00      	ldr	r3, [sp, #0]
 8002986:	46a2      	mov	sl, r4
 8002988:	469b      	mov	fp, r3
 800298a:	4681      	mov	r9, r0
 800298c:	2480      	movs	r4, #128	@ 0x80
 800298e:	4653      	mov	r3, sl
 8002990:	0324      	lsls	r4, r4, #12
 8002992:	431c      	orrs	r4, r3
 8002994:	0324      	lsls	r4, r4, #12
 8002996:	464a      	mov	r2, r9
 8002998:	4b2e      	ldr	r3, [pc, #184]	@ (8002a54 <__aeabi_dmul+0x588>)
 800299a:	0b24      	lsrs	r4, r4, #12
 800299c:	e5ec      	b.n	8002578 <__aeabi_dmul+0xac>
 800299e:	f000 fd2d 	bl	80033fc <__clzsi2>
 80029a2:	2315      	movs	r3, #21
 80029a4:	469c      	mov	ip, r3
 80029a6:	4484      	add	ip, r0
 80029a8:	0002      	movs	r2, r0
 80029aa:	4663      	mov	r3, ip
 80029ac:	3220      	adds	r2, #32
 80029ae:	2b1c      	cmp	r3, #28
 80029b0:	dc00      	bgt.n	80029b4 <__aeabi_dmul+0x4e8>
 80029b2:	e684      	b.n	80026be <__aeabi_dmul+0x1f2>
 80029b4:	2300      	movs	r3, #0
 80029b6:	4699      	mov	r9, r3
 80029b8:	0023      	movs	r3, r4
 80029ba:	3808      	subs	r0, #8
 80029bc:	4083      	lsls	r3, r0
 80029be:	469a      	mov	sl, r3
 80029c0:	e68e      	b.n	80026e0 <__aeabi_dmul+0x214>
 80029c2:	f000 fd1b 	bl	80033fc <__clzsi2>
 80029c6:	0002      	movs	r2, r0
 80029c8:	0003      	movs	r3, r0
 80029ca:	3215      	adds	r2, #21
 80029cc:	3320      	adds	r3, #32
 80029ce:	2a1c      	cmp	r2, #28
 80029d0:	dc00      	bgt.n	80029d4 <__aeabi_dmul+0x508>
 80029d2:	e64e      	b.n	8002672 <__aeabi_dmul+0x1a6>
 80029d4:	0002      	movs	r2, r0
 80029d6:	0034      	movs	r4, r6
 80029d8:	3a08      	subs	r2, #8
 80029da:	2000      	movs	r0, #0
 80029dc:	4094      	lsls	r4, r2
 80029de:	e652      	b.n	8002686 <__aeabi_dmul+0x1ba>
 80029e0:	9301      	str	r3, [sp, #4]
 80029e2:	e604      	b.n	80025ee <__aeabi_dmul+0x122>
 80029e4:	4b1c      	ldr	r3, [pc, #112]	@ (8002a58 <__aeabi_dmul+0x58c>)
 80029e6:	0021      	movs	r1, r4
 80029e8:	469c      	mov	ip, r3
 80029ea:	0003      	movs	r3, r0
 80029ec:	9d01      	ldr	r5, [sp, #4]
 80029ee:	40d3      	lsrs	r3, r2
 80029f0:	4465      	add	r5, ip
 80029f2:	40a9      	lsls	r1, r5
 80029f4:	4319      	orrs	r1, r3
 80029f6:	0003      	movs	r3, r0
 80029f8:	40ab      	lsls	r3, r5
 80029fa:	1e58      	subs	r0, r3, #1
 80029fc:	4183      	sbcs	r3, r0
 80029fe:	4319      	orrs	r1, r3
 8002a00:	0008      	movs	r0, r1
 8002a02:	40d4      	lsrs	r4, r2
 8002a04:	074b      	lsls	r3, r1, #29
 8002a06:	d009      	beq.n	8002a1c <__aeabi_dmul+0x550>
 8002a08:	230f      	movs	r3, #15
 8002a0a:	400b      	ands	r3, r1
 8002a0c:	2b04      	cmp	r3, #4
 8002a0e:	d005      	beq.n	8002a1c <__aeabi_dmul+0x550>
 8002a10:	1d0b      	adds	r3, r1, #4
 8002a12:	428b      	cmp	r3, r1
 8002a14:	4180      	sbcs	r0, r0
 8002a16:	4240      	negs	r0, r0
 8002a18:	1824      	adds	r4, r4, r0
 8002a1a:	0018      	movs	r0, r3
 8002a1c:	0223      	lsls	r3, r4, #8
 8002a1e:	d400      	bmi.n	8002a22 <__aeabi_dmul+0x556>
 8002a20:	e6d6      	b.n	80027d0 <__aeabi_dmul+0x304>
 8002a22:	2301      	movs	r3, #1
 8002a24:	2400      	movs	r4, #0
 8002a26:	2200      	movs	r2, #0
 8002a28:	e5a6      	b.n	8002578 <__aeabi_dmul+0xac>
 8002a2a:	290f      	cmp	r1, #15
 8002a2c:	d1aa      	bne.n	8002984 <__aeabi_dmul+0x4b8>
 8002a2e:	2380      	movs	r3, #128	@ 0x80
 8002a30:	4652      	mov	r2, sl
 8002a32:	031b      	lsls	r3, r3, #12
 8002a34:	421a      	tst	r2, r3
 8002a36:	d0a9      	beq.n	800298c <__aeabi_dmul+0x4c0>
 8002a38:	421c      	tst	r4, r3
 8002a3a:	d1a7      	bne.n	800298c <__aeabi_dmul+0x4c0>
 8002a3c:	431c      	orrs	r4, r3
 8002a3e:	9b00      	ldr	r3, [sp, #0]
=======
 8002642:	d031      	beq.n	80026a8 <__aeabi_dmul+0x170>
 8002644:	9e02      	ldr	r6, [sp, #8]
 8002646:	2e02      	cmp	r6, #2
 8002648:	d100      	bne.n	800264c <__aeabi_dmul+0x114>
 800264a:	e235      	b.n	8002ab8 <__aeabi_dmul+0x580>
 800264c:	2e03      	cmp	r6, #3
 800264e:	d100      	bne.n	8002652 <__aeabi_dmul+0x11a>
 8002650:	e1d2      	b.n	80029f8 <__aeabi_dmul+0x4c0>
 8002652:	4654      	mov	r4, sl
 8002654:	4648      	mov	r0, r9
 8002656:	2e01      	cmp	r6, #1
 8002658:	d0c1      	beq.n	80025de <__aeabi_dmul+0xa6>
 800265a:	9a01      	ldr	r2, [sp, #4]
 800265c:	4b7d      	ldr	r3, [pc, #500]	@ (8002854 <__aeabi_dmul+0x31c>)
 800265e:	4694      	mov	ip, r2
 8002660:	4463      	add	r3, ip
 8002662:	2b00      	cmp	r3, #0
 8002664:	dc00      	bgt.n	8002668 <__aeabi_dmul+0x130>
 8002666:	e0c0      	b.n	80027ea <__aeabi_dmul+0x2b2>
 8002668:	0742      	lsls	r2, r0, #29
 800266a:	d009      	beq.n	8002680 <__aeabi_dmul+0x148>
 800266c:	220f      	movs	r2, #15
 800266e:	4002      	ands	r2, r0
 8002670:	2a04      	cmp	r2, #4
 8002672:	d005      	beq.n	8002680 <__aeabi_dmul+0x148>
 8002674:	1d02      	adds	r2, r0, #4
 8002676:	4282      	cmp	r2, r0
 8002678:	4180      	sbcs	r0, r0
 800267a:	4240      	negs	r0, r0
 800267c:	1824      	adds	r4, r4, r0
 800267e:	0010      	movs	r0, r2
 8002680:	01e2      	lsls	r2, r4, #7
 8002682:	d506      	bpl.n	8002692 <__aeabi_dmul+0x15a>
 8002684:	4b74      	ldr	r3, [pc, #464]	@ (8002858 <__aeabi_dmul+0x320>)
 8002686:	9a01      	ldr	r2, [sp, #4]
 8002688:	401c      	ands	r4, r3
 800268a:	2380      	movs	r3, #128	@ 0x80
 800268c:	4694      	mov	ip, r2
 800268e:	00db      	lsls	r3, r3, #3
 8002690:	4463      	add	r3, ip
 8002692:	4a72      	ldr	r2, [pc, #456]	@ (800285c <__aeabi_dmul+0x324>)
 8002694:	4293      	cmp	r3, r2
 8002696:	dc6b      	bgt.n	8002770 <__aeabi_dmul+0x238>
 8002698:	0762      	lsls	r2, r4, #29
 800269a:	08c0      	lsrs	r0, r0, #3
 800269c:	0264      	lsls	r4, r4, #9
 800269e:	055b      	lsls	r3, r3, #21
 80026a0:	4302      	orrs	r2, r0
 80026a2:	0b24      	lsrs	r4, r4, #12
 80026a4:	0d5b      	lsrs	r3, r3, #21
 80026a6:	e79d      	b.n	80025e4 <__aeabi_dmul+0xac>
 80026a8:	2190      	movs	r1, #144	@ 0x90
 80026aa:	0089      	lsls	r1, r1, #2
 80026ac:	420f      	tst	r7, r1
 80026ae:	d163      	bne.n	8002778 <__aeabi_dmul+0x240>
 80026b0:	2288      	movs	r2, #136	@ 0x88
 80026b2:	423a      	tst	r2, r7
 80026b4:	d100      	bne.n	80026b8 <__aeabi_dmul+0x180>
 80026b6:	e0d7      	b.n	8002868 <__aeabi_dmul+0x330>
 80026b8:	9b00      	ldr	r3, [sp, #0]
 80026ba:	46a2      	mov	sl, r4
 80026bc:	469b      	mov	fp, r3
 80026be:	4681      	mov	r9, r0
 80026c0:	9602      	str	r6, [sp, #8]
 80026c2:	e7bf      	b.n	8002644 <__aeabi_dmul+0x10c>
 80026c4:	0023      	movs	r3, r4
 80026c6:	4333      	orrs	r3, r6
 80026c8:	d100      	bne.n	80026cc <__aeabi_dmul+0x194>
 80026ca:	e07f      	b.n	80027cc <__aeabi_dmul+0x294>
 80026cc:	2c00      	cmp	r4, #0
 80026ce:	d100      	bne.n	80026d2 <__aeabi_dmul+0x19a>
 80026d0:	e1ad      	b.n	8002a2e <__aeabi_dmul+0x4f6>
 80026d2:	0020      	movs	r0, r4
 80026d4:	f000 ff10 	bl	80034f8 <__clzsi2>
 80026d8:	0002      	movs	r2, r0
 80026da:	0003      	movs	r3, r0
 80026dc:	3a0b      	subs	r2, #11
 80026de:	201d      	movs	r0, #29
 80026e0:	0019      	movs	r1, r3
 80026e2:	1a82      	subs	r2, r0, r2
 80026e4:	0030      	movs	r0, r6
 80026e6:	3908      	subs	r1, #8
 80026e8:	40d0      	lsrs	r0, r2
 80026ea:	408c      	lsls	r4, r1
 80026ec:	4304      	orrs	r4, r0
 80026ee:	0030      	movs	r0, r6
 80026f0:	4088      	lsls	r0, r1
 80026f2:	4a5b      	ldr	r2, [pc, #364]	@ (8002860 <__aeabi_dmul+0x328>)
 80026f4:	1aeb      	subs	r3, r5, r3
 80026f6:	4694      	mov	ip, r2
 80026f8:	4463      	add	r3, ip
 80026fa:	1c5a      	adds	r2, r3, #1
 80026fc:	9201      	str	r2, [sp, #4]
 80026fe:	4642      	mov	r2, r8
 8002700:	2600      	movs	r6, #0
 8002702:	2a0a      	cmp	r2, #10
 8002704:	dc00      	bgt.n	8002708 <__aeabi_dmul+0x1d0>
 8002706:	e75a      	b.n	80025be <__aeabi_dmul+0x86>
 8002708:	e79c      	b.n	8002644 <__aeabi_dmul+0x10c>
 800270a:	4653      	mov	r3, sl
 800270c:	4303      	orrs	r3, r0
 800270e:	4699      	mov	r9, r3
 8002710:	d054      	beq.n	80027bc <__aeabi_dmul+0x284>
 8002712:	4653      	mov	r3, sl
 8002714:	2b00      	cmp	r3, #0
 8002716:	d100      	bne.n	800271a <__aeabi_dmul+0x1e2>
 8002718:	e177      	b.n	8002a0a <__aeabi_dmul+0x4d2>
 800271a:	4650      	mov	r0, sl
 800271c:	f000 feec 	bl	80034f8 <__clzsi2>
 8002720:	230b      	movs	r3, #11
 8002722:	425b      	negs	r3, r3
 8002724:	469c      	mov	ip, r3
 8002726:	0002      	movs	r2, r0
 8002728:	4484      	add	ip, r0
 800272a:	0011      	movs	r1, r2
 800272c:	4650      	mov	r0, sl
 800272e:	3908      	subs	r1, #8
 8002730:	4088      	lsls	r0, r1
 8002732:	231d      	movs	r3, #29
 8002734:	4680      	mov	r8, r0
 8002736:	4660      	mov	r0, ip
 8002738:	1a1b      	subs	r3, r3, r0
 800273a:	0020      	movs	r0, r4
 800273c:	40d8      	lsrs	r0, r3
 800273e:	0003      	movs	r3, r0
 8002740:	4640      	mov	r0, r8
 8002742:	4303      	orrs	r3, r0
 8002744:	469a      	mov	sl, r3
 8002746:	0023      	movs	r3, r4
 8002748:	408b      	lsls	r3, r1
 800274a:	4699      	mov	r9, r3
 800274c:	2300      	movs	r3, #0
 800274e:	4d44      	ldr	r5, [pc, #272]	@ (8002860 <__aeabi_dmul+0x328>)
 8002750:	4698      	mov	r8, r3
 8002752:	1aad      	subs	r5, r5, r2
 8002754:	9302      	str	r3, [sp, #8]
 8002756:	e715      	b.n	8002584 <__aeabi_dmul+0x4c>
 8002758:	4652      	mov	r2, sl
 800275a:	4302      	orrs	r2, r0
 800275c:	4691      	mov	r9, r2
 800275e:	d126      	bne.n	80027ae <__aeabi_dmul+0x276>
 8002760:	2200      	movs	r2, #0
 8002762:	001d      	movs	r5, r3
 8002764:	2302      	movs	r3, #2
 8002766:	4692      	mov	sl, r2
 8002768:	3208      	adds	r2, #8
 800276a:	4690      	mov	r8, r2
 800276c:	9302      	str	r3, [sp, #8]
 800276e:	e709      	b.n	8002584 <__aeabi_dmul+0x4c>
 8002770:	2400      	movs	r4, #0
 8002772:	2200      	movs	r2, #0
 8002774:	4b35      	ldr	r3, [pc, #212]	@ (800284c <__aeabi_dmul+0x314>)
 8002776:	e735      	b.n	80025e4 <__aeabi_dmul+0xac>
 8002778:	2300      	movs	r3, #0
 800277a:	2480      	movs	r4, #128	@ 0x80
 800277c:	469b      	mov	fp, r3
 800277e:	0324      	lsls	r4, r4, #12
 8002780:	4b32      	ldr	r3, [pc, #200]	@ (800284c <__aeabi_dmul+0x314>)
 8002782:	e72f      	b.n	80025e4 <__aeabi_dmul+0xac>
 8002784:	2202      	movs	r2, #2
 8002786:	4641      	mov	r1, r8
 8002788:	4311      	orrs	r1, r2
 800278a:	2280      	movs	r2, #128	@ 0x80
 800278c:	0112      	lsls	r2, r2, #4
 800278e:	4694      	mov	ip, r2
 8002790:	002a      	movs	r2, r5
 8002792:	4462      	add	r2, ip
 8002794:	4688      	mov	r8, r1
 8002796:	9201      	str	r2, [sp, #4]
 8002798:	290a      	cmp	r1, #10
 800279a:	dd00      	ble.n	800279e <__aeabi_dmul+0x266>
 800279c:	e752      	b.n	8002644 <__aeabi_dmul+0x10c>
 800279e:	465a      	mov	r2, fp
 80027a0:	2000      	movs	r0, #0
 80027a2:	9900      	ldr	r1, [sp, #0]
 80027a4:	0004      	movs	r4, r0
 80027a6:	404a      	eors	r2, r1
 80027a8:	4693      	mov	fp, r2
 80027aa:	2602      	movs	r6, #2
 80027ac:	e70b      	b.n	80025c6 <__aeabi_dmul+0x8e>
 80027ae:	220c      	movs	r2, #12
 80027b0:	001d      	movs	r5, r3
 80027b2:	2303      	movs	r3, #3
 80027b4:	4681      	mov	r9, r0
 80027b6:	4690      	mov	r8, r2
 80027b8:	9302      	str	r3, [sp, #8]
 80027ba:	e6e3      	b.n	8002584 <__aeabi_dmul+0x4c>
 80027bc:	2300      	movs	r3, #0
 80027be:	469a      	mov	sl, r3
 80027c0:	3304      	adds	r3, #4
 80027c2:	4698      	mov	r8, r3
 80027c4:	3b03      	subs	r3, #3
 80027c6:	2500      	movs	r5, #0
 80027c8:	9302      	str	r3, [sp, #8]
 80027ca:	e6db      	b.n	8002584 <__aeabi_dmul+0x4c>
 80027cc:	4642      	mov	r2, r8
 80027ce:	3301      	adds	r3, #1
 80027d0:	431a      	orrs	r2, r3
 80027d2:	002b      	movs	r3, r5
 80027d4:	4690      	mov	r8, r2
 80027d6:	1c5a      	adds	r2, r3, #1
 80027d8:	9201      	str	r2, [sp, #4]
 80027da:	4642      	mov	r2, r8
 80027dc:	2400      	movs	r4, #0
 80027de:	2000      	movs	r0, #0
 80027e0:	2601      	movs	r6, #1
 80027e2:	2a0a      	cmp	r2, #10
 80027e4:	dc00      	bgt.n	80027e8 <__aeabi_dmul+0x2b0>
 80027e6:	e6ea      	b.n	80025be <__aeabi_dmul+0x86>
 80027e8:	e72c      	b.n	8002644 <__aeabi_dmul+0x10c>
 80027ea:	2201      	movs	r2, #1
 80027ec:	1ad2      	subs	r2, r2, r3
 80027ee:	2a38      	cmp	r2, #56	@ 0x38
 80027f0:	dd00      	ble.n	80027f4 <__aeabi_dmul+0x2bc>
 80027f2:	e6f4      	b.n	80025de <__aeabi_dmul+0xa6>
 80027f4:	2a1f      	cmp	r2, #31
 80027f6:	dc00      	bgt.n	80027fa <__aeabi_dmul+0x2c2>
 80027f8:	e12a      	b.n	8002a50 <__aeabi_dmul+0x518>
 80027fa:	211f      	movs	r1, #31
 80027fc:	4249      	negs	r1, r1
 80027fe:	1acb      	subs	r3, r1, r3
 8002800:	0021      	movs	r1, r4
 8002802:	40d9      	lsrs	r1, r3
 8002804:	000b      	movs	r3, r1
 8002806:	2a20      	cmp	r2, #32
 8002808:	d005      	beq.n	8002816 <__aeabi_dmul+0x2de>
 800280a:	4a16      	ldr	r2, [pc, #88]	@ (8002864 <__aeabi_dmul+0x32c>)
 800280c:	9d01      	ldr	r5, [sp, #4]
 800280e:	4694      	mov	ip, r2
 8002810:	4465      	add	r5, ip
 8002812:	40ac      	lsls	r4, r5
 8002814:	4320      	orrs	r0, r4
 8002816:	1e42      	subs	r2, r0, #1
 8002818:	4190      	sbcs	r0, r2
 800281a:	4318      	orrs	r0, r3
 800281c:	2307      	movs	r3, #7
 800281e:	0019      	movs	r1, r3
 8002820:	2400      	movs	r4, #0
 8002822:	4001      	ands	r1, r0
 8002824:	4203      	tst	r3, r0
 8002826:	d00c      	beq.n	8002842 <__aeabi_dmul+0x30a>
 8002828:	230f      	movs	r3, #15
 800282a:	4003      	ands	r3, r0
 800282c:	2b04      	cmp	r3, #4
 800282e:	d100      	bne.n	8002832 <__aeabi_dmul+0x2fa>
 8002830:	e140      	b.n	8002ab4 <__aeabi_dmul+0x57c>
 8002832:	1d03      	adds	r3, r0, #4
 8002834:	4283      	cmp	r3, r0
 8002836:	41a4      	sbcs	r4, r4
 8002838:	0018      	movs	r0, r3
 800283a:	4264      	negs	r4, r4
 800283c:	0761      	lsls	r1, r4, #29
 800283e:	0264      	lsls	r4, r4, #9
 8002840:	0b24      	lsrs	r4, r4, #12
 8002842:	08c2      	lsrs	r2, r0, #3
 8002844:	2300      	movs	r3, #0
 8002846:	430a      	orrs	r2, r1
 8002848:	e6cc      	b.n	80025e4 <__aeabi_dmul+0xac>
 800284a:	46c0      	nop			@ (mov r8, r8)
 800284c:	000007ff 	.word	0x000007ff
 8002850:	fffffc01 	.word	0xfffffc01
 8002854:	000003ff 	.word	0x000003ff
 8002858:	feffffff 	.word	0xfeffffff
 800285c:	000007fe 	.word	0x000007fe
 8002860:	fffffc0d 	.word	0xfffffc0d
 8002864:	0000043e 	.word	0x0000043e
 8002868:	4649      	mov	r1, r9
 800286a:	464a      	mov	r2, r9
 800286c:	0409      	lsls	r1, r1, #16
 800286e:	0c09      	lsrs	r1, r1, #16
 8002870:	000d      	movs	r5, r1
 8002872:	0c16      	lsrs	r6, r2, #16
 8002874:	0c02      	lsrs	r2, r0, #16
 8002876:	0400      	lsls	r0, r0, #16
 8002878:	0c00      	lsrs	r0, r0, #16
 800287a:	4345      	muls	r5, r0
 800287c:	46ac      	mov	ip, r5
 800287e:	0005      	movs	r5, r0
 8002880:	4375      	muls	r5, r6
 8002882:	46a8      	mov	r8, r5
 8002884:	0015      	movs	r5, r2
 8002886:	000f      	movs	r7, r1
 8002888:	4375      	muls	r5, r6
 800288a:	9200      	str	r2, [sp, #0]
 800288c:	9502      	str	r5, [sp, #8]
 800288e:	002a      	movs	r2, r5
 8002890:	9d00      	ldr	r5, [sp, #0]
 8002892:	436f      	muls	r7, r5
 8002894:	4665      	mov	r5, ip
 8002896:	0c2d      	lsrs	r5, r5, #16
 8002898:	46a9      	mov	r9, r5
 800289a:	4447      	add	r7, r8
 800289c:	444f      	add	r7, r9
 800289e:	45b8      	cmp	r8, r7
 80028a0:	d905      	bls.n	80028ae <__aeabi_dmul+0x376>
 80028a2:	0015      	movs	r5, r2
 80028a4:	2280      	movs	r2, #128	@ 0x80
 80028a6:	0252      	lsls	r2, r2, #9
 80028a8:	4690      	mov	r8, r2
 80028aa:	4445      	add	r5, r8
 80028ac:	9502      	str	r5, [sp, #8]
 80028ae:	0c3d      	lsrs	r5, r7, #16
 80028b0:	9503      	str	r5, [sp, #12]
 80028b2:	4665      	mov	r5, ip
 80028b4:	042d      	lsls	r5, r5, #16
 80028b6:	043f      	lsls	r7, r7, #16
 80028b8:	0c2d      	lsrs	r5, r5, #16
 80028ba:	46ac      	mov	ip, r5
 80028bc:	003d      	movs	r5, r7
 80028be:	4465      	add	r5, ip
 80028c0:	9504      	str	r5, [sp, #16]
 80028c2:	0c25      	lsrs	r5, r4, #16
 80028c4:	0424      	lsls	r4, r4, #16
 80028c6:	0c24      	lsrs	r4, r4, #16
 80028c8:	46ac      	mov	ip, r5
 80028ca:	0025      	movs	r5, r4
 80028cc:	4375      	muls	r5, r6
 80028ce:	46a8      	mov	r8, r5
 80028d0:	4665      	mov	r5, ip
 80028d2:	000f      	movs	r7, r1
 80028d4:	4369      	muls	r1, r5
 80028d6:	4441      	add	r1, r8
 80028d8:	4689      	mov	r9, r1
 80028da:	4367      	muls	r7, r4
 80028dc:	0c39      	lsrs	r1, r7, #16
 80028de:	4449      	add	r1, r9
 80028e0:	436e      	muls	r6, r5
 80028e2:	4588      	cmp	r8, r1
 80028e4:	d903      	bls.n	80028ee <__aeabi_dmul+0x3b6>
 80028e6:	2280      	movs	r2, #128	@ 0x80
 80028e8:	0252      	lsls	r2, r2, #9
 80028ea:	4690      	mov	r8, r2
 80028ec:	4446      	add	r6, r8
 80028ee:	0c0d      	lsrs	r5, r1, #16
 80028f0:	46a8      	mov	r8, r5
 80028f2:	0035      	movs	r5, r6
 80028f4:	4445      	add	r5, r8
 80028f6:	9505      	str	r5, [sp, #20]
 80028f8:	9d03      	ldr	r5, [sp, #12]
 80028fa:	043f      	lsls	r7, r7, #16
 80028fc:	46a8      	mov	r8, r5
 80028fe:	0c3f      	lsrs	r7, r7, #16
 8002900:	0409      	lsls	r1, r1, #16
 8002902:	19c9      	adds	r1, r1, r7
 8002904:	4488      	add	r8, r1
 8002906:	4645      	mov	r5, r8
 8002908:	9503      	str	r5, [sp, #12]
 800290a:	4655      	mov	r5, sl
 800290c:	042e      	lsls	r6, r5, #16
 800290e:	0c36      	lsrs	r6, r6, #16
 8002910:	0c2f      	lsrs	r7, r5, #16
 8002912:	0035      	movs	r5, r6
 8002914:	4345      	muls	r5, r0
 8002916:	4378      	muls	r0, r7
 8002918:	4681      	mov	r9, r0
 800291a:	0038      	movs	r0, r7
 800291c:	46a8      	mov	r8, r5
 800291e:	0c2d      	lsrs	r5, r5, #16
 8002920:	46aa      	mov	sl, r5
 8002922:	9a00      	ldr	r2, [sp, #0]
 8002924:	4350      	muls	r0, r2
 8002926:	4372      	muls	r2, r6
 8002928:	444a      	add	r2, r9
 800292a:	4452      	add	r2, sl
 800292c:	4591      	cmp	r9, r2
 800292e:	d903      	bls.n	8002938 <__aeabi_dmul+0x400>
 8002930:	2580      	movs	r5, #128	@ 0x80
 8002932:	026d      	lsls	r5, r5, #9
 8002934:	46a9      	mov	r9, r5
 8002936:	4448      	add	r0, r9
 8002938:	0c15      	lsrs	r5, r2, #16
 800293a:	46a9      	mov	r9, r5
 800293c:	4645      	mov	r5, r8
 800293e:	042d      	lsls	r5, r5, #16
 8002940:	0c2d      	lsrs	r5, r5, #16
 8002942:	46a8      	mov	r8, r5
 8002944:	4665      	mov	r5, ip
 8002946:	437d      	muls	r5, r7
 8002948:	0412      	lsls	r2, r2, #16
 800294a:	4448      	add	r0, r9
 800294c:	4490      	add	r8, r2
 800294e:	46a9      	mov	r9, r5
 8002950:	0032      	movs	r2, r6
 8002952:	4665      	mov	r5, ip
 8002954:	4362      	muls	r2, r4
 8002956:	436e      	muls	r6, r5
 8002958:	437c      	muls	r4, r7
 800295a:	0c17      	lsrs	r7, r2, #16
 800295c:	1936      	adds	r6, r6, r4
 800295e:	19bf      	adds	r7, r7, r6
 8002960:	42bc      	cmp	r4, r7
 8002962:	d903      	bls.n	800296c <__aeabi_dmul+0x434>
 8002964:	2480      	movs	r4, #128	@ 0x80
 8002966:	0264      	lsls	r4, r4, #9
 8002968:	46a4      	mov	ip, r4
 800296a:	44e1      	add	r9, ip
 800296c:	9c02      	ldr	r4, [sp, #8]
 800296e:	9e03      	ldr	r6, [sp, #12]
 8002970:	46a4      	mov	ip, r4
 8002972:	9d05      	ldr	r5, [sp, #20]
 8002974:	4466      	add	r6, ip
 8002976:	428e      	cmp	r6, r1
 8002978:	4189      	sbcs	r1, r1
 800297a:	46ac      	mov	ip, r5
 800297c:	0412      	lsls	r2, r2, #16
 800297e:	043c      	lsls	r4, r7, #16
 8002980:	0c12      	lsrs	r2, r2, #16
 8002982:	18a2      	adds	r2, r4, r2
 8002984:	4462      	add	r2, ip
 8002986:	4249      	negs	r1, r1
 8002988:	1854      	adds	r4, r2, r1
 800298a:	4446      	add	r6, r8
 800298c:	46a4      	mov	ip, r4
 800298e:	4546      	cmp	r6, r8
 8002990:	41a4      	sbcs	r4, r4
 8002992:	4682      	mov	sl, r0
 8002994:	4264      	negs	r4, r4
 8002996:	46a0      	mov	r8, r4
 8002998:	42aa      	cmp	r2, r5
 800299a:	4192      	sbcs	r2, r2
 800299c:	458c      	cmp	ip, r1
 800299e:	4189      	sbcs	r1, r1
 80029a0:	44e2      	add	sl, ip
 80029a2:	44d0      	add	r8, sl
 80029a4:	4249      	negs	r1, r1
 80029a6:	4252      	negs	r2, r2
 80029a8:	430a      	orrs	r2, r1
 80029aa:	45a0      	cmp	r8, r4
 80029ac:	41a4      	sbcs	r4, r4
 80029ae:	4582      	cmp	sl, r0
 80029b0:	4189      	sbcs	r1, r1
 80029b2:	4264      	negs	r4, r4
 80029b4:	4249      	negs	r1, r1
 80029b6:	430c      	orrs	r4, r1
 80029b8:	4641      	mov	r1, r8
 80029ba:	0c3f      	lsrs	r7, r7, #16
 80029bc:	19d2      	adds	r2, r2, r7
 80029be:	1912      	adds	r2, r2, r4
 80029c0:	0dcc      	lsrs	r4, r1, #23
 80029c2:	9904      	ldr	r1, [sp, #16]
 80029c4:	0270      	lsls	r0, r6, #9
 80029c6:	4308      	orrs	r0, r1
 80029c8:	1e41      	subs	r1, r0, #1
 80029ca:	4188      	sbcs	r0, r1
 80029cc:	4641      	mov	r1, r8
 80029ce:	444a      	add	r2, r9
 80029d0:	0df6      	lsrs	r6, r6, #23
 80029d2:	0252      	lsls	r2, r2, #9
 80029d4:	4330      	orrs	r0, r6
 80029d6:	0249      	lsls	r1, r1, #9
 80029d8:	4314      	orrs	r4, r2
 80029da:	4308      	orrs	r0, r1
 80029dc:	01d2      	lsls	r2, r2, #7
 80029de:	d535      	bpl.n	8002a4c <__aeabi_dmul+0x514>
 80029e0:	2201      	movs	r2, #1
 80029e2:	0843      	lsrs	r3, r0, #1
 80029e4:	4002      	ands	r2, r0
 80029e6:	4313      	orrs	r3, r2
 80029e8:	07e0      	lsls	r0, r4, #31
 80029ea:	4318      	orrs	r0, r3
 80029ec:	0864      	lsrs	r4, r4, #1
 80029ee:	e634      	b.n	800265a <__aeabi_dmul+0x122>
 80029f0:	9b00      	ldr	r3, [sp, #0]
 80029f2:	46a2      	mov	sl, r4
 80029f4:	469b      	mov	fp, r3
 80029f6:	4681      	mov	r9, r0
 80029f8:	2480      	movs	r4, #128	@ 0x80
 80029fa:	4653      	mov	r3, sl
 80029fc:	0324      	lsls	r4, r4, #12
 80029fe:	431c      	orrs	r4, r3
 8002a00:	0324      	lsls	r4, r4, #12
 8002a02:	464a      	mov	r2, r9
 8002a04:	4b2e      	ldr	r3, [pc, #184]	@ (8002ac0 <__aeabi_dmul+0x588>)
 8002a06:	0b24      	lsrs	r4, r4, #12
 8002a08:	e5ec      	b.n	80025e4 <__aeabi_dmul+0xac>
 8002a0a:	f000 fd75 	bl	80034f8 <__clzsi2>
 8002a0e:	2315      	movs	r3, #21
 8002a10:	469c      	mov	ip, r3
 8002a12:	4484      	add	ip, r0
 8002a14:	0002      	movs	r2, r0
 8002a16:	4663      	mov	r3, ip
 8002a18:	3220      	adds	r2, #32
 8002a1a:	2b1c      	cmp	r3, #28
 8002a1c:	dc00      	bgt.n	8002a20 <__aeabi_dmul+0x4e8>
 8002a1e:	e684      	b.n	800272a <__aeabi_dmul+0x1f2>
 8002a20:	2300      	movs	r3, #0
 8002a22:	4699      	mov	r9, r3
 8002a24:	0023      	movs	r3, r4
 8002a26:	3808      	subs	r0, #8
 8002a28:	4083      	lsls	r3, r0
 8002a2a:	469a      	mov	sl, r3
 8002a2c:	e68e      	b.n	800274c <__aeabi_dmul+0x214>
 8002a2e:	f000 fd63 	bl	80034f8 <__clzsi2>
 8002a32:	0002      	movs	r2, r0
 8002a34:	0003      	movs	r3, r0
 8002a36:	3215      	adds	r2, #21
 8002a38:	3320      	adds	r3, #32
 8002a3a:	2a1c      	cmp	r2, #28
 8002a3c:	dc00      	bgt.n	8002a40 <__aeabi_dmul+0x508>
 8002a3e:	e64e      	b.n	80026de <__aeabi_dmul+0x1a6>
>>>>>>> main
 8002a40:	0002      	movs	r2, r0
 8002a42:	0034      	movs	r4, r6
 8002a44:	3a08      	subs	r2, #8
 8002a46:	2000      	movs	r0, #0
 8002a48:	4094      	lsls	r4, r2
 8002a4a:	e652      	b.n	80026f2 <__aeabi_dmul+0x1ba>
 8002a4c:	9301      	str	r3, [sp, #4]
 8002a4e:	e604      	b.n	800265a <__aeabi_dmul+0x122>
 8002a50:	4b1c      	ldr	r3, [pc, #112]	@ (8002ac4 <__aeabi_dmul+0x58c>)
 8002a52:	0021      	movs	r1, r4
 8002a54:	469c      	mov	ip, r3
 8002a56:	0003      	movs	r3, r0
 8002a58:	9d01      	ldr	r5, [sp, #4]
 8002a5a:	40d3      	lsrs	r3, r2
 8002a5c:	4465      	add	r5, ip
 8002a5e:	40a9      	lsls	r1, r5
 8002a60:	4319      	orrs	r1, r3
 8002a62:	0003      	movs	r3, r0
 8002a64:	40ab      	lsls	r3, r5
 8002a66:	1e58      	subs	r0, r3, #1
 8002a68:	4183      	sbcs	r3, r0
 8002a6a:	4319      	orrs	r1, r3
 8002a6c:	0008      	movs	r0, r1
 8002a6e:	40d4      	lsrs	r4, r2
 8002a70:	074b      	lsls	r3, r1, #29
 8002a72:	d009      	beq.n	8002a88 <__aeabi_dmul+0x550>
 8002a74:	230f      	movs	r3, #15
 8002a76:	400b      	ands	r3, r1
 8002a78:	2b04      	cmp	r3, #4
 8002a7a:	d005      	beq.n	8002a88 <__aeabi_dmul+0x550>
 8002a7c:	1d0b      	adds	r3, r1, #4
 8002a7e:	428b      	cmp	r3, r1
 8002a80:	4180      	sbcs	r0, r0
 8002a82:	4240      	negs	r0, r0
 8002a84:	1824      	adds	r4, r4, r0
 8002a86:	0018      	movs	r0, r3
 8002a88:	0223      	lsls	r3, r4, #8
 8002a8a:	d400      	bmi.n	8002a8e <__aeabi_dmul+0x556>
 8002a8c:	e6d6      	b.n	800283c <__aeabi_dmul+0x304>
 8002a8e:	2301      	movs	r3, #1
 8002a90:	2400      	movs	r4, #0
 8002a92:	2200      	movs	r2, #0
 8002a94:	e5a6      	b.n	80025e4 <__aeabi_dmul+0xac>
 8002a96:	290f      	cmp	r1, #15
 8002a98:	d1aa      	bne.n	80029f0 <__aeabi_dmul+0x4b8>
 8002a9a:	2380      	movs	r3, #128	@ 0x80
 8002a9c:	4652      	mov	r2, sl
 8002a9e:	031b      	lsls	r3, r3, #12
 8002aa0:	421a      	tst	r2, r3
 8002aa2:	d0a9      	beq.n	80029f8 <__aeabi_dmul+0x4c0>
 8002aa4:	421c      	tst	r4, r3
 8002aa6:	d1a7      	bne.n	80029f8 <__aeabi_dmul+0x4c0>
 8002aa8:	431c      	orrs	r4, r3
 8002aaa:	9b00      	ldr	r3, [sp, #0]
 8002aac:	0002      	movs	r2, r0
 8002aae:	469b      	mov	fp, r3
 8002ab0:	4b03      	ldr	r3, [pc, #12]	@ (8002ac0 <__aeabi_dmul+0x588>)
 8002ab2:	e597      	b.n	80025e4 <__aeabi_dmul+0xac>
 8002ab4:	2400      	movs	r4, #0
 8002ab6:	e6c1      	b.n	800283c <__aeabi_dmul+0x304>
 8002ab8:	2400      	movs	r4, #0
 8002aba:	4b01      	ldr	r3, [pc, #4]	@ (8002ac0 <__aeabi_dmul+0x588>)
 8002abc:	0022      	movs	r2, r4
 8002abe:	e591      	b.n	80025e4 <__aeabi_dmul+0xac>
 8002ac0:	000007ff 	.word	0x000007ff
 8002ac4:	0000041e 	.word	0x0000041e

<<<<<<< HEAD
08002a5c <__aeabi_dsub>:
 8002a5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a5e:	464e      	mov	r6, r9
 8002a60:	4645      	mov	r5, r8
 8002a62:	46de      	mov	lr, fp
 8002a64:	4657      	mov	r7, sl
 8002a66:	b5e0      	push	{r5, r6, r7, lr}
 8002a68:	b085      	sub	sp, #20
 8002a6a:	9000      	str	r0, [sp, #0]
 8002a6c:	9101      	str	r1, [sp, #4]
 8002a6e:	030c      	lsls	r4, r1, #12
 8002a70:	004f      	lsls	r7, r1, #1
 8002a72:	0fce      	lsrs	r6, r1, #31
 8002a74:	0a61      	lsrs	r1, r4, #9
 8002a76:	9c00      	ldr	r4, [sp, #0]
 8002a78:	46b0      	mov	r8, r6
 8002a7a:	0f64      	lsrs	r4, r4, #29
 8002a7c:	430c      	orrs	r4, r1
 8002a7e:	9900      	ldr	r1, [sp, #0]
 8002a80:	0d7f      	lsrs	r7, r7, #21
 8002a82:	00c8      	lsls	r0, r1, #3
 8002a84:	0011      	movs	r1, r2
 8002a86:	001a      	movs	r2, r3
 8002a88:	031b      	lsls	r3, r3, #12
 8002a8a:	469c      	mov	ip, r3
 8002a8c:	9100      	str	r1, [sp, #0]
 8002a8e:	9201      	str	r2, [sp, #4]
 8002a90:	0051      	lsls	r1, r2, #1
 8002a92:	0d4b      	lsrs	r3, r1, #21
 8002a94:	4699      	mov	r9, r3
 8002a96:	9b01      	ldr	r3, [sp, #4]
 8002a98:	9d00      	ldr	r5, [sp, #0]
 8002a9a:	0fd9      	lsrs	r1, r3, #31
 8002a9c:	4663      	mov	r3, ip
 8002a9e:	0f6a      	lsrs	r2, r5, #29
 8002aa0:	0a5b      	lsrs	r3, r3, #9
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	00ea      	lsls	r2, r5, #3
 8002aa6:	4694      	mov	ip, r2
 8002aa8:	4693      	mov	fp, r2
 8002aaa:	4ac1      	ldr	r2, [pc, #772]	@ (8002db0 <__aeabi_dsub+0x354>)
 8002aac:	9003      	str	r0, [sp, #12]
 8002aae:	9302      	str	r3, [sp, #8]
 8002ab0:	4591      	cmp	r9, r2
 8002ab2:	d100      	bne.n	8002ab6 <__aeabi_dsub+0x5a>
 8002ab4:	e0cd      	b.n	8002c52 <__aeabi_dsub+0x1f6>
 8002ab6:	2501      	movs	r5, #1
 8002ab8:	4069      	eors	r1, r5
 8002aba:	464d      	mov	r5, r9
 8002abc:	1b7d      	subs	r5, r7, r5
 8002abe:	46aa      	mov	sl, r5
 8002ac0:	428e      	cmp	r6, r1
 8002ac2:	d100      	bne.n	8002ac6 <__aeabi_dsub+0x6a>
 8002ac4:	e080      	b.n	8002bc8 <__aeabi_dsub+0x16c>
 8002ac6:	2d00      	cmp	r5, #0
 8002ac8:	dc00      	bgt.n	8002acc <__aeabi_dsub+0x70>
 8002aca:	e335      	b.n	8003138 <__aeabi_dsub+0x6dc>
 8002acc:	4649      	mov	r1, r9
 8002ace:	2900      	cmp	r1, #0
 8002ad0:	d100      	bne.n	8002ad4 <__aeabi_dsub+0x78>
 8002ad2:	e0df      	b.n	8002c94 <__aeabi_dsub+0x238>
 8002ad4:	4297      	cmp	r7, r2
 8002ad6:	d100      	bne.n	8002ada <__aeabi_dsub+0x7e>
 8002ad8:	e194      	b.n	8002e04 <__aeabi_dsub+0x3a8>
 8002ada:	4652      	mov	r2, sl
 8002adc:	2501      	movs	r5, #1
 8002ade:	2a38      	cmp	r2, #56	@ 0x38
 8002ae0:	dc19      	bgt.n	8002b16 <__aeabi_dsub+0xba>
 8002ae2:	2280      	movs	r2, #128	@ 0x80
 8002ae4:	9b02      	ldr	r3, [sp, #8]
 8002ae6:	0412      	lsls	r2, r2, #16
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	9302      	str	r3, [sp, #8]
 8002aec:	4652      	mov	r2, sl
 8002aee:	2a1f      	cmp	r2, #31
 8002af0:	dd00      	ble.n	8002af4 <__aeabi_dsub+0x98>
 8002af2:	e1e3      	b.n	8002ebc <__aeabi_dsub+0x460>
 8002af4:	4653      	mov	r3, sl
 8002af6:	2220      	movs	r2, #32
 8002af8:	4661      	mov	r1, ip
 8002afa:	9d02      	ldr	r5, [sp, #8]
 8002afc:	1ad2      	subs	r2, r2, r3
 8002afe:	4095      	lsls	r5, r2
 8002b00:	40d9      	lsrs	r1, r3
 8002b02:	430d      	orrs	r5, r1
 8002b04:	4661      	mov	r1, ip
 8002b06:	4091      	lsls	r1, r2
 8002b08:	000a      	movs	r2, r1
 8002b0a:	1e51      	subs	r1, r2, #1
 8002b0c:	418a      	sbcs	r2, r1
 8002b0e:	4315      	orrs	r5, r2
 8002b10:	9a02      	ldr	r2, [sp, #8]
 8002b12:	40da      	lsrs	r2, r3
 8002b14:	1aa4      	subs	r4, r4, r2
 8002b16:	1b45      	subs	r5, r0, r5
 8002b18:	42a8      	cmp	r0, r5
 8002b1a:	4180      	sbcs	r0, r0
 8002b1c:	4240      	negs	r0, r0
 8002b1e:	1a24      	subs	r4, r4, r0
 8002b20:	0223      	lsls	r3, r4, #8
 8002b22:	d400      	bmi.n	8002b26 <__aeabi_dsub+0xca>
 8002b24:	e13d      	b.n	8002da2 <__aeabi_dsub+0x346>
 8002b26:	0264      	lsls	r4, r4, #9
 8002b28:	0a64      	lsrs	r4, r4, #9
 8002b2a:	2c00      	cmp	r4, #0
 8002b2c:	d100      	bne.n	8002b30 <__aeabi_dsub+0xd4>
 8002b2e:	e147      	b.n	8002dc0 <__aeabi_dsub+0x364>
 8002b30:	0020      	movs	r0, r4
 8002b32:	f000 fc63 	bl	80033fc <__clzsi2>
 8002b36:	0003      	movs	r3, r0
 8002b38:	3b08      	subs	r3, #8
 8002b3a:	2120      	movs	r1, #32
 8002b3c:	0028      	movs	r0, r5
 8002b3e:	1aca      	subs	r2, r1, r3
 8002b40:	40d0      	lsrs	r0, r2
 8002b42:	409c      	lsls	r4, r3
 8002b44:	0002      	movs	r2, r0
 8002b46:	409d      	lsls	r5, r3
 8002b48:	4322      	orrs	r2, r4
 8002b4a:	429f      	cmp	r7, r3
 8002b4c:	dd00      	ble.n	8002b50 <__aeabi_dsub+0xf4>
 8002b4e:	e177      	b.n	8002e40 <__aeabi_dsub+0x3e4>
 8002b50:	1bd8      	subs	r0, r3, r7
 8002b52:	3001      	adds	r0, #1
 8002b54:	1a09      	subs	r1, r1, r0
 8002b56:	002c      	movs	r4, r5
 8002b58:	408d      	lsls	r5, r1
 8002b5a:	40c4      	lsrs	r4, r0
 8002b5c:	1e6b      	subs	r3, r5, #1
 8002b5e:	419d      	sbcs	r5, r3
 8002b60:	0013      	movs	r3, r2
 8002b62:	40c2      	lsrs	r2, r0
 8002b64:	408b      	lsls	r3, r1
 8002b66:	4325      	orrs	r5, r4
 8002b68:	2700      	movs	r7, #0
 8002b6a:	0014      	movs	r4, r2
 8002b6c:	431d      	orrs	r5, r3
 8002b6e:	076b      	lsls	r3, r5, #29
 8002b70:	d009      	beq.n	8002b86 <__aeabi_dsub+0x12a>
 8002b72:	230f      	movs	r3, #15
 8002b74:	402b      	ands	r3, r5
 8002b76:	2b04      	cmp	r3, #4
 8002b78:	d005      	beq.n	8002b86 <__aeabi_dsub+0x12a>
 8002b7a:	1d2b      	adds	r3, r5, #4
 8002b7c:	42ab      	cmp	r3, r5
 8002b7e:	41ad      	sbcs	r5, r5
 8002b80:	426d      	negs	r5, r5
 8002b82:	1964      	adds	r4, r4, r5
 8002b84:	001d      	movs	r5, r3
 8002b86:	0223      	lsls	r3, r4, #8
 8002b88:	d400      	bmi.n	8002b8c <__aeabi_dsub+0x130>
 8002b8a:	e140      	b.n	8002e0e <__aeabi_dsub+0x3b2>
 8002b8c:	4a88      	ldr	r2, [pc, #544]	@ (8002db0 <__aeabi_dsub+0x354>)
 8002b8e:	3701      	adds	r7, #1
 8002b90:	4297      	cmp	r7, r2
 8002b92:	d100      	bne.n	8002b96 <__aeabi_dsub+0x13a>
 8002b94:	e101      	b.n	8002d9a <__aeabi_dsub+0x33e>
 8002b96:	2601      	movs	r6, #1
 8002b98:	4643      	mov	r3, r8
 8002b9a:	4986      	ldr	r1, [pc, #536]	@ (8002db4 <__aeabi_dsub+0x358>)
 8002b9c:	08ed      	lsrs	r5, r5, #3
 8002b9e:	4021      	ands	r1, r4
 8002ba0:	074a      	lsls	r2, r1, #29
 8002ba2:	432a      	orrs	r2, r5
 8002ba4:	057c      	lsls	r4, r7, #21
 8002ba6:	024d      	lsls	r5, r1, #9
 8002ba8:	0b2d      	lsrs	r5, r5, #12
 8002baa:	0d64      	lsrs	r4, r4, #21
 8002bac:	401e      	ands	r6, r3
 8002bae:	0524      	lsls	r4, r4, #20
 8002bb0:	432c      	orrs	r4, r5
 8002bb2:	07f6      	lsls	r6, r6, #31
 8002bb4:	4334      	orrs	r4, r6
 8002bb6:	0010      	movs	r0, r2
 8002bb8:	0021      	movs	r1, r4
 8002bba:	b005      	add	sp, #20
 8002bbc:	bcf0      	pop	{r4, r5, r6, r7}
 8002bbe:	46bb      	mov	fp, r7
 8002bc0:	46b2      	mov	sl, r6
 8002bc2:	46a9      	mov	r9, r5
 8002bc4:	46a0      	mov	r8, r4
 8002bc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002bc8:	2d00      	cmp	r5, #0
 8002bca:	dc00      	bgt.n	8002bce <__aeabi_dsub+0x172>
 8002bcc:	e2d0      	b.n	8003170 <__aeabi_dsub+0x714>
 8002bce:	4649      	mov	r1, r9
 8002bd0:	2900      	cmp	r1, #0
 8002bd2:	d000      	beq.n	8002bd6 <__aeabi_dsub+0x17a>
 8002bd4:	e0d4      	b.n	8002d80 <__aeabi_dsub+0x324>
 8002bd6:	4661      	mov	r1, ip
 8002bd8:	9b02      	ldr	r3, [sp, #8]
 8002bda:	4319      	orrs	r1, r3
 8002bdc:	d100      	bne.n	8002be0 <__aeabi_dsub+0x184>
 8002bde:	e12b      	b.n	8002e38 <__aeabi_dsub+0x3dc>
 8002be0:	1e69      	subs	r1, r5, #1
 8002be2:	2d01      	cmp	r5, #1
 8002be4:	d100      	bne.n	8002be8 <__aeabi_dsub+0x18c>
 8002be6:	e1d9      	b.n	8002f9c <__aeabi_dsub+0x540>
 8002be8:	4295      	cmp	r5, r2
 8002bea:	d100      	bne.n	8002bee <__aeabi_dsub+0x192>
 8002bec:	e10a      	b.n	8002e04 <__aeabi_dsub+0x3a8>
 8002bee:	2501      	movs	r5, #1
 8002bf0:	2938      	cmp	r1, #56	@ 0x38
 8002bf2:	dc17      	bgt.n	8002c24 <__aeabi_dsub+0x1c8>
 8002bf4:	468a      	mov	sl, r1
 8002bf6:	4653      	mov	r3, sl
 8002bf8:	2b1f      	cmp	r3, #31
 8002bfa:	dd00      	ble.n	8002bfe <__aeabi_dsub+0x1a2>
 8002bfc:	e1e7      	b.n	8002fce <__aeabi_dsub+0x572>
 8002bfe:	2220      	movs	r2, #32
 8002c00:	1ad2      	subs	r2, r2, r3
 8002c02:	9b02      	ldr	r3, [sp, #8]
 8002c04:	4661      	mov	r1, ip
 8002c06:	4093      	lsls	r3, r2
 8002c08:	001d      	movs	r5, r3
 8002c0a:	4653      	mov	r3, sl
 8002c0c:	40d9      	lsrs	r1, r3
 8002c0e:	4663      	mov	r3, ip
 8002c10:	4093      	lsls	r3, r2
 8002c12:	001a      	movs	r2, r3
 8002c14:	430d      	orrs	r5, r1
 8002c16:	1e51      	subs	r1, r2, #1
 8002c18:	418a      	sbcs	r2, r1
 8002c1a:	4653      	mov	r3, sl
 8002c1c:	4315      	orrs	r5, r2
 8002c1e:	9a02      	ldr	r2, [sp, #8]
 8002c20:	40da      	lsrs	r2, r3
 8002c22:	18a4      	adds	r4, r4, r2
 8002c24:	182d      	adds	r5, r5, r0
 8002c26:	4285      	cmp	r5, r0
 8002c28:	4180      	sbcs	r0, r0
 8002c2a:	4240      	negs	r0, r0
 8002c2c:	1824      	adds	r4, r4, r0
 8002c2e:	0223      	lsls	r3, r4, #8
 8002c30:	d400      	bmi.n	8002c34 <__aeabi_dsub+0x1d8>
 8002c32:	e0b6      	b.n	8002da2 <__aeabi_dsub+0x346>
 8002c34:	4b5e      	ldr	r3, [pc, #376]	@ (8002db0 <__aeabi_dsub+0x354>)
 8002c36:	3701      	adds	r7, #1
 8002c38:	429f      	cmp	r7, r3
 8002c3a:	d100      	bne.n	8002c3e <__aeabi_dsub+0x1e2>
 8002c3c:	e0ad      	b.n	8002d9a <__aeabi_dsub+0x33e>
 8002c3e:	2101      	movs	r1, #1
 8002c40:	4b5c      	ldr	r3, [pc, #368]	@ (8002db4 <__aeabi_dsub+0x358>)
 8002c42:	086a      	lsrs	r2, r5, #1
 8002c44:	401c      	ands	r4, r3
 8002c46:	4029      	ands	r1, r5
 8002c48:	430a      	orrs	r2, r1
 8002c4a:	07e5      	lsls	r5, r4, #31
 8002c4c:	4315      	orrs	r5, r2
 8002c4e:	0864      	lsrs	r4, r4, #1
 8002c50:	e78d      	b.n	8002b6e <__aeabi_dsub+0x112>
 8002c52:	4a59      	ldr	r2, [pc, #356]	@ (8002db8 <__aeabi_dsub+0x35c>)
 8002c54:	9b02      	ldr	r3, [sp, #8]
 8002c56:	4692      	mov	sl, r2
 8002c58:	4662      	mov	r2, ip
 8002c5a:	44ba      	add	sl, r7
 8002c5c:	431a      	orrs	r2, r3
 8002c5e:	d02c      	beq.n	8002cba <__aeabi_dsub+0x25e>
 8002c60:	428e      	cmp	r6, r1
 8002c62:	d02e      	beq.n	8002cc2 <__aeabi_dsub+0x266>
 8002c64:	4652      	mov	r2, sl
 8002c66:	2a00      	cmp	r2, #0
 8002c68:	d060      	beq.n	8002d2c <__aeabi_dsub+0x2d0>
 8002c6a:	2f00      	cmp	r7, #0
 8002c6c:	d100      	bne.n	8002c70 <__aeabi_dsub+0x214>
 8002c6e:	e0db      	b.n	8002e28 <__aeabi_dsub+0x3cc>
 8002c70:	4663      	mov	r3, ip
 8002c72:	000e      	movs	r6, r1
 8002c74:	9c02      	ldr	r4, [sp, #8]
 8002c76:	08d8      	lsrs	r0, r3, #3
 8002c78:	0762      	lsls	r2, r4, #29
 8002c7a:	4302      	orrs	r2, r0
 8002c7c:	08e4      	lsrs	r4, r4, #3
 8002c7e:	0013      	movs	r3, r2
 8002c80:	4323      	orrs	r3, r4
 8002c82:	d100      	bne.n	8002c86 <__aeabi_dsub+0x22a>
 8002c84:	e254      	b.n	8003130 <__aeabi_dsub+0x6d4>
 8002c86:	2580      	movs	r5, #128	@ 0x80
 8002c88:	032d      	lsls	r5, r5, #12
 8002c8a:	4325      	orrs	r5, r4
 8002c8c:	032d      	lsls	r5, r5, #12
 8002c8e:	4c48      	ldr	r4, [pc, #288]	@ (8002db0 <__aeabi_dsub+0x354>)
 8002c90:	0b2d      	lsrs	r5, r5, #12
 8002c92:	e78c      	b.n	8002bae <__aeabi_dsub+0x152>
 8002c94:	4661      	mov	r1, ip
 8002c96:	9b02      	ldr	r3, [sp, #8]
 8002c98:	4319      	orrs	r1, r3
 8002c9a:	d100      	bne.n	8002c9e <__aeabi_dsub+0x242>
 8002c9c:	e0cc      	b.n	8002e38 <__aeabi_dsub+0x3dc>
 8002c9e:	0029      	movs	r1, r5
 8002ca0:	3901      	subs	r1, #1
 8002ca2:	2d01      	cmp	r5, #1
 8002ca4:	d100      	bne.n	8002ca8 <__aeabi_dsub+0x24c>
 8002ca6:	e188      	b.n	8002fba <__aeabi_dsub+0x55e>
 8002ca8:	4295      	cmp	r5, r2
 8002caa:	d100      	bne.n	8002cae <__aeabi_dsub+0x252>
 8002cac:	e0aa      	b.n	8002e04 <__aeabi_dsub+0x3a8>
 8002cae:	2501      	movs	r5, #1
 8002cb0:	2938      	cmp	r1, #56	@ 0x38
 8002cb2:	dd00      	ble.n	8002cb6 <__aeabi_dsub+0x25a>
 8002cb4:	e72f      	b.n	8002b16 <__aeabi_dsub+0xba>
 8002cb6:	468a      	mov	sl, r1
 8002cb8:	e718      	b.n	8002aec <__aeabi_dsub+0x90>
 8002cba:	2201      	movs	r2, #1
 8002cbc:	4051      	eors	r1, r2
 8002cbe:	428e      	cmp	r6, r1
 8002cc0:	d1d0      	bne.n	8002c64 <__aeabi_dsub+0x208>
 8002cc2:	4653      	mov	r3, sl
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d100      	bne.n	8002cca <__aeabi_dsub+0x26e>
 8002cc8:	e0be      	b.n	8002e48 <__aeabi_dsub+0x3ec>
 8002cca:	2f00      	cmp	r7, #0
 8002ccc:	d000      	beq.n	8002cd0 <__aeabi_dsub+0x274>
 8002cce:	e138      	b.n	8002f42 <__aeabi_dsub+0x4e6>
 8002cd0:	46ca      	mov	sl, r9
 8002cd2:	0022      	movs	r2, r4
 8002cd4:	4302      	orrs	r2, r0
 8002cd6:	d100      	bne.n	8002cda <__aeabi_dsub+0x27e>
 8002cd8:	e1e2      	b.n	80030a0 <__aeabi_dsub+0x644>
 8002cda:	4653      	mov	r3, sl
 8002cdc:	1e59      	subs	r1, r3, #1
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d100      	bne.n	8002ce4 <__aeabi_dsub+0x288>
 8002ce2:	e20d      	b.n	8003100 <__aeabi_dsub+0x6a4>
 8002ce4:	4a32      	ldr	r2, [pc, #200]	@ (8002db0 <__aeabi_dsub+0x354>)
 8002ce6:	4592      	cmp	sl, r2
 8002ce8:	d100      	bne.n	8002cec <__aeabi_dsub+0x290>
 8002cea:	e1d2      	b.n	8003092 <__aeabi_dsub+0x636>
 8002cec:	2701      	movs	r7, #1
 8002cee:	2938      	cmp	r1, #56	@ 0x38
 8002cf0:	dc13      	bgt.n	8002d1a <__aeabi_dsub+0x2be>
 8002cf2:	291f      	cmp	r1, #31
 8002cf4:	dd00      	ble.n	8002cf8 <__aeabi_dsub+0x29c>
 8002cf6:	e1ee      	b.n	80030d6 <__aeabi_dsub+0x67a>
 8002cf8:	2220      	movs	r2, #32
 8002cfa:	9b02      	ldr	r3, [sp, #8]
 8002cfc:	1a52      	subs	r2, r2, r1
 8002cfe:	0025      	movs	r5, r4
 8002d00:	0007      	movs	r7, r0
 8002d02:	469a      	mov	sl, r3
 8002d04:	40cc      	lsrs	r4, r1
 8002d06:	4090      	lsls	r0, r2
 8002d08:	4095      	lsls	r5, r2
 8002d0a:	40cf      	lsrs	r7, r1
 8002d0c:	44a2      	add	sl, r4
 8002d0e:	1e42      	subs	r2, r0, #1
 8002d10:	4190      	sbcs	r0, r2
 8002d12:	4653      	mov	r3, sl
 8002d14:	432f      	orrs	r7, r5
 8002d16:	4307      	orrs	r7, r0
 8002d18:	9302      	str	r3, [sp, #8]
 8002d1a:	003d      	movs	r5, r7
 8002d1c:	4465      	add	r5, ip
 8002d1e:	4565      	cmp	r5, ip
 8002d20:	4192      	sbcs	r2, r2
 8002d22:	9b02      	ldr	r3, [sp, #8]
 8002d24:	4252      	negs	r2, r2
 8002d26:	464f      	mov	r7, r9
 8002d28:	18d4      	adds	r4, r2, r3
 8002d2a:	e780      	b.n	8002c2e <__aeabi_dsub+0x1d2>
 8002d2c:	4a23      	ldr	r2, [pc, #140]	@ (8002dbc <__aeabi_dsub+0x360>)
 8002d2e:	1c7d      	adds	r5, r7, #1
 8002d30:	4215      	tst	r5, r2
 8002d32:	d000      	beq.n	8002d36 <__aeabi_dsub+0x2da>
 8002d34:	e0aa      	b.n	8002e8c <__aeabi_dsub+0x430>
 8002d36:	4662      	mov	r2, ip
 8002d38:	0025      	movs	r5, r4
 8002d3a:	9b02      	ldr	r3, [sp, #8]
 8002d3c:	4305      	orrs	r5, r0
 8002d3e:	431a      	orrs	r2, r3
 8002d40:	2f00      	cmp	r7, #0
 8002d42:	d000      	beq.n	8002d46 <__aeabi_dsub+0x2ea>
 8002d44:	e0f5      	b.n	8002f32 <__aeabi_dsub+0x4d6>
 8002d46:	2d00      	cmp	r5, #0
 8002d48:	d100      	bne.n	8002d4c <__aeabi_dsub+0x2f0>
 8002d4a:	e16b      	b.n	8003024 <__aeabi_dsub+0x5c8>
 8002d4c:	2a00      	cmp	r2, #0
 8002d4e:	d100      	bne.n	8002d52 <__aeabi_dsub+0x2f6>
 8002d50:	e152      	b.n	8002ff8 <__aeabi_dsub+0x59c>
 8002d52:	4663      	mov	r3, ip
 8002d54:	1ac5      	subs	r5, r0, r3
 8002d56:	9b02      	ldr	r3, [sp, #8]
 8002d58:	1ae2      	subs	r2, r4, r3
 8002d5a:	42a8      	cmp	r0, r5
 8002d5c:	419b      	sbcs	r3, r3
 8002d5e:	425b      	negs	r3, r3
 8002d60:	1ad3      	subs	r3, r2, r3
 8002d62:	021a      	lsls	r2, r3, #8
 8002d64:	d400      	bmi.n	8002d68 <__aeabi_dsub+0x30c>
 8002d66:	e1d5      	b.n	8003114 <__aeabi_dsub+0x6b8>
 8002d68:	4663      	mov	r3, ip
 8002d6a:	1a1d      	subs	r5, r3, r0
 8002d6c:	45ac      	cmp	ip, r5
 8002d6e:	4192      	sbcs	r2, r2
 8002d70:	2601      	movs	r6, #1
 8002d72:	9b02      	ldr	r3, [sp, #8]
 8002d74:	4252      	negs	r2, r2
 8002d76:	1b1c      	subs	r4, r3, r4
 8002d78:	4688      	mov	r8, r1
 8002d7a:	1aa4      	subs	r4, r4, r2
 8002d7c:	400e      	ands	r6, r1
 8002d7e:	e6f6      	b.n	8002b6e <__aeabi_dsub+0x112>
 8002d80:	4297      	cmp	r7, r2
 8002d82:	d03f      	beq.n	8002e04 <__aeabi_dsub+0x3a8>
 8002d84:	4652      	mov	r2, sl
 8002d86:	2501      	movs	r5, #1
 8002d88:	2a38      	cmp	r2, #56	@ 0x38
 8002d8a:	dd00      	ble.n	8002d8e <__aeabi_dsub+0x332>
 8002d8c:	e74a      	b.n	8002c24 <__aeabi_dsub+0x1c8>
 8002d8e:	2280      	movs	r2, #128	@ 0x80
 8002d90:	9b02      	ldr	r3, [sp, #8]
 8002d92:	0412      	lsls	r2, r2, #16
 8002d94:	4313      	orrs	r3, r2
 8002d96:	9302      	str	r3, [sp, #8]
 8002d98:	e72d      	b.n	8002bf6 <__aeabi_dsub+0x19a>
 8002d9a:	003c      	movs	r4, r7
 8002d9c:	2500      	movs	r5, #0
 8002d9e:	2200      	movs	r2, #0
 8002da0:	e705      	b.n	8002bae <__aeabi_dsub+0x152>
 8002da2:	2307      	movs	r3, #7
 8002da4:	402b      	ands	r3, r5
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d000      	beq.n	8002dac <__aeabi_dsub+0x350>
 8002daa:	e6e2      	b.n	8002b72 <__aeabi_dsub+0x116>
 8002dac:	e06b      	b.n	8002e86 <__aeabi_dsub+0x42a>
 8002dae:	46c0      	nop			@ (mov r8, r8)
 8002db0:	000007ff 	.word	0x000007ff
 8002db4:	ff7fffff 	.word	0xff7fffff
 8002db8:	fffff801 	.word	0xfffff801
 8002dbc:	000007fe 	.word	0x000007fe
 8002dc0:	0028      	movs	r0, r5
 8002dc2:	f000 fb1b 	bl	80033fc <__clzsi2>
 8002dc6:	0003      	movs	r3, r0
 8002dc8:	3318      	adds	r3, #24
 8002dca:	2b1f      	cmp	r3, #31
 8002dcc:	dc00      	bgt.n	8002dd0 <__aeabi_dsub+0x374>
 8002dce:	e6b4      	b.n	8002b3a <__aeabi_dsub+0xde>
 8002dd0:	002a      	movs	r2, r5
 8002dd2:	3808      	subs	r0, #8
 8002dd4:	4082      	lsls	r2, r0
 8002dd6:	429f      	cmp	r7, r3
 8002dd8:	dd00      	ble.n	8002ddc <__aeabi_dsub+0x380>
 8002dda:	e0b9      	b.n	8002f50 <__aeabi_dsub+0x4f4>
 8002ddc:	1bdb      	subs	r3, r3, r7
 8002dde:	1c58      	adds	r0, r3, #1
 8002de0:	281f      	cmp	r0, #31
 8002de2:	dc00      	bgt.n	8002de6 <__aeabi_dsub+0x38a>
 8002de4:	e1a0      	b.n	8003128 <__aeabi_dsub+0x6cc>
 8002de6:	0015      	movs	r5, r2
 8002de8:	3b1f      	subs	r3, #31
 8002dea:	40dd      	lsrs	r5, r3
 8002dec:	2820      	cmp	r0, #32
 8002dee:	d005      	beq.n	8002dfc <__aeabi_dsub+0x3a0>
 8002df0:	2340      	movs	r3, #64	@ 0x40
 8002df2:	1a1b      	subs	r3, r3, r0
 8002df4:	409a      	lsls	r2, r3
 8002df6:	1e53      	subs	r3, r2, #1
 8002df8:	419a      	sbcs	r2, r3
 8002dfa:	4315      	orrs	r5, r2
 8002dfc:	2307      	movs	r3, #7
 8002dfe:	2700      	movs	r7, #0
 8002e00:	402b      	ands	r3, r5
 8002e02:	e7d0      	b.n	8002da6 <__aeabi_dsub+0x34a>
 8002e04:	08c0      	lsrs	r0, r0, #3
 8002e06:	0762      	lsls	r2, r4, #29
 8002e08:	4302      	orrs	r2, r0
 8002e0a:	08e4      	lsrs	r4, r4, #3
 8002e0c:	e737      	b.n	8002c7e <__aeabi_dsub+0x222>
 8002e0e:	08ea      	lsrs	r2, r5, #3
 8002e10:	0763      	lsls	r3, r4, #29
 8002e12:	431a      	orrs	r2, r3
 8002e14:	4bd3      	ldr	r3, [pc, #844]	@ (8003164 <__aeabi_dsub+0x708>)
 8002e16:	08e4      	lsrs	r4, r4, #3
 8002e18:	429f      	cmp	r7, r3
 8002e1a:	d100      	bne.n	8002e1e <__aeabi_dsub+0x3c2>
 8002e1c:	e72f      	b.n	8002c7e <__aeabi_dsub+0x222>
 8002e1e:	0324      	lsls	r4, r4, #12
 8002e20:	0b25      	lsrs	r5, r4, #12
 8002e22:	057c      	lsls	r4, r7, #21
 8002e24:	0d64      	lsrs	r4, r4, #21
 8002e26:	e6c2      	b.n	8002bae <__aeabi_dsub+0x152>
 8002e28:	46ca      	mov	sl, r9
 8002e2a:	0022      	movs	r2, r4
 8002e2c:	4302      	orrs	r2, r0
 8002e2e:	d158      	bne.n	8002ee2 <__aeabi_dsub+0x486>
 8002e30:	4663      	mov	r3, ip
 8002e32:	000e      	movs	r6, r1
 8002e34:	9c02      	ldr	r4, [sp, #8]
 8002e36:	9303      	str	r3, [sp, #12]
 8002e38:	9b03      	ldr	r3, [sp, #12]
 8002e3a:	4657      	mov	r7, sl
 8002e3c:	08da      	lsrs	r2, r3, #3
 8002e3e:	e7e7      	b.n	8002e10 <__aeabi_dsub+0x3b4>
 8002e40:	4cc9      	ldr	r4, [pc, #804]	@ (8003168 <__aeabi_dsub+0x70c>)
 8002e42:	1aff      	subs	r7, r7, r3
 8002e44:	4014      	ands	r4, r2
 8002e46:	e692      	b.n	8002b6e <__aeabi_dsub+0x112>
 8002e48:	4dc8      	ldr	r5, [pc, #800]	@ (800316c <__aeabi_dsub+0x710>)
 8002e4a:	1c7a      	adds	r2, r7, #1
 8002e4c:	422a      	tst	r2, r5
 8002e4e:	d000      	beq.n	8002e52 <__aeabi_dsub+0x3f6>
 8002e50:	e084      	b.n	8002f5c <__aeabi_dsub+0x500>
 8002e52:	0022      	movs	r2, r4
 8002e54:	4302      	orrs	r2, r0
 8002e56:	2f00      	cmp	r7, #0
 8002e58:	d000      	beq.n	8002e5c <__aeabi_dsub+0x400>
 8002e5a:	e0ef      	b.n	800303c <__aeabi_dsub+0x5e0>
 8002e5c:	2a00      	cmp	r2, #0
 8002e5e:	d100      	bne.n	8002e62 <__aeabi_dsub+0x406>
 8002e60:	e0e5      	b.n	800302e <__aeabi_dsub+0x5d2>
 8002e62:	4662      	mov	r2, ip
 8002e64:	9902      	ldr	r1, [sp, #8]
 8002e66:	430a      	orrs	r2, r1
 8002e68:	d100      	bne.n	8002e6c <__aeabi_dsub+0x410>
 8002e6a:	e0c5      	b.n	8002ff8 <__aeabi_dsub+0x59c>
 8002e6c:	4663      	mov	r3, ip
 8002e6e:	18c5      	adds	r5, r0, r3
 8002e70:	468c      	mov	ip, r1
 8002e72:	4285      	cmp	r5, r0
 8002e74:	4180      	sbcs	r0, r0
 8002e76:	4464      	add	r4, ip
 8002e78:	4240      	negs	r0, r0
 8002e7a:	1824      	adds	r4, r4, r0
 8002e7c:	0223      	lsls	r3, r4, #8
 8002e7e:	d502      	bpl.n	8002e86 <__aeabi_dsub+0x42a>
 8002e80:	4bb9      	ldr	r3, [pc, #740]	@ (8003168 <__aeabi_dsub+0x70c>)
 8002e82:	3701      	adds	r7, #1
 8002e84:	401c      	ands	r4, r3
 8002e86:	46ba      	mov	sl, r7
 8002e88:	9503      	str	r5, [sp, #12]
 8002e8a:	e7d5      	b.n	8002e38 <__aeabi_dsub+0x3dc>
 8002e8c:	4662      	mov	r2, ip
 8002e8e:	1a85      	subs	r5, r0, r2
 8002e90:	42a8      	cmp	r0, r5
 8002e92:	4192      	sbcs	r2, r2
 8002e94:	4252      	negs	r2, r2
 8002e96:	4691      	mov	r9, r2
 8002e98:	9b02      	ldr	r3, [sp, #8]
 8002e9a:	1ae3      	subs	r3, r4, r3
 8002e9c:	001a      	movs	r2, r3
 8002e9e:	464b      	mov	r3, r9
 8002ea0:	1ad2      	subs	r2, r2, r3
 8002ea2:	0013      	movs	r3, r2
 8002ea4:	4691      	mov	r9, r2
 8002ea6:	021a      	lsls	r2, r3, #8
 8002ea8:	d46c      	bmi.n	8002f84 <__aeabi_dsub+0x528>
 8002eaa:	464a      	mov	r2, r9
 8002eac:	464c      	mov	r4, r9
 8002eae:	432a      	orrs	r2, r5
 8002eb0:	d000      	beq.n	8002eb4 <__aeabi_dsub+0x458>
 8002eb2:	e63a      	b.n	8002b2a <__aeabi_dsub+0xce>
 8002eb4:	2600      	movs	r6, #0
 8002eb6:	2400      	movs	r4, #0
 8002eb8:	2500      	movs	r5, #0
 8002eba:	e678      	b.n	8002bae <__aeabi_dsub+0x152>
 8002ebc:	9902      	ldr	r1, [sp, #8]
 8002ebe:	4653      	mov	r3, sl
 8002ec0:	000d      	movs	r5, r1
 8002ec2:	3a20      	subs	r2, #32
 8002ec4:	40d5      	lsrs	r5, r2
 8002ec6:	2b20      	cmp	r3, #32
 8002ec8:	d006      	beq.n	8002ed8 <__aeabi_dsub+0x47c>
 8002eca:	2240      	movs	r2, #64	@ 0x40
 8002ecc:	1ad2      	subs	r2, r2, r3
 8002ece:	000b      	movs	r3, r1
 8002ed0:	4093      	lsls	r3, r2
 8002ed2:	4662      	mov	r2, ip
 8002ed4:	431a      	orrs	r2, r3
 8002ed6:	4693      	mov	fp, r2
 8002ed8:	465b      	mov	r3, fp
 8002eda:	1e5a      	subs	r2, r3, #1
 8002edc:	4193      	sbcs	r3, r2
 8002ede:	431d      	orrs	r5, r3
 8002ee0:	e619      	b.n	8002b16 <__aeabi_dsub+0xba>
 8002ee2:	4653      	mov	r3, sl
 8002ee4:	1e5a      	subs	r2, r3, #1
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d100      	bne.n	8002eec <__aeabi_dsub+0x490>
 8002eea:	e0c6      	b.n	800307a <__aeabi_dsub+0x61e>
 8002eec:	4e9d      	ldr	r6, [pc, #628]	@ (8003164 <__aeabi_dsub+0x708>)
 8002eee:	45b2      	cmp	sl, r6
 8002ef0:	d100      	bne.n	8002ef4 <__aeabi_dsub+0x498>
 8002ef2:	e6bd      	b.n	8002c70 <__aeabi_dsub+0x214>
 8002ef4:	4688      	mov	r8, r1
 8002ef6:	000e      	movs	r6, r1
 8002ef8:	2501      	movs	r5, #1
 8002efa:	2a38      	cmp	r2, #56	@ 0x38
 8002efc:	dc10      	bgt.n	8002f20 <__aeabi_dsub+0x4c4>
 8002efe:	2a1f      	cmp	r2, #31
 8002f00:	dc7f      	bgt.n	8003002 <__aeabi_dsub+0x5a6>
 8002f02:	2120      	movs	r1, #32
 8002f04:	0025      	movs	r5, r4
 8002f06:	1a89      	subs	r1, r1, r2
 8002f08:	0007      	movs	r7, r0
 8002f0a:	4088      	lsls	r0, r1
 8002f0c:	408d      	lsls	r5, r1
 8002f0e:	40d7      	lsrs	r7, r2
 8002f10:	40d4      	lsrs	r4, r2
 8002f12:	1e41      	subs	r1, r0, #1
 8002f14:	4188      	sbcs	r0, r1
 8002f16:	9b02      	ldr	r3, [sp, #8]
 8002f18:	433d      	orrs	r5, r7
 8002f1a:	1b1b      	subs	r3, r3, r4
 8002f1c:	4305      	orrs	r5, r0
 8002f1e:	9302      	str	r3, [sp, #8]
 8002f20:	4662      	mov	r2, ip
 8002f22:	1b55      	subs	r5, r2, r5
 8002f24:	45ac      	cmp	ip, r5
 8002f26:	4192      	sbcs	r2, r2
 8002f28:	9b02      	ldr	r3, [sp, #8]
 8002f2a:	4252      	negs	r2, r2
 8002f2c:	464f      	mov	r7, r9
 8002f2e:	1a9c      	subs	r4, r3, r2
 8002f30:	e5f6      	b.n	8002b20 <__aeabi_dsub+0xc4>
 8002f32:	2d00      	cmp	r5, #0
 8002f34:	d000      	beq.n	8002f38 <__aeabi_dsub+0x4dc>
 8002f36:	e0b7      	b.n	80030a8 <__aeabi_dsub+0x64c>
 8002f38:	2a00      	cmp	r2, #0
 8002f3a:	d100      	bne.n	8002f3e <__aeabi_dsub+0x4e2>
 8002f3c:	e0f0      	b.n	8003120 <__aeabi_dsub+0x6c4>
 8002f3e:	2601      	movs	r6, #1
 8002f40:	400e      	ands	r6, r1
 8002f42:	4663      	mov	r3, ip
 8002f44:	9802      	ldr	r0, [sp, #8]
 8002f46:	08d9      	lsrs	r1, r3, #3
 8002f48:	0742      	lsls	r2, r0, #29
 8002f4a:	430a      	orrs	r2, r1
 8002f4c:	08c4      	lsrs	r4, r0, #3
 8002f4e:	e696      	b.n	8002c7e <__aeabi_dsub+0x222>
 8002f50:	4c85      	ldr	r4, [pc, #532]	@ (8003168 <__aeabi_dsub+0x70c>)
 8002f52:	1aff      	subs	r7, r7, r3
 8002f54:	4014      	ands	r4, r2
 8002f56:	0762      	lsls	r2, r4, #29
 8002f58:	08e4      	lsrs	r4, r4, #3
 8002f5a:	e760      	b.n	8002e1e <__aeabi_dsub+0x3c2>
 8002f5c:	4981      	ldr	r1, [pc, #516]	@ (8003164 <__aeabi_dsub+0x708>)
 8002f5e:	428a      	cmp	r2, r1
 8002f60:	d100      	bne.n	8002f64 <__aeabi_dsub+0x508>
 8002f62:	e0c9      	b.n	80030f8 <__aeabi_dsub+0x69c>
 8002f64:	4663      	mov	r3, ip
 8002f66:	18c1      	adds	r1, r0, r3
 8002f68:	4281      	cmp	r1, r0
 8002f6a:	4180      	sbcs	r0, r0
 8002f6c:	9b02      	ldr	r3, [sp, #8]
 8002f6e:	4240      	negs	r0, r0
 8002f70:	18e3      	adds	r3, r4, r3
 8002f72:	181b      	adds	r3, r3, r0
 8002f74:	07dd      	lsls	r5, r3, #31
 8002f76:	085c      	lsrs	r4, r3, #1
 8002f78:	2307      	movs	r3, #7
 8002f7a:	0849      	lsrs	r1, r1, #1
 8002f7c:	430d      	orrs	r5, r1
 8002f7e:	0017      	movs	r7, r2
 8002f80:	402b      	ands	r3, r5
 8002f82:	e710      	b.n	8002da6 <__aeabi_dsub+0x34a>
 8002f84:	4663      	mov	r3, ip
 8002f86:	1a1d      	subs	r5, r3, r0
 8002f88:	45ac      	cmp	ip, r5
 8002f8a:	4192      	sbcs	r2, r2
 8002f8c:	2601      	movs	r6, #1
 8002f8e:	9b02      	ldr	r3, [sp, #8]
 8002f90:	4252      	negs	r2, r2
 8002f92:	1b1c      	subs	r4, r3, r4
 8002f94:	4688      	mov	r8, r1
 8002f96:	1aa4      	subs	r4, r4, r2
 8002f98:	400e      	ands	r6, r1
 8002f9a:	e5c6      	b.n	8002b2a <__aeabi_dsub+0xce>
 8002f9c:	4663      	mov	r3, ip
 8002f9e:	18c5      	adds	r5, r0, r3
 8002fa0:	9b02      	ldr	r3, [sp, #8]
 8002fa2:	4285      	cmp	r5, r0
 8002fa4:	4180      	sbcs	r0, r0
 8002fa6:	469c      	mov	ip, r3
 8002fa8:	4240      	negs	r0, r0
 8002faa:	4464      	add	r4, ip
 8002fac:	1824      	adds	r4, r4, r0
 8002fae:	2701      	movs	r7, #1
 8002fb0:	0223      	lsls	r3, r4, #8
 8002fb2:	d400      	bmi.n	8002fb6 <__aeabi_dsub+0x55a>
 8002fb4:	e6f5      	b.n	8002da2 <__aeabi_dsub+0x346>
 8002fb6:	2702      	movs	r7, #2
 8002fb8:	e641      	b.n	8002c3e <__aeabi_dsub+0x1e2>
 8002fba:	4663      	mov	r3, ip
 8002fbc:	1ac5      	subs	r5, r0, r3
 8002fbe:	42a8      	cmp	r0, r5
 8002fc0:	4180      	sbcs	r0, r0
 8002fc2:	9b02      	ldr	r3, [sp, #8]
 8002fc4:	4240      	negs	r0, r0
 8002fc6:	1ae4      	subs	r4, r4, r3
 8002fc8:	2701      	movs	r7, #1
 8002fca:	1a24      	subs	r4, r4, r0
 8002fcc:	e5a8      	b.n	8002b20 <__aeabi_dsub+0xc4>
 8002fce:	9d02      	ldr	r5, [sp, #8]
 8002fd0:	4652      	mov	r2, sl
 8002fd2:	002b      	movs	r3, r5
 8002fd4:	3a20      	subs	r2, #32
 8002fd6:	40d3      	lsrs	r3, r2
 8002fd8:	0019      	movs	r1, r3
 8002fda:	4653      	mov	r3, sl
 8002fdc:	2b20      	cmp	r3, #32
 8002fde:	d006      	beq.n	8002fee <__aeabi_dsub+0x592>
 8002fe0:	2240      	movs	r2, #64	@ 0x40
 8002fe2:	1ad2      	subs	r2, r2, r3
 8002fe4:	002b      	movs	r3, r5
 8002fe6:	4093      	lsls	r3, r2
 8002fe8:	4662      	mov	r2, ip
 8002fea:	431a      	orrs	r2, r3
 8002fec:	4693      	mov	fp, r2
 8002fee:	465d      	mov	r5, fp
 8002ff0:	1e6b      	subs	r3, r5, #1
 8002ff2:	419d      	sbcs	r5, r3
 8002ff4:	430d      	orrs	r5, r1
 8002ff6:	e615      	b.n	8002c24 <__aeabi_dsub+0x1c8>
 8002ff8:	0762      	lsls	r2, r4, #29
 8002ffa:	08c0      	lsrs	r0, r0, #3
 8002ffc:	4302      	orrs	r2, r0
 8002ffe:	08e4      	lsrs	r4, r4, #3
 8003000:	e70d      	b.n	8002e1e <__aeabi_dsub+0x3c2>
 8003002:	0011      	movs	r1, r2
 8003004:	0027      	movs	r7, r4
 8003006:	3920      	subs	r1, #32
 8003008:	40cf      	lsrs	r7, r1
 800300a:	2a20      	cmp	r2, #32
 800300c:	d005      	beq.n	800301a <__aeabi_dsub+0x5be>
 800300e:	2140      	movs	r1, #64	@ 0x40
 8003010:	1a8a      	subs	r2, r1, r2
 8003012:	4094      	lsls	r4, r2
 8003014:	0025      	movs	r5, r4
 8003016:	4305      	orrs	r5, r0
 8003018:	9503      	str	r5, [sp, #12]
 800301a:	9d03      	ldr	r5, [sp, #12]
 800301c:	1e6a      	subs	r2, r5, #1
 800301e:	4195      	sbcs	r5, r2
 8003020:	433d      	orrs	r5, r7
 8003022:	e77d      	b.n	8002f20 <__aeabi_dsub+0x4c4>
 8003024:	2a00      	cmp	r2, #0
 8003026:	d100      	bne.n	800302a <__aeabi_dsub+0x5ce>
 8003028:	e744      	b.n	8002eb4 <__aeabi_dsub+0x458>
 800302a:	2601      	movs	r6, #1
 800302c:	400e      	ands	r6, r1
 800302e:	4663      	mov	r3, ip
 8003030:	08d9      	lsrs	r1, r3, #3
 8003032:	9b02      	ldr	r3, [sp, #8]
 8003034:	075a      	lsls	r2, r3, #29
 8003036:	430a      	orrs	r2, r1
 8003038:	08dc      	lsrs	r4, r3, #3
 800303a:	e6f0      	b.n	8002e1e <__aeabi_dsub+0x3c2>
 800303c:	2a00      	cmp	r2, #0
 800303e:	d028      	beq.n	8003092 <__aeabi_dsub+0x636>
 8003040:	4662      	mov	r2, ip
 8003042:	9f02      	ldr	r7, [sp, #8]
 8003044:	08c0      	lsrs	r0, r0, #3
 8003046:	433a      	orrs	r2, r7
 8003048:	d100      	bne.n	800304c <__aeabi_dsub+0x5f0>
 800304a:	e6dc      	b.n	8002e06 <__aeabi_dsub+0x3aa>
 800304c:	0762      	lsls	r2, r4, #29
 800304e:	4310      	orrs	r0, r2
 8003050:	2280      	movs	r2, #128	@ 0x80
 8003052:	08e4      	lsrs	r4, r4, #3
 8003054:	0312      	lsls	r2, r2, #12
 8003056:	4214      	tst	r4, r2
 8003058:	d009      	beq.n	800306e <__aeabi_dsub+0x612>
 800305a:	08fd      	lsrs	r5, r7, #3
 800305c:	4215      	tst	r5, r2
 800305e:	d106      	bne.n	800306e <__aeabi_dsub+0x612>
 8003060:	4663      	mov	r3, ip
 8003062:	2601      	movs	r6, #1
 8003064:	002c      	movs	r4, r5
 8003066:	08d8      	lsrs	r0, r3, #3
 8003068:	077b      	lsls	r3, r7, #29
 800306a:	4318      	orrs	r0, r3
 800306c:	400e      	ands	r6, r1
 800306e:	0f42      	lsrs	r2, r0, #29
 8003070:	00c0      	lsls	r0, r0, #3
 8003072:	08c0      	lsrs	r0, r0, #3
 8003074:	0752      	lsls	r2, r2, #29
 8003076:	4302      	orrs	r2, r0
 8003078:	e601      	b.n	8002c7e <__aeabi_dsub+0x222>
 800307a:	4663      	mov	r3, ip
 800307c:	1a1d      	subs	r5, r3, r0
 800307e:	45ac      	cmp	ip, r5
 8003080:	4192      	sbcs	r2, r2
 8003082:	9b02      	ldr	r3, [sp, #8]
 8003084:	4252      	negs	r2, r2
 8003086:	1b1c      	subs	r4, r3, r4
 8003088:	000e      	movs	r6, r1
 800308a:	4688      	mov	r8, r1
 800308c:	2701      	movs	r7, #1
 800308e:	1aa4      	subs	r4, r4, r2
 8003090:	e546      	b.n	8002b20 <__aeabi_dsub+0xc4>
 8003092:	4663      	mov	r3, ip
 8003094:	08d9      	lsrs	r1, r3, #3
 8003096:	9b02      	ldr	r3, [sp, #8]
 8003098:	075a      	lsls	r2, r3, #29
 800309a:	430a      	orrs	r2, r1
 800309c:	08dc      	lsrs	r4, r3, #3
 800309e:	e5ee      	b.n	8002c7e <__aeabi_dsub+0x222>
 80030a0:	4663      	mov	r3, ip
 80030a2:	9c02      	ldr	r4, [sp, #8]
 80030a4:	9303      	str	r3, [sp, #12]
 80030a6:	e6c7      	b.n	8002e38 <__aeabi_dsub+0x3dc>
 80030a8:	08c0      	lsrs	r0, r0, #3
 80030aa:	2a00      	cmp	r2, #0
 80030ac:	d100      	bne.n	80030b0 <__aeabi_dsub+0x654>
 80030ae:	e6aa      	b.n	8002e06 <__aeabi_dsub+0x3aa>
 80030b0:	0762      	lsls	r2, r4, #29
 80030b2:	4310      	orrs	r0, r2
 80030b4:	2280      	movs	r2, #128	@ 0x80
 80030b6:	08e4      	lsrs	r4, r4, #3
 80030b8:	0312      	lsls	r2, r2, #12
 80030ba:	4214      	tst	r4, r2
 80030bc:	d0d7      	beq.n	800306e <__aeabi_dsub+0x612>
 80030be:	9f02      	ldr	r7, [sp, #8]
 80030c0:	08fd      	lsrs	r5, r7, #3
 80030c2:	4215      	tst	r5, r2
 80030c4:	d1d3      	bne.n	800306e <__aeabi_dsub+0x612>
 80030c6:	4663      	mov	r3, ip
 80030c8:	2601      	movs	r6, #1
 80030ca:	08d8      	lsrs	r0, r3, #3
 80030cc:	077b      	lsls	r3, r7, #29
 80030ce:	002c      	movs	r4, r5
 80030d0:	4318      	orrs	r0, r3
 80030d2:	400e      	ands	r6, r1
 80030d4:	e7cb      	b.n	800306e <__aeabi_dsub+0x612>
 80030d6:	000a      	movs	r2, r1
 80030d8:	0027      	movs	r7, r4
 80030da:	3a20      	subs	r2, #32
 80030dc:	40d7      	lsrs	r7, r2
 80030de:	2920      	cmp	r1, #32
 80030e0:	d005      	beq.n	80030ee <__aeabi_dsub+0x692>
 80030e2:	2240      	movs	r2, #64	@ 0x40
 80030e4:	1a52      	subs	r2, r2, r1
 80030e6:	4094      	lsls	r4, r2
 80030e8:	0025      	movs	r5, r4
 80030ea:	4305      	orrs	r5, r0
 80030ec:	9503      	str	r5, [sp, #12]
 80030ee:	9d03      	ldr	r5, [sp, #12]
 80030f0:	1e6a      	subs	r2, r5, #1
 80030f2:	4195      	sbcs	r5, r2
 80030f4:	432f      	orrs	r7, r5
 80030f6:	e610      	b.n	8002d1a <__aeabi_dsub+0x2be>
 80030f8:	0014      	movs	r4, r2
 80030fa:	2500      	movs	r5, #0
 80030fc:	2200      	movs	r2, #0
 80030fe:	e556      	b.n	8002bae <__aeabi_dsub+0x152>
 8003100:	9b02      	ldr	r3, [sp, #8]
 8003102:	4460      	add	r0, ip
 8003104:	4699      	mov	r9, r3
 8003106:	4560      	cmp	r0, ip
 8003108:	4192      	sbcs	r2, r2
 800310a:	444c      	add	r4, r9
 800310c:	4252      	negs	r2, r2
 800310e:	0005      	movs	r5, r0
 8003110:	18a4      	adds	r4, r4, r2
 8003112:	e74c      	b.n	8002fae <__aeabi_dsub+0x552>
 8003114:	001a      	movs	r2, r3
 8003116:	001c      	movs	r4, r3
 8003118:	432a      	orrs	r2, r5
 800311a:	d000      	beq.n	800311e <__aeabi_dsub+0x6c2>
 800311c:	e6b3      	b.n	8002e86 <__aeabi_dsub+0x42a>
 800311e:	e6c9      	b.n	8002eb4 <__aeabi_dsub+0x458>
 8003120:	2480      	movs	r4, #128	@ 0x80
 8003122:	2600      	movs	r6, #0
 8003124:	0324      	lsls	r4, r4, #12
 8003126:	e5ae      	b.n	8002c86 <__aeabi_dsub+0x22a>
 8003128:	2120      	movs	r1, #32
 800312a:	2500      	movs	r5, #0
 800312c:	1a09      	subs	r1, r1, r0
 800312e:	e517      	b.n	8002b60 <__aeabi_dsub+0x104>
 8003130:	2200      	movs	r2, #0
 8003132:	2500      	movs	r5, #0
 8003134:	4c0b      	ldr	r4, [pc, #44]	@ (8003164 <__aeabi_dsub+0x708>)
 8003136:	e53a      	b.n	8002bae <__aeabi_dsub+0x152>
 8003138:	2d00      	cmp	r5, #0
 800313a:	d100      	bne.n	800313e <__aeabi_dsub+0x6e2>
 800313c:	e5f6      	b.n	8002d2c <__aeabi_dsub+0x2d0>
 800313e:	464b      	mov	r3, r9
 8003140:	1bda      	subs	r2, r3, r7
 8003142:	4692      	mov	sl, r2
 8003144:	2f00      	cmp	r7, #0
 8003146:	d100      	bne.n	800314a <__aeabi_dsub+0x6ee>
 8003148:	e66f      	b.n	8002e2a <__aeabi_dsub+0x3ce>
 800314a:	2a38      	cmp	r2, #56	@ 0x38
 800314c:	dc05      	bgt.n	800315a <__aeabi_dsub+0x6fe>
 800314e:	2680      	movs	r6, #128	@ 0x80
 8003150:	0436      	lsls	r6, r6, #16
 8003152:	4334      	orrs	r4, r6
 8003154:	4688      	mov	r8, r1
 8003156:	000e      	movs	r6, r1
 8003158:	e6d1      	b.n	8002efe <__aeabi_dsub+0x4a2>
 800315a:	4688      	mov	r8, r1
 800315c:	000e      	movs	r6, r1
 800315e:	2501      	movs	r5, #1
 8003160:	e6de      	b.n	8002f20 <__aeabi_dsub+0x4c4>
 8003162:	46c0      	nop			@ (mov r8, r8)
 8003164:	000007ff 	.word	0x000007ff
 8003168:	ff7fffff 	.word	0xff7fffff
 800316c:	000007fe 	.word	0x000007fe
 8003170:	2d00      	cmp	r5, #0
 8003172:	d100      	bne.n	8003176 <__aeabi_dsub+0x71a>
 8003174:	e668      	b.n	8002e48 <__aeabi_dsub+0x3ec>
 8003176:	464b      	mov	r3, r9
 8003178:	1bd9      	subs	r1, r3, r7
 800317a:	2f00      	cmp	r7, #0
 800317c:	d101      	bne.n	8003182 <__aeabi_dsub+0x726>
 800317e:	468a      	mov	sl, r1
 8003180:	e5a7      	b.n	8002cd2 <__aeabi_dsub+0x276>
 8003182:	2701      	movs	r7, #1
 8003184:	2938      	cmp	r1, #56	@ 0x38
 8003186:	dd00      	ble.n	800318a <__aeabi_dsub+0x72e>
 8003188:	e5c7      	b.n	8002d1a <__aeabi_dsub+0x2be>
 800318a:	2280      	movs	r2, #128	@ 0x80
 800318c:	0412      	lsls	r2, r2, #16
 800318e:	4314      	orrs	r4, r2
 8003190:	e5af      	b.n	8002cf2 <__aeabi_dsub+0x296>
 8003192:	46c0      	nop			@ (mov r8, r8)
=======
08002ac8 <__aeabi_dsub>:
 8002ac8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002aca:	464e      	mov	r6, r9
 8002acc:	4645      	mov	r5, r8
 8002ace:	46de      	mov	lr, fp
 8002ad0:	4657      	mov	r7, sl
 8002ad2:	b5e0      	push	{r5, r6, r7, lr}
 8002ad4:	b085      	sub	sp, #20
 8002ad6:	9000      	str	r0, [sp, #0]
 8002ad8:	9101      	str	r1, [sp, #4]
 8002ada:	030c      	lsls	r4, r1, #12
 8002adc:	004f      	lsls	r7, r1, #1
 8002ade:	0fce      	lsrs	r6, r1, #31
 8002ae0:	0a61      	lsrs	r1, r4, #9
 8002ae2:	9c00      	ldr	r4, [sp, #0]
 8002ae4:	46b0      	mov	r8, r6
 8002ae6:	0f64      	lsrs	r4, r4, #29
 8002ae8:	430c      	orrs	r4, r1
 8002aea:	9900      	ldr	r1, [sp, #0]
 8002aec:	0d7f      	lsrs	r7, r7, #21
 8002aee:	00c8      	lsls	r0, r1, #3
 8002af0:	0011      	movs	r1, r2
 8002af2:	001a      	movs	r2, r3
 8002af4:	031b      	lsls	r3, r3, #12
 8002af6:	469c      	mov	ip, r3
 8002af8:	9100      	str	r1, [sp, #0]
 8002afa:	9201      	str	r2, [sp, #4]
 8002afc:	0051      	lsls	r1, r2, #1
 8002afe:	0d4b      	lsrs	r3, r1, #21
 8002b00:	4699      	mov	r9, r3
 8002b02:	9b01      	ldr	r3, [sp, #4]
 8002b04:	9d00      	ldr	r5, [sp, #0]
 8002b06:	0fd9      	lsrs	r1, r3, #31
 8002b08:	4663      	mov	r3, ip
 8002b0a:	0f6a      	lsrs	r2, r5, #29
 8002b0c:	0a5b      	lsrs	r3, r3, #9
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	00ea      	lsls	r2, r5, #3
 8002b12:	4694      	mov	ip, r2
 8002b14:	4693      	mov	fp, r2
 8002b16:	4ac1      	ldr	r2, [pc, #772]	@ (8002e1c <__aeabi_dsub+0x354>)
 8002b18:	9003      	str	r0, [sp, #12]
 8002b1a:	9302      	str	r3, [sp, #8]
 8002b1c:	4591      	cmp	r9, r2
 8002b1e:	d100      	bne.n	8002b22 <__aeabi_dsub+0x5a>
 8002b20:	e0cd      	b.n	8002cbe <__aeabi_dsub+0x1f6>
 8002b22:	2501      	movs	r5, #1
 8002b24:	4069      	eors	r1, r5
 8002b26:	464d      	mov	r5, r9
 8002b28:	1b7d      	subs	r5, r7, r5
 8002b2a:	46aa      	mov	sl, r5
 8002b2c:	428e      	cmp	r6, r1
 8002b2e:	d100      	bne.n	8002b32 <__aeabi_dsub+0x6a>
 8002b30:	e080      	b.n	8002c34 <__aeabi_dsub+0x16c>
 8002b32:	2d00      	cmp	r5, #0
 8002b34:	dc00      	bgt.n	8002b38 <__aeabi_dsub+0x70>
 8002b36:	e335      	b.n	80031a4 <__aeabi_dsub+0x6dc>
 8002b38:	4649      	mov	r1, r9
 8002b3a:	2900      	cmp	r1, #0
 8002b3c:	d100      	bne.n	8002b40 <__aeabi_dsub+0x78>
 8002b3e:	e0df      	b.n	8002d00 <__aeabi_dsub+0x238>
 8002b40:	4297      	cmp	r7, r2
 8002b42:	d100      	bne.n	8002b46 <__aeabi_dsub+0x7e>
 8002b44:	e194      	b.n	8002e70 <__aeabi_dsub+0x3a8>
 8002b46:	4652      	mov	r2, sl
 8002b48:	2501      	movs	r5, #1
 8002b4a:	2a38      	cmp	r2, #56	@ 0x38
 8002b4c:	dc19      	bgt.n	8002b82 <__aeabi_dsub+0xba>
 8002b4e:	2280      	movs	r2, #128	@ 0x80
 8002b50:	9b02      	ldr	r3, [sp, #8]
 8002b52:	0412      	lsls	r2, r2, #16
 8002b54:	4313      	orrs	r3, r2
 8002b56:	9302      	str	r3, [sp, #8]
 8002b58:	4652      	mov	r2, sl
 8002b5a:	2a1f      	cmp	r2, #31
 8002b5c:	dd00      	ble.n	8002b60 <__aeabi_dsub+0x98>
 8002b5e:	e1e3      	b.n	8002f28 <__aeabi_dsub+0x460>
 8002b60:	4653      	mov	r3, sl
 8002b62:	2220      	movs	r2, #32
 8002b64:	4661      	mov	r1, ip
 8002b66:	9d02      	ldr	r5, [sp, #8]
 8002b68:	1ad2      	subs	r2, r2, r3
 8002b6a:	4095      	lsls	r5, r2
 8002b6c:	40d9      	lsrs	r1, r3
 8002b6e:	430d      	orrs	r5, r1
 8002b70:	4661      	mov	r1, ip
 8002b72:	4091      	lsls	r1, r2
 8002b74:	000a      	movs	r2, r1
 8002b76:	1e51      	subs	r1, r2, #1
 8002b78:	418a      	sbcs	r2, r1
 8002b7a:	4315      	orrs	r5, r2
 8002b7c:	9a02      	ldr	r2, [sp, #8]
 8002b7e:	40da      	lsrs	r2, r3
 8002b80:	1aa4      	subs	r4, r4, r2
 8002b82:	1b45      	subs	r5, r0, r5
 8002b84:	42a8      	cmp	r0, r5
 8002b86:	4180      	sbcs	r0, r0
 8002b88:	4240      	negs	r0, r0
 8002b8a:	1a24      	subs	r4, r4, r0
 8002b8c:	0223      	lsls	r3, r4, #8
 8002b8e:	d400      	bmi.n	8002b92 <__aeabi_dsub+0xca>
 8002b90:	e13d      	b.n	8002e0e <__aeabi_dsub+0x346>
 8002b92:	0264      	lsls	r4, r4, #9
 8002b94:	0a64      	lsrs	r4, r4, #9
 8002b96:	2c00      	cmp	r4, #0
 8002b98:	d100      	bne.n	8002b9c <__aeabi_dsub+0xd4>
 8002b9a:	e147      	b.n	8002e2c <__aeabi_dsub+0x364>
 8002b9c:	0020      	movs	r0, r4
 8002b9e:	f000 fcab 	bl	80034f8 <__clzsi2>
 8002ba2:	0003      	movs	r3, r0
 8002ba4:	3b08      	subs	r3, #8
 8002ba6:	2120      	movs	r1, #32
 8002ba8:	0028      	movs	r0, r5
 8002baa:	1aca      	subs	r2, r1, r3
 8002bac:	40d0      	lsrs	r0, r2
 8002bae:	409c      	lsls	r4, r3
 8002bb0:	0002      	movs	r2, r0
 8002bb2:	409d      	lsls	r5, r3
 8002bb4:	4322      	orrs	r2, r4
 8002bb6:	429f      	cmp	r7, r3
 8002bb8:	dd00      	ble.n	8002bbc <__aeabi_dsub+0xf4>
 8002bba:	e177      	b.n	8002eac <__aeabi_dsub+0x3e4>
 8002bbc:	1bd8      	subs	r0, r3, r7
 8002bbe:	3001      	adds	r0, #1
 8002bc0:	1a09      	subs	r1, r1, r0
 8002bc2:	002c      	movs	r4, r5
 8002bc4:	408d      	lsls	r5, r1
 8002bc6:	40c4      	lsrs	r4, r0
 8002bc8:	1e6b      	subs	r3, r5, #1
 8002bca:	419d      	sbcs	r5, r3
 8002bcc:	0013      	movs	r3, r2
 8002bce:	40c2      	lsrs	r2, r0
 8002bd0:	408b      	lsls	r3, r1
 8002bd2:	4325      	orrs	r5, r4
 8002bd4:	2700      	movs	r7, #0
 8002bd6:	0014      	movs	r4, r2
 8002bd8:	431d      	orrs	r5, r3
 8002bda:	076b      	lsls	r3, r5, #29
 8002bdc:	d009      	beq.n	8002bf2 <__aeabi_dsub+0x12a>
 8002bde:	230f      	movs	r3, #15
 8002be0:	402b      	ands	r3, r5
 8002be2:	2b04      	cmp	r3, #4
 8002be4:	d005      	beq.n	8002bf2 <__aeabi_dsub+0x12a>
 8002be6:	1d2b      	adds	r3, r5, #4
 8002be8:	42ab      	cmp	r3, r5
 8002bea:	41ad      	sbcs	r5, r5
 8002bec:	426d      	negs	r5, r5
 8002bee:	1964      	adds	r4, r4, r5
 8002bf0:	001d      	movs	r5, r3
 8002bf2:	0223      	lsls	r3, r4, #8
 8002bf4:	d400      	bmi.n	8002bf8 <__aeabi_dsub+0x130>
 8002bf6:	e140      	b.n	8002e7a <__aeabi_dsub+0x3b2>
 8002bf8:	4a88      	ldr	r2, [pc, #544]	@ (8002e1c <__aeabi_dsub+0x354>)
 8002bfa:	3701      	adds	r7, #1
 8002bfc:	4297      	cmp	r7, r2
 8002bfe:	d100      	bne.n	8002c02 <__aeabi_dsub+0x13a>
 8002c00:	e101      	b.n	8002e06 <__aeabi_dsub+0x33e>
 8002c02:	2601      	movs	r6, #1
 8002c04:	4643      	mov	r3, r8
 8002c06:	4986      	ldr	r1, [pc, #536]	@ (8002e20 <__aeabi_dsub+0x358>)
 8002c08:	08ed      	lsrs	r5, r5, #3
 8002c0a:	4021      	ands	r1, r4
 8002c0c:	074a      	lsls	r2, r1, #29
 8002c0e:	432a      	orrs	r2, r5
 8002c10:	057c      	lsls	r4, r7, #21
 8002c12:	024d      	lsls	r5, r1, #9
 8002c14:	0b2d      	lsrs	r5, r5, #12
 8002c16:	0d64      	lsrs	r4, r4, #21
 8002c18:	401e      	ands	r6, r3
 8002c1a:	0524      	lsls	r4, r4, #20
 8002c1c:	432c      	orrs	r4, r5
 8002c1e:	07f6      	lsls	r6, r6, #31
 8002c20:	4334      	orrs	r4, r6
 8002c22:	0010      	movs	r0, r2
 8002c24:	0021      	movs	r1, r4
 8002c26:	b005      	add	sp, #20
 8002c28:	bcf0      	pop	{r4, r5, r6, r7}
 8002c2a:	46bb      	mov	fp, r7
 8002c2c:	46b2      	mov	sl, r6
 8002c2e:	46a9      	mov	r9, r5
 8002c30:	46a0      	mov	r8, r4
 8002c32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c34:	2d00      	cmp	r5, #0
 8002c36:	dc00      	bgt.n	8002c3a <__aeabi_dsub+0x172>
 8002c38:	e2d0      	b.n	80031dc <__aeabi_dsub+0x714>
 8002c3a:	4649      	mov	r1, r9
 8002c3c:	2900      	cmp	r1, #0
 8002c3e:	d000      	beq.n	8002c42 <__aeabi_dsub+0x17a>
 8002c40:	e0d4      	b.n	8002dec <__aeabi_dsub+0x324>
 8002c42:	4661      	mov	r1, ip
 8002c44:	9b02      	ldr	r3, [sp, #8]
 8002c46:	4319      	orrs	r1, r3
 8002c48:	d100      	bne.n	8002c4c <__aeabi_dsub+0x184>
 8002c4a:	e12b      	b.n	8002ea4 <__aeabi_dsub+0x3dc>
 8002c4c:	1e69      	subs	r1, r5, #1
 8002c4e:	2d01      	cmp	r5, #1
 8002c50:	d100      	bne.n	8002c54 <__aeabi_dsub+0x18c>
 8002c52:	e1d9      	b.n	8003008 <__aeabi_dsub+0x540>
 8002c54:	4295      	cmp	r5, r2
 8002c56:	d100      	bne.n	8002c5a <__aeabi_dsub+0x192>
 8002c58:	e10a      	b.n	8002e70 <__aeabi_dsub+0x3a8>
 8002c5a:	2501      	movs	r5, #1
 8002c5c:	2938      	cmp	r1, #56	@ 0x38
 8002c5e:	dc17      	bgt.n	8002c90 <__aeabi_dsub+0x1c8>
 8002c60:	468a      	mov	sl, r1
 8002c62:	4653      	mov	r3, sl
 8002c64:	2b1f      	cmp	r3, #31
 8002c66:	dd00      	ble.n	8002c6a <__aeabi_dsub+0x1a2>
 8002c68:	e1e7      	b.n	800303a <__aeabi_dsub+0x572>
 8002c6a:	2220      	movs	r2, #32
 8002c6c:	1ad2      	subs	r2, r2, r3
 8002c6e:	9b02      	ldr	r3, [sp, #8]
 8002c70:	4661      	mov	r1, ip
 8002c72:	4093      	lsls	r3, r2
 8002c74:	001d      	movs	r5, r3
 8002c76:	4653      	mov	r3, sl
 8002c78:	40d9      	lsrs	r1, r3
 8002c7a:	4663      	mov	r3, ip
 8002c7c:	4093      	lsls	r3, r2
 8002c7e:	001a      	movs	r2, r3
 8002c80:	430d      	orrs	r5, r1
 8002c82:	1e51      	subs	r1, r2, #1
 8002c84:	418a      	sbcs	r2, r1
 8002c86:	4653      	mov	r3, sl
 8002c88:	4315      	orrs	r5, r2
 8002c8a:	9a02      	ldr	r2, [sp, #8]
 8002c8c:	40da      	lsrs	r2, r3
 8002c8e:	18a4      	adds	r4, r4, r2
 8002c90:	182d      	adds	r5, r5, r0
 8002c92:	4285      	cmp	r5, r0
 8002c94:	4180      	sbcs	r0, r0
 8002c96:	4240      	negs	r0, r0
 8002c98:	1824      	adds	r4, r4, r0
 8002c9a:	0223      	lsls	r3, r4, #8
 8002c9c:	d400      	bmi.n	8002ca0 <__aeabi_dsub+0x1d8>
 8002c9e:	e0b6      	b.n	8002e0e <__aeabi_dsub+0x346>
 8002ca0:	4b5e      	ldr	r3, [pc, #376]	@ (8002e1c <__aeabi_dsub+0x354>)
 8002ca2:	3701      	adds	r7, #1
 8002ca4:	429f      	cmp	r7, r3
 8002ca6:	d100      	bne.n	8002caa <__aeabi_dsub+0x1e2>
 8002ca8:	e0ad      	b.n	8002e06 <__aeabi_dsub+0x33e>
 8002caa:	2101      	movs	r1, #1
 8002cac:	4b5c      	ldr	r3, [pc, #368]	@ (8002e20 <__aeabi_dsub+0x358>)
 8002cae:	086a      	lsrs	r2, r5, #1
 8002cb0:	401c      	ands	r4, r3
 8002cb2:	4029      	ands	r1, r5
 8002cb4:	430a      	orrs	r2, r1
 8002cb6:	07e5      	lsls	r5, r4, #31
 8002cb8:	4315      	orrs	r5, r2
 8002cba:	0864      	lsrs	r4, r4, #1
 8002cbc:	e78d      	b.n	8002bda <__aeabi_dsub+0x112>
 8002cbe:	4a59      	ldr	r2, [pc, #356]	@ (8002e24 <__aeabi_dsub+0x35c>)
 8002cc0:	9b02      	ldr	r3, [sp, #8]
 8002cc2:	4692      	mov	sl, r2
 8002cc4:	4662      	mov	r2, ip
 8002cc6:	44ba      	add	sl, r7
 8002cc8:	431a      	orrs	r2, r3
 8002cca:	d02c      	beq.n	8002d26 <__aeabi_dsub+0x25e>
 8002ccc:	428e      	cmp	r6, r1
 8002cce:	d02e      	beq.n	8002d2e <__aeabi_dsub+0x266>
 8002cd0:	4652      	mov	r2, sl
 8002cd2:	2a00      	cmp	r2, #0
 8002cd4:	d060      	beq.n	8002d98 <__aeabi_dsub+0x2d0>
 8002cd6:	2f00      	cmp	r7, #0
 8002cd8:	d100      	bne.n	8002cdc <__aeabi_dsub+0x214>
 8002cda:	e0db      	b.n	8002e94 <__aeabi_dsub+0x3cc>
 8002cdc:	4663      	mov	r3, ip
 8002cde:	000e      	movs	r6, r1
 8002ce0:	9c02      	ldr	r4, [sp, #8]
 8002ce2:	08d8      	lsrs	r0, r3, #3
 8002ce4:	0762      	lsls	r2, r4, #29
 8002ce6:	4302      	orrs	r2, r0
 8002ce8:	08e4      	lsrs	r4, r4, #3
 8002cea:	0013      	movs	r3, r2
 8002cec:	4323      	orrs	r3, r4
 8002cee:	d100      	bne.n	8002cf2 <__aeabi_dsub+0x22a>
 8002cf0:	e254      	b.n	800319c <__aeabi_dsub+0x6d4>
 8002cf2:	2580      	movs	r5, #128	@ 0x80
 8002cf4:	032d      	lsls	r5, r5, #12
 8002cf6:	4325      	orrs	r5, r4
 8002cf8:	032d      	lsls	r5, r5, #12
 8002cfa:	4c48      	ldr	r4, [pc, #288]	@ (8002e1c <__aeabi_dsub+0x354>)
 8002cfc:	0b2d      	lsrs	r5, r5, #12
 8002cfe:	e78c      	b.n	8002c1a <__aeabi_dsub+0x152>
 8002d00:	4661      	mov	r1, ip
 8002d02:	9b02      	ldr	r3, [sp, #8]
 8002d04:	4319      	orrs	r1, r3
 8002d06:	d100      	bne.n	8002d0a <__aeabi_dsub+0x242>
 8002d08:	e0cc      	b.n	8002ea4 <__aeabi_dsub+0x3dc>
 8002d0a:	0029      	movs	r1, r5
 8002d0c:	3901      	subs	r1, #1
 8002d0e:	2d01      	cmp	r5, #1
 8002d10:	d100      	bne.n	8002d14 <__aeabi_dsub+0x24c>
 8002d12:	e188      	b.n	8003026 <__aeabi_dsub+0x55e>
 8002d14:	4295      	cmp	r5, r2
 8002d16:	d100      	bne.n	8002d1a <__aeabi_dsub+0x252>
 8002d18:	e0aa      	b.n	8002e70 <__aeabi_dsub+0x3a8>
 8002d1a:	2501      	movs	r5, #1
 8002d1c:	2938      	cmp	r1, #56	@ 0x38
 8002d1e:	dd00      	ble.n	8002d22 <__aeabi_dsub+0x25a>
 8002d20:	e72f      	b.n	8002b82 <__aeabi_dsub+0xba>
 8002d22:	468a      	mov	sl, r1
 8002d24:	e718      	b.n	8002b58 <__aeabi_dsub+0x90>
 8002d26:	2201      	movs	r2, #1
 8002d28:	4051      	eors	r1, r2
 8002d2a:	428e      	cmp	r6, r1
 8002d2c:	d1d0      	bne.n	8002cd0 <__aeabi_dsub+0x208>
 8002d2e:	4653      	mov	r3, sl
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d100      	bne.n	8002d36 <__aeabi_dsub+0x26e>
 8002d34:	e0be      	b.n	8002eb4 <__aeabi_dsub+0x3ec>
 8002d36:	2f00      	cmp	r7, #0
 8002d38:	d000      	beq.n	8002d3c <__aeabi_dsub+0x274>
 8002d3a:	e138      	b.n	8002fae <__aeabi_dsub+0x4e6>
 8002d3c:	46ca      	mov	sl, r9
 8002d3e:	0022      	movs	r2, r4
 8002d40:	4302      	orrs	r2, r0
 8002d42:	d100      	bne.n	8002d46 <__aeabi_dsub+0x27e>
 8002d44:	e1e2      	b.n	800310c <__aeabi_dsub+0x644>
 8002d46:	4653      	mov	r3, sl
 8002d48:	1e59      	subs	r1, r3, #1
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d100      	bne.n	8002d50 <__aeabi_dsub+0x288>
 8002d4e:	e20d      	b.n	800316c <__aeabi_dsub+0x6a4>
 8002d50:	4a32      	ldr	r2, [pc, #200]	@ (8002e1c <__aeabi_dsub+0x354>)
 8002d52:	4592      	cmp	sl, r2
 8002d54:	d100      	bne.n	8002d58 <__aeabi_dsub+0x290>
 8002d56:	e1d2      	b.n	80030fe <__aeabi_dsub+0x636>
 8002d58:	2701      	movs	r7, #1
 8002d5a:	2938      	cmp	r1, #56	@ 0x38
 8002d5c:	dc13      	bgt.n	8002d86 <__aeabi_dsub+0x2be>
 8002d5e:	291f      	cmp	r1, #31
 8002d60:	dd00      	ble.n	8002d64 <__aeabi_dsub+0x29c>
 8002d62:	e1ee      	b.n	8003142 <__aeabi_dsub+0x67a>
 8002d64:	2220      	movs	r2, #32
 8002d66:	9b02      	ldr	r3, [sp, #8]
 8002d68:	1a52      	subs	r2, r2, r1
 8002d6a:	0025      	movs	r5, r4
 8002d6c:	0007      	movs	r7, r0
 8002d6e:	469a      	mov	sl, r3
 8002d70:	40cc      	lsrs	r4, r1
 8002d72:	4090      	lsls	r0, r2
 8002d74:	4095      	lsls	r5, r2
 8002d76:	40cf      	lsrs	r7, r1
 8002d78:	44a2      	add	sl, r4
 8002d7a:	1e42      	subs	r2, r0, #1
 8002d7c:	4190      	sbcs	r0, r2
 8002d7e:	4653      	mov	r3, sl
 8002d80:	432f      	orrs	r7, r5
 8002d82:	4307      	orrs	r7, r0
 8002d84:	9302      	str	r3, [sp, #8]
 8002d86:	003d      	movs	r5, r7
 8002d88:	4465      	add	r5, ip
 8002d8a:	4565      	cmp	r5, ip
 8002d8c:	4192      	sbcs	r2, r2
 8002d8e:	9b02      	ldr	r3, [sp, #8]
 8002d90:	4252      	negs	r2, r2
 8002d92:	464f      	mov	r7, r9
 8002d94:	18d4      	adds	r4, r2, r3
 8002d96:	e780      	b.n	8002c9a <__aeabi_dsub+0x1d2>
 8002d98:	4a23      	ldr	r2, [pc, #140]	@ (8002e28 <__aeabi_dsub+0x360>)
 8002d9a:	1c7d      	adds	r5, r7, #1
 8002d9c:	4215      	tst	r5, r2
 8002d9e:	d000      	beq.n	8002da2 <__aeabi_dsub+0x2da>
 8002da0:	e0aa      	b.n	8002ef8 <__aeabi_dsub+0x430>
 8002da2:	4662      	mov	r2, ip
 8002da4:	0025      	movs	r5, r4
 8002da6:	9b02      	ldr	r3, [sp, #8]
 8002da8:	4305      	orrs	r5, r0
 8002daa:	431a      	orrs	r2, r3
 8002dac:	2f00      	cmp	r7, #0
 8002dae:	d000      	beq.n	8002db2 <__aeabi_dsub+0x2ea>
 8002db0:	e0f5      	b.n	8002f9e <__aeabi_dsub+0x4d6>
 8002db2:	2d00      	cmp	r5, #0
 8002db4:	d100      	bne.n	8002db8 <__aeabi_dsub+0x2f0>
 8002db6:	e16b      	b.n	8003090 <__aeabi_dsub+0x5c8>
 8002db8:	2a00      	cmp	r2, #0
 8002dba:	d100      	bne.n	8002dbe <__aeabi_dsub+0x2f6>
 8002dbc:	e152      	b.n	8003064 <__aeabi_dsub+0x59c>
 8002dbe:	4663      	mov	r3, ip
 8002dc0:	1ac5      	subs	r5, r0, r3
 8002dc2:	9b02      	ldr	r3, [sp, #8]
 8002dc4:	1ae2      	subs	r2, r4, r3
 8002dc6:	42a8      	cmp	r0, r5
 8002dc8:	419b      	sbcs	r3, r3
 8002dca:	425b      	negs	r3, r3
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	021a      	lsls	r2, r3, #8
 8002dd0:	d400      	bmi.n	8002dd4 <__aeabi_dsub+0x30c>
 8002dd2:	e1d5      	b.n	8003180 <__aeabi_dsub+0x6b8>
 8002dd4:	4663      	mov	r3, ip
 8002dd6:	1a1d      	subs	r5, r3, r0
 8002dd8:	45ac      	cmp	ip, r5
 8002dda:	4192      	sbcs	r2, r2
 8002ddc:	2601      	movs	r6, #1
 8002dde:	9b02      	ldr	r3, [sp, #8]
 8002de0:	4252      	negs	r2, r2
 8002de2:	1b1c      	subs	r4, r3, r4
 8002de4:	4688      	mov	r8, r1
 8002de6:	1aa4      	subs	r4, r4, r2
 8002de8:	400e      	ands	r6, r1
 8002dea:	e6f6      	b.n	8002bda <__aeabi_dsub+0x112>
 8002dec:	4297      	cmp	r7, r2
 8002dee:	d03f      	beq.n	8002e70 <__aeabi_dsub+0x3a8>
 8002df0:	4652      	mov	r2, sl
 8002df2:	2501      	movs	r5, #1
 8002df4:	2a38      	cmp	r2, #56	@ 0x38
 8002df6:	dd00      	ble.n	8002dfa <__aeabi_dsub+0x332>
 8002df8:	e74a      	b.n	8002c90 <__aeabi_dsub+0x1c8>
 8002dfa:	2280      	movs	r2, #128	@ 0x80
 8002dfc:	9b02      	ldr	r3, [sp, #8]
 8002dfe:	0412      	lsls	r2, r2, #16
 8002e00:	4313      	orrs	r3, r2
 8002e02:	9302      	str	r3, [sp, #8]
 8002e04:	e72d      	b.n	8002c62 <__aeabi_dsub+0x19a>
 8002e06:	003c      	movs	r4, r7
 8002e08:	2500      	movs	r5, #0
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	e705      	b.n	8002c1a <__aeabi_dsub+0x152>
 8002e0e:	2307      	movs	r3, #7
 8002e10:	402b      	ands	r3, r5
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d000      	beq.n	8002e18 <__aeabi_dsub+0x350>
 8002e16:	e6e2      	b.n	8002bde <__aeabi_dsub+0x116>
 8002e18:	e06b      	b.n	8002ef2 <__aeabi_dsub+0x42a>
 8002e1a:	46c0      	nop			@ (mov r8, r8)
 8002e1c:	000007ff 	.word	0x000007ff
 8002e20:	ff7fffff 	.word	0xff7fffff
 8002e24:	fffff801 	.word	0xfffff801
 8002e28:	000007fe 	.word	0x000007fe
 8002e2c:	0028      	movs	r0, r5
 8002e2e:	f000 fb63 	bl	80034f8 <__clzsi2>
 8002e32:	0003      	movs	r3, r0
 8002e34:	3318      	adds	r3, #24
 8002e36:	2b1f      	cmp	r3, #31
 8002e38:	dc00      	bgt.n	8002e3c <__aeabi_dsub+0x374>
 8002e3a:	e6b4      	b.n	8002ba6 <__aeabi_dsub+0xde>
 8002e3c:	002a      	movs	r2, r5
 8002e3e:	3808      	subs	r0, #8
 8002e40:	4082      	lsls	r2, r0
 8002e42:	429f      	cmp	r7, r3
 8002e44:	dd00      	ble.n	8002e48 <__aeabi_dsub+0x380>
 8002e46:	e0b9      	b.n	8002fbc <__aeabi_dsub+0x4f4>
 8002e48:	1bdb      	subs	r3, r3, r7
 8002e4a:	1c58      	adds	r0, r3, #1
 8002e4c:	281f      	cmp	r0, #31
 8002e4e:	dc00      	bgt.n	8002e52 <__aeabi_dsub+0x38a>
 8002e50:	e1a0      	b.n	8003194 <__aeabi_dsub+0x6cc>
 8002e52:	0015      	movs	r5, r2
 8002e54:	3b1f      	subs	r3, #31
 8002e56:	40dd      	lsrs	r5, r3
 8002e58:	2820      	cmp	r0, #32
 8002e5a:	d005      	beq.n	8002e68 <__aeabi_dsub+0x3a0>
 8002e5c:	2340      	movs	r3, #64	@ 0x40
 8002e5e:	1a1b      	subs	r3, r3, r0
 8002e60:	409a      	lsls	r2, r3
 8002e62:	1e53      	subs	r3, r2, #1
 8002e64:	419a      	sbcs	r2, r3
 8002e66:	4315      	orrs	r5, r2
 8002e68:	2307      	movs	r3, #7
 8002e6a:	2700      	movs	r7, #0
 8002e6c:	402b      	ands	r3, r5
 8002e6e:	e7d0      	b.n	8002e12 <__aeabi_dsub+0x34a>
 8002e70:	08c0      	lsrs	r0, r0, #3
 8002e72:	0762      	lsls	r2, r4, #29
 8002e74:	4302      	orrs	r2, r0
 8002e76:	08e4      	lsrs	r4, r4, #3
 8002e78:	e737      	b.n	8002cea <__aeabi_dsub+0x222>
 8002e7a:	08ea      	lsrs	r2, r5, #3
 8002e7c:	0763      	lsls	r3, r4, #29
 8002e7e:	431a      	orrs	r2, r3
 8002e80:	4bd3      	ldr	r3, [pc, #844]	@ (80031d0 <__aeabi_dsub+0x708>)
 8002e82:	08e4      	lsrs	r4, r4, #3
 8002e84:	429f      	cmp	r7, r3
 8002e86:	d100      	bne.n	8002e8a <__aeabi_dsub+0x3c2>
 8002e88:	e72f      	b.n	8002cea <__aeabi_dsub+0x222>
 8002e8a:	0324      	lsls	r4, r4, #12
 8002e8c:	0b25      	lsrs	r5, r4, #12
 8002e8e:	057c      	lsls	r4, r7, #21
 8002e90:	0d64      	lsrs	r4, r4, #21
 8002e92:	e6c2      	b.n	8002c1a <__aeabi_dsub+0x152>
 8002e94:	46ca      	mov	sl, r9
 8002e96:	0022      	movs	r2, r4
 8002e98:	4302      	orrs	r2, r0
 8002e9a:	d158      	bne.n	8002f4e <__aeabi_dsub+0x486>
 8002e9c:	4663      	mov	r3, ip
 8002e9e:	000e      	movs	r6, r1
 8002ea0:	9c02      	ldr	r4, [sp, #8]
 8002ea2:	9303      	str	r3, [sp, #12]
 8002ea4:	9b03      	ldr	r3, [sp, #12]
 8002ea6:	4657      	mov	r7, sl
 8002ea8:	08da      	lsrs	r2, r3, #3
 8002eaa:	e7e7      	b.n	8002e7c <__aeabi_dsub+0x3b4>
 8002eac:	4cc9      	ldr	r4, [pc, #804]	@ (80031d4 <__aeabi_dsub+0x70c>)
 8002eae:	1aff      	subs	r7, r7, r3
 8002eb0:	4014      	ands	r4, r2
 8002eb2:	e692      	b.n	8002bda <__aeabi_dsub+0x112>
 8002eb4:	4dc8      	ldr	r5, [pc, #800]	@ (80031d8 <__aeabi_dsub+0x710>)
 8002eb6:	1c7a      	adds	r2, r7, #1
 8002eb8:	422a      	tst	r2, r5
 8002eba:	d000      	beq.n	8002ebe <__aeabi_dsub+0x3f6>
 8002ebc:	e084      	b.n	8002fc8 <__aeabi_dsub+0x500>
 8002ebe:	0022      	movs	r2, r4
 8002ec0:	4302      	orrs	r2, r0
 8002ec2:	2f00      	cmp	r7, #0
 8002ec4:	d000      	beq.n	8002ec8 <__aeabi_dsub+0x400>
 8002ec6:	e0ef      	b.n	80030a8 <__aeabi_dsub+0x5e0>
 8002ec8:	2a00      	cmp	r2, #0
 8002eca:	d100      	bne.n	8002ece <__aeabi_dsub+0x406>
 8002ecc:	e0e5      	b.n	800309a <__aeabi_dsub+0x5d2>
 8002ece:	4662      	mov	r2, ip
 8002ed0:	9902      	ldr	r1, [sp, #8]
 8002ed2:	430a      	orrs	r2, r1
 8002ed4:	d100      	bne.n	8002ed8 <__aeabi_dsub+0x410>
 8002ed6:	e0c5      	b.n	8003064 <__aeabi_dsub+0x59c>
 8002ed8:	4663      	mov	r3, ip
 8002eda:	18c5      	adds	r5, r0, r3
 8002edc:	468c      	mov	ip, r1
 8002ede:	4285      	cmp	r5, r0
 8002ee0:	4180      	sbcs	r0, r0
 8002ee2:	4464      	add	r4, ip
 8002ee4:	4240      	negs	r0, r0
 8002ee6:	1824      	adds	r4, r4, r0
 8002ee8:	0223      	lsls	r3, r4, #8
 8002eea:	d502      	bpl.n	8002ef2 <__aeabi_dsub+0x42a>
 8002eec:	4bb9      	ldr	r3, [pc, #740]	@ (80031d4 <__aeabi_dsub+0x70c>)
 8002eee:	3701      	adds	r7, #1
 8002ef0:	401c      	ands	r4, r3
 8002ef2:	46ba      	mov	sl, r7
 8002ef4:	9503      	str	r5, [sp, #12]
 8002ef6:	e7d5      	b.n	8002ea4 <__aeabi_dsub+0x3dc>
 8002ef8:	4662      	mov	r2, ip
 8002efa:	1a85      	subs	r5, r0, r2
 8002efc:	42a8      	cmp	r0, r5
 8002efe:	4192      	sbcs	r2, r2
 8002f00:	4252      	negs	r2, r2
 8002f02:	4691      	mov	r9, r2
 8002f04:	9b02      	ldr	r3, [sp, #8]
 8002f06:	1ae3      	subs	r3, r4, r3
 8002f08:	001a      	movs	r2, r3
 8002f0a:	464b      	mov	r3, r9
 8002f0c:	1ad2      	subs	r2, r2, r3
 8002f0e:	0013      	movs	r3, r2
 8002f10:	4691      	mov	r9, r2
 8002f12:	021a      	lsls	r2, r3, #8
 8002f14:	d46c      	bmi.n	8002ff0 <__aeabi_dsub+0x528>
 8002f16:	464a      	mov	r2, r9
 8002f18:	464c      	mov	r4, r9
 8002f1a:	432a      	orrs	r2, r5
 8002f1c:	d000      	beq.n	8002f20 <__aeabi_dsub+0x458>
 8002f1e:	e63a      	b.n	8002b96 <__aeabi_dsub+0xce>
 8002f20:	2600      	movs	r6, #0
 8002f22:	2400      	movs	r4, #0
 8002f24:	2500      	movs	r5, #0
 8002f26:	e678      	b.n	8002c1a <__aeabi_dsub+0x152>
 8002f28:	9902      	ldr	r1, [sp, #8]
 8002f2a:	4653      	mov	r3, sl
 8002f2c:	000d      	movs	r5, r1
 8002f2e:	3a20      	subs	r2, #32
 8002f30:	40d5      	lsrs	r5, r2
 8002f32:	2b20      	cmp	r3, #32
 8002f34:	d006      	beq.n	8002f44 <__aeabi_dsub+0x47c>
 8002f36:	2240      	movs	r2, #64	@ 0x40
 8002f38:	1ad2      	subs	r2, r2, r3
 8002f3a:	000b      	movs	r3, r1
 8002f3c:	4093      	lsls	r3, r2
 8002f3e:	4662      	mov	r2, ip
 8002f40:	431a      	orrs	r2, r3
 8002f42:	4693      	mov	fp, r2
 8002f44:	465b      	mov	r3, fp
 8002f46:	1e5a      	subs	r2, r3, #1
 8002f48:	4193      	sbcs	r3, r2
 8002f4a:	431d      	orrs	r5, r3
 8002f4c:	e619      	b.n	8002b82 <__aeabi_dsub+0xba>
 8002f4e:	4653      	mov	r3, sl
 8002f50:	1e5a      	subs	r2, r3, #1
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d100      	bne.n	8002f58 <__aeabi_dsub+0x490>
 8002f56:	e0c6      	b.n	80030e6 <__aeabi_dsub+0x61e>
 8002f58:	4e9d      	ldr	r6, [pc, #628]	@ (80031d0 <__aeabi_dsub+0x708>)
 8002f5a:	45b2      	cmp	sl, r6
 8002f5c:	d100      	bne.n	8002f60 <__aeabi_dsub+0x498>
 8002f5e:	e6bd      	b.n	8002cdc <__aeabi_dsub+0x214>
 8002f60:	4688      	mov	r8, r1
 8002f62:	000e      	movs	r6, r1
 8002f64:	2501      	movs	r5, #1
 8002f66:	2a38      	cmp	r2, #56	@ 0x38
 8002f68:	dc10      	bgt.n	8002f8c <__aeabi_dsub+0x4c4>
 8002f6a:	2a1f      	cmp	r2, #31
 8002f6c:	dc7f      	bgt.n	800306e <__aeabi_dsub+0x5a6>
 8002f6e:	2120      	movs	r1, #32
 8002f70:	0025      	movs	r5, r4
 8002f72:	1a89      	subs	r1, r1, r2
 8002f74:	0007      	movs	r7, r0
 8002f76:	4088      	lsls	r0, r1
 8002f78:	408d      	lsls	r5, r1
 8002f7a:	40d7      	lsrs	r7, r2
 8002f7c:	40d4      	lsrs	r4, r2
 8002f7e:	1e41      	subs	r1, r0, #1
 8002f80:	4188      	sbcs	r0, r1
 8002f82:	9b02      	ldr	r3, [sp, #8]
 8002f84:	433d      	orrs	r5, r7
 8002f86:	1b1b      	subs	r3, r3, r4
 8002f88:	4305      	orrs	r5, r0
 8002f8a:	9302      	str	r3, [sp, #8]
 8002f8c:	4662      	mov	r2, ip
 8002f8e:	1b55      	subs	r5, r2, r5
 8002f90:	45ac      	cmp	ip, r5
 8002f92:	4192      	sbcs	r2, r2
 8002f94:	9b02      	ldr	r3, [sp, #8]
 8002f96:	4252      	negs	r2, r2
 8002f98:	464f      	mov	r7, r9
 8002f9a:	1a9c      	subs	r4, r3, r2
 8002f9c:	e5f6      	b.n	8002b8c <__aeabi_dsub+0xc4>
 8002f9e:	2d00      	cmp	r5, #0
 8002fa0:	d000      	beq.n	8002fa4 <__aeabi_dsub+0x4dc>
 8002fa2:	e0b7      	b.n	8003114 <__aeabi_dsub+0x64c>
 8002fa4:	2a00      	cmp	r2, #0
 8002fa6:	d100      	bne.n	8002faa <__aeabi_dsub+0x4e2>
 8002fa8:	e0f0      	b.n	800318c <__aeabi_dsub+0x6c4>
 8002faa:	2601      	movs	r6, #1
 8002fac:	400e      	ands	r6, r1
 8002fae:	4663      	mov	r3, ip
 8002fb0:	9802      	ldr	r0, [sp, #8]
 8002fb2:	08d9      	lsrs	r1, r3, #3
 8002fb4:	0742      	lsls	r2, r0, #29
 8002fb6:	430a      	orrs	r2, r1
 8002fb8:	08c4      	lsrs	r4, r0, #3
 8002fba:	e696      	b.n	8002cea <__aeabi_dsub+0x222>
 8002fbc:	4c85      	ldr	r4, [pc, #532]	@ (80031d4 <__aeabi_dsub+0x70c>)
 8002fbe:	1aff      	subs	r7, r7, r3
 8002fc0:	4014      	ands	r4, r2
 8002fc2:	0762      	lsls	r2, r4, #29
 8002fc4:	08e4      	lsrs	r4, r4, #3
 8002fc6:	e760      	b.n	8002e8a <__aeabi_dsub+0x3c2>
 8002fc8:	4981      	ldr	r1, [pc, #516]	@ (80031d0 <__aeabi_dsub+0x708>)
 8002fca:	428a      	cmp	r2, r1
 8002fcc:	d100      	bne.n	8002fd0 <__aeabi_dsub+0x508>
 8002fce:	e0c9      	b.n	8003164 <__aeabi_dsub+0x69c>
 8002fd0:	4663      	mov	r3, ip
 8002fd2:	18c1      	adds	r1, r0, r3
 8002fd4:	4281      	cmp	r1, r0
 8002fd6:	4180      	sbcs	r0, r0
 8002fd8:	9b02      	ldr	r3, [sp, #8]
 8002fda:	4240      	negs	r0, r0
 8002fdc:	18e3      	adds	r3, r4, r3
 8002fde:	181b      	adds	r3, r3, r0
 8002fe0:	07dd      	lsls	r5, r3, #31
 8002fe2:	085c      	lsrs	r4, r3, #1
 8002fe4:	2307      	movs	r3, #7
 8002fe6:	0849      	lsrs	r1, r1, #1
 8002fe8:	430d      	orrs	r5, r1
 8002fea:	0017      	movs	r7, r2
 8002fec:	402b      	ands	r3, r5
 8002fee:	e710      	b.n	8002e12 <__aeabi_dsub+0x34a>
 8002ff0:	4663      	mov	r3, ip
 8002ff2:	1a1d      	subs	r5, r3, r0
 8002ff4:	45ac      	cmp	ip, r5
 8002ff6:	4192      	sbcs	r2, r2
 8002ff8:	2601      	movs	r6, #1
 8002ffa:	9b02      	ldr	r3, [sp, #8]
 8002ffc:	4252      	negs	r2, r2
 8002ffe:	1b1c      	subs	r4, r3, r4
 8003000:	4688      	mov	r8, r1
 8003002:	1aa4      	subs	r4, r4, r2
 8003004:	400e      	ands	r6, r1
 8003006:	e5c6      	b.n	8002b96 <__aeabi_dsub+0xce>
 8003008:	4663      	mov	r3, ip
 800300a:	18c5      	adds	r5, r0, r3
 800300c:	9b02      	ldr	r3, [sp, #8]
 800300e:	4285      	cmp	r5, r0
 8003010:	4180      	sbcs	r0, r0
 8003012:	469c      	mov	ip, r3
 8003014:	4240      	negs	r0, r0
 8003016:	4464      	add	r4, ip
 8003018:	1824      	adds	r4, r4, r0
 800301a:	2701      	movs	r7, #1
 800301c:	0223      	lsls	r3, r4, #8
 800301e:	d400      	bmi.n	8003022 <__aeabi_dsub+0x55a>
 8003020:	e6f5      	b.n	8002e0e <__aeabi_dsub+0x346>
 8003022:	2702      	movs	r7, #2
 8003024:	e641      	b.n	8002caa <__aeabi_dsub+0x1e2>
 8003026:	4663      	mov	r3, ip
 8003028:	1ac5      	subs	r5, r0, r3
 800302a:	42a8      	cmp	r0, r5
 800302c:	4180      	sbcs	r0, r0
 800302e:	9b02      	ldr	r3, [sp, #8]
 8003030:	4240      	negs	r0, r0
 8003032:	1ae4      	subs	r4, r4, r3
 8003034:	2701      	movs	r7, #1
 8003036:	1a24      	subs	r4, r4, r0
 8003038:	e5a8      	b.n	8002b8c <__aeabi_dsub+0xc4>
 800303a:	9d02      	ldr	r5, [sp, #8]
 800303c:	4652      	mov	r2, sl
 800303e:	002b      	movs	r3, r5
 8003040:	3a20      	subs	r2, #32
 8003042:	40d3      	lsrs	r3, r2
 8003044:	0019      	movs	r1, r3
 8003046:	4653      	mov	r3, sl
 8003048:	2b20      	cmp	r3, #32
 800304a:	d006      	beq.n	800305a <__aeabi_dsub+0x592>
 800304c:	2240      	movs	r2, #64	@ 0x40
 800304e:	1ad2      	subs	r2, r2, r3
 8003050:	002b      	movs	r3, r5
 8003052:	4093      	lsls	r3, r2
 8003054:	4662      	mov	r2, ip
 8003056:	431a      	orrs	r2, r3
 8003058:	4693      	mov	fp, r2
 800305a:	465d      	mov	r5, fp
 800305c:	1e6b      	subs	r3, r5, #1
 800305e:	419d      	sbcs	r5, r3
 8003060:	430d      	orrs	r5, r1
 8003062:	e615      	b.n	8002c90 <__aeabi_dsub+0x1c8>
 8003064:	0762      	lsls	r2, r4, #29
 8003066:	08c0      	lsrs	r0, r0, #3
 8003068:	4302      	orrs	r2, r0
 800306a:	08e4      	lsrs	r4, r4, #3
 800306c:	e70d      	b.n	8002e8a <__aeabi_dsub+0x3c2>
 800306e:	0011      	movs	r1, r2
 8003070:	0027      	movs	r7, r4
 8003072:	3920      	subs	r1, #32
 8003074:	40cf      	lsrs	r7, r1
 8003076:	2a20      	cmp	r2, #32
 8003078:	d005      	beq.n	8003086 <__aeabi_dsub+0x5be>
 800307a:	2140      	movs	r1, #64	@ 0x40
 800307c:	1a8a      	subs	r2, r1, r2
 800307e:	4094      	lsls	r4, r2
 8003080:	0025      	movs	r5, r4
 8003082:	4305      	orrs	r5, r0
 8003084:	9503      	str	r5, [sp, #12]
 8003086:	9d03      	ldr	r5, [sp, #12]
 8003088:	1e6a      	subs	r2, r5, #1
 800308a:	4195      	sbcs	r5, r2
 800308c:	433d      	orrs	r5, r7
 800308e:	e77d      	b.n	8002f8c <__aeabi_dsub+0x4c4>
 8003090:	2a00      	cmp	r2, #0
 8003092:	d100      	bne.n	8003096 <__aeabi_dsub+0x5ce>
 8003094:	e744      	b.n	8002f20 <__aeabi_dsub+0x458>
 8003096:	2601      	movs	r6, #1
 8003098:	400e      	ands	r6, r1
 800309a:	4663      	mov	r3, ip
 800309c:	08d9      	lsrs	r1, r3, #3
 800309e:	9b02      	ldr	r3, [sp, #8]
 80030a0:	075a      	lsls	r2, r3, #29
 80030a2:	430a      	orrs	r2, r1
 80030a4:	08dc      	lsrs	r4, r3, #3
 80030a6:	e6f0      	b.n	8002e8a <__aeabi_dsub+0x3c2>
 80030a8:	2a00      	cmp	r2, #0
 80030aa:	d028      	beq.n	80030fe <__aeabi_dsub+0x636>
 80030ac:	4662      	mov	r2, ip
 80030ae:	9f02      	ldr	r7, [sp, #8]
 80030b0:	08c0      	lsrs	r0, r0, #3
 80030b2:	433a      	orrs	r2, r7
 80030b4:	d100      	bne.n	80030b8 <__aeabi_dsub+0x5f0>
 80030b6:	e6dc      	b.n	8002e72 <__aeabi_dsub+0x3aa>
 80030b8:	0762      	lsls	r2, r4, #29
 80030ba:	4310      	orrs	r0, r2
 80030bc:	2280      	movs	r2, #128	@ 0x80
 80030be:	08e4      	lsrs	r4, r4, #3
 80030c0:	0312      	lsls	r2, r2, #12
 80030c2:	4214      	tst	r4, r2
 80030c4:	d009      	beq.n	80030da <__aeabi_dsub+0x612>
 80030c6:	08fd      	lsrs	r5, r7, #3
 80030c8:	4215      	tst	r5, r2
 80030ca:	d106      	bne.n	80030da <__aeabi_dsub+0x612>
 80030cc:	4663      	mov	r3, ip
 80030ce:	2601      	movs	r6, #1
 80030d0:	002c      	movs	r4, r5
 80030d2:	08d8      	lsrs	r0, r3, #3
 80030d4:	077b      	lsls	r3, r7, #29
 80030d6:	4318      	orrs	r0, r3
 80030d8:	400e      	ands	r6, r1
 80030da:	0f42      	lsrs	r2, r0, #29
 80030dc:	00c0      	lsls	r0, r0, #3
 80030de:	08c0      	lsrs	r0, r0, #3
 80030e0:	0752      	lsls	r2, r2, #29
 80030e2:	4302      	orrs	r2, r0
 80030e4:	e601      	b.n	8002cea <__aeabi_dsub+0x222>
 80030e6:	4663      	mov	r3, ip
 80030e8:	1a1d      	subs	r5, r3, r0
 80030ea:	45ac      	cmp	ip, r5
 80030ec:	4192      	sbcs	r2, r2
 80030ee:	9b02      	ldr	r3, [sp, #8]
 80030f0:	4252      	negs	r2, r2
 80030f2:	1b1c      	subs	r4, r3, r4
 80030f4:	000e      	movs	r6, r1
 80030f6:	4688      	mov	r8, r1
 80030f8:	2701      	movs	r7, #1
 80030fa:	1aa4      	subs	r4, r4, r2
 80030fc:	e546      	b.n	8002b8c <__aeabi_dsub+0xc4>
 80030fe:	4663      	mov	r3, ip
 8003100:	08d9      	lsrs	r1, r3, #3
 8003102:	9b02      	ldr	r3, [sp, #8]
 8003104:	075a      	lsls	r2, r3, #29
 8003106:	430a      	orrs	r2, r1
 8003108:	08dc      	lsrs	r4, r3, #3
 800310a:	e5ee      	b.n	8002cea <__aeabi_dsub+0x222>
 800310c:	4663      	mov	r3, ip
 800310e:	9c02      	ldr	r4, [sp, #8]
 8003110:	9303      	str	r3, [sp, #12]
 8003112:	e6c7      	b.n	8002ea4 <__aeabi_dsub+0x3dc>
 8003114:	08c0      	lsrs	r0, r0, #3
 8003116:	2a00      	cmp	r2, #0
 8003118:	d100      	bne.n	800311c <__aeabi_dsub+0x654>
 800311a:	e6aa      	b.n	8002e72 <__aeabi_dsub+0x3aa>
 800311c:	0762      	lsls	r2, r4, #29
 800311e:	4310      	orrs	r0, r2
 8003120:	2280      	movs	r2, #128	@ 0x80
 8003122:	08e4      	lsrs	r4, r4, #3
 8003124:	0312      	lsls	r2, r2, #12
 8003126:	4214      	tst	r4, r2
 8003128:	d0d7      	beq.n	80030da <__aeabi_dsub+0x612>
 800312a:	9f02      	ldr	r7, [sp, #8]
 800312c:	08fd      	lsrs	r5, r7, #3
 800312e:	4215      	tst	r5, r2
 8003130:	d1d3      	bne.n	80030da <__aeabi_dsub+0x612>
 8003132:	4663      	mov	r3, ip
 8003134:	2601      	movs	r6, #1
 8003136:	08d8      	lsrs	r0, r3, #3
 8003138:	077b      	lsls	r3, r7, #29
 800313a:	002c      	movs	r4, r5
 800313c:	4318      	orrs	r0, r3
 800313e:	400e      	ands	r6, r1
 8003140:	e7cb      	b.n	80030da <__aeabi_dsub+0x612>
 8003142:	000a      	movs	r2, r1
 8003144:	0027      	movs	r7, r4
 8003146:	3a20      	subs	r2, #32
 8003148:	40d7      	lsrs	r7, r2
 800314a:	2920      	cmp	r1, #32
 800314c:	d005      	beq.n	800315a <__aeabi_dsub+0x692>
 800314e:	2240      	movs	r2, #64	@ 0x40
 8003150:	1a52      	subs	r2, r2, r1
 8003152:	4094      	lsls	r4, r2
 8003154:	0025      	movs	r5, r4
 8003156:	4305      	orrs	r5, r0
 8003158:	9503      	str	r5, [sp, #12]
 800315a:	9d03      	ldr	r5, [sp, #12]
 800315c:	1e6a      	subs	r2, r5, #1
 800315e:	4195      	sbcs	r5, r2
 8003160:	432f      	orrs	r7, r5
 8003162:	e610      	b.n	8002d86 <__aeabi_dsub+0x2be>
 8003164:	0014      	movs	r4, r2
 8003166:	2500      	movs	r5, #0
 8003168:	2200      	movs	r2, #0
 800316a:	e556      	b.n	8002c1a <__aeabi_dsub+0x152>
 800316c:	9b02      	ldr	r3, [sp, #8]
 800316e:	4460      	add	r0, ip
 8003170:	4699      	mov	r9, r3
 8003172:	4560      	cmp	r0, ip
 8003174:	4192      	sbcs	r2, r2
 8003176:	444c      	add	r4, r9
 8003178:	4252      	negs	r2, r2
 800317a:	0005      	movs	r5, r0
 800317c:	18a4      	adds	r4, r4, r2
 800317e:	e74c      	b.n	800301a <__aeabi_dsub+0x552>
 8003180:	001a      	movs	r2, r3
 8003182:	001c      	movs	r4, r3
 8003184:	432a      	orrs	r2, r5
 8003186:	d000      	beq.n	800318a <__aeabi_dsub+0x6c2>
 8003188:	e6b3      	b.n	8002ef2 <__aeabi_dsub+0x42a>
 800318a:	e6c9      	b.n	8002f20 <__aeabi_dsub+0x458>
 800318c:	2480      	movs	r4, #128	@ 0x80
 800318e:	2600      	movs	r6, #0
 8003190:	0324      	lsls	r4, r4, #12
 8003192:	e5ae      	b.n	8002cf2 <__aeabi_dsub+0x22a>
 8003194:	2120      	movs	r1, #32
 8003196:	2500      	movs	r5, #0
 8003198:	1a09      	subs	r1, r1, r0
 800319a:	e517      	b.n	8002bcc <__aeabi_dsub+0x104>
 800319c:	2200      	movs	r2, #0
 800319e:	2500      	movs	r5, #0
 80031a0:	4c0b      	ldr	r4, [pc, #44]	@ (80031d0 <__aeabi_dsub+0x708>)
 80031a2:	e53a      	b.n	8002c1a <__aeabi_dsub+0x152>
 80031a4:	2d00      	cmp	r5, #0
 80031a6:	d100      	bne.n	80031aa <__aeabi_dsub+0x6e2>
 80031a8:	e5f6      	b.n	8002d98 <__aeabi_dsub+0x2d0>
 80031aa:	464b      	mov	r3, r9
 80031ac:	1bda      	subs	r2, r3, r7
 80031ae:	4692      	mov	sl, r2
 80031b0:	2f00      	cmp	r7, #0
 80031b2:	d100      	bne.n	80031b6 <__aeabi_dsub+0x6ee>
 80031b4:	e66f      	b.n	8002e96 <__aeabi_dsub+0x3ce>
 80031b6:	2a38      	cmp	r2, #56	@ 0x38
 80031b8:	dc05      	bgt.n	80031c6 <__aeabi_dsub+0x6fe>
 80031ba:	2680      	movs	r6, #128	@ 0x80
 80031bc:	0436      	lsls	r6, r6, #16
 80031be:	4334      	orrs	r4, r6
 80031c0:	4688      	mov	r8, r1
 80031c2:	000e      	movs	r6, r1
 80031c4:	e6d1      	b.n	8002f6a <__aeabi_dsub+0x4a2>
 80031c6:	4688      	mov	r8, r1
 80031c8:	000e      	movs	r6, r1
 80031ca:	2501      	movs	r5, #1
 80031cc:	e6de      	b.n	8002f8c <__aeabi_dsub+0x4c4>
 80031ce:	46c0      	nop			@ (mov r8, r8)
 80031d0:	000007ff 	.word	0x000007ff
 80031d4:	ff7fffff 	.word	0xff7fffff
 80031d8:	000007fe 	.word	0x000007fe
 80031dc:	2d00      	cmp	r5, #0
 80031de:	d100      	bne.n	80031e2 <__aeabi_dsub+0x71a>
 80031e0:	e668      	b.n	8002eb4 <__aeabi_dsub+0x3ec>
 80031e2:	464b      	mov	r3, r9
 80031e4:	1bd9      	subs	r1, r3, r7
 80031e6:	2f00      	cmp	r7, #0
 80031e8:	d101      	bne.n	80031ee <__aeabi_dsub+0x726>
 80031ea:	468a      	mov	sl, r1
 80031ec:	e5a7      	b.n	8002d3e <__aeabi_dsub+0x276>
 80031ee:	2701      	movs	r7, #1
 80031f0:	2938      	cmp	r1, #56	@ 0x38
 80031f2:	dd00      	ble.n	80031f6 <__aeabi_dsub+0x72e>
 80031f4:	e5c7      	b.n	8002d86 <__aeabi_dsub+0x2be>
 80031f6:	2280      	movs	r2, #128	@ 0x80
 80031f8:	0412      	lsls	r2, r2, #16
 80031fa:	4314      	orrs	r4, r2
 80031fc:	e5af      	b.n	8002d5e <__aeabi_dsub+0x296>
 80031fe:	46c0      	nop			@ (mov r8, r8)
>>>>>>> main

08003200 <__aeabi_dcmpun>:
 8003200:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003202:	46c6      	mov	lr, r8
 8003204:	031e      	lsls	r6, r3, #12
 8003206:	0b36      	lsrs	r6, r6, #12
 8003208:	46b0      	mov	r8, r6
 800320a:	4e0d      	ldr	r6, [pc, #52]	@ (8003240 <__aeabi_dcmpun+0x40>)
 800320c:	030c      	lsls	r4, r1, #12
 800320e:	004d      	lsls	r5, r1, #1
 8003210:	005f      	lsls	r7, r3, #1
 8003212:	b500      	push	{lr}
 8003214:	0b24      	lsrs	r4, r4, #12
 8003216:	0d6d      	lsrs	r5, r5, #21
 8003218:	0d7f      	lsrs	r7, r7, #21
 800321a:	42b5      	cmp	r5, r6
 800321c:	d00b      	beq.n	8003236 <__aeabi_dcmpun+0x36>
 800321e:	4908      	ldr	r1, [pc, #32]	@ (8003240 <__aeabi_dcmpun+0x40>)
 8003220:	2000      	movs	r0, #0
 8003222:	428f      	cmp	r7, r1
 8003224:	d104      	bne.n	8003230 <__aeabi_dcmpun+0x30>
 8003226:	4646      	mov	r6, r8
 8003228:	4316      	orrs	r6, r2
 800322a:	0030      	movs	r0, r6
 800322c:	1e43      	subs	r3, r0, #1
 800322e:	4198      	sbcs	r0, r3
 8003230:	bc80      	pop	{r7}
 8003232:	46b8      	mov	r8, r7
 8003234:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003236:	4304      	orrs	r4, r0
 8003238:	2001      	movs	r0, #1
 800323a:	2c00      	cmp	r4, #0
 800323c:	d1f8      	bne.n	8003230 <__aeabi_dcmpun+0x30>
 800323e:	e7ee      	b.n	800321e <__aeabi_dcmpun+0x1e>
 8003240:	000007ff 	.word	0x000007ff

08003244 <__aeabi_d2iz>:
 8003244:	000b      	movs	r3, r1
 8003246:	0002      	movs	r2, r0
 8003248:	b570      	push	{r4, r5, r6, lr}
 800324a:	4d16      	ldr	r5, [pc, #88]	@ (80032a4 <__aeabi_d2iz+0x60>)
 800324c:	030c      	lsls	r4, r1, #12
 800324e:	b082      	sub	sp, #8
 8003250:	0049      	lsls	r1, r1, #1
 8003252:	2000      	movs	r0, #0
 8003254:	9200      	str	r2, [sp, #0]
 8003256:	9301      	str	r3, [sp, #4]
 8003258:	0b24      	lsrs	r4, r4, #12
 800325a:	0d49      	lsrs	r1, r1, #21
 800325c:	0fde      	lsrs	r6, r3, #31
 800325e:	42a9      	cmp	r1, r5
 8003260:	dd04      	ble.n	800326c <__aeabi_d2iz+0x28>
 8003262:	4811      	ldr	r0, [pc, #68]	@ (80032a8 <__aeabi_d2iz+0x64>)
 8003264:	4281      	cmp	r1, r0
 8003266:	dd03      	ble.n	8003270 <__aeabi_d2iz+0x2c>
 8003268:	4b10      	ldr	r3, [pc, #64]	@ (80032ac <__aeabi_d2iz+0x68>)
 800326a:	18f0      	adds	r0, r6, r3
 800326c:	b002      	add	sp, #8
 800326e:	bd70      	pop	{r4, r5, r6, pc}
 8003270:	2080      	movs	r0, #128	@ 0x80
 8003272:	0340      	lsls	r0, r0, #13
 8003274:	4320      	orrs	r0, r4
 8003276:	4c0e      	ldr	r4, [pc, #56]	@ (80032b0 <__aeabi_d2iz+0x6c>)
 8003278:	1a64      	subs	r4, r4, r1
 800327a:	2c1f      	cmp	r4, #31
 800327c:	dd08      	ble.n	8003290 <__aeabi_d2iz+0x4c>
 800327e:	4b0d      	ldr	r3, [pc, #52]	@ (80032b4 <__aeabi_d2iz+0x70>)
 8003280:	1a5b      	subs	r3, r3, r1
 8003282:	40d8      	lsrs	r0, r3
 8003284:	0003      	movs	r3, r0
 8003286:	4258      	negs	r0, r3
 8003288:	2e00      	cmp	r6, #0
 800328a:	d1ef      	bne.n	800326c <__aeabi_d2iz+0x28>
 800328c:	0018      	movs	r0, r3
 800328e:	e7ed      	b.n	800326c <__aeabi_d2iz+0x28>
 8003290:	4b09      	ldr	r3, [pc, #36]	@ (80032b8 <__aeabi_d2iz+0x74>)
 8003292:	9a00      	ldr	r2, [sp, #0]
 8003294:	469c      	mov	ip, r3
 8003296:	0003      	movs	r3, r0
 8003298:	4461      	add	r1, ip
 800329a:	408b      	lsls	r3, r1
 800329c:	40e2      	lsrs	r2, r4
 800329e:	4313      	orrs	r3, r2
 80032a0:	e7f1      	b.n	8003286 <__aeabi_d2iz+0x42>
 80032a2:	46c0      	nop			@ (mov r8, r8)
 80032a4:	000003fe 	.word	0x000003fe
 80032a8:	0000041d 	.word	0x0000041d
 80032ac:	7fffffff 	.word	0x7fffffff
 80032b0:	00000433 	.word	0x00000433
 80032b4:	00000413 	.word	0x00000413
 80032b8:	fffffbed 	.word	0xfffffbed

<<<<<<< HEAD
08003250 <__aeabi_i2d>:
 8003250:	b570      	push	{r4, r5, r6, lr}
 8003252:	2800      	cmp	r0, #0
 8003254:	d016      	beq.n	8003284 <__aeabi_i2d+0x34>
 8003256:	17c3      	asrs	r3, r0, #31
 8003258:	18c5      	adds	r5, r0, r3
 800325a:	405d      	eors	r5, r3
 800325c:	0fc4      	lsrs	r4, r0, #31
 800325e:	0028      	movs	r0, r5
 8003260:	f000 f8cc 	bl	80033fc <__clzsi2>
 8003264:	4b10      	ldr	r3, [pc, #64]	@ (80032a8 <__aeabi_i2d+0x58>)
 8003266:	1a1b      	subs	r3, r3, r0
 8003268:	055b      	lsls	r3, r3, #21
 800326a:	0d5b      	lsrs	r3, r3, #21
 800326c:	280a      	cmp	r0, #10
 800326e:	dc14      	bgt.n	800329a <__aeabi_i2d+0x4a>
 8003270:	0002      	movs	r2, r0
 8003272:	002e      	movs	r6, r5
 8003274:	3215      	adds	r2, #21
 8003276:	4096      	lsls	r6, r2
 8003278:	220b      	movs	r2, #11
 800327a:	1a12      	subs	r2, r2, r0
 800327c:	40d5      	lsrs	r5, r2
 800327e:	032d      	lsls	r5, r5, #12
 8003280:	0b2d      	lsrs	r5, r5, #12
 8003282:	e003      	b.n	800328c <__aeabi_i2d+0x3c>
 8003284:	2400      	movs	r4, #0
 8003286:	2300      	movs	r3, #0
 8003288:	2500      	movs	r5, #0
 800328a:	2600      	movs	r6, #0
 800328c:	051b      	lsls	r3, r3, #20
 800328e:	432b      	orrs	r3, r5
 8003290:	07e4      	lsls	r4, r4, #31
 8003292:	4323      	orrs	r3, r4
 8003294:	0030      	movs	r0, r6
 8003296:	0019      	movs	r1, r3
 8003298:	bd70      	pop	{r4, r5, r6, pc}
 800329a:	380b      	subs	r0, #11
 800329c:	4085      	lsls	r5, r0
 800329e:	032d      	lsls	r5, r5, #12
 80032a0:	2600      	movs	r6, #0
 80032a2:	0b2d      	lsrs	r5, r5, #12
 80032a4:	e7f2      	b.n	800328c <__aeabi_i2d+0x3c>
 80032a6:	46c0      	nop			@ (mov r8, r8)
 80032a8:	0000041e 	.word	0x0000041e

080032ac <__aeabi_ui2d>:
 80032ac:	b510      	push	{r4, lr}
 80032ae:	1e04      	subs	r4, r0, #0
 80032b0:	d010      	beq.n	80032d4 <__aeabi_ui2d+0x28>
 80032b2:	f000 f8a3 	bl	80033fc <__clzsi2>
 80032b6:	4b0e      	ldr	r3, [pc, #56]	@ (80032f0 <__aeabi_ui2d+0x44>)
 80032b8:	1a1b      	subs	r3, r3, r0
 80032ba:	055b      	lsls	r3, r3, #21
 80032bc:	0d5b      	lsrs	r3, r3, #21
 80032be:	280a      	cmp	r0, #10
 80032c0:	dc0f      	bgt.n	80032e2 <__aeabi_ui2d+0x36>
 80032c2:	220b      	movs	r2, #11
 80032c4:	0021      	movs	r1, r4
 80032c6:	1a12      	subs	r2, r2, r0
 80032c8:	40d1      	lsrs	r1, r2
 80032ca:	3015      	adds	r0, #21
 80032cc:	030a      	lsls	r2, r1, #12
 80032ce:	4084      	lsls	r4, r0
 80032d0:	0b12      	lsrs	r2, r2, #12
 80032d2:	e001      	b.n	80032d8 <__aeabi_ui2d+0x2c>
 80032d4:	2300      	movs	r3, #0
 80032d6:	2200      	movs	r2, #0
 80032d8:	051b      	lsls	r3, r3, #20
 80032da:	4313      	orrs	r3, r2
 80032dc:	0020      	movs	r0, r4
 80032de:	0019      	movs	r1, r3
 80032e0:	bd10      	pop	{r4, pc}
 80032e2:	0022      	movs	r2, r4
 80032e4:	380b      	subs	r0, #11
 80032e6:	4082      	lsls	r2, r0
 80032e8:	0312      	lsls	r2, r2, #12
 80032ea:	2400      	movs	r4, #0
 80032ec:	0b12      	lsrs	r2, r2, #12
 80032ee:	e7f3      	b.n	80032d8 <__aeabi_ui2d+0x2c>
 80032f0:	0000041e 	.word	0x0000041e

080032f4 <__aeabi_d2f>:
 80032f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032f6:	004b      	lsls	r3, r1, #1
 80032f8:	030f      	lsls	r7, r1, #12
 80032fa:	0d5b      	lsrs	r3, r3, #21
 80032fc:	4c3b      	ldr	r4, [pc, #236]	@ (80033ec <__aeabi_d2f+0xf8>)
 80032fe:	0f45      	lsrs	r5, r0, #29
 8003300:	b083      	sub	sp, #12
 8003302:	0a7f      	lsrs	r7, r7, #9
 8003304:	1c5e      	adds	r6, r3, #1
 8003306:	432f      	orrs	r7, r5
 8003308:	9000      	str	r0, [sp, #0]
 800330a:	9101      	str	r1, [sp, #4]
 800330c:	0fca      	lsrs	r2, r1, #31
 800330e:	00c5      	lsls	r5, r0, #3
 8003310:	4226      	tst	r6, r4
 8003312:	d00b      	beq.n	800332c <__aeabi_d2f+0x38>
 8003314:	4936      	ldr	r1, [pc, #216]	@ (80033f0 <__aeabi_d2f+0xfc>)
 8003316:	185c      	adds	r4, r3, r1
 8003318:	2cfe      	cmp	r4, #254	@ 0xfe
 800331a:	dd13      	ble.n	8003344 <__aeabi_d2f+0x50>
 800331c:	20ff      	movs	r0, #255	@ 0xff
 800331e:	2300      	movs	r3, #0
 8003320:	05c0      	lsls	r0, r0, #23
 8003322:	4318      	orrs	r0, r3
 8003324:	07d2      	lsls	r2, r2, #31
 8003326:	4310      	orrs	r0, r2
 8003328:	b003      	add	sp, #12
 800332a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800332c:	2b00      	cmp	r3, #0
 800332e:	d102      	bne.n	8003336 <__aeabi_d2f+0x42>
 8003330:	2000      	movs	r0, #0
 8003332:	2300      	movs	r3, #0
 8003334:	e7f4      	b.n	8003320 <__aeabi_d2f+0x2c>
 8003336:	433d      	orrs	r5, r7
 8003338:	d0f0      	beq.n	800331c <__aeabi_d2f+0x28>
 800333a:	2380      	movs	r3, #128	@ 0x80
 800333c:	03db      	lsls	r3, r3, #15
 800333e:	20ff      	movs	r0, #255	@ 0xff
 8003340:	433b      	orrs	r3, r7
 8003342:	e7ed      	b.n	8003320 <__aeabi_d2f+0x2c>
 8003344:	2c00      	cmp	r4, #0
 8003346:	dd14      	ble.n	8003372 <__aeabi_d2f+0x7e>
 8003348:	9b00      	ldr	r3, [sp, #0]
 800334a:	00ff      	lsls	r7, r7, #3
 800334c:	019b      	lsls	r3, r3, #6
 800334e:	1e58      	subs	r0, r3, #1
 8003350:	4183      	sbcs	r3, r0
 8003352:	0f69      	lsrs	r1, r5, #29
 8003354:	433b      	orrs	r3, r7
 8003356:	430b      	orrs	r3, r1
 8003358:	0759      	lsls	r1, r3, #29
 800335a:	d041      	beq.n	80033e0 <__aeabi_d2f+0xec>
 800335c:	210f      	movs	r1, #15
 800335e:	4019      	ands	r1, r3
 8003360:	2904      	cmp	r1, #4
 8003362:	d028      	beq.n	80033b6 <__aeabi_d2f+0xc2>
 8003364:	3304      	adds	r3, #4
 8003366:	0159      	lsls	r1, r3, #5
 8003368:	d525      	bpl.n	80033b6 <__aeabi_d2f+0xc2>
 800336a:	3401      	adds	r4, #1
 800336c:	2300      	movs	r3, #0
 800336e:	b2e0      	uxtb	r0, r4
 8003370:	e7d6      	b.n	8003320 <__aeabi_d2f+0x2c>
 8003372:	0021      	movs	r1, r4
 8003374:	3117      	adds	r1, #23
 8003376:	dbdb      	blt.n	8003330 <__aeabi_d2f+0x3c>
 8003378:	2180      	movs	r1, #128	@ 0x80
 800337a:	201e      	movs	r0, #30
 800337c:	0409      	lsls	r1, r1, #16
 800337e:	4339      	orrs	r1, r7
 8003380:	1b00      	subs	r0, r0, r4
 8003382:	281f      	cmp	r0, #31
 8003384:	dd1b      	ble.n	80033be <__aeabi_d2f+0xca>
 8003386:	2602      	movs	r6, #2
 8003388:	4276      	negs	r6, r6
 800338a:	1b34      	subs	r4, r6, r4
 800338c:	000e      	movs	r6, r1
 800338e:	40e6      	lsrs	r6, r4
 8003390:	0034      	movs	r4, r6
 8003392:	2820      	cmp	r0, #32
 8003394:	d004      	beq.n	80033a0 <__aeabi_d2f+0xac>
 8003396:	4817      	ldr	r0, [pc, #92]	@ (80033f4 <__aeabi_d2f+0x100>)
 8003398:	4684      	mov	ip, r0
 800339a:	4463      	add	r3, ip
 800339c:	4099      	lsls	r1, r3
 800339e:	430d      	orrs	r5, r1
 80033a0:	002b      	movs	r3, r5
 80033a2:	1e59      	subs	r1, r3, #1
 80033a4:	418b      	sbcs	r3, r1
 80033a6:	4323      	orrs	r3, r4
 80033a8:	0759      	lsls	r1, r3, #29
 80033aa:	d015      	beq.n	80033d8 <__aeabi_d2f+0xe4>
 80033ac:	210f      	movs	r1, #15
 80033ae:	2400      	movs	r4, #0
 80033b0:	4019      	ands	r1, r3
 80033b2:	2904      	cmp	r1, #4
 80033b4:	d117      	bne.n	80033e6 <__aeabi_d2f+0xf2>
 80033b6:	019b      	lsls	r3, r3, #6
 80033b8:	0a5b      	lsrs	r3, r3, #9
 80033ba:	b2e0      	uxtb	r0, r4
 80033bc:	e7b0      	b.n	8003320 <__aeabi_d2f+0x2c>
 80033be:	4c0e      	ldr	r4, [pc, #56]	@ (80033f8 <__aeabi_d2f+0x104>)
 80033c0:	191c      	adds	r4, r3, r4
 80033c2:	002b      	movs	r3, r5
 80033c4:	40a5      	lsls	r5, r4
 80033c6:	40c3      	lsrs	r3, r0
 80033c8:	40a1      	lsls	r1, r4
 80033ca:	1e68      	subs	r0, r5, #1
 80033cc:	4185      	sbcs	r5, r0
 80033ce:	4329      	orrs	r1, r5
 80033d0:	430b      	orrs	r3, r1
 80033d2:	2400      	movs	r4, #0
 80033d4:	0759      	lsls	r1, r3, #29
 80033d6:	d1c1      	bne.n	800335c <__aeabi_d2f+0x68>
 80033d8:	019b      	lsls	r3, r3, #6
 80033da:	2000      	movs	r0, #0
 80033dc:	0a5b      	lsrs	r3, r3, #9
 80033de:	e79f      	b.n	8003320 <__aeabi_d2f+0x2c>
 80033e0:	08db      	lsrs	r3, r3, #3
 80033e2:	b2e0      	uxtb	r0, r4
 80033e4:	e79c      	b.n	8003320 <__aeabi_d2f+0x2c>
 80033e6:	3304      	adds	r3, #4
 80033e8:	e7e5      	b.n	80033b6 <__aeabi_d2f+0xc2>
 80033ea:	46c0      	nop			@ (mov r8, r8)
 80033ec:	000007fe 	.word	0x000007fe
 80033f0:	fffffc80 	.word	0xfffffc80
 80033f4:	fffffca2 	.word	0xfffffca2
 80033f8:	fffffc82 	.word	0xfffffc82

080033fc <__clzsi2>:
 80033fc:	211c      	movs	r1, #28
 80033fe:	2301      	movs	r3, #1
 8003400:	041b      	lsls	r3, r3, #16
 8003402:	4298      	cmp	r0, r3
 8003404:	d301      	bcc.n	800340a <__clzsi2+0xe>
 8003406:	0c00      	lsrs	r0, r0, #16
 8003408:	3910      	subs	r1, #16
 800340a:	0a1b      	lsrs	r3, r3, #8
 800340c:	4298      	cmp	r0, r3
 800340e:	d301      	bcc.n	8003414 <__clzsi2+0x18>
 8003410:	0a00      	lsrs	r0, r0, #8
 8003412:	3908      	subs	r1, #8
 8003414:	091b      	lsrs	r3, r3, #4
 8003416:	4298      	cmp	r0, r3
 8003418:	d301      	bcc.n	800341e <__clzsi2+0x22>
 800341a:	0900      	lsrs	r0, r0, #4
 800341c:	3904      	subs	r1, #4
 800341e:	a202      	add	r2, pc, #8	@ (adr r2, 8003428 <__clzsi2+0x2c>)
 8003420:	5c10      	ldrb	r0, [r2, r0]
 8003422:	1840      	adds	r0, r0, r1
 8003424:	4770      	bx	lr
 8003426:	46c0      	nop			@ (mov r8, r8)
 8003428:	02020304 	.word	0x02020304
 800342c:	01010101 	.word	0x01010101
	...

08003438 <__clzdi2>:
 8003438:	b510      	push	{r4, lr}
 800343a:	2900      	cmp	r1, #0
 800343c:	d103      	bne.n	8003446 <__clzdi2+0xe>
 800343e:	f7ff ffdd 	bl	80033fc <__clzsi2>
 8003442:	3020      	adds	r0, #32
 8003444:	e002      	b.n	800344c <__clzdi2+0x14>
 8003446:	0008      	movs	r0, r1
 8003448:	f7ff ffd8 	bl	80033fc <__clzsi2>
 800344c:	bd10      	pop	{r4, pc}
 800344e:	46c0      	nop			@ (mov r8, r8)

08003450 <HAL_UART_RxCpltCallback>:
=======
080032bc <__aeabi_i2d>:
 80032bc:	b570      	push	{r4, r5, r6, lr}
 80032be:	2800      	cmp	r0, #0
 80032c0:	d016      	beq.n	80032f0 <__aeabi_i2d+0x34>
 80032c2:	17c3      	asrs	r3, r0, #31
 80032c4:	18c5      	adds	r5, r0, r3
 80032c6:	405d      	eors	r5, r3
 80032c8:	0fc4      	lsrs	r4, r0, #31
 80032ca:	0028      	movs	r0, r5
 80032cc:	f000 f914 	bl	80034f8 <__clzsi2>
 80032d0:	4b10      	ldr	r3, [pc, #64]	@ (8003314 <__aeabi_i2d+0x58>)
 80032d2:	1a1b      	subs	r3, r3, r0
 80032d4:	055b      	lsls	r3, r3, #21
 80032d6:	0d5b      	lsrs	r3, r3, #21
 80032d8:	280a      	cmp	r0, #10
 80032da:	dc14      	bgt.n	8003306 <__aeabi_i2d+0x4a>
 80032dc:	0002      	movs	r2, r0
 80032de:	002e      	movs	r6, r5
 80032e0:	3215      	adds	r2, #21
 80032e2:	4096      	lsls	r6, r2
 80032e4:	220b      	movs	r2, #11
 80032e6:	1a12      	subs	r2, r2, r0
 80032e8:	40d5      	lsrs	r5, r2
 80032ea:	032d      	lsls	r5, r5, #12
 80032ec:	0b2d      	lsrs	r5, r5, #12
 80032ee:	e003      	b.n	80032f8 <__aeabi_i2d+0x3c>
 80032f0:	2400      	movs	r4, #0
 80032f2:	2300      	movs	r3, #0
 80032f4:	2500      	movs	r5, #0
 80032f6:	2600      	movs	r6, #0
 80032f8:	051b      	lsls	r3, r3, #20
 80032fa:	432b      	orrs	r3, r5
 80032fc:	07e4      	lsls	r4, r4, #31
 80032fe:	4323      	orrs	r3, r4
 8003300:	0030      	movs	r0, r6
 8003302:	0019      	movs	r1, r3
 8003304:	bd70      	pop	{r4, r5, r6, pc}
 8003306:	380b      	subs	r0, #11
 8003308:	4085      	lsls	r5, r0
 800330a:	032d      	lsls	r5, r5, #12
 800330c:	2600      	movs	r6, #0
 800330e:	0b2d      	lsrs	r5, r5, #12
 8003310:	e7f2      	b.n	80032f8 <__aeabi_i2d+0x3c>
 8003312:	46c0      	nop			@ (mov r8, r8)
 8003314:	0000041e 	.word	0x0000041e

08003318 <__aeabi_ui2d>:
 8003318:	b510      	push	{r4, lr}
 800331a:	1e04      	subs	r4, r0, #0
 800331c:	d010      	beq.n	8003340 <__aeabi_ui2d+0x28>
 800331e:	f000 f8eb 	bl	80034f8 <__clzsi2>
 8003322:	4b0e      	ldr	r3, [pc, #56]	@ (800335c <__aeabi_ui2d+0x44>)
 8003324:	1a1b      	subs	r3, r3, r0
 8003326:	055b      	lsls	r3, r3, #21
 8003328:	0d5b      	lsrs	r3, r3, #21
 800332a:	280a      	cmp	r0, #10
 800332c:	dc0f      	bgt.n	800334e <__aeabi_ui2d+0x36>
 800332e:	220b      	movs	r2, #11
 8003330:	0021      	movs	r1, r4
 8003332:	1a12      	subs	r2, r2, r0
 8003334:	40d1      	lsrs	r1, r2
 8003336:	3015      	adds	r0, #21
 8003338:	030a      	lsls	r2, r1, #12
 800333a:	4084      	lsls	r4, r0
 800333c:	0b12      	lsrs	r2, r2, #12
 800333e:	e001      	b.n	8003344 <__aeabi_ui2d+0x2c>
 8003340:	2300      	movs	r3, #0
 8003342:	2200      	movs	r2, #0
 8003344:	051b      	lsls	r3, r3, #20
 8003346:	4313      	orrs	r3, r2
 8003348:	0020      	movs	r0, r4
 800334a:	0019      	movs	r1, r3
 800334c:	bd10      	pop	{r4, pc}
 800334e:	0022      	movs	r2, r4
 8003350:	380b      	subs	r0, #11
 8003352:	4082      	lsls	r2, r0
 8003354:	0312      	lsls	r2, r2, #12
 8003356:	2400      	movs	r4, #0
 8003358:	0b12      	lsrs	r2, r2, #12
 800335a:	e7f3      	b.n	8003344 <__aeabi_ui2d+0x2c>
 800335c:	0000041e 	.word	0x0000041e

08003360 <__aeabi_f2d>:
 8003360:	b570      	push	{r4, r5, r6, lr}
 8003362:	0242      	lsls	r2, r0, #9
 8003364:	0043      	lsls	r3, r0, #1
 8003366:	0fc4      	lsrs	r4, r0, #31
 8003368:	20fe      	movs	r0, #254	@ 0xfe
 800336a:	0e1b      	lsrs	r3, r3, #24
 800336c:	1c59      	adds	r1, r3, #1
 800336e:	0a55      	lsrs	r5, r2, #9
 8003370:	4208      	tst	r0, r1
 8003372:	d00c      	beq.n	800338e <__aeabi_f2d+0x2e>
 8003374:	21e0      	movs	r1, #224	@ 0xe0
 8003376:	0089      	lsls	r1, r1, #2
 8003378:	468c      	mov	ip, r1
 800337a:	076d      	lsls	r5, r5, #29
 800337c:	0b12      	lsrs	r2, r2, #12
 800337e:	4463      	add	r3, ip
 8003380:	051b      	lsls	r3, r3, #20
 8003382:	4313      	orrs	r3, r2
 8003384:	07e4      	lsls	r4, r4, #31
 8003386:	4323      	orrs	r3, r4
 8003388:	0028      	movs	r0, r5
 800338a:	0019      	movs	r1, r3
 800338c:	bd70      	pop	{r4, r5, r6, pc}
 800338e:	2b00      	cmp	r3, #0
 8003390:	d114      	bne.n	80033bc <__aeabi_f2d+0x5c>
 8003392:	2d00      	cmp	r5, #0
 8003394:	d01b      	beq.n	80033ce <__aeabi_f2d+0x6e>
 8003396:	0028      	movs	r0, r5
 8003398:	f000 f8ae 	bl	80034f8 <__clzsi2>
 800339c:	280a      	cmp	r0, #10
 800339e:	dc1c      	bgt.n	80033da <__aeabi_f2d+0x7a>
 80033a0:	230b      	movs	r3, #11
 80033a2:	002a      	movs	r2, r5
 80033a4:	1a1b      	subs	r3, r3, r0
 80033a6:	40da      	lsrs	r2, r3
 80033a8:	0003      	movs	r3, r0
 80033aa:	3315      	adds	r3, #21
 80033ac:	409d      	lsls	r5, r3
 80033ae:	4b0e      	ldr	r3, [pc, #56]	@ (80033e8 <__aeabi_f2d+0x88>)
 80033b0:	0312      	lsls	r2, r2, #12
 80033b2:	1a1b      	subs	r3, r3, r0
 80033b4:	055b      	lsls	r3, r3, #21
 80033b6:	0b12      	lsrs	r2, r2, #12
 80033b8:	0d5b      	lsrs	r3, r3, #21
 80033ba:	e7e1      	b.n	8003380 <__aeabi_f2d+0x20>
 80033bc:	2d00      	cmp	r5, #0
 80033be:	d009      	beq.n	80033d4 <__aeabi_f2d+0x74>
 80033c0:	0b13      	lsrs	r3, r2, #12
 80033c2:	2280      	movs	r2, #128	@ 0x80
 80033c4:	0312      	lsls	r2, r2, #12
 80033c6:	431a      	orrs	r2, r3
 80033c8:	076d      	lsls	r5, r5, #29
 80033ca:	4b08      	ldr	r3, [pc, #32]	@ (80033ec <__aeabi_f2d+0x8c>)
 80033cc:	e7d8      	b.n	8003380 <__aeabi_f2d+0x20>
 80033ce:	2300      	movs	r3, #0
 80033d0:	2200      	movs	r2, #0
 80033d2:	e7d5      	b.n	8003380 <__aeabi_f2d+0x20>
 80033d4:	2200      	movs	r2, #0
 80033d6:	4b05      	ldr	r3, [pc, #20]	@ (80033ec <__aeabi_f2d+0x8c>)
 80033d8:	e7d2      	b.n	8003380 <__aeabi_f2d+0x20>
 80033da:	0003      	movs	r3, r0
 80033dc:	002a      	movs	r2, r5
 80033de:	3b0b      	subs	r3, #11
 80033e0:	409a      	lsls	r2, r3
 80033e2:	2500      	movs	r5, #0
 80033e4:	e7e3      	b.n	80033ae <__aeabi_f2d+0x4e>
 80033e6:	46c0      	nop			@ (mov r8, r8)
 80033e8:	00000389 	.word	0x00000389
 80033ec:	000007ff 	.word	0x000007ff

080033f0 <__aeabi_d2f>:
 80033f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033f2:	004b      	lsls	r3, r1, #1
 80033f4:	030f      	lsls	r7, r1, #12
 80033f6:	0d5b      	lsrs	r3, r3, #21
 80033f8:	4c3b      	ldr	r4, [pc, #236]	@ (80034e8 <__aeabi_d2f+0xf8>)
 80033fa:	0f45      	lsrs	r5, r0, #29
 80033fc:	b083      	sub	sp, #12
 80033fe:	0a7f      	lsrs	r7, r7, #9
 8003400:	1c5e      	adds	r6, r3, #1
 8003402:	432f      	orrs	r7, r5
 8003404:	9000      	str	r0, [sp, #0]
 8003406:	9101      	str	r1, [sp, #4]
 8003408:	0fca      	lsrs	r2, r1, #31
 800340a:	00c5      	lsls	r5, r0, #3
 800340c:	4226      	tst	r6, r4
 800340e:	d00b      	beq.n	8003428 <__aeabi_d2f+0x38>
 8003410:	4936      	ldr	r1, [pc, #216]	@ (80034ec <__aeabi_d2f+0xfc>)
 8003412:	185c      	adds	r4, r3, r1
 8003414:	2cfe      	cmp	r4, #254	@ 0xfe
 8003416:	dd13      	ble.n	8003440 <__aeabi_d2f+0x50>
 8003418:	20ff      	movs	r0, #255	@ 0xff
 800341a:	2300      	movs	r3, #0
 800341c:	05c0      	lsls	r0, r0, #23
 800341e:	4318      	orrs	r0, r3
 8003420:	07d2      	lsls	r2, r2, #31
 8003422:	4310      	orrs	r0, r2
 8003424:	b003      	add	sp, #12
 8003426:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003428:	2b00      	cmp	r3, #0
 800342a:	d102      	bne.n	8003432 <__aeabi_d2f+0x42>
 800342c:	2000      	movs	r0, #0
 800342e:	2300      	movs	r3, #0
 8003430:	e7f4      	b.n	800341c <__aeabi_d2f+0x2c>
 8003432:	433d      	orrs	r5, r7
 8003434:	d0f0      	beq.n	8003418 <__aeabi_d2f+0x28>
 8003436:	2380      	movs	r3, #128	@ 0x80
 8003438:	03db      	lsls	r3, r3, #15
 800343a:	20ff      	movs	r0, #255	@ 0xff
 800343c:	433b      	orrs	r3, r7
 800343e:	e7ed      	b.n	800341c <__aeabi_d2f+0x2c>
 8003440:	2c00      	cmp	r4, #0
 8003442:	dd14      	ble.n	800346e <__aeabi_d2f+0x7e>
 8003444:	9b00      	ldr	r3, [sp, #0]
 8003446:	00ff      	lsls	r7, r7, #3
 8003448:	019b      	lsls	r3, r3, #6
 800344a:	1e58      	subs	r0, r3, #1
 800344c:	4183      	sbcs	r3, r0
 800344e:	0f69      	lsrs	r1, r5, #29
 8003450:	433b      	orrs	r3, r7
 8003452:	430b      	orrs	r3, r1
 8003454:	0759      	lsls	r1, r3, #29
 8003456:	d041      	beq.n	80034dc <__aeabi_d2f+0xec>
 8003458:	210f      	movs	r1, #15
 800345a:	4019      	ands	r1, r3
 800345c:	2904      	cmp	r1, #4
 800345e:	d028      	beq.n	80034b2 <__aeabi_d2f+0xc2>
 8003460:	3304      	adds	r3, #4
 8003462:	0159      	lsls	r1, r3, #5
 8003464:	d525      	bpl.n	80034b2 <__aeabi_d2f+0xc2>
 8003466:	3401      	adds	r4, #1
 8003468:	2300      	movs	r3, #0
 800346a:	b2e0      	uxtb	r0, r4
 800346c:	e7d6      	b.n	800341c <__aeabi_d2f+0x2c>
 800346e:	0021      	movs	r1, r4
 8003470:	3117      	adds	r1, #23
 8003472:	dbdb      	blt.n	800342c <__aeabi_d2f+0x3c>
 8003474:	2180      	movs	r1, #128	@ 0x80
 8003476:	201e      	movs	r0, #30
 8003478:	0409      	lsls	r1, r1, #16
 800347a:	4339      	orrs	r1, r7
 800347c:	1b00      	subs	r0, r0, r4
 800347e:	281f      	cmp	r0, #31
 8003480:	dd1b      	ble.n	80034ba <__aeabi_d2f+0xca>
 8003482:	2602      	movs	r6, #2
 8003484:	4276      	negs	r6, r6
 8003486:	1b34      	subs	r4, r6, r4
 8003488:	000e      	movs	r6, r1
 800348a:	40e6      	lsrs	r6, r4
 800348c:	0034      	movs	r4, r6
 800348e:	2820      	cmp	r0, #32
 8003490:	d004      	beq.n	800349c <__aeabi_d2f+0xac>
 8003492:	4817      	ldr	r0, [pc, #92]	@ (80034f0 <__aeabi_d2f+0x100>)
 8003494:	4684      	mov	ip, r0
 8003496:	4463      	add	r3, ip
 8003498:	4099      	lsls	r1, r3
 800349a:	430d      	orrs	r5, r1
 800349c:	002b      	movs	r3, r5
 800349e:	1e59      	subs	r1, r3, #1
 80034a0:	418b      	sbcs	r3, r1
 80034a2:	4323      	orrs	r3, r4
 80034a4:	0759      	lsls	r1, r3, #29
 80034a6:	d015      	beq.n	80034d4 <__aeabi_d2f+0xe4>
 80034a8:	210f      	movs	r1, #15
 80034aa:	2400      	movs	r4, #0
 80034ac:	4019      	ands	r1, r3
 80034ae:	2904      	cmp	r1, #4
 80034b0:	d117      	bne.n	80034e2 <__aeabi_d2f+0xf2>
 80034b2:	019b      	lsls	r3, r3, #6
 80034b4:	0a5b      	lsrs	r3, r3, #9
 80034b6:	b2e0      	uxtb	r0, r4
 80034b8:	e7b0      	b.n	800341c <__aeabi_d2f+0x2c>
 80034ba:	4c0e      	ldr	r4, [pc, #56]	@ (80034f4 <__aeabi_d2f+0x104>)
 80034bc:	191c      	adds	r4, r3, r4
 80034be:	002b      	movs	r3, r5
 80034c0:	40a5      	lsls	r5, r4
 80034c2:	40c3      	lsrs	r3, r0
 80034c4:	40a1      	lsls	r1, r4
 80034c6:	1e68      	subs	r0, r5, #1
 80034c8:	4185      	sbcs	r5, r0
 80034ca:	4329      	orrs	r1, r5
 80034cc:	430b      	orrs	r3, r1
 80034ce:	2400      	movs	r4, #0
 80034d0:	0759      	lsls	r1, r3, #29
 80034d2:	d1c1      	bne.n	8003458 <__aeabi_d2f+0x68>
 80034d4:	019b      	lsls	r3, r3, #6
 80034d6:	2000      	movs	r0, #0
 80034d8:	0a5b      	lsrs	r3, r3, #9
 80034da:	e79f      	b.n	800341c <__aeabi_d2f+0x2c>
 80034dc:	08db      	lsrs	r3, r3, #3
 80034de:	b2e0      	uxtb	r0, r4
 80034e0:	e79c      	b.n	800341c <__aeabi_d2f+0x2c>
 80034e2:	3304      	adds	r3, #4
 80034e4:	e7e5      	b.n	80034b2 <__aeabi_d2f+0xc2>
 80034e6:	46c0      	nop			@ (mov r8, r8)
 80034e8:	000007fe 	.word	0x000007fe
 80034ec:	fffffc80 	.word	0xfffffc80
 80034f0:	fffffca2 	.word	0xfffffca2
 80034f4:	fffffc82 	.word	0xfffffc82

080034f8 <__clzsi2>:
 80034f8:	211c      	movs	r1, #28
 80034fa:	2301      	movs	r3, #1
 80034fc:	041b      	lsls	r3, r3, #16
 80034fe:	4298      	cmp	r0, r3
 8003500:	d301      	bcc.n	8003506 <__clzsi2+0xe>
 8003502:	0c00      	lsrs	r0, r0, #16
 8003504:	3910      	subs	r1, #16
 8003506:	0a1b      	lsrs	r3, r3, #8
 8003508:	4298      	cmp	r0, r3
 800350a:	d301      	bcc.n	8003510 <__clzsi2+0x18>
 800350c:	0a00      	lsrs	r0, r0, #8
 800350e:	3908      	subs	r1, #8
 8003510:	091b      	lsrs	r3, r3, #4
 8003512:	4298      	cmp	r0, r3
 8003514:	d301      	bcc.n	800351a <__clzsi2+0x22>
 8003516:	0900      	lsrs	r0, r0, #4
 8003518:	3904      	subs	r1, #4
 800351a:	a202      	add	r2, pc, #8	@ (adr r2, 8003524 <__clzsi2+0x2c>)
 800351c:	5c10      	ldrb	r0, [r2, r0]
 800351e:	1840      	adds	r0, r0, r1
 8003520:	4770      	bx	lr
 8003522:	46c0      	nop			@ (mov r8, r8)
 8003524:	02020304 	.word	0x02020304
 8003528:	01010101 	.word	0x01010101
	...

08003534 <__clzdi2>:
 8003534:	b510      	push	{r4, lr}
 8003536:	2900      	cmp	r1, #0
 8003538:	d103      	bne.n	8003542 <__clzdi2+0xe>
 800353a:	f7ff ffdd 	bl	80034f8 <__clzsi2>
 800353e:	3020      	adds	r0, #32
 8003540:	e002      	b.n	8003548 <__clzdi2+0x14>
 8003542:	0008      	movs	r0, r1
 8003544:	f7ff ffd8 	bl	80034f8 <__clzsi2>
 8003548:	bd10      	pop	{r4, pc}
 800354a:	46c0      	nop			@ (mov r8, r8)

0800354c <HAL_UART_RxCpltCallback>:
>>>>>>> main
  }
  return true;
}

// Callback for reception complete
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
<<<<<<< HEAD
 8003450:	b580      	push	{r7, lr}
 8003452:	b082      	sub	sp, #8
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  if (huart == EspUart) {
 8003458:	4b08      	ldr	r3, [pc, #32]	@ (800347c <HAL_UART_RxCpltCallback+0x2c>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	687a      	ldr	r2, [r7, #4]
 800345e:	429a      	cmp	r2, r3
 8003460:	d108      	bne.n	8003474 <HAL_UART_RxCpltCallback+0x24>
    RxComplete = true;
 8003462:	4b07      	ldr	r3, [pc, #28]	@ (8003480 <HAL_UART_RxCpltCallback+0x30>)
 8003464:	2201      	movs	r2, #1
 8003466:	701a      	strb	r2, [r3, #0]
    Debug("RxComplete");
 8003468:	4a06      	ldr	r2, [pc, #24]	@ (8003484 <HAL_UART_RxCpltCallback+0x34>)
 800346a:	4b07      	ldr	r3, [pc, #28]	@ (8003488 <HAL_UART_RxCpltCallback+0x38>)
 800346c:	0019      	movs	r1, r3
 800346e:	2003      	movs	r0, #3
 8003470:	f002 ffea 	bl	8006448 <CreateLine>
  }
}
 8003474:	46c0      	nop			@ (mov r8, r8)
 8003476:	46bd      	mov	sp, r7
 8003478:	b002      	add	sp, #8
 800347a:	bd80      	pop	{r7, pc}
 800347c:	20000234 	.word	0x20000234
 8003480:	20000238 	.word	0x20000238
 8003484:	0800fe1c 	.word	0x0800fe1c
 8003488:	0800fdf8 	.word	0x0800fdf8

0800348c <HAL_UART_ErrorCallback>:

// Callback for UART error
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 800348c:	b580      	push	{r7, lr}
 800348e:	b082      	sub	sp, #8
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  if (huart == EspUart) {
 8003494:	4b05      	ldr	r3, [pc, #20]	@ (80034ac <HAL_UART_ErrorCallback+0x20>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	687a      	ldr	r2, [r7, #4]
 800349a:	429a      	cmp	r2, r3
 800349c:	d102      	bne.n	80034a4 <HAL_UART_ErrorCallback+0x18>
    // Handle error
    EspState = ESP_STATE_ERROR;
 800349e:	4b04      	ldr	r3, [pc, #16]	@ (80034b0 <HAL_UART_ErrorCallback+0x24>)
 80034a0:	2206      	movs	r2, #6
 80034a2:	701a      	strb	r2, [r3, #0]
  }
}
 80034a4:	46c0      	nop			@ (mov r8, r8)
 80034a6:	46bd      	mov	sp, r7
 80034a8:	b002      	add	sp, #8
 80034aa:	bd80      	pop	{r7, pc}
 80034ac:	20000234 	.word	0x20000234
 80034b0:	20000000 	.word	0x20000000

080034b4 <I2CSensors_Init>:
=======
 800354c:	b580      	push	{r7, lr}
 800354e:	b082      	sub	sp, #8
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  if (huart == EspUart) {
 8003554:	4b08      	ldr	r3, [pc, #32]	@ (8003578 <HAL_UART_RxCpltCallback+0x2c>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	687a      	ldr	r2, [r7, #4]
 800355a:	429a      	cmp	r2, r3
 800355c:	d108      	bne.n	8003570 <HAL_UART_RxCpltCallback+0x24>
    RxComplete = true;
 800355e:	4b07      	ldr	r3, [pc, #28]	@ (800357c <HAL_UART_RxCpltCallback+0x30>)
 8003560:	2201      	movs	r2, #1
 8003562:	701a      	strb	r2, [r3, #0]
    Debug("RxComplete");
 8003564:	4a06      	ldr	r2, [pc, #24]	@ (8003580 <HAL_UART_RxCpltCallback+0x34>)
 8003566:	4b07      	ldr	r3, [pc, #28]	@ (8003584 <HAL_UART_RxCpltCallback+0x38>)
 8003568:	0019      	movs	r1, r3
 800356a:	2003      	movs	r0, #3
 800356c:	f003 f8f4 	bl	8006758 <CreateLine>
  }
}
 8003570:	46c0      	nop			@ (mov r8, r8)
 8003572:	46bd      	mov	sp, r7
 8003574:	b002      	add	sp, #8
 8003576:	bd80      	pop	{r7, pc}
 8003578:	20000240 	.word	0x20000240
 800357c:	20000244 	.word	0x20000244
 8003580:	080100b4 	.word	0x080100b4
 8003584:	08010090 	.word	0x08010090

08003588 <HAL_UART_ErrorCallback>:

// Callback for UART error
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8003588:	b580      	push	{r7, lr}
 800358a:	b082      	sub	sp, #8
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  if (huart == EspUart) {
 8003590:	4b05      	ldr	r3, [pc, #20]	@ (80035a8 <HAL_UART_ErrorCallback+0x20>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	687a      	ldr	r2, [r7, #4]
 8003596:	429a      	cmp	r2, r3
 8003598:	d102      	bne.n	80035a0 <HAL_UART_ErrorCallback+0x18>
    // Handle error
    EspState = ESP_STATE_ERROR;
 800359a:	4b04      	ldr	r3, [pc, #16]	@ (80035ac <HAL_UART_ErrorCallback+0x24>)
 800359c:	2206      	movs	r2, #6
 800359e:	701a      	strb	r2, [r3, #0]
  }
}
 80035a0:	46c0      	nop			@ (mov r8, r8)
 80035a2:	46bd      	mov	sp, r7
 80035a4:	b002      	add	sp, #8
 80035a6:	bd80      	pop	{r7, pc}
 80035a8:	20000240 	.word	0x20000240
 80035ac:	20000000 	.word	0x20000000

080035b0 <I2CSensors_Init>:
>>>>>>> main
static I2C_HandleTypeDef* SensorI2C = NULL;

static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);
static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);

void I2CSensors_Init(I2C_HandleTypeDef* sensorI2C) {
<<<<<<< HEAD
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b082      	sub	sp, #8
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
    SensorI2C = sensorI2C;
 80034bc:	4b09      	ldr	r3, [pc, #36]	@ (80034e4 <I2CSensors_Init+0x30>)
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	601a      	str	r2, [r3, #0]
    HT_Init(ReadI2C, WriteI2C);
 80034c2:	4a09      	ldr	r2, [pc, #36]	@ (80034e8 <I2CSensors_Init+0x34>)
 80034c4:	4b09      	ldr	r3, [pc, #36]	@ (80034ec <I2CSensors_Init+0x38>)
 80034c6:	0011      	movs	r1, r2
 80034c8:	0018      	movs	r0, r3
 80034ca:	f000 fa33 	bl	8003934 <HT_Init>
    Gas_Init(ReadI2C, WriteI2C);
 80034ce:	4a06      	ldr	r2, [pc, #24]	@ (80034e8 <I2CSensors_Init+0x34>)
 80034d0:	4b06      	ldr	r3, [pc, #24]	@ (80034ec <I2CSensors_Init+0x38>)
 80034d2:	0011      	movs	r1, r2
 80034d4:	0018      	movs	r0, r3
 80034d6:	f000 f8a5 	bl	8003624 <Gas_Init>
}
 80034da:	46c0      	nop			@ (mov r8, r8)
 80034dc:	46bd      	mov	sp, r7
 80034de:	b002      	add	sp, #8
 80034e0:	bd80      	pop	{r7, pc}
 80034e2:	46c0      	nop			@ (mov r8, r8)
 80034e4:	2000023c 	.word	0x2000023c
 80034e8:	08003545 	.word	0x08003545
 80034ec:	080034f1 	.word	0x080034f1

080034f0 <ReadI2C>:

static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 80034f0:	b5b0      	push	{r4, r5, r7, lr}
 80034f2:	b084      	sub	sp, #16
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6039      	str	r1, [r7, #0]
 80034f8:	0011      	movs	r1, r2
 80034fa:	1dfb      	adds	r3, r7, #7
 80034fc:	1c02      	adds	r2, r0, #0
 80034fe:	701a      	strb	r2, [r3, #0]
 8003500:	1dbb      	adds	r3, r7, #6
 8003502:	1c0a      	adds	r2, r1, #0
 8003504:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Receive_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 8003506:	4b0e      	ldr	r3, [pc, #56]	@ (8003540 <ReadI2C+0x50>)
 8003508:	6818      	ldr	r0, [r3, #0]
 800350a:	1dfb      	adds	r3, r7, #7
 800350c:	781b      	ldrb	r3, [r3, #0]
 800350e:	b29b      	uxth	r3, r3
 8003510:	18db      	adds	r3, r3, r3
 8003512:	b299      	uxth	r1, r3
 8003514:	1dbb      	adds	r3, r7, #6
 8003516:	781b      	ldrb	r3, [r3, #0]
 8003518:	b29b      	uxth	r3, r3
 800351a:	250f      	movs	r5, #15
 800351c:	197c      	adds	r4, r7, r5
 800351e:	683a      	ldr	r2, [r7, #0]
 8003520:	f004 fb82 	bl	8007c28 <HAL_I2C_Master_Receive_DMA>
 8003524:	0003      	movs	r3, r0
 8003526:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 8003528:	197b      	adds	r3, r7, r5
 800352a:	781b      	ldrb	r3, [r3, #0]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d001      	beq.n	8003534 <ReadI2C+0x44>
        return false;
 8003530:	2300      	movs	r3, #0
 8003532:	e000      	b.n	8003536 <ReadI2C+0x46>
    }
    return true;
 8003534:	2301      	movs	r3, #1
}
 8003536:	0018      	movs	r0, r3
 8003538:	46bd      	mov	sp, r7
 800353a:	b004      	add	sp, #16
 800353c:	bdb0      	pop	{r4, r5, r7, pc}
 800353e:	46c0      	nop			@ (mov r8, r8)
 8003540:	2000023c 	.word	0x2000023c

08003544 <WriteI2C>:

static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8003544:	b5b0      	push	{r4, r5, r7, lr}
 8003546:	b084      	sub	sp, #16
 8003548:	af00      	add	r7, sp, #0
 800354a:	6039      	str	r1, [r7, #0]
 800354c:	0011      	movs	r1, r2
 800354e:	1dfb      	adds	r3, r7, #7
 8003550:	1c02      	adds	r2, r0, #0
 8003552:	701a      	strb	r2, [r3, #0]
 8003554:	1dbb      	adds	r3, r7, #6
 8003556:	1c0a      	adds	r2, r1, #0
 8003558:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Transmit_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 800355a:	4b0e      	ldr	r3, [pc, #56]	@ (8003594 <WriteI2C+0x50>)
 800355c:	6818      	ldr	r0, [r3, #0]
 800355e:	1dfb      	adds	r3, r7, #7
 8003560:	781b      	ldrb	r3, [r3, #0]
 8003562:	b29b      	uxth	r3, r3
 8003564:	18db      	adds	r3, r3, r3
 8003566:	b299      	uxth	r1, r3
 8003568:	1dbb      	adds	r3, r7, #6
 800356a:	781b      	ldrb	r3, [r3, #0]
 800356c:	b29b      	uxth	r3, r3
 800356e:	250f      	movs	r5, #15
 8003570:	197c      	adds	r4, r7, r5
 8003572:	683a      	ldr	r2, [r7, #0]
 8003574:	f004 fa52 	bl	8007a1c <HAL_I2C_Master_Transmit_DMA>
 8003578:	0003      	movs	r3, r0
 800357a:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 800357c:	197b      	adds	r3, r7, r5
 800357e:	781b      	ldrb	r3, [r3, #0]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d001      	beq.n	8003588 <WriteI2C+0x44>
        return false;
 8003584:	2300      	movs	r3, #0
 8003586:	e000      	b.n	800358a <WriteI2C+0x46>
    }
    return true;
 8003588:	2301      	movs	r3, #1
}
 800358a:	0018      	movs	r0, r3
 800358c:	46bd      	mov	sp, r7
 800358e:	b004      	add	sp, #16
 8003590:	bdb0      	pop	{r4, r5, r7, pc}
 8003592:	46c0      	nop			@ (mov r8, r8)
 8003594:	2000023c 	.word	0x2000023c

08003598 <MX_DMA_Init>:
=======
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b082      	sub	sp, #8
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
    SensorI2C = sensorI2C;
 80035b8:	4b09      	ldr	r3, [pc, #36]	@ (80035e0 <I2CSensors_Init+0x30>)
 80035ba:	687a      	ldr	r2, [r7, #4]
 80035bc:	601a      	str	r2, [r3, #0]
    HT_Init(ReadI2C, WriteI2C);
 80035be:	4a09      	ldr	r2, [pc, #36]	@ (80035e4 <I2CSensors_Init+0x34>)
 80035c0:	4b09      	ldr	r3, [pc, #36]	@ (80035e8 <I2CSensors_Init+0x38>)
 80035c2:	0011      	movs	r1, r2
 80035c4:	0018      	movs	r0, r3
 80035c6:	f000 f9db 	bl	8003980 <HT_Init>
    Gas_Init(ReadI2C, WriteI2C);
 80035ca:	4a06      	ldr	r2, [pc, #24]	@ (80035e4 <I2CSensors_Init+0x34>)
 80035cc:	4b06      	ldr	r3, [pc, #24]	@ (80035e8 <I2CSensors_Init+0x38>)
 80035ce:	0011      	movs	r1, r2
 80035d0:	0018      	movs	r0, r3
 80035d2:	f000 f8ac 	bl	800372e <Gas_Init>
}
 80035d6:	46c0      	nop			@ (mov r8, r8)
 80035d8:	46bd      	mov	sp, r7
 80035da:	b002      	add	sp, #8
 80035dc:	bd80      	pop	{r7, pc}
 80035de:	46c0      	nop			@ (mov r8, r8)
 80035e0:	20000248 	.word	0x20000248
 80035e4:	08003641 	.word	0x08003641
 80035e8:	080035ed 	.word	0x080035ed

080035ec <ReadI2C>:

static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 80035ec:	b5b0      	push	{r4, r5, r7, lr}
 80035ee:	b084      	sub	sp, #16
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6039      	str	r1, [r7, #0]
 80035f4:	0011      	movs	r1, r2
 80035f6:	1dfb      	adds	r3, r7, #7
 80035f8:	1c02      	adds	r2, r0, #0
 80035fa:	701a      	strb	r2, [r3, #0]
 80035fc:	1dbb      	adds	r3, r7, #6
 80035fe:	1c0a      	adds	r2, r1, #0
 8003600:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Receive_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 8003602:	4b0e      	ldr	r3, [pc, #56]	@ (800363c <ReadI2C+0x50>)
 8003604:	6818      	ldr	r0, [r3, #0]
 8003606:	1dfb      	adds	r3, r7, #7
 8003608:	781b      	ldrb	r3, [r3, #0]
 800360a:	b29b      	uxth	r3, r3
 800360c:	18db      	adds	r3, r3, r3
 800360e:	b299      	uxth	r1, r3
 8003610:	1dbb      	adds	r3, r7, #6
 8003612:	781b      	ldrb	r3, [r3, #0]
 8003614:	b29b      	uxth	r3, r3
 8003616:	250f      	movs	r5, #15
 8003618:	197c      	adds	r4, r7, r5
 800361a:	683a      	ldr	r2, [r7, #0]
 800361c:	f004 fc66 	bl	8007eec <HAL_I2C_Master_Receive_DMA>
 8003620:	0003      	movs	r3, r0
 8003622:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 8003624:	197b      	adds	r3, r7, r5
 8003626:	781b      	ldrb	r3, [r3, #0]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d001      	beq.n	8003630 <ReadI2C+0x44>
        return false;
 800362c:	2300      	movs	r3, #0
 800362e:	e000      	b.n	8003632 <ReadI2C+0x46>
    }
    return true;
 8003630:	2301      	movs	r3, #1
}
 8003632:	0018      	movs	r0, r3
 8003634:	46bd      	mov	sp, r7
 8003636:	b004      	add	sp, #16
 8003638:	bdb0      	pop	{r4, r5, r7, pc}
 800363a:	46c0      	nop			@ (mov r8, r8)
 800363c:	20000248 	.word	0x20000248

08003640 <WriteI2C>:

static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8003640:	b5b0      	push	{r4, r5, r7, lr}
 8003642:	b084      	sub	sp, #16
 8003644:	af00      	add	r7, sp, #0
 8003646:	6039      	str	r1, [r7, #0]
 8003648:	0011      	movs	r1, r2
 800364a:	1dfb      	adds	r3, r7, #7
 800364c:	1c02      	adds	r2, r0, #0
 800364e:	701a      	strb	r2, [r3, #0]
 8003650:	1dbb      	adds	r3, r7, #6
 8003652:	1c0a      	adds	r2, r1, #0
 8003654:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Transmit_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 8003656:	4b0e      	ldr	r3, [pc, #56]	@ (8003690 <WriteI2C+0x50>)
 8003658:	6818      	ldr	r0, [r3, #0]
 800365a:	1dfb      	adds	r3, r7, #7
 800365c:	781b      	ldrb	r3, [r3, #0]
 800365e:	b29b      	uxth	r3, r3
 8003660:	18db      	adds	r3, r3, r3
 8003662:	b299      	uxth	r1, r3
 8003664:	1dbb      	adds	r3, r7, #6
 8003666:	781b      	ldrb	r3, [r3, #0]
 8003668:	b29b      	uxth	r3, r3
 800366a:	250f      	movs	r5, #15
 800366c:	197c      	adds	r4, r7, r5
 800366e:	683a      	ldr	r2, [r7, #0]
 8003670:	f004 fb36 	bl	8007ce0 <HAL_I2C_Master_Transmit_DMA>
 8003674:	0003      	movs	r3, r0
 8003676:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 8003678:	197b      	adds	r3, r7, r5
 800367a:	781b      	ldrb	r3, [r3, #0]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d001      	beq.n	8003684 <WriteI2C+0x44>
        return false;
 8003680:	2300      	movs	r3, #0
 8003682:	e000      	b.n	8003686 <WriteI2C+0x46>
    }
    return true;
 8003684:	2301      	movs	r3, #1
}
 8003686:	0018      	movs	r0, r3
 8003688:	46bd      	mov	sp, r7
 800368a:	b004      	add	sp, #16
 800368c:	bdb0      	pop	{r4, r5, r7, pc}
 800368e:	46c0      	nop			@ (mov r8, r8)
 8003690:	20000248 	.word	0x20000248

08003694 <MX_DMA_Init>:
>>>>>>> main

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
<<<<<<< HEAD
 8003598:	b580      	push	{r7, lr}
 800359a:	b082      	sub	sp, #8
 800359c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800359e:	4b10      	ldr	r3, [pc, #64]	@ (80035e0 <MX_DMA_Init+0x48>)
 80035a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80035a2:	4b0f      	ldr	r3, [pc, #60]	@ (80035e0 <MX_DMA_Init+0x48>)
 80035a4:	2101      	movs	r1, #1
 80035a6:	430a      	orrs	r2, r1
 80035a8:	631a      	str	r2, [r3, #48]	@ 0x30
 80035aa:	4b0d      	ldr	r3, [pc, #52]	@ (80035e0 <MX_DMA_Init+0x48>)
 80035ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035ae:	2201      	movs	r2, #1
 80035b0:	4013      	ands	r3, r2
 80035b2:	607b      	str	r3, [r7, #4]
 80035b4:	687b      	ldr	r3, [r7, #4]
=======
 8003694:	b580      	push	{r7, lr}
 8003696:	b082      	sub	sp, #8
 8003698:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800369a:	4b10      	ldr	r3, [pc, #64]	@ (80036dc <MX_DMA_Init+0x48>)
 800369c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800369e:	4b0f      	ldr	r3, [pc, #60]	@ (80036dc <MX_DMA_Init+0x48>)
 80036a0:	2101      	movs	r1, #1
 80036a2:	430a      	orrs	r2, r1
 80036a4:	631a      	str	r2, [r3, #48]	@ 0x30
 80036a6:	4b0d      	ldr	r3, [pc, #52]	@ (80036dc <MX_DMA_Init+0x48>)
 80036a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036aa:	2201      	movs	r2, #1
 80036ac:	4013      	ands	r3, r2
 80036ae:	607b      	str	r3, [r7, #4]
 80036b0:	687b      	ldr	r3, [r7, #4]
>>>>>>> main

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
<<<<<<< HEAD
 80035b6:	2200      	movs	r2, #0
 80035b8:	2100      	movs	r1, #0
 80035ba:	200a      	movs	r0, #10
 80035bc:	f003 fc3c 	bl	8006e38 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80035c0:	200a      	movs	r0, #10
 80035c2:	f003 fc4e 	bl	8006e62 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 3, 0);
 80035c6:	2200      	movs	r2, #0
 80035c8:	2103      	movs	r1, #3
 80035ca:	200b      	movs	r0, #11
 80035cc:	f003 fc34 	bl	8006e38 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 80035d0:	200b      	movs	r0, #11
 80035d2:	f003 fc46 	bl	8006e62 <HAL_NVIC_EnableIRQ>

}
 80035d6:	46c0      	nop			@ (mov r8, r8)
 80035d8:	46bd      	mov	sp, r7
 80035da:	b002      	add	sp, #8
 80035dc:	bd80      	pop	{r7, pc}
 80035de:	46c0      	nop			@ (mov r8, r8)
 80035e0:	40021000 	.word	0x40021000

080035e4 <Gadget_Init>:
=======
 80036b2:	2200      	movs	r2, #0
 80036b4:	2100      	movs	r1, #0
 80036b6:	200a      	movs	r0, #10
 80036b8:	f003 fd20 	bl	80070fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80036bc:	200a      	movs	r0, #10
 80036be:	f003 fd32 	bl	8007126 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 3, 0);
 80036c2:	2200      	movs	r2, #0
 80036c4:	2103      	movs	r1, #3
 80036c6:	200b      	movs	r0, #11
 80036c8:	f003 fd18 	bl	80070fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 80036cc:	200b      	movs	r0, #11
 80036ce:	f003 fd2a 	bl	8007126 <HAL_NVIC_EnableIRQ>

}
 80036d2:	46c0      	nop			@ (mov r8, r8)
 80036d4:	46bd      	mov	sp, r7
 80036d6:	b002      	add	sp, #8
 80036d8:	bd80      	pop	{r7, pc}
 80036da:	46c0      	nop			@ (mov r8, r8)
 80036dc:	40021000 	.word	0x40021000

080036e0 <Gadget_Init>:
>>>>>>> main
//    .VOC_measurementEnabled = true,
//    .PM_measurementEnabled = false,
//    .MIC_measurementEnabled = true
//};

void Gadget_Init(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s, UART_HandleTypeDef* espUart) {
<<<<<<< HEAD
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b084      	sub	sp, #16
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	60f8      	str	r0, [r7, #12]
 80035ec:	60b9      	str	r1, [r7, #8]
 80035ee:	607a      	str	r2, [r7, #4]
=======
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b084      	sub	sp, #16
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	60f8      	str	r0, [r7, #12]
 80036e8:	60b9      	str	r1, [r7, #8]
 80036ea:	607a      	str	r2, [r7, #4]
>>>>>>> main
  // TODO: Add gadget re-init. So it works after sleep mode again.
  // Check battery power
  // Init sensor + peripherals
  Meas_SetEnabledSensors(SensorSetTest);
<<<<<<< HEAD
 80035f0:	4b09      	ldr	r3, [pc, #36]	@ (8003618 <Gadget_Init+0x34>)
 80035f2:	6818      	ldr	r0, [r3, #0]
 80035f4:	f000 fe2a 	bl	800424c <Meas_SetEnabledSensors>
  Meas_Init(sensorI2C, micI2s);
 80035f8:	68ba      	ldr	r2, [r7, #8]
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	0011      	movs	r1, r2
 80035fe:	0018      	movs	r0, r3
 8003600:	f000 fcea 	bl	8003fd8 <Meas_Init>
  // Working on ESP, disabling it now
//  ESP_Init(espUart);
//  Gadget_SetSleepDuration();
  Debug("Gadget initialised.");
 8003604:	4a05      	ldr	r2, [pc, #20]	@ (800361c <Gadget_Init+0x38>)
 8003606:	4b06      	ldr	r3, [pc, #24]	@ (8003620 <Gadget_Init+0x3c>)
 8003608:	0019      	movs	r1, r3
 800360a:	2003      	movs	r0, #3
 800360c:	f002 ff1c 	bl	8006448 <CreateLine>
}
 8003610:	46c0      	nop			@ (mov r8, r8)
 8003612:	46bd      	mov	sp, r7
 8003614:	b004      	add	sp, #16
 8003616:	bd80      	pop	{r7, pc}
 8003618:	20000004 	.word	0x20000004
 800361c:	0800fe9c 	.word	0x0800fe9c
 8003620:	0800feb0 	.word	0x0800feb0

08003624 <Gas_Init>:
=======
 80036ec:	4b09      	ldr	r3, [pc, #36]	@ (8003714 <Gadget_Init+0x34>)
 80036ee:	6818      	ldr	r0, [r3, #0]
 80036f0:	f000 fe60 	bl	80043b4 <Meas_SetEnabledSensors>
  Meas_Init(sensorI2C, micI2s);
 80036f4:	68ba      	ldr	r2, [r7, #8]
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	0011      	movs	r1, r2
 80036fa:	0018      	movs	r0, r3
 80036fc:	f000 fc96 	bl	800402c <Meas_Init>
  // Working on ESP, disabling it now
//  ESP_Init(espUart);
//  Gadget_SetSleepDuration();
  Info("Gadget initialised.");
 8003700:	4a05      	ldr	r2, [pc, #20]	@ (8003718 <Gadget_Init+0x38>)
 8003702:	4b06      	ldr	r3, [pc, #24]	@ (800371c <Gadget_Init+0x3c>)
 8003704:	0019      	movs	r1, r3
 8003706:	2002      	movs	r0, #2
 8003708:	f003 f826 	bl	8006758 <CreateLine>
}
 800370c:	46c0      	nop			@ (mov r8, r8)
 800370e:	46bd      	mov	sp, r7
 8003710:	b004      	add	sp, #16
 8003712:	bd80      	pop	{r7, pc}
 8003714:	20000004 	.word	0x20000004
 8003718:	08010134 	.word	0x08010134
 800371c:	08010148 	.word	0x08010148

08003720 <UpkeepGadget>:

void Gadget_ReInit(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s) {

}

void UpkeepGadget() {
 8003720:	b580      	push	{r7, lr}
 8003722:	af00      	add	r7, sp, #0
   * 	Yes: create data format
   * 	Transmit data
   * 	Close connection
   * 	Disable ESP
   */
  Meas_Upkeep();
 8003724:	f000 fdde 	bl	80042e4 <Meas_Upkeep>
//  }
//  if(Battery) {
//    Meas_SetEnabledSensors(SensorSetBatt);
//  }

}
 8003728:	46c0      	nop			@ (mov r8, r8)
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}

0800372e <Gas_Init>:
>>>>>>> main

#include "gasSensor.h"
#include "stm32l0xx_it.h"
#include "utils.h"

void Gas_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
<<<<<<< HEAD
 8003624:	b580      	push	{r7, lr}
 8003626:	b082      	sub	sp, #8
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
 800362c:	6039      	str	r1, [r7, #0]
  SGP_Init(readFunction, writeFunction);
 800362e:	683a      	ldr	r2, [r7, #0]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	0011      	movs	r1, r2
 8003634:	0018      	movs	r0, r3
 8003636:	f001 ff31 	bl	800549c <SGP_Init>
}
 800363a:	46c0      	nop			@ (mov r8, r8)
 800363c:	46bd      	mov	sp, r7
 800363e:	b002      	add	sp, #8
 8003640:	bd80      	pop	{r7, pc}

08003642 <Gas_StartMeasurement>:

void Gas_StartMeasurement(void){
 8003642:	b580      	push	{r7, lr}
 8003644:	af00      	add	r7, sp, #0
  SGP_StartMeasurement();
 8003646:	f001 ff43 	bl	80054d0 <SGP_StartMeasurement>
}
 800364a:	46c0      	nop			@ (mov r8, r8)
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}

08003650 <Gas_GetMeasurementValues>:

bool Gas_GetMeasurementValues(int32_t* vocIndex) {
 8003650:	b580      	push	{r7, lr}
 8003652:	b082      	sub	sp, #8
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  return SGP_GetMeasurementValues(vocIndex);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	0018      	movs	r0, r3
 800365c:	f001 ff90 	bl	8005580 <SGP_GetMeasurementValues>
 8003660:	0003      	movs	r3, r0
}
 8003662:	0018      	movs	r0, r3
 8003664:	46bd      	mov	sp, r7
 8003666:	b002      	add	sp, #8
 8003668:	bd80      	pop	{r7, pc}

0800366a <Gas_DeviceConnected>:

bool Gas_DeviceConnected(void) {
 800366a:	b580      	push	{r7, lr}
 800366c:	af00      	add	r7, sp, #0
  return SGP_DeviceConnected();
 800366e:	f002 f891 	bl	8005794 <SGP_DeviceConnected>
 8003672:	0003      	movs	r3, r0
}
 8003674:	0018      	movs	r0, r3
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}
	...

0800367c <MX_GPIO_Init>:
=======
 800372e:	b580      	push	{r7, lr}
 8003730:	b082      	sub	sp, #8
 8003732:	af00      	add	r7, sp, #0
 8003734:	6078      	str	r0, [r7, #4]
 8003736:	6039      	str	r1, [r7, #0]
  SGP_Init(readFunction, writeFunction);
 8003738:	683a      	ldr	r2, [r7, #0]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	0011      	movs	r1, r2
 800373e:	0018      	movs	r0, r3
 8003740:	f001 fed6 	bl	80054f0 <SGP_Init>
}
 8003744:	46c0      	nop			@ (mov r8, r8)
 8003746:	46bd      	mov	sp, r7
 8003748:	b002      	add	sp, #8
 800374a:	bd80      	pop	{r7, pc}

0800374c <Gas_StartMeasurement>:

void Gas_StartMeasurement(void){
 800374c:	b580      	push	{r7, lr}
 800374e:	af00      	add	r7, sp, #0
  SGP_StartMeasurement();
 8003750:	f001 fee8 	bl	8005524 <SGP_StartMeasurement>
}
 8003754:	46c0      	nop			@ (mov r8, r8)
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}

0800375a <Gas_GetMeasurementValues>:

bool Gas_GetMeasurementValues(int32_t* vocIndex) {
 800375a:	b580      	push	{r7, lr}
 800375c:	b082      	sub	sp, #8
 800375e:	af00      	add	r7, sp, #0
 8003760:	6078      	str	r0, [r7, #4]
  return SGP_GetMeasurementValues(vocIndex);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	0018      	movs	r0, r3
 8003766:	f001 ff4d 	bl	8005604 <SGP_GetMeasurementValues>
 800376a:	0003      	movs	r3, r0
}
 800376c:	0018      	movs	r0, r3
 800376e:	46bd      	mov	sp, r7
 8003770:	b002      	add	sp, #8
 8003772:	bd80      	pop	{r7, pc}

08003774 <Gas_DeviceConnected>:

bool Gas_DeviceConnected(void) {
 8003774:	b580      	push	{r7, lr}
 8003776:	af00      	add	r7, sp, #0
  return SGP_DeviceConnected();
 8003778:	f002 f966 	bl	8005a48 <SGP_DeviceConnected>
 800377c:	0003      	movs	r3, r0
}
 800377e:	0018      	movs	r0, r3
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}

08003784 <MX_GPIO_Init>:
>>>>>>> main
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
<<<<<<< HEAD
 800367c:	b590      	push	{r4, r7, lr}
 800367e:	b08b      	sub	sp, #44	@ 0x2c
 8003680:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003682:	2414      	movs	r4, #20
 8003684:	193b      	adds	r3, r7, r4
 8003686:	0018      	movs	r0, r3
 8003688:	2314      	movs	r3, #20
 800368a:	001a      	movs	r2, r3
 800368c:	2100      	movs	r1, #0
 800368e:	f00a f849 	bl	800d724 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003692:	4b79      	ldr	r3, [pc, #484]	@ (8003878 <MX_GPIO_Init+0x1fc>)
 8003694:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003696:	4b78      	ldr	r3, [pc, #480]	@ (8003878 <MX_GPIO_Init+0x1fc>)
 8003698:	2104      	movs	r1, #4
 800369a:	430a      	orrs	r2, r1
 800369c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800369e:	4b76      	ldr	r3, [pc, #472]	@ (8003878 <MX_GPIO_Init+0x1fc>)
 80036a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036a2:	2204      	movs	r2, #4
 80036a4:	4013      	ands	r3, r2
 80036a6:	613b      	str	r3, [r7, #16]
 80036a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80036aa:	4b73      	ldr	r3, [pc, #460]	@ (8003878 <MX_GPIO_Init+0x1fc>)
 80036ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036ae:	4b72      	ldr	r3, [pc, #456]	@ (8003878 <MX_GPIO_Init+0x1fc>)
 80036b0:	2180      	movs	r1, #128	@ 0x80
 80036b2:	430a      	orrs	r2, r1
 80036b4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80036b6:	4b70      	ldr	r3, [pc, #448]	@ (8003878 <MX_GPIO_Init+0x1fc>)
 80036b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036ba:	2280      	movs	r2, #128	@ 0x80
 80036bc:	4013      	ands	r3, r2
 80036be:	60fb      	str	r3, [r7, #12]
 80036c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80036c2:	4b6d      	ldr	r3, [pc, #436]	@ (8003878 <MX_GPIO_Init+0x1fc>)
 80036c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036c6:	4b6c      	ldr	r3, [pc, #432]	@ (8003878 <MX_GPIO_Init+0x1fc>)
 80036c8:	2101      	movs	r1, #1
 80036ca:	430a      	orrs	r2, r1
 80036cc:	62da      	str	r2, [r3, #44]	@ 0x2c
 80036ce:	4b6a      	ldr	r3, [pc, #424]	@ (8003878 <MX_GPIO_Init+0x1fc>)
 80036d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036d2:	2201      	movs	r2, #1
 80036d4:	4013      	ands	r3, r2
 80036d6:	60bb      	str	r3, [r7, #8]
 80036d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80036da:	4b67      	ldr	r3, [pc, #412]	@ (8003878 <MX_GPIO_Init+0x1fc>)
 80036dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036de:	4b66      	ldr	r3, [pc, #408]	@ (8003878 <MX_GPIO_Init+0x1fc>)
 80036e0:	2102      	movs	r1, #2
 80036e2:	430a      	orrs	r2, r1
 80036e4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80036e6:	4b64      	ldr	r3, [pc, #400]	@ (8003878 <MX_GPIO_Init+0x1fc>)
 80036e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036ea:	2202      	movs	r2, #2
 80036ec:	4013      	ands	r3, r2
 80036ee:	607b      	str	r3, [r7, #4]
 80036f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80036f2:	4b61      	ldr	r3, [pc, #388]	@ (8003878 <MX_GPIO_Init+0x1fc>)
 80036f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036f6:	4b60      	ldr	r3, [pc, #384]	@ (8003878 <MX_GPIO_Init+0x1fc>)
 80036f8:	2108      	movs	r1, #8
 80036fa:	430a      	orrs	r2, r1
 80036fc:	62da      	str	r2, [r3, #44]	@ 0x2c
 80036fe:	4b5e      	ldr	r3, [pc, #376]	@ (8003878 <MX_GPIO_Init+0x1fc>)
 8003700:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003702:	2208      	movs	r2, #8
 8003704:	4013      	ands	r3, r2
 8003706:	603b      	str	r3, [r7, #0]
 8003708:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 800370a:	4b5c      	ldr	r3, [pc, #368]	@ (800387c <MX_GPIO_Init+0x200>)
 800370c:	2201      	movs	r2, #1
 800370e:	2101      	movs	r1, #1
 8003710:	0018      	movs	r0, r3
 8003712:	f004 f8cf 	bl	80078b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 8003716:	4b59      	ldr	r3, [pc, #356]	@ (800387c <MX_GPIO_Init+0x200>)
 8003718:	2200      	movs	r2, #0
 800371a:	2102      	movs	r1, #2
 800371c:	0018      	movs	r0, r3
 800371e:	f004 f8c9 	bl	80078b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin, GPIO_PIN_SET);
 8003722:	4957      	ldr	r1, [pc, #348]	@ (8003880 <MX_GPIO_Init+0x204>)
 8003724:	4b57      	ldr	r3, [pc, #348]	@ (8003884 <MX_GPIO_Init+0x208>)
 8003726:	2201      	movs	r2, #1
 8003728:	0018      	movs	r0, r3
 800372a:	f004 f8c3 	bl	80078b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 800372e:	2380      	movs	r3, #128	@ 0x80
 8003730:	011b      	lsls	r3, r3, #4
 8003732:	4855      	ldr	r0, [pc, #340]	@ (8003888 <MX_GPIO_Init+0x20c>)
 8003734:	2201      	movs	r2, #1
 8003736:	0019      	movs	r1, r3
 8003738:	f004 f8bc 	bl	80078b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC2 PC3 PC4
                           PC5 PC9 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 800373c:	193b      	adds	r3, r7, r4
 800373e:	4a53      	ldr	r2, [pc, #332]	@ (800388c <MX_GPIO_Init+0x210>)
 8003740:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_5|GPIO_PIN_9|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003742:	193b      	adds	r3, r7, r4
 8003744:	2203      	movs	r2, #3
 8003746:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003748:	193b      	adds	r3, r7, r4
 800374a:	2200      	movs	r2, #0
 800374c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800374e:	193b      	adds	r3, r7, r4
 8003750:	4a4d      	ldr	r2, [pc, #308]	@ (8003888 <MX_GPIO_Init+0x20c>)
 8003752:	0019      	movs	r1, r3
 8003754:	0010      	movs	r0, r2
 8003756:	f003 fe4d 	bl	80073f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = ESP32_EN_Pin|ESP32_BOOT_Pin;
 800375a:	193b      	adds	r3, r7, r4
 800375c:	2203      	movs	r2, #3
 800375e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003760:	193b      	adds	r3, r7, r4
 8003762:	2201      	movs	r2, #1
 8003764:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003766:	193b      	adds	r3, r7, r4
 8003768:	2200      	movs	r2, #0
 800376a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800376c:	193b      	adds	r3, r7, r4
 800376e:	2200      	movs	r2, #0
 8003770:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003772:	193b      	adds	r3, r7, r4
 8003774:	4a41      	ldr	r2, [pc, #260]	@ (800387c <MX_GPIO_Init+0x200>)
 8003776:	0019      	movs	r1, r3
 8003778:	0010      	movs	r0, r2
 800377a:	f003 fe3b 	bl	80073f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800377e:	193b      	adds	r3, r7, r4
 8003780:	2270      	movs	r2, #112	@ 0x70
 8003782:	601a      	str	r2, [r3, #0]
=======
 8003784:	b590      	push	{r4, r7, lr}
 8003786:	b08b      	sub	sp, #44	@ 0x2c
 8003788:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800378a:	2414      	movs	r4, #20
 800378c:	193b      	adds	r3, r7, r4
 800378e:	0018      	movs	r0, r3
 8003790:	2314      	movs	r3, #20
 8003792:	001a      	movs	r2, r3
 8003794:	2100      	movs	r1, #0
 8003796:	f00a f911 	bl	800d9bc <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800379a:	4b70      	ldr	r3, [pc, #448]	@ (800395c <MX_GPIO_Init+0x1d8>)
 800379c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800379e:	4b6f      	ldr	r3, [pc, #444]	@ (800395c <MX_GPIO_Init+0x1d8>)
 80037a0:	2104      	movs	r1, #4
 80037a2:	430a      	orrs	r2, r1
 80037a4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80037a6:	4b6d      	ldr	r3, [pc, #436]	@ (800395c <MX_GPIO_Init+0x1d8>)
 80037a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037aa:	2204      	movs	r2, #4
 80037ac:	4013      	ands	r3, r2
 80037ae:	613b      	str	r3, [r7, #16]
 80037b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80037b2:	4b6a      	ldr	r3, [pc, #424]	@ (800395c <MX_GPIO_Init+0x1d8>)
 80037b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037b6:	4b69      	ldr	r3, [pc, #420]	@ (800395c <MX_GPIO_Init+0x1d8>)
 80037b8:	2180      	movs	r1, #128	@ 0x80
 80037ba:	430a      	orrs	r2, r1
 80037bc:	62da      	str	r2, [r3, #44]	@ 0x2c
 80037be:	4b67      	ldr	r3, [pc, #412]	@ (800395c <MX_GPIO_Init+0x1d8>)
 80037c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037c2:	2280      	movs	r2, #128	@ 0x80
 80037c4:	4013      	ands	r3, r2
 80037c6:	60fb      	str	r3, [r7, #12]
 80037c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80037ca:	4b64      	ldr	r3, [pc, #400]	@ (800395c <MX_GPIO_Init+0x1d8>)
 80037cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037ce:	4b63      	ldr	r3, [pc, #396]	@ (800395c <MX_GPIO_Init+0x1d8>)
 80037d0:	2101      	movs	r1, #1
 80037d2:	430a      	orrs	r2, r1
 80037d4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80037d6:	4b61      	ldr	r3, [pc, #388]	@ (800395c <MX_GPIO_Init+0x1d8>)
 80037d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037da:	2201      	movs	r2, #1
 80037dc:	4013      	ands	r3, r2
 80037de:	60bb      	str	r3, [r7, #8]
 80037e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80037e2:	4b5e      	ldr	r3, [pc, #376]	@ (800395c <MX_GPIO_Init+0x1d8>)
 80037e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037e6:	4b5d      	ldr	r3, [pc, #372]	@ (800395c <MX_GPIO_Init+0x1d8>)
 80037e8:	2102      	movs	r1, #2
 80037ea:	430a      	orrs	r2, r1
 80037ec:	62da      	str	r2, [r3, #44]	@ 0x2c
 80037ee:	4b5b      	ldr	r3, [pc, #364]	@ (800395c <MX_GPIO_Init+0x1d8>)
 80037f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037f2:	2202      	movs	r2, #2
 80037f4:	4013      	ands	r3, r2
 80037f6:	607b      	str	r3, [r7, #4]
 80037f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80037fa:	4b58      	ldr	r3, [pc, #352]	@ (800395c <MX_GPIO_Init+0x1d8>)
 80037fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037fe:	4b57      	ldr	r3, [pc, #348]	@ (800395c <MX_GPIO_Init+0x1d8>)
 8003800:	2108      	movs	r1, #8
 8003802:	430a      	orrs	r2, r1
 8003804:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003806:	4b55      	ldr	r3, [pc, #340]	@ (800395c <MX_GPIO_Init+0x1d8>)
 8003808:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800380a:	2208      	movs	r2, #8
 800380c:	4013      	ands	r3, r2
 800380e:	603b      	str	r3, [r7, #0]
 8003810:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 8003812:	4b53      	ldr	r3, [pc, #332]	@ (8003960 <MX_GPIO_Init+0x1dc>)
 8003814:	2201      	movs	r2, #1
 8003816:	2101      	movs	r1, #1
 8003818:	0018      	movs	r0, r3
 800381a:	f004 f9ad 	bl	8007b78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 800381e:	4b50      	ldr	r3, [pc, #320]	@ (8003960 <MX_GPIO_Init+0x1dc>)
 8003820:	2200      	movs	r2, #0
 8003822:	2102      	movs	r1, #2
 8003824:	0018      	movs	r0, r3
 8003826:	f004 f9a7 	bl	8007b78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin, GPIO_PIN_SET);
 800382a:	494e      	ldr	r1, [pc, #312]	@ (8003964 <MX_GPIO_Init+0x1e0>)
 800382c:	4b4e      	ldr	r3, [pc, #312]	@ (8003968 <MX_GPIO_Init+0x1e4>)
 800382e:	2201      	movs	r2, #1
 8003830:	0018      	movs	r0, r3
 8003832:	f004 f9a1 	bl	8007b78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 8003836:	2380      	movs	r3, #128	@ 0x80
 8003838:	011b      	lsls	r3, r3, #4
 800383a:	484c      	ldr	r0, [pc, #304]	@ (800396c <MX_GPIO_Init+0x1e8>)
 800383c:	2201      	movs	r2, #1
 800383e:	0019      	movs	r1, r3
 8003840:	f004 f99a 	bl	8007b78 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC0 PC1 PC2
                           PC3 PC4 PC5 PC9
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
 8003844:	193b      	adds	r3, r7, r4
 8003846:	4a4a      	ldr	r2, [pc, #296]	@ (8003970 <MX_GPIO_Init+0x1ec>)
 8003848:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_9
                          |GPIO_PIN_12;
>>>>>>> main
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003784:	193b      	adds	r3, r7, r4
 8003786:	2203      	movs	r2, #3
 8003788:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
<<<<<<< HEAD
 800378a:	193b      	adds	r3, r7, r4
 800378c:	2200      	movs	r2, #0
 800378e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003790:	193a      	adds	r2, r7, r4
 8003792:	23a0      	movs	r3, #160	@ 0xa0
 8003794:	05db      	lsls	r3, r3, #23
 8003796:	0011      	movs	r1, r2
 8003798:	0018      	movs	r0, r3
 800379a:	f003 fe2b 	bl	80073f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = VusbDetect_Pin|Wireless_PSU_PG_Pin;
 800379e:	193b      	adds	r3, r7, r4
 80037a0:	22c0      	movs	r2, #192	@ 0xc0
 80037a2:	0052      	lsls	r2, r2, #1
 80037a4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80037a6:	193b      	adds	r3, r7, r4
 80037a8:	2200      	movs	r2, #0
 80037aa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037ac:	193b      	adds	r3, r7, r4
 80037ae:	2200      	movs	r2, #0
 80037b0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037b2:	193a      	adds	r2, r7, r4
 80037b4:	23a0      	movs	r3, #160	@ 0xa0
 80037b6:	05db      	lsls	r3, r3, #23
 80037b8:	0011      	movs	r1, r2
 80037ba:	0018      	movs	r0, r3
 80037bc:	f003 fe1a 	bl	80073f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin;
 80037c0:	193b      	adds	r3, r7, r4
 80037c2:	4a2f      	ldr	r2, [pc, #188]	@ (8003880 <MX_GPIO_Init+0x204>)
 80037c4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80037c6:	193b      	adds	r3, r7, r4
 80037c8:	2201      	movs	r2, #1
 80037ca:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037cc:	193b      	adds	r3, r7, r4
 80037ce:	2200      	movs	r2, #0
 80037d0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037d2:	193b      	adds	r3, r7, r4
 80037d4:	2200      	movs	r2, #0
 80037d6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037d8:	193b      	adds	r3, r7, r4
 80037da:	4a2a      	ldr	r2, [pc, #168]	@ (8003884 <MX_GPIO_Init+0x208>)
 80037dc:	0019      	movs	r1, r3
 80037de:	0010      	movs	r0, r2
 80037e0:	f003 fe08 	bl	80073f4 <HAL_GPIO_Init>
=======
 8003850:	193b      	adds	r3, r7, r4
 8003852:	2200      	movs	r2, #0
 8003854:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003856:	193b      	adds	r3, r7, r4
 8003858:	4a44      	ldr	r2, [pc, #272]	@ (800396c <MX_GPIO_Init+0x1e8>)
 800385a:	0019      	movs	r1, r3
 800385c:	0010      	movs	r0, r2
 800385e:	f003 ff2b 	bl	80076b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = ESP32_EN_Pin|ESP32_BOOT_Pin;
 8003862:	193b      	adds	r3, r7, r4
 8003864:	2203      	movs	r2, #3
 8003866:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003868:	193b      	adds	r3, r7, r4
 800386a:	2201      	movs	r2, #1
 800386c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800386e:	193b      	adds	r3, r7, r4
 8003870:	2200      	movs	r2, #0
 8003872:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003874:	193b      	adds	r3, r7, r4
 8003876:	2200      	movs	r2, #0
 8003878:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800387a:	193b      	adds	r3, r7, r4
 800387c:	4a38      	ldr	r2, [pc, #224]	@ (8003960 <MX_GPIO_Init+0x1dc>)
 800387e:	0019      	movs	r1, r3
 8003880:	0010      	movs	r0, r2
 8003882:	f003 ff19 	bl	80076b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_15;
 8003886:	193b      	adds	r3, r7, r4
 8003888:	4a3a      	ldr	r2, [pc, #232]	@ (8003974 <MX_GPIO_Init+0x1f0>)
 800388a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800388c:	193b      	adds	r3, r7, r4
 800388e:	2203      	movs	r2, #3
 8003890:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003892:	193b      	adds	r3, r7, r4
 8003894:	2200      	movs	r2, #0
 8003896:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003898:	193a      	adds	r2, r7, r4
 800389a:	23a0      	movs	r3, #160	@ 0xa0
 800389c:	05db      	lsls	r3, r3, #23
 800389e:	0011      	movs	r1, r2
 80038a0:	0018      	movs	r0, r3
 80038a2:	f003 ff09 	bl	80076b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = VusbDetect_Pin|Wireless_PSU_PG_Pin;
 80038a6:	193b      	adds	r3, r7, r4
 80038a8:	22c0      	movs	r2, #192	@ 0xc0
 80038aa:	0052      	lsls	r2, r2, #1
 80038ac:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80038ae:	193b      	adds	r3, r7, r4
 80038b0:	2200      	movs	r2, #0
 80038b2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038b4:	193b      	adds	r3, r7, r4
 80038b6:	2200      	movs	r2, #0
 80038b8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038ba:	193a      	adds	r2, r7, r4
 80038bc:	23a0      	movs	r3, #160	@ 0xa0
 80038be:	05db      	lsls	r3, r3, #23
 80038c0:	0011      	movs	r1, r2
 80038c2:	0018      	movs	r0, r3
 80038c4:	f003 fef8 	bl	80076b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin;
 80038c8:	193b      	adds	r3, r7, r4
 80038ca:	4a26      	ldr	r2, [pc, #152]	@ (8003964 <MX_GPIO_Init+0x1e0>)
 80038cc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80038ce:	193b      	adds	r3, r7, r4
 80038d0:	2201      	movs	r2, #1
 80038d2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038d4:	193b      	adds	r3, r7, r4
 80038d6:	2200      	movs	r2, #0
 80038d8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038da:	193b      	adds	r3, r7, r4
 80038dc:	2200      	movs	r2, #0
 80038de:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038e0:	193b      	adds	r3, r7, r4
 80038e2:	4a21      	ldr	r2, [pc, #132]	@ (8003968 <MX_GPIO_Init+0x1e4>)
 80038e4:	0019      	movs	r1, r3
 80038e6:	0010      	movs	r0, r2
 80038e8:	f003 fee6 	bl	80076b8 <HAL_GPIO_Init>
>>>>>>> main

  /*Configure GPIO pins : PB1 PB2 PB14 PB3
                           PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_14|GPIO_PIN_3
<<<<<<< HEAD
 80037e4:	193b      	adds	r3, r7, r4
 80037e6:	4a2a      	ldr	r2, [pc, #168]	@ (8003890 <MX_GPIO_Init+0x214>)
 80037e8:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80037ea:	193b      	adds	r3, r7, r4
 80037ec:	2203      	movs	r2, #3
 80037ee:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037f0:	193b      	adds	r3, r7, r4
 80037f2:	2200      	movs	r2, #0
 80037f4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037f6:	193b      	adds	r3, r7, r4
 80037f8:	4a22      	ldr	r2, [pc, #136]	@ (8003884 <MX_GPIO_Init+0x208>)
 80037fa:	0019      	movs	r1, r3
 80037fc:	0010      	movs	r0, r2
 80037fe:	f003 fdf9 	bl	80073f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT0_Pin;
 8003802:	193b      	adds	r3, r7, r4
 8003804:	2280      	movs	r2, #128	@ 0x80
 8003806:	0212      	lsls	r2, r2, #8
 8003808:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800380a:	193b      	adds	r3, r7, r4
 800380c:	2200      	movs	r2, #0
 800380e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003810:	193b      	adds	r3, r7, r4
 8003812:	2202      	movs	r2, #2
 8003814:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BOOT0_GPIO_Port, &GPIO_InitStruct);
 8003816:	193a      	adds	r2, r7, r4
 8003818:	23a0      	movs	r3, #160	@ 0xa0
 800381a:	05db      	lsls	r3, r3, #23
 800381c:	0011      	movs	r1, r2
 800381e:	0018      	movs	r0, r3
 8003820:	f003 fde8 	bl	80073f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Wireless_PSU_EN_Pin;
 8003824:	0021      	movs	r1, r4
 8003826:	187b      	adds	r3, r7, r1
 8003828:	2280      	movs	r2, #128	@ 0x80
 800382a:	0112      	lsls	r2, r2, #4
 800382c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800382e:	000c      	movs	r4, r1
 8003830:	193b      	adds	r3, r7, r4
 8003832:	2201      	movs	r2, #1
 8003834:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003836:	193b      	adds	r3, r7, r4
 8003838:	2200      	movs	r2, #0
 800383a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800383c:	193b      	adds	r3, r7, r4
 800383e:	2200      	movs	r2, #0
 8003840:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(Wireless_PSU_EN_GPIO_Port, &GPIO_InitStruct);
 8003842:	193b      	adds	r3, r7, r4
 8003844:	4a10      	ldr	r2, [pc, #64]	@ (8003888 <MX_GPIO_Init+0x20c>)
 8003846:	0019      	movs	r1, r3
 8003848:	0010      	movs	r0, r2
 800384a:	f003 fdd3 	bl	80073f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = User_Button_Pin;
 800384e:	0021      	movs	r1, r4
 8003850:	187b      	adds	r3, r7, r1
 8003852:	2204      	movs	r2, #4
 8003854:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003856:	187b      	adds	r3, r7, r1
 8003858:	2200      	movs	r2, #0
 800385a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800385c:	187b      	adds	r3, r7, r1
 800385e:	2200      	movs	r2, #0
 8003860:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(User_Button_GPIO_Port, &GPIO_InitStruct);
 8003862:	187b      	adds	r3, r7, r1
 8003864:	4a0b      	ldr	r2, [pc, #44]	@ (8003894 <MX_GPIO_Init+0x218>)
 8003866:	0019      	movs	r1, r3
 8003868:	0010      	movs	r0, r2
 800386a:	f003 fdc3 	bl	80073f4 <HAL_GPIO_Init>

}
 800386e:	46c0      	nop			@ (mov r8, r8)
 8003870:	46bd      	mov	sp, r7
 8003872:	b00b      	add	sp, #44	@ 0x2c
 8003874:	bd90      	pop	{r4, r7, pc}
 8003876:	46c0      	nop			@ (mov r8, r8)
 8003878:	40021000 	.word	0x40021000
 800387c:	50001c00 	.word	0x50001c00
 8003880:	00000301 	.word	0x00000301
 8003884:	50000400 	.word	0x50000400
 8003888:	50000800 	.word	0x50000800
 800388c:	0000323c 	.word	0x0000323c
 8003890:	0000403e 	.word	0x0000403e
 8003894:	50000c00 	.word	0x50000c00

08003898 <GPIO_InitPWMLEDs>:

/* USER CODE BEGIN 2 */
void GPIO_InitPWMLEDs(TIM_HandleTypeDef* timer2, TIM_HandleTypeDef* timer3) {
 8003898:	b580      	push	{r7, lr}
 800389a:	b082      	sub	sp, #8
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
 80038a0:	6039      	str	r1, [r7, #0]
  // Timer 2 PWM init
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_1);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2100      	movs	r1, #0
 80038a6:	0018      	movs	r0, r3
 80038a8:	f007 fc3e 	bl	800b128 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_3);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2108      	movs	r1, #8
 80038b0:	0018      	movs	r0, r3
 80038b2:	f007 fc39 	bl	800b128 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_4);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	210c      	movs	r1, #12
 80038ba:	0018      	movs	r0, r3
 80038bc:	f007 fc34 	bl	800b128 <HAL_TIM_PWM_Start>
  TIM2 -> ARR = 4000;
 80038c0:	2380      	movs	r3, #128	@ 0x80
 80038c2:	05db      	lsls	r3, r3, #23
 80038c4:	22fa      	movs	r2, #250	@ 0xfa
 80038c6:	0112      	lsls	r2, r2, #4
 80038c8:	62da      	str	r2, [r3, #44]	@ 0x2c

  // Resetting the LEDs.
  // CCR1 = Red, CCR3 = Green, CCR4 = Blue.
  TIM2 -> CCR1 = 4000;
 80038ca:	2380      	movs	r3, #128	@ 0x80
 80038cc:	05db      	lsls	r3, r3, #23
 80038ce:	22fa      	movs	r2, #250	@ 0xfa
 80038d0:	0112      	lsls	r2, r2, #4
 80038d2:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2 -> CCR3 = 4000;
 80038d4:	2380      	movs	r3, #128	@ 0x80
 80038d6:	05db      	lsls	r3, r3, #23
 80038d8:	22fa      	movs	r2, #250	@ 0xfa
 80038da:	0112      	lsls	r2, r2, #4
 80038dc:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2 -> CCR4 = 4000;
 80038de:	2380      	movs	r3, #128	@ 0x80
 80038e0:	05db      	lsls	r3, r3, #23
 80038e2:	22fa      	movs	r2, #250	@ 0xfa
 80038e4:	0112      	lsls	r2, r2, #4
 80038e6:	641a      	str	r2, [r3, #64]	@ 0x40

  // Timer 3 PWM init
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_1);
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	2100      	movs	r1, #0
 80038ec:	0018      	movs	r0, r3
 80038ee:	f007 fc1b 	bl	800b128 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_2);
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	2104      	movs	r1, #4
 80038f6:	0018      	movs	r0, r3
 80038f8:	f007 fc16 	bl	800b128 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_3);
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	2108      	movs	r1, #8
 8003900:	0018      	movs	r0, r3
 8003902:	f007 fc11 	bl	800b128 <HAL_TIM_PWM_Start>
  TIM3 -> ARR = 4000;
 8003906:	4b0a      	ldr	r3, [pc, #40]	@ (8003930 <GPIO_InitPWMLEDs+0x98>)
 8003908:	22fa      	movs	r2, #250	@ 0xfa
 800390a:	0112      	lsls	r2, r2, #4
 800390c:	62da      	str	r2, [r3, #44]	@ 0x2c

  // CCR1 = Red, CCR2 = Green, CCR3 = Blue.
  TIM3 -> CCR1 = 4000;
 800390e:	4b08      	ldr	r3, [pc, #32]	@ (8003930 <GPIO_InitPWMLEDs+0x98>)
 8003910:	22fa      	movs	r2, #250	@ 0xfa
 8003912:	0112      	lsls	r2, r2, #4
 8003914:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3 -> CCR2 = 4000;
 8003916:	4b06      	ldr	r3, [pc, #24]	@ (8003930 <GPIO_InitPWMLEDs+0x98>)
 8003918:	22fa      	movs	r2, #250	@ 0xfa
 800391a:	0112      	lsls	r2, r2, #4
 800391c:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3 -> CCR3 = 4000;
 800391e:	4b04      	ldr	r3, [pc, #16]	@ (8003930 <GPIO_InitPWMLEDs+0x98>)
 8003920:	22fa      	movs	r2, #250	@ 0xfa
 8003922:	0112      	lsls	r2, r2, #4
 8003924:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8003926:	46c0      	nop			@ (mov r8, r8)
 8003928:	46bd      	mov	sp, r7
 800392a:	b002      	add	sp, #8
 800392c:	bd80      	pop	{r7, pc}
 800392e:	46c0      	nop			@ (mov r8, r8)
 8003930:	40000400 	.word	0x40000400

08003934 <HT_Init>:
=======
 80038ec:	193b      	adds	r3, r7, r4
 80038ee:	4a22      	ldr	r2, [pc, #136]	@ (8003978 <MX_GPIO_Init+0x1f4>)
 80038f0:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80038f2:	193b      	adds	r3, r7, r4
 80038f4:	2203      	movs	r2, #3
 80038f6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038f8:	193b      	adds	r3, r7, r4
 80038fa:	2200      	movs	r2, #0
 80038fc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038fe:	193b      	adds	r3, r7, r4
 8003900:	4a19      	ldr	r2, [pc, #100]	@ (8003968 <MX_GPIO_Init+0x1e4>)
 8003902:	0019      	movs	r1, r3
 8003904:	0010      	movs	r0, r2
 8003906:	f003 fed7 	bl	80076b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Wireless_PSU_EN_Pin;
 800390a:	0021      	movs	r1, r4
 800390c:	187b      	adds	r3, r7, r1
 800390e:	2280      	movs	r2, #128	@ 0x80
 8003910:	0112      	lsls	r2, r2, #4
 8003912:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003914:	000c      	movs	r4, r1
 8003916:	193b      	adds	r3, r7, r4
 8003918:	2201      	movs	r2, #1
 800391a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800391c:	193b      	adds	r3, r7, r4
 800391e:	2200      	movs	r2, #0
 8003920:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003922:	193b      	adds	r3, r7, r4
 8003924:	2200      	movs	r2, #0
 8003926:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(Wireless_PSU_EN_GPIO_Port, &GPIO_InitStruct);
 8003928:	193b      	adds	r3, r7, r4
 800392a:	4a10      	ldr	r2, [pc, #64]	@ (800396c <MX_GPIO_Init+0x1e8>)
 800392c:	0019      	movs	r1, r3
 800392e:	0010      	movs	r0, r2
 8003930:	f003 fec2 	bl	80076b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = User_Button_Pin;
 8003934:	0021      	movs	r1, r4
 8003936:	187b      	adds	r3, r7, r1
 8003938:	2204      	movs	r2, #4
 800393a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800393c:	187b      	adds	r3, r7, r1
 800393e:	2200      	movs	r2, #0
 8003940:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003942:	187b      	adds	r3, r7, r1
 8003944:	2200      	movs	r2, #0
 8003946:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(User_Button_GPIO_Port, &GPIO_InitStruct);
 8003948:	187b      	adds	r3, r7, r1
 800394a:	4a0c      	ldr	r2, [pc, #48]	@ (800397c <MX_GPIO_Init+0x1f8>)
 800394c:	0019      	movs	r1, r3
 800394e:	0010      	movs	r0, r2
 8003950:	f003 feb2 	bl	80076b8 <HAL_GPIO_Init>

}
 8003954:	46c0      	nop			@ (mov r8, r8)
 8003956:	46bd      	mov	sp, r7
 8003958:	b00b      	add	sp, #44	@ 0x2c
 800395a:	bd90      	pop	{r4, r7, pc}
 800395c:	40021000 	.word	0x40021000
 8003960:	50001c00 	.word	0x50001c00
 8003964:	00000301 	.word	0x00000301
 8003968:	50000400 	.word	0x50000400
 800396c:	50000800 	.word	0x50000800
 8003970:	0000323f 	.word	0x0000323f
 8003974:	00008070 	.word	0x00008070
 8003978:	0000403e 	.word	0x0000403e
 800397c:	50000c00 	.word	0x50000c00

08003980 <HT_Init>:
>>>>>>> main
#include <stdlib.h>
#include "humidTemp.h"
#include "utils.h"
#include "wsenHIDS.h"

void HT_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
<<<<<<< HEAD
 8003934:	b580      	push	{r7, lr}
 8003936:	b082      	sub	sp, #8
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
 800393c:	6039      	str	r1, [r7, #0]
  HIDS_Init(readFunction, writeFunction);
 800393e:	683a      	ldr	r2, [r7, #0]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	0011      	movs	r1, r2
 8003944:	0018      	movs	r0, r3
 8003946:	f002 fed7 	bl	80066f8 <HIDS_Init>
}
 800394a:	46c0      	nop			@ (mov r8, r8)
 800394c:	46bd      	mov	sp, r7
 800394e:	b002      	add	sp, #8
 8003950:	bd80      	pop	{r7, pc}

08003952 <HT_StartMeasurement>:

void HT_StartMeasurement() {
 8003952:	b580      	push	{r7, lr}
 8003954:	af00      	add	r7, sp, #0
  HIDS_StartMeasurement();
 8003956:	f002 fef1 	bl	800673c <HIDS_StartMeasurement>
}
 800395a:	46c0      	nop			@ (mov r8, r8)
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}

08003960 <HT_GetMeasurementValues>:
=======
 8003980:	b580      	push	{r7, lr}
 8003982:	b082      	sub	sp, #8
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
 8003988:	6039      	str	r1, [r7, #0]
  HIDS_Init(readFunction, writeFunction);
 800398a:	683a      	ldr	r2, [r7, #0]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	0011      	movs	r1, r2
 8003990:	0018      	movs	r0, r3
 8003992:	f003 f839 	bl	8006a08 <HIDS_Init>
}
 8003996:	46c0      	nop			@ (mov r8, r8)
 8003998:	46bd      	mov	sp, r7
 800399a:	b002      	add	sp, #8
 800399c:	bd80      	pop	{r7, pc}

0800399e <HT_StartMeasurement>:

void HT_StartMeasurement() {
 800399e:	b580      	push	{r7, lr}
 80039a0:	af00      	add	r7, sp, #0
  HIDS_StartMeasurement();
 80039a2:	f003 f853 	bl	8006a4c <HIDS_StartMeasurement>
}
 80039a6:	46c0      	nop			@ (mov r8, r8)
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}

080039ac <HT_GetMeasurementValues>:
>>>>>>> main

void HT_SetMeasurementDuration(uint32_t duration) {
  HIDS_SetMeasurementDuration(duration);
}

bool HT_GetMeasurementValues(float* humidity_perc, float* temperature) {
<<<<<<< HEAD
 8003960:	b580      	push	{r7, lr}
 8003962:	b082      	sub	sp, #8
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
 8003968:	6039      	str	r1, [r7, #0]
  return HIDS_GetMeasurementValues(humidity_perc, temperature);
 800396a:	683a      	ldr	r2, [r7, #0]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	0011      	movs	r1, r2
 8003970:	0018      	movs	r0, r3
 8003972:	f002 ffbf 	bl	80068f4 <HIDS_GetMeasurementValues>
 8003976:	0003      	movs	r3, r0
}
 8003978:	0018      	movs	r0, r3
 800397a:	46bd      	mov	sp, r7
 800397c:	b002      	add	sp, #8
 800397e:	bd80      	pop	{r7, pc}

08003980 <HT_DeviceConnected>:

bool HT_DeviceConnected() {
 8003980:	b580      	push	{r7, lr}
 8003982:	af00      	add	r7, sp, #0
  return HIDS_DeviceConnected();
 8003984:	f002 ff5a 	bl	800683c <HIDS_DeviceConnected>
 8003988:	0003      	movs	r3, r0
}
 800398a:	0018      	movs	r0, r3
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}

08003990 <MX_I2C1_Init>:
=======
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b082      	sub	sp, #8
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
 80039b4:	6039      	str	r1, [r7, #0]
  return HIDS_GetMeasurementValues(humidity_perc, temperature);
 80039b6:	683a      	ldr	r2, [r7, #0]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	0011      	movs	r1, r2
 80039bc:	0018      	movs	r0, r3
 80039be:	f003 f921 	bl	8006c04 <HIDS_GetMeasurementValues>
 80039c2:	0003      	movs	r3, r0
}
 80039c4:	0018      	movs	r0, r3
 80039c6:	46bd      	mov	sp, r7
 80039c8:	b002      	add	sp, #8
 80039ca:	bd80      	pop	{r7, pc}

080039cc <HT_DeviceConnected>:

bool HT_DeviceConnected() {
 80039cc:	b580      	push	{r7, lr}
 80039ce:	af00      	add	r7, sp, #0
  return HIDS_DeviceConnected();
 80039d0:	f003 f8bc 	bl	8006b4c <HIDS_DeviceConnected>
 80039d4:	0003      	movs	r3, r0
}
 80039d6:	0018      	movs	r0, r3
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}

080039dc <MX_I2C1_Init>:
>>>>>>> main
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
<<<<<<< HEAD
 8003990:	b580      	push	{r7, lr}
 8003992:	af00      	add	r7, sp, #0
=======
 80039dc:	b580      	push	{r7, lr}
 80039de:	af00      	add	r7, sp, #0
>>>>>>> main
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
<<<<<<< HEAD
 8003994:	4b1b      	ldr	r3, [pc, #108]	@ (8003a04 <MX_I2C1_Init+0x74>)
 8003996:	4a1c      	ldr	r2, [pc, #112]	@ (8003a08 <MX_I2C1_Init+0x78>)
 8003998:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00503D58;
 800399a:	4b1a      	ldr	r3, [pc, #104]	@ (8003a04 <MX_I2C1_Init+0x74>)
 800399c:	4a1b      	ldr	r2, [pc, #108]	@ (8003a0c <MX_I2C1_Init+0x7c>)
 800399e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80039a0:	4b18      	ldr	r3, [pc, #96]	@ (8003a04 <MX_I2C1_Init+0x74>)
 80039a2:	2200      	movs	r2, #0
 80039a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80039a6:	4b17      	ldr	r3, [pc, #92]	@ (8003a04 <MX_I2C1_Init+0x74>)
 80039a8:	2201      	movs	r2, #1
 80039aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80039ac:	4b15      	ldr	r3, [pc, #84]	@ (8003a04 <MX_I2C1_Init+0x74>)
 80039ae:	2200      	movs	r2, #0
 80039b0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80039b2:	4b14      	ldr	r3, [pc, #80]	@ (8003a04 <MX_I2C1_Init+0x74>)
 80039b4:	2200      	movs	r2, #0
 80039b6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80039b8:	4b12      	ldr	r3, [pc, #72]	@ (8003a04 <MX_I2C1_Init+0x74>)
 80039ba:	2200      	movs	r2, #0
 80039bc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80039be:	4b11      	ldr	r3, [pc, #68]	@ (8003a04 <MX_I2C1_Init+0x74>)
 80039c0:	2200      	movs	r2, #0
 80039c2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80039c4:	4b0f      	ldr	r3, [pc, #60]	@ (8003a04 <MX_I2C1_Init+0x74>)
 80039c6:	2200      	movs	r2, #0
 80039c8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80039ca:	4b0e      	ldr	r3, [pc, #56]	@ (8003a04 <MX_I2C1_Init+0x74>)
 80039cc:	0018      	movs	r0, r3
 80039ce:	f003 ff8f 	bl	80078f0 <HAL_I2C_Init>
 80039d2:	1e03      	subs	r3, r0, #0
 80039d4:	d001      	beq.n	80039da <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80039d6:	f000 faaf 	bl	8003f38 <Error_Handler>
=======
 80039e0:	4b1b      	ldr	r3, [pc, #108]	@ (8003a50 <MX_I2C1_Init+0x74>)
 80039e2:	4a1c      	ldr	r2, [pc, #112]	@ (8003a54 <MX_I2C1_Init+0x78>)
 80039e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00503D58;
 80039e6:	4b1a      	ldr	r3, [pc, #104]	@ (8003a50 <MX_I2C1_Init+0x74>)
 80039e8:	4a1b      	ldr	r2, [pc, #108]	@ (8003a58 <MX_I2C1_Init+0x7c>)
 80039ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80039ec:	4b18      	ldr	r3, [pc, #96]	@ (8003a50 <MX_I2C1_Init+0x74>)
 80039ee:	2200      	movs	r2, #0
 80039f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80039f2:	4b17      	ldr	r3, [pc, #92]	@ (8003a50 <MX_I2C1_Init+0x74>)
 80039f4:	2201      	movs	r2, #1
 80039f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80039f8:	4b15      	ldr	r3, [pc, #84]	@ (8003a50 <MX_I2C1_Init+0x74>)
 80039fa:	2200      	movs	r2, #0
 80039fc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80039fe:	4b14      	ldr	r3, [pc, #80]	@ (8003a50 <MX_I2C1_Init+0x74>)
 8003a00:	2200      	movs	r2, #0
 8003a02:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003a04:	4b12      	ldr	r3, [pc, #72]	@ (8003a50 <MX_I2C1_Init+0x74>)
 8003a06:	2200      	movs	r2, #0
 8003a08:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003a0a:	4b11      	ldr	r3, [pc, #68]	@ (8003a50 <MX_I2C1_Init+0x74>)
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003a10:	4b0f      	ldr	r3, [pc, #60]	@ (8003a50 <MX_I2C1_Init+0x74>)
 8003a12:	2200      	movs	r2, #0
 8003a14:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003a16:	4b0e      	ldr	r3, [pc, #56]	@ (8003a50 <MX_I2C1_Init+0x74>)
 8003a18:	0018      	movs	r0, r3
 8003a1a:	f004 f8cb 	bl	8007bb4 <HAL_I2C_Init>
 8003a1e:	1e03      	subs	r3, r0, #0
 8003a20:	d001      	beq.n	8003a26 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8003a22:	f000 fab1 	bl	8003f88 <Error_Handler>
>>>>>>> main
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
<<<<<<< HEAD
 80039da:	4b0a      	ldr	r3, [pc, #40]	@ (8003a04 <MX_I2C1_Init+0x74>)
 80039dc:	2100      	movs	r1, #0
 80039de:	0018      	movs	r0, r3
 80039e0:	f005 fefe 	bl	80097e0 <HAL_I2CEx_ConfigAnalogFilter>
 80039e4:	1e03      	subs	r3, r0, #0
 80039e6:	d001      	beq.n	80039ec <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80039e8:	f000 faa6 	bl	8003f38 <Error_Handler>
=======
 8003a26:	4b0a      	ldr	r3, [pc, #40]	@ (8003a50 <MX_I2C1_Init+0x74>)
 8003a28:	2100      	movs	r1, #0
 8003a2a:	0018      	movs	r0, r3
 8003a2c:	f006 f83a 	bl	8009aa4 <HAL_I2CEx_ConfigAnalogFilter>
 8003a30:	1e03      	subs	r3, r0, #0
 8003a32:	d001      	beq.n	8003a38 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003a34:	f000 faa8 	bl	8003f88 <Error_Handler>
>>>>>>> main
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
<<<<<<< HEAD
 80039ec:	4b05      	ldr	r3, [pc, #20]	@ (8003a04 <MX_I2C1_Init+0x74>)
 80039ee:	2100      	movs	r1, #0
 80039f0:	0018      	movs	r0, r3
 80039f2:	f005 ff41 	bl	8009878 <HAL_I2CEx_ConfigDigitalFilter>
 80039f6:	1e03      	subs	r3, r0, #0
 80039f8:	d001      	beq.n	80039fe <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80039fa:	f000 fa9d 	bl	8003f38 <Error_Handler>
=======
 8003a38:	4b05      	ldr	r3, [pc, #20]	@ (8003a50 <MX_I2C1_Init+0x74>)
 8003a3a:	2100      	movs	r1, #0
 8003a3c:	0018      	movs	r0, r3
 8003a3e:	f006 f87d 	bl	8009b3c <HAL_I2CEx_ConfigDigitalFilter>
 8003a42:	1e03      	subs	r3, r0, #0
 8003a44:	d001      	beq.n	8003a4a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8003a46:	f000 fa9f 	bl	8003f88 <Error_Handler>
>>>>>>> main
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
<<<<<<< HEAD
 80039fe:	46c0      	nop			@ (mov r8, r8)
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}
 8003a04:	20000240 	.word	0x20000240
 8003a08:	40005400 	.word	0x40005400
 8003a0c:	00503d58 	.word	0x00503d58

08003a10 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	af00      	add	r7, sp, #0
=======
 8003a4a:	46c0      	nop			@ (mov r8, r8)
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}
 8003a50:	2000024c 	.word	0x2000024c
 8003a54:	40005400 	.word	0x40005400
 8003a58:	00503d58 	.word	0x00503d58

08003a5c <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	af00      	add	r7, sp, #0
>>>>>>> main
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
<<<<<<< HEAD
 8003a14:	4b1b      	ldr	r3, [pc, #108]	@ (8003a84 <MX_I2C2_Init+0x74>)
 8003a16:	4a1c      	ldr	r2, [pc, #112]	@ (8003a88 <MX_I2C2_Init+0x78>)
 8003a18:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00503D58;
 8003a1a:	4b1a      	ldr	r3, [pc, #104]	@ (8003a84 <MX_I2C2_Init+0x74>)
 8003a1c:	4a1b      	ldr	r2, [pc, #108]	@ (8003a8c <MX_I2C2_Init+0x7c>)
 8003a1e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8003a20:	4b18      	ldr	r3, [pc, #96]	@ (8003a84 <MX_I2C2_Init+0x74>)
 8003a22:	2200      	movs	r2, #0
 8003a24:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003a26:	4b17      	ldr	r3, [pc, #92]	@ (8003a84 <MX_I2C2_Init+0x74>)
 8003a28:	2201      	movs	r2, #1
 8003a2a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003a2c:	4b15      	ldr	r3, [pc, #84]	@ (8003a84 <MX_I2C2_Init+0x74>)
 8003a2e:	2200      	movs	r2, #0
 8003a30:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8003a32:	4b14      	ldr	r3, [pc, #80]	@ (8003a84 <MX_I2C2_Init+0x74>)
 8003a34:	2200      	movs	r2, #0
 8003a36:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003a38:	4b12      	ldr	r3, [pc, #72]	@ (8003a84 <MX_I2C2_Init+0x74>)
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003a3e:	4b11      	ldr	r3, [pc, #68]	@ (8003a84 <MX_I2C2_Init+0x74>)
 8003a40:	2200      	movs	r2, #0
 8003a42:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003a44:	4b0f      	ldr	r3, [pc, #60]	@ (8003a84 <MX_I2C2_Init+0x74>)
 8003a46:	2200      	movs	r2, #0
 8003a48:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003a4a:	4b0e      	ldr	r3, [pc, #56]	@ (8003a84 <MX_I2C2_Init+0x74>)
 8003a4c:	0018      	movs	r0, r3
 8003a4e:	f003 ff4f 	bl	80078f0 <HAL_I2C_Init>
 8003a52:	1e03      	subs	r3, r0, #0
 8003a54:	d001      	beq.n	8003a5a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8003a56:	f000 fa6f 	bl	8003f38 <Error_Handler>
=======
 8003a60:	4b1b      	ldr	r3, [pc, #108]	@ (8003ad0 <MX_I2C2_Init+0x74>)
 8003a62:	4a1c      	ldr	r2, [pc, #112]	@ (8003ad4 <MX_I2C2_Init+0x78>)
 8003a64:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00503D58;
 8003a66:	4b1a      	ldr	r3, [pc, #104]	@ (8003ad0 <MX_I2C2_Init+0x74>)
 8003a68:	4a1b      	ldr	r2, [pc, #108]	@ (8003ad8 <MX_I2C2_Init+0x7c>)
 8003a6a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8003a6c:	4b18      	ldr	r3, [pc, #96]	@ (8003ad0 <MX_I2C2_Init+0x74>)
 8003a6e:	2200      	movs	r2, #0
 8003a70:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003a72:	4b17      	ldr	r3, [pc, #92]	@ (8003ad0 <MX_I2C2_Init+0x74>)
 8003a74:	2201      	movs	r2, #1
 8003a76:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003a78:	4b15      	ldr	r3, [pc, #84]	@ (8003ad0 <MX_I2C2_Init+0x74>)
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8003a7e:	4b14      	ldr	r3, [pc, #80]	@ (8003ad0 <MX_I2C2_Init+0x74>)
 8003a80:	2200      	movs	r2, #0
 8003a82:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003a84:	4b12      	ldr	r3, [pc, #72]	@ (8003ad0 <MX_I2C2_Init+0x74>)
 8003a86:	2200      	movs	r2, #0
 8003a88:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003a8a:	4b11      	ldr	r3, [pc, #68]	@ (8003ad0 <MX_I2C2_Init+0x74>)
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003a90:	4b0f      	ldr	r3, [pc, #60]	@ (8003ad0 <MX_I2C2_Init+0x74>)
 8003a92:	2200      	movs	r2, #0
 8003a94:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003a96:	4b0e      	ldr	r3, [pc, #56]	@ (8003ad0 <MX_I2C2_Init+0x74>)
 8003a98:	0018      	movs	r0, r3
 8003a9a:	f004 f88b 	bl	8007bb4 <HAL_I2C_Init>
 8003a9e:	1e03      	subs	r3, r0, #0
 8003aa0:	d001      	beq.n	8003aa6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8003aa2:	f000 fa71 	bl	8003f88 <Error_Handler>
>>>>>>> main
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
<<<<<<< HEAD
 8003a5a:	4b0a      	ldr	r3, [pc, #40]	@ (8003a84 <MX_I2C2_Init+0x74>)
 8003a5c:	2100      	movs	r1, #0
 8003a5e:	0018      	movs	r0, r3
 8003a60:	f005 febe 	bl	80097e0 <HAL_I2CEx_ConfigAnalogFilter>
 8003a64:	1e03      	subs	r3, r0, #0
 8003a66:	d001      	beq.n	8003a6c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8003a68:	f000 fa66 	bl	8003f38 <Error_Handler>
=======
 8003aa6:	4b0a      	ldr	r3, [pc, #40]	@ (8003ad0 <MX_I2C2_Init+0x74>)
 8003aa8:	2100      	movs	r1, #0
 8003aaa:	0018      	movs	r0, r3
 8003aac:	f005 fffa 	bl	8009aa4 <HAL_I2CEx_ConfigAnalogFilter>
 8003ab0:	1e03      	subs	r3, r0, #0
 8003ab2:	d001      	beq.n	8003ab8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8003ab4:	f000 fa68 	bl	8003f88 <Error_Handler>
>>>>>>> main
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
<<<<<<< HEAD
 8003a6c:	4b05      	ldr	r3, [pc, #20]	@ (8003a84 <MX_I2C2_Init+0x74>)
 8003a6e:	2100      	movs	r1, #0
 8003a70:	0018      	movs	r0, r3
 8003a72:	f005 ff01 	bl	8009878 <HAL_I2CEx_ConfigDigitalFilter>
 8003a76:	1e03      	subs	r3, r0, #0
 8003a78:	d001      	beq.n	8003a7e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8003a7a:	f000 fa5d 	bl	8003f38 <Error_Handler>
=======
 8003ab8:	4b05      	ldr	r3, [pc, #20]	@ (8003ad0 <MX_I2C2_Init+0x74>)
 8003aba:	2100      	movs	r1, #0
 8003abc:	0018      	movs	r0, r3
 8003abe:	f006 f83d 	bl	8009b3c <HAL_I2CEx_ConfigDigitalFilter>
 8003ac2:	1e03      	subs	r3, r0, #0
 8003ac4:	d001      	beq.n	8003aca <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8003ac6:	f000 fa5f 	bl	8003f88 <Error_Handler>
>>>>>>> main
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
<<<<<<< HEAD
 8003a7e:	46c0      	nop			@ (mov r8, r8)
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}
 8003a84:	20000294 	.word	0x20000294
 8003a88:	40005800 	.word	0x40005800
 8003a8c:	00503d58 	.word	0x00503d58

08003a90 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003a90:	b590      	push	{r4, r7, lr}
 8003a92:	b08b      	sub	sp, #44	@ 0x2c
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a98:	2414      	movs	r4, #20
 8003a9a:	193b      	adds	r3, r7, r4
 8003a9c:	0018      	movs	r0, r3
 8003a9e:	2314      	movs	r3, #20
 8003aa0:	001a      	movs	r2, r3
 8003aa2:	2100      	movs	r1, #0
 8003aa4:	f009 fe3e 	bl	800d724 <memset>
  if(i2cHandle->Instance==I2C1)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a5d      	ldr	r2, [pc, #372]	@ (8003c24 <HAL_I2C_MspInit+0x194>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d000      	beq.n	8003ab4 <HAL_I2C_MspInit+0x24>
 8003ab2:	e083      	b.n	8003bbc <HAL_I2C_MspInit+0x12c>
=======
 8003aca:	46c0      	nop			@ (mov r8, r8)
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}
 8003ad0:	200002a0 	.word	0x200002a0
 8003ad4:	40005800 	.word	0x40005800
 8003ad8:	00503d58 	.word	0x00503d58

08003adc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003adc:	b590      	push	{r4, r7, lr}
 8003ade:	b08b      	sub	sp, #44	@ 0x2c
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ae4:	2414      	movs	r4, #20
 8003ae6:	193b      	adds	r3, r7, r4
 8003ae8:	0018      	movs	r0, r3
 8003aea:	2314      	movs	r3, #20
 8003aec:	001a      	movs	r2, r3
 8003aee:	2100      	movs	r1, #0
 8003af0:	f009 ff64 	bl	800d9bc <memset>
  if(i2cHandle->Instance==I2C1)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a5d      	ldr	r2, [pc, #372]	@ (8003c70 <HAL_I2C_MspInit+0x194>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d000      	beq.n	8003b00 <HAL_I2C_MspInit+0x24>
 8003afe:	e083      	b.n	8003c08 <HAL_I2C_MspInit+0x12c>
>>>>>>> main
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
<<<<<<< HEAD
 8003ab4:	4b5c      	ldr	r3, [pc, #368]	@ (8003c28 <HAL_I2C_MspInit+0x198>)
 8003ab6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ab8:	4b5b      	ldr	r3, [pc, #364]	@ (8003c28 <HAL_I2C_MspInit+0x198>)
 8003aba:	2102      	movs	r1, #2
 8003abc:	430a      	orrs	r2, r1
 8003abe:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003ac0:	4b59      	ldr	r3, [pc, #356]	@ (8003c28 <HAL_I2C_MspInit+0x198>)
 8003ac2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ac4:	2202      	movs	r2, #2
 8003ac6:	4013      	ands	r3, r2
 8003ac8:	613b      	str	r3, [r7, #16]
 8003aca:	693b      	ldr	r3, [r7, #16]
=======
 8003b00:	4b5c      	ldr	r3, [pc, #368]	@ (8003c74 <HAL_I2C_MspInit+0x198>)
 8003b02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b04:	4b5b      	ldr	r3, [pc, #364]	@ (8003c74 <HAL_I2C_MspInit+0x198>)
 8003b06:	2102      	movs	r1, #2
 8003b08:	430a      	orrs	r2, r1
 8003b0a:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003b0c:	4b59      	ldr	r3, [pc, #356]	@ (8003c74 <HAL_I2C_MspInit+0x198>)
 8003b0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b10:	2202      	movs	r2, #2
 8003b12:	4013      	ands	r3, r2
 8003b14:	613b      	str	r3, [r7, #16]
 8003b16:	693b      	ldr	r3, [r7, #16]
>>>>>>> main
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
<<<<<<< HEAD
 8003acc:	0021      	movs	r1, r4
 8003ace:	187b      	adds	r3, r7, r1
 8003ad0:	22c0      	movs	r2, #192	@ 0xc0
 8003ad2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003ad4:	187b      	adds	r3, r7, r1
 8003ad6:	2212      	movs	r2, #18
 8003ad8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ada:	187b      	adds	r3, r7, r1
 8003adc:	2200      	movs	r2, #0
 8003ade:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ae0:	187b      	adds	r3, r7, r1
 8003ae2:	2203      	movs	r2, #3
 8003ae4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8003ae6:	187b      	adds	r3, r7, r1
 8003ae8:	2201      	movs	r2, #1
 8003aea:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003aec:	187b      	adds	r3, r7, r1
 8003aee:	4a4f      	ldr	r2, [pc, #316]	@ (8003c2c <HAL_I2C_MspInit+0x19c>)
 8003af0:	0019      	movs	r1, r3
 8003af2:	0010      	movs	r0, r2
 8003af4:	f003 fc7e 	bl	80073f4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003af8:	4b4b      	ldr	r3, [pc, #300]	@ (8003c28 <HAL_I2C_MspInit+0x198>)
 8003afa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003afc:	4b4a      	ldr	r3, [pc, #296]	@ (8003c28 <HAL_I2C_MspInit+0x198>)
 8003afe:	2180      	movs	r1, #128	@ 0x80
 8003b00:	0389      	lsls	r1, r1, #14
 8003b02:	430a      	orrs	r2, r1
 8003b04:	639a      	str	r2, [r3, #56]	@ 0x38
=======
 8003b18:	0021      	movs	r1, r4
 8003b1a:	187b      	adds	r3, r7, r1
 8003b1c:	22c0      	movs	r2, #192	@ 0xc0
 8003b1e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003b20:	187b      	adds	r3, r7, r1
 8003b22:	2212      	movs	r2, #18
 8003b24:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b26:	187b      	adds	r3, r7, r1
 8003b28:	2200      	movs	r2, #0
 8003b2a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b2c:	187b      	adds	r3, r7, r1
 8003b2e:	2203      	movs	r2, #3
 8003b30:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8003b32:	187b      	adds	r3, r7, r1
 8003b34:	2201      	movs	r2, #1
 8003b36:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b38:	187b      	adds	r3, r7, r1
 8003b3a:	4a4f      	ldr	r2, [pc, #316]	@ (8003c78 <HAL_I2C_MspInit+0x19c>)
 8003b3c:	0019      	movs	r1, r3
 8003b3e:	0010      	movs	r0, r2
 8003b40:	f003 fdba 	bl	80076b8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003b44:	4b4b      	ldr	r3, [pc, #300]	@ (8003c74 <HAL_I2C_MspInit+0x198>)
 8003b46:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003b48:	4b4a      	ldr	r3, [pc, #296]	@ (8003c74 <HAL_I2C_MspInit+0x198>)
 8003b4a:	2180      	movs	r1, #128	@ 0x80
 8003b4c:	0389      	lsls	r1, r1, #14
 8003b4e:	430a      	orrs	r2, r1
 8003b50:	639a      	str	r2, [r3, #56]	@ 0x38
>>>>>>> main

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel3;
<<<<<<< HEAD
 8003b06:	4b4a      	ldr	r3, [pc, #296]	@ (8003c30 <HAL_I2C_MspInit+0x1a0>)
 8003b08:	4a4a      	ldr	r2, [pc, #296]	@ (8003c34 <HAL_I2C_MspInit+0x1a4>)
 8003b0a:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_6;
 8003b0c:	4b48      	ldr	r3, [pc, #288]	@ (8003c30 <HAL_I2C_MspInit+0x1a0>)
 8003b0e:	2206      	movs	r2, #6
 8003b10:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003b12:	4b47      	ldr	r3, [pc, #284]	@ (8003c30 <HAL_I2C_MspInit+0x1a0>)
 8003b14:	2200      	movs	r2, #0
 8003b16:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003b18:	4b45      	ldr	r3, [pc, #276]	@ (8003c30 <HAL_I2C_MspInit+0x1a0>)
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003b1e:	4b44      	ldr	r3, [pc, #272]	@ (8003c30 <HAL_I2C_MspInit+0x1a0>)
 8003b20:	2280      	movs	r2, #128	@ 0x80
 8003b22:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003b24:	4b42      	ldr	r3, [pc, #264]	@ (8003c30 <HAL_I2C_MspInit+0x1a0>)
 8003b26:	2200      	movs	r2, #0
 8003b28:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003b2a:	4b41      	ldr	r3, [pc, #260]	@ (8003c30 <HAL_I2C_MspInit+0x1a0>)
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8003b30:	4b3f      	ldr	r3, [pc, #252]	@ (8003c30 <HAL_I2C_MspInit+0x1a0>)
 8003b32:	2200      	movs	r2, #0
 8003b34:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003b36:	4b3e      	ldr	r3, [pc, #248]	@ (8003c30 <HAL_I2C_MspInit+0x1a0>)
 8003b38:	2200      	movs	r2, #0
 8003b3a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8003b3c:	4b3c      	ldr	r3, [pc, #240]	@ (8003c30 <HAL_I2C_MspInit+0x1a0>)
 8003b3e:	0018      	movs	r0, r3
 8003b40:	f003 f9ac 	bl	8006e9c <HAL_DMA_Init>
 8003b44:	1e03      	subs	r3, r0, #0
 8003b46:	d001      	beq.n	8003b4c <HAL_I2C_MspInit+0xbc>
    {
      Error_Handler();
 8003b48:	f000 f9f6 	bl	8003f38 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	4a38      	ldr	r2, [pc, #224]	@ (8003c30 <HAL_I2C_MspInit+0x1a0>)
 8003b50:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003b52:	4b37      	ldr	r3, [pc, #220]	@ (8003c30 <HAL_I2C_MspInit+0x1a0>)
 8003b54:	687a      	ldr	r2, [r7, #4]
 8003b56:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel2;
 8003b58:	4b37      	ldr	r3, [pc, #220]	@ (8003c38 <HAL_I2C_MspInit+0x1a8>)
 8003b5a:	4a38      	ldr	r2, [pc, #224]	@ (8003c3c <HAL_I2C_MspInit+0x1ac>)
 8003b5c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_6;
 8003b5e:	4b36      	ldr	r3, [pc, #216]	@ (8003c38 <HAL_I2C_MspInit+0x1a8>)
 8003b60:	2206      	movs	r2, #6
 8003b62:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003b64:	4b34      	ldr	r3, [pc, #208]	@ (8003c38 <HAL_I2C_MspInit+0x1a8>)
 8003b66:	2210      	movs	r2, #16
 8003b68:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003b6a:	4b33      	ldr	r3, [pc, #204]	@ (8003c38 <HAL_I2C_MspInit+0x1a8>)
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003b70:	4b31      	ldr	r3, [pc, #196]	@ (8003c38 <HAL_I2C_MspInit+0x1a8>)
 8003b72:	2280      	movs	r2, #128	@ 0x80
 8003b74:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003b76:	4b30      	ldr	r3, [pc, #192]	@ (8003c38 <HAL_I2C_MspInit+0x1a8>)
 8003b78:	2200      	movs	r2, #0
 8003b7a:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003b7c:	4b2e      	ldr	r3, [pc, #184]	@ (8003c38 <HAL_I2C_MspInit+0x1a8>)
 8003b7e:	2200      	movs	r2, #0
 8003b80:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8003b82:	4b2d      	ldr	r3, [pc, #180]	@ (8003c38 <HAL_I2C_MspInit+0x1a8>)
 8003b84:	2200      	movs	r2, #0
 8003b86:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003b88:	4b2b      	ldr	r3, [pc, #172]	@ (8003c38 <HAL_I2C_MspInit+0x1a8>)
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8003b8e:	4b2a      	ldr	r3, [pc, #168]	@ (8003c38 <HAL_I2C_MspInit+0x1a8>)
 8003b90:	0018      	movs	r0, r3
 8003b92:	f003 f983 	bl	8006e9c <HAL_DMA_Init>
 8003b96:	1e03      	subs	r3, r0, #0
 8003b98:	d001      	beq.n	8003b9e <HAL_I2C_MspInit+0x10e>
    {
      Error_Handler();
 8003b9a:	f000 f9cd 	bl	8003f38 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	4a25      	ldr	r2, [pc, #148]	@ (8003c38 <HAL_I2C_MspInit+0x1a8>)
 8003ba2:	639a      	str	r2, [r3, #56]	@ 0x38
 8003ba4:	4b24      	ldr	r3, [pc, #144]	@ (8003c38 <HAL_I2C_MspInit+0x1a8>)
 8003ba6:	687a      	ldr	r2, [r7, #4]
 8003ba8:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 8003baa:	2200      	movs	r2, #0
 8003bac:	2100      	movs	r1, #0
 8003bae:	2017      	movs	r0, #23
 8003bb0:	f003 f942 	bl	8006e38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 8003bb4:	2017      	movs	r0, #23
 8003bb6:	f003 f954 	bl	8006e62 <HAL_NVIC_EnableIRQ>
=======
 8003b52:	4b4a      	ldr	r3, [pc, #296]	@ (8003c7c <HAL_I2C_MspInit+0x1a0>)
 8003b54:	4a4a      	ldr	r2, [pc, #296]	@ (8003c80 <HAL_I2C_MspInit+0x1a4>)
 8003b56:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_6;
 8003b58:	4b48      	ldr	r3, [pc, #288]	@ (8003c7c <HAL_I2C_MspInit+0x1a0>)
 8003b5a:	2206      	movs	r2, #6
 8003b5c:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003b5e:	4b47      	ldr	r3, [pc, #284]	@ (8003c7c <HAL_I2C_MspInit+0x1a0>)
 8003b60:	2200      	movs	r2, #0
 8003b62:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003b64:	4b45      	ldr	r3, [pc, #276]	@ (8003c7c <HAL_I2C_MspInit+0x1a0>)
 8003b66:	2200      	movs	r2, #0
 8003b68:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003b6a:	4b44      	ldr	r3, [pc, #272]	@ (8003c7c <HAL_I2C_MspInit+0x1a0>)
 8003b6c:	2280      	movs	r2, #128	@ 0x80
 8003b6e:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003b70:	4b42      	ldr	r3, [pc, #264]	@ (8003c7c <HAL_I2C_MspInit+0x1a0>)
 8003b72:	2200      	movs	r2, #0
 8003b74:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003b76:	4b41      	ldr	r3, [pc, #260]	@ (8003c7c <HAL_I2C_MspInit+0x1a0>)
 8003b78:	2200      	movs	r2, #0
 8003b7a:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8003b7c:	4b3f      	ldr	r3, [pc, #252]	@ (8003c7c <HAL_I2C_MspInit+0x1a0>)
 8003b7e:	2200      	movs	r2, #0
 8003b80:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003b82:	4b3e      	ldr	r3, [pc, #248]	@ (8003c7c <HAL_I2C_MspInit+0x1a0>)
 8003b84:	2200      	movs	r2, #0
 8003b86:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8003b88:	4b3c      	ldr	r3, [pc, #240]	@ (8003c7c <HAL_I2C_MspInit+0x1a0>)
 8003b8a:	0018      	movs	r0, r3
 8003b8c:	f003 fae8 	bl	8007160 <HAL_DMA_Init>
 8003b90:	1e03      	subs	r3, r0, #0
 8003b92:	d001      	beq.n	8003b98 <HAL_I2C_MspInit+0xbc>
    {
      Error_Handler();
 8003b94:	f000 f9f8 	bl	8003f88 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	4a38      	ldr	r2, [pc, #224]	@ (8003c7c <HAL_I2C_MspInit+0x1a0>)
 8003b9c:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003b9e:	4b37      	ldr	r3, [pc, #220]	@ (8003c7c <HAL_I2C_MspInit+0x1a0>)
 8003ba0:	687a      	ldr	r2, [r7, #4]
 8003ba2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel2;
 8003ba4:	4b37      	ldr	r3, [pc, #220]	@ (8003c84 <HAL_I2C_MspInit+0x1a8>)
 8003ba6:	4a38      	ldr	r2, [pc, #224]	@ (8003c88 <HAL_I2C_MspInit+0x1ac>)
 8003ba8:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_6;
 8003baa:	4b36      	ldr	r3, [pc, #216]	@ (8003c84 <HAL_I2C_MspInit+0x1a8>)
 8003bac:	2206      	movs	r2, #6
 8003bae:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003bb0:	4b34      	ldr	r3, [pc, #208]	@ (8003c84 <HAL_I2C_MspInit+0x1a8>)
 8003bb2:	2210      	movs	r2, #16
 8003bb4:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003bb6:	4b33      	ldr	r3, [pc, #204]	@ (8003c84 <HAL_I2C_MspInit+0x1a8>)
 8003bb8:	2200      	movs	r2, #0
 8003bba:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003bbc:	4b31      	ldr	r3, [pc, #196]	@ (8003c84 <HAL_I2C_MspInit+0x1a8>)
 8003bbe:	2280      	movs	r2, #128	@ 0x80
 8003bc0:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003bc2:	4b30      	ldr	r3, [pc, #192]	@ (8003c84 <HAL_I2C_MspInit+0x1a8>)
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003bc8:	4b2e      	ldr	r3, [pc, #184]	@ (8003c84 <HAL_I2C_MspInit+0x1a8>)
 8003bca:	2200      	movs	r2, #0
 8003bcc:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8003bce:	4b2d      	ldr	r3, [pc, #180]	@ (8003c84 <HAL_I2C_MspInit+0x1a8>)
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003bd4:	4b2b      	ldr	r3, [pc, #172]	@ (8003c84 <HAL_I2C_MspInit+0x1a8>)
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8003bda:	4b2a      	ldr	r3, [pc, #168]	@ (8003c84 <HAL_I2C_MspInit+0x1a8>)
 8003bdc:	0018      	movs	r0, r3
 8003bde:	f003 fabf 	bl	8007160 <HAL_DMA_Init>
 8003be2:	1e03      	subs	r3, r0, #0
 8003be4:	d001      	beq.n	8003bea <HAL_I2C_MspInit+0x10e>
    {
      Error_Handler();
 8003be6:	f000 f9cf 	bl	8003f88 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	4a25      	ldr	r2, [pc, #148]	@ (8003c84 <HAL_I2C_MspInit+0x1a8>)
 8003bee:	639a      	str	r2, [r3, #56]	@ 0x38
 8003bf0:	4b24      	ldr	r3, [pc, #144]	@ (8003c84 <HAL_I2C_MspInit+0x1a8>)
 8003bf2:	687a      	ldr	r2, [r7, #4]
 8003bf4:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	2100      	movs	r1, #0
 8003bfa:	2017      	movs	r0, #23
 8003bfc:	f003 fa7e 	bl	80070fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 8003c00:	2017      	movs	r0, #23
 8003c02:	f003 fa90 	bl	8007126 <HAL_NVIC_EnableIRQ>
>>>>>>> main
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
<<<<<<< HEAD
 8003bba:	e02e      	b.n	8003c1a <HAL_I2C_MspInit+0x18a>
  else if(i2cHandle->Instance==I2C2)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a1f      	ldr	r2, [pc, #124]	@ (8003c40 <HAL_I2C_MspInit+0x1b0>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d129      	bne.n	8003c1a <HAL_I2C_MspInit+0x18a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bc6:	4b18      	ldr	r3, [pc, #96]	@ (8003c28 <HAL_I2C_MspInit+0x198>)
 8003bc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003bca:	4b17      	ldr	r3, [pc, #92]	@ (8003c28 <HAL_I2C_MspInit+0x198>)
 8003bcc:	2102      	movs	r1, #2
 8003bce:	430a      	orrs	r2, r1
 8003bd0:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003bd2:	4b15      	ldr	r3, [pc, #84]	@ (8003c28 <HAL_I2C_MspInit+0x198>)
 8003bd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bd6:	2202      	movs	r2, #2
 8003bd8:	4013      	ands	r3, r2
 8003bda:	60fb      	str	r3, [r7, #12]
 8003bdc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003bde:	2114      	movs	r1, #20
 8003be0:	187b      	adds	r3, r7, r1
 8003be2:	22c0      	movs	r2, #192	@ 0xc0
 8003be4:	0112      	lsls	r2, r2, #4
 8003be6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003be8:	187b      	adds	r3, r7, r1
 8003bea:	2212      	movs	r2, #18
 8003bec:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bee:	187b      	adds	r3, r7, r1
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bf4:	187b      	adds	r3, r7, r1
 8003bf6:	2203      	movs	r2, #3
 8003bf8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 8003bfa:	187b      	adds	r3, r7, r1
 8003bfc:	2206      	movs	r2, #6
 8003bfe:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c00:	187b      	adds	r3, r7, r1
 8003c02:	4a0a      	ldr	r2, [pc, #40]	@ (8003c2c <HAL_I2C_MspInit+0x19c>)
 8003c04:	0019      	movs	r1, r3
 8003c06:	0010      	movs	r0, r2
 8003c08:	f003 fbf4 	bl	80073f4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003c0c:	4b06      	ldr	r3, [pc, #24]	@ (8003c28 <HAL_I2C_MspInit+0x198>)
 8003c0e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003c10:	4b05      	ldr	r3, [pc, #20]	@ (8003c28 <HAL_I2C_MspInit+0x198>)
 8003c12:	2180      	movs	r1, #128	@ 0x80
 8003c14:	03c9      	lsls	r1, r1, #15
 8003c16:	430a      	orrs	r2, r1
 8003c18:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8003c1a:	46c0      	nop			@ (mov r8, r8)
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	b00b      	add	sp, #44	@ 0x2c
 8003c20:	bd90      	pop	{r4, r7, pc}
 8003c22:	46c0      	nop			@ (mov r8, r8)
 8003c24:	40005400 	.word	0x40005400
 8003c28:	40021000 	.word	0x40021000
 8003c2c:	50000400 	.word	0x50000400
 8003c30:	200002e8 	.word	0x200002e8
 8003c34:	40020030 	.word	0x40020030
 8003c38:	20000330 	.word	0x20000330
 8003c3c:	4002001c 	.word	0x4002001c
 8003c40:	40005800 	.word	0x40005800

08003c44 <MX_I2S2_Init>:
=======
 8003c06:	e02e      	b.n	8003c66 <HAL_I2C_MspInit+0x18a>
  else if(i2cHandle->Instance==I2C2)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a1f      	ldr	r2, [pc, #124]	@ (8003c8c <HAL_I2C_MspInit+0x1b0>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d129      	bne.n	8003c66 <HAL_I2C_MspInit+0x18a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c12:	4b18      	ldr	r3, [pc, #96]	@ (8003c74 <HAL_I2C_MspInit+0x198>)
 8003c14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c16:	4b17      	ldr	r3, [pc, #92]	@ (8003c74 <HAL_I2C_MspInit+0x198>)
 8003c18:	2102      	movs	r1, #2
 8003c1a:	430a      	orrs	r2, r1
 8003c1c:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003c1e:	4b15      	ldr	r3, [pc, #84]	@ (8003c74 <HAL_I2C_MspInit+0x198>)
 8003c20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c22:	2202      	movs	r2, #2
 8003c24:	4013      	ands	r3, r2
 8003c26:	60fb      	str	r3, [r7, #12]
 8003c28:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003c2a:	2114      	movs	r1, #20
 8003c2c:	187b      	adds	r3, r7, r1
 8003c2e:	22c0      	movs	r2, #192	@ 0xc0
 8003c30:	0112      	lsls	r2, r2, #4
 8003c32:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003c34:	187b      	adds	r3, r7, r1
 8003c36:	2212      	movs	r2, #18
 8003c38:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c3a:	187b      	adds	r3, r7, r1
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c40:	187b      	adds	r3, r7, r1
 8003c42:	2203      	movs	r2, #3
 8003c44:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 8003c46:	187b      	adds	r3, r7, r1
 8003c48:	2206      	movs	r2, #6
 8003c4a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c4c:	187b      	adds	r3, r7, r1
 8003c4e:	4a0a      	ldr	r2, [pc, #40]	@ (8003c78 <HAL_I2C_MspInit+0x19c>)
 8003c50:	0019      	movs	r1, r3
 8003c52:	0010      	movs	r0, r2
 8003c54:	f003 fd30 	bl	80076b8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003c58:	4b06      	ldr	r3, [pc, #24]	@ (8003c74 <HAL_I2C_MspInit+0x198>)
 8003c5a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003c5c:	4b05      	ldr	r3, [pc, #20]	@ (8003c74 <HAL_I2C_MspInit+0x198>)
 8003c5e:	2180      	movs	r1, #128	@ 0x80
 8003c60:	03c9      	lsls	r1, r1, #15
 8003c62:	430a      	orrs	r2, r1
 8003c64:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8003c66:	46c0      	nop			@ (mov r8, r8)
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	b00b      	add	sp, #44	@ 0x2c
 8003c6c:	bd90      	pop	{r4, r7, pc}
 8003c6e:	46c0      	nop			@ (mov r8, r8)
 8003c70:	40005400 	.word	0x40005400
 8003c74:	40021000 	.word	0x40021000
 8003c78:	50000400 	.word	0x50000400
 8003c7c:	200002f4 	.word	0x200002f4
 8003c80:	40020030 	.word	0x40020030
 8003c84:	2000033c 	.word	0x2000033c
 8003c88:	4002001c 	.word	0x4002001c
 8003c8c:	40005800 	.word	0x40005800

08003c90 <MX_I2S2_Init>:
>>>>>>> main
I2S_HandleTypeDef hi2s2;
DMA_HandleTypeDef hdma_spi2_rx;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
<<<<<<< HEAD
 8003c44:	b580      	push	{r7, lr}
 8003c46:	af00      	add	r7, sp, #0
=======
 8003c90:	b580      	push	{r7, lr}
 8003c92:	af00      	add	r7, sp, #0
>>>>>>> main
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
<<<<<<< HEAD
 8003c48:	4b10      	ldr	r3, [pc, #64]	@ (8003c8c <MX_I2S2_Init+0x48>)
 8003c4a:	4a11      	ldr	r2, [pc, #68]	@ (8003c90 <MX_I2S2_Init+0x4c>)
 8003c4c:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 8003c4e:	4b0f      	ldr	r3, [pc, #60]	@ (8003c8c <MX_I2S2_Init+0x48>)
 8003c50:	22c0      	movs	r2, #192	@ 0xc0
 8003c52:	0092      	lsls	r2, r2, #2
 8003c54:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_MSB;
 8003c56:	4b0d      	ldr	r3, [pc, #52]	@ (8003c8c <MX_I2S2_Init+0x48>)
 8003c58:	2210      	movs	r2, #16
 8003c5a:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_32B;
 8003c5c:	4b0b      	ldr	r3, [pc, #44]	@ (8003c8c <MX_I2S2_Init+0x48>)
 8003c5e:	2205      	movs	r2, #5
 8003c60:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8003c62:	4b0a      	ldr	r3, [pc, #40]	@ (8003c8c <MX_I2S2_Init+0x48>)
 8003c64:	2200      	movs	r2, #0
 8003c66:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 8003c68:	4b08      	ldr	r3, [pc, #32]	@ (8003c8c <MX_I2S2_Init+0x48>)
 8003c6a:	22fa      	movs	r2, #250	@ 0xfa
 8003c6c:	0152      	lsls	r2, r2, #5
 8003c6e:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_HIGH;
 8003c70:	4b06      	ldr	r3, [pc, #24]	@ (8003c8c <MX_I2S2_Init+0x48>)
 8003c72:	2208      	movs	r2, #8
 8003c74:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8003c76:	4b05      	ldr	r3, [pc, #20]	@ (8003c8c <MX_I2S2_Init+0x48>)
 8003c78:	0018      	movs	r0, r3
 8003c7a:	f005 fe49 	bl	8009910 <HAL_I2S_Init>
 8003c7e:	1e03      	subs	r3, r0, #0
 8003c80:	d001      	beq.n	8003c86 <MX_I2S2_Init+0x42>
  {
    Error_Handler();
 8003c82:	f000 f959 	bl	8003f38 <Error_Handler>
=======
 8003c94:	4b10      	ldr	r3, [pc, #64]	@ (8003cd8 <MX_I2S2_Init+0x48>)
 8003c96:	4a11      	ldr	r2, [pc, #68]	@ (8003cdc <MX_I2S2_Init+0x4c>)
 8003c98:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 8003c9a:	4b0f      	ldr	r3, [pc, #60]	@ (8003cd8 <MX_I2S2_Init+0x48>)
 8003c9c:	22c0      	movs	r2, #192	@ 0xc0
 8003c9e:	0092      	lsls	r2, r2, #2
 8003ca0:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_MSB;
 8003ca2:	4b0d      	ldr	r3, [pc, #52]	@ (8003cd8 <MX_I2S2_Init+0x48>)
 8003ca4:	2210      	movs	r2, #16
 8003ca6:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_32B;
 8003ca8:	4b0b      	ldr	r3, [pc, #44]	@ (8003cd8 <MX_I2S2_Init+0x48>)
 8003caa:	2205      	movs	r2, #5
 8003cac:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8003cae:	4b0a      	ldr	r3, [pc, #40]	@ (8003cd8 <MX_I2S2_Init+0x48>)
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 8003cb4:	4b08      	ldr	r3, [pc, #32]	@ (8003cd8 <MX_I2S2_Init+0x48>)
 8003cb6:	22fa      	movs	r2, #250	@ 0xfa
 8003cb8:	0152      	lsls	r2, r2, #5
 8003cba:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_HIGH;
 8003cbc:	4b06      	ldr	r3, [pc, #24]	@ (8003cd8 <MX_I2S2_Init+0x48>)
 8003cbe:	2208      	movs	r2, #8
 8003cc0:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8003cc2:	4b05      	ldr	r3, [pc, #20]	@ (8003cd8 <MX_I2S2_Init+0x48>)
 8003cc4:	0018      	movs	r0, r3
 8003cc6:	f005 ff85 	bl	8009bd4 <HAL_I2S_Init>
 8003cca:	1e03      	subs	r3, r0, #0
 8003ccc:	d001      	beq.n	8003cd2 <MX_I2S2_Init+0x42>
  {
    Error_Handler();
 8003cce:	f000 f95b 	bl	8003f88 <Error_Handler>
>>>>>>> main
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
<<<<<<< HEAD
 8003c86:	46c0      	nop			@ (mov r8, r8)
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}
 8003c8c:	20000378 	.word	0x20000378
 8003c90:	40003800 	.word	0x40003800

08003c94 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8003c94:	b590      	push	{r4, r7, lr}
 8003c96:	b089      	sub	sp, #36	@ 0x24
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c9c:	240c      	movs	r4, #12
 8003c9e:	193b      	adds	r3, r7, r4
 8003ca0:	0018      	movs	r0, r3
 8003ca2:	2314      	movs	r3, #20
 8003ca4:	001a      	movs	r2, r3
 8003ca6:	2100      	movs	r1, #0
 8003ca8:	f009 fd3c 	bl	800d724 <memset>
  if(i2sHandle->Instance==SPI2)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a2d      	ldr	r2, [pc, #180]	@ (8003d68 <HAL_I2S_MspInit+0xd4>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d154      	bne.n	8003d60 <HAL_I2S_MspInit+0xcc>
=======
 8003cd2:	46c0      	nop			@ (mov r8, r8)
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}
 8003cd8:	20000384 	.word	0x20000384
 8003cdc:	40003800 	.word	0x40003800

08003ce0 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8003ce0:	b590      	push	{r4, r7, lr}
 8003ce2:	b089      	sub	sp, #36	@ 0x24
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ce8:	240c      	movs	r4, #12
 8003cea:	193b      	adds	r3, r7, r4
 8003cec:	0018      	movs	r0, r3
 8003cee:	2314      	movs	r3, #20
 8003cf0:	001a      	movs	r2, r3
 8003cf2:	2100      	movs	r1, #0
 8003cf4:	f009 fe62 	bl	800d9bc <memset>
  if(i2sHandle->Instance==SPI2)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a2d      	ldr	r2, [pc, #180]	@ (8003db4 <HAL_I2S_MspInit+0xd4>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d154      	bne.n	8003dac <HAL_I2S_MspInit+0xcc>
>>>>>>> main
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
<<<<<<< HEAD
 8003cb6:	4b2d      	ldr	r3, [pc, #180]	@ (8003d6c <HAL_I2S_MspInit+0xd8>)
 8003cb8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003cba:	4b2c      	ldr	r3, [pc, #176]	@ (8003d6c <HAL_I2S_MspInit+0xd8>)
 8003cbc:	2180      	movs	r1, #128	@ 0x80
 8003cbe:	01c9      	lsls	r1, r1, #7
 8003cc0:	430a      	orrs	r2, r1
 8003cc2:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003cc4:	4b29      	ldr	r3, [pc, #164]	@ (8003d6c <HAL_I2S_MspInit+0xd8>)
 8003cc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003cc8:	4b28      	ldr	r3, [pc, #160]	@ (8003d6c <HAL_I2S_MspInit+0xd8>)
 8003cca:	2102      	movs	r1, #2
 8003ccc:	430a      	orrs	r2, r1
 8003cce:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003cd0:	4b26      	ldr	r3, [pc, #152]	@ (8003d6c <HAL_I2S_MspInit+0xd8>)
 8003cd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cd4:	2202      	movs	r2, #2
 8003cd6:	4013      	ands	r3, r2
 8003cd8:	60bb      	str	r3, [r7, #8]
 8003cda:	68bb      	ldr	r3, [r7, #8]
=======
 8003d02:	4b2d      	ldr	r3, [pc, #180]	@ (8003db8 <HAL_I2S_MspInit+0xd8>)
 8003d04:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003d06:	4b2c      	ldr	r3, [pc, #176]	@ (8003db8 <HAL_I2S_MspInit+0xd8>)
 8003d08:	2180      	movs	r1, #128	@ 0x80
 8003d0a:	01c9      	lsls	r1, r1, #7
 8003d0c:	430a      	orrs	r2, r1
 8003d0e:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d10:	4b29      	ldr	r3, [pc, #164]	@ (8003db8 <HAL_I2S_MspInit+0xd8>)
 8003d12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d14:	4b28      	ldr	r3, [pc, #160]	@ (8003db8 <HAL_I2S_MspInit+0xd8>)
 8003d16:	2102      	movs	r1, #2
 8003d18:	430a      	orrs	r2, r1
 8003d1a:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003d1c:	4b26      	ldr	r3, [pc, #152]	@ (8003db8 <HAL_I2S_MspInit+0xd8>)
 8003d1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d20:	2202      	movs	r2, #2
 8003d22:	4013      	ands	r3, r2
 8003d24:	60bb      	str	r3, [r7, #8]
 8003d26:	68bb      	ldr	r3, [r7, #8]
>>>>>>> main
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
<<<<<<< HEAD
 8003cdc:	193b      	adds	r3, r7, r4
 8003cde:	22b0      	movs	r2, #176	@ 0xb0
 8003ce0:	0212      	lsls	r2, r2, #8
 8003ce2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ce4:	0021      	movs	r1, r4
 8003ce6:	187b      	adds	r3, r7, r1
 8003ce8:	2202      	movs	r2, #2
 8003cea:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cec:	187b      	adds	r3, r7, r1
 8003cee:	2200      	movs	r2, #0
 8003cf0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cf2:	187b      	adds	r3, r7, r1
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8003cf8:	187b      	adds	r3, r7, r1
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003cfe:	187b      	adds	r3, r7, r1
 8003d00:	4a1b      	ldr	r2, [pc, #108]	@ (8003d70 <HAL_I2S_MspInit+0xdc>)
 8003d02:	0019      	movs	r1, r3
 8003d04:	0010      	movs	r0, r2
 8003d06:	f003 fb75 	bl	80073f4 <HAL_GPIO_Init>
=======
 8003d28:	193b      	adds	r3, r7, r4
 8003d2a:	22b0      	movs	r2, #176	@ 0xb0
 8003d2c:	0212      	lsls	r2, r2, #8
 8003d2e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d30:	0021      	movs	r1, r4
 8003d32:	187b      	adds	r3, r7, r1
 8003d34:	2202      	movs	r2, #2
 8003d36:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d38:	187b      	adds	r3, r7, r1
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d3e:	187b      	adds	r3, r7, r1
 8003d40:	2200      	movs	r2, #0
 8003d42:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8003d44:	187b      	adds	r3, r7, r1
 8003d46:	2200      	movs	r2, #0
 8003d48:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d4a:	187b      	adds	r3, r7, r1
 8003d4c:	4a1b      	ldr	r2, [pc, #108]	@ (8003dbc <HAL_I2S_MspInit+0xdc>)
 8003d4e:	0019      	movs	r1, r3
 8003d50:	0010      	movs	r0, r2
 8003d52:	f003 fcb1 	bl	80076b8 <HAL_GPIO_Init>
>>>>>>> main

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel4;
<<<<<<< HEAD
 8003d0a:	4b1a      	ldr	r3, [pc, #104]	@ (8003d74 <HAL_I2S_MspInit+0xe0>)
 8003d0c:	4a1a      	ldr	r2, [pc, #104]	@ (8003d78 <HAL_I2S_MspInit+0xe4>)
 8003d0e:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_2;
 8003d10:	4b18      	ldr	r3, [pc, #96]	@ (8003d74 <HAL_I2S_MspInit+0xe0>)
 8003d12:	2202      	movs	r2, #2
 8003d14:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003d16:	4b17      	ldr	r3, [pc, #92]	@ (8003d74 <HAL_I2S_MspInit+0xe0>)
 8003d18:	2200      	movs	r2, #0
 8003d1a:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003d1c:	4b15      	ldr	r3, [pc, #84]	@ (8003d74 <HAL_I2S_MspInit+0xe0>)
 8003d1e:	2200      	movs	r2, #0
 8003d20:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003d22:	4b14      	ldr	r3, [pc, #80]	@ (8003d74 <HAL_I2S_MspInit+0xe0>)
 8003d24:	2280      	movs	r2, #128	@ 0x80
 8003d26:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003d28:	4b12      	ldr	r3, [pc, #72]	@ (8003d74 <HAL_I2S_MspInit+0xe0>)
 8003d2a:	2280      	movs	r2, #128	@ 0x80
 8003d2c:	0052      	lsls	r2, r2, #1
 8003d2e:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003d30:	4b10      	ldr	r3, [pc, #64]	@ (8003d74 <HAL_I2S_MspInit+0xe0>)
 8003d32:	2280      	movs	r2, #128	@ 0x80
 8003d34:	00d2      	lsls	r2, r2, #3
 8003d36:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8003d38:	4b0e      	ldr	r3, [pc, #56]	@ (8003d74 <HAL_I2S_MspInit+0xe0>)
 8003d3a:	2220      	movs	r2, #32
 8003d3c:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003d3e:	4b0d      	ldr	r3, [pc, #52]	@ (8003d74 <HAL_I2S_MspInit+0xe0>)
 8003d40:	2200      	movs	r2, #0
 8003d42:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8003d44:	4b0b      	ldr	r3, [pc, #44]	@ (8003d74 <HAL_I2S_MspInit+0xe0>)
 8003d46:	0018      	movs	r0, r3
 8003d48:	f003 f8a8 	bl	8006e9c <HAL_DMA_Init>
 8003d4c:	1e03      	subs	r3, r0, #0
 8003d4e:	d001      	beq.n	8003d54 <HAL_I2S_MspInit+0xc0>
    {
      Error_Handler();
 8003d50:	f000 f8f2 	bl	8003f38 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmarx,hdma_spi2_rx);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	4a07      	ldr	r2, [pc, #28]	@ (8003d74 <HAL_I2S_MspInit+0xe0>)
 8003d58:	631a      	str	r2, [r3, #48]	@ 0x30
 8003d5a:	4b06      	ldr	r3, [pc, #24]	@ (8003d74 <HAL_I2S_MspInit+0xe0>)
 8003d5c:	687a      	ldr	r2, [r7, #4]
 8003d5e:	629a      	str	r2, [r3, #40]	@ 0x28
=======
 8003d56:	4b1a      	ldr	r3, [pc, #104]	@ (8003dc0 <HAL_I2S_MspInit+0xe0>)
 8003d58:	4a1a      	ldr	r2, [pc, #104]	@ (8003dc4 <HAL_I2S_MspInit+0xe4>)
 8003d5a:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_2;
 8003d5c:	4b18      	ldr	r3, [pc, #96]	@ (8003dc0 <HAL_I2S_MspInit+0xe0>)
 8003d5e:	2202      	movs	r2, #2
 8003d60:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003d62:	4b17      	ldr	r3, [pc, #92]	@ (8003dc0 <HAL_I2S_MspInit+0xe0>)
 8003d64:	2200      	movs	r2, #0
 8003d66:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003d68:	4b15      	ldr	r3, [pc, #84]	@ (8003dc0 <HAL_I2S_MspInit+0xe0>)
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003d6e:	4b14      	ldr	r3, [pc, #80]	@ (8003dc0 <HAL_I2S_MspInit+0xe0>)
 8003d70:	2280      	movs	r2, #128	@ 0x80
 8003d72:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003d74:	4b12      	ldr	r3, [pc, #72]	@ (8003dc0 <HAL_I2S_MspInit+0xe0>)
 8003d76:	2280      	movs	r2, #128	@ 0x80
 8003d78:	0052      	lsls	r2, r2, #1
 8003d7a:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003d7c:	4b10      	ldr	r3, [pc, #64]	@ (8003dc0 <HAL_I2S_MspInit+0xe0>)
 8003d7e:	2280      	movs	r2, #128	@ 0x80
 8003d80:	00d2      	lsls	r2, r2, #3
 8003d82:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8003d84:	4b0e      	ldr	r3, [pc, #56]	@ (8003dc0 <HAL_I2S_MspInit+0xe0>)
 8003d86:	2220      	movs	r2, #32
 8003d88:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003d8a:	4b0d      	ldr	r3, [pc, #52]	@ (8003dc0 <HAL_I2S_MspInit+0xe0>)
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8003d90:	4b0b      	ldr	r3, [pc, #44]	@ (8003dc0 <HAL_I2S_MspInit+0xe0>)
 8003d92:	0018      	movs	r0, r3
 8003d94:	f003 f9e4 	bl	8007160 <HAL_DMA_Init>
 8003d98:	1e03      	subs	r3, r0, #0
 8003d9a:	d001      	beq.n	8003da0 <HAL_I2S_MspInit+0xc0>
    {
      Error_Handler();
 8003d9c:	f000 f8f4 	bl	8003f88 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmarx,hdma_spi2_rx);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	4a07      	ldr	r2, [pc, #28]	@ (8003dc0 <HAL_I2S_MspInit+0xe0>)
 8003da4:	631a      	str	r2, [r3, #48]	@ 0x30
 8003da6:	4b06      	ldr	r3, [pc, #24]	@ (8003dc0 <HAL_I2S_MspInit+0xe0>)
 8003da8:	687a      	ldr	r2, [r7, #4]
 8003daa:	629a      	str	r2, [r3, #40]	@ 0x28
>>>>>>> main

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
<<<<<<< HEAD
 8003d60:	46c0      	nop			@ (mov r8, r8)
 8003d62:	46bd      	mov	sp, r7
 8003d64:	b009      	add	sp, #36	@ 0x24
 8003d66:	bd90      	pop	{r4, r7, pc}
 8003d68:	40003800 	.word	0x40003800
 8003d6c:	40021000 	.word	0x40021000
 8003d70:	50000400 	.word	0x50000400
 8003d74:	200003b4 	.word	0x200003b4
 8003d78:	40020044 	.word	0x40020044

08003d7c <HAL_I2S_MspDeInit>:

void HAL_I2S_MspDeInit(I2S_HandleTypeDef* i2sHandle)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b082      	sub	sp, #8
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]

  if(i2sHandle->Instance==SPI2)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a0c      	ldr	r2, [pc, #48]	@ (8003dbc <HAL_I2S_MspDeInit+0x40>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d111      	bne.n	8003db2 <HAL_I2S_MspDeInit+0x36>
=======
 8003dac:	46c0      	nop			@ (mov r8, r8)
 8003dae:	46bd      	mov	sp, r7
 8003db0:	b009      	add	sp, #36	@ 0x24
 8003db2:	bd90      	pop	{r4, r7, pc}
 8003db4:	40003800 	.word	0x40003800
 8003db8:	40021000 	.word	0x40021000
 8003dbc:	50000400 	.word	0x50000400
 8003dc0:	200003c0 	.word	0x200003c0
 8003dc4:	40020044 	.word	0x40020044

08003dc8 <HAL_I2S_MspDeInit>:

void HAL_I2S_MspDeInit(I2S_HandleTypeDef* i2sHandle)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b082      	sub	sp, #8
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]

  if(i2sHandle->Instance==SPI2)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a0c      	ldr	r2, [pc, #48]	@ (8003e08 <HAL_I2S_MspDeInit+0x40>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d111      	bne.n	8003dfe <HAL_I2S_MspDeInit+0x36>
>>>>>>> main
  {
  /* USER CODE BEGIN SPI2_MspDeInit 0 */

  /* USER CODE END SPI2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI2_CLK_DISABLE();
<<<<<<< HEAD
 8003d8e:	4b0c      	ldr	r3, [pc, #48]	@ (8003dc0 <HAL_I2S_MspDeInit+0x44>)
 8003d90:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003d92:	4b0b      	ldr	r3, [pc, #44]	@ (8003dc0 <HAL_I2S_MspDeInit+0x44>)
 8003d94:	490b      	ldr	r1, [pc, #44]	@ (8003dc4 <HAL_I2S_MspDeInit+0x48>)
 8003d96:	400a      	ands	r2, r1
 8003d98:	639a      	str	r2, [r3, #56]	@ 0x38
=======
 8003dda:	4b0c      	ldr	r3, [pc, #48]	@ (8003e0c <HAL_I2S_MspDeInit+0x44>)
 8003ddc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003dde:	4b0b      	ldr	r3, [pc, #44]	@ (8003e0c <HAL_I2S_MspDeInit+0x44>)
 8003de0:	490b      	ldr	r1, [pc, #44]	@ (8003e10 <HAL_I2S_MspDeInit+0x48>)
 8003de2:	400a      	ands	r2, r1
 8003de4:	639a      	str	r2, [r3, #56]	@ 0x38
>>>>>>> main
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15);
<<<<<<< HEAD
 8003d9a:	23b0      	movs	r3, #176	@ 0xb0
 8003d9c:	021b      	lsls	r3, r3, #8
 8003d9e:	4a0a      	ldr	r2, [pc, #40]	@ (8003dc8 <HAL_I2S_MspDeInit+0x4c>)
 8003da0:	0019      	movs	r1, r3
 8003da2:	0010      	movs	r0, r2
 8003da4:	f003 fca4 	bl	80076f0 <HAL_GPIO_DeInit>

    /* I2S2 DMA DeInit */
    HAL_DMA_DeInit(i2sHandle->hdmarx);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dac:	0018      	movs	r0, r3
 8003dae:	f003 f8ed 	bl	8006f8c <HAL_DMA_DeInit>
=======
 8003de6:	23b0      	movs	r3, #176	@ 0xb0
 8003de8:	021b      	lsls	r3, r3, #8
 8003dea:	4a0a      	ldr	r2, [pc, #40]	@ (8003e14 <HAL_I2S_MspDeInit+0x4c>)
 8003dec:	0019      	movs	r1, r3
 8003dee:	0010      	movs	r0, r2
 8003df0:	f003 fde0 	bl	80079b4 <HAL_GPIO_DeInit>

    /* I2S2 DMA DeInit */
    HAL_DMA_DeInit(i2sHandle->hdmarx);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003df8:	0018      	movs	r0, r3
 8003dfa:	f003 fa29 	bl	8007250 <HAL_DMA_DeInit>
>>>>>>> main
  /* USER CODE BEGIN SPI2_MspDeInit 1 */

  /* USER CODE END SPI2_MspDeInit 1 */
  }
}
<<<<<<< HEAD
 8003db2:	46c0      	nop			@ (mov r8, r8)
 8003db4:	46bd      	mov	sp, r7
 8003db6:	b002      	add	sp, #8
 8003db8:	bd80      	pop	{r7, pc}
 8003dba:	46c0      	nop			@ (mov r8, r8)
 8003dbc:	40003800 	.word	0x40003800
 8003dc0:	40021000 	.word	0x40021000
 8003dc4:	ffffbfff 	.word	0xffffbfff
 8003dc8:	50000400 	.word	0x50000400

08003dcc <main>:
=======
 8003dfe:	46c0      	nop			@ (mov r8, r8)
 8003e00:	46bd      	mov	sp, r7
 8003e02:	b002      	add	sp, #8
 8003e04:	bd80      	pop	{r7, pc}
 8003e06:	46c0      	nop			@ (mov r8, r8)
 8003e08:	40003800 	.word	0x40003800
 8003e0c:	40021000 	.word	0x40021000
 8003e10:	ffffbfff 	.word	0xffffbfff
 8003e14:	50000400 	.word	0x50000400

08003e18 <main>:
>>>>>>> main
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
<<<<<<< HEAD
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b082      	sub	sp, #8
 8003dd0:	af00      	add	r7, sp, #0
=======
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b082      	sub	sp, #8
 8003e1c:	af00      	add	r7, sp, #0
>>>>>>> main
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
<<<<<<< HEAD
 8003dd2:	f002 fef1 	bl	8006bb8 <HAL_Init>
=======
 8003e1e:	f003 f82d 	bl	8006e7c <HAL_Init>
>>>>>>> main
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
<<<<<<< HEAD
 8003dd6:	f000 f83b 	bl	8003e50 <SystemClock_Config>
=======
 8003e22:	f000 f83f 	bl	8003ea4 <SystemClock_Config>
>>>>>>> main
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
<<<<<<< HEAD
 8003dda:	f7ff fc4f 	bl	800367c <MX_GPIO_Init>
  MX_DMA_Init();
 8003dde:	f7ff fbdb 	bl	8003598 <MX_DMA_Init>
  MX_I2C1_Init();
 8003de2:	f7ff fdd5 	bl	8003990 <MX_I2C1_Init>
  MX_I2S2_Init();
 8003de6:	f7ff ff2d 	bl	8003c44 <MX_I2S2_Init>
  MX_USART4_UART_Init();
 8003dea:	f002 f939 	bl	8006060 <MX_USART4_UART_Init>
  MX_USART1_UART_Init();
 8003dee:	f002 f903 	bl	8005ff8 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 8003df2:	f7ff fe0d 	bl	8003a10 <MX_I2C2_Init>
  MX_USB_PCD_Init();
 8003df6:	f002 fa93 	bl	8006320 <MX_USB_PCD_Init>
  MX_TIM2_Init();
 8003dfa:	f001 ff4f 	bl	8005c9c <MX_TIM2_Init>
  MX_TIM3_Init();
 8003dfe:	f001 ffc1 	bl	8005d84 <MX_TIM3_Init>
  MX_LPUART1_UART_Init();
 8003e02:	f002 f8c9 	bl	8005f98 <MX_LPUART1_UART_Init>
=======
 8003e26:	f7ff fcad 	bl	8003784 <MX_GPIO_Init>
  MX_DMA_Init();
 8003e2a:	f7ff fc33 	bl	8003694 <MX_DMA_Init>
  MX_I2C1_Init();
 8003e2e:	f7ff fdd5 	bl	80039dc <MX_I2C1_Init>
  MX_I2S2_Init();
 8003e32:	f7ff ff2d 	bl	8003c90 <MX_I2S2_Init>
  MX_USART4_UART_Init();
 8003e36:	f002 facd 	bl	80063d4 <MX_USART4_UART_Init>
  MX_USART1_UART_Init();
 8003e3a:	f002 fa97 	bl	800636c <MX_USART1_UART_Init>
  MX_I2C2_Init();
 8003e3e:	f7ff fe0d 	bl	8003a5c <MX_I2C2_Init>
  MX_USB_PCD_Init();
 8003e42:	f002 fbf5 	bl	8006630 <MX_USB_PCD_Init>
  MX_TIM2_Init();
 8003e46:	f002 f907 	bl	8006058 <MX_TIM2_Init>
  MX_TIM3_Init();
 8003e4a:	f002 f985 	bl	8006158 <MX_TIM3_Init>
>>>>>>> main
	 * : Default network: Sensor community
	 * : Different modes for outside and inside (check solar?)
	 * : Add CLI via usb-c
	 * : Network not found? Sleep
	 */
  GPIO_InitPWMLEDs(&htim2, &htim3);
 8003e06:	4a0d      	ldr	r2, [pc, #52]	@ (8003e3c <main+0x70>)
 8003e08:	4b0d      	ldr	r3, [pc, #52]	@ (8003e40 <main+0x74>)
 8003e0a:	0011      	movs	r1, r2
 8003e0c:	0018      	movs	r0, r3
 8003e0e:	f7ff fd43 	bl	8003898 <GPIO_InitPWMLEDs>
  uint32_t LedBlinkTimestamp = HAL_GetTick() + LED_BLINK_INTERVAL;
<<<<<<< HEAD
 8003e12:	f002 ff37 	bl	8006c84 <HAL_GetTick>
 8003e16:	0003      	movs	r3, r0
 8003e18:	22fa      	movs	r2, #250	@ 0xfa
 8003e1a:	0092      	lsls	r2, r2, #2
 8003e1c:	4694      	mov	ip, r2
 8003e1e:	4463      	add	r3, ip
 8003e20:	607b      	str	r3, [r7, #4]
  SetVerboseLevel(VERBOSE_ALL);
 8003e22:	2003      	movs	r0, #3
 8003e24:	f002 fb8c 	bl	8006540 <SetVerboseLevel>
  BinaryReleaseInfo();
 8003e28:	f002 fba2 	bl	8006570 <BinaryReleaseInfo>
  Gadget_Init(&hi2c1, &hi2s2, &huart4);
 8003e2c:	4a05      	ldr	r2, [pc, #20]	@ (8003e44 <main+0x78>)
 8003e2e:	4906      	ldr	r1, [pc, #24]	@ (8003e48 <main+0x7c>)
 8003e30:	4b06      	ldr	r3, [pc, #24]	@ (8003e4c <main+0x80>)
 8003e32:	0018      	movs	r0, r3
 8003e34:	f7ff fbd6 	bl	80035e4 <Gadget_Init>
  /* USER CODE END 2 */
=======
 8003e4e:	f003 f87b 	bl	8006f48 <HAL_GetTick>
 8003e52:	0003      	movs	r3, r0
 8003e54:	22fa      	movs	r2, #250	@ 0xfa
 8003e56:	0092      	lsls	r2, r2, #2
 8003e58:	4694      	mov	ip, r2
 8003e5a:	4463      	add	r3, ip
 8003e5c:	607b      	str	r3, [r7, #4]
  SetVerboseLevel(VERBOSE_ALL);
 8003e5e:	2003      	movs	r0, #3
 8003e60:	f002 fcf6 	bl	8006850 <SetVerboseLevel>
  BinaryReleaseInfo();
 8003e64:	f002 fd0c 	bl	8006880 <BinaryReleaseInfo>
  Gadget_Init(&hi2c1, &hi2s2, &huart4);
 8003e68:	4a0b      	ldr	r2, [pc, #44]	@ (8003e98 <main+0x80>)
 8003e6a:	490c      	ldr	r1, [pc, #48]	@ (8003e9c <main+0x84>)
 8003e6c:	4b0c      	ldr	r3, [pc, #48]	@ (8003ea0 <main+0x88>)
 8003e6e:	0018      	movs	r0, r3
 8003e70:	f7ff fc36 	bl	80036e0 <Gadget_Init>
>>>>>>> main

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
<<<<<<< HEAD
 8003e38:	46c0      	nop			@ (mov r8, r8)
 8003e3a:	e7fd      	b.n	8003e38 <main+0x6c>
 8003e3c:	20000960 	.word	0x20000960
 8003e40:	20000920 	.word	0x20000920
 8003e44:	20000b10 	.word	0x20000b10
 8003e48:	20000378 	.word	0x20000378
 8003e4c:	20000240 	.word	0x20000240

08003e50 <SystemClock_Config>:
=======
	  // Upkeep gadget
    UpkeepGadget();
 8003e74:	f7ff fc54 	bl	8003720 <UpkeepGadget>
//    ESP_Upkeep();

    if(TimestampIsReached(LedBlinkTimestamp)) {
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	0018      	movs	r0, r3
 8003e7c:	f002 fc16 	bl	80066ac <TimestampIsReached>
 8003e80:	1e03      	subs	r3, r0, #0
 8003e82:	d0f7      	beq.n	8003e74 <main+0x5c>

      LedBlinkTimestamp = HAL_GetTick() + LED_BLINK_INTERVAL;
 8003e84:	f003 f860 	bl	8006f48 <HAL_GetTick>
 8003e88:	0003      	movs	r3, r0
 8003e8a:	22fa      	movs	r2, #250	@ 0xfa
 8003e8c:	0092      	lsls	r2, r2, #2
 8003e8e:	4694      	mov	ip, r2
 8003e90:	4463      	add	r3, ip
 8003e92:	607b      	str	r3, [r7, #4]
    UpkeepGadget();
 8003e94:	e7ee      	b.n	8003e74 <main+0x5c>
 8003e96:	46c0      	nop			@ (mov r8, r8)
 8003e98:	20000e70 	.word	0x20000e70
 8003e9c:	20000384 	.word	0x20000384
 8003ea0:	2000024c 	.word	0x2000024c

08003ea4 <SystemClock_Config>:
>>>>>>> main
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
<<<<<<< HEAD
 8003e50:	b590      	push	{r4, r7, lr}
 8003e52:	b09d      	sub	sp, #116	@ 0x74
 8003e54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003e56:	2438      	movs	r4, #56	@ 0x38
 8003e58:	193b      	adds	r3, r7, r4
 8003e5a:	0018      	movs	r0, r3
 8003e5c:	2338      	movs	r3, #56	@ 0x38
 8003e5e:	001a      	movs	r2, r3
 8003e60:	2100      	movs	r1, #0
 8003e62:	f009 fc5f 	bl	800d724 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003e66:	2324      	movs	r3, #36	@ 0x24
 8003e68:	18fb      	adds	r3, r7, r3
 8003e6a:	0018      	movs	r0, r3
 8003e6c:	2314      	movs	r3, #20
 8003e6e:	001a      	movs	r2, r3
 8003e70:	2100      	movs	r1, #0
 8003e72:	f009 fc57 	bl	800d724 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003e76:	003b      	movs	r3, r7
 8003e78:	0018      	movs	r0, r3
 8003e7a:	2324      	movs	r3, #36	@ 0x24
 8003e7c:	001a      	movs	r2, r3
 8003e7e:	2100      	movs	r1, #0
 8003e80:	f009 fc50 	bl	800d724 <memset>
=======
 8003ea4:	b590      	push	{r4, r7, lr}
 8003ea6:	b09d      	sub	sp, #116	@ 0x74
 8003ea8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003eaa:	2438      	movs	r4, #56	@ 0x38
 8003eac:	193b      	adds	r3, r7, r4
 8003eae:	0018      	movs	r0, r3
 8003eb0:	2338      	movs	r3, #56	@ 0x38
 8003eb2:	001a      	movs	r2, r3
 8003eb4:	2100      	movs	r1, #0
 8003eb6:	f009 fd81 	bl	800d9bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003eba:	2324      	movs	r3, #36	@ 0x24
 8003ebc:	18fb      	adds	r3, r7, r3
 8003ebe:	0018      	movs	r0, r3
 8003ec0:	2314      	movs	r3, #20
 8003ec2:	001a      	movs	r2, r3
 8003ec4:	2100      	movs	r1, #0
 8003ec6:	f009 fd79 	bl	800d9bc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003eca:	003b      	movs	r3, r7
 8003ecc:	0018      	movs	r0, r3
 8003ece:	2324      	movs	r3, #36	@ 0x24
 8003ed0:	001a      	movs	r2, r3
 8003ed2:	2100      	movs	r1, #0
 8003ed4:	f009 fd72 	bl	800d9bc <memset>
>>>>>>> main

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
<<<<<<< HEAD
 8003e84:	4b2a      	ldr	r3, [pc, #168]	@ (8003f30 <SystemClock_Config+0xe0>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a2a      	ldr	r2, [pc, #168]	@ (8003f34 <SystemClock_Config+0xe4>)
 8003e8a:	401a      	ands	r2, r3
 8003e8c:	4b28      	ldr	r3, [pc, #160]	@ (8003f30 <SystemClock_Config+0xe0>)
 8003e8e:	2180      	movs	r1, #128	@ 0x80
 8003e90:	0109      	lsls	r1, r1, #4
 8003e92:	430a      	orrs	r2, r1
 8003e94:	601a      	str	r2, [r3, #0]
=======
 8003ed8:	4b29      	ldr	r3, [pc, #164]	@ (8003f80 <SystemClock_Config+0xdc>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a29      	ldr	r2, [pc, #164]	@ (8003f84 <SystemClock_Config+0xe0>)
 8003ede:	401a      	ands	r2, r3
 8003ee0:	4b27      	ldr	r3, [pc, #156]	@ (8003f80 <SystemClock_Config+0xdc>)
 8003ee2:	2180      	movs	r1, #128	@ 0x80
 8003ee4:	0109      	lsls	r1, r1, #4
 8003ee6:	430a      	orrs	r2, r1
 8003ee8:	601a      	str	r2, [r3, #0]
>>>>>>> main

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
<<<<<<< HEAD
 8003e96:	0021      	movs	r1, r4
 8003e98:	187b      	adds	r3, r7, r1
 8003e9a:	2222      	movs	r2, #34	@ 0x22
 8003e9c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003e9e:	187b      	adds	r3, r7, r1
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003ea4:	187b      	adds	r3, r7, r1
 8003ea6:	2210      	movs	r2, #16
 8003ea8:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8003eaa:	187b      	adds	r3, r7, r1
 8003eac:	2201      	movs	r2, #1
 8003eae:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003eb0:	187b      	adds	r3, r7, r1
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003eb6:	187b      	adds	r3, r7, r1
 8003eb8:	0018      	movs	r0, r3
 8003eba:	f006 f9a1 	bl	800a200 <HAL_RCC_OscConfig>
 8003ebe:	1e03      	subs	r3, r0, #0
 8003ec0:	d001      	beq.n	8003ec6 <SystemClock_Config+0x76>
  {
    Error_Handler();
 8003ec2:	f000 f839 	bl	8003f38 <Error_Handler>
=======
 8003eea:	0021      	movs	r1, r4
 8003eec:	187b      	adds	r3, r7, r1
 8003eee:	2222      	movs	r2, #34	@ 0x22
 8003ef0:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003ef2:	187b      	adds	r3, r7, r1
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003ef8:	187b      	adds	r3, r7, r1
 8003efa:	2210      	movs	r2, #16
 8003efc:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8003efe:	187b      	adds	r3, r7, r1
 8003f00:	2201      	movs	r2, #1
 8003f02:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003f04:	187b      	adds	r3, r7, r1
 8003f06:	2200      	movs	r2, #0
 8003f08:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003f0a:	187b      	adds	r3, r7, r1
 8003f0c:	0018      	movs	r0, r3
 8003f0e:	f006 fad9 	bl	800a4c4 <HAL_RCC_OscConfig>
 8003f12:	1e03      	subs	r3, r0, #0
 8003f14:	d001      	beq.n	8003f1a <SystemClock_Config+0x76>
  {
    Error_Handler();
 8003f16:	f000 f837 	bl	8003f88 <Error_Handler>
>>>>>>> main
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
<<<<<<< HEAD
 8003ec6:	2124      	movs	r1, #36	@ 0x24
 8003ec8:	187b      	adds	r3, r7, r1
 8003eca:	220f      	movs	r2, #15
 8003ecc:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8003ece:	187b      	adds	r3, r7, r1
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003ed4:	187b      	adds	r3, r7, r1
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003eda:	187b      	adds	r3, r7, r1
 8003edc:	2200      	movs	r2, #0
 8003ede:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003ee0:	187b      	adds	r3, r7, r1
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003ee6:	187b      	adds	r3, r7, r1
 8003ee8:	2100      	movs	r1, #0
 8003eea:	0018      	movs	r0, r3
 8003eec:	f006 fd5c 	bl	800a9a8 <HAL_RCC_ClockConfig>
 8003ef0:	1e03      	subs	r3, r0, #0
 8003ef2:	d001      	beq.n	8003ef8 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8003ef4:	f000 f820 	bl	8003f38 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_LPUART1
 8003ef8:	003b      	movs	r3, r7
 8003efa:	224d      	movs	r2, #77	@ 0x4d
 8003efc:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003efe:	003b      	movs	r3, r7
 8003f00:	2200      	movs	r2, #0
 8003f02:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8003f04:	003b      	movs	r3, r7
 8003f06:	2200      	movs	r2, #0
 8003f08:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003f0a:	003b      	movs	r3, r7
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	615a      	str	r2, [r3, #20]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8003f10:	003b      	movs	r3, r7
 8003f12:	2280      	movs	r2, #128	@ 0x80
 8003f14:	04d2      	lsls	r2, r2, #19
 8003f16:	621a      	str	r2, [r3, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003f18:	003b      	movs	r3, r7
 8003f1a:	0018      	movs	r0, r3
 8003f1c:	f006 ff68 	bl	800adf0 <HAL_RCCEx_PeriphCLKConfig>
 8003f20:	1e03      	subs	r3, r0, #0
 8003f22:	d001      	beq.n	8003f28 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8003f24:	f000 f808 	bl	8003f38 <Error_Handler>
  }
}
 8003f28:	46c0      	nop			@ (mov r8, r8)
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	b01d      	add	sp, #116	@ 0x74
 8003f2e:	bd90      	pop	{r4, r7, pc}
 8003f30:	40007000 	.word	0x40007000
 8003f34:	ffffe7ff 	.word	0xffffe7ff

08003f38 <Error_Handler>:
=======
 8003f1a:	2124      	movs	r1, #36	@ 0x24
 8003f1c:	187b      	adds	r3, r7, r1
 8003f1e:	220f      	movs	r2, #15
 8003f20:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8003f22:	187b      	adds	r3, r7, r1
 8003f24:	2201      	movs	r2, #1
 8003f26:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003f28:	187b      	adds	r3, r7, r1
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003f2e:	187b      	adds	r3, r7, r1
 8003f30:	2200      	movs	r2, #0
 8003f32:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003f34:	187b      	adds	r3, r7, r1
 8003f36:	2200      	movs	r2, #0
 8003f38:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003f3a:	187b      	adds	r3, r7, r1
 8003f3c:	2100      	movs	r1, #0
 8003f3e:	0018      	movs	r0, r3
 8003f40:	f006 fe94 	bl	800ac6c <HAL_RCC_ClockConfig>
 8003f44:	1e03      	subs	r3, r0, #0
 8003f46:	d001      	beq.n	8003f4c <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8003f48:	f000 f81e 	bl	8003f88 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1
 8003f4c:	003b      	movs	r3, r7
 8003f4e:	2249      	movs	r2, #73	@ 0x49
 8003f50:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003f52:	003b      	movs	r3, r7
 8003f54:	2200      	movs	r2, #0
 8003f56:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003f58:	003b      	movs	r3, r7
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	615a      	str	r2, [r3, #20]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8003f5e:	003b      	movs	r3, r7
 8003f60:	2280      	movs	r2, #128	@ 0x80
 8003f62:	04d2      	lsls	r2, r2, #19
 8003f64:	621a      	str	r2, [r3, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003f66:	003b      	movs	r3, r7
 8003f68:	0018      	movs	r0, r3
 8003f6a:	f007 f8a3 	bl	800b0b4 <HAL_RCCEx_PeriphCLKConfig>
 8003f6e:	1e03      	subs	r3, r0, #0
 8003f70:	d001      	beq.n	8003f76 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8003f72:	f000 f809 	bl	8003f88 <Error_Handler>
  }
}
 8003f76:	46c0      	nop			@ (mov r8, r8)
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	b01d      	add	sp, #116	@ 0x74
 8003f7c:	bd90      	pop	{r4, r7, pc}
 8003f7e:	46c0      	nop			@ (mov r8, r8)
 8003f80:	40007000 	.word	0x40007000
 8003f84:	ffffe7ff 	.word	0xffffe7ff

08003f88 <Error_Handler>:
>>>>>>> main
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
<<<<<<< HEAD
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	af00      	add	r7, sp, #0
=======
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	af00      	add	r7, sp, #0
>>>>>>> main
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
<<<<<<< HEAD
 8003f3c:	b672      	cpsid	i
}
 8003f3e:	46c0      	nop			@ (mov r8, r8)
=======
 8003f8c:	b672      	cpsid	i
}
 8003f8e:	46c0      	nop			@ (mov r8, r8)
>>>>>>> main
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
<<<<<<< HEAD
 8003f40:	46c0      	nop			@ (mov r8, r8)
 8003f42:	e7fd      	b.n	8003f40 <Error_Handler+0x8>

08003f44 <HT_StartMeasurementWrapper>:
=======
 8003f90:	46c0      	nop			@ (mov r8, r8)
 8003f92:	e7fd      	b.n	8003f90 <Error_Handler+0x8>

08003f94 <HT_StartMeasurementWrapper>:
>>>>>>> main
static MeasurementParameters Measurements[MEAS_MEASUREMENT_COUNT];
static EnabledMeasurements MeasEnabled;
static MeasurementState MeasState = MEAS_STATE_INIT;
static uint8_t CurrentMeasurementIndex = 0;

static void HT_StartMeasurementWrapper(void) {
<<<<<<< HEAD
 8003f44:	b580      	push	{r7, lr}
 8003f46:	af00      	add	r7, sp, #0
  HT_StartMeasurement();
 8003f48:	f7ff fd03 	bl	8003952 <HT_StartMeasurement>
}
 8003f4c:	46c0      	nop			@ (mov r8, r8)
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}
	...

08003f54 <HT_IsMeasurementDoneWrapper>:

static bool HT_IsMeasurementDoneWrapper(void) {
 8003f54:	b580      	push	{r7, lr}
 8003f56:	af00      	add	r7, sp, #0
  return HT_GetMeasurementValues(&MeasurementCtx.humidityPerc, &MeasurementCtx.temperature);
 8003f58:	4a04      	ldr	r2, [pc, #16]	@ (8003f6c <HT_IsMeasurementDoneWrapper+0x18>)
 8003f5a:	4b05      	ldr	r3, [pc, #20]	@ (8003f70 <HT_IsMeasurementDoneWrapper+0x1c>)
 8003f5c:	0011      	movs	r1, r2
 8003f5e:	0018      	movs	r0, r3
 8003f60:	f7ff fcfe 	bl	8003960 <HT_GetMeasurementValues>
 8003f64:	0003      	movs	r3, r0
}
 8003f66:	0018      	movs	r0, r3
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd80      	pop	{r7, pc}
 8003f6c:	20000400 	.word	0x20000400
 8003f70:	200003fc 	.word	0x200003fc

08003f74 <VOC_StartMeasurementWrapper>:

static void VOC_StartMeasurementWrapper(void) {
 8003f74:	b580      	push	{r7, lr}
 8003f76:	af00      	add	r7, sp, #0
  Gas_StartMeasurement();
 8003f78:	f7ff fb63 	bl	8003642 <Gas_StartMeasurement>
}
 8003f7c:	46c0      	nop			@ (mov r8, r8)
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}
	...

08003f84 <VOC_IsMeasurementDoneWrapper>:

static bool VOC_IsMeasurementDoneWrapper(void) {
 8003f84:	b580      	push	{r7, lr}
 8003f86:	af00      	add	r7, sp, #0
  return Gas_GetMeasurementValues(&MeasurementCtx.vocIndex);
 8003f88:	4b03      	ldr	r3, [pc, #12]	@ (8003f98 <VOC_IsMeasurementDoneWrapper+0x14>)
 8003f8a:	0018      	movs	r0, r3
 8003f8c:	f7ff fb60 	bl	8003650 <Gas_GetMeasurementValues>
 8003f90:	0003      	movs	r3, r0
}
 8003f92:	0018      	movs	r0, r3
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}
 8003f98:	20000404 	.word	0x20000404

08003f9c <PM_StartMeasurementWrapper>:

static void PM_StartMeasurementWrapper(void) {
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	af00      	add	r7, sp, #0
}
 8003fa0:	46c0      	nop			@ (mov r8, r8)
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}

08003fa6 <PM_IsMeasurementDoneWrapper>:

static bool PM_IsMeasurementDoneWrapper(void) {
 8003fa6:	b580      	push	{r7, lr}
 8003fa8:	af00      	add	r7, sp, #0
  return true;
 8003faa:	2301      	movs	r3, #1
}
 8003fac:	0018      	movs	r0, r3
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}

08003fb2 <MIC_StartMeasurementWrapper>:

static void MIC_StartMeasurementWrapper(void) {
 8003fb2:	b580      	push	{r7, lr}
 8003fb4:	af00      	add	r7, sp, #0
  MIC_Start(SAMPLE_RATE_8K, NR_SAMPLES_128);
 8003fb6:	23fa      	movs	r3, #250	@ 0xfa
 8003fb8:	015b      	lsls	r3, r3, #5
 8003fba:	2180      	movs	r1, #128	@ 0x80
 8003fbc:	0018      	movs	r0, r3
 8003fbe:	f000 fa6d 	bl	800449c <MIC_Start>
}
 8003fc2:	46c0      	nop			@ (mov r8, r8)
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}

08003fc8 <MIC_IsMeasurementDoneWrapper>:

static bool MIC_IsMeasurementDoneWrapper(void) {
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	af00      	add	r7, sp, #0
  return MIC_MeasurementDone();
 8003fcc:	f000 faf2 	bl	80045b4 <MIC_MeasurementDone>
 8003fd0:	0003      	movs	r3, r0
}
 8003fd2:	0018      	movs	r0, r3
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}

08003fd8 <Meas_Init>:

void Meas_Init(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s) {
 8003fd8:	b5b0      	push	{r4, r5, r7, lr}
 8003fda:	b094      	sub	sp, #80	@ 0x50
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
 8003fe0:	6039      	str	r1, [r7, #0]
  MeasState = MEAS_STATE_INIT;
 8003fe2:	4b84      	ldr	r3, [pc, #528]	@ (80041f4 <Meas_Init+0x21c>)
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	701a      	strb	r2, [r3, #0]
  if(MeasEnabled.HT_measurementEnabled || MeasEnabled.VOC_measurementEnabled) {
 8003fe8:	4b83      	ldr	r3, [pc, #524]	@ (80041f8 <Meas_Init+0x220>)
 8003fea:	781b      	ldrb	r3, [r3, #0]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d103      	bne.n	8003ff8 <Meas_Init+0x20>
 8003ff0:	4b81      	ldr	r3, [pc, #516]	@ (80041f8 <Meas_Init+0x220>)
 8003ff2:	785b      	ldrb	r3, [r3, #1]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d079      	beq.n	80040ec <Meas_Init+0x114>
    I2CSensors_Init(sensorI2C);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	0018      	movs	r0, r3
 8003ffc:	f7ff fa5a 	bl	80034b4 <I2CSensors_Init>
    if(!HT_DeviceConnected()) {
 8004000:	f7ff fcbe 	bl	8003980 <HT_DeviceConnected>
 8004004:	0003      	movs	r3, r0
 8004006:	001a      	movs	r2, r3
 8004008:	2301      	movs	r3, #1
 800400a:	4053      	eors	r3, r2
 800400c:	b2db      	uxtb	r3, r3
 800400e:	2b00      	cmp	r3, #0
 8004010:	d017      	beq.n	8004042 <Meas_Init+0x6a>
       Error("Humidity / Temperature sensor NOT connected!");
 8004012:	4a7a      	ldr	r2, [pc, #488]	@ (80041fc <Meas_Init+0x224>)
 8004014:	4b7a      	ldr	r3, [pc, #488]	@ (8004200 <Meas_Init+0x228>)
 8004016:	0019      	movs	r1, r3
 8004018:	2001      	movs	r0, #1
 800401a:	f002 fa15 	bl	8006448 <CreateLine>
       MeasEnabled.HT_measurementEnabled = false;
 800401e:	4b76      	ldr	r3, [pc, #472]	@ (80041f8 <Meas_Init+0x220>)
 8004020:	2200      	movs	r2, #0
 8004022:	701a      	strb	r2, [r3, #0]
       // HT Device NOT connected, turning LED on RED.
       // CCR1 = Red, CCR3 = Green, CCR4 = Blue.
       TIM2 -> CCR1 = 0;
 8004024:	2380      	movs	r3, #128	@ 0x80
 8004026:	05db      	lsls	r3, r3, #23
 8004028:	2200      	movs	r2, #0
 800402a:	635a      	str	r2, [r3, #52]	@ 0x34
       TIM2 -> CCR3 = 4000;
 800402c:	2380      	movs	r3, #128	@ 0x80
 800402e:	05db      	lsls	r3, r3, #23
 8004030:	22fa      	movs	r2, #250	@ 0xfa
 8004032:	0112      	lsls	r2, r2, #4
 8004034:	63da      	str	r2, [r3, #60]	@ 0x3c
       TIM2 -> CCR4 = 4000;
 8004036:	2380      	movs	r3, #128	@ 0x80
 8004038:	05db      	lsls	r3, r3, #23
 800403a:	22fa      	movs	r2, #250	@ 0xfa
 800403c:	0112      	lsls	r2, r2, #4
 800403e:	641a      	str	r2, [r3, #64]	@ 0x40
 8004040:	e013      	b.n	800406a <Meas_Init+0x92>
    }else {
      // HT Device is connected, turning led on GREEN.
      // CCR1 = Red, CCR3 = Green, CCR4 = Blue.
      Debug("Humidity / Temperature sensor initialised.");
 8004042:	4a70      	ldr	r2, [pc, #448]	@ (8004204 <Meas_Init+0x22c>)
 8004044:	4b70      	ldr	r3, [pc, #448]	@ (8004208 <Meas_Init+0x230>)
 8004046:	0019      	movs	r1, r3
 8004048:	2003      	movs	r0, #3
 800404a:	f002 f9fd 	bl	8006448 <CreateLine>
      TIM2 -> CCR1 = 4000;
 800404e:	2380      	movs	r3, #128	@ 0x80
 8004050:	05db      	lsls	r3, r3, #23
 8004052:	22fa      	movs	r2, #250	@ 0xfa
 8004054:	0112      	lsls	r2, r2, #4
 8004056:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM2 -> CCR3 = 0;
 8004058:	2380      	movs	r3, #128	@ 0x80
 800405a:	05db      	lsls	r3, r3, #23
 800405c:	2200      	movs	r2, #0
 800405e:	63da      	str	r2, [r3, #60]	@ 0x3c
      TIM2 -> CCR4 = 4000;
 8004060:	2380      	movs	r3, #128	@ 0x80
 8004062:	05db      	lsls	r3, r3, #23
 8004064:	22fa      	movs	r2, #250	@ 0xfa
 8004066:	0112      	lsls	r2, r2, #4
 8004068:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    if(!Gas_DeviceConnected()) {
 800406a:	f7ff fafe 	bl	800366a <Gas_DeviceConnected>
 800406e:	0003      	movs	r3, r0
 8004070:	001a      	movs	r2, r3
 8004072:	2301      	movs	r3, #1
 8004074:	4053      	eors	r3, r2
 8004076:	b2db      	uxtb	r3, r3
 8004078:	2b00      	cmp	r3, #0
 800407a:	d01d      	beq.n	80040b8 <Meas_Init+0xe0>
       Error("SGP device not connected!");
 800407c:	4a63      	ldr	r2, [pc, #396]	@ (800420c <Meas_Init+0x234>)
 800407e:	4b60      	ldr	r3, [pc, #384]	@ (8004200 <Meas_Init+0x228>)
 8004080:	0019      	movs	r1, r3
 8004082:	2001      	movs	r0, #1
 8004084:	f002 f9e0 	bl	8006448 <CreateLine>
       // SGP Device is NOT connected, turning led on RED.
       HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 0);
 8004088:	4b61      	ldr	r3, [pc, #388]	@ (8004210 <Meas_Init+0x238>)
 800408a:	2200      	movs	r2, #0
 800408c:	2101      	movs	r1, #1
 800408e:	0018      	movs	r0, r3
 8004090:	f003 fc10 	bl	80078b4 <HAL_GPIO_WritePin>
       HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
 8004094:	2380      	movs	r3, #128	@ 0x80
 8004096:	005b      	lsls	r3, r3, #1
 8004098:	485d      	ldr	r0, [pc, #372]	@ (8004210 <Meas_Init+0x238>)
 800409a:	2201      	movs	r2, #1
 800409c:	0019      	movs	r1, r3
 800409e:	f003 fc09 	bl	80078b4 <HAL_GPIO_WritePin>
       HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
 80040a2:	2380      	movs	r3, #128	@ 0x80
 80040a4:	009b      	lsls	r3, r3, #2
 80040a6:	485a      	ldr	r0, [pc, #360]	@ (8004210 <Meas_Init+0x238>)
 80040a8:	2201      	movs	r2, #1
 80040aa:	0019      	movs	r1, r3
 80040ac:	f003 fc02 	bl	80078b4 <HAL_GPIO_WritePin>
       MeasEnabled.VOC_measurementEnabled = false;
 80040b0:	4b51      	ldr	r3, [pc, #324]	@ (80041f8 <Meas_Init+0x220>)
 80040b2:	2200      	movs	r2, #0
 80040b4:	705a      	strb	r2, [r3, #1]
 80040b6:	e019      	b.n	80040ec <Meas_Init+0x114>
    }else{
      Debug("SGP sensor initialised.");
 80040b8:	4a56      	ldr	r2, [pc, #344]	@ (8004214 <Meas_Init+0x23c>)
 80040ba:	4b53      	ldr	r3, [pc, #332]	@ (8004208 <Meas_Init+0x230>)
 80040bc:	0019      	movs	r1, r3
 80040be:	2003      	movs	r0, #3
 80040c0:	f002 f9c2 	bl	8006448 <CreateLine>
      // HT Device is connected, turning led on GREEN.
      HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 1);
 80040c4:	4b52      	ldr	r3, [pc, #328]	@ (8004210 <Meas_Init+0x238>)
 80040c6:	2201      	movs	r2, #1
 80040c8:	2101      	movs	r1, #1
 80040ca:	0018      	movs	r0, r3
 80040cc:	f003 fbf2 	bl	80078b4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 0);
 80040d0:	2380      	movs	r3, #128	@ 0x80
 80040d2:	005b      	lsls	r3, r3, #1
 80040d4:	484e      	ldr	r0, [pc, #312]	@ (8004210 <Meas_Init+0x238>)
 80040d6:	2200      	movs	r2, #0
 80040d8:	0019      	movs	r1, r3
 80040da:	f003 fbeb 	bl	80078b4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
 80040de:	2380      	movs	r3, #128	@ 0x80
 80040e0:	009b      	lsls	r3, r3, #2
 80040e2:	484b      	ldr	r0, [pc, #300]	@ (8004210 <Meas_Init+0x238>)
 80040e4:	2201      	movs	r2, #1
 80040e6:	0019      	movs	r1, r3
 80040e8:	f003 fbe4 	bl	80078b4 <HAL_GPIO_WritePin>
    }
  }
  if(MeasEnabled.MIC_measurementEnabled) {
 80040ec:	4b42      	ldr	r3, [pc, #264]	@ (80041f8 <Meas_Init+0x220>)
 80040ee:	78db      	ldrb	r3, [r3, #3]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d003      	beq.n	80040fc <Meas_Init+0x124>
    MIC_Init(micI2s);
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	0018      	movs	r0, r3
 80040f8:	f000 f8f6 	bl	80042e8 <MIC_Init>
  }
  uint8_t offset = 0;
 80040fc:	254f      	movs	r5, #79	@ 0x4f
 80040fe:	197b      	adds	r3, r7, r5
 8004100:	2200      	movs	r2, #0
 8004102:	701a      	strb	r2, [r3, #0]
  Measurements[offset++] = (MeasurementParameters) {HT_StartMeasurementWrapper, HT_IsMeasurementDoneWrapper, &MeasurementCtx.HT_measurementDone, MeasEnabled.HT_measurementEnabled};
 8004104:	197b      	adds	r3, r7, r5
 8004106:	781b      	ldrb	r3, [r3, #0]
 8004108:	197a      	adds	r2, r7, r5
 800410a:	1c59      	adds	r1, r3, #1
 800410c:	7011      	strb	r1, [r2, #0]
 800410e:	4a3a      	ldr	r2, [pc, #232]	@ (80041f8 <Meas_Init+0x220>)
 8004110:	7814      	ldrb	r4, [r2, #0]
 8004112:	4a41      	ldr	r2, [pc, #260]	@ (8004218 <Meas_Init+0x240>)
 8004114:	0119      	lsls	r1, r3, #4
 8004116:	4841      	ldr	r0, [pc, #260]	@ (800421c <Meas_Init+0x244>)
 8004118:	5088      	str	r0, [r1, r2]
 800411a:	493f      	ldr	r1, [pc, #252]	@ (8004218 <Meas_Init+0x240>)
 800411c:	011a      	lsls	r2, r3, #4
 800411e:	188a      	adds	r2, r1, r2
 8004120:	3204      	adds	r2, #4
 8004122:	493f      	ldr	r1, [pc, #252]	@ (8004220 <Meas_Init+0x248>)
 8004124:	6011      	str	r1, [r2, #0]
 8004126:	493c      	ldr	r1, [pc, #240]	@ (8004218 <Meas_Init+0x240>)
 8004128:	011a      	lsls	r2, r3, #4
 800412a:	188a      	adds	r2, r1, r2
 800412c:	3208      	adds	r2, #8
 800412e:	493d      	ldr	r1, [pc, #244]	@ (8004224 <Meas_Init+0x24c>)
 8004130:	6011      	str	r1, [r2, #0]
 8004132:	4a39      	ldr	r2, [pc, #228]	@ (8004218 <Meas_Init+0x240>)
 8004134:	011b      	lsls	r3, r3, #4
 8004136:	18d3      	adds	r3, r2, r3
 8004138:	330c      	adds	r3, #12
 800413a:	1c22      	adds	r2, r4, #0
 800413c:	701a      	strb	r2, [r3, #0]
  Measurements[offset++] = (MeasurementParameters) {VOC_StartMeasurementWrapper, VOC_IsMeasurementDoneWrapper, &MeasurementCtx.VOC_measurementDone, MeasEnabled.VOC_measurementEnabled};
 800413e:	197b      	adds	r3, r7, r5
 8004140:	781b      	ldrb	r3, [r3, #0]
 8004142:	197a      	adds	r2, r7, r5
 8004144:	1c59      	adds	r1, r3, #1
 8004146:	7011      	strb	r1, [r2, #0]
 8004148:	4a2b      	ldr	r2, [pc, #172]	@ (80041f8 <Meas_Init+0x220>)
 800414a:	7854      	ldrb	r4, [r2, #1]
 800414c:	4a32      	ldr	r2, [pc, #200]	@ (8004218 <Meas_Init+0x240>)
 800414e:	0119      	lsls	r1, r3, #4
 8004150:	4835      	ldr	r0, [pc, #212]	@ (8004228 <Meas_Init+0x250>)
 8004152:	5088      	str	r0, [r1, r2]
 8004154:	4930      	ldr	r1, [pc, #192]	@ (8004218 <Meas_Init+0x240>)
 8004156:	011a      	lsls	r2, r3, #4
 8004158:	188a      	adds	r2, r1, r2
 800415a:	3204      	adds	r2, #4
 800415c:	4933      	ldr	r1, [pc, #204]	@ (800422c <Meas_Init+0x254>)
 800415e:	6011      	str	r1, [r2, #0]
 8004160:	492d      	ldr	r1, [pc, #180]	@ (8004218 <Meas_Init+0x240>)
 8004162:	011a      	lsls	r2, r3, #4
 8004164:	188a      	adds	r2, r1, r2
 8004166:	3208      	adds	r2, #8
 8004168:	4931      	ldr	r1, [pc, #196]	@ (8004230 <Meas_Init+0x258>)
 800416a:	6011      	str	r1, [r2, #0]
 800416c:	4a2a      	ldr	r2, [pc, #168]	@ (8004218 <Meas_Init+0x240>)
 800416e:	011b      	lsls	r3, r3, #4
 8004170:	18d3      	adds	r3, r2, r3
 8004172:	330c      	adds	r3, #12
 8004174:	1c22      	adds	r2, r4, #0
 8004176:	701a      	strb	r2, [r3, #0]
  Measurements[offset++] = (MeasurementParameters) {PM_StartMeasurementWrapper, PM_IsMeasurementDoneWrapper, &MeasurementCtx.PM_measurementDone, MeasEnabled.PM_measurementEnabled};
 8004178:	197b      	adds	r3, r7, r5
 800417a:	781b      	ldrb	r3, [r3, #0]
 800417c:	197a      	adds	r2, r7, r5
 800417e:	1c59      	adds	r1, r3, #1
 8004180:	7011      	strb	r1, [r2, #0]
 8004182:	4a1d      	ldr	r2, [pc, #116]	@ (80041f8 <Meas_Init+0x220>)
 8004184:	7894      	ldrb	r4, [r2, #2]
 8004186:	4a24      	ldr	r2, [pc, #144]	@ (8004218 <Meas_Init+0x240>)
 8004188:	0119      	lsls	r1, r3, #4
 800418a:	482a      	ldr	r0, [pc, #168]	@ (8004234 <Meas_Init+0x25c>)
 800418c:	5088      	str	r0, [r1, r2]
 800418e:	4922      	ldr	r1, [pc, #136]	@ (8004218 <Meas_Init+0x240>)
 8004190:	011a      	lsls	r2, r3, #4
 8004192:	188a      	adds	r2, r1, r2
 8004194:	3204      	adds	r2, #4
 8004196:	4928      	ldr	r1, [pc, #160]	@ (8004238 <Meas_Init+0x260>)
 8004198:	6011      	str	r1, [r2, #0]
 800419a:	491f      	ldr	r1, [pc, #124]	@ (8004218 <Meas_Init+0x240>)
 800419c:	011a      	lsls	r2, r3, #4
 800419e:	188a      	adds	r2, r1, r2
 80041a0:	3208      	adds	r2, #8
 80041a2:	4926      	ldr	r1, [pc, #152]	@ (800423c <Meas_Init+0x264>)
 80041a4:	6011      	str	r1, [r2, #0]
 80041a6:	4a1c      	ldr	r2, [pc, #112]	@ (8004218 <Meas_Init+0x240>)
 80041a8:	011b      	lsls	r3, r3, #4
 80041aa:	18d3      	adds	r3, r2, r3
 80041ac:	330c      	adds	r3, #12
 80041ae:	1c22      	adds	r2, r4, #0
 80041b0:	701a      	strb	r2, [r3, #0]
  Measurements[offset++] = (MeasurementParameters) {MIC_StartMeasurementWrapper, MIC_IsMeasurementDoneWrapper, &MeasurementCtx.MIC_measurementDone, MeasEnabled.MIC_measurementEnabled};
 80041b2:	197b      	adds	r3, r7, r5
 80041b4:	781b      	ldrb	r3, [r3, #0]
 80041b6:	197a      	adds	r2, r7, r5
 80041b8:	1c59      	adds	r1, r3, #1
 80041ba:	7011      	strb	r1, [r2, #0]
 80041bc:	4a0e      	ldr	r2, [pc, #56]	@ (80041f8 <Meas_Init+0x220>)
 80041be:	78d4      	ldrb	r4, [r2, #3]
 80041c0:	4a15      	ldr	r2, [pc, #84]	@ (8004218 <Meas_Init+0x240>)
 80041c2:	0119      	lsls	r1, r3, #4
 80041c4:	481e      	ldr	r0, [pc, #120]	@ (8004240 <Meas_Init+0x268>)
 80041c6:	5088      	str	r0, [r1, r2]
 80041c8:	4913      	ldr	r1, [pc, #76]	@ (8004218 <Meas_Init+0x240>)
 80041ca:	011a      	lsls	r2, r3, #4
 80041cc:	188a      	adds	r2, r1, r2
 80041ce:	3204      	adds	r2, #4
 80041d0:	491c      	ldr	r1, [pc, #112]	@ (8004244 <Meas_Init+0x26c>)
 80041d2:	6011      	str	r1, [r2, #0]
 80041d4:	4910      	ldr	r1, [pc, #64]	@ (8004218 <Meas_Init+0x240>)
 80041d6:	011a      	lsls	r2, r3, #4
 80041d8:	188a      	adds	r2, r1, r2
 80041da:	3208      	adds	r2, #8
 80041dc:	491a      	ldr	r1, [pc, #104]	@ (8004248 <Meas_Init+0x270>)
 80041de:	6011      	str	r1, [r2, #0]
 80041e0:	4a0d      	ldr	r2, [pc, #52]	@ (8004218 <Meas_Init+0x240>)
 80041e2:	011b      	lsls	r3, r3, #4
 80041e4:	18d3      	adds	r3, r2, r3
 80041e6:	330c      	adds	r3, #12
 80041e8:	1c22      	adds	r2, r4, #0
 80041ea:	701a      	strb	r2, [r3, #0]
}
 80041ec:	46c0      	nop			@ (mov r8, r8)
 80041ee:	46bd      	mov	sp, r7
 80041f0:	b014      	add	sp, #80	@ 0x50
 80041f2:	bdb0      	pop	{r4, r5, r7, pc}
 80041f4:	20000450 	.word	0x20000450
 80041f8:	2000044c 	.word	0x2000044c
 80041fc:	0800feb4 	.word	0x0800feb4
 8004200:	0800fee4 	.word	0x0800fee4
 8004204:	0800fee8 	.word	0x0800fee8
 8004208:	0800ff14 	.word	0x0800ff14
 800420c:	0800ff18 	.word	0x0800ff18
 8004210:	50000400 	.word	0x50000400
 8004214:	0800ff34 	.word	0x0800ff34
 8004218:	2000040c 	.word	0x2000040c
 800421c:	08003f45 	.word	0x08003f45
 8004220:	08003f55 	.word	0x08003f55
 8004224:	20000408 	.word	0x20000408
 8004228:	08003f75 	.word	0x08003f75
 800422c:	08003f85 	.word	0x08003f85
 8004230:	20000409 	.word	0x20000409
 8004234:	08003f9d 	.word	0x08003f9d
 8004238:	08003fa7 	.word	0x08003fa7
 800423c:	2000040a 	.word	0x2000040a
 8004240:	08003fb3 	.word	0x08003fb3
 8004244:	08003fc9 	.word	0x08003fc9
 8004248:	2000040b 	.word	0x2000040b

0800424c <Meas_SetEnabledSensors>:
    MeasState = MEAS_STATE_INIT;
    break;
  }
}

void Meas_SetEnabledSensors(EnabledMeasurements enabled) {
 800424c:	b590      	push	{r4, r7, lr}
 800424e:	b085      	sub	sp, #20
 8004250:	af00      	add	r7, sp, #0
 8004252:	1d3b      	adds	r3, r7, #4
 8004254:	6018      	str	r0, [r3, #0]
  uint8_t offset = 0;
 8004256:	240f      	movs	r4, #15
 8004258:	193b      	adds	r3, r7, r4
 800425a:	2200      	movs	r2, #0
 800425c:	701a      	strb	r2, [r3, #0]
  MeasEnabled = enabled;
 800425e:	4b20      	ldr	r3, [pc, #128]	@ (80042e0 <Meas_SetEnabledSensors+0x94>)
 8004260:	1d3a      	adds	r2, r7, #4
 8004262:	6812      	ldr	r2, [r2, #0]
 8004264:	601a      	str	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.HT_measurementEnabled;
 8004266:	193b      	adds	r3, r7, r4
 8004268:	781b      	ldrb	r3, [r3, #0]
 800426a:	193a      	adds	r2, r7, r4
 800426c:	1c59      	adds	r1, r3, #1
 800426e:	7011      	strb	r1, [r2, #0]
 8004270:	0018      	movs	r0, r3
 8004272:	1d3b      	adds	r3, r7, #4
 8004274:	7819      	ldrb	r1, [r3, #0]
 8004276:	4a1b      	ldr	r2, [pc, #108]	@ (80042e4 <Meas_SetEnabledSensors+0x98>)
 8004278:	0103      	lsls	r3, r0, #4
 800427a:	18d3      	adds	r3, r2, r3
 800427c:	330c      	adds	r3, #12
 800427e:	1c0a      	adds	r2, r1, #0
 8004280:	701a      	strb	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.VOC_measurementEnabled;
 8004282:	193b      	adds	r3, r7, r4
 8004284:	781b      	ldrb	r3, [r3, #0]
 8004286:	193a      	adds	r2, r7, r4
 8004288:	1c59      	adds	r1, r3, #1
 800428a:	7011      	strb	r1, [r2, #0]
 800428c:	0018      	movs	r0, r3
 800428e:	1d3b      	adds	r3, r7, #4
 8004290:	7859      	ldrb	r1, [r3, #1]
 8004292:	4a14      	ldr	r2, [pc, #80]	@ (80042e4 <Meas_SetEnabledSensors+0x98>)
 8004294:	0103      	lsls	r3, r0, #4
 8004296:	18d3      	adds	r3, r2, r3
 8004298:	330c      	adds	r3, #12
 800429a:	1c0a      	adds	r2, r1, #0
 800429c:	701a      	strb	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.PM_measurementEnabled;
 800429e:	193b      	adds	r3, r7, r4
 80042a0:	781b      	ldrb	r3, [r3, #0]
 80042a2:	193a      	adds	r2, r7, r4
 80042a4:	1c59      	adds	r1, r3, #1
 80042a6:	7011      	strb	r1, [r2, #0]
 80042a8:	0018      	movs	r0, r3
 80042aa:	1d3b      	adds	r3, r7, #4
 80042ac:	7899      	ldrb	r1, [r3, #2]
 80042ae:	4a0d      	ldr	r2, [pc, #52]	@ (80042e4 <Meas_SetEnabledSensors+0x98>)
 80042b0:	0103      	lsls	r3, r0, #4
 80042b2:	18d3      	adds	r3, r2, r3
 80042b4:	330c      	adds	r3, #12
 80042b6:	1c0a      	adds	r2, r1, #0
 80042b8:	701a      	strb	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.MIC_measurementEnabled;
 80042ba:	193b      	adds	r3, r7, r4
 80042bc:	781b      	ldrb	r3, [r3, #0]
 80042be:	193a      	adds	r2, r7, r4
 80042c0:	1c59      	adds	r1, r3, #1
 80042c2:	7011      	strb	r1, [r2, #0]
 80042c4:	0018      	movs	r0, r3
 80042c6:	1d3b      	adds	r3, r7, #4
 80042c8:	78d9      	ldrb	r1, [r3, #3]
 80042ca:	4a06      	ldr	r2, [pc, #24]	@ (80042e4 <Meas_SetEnabledSensors+0x98>)
 80042cc:	0103      	lsls	r3, r0, #4
 80042ce:	18d3      	adds	r3, r2, r3
 80042d0:	330c      	adds	r3, #12
 80042d2:	1c0a      	adds	r2, r1, #0
 80042d4:	701a      	strb	r2, [r3, #0]
}
 80042d6:	46c0      	nop			@ (mov r8, r8)
 80042d8:	46bd      	mov	sp, r7
 80042da:	b005      	add	sp, #20
 80042dc:	bd90      	pop	{r4, r7, pc}
 80042de:	46c0      	nop			@ (mov r8, r8)
 80042e0:	2000044c 	.word	0x2000044c
 80042e4:	2000040c 	.word	0x2000040c

080042e8 <MIC_Init>:
=======
 8003f94:	b580      	push	{r7, lr}
 8003f96:	af00      	add	r7, sp, #0
  HT_StartMeasurement();
 8003f98:	f7ff fd01 	bl	800399e <HT_StartMeasurement>
}
 8003f9c:	46c0      	nop			@ (mov r8, r8)
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}
	...

08003fa4 <HT_IsMeasurementDoneWrapper>:

static bool HT_IsMeasurementDoneWrapper(void) {
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	af00      	add	r7, sp, #0
  return HT_GetMeasurementValues(&MeasurementCtx.humidityPerc, &MeasurementCtx.temperature);
 8003fa8:	4a04      	ldr	r2, [pc, #16]	@ (8003fbc <HT_IsMeasurementDoneWrapper+0x18>)
 8003faa:	4b05      	ldr	r3, [pc, #20]	@ (8003fc0 <HT_IsMeasurementDoneWrapper+0x1c>)
 8003fac:	0011      	movs	r1, r2
 8003fae:	0018      	movs	r0, r3
 8003fb0:	f7ff fcfc 	bl	80039ac <HT_GetMeasurementValues>
 8003fb4:	0003      	movs	r3, r0
}
 8003fb6:	0018      	movs	r0, r3
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}
 8003fbc:	2000040c 	.word	0x2000040c
 8003fc0:	20000408 	.word	0x20000408

08003fc4 <VOC_StartMeasurementWrapper>:

static void VOC_StartMeasurementWrapper(void) {
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	af00      	add	r7, sp, #0
  Gas_StartMeasurement();
 8003fc8:	f7ff fbc0 	bl	800374c <Gas_StartMeasurement>
}
 8003fcc:	46c0      	nop			@ (mov r8, r8)
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}
	...

08003fd4 <VOC_IsMeasurementDoneWrapper>:

static bool VOC_IsMeasurementDoneWrapper(void) {
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	af00      	add	r7, sp, #0
  return Gas_GetMeasurementValues(&MeasurementCtx.vocIndex);
 8003fd8:	4b03      	ldr	r3, [pc, #12]	@ (8003fe8 <VOC_IsMeasurementDoneWrapper+0x14>)
 8003fda:	0018      	movs	r0, r3
 8003fdc:	f7ff fbbd 	bl	800375a <Gas_GetMeasurementValues>
 8003fe0:	0003      	movs	r3, r0
}
 8003fe2:	0018      	movs	r0, r3
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}
 8003fe8:	20000410 	.word	0x20000410

08003fec <PM_StartMeasurementWrapper>:

static void PM_StartMeasurementWrapper(void) {
 8003fec:	b580      	push	{r7, lr}
 8003fee:	af00      	add	r7, sp, #0
}
 8003ff0:	46c0      	nop			@ (mov r8, r8)
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}

08003ff6 <PM_IsMeasurementDoneWrapper>:

static bool PM_IsMeasurementDoneWrapper(void) {
 8003ff6:	b580      	push	{r7, lr}
 8003ff8:	af00      	add	r7, sp, #0
  return true;
 8003ffa:	2301      	movs	r3, #1
}
 8003ffc:	0018      	movs	r0, r3
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}

08004002 <MIC_StartMeasurementWrapper>:

static void MIC_StartMeasurementWrapper(void) {
 8004002:	b580      	push	{r7, lr}
 8004004:	af00      	add	r7, sp, #0
  MIC_Start(SAMPLE_RATE_8K, NR_SAMPLES_128);
 8004006:	2380      	movs	r3, #128	@ 0x80
 8004008:	009a      	lsls	r2, r3, #2
 800400a:	23fa      	movs	r3, #250	@ 0xfa
 800400c:	015b      	lsls	r3, r3, #5
 800400e:	0011      	movs	r1, r2
 8004010:	0018      	movs	r0, r3
 8004012:	f000 fa61 	bl	80044d8 <MIC_Start>
}
 8004016:	46c0      	nop			@ (mov r8, r8)
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}

0800401c <MIC_IsMeasurementDoneWrapper>:

static bool MIC_IsMeasurementDoneWrapper(void) {
 800401c:	b580      	push	{r7, lr}
 800401e:	af00      	add	r7, sp, #0
  return MIC_MeasurementDone();
 8004020:	f000 faf2 	bl	8004608 <MIC_MeasurementDone>
 8004024:	0003      	movs	r3, r0
}
 8004026:	0018      	movs	r0, r3
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}

0800402c <Meas_Init>:

void Meas_Init(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s) {
 800402c:	b5b0      	push	{r4, r5, r7, lr}
 800402e:	b094      	sub	sp, #80	@ 0x50
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
 8004034:	6039      	str	r1, [r7, #0]
  MeasState = MEAS_STATE_INIT;
 8004036:	4b5b      	ldr	r3, [pc, #364]	@ (80041a4 <Meas_Init+0x178>)
 8004038:	2200      	movs	r2, #0
 800403a:	701a      	strb	r2, [r3, #0]
  if(MeasEnabled.HT_measurementEnabled || MeasEnabled.VOC_measurementEnabled) {
 800403c:	4b5a      	ldr	r3, [pc, #360]	@ (80041a8 <Meas_Init+0x17c>)
 800403e:	781b      	ldrb	r3, [r3, #0]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d103      	bne.n	800404c <Meas_Init+0x20>
 8004044:	4b58      	ldr	r3, [pc, #352]	@ (80041a8 <Meas_Init+0x17c>)
 8004046:	785b      	ldrb	r3, [r3, #1]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d027      	beq.n	800409c <Meas_Init+0x70>
    I2CSensors_Init(sensorI2C);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	0018      	movs	r0, r3
 8004050:	f7ff faae 	bl	80035b0 <I2CSensors_Init>
    if(!HT_DeviceConnected()) {
 8004054:	f7ff fcba 	bl	80039cc <HT_DeviceConnected>
 8004058:	0003      	movs	r3, r0
 800405a:	001a      	movs	r2, r3
 800405c:	2301      	movs	r3, #1
 800405e:	4053      	eors	r3, r2
 8004060:	b2db      	uxtb	r3, r3
 8004062:	2b00      	cmp	r3, #0
 8004064:	d008      	beq.n	8004078 <Meas_Init+0x4c>
       Error("HT device not connected!");
 8004066:	4a51      	ldr	r2, [pc, #324]	@ (80041ac <Meas_Init+0x180>)
 8004068:	4b51      	ldr	r3, [pc, #324]	@ (80041b0 <Meas_Init+0x184>)
 800406a:	0019      	movs	r1, r3
 800406c:	2001      	movs	r0, #1
 800406e:	f002 fb73 	bl	8006758 <CreateLine>
       MeasEnabled.HT_measurementEnabled = false;
 8004072:	4b4d      	ldr	r3, [pc, #308]	@ (80041a8 <Meas_Init+0x17c>)
 8004074:	2200      	movs	r2, #0
 8004076:	701a      	strb	r2, [r3, #0]
    }
    if(!Gas_DeviceConnected()) {
 8004078:	f7ff fb7c 	bl	8003774 <Gas_DeviceConnected>
 800407c:	0003      	movs	r3, r0
 800407e:	001a      	movs	r2, r3
 8004080:	2301      	movs	r3, #1
 8004082:	4053      	eors	r3, r2
 8004084:	b2db      	uxtb	r3, r3
 8004086:	2b00      	cmp	r3, #0
 8004088:	d008      	beq.n	800409c <Meas_Init+0x70>
       Error("SGP device not connected!");
 800408a:	4a4a      	ldr	r2, [pc, #296]	@ (80041b4 <Meas_Init+0x188>)
 800408c:	4b48      	ldr	r3, [pc, #288]	@ (80041b0 <Meas_Init+0x184>)
 800408e:	0019      	movs	r1, r3
 8004090:	2001      	movs	r0, #1
 8004092:	f002 fb61 	bl	8006758 <CreateLine>
       MeasEnabled.VOC_measurementEnabled = false;
 8004096:	4b44      	ldr	r3, [pc, #272]	@ (80041a8 <Meas_Init+0x17c>)
 8004098:	2200      	movs	r2, #0
 800409a:	705a      	strb	r2, [r3, #1]
    }
  }
  if(MeasEnabled.MIC_measurementEnabled) {
 800409c:	4b42      	ldr	r3, [pc, #264]	@ (80041a8 <Meas_Init+0x17c>)
 800409e:	78db      	ldrb	r3, [r3, #3]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d003      	beq.n	80040ac <Meas_Init+0x80>
    MIC_Init(micI2s);
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	0018      	movs	r0, r3
 80040a8:	f000 f9d2 	bl	8004450 <MIC_Init>
  }
  uint8_t offset = 0;
 80040ac:	254f      	movs	r5, #79	@ 0x4f
 80040ae:	197b      	adds	r3, r7, r5
 80040b0:	2200      	movs	r2, #0
 80040b2:	701a      	strb	r2, [r3, #0]
  Measurements[offset++] = (MeasurementParameters) {HT_StartMeasurementWrapper, HT_IsMeasurementDoneWrapper, &MeasurementCtx.HT_measurementDone, MeasEnabled.HT_measurementEnabled};
 80040b4:	197b      	adds	r3, r7, r5
 80040b6:	781b      	ldrb	r3, [r3, #0]
 80040b8:	197a      	adds	r2, r7, r5
 80040ba:	1c59      	adds	r1, r3, #1
 80040bc:	7011      	strb	r1, [r2, #0]
 80040be:	4a3a      	ldr	r2, [pc, #232]	@ (80041a8 <Meas_Init+0x17c>)
 80040c0:	7814      	ldrb	r4, [r2, #0]
 80040c2:	4a3d      	ldr	r2, [pc, #244]	@ (80041b8 <Meas_Init+0x18c>)
 80040c4:	0119      	lsls	r1, r3, #4
 80040c6:	483d      	ldr	r0, [pc, #244]	@ (80041bc <Meas_Init+0x190>)
 80040c8:	5088      	str	r0, [r1, r2]
 80040ca:	493b      	ldr	r1, [pc, #236]	@ (80041b8 <Meas_Init+0x18c>)
 80040cc:	011a      	lsls	r2, r3, #4
 80040ce:	188a      	adds	r2, r1, r2
 80040d0:	3204      	adds	r2, #4
 80040d2:	493b      	ldr	r1, [pc, #236]	@ (80041c0 <Meas_Init+0x194>)
 80040d4:	6011      	str	r1, [r2, #0]
 80040d6:	4938      	ldr	r1, [pc, #224]	@ (80041b8 <Meas_Init+0x18c>)
 80040d8:	011a      	lsls	r2, r3, #4
 80040da:	188a      	adds	r2, r1, r2
 80040dc:	3208      	adds	r2, #8
 80040de:	4939      	ldr	r1, [pc, #228]	@ (80041c4 <Meas_Init+0x198>)
 80040e0:	6011      	str	r1, [r2, #0]
 80040e2:	4a35      	ldr	r2, [pc, #212]	@ (80041b8 <Meas_Init+0x18c>)
 80040e4:	011b      	lsls	r3, r3, #4
 80040e6:	18d3      	adds	r3, r2, r3
 80040e8:	330c      	adds	r3, #12
 80040ea:	1c22      	adds	r2, r4, #0
 80040ec:	701a      	strb	r2, [r3, #0]
  Measurements[offset++] = (MeasurementParameters) {VOC_StartMeasurementWrapper, VOC_IsMeasurementDoneWrapper, &MeasurementCtx.VOC_measurementDone, MeasEnabled.VOC_measurementEnabled};
 80040ee:	197b      	adds	r3, r7, r5
 80040f0:	781b      	ldrb	r3, [r3, #0]
 80040f2:	197a      	adds	r2, r7, r5
 80040f4:	1c59      	adds	r1, r3, #1
 80040f6:	7011      	strb	r1, [r2, #0]
 80040f8:	4a2b      	ldr	r2, [pc, #172]	@ (80041a8 <Meas_Init+0x17c>)
 80040fa:	7854      	ldrb	r4, [r2, #1]
 80040fc:	4a2e      	ldr	r2, [pc, #184]	@ (80041b8 <Meas_Init+0x18c>)
 80040fe:	0119      	lsls	r1, r3, #4
 8004100:	4831      	ldr	r0, [pc, #196]	@ (80041c8 <Meas_Init+0x19c>)
 8004102:	5088      	str	r0, [r1, r2]
 8004104:	492c      	ldr	r1, [pc, #176]	@ (80041b8 <Meas_Init+0x18c>)
 8004106:	011a      	lsls	r2, r3, #4
 8004108:	188a      	adds	r2, r1, r2
 800410a:	3204      	adds	r2, #4
 800410c:	492f      	ldr	r1, [pc, #188]	@ (80041cc <Meas_Init+0x1a0>)
 800410e:	6011      	str	r1, [r2, #0]
 8004110:	4929      	ldr	r1, [pc, #164]	@ (80041b8 <Meas_Init+0x18c>)
 8004112:	011a      	lsls	r2, r3, #4
 8004114:	188a      	adds	r2, r1, r2
 8004116:	3208      	adds	r2, #8
 8004118:	492d      	ldr	r1, [pc, #180]	@ (80041d0 <Meas_Init+0x1a4>)
 800411a:	6011      	str	r1, [r2, #0]
 800411c:	4a26      	ldr	r2, [pc, #152]	@ (80041b8 <Meas_Init+0x18c>)
 800411e:	011b      	lsls	r3, r3, #4
 8004120:	18d3      	adds	r3, r2, r3
 8004122:	330c      	adds	r3, #12
 8004124:	1c22      	adds	r2, r4, #0
 8004126:	701a      	strb	r2, [r3, #0]
  Measurements[offset++] = (MeasurementParameters) {PM_StartMeasurementWrapper, PM_IsMeasurementDoneWrapper, &MeasurementCtx.PM_measurementDone, MeasEnabled.PM_measurementEnabled};
 8004128:	197b      	adds	r3, r7, r5
 800412a:	781b      	ldrb	r3, [r3, #0]
 800412c:	197a      	adds	r2, r7, r5
 800412e:	1c59      	adds	r1, r3, #1
 8004130:	7011      	strb	r1, [r2, #0]
 8004132:	4a1d      	ldr	r2, [pc, #116]	@ (80041a8 <Meas_Init+0x17c>)
 8004134:	7894      	ldrb	r4, [r2, #2]
 8004136:	4a20      	ldr	r2, [pc, #128]	@ (80041b8 <Meas_Init+0x18c>)
 8004138:	0119      	lsls	r1, r3, #4
 800413a:	4826      	ldr	r0, [pc, #152]	@ (80041d4 <Meas_Init+0x1a8>)
 800413c:	5088      	str	r0, [r1, r2]
 800413e:	491e      	ldr	r1, [pc, #120]	@ (80041b8 <Meas_Init+0x18c>)
 8004140:	011a      	lsls	r2, r3, #4
 8004142:	188a      	adds	r2, r1, r2
 8004144:	3204      	adds	r2, #4
 8004146:	4924      	ldr	r1, [pc, #144]	@ (80041d8 <Meas_Init+0x1ac>)
 8004148:	6011      	str	r1, [r2, #0]
 800414a:	491b      	ldr	r1, [pc, #108]	@ (80041b8 <Meas_Init+0x18c>)
 800414c:	011a      	lsls	r2, r3, #4
 800414e:	188a      	adds	r2, r1, r2
 8004150:	3208      	adds	r2, #8
 8004152:	4922      	ldr	r1, [pc, #136]	@ (80041dc <Meas_Init+0x1b0>)
 8004154:	6011      	str	r1, [r2, #0]
 8004156:	4a18      	ldr	r2, [pc, #96]	@ (80041b8 <Meas_Init+0x18c>)
 8004158:	011b      	lsls	r3, r3, #4
 800415a:	18d3      	adds	r3, r2, r3
 800415c:	330c      	adds	r3, #12
 800415e:	1c22      	adds	r2, r4, #0
 8004160:	701a      	strb	r2, [r3, #0]
  Measurements[offset++] = (MeasurementParameters) {MIC_StartMeasurementWrapper, MIC_IsMeasurementDoneWrapper, &MeasurementCtx.MIC_measurementDone, MeasEnabled.MIC_measurementEnabled};
 8004162:	197b      	adds	r3, r7, r5
 8004164:	781b      	ldrb	r3, [r3, #0]
 8004166:	197a      	adds	r2, r7, r5
 8004168:	1c59      	adds	r1, r3, #1
 800416a:	7011      	strb	r1, [r2, #0]
 800416c:	4a0e      	ldr	r2, [pc, #56]	@ (80041a8 <Meas_Init+0x17c>)
 800416e:	78d4      	ldrb	r4, [r2, #3]
 8004170:	4a11      	ldr	r2, [pc, #68]	@ (80041b8 <Meas_Init+0x18c>)
 8004172:	0119      	lsls	r1, r3, #4
 8004174:	481a      	ldr	r0, [pc, #104]	@ (80041e0 <Meas_Init+0x1b4>)
 8004176:	5088      	str	r0, [r1, r2]
 8004178:	490f      	ldr	r1, [pc, #60]	@ (80041b8 <Meas_Init+0x18c>)
 800417a:	011a      	lsls	r2, r3, #4
 800417c:	188a      	adds	r2, r1, r2
 800417e:	3204      	adds	r2, #4
 8004180:	4918      	ldr	r1, [pc, #96]	@ (80041e4 <Meas_Init+0x1b8>)
 8004182:	6011      	str	r1, [r2, #0]
 8004184:	490c      	ldr	r1, [pc, #48]	@ (80041b8 <Meas_Init+0x18c>)
 8004186:	011a      	lsls	r2, r3, #4
 8004188:	188a      	adds	r2, r1, r2
 800418a:	3208      	adds	r2, #8
 800418c:	4916      	ldr	r1, [pc, #88]	@ (80041e8 <Meas_Init+0x1bc>)
 800418e:	6011      	str	r1, [r2, #0]
 8004190:	4a09      	ldr	r2, [pc, #36]	@ (80041b8 <Meas_Init+0x18c>)
 8004192:	011b      	lsls	r3, r3, #4
 8004194:	18d3      	adds	r3, r2, r3
 8004196:	330c      	adds	r3, #12
 8004198:	1c22      	adds	r2, r4, #0
 800419a:	701a      	strb	r2, [r3, #0]
}
 800419c:	46c0      	nop			@ (mov r8, r8)
 800419e:	46bd      	mov	sp, r7
 80041a0:	b014      	add	sp, #80	@ 0x50
 80041a2:	bdb0      	pop	{r4, r5, r7, pc}
 80041a4:	2000045c 	.word	0x2000045c
 80041a8:	20000458 	.word	0x20000458
 80041ac:	0801014c 	.word	0x0801014c
 80041b0:	08010168 	.word	0x08010168
 80041b4:	0801016c 	.word	0x0801016c
 80041b8:	20000418 	.word	0x20000418
 80041bc:	08003f95 	.word	0x08003f95
 80041c0:	08003fa5 	.word	0x08003fa5
 80041c4:	20000414 	.word	0x20000414
 80041c8:	08003fc5 	.word	0x08003fc5
 80041cc:	08003fd5 	.word	0x08003fd5
 80041d0:	20000415 	.word	0x20000415
 80041d4:	08003fed 	.word	0x08003fed
 80041d8:	08003ff7 	.word	0x08003ff7
 80041dc:	20000416 	.word	0x20000416
 80041e0:	08004003 	.word	0x08004003
 80041e4:	0800401d 	.word	0x0800401d
 80041e8:	20000417 	.word	0x20000417

080041ec <StartMeasurements>:

void StartMeasurements(void) {
 80041ec:	b580      	push	{r7, lr}
 80041ee:	af00      	add	r7, sp, #0
  for(CurrentMeasurementIndex = 0; CurrentMeasurementIndex < MEAS_MEASUREMENT_COUNT; CurrentMeasurementIndex++) {
 80041f0:	4b10      	ldr	r3, [pc, #64]	@ (8004234 <StartMeasurements+0x48>)
 80041f2:	2200      	movs	r2, #0
 80041f4:	701a      	strb	r2, [r3, #0]
 80041f6:	e015      	b.n	8004224 <StartMeasurements+0x38>
    if(Measurements[CurrentMeasurementIndex].enabled) {
 80041f8:	4b0e      	ldr	r3, [pc, #56]	@ (8004234 <StartMeasurements+0x48>)
 80041fa:	781b      	ldrb	r3, [r3, #0]
 80041fc:	4a0e      	ldr	r2, [pc, #56]	@ (8004238 <StartMeasurements+0x4c>)
 80041fe:	011b      	lsls	r3, r3, #4
 8004200:	18d3      	adds	r3, r2, r3
 8004202:	330c      	adds	r3, #12
 8004204:	781b      	ldrb	r3, [r3, #0]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d006      	beq.n	8004218 <StartMeasurements+0x2c>
      Measurements[CurrentMeasurementIndex].startFunc();
 800420a:	4b0a      	ldr	r3, [pc, #40]	@ (8004234 <StartMeasurements+0x48>)
 800420c:	781b      	ldrb	r3, [r3, #0]
 800420e:	001a      	movs	r2, r3
 8004210:	4b09      	ldr	r3, [pc, #36]	@ (8004238 <StartMeasurements+0x4c>)
 8004212:	0112      	lsls	r2, r2, #4
 8004214:	58d3      	ldr	r3, [r2, r3]
 8004216:	4798      	blx	r3
  for(CurrentMeasurementIndex = 0; CurrentMeasurementIndex < MEAS_MEASUREMENT_COUNT; CurrentMeasurementIndex++) {
 8004218:	4b06      	ldr	r3, [pc, #24]	@ (8004234 <StartMeasurements+0x48>)
 800421a:	781b      	ldrb	r3, [r3, #0]
 800421c:	3301      	adds	r3, #1
 800421e:	b2da      	uxtb	r2, r3
 8004220:	4b04      	ldr	r3, [pc, #16]	@ (8004234 <StartMeasurements+0x48>)
 8004222:	701a      	strb	r2, [r3, #0]
 8004224:	4b03      	ldr	r3, [pc, #12]	@ (8004234 <StartMeasurements+0x48>)
 8004226:	781b      	ldrb	r3, [r3, #0]
 8004228:	2b03      	cmp	r3, #3
 800422a:	d9e5      	bls.n	80041f8 <StartMeasurements+0xc>
    }
  }
}
 800422c:	46c0      	nop			@ (mov r8, r8)
 800422e:	46c0      	nop			@ (mov r8, r8)
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}
 8004234:	2000045d 	.word	0x2000045d
 8004238:	20000418 	.word	0x20000418

0800423c <ResetMeasurements>:

void ResetMeasurements(void) {
 800423c:	b580      	push	{r7, lr}
 800423e:	af00      	add	r7, sp, #0
  MeasurementCtx.humidityPerc = 0;
 8004240:	4b0b      	ldr	r3, [pc, #44]	@ (8004270 <ResetMeasurements+0x34>)
 8004242:	2200      	movs	r2, #0
 8004244:	601a      	str	r2, [r3, #0]
  MeasurementCtx.temperature = 0;
 8004246:	4b0a      	ldr	r3, [pc, #40]	@ (8004270 <ResetMeasurements+0x34>)
 8004248:	2200      	movs	r2, #0
 800424a:	605a      	str	r2, [r3, #4]
  MeasurementCtx.vocIndex = 0;
 800424c:	4b08      	ldr	r3, [pc, #32]	@ (8004270 <ResetMeasurements+0x34>)
 800424e:	2200      	movs	r2, #0
 8004250:	609a      	str	r2, [r3, #8]
  MeasurementCtx.HT_measurementDone = false;
 8004252:	4b07      	ldr	r3, [pc, #28]	@ (8004270 <ResetMeasurements+0x34>)
 8004254:	2200      	movs	r2, #0
 8004256:	731a      	strb	r2, [r3, #12]
  MeasurementCtx.VOC_measurementDone = false;
 8004258:	4b05      	ldr	r3, [pc, #20]	@ (8004270 <ResetMeasurements+0x34>)
 800425a:	2200      	movs	r2, #0
 800425c:	735a      	strb	r2, [r3, #13]
  MeasurementCtx.PM_measurementDone = false;
 800425e:	4b04      	ldr	r3, [pc, #16]	@ (8004270 <ResetMeasurements+0x34>)
 8004260:	2200      	movs	r2, #0
 8004262:	739a      	strb	r2, [r3, #14]
  MeasurementCtx.MIC_measurementDone = false;
 8004264:	4b02      	ldr	r3, [pc, #8]	@ (8004270 <ResetMeasurements+0x34>)
 8004266:	2200      	movs	r2, #0
 8004268:	73da      	strb	r2, [r3, #15]
}
 800426a:	46c0      	nop			@ (mov r8, r8)
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}
 8004270:	20000408 	.word	0x20000408

08004274 <MeasurementsCompleted>:

bool MeasurementsCompleted(void) {
 8004274:	b580      	push	{r7, lr}
 8004276:	af00      	add	r7, sp, #0
  for(CurrentMeasurementIndex = 0; CurrentMeasurementIndex < MEAS_MEASUREMENT_COUNT; CurrentMeasurementIndex++) {
 8004278:	4b18      	ldr	r3, [pc, #96]	@ (80042dc <MeasurementsCompleted+0x68>)
 800427a:	2200      	movs	r2, #0
 800427c:	701a      	strb	r2, [r3, #0]
 800427e:	e024      	b.n	80042ca <MeasurementsCompleted+0x56>
    if(Measurements[CurrentMeasurementIndex].enabled) {
 8004280:	4b16      	ldr	r3, [pc, #88]	@ (80042dc <MeasurementsCompleted+0x68>)
 8004282:	781b      	ldrb	r3, [r3, #0]
 8004284:	4a16      	ldr	r2, [pc, #88]	@ (80042e0 <MeasurementsCompleted+0x6c>)
 8004286:	011b      	lsls	r3, r3, #4
 8004288:	18d3      	adds	r3, r2, r3
 800428a:	330c      	adds	r3, #12
 800428c:	781b      	ldrb	r3, [r3, #0]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d015      	beq.n	80042be <MeasurementsCompleted+0x4a>
      if(Measurements[CurrentMeasurementIndex].doneFunc()) {
 8004292:	4b12      	ldr	r3, [pc, #72]	@ (80042dc <MeasurementsCompleted+0x68>)
 8004294:	781b      	ldrb	r3, [r3, #0]
 8004296:	4a12      	ldr	r2, [pc, #72]	@ (80042e0 <MeasurementsCompleted+0x6c>)
 8004298:	011b      	lsls	r3, r3, #4
 800429a:	18d3      	adds	r3, r2, r3
 800429c:	3304      	adds	r3, #4
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4798      	blx	r3
 80042a2:	1e03      	subs	r3, r0, #0
 80042a4:	d009      	beq.n	80042ba <MeasurementsCompleted+0x46>
        *Measurements[CurrentMeasurementIndex].doneFlag = true;
 80042a6:	4b0d      	ldr	r3, [pc, #52]	@ (80042dc <MeasurementsCompleted+0x68>)
 80042a8:	781b      	ldrb	r3, [r3, #0]
 80042aa:	4a0d      	ldr	r2, [pc, #52]	@ (80042e0 <MeasurementsCompleted+0x6c>)
 80042ac:	011b      	lsls	r3, r3, #4
 80042ae:	18d3      	adds	r3, r2, r3
 80042b0:	3308      	adds	r3, #8
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	2201      	movs	r2, #1
 80042b6:	701a      	strb	r2, [r3, #0]
 80042b8:	e001      	b.n	80042be <MeasurementsCompleted+0x4a>
      }else {
        return false;
 80042ba:	2300      	movs	r3, #0
 80042bc:	e00a      	b.n	80042d4 <MeasurementsCompleted+0x60>
  for(CurrentMeasurementIndex = 0; CurrentMeasurementIndex < MEAS_MEASUREMENT_COUNT; CurrentMeasurementIndex++) {
 80042be:	4b07      	ldr	r3, [pc, #28]	@ (80042dc <MeasurementsCompleted+0x68>)
 80042c0:	781b      	ldrb	r3, [r3, #0]
 80042c2:	3301      	adds	r3, #1
 80042c4:	b2da      	uxtb	r2, r3
 80042c6:	4b05      	ldr	r3, [pc, #20]	@ (80042dc <MeasurementsCompleted+0x68>)
 80042c8:	701a      	strb	r2, [r3, #0]
 80042ca:	4b04      	ldr	r3, [pc, #16]	@ (80042dc <MeasurementsCompleted+0x68>)
 80042cc:	781b      	ldrb	r3, [r3, #0]
 80042ce:	2b03      	cmp	r3, #3
 80042d0:	d9d6      	bls.n	8004280 <MeasurementsCompleted+0xc>
      }
    }
  }
  return true;
 80042d2:	2301      	movs	r3, #1
}
 80042d4:	0018      	movs	r0, r3
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}
 80042da:	46c0      	nop			@ (mov r8, r8)
 80042dc:	2000045d 	.word	0x2000045d
 80042e0:	20000418 	.word	0x20000418

080042e4 <Meas_Upkeep>:

void Meas_Upkeep(void) {
 80042e4:	b5b0      	push	{r4, r5, r7, lr}
 80042e6:	b084      	sub	sp, #16
 80042e8:	af04      	add	r7, sp, #16
  switch(MeasState) {
 80042ea:	4b2a      	ldr	r3, [pc, #168]	@ (8004394 <Meas_Upkeep+0xb0>)
 80042ec:	781b      	ldrb	r3, [r3, #0]
 80042ee:	2b05      	cmp	r3, #5
 80042f0:	d848      	bhi.n	8004384 <Meas_Upkeep+0xa0>
 80042f2:	009a      	lsls	r2, r3, #2
 80042f4:	4b28      	ldr	r3, [pc, #160]	@ (8004398 <Meas_Upkeep+0xb4>)
 80042f6:	18d3      	adds	r3, r2, r3
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	469f      	mov	pc, r3
  case MEAS_STATE_OFF:
    Debug("Measurements are turned off.");
 80042fc:	4a27      	ldr	r2, [pc, #156]	@ (800439c <Meas_Upkeep+0xb8>)
 80042fe:	4b28      	ldr	r3, [pc, #160]	@ (80043a0 <Meas_Upkeep+0xbc>)
 8004300:	0019      	movs	r1, r3
 8004302:	2003      	movs	r0, #3
 8004304:	f002 fa28 	bl	8006758 <CreateLine>
    break;
 8004308:	e041      	b.n	800438e <Meas_Upkeep+0xaa>

  case MEAS_STATE_INIT:
    ResetMeasurements();
 800430a:	f7ff ff97 	bl	800423c <ResetMeasurements>
    MeasState = MEAS_STATE_START_MEASUREMENTS;
 800430e:	4b21      	ldr	r3, [pc, #132]	@ (8004394 <Meas_Upkeep+0xb0>)
 8004310:	2201      	movs	r2, #1
 8004312:	701a      	strb	r2, [r3, #0]
    break;
 8004314:	e03b      	b.n	800438e <Meas_Upkeep+0xaa>

  case MEAS_STATE_START_MEASUREMENTS:
    StartMeasurements();
 8004316:	f7ff ff69 	bl	80041ec <StartMeasurements>
    MeasState = MEAS_STATE_WAIT_FOR_COMPLETION;
 800431a:	4b1e      	ldr	r3, [pc, #120]	@ (8004394 <Meas_Upkeep+0xb0>)
 800431c:	2202      	movs	r2, #2
 800431e:	701a      	strb	r2, [r3, #0]
   break;
 8004320:	e035      	b.n	800438e <Meas_Upkeep+0xaa>

  case MEAS_STATE_WAIT_FOR_COMPLETION:
    if(MeasurementsCompleted()) {
 8004322:	f7ff ffa7 	bl	8004274 <MeasurementsCompleted>
 8004326:	1e03      	subs	r3, r0, #0
 8004328:	d030      	beq.n	800438c <Meas_Upkeep+0xa8>
      MeasState = MEAS_STATE_PROCESS_RESULTS;
 800432a:	4b1a      	ldr	r3, [pc, #104]	@ (8004394 <Meas_Upkeep+0xb0>)
 800432c:	2203      	movs	r2, #3
 800432e:	701a      	strb	r2, [r3, #0]
    }
    break;
 8004330:	e02c      	b.n	800438c <Meas_Upkeep+0xa8>

  case MEAS_STATE_PROCESS_RESULTS:

    // TODO: Return values and let gadget handle with too high humidity and the sensor values
    // TODO: Check if all measurements are ready for the next measurement before switching states. Only check for the enabled measurements.
    Debug("Processing results.");
 8004332:	4a1c      	ldr	r2, [pc, #112]	@ (80043a4 <Meas_Upkeep+0xc0>)
 8004334:	4b1a      	ldr	r3, [pc, #104]	@ (80043a0 <Meas_Upkeep+0xbc>)
 8004336:	0019      	movs	r1, r3
 8004338:	2003      	movs	r0, #3
 800433a:	f002 fa0d 	bl	8006758 <CreateLine>
    Debug("SGP40 index value: %d", MeasurementCtx.vocIndex);
 800433e:	4b1a      	ldr	r3, [pc, #104]	@ (80043a8 <Meas_Upkeep+0xc4>)
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	4a1a      	ldr	r2, [pc, #104]	@ (80043ac <Meas_Upkeep+0xc8>)
 8004344:	4916      	ldr	r1, [pc, #88]	@ (80043a0 <Meas_Upkeep+0xbc>)
 8004346:	2003      	movs	r0, #3
 8004348:	f002 fa06 	bl	8006758 <CreateLine>
    Debug("Humidity value: %3.2f%%, Temperature value: %3.2fC", MeasurementCtx.humidityPerc, MeasurementCtx.temperature);
 800434c:	4b16      	ldr	r3, [pc, #88]	@ (80043a8 <Meas_Upkeep+0xc4>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	1c18      	adds	r0, r3, #0
 8004352:	f7ff f805 	bl	8003360 <__aeabi_f2d>
 8004356:	0004      	movs	r4, r0
 8004358:	000d      	movs	r5, r1
 800435a:	4b13      	ldr	r3, [pc, #76]	@ (80043a8 <Meas_Upkeep+0xc4>)
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	1c18      	adds	r0, r3, #0
 8004360:	f7fe fffe 	bl	8003360 <__aeabi_f2d>
 8004364:	0002      	movs	r2, r0
 8004366:	000b      	movs	r3, r1
 8004368:	4811      	ldr	r0, [pc, #68]	@ (80043b0 <Meas_Upkeep+0xcc>)
 800436a:	490d      	ldr	r1, [pc, #52]	@ (80043a0 <Meas_Upkeep+0xbc>)
 800436c:	9202      	str	r2, [sp, #8]
 800436e:	9303      	str	r3, [sp, #12]
 8004370:	9400      	str	r4, [sp, #0]
 8004372:	9501      	str	r5, [sp, #4]
 8004374:	0002      	movs	r2, r0
 8004376:	2003      	movs	r0, #3
 8004378:	f002 f9ee 	bl	8006758 <CreateLine>
    MeasState = MEAS_STATE_INIT;
 800437c:	4b05      	ldr	r3, [pc, #20]	@ (8004394 <Meas_Upkeep+0xb0>)
 800437e:	2200      	movs	r2, #0
 8004380:	701a      	strb	r2, [r3, #0]
    break;
 8004382:	e004      	b.n	800438e <Meas_Upkeep+0xaa>

  default:
    // Handle unexpected state
    MeasState = MEAS_STATE_INIT;
 8004384:	4b03      	ldr	r3, [pc, #12]	@ (8004394 <Meas_Upkeep+0xb0>)
 8004386:	2200      	movs	r2, #0
 8004388:	701a      	strb	r2, [r3, #0]
    break;
 800438a:	e000      	b.n	800438e <Meas_Upkeep+0xaa>
    break;
 800438c:	46c0      	nop			@ (mov r8, r8)
  }
}
 800438e:	46c0      	nop			@ (mov r8, r8)
 8004390:	46bd      	mov	sp, r7
 8004392:	bdb0      	pop	{r4, r5, r7, pc}
 8004394:	2000045c 	.word	0x2000045c
 8004398:	080106bc 	.word	0x080106bc
 800439c:	08010188 	.word	0x08010188
 80043a0:	080101a8 	.word	0x080101a8
 80043a4:	080101ac 	.word	0x080101ac
 80043a8:	20000408 	.word	0x20000408
 80043ac:	080101c0 	.word	0x080101c0
 80043b0:	080101d8 	.word	0x080101d8

080043b4 <Meas_SetEnabledSensors>:

void Meas_SetEnabledSensors(EnabledMeasurements enabled) {
 80043b4:	b590      	push	{r4, r7, lr}
 80043b6:	b085      	sub	sp, #20
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	1d3b      	adds	r3, r7, #4
 80043bc:	6018      	str	r0, [r3, #0]
  uint8_t offset = 0;
 80043be:	240f      	movs	r4, #15
 80043c0:	193b      	adds	r3, r7, r4
 80043c2:	2200      	movs	r2, #0
 80043c4:	701a      	strb	r2, [r3, #0]
  MeasEnabled = enabled;
 80043c6:	4b20      	ldr	r3, [pc, #128]	@ (8004448 <Meas_SetEnabledSensors+0x94>)
 80043c8:	1d3a      	adds	r2, r7, #4
 80043ca:	6812      	ldr	r2, [r2, #0]
 80043cc:	601a      	str	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.HT_measurementEnabled;
 80043ce:	193b      	adds	r3, r7, r4
 80043d0:	781b      	ldrb	r3, [r3, #0]
 80043d2:	193a      	adds	r2, r7, r4
 80043d4:	1c59      	adds	r1, r3, #1
 80043d6:	7011      	strb	r1, [r2, #0]
 80043d8:	0018      	movs	r0, r3
 80043da:	1d3b      	adds	r3, r7, #4
 80043dc:	7819      	ldrb	r1, [r3, #0]
 80043de:	4a1b      	ldr	r2, [pc, #108]	@ (800444c <Meas_SetEnabledSensors+0x98>)
 80043e0:	0103      	lsls	r3, r0, #4
 80043e2:	18d3      	adds	r3, r2, r3
 80043e4:	330c      	adds	r3, #12
 80043e6:	1c0a      	adds	r2, r1, #0
 80043e8:	701a      	strb	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.VOC_measurementEnabled;
 80043ea:	193b      	adds	r3, r7, r4
 80043ec:	781b      	ldrb	r3, [r3, #0]
 80043ee:	193a      	adds	r2, r7, r4
 80043f0:	1c59      	adds	r1, r3, #1
 80043f2:	7011      	strb	r1, [r2, #0]
 80043f4:	0018      	movs	r0, r3
 80043f6:	1d3b      	adds	r3, r7, #4
 80043f8:	7859      	ldrb	r1, [r3, #1]
 80043fa:	4a14      	ldr	r2, [pc, #80]	@ (800444c <Meas_SetEnabledSensors+0x98>)
 80043fc:	0103      	lsls	r3, r0, #4
 80043fe:	18d3      	adds	r3, r2, r3
 8004400:	330c      	adds	r3, #12
 8004402:	1c0a      	adds	r2, r1, #0
 8004404:	701a      	strb	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.PM_measurementEnabled;
 8004406:	193b      	adds	r3, r7, r4
 8004408:	781b      	ldrb	r3, [r3, #0]
 800440a:	193a      	adds	r2, r7, r4
 800440c:	1c59      	adds	r1, r3, #1
 800440e:	7011      	strb	r1, [r2, #0]
 8004410:	0018      	movs	r0, r3
 8004412:	1d3b      	adds	r3, r7, #4
 8004414:	7899      	ldrb	r1, [r3, #2]
 8004416:	4a0d      	ldr	r2, [pc, #52]	@ (800444c <Meas_SetEnabledSensors+0x98>)
 8004418:	0103      	lsls	r3, r0, #4
 800441a:	18d3      	adds	r3, r2, r3
 800441c:	330c      	adds	r3, #12
 800441e:	1c0a      	adds	r2, r1, #0
 8004420:	701a      	strb	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.MIC_measurementEnabled;
 8004422:	193b      	adds	r3, r7, r4
 8004424:	781b      	ldrb	r3, [r3, #0]
 8004426:	193a      	adds	r2, r7, r4
 8004428:	1c59      	adds	r1, r3, #1
 800442a:	7011      	strb	r1, [r2, #0]
 800442c:	0018      	movs	r0, r3
 800442e:	1d3b      	adds	r3, r7, #4
 8004430:	78d9      	ldrb	r1, [r3, #3]
 8004432:	4a06      	ldr	r2, [pc, #24]	@ (800444c <Meas_SetEnabledSensors+0x98>)
 8004434:	0103      	lsls	r3, r0, #4
 8004436:	18d3      	adds	r3, r2, r3
 8004438:	330c      	adds	r3, #12
 800443a:	1c0a      	adds	r2, r1, #0
 800443c:	701a      	strb	r2, [r3, #0]
}
 800443e:	46c0      	nop			@ (mov r8, r8)
 8004440:	46bd      	mov	sp, r7
 8004442:	b005      	add	sp, #20
 8004444:	bd90      	pop	{r4, r7, pc}
 8004446:	46c0      	nop			@ (mov r8, r8)
 8004448:	20000458 	.word	0x20000458
 800444c:	20000418 	.word	0x20000418

08004450 <MIC_Init>:
static volatile uint32_t StartupDoneTime = 0;
>>>>>>> main
static volatile bool StartUpDone = false;
static volatile bool DataReady = false;
static uint8_t MIC_InitRetries = 0;
static uint8_t MIC_MaxRetries = 3;

void MIC_Init(I2S_HandleTypeDef* i2SHandle) {
 80042e8:	b5b0      	push	{r4, r5, r7, lr}
 80042ea:	b084      	sub	sp, #16
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  I2SHandle = i2SHandle;
 80042f0:	4b42      	ldr	r3, [pc, #264]	@ (80043fc <MIC_Init+0x114>)
 80042f2:	687a      	ldr	r2, [r7, #4]
 80042f4:	601a      	str	r2, [r3, #0]
  if (I2SHandle == NULL) {
 80042f6:	4b41      	ldr	r3, [pc, #260]	@ (80043fc <MIC_Init+0x114>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d106      	bne.n	800430c <MIC_Init+0x24>
     Error("Microphone is not initialised.");
 80042fe:	4a40      	ldr	r2, [pc, #256]	@ (8004400 <MIC_Init+0x118>)
 8004300:	4b40      	ldr	r3, [pc, #256]	@ (8004404 <MIC_Init+0x11c>)
 8004302:	0019      	movs	r1, r3
 8004304:	2001      	movs	r0, #1
 8004306:	f002 f89f 	bl	8006448 <CreateLine>
     return;
 800430a:	e073      	b.n	80043f4 <MIC_Init+0x10c>
  }
  // Start data receiving to check if MIC is connected.
  HAL_StatusTypeDef status = HAL_I2S_Receive_DMA(I2SHandle, (uint16_t*)AudioRxBuffer, Samples);
 800430c:	4b3b      	ldr	r3, [pc, #236]	@ (80043fc <MIC_Init+0x114>)
 800430e:	6818      	ldr	r0, [r3, #0]
 8004310:	4b3d      	ldr	r3, [pc, #244]	@ (8004408 <MIC_Init+0x120>)
 8004312:	881a      	ldrh	r2, [r3, #0]
 8004314:	250f      	movs	r5, #15
 8004316:	197c      	adds	r4, r7, r5
 8004318:	4b3c      	ldr	r3, [pc, #240]	@ (800440c <MIC_Init+0x124>)
 800431a:	0019      	movs	r1, r3
 800431c:	f005 fc16 	bl	8009b4c <HAL_I2S_Receive_DMA>
 8004320:	0003      	movs	r3, r0
 8004322:	7023      	strb	r3, [r4, #0]
  if(status == HAL_ERROR) {
 8004324:	197b      	adds	r3, r7, r5
 8004326:	781b      	ldrb	r3, [r3, #0]
 8004328:	2b01      	cmp	r3, #1
 800432a:	d111      	bne.n	8004350 <MIC_Init+0x68>
    Error("Microphone NOT initialised.");
 800432c:	4a38      	ldr	r2, [pc, #224]	@ (8004410 <MIC_Init+0x128>)
 800432e:	4b35      	ldr	r3, [pc, #212]	@ (8004404 <MIC_Init+0x11c>)
 8004330:	0019      	movs	r1, r3
 8004332:	2001      	movs	r0, #1
 8004334:	f002 f888 	bl	8006448 <CreateLine>
    // Setting LED to RED to show mic is not working.
    TIM3 -> CCR1 = 2000;
 8004338:	4b36      	ldr	r3, [pc, #216]	@ (8004414 <MIC_Init+0x12c>)
 800433a:	22fa      	movs	r2, #250	@ 0xfa
 800433c:	00d2      	lsls	r2, r2, #3
 800433e:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM3 -> CCR2 = 4000;
 8004340:	4b34      	ldr	r3, [pc, #208]	@ (8004414 <MIC_Init+0x12c>)
 8004342:	22fa      	movs	r2, #250	@ 0xfa
 8004344:	0112      	lsls	r2, r2, #4
 8004346:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM3 -> CCR3 = 4000;
 8004348:	4b32      	ldr	r3, [pc, #200]	@ (8004414 <MIC_Init+0x12c>)
 800434a:	22fa      	movs	r2, #250	@ 0xfa
 800434c:	0112      	lsls	r2, r2, #4
 800434e:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if(status == HAL_BUSY) {
 8004350:	230f      	movs	r3, #15
 8004352:	18fb      	adds	r3, r7, r3
 8004354:	781b      	ldrb	r3, [r3, #0]
 8004356:	2b02      	cmp	r3, #2
 8004358:	d135      	bne.n	80043c6 <MIC_Init+0xde>
    Debug("Microphone is BUSY, retrying.");
 800435a:	4a2f      	ldr	r2, [pc, #188]	@ (8004418 <MIC_Init+0x130>)
 800435c:	4b2f      	ldr	r3, [pc, #188]	@ (800441c <MIC_Init+0x134>)
 800435e:	0019      	movs	r1, r3
 8004360:	2003      	movs	r0, #3
 8004362:	f002 f871 	bl	8006448 <CreateLine>
    // Setting LED to YELLOW to show mic is busy.
    // CCR1 = Red, CCR2 = Green, CCR3 = Blue.
    TIM3 -> CCR1 = 2000;
 8004366:	4b2b      	ldr	r3, [pc, #172]	@ (8004414 <MIC_Init+0x12c>)
 8004368:	22fa      	movs	r2, #250	@ 0xfa
 800436a:	00d2      	lsls	r2, r2, #3
 800436c:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM3 -> CCR2 = 2000;
 800436e:	4b29      	ldr	r3, [pc, #164]	@ (8004414 <MIC_Init+0x12c>)
 8004370:	22fa      	movs	r2, #250	@ 0xfa
 8004372:	00d2      	lsls	r2, r2, #3
 8004374:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM3 -> CCR3 = 4000;
 8004376:	4b27      	ldr	r3, [pc, #156]	@ (8004414 <MIC_Init+0x12c>)
 8004378:	22fa      	movs	r2, #250	@ 0xfa
 800437a:	0112      	lsls	r2, r2, #4
 800437c:	63da      	str	r2, [r3, #60]	@ 0x3c
    if(MIC_InitRetries <= MIC_MaxRetries) {
 800437e:	4b28      	ldr	r3, [pc, #160]	@ (8004420 <MIC_Init+0x138>)
 8004380:	781a      	ldrb	r2, [r3, #0]
 8004382:	4b28      	ldr	r3, [pc, #160]	@ (8004424 <MIC_Init+0x13c>)
 8004384:	781b      	ldrb	r3, [r3, #0]
 8004386:	429a      	cmp	r2, r3
 8004388:	d80a      	bhi.n	80043a0 <MIC_Init+0xb8>
      MIC_InitRetries += 1;
 800438a:	4b25      	ldr	r3, [pc, #148]	@ (8004420 <MIC_Init+0x138>)
 800438c:	781b      	ldrb	r3, [r3, #0]
 800438e:	3301      	adds	r3, #1
 8004390:	b2da      	uxtb	r2, r3
 8004392:	4b23      	ldr	r3, [pc, #140]	@ (8004420 <MIC_Init+0x138>)
 8004394:	701a      	strb	r2, [r3, #0]
      // Calling function again.
      MIC_Init(i2SHandle);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	0018      	movs	r0, r3
 800439a:	f7ff ffa5 	bl	80042e8 <MIC_Init>
 800439e:	e024      	b.n	80043ea <MIC_Init+0x102>
    }else {
      Debug("Microphone is BUSY and is NOT working after retrying.");
 80043a0:	4a21      	ldr	r2, [pc, #132]	@ (8004428 <MIC_Init+0x140>)
 80043a2:	4b1e      	ldr	r3, [pc, #120]	@ (800441c <MIC_Init+0x134>)
 80043a4:	0019      	movs	r1, r3
 80043a6:	2003      	movs	r0, #3
 80043a8:	f002 f84e 	bl	8006448 <CreateLine>
      // Setting LED to RED to show mic is not working.
      // CCR1 = Red, CCR2 = Green, CCR3 = Blue.
      TIM3 -> CCR1 = 2000;
 80043ac:	4b19      	ldr	r3, [pc, #100]	@ (8004414 <MIC_Init+0x12c>)
 80043ae:	22fa      	movs	r2, #250	@ 0xfa
 80043b0:	00d2      	lsls	r2, r2, #3
 80043b2:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = 4000;
 80043b4:	4b17      	ldr	r3, [pc, #92]	@ (8004414 <MIC_Init+0x12c>)
 80043b6:	22fa      	movs	r2, #250	@ 0xfa
 80043b8:	0112      	lsls	r2, r2, #4
 80043ba:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = 4000;
 80043bc:	4b15      	ldr	r3, [pc, #84]	@ (8004414 <MIC_Init+0x12c>)
 80043be:	22fa      	movs	r2, #250	@ 0xfa
 80043c0:	0112      	lsls	r2, r2, #4
 80043c2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80043c4:	e011      	b.n	80043ea <MIC_Init+0x102>
    }
  }else {
    Debug("Microphone initialised.");
 80043c6:	4a19      	ldr	r2, [pc, #100]	@ (800442c <MIC_Init+0x144>)
 80043c8:	4b14      	ldr	r3, [pc, #80]	@ (800441c <MIC_Init+0x134>)
 80043ca:	0019      	movs	r1, r3
 80043cc:	2003      	movs	r0, #3
 80043ce:	f002 f83b 	bl	8006448 <CreateLine>
    // Setting LED to GREEN to show mic is working.
    // CCR1 = Red, CCR2 = Green, CCR3 = Blue.
    TIM3 -> CCR1 = 4000;
 80043d2:	4b10      	ldr	r3, [pc, #64]	@ (8004414 <MIC_Init+0x12c>)
 80043d4:	22fa      	movs	r2, #250	@ 0xfa
 80043d6:	0112      	lsls	r2, r2, #4
 80043d8:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM3 -> CCR2 = 2000;
 80043da:	4b0e      	ldr	r3, [pc, #56]	@ (8004414 <MIC_Init+0x12c>)
 80043dc:	22fa      	movs	r2, #250	@ 0xfa
 80043de:	00d2      	lsls	r2, r2, #3
 80043e0:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM3 -> CCR3 = 4000;
 80043e2:	4b0c      	ldr	r3, [pc, #48]	@ (8004414 <MIC_Init+0x12c>)
 80043e4:	22fa      	movs	r2, #250	@ 0xfa
 80043e6:	0112      	lsls	r2, r2, #4
 80043e8:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  // Stop DMA
  HAL_I2S_DMAStop(I2SHandle);
 80043ea:	4b04      	ldr	r3, [pc, #16]	@ (80043fc <MIC_Init+0x114>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	0018      	movs	r0, r3
 80043f0:	f005 fc6e 	bl	8009cd0 <HAL_I2S_DMAStop>
}
 80043f4:	46bd      	mov	sp, r7
 80043f6:	b004      	add	sp, #16
 80043f8:	bdb0      	pop	{r4, r5, r7, pc}
 80043fa:	46c0      	nop			@ (mov r8, r8)
 80043fc:	20000454 	.word	0x20000454
 8004400:	0800ffcc 	.word	0x0800ffcc
 8004404:	0800ffec 	.word	0x0800ffec
 8004408:	20000008 	.word	0x20000008
 800440c:	20000458 	.word	0x20000458
 8004410:	0800fff0 	.word	0x0800fff0
 8004414:	40000400 	.word	0x40000400
 8004418:	0801000c 	.word	0x0801000c
 800441c:	0801002c 	.word	0x0801002c
 8004420:	20000862 	.word	0x20000862
 8004424:	2000000a 	.word	0x2000000a
 8004428:	08010030 	.word	0x08010030
 800442c:	08010068 	.word	0x08010068

<<<<<<< HEAD
08004430 <UpdateSampleRate>:
=======
void MIC_Init(I2S_HandleTypeDef* i2SHandle) { I2SHandle = i2SHandle; }
 8004450:	b580      	push	{r7, lr}
 8004452:	b082      	sub	sp, #8
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
 8004458:	4b03      	ldr	r3, [pc, #12]	@ (8004468 <MIC_Init+0x18>)
 800445a:	687a      	ldr	r2, [r7, #4]
 800445c:	601a      	str	r2, [r3, #0]
 800445e:	46c0      	nop			@ (mov r8, r8)
 8004460:	46bd      	mov	sp, r7
 8004462:	b002      	add	sp, #8
 8004464:	bd80      	pop	{r7, pc}
 8004466:	46c0      	nop			@ (mov r8, r8)
 8004468:	20000460 	.word	0x20000460

0800446c <UpdateSampleRate>:
>>>>>>> main
//  for(uint8_t i = 0;i < NR_SAMPLES_128; i++) {
//    FFTResult[i] *= energyCorrectionFactor;
//  }
//}

static void UpdateSampleRate(uint32_t sampleRate) {
<<<<<<< HEAD
 8004430:	b580      	push	{r7, lr}
 8004432:	b082      	sub	sp, #8
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  if (I2SHandle->Init.AudioFreq == sampleRate) {
 8004438:	4b0c      	ldr	r3, [pc, #48]	@ (800446c <UpdateSampleRate+0x3c>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	695b      	ldr	r3, [r3, #20]
 800443e:	687a      	ldr	r2, [r7, #4]
 8004440:	429a      	cmp	r2, r3
 8004442:	d00e      	beq.n	8004462 <UpdateSampleRate+0x32>
=======
 800446c:	b580      	push	{r7, lr}
 800446e:	b082      	sub	sp, #8
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  if (I2SHandle->Init.AudioFreq == sampleRate) {
 8004474:	4b0c      	ldr	r3, [pc, #48]	@ (80044a8 <UpdateSampleRate+0x3c>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	695b      	ldr	r3, [r3, #20]
 800447a:	687a      	ldr	r2, [r7, #4]
 800447c:	429a      	cmp	r2, r3
 800447e:	d00e      	beq.n	800449e <UpdateSampleRate+0x32>
>>>>>>> main
    return;
  }
  HAL_I2S_DeInit(I2SHandle);
<<<<<<< HEAD
 8004444:	4b09      	ldr	r3, [pc, #36]	@ (800446c <UpdateSampleRate+0x3c>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	0018      	movs	r0, r3
 800444a:	f005 fb53 	bl	8009af4 <HAL_I2S_DeInit>
  I2SHandle->Init.AudioFreq = sampleRate;
 800444e:	4b07      	ldr	r3, [pc, #28]	@ (800446c <UpdateSampleRate+0x3c>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	687a      	ldr	r2, [r7, #4]
 8004454:	615a      	str	r2, [r3, #20]
  HAL_I2S_Init(I2SHandle);
 8004456:	4b05      	ldr	r3, [pc, #20]	@ (800446c <UpdateSampleRate+0x3c>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	0018      	movs	r0, r3
 800445c:	f005 fa58 	bl	8009910 <HAL_I2S_Init>
 8004460:	e000      	b.n	8004464 <UpdateSampleRate+0x34>
    return;
 8004462:	46c0      	nop			@ (mov r8, r8)
}
 8004464:	46bd      	mov	sp, r7
 8004466:	b002      	add	sp, #8
 8004468:	bd80      	pop	{r7, pc}
 800446a:	46c0      	nop			@ (mov r8, r8)
 800446c:	20000454 	.word	0x20000454

08004470 <ConvertAudio>:

static uint32_t ConvertAudio(uint16_t* data) {
 8004470:	b580      	push	{r7, lr}
 8004472:	b084      	sub	sp, #16
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  uint32_t audioValue = data[1] | (data[0] << 16);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	3302      	adds	r3, #2
 800447c:	881b      	ldrh	r3, [r3, #0]
 800447e:	001a      	movs	r2, r3
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	881b      	ldrh	r3, [r3, #0]
 8004484:	041b      	lsls	r3, r3, #16
 8004486:	4313      	orrs	r3, r2
 8004488:	60fb      	str	r3, [r7, #12]
  audioValue = audioValue >> 7;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	09db      	lsrs	r3, r3, #7
 800448e:	60fb      	str	r3, [r7, #12]
  return audioValue;
 8004490:	68fb      	ldr	r3, [r7, #12]
}
 8004492:	0018      	movs	r0, r3
 8004494:	46bd      	mov	sp, r7
 8004496:	b004      	add	sp, #16
 8004498:	bd80      	pop	{r7, pc}
	...

0800449c <MIC_Start>:

void MIC_Start(uint32_t sampleRate, uint16_t nrSamples) {
 800449c:	b590      	push	{r4, r7, lr}
 800449e:	b085      	sub	sp, #20
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
 80044a4:	000a      	movs	r2, r1
 80044a6:	1cbb      	adds	r3, r7, #2
 80044a8:	801a      	strh	r2, [r3, #0]
  if (I2SHandle == NULL) {
 80044aa:	4b1d      	ldr	r3, [pc, #116]	@ (8004520 <MIC_Start+0x84>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d106      	bne.n	80044c0 <MIC_Start+0x24>
    Error("Microphone is not initialised.");
 80044b2:	4a1c      	ldr	r2, [pc, #112]	@ (8004524 <MIC_Start+0x88>)
 80044b4:	4b1c      	ldr	r3, [pc, #112]	@ (8004528 <MIC_Start+0x8c>)
 80044b6:	0019      	movs	r1, r3
 80044b8:	2001      	movs	r0, #1
 80044ba:	f001 ffc5 	bl	8006448 <CreateLine>
    return;
 80044be:	e02c      	b.n	800451a <MIC_Start+0x7e>
  }
  Debug("In mic start");
 80044c0:	4a1a      	ldr	r2, [pc, #104]	@ (800452c <MIC_Start+0x90>)
 80044c2:	4b1b      	ldr	r3, [pc, #108]	@ (8004530 <MIC_Start+0x94>)
 80044c4:	0019      	movs	r1, r3
 80044c6:	2003      	movs	r0, #3
 80044c8:	f001 ffbe 	bl	8006448 <CreateLine>
  UpdateSampleRate(sampleRate);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	0018      	movs	r0, r3
 80044d0:	f7ff ffae 	bl	8004430 <UpdateSampleRate>
  Samples = (NrOfSamples)nrSamples;
 80044d4:	4b17      	ldr	r3, [pc, #92]	@ (8004534 <MIC_Start+0x98>)
 80044d6:	1cba      	adds	r2, r7, #2
 80044d8:	8812      	ldrh	r2, [r2, #0]
 80044da:	801a      	strh	r2, [r3, #0]

  StartTime = GetCurrentHalTicks();
 80044dc:	f002 f840 	bl	8006560 <GetCurrentHalTicks>
 80044e0:	0002      	movs	r2, r0
 80044e2:	4b15      	ldr	r3, [pc, #84]	@ (8004538 <MIC_Start+0x9c>)
 80044e4:	601a      	str	r2, [r3, #0]
  StartupDoneTime = StartTime + 20;
 80044e6:	4b14      	ldr	r3, [pc, #80]	@ (8004538 <MIC_Start+0x9c>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	3314      	adds	r3, #20
 80044ec:	001a      	movs	r2, r3
 80044ee:	4b13      	ldr	r3, [pc, #76]	@ (800453c <MIC_Start+0xa0>)
 80044f0:	601a      	str	r2, [r3, #0]
  StartUpDone = false;
 80044f2:	4b13      	ldr	r3, [pc, #76]	@ (8004540 <MIC_Start+0xa4>)
 80044f4:	2200      	movs	r2, #0
 80044f6:	701a      	strb	r2, [r3, #0]
  DataReady = false;
 80044f8:	4b12      	ldr	r3, [pc, #72]	@ (8004544 <MIC_Start+0xa8>)
 80044fa:	2200      	movs	r2, #0
 80044fc:	701a      	strb	r2, [r3, #0]

  HAL_StatusTypeDef status = HAL_I2S_Receive_DMA(I2SHandle, (uint16_t*)AudioRxBuffer, Samples >> 1);
 80044fe:	4b08      	ldr	r3, [pc, #32]	@ (8004520 <MIC_Start+0x84>)
 8004500:	6818      	ldr	r0, [r3, #0]
 8004502:	4b0c      	ldr	r3, [pc, #48]	@ (8004534 <MIC_Start+0x98>)
 8004504:	881b      	ldrh	r3, [r3, #0]
 8004506:	085b      	lsrs	r3, r3, #1
 8004508:	b29a      	uxth	r2, r3
 800450a:	230f      	movs	r3, #15
 800450c:	18fc      	adds	r4, r7, r3
 800450e:	4b0e      	ldr	r3, [pc, #56]	@ (8004548 <MIC_Start+0xac>)
 8004510:	0019      	movs	r1, r3
 8004512:	f005 fb1b 	bl	8009b4c <HAL_I2S_Receive_DMA>
 8004516:	0003      	movs	r3, r0
 8004518:	7023      	strb	r3, [r4, #0]
//      HAL_I2S_Receive_DMA(I2SHandle, (uint16_t*)AudioRxBuffer,
//          Samples >> 1); //>>1 because reading half word

//  Info("Status %d", status);

}
 800451a:	46bd      	mov	sp, r7
 800451c:	b005      	add	sp, #20
 800451e:	bd90      	pop	{r4, r7, pc}
 8004520:	20000454 	.word	0x20000454
 8004524:	0800ffcc 	.word	0x0800ffcc
 8004528:	0800ffec 	.word	0x0800ffec
 800452c:	08010080 	.word	0x08010080
 8004530:	0801002c 	.word	0x0801002c
 8004534:	20000008 	.word	0x20000008
 8004538:	20000858 	.word	0x20000858
 800453c:	2000085c 	.word	0x2000085c
 8004540:	20000860 	.word	0x20000860
 8004544:	20000861 	.word	0x20000861
 8004548:	20000458 	.word	0x20000458

0800454c <MIC_Print>:
=======
 8004480:	4b09      	ldr	r3, [pc, #36]	@ (80044a8 <UpdateSampleRate+0x3c>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	0018      	movs	r0, r3
 8004486:	f005 fc97 	bl	8009db8 <HAL_I2S_DeInit>
  I2SHandle->Init.AudioFreq = sampleRate;
 800448a:	4b07      	ldr	r3, [pc, #28]	@ (80044a8 <UpdateSampleRate+0x3c>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	687a      	ldr	r2, [r7, #4]
 8004490:	615a      	str	r2, [r3, #20]
  HAL_I2S_Init(I2SHandle);
 8004492:	4b05      	ldr	r3, [pc, #20]	@ (80044a8 <UpdateSampleRate+0x3c>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	0018      	movs	r0, r3
 8004498:	f005 fb9c 	bl	8009bd4 <HAL_I2S_Init>
 800449c:	e000      	b.n	80044a0 <UpdateSampleRate+0x34>
    return;
 800449e:	46c0      	nop			@ (mov r8, r8)
}
 80044a0:	46bd      	mov	sp, r7
 80044a2:	b002      	add	sp, #8
 80044a4:	bd80      	pop	{r7, pc}
 80044a6:	46c0      	nop			@ (mov r8, r8)
 80044a8:	20000460 	.word	0x20000460

080044ac <ConvertAudio>:

static uint32_t ConvertAudio(uint16_t* data) {
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b084      	sub	sp, #16
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  uint32_t audioValue = data[1] | (data[0] << 16);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	3302      	adds	r3, #2
 80044b8:	881b      	ldrh	r3, [r3, #0]
 80044ba:	001a      	movs	r2, r3
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	881b      	ldrh	r3, [r3, #0]
 80044c0:	041b      	lsls	r3, r3, #16
 80044c2:	4313      	orrs	r3, r2
 80044c4:	60fb      	str	r3, [r7, #12]
  audioValue = audioValue >> 7;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	09db      	lsrs	r3, r3, #7
 80044ca:	60fb      	str	r3, [r7, #12]
  return audioValue;
 80044cc:	68fb      	ldr	r3, [r7, #12]
}
 80044ce:	0018      	movs	r0, r3
 80044d0:	46bd      	mov	sp, r7
 80044d2:	b004      	add	sp, #16
 80044d4:	bd80      	pop	{r7, pc}
	...

080044d8 <MIC_Start>:

void MIC_Start(uint32_t sampleRate, uint16_t nrSamples) {
 80044d8:	b5b0      	push	{r4, r5, r7, lr}
 80044da:	b084      	sub	sp, #16
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
 80044e0:	000a      	movs	r2, r1
 80044e2:	1cbb      	adds	r3, r7, #2
 80044e4:	801a      	strh	r2, [r3, #0]
  if (I2SHandle == NULL) {
 80044e6:	4b21      	ldr	r3, [pc, #132]	@ (800456c <MIC_Start+0x94>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d106      	bne.n	80044fc <MIC_Start+0x24>
    Error("Microphone is not initialised.");
 80044ee:	4a20      	ldr	r2, [pc, #128]	@ (8004570 <MIC_Start+0x98>)
 80044f0:	4b20      	ldr	r3, [pc, #128]	@ (8004574 <MIC_Start+0x9c>)
 80044f2:	0019      	movs	r1, r3
 80044f4:	2001      	movs	r0, #1
 80044f6:	f002 f92f 	bl	8006758 <CreateLine>
    return;
 80044fa:	e033      	b.n	8004564 <MIC_Start+0x8c>
  }
  Debug("In mic start");
 80044fc:	4a1e      	ldr	r2, [pc, #120]	@ (8004578 <MIC_Start+0xa0>)
 80044fe:	4b1f      	ldr	r3, [pc, #124]	@ (800457c <MIC_Start+0xa4>)
 8004500:	0019      	movs	r1, r3
 8004502:	2003      	movs	r0, #3
 8004504:	f002 f928 	bl	8006758 <CreateLine>
  UpdateSampleRate(sampleRate);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	0018      	movs	r0, r3
 800450c:	f7ff ffae 	bl	800446c <UpdateSampleRate>
  Samples = (NrOfSamples)nrSamples;
 8004510:	4b1b      	ldr	r3, [pc, #108]	@ (8004580 <MIC_Start+0xa8>)
 8004512:	1cba      	adds	r2, r7, #2
 8004514:	8812      	ldrh	r2, [r2, #0]
 8004516:	801a      	strh	r2, [r3, #0]

  StartTime = GetCurrentHalTicks();
 8004518:	f002 f9aa 	bl	8006870 <GetCurrentHalTicks>
 800451c:	0002      	movs	r2, r0
 800451e:	4b19      	ldr	r3, [pc, #100]	@ (8004584 <MIC_Start+0xac>)
 8004520:	601a      	str	r2, [r3, #0]
  StartupDoneTime = StartTime + 20;
 8004522:	4b18      	ldr	r3, [pc, #96]	@ (8004584 <MIC_Start+0xac>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	3314      	adds	r3, #20
 8004528:	001a      	movs	r2, r3
 800452a:	4b17      	ldr	r3, [pc, #92]	@ (8004588 <MIC_Start+0xb0>)
 800452c:	601a      	str	r2, [r3, #0]
  StartUpDone = false;
 800452e:	4b17      	ldr	r3, [pc, #92]	@ (800458c <MIC_Start+0xb4>)
 8004530:	2200      	movs	r2, #0
 8004532:	701a      	strb	r2, [r3, #0]
  DataReady = false;
 8004534:	4b16      	ldr	r3, [pc, #88]	@ (8004590 <MIC_Start+0xb8>)
 8004536:	2200      	movs	r2, #0
 8004538:	701a      	strb	r2, [r3, #0]

  HAL_StatusTypeDef status = HAL_I2S_Receive_DMA(I2SHandle, (uint16_t*)AudioRxBuffer, Samples >> 1);
 800453a:	4b0c      	ldr	r3, [pc, #48]	@ (800456c <MIC_Start+0x94>)
 800453c:	6818      	ldr	r0, [r3, #0]
 800453e:	4b10      	ldr	r3, [pc, #64]	@ (8004580 <MIC_Start+0xa8>)
 8004540:	881b      	ldrh	r3, [r3, #0]
 8004542:	085b      	lsrs	r3, r3, #1
 8004544:	b29a      	uxth	r2, r3
 8004546:	250f      	movs	r5, #15
 8004548:	197c      	adds	r4, r7, r5
 800454a:	4b12      	ldr	r3, [pc, #72]	@ (8004594 <MIC_Start+0xbc>)
 800454c:	0019      	movs	r1, r3
 800454e:	f005 fc5f 	bl	8009e10 <HAL_I2S_Receive_DMA>
 8004552:	0003      	movs	r3, r0
 8004554:	7023      	strb	r3, [r4, #0]
//      HAL_I2S_Receive_DMA(I2SHandle, (uint16_t*)AudioRxBuffer,
//          Samples >> 1); //>>1 because reading half word

  Info("Status %d", status);
 8004556:	197b      	adds	r3, r7, r5
 8004558:	781b      	ldrb	r3, [r3, #0]
 800455a:	4a0f      	ldr	r2, [pc, #60]	@ (8004598 <MIC_Start+0xc0>)
 800455c:	490f      	ldr	r1, [pc, #60]	@ (800459c <MIC_Start+0xc4>)
 800455e:	2002      	movs	r0, #2
 8004560:	f002 f8fa 	bl	8006758 <CreateLine>
}
 8004564:	46bd      	mov	sp, r7
 8004566:	b004      	add	sp, #16
 8004568:	bdb0      	pop	{r4, r5, r7, pc}
 800456a:	46c0      	nop			@ (mov r8, r8)
 800456c:	20000460 	.word	0x20000460
 8004570:	0801020c 	.word	0x0801020c
 8004574:	0801022c 	.word	0x0801022c
 8004578:	08010230 	.word	0x08010230
 800457c:	08010240 	.word	0x08010240
 8004580:	20000008 	.word	0x20000008
 8004584:	20000c64 	.word	0x20000c64
 8004588:	20000c68 	.word	0x20000c68
 800458c:	20000c6c 	.word	0x20000c6c
 8004590:	20000c6d 	.word	0x20000c6d
 8004594:	20000464 	.word	0x20000464
 8004598:	08010244 	.word	0x08010244
 800459c:	08010250 	.word	0x08010250

080045a0 <MIC_Print>:
>>>>>>> main
//static void MIC_ProcessFFT() {
//  CalculateFFT();
//}


void MIC_Print(void) {
<<<<<<< HEAD
 800454c:	b580      	push	{r7, lr}
 800454e:	b082      	sub	sp, #8
 8004550:	af00      	add	r7, sp, #0
  Info("New samples");
 8004552:	4a13      	ldr	r2, [pc, #76]	@ (80045a0 <MIC_Print+0x54>)
 8004554:	4b13      	ldr	r3, [pc, #76]	@ (80045a4 <MIC_Print+0x58>)
 8004556:	0019      	movs	r1, r3
 8004558:	2002      	movs	r0, #2
 800455a:	f001 ff75 	bl	8006448 <CreateLine>
  for (uint32_t i = 0; i < Samples; i += 2) {
 800455e:	2300      	movs	r3, #0
 8004560:	607b      	str	r3, [r7, #4]
 8004562:	e011      	b.n	8004588 <MIC_Print+0x3c>
    uint32_t sample = ConvertAudio(&AudioRxBuffer[i]);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	005a      	lsls	r2, r3, #1
 8004568:	4b0f      	ldr	r3, [pc, #60]	@ (80045a8 <MIC_Print+0x5c>)
 800456a:	18d3      	adds	r3, r2, r3
 800456c:	0018      	movs	r0, r3
 800456e:	f7ff ff7f 	bl	8004470 <ConvertAudio>
 8004572:	0003      	movs	r3, r0
 8004574:	603b      	str	r3, [r7, #0]
    Info("0x%08x", sample);
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	4a0c      	ldr	r2, [pc, #48]	@ (80045ac <MIC_Print+0x60>)
 800457a:	490a      	ldr	r1, [pc, #40]	@ (80045a4 <MIC_Print+0x58>)
 800457c:	2002      	movs	r0, #2
 800457e:	f001 ff63 	bl	8006448 <CreateLine>
  for (uint32_t i = 0; i < Samples; i += 2) {
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	3302      	adds	r3, #2
 8004586:	607b      	str	r3, [r7, #4]
 8004588:	4b09      	ldr	r3, [pc, #36]	@ (80045b0 <MIC_Print+0x64>)
 800458a:	881b      	ldrh	r3, [r3, #0]
 800458c:	001a      	movs	r2, r3
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	4293      	cmp	r3, r2
 8004592:	d3e7      	bcc.n	8004564 <MIC_Print+0x18>
  }
}
 8004594:	46c0      	nop			@ (mov r8, r8)
 8004596:	46c0      	nop			@ (mov r8, r8)
 8004598:	46bd      	mov	sp, r7
 800459a:	b002      	add	sp, #8
 800459c:	bd80      	pop	{r7, pc}
 800459e:	46c0      	nop			@ (mov r8, r8)
 80045a0:	08010090 	.word	0x08010090
 80045a4:	0801009c 	.word	0x0801009c
 80045a8:	20000458 	.word	0x20000458
 80045ac:	080100a0 	.word	0x080100a0
 80045b0:	20000008 	.word	0x20000008

080045b4 <MIC_MeasurementDone>:

bool MIC_MeasurementDone(void) {
 80045b4:	b580      	push	{r7, lr}
 80045b6:	af00      	add	r7, sp, #0
  if(DataReady) {
 80045b8:	4b0a      	ldr	r3, [pc, #40]	@ (80045e4 <MIC_MeasurementDone+0x30>)
 80045ba:	781b      	ldrb	r3, [r3, #0]
 80045bc:	b2db      	uxtb	r3, r3
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d00c      	beq.n	80045dc <MIC_MeasurementDone+0x28>
    MIC_Print();
 80045c2:	f7ff ffc3 	bl	800454c <MIC_Print>
    Debug("MIC measurement is done with %i samples.", Samples >> 1);
 80045c6:	4b08      	ldr	r3, [pc, #32]	@ (80045e8 <MIC_MeasurementDone+0x34>)
 80045c8:	881b      	ldrh	r3, [r3, #0]
 80045ca:	085b      	lsrs	r3, r3, #1
 80045cc:	b29b      	uxth	r3, r3
 80045ce:	4a07      	ldr	r2, [pc, #28]	@ (80045ec <MIC_MeasurementDone+0x38>)
 80045d0:	4907      	ldr	r1, [pc, #28]	@ (80045f0 <MIC_MeasurementDone+0x3c>)
 80045d2:	2003      	movs	r0, #3
 80045d4:	f001 ff38 	bl	8006448 <CreateLine>
    return true;
 80045d8:	2301      	movs	r3, #1
 80045da:	e000      	b.n	80045de <MIC_MeasurementDone+0x2a>
  }
  return false;
 80045dc:	2300      	movs	r3, #0
}
 80045de:	0018      	movs	r0, r3
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}
 80045e4:	20000861 	.word	0x20000861
 80045e8:	20000008 	.word	0x20000008
 80045ec:	080100a8 	.word	0x080100a8
 80045f0:	0801002c 	.word	0x0801002c

080045f4 <HAL_I2S_RxCpltCallback>:
=======
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b082      	sub	sp, #8
 80045a4:	af00      	add	r7, sp, #0
  Info("New samples");
 80045a6:	4a13      	ldr	r2, [pc, #76]	@ (80045f4 <MIC_Print+0x54>)
 80045a8:	4b13      	ldr	r3, [pc, #76]	@ (80045f8 <MIC_Print+0x58>)
 80045aa:	0019      	movs	r1, r3
 80045ac:	2002      	movs	r0, #2
 80045ae:	f002 f8d3 	bl	8006758 <CreateLine>
  for (uint32_t i = 0; i < Samples; i += 2) {
 80045b2:	2300      	movs	r3, #0
 80045b4:	607b      	str	r3, [r7, #4]
 80045b6:	e011      	b.n	80045dc <MIC_Print+0x3c>
    uint32_t sample = ConvertAudio(&AudioRxBuffer[i]);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	005a      	lsls	r2, r3, #1
 80045bc:	4b0f      	ldr	r3, [pc, #60]	@ (80045fc <MIC_Print+0x5c>)
 80045be:	18d3      	adds	r3, r2, r3
 80045c0:	0018      	movs	r0, r3
 80045c2:	f7ff ff73 	bl	80044ac <ConvertAudio>
 80045c6:	0003      	movs	r3, r0
 80045c8:	603b      	str	r3, [r7, #0]
    Info("0x%08x", sample);
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	4a0c      	ldr	r2, [pc, #48]	@ (8004600 <MIC_Print+0x60>)
 80045ce:	490a      	ldr	r1, [pc, #40]	@ (80045f8 <MIC_Print+0x58>)
 80045d0:	2002      	movs	r0, #2
 80045d2:	f002 f8c1 	bl	8006758 <CreateLine>
  for (uint32_t i = 0; i < Samples; i += 2) {
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	3302      	adds	r3, #2
 80045da:	607b      	str	r3, [r7, #4]
 80045dc:	4b09      	ldr	r3, [pc, #36]	@ (8004604 <MIC_Print+0x64>)
 80045de:	881b      	ldrh	r3, [r3, #0]
 80045e0:	001a      	movs	r2, r3
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d3e7      	bcc.n	80045b8 <MIC_Print+0x18>
  }
}
 80045e8:	46c0      	nop			@ (mov r8, r8)
 80045ea:	46c0      	nop			@ (mov r8, r8)
 80045ec:	46bd      	mov	sp, r7
 80045ee:	b002      	add	sp, #8
 80045f0:	bd80      	pop	{r7, pc}
 80045f2:	46c0      	nop			@ (mov r8, r8)
 80045f4:	08010254 	.word	0x08010254
 80045f8:	08010250 	.word	0x08010250
 80045fc:	20000464 	.word	0x20000464
 8004600:	08010260 	.word	0x08010260
 8004604:	20000008 	.word	0x20000008

08004608 <MIC_MeasurementDone>:

bool MIC_MeasurementDone(void) {
 8004608:	b580      	push	{r7, lr}
 800460a:	af00      	add	r7, sp, #0
  if(DataReady) {
 800460c:	4b0a      	ldr	r3, [pc, #40]	@ (8004638 <MIC_MeasurementDone+0x30>)
 800460e:	781b      	ldrb	r3, [r3, #0]
 8004610:	b2db      	uxtb	r3, r3
 8004612:	2b00      	cmp	r3, #0
 8004614:	d00c      	beq.n	8004630 <MIC_MeasurementDone+0x28>
    MIC_Print();
 8004616:	f7ff ffc3 	bl	80045a0 <MIC_Print>
    Debug("MIC measurement is done with %i samples.", Samples >> 1);
 800461a:	4b08      	ldr	r3, [pc, #32]	@ (800463c <MIC_MeasurementDone+0x34>)
 800461c:	881b      	ldrh	r3, [r3, #0]
 800461e:	085b      	lsrs	r3, r3, #1
 8004620:	b29b      	uxth	r3, r3
 8004622:	4a07      	ldr	r2, [pc, #28]	@ (8004640 <MIC_MeasurementDone+0x38>)
 8004624:	4907      	ldr	r1, [pc, #28]	@ (8004644 <MIC_MeasurementDone+0x3c>)
 8004626:	2003      	movs	r0, #3
 8004628:	f002 f896 	bl	8006758 <CreateLine>
    return true;
 800462c:	2301      	movs	r3, #1
 800462e:	e000      	b.n	8004632 <MIC_MeasurementDone+0x2a>
  }
  return false;
 8004630:	2300      	movs	r3, #0
}
 8004632:	0018      	movs	r0, r3
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}
 8004638:	20000c6d 	.word	0x20000c6d
 800463c:	20000008 	.word	0x20000008
 8004640:	08010268 	.word	0x08010268
 8004644:	08010240 	.word	0x08010240

08004648 <HAL_I2S_RxCpltCallback>:
>>>>>>> main


// #TODO Also include half full callback
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef* hi2s) {
<<<<<<< HEAD
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b082      	sub	sp, #8
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  if (hi2s != I2SHandle)
 80045fc:	4b10      	ldr	r3, [pc, #64]	@ (8004640 <HAL_I2S_RxCpltCallback+0x4c>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	687a      	ldr	r2, [r7, #4]
 8004602:	429a      	cmp	r2, r3
 8004604:	d118      	bne.n	8004638 <HAL_I2S_RxCpltCallback+0x44>
    return;

  if (StartUpDone) {
 8004606:	4b0f      	ldr	r3, [pc, #60]	@ (8004644 <HAL_I2S_RxCpltCallback+0x50>)
 8004608:	781b      	ldrb	r3, [r3, #0]
 800460a:	b2db      	uxtb	r3, r3
 800460c:	2b00      	cmp	r3, #0
 800460e:	d008      	beq.n	8004622 <HAL_I2S_RxCpltCallback+0x2e>
    HAL_I2S_DMAStop(I2SHandle);
 8004610:	4b0b      	ldr	r3, [pc, #44]	@ (8004640 <HAL_I2S_RxCpltCallback+0x4c>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	0018      	movs	r0, r3
 8004616:	f005 fb5b 	bl	8009cd0 <HAL_I2S_DMAStop>
    DataReady = true;
 800461a:	4b0b      	ldr	r3, [pc, #44]	@ (8004648 <HAL_I2S_RxCpltCallback+0x54>)
 800461c:	2201      	movs	r2, #1
 800461e:	701a      	strb	r2, [r3, #0]
 8004620:	e00b      	b.n	800463a <HAL_I2S_RxCpltCallback+0x46>
=======
 8004648:	b580      	push	{r7, lr}
 800464a:	b082      	sub	sp, #8
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  if (hi2s != I2SHandle)
 8004650:	4b10      	ldr	r3, [pc, #64]	@ (8004694 <HAL_I2S_RxCpltCallback+0x4c>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	687a      	ldr	r2, [r7, #4]
 8004656:	429a      	cmp	r2, r3
 8004658:	d118      	bne.n	800468c <HAL_I2S_RxCpltCallback+0x44>
    return;

  if (StartUpDone) {
 800465a:	4b0f      	ldr	r3, [pc, #60]	@ (8004698 <HAL_I2S_RxCpltCallback+0x50>)
 800465c:	781b      	ldrb	r3, [r3, #0]
 800465e:	b2db      	uxtb	r3, r3
 8004660:	2b00      	cmp	r3, #0
 8004662:	d008      	beq.n	8004676 <HAL_I2S_RxCpltCallback+0x2e>
    HAL_I2S_DMAStop(I2SHandle);
 8004664:	4b0b      	ldr	r3, [pc, #44]	@ (8004694 <HAL_I2S_RxCpltCallback+0x4c>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	0018      	movs	r0, r3
 800466a:	f005 fc93 	bl	8009f94 <HAL_I2S_DMAStop>
    DataReady = true;
 800466e:	4b0b      	ldr	r3, [pc, #44]	@ (800469c <HAL_I2S_RxCpltCallback+0x54>)
 8004670:	2201      	movs	r2, #1
 8004672:	701a      	strb	r2, [r3, #0]
 8004674:	e00b      	b.n	800468e <HAL_I2S_RxCpltCallback+0x46>
>>>>>>> main
    // MIC trigger pin is used to debug when the measurement has started.
//    HAL_GPIO_WritePin(MIC_Trigger_GPIO_Port, MIC_Trigger_Pin, GPIO_PIN_RESET);
    // TODO: Use different pin for MIC_Trigger.
  } else if (TimestampIsReached(StartupDoneTime)) {
<<<<<<< HEAD
 8004622:	4b0a      	ldr	r3, [pc, #40]	@ (800464c <HAL_I2S_RxCpltCallback+0x58>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	0018      	movs	r0, r3
 8004628:	f001 feb8 	bl	800639c <TimestampIsReached>
 800462c:	1e03      	subs	r3, r0, #0
 800462e:	d004      	beq.n	800463a <HAL_I2S_RxCpltCallback+0x46>
    StartUpDone = true;
 8004630:	4b04      	ldr	r3, [pc, #16]	@ (8004644 <HAL_I2S_RxCpltCallback+0x50>)
 8004632:	2201      	movs	r2, #1
 8004634:	701a      	strb	r2, [r3, #0]
 8004636:	e000      	b.n	800463a <HAL_I2S_RxCpltCallback+0x46>
    return;
 8004638:	46c0      	nop			@ (mov r8, r8)
//    HAL_GPIO_WritePin(MIC_Trigger_GPIO_Port, MIC_Trigger_Pin, GPIO_PIN_SET);
  }
}
 800463a:	46bd      	mov	sp, r7
 800463c:	b002      	add	sp, #8
 800463e:	bd80      	pop	{r7, pc}
 8004640:	20000454 	.word	0x20000454
 8004644:	20000860 	.word	0x20000860
 8004648:	20000861 	.word	0x20000861
 800464c:	2000085c 	.word	0x2000085c

08004650 <GasIndexAlgorithm_init_with_sampling_interval>:
=======
 8004676:	4b0a      	ldr	r3, [pc, #40]	@ (80046a0 <HAL_I2S_RxCpltCallback+0x58>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	0018      	movs	r0, r3
 800467c:	f002 f816 	bl	80066ac <TimestampIsReached>
 8004680:	1e03      	subs	r3, r0, #0
 8004682:	d004      	beq.n	800468e <HAL_I2S_RxCpltCallback+0x46>
    StartUpDone = true;
 8004684:	4b04      	ldr	r3, [pc, #16]	@ (8004698 <HAL_I2S_RxCpltCallback+0x50>)
 8004686:	2201      	movs	r2, #1
 8004688:	701a      	strb	r2, [r3, #0]
 800468a:	e000      	b.n	800468e <HAL_I2S_RxCpltCallback+0x46>
    return;
 800468c:	46c0      	nop			@ (mov r8, r8)
//    HAL_GPIO_WritePin(MIC_Trigger_GPIO_Port, MIC_Trigger_Pin, GPIO_PIN_SET);
  }
}
 800468e:	46bd      	mov	sp, r7
 8004690:	b002      	add	sp, #8
 8004692:	bd80      	pop	{r7, pc}
 8004694:	20000460 	.word	0x20000460
 8004698:	20000c6c 	.word	0x20000c6c
 800469c:	20000c6d 	.word	0x20000c6d
 80046a0:	20000c68 	.word	0x20000c68

080046a4 <GasIndexAlgorithm_init_with_sampling_interval>:
>>>>>>> main
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample);

void GasIndexAlgorithm_init_with_sampling_interval(
    GasIndexAlgorithmParams* params, int32_t algorithm_type,
    float sampling_interval) {
<<<<<<< HEAD
 8004650:	b580      	push	{r7, lr}
 8004652:	b084      	sub	sp, #16
 8004654:	af00      	add	r7, sp, #0
 8004656:	60f8      	str	r0, [r7, #12]
 8004658:	60b9      	str	r1, [r7, #8]
 800465a:	607a      	str	r2, [r7, #4]
    params->mAlgorithm_Type = algorithm_type;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	68ba      	ldr	r2, [r7, #8]
 8004660:	601a      	str	r2, [r3, #0]
    params->mSamplingInterval = sampling_interval;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	687a      	ldr	r2, [r7, #4]
 8004666:	605a      	str	r2, [r3, #4]
    if ((algorithm_type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	2b01      	cmp	r3, #1
 800466c:	d113      	bne.n	8004696 <GasIndexAlgorithm_init_with_sampling_interval+0x46>
        params->mIndex_Offset = GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	22fe      	movs	r2, #254	@ 0xfe
 8004672:	0592      	lsls	r2, r2, #22
 8004674:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_NOX_SRAW_MINIMUM;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	4a1a      	ldr	r2, [pc, #104]	@ (80046e4 <GasIndexAlgorithm_init_with_sampling_interval+0x94>)
 800467a:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	4a1a      	ldr	r2, [pc, #104]	@ (80046e8 <GasIndexAlgorithm_init_with_sampling_interval+0x98>)
 8004680:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_NOX_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_NOX;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	4a19      	ldr	r2, [pc, #100]	@ (80046ec <GasIndexAlgorithm_init_with_sampling_interval+0x9c>)
 8004686:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	4a19      	ldr	r2, [pc, #100]	@ (80046f0 <GasIndexAlgorithm_init_with_sampling_interval+0xa0>)
 800468c:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_NOX;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_NOX;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	4a18      	ldr	r2, [pc, #96]	@ (80046f4 <GasIndexAlgorithm_init_with_sampling_interval+0xa4>)
 8004692:	61da      	str	r2, [r3, #28]
 8004694:	e011      	b.n	80046ba <GasIndexAlgorithm_init_with_sampling_interval+0x6a>
    } else {
        params->mIndex_Offset = GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	4a17      	ldr	r2, [pc, #92]	@ (80046f8 <GasIndexAlgorithm_init_with_sampling_interval+0xa8>)
 800469a:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_VOC_SRAW_MINIMUM;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	4a17      	ldr	r2, [pc, #92]	@ (80046fc <GasIndexAlgorithm_init_with_sampling_interval+0xac>)
 80046a0:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	4a16      	ldr	r2, [pc, #88]	@ (8004700 <GasIndexAlgorithm_init_with_sampling_interval+0xb0>)
 80046a6:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_VOC_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_VOC;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	4a16      	ldr	r2, [pc, #88]	@ (8004704 <GasIndexAlgorithm_init_with_sampling_interval+0xb4>)
 80046ac:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	4a15      	ldr	r2, [pc, #84]	@ (8004708 <GasIndexAlgorithm_init_with_sampling_interval+0xb8>)
 80046b2:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_VOC;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_VOC;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	4a15      	ldr	r2, [pc, #84]	@ (800470c <GasIndexAlgorithm_init_with_sampling_interval+0xbc>)
 80046b8:	61da      	str	r2, [r3, #28]
    }
    params->mIndex_Gain = GasIndexAlgorithm_INDEX_GAIN;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	4a14      	ldr	r2, [pc, #80]	@ (8004710 <GasIndexAlgorithm_init_with_sampling_interval+0xc0>)
 80046be:	621a      	str	r2, [r3, #32]
    params->mTau_Mean_Hours = GasIndexAlgorithm_TAU_MEAN_HOURS;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	4a14      	ldr	r2, [pc, #80]	@ (8004714 <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 80046c4:	625a      	str	r2, [r3, #36]	@ 0x24
    params->mTau_Variance_Hours = GasIndexAlgorithm_TAU_VARIANCE_HOURS;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	4a12      	ldr	r2, [pc, #72]	@ (8004714 <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 80046ca:	629a      	str	r2, [r3, #40]	@ 0x28
    params->mSraw_Std_Initial = GasIndexAlgorithm_SRAW_STD_INITIAL;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	4a12      	ldr	r2, [pc, #72]	@ (8004718 <GasIndexAlgorithm_init_with_sampling_interval+0xc8>)
 80046d0:	62da      	str	r2, [r3, #44]	@ 0x2c
    GasIndexAlgorithm_reset(params);
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	0018      	movs	r0, r3
 80046d6:	f000 f831 	bl	800473c <GasIndexAlgorithm_reset>
}
 80046da:	46c0      	nop			@ (mov r8, r8)
 80046dc:	46bd      	mov	sp, r7
 80046de:	b004      	add	sp, #16
 80046e0:	bd80      	pop	{r7, pc}
 80046e2:	46c0      	nop			@ (mov r8, r8)
 80046e4:	00002710 	.word	0x00002710
 80046e8:	44340000 	.word	0x44340000
 80046ec:	46859800 	.word	0x46859800
 80046f0:	46a05000 	.word	0x46a05000
 80046f4:	41f00000 	.word	0x41f00000
 80046f8:	42c80000 	.word	0x42c80000
 80046fc:	00004e20 	.word	0x00004e20
 8004700:	43340000 	.word	0x43340000
 8004704:	4528c000 	.word	0x4528c000
 8004708:	45a32000 	.word	0x45a32000
 800470c:	43aa0000 	.word	0x43aa0000
 8004710:	43660000 	.word	0x43660000
 8004714:	41400000 	.word	0x41400000
 8004718:	42480000 	.word	0x42480000

0800471c <GasIndexAlgorithm_init>:

void GasIndexAlgorithm_init(GasIndexAlgorithmParams* params,
                            int32_t algorithm_type) {
 800471c:	b580      	push	{r7, lr}
 800471e:	b082      	sub	sp, #8
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
 8004724:	6039      	str	r1, [r7, #0]
    GasIndexAlgorithm_init_with_sampling_interval(
 8004726:	22fe      	movs	r2, #254	@ 0xfe
 8004728:	0592      	lsls	r2, r2, #22
 800472a:	6839      	ldr	r1, [r7, #0]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	0018      	movs	r0, r3
 8004730:	f7ff ff8e 	bl	8004650 <GasIndexAlgorithm_init_with_sampling_interval>
        params, algorithm_type, GasIndexAlgorithm_DEFAULT_SAMPLING_INTERVAL);
}
 8004734:	46c0      	nop			@ (mov r8, r8)
 8004736:	46bd      	mov	sp, r7
 8004738:	b002      	add	sp, #8
 800473a:	bd80      	pop	{r7, pc}

0800473c <GasIndexAlgorithm_reset>:

void GasIndexAlgorithm_reset(GasIndexAlgorithmParams* params) {
 800473c:	b580      	push	{r7, lr}
 800473e:	b082      	sub	sp, #8
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
    params->mUptime = 0.f;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2200      	movs	r2, #0
 8004748:	631a      	str	r2, [r3, #48]	@ 0x30
    params->mSraw = 0.f;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2200      	movs	r2, #0
 800474e:	635a      	str	r2, [r3, #52]	@ 0x34
    params->mGas_Index = 0;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2200      	movs	r2, #0
 8004754:	639a      	str	r2, [r3, #56]	@ 0x38
    GasIndexAlgorithm__init_instances(params);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	0018      	movs	r0, r3
 800475a:	f000 f805 	bl	8004768 <GasIndexAlgorithm__init_instances>
}
 800475e:	46c0      	nop			@ (mov r8, r8)
 8004760:	46bd      	mov	sp, r7
 8004762:	b002      	add	sp, #8
 8004764:	bd80      	pop	{r7, pc}
	...

08004768 <GasIndexAlgorithm__init_instances>:

static void GasIndexAlgorithm__init_instances(GasIndexAlgorithmParams* params) {
 8004768:	b590      	push	{r4, r7, lr}
 800476a:	b083      	sub	sp, #12
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]

    GasIndexAlgorithm__mean_variance_estimator__set_parameters(params);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	0018      	movs	r0, r3
 8004774:	f000 f8e8 	bl	8004948 <GasIndexAlgorithm__mean_variance_estimator__set_parameters>
    GasIndexAlgorithm__mox_model__set_parameters(
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	0018      	movs	r0, r3
 800477c:	f000 f9a6 	bl	8004acc <GasIndexAlgorithm__mean_variance_estimator__get_std>
 8004780:	1c04      	adds	r4, r0, #0
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	0018      	movs	r0, r3
 8004786:	f000 f9ab 	bl	8004ae0 <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 800478a:	1c02      	adds	r2, r0, #0
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	1c21      	adds	r1, r4, #0
 8004790:	0018      	movs	r0, r3
 8004792:	f000 fc3b 	bl	800500c <GasIndexAlgorithm__mox_model__set_parameters>
        params, GasIndexAlgorithm__mean_variance_estimator__get_std(params),
        GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	2b01      	cmp	r3, #1
 800479c:	d107      	bne.n	80047ae <GasIndexAlgorithm__init_instances+0x46>
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 800479e:	23fe      	movs	r3, #254	@ 0xfe
 80047a0:	059b      	lsls	r3, r3, #22
 80047a2:	4a0a      	ldr	r2, [pc, #40]	@ (80047cc <GasIndexAlgorithm__init_instances+0x64>)
 80047a4:	490a      	ldr	r1, [pc, #40]	@ (80047d0 <GasIndexAlgorithm__init_instances+0x68>)
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	f000 fc86 	bl	80050b8 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
 80047ac:	e005      	b.n	80047ba <GasIndexAlgorithm__init_instances+0x52>
=======
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b084      	sub	sp, #16
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	60f8      	str	r0, [r7, #12]
 80046ac:	60b9      	str	r1, [r7, #8]
 80046ae:	607a      	str	r2, [r7, #4]
    params->mAlgorithm_Type = algorithm_type;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	68ba      	ldr	r2, [r7, #8]
 80046b4:	601a      	str	r2, [r3, #0]
    params->mSamplingInterval = sampling_interval;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	687a      	ldr	r2, [r7, #4]
 80046ba:	605a      	str	r2, [r3, #4]
    if ((algorithm_type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	2b01      	cmp	r3, #1
 80046c0:	d113      	bne.n	80046ea <GasIndexAlgorithm_init_with_sampling_interval+0x46>
        params->mIndex_Offset = GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	22fe      	movs	r2, #254	@ 0xfe
 80046c6:	0592      	lsls	r2, r2, #22
 80046c8:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_NOX_SRAW_MINIMUM;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	4a1a      	ldr	r2, [pc, #104]	@ (8004738 <GasIndexAlgorithm_init_with_sampling_interval+0x94>)
 80046ce:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	4a1a      	ldr	r2, [pc, #104]	@ (800473c <GasIndexAlgorithm_init_with_sampling_interval+0x98>)
 80046d4:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_NOX_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_NOX;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	4a19      	ldr	r2, [pc, #100]	@ (8004740 <GasIndexAlgorithm_init_with_sampling_interval+0x9c>)
 80046da:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	4a19      	ldr	r2, [pc, #100]	@ (8004744 <GasIndexAlgorithm_init_with_sampling_interval+0xa0>)
 80046e0:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_NOX;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_NOX;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	4a18      	ldr	r2, [pc, #96]	@ (8004748 <GasIndexAlgorithm_init_with_sampling_interval+0xa4>)
 80046e6:	61da      	str	r2, [r3, #28]
 80046e8:	e011      	b.n	800470e <GasIndexAlgorithm_init_with_sampling_interval+0x6a>
    } else {
        params->mIndex_Offset = GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	4a17      	ldr	r2, [pc, #92]	@ (800474c <GasIndexAlgorithm_init_with_sampling_interval+0xa8>)
 80046ee:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_VOC_SRAW_MINIMUM;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	4a17      	ldr	r2, [pc, #92]	@ (8004750 <GasIndexAlgorithm_init_with_sampling_interval+0xac>)
 80046f4:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	4a16      	ldr	r2, [pc, #88]	@ (8004754 <GasIndexAlgorithm_init_with_sampling_interval+0xb0>)
 80046fa:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_VOC_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_VOC;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	4a16      	ldr	r2, [pc, #88]	@ (8004758 <GasIndexAlgorithm_init_with_sampling_interval+0xb4>)
 8004700:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	4a15      	ldr	r2, [pc, #84]	@ (800475c <GasIndexAlgorithm_init_with_sampling_interval+0xb8>)
 8004706:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_VOC;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_VOC;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	4a15      	ldr	r2, [pc, #84]	@ (8004760 <GasIndexAlgorithm_init_with_sampling_interval+0xbc>)
 800470c:	61da      	str	r2, [r3, #28]
    }
    params->mIndex_Gain = GasIndexAlgorithm_INDEX_GAIN;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	4a14      	ldr	r2, [pc, #80]	@ (8004764 <GasIndexAlgorithm_init_with_sampling_interval+0xc0>)
 8004712:	621a      	str	r2, [r3, #32]
    params->mTau_Mean_Hours = GasIndexAlgorithm_TAU_MEAN_HOURS;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	4a14      	ldr	r2, [pc, #80]	@ (8004768 <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 8004718:	625a      	str	r2, [r3, #36]	@ 0x24
    params->mTau_Variance_Hours = GasIndexAlgorithm_TAU_VARIANCE_HOURS;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	4a12      	ldr	r2, [pc, #72]	@ (8004768 <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 800471e:	629a      	str	r2, [r3, #40]	@ 0x28
    params->mSraw_Std_Initial = GasIndexAlgorithm_SRAW_STD_INITIAL;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	4a12      	ldr	r2, [pc, #72]	@ (800476c <GasIndexAlgorithm_init_with_sampling_interval+0xc8>)
 8004724:	62da      	str	r2, [r3, #44]	@ 0x2c
    GasIndexAlgorithm_reset(params);
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	0018      	movs	r0, r3
 800472a:	f000 f831 	bl	8004790 <GasIndexAlgorithm_reset>
}
 800472e:	46c0      	nop			@ (mov r8, r8)
 8004730:	46bd      	mov	sp, r7
 8004732:	b004      	add	sp, #16
 8004734:	bd80      	pop	{r7, pc}
 8004736:	46c0      	nop			@ (mov r8, r8)
 8004738:	00002710 	.word	0x00002710
 800473c:	44340000 	.word	0x44340000
 8004740:	46859800 	.word	0x46859800
 8004744:	46a05000 	.word	0x46a05000
 8004748:	41f00000 	.word	0x41f00000
 800474c:	42c80000 	.word	0x42c80000
 8004750:	00004e20 	.word	0x00004e20
 8004754:	43340000 	.word	0x43340000
 8004758:	4528c000 	.word	0x4528c000
 800475c:	45a32000 	.word	0x45a32000
 8004760:	43aa0000 	.word	0x43aa0000
 8004764:	43660000 	.word	0x43660000
 8004768:	41400000 	.word	0x41400000
 800476c:	42480000 	.word	0x42480000

08004770 <GasIndexAlgorithm_init>:

void GasIndexAlgorithm_init(GasIndexAlgorithmParams* params,
                            int32_t algorithm_type) {
 8004770:	b580      	push	{r7, lr}
 8004772:	b082      	sub	sp, #8
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
 8004778:	6039      	str	r1, [r7, #0]
    GasIndexAlgorithm_init_with_sampling_interval(
 800477a:	22fe      	movs	r2, #254	@ 0xfe
 800477c:	0592      	lsls	r2, r2, #22
 800477e:	6839      	ldr	r1, [r7, #0]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	0018      	movs	r0, r3
 8004784:	f7ff ff8e 	bl	80046a4 <GasIndexAlgorithm_init_with_sampling_interval>
        params, algorithm_type, GasIndexAlgorithm_DEFAULT_SAMPLING_INTERVAL);
}
 8004788:	46c0      	nop			@ (mov r8, r8)
 800478a:	46bd      	mov	sp, r7
 800478c:	b002      	add	sp, #8
 800478e:	bd80      	pop	{r7, pc}

08004790 <GasIndexAlgorithm_reset>:

void GasIndexAlgorithm_reset(GasIndexAlgorithmParams* params) {
 8004790:	b580      	push	{r7, lr}
 8004792:	b082      	sub	sp, #8
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
    params->mUptime = 0.f;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2200      	movs	r2, #0
 800479c:	631a      	str	r2, [r3, #48]	@ 0x30
    params->mSraw = 0.f;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2200      	movs	r2, #0
 80047a2:	635a      	str	r2, [r3, #52]	@ 0x34
    params->mGas_Index = 0;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2200      	movs	r2, #0
 80047a8:	639a      	str	r2, [r3, #56]	@ 0x38
    GasIndexAlgorithm__init_instances(params);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	0018      	movs	r0, r3
 80047ae:	f000 f805 	bl	80047bc <GasIndexAlgorithm__init_instances>
}
 80047b2:	46c0      	nop			@ (mov r8, r8)
 80047b4:	46bd      	mov	sp, r7
 80047b6:	b002      	add	sp, #8
 80047b8:	bd80      	pop	{r7, pc}
	...

080047bc <GasIndexAlgorithm__init_instances>:

static void GasIndexAlgorithm__init_instances(GasIndexAlgorithmParams* params) {
 80047bc:	b590      	push	{r4, r7, lr}
 80047be:	b083      	sub	sp, #12
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]

    GasIndexAlgorithm__mean_variance_estimator__set_parameters(params);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	0018      	movs	r0, r3
 80047c8:	f000 f8e8 	bl	800499c <GasIndexAlgorithm__mean_variance_estimator__set_parameters>
    GasIndexAlgorithm__mox_model__set_parameters(
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	0018      	movs	r0, r3
 80047d0:	f000 f9a6 	bl	8004b20 <GasIndexAlgorithm__mean_variance_estimator__get_std>
 80047d4:	1c04      	adds	r4, r0, #0
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	0018      	movs	r0, r3
 80047da:	f000 f9ab 	bl	8004b34 <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 80047de:	1c02      	adds	r2, r0, #0
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	1c21      	adds	r1, r4, #0
 80047e4:	0018      	movs	r0, r3
 80047e6:	f000 fc3b 	bl	8005060 <GasIndexAlgorithm__mox_model__set_parameters>
        params, GasIndexAlgorithm__mean_variance_estimator__get_std(params),
        GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	2b01      	cmp	r3, #1
 80047f0:	d107      	bne.n	8004802 <GasIndexAlgorithm__init_instances+0x46>
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 80047f2:	23fe      	movs	r3, #254	@ 0xfe
 80047f4:	059b      	lsls	r3, r3, #22
 80047f6:	4a0a      	ldr	r2, [pc, #40]	@ (8004820 <GasIndexAlgorithm__init_instances+0x64>)
 80047f8:	490a      	ldr	r1, [pc, #40]	@ (8004824 <GasIndexAlgorithm__init_instances+0x68>)
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f000 fc86 	bl	800510c <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
 8004800:	e005      	b.n	800480e <GasIndexAlgorithm__init_instances+0x52>
>>>>>>> main
            params, GasIndexAlgorithm_SIGMOID_X0_NOX,
            GasIndexAlgorithm_SIGMOID_K_NOX,
            GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT);
    } else {
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
<<<<<<< HEAD
 80047ae:	4b09      	ldr	r3, [pc, #36]	@ (80047d4 <GasIndexAlgorithm__init_instances+0x6c>)
 80047b0:	4a09      	ldr	r2, [pc, #36]	@ (80047d8 <GasIndexAlgorithm__init_instances+0x70>)
 80047b2:	490a      	ldr	r1, [pc, #40]	@ (80047dc <GasIndexAlgorithm__init_instances+0x74>)
 80047b4:	6878      	ldr	r0, [r7, #4]
 80047b6:	f000 fc7f 	bl	80050b8 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
=======
 8004802:	4b09      	ldr	r3, [pc, #36]	@ (8004828 <GasIndexAlgorithm__init_instances+0x6c>)
 8004804:	4a09      	ldr	r2, [pc, #36]	@ (800482c <GasIndexAlgorithm__init_instances+0x70>)
 8004806:	490a      	ldr	r1, [pc, #40]	@ (8004830 <GasIndexAlgorithm__init_instances+0x74>)
 8004808:	6878      	ldr	r0, [r7, #4]
 800480a:	f000 fc7f 	bl	800510c <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
>>>>>>> main
            params, GasIndexAlgorithm_SIGMOID_X0_VOC,
            GasIndexAlgorithm_SIGMOID_K_VOC,
            GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT);
    }
    GasIndexAlgorithm__adaptive_lowpass__set_parameters(params);
<<<<<<< HEAD
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	0018      	movs	r0, r3
 80047be:	f000 fd35 	bl	800522c <GasIndexAlgorithm__adaptive_lowpass__set_parameters>
}
 80047c2:	46c0      	nop			@ (mov r8, r8)
 80047c4:	46bd      	mov	sp, r7
 80047c6:	b003      	add	sp, #12
 80047c8:	bd90      	pop	{r4, r7, pc}
 80047ca:	46c0      	nop			@ (mov r8, r8)
 80047cc:	bc257a78 	.word	0xbc257a78
 80047d0:	44198000 	.word	0x44198000
 80047d4:	42c80000 	.word	0x42c80000
 80047d8:	bbd4fdf4 	.word	0xbbd4fdf4
 80047dc:	43550000 	.word	0x43550000

080047e0 <GasIndexAlgorithm_process>:
=======
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	0018      	movs	r0, r3
 8004812:	f000 fd35 	bl	8005280 <GasIndexAlgorithm__adaptive_lowpass__set_parameters>
}
 8004816:	46c0      	nop			@ (mov r8, r8)
 8004818:	46bd      	mov	sp, r7
 800481a:	b003      	add	sp, #12
 800481c:	bd90      	pop	{r4, r7, pc}
 800481e:	46c0      	nop			@ (mov r8, r8)
 8004820:	bc257a78 	.word	0xbc257a78
 8004824:	44198000 	.word	0x44198000
 8004828:	42c80000 	.word	0x42c80000
 800482c:	bbd4fdf4 	.word	0xbbd4fdf4
 8004830:	43550000 	.word	0x43550000

08004834 <GasIndexAlgorithm_process>:
>>>>>>> main
    *gain_factor = ((int32_t)(params->mIndex_Gain));
    return;
}

void GasIndexAlgorithm_process(GasIndexAlgorithmParams* params, int32_t sraw,
                               int32_t* gas_index) {
<<<<<<< HEAD
 80047e0:	b590      	push	{r4, r7, lr}
 80047e2:	b085      	sub	sp, #20
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	60f8      	str	r0, [r7, #12]
 80047e8:	60b9      	str	r1, [r7, #8]
 80047ea:	607a      	str	r2, [r7, #4]

    if ((params->mUptime <= GasIndexAlgorithm_INITIAL_BLACKOUT)) {
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047f0:	4952      	ldr	r1, [pc, #328]	@ (800493c <GasIndexAlgorithm_process+0x15c>)
 80047f2:	1c18      	adds	r0, r3, #0
 80047f4:	f7fb fe74 	bl	80004e0 <__aeabi_fcmple>
 80047f8:	1e03      	subs	r3, r0, #0
 80047fa:	d00c      	beq.n	8004816 <GasIndexAlgorithm_process+0x36>
        params->mUptime = (params->mUptime + params->mSamplingInterval);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	1c19      	adds	r1, r3, #0
 8004806:	1c10      	adds	r0, r2, #0
 8004808:	f7fb ffa2 	bl	8000750 <__aeabi_fadd>
 800480c:	1c03      	adds	r3, r0, #0
 800480e:	1c1a      	adds	r2, r3, #0
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	631a      	str	r2, [r3, #48]	@ 0x30
 8004814:	e080      	b.n	8004918 <GasIndexAlgorithm_process+0x138>
    } else {
        if (((sraw > 0) && (sraw < 65000))) {
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	2b00      	cmp	r3, #0
 800481a:	dd25      	ble.n	8004868 <GasIndexAlgorithm_process+0x88>
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	4a48      	ldr	r2, [pc, #288]	@ (8004940 <GasIndexAlgorithm_process+0x160>)
 8004820:	4293      	cmp	r3, r2
 8004822:	dc21      	bgt.n	8004868 <GasIndexAlgorithm_process+0x88>
            if ((sraw < (params->mSraw_Minimum + 1))) {
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	68db      	ldr	r3, [r3, #12]
 8004828:	68ba      	ldr	r2, [r7, #8]
 800482a:	429a      	cmp	r2, r3
 800482c:	dc04      	bgt.n	8004838 <GasIndexAlgorithm_process+0x58>
                sraw = (params->mSraw_Minimum + 1);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	68db      	ldr	r3, [r3, #12]
 8004832:	3301      	adds	r3, #1
 8004834:	60bb      	str	r3, [r7, #8]
 8004836:	e00d      	b.n	8004854 <GasIndexAlgorithm_process+0x74>
            } else if ((sraw > (params->mSraw_Minimum + 32767))) {
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	68db      	ldr	r3, [r3, #12]
 800483c:	4a41      	ldr	r2, [pc, #260]	@ (8004944 <GasIndexAlgorithm_process+0x164>)
 800483e:	4694      	mov	ip, r2
 8004840:	4463      	add	r3, ip
 8004842:	68ba      	ldr	r2, [r7, #8]
 8004844:	429a      	cmp	r2, r3
 8004846:	dd05      	ble.n	8004854 <GasIndexAlgorithm_process+0x74>
                sraw = (params->mSraw_Minimum + 32767);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	68db      	ldr	r3, [r3, #12]
 800484c:	4a3d      	ldr	r2, [pc, #244]	@ (8004944 <GasIndexAlgorithm_process+0x164>)
 800484e:	4694      	mov	ip, r2
 8004850:	4463      	add	r3, ip
 8004852:	60bb      	str	r3, [r7, #8]
            }
            params->mSraw = ((float)((sraw - params->mSraw_Minimum)));
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	68db      	ldr	r3, [r3, #12]
 8004858:	68ba      	ldr	r2, [r7, #8]
 800485a:	1ad3      	subs	r3, r2, r3
 800485c:	0018      	movs	r0, r3
 800485e:	f7fc fdff 	bl	8001460 <__aeabi_i2f>
 8004862:	1c02      	adds	r2, r0, #0
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	635a      	str	r2, [r3, #52]	@ 0x34
        }
        if (((params->mAlgorithm_Type ==
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d005      	beq.n	800487c <GasIndexAlgorithm_process+0x9c>
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
             GasIndexAlgorithm__mean_variance_estimator__is_initialized(
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	0018      	movs	r0, r3
 8004874:	f000 f945 	bl	8004b02 <GasIndexAlgorithm__mean_variance_estimator__is_initialized>
 8004878:	1e03      	subs	r3, r0, #0
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
 800487a:	d014      	beq.n	80048a6 <GasIndexAlgorithm_process+0xc6>
                 params))) {
            params->mGas_Index =
                GasIndexAlgorithm__mox_model__process(params, params->mSraw);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	1c11      	adds	r1, r2, #0
 8004884:	0018      	movs	r0, r3
 8004886:	f000 fbd1 	bl	800502c <GasIndexAlgorithm__mox_model__process>
 800488a:	1c02      	adds	r2, r0, #0
            params->mGas_Index =
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	639a      	str	r2, [r3, #56]	@ 0x38
            params->mGas_Index = GasIndexAlgorithm__sigmoid_scaled__process(
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	1c11      	adds	r1, r2, #0
 8004898:	0018      	movs	r0, r3
 800489a:	f000 fc25 	bl	80050e8 <GasIndexAlgorithm__sigmoid_scaled__process>
 800489e:	1c02      	adds	r2, r0, #0
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	639a      	str	r2, [r3, #56]	@ 0x38
 80048a4:	e003      	b.n	80048ae <GasIndexAlgorithm_process+0xce>
                params, params->mGas_Index);
        } else {
            params->mGas_Index = params->mIndex_Offset;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	689a      	ldr	r2, [r3, #8]
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        params->mGas_Index = GasIndexAlgorithm__adaptive_lowpass__process(
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	1c11      	adds	r1, r2, #0
 80048b6:	0018      	movs	r0, r3
 80048b8:	f000 fcec 	bl	8005294 <GasIndexAlgorithm__adaptive_lowpass__process>
 80048bc:	1c02      	adds	r2, r0, #0
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	639a      	str	r2, [r3, #56]	@ 0x38
            params, params->mGas_Index);
        if ((params->mGas_Index < 0.5f)) {
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048c6:	21fc      	movs	r1, #252	@ 0xfc
 80048c8:	0589      	lsls	r1, r1, #22
 80048ca:	1c18      	adds	r0, r3, #0
 80048cc:	f7fb fdfe 	bl	80004cc <__aeabi_fcmplt>
 80048d0:	1e03      	subs	r3, r0, #0
 80048d2:	d003      	beq.n	80048dc <GasIndexAlgorithm_process+0xfc>
            params->mGas_Index = 0.5f;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	22fc      	movs	r2, #252	@ 0xfc
 80048d8:	0592      	lsls	r2, r2, #22
 80048da:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        if ((params->mSraw > 0.f)) {
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048e0:	2100      	movs	r1, #0
 80048e2:	1c18      	adds	r0, r3, #0
 80048e4:	f7fb fe06 	bl	80004f4 <__aeabi_fcmpgt>
 80048e8:	1e03      	subs	r3, r0, #0
 80048ea:	d015      	beq.n	8004918 <GasIndexAlgorithm_process+0x138>
            GasIndexAlgorithm__mean_variance_estimator__process(params,
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	1c11      	adds	r1, r2, #0
 80048f4:	0018      	movs	r0, r3
 80048f6:	f000 fa4f 	bl	8004d98 <GasIndexAlgorithm__mean_variance_estimator__process>
                                                                params->mSraw);
            GasIndexAlgorithm__mox_model__set_parameters(
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	0018      	movs	r0, r3
 80048fe:	f000 f8e5 	bl	8004acc <GasIndexAlgorithm__mean_variance_estimator__get_std>
 8004902:	1c04      	adds	r4, r0, #0
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	0018      	movs	r0, r3
 8004908:	f000 f8ea 	bl	8004ae0 <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 800490c:	1c02      	adds	r2, r0, #0
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	1c21      	adds	r1, r4, #0
 8004912:	0018      	movs	r0, r3
 8004914:	f000 fb7a 	bl	800500c <GasIndexAlgorithm__mox_model__set_parameters>
=======
 8004834:	b590      	push	{r4, r7, lr}
 8004836:	b085      	sub	sp, #20
 8004838:	af00      	add	r7, sp, #0
 800483a:	60f8      	str	r0, [r7, #12]
 800483c:	60b9      	str	r1, [r7, #8]
 800483e:	607a      	str	r2, [r7, #4]

    if ((params->mUptime <= GasIndexAlgorithm_INITIAL_BLACKOUT)) {
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004844:	4952      	ldr	r1, [pc, #328]	@ (8004990 <GasIndexAlgorithm_process+0x15c>)
 8004846:	1c18      	adds	r0, r3, #0
 8004848:	f7fb fe4a 	bl	80004e0 <__aeabi_fcmple>
 800484c:	1e03      	subs	r3, r0, #0
 800484e:	d00c      	beq.n	800486a <GasIndexAlgorithm_process+0x36>
        params->mUptime = (params->mUptime + params->mSamplingInterval);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	1c19      	adds	r1, r3, #0
 800485a:	1c10      	adds	r0, r2, #0
 800485c:	f7fb ffae 	bl	80007bc <__aeabi_fadd>
 8004860:	1c03      	adds	r3, r0, #0
 8004862:	1c1a      	adds	r2, r3, #0
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	631a      	str	r2, [r3, #48]	@ 0x30
 8004868:	e080      	b.n	800496c <GasIndexAlgorithm_process+0x138>
    } else {
        if (((sraw > 0) && (sraw < 65000))) {
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	2b00      	cmp	r3, #0
 800486e:	dd25      	ble.n	80048bc <GasIndexAlgorithm_process+0x88>
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	4a48      	ldr	r2, [pc, #288]	@ (8004994 <GasIndexAlgorithm_process+0x160>)
 8004874:	4293      	cmp	r3, r2
 8004876:	dc21      	bgt.n	80048bc <GasIndexAlgorithm_process+0x88>
            if ((sraw < (params->mSraw_Minimum + 1))) {
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	68db      	ldr	r3, [r3, #12]
 800487c:	68ba      	ldr	r2, [r7, #8]
 800487e:	429a      	cmp	r2, r3
 8004880:	dc04      	bgt.n	800488c <GasIndexAlgorithm_process+0x58>
                sraw = (params->mSraw_Minimum + 1);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	68db      	ldr	r3, [r3, #12]
 8004886:	3301      	adds	r3, #1
 8004888:	60bb      	str	r3, [r7, #8]
 800488a:	e00d      	b.n	80048a8 <GasIndexAlgorithm_process+0x74>
            } else if ((sraw > (params->mSraw_Minimum + 32767))) {
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	68db      	ldr	r3, [r3, #12]
 8004890:	4a41      	ldr	r2, [pc, #260]	@ (8004998 <GasIndexAlgorithm_process+0x164>)
 8004892:	4694      	mov	ip, r2
 8004894:	4463      	add	r3, ip
 8004896:	68ba      	ldr	r2, [r7, #8]
 8004898:	429a      	cmp	r2, r3
 800489a:	dd05      	ble.n	80048a8 <GasIndexAlgorithm_process+0x74>
                sraw = (params->mSraw_Minimum + 32767);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	68db      	ldr	r3, [r3, #12]
 80048a0:	4a3d      	ldr	r2, [pc, #244]	@ (8004998 <GasIndexAlgorithm_process+0x164>)
 80048a2:	4694      	mov	ip, r2
 80048a4:	4463      	add	r3, ip
 80048a6:	60bb      	str	r3, [r7, #8]
            }
            params->mSraw = ((float)((sraw - params->mSraw_Minimum)));
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	68db      	ldr	r3, [r3, #12]
 80048ac:	68ba      	ldr	r2, [r7, #8]
 80048ae:	1ad3      	subs	r3, r2, r3
 80048b0:	0018      	movs	r0, r3
 80048b2:	f7fc fe0b 	bl	80014cc <__aeabi_i2f>
 80048b6:	1c02      	adds	r2, r0, #0
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	635a      	str	r2, [r3, #52]	@ 0x34
        }
        if (((params->mAlgorithm_Type ==
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d005      	beq.n	80048d0 <GasIndexAlgorithm_process+0x9c>
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
             GasIndexAlgorithm__mean_variance_estimator__is_initialized(
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	0018      	movs	r0, r3
 80048c8:	f000 f945 	bl	8004b56 <GasIndexAlgorithm__mean_variance_estimator__is_initialized>
 80048cc:	1e03      	subs	r3, r0, #0
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
 80048ce:	d014      	beq.n	80048fa <GasIndexAlgorithm_process+0xc6>
                 params))) {
            params->mGas_Index =
                GasIndexAlgorithm__mox_model__process(params, params->mSraw);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	1c11      	adds	r1, r2, #0
 80048d8:	0018      	movs	r0, r3
 80048da:	f000 fbd1 	bl	8005080 <GasIndexAlgorithm__mox_model__process>
 80048de:	1c02      	adds	r2, r0, #0
            params->mGas_Index =
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	639a      	str	r2, [r3, #56]	@ 0x38
            params->mGas_Index = GasIndexAlgorithm__sigmoid_scaled__process(
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	1c11      	adds	r1, r2, #0
 80048ec:	0018      	movs	r0, r3
 80048ee:	f000 fc25 	bl	800513c <GasIndexAlgorithm__sigmoid_scaled__process>
 80048f2:	1c02      	adds	r2, r0, #0
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	639a      	str	r2, [r3, #56]	@ 0x38
 80048f8:	e003      	b.n	8004902 <GasIndexAlgorithm_process+0xce>
                params, params->mGas_Index);
        } else {
            params->mGas_Index = params->mIndex_Offset;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	689a      	ldr	r2, [r3, #8]
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        params->mGas_Index = GasIndexAlgorithm__adaptive_lowpass__process(
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	1c11      	adds	r1, r2, #0
 800490a:	0018      	movs	r0, r3
 800490c:	f000 fcec 	bl	80052e8 <GasIndexAlgorithm__adaptive_lowpass__process>
 8004910:	1c02      	adds	r2, r0, #0
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	639a      	str	r2, [r3, #56]	@ 0x38
            params, params->mGas_Index);
        if ((params->mGas_Index < 0.5f)) {
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800491a:	21fc      	movs	r1, #252	@ 0xfc
 800491c:	0589      	lsls	r1, r1, #22
 800491e:	1c18      	adds	r0, r3, #0
 8004920:	f7fb fdd4 	bl	80004cc <__aeabi_fcmplt>
 8004924:	1e03      	subs	r3, r0, #0
 8004926:	d003      	beq.n	8004930 <GasIndexAlgorithm_process+0xfc>
            params->mGas_Index = 0.5f;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	22fc      	movs	r2, #252	@ 0xfc
 800492c:	0592      	lsls	r2, r2, #22
 800492e:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        if ((params->mSraw > 0.f)) {
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004934:	2100      	movs	r1, #0
 8004936:	1c18      	adds	r0, r3, #0
 8004938:	f7fb fddc 	bl	80004f4 <__aeabi_fcmpgt>
 800493c:	1e03      	subs	r3, r0, #0
 800493e:	d015      	beq.n	800496c <GasIndexAlgorithm_process+0x138>
            GasIndexAlgorithm__mean_variance_estimator__process(params,
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	1c11      	adds	r1, r2, #0
 8004948:	0018      	movs	r0, r3
 800494a:	f000 fa4f 	bl	8004dec <GasIndexAlgorithm__mean_variance_estimator__process>
                                                                params->mSraw);
            GasIndexAlgorithm__mox_model__set_parameters(
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	0018      	movs	r0, r3
 8004952:	f000 f8e5 	bl	8004b20 <GasIndexAlgorithm__mean_variance_estimator__get_std>
 8004956:	1c04      	adds	r4, r0, #0
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	0018      	movs	r0, r3
 800495c:	f000 f8ea 	bl	8004b34 <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 8004960:	1c02      	adds	r2, r0, #0
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	1c21      	adds	r1, r4, #0
 8004966:	0018      	movs	r0, r3
 8004968:	f000 fb7a 	bl	8005060 <GasIndexAlgorithm__mox_model__set_parameters>
>>>>>>> main
                params,
                GasIndexAlgorithm__mean_variance_estimator__get_std(params),
                GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
        }
    }
    *gas_index = ((int32_t)((params->mGas_Index + 0.5f)));
<<<<<<< HEAD
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800491c:	21fc      	movs	r1, #252	@ 0xfc
 800491e:	0589      	lsls	r1, r1, #22
 8004920:	1c18      	adds	r0, r3, #0
 8004922:	f7fb ff15 	bl	8000750 <__aeabi_fadd>
 8004926:	1c03      	adds	r3, r0, #0
 8004928:	1c18      	adds	r0, r3, #0
 800492a:	f7fc fd79 	bl	8001420 <__aeabi_f2iz>
 800492e:	0002      	movs	r2, r0
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	601a      	str	r2, [r3, #0]
    return;
 8004934:	46c0      	nop			@ (mov r8, r8)
}
 8004936:	46bd      	mov	sp, r7
 8004938:	b005      	add	sp, #20
 800493a:	bd90      	pop	{r4, r7, pc}
 800493c:	42340000 	.word	0x42340000
 8004940:	0000fde7 	.word	0x0000fde7
 8004944:	00007fff 	.word	0x00007fff

08004948 <GasIndexAlgorithm__mean_variance_estimator__set_parameters>:

static void GasIndexAlgorithm__mean_variance_estimator__set_parameters(
    GasIndexAlgorithmParams* params) {
 8004948:	b5b0      	push	{r4, r5, r7, lr}
 800494a:	b082      	sub	sp, #8
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]

    params->m_Mean_Variance_Estimator___Initialized = false;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	223c      	movs	r2, #60	@ 0x3c
 8004954:	2100      	movs	r1, #0
 8004956:	5499      	strb	r1, [r3, r2]
    params->m_Mean_Variance_Estimator___Mean = 0.f;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2200      	movs	r2, #0
 800495c:	641a      	str	r2, [r3, #64]	@ 0x40
    params->m_Mean_Variance_Estimator___Sraw_Offset = 0.f;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2200      	movs	r2, #0
 8004962:	645a      	str	r2, [r3, #68]	@ 0x44
    params->m_Mean_Variance_Estimator___Std = params->mSraw_Std_Initial;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	649a      	str	r2, [r3, #72]	@ 0x48
=======
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004970:	21fc      	movs	r1, #252	@ 0xfc
 8004972:	0589      	lsls	r1, r1, #22
 8004974:	1c18      	adds	r0, r3, #0
 8004976:	f7fb ff21 	bl	80007bc <__aeabi_fadd>
 800497a:	1c03      	adds	r3, r0, #0
 800497c:	1c18      	adds	r0, r3, #0
 800497e:	f7fc fd85 	bl	800148c <__aeabi_f2iz>
 8004982:	0002      	movs	r2, r0
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	601a      	str	r2, [r3, #0]
    return;
 8004988:	46c0      	nop			@ (mov r8, r8)
}
 800498a:	46bd      	mov	sp, r7
 800498c:	b005      	add	sp, #20
 800498e:	bd90      	pop	{r4, r7, pc}
 8004990:	42340000 	.word	0x42340000
 8004994:	0000fde7 	.word	0x0000fde7
 8004998:	00007fff 	.word	0x00007fff

0800499c <GasIndexAlgorithm__mean_variance_estimator__set_parameters>:

static void GasIndexAlgorithm__mean_variance_estimator__set_parameters(
    GasIndexAlgorithmParams* params) {
 800499c:	b5b0      	push	{r4, r5, r7, lr}
 800499e:	b082      	sub	sp, #8
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]

    params->m_Mean_Variance_Estimator___Initialized = false;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	223c      	movs	r2, #60	@ 0x3c
 80049a8:	2100      	movs	r1, #0
 80049aa:	5499      	strb	r1, [r3, r2]
    params->m_Mean_Variance_Estimator___Mean = 0.f;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2200      	movs	r2, #0
 80049b0:	641a      	str	r2, [r3, #64]	@ 0x40
    params->m_Mean_Variance_Estimator___Sraw_Offset = 0.f;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2200      	movs	r2, #0
 80049b6:	645a      	str	r2, [r3, #68]	@ 0x44
    params->m_Mean_Variance_Estimator___Std = params->mSraw_Std_Initial;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	649a      	str	r2, [r3, #72]	@ 0x48
>>>>>>> main
    params->m_Mean_Variance_Estimator___Gamma_Mean =
        (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
          (params->mSamplingInterval / 3600.f)) /
<<<<<<< HEAD
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	4952      	ldr	r1, [pc, #328]	@ (8004abc <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 8004972:	1c18      	adds	r0, r3, #0
 8004974:	f7fc f876 	bl	8000a64 <__aeabi_fdiv>
 8004978:	1c03      	adds	r3, r0, #0
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 800497a:	2188      	movs	r1, #136	@ 0x88
 800497c:	05c9      	lsls	r1, r1, #23
 800497e:	1c18      	adds	r0, r3, #0
 8004980:	f7fc fa56 	bl	8000e30 <__aeabi_fmul>
 8004984:	1c03      	adds	r3, r0, #0
 8004986:	1c1d      	adds	r5, r3, #0
         (params->mTau_Mean_Hours + (params->mSamplingInterval / 3600.f)));
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	494a      	ldr	r1, [pc, #296]	@ (8004abc <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 8004992:	1c18      	adds	r0, r3, #0
 8004994:	f7fc f866 	bl	8000a64 <__aeabi_fdiv>
 8004998:	1c03      	adds	r3, r0, #0
 800499a:	1c19      	adds	r1, r3, #0
 800499c:	1c20      	adds	r0, r4, #0
 800499e:	f7fb fed7 	bl	8000750 <__aeabi_fadd>
 80049a2:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 80049a4:	1c19      	adds	r1, r3, #0
 80049a6:	1c28      	adds	r0, r5, #0
 80049a8:	f7fc f85c 	bl	8000a64 <__aeabi_fdiv>
 80049ac:	1c03      	adds	r3, r0, #0
 80049ae:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Mean =
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	64da      	str	r2, [r3, #76]	@ 0x4c
    params->m_Mean_Variance_Estimator___Gamma_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          (params->mSamplingInterval / 3600.f)) /
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	4940      	ldr	r1, [pc, #256]	@ (8004abc <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 80049ba:	1c18      	adds	r0, r3, #0
 80049bc:	f7fc f852 	bl	8000a64 <__aeabi_fdiv>
 80049c0:	1c03      	adds	r3, r0, #0
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 80049c2:	2185      	movs	r1, #133	@ 0x85
 80049c4:	05c9      	lsls	r1, r1, #23
 80049c6:	1c18      	adds	r0, r3, #0
 80049c8:	f7fc fa32 	bl	8000e30 <__aeabi_fmul>
 80049cc:	1c03      	adds	r3, r0, #0
 80049ce:	1c1d      	adds	r5, r3, #0
         (params->mTau_Variance_Hours + (params->mSamplingInterval / 3600.f)));
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	4938      	ldr	r1, [pc, #224]	@ (8004abc <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 80049da:	1c18      	adds	r0, r3, #0
 80049dc:	f7fc f842 	bl	8000a64 <__aeabi_fdiv>
 80049e0:	1c03      	adds	r3, r0, #0
 80049e2:	1c19      	adds	r1, r3, #0
 80049e4:	1c20      	adds	r0, r4, #0
 80049e6:	f7fb feb3 	bl	8000750 <__aeabi_fadd>
 80049ea:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 80049ec:	1c19      	adds	r1, r3, #0
 80049ee:	1c28      	adds	r0, r5, #0
 80049f0:	f7fc f838 	bl	8000a64 <__aeabi_fdiv>
 80049f4:	1c03      	adds	r3, r0, #0
 80049f6:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Variance =
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	651a      	str	r2, [r3, #80]	@ 0x50
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	2b01      	cmp	r3, #1
 8004a02:	d118      	bne.n	8004a36 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0xee>
=======
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	4952      	ldr	r1, [pc, #328]	@ (8004b10 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 80049c6:	1c18      	adds	r0, r3, #0
 80049c8:	f7fc f882 	bl	8000ad0 <__aeabi_fdiv>
 80049cc:	1c03      	adds	r3, r0, #0
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 80049ce:	2188      	movs	r1, #136	@ 0x88
 80049d0:	05c9      	lsls	r1, r1, #23
 80049d2:	1c18      	adds	r0, r3, #0
 80049d4:	f7fc fa62 	bl	8000e9c <__aeabi_fmul>
 80049d8:	1c03      	adds	r3, r0, #0
 80049da:	1c1d      	adds	r5, r3, #0
         (params->mTau_Mean_Hours + (params->mSamplingInterval / 3600.f)));
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	494a      	ldr	r1, [pc, #296]	@ (8004b10 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 80049e6:	1c18      	adds	r0, r3, #0
 80049e8:	f7fc f872 	bl	8000ad0 <__aeabi_fdiv>
 80049ec:	1c03      	adds	r3, r0, #0
 80049ee:	1c19      	adds	r1, r3, #0
 80049f0:	1c20      	adds	r0, r4, #0
 80049f2:	f7fb fee3 	bl	80007bc <__aeabi_fadd>
 80049f6:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 80049f8:	1c19      	adds	r1, r3, #0
 80049fa:	1c28      	adds	r0, r5, #0
 80049fc:	f7fc f868 	bl	8000ad0 <__aeabi_fdiv>
 8004a00:	1c03      	adds	r3, r0, #0
 8004a02:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Mean =
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	64da      	str	r2, [r3, #76]	@ 0x4c
    params->m_Mean_Variance_Estimator___Gamma_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          (params->mSamplingInterval / 3600.f)) /
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	4940      	ldr	r1, [pc, #256]	@ (8004b10 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 8004a0e:	1c18      	adds	r0, r3, #0
 8004a10:	f7fc f85e 	bl	8000ad0 <__aeabi_fdiv>
 8004a14:	1c03      	adds	r3, r0, #0
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 8004a16:	2185      	movs	r1, #133	@ 0x85
 8004a18:	05c9      	lsls	r1, r1, #23
 8004a1a:	1c18      	adds	r0, r3, #0
 8004a1c:	f7fc fa3e 	bl	8000e9c <__aeabi_fmul>
 8004a20:	1c03      	adds	r3, r0, #0
 8004a22:	1c1d      	adds	r5, r3, #0
         (params->mTau_Variance_Hours + (params->mSamplingInterval / 3600.f)));
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	4938      	ldr	r1, [pc, #224]	@ (8004b10 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 8004a2e:	1c18      	adds	r0, r3, #0
 8004a30:	f7fc f84e 	bl	8000ad0 <__aeabi_fdiv>
 8004a34:	1c03      	adds	r3, r0, #0
 8004a36:	1c19      	adds	r1, r3, #0
 8004a38:	1c20      	adds	r0, r4, #0
 8004a3a:	f7fb febf 	bl	80007bc <__aeabi_fadd>
 8004a3e:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 8004a40:	1c19      	adds	r1, r3, #0
 8004a42:	1c28      	adds	r0, r5, #0
 8004a44:	f7fc f844 	bl	8000ad0 <__aeabi_fdiv>
 8004a48:	1c03      	adds	r3, r0, #0
 8004a4a:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Variance =
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	651a      	str	r2, [r3, #80]	@ 0x50
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	d118      	bne.n	8004a8a <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0xee>
>>>>>>> main
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
<<<<<<< HEAD
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 8004a08:	2188      	movs	r1, #136	@ 0x88
 8004a0a:	05c9      	lsls	r1, r1, #23
 8004a0c:	1c18      	adds	r0, r3, #0
 8004a0e:	f7fc fa0f 	bl	8000e30 <__aeabi_fmul>
 8004a12:	1c03      	adds	r3, r0, #0
 8004a14:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
              params->mSamplingInterval));
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
 8004a1a:	4929      	ldr	r1, [pc, #164]	@ (8004ac0 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x178>)
 8004a1c:	1c18      	adds	r0, r3, #0
 8004a1e:	f7fb fe97 	bl	8000750 <__aeabi_fadd>
 8004a22:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 8004a24:	1c19      	adds	r1, r3, #0
 8004a26:	1c20      	adds	r0, r4, #0
 8004a28:	f7fc f81c 	bl	8000a64 <__aeabi_fdiv>
 8004a2c:	1c03      	adds	r3, r0, #0
 8004a2e:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	655a      	str	r2, [r3, #84]	@ 0x54
 8004a34:	e017      	b.n	8004a66 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x11e>
=======
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 8004a5c:	2188      	movs	r1, #136	@ 0x88
 8004a5e:	05c9      	lsls	r1, r1, #23
 8004a60:	1c18      	adds	r0, r3, #0
 8004a62:	f7fc fa1b 	bl	8000e9c <__aeabi_fmul>
 8004a66:	1c03      	adds	r3, r0, #0
 8004a68:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
              params->mSamplingInterval));
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
 8004a6e:	4929      	ldr	r1, [pc, #164]	@ (8004b14 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x178>)
 8004a70:	1c18      	adds	r0, r3, #0
 8004a72:	f7fb fea3 	bl	80007bc <__aeabi_fadd>
 8004a76:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 8004a78:	1c19      	adds	r1, r3, #0
 8004a7a:	1c20      	adds	r0, r4, #0
 8004a7c:	f7fc f828 	bl	8000ad0 <__aeabi_fdiv>
 8004a80:	1c03      	adds	r3, r0, #0
 8004a82:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	655a      	str	r2, [r3, #84]	@ 0x54
 8004a88:	e017      	b.n	8004aba <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x11e>
>>>>>>> main
    } else {
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
<<<<<<< HEAD
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 8004a3a:	2188      	movs	r1, #136	@ 0x88
 8004a3c:	05c9      	lsls	r1, r1, #23
 8004a3e:	1c18      	adds	r0, r3, #0
 8004a40:	f7fc f9f6 	bl	8000e30 <__aeabi_fmul>
 8004a44:	1c03      	adds	r3, r0, #0
 8004a46:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
              params->mSamplingInterval));
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
 8004a4c:	491d      	ldr	r1, [pc, #116]	@ (8004ac4 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x17c>)
 8004a4e:	1c18      	adds	r0, r3, #0
 8004a50:	f7fb fe7e 	bl	8000750 <__aeabi_fadd>
 8004a54:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 8004a56:	1c19      	adds	r1, r3, #0
 8004a58:	1c20      	adds	r0, r4, #0
 8004a5a:	f7fc f803 	bl	8000a64 <__aeabi_fdiv>
 8004a5e:	1c03      	adds	r3, r0, #0
 8004a60:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	655a      	str	r2, [r3, #84]	@ 0x54
=======
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 8004a8e:	2188      	movs	r1, #136	@ 0x88
 8004a90:	05c9      	lsls	r1, r1, #23
 8004a92:	1c18      	adds	r0, r3, #0
 8004a94:	f7fc fa02 	bl	8000e9c <__aeabi_fmul>
 8004a98:	1c03      	adds	r3, r0, #0
 8004a9a:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
              params->mSamplingInterval));
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
 8004aa0:	491d      	ldr	r1, [pc, #116]	@ (8004b18 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x17c>)
 8004aa2:	1c18      	adds	r0, r3, #0
 8004aa4:	f7fb fe8a 	bl	80007bc <__aeabi_fadd>
 8004aa8:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 8004aaa:	1c19      	adds	r1, r3, #0
 8004aac:	1c20      	adds	r0, r4, #0
 8004aae:	f7fc f80f 	bl	8000ad0 <__aeabi_fdiv>
 8004ab2:	1c03      	adds	r3, r0, #0
 8004ab4:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	655a      	str	r2, [r3, #84]	@ 0x54
>>>>>>> main
    }
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          params->mSamplingInterval) /
<<<<<<< HEAD
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	685b      	ldr	r3, [r3, #4]
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 8004a6a:	2185      	movs	r1, #133	@ 0x85
 8004a6c:	05c9      	lsls	r1, r1, #23
 8004a6e:	1c18      	adds	r0, r3, #0
 8004a70:	f7fc f9de 	bl	8000e30 <__aeabi_fmul>
 8004a74:	1c03      	adds	r3, r0, #0
 8004a76:	1c1c      	adds	r4, r3, #0
         (GasIndexAlgorithm_TAU_INITIAL_VARIANCE + params->mSamplingInterval));
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	4912      	ldr	r1, [pc, #72]	@ (8004ac8 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x180>)
 8004a7e:	1c18      	adds	r0, r3, #0
 8004a80:	f7fb fe66 	bl	8000750 <__aeabi_fadd>
 8004a84:	1c03      	adds	r3, r0, #0
          params->mSamplingInterval) /
 8004a86:	1c19      	adds	r1, r3, #0
 8004a88:	1c20      	adds	r0, r4, #0
 8004a8a:	f7fb ffeb 	bl	8000a64 <__aeabi_fdiv>
 8004a8e:	1c03      	adds	r3, r0, #0
 8004a90:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	659a      	str	r2, [r3, #88]	@ 0x58
    params->m_Mean_Variance_Estimator__Gamma_Mean = 0.f;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	65da      	str	r2, [r3, #92]	@ 0x5c
    params->m_Mean_Variance_Estimator__Gamma_Variance = 0.f;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Uptime_Gamma = 0.f;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	665a      	str	r2, [r3, #100]	@ 0x64
    params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	669a      	str	r2, [r3, #104]	@ 0x68
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	66da      	str	r2, [r3, #108]	@ 0x6c
}
 8004ab4:	46c0      	nop			@ (mov r8, r8)
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	b002      	add	sp, #8
 8004aba:	bdb0      	pop	{r4, r5, r7, pc}
 8004abc:	45610000 	.word	0x45610000
 8004ac0:	44960000 	.word	0x44960000
 8004ac4:	41a00000 	.word	0x41a00000
 8004ac8:	451c4000 	.word	0x451c4000

08004acc <GasIndexAlgorithm__mean_variance_estimator__get_std>:
=======
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	685b      	ldr	r3, [r3, #4]
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 8004abe:	2185      	movs	r1, #133	@ 0x85
 8004ac0:	05c9      	lsls	r1, r1, #23
 8004ac2:	1c18      	adds	r0, r3, #0
 8004ac4:	f7fc f9ea 	bl	8000e9c <__aeabi_fmul>
 8004ac8:	1c03      	adds	r3, r0, #0
 8004aca:	1c1c      	adds	r4, r3, #0
         (GasIndexAlgorithm_TAU_INITIAL_VARIANCE + params->mSamplingInterval));
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	4912      	ldr	r1, [pc, #72]	@ (8004b1c <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x180>)
 8004ad2:	1c18      	adds	r0, r3, #0
 8004ad4:	f7fb fe72 	bl	80007bc <__aeabi_fadd>
 8004ad8:	1c03      	adds	r3, r0, #0
          params->mSamplingInterval) /
 8004ada:	1c19      	adds	r1, r3, #0
 8004adc:	1c20      	adds	r0, r4, #0
 8004ade:	f7fb fff7 	bl	8000ad0 <__aeabi_fdiv>
 8004ae2:	1c03      	adds	r3, r0, #0
 8004ae4:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	659a      	str	r2, [r3, #88]	@ 0x58
    params->m_Mean_Variance_Estimator__Gamma_Mean = 0.f;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2200      	movs	r2, #0
 8004aee:	65da      	str	r2, [r3, #92]	@ 0x5c
    params->m_Mean_Variance_Estimator__Gamma_Variance = 0.f;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2200      	movs	r2, #0
 8004af4:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Uptime_Gamma = 0.f;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2200      	movs	r2, #0
 8004afa:	665a      	str	r2, [r3, #100]	@ 0x64
    params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2200      	movs	r2, #0
 8004b00:	669a      	str	r2, [r3, #104]	@ 0x68
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2200      	movs	r2, #0
 8004b06:	66da      	str	r2, [r3, #108]	@ 0x6c
}
 8004b08:	46c0      	nop			@ (mov r8, r8)
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	b002      	add	sp, #8
 8004b0e:	bdb0      	pop	{r4, r5, r7, pc}
 8004b10:	45610000 	.word	0x45610000
 8004b14:	44960000 	.word	0x44960000
 8004b18:	41a00000 	.word	0x41a00000
 8004b1c:	451c4000 	.word	0x451c4000

08004b20 <GasIndexAlgorithm__mean_variance_estimator__get_std>:
>>>>>>> main
    params->m_Mean_Variance_Estimator___Uptime_Gamma = uptime_gamma;
    params->m_Mean_Variance_Estimator___Initialized = true;
}

static float GasIndexAlgorithm__mean_variance_estimator__get_std(
    const GasIndexAlgorithmParams* params) {
<<<<<<< HEAD
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b082      	sub	sp, #8
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Std;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
}
 8004ad8:	1c18      	adds	r0, r3, #0
 8004ada:	46bd      	mov	sp, r7
 8004adc:	b002      	add	sp, #8
 8004ade:	bd80      	pop	{r7, pc}

08004ae0 <GasIndexAlgorithm__mean_variance_estimator__get_mean>:

static float GasIndexAlgorithm__mean_variance_estimator__get_mean(
    const GasIndexAlgorithmParams* params) {
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b082      	sub	sp, #8
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]

    return (params->m_Mean_Variance_Estimator___Mean +
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
            params->m_Mean_Variance_Estimator___Sraw_Offset);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    return (params->m_Mean_Variance_Estimator___Mean +
 8004af0:	1c19      	adds	r1, r3, #0
 8004af2:	1c10      	adds	r0, r2, #0
 8004af4:	f7fb fe2c 	bl	8000750 <__aeabi_fadd>
 8004af8:	1c03      	adds	r3, r0, #0
}
 8004afa:	1c18      	adds	r0, r3, #0
 8004afc:	46bd      	mov	sp, r7
 8004afe:	b002      	add	sp, #8
 8004b00:	bd80      	pop	{r7, pc}

08004b02 <GasIndexAlgorithm__mean_variance_estimator__is_initialized>:

static bool GasIndexAlgorithm__mean_variance_estimator__is_initialized(
    GasIndexAlgorithmParams* params) {
 8004b02:	b580      	push	{r7, lr}
 8004b04:	b082      	sub	sp, #8
 8004b06:	af00      	add	r7, sp, #0
 8004b08:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Initialized;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	223c      	movs	r2, #60	@ 0x3c
 8004b0e:	5c9b      	ldrb	r3, [r3, r2]
}
 8004b10:	0018      	movs	r0, r3
 8004b12:	46bd      	mov	sp, r7
 8004b14:	b002      	add	sp, #8
 8004b16:	bd80      	pop	{r7, pc}

08004b18 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>:

static void GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(
    GasIndexAlgorithmParams* params) {
 8004b18:	b5b0      	push	{r4, r5, r7, lr}
 8004b1a:	b08c      	sub	sp, #48	@ 0x30
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
=======
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b082      	sub	sp, #8
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Std;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
}
 8004b2c:	1c18      	adds	r0, r3, #0
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	b002      	add	sp, #8
 8004b32:	bd80      	pop	{r7, pc}

08004b34 <GasIndexAlgorithm__mean_variance_estimator__get_mean>:

static float GasIndexAlgorithm__mean_variance_estimator__get_mean(
    const GasIndexAlgorithmParams* params) {
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b082      	sub	sp, #8
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]

    return (params->m_Mean_Variance_Estimator___Mean +
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
            params->m_Mean_Variance_Estimator___Sraw_Offset);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    return (params->m_Mean_Variance_Estimator___Mean +
 8004b44:	1c19      	adds	r1, r3, #0
 8004b46:	1c10      	adds	r0, r2, #0
 8004b48:	f7fb fe38 	bl	80007bc <__aeabi_fadd>
 8004b4c:	1c03      	adds	r3, r0, #0
}
 8004b4e:	1c18      	adds	r0, r3, #0
 8004b50:	46bd      	mov	sp, r7
 8004b52:	b002      	add	sp, #8
 8004b54:	bd80      	pop	{r7, pc}

08004b56 <GasIndexAlgorithm__mean_variance_estimator__is_initialized>:

static bool GasIndexAlgorithm__mean_variance_estimator__is_initialized(
    GasIndexAlgorithmParams* params) {
 8004b56:	b580      	push	{r7, lr}
 8004b58:	b082      	sub	sp, #8
 8004b5a:	af00      	add	r7, sp, #0
 8004b5c:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Initialized;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	223c      	movs	r2, #60	@ 0x3c
 8004b62:	5c9b      	ldrb	r3, [r3, r2]
}
 8004b64:	0018      	movs	r0, r3
 8004b66:	46bd      	mov	sp, r7
 8004b68:	b002      	add	sp, #8
 8004b6a:	bd80      	pop	{r7, pc}

08004b6c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>:

static void GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(
    GasIndexAlgorithmParams* params) {
 8004b6c:	b5b0      	push	{r4, r5, r7, lr}
 8004b6e:	b08c      	sub	sp, #48	@ 0x30
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
>>>>>>> main
    float gamma_variance;
    float gating_threshold_variance;
    float sigmoid_gating_variance;

    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
                    params->mSamplingInterval);
<<<<<<< HEAD
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	685b      	ldr	r3, [r3, #4]
    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
 8004b24:	1c19      	adds	r1, r3, #0
 8004b26:	4895      	ldr	r0, [pc, #596]	@ (8004d7c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x264>)
 8004b28:	f7fc fac0 	bl	80010ac <__aeabi_fsub>
 8004b2c:	1c03      	adds	r3, r0, #0
 8004b2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if ((params->m_Mean_Variance_Estimator___Uptime_Gamma < uptime_limit)) {
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004b34:	1c19      	adds	r1, r3, #0
 8004b36:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004b38:	f7fb fcdc 	bl	80004f4 <__aeabi_fcmpgt>
 8004b3c:	1e03      	subs	r3, r0, #0
 8004b3e:	d00b      	beq.n	8004b58 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x40>
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
             params->mSamplingInterval);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 8004b48:	1c19      	adds	r1, r3, #0
 8004b4a:	1c10      	adds	r0, r2, #0
 8004b4c:	f7fb fe00 	bl	8000750 <__aeabi_fadd>
 8004b50:	1c03      	adds	r3, r0, #0
 8004b52:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    if ((params->m_Mean_Variance_Estimator___Uptime_Gating < uptime_limit)) {
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004b5c:	1c19      	adds	r1, r3, #0
 8004b5e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004b60:	f7fb fcc8 	bl	80004f4 <__aeabi_fcmpgt>
 8004b64:	1e03      	subs	r3, r0, #0
 8004b66:	d00b      	beq.n	8004b80 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x68>
        params->m_Mean_Variance_Estimator___Uptime_Gating =
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
             params->mSamplingInterval);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 8004b70:	1c19      	adds	r1, r3, #0
 8004b72:	1c10      	adds	r0, r2, #0
 8004b74:	f7fb fdec 	bl	8000750 <__aeabi_fadd>
 8004b78:	1c03      	adds	r3, r0, #0
 8004b7a:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gating =
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6959      	ldr	r1, [r3, #20]
 8004b84:	4a7e      	ldr	r2, [pc, #504]	@ (8004d80 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	0018      	movs	r0, r3
 8004b8a:	f000 f9f1 	bl	8004f70 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
=======
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	685b      	ldr	r3, [r3, #4]
    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
 8004b78:	1c19      	adds	r1, r3, #0
 8004b7a:	4895      	ldr	r0, [pc, #596]	@ (8004dd0 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x264>)
 8004b7c:	f7fc facc 	bl	8001118 <__aeabi_fsub>
 8004b80:	1c03      	adds	r3, r0, #0
 8004b82:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if ((params->m_Mean_Variance_Estimator___Uptime_Gamma < uptime_limit)) {
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004b88:	1c19      	adds	r1, r3, #0
 8004b8a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004b8c:	f7fb fcb2 	bl	80004f4 <__aeabi_fcmpgt>
 8004b90:	1e03      	subs	r3, r0, #0
 8004b92:	d00b      	beq.n	8004bac <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x40>
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
             params->mSamplingInterval);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 8004b9c:	1c19      	adds	r1, r3, #0
 8004b9e:	1c10      	adds	r0, r2, #0
 8004ba0:	f7fb fe0c 	bl	80007bc <__aeabi_fadd>
 8004ba4:	1c03      	adds	r3, r0, #0
 8004ba6:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    if ((params->m_Mean_Variance_Estimator___Uptime_Gating < uptime_limit)) {
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004bb0:	1c19      	adds	r1, r3, #0
 8004bb2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004bb4:	f7fb fc9e 	bl	80004f4 <__aeabi_fcmpgt>
 8004bb8:	1e03      	subs	r3, r0, #0
 8004bba:	d00b      	beq.n	8004bd4 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x68>
        params->m_Mean_Variance_Estimator___Uptime_Gating =
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
             params->mSamplingInterval);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 8004bc4:	1c19      	adds	r1, r3, #0
 8004bc6:	1c10      	adds	r0, r2, #0
 8004bc8:	f7fb fdf8 	bl	80007bc <__aeabi_fadd>
 8004bcc:	1c03      	adds	r3, r0, #0
 8004bce:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gating =
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6959      	ldr	r1, [r3, #20]
 8004bd8:	4a7e      	ldr	r2, [pc, #504]	@ (8004dd4 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	0018      	movs	r0, r3
 8004bde:	f000 f9f1 	bl	8004fc4 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
>>>>>>> main
        params, params->mInit_Duration_Mean,
        GasIndexAlgorithm_INIT_TRANSITION_MEAN);
    sigmoid_gamma_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
<<<<<<< HEAD
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	1c11      	adds	r1, r2, #0
 8004b96:	0018      	movs	r0, r3
 8004b98:	f000 f9fa 	bl	8004f90 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8004b9c:	1c03      	adds	r3, r0, #0
 8004b9e:	62bb      	str	r3, [r7, #40]	@ 0x28
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 8004bac:	1c19      	adds	r1, r3, #0
 8004bae:	1c10      	adds	r0, r2, #0
 8004bb0:	f7fc fa7c 	bl	80010ac <__aeabi_fsub>
 8004bb4:	1c03      	adds	r3, r0, #0
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 8004bb6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004bb8:	1c18      	adds	r0, r3, #0
 8004bba:	f7fc f939 	bl	8000e30 <__aeabi_fmul>
 8004bbe:	1c03      	adds	r3, r0, #0
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 8004bc0:	1c19      	adds	r1, r3, #0
 8004bc2:	1c20      	adds	r0, r4, #0
 8004bc4:	f7fb fdc4 	bl	8000750 <__aeabi_fadd>
 8004bc8:	1c03      	adds	r3, r0, #0
 8004bca:	627b      	str	r3, [r7, #36]	@ 0x24
                   sigmoid_gamma_mean));
    gating_threshold_mean =
        (params->mGating_Threshold +
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 8004bd4:	1c19      	adds	r1, r3, #0
 8004bd6:	486b      	ldr	r0, [pc, #428]	@ (8004d84 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 8004bd8:	f7fc fa68 	bl	80010ac <__aeabi_fsub>
 8004bdc:	1c03      	adds	r3, r0, #0
 8004bde:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	1c11      	adds	r1, r2, #0
 8004be8:	0018      	movs	r0, r3
 8004bea:	f000 f9d1 	bl	8004f90 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8004bee:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 8004bf0:	1c19      	adds	r1, r3, #0
 8004bf2:	1c28      	adds	r0, r5, #0
 8004bf4:	f7fc f91c 	bl	8000e30 <__aeabi_fmul>
 8004bf8:	1c03      	adds	r3, r0, #0
    gating_threshold_mean =
 8004bfa:	1c19      	adds	r1, r3, #0
 8004bfc:	1c20      	adds	r0, r4, #0
 8004bfe:	f7fb fda7 	bl	8000750 <__aeabi_fadd>
 8004c02:	1c03      	adds	r3, r0, #0
 8004c04:	623b      	str	r3, [r7, #32]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 8004c06:	4a60      	ldr	r2, [pc, #384]	@ (8004d88 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 8004c08:	6a39      	ldr	r1, [r7, #32]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	0018      	movs	r0, r3
 8004c0e:	f000 f9af 	bl	8004f70 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
=======
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	1c11      	adds	r1, r2, #0
 8004bea:	0018      	movs	r0, r3
 8004bec:	f000 f9fa 	bl	8004fe4 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8004bf0:	1c03      	adds	r3, r0, #0
 8004bf2:	62bb      	str	r3, [r7, #40]	@ 0x28
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 8004c00:	1c19      	adds	r1, r3, #0
 8004c02:	1c10      	adds	r0, r2, #0
 8004c04:	f7fc fa88 	bl	8001118 <__aeabi_fsub>
 8004c08:	1c03      	adds	r3, r0, #0
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 8004c0a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004c0c:	1c18      	adds	r0, r3, #0
 8004c0e:	f7fc f945 	bl	8000e9c <__aeabi_fmul>
 8004c12:	1c03      	adds	r3, r0, #0
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 8004c14:	1c19      	adds	r1, r3, #0
 8004c16:	1c20      	adds	r0, r4, #0
 8004c18:	f7fb fdd0 	bl	80007bc <__aeabi_fadd>
 8004c1c:	1c03      	adds	r3, r0, #0
 8004c1e:	627b      	str	r3, [r7, #36]	@ 0x24
                   sigmoid_gamma_mean));
    gating_threshold_mean =
        (params->mGating_Threshold +
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 8004c28:	1c19      	adds	r1, r3, #0
 8004c2a:	486b      	ldr	r0, [pc, #428]	@ (8004dd8 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 8004c2c:	f7fc fa74 	bl	8001118 <__aeabi_fsub>
 8004c30:	1c03      	adds	r3, r0, #0
 8004c32:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	1c11      	adds	r1, r2, #0
 8004c3c:	0018      	movs	r0, r3
 8004c3e:	f000 f9d1 	bl	8004fe4 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8004c42:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 8004c44:	1c19      	adds	r1, r3, #0
 8004c46:	1c28      	adds	r0, r5, #0
 8004c48:	f7fc f928 	bl	8000e9c <__aeabi_fmul>
 8004c4c:	1c03      	adds	r3, r0, #0
    gating_threshold_mean =
 8004c4e:	1c19      	adds	r1, r3, #0
 8004c50:	1c20      	adds	r0, r4, #0
 8004c52:	f7fb fdb3 	bl	80007bc <__aeabi_fadd>
 8004c56:	1c03      	adds	r3, r0, #0
 8004c58:	623b      	str	r3, [r7, #32]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 8004c5a:	4a60      	ldr	r2, [pc, #384]	@ (8004ddc <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 8004c5c:	6a39      	ldr	r1, [r7, #32]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	0018      	movs	r0, r3
 8004c62:	f000 f9af 	bl	8004fc4 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
>>>>>>> main
        params, gating_threshold_mean,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
<<<<<<< HEAD
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	1c11      	adds	r1, r2, #0
 8004c1a:	0018      	movs	r0, r3
 8004c1c:	f000 f9b8 	bl	8004f90 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8004c20:	1c03      	adds	r3, r0, #0
 8004c22:	61fb      	str	r3, [r7, #28]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Mean =
        (sigmoid_gating_mean * gamma_mean);
 8004c24:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004c26:	69f8      	ldr	r0, [r7, #28]
 8004c28:	f7fc f902 	bl	8000e30 <__aeabi_fmul>
 8004c2c:	1c03      	adds	r3, r0, #0
 8004c2e:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Mean =
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	65da      	str	r2, [r3, #92]	@ 0x5c
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6999      	ldr	r1, [r3, #24]
 8004c38:	4a51      	ldr	r2, [pc, #324]	@ (8004d80 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	0018      	movs	r0, r3
 8004c3e:	f000 f997 	bl	8004f70 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
=======
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	1c11      	adds	r1, r2, #0
 8004c6e:	0018      	movs	r0, r3
 8004c70:	f000 f9b8 	bl	8004fe4 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8004c74:	1c03      	adds	r3, r0, #0
 8004c76:	61fb      	str	r3, [r7, #28]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Mean =
        (sigmoid_gating_mean * gamma_mean);
 8004c78:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004c7a:	69f8      	ldr	r0, [r7, #28]
 8004c7c:	f7fc f90e 	bl	8000e9c <__aeabi_fmul>
 8004c80:	1c03      	adds	r3, r0, #0
 8004c82:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Mean =
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	65da      	str	r2, [r3, #92]	@ 0x5c
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6999      	ldr	r1, [r3, #24]
 8004c8c:	4a51      	ldr	r2, [pc, #324]	@ (8004dd4 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	0018      	movs	r0, r3
 8004c92:	f000 f997 	bl	8004fc4 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
>>>>>>> main
        params, params->mInit_Duration_Variance,
        GasIndexAlgorithm_INIT_TRANSITION_VARIANCE);
    sigmoid_gamma_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
<<<<<<< HEAD
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	1c11      	adds	r1, r2, #0
 8004c4a:	0018      	movs	r0, r3
 8004c4c:	f000 f9a0 	bl	8004f90 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8004c50:	1c03      	adds	r3, r0, #0
 8004c52:	61bb      	str	r3, [r7, #24]
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_variance =
        (params->m_Mean_Variance_Estimator___Gamma_Variance +
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6d1c      	ldr	r4, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 8004c60:	1c19      	adds	r1, r3, #0
 8004c62:	1c10      	adds	r0, r2, #0
 8004c64:	f7fc fa22 	bl	80010ac <__aeabi_fsub>
 8004c68:	1c03      	adds	r3, r0, #0
 8004c6a:	1c1d      	adds	r5, r3, #0
          (sigmoid_gamma_variance - sigmoid_gamma_mean)));
 8004c6c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004c6e:	69b8      	ldr	r0, [r7, #24]
 8004c70:	f7fc fa1c 	bl	80010ac <__aeabi_fsub>
 8004c74:	1c03      	adds	r3, r0, #0
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 8004c76:	1c19      	adds	r1, r3, #0
 8004c78:	1c28      	adds	r0, r5, #0
 8004c7a:	f7fc f8d9 	bl	8000e30 <__aeabi_fmul>
 8004c7e:	1c03      	adds	r3, r0, #0
    gamma_variance =
 8004c80:	1c19      	adds	r1, r3, #0
 8004c82:	1c20      	adds	r0, r4, #0
 8004c84:	f7fb fd64 	bl	8000750 <__aeabi_fadd>
 8004c88:	1c03      	adds	r3, r0, #0
 8004c8a:	617b      	str	r3, [r7, #20]
    gating_threshold_variance =
        (params->mGating_Threshold +
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 8004c94:	1c19      	adds	r1, r3, #0
 8004c96:	483b      	ldr	r0, [pc, #236]	@ (8004d84 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 8004c98:	f7fc fa08 	bl	80010ac <__aeabi_fsub>
 8004c9c:	1c03      	adds	r3, r0, #0
 8004c9e:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	1c11      	adds	r1, r2, #0
 8004ca8:	0018      	movs	r0, r3
 8004caa:	f000 f971 	bl	8004f90 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8004cae:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 8004cb0:	1c19      	adds	r1, r3, #0
 8004cb2:	1c28      	adds	r0, r5, #0
 8004cb4:	f7fc f8bc 	bl	8000e30 <__aeabi_fmul>
 8004cb8:	1c03      	adds	r3, r0, #0
    gating_threshold_variance =
 8004cba:	1c19      	adds	r1, r3, #0
 8004cbc:	1c20      	adds	r0, r4, #0
 8004cbe:	f7fb fd47 	bl	8000750 <__aeabi_fadd>
 8004cc2:	1c03      	adds	r3, r0, #0
 8004cc4:	613b      	str	r3, [r7, #16]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 8004cc6:	4a30      	ldr	r2, [pc, #192]	@ (8004d88 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 8004cc8:	6939      	ldr	r1, [r7, #16]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	0018      	movs	r0, r3
 8004cce:	f000 f94f 	bl	8004f70 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
=======
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	1c11      	adds	r1, r2, #0
 8004c9e:	0018      	movs	r0, r3
 8004ca0:	f000 f9a0 	bl	8004fe4 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8004ca4:	1c03      	adds	r3, r0, #0
 8004ca6:	61bb      	str	r3, [r7, #24]
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_variance =
        (params->m_Mean_Variance_Estimator___Gamma_Variance +
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6d1c      	ldr	r4, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 8004cb4:	1c19      	adds	r1, r3, #0
 8004cb6:	1c10      	adds	r0, r2, #0
 8004cb8:	f7fc fa2e 	bl	8001118 <__aeabi_fsub>
 8004cbc:	1c03      	adds	r3, r0, #0
 8004cbe:	1c1d      	adds	r5, r3, #0
          (sigmoid_gamma_variance - sigmoid_gamma_mean)));
 8004cc0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004cc2:	69b8      	ldr	r0, [r7, #24]
 8004cc4:	f7fc fa28 	bl	8001118 <__aeabi_fsub>
 8004cc8:	1c03      	adds	r3, r0, #0
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 8004cca:	1c19      	adds	r1, r3, #0
 8004ccc:	1c28      	adds	r0, r5, #0
 8004cce:	f7fc f8e5 	bl	8000e9c <__aeabi_fmul>
 8004cd2:	1c03      	adds	r3, r0, #0
    gamma_variance =
 8004cd4:	1c19      	adds	r1, r3, #0
 8004cd6:	1c20      	adds	r0, r4, #0
 8004cd8:	f7fb fd70 	bl	80007bc <__aeabi_fadd>
 8004cdc:	1c03      	adds	r3, r0, #0
 8004cde:	617b      	str	r3, [r7, #20]
    gating_threshold_variance =
        (params->mGating_Threshold +
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 8004ce8:	1c19      	adds	r1, r3, #0
 8004cea:	483b      	ldr	r0, [pc, #236]	@ (8004dd8 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 8004cec:	f7fc fa14 	bl	8001118 <__aeabi_fsub>
 8004cf0:	1c03      	adds	r3, r0, #0
 8004cf2:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	1c11      	adds	r1, r2, #0
 8004cfc:	0018      	movs	r0, r3
 8004cfe:	f000 f971 	bl	8004fe4 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8004d02:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 8004d04:	1c19      	adds	r1, r3, #0
 8004d06:	1c28      	adds	r0, r5, #0
 8004d08:	f7fc f8c8 	bl	8000e9c <__aeabi_fmul>
 8004d0c:	1c03      	adds	r3, r0, #0
    gating_threshold_variance =
 8004d0e:	1c19      	adds	r1, r3, #0
 8004d10:	1c20      	adds	r0, r4, #0
 8004d12:	f7fb fd53 	bl	80007bc <__aeabi_fadd>
 8004d16:	1c03      	adds	r3, r0, #0
 8004d18:	613b      	str	r3, [r7, #16]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 8004d1a:	4a30      	ldr	r2, [pc, #192]	@ (8004ddc <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 8004d1c:	6939      	ldr	r1, [r7, #16]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	0018      	movs	r0, r3
 8004d22:	f000 f94f 	bl	8004fc4 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
>>>>>>> main
        params, gating_threshold_variance,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
<<<<<<< HEAD
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	1c11      	adds	r1, r2, #0
 8004cda:	0018      	movs	r0, r3
 8004cdc:	f000 f958 	bl	8004f90 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8004ce0:	1c03      	adds	r3, r0, #0
 8004ce2:	60fb      	str	r3, [r7, #12]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Variance =
        (sigmoid_gating_variance * gamma_variance);
 8004ce4:	6979      	ldr	r1, [r7, #20]
 8004ce6:	68f8      	ldr	r0, [r7, #12]
 8004ce8:	f7fc f8a2 	bl	8000e30 <__aeabi_fmul>
 8004cec:	1c03      	adds	r3, r0, #0
 8004cee:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Variance =
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6edc      	ldr	r4, [r3, #108]	@ 0x6c
         ((params->mSamplingInterval / 60.f) *
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	4923      	ldr	r1, [pc, #140]	@ (8004d8c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x274>)
 8004cfe:	1c18      	adds	r0, r3, #0
 8004d00:	f7fb feb0 	bl	8000a64 <__aeabi_fdiv>
 8004d04:	1c03      	adds	r3, r0, #0
 8004d06:	1c1d      	adds	r5, r3, #0
          (((1.f - sigmoid_gating_mean) *
 8004d08:	69f9      	ldr	r1, [r7, #28]
 8004d0a:	20fe      	movs	r0, #254	@ 0xfe
 8004d0c:	0580      	lsls	r0, r0, #22
 8004d0e:	f7fc f9cd 	bl	80010ac <__aeabi_fsub>
 8004d12:	1c03      	adds	r3, r0, #0
 8004d14:	491e      	ldr	r1, [pc, #120]	@ (8004d90 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x278>)
 8004d16:	1c18      	adds	r0, r3, #0
 8004d18:	f7fc f88a 	bl	8000e30 <__aeabi_fmul>
 8004d1c:	1c03      	adds	r3, r0, #0
            (1.f + GasIndexAlgorithm_GATING_MAX_RATIO)) -
 8004d1e:	491d      	ldr	r1, [pc, #116]	@ (8004d94 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x27c>)
 8004d20:	1c18      	adds	r0, r3, #0
 8004d22:	f7fc f9c3 	bl	80010ac <__aeabi_fsub>
 8004d26:	1c03      	adds	r3, r0, #0
         ((params->mSamplingInterval / 60.f) *
 8004d28:	1c19      	adds	r1, r3, #0
 8004d2a:	1c28      	adds	r0, r5, #0
 8004d2c:	f7fc f880 	bl	8000e30 <__aeabi_fmul>
 8004d30:	1c03      	adds	r3, r0, #0
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 8004d32:	1c19      	adds	r1, r3, #0
 8004d34:	1c20      	adds	r0, r4, #0
 8004d36:	f7fb fd0b 	bl	8000750 <__aeabi_fadd>
 8004d3a:	1c03      	adds	r3, r0, #0
 8004d3c:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	66da      	str	r2, [r3, #108]	@ 0x6c
           GasIndexAlgorithm_GATING_MAX_RATIO)));
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes < 0.f)) {
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004d46:	2100      	movs	r1, #0
 8004d48:	1c18      	adds	r0, r3, #0
 8004d4a:	f7fb fbbf 	bl	80004cc <__aeabi_fcmplt>
 8004d4e:	1e03      	subs	r3, r0, #0
 8004d50:	d002      	beq.n	8004d58 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x240>
        params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2200      	movs	r2, #0
 8004d56:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
         params->mGating_Max_Duration_Minutes)) {
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	691b      	ldr	r3, [r3, #16]
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 8004d60:	1c19      	adds	r1, r3, #0
 8004d62:	1c10      	adds	r0, r2, #0
 8004d64:	f7fb fbc6 	bl	80004f4 <__aeabi_fcmpgt>
 8004d68:	1e03      	subs	r3, r0, #0
 8004d6a:	d100      	bne.n	8004d6e <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x256>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
    }
}
 8004d6c:	e002      	b.n	8004d74 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x25c>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2200      	movs	r2, #0
 8004d72:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004d74:	46c0      	nop			@ (mov r8, r8)
 8004d76:	46bd      	mov	sp, r7
 8004d78:	b00c      	add	sp, #48	@ 0x30
 8004d7a:	bdb0      	pop	{r4, r5, r7, pc}
 8004d7c:	46fffe00 	.word	0x46fffe00
 8004d80:	3c23d70a 	.word	0x3c23d70a
 8004d84:	43ff0000 	.word	0x43ff0000
 8004d88:	3db851ec 	.word	0x3db851ec
 8004d8c:	42700000 	.word	0x42700000
 8004d90:	3fa66666 	.word	0x3fa66666
 8004d94:	3e99999a 	.word	0x3e99999a

08004d98 <GasIndexAlgorithm__mean_variance_estimator__process>:

static void GasIndexAlgorithm__mean_variance_estimator__process(
    GasIndexAlgorithmParams* params, float sraw) {
 8004d98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d9a:	b087      	sub	sp, #28
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
 8004da0:	6039      	str	r1, [r7, #0]
=======
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	1c11      	adds	r1, r2, #0
 8004d2e:	0018      	movs	r0, r3
 8004d30:	f000 f958 	bl	8004fe4 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8004d34:	1c03      	adds	r3, r0, #0
 8004d36:	60fb      	str	r3, [r7, #12]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Variance =
        (sigmoid_gating_variance * gamma_variance);
 8004d38:	6979      	ldr	r1, [r7, #20]
 8004d3a:	68f8      	ldr	r0, [r7, #12]
 8004d3c:	f7fc f8ae 	bl	8000e9c <__aeabi_fmul>
 8004d40:	1c03      	adds	r3, r0, #0
 8004d42:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Variance =
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6edc      	ldr	r4, [r3, #108]	@ 0x6c
         ((params->mSamplingInterval / 60.f) *
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	4923      	ldr	r1, [pc, #140]	@ (8004de0 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x274>)
 8004d52:	1c18      	adds	r0, r3, #0
 8004d54:	f7fb febc 	bl	8000ad0 <__aeabi_fdiv>
 8004d58:	1c03      	adds	r3, r0, #0
 8004d5a:	1c1d      	adds	r5, r3, #0
          (((1.f - sigmoid_gating_mean) *
 8004d5c:	69f9      	ldr	r1, [r7, #28]
 8004d5e:	20fe      	movs	r0, #254	@ 0xfe
 8004d60:	0580      	lsls	r0, r0, #22
 8004d62:	f7fc f9d9 	bl	8001118 <__aeabi_fsub>
 8004d66:	1c03      	adds	r3, r0, #0
 8004d68:	491e      	ldr	r1, [pc, #120]	@ (8004de4 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x278>)
 8004d6a:	1c18      	adds	r0, r3, #0
 8004d6c:	f7fc f896 	bl	8000e9c <__aeabi_fmul>
 8004d70:	1c03      	adds	r3, r0, #0
            (1.f + GasIndexAlgorithm_GATING_MAX_RATIO)) -
 8004d72:	491d      	ldr	r1, [pc, #116]	@ (8004de8 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x27c>)
 8004d74:	1c18      	adds	r0, r3, #0
 8004d76:	f7fc f9cf 	bl	8001118 <__aeabi_fsub>
 8004d7a:	1c03      	adds	r3, r0, #0
         ((params->mSamplingInterval / 60.f) *
 8004d7c:	1c19      	adds	r1, r3, #0
 8004d7e:	1c28      	adds	r0, r5, #0
 8004d80:	f7fc f88c 	bl	8000e9c <__aeabi_fmul>
 8004d84:	1c03      	adds	r3, r0, #0
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 8004d86:	1c19      	adds	r1, r3, #0
 8004d88:	1c20      	adds	r0, r4, #0
 8004d8a:	f7fb fd17 	bl	80007bc <__aeabi_fadd>
 8004d8e:	1c03      	adds	r3, r0, #0
 8004d90:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	66da      	str	r2, [r3, #108]	@ 0x6c
           GasIndexAlgorithm_GATING_MAX_RATIO)));
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes < 0.f)) {
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004d9a:	2100      	movs	r1, #0
 8004d9c:	1c18      	adds	r0, r3, #0
 8004d9e:	f7fb fb95 	bl	80004cc <__aeabi_fcmplt>
 8004da2:	1e03      	subs	r3, r0, #0
 8004da4:	d002      	beq.n	8004dac <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x240>
        params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2200      	movs	r2, #0
 8004daa:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
         params->mGating_Max_Duration_Minutes)) {
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	691b      	ldr	r3, [r3, #16]
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 8004db4:	1c19      	adds	r1, r3, #0
 8004db6:	1c10      	adds	r0, r2, #0
 8004db8:	f7fb fb9c 	bl	80004f4 <__aeabi_fcmpgt>
 8004dbc:	1e03      	subs	r3, r0, #0
 8004dbe:	d100      	bne.n	8004dc2 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x256>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
    }
}
 8004dc0:	e002      	b.n	8004dc8 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x25c>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004dc8:	46c0      	nop			@ (mov r8, r8)
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	b00c      	add	sp, #48	@ 0x30
 8004dce:	bdb0      	pop	{r4, r5, r7, pc}
 8004dd0:	46fffe00 	.word	0x46fffe00
 8004dd4:	3c23d70a 	.word	0x3c23d70a
 8004dd8:	43ff0000 	.word	0x43ff0000
 8004ddc:	3db851ec 	.word	0x3db851ec
 8004de0:	42700000 	.word	0x42700000
 8004de4:	3fa66666 	.word	0x3fa66666
 8004de8:	3e99999a 	.word	0x3e99999a

08004dec <GasIndexAlgorithm__mean_variance_estimator__process>:

static void GasIndexAlgorithm__mean_variance_estimator__process(
    GasIndexAlgorithmParams* params, float sraw) {
 8004dec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004dee:	b087      	sub	sp, #28
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
 8004df4:	6039      	str	r1, [r7, #0]
>>>>>>> main

    float delta_sgp;
    float c;
    float additional_scaling;

    if ((params->m_Mean_Variance_Estimator___Initialized == false)) {
<<<<<<< HEAD
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	223c      	movs	r2, #60	@ 0x3c
 8004da6:	5c9b      	ldrb	r3, [r3, r2]
 8004da8:	2201      	movs	r2, #1
 8004daa:	4053      	eors	r3, r2
 8004dac:	b2db      	uxtb	r3, r3
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d00a      	beq.n	8004dc8 <GasIndexAlgorithm__mean_variance_estimator__process+0x30>
        params->m_Mean_Variance_Estimator___Initialized = true;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	223c      	movs	r2, #60	@ 0x3c
 8004db6:	2101      	movs	r1, #1
 8004db8:	5499      	strb	r1, [r3, r2]
        params->m_Mean_Variance_Estimator___Sraw_Offset = sraw;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	683a      	ldr	r2, [r7, #0]
 8004dbe:	645a      	str	r2, [r3, #68]	@ 0x44
        params->m_Mean_Variance_Estimator___Mean = 0.f;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	641a      	str	r2, [r3, #64]	@ 0x40
=======
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	223c      	movs	r2, #60	@ 0x3c
 8004dfa:	5c9b      	ldrb	r3, [r3, r2]
 8004dfc:	2201      	movs	r2, #1
 8004dfe:	4053      	eors	r3, r2
 8004e00:	b2db      	uxtb	r3, r3
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d00a      	beq.n	8004e1c <GasIndexAlgorithm__mean_variance_estimator__process+0x30>
        params->m_Mean_Variance_Estimator___Initialized = true;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	223c      	movs	r2, #60	@ 0x3c
 8004e0a:	2101      	movs	r1, #1
 8004e0c:	5499      	strb	r1, [r3, r2]
        params->m_Mean_Variance_Estimator___Sraw_Offset = sraw;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	683a      	ldr	r2, [r7, #0]
 8004e12:	645a      	str	r2, [r3, #68]	@ 0x44
        params->m_Mean_Variance_Estimator___Mean = 0.f;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2200      	movs	r2, #0
 8004e18:	641a      	str	r2, [r3, #64]	@ 0x40
>>>>>>> main
        params->m_Mean_Variance_Estimator___Mean =
            (params->m_Mean_Variance_Estimator___Mean +
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
              GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING));
    }
}
<<<<<<< HEAD
 8004dc6:	e0c8      	b.n	8004f5a <GasIndexAlgorithm__mean_variance_estimator__process+0x1c2>
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dcc:	4965      	ldr	r1, [pc, #404]	@ (8004f64 <GasIndexAlgorithm__mean_variance_estimator__process+0x1cc>)
 8004dce:	1c18      	adds	r0, r3, #0
 8004dd0:	f7fb fb9a 	bl	8000508 <__aeabi_fcmpge>
 8004dd4:	1e03      	subs	r3, r0, #0
 8004dd6:	d107      	bne.n	8004de8 <GasIndexAlgorithm__mean_variance_estimator__process+0x50>
             (params->m_Mean_Variance_Estimator___Mean <= -100.f))) {
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 8004ddc:	4962      	ldr	r1, [pc, #392]	@ (8004f68 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d0>)
 8004dde:	1c18      	adds	r0, r3, #0
 8004de0:	f7fb fb7e 	bl	80004e0 <__aeabi_fcmple>
 8004de4:	1e03      	subs	r3, r0, #0
 8004de6:	d00e      	beq.n	8004e06 <GasIndexAlgorithm__mean_variance_estimator__process+0x6e>
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
                 params->m_Mean_Variance_Estimator___Mean);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 8004df0:	1c19      	adds	r1, r3, #0
 8004df2:	1c10      	adds	r0, r2, #0
 8004df4:	f7fb fcac 	bl	8000750 <__aeabi_fadd>
 8004df8:	1c03      	adds	r3, r0, #0
 8004dfa:	1c1a      	adds	r2, r3, #0
            params->m_Mean_Variance_Estimator___Sraw_Offset =
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	645a      	str	r2, [r3, #68]	@ 0x44
            params->m_Mean_Variance_Estimator___Mean = 0.f;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2200      	movs	r2, #0
 8004e04:	641a      	str	r2, [r3, #64]	@ 0x40
        sraw = (sraw - params->m_Mean_Variance_Estimator___Sraw_Offset);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e0a:	1c19      	adds	r1, r3, #0
 8004e0c:	6838      	ldr	r0, [r7, #0]
 8004e0e:	f7fc f94d 	bl	80010ac <__aeabi_fsub>
 8004e12:	1c03      	adds	r3, r0, #0
 8004e14:	603b      	str	r3, [r7, #0]
        GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(params);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	0018      	movs	r0, r3
 8004e1a:	f7ff fe7d 	bl	8004b18 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>
        delta_sgp = ((sraw - params->m_Mean_Variance_Estimator___Mean) /
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e22:	1c19      	adds	r1, r3, #0
 8004e24:	6838      	ldr	r0, [r7, #0]
 8004e26:	f7fc f941 	bl	80010ac <__aeabi_fsub>
 8004e2a:	1c03      	adds	r3, r0, #0
 8004e2c:	2185      	movs	r1, #133	@ 0x85
 8004e2e:	05c9      	lsls	r1, r1, #23
 8004e30:	1c18      	adds	r0, r3, #0
 8004e32:	f7fb fe17 	bl	8000a64 <__aeabi_fdiv>
 8004e36:	1c03      	adds	r3, r0, #0
 8004e38:	60fb      	str	r3, [r7, #12]
        if ((delta_sgp < 0.f)) {
 8004e3a:	2100      	movs	r1, #0
 8004e3c:	68f8      	ldr	r0, [r7, #12]
 8004e3e:	f7fb fb45 	bl	80004cc <__aeabi_fcmplt>
 8004e42:	1e03      	subs	r3, r0, #0
 8004e44:	d008      	beq.n	8004e58 <GasIndexAlgorithm__mean_variance_estimator__process+0xc0>
            c = (params->m_Mean_Variance_Estimator___Std - delta_sgp);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e4a:	68f9      	ldr	r1, [r7, #12]
 8004e4c:	1c18      	adds	r0, r3, #0
 8004e4e:	f7fc f92d 	bl	80010ac <__aeabi_fsub>
 8004e52:	1c03      	adds	r3, r0, #0
 8004e54:	617b      	str	r3, [r7, #20]
 8004e56:	e007      	b.n	8004e68 <GasIndexAlgorithm__mean_variance_estimator__process+0xd0>
            c = (params->m_Mean_Variance_Estimator___Std + delta_sgp);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e5c:	1c19      	adds	r1, r3, #0
 8004e5e:	68f8      	ldr	r0, [r7, #12]
 8004e60:	f7fb fc76 	bl	8000750 <__aeabi_fadd>
 8004e64:	1c03      	adds	r3, r0, #0
 8004e66:	617b      	str	r3, [r7, #20]
        additional_scaling = 1.f;
 8004e68:	23fe      	movs	r3, #254	@ 0xfe
 8004e6a:	059b      	lsls	r3, r3, #22
 8004e6c:	613b      	str	r3, [r7, #16]
        if ((c > 1440.f)) {
 8004e6e:	493f      	ldr	r1, [pc, #252]	@ (8004f6c <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 8004e70:	6978      	ldr	r0, [r7, #20]
 8004e72:	f7fb fb3f 	bl	80004f4 <__aeabi_fcmpgt>
 8004e76:	1e03      	subs	r3, r0, #0
 8004e78:	d010      	beq.n	8004e9c <GasIndexAlgorithm__mean_variance_estimator__process+0x104>
            additional_scaling = ((c / 1440.f) * (c / 1440.f));
 8004e7a:	493c      	ldr	r1, [pc, #240]	@ (8004f6c <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 8004e7c:	6978      	ldr	r0, [r7, #20]
 8004e7e:	f7fb fdf1 	bl	8000a64 <__aeabi_fdiv>
 8004e82:	1c03      	adds	r3, r0, #0
 8004e84:	1c1c      	adds	r4, r3, #0
 8004e86:	4939      	ldr	r1, [pc, #228]	@ (8004f6c <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 8004e88:	6978      	ldr	r0, [r7, #20]
 8004e8a:	f7fb fdeb 	bl	8000a64 <__aeabi_fdiv>
 8004e8e:	1c03      	adds	r3, r0, #0
 8004e90:	1c19      	adds	r1, r3, #0
 8004e92:	1c20      	adds	r0, r4, #0
 8004e94:	f7fb ffcc 	bl	8000e30 <__aeabi_fmul>
 8004e98:	1c03      	adds	r3, r0, #0
 8004e9a:	613b      	str	r3, [r7, #16]
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING -
 8004ea0:	1c19      	adds	r1, r3, #0
 8004ea2:	2085      	movs	r0, #133	@ 0x85
 8004ea4:	05c0      	lsls	r0, r0, #23
 8004ea6:	f7fc f901 	bl	80010ac <__aeabi_fsub>
 8004eaa:	1c03      	adds	r3, r0, #0
            (sqrtf((additional_scaling *
 8004eac:	6939      	ldr	r1, [r7, #16]
 8004eae:	1c18      	adds	r0, r3, #0
 8004eb0:	f7fb ffbe 	bl	8000e30 <__aeabi_fmul>
 8004eb4:	1c03      	adds	r3, r0, #0
 8004eb6:	1c18      	adds	r0, r3, #0
 8004eb8:	f00a fdd0 	bl	800fa5c <sqrtf>
 8004ebc:	1c06      	adds	r6, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
                   (params->m_Mean_Variance_Estimator___Std /
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6c9d      	ldr	r5, [r3, #72]	@ 0x48
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 8004ec6:	2185      	movs	r1, #133	@ 0x85
 8004ec8:	05c9      	lsls	r1, r1, #23
 8004eca:	6938      	ldr	r0, [r7, #16]
 8004ecc:	f7fb ffb0 	bl	8000e30 <__aeabi_fmul>
 8004ed0:	1c03      	adds	r3, r0, #0
                   (params->m_Mean_Variance_Estimator___Std /
 8004ed2:	1c19      	adds	r1, r3, #0
 8004ed4:	1c28      	adds	r0, r5, #0
 8004ed6:	f7fb fdc5 	bl	8000a64 <__aeabi_fdiv>
 8004eda:	1c03      	adds	r3, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 8004edc:	1c19      	adds	r1, r3, #0
 8004ede:	1c20      	adds	r0, r4, #0
 8004ee0:	f7fb ffa6 	bl	8000e30 <__aeabi_fmul>
 8004ee4:	1c03      	adds	r3, r0, #0
 8004ee6:	1c1c      	adds	r4, r3, #0
                  (((params->m_Mean_Variance_Estimator__Gamma_Variance *
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004eec:	68f9      	ldr	r1, [r7, #12]
 8004eee:	1c18      	adds	r0, r3, #0
 8004ef0:	f7fb ff9e 	bl	8000e30 <__aeabi_fmul>
 8004ef4:	1c03      	adds	r3, r0, #0
                     delta_sgp) /
 8004ef6:	6939      	ldr	r1, [r7, #16]
 8004ef8:	1c18      	adds	r0, r3, #0
 8004efa:	f7fb fdb3 	bl	8000a64 <__aeabi_fdiv>
 8004efe:	1c03      	adds	r3, r0, #0
                    additional_scaling) *
 8004f00:	68f9      	ldr	r1, [r7, #12]
 8004f02:	1c18      	adds	r0, r3, #0
 8004f04:	f7fb ff94 	bl	8000e30 <__aeabi_fmul>
 8004f08:	1c03      	adds	r3, r0, #0
             sqrtf(
 8004f0a:	1c19      	adds	r1, r3, #0
 8004f0c:	1c20      	adds	r0, r4, #0
 8004f0e:	f7fb fc1f 	bl	8000750 <__aeabi_fadd>
 8004f12:	1c03      	adds	r3, r0, #0
 8004f14:	1c18      	adds	r0, r3, #0
 8004f16:	f00a fda1 	bl	800fa5c <sqrtf>
 8004f1a:	1c03      	adds	r3, r0, #0
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 8004f1c:	1c19      	adds	r1, r3, #0
 8004f1e:	1c30      	adds	r0, r6, #0
 8004f20:	f7fb ff86 	bl	8000e30 <__aeabi_fmul>
 8004f24:	1c03      	adds	r3, r0, #0
 8004f26:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Std =
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	649a      	str	r2, [r3, #72]	@ 0x48
            (params->m_Mean_Variance_Estimator___Mean +
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f34:	68f9      	ldr	r1, [r7, #12]
 8004f36:	1c18      	adds	r0, r3, #0
 8004f38:	f7fb ff7a 	bl	8000e30 <__aeabi_fmul>
 8004f3c:	1c03      	adds	r3, r0, #0
 8004f3e:	2182      	movs	r1, #130	@ 0x82
 8004f40:	05c9      	lsls	r1, r1, #23
 8004f42:	1c18      	adds	r0, r3, #0
 8004f44:	f7fb fd8e 	bl	8000a64 <__aeabi_fdiv>
 8004f48:	1c03      	adds	r3, r0, #0
            (params->m_Mean_Variance_Estimator___Mean +
 8004f4a:	1c19      	adds	r1, r3, #0
 8004f4c:	1c20      	adds	r0, r4, #0
 8004f4e:	f7fb fbff 	bl	8000750 <__aeabi_fadd>
 8004f52:	1c03      	adds	r3, r0, #0
 8004f54:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Mean =
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8004f5a:	46c0      	nop			@ (mov r8, r8)
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	b007      	add	sp, #28
 8004f60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f62:	46c0      	nop			@ (mov r8, r8)
 8004f64:	42c80000 	.word	0x42c80000
 8004f68:	c2c80000 	.word	0xc2c80000
 8004f6c:	44b40000 	.word	0x44b40000

08004f70 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>:
=======
 8004e1a:	e0c8      	b.n	8004fae <GasIndexAlgorithm__mean_variance_estimator__process+0x1c2>
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e20:	4965      	ldr	r1, [pc, #404]	@ (8004fb8 <GasIndexAlgorithm__mean_variance_estimator__process+0x1cc>)
 8004e22:	1c18      	adds	r0, r3, #0
 8004e24:	f7fb fb70 	bl	8000508 <__aeabi_fcmpge>
 8004e28:	1e03      	subs	r3, r0, #0
 8004e2a:	d107      	bne.n	8004e3c <GasIndexAlgorithm__mean_variance_estimator__process+0x50>
             (params->m_Mean_Variance_Estimator___Mean <= -100.f))) {
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 8004e30:	4962      	ldr	r1, [pc, #392]	@ (8004fbc <GasIndexAlgorithm__mean_variance_estimator__process+0x1d0>)
 8004e32:	1c18      	adds	r0, r3, #0
 8004e34:	f7fb fb54 	bl	80004e0 <__aeabi_fcmple>
 8004e38:	1e03      	subs	r3, r0, #0
 8004e3a:	d00e      	beq.n	8004e5a <GasIndexAlgorithm__mean_variance_estimator__process+0x6e>
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
                 params->m_Mean_Variance_Estimator___Mean);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 8004e44:	1c19      	adds	r1, r3, #0
 8004e46:	1c10      	adds	r0, r2, #0
 8004e48:	f7fb fcb8 	bl	80007bc <__aeabi_fadd>
 8004e4c:	1c03      	adds	r3, r0, #0
 8004e4e:	1c1a      	adds	r2, r3, #0
            params->m_Mean_Variance_Estimator___Sraw_Offset =
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	645a      	str	r2, [r3, #68]	@ 0x44
            params->m_Mean_Variance_Estimator___Mean = 0.f;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2200      	movs	r2, #0
 8004e58:	641a      	str	r2, [r3, #64]	@ 0x40
        sraw = (sraw - params->m_Mean_Variance_Estimator___Sraw_Offset);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e5e:	1c19      	adds	r1, r3, #0
 8004e60:	6838      	ldr	r0, [r7, #0]
 8004e62:	f7fc f959 	bl	8001118 <__aeabi_fsub>
 8004e66:	1c03      	adds	r3, r0, #0
 8004e68:	603b      	str	r3, [r7, #0]
        GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(params);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	0018      	movs	r0, r3
 8004e6e:	f7ff fe7d 	bl	8004b6c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>
        delta_sgp = ((sraw - params->m_Mean_Variance_Estimator___Mean) /
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e76:	1c19      	adds	r1, r3, #0
 8004e78:	6838      	ldr	r0, [r7, #0]
 8004e7a:	f7fc f94d 	bl	8001118 <__aeabi_fsub>
 8004e7e:	1c03      	adds	r3, r0, #0
 8004e80:	2185      	movs	r1, #133	@ 0x85
 8004e82:	05c9      	lsls	r1, r1, #23
 8004e84:	1c18      	adds	r0, r3, #0
 8004e86:	f7fb fe23 	bl	8000ad0 <__aeabi_fdiv>
 8004e8a:	1c03      	adds	r3, r0, #0
 8004e8c:	60fb      	str	r3, [r7, #12]
        if ((delta_sgp < 0.f)) {
 8004e8e:	2100      	movs	r1, #0
 8004e90:	68f8      	ldr	r0, [r7, #12]
 8004e92:	f7fb fb1b 	bl	80004cc <__aeabi_fcmplt>
 8004e96:	1e03      	subs	r3, r0, #0
 8004e98:	d008      	beq.n	8004eac <GasIndexAlgorithm__mean_variance_estimator__process+0xc0>
            c = (params->m_Mean_Variance_Estimator___Std - delta_sgp);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e9e:	68f9      	ldr	r1, [r7, #12]
 8004ea0:	1c18      	adds	r0, r3, #0
 8004ea2:	f7fc f939 	bl	8001118 <__aeabi_fsub>
 8004ea6:	1c03      	adds	r3, r0, #0
 8004ea8:	617b      	str	r3, [r7, #20]
 8004eaa:	e007      	b.n	8004ebc <GasIndexAlgorithm__mean_variance_estimator__process+0xd0>
            c = (params->m_Mean_Variance_Estimator___Std + delta_sgp);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004eb0:	1c19      	adds	r1, r3, #0
 8004eb2:	68f8      	ldr	r0, [r7, #12]
 8004eb4:	f7fb fc82 	bl	80007bc <__aeabi_fadd>
 8004eb8:	1c03      	adds	r3, r0, #0
 8004eba:	617b      	str	r3, [r7, #20]
        additional_scaling = 1.f;
 8004ebc:	23fe      	movs	r3, #254	@ 0xfe
 8004ebe:	059b      	lsls	r3, r3, #22
 8004ec0:	613b      	str	r3, [r7, #16]
        if ((c > 1440.f)) {
 8004ec2:	493f      	ldr	r1, [pc, #252]	@ (8004fc0 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 8004ec4:	6978      	ldr	r0, [r7, #20]
 8004ec6:	f7fb fb15 	bl	80004f4 <__aeabi_fcmpgt>
 8004eca:	1e03      	subs	r3, r0, #0
 8004ecc:	d010      	beq.n	8004ef0 <GasIndexAlgorithm__mean_variance_estimator__process+0x104>
            additional_scaling = ((c / 1440.f) * (c / 1440.f));
 8004ece:	493c      	ldr	r1, [pc, #240]	@ (8004fc0 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 8004ed0:	6978      	ldr	r0, [r7, #20]
 8004ed2:	f7fb fdfd 	bl	8000ad0 <__aeabi_fdiv>
 8004ed6:	1c03      	adds	r3, r0, #0
 8004ed8:	1c1c      	adds	r4, r3, #0
 8004eda:	4939      	ldr	r1, [pc, #228]	@ (8004fc0 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 8004edc:	6978      	ldr	r0, [r7, #20]
 8004ede:	f7fb fdf7 	bl	8000ad0 <__aeabi_fdiv>
 8004ee2:	1c03      	adds	r3, r0, #0
 8004ee4:	1c19      	adds	r1, r3, #0
 8004ee6:	1c20      	adds	r0, r4, #0
 8004ee8:	f7fb ffd8 	bl	8000e9c <__aeabi_fmul>
 8004eec:	1c03      	adds	r3, r0, #0
 8004eee:	613b      	str	r3, [r7, #16]
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING -
 8004ef4:	1c19      	adds	r1, r3, #0
 8004ef6:	2085      	movs	r0, #133	@ 0x85
 8004ef8:	05c0      	lsls	r0, r0, #23
 8004efa:	f7fc f90d 	bl	8001118 <__aeabi_fsub>
 8004efe:	1c03      	adds	r3, r0, #0
            (sqrtf((additional_scaling *
 8004f00:	6939      	ldr	r1, [r7, #16]
 8004f02:	1c18      	adds	r0, r3, #0
 8004f04:	f7fb ffca 	bl	8000e9c <__aeabi_fmul>
 8004f08:	1c03      	adds	r3, r0, #0
 8004f0a:	1c18      	adds	r0, r3, #0
 8004f0c:	f00a fef2 	bl	800fcf4 <sqrtf>
 8004f10:	1c06      	adds	r6, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
                   (params->m_Mean_Variance_Estimator___Std /
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6c9d      	ldr	r5, [r3, #72]	@ 0x48
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 8004f1a:	2185      	movs	r1, #133	@ 0x85
 8004f1c:	05c9      	lsls	r1, r1, #23
 8004f1e:	6938      	ldr	r0, [r7, #16]
 8004f20:	f7fb ffbc 	bl	8000e9c <__aeabi_fmul>
 8004f24:	1c03      	adds	r3, r0, #0
                   (params->m_Mean_Variance_Estimator___Std /
 8004f26:	1c19      	adds	r1, r3, #0
 8004f28:	1c28      	adds	r0, r5, #0
 8004f2a:	f7fb fdd1 	bl	8000ad0 <__aeabi_fdiv>
 8004f2e:	1c03      	adds	r3, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 8004f30:	1c19      	adds	r1, r3, #0
 8004f32:	1c20      	adds	r0, r4, #0
 8004f34:	f7fb ffb2 	bl	8000e9c <__aeabi_fmul>
 8004f38:	1c03      	adds	r3, r0, #0
 8004f3a:	1c1c      	adds	r4, r3, #0
                  (((params->m_Mean_Variance_Estimator__Gamma_Variance *
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f40:	68f9      	ldr	r1, [r7, #12]
 8004f42:	1c18      	adds	r0, r3, #0
 8004f44:	f7fb ffaa 	bl	8000e9c <__aeabi_fmul>
 8004f48:	1c03      	adds	r3, r0, #0
                     delta_sgp) /
 8004f4a:	6939      	ldr	r1, [r7, #16]
 8004f4c:	1c18      	adds	r0, r3, #0
 8004f4e:	f7fb fdbf 	bl	8000ad0 <__aeabi_fdiv>
 8004f52:	1c03      	adds	r3, r0, #0
                    additional_scaling) *
 8004f54:	68f9      	ldr	r1, [r7, #12]
 8004f56:	1c18      	adds	r0, r3, #0
 8004f58:	f7fb ffa0 	bl	8000e9c <__aeabi_fmul>
 8004f5c:	1c03      	adds	r3, r0, #0
             sqrtf(
 8004f5e:	1c19      	adds	r1, r3, #0
 8004f60:	1c20      	adds	r0, r4, #0
 8004f62:	f7fb fc2b 	bl	80007bc <__aeabi_fadd>
 8004f66:	1c03      	adds	r3, r0, #0
 8004f68:	1c18      	adds	r0, r3, #0
 8004f6a:	f00a fec3 	bl	800fcf4 <sqrtf>
 8004f6e:	1c03      	adds	r3, r0, #0
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 8004f70:	1c19      	adds	r1, r3, #0
 8004f72:	1c30      	adds	r0, r6, #0
 8004f74:	f7fb ff92 	bl	8000e9c <__aeabi_fmul>
 8004f78:	1c03      	adds	r3, r0, #0
 8004f7a:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Std =
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	649a      	str	r2, [r3, #72]	@ 0x48
            (params->m_Mean_Variance_Estimator___Mean +
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f88:	68f9      	ldr	r1, [r7, #12]
 8004f8a:	1c18      	adds	r0, r3, #0
 8004f8c:	f7fb ff86 	bl	8000e9c <__aeabi_fmul>
 8004f90:	1c03      	adds	r3, r0, #0
 8004f92:	2182      	movs	r1, #130	@ 0x82
 8004f94:	05c9      	lsls	r1, r1, #23
 8004f96:	1c18      	adds	r0, r3, #0
 8004f98:	f7fb fd9a 	bl	8000ad0 <__aeabi_fdiv>
 8004f9c:	1c03      	adds	r3, r0, #0
            (params->m_Mean_Variance_Estimator___Mean +
 8004f9e:	1c19      	adds	r1, r3, #0
 8004fa0:	1c20      	adds	r0, r4, #0
 8004fa2:	f7fb fc0b 	bl	80007bc <__aeabi_fadd>
 8004fa6:	1c03      	adds	r3, r0, #0
 8004fa8:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Mean =
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8004fae:	46c0      	nop			@ (mov r8, r8)
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	b007      	add	sp, #28
 8004fb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004fb6:	46c0      	nop			@ (mov r8, r8)
 8004fb8:	42c80000 	.word	0x42c80000
 8004fbc:	c2c80000 	.word	0xc2c80000
 8004fc0:	44b40000 	.word	0x44b40000

08004fc4 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>:
>>>>>>> main

static void
GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K) {
<<<<<<< HEAD
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b084      	sub	sp, #16
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	60f8      	str	r0, [r7, #12]
 8004f78:	60b9      	str	r1, [r7, #8]
 8004f7a:	607a      	str	r2, [r7, #4]

    params->m_Mean_Variance_Estimator___Sigmoid__K = K;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	687a      	ldr	r2, [r7, #4]
 8004f80:	671a      	str	r2, [r3, #112]	@ 0x70
    params->m_Mean_Variance_Estimator___Sigmoid__X0 = X0;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	68ba      	ldr	r2, [r7, #8]
 8004f86:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004f88:	46c0      	nop			@ (mov r8, r8)
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	b004      	add	sp, #16
 8004f8e:	bd80      	pop	{r7, pc}

08004f90 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>:

static float GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
    GasIndexAlgorithmParams* params, float sample) {
 8004f90:	b590      	push	{r4, r7, lr}
 8004f92:	b085      	sub	sp, #20
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
 8004f98:	6039      	str	r1, [r7, #0]
=======
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b084      	sub	sp, #16
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	60f8      	str	r0, [r7, #12]
 8004fcc:	60b9      	str	r1, [r7, #8]
 8004fce:	607a      	str	r2, [r7, #4]

    params->m_Mean_Variance_Estimator___Sigmoid__K = K;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	687a      	ldr	r2, [r7, #4]
 8004fd4:	671a      	str	r2, [r3, #112]	@ 0x70
    params->m_Mean_Variance_Estimator___Sigmoid__X0 = X0;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	68ba      	ldr	r2, [r7, #8]
 8004fda:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004fdc:	46c0      	nop			@ (mov r8, r8)
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	b004      	add	sp, #16
 8004fe2:	bd80      	pop	{r7, pc}

08004fe4 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>:

static float GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
    GasIndexAlgorithmParams* params, float sample) {
 8004fe4:	b590      	push	{r4, r7, lr}
 8004fe6:	b085      	sub	sp, #20
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
 8004fec:	6039      	str	r1, [r7, #0]
>>>>>>> main

    float x;

    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
<<<<<<< HEAD
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6f1c      	ldr	r4, [r3, #112]	@ 0x70
         (sample - params->m_Mean_Variance_Estimator___Sigmoid__X0));
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004fa2:	1c19      	adds	r1, r3, #0
 8004fa4:	6838      	ldr	r0, [r7, #0]
 8004fa6:	f7fc f881 	bl	80010ac <__aeabi_fsub>
 8004faa:	1c03      	adds	r3, r0, #0
    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 8004fac:	1c19      	adds	r1, r3, #0
 8004fae:	1c20      	adds	r0, r4, #0
 8004fb0:	f7fb ff3e 	bl	8000e30 <__aeabi_fmul>
 8004fb4:	1c03      	adds	r3, r0, #0
 8004fb6:	60fb      	str	r3, [r7, #12]
    if ((x < -50.f)) {
 8004fb8:	4912      	ldr	r1, [pc, #72]	@ (8005004 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x74>)
 8004fba:	68f8      	ldr	r0, [r7, #12]
 8004fbc:	f7fb fa86 	bl	80004cc <__aeabi_fcmplt>
 8004fc0:	1e03      	subs	r3, r0, #0
 8004fc2:	d002      	beq.n	8004fca <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x3a>
        return 1.f;
 8004fc4:	23fe      	movs	r3, #254	@ 0xfe
 8004fc6:	059b      	lsls	r3, r3, #22
 8004fc8:	e018      	b.n	8004ffc <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else if ((x > 50.f)) {
 8004fca:	490f      	ldr	r1, [pc, #60]	@ (8005008 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x78>)
 8004fcc:	68f8      	ldr	r0, [r7, #12]
 8004fce:	f7fb fa91 	bl	80004f4 <__aeabi_fcmpgt>
 8004fd2:	1e03      	subs	r3, r0, #0
 8004fd4:	d001      	beq.n	8004fda <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x4a>
        return 0.f;
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	e010      	b.n	8004ffc <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else {
        return (1.f / (1.f + expf(x)));
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	1c18      	adds	r0, r3, #0
 8004fde:	f00a fd15 	bl	800fa0c <expf>
 8004fe2:	1c03      	adds	r3, r0, #0
 8004fe4:	21fe      	movs	r1, #254	@ 0xfe
 8004fe6:	0589      	lsls	r1, r1, #22
 8004fe8:	1c18      	adds	r0, r3, #0
 8004fea:	f7fb fbb1 	bl	8000750 <__aeabi_fadd>
 8004fee:	1c03      	adds	r3, r0, #0
 8004ff0:	1c19      	adds	r1, r3, #0
 8004ff2:	20fe      	movs	r0, #254	@ 0xfe
 8004ff4:	0580      	lsls	r0, r0, #22
 8004ff6:	f7fb fd35 	bl	8000a64 <__aeabi_fdiv>
 8004ffa:	1c03      	adds	r3, r0, #0
    }
}
 8004ffc:	1c18      	adds	r0, r3, #0
 8004ffe:	46bd      	mov	sp, r7
 8005000:	b005      	add	sp, #20
 8005002:	bd90      	pop	{r4, r7, pc}
 8005004:	c2480000 	.word	0xc2480000
 8005008:	42480000 	.word	0x42480000

0800500c <GasIndexAlgorithm__mox_model__set_parameters>:
=======
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6f1c      	ldr	r4, [r3, #112]	@ 0x70
         (sample - params->m_Mean_Variance_Estimator___Sigmoid__X0));
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ff6:	1c19      	adds	r1, r3, #0
 8004ff8:	6838      	ldr	r0, [r7, #0]
 8004ffa:	f7fc f88d 	bl	8001118 <__aeabi_fsub>
 8004ffe:	1c03      	adds	r3, r0, #0
    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 8005000:	1c19      	adds	r1, r3, #0
 8005002:	1c20      	adds	r0, r4, #0
 8005004:	f7fb ff4a 	bl	8000e9c <__aeabi_fmul>
 8005008:	1c03      	adds	r3, r0, #0
 800500a:	60fb      	str	r3, [r7, #12]
    if ((x < -50.f)) {
 800500c:	4912      	ldr	r1, [pc, #72]	@ (8005058 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x74>)
 800500e:	68f8      	ldr	r0, [r7, #12]
 8005010:	f7fb fa5c 	bl	80004cc <__aeabi_fcmplt>
 8005014:	1e03      	subs	r3, r0, #0
 8005016:	d002      	beq.n	800501e <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x3a>
        return 1.f;
 8005018:	23fe      	movs	r3, #254	@ 0xfe
 800501a:	059b      	lsls	r3, r3, #22
 800501c:	e018      	b.n	8005050 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else if ((x > 50.f)) {
 800501e:	490f      	ldr	r1, [pc, #60]	@ (800505c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x78>)
 8005020:	68f8      	ldr	r0, [r7, #12]
 8005022:	f7fb fa67 	bl	80004f4 <__aeabi_fcmpgt>
 8005026:	1e03      	subs	r3, r0, #0
 8005028:	d001      	beq.n	800502e <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x4a>
        return 0.f;
 800502a:	2300      	movs	r3, #0
 800502c:	e010      	b.n	8005050 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else {
        return (1.f / (1.f + expf(x)));
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	1c18      	adds	r0, r3, #0
 8005032:	f00a fe37 	bl	800fca4 <expf>
 8005036:	1c03      	adds	r3, r0, #0
 8005038:	21fe      	movs	r1, #254	@ 0xfe
 800503a:	0589      	lsls	r1, r1, #22
 800503c:	1c18      	adds	r0, r3, #0
 800503e:	f7fb fbbd 	bl	80007bc <__aeabi_fadd>
 8005042:	1c03      	adds	r3, r0, #0
 8005044:	1c19      	adds	r1, r3, #0
 8005046:	20fe      	movs	r0, #254	@ 0xfe
 8005048:	0580      	lsls	r0, r0, #22
 800504a:	f7fb fd41 	bl	8000ad0 <__aeabi_fdiv>
 800504e:	1c03      	adds	r3, r0, #0
    }
}
 8005050:	1c18      	adds	r0, r3, #0
 8005052:	46bd      	mov	sp, r7
 8005054:	b005      	add	sp, #20
 8005056:	bd90      	pop	{r4, r7, pc}
 8005058:	c2480000 	.word	0xc2480000
 800505c:	42480000 	.word	0x42480000

08005060 <GasIndexAlgorithm__mox_model__set_parameters>:
>>>>>>> main

static void
GasIndexAlgorithm__mox_model__set_parameters(GasIndexAlgorithmParams* params,
                                             float SRAW_STD, float SRAW_MEAN) {
<<<<<<< HEAD
 800500c:	b580      	push	{r7, lr}
 800500e:	b084      	sub	sp, #16
 8005010:	af00      	add	r7, sp, #0
 8005012:	60f8      	str	r0, [r7, #12]
 8005014:	60b9      	str	r1, [r7, #8]
 8005016:	607a      	str	r2, [r7, #4]

    params->m_Mox_Model__Sraw_Std = SRAW_STD;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	68ba      	ldr	r2, [r7, #8]
 800501c:	679a      	str	r2, [r3, #120]	@ 0x78
    params->m_Mox_Model__Sraw_Mean = SRAW_MEAN;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	687a      	ldr	r2, [r7, #4]
 8005022:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8005024:	46c0      	nop			@ (mov r8, r8)
 8005026:	46bd      	mov	sp, r7
 8005028:	b004      	add	sp, #16
 800502a:	bd80      	pop	{r7, pc}

0800502c <GasIndexAlgorithm__mox_model__process>:
=======
 8005060:	b580      	push	{r7, lr}
 8005062:	b084      	sub	sp, #16
 8005064:	af00      	add	r7, sp, #0
 8005066:	60f8      	str	r0, [r7, #12]
 8005068:	60b9      	str	r1, [r7, #8]
 800506a:	607a      	str	r2, [r7, #4]

    params->m_Mox_Model__Sraw_Std = SRAW_STD;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	68ba      	ldr	r2, [r7, #8]
 8005070:	679a      	str	r2, [r3, #120]	@ 0x78
    params->m_Mox_Model__Sraw_Mean = SRAW_MEAN;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	687a      	ldr	r2, [r7, #4]
 8005076:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8005078:	46c0      	nop			@ (mov r8, r8)
 800507a:	46bd      	mov	sp, r7
 800507c:	b004      	add	sp, #16
 800507e:	bd80      	pop	{r7, pc}

08005080 <GasIndexAlgorithm__mox_model__process>:
>>>>>>> main

static float
GasIndexAlgorithm__mox_model__process(GasIndexAlgorithmParams* params,
                                      float sraw) {
<<<<<<< HEAD
 800502c:	b590      	push	{r4, r7, lr}
 800502e:	b083      	sub	sp, #12
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
 8005034:	6039      	str	r1, [r7, #0]

    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	2b01      	cmp	r3, #1
 800503c:	d114      	bne.n	8005068 <GasIndexAlgorithm__mox_model__process+0x3c>
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005042:	1c19      	adds	r1, r3, #0
 8005044:	6838      	ldr	r0, [r7, #0]
 8005046:	f7fc f831 	bl	80010ac <__aeabi_fsub>
 800504a:	1c03      	adds	r3, r0, #0
 800504c:	4918      	ldr	r1, [pc, #96]	@ (80050b0 <GasIndexAlgorithm__mox_model__process+0x84>)
 800504e:	1c18      	adds	r0, r3, #0
 8005050:	f7fb fd08 	bl	8000a64 <__aeabi_fdiv>
 8005054:	1c03      	adds	r3, r0, #0
 8005056:	1c1a      	adds	r2, r3, #0
                 GasIndexAlgorithm_SRAW_STD_NOX) *
                params->mIndex_Gain);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6a1b      	ldr	r3, [r3, #32]
                 GasIndexAlgorithm_SRAW_STD_NOX) *
 800505c:	1c19      	adds	r1, r3, #0
 800505e:	1c10      	adds	r0, r2, #0
 8005060:	f7fb fee6 	bl	8000e30 <__aeabi_fmul>
 8005064:	1c03      	adds	r3, r0, #0
 8005066:	e01f      	b.n	80050a8 <GasIndexAlgorithm__mox_model__process+0x7c>
    } else {
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800506c:	1c19      	adds	r1, r3, #0
 800506e:	6838      	ldr	r0, [r7, #0]
 8005070:	f7fc f81c 	bl	80010ac <__aeabi_fsub>
 8005074:	1c03      	adds	r3, r0, #0
 8005076:	1c1a      	adds	r2, r3, #0
 8005078:	2380      	movs	r3, #128	@ 0x80
 800507a:	061b      	lsls	r3, r3, #24
 800507c:	4053      	eors	r3, r2
 800507e:	001c      	movs	r4, r3
                 (-1.f * (params->m_Mox_Model__Sraw_Std +
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005084:	490b      	ldr	r1, [pc, #44]	@ (80050b4 <GasIndexAlgorithm__mox_model__process+0x88>)
 8005086:	1c18      	adds	r0, r3, #0
 8005088:	f7fb fb62 	bl	8000750 <__aeabi_fadd>
 800508c:	1c03      	adds	r3, r0, #0
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 800508e:	1c19      	adds	r1, r3, #0
 8005090:	1c20      	adds	r0, r4, #0
 8005092:	f7fb fce7 	bl	8000a64 <__aeabi_fdiv>
 8005096:	1c03      	adds	r3, r0, #0
 8005098:	1c1a      	adds	r2, r3, #0
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
                params->mIndex_Gain);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6a1b      	ldr	r3, [r3, #32]
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
 800509e:	1c19      	adds	r1, r3, #0
 80050a0:	1c10      	adds	r0, r2, #0
 80050a2:	f7fb fec5 	bl	8000e30 <__aeabi_fmul>
 80050a6:	1c03      	adds	r3, r0, #0
    }
}
 80050a8:	1c18      	adds	r0, r3, #0
 80050aa:	46bd      	mov	sp, r7
 80050ac:	b003      	add	sp, #12
 80050ae:	bd90      	pop	{r4, r7, pc}
 80050b0:	44fa0000 	.word	0x44fa0000
 80050b4:	435c0000 	.word	0x435c0000

080050b8 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>:

static void GasIndexAlgorithm__sigmoid_scaled__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K, float offset_default) {
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b084      	sub	sp, #16
 80050bc:	af00      	add	r7, sp, #0
 80050be:	60f8      	str	r0, [r7, #12]
 80050c0:	60b9      	str	r1, [r7, #8]
 80050c2:	607a      	str	r2, [r7, #4]
 80050c4:	603b      	str	r3, [r7, #0]

    params->m_Sigmoid_Scaled__K = K;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	2180      	movs	r1, #128	@ 0x80
 80050ca:	687a      	ldr	r2, [r7, #4]
 80050cc:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__X0 = X0;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	2184      	movs	r1, #132	@ 0x84
 80050d2:	68ba      	ldr	r2, [r7, #8]
 80050d4:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__Offset_Default = offset_default;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	2188      	movs	r1, #136	@ 0x88
 80050da:	683a      	ldr	r2, [r7, #0]
 80050dc:	505a      	str	r2, [r3, r1]
}
 80050de:	46c0      	nop			@ (mov r8, r8)
 80050e0:	46bd      	mov	sp, r7
 80050e2:	b004      	add	sp, #16
 80050e4:	bd80      	pop	{r7, pc}
	...

080050e8 <GasIndexAlgorithm__sigmoid_scaled__process>:
=======
 8005080:	b590      	push	{r4, r7, lr}
 8005082:	b083      	sub	sp, #12
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
 8005088:	6039      	str	r1, [r7, #0]

    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	2b01      	cmp	r3, #1
 8005090:	d114      	bne.n	80050bc <GasIndexAlgorithm__mox_model__process+0x3c>
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005096:	1c19      	adds	r1, r3, #0
 8005098:	6838      	ldr	r0, [r7, #0]
 800509a:	f7fc f83d 	bl	8001118 <__aeabi_fsub>
 800509e:	1c03      	adds	r3, r0, #0
 80050a0:	4918      	ldr	r1, [pc, #96]	@ (8005104 <GasIndexAlgorithm__mox_model__process+0x84>)
 80050a2:	1c18      	adds	r0, r3, #0
 80050a4:	f7fb fd14 	bl	8000ad0 <__aeabi_fdiv>
 80050a8:	1c03      	adds	r3, r0, #0
 80050aa:	1c1a      	adds	r2, r3, #0
                 GasIndexAlgorithm_SRAW_STD_NOX) *
                params->mIndex_Gain);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6a1b      	ldr	r3, [r3, #32]
                 GasIndexAlgorithm_SRAW_STD_NOX) *
 80050b0:	1c19      	adds	r1, r3, #0
 80050b2:	1c10      	adds	r0, r2, #0
 80050b4:	f7fb fef2 	bl	8000e9c <__aeabi_fmul>
 80050b8:	1c03      	adds	r3, r0, #0
 80050ba:	e01f      	b.n	80050fc <GasIndexAlgorithm__mox_model__process+0x7c>
    } else {
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80050c0:	1c19      	adds	r1, r3, #0
 80050c2:	6838      	ldr	r0, [r7, #0]
 80050c4:	f7fc f828 	bl	8001118 <__aeabi_fsub>
 80050c8:	1c03      	adds	r3, r0, #0
 80050ca:	1c1a      	adds	r2, r3, #0
 80050cc:	2380      	movs	r3, #128	@ 0x80
 80050ce:	061b      	lsls	r3, r3, #24
 80050d0:	4053      	eors	r3, r2
 80050d2:	001c      	movs	r4, r3
                 (-1.f * (params->m_Mox_Model__Sraw_Std +
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80050d8:	490b      	ldr	r1, [pc, #44]	@ (8005108 <GasIndexAlgorithm__mox_model__process+0x88>)
 80050da:	1c18      	adds	r0, r3, #0
 80050dc:	f7fb fb6e 	bl	80007bc <__aeabi_fadd>
 80050e0:	1c03      	adds	r3, r0, #0
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 80050e2:	1c19      	adds	r1, r3, #0
 80050e4:	1c20      	adds	r0, r4, #0
 80050e6:	f7fb fcf3 	bl	8000ad0 <__aeabi_fdiv>
 80050ea:	1c03      	adds	r3, r0, #0
 80050ec:	1c1a      	adds	r2, r3, #0
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
                params->mIndex_Gain);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6a1b      	ldr	r3, [r3, #32]
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
 80050f2:	1c19      	adds	r1, r3, #0
 80050f4:	1c10      	adds	r0, r2, #0
 80050f6:	f7fb fed1 	bl	8000e9c <__aeabi_fmul>
 80050fa:	1c03      	adds	r3, r0, #0
    }
}
 80050fc:	1c18      	adds	r0, r3, #0
 80050fe:	46bd      	mov	sp, r7
 8005100:	b003      	add	sp, #12
 8005102:	bd90      	pop	{r4, r7, pc}
 8005104:	44fa0000 	.word	0x44fa0000
 8005108:	435c0000 	.word	0x435c0000

0800510c <GasIndexAlgorithm__sigmoid_scaled__set_parameters>:

static void GasIndexAlgorithm__sigmoid_scaled__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K, float offset_default) {
 800510c:	b580      	push	{r7, lr}
 800510e:	b084      	sub	sp, #16
 8005110:	af00      	add	r7, sp, #0
 8005112:	60f8      	str	r0, [r7, #12]
 8005114:	60b9      	str	r1, [r7, #8]
 8005116:	607a      	str	r2, [r7, #4]
 8005118:	603b      	str	r3, [r7, #0]

    params->m_Sigmoid_Scaled__K = K;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	2180      	movs	r1, #128	@ 0x80
 800511e:	687a      	ldr	r2, [r7, #4]
 8005120:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__X0 = X0;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	2184      	movs	r1, #132	@ 0x84
 8005126:	68ba      	ldr	r2, [r7, #8]
 8005128:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__Offset_Default = offset_default;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	2188      	movs	r1, #136	@ 0x88
 800512e:	683a      	ldr	r2, [r7, #0]
 8005130:	505a      	str	r2, [r3, r1]
}
 8005132:	46c0      	nop			@ (mov r8, r8)
 8005134:	46bd      	mov	sp, r7
 8005136:	b004      	add	sp, #16
 8005138:	bd80      	pop	{r7, pc}
	...

0800513c <GasIndexAlgorithm__sigmoid_scaled__process>:
>>>>>>> main

static float
GasIndexAlgorithm__sigmoid_scaled__process(GasIndexAlgorithmParams* params,
                                           float sample) {
<<<<<<< HEAD
 80050e8:	b590      	push	{r4, r7, lr}
 80050ea:	b085      	sub	sp, #20
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
 80050f0:	6039      	str	r1, [r7, #0]
=======
 800513c:	b590      	push	{r4, r7, lr}
 800513e:	b085      	sub	sp, #20
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
 8005144:	6039      	str	r1, [r7, #0]
>>>>>>> main

    float x;
    float shift;

    x = (params->m_Sigmoid_Scaled__K * (sample - params->m_Sigmoid_Scaled__X0));
<<<<<<< HEAD
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2280      	movs	r2, #128	@ 0x80
 80050f6:	589c      	ldr	r4, [r3, r2]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2284      	movs	r2, #132	@ 0x84
 80050fc:	589b      	ldr	r3, [r3, r2]
 80050fe:	1c19      	adds	r1, r3, #0
 8005100:	6838      	ldr	r0, [r7, #0]
 8005102:	f7fb ffd3 	bl	80010ac <__aeabi_fsub>
 8005106:	1c03      	adds	r3, r0, #0
 8005108:	1c19      	adds	r1, r3, #0
 800510a:	1c20      	adds	r0, r4, #0
 800510c:	f7fb fe90 	bl	8000e30 <__aeabi_fmul>
 8005110:	1c03      	adds	r3, r0, #0
 8005112:	60bb      	str	r3, [r7, #8]
    if ((x < -50.f)) {
 8005114:	4940      	ldr	r1, [pc, #256]	@ (8005218 <GasIndexAlgorithm__sigmoid_scaled__process+0x130>)
 8005116:	68b8      	ldr	r0, [r7, #8]
 8005118:	f7fb f9d8 	bl	80004cc <__aeabi_fcmplt>
 800511c:	1e03      	subs	r3, r0, #0
 800511e:	d001      	beq.n	8005124 <GasIndexAlgorithm__sigmoid_scaled__process+0x3c>
        return GasIndexAlgorithm_SIGMOID_L;
 8005120:	4b3e      	ldr	r3, [pc, #248]	@ (800521c <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 8005122:	e075      	b.n	8005210 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else if ((x > 50.f)) {
 8005124:	493e      	ldr	r1, [pc, #248]	@ (8005220 <GasIndexAlgorithm__sigmoid_scaled__process+0x138>)
 8005126:	68b8      	ldr	r0, [r7, #8]
 8005128:	f7fb f9e4 	bl	80004f4 <__aeabi_fcmpgt>
 800512c:	1e03      	subs	r3, r0, #0
 800512e:	d001      	beq.n	8005134 <GasIndexAlgorithm__sigmoid_scaled__process+0x4c>
        return 0.f;
 8005130:	2300      	movs	r3, #0
 8005132:	e06d      	b.n	8005210 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else {
        if ((sample >= 0.f)) {
 8005134:	2100      	movs	r1, #0
 8005136:	6838      	ldr	r0, [r7, #0]
 8005138:	f7fb f9e6 	bl	8000508 <__aeabi_fcmpge>
 800513c:	1e03      	subs	r3, r0, #0
 800513e:	d047      	beq.n	80051d0 <GasIndexAlgorithm__sigmoid_scaled__process+0xe8>
            if ((params->m_Sigmoid_Scaled__Offset_Default == 1.f)) {
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2288      	movs	r2, #136	@ 0x88
 8005144:	589b      	ldr	r3, [r3, r2]
 8005146:	21fe      	movs	r1, #254	@ 0xfe
 8005148:	0589      	lsls	r1, r1, #22
 800514a:	1c18      	adds	r0, r3, #0
 800514c:	f7fb f9b8 	bl	80004c0 <__aeabi_fcmpeq>
 8005150:	1e03      	subs	r3, r0, #0
 8005152:	d00e      	beq.n	8005172 <GasIndexAlgorithm__sigmoid_scaled__process+0x8a>
                shift = ((500.f / 499.f) * (1.f - params->mIndex_Offset));
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	689b      	ldr	r3, [r3, #8]
 8005158:	1c19      	adds	r1, r3, #0
 800515a:	20fe      	movs	r0, #254	@ 0xfe
 800515c:	0580      	lsls	r0, r0, #22
 800515e:	f7fb ffa5 	bl	80010ac <__aeabi_fsub>
 8005162:	1c03      	adds	r3, r0, #0
 8005164:	492f      	ldr	r1, [pc, #188]	@ (8005224 <GasIndexAlgorithm__sigmoid_scaled__process+0x13c>)
 8005166:	1c18      	adds	r0, r3, #0
 8005168:	f7fb fe62 	bl	8000e30 <__aeabi_fmul>
 800516c:	1c03      	adds	r3, r0, #0
 800516e:	60fb      	str	r3, [r7, #12]
 8005170:	e012      	b.n	8005198 <GasIndexAlgorithm__sigmoid_scaled__process+0xb0>
            } else {
                shift = ((GasIndexAlgorithm_SIGMOID_L -
                          (5.f * params->mIndex_Offset)) /
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	689b      	ldr	r3, [r3, #8]
 8005176:	492c      	ldr	r1, [pc, #176]	@ (8005228 <GasIndexAlgorithm__sigmoid_scaled__process+0x140>)
 8005178:	1c18      	adds	r0, r3, #0
 800517a:	f7fb fe59 	bl	8000e30 <__aeabi_fmul>
 800517e:	1c03      	adds	r3, r0, #0
                shift = ((GasIndexAlgorithm_SIGMOID_L -
 8005180:	1c19      	adds	r1, r3, #0
 8005182:	4826      	ldr	r0, [pc, #152]	@ (800521c <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 8005184:	f7fb ff92 	bl	80010ac <__aeabi_fsub>
 8005188:	1c03      	adds	r3, r0, #0
 800518a:	2181      	movs	r1, #129	@ 0x81
 800518c:	05c9      	lsls	r1, r1, #23
 800518e:	1c18      	adds	r0, r3, #0
 8005190:	f7fb fc68 	bl	8000a64 <__aeabi_fdiv>
 8005194:	1c03      	adds	r3, r0, #0
 8005196:	60fb      	str	r3, [r7, #12]
                         4.f);
            }
            return (((GasIndexAlgorithm_SIGMOID_L + shift) / (1.f + expf(x))) -
 8005198:	4920      	ldr	r1, [pc, #128]	@ (800521c <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800519a:	68f8      	ldr	r0, [r7, #12]
 800519c:	f7fb fad8 	bl	8000750 <__aeabi_fadd>
 80051a0:	1c03      	adds	r3, r0, #0
 80051a2:	1c1c      	adds	r4, r3, #0
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	1c18      	adds	r0, r3, #0
 80051a8:	f00a fc30 	bl	800fa0c <expf>
 80051ac:	1c03      	adds	r3, r0, #0
 80051ae:	21fe      	movs	r1, #254	@ 0xfe
 80051b0:	0589      	lsls	r1, r1, #22
 80051b2:	1c18      	adds	r0, r3, #0
 80051b4:	f7fb facc 	bl	8000750 <__aeabi_fadd>
 80051b8:	1c03      	adds	r3, r0, #0
 80051ba:	1c19      	adds	r1, r3, #0
 80051bc:	1c20      	adds	r0, r4, #0
 80051be:	f7fb fc51 	bl	8000a64 <__aeabi_fdiv>
 80051c2:	1c03      	adds	r3, r0, #0
 80051c4:	68f9      	ldr	r1, [r7, #12]
 80051c6:	1c18      	adds	r0, r3, #0
 80051c8:	f7fb ff70 	bl	80010ac <__aeabi_fsub>
 80051cc:	1c03      	adds	r3, r0, #0
 80051ce:	e01f      	b.n	8005210 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
                    shift);
        } else {
            return ((params->mIndex_Offset /
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	689a      	ldr	r2, [r3, #8]
                     params->m_Sigmoid_Scaled__Offset_Default) *
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2188      	movs	r1, #136	@ 0x88
 80051d8:	585b      	ldr	r3, [r3, r1]
            return ((params->mIndex_Offset /
 80051da:	1c19      	adds	r1, r3, #0
 80051dc:	1c10      	adds	r0, r2, #0
 80051de:	f7fb fc41 	bl	8000a64 <__aeabi_fdiv>
 80051e2:	1c03      	adds	r3, r0, #0
 80051e4:	1c1c      	adds	r4, r3, #0
                    (GasIndexAlgorithm_SIGMOID_L / (1.f + expf(x))));
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	1c18      	adds	r0, r3, #0
 80051ea:	f00a fc0f 	bl	800fa0c <expf>
 80051ee:	1c03      	adds	r3, r0, #0
 80051f0:	21fe      	movs	r1, #254	@ 0xfe
 80051f2:	0589      	lsls	r1, r1, #22
 80051f4:	1c18      	adds	r0, r3, #0
 80051f6:	f7fb faab 	bl	8000750 <__aeabi_fadd>
 80051fa:	1c03      	adds	r3, r0, #0
 80051fc:	1c19      	adds	r1, r3, #0
 80051fe:	4807      	ldr	r0, [pc, #28]	@ (800521c <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 8005200:	f7fb fc30 	bl	8000a64 <__aeabi_fdiv>
 8005204:	1c03      	adds	r3, r0, #0
                     params->m_Sigmoid_Scaled__Offset_Default) *
 8005206:	1c19      	adds	r1, r3, #0
 8005208:	1c20      	adds	r0, r4, #0
 800520a:	f7fb fe11 	bl	8000e30 <__aeabi_fmul>
 800520e:	1c03      	adds	r3, r0, #0
        }
    }
}
 8005210:	1c18      	adds	r0, r3, #0
 8005212:	46bd      	mov	sp, r7
 8005214:	b005      	add	sp, #20
 8005216:	bd90      	pop	{r4, r7, pc}
 8005218:	c2480000 	.word	0xc2480000
 800521c:	43fa0000 	.word	0x43fa0000
 8005220:	42480000 	.word	0x42480000
 8005224:	3f8041ab 	.word	0x3f8041ab
 8005228:	40a00000 	.word	0x40a00000

0800522c <GasIndexAlgorithm__adaptive_lowpass__set_parameters>:

static void GasIndexAlgorithm__adaptive_lowpass__set_parameters(
    GasIndexAlgorithmParams* params) {
 800522c:	b590      	push	{r4, r7, lr}
 800522e:	b083      	sub	sp, #12
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]

    params->m_Adaptive_Lowpass__A1 =
        (params->mSamplingInterval /
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_FAST + params->mSamplingInterval));
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	4913      	ldr	r1, [pc, #76]	@ (800528c <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x60>)
 800523e:	1c18      	adds	r0, r3, #0
 8005240:	f7fb fa86 	bl	8000750 <__aeabi_fadd>
 8005244:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 8005246:	1c19      	adds	r1, r3, #0
 8005248:	1c20      	adds	r0, r4, #0
 800524a:	f7fb fc0b 	bl	8000a64 <__aeabi_fdiv>
 800524e:	1c03      	adds	r3, r0, #0
 8005250:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A1 =
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	228c      	movs	r2, #140	@ 0x8c
 8005256:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass__A2 =
        (params->mSamplingInterval /
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_SLOW + params->mSamplingInterval));
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	490b      	ldr	r1, [pc, #44]	@ (8005290 <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x64>)
 8005262:	1c18      	adds	r0, r3, #0
 8005264:	f7fb fa74 	bl	8000750 <__aeabi_fadd>
 8005268:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 800526a:	1c19      	adds	r1, r3, #0
 800526c:	1c20      	adds	r0, r4, #0
 800526e:	f7fb fbf9 	bl	8000a64 <__aeabi_fdiv>
 8005272:	1c03      	adds	r3, r0, #0
 8005274:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A2 =
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2290      	movs	r2, #144	@ 0x90
 800527a:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___Initialized = false;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2294      	movs	r2, #148	@ 0x94
 8005280:	2100      	movs	r1, #0
 8005282:	5499      	strb	r1, [r3, r2]
}
 8005284:	46c0      	nop			@ (mov r8, r8)
 8005286:	46bd      	mov	sp, r7
 8005288:	b003      	add	sp, #12
 800528a:	bd90      	pop	{r4, r7, pc}
 800528c:	41a00000 	.word	0x41a00000
 8005290:	43fa0000 	.word	0x43fa0000

08005294 <GasIndexAlgorithm__adaptive_lowpass__process>:
=======
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2280      	movs	r2, #128	@ 0x80
 800514a:	589c      	ldr	r4, [r3, r2]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2284      	movs	r2, #132	@ 0x84
 8005150:	589b      	ldr	r3, [r3, r2]
 8005152:	1c19      	adds	r1, r3, #0
 8005154:	6838      	ldr	r0, [r7, #0]
 8005156:	f7fb ffdf 	bl	8001118 <__aeabi_fsub>
 800515a:	1c03      	adds	r3, r0, #0
 800515c:	1c19      	adds	r1, r3, #0
 800515e:	1c20      	adds	r0, r4, #0
 8005160:	f7fb fe9c 	bl	8000e9c <__aeabi_fmul>
 8005164:	1c03      	adds	r3, r0, #0
 8005166:	60bb      	str	r3, [r7, #8]
    if ((x < -50.f)) {
 8005168:	4940      	ldr	r1, [pc, #256]	@ (800526c <GasIndexAlgorithm__sigmoid_scaled__process+0x130>)
 800516a:	68b8      	ldr	r0, [r7, #8]
 800516c:	f7fb f9ae 	bl	80004cc <__aeabi_fcmplt>
 8005170:	1e03      	subs	r3, r0, #0
 8005172:	d001      	beq.n	8005178 <GasIndexAlgorithm__sigmoid_scaled__process+0x3c>
        return GasIndexAlgorithm_SIGMOID_L;
 8005174:	4b3e      	ldr	r3, [pc, #248]	@ (8005270 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 8005176:	e075      	b.n	8005264 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else if ((x > 50.f)) {
 8005178:	493e      	ldr	r1, [pc, #248]	@ (8005274 <GasIndexAlgorithm__sigmoid_scaled__process+0x138>)
 800517a:	68b8      	ldr	r0, [r7, #8]
 800517c:	f7fb f9ba 	bl	80004f4 <__aeabi_fcmpgt>
 8005180:	1e03      	subs	r3, r0, #0
 8005182:	d001      	beq.n	8005188 <GasIndexAlgorithm__sigmoid_scaled__process+0x4c>
        return 0.f;
 8005184:	2300      	movs	r3, #0
 8005186:	e06d      	b.n	8005264 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else {
        if ((sample >= 0.f)) {
 8005188:	2100      	movs	r1, #0
 800518a:	6838      	ldr	r0, [r7, #0]
 800518c:	f7fb f9bc 	bl	8000508 <__aeabi_fcmpge>
 8005190:	1e03      	subs	r3, r0, #0
 8005192:	d047      	beq.n	8005224 <GasIndexAlgorithm__sigmoid_scaled__process+0xe8>
            if ((params->m_Sigmoid_Scaled__Offset_Default == 1.f)) {
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2288      	movs	r2, #136	@ 0x88
 8005198:	589b      	ldr	r3, [r3, r2]
 800519a:	21fe      	movs	r1, #254	@ 0xfe
 800519c:	0589      	lsls	r1, r1, #22
 800519e:	1c18      	adds	r0, r3, #0
 80051a0:	f7fb f98e 	bl	80004c0 <__aeabi_fcmpeq>
 80051a4:	1e03      	subs	r3, r0, #0
 80051a6:	d00e      	beq.n	80051c6 <GasIndexAlgorithm__sigmoid_scaled__process+0x8a>
                shift = ((500.f / 499.f) * (1.f - params->mIndex_Offset));
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	689b      	ldr	r3, [r3, #8]
 80051ac:	1c19      	adds	r1, r3, #0
 80051ae:	20fe      	movs	r0, #254	@ 0xfe
 80051b0:	0580      	lsls	r0, r0, #22
 80051b2:	f7fb ffb1 	bl	8001118 <__aeabi_fsub>
 80051b6:	1c03      	adds	r3, r0, #0
 80051b8:	492f      	ldr	r1, [pc, #188]	@ (8005278 <GasIndexAlgorithm__sigmoid_scaled__process+0x13c>)
 80051ba:	1c18      	adds	r0, r3, #0
 80051bc:	f7fb fe6e 	bl	8000e9c <__aeabi_fmul>
 80051c0:	1c03      	adds	r3, r0, #0
 80051c2:	60fb      	str	r3, [r7, #12]
 80051c4:	e012      	b.n	80051ec <GasIndexAlgorithm__sigmoid_scaled__process+0xb0>
            } else {
                shift = ((GasIndexAlgorithm_SIGMOID_L -
                          (5.f * params->mIndex_Offset)) /
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	689b      	ldr	r3, [r3, #8]
 80051ca:	492c      	ldr	r1, [pc, #176]	@ (800527c <GasIndexAlgorithm__sigmoid_scaled__process+0x140>)
 80051cc:	1c18      	adds	r0, r3, #0
 80051ce:	f7fb fe65 	bl	8000e9c <__aeabi_fmul>
 80051d2:	1c03      	adds	r3, r0, #0
                shift = ((GasIndexAlgorithm_SIGMOID_L -
 80051d4:	1c19      	adds	r1, r3, #0
 80051d6:	4826      	ldr	r0, [pc, #152]	@ (8005270 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 80051d8:	f7fb ff9e 	bl	8001118 <__aeabi_fsub>
 80051dc:	1c03      	adds	r3, r0, #0
 80051de:	2181      	movs	r1, #129	@ 0x81
 80051e0:	05c9      	lsls	r1, r1, #23
 80051e2:	1c18      	adds	r0, r3, #0
 80051e4:	f7fb fc74 	bl	8000ad0 <__aeabi_fdiv>
 80051e8:	1c03      	adds	r3, r0, #0
 80051ea:	60fb      	str	r3, [r7, #12]
                         4.f);
            }
            return (((GasIndexAlgorithm_SIGMOID_L + shift) / (1.f + expf(x))) -
 80051ec:	4920      	ldr	r1, [pc, #128]	@ (8005270 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 80051ee:	68f8      	ldr	r0, [r7, #12]
 80051f0:	f7fb fae4 	bl	80007bc <__aeabi_fadd>
 80051f4:	1c03      	adds	r3, r0, #0
 80051f6:	1c1c      	adds	r4, r3, #0
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	1c18      	adds	r0, r3, #0
 80051fc:	f00a fd52 	bl	800fca4 <expf>
 8005200:	1c03      	adds	r3, r0, #0
 8005202:	21fe      	movs	r1, #254	@ 0xfe
 8005204:	0589      	lsls	r1, r1, #22
 8005206:	1c18      	adds	r0, r3, #0
 8005208:	f7fb fad8 	bl	80007bc <__aeabi_fadd>
 800520c:	1c03      	adds	r3, r0, #0
 800520e:	1c19      	adds	r1, r3, #0
 8005210:	1c20      	adds	r0, r4, #0
 8005212:	f7fb fc5d 	bl	8000ad0 <__aeabi_fdiv>
 8005216:	1c03      	adds	r3, r0, #0
 8005218:	68f9      	ldr	r1, [r7, #12]
 800521a:	1c18      	adds	r0, r3, #0
 800521c:	f7fb ff7c 	bl	8001118 <__aeabi_fsub>
 8005220:	1c03      	adds	r3, r0, #0
 8005222:	e01f      	b.n	8005264 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
                    shift);
        } else {
            return ((params->mIndex_Offset /
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	689a      	ldr	r2, [r3, #8]
                     params->m_Sigmoid_Scaled__Offset_Default) *
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2188      	movs	r1, #136	@ 0x88
 800522c:	585b      	ldr	r3, [r3, r1]
            return ((params->mIndex_Offset /
 800522e:	1c19      	adds	r1, r3, #0
 8005230:	1c10      	adds	r0, r2, #0
 8005232:	f7fb fc4d 	bl	8000ad0 <__aeabi_fdiv>
 8005236:	1c03      	adds	r3, r0, #0
 8005238:	1c1c      	adds	r4, r3, #0
                    (GasIndexAlgorithm_SIGMOID_L / (1.f + expf(x))));
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	1c18      	adds	r0, r3, #0
 800523e:	f00a fd31 	bl	800fca4 <expf>
 8005242:	1c03      	adds	r3, r0, #0
 8005244:	21fe      	movs	r1, #254	@ 0xfe
 8005246:	0589      	lsls	r1, r1, #22
 8005248:	1c18      	adds	r0, r3, #0
 800524a:	f7fb fab7 	bl	80007bc <__aeabi_fadd>
 800524e:	1c03      	adds	r3, r0, #0
 8005250:	1c19      	adds	r1, r3, #0
 8005252:	4807      	ldr	r0, [pc, #28]	@ (8005270 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 8005254:	f7fb fc3c 	bl	8000ad0 <__aeabi_fdiv>
 8005258:	1c03      	adds	r3, r0, #0
                     params->m_Sigmoid_Scaled__Offset_Default) *
 800525a:	1c19      	adds	r1, r3, #0
 800525c:	1c20      	adds	r0, r4, #0
 800525e:	f7fb fe1d 	bl	8000e9c <__aeabi_fmul>
 8005262:	1c03      	adds	r3, r0, #0
        }
    }
}
 8005264:	1c18      	adds	r0, r3, #0
 8005266:	46bd      	mov	sp, r7
 8005268:	b005      	add	sp, #20
 800526a:	bd90      	pop	{r4, r7, pc}
 800526c:	c2480000 	.word	0xc2480000
 8005270:	43fa0000 	.word	0x43fa0000
 8005274:	42480000 	.word	0x42480000
 8005278:	3f8041ab 	.word	0x3f8041ab
 800527c:	40a00000 	.word	0x40a00000

08005280 <GasIndexAlgorithm__adaptive_lowpass__set_parameters>:

static void GasIndexAlgorithm__adaptive_lowpass__set_parameters(
    GasIndexAlgorithmParams* params) {
 8005280:	b590      	push	{r4, r7, lr}
 8005282:	b083      	sub	sp, #12
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]

    params->m_Adaptive_Lowpass__A1 =
        (params->mSamplingInterval /
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_FAST + params->mSamplingInterval));
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	4913      	ldr	r1, [pc, #76]	@ (80052e0 <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x60>)
 8005292:	1c18      	adds	r0, r3, #0
 8005294:	f7fb fa92 	bl	80007bc <__aeabi_fadd>
 8005298:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 800529a:	1c19      	adds	r1, r3, #0
 800529c:	1c20      	adds	r0, r4, #0
 800529e:	f7fb fc17 	bl	8000ad0 <__aeabi_fdiv>
 80052a2:	1c03      	adds	r3, r0, #0
 80052a4:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A1 =
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	228c      	movs	r2, #140	@ 0x8c
 80052aa:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass__A2 =
        (params->mSamplingInterval /
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_SLOW + params->mSamplingInterval));
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	490b      	ldr	r1, [pc, #44]	@ (80052e4 <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x64>)
 80052b6:	1c18      	adds	r0, r3, #0
 80052b8:	f7fb fa80 	bl	80007bc <__aeabi_fadd>
 80052bc:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 80052be:	1c19      	adds	r1, r3, #0
 80052c0:	1c20      	adds	r0, r4, #0
 80052c2:	f7fb fc05 	bl	8000ad0 <__aeabi_fdiv>
 80052c6:	1c03      	adds	r3, r0, #0
 80052c8:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A2 =
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2290      	movs	r2, #144	@ 0x90
 80052ce:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___Initialized = false;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2294      	movs	r2, #148	@ 0x94
 80052d4:	2100      	movs	r1, #0
 80052d6:	5499      	strb	r1, [r3, r2]
}
 80052d8:	46c0      	nop			@ (mov r8, r8)
 80052da:	46bd      	mov	sp, r7
 80052dc:	b003      	add	sp, #12
 80052de:	bd90      	pop	{r4, r7, pc}
 80052e0:	41a00000 	.word	0x41a00000
 80052e4:	43fa0000 	.word	0x43fa0000

080052e8 <GasIndexAlgorithm__adaptive_lowpass__process>:
>>>>>>> main

static float
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample) {
<<<<<<< HEAD
 8005294:	b590      	push	{r4, r7, lr}
 8005296:	b087      	sub	sp, #28
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
 800529c:	6039      	str	r1, [r7, #0]
=======
 80052e8:	b590      	push	{r4, r7, lr}
 80052ea:	b087      	sub	sp, #28
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
 80052f0:	6039      	str	r1, [r7, #0]
>>>>>>> main
    float abs_delta;
    float F1;
    float tau_a;
    float a3;

    if ((params->m_Adaptive_Lowpass___Initialized == false)) {
<<<<<<< HEAD
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2294      	movs	r2, #148	@ 0x94
 80052a2:	5c9b      	ldrb	r3, [r3, r2]
 80052a4:	2201      	movs	r2, #1
 80052a6:	4053      	eors	r3, r2
 80052a8:	b2db      	uxtb	r3, r3
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d00f      	beq.n	80052ce <GasIndexAlgorithm__adaptive_lowpass__process+0x3a>
        params->m_Adaptive_Lowpass___X1 = sample;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2198      	movs	r1, #152	@ 0x98
 80052b2:	683a      	ldr	r2, [r7, #0]
 80052b4:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X2 = sample;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	219c      	movs	r1, #156	@ 0x9c
 80052ba:	683a      	ldr	r2, [r7, #0]
 80052bc:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X3 = sample;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	21a0      	movs	r1, #160	@ 0xa0
 80052c2:	683a      	ldr	r2, [r7, #0]
 80052c4:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___Initialized = true;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2294      	movs	r2, #148	@ 0x94
 80052ca:	2101      	movs	r1, #1
 80052cc:	5499      	strb	r1, [r3, r2]
    }
    params->m_Adaptive_Lowpass___X1 =
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	228c      	movs	r2, #140	@ 0x8c
 80052d2:	589b      	ldr	r3, [r3, r2]
 80052d4:	1c19      	adds	r1, r3, #0
 80052d6:	20fe      	movs	r0, #254	@ 0xfe
 80052d8:	0580      	lsls	r0, r0, #22
 80052da:	f7fb fee7 	bl	80010ac <__aeabi_fsub>
 80052de:	1c03      	adds	r3, r0, #0
 80052e0:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X1) +
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2298      	movs	r2, #152	@ 0x98
 80052e6:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 80052e8:	1c19      	adds	r1, r3, #0
 80052ea:	f7fb fda1 	bl	8000e30 <__aeabi_fmul>
 80052ee:	1c03      	adds	r3, r0, #0
 80052f0:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A1 * sample));
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	228c      	movs	r2, #140	@ 0x8c
 80052f6:	589b      	ldr	r3, [r3, r2]
 80052f8:	6839      	ldr	r1, [r7, #0]
 80052fa:	1c18      	adds	r0, r3, #0
 80052fc:	f7fb fd98 	bl	8000e30 <__aeabi_fmul>
 8005300:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X1) +
 8005302:	1c19      	adds	r1, r3, #0
 8005304:	1c20      	adds	r0, r4, #0
 8005306:	f7fb fa23 	bl	8000750 <__aeabi_fadd>
 800530a:	1c03      	adds	r3, r0, #0
 800530c:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X1 =
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2298      	movs	r2, #152	@ 0x98
 8005312:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___X2 =
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2290      	movs	r2, #144	@ 0x90
 8005318:	589b      	ldr	r3, [r3, r2]
 800531a:	1c19      	adds	r1, r3, #0
 800531c:	20fe      	movs	r0, #254	@ 0xfe
 800531e:	0580      	lsls	r0, r0, #22
 8005320:	f7fb fec4 	bl	80010ac <__aeabi_fsub>
 8005324:	1c03      	adds	r3, r0, #0
 8005326:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X2) +
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	229c      	movs	r2, #156	@ 0x9c
 800532c:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 800532e:	1c19      	adds	r1, r3, #0
 8005330:	f7fb fd7e 	bl	8000e30 <__aeabi_fmul>
 8005334:	1c03      	adds	r3, r0, #0
 8005336:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A2 * sample));
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2290      	movs	r2, #144	@ 0x90
 800533c:	589b      	ldr	r3, [r3, r2]
 800533e:	6839      	ldr	r1, [r7, #0]
 8005340:	1c18      	adds	r0, r3, #0
 8005342:	f7fb fd75 	bl	8000e30 <__aeabi_fmul>
 8005346:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X2) +
 8005348:	1c19      	adds	r1, r3, #0
 800534a:	1c20      	adds	r0, r4, #0
 800534c:	f7fb fa00 	bl	8000750 <__aeabi_fadd>
 8005350:	1c03      	adds	r3, r0, #0
 8005352:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X2 =
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	229c      	movs	r2, #156	@ 0x9c
 8005358:	5099      	str	r1, [r3, r2]
    abs_delta =
        (params->m_Adaptive_Lowpass___X1 - params->m_Adaptive_Lowpass___X2);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2298      	movs	r2, #152	@ 0x98
 800535e:	589a      	ldr	r2, [r3, r2]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	219c      	movs	r1, #156	@ 0x9c
 8005364:	585b      	ldr	r3, [r3, r1]
    abs_delta =
 8005366:	1c19      	adds	r1, r3, #0
 8005368:	1c10      	adds	r0, r2, #0
 800536a:	f7fb fe9f 	bl	80010ac <__aeabi_fsub>
 800536e:	1c03      	adds	r3, r0, #0
 8005370:	617b      	str	r3, [r7, #20]
    if ((abs_delta < 0.f)) {
 8005372:	2100      	movs	r1, #0
 8005374:	6978      	ldr	r0, [r7, #20]
 8005376:	f7fb f8a9 	bl	80004cc <__aeabi_fcmplt>
 800537a:	1e03      	subs	r3, r0, #0
 800537c:	d004      	beq.n	8005388 <GasIndexAlgorithm__adaptive_lowpass__process+0xf4>
        abs_delta = (-1.f * abs_delta);
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	2280      	movs	r2, #128	@ 0x80
 8005382:	0612      	lsls	r2, r2, #24
 8005384:	4053      	eors	r3, r2
 8005386:	617b      	str	r3, [r7, #20]
    }
    F1 = expf((GasIndexAlgorithm_LP_ALPHA * abs_delta));
 8005388:	4923      	ldr	r1, [pc, #140]	@ (8005418 <GasIndexAlgorithm__adaptive_lowpass__process+0x184>)
 800538a:	6978      	ldr	r0, [r7, #20]
 800538c:	f7fb fd50 	bl	8000e30 <__aeabi_fmul>
 8005390:	1c03      	adds	r3, r0, #0
 8005392:	1c18      	adds	r0, r3, #0
 8005394:	f00a fb3a 	bl	800fa0c <expf>
 8005398:	1c03      	adds	r3, r0, #0
 800539a:	613b      	str	r3, [r7, #16]
    tau_a = (((GasIndexAlgorithm_LP_TAU_SLOW - GasIndexAlgorithm_LP_TAU_FAST) *
 800539c:	491f      	ldr	r1, [pc, #124]	@ (800541c <GasIndexAlgorithm__adaptive_lowpass__process+0x188>)
 800539e:	6938      	ldr	r0, [r7, #16]
 80053a0:	f7fb fd46 	bl	8000e30 <__aeabi_fmul>
 80053a4:	1c03      	adds	r3, r0, #0
 80053a6:	491e      	ldr	r1, [pc, #120]	@ (8005420 <GasIndexAlgorithm__adaptive_lowpass__process+0x18c>)
 80053a8:	1c18      	adds	r0, r3, #0
 80053aa:	f7fb f9d1 	bl	8000750 <__aeabi_fadd>
 80053ae:	1c03      	adds	r3, r0, #0
 80053b0:	60fb      	str	r3, [r7, #12]
              F1) +
             GasIndexAlgorithm_LP_TAU_FAST);
    a3 = (params->mSamplingInterval / (params->mSamplingInterval + tau_a));
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	685c      	ldr	r4, [r3, #4]
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	68f9      	ldr	r1, [r7, #12]
 80053bc:	1c18      	adds	r0, r3, #0
 80053be:	f7fb f9c7 	bl	8000750 <__aeabi_fadd>
 80053c2:	1c03      	adds	r3, r0, #0
 80053c4:	1c19      	adds	r1, r3, #0
 80053c6:	1c20      	adds	r0, r4, #0
 80053c8:	f7fb fb4c 	bl	8000a64 <__aeabi_fdiv>
 80053cc:	1c03      	adds	r3, r0, #0
 80053ce:	60bb      	str	r3, [r7, #8]
    params->m_Adaptive_Lowpass___X3 =
        (((1.f - a3) * params->m_Adaptive_Lowpass___X3) + (a3 * sample));
 80053d0:	68b9      	ldr	r1, [r7, #8]
 80053d2:	20fe      	movs	r0, #254	@ 0xfe
 80053d4:	0580      	lsls	r0, r0, #22
 80053d6:	f7fb fe69 	bl	80010ac <__aeabi_fsub>
 80053da:	1c03      	adds	r3, r0, #0
 80053dc:	1c18      	adds	r0, r3, #0
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	22a0      	movs	r2, #160	@ 0xa0
 80053e2:	589b      	ldr	r3, [r3, r2]
 80053e4:	1c19      	adds	r1, r3, #0
 80053e6:	f7fb fd23 	bl	8000e30 <__aeabi_fmul>
 80053ea:	1c03      	adds	r3, r0, #0
 80053ec:	1c1c      	adds	r4, r3, #0
 80053ee:	6839      	ldr	r1, [r7, #0]
 80053f0:	68b8      	ldr	r0, [r7, #8]
 80053f2:	f7fb fd1d 	bl	8000e30 <__aeabi_fmul>
 80053f6:	1c03      	adds	r3, r0, #0
 80053f8:	1c19      	adds	r1, r3, #0
 80053fa:	1c20      	adds	r0, r4, #0
 80053fc:	f7fb f9a8 	bl	8000750 <__aeabi_fadd>
 8005400:	1c03      	adds	r3, r0, #0
 8005402:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X3 =
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	22a0      	movs	r2, #160	@ 0xa0
 8005408:	5099      	str	r1, [r3, r2]
    return params->m_Adaptive_Lowpass___X3;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	22a0      	movs	r2, #160	@ 0xa0
 800540e:	589b      	ldr	r3, [r3, r2]
}
 8005410:	1c18      	adds	r0, r3, #0
 8005412:	46bd      	mov	sp, r7
 8005414:	b007      	add	sp, #28
 8005416:	bd90      	pop	{r4, r7, pc}
 8005418:	be4ccccd 	.word	0xbe4ccccd
 800541c:	43f00000 	.word	0x43f00000
 8005420:	41a00000 	.word	0x41a00000

08005424 <ReadRegister>:
=======
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2294      	movs	r2, #148	@ 0x94
 80052f6:	5c9b      	ldrb	r3, [r3, r2]
 80052f8:	2201      	movs	r2, #1
 80052fa:	4053      	eors	r3, r2
 80052fc:	b2db      	uxtb	r3, r3
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d00f      	beq.n	8005322 <GasIndexAlgorithm__adaptive_lowpass__process+0x3a>
        params->m_Adaptive_Lowpass___X1 = sample;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2198      	movs	r1, #152	@ 0x98
 8005306:	683a      	ldr	r2, [r7, #0]
 8005308:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X2 = sample;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	219c      	movs	r1, #156	@ 0x9c
 800530e:	683a      	ldr	r2, [r7, #0]
 8005310:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X3 = sample;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	21a0      	movs	r1, #160	@ 0xa0
 8005316:	683a      	ldr	r2, [r7, #0]
 8005318:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___Initialized = true;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2294      	movs	r2, #148	@ 0x94
 800531e:	2101      	movs	r1, #1
 8005320:	5499      	strb	r1, [r3, r2]
    }
    params->m_Adaptive_Lowpass___X1 =
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	228c      	movs	r2, #140	@ 0x8c
 8005326:	589b      	ldr	r3, [r3, r2]
 8005328:	1c19      	adds	r1, r3, #0
 800532a:	20fe      	movs	r0, #254	@ 0xfe
 800532c:	0580      	lsls	r0, r0, #22
 800532e:	f7fb fef3 	bl	8001118 <__aeabi_fsub>
 8005332:	1c03      	adds	r3, r0, #0
 8005334:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X1) +
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2298      	movs	r2, #152	@ 0x98
 800533a:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 800533c:	1c19      	adds	r1, r3, #0
 800533e:	f7fb fdad 	bl	8000e9c <__aeabi_fmul>
 8005342:	1c03      	adds	r3, r0, #0
 8005344:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A1 * sample));
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	228c      	movs	r2, #140	@ 0x8c
 800534a:	589b      	ldr	r3, [r3, r2]
 800534c:	6839      	ldr	r1, [r7, #0]
 800534e:	1c18      	adds	r0, r3, #0
 8005350:	f7fb fda4 	bl	8000e9c <__aeabi_fmul>
 8005354:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X1) +
 8005356:	1c19      	adds	r1, r3, #0
 8005358:	1c20      	adds	r0, r4, #0
 800535a:	f7fb fa2f 	bl	80007bc <__aeabi_fadd>
 800535e:	1c03      	adds	r3, r0, #0
 8005360:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X1 =
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2298      	movs	r2, #152	@ 0x98
 8005366:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___X2 =
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2290      	movs	r2, #144	@ 0x90
 800536c:	589b      	ldr	r3, [r3, r2]
 800536e:	1c19      	adds	r1, r3, #0
 8005370:	20fe      	movs	r0, #254	@ 0xfe
 8005372:	0580      	lsls	r0, r0, #22
 8005374:	f7fb fed0 	bl	8001118 <__aeabi_fsub>
 8005378:	1c03      	adds	r3, r0, #0
 800537a:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X2) +
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	229c      	movs	r2, #156	@ 0x9c
 8005380:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 8005382:	1c19      	adds	r1, r3, #0
 8005384:	f7fb fd8a 	bl	8000e9c <__aeabi_fmul>
 8005388:	1c03      	adds	r3, r0, #0
 800538a:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A2 * sample));
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2290      	movs	r2, #144	@ 0x90
 8005390:	589b      	ldr	r3, [r3, r2]
 8005392:	6839      	ldr	r1, [r7, #0]
 8005394:	1c18      	adds	r0, r3, #0
 8005396:	f7fb fd81 	bl	8000e9c <__aeabi_fmul>
 800539a:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X2) +
 800539c:	1c19      	adds	r1, r3, #0
 800539e:	1c20      	adds	r0, r4, #0
 80053a0:	f7fb fa0c 	bl	80007bc <__aeabi_fadd>
 80053a4:	1c03      	adds	r3, r0, #0
 80053a6:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X2 =
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	229c      	movs	r2, #156	@ 0x9c
 80053ac:	5099      	str	r1, [r3, r2]
    abs_delta =
        (params->m_Adaptive_Lowpass___X1 - params->m_Adaptive_Lowpass___X2);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2298      	movs	r2, #152	@ 0x98
 80053b2:	589a      	ldr	r2, [r3, r2]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	219c      	movs	r1, #156	@ 0x9c
 80053b8:	585b      	ldr	r3, [r3, r1]
    abs_delta =
 80053ba:	1c19      	adds	r1, r3, #0
 80053bc:	1c10      	adds	r0, r2, #0
 80053be:	f7fb feab 	bl	8001118 <__aeabi_fsub>
 80053c2:	1c03      	adds	r3, r0, #0
 80053c4:	617b      	str	r3, [r7, #20]
    if ((abs_delta < 0.f)) {
 80053c6:	2100      	movs	r1, #0
 80053c8:	6978      	ldr	r0, [r7, #20]
 80053ca:	f7fb f87f 	bl	80004cc <__aeabi_fcmplt>
 80053ce:	1e03      	subs	r3, r0, #0
 80053d0:	d004      	beq.n	80053dc <GasIndexAlgorithm__adaptive_lowpass__process+0xf4>
        abs_delta = (-1.f * abs_delta);
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	2280      	movs	r2, #128	@ 0x80
 80053d6:	0612      	lsls	r2, r2, #24
 80053d8:	4053      	eors	r3, r2
 80053da:	617b      	str	r3, [r7, #20]
    }
    F1 = expf((GasIndexAlgorithm_LP_ALPHA * abs_delta));
 80053dc:	4923      	ldr	r1, [pc, #140]	@ (800546c <GasIndexAlgorithm__adaptive_lowpass__process+0x184>)
 80053de:	6978      	ldr	r0, [r7, #20]
 80053e0:	f7fb fd5c 	bl	8000e9c <__aeabi_fmul>
 80053e4:	1c03      	adds	r3, r0, #0
 80053e6:	1c18      	adds	r0, r3, #0
 80053e8:	f00a fc5c 	bl	800fca4 <expf>
 80053ec:	1c03      	adds	r3, r0, #0
 80053ee:	613b      	str	r3, [r7, #16]
    tau_a = (((GasIndexAlgorithm_LP_TAU_SLOW - GasIndexAlgorithm_LP_TAU_FAST) *
 80053f0:	491f      	ldr	r1, [pc, #124]	@ (8005470 <GasIndexAlgorithm__adaptive_lowpass__process+0x188>)
 80053f2:	6938      	ldr	r0, [r7, #16]
 80053f4:	f7fb fd52 	bl	8000e9c <__aeabi_fmul>
 80053f8:	1c03      	adds	r3, r0, #0
 80053fa:	491e      	ldr	r1, [pc, #120]	@ (8005474 <GasIndexAlgorithm__adaptive_lowpass__process+0x18c>)
 80053fc:	1c18      	adds	r0, r3, #0
 80053fe:	f7fb f9dd 	bl	80007bc <__aeabi_fadd>
 8005402:	1c03      	adds	r3, r0, #0
 8005404:	60fb      	str	r3, [r7, #12]
              F1) +
             GasIndexAlgorithm_LP_TAU_FAST);
    a3 = (params->mSamplingInterval / (params->mSamplingInterval + tau_a));
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	685c      	ldr	r4, [r3, #4]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	68f9      	ldr	r1, [r7, #12]
 8005410:	1c18      	adds	r0, r3, #0
 8005412:	f7fb f9d3 	bl	80007bc <__aeabi_fadd>
 8005416:	1c03      	adds	r3, r0, #0
 8005418:	1c19      	adds	r1, r3, #0
 800541a:	1c20      	adds	r0, r4, #0
 800541c:	f7fb fb58 	bl	8000ad0 <__aeabi_fdiv>
 8005420:	1c03      	adds	r3, r0, #0
 8005422:	60bb      	str	r3, [r7, #8]
    params->m_Adaptive_Lowpass___X3 =
        (((1.f - a3) * params->m_Adaptive_Lowpass___X3) + (a3 * sample));
 8005424:	68b9      	ldr	r1, [r7, #8]
 8005426:	20fe      	movs	r0, #254	@ 0xfe
 8005428:	0580      	lsls	r0, r0, #22
 800542a:	f7fb fe75 	bl	8001118 <__aeabi_fsub>
 800542e:	1c03      	adds	r3, r0, #0
 8005430:	1c18      	adds	r0, r3, #0
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	22a0      	movs	r2, #160	@ 0xa0
 8005436:	589b      	ldr	r3, [r3, r2]
 8005438:	1c19      	adds	r1, r3, #0
 800543a:	f7fb fd2f 	bl	8000e9c <__aeabi_fmul>
 800543e:	1c03      	adds	r3, r0, #0
 8005440:	1c1c      	adds	r4, r3, #0
 8005442:	6839      	ldr	r1, [r7, #0]
 8005444:	68b8      	ldr	r0, [r7, #8]
 8005446:	f7fb fd29 	bl	8000e9c <__aeabi_fmul>
 800544a:	1c03      	adds	r3, r0, #0
 800544c:	1c19      	adds	r1, r3, #0
 800544e:	1c20      	adds	r0, r4, #0
 8005450:	f7fb f9b4 	bl	80007bc <__aeabi_fadd>
 8005454:	1c03      	adds	r3, r0, #0
 8005456:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X3 =
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	22a0      	movs	r2, #160	@ 0xa0
 800545c:	5099      	str	r1, [r3, r2]
    return params->m_Adaptive_Lowpass___X3;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	22a0      	movs	r2, #160	@ 0xa0
 8005462:	589b      	ldr	r3, [r3, r2]
}
 8005464:	1c18      	adds	r0, r3, #0
 8005466:	46bd      	mov	sp, r7
 8005468:	b007      	add	sp, #28
 800546a:	bd90      	pop	{r4, r7, pc}
 800546c:	be4ccccd 	.word	0xbe4ccccd
 8005470:	43f00000 	.word	0x43f00000
 8005474:	41a00000 	.word	0x41a00000

08005478 <ReadRegister>:
>>>>>>> main
//#define SGP_TEST_BUFFER_SIZE 6
//#define SGP_TEST_SEGMENT_SIZE 3
// static uint8_t SGP_TestBuffer[SGP_TEST_BUFFER_SIZE] = {0xBE, 0xEF, 0x92,
// 0xBE, 0xEF, 0x92};

static void ReadRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
<<<<<<< HEAD
 8005424:	b590      	push	{r4, r7, lr}
 8005426:	b083      	sub	sp, #12
 8005428:	af00      	add	r7, sp, #0
 800542a:	6039      	str	r1, [r7, #0]
 800542c:	0011      	movs	r1, r2
 800542e:	1dfb      	adds	r3, r7, #7
 8005430:	1c02      	adds	r2, r0, #0
 8005432:	701a      	strb	r2, [r3, #0]
 8005434:	1dbb      	adds	r3, r7, #6
 8005436:	1c0a      	adds	r2, r1, #0
 8005438:	701a      	strb	r2, [r3, #0]
  if (ReadFunction != NULL) {
 800543a:	4b08      	ldr	r3, [pc, #32]	@ (800545c <ReadRegister+0x38>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d008      	beq.n	8005454 <ReadRegister+0x30>
    ReadFunction(address, buffer, nrBytes);
 8005442:	4b06      	ldr	r3, [pc, #24]	@ (800545c <ReadRegister+0x38>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	1dba      	adds	r2, r7, #6
 8005448:	7814      	ldrb	r4, [r2, #0]
 800544a:	6839      	ldr	r1, [r7, #0]
 800544c:	1dfa      	adds	r2, r7, #7
 800544e:	7810      	ldrb	r0, [r2, #0]
 8005450:	0022      	movs	r2, r4
 8005452:	4798      	blx	r3
  }
}
 8005454:	46c0      	nop			@ (mov r8, r8)
 8005456:	46bd      	mov	sp, r7
 8005458:	b003      	add	sp, #12
 800545a:	bd90      	pop	{r4, r7, pc}
 800545c:	20000864 	.word	0x20000864

08005460 <WriteRegister>:

static void WriteRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 8005460:	b590      	push	{r4, r7, lr}
 8005462:	b083      	sub	sp, #12
 8005464:	af00      	add	r7, sp, #0
 8005466:	6039      	str	r1, [r7, #0]
 8005468:	0011      	movs	r1, r2
 800546a:	1dfb      	adds	r3, r7, #7
 800546c:	1c02      	adds	r2, r0, #0
 800546e:	701a      	strb	r2, [r3, #0]
 8005470:	1dbb      	adds	r3, r7, #6
 8005472:	1c0a      	adds	r2, r1, #0
 8005474:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 8005476:	4b08      	ldr	r3, [pc, #32]	@ (8005498 <WriteRegister+0x38>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d008      	beq.n	8005490 <WriteRegister+0x30>
    WriteFunction(address, buffer, nrBytes);
 800547e:	4b06      	ldr	r3, [pc, #24]	@ (8005498 <WriteRegister+0x38>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	1dba      	adds	r2, r7, #6
 8005484:	7814      	ldrb	r4, [r2, #0]
 8005486:	6839      	ldr	r1, [r7, #0]
 8005488:	1dfa      	adds	r2, r7, #7
 800548a:	7810      	ldrb	r0, [r2, #0]
 800548c:	0022      	movs	r2, r4
 800548e:	4798      	blx	r3
  }
}
 8005490:	46c0      	nop			@ (mov r8, r8)
 8005492:	46bd      	mov	sp, r7
 8005494:	b003      	add	sp, #12
 8005496:	bd90      	pop	{r4, r7, pc}
 8005498:	20000868 	.word	0x20000868

0800549c <SGP_Init>:

void SGP_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 800549c:	b580      	push	{r7, lr}
 800549e:	b082      	sub	sp, #8
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
 80054a4:	6039      	str	r1, [r7, #0]
  ReadFunction = readFunction;
 80054a6:	4b07      	ldr	r3, [pc, #28]	@ (80054c4 <SGP_Init+0x28>)
 80054a8:	687a      	ldr	r2, [r7, #4]
 80054aa:	601a      	str	r2, [r3, #0]
  WriteFunction = writeFunction;
 80054ac:	4b06      	ldr	r3, [pc, #24]	@ (80054c8 <SGP_Init+0x2c>)
 80054ae:	683a      	ldr	r2, [r7, #0]
 80054b0:	601a      	str	r2, [r3, #0]
  GasIndexAlgorithm_init(&params, GasIndexAlgorithm_ALGORITHM_TYPE_VOC);
 80054b2:	4b06      	ldr	r3, [pc, #24]	@ (80054cc <SGP_Init+0x30>)
 80054b4:	2100      	movs	r1, #0
 80054b6:	0018      	movs	r0, r3
 80054b8:	f7ff f930 	bl	800471c <GasIndexAlgorithm_init>
}
 80054bc:	46c0      	nop			@ (mov r8, r8)
 80054be:	46bd      	mov	sp, r7
 80054c0:	b002      	add	sp, #8
 80054c2:	bd80      	pop	{r7, pc}
 80054c4:	20000864 	.word	0x20000864
 80054c8:	20000868 	.word	0x20000868
 80054cc:	20000878 	.word	0x20000878

080054d0 <SGP_StartMeasurement>:

void SGP_StartMeasurement(void) {
 80054d0:	b580      	push	{r7, lr}
 80054d2:	af00      	add	r7, sp, #0
  WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 80054d4:	4b0a      	ldr	r3, [pc, #40]	@ (8005500 <SGP_StartMeasurement+0x30>)
 80054d6:	2208      	movs	r2, #8
 80054d8:	0019      	movs	r1, r3
 80054da:	2059      	movs	r0, #89	@ 0x59
 80054dc:	f7ff ffc0 	bl	8005460 <WriteRegister>
  SGP_HeatUpTime = GetCurrentHalTicks() + SGP_SENSOR_HEATUP_TIME;
 80054e0:	f001 f83e 	bl	8006560 <GetCurrentHalTicks>
 80054e4:	0003      	movs	r3, r0
 80054e6:	33aa      	adds	r3, #170	@ 0xaa
 80054e8:	001a      	movs	r2, r3
 80054ea:	4b06      	ldr	r3, [pc, #24]	@ (8005504 <SGP_StartMeasurement+0x34>)
 80054ec:	601a      	str	r2, [r3, #0]
  HeatUpIsDone = false;
 80054ee:	4b06      	ldr	r3, [pc, #24]	@ (8005508 <SGP_StartMeasurement+0x38>)
 80054f0:	2200      	movs	r2, #0
 80054f2:	701a      	strb	r2, [r3, #0]
  MeasurementIsReady = false;
 80054f4:	4b05      	ldr	r3, [pc, #20]	@ (800550c <SGP_StartMeasurement+0x3c>)
 80054f6:	2200      	movs	r2, #0
 80054f8:	701a      	strb	r2, [r3, #0]
}
 80054fa:	46c0      	nop			@ (mov r8, r8)
 80054fc:	46bd      	mov	sp, r7
 80054fe:	bd80      	pop	{r7, pc}
 8005500:	20000014 	.word	0x20000014
 8005504:	20000020 	.word	0x20000020
 8005508:	20000876 	.word	0x20000876
 800550c:	20000877 	.word	0x20000877

08005510 <SGP_HeatedUp>:

static bool SGP_HeatedUp(void) { return TimestampIsReached(SGP_HeatUpTime); }
 8005510:	b580      	push	{r7, lr}
 8005512:	af00      	add	r7, sp, #0
 8005514:	4b04      	ldr	r3, [pc, #16]	@ (8005528 <SGP_HeatedUp+0x18>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	0018      	movs	r0, r3
 800551a:	f000 ff3f 	bl	800639c <TimestampIsReached>
 800551e:	0003      	movs	r3, r0
 8005520:	0018      	movs	r0, r3
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}
 8005526:	46c0      	nop			@ (mov r8, r8)
 8005528:	20000020 	.word	0x20000020

0800552c <SGP_MeasurementReady>:

static bool SGP_MeasurementReady(void) {
 800552c:	b580      	push	{r7, lr}
 800552e:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_IdleTime);
 8005530:	4b04      	ldr	r3, [pc, #16]	@ (8005544 <SGP_MeasurementReady+0x18>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	0018      	movs	r0, r3
 8005536:	f000 ff31 	bl	800639c <TimestampIsReached>
 800553a:	0003      	movs	r3, r0
}
 800553c:	0018      	movs	r0, r3
 800553e:	46bd      	mov	sp, r7
 8005540:	bd80      	pop	{r7, pc}
 8005542:	46c0      	nop			@ (mov r8, r8)
 8005544:	20000028 	.word	0x20000028

08005548 <SGP_MeasurementDone>:

static bool SGP_MeasurementDone(void) {
 8005548:	b580      	push	{r7, lr}
 800554a:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_MeasurementDutyCycle);
 800554c:	4b04      	ldr	r3, [pc, #16]	@ (8005560 <SGP_MeasurementDone+0x18>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	0018      	movs	r0, r3
 8005552:	f000 ff23 	bl	800639c <TimestampIsReached>
 8005556:	0003      	movs	r3, r0
}
 8005558:	0018      	movs	r0, r3
 800555a:	46bd      	mov	sp, r7
 800555c:	bd80      	pop	{r7, pc}
 800555e:	46c0      	nop			@ (mov r8, r8)
 8005560:	20000024 	.word	0x20000024

08005564 <SGP_TurnHeaterOff>:

void SGP_TurnHeaterOff(void) {
 8005564:	b580      	push	{r7, lr}
 8005566:	af00      	add	r7, sp, #0
  // This command could take from 0.1 to 1ms.
  WriteRegister(SGP_I2C_ADDRESS, TurnHeaterOffBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 8005568:	4b04      	ldr	r3, [pc, #16]	@ (800557c <SGP_TurnHeaterOff+0x18>)
 800556a:	2202      	movs	r2, #2
 800556c:	0019      	movs	r1, r3
 800556e:	2059      	movs	r0, #89	@ 0x59
 8005570:	f7ff ff76 	bl	8005460 <WriteRegister>
}
 8005574:	46c0      	nop			@ (mov r8, r8)
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}
 800557a:	46c0      	nop			@ (mov r8, r8)
 800557c:	2000000c 	.word	0x2000000c

08005580 <SGP_GetMeasurementValues>:

bool SGP_GetMeasurementValues(int32_t *vocIndex) {
 8005580:	b590      	push	{r4, r7, lr}
 8005582:	b087      	sub	sp, #28
 8005584:	af02      	add	r7, sp, #8
 8005586:	6078      	str	r0, [r7, #4]
  // TODO: Don't parse the values 0 since VOC index is still measuring.
  // Maybe use the
  if (SGP_HeatedUp() && !HeatUpIsDone) {
 8005588:	f7ff ffc2 	bl	8005510 <SGP_HeatedUp>
 800558c:	1e03      	subs	r3, r0, #0
 800558e:	d01c      	beq.n	80055ca <SGP_GetMeasurementValues+0x4a>
 8005590:	4b6b      	ldr	r3, [pc, #428]	@ (8005740 <SGP_GetMeasurementValues+0x1c0>)
 8005592:	781b      	ldrb	r3, [r3, #0]
 8005594:	2201      	movs	r2, #1
 8005596:	4053      	eors	r3, r2
 8005598:	b2db      	uxtb	r3, r3
 800559a:	2b00      	cmp	r3, #0
 800559c:	d015      	beq.n	80055ca <SGP_GetMeasurementValues+0x4a>
    Debug("SGP is heated up, starting the measurement.");
 800559e:	4a69      	ldr	r2, [pc, #420]	@ (8005744 <SGP_GetMeasurementValues+0x1c4>)
 80055a0:	4b69      	ldr	r3, [pc, #420]	@ (8005748 <SGP_GetMeasurementValues+0x1c8>)
 80055a2:	0019      	movs	r1, r3
 80055a4:	2003      	movs	r0, #3
 80055a6:	f000 ff4f 	bl	8006448 <CreateLine>
    HeatUpIsDone = true;
 80055aa:	4b65      	ldr	r3, [pc, #404]	@ (8005740 <SGP_GetMeasurementValues+0x1c0>)
 80055ac:	2201      	movs	r2, #1
 80055ae:	701a      	strb	r2, [r3, #0]
    // SGP is heated up, we ignore the output and start another measurement.
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 80055b0:	4b66      	ldr	r3, [pc, #408]	@ (800574c <SGP_GetMeasurementValues+0x1cc>)
 80055b2:	2208      	movs	r2, #8
 80055b4:	0019      	movs	r1, r3
 80055b6:	2059      	movs	r0, #89	@ 0x59
 80055b8:	f7ff ff52 	bl	8005460 <WriteRegister>
    SGP_IdleTime = GetCurrentHalTicks() + SGP_SENSOR_IDLE_TIME;
 80055bc:	f000 ffd0 	bl	8006560 <GetCurrentHalTicks>
 80055c0:	0003      	movs	r3, r0
 80055c2:	331e      	adds	r3, #30
 80055c4:	001a      	movs	r2, r3
 80055c6:	4b62      	ldr	r3, [pc, #392]	@ (8005750 <SGP_GetMeasurementValues+0x1d0>)
 80055c8:	601a      	str	r2, [r3, #0]
  }
  if (HeatUpIsDone && SGP_MeasurementReady() && !MeasurementIsReady) {
 80055ca:	4b5d      	ldr	r3, [pc, #372]	@ (8005740 <SGP_GetMeasurementValues+0x1c0>)
 80055cc:	781b      	ldrb	r3, [r3, #0]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d100      	bne.n	80055d4 <SGP_GetMeasurementValues+0x54>
 80055d2:	e09c      	b.n	800570e <SGP_GetMeasurementValues+0x18e>
 80055d4:	f7ff ffaa 	bl	800552c <SGP_MeasurementReady>
 80055d8:	1e03      	subs	r3, r0, #0
 80055da:	d100      	bne.n	80055de <SGP_GetMeasurementValues+0x5e>
 80055dc:	e097      	b.n	800570e <SGP_GetMeasurementValues+0x18e>
 80055de:	4b5d      	ldr	r3, [pc, #372]	@ (8005754 <SGP_GetMeasurementValues+0x1d4>)
 80055e0:	781b      	ldrb	r3, [r3, #0]
 80055e2:	2201      	movs	r2, #1
 80055e4:	4053      	eors	r3, r2
 80055e6:	b2db      	uxtb	r3, r3
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d100      	bne.n	80055ee <SGP_GetMeasurementValues+0x6e>
 80055ec:	e08f      	b.n	800570e <SGP_GetMeasurementValues+0x18e>
    Debug("SGP_Measurement[%i] is ready, reading buffer.", SGP_AmountOfSamplesDone + 1);
 80055ee:	4b5a      	ldr	r3, [pc, #360]	@ (8005758 <SGP_GetMeasurementValues+0x1d8>)
 80055f0:	781b      	ldrb	r3, [r3, #0]
 80055f2:	3301      	adds	r3, #1
 80055f4:	4a59      	ldr	r2, [pc, #356]	@ (800575c <SGP_GetMeasurementValues+0x1dc>)
 80055f6:	4954      	ldr	r1, [pc, #336]	@ (8005748 <SGP_GetMeasurementValues+0x1c8>)
 80055f8:	2003      	movs	r0, #3
 80055fa:	f000 ff25 	bl	8006448 <CreateLine>
    MeasurementIsReady = true;
 80055fe:	4b55      	ldr	r3, [pc, #340]	@ (8005754 <SGP_GetMeasurementValues+0x1d4>)
 8005600:	2201      	movs	r2, #1
 8005602:	701a      	strb	r2, [r3, #0]
    // Measurement is ready to be read, also turning the heater off.
    ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH);
 8005604:	4b56      	ldr	r3, [pc, #344]	@ (8005760 <SGP_GetMeasurementValues+0x1e0>)
 8005606:	2203      	movs	r2, #3
 8005608:	0019      	movs	r1, r3
 800560a:	2059      	movs	r0, #89	@ 0x59
 800560c:	f7ff ff0a 	bl	8005424 <ReadRegister>
    if (!CheckCRC(SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH, SGP_MEASURE_BUFFER_RESPONSE_LENGTH)) {
 8005610:	4b53      	ldr	r3, [pc, #332]	@ (8005760 <SGP_GetMeasurementValues+0x1e0>)
 8005612:	2203      	movs	r2, #3
 8005614:	2103      	movs	r1, #3
 8005616:	0018      	movs	r0, r3
 8005618:	f000 f8fc 	bl	8005814 <CheckCRC>
 800561c:	0003      	movs	r3, r0
 800561e:	001a      	movs	r2, r3
 8005620:	2301      	movs	r3, #1
 8005622:	4053      	eors	r3, r2
 8005624:	b2db      	uxtb	r3, r3
 8005626:	2b00      	cmp	r3, #0
 8005628:	d02a      	beq.n	8005680 <SGP_GetMeasurementValues+0x100>
      Error("SGP measurements CRC check failed.");
 800562a:	4a4e      	ldr	r2, [pc, #312]	@ (8005764 <SGP_GetMeasurementValues+0x1e4>)
 800562c:	4b4e      	ldr	r3, [pc, #312]	@ (8005768 <SGP_GetMeasurementValues+0x1e8>)
 800562e:	0019      	movs	r1, r3
 8005630:	2001      	movs	r0, #1
 8005632:	f000 ff09 	bl	8006448 <CreateLine>
      Info("SGP_Measure buffer structure:");
 8005636:	4a4d      	ldr	r2, [pc, #308]	@ (800576c <SGP_GetMeasurementValues+0x1ec>)
 8005638:	4b4d      	ldr	r3, [pc, #308]	@ (8005770 <SGP_GetMeasurementValues+0x1f0>)
 800563a:	0019      	movs	r1, r3
 800563c:	2002      	movs	r0, #2
 800563e:	f000 ff03 	bl	8006448 <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 8005642:	230f      	movs	r3, #15
 8005644:	18fb      	adds	r3, r7, r3
 8005646:	2200      	movs	r2, #0
 8005648:	701a      	strb	r2, [r3, #0]
 800564a:	e012      	b.n	8005672 <SGP_GetMeasurementValues+0xf2>
        Debug("SGP_Measurement buffer[%d]: %d", i, SGP_ReadBuffer[i]);
 800564c:	240f      	movs	r4, #15
 800564e:	193b      	adds	r3, r7, r4
 8005650:	7818      	ldrb	r0, [r3, #0]
 8005652:	193b      	adds	r3, r7, r4
 8005654:	781b      	ldrb	r3, [r3, #0]
 8005656:	4a42      	ldr	r2, [pc, #264]	@ (8005760 <SGP_GetMeasurementValues+0x1e0>)
 8005658:	5cd3      	ldrb	r3, [r2, r3]
 800565a:	4a46      	ldr	r2, [pc, #280]	@ (8005774 <SGP_GetMeasurementValues+0x1f4>)
 800565c:	493a      	ldr	r1, [pc, #232]	@ (8005748 <SGP_GetMeasurementValues+0x1c8>)
 800565e:	9300      	str	r3, [sp, #0]
 8005660:	0003      	movs	r3, r0
 8005662:	2003      	movs	r0, #3
 8005664:	f000 fef0 	bl	8006448 <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 8005668:	193b      	adds	r3, r7, r4
 800566a:	781a      	ldrb	r2, [r3, #0]
 800566c:	193b      	adds	r3, r7, r4
 800566e:	3201      	adds	r2, #1
 8005670:	701a      	strb	r2, [r3, #0]
 8005672:	230f      	movs	r3, #15
 8005674:	18fb      	adds	r3, r7, r3
 8005676:	781b      	ldrb	r3, [r3, #0]
 8005678:	2b02      	cmp	r3, #2
 800567a:	d9e7      	bls.n	800564c <SGP_GetMeasurementValues+0xcc>
      }
      return false;
 800567c:	2300      	movs	r3, #0
 800567e:	e05b      	b.n	8005738 <SGP_GetMeasurementValues+0x1b8>
    }
    SGP_MeasurementDutyCycle = GetCurrentHalTicks() + SGP_SENSOR_DUTYCYCLE;
 8005680:	f000 ff6e 	bl	8006560 <GetCurrentHalTicks>
 8005684:	0003      	movs	r3, r0
 8005686:	22fa      	movs	r2, #250	@ 0xfa
 8005688:	0092      	lsls	r2, r2, #2
 800568a:	189a      	adds	r2, r3, r2
 800568c:	4b3a      	ldr	r3, [pc, #232]	@ (8005778 <SGP_GetMeasurementValues+0x1f8>)
 800568e:	601a      	str	r2, [r3, #0]
    SGP_TurnHeaterOff();
 8005690:	f7ff ff68 	bl	8005564 <SGP_TurnHeaterOff>
    SGP_AmountOfSamplesDone += 1;
 8005694:	4b30      	ldr	r3, [pc, #192]	@ (8005758 <SGP_GetMeasurementValues+0x1d8>)
 8005696:	781b      	ldrb	r3, [r3, #0]
 8005698:	3301      	adds	r3, #1
 800569a:	b2da      	uxtb	r2, r3
 800569c:	4b2e      	ldr	r3, [pc, #184]	@ (8005758 <SGP_GetMeasurementValues+0x1d8>)
 800569e:	701a      	strb	r2, [r3, #0]
    if (SGP_AmountOfSamplesDone >= SGP_TotalSamples) {
 80056a0:	4b2d      	ldr	r3, [pc, #180]	@ (8005758 <SGP_GetMeasurementValues+0x1d8>)
 80056a2:	781a      	ldrb	r2, [r3, #0]
 80056a4:	4b35      	ldr	r3, [pc, #212]	@ (800577c <SGP_GetMeasurementValues+0x1fc>)
 80056a6:	781b      	ldrb	r3, [r3, #0]
 80056a8:	429a      	cmp	r2, r3
 80056aa:	d330      	bcc.n	800570e <SGP_GetMeasurementValues+0x18e>
      uint16_t rawSignal = ((SGP_ReadBuffer[1] << 8) | (SGP_ReadBuffer[0]));
 80056ac:	4b2c      	ldr	r3, [pc, #176]	@ (8005760 <SGP_GetMeasurementValues+0x1e0>)
 80056ae:	785b      	ldrb	r3, [r3, #1]
 80056b0:	021b      	lsls	r3, r3, #8
 80056b2:	b21a      	sxth	r2, r3
 80056b4:	4b2a      	ldr	r3, [pc, #168]	@ (8005760 <SGP_GetMeasurementValues+0x1e0>)
 80056b6:	781b      	ldrb	r3, [r3, #0]
 80056b8:	b21b      	sxth	r3, r3
 80056ba:	4313      	orrs	r3, r2
 80056bc:	b21a      	sxth	r2, r3
 80056be:	240c      	movs	r4, #12
 80056c0:	193b      	adds	r3, r7, r4
 80056c2:	801a      	strh	r2, [r3, #0]
      Debug("rawSignal value: %d", rawSignal);
 80056c4:	193b      	adds	r3, r7, r4
 80056c6:	881b      	ldrh	r3, [r3, #0]
 80056c8:	4a2d      	ldr	r2, [pc, #180]	@ (8005780 <SGP_GetMeasurementValues+0x200>)
 80056ca:	491f      	ldr	r1, [pc, #124]	@ (8005748 <SGP_GetMeasurementValues+0x1c8>)
 80056cc:	2003      	movs	r0, #3
 80056ce:	f000 febb 	bl	8006448 <CreateLine>
      int32_t tempVocIndex = 0;
 80056d2:	2300      	movs	r3, #0
 80056d4:	60bb      	str	r3, [r7, #8]
      GasIndexAlgorithm_process(&params, rawSignal, &tempVocIndex);
 80056d6:	193b      	adds	r3, r7, r4
 80056d8:	8819      	ldrh	r1, [r3, #0]
 80056da:	2308      	movs	r3, #8
 80056dc:	18fa      	adds	r2, r7, r3
 80056de:	4b29      	ldr	r3, [pc, #164]	@ (8005784 <SGP_GetMeasurementValues+0x204>)
 80056e0:	0018      	movs	r0, r3
 80056e2:	f7ff f87d 	bl	80047e0 <GasIndexAlgorithm_process>
      Debug("vocIndex value: %d", tempVocIndex);
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	4a27      	ldr	r2, [pc, #156]	@ (8005788 <SGP_GetMeasurementValues+0x208>)
 80056ea:	4917      	ldr	r1, [pc, #92]	@ (8005748 <SGP_GetMeasurementValues+0x1c8>)
 80056ec:	2003      	movs	r0, #3
 80056ee:	f000 feab 	bl	8006448 <CreateLine>
//      *vocIndex = 1337;
      *vocIndex = tempVocIndex;
 80056f2:	68ba      	ldr	r2, [r7, #8]
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	601a      	str	r2, [r3, #0]
      SGP_AmountOfSamplesDone = 0;
 80056f8:	4b17      	ldr	r3, [pc, #92]	@ (8005758 <SGP_GetMeasurementValues+0x1d8>)
 80056fa:	2200      	movs	r2, #0
 80056fc:	701a      	strb	r2, [r3, #0]
      Debug("SGP_Measurement completely done.");
 80056fe:	4a23      	ldr	r2, [pc, #140]	@ (800578c <SGP_GetMeasurementValues+0x20c>)
 8005700:	4b11      	ldr	r3, [pc, #68]	@ (8005748 <SGP_GetMeasurementValues+0x1c8>)
 8005702:	0019      	movs	r1, r3
 8005704:	2003      	movs	r0, #3
 8005706:	f000 fe9f 	bl	8006448 <CreateLine>
=======
 8005478:	b590      	push	{r4, r7, lr}
 800547a:	b083      	sub	sp, #12
 800547c:	af00      	add	r7, sp, #0
 800547e:	6039      	str	r1, [r7, #0]
 8005480:	0011      	movs	r1, r2
 8005482:	1dfb      	adds	r3, r7, #7
 8005484:	1c02      	adds	r2, r0, #0
 8005486:	701a      	strb	r2, [r3, #0]
 8005488:	1dbb      	adds	r3, r7, #6
 800548a:	1c0a      	adds	r2, r1, #0
 800548c:	701a      	strb	r2, [r3, #0]
  if (ReadFunction != NULL) {
 800548e:	4b08      	ldr	r3, [pc, #32]	@ (80054b0 <ReadRegister+0x38>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d008      	beq.n	80054a8 <ReadRegister+0x30>
    ReadFunction(address, buffer, nrBytes);
 8005496:	4b06      	ldr	r3, [pc, #24]	@ (80054b0 <ReadRegister+0x38>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	1dba      	adds	r2, r7, #6
 800549c:	7814      	ldrb	r4, [r2, #0]
 800549e:	6839      	ldr	r1, [r7, #0]
 80054a0:	1dfa      	adds	r2, r7, #7
 80054a2:	7810      	ldrb	r0, [r2, #0]
 80054a4:	0022      	movs	r2, r4
 80054a6:	4798      	blx	r3
  }
}
 80054a8:	46c0      	nop			@ (mov r8, r8)
 80054aa:	46bd      	mov	sp, r7
 80054ac:	b003      	add	sp, #12
 80054ae:	bd90      	pop	{r4, r7, pc}
 80054b0:	20000c70 	.word	0x20000c70

080054b4 <WriteRegister>:

static void WriteRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 80054b4:	b590      	push	{r4, r7, lr}
 80054b6:	b083      	sub	sp, #12
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6039      	str	r1, [r7, #0]
 80054bc:	0011      	movs	r1, r2
 80054be:	1dfb      	adds	r3, r7, #7
 80054c0:	1c02      	adds	r2, r0, #0
 80054c2:	701a      	strb	r2, [r3, #0]
 80054c4:	1dbb      	adds	r3, r7, #6
 80054c6:	1c0a      	adds	r2, r1, #0
 80054c8:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 80054ca:	4b08      	ldr	r3, [pc, #32]	@ (80054ec <WriteRegister+0x38>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d008      	beq.n	80054e4 <WriteRegister+0x30>
    WriteFunction(address, buffer, nrBytes);
 80054d2:	4b06      	ldr	r3, [pc, #24]	@ (80054ec <WriteRegister+0x38>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	1dba      	adds	r2, r7, #6
 80054d8:	7814      	ldrb	r4, [r2, #0]
 80054da:	6839      	ldr	r1, [r7, #0]
 80054dc:	1dfa      	adds	r2, r7, #7
 80054de:	7810      	ldrb	r0, [r2, #0]
 80054e0:	0022      	movs	r2, r4
 80054e2:	4798      	blx	r3
  }
}
 80054e4:	46c0      	nop			@ (mov r8, r8)
 80054e6:	46bd      	mov	sp, r7
 80054e8:	b003      	add	sp, #12
 80054ea:	bd90      	pop	{r4, r7, pc}
 80054ec:	20000c74 	.word	0x20000c74

080054f0 <SGP_Init>:

void SGP_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b082      	sub	sp, #8
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
 80054f8:	6039      	str	r1, [r7, #0]
  ReadFunction = readFunction;
 80054fa:	4b07      	ldr	r3, [pc, #28]	@ (8005518 <SGP_Init+0x28>)
 80054fc:	687a      	ldr	r2, [r7, #4]
 80054fe:	601a      	str	r2, [r3, #0]
  WriteFunction = writeFunction;
 8005500:	4b06      	ldr	r3, [pc, #24]	@ (800551c <SGP_Init+0x2c>)
 8005502:	683a      	ldr	r2, [r7, #0]
 8005504:	601a      	str	r2, [r3, #0]
  GasIndexAlgorithm_init(&params, GasIndexAlgorithm_ALGORITHM_TYPE_VOC);
 8005506:	4b06      	ldr	r3, [pc, #24]	@ (8005520 <SGP_Init+0x30>)
 8005508:	2100      	movs	r1, #0
 800550a:	0018      	movs	r0, r3
 800550c:	f7ff f930 	bl	8004770 <GasIndexAlgorithm_init>
}
 8005510:	46c0      	nop			@ (mov r8, r8)
 8005512:	46bd      	mov	sp, r7
 8005514:	b002      	add	sp, #8
 8005516:	bd80      	pop	{r7, pc}
 8005518:	20000c70 	.word	0x20000c70
 800551c:	20000c74 	.word	0x20000c74
 8005520:	20000c84 	.word	0x20000c84

08005524 <SGP_StartMeasurement>:

void SGP_StartMeasurement(void) {
 8005524:	b580      	push	{r7, lr}
 8005526:	af00      	add	r7, sp, #0
  if(HT_MeasurementReceived){
 8005528:	4b13      	ldr	r3, [pc, #76]	@ (8005578 <SGP_StartMeasurement+0x54>)
 800552a:	781b      	ldrb	r3, [r3, #0]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d00d      	beq.n	800554c <SGP_StartMeasurement+0x28>
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 8005530:	4b12      	ldr	r3, [pc, #72]	@ (800557c <SGP_StartMeasurement+0x58>)
 8005532:	2208      	movs	r2, #8
 8005534:	0019      	movs	r1, r3
 8005536:	2059      	movs	r0, #89	@ 0x59
 8005538:	f7ff ffbc 	bl	80054b4 <WriteRegister>
    SGP_IdleTime = GetCurrentHalTicks() + SGP_SENSOR_IDLE_TIME;
 800553c:	f001 f998 	bl	8006870 <GetCurrentHalTicks>
 8005540:	0003      	movs	r3, r0
 8005542:	331e      	adds	r3, #30
 8005544:	001a      	movs	r2, r3
 8005546:	4b0e      	ldr	r3, [pc, #56]	@ (8005580 <SGP_StartMeasurement+0x5c>)
 8005548:	601a      	str	r2, [r3, #0]
 800554a:	e00c      	b.n	8005566 <SGP_StartMeasurement+0x42>
  }
  else{
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800554c:	4b0d      	ldr	r3, [pc, #52]	@ (8005584 <SGP_StartMeasurement+0x60>)
 800554e:	2208      	movs	r2, #8
 8005550:	0019      	movs	r1, r3
 8005552:	2059      	movs	r0, #89	@ 0x59
 8005554:	f7ff ffae 	bl	80054b4 <WriteRegister>
    SGP_HeatUpTime = GetCurrentHalTicks() + SGP_SENSOR_HEATUP_TIME;
 8005558:	f001 f98a 	bl	8006870 <GetCurrentHalTicks>
 800555c:	0003      	movs	r3, r0
 800555e:	33aa      	adds	r3, #170	@ 0xaa
 8005560:	001a      	movs	r2, r3
 8005562:	4b09      	ldr	r3, [pc, #36]	@ (8005588 <SGP_StartMeasurement+0x64>)
 8005564:	601a      	str	r2, [r3, #0]
  }
  HeatUpIsDone = false;
 8005566:	4b09      	ldr	r3, [pc, #36]	@ (800558c <SGP_StartMeasurement+0x68>)
 8005568:	2200      	movs	r2, #0
 800556a:	701a      	strb	r2, [r3, #0]
  MeasurementIsReady = false;
 800556c:	4b08      	ldr	r3, [pc, #32]	@ (8005590 <SGP_StartMeasurement+0x6c>)
 800556e:	2200      	movs	r2, #0
 8005570:	701a      	strb	r2, [r3, #0]
}
 8005572:	46c0      	nop			@ (mov r8, r8)
 8005574:	46bd      	mov	sp, r7
 8005576:	bd80      	pop	{r7, pc}
 8005578:	20000d2c 	.word	0x20000d2c
 800557c:	2000001c 	.word	0x2000001c
 8005580:	20000030 	.word	0x20000030
 8005584:	20000014 	.word	0x20000014
 8005588:	20000028 	.word	0x20000028
 800558c:	20000c82 	.word	0x20000c82
 8005590:	20000c83 	.word	0x20000c83

08005594 <SGP_HeatedUp>:

static bool SGP_HeatedUp(void) { return TimestampIsReached(SGP_HeatUpTime); }
 8005594:	b580      	push	{r7, lr}
 8005596:	af00      	add	r7, sp, #0
 8005598:	4b04      	ldr	r3, [pc, #16]	@ (80055ac <SGP_HeatedUp+0x18>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	0018      	movs	r0, r3
 800559e:	f001 f885 	bl	80066ac <TimestampIsReached>
 80055a2:	0003      	movs	r3, r0
 80055a4:	0018      	movs	r0, r3
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bd80      	pop	{r7, pc}
 80055aa:	46c0      	nop			@ (mov r8, r8)
 80055ac:	20000028 	.word	0x20000028

080055b0 <SGP_MeasurementReady>:

static bool SGP_MeasurementReady(void) {
 80055b0:	b580      	push	{r7, lr}
 80055b2:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_IdleTime);
 80055b4:	4b04      	ldr	r3, [pc, #16]	@ (80055c8 <SGP_MeasurementReady+0x18>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	0018      	movs	r0, r3
 80055ba:	f001 f877 	bl	80066ac <TimestampIsReached>
 80055be:	0003      	movs	r3, r0
}
 80055c0:	0018      	movs	r0, r3
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd80      	pop	{r7, pc}
 80055c6:	46c0      	nop			@ (mov r8, r8)
 80055c8:	20000030 	.word	0x20000030

080055cc <SGP_MeasurementDone>:

static bool SGP_MeasurementDone(void) {
 80055cc:	b580      	push	{r7, lr}
 80055ce:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_MeasurementDutyCycle);
 80055d0:	4b04      	ldr	r3, [pc, #16]	@ (80055e4 <SGP_MeasurementDone+0x18>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	0018      	movs	r0, r3
 80055d6:	f001 f869 	bl	80066ac <TimestampIsReached>
 80055da:	0003      	movs	r3, r0
}
 80055dc:	0018      	movs	r0, r3
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}
 80055e2:	46c0      	nop			@ (mov r8, r8)
 80055e4:	2000002c 	.word	0x2000002c

080055e8 <SGP_TurnHeaterOff>:

void SGP_TurnHeaterOff(void) {
 80055e8:	b580      	push	{r7, lr}
 80055ea:	af00      	add	r7, sp, #0
  // This command could take from 0.1 to 1ms.
  WriteRegister(SGP_I2C_ADDRESS, TurnHeaterOffBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 80055ec:	4b04      	ldr	r3, [pc, #16]	@ (8005600 <SGP_TurnHeaterOff+0x18>)
 80055ee:	2202      	movs	r2, #2
 80055f0:	0019      	movs	r1, r3
 80055f2:	2059      	movs	r0, #89	@ 0x59
 80055f4:	f7ff ff5e 	bl	80054b4 <WriteRegister>
}
 80055f8:	46c0      	nop			@ (mov r8, r8)
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bd80      	pop	{r7, pc}
 80055fe:	46c0      	nop			@ (mov r8, r8)
 8005600:	2000000c 	.word	0x2000000c

08005604 <SGP_GetMeasurementValues>:

bool SGP_GetMeasurementValues(int32_t *vocIndex) {
 8005604:	b5b0      	push	{r4, r5, r7, lr}
 8005606:	b086      	sub	sp, #24
 8005608:	af02      	add	r7, sp, #8
 800560a:	6078      	str	r0, [r7, #4]
  if (SGP_HeatedUp() && !HeatUpIsDone && !SGP_MsgSent) {
 800560c:	f7ff ffc2 	bl	8005594 <SGP_HeatedUp>
 8005610:	1e03      	subs	r3, r0, #0
 8005612:	d038      	beq.n	8005686 <SGP_GetMeasurementValues+0x82>
 8005614:	4bdb      	ldr	r3, [pc, #876]	@ (8005984 <SGP_GetMeasurementValues+0x380>)
 8005616:	781b      	ldrb	r3, [r3, #0]
 8005618:	2201      	movs	r2, #1
 800561a:	4053      	eors	r3, r2
 800561c:	b2db      	uxtb	r3, r3
 800561e:	2b00      	cmp	r3, #0
 8005620:	d031      	beq.n	8005686 <SGP_GetMeasurementValues+0x82>
 8005622:	4bd9      	ldr	r3, [pc, #868]	@ (8005988 <SGP_GetMeasurementValues+0x384>)
 8005624:	781b      	ldrb	r3, [r3, #0]
 8005626:	2201      	movs	r2, #1
 8005628:	4053      	eors	r3, r2
 800562a:	b2db      	uxtb	r3, r3
 800562c:	2b00      	cmp	r3, #0
 800562e:	d02a      	beq.n	8005686 <SGP_GetMeasurementValues+0x82>
    Debug("SGP is heated up, starting the measurement.");
 8005630:	4ad6      	ldr	r2, [pc, #856]	@ (800598c <SGP_GetMeasurementValues+0x388>)
 8005632:	4bd7      	ldr	r3, [pc, #860]	@ (8005990 <SGP_GetMeasurementValues+0x38c>)
 8005634:	0019      	movs	r1, r3
 8005636:	2003      	movs	r0, #3
 8005638:	f001 f88e 	bl	8006758 <CreateLine>
    HeatUpIsDone = true;
 800563c:	4bd1      	ldr	r3, [pc, #836]	@ (8005984 <SGP_GetMeasurementValues+0x380>)
 800563e:	2201      	movs	r2, #1
 8005640:	701a      	strb	r2, [r3, #0]
    // SGP is heated up, we ignore the output and start another measurement.
    if(HT_MeasurementReceived){
 8005642:	4bd4      	ldr	r3, [pc, #848]	@ (8005994 <SGP_GetMeasurementValues+0x390>)
 8005644:	781b      	ldrb	r3, [r3, #0]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d00d      	beq.n	8005666 <SGP_GetMeasurementValues+0x62>
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800564a:	4bd3      	ldr	r3, [pc, #844]	@ (8005998 <SGP_GetMeasurementValues+0x394>)
 800564c:	2208      	movs	r2, #8
 800564e:	0019      	movs	r1, r3
 8005650:	2059      	movs	r0, #89	@ 0x59
 8005652:	f7ff ff2f 	bl	80054b4 <WriteRegister>
      SGP_IdleTime = GetCurrentHalTicks() + SGP_SENSOR_IDLE_TIME;
 8005656:	f001 f90b 	bl	8006870 <GetCurrentHalTicks>
 800565a:	0003      	movs	r3, r0
 800565c:	331e      	adds	r3, #30
 800565e:	001a      	movs	r2, r3
 8005660:	4bce      	ldr	r3, [pc, #824]	@ (800599c <SGP_GetMeasurementValues+0x398>)
 8005662:	601a      	str	r2, [r3, #0]
 8005664:	e00c      	b.n	8005680 <SGP_GetMeasurementValues+0x7c>
    }
    else{
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 8005666:	4bce      	ldr	r3, [pc, #824]	@ (80059a0 <SGP_GetMeasurementValues+0x39c>)
 8005668:	2208      	movs	r2, #8
 800566a:	0019      	movs	r1, r3
 800566c:	2059      	movs	r0, #89	@ 0x59
 800566e:	f7ff ff21 	bl	80054b4 <WriteRegister>
      SGP_IdleTime = GetCurrentHalTicks() + SGP_SENSOR_IDLE_TIME;
 8005672:	f001 f8fd 	bl	8006870 <GetCurrentHalTicks>
 8005676:	0003      	movs	r3, r0
 8005678:	331e      	adds	r3, #30
 800567a:	001a      	movs	r2, r3
 800567c:	4bc7      	ldr	r3, [pc, #796]	@ (800599c <SGP_GetMeasurementValues+0x398>)
 800567e:	601a      	str	r2, [r3, #0]
    }
    SGP_MsgSent = true;
 8005680:	4bc1      	ldr	r3, [pc, #772]	@ (8005988 <SGP_GetMeasurementValues+0x384>)
 8005682:	2201      	movs	r2, #1
 8005684:	701a      	strb	r2, [r3, #0]
  }
  if (HeatUpIsDone && SGP_MeasurementReady() && !MeasurementIsReady) {
 8005686:	4bbf      	ldr	r3, [pc, #764]	@ (8005984 <SGP_GetMeasurementValues+0x380>)
 8005688:	781b      	ldrb	r3, [r3, #0]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d100      	bne.n	8005690 <SGP_GetMeasurementValues+0x8c>
 800568e:	e1b5      	b.n	80059fc <SGP_GetMeasurementValues+0x3f8>
 8005690:	f7ff ff8e 	bl	80055b0 <SGP_MeasurementReady>
 8005694:	1e03      	subs	r3, r0, #0
 8005696:	d100      	bne.n	800569a <SGP_GetMeasurementValues+0x96>
 8005698:	e1b0      	b.n	80059fc <SGP_GetMeasurementValues+0x3f8>
 800569a:	4bc2      	ldr	r3, [pc, #776]	@ (80059a4 <SGP_GetMeasurementValues+0x3a0>)
 800569c:	781b      	ldrb	r3, [r3, #0]
 800569e:	2201      	movs	r2, #1
 80056a0:	4053      	eors	r3, r2
 80056a2:	b2db      	uxtb	r3, r3
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d100      	bne.n	80056aa <SGP_GetMeasurementValues+0xa6>
 80056a8:	e1a8      	b.n	80059fc <SGP_GetMeasurementValues+0x3f8>
    Debug("SGP_Measurement[%i] is ready, reading buffer.", SGP_AmountOfSamplesDone + 1);
 80056aa:	4bbf      	ldr	r3, [pc, #764]	@ (80059a8 <SGP_GetMeasurementValues+0x3a4>)
 80056ac:	781b      	ldrb	r3, [r3, #0]
 80056ae:	3301      	adds	r3, #1
 80056b0:	4abe      	ldr	r2, [pc, #760]	@ (80059ac <SGP_GetMeasurementValues+0x3a8>)
 80056b2:	49b7      	ldr	r1, [pc, #732]	@ (8005990 <SGP_GetMeasurementValues+0x38c>)
 80056b4:	2003      	movs	r0, #3
 80056b6:	f001 f84f 	bl	8006758 <CreateLine>
    MeasurementIsReady = true;
 80056ba:	4bba      	ldr	r3, [pc, #744]	@ (80059a4 <SGP_GetMeasurementValues+0x3a0>)
 80056bc:	2201      	movs	r2, #1
 80056be:	701a      	strb	r2, [r3, #0]
    // Measurement is ready to be read, also turning the heater off.
    ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH);
 80056c0:	4bbb      	ldr	r3, [pc, #748]	@ (80059b0 <SGP_GetMeasurementValues+0x3ac>)
 80056c2:	2203      	movs	r2, #3
 80056c4:	0019      	movs	r1, r3
 80056c6:	2059      	movs	r0, #89	@ 0x59
 80056c8:	f7ff fed6 	bl	8005478 <ReadRegister>
    if (!CheckCRC(SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH, SGP_MEASURE_BUFFER_RESPONSE_LENGTH)) {
 80056cc:	4bb8      	ldr	r3, [pc, #736]	@ (80059b0 <SGP_GetMeasurementValues+0x3ac>)
 80056ce:	2203      	movs	r2, #3
 80056d0:	2103      	movs	r1, #3
 80056d2:	0018      	movs	r0, r3
 80056d4:	f000 f9f8 	bl	8005ac8 <CheckCRC>
 80056d8:	0003      	movs	r3, r0
 80056da:	001a      	movs	r2, r3
 80056dc:	2301      	movs	r3, #1
 80056de:	4053      	eors	r3, r2
 80056e0:	b2db      	uxtb	r3, r3
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d02a      	beq.n	800573c <SGP_GetMeasurementValues+0x138>
      Error("SGP measurements CRC check failed.");
 80056e6:	4ab3      	ldr	r2, [pc, #716]	@ (80059b4 <SGP_GetMeasurementValues+0x3b0>)
 80056e8:	4bb3      	ldr	r3, [pc, #716]	@ (80059b8 <SGP_GetMeasurementValues+0x3b4>)
 80056ea:	0019      	movs	r1, r3
 80056ec:	2001      	movs	r0, #1
 80056ee:	f001 f833 	bl	8006758 <CreateLine>
      Info("SGP_Measure buffer structure:");
 80056f2:	4ab2      	ldr	r2, [pc, #712]	@ (80059bc <SGP_GetMeasurementValues+0x3b8>)
 80056f4:	4bb2      	ldr	r3, [pc, #712]	@ (80059c0 <SGP_GetMeasurementValues+0x3bc>)
 80056f6:	0019      	movs	r1, r3
 80056f8:	2002      	movs	r0, #2
 80056fa:	f001 f82d 	bl	8006758 <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 80056fe:	230f      	movs	r3, #15
 8005700:	18fb      	adds	r3, r7, r3
 8005702:	2200      	movs	r2, #0
 8005704:	701a      	strb	r2, [r3, #0]
 8005706:	e012      	b.n	800572e <SGP_GetMeasurementValues+0x12a>
        Debug("SGP_Measurement buffer[%d]: %d", i, SGP_ReadBuffer[i]);
 8005708:	240f      	movs	r4, #15
 800570a:	193b      	adds	r3, r7, r4
 800570c:	7818      	ldrb	r0, [r3, #0]
 800570e:	193b      	adds	r3, r7, r4
 8005710:	781b      	ldrb	r3, [r3, #0]
 8005712:	4aa7      	ldr	r2, [pc, #668]	@ (80059b0 <SGP_GetMeasurementValues+0x3ac>)
 8005714:	5cd3      	ldrb	r3, [r2, r3]
 8005716:	4aab      	ldr	r2, [pc, #684]	@ (80059c4 <SGP_GetMeasurementValues+0x3c0>)
 8005718:	499d      	ldr	r1, [pc, #628]	@ (8005990 <SGP_GetMeasurementValues+0x38c>)
 800571a:	9300      	str	r3, [sp, #0]
 800571c:	0003      	movs	r3, r0
 800571e:	2003      	movs	r0, #3
 8005720:	f001 f81a 	bl	8006758 <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 8005724:	193b      	adds	r3, r7, r4
 8005726:	781a      	ldrb	r2, [r3, #0]
 8005728:	193b      	adds	r3, r7, r4
 800572a:	3201      	adds	r2, #1
 800572c:	701a      	strb	r2, [r3, #0]
 800572e:	230f      	movs	r3, #15
 8005730:	18fb      	adds	r3, r7, r3
 8005732:	781b      	ldrb	r3, [r3, #0]
 8005734:	2b02      	cmp	r3, #2
 8005736:	d9e7      	bls.n	8005708 <SGP_GetMeasurementValues+0x104>
      }
      return false;
 8005738:	2300      	movs	r3, #0
 800573a:	e177      	b.n	8005a2c <SGP_GetMeasurementValues+0x428>
    }
    SGP_MeasurementDutyCycle = GetCurrentHalTicks() + SGP_SENSOR_DUTYCYCLE;
 800573c:	f001 f898 	bl	8006870 <GetCurrentHalTicks>
 8005740:	0003      	movs	r3, r0
 8005742:	22fa      	movs	r2, #250	@ 0xfa
 8005744:	0092      	lsls	r2, r2, #2
 8005746:	189a      	adds	r2, r3, r2
 8005748:	4b9f      	ldr	r3, [pc, #636]	@ (80059c8 <SGP_GetMeasurementValues+0x3c4>)
 800574a:	601a      	str	r2, [r3, #0]
    SGP_TurnHeaterOff();
 800574c:	f7ff ff4c 	bl	80055e8 <SGP_TurnHeaterOff>
    SGP_AmountOfSamplesDone += 1;
 8005750:	4b95      	ldr	r3, [pc, #596]	@ (80059a8 <SGP_GetMeasurementValues+0x3a4>)
 8005752:	781b      	ldrb	r3, [r3, #0]
 8005754:	3301      	adds	r3, #1
 8005756:	b2da      	uxtb	r2, r3
 8005758:	4b93      	ldr	r3, [pc, #588]	@ (80059a8 <SGP_GetMeasurementValues+0x3a4>)
 800575a:	701a      	strb	r2, [r3, #0]
    if (SGP_AmountOfSamplesDone >= SGP_TotalSamples) {
 800575c:	4b92      	ldr	r3, [pc, #584]	@ (80059a8 <SGP_GetMeasurementValues+0x3a4>)
 800575e:	781a      	ldrb	r2, [r3, #0]
 8005760:	4b9a      	ldr	r3, [pc, #616]	@ (80059cc <SGP_GetMeasurementValues+0x3c8>)
 8005762:	781b      	ldrb	r3, [r3, #0]
 8005764:	429a      	cmp	r2, r3
 8005766:	d200      	bcs.n	800576a <SGP_GetMeasurementValues+0x166>
 8005768:	e148      	b.n	80059fc <SGP_GetMeasurementValues+0x3f8>
      uint16_t rawSignal = ((SGP_ReadBuffer[1] << 8) | (SGP_ReadBuffer[0]));
 800576a:	4b91      	ldr	r3, [pc, #580]	@ (80059b0 <SGP_GetMeasurementValues+0x3ac>)
 800576c:	785b      	ldrb	r3, [r3, #1]
 800576e:	021b      	lsls	r3, r3, #8
 8005770:	b21a      	sxth	r2, r3
 8005772:	4b8f      	ldr	r3, [pc, #572]	@ (80059b0 <SGP_GetMeasurementValues+0x3ac>)
 8005774:	781b      	ldrb	r3, [r3, #0]
 8005776:	b21b      	sxth	r3, r3
 8005778:	4313      	orrs	r3, r2
 800577a:	b21a      	sxth	r2, r3
 800577c:	240c      	movs	r4, #12
 800577e:	193b      	adds	r3, r7, r4
 8005780:	801a      	strh	r2, [r3, #0]
      Debug("rawSignal value: %d", rawSignal);
 8005782:	193b      	adds	r3, r7, r4
 8005784:	881b      	ldrh	r3, [r3, #0]
 8005786:	4a92      	ldr	r2, [pc, #584]	@ (80059d0 <SGP_GetMeasurementValues+0x3cc>)
 8005788:	4981      	ldr	r1, [pc, #516]	@ (8005990 <SGP_GetMeasurementValues+0x38c>)
 800578a:	2003      	movs	r0, #3
 800578c:	f000 ffe4 	bl	8006758 <CreateLine>
      int32_t tempVocIndex = 0;
 8005790:	2300      	movs	r3, #0
 8005792:	60bb      	str	r3, [r7, #8]
      GasIndexAlgorithm_process(&params, rawSignal, &tempVocIndex);
 8005794:	193b      	adds	r3, r7, r4
 8005796:	8819      	ldrh	r1, [r3, #0]
 8005798:	2308      	movs	r3, #8
 800579a:	18fa      	adds	r2, r7, r3
 800579c:	4b8d      	ldr	r3, [pc, #564]	@ (80059d4 <SGP_GetMeasurementValues+0x3d0>)
 800579e:	0018      	movs	r0, r3
 80057a0:	f7ff f848 	bl	8004834 <GasIndexAlgorithm_process>
      Debug("vocIndex value: %d", tempVocIndex);
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	4a8c      	ldr	r2, [pc, #560]	@ (80059d8 <SGP_GetMeasurementValues+0x3d4>)
 80057a8:	4979      	ldr	r1, [pc, #484]	@ (8005990 <SGP_GetMeasurementValues+0x38c>)
 80057aa:	2003      	movs	r0, #3
 80057ac:	f000 ffd4 	bl	8006758 <CreateLine>
//      *vocIndex = 1337;
      *vocIndex = tempVocIndex;
 80057b0:	68ba      	ldr	r2, [r7, #8]
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	601a      	str	r2, [r3, #0]
      if(*vocIndex > 0){
        // TODO add status LED logic.
//        HAL_GPIO_TogglePin(STATUS2_LED_GPIO_Port, STATUS2_LED_Pin);
      }
      if(*vocIndex > 0 && *vocIndex <= 100){
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	dd60      	ble.n	8005880 <SGP_GetMeasurementValues+0x27c>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	2b64      	cmp	r3, #100	@ 0x64
 80057c4:	dc5c      	bgt.n	8005880 <SGP_GetMeasurementValues+0x27c>
      Green = (1.0-(*vocIndex/100.0))*TimeValue;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	0018      	movs	r0, r3
 80057cc:	f7fd fd76 	bl	80032bc <__aeabi_i2d>
 80057d0:	2200      	movs	r2, #0
 80057d2:	4b82      	ldr	r3, [pc, #520]	@ (80059dc <SGP_GetMeasurementValues+0x3d8>)
 80057d4:	f7fc fa6c 	bl	8001cb0 <__aeabi_ddiv>
 80057d8:	0002      	movs	r2, r0
 80057da:	000b      	movs	r3, r1
 80057dc:	2000      	movs	r0, #0
 80057de:	4980      	ldr	r1, [pc, #512]	@ (80059e0 <SGP_GetMeasurementValues+0x3dc>)
 80057e0:	f7fd f972 	bl	8002ac8 <__aeabi_dsub>
 80057e4:	0002      	movs	r2, r0
 80057e6:	000b      	movs	r3, r1
 80057e8:	0014      	movs	r4, r2
 80057ea:	001d      	movs	r5, r3
 80057ec:	4b7d      	ldr	r3, [pc, #500]	@ (80059e4 <SGP_GetMeasurementValues+0x3e0>)
 80057ee:	881b      	ldrh	r3, [r3, #0]
 80057f0:	0018      	movs	r0, r3
 80057f2:	f7fd fd63 	bl	80032bc <__aeabi_i2d>
 80057f6:	0002      	movs	r2, r0
 80057f8:	000b      	movs	r3, r1
 80057fa:	0020      	movs	r0, r4
 80057fc:	0029      	movs	r1, r5
 80057fe:	f7fc fe9b 	bl	8002538 <__aeabi_dmul>
 8005802:	0002      	movs	r2, r0
 8005804:	000b      	movs	r3, r1
 8005806:	0010      	movs	r0, r2
 8005808:	0019      	movs	r1, r3
 800580a:	f7fa feed 	bl	80005e8 <__aeabi_d2uiz>
 800580e:	0003      	movs	r3, r0
 8005810:	b29a      	uxth	r2, r3
 8005812:	4b75      	ldr	r3, [pc, #468]	@ (80059e8 <SGP_GetMeasurementValues+0x3e4>)
 8005814:	801a      	strh	r2, [r3, #0]
      Blue = (*vocIndex/100.0)*TimeValue;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	0018      	movs	r0, r3
 800581c:	f7fd fd4e 	bl	80032bc <__aeabi_i2d>
 8005820:	2200      	movs	r2, #0
 8005822:	4b6e      	ldr	r3, [pc, #440]	@ (80059dc <SGP_GetMeasurementValues+0x3d8>)
 8005824:	f7fc fa44 	bl	8001cb0 <__aeabi_ddiv>
 8005828:	0002      	movs	r2, r0
 800582a:	000b      	movs	r3, r1
 800582c:	0014      	movs	r4, r2
 800582e:	001d      	movs	r5, r3
 8005830:	4b6c      	ldr	r3, [pc, #432]	@ (80059e4 <SGP_GetMeasurementValues+0x3e0>)
 8005832:	881b      	ldrh	r3, [r3, #0]
 8005834:	0018      	movs	r0, r3
 8005836:	f7fd fd41 	bl	80032bc <__aeabi_i2d>
 800583a:	0002      	movs	r2, r0
 800583c:	000b      	movs	r3, r1
 800583e:	0020      	movs	r0, r4
 8005840:	0029      	movs	r1, r5
 8005842:	f7fc fe79 	bl	8002538 <__aeabi_dmul>
 8005846:	0002      	movs	r2, r0
 8005848:	000b      	movs	r3, r1
 800584a:	0010      	movs	r0, r2
 800584c:	0019      	movs	r1, r3
 800584e:	f7fa fecb 	bl	80005e8 <__aeabi_d2uiz>
 8005852:	0003      	movs	r3, r0
 8005854:	b29a      	uxth	r2, r3
 8005856:	4b65      	ldr	r3, [pc, #404]	@ (80059ec <SGP_GetMeasurementValues+0x3e8>)
 8005858:	801a      	strh	r2, [r3, #0]
      Red = TimeValue;
 800585a:	4b62      	ldr	r3, [pc, #392]	@ (80059e4 <SGP_GetMeasurementValues+0x3e0>)
 800585c:	881a      	ldrh	r2, [r3, #0]
 800585e:	4b64      	ldr	r3, [pc, #400]	@ (80059f0 <SGP_GetMeasurementValues+0x3ec>)
 8005860:	801a      	strh	r2, [r3, #0]
      TIM2->CCR1 = Red;
 8005862:	4b63      	ldr	r3, [pc, #396]	@ (80059f0 <SGP_GetMeasurementValues+0x3ec>)
 8005864:	881a      	ldrh	r2, [r3, #0]
 8005866:	2380      	movs	r3, #128	@ 0x80
 8005868:	05db      	lsls	r3, r3, #23
 800586a:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM2->CCR3 = Green;
 800586c:	4b5e      	ldr	r3, [pc, #376]	@ (80059e8 <SGP_GetMeasurementValues+0x3e4>)
 800586e:	881a      	ldrh	r2, [r3, #0]
 8005870:	2380      	movs	r3, #128	@ 0x80
 8005872:	05db      	lsls	r3, r3, #23
 8005874:	63da      	str	r2, [r3, #60]	@ 0x3c
      TIM2->CCR4 = Blue;
 8005876:	4b5d      	ldr	r3, [pc, #372]	@ (80059ec <SGP_GetMeasurementValues+0x3e8>)
 8005878:	881a      	ldrh	r2, [r3, #0]
 800587a:	2380      	movs	r3, #128	@ 0x80
 800587c:	05db      	lsls	r3, r3, #23
 800587e:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      if(*vocIndex > 100){
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	2b64      	cmp	r3, #100	@ 0x64
 8005886:	dd6c      	ble.n	8005962 <SGP_GetMeasurementValues+0x35e>
        Green = (((*vocIndex-100.0)/400.0))*TimeValue;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	0018      	movs	r0, r3
 800588e:	f7fd fd15 	bl	80032bc <__aeabi_i2d>
 8005892:	2200      	movs	r2, #0
 8005894:	4b51      	ldr	r3, [pc, #324]	@ (80059dc <SGP_GetMeasurementValues+0x3d8>)
 8005896:	f7fd f917 	bl	8002ac8 <__aeabi_dsub>
 800589a:	0002      	movs	r2, r0
 800589c:	000b      	movs	r3, r1
 800589e:	0010      	movs	r0, r2
 80058a0:	0019      	movs	r1, r3
 80058a2:	2200      	movs	r2, #0
 80058a4:	4b53      	ldr	r3, [pc, #332]	@ (80059f4 <SGP_GetMeasurementValues+0x3f0>)
 80058a6:	f7fc fa03 	bl	8001cb0 <__aeabi_ddiv>
 80058aa:	0002      	movs	r2, r0
 80058ac:	000b      	movs	r3, r1
 80058ae:	0014      	movs	r4, r2
 80058b0:	001d      	movs	r5, r3
 80058b2:	4b4c      	ldr	r3, [pc, #304]	@ (80059e4 <SGP_GetMeasurementValues+0x3e0>)
 80058b4:	881b      	ldrh	r3, [r3, #0]
 80058b6:	0018      	movs	r0, r3
 80058b8:	f7fd fd00 	bl	80032bc <__aeabi_i2d>
 80058bc:	0002      	movs	r2, r0
 80058be:	000b      	movs	r3, r1
 80058c0:	0020      	movs	r0, r4
 80058c2:	0029      	movs	r1, r5
 80058c4:	f7fc fe38 	bl	8002538 <__aeabi_dmul>
 80058c8:	0002      	movs	r2, r0
 80058ca:	000b      	movs	r3, r1
 80058cc:	0010      	movs	r0, r2
 80058ce:	0019      	movs	r1, r3
 80058d0:	f7fa fe8a 	bl	80005e8 <__aeabi_d2uiz>
 80058d4:	0003      	movs	r3, r0
 80058d6:	b29a      	uxth	r2, r3
 80058d8:	4b43      	ldr	r3, [pc, #268]	@ (80059e8 <SGP_GetMeasurementValues+0x3e4>)
 80058da:	801a      	strh	r2, [r3, #0]
        Red = (1.0-((*vocIndex-100.0)/400.0))*TimeValue;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	0018      	movs	r0, r3
 80058e2:	f7fd fceb 	bl	80032bc <__aeabi_i2d>
 80058e6:	2200      	movs	r2, #0
 80058e8:	4b3c      	ldr	r3, [pc, #240]	@ (80059dc <SGP_GetMeasurementValues+0x3d8>)
 80058ea:	f7fd f8ed 	bl	8002ac8 <__aeabi_dsub>
 80058ee:	0002      	movs	r2, r0
 80058f0:	000b      	movs	r3, r1
 80058f2:	0010      	movs	r0, r2
 80058f4:	0019      	movs	r1, r3
 80058f6:	2200      	movs	r2, #0
 80058f8:	4b3e      	ldr	r3, [pc, #248]	@ (80059f4 <SGP_GetMeasurementValues+0x3f0>)
 80058fa:	f7fc f9d9 	bl	8001cb0 <__aeabi_ddiv>
 80058fe:	0002      	movs	r2, r0
 8005900:	000b      	movs	r3, r1
 8005902:	2000      	movs	r0, #0
 8005904:	4936      	ldr	r1, [pc, #216]	@ (80059e0 <SGP_GetMeasurementValues+0x3dc>)
 8005906:	f7fd f8df 	bl	8002ac8 <__aeabi_dsub>
 800590a:	0002      	movs	r2, r0
 800590c:	000b      	movs	r3, r1
 800590e:	0014      	movs	r4, r2
 8005910:	001d      	movs	r5, r3
 8005912:	4b34      	ldr	r3, [pc, #208]	@ (80059e4 <SGP_GetMeasurementValues+0x3e0>)
 8005914:	881b      	ldrh	r3, [r3, #0]
 8005916:	0018      	movs	r0, r3
 8005918:	f7fd fcd0 	bl	80032bc <__aeabi_i2d>
 800591c:	0002      	movs	r2, r0
 800591e:	000b      	movs	r3, r1
 8005920:	0020      	movs	r0, r4
 8005922:	0029      	movs	r1, r5
 8005924:	f7fc fe08 	bl	8002538 <__aeabi_dmul>
 8005928:	0002      	movs	r2, r0
 800592a:	000b      	movs	r3, r1
 800592c:	0010      	movs	r0, r2
 800592e:	0019      	movs	r1, r3
 8005930:	f7fa fe5a 	bl	80005e8 <__aeabi_d2uiz>
 8005934:	0003      	movs	r3, r0
 8005936:	b29a      	uxth	r2, r3
 8005938:	4b2d      	ldr	r3, [pc, #180]	@ (80059f0 <SGP_GetMeasurementValues+0x3ec>)
 800593a:	801a      	strh	r2, [r3, #0]
        Blue = TimeValue;
 800593c:	4b29      	ldr	r3, [pc, #164]	@ (80059e4 <SGP_GetMeasurementValues+0x3e0>)
 800593e:	881a      	ldrh	r2, [r3, #0]
 8005940:	4b2a      	ldr	r3, [pc, #168]	@ (80059ec <SGP_GetMeasurementValues+0x3e8>)
 8005942:	801a      	strh	r2, [r3, #0]
        TIM2->CCR1 = Red;
 8005944:	4b2a      	ldr	r3, [pc, #168]	@ (80059f0 <SGP_GetMeasurementValues+0x3ec>)
 8005946:	881a      	ldrh	r2, [r3, #0]
 8005948:	2380      	movs	r3, #128	@ 0x80
 800594a:	05db      	lsls	r3, r3, #23
 800594c:	635a      	str	r2, [r3, #52]	@ 0x34
        TIM2->CCR3 = Green;
 800594e:	4b26      	ldr	r3, [pc, #152]	@ (80059e8 <SGP_GetMeasurementValues+0x3e4>)
 8005950:	881a      	ldrh	r2, [r3, #0]
 8005952:	2380      	movs	r3, #128	@ 0x80
 8005954:	05db      	lsls	r3, r3, #23
 8005956:	63da      	str	r2, [r3, #60]	@ 0x3c
        TIM2->CCR4 = Blue;
 8005958:	4b24      	ldr	r3, [pc, #144]	@ (80059ec <SGP_GetMeasurementValues+0x3e8>)
 800595a:	881a      	ldrh	r2, [r3, #0]
 800595c:	2380      	movs	r3, #128	@ 0x80
 800595e:	05db      	lsls	r3, r3, #23
 8005960:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      SGP_AmountOfSamplesDone = 0;
 8005962:	4b11      	ldr	r3, [pc, #68]	@ (80059a8 <SGP_GetMeasurementValues+0x3a4>)
 8005964:	2200      	movs	r2, #0
 8005966:	701a      	strb	r2, [r3, #0]
      Debug("SGP_Measurement completely done.");
 8005968:	4a23      	ldr	r2, [pc, #140]	@ (80059f8 <SGP_GetMeasurementValues+0x3f4>)
 800596a:	4b09      	ldr	r3, [pc, #36]	@ (8005990 <SGP_GetMeasurementValues+0x38c>)
 800596c:	0019      	movs	r1, r3
 800596e:	2003      	movs	r0, #3
 8005970:	f000 fef2 	bl	8006758 <CreateLine>
      HT_MeasurementReceived = false;
 8005974:	4b07      	ldr	r3, [pc, #28]	@ (8005994 <SGP_GetMeasurementValues+0x390>)
 8005976:	2200      	movs	r2, #0
 8005978:	701a      	strb	r2, [r3, #0]
      SGP_MsgSent = false;
 800597a:	4b03      	ldr	r3, [pc, #12]	@ (8005988 <SGP_GetMeasurementValues+0x384>)
 800597c:	2200      	movs	r2, #0
 800597e:	701a      	strb	r2, [r3, #0]
>>>>>>> main
//      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
//        Debug("SGP_Measurement buffer[%d]: %d", i, SGP_ReadBuffer[i]);
//      }
      return true;
<<<<<<< HEAD
 800570a:	2301      	movs	r3, #1
 800570c:	e014      	b.n	8005738 <SGP_GetMeasurementValues+0x1b8>
    }
  }
  if (SGP_MeasurementDone() && HeatUpIsDone && MeasurementIsReady) {
 800570e:	f7ff ff1b 	bl	8005548 <SGP_MeasurementDone>
 8005712:	1e03      	subs	r3, r0, #0
 8005714:	d00f      	beq.n	8005736 <SGP_GetMeasurementValues+0x1b6>
 8005716:	4b0a      	ldr	r3, [pc, #40]	@ (8005740 <SGP_GetMeasurementValues+0x1c0>)
 8005718:	781b      	ldrb	r3, [r3, #0]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d00b      	beq.n	8005736 <SGP_GetMeasurementValues+0x1b6>
 800571e:	4b0d      	ldr	r3, [pc, #52]	@ (8005754 <SGP_GetMeasurementValues+0x1d4>)
 8005720:	781b      	ldrb	r3, [r3, #0]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d007      	beq.n	8005736 <SGP_GetMeasurementValues+0x1b6>
    // Starting next measurement
    Debug("Starting next SGP_measurement.");
 8005726:	4a1a      	ldr	r2, [pc, #104]	@ (8005790 <SGP_GetMeasurementValues+0x210>)
 8005728:	4b07      	ldr	r3, [pc, #28]	@ (8005748 <SGP_GetMeasurementValues+0x1c8>)
 800572a:	0019      	movs	r1, r3
 800572c:	2003      	movs	r0, #3
 800572e:	f000 fe8b 	bl	8006448 <CreateLine>
    SGP_StartMeasurement();
 8005732:	f7ff fecd 	bl	80054d0 <SGP_StartMeasurement>
  }
  return false;
 8005736:	2300      	movs	r3, #0
}
 8005738:	0018      	movs	r0, r3
 800573a:	46bd      	mov	sp, r7
 800573c:	b005      	add	sp, #20
 800573e:	bd90      	pop	{r4, r7, pc}
 8005740:	20000876 	.word	0x20000876
 8005744:	080100d4 	.word	0x080100d4
 8005748:	08010100 	.word	0x08010100
 800574c:	20000014 	.word	0x20000014
 8005750:	20000028 	.word	0x20000028
 8005754:	20000877 	.word	0x20000877
 8005758:	20000875 	.word	0x20000875
 800575c:	08010104 	.word	0x08010104
 8005760:	2000086c 	.word	0x2000086c
 8005764:	08010134 	.word	0x08010134
 8005768:	08010158 	.word	0x08010158
 800576c:	0801015c 	.word	0x0801015c
 8005770:	0801017c 	.word	0x0801017c
 8005774:	08010180 	.word	0x08010180
 8005778:	20000024 	.word	0x20000024
 800577c:	2000001c 	.word	0x2000001c
 8005780:	080101a0 	.word	0x080101a0
 8005784:	20000878 	.word	0x20000878
 8005788:	080101b4 	.word	0x080101b4
 800578c:	080101c8 	.word	0x080101c8
 8005790:	080101ec 	.word	0x080101ec

08005794 <SGP_DeviceConnected>:

bool SGP_DeviceConnected(void) {
 8005794:	b580      	push	{r7, lr}
 8005796:	b084      	sub	sp, #16
 8005798:	af02      	add	r7, sp, #8
  WriteRegister(SGP_I2C_ADDRESS, GetSerialNumberBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 800579a:	4b1a      	ldr	r3, [pc, #104]	@ (8005804 <SGP_DeviceConnected+0x70>)
 800579c:	2202      	movs	r2, #2
 800579e:	0019      	movs	r1, r3
 80057a0:	2059      	movs	r0, #89	@ 0x59
 80057a2:	f7ff fe5d 	bl	8005460 <WriteRegister>
  HAL_Delay(1); // 1ms delay for the sensor to respond (according to datasheet)
 80057a6:	2001      	movs	r0, #1
 80057a8:	f001 fa76 	bl	8006c98 <HAL_Delay>
  ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH);
 80057ac:	4b16      	ldr	r3, [pc, #88]	@ (8005808 <SGP_DeviceConnected+0x74>)
 80057ae:	2209      	movs	r2, #9
 80057b0:	0019      	movs	r1, r3
 80057b2:	2059      	movs	r0, #89	@ 0x59
 80057b4:	f7ff fe36 	bl	8005424 <ReadRegister>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 80057b8:	1dfb      	adds	r3, r7, #7
 80057ba:	2200      	movs	r2, #0
 80057bc:	701a      	strb	r2, [r3, #0]
 80057be:	e011      	b.n	80057e4 <SGP_DeviceConnected+0x50>
    Info("SGP_Device serial ID[%d]: 0x%X", i, SGP_ReadBuffer[i]);
 80057c0:	1dfb      	adds	r3, r7, #7
 80057c2:	7818      	ldrb	r0, [r3, #0]
 80057c4:	1dfb      	adds	r3, r7, #7
 80057c6:	781b      	ldrb	r3, [r3, #0]
 80057c8:	4a0f      	ldr	r2, [pc, #60]	@ (8005808 <SGP_DeviceConnected+0x74>)
 80057ca:	5cd3      	ldrb	r3, [r2, r3]
 80057cc:	4a0f      	ldr	r2, [pc, #60]	@ (800580c <SGP_DeviceConnected+0x78>)
 80057ce:	4910      	ldr	r1, [pc, #64]	@ (8005810 <SGP_DeviceConnected+0x7c>)
 80057d0:	9300      	str	r3, [sp, #0]
 80057d2:	0003      	movs	r3, r0
 80057d4:	2002      	movs	r0, #2
 80057d6:	f000 fe37 	bl	8006448 <CreateLine>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 80057da:	1dfb      	adds	r3, r7, #7
 80057dc:	781a      	ldrb	r2, [r3, #0]
 80057de:	1dfb      	adds	r3, r7, #7
 80057e0:	3201      	adds	r2, #1
 80057e2:	701a      	strb	r2, [r3, #0]
 80057e4:	1dfb      	adds	r3, r7, #7
 80057e6:	781b      	ldrb	r3, [r3, #0]
 80057e8:	2b08      	cmp	r3, #8
 80057ea:	d9e9      	bls.n	80057c0 <SGP_DeviceConnected+0x2c>
  }
  return CheckCRC(SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH, SGP_SERIAL_NUMBER_SEGMENT_SIZE);
 80057ec:	4b06      	ldr	r3, [pc, #24]	@ (8005808 <SGP_DeviceConnected+0x74>)
 80057ee:	2203      	movs	r2, #3
 80057f0:	2109      	movs	r1, #9
 80057f2:	0018      	movs	r0, r3
 80057f4:	f000 f80e 	bl	8005814 <CheckCRC>
 80057f8:	0003      	movs	r3, r0
}
 80057fa:	0018      	movs	r0, r3
 80057fc:	46bd      	mov	sp, r7
 80057fe:	b002      	add	sp, #8
 8005800:	bd80      	pop	{r7, pc}
 8005802:	46c0      	nop			@ (mov r8, r8)
 8005804:	20000010 	.word	0x20000010
 8005808:	2000086c 	.word	0x2000086c
 800580c:	0801020c 	.word	0x0801020c
 8005810:	0801017c 	.word	0x0801017c

08005814 <CheckCRC>:

static bool CheckCRC(uint8_t *data, uint8_t dataLength, uint8_t segmentSize) {
 8005814:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005816:	b08f      	sub	sp, #60	@ 0x3c
 8005818:	af00      	add	r7, sp, #0
 800581a:	6278      	str	r0, [r7, #36]	@ 0x24
 800581c:	0008      	movs	r0, r1
 800581e:	0011      	movs	r1, r2
 8005820:	2323      	movs	r3, #35	@ 0x23
 8005822:	18fb      	adds	r3, r7, r3
 8005824:	1c02      	adds	r2, r0, #0
 8005826:	701a      	strb	r2, [r3, #0]
 8005828:	2322      	movs	r3, #34	@ 0x22
 800582a:	18fb      	adds	r3, r7, r3
 800582c:	1c0a      	adds	r2, r1, #0
 800582e:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 8005830:	2317      	movs	r3, #23
 8005832:	2220      	movs	r2, #32
 8005834:	189b      	adds	r3, r3, r2
 8005836:	19db      	adds	r3, r3, r7
 8005838:	2200      	movs	r2, #0
 800583a:	701a      	strb	r2, [r3, #0]
 800583c:	e09f      	b.n	800597e <CheckCRC+0x16a>
 800583e:	466b      	mov	r3, sp
 8005840:	001e      	movs	r6, r3
    uint8_t crcData[segmentSize];
 8005842:	2322      	movs	r3, #34	@ 0x22
 8005844:	18fb      	adds	r3, r7, r3
 8005846:	781b      	ldrb	r3, [r3, #0]
 8005848:	001a      	movs	r2, r3
 800584a:	3a01      	subs	r2, #1
 800584c:	633a      	str	r2, [r7, #48]	@ 0x30
 800584e:	60bb      	str	r3, [r7, #8]
 8005850:	2200      	movs	r2, #0
 8005852:	60fa      	str	r2, [r7, #12]
 8005854:	68b8      	ldr	r0, [r7, #8]
 8005856:	68f9      	ldr	r1, [r7, #12]
 8005858:	0002      	movs	r2, r0
 800585a:	0f52      	lsrs	r2, r2, #29
 800585c:	000c      	movs	r4, r1
 800585e:	00e4      	lsls	r4, r4, #3
 8005860:	61fc      	str	r4, [r7, #28]
 8005862:	69fc      	ldr	r4, [r7, #28]
 8005864:	4314      	orrs	r4, r2
 8005866:	61fc      	str	r4, [r7, #28]
 8005868:	0002      	movs	r2, r0
 800586a:	00d2      	lsls	r2, r2, #3
 800586c:	61ba      	str	r2, [r7, #24]
 800586e:	603b      	str	r3, [r7, #0]
 8005870:	2200      	movs	r2, #0
 8005872:	607a      	str	r2, [r7, #4]
 8005874:	6838      	ldr	r0, [r7, #0]
 8005876:	6879      	ldr	r1, [r7, #4]
 8005878:	0002      	movs	r2, r0
 800587a:	0f52      	lsrs	r2, r2, #29
 800587c:	000c      	movs	r4, r1
 800587e:	00e4      	lsls	r4, r4, #3
 8005880:	617c      	str	r4, [r7, #20]
 8005882:	697c      	ldr	r4, [r7, #20]
 8005884:	4314      	orrs	r4, r2
 8005886:	617c      	str	r4, [r7, #20]
 8005888:	0002      	movs	r2, r0
 800588a:	00d2      	lsls	r2, r2, #3
 800588c:	613a      	str	r2, [r7, #16]
 800588e:	3307      	adds	r3, #7
 8005890:	08db      	lsrs	r3, r3, #3
 8005892:	00db      	lsls	r3, r3, #3
 8005894:	466a      	mov	r2, sp
 8005896:	1ad3      	subs	r3, r2, r3
 8005898:	469d      	mov	sp, r3
 800589a:	466b      	mov	r3, sp
 800589c:	3300      	adds	r3, #0
 800589e:	62fb      	str	r3, [r7, #44]	@ 0x2c

    for (uint8_t j = 0; j < segmentSize; j++) {
 80058a0:	2316      	movs	r3, #22
 80058a2:	2220      	movs	r2, #32
 80058a4:	189b      	adds	r3, r3, r2
 80058a6:	19db      	adds	r3, r3, r7
 80058a8:	2200      	movs	r2, #0
 80058aa:	701a      	strb	r2, [r3, #0]
 80058ac:	e01e      	b.n	80058ec <CheckCRC+0xd8>
      crcData[j] = data[i + j];
 80058ae:	2317      	movs	r3, #23
 80058b0:	2220      	movs	r2, #32
 80058b2:	189b      	adds	r3, r3, r2
 80058b4:	19db      	adds	r3, r3, r7
 80058b6:	781a      	ldrb	r2, [r3, #0]
 80058b8:	2116      	movs	r1, #22
 80058ba:	2320      	movs	r3, #32
 80058bc:	18cb      	adds	r3, r1, r3
 80058be:	19db      	adds	r3, r3, r7
 80058c0:	781b      	ldrb	r3, [r3, #0]
 80058c2:	18d3      	adds	r3, r2, r3
 80058c4:	001a      	movs	r2, r3
 80058c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058c8:	189a      	adds	r2, r3, r2
 80058ca:	0008      	movs	r0, r1
 80058cc:	2320      	movs	r3, #32
 80058ce:	18cb      	adds	r3, r1, r3
 80058d0:	19db      	adds	r3, r3, r7
 80058d2:	781b      	ldrb	r3, [r3, #0]
 80058d4:	7811      	ldrb	r1, [r2, #0]
 80058d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80058d8:	54d1      	strb	r1, [r2, r3]
    for (uint8_t j = 0; j < segmentSize; j++) {
 80058da:	2320      	movs	r3, #32
 80058dc:	18c3      	adds	r3, r0, r3
 80058de:	19db      	adds	r3, r3, r7
 80058e0:	781a      	ldrb	r2, [r3, #0]
 80058e2:	2320      	movs	r3, #32
 80058e4:	18c3      	adds	r3, r0, r3
 80058e6:	19db      	adds	r3, r3, r7
 80058e8:	3201      	adds	r2, #1
 80058ea:	701a      	strb	r2, [r3, #0]
 80058ec:	2316      	movs	r3, #22
 80058ee:	2220      	movs	r2, #32
 80058f0:	189b      	adds	r3, r3, r2
 80058f2:	19da      	adds	r2, r3, r7
 80058f4:	2322      	movs	r3, #34	@ 0x22
 80058f6:	18fb      	adds	r3, r7, r3
 80058f8:	7812      	ldrb	r2, [r2, #0]
 80058fa:	781b      	ldrb	r3, [r3, #0]
 80058fc:	429a      	cmp	r2, r3
 80058fe:	d3d6      	bcc.n	80058ae <CheckCRC+0x9a>
    }
    uint8_t crc = data[i + segmentSize - 1];
 8005900:	2417      	movs	r4, #23
 8005902:	2320      	movs	r3, #32
 8005904:	18e3      	adds	r3, r4, r3
 8005906:	19db      	adds	r3, r3, r7
 8005908:	781a      	ldrb	r2, [r3, #0]
 800590a:	2322      	movs	r3, #34	@ 0x22
 800590c:	18fb      	adds	r3, r7, r3
 800590e:	781b      	ldrb	r3, [r3, #0]
 8005910:	18d3      	adds	r3, r2, r3
 8005912:	3b01      	subs	r3, #1
 8005914:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005916:	18d2      	adds	r2, r2, r3
 8005918:	250b      	movs	r5, #11
 800591a:	2320      	movs	r3, #32
 800591c:	18eb      	adds	r3, r5, r3
 800591e:	19db      	adds	r3, r3, r7
 8005920:	7812      	ldrb	r2, [r2, #0]
 8005922:	701a      	strb	r2, [r3, #0]

    if (CalculateCRC(crcData, segmentSize - 1) != crc) {
 8005924:	2322      	movs	r3, #34	@ 0x22
 8005926:	18fb      	adds	r3, r7, r3
 8005928:	781b      	ldrb	r3, [r3, #0]
 800592a:	3b01      	subs	r3, #1
 800592c:	b2da      	uxtb	r2, r3
 800592e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005930:	0011      	movs	r1, r2
 8005932:	0018      	movs	r0, r3
 8005934:	f000 f838 	bl	80059a8 <CalculateCRC>
 8005938:	0003      	movs	r3, r0
 800593a:	001a      	movs	r2, r3
 800593c:	2320      	movs	r3, #32
 800593e:	18eb      	adds	r3, r5, r3
 8005940:	19db      	adds	r3, r3, r7
 8005942:	781b      	ldrb	r3, [r3, #0]
 8005944:	4293      	cmp	r3, r2
 8005946:	d00c      	beq.n	8005962 <CheckCRC+0x14e>
      Error("CRC check failed for segment: %d.", i + 1);
 8005948:	2320      	movs	r3, #32
 800594a:	18e3      	adds	r3, r4, r3
 800594c:	19db      	adds	r3, r3, r7
 800594e:	781b      	ldrb	r3, [r3, #0]
 8005950:	3301      	adds	r3, #1
 8005952:	4a13      	ldr	r2, [pc, #76]	@ (80059a0 <CheckCRC+0x18c>)
 8005954:	4913      	ldr	r1, [pc, #76]	@ (80059a4 <CheckCRC+0x190>)
 8005956:	2001      	movs	r0, #1
 8005958:	f000 fd76 	bl	8006448 <CreateLine>
      return false;
 800595c:	2300      	movs	r3, #0
 800595e:	46b5      	mov	sp, r6
 8005960:	e019      	b.n	8005996 <CheckCRC+0x182>
 8005962:	46b5      	mov	sp, r6
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 8005964:	2217      	movs	r2, #23
 8005966:	2320      	movs	r3, #32
 8005968:	18d3      	adds	r3, r2, r3
 800596a:	19db      	adds	r3, r3, r7
 800596c:	2120      	movs	r1, #32
 800596e:	1852      	adds	r2, r2, r1
 8005970:	19d1      	adds	r1, r2, r7
 8005972:	2222      	movs	r2, #34	@ 0x22
 8005974:	18ba      	adds	r2, r7, r2
 8005976:	7809      	ldrb	r1, [r1, #0]
 8005978:	7812      	ldrb	r2, [r2, #0]
 800597a:	188a      	adds	r2, r1, r2
 800597c:	701a      	strb	r2, [r3, #0]
 800597e:	2317      	movs	r3, #23
 8005980:	2220      	movs	r2, #32
 8005982:	189b      	adds	r3, r3, r2
 8005984:	19da      	adds	r2, r3, r7
 8005986:	2323      	movs	r3, #35	@ 0x23
 8005988:	18fb      	adds	r3, r7, r3
 800598a:	7812      	ldrb	r2, [r2, #0]
 800598c:	781b      	ldrb	r3, [r3, #0]
 800598e:	429a      	cmp	r2, r3
 8005990:	d200      	bcs.n	8005994 <CheckCRC+0x180>
 8005992:	e754      	b.n	800583e <CheckCRC+0x2a>
    }
  }
  return true;
 8005994:	2301      	movs	r3, #1
}
 8005996:	0018      	movs	r0, r3
 8005998:	46bd      	mov	sp, r7
 800599a:	b00f      	add	sp, #60	@ 0x3c
 800599c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800599e:	46c0      	nop			@ (mov r8, r8)
 80059a0:	0801022c 	.word	0x0801022c
 80059a4:	08010158 	.word	0x08010158

080059a8 <CalculateCRC>:

static uint8_t CalculateCRC(uint8_t *data, uint8_t length) {
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b084      	sub	sp, #16
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
 80059b0:	000a      	movs	r2, r1
 80059b2:	1cfb      	adds	r3, r7, #3
 80059b4:	701a      	strb	r2, [r3, #0]
  uint8_t crc = SGP_CRC_INIT_VALUE;
 80059b6:	230f      	movs	r3, #15
 80059b8:	18fb      	adds	r3, r7, r3
 80059ba:	22ff      	movs	r2, #255	@ 0xff
 80059bc:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 80059be:	230e      	movs	r3, #14
 80059c0:	18fb      	adds	r3, r7, r3
 80059c2:	2200      	movs	r2, #0
 80059c4:	701a      	strb	r2, [r3, #0]
 80059c6:	e037      	b.n	8005a38 <CalculateCRC+0x90>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 80059c8:	230e      	movs	r3, #14
 80059ca:	18fb      	adds	r3, r7, r3
 80059cc:	781b      	ldrb	r3, [r3, #0]
 80059ce:	687a      	ldr	r2, [r7, #4]
 80059d0:	18d3      	adds	r3, r2, r3
 80059d2:	7819      	ldrb	r1, [r3, #0]
 80059d4:	220f      	movs	r2, #15
 80059d6:	18bb      	adds	r3, r7, r2
 80059d8:	18ba      	adds	r2, r7, r2
 80059da:	7812      	ldrb	r2, [r2, #0]
 80059dc:	404a      	eors	r2, r1
 80059de:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 80059e0:	230d      	movs	r3, #13
 80059e2:	18fb      	adds	r3, r7, r3
 80059e4:	2200      	movs	r2, #0
 80059e6:	701a      	strb	r2, [r3, #0]
 80059e8:	e01b      	b.n	8005a22 <CalculateCRC+0x7a>
      // If the leftmost (most significant) bit is set
      if (crc & SGP_CRC_MSB_MASK) {
 80059ea:	210f      	movs	r1, #15
 80059ec:	187b      	adds	r3, r7, r1
 80059ee:	781b      	ldrb	r3, [r3, #0]
 80059f0:	b25b      	sxtb	r3, r3
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	da09      	bge.n	8005a0a <CalculateCRC+0x62>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ SGP_CRC_POLYNOMIAL;
 80059f6:	187b      	adds	r3, r7, r1
 80059f8:	781b      	ldrb	r3, [r3, #0]
 80059fa:	005b      	lsls	r3, r3, #1
 80059fc:	b25b      	sxtb	r3, r3
 80059fe:	2231      	movs	r2, #49	@ 0x31
 8005a00:	4053      	eors	r3, r2
 8005a02:	b25a      	sxtb	r2, r3
 8005a04:	187b      	adds	r3, r7, r1
 8005a06:	701a      	strb	r2, [r3, #0]
 8005a08:	e005      	b.n	8005a16 <CalculateCRC+0x6e>
      } else {
        crc <<= 1;
 8005a0a:	230f      	movs	r3, #15
 8005a0c:	18fa      	adds	r2, r7, r3
 8005a0e:	18fb      	adds	r3, r7, r3
 8005a10:	781b      	ldrb	r3, [r3, #0]
 8005a12:	18db      	adds	r3, r3, r3
 8005a14:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 8005a16:	210d      	movs	r1, #13
 8005a18:	187b      	adds	r3, r7, r1
 8005a1a:	781a      	ldrb	r2, [r3, #0]
 8005a1c:	187b      	adds	r3, r7, r1
 8005a1e:	3201      	adds	r2, #1
 8005a20:	701a      	strb	r2, [r3, #0]
 8005a22:	230d      	movs	r3, #13
 8005a24:	18fb      	adds	r3, r7, r3
 8005a26:	781b      	ldrb	r3, [r3, #0]
 8005a28:	2b07      	cmp	r3, #7
 8005a2a:	d9de      	bls.n	80059ea <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 8005a2c:	210e      	movs	r1, #14
 8005a2e:	187b      	adds	r3, r7, r1
 8005a30:	781a      	ldrb	r2, [r3, #0]
 8005a32:	187b      	adds	r3, r7, r1
 8005a34:	3201      	adds	r2, #1
 8005a36:	701a      	strb	r2, [r3, #0]
 8005a38:	230e      	movs	r3, #14
 8005a3a:	18fa      	adds	r2, r7, r3
 8005a3c:	1cfb      	adds	r3, r7, #3
 8005a3e:	7812      	ldrb	r2, [r2, #0]
 8005a40:	781b      	ldrb	r3, [r3, #0]
 8005a42:	429a      	cmp	r2, r3
 8005a44:	d3c0      	bcc.n	80059c8 <CalculateCRC+0x20>
=======
 8005980:	2301      	movs	r3, #1
 8005982:	e053      	b.n	8005a2c <SGP_GetMeasurementValues+0x428>
 8005984:	20000c82 	.word	0x20000c82
 8005988:	20000d2d 	.word	0x20000d2d
 800598c:	08010294 	.word	0x08010294
 8005990:	080102c0 	.word	0x080102c0
 8005994:	20000d2c 	.word	0x20000d2c
 8005998:	2000001c 	.word	0x2000001c
 800599c:	20000030 	.word	0x20000030
 80059a0:	20000014 	.word	0x20000014
 80059a4:	20000c83 	.word	0x20000c83
 80059a8:	20000c81 	.word	0x20000c81
 80059ac:	080102c4 	.word	0x080102c4
 80059b0:	20000c78 	.word	0x20000c78
 80059b4:	080102f4 	.word	0x080102f4
 80059b8:	08010318 	.word	0x08010318
 80059bc:	0801031c 	.word	0x0801031c
 80059c0:	0801033c 	.word	0x0801033c
 80059c4:	08010340 	.word	0x08010340
 80059c8:	2000002c 	.word	0x2000002c
 80059cc:	20000024 	.word	0x20000024
 80059d0:	08010360 	.word	0x08010360
 80059d4:	20000c84 	.word	0x20000c84
 80059d8:	08010374 	.word	0x08010374
 80059dc:	40590000 	.word	0x40590000
 80059e0:	3ff00000 	.word	0x3ff00000
 80059e4:	20000034 	.word	0x20000034
 80059e8:	20000d32 	.word	0x20000d32
 80059ec:	20000d30 	.word	0x20000d30
 80059f0:	20000d2e 	.word	0x20000d2e
 80059f4:	40790000 	.word	0x40790000
 80059f8:	08010388 	.word	0x08010388
    }
  }
  if (SGP_MeasurementDone() && HeatUpIsDone && MeasurementIsReady) {
 80059fc:	f7ff fde6 	bl	80055cc <SGP_MeasurementDone>
 8005a00:	1e03      	subs	r3, r0, #0
 8005a02:	d012      	beq.n	8005a2a <SGP_GetMeasurementValues+0x426>
 8005a04:	4b0b      	ldr	r3, [pc, #44]	@ (8005a34 <SGP_GetMeasurementValues+0x430>)
 8005a06:	781b      	ldrb	r3, [r3, #0]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d00e      	beq.n	8005a2a <SGP_GetMeasurementValues+0x426>
 8005a0c:	4b0a      	ldr	r3, [pc, #40]	@ (8005a38 <SGP_GetMeasurementValues+0x434>)
 8005a0e:	781b      	ldrb	r3, [r3, #0]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d00a      	beq.n	8005a2a <SGP_GetMeasurementValues+0x426>
    // Starting next measurement
    Debug("Starting next SGP_measurement.");
 8005a14:	4a09      	ldr	r2, [pc, #36]	@ (8005a3c <SGP_GetMeasurementValues+0x438>)
 8005a16:	4b0a      	ldr	r3, [pc, #40]	@ (8005a40 <SGP_GetMeasurementValues+0x43c>)
 8005a18:	0019      	movs	r1, r3
 8005a1a:	2003      	movs	r0, #3
 8005a1c:	f000 fe9c 	bl	8006758 <CreateLine>
    SGP_StartMeasurement();
 8005a20:	f7ff fd80 	bl	8005524 <SGP_StartMeasurement>
    SGP_MsgSent = false;
 8005a24:	4b07      	ldr	r3, [pc, #28]	@ (8005a44 <SGP_GetMeasurementValues+0x440>)
 8005a26:	2200      	movs	r2, #0
 8005a28:	701a      	strb	r2, [r3, #0]
  }
  return false;
 8005a2a:	2300      	movs	r3, #0
}
 8005a2c:	0018      	movs	r0, r3
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	b004      	add	sp, #16
 8005a32:	bdb0      	pop	{r4, r5, r7, pc}
 8005a34:	20000c82 	.word	0x20000c82
 8005a38:	20000c83 	.word	0x20000c83
 8005a3c:	080103ac 	.word	0x080103ac
 8005a40:	080102c0 	.word	0x080102c0
 8005a44:	20000d2d 	.word	0x20000d2d

08005a48 <SGP_DeviceConnected>:

bool SGP_DeviceConnected(void) {
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b084      	sub	sp, #16
 8005a4c:	af02      	add	r7, sp, #8
  WriteRegister(SGP_I2C_ADDRESS, GetSerialNumberBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 8005a4e:	4b1a      	ldr	r3, [pc, #104]	@ (8005ab8 <SGP_DeviceConnected+0x70>)
 8005a50:	2202      	movs	r2, #2
 8005a52:	0019      	movs	r1, r3
 8005a54:	2059      	movs	r0, #89	@ 0x59
 8005a56:	f7ff fd2d 	bl	80054b4 <WriteRegister>
  HAL_Delay(1); // 1ms delay for the sensor to respond (according to datasheet)
 8005a5a:	2001      	movs	r0, #1
 8005a5c:	f001 fa7e 	bl	8006f5c <HAL_Delay>
  ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH);
 8005a60:	4b16      	ldr	r3, [pc, #88]	@ (8005abc <SGP_DeviceConnected+0x74>)
 8005a62:	2209      	movs	r2, #9
 8005a64:	0019      	movs	r1, r3
 8005a66:	2059      	movs	r0, #89	@ 0x59
 8005a68:	f7ff fd06 	bl	8005478 <ReadRegister>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 8005a6c:	1dfb      	adds	r3, r7, #7
 8005a6e:	2200      	movs	r2, #0
 8005a70:	701a      	strb	r2, [r3, #0]
 8005a72:	e011      	b.n	8005a98 <SGP_DeviceConnected+0x50>
    Info("SGP_Device serial ID[%d]: 0x%X", i, SGP_ReadBuffer[i]);
 8005a74:	1dfb      	adds	r3, r7, #7
 8005a76:	7818      	ldrb	r0, [r3, #0]
 8005a78:	1dfb      	adds	r3, r7, #7
 8005a7a:	781b      	ldrb	r3, [r3, #0]
 8005a7c:	4a0f      	ldr	r2, [pc, #60]	@ (8005abc <SGP_DeviceConnected+0x74>)
 8005a7e:	5cd3      	ldrb	r3, [r2, r3]
 8005a80:	4a0f      	ldr	r2, [pc, #60]	@ (8005ac0 <SGP_DeviceConnected+0x78>)
 8005a82:	4910      	ldr	r1, [pc, #64]	@ (8005ac4 <SGP_DeviceConnected+0x7c>)
 8005a84:	9300      	str	r3, [sp, #0]
 8005a86:	0003      	movs	r3, r0
 8005a88:	2002      	movs	r0, #2
 8005a8a:	f000 fe65 	bl	8006758 <CreateLine>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 8005a8e:	1dfb      	adds	r3, r7, #7
 8005a90:	781a      	ldrb	r2, [r3, #0]
 8005a92:	1dfb      	adds	r3, r7, #7
 8005a94:	3201      	adds	r2, #1
 8005a96:	701a      	strb	r2, [r3, #0]
 8005a98:	1dfb      	adds	r3, r7, #7
 8005a9a:	781b      	ldrb	r3, [r3, #0]
 8005a9c:	2b08      	cmp	r3, #8
 8005a9e:	d9e9      	bls.n	8005a74 <SGP_DeviceConnected+0x2c>
  }
  return CheckCRC(SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH, SGP_SERIAL_NUMBER_SEGMENT_SIZE);
 8005aa0:	4b06      	ldr	r3, [pc, #24]	@ (8005abc <SGP_DeviceConnected+0x74>)
 8005aa2:	2203      	movs	r2, #3
 8005aa4:	2109      	movs	r1, #9
 8005aa6:	0018      	movs	r0, r3
 8005aa8:	f000 f80e 	bl	8005ac8 <CheckCRC>
 8005aac:	0003      	movs	r3, r0
}
 8005aae:	0018      	movs	r0, r3
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	b002      	add	sp, #8
 8005ab4:	bd80      	pop	{r7, pc}
 8005ab6:	46c0      	nop			@ (mov r8, r8)
 8005ab8:	20000010 	.word	0x20000010
 8005abc:	20000c78 	.word	0x20000c78
 8005ac0:	080103cc 	.word	0x080103cc
 8005ac4:	0801033c 	.word	0x0801033c

08005ac8 <CheckCRC>:

static bool CheckCRC(uint8_t *data, uint8_t dataLength, uint8_t segmentSize) {
 8005ac8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005aca:	b08f      	sub	sp, #60	@ 0x3c
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6278      	str	r0, [r7, #36]	@ 0x24
 8005ad0:	0008      	movs	r0, r1
 8005ad2:	0011      	movs	r1, r2
 8005ad4:	2323      	movs	r3, #35	@ 0x23
 8005ad6:	18fb      	adds	r3, r7, r3
 8005ad8:	1c02      	adds	r2, r0, #0
 8005ada:	701a      	strb	r2, [r3, #0]
 8005adc:	2322      	movs	r3, #34	@ 0x22
 8005ade:	18fb      	adds	r3, r7, r3
 8005ae0:	1c0a      	adds	r2, r1, #0
 8005ae2:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 8005ae4:	2317      	movs	r3, #23
 8005ae6:	2220      	movs	r2, #32
 8005ae8:	189b      	adds	r3, r3, r2
 8005aea:	19db      	adds	r3, r3, r7
 8005aec:	2200      	movs	r2, #0
 8005aee:	701a      	strb	r2, [r3, #0]
 8005af0:	e09f      	b.n	8005c32 <CheckCRC+0x16a>
 8005af2:	466b      	mov	r3, sp
 8005af4:	001e      	movs	r6, r3
    uint8_t crcData[segmentSize];
 8005af6:	2322      	movs	r3, #34	@ 0x22
 8005af8:	18fb      	adds	r3, r7, r3
 8005afa:	781b      	ldrb	r3, [r3, #0]
 8005afc:	001a      	movs	r2, r3
 8005afe:	3a01      	subs	r2, #1
 8005b00:	633a      	str	r2, [r7, #48]	@ 0x30
 8005b02:	60bb      	str	r3, [r7, #8]
 8005b04:	2200      	movs	r2, #0
 8005b06:	60fa      	str	r2, [r7, #12]
 8005b08:	68b8      	ldr	r0, [r7, #8]
 8005b0a:	68f9      	ldr	r1, [r7, #12]
 8005b0c:	0002      	movs	r2, r0
 8005b0e:	0f52      	lsrs	r2, r2, #29
 8005b10:	000c      	movs	r4, r1
 8005b12:	00e4      	lsls	r4, r4, #3
 8005b14:	61fc      	str	r4, [r7, #28]
 8005b16:	69fc      	ldr	r4, [r7, #28]
 8005b18:	4314      	orrs	r4, r2
 8005b1a:	61fc      	str	r4, [r7, #28]
 8005b1c:	0002      	movs	r2, r0
 8005b1e:	00d2      	lsls	r2, r2, #3
 8005b20:	61ba      	str	r2, [r7, #24]
 8005b22:	603b      	str	r3, [r7, #0]
 8005b24:	2200      	movs	r2, #0
 8005b26:	607a      	str	r2, [r7, #4]
 8005b28:	6838      	ldr	r0, [r7, #0]
 8005b2a:	6879      	ldr	r1, [r7, #4]
 8005b2c:	0002      	movs	r2, r0
 8005b2e:	0f52      	lsrs	r2, r2, #29
 8005b30:	000c      	movs	r4, r1
 8005b32:	00e4      	lsls	r4, r4, #3
 8005b34:	617c      	str	r4, [r7, #20]
 8005b36:	697c      	ldr	r4, [r7, #20]
 8005b38:	4314      	orrs	r4, r2
 8005b3a:	617c      	str	r4, [r7, #20]
 8005b3c:	0002      	movs	r2, r0
 8005b3e:	00d2      	lsls	r2, r2, #3
 8005b40:	613a      	str	r2, [r7, #16]
 8005b42:	3307      	adds	r3, #7
 8005b44:	08db      	lsrs	r3, r3, #3
 8005b46:	00db      	lsls	r3, r3, #3
 8005b48:	466a      	mov	r2, sp
 8005b4a:	1ad3      	subs	r3, r2, r3
 8005b4c:	469d      	mov	sp, r3
 8005b4e:	466b      	mov	r3, sp
 8005b50:	3300      	adds	r3, #0
 8005b52:	62fb      	str	r3, [r7, #44]	@ 0x2c

    for (uint8_t j = 0; j < segmentSize; j++) {
 8005b54:	2316      	movs	r3, #22
 8005b56:	2220      	movs	r2, #32
 8005b58:	189b      	adds	r3, r3, r2
 8005b5a:	19db      	adds	r3, r3, r7
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	701a      	strb	r2, [r3, #0]
 8005b60:	e01e      	b.n	8005ba0 <CheckCRC+0xd8>
      crcData[j] = data[i + j];
 8005b62:	2317      	movs	r3, #23
 8005b64:	2220      	movs	r2, #32
 8005b66:	189b      	adds	r3, r3, r2
 8005b68:	19db      	adds	r3, r3, r7
 8005b6a:	781a      	ldrb	r2, [r3, #0]
 8005b6c:	2116      	movs	r1, #22
 8005b6e:	2320      	movs	r3, #32
 8005b70:	18cb      	adds	r3, r1, r3
 8005b72:	19db      	adds	r3, r3, r7
 8005b74:	781b      	ldrb	r3, [r3, #0]
 8005b76:	18d3      	adds	r3, r2, r3
 8005b78:	001a      	movs	r2, r3
 8005b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b7c:	189a      	adds	r2, r3, r2
 8005b7e:	0008      	movs	r0, r1
 8005b80:	2320      	movs	r3, #32
 8005b82:	18cb      	adds	r3, r1, r3
 8005b84:	19db      	adds	r3, r3, r7
 8005b86:	781b      	ldrb	r3, [r3, #0]
 8005b88:	7811      	ldrb	r1, [r2, #0]
 8005b8a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005b8c:	54d1      	strb	r1, [r2, r3]
    for (uint8_t j = 0; j < segmentSize; j++) {
 8005b8e:	2320      	movs	r3, #32
 8005b90:	18c3      	adds	r3, r0, r3
 8005b92:	19db      	adds	r3, r3, r7
 8005b94:	781a      	ldrb	r2, [r3, #0]
 8005b96:	2320      	movs	r3, #32
 8005b98:	18c3      	adds	r3, r0, r3
 8005b9a:	19db      	adds	r3, r3, r7
 8005b9c:	3201      	adds	r2, #1
 8005b9e:	701a      	strb	r2, [r3, #0]
 8005ba0:	2316      	movs	r3, #22
 8005ba2:	2220      	movs	r2, #32
 8005ba4:	189b      	adds	r3, r3, r2
 8005ba6:	19da      	adds	r2, r3, r7
 8005ba8:	2322      	movs	r3, #34	@ 0x22
 8005baa:	18fb      	adds	r3, r7, r3
 8005bac:	7812      	ldrb	r2, [r2, #0]
 8005bae:	781b      	ldrb	r3, [r3, #0]
 8005bb0:	429a      	cmp	r2, r3
 8005bb2:	d3d6      	bcc.n	8005b62 <CheckCRC+0x9a>
    }
    uint8_t crc = data[i + segmentSize - 1];
 8005bb4:	2417      	movs	r4, #23
 8005bb6:	2320      	movs	r3, #32
 8005bb8:	18e3      	adds	r3, r4, r3
 8005bba:	19db      	adds	r3, r3, r7
 8005bbc:	781a      	ldrb	r2, [r3, #0]
 8005bbe:	2322      	movs	r3, #34	@ 0x22
 8005bc0:	18fb      	adds	r3, r7, r3
 8005bc2:	781b      	ldrb	r3, [r3, #0]
 8005bc4:	18d3      	adds	r3, r2, r3
 8005bc6:	3b01      	subs	r3, #1
 8005bc8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005bca:	18d2      	adds	r2, r2, r3
 8005bcc:	250b      	movs	r5, #11
 8005bce:	2320      	movs	r3, #32
 8005bd0:	18eb      	adds	r3, r5, r3
 8005bd2:	19db      	adds	r3, r3, r7
 8005bd4:	7812      	ldrb	r2, [r2, #0]
 8005bd6:	701a      	strb	r2, [r3, #0]

    if (CalculateCRC(crcData, segmentSize - 1) != crc) {
 8005bd8:	2322      	movs	r3, #34	@ 0x22
 8005bda:	18fb      	adds	r3, r7, r3
 8005bdc:	781b      	ldrb	r3, [r3, #0]
 8005bde:	3b01      	subs	r3, #1
 8005be0:	b2da      	uxtb	r2, r3
 8005be2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005be4:	0011      	movs	r1, r2
 8005be6:	0018      	movs	r0, r3
 8005be8:	f000 f838 	bl	8005c5c <CalculateCRC>
 8005bec:	0003      	movs	r3, r0
 8005bee:	001a      	movs	r2, r3
 8005bf0:	2320      	movs	r3, #32
 8005bf2:	18eb      	adds	r3, r5, r3
 8005bf4:	19db      	adds	r3, r3, r7
 8005bf6:	781b      	ldrb	r3, [r3, #0]
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d00c      	beq.n	8005c16 <CheckCRC+0x14e>
      Error("CRC check failed for segment: %d.", i + 1);
 8005bfc:	2320      	movs	r3, #32
 8005bfe:	18e3      	adds	r3, r4, r3
 8005c00:	19db      	adds	r3, r3, r7
 8005c02:	781b      	ldrb	r3, [r3, #0]
 8005c04:	3301      	adds	r3, #1
 8005c06:	4a13      	ldr	r2, [pc, #76]	@ (8005c54 <CheckCRC+0x18c>)
 8005c08:	4913      	ldr	r1, [pc, #76]	@ (8005c58 <CheckCRC+0x190>)
 8005c0a:	2001      	movs	r0, #1
 8005c0c:	f000 fda4 	bl	8006758 <CreateLine>
      return false;
 8005c10:	2300      	movs	r3, #0
 8005c12:	46b5      	mov	sp, r6
 8005c14:	e019      	b.n	8005c4a <CheckCRC+0x182>
 8005c16:	46b5      	mov	sp, r6
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 8005c18:	2217      	movs	r2, #23
 8005c1a:	2320      	movs	r3, #32
 8005c1c:	18d3      	adds	r3, r2, r3
 8005c1e:	19db      	adds	r3, r3, r7
 8005c20:	2120      	movs	r1, #32
 8005c22:	1852      	adds	r2, r2, r1
 8005c24:	19d1      	adds	r1, r2, r7
 8005c26:	2222      	movs	r2, #34	@ 0x22
 8005c28:	18ba      	adds	r2, r7, r2
 8005c2a:	7809      	ldrb	r1, [r1, #0]
 8005c2c:	7812      	ldrb	r2, [r2, #0]
 8005c2e:	188a      	adds	r2, r1, r2
 8005c30:	701a      	strb	r2, [r3, #0]
 8005c32:	2317      	movs	r3, #23
 8005c34:	2220      	movs	r2, #32
 8005c36:	189b      	adds	r3, r3, r2
 8005c38:	19da      	adds	r2, r3, r7
 8005c3a:	2323      	movs	r3, #35	@ 0x23
 8005c3c:	18fb      	adds	r3, r7, r3
 8005c3e:	7812      	ldrb	r2, [r2, #0]
 8005c40:	781b      	ldrb	r3, [r3, #0]
 8005c42:	429a      	cmp	r2, r3
 8005c44:	d200      	bcs.n	8005c48 <CheckCRC+0x180>
 8005c46:	e754      	b.n	8005af2 <CheckCRC+0x2a>
    }
  }
  return true;
 8005c48:	2301      	movs	r3, #1
}
 8005c4a:	0018      	movs	r0, r3
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	b00f      	add	sp, #60	@ 0x3c
 8005c50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c52:	46c0      	nop			@ (mov r8, r8)
 8005c54:	080103ec 	.word	0x080103ec
 8005c58:	08010318 	.word	0x08010318

08005c5c <CalculateCRC>:

static uint8_t CalculateCRC(uint8_t *data, uint8_t length) {
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b084      	sub	sp, #16
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
 8005c64:	000a      	movs	r2, r1
 8005c66:	1cfb      	adds	r3, r7, #3
 8005c68:	701a      	strb	r2, [r3, #0]
  uint8_t crc = SGP_CRC_INIT_VALUE;
 8005c6a:	230f      	movs	r3, #15
 8005c6c:	18fb      	adds	r3, r7, r3
 8005c6e:	22ff      	movs	r2, #255	@ 0xff
 8005c70:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 8005c72:	230e      	movs	r3, #14
 8005c74:	18fb      	adds	r3, r7, r3
 8005c76:	2200      	movs	r2, #0
 8005c78:	701a      	strb	r2, [r3, #0]
 8005c7a:	e037      	b.n	8005cec <CalculateCRC+0x90>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 8005c7c:	230e      	movs	r3, #14
 8005c7e:	18fb      	adds	r3, r7, r3
 8005c80:	781b      	ldrb	r3, [r3, #0]
 8005c82:	687a      	ldr	r2, [r7, #4]
 8005c84:	18d3      	adds	r3, r2, r3
 8005c86:	7819      	ldrb	r1, [r3, #0]
 8005c88:	220f      	movs	r2, #15
 8005c8a:	18bb      	adds	r3, r7, r2
 8005c8c:	18ba      	adds	r2, r7, r2
 8005c8e:	7812      	ldrb	r2, [r2, #0]
 8005c90:	404a      	eors	r2, r1
 8005c92:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 8005c94:	230d      	movs	r3, #13
 8005c96:	18fb      	adds	r3, r7, r3
 8005c98:	2200      	movs	r2, #0
 8005c9a:	701a      	strb	r2, [r3, #0]
 8005c9c:	e01b      	b.n	8005cd6 <CalculateCRC+0x7a>
      // If the leftmost (most significant) bit is set
      if (crc & SGP_CRC_MSB_MASK) {
 8005c9e:	210f      	movs	r1, #15
 8005ca0:	187b      	adds	r3, r7, r1
 8005ca2:	781b      	ldrb	r3, [r3, #0]
 8005ca4:	b25b      	sxtb	r3, r3
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	da09      	bge.n	8005cbe <CalculateCRC+0x62>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ SGP_CRC_POLYNOMIAL;
 8005caa:	187b      	adds	r3, r7, r1
 8005cac:	781b      	ldrb	r3, [r3, #0]
 8005cae:	005b      	lsls	r3, r3, #1
 8005cb0:	b25b      	sxtb	r3, r3
 8005cb2:	2231      	movs	r2, #49	@ 0x31
 8005cb4:	4053      	eors	r3, r2
 8005cb6:	b25a      	sxtb	r2, r3
 8005cb8:	187b      	adds	r3, r7, r1
 8005cba:	701a      	strb	r2, [r3, #0]
 8005cbc:	e005      	b.n	8005cca <CalculateCRC+0x6e>
      } else {
        crc <<= 1;
 8005cbe:	230f      	movs	r3, #15
 8005cc0:	18fa      	adds	r2, r7, r3
 8005cc2:	18fb      	adds	r3, r7, r3
 8005cc4:	781b      	ldrb	r3, [r3, #0]
 8005cc6:	18db      	adds	r3, r3, r3
 8005cc8:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 8005cca:	210d      	movs	r1, #13
 8005ccc:	187b      	adds	r3, r7, r1
 8005cce:	781a      	ldrb	r2, [r3, #0]
 8005cd0:	187b      	adds	r3, r7, r1
 8005cd2:	3201      	adds	r2, #1
 8005cd4:	701a      	strb	r2, [r3, #0]
 8005cd6:	230d      	movs	r3, #13
 8005cd8:	18fb      	adds	r3, r7, r3
 8005cda:	781b      	ldrb	r3, [r3, #0]
 8005cdc:	2b07      	cmp	r3, #7
 8005cde:	d9de      	bls.n	8005c9e <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 8005ce0:	210e      	movs	r1, #14
 8005ce2:	187b      	adds	r3, r7, r1
 8005ce4:	781a      	ldrb	r2, [r3, #0]
 8005ce6:	187b      	adds	r3, r7, r1
 8005ce8:	3201      	adds	r2, #1
 8005cea:	701a      	strb	r2, [r3, #0]
 8005cec:	230e      	movs	r3, #14
 8005cee:	18fa      	adds	r2, r7, r3
 8005cf0:	1cfb      	adds	r3, r7, #3
 8005cf2:	7812      	ldrb	r2, [r2, #0]
 8005cf4:	781b      	ldrb	r3, [r3, #0]
 8005cf6:	429a      	cmp	r2, r3
 8005cf8:	d3c0      	bcc.n	8005c7c <CalculateCRC+0x20>
>>>>>>> main
      }
    }
  }
  //  Info("SGP_CRC calculated value: 0x%X", crc);
  return crc;
<<<<<<< HEAD
 8005a46:	230f      	movs	r3, #15
 8005a48:	18fb      	adds	r3, r7, r3
 8005a4a:	781b      	ldrb	r3, [r3, #0]
}
 8005a4c:	0018      	movs	r0, r3
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	b004      	add	sp, #16
 8005a52:	bd80      	pop	{r7, pc}

08005a54 <HAL_MspInit>:
=======
 8005cfa:	230f      	movs	r3, #15
 8005cfc:	18fb      	adds	r3, r7, r3
 8005cfe:	781b      	ldrb	r3, [r3, #0]
}
 8005d00:	0018      	movs	r0, r3
 8005d02:	46bd      	mov	sp, r7
 8005d04:	b004      	add	sp, #16
 8005d06:	bd80      	pop	{r7, pc}

08005d08 <SGP_GetHT>:

void SGP_GetHT(float* temperature, float* humidity){
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b084      	sub	sp, #16
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
 8005d10:	6039      	str	r1, [r7, #0]
  uint8_t humBuf[2];
  uint8_t tempBuf[2];
  SGP_Temp = (uint16_t)(((*temperature+45.0f)/175.0f)*(float)0xFFFF);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4936      	ldr	r1, [pc, #216]	@ (8005df0 <SGP_GetHT+0xe8>)
 8005d18:	1c18      	adds	r0, r3, #0
 8005d1a:	f7fa fd4f 	bl	80007bc <__aeabi_fadd>
 8005d1e:	1c03      	adds	r3, r0, #0
 8005d20:	4934      	ldr	r1, [pc, #208]	@ (8005df4 <SGP_GetHT+0xec>)
 8005d22:	1c18      	adds	r0, r3, #0
 8005d24:	f7fa fed4 	bl	8000ad0 <__aeabi_fdiv>
 8005d28:	1c03      	adds	r3, r0, #0
 8005d2a:	4933      	ldr	r1, [pc, #204]	@ (8005df8 <SGP_GetHT+0xf0>)
 8005d2c:	1c18      	adds	r0, r3, #0
 8005d2e:	f7fb f8b5 	bl	8000e9c <__aeabi_fmul>
 8005d32:	1c03      	adds	r3, r0, #0
 8005d34:	1c18      	adds	r0, r3, #0
 8005d36:	f7fa fc3f 	bl	80005b8 <__aeabi_f2uiz>
 8005d3a:	0003      	movs	r3, r0
 8005d3c:	b29a      	uxth	r2, r3
 8005d3e:	4b2f      	ldr	r3, [pc, #188]	@ (8005dfc <SGP_GetHT+0xf4>)
 8005d40:	801a      	strh	r2, [r3, #0]
  SGP_Hum = ((*humidity/100.0f)*(float)0xFFFF);
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	492e      	ldr	r1, [pc, #184]	@ (8005e00 <SGP_GetHT+0xf8>)
 8005d48:	1c18      	adds	r0, r3, #0
 8005d4a:	f7fa fec1 	bl	8000ad0 <__aeabi_fdiv>
 8005d4e:	1c03      	adds	r3, r0, #0
 8005d50:	4929      	ldr	r1, [pc, #164]	@ (8005df8 <SGP_GetHT+0xf0>)
 8005d52:	1c18      	adds	r0, r3, #0
 8005d54:	f7fb f8a2 	bl	8000e9c <__aeabi_fmul>
 8005d58:	1c03      	adds	r3, r0, #0
 8005d5a:	1c18      	adds	r0, r3, #0
 8005d5c:	f7fa fc2c 	bl	80005b8 <__aeabi_f2uiz>
 8005d60:	0003      	movs	r3, r0
 8005d62:	b29a      	uxth	r2, r3
 8005d64:	4b27      	ldr	r3, [pc, #156]	@ (8005e04 <SGP_GetHT+0xfc>)
 8005d66:	801a      	strh	r2, [r3, #0]
  humBuf[0] = MeasureRawWithCompBuffer[2] = SGP_Hum >> 8;
 8005d68:	4b26      	ldr	r3, [pc, #152]	@ (8005e04 <SGP_GetHT+0xfc>)
 8005d6a:	881b      	ldrh	r3, [r3, #0]
 8005d6c:	0a1b      	lsrs	r3, r3, #8
 8005d6e:	b29b      	uxth	r3, r3
 8005d70:	b2da      	uxtb	r2, r3
 8005d72:	4b25      	ldr	r3, [pc, #148]	@ (8005e08 <SGP_GetHT+0x100>)
 8005d74:	709a      	strb	r2, [r3, #2]
 8005d76:	4b24      	ldr	r3, [pc, #144]	@ (8005e08 <SGP_GetHT+0x100>)
 8005d78:	789a      	ldrb	r2, [r3, #2]
 8005d7a:	210c      	movs	r1, #12
 8005d7c:	187b      	adds	r3, r7, r1
 8005d7e:	701a      	strb	r2, [r3, #0]
  humBuf[1] = MeasureRawWithCompBuffer[3] = SGP_Hum;
 8005d80:	4b20      	ldr	r3, [pc, #128]	@ (8005e04 <SGP_GetHT+0xfc>)
 8005d82:	881b      	ldrh	r3, [r3, #0]
 8005d84:	b2da      	uxtb	r2, r3
 8005d86:	4b20      	ldr	r3, [pc, #128]	@ (8005e08 <SGP_GetHT+0x100>)
 8005d88:	70da      	strb	r2, [r3, #3]
 8005d8a:	4b1f      	ldr	r3, [pc, #124]	@ (8005e08 <SGP_GetHT+0x100>)
 8005d8c:	78da      	ldrb	r2, [r3, #3]
 8005d8e:	187b      	adds	r3, r7, r1
 8005d90:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[4] = CalculateCRC(humBuf, 2);
 8005d92:	187b      	adds	r3, r7, r1
 8005d94:	2102      	movs	r1, #2
 8005d96:	0018      	movs	r0, r3
 8005d98:	f7ff ff60 	bl	8005c5c <CalculateCRC>
 8005d9c:	0003      	movs	r3, r0
 8005d9e:	001a      	movs	r2, r3
 8005da0:	4b19      	ldr	r3, [pc, #100]	@ (8005e08 <SGP_GetHT+0x100>)
 8005da2:	711a      	strb	r2, [r3, #4]
  tempBuf[0] = MeasureRawWithCompBuffer[5] = SGP_Temp >> 8;
 8005da4:	4b15      	ldr	r3, [pc, #84]	@ (8005dfc <SGP_GetHT+0xf4>)
 8005da6:	881b      	ldrh	r3, [r3, #0]
 8005da8:	0a1b      	lsrs	r3, r3, #8
 8005daa:	b29b      	uxth	r3, r3
 8005dac:	b2da      	uxtb	r2, r3
 8005dae:	4b16      	ldr	r3, [pc, #88]	@ (8005e08 <SGP_GetHT+0x100>)
 8005db0:	715a      	strb	r2, [r3, #5]
 8005db2:	4b15      	ldr	r3, [pc, #84]	@ (8005e08 <SGP_GetHT+0x100>)
 8005db4:	795a      	ldrb	r2, [r3, #5]
 8005db6:	2108      	movs	r1, #8
 8005db8:	187b      	adds	r3, r7, r1
 8005dba:	701a      	strb	r2, [r3, #0]
  tempBuf[1] = MeasureRawWithCompBuffer[6] = SGP_Temp;
 8005dbc:	4b0f      	ldr	r3, [pc, #60]	@ (8005dfc <SGP_GetHT+0xf4>)
 8005dbe:	881b      	ldrh	r3, [r3, #0]
 8005dc0:	b2da      	uxtb	r2, r3
 8005dc2:	4b11      	ldr	r3, [pc, #68]	@ (8005e08 <SGP_GetHT+0x100>)
 8005dc4:	719a      	strb	r2, [r3, #6]
 8005dc6:	4b10      	ldr	r3, [pc, #64]	@ (8005e08 <SGP_GetHT+0x100>)
 8005dc8:	799a      	ldrb	r2, [r3, #6]
 8005dca:	187b      	adds	r3, r7, r1
 8005dcc:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[7] = CalculateCRC(tempBuf, 2);
 8005dce:	187b      	adds	r3, r7, r1
 8005dd0:	2102      	movs	r1, #2
 8005dd2:	0018      	movs	r0, r3
 8005dd4:	f7ff ff42 	bl	8005c5c <CalculateCRC>
 8005dd8:	0003      	movs	r3, r0
 8005dda:	001a      	movs	r2, r3
 8005ddc:	4b0a      	ldr	r3, [pc, #40]	@ (8005e08 <SGP_GetHT+0x100>)
 8005dde:	71da      	strb	r2, [r3, #7]
  HT_MeasurementReceived = true;
 8005de0:	4b0a      	ldr	r3, [pc, #40]	@ (8005e0c <SGP_GetHT+0x104>)
 8005de2:	2201      	movs	r2, #1
 8005de4:	701a      	strb	r2, [r3, #0]
}
 8005de6:	46c0      	nop			@ (mov r8, r8)
 8005de8:	46bd      	mov	sp, r7
 8005dea:	b004      	add	sp, #16
 8005dec:	bd80      	pop	{r7, pc}
 8005dee:	46c0      	nop			@ (mov r8, r8)
 8005df0:	42340000 	.word	0x42340000
 8005df4:	432f0000 	.word	0x432f0000
 8005df8:	477fff00 	.word	0x477fff00
 8005dfc:	20000d2a 	.word	0x20000d2a
 8005e00:	42c80000 	.word	0x42c80000
 8005e04:	20000d28 	.word	0x20000d28
 8005e08:	2000001c 	.word	0x2000001c
 8005e0c:	20000d2c 	.word	0x20000d2c

08005e10 <HAL_MspInit>:
>>>>>>> main
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
<<<<<<< HEAD
 8005a54:	b580      	push	{r7, lr}
 8005a56:	af00      	add	r7, sp, #0
=======
 8005e10:	b580      	push	{r7, lr}
 8005e12:	af00      	add	r7, sp, #0
>>>>>>> main

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
<<<<<<< HEAD
 8005a58:	4b07      	ldr	r3, [pc, #28]	@ (8005a78 <HAL_MspInit+0x24>)
 8005a5a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005a5c:	4b06      	ldr	r3, [pc, #24]	@ (8005a78 <HAL_MspInit+0x24>)
 8005a5e:	2101      	movs	r1, #1
 8005a60:	430a      	orrs	r2, r1
 8005a62:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8005a64:	4b04      	ldr	r3, [pc, #16]	@ (8005a78 <HAL_MspInit+0x24>)
 8005a66:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005a68:	4b03      	ldr	r3, [pc, #12]	@ (8005a78 <HAL_MspInit+0x24>)
 8005a6a:	2180      	movs	r1, #128	@ 0x80
 8005a6c:	0549      	lsls	r1, r1, #21
 8005a6e:	430a      	orrs	r2, r1
 8005a70:	639a      	str	r2, [r3, #56]	@ 0x38
=======
 8005e14:	4b07      	ldr	r3, [pc, #28]	@ (8005e34 <HAL_MspInit+0x24>)
 8005e16:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005e18:	4b06      	ldr	r3, [pc, #24]	@ (8005e34 <HAL_MspInit+0x24>)
 8005e1a:	2101      	movs	r1, #1
 8005e1c:	430a      	orrs	r2, r1
 8005e1e:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8005e20:	4b04      	ldr	r3, [pc, #16]	@ (8005e34 <HAL_MspInit+0x24>)
 8005e22:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005e24:	4b03      	ldr	r3, [pc, #12]	@ (8005e34 <HAL_MspInit+0x24>)
 8005e26:	2180      	movs	r1, #128	@ 0x80
 8005e28:	0549      	lsls	r1, r1, #21
 8005e2a:	430a      	orrs	r2, r1
 8005e2c:	639a      	str	r2, [r3, #56]	@ 0x38
>>>>>>> main
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
<<<<<<< HEAD
 8005a72:	46c0      	nop			@ (mov r8, r8)
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bd80      	pop	{r7, pc}
 8005a78:	40021000 	.word	0x40021000

08005a7c <NMI_Handler>:
=======
 8005e2e:	46c0      	nop			@ (mov r8, r8)
 8005e30:	46bd      	mov	sp, r7
 8005e32:	bd80      	pop	{r7, pc}
 8005e34:	40021000 	.word	0x40021000

08005e38 <NMI_Handler>:
>>>>>>> main
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
<<<<<<< HEAD
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	af00      	add	r7, sp, #0
=======
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	af00      	add	r7, sp, #0
>>>>>>> main
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
<<<<<<< HEAD
 8005a80:	46c0      	nop			@ (mov r8, r8)
 8005a82:	e7fd      	b.n	8005a80 <NMI_Handler+0x4>

08005a84 <HardFault_Handler>:
=======
 8005e3c:	46c0      	nop			@ (mov r8, r8)
 8005e3e:	e7fd      	b.n	8005e3c <NMI_Handler+0x4>

08005e40 <HardFault_Handler>:
>>>>>>> main

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
<<<<<<< HEAD
 8005a84:	b580      	push	{r7, lr}
 8005a86:	af00      	add	r7, sp, #0
=======
 8005e40:	b580      	push	{r7, lr}
 8005e42:	af00      	add	r7, sp, #0
>>>>>>> main
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 8005a88:	46c0      	nop			@ (mov r8, r8)
 8005a8a:	e7fd      	b.n	8005a88 <HardFault_Handler+0x4>

08005a8c <SVC_Handler>:
=======
 8005e44:	46c0      	nop			@ (mov r8, r8)
 8005e46:	e7fd      	b.n	8005e44 <HardFault_Handler+0x4>

08005e48 <SVC_Handler>:
>>>>>>> main

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
<<<<<<< HEAD
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	af00      	add	r7, sp, #0
=======
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	af00      	add	r7, sp, #0
>>>>>>> main

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
<<<<<<< HEAD
 8005a90:	46c0      	nop			@ (mov r8, r8)
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bd80      	pop	{r7, pc}

08005a96 <PendSV_Handler>:
=======
 8005e4c:	46c0      	nop			@ (mov r8, r8)
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bd80      	pop	{r7, pc}

08005e52 <PendSV_Handler>:
>>>>>>> main

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
<<<<<<< HEAD
 8005a96:	b580      	push	{r7, lr}
 8005a98:	af00      	add	r7, sp, #0
=======
 8005e52:	b580      	push	{r7, lr}
 8005e54:	af00      	add	r7, sp, #0
>>>>>>> main

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
<<<<<<< HEAD
 8005a9a:	46c0      	nop			@ (mov r8, r8)
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bd80      	pop	{r7, pc}

08005aa0 <SysTick_Handler>:
=======
 8005e56:	46c0      	nop			@ (mov r8, r8)
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	bd80      	pop	{r7, pc}

08005e5c <SysTick_Handler>:
>>>>>>> main

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
<<<<<<< HEAD
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	af00      	add	r7, sp, #0
=======
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	af00      	add	r7, sp, #0
>>>>>>> main
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
<<<<<<< HEAD
 8005aa4:	f001 f8dc 	bl	8006c60 <HAL_IncTick>
=======
 8005e60:	f001 f860 	bl	8006f24 <HAL_IncTick>
>>>>>>> main
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
<<<<<<< HEAD
 8005aa8:	46c0      	nop			@ (mov r8, r8)
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bd80      	pop	{r7, pc}
	...

08005ab0 <DMA1_Channel2_3_IRQHandler>:
=======
 8005e64:	46c0      	nop			@ (mov r8, r8)
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bd80      	pop	{r7, pc}
	...

08005e6c <DMA1_Channel2_3_IRQHandler>:
>>>>>>> main

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
<<<<<<< HEAD
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	af00      	add	r7, sp, #0
=======
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	af00      	add	r7, sp, #0
>>>>>>> main
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
<<<<<<< HEAD
 8005ab4:	4b05      	ldr	r3, [pc, #20]	@ (8005acc <DMA1_Channel2_3_IRQHandler+0x1c>)
 8005ab6:	0018      	movs	r0, r3
 8005ab8:	f001 fbb3 	bl	8007222 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8005abc:	4b04      	ldr	r3, [pc, #16]	@ (8005ad0 <DMA1_Channel2_3_IRQHandler+0x20>)
 8005abe:	0018      	movs	r0, r3
 8005ac0:	f001 fbaf 	bl	8007222 <HAL_DMA_IRQHandler>
=======
 8005e70:	4b05      	ldr	r3, [pc, #20]	@ (8005e88 <DMA1_Channel2_3_IRQHandler+0x1c>)
 8005e72:	0018      	movs	r0, r3
 8005e74:	f001 fb37 	bl	80074e6 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8005e78:	4b04      	ldr	r3, [pc, #16]	@ (8005e8c <DMA1_Channel2_3_IRQHandler+0x20>)
 8005e7a:	0018      	movs	r0, r3
 8005e7c:	f001 fb33 	bl	80074e6 <HAL_DMA_IRQHandler>
>>>>>>> main
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
<<<<<<< HEAD
 8005ac4:	46c0      	nop			@ (mov r8, r8)
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bd80      	pop	{r7, pc}
 8005aca:	46c0      	nop			@ (mov r8, r8)
 8005acc:	20000330 	.word	0x20000330
 8005ad0:	200002e8 	.word	0x200002e8

08005ad4 <DMA1_Channel4_5_6_7_IRQHandler>:
=======
 8005e80:	46c0      	nop			@ (mov r8, r8)
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bd80      	pop	{r7, pc}
 8005e86:	46c0      	nop			@ (mov r8, r8)
 8005e88:	2000033c 	.word	0x2000033c
 8005e8c:	200002f4 	.word	0x200002f4

08005e90 <DMA1_Channel4_5_6_7_IRQHandler>:
>>>>>>> main

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
<<<<<<< HEAD
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	af00      	add	r7, sp, #0
=======
 8005e90:	b580      	push	{r7, lr}
 8005e92:	af00      	add	r7, sp, #0
>>>>>>> main
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
<<<<<<< HEAD
 8005ad8:	4b07      	ldr	r3, [pc, #28]	@ (8005af8 <DMA1_Channel4_5_6_7_IRQHandler+0x24>)
 8005ada:	0018      	movs	r0, r3
 8005adc:	f001 fba1 	bl	8007222 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_rx);
 8005ae0:	4b06      	ldr	r3, [pc, #24]	@ (8005afc <DMA1_Channel4_5_6_7_IRQHandler+0x28>)
 8005ae2:	0018      	movs	r0, r3
 8005ae4:	f001 fb9d 	bl	8007222 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_tx);
 8005ae8:	4b05      	ldr	r3, [pc, #20]	@ (8005b00 <DMA1_Channel4_5_6_7_IRQHandler+0x2c>)
 8005aea:	0018      	movs	r0, r3
 8005aec:	f001 fb99 	bl	8007222 <HAL_DMA_IRQHandler>
=======
 8005e94:	4b07      	ldr	r3, [pc, #28]	@ (8005eb4 <DMA1_Channel4_5_6_7_IRQHandler+0x24>)
 8005e96:	0018      	movs	r0, r3
 8005e98:	f001 fb25 	bl	80074e6 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_rx);
 8005e9c:	4b06      	ldr	r3, [pc, #24]	@ (8005eb8 <DMA1_Channel4_5_6_7_IRQHandler+0x28>)
 8005e9e:	0018      	movs	r0, r3
 8005ea0:	f001 fb21 	bl	80074e6 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_tx);
 8005ea4:	4b05      	ldr	r3, [pc, #20]	@ (8005ebc <DMA1_Channel4_5_6_7_IRQHandler+0x2c>)
 8005ea6:	0018      	movs	r0, r3
 8005ea8:	f001 fb1d 	bl	80074e6 <HAL_DMA_IRQHandler>
>>>>>>> main
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
<<<<<<< HEAD
 8005af0:	46c0      	nop			@ (mov r8, r8)
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}
 8005af6:	46c0      	nop			@ (mov r8, r8)
 8005af8:	200003b4 	.word	0x200003b4
 8005afc:	20000bc8 	.word	0x20000bc8
 8005b00:	20000c10 	.word	0x20000c10

08005b04 <USART4_5_IRQHandler>:
=======
 8005eac:	46c0      	nop			@ (mov r8, r8)
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	bd80      	pop	{r7, pc}
 8005eb2:	46c0      	nop			@ (mov r8, r8)
 8005eb4:	200003c0 	.word	0x200003c0
 8005eb8:	20000f28 	.word	0x20000f28
 8005ebc:	20000f70 	.word	0x20000f70

08005ec0 <USART4_5_IRQHandler>:
>>>>>>> main

/**
  * @brief This function handles USART4 and USART5 interrupt.
  */
void USART4_5_IRQHandler(void)
{
<<<<<<< HEAD
 8005b04:	b580      	push	{r7, lr}
 8005b06:	af00      	add	r7, sp, #0
=======
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	af00      	add	r7, sp, #0
>>>>>>> main
  /* USER CODE BEGIN USART4_5_IRQn 0 */

  /* USER CODE END USART4_5_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
<<<<<<< HEAD
 8005b08:	4b03      	ldr	r3, [pc, #12]	@ (8005b18 <USART4_5_IRQHandler+0x14>)
 8005b0a:	0018      	movs	r0, r3
 8005b0c:	f005 ff6c 	bl	800b9e8 <HAL_UART_IRQHandler>
=======
 8005ec4:	4b03      	ldr	r3, [pc, #12]	@ (8005ed4 <USART4_5_IRQHandler+0x14>)
 8005ec6:	0018      	movs	r0, r3
 8005ec8:	f005 feda 	bl	800bc80 <HAL_UART_IRQHandler>
>>>>>>> main
  /* USER CODE BEGIN USART4_5_IRQn 1 */

  /* USER CODE END USART4_5_IRQn 1 */
}
<<<<<<< HEAD
 8005b10:	46c0      	nop			@ (mov r8, r8)
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bd80      	pop	{r7, pc}
 8005b16:	46c0      	nop			@ (mov r8, r8)
 8005b18:	20000b10 	.word	0x20000b10

08005b1c <I2C1_IRQHandler>:
=======
 8005ecc:	46c0      	nop			@ (mov r8, r8)
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	bd80      	pop	{r7, pc}
 8005ed2:	46c0      	nop			@ (mov r8, r8)
 8005ed4:	20000e70 	.word	0x20000e70

08005ed8 <I2C1_IRQHandler>:
>>>>>>> main

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
<<<<<<< HEAD
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	af00      	add	r7, sp, #0
=======
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	af00      	add	r7, sp, #0
>>>>>>> main
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
<<<<<<< HEAD
 8005b20:	4b09      	ldr	r3, [pc, #36]	@ (8005b48 <I2C1_IRQHandler+0x2c>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	699a      	ldr	r2, [r3, #24]
 8005b26:	23e0      	movs	r3, #224	@ 0xe0
 8005b28:	00db      	lsls	r3, r3, #3
 8005b2a:	4013      	ands	r3, r2
 8005b2c:	d004      	beq.n	8005b38 <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 8005b2e:	4b06      	ldr	r3, [pc, #24]	@ (8005b48 <I2C1_IRQHandler+0x2c>)
 8005b30:	0018      	movs	r0, r3
 8005b32:	f002 f999 	bl	8007e68 <HAL_I2C_ER_IRQHandler>
=======
 8005edc:	4b09      	ldr	r3, [pc, #36]	@ (8005f04 <I2C1_IRQHandler+0x2c>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	699a      	ldr	r2, [r3, #24]
 8005ee2:	23e0      	movs	r3, #224	@ 0xe0
 8005ee4:	00db      	lsls	r3, r3, #3
 8005ee6:	4013      	ands	r3, r2
 8005ee8:	d004      	beq.n	8005ef4 <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 8005eea:	4b06      	ldr	r3, [pc, #24]	@ (8005f04 <I2C1_IRQHandler+0x2c>)
 8005eec:	0018      	movs	r0, r3
 8005eee:	f002 f91d 	bl	800812c <HAL_I2C_ER_IRQHandler>
>>>>>>> main
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
<<<<<<< HEAD
 8005b36:	e003      	b.n	8005b40 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 8005b38:	4b03      	ldr	r3, [pc, #12]	@ (8005b48 <I2C1_IRQHandler+0x2c>)
 8005b3a:	0018      	movs	r0, r3
 8005b3c:	f002 f97a 	bl	8007e34 <HAL_I2C_EV_IRQHandler>
}
 8005b40:	46c0      	nop			@ (mov r8, r8)
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bd80      	pop	{r7, pc}
 8005b46:	46c0      	nop			@ (mov r8, r8)
 8005b48:	20000240 	.word	0x20000240

08005b4c <_getpid>:
=======
 8005ef2:	e003      	b.n	8005efc <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 8005ef4:	4b03      	ldr	r3, [pc, #12]	@ (8005f04 <I2C1_IRQHandler+0x2c>)
 8005ef6:	0018      	movs	r0, r3
 8005ef8:	f002 f8fe 	bl	80080f8 <HAL_I2C_EV_IRQHandler>
}
 8005efc:	46c0      	nop			@ (mov r8, r8)
 8005efe:	46bd      	mov	sp, r7
 8005f00:	bd80      	pop	{r7, pc}
 8005f02:	46c0      	nop			@ (mov r8, r8)
 8005f04:	2000024c 	.word	0x2000024c

08005f08 <_getpid>:
>>>>>>> main
void initialise_monitor_handles()
{
}

int _getpid(void)
{
<<<<<<< HEAD
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	af00      	add	r7, sp, #0
  return 1;
 8005b50:	2301      	movs	r3, #1
}
 8005b52:	0018      	movs	r0, r3
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bd80      	pop	{r7, pc}

08005b58 <_kill>:

int _kill(int pid, int sig)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b082      	sub	sp, #8
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
 8005b60:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8005b62:	f007 fe39 	bl	800d7d8 <__errno>
 8005b66:	0003      	movs	r3, r0
 8005b68:	2216      	movs	r2, #22
 8005b6a:	601a      	str	r2, [r3, #0]
  return -1;
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	425b      	negs	r3, r3
}
 8005b70:	0018      	movs	r0, r3
 8005b72:	46bd      	mov	sp, r7
 8005b74:	b002      	add	sp, #8
 8005b76:	bd80      	pop	{r7, pc}

08005b78 <_exit>:

void _exit (int status)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b082      	sub	sp, #8
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8005b80:	2301      	movs	r3, #1
 8005b82:	425a      	negs	r2, r3
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	0011      	movs	r1, r2
 8005b88:	0018      	movs	r0, r3
 8005b8a:	f7ff ffe5 	bl	8005b58 <_kill>
  while (1) {}    /* Make sure we hang here */
 8005b8e:	46c0      	nop			@ (mov r8, r8)
 8005b90:	e7fd      	b.n	8005b8e <_exit+0x16>

08005b92 <_read>:
=======
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	af00      	add	r7, sp, #0
  return 1;
 8005f0c:	2301      	movs	r3, #1
}
 8005f0e:	0018      	movs	r0, r3
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bd80      	pop	{r7, pc}

08005f14 <_kill>:

int _kill(int pid, int sig)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b082      	sub	sp, #8
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
 8005f1c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8005f1e:	f007 fda7 	bl	800da70 <__errno>
 8005f22:	0003      	movs	r3, r0
 8005f24:	2216      	movs	r2, #22
 8005f26:	601a      	str	r2, [r3, #0]
  return -1;
 8005f28:	2301      	movs	r3, #1
 8005f2a:	425b      	negs	r3, r3
}
 8005f2c:	0018      	movs	r0, r3
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	b002      	add	sp, #8
 8005f32:	bd80      	pop	{r7, pc}

08005f34 <_exit>:

void _exit (int status)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b082      	sub	sp, #8
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	425a      	negs	r2, r3
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	0011      	movs	r1, r2
 8005f44:	0018      	movs	r0, r3
 8005f46:	f7ff ffe5 	bl	8005f14 <_kill>
  while (1) {}    /* Make sure we hang here */
 8005f4a:	46c0      	nop			@ (mov r8, r8)
 8005f4c:	e7fd      	b.n	8005f4a <_exit+0x16>

08005f4e <_read>:
>>>>>>> main
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
<<<<<<< HEAD
 8005b92:	b580      	push	{r7, lr}
 8005b94:	b086      	sub	sp, #24
 8005b96:	af00      	add	r7, sp, #0
 8005b98:	60f8      	str	r0, [r7, #12]
 8005b9a:	60b9      	str	r1, [r7, #8]
 8005b9c:	607a      	str	r2, [r7, #4]
=======
 8005f4e:	b580      	push	{r7, lr}
 8005f50:	b086      	sub	sp, #24
 8005f52:	af00      	add	r7, sp, #0
 8005f54:	60f8      	str	r0, [r7, #12]
 8005f56:	60b9      	str	r1, [r7, #8]
 8005f58:	607a      	str	r2, [r7, #4]
>>>>>>> main
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
<<<<<<< HEAD
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	617b      	str	r3, [r7, #20]
 8005ba2:	e00a      	b.n	8005bba <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8005ba4:	e000      	b.n	8005ba8 <_read+0x16>
 8005ba6:	bf00      	nop
 8005ba8:	0001      	movs	r1, r0
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	1c5a      	adds	r2, r3, #1
 8005bae:	60ba      	str	r2, [r7, #8]
 8005bb0:	b2ca      	uxtb	r2, r1
 8005bb2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005bb4:	697b      	ldr	r3, [r7, #20]
 8005bb6:	3301      	adds	r3, #1
 8005bb8:	617b      	str	r3, [r7, #20]
 8005bba:	697a      	ldr	r2, [r7, #20]
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	429a      	cmp	r2, r3
 8005bc0:	dbf0      	blt.n	8005ba4 <_read+0x12>
  }

  return len;
 8005bc2:	687b      	ldr	r3, [r7, #4]
}
 8005bc4:	0018      	movs	r0, r3
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	b006      	add	sp, #24
 8005bca:	bd80      	pop	{r7, pc}

08005bcc <_close>:
=======
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	617b      	str	r3, [r7, #20]
 8005f5e:	e00a      	b.n	8005f76 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8005f60:	e000      	b.n	8005f64 <_read+0x16>
 8005f62:	bf00      	nop
 8005f64:	0001      	movs	r1, r0
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	1c5a      	adds	r2, r3, #1
 8005f6a:	60ba      	str	r2, [r7, #8]
 8005f6c:	b2ca      	uxtb	r2, r1
 8005f6e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005f70:	697b      	ldr	r3, [r7, #20]
 8005f72:	3301      	adds	r3, #1
 8005f74:	617b      	str	r3, [r7, #20]
 8005f76:	697a      	ldr	r2, [r7, #20]
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	429a      	cmp	r2, r3
 8005f7c:	dbf0      	blt.n	8005f60 <_read+0x12>
  }

  return len;
 8005f7e:	687b      	ldr	r3, [r7, #4]
}
 8005f80:	0018      	movs	r0, r3
 8005f82:	46bd      	mov	sp, r7
 8005f84:	b006      	add	sp, #24
 8005f86:	bd80      	pop	{r7, pc}

08005f88 <_close>:
>>>>>>> main
  }
  return len;
}

int _close(int file)
{
<<<<<<< HEAD
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b082      	sub	sp, #8
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	425b      	negs	r3, r3
}
 8005bd8:	0018      	movs	r0, r3
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	b002      	add	sp, #8
 8005bde:	bd80      	pop	{r7, pc}

08005be0 <_fstat>:
=======
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b082      	sub	sp, #8
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005f90:	2301      	movs	r3, #1
 8005f92:	425b      	negs	r3, r3
}
 8005f94:	0018      	movs	r0, r3
 8005f96:	46bd      	mov	sp, r7
 8005f98:	b002      	add	sp, #8
 8005f9a:	bd80      	pop	{r7, pc}

08005f9c <_fstat>:
>>>>>>> main


int _fstat(int file, struct stat *st)
{
<<<<<<< HEAD
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b082      	sub	sp, #8
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
 8005be8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	2280      	movs	r2, #128	@ 0x80
 8005bee:	0192      	lsls	r2, r2, #6
 8005bf0:	605a      	str	r2, [r3, #4]
  return 0;
 8005bf2:	2300      	movs	r3, #0
}
 8005bf4:	0018      	movs	r0, r3
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	b002      	add	sp, #8
 8005bfa:	bd80      	pop	{r7, pc}

08005bfc <_isatty>:

int _isatty(int file)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b082      	sub	sp, #8
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005c04:	2301      	movs	r3, #1
}
 8005c06:	0018      	movs	r0, r3
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	b002      	add	sp, #8
 8005c0c:	bd80      	pop	{r7, pc}

08005c0e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005c0e:	b580      	push	{r7, lr}
 8005c10:	b084      	sub	sp, #16
 8005c12:	af00      	add	r7, sp, #0
 8005c14:	60f8      	str	r0, [r7, #12]
 8005c16:	60b9      	str	r1, [r7, #8]
 8005c18:	607a      	str	r2, [r7, #4]
=======
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b082      	sub	sp, #8
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
 8005fa4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	2280      	movs	r2, #128	@ 0x80
 8005faa:	0192      	lsls	r2, r2, #6
 8005fac:	605a      	str	r2, [r3, #4]
  return 0;
 8005fae:	2300      	movs	r3, #0
}
 8005fb0:	0018      	movs	r0, r3
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	b002      	add	sp, #8
 8005fb6:	bd80      	pop	{r7, pc}

08005fb8 <_isatty>:

int _isatty(int file)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b082      	sub	sp, #8
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005fc0:	2301      	movs	r3, #1
}
 8005fc2:	0018      	movs	r0, r3
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	b002      	add	sp, #8
 8005fc8:	bd80      	pop	{r7, pc}

08005fca <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005fca:	b580      	push	{r7, lr}
 8005fcc:	b084      	sub	sp, #16
 8005fce:	af00      	add	r7, sp, #0
 8005fd0:	60f8      	str	r0, [r7, #12]
 8005fd2:	60b9      	str	r1, [r7, #8]
 8005fd4:	607a      	str	r2, [r7, #4]
>>>>>>> main
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
<<<<<<< HEAD
 8005c1a:	2300      	movs	r3, #0
}
 8005c1c:	0018      	movs	r0, r3
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	b004      	add	sp, #16
 8005c22:	bd80      	pop	{r7, pc}

08005c24 <_sbrk>:
=======
 8005fd6:	2300      	movs	r3, #0
}
 8005fd8:	0018      	movs	r0, r3
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	b004      	add	sp, #16
 8005fde:	bd80      	pop	{r7, pc}

08005fe0 <_sbrk>:
>>>>>>> main
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
<<<<<<< HEAD
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b086      	sub	sp, #24
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
=======
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b086      	sub	sp, #24
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
>>>>>>> main
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
<<<<<<< HEAD
 8005c2c:	4a14      	ldr	r2, [pc, #80]	@ (8005c80 <_sbrk+0x5c>)
 8005c2e:	4b15      	ldr	r3, [pc, #84]	@ (8005c84 <_sbrk+0x60>)
 8005c30:	1ad3      	subs	r3, r2, r3
 8005c32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	613b      	str	r3, [r7, #16]
=======
 8005fe8:	4a14      	ldr	r2, [pc, #80]	@ (800603c <_sbrk+0x5c>)
 8005fea:	4b15      	ldr	r3, [pc, #84]	@ (8006040 <_sbrk+0x60>)
 8005fec:	1ad3      	subs	r3, r2, r3
 8005fee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005ff0:	697b      	ldr	r3, [r7, #20]
 8005ff2:	613b      	str	r3, [r7, #16]
>>>>>>> main
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
<<<<<<< HEAD
 8005c38:	4b13      	ldr	r3, [pc, #76]	@ (8005c88 <_sbrk+0x64>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d102      	bne.n	8005c46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005c40:	4b11      	ldr	r3, [pc, #68]	@ (8005c88 <_sbrk+0x64>)
 8005c42:	4a12      	ldr	r2, [pc, #72]	@ (8005c8c <_sbrk+0x68>)
 8005c44:	601a      	str	r2, [r3, #0]
=======
 8005ff4:	4b13      	ldr	r3, [pc, #76]	@ (8006044 <_sbrk+0x64>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d102      	bne.n	8006002 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005ffc:	4b11      	ldr	r3, [pc, #68]	@ (8006044 <_sbrk+0x64>)
 8005ffe:	4a12      	ldr	r2, [pc, #72]	@ (8006048 <_sbrk+0x68>)
 8006000:	601a      	str	r2, [r3, #0]
>>>>>>> main
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
<<<<<<< HEAD
 8005c46:	4b10      	ldr	r3, [pc, #64]	@ (8005c88 <_sbrk+0x64>)
 8005c48:	681a      	ldr	r2, [r3, #0]
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	18d3      	adds	r3, r2, r3
 8005c4e:	693a      	ldr	r2, [r7, #16]
 8005c50:	429a      	cmp	r2, r3
 8005c52:	d207      	bcs.n	8005c64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005c54:	f007 fdc0 	bl	800d7d8 <__errno>
 8005c58:	0003      	movs	r3, r0
 8005c5a:	220c      	movs	r2, #12
 8005c5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005c5e:	2301      	movs	r3, #1
 8005c60:	425b      	negs	r3, r3
 8005c62:	e009      	b.n	8005c78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005c64:	4b08      	ldr	r3, [pc, #32]	@ (8005c88 <_sbrk+0x64>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005c6a:	4b07      	ldr	r3, [pc, #28]	@ (8005c88 <_sbrk+0x64>)
 8005c6c:	681a      	ldr	r2, [r3, #0]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	18d2      	adds	r2, r2, r3
 8005c72:	4b05      	ldr	r3, [pc, #20]	@ (8005c88 <_sbrk+0x64>)
 8005c74:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8005c76:	68fb      	ldr	r3, [r7, #12]
}
 8005c78:	0018      	movs	r0, r3
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	b006      	add	sp, #24
 8005c7e:	bd80      	pop	{r7, pc}
 8005c80:	20005000 	.word	0x20005000
 8005c84:	00000400 	.word	0x00000400
 8005c88:	2000091c 	.word	0x2000091c
 8005c8c:	200018b8 	.word	0x200018b8

08005c90 <SystemInit>:
=======
 8006002:	4b10      	ldr	r3, [pc, #64]	@ (8006044 <_sbrk+0x64>)
 8006004:	681a      	ldr	r2, [r3, #0]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	18d3      	adds	r3, r2, r3
 800600a:	693a      	ldr	r2, [r7, #16]
 800600c:	429a      	cmp	r2, r3
 800600e:	d207      	bcs.n	8006020 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006010:	f007 fd2e 	bl	800da70 <__errno>
 8006014:	0003      	movs	r3, r0
 8006016:	220c      	movs	r2, #12
 8006018:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800601a:	2301      	movs	r3, #1
 800601c:	425b      	negs	r3, r3
 800601e:	e009      	b.n	8006034 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006020:	4b08      	ldr	r3, [pc, #32]	@ (8006044 <_sbrk+0x64>)
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006026:	4b07      	ldr	r3, [pc, #28]	@ (8006044 <_sbrk+0x64>)
 8006028:	681a      	ldr	r2, [r3, #0]
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	18d2      	adds	r2, r2, r3
 800602e:	4b05      	ldr	r3, [pc, #20]	@ (8006044 <_sbrk+0x64>)
 8006030:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8006032:	68fb      	ldr	r3, [r7, #12]
}
 8006034:	0018      	movs	r0, r3
 8006036:	46bd      	mov	sp, r7
 8006038:	b006      	add	sp, #24
 800603a:	bd80      	pop	{r7, pc}
 800603c:	20005000 	.word	0x20005000
 8006040:	00000400 	.word	0x00000400
 8006044:	20000d34 	.word	0x20000d34
 8006048:	20001c18 	.word	0x20001c18

0800604c <SystemInit>:
>>>>>>> main
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
<<<<<<< HEAD
 8005c90:	b580      	push	{r7, lr}
 8005c92:	af00      	add	r7, sp, #0
=======
 800604c:	b580      	push	{r7, lr}
 800604e:	af00      	add	r7, sp, #0
>>>>>>> main
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
<<<<<<< HEAD
 8005c94:	46c0      	nop			@ (mov r8, r8)
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}
	...

08005c9c <MX_TIM2_Init>:
=======
 8006050:	46c0      	nop			@ (mov r8, r8)
 8006052:	46bd      	mov	sp, r7
 8006054:	bd80      	pop	{r7, pc}
	...

08006058 <MX_TIM2_Init>:
>>>>>>> main
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
<<<<<<< HEAD
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b086      	sub	sp, #24
 8005ca0:	af00      	add	r7, sp, #0
=======
 8006058:	b580      	push	{r7, lr}
 800605a:	b086      	sub	sp, #24
 800605c:	af00      	add	r7, sp, #0
>>>>>>> main

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
<<<<<<< HEAD
 8005ca2:	2310      	movs	r3, #16
 8005ca4:	18fb      	adds	r3, r7, r3
 8005ca6:	0018      	movs	r0, r3
 8005ca8:	2308      	movs	r3, #8
 8005caa:	001a      	movs	r2, r3
 8005cac:	2100      	movs	r1, #0
 8005cae:	f007 fd39 	bl	800d724 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005cb2:	003b      	movs	r3, r7
 8005cb4:	0018      	movs	r0, r3
 8005cb6:	2310      	movs	r3, #16
 8005cb8:	001a      	movs	r2, r3
 8005cba:	2100      	movs	r1, #0
 8005cbc:	f007 fd32 	bl	800d724 <memset>
=======
 800605e:	2310      	movs	r3, #16
 8006060:	18fb      	adds	r3, r7, r3
 8006062:	0018      	movs	r0, r3
 8006064:	2308      	movs	r3, #8
 8006066:	001a      	movs	r2, r3
 8006068:	2100      	movs	r1, #0
 800606a:	f007 fca7 	bl	800d9bc <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800606e:	003b      	movs	r3, r7
 8006070:	0018      	movs	r0, r3
 8006072:	2310      	movs	r3, #16
 8006074:	001a      	movs	r2, r3
 8006076:	2100      	movs	r1, #0
 8006078:	f007 fca0 	bl	800d9bc <memset>
>>>>>>> main

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
<<<<<<< HEAD
 8005cc0:	4b2e      	ldr	r3, [pc, #184]	@ (8005d7c <MX_TIM2_Init+0xe0>)
 8005cc2:	2280      	movs	r2, #128	@ 0x80
 8005cc4:	05d2      	lsls	r2, r2, #23
 8005cc6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8005cc8:	4b2c      	ldr	r3, [pc, #176]	@ (8005d7c <MX_TIM2_Init+0xe0>)
 8005cca:	2200      	movs	r2, #0
 8005ccc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005cce:	4b2b      	ldr	r3, [pc, #172]	@ (8005d7c <MX_TIM2_Init+0xe0>)
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8005cd4:	4b29      	ldr	r3, [pc, #164]	@ (8005d7c <MX_TIM2_Init+0xe0>)
 8005cd6:	4a2a      	ldr	r2, [pc, #168]	@ (8005d80 <MX_TIM2_Init+0xe4>)
 8005cd8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005cda:	4b28      	ldr	r3, [pc, #160]	@ (8005d7c <MX_TIM2_Init+0xe0>)
 8005cdc:	2200      	movs	r2, #0
 8005cde:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005ce0:	4b26      	ldr	r3, [pc, #152]	@ (8005d7c <MX_TIM2_Init+0xe0>)
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8005ce6:	4b25      	ldr	r3, [pc, #148]	@ (8005d7c <MX_TIM2_Init+0xe0>)
 8005ce8:	0018      	movs	r0, r3
 8005cea:	f005 f9dd 	bl	800b0a8 <HAL_TIM_PWM_Init>
 8005cee:	1e03      	subs	r3, r0, #0
 8005cf0:	d001      	beq.n	8005cf6 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8005cf2:	f7fe f921 	bl	8003f38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005cf6:	2110      	movs	r1, #16
 8005cf8:	187b      	adds	r3, r7, r1
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005cfe:	187b      	adds	r3, r7, r1
 8005d00:	2200      	movs	r2, #0
 8005d02:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005d04:	187a      	adds	r2, r7, r1
 8005d06:	4b1d      	ldr	r3, [pc, #116]	@ (8005d7c <MX_TIM2_Init+0xe0>)
 8005d08:	0011      	movs	r1, r2
 8005d0a:	0018      	movs	r0, r3
 8005d0c:	f005 fcea 	bl	800b6e4 <HAL_TIMEx_MasterConfigSynchronization>
 8005d10:	1e03      	subs	r3, r0, #0
 8005d12:	d001      	beq.n	8005d18 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8005d14:	f7fe f910 	bl	8003f38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005d18:	003b      	movs	r3, r7
 8005d1a:	2260      	movs	r2, #96	@ 0x60
 8005d1c:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8005d1e:	003b      	movs	r3, r7
 8005d20:	2200      	movs	r2, #0
 8005d22:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005d24:	003b      	movs	r3, r7
 8005d26:	2200      	movs	r2, #0
 8005d28:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005d2a:	003b      	movs	r3, r7
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005d30:	0039      	movs	r1, r7
 8005d32:	4b12      	ldr	r3, [pc, #72]	@ (8005d7c <MX_TIM2_Init+0xe0>)
 8005d34:	2200      	movs	r2, #0
 8005d36:	0018      	movs	r0, r3
 8005d38:	f005 fa88 	bl	800b24c <HAL_TIM_PWM_ConfigChannel>
 8005d3c:	1e03      	subs	r3, r0, #0
 8005d3e:	d001      	beq.n	8005d44 <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 8005d40:	f7fe f8fa 	bl	8003f38 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005d44:	0039      	movs	r1, r7
 8005d46:	4b0d      	ldr	r3, [pc, #52]	@ (8005d7c <MX_TIM2_Init+0xe0>)
 8005d48:	2208      	movs	r2, #8
 8005d4a:	0018      	movs	r0, r3
 8005d4c:	f005 fa7e 	bl	800b24c <HAL_TIM_PWM_ConfigChannel>
 8005d50:	1e03      	subs	r3, r0, #0
 8005d52:	d001      	beq.n	8005d58 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8005d54:	f7fe f8f0 	bl	8003f38 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8005d58:	0039      	movs	r1, r7
 8005d5a:	4b08      	ldr	r3, [pc, #32]	@ (8005d7c <MX_TIM2_Init+0xe0>)
 8005d5c:	220c      	movs	r2, #12
 8005d5e:	0018      	movs	r0, r3
 8005d60:	f005 fa74 	bl	800b24c <HAL_TIM_PWM_ConfigChannel>
 8005d64:	1e03      	subs	r3, r0, #0
 8005d66:	d001      	beq.n	8005d6c <MX_TIM2_Init+0xd0>
  {
    Error_Handler();
 8005d68:	f7fe f8e6 	bl	8003f38 <Error_Handler>
=======
 800607c:	4b34      	ldr	r3, [pc, #208]	@ (8006150 <MX_TIM2_Init+0xf8>)
 800607e:	2280      	movs	r2, #128	@ 0x80
 8006080:	05d2      	lsls	r2, r2, #23
 8006082:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8006084:	4b32      	ldr	r3, [pc, #200]	@ (8006150 <MX_TIM2_Init+0xf8>)
 8006086:	2200      	movs	r2, #0
 8006088:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800608a:	4b31      	ldr	r3, [pc, #196]	@ (8006150 <MX_TIM2_Init+0xf8>)
 800608c:	2200      	movs	r2, #0
 800608e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8006090:	4b2f      	ldr	r3, [pc, #188]	@ (8006150 <MX_TIM2_Init+0xf8>)
 8006092:	4a30      	ldr	r2, [pc, #192]	@ (8006154 <MX_TIM2_Init+0xfc>)
 8006094:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006096:	4b2e      	ldr	r3, [pc, #184]	@ (8006150 <MX_TIM2_Init+0xf8>)
 8006098:	2200      	movs	r2, #0
 800609a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800609c:	4b2c      	ldr	r3, [pc, #176]	@ (8006150 <MX_TIM2_Init+0xf8>)
 800609e:	2200      	movs	r2, #0
 80060a0:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80060a2:	4b2b      	ldr	r3, [pc, #172]	@ (8006150 <MX_TIM2_Init+0xf8>)
 80060a4:	0018      	movs	r0, r3
 80060a6:	f005 f9a9 	bl	800b3fc <HAL_TIM_PWM_Init>
 80060aa:	1e03      	subs	r3, r0, #0
 80060ac:	d001      	beq.n	80060b2 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80060ae:	f7fd ff6b 	bl	8003f88 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 80060b2:	4b27      	ldr	r3, [pc, #156]	@ (8006150 <MX_TIM2_Init+0xf8>)
 80060b4:	0018      	movs	r0, r3
 80060b6:	f005 f959 	bl	800b36c <HAL_TIM_OC_Init>
 80060ba:	1e03      	subs	r3, r0, #0
 80060bc:	d001      	beq.n	80060c2 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80060be:	f7fd ff63 	bl	8003f88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80060c2:	2110      	movs	r1, #16
 80060c4:	187b      	adds	r3, r7, r1
 80060c6:	2200      	movs	r2, #0
 80060c8:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80060ca:	187b      	adds	r3, r7, r1
 80060cc:	2200      	movs	r2, #0
 80060ce:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80060d0:	187a      	adds	r2, r7, r1
 80060d2:	4b1f      	ldr	r3, [pc, #124]	@ (8006150 <MX_TIM2_Init+0xf8>)
 80060d4:	0011      	movs	r1, r2
 80060d6:	0018      	movs	r0, r3
 80060d8:	f005 fc50 	bl	800b97c <HAL_TIMEx_MasterConfigSynchronization>
 80060dc:	1e03      	subs	r3, r0, #0
 80060de:	d001      	beq.n	80060e4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80060e0:	f7fd ff52 	bl	8003f88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80060e4:	003b      	movs	r3, r7
 80060e6:	2260      	movs	r2, #96	@ 0x60
 80060e8:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80060ea:	003b      	movs	r3, r7
 80060ec:	2200      	movs	r2, #0
 80060ee:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80060f0:	003b      	movs	r3, r7
 80060f2:	2200      	movs	r2, #0
 80060f4:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80060f6:	003b      	movs	r3, r7
 80060f8:	2200      	movs	r2, #0
 80060fa:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80060fc:	0039      	movs	r1, r7
 80060fe:	4b14      	ldr	r3, [pc, #80]	@ (8006150 <MX_TIM2_Init+0xf8>)
 8006100:	2200      	movs	r2, #0
 8006102:	0018      	movs	r0, r3
 8006104:	f005 fa12 	bl	800b52c <HAL_TIM_PWM_ConfigChannel>
 8006108:	1e03      	subs	r3, r0, #0
 800610a:	d001      	beq.n	8006110 <MX_TIM2_Init+0xb8>
  {
    Error_Handler();
 800610c:	f7fd ff3c 	bl	8003f88 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8006110:	0039      	movs	r1, r7
 8006112:	4b0f      	ldr	r3, [pc, #60]	@ (8006150 <MX_TIM2_Init+0xf8>)
 8006114:	2208      	movs	r2, #8
 8006116:	0018      	movs	r0, r3
 8006118:	f005 fa08 	bl	800b52c <HAL_TIM_PWM_ConfigChannel>
 800611c:	1e03      	subs	r3, r0, #0
 800611e:	d001      	beq.n	8006124 <MX_TIM2_Init+0xcc>
  {
    Error_Handler();
 8006120:	f7fd ff32 	bl	8003f88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8006124:	003b      	movs	r3, r7
 8006126:	2200      	movs	r2, #0
 8006128:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800612a:	0039      	movs	r1, r7
 800612c:	4b08      	ldr	r3, [pc, #32]	@ (8006150 <MX_TIM2_Init+0xf8>)
 800612e:	220c      	movs	r2, #12
 8006130:	0018      	movs	r0, r3
 8006132:	f005 f9a3 	bl	800b47c <HAL_TIM_OC_ConfigChannel>
 8006136:	1e03      	subs	r3, r0, #0
 8006138:	d001      	beq.n	800613e <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 800613a:	f7fd ff25 	bl	8003f88 <Error_Handler>
>>>>>>> main
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
<<<<<<< HEAD
 8005d6c:	4b03      	ldr	r3, [pc, #12]	@ (8005d7c <MX_TIM2_Init+0xe0>)
 8005d6e:	0018      	movs	r0, r3
 8005d70:	f000 f8aa 	bl	8005ec8 <HAL_TIM_MspPostInit>

}
 8005d74:	46c0      	nop			@ (mov r8, r8)
 8005d76:	46bd      	mov	sp, r7
 8005d78:	b006      	add	sp, #24
 8005d7a:	bd80      	pop	{r7, pc}
 8005d7c:	20000920 	.word	0x20000920
 8005d80:	0000ffff 	.word	0x0000ffff

08005d84 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b086      	sub	sp, #24
 8005d88:	af00      	add	r7, sp, #0
=======
 800613e:	4b04      	ldr	r3, [pc, #16]	@ (8006150 <MX_TIM2_Init+0xf8>)
 8006140:	0018      	movs	r0, r3
 8006142:	f000 f8ab 	bl	800629c <HAL_TIM_MspPostInit>

}
 8006146:	46c0      	nop			@ (mov r8, r8)
 8006148:	46bd      	mov	sp, r7
 800614a:	b006      	add	sp, #24
 800614c:	bd80      	pop	{r7, pc}
 800614e:	46c0      	nop			@ (mov r8, r8)
 8006150:	20000d38 	.word	0x20000d38
 8006154:	0000ffff 	.word	0x0000ffff

08006158 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b086      	sub	sp, #24
 800615c:	af00      	add	r7, sp, #0
>>>>>>> main

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
<<<<<<< HEAD
 8005d8a:	2310      	movs	r3, #16
 8005d8c:	18fb      	adds	r3, r7, r3
 8005d8e:	0018      	movs	r0, r3
 8005d90:	2308      	movs	r3, #8
 8005d92:	001a      	movs	r2, r3
 8005d94:	2100      	movs	r1, #0
 8005d96:	f007 fcc5 	bl	800d724 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005d9a:	003b      	movs	r3, r7
 8005d9c:	0018      	movs	r0, r3
 8005d9e:	2310      	movs	r3, #16
 8005da0:	001a      	movs	r2, r3
 8005da2:	2100      	movs	r1, #0
 8005da4:	f007 fcbe 	bl	800d724 <memset>
=======
 800615e:	2310      	movs	r3, #16
 8006160:	18fb      	adds	r3, r7, r3
 8006162:	0018      	movs	r0, r3
 8006164:	2308      	movs	r3, #8
 8006166:	001a      	movs	r2, r3
 8006168:	2100      	movs	r1, #0
 800616a:	f007 fc27 	bl	800d9bc <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800616e:	003b      	movs	r3, r7
 8006170:	0018      	movs	r0, r3
 8006172:	2310      	movs	r3, #16
 8006174:	001a      	movs	r2, r3
 8006176:	2100      	movs	r1, #0
 8006178:	f007 fc20 	bl	800d9bc <memset>
>>>>>>> main

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
<<<<<<< HEAD
 8005da8:	4b32      	ldr	r3, [pc, #200]	@ (8005e74 <MX_TIM3_Init+0xf0>)
 8005daa:	4a33      	ldr	r2, [pc, #204]	@ (8005e78 <MX_TIM3_Init+0xf4>)
 8005dac:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8005dae:	4b31      	ldr	r3, [pc, #196]	@ (8005e74 <MX_TIM3_Init+0xf0>)
 8005db0:	2200      	movs	r2, #0
 8005db2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005db4:	4b2f      	ldr	r3, [pc, #188]	@ (8005e74 <MX_TIM3_Init+0xf0>)
 8005db6:	2200      	movs	r2, #0
 8005db8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8005dba:	4b2e      	ldr	r3, [pc, #184]	@ (8005e74 <MX_TIM3_Init+0xf0>)
 8005dbc:	4a2f      	ldr	r2, [pc, #188]	@ (8005e7c <MX_TIM3_Init+0xf8>)
 8005dbe:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005dc0:	4b2c      	ldr	r3, [pc, #176]	@ (8005e74 <MX_TIM3_Init+0xf0>)
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005dc6:	4b2b      	ldr	r3, [pc, #172]	@ (8005e74 <MX_TIM3_Init+0xf0>)
 8005dc8:	2200      	movs	r2, #0
 8005dca:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8005dcc:	4b29      	ldr	r3, [pc, #164]	@ (8005e74 <MX_TIM3_Init+0xf0>)
 8005dce:	0018      	movs	r0, r3
 8005dd0:	f005 f96a 	bl	800b0a8 <HAL_TIM_PWM_Init>
 8005dd4:	1e03      	subs	r3, r0, #0
 8005dd6:	d001      	beq.n	8005ddc <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8005dd8:	f7fe f8ae 	bl	8003f38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005ddc:	2110      	movs	r1, #16
 8005dde:	187b      	adds	r3, r7, r1
 8005de0:	2200      	movs	r2, #0
 8005de2:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005de4:	187b      	adds	r3, r7, r1
 8005de6:	2200      	movs	r2, #0
 8005de8:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005dea:	187a      	adds	r2, r7, r1
 8005dec:	4b21      	ldr	r3, [pc, #132]	@ (8005e74 <MX_TIM3_Init+0xf0>)
 8005dee:	0011      	movs	r1, r2
 8005df0:	0018      	movs	r0, r3
 8005df2:	f005 fc77 	bl	800b6e4 <HAL_TIMEx_MasterConfigSynchronization>
 8005df6:	1e03      	subs	r3, r0, #0
 8005df8:	d001      	beq.n	8005dfe <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8005dfa:	f7fe f89d 	bl	8003f38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005dfe:	003b      	movs	r3, r7
 8005e00:	2260      	movs	r2, #96	@ 0x60
 8005e02:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8005e04:	003b      	movs	r3, r7
 8005e06:	2200      	movs	r2, #0
 8005e08:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005e0a:	003b      	movs	r3, r7
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005e10:	003b      	movs	r3, r7
 8005e12:	2200      	movs	r2, #0
 8005e14:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005e16:	0039      	movs	r1, r7
 8005e18:	4b16      	ldr	r3, [pc, #88]	@ (8005e74 <MX_TIM3_Init+0xf0>)
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	0018      	movs	r0, r3
 8005e1e:	f005 fa15 	bl	800b24c <HAL_TIM_PWM_ConfigChannel>
 8005e22:	1e03      	subs	r3, r0, #0
 8005e24:	d001      	beq.n	8005e2a <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 8005e26:	f7fe f887 	bl	8003f38 <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim3, TIM3_TI1_GPIO) != HAL_OK)
 8005e2a:	4b12      	ldr	r3, [pc, #72]	@ (8005e74 <MX_TIM3_Init+0xf0>)
 8005e2c:	2104      	movs	r1, #4
 8005e2e:	0018      	movs	r0, r3
 8005e30:	f005 fcb6 	bl	800b7a0 <HAL_TIMEx_RemapConfig>
 8005e34:	1e03      	subs	r3, r0, #0
 8005e36:	d001      	beq.n	8005e3c <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8005e38:	f7fe f87e 	bl	8003f38 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005e3c:	0039      	movs	r1, r7
 8005e3e:	4b0d      	ldr	r3, [pc, #52]	@ (8005e74 <MX_TIM3_Init+0xf0>)
 8005e40:	2204      	movs	r2, #4
 8005e42:	0018      	movs	r0, r3
 8005e44:	f005 fa02 	bl	800b24c <HAL_TIM_PWM_ConfigChannel>
 8005e48:	1e03      	subs	r3, r0, #0
 8005e4a:	d001      	beq.n	8005e50 <MX_TIM3_Init+0xcc>
  {
    Error_Handler();
 8005e4c:	f7fe f874 	bl	8003f38 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005e50:	0039      	movs	r1, r7
 8005e52:	4b08      	ldr	r3, [pc, #32]	@ (8005e74 <MX_TIM3_Init+0xf0>)
 8005e54:	2208      	movs	r2, #8
 8005e56:	0018      	movs	r0, r3
 8005e58:	f005 f9f8 	bl	800b24c <HAL_TIM_PWM_ConfigChannel>
 8005e5c:	1e03      	subs	r3, r0, #0
 8005e5e:	d001      	beq.n	8005e64 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 8005e60:	f7fe f86a 	bl	8003f38 <Error_Handler>
=======
 800617c:	4b32      	ldr	r3, [pc, #200]	@ (8006248 <MX_TIM3_Init+0xf0>)
 800617e:	4a33      	ldr	r2, [pc, #204]	@ (800624c <MX_TIM3_Init+0xf4>)
 8006180:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8006182:	4b31      	ldr	r3, [pc, #196]	@ (8006248 <MX_TIM3_Init+0xf0>)
 8006184:	2200      	movs	r2, #0
 8006186:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006188:	4b2f      	ldr	r3, [pc, #188]	@ (8006248 <MX_TIM3_Init+0xf0>)
 800618a:	2200      	movs	r2, #0
 800618c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800618e:	4b2e      	ldr	r3, [pc, #184]	@ (8006248 <MX_TIM3_Init+0xf0>)
 8006190:	4a2f      	ldr	r2, [pc, #188]	@ (8006250 <MX_TIM3_Init+0xf8>)
 8006192:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006194:	4b2c      	ldr	r3, [pc, #176]	@ (8006248 <MX_TIM3_Init+0xf0>)
 8006196:	2200      	movs	r2, #0
 8006198:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800619a:	4b2b      	ldr	r3, [pc, #172]	@ (8006248 <MX_TIM3_Init+0xf0>)
 800619c:	2200      	movs	r2, #0
 800619e:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80061a0:	4b29      	ldr	r3, [pc, #164]	@ (8006248 <MX_TIM3_Init+0xf0>)
 80061a2:	0018      	movs	r0, r3
 80061a4:	f005 f92a 	bl	800b3fc <HAL_TIM_PWM_Init>
 80061a8:	1e03      	subs	r3, r0, #0
 80061aa:	d001      	beq.n	80061b0 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80061ac:	f7fd feec 	bl	8003f88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80061b0:	2110      	movs	r1, #16
 80061b2:	187b      	adds	r3, r7, r1
 80061b4:	2200      	movs	r2, #0
 80061b6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80061b8:	187b      	adds	r3, r7, r1
 80061ba:	2200      	movs	r2, #0
 80061bc:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80061be:	187a      	adds	r2, r7, r1
 80061c0:	4b21      	ldr	r3, [pc, #132]	@ (8006248 <MX_TIM3_Init+0xf0>)
 80061c2:	0011      	movs	r1, r2
 80061c4:	0018      	movs	r0, r3
 80061c6:	f005 fbd9 	bl	800b97c <HAL_TIMEx_MasterConfigSynchronization>
 80061ca:	1e03      	subs	r3, r0, #0
 80061cc:	d001      	beq.n	80061d2 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 80061ce:	f7fd fedb 	bl	8003f88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80061d2:	003b      	movs	r3, r7
 80061d4:	2260      	movs	r2, #96	@ 0x60
 80061d6:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80061d8:	003b      	movs	r3, r7
 80061da:	2200      	movs	r2, #0
 80061dc:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80061de:	003b      	movs	r3, r7
 80061e0:	2200      	movs	r2, #0
 80061e2:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80061e4:	003b      	movs	r3, r7
 80061e6:	2200      	movs	r2, #0
 80061e8:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80061ea:	0039      	movs	r1, r7
 80061ec:	4b16      	ldr	r3, [pc, #88]	@ (8006248 <MX_TIM3_Init+0xf0>)
 80061ee:	2200      	movs	r2, #0
 80061f0:	0018      	movs	r0, r3
 80061f2:	f005 f99b 	bl	800b52c <HAL_TIM_PWM_ConfigChannel>
 80061f6:	1e03      	subs	r3, r0, #0
 80061f8:	d001      	beq.n	80061fe <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 80061fa:	f7fd fec5 	bl	8003f88 <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim3, TIM3_TI1_GPIO) != HAL_OK)
 80061fe:	4b12      	ldr	r3, [pc, #72]	@ (8006248 <MX_TIM3_Init+0xf0>)
 8006200:	2104      	movs	r1, #4
 8006202:	0018      	movs	r0, r3
 8006204:	f005 fc18 	bl	800ba38 <HAL_TIMEx_RemapConfig>
 8006208:	1e03      	subs	r3, r0, #0
 800620a:	d001      	beq.n	8006210 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 800620c:	f7fd febc 	bl	8003f88 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8006210:	0039      	movs	r1, r7
 8006212:	4b0d      	ldr	r3, [pc, #52]	@ (8006248 <MX_TIM3_Init+0xf0>)
 8006214:	2204      	movs	r2, #4
 8006216:	0018      	movs	r0, r3
 8006218:	f005 f988 	bl	800b52c <HAL_TIM_PWM_ConfigChannel>
 800621c:	1e03      	subs	r3, r0, #0
 800621e:	d001      	beq.n	8006224 <MX_TIM3_Init+0xcc>
  {
    Error_Handler();
 8006220:	f7fd feb2 	bl	8003f88 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8006224:	0039      	movs	r1, r7
 8006226:	4b08      	ldr	r3, [pc, #32]	@ (8006248 <MX_TIM3_Init+0xf0>)
 8006228:	2208      	movs	r2, #8
 800622a:	0018      	movs	r0, r3
 800622c:	f005 f97e 	bl	800b52c <HAL_TIM_PWM_ConfigChannel>
 8006230:	1e03      	subs	r3, r0, #0
 8006232:	d001      	beq.n	8006238 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 8006234:	f7fd fea8 	bl	8003f88 <Error_Handler>
>>>>>>> main
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
<<<<<<< HEAD
 8005e64:	4b03      	ldr	r3, [pc, #12]	@ (8005e74 <MX_TIM3_Init+0xf0>)
 8005e66:	0018      	movs	r0, r3
 8005e68:	f000 f82e 	bl	8005ec8 <HAL_TIM_MspPostInit>

}
 8005e6c:	46c0      	nop			@ (mov r8, r8)
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	b006      	add	sp, #24
 8005e72:	bd80      	pop	{r7, pc}
 8005e74:	20000960 	.word	0x20000960
 8005e78:	40000400 	.word	0x40000400
 8005e7c:	0000ffff 	.word	0x0000ffff

08005e80 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b082      	sub	sp, #8
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681a      	ldr	r2, [r3, #0]
 8005e8c:	2380      	movs	r3, #128	@ 0x80
 8005e8e:	05db      	lsls	r3, r3, #23
 8005e90:	429a      	cmp	r2, r3
 8005e92:	d106      	bne.n	8005ea2 <HAL_TIM_PWM_MspInit+0x22>
=======
 8006238:	4b03      	ldr	r3, [pc, #12]	@ (8006248 <MX_TIM3_Init+0xf0>)
 800623a:	0018      	movs	r0, r3
 800623c:	f000 f82e 	bl	800629c <HAL_TIM_MspPostInit>

}
 8006240:	46c0      	nop			@ (mov r8, r8)
 8006242:	46bd      	mov	sp, r7
 8006244:	b006      	add	sp, #24
 8006246:	bd80      	pop	{r7, pc}
 8006248:	20000d78 	.word	0x20000d78
 800624c:	40000400 	.word	0x40000400
 8006250:	0000ffff 	.word	0x0000ffff

08006254 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b082      	sub	sp, #8
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681a      	ldr	r2, [r3, #0]
 8006260:	2380      	movs	r3, #128	@ 0x80
 8006262:	05db      	lsls	r3, r3, #23
 8006264:	429a      	cmp	r2, r3
 8006266:	d106      	bne.n	8006276 <HAL_TIM_PWM_MspInit+0x22>
>>>>>>> main
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
<<<<<<< HEAD
 8005e94:	4b0a      	ldr	r3, [pc, #40]	@ (8005ec0 <HAL_TIM_PWM_MspInit+0x40>)
 8005e96:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005e98:	4b09      	ldr	r3, [pc, #36]	@ (8005ec0 <HAL_TIM_PWM_MspInit+0x40>)
 8005e9a:	2101      	movs	r1, #1
 8005e9c:	430a      	orrs	r2, r1
 8005e9e:	639a      	str	r2, [r3, #56]	@ 0x38
=======
 8006268:	4b0a      	ldr	r3, [pc, #40]	@ (8006294 <HAL_TIM_PWM_MspInit+0x40>)
 800626a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800626c:	4b09      	ldr	r3, [pc, #36]	@ (8006294 <HAL_TIM_PWM_MspInit+0x40>)
 800626e:	2101      	movs	r1, #1
 8006270:	430a      	orrs	r2, r1
 8006272:	639a      	str	r2, [r3, #56]	@ 0x38
>>>>>>> main
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
<<<<<<< HEAD
 8005ea0:	e00a      	b.n	8005eb8 <HAL_TIM_PWM_MspInit+0x38>
  else if(tim_pwmHandle->Instance==TIM3)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4a07      	ldr	r2, [pc, #28]	@ (8005ec4 <HAL_TIM_PWM_MspInit+0x44>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d105      	bne.n	8005eb8 <HAL_TIM_PWM_MspInit+0x38>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005eac:	4b04      	ldr	r3, [pc, #16]	@ (8005ec0 <HAL_TIM_PWM_MspInit+0x40>)
 8005eae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005eb0:	4b03      	ldr	r3, [pc, #12]	@ (8005ec0 <HAL_TIM_PWM_MspInit+0x40>)
 8005eb2:	2102      	movs	r1, #2
 8005eb4:	430a      	orrs	r2, r1
 8005eb6:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8005eb8:	46c0      	nop			@ (mov r8, r8)
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	b002      	add	sp, #8
 8005ebe:	bd80      	pop	{r7, pc}
 8005ec0:	40021000 	.word	0x40021000
 8005ec4:	40000400 	.word	0x40000400

08005ec8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8005ec8:	b590      	push	{r4, r7, lr}
 8005eca:	b08b      	sub	sp, #44	@ 0x2c
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ed0:	2414      	movs	r4, #20
 8005ed2:	193b      	adds	r3, r7, r4
 8005ed4:	0018      	movs	r0, r3
 8005ed6:	2314      	movs	r3, #20
 8005ed8:	001a      	movs	r2, r3
 8005eda:	2100      	movs	r1, #0
 8005edc:	f007 fc22 	bl	800d724 <memset>
  if(timHandle->Instance==TIM2)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681a      	ldr	r2, [r3, #0]
 8005ee4:	2380      	movs	r3, #128	@ 0x80
 8005ee6:	05db      	lsls	r3, r3, #23
 8005ee8:	429a      	cmp	r2, r3
 8005eea:	d123      	bne.n	8005f34 <HAL_TIM_MspPostInit+0x6c>
=======
 8006274:	e00a      	b.n	800628c <HAL_TIM_PWM_MspInit+0x38>
  else if(tim_pwmHandle->Instance==TIM3)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4a07      	ldr	r2, [pc, #28]	@ (8006298 <HAL_TIM_PWM_MspInit+0x44>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d105      	bne.n	800628c <HAL_TIM_PWM_MspInit+0x38>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006280:	4b04      	ldr	r3, [pc, #16]	@ (8006294 <HAL_TIM_PWM_MspInit+0x40>)
 8006282:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006284:	4b03      	ldr	r3, [pc, #12]	@ (8006294 <HAL_TIM_PWM_MspInit+0x40>)
 8006286:	2102      	movs	r1, #2
 8006288:	430a      	orrs	r2, r1
 800628a:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800628c:	46c0      	nop			@ (mov r8, r8)
 800628e:	46bd      	mov	sp, r7
 8006290:	b002      	add	sp, #8
 8006292:	bd80      	pop	{r7, pc}
 8006294:	40021000 	.word	0x40021000
 8006298:	40000400 	.word	0x40000400

0800629c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800629c:	b590      	push	{r4, r7, lr}
 800629e:	b08b      	sub	sp, #44	@ 0x2c
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80062a4:	2414      	movs	r4, #20
 80062a6:	193b      	adds	r3, r7, r4
 80062a8:	0018      	movs	r0, r3
 80062aa:	2314      	movs	r3, #20
 80062ac:	001a      	movs	r2, r3
 80062ae:	2100      	movs	r1, #0
 80062b0:	f007 fb84 	bl	800d9bc <memset>
  if(timHandle->Instance==TIM2)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681a      	ldr	r2, [r3, #0]
 80062b8:	2380      	movs	r3, #128	@ 0x80
 80062ba:	05db      	lsls	r3, r3, #23
 80062bc:	429a      	cmp	r2, r3
 80062be:	d123      	bne.n	8006308 <HAL_TIM_MspPostInit+0x6c>
>>>>>>> main
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
<<<<<<< HEAD
 8005eec:	4b27      	ldr	r3, [pc, #156]	@ (8005f8c <HAL_TIM_MspPostInit+0xc4>)
 8005eee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ef0:	4b26      	ldr	r3, [pc, #152]	@ (8005f8c <HAL_TIM_MspPostInit+0xc4>)
 8005ef2:	2101      	movs	r1, #1
 8005ef4:	430a      	orrs	r2, r1
 8005ef6:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005ef8:	4b24      	ldr	r3, [pc, #144]	@ (8005f8c <HAL_TIM_MspPostInit+0xc4>)
 8005efa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005efc:	2201      	movs	r2, #1
 8005efe:	4013      	ands	r3, r2
 8005f00:	613b      	str	r3, [r7, #16]
 8005f02:	693b      	ldr	r3, [r7, #16]
=======
 80062c0:	4b27      	ldr	r3, [pc, #156]	@ (8006360 <HAL_TIM_MspPostInit+0xc4>)
 80062c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062c4:	4b26      	ldr	r3, [pc, #152]	@ (8006360 <HAL_TIM_MspPostInit+0xc4>)
 80062c6:	2101      	movs	r1, #1
 80062c8:	430a      	orrs	r2, r1
 80062ca:	62da      	str	r2, [r3, #44]	@ 0x2c
 80062cc:	4b24      	ldr	r3, [pc, #144]	@ (8006360 <HAL_TIM_MspPostInit+0xc4>)
 80062ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062d0:	2201      	movs	r2, #1
 80062d2:	4013      	ands	r3, r2
 80062d4:	613b      	str	r3, [r7, #16]
 80062d6:	693b      	ldr	r3, [r7, #16]
>>>>>>> main
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = MCU_LED_B_R_Pin|MCU_LED_B_G_Pin|MCU_LED_B_B_Pin;
<<<<<<< HEAD
 8005f04:	0021      	movs	r1, r4
 8005f06:	187b      	adds	r3, r7, r1
 8005f08:	220d      	movs	r2, #13
 8005f0a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f0c:	187b      	adds	r3, r7, r1
 8005f0e:	2202      	movs	r2, #2
 8005f10:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f12:	187b      	adds	r3, r7, r1
 8005f14:	2200      	movs	r2, #0
 8005f16:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005f18:	187b      	adds	r3, r7, r1
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8005f1e:	187b      	adds	r3, r7, r1
 8005f20:	2202      	movs	r2, #2
 8005f22:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005f24:	187a      	adds	r2, r7, r1
 8005f26:	23a0      	movs	r3, #160	@ 0xa0
 8005f28:	05db      	lsls	r3, r3, #23
 8005f2a:	0011      	movs	r1, r2
 8005f2c:	0018      	movs	r0, r3
 8005f2e:	f001 fa61 	bl	80073f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8005f32:	e027      	b.n	8005f84 <HAL_TIM_MspPostInit+0xbc>
  else if(timHandle->Instance==TIM3)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4a15      	ldr	r2, [pc, #84]	@ (8005f90 <HAL_TIM_MspPostInit+0xc8>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d122      	bne.n	8005f84 <HAL_TIM_MspPostInit+0xbc>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005f3e:	4b13      	ldr	r3, [pc, #76]	@ (8005f8c <HAL_TIM_MspPostInit+0xc4>)
 8005f40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f42:	4b12      	ldr	r3, [pc, #72]	@ (8005f8c <HAL_TIM_MspPostInit+0xc4>)
 8005f44:	2104      	movs	r1, #4
 8005f46:	430a      	orrs	r2, r1
 8005f48:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005f4a:	4b10      	ldr	r3, [pc, #64]	@ (8005f8c <HAL_TIM_MspPostInit+0xc4>)
 8005f4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f4e:	2204      	movs	r2, #4
 8005f50:	4013      	ands	r3, r2
 8005f52:	60fb      	str	r3, [r7, #12]
 8005f54:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MCU_LED_A_R_Pin|MCU_LED_A_G_Pin|MCU_LED_A_B_Pin;
 8005f56:	2114      	movs	r1, #20
 8005f58:	187b      	adds	r3, r7, r1
 8005f5a:	22e0      	movs	r2, #224	@ 0xe0
 8005f5c:	0052      	lsls	r2, r2, #1
 8005f5e:	601a      	str	r2, [r3, #0]
=======
 80062d8:	0021      	movs	r1, r4
 80062da:	187b      	adds	r3, r7, r1
 80062dc:	220d      	movs	r2, #13
 80062de:	601a      	str	r2, [r3, #0]
>>>>>>> main
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80062e0:	187b      	adds	r3, r7, r1
 80062e2:	2202      	movs	r2, #2
 80062e4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062e6:	187b      	adds	r3, r7, r1
 80062e8:	2200      	movs	r2, #0
 80062ea:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
<<<<<<< HEAD
 8005f6c:	187b      	adds	r3, r7, r1
 8005f6e:	2200      	movs	r2, #0
 8005f70:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005f72:	187b      	adds	r3, r7, r1
 8005f74:	2202      	movs	r2, #2
 8005f76:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005f78:	187b      	adds	r3, r7, r1
 8005f7a:	4a06      	ldr	r2, [pc, #24]	@ (8005f94 <HAL_TIM_MspPostInit+0xcc>)
 8005f7c:	0019      	movs	r1, r3
 8005f7e:	0010      	movs	r0, r2
 8005f80:	f001 fa38 	bl	80073f4 <HAL_GPIO_Init>
}
 8005f84:	46c0      	nop			@ (mov r8, r8)
 8005f86:	46bd      	mov	sp, r7
 8005f88:	b00b      	add	sp, #44	@ 0x2c
 8005f8a:	bd90      	pop	{r4, r7, pc}
 8005f8c:	40021000 	.word	0x40021000
 8005f90:	40000400 	.word	0x40000400
 8005f94:	50000800 	.word	0x50000800

08005f98 <MX_LPUART1_UART_Init>:
=======
 80062ec:	187b      	adds	r3, r7, r1
 80062ee:	2200      	movs	r2, #0
 80062f0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 80062f2:	187b      	adds	r3, r7, r1
 80062f4:	2202      	movs	r2, #2
 80062f6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80062f8:	187a      	adds	r2, r7, r1
 80062fa:	23a0      	movs	r3, #160	@ 0xa0
 80062fc:	05db      	lsls	r3, r3, #23
 80062fe:	0011      	movs	r1, r2
 8006300:	0018      	movs	r0, r3
 8006302:	f001 f9d9 	bl	80076b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8006306:	e027      	b.n	8006358 <HAL_TIM_MspPostInit+0xbc>
  else if(timHandle->Instance==TIM3)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4a15      	ldr	r2, [pc, #84]	@ (8006364 <HAL_TIM_MspPostInit+0xc8>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d122      	bne.n	8006358 <HAL_TIM_MspPostInit+0xbc>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006312:	4b13      	ldr	r3, [pc, #76]	@ (8006360 <HAL_TIM_MspPostInit+0xc4>)
 8006314:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006316:	4b12      	ldr	r3, [pc, #72]	@ (8006360 <HAL_TIM_MspPostInit+0xc4>)
 8006318:	2104      	movs	r1, #4
 800631a:	430a      	orrs	r2, r1
 800631c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800631e:	4b10      	ldr	r3, [pc, #64]	@ (8006360 <HAL_TIM_MspPostInit+0xc4>)
 8006320:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006322:	2204      	movs	r2, #4
 8006324:	4013      	ands	r3, r2
 8006326:	60fb      	str	r3, [r7, #12]
 8006328:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MCU_LED_A_R_Pin|MCU_LED_A_G_Pin|MCU_LED_A_B_Pin;
 800632a:	2114      	movs	r1, #20
 800632c:	187b      	adds	r3, r7, r1
 800632e:	22e0      	movs	r2, #224	@ 0xe0
 8006330:	0052      	lsls	r2, r2, #1
 8006332:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006334:	187b      	adds	r3, r7, r1
 8006336:	2202      	movs	r2, #2
 8006338:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800633a:	187b      	adds	r3, r7, r1
 800633c:	2200      	movs	r2, #0
 800633e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006340:	187b      	adds	r3, r7, r1
 8006342:	2200      	movs	r2, #0
 8006344:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8006346:	187b      	adds	r3, r7, r1
 8006348:	2202      	movs	r2, #2
 800634a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800634c:	187b      	adds	r3, r7, r1
 800634e:	4a06      	ldr	r2, [pc, #24]	@ (8006368 <HAL_TIM_MspPostInit+0xcc>)
 8006350:	0019      	movs	r1, r3
 8006352:	0010      	movs	r0, r2
 8006354:	f001 f9b0 	bl	80076b8 <HAL_GPIO_Init>
}
 8006358:	46c0      	nop			@ (mov r8, r8)
 800635a:	46bd      	mov	sp, r7
 800635c:	b00b      	add	sp, #44	@ 0x2c
 800635e:	bd90      	pop	{r4, r7, pc}
 8006360:	40021000 	.word	0x40021000
 8006364:	40000400 	.word	0x40000400
 8006368:	50000800 	.word	0x50000800

0800636c <MX_USART1_UART_Init>:
>>>>>>> main
DMA_HandleTypeDef hdma_usart4_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8005f9c:	4b13      	ldr	r3, [pc, #76]	@ (8005fec <MX_LPUART1_UART_Init+0x54>)
 8005f9e:	4a14      	ldr	r2, [pc, #80]	@ (8005ff0 <MX_LPUART1_UART_Init+0x58>)
 8005fa0:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8005fa2:	4b12      	ldr	r3, [pc, #72]	@ (8005fec <MX_LPUART1_UART_Init+0x54>)
 8005fa4:	4a13      	ldr	r2, [pc, #76]	@ (8005ff4 <MX_LPUART1_UART_Init+0x5c>)
 8005fa6:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 8005fa8:	4b10      	ldr	r3, [pc, #64]	@ (8005fec <MX_LPUART1_UART_Init+0x54>)
 8005faa:	2280      	movs	r2, #128	@ 0x80
 8005fac:	0552      	lsls	r2, r2, #21
 8005fae:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8005fb0:	4b0e      	ldr	r3, [pc, #56]	@ (8005fec <MX_LPUART1_UART_Init+0x54>)
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8005fb6:	4b0d      	ldr	r3, [pc, #52]	@ (8005fec <MX_LPUART1_UART_Init+0x54>)
 8005fb8:	2200      	movs	r2, #0
 8005fba:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8005fbc:	4b0b      	ldr	r3, [pc, #44]	@ (8005fec <MX_LPUART1_UART_Init+0x54>)
 8005fbe:	220c      	movs	r2, #12
 8005fc0:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005fc2:	4b0a      	ldr	r3, [pc, #40]	@ (8005fec <MX_LPUART1_UART_Init+0x54>)
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005fc8:	4b08      	ldr	r3, [pc, #32]	@ (8005fec <MX_LPUART1_UART_Init+0x54>)
 8005fca:	2200      	movs	r2, #0
 8005fcc:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005fce:	4b07      	ldr	r3, [pc, #28]	@ (8005fec <MX_LPUART1_UART_Init+0x54>)
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8005fd4:	4b05      	ldr	r3, [pc, #20]	@ (8005fec <MX_LPUART1_UART_Init+0x54>)
 8005fd6:	0018      	movs	r0, r3
 8005fd8:	f005 fc00 	bl	800b7dc <HAL_UART_Init>
 8005fdc:	1e03      	subs	r3, r0, #0
 8005fde:	d001      	beq.n	8005fe4 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8005fe0:	f7fd ffaa 	bl	8003f38 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8005fe4:	46c0      	nop			@ (mov r8, r8)
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	bd80      	pop	{r7, pc}
 8005fea:	46c0      	nop			@ (mov r8, r8)
 8005fec:	200009a0 	.word	0x200009a0
 8005ff0:	40004800 	.word	0x40004800
 8005ff4:	00033324 	.word	0x00033324

08005ff8 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
<<<<<<< HEAD
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	af00      	add	r7, sp, #0
=======
 800636c:	b580      	push	{r7, lr}
 800636e:	af00      	add	r7, sp, #0
>>>>>>> main
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
<<<<<<< HEAD
 8005ffc:	4b16      	ldr	r3, [pc, #88]	@ (8006058 <MX_USART1_UART_Init+0x60>)
 8005ffe:	4a17      	ldr	r2, [pc, #92]	@ (800605c <MX_USART1_UART_Init+0x64>)
 8006000:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8006002:	4b15      	ldr	r3, [pc, #84]	@ (8006058 <MX_USART1_UART_Init+0x60>)
 8006004:	22e1      	movs	r2, #225	@ 0xe1
 8006006:	0252      	lsls	r2, r2, #9
 8006008:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800600a:	4b13      	ldr	r3, [pc, #76]	@ (8006058 <MX_USART1_UART_Init+0x60>)
 800600c:	2200      	movs	r2, #0
 800600e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8006010:	4b11      	ldr	r3, [pc, #68]	@ (8006058 <MX_USART1_UART_Init+0x60>)
 8006012:	2200      	movs	r2, #0
 8006014:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8006016:	4b10      	ldr	r3, [pc, #64]	@ (8006058 <MX_USART1_UART_Init+0x60>)
 8006018:	2200      	movs	r2, #0
 800601a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800601c:	4b0e      	ldr	r3, [pc, #56]	@ (8006058 <MX_USART1_UART_Init+0x60>)
 800601e:	220c      	movs	r2, #12
 8006020:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006022:	4b0d      	ldr	r3, [pc, #52]	@ (8006058 <MX_USART1_UART_Init+0x60>)
 8006024:	2200      	movs	r2, #0
 8006026:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006028:	4b0b      	ldr	r3, [pc, #44]	@ (8006058 <MX_USART1_UART_Init+0x60>)
 800602a:	2200      	movs	r2, #0
 800602c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800602e:	4b0a      	ldr	r3, [pc, #40]	@ (8006058 <MX_USART1_UART_Init+0x60>)
 8006030:	2200      	movs	r2, #0
 8006032:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 8006034:	4b08      	ldr	r3, [pc, #32]	@ (8006058 <MX_USART1_UART_Init+0x60>)
 8006036:	2208      	movs	r2, #8
 8006038:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800603a:	4b07      	ldr	r3, [pc, #28]	@ (8006058 <MX_USART1_UART_Init+0x60>)
 800603c:	2280      	movs	r2, #128	@ 0x80
 800603e:	0212      	lsls	r2, r2, #8
 8006040:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8006042:	4b05      	ldr	r3, [pc, #20]	@ (8006058 <MX_USART1_UART_Init+0x60>)
 8006044:	0018      	movs	r0, r3
 8006046:	f005 fbc9 	bl	800b7dc <HAL_UART_Init>
 800604a:	1e03      	subs	r3, r0, #0
 800604c:	d001      	beq.n	8006052 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 800604e:	f7fd ff73 	bl	8003f38 <Error_Handler>
=======
 8006370:	4b16      	ldr	r3, [pc, #88]	@ (80063cc <MX_USART1_UART_Init+0x60>)
 8006372:	4a17      	ldr	r2, [pc, #92]	@ (80063d0 <MX_USART1_UART_Init+0x64>)
 8006374:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8006376:	4b15      	ldr	r3, [pc, #84]	@ (80063cc <MX_USART1_UART_Init+0x60>)
 8006378:	22e1      	movs	r2, #225	@ 0xe1
 800637a:	0252      	lsls	r2, r2, #9
 800637c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800637e:	4b13      	ldr	r3, [pc, #76]	@ (80063cc <MX_USART1_UART_Init+0x60>)
 8006380:	2200      	movs	r2, #0
 8006382:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8006384:	4b11      	ldr	r3, [pc, #68]	@ (80063cc <MX_USART1_UART_Init+0x60>)
 8006386:	2200      	movs	r2, #0
 8006388:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800638a:	4b10      	ldr	r3, [pc, #64]	@ (80063cc <MX_USART1_UART_Init+0x60>)
 800638c:	2200      	movs	r2, #0
 800638e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8006390:	4b0e      	ldr	r3, [pc, #56]	@ (80063cc <MX_USART1_UART_Init+0x60>)
 8006392:	220c      	movs	r2, #12
 8006394:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006396:	4b0d      	ldr	r3, [pc, #52]	@ (80063cc <MX_USART1_UART_Init+0x60>)
 8006398:	2200      	movs	r2, #0
 800639a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800639c:	4b0b      	ldr	r3, [pc, #44]	@ (80063cc <MX_USART1_UART_Init+0x60>)
 800639e:	2200      	movs	r2, #0
 80063a0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80063a2:	4b0a      	ldr	r3, [pc, #40]	@ (80063cc <MX_USART1_UART_Init+0x60>)
 80063a4:	2200      	movs	r2, #0
 80063a6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 80063a8:	4b08      	ldr	r3, [pc, #32]	@ (80063cc <MX_USART1_UART_Init+0x60>)
 80063aa:	2208      	movs	r2, #8
 80063ac:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 80063ae:	4b07      	ldr	r3, [pc, #28]	@ (80063cc <MX_USART1_UART_Init+0x60>)
 80063b0:	2280      	movs	r2, #128	@ 0x80
 80063b2:	0212      	lsls	r2, r2, #8
 80063b4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80063b6:	4b05      	ldr	r3, [pc, #20]	@ (80063cc <MX_USART1_UART_Init+0x60>)
 80063b8:	0018      	movs	r0, r3
 80063ba:	f005 fb5b 	bl	800ba74 <HAL_UART_Init>
 80063be:	1e03      	subs	r3, r0, #0
 80063c0:	d001      	beq.n	80063c6 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 80063c2:	f7fd fde1 	bl	8003f88 <Error_Handler>
>>>>>>> main
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
<<<<<<< HEAD
 8006052:	46c0      	nop			@ (mov r8, r8)
 8006054:	46bd      	mov	sp, r7
 8006056:	bd80      	pop	{r7, pc}
 8006058:	20000a58 	.word	0x20000a58
 800605c:	40013800 	.word	0x40013800

08006060 <MX_USART4_UART_Init>:
=======
 80063c6:	46c0      	nop			@ (mov r8, r8)
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bd80      	pop	{r7, pc}
 80063cc:	20000db8 	.word	0x20000db8
 80063d0:	40013800 	.word	0x40013800

080063d4 <MX_USART4_UART_Init>:
>>>>>>> main
/* USART4 init function */

void MX_USART4_UART_Init(void)
{
<<<<<<< HEAD
 8006060:	b580      	push	{r7, lr}
 8006062:	af00      	add	r7, sp, #0
=======
 80063d4:	b580      	push	{r7, lr}
 80063d6:	af00      	add	r7, sp, #0
>>>>>>> main
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
<<<<<<< HEAD
 8006064:	4b14      	ldr	r3, [pc, #80]	@ (80060b8 <MX_USART4_UART_Init+0x58>)
 8006066:	4a15      	ldr	r2, [pc, #84]	@ (80060bc <MX_USART4_UART_Init+0x5c>)
 8006068:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800606a:	4b13      	ldr	r3, [pc, #76]	@ (80060b8 <MX_USART4_UART_Init+0x58>)
 800606c:	22e1      	movs	r2, #225	@ 0xe1
 800606e:	0252      	lsls	r2, r2, #9
 8006070:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8006072:	4b11      	ldr	r3, [pc, #68]	@ (80060b8 <MX_USART4_UART_Init+0x58>)
 8006074:	2200      	movs	r2, #0
 8006076:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8006078:	4b0f      	ldr	r3, [pc, #60]	@ (80060b8 <MX_USART4_UART_Init+0x58>)
 800607a:	2200      	movs	r2, #0
 800607c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800607e:	4b0e      	ldr	r3, [pc, #56]	@ (80060b8 <MX_USART4_UART_Init+0x58>)
 8006080:	2200      	movs	r2, #0
 8006082:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8006084:	4b0c      	ldr	r3, [pc, #48]	@ (80060b8 <MX_USART4_UART_Init+0x58>)
 8006086:	220c      	movs	r2, #12
 8006088:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800608a:	4b0b      	ldr	r3, [pc, #44]	@ (80060b8 <MX_USART4_UART_Init+0x58>)
 800608c:	2200      	movs	r2, #0
 800608e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8006090:	4b09      	ldr	r3, [pc, #36]	@ (80060b8 <MX_USART4_UART_Init+0x58>)
 8006092:	2200      	movs	r2, #0
 8006094:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006096:	4b08      	ldr	r3, [pc, #32]	@ (80060b8 <MX_USART4_UART_Init+0x58>)
 8006098:	2200      	movs	r2, #0
 800609a:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800609c:	4b06      	ldr	r3, [pc, #24]	@ (80060b8 <MX_USART4_UART_Init+0x58>)
 800609e:	2200      	movs	r2, #0
 80060a0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80060a2:	4b05      	ldr	r3, [pc, #20]	@ (80060b8 <MX_USART4_UART_Init+0x58>)
 80060a4:	0018      	movs	r0, r3
 80060a6:	f005 fb99 	bl	800b7dc <HAL_UART_Init>
 80060aa:	1e03      	subs	r3, r0, #0
 80060ac:	d001      	beq.n	80060b2 <MX_USART4_UART_Init+0x52>
  {
    Error_Handler();
 80060ae:	f7fd ff43 	bl	8003f38 <Error_Handler>
=======
 80063d8:	4b14      	ldr	r3, [pc, #80]	@ (800642c <MX_USART4_UART_Init+0x58>)
 80063da:	4a15      	ldr	r2, [pc, #84]	@ (8006430 <MX_USART4_UART_Init+0x5c>)
 80063dc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80063de:	4b13      	ldr	r3, [pc, #76]	@ (800642c <MX_USART4_UART_Init+0x58>)
 80063e0:	22e1      	movs	r2, #225	@ 0xe1
 80063e2:	0252      	lsls	r2, r2, #9
 80063e4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80063e6:	4b11      	ldr	r3, [pc, #68]	@ (800642c <MX_USART4_UART_Init+0x58>)
 80063e8:	2200      	movs	r2, #0
 80063ea:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80063ec:	4b0f      	ldr	r3, [pc, #60]	@ (800642c <MX_USART4_UART_Init+0x58>)
 80063ee:	2200      	movs	r2, #0
 80063f0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80063f2:	4b0e      	ldr	r3, [pc, #56]	@ (800642c <MX_USART4_UART_Init+0x58>)
 80063f4:	2200      	movs	r2, #0
 80063f6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80063f8:	4b0c      	ldr	r3, [pc, #48]	@ (800642c <MX_USART4_UART_Init+0x58>)
 80063fa:	220c      	movs	r2, #12
 80063fc:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80063fe:	4b0b      	ldr	r3, [pc, #44]	@ (800642c <MX_USART4_UART_Init+0x58>)
 8006400:	2200      	movs	r2, #0
 8006402:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8006404:	4b09      	ldr	r3, [pc, #36]	@ (800642c <MX_USART4_UART_Init+0x58>)
 8006406:	2200      	movs	r2, #0
 8006408:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800640a:	4b08      	ldr	r3, [pc, #32]	@ (800642c <MX_USART4_UART_Init+0x58>)
 800640c:	2200      	movs	r2, #0
 800640e:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006410:	4b06      	ldr	r3, [pc, #24]	@ (800642c <MX_USART4_UART_Init+0x58>)
 8006412:	2200      	movs	r2, #0
 8006414:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8006416:	4b05      	ldr	r3, [pc, #20]	@ (800642c <MX_USART4_UART_Init+0x58>)
 8006418:	0018      	movs	r0, r3
 800641a:	f005 fb2b 	bl	800ba74 <HAL_UART_Init>
 800641e:	1e03      	subs	r3, r0, #0
 8006420:	d001      	beq.n	8006426 <MX_USART4_UART_Init+0x52>
  {
    Error_Handler();
 8006422:	f7fd fdb1 	bl	8003f88 <Error_Handler>
>>>>>>> main
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
<<<<<<< HEAD
 80060b2:	46c0      	nop			@ (mov r8, r8)
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bd80      	pop	{r7, pc}
 80060b8:	20000b10 	.word	0x20000b10
 80060bc:	40004c00 	.word	0x40004c00

080060c0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80060c0:	b590      	push	{r4, r7, lr}
 80060c2:	b08d      	sub	sp, #52	@ 0x34
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80060c8:	241c      	movs	r4, #28
 80060ca:	193b      	adds	r3, r7, r4
 80060cc:	0018      	movs	r0, r3
 80060ce:	2314      	movs	r3, #20
 80060d0:	001a      	movs	r2, r3
 80060d2:	2100      	movs	r1, #0
 80060d4:	f007 fb26 	bl	800d724 <memset>
  if(uartHandle->Instance==LPUART1)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4a87      	ldr	r2, [pc, #540]	@ (80062fc <HAL_UART_MspInit+0x23c>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d129      	bne.n	8006136 <HAL_UART_MspInit+0x76>
=======
 8006426:	46c0      	nop			@ (mov r8, r8)
 8006428:	46bd      	mov	sp, r7
 800642a:	bd80      	pop	{r7, pc}
 800642c:	20000e70 	.word	0x20000e70
 8006430:	40004c00 	.word	0x40004c00

08006434 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8006434:	b590      	push	{r4, r7, lr}
 8006436:	b08b      	sub	sp, #44	@ 0x2c
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800643c:	2414      	movs	r4, #20
 800643e:	193b      	adds	r3, r7, r4
 8006440:	0018      	movs	r0, r3
 8006442:	2314      	movs	r3, #20
 8006444:	001a      	movs	r2, r3
 8006446:	2100      	movs	r1, #0
 8006448:	f007 fab8 	bl	800d9bc <memset>
  if(uartHandle->Instance==USART1)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4a6f      	ldr	r2, [pc, #444]	@ (8006610 <HAL_UART_MspInit+0x1dc>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d12b      	bne.n	80064ae <HAL_UART_MspInit+0x7a>
>>>>>>> main
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

<<<<<<< HEAD
  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80060e2:	4b87      	ldr	r3, [pc, #540]	@ (8006300 <HAL_UART_MspInit+0x240>)
 80060e4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80060e6:	4b86      	ldr	r3, [pc, #536]	@ (8006300 <HAL_UART_MspInit+0x240>)
 80060e8:	2180      	movs	r1, #128	@ 0x80
 80060ea:	02c9      	lsls	r1, r1, #11
 80060ec:	430a      	orrs	r2, r1
 80060ee:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80060f0:	4b83      	ldr	r3, [pc, #524]	@ (8006300 <HAL_UART_MspInit+0x240>)
 80060f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060f4:	4b82      	ldr	r3, [pc, #520]	@ (8006300 <HAL_UART_MspInit+0x240>)
 80060f6:	2104      	movs	r1, #4
 80060f8:	430a      	orrs	r2, r1
 80060fa:	62da      	str	r2, [r3, #44]	@ 0x2c
 80060fc:	4b80      	ldr	r3, [pc, #512]	@ (8006300 <HAL_UART_MspInit+0x240>)
 80060fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006100:	2204      	movs	r2, #4
 8006102:	4013      	ands	r3, r2
 8006104:	61bb      	str	r3, [r7, #24]
 8006106:	69bb      	ldr	r3, [r7, #24]
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8006108:	0021      	movs	r1, r4
 800610a:	187b      	adds	r3, r7, r1
 800610c:	2203      	movs	r2, #3
 800610e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006110:	187b      	adds	r3, r7, r1
 8006112:	2202      	movs	r2, #2
 8006114:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006116:	187b      	adds	r3, r7, r1
 8006118:	2200      	movs	r2, #0
 800611a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800611c:	187b      	adds	r3, r7, r1
 800611e:	2203      	movs	r2, #3
 8006120:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 8006122:	187b      	adds	r3, r7, r1
 8006124:	2206      	movs	r2, #6
 8006126:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006128:	187b      	adds	r3, r7, r1
 800612a:	4a76      	ldr	r2, [pc, #472]	@ (8006304 <HAL_UART_MspInit+0x244>)
 800612c:	0019      	movs	r1, r3
 800612e:	0010      	movs	r0, r2
 8006130:	f001 f960 	bl	80073f4 <HAL_GPIO_Init>
=======
  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8006456:	4b6f      	ldr	r3, [pc, #444]	@ (8006614 <HAL_UART_MspInit+0x1e0>)
 8006458:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800645a:	4b6e      	ldr	r3, [pc, #440]	@ (8006614 <HAL_UART_MspInit+0x1e0>)
 800645c:	2180      	movs	r1, #128	@ 0x80
 800645e:	01c9      	lsls	r1, r1, #7
 8006460:	430a      	orrs	r2, r1
 8006462:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006464:	4b6b      	ldr	r3, [pc, #428]	@ (8006614 <HAL_UART_MspInit+0x1e0>)
 8006466:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006468:	4b6a      	ldr	r3, [pc, #424]	@ (8006614 <HAL_UART_MspInit+0x1e0>)
 800646a:	2101      	movs	r1, #1
 800646c:	430a      	orrs	r2, r1
 800646e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006470:	4b68      	ldr	r3, [pc, #416]	@ (8006614 <HAL_UART_MspInit+0x1e0>)
 8006472:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006474:	2201      	movs	r2, #1
 8006476:	4013      	ands	r3, r2
 8006478:	613b      	str	r3, [r7, #16]
 800647a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800647c:	193b      	adds	r3, r7, r4
 800647e:	22c0      	movs	r2, #192	@ 0xc0
 8006480:	00d2      	lsls	r2, r2, #3
 8006482:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006484:	0021      	movs	r1, r4
 8006486:	187b      	adds	r3, r7, r1
 8006488:	2202      	movs	r2, #2
 800648a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800648c:	187b      	adds	r3, r7, r1
 800648e:	2200      	movs	r2, #0
 8006490:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006492:	187b      	adds	r3, r7, r1
 8006494:	2203      	movs	r2, #3
 8006496:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8006498:	187b      	adds	r3, r7, r1
 800649a:	2204      	movs	r2, #4
 800649c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800649e:	187a      	adds	r2, r7, r1
 80064a0:	23a0      	movs	r3, #160	@ 0xa0
 80064a2:	05db      	lsls	r3, r3, #23
 80064a4:	0011      	movs	r1, r2
 80064a6:	0018      	movs	r0, r3
 80064a8:	f001 f906 	bl	80076b8 <HAL_GPIO_Init>
>>>>>>> main
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }
}
<<<<<<< HEAD
 8006134:	e0dd      	b.n	80062f2 <HAL_UART_MspInit+0x232>
  else if(uartHandle->Instance==USART1)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a73      	ldr	r2, [pc, #460]	@ (8006308 <HAL_UART_MspInit+0x248>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d12b      	bne.n	8006198 <HAL_UART_MspInit+0xd8>
    __HAL_RCC_USART1_CLK_ENABLE();
 8006140:	4b6f      	ldr	r3, [pc, #444]	@ (8006300 <HAL_UART_MspInit+0x240>)
 8006142:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006144:	4b6e      	ldr	r3, [pc, #440]	@ (8006300 <HAL_UART_MspInit+0x240>)
 8006146:	2180      	movs	r1, #128	@ 0x80
 8006148:	01c9      	lsls	r1, r1, #7
 800614a:	430a      	orrs	r2, r1
 800614c:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800614e:	4b6c      	ldr	r3, [pc, #432]	@ (8006300 <HAL_UART_MspInit+0x240>)
 8006150:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006152:	4b6b      	ldr	r3, [pc, #428]	@ (8006300 <HAL_UART_MspInit+0x240>)
 8006154:	2101      	movs	r1, #1
 8006156:	430a      	orrs	r2, r1
 8006158:	62da      	str	r2, [r3, #44]	@ 0x2c
 800615a:	4b69      	ldr	r3, [pc, #420]	@ (8006300 <HAL_UART_MspInit+0x240>)
 800615c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800615e:	2201      	movs	r2, #1
 8006160:	4013      	ands	r3, r2
 8006162:	617b      	str	r3, [r7, #20]
 8006164:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8006166:	211c      	movs	r1, #28
 8006168:	187b      	adds	r3, r7, r1
 800616a:	22c0      	movs	r2, #192	@ 0xc0
 800616c:	00d2      	lsls	r2, r2, #3
 800616e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006170:	187b      	adds	r3, r7, r1
 8006172:	2202      	movs	r2, #2
 8006174:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006176:	187b      	adds	r3, r7, r1
 8006178:	2200      	movs	r2, #0
 800617a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800617c:	187b      	adds	r3, r7, r1
 800617e:	2203      	movs	r2, #3
 8006180:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8006182:	187b      	adds	r3, r7, r1
 8006184:	2204      	movs	r2, #4
 8006186:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006188:	187a      	adds	r2, r7, r1
 800618a:	23a0      	movs	r3, #160	@ 0xa0
 800618c:	05db      	lsls	r3, r3, #23
 800618e:	0011      	movs	r1, r2
 8006190:	0018      	movs	r0, r3
 8006192:	f001 f92f 	bl	80073f4 <HAL_GPIO_Init>
}
 8006196:	e0ac      	b.n	80062f2 <HAL_UART_MspInit+0x232>
  else if(uartHandle->Instance==USART4)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	4a5b      	ldr	r2, [pc, #364]	@ (800630c <HAL_UART_MspInit+0x24c>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d000      	beq.n	80061a4 <HAL_UART_MspInit+0xe4>
 80061a2:	e0a6      	b.n	80062f2 <HAL_UART_MspInit+0x232>
    __HAL_RCC_USART4_CLK_ENABLE();
 80061a4:	4b56      	ldr	r3, [pc, #344]	@ (8006300 <HAL_UART_MspInit+0x240>)
 80061a6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80061a8:	4b55      	ldr	r3, [pc, #340]	@ (8006300 <HAL_UART_MspInit+0x240>)
 80061aa:	2180      	movs	r1, #128	@ 0x80
 80061ac:	0309      	lsls	r1, r1, #12
 80061ae:	430a      	orrs	r2, r1
 80061b0:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80061b2:	4b53      	ldr	r3, [pc, #332]	@ (8006300 <HAL_UART_MspInit+0x240>)
 80061b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061b6:	4b52      	ldr	r3, [pc, #328]	@ (8006300 <HAL_UART_MspInit+0x240>)
 80061b8:	2101      	movs	r1, #1
 80061ba:	430a      	orrs	r2, r1
 80061bc:	62da      	str	r2, [r3, #44]	@ 0x2c
 80061be:	4b50      	ldr	r3, [pc, #320]	@ (8006300 <HAL_UART_MspInit+0x240>)
 80061c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061c2:	2201      	movs	r2, #1
 80061c4:	4013      	ands	r3, r2
 80061c6:	613b      	str	r3, [r7, #16]
 80061c8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80061ca:	4b4d      	ldr	r3, [pc, #308]	@ (8006300 <HAL_UART_MspInit+0x240>)
 80061cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061ce:	4b4c      	ldr	r3, [pc, #304]	@ (8006300 <HAL_UART_MspInit+0x240>)
 80061d0:	2104      	movs	r1, #4
 80061d2:	430a      	orrs	r2, r1
 80061d4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80061d6:	4b4a      	ldr	r3, [pc, #296]	@ (8006300 <HAL_UART_MspInit+0x240>)
 80061d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061da:	2204      	movs	r2, #4
 80061dc:	4013      	ands	r3, r2
 80061de:	60fb      	str	r3, [r7, #12]
 80061e0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80061e2:	241c      	movs	r4, #28
 80061e4:	193b      	adds	r3, r7, r4
 80061e6:	2202      	movs	r2, #2
 80061e8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80061ea:	193b      	adds	r3, r7, r4
 80061ec:	2202      	movs	r2, #2
 80061ee:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061f0:	193b      	adds	r3, r7, r4
 80061f2:	2200      	movs	r2, #0
 80061f4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80061f6:	193b      	adds	r3, r7, r4
 80061f8:	2203      	movs	r2, #3
 80061fa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 80061fc:	193b      	adds	r3, r7, r4
 80061fe:	2206      	movs	r2, #6
 8006200:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006202:	193a      	adds	r2, r7, r4
 8006204:	23a0      	movs	r3, #160	@ 0xa0
 8006206:	05db      	lsls	r3, r3, #23
 8006208:	0011      	movs	r1, r2
 800620a:	0018      	movs	r0, r3
 800620c:	f001 f8f2 	bl	80073f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006210:	0021      	movs	r1, r4
 8006212:	187b      	adds	r3, r7, r1
 8006214:	2280      	movs	r2, #128	@ 0x80
 8006216:	00d2      	lsls	r2, r2, #3
 8006218:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800621a:	187b      	adds	r3, r7, r1
 800621c:	2202      	movs	r2, #2
 800621e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006220:	187b      	adds	r3, r7, r1
 8006222:	2200      	movs	r2, #0
 8006224:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006226:	187b      	adds	r3, r7, r1
 8006228:	2203      	movs	r2, #3
 800622a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 800622c:	187b      	adds	r3, r7, r1
 800622e:	2206      	movs	r2, #6
 8006230:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006232:	187b      	adds	r3, r7, r1
 8006234:	4a33      	ldr	r2, [pc, #204]	@ (8006304 <HAL_UART_MspInit+0x244>)
 8006236:	0019      	movs	r1, r3
 8006238:	0010      	movs	r0, r2
 800623a:	f001 f8db 	bl	80073f4 <HAL_GPIO_Init>
    hdma_usart4_rx.Instance = DMA1_Channel6;
 800623e:	4b34      	ldr	r3, [pc, #208]	@ (8006310 <HAL_UART_MspInit+0x250>)
 8006240:	4a34      	ldr	r2, [pc, #208]	@ (8006314 <HAL_UART_MspInit+0x254>)
 8006242:	601a      	str	r2, [r3, #0]
    hdma_usart4_rx.Init.Request = DMA_REQUEST_12;
 8006244:	4b32      	ldr	r3, [pc, #200]	@ (8006310 <HAL_UART_MspInit+0x250>)
 8006246:	220c      	movs	r2, #12
 8006248:	605a      	str	r2, [r3, #4]
    hdma_usart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800624a:	4b31      	ldr	r3, [pc, #196]	@ (8006310 <HAL_UART_MspInit+0x250>)
 800624c:	2200      	movs	r2, #0
 800624e:	609a      	str	r2, [r3, #8]
    hdma_usart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006250:	4b2f      	ldr	r3, [pc, #188]	@ (8006310 <HAL_UART_MspInit+0x250>)
 8006252:	2200      	movs	r2, #0
 8006254:	60da      	str	r2, [r3, #12]
    hdma_usart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006256:	4b2e      	ldr	r3, [pc, #184]	@ (8006310 <HAL_UART_MspInit+0x250>)
 8006258:	2280      	movs	r2, #128	@ 0x80
 800625a:	611a      	str	r2, [r3, #16]
    hdma_usart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800625c:	4b2c      	ldr	r3, [pc, #176]	@ (8006310 <HAL_UART_MspInit+0x250>)
 800625e:	2200      	movs	r2, #0
 8006260:	615a      	str	r2, [r3, #20]
    hdma_usart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006262:	4b2b      	ldr	r3, [pc, #172]	@ (8006310 <HAL_UART_MspInit+0x250>)
 8006264:	2200      	movs	r2, #0
 8006266:	619a      	str	r2, [r3, #24]
    hdma_usart4_rx.Init.Mode = DMA_CIRCULAR;
 8006268:	4b29      	ldr	r3, [pc, #164]	@ (8006310 <HAL_UART_MspInit+0x250>)
 800626a:	2220      	movs	r2, #32
 800626c:	61da      	str	r2, [r3, #28]
    hdma_usart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 800626e:	4b28      	ldr	r3, [pc, #160]	@ (8006310 <HAL_UART_MspInit+0x250>)
 8006270:	2200      	movs	r2, #0
 8006272:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_rx) != HAL_OK)
 8006274:	4b26      	ldr	r3, [pc, #152]	@ (8006310 <HAL_UART_MspInit+0x250>)
 8006276:	0018      	movs	r0, r3
 8006278:	f000 fe10 	bl	8006e9c <HAL_DMA_Init>
 800627c:	1e03      	subs	r3, r0, #0
 800627e:	d001      	beq.n	8006284 <HAL_UART_MspInit+0x1c4>
      Error_Handler();
 8006280:	f7fd fe5a 	bl	8003f38 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart4_rx);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	4a22      	ldr	r2, [pc, #136]	@ (8006310 <HAL_UART_MspInit+0x250>)
 8006288:	675a      	str	r2, [r3, #116]	@ 0x74
 800628a:	4b21      	ldr	r3, [pc, #132]	@ (8006310 <HAL_UART_MspInit+0x250>)
 800628c:	687a      	ldr	r2, [r7, #4]
 800628e:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_usart4_tx.Instance = DMA1_Channel7;
 8006290:	4b21      	ldr	r3, [pc, #132]	@ (8006318 <HAL_UART_MspInit+0x258>)
 8006292:	4a22      	ldr	r2, [pc, #136]	@ (800631c <HAL_UART_MspInit+0x25c>)
 8006294:	601a      	str	r2, [r3, #0]
    hdma_usart4_tx.Init.Request = DMA_REQUEST_12;
 8006296:	4b20      	ldr	r3, [pc, #128]	@ (8006318 <HAL_UART_MspInit+0x258>)
 8006298:	220c      	movs	r2, #12
 800629a:	605a      	str	r2, [r3, #4]
    hdma_usart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800629c:	4b1e      	ldr	r3, [pc, #120]	@ (8006318 <HAL_UART_MspInit+0x258>)
 800629e:	2210      	movs	r2, #16
 80062a0:	609a      	str	r2, [r3, #8]
    hdma_usart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80062a2:	4b1d      	ldr	r3, [pc, #116]	@ (8006318 <HAL_UART_MspInit+0x258>)
 80062a4:	2200      	movs	r2, #0
 80062a6:	60da      	str	r2, [r3, #12]
    hdma_usart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 80062a8:	4b1b      	ldr	r3, [pc, #108]	@ (8006318 <HAL_UART_MspInit+0x258>)
 80062aa:	2280      	movs	r2, #128	@ 0x80
 80062ac:	611a      	str	r2, [r3, #16]
    hdma_usart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80062ae:	4b1a      	ldr	r3, [pc, #104]	@ (8006318 <HAL_UART_MspInit+0x258>)
 80062b0:	2200      	movs	r2, #0
 80062b2:	615a      	str	r2, [r3, #20]
    hdma_usart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80062b4:	4b18      	ldr	r3, [pc, #96]	@ (8006318 <HAL_UART_MspInit+0x258>)
 80062b6:	2200      	movs	r2, #0
 80062b8:	619a      	str	r2, [r3, #24]
    hdma_usart4_tx.Init.Mode = DMA_NORMAL;
 80062ba:	4b17      	ldr	r3, [pc, #92]	@ (8006318 <HAL_UART_MspInit+0x258>)
 80062bc:	2200      	movs	r2, #0
 80062be:	61da      	str	r2, [r3, #28]
    hdma_usart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 80062c0:	4b15      	ldr	r3, [pc, #84]	@ (8006318 <HAL_UART_MspInit+0x258>)
 80062c2:	2200      	movs	r2, #0
 80062c4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_tx) != HAL_OK)
 80062c6:	4b14      	ldr	r3, [pc, #80]	@ (8006318 <HAL_UART_MspInit+0x258>)
 80062c8:	0018      	movs	r0, r3
 80062ca:	f000 fde7 	bl	8006e9c <HAL_DMA_Init>
 80062ce:	1e03      	subs	r3, r0, #0
 80062d0:	d001      	beq.n	80062d6 <HAL_UART_MspInit+0x216>
      Error_Handler();
 80062d2:	f7fd fe31 	bl	8003f38 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart4_tx);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	4a0f      	ldr	r2, [pc, #60]	@ (8006318 <HAL_UART_MspInit+0x258>)
 80062da:	671a      	str	r2, [r3, #112]	@ 0x70
 80062dc:	4b0e      	ldr	r3, [pc, #56]	@ (8006318 <HAL_UART_MspInit+0x258>)
 80062de:	687a      	ldr	r2, [r7, #4]
 80062e0:	629a      	str	r2, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART4_5_IRQn, 0, 0);
 80062e2:	2200      	movs	r2, #0
 80062e4:	2100      	movs	r1, #0
 80062e6:	200e      	movs	r0, #14
 80062e8:	f000 fda6 	bl	8006e38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
 80062ec:	200e      	movs	r0, #14
 80062ee:	f000 fdb8 	bl	8006e62 <HAL_NVIC_EnableIRQ>
}
 80062f2:	46c0      	nop			@ (mov r8, r8)
 80062f4:	46bd      	mov	sp, r7
 80062f6:	b00d      	add	sp, #52	@ 0x34
 80062f8:	bd90      	pop	{r4, r7, pc}
 80062fa:	46c0      	nop			@ (mov r8, r8)
 80062fc:	40004800 	.word	0x40004800
 8006300:	40021000 	.word	0x40021000
 8006304:	50000800 	.word	0x50000800
 8006308:	40013800 	.word	0x40013800
 800630c:	40004c00 	.word	0x40004c00
 8006310:	20000bc8 	.word	0x20000bc8
 8006314:	4002006c 	.word	0x4002006c
 8006318:	20000c10 	.word	0x20000c10
 800631c:	40020080 	.word	0x40020080

08006320 <MX_USB_PCD_Init>:
=======
 80064ac:	e0ac      	b.n	8006608 <HAL_UART_MspInit+0x1d4>
  else if(uartHandle->Instance==USART4)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4a59      	ldr	r2, [pc, #356]	@ (8006618 <HAL_UART_MspInit+0x1e4>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d000      	beq.n	80064ba <HAL_UART_MspInit+0x86>
 80064b8:	e0a6      	b.n	8006608 <HAL_UART_MspInit+0x1d4>
    __HAL_RCC_USART4_CLK_ENABLE();
 80064ba:	4b56      	ldr	r3, [pc, #344]	@ (8006614 <HAL_UART_MspInit+0x1e0>)
 80064bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80064be:	4b55      	ldr	r3, [pc, #340]	@ (8006614 <HAL_UART_MspInit+0x1e0>)
 80064c0:	2180      	movs	r1, #128	@ 0x80
 80064c2:	0309      	lsls	r1, r1, #12
 80064c4:	430a      	orrs	r2, r1
 80064c6:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80064c8:	4b52      	ldr	r3, [pc, #328]	@ (8006614 <HAL_UART_MspInit+0x1e0>)
 80064ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064cc:	4b51      	ldr	r3, [pc, #324]	@ (8006614 <HAL_UART_MspInit+0x1e0>)
 80064ce:	2101      	movs	r1, #1
 80064d0:	430a      	orrs	r2, r1
 80064d2:	62da      	str	r2, [r3, #44]	@ 0x2c
 80064d4:	4b4f      	ldr	r3, [pc, #316]	@ (8006614 <HAL_UART_MspInit+0x1e0>)
 80064d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064d8:	2201      	movs	r2, #1
 80064da:	4013      	ands	r3, r2
 80064dc:	60fb      	str	r3, [r7, #12]
 80064de:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80064e0:	4b4c      	ldr	r3, [pc, #304]	@ (8006614 <HAL_UART_MspInit+0x1e0>)
 80064e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064e4:	4b4b      	ldr	r3, [pc, #300]	@ (8006614 <HAL_UART_MspInit+0x1e0>)
 80064e6:	2104      	movs	r1, #4
 80064e8:	430a      	orrs	r2, r1
 80064ea:	62da      	str	r2, [r3, #44]	@ 0x2c
 80064ec:	4b49      	ldr	r3, [pc, #292]	@ (8006614 <HAL_UART_MspInit+0x1e0>)
 80064ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064f0:	2204      	movs	r2, #4
 80064f2:	4013      	ands	r3, r2
 80064f4:	60bb      	str	r3, [r7, #8]
 80064f6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80064f8:	2414      	movs	r4, #20
 80064fa:	193b      	adds	r3, r7, r4
 80064fc:	2202      	movs	r2, #2
 80064fe:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006500:	193b      	adds	r3, r7, r4
 8006502:	2202      	movs	r2, #2
 8006504:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006506:	193b      	adds	r3, r7, r4
 8006508:	2200      	movs	r2, #0
 800650a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800650c:	193b      	adds	r3, r7, r4
 800650e:	2203      	movs	r2, #3
 8006510:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 8006512:	193b      	adds	r3, r7, r4
 8006514:	2206      	movs	r2, #6
 8006516:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006518:	193a      	adds	r2, r7, r4
 800651a:	23a0      	movs	r3, #160	@ 0xa0
 800651c:	05db      	lsls	r3, r3, #23
 800651e:	0011      	movs	r1, r2
 8006520:	0018      	movs	r0, r3
 8006522:	f001 f8c9 	bl	80076b8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006526:	0021      	movs	r1, r4
 8006528:	187b      	adds	r3, r7, r1
 800652a:	2280      	movs	r2, #128	@ 0x80
 800652c:	00d2      	lsls	r2, r2, #3
 800652e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006530:	187b      	adds	r3, r7, r1
 8006532:	2202      	movs	r2, #2
 8006534:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006536:	187b      	adds	r3, r7, r1
 8006538:	2200      	movs	r2, #0
 800653a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800653c:	187b      	adds	r3, r7, r1
 800653e:	2203      	movs	r2, #3
 8006540:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 8006542:	187b      	adds	r3, r7, r1
 8006544:	2206      	movs	r2, #6
 8006546:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006548:	187b      	adds	r3, r7, r1
 800654a:	4a34      	ldr	r2, [pc, #208]	@ (800661c <HAL_UART_MspInit+0x1e8>)
 800654c:	0019      	movs	r1, r3
 800654e:	0010      	movs	r0, r2
 8006550:	f001 f8b2 	bl	80076b8 <HAL_GPIO_Init>
    hdma_usart4_rx.Instance = DMA1_Channel6;
 8006554:	4b32      	ldr	r3, [pc, #200]	@ (8006620 <HAL_UART_MspInit+0x1ec>)
 8006556:	4a33      	ldr	r2, [pc, #204]	@ (8006624 <HAL_UART_MspInit+0x1f0>)
 8006558:	601a      	str	r2, [r3, #0]
    hdma_usart4_rx.Init.Request = DMA_REQUEST_12;
 800655a:	4b31      	ldr	r3, [pc, #196]	@ (8006620 <HAL_UART_MspInit+0x1ec>)
 800655c:	220c      	movs	r2, #12
 800655e:	605a      	str	r2, [r3, #4]
    hdma_usart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006560:	4b2f      	ldr	r3, [pc, #188]	@ (8006620 <HAL_UART_MspInit+0x1ec>)
 8006562:	2200      	movs	r2, #0
 8006564:	609a      	str	r2, [r3, #8]
    hdma_usart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006566:	4b2e      	ldr	r3, [pc, #184]	@ (8006620 <HAL_UART_MspInit+0x1ec>)
 8006568:	2200      	movs	r2, #0
 800656a:	60da      	str	r2, [r3, #12]
    hdma_usart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800656c:	4b2c      	ldr	r3, [pc, #176]	@ (8006620 <HAL_UART_MspInit+0x1ec>)
 800656e:	2280      	movs	r2, #128	@ 0x80
 8006570:	611a      	str	r2, [r3, #16]
    hdma_usart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006572:	4b2b      	ldr	r3, [pc, #172]	@ (8006620 <HAL_UART_MspInit+0x1ec>)
 8006574:	2200      	movs	r2, #0
 8006576:	615a      	str	r2, [r3, #20]
    hdma_usart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006578:	4b29      	ldr	r3, [pc, #164]	@ (8006620 <HAL_UART_MspInit+0x1ec>)
 800657a:	2200      	movs	r2, #0
 800657c:	619a      	str	r2, [r3, #24]
    hdma_usart4_rx.Init.Mode = DMA_CIRCULAR;
 800657e:	4b28      	ldr	r3, [pc, #160]	@ (8006620 <HAL_UART_MspInit+0x1ec>)
 8006580:	2220      	movs	r2, #32
 8006582:	61da      	str	r2, [r3, #28]
    hdma_usart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006584:	4b26      	ldr	r3, [pc, #152]	@ (8006620 <HAL_UART_MspInit+0x1ec>)
 8006586:	2200      	movs	r2, #0
 8006588:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_rx) != HAL_OK)
 800658a:	4b25      	ldr	r3, [pc, #148]	@ (8006620 <HAL_UART_MspInit+0x1ec>)
 800658c:	0018      	movs	r0, r3
 800658e:	f000 fde7 	bl	8007160 <HAL_DMA_Init>
 8006592:	1e03      	subs	r3, r0, #0
 8006594:	d001      	beq.n	800659a <HAL_UART_MspInit+0x166>
      Error_Handler();
 8006596:	f7fd fcf7 	bl	8003f88 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart4_rx);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	4a20      	ldr	r2, [pc, #128]	@ (8006620 <HAL_UART_MspInit+0x1ec>)
 800659e:	675a      	str	r2, [r3, #116]	@ 0x74
 80065a0:	4b1f      	ldr	r3, [pc, #124]	@ (8006620 <HAL_UART_MspInit+0x1ec>)
 80065a2:	687a      	ldr	r2, [r7, #4]
 80065a4:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_usart4_tx.Instance = DMA1_Channel7;
 80065a6:	4b20      	ldr	r3, [pc, #128]	@ (8006628 <HAL_UART_MspInit+0x1f4>)
 80065a8:	4a20      	ldr	r2, [pc, #128]	@ (800662c <HAL_UART_MspInit+0x1f8>)
 80065aa:	601a      	str	r2, [r3, #0]
    hdma_usart4_tx.Init.Request = DMA_REQUEST_12;
 80065ac:	4b1e      	ldr	r3, [pc, #120]	@ (8006628 <HAL_UART_MspInit+0x1f4>)
 80065ae:	220c      	movs	r2, #12
 80065b0:	605a      	str	r2, [r3, #4]
    hdma_usart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80065b2:	4b1d      	ldr	r3, [pc, #116]	@ (8006628 <HAL_UART_MspInit+0x1f4>)
 80065b4:	2210      	movs	r2, #16
 80065b6:	609a      	str	r2, [r3, #8]
    hdma_usart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80065b8:	4b1b      	ldr	r3, [pc, #108]	@ (8006628 <HAL_UART_MspInit+0x1f4>)
 80065ba:	2200      	movs	r2, #0
 80065bc:	60da      	str	r2, [r3, #12]
    hdma_usart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 80065be:	4b1a      	ldr	r3, [pc, #104]	@ (8006628 <HAL_UART_MspInit+0x1f4>)
 80065c0:	2280      	movs	r2, #128	@ 0x80
 80065c2:	611a      	str	r2, [r3, #16]
    hdma_usart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80065c4:	4b18      	ldr	r3, [pc, #96]	@ (8006628 <HAL_UART_MspInit+0x1f4>)
 80065c6:	2200      	movs	r2, #0
 80065c8:	615a      	str	r2, [r3, #20]
    hdma_usart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80065ca:	4b17      	ldr	r3, [pc, #92]	@ (8006628 <HAL_UART_MspInit+0x1f4>)
 80065cc:	2200      	movs	r2, #0
 80065ce:	619a      	str	r2, [r3, #24]
    hdma_usart4_tx.Init.Mode = DMA_NORMAL;
 80065d0:	4b15      	ldr	r3, [pc, #84]	@ (8006628 <HAL_UART_MspInit+0x1f4>)
 80065d2:	2200      	movs	r2, #0
 80065d4:	61da      	str	r2, [r3, #28]
    hdma_usart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 80065d6:	4b14      	ldr	r3, [pc, #80]	@ (8006628 <HAL_UART_MspInit+0x1f4>)
 80065d8:	2200      	movs	r2, #0
 80065da:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_tx) != HAL_OK)
 80065dc:	4b12      	ldr	r3, [pc, #72]	@ (8006628 <HAL_UART_MspInit+0x1f4>)
 80065de:	0018      	movs	r0, r3
 80065e0:	f000 fdbe 	bl	8007160 <HAL_DMA_Init>
 80065e4:	1e03      	subs	r3, r0, #0
 80065e6:	d001      	beq.n	80065ec <HAL_UART_MspInit+0x1b8>
      Error_Handler();
 80065e8:	f7fd fcce 	bl	8003f88 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart4_tx);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	4a0e      	ldr	r2, [pc, #56]	@ (8006628 <HAL_UART_MspInit+0x1f4>)
 80065f0:	671a      	str	r2, [r3, #112]	@ 0x70
 80065f2:	4b0d      	ldr	r3, [pc, #52]	@ (8006628 <HAL_UART_MspInit+0x1f4>)
 80065f4:	687a      	ldr	r2, [r7, #4]
 80065f6:	629a      	str	r2, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART4_5_IRQn, 0, 0);
 80065f8:	2200      	movs	r2, #0
 80065fa:	2100      	movs	r1, #0
 80065fc:	200e      	movs	r0, #14
 80065fe:	f000 fd7d 	bl	80070fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
 8006602:	200e      	movs	r0, #14
 8006604:	f000 fd8f 	bl	8007126 <HAL_NVIC_EnableIRQ>
}
 8006608:	46c0      	nop			@ (mov r8, r8)
 800660a:	46bd      	mov	sp, r7
 800660c:	b00b      	add	sp, #44	@ 0x2c
 800660e:	bd90      	pop	{r4, r7, pc}
 8006610:	40013800 	.word	0x40013800
 8006614:	40021000 	.word	0x40021000
 8006618:	40004c00 	.word	0x40004c00
 800661c:	50000800 	.word	0x50000800
 8006620:	20000f28 	.word	0x20000f28
 8006624:	4002006c 	.word	0x4002006c
 8006628:	20000f70 	.word	0x20000f70
 800662c:	40020080 	.word	0x40020080

08006630 <MX_USB_PCD_Init>:
>>>>>>> main
PCD_HandleTypeDef hpcd_USB_FS;

/* USB init function */

void MX_USB_PCD_Init(void)
{
<<<<<<< HEAD
 8006320:	b580      	push	{r7, lr}
 8006322:	af00      	add	r7, sp, #0
=======
 8006630:	b580      	push	{r7, lr}
 8006632:	af00      	add	r7, sp, #0
>>>>>>> main
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
<<<<<<< HEAD
 8006324:	4b0f      	ldr	r3, [pc, #60]	@ (8006364 <MX_USB_PCD_Init+0x44>)
 8006326:	4a10      	ldr	r2, [pc, #64]	@ (8006368 <MX_USB_PCD_Init+0x48>)
 8006328:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800632a:	4b0e      	ldr	r3, [pc, #56]	@ (8006364 <MX_USB_PCD_Init+0x44>)
 800632c:	2208      	movs	r2, #8
 800632e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8006330:	4b0c      	ldr	r3, [pc, #48]	@ (8006364 <MX_USB_PCD_Init+0x44>)
 8006332:	2202      	movs	r2, #2
 8006334:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006336:	4b0b      	ldr	r3, [pc, #44]	@ (8006364 <MX_USB_PCD_Init+0x44>)
 8006338:	2202      	movs	r2, #2
 800633a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800633c:	4b09      	ldr	r3, [pc, #36]	@ (8006364 <MX_USB_PCD_Init+0x44>)
 800633e:	2200      	movs	r2, #0
 8006340:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8006342:	4b08      	ldr	r3, [pc, #32]	@ (8006364 <MX_USB_PCD_Init+0x44>)
 8006344:	2200      	movs	r2, #0
 8006346:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8006348:	4b06      	ldr	r3, [pc, #24]	@ (8006364 <MX_USB_PCD_Init+0x44>)
 800634a:	2200      	movs	r2, #0
 800634c:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800634e:	4b05      	ldr	r3, [pc, #20]	@ (8006364 <MX_USB_PCD_Init+0x44>)
 8006350:	0018      	movs	r0, r3
 8006352:	f003 fe2b 	bl	8009fac <HAL_PCD_Init>
 8006356:	1e03      	subs	r3, r0, #0
 8006358:	d001      	beq.n	800635e <MX_USB_PCD_Init+0x3e>
  {
    Error_Handler();
 800635a:	f7fd fded 	bl	8003f38 <Error_Handler>
=======
 8006634:	4b0f      	ldr	r3, [pc, #60]	@ (8006674 <MX_USB_PCD_Init+0x44>)
 8006636:	4a10      	ldr	r2, [pc, #64]	@ (8006678 <MX_USB_PCD_Init+0x48>)
 8006638:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800663a:	4b0e      	ldr	r3, [pc, #56]	@ (8006674 <MX_USB_PCD_Init+0x44>)
 800663c:	2208      	movs	r2, #8
 800663e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8006640:	4b0c      	ldr	r3, [pc, #48]	@ (8006674 <MX_USB_PCD_Init+0x44>)
 8006642:	2202      	movs	r2, #2
 8006644:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006646:	4b0b      	ldr	r3, [pc, #44]	@ (8006674 <MX_USB_PCD_Init+0x44>)
 8006648:	2202      	movs	r2, #2
 800664a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800664c:	4b09      	ldr	r3, [pc, #36]	@ (8006674 <MX_USB_PCD_Init+0x44>)
 800664e:	2200      	movs	r2, #0
 8006650:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8006652:	4b08      	ldr	r3, [pc, #32]	@ (8006674 <MX_USB_PCD_Init+0x44>)
 8006654:	2200      	movs	r2, #0
 8006656:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8006658:	4b06      	ldr	r3, [pc, #24]	@ (8006674 <MX_USB_PCD_Init+0x44>)
 800665a:	2200      	movs	r2, #0
 800665c:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800665e:	4b05      	ldr	r3, [pc, #20]	@ (8006674 <MX_USB_PCD_Init+0x44>)
 8006660:	0018      	movs	r0, r3
 8006662:	f003 fe05 	bl	800a270 <HAL_PCD_Init>
 8006666:	1e03      	subs	r3, r0, #0
 8006668:	d001      	beq.n	800666e <MX_USB_PCD_Init+0x3e>
  {
    Error_Handler();
 800666a:	f7fd fc8d 	bl	8003f88 <Error_Handler>
>>>>>>> main
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
<<<<<<< HEAD
 800635e:	46c0      	nop			@ (mov r8, r8)
 8006360:	46bd      	mov	sp, r7
 8006362:	bd80      	pop	{r7, pc}
 8006364:	20000c58 	.word	0x20000c58
 8006368:	40005c00 	.word	0x40005c00

0800636c <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b082      	sub	sp, #8
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]

  if(pcdHandle->Instance==USB)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4a06      	ldr	r2, [pc, #24]	@ (8006394 <HAL_PCD_MspInit+0x28>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d106      	bne.n	800638c <HAL_PCD_MspInit+0x20>
=======
 800666e:	46c0      	nop			@ (mov r8, r8)
 8006670:	46bd      	mov	sp, r7
 8006672:	bd80      	pop	{r7, pc}
 8006674:	20000fb8 	.word	0x20000fb8
 8006678:	40005c00 	.word	0x40005c00

0800667c <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b082      	sub	sp, #8
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]

  if(pcdHandle->Instance==USB)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4a06      	ldr	r2, [pc, #24]	@ (80066a4 <HAL_PCD_MspInit+0x28>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d106      	bne.n	800669c <HAL_PCD_MspInit+0x20>
>>>>>>> main
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* USB clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
<<<<<<< HEAD
 800637e:	4b06      	ldr	r3, [pc, #24]	@ (8006398 <HAL_PCD_MspInit+0x2c>)
 8006380:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006382:	4b05      	ldr	r3, [pc, #20]	@ (8006398 <HAL_PCD_MspInit+0x2c>)
 8006384:	2180      	movs	r1, #128	@ 0x80
 8006386:	0409      	lsls	r1, r1, #16
 8006388:	430a      	orrs	r2, r1
 800638a:	639a      	str	r2, [r3, #56]	@ 0x38
=======
 800668e:	4b06      	ldr	r3, [pc, #24]	@ (80066a8 <HAL_PCD_MspInit+0x2c>)
 8006690:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006692:	4b05      	ldr	r3, [pc, #20]	@ (80066a8 <HAL_PCD_MspInit+0x2c>)
 8006694:	2180      	movs	r1, #128	@ 0x80
 8006696:	0409      	lsls	r1, r1, #16
 8006698:	430a      	orrs	r2, r1
 800669a:	639a      	str	r2, [r3, #56]	@ 0x38
>>>>>>> main
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
<<<<<<< HEAD
 800638c:	46c0      	nop			@ (mov r8, r8)
 800638e:	46bd      	mov	sp, r7
 8006390:	b002      	add	sp, #8
 8006392:	bd80      	pop	{r7, pc}
 8006394:	40005c00 	.word	0x40005c00
 8006398:	40021000 	.word	0x40021000

0800639c <TimestampIsReached>:
=======
 800669c:	46c0      	nop			@ (mov r8, r8)
 800669e:	46bd      	mov	sp, r7
 80066a0:	b002      	add	sp, #8
 80066a2:	bd80      	pop	{r7, pc}
 80066a4:	40005c00 	.word	0x40005c00
 80066a8:	40021000 	.word	0x40021000

080066ac <TimestampIsReached>:
>>>>>>> main
VerboseLevel CurrentVerboseLevel = VERBOSE_ALL;
#define TEXTBUFFER_LEN 1024

extern UART_HandleTypeDef huart1;

bool TimestampIsReached(uint32_t timestamp) {
<<<<<<< HEAD
 800639c:	b580      	push	{r7, lr}
 800639e:	b086      	sub	sp, #24
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
  uint32_t now = HAL_GetTick();
 80063a4:	f000 fc6e 	bl	8006c84 <HAL_GetTick>
 80063a8:	0003      	movs	r3, r0
 80063aa:	617b      	str	r3, [r7, #20]
  const uint32_t HALF_TIME = 0x7FFFFFFF; // ~25 days max timestamp delay
 80063ac:	4b1c      	ldr	r3, [pc, #112]	@ (8006420 <TimestampIsReached+0x84>)
 80063ae:	613b      	str	r3, [r7, #16]
=======
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b086      	sub	sp, #24
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
  uint32_t now = HAL_GetTick();
 80066b4:	f000 fc48 	bl	8006f48 <HAL_GetTick>
 80066b8:	0003      	movs	r3, r0
 80066ba:	617b      	str	r3, [r7, #20]
  const uint32_t HALF_TIME = 0x7FFFFFFF; // ~25 days max timestamp delay
 80066bc:	4b1c      	ldr	r3, [pc, #112]	@ (8006730 <TimestampIsReached+0x84>)
 80066be:	613b      	str	r3, [r7, #16]
>>>>>>> main

  // Ensures that the difference between now and timestamp is less than half of
  // the maximum value of the counter. This confirms that the timestamp is not
  // too far in the past.
  bool noOverflow = (now >= timestamp && now - timestamp < HALF_TIME);
<<<<<<< HEAD
 80063b0:	697a      	ldr	r2, [r7, #20]
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	429a      	cmp	r2, r3
 80063b6:	d307      	bcc.n	80063c8 <TimestampIsReached+0x2c>
 80063b8:	697a      	ldr	r2, [r7, #20]
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	1ad3      	subs	r3, r2, r3
 80063be:	693a      	ldr	r2, [r7, #16]
 80063c0:	429a      	cmp	r2, r3
 80063c2:	d901      	bls.n	80063c8 <TimestampIsReached+0x2c>
 80063c4:	2201      	movs	r2, #1
 80063c6:	e000      	b.n	80063ca <TimestampIsReached+0x2e>
 80063c8:	2200      	movs	r2, #0
 80063ca:	230f      	movs	r3, #15
 80063cc:	18fb      	adds	r3, r7, r3
 80063ce:	701a      	strb	r2, [r3, #0]
 80063d0:	781a      	ldrb	r2, [r3, #0]
 80063d2:	2101      	movs	r1, #1
 80063d4:	400a      	ands	r2, r1
 80063d6:	701a      	strb	r2, [r3, #0]
=======
 80066c0:	697a      	ldr	r2, [r7, #20]
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	429a      	cmp	r2, r3
 80066c6:	d307      	bcc.n	80066d8 <TimestampIsReached+0x2c>
 80066c8:	697a      	ldr	r2, [r7, #20]
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	1ad3      	subs	r3, r2, r3
 80066ce:	693a      	ldr	r2, [r7, #16]
 80066d0:	429a      	cmp	r2, r3
 80066d2:	d901      	bls.n	80066d8 <TimestampIsReached+0x2c>
 80066d4:	2201      	movs	r2, #1
 80066d6:	e000      	b.n	80066da <TimestampIsReached+0x2e>
 80066d8:	2200      	movs	r2, #0
 80066da:	230f      	movs	r3, #15
 80066dc:	18fb      	adds	r3, r7, r3
 80066de:	701a      	strb	r2, [r3, #0]
 80066e0:	781a      	ldrb	r2, [r3, #0]
 80066e2:	2101      	movs	r1, #1
 80066e4:	400a      	ands	r2, r1
 80066e6:	701a      	strb	r2, [r3, #0]
>>>>>>> main
  // Ensures that the timestamp is so far ahead that it would have wrapped
  // around past the maximum value of the counter indicating an overflow
  // scenario.
  bool overflowWithTimestampAhead =
      (now < timestamp && timestamp - now > HALF_TIME);
<<<<<<< HEAD
 80063d8:	697a      	ldr	r2, [r7, #20]
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	429a      	cmp	r2, r3
 80063de:	d207      	bcs.n	80063f0 <TimestampIsReached+0x54>
 80063e0:	687a      	ldr	r2, [r7, #4]
 80063e2:	697b      	ldr	r3, [r7, #20]
 80063e4:	1ad3      	subs	r3, r2, r3
 80063e6:	693a      	ldr	r2, [r7, #16]
 80063e8:	429a      	cmp	r2, r3
 80063ea:	d201      	bcs.n	80063f0 <TimestampIsReached+0x54>
 80063ec:	2201      	movs	r2, #1
 80063ee:	e000      	b.n	80063f2 <TimestampIsReached+0x56>
 80063f0:	2200      	movs	r2, #0
  bool overflowWithTimestampAhead =
 80063f2:	200e      	movs	r0, #14
 80063f4:	183b      	adds	r3, r7, r0
 80063f6:	701a      	strb	r2, [r3, #0]
 80063f8:	781a      	ldrb	r2, [r3, #0]
 80063fa:	2101      	movs	r1, #1
 80063fc:	400a      	ands	r2, r1
 80063fe:	701a      	strb	r2, [r3, #0]

  if (noOverflow || overflowWithTimestampAhead) {
 8006400:	230f      	movs	r3, #15
 8006402:	18fb      	adds	r3, r7, r3
 8006404:	781b      	ldrb	r3, [r3, #0]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d103      	bne.n	8006412 <TimestampIsReached+0x76>
 800640a:	183b      	adds	r3, r7, r0
 800640c:	781b      	ldrb	r3, [r3, #0]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d001      	beq.n	8006416 <TimestampIsReached+0x7a>
    // Timestamp has been reached
    return true;
 8006412:	2301      	movs	r3, #1
 8006414:	e000      	b.n	8006418 <TimestampIsReached+0x7c>
=======
 80066e8:	697a      	ldr	r2, [r7, #20]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	429a      	cmp	r2, r3
 80066ee:	d207      	bcs.n	8006700 <TimestampIsReached+0x54>
 80066f0:	687a      	ldr	r2, [r7, #4]
 80066f2:	697b      	ldr	r3, [r7, #20]
 80066f4:	1ad3      	subs	r3, r2, r3
 80066f6:	693a      	ldr	r2, [r7, #16]
 80066f8:	429a      	cmp	r2, r3
 80066fa:	d201      	bcs.n	8006700 <TimestampIsReached+0x54>
 80066fc:	2201      	movs	r2, #1
 80066fe:	e000      	b.n	8006702 <TimestampIsReached+0x56>
 8006700:	2200      	movs	r2, #0
  bool overflowWithTimestampAhead =
 8006702:	200e      	movs	r0, #14
 8006704:	183b      	adds	r3, r7, r0
 8006706:	701a      	strb	r2, [r3, #0]
 8006708:	781a      	ldrb	r2, [r3, #0]
 800670a:	2101      	movs	r1, #1
 800670c:	400a      	ands	r2, r1
 800670e:	701a      	strb	r2, [r3, #0]

  if (noOverflow || overflowWithTimestampAhead) {
 8006710:	230f      	movs	r3, #15
 8006712:	18fb      	adds	r3, r7, r3
 8006714:	781b      	ldrb	r3, [r3, #0]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d103      	bne.n	8006722 <TimestampIsReached+0x76>
 800671a:	183b      	adds	r3, r7, r0
 800671c:	781b      	ldrb	r3, [r3, #0]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d001      	beq.n	8006726 <TimestampIsReached+0x7a>
    // Timestamp has been reached
    return true;
 8006722:	2301      	movs	r3, #1
 8006724:	e000      	b.n	8006728 <TimestampIsReached+0x7c>
>>>>>>> main
  }

  // Timestamp not yet reached
  return false;
<<<<<<< HEAD
 8006416:	2300      	movs	r3, #0
}
 8006418:	0018      	movs	r0, r3
 800641a:	46bd      	mov	sp, r7
 800641c:	b006      	add	sp, #24
 800641e:	bd80      	pop	{r7, pc}
 8006420:	7fffffff 	.word	0x7fffffff

08006424 <AddTimestamp>:

static void AddTimestamp(char *stamp) {
 8006424:	b580      	push	{r7, lr}
 8006426:	b082      	sub	sp, #8
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
  sprintf(stamp, "[%08lu] ", (uint32_t)HAL_GetTick());
 800642c:	f000 fc2a 	bl	8006c84 <HAL_GetTick>
 8006430:	0002      	movs	r2, r0
 8006432:	4904      	ldr	r1, [pc, #16]	@ (8006444 <AddTimestamp+0x20>)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	0018      	movs	r0, r3
 8006438:	f007 f8d0 	bl	800d5dc <siprintf>
}
 800643c:	46c0      	nop			@ (mov r8, r8)
 800643e:	46bd      	mov	sp, r7
 8006440:	b002      	add	sp, #8
 8006442:	bd80      	pop	{r7, pc}
 8006444:	080102d4 	.word	0x080102d4

08006448 <CreateLine>:

void CreateLine(VerboseLevel verboseLevel, char *tag, char *format, ...) {
 8006448:	b40c      	push	{r2, r3}
 800644a:	b5b0      	push	{r4, r5, r7, lr}
 800644c:	4c2b      	ldr	r4, [pc, #172]	@ (80064fc <CreateLine+0xb4>)
 800644e:	44a5      	add	sp, r4
 8006450:	af00      	add	r7, sp, #0
 8006452:	0002      	movs	r2, r0
 8006454:	6039      	str	r1, [r7, #0]
 8006456:	4b2a      	ldr	r3, [pc, #168]	@ (8006500 <CreateLine+0xb8>)
 8006458:	2182      	movs	r1, #130	@ 0x82
 800645a:	00c9      	lsls	r1, r1, #3
 800645c:	185b      	adds	r3, r3, r1
 800645e:	19db      	adds	r3, r3, r7
 8006460:	701a      	strb	r2, [r3, #0]

  if (verboseLevel > CurrentVerboseLevel) {
 8006462:	4b28      	ldr	r3, [pc, #160]	@ (8006504 <CreateLine+0xbc>)
 8006464:	781b      	ldrb	r3, [r3, #0]
 8006466:	4a26      	ldr	r2, [pc, #152]	@ (8006500 <CreateLine+0xb8>)
 8006468:	1852      	adds	r2, r2, r1
 800646a:	19d2      	adds	r2, r2, r7
 800646c:	7812      	ldrb	r2, [r2, #0]
 800646e:	429a      	cmp	r2, r3
 8006470:	d83b      	bhi.n	80064ea <CreateLine+0xa2>
=======
 8006726:	2300      	movs	r3, #0
}
 8006728:	0018      	movs	r0, r3
 800672a:	46bd      	mov	sp, r7
 800672c:	b006      	add	sp, #24
 800672e:	bd80      	pop	{r7, pc}
 8006730:	7fffffff 	.word	0x7fffffff

08006734 <AddTimestamp>:

static void AddTimestamp(char *stamp) {
 8006734:	b580      	push	{r7, lr}
 8006736:	b082      	sub	sp, #8
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
  sprintf(stamp, "[%08lu] ", (uint32_t)HAL_GetTick());
 800673c:	f000 fc04 	bl	8006f48 <HAL_GetTick>
 8006740:	0002      	movs	r2, r0
 8006742:	4904      	ldr	r1, [pc, #16]	@ (8006754 <AddTimestamp+0x20>)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	0018      	movs	r0, r3
 8006748:	f007 f894 	bl	800d874 <siprintf>
}
 800674c:	46c0      	nop			@ (mov r8, r8)
 800674e:	46bd      	mov	sp, r7
 8006750:	b002      	add	sp, #8
 8006752:	bd80      	pop	{r7, pc}
 8006754:	08010494 	.word	0x08010494

08006758 <CreateLine>:

void CreateLine(VerboseLevel verboseLevel, char *tag, char *format, ...) {
 8006758:	b40c      	push	{r2, r3}
 800675a:	b5b0      	push	{r4, r5, r7, lr}
 800675c:	4c2b      	ldr	r4, [pc, #172]	@ (800680c <CreateLine+0xb4>)
 800675e:	44a5      	add	sp, r4
 8006760:	af00      	add	r7, sp, #0
 8006762:	0002      	movs	r2, r0
 8006764:	6039      	str	r1, [r7, #0]
 8006766:	4b2a      	ldr	r3, [pc, #168]	@ (8006810 <CreateLine+0xb8>)
 8006768:	2182      	movs	r1, #130	@ 0x82
 800676a:	00c9      	lsls	r1, r1, #3
 800676c:	185b      	adds	r3, r3, r1
 800676e:	19db      	adds	r3, r3, r7
 8006770:	701a      	strb	r2, [r3, #0]

  if (verboseLevel > CurrentVerboseLevel) {
 8006772:	4b28      	ldr	r3, [pc, #160]	@ (8006814 <CreateLine+0xbc>)
 8006774:	781b      	ldrb	r3, [r3, #0]
 8006776:	4a26      	ldr	r2, [pc, #152]	@ (8006810 <CreateLine+0xb8>)
 8006778:	1852      	adds	r2, r2, r1
 800677a:	19d2      	adds	r2, r2, r7
 800677c:	7812      	ldrb	r2, [r2, #0]
 800677e:	429a      	cmp	r2, r3
 8006780:	d83b      	bhi.n	80067fa <CreateLine+0xa2>
>>>>>>> main
    return;
  }
  char textBuffer[TEXTBUFFER_LEN];

  // Format the initial part of the message with the tag and timestamp
  sprintf(textBuffer, "%s ", tag);
<<<<<<< HEAD
 8006472:	683a      	ldr	r2, [r7, #0]
 8006474:	4924      	ldr	r1, [pc, #144]	@ (8006508 <CreateLine+0xc0>)
 8006476:	240c      	movs	r4, #12
 8006478:	193b      	adds	r3, r7, r4
 800647a:	0018      	movs	r0, r3
 800647c:	f007 f8ae 	bl	800d5dc <siprintf>

  if (CurrentVerboseLevel > VERBOSE_MINIMAL) {
 8006480:	4b20      	ldr	r3, [pc, #128]	@ (8006504 <CreateLine+0xbc>)
 8006482:	781b      	ldrb	r3, [r3, #0]
 8006484:	2b01      	cmp	r3, #1
 8006486:	d909      	bls.n	800649c <CreateLine+0x54>
    AddTimestamp(&textBuffer[strlen(textBuffer)]);
 8006488:	193b      	adds	r3, r7, r4
 800648a:	0018      	movs	r0, r3
 800648c:	f7f9 fe3c 	bl	8000108 <strlen>
 8006490:	0002      	movs	r2, r0
 8006492:	193b      	adds	r3, r7, r4
 8006494:	189b      	adds	r3, r3, r2
 8006496:	0018      	movs	r0, r3
 8006498:	f7ff ffc4 	bl	8006424 <AddTimestamp>
  }
  int lineOffset = strlen(textBuffer);
 800649c:	240c      	movs	r4, #12
 800649e:	193b      	adds	r3, r7, r4
 80064a0:	0018      	movs	r0, r3
 80064a2:	f7f9 fe31 	bl	8000108 <strlen>
 80064a6:	0003      	movs	r3, r0
 80064a8:	4918      	ldr	r1, [pc, #96]	@ (800650c <CreateLine+0xc4>)
 80064aa:	187a      	adds	r2, r7, r1
 80064ac:	6013      	str	r3, [r2, #0]
=======
 8006782:	683a      	ldr	r2, [r7, #0]
 8006784:	4924      	ldr	r1, [pc, #144]	@ (8006818 <CreateLine+0xc0>)
 8006786:	240c      	movs	r4, #12
 8006788:	193b      	adds	r3, r7, r4
 800678a:	0018      	movs	r0, r3
 800678c:	f007 f872 	bl	800d874 <siprintf>

  if (CurrentVerboseLevel > VERBOSE_MINIMAL) {
 8006790:	4b20      	ldr	r3, [pc, #128]	@ (8006814 <CreateLine+0xbc>)
 8006792:	781b      	ldrb	r3, [r3, #0]
 8006794:	2b01      	cmp	r3, #1
 8006796:	d909      	bls.n	80067ac <CreateLine+0x54>
    AddTimestamp(&textBuffer[strlen(textBuffer)]);
 8006798:	193b      	adds	r3, r7, r4
 800679a:	0018      	movs	r0, r3
 800679c:	f7f9 fcb4 	bl	8000108 <strlen>
 80067a0:	0002      	movs	r2, r0
 80067a2:	193b      	adds	r3, r7, r4
 80067a4:	189b      	adds	r3, r3, r2
 80067a6:	0018      	movs	r0, r3
 80067a8:	f7ff ffc4 	bl	8006734 <AddTimestamp>
  }
  int lineOffset = strlen(textBuffer);
 80067ac:	240c      	movs	r4, #12
 80067ae:	193b      	adds	r3, r7, r4
 80067b0:	0018      	movs	r0, r3
 80067b2:	f7f9 fca9 	bl	8000108 <strlen>
 80067b6:	0003      	movs	r3, r0
 80067b8:	4918      	ldr	r1, [pc, #96]	@ (800681c <CreateLine+0xc4>)
 80067ba:	187a      	adds	r2, r7, r1
 80067bc:	6013      	str	r3, [r2, #0]
>>>>>>> main

  // Format the rest of the message with the variable arguments
  va_list args;
  va_start(args, format);
<<<<<<< HEAD
 80064ae:	4b18      	ldr	r3, [pc, #96]	@ (8006510 <CreateLine+0xc8>)
 80064b0:	2508      	movs	r5, #8
 80064b2:	195b      	adds	r3, r3, r5
 80064b4:	19db      	adds	r3, r3, r7
 80064b6:	60bb      	str	r3, [r7, #8]
  vsnprintf(&textBuffer[lineOffset], TEXTBUFFER_LEN - lineOffset, format, args);
 80064b8:	193a      	adds	r2, r7, r4
 80064ba:	187b      	adds	r3, r7, r1
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	18d0      	adds	r0, r2, r3
 80064c0:	187b      	adds	r3, r7, r1
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	2280      	movs	r2, #128	@ 0x80
 80064c6:	00d2      	lsls	r2, r2, #3
 80064c8:	1ad3      	subs	r3, r2, r3
 80064ca:	0019      	movs	r1, r3
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	2283      	movs	r2, #131	@ 0x83
 80064d0:	00d2      	lsls	r2, r2, #3
 80064d2:	1952      	adds	r2, r2, r5
 80064d4:	19d2      	adds	r2, r2, r7
 80064d6:	6812      	ldr	r2, [r2, #0]
 80064d8:	f007 f918 	bl	800d70c <vsniprintf>
=======
 80067be:	4b18      	ldr	r3, [pc, #96]	@ (8006820 <CreateLine+0xc8>)
 80067c0:	2508      	movs	r5, #8
 80067c2:	195b      	adds	r3, r3, r5
 80067c4:	19db      	adds	r3, r3, r7
 80067c6:	60bb      	str	r3, [r7, #8]
  vsnprintf(&textBuffer[lineOffset], TEXTBUFFER_LEN - lineOffset, format, args);
 80067c8:	193a      	adds	r2, r7, r4
 80067ca:	187b      	adds	r3, r7, r1
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	18d0      	adds	r0, r2, r3
 80067d0:	187b      	adds	r3, r7, r1
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	2280      	movs	r2, #128	@ 0x80
 80067d6:	00d2      	lsls	r2, r2, #3
 80067d8:	1ad3      	subs	r3, r2, r3
 80067da:	0019      	movs	r1, r3
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	2283      	movs	r2, #131	@ 0x83
 80067e0:	00d2      	lsls	r2, r2, #3
 80067e2:	1952      	adds	r2, r2, r5
 80067e4:	19d2      	adds	r2, r2, r7
 80067e6:	6812      	ldr	r2, [r2, #0]
 80067e8:	f007 f8dc 	bl	800d9a4 <vsniprintf>
>>>>>>> main
  va_end(args);

  // Print the final formatted message
  printf("%s\r\n", textBuffer);
<<<<<<< HEAD
 80064dc:	193a      	adds	r2, r7, r4
 80064de:	4b0d      	ldr	r3, [pc, #52]	@ (8006514 <CreateLine+0xcc>)
 80064e0:	0011      	movs	r1, r2
 80064e2:	0018      	movs	r0, r3
 80064e4:	f007 f86a 	bl	800d5bc <iprintf>
 80064e8:	e000      	b.n	80064ec <CreateLine+0xa4>
    return;
 80064ea:	46c0      	nop			@ (mov r8, r8)
}
 80064ec:	46bd      	mov	sp, r7
 80064ee:	2382      	movs	r3, #130	@ 0x82
 80064f0:	00db      	lsls	r3, r3, #3
 80064f2:	449d      	add	sp, r3
 80064f4:	bcb0      	pop	{r4, r5, r7}
 80064f6:	bc08      	pop	{r3}
 80064f8:	b002      	add	sp, #8
 80064fa:	4718      	bx	r3
 80064fc:	fffffbf0 	.word	0xfffffbf0
 8006500:	fffffbf7 	.word	0xfffffbf7
 8006504:	20000030 	.word	0x20000030
 8006508:	080102e0 	.word	0x080102e0
 800650c:	0000040c 	.word	0x0000040c
 8006510:	0000041c 	.word	0x0000041c
 8006514:	080102e4 	.word	0x080102e4

08006518 <_write>:

int _write(int fd, const void *buf, size_t count) {
 8006518:	b580      	push	{r7, lr}
 800651a:	b084      	sub	sp, #16
 800651c:	af00      	add	r7, sp, #0
 800651e:	60f8      	str	r0, [r7, #12]
 8006520:	60b9      	str	r1, [r7, #8]
 8006522:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart1, buf, count, 100);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	b29a      	uxth	r2, r3
 8006528:	68b9      	ldr	r1, [r7, #8]
 800652a:	4804      	ldr	r0, [pc, #16]	@ (800653c <_write+0x24>)
 800652c:	2364      	movs	r3, #100	@ 0x64
 800652e:	f005 f9bb 	bl	800b8a8 <HAL_UART_Transmit>
  return count;
 8006532:	687b      	ldr	r3, [r7, #4]
}
 8006534:	0018      	movs	r0, r3
 8006536:	46bd      	mov	sp, r7
 8006538:	b004      	add	sp, #16
 800653a:	bd80      	pop	{r7, pc}
 800653c:	20000a58 	.word	0x20000a58

08006540 <SetVerboseLevel>:

void SetVerboseLevel(VerboseLevel level) { CurrentVerboseLevel = level; }
 8006540:	b580      	push	{r7, lr}
 8006542:	b082      	sub	sp, #8
 8006544:	af00      	add	r7, sp, #0
 8006546:	0002      	movs	r2, r0
 8006548:	1dfb      	adds	r3, r7, #7
 800654a:	701a      	strb	r2, [r3, #0]
 800654c:	4b03      	ldr	r3, [pc, #12]	@ (800655c <SetVerboseLevel+0x1c>)
 800654e:	1dfa      	adds	r2, r7, #7
 8006550:	7812      	ldrb	r2, [r2, #0]
 8006552:	701a      	strb	r2, [r3, #0]
 8006554:	46c0      	nop			@ (mov r8, r8)
 8006556:	46bd      	mov	sp, r7
 8006558:	b002      	add	sp, #8
 800655a:	bd80      	pop	{r7, pc}
 800655c:	20000030 	.word	0x20000030

08006560 <GetCurrentHalTicks>:

uint32_t GetCurrentHalTicks(void) {
 8006560:	b580      	push	{r7, lr}
 8006562:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8006564:	f000 fb8e 	bl	8006c84 <HAL_GetTick>
 8006568:	0003      	movs	r3, r0
}
 800656a:	0018      	movs	r0, r3
 800656c:	46bd      	mov	sp, r7
 800656e:	bd80      	pop	{r7, pc}

08006570 <BinaryReleaseInfo>:

void BinaryReleaseInfo() {
 8006570:	b580      	push	{r7, lr}
 8006572:	b082      	sub	sp, #8
 8006574:	af02      	add	r7, sp, #8
  Info("=-=-=-=-=-=WOTS Gadget started.=-=-=-=-=-=");
 8006576:	4a0f      	ldr	r2, [pc, #60]	@ (80065b4 <BinaryReleaseInfo+0x44>)
 8006578:	4b0f      	ldr	r3, [pc, #60]	@ (80065b8 <BinaryReleaseInfo+0x48>)
 800657a:	0019      	movs	r1, r3
 800657c:	2002      	movs	r0, #2
 800657e:	f7ff ff63 	bl	8006448 <CreateLine>
  Info("Build on: %s at %s", __DATE__, __TIME__);
 8006582:	480e      	ldr	r0, [pc, #56]	@ (80065bc <BinaryReleaseInfo+0x4c>)
 8006584:	4a0e      	ldr	r2, [pc, #56]	@ (80065c0 <BinaryReleaseInfo+0x50>)
 8006586:	490c      	ldr	r1, [pc, #48]	@ (80065b8 <BinaryReleaseInfo+0x48>)
 8006588:	4b0e      	ldr	r3, [pc, #56]	@ (80065c4 <BinaryReleaseInfo+0x54>)
 800658a:	9300      	str	r3, [sp, #0]
 800658c:	0003      	movs	r3, r0
 800658e:	2002      	movs	r0, #2
 8006590:	f7ff ff5a 	bl	8006448 <CreateLine>
  // Format: YY'w'WWv
  Info("Git: 24w33a");
 8006594:	4a0c      	ldr	r2, [pc, #48]	@ (80065c8 <BinaryReleaseInfo+0x58>)
 8006596:	4b08      	ldr	r3, [pc, #32]	@ (80065b8 <BinaryReleaseInfo+0x48>)
 8006598:	0019      	movs	r1, r3
 800659a:	2002      	movs	r0, #2
 800659c:	f7ff ff54 	bl	8006448 <CreateLine>
  Info("Software version: %s", SRC_VERSION);
 80065a0:	4b0a      	ldr	r3, [pc, #40]	@ (80065cc <BinaryReleaseInfo+0x5c>)
 80065a2:	4a0b      	ldr	r2, [pc, #44]	@ (80065d0 <BinaryReleaseInfo+0x60>)
 80065a4:	4904      	ldr	r1, [pc, #16]	@ (80065b8 <BinaryReleaseInfo+0x48>)
 80065a6:	2002      	movs	r0, #2
 80065a8:	f7ff ff4e 	bl	8006448 <CreateLine>
}
 80065ac:	46c0      	nop			@ (mov r8, r8)
 80065ae:	46bd      	mov	sp, r7
 80065b0:	bd80      	pop	{r7, pc}
 80065b2:	46c0      	nop			@ (mov r8, r8)
 80065b4:	080102ec 	.word	0x080102ec
 80065b8:	08010318 	.word	0x08010318
 80065bc:	0801031c 	.word	0x0801031c
 80065c0:	08010328 	.word	0x08010328
 80065c4:	0801033c 	.word	0x0801033c
 80065c8:	08010348 	.word	0x08010348
 80065cc:	08010354 	.word	0x08010354
 80065d0:	0801035c 	.word	0x0801035c

080065d4 <ReadRegister>:
=======
 80067ec:	193a      	adds	r2, r7, r4
 80067ee:	4b0d      	ldr	r3, [pc, #52]	@ (8006824 <CreateLine+0xcc>)
 80067f0:	0011      	movs	r1, r2
 80067f2:	0018      	movs	r0, r3
 80067f4:	f007 f82e 	bl	800d854 <iprintf>
 80067f8:	e000      	b.n	80067fc <CreateLine+0xa4>
    return;
 80067fa:	46c0      	nop			@ (mov r8, r8)
}
 80067fc:	46bd      	mov	sp, r7
 80067fe:	2382      	movs	r3, #130	@ 0x82
 8006800:	00db      	lsls	r3, r3, #3
 8006802:	449d      	add	sp, r3
 8006804:	bcb0      	pop	{r4, r5, r7}
 8006806:	bc08      	pop	{r3}
 8006808:	b002      	add	sp, #8
 800680a:	4718      	bx	r3
 800680c:	fffffbf0 	.word	0xfffffbf0
 8006810:	fffffbf7 	.word	0xfffffbf7
 8006814:	2000003c 	.word	0x2000003c
 8006818:	080104a0 	.word	0x080104a0
 800681c:	0000040c 	.word	0x0000040c
 8006820:	0000041c 	.word	0x0000041c
 8006824:	080104a4 	.word	0x080104a4

08006828 <_write>:

int _write(int fd, const void *buf, size_t count) {
 8006828:	b580      	push	{r7, lr}
 800682a:	b084      	sub	sp, #16
 800682c:	af00      	add	r7, sp, #0
 800682e:	60f8      	str	r0, [r7, #12]
 8006830:	60b9      	str	r1, [r7, #8]
 8006832:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart1, buf, count, 100);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	b29a      	uxth	r2, r3
 8006838:	68b9      	ldr	r1, [r7, #8]
 800683a:	4804      	ldr	r0, [pc, #16]	@ (800684c <_write+0x24>)
 800683c:	2364      	movs	r3, #100	@ 0x64
 800683e:	f005 f97f 	bl	800bb40 <HAL_UART_Transmit>
  return count;
 8006842:	687b      	ldr	r3, [r7, #4]
}
 8006844:	0018      	movs	r0, r3
 8006846:	46bd      	mov	sp, r7
 8006848:	b004      	add	sp, #16
 800684a:	bd80      	pop	{r7, pc}
 800684c:	20000db8 	.word	0x20000db8

08006850 <SetVerboseLevel>:

void SetVerboseLevel(VerboseLevel level) { CurrentVerboseLevel = level; }
 8006850:	b580      	push	{r7, lr}
 8006852:	b082      	sub	sp, #8
 8006854:	af00      	add	r7, sp, #0
 8006856:	0002      	movs	r2, r0
 8006858:	1dfb      	adds	r3, r7, #7
 800685a:	701a      	strb	r2, [r3, #0]
 800685c:	4b03      	ldr	r3, [pc, #12]	@ (800686c <SetVerboseLevel+0x1c>)
 800685e:	1dfa      	adds	r2, r7, #7
 8006860:	7812      	ldrb	r2, [r2, #0]
 8006862:	701a      	strb	r2, [r3, #0]
 8006864:	46c0      	nop			@ (mov r8, r8)
 8006866:	46bd      	mov	sp, r7
 8006868:	b002      	add	sp, #8
 800686a:	bd80      	pop	{r7, pc}
 800686c:	2000003c 	.word	0x2000003c

08006870 <GetCurrentHalTicks>:

uint32_t GetCurrentHalTicks(void) {
 8006870:	b580      	push	{r7, lr}
 8006872:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8006874:	f000 fb68 	bl	8006f48 <HAL_GetTick>
 8006878:	0003      	movs	r3, r0
}
 800687a:	0018      	movs	r0, r3
 800687c:	46bd      	mov	sp, r7
 800687e:	bd80      	pop	{r7, pc}

08006880 <BinaryReleaseInfo>:

void BinaryReleaseInfo() {
 8006880:	b580      	push	{r7, lr}
 8006882:	b082      	sub	sp, #8
 8006884:	af02      	add	r7, sp, #8
  Info("=-=-=-=-=-=WOTS Gadget started.=-=-=-=-=-=");
 8006886:	4a0f      	ldr	r2, [pc, #60]	@ (80068c4 <BinaryReleaseInfo+0x44>)
 8006888:	4b0f      	ldr	r3, [pc, #60]	@ (80068c8 <BinaryReleaseInfo+0x48>)
 800688a:	0019      	movs	r1, r3
 800688c:	2002      	movs	r0, #2
 800688e:	f7ff ff63 	bl	8006758 <CreateLine>
  Info("Build on: %s at %s", __DATE__, __TIME__);
 8006892:	480e      	ldr	r0, [pc, #56]	@ (80068cc <BinaryReleaseInfo+0x4c>)
 8006894:	4a0e      	ldr	r2, [pc, #56]	@ (80068d0 <BinaryReleaseInfo+0x50>)
 8006896:	490c      	ldr	r1, [pc, #48]	@ (80068c8 <BinaryReleaseInfo+0x48>)
 8006898:	4b0e      	ldr	r3, [pc, #56]	@ (80068d4 <BinaryReleaseInfo+0x54>)
 800689a:	9300      	str	r3, [sp, #0]
 800689c:	0003      	movs	r3, r0
 800689e:	2002      	movs	r0, #2
 80068a0:	f7ff ff5a 	bl	8006758 <CreateLine>
  // Format: YY'w'WWv
  Info("Git: 24w28a");
 80068a4:	4a0c      	ldr	r2, [pc, #48]	@ (80068d8 <BinaryReleaseInfo+0x58>)
 80068a6:	4b08      	ldr	r3, [pc, #32]	@ (80068c8 <BinaryReleaseInfo+0x48>)
 80068a8:	0019      	movs	r1, r3
 80068aa:	2002      	movs	r0, #2
 80068ac:	f7ff ff54 	bl	8006758 <CreateLine>
  Info("Software version: %s", SRC_VERSION);
 80068b0:	4b0a      	ldr	r3, [pc, #40]	@ (80068dc <BinaryReleaseInfo+0x5c>)
 80068b2:	4a0b      	ldr	r2, [pc, #44]	@ (80068e0 <BinaryReleaseInfo+0x60>)
 80068b4:	4904      	ldr	r1, [pc, #16]	@ (80068c8 <BinaryReleaseInfo+0x48>)
 80068b6:	2002      	movs	r0, #2
 80068b8:	f7ff ff4e 	bl	8006758 <CreateLine>
}
 80068bc:	46c0      	nop			@ (mov r8, r8)
 80068be:	46bd      	mov	sp, r7
 80068c0:	bd80      	pop	{r7, pc}
 80068c2:	46c0      	nop			@ (mov r8, r8)
 80068c4:	080104ac 	.word	0x080104ac
 80068c8:	080104d8 	.word	0x080104d8
 80068cc:	080104dc 	.word	0x080104dc
 80068d0:	080104e8 	.word	0x080104e8
 80068d4:	080104fc 	.word	0x080104fc
 80068d8:	08010508 	.word	0x08010508
 80068dc:	08010514 	.word	0x08010514
 80068e0:	0801051c 	.word	0x0801051c

080068e4 <ReadRegister>:
>>>>>>> main
static bool MeasurementDone = false;

//static uint32_t SensorNextRunTime = HIDS_SENSOR_WAIT_TIME_HIGH;
//static uint32_t SensorWaitTime_ms = HIDS_SENSOR_WAIT_TIME_HIGH;

static void ReadRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
<<<<<<< HEAD
 80065d4:	b590      	push	{r4, r7, lr}
 80065d6:	b083      	sub	sp, #12
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6039      	str	r1, [r7, #0]
 80065dc:	0011      	movs	r1, r2
 80065de:	1dfb      	adds	r3, r7, #7
 80065e0:	1c02      	adds	r2, r0, #0
 80065e2:	701a      	strb	r2, [r3, #0]
 80065e4:	1dbb      	adds	r3, r7, #6
 80065e6:	1c0a      	adds	r2, r1, #0
 80065e8:	701a      	strb	r2, [r3, #0]
	if (ReadFunction != NULL) {
 80065ea:	4b08      	ldr	r3, [pc, #32]	@ (800660c <ReadRegister+0x38>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d008      	beq.n	8006604 <ReadRegister+0x30>
		ReadFunction(address, buffer, nrBytes);
 80065f2:	4b06      	ldr	r3, [pc, #24]	@ (800660c <ReadRegister+0x38>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	1dba      	adds	r2, r7, #6
 80065f8:	7814      	ldrb	r4, [r2, #0]
 80065fa:	6839      	ldr	r1, [r7, #0]
 80065fc:	1dfa      	adds	r2, r7, #7
 80065fe:	7810      	ldrb	r0, [r2, #0]
 8006600:	0022      	movs	r2, r4
 8006602:	4798      	blx	r3
	}
}
 8006604:	46c0      	nop			@ (mov r8, r8)
 8006606:	46bd      	mov	sp, r7
 8006608:	b003      	add	sp, #12
 800660a:	bd90      	pop	{r4, r7, pc}
 800660c:	20000f4c 	.word	0x20000f4c

08006610 <WriteRegister>:

static void WriteRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8006610:	b590      	push	{r4, r7, lr}
 8006612:	b083      	sub	sp, #12
 8006614:	af00      	add	r7, sp, #0
 8006616:	6039      	str	r1, [r7, #0]
 8006618:	0011      	movs	r1, r2
 800661a:	1dfb      	adds	r3, r7, #7
 800661c:	1c02      	adds	r2, r0, #0
 800661e:	701a      	strb	r2, [r3, #0]
 8006620:	1dbb      	adds	r3, r7, #6
 8006622:	1c0a      	adds	r2, r1, #0
 8006624:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 8006626:	4b08      	ldr	r3, [pc, #32]	@ (8006648 <WriteRegister+0x38>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d008      	beq.n	8006640 <WriteRegister+0x30>
    WriteFunction(address, buffer, nrBytes);
 800662e:	4b06      	ldr	r3, [pc, #24]	@ (8006648 <WriteRegister+0x38>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	1dba      	adds	r2, r7, #6
 8006634:	7814      	ldrb	r4, [r2, #0]
 8006636:	6839      	ldr	r1, [r7, #0]
 8006638:	1dfa      	adds	r2, r7, #7
 800663a:	7810      	ldrb	r0, [r2, #0]
 800663c:	0022      	movs	r2, r4
 800663e:	4798      	blx	r3
  }
}
 8006640:	46c0      	nop			@ (mov r8, r8)
 8006642:	46bd      	mov	sp, r7
 8006644:	b003      	add	sp, #12
 8006646:	bd90      	pop	{r4, r7, pc}
 8006648:	20000f50 	.word	0x20000f50

0800664c <CalculateCRC>:

static uint8_t CalculateCRC(uint8_t* data, uint8_t length) {
 800664c:	b580      	push	{r7, lr}
 800664e:	b084      	sub	sp, #16
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
 8006654:	000a      	movs	r2, r1
 8006656:	1cfb      	adds	r3, r7, #3
 8006658:	701a      	strb	r2, [r3, #0]
  uint8_t crc = HIDS_CRC_INIT_VALUE;
 800665a:	230f      	movs	r3, #15
 800665c:	18fb      	adds	r3, r7, r3
 800665e:	22ff      	movs	r2, #255	@ 0xff
 8006660:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 8006662:	230e      	movs	r3, #14
 8006664:	18fb      	adds	r3, r7, r3
 8006666:	2200      	movs	r2, #0
 8006668:	701a      	strb	r2, [r3, #0]
 800666a:	e037      	b.n	80066dc <CalculateCRC+0x90>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 800666c:	230e      	movs	r3, #14
 800666e:	18fb      	adds	r3, r7, r3
 8006670:	781b      	ldrb	r3, [r3, #0]
 8006672:	687a      	ldr	r2, [r7, #4]
 8006674:	18d3      	adds	r3, r2, r3
 8006676:	7819      	ldrb	r1, [r3, #0]
 8006678:	220f      	movs	r2, #15
 800667a:	18bb      	adds	r3, r7, r2
 800667c:	18ba      	adds	r2, r7, r2
 800667e:	7812      	ldrb	r2, [r2, #0]
 8006680:	404a      	eors	r2, r1
 8006682:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 8006684:	230d      	movs	r3, #13
 8006686:	18fb      	adds	r3, r7, r3
 8006688:	2200      	movs	r2, #0
 800668a:	701a      	strb	r2, [r3, #0]
 800668c:	e01b      	b.n	80066c6 <CalculateCRC+0x7a>
      // If the leftmost (most significant) bit is set
      if (crc & HIDS_CRC_MSB_MASK) {
 800668e:	210f      	movs	r1, #15
 8006690:	187b      	adds	r3, r7, r1
 8006692:	781b      	ldrb	r3, [r3, #0]
 8006694:	b25b      	sxtb	r3, r3
 8006696:	2b00      	cmp	r3, #0
 8006698:	da09      	bge.n	80066ae <CalculateCRC+0x62>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ HIDS_CRC_POLYNOMIAL;
 800669a:	187b      	adds	r3, r7, r1
 800669c:	781b      	ldrb	r3, [r3, #0]
 800669e:	005b      	lsls	r3, r3, #1
 80066a0:	b25b      	sxtb	r3, r3
 80066a2:	2231      	movs	r2, #49	@ 0x31
 80066a4:	4053      	eors	r3, r2
 80066a6:	b25a      	sxtb	r2, r3
 80066a8:	187b      	adds	r3, r7, r1
 80066aa:	701a      	strb	r2, [r3, #0]
 80066ac:	e005      	b.n	80066ba <CalculateCRC+0x6e>
      } else {
          crc <<= 1;
 80066ae:	230f      	movs	r3, #15
 80066b0:	18fa      	adds	r2, r7, r3
 80066b2:	18fb      	adds	r3, r7, r3
 80066b4:	781b      	ldrb	r3, [r3, #0]
 80066b6:	18db      	adds	r3, r3, r3
 80066b8:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 80066ba:	210d      	movs	r1, #13
 80066bc:	187b      	adds	r3, r7, r1
 80066be:	781a      	ldrb	r2, [r3, #0]
 80066c0:	187b      	adds	r3, r7, r1
 80066c2:	3201      	adds	r2, #1
 80066c4:	701a      	strb	r2, [r3, #0]
 80066c6:	230d      	movs	r3, #13
 80066c8:	18fb      	adds	r3, r7, r3
 80066ca:	781b      	ldrb	r3, [r3, #0]
 80066cc:	2b07      	cmp	r3, #7
 80066ce:	d9de      	bls.n	800668e <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 80066d0:	210e      	movs	r1, #14
 80066d2:	187b      	adds	r3, r7, r1
 80066d4:	781a      	ldrb	r2, [r3, #0]
 80066d6:	187b      	adds	r3, r7, r1
 80066d8:	3201      	adds	r2, #1
 80066da:	701a      	strb	r2, [r3, #0]
 80066dc:	230e      	movs	r3, #14
 80066de:	18fa      	adds	r2, r7, r3
 80066e0:	1cfb      	adds	r3, r7, #3
 80066e2:	7812      	ldrb	r2, [r2, #0]
 80066e4:	781b      	ldrb	r3, [r3, #0]
 80066e6:	429a      	cmp	r2, r3
 80066e8:	d3c0      	bcc.n	800666c <CalculateCRC+0x20>
=======
 80068e4:	b590      	push	{r4, r7, lr}
 80068e6:	b083      	sub	sp, #12
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6039      	str	r1, [r7, #0]
 80068ec:	0011      	movs	r1, r2
 80068ee:	1dfb      	adds	r3, r7, #7
 80068f0:	1c02      	adds	r2, r0, #0
 80068f2:	701a      	strb	r2, [r3, #0]
 80068f4:	1dbb      	adds	r3, r7, #6
 80068f6:	1c0a      	adds	r2, r1, #0
 80068f8:	701a      	strb	r2, [r3, #0]
	if (ReadFunction != NULL) {
 80068fa:	4b08      	ldr	r3, [pc, #32]	@ (800691c <ReadRegister+0x38>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d008      	beq.n	8006914 <ReadRegister+0x30>
		ReadFunction(address, buffer, nrBytes);
 8006902:	4b06      	ldr	r3, [pc, #24]	@ (800691c <ReadRegister+0x38>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	1dba      	adds	r2, r7, #6
 8006908:	7814      	ldrb	r4, [r2, #0]
 800690a:	6839      	ldr	r1, [r7, #0]
 800690c:	1dfa      	adds	r2, r7, #7
 800690e:	7810      	ldrb	r0, [r2, #0]
 8006910:	0022      	movs	r2, r4
 8006912:	4798      	blx	r3
	}
}
 8006914:	46c0      	nop			@ (mov r8, r8)
 8006916:	46bd      	mov	sp, r7
 8006918:	b003      	add	sp, #12
 800691a:	bd90      	pop	{r4, r7, pc}
 800691c:	200012ac 	.word	0x200012ac

08006920 <WriteRegister>:

static void WriteRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8006920:	b590      	push	{r4, r7, lr}
 8006922:	b083      	sub	sp, #12
 8006924:	af00      	add	r7, sp, #0
 8006926:	6039      	str	r1, [r7, #0]
 8006928:	0011      	movs	r1, r2
 800692a:	1dfb      	adds	r3, r7, #7
 800692c:	1c02      	adds	r2, r0, #0
 800692e:	701a      	strb	r2, [r3, #0]
 8006930:	1dbb      	adds	r3, r7, #6
 8006932:	1c0a      	adds	r2, r1, #0
 8006934:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 8006936:	4b08      	ldr	r3, [pc, #32]	@ (8006958 <WriteRegister+0x38>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d008      	beq.n	8006950 <WriteRegister+0x30>
    WriteFunction(address, buffer, nrBytes);
 800693e:	4b06      	ldr	r3, [pc, #24]	@ (8006958 <WriteRegister+0x38>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	1dba      	adds	r2, r7, #6
 8006944:	7814      	ldrb	r4, [r2, #0]
 8006946:	6839      	ldr	r1, [r7, #0]
 8006948:	1dfa      	adds	r2, r7, #7
 800694a:	7810      	ldrb	r0, [r2, #0]
 800694c:	0022      	movs	r2, r4
 800694e:	4798      	blx	r3
  }
}
 8006950:	46c0      	nop			@ (mov r8, r8)
 8006952:	46bd      	mov	sp, r7
 8006954:	b003      	add	sp, #12
 8006956:	bd90      	pop	{r4, r7, pc}
 8006958:	200012b0 	.word	0x200012b0

0800695c <CalculateCRC>:

static uint8_t CalculateCRC(uint8_t* data, uint8_t length) {
 800695c:	b580      	push	{r7, lr}
 800695e:	b084      	sub	sp, #16
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
 8006964:	000a      	movs	r2, r1
 8006966:	1cfb      	adds	r3, r7, #3
 8006968:	701a      	strb	r2, [r3, #0]
  uint8_t crc = HIDS_CRC_INIT_VALUE;
 800696a:	230f      	movs	r3, #15
 800696c:	18fb      	adds	r3, r7, r3
 800696e:	22ff      	movs	r2, #255	@ 0xff
 8006970:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 8006972:	230e      	movs	r3, #14
 8006974:	18fb      	adds	r3, r7, r3
 8006976:	2200      	movs	r2, #0
 8006978:	701a      	strb	r2, [r3, #0]
 800697a:	e037      	b.n	80069ec <CalculateCRC+0x90>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 800697c:	230e      	movs	r3, #14
 800697e:	18fb      	adds	r3, r7, r3
 8006980:	781b      	ldrb	r3, [r3, #0]
 8006982:	687a      	ldr	r2, [r7, #4]
 8006984:	18d3      	adds	r3, r2, r3
 8006986:	7819      	ldrb	r1, [r3, #0]
 8006988:	220f      	movs	r2, #15
 800698a:	18bb      	adds	r3, r7, r2
 800698c:	18ba      	adds	r2, r7, r2
 800698e:	7812      	ldrb	r2, [r2, #0]
 8006990:	404a      	eors	r2, r1
 8006992:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 8006994:	230d      	movs	r3, #13
 8006996:	18fb      	adds	r3, r7, r3
 8006998:	2200      	movs	r2, #0
 800699a:	701a      	strb	r2, [r3, #0]
 800699c:	e01b      	b.n	80069d6 <CalculateCRC+0x7a>
      // If the leftmost (most significant) bit is set
      if (crc & HIDS_CRC_MSB_MASK) {
 800699e:	210f      	movs	r1, #15
 80069a0:	187b      	adds	r3, r7, r1
 80069a2:	781b      	ldrb	r3, [r3, #0]
 80069a4:	b25b      	sxtb	r3, r3
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	da09      	bge.n	80069be <CalculateCRC+0x62>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ HIDS_CRC_POLYNOMIAL;
 80069aa:	187b      	adds	r3, r7, r1
 80069ac:	781b      	ldrb	r3, [r3, #0]
 80069ae:	005b      	lsls	r3, r3, #1
 80069b0:	b25b      	sxtb	r3, r3
 80069b2:	2231      	movs	r2, #49	@ 0x31
 80069b4:	4053      	eors	r3, r2
 80069b6:	b25a      	sxtb	r2, r3
 80069b8:	187b      	adds	r3, r7, r1
 80069ba:	701a      	strb	r2, [r3, #0]
 80069bc:	e005      	b.n	80069ca <CalculateCRC+0x6e>
      } else {
          crc <<= 1;
 80069be:	230f      	movs	r3, #15
 80069c0:	18fa      	adds	r2, r7, r3
 80069c2:	18fb      	adds	r3, r7, r3
 80069c4:	781b      	ldrb	r3, [r3, #0]
 80069c6:	18db      	adds	r3, r3, r3
 80069c8:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 80069ca:	210d      	movs	r1, #13
 80069cc:	187b      	adds	r3, r7, r1
 80069ce:	781a      	ldrb	r2, [r3, #0]
 80069d0:	187b      	adds	r3, r7, r1
 80069d2:	3201      	adds	r2, #1
 80069d4:	701a      	strb	r2, [r3, #0]
 80069d6:	230d      	movs	r3, #13
 80069d8:	18fb      	adds	r3, r7, r3
 80069da:	781b      	ldrb	r3, [r3, #0]
 80069dc:	2b07      	cmp	r3, #7
 80069de:	d9de      	bls.n	800699e <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 80069e0:	210e      	movs	r1, #14
 80069e2:	187b      	adds	r3, r7, r1
 80069e4:	781a      	ldrb	r2, [r3, #0]
 80069e6:	187b      	adds	r3, r7, r1
 80069e8:	3201      	adds	r2, #1
 80069ea:	701a      	strb	r2, [r3, #0]
 80069ec:	230e      	movs	r3, #14
 80069ee:	18fa      	adds	r2, r7, r3
 80069f0:	1cfb      	adds	r3, r7, #3
 80069f2:	7812      	ldrb	r2, [r2, #0]
 80069f4:	781b      	ldrb	r3, [r3, #0]
 80069f6:	429a      	cmp	r2, r3
 80069f8:	d3c0      	bcc.n	800697c <CalculateCRC+0x20>
>>>>>>> main
      }
    }
  }

//  Debug("CRC calculated value: 0x%X", crc);
  return crc;
<<<<<<< HEAD
 80066ea:	230f      	movs	r3, #15
 80066ec:	18fb      	adds	r3, r7, r3
 80066ee:	781b      	ldrb	r3, [r3, #0]
}
 80066f0:	0018      	movs	r0, r3
 80066f2:	46bd      	mov	sp, r7
 80066f4:	b004      	add	sp, #16
 80066f6:	bd80      	pop	{r7, pc}

080066f8 <HIDS_Init>:
=======
 80069fa:	230f      	movs	r3, #15
 80069fc:	18fb      	adds	r3, r7, r3
 80069fe:	781b      	ldrb	r3, [r3, #0]
}
 8006a00:	0018      	movs	r0, r3
 8006a02:	46bd      	mov	sp, r7
 8006a04:	b004      	add	sp, #16
 8006a06:	bd80      	pop	{r7, pc}

08006a08 <HIDS_Init>:
>>>>>>> main
  uint8_t heaterReg = HeaterMode;
  WriteRegister(HIDS_I2C_ADDRESS, &heaterReg, 1);
  Info("Started the heater in mode: %d", heaterReg);
}

void HIDS_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
<<<<<<< HEAD
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b082      	sub	sp, #8
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
 8006700:	6039      	str	r1, [r7, #0]
	ReadFunction = readFunction;
 8006702:	4b0a      	ldr	r3, [pc, #40]	@ (800672c <HIDS_Init+0x34>)
 8006704:	687a      	ldr	r2, [r7, #4]
 8006706:	601a      	str	r2, [r3, #0]
	WriteFunction = writeFunction;
 8006708:	4b09      	ldr	r3, [pc, #36]	@ (8006730 <HIDS_Init+0x38>)
 800670a:	683a      	ldr	r2, [r7, #0]
 800670c:	601a      	str	r2, [r3, #0]
	HIDS_SetMeasurementMode(MeasureMode);
 800670e:	4b09      	ldr	r3, [pc, #36]	@ (8006734 <HIDS_Init+0x3c>)
 8006710:	781b      	ldrb	r3, [r3, #0]
 8006712:	0018      	movs	r0, r3
 8006714:	f000 f8d0 	bl	80068b8 <HIDS_SetMeasurementMode>
	HIDS_SetHeaterMode(HeaterMode);
 8006718:	4b07      	ldr	r3, [pc, #28]	@ (8006738 <HIDS_Init+0x40>)
 800671a:	781b      	ldrb	r3, [r3, #0]
 800671c:	0018      	movs	r0, r3
 800671e:	f000 f82b 	bl	8006778 <HIDS_SetHeaterMode>
//	HIDS_EnableHeater();
	// TODO: Enable heater after measurement is done and humidity is above a certain percentage, use formula.
}
 8006722:	46c0      	nop			@ (mov r8, r8)
 8006724:	46bd      	mov	sp, r7
 8006726:	b002      	add	sp, #8
 8006728:	bd80      	pop	{r7, pc}
 800672a:	46c0      	nop			@ (mov r8, r8)
 800672c:	20000f4c 	.word	0x20000f4c
 8006730:	20000f50 	.word	0x20000f50
 8006734:	20000032 	.word	0x20000032
 8006738:	20000031 	.word	0x20000031

0800673c <HIDS_StartMeasurement>:

void HIDS_StartMeasurement(void) {
 800673c:	b580      	push	{r7, lr}
 800673e:	af00      	add	r7, sp, #0
  HIDS_NextRunTime = GetCurrentHalTicks() + HIDS_Interval_ms;
 8006740:	f7ff ff0e 	bl	8006560 <GetCurrentHalTicks>
 8006744:	0002      	movs	r2, r0
 8006746:	4b08      	ldr	r3, [pc, #32]	@ (8006768 <HIDS_StartMeasurement+0x2c>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	18d2      	adds	r2, r2, r3
 800674c:	4b07      	ldr	r3, [pc, #28]	@ (800676c <HIDS_StartMeasurement+0x30>)
 800674e:	601a      	str	r2, [r3, #0]
  WriteRegister(HIDS_I2C_ADDRESS, &MeasureMode, 1);
 8006750:	4b07      	ldr	r3, [pc, #28]	@ (8006770 <HIDS_StartMeasurement+0x34>)
 8006752:	2201      	movs	r2, #1
 8006754:	0019      	movs	r1, r3
 8006756:	2044      	movs	r0, #68	@ 0x44
 8006758:	f7ff ff5a 	bl	8006610 <WriteRegister>
  MeasurementDone = false;
 800675c:	4b05      	ldr	r3, [pc, #20]	@ (8006774 <HIDS_StartMeasurement+0x38>)
 800675e:	2200      	movs	r2, #0
 8006760:	701a      	strb	r2, [r3, #0]
}
 8006762:	46c0      	nop			@ (mov r8, r8)
 8006764:	46bd      	mov	sp, r7
 8006766:	bd80      	pop	{r7, pc}
 8006768:	20000038 	.word	0x20000038
 800676c:	20000034 	.word	0x20000034
 8006770:	20000032 	.word	0x20000032
 8006774:	20000f62 	.word	0x20000f62

08006778 <HIDS_SetHeaterMode>:
=======
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b082      	sub	sp, #8
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
 8006a10:	6039      	str	r1, [r7, #0]
	ReadFunction = readFunction;
 8006a12:	4b0a      	ldr	r3, [pc, #40]	@ (8006a3c <HIDS_Init+0x34>)
 8006a14:	687a      	ldr	r2, [r7, #4]
 8006a16:	601a      	str	r2, [r3, #0]
	WriteFunction = writeFunction;
 8006a18:	4b09      	ldr	r3, [pc, #36]	@ (8006a40 <HIDS_Init+0x38>)
 8006a1a:	683a      	ldr	r2, [r7, #0]
 8006a1c:	601a      	str	r2, [r3, #0]
	HIDS_SetMeasurementMode(MeasureMode);
 8006a1e:	4b09      	ldr	r3, [pc, #36]	@ (8006a44 <HIDS_Init+0x3c>)
 8006a20:	781b      	ldrb	r3, [r3, #0]
 8006a22:	0018      	movs	r0, r3
 8006a24:	f000 f8d0 	bl	8006bc8 <HIDS_SetMeasurementMode>
	HIDS_SetHeaterMode(HeaterMode);
 8006a28:	4b07      	ldr	r3, [pc, #28]	@ (8006a48 <HIDS_Init+0x40>)
 8006a2a:	781b      	ldrb	r3, [r3, #0]
 8006a2c:	0018      	movs	r0, r3
 8006a2e:	f000 f82b 	bl	8006a88 <HIDS_SetHeaterMode>
//	HIDS_EnableHeater();
	// TODO: Enable heater after measurement is done and humidity is above a certain percentage, use formula.
}
 8006a32:	46c0      	nop			@ (mov r8, r8)
 8006a34:	46bd      	mov	sp, r7
 8006a36:	b002      	add	sp, #8
 8006a38:	bd80      	pop	{r7, pc}
 8006a3a:	46c0      	nop			@ (mov r8, r8)
 8006a3c:	200012ac 	.word	0x200012ac
 8006a40:	200012b0 	.word	0x200012b0
 8006a44:	2000003e 	.word	0x2000003e
 8006a48:	2000003d 	.word	0x2000003d

08006a4c <HIDS_StartMeasurement>:

void HIDS_StartMeasurement(void) {
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	af00      	add	r7, sp, #0
  HIDS_NextRunTime = GetCurrentHalTicks() + HIDS_Interval_ms;
 8006a50:	f7ff ff0e 	bl	8006870 <GetCurrentHalTicks>
 8006a54:	0002      	movs	r2, r0
 8006a56:	4b08      	ldr	r3, [pc, #32]	@ (8006a78 <HIDS_StartMeasurement+0x2c>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	18d2      	adds	r2, r2, r3
 8006a5c:	4b07      	ldr	r3, [pc, #28]	@ (8006a7c <HIDS_StartMeasurement+0x30>)
 8006a5e:	601a      	str	r2, [r3, #0]
  WriteRegister(HIDS_I2C_ADDRESS, &MeasureMode, 1);
 8006a60:	4b07      	ldr	r3, [pc, #28]	@ (8006a80 <HIDS_StartMeasurement+0x34>)
 8006a62:	2201      	movs	r2, #1
 8006a64:	0019      	movs	r1, r3
 8006a66:	2044      	movs	r0, #68	@ 0x44
 8006a68:	f7ff ff5a 	bl	8006920 <WriteRegister>
  MeasurementDone = false;
 8006a6c:	4b05      	ldr	r3, [pc, #20]	@ (8006a84 <HIDS_StartMeasurement+0x38>)
 8006a6e:	2200      	movs	r2, #0
 8006a70:	701a      	strb	r2, [r3, #0]
}
 8006a72:	46c0      	nop			@ (mov r8, r8)
 8006a74:	46bd      	mov	sp, r7
 8006a76:	bd80      	pop	{r7, pc}
 8006a78:	20000044 	.word	0x20000044
 8006a7c:	20000040 	.word	0x20000040
 8006a80:	2000003e 	.word	0x2000003e
 8006a84:	200012c2 	.word	0x200012c2

08006a88 <HIDS_SetHeaterMode>:
>>>>>>> main

void HIDS_SetMeasurementDuration(uint32_t duration) {
  HIDS_MeasurementDuration = duration;
}

void HIDS_SetHeaterMode(HIDSHeaterModes modeHeater) {
<<<<<<< HEAD
 8006778:	b580      	push	{r7, lr}
 800677a:	b082      	sub	sp, #8
 800677c:	af00      	add	r7, sp, #0
 800677e:	0002      	movs	r2, r0
 8006780:	1dfb      	adds	r3, r7, #7
 8006782:	701a      	strb	r2, [r3, #0]
  HeaterMode = modeHeater;
 8006784:	4b03      	ldr	r3, [pc, #12]	@ (8006794 <HIDS_SetHeaterMode+0x1c>)
 8006786:	1dfa      	adds	r2, r7, #7
 8006788:	7812      	ldrb	r2, [r2, #0]
 800678a:	701a      	strb	r2, [r3, #0]
}
 800678c:	46c0      	nop			@ (mov r8, r8)
 800678e:	46bd      	mov	sp, r7
 8006790:	b002      	add	sp, #8
 8006792:	bd80      	pop	{r7, pc}
 8006794:	20000031 	.word	0x20000031

08006798 <CheckCRC>:

static bool CheckCRC(uint8_t* data) {
 8006798:	b590      	push	{r4, r7, lr}
 800679a:	b085      	sub	sp, #20
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
=======
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b082      	sub	sp, #8
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	0002      	movs	r2, r0
 8006a90:	1dfb      	adds	r3, r7, #7
 8006a92:	701a      	strb	r2, [r3, #0]
  HeaterMode = modeHeater;
 8006a94:	4b03      	ldr	r3, [pc, #12]	@ (8006aa4 <HIDS_SetHeaterMode+0x1c>)
 8006a96:	1dfa      	adds	r2, r7, #7
 8006a98:	7812      	ldrb	r2, [r2, #0]
 8006a9a:	701a      	strb	r2, [r3, #0]
}
 8006a9c:	46c0      	nop			@ (mov r8, r8)
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	b002      	add	sp, #8
 8006aa2:	bd80      	pop	{r7, pc}
 8006aa4:	2000003d 	.word	0x2000003d

08006aa8 <CheckCRC>:

static bool CheckCRC(uint8_t* data) {
 8006aa8:	b590      	push	{r4, r7, lr}
 8006aaa:	b085      	sub	sp, #20
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
>>>>>>> main
  // Data format: 2 bytes for data, followed by an 8-bit CRC

	// Check CRC for the first segment
	uint8_t crcData1[2] = {data[0], data[1]};
<<<<<<< HEAD
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	781a      	ldrb	r2, [r3, #0]
 80067a4:	210c      	movs	r1, #12
 80067a6:	187b      	adds	r3, r7, r1
 80067a8:	701a      	strb	r2, [r3, #0]
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	785a      	ldrb	r2, [r3, #1]
 80067ae:	187b      	adds	r3, r7, r1
 80067b0:	705a      	strb	r2, [r3, #1]
	uint8_t crc1 = data[2];
 80067b2:	240f      	movs	r4, #15
 80067b4:	193b      	adds	r3, r7, r4
 80067b6:	687a      	ldr	r2, [r7, #4]
 80067b8:	7892      	ldrb	r2, [r2, #2]
 80067ba:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData1, 2) != crc1) {
 80067bc:	187b      	adds	r3, r7, r1
 80067be:	2102      	movs	r1, #2
 80067c0:	0018      	movs	r0, r3
 80067c2:	f7ff ff43 	bl	800664c <CalculateCRC>
 80067c6:	0003      	movs	r3, r0
 80067c8:	001a      	movs	r2, r3
 80067ca:	193b      	adds	r3, r7, r4
 80067cc:	781b      	ldrb	r3, [r3, #0]
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d007      	beq.n	80067e2 <CheckCRC+0x4a>
		Error("CRC check failed for the first segment.");
 80067d2:	4a17      	ldr	r2, [pc, #92]	@ (8006830 <CheckCRC+0x98>)
 80067d4:	4b17      	ldr	r3, [pc, #92]	@ (8006834 <CheckCRC+0x9c>)
 80067d6:	0019      	movs	r1, r3
 80067d8:	2001      	movs	r0, #1
 80067da:	f7ff fe35 	bl	8006448 <CreateLine>
		return false;
 80067de:	2300      	movs	r3, #0
 80067e0:	e021      	b.n	8006826 <CheckCRC+0x8e>
=======
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	781a      	ldrb	r2, [r3, #0]
 8006ab4:	210c      	movs	r1, #12
 8006ab6:	187b      	adds	r3, r7, r1
 8006ab8:	701a      	strb	r2, [r3, #0]
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	785a      	ldrb	r2, [r3, #1]
 8006abe:	187b      	adds	r3, r7, r1
 8006ac0:	705a      	strb	r2, [r3, #1]
	uint8_t crc1 = data[2];
 8006ac2:	240f      	movs	r4, #15
 8006ac4:	193b      	adds	r3, r7, r4
 8006ac6:	687a      	ldr	r2, [r7, #4]
 8006ac8:	7892      	ldrb	r2, [r2, #2]
 8006aca:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData1, 2) != crc1) {
 8006acc:	187b      	adds	r3, r7, r1
 8006ace:	2102      	movs	r1, #2
 8006ad0:	0018      	movs	r0, r3
 8006ad2:	f7ff ff43 	bl	800695c <CalculateCRC>
 8006ad6:	0003      	movs	r3, r0
 8006ad8:	001a      	movs	r2, r3
 8006ada:	193b      	adds	r3, r7, r4
 8006adc:	781b      	ldrb	r3, [r3, #0]
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d007      	beq.n	8006af2 <CheckCRC+0x4a>
		Error("CRC check failed for the first segment.");
 8006ae2:	4a17      	ldr	r2, [pc, #92]	@ (8006b40 <CheckCRC+0x98>)
 8006ae4:	4b17      	ldr	r3, [pc, #92]	@ (8006b44 <CheckCRC+0x9c>)
 8006ae6:	0019      	movs	r1, r3
 8006ae8:	2001      	movs	r0, #1
 8006aea:	f7ff fe35 	bl	8006758 <CreateLine>
		return false;
 8006aee:	2300      	movs	r3, #0
 8006af0:	e021      	b.n	8006b36 <CheckCRC+0x8e>
>>>>>>> main
	}

	// Check CRC for the second segment
	uint8_t crcData2[2] = {data[3], data[4]};
<<<<<<< HEAD
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	78da      	ldrb	r2, [r3, #3]
 80067e6:	2108      	movs	r1, #8
 80067e8:	187b      	adds	r3, r7, r1
 80067ea:	701a      	strb	r2, [r3, #0]
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	791a      	ldrb	r2, [r3, #4]
 80067f0:	187b      	adds	r3, r7, r1
 80067f2:	705a      	strb	r2, [r3, #1]
	uint8_t crc2 = data[5];
 80067f4:	240e      	movs	r4, #14
 80067f6:	193b      	adds	r3, r7, r4
 80067f8:	687a      	ldr	r2, [r7, #4]
 80067fa:	7952      	ldrb	r2, [r2, #5]
 80067fc:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData2, 2) != crc2) {
 80067fe:	187b      	adds	r3, r7, r1
 8006800:	2102      	movs	r1, #2
 8006802:	0018      	movs	r0, r3
 8006804:	f7ff ff22 	bl	800664c <CalculateCRC>
 8006808:	0003      	movs	r3, r0
 800680a:	001a      	movs	r2, r3
 800680c:	193b      	adds	r3, r7, r4
 800680e:	781b      	ldrb	r3, [r3, #0]
 8006810:	4293      	cmp	r3, r2
 8006812:	d007      	beq.n	8006824 <CheckCRC+0x8c>
		Error("CRC check failed for the second segment.");
 8006814:	4a08      	ldr	r2, [pc, #32]	@ (8006838 <CheckCRC+0xa0>)
 8006816:	4b07      	ldr	r3, [pc, #28]	@ (8006834 <CheckCRC+0x9c>)
 8006818:	0019      	movs	r1, r3
 800681a:	2001      	movs	r0, #1
 800681c:	f7ff fe14 	bl	8006448 <CreateLine>
		return false;
 8006820:	2300      	movs	r3, #0
 8006822:	e000      	b.n	8006826 <CheckCRC+0x8e>
	}
	return true;
 8006824:	2301      	movs	r3, #1
}
 8006826:	0018      	movs	r0, r3
 8006828:	46bd      	mov	sp, r7
 800682a:	b005      	add	sp, #20
 800682c:	bd90      	pop	{r4, r7, pc}
 800682e:	46c0      	nop			@ (mov r8, r8)
 8006830:	08010398 	.word	0x08010398
 8006834:	080103c0 	.word	0x080103c0
 8006838:	080103c4 	.word	0x080103c4

0800683c <HIDS_DeviceConnected>:

bool HIDS_DeviceConnected(void) {
 800683c:	b580      	push	{r7, lr}
 800683e:	b084      	sub	sp, #16
 8006840:	af02      	add	r7, sp, #8
	uint8_t serialReg = HIDS_SERIAL_NUMBER_REG;
 8006842:	1dbb      	adds	r3, r7, #6
 8006844:	2289      	movs	r2, #137	@ 0x89
 8006846:	701a      	strb	r2, [r3, #0]
	WriteRegister(HIDS_I2C_ADDRESS, &serialReg, 1);
 8006848:	1dbb      	adds	r3, r7, #6
 800684a:	2201      	movs	r2, #1
 800684c:	0019      	movs	r1, r3
 800684e:	2044      	movs	r0, #68	@ 0x44
 8006850:	f7ff fede 	bl	8006610 <WriteRegister>
	HAL_Delay(30);
 8006854:	201e      	movs	r0, #30
 8006856:	f000 fa1f 	bl	8006c98 <HAL_Delay>
	ReadRegister(HIDS_I2C_ADDRESS, SerialBuffer, HIDS_SERIAL_BUFFER_LENGTH);
 800685a:	4b14      	ldr	r3, [pc, #80]	@ (80068ac <HIDS_DeviceConnected+0x70>)
 800685c:	2206      	movs	r2, #6
 800685e:	0019      	movs	r1, r3
 8006860:	2044      	movs	r0, #68	@ 0x44
 8006862:	f7ff feb7 	bl	80065d4 <ReadRegister>

	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 8006866:	1dfb      	adds	r3, r7, #7
 8006868:	2200      	movs	r2, #0
 800686a:	701a      	strb	r2, [r3, #0]
 800686c:	e011      	b.n	8006892 <HIDS_DeviceConnected+0x56>
		Info("HIDS_Device serial ID[%d]: 0x%X", i, SerialBuffer[i]);
 800686e:	1dfb      	adds	r3, r7, #7
 8006870:	7818      	ldrb	r0, [r3, #0]
 8006872:	1dfb      	adds	r3, r7, #7
 8006874:	781b      	ldrb	r3, [r3, #0]
 8006876:	4a0d      	ldr	r2, [pc, #52]	@ (80068ac <HIDS_DeviceConnected+0x70>)
 8006878:	5cd3      	ldrb	r3, [r2, r3]
 800687a:	4a0d      	ldr	r2, [pc, #52]	@ (80068b0 <HIDS_DeviceConnected+0x74>)
 800687c:	490d      	ldr	r1, [pc, #52]	@ (80068b4 <HIDS_DeviceConnected+0x78>)
 800687e:	9300      	str	r3, [sp, #0]
 8006880:	0003      	movs	r3, r0
 8006882:	2002      	movs	r0, #2
 8006884:	f7ff fde0 	bl	8006448 <CreateLine>
	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 8006888:	1dfb      	adds	r3, r7, #7
 800688a:	781a      	ldrb	r2, [r3, #0]
 800688c:	1dfb      	adds	r3, r7, #7
 800688e:	3201      	adds	r2, #1
 8006890:	701a      	strb	r2, [r3, #0]
 8006892:	1dfb      	adds	r3, r7, #7
 8006894:	781b      	ldrb	r3, [r3, #0]
 8006896:	2b05      	cmp	r3, #5
 8006898:	d9e9      	bls.n	800686e <HIDS_DeviceConnected+0x32>
	}
	return CheckCRC(SerialBuffer);
 800689a:	4b04      	ldr	r3, [pc, #16]	@ (80068ac <HIDS_DeviceConnected+0x70>)
 800689c:	0018      	movs	r0, r3
 800689e:	f7ff ff7b 	bl	8006798 <CheckCRC>
 80068a2:	0003      	movs	r3, r0
}
 80068a4:	0018      	movs	r0, r3
 80068a6:	46bd      	mov	sp, r7
 80068a8:	b002      	add	sp, #8
 80068aa:	bd80      	pop	{r7, pc}
 80068ac:	20000f54 	.word	0x20000f54
 80068b0:	080103f0 	.word	0x080103f0
 80068b4:	08010394 	.word	0x08010394

080068b8 <HIDS_SetMeasurementMode>:

void HIDS_SetMeasurementMode(HIDSMeasureModes modeMeasure) {
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b082      	sub	sp, #8
 80068bc:	af00      	add	r7, sp, #0
 80068be:	0002      	movs	r2, r0
 80068c0:	1dfb      	adds	r3, r7, #7
 80068c2:	701a      	strb	r2, [r3, #0]
	MeasureMode = modeMeasure;
 80068c4:	4b03      	ldr	r3, [pc, #12]	@ (80068d4 <HIDS_SetMeasurementMode+0x1c>)
 80068c6:	1dfa      	adds	r2, r7, #7
 80068c8:	7812      	ldrb	r2, [r2, #0]
 80068ca:	701a      	strb	r2, [r3, #0]
}
 80068cc:	46c0      	nop			@ (mov r8, r8)
 80068ce:	46bd      	mov	sp, r7
 80068d0:	b002      	add	sp, #8
 80068d2:	bd80      	pop	{r7, pc}
 80068d4:	20000032 	.word	0x20000032

080068d8 <HIDS_MeasurementReady>:

bool HIDS_MeasurementReady(void) {
 80068d8:	b580      	push	{r7, lr}
 80068da:	af00      	add	r7, sp, #0
  return TimestampIsReached(HIDS_NextRunTime);
 80068dc:	4b04      	ldr	r3, [pc, #16]	@ (80068f0 <HIDS_MeasurementReady+0x18>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	0018      	movs	r0, r3
 80068e2:	f7ff fd5b 	bl	800639c <TimestampIsReached>
 80068e6:	0003      	movs	r3, r0
}
 80068e8:	0018      	movs	r0, r3
 80068ea:	46bd      	mov	sp, r7
 80068ec:	bd80      	pop	{r7, pc}
 80068ee:	46c0      	nop			@ (mov r8, r8)
 80068f0:	20000034 	.word	0x20000034

080068f4 <HIDS_GetMeasurementValues>:
=======
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	78da      	ldrb	r2, [r3, #3]
 8006af6:	2108      	movs	r1, #8
 8006af8:	187b      	adds	r3, r7, r1
 8006afa:	701a      	strb	r2, [r3, #0]
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	791a      	ldrb	r2, [r3, #4]
 8006b00:	187b      	adds	r3, r7, r1
 8006b02:	705a      	strb	r2, [r3, #1]
	uint8_t crc2 = data[5];
 8006b04:	240e      	movs	r4, #14
 8006b06:	193b      	adds	r3, r7, r4
 8006b08:	687a      	ldr	r2, [r7, #4]
 8006b0a:	7952      	ldrb	r2, [r2, #5]
 8006b0c:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData2, 2) != crc2) {
 8006b0e:	187b      	adds	r3, r7, r1
 8006b10:	2102      	movs	r1, #2
 8006b12:	0018      	movs	r0, r3
 8006b14:	f7ff ff22 	bl	800695c <CalculateCRC>
 8006b18:	0003      	movs	r3, r0
 8006b1a:	001a      	movs	r2, r3
 8006b1c:	193b      	adds	r3, r7, r4
 8006b1e:	781b      	ldrb	r3, [r3, #0]
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d007      	beq.n	8006b34 <CheckCRC+0x8c>
		Error("CRC check failed for the second segment.");
 8006b24:	4a08      	ldr	r2, [pc, #32]	@ (8006b48 <CheckCRC+0xa0>)
 8006b26:	4b07      	ldr	r3, [pc, #28]	@ (8006b44 <CheckCRC+0x9c>)
 8006b28:	0019      	movs	r1, r3
 8006b2a:	2001      	movs	r0, #1
 8006b2c:	f7ff fe14 	bl	8006758 <CreateLine>
		return false;
 8006b30:	2300      	movs	r3, #0
 8006b32:	e000      	b.n	8006b36 <CheckCRC+0x8e>
	}
	return true;
 8006b34:	2301      	movs	r3, #1
}
 8006b36:	0018      	movs	r0, r3
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	b005      	add	sp, #20
 8006b3c:	bd90      	pop	{r4, r7, pc}
 8006b3e:	46c0      	nop			@ (mov r8, r8)
 8006b40:	08010558 	.word	0x08010558
 8006b44:	08010580 	.word	0x08010580
 8006b48:	08010584 	.word	0x08010584

08006b4c <HIDS_DeviceConnected>:

bool HIDS_DeviceConnected(void) {
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b084      	sub	sp, #16
 8006b50:	af02      	add	r7, sp, #8
	uint8_t serialReg = HIDS_SERIAL_NUMBER_REG;
 8006b52:	1dbb      	adds	r3, r7, #6
 8006b54:	2289      	movs	r2, #137	@ 0x89
 8006b56:	701a      	strb	r2, [r3, #0]
	WriteRegister(HIDS_I2C_ADDRESS, &serialReg, 1);
 8006b58:	1dbb      	adds	r3, r7, #6
 8006b5a:	2201      	movs	r2, #1
 8006b5c:	0019      	movs	r1, r3
 8006b5e:	2044      	movs	r0, #68	@ 0x44
 8006b60:	f7ff fede 	bl	8006920 <WriteRegister>
	HAL_Delay(30);
 8006b64:	201e      	movs	r0, #30
 8006b66:	f000 f9f9 	bl	8006f5c <HAL_Delay>
	ReadRegister(HIDS_I2C_ADDRESS, SerialBuffer, HIDS_SERIAL_BUFFER_LENGTH);
 8006b6a:	4b14      	ldr	r3, [pc, #80]	@ (8006bbc <HIDS_DeviceConnected+0x70>)
 8006b6c:	2206      	movs	r2, #6
 8006b6e:	0019      	movs	r1, r3
 8006b70:	2044      	movs	r0, #68	@ 0x44
 8006b72:	f7ff feb7 	bl	80068e4 <ReadRegister>

	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 8006b76:	1dfb      	adds	r3, r7, #7
 8006b78:	2200      	movs	r2, #0
 8006b7a:	701a      	strb	r2, [r3, #0]
 8006b7c:	e011      	b.n	8006ba2 <HIDS_DeviceConnected+0x56>
		Info("HIDS_Device serial ID[%d]: 0x%X", i, SerialBuffer[i]);
 8006b7e:	1dfb      	adds	r3, r7, #7
 8006b80:	7818      	ldrb	r0, [r3, #0]
 8006b82:	1dfb      	adds	r3, r7, #7
 8006b84:	781b      	ldrb	r3, [r3, #0]
 8006b86:	4a0d      	ldr	r2, [pc, #52]	@ (8006bbc <HIDS_DeviceConnected+0x70>)
 8006b88:	5cd3      	ldrb	r3, [r2, r3]
 8006b8a:	4a0d      	ldr	r2, [pc, #52]	@ (8006bc0 <HIDS_DeviceConnected+0x74>)
 8006b8c:	490d      	ldr	r1, [pc, #52]	@ (8006bc4 <HIDS_DeviceConnected+0x78>)
 8006b8e:	9300      	str	r3, [sp, #0]
 8006b90:	0003      	movs	r3, r0
 8006b92:	2002      	movs	r0, #2
 8006b94:	f7ff fde0 	bl	8006758 <CreateLine>
	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 8006b98:	1dfb      	adds	r3, r7, #7
 8006b9a:	781a      	ldrb	r2, [r3, #0]
 8006b9c:	1dfb      	adds	r3, r7, #7
 8006b9e:	3201      	adds	r2, #1
 8006ba0:	701a      	strb	r2, [r3, #0]
 8006ba2:	1dfb      	adds	r3, r7, #7
 8006ba4:	781b      	ldrb	r3, [r3, #0]
 8006ba6:	2b05      	cmp	r3, #5
 8006ba8:	d9e9      	bls.n	8006b7e <HIDS_DeviceConnected+0x32>
	}
	return CheckCRC(SerialBuffer);
 8006baa:	4b04      	ldr	r3, [pc, #16]	@ (8006bbc <HIDS_DeviceConnected+0x70>)
 8006bac:	0018      	movs	r0, r3
 8006bae:	f7ff ff7b 	bl	8006aa8 <CheckCRC>
 8006bb2:	0003      	movs	r3, r0
}
 8006bb4:	0018      	movs	r0, r3
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	b002      	add	sp, #8
 8006bba:	bd80      	pop	{r7, pc}
 8006bbc:	200012b4 	.word	0x200012b4
 8006bc0:	080105b0 	.word	0x080105b0
 8006bc4:	08010554 	.word	0x08010554

08006bc8 <HIDS_SetMeasurementMode>:

void HIDS_SetMeasurementMode(HIDSMeasureModes modeMeasure) {
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b082      	sub	sp, #8
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	0002      	movs	r2, r0
 8006bd0:	1dfb      	adds	r3, r7, #7
 8006bd2:	701a      	strb	r2, [r3, #0]
	MeasureMode = modeMeasure;
 8006bd4:	4b03      	ldr	r3, [pc, #12]	@ (8006be4 <HIDS_SetMeasurementMode+0x1c>)
 8006bd6:	1dfa      	adds	r2, r7, #7
 8006bd8:	7812      	ldrb	r2, [r2, #0]
 8006bda:	701a      	strb	r2, [r3, #0]
}
 8006bdc:	46c0      	nop			@ (mov r8, r8)
 8006bde:	46bd      	mov	sp, r7
 8006be0:	b002      	add	sp, #8
 8006be2:	bd80      	pop	{r7, pc}
 8006be4:	2000003e 	.word	0x2000003e

08006be8 <HIDS_MeasurementReady>:

bool HIDS_MeasurementReady(void) {
 8006be8:	b580      	push	{r7, lr}
 8006bea:	af00      	add	r7, sp, #0
  return TimestampIsReached(HIDS_NextRunTime);
 8006bec:	4b04      	ldr	r3, [pc, #16]	@ (8006c00 <HIDS_MeasurementReady+0x18>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	0018      	movs	r0, r3
 8006bf2:	f7ff fd5b 	bl	80066ac <TimestampIsReached>
 8006bf6:	0003      	movs	r3, r0
}
 8006bf8:	0018      	movs	r0, r3
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bd80      	pop	{r7, pc}
 8006bfe:	46c0      	nop			@ (mov r8, r8)
 8006c00:	20000040 	.word	0x20000040

08006c04 <HIDS_GetMeasurementValues>:
>>>>>>> main
void HIDS_SoftReset(void){
  uint8_t resetReg = HIDS_SOFT_RESET_REG;
  WriteRegister(HIDS_I2C_ADDRESS, &resetReg, 1);
}

bool HIDS_GetMeasurementValues(float* humidity, float* temperature) {
<<<<<<< HEAD
 80068f4:	b590      	push	{r4, r7, lr}
 80068f6:	b08d      	sub	sp, #52	@ 0x34
 80068f8:	af02      	add	r7, sp, #8
 80068fa:	6078      	str	r0, [r7, #4]
 80068fc:	6039      	str	r1, [r7, #0]
  // TODO: Store last measurement humidity for sgp40 measurement.
  if(MeasurementDone) return true;
 80068fe:	4b87      	ldr	r3, [pc, #540]	@ (8006b1c <HIDS_GetMeasurementValues+0x228>)
 8006900:	781b      	ldrb	r3, [r3, #0]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d001      	beq.n	800690a <HIDS_GetMeasurementValues+0x16>
 8006906:	2301      	movs	r3, #1
 8006908:	e103      	b.n	8006b12 <HIDS_GetMeasurementValues+0x21e>
  if(!HIDS_MeasurementReady()) return false;
 800690a:	f7ff ffe5 	bl	80068d8 <HIDS_MeasurementReady>
 800690e:	0003      	movs	r3, r0
 8006910:	001a      	movs	r2, r3
 8006912:	2301      	movs	r3, #1
 8006914:	4053      	eors	r3, r2
 8006916:	b2db      	uxtb	r3, r3
 8006918:	2b00      	cmp	r3, #0
 800691a:	d001      	beq.n	8006920 <HIDS_GetMeasurementValues+0x2c>
 800691c:	2300      	movs	r3, #0
 800691e:	e0f8      	b.n	8006b12 <HIDS_GetMeasurementValues+0x21e>
  uint32_t amountOfMeasurements = HIDS_MeasurementDuration / HIDS_Interval_ms;
 8006920:	4b7f      	ldr	r3, [pc, #508]	@ (8006b20 <HIDS_GetMeasurementValues+0x22c>)
 8006922:	681a      	ldr	r2, [r3, #0]
 8006924:	4b7f      	ldr	r3, [pc, #508]	@ (8006b24 <HIDS_GetMeasurementValues+0x230>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	0019      	movs	r1, r3
 800692a:	0010      	movs	r0, r2
 800692c:	f7f9 fc08 	bl	8000140 <__udivsi3>
 8006930:	0003      	movs	r3, r0
 8006932:	617b      	str	r3, [r7, #20]
=======
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b08c      	sub	sp, #48	@ 0x30
 8006c08:	af02      	add	r7, sp, #8
 8006c0a:	6078      	str	r0, [r7, #4]
 8006c0c:	6039      	str	r1, [r7, #0]
  // TODO: Store last measurement humidity for sgp40 measurement.
  if(MeasurementDone) return true;
 8006c0e:	4b7a      	ldr	r3, [pc, #488]	@ (8006df8 <HIDS_GetMeasurementValues+0x1f4>)
 8006c10:	781b      	ldrb	r3, [r3, #0]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d001      	beq.n	8006c1a <HIDS_GetMeasurementValues+0x16>
 8006c16:	2301      	movs	r3, #1
 8006c18:	e0ea      	b.n	8006df0 <HIDS_GetMeasurementValues+0x1ec>
  if(!HIDS_MeasurementReady()) return false;
 8006c1a:	f7ff ffe5 	bl	8006be8 <HIDS_MeasurementReady>
 8006c1e:	0003      	movs	r3, r0
 8006c20:	001a      	movs	r2, r3
 8006c22:	2301      	movs	r3, #1
 8006c24:	4053      	eors	r3, r2
 8006c26:	b2db      	uxtb	r3, r3
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d001      	beq.n	8006c30 <HIDS_GetMeasurementValues+0x2c>
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	e0df      	b.n	8006df0 <HIDS_GetMeasurementValues+0x1ec>
  uint32_t amountOfMeasurements = HIDS_MeasurementDuration / HIDS_Interval_ms;
 8006c30:	4b72      	ldr	r3, [pc, #456]	@ (8006dfc <HIDS_GetMeasurementValues+0x1f8>)
 8006c32:	681a      	ldr	r2, [r3, #0]
 8006c34:	4b72      	ldr	r3, [pc, #456]	@ (8006e00 <HIDS_GetMeasurementValues+0x1fc>)
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	0019      	movs	r1, r3
 8006c3a:	0010      	movs	r0, r2
 8006c3c:	f7f9 fa80 	bl	8000140 <__udivsi3>
 8006c40:	0003      	movs	r3, r0
 8006c42:	617b      	str	r3, [r7, #20]
>>>>>>> main
  float currentTemperature;
  float currentHumidity;
  static float temperatures[HIDS_MAX_MEASUREMENTS];
  static float humidities[HIDS_MAX_MEASUREMENTS];

  Debug("HT measurements: %d out of %d completed.", measurements + 1, amountOfMeasurements);
<<<<<<< HEAD
 8006934:	4b7c      	ldr	r3, [pc, #496]	@ (8006b28 <HIDS_GetMeasurementValues+0x234>)
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	1c58      	adds	r0, r3, #1
 800693a:	4a7c      	ldr	r2, [pc, #496]	@ (8006b2c <HIDS_GetMeasurementValues+0x238>)
 800693c:	497c      	ldr	r1, [pc, #496]	@ (8006b30 <HIDS_GetMeasurementValues+0x23c>)
 800693e:	697b      	ldr	r3, [r7, #20]
 8006940:	9300      	str	r3, [sp, #0]
 8006942:	0003      	movs	r3, r0
 8006944:	2003      	movs	r0, #3
 8006946:	f7ff fd7f 	bl	8006448 <CreateLine>
  ReadRegister(HIDS_I2C_ADDRESS, MeasureBuffer, HIDS_MEASURE_BUFFER_LENGTH);
 800694a:	4b7a      	ldr	r3, [pc, #488]	@ (8006b34 <HIDS_GetMeasurementValues+0x240>)
 800694c:	2206      	movs	r2, #6
 800694e:	0019      	movs	r1, r3
 8006950:	2044      	movs	r0, #68	@ 0x44
 8006952:	f7ff fe3f 	bl	80065d4 <ReadRegister>
	if(!CheckCRC(MeasureBuffer)) {
 8006956:	4b77      	ldr	r3, [pc, #476]	@ (8006b34 <HIDS_GetMeasurementValues+0x240>)
 8006958:	0018      	movs	r0, r3
 800695a:	f7ff ff1d 	bl	8006798 <CheckCRC>
 800695e:	0003      	movs	r3, r0
 8006960:	001a      	movs	r2, r3
 8006962:	2301      	movs	r3, #1
 8006964:	4053      	eors	r3, r2
 8006966:	b2db      	uxtb	r3, r3
 8006968:	2b00      	cmp	r3, #0
 800696a:	d02a      	beq.n	80069c2 <HIDS_GetMeasurementValues+0xce>
		Error("HIDS measurements CRC check failed.");
 800696c:	4a72      	ldr	r2, [pc, #456]	@ (8006b38 <HIDS_GetMeasurementValues+0x244>)
 800696e:	4b73      	ldr	r3, [pc, #460]	@ (8006b3c <HIDS_GetMeasurementValues+0x248>)
 8006970:	0019      	movs	r1, r3
 8006972:	2001      	movs	r0, #1
 8006974:	f7ff fd68 	bl	8006448 <CreateLine>
		Info("Measure buffer structure:");
 8006978:	4a71      	ldr	r2, [pc, #452]	@ (8006b40 <HIDS_GetMeasurementValues+0x24c>)
 800697a:	4b72      	ldr	r3, [pc, #456]	@ (8006b44 <HIDS_GetMeasurementValues+0x250>)
 800697c:	0019      	movs	r1, r3
 800697e:	2002      	movs	r0, #2
 8006980:	f7ff fd62 	bl	8006448 <CreateLine>
		for(uint8_t i = 0; i < HIDS_MEASURE_BUFFER_LENGTH; i++) {
 8006984:	2327      	movs	r3, #39	@ 0x27
 8006986:	18fb      	adds	r3, r7, r3
 8006988:	2200      	movs	r2, #0
 800698a:	701a      	strb	r2, [r3, #0]
 800698c:	e012      	b.n	80069b4 <HIDS_GetMeasurementValues+0xc0>
			Debug("HIDS_Measurement buffer[%d]: %d", i, MeasureBuffer[i]);
 800698e:	2427      	movs	r4, #39	@ 0x27
 8006990:	193b      	adds	r3, r7, r4
 8006992:	7818      	ldrb	r0, [r3, #0]
 8006994:	193b      	adds	r3, r7, r4
 8006996:	781b      	ldrb	r3, [r3, #0]
 8006998:	4a66      	ldr	r2, [pc, #408]	@ (8006b34 <HIDS_GetMeasurementValues+0x240>)
 800699a:	5cd3      	ldrb	r3, [r2, r3]
 800699c:	4a6a      	ldr	r2, [pc, #424]	@ (8006b48 <HIDS_GetMeasurementValues+0x254>)
 800699e:	4964      	ldr	r1, [pc, #400]	@ (8006b30 <HIDS_GetMeasurementValues+0x23c>)
 80069a0:	9300      	str	r3, [sp, #0]
 80069a2:	0003      	movs	r3, r0
 80069a4:	2003      	movs	r0, #3
 80069a6:	f7ff fd4f 	bl	8006448 <CreateLine>
		for(uint8_t i = 0; i < HIDS_MEASURE_BUFFER_LENGTH; i++) {
 80069aa:	193b      	adds	r3, r7, r4
 80069ac:	781a      	ldrb	r2, [r3, #0]
 80069ae:	193b      	adds	r3, r7, r4
 80069b0:	3201      	adds	r2, #1
 80069b2:	701a      	strb	r2, [r3, #0]
 80069b4:	2327      	movs	r3, #39	@ 0x27
 80069b6:	18fb      	adds	r3, r7, r3
 80069b8:	781b      	ldrb	r3, [r3, #0]
 80069ba:	2b05      	cmp	r3, #5
 80069bc:	d9e7      	bls.n	800698e <HIDS_GetMeasurementValues+0x9a>
		}
		return false;
 80069be:	2300      	movs	r3, #0
 80069c0:	e0a7      	b.n	8006b12 <HIDS_GetMeasurementValues+0x21e>
=======
 8006c44:	4b6f      	ldr	r3, [pc, #444]	@ (8006e04 <HIDS_GetMeasurementValues+0x200>)
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	1c58      	adds	r0, r3, #1
 8006c4a:	4a6f      	ldr	r2, [pc, #444]	@ (8006e08 <HIDS_GetMeasurementValues+0x204>)
 8006c4c:	496f      	ldr	r1, [pc, #444]	@ (8006e0c <HIDS_GetMeasurementValues+0x208>)
 8006c4e:	697b      	ldr	r3, [r7, #20]
 8006c50:	9300      	str	r3, [sp, #0]
 8006c52:	0003      	movs	r3, r0
 8006c54:	2003      	movs	r0, #3
 8006c56:	f7ff fd7f 	bl	8006758 <CreateLine>
  ReadRegister(HIDS_I2C_ADDRESS, MeasureBuffer, HIDS_MEASURE_BUFFER_LENGTH);
 8006c5a:	4b6d      	ldr	r3, [pc, #436]	@ (8006e10 <HIDS_GetMeasurementValues+0x20c>)
 8006c5c:	2206      	movs	r2, #6
 8006c5e:	0019      	movs	r1, r3
 8006c60:	2044      	movs	r0, #68	@ 0x44
 8006c62:	f7ff fe3f 	bl	80068e4 <ReadRegister>
	if(!CheckCRC(MeasureBuffer)) {
 8006c66:	4b6a      	ldr	r3, [pc, #424]	@ (8006e10 <HIDS_GetMeasurementValues+0x20c>)
 8006c68:	0018      	movs	r0, r3
 8006c6a:	f7ff ff1d 	bl	8006aa8 <CheckCRC>
 8006c6e:	0003      	movs	r3, r0
 8006c70:	001a      	movs	r2, r3
 8006c72:	2301      	movs	r3, #1
 8006c74:	4053      	eors	r3, r2
 8006c76:	b2db      	uxtb	r3, r3
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d011      	beq.n	8006ca0 <HIDS_GetMeasurementValues+0x9c>
		//Error("HIDS measurements CRC check failed.");
		//Info("Measure buffer structure:");
		for(uint8_t i = 0; i < HIDS_MEASURE_BUFFER_LENGTH; i++) {
 8006c7c:	2327      	movs	r3, #39	@ 0x27
 8006c7e:	18fb      	adds	r3, r7, r3
 8006c80:	2200      	movs	r2, #0
 8006c82:	701a      	strb	r2, [r3, #0]
 8006c84:	e005      	b.n	8006c92 <HIDS_GetMeasurementValues+0x8e>
 8006c86:	2127      	movs	r1, #39	@ 0x27
 8006c88:	187b      	adds	r3, r7, r1
 8006c8a:	781a      	ldrb	r2, [r3, #0]
 8006c8c:	187b      	adds	r3, r7, r1
 8006c8e:	3201      	adds	r2, #1
 8006c90:	701a      	strb	r2, [r3, #0]
 8006c92:	2327      	movs	r3, #39	@ 0x27
 8006c94:	18fb      	adds	r3, r7, r3
 8006c96:	781b      	ldrb	r3, [r3, #0]
 8006c98:	2b05      	cmp	r3, #5
 8006c9a:	d9f4      	bls.n	8006c86 <HIDS_GetMeasurementValues+0x82>
			//Debug("HIDS_Measurement buffer[%d]: %d", i, MeasureBuffer[i]);
		}
		return false;
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	e0a7      	b.n	8006df0 <HIDS_GetMeasurementValues+0x1ec>
>>>>>>> main

  // Humidity formula in percentage:
  //  RH = ((-6 + 125 * SRH) / (2^16 - 1))
  // Temperature formula in degrees Celsius:
  //  T = ((-45 + (175 * ST) / (2^16 - 1)))
	currentTemperature = (((175 * (MeasureBuffer[0] << 8) | MeasureBuffer[1])) / HIDS_POW_2_16_MINUS_1);
<<<<<<< HEAD
 80069c2:	4b5c      	ldr	r3, [pc, #368]	@ (8006b34 <HIDS_GetMeasurementValues+0x240>)
 80069c4:	781b      	ldrb	r3, [r3, #0]
 80069c6:	021b      	lsls	r3, r3, #8
 80069c8:	22af      	movs	r2, #175	@ 0xaf
 80069ca:	4353      	muls	r3, r2
 80069cc:	4a59      	ldr	r2, [pc, #356]	@ (8006b34 <HIDS_GetMeasurementValues+0x240>)
 80069ce:	7852      	ldrb	r2, [r2, #1]
 80069d0:	4313      	orrs	r3, r2
 80069d2:	0018      	movs	r0, r3
 80069d4:	f7fc fc3c 	bl	8003250 <__aeabi_i2d>
 80069d8:	2200      	movs	r2, #0
 80069da:	4b5c      	ldr	r3, [pc, #368]	@ (8006b4c <HIDS_GetMeasurementValues+0x258>)
 80069dc:	f7fb f932 	bl	8001c44 <__aeabi_ddiv>
 80069e0:	0002      	movs	r2, r0
 80069e2:	000b      	movs	r3, r1
 80069e4:	0010      	movs	r0, r2
 80069e6:	0019      	movs	r1, r3
 80069e8:	f7fc fc84 	bl	80032f4 <__aeabi_d2f>
 80069ec:	1c03      	adds	r3, r0, #0
 80069ee:	613b      	str	r3, [r7, #16]
	currentTemperature += -45;
 80069f0:	4957      	ldr	r1, [pc, #348]	@ (8006b50 <HIDS_GetMeasurementValues+0x25c>)
 80069f2:	6938      	ldr	r0, [r7, #16]
 80069f4:	f7fa fb5a 	bl	80010ac <__aeabi_fsub>
 80069f8:	1c03      	adds	r3, r0, #0
 80069fa:	613b      	str	r3, [r7, #16]
	currentHumidity = ((125 * ((MeasureBuffer[3] << 8) | MeasureBuffer[4]) / HIDS_POW_2_16_MINUS_1));
 80069fc:	4b4d      	ldr	r3, [pc, #308]	@ (8006b34 <HIDS_GetMeasurementValues+0x240>)
 80069fe:	78db      	ldrb	r3, [r3, #3]
 8006a00:	021b      	lsls	r3, r3, #8
 8006a02:	4a4c      	ldr	r2, [pc, #304]	@ (8006b34 <HIDS_GetMeasurementValues+0x240>)
 8006a04:	7912      	ldrb	r2, [r2, #4]
 8006a06:	431a      	orrs	r2, r3
 8006a08:	0013      	movs	r3, r2
 8006a0a:	015b      	lsls	r3, r3, #5
 8006a0c:	1a9b      	subs	r3, r3, r2
 8006a0e:	009b      	lsls	r3, r3, #2
 8006a10:	189b      	adds	r3, r3, r2
 8006a12:	0018      	movs	r0, r3
 8006a14:	f7fc fc1c 	bl	8003250 <__aeabi_i2d>
 8006a18:	2200      	movs	r2, #0
 8006a1a:	4b4c      	ldr	r3, [pc, #304]	@ (8006b4c <HIDS_GetMeasurementValues+0x258>)
 8006a1c:	f7fb f912 	bl	8001c44 <__aeabi_ddiv>
 8006a20:	0002      	movs	r2, r0
 8006a22:	000b      	movs	r3, r1
 8006a24:	0010      	movs	r0, r2
 8006a26:	0019      	movs	r1, r3
 8006a28:	f7fc fc64 	bl	80032f4 <__aeabi_d2f>
 8006a2c:	1c03      	adds	r3, r0, #0
 8006a2e:	60fb      	str	r3, [r7, #12]
	currentHumidity += -6;
 8006a30:	4948      	ldr	r1, [pc, #288]	@ (8006b54 <HIDS_GetMeasurementValues+0x260>)
 8006a32:	68f8      	ldr	r0, [r7, #12]
 8006a34:	f7fa fb3a 	bl	80010ac <__aeabi_fsub>
 8006a38:	1c03      	adds	r3, r0, #0
 8006a3a:	60fb      	str	r3, [r7, #12]

	if(measurements < amountOfMeasurements) {
 8006a3c:	4b3a      	ldr	r3, [pc, #232]	@ (8006b28 <HIDS_GetMeasurementValues+0x234>)
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	697a      	ldr	r2, [r7, #20]
 8006a42:	429a      	cmp	r2, r3
 8006a44:	d910      	bls.n	8006a68 <HIDS_GetMeasurementValues+0x174>
	  temperatures[measurements] = currentTemperature;
 8006a46:	4b38      	ldr	r3, [pc, #224]	@ (8006b28 <HIDS_GetMeasurementValues+0x234>)
 8006a48:	681a      	ldr	r2, [r3, #0]
 8006a4a:	4b43      	ldr	r3, [pc, #268]	@ (8006b58 <HIDS_GetMeasurementValues+0x264>)
 8006a4c:	0092      	lsls	r2, r2, #2
 8006a4e:	6939      	ldr	r1, [r7, #16]
 8006a50:	50d1      	str	r1, [r2, r3]
	  humidities[measurements] = currentHumidity;
 8006a52:	4b35      	ldr	r3, [pc, #212]	@ (8006b28 <HIDS_GetMeasurementValues+0x234>)
 8006a54:	681a      	ldr	r2, [r3, #0]
 8006a56:	4b41      	ldr	r3, [pc, #260]	@ (8006b5c <HIDS_GetMeasurementValues+0x268>)
 8006a58:	0092      	lsls	r2, r2, #2
 8006a5a:	68f9      	ldr	r1, [r7, #12]
 8006a5c:	50d1      	str	r1, [r2, r3]
	  measurements++;
 8006a5e:	4b32      	ldr	r3, [pc, #200]	@ (8006b28 <HIDS_GetMeasurementValues+0x234>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	1c5a      	adds	r2, r3, #1
 8006a64:	4b30      	ldr	r3, [pc, #192]	@ (8006b28 <HIDS_GetMeasurementValues+0x234>)
 8006a66:	601a      	str	r2, [r3, #0]
	}

	if (measurements >= amountOfMeasurements) {
 8006a68:	4b2f      	ldr	r3, [pc, #188]	@ (8006b28 <HIDS_GetMeasurementValues+0x234>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	697a      	ldr	r2, [r7, #20]
 8006a6e:	429a      	cmp	r2, r3
 8006a70:	d84c      	bhi.n	8006b0c <HIDS_GetMeasurementValues+0x218>
	  // Measurements done, calculating average and returning it.
    float sumTemperature = 0.0;
 8006a72:	2300      	movs	r3, #0
 8006a74:	623b      	str	r3, [r7, #32]
    float sumHumidity = 0.0;
 8006a76:	2300      	movs	r3, #0
 8006a78:	61fb      	str	r3, [r7, #28]
    for (uint32_t i = 0; i < measurements; i++) {
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	61bb      	str	r3, [r7, #24]
 8006a7e:	e016      	b.n	8006aae <HIDS_GetMeasurementValues+0x1ba>
        sumTemperature += temperatures[i];
 8006a80:	4b35      	ldr	r3, [pc, #212]	@ (8006b58 <HIDS_GetMeasurementValues+0x264>)
 8006a82:	69ba      	ldr	r2, [r7, #24]
 8006a84:	0092      	lsls	r2, r2, #2
 8006a86:	58d3      	ldr	r3, [r2, r3]
 8006a88:	1c19      	adds	r1, r3, #0
 8006a8a:	6a38      	ldr	r0, [r7, #32]
 8006a8c:	f7f9 fe60 	bl	8000750 <__aeabi_fadd>
 8006a90:	1c03      	adds	r3, r0, #0
 8006a92:	623b      	str	r3, [r7, #32]
        sumHumidity += humidities[i];
 8006a94:	4b31      	ldr	r3, [pc, #196]	@ (8006b5c <HIDS_GetMeasurementValues+0x268>)
 8006a96:	69ba      	ldr	r2, [r7, #24]
 8006a98:	0092      	lsls	r2, r2, #2
 8006a9a:	58d3      	ldr	r3, [r2, r3]
 8006a9c:	1c19      	adds	r1, r3, #0
 8006a9e:	69f8      	ldr	r0, [r7, #28]
 8006aa0:	f7f9 fe56 	bl	8000750 <__aeabi_fadd>
 8006aa4:	1c03      	adds	r3, r0, #0
 8006aa6:	61fb      	str	r3, [r7, #28]
    for (uint32_t i = 0; i < measurements; i++) {
 8006aa8:	69bb      	ldr	r3, [r7, #24]
 8006aaa:	3301      	adds	r3, #1
 8006aac:	61bb      	str	r3, [r7, #24]
 8006aae:	4b1e      	ldr	r3, [pc, #120]	@ (8006b28 <HIDS_GetMeasurementValues+0x234>)
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	69ba      	ldr	r2, [r7, #24]
 8006ab4:	429a      	cmp	r2, r3
 8006ab6:	d3e3      	bcc.n	8006a80 <HIDS_GetMeasurementValues+0x18c>
    }

    *temperature = sumTemperature / measurements;
 8006ab8:	4b1b      	ldr	r3, [pc, #108]	@ (8006b28 <HIDS_GetMeasurementValues+0x234>)
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	0018      	movs	r0, r3
 8006abe:	f7fa fd1b 	bl	80014f8 <__aeabi_ui2f>
 8006ac2:	1c03      	adds	r3, r0, #0
 8006ac4:	1c19      	adds	r1, r3, #0
 8006ac6:	6a38      	ldr	r0, [r7, #32]
 8006ac8:	f7f9 ffcc 	bl	8000a64 <__aeabi_fdiv>
 8006acc:	1c03      	adds	r3, r0, #0
 8006ace:	1c1a      	adds	r2, r3, #0
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	601a      	str	r2, [r3, #0]
    *humidity = sumHumidity / measurements;
 8006ad4:	4b14      	ldr	r3, [pc, #80]	@ (8006b28 <HIDS_GetMeasurementValues+0x234>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	0018      	movs	r0, r3
 8006ada:	f7fa fd0d 	bl	80014f8 <__aeabi_ui2f>
 8006ade:	1c03      	adds	r3, r0, #0
 8006ae0:	1c19      	adds	r1, r3, #0
 8006ae2:	69f8      	ldr	r0, [r7, #28]
 8006ae4:	f7f9 ffbe 	bl	8000a64 <__aeabi_fdiv>
 8006ae8:	1c03      	adds	r3, r0, #0
 8006aea:	1c1a      	adds	r2, r3, #0
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	601a      	str	r2, [r3, #0]

    measurements = 0;
 8006af0:	4b0d      	ldr	r3, [pc, #52]	@ (8006b28 <HIDS_GetMeasurementValues+0x234>)
 8006af2:	2200      	movs	r2, #0
 8006af4:	601a      	str	r2, [r3, #0]
    MeasurementDone = true;
 8006af6:	4b09      	ldr	r3, [pc, #36]	@ (8006b1c <HIDS_GetMeasurementValues+0x228>)
 8006af8:	2201      	movs	r2, #1
 8006afa:	701a      	strb	r2, [r3, #0]
    Debug("HIDS measurement is done.");
 8006afc:	4a18      	ldr	r2, [pc, #96]	@ (8006b60 <HIDS_GetMeasurementValues+0x26c>)
 8006afe:	4b0c      	ldr	r3, [pc, #48]	@ (8006b30 <HIDS_GetMeasurementValues+0x23c>)
 8006b00:	0019      	movs	r1, r3
 8006b02:	2003      	movs	r0, #3
 8006b04:	f7ff fca0 	bl	8006448 <CreateLine>
    return true;
 8006b08:	2301      	movs	r3, #1
 8006b0a:	e002      	b.n	8006b12 <HIDS_GetMeasurementValues+0x21e>
	}
	// Starting another measurement, still not done with all measurements.
	HIDS_StartMeasurement();
 8006b0c:	f7ff fe16 	bl	800673c <HIDS_StartMeasurement>
	return false;
 8006b10:	2300      	movs	r3, #0
}
 8006b12:	0018      	movs	r0, r3
 8006b14:	46bd      	mov	sp, r7
 8006b16:	b00b      	add	sp, #44	@ 0x2c
 8006b18:	bd90      	pop	{r4, r7, pc}
 8006b1a:	46c0      	nop			@ (mov r8, r8)
 8006b1c:	20000f62 	.word	0x20000f62
 8006b20:	2000003c 	.word	0x2000003c
 8006b24:	20000038 	.word	0x20000038
 8006b28:	20000f64 	.word	0x20000f64
 8006b2c:	08010410 	.word	0x08010410
 8006b30:	0801043c 	.word	0x0801043c
 8006b34:	20000f5c 	.word	0x20000f5c
 8006b38:	08010440 	.word	0x08010440
 8006b3c:	080103c0 	.word	0x080103c0
 8006b40:	08010464 	.word	0x08010464
 8006b44:	08010394 	.word	0x08010394
 8006b48:	08010480 	.word	0x08010480
 8006b4c:	40efffe0 	.word	0x40efffe0
 8006b50:	42340000 	.word	0x42340000
 8006b54:	40c00000 	.word	0x40c00000
 8006b58:	20000f68 	.word	0x20000f68
 8006b5c:	20001368 	.word	0x20001368
 8006b60:	080104a0 	.word	0x080104a0

08006b64 <Reset_Handler>:
=======
 8006ca0:	4b5b      	ldr	r3, [pc, #364]	@ (8006e10 <HIDS_GetMeasurementValues+0x20c>)
 8006ca2:	781b      	ldrb	r3, [r3, #0]
 8006ca4:	021b      	lsls	r3, r3, #8
 8006ca6:	22af      	movs	r2, #175	@ 0xaf
 8006ca8:	4353      	muls	r3, r2
 8006caa:	4a59      	ldr	r2, [pc, #356]	@ (8006e10 <HIDS_GetMeasurementValues+0x20c>)
 8006cac:	7852      	ldrb	r2, [r2, #1]
 8006cae:	4313      	orrs	r3, r2
 8006cb0:	0018      	movs	r0, r3
 8006cb2:	f7fc fb03 	bl	80032bc <__aeabi_i2d>
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	4b56      	ldr	r3, [pc, #344]	@ (8006e14 <HIDS_GetMeasurementValues+0x210>)
 8006cba:	f7fa fff9 	bl	8001cb0 <__aeabi_ddiv>
 8006cbe:	0002      	movs	r2, r0
 8006cc0:	000b      	movs	r3, r1
 8006cc2:	0010      	movs	r0, r2
 8006cc4:	0019      	movs	r1, r3
 8006cc6:	f7fc fb93 	bl	80033f0 <__aeabi_d2f>
 8006cca:	1c03      	adds	r3, r0, #0
 8006ccc:	613b      	str	r3, [r7, #16]
	currentTemperature += -45;
 8006cce:	4952      	ldr	r1, [pc, #328]	@ (8006e18 <HIDS_GetMeasurementValues+0x214>)
 8006cd0:	6938      	ldr	r0, [r7, #16]
 8006cd2:	f7fa fa21 	bl	8001118 <__aeabi_fsub>
 8006cd6:	1c03      	adds	r3, r0, #0
 8006cd8:	613b      	str	r3, [r7, #16]
	currentHumidity = ((125 * ((MeasureBuffer[3] << 8) | MeasureBuffer[4]) / HIDS_POW_2_16_MINUS_1));
 8006cda:	4b4d      	ldr	r3, [pc, #308]	@ (8006e10 <HIDS_GetMeasurementValues+0x20c>)
 8006cdc:	78db      	ldrb	r3, [r3, #3]
 8006cde:	021b      	lsls	r3, r3, #8
 8006ce0:	4a4b      	ldr	r2, [pc, #300]	@ (8006e10 <HIDS_GetMeasurementValues+0x20c>)
 8006ce2:	7912      	ldrb	r2, [r2, #4]
 8006ce4:	431a      	orrs	r2, r3
 8006ce6:	0013      	movs	r3, r2
 8006ce8:	015b      	lsls	r3, r3, #5
 8006cea:	1a9b      	subs	r3, r3, r2
 8006cec:	009b      	lsls	r3, r3, #2
 8006cee:	189b      	adds	r3, r3, r2
 8006cf0:	0018      	movs	r0, r3
 8006cf2:	f7fc fae3 	bl	80032bc <__aeabi_i2d>
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	4b46      	ldr	r3, [pc, #280]	@ (8006e14 <HIDS_GetMeasurementValues+0x210>)
 8006cfa:	f7fa ffd9 	bl	8001cb0 <__aeabi_ddiv>
 8006cfe:	0002      	movs	r2, r0
 8006d00:	000b      	movs	r3, r1
 8006d02:	0010      	movs	r0, r2
 8006d04:	0019      	movs	r1, r3
 8006d06:	f7fc fb73 	bl	80033f0 <__aeabi_d2f>
 8006d0a:	1c03      	adds	r3, r0, #0
 8006d0c:	60fb      	str	r3, [r7, #12]
	currentHumidity += -6;
 8006d0e:	4943      	ldr	r1, [pc, #268]	@ (8006e1c <HIDS_GetMeasurementValues+0x218>)
 8006d10:	68f8      	ldr	r0, [r7, #12]
 8006d12:	f7fa fa01 	bl	8001118 <__aeabi_fsub>
 8006d16:	1c03      	adds	r3, r0, #0
 8006d18:	60fb      	str	r3, [r7, #12]

	if(measurements < amountOfMeasurements) {
 8006d1a:	4b3a      	ldr	r3, [pc, #232]	@ (8006e04 <HIDS_GetMeasurementValues+0x200>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	697a      	ldr	r2, [r7, #20]
 8006d20:	429a      	cmp	r2, r3
 8006d22:	d910      	bls.n	8006d46 <HIDS_GetMeasurementValues+0x142>
	  temperatures[measurements] = currentTemperature;
 8006d24:	4b37      	ldr	r3, [pc, #220]	@ (8006e04 <HIDS_GetMeasurementValues+0x200>)
 8006d26:	681a      	ldr	r2, [r3, #0]
 8006d28:	4b3d      	ldr	r3, [pc, #244]	@ (8006e20 <HIDS_GetMeasurementValues+0x21c>)
 8006d2a:	0092      	lsls	r2, r2, #2
 8006d2c:	6939      	ldr	r1, [r7, #16]
 8006d2e:	50d1      	str	r1, [r2, r3]
	  humidities[measurements] = currentHumidity;
 8006d30:	4b34      	ldr	r3, [pc, #208]	@ (8006e04 <HIDS_GetMeasurementValues+0x200>)
 8006d32:	681a      	ldr	r2, [r3, #0]
 8006d34:	4b3b      	ldr	r3, [pc, #236]	@ (8006e24 <HIDS_GetMeasurementValues+0x220>)
 8006d36:	0092      	lsls	r2, r2, #2
 8006d38:	68f9      	ldr	r1, [r7, #12]
 8006d3a:	50d1      	str	r1, [r2, r3]
	  measurements++;
 8006d3c:	4b31      	ldr	r3, [pc, #196]	@ (8006e04 <HIDS_GetMeasurementValues+0x200>)
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	1c5a      	adds	r2, r3, #1
 8006d42:	4b30      	ldr	r3, [pc, #192]	@ (8006e04 <HIDS_GetMeasurementValues+0x200>)
 8006d44:	601a      	str	r2, [r3, #0]
	}

	if (measurements >= amountOfMeasurements) {
 8006d46:	4b2f      	ldr	r3, [pc, #188]	@ (8006e04 <HIDS_GetMeasurementValues+0x200>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	697a      	ldr	r2, [r7, #20]
 8006d4c:	429a      	cmp	r2, r3
 8006d4e:	d84c      	bhi.n	8006dea <HIDS_GetMeasurementValues+0x1e6>
	  // Measurements done, calculating average and returning it.
    float sumTemperature = 0.0;
 8006d50:	2300      	movs	r3, #0
 8006d52:	623b      	str	r3, [r7, #32]
    float sumHumidity = 0.0;
 8006d54:	2300      	movs	r3, #0
 8006d56:	61fb      	str	r3, [r7, #28]
    for (uint32_t i = 0; i < measurements; i++) {
 8006d58:	2300      	movs	r3, #0
 8006d5a:	61bb      	str	r3, [r7, #24]
 8006d5c:	e016      	b.n	8006d8c <HIDS_GetMeasurementValues+0x188>
        sumTemperature += temperatures[i];
 8006d5e:	4b30      	ldr	r3, [pc, #192]	@ (8006e20 <HIDS_GetMeasurementValues+0x21c>)
 8006d60:	69ba      	ldr	r2, [r7, #24]
 8006d62:	0092      	lsls	r2, r2, #2
 8006d64:	58d3      	ldr	r3, [r2, r3]
 8006d66:	1c19      	adds	r1, r3, #0
 8006d68:	6a38      	ldr	r0, [r7, #32]
 8006d6a:	f7f9 fd27 	bl	80007bc <__aeabi_fadd>
 8006d6e:	1c03      	adds	r3, r0, #0
 8006d70:	623b      	str	r3, [r7, #32]
        sumHumidity += humidities[i];
 8006d72:	4b2c      	ldr	r3, [pc, #176]	@ (8006e24 <HIDS_GetMeasurementValues+0x220>)
 8006d74:	69ba      	ldr	r2, [r7, #24]
 8006d76:	0092      	lsls	r2, r2, #2
 8006d78:	58d3      	ldr	r3, [r2, r3]
 8006d7a:	1c19      	adds	r1, r3, #0
 8006d7c:	69f8      	ldr	r0, [r7, #28]
 8006d7e:	f7f9 fd1d 	bl	80007bc <__aeabi_fadd>
 8006d82:	1c03      	adds	r3, r0, #0
 8006d84:	61fb      	str	r3, [r7, #28]
    for (uint32_t i = 0; i < measurements; i++) {
 8006d86:	69bb      	ldr	r3, [r7, #24]
 8006d88:	3301      	adds	r3, #1
 8006d8a:	61bb      	str	r3, [r7, #24]
 8006d8c:	4b1d      	ldr	r3, [pc, #116]	@ (8006e04 <HIDS_GetMeasurementValues+0x200>)
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	69ba      	ldr	r2, [r7, #24]
 8006d92:	429a      	cmp	r2, r3
 8006d94:	d3e3      	bcc.n	8006d5e <HIDS_GetMeasurementValues+0x15a>
    }

    *temperature = sumTemperature / measurements;
 8006d96:	4b1b      	ldr	r3, [pc, #108]	@ (8006e04 <HIDS_GetMeasurementValues+0x200>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	0018      	movs	r0, r3
 8006d9c:	f7fa fbe2 	bl	8001564 <__aeabi_ui2f>
 8006da0:	1c03      	adds	r3, r0, #0
 8006da2:	1c19      	adds	r1, r3, #0
 8006da4:	6a38      	ldr	r0, [r7, #32]
 8006da6:	f7f9 fe93 	bl	8000ad0 <__aeabi_fdiv>
 8006daa:	1c03      	adds	r3, r0, #0
 8006dac:	1c1a      	adds	r2, r3, #0
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	601a      	str	r2, [r3, #0]
    *humidity = sumHumidity / measurements;
 8006db2:	4b14      	ldr	r3, [pc, #80]	@ (8006e04 <HIDS_GetMeasurementValues+0x200>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	0018      	movs	r0, r3
 8006db8:	f7fa fbd4 	bl	8001564 <__aeabi_ui2f>
 8006dbc:	1c03      	adds	r3, r0, #0
 8006dbe:	1c19      	adds	r1, r3, #0
 8006dc0:	69f8      	ldr	r0, [r7, #28]
 8006dc2:	f7f9 fe85 	bl	8000ad0 <__aeabi_fdiv>
 8006dc6:	1c03      	adds	r3, r0, #0
 8006dc8:	1c1a      	adds	r2, r3, #0
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	601a      	str	r2, [r3, #0]

    SGP_GetHT(temperature, humidity);
 8006dce:	687a      	ldr	r2, [r7, #4]
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	0011      	movs	r1, r2
 8006dd4:	0018      	movs	r0, r3
 8006dd6:	f7fe ff97 	bl	8005d08 <SGP_GetHT>

    measurements = 0;
 8006dda:	4b0a      	ldr	r3, [pc, #40]	@ (8006e04 <HIDS_GetMeasurementValues+0x200>)
 8006ddc:	2200      	movs	r2, #0
 8006dde:	601a      	str	r2, [r3, #0]
    MeasurementDone = true;
 8006de0:	4b05      	ldr	r3, [pc, #20]	@ (8006df8 <HIDS_GetMeasurementValues+0x1f4>)
 8006de2:	2201      	movs	r2, #1
 8006de4:	701a      	strb	r2, [r3, #0]
    //Debug("HIDS measurement is done.");
    return true;
 8006de6:	2301      	movs	r3, #1
 8006de8:	e002      	b.n	8006df0 <HIDS_GetMeasurementValues+0x1ec>
	}
	// Starting another measurement, still not done with all measurements.
	HIDS_StartMeasurement();
 8006dea:	f7ff fe2f 	bl	8006a4c <HIDS_StartMeasurement>
	return false;
 8006dee:	2300      	movs	r3, #0
}
 8006df0:	0018      	movs	r0, r3
 8006df2:	46bd      	mov	sp, r7
 8006df4:	b00a      	add	sp, #40	@ 0x28
 8006df6:	bd80      	pop	{r7, pc}
 8006df8:	200012c2 	.word	0x200012c2
 8006dfc:	20000048 	.word	0x20000048
 8006e00:	20000044 	.word	0x20000044
 8006e04:	200012c4 	.word	0x200012c4
 8006e08:	080105d0 	.word	0x080105d0
 8006e0c:	080105fc 	.word	0x080105fc
 8006e10:	200012bc 	.word	0x200012bc
 8006e14:	40efffe0 	.word	0x40efffe0
 8006e18:	42340000 	.word	0x42340000
 8006e1c:	40c00000 	.word	0x40c00000
 8006e20:	200012c8 	.word	0x200012c8
 8006e24:	200016c8 	.word	0x200016c8

08006e28 <Reset_Handler>:
>>>>>>> main

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
<<<<<<< HEAD
 8006b64:	480d      	ldr	r0, [pc, #52]	@ (8006b9c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8006b66:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8006b68:	f7ff f892 	bl	8005c90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006b6c:	480c      	ldr	r0, [pc, #48]	@ (8006ba0 <LoopForever+0x6>)
  ldr r1, =_edata
 8006b6e:	490d      	ldr	r1, [pc, #52]	@ (8006ba4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8006b70:	4a0d      	ldr	r2, [pc, #52]	@ (8006ba8 <LoopForever+0xe>)
  movs r3, #0
 8006b72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006b74:	e002      	b.n	8006b7c <LoopCopyDataInit>

08006b76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006b76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006b78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006b7a:	3304      	adds	r3, #4

08006b7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006b7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006b7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006b80:	d3f9      	bcc.n	8006b76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006b82:	4a0a      	ldr	r2, [pc, #40]	@ (8006bac <LoopForever+0x12>)
  ldr r4, =_ebss
 8006b84:	4c0a      	ldr	r4, [pc, #40]	@ (8006bb0 <LoopForever+0x16>)
  movs r3, #0
 8006b86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006b88:	e001      	b.n	8006b8e <LoopFillZerobss>

08006b8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006b8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006b8c:	3204      	adds	r2, #4

08006b8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006b8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006b90:	d3fb      	bcc.n	8006b8a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8006b92:	f006 fe27 	bl	800d7e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006b96:	f7fd f919 	bl	8003dcc <main>

08006b9a <LoopForever>:

LoopForever:
    b LoopForever
 8006b9a:	e7fe      	b.n	8006b9a <LoopForever>
   ldr   r0, =_estack
 8006b9c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8006ba0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006ba4:	20000218 	.word	0x20000218
  ldr r2, =_sidata
 8006ba8:	08010980 	.word	0x08010980
  ldr r2, =_sbss
 8006bac:	20000218 	.word	0x20000218
  ldr r4, =_ebss
 8006bb0:	200018b8 	.word	0x200018b8

08006bb4 <ADC1_COMP_IRQHandler>:
=======
 8006e28:	480d      	ldr	r0, [pc, #52]	@ (8006e60 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8006e2a:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8006e2c:	f7ff f90e 	bl	800604c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006e30:	480c      	ldr	r0, [pc, #48]	@ (8006e64 <LoopForever+0x6>)
  ldr r1, =_edata
 8006e32:	490d      	ldr	r1, [pc, #52]	@ (8006e68 <LoopForever+0xa>)
  ldr r2, =_sidata
 8006e34:	4a0d      	ldr	r2, [pc, #52]	@ (8006e6c <LoopForever+0xe>)
  movs r3, #0
 8006e36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006e38:	e002      	b.n	8006e40 <LoopCopyDataInit>

08006e3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006e3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006e3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006e3e:	3304      	adds	r3, #4

08006e40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006e40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006e42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006e44:	d3f9      	bcc.n	8006e3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006e46:	4a0a      	ldr	r2, [pc, #40]	@ (8006e70 <LoopForever+0x12>)
  ldr r4, =_ebss
 8006e48:	4c0a      	ldr	r4, [pc, #40]	@ (8006e74 <LoopForever+0x16>)
  movs r3, #0
 8006e4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006e4c:	e001      	b.n	8006e52 <LoopFillZerobss>

08006e4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006e4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006e50:	3204      	adds	r2, #4

08006e52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006e52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006e54:	d3fb      	bcc.n	8006e4e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8006e56:	f006 fe11 	bl	800da7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006e5a:	f7fc ffdd 	bl	8003e18 <main>

08006e5e <LoopForever>:

LoopForever:
    b LoopForever
 8006e5e:	e7fe      	b.n	8006e5e <LoopForever>
   ldr   r0, =_estack
 8006e60:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8006e64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006e68:	20000224 	.word	0x20000224
  ldr r2, =_sidata
 8006e6c:	08010ad8 	.word	0x08010ad8
  ldr r2, =_sbss
 8006e70:	20000224 	.word	0x20000224
  ldr r4, =_ebss
 8006e74:	20001c18 	.word	0x20001c18

08006e78 <ADC1_COMP_IRQHandler>:
>>>>>>> main
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
<<<<<<< HEAD
 8006bb4:	e7fe      	b.n	8006bb4 <ADC1_COMP_IRQHandler>
	...

08006bb8 <HAL_Init>:
=======
 8006e78:	e7fe      	b.n	8006e78 <ADC1_COMP_IRQHandler>
	...

08006e7c <HAL_Init>:
>>>>>>> main
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
<<<<<<< HEAD
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b082      	sub	sp, #8
 8006bbc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8006bbe:	1dfb      	adds	r3, r7, #7
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	701a      	strb	r2, [r3, #0]
=======
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b082      	sub	sp, #8
 8006e80:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8006e82:	1dfb      	adds	r3, r7, #7
 8006e84:	2200      	movs	r2, #0
 8006e86:	701a      	strb	r2, [r3, #0]
>>>>>>> main
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
<<<<<<< HEAD
 8006bc4:	4b0b      	ldr	r3, [pc, #44]	@ (8006bf4 <HAL_Init+0x3c>)
 8006bc6:	681a      	ldr	r2, [r3, #0]
 8006bc8:	4b0a      	ldr	r3, [pc, #40]	@ (8006bf4 <HAL_Init+0x3c>)
 8006bca:	2140      	movs	r1, #64	@ 0x40
 8006bcc:	430a      	orrs	r2, r1
 8006bce:	601a      	str	r2, [r3, #0]
=======
 8006e88:	4b0b      	ldr	r3, [pc, #44]	@ (8006eb8 <HAL_Init+0x3c>)
 8006e8a:	681a      	ldr	r2, [r3, #0]
 8006e8c:	4b0a      	ldr	r3, [pc, #40]	@ (8006eb8 <HAL_Init+0x3c>)
 8006e8e:	2140      	movs	r1, #64	@ 0x40
 8006e90:	430a      	orrs	r2, r1
 8006e92:	601a      	str	r2, [r3, #0]
>>>>>>> main
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
<<<<<<< HEAD
 8006bd0:	2003      	movs	r0, #3
 8006bd2:	f000 f811 	bl	8006bf8 <HAL_InitTick>
 8006bd6:	1e03      	subs	r3, r0, #0
 8006bd8:	d003      	beq.n	8006be2 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8006bda:	1dfb      	adds	r3, r7, #7
 8006bdc:	2201      	movs	r2, #1
 8006bde:	701a      	strb	r2, [r3, #0]
 8006be0:	e001      	b.n	8006be6 <HAL_Init+0x2e>
=======
 8006e94:	2003      	movs	r0, #3
 8006e96:	f000 f811 	bl	8006ebc <HAL_InitTick>
 8006e9a:	1e03      	subs	r3, r0, #0
 8006e9c:	d003      	beq.n	8006ea6 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8006e9e:	1dfb      	adds	r3, r7, #7
 8006ea0:	2201      	movs	r2, #1
 8006ea2:	701a      	strb	r2, [r3, #0]
 8006ea4:	e001      	b.n	8006eaa <HAL_Init+0x2e>
>>>>>>> main
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
<<<<<<< HEAD
 8006be2:	f7fe ff37 	bl	8005a54 <HAL_MspInit>
=======
 8006ea6:	f7fe ffb3 	bl	8005e10 <HAL_MspInit>
>>>>>>> main
  }

  /* Return function status */
  return status;
<<<<<<< HEAD
 8006be6:	1dfb      	adds	r3, r7, #7
 8006be8:	781b      	ldrb	r3, [r3, #0]
}
 8006bea:	0018      	movs	r0, r3
 8006bec:	46bd      	mov	sp, r7
 8006bee:	b002      	add	sp, #8
 8006bf0:	bd80      	pop	{r7, pc}
 8006bf2:	46c0      	nop			@ (mov r8, r8)
 8006bf4:	40022000 	.word	0x40022000

08006bf8 <HAL_InitTick>:
=======
 8006eaa:	1dfb      	adds	r3, r7, #7
 8006eac:	781b      	ldrb	r3, [r3, #0]
}
 8006eae:	0018      	movs	r0, r3
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	b002      	add	sp, #8
 8006eb4:	bd80      	pop	{r7, pc}
 8006eb6:	46c0      	nop			@ (mov r8, r8)
 8006eb8:	40022000 	.word	0x40022000

08006ebc <HAL_InitTick>:
>>>>>>> main
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
<<<<<<< HEAD
 8006bf8:	b590      	push	{r4, r7, lr}
 8006bfa:	b083      	sub	sp, #12
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006c00:	4b14      	ldr	r3, [pc, #80]	@ (8006c54 <HAL_InitTick+0x5c>)
 8006c02:	681c      	ldr	r4, [r3, #0]
 8006c04:	4b14      	ldr	r3, [pc, #80]	@ (8006c58 <HAL_InitTick+0x60>)
 8006c06:	781b      	ldrb	r3, [r3, #0]
 8006c08:	0019      	movs	r1, r3
 8006c0a:	23fa      	movs	r3, #250	@ 0xfa
 8006c0c:	0098      	lsls	r0, r3, #2
 8006c0e:	f7f9 fa97 	bl	8000140 <__udivsi3>
 8006c12:	0003      	movs	r3, r0
 8006c14:	0019      	movs	r1, r3
 8006c16:	0020      	movs	r0, r4
 8006c18:	f7f9 fa92 	bl	8000140 <__udivsi3>
 8006c1c:	0003      	movs	r3, r0
 8006c1e:	0018      	movs	r0, r3
 8006c20:	f000 f92f 	bl	8006e82 <HAL_SYSTICK_Config>
 8006c24:	1e03      	subs	r3, r0, #0
 8006c26:	d001      	beq.n	8006c2c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8006c28:	2301      	movs	r3, #1
 8006c2a:	e00f      	b.n	8006c4c <HAL_InitTick+0x54>
=======
 8006ebc:	b590      	push	{r4, r7, lr}
 8006ebe:	b083      	sub	sp, #12
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006ec4:	4b14      	ldr	r3, [pc, #80]	@ (8006f18 <HAL_InitTick+0x5c>)
 8006ec6:	681c      	ldr	r4, [r3, #0]
 8006ec8:	4b14      	ldr	r3, [pc, #80]	@ (8006f1c <HAL_InitTick+0x60>)
 8006eca:	781b      	ldrb	r3, [r3, #0]
 8006ecc:	0019      	movs	r1, r3
 8006ece:	23fa      	movs	r3, #250	@ 0xfa
 8006ed0:	0098      	lsls	r0, r3, #2
 8006ed2:	f7f9 f935 	bl	8000140 <__udivsi3>
 8006ed6:	0003      	movs	r3, r0
 8006ed8:	0019      	movs	r1, r3
 8006eda:	0020      	movs	r0, r4
 8006edc:	f7f9 f930 	bl	8000140 <__udivsi3>
 8006ee0:	0003      	movs	r3, r0
 8006ee2:	0018      	movs	r0, r3
 8006ee4:	f000 f92f 	bl	8007146 <HAL_SYSTICK_Config>
 8006ee8:	1e03      	subs	r3, r0, #0
 8006eea:	d001      	beq.n	8006ef0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8006eec:	2301      	movs	r3, #1
 8006eee:	e00f      	b.n	8006f10 <HAL_InitTick+0x54>
>>>>>>> main
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
<<<<<<< HEAD
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2b03      	cmp	r3, #3
 8006c30:	d80b      	bhi.n	8006c4a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006c32:	6879      	ldr	r1, [r7, #4]
 8006c34:	2301      	movs	r3, #1
 8006c36:	425b      	negs	r3, r3
 8006c38:	2200      	movs	r2, #0
 8006c3a:	0018      	movs	r0, r3
 8006c3c:	f000 f8fc 	bl	8006e38 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006c40:	4b06      	ldr	r3, [pc, #24]	@ (8006c5c <HAL_InitTick+0x64>)
 8006c42:	687a      	ldr	r2, [r7, #4]
 8006c44:	601a      	str	r2, [r3, #0]
=======
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2b03      	cmp	r3, #3
 8006ef4:	d80b      	bhi.n	8006f0e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006ef6:	6879      	ldr	r1, [r7, #4]
 8006ef8:	2301      	movs	r3, #1
 8006efa:	425b      	negs	r3, r3
 8006efc:	2200      	movs	r2, #0
 8006efe:	0018      	movs	r0, r3
 8006f00:	f000 f8fc 	bl	80070fc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006f04:	4b06      	ldr	r3, [pc, #24]	@ (8006f20 <HAL_InitTick+0x64>)
 8006f06:	687a      	ldr	r2, [r7, #4]
 8006f08:	601a      	str	r2, [r3, #0]
>>>>>>> main
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
<<<<<<< HEAD
 8006c46:	2300      	movs	r3, #0
 8006c48:	e000      	b.n	8006c4c <HAL_InitTick+0x54>
    return HAL_ERROR;
 8006c4a:	2301      	movs	r3, #1
}
 8006c4c:	0018      	movs	r0, r3
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	b003      	add	sp, #12
 8006c52:	bd90      	pop	{r4, r7, pc}
 8006c54:	2000002c 	.word	0x2000002c
 8006c58:	20000044 	.word	0x20000044
 8006c5c:	20000040 	.word	0x20000040

08006c60 <HAL_IncTick>:
=======
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	e000      	b.n	8006f10 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8006f0e:	2301      	movs	r3, #1
}
 8006f10:	0018      	movs	r0, r3
 8006f12:	46bd      	mov	sp, r7
 8006f14:	b003      	add	sp, #12
 8006f16:	bd90      	pop	{r4, r7, pc}
 8006f18:	20000038 	.word	0x20000038
 8006f1c:	20000050 	.word	0x20000050
 8006f20:	2000004c 	.word	0x2000004c

08006f24 <HAL_IncTick>:
>>>>>>> main
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
<<<<<<< HEAD
 8006c60:	b580      	push	{r7, lr}
 8006c62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006c64:	4b05      	ldr	r3, [pc, #20]	@ (8006c7c <HAL_IncTick+0x1c>)
 8006c66:	781b      	ldrb	r3, [r3, #0]
 8006c68:	001a      	movs	r2, r3
 8006c6a:	4b05      	ldr	r3, [pc, #20]	@ (8006c80 <HAL_IncTick+0x20>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	18d2      	adds	r2, r2, r3
 8006c70:	4b03      	ldr	r3, [pc, #12]	@ (8006c80 <HAL_IncTick+0x20>)
 8006c72:	601a      	str	r2, [r3, #0]
}
 8006c74:	46c0      	nop			@ (mov r8, r8)
 8006c76:	46bd      	mov	sp, r7
 8006c78:	bd80      	pop	{r7, pc}
 8006c7a:	46c0      	nop			@ (mov r8, r8)
 8006c7c:	20000044 	.word	0x20000044
 8006c80:	20001768 	.word	0x20001768

08006c84 <HAL_GetTick>:
=======
 8006f24:	b580      	push	{r7, lr}
 8006f26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006f28:	4b05      	ldr	r3, [pc, #20]	@ (8006f40 <HAL_IncTick+0x1c>)
 8006f2a:	781b      	ldrb	r3, [r3, #0]
 8006f2c:	001a      	movs	r2, r3
 8006f2e:	4b05      	ldr	r3, [pc, #20]	@ (8006f44 <HAL_IncTick+0x20>)
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	18d2      	adds	r2, r2, r3
 8006f34:	4b03      	ldr	r3, [pc, #12]	@ (8006f44 <HAL_IncTick+0x20>)
 8006f36:	601a      	str	r2, [r3, #0]
}
 8006f38:	46c0      	nop			@ (mov r8, r8)
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	bd80      	pop	{r7, pc}
 8006f3e:	46c0      	nop			@ (mov r8, r8)
 8006f40:	20000050 	.word	0x20000050
 8006f44:	20001ac8 	.word	0x20001ac8

08006f48 <HAL_GetTick>:
>>>>>>> main
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
<<<<<<< HEAD
 8006c84:	b580      	push	{r7, lr}
 8006c86:	af00      	add	r7, sp, #0
  return uwTick;
 8006c88:	4b02      	ldr	r3, [pc, #8]	@ (8006c94 <HAL_GetTick+0x10>)
 8006c8a:	681b      	ldr	r3, [r3, #0]
}
 8006c8c:	0018      	movs	r0, r3
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bd80      	pop	{r7, pc}
 8006c92:	46c0      	nop			@ (mov r8, r8)
 8006c94:	20001768 	.word	0x20001768

08006c98 <HAL_Delay>:
=======
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	af00      	add	r7, sp, #0
  return uwTick;
 8006f4c:	4b02      	ldr	r3, [pc, #8]	@ (8006f58 <HAL_GetTick+0x10>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
}
 8006f50:	0018      	movs	r0, r3
 8006f52:	46bd      	mov	sp, r7
 8006f54:	bd80      	pop	{r7, pc}
 8006f56:	46c0      	nop			@ (mov r8, r8)
 8006f58:	20001ac8 	.word	0x20001ac8

08006f5c <HAL_Delay>:
>>>>>>> main
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
<<<<<<< HEAD
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b084      	sub	sp, #16
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006ca0:	f7ff fff0 	bl	8006c84 <HAL_GetTick>
 8006ca4:	0003      	movs	r3, r0
 8006ca6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	3301      	adds	r3, #1
 8006cb0:	d005      	beq.n	8006cbe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006cb2:	4b0a      	ldr	r3, [pc, #40]	@ (8006cdc <HAL_Delay+0x44>)
 8006cb4:	781b      	ldrb	r3, [r3, #0]
 8006cb6:	001a      	movs	r2, r3
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	189b      	adds	r3, r3, r2
 8006cbc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006cbe:	46c0      	nop			@ (mov r8, r8)
 8006cc0:	f7ff ffe0 	bl	8006c84 <HAL_GetTick>
 8006cc4:	0002      	movs	r2, r0
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	1ad3      	subs	r3, r2, r3
 8006cca:	68fa      	ldr	r2, [r7, #12]
 8006ccc:	429a      	cmp	r2, r3
 8006cce:	d8f7      	bhi.n	8006cc0 <HAL_Delay+0x28>
  {
  }
}
 8006cd0:	46c0      	nop			@ (mov r8, r8)
 8006cd2:	46c0      	nop			@ (mov r8, r8)
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	b004      	add	sp, #16
 8006cd8:	bd80      	pop	{r7, pc}
 8006cda:	46c0      	nop			@ (mov r8, r8)
 8006cdc:	20000044 	.word	0x20000044

08006ce0 <__NVIC_EnableIRQ>:
=======
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b084      	sub	sp, #16
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006f64:	f7ff fff0 	bl	8006f48 <HAL_GetTick>
 8006f68:	0003      	movs	r3, r0
 8006f6a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	3301      	adds	r3, #1
 8006f74:	d005      	beq.n	8006f82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006f76:	4b0a      	ldr	r3, [pc, #40]	@ (8006fa0 <HAL_Delay+0x44>)
 8006f78:	781b      	ldrb	r3, [r3, #0]
 8006f7a:	001a      	movs	r2, r3
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	189b      	adds	r3, r3, r2
 8006f80:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006f82:	46c0      	nop			@ (mov r8, r8)
 8006f84:	f7ff ffe0 	bl	8006f48 <HAL_GetTick>
 8006f88:	0002      	movs	r2, r0
 8006f8a:	68bb      	ldr	r3, [r7, #8]
 8006f8c:	1ad3      	subs	r3, r2, r3
 8006f8e:	68fa      	ldr	r2, [r7, #12]
 8006f90:	429a      	cmp	r2, r3
 8006f92:	d8f7      	bhi.n	8006f84 <HAL_Delay+0x28>
  {
  }
}
 8006f94:	46c0      	nop			@ (mov r8, r8)
 8006f96:	46c0      	nop			@ (mov r8, r8)
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	b004      	add	sp, #16
 8006f9c:	bd80      	pop	{r7, pc}
 8006f9e:	46c0      	nop			@ (mov r8, r8)
 8006fa0:	20000050 	.word	0x20000050

08006fa4 <__NVIC_EnableIRQ>:
>>>>>>> main
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< HEAD
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b082      	sub	sp, #8
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	0002      	movs	r2, r0
 8006ce8:	1dfb      	adds	r3, r7, #7
 8006cea:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8006cec:	1dfb      	adds	r3, r7, #7
 8006cee:	781b      	ldrb	r3, [r3, #0]
 8006cf0:	2b7f      	cmp	r3, #127	@ 0x7f
 8006cf2:	d809      	bhi.n	8006d08 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006cf4:	1dfb      	adds	r3, r7, #7
 8006cf6:	781b      	ldrb	r3, [r3, #0]
 8006cf8:	001a      	movs	r2, r3
 8006cfa:	231f      	movs	r3, #31
 8006cfc:	401a      	ands	r2, r3
 8006cfe:	4b04      	ldr	r3, [pc, #16]	@ (8006d10 <__NVIC_EnableIRQ+0x30>)
 8006d00:	2101      	movs	r1, #1
 8006d02:	4091      	lsls	r1, r2
 8006d04:	000a      	movs	r2, r1
 8006d06:	601a      	str	r2, [r3, #0]
  }
}
 8006d08:	46c0      	nop			@ (mov r8, r8)
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	b002      	add	sp, #8
 8006d0e:	bd80      	pop	{r7, pc}
 8006d10:	e000e100 	.word	0xe000e100

08006d14 <__NVIC_SetPriority>:
=======
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b082      	sub	sp, #8
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	0002      	movs	r2, r0
 8006fac:	1dfb      	adds	r3, r7, #7
 8006fae:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8006fb0:	1dfb      	adds	r3, r7, #7
 8006fb2:	781b      	ldrb	r3, [r3, #0]
 8006fb4:	2b7f      	cmp	r3, #127	@ 0x7f
 8006fb6:	d809      	bhi.n	8006fcc <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006fb8:	1dfb      	adds	r3, r7, #7
 8006fba:	781b      	ldrb	r3, [r3, #0]
 8006fbc:	001a      	movs	r2, r3
 8006fbe:	231f      	movs	r3, #31
 8006fc0:	401a      	ands	r2, r3
 8006fc2:	4b04      	ldr	r3, [pc, #16]	@ (8006fd4 <__NVIC_EnableIRQ+0x30>)
 8006fc4:	2101      	movs	r1, #1
 8006fc6:	4091      	lsls	r1, r2
 8006fc8:	000a      	movs	r2, r1
 8006fca:	601a      	str	r2, [r3, #0]
  }
}
 8006fcc:	46c0      	nop			@ (mov r8, r8)
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	b002      	add	sp, #8
 8006fd2:	bd80      	pop	{r7, pc}
 8006fd4:	e000e100 	.word	0xe000e100

08006fd8 <__NVIC_SetPriority>:
>>>>>>> main
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
<<<<<<< HEAD
 8006d14:	b590      	push	{r4, r7, lr}
 8006d16:	b083      	sub	sp, #12
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	0002      	movs	r2, r0
 8006d1c:	6039      	str	r1, [r7, #0]
 8006d1e:	1dfb      	adds	r3, r7, #7
 8006d20:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8006d22:	1dfb      	adds	r3, r7, #7
 8006d24:	781b      	ldrb	r3, [r3, #0]
 8006d26:	2b7f      	cmp	r3, #127	@ 0x7f
 8006d28:	d828      	bhi.n	8006d7c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006d2a:	4a2f      	ldr	r2, [pc, #188]	@ (8006de8 <__NVIC_SetPriority+0xd4>)
 8006d2c:	1dfb      	adds	r3, r7, #7
 8006d2e:	781b      	ldrb	r3, [r3, #0]
 8006d30:	b25b      	sxtb	r3, r3
 8006d32:	089b      	lsrs	r3, r3, #2
 8006d34:	33c0      	adds	r3, #192	@ 0xc0
 8006d36:	009b      	lsls	r3, r3, #2
 8006d38:	589b      	ldr	r3, [r3, r2]
 8006d3a:	1dfa      	adds	r2, r7, #7
 8006d3c:	7812      	ldrb	r2, [r2, #0]
 8006d3e:	0011      	movs	r1, r2
 8006d40:	2203      	movs	r2, #3
 8006d42:	400a      	ands	r2, r1
 8006d44:	00d2      	lsls	r2, r2, #3
 8006d46:	21ff      	movs	r1, #255	@ 0xff
 8006d48:	4091      	lsls	r1, r2
 8006d4a:	000a      	movs	r2, r1
 8006d4c:	43d2      	mvns	r2, r2
 8006d4e:	401a      	ands	r2, r3
 8006d50:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	019b      	lsls	r3, r3, #6
 8006d56:	22ff      	movs	r2, #255	@ 0xff
 8006d58:	401a      	ands	r2, r3
 8006d5a:	1dfb      	adds	r3, r7, #7
 8006d5c:	781b      	ldrb	r3, [r3, #0]
 8006d5e:	0018      	movs	r0, r3
 8006d60:	2303      	movs	r3, #3
 8006d62:	4003      	ands	r3, r0
 8006d64:	00db      	lsls	r3, r3, #3
 8006d66:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006d68:	481f      	ldr	r0, [pc, #124]	@ (8006de8 <__NVIC_SetPriority+0xd4>)
 8006d6a:	1dfb      	adds	r3, r7, #7
 8006d6c:	781b      	ldrb	r3, [r3, #0]
 8006d6e:	b25b      	sxtb	r3, r3
 8006d70:	089b      	lsrs	r3, r3, #2
 8006d72:	430a      	orrs	r2, r1
 8006d74:	33c0      	adds	r3, #192	@ 0xc0
 8006d76:	009b      	lsls	r3, r3, #2
 8006d78:	501a      	str	r2, [r3, r0]
=======
 8006fd8:	b590      	push	{r4, r7, lr}
 8006fda:	b083      	sub	sp, #12
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	0002      	movs	r2, r0
 8006fe0:	6039      	str	r1, [r7, #0]
 8006fe2:	1dfb      	adds	r3, r7, #7
 8006fe4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8006fe6:	1dfb      	adds	r3, r7, #7
 8006fe8:	781b      	ldrb	r3, [r3, #0]
 8006fea:	2b7f      	cmp	r3, #127	@ 0x7f
 8006fec:	d828      	bhi.n	8007040 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006fee:	4a2f      	ldr	r2, [pc, #188]	@ (80070ac <__NVIC_SetPriority+0xd4>)
 8006ff0:	1dfb      	adds	r3, r7, #7
 8006ff2:	781b      	ldrb	r3, [r3, #0]
 8006ff4:	b25b      	sxtb	r3, r3
 8006ff6:	089b      	lsrs	r3, r3, #2
 8006ff8:	33c0      	adds	r3, #192	@ 0xc0
 8006ffa:	009b      	lsls	r3, r3, #2
 8006ffc:	589b      	ldr	r3, [r3, r2]
 8006ffe:	1dfa      	adds	r2, r7, #7
 8007000:	7812      	ldrb	r2, [r2, #0]
 8007002:	0011      	movs	r1, r2
 8007004:	2203      	movs	r2, #3
 8007006:	400a      	ands	r2, r1
 8007008:	00d2      	lsls	r2, r2, #3
 800700a:	21ff      	movs	r1, #255	@ 0xff
 800700c:	4091      	lsls	r1, r2
 800700e:	000a      	movs	r2, r1
 8007010:	43d2      	mvns	r2, r2
 8007012:	401a      	ands	r2, r3
 8007014:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	019b      	lsls	r3, r3, #6
 800701a:	22ff      	movs	r2, #255	@ 0xff
 800701c:	401a      	ands	r2, r3
 800701e:	1dfb      	adds	r3, r7, #7
 8007020:	781b      	ldrb	r3, [r3, #0]
 8007022:	0018      	movs	r0, r3
 8007024:	2303      	movs	r3, #3
 8007026:	4003      	ands	r3, r0
 8007028:	00db      	lsls	r3, r3, #3
 800702a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800702c:	481f      	ldr	r0, [pc, #124]	@ (80070ac <__NVIC_SetPriority+0xd4>)
 800702e:	1dfb      	adds	r3, r7, #7
 8007030:	781b      	ldrb	r3, [r3, #0]
 8007032:	b25b      	sxtb	r3, r3
 8007034:	089b      	lsrs	r3, r3, #2
 8007036:	430a      	orrs	r2, r1
 8007038:	33c0      	adds	r3, #192	@ 0xc0
 800703a:	009b      	lsls	r3, r3, #2
 800703c:	501a      	str	r2, [r3, r0]
>>>>>>> main
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
<<<<<<< HEAD
 8006d7a:	e031      	b.n	8006de0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006d7c:	4a1b      	ldr	r2, [pc, #108]	@ (8006dec <__NVIC_SetPriority+0xd8>)
 8006d7e:	1dfb      	adds	r3, r7, #7
 8006d80:	781b      	ldrb	r3, [r3, #0]
 8006d82:	0019      	movs	r1, r3
 8006d84:	230f      	movs	r3, #15
 8006d86:	400b      	ands	r3, r1
 8006d88:	3b08      	subs	r3, #8
 8006d8a:	089b      	lsrs	r3, r3, #2
 8006d8c:	3306      	adds	r3, #6
 8006d8e:	009b      	lsls	r3, r3, #2
 8006d90:	18d3      	adds	r3, r2, r3
 8006d92:	3304      	adds	r3, #4
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	1dfa      	adds	r2, r7, #7
 8006d98:	7812      	ldrb	r2, [r2, #0]
 8006d9a:	0011      	movs	r1, r2
 8006d9c:	2203      	movs	r2, #3
 8006d9e:	400a      	ands	r2, r1
 8006da0:	00d2      	lsls	r2, r2, #3
 8006da2:	21ff      	movs	r1, #255	@ 0xff
 8006da4:	4091      	lsls	r1, r2
 8006da6:	000a      	movs	r2, r1
 8006da8:	43d2      	mvns	r2, r2
 8006daa:	401a      	ands	r2, r3
 8006dac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	019b      	lsls	r3, r3, #6
 8006db2:	22ff      	movs	r2, #255	@ 0xff
 8006db4:	401a      	ands	r2, r3
 8006db6:	1dfb      	adds	r3, r7, #7
 8006db8:	781b      	ldrb	r3, [r3, #0]
 8006dba:	0018      	movs	r0, r3
 8006dbc:	2303      	movs	r3, #3
 8006dbe:	4003      	ands	r3, r0
 8006dc0:	00db      	lsls	r3, r3, #3
 8006dc2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006dc4:	4809      	ldr	r0, [pc, #36]	@ (8006dec <__NVIC_SetPriority+0xd8>)
 8006dc6:	1dfb      	adds	r3, r7, #7
 8006dc8:	781b      	ldrb	r3, [r3, #0]
 8006dca:	001c      	movs	r4, r3
 8006dcc:	230f      	movs	r3, #15
 8006dce:	4023      	ands	r3, r4
 8006dd0:	3b08      	subs	r3, #8
 8006dd2:	089b      	lsrs	r3, r3, #2
 8006dd4:	430a      	orrs	r2, r1
 8006dd6:	3306      	adds	r3, #6
 8006dd8:	009b      	lsls	r3, r3, #2
 8006dda:	18c3      	adds	r3, r0, r3
 8006ddc:	3304      	adds	r3, #4
 8006dde:	601a      	str	r2, [r3, #0]
}
 8006de0:	46c0      	nop			@ (mov r8, r8)
 8006de2:	46bd      	mov	sp, r7
 8006de4:	b003      	add	sp, #12
 8006de6:	bd90      	pop	{r4, r7, pc}
 8006de8:	e000e100 	.word	0xe000e100
 8006dec:	e000ed00 	.word	0xe000ed00

08006df0 <SysTick_Config>:
=======
 800703e:	e031      	b.n	80070a4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007040:	4a1b      	ldr	r2, [pc, #108]	@ (80070b0 <__NVIC_SetPriority+0xd8>)
 8007042:	1dfb      	adds	r3, r7, #7
 8007044:	781b      	ldrb	r3, [r3, #0]
 8007046:	0019      	movs	r1, r3
 8007048:	230f      	movs	r3, #15
 800704a:	400b      	ands	r3, r1
 800704c:	3b08      	subs	r3, #8
 800704e:	089b      	lsrs	r3, r3, #2
 8007050:	3306      	adds	r3, #6
 8007052:	009b      	lsls	r3, r3, #2
 8007054:	18d3      	adds	r3, r2, r3
 8007056:	3304      	adds	r3, #4
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	1dfa      	adds	r2, r7, #7
 800705c:	7812      	ldrb	r2, [r2, #0]
 800705e:	0011      	movs	r1, r2
 8007060:	2203      	movs	r2, #3
 8007062:	400a      	ands	r2, r1
 8007064:	00d2      	lsls	r2, r2, #3
 8007066:	21ff      	movs	r1, #255	@ 0xff
 8007068:	4091      	lsls	r1, r2
 800706a:	000a      	movs	r2, r1
 800706c:	43d2      	mvns	r2, r2
 800706e:	401a      	ands	r2, r3
 8007070:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	019b      	lsls	r3, r3, #6
 8007076:	22ff      	movs	r2, #255	@ 0xff
 8007078:	401a      	ands	r2, r3
 800707a:	1dfb      	adds	r3, r7, #7
 800707c:	781b      	ldrb	r3, [r3, #0]
 800707e:	0018      	movs	r0, r3
 8007080:	2303      	movs	r3, #3
 8007082:	4003      	ands	r3, r0
 8007084:	00db      	lsls	r3, r3, #3
 8007086:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007088:	4809      	ldr	r0, [pc, #36]	@ (80070b0 <__NVIC_SetPriority+0xd8>)
 800708a:	1dfb      	adds	r3, r7, #7
 800708c:	781b      	ldrb	r3, [r3, #0]
 800708e:	001c      	movs	r4, r3
 8007090:	230f      	movs	r3, #15
 8007092:	4023      	ands	r3, r4
 8007094:	3b08      	subs	r3, #8
 8007096:	089b      	lsrs	r3, r3, #2
 8007098:	430a      	orrs	r2, r1
 800709a:	3306      	adds	r3, #6
 800709c:	009b      	lsls	r3, r3, #2
 800709e:	18c3      	adds	r3, r0, r3
 80070a0:	3304      	adds	r3, #4
 80070a2:	601a      	str	r2, [r3, #0]
}
 80070a4:	46c0      	nop			@ (mov r8, r8)
 80070a6:	46bd      	mov	sp, r7
 80070a8:	b003      	add	sp, #12
 80070aa:	bd90      	pop	{r4, r7, pc}
 80070ac:	e000e100 	.word	0xe000e100
 80070b0:	e000ed00 	.word	0xe000ed00

080070b4 <SysTick_Config>:
>>>>>>> main
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
<<<<<<< HEAD
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b082      	sub	sp, #8
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	1e5a      	subs	r2, r3, #1
 8006dfc:	2380      	movs	r3, #128	@ 0x80
 8006dfe:	045b      	lsls	r3, r3, #17
 8006e00:	429a      	cmp	r2, r3
 8006e02:	d301      	bcc.n	8006e08 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006e04:	2301      	movs	r3, #1
 8006e06:	e010      	b.n	8006e2a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006e08:	4b0a      	ldr	r3, [pc, #40]	@ (8006e34 <SysTick_Config+0x44>)
 8006e0a:	687a      	ldr	r2, [r7, #4]
 8006e0c:	3a01      	subs	r2, #1
 8006e0e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006e10:	2301      	movs	r3, #1
 8006e12:	425b      	negs	r3, r3
 8006e14:	2103      	movs	r1, #3
 8006e16:	0018      	movs	r0, r3
 8006e18:	f7ff ff7c 	bl	8006d14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006e1c:	4b05      	ldr	r3, [pc, #20]	@ (8006e34 <SysTick_Config+0x44>)
 8006e1e:	2200      	movs	r2, #0
 8006e20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006e22:	4b04      	ldr	r3, [pc, #16]	@ (8006e34 <SysTick_Config+0x44>)
 8006e24:	2207      	movs	r2, #7
 8006e26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006e28:	2300      	movs	r3, #0
}
 8006e2a:	0018      	movs	r0, r3
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	b002      	add	sp, #8
 8006e30:	bd80      	pop	{r7, pc}
 8006e32:	46c0      	nop			@ (mov r8, r8)
 8006e34:	e000e010 	.word	0xe000e010

08006e38 <HAL_NVIC_SetPriority>:
=======
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b082      	sub	sp, #8
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	1e5a      	subs	r2, r3, #1
 80070c0:	2380      	movs	r3, #128	@ 0x80
 80070c2:	045b      	lsls	r3, r3, #17
 80070c4:	429a      	cmp	r2, r3
 80070c6:	d301      	bcc.n	80070cc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80070c8:	2301      	movs	r3, #1
 80070ca:	e010      	b.n	80070ee <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80070cc:	4b0a      	ldr	r3, [pc, #40]	@ (80070f8 <SysTick_Config+0x44>)
 80070ce:	687a      	ldr	r2, [r7, #4]
 80070d0:	3a01      	subs	r2, #1
 80070d2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80070d4:	2301      	movs	r3, #1
 80070d6:	425b      	negs	r3, r3
 80070d8:	2103      	movs	r1, #3
 80070da:	0018      	movs	r0, r3
 80070dc:	f7ff ff7c 	bl	8006fd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80070e0:	4b05      	ldr	r3, [pc, #20]	@ (80070f8 <SysTick_Config+0x44>)
 80070e2:	2200      	movs	r2, #0
 80070e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80070e6:	4b04      	ldr	r3, [pc, #16]	@ (80070f8 <SysTick_Config+0x44>)
 80070e8:	2207      	movs	r2, #7
 80070ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80070ec:	2300      	movs	r3, #0
}
 80070ee:	0018      	movs	r0, r3
 80070f0:	46bd      	mov	sp, r7
 80070f2:	b002      	add	sp, #8
 80070f4:	bd80      	pop	{r7, pc}
 80070f6:	46c0      	nop			@ (mov r8, r8)
 80070f8:	e000e010 	.word	0xe000e010

080070fc <HAL_NVIC_SetPriority>:
>>>>>>> main
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
<<<<<<< HEAD
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b084      	sub	sp, #16
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	60b9      	str	r1, [r7, #8]
 8006e40:	607a      	str	r2, [r7, #4]
 8006e42:	210f      	movs	r1, #15
 8006e44:	187b      	adds	r3, r7, r1
 8006e46:	1c02      	adds	r2, r0, #0
 8006e48:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8006e4a:	68ba      	ldr	r2, [r7, #8]
 8006e4c:	187b      	adds	r3, r7, r1
 8006e4e:	781b      	ldrb	r3, [r3, #0]
 8006e50:	b25b      	sxtb	r3, r3
 8006e52:	0011      	movs	r1, r2
 8006e54:	0018      	movs	r0, r3
 8006e56:	f7ff ff5d 	bl	8006d14 <__NVIC_SetPriority>
}
 8006e5a:	46c0      	nop			@ (mov r8, r8)
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	b004      	add	sp, #16
 8006e60:	bd80      	pop	{r7, pc}

08006e62 <HAL_NVIC_EnableIRQ>:
=======
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b084      	sub	sp, #16
 8007100:	af00      	add	r7, sp, #0
 8007102:	60b9      	str	r1, [r7, #8]
 8007104:	607a      	str	r2, [r7, #4]
 8007106:	210f      	movs	r1, #15
 8007108:	187b      	adds	r3, r7, r1
 800710a:	1c02      	adds	r2, r0, #0
 800710c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800710e:	68ba      	ldr	r2, [r7, #8]
 8007110:	187b      	adds	r3, r7, r1
 8007112:	781b      	ldrb	r3, [r3, #0]
 8007114:	b25b      	sxtb	r3, r3
 8007116:	0011      	movs	r1, r2
 8007118:	0018      	movs	r0, r3
 800711a:	f7ff ff5d 	bl	8006fd8 <__NVIC_SetPriority>
}
 800711e:	46c0      	nop			@ (mov r8, r8)
 8007120:	46bd      	mov	sp, r7
 8007122:	b004      	add	sp, #16
 8007124:	bd80      	pop	{r7, pc}

08007126 <HAL_NVIC_EnableIRQ>:
>>>>>>> main
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< HEAD
 8006e62:	b580      	push	{r7, lr}
 8006e64:	b082      	sub	sp, #8
 8006e66:	af00      	add	r7, sp, #0
 8006e68:	0002      	movs	r2, r0
 8006e6a:	1dfb      	adds	r3, r7, #7
 8006e6c:	701a      	strb	r2, [r3, #0]
=======
 8007126:	b580      	push	{r7, lr}
 8007128:	b082      	sub	sp, #8
 800712a:	af00      	add	r7, sp, #0
 800712c:	0002      	movs	r2, r0
 800712e:	1dfb      	adds	r3, r7, #7
 8007130:	701a      	strb	r2, [r3, #0]
>>>>>>> main
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
<<<<<<< HEAD
 8006e6e:	1dfb      	adds	r3, r7, #7
 8006e70:	781b      	ldrb	r3, [r3, #0]
 8006e72:	b25b      	sxtb	r3, r3
 8006e74:	0018      	movs	r0, r3
 8006e76:	f7ff ff33 	bl	8006ce0 <__NVIC_EnableIRQ>
}
 8006e7a:	46c0      	nop			@ (mov r8, r8)
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	b002      	add	sp, #8
 8006e80:	bd80      	pop	{r7, pc}

08006e82 <HAL_SYSTICK_Config>:
=======
 8007132:	1dfb      	adds	r3, r7, #7
 8007134:	781b      	ldrb	r3, [r3, #0]
 8007136:	b25b      	sxtb	r3, r3
 8007138:	0018      	movs	r0, r3
 800713a:	f7ff ff33 	bl	8006fa4 <__NVIC_EnableIRQ>
}
 800713e:	46c0      	nop			@ (mov r8, r8)
 8007140:	46bd      	mov	sp, r7
 8007142:	b002      	add	sp, #8
 8007144:	bd80      	pop	{r7, pc}

08007146 <HAL_SYSTICK_Config>:
>>>>>>> main
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
<<<<<<< HEAD
 8006e82:	b580      	push	{r7, lr}
 8006e84:	b082      	sub	sp, #8
 8006e86:	af00      	add	r7, sp, #0
 8006e88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	0018      	movs	r0, r3
 8006e8e:	f7ff ffaf 	bl	8006df0 <SysTick_Config>
 8006e92:	0003      	movs	r3, r0
}
 8006e94:	0018      	movs	r0, r3
 8006e96:	46bd      	mov	sp, r7
 8006e98:	b002      	add	sp, #8
 8006e9a:	bd80      	pop	{r7, pc}

08006e9c <HAL_DMA_Init>:
=======
 8007146:	b580      	push	{r7, lr}
 8007148:	b082      	sub	sp, #8
 800714a:	af00      	add	r7, sp, #0
 800714c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	0018      	movs	r0, r3
 8007152:	f7ff ffaf 	bl	80070b4 <SysTick_Config>
 8007156:	0003      	movs	r3, r0
}
 8007158:	0018      	movs	r0, r3
 800715a:	46bd      	mov	sp, r7
 800715c:	b002      	add	sp, #8
 800715e:	bd80      	pop	{r7, pc}

08007160 <HAL_DMA_Init>:
>>>>>>> main
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b084      	sub	sp, #16
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
=======
 8007160:	b580      	push	{r7, lr}
 8007162:	b084      	sub	sp, #16
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
>>>>>>> main
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
<<<<<<< HEAD
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d101      	bne.n	8006eae <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8006eaa:	2301      	movs	r3, #1
 8006eac:	e061      	b.n	8006f72 <HAL_DMA_Init+0xd6>
=======
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d101      	bne.n	8007172 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800716e:	2301      	movs	r3, #1
 8007170:	e061      	b.n	8007236 <HAL_DMA_Init+0xd6>
>>>>>>> main
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
<<<<<<< HEAD
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	4a32      	ldr	r2, [pc, #200]	@ (8006f7c <HAL_DMA_Init+0xe0>)
 8006eb4:	4694      	mov	ip, r2
 8006eb6:	4463      	add	r3, ip
 8006eb8:	2114      	movs	r1, #20
 8006eba:	0018      	movs	r0, r3
 8006ebc:	f7f9 f940 	bl	8000140 <__udivsi3>
 8006ec0:	0003      	movs	r3, r0
 8006ec2:	009a      	lsls	r2, r3, #2
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	4a2d      	ldr	r2, [pc, #180]	@ (8006f80 <HAL_DMA_Init+0xe4>)
 8006ecc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2225      	movs	r2, #37	@ 0x25
 8006ed2:	2102      	movs	r1, #2
 8006ed4:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	4a28      	ldr	r2, [pc, #160]	@ (8006f84 <HAL_DMA_Init+0xe8>)
 8006ee2:	4013      	ands	r3, r2
 8006ee4:	60fb      	str	r3, [r7, #12]
=======
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	4a32      	ldr	r2, [pc, #200]	@ (8007240 <HAL_DMA_Init+0xe0>)
 8007178:	4694      	mov	ip, r2
 800717a:	4463      	add	r3, ip
 800717c:	2114      	movs	r1, #20
 800717e:	0018      	movs	r0, r3
 8007180:	f7f8 ffde 	bl	8000140 <__udivsi3>
 8007184:	0003      	movs	r3, r0
 8007186:	009a      	lsls	r2, r3, #2
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	4a2d      	ldr	r2, [pc, #180]	@ (8007244 <HAL_DMA_Init+0xe4>)
 8007190:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	2225      	movs	r2, #37	@ 0x25
 8007196:	2102      	movs	r1, #2
 8007198:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	4a28      	ldr	r2, [pc, #160]	@ (8007248 <HAL_DMA_Init+0xe8>)
 80071a6:	4013      	ands	r3, r2
 80071a8:	60fb      	str	r3, [r7, #12]
>>>>>>> main
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
<<<<<<< HEAD
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8006eee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	691b      	ldr	r3, [r3, #16]
 8006ef4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006efa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	699b      	ldr	r3, [r3, #24]
 8006f00:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006f06:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	6a1b      	ldr	r3, [r3, #32]
 8006f0c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006f0e:	68fa      	ldr	r2, [r7, #12]
 8006f10:	4313      	orrs	r3, r2
 8006f12:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	68fa      	ldr	r2, [r7, #12]
 8006f1a:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	689a      	ldr	r2, [r3, #8]
 8006f20:	2380      	movs	r3, #128	@ 0x80
 8006f22:	01db      	lsls	r3, r3, #7
 8006f24:	429a      	cmp	r2, r3
 8006f26:	d018      	beq.n	8006f5a <HAL_DMA_Init+0xbe>
=======
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80071b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	691b      	ldr	r3, [r3, #16]
 80071b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80071be:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	699b      	ldr	r3, [r3, #24]
 80071c4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80071ca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6a1b      	ldr	r3, [r3, #32]
 80071d0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80071d2:	68fa      	ldr	r2, [r7, #12]
 80071d4:	4313      	orrs	r3, r2
 80071d6:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	68fa      	ldr	r2, [r7, #12]
 80071de:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	689a      	ldr	r2, [r3, #8]
 80071e4:	2380      	movs	r3, #128	@ 0x80
 80071e6:	01db      	lsls	r3, r3, #7
 80071e8:	429a      	cmp	r2, r3
 80071ea:	d018      	beq.n	800721e <HAL_DMA_Init+0xbe>
>>>>>>> main
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
<<<<<<< HEAD
 8006f28:	4b17      	ldr	r3, [pc, #92]	@ (8006f88 <HAL_DMA_Init+0xec>)
 8006f2a:	681a      	ldr	r2, [r3, #0]
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f30:	211c      	movs	r1, #28
 8006f32:	400b      	ands	r3, r1
 8006f34:	210f      	movs	r1, #15
 8006f36:	4099      	lsls	r1, r3
 8006f38:	000b      	movs	r3, r1
 8006f3a:	43d9      	mvns	r1, r3
 8006f3c:	4b12      	ldr	r3, [pc, #72]	@ (8006f88 <HAL_DMA_Init+0xec>)
 8006f3e:	400a      	ands	r2, r1
 8006f40:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8006f42:	4b11      	ldr	r3, [pc, #68]	@ (8006f88 <HAL_DMA_Init+0xec>)
 8006f44:	6819      	ldr	r1, [r3, #0]
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	685a      	ldr	r2, [r3, #4]
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f4e:	201c      	movs	r0, #28
 8006f50:	4003      	ands	r3, r0
 8006f52:	409a      	lsls	r2, r3
 8006f54:	4b0c      	ldr	r3, [pc, #48]	@ (8006f88 <HAL_DMA_Init+0xec>)
 8006f56:	430a      	orrs	r2, r1
 8006f58:	601a      	str	r2, [r3, #0]
=======
 80071ec:	4b17      	ldr	r3, [pc, #92]	@ (800724c <HAL_DMA_Init+0xec>)
 80071ee:	681a      	ldr	r2, [r3, #0]
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071f4:	211c      	movs	r1, #28
 80071f6:	400b      	ands	r3, r1
 80071f8:	210f      	movs	r1, #15
 80071fa:	4099      	lsls	r1, r3
 80071fc:	000b      	movs	r3, r1
 80071fe:	43d9      	mvns	r1, r3
 8007200:	4b12      	ldr	r3, [pc, #72]	@ (800724c <HAL_DMA_Init+0xec>)
 8007202:	400a      	ands	r2, r1
 8007204:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8007206:	4b11      	ldr	r3, [pc, #68]	@ (800724c <HAL_DMA_Init+0xec>)
 8007208:	6819      	ldr	r1, [r3, #0]
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	685a      	ldr	r2, [r3, #4]
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007212:	201c      	movs	r0, #28
 8007214:	4003      	ands	r3, r0
 8007216:	409a      	lsls	r2, r3
 8007218:	4b0c      	ldr	r3, [pc, #48]	@ (800724c <HAL_DMA_Init+0xec>)
 800721a:	430a      	orrs	r2, r1
 800721c:	601a      	str	r2, [r3, #0]
>>>>>>> main
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
<<<<<<< HEAD
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2225      	movs	r2, #37	@ 0x25
 8006f64:	2101      	movs	r1, #1
 8006f66:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2224      	movs	r2, #36	@ 0x24
 8006f6c:	2100      	movs	r1, #0
 8006f6e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006f70:	2300      	movs	r3, #0
}
 8006f72:	0018      	movs	r0, r3
 8006f74:	46bd      	mov	sp, r7
 8006f76:	b004      	add	sp, #16
 8006f78:	bd80      	pop	{r7, pc}
 8006f7a:	46c0      	nop			@ (mov r8, r8)
 8006f7c:	bffdfff8 	.word	0xbffdfff8
 8006f80:	40020000 	.word	0x40020000
 8006f84:	ffff800f 	.word	0xffff800f
 8006f88:	400200a8 	.word	0x400200a8

08006f8c <HAL_DMA_DeInit>:
=======
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2200      	movs	r2, #0
 8007222:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2225      	movs	r2, #37	@ 0x25
 8007228:	2101      	movs	r1, #1
 800722a:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2224      	movs	r2, #36	@ 0x24
 8007230:	2100      	movs	r1, #0
 8007232:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007234:	2300      	movs	r3, #0
}
 8007236:	0018      	movs	r0, r3
 8007238:	46bd      	mov	sp, r7
 800723a:	b004      	add	sp, #16
 800723c:	bd80      	pop	{r7, pc}
 800723e:	46c0      	nop			@ (mov r8, r8)
 8007240:	bffdfff8 	.word	0xbffdfff8
 8007244:	40020000 	.word	0x40020000
 8007248:	ffff800f 	.word	0xffff800f
 800724c:	400200a8 	.word	0x400200a8

08007250 <HAL_DMA_DeInit>:
>>>>>>> main
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b082      	sub	sp, #8
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma )
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d101      	bne.n	8006f9e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8006f9a:	2301      	movs	r3, #1
 8006f9c:	e04a      	b.n	8007034 <HAL_DMA_DeInit+0xa8>
=======
 8007250:	b580      	push	{r7, lr}
 8007252:	b082      	sub	sp, #8
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma )
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d101      	bne.n	8007262 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800725e:	2301      	movs	r3, #1
 8007260:	e04a      	b.n	80072f8 <HAL_DMA_DeInit+0xa8>
>>>>>>> main

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
<<<<<<< HEAD
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	681a      	ldr	r2, [r3, #0]
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	2101      	movs	r1, #1
 8006faa:	438a      	bics	r2, r1
 8006fac:	601a      	str	r2, [r3, #0]
=======
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	681a      	ldr	r2, [r3, #0]
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	2101      	movs	r1, #1
 800726e:	438a      	bics	r2, r1
 8007270:	601a      	str	r2, [r3, #0]
>>>>>>> main

  /* Compute the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
<<<<<<< HEAD
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4a22      	ldr	r2, [pc, #136]	@ (800703c <HAL_DMA_DeInit+0xb0>)
 8006fb4:	4694      	mov	ip, r2
 8006fb6:	4463      	add	r3, ip
 8006fb8:	2114      	movs	r1, #20
 8006fba:	0018      	movs	r0, r3
 8006fbc:	f7f9 f8c0 	bl	8000140 <__udivsi3>
 8006fc0:	0003      	movs	r3, r0
 8006fc2:	009a      	lsls	r2, r3, #2
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	4a1d      	ldr	r2, [pc, #116]	@ (8007040 <HAL_DMA_DeInit+0xb4>)
 8006fcc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006fda:	221c      	movs	r2, #28
 8006fdc:	401a      	ands	r2, r3
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fe2:	2101      	movs	r1, #1
 8006fe4:	4091      	lsls	r1, r2
 8006fe6:	000a      	movs	r2, r1
 8006fe8:	605a      	str	r2, [r3, #4]
=======
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	4a22      	ldr	r2, [pc, #136]	@ (8007300 <HAL_DMA_DeInit+0xb0>)
 8007278:	4694      	mov	ip, r2
 800727a:	4463      	add	r3, ip
 800727c:	2114      	movs	r1, #20
 800727e:	0018      	movs	r0, r3
 8007280:	f7f8 ff5e 	bl	8000140 <__udivsi3>
 8007284:	0003      	movs	r3, r0
 8007286:	009a      	lsls	r2, r3, #2
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	4a1d      	ldr	r2, [pc, #116]	@ (8007304 <HAL_DMA_DeInit+0xb4>)
 8007290:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	2200      	movs	r2, #0
 8007298:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800729e:	221c      	movs	r2, #28
 80072a0:	401a      	ands	r2, r3
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072a6:	2101      	movs	r1, #1
 80072a8:	4091      	lsls	r1, r2
 80072aa:	000a      	movs	r2, r1
 80072ac:	605a      	str	r2, [r3, #4]
>>>>>>> main

  /* Reset DMA channel selection register */
  /* DMA1 */
  DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
<<<<<<< HEAD
 8006fea:	4b16      	ldr	r3, [pc, #88]	@ (8007044 <HAL_DMA_DeInit+0xb8>)
 8006fec:	681a      	ldr	r2, [r3, #0]
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ff2:	211c      	movs	r1, #28
 8006ff4:	400b      	ands	r3, r1
 8006ff6:	210f      	movs	r1, #15
 8006ff8:	4099      	lsls	r1, r3
 8006ffa:	000b      	movs	r3, r1
 8006ffc:	43d9      	mvns	r1, r3
 8006ffe:	4b11      	ldr	r3, [pc, #68]	@ (8007044 <HAL_DMA_DeInit+0xb8>)
 8007000:	400a      	ands	r2, r1
 8007002:	601a      	str	r2, [r3, #0]

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2200      	movs	r2, #0
 8007008:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2200      	movs	r2, #0
 800700e:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2200      	movs	r2, #0
 8007014:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2200      	movs	r2, #0
 800701a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2200      	movs	r2, #0
 8007020:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2225      	movs	r2, #37	@ 0x25
 8007026:	2100      	movs	r1, #0
 8007028:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2224      	movs	r2, #36	@ 0x24
 800702e:	2100      	movs	r1, #0
 8007030:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007032:	2300      	movs	r3, #0
}
 8007034:	0018      	movs	r0, r3
 8007036:	46bd      	mov	sp, r7
 8007038:	b002      	add	sp, #8
 800703a:	bd80      	pop	{r7, pc}
 800703c:	bffdfff8 	.word	0xbffdfff8
 8007040:	40020000 	.word	0x40020000
 8007044:	400200a8 	.word	0x400200a8

08007048 <HAL_DMA_Start_IT>:
=======
 80072ae:	4b16      	ldr	r3, [pc, #88]	@ (8007308 <HAL_DMA_DeInit+0xb8>)
 80072b0:	681a      	ldr	r2, [r3, #0]
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072b6:	211c      	movs	r1, #28
 80072b8:	400b      	ands	r3, r1
 80072ba:	210f      	movs	r1, #15
 80072bc:	4099      	lsls	r1, r3
 80072be:	000b      	movs	r3, r1
 80072c0:	43d9      	mvns	r1, r3
 80072c2:	4b11      	ldr	r3, [pc, #68]	@ (8007308 <HAL_DMA_DeInit+0xb8>)
 80072c4:	400a      	ands	r2, r1
 80072c6:	601a      	str	r2, [r3, #0]

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2200      	movs	r2, #0
 80072cc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2200      	movs	r2, #0
 80072d2:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2200      	movs	r2, #0
 80072d8:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2200      	movs	r2, #0
 80072de:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2200      	movs	r2, #0
 80072e4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2225      	movs	r2, #37	@ 0x25
 80072ea:	2100      	movs	r1, #0
 80072ec:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2224      	movs	r2, #36	@ 0x24
 80072f2:	2100      	movs	r1, #0
 80072f4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80072f6:	2300      	movs	r3, #0
}
 80072f8:	0018      	movs	r0, r3
 80072fa:	46bd      	mov	sp, r7
 80072fc:	b002      	add	sp, #8
 80072fe:	bd80      	pop	{r7, pc}
 8007300:	bffdfff8 	.word	0xbffdfff8
 8007304:	40020000 	.word	0x40020000
 8007308:	400200a8 	.word	0x400200a8

0800730c <HAL_DMA_Start_IT>:
>>>>>>> main
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
<<<<<<< HEAD
 8007048:	b580      	push	{r7, lr}
 800704a:	b086      	sub	sp, #24
 800704c:	af00      	add	r7, sp, #0
 800704e:	60f8      	str	r0, [r7, #12]
 8007050:	60b9      	str	r1, [r7, #8]
 8007052:	607a      	str	r2, [r7, #4]
 8007054:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007056:	2317      	movs	r3, #23
 8007058:	18fb      	adds	r3, r7, r3
 800705a:	2200      	movs	r2, #0
 800705c:	701a      	strb	r2, [r3, #0]
=======
 800730c:	b580      	push	{r7, lr}
 800730e:	b086      	sub	sp, #24
 8007310:	af00      	add	r7, sp, #0
 8007312:	60f8      	str	r0, [r7, #12]
 8007314:	60b9      	str	r1, [r7, #8]
 8007316:	607a      	str	r2, [r7, #4]
 8007318:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800731a:	2317      	movs	r3, #23
 800731c:	18fb      	adds	r3, r7, r3
 800731e:	2200      	movs	r2, #0
 8007320:	701a      	strb	r2, [r3, #0]
>>>>>>> main

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
<<<<<<< HEAD
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	2224      	movs	r2, #36	@ 0x24
 8007062:	5c9b      	ldrb	r3, [r3, r2]
 8007064:	2b01      	cmp	r3, #1
 8007066:	d101      	bne.n	800706c <HAL_DMA_Start_IT+0x24>
 8007068:	2302      	movs	r3, #2
 800706a:	e04f      	b.n	800710c <HAL_DMA_Start_IT+0xc4>
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	2224      	movs	r2, #36	@ 0x24
 8007070:	2101      	movs	r1, #1
 8007072:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	2225      	movs	r2, #37	@ 0x25
 8007078:	5c9b      	ldrb	r3, [r3, r2]
 800707a:	b2db      	uxtb	r3, r3
 800707c:	2b01      	cmp	r3, #1
 800707e:	d13a      	bne.n	80070f6 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	2225      	movs	r2, #37	@ 0x25
 8007084:	2102      	movs	r1, #2
 8007086:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	2200      	movs	r2, #0
 800708c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	681a      	ldr	r2, [r3, #0]
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	2101      	movs	r1, #1
 800709a:	438a      	bics	r2, r1
 800709c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	687a      	ldr	r2, [r7, #4]
 80070a2:	68b9      	ldr	r1, [r7, #8]
 80070a4:	68f8      	ldr	r0, [r7, #12]
 80070a6:	f000 f976 	bl	8007396 <DMA_SetConfig>
=======
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	2224      	movs	r2, #36	@ 0x24
 8007326:	5c9b      	ldrb	r3, [r3, r2]
 8007328:	2b01      	cmp	r3, #1
 800732a:	d101      	bne.n	8007330 <HAL_DMA_Start_IT+0x24>
 800732c:	2302      	movs	r3, #2
 800732e:	e04f      	b.n	80073d0 <HAL_DMA_Start_IT+0xc4>
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	2224      	movs	r2, #36	@ 0x24
 8007334:	2101      	movs	r1, #1
 8007336:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	2225      	movs	r2, #37	@ 0x25
 800733c:	5c9b      	ldrb	r3, [r3, r2]
 800733e:	b2db      	uxtb	r3, r3
 8007340:	2b01      	cmp	r3, #1
 8007342:	d13a      	bne.n	80073ba <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	2225      	movs	r2, #37	@ 0x25
 8007348:	2102      	movs	r1, #2
 800734a:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	2200      	movs	r2, #0
 8007350:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	681a      	ldr	r2, [r3, #0]
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	2101      	movs	r1, #1
 800735e:	438a      	bics	r2, r1
 8007360:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	687a      	ldr	r2, [r7, #4]
 8007366:	68b9      	ldr	r1, [r7, #8]
 8007368:	68f8      	ldr	r0, [r7, #12]
 800736a:	f000 f976 	bl	800765a <DMA_SetConfig>
>>>>>>> main

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
<<<<<<< HEAD
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d008      	beq.n	80070c4 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	681a      	ldr	r2, [r3, #0]
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	210e      	movs	r1, #14
 80070be:	430a      	orrs	r2, r1
 80070c0:	601a      	str	r2, [r3, #0]
 80070c2:	e00f      	b.n	80070e4 <HAL_DMA_Start_IT+0x9c>
=======
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007372:	2b00      	cmp	r3, #0
 8007374:	d008      	beq.n	8007388 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	681a      	ldr	r2, [r3, #0]
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	210e      	movs	r1, #14
 8007382:	430a      	orrs	r2, r1
 8007384:	601a      	str	r2, [r3, #0]
 8007386:	e00f      	b.n	80073a8 <HAL_DMA_Start_IT+0x9c>
>>>>>>> main
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
<<<<<<< HEAD
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	681a      	ldr	r2, [r3, #0]
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	2104      	movs	r1, #4
 80070d0:	438a      	bics	r2, r1
 80070d2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	681a      	ldr	r2, [r3, #0]
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	210a      	movs	r1, #10
 80070e0:	430a      	orrs	r2, r1
 80070e2:	601a      	str	r2, [r3, #0]
=======
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	681a      	ldr	r2, [r3, #0]
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	2104      	movs	r1, #4
 8007394:	438a      	bics	r2, r1
 8007396:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	681a      	ldr	r2, [r3, #0]
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	210a      	movs	r1, #10
 80073a4:	430a      	orrs	r2, r1
 80073a6:	601a      	str	r2, [r3, #0]
>>>>>>> main
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
<<<<<<< HEAD
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	681a      	ldr	r2, [r3, #0]
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	2101      	movs	r1, #1
 80070f0:	430a      	orrs	r2, r1
 80070f2:	601a      	str	r2, [r3, #0]
 80070f4:	e007      	b.n	8007106 <HAL_DMA_Start_IT+0xbe>
=======
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	681a      	ldr	r2, [r3, #0]
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	2101      	movs	r1, #1
 80073b4:	430a      	orrs	r2, r1
 80073b6:	601a      	str	r2, [r3, #0]
 80073b8:	e007      	b.n	80073ca <HAL_DMA_Start_IT+0xbe>
>>>>>>> main
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
<<<<<<< HEAD
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	2224      	movs	r2, #36	@ 0x24
 80070fa:	2100      	movs	r1, #0
 80070fc:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 80070fe:	2317      	movs	r3, #23
 8007100:	18fb      	adds	r3, r7, r3
 8007102:	2202      	movs	r2, #2
 8007104:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8007106:	2317      	movs	r3, #23
 8007108:	18fb      	adds	r3, r7, r3
 800710a:	781b      	ldrb	r3, [r3, #0]
}
 800710c:	0018      	movs	r0, r3
 800710e:	46bd      	mov	sp, r7
 8007110:	b006      	add	sp, #24
 8007112:	bd80      	pop	{r7, pc}

08007114 <HAL_DMA_Abort>:
=======
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	2224      	movs	r2, #36	@ 0x24
 80073be:	2100      	movs	r1, #0
 80073c0:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 80073c2:	2317      	movs	r3, #23
 80073c4:	18fb      	adds	r3, r7, r3
 80073c6:	2202      	movs	r2, #2
 80073c8:	701a      	strb	r2, [r3, #0]
  }
  return status;
 80073ca:	2317      	movs	r3, #23
 80073cc:	18fb      	adds	r3, r7, r3
 80073ce:	781b      	ldrb	r3, [r3, #0]
}
 80073d0:	0018      	movs	r0, r3
 80073d2:	46bd      	mov	sp, r7
 80073d4:	b006      	add	sp, #24
 80073d6:	bd80      	pop	{r7, pc}

080073d8 <HAL_DMA_Abort>:
>>>>>>> main
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8007114:	b580      	push	{r7, lr}
 8007116:	b084      	sub	sp, #16
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800711c:	230f      	movs	r3, #15
 800711e:	18fb      	adds	r3, r7, r3
 8007120:	2200      	movs	r2, #0
 8007122:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2225      	movs	r2, #37	@ 0x25
 8007128:	5c9b      	ldrb	r3, [r3, r2]
 800712a:	b2db      	uxtb	r3, r3
 800712c:	2b02      	cmp	r3, #2
 800712e:	d008      	beq.n	8007142 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2204      	movs	r2, #4
 8007134:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2224      	movs	r2, #36	@ 0x24
 800713a:	2100      	movs	r1, #0
 800713c:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800713e:	2301      	movs	r3, #1
 8007140:	e024      	b.n	800718c <HAL_DMA_Abort+0x78>
=======
 80073d8:	b580      	push	{r7, lr}
 80073da:	b084      	sub	sp, #16
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80073e0:	230f      	movs	r3, #15
 80073e2:	18fb      	adds	r3, r7, r3
 80073e4:	2200      	movs	r2, #0
 80073e6:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2225      	movs	r2, #37	@ 0x25
 80073ec:	5c9b      	ldrb	r3, [r3, r2]
 80073ee:	b2db      	uxtb	r3, r3
 80073f0:	2b02      	cmp	r3, #2
 80073f2:	d008      	beq.n	8007406 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2204      	movs	r2, #4
 80073f8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2224      	movs	r2, #36	@ 0x24
 80073fe:	2100      	movs	r1, #0
 8007400:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8007402:	2301      	movs	r3, #1
 8007404:	e024      	b.n	8007450 <HAL_DMA_Abort+0x78>
>>>>>>> main
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
<<<<<<< HEAD
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	681a      	ldr	r2, [r3, #0]
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	210e      	movs	r1, #14
 800714e:	438a      	bics	r2, r1
 8007150:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	681a      	ldr	r2, [r3, #0]
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	2101      	movs	r1, #1
 800715e:	438a      	bics	r2, r1
 8007160:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007166:	221c      	movs	r2, #28
 8007168:	401a      	ands	r2, r3
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800716e:	2101      	movs	r1, #1
 8007170:	4091      	lsls	r1, r2
 8007172:	000a      	movs	r2, r1
 8007174:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2225      	movs	r2, #37	@ 0x25
 800717a:	2101      	movs	r1, #1
 800717c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2224      	movs	r2, #36	@ 0x24
 8007182:	2100      	movs	r1, #0
 8007184:	5499      	strb	r1, [r3, r2]

    return status;
 8007186:	230f      	movs	r3, #15
 8007188:	18fb      	adds	r3, r7, r3
 800718a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800718c:	0018      	movs	r0, r3
 800718e:	46bd      	mov	sp, r7
 8007190:	b004      	add	sp, #16
 8007192:	bd80      	pop	{r7, pc}

08007194 <HAL_DMA_Abort_IT>:
=======
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	681a      	ldr	r2, [r3, #0]
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	210e      	movs	r1, #14
 8007412:	438a      	bics	r2, r1
 8007414:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	681a      	ldr	r2, [r3, #0]
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	2101      	movs	r1, #1
 8007422:	438a      	bics	r2, r1
 8007424:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800742a:	221c      	movs	r2, #28
 800742c:	401a      	ands	r2, r3
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007432:	2101      	movs	r1, #1
 8007434:	4091      	lsls	r1, r2
 8007436:	000a      	movs	r2, r1
 8007438:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2225      	movs	r2, #37	@ 0x25
 800743e:	2101      	movs	r1, #1
 8007440:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2224      	movs	r2, #36	@ 0x24
 8007446:	2100      	movs	r1, #0
 8007448:	5499      	strb	r1, [r3, r2]

    return status;
 800744a:	230f      	movs	r3, #15
 800744c:	18fb      	adds	r3, r7, r3
 800744e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007450:	0018      	movs	r0, r3
 8007452:	46bd      	mov	sp, r7
 8007454:	b004      	add	sp, #16
 8007456:	bd80      	pop	{r7, pc}

08007458 <HAL_DMA_Abort_IT>:
>>>>>>> main
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8007194:	b580      	push	{r7, lr}
 8007196:	b084      	sub	sp, #16
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800719c:	210f      	movs	r1, #15
 800719e:	187b      	adds	r3, r7, r1
 80071a0:	2200      	movs	r2, #0
 80071a2:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2225      	movs	r2, #37	@ 0x25
 80071a8:	5c9b      	ldrb	r3, [r3, r2]
 80071aa:	b2db      	uxtb	r3, r3
 80071ac:	2b02      	cmp	r3, #2
 80071ae:	d006      	beq.n	80071be <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2204      	movs	r2, #4
 80071b4:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80071b6:	187b      	adds	r3, r7, r1
 80071b8:	2201      	movs	r2, #1
 80071ba:	701a      	strb	r2, [r3, #0]
 80071bc:	e02a      	b.n	8007214 <HAL_DMA_Abort_IT+0x80>
=======
 8007458:	b580      	push	{r7, lr}
 800745a:	b084      	sub	sp, #16
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007460:	210f      	movs	r1, #15
 8007462:	187b      	adds	r3, r7, r1
 8007464:	2200      	movs	r2, #0
 8007466:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2225      	movs	r2, #37	@ 0x25
 800746c:	5c9b      	ldrb	r3, [r3, r2]
 800746e:	b2db      	uxtb	r3, r3
 8007470:	2b02      	cmp	r3, #2
 8007472:	d006      	beq.n	8007482 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2204      	movs	r2, #4
 8007478:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800747a:	187b      	adds	r3, r7, r1
 800747c:	2201      	movs	r2, #1
 800747e:	701a      	strb	r2, [r3, #0]
 8007480:	e02a      	b.n	80074d8 <HAL_DMA_Abort_IT+0x80>
>>>>>>> main
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
<<<<<<< HEAD
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	681a      	ldr	r2, [r3, #0]
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	210e      	movs	r1, #14
 80071ca:	438a      	bics	r2, r1
 80071cc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	681a      	ldr	r2, [r3, #0]
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	2101      	movs	r1, #1
 80071da:	438a      	bics	r2, r1
 80071dc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071e2:	221c      	movs	r2, #28
 80071e4:	401a      	ands	r2, r3
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071ea:	2101      	movs	r1, #1
 80071ec:	4091      	lsls	r1, r2
 80071ee:	000a      	movs	r2, r1
 80071f0:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2225      	movs	r2, #37	@ 0x25
 80071f6:	2101      	movs	r1, #1
 80071f8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2224      	movs	r2, #36	@ 0x24
 80071fe:	2100      	movs	r1, #0
 8007200:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007206:	2b00      	cmp	r3, #0
 8007208:	d004      	beq.n	8007214 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800720e:	687a      	ldr	r2, [r7, #4]
 8007210:	0010      	movs	r0, r2
 8007212:	4798      	blx	r3
    }
  }
  return status;
 8007214:	230f      	movs	r3, #15
 8007216:	18fb      	adds	r3, r7, r3
 8007218:	781b      	ldrb	r3, [r3, #0]
}
 800721a:	0018      	movs	r0, r3
 800721c:	46bd      	mov	sp, r7
 800721e:	b004      	add	sp, #16
 8007220:	bd80      	pop	{r7, pc}

08007222 <HAL_DMA_IRQHandler>:
=======
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	681a      	ldr	r2, [r3, #0]
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	210e      	movs	r1, #14
 800748e:	438a      	bics	r2, r1
 8007490:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	681a      	ldr	r2, [r3, #0]
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	2101      	movs	r1, #1
 800749e:	438a      	bics	r2, r1
 80074a0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074a6:	221c      	movs	r2, #28
 80074a8:	401a      	ands	r2, r3
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074ae:	2101      	movs	r1, #1
 80074b0:	4091      	lsls	r1, r2
 80074b2:	000a      	movs	r2, r1
 80074b4:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2225      	movs	r2, #37	@ 0x25
 80074ba:	2101      	movs	r1, #1
 80074bc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2224      	movs	r2, #36	@ 0x24
 80074c2:	2100      	movs	r1, #0
 80074c4:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d004      	beq.n	80074d8 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074d2:	687a      	ldr	r2, [r7, #4]
 80074d4:	0010      	movs	r0, r2
 80074d6:	4798      	blx	r3
    }
  }
  return status;
 80074d8:	230f      	movs	r3, #15
 80074da:	18fb      	adds	r3, r7, r3
 80074dc:	781b      	ldrb	r3, [r3, #0]
}
 80074de:	0018      	movs	r0, r3
 80074e0:	46bd      	mov	sp, r7
 80074e2:	b004      	add	sp, #16
 80074e4:	bd80      	pop	{r7, pc}

080074e6 <HAL_DMA_IRQHandler>:
>>>>>>> main
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8007222:	b580      	push	{r7, lr}
 8007224:	b084      	sub	sp, #16
 8007226:	af00      	add	r7, sp, #0
 8007228:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800723e:	221c      	movs	r2, #28
 8007240:	4013      	ands	r3, r2
 8007242:	2204      	movs	r2, #4
 8007244:	409a      	lsls	r2, r3
 8007246:	0013      	movs	r3, r2
 8007248:	68fa      	ldr	r2, [r7, #12]
 800724a:	4013      	ands	r3, r2
 800724c:	d026      	beq.n	800729c <HAL_DMA_IRQHandler+0x7a>
 800724e:	68bb      	ldr	r3, [r7, #8]
 8007250:	2204      	movs	r2, #4
 8007252:	4013      	ands	r3, r2
 8007254:	d022      	beq.n	800729c <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	2220      	movs	r2, #32
 800725e:	4013      	ands	r3, r2
 8007260:	d107      	bne.n	8007272 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	681a      	ldr	r2, [r3, #0]
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	2104      	movs	r1, #4
 800726e:	438a      	bics	r2, r1
 8007270:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007276:	221c      	movs	r2, #28
 8007278:	401a      	ands	r2, r3
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800727e:	2104      	movs	r1, #4
 8007280:	4091      	lsls	r1, r2
 8007282:	000a      	movs	r2, r1
 8007284:	605a      	str	r2, [r3, #4]
=======
 80074e6:	b580      	push	{r7, lr}
 80074e8:	b084      	sub	sp, #16
 80074ea:	af00      	add	r7, sp, #0
 80074ec:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007502:	221c      	movs	r2, #28
 8007504:	4013      	ands	r3, r2
 8007506:	2204      	movs	r2, #4
 8007508:	409a      	lsls	r2, r3
 800750a:	0013      	movs	r3, r2
 800750c:	68fa      	ldr	r2, [r7, #12]
 800750e:	4013      	ands	r3, r2
 8007510:	d026      	beq.n	8007560 <HAL_DMA_IRQHandler+0x7a>
 8007512:	68bb      	ldr	r3, [r7, #8]
 8007514:	2204      	movs	r2, #4
 8007516:	4013      	ands	r3, r2
 8007518:	d022      	beq.n	8007560 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	2220      	movs	r2, #32
 8007522:	4013      	ands	r3, r2
 8007524:	d107      	bne.n	8007536 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	681a      	ldr	r2, [r3, #0]
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	2104      	movs	r1, #4
 8007532:	438a      	bics	r2, r1
 8007534:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800753a:	221c      	movs	r2, #28
 800753c:	401a      	ands	r2, r3
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007542:	2104      	movs	r1, #4
 8007544:	4091      	lsls	r1, r2
 8007546:	000a      	movs	r2, r1
 8007548:	605a      	str	r2, [r3, #4]
>>>>>>> main

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
<<<<<<< HEAD
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800728a:	2b00      	cmp	r3, #0
 800728c:	d100      	bne.n	8007290 <HAL_DMA_IRQHandler+0x6e>
 800728e:	e071      	b.n	8007374 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007294:	687a      	ldr	r2, [r7, #4]
 8007296:	0010      	movs	r0, r2
 8007298:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 800729a:	e06b      	b.n	8007374 <HAL_DMA_IRQHandler+0x152>
=======
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800754e:	2b00      	cmp	r3, #0
 8007550:	d100      	bne.n	8007554 <HAL_DMA_IRQHandler+0x6e>
 8007552:	e071      	b.n	8007638 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007558:	687a      	ldr	r2, [r7, #4]
 800755a:	0010      	movs	r0, r2
 800755c:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 800755e:	e06b      	b.n	8007638 <HAL_DMA_IRQHandler+0x152>
>>>>>>> main
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
<<<<<<< HEAD
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072a0:	221c      	movs	r2, #28
 80072a2:	4013      	ands	r3, r2
 80072a4:	2202      	movs	r2, #2
 80072a6:	409a      	lsls	r2, r3
 80072a8:	0013      	movs	r3, r2
 80072aa:	68fa      	ldr	r2, [r7, #12]
 80072ac:	4013      	ands	r3, r2
 80072ae:	d02d      	beq.n	800730c <HAL_DMA_IRQHandler+0xea>
 80072b0:	68bb      	ldr	r3, [r7, #8]
 80072b2:	2202      	movs	r2, #2
 80072b4:	4013      	ands	r3, r2
 80072b6:	d029      	beq.n	800730c <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	2220      	movs	r2, #32
 80072c0:	4013      	ands	r3, r2
 80072c2:	d10b      	bne.n	80072dc <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	681a      	ldr	r2, [r3, #0]
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	210a      	movs	r1, #10
 80072d0:	438a      	bics	r2, r1
 80072d2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2225      	movs	r2, #37	@ 0x25
 80072d8:	2101      	movs	r1, #1
 80072da:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072e0:	221c      	movs	r2, #28
 80072e2:	401a      	ands	r2, r3
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072e8:	2102      	movs	r1, #2
 80072ea:	4091      	lsls	r1, r2
 80072ec:	000a      	movs	r2, r1
 80072ee:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2224      	movs	r2, #36	@ 0x24
 80072f4:	2100      	movs	r1, #0
 80072f6:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d039      	beq.n	8007374 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007304:	687a      	ldr	r2, [r7, #4]
 8007306:	0010      	movs	r0, r2
 8007308:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800730a:	e033      	b.n	8007374 <HAL_DMA_IRQHandler+0x152>
=======
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007564:	221c      	movs	r2, #28
 8007566:	4013      	ands	r3, r2
 8007568:	2202      	movs	r2, #2
 800756a:	409a      	lsls	r2, r3
 800756c:	0013      	movs	r3, r2
 800756e:	68fa      	ldr	r2, [r7, #12]
 8007570:	4013      	ands	r3, r2
 8007572:	d02d      	beq.n	80075d0 <HAL_DMA_IRQHandler+0xea>
 8007574:	68bb      	ldr	r3, [r7, #8]
 8007576:	2202      	movs	r2, #2
 8007578:	4013      	ands	r3, r2
 800757a:	d029      	beq.n	80075d0 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	2220      	movs	r2, #32
 8007584:	4013      	ands	r3, r2
 8007586:	d10b      	bne.n	80075a0 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	681a      	ldr	r2, [r3, #0]
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	210a      	movs	r1, #10
 8007594:	438a      	bics	r2, r1
 8007596:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2225      	movs	r2, #37	@ 0x25
 800759c:	2101      	movs	r1, #1
 800759e:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075a4:	221c      	movs	r2, #28
 80075a6:	401a      	ands	r2, r3
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075ac:	2102      	movs	r1, #2
 80075ae:	4091      	lsls	r1, r2
 80075b0:	000a      	movs	r2, r1
 80075b2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2224      	movs	r2, #36	@ 0x24
 80075b8:	2100      	movs	r1, #0
 80075ba:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d039      	beq.n	8007638 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075c8:	687a      	ldr	r2, [r7, #4]
 80075ca:	0010      	movs	r0, r2
 80075cc:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80075ce:	e033      	b.n	8007638 <HAL_DMA_IRQHandler+0x152>
>>>>>>> main
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
<<<<<<< HEAD
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007310:	221c      	movs	r2, #28
 8007312:	4013      	ands	r3, r2
 8007314:	2208      	movs	r2, #8
 8007316:	409a      	lsls	r2, r3
 8007318:	0013      	movs	r3, r2
 800731a:	68fa      	ldr	r2, [r7, #12]
 800731c:	4013      	ands	r3, r2
 800731e:	d02a      	beq.n	8007376 <HAL_DMA_IRQHandler+0x154>
 8007320:	68bb      	ldr	r3, [r7, #8]
 8007322:	2208      	movs	r2, #8
 8007324:	4013      	ands	r3, r2
 8007326:	d026      	beq.n	8007376 <HAL_DMA_IRQHandler+0x154>
=======
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075d4:	221c      	movs	r2, #28
 80075d6:	4013      	ands	r3, r2
 80075d8:	2208      	movs	r2, #8
 80075da:	409a      	lsls	r2, r3
 80075dc:	0013      	movs	r3, r2
 80075de:	68fa      	ldr	r2, [r7, #12]
 80075e0:	4013      	ands	r3, r2
 80075e2:	d02a      	beq.n	800763a <HAL_DMA_IRQHandler+0x154>
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	2208      	movs	r2, #8
 80075e8:	4013      	ands	r3, r2
 80075ea:	d026      	beq.n	800763a <HAL_DMA_IRQHandler+0x154>
>>>>>>> main
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
<<<<<<< HEAD
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	681a      	ldr	r2, [r3, #0]
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	210e      	movs	r1, #14
 8007334:	438a      	bics	r2, r1
 8007336:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800733c:	221c      	movs	r2, #28
 800733e:	401a      	ands	r2, r3
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007344:	2101      	movs	r1, #1
 8007346:	4091      	lsls	r1, r2
 8007348:	000a      	movs	r2, r1
 800734a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2201      	movs	r2, #1
 8007350:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2225      	movs	r2, #37	@ 0x25
 8007356:	2101      	movs	r1, #1
 8007358:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	2224      	movs	r2, #36	@ 0x24
 800735e:	2100      	movs	r1, #0
 8007360:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007366:	2b00      	cmp	r3, #0
 8007368:	d005      	beq.n	8007376 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800736e:	687a      	ldr	r2, [r7, #4]
 8007370:	0010      	movs	r0, r2
 8007372:	4798      	blx	r3
=======
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	681a      	ldr	r2, [r3, #0]
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	210e      	movs	r1, #14
 80075f8:	438a      	bics	r2, r1
 80075fa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007600:	221c      	movs	r2, #28
 8007602:	401a      	ands	r2, r3
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007608:	2101      	movs	r1, #1
 800760a:	4091      	lsls	r1, r2
 800760c:	000a      	movs	r2, r1
 800760e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2201      	movs	r2, #1
 8007614:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2225      	movs	r2, #37	@ 0x25
 800761a:	2101      	movs	r1, #1
 800761c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2224      	movs	r2, #36	@ 0x24
 8007622:	2100      	movs	r1, #0
 8007624:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800762a:	2b00      	cmp	r3, #0
 800762c:	d005      	beq.n	800763a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007632:	687a      	ldr	r2, [r7, #4]
 8007634:	0010      	movs	r0, r2
 8007636:	4798      	blx	r3
>>>>>>> main
  }
  else
  {
    /* Nothing To Do */
  }
  return;
<<<<<<< HEAD
 8007374:	46c0      	nop			@ (mov r8, r8)
 8007376:	46c0      	nop			@ (mov r8, r8)
}
 8007378:	46bd      	mov	sp, r7
 800737a:	b004      	add	sp, #16
 800737c:	bd80      	pop	{r7, pc}

0800737e <HAL_DMA_GetState>:
=======
 8007638:	46c0      	nop			@ (mov r8, r8)
 800763a:	46c0      	nop			@ (mov r8, r8)
}
 800763c:	46bd      	mov	sp, r7
 800763e:	b004      	add	sp, #16
 8007640:	bd80      	pop	{r7, pc}

08007642 <HAL_DMA_GetState>:
>>>>>>> main
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 800737e:	b580      	push	{r7, lr}
 8007380:	b082      	sub	sp, #8
 8007382:	af00      	add	r7, sp, #0
 8007384:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2225      	movs	r2, #37	@ 0x25
 800738a:	5c9b      	ldrb	r3, [r3, r2]
 800738c:	b2db      	uxtb	r3, r3
}
 800738e:	0018      	movs	r0, r3
 8007390:	46bd      	mov	sp, r7
 8007392:	b002      	add	sp, #8
 8007394:	bd80      	pop	{r7, pc}

08007396 <DMA_SetConfig>:
=======
 8007642:	b580      	push	{r7, lr}
 8007644:	b082      	sub	sp, #8
 8007646:	af00      	add	r7, sp, #0
 8007648:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2225      	movs	r2, #37	@ 0x25
 800764e:	5c9b      	ldrb	r3, [r3, r2]
 8007650:	b2db      	uxtb	r3, r3
}
 8007652:	0018      	movs	r0, r3
 8007654:	46bd      	mov	sp, r7
 8007656:	b002      	add	sp, #8
 8007658:	bd80      	pop	{r7, pc}

0800765a <DMA_SetConfig>:
>>>>>>> main
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
<<<<<<< HEAD
 8007396:	b580      	push	{r7, lr}
 8007398:	b084      	sub	sp, #16
 800739a:	af00      	add	r7, sp, #0
 800739c:	60f8      	str	r0, [r7, #12]
 800739e:	60b9      	str	r1, [r7, #8]
 80073a0:	607a      	str	r2, [r7, #4]
 80073a2:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073a8:	221c      	movs	r2, #28
 80073aa:	401a      	ands	r2, r3
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073b0:	2101      	movs	r1, #1
 80073b2:	4091      	lsls	r1, r2
 80073b4:	000a      	movs	r2, r1
 80073b6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	683a      	ldr	r2, [r7, #0]
 80073be:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	689b      	ldr	r3, [r3, #8]
 80073c4:	2b10      	cmp	r3, #16
 80073c6:	d108      	bne.n	80073da <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	687a      	ldr	r2, [r7, #4]
 80073ce:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	68ba      	ldr	r2, [r7, #8]
 80073d6:	60da      	str	r2, [r3, #12]
=======
 800765a:	b580      	push	{r7, lr}
 800765c:	b084      	sub	sp, #16
 800765e:	af00      	add	r7, sp, #0
 8007660:	60f8      	str	r0, [r7, #12]
 8007662:	60b9      	str	r1, [r7, #8]
 8007664:	607a      	str	r2, [r7, #4]
 8007666:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800766c:	221c      	movs	r2, #28
 800766e:	401a      	ands	r2, r3
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007674:	2101      	movs	r1, #1
 8007676:	4091      	lsls	r1, r2
 8007678:	000a      	movs	r2, r1
 800767a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	683a      	ldr	r2, [r7, #0]
 8007682:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	689b      	ldr	r3, [r3, #8]
 8007688:	2b10      	cmp	r3, #16
 800768a:	d108      	bne.n	800769e <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	687a      	ldr	r2, [r7, #4]
 8007692:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	68ba      	ldr	r2, [r7, #8]
 800769a:	60da      	str	r2, [r3, #12]
>>>>>>> main
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
<<<<<<< HEAD
 80073d8:	e007      	b.n	80073ea <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	68ba      	ldr	r2, [r7, #8]
 80073e0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	687a      	ldr	r2, [r7, #4]
 80073e8:	60da      	str	r2, [r3, #12]
}
 80073ea:	46c0      	nop			@ (mov r8, r8)
 80073ec:	46bd      	mov	sp, r7
 80073ee:	b004      	add	sp, #16
 80073f0:	bd80      	pop	{r7, pc}
	...

080073f4 <HAL_GPIO_Init>:
=======
 800769c:	e007      	b.n	80076ae <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	68ba      	ldr	r2, [r7, #8]
 80076a4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	687a      	ldr	r2, [r7, #4]
 80076ac:	60da      	str	r2, [r3, #12]
}
 80076ae:	46c0      	nop			@ (mov r8, r8)
 80076b0:	46bd      	mov	sp, r7
 80076b2:	b004      	add	sp, #16
 80076b4:	bd80      	pop	{r7, pc}
	...

080076b8 <HAL_GPIO_Init>:
>>>>>>> main
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
<<<<<<< HEAD
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b086      	sub	sp, #24
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
 80073fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80073fe:	2300      	movs	r3, #0
 8007400:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007402:	2300      	movs	r3, #0
 8007404:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8007406:	2300      	movs	r3, #0
 8007408:	613b      	str	r3, [r7, #16]
=======
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b086      	sub	sp, #24
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
 80076c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80076c2:	2300      	movs	r3, #0
 80076c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80076c6:	2300      	movs	r3, #0
 80076c8:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80076ca:	2300      	movs	r3, #0
 80076cc:	613b      	str	r3, [r7, #16]
>>>>>>> main
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
<<<<<<< HEAD
 800740a:	e155      	b.n	80076b8 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	2101      	movs	r1, #1
 8007412:	697a      	ldr	r2, [r7, #20]
 8007414:	4091      	lsls	r1, r2
 8007416:	000a      	movs	r2, r1
 8007418:	4013      	ands	r3, r2
 800741a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d100      	bne.n	8007424 <HAL_GPIO_Init+0x30>
 8007422:	e146      	b.n	80076b2 <HAL_GPIO_Init+0x2be>
=======
 80076ce:	e155      	b.n	800797c <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	2101      	movs	r1, #1
 80076d6:	697a      	ldr	r2, [r7, #20]
 80076d8:	4091      	lsls	r1, r2
 80076da:	000a      	movs	r2, r1
 80076dc:	4013      	ands	r3, r2
 80076de:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d100      	bne.n	80076e8 <HAL_GPIO_Init+0x30>
 80076e6:	e146      	b.n	8007976 <HAL_GPIO_Init+0x2be>
>>>>>>> main
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
<<<<<<< HEAD
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	685b      	ldr	r3, [r3, #4]
 8007428:	2203      	movs	r2, #3
 800742a:	4013      	ands	r3, r2
 800742c:	2b01      	cmp	r3, #1
 800742e:	d005      	beq.n	800743c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	685b      	ldr	r3, [r3, #4]
 8007434:	2203      	movs	r2, #3
 8007436:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8007438:	2b02      	cmp	r3, #2
 800743a:	d130      	bne.n	800749e <HAL_GPIO_Init+0xaa>
=======
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	685b      	ldr	r3, [r3, #4]
 80076ec:	2203      	movs	r2, #3
 80076ee:	4013      	ands	r3, r2
 80076f0:	2b01      	cmp	r3, #1
 80076f2:	d005      	beq.n	8007700 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	685b      	ldr	r3, [r3, #4]
 80076f8:	2203      	movs	r2, #3
 80076fa:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80076fc:	2b02      	cmp	r3, #2
 80076fe:	d130      	bne.n	8007762 <HAL_GPIO_Init+0xaa>
>>>>>>> main
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
<<<<<<< HEAD
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	689b      	ldr	r3, [r3, #8]
 8007440:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8007442:	697b      	ldr	r3, [r7, #20]
 8007444:	005b      	lsls	r3, r3, #1
 8007446:	2203      	movs	r2, #3
 8007448:	409a      	lsls	r2, r3
 800744a:	0013      	movs	r3, r2
 800744c:	43da      	mvns	r2, r3
 800744e:	693b      	ldr	r3, [r7, #16]
 8007450:	4013      	ands	r3, r2
 8007452:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	68da      	ldr	r2, [r3, #12]
 8007458:	697b      	ldr	r3, [r7, #20]
 800745a:	005b      	lsls	r3, r3, #1
 800745c:	409a      	lsls	r2, r3
 800745e:	0013      	movs	r3, r2
 8007460:	693a      	ldr	r2, [r7, #16]
 8007462:	4313      	orrs	r3, r2
 8007464:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	693a      	ldr	r2, [r7, #16]
 800746a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	685b      	ldr	r3, [r3, #4]
 8007470:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007472:	2201      	movs	r2, #1
 8007474:	697b      	ldr	r3, [r7, #20]
 8007476:	409a      	lsls	r2, r3
 8007478:	0013      	movs	r3, r2
 800747a:	43da      	mvns	r2, r3
 800747c:	693b      	ldr	r3, [r7, #16]
 800747e:	4013      	ands	r3, r2
 8007480:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	685b      	ldr	r3, [r3, #4]
 8007486:	091b      	lsrs	r3, r3, #4
 8007488:	2201      	movs	r2, #1
 800748a:	401a      	ands	r2, r3
 800748c:	697b      	ldr	r3, [r7, #20]
 800748e:	409a      	lsls	r2, r3
 8007490:	0013      	movs	r3, r2
 8007492:	693a      	ldr	r2, [r7, #16]
 8007494:	4313      	orrs	r3, r2
 8007496:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	693a      	ldr	r2, [r7, #16]
 800749c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	685b      	ldr	r3, [r3, #4]
 80074a2:	2203      	movs	r2, #3
 80074a4:	4013      	ands	r3, r2
 80074a6:	2b03      	cmp	r3, #3
 80074a8:	d017      	beq.n	80074da <HAL_GPIO_Init+0xe6>
=======
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	689b      	ldr	r3, [r3, #8]
 8007704:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8007706:	697b      	ldr	r3, [r7, #20]
 8007708:	005b      	lsls	r3, r3, #1
 800770a:	2203      	movs	r2, #3
 800770c:	409a      	lsls	r2, r3
 800770e:	0013      	movs	r3, r2
 8007710:	43da      	mvns	r2, r3
 8007712:	693b      	ldr	r3, [r7, #16]
 8007714:	4013      	ands	r3, r2
 8007716:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	68da      	ldr	r2, [r3, #12]
 800771c:	697b      	ldr	r3, [r7, #20]
 800771e:	005b      	lsls	r3, r3, #1
 8007720:	409a      	lsls	r2, r3
 8007722:	0013      	movs	r3, r2
 8007724:	693a      	ldr	r2, [r7, #16]
 8007726:	4313      	orrs	r3, r2
 8007728:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	693a      	ldr	r2, [r7, #16]
 800772e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	685b      	ldr	r3, [r3, #4]
 8007734:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007736:	2201      	movs	r2, #1
 8007738:	697b      	ldr	r3, [r7, #20]
 800773a:	409a      	lsls	r2, r3
 800773c:	0013      	movs	r3, r2
 800773e:	43da      	mvns	r2, r3
 8007740:	693b      	ldr	r3, [r7, #16]
 8007742:	4013      	ands	r3, r2
 8007744:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	685b      	ldr	r3, [r3, #4]
 800774a:	091b      	lsrs	r3, r3, #4
 800774c:	2201      	movs	r2, #1
 800774e:	401a      	ands	r2, r3
 8007750:	697b      	ldr	r3, [r7, #20]
 8007752:	409a      	lsls	r2, r3
 8007754:	0013      	movs	r3, r2
 8007756:	693a      	ldr	r2, [r7, #16]
 8007758:	4313      	orrs	r3, r2
 800775a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	693a      	ldr	r2, [r7, #16]
 8007760:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	685b      	ldr	r3, [r3, #4]
 8007766:	2203      	movs	r2, #3
 8007768:	4013      	ands	r3, r2
 800776a:	2b03      	cmp	r3, #3
 800776c:	d017      	beq.n	800779e <HAL_GPIO_Init+0xe6>
>>>>>>> main
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
<<<<<<< HEAD
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	68db      	ldr	r3, [r3, #12]
 80074ae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80074b0:	697b      	ldr	r3, [r7, #20]
 80074b2:	005b      	lsls	r3, r3, #1
 80074b4:	2203      	movs	r2, #3
 80074b6:	409a      	lsls	r2, r3
 80074b8:	0013      	movs	r3, r2
 80074ba:	43da      	mvns	r2, r3
 80074bc:	693b      	ldr	r3, [r7, #16]
 80074be:	4013      	ands	r3, r2
 80074c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	689a      	ldr	r2, [r3, #8]
 80074c6:	697b      	ldr	r3, [r7, #20]
 80074c8:	005b      	lsls	r3, r3, #1
 80074ca:	409a      	lsls	r2, r3
 80074cc:	0013      	movs	r3, r2
 80074ce:	693a      	ldr	r2, [r7, #16]
 80074d0:	4313      	orrs	r3, r2
 80074d2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	693a      	ldr	r2, [r7, #16]
 80074d8:	60da      	str	r2, [r3, #12]
=======
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	68db      	ldr	r3, [r3, #12]
 8007772:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007774:	697b      	ldr	r3, [r7, #20]
 8007776:	005b      	lsls	r3, r3, #1
 8007778:	2203      	movs	r2, #3
 800777a:	409a      	lsls	r2, r3
 800777c:	0013      	movs	r3, r2
 800777e:	43da      	mvns	r2, r3
 8007780:	693b      	ldr	r3, [r7, #16]
 8007782:	4013      	ands	r3, r2
 8007784:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	689a      	ldr	r2, [r3, #8]
 800778a:	697b      	ldr	r3, [r7, #20]
 800778c:	005b      	lsls	r3, r3, #1
 800778e:	409a      	lsls	r2, r3
 8007790:	0013      	movs	r3, r2
 8007792:	693a      	ldr	r2, [r7, #16]
 8007794:	4313      	orrs	r3, r2
 8007796:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	693a      	ldr	r2, [r7, #16]
 800779c:	60da      	str	r2, [r3, #12]
>>>>>>> main
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
<<<<<<< HEAD
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	685b      	ldr	r3, [r3, #4]
 80074de:	2203      	movs	r2, #3
 80074e0:	4013      	ands	r3, r2
 80074e2:	2b02      	cmp	r3, #2
 80074e4:	d123      	bne.n	800752e <HAL_GPIO_Init+0x13a>
=======
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	685b      	ldr	r3, [r3, #4]
 80077a2:	2203      	movs	r2, #3
 80077a4:	4013      	ands	r3, r2
 80077a6:	2b02      	cmp	r3, #2
 80077a8:	d123      	bne.n	80077f2 <HAL_GPIO_Init+0x13a>
>>>>>>> main
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
<<<<<<< HEAD
 80074e6:	697b      	ldr	r3, [r7, #20]
 80074e8:	08da      	lsrs	r2, r3, #3
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	3208      	adds	r2, #8
 80074ee:	0092      	lsls	r2, r2, #2
 80074f0:	58d3      	ldr	r3, [r2, r3]
 80074f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80074f4:	697b      	ldr	r3, [r7, #20]
 80074f6:	2207      	movs	r2, #7
 80074f8:	4013      	ands	r3, r2
 80074fa:	009b      	lsls	r3, r3, #2
 80074fc:	220f      	movs	r2, #15
 80074fe:	409a      	lsls	r2, r3
 8007500:	0013      	movs	r3, r2
 8007502:	43da      	mvns	r2, r3
 8007504:	693b      	ldr	r3, [r7, #16]
 8007506:	4013      	ands	r3, r2
 8007508:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	691a      	ldr	r2, [r3, #16]
 800750e:	697b      	ldr	r3, [r7, #20]
 8007510:	2107      	movs	r1, #7
 8007512:	400b      	ands	r3, r1
 8007514:	009b      	lsls	r3, r3, #2
 8007516:	409a      	lsls	r2, r3
 8007518:	0013      	movs	r3, r2
 800751a:	693a      	ldr	r2, [r7, #16]
 800751c:	4313      	orrs	r3, r2
 800751e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8007520:	697b      	ldr	r3, [r7, #20]
 8007522:	08da      	lsrs	r2, r3, #3
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	3208      	adds	r2, #8
 8007528:	0092      	lsls	r2, r2, #2
 800752a:	6939      	ldr	r1, [r7, #16]
 800752c:	50d1      	str	r1, [r2, r3]
=======
 80077aa:	697b      	ldr	r3, [r7, #20]
 80077ac:	08da      	lsrs	r2, r3, #3
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	3208      	adds	r2, #8
 80077b2:	0092      	lsls	r2, r2, #2
 80077b4:	58d3      	ldr	r3, [r2, r3]
 80077b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80077b8:	697b      	ldr	r3, [r7, #20]
 80077ba:	2207      	movs	r2, #7
 80077bc:	4013      	ands	r3, r2
 80077be:	009b      	lsls	r3, r3, #2
 80077c0:	220f      	movs	r2, #15
 80077c2:	409a      	lsls	r2, r3
 80077c4:	0013      	movs	r3, r2
 80077c6:	43da      	mvns	r2, r3
 80077c8:	693b      	ldr	r3, [r7, #16]
 80077ca:	4013      	ands	r3, r2
 80077cc:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	691a      	ldr	r2, [r3, #16]
 80077d2:	697b      	ldr	r3, [r7, #20]
 80077d4:	2107      	movs	r1, #7
 80077d6:	400b      	ands	r3, r1
 80077d8:	009b      	lsls	r3, r3, #2
 80077da:	409a      	lsls	r2, r3
 80077dc:	0013      	movs	r3, r2
 80077de:	693a      	ldr	r2, [r7, #16]
 80077e0:	4313      	orrs	r3, r2
 80077e2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80077e4:	697b      	ldr	r3, [r7, #20]
 80077e6:	08da      	lsrs	r2, r3, #3
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	3208      	adds	r2, #8
 80077ec:	0092      	lsls	r2, r2, #2
 80077ee:	6939      	ldr	r1, [r7, #16]
 80077f0:	50d1      	str	r1, [r2, r3]
>>>>>>> main
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
<<<<<<< HEAD
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007534:	697b      	ldr	r3, [r7, #20]
 8007536:	005b      	lsls	r3, r3, #1
 8007538:	2203      	movs	r2, #3
 800753a:	409a      	lsls	r2, r3
 800753c:	0013      	movs	r3, r2
 800753e:	43da      	mvns	r2, r3
 8007540:	693b      	ldr	r3, [r7, #16]
 8007542:	4013      	ands	r3, r2
 8007544:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	685b      	ldr	r3, [r3, #4]
 800754a:	2203      	movs	r2, #3
 800754c:	401a      	ands	r2, r3
 800754e:	697b      	ldr	r3, [r7, #20]
 8007550:	005b      	lsls	r3, r3, #1
 8007552:	409a      	lsls	r2, r3
 8007554:	0013      	movs	r3, r2
 8007556:	693a      	ldr	r2, [r7, #16]
 8007558:	4313      	orrs	r3, r2
 800755a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	693a      	ldr	r2, [r7, #16]
 8007560:	601a      	str	r2, [r3, #0]
=======
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80077f8:	697b      	ldr	r3, [r7, #20]
 80077fa:	005b      	lsls	r3, r3, #1
 80077fc:	2203      	movs	r2, #3
 80077fe:	409a      	lsls	r2, r3
 8007800:	0013      	movs	r3, r2
 8007802:	43da      	mvns	r2, r3
 8007804:	693b      	ldr	r3, [r7, #16]
 8007806:	4013      	ands	r3, r2
 8007808:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	685b      	ldr	r3, [r3, #4]
 800780e:	2203      	movs	r2, #3
 8007810:	401a      	ands	r2, r3
 8007812:	697b      	ldr	r3, [r7, #20]
 8007814:	005b      	lsls	r3, r3, #1
 8007816:	409a      	lsls	r2, r3
 8007818:	0013      	movs	r3, r2
 800781a:	693a      	ldr	r2, [r7, #16]
 800781c:	4313      	orrs	r3, r2
 800781e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	693a      	ldr	r2, [r7, #16]
 8007824:	601a      	str	r2, [r3, #0]
>>>>>>> main

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
<<<<<<< HEAD
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	685a      	ldr	r2, [r3, #4]
 8007566:	23c0      	movs	r3, #192	@ 0xc0
 8007568:	029b      	lsls	r3, r3, #10
 800756a:	4013      	ands	r3, r2
 800756c:	d100      	bne.n	8007570 <HAL_GPIO_Init+0x17c>
 800756e:	e0a0      	b.n	80076b2 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007570:	4b57      	ldr	r3, [pc, #348]	@ (80076d0 <HAL_GPIO_Init+0x2dc>)
 8007572:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007574:	4b56      	ldr	r3, [pc, #344]	@ (80076d0 <HAL_GPIO_Init+0x2dc>)
 8007576:	2101      	movs	r1, #1
 8007578:	430a      	orrs	r2, r1
 800757a:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 800757c:	4a55      	ldr	r2, [pc, #340]	@ (80076d4 <HAL_GPIO_Init+0x2e0>)
 800757e:	697b      	ldr	r3, [r7, #20]
 8007580:	089b      	lsrs	r3, r3, #2
 8007582:	3302      	adds	r3, #2
 8007584:	009b      	lsls	r3, r3, #2
 8007586:	589b      	ldr	r3, [r3, r2]
 8007588:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800758a:	697b      	ldr	r3, [r7, #20]
 800758c:	2203      	movs	r2, #3
 800758e:	4013      	ands	r3, r2
 8007590:	009b      	lsls	r3, r3, #2
 8007592:	220f      	movs	r2, #15
 8007594:	409a      	lsls	r2, r3
 8007596:	0013      	movs	r3, r2
 8007598:	43da      	mvns	r2, r3
 800759a:	693b      	ldr	r3, [r7, #16]
 800759c:	4013      	ands	r3, r2
 800759e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80075a0:	687a      	ldr	r2, [r7, #4]
 80075a2:	23a0      	movs	r3, #160	@ 0xa0
 80075a4:	05db      	lsls	r3, r3, #23
 80075a6:	429a      	cmp	r2, r3
 80075a8:	d01f      	beq.n	80075ea <HAL_GPIO_Init+0x1f6>
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	4a4a      	ldr	r2, [pc, #296]	@ (80076d8 <HAL_GPIO_Init+0x2e4>)
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d019      	beq.n	80075e6 <HAL_GPIO_Init+0x1f2>
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	4a49      	ldr	r2, [pc, #292]	@ (80076dc <HAL_GPIO_Init+0x2e8>)
 80075b6:	4293      	cmp	r3, r2
 80075b8:	d013      	beq.n	80075e2 <HAL_GPIO_Init+0x1ee>
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	4a48      	ldr	r2, [pc, #288]	@ (80076e0 <HAL_GPIO_Init+0x2ec>)
 80075be:	4293      	cmp	r3, r2
 80075c0:	d00d      	beq.n	80075de <HAL_GPIO_Init+0x1ea>
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	4a47      	ldr	r2, [pc, #284]	@ (80076e4 <HAL_GPIO_Init+0x2f0>)
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d007      	beq.n	80075da <HAL_GPIO_Init+0x1e6>
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	4a46      	ldr	r2, [pc, #280]	@ (80076e8 <HAL_GPIO_Init+0x2f4>)
 80075ce:	4293      	cmp	r3, r2
 80075d0:	d101      	bne.n	80075d6 <HAL_GPIO_Init+0x1e2>
 80075d2:	2305      	movs	r3, #5
 80075d4:	e00a      	b.n	80075ec <HAL_GPIO_Init+0x1f8>
 80075d6:	2306      	movs	r3, #6
 80075d8:	e008      	b.n	80075ec <HAL_GPIO_Init+0x1f8>
 80075da:	2304      	movs	r3, #4
 80075dc:	e006      	b.n	80075ec <HAL_GPIO_Init+0x1f8>
 80075de:	2303      	movs	r3, #3
 80075e0:	e004      	b.n	80075ec <HAL_GPIO_Init+0x1f8>
 80075e2:	2302      	movs	r3, #2
 80075e4:	e002      	b.n	80075ec <HAL_GPIO_Init+0x1f8>
 80075e6:	2301      	movs	r3, #1
 80075e8:	e000      	b.n	80075ec <HAL_GPIO_Init+0x1f8>
 80075ea:	2300      	movs	r3, #0
 80075ec:	697a      	ldr	r2, [r7, #20]
 80075ee:	2103      	movs	r1, #3
 80075f0:	400a      	ands	r2, r1
 80075f2:	0092      	lsls	r2, r2, #2
 80075f4:	4093      	lsls	r3, r2
 80075f6:	693a      	ldr	r2, [r7, #16]
 80075f8:	4313      	orrs	r3, r2
 80075fa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80075fc:	4935      	ldr	r1, [pc, #212]	@ (80076d4 <HAL_GPIO_Init+0x2e0>)
 80075fe:	697b      	ldr	r3, [r7, #20]
 8007600:	089b      	lsrs	r3, r3, #2
 8007602:	3302      	adds	r3, #2
 8007604:	009b      	lsls	r3, r3, #2
 8007606:	693a      	ldr	r2, [r7, #16]
 8007608:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800760a:	4b38      	ldr	r3, [pc, #224]	@ (80076ec <HAL_GPIO_Init+0x2f8>)
 800760c:	689b      	ldr	r3, [r3, #8]
 800760e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	43da      	mvns	r2, r3
 8007614:	693b      	ldr	r3, [r7, #16]
 8007616:	4013      	ands	r3, r2
 8007618:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	685a      	ldr	r2, [r3, #4]
 800761e:	2380      	movs	r3, #128	@ 0x80
 8007620:	035b      	lsls	r3, r3, #13
 8007622:	4013      	ands	r3, r2
 8007624:	d003      	beq.n	800762e <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8007626:	693a      	ldr	r2, [r7, #16]
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	4313      	orrs	r3, r2
 800762c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800762e:	4b2f      	ldr	r3, [pc, #188]	@ (80076ec <HAL_GPIO_Init+0x2f8>)
 8007630:	693a      	ldr	r2, [r7, #16]
 8007632:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8007634:	4b2d      	ldr	r3, [pc, #180]	@ (80076ec <HAL_GPIO_Init+0x2f8>)
 8007636:	68db      	ldr	r3, [r3, #12]
 8007638:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	43da      	mvns	r2, r3
 800763e:	693b      	ldr	r3, [r7, #16]
 8007640:	4013      	ands	r3, r2
 8007642:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	685a      	ldr	r2, [r3, #4]
 8007648:	2380      	movs	r3, #128	@ 0x80
 800764a:	039b      	lsls	r3, r3, #14
 800764c:	4013      	ands	r3, r2
 800764e:	d003      	beq.n	8007658 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8007650:	693a      	ldr	r2, [r7, #16]
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	4313      	orrs	r3, r2
 8007656:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8007658:	4b24      	ldr	r3, [pc, #144]	@ (80076ec <HAL_GPIO_Init+0x2f8>)
 800765a:	693a      	ldr	r2, [r7, #16]
 800765c:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 800765e:	4b23      	ldr	r3, [pc, #140]	@ (80076ec <HAL_GPIO_Init+0x2f8>)
 8007660:	685b      	ldr	r3, [r3, #4]
 8007662:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	43da      	mvns	r2, r3
 8007668:	693b      	ldr	r3, [r7, #16]
 800766a:	4013      	ands	r3, r2
 800766c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	685a      	ldr	r2, [r3, #4]
 8007672:	2380      	movs	r3, #128	@ 0x80
 8007674:	029b      	lsls	r3, r3, #10
 8007676:	4013      	ands	r3, r2
 8007678:	d003      	beq.n	8007682 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 800767a:	693a      	ldr	r2, [r7, #16]
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	4313      	orrs	r3, r2
 8007680:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8007682:	4b1a      	ldr	r3, [pc, #104]	@ (80076ec <HAL_GPIO_Init+0x2f8>)
 8007684:	693a      	ldr	r2, [r7, #16]
 8007686:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007688:	4b18      	ldr	r3, [pc, #96]	@ (80076ec <HAL_GPIO_Init+0x2f8>)
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	43da      	mvns	r2, r3
 8007692:	693b      	ldr	r3, [r7, #16]
 8007694:	4013      	ands	r3, r2
 8007696:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	685a      	ldr	r2, [r3, #4]
 800769c:	2380      	movs	r3, #128	@ 0x80
 800769e:	025b      	lsls	r3, r3, #9
 80076a0:	4013      	ands	r3, r2
 80076a2:	d003      	beq.n	80076ac <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 80076a4:	693a      	ldr	r2, [r7, #16]
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	4313      	orrs	r3, r2
 80076aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80076ac:	4b0f      	ldr	r3, [pc, #60]	@ (80076ec <HAL_GPIO_Init+0x2f8>)
 80076ae:	693a      	ldr	r2, [r7, #16]
 80076b0:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 80076b2:	697b      	ldr	r3, [r7, #20]
 80076b4:	3301      	adds	r3, #1
 80076b6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	681a      	ldr	r2, [r3, #0]
 80076bc:	697b      	ldr	r3, [r7, #20]
 80076be:	40da      	lsrs	r2, r3
 80076c0:	1e13      	subs	r3, r2, #0
 80076c2:	d000      	beq.n	80076c6 <HAL_GPIO_Init+0x2d2>
 80076c4:	e6a2      	b.n	800740c <HAL_GPIO_Init+0x18>
  }
}
 80076c6:	46c0      	nop			@ (mov r8, r8)
 80076c8:	46c0      	nop			@ (mov r8, r8)
 80076ca:	46bd      	mov	sp, r7
 80076cc:	b006      	add	sp, #24
 80076ce:	bd80      	pop	{r7, pc}
 80076d0:	40021000 	.word	0x40021000
 80076d4:	40010000 	.word	0x40010000
 80076d8:	50000400 	.word	0x50000400
 80076dc:	50000800 	.word	0x50000800
 80076e0:	50000c00 	.word	0x50000c00
 80076e4:	50001000 	.word	0x50001000
 80076e8:	50001c00 	.word	0x50001c00
 80076ec:	40010400 	.word	0x40010400

080076f0 <HAL_GPIO_DeInit>:
=======
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	685a      	ldr	r2, [r3, #4]
 800782a:	23c0      	movs	r3, #192	@ 0xc0
 800782c:	029b      	lsls	r3, r3, #10
 800782e:	4013      	ands	r3, r2
 8007830:	d100      	bne.n	8007834 <HAL_GPIO_Init+0x17c>
 8007832:	e0a0      	b.n	8007976 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007834:	4b57      	ldr	r3, [pc, #348]	@ (8007994 <HAL_GPIO_Init+0x2dc>)
 8007836:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007838:	4b56      	ldr	r3, [pc, #344]	@ (8007994 <HAL_GPIO_Init+0x2dc>)
 800783a:	2101      	movs	r1, #1
 800783c:	430a      	orrs	r2, r1
 800783e:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8007840:	4a55      	ldr	r2, [pc, #340]	@ (8007998 <HAL_GPIO_Init+0x2e0>)
 8007842:	697b      	ldr	r3, [r7, #20]
 8007844:	089b      	lsrs	r3, r3, #2
 8007846:	3302      	adds	r3, #2
 8007848:	009b      	lsls	r3, r3, #2
 800784a:	589b      	ldr	r3, [r3, r2]
 800784c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800784e:	697b      	ldr	r3, [r7, #20]
 8007850:	2203      	movs	r2, #3
 8007852:	4013      	ands	r3, r2
 8007854:	009b      	lsls	r3, r3, #2
 8007856:	220f      	movs	r2, #15
 8007858:	409a      	lsls	r2, r3
 800785a:	0013      	movs	r3, r2
 800785c:	43da      	mvns	r2, r3
 800785e:	693b      	ldr	r3, [r7, #16]
 8007860:	4013      	ands	r3, r2
 8007862:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8007864:	687a      	ldr	r2, [r7, #4]
 8007866:	23a0      	movs	r3, #160	@ 0xa0
 8007868:	05db      	lsls	r3, r3, #23
 800786a:	429a      	cmp	r2, r3
 800786c:	d01f      	beq.n	80078ae <HAL_GPIO_Init+0x1f6>
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	4a4a      	ldr	r2, [pc, #296]	@ (800799c <HAL_GPIO_Init+0x2e4>)
 8007872:	4293      	cmp	r3, r2
 8007874:	d019      	beq.n	80078aa <HAL_GPIO_Init+0x1f2>
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	4a49      	ldr	r2, [pc, #292]	@ (80079a0 <HAL_GPIO_Init+0x2e8>)
 800787a:	4293      	cmp	r3, r2
 800787c:	d013      	beq.n	80078a6 <HAL_GPIO_Init+0x1ee>
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	4a48      	ldr	r2, [pc, #288]	@ (80079a4 <HAL_GPIO_Init+0x2ec>)
 8007882:	4293      	cmp	r3, r2
 8007884:	d00d      	beq.n	80078a2 <HAL_GPIO_Init+0x1ea>
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	4a47      	ldr	r2, [pc, #284]	@ (80079a8 <HAL_GPIO_Init+0x2f0>)
 800788a:	4293      	cmp	r3, r2
 800788c:	d007      	beq.n	800789e <HAL_GPIO_Init+0x1e6>
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	4a46      	ldr	r2, [pc, #280]	@ (80079ac <HAL_GPIO_Init+0x2f4>)
 8007892:	4293      	cmp	r3, r2
 8007894:	d101      	bne.n	800789a <HAL_GPIO_Init+0x1e2>
 8007896:	2305      	movs	r3, #5
 8007898:	e00a      	b.n	80078b0 <HAL_GPIO_Init+0x1f8>
 800789a:	2306      	movs	r3, #6
 800789c:	e008      	b.n	80078b0 <HAL_GPIO_Init+0x1f8>
 800789e:	2304      	movs	r3, #4
 80078a0:	e006      	b.n	80078b0 <HAL_GPIO_Init+0x1f8>
 80078a2:	2303      	movs	r3, #3
 80078a4:	e004      	b.n	80078b0 <HAL_GPIO_Init+0x1f8>
 80078a6:	2302      	movs	r3, #2
 80078a8:	e002      	b.n	80078b0 <HAL_GPIO_Init+0x1f8>
 80078aa:	2301      	movs	r3, #1
 80078ac:	e000      	b.n	80078b0 <HAL_GPIO_Init+0x1f8>
 80078ae:	2300      	movs	r3, #0
 80078b0:	697a      	ldr	r2, [r7, #20]
 80078b2:	2103      	movs	r1, #3
 80078b4:	400a      	ands	r2, r1
 80078b6:	0092      	lsls	r2, r2, #2
 80078b8:	4093      	lsls	r3, r2
 80078ba:	693a      	ldr	r2, [r7, #16]
 80078bc:	4313      	orrs	r3, r2
 80078be:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80078c0:	4935      	ldr	r1, [pc, #212]	@ (8007998 <HAL_GPIO_Init+0x2e0>)
 80078c2:	697b      	ldr	r3, [r7, #20]
 80078c4:	089b      	lsrs	r3, r3, #2
 80078c6:	3302      	adds	r3, #2
 80078c8:	009b      	lsls	r3, r3, #2
 80078ca:	693a      	ldr	r2, [r7, #16]
 80078cc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80078ce:	4b38      	ldr	r3, [pc, #224]	@ (80079b0 <HAL_GPIO_Init+0x2f8>)
 80078d0:	689b      	ldr	r3, [r3, #8]
 80078d2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	43da      	mvns	r2, r3
 80078d8:	693b      	ldr	r3, [r7, #16]
 80078da:	4013      	ands	r3, r2
 80078dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	685a      	ldr	r2, [r3, #4]
 80078e2:	2380      	movs	r3, #128	@ 0x80
 80078e4:	035b      	lsls	r3, r3, #13
 80078e6:	4013      	ands	r3, r2
 80078e8:	d003      	beq.n	80078f2 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 80078ea:	693a      	ldr	r2, [r7, #16]
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	4313      	orrs	r3, r2
 80078f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80078f2:	4b2f      	ldr	r3, [pc, #188]	@ (80079b0 <HAL_GPIO_Init+0x2f8>)
 80078f4:	693a      	ldr	r2, [r7, #16]
 80078f6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80078f8:	4b2d      	ldr	r3, [pc, #180]	@ (80079b0 <HAL_GPIO_Init+0x2f8>)
 80078fa:	68db      	ldr	r3, [r3, #12]
 80078fc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	43da      	mvns	r2, r3
 8007902:	693b      	ldr	r3, [r7, #16]
 8007904:	4013      	ands	r3, r2
 8007906:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	685a      	ldr	r2, [r3, #4]
 800790c:	2380      	movs	r3, #128	@ 0x80
 800790e:	039b      	lsls	r3, r3, #14
 8007910:	4013      	ands	r3, r2
 8007912:	d003      	beq.n	800791c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8007914:	693a      	ldr	r2, [r7, #16]
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	4313      	orrs	r3, r2
 800791a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800791c:	4b24      	ldr	r3, [pc, #144]	@ (80079b0 <HAL_GPIO_Init+0x2f8>)
 800791e:	693a      	ldr	r2, [r7, #16]
 8007920:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8007922:	4b23      	ldr	r3, [pc, #140]	@ (80079b0 <HAL_GPIO_Init+0x2f8>)
 8007924:	685b      	ldr	r3, [r3, #4]
 8007926:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	43da      	mvns	r2, r3
 800792c:	693b      	ldr	r3, [r7, #16]
 800792e:	4013      	ands	r3, r2
 8007930:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	685a      	ldr	r2, [r3, #4]
 8007936:	2380      	movs	r3, #128	@ 0x80
 8007938:	029b      	lsls	r3, r3, #10
 800793a:	4013      	ands	r3, r2
 800793c:	d003      	beq.n	8007946 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 800793e:	693a      	ldr	r2, [r7, #16]
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	4313      	orrs	r3, r2
 8007944:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8007946:	4b1a      	ldr	r3, [pc, #104]	@ (80079b0 <HAL_GPIO_Init+0x2f8>)
 8007948:	693a      	ldr	r2, [r7, #16]
 800794a:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800794c:	4b18      	ldr	r3, [pc, #96]	@ (80079b0 <HAL_GPIO_Init+0x2f8>)
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	43da      	mvns	r2, r3
 8007956:	693b      	ldr	r3, [r7, #16]
 8007958:	4013      	ands	r3, r2
 800795a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	685a      	ldr	r2, [r3, #4]
 8007960:	2380      	movs	r3, #128	@ 0x80
 8007962:	025b      	lsls	r3, r3, #9
 8007964:	4013      	ands	r3, r2
 8007966:	d003      	beq.n	8007970 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8007968:	693a      	ldr	r2, [r7, #16]
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	4313      	orrs	r3, r2
 800796e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8007970:	4b0f      	ldr	r3, [pc, #60]	@ (80079b0 <HAL_GPIO_Init+0x2f8>)
 8007972:	693a      	ldr	r2, [r7, #16]
 8007974:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8007976:	697b      	ldr	r3, [r7, #20]
 8007978:	3301      	adds	r3, #1
 800797a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	681a      	ldr	r2, [r3, #0]
 8007980:	697b      	ldr	r3, [r7, #20]
 8007982:	40da      	lsrs	r2, r3
 8007984:	1e13      	subs	r3, r2, #0
 8007986:	d000      	beq.n	800798a <HAL_GPIO_Init+0x2d2>
 8007988:	e6a2      	b.n	80076d0 <HAL_GPIO_Init+0x18>
  }
}
 800798a:	46c0      	nop			@ (mov r8, r8)
 800798c:	46c0      	nop			@ (mov r8, r8)
 800798e:	46bd      	mov	sp, r7
 8007990:	b006      	add	sp, #24
 8007992:	bd80      	pop	{r7, pc}
 8007994:	40021000 	.word	0x40021000
 8007998:	40010000 	.word	0x40010000
 800799c:	50000400 	.word	0x50000400
 80079a0:	50000800 	.word	0x50000800
 80079a4:	50000c00 	.word	0x50000c00
 80079a8:	50001000 	.word	0x50001000
 80079ac:	50001c00 	.word	0x50001c00
 80079b0:	40010400 	.word	0x40010400

080079b4 <HAL_GPIO_DeInit>:
>>>>>>> main
  *                   This parameter can be one of GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
<<<<<<< HEAD
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b086      	sub	sp, #24
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
 80076f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80076fa:	2300      	movs	r3, #0
 80076fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80076fe:	2300      	movs	r3, #0
 8007700:	613b      	str	r3, [r7, #16]
  uint32_t tmp = 0x00U;
 8007702:	2300      	movs	r3, #0
 8007704:	60fb      	str	r3, [r7, #12]
=======
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b086      	sub	sp, #24
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
 80079bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80079be:	2300      	movs	r3, #0
 80079c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80079c2:	2300      	movs	r3, #0
 80079c4:	613b      	str	r3, [r7, #16]
  uint32_t tmp = 0x00U;
 80079c6:	2300      	movs	r3, #0
 80079c8:	60fb      	str	r3, [r7, #12]
>>>>>>> main

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0)
<<<<<<< HEAD
 8007706:	e0bc      	b.n	8007882 <HAL_GPIO_DeInit+0x192>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Pin) & (1U << position);
 8007708:	2201      	movs	r2, #1
 800770a:	697b      	ldr	r3, [r7, #20]
 800770c:	409a      	lsls	r2, r3
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	4013      	ands	r3, r2
 8007712:	613b      	str	r3, [r7, #16]

    if (iocurrent)
 8007714:	693b      	ldr	r3, [r7, #16]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d100      	bne.n	800771c <HAL_GPIO_DeInit+0x2c>
 800771a:	e0af      	b.n	800787c <HAL_GPIO_DeInit+0x18c>
=======
 80079ca:	e0bc      	b.n	8007b46 <HAL_GPIO_DeInit+0x192>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Pin) & (1U << position);
 80079cc:	2201      	movs	r2, #1
 80079ce:	697b      	ldr	r3, [r7, #20]
 80079d0:	409a      	lsls	r2, r3
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	4013      	ands	r3, r2
 80079d6:	613b      	str	r3, [r7, #16]

    if (iocurrent)
 80079d8:	693b      	ldr	r3, [r7, #16]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d100      	bne.n	80079e0 <HAL_GPIO_DeInit+0x2c>
 80079de:	e0af      	b.n	8007b40 <HAL_GPIO_DeInit+0x18c>
>>>>>>> main
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
<<<<<<< HEAD
 800771c:	4a5e      	ldr	r2, [pc, #376]	@ (8007898 <HAL_GPIO_DeInit+0x1a8>)
 800771e:	697b      	ldr	r3, [r7, #20]
 8007720:	089b      	lsrs	r3, r3, #2
 8007722:	3302      	adds	r3, #2
 8007724:	009b      	lsls	r3, r3, #2
 8007726:	589b      	ldr	r3, [r3, r2]
 8007728:	60fb      	str	r3, [r7, #12]
      tmp &= ((0x0FUL) << (4U * (position & 0x03U)));
 800772a:	697b      	ldr	r3, [r7, #20]
 800772c:	2203      	movs	r2, #3
 800772e:	4013      	ands	r3, r2
 8007730:	009b      	lsls	r3, r3, #2
 8007732:	220f      	movs	r2, #15
 8007734:	409a      	lsls	r2, r3
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	4013      	ands	r3, r2
 800773a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800773c:	687a      	ldr	r2, [r7, #4]
 800773e:	23a0      	movs	r3, #160	@ 0xa0
 8007740:	05db      	lsls	r3, r3, #23
 8007742:	429a      	cmp	r2, r3
 8007744:	d01f      	beq.n	8007786 <HAL_GPIO_DeInit+0x96>
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	4a54      	ldr	r2, [pc, #336]	@ (800789c <HAL_GPIO_DeInit+0x1ac>)
 800774a:	4293      	cmp	r3, r2
 800774c:	d019      	beq.n	8007782 <HAL_GPIO_DeInit+0x92>
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	4a53      	ldr	r2, [pc, #332]	@ (80078a0 <HAL_GPIO_DeInit+0x1b0>)
 8007752:	4293      	cmp	r3, r2
 8007754:	d013      	beq.n	800777e <HAL_GPIO_DeInit+0x8e>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	4a52      	ldr	r2, [pc, #328]	@ (80078a4 <HAL_GPIO_DeInit+0x1b4>)
 800775a:	4293      	cmp	r3, r2
 800775c:	d00d      	beq.n	800777a <HAL_GPIO_DeInit+0x8a>
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	4a51      	ldr	r2, [pc, #324]	@ (80078a8 <HAL_GPIO_DeInit+0x1b8>)
 8007762:	4293      	cmp	r3, r2
 8007764:	d007      	beq.n	8007776 <HAL_GPIO_DeInit+0x86>
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	4a50      	ldr	r2, [pc, #320]	@ (80078ac <HAL_GPIO_DeInit+0x1bc>)
 800776a:	4293      	cmp	r3, r2
 800776c:	d101      	bne.n	8007772 <HAL_GPIO_DeInit+0x82>
 800776e:	2305      	movs	r3, #5
 8007770:	e00a      	b.n	8007788 <HAL_GPIO_DeInit+0x98>
 8007772:	2306      	movs	r3, #6
 8007774:	e008      	b.n	8007788 <HAL_GPIO_DeInit+0x98>
 8007776:	2304      	movs	r3, #4
 8007778:	e006      	b.n	8007788 <HAL_GPIO_DeInit+0x98>
 800777a:	2303      	movs	r3, #3
 800777c:	e004      	b.n	8007788 <HAL_GPIO_DeInit+0x98>
 800777e:	2302      	movs	r3, #2
 8007780:	e002      	b.n	8007788 <HAL_GPIO_DeInit+0x98>
 8007782:	2301      	movs	r3, #1
 8007784:	e000      	b.n	8007788 <HAL_GPIO_DeInit+0x98>
 8007786:	2300      	movs	r3, #0
 8007788:	697a      	ldr	r2, [r7, #20]
 800778a:	2103      	movs	r1, #3
 800778c:	400a      	ands	r2, r1
 800778e:	0092      	lsls	r2, r2, #2
 8007790:	4093      	lsls	r3, r2
 8007792:	68fa      	ldr	r2, [r7, #12]
 8007794:	429a      	cmp	r2, r3
 8007796:	d132      	bne.n	80077fe <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8007798:	4b45      	ldr	r3, [pc, #276]	@ (80078b0 <HAL_GPIO_DeInit+0x1c0>)
 800779a:	681a      	ldr	r2, [r3, #0]
 800779c:	693b      	ldr	r3, [r7, #16]
 800779e:	43d9      	mvns	r1, r3
 80077a0:	4b43      	ldr	r3, [pc, #268]	@ (80078b0 <HAL_GPIO_DeInit+0x1c0>)
 80077a2:	400a      	ands	r2, r1
 80077a4:	601a      	str	r2, [r3, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80077a6:	4b42      	ldr	r3, [pc, #264]	@ (80078b0 <HAL_GPIO_DeInit+0x1c0>)
 80077a8:	685a      	ldr	r2, [r3, #4]
 80077aa:	693b      	ldr	r3, [r7, #16]
 80077ac:	43d9      	mvns	r1, r3
 80077ae:	4b40      	ldr	r3, [pc, #256]	@ (80078b0 <HAL_GPIO_DeInit+0x1c0>)
 80077b0:	400a      	ands	r2, r1
 80077b2:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80077b4:	4b3e      	ldr	r3, [pc, #248]	@ (80078b0 <HAL_GPIO_DeInit+0x1c0>)
 80077b6:	68da      	ldr	r2, [r3, #12]
 80077b8:	693b      	ldr	r3, [r7, #16]
 80077ba:	43d9      	mvns	r1, r3
 80077bc:	4b3c      	ldr	r3, [pc, #240]	@ (80078b0 <HAL_GPIO_DeInit+0x1c0>)
 80077be:	400a      	ands	r2, r1
 80077c0:	60da      	str	r2, [r3, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80077c2:	4b3b      	ldr	r3, [pc, #236]	@ (80078b0 <HAL_GPIO_DeInit+0x1c0>)
 80077c4:	689a      	ldr	r2, [r3, #8]
 80077c6:	693b      	ldr	r3, [r7, #16]
 80077c8:	43d9      	mvns	r1, r3
 80077ca:	4b39      	ldr	r3, [pc, #228]	@ (80078b0 <HAL_GPIO_DeInit+0x1c0>)
 80077cc:	400a      	ands	r2, r1
 80077ce:	609a      	str	r2, [r3, #8]

        tmp = (0x0FUL) << (4U * (position & 0x03U));
 80077d0:	697b      	ldr	r3, [r7, #20]
 80077d2:	2203      	movs	r2, #3
 80077d4:	4013      	ands	r3, r2
 80077d6:	009b      	lsls	r3, r3, #2
 80077d8:	220f      	movs	r2, #15
 80077da:	409a      	lsls	r2, r3
 80077dc:	0013      	movs	r3, r2
 80077de:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80077e0:	4a2d      	ldr	r2, [pc, #180]	@ (8007898 <HAL_GPIO_DeInit+0x1a8>)
 80077e2:	697b      	ldr	r3, [r7, #20]
 80077e4:	089b      	lsrs	r3, r3, #2
 80077e6:	3302      	adds	r3, #2
 80077e8:	009b      	lsls	r3, r3, #2
 80077ea:	589a      	ldr	r2, [r3, r2]
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	43d9      	mvns	r1, r3
 80077f0:	4829      	ldr	r0, [pc, #164]	@ (8007898 <HAL_GPIO_DeInit+0x1a8>)
 80077f2:	697b      	ldr	r3, [r7, #20]
 80077f4:	089b      	lsrs	r3, r3, #2
 80077f6:	400a      	ands	r2, r1
 80077f8:	3302      	adds	r3, #2
 80077fa:	009b      	lsls	r3, r3, #2
 80077fc:	501a      	str	r2, [r3, r0]
=======
 80079e0:	4a5e      	ldr	r2, [pc, #376]	@ (8007b5c <HAL_GPIO_DeInit+0x1a8>)
 80079e2:	697b      	ldr	r3, [r7, #20]
 80079e4:	089b      	lsrs	r3, r3, #2
 80079e6:	3302      	adds	r3, #2
 80079e8:	009b      	lsls	r3, r3, #2
 80079ea:	589b      	ldr	r3, [r3, r2]
 80079ec:	60fb      	str	r3, [r7, #12]
      tmp &= ((0x0FUL) << (4U * (position & 0x03U)));
 80079ee:	697b      	ldr	r3, [r7, #20]
 80079f0:	2203      	movs	r2, #3
 80079f2:	4013      	ands	r3, r2
 80079f4:	009b      	lsls	r3, r3, #2
 80079f6:	220f      	movs	r2, #15
 80079f8:	409a      	lsls	r2, r3
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	4013      	ands	r3, r2
 80079fe:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8007a00:	687a      	ldr	r2, [r7, #4]
 8007a02:	23a0      	movs	r3, #160	@ 0xa0
 8007a04:	05db      	lsls	r3, r3, #23
 8007a06:	429a      	cmp	r2, r3
 8007a08:	d01f      	beq.n	8007a4a <HAL_GPIO_DeInit+0x96>
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	4a54      	ldr	r2, [pc, #336]	@ (8007b60 <HAL_GPIO_DeInit+0x1ac>)
 8007a0e:	4293      	cmp	r3, r2
 8007a10:	d019      	beq.n	8007a46 <HAL_GPIO_DeInit+0x92>
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	4a53      	ldr	r2, [pc, #332]	@ (8007b64 <HAL_GPIO_DeInit+0x1b0>)
 8007a16:	4293      	cmp	r3, r2
 8007a18:	d013      	beq.n	8007a42 <HAL_GPIO_DeInit+0x8e>
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	4a52      	ldr	r2, [pc, #328]	@ (8007b68 <HAL_GPIO_DeInit+0x1b4>)
 8007a1e:	4293      	cmp	r3, r2
 8007a20:	d00d      	beq.n	8007a3e <HAL_GPIO_DeInit+0x8a>
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	4a51      	ldr	r2, [pc, #324]	@ (8007b6c <HAL_GPIO_DeInit+0x1b8>)
 8007a26:	4293      	cmp	r3, r2
 8007a28:	d007      	beq.n	8007a3a <HAL_GPIO_DeInit+0x86>
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	4a50      	ldr	r2, [pc, #320]	@ (8007b70 <HAL_GPIO_DeInit+0x1bc>)
 8007a2e:	4293      	cmp	r3, r2
 8007a30:	d101      	bne.n	8007a36 <HAL_GPIO_DeInit+0x82>
 8007a32:	2305      	movs	r3, #5
 8007a34:	e00a      	b.n	8007a4c <HAL_GPIO_DeInit+0x98>
 8007a36:	2306      	movs	r3, #6
 8007a38:	e008      	b.n	8007a4c <HAL_GPIO_DeInit+0x98>
 8007a3a:	2304      	movs	r3, #4
 8007a3c:	e006      	b.n	8007a4c <HAL_GPIO_DeInit+0x98>
 8007a3e:	2303      	movs	r3, #3
 8007a40:	e004      	b.n	8007a4c <HAL_GPIO_DeInit+0x98>
 8007a42:	2302      	movs	r3, #2
 8007a44:	e002      	b.n	8007a4c <HAL_GPIO_DeInit+0x98>
 8007a46:	2301      	movs	r3, #1
 8007a48:	e000      	b.n	8007a4c <HAL_GPIO_DeInit+0x98>
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	697a      	ldr	r2, [r7, #20]
 8007a4e:	2103      	movs	r1, #3
 8007a50:	400a      	ands	r2, r1
 8007a52:	0092      	lsls	r2, r2, #2
 8007a54:	4093      	lsls	r3, r2
 8007a56:	68fa      	ldr	r2, [r7, #12]
 8007a58:	429a      	cmp	r2, r3
 8007a5a:	d132      	bne.n	8007ac2 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8007a5c:	4b45      	ldr	r3, [pc, #276]	@ (8007b74 <HAL_GPIO_DeInit+0x1c0>)
 8007a5e:	681a      	ldr	r2, [r3, #0]
 8007a60:	693b      	ldr	r3, [r7, #16]
 8007a62:	43d9      	mvns	r1, r3
 8007a64:	4b43      	ldr	r3, [pc, #268]	@ (8007b74 <HAL_GPIO_DeInit+0x1c0>)
 8007a66:	400a      	ands	r2, r1
 8007a68:	601a      	str	r2, [r3, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8007a6a:	4b42      	ldr	r3, [pc, #264]	@ (8007b74 <HAL_GPIO_DeInit+0x1c0>)
 8007a6c:	685a      	ldr	r2, [r3, #4]
 8007a6e:	693b      	ldr	r3, [r7, #16]
 8007a70:	43d9      	mvns	r1, r3
 8007a72:	4b40      	ldr	r3, [pc, #256]	@ (8007b74 <HAL_GPIO_DeInit+0x1c0>)
 8007a74:	400a      	ands	r2, r1
 8007a76:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8007a78:	4b3e      	ldr	r3, [pc, #248]	@ (8007b74 <HAL_GPIO_DeInit+0x1c0>)
 8007a7a:	68da      	ldr	r2, [r3, #12]
 8007a7c:	693b      	ldr	r3, [r7, #16]
 8007a7e:	43d9      	mvns	r1, r3
 8007a80:	4b3c      	ldr	r3, [pc, #240]	@ (8007b74 <HAL_GPIO_DeInit+0x1c0>)
 8007a82:	400a      	ands	r2, r1
 8007a84:	60da      	str	r2, [r3, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8007a86:	4b3b      	ldr	r3, [pc, #236]	@ (8007b74 <HAL_GPIO_DeInit+0x1c0>)
 8007a88:	689a      	ldr	r2, [r3, #8]
 8007a8a:	693b      	ldr	r3, [r7, #16]
 8007a8c:	43d9      	mvns	r1, r3
 8007a8e:	4b39      	ldr	r3, [pc, #228]	@ (8007b74 <HAL_GPIO_DeInit+0x1c0>)
 8007a90:	400a      	ands	r2, r1
 8007a92:	609a      	str	r2, [r3, #8]

        tmp = (0x0FUL) << (4U * (position & 0x03U));
 8007a94:	697b      	ldr	r3, [r7, #20]
 8007a96:	2203      	movs	r2, #3
 8007a98:	4013      	ands	r3, r2
 8007a9a:	009b      	lsls	r3, r3, #2
 8007a9c:	220f      	movs	r2, #15
 8007a9e:	409a      	lsls	r2, r3
 8007aa0:	0013      	movs	r3, r2
 8007aa2:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8007aa4:	4a2d      	ldr	r2, [pc, #180]	@ (8007b5c <HAL_GPIO_DeInit+0x1a8>)
 8007aa6:	697b      	ldr	r3, [r7, #20]
 8007aa8:	089b      	lsrs	r3, r3, #2
 8007aaa:	3302      	adds	r3, #2
 8007aac:	009b      	lsls	r3, r3, #2
 8007aae:	589a      	ldr	r2, [r3, r2]
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	43d9      	mvns	r1, r3
 8007ab4:	4829      	ldr	r0, [pc, #164]	@ (8007b5c <HAL_GPIO_DeInit+0x1a8>)
 8007ab6:	697b      	ldr	r3, [r7, #20]
 8007ab8:	089b      	lsrs	r3, r3, #2
 8007aba:	400a      	ands	r2, r1
 8007abc:	3302      	adds	r3, #2
 8007abe:	009b      	lsls	r3, r3, #2
 8007ac0:	501a      	str	r2, [r3, r0]
>>>>>>> main
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Analog Mode (reset state) */
      GPIOx->MODER |= (GPIO_MODE_ANALOG << (position * 2U));
<<<<<<< HEAD
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681a      	ldr	r2, [r3, #0]
 8007802:	697b      	ldr	r3, [r7, #20]
 8007804:	005b      	lsls	r3, r3, #1
 8007806:	2103      	movs	r1, #3
 8007808:	4099      	lsls	r1, r3
 800780a:	000b      	movs	r3, r1
 800780c:	431a      	orrs	r2, r3
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8007812:	697b      	ldr	r3, [r7, #20]
 8007814:	08da      	lsrs	r2, r3, #3
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	3208      	adds	r2, #8
 800781a:	0092      	lsls	r2, r2, #2
 800781c:	58d3      	ldr	r3, [r2, r3]
 800781e:	697a      	ldr	r2, [r7, #20]
 8007820:	2107      	movs	r1, #7
 8007822:	400a      	ands	r2, r1
 8007824:	0092      	lsls	r2, r2, #2
 8007826:	210f      	movs	r1, #15
 8007828:	4091      	lsls	r1, r2
 800782a:	000a      	movs	r2, r1
 800782c:	43d1      	mvns	r1, r2
 800782e:	697a      	ldr	r2, [r7, #20]
 8007830:	08d2      	lsrs	r2, r2, #3
 8007832:	4019      	ands	r1, r3
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	3208      	adds	r2, #8
 8007838:	0092      	lsls	r2, r2, #2
 800783a:	50d1      	str	r1, [r2, r3]

      /* Deactivate the Pull-up oand Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	68db      	ldr	r3, [r3, #12]
 8007840:	697a      	ldr	r2, [r7, #20]
 8007842:	0052      	lsls	r2, r2, #1
 8007844:	2103      	movs	r1, #3
 8007846:	4091      	lsls	r1, r2
 8007848:	000a      	movs	r2, r1
 800784a:	43d2      	mvns	r2, r2
 800784c:	401a      	ands	r2, r3
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	685b      	ldr	r3, [r3, #4]
 8007856:	2101      	movs	r1, #1
 8007858:	697a      	ldr	r2, [r7, #20]
 800785a:	4091      	lsls	r1, r2
 800785c:	000a      	movs	r2, r1
 800785e:	43d2      	mvns	r2, r2
 8007860:	401a      	ands	r2, r3
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	689b      	ldr	r3, [r3, #8]
 800786a:	697a      	ldr	r2, [r7, #20]
 800786c:	0052      	lsls	r2, r2, #1
 800786e:	2103      	movs	r1, #3
 8007870:	4091      	lsls	r1, r2
 8007872:	000a      	movs	r2, r1
 8007874:	43d2      	mvns	r2, r2
 8007876:	401a      	ands	r2, r3
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	609a      	str	r2, [r3, #8]
    }
    position++;
 800787c:	697b      	ldr	r3, [r7, #20]
 800787e:	3301      	adds	r3, #1
 8007880:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0)
 8007882:	683a      	ldr	r2, [r7, #0]
 8007884:	697b      	ldr	r3, [r7, #20]
 8007886:	40da      	lsrs	r2, r3
 8007888:	1e13      	subs	r3, r2, #0
 800788a:	d000      	beq.n	800788e <HAL_GPIO_DeInit+0x19e>
 800788c:	e73c      	b.n	8007708 <HAL_GPIO_DeInit+0x18>
  }
}
 800788e:	46c0      	nop			@ (mov r8, r8)
 8007890:	46c0      	nop			@ (mov r8, r8)
 8007892:	46bd      	mov	sp, r7
 8007894:	b006      	add	sp, #24
 8007896:	bd80      	pop	{r7, pc}
 8007898:	40010000 	.word	0x40010000
 800789c:	50000400 	.word	0x50000400
 80078a0:	50000800 	.word	0x50000800
 80078a4:	50000c00 	.word	0x50000c00
 80078a8:	50001000 	.word	0x50001000
 80078ac:	50001c00 	.word	0x50001c00
 80078b0:	40010400 	.word	0x40010400

080078b4 <HAL_GPIO_WritePin>:
=======
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681a      	ldr	r2, [r3, #0]
 8007ac6:	697b      	ldr	r3, [r7, #20]
 8007ac8:	005b      	lsls	r3, r3, #1
 8007aca:	2103      	movs	r1, #3
 8007acc:	4099      	lsls	r1, r3
 8007ace:	000b      	movs	r3, r1
 8007ad0:	431a      	orrs	r2, r3
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8007ad6:	697b      	ldr	r3, [r7, #20]
 8007ad8:	08da      	lsrs	r2, r3, #3
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	3208      	adds	r2, #8
 8007ade:	0092      	lsls	r2, r2, #2
 8007ae0:	58d3      	ldr	r3, [r2, r3]
 8007ae2:	697a      	ldr	r2, [r7, #20]
 8007ae4:	2107      	movs	r1, #7
 8007ae6:	400a      	ands	r2, r1
 8007ae8:	0092      	lsls	r2, r2, #2
 8007aea:	210f      	movs	r1, #15
 8007aec:	4091      	lsls	r1, r2
 8007aee:	000a      	movs	r2, r1
 8007af0:	43d1      	mvns	r1, r2
 8007af2:	697a      	ldr	r2, [r7, #20]
 8007af4:	08d2      	lsrs	r2, r2, #3
 8007af6:	4019      	ands	r1, r3
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	3208      	adds	r2, #8
 8007afc:	0092      	lsls	r2, r2, #2
 8007afe:	50d1      	str	r1, [r2, r3]

      /* Deactivate the Pull-up oand Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	68db      	ldr	r3, [r3, #12]
 8007b04:	697a      	ldr	r2, [r7, #20]
 8007b06:	0052      	lsls	r2, r2, #1
 8007b08:	2103      	movs	r1, #3
 8007b0a:	4091      	lsls	r1, r2
 8007b0c:	000a      	movs	r2, r1
 8007b0e:	43d2      	mvns	r2, r2
 8007b10:	401a      	ands	r2, r3
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	685b      	ldr	r3, [r3, #4]
 8007b1a:	2101      	movs	r1, #1
 8007b1c:	697a      	ldr	r2, [r7, #20]
 8007b1e:	4091      	lsls	r1, r2
 8007b20:	000a      	movs	r2, r1
 8007b22:	43d2      	mvns	r2, r2
 8007b24:	401a      	ands	r2, r3
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	689b      	ldr	r3, [r3, #8]
 8007b2e:	697a      	ldr	r2, [r7, #20]
 8007b30:	0052      	lsls	r2, r2, #1
 8007b32:	2103      	movs	r1, #3
 8007b34:	4091      	lsls	r1, r2
 8007b36:	000a      	movs	r2, r1
 8007b38:	43d2      	mvns	r2, r2
 8007b3a:	401a      	ands	r2, r3
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	609a      	str	r2, [r3, #8]
    }
    position++;
 8007b40:	697b      	ldr	r3, [r7, #20]
 8007b42:	3301      	adds	r3, #1
 8007b44:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0)
 8007b46:	683a      	ldr	r2, [r7, #0]
 8007b48:	697b      	ldr	r3, [r7, #20]
 8007b4a:	40da      	lsrs	r2, r3
 8007b4c:	1e13      	subs	r3, r2, #0
 8007b4e:	d000      	beq.n	8007b52 <HAL_GPIO_DeInit+0x19e>
 8007b50:	e73c      	b.n	80079cc <HAL_GPIO_DeInit+0x18>
  }
}
 8007b52:	46c0      	nop			@ (mov r8, r8)
 8007b54:	46c0      	nop			@ (mov r8, r8)
 8007b56:	46bd      	mov	sp, r7
 8007b58:	b006      	add	sp, #24
 8007b5a:	bd80      	pop	{r7, pc}
 8007b5c:	40010000 	.word	0x40010000
 8007b60:	50000400 	.word	0x50000400
 8007b64:	50000800 	.word	0x50000800
 8007b68:	50000c00 	.word	0x50000c00
 8007b6c:	50001000 	.word	0x50001000
 8007b70:	50001c00 	.word	0x50001c00
 8007b74:	40010400 	.word	0x40010400

08007b78 <HAL_GPIO_WritePin>:
>>>>>>> main
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
<<<<<<< HEAD
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b082      	sub	sp, #8
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
 80078bc:	0008      	movs	r0, r1
 80078be:	0011      	movs	r1, r2
 80078c0:	1cbb      	adds	r3, r7, #2
 80078c2:	1c02      	adds	r2, r0, #0
 80078c4:	801a      	strh	r2, [r3, #0]
 80078c6:	1c7b      	adds	r3, r7, #1
 80078c8:	1c0a      	adds	r2, r1, #0
 80078ca:	701a      	strb	r2, [r3, #0]
=======
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b082      	sub	sp, #8
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
 8007b80:	0008      	movs	r0, r1
 8007b82:	0011      	movs	r1, r2
 8007b84:	1cbb      	adds	r3, r7, #2
 8007b86:	1c02      	adds	r2, r0, #0
 8007b88:	801a      	strh	r2, [r3, #0]
 8007b8a:	1c7b      	adds	r3, r7, #1
 8007b8c:	1c0a      	adds	r2, r1, #0
 8007b8e:	701a      	strb	r2, [r3, #0]
>>>>>>> main
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
<<<<<<< HEAD
 80078cc:	1c7b      	adds	r3, r7, #1
 80078ce:	781b      	ldrb	r3, [r3, #0]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d004      	beq.n	80078de <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80078d4:	1cbb      	adds	r3, r7, #2
 80078d6:	881a      	ldrh	r2, [r3, #0]
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	619a      	str	r2, [r3, #24]
=======
 8007b90:	1c7b      	adds	r3, r7, #1
 8007b92:	781b      	ldrb	r3, [r3, #0]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d004      	beq.n	8007ba2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007b98:	1cbb      	adds	r3, r7, #2
 8007b9a:	881a      	ldrh	r2, [r3, #0]
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	619a      	str	r2, [r3, #24]
>>>>>>> main
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
<<<<<<< HEAD
 80078dc:	e003      	b.n	80078e6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80078de:	1cbb      	adds	r3, r7, #2
 80078e0:	881a      	ldrh	r2, [r3, #0]
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80078e6:	46c0      	nop			@ (mov r8, r8)
 80078e8:	46bd      	mov	sp, r7
 80078ea:	b002      	add	sp, #8
 80078ec:	bd80      	pop	{r7, pc}
	...

080078f0 <HAL_I2C_Init>:
=======
 8007ba0:	e003      	b.n	8007baa <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8007ba2:	1cbb      	adds	r3, r7, #2
 8007ba4:	881a      	ldrh	r2, [r3, #0]
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8007baa:	46c0      	nop			@ (mov r8, r8)
 8007bac:	46bd      	mov	sp, r7
 8007bae:	b002      	add	sp, #8
 8007bb0:	bd80      	pop	{r7, pc}
	...

08007bb4 <HAL_I2C_Init>:
>>>>>>> main
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
<<<<<<< HEAD
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b082      	sub	sp, #8
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d101      	bne.n	8007902 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80078fe:	2301      	movs	r3, #1
 8007900:	e082      	b.n	8007a08 <HAL_I2C_Init+0x118>
=======
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b082      	sub	sp, #8
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d101      	bne.n	8007bc6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007bc2:	2301      	movs	r3, #1
 8007bc4:	e082      	b.n	8007ccc <HAL_I2C_Init+0x118>
>>>>>>> main
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
<<<<<<< HEAD
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2241      	movs	r2, #65	@ 0x41
 8007906:	5c9b      	ldrb	r3, [r3, r2]
 8007908:	b2db      	uxtb	r3, r3
 800790a:	2b00      	cmp	r3, #0
 800790c:	d107      	bne.n	800791e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2240      	movs	r2, #64	@ 0x40
 8007912:	2100      	movs	r1, #0
 8007914:	5499      	strb	r1, [r3, r2]
=======
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2241      	movs	r2, #65	@ 0x41
 8007bca:	5c9b      	ldrb	r3, [r3, r2]
 8007bcc:	b2db      	uxtb	r3, r3
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d107      	bne.n	8007be2 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	2240      	movs	r2, #64	@ 0x40
 8007bd6:	2100      	movs	r1, #0
 8007bd8:	5499      	strb	r1, [r3, r2]
>>>>>>> main

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
<<<<<<< HEAD
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	0018      	movs	r0, r3
 800791a:	f7fc f8b9 	bl	8003a90 <HAL_I2C_MspInit>
=======
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	0018      	movs	r0, r3
 8007bde:	f7fb ff7d 	bl	8003adc <HAL_I2C_MspInit>
>>>>>>> main
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
<<<<<<< HEAD
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2241      	movs	r2, #65	@ 0x41
 8007922:	2124      	movs	r1, #36	@ 0x24
 8007924:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	681a      	ldr	r2, [r3, #0]
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	2101      	movs	r1, #1
 8007932:	438a      	bics	r2, r1
 8007934:	601a      	str	r2, [r3, #0]
=======
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	2241      	movs	r2, #65	@ 0x41
 8007be6:	2124      	movs	r1, #36	@ 0x24
 8007be8:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	681a      	ldr	r2, [r3, #0]
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	2101      	movs	r1, #1
 8007bf6:	438a      	bics	r2, r1
 8007bf8:	601a      	str	r2, [r3, #0]
>>>>>>> main

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
<<<<<<< HEAD
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	685a      	ldr	r2, [r3, #4]
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	4934      	ldr	r1, [pc, #208]	@ (8007a10 <HAL_I2C_Init+0x120>)
 8007940:	400a      	ands	r2, r1
 8007942:	611a      	str	r2, [r3, #16]
=======
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	685a      	ldr	r2, [r3, #4]
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	4934      	ldr	r1, [pc, #208]	@ (8007cd4 <HAL_I2C_Init+0x120>)
 8007c04:	400a      	ands	r2, r1
 8007c06:	611a      	str	r2, [r3, #16]
>>>>>>> main

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
<<<<<<< HEAD
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	689a      	ldr	r2, [r3, #8]
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	4931      	ldr	r1, [pc, #196]	@ (8007a14 <HAL_I2C_Init+0x124>)
 8007950:	400a      	ands	r2, r1
 8007952:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	68db      	ldr	r3, [r3, #12]
 8007958:	2b01      	cmp	r3, #1
 800795a:	d108      	bne.n	800796e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	689a      	ldr	r2, [r3, #8]
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	2180      	movs	r1, #128	@ 0x80
 8007966:	0209      	lsls	r1, r1, #8
 8007968:	430a      	orrs	r2, r1
 800796a:	609a      	str	r2, [r3, #8]
 800796c:	e007      	b.n	800797e <HAL_I2C_Init+0x8e>
=======
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	689a      	ldr	r2, [r3, #8]
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	4931      	ldr	r1, [pc, #196]	@ (8007cd8 <HAL_I2C_Init+0x124>)
 8007c14:	400a      	ands	r2, r1
 8007c16:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	68db      	ldr	r3, [r3, #12]
 8007c1c:	2b01      	cmp	r3, #1
 8007c1e:	d108      	bne.n	8007c32 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	689a      	ldr	r2, [r3, #8]
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	2180      	movs	r1, #128	@ 0x80
 8007c2a:	0209      	lsls	r1, r1, #8
 8007c2c:	430a      	orrs	r2, r1
 8007c2e:	609a      	str	r2, [r3, #8]
 8007c30:	e007      	b.n	8007c42 <HAL_I2C_Init+0x8e>
>>>>>>> main
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
<<<<<<< HEAD
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	689a      	ldr	r2, [r3, #8]
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	2184      	movs	r1, #132	@ 0x84
 8007978:	0209      	lsls	r1, r1, #8
 800797a:	430a      	orrs	r2, r1
 800797c:	609a      	str	r2, [r3, #8]
=======
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	689a      	ldr	r2, [r3, #8]
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	2184      	movs	r1, #132	@ 0x84
 8007c3c:	0209      	lsls	r1, r1, #8
 8007c3e:	430a      	orrs	r2, r1
 8007c40:	609a      	str	r2, [r3, #8]
>>>>>>> main
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
<<<<<<< HEAD
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	68db      	ldr	r3, [r3, #12]
 8007982:	2b02      	cmp	r3, #2
 8007984:	d104      	bne.n	8007990 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	2280      	movs	r2, #128	@ 0x80
 800798c:	0112      	lsls	r2, r2, #4
 800798e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	685a      	ldr	r2, [r3, #4]
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	491f      	ldr	r1, [pc, #124]	@ (8007a18 <HAL_I2C_Init+0x128>)
 800799c:	430a      	orrs	r2, r1
 800799e:	605a      	str	r2, [r3, #4]
=======
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	68db      	ldr	r3, [r3, #12]
 8007c46:	2b02      	cmp	r3, #2
 8007c48:	d104      	bne.n	8007c54 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	2280      	movs	r2, #128	@ 0x80
 8007c50:	0112      	lsls	r2, r2, #4
 8007c52:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	685a      	ldr	r2, [r3, #4]
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	491f      	ldr	r1, [pc, #124]	@ (8007cdc <HAL_I2C_Init+0x128>)
 8007c60:	430a      	orrs	r2, r1
 8007c62:	605a      	str	r2, [r3, #4]
>>>>>>> main

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
<<<<<<< HEAD
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	68da      	ldr	r2, [r3, #12]
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	491a      	ldr	r1, [pc, #104]	@ (8007a14 <HAL_I2C_Init+0x124>)
 80079ac:	400a      	ands	r2, r1
 80079ae:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	691a      	ldr	r2, [r3, #16]
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	695b      	ldr	r3, [r3, #20]
 80079b8:	431a      	orrs	r2, r3
 80079ba:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	699b      	ldr	r3, [r3, #24]
 80079c0:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	430a      	orrs	r2, r1
 80079c8:	60da      	str	r2, [r3, #12]
=======
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	68da      	ldr	r2, [r3, #12]
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	491a      	ldr	r1, [pc, #104]	@ (8007cd8 <HAL_I2C_Init+0x124>)
 8007c70:	400a      	ands	r2, r1
 8007c72:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	691a      	ldr	r2, [r3, #16]
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	695b      	ldr	r3, [r3, #20]
 8007c7c:	431a      	orrs	r2, r3
 8007c7e:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	699b      	ldr	r3, [r3, #24]
 8007c84:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	430a      	orrs	r2, r1
 8007c8c:	60da      	str	r2, [r3, #12]
>>>>>>> main

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
<<<<<<< HEAD
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	69d9      	ldr	r1, [r3, #28]
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	6a1a      	ldr	r2, [r3, #32]
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	430a      	orrs	r2, r1
 80079d8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	681a      	ldr	r2, [r3, #0]
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	2101      	movs	r1, #1
 80079e6:	430a      	orrs	r2, r1
 80079e8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	2200      	movs	r2, #0
 80079ee:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2241      	movs	r2, #65	@ 0x41
 80079f4:	2120      	movs	r1, #32
 80079f6:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2200      	movs	r2, #0
 80079fc:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	2242      	movs	r2, #66	@ 0x42
 8007a02:	2100      	movs	r1, #0
 8007a04:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007a06:	2300      	movs	r3, #0
}
 8007a08:	0018      	movs	r0, r3
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	b002      	add	sp, #8
 8007a0e:	bd80      	pop	{r7, pc}
 8007a10:	f0ffffff 	.word	0xf0ffffff
 8007a14:	ffff7fff 	.word	0xffff7fff
 8007a18:	02008000 	.word	0x02008000

08007a1c <HAL_I2C_Master_Transmit_DMA>:
=======
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	69d9      	ldr	r1, [r3, #28]
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	6a1a      	ldr	r2, [r3, #32]
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	430a      	orrs	r2, r1
 8007c9c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	681a      	ldr	r2, [r3, #0]
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	2101      	movs	r1, #1
 8007caa:	430a      	orrs	r2, r1
 8007cac:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2241      	movs	r2, #65	@ 0x41
 8007cb8:	2120      	movs	r1, #32
 8007cba:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2242      	movs	r2, #66	@ 0x42
 8007cc6:	2100      	movs	r1, #0
 8007cc8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007cca:	2300      	movs	r3, #0
}
 8007ccc:	0018      	movs	r0, r3
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	b002      	add	sp, #8
 8007cd2:	bd80      	pop	{r7, pc}
 8007cd4:	f0ffffff 	.word	0xf0ffffff
 8007cd8:	ffff7fff 	.word	0xffff7fff
 8007cdc:	02008000 	.word	0x02008000

08007ce0 <HAL_I2C_Master_Transmit_DMA>:
>>>>>>> main
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
<<<<<<< HEAD
 8007a1c:	b5b0      	push	{r4, r5, r7, lr}
 8007a1e:	b088      	sub	sp, #32
 8007a20:	af02      	add	r7, sp, #8
 8007a22:	60f8      	str	r0, [r7, #12]
 8007a24:	0008      	movs	r0, r1
 8007a26:	607a      	str	r2, [r7, #4]
 8007a28:	0019      	movs	r1, r3
 8007a2a:	230a      	movs	r3, #10
 8007a2c:	18fb      	adds	r3, r7, r3
 8007a2e:	1c02      	adds	r2, r0, #0
 8007a30:	801a      	strh	r2, [r3, #0]
 8007a32:	2308      	movs	r3, #8
 8007a34:	18fb      	adds	r3, r7, r3
 8007a36:	1c0a      	adds	r2, r1, #0
 8007a38:	801a      	strh	r2, [r3, #0]
=======
 8007ce0:	b5b0      	push	{r4, r5, r7, lr}
 8007ce2:	b088      	sub	sp, #32
 8007ce4:	af02      	add	r7, sp, #8
 8007ce6:	60f8      	str	r0, [r7, #12]
 8007ce8:	0008      	movs	r0, r1
 8007cea:	607a      	str	r2, [r7, #4]
 8007cec:	0019      	movs	r1, r3
 8007cee:	230a      	movs	r3, #10
 8007cf0:	18fb      	adds	r3, r7, r3
 8007cf2:	1c02      	adds	r2, r0, #0
 8007cf4:	801a      	strh	r2, [r3, #0]
 8007cf6:	2308      	movs	r3, #8
 8007cf8:	18fb      	adds	r3, r7, r3
 8007cfa:	1c0a      	adds	r2, r1, #0
 8007cfc:	801a      	strh	r2, [r3, #0]
>>>>>>> main
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
<<<<<<< HEAD
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	2241      	movs	r2, #65	@ 0x41
 8007a3e:	5c9b      	ldrb	r3, [r3, r2]
 8007a40:	b2db      	uxtb	r3, r3
 8007a42:	2b20      	cmp	r3, #32
 8007a44:	d000      	beq.n	8007a48 <HAL_I2C_Master_Transmit_DMA+0x2c>
 8007a46:	e0dd      	b.n	8007c04 <HAL_I2C_Master_Transmit_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	699a      	ldr	r2, [r3, #24]
 8007a4e:	2380      	movs	r3, #128	@ 0x80
 8007a50:	021b      	lsls	r3, r3, #8
 8007a52:	401a      	ands	r2, r3
 8007a54:	2380      	movs	r3, #128	@ 0x80
 8007a56:	021b      	lsls	r3, r3, #8
 8007a58:	429a      	cmp	r2, r3
 8007a5a:	d101      	bne.n	8007a60 <HAL_I2C_Master_Transmit_DMA+0x44>
    {
      return HAL_BUSY;
 8007a5c:	2302      	movs	r3, #2
 8007a5e:	e0d2      	b.n	8007c06 <HAL_I2C_Master_Transmit_DMA+0x1ea>
=======
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	2241      	movs	r2, #65	@ 0x41
 8007d02:	5c9b      	ldrb	r3, [r3, r2]
 8007d04:	b2db      	uxtb	r3, r3
 8007d06:	2b20      	cmp	r3, #32
 8007d08:	d000      	beq.n	8007d0c <HAL_I2C_Master_Transmit_DMA+0x2c>
 8007d0a:	e0dd      	b.n	8007ec8 <HAL_I2C_Master_Transmit_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	699a      	ldr	r2, [r3, #24]
 8007d12:	2380      	movs	r3, #128	@ 0x80
 8007d14:	021b      	lsls	r3, r3, #8
 8007d16:	401a      	ands	r2, r3
 8007d18:	2380      	movs	r3, #128	@ 0x80
 8007d1a:	021b      	lsls	r3, r3, #8
 8007d1c:	429a      	cmp	r2, r3
 8007d1e:	d101      	bne.n	8007d24 <HAL_I2C_Master_Transmit_DMA+0x44>
    {
      return HAL_BUSY;
 8007d20:	2302      	movs	r3, #2
 8007d22:	e0d2      	b.n	8007eca <HAL_I2C_Master_Transmit_DMA+0x1ea>
>>>>>>> main
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
<<<<<<< HEAD
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	2240      	movs	r2, #64	@ 0x40
 8007a64:	5c9b      	ldrb	r3, [r3, r2]
 8007a66:	2b01      	cmp	r3, #1
 8007a68:	d101      	bne.n	8007a6e <HAL_I2C_Master_Transmit_DMA+0x52>
 8007a6a:	2302      	movs	r3, #2
 8007a6c:	e0cb      	b.n	8007c06 <HAL_I2C_Master_Transmit_DMA+0x1ea>
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	2240      	movs	r2, #64	@ 0x40
 8007a72:	2101      	movs	r1, #1
 8007a74:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	2241      	movs	r2, #65	@ 0x41
 8007a7a:	2121      	movs	r1, #33	@ 0x21
 8007a7c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	2242      	movs	r2, #66	@ 0x42
 8007a82:	2110      	movs	r1, #16
 8007a84:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	2200      	movs	r2, #0
 8007a8a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	687a      	ldr	r2, [r7, #4]
 8007a90:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	2208      	movs	r2, #8
 8007a96:	18ba      	adds	r2, r7, r2
 8007a98:	8812      	ldrh	r2, [r2, #0]
 8007a9a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	4a5c      	ldr	r2, [pc, #368]	@ (8007c10 <HAL_I2C_Master_Transmit_DMA+0x1f4>)
 8007aa0:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	4a5b      	ldr	r2, [pc, #364]	@ (8007c14 <HAL_I2C_Master_Transmit_DMA+0x1f8>)
 8007aa6:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007aac:	b29b      	uxth	r3, r3
 8007aae:	2bff      	cmp	r3, #255	@ 0xff
 8007ab0:	d906      	bls.n	8007ac0 <HAL_I2C_Master_Transmit_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	22ff      	movs	r2, #255	@ 0xff
 8007ab6:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8007ab8:	2380      	movs	r3, #128	@ 0x80
 8007aba:	045b      	lsls	r3, r3, #17
 8007abc:	617b      	str	r3, [r7, #20]
 8007abe:	e007      	b.n	8007ad0 <HAL_I2C_Master_Transmit_DMA+0xb4>
=======
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	2240      	movs	r2, #64	@ 0x40
 8007d28:	5c9b      	ldrb	r3, [r3, r2]
 8007d2a:	2b01      	cmp	r3, #1
 8007d2c:	d101      	bne.n	8007d32 <HAL_I2C_Master_Transmit_DMA+0x52>
 8007d2e:	2302      	movs	r3, #2
 8007d30:	e0cb      	b.n	8007eca <HAL_I2C_Master_Transmit_DMA+0x1ea>
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	2240      	movs	r2, #64	@ 0x40
 8007d36:	2101      	movs	r1, #1
 8007d38:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	2241      	movs	r2, #65	@ 0x41
 8007d3e:	2121      	movs	r1, #33	@ 0x21
 8007d40:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	2242      	movs	r2, #66	@ 0x42
 8007d46:	2110      	movs	r1, #16
 8007d48:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	687a      	ldr	r2, [r7, #4]
 8007d54:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	2208      	movs	r2, #8
 8007d5a:	18ba      	adds	r2, r7, r2
 8007d5c:	8812      	ldrh	r2, [r2, #0]
 8007d5e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	4a5c      	ldr	r2, [pc, #368]	@ (8007ed4 <HAL_I2C_Master_Transmit_DMA+0x1f4>)
 8007d64:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	4a5b      	ldr	r2, [pc, #364]	@ (8007ed8 <HAL_I2C_Master_Transmit_DMA+0x1f8>)
 8007d6a:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007d70:	b29b      	uxth	r3, r3
 8007d72:	2bff      	cmp	r3, #255	@ 0xff
 8007d74:	d906      	bls.n	8007d84 <HAL_I2C_Master_Transmit_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	22ff      	movs	r2, #255	@ 0xff
 8007d7a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8007d7c:	2380      	movs	r3, #128	@ 0x80
 8007d7e:	045b      	lsls	r3, r3, #17
 8007d80:	617b      	str	r3, [r7, #20]
 8007d82:	e007      	b.n	8007d94 <HAL_I2C_Master_Transmit_DMA+0xb4>
>>>>>>> main
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
<<<<<<< HEAD
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007ac4:	b29a      	uxth	r2, r3
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8007aca:	2380      	movs	r3, #128	@ 0x80
 8007acc:	049b      	lsls	r3, r3, #18
 8007ace:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d100      	bne.n	8007ada <HAL_I2C_Master_Transmit_DMA+0xbe>
 8007ad8:	e078      	b.n	8007bcc <HAL_I2C_Master_Transmit_DMA+0x1b0>
    {
      if (hi2c->hdmatx != NULL)
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d023      	beq.n	8007b2a <HAL_I2C_Master_Transmit_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ae6:	4a4c      	ldr	r2, [pc, #304]	@ (8007c18 <HAL_I2C_Master_Transmit_DMA+0x1fc>)
 8007ae8:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007aee:	4a4b      	ldr	r2, [pc, #300]	@ (8007c1c <HAL_I2C_Master_Transmit_DMA+0x200>)
 8007af0:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007af6:	2200      	movs	r2, #0
 8007af8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007afe:	2200      	movs	r2, #0
 8007b00:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8007b06:	6879      	ldr	r1, [r7, #4]
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	3328      	adds	r3, #40	@ 0x28
 8007b0e:	001a      	movs	r2, r3
                                         hi2c->XferSize);
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8007b14:	2513      	movs	r5, #19
 8007b16:	197c      	adds	r4, r7, r5
 8007b18:	f7ff fa96 	bl	8007048 <HAL_DMA_Start_IT>
 8007b1c:	0003      	movs	r3, r0
 8007b1e:	7023      	strb	r3, [r4, #0]
=======
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007d88:	b29a      	uxth	r2, r3
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8007d8e:	2380      	movs	r3, #128	@ 0x80
 8007d90:	049b      	lsls	r3, r3, #18
 8007d92:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d100      	bne.n	8007d9e <HAL_I2C_Master_Transmit_DMA+0xbe>
 8007d9c:	e078      	b.n	8007e90 <HAL_I2C_Master_Transmit_DMA+0x1b0>
    {
      if (hi2c->hdmatx != NULL)
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d023      	beq.n	8007dee <HAL_I2C_Master_Transmit_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007daa:	4a4c      	ldr	r2, [pc, #304]	@ (8007edc <HAL_I2C_Master_Transmit_DMA+0x1fc>)
 8007dac:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007db2:	4a4b      	ldr	r2, [pc, #300]	@ (8007ee0 <HAL_I2C_Master_Transmit_DMA+0x200>)
 8007db4:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dba:	2200      	movs	r2, #0
 8007dbc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8007dca:	6879      	ldr	r1, [r7, #4]
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	3328      	adds	r3, #40	@ 0x28
 8007dd2:	001a      	movs	r2, r3
                                         hi2c->XferSize);
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8007dd8:	2513      	movs	r5, #19
 8007dda:	197c      	adds	r4, r7, r5
 8007ddc:	f7ff fa96 	bl	800730c <HAL_DMA_Start_IT>
 8007de0:	0003      	movs	r3, r0
 8007de2:	7023      	strb	r3, [r4, #0]
>>>>>>> main
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
<<<<<<< HEAD
 8007b20:	197b      	adds	r3, r7, r5
 8007b22:	781b      	ldrb	r3, [r3, #0]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d13d      	bne.n	8007ba4 <HAL_I2C_Master_Transmit_DMA+0x188>
 8007b28:	e013      	b.n	8007b52 <HAL_I2C_Master_Transmit_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	2241      	movs	r2, #65	@ 0x41
 8007b2e:	2120      	movs	r1, #32
 8007b30:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	2242      	movs	r2, #66	@ 0x42
 8007b36:	2100      	movs	r1, #0
 8007b38:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b3e:	2280      	movs	r2, #128	@ 0x80
 8007b40:	431a      	orrs	r2, r3
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	2240      	movs	r2, #64	@ 0x40
 8007b4a:	2100      	movs	r1, #0
 8007b4c:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8007b4e:	2301      	movs	r3, #1
 8007b50:	e059      	b.n	8007c06 <HAL_I2C_Master_Transmit_DMA+0x1ea>
=======
 8007de4:	197b      	adds	r3, r7, r5
 8007de6:	781b      	ldrb	r3, [r3, #0]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d13d      	bne.n	8007e68 <HAL_I2C_Master_Transmit_DMA+0x188>
 8007dec:	e013      	b.n	8007e16 <HAL_I2C_Master_Transmit_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	2241      	movs	r2, #65	@ 0x41
 8007df2:	2120      	movs	r1, #32
 8007df4:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	2242      	movs	r2, #66	@ 0x42
 8007dfa:	2100      	movs	r1, #0
 8007dfc:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e02:	2280      	movs	r2, #128	@ 0x80
 8007e04:	431a      	orrs	r2, r3
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	2240      	movs	r2, #64	@ 0x40
 8007e0e:	2100      	movs	r1, #0
 8007e10:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8007e12:	2301      	movs	r3, #1
 8007e14:	e059      	b.n	8007eca <HAL_I2C_Master_Transmit_DMA+0x1ea>
>>>>>>> main
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
<<<<<<< HEAD
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b56:	b2da      	uxtb	r2, r3
 8007b58:	697c      	ldr	r4, [r7, #20]
 8007b5a:	230a      	movs	r3, #10
 8007b5c:	18fb      	adds	r3, r7, r3
 8007b5e:	8819      	ldrh	r1, [r3, #0]
 8007b60:	68f8      	ldr	r0, [r7, #12]
 8007b62:	4b2f      	ldr	r3, [pc, #188]	@ (8007c20 <HAL_I2C_Master_Transmit_DMA+0x204>)
 8007b64:	9300      	str	r3, [sp, #0]
 8007b66:	0023      	movs	r3, r4
 8007b68:	f001 fd0e 	bl	8009588 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b70:	b29a      	uxth	r2, r3
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b76:	1ad3      	subs	r3, r2, r3
 8007b78:	b29a      	uxth	r2, r3
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	2240      	movs	r2, #64	@ 0x40
 8007b82:	2100      	movs	r1, #0
 8007b84:	5499      	strb	r1, [r3, r2]
=======
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007e1a:	b2da      	uxtb	r2, r3
 8007e1c:	697c      	ldr	r4, [r7, #20]
 8007e1e:	230a      	movs	r3, #10
 8007e20:	18fb      	adds	r3, r7, r3
 8007e22:	8819      	ldrh	r1, [r3, #0]
 8007e24:	68f8      	ldr	r0, [r7, #12]
 8007e26:	4b2f      	ldr	r3, [pc, #188]	@ (8007ee4 <HAL_I2C_Master_Transmit_DMA+0x204>)
 8007e28:	9300      	str	r3, [sp, #0]
 8007e2a:	0023      	movs	r3, r4
 8007e2c:	f001 fd0e 	bl	800984c <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007e34:	b29a      	uxth	r2, r3
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007e3a:	1ad3      	subs	r3, r2, r3
 8007e3c:	b29a      	uxth	r2, r3
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	2240      	movs	r2, #64	@ 0x40
 8007e46:	2100      	movs	r1, #0
 8007e48:	5499      	strb	r1, [r3, r2]
>>>>>>> main

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
<<<<<<< HEAD
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	2110      	movs	r1, #16
 8007b8a:	0018      	movs	r0, r3
 8007b8c:	f001 fd36 	bl	80095fc <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	681a      	ldr	r2, [r3, #0]
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	2180      	movs	r1, #128	@ 0x80
 8007b9c:	01c9      	lsls	r1, r1, #7
 8007b9e:	430a      	orrs	r2, r1
 8007ba0:	601a      	str	r2, [r3, #0]
 8007ba2:	e02d      	b.n	8007c00 <HAL_I2C_Master_Transmit_DMA+0x1e4>
=======
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	2110      	movs	r1, #16
 8007e4e:	0018      	movs	r0, r3
 8007e50:	f001 fd36 	bl	80098c0 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	681a      	ldr	r2, [r3, #0]
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	2180      	movs	r1, #128	@ 0x80
 8007e60:	01c9      	lsls	r1, r1, #7
 8007e62:	430a      	orrs	r2, r1
 8007e64:	601a      	str	r2, [r3, #0]
 8007e66:	e02d      	b.n	8007ec4 <HAL_I2C_Master_Transmit_DMA+0x1e4>
>>>>>>> main
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
<<<<<<< HEAD
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	2241      	movs	r2, #65	@ 0x41
 8007ba8:	2120      	movs	r1, #32
 8007baa:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	2242      	movs	r2, #66	@ 0x42
 8007bb0:	2100      	movs	r1, #0
 8007bb2:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007bb8:	2210      	movs	r2, #16
 8007bba:	431a      	orrs	r2, r3
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	2240      	movs	r2, #64	@ 0x40
 8007bc4:	2100      	movs	r1, #0
 8007bc6:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8007bc8:	2301      	movs	r3, #1
 8007bca:	e01c      	b.n	8007c06 <HAL_I2C_Master_Transmit_DMA+0x1ea>
=======
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	2241      	movs	r2, #65	@ 0x41
 8007e6c:	2120      	movs	r1, #32
 8007e6e:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	2242      	movs	r2, #66	@ 0x42
 8007e74:	2100      	movs	r1, #0
 8007e76:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e7c:	2210      	movs	r2, #16
 8007e7e:	431a      	orrs	r2, r3
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	2240      	movs	r2, #64	@ 0x40
 8007e88:	2100      	movs	r1, #0
 8007e8a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8007e8c:	2301      	movs	r3, #1
 8007e8e:	e01c      	b.n	8007eca <HAL_I2C_Master_Transmit_DMA+0x1ea>
>>>>>>> main
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
<<<<<<< HEAD
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	4a15      	ldr	r2, [pc, #84]	@ (8007c24 <HAL_I2C_Master_Transmit_DMA+0x208>)
 8007bd0:	635a      	str	r2, [r3, #52]	@ 0x34
=======
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	4a15      	ldr	r2, [pc, #84]	@ (8007ee8 <HAL_I2C_Master_Transmit_DMA+0x208>)
 8007e94:	635a      	str	r2, [r3, #52]	@ 0x34
>>>>>>> main

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
<<<<<<< HEAD
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007bd6:	b2da      	uxtb	r2, r3
 8007bd8:	2380      	movs	r3, #128	@ 0x80
 8007bda:	049c      	lsls	r4, r3, #18
 8007bdc:	230a      	movs	r3, #10
 8007bde:	18fb      	adds	r3, r7, r3
 8007be0:	8819      	ldrh	r1, [r3, #0]
 8007be2:	68f8      	ldr	r0, [r7, #12]
 8007be4:	4b0e      	ldr	r3, [pc, #56]	@ (8007c20 <HAL_I2C_Master_Transmit_DMA+0x204>)
 8007be6:	9300      	str	r3, [sp, #0]
 8007be8:	0023      	movs	r3, r4
 8007bea:	f001 fccd 	bl	8009588 <I2C_TransferConfig>
=======
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007e9a:	b2da      	uxtb	r2, r3
 8007e9c:	2380      	movs	r3, #128	@ 0x80
 8007e9e:	049c      	lsls	r4, r3, #18
 8007ea0:	230a      	movs	r3, #10
 8007ea2:	18fb      	adds	r3, r7, r3
 8007ea4:	8819      	ldrh	r1, [r3, #0]
 8007ea6:	68f8      	ldr	r0, [r7, #12]
 8007ea8:	4b0e      	ldr	r3, [pc, #56]	@ (8007ee4 <HAL_I2C_Master_Transmit_DMA+0x204>)
 8007eaa:	9300      	str	r3, [sp, #0]
 8007eac:	0023      	movs	r3, r4
 8007eae:	f001 fccd 	bl	800984c <I2C_TransferConfig>
>>>>>>> main
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
<<<<<<< HEAD
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	2240      	movs	r2, #64	@ 0x40
 8007bf2:	2100      	movs	r1, #0
 8007bf4:	5499      	strb	r1, [r3, r2]
=======
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	2240      	movs	r2, #64	@ 0x40
 8007eb6:	2100      	movs	r1, #0
 8007eb8:	5499      	strb	r1, [r3, r2]
>>>>>>> main
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
<<<<<<< HEAD
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	2101      	movs	r1, #1
 8007bfa:	0018      	movs	r0, r3
 8007bfc:	f001 fcfe 	bl	80095fc <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8007c00:	2300      	movs	r3, #0
 8007c02:	e000      	b.n	8007c06 <HAL_I2C_Master_Transmit_DMA+0x1ea>
=======
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	2101      	movs	r1, #1
 8007ebe:	0018      	movs	r0, r3
 8007ec0:	f001 fcfe 	bl	80098c0 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	e000      	b.n	8007eca <HAL_I2C_Master_Transmit_DMA+0x1ea>
>>>>>>> main
  }
  else
  {
    return HAL_BUSY;
<<<<<<< HEAD
 8007c04:	2302      	movs	r3, #2
  }
}
 8007c06:	0018      	movs	r0, r3
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	b006      	add	sp, #24
 8007c0c:	bdb0      	pop	{r4, r5, r7, pc}
 8007c0e:	46c0      	nop			@ (mov r8, r8)
 8007c10:	ffff0000 	.word	0xffff0000
 8007c14:	08008421 	.word	0x08008421
 8007c18:	080093d9 	.word	0x080093d9
 8007c1c:	08009519 	.word	0x08009519
 8007c20:	80002000 	.word	0x80002000
 8007c24:	08007fcd 	.word	0x08007fcd

08007c28 <HAL_I2C_Master_Receive_DMA>:
=======
 8007ec8:	2302      	movs	r3, #2
  }
}
 8007eca:	0018      	movs	r0, r3
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	b006      	add	sp, #24
 8007ed0:	bdb0      	pop	{r4, r5, r7, pc}
 8007ed2:	46c0      	nop			@ (mov r8, r8)
 8007ed4:	ffff0000 	.word	0xffff0000
 8007ed8:	080086e5 	.word	0x080086e5
 8007edc:	0800969d 	.word	0x0800969d
 8007ee0:	080097dd 	.word	0x080097dd
 8007ee4:	80002000 	.word	0x80002000
 8007ee8:	08008291 	.word	0x08008291

08007eec <HAL_I2C_Master_Receive_DMA>:
>>>>>>> main
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
<<<<<<< HEAD
 8007c28:	b5b0      	push	{r4, r5, r7, lr}
 8007c2a:	b088      	sub	sp, #32
 8007c2c:	af02      	add	r7, sp, #8
 8007c2e:	60f8      	str	r0, [r7, #12]
 8007c30:	0008      	movs	r0, r1
 8007c32:	607a      	str	r2, [r7, #4]
 8007c34:	0019      	movs	r1, r3
 8007c36:	230a      	movs	r3, #10
 8007c38:	18fb      	adds	r3, r7, r3
 8007c3a:	1c02      	adds	r2, r0, #0
 8007c3c:	801a      	strh	r2, [r3, #0]
 8007c3e:	2308      	movs	r3, #8
 8007c40:	18fb      	adds	r3, r7, r3
 8007c42:	1c0a      	adds	r2, r1, #0
 8007c44:	801a      	strh	r2, [r3, #0]
=======
 8007eec:	b5b0      	push	{r4, r5, r7, lr}
 8007eee:	b088      	sub	sp, #32
 8007ef0:	af02      	add	r7, sp, #8
 8007ef2:	60f8      	str	r0, [r7, #12]
 8007ef4:	0008      	movs	r0, r1
 8007ef6:	607a      	str	r2, [r7, #4]
 8007ef8:	0019      	movs	r1, r3
 8007efa:	230a      	movs	r3, #10
 8007efc:	18fb      	adds	r3, r7, r3
 8007efe:	1c02      	adds	r2, r0, #0
 8007f00:	801a      	strh	r2, [r3, #0]
 8007f02:	2308      	movs	r3, #8
 8007f04:	18fb      	adds	r3, r7, r3
 8007f06:	1c0a      	adds	r2, r1, #0
 8007f08:	801a      	strh	r2, [r3, #0]
>>>>>>> main
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
<<<<<<< HEAD
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	2241      	movs	r2, #65	@ 0x41
 8007c4a:	5c9b      	ldrb	r3, [r3, r2]
 8007c4c:	b2db      	uxtb	r3, r3
 8007c4e:	2b20      	cmp	r3, #32
 8007c50:	d000      	beq.n	8007c54 <HAL_I2C_Master_Receive_DMA+0x2c>
 8007c52:	e0dd      	b.n	8007e10 <HAL_I2C_Master_Receive_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	699a      	ldr	r2, [r3, #24]
 8007c5a:	2380      	movs	r3, #128	@ 0x80
 8007c5c:	021b      	lsls	r3, r3, #8
 8007c5e:	401a      	ands	r2, r3
 8007c60:	2380      	movs	r3, #128	@ 0x80
 8007c62:	021b      	lsls	r3, r3, #8
 8007c64:	429a      	cmp	r2, r3
 8007c66:	d101      	bne.n	8007c6c <HAL_I2C_Master_Receive_DMA+0x44>
    {
      return HAL_BUSY;
 8007c68:	2302      	movs	r3, #2
 8007c6a:	e0d2      	b.n	8007e12 <HAL_I2C_Master_Receive_DMA+0x1ea>
=======
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	2241      	movs	r2, #65	@ 0x41
 8007f0e:	5c9b      	ldrb	r3, [r3, r2]
 8007f10:	b2db      	uxtb	r3, r3
 8007f12:	2b20      	cmp	r3, #32
 8007f14:	d000      	beq.n	8007f18 <HAL_I2C_Master_Receive_DMA+0x2c>
 8007f16:	e0dd      	b.n	80080d4 <HAL_I2C_Master_Receive_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	699a      	ldr	r2, [r3, #24]
 8007f1e:	2380      	movs	r3, #128	@ 0x80
 8007f20:	021b      	lsls	r3, r3, #8
 8007f22:	401a      	ands	r2, r3
 8007f24:	2380      	movs	r3, #128	@ 0x80
 8007f26:	021b      	lsls	r3, r3, #8
 8007f28:	429a      	cmp	r2, r3
 8007f2a:	d101      	bne.n	8007f30 <HAL_I2C_Master_Receive_DMA+0x44>
    {
      return HAL_BUSY;
 8007f2c:	2302      	movs	r3, #2
 8007f2e:	e0d2      	b.n	80080d6 <HAL_I2C_Master_Receive_DMA+0x1ea>
>>>>>>> main
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
<<<<<<< HEAD
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	2240      	movs	r2, #64	@ 0x40
 8007c70:	5c9b      	ldrb	r3, [r3, r2]
 8007c72:	2b01      	cmp	r3, #1
 8007c74:	d101      	bne.n	8007c7a <HAL_I2C_Master_Receive_DMA+0x52>
 8007c76:	2302      	movs	r3, #2
 8007c78:	e0cb      	b.n	8007e12 <HAL_I2C_Master_Receive_DMA+0x1ea>
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	2240      	movs	r2, #64	@ 0x40
 8007c7e:	2101      	movs	r1, #1
 8007c80:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	2241      	movs	r2, #65	@ 0x41
 8007c86:	2122      	movs	r1, #34	@ 0x22
 8007c88:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	2242      	movs	r2, #66	@ 0x42
 8007c8e:	2110      	movs	r1, #16
 8007c90:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	2200      	movs	r2, #0
 8007c96:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	687a      	ldr	r2, [r7, #4]
 8007c9c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	2208      	movs	r2, #8
 8007ca2:	18ba      	adds	r2, r7, r2
 8007ca4:	8812      	ldrh	r2, [r2, #0]
 8007ca6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	4a5c      	ldr	r2, [pc, #368]	@ (8007e1c <HAL_I2C_Master_Receive_DMA+0x1f4>)
 8007cac:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	4a5b      	ldr	r2, [pc, #364]	@ (8007e20 <HAL_I2C_Master_Receive_DMA+0x1f8>)
 8007cb2:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007cb8:	b29b      	uxth	r3, r3
 8007cba:	2bff      	cmp	r3, #255	@ 0xff
 8007cbc:	d906      	bls.n	8007ccc <HAL_I2C_Master_Receive_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	22ff      	movs	r2, #255	@ 0xff
 8007cc2:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8007cc4:	2380      	movs	r3, #128	@ 0x80
 8007cc6:	045b      	lsls	r3, r3, #17
 8007cc8:	617b      	str	r3, [r7, #20]
 8007cca:	e007      	b.n	8007cdc <HAL_I2C_Master_Receive_DMA+0xb4>
=======
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	2240      	movs	r2, #64	@ 0x40
 8007f34:	5c9b      	ldrb	r3, [r3, r2]
 8007f36:	2b01      	cmp	r3, #1
 8007f38:	d101      	bne.n	8007f3e <HAL_I2C_Master_Receive_DMA+0x52>
 8007f3a:	2302      	movs	r3, #2
 8007f3c:	e0cb      	b.n	80080d6 <HAL_I2C_Master_Receive_DMA+0x1ea>
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	2240      	movs	r2, #64	@ 0x40
 8007f42:	2101      	movs	r1, #1
 8007f44:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	2241      	movs	r2, #65	@ 0x41
 8007f4a:	2122      	movs	r1, #34	@ 0x22
 8007f4c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	2242      	movs	r2, #66	@ 0x42
 8007f52:	2110      	movs	r1, #16
 8007f54:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	2200      	movs	r2, #0
 8007f5a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	687a      	ldr	r2, [r7, #4]
 8007f60:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	2208      	movs	r2, #8
 8007f66:	18ba      	adds	r2, r7, r2
 8007f68:	8812      	ldrh	r2, [r2, #0]
 8007f6a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	4a5c      	ldr	r2, [pc, #368]	@ (80080e0 <HAL_I2C_Master_Receive_DMA+0x1f4>)
 8007f70:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	4a5b      	ldr	r2, [pc, #364]	@ (80080e4 <HAL_I2C_Master_Receive_DMA+0x1f8>)
 8007f76:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f7c:	b29b      	uxth	r3, r3
 8007f7e:	2bff      	cmp	r3, #255	@ 0xff
 8007f80:	d906      	bls.n	8007f90 <HAL_I2C_Master_Receive_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	22ff      	movs	r2, #255	@ 0xff
 8007f86:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8007f88:	2380      	movs	r3, #128	@ 0x80
 8007f8a:	045b      	lsls	r3, r3, #17
 8007f8c:	617b      	str	r3, [r7, #20]
 8007f8e:	e007      	b.n	8007fa0 <HAL_I2C_Master_Receive_DMA+0xb4>
>>>>>>> main
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
<<<<<<< HEAD
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007cd0:	b29a      	uxth	r2, r3
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8007cd6:	2380      	movs	r3, #128	@ 0x80
 8007cd8:	049b      	lsls	r3, r3, #18
 8007cda:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d100      	bne.n	8007ce6 <HAL_I2C_Master_Receive_DMA+0xbe>
 8007ce4:	e078      	b.n	8007dd8 <HAL_I2C_Master_Receive_DMA+0x1b0>
    {
      if (hi2c->hdmarx != NULL)
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d023      	beq.n	8007d36 <HAL_I2C_Master_Receive_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007cf2:	4a4c      	ldr	r2, [pc, #304]	@ (8007e24 <HAL_I2C_Master_Receive_DMA+0x1fc>)
 8007cf4:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007cfa:	4a4b      	ldr	r2, [pc, #300]	@ (8007e28 <HAL_I2C_Master_Receive_DMA+0x200>)
 8007cfc:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d02:	2200      	movs	r2, #0
 8007d04:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	3324      	adds	r3, #36	@ 0x24
 8007d18:	0019      	movs	r1, r3
 8007d1a:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8007d20:	2513      	movs	r5, #19
 8007d22:	197c      	adds	r4, r7, r5
 8007d24:	f7ff f990 	bl	8007048 <HAL_DMA_Start_IT>
 8007d28:	0003      	movs	r3, r0
 8007d2a:	7023      	strb	r3, [r4, #0]
=======
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f94:	b29a      	uxth	r2, r3
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8007f9a:	2380      	movs	r3, #128	@ 0x80
 8007f9c:	049b      	lsls	r3, r3, #18
 8007f9e:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d100      	bne.n	8007faa <HAL_I2C_Master_Receive_DMA+0xbe>
 8007fa8:	e078      	b.n	800809c <HAL_I2C_Master_Receive_DMA+0x1b0>
    {
      if (hi2c->hdmarx != NULL)
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d023      	beq.n	8007ffa <HAL_I2C_Master_Receive_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007fb6:	4a4c      	ldr	r2, [pc, #304]	@ (80080e8 <HAL_I2C_Master_Receive_DMA+0x1fc>)
 8007fb8:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007fbe:	4a4b      	ldr	r2, [pc, #300]	@ (80080ec <HAL_I2C_Master_Receive_DMA+0x200>)
 8007fc0:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007fce:	2200      	movs	r2, #0
 8007fd0:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	3324      	adds	r3, #36	@ 0x24
 8007fdc:	0019      	movs	r1, r3
 8007fde:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8007fe4:	2513      	movs	r5, #19
 8007fe6:	197c      	adds	r4, r7, r5
 8007fe8:	f7ff f990 	bl	800730c <HAL_DMA_Start_IT>
 8007fec:	0003      	movs	r3, r0
 8007fee:	7023      	strb	r3, [r4, #0]
>>>>>>> main
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
<<<<<<< HEAD
 8007d2c:	197b      	adds	r3, r7, r5
 8007d2e:	781b      	ldrb	r3, [r3, #0]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d13d      	bne.n	8007db0 <HAL_I2C_Master_Receive_DMA+0x188>
 8007d34:	e013      	b.n	8007d5e <HAL_I2C_Master_Receive_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	2241      	movs	r2, #65	@ 0x41
 8007d3a:	2120      	movs	r1, #32
 8007d3c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	2242      	movs	r2, #66	@ 0x42
 8007d42:	2100      	movs	r1, #0
 8007d44:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d4a:	2280      	movs	r2, #128	@ 0x80
 8007d4c:	431a      	orrs	r2, r3
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	2240      	movs	r2, #64	@ 0x40
 8007d56:	2100      	movs	r1, #0
 8007d58:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8007d5a:	2301      	movs	r3, #1
 8007d5c:	e059      	b.n	8007e12 <HAL_I2C_Master_Receive_DMA+0x1ea>
=======
 8007ff0:	197b      	adds	r3, r7, r5
 8007ff2:	781b      	ldrb	r3, [r3, #0]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d13d      	bne.n	8008074 <HAL_I2C_Master_Receive_DMA+0x188>
 8007ff8:	e013      	b.n	8008022 <HAL_I2C_Master_Receive_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	2241      	movs	r2, #65	@ 0x41
 8007ffe:	2120      	movs	r1, #32
 8008000:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	2242      	movs	r2, #66	@ 0x42
 8008006:	2100      	movs	r1, #0
 8008008:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800800e:	2280      	movs	r2, #128	@ 0x80
 8008010:	431a      	orrs	r2, r3
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	2240      	movs	r2, #64	@ 0x40
 800801a:	2100      	movs	r1, #0
 800801c:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800801e:	2301      	movs	r3, #1
 8008020:	e059      	b.n	80080d6 <HAL_I2C_Master_Receive_DMA+0x1ea>
>>>>>>> main
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
<<<<<<< HEAD
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007d62:	b2da      	uxtb	r2, r3
 8007d64:	697c      	ldr	r4, [r7, #20]
 8007d66:	230a      	movs	r3, #10
 8007d68:	18fb      	adds	r3, r7, r3
 8007d6a:	8819      	ldrh	r1, [r3, #0]
 8007d6c:	68f8      	ldr	r0, [r7, #12]
 8007d6e:	4b2f      	ldr	r3, [pc, #188]	@ (8007e2c <HAL_I2C_Master_Receive_DMA+0x204>)
 8007d70:	9300      	str	r3, [sp, #0]
 8007d72:	0023      	movs	r3, r4
 8007d74:	f001 fc08 	bl	8009588 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007d7c:	b29a      	uxth	r2, r3
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007d82:	1ad3      	subs	r3, r2, r3
 8007d84:	b29a      	uxth	r2, r3
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	2240      	movs	r2, #64	@ 0x40
 8007d8e:	2100      	movs	r1, #0
 8007d90:	5499      	strb	r1, [r3, r2]
=======
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008026:	b2da      	uxtb	r2, r3
 8008028:	697c      	ldr	r4, [r7, #20]
 800802a:	230a      	movs	r3, #10
 800802c:	18fb      	adds	r3, r7, r3
 800802e:	8819      	ldrh	r1, [r3, #0]
 8008030:	68f8      	ldr	r0, [r7, #12]
 8008032:	4b2f      	ldr	r3, [pc, #188]	@ (80080f0 <HAL_I2C_Master_Receive_DMA+0x204>)
 8008034:	9300      	str	r3, [sp, #0]
 8008036:	0023      	movs	r3, r4
 8008038:	f001 fc08 	bl	800984c <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008040:	b29a      	uxth	r2, r3
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008046:	1ad3      	subs	r3, r2, r3
 8008048:	b29a      	uxth	r2, r3
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	2240      	movs	r2, #64	@ 0x40
 8008052:	2100      	movs	r1, #0
 8008054:	5499      	strb	r1, [r3, r2]
>>>>>>> main

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
<<<<<<< HEAD
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	2110      	movs	r1, #16
 8007d96:	0018      	movs	r0, r3
 8007d98:	f001 fc30 	bl	80095fc <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	681a      	ldr	r2, [r3, #0]
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	2180      	movs	r1, #128	@ 0x80
 8007da8:	0209      	lsls	r1, r1, #8
 8007daa:	430a      	orrs	r2, r1
 8007dac:	601a      	str	r2, [r3, #0]
 8007dae:	e02d      	b.n	8007e0c <HAL_I2C_Master_Receive_DMA+0x1e4>
=======
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	2110      	movs	r1, #16
 800805a:	0018      	movs	r0, r3
 800805c:	f001 fc30 	bl	80098c0 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	681a      	ldr	r2, [r3, #0]
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	2180      	movs	r1, #128	@ 0x80
 800806c:	0209      	lsls	r1, r1, #8
 800806e:	430a      	orrs	r2, r1
 8008070:	601a      	str	r2, [r3, #0]
 8008072:	e02d      	b.n	80080d0 <HAL_I2C_Master_Receive_DMA+0x1e4>
>>>>>>> main
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
<<<<<<< HEAD
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	2241      	movs	r2, #65	@ 0x41
 8007db4:	2120      	movs	r1, #32
 8007db6:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	2242      	movs	r2, #66	@ 0x42
 8007dbc:	2100      	movs	r1, #0
 8007dbe:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007dc4:	2210      	movs	r2, #16
 8007dc6:	431a      	orrs	r2, r3
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	2240      	movs	r2, #64	@ 0x40
 8007dd0:	2100      	movs	r1, #0
 8007dd2:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8007dd4:	2301      	movs	r3, #1
 8007dd6:	e01c      	b.n	8007e12 <HAL_I2C_Master_Receive_DMA+0x1ea>
=======
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	2241      	movs	r2, #65	@ 0x41
 8008078:	2120      	movs	r1, #32
 800807a:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	2242      	movs	r2, #66	@ 0x42
 8008080:	2100      	movs	r1, #0
 8008082:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008088:	2210      	movs	r2, #16
 800808a:	431a      	orrs	r2, r3
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	2240      	movs	r2, #64	@ 0x40
 8008094:	2100      	movs	r1, #0
 8008096:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8008098:	2301      	movs	r3, #1
 800809a:	e01c      	b.n	80080d6 <HAL_I2C_Master_Receive_DMA+0x1ea>
>>>>>>> main
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
<<<<<<< HEAD
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	4a15      	ldr	r2, [pc, #84]	@ (8007e30 <HAL_I2C_Master_Receive_DMA+0x208>)
 8007ddc:	635a      	str	r2, [r3, #52]	@ 0x34
=======
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	4a15      	ldr	r2, [pc, #84]	@ (80080f4 <HAL_I2C_Master_Receive_DMA+0x208>)
 80080a0:	635a      	str	r2, [r3, #52]	@ 0x34
>>>>>>> main

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
<<<<<<< HEAD
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007de2:	b2da      	uxtb	r2, r3
 8007de4:	2380      	movs	r3, #128	@ 0x80
 8007de6:	049c      	lsls	r4, r3, #18
 8007de8:	230a      	movs	r3, #10
 8007dea:	18fb      	adds	r3, r7, r3
 8007dec:	8819      	ldrh	r1, [r3, #0]
 8007dee:	68f8      	ldr	r0, [r7, #12]
 8007df0:	4b0e      	ldr	r3, [pc, #56]	@ (8007e2c <HAL_I2C_Master_Receive_DMA+0x204>)
 8007df2:	9300      	str	r3, [sp, #0]
 8007df4:	0023      	movs	r3, r4
 8007df6:	f001 fbc7 	bl	8009588 <I2C_TransferConfig>
=======
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80080a6:	b2da      	uxtb	r2, r3
 80080a8:	2380      	movs	r3, #128	@ 0x80
 80080aa:	049c      	lsls	r4, r3, #18
 80080ac:	230a      	movs	r3, #10
 80080ae:	18fb      	adds	r3, r7, r3
 80080b0:	8819      	ldrh	r1, [r3, #0]
 80080b2:	68f8      	ldr	r0, [r7, #12]
 80080b4:	4b0e      	ldr	r3, [pc, #56]	@ (80080f0 <HAL_I2C_Master_Receive_DMA+0x204>)
 80080b6:	9300      	str	r3, [sp, #0]
 80080b8:	0023      	movs	r3, r4
 80080ba:	f001 fbc7 	bl	800984c <I2C_TransferConfig>
>>>>>>> main
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
<<<<<<< HEAD
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	2240      	movs	r2, #64	@ 0x40
 8007dfe:	2100      	movs	r1, #0
 8007e00:	5499      	strb	r1, [r3, r2]
=======
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	2240      	movs	r2, #64	@ 0x40
 80080c2:	2100      	movs	r1, #0
 80080c4:	5499      	strb	r1, [r3, r2]
>>>>>>> main
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
<<<<<<< HEAD
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	2101      	movs	r1, #1
 8007e06:	0018      	movs	r0, r3
 8007e08:	f001 fbf8 	bl	80095fc <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	e000      	b.n	8007e12 <HAL_I2C_Master_Receive_DMA+0x1ea>
=======
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	2101      	movs	r1, #1
 80080ca:	0018      	movs	r0, r3
 80080cc:	f001 fbf8 	bl	80098c0 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 80080d0:	2300      	movs	r3, #0
 80080d2:	e000      	b.n	80080d6 <HAL_I2C_Master_Receive_DMA+0x1ea>
>>>>>>> main
  }
  else
  {
    return HAL_BUSY;
<<<<<<< HEAD
 8007e10:	2302      	movs	r3, #2
  }
}
 8007e12:	0018      	movs	r0, r3
 8007e14:	46bd      	mov	sp, r7
 8007e16:	b006      	add	sp, #24
 8007e18:	bdb0      	pop	{r4, r5, r7, pc}
 8007e1a:	46c0      	nop			@ (mov r8, r8)
 8007e1c:	ffff0000 	.word	0xffff0000
 8007e20:	08008421 	.word	0x08008421
 8007e24:	08009479 	.word	0x08009479
 8007e28:	08009519 	.word	0x08009519
 8007e2c:	80002400 	.word	0x80002400
 8007e30:	08007fcd 	.word	0x08007fcd

08007e34 <HAL_I2C_EV_IRQHandler>:
=======
 80080d4:	2302      	movs	r3, #2
  }
}
 80080d6:	0018      	movs	r0, r3
 80080d8:	46bd      	mov	sp, r7
 80080da:	b006      	add	sp, #24
 80080dc:	bdb0      	pop	{r4, r5, r7, pc}
 80080de:	46c0      	nop			@ (mov r8, r8)
 80080e0:	ffff0000 	.word	0xffff0000
 80080e4:	080086e5 	.word	0x080086e5
 80080e8:	0800973d 	.word	0x0800973d
 80080ec:	080097dd 	.word	0x080097dd
 80080f0:	80002400 	.word	0x80002400
 80080f4:	08008291 	.word	0x08008291

080080f8 <HAL_I2C_EV_IRQHandler>:
>>>>>>> main
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
<<<<<<< HEAD
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b084      	sub	sp, #16
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	699b      	ldr	r3, [r3, #24]
 8007e42:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d005      	beq.n	8007e60 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e58:	68ba      	ldr	r2, [r7, #8]
 8007e5a:	68f9      	ldr	r1, [r7, #12]
 8007e5c:	6878      	ldr	r0, [r7, #4]
 8007e5e:	4798      	blx	r3
  }
}
 8007e60:	46c0      	nop			@ (mov r8, r8)
 8007e62:	46bd      	mov	sp, r7
 8007e64:	b004      	add	sp, #16
 8007e66:	bd80      	pop	{r7, pc}

08007e68 <HAL_I2C_ER_IRQHandler>:
=======
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b084      	sub	sp, #16
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	699b      	ldr	r3, [r3, #24]
 8008106:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008114:	2b00      	cmp	r3, #0
 8008116:	d005      	beq.n	8008124 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800811c:	68ba      	ldr	r2, [r7, #8]
 800811e:	68f9      	ldr	r1, [r7, #12]
 8008120:	6878      	ldr	r0, [r7, #4]
 8008122:	4798      	blx	r3
  }
}
 8008124:	46c0      	nop			@ (mov r8, r8)
 8008126:	46bd      	mov	sp, r7
 8008128:	b004      	add	sp, #16
 800812a:	bd80      	pop	{r7, pc}

0800812c <HAL_I2C_ER_IRQHandler>:
>>>>>>> main
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
<<<<<<< HEAD
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b086      	sub	sp, #24
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	699b      	ldr	r3, [r3, #24]
 8007e76:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	613b      	str	r3, [r7, #16]
=======
 800812c:	b580      	push	{r7, lr}
 800812e:	b086      	sub	sp, #24
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	699b      	ldr	r3, [r3, #24]
 800813a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	613b      	str	r3, [r7, #16]
>>>>>>> main
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
<<<<<<< HEAD
 8007e80:	697a      	ldr	r2, [r7, #20]
 8007e82:	2380      	movs	r3, #128	@ 0x80
 8007e84:	005b      	lsls	r3, r3, #1
 8007e86:	4013      	ands	r3, r2
 8007e88:	d00e      	beq.n	8007ea8 <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8007e8a:	693b      	ldr	r3, [r7, #16]
 8007e8c:	2280      	movs	r2, #128	@ 0x80
 8007e8e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8007e90:	d00a      	beq.n	8007ea8 <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e96:	2201      	movs	r2, #1
 8007e98:	431a      	orrs	r2, r3
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	2280      	movs	r2, #128	@ 0x80
 8007ea4:	0052      	lsls	r2, r2, #1
 8007ea6:	61da      	str	r2, [r3, #28]
=======
 8008144:	697a      	ldr	r2, [r7, #20]
 8008146:	2380      	movs	r3, #128	@ 0x80
 8008148:	005b      	lsls	r3, r3, #1
 800814a:	4013      	ands	r3, r2
 800814c:	d00e      	beq.n	800816c <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800814e:	693b      	ldr	r3, [r7, #16]
 8008150:	2280      	movs	r2, #128	@ 0x80
 8008152:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8008154:	d00a      	beq.n	800816c <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800815a:	2201      	movs	r2, #1
 800815c:	431a      	orrs	r2, r3
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	2280      	movs	r2, #128	@ 0x80
 8008168:	0052      	lsls	r2, r2, #1
 800816a:	61da      	str	r2, [r3, #28]
>>>>>>> main
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
<<<<<<< HEAD
 8007ea8:	697a      	ldr	r2, [r7, #20]
 8007eaa:	2380      	movs	r3, #128	@ 0x80
 8007eac:	00db      	lsls	r3, r3, #3
 8007eae:	4013      	ands	r3, r2
 8007eb0:	d00e      	beq.n	8007ed0 <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8007eb2:	693b      	ldr	r3, [r7, #16]
 8007eb4:	2280      	movs	r2, #128	@ 0x80
 8007eb6:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8007eb8:	d00a      	beq.n	8007ed0 <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ebe:	2208      	movs	r2, #8
 8007ec0:	431a      	orrs	r2, r3
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	2280      	movs	r2, #128	@ 0x80
 8007ecc:	00d2      	lsls	r2, r2, #3
 8007ece:	61da      	str	r2, [r3, #28]
=======
 800816c:	697a      	ldr	r2, [r7, #20]
 800816e:	2380      	movs	r3, #128	@ 0x80
 8008170:	00db      	lsls	r3, r3, #3
 8008172:	4013      	ands	r3, r2
 8008174:	d00e      	beq.n	8008194 <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8008176:	693b      	ldr	r3, [r7, #16]
 8008178:	2280      	movs	r2, #128	@ 0x80
 800817a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800817c:	d00a      	beq.n	8008194 <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008182:	2208      	movs	r2, #8
 8008184:	431a      	orrs	r2, r3
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	2280      	movs	r2, #128	@ 0x80
 8008190:	00d2      	lsls	r2, r2, #3
 8008192:	61da      	str	r2, [r3, #28]
>>>>>>> main
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
<<<<<<< HEAD
 8007ed0:	697a      	ldr	r2, [r7, #20]
 8007ed2:	2380      	movs	r3, #128	@ 0x80
 8007ed4:	009b      	lsls	r3, r3, #2
 8007ed6:	4013      	ands	r3, r2
 8007ed8:	d00e      	beq.n	8007ef8 <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8007eda:	693b      	ldr	r3, [r7, #16]
 8007edc:	2280      	movs	r2, #128	@ 0x80
 8007ede:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8007ee0:	d00a      	beq.n	8007ef8 <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ee6:	2202      	movs	r2, #2
 8007ee8:	431a      	orrs	r2, r3
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	2280      	movs	r2, #128	@ 0x80
 8007ef4:	0092      	lsls	r2, r2, #2
 8007ef6:	61da      	str	r2, [r3, #28]
=======
 8008194:	697a      	ldr	r2, [r7, #20]
 8008196:	2380      	movs	r3, #128	@ 0x80
 8008198:	009b      	lsls	r3, r3, #2
 800819a:	4013      	ands	r3, r2
 800819c:	d00e      	beq.n	80081bc <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800819e:	693b      	ldr	r3, [r7, #16]
 80081a0:	2280      	movs	r2, #128	@ 0x80
 80081a2:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80081a4:	d00a      	beq.n	80081bc <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80081aa:	2202      	movs	r2, #2
 80081ac:	431a      	orrs	r2, r3
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	2280      	movs	r2, #128	@ 0x80
 80081b8:	0092      	lsls	r2, r2, #2
 80081ba:	61da      	str	r2, [r3, #28]
>>>>>>> main
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
<<<<<<< HEAD
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007efc:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	220b      	movs	r2, #11
 8007f02:	4013      	ands	r3, r2
 8007f04:	d005      	beq.n	8007f12 <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 8007f06:	68fa      	ldr	r2, [r7, #12]
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	0011      	movs	r1, r2
 8007f0c:	0018      	movs	r0, r3
 8007f0e:	f001 f915 	bl	800913c <I2C_ITError>
  }
}
 8007f12:	46c0      	nop			@ (mov r8, r8)
 8007f14:	46bd      	mov	sp, r7
 8007f16:	b006      	add	sp, #24
 8007f18:	bd80      	pop	{r7, pc}

08007f1a <HAL_I2C_MasterTxCpltCallback>:
=======
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80081c0:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	220b      	movs	r2, #11
 80081c6:	4013      	ands	r3, r2
 80081c8:	d005      	beq.n	80081d6 <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 80081ca:	68fa      	ldr	r2, [r7, #12]
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	0011      	movs	r1, r2
 80081d0:	0018      	movs	r0, r3
 80081d2:	f001 f915 	bl	8009400 <I2C_ITError>
  }
}
 80081d6:	46c0      	nop			@ (mov r8, r8)
 80081d8:	46bd      	mov	sp, r7
 80081da:	b006      	add	sp, #24
 80081dc:	bd80      	pop	{r7, pc}

080081de <HAL_I2C_MasterTxCpltCallback>:
>>>>>>> main
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
<<<<<<< HEAD
 8007f1a:	b580      	push	{r7, lr}
 8007f1c:	b082      	sub	sp, #8
 8007f1e:	af00      	add	r7, sp, #0
 8007f20:	6078      	str	r0, [r7, #4]
=======
 80081de:	b580      	push	{r7, lr}
 80081e0:	b082      	sub	sp, #8
 80081e2:	af00      	add	r7, sp, #0
 80081e4:	6078      	str	r0, [r7, #4]
>>>>>>> main
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8007f22:	46c0      	nop			@ (mov r8, r8)
 8007f24:	46bd      	mov	sp, r7
 8007f26:	b002      	add	sp, #8
 8007f28:	bd80      	pop	{r7, pc}

08007f2a <HAL_I2C_MasterRxCpltCallback>:
=======
 80081e6:	46c0      	nop			@ (mov r8, r8)
 80081e8:	46bd      	mov	sp, r7
 80081ea:	b002      	add	sp, #8
 80081ec:	bd80      	pop	{r7, pc}

080081ee <HAL_I2C_MasterRxCpltCallback>:
>>>>>>> main
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
<<<<<<< HEAD
 8007f2a:	b580      	push	{r7, lr}
 8007f2c:	b082      	sub	sp, #8
 8007f2e:	af00      	add	r7, sp, #0
 8007f30:	6078      	str	r0, [r7, #4]
=======
 80081ee:	b580      	push	{r7, lr}
 80081f0:	b082      	sub	sp, #8
 80081f2:	af00      	add	r7, sp, #0
 80081f4:	6078      	str	r0, [r7, #4]
>>>>>>> main
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8007f32:	46c0      	nop			@ (mov r8, r8)
 8007f34:	46bd      	mov	sp, r7
 8007f36:	b002      	add	sp, #8
 8007f38:	bd80      	pop	{r7, pc}

08007f3a <HAL_I2C_SlaveTxCpltCallback>:
=======
 80081f6:	46c0      	nop			@ (mov r8, r8)
 80081f8:	46bd      	mov	sp, r7
 80081fa:	b002      	add	sp, #8
 80081fc:	bd80      	pop	{r7, pc}

080081fe <HAL_I2C_SlaveTxCpltCallback>:
>>>>>>> main
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
<<<<<<< HEAD
 8007f3a:	b580      	push	{r7, lr}
 8007f3c:	b082      	sub	sp, #8
 8007f3e:	af00      	add	r7, sp, #0
 8007f40:	6078      	str	r0, [r7, #4]
=======
 80081fe:	b580      	push	{r7, lr}
 8008200:	b082      	sub	sp, #8
 8008202:	af00      	add	r7, sp, #0
 8008204:	6078      	str	r0, [r7, #4]
>>>>>>> main
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8007f42:	46c0      	nop			@ (mov r8, r8)
 8007f44:	46bd      	mov	sp, r7
 8007f46:	b002      	add	sp, #8
 8007f48:	bd80      	pop	{r7, pc}

08007f4a <HAL_I2C_SlaveRxCpltCallback>:
=======
 8008206:	46c0      	nop			@ (mov r8, r8)
 8008208:	46bd      	mov	sp, r7
 800820a:	b002      	add	sp, #8
 800820c:	bd80      	pop	{r7, pc}

0800820e <HAL_I2C_SlaveRxCpltCallback>:
>>>>>>> main
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
<<<<<<< HEAD
 8007f4a:	b580      	push	{r7, lr}
 8007f4c:	b082      	sub	sp, #8
 8007f4e:	af00      	add	r7, sp, #0
 8007f50:	6078      	str	r0, [r7, #4]
=======
 800820e:	b580      	push	{r7, lr}
 8008210:	b082      	sub	sp, #8
 8008212:	af00      	add	r7, sp, #0
 8008214:	6078      	str	r0, [r7, #4]
>>>>>>> main
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8007f52:	46c0      	nop			@ (mov r8, r8)
 8007f54:	46bd      	mov	sp, r7
 8007f56:	b002      	add	sp, #8
 8007f58:	bd80      	pop	{r7, pc}

08007f5a <HAL_I2C_AddrCallback>:
=======
 8008216:	46c0      	nop			@ (mov r8, r8)
 8008218:	46bd      	mov	sp, r7
 800821a:	b002      	add	sp, #8
 800821c:	bd80      	pop	{r7, pc}

0800821e <HAL_I2C_AddrCallback>:
>>>>>>> main
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
<<<<<<< HEAD
 8007f5a:	b580      	push	{r7, lr}
 8007f5c:	b082      	sub	sp, #8
 8007f5e:	af00      	add	r7, sp, #0
 8007f60:	6078      	str	r0, [r7, #4]
 8007f62:	0008      	movs	r0, r1
 8007f64:	0011      	movs	r1, r2
 8007f66:	1cfb      	adds	r3, r7, #3
 8007f68:	1c02      	adds	r2, r0, #0
 8007f6a:	701a      	strb	r2, [r3, #0]
 8007f6c:	003b      	movs	r3, r7
 8007f6e:	1c0a      	adds	r2, r1, #0
 8007f70:	801a      	strh	r2, [r3, #0]
=======
 800821e:	b580      	push	{r7, lr}
 8008220:	b082      	sub	sp, #8
 8008222:	af00      	add	r7, sp, #0
 8008224:	6078      	str	r0, [r7, #4]
 8008226:	0008      	movs	r0, r1
 8008228:	0011      	movs	r1, r2
 800822a:	1cfb      	adds	r3, r7, #3
 800822c:	1c02      	adds	r2, r0, #0
 800822e:	701a      	strb	r2, [r3, #0]
 8008230:	003b      	movs	r3, r7
 8008232:	1c0a      	adds	r2, r1, #0
 8008234:	801a      	strh	r2, [r3, #0]
>>>>>>> main
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
<<<<<<< HEAD
 8007f72:	46c0      	nop			@ (mov r8, r8)
 8007f74:	46bd      	mov	sp, r7
 8007f76:	b002      	add	sp, #8
 8007f78:	bd80      	pop	{r7, pc}

08007f7a <HAL_I2C_ListenCpltCallback>:
=======
 8008236:	46c0      	nop			@ (mov r8, r8)
 8008238:	46bd      	mov	sp, r7
 800823a:	b002      	add	sp, #8
 800823c:	bd80      	pop	{r7, pc}

0800823e <HAL_I2C_ListenCpltCallback>:
>>>>>>> main
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
<<<<<<< HEAD
 8007f7a:	b580      	push	{r7, lr}
 8007f7c:	b082      	sub	sp, #8
 8007f7e:	af00      	add	r7, sp, #0
 8007f80:	6078      	str	r0, [r7, #4]
=======
 800823e:	b580      	push	{r7, lr}
 8008240:	b082      	sub	sp, #8
 8008242:	af00      	add	r7, sp, #0
 8008244:	6078      	str	r0, [r7, #4]
>>>>>>> main
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
<<<<<<< HEAD
 8007f82:	46c0      	nop			@ (mov r8, r8)
 8007f84:	46bd      	mov	sp, r7
 8007f86:	b002      	add	sp, #8
 8007f88:	bd80      	pop	{r7, pc}

08007f8a <HAL_I2C_MemTxCpltCallback>:
=======
 8008246:	46c0      	nop			@ (mov r8, r8)
 8008248:	46bd      	mov	sp, r7
 800824a:	b002      	add	sp, #8
 800824c:	bd80      	pop	{r7, pc}

0800824e <HAL_I2C_MemTxCpltCallback>:
>>>>>>> main
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
<<<<<<< HEAD
 8007f8a:	b580      	push	{r7, lr}
 8007f8c:	b082      	sub	sp, #8
 8007f8e:	af00      	add	r7, sp, #0
 8007f90:	6078      	str	r0, [r7, #4]
=======
 800824e:	b580      	push	{r7, lr}
 8008250:	b082      	sub	sp, #8
 8008252:	af00      	add	r7, sp, #0
 8008254:	6078      	str	r0, [r7, #4]
>>>>>>> main
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8007f92:	46c0      	nop			@ (mov r8, r8)
 8007f94:	46bd      	mov	sp, r7
 8007f96:	b002      	add	sp, #8
 8007f98:	bd80      	pop	{r7, pc}

08007f9a <HAL_I2C_MemRxCpltCallback>:
=======
 8008256:	46c0      	nop			@ (mov r8, r8)
 8008258:	46bd      	mov	sp, r7
 800825a:	b002      	add	sp, #8
 800825c:	bd80      	pop	{r7, pc}

0800825e <HAL_I2C_MemRxCpltCallback>:
>>>>>>> main
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
<<<<<<< HEAD
 8007f9a:	b580      	push	{r7, lr}
 8007f9c:	b082      	sub	sp, #8
 8007f9e:	af00      	add	r7, sp, #0
 8007fa0:	6078      	str	r0, [r7, #4]
=======
 800825e:	b580      	push	{r7, lr}
 8008260:	b082      	sub	sp, #8
 8008262:	af00      	add	r7, sp, #0
 8008264:	6078      	str	r0, [r7, #4]
>>>>>>> main
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8007fa2:	46c0      	nop			@ (mov r8, r8)
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	b002      	add	sp, #8
 8007fa8:	bd80      	pop	{r7, pc}

08007faa <HAL_I2C_ErrorCallback>:
=======
 8008266:	46c0      	nop			@ (mov r8, r8)
 8008268:	46bd      	mov	sp, r7
 800826a:	b002      	add	sp, #8
 800826c:	bd80      	pop	{r7, pc}

0800826e <HAL_I2C_ErrorCallback>:
>>>>>>> main
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
<<<<<<< HEAD
 8007faa:	b580      	push	{r7, lr}
 8007fac:	b082      	sub	sp, #8
 8007fae:	af00      	add	r7, sp, #0
 8007fb0:	6078      	str	r0, [r7, #4]
=======
 800826e:	b580      	push	{r7, lr}
 8008270:	b082      	sub	sp, #8
 8008272:	af00      	add	r7, sp, #0
 8008274:	6078      	str	r0, [r7, #4]
>>>>>>> main
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8007fb2:	46c0      	nop			@ (mov r8, r8)
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	b002      	add	sp, #8
 8007fb8:	bd80      	pop	{r7, pc}

08007fba <HAL_I2C_AbortCpltCallback>:
=======
 8008276:	46c0      	nop			@ (mov r8, r8)
 8008278:	46bd      	mov	sp, r7
 800827a:	b002      	add	sp, #8
 800827c:	bd80      	pop	{r7, pc}

0800827e <HAL_I2C_AbortCpltCallback>:
>>>>>>> main
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
<<<<<<< HEAD
 8007fba:	b580      	push	{r7, lr}
 8007fbc:	b082      	sub	sp, #8
 8007fbe:	af00      	add	r7, sp, #0
 8007fc0:	6078      	str	r0, [r7, #4]
=======
 800827e:	b580      	push	{r7, lr}
 8008280:	b082      	sub	sp, #8
 8008282:	af00      	add	r7, sp, #0
 8008284:	6078      	str	r0, [r7, #4]
>>>>>>> main
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8007fc2:	46c0      	nop			@ (mov r8, r8)
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	b002      	add	sp, #8
 8007fc8:	bd80      	pop	{r7, pc}
	...

08007fcc <I2C_Master_ISR_IT>:
=======
 8008286:	46c0      	nop			@ (mov r8, r8)
 8008288:	46bd      	mov	sp, r7
 800828a:	b002      	add	sp, #8
 800828c:	bd80      	pop	{r7, pc}
	...

08008290 <I2C_Master_ISR_IT>:
>>>>>>> main
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
<<<<<<< HEAD
 8007fcc:	b590      	push	{r4, r7, lr}
 8007fce:	b089      	sub	sp, #36	@ 0x24
 8007fd0:	af02      	add	r7, sp, #8
 8007fd2:	60f8      	str	r0, [r7, #12]
 8007fd4:	60b9      	str	r1, [r7, #8]
 8007fd6:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8007fd8:	68bb      	ldr	r3, [r7, #8]
 8007fda:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	2240      	movs	r2, #64	@ 0x40
 8007fe0:	5c9b      	ldrb	r3, [r3, r2]
 8007fe2:	2b01      	cmp	r3, #1
 8007fe4:	d101      	bne.n	8007fea <I2C_Master_ISR_IT+0x1e>
 8007fe6:	2302      	movs	r3, #2
 8007fe8:	e113      	b.n	8008212 <I2C_Master_ISR_IT+0x246>
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	2240      	movs	r2, #64	@ 0x40
 8007fee:	2101      	movs	r1, #1
 8007ff0:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007ff2:	697b      	ldr	r3, [r7, #20]
 8007ff4:	2210      	movs	r2, #16
 8007ff6:	4013      	ands	r3, r2
 8007ff8:	d012      	beq.n	8008020 <I2C_Master_ISR_IT+0x54>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	2210      	movs	r2, #16
 8007ffe:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8008000:	d00e      	beq.n	8008020 <I2C_Master_ISR_IT+0x54>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	2210      	movs	r2, #16
 8008008:	61da      	str	r2, [r3, #28]
=======
 8008290:	b590      	push	{r4, r7, lr}
 8008292:	b089      	sub	sp, #36	@ 0x24
 8008294:	af02      	add	r7, sp, #8
 8008296:	60f8      	str	r0, [r7, #12]
 8008298:	60b9      	str	r1, [r7, #8]
 800829a:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 800829c:	68bb      	ldr	r3, [r7, #8]
 800829e:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	2240      	movs	r2, #64	@ 0x40
 80082a4:	5c9b      	ldrb	r3, [r3, r2]
 80082a6:	2b01      	cmp	r3, #1
 80082a8:	d101      	bne.n	80082ae <I2C_Master_ISR_IT+0x1e>
 80082aa:	2302      	movs	r3, #2
 80082ac:	e113      	b.n	80084d6 <I2C_Master_ISR_IT+0x246>
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	2240      	movs	r2, #64	@ 0x40
 80082b2:	2101      	movs	r1, #1
 80082b4:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80082b6:	697b      	ldr	r3, [r7, #20]
 80082b8:	2210      	movs	r2, #16
 80082ba:	4013      	ands	r3, r2
 80082bc:	d012      	beq.n	80082e4 <I2C_Master_ISR_IT+0x54>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	2210      	movs	r2, #16
 80082c2:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80082c4:	d00e      	beq.n	80082e4 <I2C_Master_ISR_IT+0x54>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	2210      	movs	r2, #16
 80082cc:	61da      	str	r2, [r3, #28]
>>>>>>> main

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
<<<<<<< HEAD
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800800e:	2204      	movs	r2, #4
 8008010:	431a      	orrs	r2, r3
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	0018      	movs	r0, r3
 800801a:	f001 f9ba 	bl	8009392 <I2C_Flush_TXDR>
 800801e:	e0e5      	b.n	80081ec <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8008020:	697b      	ldr	r3, [r7, #20]
 8008022:	2204      	movs	r2, #4
 8008024:	4013      	ands	r3, r2
 8008026:	d021      	beq.n	800806c <I2C_Master_ISR_IT+0xa0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2204      	movs	r2, #4
 800802c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800802e:	d01d      	beq.n	800806c <I2C_Master_ISR_IT+0xa0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8008030:	697b      	ldr	r3, [r7, #20]
 8008032:	2204      	movs	r2, #4
 8008034:	4393      	bics	r3, r2
 8008036:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008042:	b2d2      	uxtb	r2, r2
 8008044:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800804a:	1c5a      	adds	r2, r3, #1
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008054:	3b01      	subs	r3, #1
 8008056:	b29a      	uxth	r2, r3
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008060:	b29b      	uxth	r3, r3
 8008062:	3b01      	subs	r3, #1
 8008064:	b29a      	uxth	r2, r3
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800806a:	e0bf      	b.n	80081ec <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800806c:	697b      	ldr	r3, [r7, #20]
 800806e:	2202      	movs	r2, #2
 8008070:	4013      	ands	r3, r2
 8008072:	d01c      	beq.n	80080ae <I2C_Master_ISR_IT+0xe2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2202      	movs	r2, #2
 8008078:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800807a:	d018      	beq.n	80080ae <I2C_Master_ISR_IT+0xe2>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008080:	781a      	ldrb	r2, [r3, #0]
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800808c:	1c5a      	adds	r2, r3, #1
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008096:	3b01      	subs	r3, #1
 8008098:	b29a      	uxth	r2, r3
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80080a2:	b29b      	uxth	r3, r3
 80080a4:	3b01      	subs	r3, #1
 80080a6:	b29a      	uxth	r2, r3
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80080ac:	e09e      	b.n	80081ec <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80080ae:	697b      	ldr	r3, [r7, #20]
 80080b0:	2280      	movs	r2, #128	@ 0x80
 80080b2:	4013      	ands	r3, r2
 80080b4:	d100      	bne.n	80080b8 <I2C_Master_ISR_IT+0xec>
 80080b6:	e069      	b.n	800818c <I2C_Master_ISR_IT+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2240      	movs	r2, #64	@ 0x40
 80080bc:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80080be:	d065      	beq.n	800818c <I2C_Master_ISR_IT+0x1c0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80080c4:	b29b      	uxth	r3, r3
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d04a      	beq.n	8008160 <I2C_Master_ISR_IT+0x194>
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d146      	bne.n	8008160 <I2C_Master_ISR_IT+0x194>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	685b      	ldr	r3, [r3, #4]
 80080d8:	b29a      	uxth	r2, r3
 80080da:	2112      	movs	r1, #18
 80080dc:	187b      	adds	r3, r7, r1
 80080de:	0592      	lsls	r2, r2, #22
 80080e0:	0d92      	lsrs	r2, r2, #22
 80080e2:	801a      	strh	r2, [r3, #0]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80080e8:	b29b      	uxth	r3, r3
 80080ea:	2bff      	cmp	r3, #255	@ 0xff
 80080ec:	d910      	bls.n	8008110 <I2C_Master_ISR_IT+0x144>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	22ff      	movs	r2, #255	@ 0xff
 80080f2:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80080f8:	b2da      	uxtb	r2, r3
 80080fa:	2380      	movs	r3, #128	@ 0x80
 80080fc:	045c      	lsls	r4, r3, #17
 80080fe:	187b      	adds	r3, r7, r1
 8008100:	8819      	ldrh	r1, [r3, #0]
 8008102:	68f8      	ldr	r0, [r7, #12]
 8008104:	2300      	movs	r3, #0
 8008106:	9300      	str	r3, [sp, #0]
 8008108:	0023      	movs	r3, r4
 800810a:	f001 fa3d 	bl	8009588 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800810e:	e03c      	b.n	800818a <I2C_Master_ISR_IT+0x1be>
=======
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80082d2:	2204      	movs	r2, #4
 80082d4:	431a      	orrs	r2, r3
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	0018      	movs	r0, r3
 80082de:	f001 f9ba 	bl	8009656 <I2C_Flush_TXDR>
 80082e2:	e0e5      	b.n	80084b0 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80082e4:	697b      	ldr	r3, [r7, #20]
 80082e6:	2204      	movs	r2, #4
 80082e8:	4013      	ands	r3, r2
 80082ea:	d021      	beq.n	8008330 <I2C_Master_ISR_IT+0xa0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2204      	movs	r2, #4
 80082f0:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80082f2:	d01d      	beq.n	8008330 <I2C_Master_ISR_IT+0xa0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80082f4:	697b      	ldr	r3, [r7, #20]
 80082f6:	2204      	movs	r2, #4
 80082f8:	4393      	bics	r3, r2
 80082fa:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008306:	b2d2      	uxtb	r2, r2
 8008308:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800830e:	1c5a      	adds	r2, r3, #1
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008318:	3b01      	subs	r3, #1
 800831a:	b29a      	uxth	r2, r3
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008324:	b29b      	uxth	r3, r3
 8008326:	3b01      	subs	r3, #1
 8008328:	b29a      	uxth	r2, r3
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800832e:	e0bf      	b.n	80084b0 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8008330:	697b      	ldr	r3, [r7, #20]
 8008332:	2202      	movs	r2, #2
 8008334:	4013      	ands	r3, r2
 8008336:	d01c      	beq.n	8008372 <I2C_Master_ISR_IT+0xe2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2202      	movs	r2, #2
 800833c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800833e:	d018      	beq.n	8008372 <I2C_Master_ISR_IT+0xe2>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008344:	781a      	ldrb	r2, [r3, #0]
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008350:	1c5a      	adds	r2, r3, #1
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800835a:	3b01      	subs	r3, #1
 800835c:	b29a      	uxth	r2, r3
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008366:	b29b      	uxth	r3, r3
 8008368:	3b01      	subs	r3, #1
 800836a:	b29a      	uxth	r2, r3
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8008370:	e09e      	b.n	80084b0 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8008372:	697b      	ldr	r3, [r7, #20]
 8008374:	2280      	movs	r2, #128	@ 0x80
 8008376:	4013      	ands	r3, r2
 8008378:	d100      	bne.n	800837c <I2C_Master_ISR_IT+0xec>
 800837a:	e069      	b.n	8008450 <I2C_Master_ISR_IT+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2240      	movs	r2, #64	@ 0x40
 8008380:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8008382:	d065      	beq.n	8008450 <I2C_Master_ISR_IT+0x1c0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008388:	b29b      	uxth	r3, r3
 800838a:	2b00      	cmp	r3, #0
 800838c:	d04a      	beq.n	8008424 <I2C_Master_ISR_IT+0x194>
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008392:	2b00      	cmp	r3, #0
 8008394:	d146      	bne.n	8008424 <I2C_Master_ISR_IT+0x194>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	685b      	ldr	r3, [r3, #4]
 800839c:	b29a      	uxth	r2, r3
 800839e:	2112      	movs	r1, #18
 80083a0:	187b      	adds	r3, r7, r1
 80083a2:	0592      	lsls	r2, r2, #22
 80083a4:	0d92      	lsrs	r2, r2, #22
 80083a6:	801a      	strh	r2, [r3, #0]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80083ac:	b29b      	uxth	r3, r3
 80083ae:	2bff      	cmp	r3, #255	@ 0xff
 80083b0:	d910      	bls.n	80083d4 <I2C_Master_ISR_IT+0x144>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	22ff      	movs	r2, #255	@ 0xff
 80083b6:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80083bc:	b2da      	uxtb	r2, r3
 80083be:	2380      	movs	r3, #128	@ 0x80
 80083c0:	045c      	lsls	r4, r3, #17
 80083c2:	187b      	adds	r3, r7, r1
 80083c4:	8819      	ldrh	r1, [r3, #0]
 80083c6:	68f8      	ldr	r0, [r7, #12]
 80083c8:	2300      	movs	r3, #0
 80083ca:	9300      	str	r3, [sp, #0]
 80083cc:	0023      	movs	r3, r4
 80083ce:	f001 fa3d 	bl	800984c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80083d2:	e03c      	b.n	800844e <I2C_Master_ISR_IT+0x1be>
>>>>>>> main
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
<<<<<<< HEAD
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008114:	b29a      	uxth	r2, r3
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800811e:	4a3f      	ldr	r2, [pc, #252]	@ (800821c <I2C_Master_ISR_IT+0x250>)
 8008120:	4293      	cmp	r3, r2
 8008122:	d00e      	beq.n	8008142 <I2C_Master_ISR_IT+0x176>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008128:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800812e:	2312      	movs	r3, #18
 8008130:	18fb      	adds	r3, r7, r3
 8008132:	8819      	ldrh	r1, [r3, #0]
 8008134:	68f8      	ldr	r0, [r7, #12]
 8008136:	2300      	movs	r3, #0
 8008138:	9300      	str	r3, [sp, #0]
 800813a:	0023      	movs	r3, r4
 800813c:	f001 fa24 	bl	8009588 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008140:	e023      	b.n	800818a <I2C_Master_ISR_IT+0x1be>
=======
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80083d8:	b29a      	uxth	r2, r3
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083e2:	4a3f      	ldr	r2, [pc, #252]	@ (80084e0 <I2C_Master_ISR_IT+0x250>)
 80083e4:	4293      	cmp	r3, r2
 80083e6:	d00e      	beq.n	8008406 <I2C_Master_ISR_IT+0x176>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80083ec:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 80083f2:	2312      	movs	r3, #18
 80083f4:	18fb      	adds	r3, r7, r3
 80083f6:	8819      	ldrh	r1, [r3, #0]
 80083f8:	68f8      	ldr	r0, [r7, #12]
 80083fa:	2300      	movs	r3, #0
 80083fc:	9300      	str	r3, [sp, #0]
 80083fe:	0023      	movs	r3, r4
 8008400:	f001 fa24 	bl	800984c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008404:	e023      	b.n	800844e <I2C_Master_ISR_IT+0x1be>
>>>>>>> main
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
<<<<<<< HEAD
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008146:	b2da      	uxtb	r2, r3
 8008148:	2380      	movs	r3, #128	@ 0x80
 800814a:	049c      	lsls	r4, r3, #18
 800814c:	2312      	movs	r3, #18
 800814e:	18fb      	adds	r3, r7, r3
 8008150:	8819      	ldrh	r1, [r3, #0]
 8008152:	68f8      	ldr	r0, [r7, #12]
 8008154:	2300      	movs	r3, #0
 8008156:	9300      	str	r3, [sp, #0]
 8008158:	0023      	movs	r3, r4
 800815a:	f001 fa15 	bl	8009588 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800815e:	e014      	b.n	800818a <I2C_Master_ISR_IT+0x1be>
=======
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800840a:	b2da      	uxtb	r2, r3
 800840c:	2380      	movs	r3, #128	@ 0x80
 800840e:	049c      	lsls	r4, r3, #18
 8008410:	2312      	movs	r3, #18
 8008412:	18fb      	adds	r3, r7, r3
 8008414:	8819      	ldrh	r1, [r3, #0]
 8008416:	68f8      	ldr	r0, [r7, #12]
 8008418:	2300      	movs	r3, #0
 800841a:	9300      	str	r3, [sp, #0]
 800841c:	0023      	movs	r3, r4
 800841e:	f001 fa15 	bl	800984c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008422:	e014      	b.n	800844e <I2C_Master_ISR_IT+0x1be>
>>>>>>> main
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
<<<<<<< HEAD
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	685a      	ldr	r2, [r3, #4]
 8008166:	2380      	movs	r3, #128	@ 0x80
 8008168:	049b      	lsls	r3, r3, #18
 800816a:	401a      	ands	r2, r3
 800816c:	2380      	movs	r3, #128	@ 0x80
 800816e:	049b      	lsls	r3, r3, #18
 8008170:	429a      	cmp	r2, r3
 8008172:	d004      	beq.n	800817e <I2C_Master_ISR_IT+0x1b2>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	0018      	movs	r0, r3
 8008178:	f000 fcf4 	bl	8008b64 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800817c:	e036      	b.n	80081ec <I2C_Master_ISR_IT+0x220>
=======
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	685a      	ldr	r2, [r3, #4]
 800842a:	2380      	movs	r3, #128	@ 0x80
 800842c:	049b      	lsls	r3, r3, #18
 800842e:	401a      	ands	r2, r3
 8008430:	2380      	movs	r3, #128	@ 0x80
 8008432:	049b      	lsls	r3, r3, #18
 8008434:	429a      	cmp	r2, r3
 8008436:	d004      	beq.n	8008442 <I2C_Master_ISR_IT+0x1b2>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	0018      	movs	r0, r3
 800843c:	f000 fcf4 	bl	8008e28 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008440:	e036      	b.n	80084b0 <I2C_Master_ISR_IT+0x220>
>>>>>>> main
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
<<<<<<< HEAD
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	2140      	movs	r1, #64	@ 0x40
 8008182:	0018      	movs	r0, r3
 8008184:	f000 ffda 	bl	800913c <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008188:	e030      	b.n	80081ec <I2C_Master_ISR_IT+0x220>
 800818a:	e02f      	b.n	80081ec <I2C_Master_ISR_IT+0x220>
=======
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	2140      	movs	r1, #64	@ 0x40
 8008446:	0018      	movs	r0, r3
 8008448:	f000 ffda 	bl	8009400 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800844c:	e030      	b.n	80084b0 <I2C_Master_ISR_IT+0x220>
 800844e:	e02f      	b.n	80084b0 <I2C_Master_ISR_IT+0x220>
>>>>>>> main
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
<<<<<<< HEAD
 800818c:	697b      	ldr	r3, [r7, #20]
 800818e:	2240      	movs	r2, #64	@ 0x40
 8008190:	4013      	ands	r3, r2
 8008192:	d02b      	beq.n	80081ec <I2C_Master_ISR_IT+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2240      	movs	r2, #64	@ 0x40
 8008198:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800819a:	d027      	beq.n	80081ec <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80081a0:	b29b      	uxth	r3, r3
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d11d      	bne.n	80081e2 <I2C_Master_ISR_IT+0x216>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	685a      	ldr	r2, [r3, #4]
 80081ac:	2380      	movs	r3, #128	@ 0x80
 80081ae:	049b      	lsls	r3, r3, #18
 80081b0:	401a      	ands	r2, r3
 80081b2:	2380      	movs	r3, #128	@ 0x80
 80081b4:	049b      	lsls	r3, r3, #18
 80081b6:	429a      	cmp	r2, r3
 80081b8:	d018      	beq.n	80081ec <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081be:	4a17      	ldr	r2, [pc, #92]	@ (800821c <I2C_Master_ISR_IT+0x250>)
 80081c0:	4293      	cmp	r3, r2
 80081c2:	d109      	bne.n	80081d8 <I2C_Master_ISR_IT+0x20c>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	685a      	ldr	r2, [r3, #4]
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	2180      	movs	r1, #128	@ 0x80
 80081d0:	01c9      	lsls	r1, r1, #7
 80081d2:	430a      	orrs	r2, r1
 80081d4:	605a      	str	r2, [r3, #4]
 80081d6:	e009      	b.n	80081ec <I2C_Master_ISR_IT+0x220>
=======
 8008450:	697b      	ldr	r3, [r7, #20]
 8008452:	2240      	movs	r2, #64	@ 0x40
 8008454:	4013      	ands	r3, r2
 8008456:	d02b      	beq.n	80084b0 <I2C_Master_ISR_IT+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	2240      	movs	r2, #64	@ 0x40
 800845c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800845e:	d027      	beq.n	80084b0 <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008464:	b29b      	uxth	r3, r3
 8008466:	2b00      	cmp	r3, #0
 8008468:	d11d      	bne.n	80084a6 <I2C_Master_ISR_IT+0x216>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	685a      	ldr	r2, [r3, #4]
 8008470:	2380      	movs	r3, #128	@ 0x80
 8008472:	049b      	lsls	r3, r3, #18
 8008474:	401a      	ands	r2, r3
 8008476:	2380      	movs	r3, #128	@ 0x80
 8008478:	049b      	lsls	r3, r3, #18
 800847a:	429a      	cmp	r2, r3
 800847c:	d018      	beq.n	80084b0 <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008482:	4a17      	ldr	r2, [pc, #92]	@ (80084e0 <I2C_Master_ISR_IT+0x250>)
 8008484:	4293      	cmp	r3, r2
 8008486:	d109      	bne.n	800849c <I2C_Master_ISR_IT+0x20c>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	685a      	ldr	r2, [r3, #4]
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	2180      	movs	r1, #128	@ 0x80
 8008494:	01c9      	lsls	r1, r1, #7
 8008496:	430a      	orrs	r2, r1
 8008498:	605a      	str	r2, [r3, #4]
 800849a:	e009      	b.n	80084b0 <I2C_Master_ISR_IT+0x220>
>>>>>>> main
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
<<<<<<< HEAD
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	0018      	movs	r0, r3
 80081dc:	f000 fcc2 	bl	8008b64 <I2C_ITMasterSeqCplt>
 80081e0:	e004      	b.n	80081ec <I2C_Master_ISR_IT+0x220>
=======
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	0018      	movs	r0, r3
 80084a0:	f000 fcc2 	bl	8008e28 <I2C_ITMasterSeqCplt>
 80084a4:	e004      	b.n	80084b0 <I2C_Master_ISR_IT+0x220>
>>>>>>> main
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
<<<<<<< HEAD
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	2140      	movs	r1, #64	@ 0x40
 80081e6:	0018      	movs	r0, r3
 80081e8:	f000 ffa8 	bl	800913c <I2C_ITError>
=======
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	2140      	movs	r1, #64	@ 0x40
 80084aa:	0018      	movs	r0, r3
 80084ac:	f000 ffa8 	bl	8009400 <I2C_ITError>
>>>>>>> main
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
<<<<<<< HEAD
 80081ec:	697b      	ldr	r3, [r7, #20]
 80081ee:	2220      	movs	r2, #32
 80081f0:	4013      	ands	r3, r2
 80081f2:	d009      	beq.n	8008208 <I2C_Master_ISR_IT+0x23c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2220      	movs	r2, #32
 80081f8:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80081fa:	d005      	beq.n	8008208 <I2C_Master_ISR_IT+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 80081fc:	697a      	ldr	r2, [r7, #20]
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	0011      	movs	r1, r2
 8008202:	0018      	movs	r0, r3
 8008204:	f000 fd54 	bl	8008cb0 <I2C_ITMasterCplt>
=======
 80084b0:	697b      	ldr	r3, [r7, #20]
 80084b2:	2220      	movs	r2, #32
 80084b4:	4013      	ands	r3, r2
 80084b6:	d009      	beq.n	80084cc <I2C_Master_ISR_IT+0x23c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	2220      	movs	r2, #32
 80084bc:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80084be:	d005      	beq.n	80084cc <I2C_Master_ISR_IT+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 80084c0:	697a      	ldr	r2, [r7, #20]
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	0011      	movs	r1, r2
 80084c6:	0018      	movs	r0, r3
 80084c8:	f000 fd54 	bl	8008f74 <I2C_ITMasterCplt>
>>>>>>> main
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
<<<<<<< HEAD
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	2240      	movs	r2, #64	@ 0x40
 800820c:	2100      	movs	r1, #0
 800820e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008210:	2300      	movs	r3, #0
}
 8008212:	0018      	movs	r0, r3
 8008214:	46bd      	mov	sp, r7
 8008216:	b007      	add	sp, #28
 8008218:	bd90      	pop	{r4, r7, pc}
 800821a:	46c0      	nop			@ (mov r8, r8)
 800821c:	ffff0000 	.word	0xffff0000

08008220 <I2C_Slave_ISR_IT>:
=======
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	2240      	movs	r2, #64	@ 0x40
 80084d0:	2100      	movs	r1, #0
 80084d2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80084d4:	2300      	movs	r3, #0
}
 80084d6:	0018      	movs	r0, r3
 80084d8:	46bd      	mov	sp, r7
 80084da:	b007      	add	sp, #28
 80084dc:	bd90      	pop	{r4, r7, pc}
 80084de:	46c0      	nop			@ (mov r8, r8)
 80084e0:	ffff0000 	.word	0xffff0000

080084e4 <I2C_Slave_ISR_IT>:
>>>>>>> main
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
<<<<<<< HEAD
 8008220:	b580      	push	{r7, lr}
 8008222:	b086      	sub	sp, #24
 8008224:	af00      	add	r7, sp, #0
 8008226:	60f8      	str	r0, [r7, #12]
 8008228:	60b9      	str	r1, [r7, #8]
 800822a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008230:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8008232:	68bb      	ldr	r3, [r7, #8]
 8008234:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	2240      	movs	r2, #64	@ 0x40
 800823a:	5c9b      	ldrb	r3, [r3, r2]
 800823c:	2b01      	cmp	r3, #1
 800823e:	d101      	bne.n	8008244 <I2C_Slave_ISR_IT+0x24>
 8008240:	2302      	movs	r3, #2
 8008242:	e0e6      	b.n	8008412 <I2C_Slave_ISR_IT+0x1f2>
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	2240      	movs	r2, #64	@ 0x40
 8008248:	2101      	movs	r1, #1
 800824a:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800824c:	693b      	ldr	r3, [r7, #16]
 800824e:	2220      	movs	r2, #32
 8008250:	4013      	ands	r3, r2
 8008252:	d009      	beq.n	8008268 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2220      	movs	r2, #32
 8008258:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800825a:	d005      	beq.n	8008268 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800825c:	693a      	ldr	r2, [r7, #16]
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	0011      	movs	r1, r2
 8008262:	0018      	movs	r0, r3
 8008264:	f000 fdf2 	bl	8008e4c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8008268:	693b      	ldr	r3, [r7, #16]
 800826a:	2210      	movs	r2, #16
 800826c:	4013      	ands	r3, r2
 800826e:	d052      	beq.n	8008316 <I2C_Slave_ISR_IT+0xf6>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2210      	movs	r2, #16
 8008274:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8008276:	d04e      	beq.n	8008316 <I2C_Slave_ISR_IT+0xf6>
=======
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b086      	sub	sp, #24
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	60f8      	str	r0, [r7, #12]
 80084ec:	60b9      	str	r1, [r7, #8]
 80084ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084f4:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80084f6:	68bb      	ldr	r3, [r7, #8]
 80084f8:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	2240      	movs	r2, #64	@ 0x40
 80084fe:	5c9b      	ldrb	r3, [r3, r2]
 8008500:	2b01      	cmp	r3, #1
 8008502:	d101      	bne.n	8008508 <I2C_Slave_ISR_IT+0x24>
 8008504:	2302      	movs	r3, #2
 8008506:	e0e6      	b.n	80086d6 <I2C_Slave_ISR_IT+0x1f2>
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	2240      	movs	r2, #64	@ 0x40
 800850c:	2101      	movs	r1, #1
 800850e:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008510:	693b      	ldr	r3, [r7, #16]
 8008512:	2220      	movs	r2, #32
 8008514:	4013      	ands	r3, r2
 8008516:	d009      	beq.n	800852c <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2220      	movs	r2, #32
 800851c:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800851e:	d005      	beq.n	800852c <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8008520:	693a      	ldr	r2, [r7, #16]
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	0011      	movs	r1, r2
 8008526:	0018      	movs	r0, r3
 8008528:	f000 fdf2 	bl	8009110 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800852c:	693b      	ldr	r3, [r7, #16]
 800852e:	2210      	movs	r2, #16
 8008530:	4013      	ands	r3, r2
 8008532:	d052      	beq.n	80085da <I2C_Slave_ISR_IT+0xf6>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	2210      	movs	r2, #16
 8008538:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800853a:	d04e      	beq.n	80085da <I2C_Slave_ISR_IT+0xf6>
>>>>>>> main
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
<<<<<<< HEAD
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800827c:	b29b      	uxth	r3, r3
 800827e:	2b00      	cmp	r3, #0
 8008280:	d12d      	bne.n	80082de <I2C_Slave_ISR_IT+0xbe>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	2241      	movs	r2, #65	@ 0x41
 8008286:	5c9b      	ldrb	r3, [r3, r2]
 8008288:	b2db      	uxtb	r3, r3
 800828a:	2b28      	cmp	r3, #40	@ 0x28
 800828c:	d10b      	bne.n	80082a6 <I2C_Slave_ISR_IT+0x86>
 800828e:	697a      	ldr	r2, [r7, #20]
 8008290:	2380      	movs	r3, #128	@ 0x80
 8008292:	049b      	lsls	r3, r3, #18
 8008294:	429a      	cmp	r2, r3
 8008296:	d106      	bne.n	80082a6 <I2C_Slave_ISR_IT+0x86>
=======
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008540:	b29b      	uxth	r3, r3
 8008542:	2b00      	cmp	r3, #0
 8008544:	d12d      	bne.n	80085a2 <I2C_Slave_ISR_IT+0xbe>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	2241      	movs	r2, #65	@ 0x41
 800854a:	5c9b      	ldrb	r3, [r3, r2]
 800854c:	b2db      	uxtb	r3, r3
 800854e:	2b28      	cmp	r3, #40	@ 0x28
 8008550:	d10b      	bne.n	800856a <I2C_Slave_ISR_IT+0x86>
 8008552:	697a      	ldr	r2, [r7, #20]
 8008554:	2380      	movs	r3, #128	@ 0x80
 8008556:	049b      	lsls	r3, r3, #18
 8008558:	429a      	cmp	r2, r3
 800855a:	d106      	bne.n	800856a <I2C_Slave_ISR_IT+0x86>
>>>>>>> main
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
<<<<<<< HEAD
 8008298:	693a      	ldr	r2, [r7, #16]
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	0011      	movs	r1, r2
 800829e:	0018      	movs	r0, r3
 80082a0:	f000 fef4 	bl	800908c <I2C_ITListenCplt>
 80082a4:	e036      	b.n	8008314 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	2241      	movs	r2, #65	@ 0x41
 80082aa:	5c9b      	ldrb	r3, [r3, r2]
 80082ac:	b2db      	uxtb	r3, r3
 80082ae:	2b29      	cmp	r3, #41	@ 0x29
 80082b0:	d110      	bne.n	80082d4 <I2C_Slave_ISR_IT+0xb4>
 80082b2:	697b      	ldr	r3, [r7, #20]
 80082b4:	4a59      	ldr	r2, [pc, #356]	@ (800841c <I2C_Slave_ISR_IT+0x1fc>)
 80082b6:	4293      	cmp	r3, r2
 80082b8:	d00c      	beq.n	80082d4 <I2C_Slave_ISR_IT+0xb4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	2210      	movs	r2, #16
 80082c0:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	0018      	movs	r0, r3
 80082c6:	f001 f864 	bl	8009392 <I2C_Flush_TXDR>
=======
 800855c:	693a      	ldr	r2, [r7, #16]
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	0011      	movs	r1, r2
 8008562:	0018      	movs	r0, r3
 8008564:	f000 fef4 	bl	8009350 <I2C_ITListenCplt>
 8008568:	e036      	b.n	80085d8 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	2241      	movs	r2, #65	@ 0x41
 800856e:	5c9b      	ldrb	r3, [r3, r2]
 8008570:	b2db      	uxtb	r3, r3
 8008572:	2b29      	cmp	r3, #41	@ 0x29
 8008574:	d110      	bne.n	8008598 <I2C_Slave_ISR_IT+0xb4>
 8008576:	697b      	ldr	r3, [r7, #20]
 8008578:	4a59      	ldr	r2, [pc, #356]	@ (80086e0 <I2C_Slave_ISR_IT+0x1fc>)
 800857a:	4293      	cmp	r3, r2
 800857c:	d00c      	beq.n	8008598 <I2C_Slave_ISR_IT+0xb4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	2210      	movs	r2, #16
 8008584:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	0018      	movs	r0, r3
 800858a:	f001 f864 	bl	8009656 <I2C_Flush_TXDR>
>>>>>>> main

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
<<<<<<< HEAD
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	0018      	movs	r0, r3
 80082ce:	f000 fc8b 	bl	8008be8 <I2C_ITSlaveSeqCplt>
 80082d2:	e01f      	b.n	8008314 <I2C_Slave_ISR_IT+0xf4>
=======
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	0018      	movs	r0, r3
 8008592:	f000 fc8b 	bl	8008eac <I2C_ITSlaveSeqCplt>
 8008596:	e01f      	b.n	80085d8 <I2C_Slave_ISR_IT+0xf4>
>>>>>>> main
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
<<<<<<< HEAD
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	2210      	movs	r2, #16
 80082da:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80082dc:	e091      	b.n	8008402 <I2C_Slave_ISR_IT+0x1e2>
=======
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	2210      	movs	r2, #16
 800859e:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80085a0:	e091      	b.n	80086c6 <I2C_Slave_ISR_IT+0x1e2>
>>>>>>> main
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
<<<<<<< HEAD
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	2210      	movs	r2, #16
 80082e4:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80082ea:	2204      	movs	r2, #4
 80082ec:	431a      	orrs	r2, r3
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80082f2:	697b      	ldr	r3, [r7, #20]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d005      	beq.n	8008304 <I2C_Slave_ISR_IT+0xe4>
 80082f8:	697a      	ldr	r2, [r7, #20]
 80082fa:	2380      	movs	r3, #128	@ 0x80
 80082fc:	045b      	lsls	r3, r3, #17
 80082fe:	429a      	cmp	r2, r3
 8008300:	d000      	beq.n	8008304 <I2C_Slave_ISR_IT+0xe4>
 8008302:	e07e      	b.n	8008402 <I2C_Slave_ISR_IT+0x1e2>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	0011      	movs	r1, r2
 800830c:	0018      	movs	r0, r3
 800830e:	f000 ff15 	bl	800913c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8008312:	e076      	b.n	8008402 <I2C_Slave_ISR_IT+0x1e2>
 8008314:	e075      	b.n	8008402 <I2C_Slave_ISR_IT+0x1e2>
=======
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	2210      	movs	r2, #16
 80085a8:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80085ae:	2204      	movs	r2, #4
 80085b0:	431a      	orrs	r2, r3
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80085b6:	697b      	ldr	r3, [r7, #20]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d005      	beq.n	80085c8 <I2C_Slave_ISR_IT+0xe4>
 80085bc:	697a      	ldr	r2, [r7, #20]
 80085be:	2380      	movs	r3, #128	@ 0x80
 80085c0:	045b      	lsls	r3, r3, #17
 80085c2:	429a      	cmp	r2, r3
 80085c4:	d000      	beq.n	80085c8 <I2C_Slave_ISR_IT+0xe4>
 80085c6:	e07e      	b.n	80086c6 <I2C_Slave_ISR_IT+0x1e2>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	0011      	movs	r1, r2
 80085d0:	0018      	movs	r0, r3
 80085d2:	f000 ff15 	bl	8009400 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80085d6:	e076      	b.n	80086c6 <I2C_Slave_ISR_IT+0x1e2>
 80085d8:	e075      	b.n	80086c6 <I2C_Slave_ISR_IT+0x1e2>
>>>>>>> main
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
<<<<<<< HEAD
 8008316:	693b      	ldr	r3, [r7, #16]
 8008318:	2204      	movs	r2, #4
 800831a:	4013      	ands	r3, r2
 800831c:	d02f      	beq.n	800837e <I2C_Slave_ISR_IT+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	2204      	movs	r2, #4
 8008322:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8008324:	d02b      	beq.n	800837e <I2C_Slave_ISR_IT+0x15e>
  {
    if (hi2c->XferCount > 0U)
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800832a:	b29b      	uxth	r3, r3
 800832c:	2b00      	cmp	r3, #0
 800832e:	d018      	beq.n	8008362 <I2C_Slave_ISR_IT+0x142>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800833a:	b2d2      	uxtb	r2, r2
 800833c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008342:	1c5a      	adds	r2, r3, #1
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800834c:	3b01      	subs	r3, #1
 800834e:	b29a      	uxth	r2, r3
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008358:	b29b      	uxth	r3, r3
 800835a:	3b01      	subs	r3, #1
 800835c:	b29a      	uxth	r2, r3
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008366:	b29b      	uxth	r3, r3
 8008368:	2b00      	cmp	r3, #0
 800836a:	d14c      	bne.n	8008406 <I2C_Slave_ISR_IT+0x1e6>
 800836c:	697b      	ldr	r3, [r7, #20]
 800836e:	4a2b      	ldr	r2, [pc, #172]	@ (800841c <I2C_Slave_ISR_IT+0x1fc>)
 8008370:	4293      	cmp	r3, r2
 8008372:	d048      	beq.n	8008406 <I2C_Slave_ISR_IT+0x1e6>
=======
 80085da:	693b      	ldr	r3, [r7, #16]
 80085dc:	2204      	movs	r2, #4
 80085de:	4013      	ands	r3, r2
 80085e0:	d02f      	beq.n	8008642 <I2C_Slave_ISR_IT+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	2204      	movs	r2, #4
 80085e6:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80085e8:	d02b      	beq.n	8008642 <I2C_Slave_ISR_IT+0x15e>
  {
    if (hi2c->XferCount > 0U)
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80085ee:	b29b      	uxth	r3, r3
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d018      	beq.n	8008626 <I2C_Slave_ISR_IT+0x142>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085fe:	b2d2      	uxtb	r2, r2
 8008600:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008606:	1c5a      	adds	r2, r3, #1
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008610:	3b01      	subs	r3, #1
 8008612:	b29a      	uxth	r2, r3
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800861c:	b29b      	uxth	r3, r3
 800861e:	3b01      	subs	r3, #1
 8008620:	b29a      	uxth	r2, r3
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800862a:	b29b      	uxth	r3, r3
 800862c:	2b00      	cmp	r3, #0
 800862e:	d14c      	bne.n	80086ca <I2C_Slave_ISR_IT+0x1e6>
 8008630:	697b      	ldr	r3, [r7, #20]
 8008632:	4a2b      	ldr	r2, [pc, #172]	@ (80086e0 <I2C_Slave_ISR_IT+0x1fc>)
 8008634:	4293      	cmp	r3, r2
 8008636:	d048      	beq.n	80086ca <I2C_Slave_ISR_IT+0x1e6>
>>>>>>> main
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
<<<<<<< HEAD
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	0018      	movs	r0, r3
 8008378:	f000 fc36 	bl	8008be8 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800837c:	e043      	b.n	8008406 <I2C_Slave_ISR_IT+0x1e6>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800837e:	693b      	ldr	r3, [r7, #16]
 8008380:	2208      	movs	r2, #8
 8008382:	4013      	ands	r3, r2
 8008384:	d00a      	beq.n	800839c <I2C_Slave_ISR_IT+0x17c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	2208      	movs	r2, #8
 800838a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800838c:	d006      	beq.n	800839c <I2C_Slave_ISR_IT+0x17c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800838e:	693a      	ldr	r2, [r7, #16]
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	0011      	movs	r1, r2
 8008394:	0018      	movs	r0, r3
 8008396:	f000 fb41 	bl	8008a1c <I2C_ITAddrCplt>
 800839a:	e035      	b.n	8008408 <I2C_Slave_ISR_IT+0x1e8>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800839c:	693b      	ldr	r3, [r7, #16]
 800839e:	2202      	movs	r2, #2
 80083a0:	4013      	ands	r3, r2
 80083a2:	d031      	beq.n	8008408 <I2C_Slave_ISR_IT+0x1e8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2202      	movs	r2, #2
 80083a8:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80083aa:	d02d      	beq.n	8008408 <I2C_Slave_ISR_IT+0x1e8>
=======
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	0018      	movs	r0, r3
 800863c:	f000 fc36 	bl	8008eac <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8008640:	e043      	b.n	80086ca <I2C_Slave_ISR_IT+0x1e6>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8008642:	693b      	ldr	r3, [r7, #16]
 8008644:	2208      	movs	r2, #8
 8008646:	4013      	ands	r3, r2
 8008648:	d00a      	beq.n	8008660 <I2C_Slave_ISR_IT+0x17c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	2208      	movs	r2, #8
 800864e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8008650:	d006      	beq.n	8008660 <I2C_Slave_ISR_IT+0x17c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8008652:	693a      	ldr	r2, [r7, #16]
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	0011      	movs	r1, r2
 8008658:	0018      	movs	r0, r3
 800865a:	f000 fb41 	bl	8008ce0 <I2C_ITAddrCplt>
 800865e:	e035      	b.n	80086cc <I2C_Slave_ISR_IT+0x1e8>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8008660:	693b      	ldr	r3, [r7, #16]
 8008662:	2202      	movs	r2, #2
 8008664:	4013      	ands	r3, r2
 8008666:	d031      	beq.n	80086cc <I2C_Slave_ISR_IT+0x1e8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2202      	movs	r2, #2
 800866c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800866e:	d02d      	beq.n	80086cc <I2C_Slave_ISR_IT+0x1e8>
>>>>>>> main
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
<<<<<<< HEAD
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80083b0:	b29b      	uxth	r3, r3
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d018      	beq.n	80083e8 <I2C_Slave_ISR_IT+0x1c8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083ba:	781a      	ldrb	r2, [r3, #0]
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083c6:	1c5a      	adds	r2, r3, #1
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80083d0:	b29b      	uxth	r3, r3
 80083d2:	3b01      	subs	r3, #1
 80083d4:	b29a      	uxth	r2, r3
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80083de:	3b01      	subs	r3, #1
 80083e0:	b29a      	uxth	r2, r3
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	851a      	strh	r2, [r3, #40]	@ 0x28
 80083e6:	e00f      	b.n	8008408 <I2C_Slave_ISR_IT+0x1e8>
=======
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008674:	b29b      	uxth	r3, r3
 8008676:	2b00      	cmp	r3, #0
 8008678:	d018      	beq.n	80086ac <I2C_Slave_ISR_IT+0x1c8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800867e:	781a      	ldrb	r2, [r3, #0]
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800868a:	1c5a      	adds	r2, r3, #1
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008694:	b29b      	uxth	r3, r3
 8008696:	3b01      	subs	r3, #1
 8008698:	b29a      	uxth	r2, r3
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80086a2:	3b01      	subs	r3, #1
 80086a4:	b29a      	uxth	r2, r3
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	851a      	strh	r2, [r3, #40]	@ 0x28
 80086aa:	e00f      	b.n	80086cc <I2C_Slave_ISR_IT+0x1e8>
>>>>>>> main
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
<<<<<<< HEAD
 80083e8:	697a      	ldr	r2, [r7, #20]
 80083ea:	2380      	movs	r3, #128	@ 0x80
 80083ec:	045b      	lsls	r3, r3, #17
 80083ee:	429a      	cmp	r2, r3
 80083f0:	d002      	beq.n	80083f8 <I2C_Slave_ISR_IT+0x1d8>
 80083f2:	697b      	ldr	r3, [r7, #20]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d107      	bne.n	8008408 <I2C_Slave_ISR_IT+0x1e8>
=======
 80086ac:	697a      	ldr	r2, [r7, #20]
 80086ae:	2380      	movs	r3, #128	@ 0x80
 80086b0:	045b      	lsls	r3, r3, #17
 80086b2:	429a      	cmp	r2, r3
 80086b4:	d002      	beq.n	80086bc <I2C_Slave_ISR_IT+0x1d8>
 80086b6:	697b      	ldr	r3, [r7, #20]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d107      	bne.n	80086cc <I2C_Slave_ISR_IT+0x1e8>
>>>>>>> main
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
<<<<<<< HEAD
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	0018      	movs	r0, r3
 80083fc:	f000 fbf4 	bl	8008be8 <I2C_ITSlaveSeqCplt>
 8008400:	e002      	b.n	8008408 <I2C_Slave_ISR_IT+0x1e8>
    if (hi2c->XferCount == 0U)
 8008402:	46c0      	nop			@ (mov r8, r8)
 8008404:	e000      	b.n	8008408 <I2C_Slave_ISR_IT+0x1e8>
    if ((hi2c->XferCount == 0U) && \
 8008406:	46c0      	nop			@ (mov r8, r8)
=======
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	0018      	movs	r0, r3
 80086c0:	f000 fbf4 	bl	8008eac <I2C_ITSlaveSeqCplt>
 80086c4:	e002      	b.n	80086cc <I2C_Slave_ISR_IT+0x1e8>
    if (hi2c->XferCount == 0U)
 80086c6:	46c0      	nop			@ (mov r8, r8)
 80086c8:	e000      	b.n	80086cc <I2C_Slave_ISR_IT+0x1e8>
    if ((hi2c->XferCount == 0U) && \
 80086ca:	46c0      	nop			@ (mov r8, r8)
>>>>>>> main
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
<<<<<<< HEAD
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	2240      	movs	r2, #64	@ 0x40
 800840c:	2100      	movs	r1, #0
 800840e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008410:	2300      	movs	r3, #0
}
 8008412:	0018      	movs	r0, r3
 8008414:	46bd      	mov	sp, r7
 8008416:	b006      	add	sp, #24
 8008418:	bd80      	pop	{r7, pc}
 800841a:	46c0      	nop			@ (mov r8, r8)
 800841c:	ffff0000 	.word	0xffff0000

08008420 <I2C_Master_ISR_DMA>:
=======
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	2240      	movs	r2, #64	@ 0x40
 80086d0:	2100      	movs	r1, #0
 80086d2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80086d4:	2300      	movs	r3, #0
}
 80086d6:	0018      	movs	r0, r3
 80086d8:	46bd      	mov	sp, r7
 80086da:	b006      	add	sp, #24
 80086dc:	bd80      	pop	{r7, pc}
 80086de:	46c0      	nop			@ (mov r8, r8)
 80086e0:	ffff0000 	.word	0xffff0000

080086e4 <I2C_Master_ISR_DMA>:
>>>>>>> main
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
<<<<<<< HEAD
 8008420:	b590      	push	{r4, r7, lr}
 8008422:	b089      	sub	sp, #36	@ 0x24
 8008424:	af02      	add	r7, sp, #8
 8008426:	60f8      	str	r0, [r7, #12]
 8008428:	60b9      	str	r1, [r7, #8]
 800842a:	607a      	str	r2, [r7, #4]
=======
 80086e4:	b590      	push	{r4, r7, lr}
 80086e6:	b089      	sub	sp, #36	@ 0x24
 80086e8:	af02      	add	r7, sp, #8
 80086ea:	60f8      	str	r0, [r7, #12]
 80086ec:	60b9      	str	r1, [r7, #8]
 80086ee:	607a      	str	r2, [r7, #4]
>>>>>>> main
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
<<<<<<< HEAD
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	2240      	movs	r2, #64	@ 0x40
 8008430:	5c9b      	ldrb	r3, [r3, r2]
 8008432:	2b01      	cmp	r3, #1
 8008434:	d101      	bne.n	800843a <I2C_Master_ISR_DMA+0x1a>
 8008436:	2302      	movs	r3, #2
 8008438:	e0e7      	b.n	800860a <I2C_Master_ISR_DMA+0x1ea>
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	2240      	movs	r2, #64	@ 0x40
 800843e:	2101      	movs	r1, #1
 8008440:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8008442:	68bb      	ldr	r3, [r7, #8]
 8008444:	2210      	movs	r2, #16
 8008446:	4013      	ands	r3, r2
 8008448:	d017      	beq.n	800847a <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	2210      	movs	r2, #16
 800844e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8008450:	d013      	beq.n	800847a <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	2210      	movs	r2, #16
 8008458:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800845e:	2204      	movs	r2, #4
 8008460:	431a      	orrs	r2, r3
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	645a      	str	r2, [r3, #68]	@ 0x44
=======
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	2240      	movs	r2, #64	@ 0x40
 80086f4:	5c9b      	ldrb	r3, [r3, r2]
 80086f6:	2b01      	cmp	r3, #1
 80086f8:	d101      	bne.n	80086fe <I2C_Master_ISR_DMA+0x1a>
 80086fa:	2302      	movs	r3, #2
 80086fc:	e0e7      	b.n	80088ce <I2C_Master_ISR_DMA+0x1ea>
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	2240      	movs	r2, #64	@ 0x40
 8008702:	2101      	movs	r1, #1
 8008704:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8008706:	68bb      	ldr	r3, [r7, #8]
 8008708:	2210      	movs	r2, #16
 800870a:	4013      	ands	r3, r2
 800870c:	d017      	beq.n	800873e <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	2210      	movs	r2, #16
 8008712:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8008714:	d013      	beq.n	800873e <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	2210      	movs	r2, #16
 800871c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008722:	2204      	movs	r2, #4
 8008724:	431a      	orrs	r2, r3
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	645a      	str	r2, [r3, #68]	@ 0x44
>>>>>>> main

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
<<<<<<< HEAD
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	2120      	movs	r1, #32
 800846a:	0018      	movs	r0, r3
 800846c:	f001 f8c6 	bl	80095fc <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	0018      	movs	r0, r3
 8008474:	f000 ff8d 	bl	8009392 <I2C_Flush_TXDR>
 8008478:	e0c2      	b.n	8008600 <I2C_Master_ISR_DMA+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800847a:	68bb      	ldr	r3, [r7, #8]
 800847c:	2280      	movs	r2, #128	@ 0x80
 800847e:	4013      	ands	r3, r2
 8008480:	d100      	bne.n	8008484 <I2C_Master_ISR_DMA+0x64>
 8008482:	e07c      	b.n	800857e <I2C_Master_ISR_DMA+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2240      	movs	r2, #64	@ 0x40
 8008488:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800848a:	d100      	bne.n	800848e <I2C_Master_ISR_DMA+0x6e>
 800848c:	e077      	b.n	800857e <I2C_Master_ISR_DMA+0x15e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	681a      	ldr	r2, [r3, #0]
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	2140      	movs	r1, #64	@ 0x40
 800849a:	438a      	bics	r2, r1
 800849c:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80084a2:	b29b      	uxth	r3, r3
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d055      	beq.n	8008554 <I2C_Master_ISR_DMA+0x134>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	685b      	ldr	r3, [r3, #4]
 80084ae:	b29a      	uxth	r2, r3
 80084b0:	2312      	movs	r3, #18
 80084b2:	18fb      	adds	r3, r7, r3
 80084b4:	0592      	lsls	r2, r2, #22
 80084b6:	0d92      	lsrs	r2, r2, #22
 80084b8:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80084be:	b29b      	uxth	r3, r3
 80084c0:	2bff      	cmp	r3, #255	@ 0xff
 80084c2:	d906      	bls.n	80084d2 <I2C_Master_ISR_DMA+0xb2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	22ff      	movs	r2, #255	@ 0xff
 80084c8:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 80084ca:	2380      	movs	r3, #128	@ 0x80
 80084cc:	045b      	lsls	r3, r3, #17
 80084ce:	617b      	str	r3, [r7, #20]
 80084d0:	e010      	b.n	80084f4 <I2C_Master_ISR_DMA+0xd4>
=======
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	2120      	movs	r1, #32
 800872e:	0018      	movs	r0, r3
 8008730:	f001 f8c6 	bl	80098c0 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	0018      	movs	r0, r3
 8008738:	f000 ff8d 	bl	8009656 <I2C_Flush_TXDR>
 800873c:	e0c2      	b.n	80088c4 <I2C_Master_ISR_DMA+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800873e:	68bb      	ldr	r3, [r7, #8]
 8008740:	2280      	movs	r2, #128	@ 0x80
 8008742:	4013      	ands	r3, r2
 8008744:	d100      	bne.n	8008748 <I2C_Master_ISR_DMA+0x64>
 8008746:	e07c      	b.n	8008842 <I2C_Master_ISR_DMA+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	2240      	movs	r2, #64	@ 0x40
 800874c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800874e:	d100      	bne.n	8008752 <I2C_Master_ISR_DMA+0x6e>
 8008750:	e077      	b.n	8008842 <I2C_Master_ISR_DMA+0x15e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	681a      	ldr	r2, [r3, #0]
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	2140      	movs	r1, #64	@ 0x40
 800875e:	438a      	bics	r2, r1
 8008760:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008766:	b29b      	uxth	r3, r3
 8008768:	2b00      	cmp	r3, #0
 800876a:	d055      	beq.n	8008818 <I2C_Master_ISR_DMA+0x134>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	685b      	ldr	r3, [r3, #4]
 8008772:	b29a      	uxth	r2, r3
 8008774:	2312      	movs	r3, #18
 8008776:	18fb      	adds	r3, r7, r3
 8008778:	0592      	lsls	r2, r2, #22
 800877a:	0d92      	lsrs	r2, r2, #22
 800877c:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008782:	b29b      	uxth	r3, r3
 8008784:	2bff      	cmp	r3, #255	@ 0xff
 8008786:	d906      	bls.n	8008796 <I2C_Master_ISR_DMA+0xb2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	22ff      	movs	r2, #255	@ 0xff
 800878c:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 800878e:	2380      	movs	r3, #128	@ 0x80
 8008790:	045b      	lsls	r3, r3, #17
 8008792:	617b      	str	r3, [r7, #20]
 8008794:	e010      	b.n	80087b8 <I2C_Master_ISR_DMA+0xd4>
>>>>>>> main
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
<<<<<<< HEAD
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80084d6:	b29a      	uxth	r2, r3
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084e0:	4a4c      	ldr	r2, [pc, #304]	@ (8008614 <I2C_Master_ISR_DMA+0x1f4>)
 80084e2:	4293      	cmp	r3, r2
 80084e4:	d003      	beq.n	80084ee <I2C_Master_ISR_DMA+0xce>
        {
          xfermode = hi2c->XferOptions;
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084ea:	617b      	str	r3, [r7, #20]
 80084ec:	e002      	b.n	80084f4 <I2C_Master_ISR_DMA+0xd4>
=======
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800879a:	b29a      	uxth	r2, r3
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087a4:	4a4c      	ldr	r2, [pc, #304]	@ (80088d8 <I2C_Master_ISR_DMA+0x1f4>)
 80087a6:	4293      	cmp	r3, r2
 80087a8:	d003      	beq.n	80087b2 <I2C_Master_ISR_DMA+0xce>
        {
          xfermode = hi2c->XferOptions;
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087ae:	617b      	str	r3, [r7, #20]
 80087b0:	e002      	b.n	80087b8 <I2C_Master_ISR_DMA+0xd4>
>>>>>>> main
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
<<<<<<< HEAD
 80084ee:	2380      	movs	r3, #128	@ 0x80
 80084f0:	049b      	lsls	r3, r3, #18
 80084f2:	617b      	str	r3, [r7, #20]
=======
 80087b2:	2380      	movs	r3, #128	@ 0x80
 80087b4:	049b      	lsls	r3, r3, #18
 80087b6:	617b      	str	r3, [r7, #20]
>>>>>>> main
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
<<<<<<< HEAD
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80084f8:	b2da      	uxtb	r2, r3
 80084fa:	697c      	ldr	r4, [r7, #20]
 80084fc:	2312      	movs	r3, #18
 80084fe:	18fb      	adds	r3, r7, r3
 8008500:	8819      	ldrh	r1, [r3, #0]
 8008502:	68f8      	ldr	r0, [r7, #12]
 8008504:	2300      	movs	r3, #0
 8008506:	9300      	str	r3, [sp, #0]
 8008508:	0023      	movs	r3, r4
 800850a:	f001 f83d 	bl	8009588 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008512:	b29a      	uxth	r2, r3
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008518:	1ad3      	subs	r3, r2, r3
 800851a:	b29a      	uxth	r2, r3
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	2241      	movs	r2, #65	@ 0x41
 8008524:	5c9b      	ldrb	r3, [r3, r2]
 8008526:	b2db      	uxtb	r3, r3
 8008528:	2b22      	cmp	r3, #34	@ 0x22
 800852a:	d109      	bne.n	8008540 <I2C_Master_ISR_DMA+0x120>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	681a      	ldr	r2, [r3, #0]
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	2180      	movs	r1, #128	@ 0x80
 8008538:	0209      	lsls	r1, r1, #8
 800853a:	430a      	orrs	r2, r1
 800853c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800853e:	e05f      	b.n	8008600 <I2C_Master_ISR_DMA+0x1e0>
=======
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80087bc:	b2da      	uxtb	r2, r3
 80087be:	697c      	ldr	r4, [r7, #20]
 80087c0:	2312      	movs	r3, #18
 80087c2:	18fb      	adds	r3, r7, r3
 80087c4:	8819      	ldrh	r1, [r3, #0]
 80087c6:	68f8      	ldr	r0, [r7, #12]
 80087c8:	2300      	movs	r3, #0
 80087ca:	9300      	str	r3, [sp, #0]
 80087cc:	0023      	movs	r3, r4
 80087ce:	f001 f83d 	bl	800984c <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80087d6:	b29a      	uxth	r2, r3
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80087dc:	1ad3      	subs	r3, r2, r3
 80087de:	b29a      	uxth	r2, r3
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	2241      	movs	r2, #65	@ 0x41
 80087e8:	5c9b      	ldrb	r3, [r3, r2]
 80087ea:	b2db      	uxtb	r3, r3
 80087ec:	2b22      	cmp	r3, #34	@ 0x22
 80087ee:	d109      	bne.n	8008804 <I2C_Master_ISR_DMA+0x120>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	681a      	ldr	r2, [r3, #0]
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	2180      	movs	r1, #128	@ 0x80
 80087fc:	0209      	lsls	r1, r1, #8
 80087fe:	430a      	orrs	r2, r1
 8008800:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8008802:	e05f      	b.n	80088c4 <I2C_Master_ISR_DMA+0x1e0>
>>>>>>> main
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
<<<<<<< HEAD
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	681a      	ldr	r2, [r3, #0]
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	2180      	movs	r1, #128	@ 0x80
 800854c:	01c9      	lsls	r1, r1, #7
 800854e:	430a      	orrs	r2, r1
 8008550:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8008552:	e055      	b.n	8008600 <I2C_Master_ISR_DMA+0x1e0>
=======
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	681a      	ldr	r2, [r3, #0]
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	2180      	movs	r1, #128	@ 0x80
 8008810:	01c9      	lsls	r1, r1, #7
 8008812:	430a      	orrs	r2, r1
 8008814:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8008816:	e055      	b.n	80088c4 <I2C_Master_ISR_DMA+0x1e0>
>>>>>>> main
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
<<<<<<< HEAD
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	685a      	ldr	r2, [r3, #4]
 800855a:	2380      	movs	r3, #128	@ 0x80
 800855c:	049b      	lsls	r3, r3, #18
 800855e:	401a      	ands	r2, r3
 8008560:	2380      	movs	r3, #128	@ 0x80
 8008562:	049b      	lsls	r3, r3, #18
 8008564:	429a      	cmp	r2, r3
 8008566:	d004      	beq.n	8008572 <I2C_Master_ISR_DMA+0x152>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	0018      	movs	r0, r3
 800856c:	f000 fafa 	bl	8008b64 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8008570:	e046      	b.n	8008600 <I2C_Master_ISR_DMA+0x1e0>
=======
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	685a      	ldr	r2, [r3, #4]
 800881e:	2380      	movs	r3, #128	@ 0x80
 8008820:	049b      	lsls	r3, r3, #18
 8008822:	401a      	ands	r2, r3
 8008824:	2380      	movs	r3, #128	@ 0x80
 8008826:	049b      	lsls	r3, r3, #18
 8008828:	429a      	cmp	r2, r3
 800882a:	d004      	beq.n	8008836 <I2C_Master_ISR_DMA+0x152>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	0018      	movs	r0, r3
 8008830:	f000 fafa 	bl	8008e28 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8008834:	e046      	b.n	80088c4 <I2C_Master_ISR_DMA+0x1e0>
>>>>>>> main
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
<<<<<<< HEAD
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	2140      	movs	r1, #64	@ 0x40
 8008576:	0018      	movs	r0, r3
 8008578:	f000 fde0 	bl	800913c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800857c:	e040      	b.n	8008600 <I2C_Master_ISR_DMA+0x1e0>
=======
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	2140      	movs	r1, #64	@ 0x40
 800883a:	0018      	movs	r0, r3
 800883c:	f000 fde0 	bl	8009400 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8008840:	e040      	b.n	80088c4 <I2C_Master_ISR_DMA+0x1e0>
>>>>>>> main
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
<<<<<<< HEAD
 800857e:	68bb      	ldr	r3, [r7, #8]
 8008580:	2240      	movs	r2, #64	@ 0x40
 8008582:	4013      	ands	r3, r2
 8008584:	d02c      	beq.n	80085e0 <I2C_Master_ISR_DMA+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	2240      	movs	r2, #64	@ 0x40
 800858a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800858c:	d028      	beq.n	80085e0 <I2C_Master_ISR_DMA+0x1c0>
  {
    if (hi2c->XferCount == 0U)
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008592:	b29b      	uxth	r3, r3
 8008594:	2b00      	cmp	r3, #0
 8008596:	d11d      	bne.n	80085d4 <I2C_Master_ISR_DMA+0x1b4>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	685a      	ldr	r2, [r3, #4]
 800859e:	2380      	movs	r3, #128	@ 0x80
 80085a0:	049b      	lsls	r3, r3, #18
 80085a2:	401a      	ands	r2, r3
 80085a4:	2380      	movs	r3, #128	@ 0x80
 80085a6:	049b      	lsls	r3, r3, #18
 80085a8:	429a      	cmp	r2, r3
 80085aa:	d028      	beq.n	80085fe <I2C_Master_ISR_DMA+0x1de>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085b0:	4a18      	ldr	r2, [pc, #96]	@ (8008614 <I2C_Master_ISR_DMA+0x1f4>)
 80085b2:	4293      	cmp	r3, r2
 80085b4:	d109      	bne.n	80085ca <I2C_Master_ISR_DMA+0x1aa>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	685a      	ldr	r2, [r3, #4]
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	2180      	movs	r1, #128	@ 0x80
 80085c2:	01c9      	lsls	r1, r1, #7
 80085c4:	430a      	orrs	r2, r1
 80085c6:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 80085c8:	e019      	b.n	80085fe <I2C_Master_ISR_DMA+0x1de>
=======
 8008842:	68bb      	ldr	r3, [r7, #8]
 8008844:	2240      	movs	r2, #64	@ 0x40
 8008846:	4013      	ands	r3, r2
 8008848:	d02c      	beq.n	80088a4 <I2C_Master_ISR_DMA+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	2240      	movs	r2, #64	@ 0x40
 800884e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8008850:	d028      	beq.n	80088a4 <I2C_Master_ISR_DMA+0x1c0>
  {
    if (hi2c->XferCount == 0U)
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008856:	b29b      	uxth	r3, r3
 8008858:	2b00      	cmp	r3, #0
 800885a:	d11d      	bne.n	8008898 <I2C_Master_ISR_DMA+0x1b4>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	685a      	ldr	r2, [r3, #4]
 8008862:	2380      	movs	r3, #128	@ 0x80
 8008864:	049b      	lsls	r3, r3, #18
 8008866:	401a      	ands	r2, r3
 8008868:	2380      	movs	r3, #128	@ 0x80
 800886a:	049b      	lsls	r3, r3, #18
 800886c:	429a      	cmp	r2, r3
 800886e:	d028      	beq.n	80088c2 <I2C_Master_ISR_DMA+0x1de>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008874:	4a18      	ldr	r2, [pc, #96]	@ (80088d8 <I2C_Master_ISR_DMA+0x1f4>)
 8008876:	4293      	cmp	r3, r2
 8008878:	d109      	bne.n	800888e <I2C_Master_ISR_DMA+0x1aa>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	685a      	ldr	r2, [r3, #4]
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	2180      	movs	r1, #128	@ 0x80
 8008886:	01c9      	lsls	r1, r1, #7
 8008888:	430a      	orrs	r2, r1
 800888a:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800888c:	e019      	b.n	80088c2 <I2C_Master_ISR_DMA+0x1de>
>>>>>>> main
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
<<<<<<< HEAD
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	0018      	movs	r0, r3
 80085ce:	f000 fac9 	bl	8008b64 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 80085d2:	e014      	b.n	80085fe <I2C_Master_ISR_DMA+0x1de>
=======
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	0018      	movs	r0, r3
 8008892:	f000 fac9 	bl	8008e28 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8008896:	e014      	b.n	80088c2 <I2C_Master_ISR_DMA+0x1de>
>>>>>>> main
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
<<<<<<< HEAD
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	2140      	movs	r1, #64	@ 0x40
 80085d8:	0018      	movs	r0, r3
 80085da:	f000 fdaf 	bl	800913c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80085de:	e00e      	b.n	80085fe <I2C_Master_ISR_DMA+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80085e0:	68bb      	ldr	r3, [r7, #8]
 80085e2:	2220      	movs	r2, #32
 80085e4:	4013      	ands	r3, r2
 80085e6:	d00b      	beq.n	8008600 <I2C_Master_ISR_DMA+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2220      	movs	r2, #32
 80085ec:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80085ee:	d007      	beq.n	8008600 <I2C_Master_ISR_DMA+0x1e0>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80085f0:	68ba      	ldr	r2, [r7, #8]
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	0011      	movs	r1, r2
 80085f6:	0018      	movs	r0, r3
 80085f8:	f000 fb5a 	bl	8008cb0 <I2C_ITMasterCplt>
 80085fc:	e000      	b.n	8008600 <I2C_Master_ISR_DMA+0x1e0>
    if (hi2c->XferCount == 0U)
 80085fe:	46c0      	nop			@ (mov r8, r8)
=======
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	2140      	movs	r1, #64	@ 0x40
 800889c:	0018      	movs	r0, r3
 800889e:	f000 fdaf 	bl	8009400 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80088a2:	e00e      	b.n	80088c2 <I2C_Master_ISR_DMA+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80088a4:	68bb      	ldr	r3, [r7, #8]
 80088a6:	2220      	movs	r2, #32
 80088a8:	4013      	ands	r3, r2
 80088aa:	d00b      	beq.n	80088c4 <I2C_Master_ISR_DMA+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2220      	movs	r2, #32
 80088b0:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80088b2:	d007      	beq.n	80088c4 <I2C_Master_ISR_DMA+0x1e0>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80088b4:	68ba      	ldr	r2, [r7, #8]
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	0011      	movs	r1, r2
 80088ba:	0018      	movs	r0, r3
 80088bc:	f000 fb5a 	bl	8008f74 <I2C_ITMasterCplt>
 80088c0:	e000      	b.n	80088c4 <I2C_Master_ISR_DMA+0x1e0>
    if (hi2c->XferCount == 0U)
 80088c2:	46c0      	nop			@ (mov r8, r8)
>>>>>>> main
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
<<<<<<< HEAD
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	2240      	movs	r2, #64	@ 0x40
 8008604:	2100      	movs	r1, #0
 8008606:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008608:	2300      	movs	r3, #0
}
 800860a:	0018      	movs	r0, r3
 800860c:	46bd      	mov	sp, r7
 800860e:	b007      	add	sp, #28
 8008610:	bd90      	pop	{r4, r7, pc}
 8008612:	46c0      	nop			@ (mov r8, r8)
 8008614:	ffff0000 	.word	0xffff0000

08008618 <I2C_Mem_ISR_DMA>:
=======
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	2240      	movs	r2, #64	@ 0x40
 80088c8:	2100      	movs	r1, #0
 80088ca:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80088cc:	2300      	movs	r3, #0
}
 80088ce:	0018      	movs	r0, r3
 80088d0:	46bd      	mov	sp, r7
 80088d2:	b007      	add	sp, #28
 80088d4:	bd90      	pop	{r4, r7, pc}
 80088d6:	46c0      	nop			@ (mov r8, r8)
 80088d8:	ffff0000 	.word	0xffff0000

080088dc <I2C_Mem_ISR_DMA>:
>>>>>>> main
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
<<<<<<< HEAD
 8008618:	b590      	push	{r4, r7, lr}
 800861a:	b089      	sub	sp, #36	@ 0x24
 800861c:	af02      	add	r7, sp, #8
 800861e:	60f8      	str	r0, [r7, #12]
 8008620:	60b9      	str	r1, [r7, #8]
 8008622:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8008624:	4b88      	ldr	r3, [pc, #544]	@ (8008848 <I2C_Mem_ISR_DMA+0x230>)
 8008626:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	2240      	movs	r2, #64	@ 0x40
 800862c:	5c9b      	ldrb	r3, [r3, r2]
 800862e:	2b01      	cmp	r3, #1
 8008630:	d101      	bne.n	8008636 <I2C_Mem_ISR_DMA+0x1e>
 8008632:	2302      	movs	r3, #2
 8008634:	e104      	b.n	8008840 <I2C_Mem_ISR_DMA+0x228>
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	2240      	movs	r2, #64	@ 0x40
 800863a:	2101      	movs	r1, #1
 800863c:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800863e:	68bb      	ldr	r3, [r7, #8]
 8008640:	2210      	movs	r2, #16
 8008642:	4013      	ands	r3, r2
 8008644:	d017      	beq.n	8008676 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	2210      	movs	r2, #16
 800864a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800864c:	d013      	beq.n	8008676 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	2210      	movs	r2, #16
 8008654:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800865a:	2204      	movs	r2, #4
 800865c:	431a      	orrs	r2, r3
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	645a      	str	r2, [r3, #68]	@ 0x44
=======
 80088dc:	b590      	push	{r4, r7, lr}
 80088de:	b089      	sub	sp, #36	@ 0x24
 80088e0:	af02      	add	r7, sp, #8
 80088e2:	60f8      	str	r0, [r7, #12]
 80088e4:	60b9      	str	r1, [r7, #8]
 80088e6:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 80088e8:	4b88      	ldr	r3, [pc, #544]	@ (8008b0c <I2C_Mem_ISR_DMA+0x230>)
 80088ea:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	2240      	movs	r2, #64	@ 0x40
 80088f0:	5c9b      	ldrb	r3, [r3, r2]
 80088f2:	2b01      	cmp	r3, #1
 80088f4:	d101      	bne.n	80088fa <I2C_Mem_ISR_DMA+0x1e>
 80088f6:	2302      	movs	r3, #2
 80088f8:	e104      	b.n	8008b04 <I2C_Mem_ISR_DMA+0x228>
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	2240      	movs	r2, #64	@ 0x40
 80088fe:	2101      	movs	r1, #1
 8008900:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8008902:	68bb      	ldr	r3, [r7, #8]
 8008904:	2210      	movs	r2, #16
 8008906:	4013      	ands	r3, r2
 8008908:	d017      	beq.n	800893a <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	2210      	movs	r2, #16
 800890e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8008910:	d013      	beq.n	800893a <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	2210      	movs	r2, #16
 8008918:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800891e:	2204      	movs	r2, #4
 8008920:	431a      	orrs	r2, r3
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	645a      	str	r2, [r3, #68]	@ 0x44
>>>>>>> main

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
<<<<<<< HEAD
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	2120      	movs	r1, #32
 8008666:	0018      	movs	r0, r3
 8008668:	f000 ffc8 	bl	80095fc <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	0018      	movs	r0, r3
 8008670:	f000 fe8f 	bl	8009392 <I2C_Flush_TXDR>
 8008674:	e0df      	b.n	8008836 <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8008676:	68bb      	ldr	r3, [r7, #8]
 8008678:	2202      	movs	r2, #2
 800867a:	4013      	ands	r3, r2
 800867c:	d00d      	beq.n	800869a <I2C_Mem_ISR_DMA+0x82>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	2202      	movs	r2, #2
 8008682:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8008684:	d009      	beq.n	800869a <I2C_Mem_ISR_DMA+0x82>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	68fa      	ldr	r2, [r7, #12]
 800868c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800868e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	2201      	movs	r2, #1
 8008694:	4252      	negs	r2, r2
 8008696:	651a      	str	r2, [r3, #80]	@ 0x50
 8008698:	e0cd      	b.n	8008836 <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800869a:	68bb      	ldr	r3, [r7, #8]
 800869c:	2280      	movs	r2, #128	@ 0x80
 800869e:	4013      	ands	r3, r2
 80086a0:	d05e      	beq.n	8008760 <I2C_Mem_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	2240      	movs	r2, #64	@ 0x40
 80086a6:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80086a8:	d05a      	beq.n	8008760 <I2C_Mem_ISR_DMA+0x148>
  {
    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	2110      	movs	r1, #16
 80086ae:	0018      	movs	r0, r3
 80086b0:	f000 ffa4 	bl	80095fc <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80086b8:	b29b      	uxth	r3, r3
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d04a      	beq.n	8008754 <I2C_Mem_ISR_DMA+0x13c>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80086c2:	b29b      	uxth	r3, r3
 80086c4:	2bff      	cmp	r3, #255	@ 0xff
 80086c6:	d910      	bls.n	80086ea <I2C_Mem_ISR_DMA+0xd2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	22ff      	movs	r2, #255	@ 0xff
 80086cc:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80086d2:	b299      	uxth	r1, r3
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80086d8:	b2da      	uxtb	r2, r3
 80086da:	2380      	movs	r3, #128	@ 0x80
 80086dc:	045b      	lsls	r3, r3, #17
 80086de:	68f8      	ldr	r0, [r7, #12]
 80086e0:	2400      	movs	r4, #0
 80086e2:	9400      	str	r4, [sp, #0]
 80086e4:	f000 ff50 	bl	8009588 <I2C_TransferConfig>
 80086e8:	e011      	b.n	800870e <I2C_Mem_ISR_DMA+0xf6>
=======
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	2120      	movs	r1, #32
 800892a:	0018      	movs	r0, r3
 800892c:	f000 ffc8 	bl	80098c0 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	0018      	movs	r0, r3
 8008934:	f000 fe8f 	bl	8009656 <I2C_Flush_TXDR>
 8008938:	e0df      	b.n	8008afa <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800893a:	68bb      	ldr	r3, [r7, #8]
 800893c:	2202      	movs	r2, #2
 800893e:	4013      	ands	r3, r2
 8008940:	d00d      	beq.n	800895e <I2C_Mem_ISR_DMA+0x82>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	2202      	movs	r2, #2
 8008946:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8008948:	d009      	beq.n	800895e <I2C_Mem_ISR_DMA+0x82>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	68fa      	ldr	r2, [r7, #12]
 8008950:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8008952:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	2201      	movs	r2, #1
 8008958:	4252      	negs	r2, r2
 800895a:	651a      	str	r2, [r3, #80]	@ 0x50
 800895c:	e0cd      	b.n	8008afa <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800895e:	68bb      	ldr	r3, [r7, #8]
 8008960:	2280      	movs	r2, #128	@ 0x80
 8008962:	4013      	ands	r3, r2
 8008964:	d05e      	beq.n	8008a24 <I2C_Mem_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	2240      	movs	r2, #64	@ 0x40
 800896a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800896c:	d05a      	beq.n	8008a24 <I2C_Mem_ISR_DMA+0x148>
  {
    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	2110      	movs	r1, #16
 8008972:	0018      	movs	r0, r3
 8008974:	f000 ffa4 	bl	80098c0 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800897c:	b29b      	uxth	r3, r3
 800897e:	2b00      	cmp	r3, #0
 8008980:	d04a      	beq.n	8008a18 <I2C_Mem_ISR_DMA+0x13c>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008986:	b29b      	uxth	r3, r3
 8008988:	2bff      	cmp	r3, #255	@ 0xff
 800898a:	d910      	bls.n	80089ae <I2C_Mem_ISR_DMA+0xd2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	22ff      	movs	r2, #255	@ 0xff
 8008990:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008996:	b299      	uxth	r1, r3
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800899c:	b2da      	uxtb	r2, r3
 800899e:	2380      	movs	r3, #128	@ 0x80
 80089a0:	045b      	lsls	r3, r3, #17
 80089a2:	68f8      	ldr	r0, [r7, #12]
 80089a4:	2400      	movs	r4, #0
 80089a6:	9400      	str	r4, [sp, #0]
 80089a8:	f000 ff50 	bl	800984c <I2C_TransferConfig>
 80089ac:	e011      	b.n	80089d2 <I2C_Mem_ISR_DMA+0xf6>
>>>>>>> main
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
<<<<<<< HEAD
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80086ee:	b29a      	uxth	r2, r3
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80086f8:	b299      	uxth	r1, r3
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80086fe:	b2da      	uxtb	r2, r3
 8008700:	2380      	movs	r3, #128	@ 0x80
 8008702:	049b      	lsls	r3, r3, #18
 8008704:	68f8      	ldr	r0, [r7, #12]
 8008706:	2400      	movs	r4, #0
 8008708:	9400      	str	r4, [sp, #0]
 800870a:	f000 ff3d 	bl	8009588 <I2C_TransferConfig>
=======
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80089b2:	b29a      	uxth	r2, r3
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80089bc:	b299      	uxth	r1, r3
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80089c2:	b2da      	uxtb	r2, r3
 80089c4:	2380      	movs	r3, #128	@ 0x80
 80089c6:	049b      	lsls	r3, r3, #18
 80089c8:	68f8      	ldr	r0, [r7, #12]
 80089ca:	2400      	movs	r4, #0
 80089cc:	9400      	str	r4, [sp, #0]
 80089ce:	f000 ff3d 	bl	800984c <I2C_TransferConfig>
>>>>>>> main
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
<<<<<<< HEAD
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008712:	b29a      	uxth	r2, r3
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008718:	1ad3      	subs	r3, r2, r3
 800871a:	b29a      	uxth	r2, r3
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	2241      	movs	r2, #65	@ 0x41
 8008724:	5c9b      	ldrb	r3, [r3, r2]
 8008726:	b2db      	uxtb	r3, r3
 8008728:	2b22      	cmp	r3, #34	@ 0x22
 800872a:	d109      	bne.n	8008740 <I2C_Mem_ISR_DMA+0x128>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	681a      	ldr	r2, [r3, #0]
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	2180      	movs	r1, #128	@ 0x80
 8008738:	0209      	lsls	r1, r1, #8
 800873a:	430a      	orrs	r2, r1
 800873c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800873e:	e07a      	b.n	8008836 <I2C_Mem_ISR_DMA+0x21e>
=======
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80089d6:	b29a      	uxth	r2, r3
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80089dc:	1ad3      	subs	r3, r2, r3
 80089de:	b29a      	uxth	r2, r3
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	2241      	movs	r2, #65	@ 0x41
 80089e8:	5c9b      	ldrb	r3, [r3, r2]
 80089ea:	b2db      	uxtb	r3, r3
 80089ec:	2b22      	cmp	r3, #34	@ 0x22
 80089ee:	d109      	bne.n	8008a04 <I2C_Mem_ISR_DMA+0x128>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	681a      	ldr	r2, [r3, #0]
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	2180      	movs	r1, #128	@ 0x80
 80089fc:	0209      	lsls	r1, r1, #8
 80089fe:	430a      	orrs	r2, r1
 8008a00:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8008a02:	e07a      	b.n	8008afa <I2C_Mem_ISR_DMA+0x21e>
>>>>>>> main
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
<<<<<<< HEAD
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	681a      	ldr	r2, [r3, #0]
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	2180      	movs	r1, #128	@ 0x80
 800874c:	01c9      	lsls	r1, r1, #7
 800874e:	430a      	orrs	r2, r1
 8008750:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8008752:	e070      	b.n	8008836 <I2C_Mem_ISR_DMA+0x21e>
=======
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	681a      	ldr	r2, [r3, #0]
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	2180      	movs	r1, #128	@ 0x80
 8008a10:	01c9      	lsls	r1, r1, #7
 8008a12:	430a      	orrs	r2, r1
 8008a14:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8008a16:	e070      	b.n	8008afa <I2C_Mem_ISR_DMA+0x21e>
>>>>>>> main
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
<<<<<<< HEAD
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	2140      	movs	r1, #64	@ 0x40
 8008758:	0018      	movs	r0, r3
 800875a:	f000 fcef 	bl	800913c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800875e:	e06a      	b.n	8008836 <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8008760:	68bb      	ldr	r3, [r7, #8]
 8008762:	2240      	movs	r2, #64	@ 0x40
 8008764:	4013      	ands	r3, r2
 8008766:	d058      	beq.n	800881a <I2C_Mem_ISR_DMA+0x202>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2240      	movs	r2, #64	@ 0x40
 800876c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800876e:	d054      	beq.n	800881a <I2C_Mem_ISR_DMA+0x202>
  {
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	2241      	movs	r2, #65	@ 0x41
 8008774:	5c9b      	ldrb	r3, [r3, r2]
 8008776:	b2db      	uxtb	r3, r3
 8008778:	2b22      	cmp	r3, #34	@ 0x22
 800877a:	d101      	bne.n	8008780 <I2C_Mem_ISR_DMA+0x168>
    {
      direction = I2C_GENERATE_START_READ;
 800877c:	4b33      	ldr	r3, [pc, #204]	@ (800884c <I2C_Mem_ISR_DMA+0x234>)
 800877e:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008784:	b29b      	uxth	r3, r3
 8008786:	2bff      	cmp	r3, #255	@ 0xff
 8008788:	d911      	bls.n	80087ae <I2C_Mem_ISR_DMA+0x196>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	22ff      	movs	r2, #255	@ 0xff
 800878e:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008794:	b299      	uxth	r1, r3
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800879a:	b2da      	uxtb	r2, r3
 800879c:	2380      	movs	r3, #128	@ 0x80
 800879e:	045c      	lsls	r4, r3, #17
 80087a0:	68f8      	ldr	r0, [r7, #12]
 80087a2:	697b      	ldr	r3, [r7, #20]
 80087a4:	9300      	str	r3, [sp, #0]
 80087a6:	0023      	movs	r3, r4
 80087a8:	f000 feee 	bl	8009588 <I2C_TransferConfig>
 80087ac:	e012      	b.n	80087d4 <I2C_Mem_ISR_DMA+0x1bc>
=======
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	2140      	movs	r1, #64	@ 0x40
 8008a1c:	0018      	movs	r0, r3
 8008a1e:	f000 fcef 	bl	8009400 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8008a22:	e06a      	b.n	8008afa <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8008a24:	68bb      	ldr	r3, [r7, #8]
 8008a26:	2240      	movs	r2, #64	@ 0x40
 8008a28:	4013      	ands	r3, r2
 8008a2a:	d058      	beq.n	8008ade <I2C_Mem_ISR_DMA+0x202>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2240      	movs	r2, #64	@ 0x40
 8008a30:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8008a32:	d054      	beq.n	8008ade <I2C_Mem_ISR_DMA+0x202>
  {
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	2241      	movs	r2, #65	@ 0x41
 8008a38:	5c9b      	ldrb	r3, [r3, r2]
 8008a3a:	b2db      	uxtb	r3, r3
 8008a3c:	2b22      	cmp	r3, #34	@ 0x22
 8008a3e:	d101      	bne.n	8008a44 <I2C_Mem_ISR_DMA+0x168>
    {
      direction = I2C_GENERATE_START_READ;
 8008a40:	4b33      	ldr	r3, [pc, #204]	@ (8008b10 <I2C_Mem_ISR_DMA+0x234>)
 8008a42:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008a48:	b29b      	uxth	r3, r3
 8008a4a:	2bff      	cmp	r3, #255	@ 0xff
 8008a4c:	d911      	bls.n	8008a72 <I2C_Mem_ISR_DMA+0x196>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	22ff      	movs	r2, #255	@ 0xff
 8008a52:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008a58:	b299      	uxth	r1, r3
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008a5e:	b2da      	uxtb	r2, r3
 8008a60:	2380      	movs	r3, #128	@ 0x80
 8008a62:	045c      	lsls	r4, r3, #17
 8008a64:	68f8      	ldr	r0, [r7, #12]
 8008a66:	697b      	ldr	r3, [r7, #20]
 8008a68:	9300      	str	r3, [sp, #0]
 8008a6a:	0023      	movs	r3, r4
 8008a6c:	f000 feee 	bl	800984c <I2C_TransferConfig>
 8008a70:	e012      	b.n	8008a98 <I2C_Mem_ISR_DMA+0x1bc>
>>>>>>> main
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
<<<<<<< HEAD
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80087b2:	b29a      	uxth	r2, r3
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80087bc:	b299      	uxth	r1, r3
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80087c2:	b2da      	uxtb	r2, r3
 80087c4:	2380      	movs	r3, #128	@ 0x80
 80087c6:	049c      	lsls	r4, r3, #18
 80087c8:	68f8      	ldr	r0, [r7, #12]
 80087ca:	697b      	ldr	r3, [r7, #20]
 80087cc:	9300      	str	r3, [sp, #0]
 80087ce:	0023      	movs	r3, r4
 80087d0:	f000 feda 	bl	8009588 <I2C_TransferConfig>
=======
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008a76:	b29a      	uxth	r2, r3
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008a80:	b299      	uxth	r1, r3
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008a86:	b2da      	uxtb	r2, r3
 8008a88:	2380      	movs	r3, #128	@ 0x80
 8008a8a:	049c      	lsls	r4, r3, #18
 8008a8c:	68f8      	ldr	r0, [r7, #12]
 8008a8e:	697b      	ldr	r3, [r7, #20]
 8008a90:	9300      	str	r3, [sp, #0]
 8008a92:	0023      	movs	r3, r4
 8008a94:	f000 feda 	bl	800984c <I2C_TransferConfig>
>>>>>>> main
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
<<<<<<< HEAD
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80087d8:	b29a      	uxth	r2, r3
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80087de:	1ad3      	subs	r3, r2, r3
 80087e0:	b29a      	uxth	r2, r3
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	2241      	movs	r2, #65	@ 0x41
 80087ea:	5c9b      	ldrb	r3, [r3, r2]
 80087ec:	b2db      	uxtb	r3, r3
 80087ee:	2b22      	cmp	r3, #34	@ 0x22
 80087f0:	d109      	bne.n	8008806 <I2C_Mem_ISR_DMA+0x1ee>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	681a      	ldr	r2, [r3, #0]
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	2180      	movs	r1, #128	@ 0x80
 80087fe:	0209      	lsls	r1, r1, #8
 8008800:	430a      	orrs	r2, r1
 8008802:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008804:	e017      	b.n	8008836 <I2C_Mem_ISR_DMA+0x21e>
=======
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008a9c:	b29a      	uxth	r2, r3
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008aa2:	1ad3      	subs	r3, r2, r3
 8008aa4:	b29a      	uxth	r2, r3
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	2241      	movs	r2, #65	@ 0x41
 8008aae:	5c9b      	ldrb	r3, [r3, r2]
 8008ab0:	b2db      	uxtb	r3, r3
 8008ab2:	2b22      	cmp	r3, #34	@ 0x22
 8008ab4:	d109      	bne.n	8008aca <I2C_Mem_ISR_DMA+0x1ee>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	681a      	ldr	r2, [r3, #0]
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	2180      	movs	r1, #128	@ 0x80
 8008ac2:	0209      	lsls	r1, r1, #8
 8008ac4:	430a      	orrs	r2, r1
 8008ac6:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008ac8:	e017      	b.n	8008afa <I2C_Mem_ISR_DMA+0x21e>
>>>>>>> main
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
<<<<<<< HEAD
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	681a      	ldr	r2, [r3, #0]
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	2180      	movs	r1, #128	@ 0x80
 8008812:	01c9      	lsls	r1, r1, #7
 8008814:	430a      	orrs	r2, r1
 8008816:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008818:	e00d      	b.n	8008836 <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800881a:	68bb      	ldr	r3, [r7, #8]
 800881c:	2220      	movs	r2, #32
 800881e:	4013      	ands	r3, r2
 8008820:	d009      	beq.n	8008836 <I2C_Mem_ISR_DMA+0x21e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	2220      	movs	r2, #32
 8008826:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008828:	d005      	beq.n	8008836 <I2C_Mem_ISR_DMA+0x21e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800882a:	68ba      	ldr	r2, [r7, #8]
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	0011      	movs	r1, r2
 8008830:	0018      	movs	r0, r3
 8008832:	f000 fa3d 	bl	8008cb0 <I2C_ITMasterCplt>
=======
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	681a      	ldr	r2, [r3, #0]
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	2180      	movs	r1, #128	@ 0x80
 8008ad6:	01c9      	lsls	r1, r1, #7
 8008ad8:	430a      	orrs	r2, r1
 8008ada:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008adc:	e00d      	b.n	8008afa <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008ade:	68bb      	ldr	r3, [r7, #8]
 8008ae0:	2220      	movs	r2, #32
 8008ae2:	4013      	ands	r3, r2
 8008ae4:	d009      	beq.n	8008afa <I2C_Mem_ISR_DMA+0x21e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	2220      	movs	r2, #32
 8008aea:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008aec:	d005      	beq.n	8008afa <I2C_Mem_ISR_DMA+0x21e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8008aee:	68ba      	ldr	r2, [r7, #8]
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	0011      	movs	r1, r2
 8008af4:	0018      	movs	r0, r3
 8008af6:	f000 fa3d 	bl	8008f74 <I2C_ITMasterCplt>
>>>>>>> main
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
<<<<<<< HEAD
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	2240      	movs	r2, #64	@ 0x40
 800883a:	2100      	movs	r1, #0
 800883c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800883e:	2300      	movs	r3, #0
}
 8008840:	0018      	movs	r0, r3
 8008842:	46bd      	mov	sp, r7
 8008844:	b007      	add	sp, #28
 8008846:	bd90      	pop	{r4, r7, pc}
 8008848:	80002000 	.word	0x80002000
 800884c:	80002400 	.word	0x80002400

08008850 <I2C_Slave_ISR_DMA>:
=======
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	2240      	movs	r2, #64	@ 0x40
 8008afe:	2100      	movs	r1, #0
 8008b00:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008b02:	2300      	movs	r3, #0
}
 8008b04:	0018      	movs	r0, r3
 8008b06:	46bd      	mov	sp, r7
 8008b08:	b007      	add	sp, #28
 8008b0a:	bd90      	pop	{r4, r7, pc}
 8008b0c:	80002000 	.word	0x80002000
 8008b10:	80002400 	.word	0x80002400

08008b14 <I2C_Slave_ISR_DMA>:
>>>>>>> main
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
<<<<<<< HEAD
 8008850:	b580      	push	{r7, lr}
 8008852:	b088      	sub	sp, #32
 8008854:	af00      	add	r7, sp, #0
 8008856:	60f8      	str	r0, [r7, #12]
 8008858:	60b9      	str	r1, [r7, #8]
 800885a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008860:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8008862:	2300      	movs	r3, #0
 8008864:	61fb      	str	r3, [r7, #28]
=======
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b088      	sub	sp, #32
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	60f8      	str	r0, [r7, #12]
 8008b1c:	60b9      	str	r1, [r7, #8]
 8008b1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b24:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8008b26:	2300      	movs	r3, #0
 8008b28:	61fb      	str	r3, [r7, #28]
>>>>>>> main
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
<<<<<<< HEAD
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	2240      	movs	r2, #64	@ 0x40
 800886a:	5c9b      	ldrb	r3, [r3, r2]
 800886c:	2b01      	cmp	r3, #1
 800886e:	d101      	bne.n	8008874 <I2C_Slave_ISR_DMA+0x24>
 8008870:	2302      	movs	r3, #2
 8008872:	e0cd      	b.n	8008a10 <I2C_Slave_ISR_DMA+0x1c0>
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	2240      	movs	r2, #64	@ 0x40
 8008878:	2101      	movs	r1, #1
 800887a:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800887c:	68bb      	ldr	r3, [r7, #8]
 800887e:	2220      	movs	r2, #32
 8008880:	4013      	ands	r3, r2
 8008882:	d009      	beq.n	8008898 <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2220      	movs	r2, #32
 8008888:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800888a:	d005      	beq.n	8008898 <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800888c:	68ba      	ldr	r2, [r7, #8]
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	0011      	movs	r1, r2
 8008892:	0018      	movs	r0, r3
 8008894:	f000 fada 	bl	8008e4c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8008898:	68bb      	ldr	r3, [r7, #8]
 800889a:	2210      	movs	r2, #16
 800889c:	4013      	ands	r3, r2
 800889e:	d100      	bne.n	80088a2 <I2C_Slave_ISR_DMA+0x52>
 80088a0:	e0a3      	b.n	80089ea <I2C_Slave_ISR_DMA+0x19a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2210      	movs	r2, #16
 80088a6:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80088a8:	d100      	bne.n	80088ac <I2C_Slave_ISR_DMA+0x5c>
 80088aa:	e09e      	b.n	80089ea <I2C_Slave_ISR_DMA+0x19a>
=======
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	2240      	movs	r2, #64	@ 0x40
 8008b2e:	5c9b      	ldrb	r3, [r3, r2]
 8008b30:	2b01      	cmp	r3, #1
 8008b32:	d101      	bne.n	8008b38 <I2C_Slave_ISR_DMA+0x24>
 8008b34:	2302      	movs	r3, #2
 8008b36:	e0cd      	b.n	8008cd4 <I2C_Slave_ISR_DMA+0x1c0>
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	2240      	movs	r2, #64	@ 0x40
 8008b3c:	2101      	movs	r1, #1
 8008b3e:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008b40:	68bb      	ldr	r3, [r7, #8]
 8008b42:	2220      	movs	r2, #32
 8008b44:	4013      	ands	r3, r2
 8008b46:	d009      	beq.n	8008b5c <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2220      	movs	r2, #32
 8008b4c:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008b4e:	d005      	beq.n	8008b5c <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8008b50:	68ba      	ldr	r2, [r7, #8]
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	0011      	movs	r1, r2
 8008b56:	0018      	movs	r0, r3
 8008b58:	f000 fada 	bl	8009110 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8008b5c:	68bb      	ldr	r3, [r7, #8]
 8008b5e:	2210      	movs	r2, #16
 8008b60:	4013      	ands	r3, r2
 8008b62:	d100      	bne.n	8008b66 <I2C_Slave_ISR_DMA+0x52>
 8008b64:	e0a3      	b.n	8008cae <I2C_Slave_ISR_DMA+0x19a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	2210      	movs	r2, #16
 8008b6a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8008b6c:	d100      	bne.n	8008b70 <I2C_Slave_ISR_DMA+0x5c>
 8008b6e:	e09e      	b.n	8008cae <I2C_Slave_ISR_DMA+0x19a>
>>>>>>> main
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
<<<<<<< HEAD
 80088ac:	687a      	ldr	r2, [r7, #4]
 80088ae:	2380      	movs	r3, #128	@ 0x80
 80088b0:	01db      	lsls	r3, r3, #7
 80088b2:	4013      	ands	r3, r2
 80088b4:	d105      	bne.n	80088c2 <I2C_Slave_ISR_DMA+0x72>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 80088b6:	687a      	ldr	r2, [r7, #4]
 80088b8:	2380      	movs	r3, #128	@ 0x80
 80088ba:	021b      	lsls	r3, r3, #8
 80088bc:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80088be:	d100      	bne.n	80088c2 <I2C_Slave_ISR_DMA+0x72>
 80088c0:	e08c      	b.n	80089dc <I2C_Slave_ISR_DMA+0x18c>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d00c      	beq.n	80088e4 <I2C_Slave_ISR_DMA+0x94>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 80088ca:	687a      	ldr	r2, [r7, #4]
 80088cc:	2380      	movs	r3, #128	@ 0x80
 80088ce:	021b      	lsls	r3, r3, #8
 80088d0:	4013      	ands	r3, r2
 80088d2:	d007      	beq.n	80088e4 <I2C_Slave_ISR_DMA+0x94>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	685b      	ldr	r3, [r3, #4]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d101      	bne.n	80088e4 <I2C_Slave_ISR_DMA+0x94>
          {
            treatdmanack = 1U;
 80088e0:	2301      	movs	r3, #1
 80088e2:	61fb      	str	r3, [r7, #28]
=======
 8008b70:	687a      	ldr	r2, [r7, #4]
 8008b72:	2380      	movs	r3, #128	@ 0x80
 8008b74:	01db      	lsls	r3, r3, #7
 8008b76:	4013      	ands	r3, r2
 8008b78:	d105      	bne.n	8008b86 <I2C_Slave_ISR_DMA+0x72>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8008b7a:	687a      	ldr	r2, [r7, #4]
 8008b7c:	2380      	movs	r3, #128	@ 0x80
 8008b7e:	021b      	lsls	r3, r3, #8
 8008b80:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8008b82:	d100      	bne.n	8008b86 <I2C_Slave_ISR_DMA+0x72>
 8008b84:	e08c      	b.n	8008ca0 <I2C_Slave_ISR_DMA+0x18c>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d00c      	beq.n	8008ba8 <I2C_Slave_ISR_DMA+0x94>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8008b8e:	687a      	ldr	r2, [r7, #4]
 8008b90:	2380      	movs	r3, #128	@ 0x80
 8008b92:	021b      	lsls	r3, r3, #8
 8008b94:	4013      	ands	r3, r2
 8008b96:	d007      	beq.n	8008ba8 <I2C_Slave_ISR_DMA+0x94>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	685b      	ldr	r3, [r3, #4]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d101      	bne.n	8008ba8 <I2C_Slave_ISR_DMA+0x94>
          {
            treatdmanack = 1U;
 8008ba4:	2301      	movs	r3, #1
 8008ba6:	61fb      	str	r3, [r7, #28]
>>>>>>> main
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
<<<<<<< HEAD
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d00c      	beq.n	8008906 <I2C_Slave_ISR_DMA+0xb6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 80088ec:	687a      	ldr	r2, [r7, #4]
 80088ee:	2380      	movs	r3, #128	@ 0x80
 80088f0:	01db      	lsls	r3, r3, #7
 80088f2:	4013      	ands	r3, r2
 80088f4:	d007      	beq.n	8008906 <I2C_Slave_ISR_DMA+0xb6>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	685b      	ldr	r3, [r3, #4]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d101      	bne.n	8008906 <I2C_Slave_ISR_DMA+0xb6>
          {
            treatdmanack = 1U;
 8008902:	2301      	movs	r3, #1
 8008904:	61fb      	str	r3, [r7, #28]
=======
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d00c      	beq.n	8008bca <I2C_Slave_ISR_DMA+0xb6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8008bb0:	687a      	ldr	r2, [r7, #4]
 8008bb2:	2380      	movs	r3, #128	@ 0x80
 8008bb4:	01db      	lsls	r3, r3, #7
 8008bb6:	4013      	ands	r3, r2
 8008bb8:	d007      	beq.n	8008bca <I2C_Slave_ISR_DMA+0xb6>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	685b      	ldr	r3, [r3, #4]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d101      	bne.n	8008bca <I2C_Slave_ISR_DMA+0xb6>
          {
            treatdmanack = 1U;
 8008bc6:	2301      	movs	r3, #1
 8008bc8:	61fb      	str	r3, [r7, #28]
>>>>>>> main
          }
        }
      }

      if (treatdmanack == 1U)
<<<<<<< HEAD
 8008906:	69fb      	ldr	r3, [r7, #28]
 8008908:	2b01      	cmp	r3, #1
 800890a:	d12d      	bne.n	8008968 <I2C_Slave_ISR_DMA+0x118>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	2241      	movs	r2, #65	@ 0x41
 8008910:	5c9b      	ldrb	r3, [r3, r2]
 8008912:	b2db      	uxtb	r3, r3
 8008914:	2b28      	cmp	r3, #40	@ 0x28
 8008916:	d10b      	bne.n	8008930 <I2C_Slave_ISR_DMA+0xe0>
 8008918:	69ba      	ldr	r2, [r7, #24]
 800891a:	2380      	movs	r3, #128	@ 0x80
 800891c:	049b      	lsls	r3, r3, #18
 800891e:	429a      	cmp	r2, r3
 8008920:	d106      	bne.n	8008930 <I2C_Slave_ISR_DMA+0xe0>
=======
 8008bca:	69fb      	ldr	r3, [r7, #28]
 8008bcc:	2b01      	cmp	r3, #1
 8008bce:	d12d      	bne.n	8008c2c <I2C_Slave_ISR_DMA+0x118>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	2241      	movs	r2, #65	@ 0x41
 8008bd4:	5c9b      	ldrb	r3, [r3, r2]
 8008bd6:	b2db      	uxtb	r3, r3
 8008bd8:	2b28      	cmp	r3, #40	@ 0x28
 8008bda:	d10b      	bne.n	8008bf4 <I2C_Slave_ISR_DMA+0xe0>
 8008bdc:	69ba      	ldr	r2, [r7, #24]
 8008bde:	2380      	movs	r3, #128	@ 0x80
 8008be0:	049b      	lsls	r3, r3, #18
 8008be2:	429a      	cmp	r2, r3
 8008be4:	d106      	bne.n	8008bf4 <I2C_Slave_ISR_DMA+0xe0>
>>>>>>> main
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
<<<<<<< HEAD
 8008922:	68ba      	ldr	r2, [r7, #8]
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	0011      	movs	r1, r2
 8008928:	0018      	movs	r0, r3
 800892a:	f000 fbaf 	bl	800908c <I2C_ITListenCplt>
 800892e:	e054      	b.n	80089da <I2C_Slave_ISR_DMA+0x18a>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	2241      	movs	r2, #65	@ 0x41
 8008934:	5c9b      	ldrb	r3, [r3, r2]
 8008936:	b2db      	uxtb	r3, r3
 8008938:	2b29      	cmp	r3, #41	@ 0x29
 800893a:	d110      	bne.n	800895e <I2C_Slave_ISR_DMA+0x10e>
 800893c:	69bb      	ldr	r3, [r7, #24]
 800893e:	4a36      	ldr	r2, [pc, #216]	@ (8008a18 <I2C_Slave_ISR_DMA+0x1c8>)
 8008940:	4293      	cmp	r3, r2
 8008942:	d00c      	beq.n	800895e <I2C_Slave_ISR_DMA+0x10e>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	2210      	movs	r2, #16
 800894a:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	0018      	movs	r0, r3
 8008950:	f000 fd1f 	bl	8009392 <I2C_Flush_TXDR>
=======
 8008be6:	68ba      	ldr	r2, [r7, #8]
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	0011      	movs	r1, r2
 8008bec:	0018      	movs	r0, r3
 8008bee:	f000 fbaf 	bl	8009350 <I2C_ITListenCplt>
 8008bf2:	e054      	b.n	8008c9e <I2C_Slave_ISR_DMA+0x18a>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	2241      	movs	r2, #65	@ 0x41
 8008bf8:	5c9b      	ldrb	r3, [r3, r2]
 8008bfa:	b2db      	uxtb	r3, r3
 8008bfc:	2b29      	cmp	r3, #41	@ 0x29
 8008bfe:	d110      	bne.n	8008c22 <I2C_Slave_ISR_DMA+0x10e>
 8008c00:	69bb      	ldr	r3, [r7, #24]
 8008c02:	4a36      	ldr	r2, [pc, #216]	@ (8008cdc <I2C_Slave_ISR_DMA+0x1c8>)
 8008c04:	4293      	cmp	r3, r2
 8008c06:	d00c      	beq.n	8008c22 <I2C_Slave_ISR_DMA+0x10e>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	2210      	movs	r2, #16
 8008c0e:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	0018      	movs	r0, r3
 8008c14:	f000 fd1f 	bl	8009656 <I2C_Flush_TXDR>
>>>>>>> main

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
<<<<<<< HEAD
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	0018      	movs	r0, r3
 8008958:	f000 f946 	bl	8008be8 <I2C_ITSlaveSeqCplt>
 800895c:	e03d      	b.n	80089da <I2C_Slave_ISR_DMA+0x18a>
=======
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	0018      	movs	r0, r3
 8008c1c:	f000 f946 	bl	8008eac <I2C_ITSlaveSeqCplt>
 8008c20:	e03d      	b.n	8008c9e <I2C_Slave_ISR_DMA+0x18a>
>>>>>>> main
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
<<<<<<< HEAD
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	2210      	movs	r2, #16
 8008964:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8008966:	e03e      	b.n	80089e6 <I2C_Slave_ISR_DMA+0x196>
=======
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	2210      	movs	r2, #16
 8008c28:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8008c2a:	e03e      	b.n	8008caa <I2C_Slave_ISR_DMA+0x196>
>>>>>>> main
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
<<<<<<< HEAD
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	2210      	movs	r2, #16
 800896e:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008974:	2204      	movs	r2, #4
 8008976:	431a      	orrs	r2, r3
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800897c:	2317      	movs	r3, #23
 800897e:	18fb      	adds	r3, r7, r3
 8008980:	68fa      	ldr	r2, [r7, #12]
 8008982:	2141      	movs	r1, #65	@ 0x41
 8008984:	5c52      	ldrb	r2, [r2, r1]
 8008986:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8008988:	69bb      	ldr	r3, [r7, #24]
 800898a:	2b00      	cmp	r3, #0
 800898c:	d004      	beq.n	8008998 <I2C_Slave_ISR_DMA+0x148>
 800898e:	69ba      	ldr	r2, [r7, #24]
 8008990:	2380      	movs	r3, #128	@ 0x80
 8008992:	045b      	lsls	r3, r3, #17
 8008994:	429a      	cmp	r2, r3
 8008996:	d126      	bne.n	80089e6 <I2C_Slave_ISR_DMA+0x196>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8008998:	2217      	movs	r2, #23
 800899a:	18bb      	adds	r3, r7, r2
 800899c:	781b      	ldrb	r3, [r3, #0]
 800899e:	2b21      	cmp	r3, #33	@ 0x21
 80089a0:	d003      	beq.n	80089aa <I2C_Slave_ISR_DMA+0x15a>
 80089a2:	18bb      	adds	r3, r7, r2
 80089a4:	781b      	ldrb	r3, [r3, #0]
 80089a6:	2b29      	cmp	r3, #41	@ 0x29
 80089a8:	d103      	bne.n	80089b2 <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	2221      	movs	r2, #33	@ 0x21
 80089ae:	631a      	str	r2, [r3, #48]	@ 0x30
 80089b0:	e00b      	b.n	80089ca <I2C_Slave_ISR_DMA+0x17a>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80089b2:	2217      	movs	r2, #23
 80089b4:	18bb      	adds	r3, r7, r2
 80089b6:	781b      	ldrb	r3, [r3, #0]
 80089b8:	2b22      	cmp	r3, #34	@ 0x22
 80089ba:	d003      	beq.n	80089c4 <I2C_Slave_ISR_DMA+0x174>
 80089bc:	18bb      	adds	r3, r7, r2
 80089be:	781b      	ldrb	r3, [r3, #0]
 80089c0:	2b2a      	cmp	r3, #42	@ 0x2a
 80089c2:	d102      	bne.n	80089ca <I2C_Slave_ISR_DMA+0x17a>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	2222      	movs	r2, #34	@ 0x22
 80089c8:	631a      	str	r2, [r3, #48]	@ 0x30
=======
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	2210      	movs	r2, #16
 8008c32:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c38:	2204      	movs	r2, #4
 8008c3a:	431a      	orrs	r2, r3
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8008c40:	2317      	movs	r3, #23
 8008c42:	18fb      	adds	r3, r7, r3
 8008c44:	68fa      	ldr	r2, [r7, #12]
 8008c46:	2141      	movs	r1, #65	@ 0x41
 8008c48:	5c52      	ldrb	r2, [r2, r1]
 8008c4a:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8008c4c:	69bb      	ldr	r3, [r7, #24]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d004      	beq.n	8008c5c <I2C_Slave_ISR_DMA+0x148>
 8008c52:	69ba      	ldr	r2, [r7, #24]
 8008c54:	2380      	movs	r3, #128	@ 0x80
 8008c56:	045b      	lsls	r3, r3, #17
 8008c58:	429a      	cmp	r2, r3
 8008c5a:	d126      	bne.n	8008caa <I2C_Slave_ISR_DMA+0x196>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8008c5c:	2217      	movs	r2, #23
 8008c5e:	18bb      	adds	r3, r7, r2
 8008c60:	781b      	ldrb	r3, [r3, #0]
 8008c62:	2b21      	cmp	r3, #33	@ 0x21
 8008c64:	d003      	beq.n	8008c6e <I2C_Slave_ISR_DMA+0x15a>
 8008c66:	18bb      	adds	r3, r7, r2
 8008c68:	781b      	ldrb	r3, [r3, #0]
 8008c6a:	2b29      	cmp	r3, #41	@ 0x29
 8008c6c:	d103      	bne.n	8008c76 <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	2221      	movs	r2, #33	@ 0x21
 8008c72:	631a      	str	r2, [r3, #48]	@ 0x30
 8008c74:	e00b      	b.n	8008c8e <I2C_Slave_ISR_DMA+0x17a>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8008c76:	2217      	movs	r2, #23
 8008c78:	18bb      	adds	r3, r7, r2
 8008c7a:	781b      	ldrb	r3, [r3, #0]
 8008c7c:	2b22      	cmp	r3, #34	@ 0x22
 8008c7e:	d003      	beq.n	8008c88 <I2C_Slave_ISR_DMA+0x174>
 8008c80:	18bb      	adds	r3, r7, r2
 8008c82:	781b      	ldrb	r3, [r3, #0]
 8008c84:	2b2a      	cmp	r3, #42	@ 0x2a
 8008c86:	d102      	bne.n	8008c8e <I2C_Slave_ISR_DMA+0x17a>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	2222      	movs	r2, #34	@ 0x22
 8008c8c:	631a      	str	r2, [r3, #48]	@ 0x30
>>>>>>> main
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
<<<<<<< HEAD
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	0011      	movs	r1, r2
 80089d2:	0018      	movs	r0, r3
 80089d4:	f000 fbb2 	bl	800913c <I2C_ITError>
      if (treatdmanack == 1U)
 80089d8:	e005      	b.n	80089e6 <I2C_Slave_ISR_DMA+0x196>
 80089da:	e004      	b.n	80089e6 <I2C_Slave_ISR_DMA+0x196>
=======
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	0011      	movs	r1, r2
 8008c96:	0018      	movs	r0, r3
 8008c98:	f000 fbb2 	bl	8009400 <I2C_ITError>
      if (treatdmanack == 1U)
 8008c9c:	e005      	b.n	8008caa <I2C_Slave_ISR_DMA+0x196>
 8008c9e:	e004      	b.n	8008caa <I2C_Slave_ISR_DMA+0x196>
>>>>>>> main
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
<<<<<<< HEAD
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	2210      	movs	r2, #16
 80089e2:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80089e4:	e00f      	b.n	8008a06 <I2C_Slave_ISR_DMA+0x1b6>
      if (treatdmanack == 1U)
 80089e6:	46c0      	nop			@ (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80089e8:	e00d      	b.n	8008a06 <I2C_Slave_ISR_DMA+0x1b6>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80089ea:	68bb      	ldr	r3, [r7, #8]
 80089ec:	2208      	movs	r2, #8
 80089ee:	4013      	ands	r3, r2
 80089f0:	d009      	beq.n	8008a06 <I2C_Slave_ISR_DMA+0x1b6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	2208      	movs	r2, #8
 80089f6:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80089f8:	d005      	beq.n	8008a06 <I2C_Slave_ISR_DMA+0x1b6>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 80089fa:	68ba      	ldr	r2, [r7, #8]
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	0011      	movs	r1, r2
 8008a00:	0018      	movs	r0, r3
 8008a02:	f000 f80b 	bl	8008a1c <I2C_ITAddrCplt>
=======
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	2210      	movs	r2, #16
 8008ca6:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8008ca8:	e00f      	b.n	8008cca <I2C_Slave_ISR_DMA+0x1b6>
      if (treatdmanack == 1U)
 8008caa:	46c0      	nop			@ (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8008cac:	e00d      	b.n	8008cca <I2C_Slave_ISR_DMA+0x1b6>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8008cae:	68bb      	ldr	r3, [r7, #8]
 8008cb0:	2208      	movs	r2, #8
 8008cb2:	4013      	ands	r3, r2
 8008cb4:	d009      	beq.n	8008cca <I2C_Slave_ISR_DMA+0x1b6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	2208      	movs	r2, #8
 8008cba:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8008cbc:	d005      	beq.n	8008cca <I2C_Slave_ISR_DMA+0x1b6>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8008cbe:	68ba      	ldr	r2, [r7, #8]
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	0011      	movs	r1, r2
 8008cc4:	0018      	movs	r0, r3
 8008cc6:	f000 f80b 	bl	8008ce0 <I2C_ITAddrCplt>
>>>>>>> main
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
<<<<<<< HEAD
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	2240      	movs	r2, #64	@ 0x40
 8008a0a:	2100      	movs	r1, #0
 8008a0c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008a0e:	2300      	movs	r3, #0
}
 8008a10:	0018      	movs	r0, r3
 8008a12:	46bd      	mov	sp, r7
 8008a14:	b008      	add	sp, #32
 8008a16:	bd80      	pop	{r7, pc}
 8008a18:	ffff0000 	.word	0xffff0000

08008a1c <I2C_ITAddrCplt>:
=======
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	2240      	movs	r2, #64	@ 0x40
 8008cce:	2100      	movs	r1, #0
 8008cd0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008cd2:	2300      	movs	r3, #0
}
 8008cd4:	0018      	movs	r0, r3
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	b008      	add	sp, #32
 8008cda:	bd80      	pop	{r7, pc}
 8008cdc:	ffff0000 	.word	0xffff0000

08008ce0 <I2C_ITAddrCplt>:
>>>>>>> main
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
<<<<<<< HEAD
 8008a1c:	b5b0      	push	{r4, r5, r7, lr}
 8008a1e:	b084      	sub	sp, #16
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
 8008a24:	6039      	str	r1, [r7, #0]
=======
 8008ce0:	b5b0      	push	{r4, r5, r7, lr}
 8008ce2:	b084      	sub	sp, #16
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
 8008ce8:	6039      	str	r1, [r7, #0]
>>>>>>> main

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
<<<<<<< HEAD
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	2241      	movs	r2, #65	@ 0x41
 8008a2a:	5c9b      	ldrb	r3, [r3, r2]
 8008a2c:	b2db      	uxtb	r3, r3
 8008a2e:	001a      	movs	r2, r3
 8008a30:	2328      	movs	r3, #40	@ 0x28
 8008a32:	4013      	ands	r3, r2
 8008a34:	2b28      	cmp	r3, #40	@ 0x28
 8008a36:	d000      	beq.n	8008a3a <I2C_ITAddrCplt+0x1e>
 8008a38:	e088      	b.n	8008b4c <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	699b      	ldr	r3, [r3, #24]
 8008a40:	0c1b      	lsrs	r3, r3, #16
 8008a42:	b2da      	uxtb	r2, r3
 8008a44:	250f      	movs	r5, #15
 8008a46:	197b      	adds	r3, r7, r5
 8008a48:	2101      	movs	r1, #1
 8008a4a:	400a      	ands	r2, r1
 8008a4c:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	699b      	ldr	r3, [r3, #24]
 8008a54:	0c1b      	lsrs	r3, r3, #16
 8008a56:	b29a      	uxth	r2, r3
 8008a58:	200c      	movs	r0, #12
 8008a5a:	183b      	adds	r3, r7, r0
 8008a5c:	21fe      	movs	r1, #254	@ 0xfe
 8008a5e:	400a      	ands	r2, r1
 8008a60:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	689b      	ldr	r3, [r3, #8]
 8008a68:	b29a      	uxth	r2, r3
 8008a6a:	240a      	movs	r4, #10
 8008a6c:	193b      	adds	r3, r7, r4
 8008a6e:	0592      	lsls	r2, r2, #22
 8008a70:	0d92      	lsrs	r2, r2, #22
 8008a72:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	68db      	ldr	r3, [r3, #12]
 8008a7a:	b29a      	uxth	r2, r3
 8008a7c:	2308      	movs	r3, #8
 8008a7e:	18fb      	adds	r3, r7, r3
 8008a80:	21fe      	movs	r1, #254	@ 0xfe
 8008a82:	400a      	ands	r2, r1
 8008a84:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	68db      	ldr	r3, [r3, #12]
 8008a8a:	2b02      	cmp	r3, #2
 8008a8c:	d148      	bne.n	8008b20 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8008a8e:	0021      	movs	r1, r4
 8008a90:	187b      	adds	r3, r7, r1
 8008a92:	881b      	ldrh	r3, [r3, #0]
 8008a94:	09db      	lsrs	r3, r3, #7
 8008a96:	b29a      	uxth	r2, r3
 8008a98:	183b      	adds	r3, r7, r0
 8008a9a:	881b      	ldrh	r3, [r3, #0]
 8008a9c:	4053      	eors	r3, r2
 8008a9e:	b29b      	uxth	r3, r3
 8008aa0:	001a      	movs	r2, r3
 8008aa2:	2306      	movs	r3, #6
 8008aa4:	4013      	ands	r3, r2
 8008aa6:	d120      	bne.n	8008aea <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8008aa8:	183b      	adds	r3, r7, r0
 8008aaa:	187a      	adds	r2, r7, r1
 8008aac:	8812      	ldrh	r2, [r2, #0]
 8008aae:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008ab4:	1c5a      	adds	r2, r3, #1
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008abe:	2b02      	cmp	r3, #2
 8008ac0:	d14c      	bne.n	8008b5c <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	2208      	movs	r2, #8
 8008ace:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	2240      	movs	r2, #64	@ 0x40
 8008ad4:	2100      	movs	r1, #0
 8008ad6:	5499      	strb	r1, [r3, r2]
=======
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	2241      	movs	r2, #65	@ 0x41
 8008cee:	5c9b      	ldrb	r3, [r3, r2]
 8008cf0:	b2db      	uxtb	r3, r3
 8008cf2:	001a      	movs	r2, r3
 8008cf4:	2328      	movs	r3, #40	@ 0x28
 8008cf6:	4013      	ands	r3, r2
 8008cf8:	2b28      	cmp	r3, #40	@ 0x28
 8008cfa:	d000      	beq.n	8008cfe <I2C_ITAddrCplt+0x1e>
 8008cfc:	e088      	b.n	8008e10 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	699b      	ldr	r3, [r3, #24]
 8008d04:	0c1b      	lsrs	r3, r3, #16
 8008d06:	b2da      	uxtb	r2, r3
 8008d08:	250f      	movs	r5, #15
 8008d0a:	197b      	adds	r3, r7, r5
 8008d0c:	2101      	movs	r1, #1
 8008d0e:	400a      	ands	r2, r1
 8008d10:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	699b      	ldr	r3, [r3, #24]
 8008d18:	0c1b      	lsrs	r3, r3, #16
 8008d1a:	b29a      	uxth	r2, r3
 8008d1c:	200c      	movs	r0, #12
 8008d1e:	183b      	adds	r3, r7, r0
 8008d20:	21fe      	movs	r1, #254	@ 0xfe
 8008d22:	400a      	ands	r2, r1
 8008d24:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	689b      	ldr	r3, [r3, #8]
 8008d2c:	b29a      	uxth	r2, r3
 8008d2e:	240a      	movs	r4, #10
 8008d30:	193b      	adds	r3, r7, r4
 8008d32:	0592      	lsls	r2, r2, #22
 8008d34:	0d92      	lsrs	r2, r2, #22
 8008d36:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	68db      	ldr	r3, [r3, #12]
 8008d3e:	b29a      	uxth	r2, r3
 8008d40:	2308      	movs	r3, #8
 8008d42:	18fb      	adds	r3, r7, r3
 8008d44:	21fe      	movs	r1, #254	@ 0xfe
 8008d46:	400a      	ands	r2, r1
 8008d48:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	68db      	ldr	r3, [r3, #12]
 8008d4e:	2b02      	cmp	r3, #2
 8008d50:	d148      	bne.n	8008de4 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8008d52:	0021      	movs	r1, r4
 8008d54:	187b      	adds	r3, r7, r1
 8008d56:	881b      	ldrh	r3, [r3, #0]
 8008d58:	09db      	lsrs	r3, r3, #7
 8008d5a:	b29a      	uxth	r2, r3
 8008d5c:	183b      	adds	r3, r7, r0
 8008d5e:	881b      	ldrh	r3, [r3, #0]
 8008d60:	4053      	eors	r3, r2
 8008d62:	b29b      	uxth	r3, r3
 8008d64:	001a      	movs	r2, r3
 8008d66:	2306      	movs	r3, #6
 8008d68:	4013      	ands	r3, r2
 8008d6a:	d120      	bne.n	8008dae <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8008d6c:	183b      	adds	r3, r7, r0
 8008d6e:	187a      	adds	r2, r7, r1
 8008d70:	8812      	ldrh	r2, [r2, #0]
 8008d72:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008d78:	1c5a      	adds	r2, r3, #1
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008d82:	2b02      	cmp	r3, #2
 8008d84:	d14c      	bne.n	8008e20 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	2200      	movs	r2, #0
 8008d8a:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	2208      	movs	r2, #8
 8008d92:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	2240      	movs	r2, #64	@ 0x40
 8008d98:	2100      	movs	r1, #0
 8008d9a:	5499      	strb	r1, [r3, r2]
>>>>>>> main

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
<<<<<<< HEAD
 8008ad8:	183b      	adds	r3, r7, r0
 8008ada:	881a      	ldrh	r2, [r3, #0]
 8008adc:	197b      	adds	r3, r7, r5
 8008ade:	7819      	ldrb	r1, [r3, #0]
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	0018      	movs	r0, r3
 8008ae4:	f7ff fa39 	bl	8007f5a <HAL_I2C_AddrCallback>
=======
 8008d9c:	183b      	adds	r3, r7, r0
 8008d9e:	881a      	ldrh	r2, [r3, #0]
 8008da0:	197b      	adds	r3, r7, r5
 8008da2:	7819      	ldrb	r1, [r3, #0]
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	0018      	movs	r0, r3
 8008da8:	f7ff fa39 	bl	800821e <HAL_I2C_AddrCallback>
>>>>>>> main
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
<<<<<<< HEAD
 8008ae8:	e038      	b.n	8008b5c <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 8008aea:	240c      	movs	r4, #12
 8008aec:	193b      	adds	r3, r7, r4
 8008aee:	2208      	movs	r2, #8
 8008af0:	18ba      	adds	r2, r7, r2
 8008af2:	8812      	ldrh	r2, [r2, #0]
 8008af4:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8008af6:	2380      	movs	r3, #128	@ 0x80
 8008af8:	021a      	lsls	r2, r3, #8
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	0011      	movs	r1, r2
 8008afe:	0018      	movs	r0, r3
 8008b00:	f000 fe0a 	bl	8009718 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	2240      	movs	r2, #64	@ 0x40
 8008b08:	2100      	movs	r1, #0
 8008b0a:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008b0c:	193b      	adds	r3, r7, r4
 8008b0e:	881a      	ldrh	r2, [r3, #0]
 8008b10:	230f      	movs	r3, #15
 8008b12:	18fb      	adds	r3, r7, r3
 8008b14:	7819      	ldrb	r1, [r3, #0]
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	0018      	movs	r0, r3
 8008b1a:	f7ff fa1e 	bl	8007f5a <HAL_I2C_AddrCallback>
}
 8008b1e:	e01d      	b.n	8008b5c <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8008b20:	2380      	movs	r3, #128	@ 0x80
 8008b22:	021a      	lsls	r2, r3, #8
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	0011      	movs	r1, r2
 8008b28:	0018      	movs	r0, r3
 8008b2a:	f000 fdf5 	bl	8009718 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	2240      	movs	r2, #64	@ 0x40
 8008b32:	2100      	movs	r1, #0
 8008b34:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008b36:	230c      	movs	r3, #12
 8008b38:	18fb      	adds	r3, r7, r3
 8008b3a:	881a      	ldrh	r2, [r3, #0]
 8008b3c:	230f      	movs	r3, #15
 8008b3e:	18fb      	adds	r3, r7, r3
 8008b40:	7819      	ldrb	r1, [r3, #0]
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	0018      	movs	r0, r3
 8008b46:	f7ff fa08 	bl	8007f5a <HAL_I2C_AddrCallback>
}
 8008b4a:	e007      	b.n	8008b5c <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	2208      	movs	r2, #8
 8008b52:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	2240      	movs	r2, #64	@ 0x40
 8008b58:	2100      	movs	r1, #0
 8008b5a:	5499      	strb	r1, [r3, r2]
}
 8008b5c:	46c0      	nop			@ (mov r8, r8)
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	b004      	add	sp, #16
 8008b62:	bdb0      	pop	{r4, r5, r7, pc}

08008b64 <I2C_ITMasterSeqCplt>:
=======
 8008dac:	e038      	b.n	8008e20 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 8008dae:	240c      	movs	r4, #12
 8008db0:	193b      	adds	r3, r7, r4
 8008db2:	2208      	movs	r2, #8
 8008db4:	18ba      	adds	r2, r7, r2
 8008db6:	8812      	ldrh	r2, [r2, #0]
 8008db8:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8008dba:	2380      	movs	r3, #128	@ 0x80
 8008dbc:	021a      	lsls	r2, r3, #8
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	0011      	movs	r1, r2
 8008dc2:	0018      	movs	r0, r3
 8008dc4:	f000 fe0a 	bl	80099dc <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	2240      	movs	r2, #64	@ 0x40
 8008dcc:	2100      	movs	r1, #0
 8008dce:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008dd0:	193b      	adds	r3, r7, r4
 8008dd2:	881a      	ldrh	r2, [r3, #0]
 8008dd4:	230f      	movs	r3, #15
 8008dd6:	18fb      	adds	r3, r7, r3
 8008dd8:	7819      	ldrb	r1, [r3, #0]
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	0018      	movs	r0, r3
 8008dde:	f7ff fa1e 	bl	800821e <HAL_I2C_AddrCallback>
}
 8008de2:	e01d      	b.n	8008e20 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8008de4:	2380      	movs	r3, #128	@ 0x80
 8008de6:	021a      	lsls	r2, r3, #8
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	0011      	movs	r1, r2
 8008dec:	0018      	movs	r0, r3
 8008dee:	f000 fdf5 	bl	80099dc <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	2240      	movs	r2, #64	@ 0x40
 8008df6:	2100      	movs	r1, #0
 8008df8:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008dfa:	230c      	movs	r3, #12
 8008dfc:	18fb      	adds	r3, r7, r3
 8008dfe:	881a      	ldrh	r2, [r3, #0]
 8008e00:	230f      	movs	r3, #15
 8008e02:	18fb      	adds	r3, r7, r3
 8008e04:	7819      	ldrb	r1, [r3, #0]
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	0018      	movs	r0, r3
 8008e0a:	f7ff fa08 	bl	800821e <HAL_I2C_AddrCallback>
}
 8008e0e:	e007      	b.n	8008e20 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	2208      	movs	r2, #8
 8008e16:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	2240      	movs	r2, #64	@ 0x40
 8008e1c:	2100      	movs	r1, #0
 8008e1e:	5499      	strb	r1, [r3, r2]
}
 8008e20:	46c0      	nop			@ (mov r8, r8)
 8008e22:	46bd      	mov	sp, r7
 8008e24:	b004      	add	sp, #16
 8008e26:	bdb0      	pop	{r4, r5, r7, pc}

08008e28 <I2C_ITMasterSeqCplt>:
>>>>>>> main
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
<<<<<<< HEAD
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b082      	sub	sp, #8
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2242      	movs	r2, #66	@ 0x42
 8008b70:	2100      	movs	r1, #0
 8008b72:	5499      	strb	r1, [r3, r2]
=======
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b082      	sub	sp, #8
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	2242      	movs	r2, #66	@ 0x42
 8008e34:	2100      	movs	r1, #0
 8008e36:	5499      	strb	r1, [r3, r2]
>>>>>>> main

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
<<<<<<< HEAD
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2241      	movs	r2, #65	@ 0x41
 8008b78:	5c9b      	ldrb	r3, [r3, r2]
 8008b7a:	b2db      	uxtb	r3, r3
 8008b7c:	2b21      	cmp	r3, #33	@ 0x21
 8008b7e:	d117      	bne.n	8008bb0 <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	2241      	movs	r2, #65	@ 0x41
 8008b84:	2120      	movs	r1, #32
 8008b86:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	2211      	movs	r2, #17
 8008b8c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	2200      	movs	r2, #0
 8008b92:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2101      	movs	r1, #1
 8008b98:	0018      	movs	r0, r3
 8008b9a:	f000 fdbd 	bl	8009718 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	2240      	movs	r2, #64	@ 0x40
 8008ba2:	2100      	movs	r1, #0
 8008ba4:	5499      	strb	r1, [r3, r2]
=======
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	2241      	movs	r2, #65	@ 0x41
 8008e3c:	5c9b      	ldrb	r3, [r3, r2]
 8008e3e:	b2db      	uxtb	r3, r3
 8008e40:	2b21      	cmp	r3, #33	@ 0x21
 8008e42:	d117      	bne.n	8008e74 <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	2241      	movs	r2, #65	@ 0x41
 8008e48:	2120      	movs	r1, #32
 8008e4a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	2211      	movs	r2, #17
 8008e50:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	2200      	movs	r2, #0
 8008e56:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	2101      	movs	r1, #1
 8008e5c:	0018      	movs	r0, r3
 8008e5e:	f000 fdbd 	bl	80099dc <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	2240      	movs	r2, #64	@ 0x40
 8008e66:	2100      	movs	r1, #0
 8008e68:	5499      	strb	r1, [r3, r2]
>>>>>>> main

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
<<<<<<< HEAD
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	0018      	movs	r0, r3
 8008baa:	f7ff f9b6 	bl	8007f1a <HAL_I2C_MasterTxCpltCallback>
=======
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	0018      	movs	r0, r3
 8008e6e:	f7ff f9b6 	bl	80081de <HAL_I2C_MasterTxCpltCallback>
>>>>>>> main
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
<<<<<<< HEAD
 8008bae:	e016      	b.n	8008bde <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	2241      	movs	r2, #65	@ 0x41
 8008bb4:	2120      	movs	r1, #32
 8008bb6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	2212      	movs	r2, #18
 8008bbc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	2200      	movs	r2, #0
 8008bc2:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	2102      	movs	r1, #2
 8008bc8:	0018      	movs	r0, r3
 8008bca:	f000 fda5 	bl	8009718 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	2240      	movs	r2, #64	@ 0x40
 8008bd2:	2100      	movs	r1, #0
 8008bd4:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	0018      	movs	r0, r3
 8008bda:	f7ff f9a6 	bl	8007f2a <HAL_I2C_MasterRxCpltCallback>
}
 8008bde:	46c0      	nop			@ (mov r8, r8)
 8008be0:	46bd      	mov	sp, r7
 8008be2:	b002      	add	sp, #8
 8008be4:	bd80      	pop	{r7, pc}
	...

08008be8 <I2C_ITSlaveSeqCplt>:
=======
 8008e72:	e016      	b.n	8008ea2 <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	2241      	movs	r2, #65	@ 0x41
 8008e78:	2120      	movs	r1, #32
 8008e7a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	2212      	movs	r2, #18
 8008e80:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	2200      	movs	r2, #0
 8008e86:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	2102      	movs	r1, #2
 8008e8c:	0018      	movs	r0, r3
 8008e8e:	f000 fda5 	bl	80099dc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	2240      	movs	r2, #64	@ 0x40
 8008e96:	2100      	movs	r1, #0
 8008e98:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	0018      	movs	r0, r3
 8008e9e:	f7ff f9a6 	bl	80081ee <HAL_I2C_MasterRxCpltCallback>
}
 8008ea2:	46c0      	nop			@ (mov r8, r8)
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	b002      	add	sp, #8
 8008ea8:	bd80      	pop	{r7, pc}
	...

08008eac <I2C_ITSlaveSeqCplt>:
>>>>>>> main
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
<<<<<<< HEAD
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b084      	sub	sp, #16
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	2242      	movs	r2, #66	@ 0x42
 8008bfc:	2100      	movs	r1, #0
 8008bfe:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8008c00:	68fa      	ldr	r2, [r7, #12]
 8008c02:	2380      	movs	r3, #128	@ 0x80
 8008c04:	01db      	lsls	r3, r3, #7
 8008c06:	4013      	ands	r3, r2
 8008c08:	d008      	beq.n	8008c1c <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	681a      	ldr	r2, [r3, #0]
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	4924      	ldr	r1, [pc, #144]	@ (8008ca8 <I2C_ITSlaveSeqCplt+0xc0>)
 8008c16:	400a      	ands	r2, r1
 8008c18:	601a      	str	r2, [r3, #0]
 8008c1a:	e00c      	b.n	8008c36 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8008c1c:	68fa      	ldr	r2, [r7, #12]
 8008c1e:	2380      	movs	r3, #128	@ 0x80
 8008c20:	021b      	lsls	r3, r3, #8
 8008c22:	4013      	ands	r3, r2
 8008c24:	d007      	beq.n	8008c36 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	681a      	ldr	r2, [r3, #0]
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	491e      	ldr	r1, [pc, #120]	@ (8008cac <I2C_ITSlaveSeqCplt+0xc4>)
 8008c32:	400a      	ands	r2, r1
 8008c34:	601a      	str	r2, [r3, #0]
=======
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b084      	sub	sp, #16
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	2242      	movs	r2, #66	@ 0x42
 8008ec0:	2100      	movs	r1, #0
 8008ec2:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8008ec4:	68fa      	ldr	r2, [r7, #12]
 8008ec6:	2380      	movs	r3, #128	@ 0x80
 8008ec8:	01db      	lsls	r3, r3, #7
 8008eca:	4013      	ands	r3, r2
 8008ecc:	d008      	beq.n	8008ee0 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	681a      	ldr	r2, [r3, #0]
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	4924      	ldr	r1, [pc, #144]	@ (8008f6c <I2C_ITSlaveSeqCplt+0xc0>)
 8008eda:	400a      	ands	r2, r1
 8008edc:	601a      	str	r2, [r3, #0]
 8008ede:	e00c      	b.n	8008efa <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8008ee0:	68fa      	ldr	r2, [r7, #12]
 8008ee2:	2380      	movs	r3, #128	@ 0x80
 8008ee4:	021b      	lsls	r3, r3, #8
 8008ee6:	4013      	ands	r3, r2
 8008ee8:	d007      	beq.n	8008efa <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	681a      	ldr	r2, [r3, #0]
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	491e      	ldr	r1, [pc, #120]	@ (8008f70 <I2C_ITSlaveSeqCplt+0xc4>)
 8008ef6:	400a      	ands	r2, r1
 8008ef8:	601a      	str	r2, [r3, #0]
>>>>>>> main
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
<<<<<<< HEAD
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	2241      	movs	r2, #65	@ 0x41
 8008c3a:	5c9b      	ldrb	r3, [r3, r2]
 8008c3c:	b2db      	uxtb	r3, r3
 8008c3e:	2b29      	cmp	r3, #41	@ 0x29
 8008c40:	d114      	bne.n	8008c6c <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	2241      	movs	r2, #65	@ 0x41
 8008c46:	2128      	movs	r1, #40	@ 0x28
 8008c48:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	2221      	movs	r2, #33	@ 0x21
 8008c4e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	2101      	movs	r1, #1
 8008c54:	0018      	movs	r0, r3
 8008c56:	f000 fd5f 	bl	8009718 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	2240      	movs	r2, #64	@ 0x40
 8008c5e:	2100      	movs	r1, #0
 8008c60:	5499      	strb	r1, [r3, r2]
=======
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	2241      	movs	r2, #65	@ 0x41
 8008efe:	5c9b      	ldrb	r3, [r3, r2]
 8008f00:	b2db      	uxtb	r3, r3
 8008f02:	2b29      	cmp	r3, #41	@ 0x29
 8008f04:	d114      	bne.n	8008f30 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	2241      	movs	r2, #65	@ 0x41
 8008f0a:	2128      	movs	r1, #40	@ 0x28
 8008f0c:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	2221      	movs	r2, #33	@ 0x21
 8008f12:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	2101      	movs	r1, #1
 8008f18:	0018      	movs	r0, r3
 8008f1a:	f000 fd5f 	bl	80099dc <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	2240      	movs	r2, #64	@ 0x40
 8008f22:	2100      	movs	r1, #0
 8008f24:	5499      	strb	r1, [r3, r2]
>>>>>>> main

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
<<<<<<< HEAD
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	0018      	movs	r0, r3
 8008c66:	f7ff f968 	bl	8007f3a <HAL_I2C_SlaveTxCpltCallback>
=======
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	0018      	movs	r0, r3
 8008f2a:	f7ff f968 	bl	80081fe <HAL_I2C_SlaveTxCpltCallback>
>>>>>>> main
  }
  else
  {
    /* Nothing to do */
  }
}
<<<<<<< HEAD
 8008c6a:	e019      	b.n	8008ca0 <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	2241      	movs	r2, #65	@ 0x41
 8008c70:	5c9b      	ldrb	r3, [r3, r2]
 8008c72:	b2db      	uxtb	r3, r3
 8008c74:	2b2a      	cmp	r3, #42	@ 0x2a
 8008c76:	d113      	bne.n	8008ca0 <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	2241      	movs	r2, #65	@ 0x41
 8008c7c:	2128      	movs	r1, #40	@ 0x28
 8008c7e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	2222      	movs	r2, #34	@ 0x22
 8008c84:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	2102      	movs	r1, #2
 8008c8a:	0018      	movs	r0, r3
 8008c8c:	f000 fd44 	bl	8009718 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	2240      	movs	r2, #64	@ 0x40
 8008c94:	2100      	movs	r1, #0
 8008c96:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	0018      	movs	r0, r3
 8008c9c:	f7ff f955 	bl	8007f4a <HAL_I2C_SlaveRxCpltCallback>
}
 8008ca0:	46c0      	nop			@ (mov r8, r8)
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	b004      	add	sp, #16
 8008ca6:	bd80      	pop	{r7, pc}
 8008ca8:	ffffbfff 	.word	0xffffbfff
 8008cac:	ffff7fff 	.word	0xffff7fff

08008cb0 <I2C_ITMasterCplt>:
=======
 8008f2e:	e019      	b.n	8008f64 <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	2241      	movs	r2, #65	@ 0x41
 8008f34:	5c9b      	ldrb	r3, [r3, r2]
 8008f36:	b2db      	uxtb	r3, r3
 8008f38:	2b2a      	cmp	r3, #42	@ 0x2a
 8008f3a:	d113      	bne.n	8008f64 <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	2241      	movs	r2, #65	@ 0x41
 8008f40:	2128      	movs	r1, #40	@ 0x28
 8008f42:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	2222      	movs	r2, #34	@ 0x22
 8008f48:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	2102      	movs	r1, #2
 8008f4e:	0018      	movs	r0, r3
 8008f50:	f000 fd44 	bl	80099dc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	2240      	movs	r2, #64	@ 0x40
 8008f58:	2100      	movs	r1, #0
 8008f5a:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	0018      	movs	r0, r3
 8008f60:	f7ff f955 	bl	800820e <HAL_I2C_SlaveRxCpltCallback>
}
 8008f64:	46c0      	nop			@ (mov r8, r8)
 8008f66:	46bd      	mov	sp, r7
 8008f68:	b004      	add	sp, #16
 8008f6a:	bd80      	pop	{r7, pc}
 8008f6c:	ffffbfff 	.word	0xffffbfff
 8008f70:	ffff7fff 	.word	0xffff7fff

08008f74 <I2C_ITMasterCplt>:
>>>>>>> main
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
<<<<<<< HEAD
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	b086      	sub	sp, #24
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
 8008cb8:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8008cba:	683b      	ldr	r3, [r7, #0]
 8008cbc:	617b      	str	r3, [r7, #20]
=======
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b086      	sub	sp, #24
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]
 8008f7c:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8008f7e:	683b      	ldr	r3, [r7, #0]
 8008f80:	617b      	str	r3, [r7, #20]
>>>>>>> main
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
<<<<<<< HEAD
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	2220      	movs	r2, #32
 8008cc4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	2241      	movs	r2, #65	@ 0x41
 8008cca:	5c9b      	ldrb	r3, [r3, r2]
 8008ccc:	b2db      	uxtb	r3, r3
 8008cce:	2b21      	cmp	r3, #33	@ 0x21
 8008cd0:	d108      	bne.n	8008ce4 <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	2101      	movs	r1, #1
 8008cd6:	0018      	movs	r0, r3
 8008cd8:	f000 fd1e 	bl	8009718 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	2211      	movs	r2, #17
 8008ce0:	631a      	str	r2, [r3, #48]	@ 0x30
 8008ce2:	e00d      	b.n	8008d00 <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2241      	movs	r2, #65	@ 0x41
 8008ce8:	5c9b      	ldrb	r3, [r3, r2]
 8008cea:	b2db      	uxtb	r3, r3
 8008cec:	2b22      	cmp	r3, #34	@ 0x22
 8008cee:	d107      	bne.n	8008d00 <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	2102      	movs	r1, #2
 8008cf4:	0018      	movs	r0, r3
 8008cf6:	f000 fd0f 	bl	8009718 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	2212      	movs	r2, #18
 8008cfe:	631a      	str	r2, [r3, #48]	@ 0x30
=======
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	2220      	movs	r2, #32
 8008f88:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	2241      	movs	r2, #65	@ 0x41
 8008f8e:	5c9b      	ldrb	r3, [r3, r2]
 8008f90:	b2db      	uxtb	r3, r3
 8008f92:	2b21      	cmp	r3, #33	@ 0x21
 8008f94:	d108      	bne.n	8008fa8 <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	2101      	movs	r1, #1
 8008f9a:	0018      	movs	r0, r3
 8008f9c:	f000 fd1e 	bl	80099dc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	2211      	movs	r2, #17
 8008fa4:	631a      	str	r2, [r3, #48]	@ 0x30
 8008fa6:	e00d      	b.n	8008fc4 <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	2241      	movs	r2, #65	@ 0x41
 8008fac:	5c9b      	ldrb	r3, [r3, r2]
 8008fae:	b2db      	uxtb	r3, r3
 8008fb0:	2b22      	cmp	r3, #34	@ 0x22
 8008fb2:	d107      	bne.n	8008fc4 <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	2102      	movs	r1, #2
 8008fb8:	0018      	movs	r0, r3
 8008fba:	f000 fd0f 	bl	80099dc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	2212      	movs	r2, #18
 8008fc2:	631a      	str	r2, [r3, #48]	@ 0x30
>>>>>>> main
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
<<<<<<< HEAD
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	685a      	ldr	r2, [r3, #4]
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	494e      	ldr	r1, [pc, #312]	@ (8008e44 <I2C_ITMasterCplt+0x194>)
 8008d0c:	400a      	ands	r2, r1
 8008d0e:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	2200      	movs	r2, #0
 8008d14:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	4a4b      	ldr	r2, [pc, #300]	@ (8008e48 <I2C_ITMasterCplt+0x198>)
 8008d1a:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8008d1c:	697b      	ldr	r3, [r7, #20]
 8008d1e:	2210      	movs	r2, #16
 8008d20:	4013      	ands	r3, r2
 8008d22:	d009      	beq.n	8008d38 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	2210      	movs	r2, #16
 8008d2a:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d30:	2204      	movs	r2, #4
 8008d32:	431a      	orrs	r2, r3
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	645a      	str	r2, [r3, #68]	@ 0x44
=======
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	685a      	ldr	r2, [r3, #4]
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	494e      	ldr	r1, [pc, #312]	@ (8009108 <I2C_ITMasterCplt+0x194>)
 8008fd0:	400a      	ands	r2, r1
 8008fd2:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	4a4b      	ldr	r2, [pc, #300]	@ (800910c <I2C_ITMasterCplt+0x198>)
 8008fde:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8008fe0:	697b      	ldr	r3, [r7, #20]
 8008fe2:	2210      	movs	r2, #16
 8008fe4:	4013      	ands	r3, r2
 8008fe6:	d009      	beq.n	8008ffc <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	2210      	movs	r2, #16
 8008fee:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ff4:	2204      	movs	r2, #4
 8008ff6:	431a      	orrs	r2, r3
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	645a      	str	r2, [r3, #68]	@ 0x44
>>>>>>> main
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
<<<<<<< HEAD
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	2241      	movs	r2, #65	@ 0x41
 8008d3c:	5c9b      	ldrb	r3, [r3, r2]
 8008d3e:	b2db      	uxtb	r3, r3
 8008d40:	2b60      	cmp	r3, #96	@ 0x60
 8008d42:	d109      	bne.n	8008d58 <I2C_ITMasterCplt+0xa8>
 8008d44:	697b      	ldr	r3, [r7, #20]
 8008d46:	2204      	movs	r2, #4
 8008d48:	4013      	ands	r3, r2
 8008d4a:	d005      	beq.n	8008d58 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d52:	b2db      	uxtb	r3, r3
 8008d54:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8008d56:	68fb      	ldr	r3, [r7, #12]
=======
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2241      	movs	r2, #65	@ 0x41
 8009000:	5c9b      	ldrb	r3, [r3, r2]
 8009002:	b2db      	uxtb	r3, r3
 8009004:	2b60      	cmp	r3, #96	@ 0x60
 8009006:	d109      	bne.n	800901c <I2C_ITMasterCplt+0xa8>
 8009008:	697b      	ldr	r3, [r7, #20]
 800900a:	2204      	movs	r2, #4
 800900c:	4013      	ands	r3, r2
 800900e:	d005      	beq.n	800901c <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009016:	b2db      	uxtb	r3, r3
 8009018:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800901a:	68fb      	ldr	r3, [r7, #12]
>>>>>>> main
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
<<<<<<< HEAD
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	0018      	movs	r0, r3
 8008d5c:	f000 fb19 	bl	8009392 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d64:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	2241      	movs	r2, #65	@ 0x41
 8008d6a:	5c9b      	ldrb	r3, [r3, r2]
 8008d6c:	b2db      	uxtb	r3, r3
 8008d6e:	2b60      	cmp	r3, #96	@ 0x60
 8008d70:	d002      	beq.n	8008d78 <I2C_ITMasterCplt+0xc8>
 8008d72:	693b      	ldr	r3, [r7, #16]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d007      	beq.n	8008d88 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	0011      	movs	r1, r2
 8008d80:	0018      	movs	r0, r3
 8008d82:	f000 f9db 	bl	800913c <I2C_ITError>
=======
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	0018      	movs	r0, r3
 8009020:	f000 fb19 	bl	8009656 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009028:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	2241      	movs	r2, #65	@ 0x41
 800902e:	5c9b      	ldrb	r3, [r3, r2]
 8009030:	b2db      	uxtb	r3, r3
 8009032:	2b60      	cmp	r3, #96	@ 0x60
 8009034:	d002      	beq.n	800903c <I2C_ITMasterCplt+0xc8>
 8009036:	693b      	ldr	r3, [r7, #16]
 8009038:	2b00      	cmp	r3, #0
 800903a:	d007      	beq.n	800904c <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	0011      	movs	r1, r2
 8009044:	0018      	movs	r0, r3
 8009046:	f000 f9db 	bl	8009400 <I2C_ITError>
>>>>>>> main
  }
  else
  {
    /* Nothing to do */
  }
}
<<<<<<< HEAD
 8008d86:	e058      	b.n	8008e3a <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	2241      	movs	r2, #65	@ 0x41
 8008d8c:	5c9b      	ldrb	r3, [r3, r2]
 8008d8e:	b2db      	uxtb	r3, r3
 8008d90:	2b21      	cmp	r3, #33	@ 0x21
 8008d92:	d126      	bne.n	8008de2 <I2C_ITMasterCplt+0x132>
    hi2c->State = HAL_I2C_STATE_READY;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	2241      	movs	r2, #65	@ 0x41
 8008d98:	2120      	movs	r1, #32
 8008d9a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	2200      	movs	r2, #0
 8008da0:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	2242      	movs	r2, #66	@ 0x42
 8008da6:	5c9b      	ldrb	r3, [r3, r2]
 8008da8:	b2db      	uxtb	r3, r3
 8008daa:	2b40      	cmp	r3, #64	@ 0x40
 8008dac:	d10c      	bne.n	8008dc8 <I2C_ITMasterCplt+0x118>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	2242      	movs	r2, #66	@ 0x42
 8008db2:	2100      	movs	r1, #0
 8008db4:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	2240      	movs	r2, #64	@ 0x40
 8008dba:	2100      	movs	r1, #0
 8008dbc:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	0018      	movs	r0, r3
 8008dc2:	f7ff f8e2 	bl	8007f8a <HAL_I2C_MemTxCpltCallback>
}
 8008dc6:	e038      	b.n	8008e3a <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	2242      	movs	r2, #66	@ 0x42
 8008dcc:	2100      	movs	r1, #0
 8008dce:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2240      	movs	r2, #64	@ 0x40
 8008dd4:	2100      	movs	r1, #0
 8008dd6:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	0018      	movs	r0, r3
 8008ddc:	f7ff f89d 	bl	8007f1a <HAL_I2C_MasterTxCpltCallback>
}
 8008de0:	e02b      	b.n	8008e3a <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	2241      	movs	r2, #65	@ 0x41
 8008de6:	5c9b      	ldrb	r3, [r3, r2]
 8008de8:	b2db      	uxtb	r3, r3
 8008dea:	2b22      	cmp	r3, #34	@ 0x22
 8008dec:	d125      	bne.n	8008e3a <I2C_ITMasterCplt+0x18a>
    hi2c->State = HAL_I2C_STATE_READY;
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	2241      	movs	r2, #65	@ 0x41
 8008df2:	2120      	movs	r1, #32
 8008df4:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	2200      	movs	r2, #0
 8008dfa:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	2242      	movs	r2, #66	@ 0x42
 8008e00:	5c9b      	ldrb	r3, [r3, r2]
 8008e02:	b2db      	uxtb	r3, r3
 8008e04:	2b40      	cmp	r3, #64	@ 0x40
 8008e06:	d10c      	bne.n	8008e22 <I2C_ITMasterCplt+0x172>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	2242      	movs	r2, #66	@ 0x42
 8008e0c:	2100      	movs	r1, #0
 8008e0e:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	2240      	movs	r2, #64	@ 0x40
 8008e14:	2100      	movs	r1, #0
 8008e16:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	0018      	movs	r0, r3
 8008e1c:	f7ff f8bd 	bl	8007f9a <HAL_I2C_MemRxCpltCallback>
}
 8008e20:	e00b      	b.n	8008e3a <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	2242      	movs	r2, #66	@ 0x42
 8008e26:	2100      	movs	r1, #0
 8008e28:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	2240      	movs	r2, #64	@ 0x40
 8008e2e:	2100      	movs	r1, #0
 8008e30:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	0018      	movs	r0, r3
 8008e36:	f7ff f878 	bl	8007f2a <HAL_I2C_MasterRxCpltCallback>
}
 8008e3a:	46c0      	nop			@ (mov r8, r8)
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	b006      	add	sp, #24
 8008e40:	bd80      	pop	{r7, pc}
 8008e42:	46c0      	nop			@ (mov r8, r8)
 8008e44:	fe00e800 	.word	0xfe00e800
 8008e48:	ffff0000 	.word	0xffff0000

08008e4c <I2C_ITSlaveCplt>:
=======
 800904a:	e058      	b.n	80090fe <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	2241      	movs	r2, #65	@ 0x41
 8009050:	5c9b      	ldrb	r3, [r3, r2]
 8009052:	b2db      	uxtb	r3, r3
 8009054:	2b21      	cmp	r3, #33	@ 0x21
 8009056:	d126      	bne.n	80090a6 <I2C_ITMasterCplt+0x132>
    hi2c->State = HAL_I2C_STATE_READY;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	2241      	movs	r2, #65	@ 0x41
 800905c:	2120      	movs	r1, #32
 800905e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	2200      	movs	r2, #0
 8009064:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	2242      	movs	r2, #66	@ 0x42
 800906a:	5c9b      	ldrb	r3, [r3, r2]
 800906c:	b2db      	uxtb	r3, r3
 800906e:	2b40      	cmp	r3, #64	@ 0x40
 8009070:	d10c      	bne.n	800908c <I2C_ITMasterCplt+0x118>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	2242      	movs	r2, #66	@ 0x42
 8009076:	2100      	movs	r1, #0
 8009078:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	2240      	movs	r2, #64	@ 0x40
 800907e:	2100      	movs	r1, #0
 8009080:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	0018      	movs	r0, r3
 8009086:	f7ff f8e2 	bl	800824e <HAL_I2C_MemTxCpltCallback>
}
 800908a:	e038      	b.n	80090fe <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	2242      	movs	r2, #66	@ 0x42
 8009090:	2100      	movs	r1, #0
 8009092:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	2240      	movs	r2, #64	@ 0x40
 8009098:	2100      	movs	r1, #0
 800909a:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	0018      	movs	r0, r3
 80090a0:	f7ff f89d 	bl	80081de <HAL_I2C_MasterTxCpltCallback>
}
 80090a4:	e02b      	b.n	80090fe <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	2241      	movs	r2, #65	@ 0x41
 80090aa:	5c9b      	ldrb	r3, [r3, r2]
 80090ac:	b2db      	uxtb	r3, r3
 80090ae:	2b22      	cmp	r3, #34	@ 0x22
 80090b0:	d125      	bne.n	80090fe <I2C_ITMasterCplt+0x18a>
    hi2c->State = HAL_I2C_STATE_READY;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	2241      	movs	r2, #65	@ 0x41
 80090b6:	2120      	movs	r1, #32
 80090b8:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	2200      	movs	r2, #0
 80090be:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	2242      	movs	r2, #66	@ 0x42
 80090c4:	5c9b      	ldrb	r3, [r3, r2]
 80090c6:	b2db      	uxtb	r3, r3
 80090c8:	2b40      	cmp	r3, #64	@ 0x40
 80090ca:	d10c      	bne.n	80090e6 <I2C_ITMasterCplt+0x172>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	2242      	movs	r2, #66	@ 0x42
 80090d0:	2100      	movs	r1, #0
 80090d2:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	2240      	movs	r2, #64	@ 0x40
 80090d8:	2100      	movs	r1, #0
 80090da:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	0018      	movs	r0, r3
 80090e0:	f7ff f8bd 	bl	800825e <HAL_I2C_MemRxCpltCallback>
}
 80090e4:	e00b      	b.n	80090fe <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	2242      	movs	r2, #66	@ 0x42
 80090ea:	2100      	movs	r1, #0
 80090ec:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	2240      	movs	r2, #64	@ 0x40
 80090f2:	2100      	movs	r1, #0
 80090f4:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	0018      	movs	r0, r3
 80090fa:	f7ff f878 	bl	80081ee <HAL_I2C_MasterRxCpltCallback>
}
 80090fe:	46c0      	nop			@ (mov r8, r8)
 8009100:	46bd      	mov	sp, r7
 8009102:	b006      	add	sp, #24
 8009104:	bd80      	pop	{r7, pc}
 8009106:	46c0      	nop			@ (mov r8, r8)
 8009108:	fe00e800 	.word	0xfe00e800
 800910c:	ffff0000 	.word	0xffff0000

08009110 <I2C_ITSlaveCplt>:
>>>>>>> main
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
<<<<<<< HEAD
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	b086      	sub	sp, #24
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
 8008e54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8008e5e:	683b      	ldr	r3, [r7, #0]
 8008e60:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8008e62:	200f      	movs	r0, #15
 8008e64:	183b      	adds	r3, r7, r0
 8008e66:	687a      	ldr	r2, [r7, #4]
 8008e68:	2141      	movs	r1, #65	@ 0x41
 8008e6a:	5c52      	ldrb	r2, [r2, r1]
 8008e6c:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	2220      	movs	r2, #32
 8008e74:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8008e76:	183b      	adds	r3, r7, r0
 8008e78:	781b      	ldrb	r3, [r3, #0]
 8008e7a:	2b21      	cmp	r3, #33	@ 0x21
 8008e7c:	d003      	beq.n	8008e86 <I2C_ITSlaveCplt+0x3a>
 8008e7e:	183b      	adds	r3, r7, r0
 8008e80:	781b      	ldrb	r3, [r3, #0]
 8008e82:	2b29      	cmp	r3, #41	@ 0x29
 8008e84:	d109      	bne.n	8008e9a <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8008e86:	4a7b      	ldr	r2, [pc, #492]	@ (8009074 <I2C_ITSlaveCplt+0x228>)
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	0011      	movs	r1, r2
 8008e8c:	0018      	movs	r0, r3
 8008e8e:	f000 fc43 	bl	8009718 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	2221      	movs	r2, #33	@ 0x21
 8008e96:	631a      	str	r2, [r3, #48]	@ 0x30
 8008e98:	e011      	b.n	8008ebe <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8008e9a:	220f      	movs	r2, #15
 8008e9c:	18bb      	adds	r3, r7, r2
 8008e9e:	781b      	ldrb	r3, [r3, #0]
 8008ea0:	2b22      	cmp	r3, #34	@ 0x22
 8008ea2:	d003      	beq.n	8008eac <I2C_ITSlaveCplt+0x60>
 8008ea4:	18bb      	adds	r3, r7, r2
 8008ea6:	781b      	ldrb	r3, [r3, #0]
 8008ea8:	2b2a      	cmp	r3, #42	@ 0x2a
 8008eaa:	d108      	bne.n	8008ebe <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8008eac:	4a72      	ldr	r2, [pc, #456]	@ (8009078 <I2C_ITSlaveCplt+0x22c>)
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	0011      	movs	r1, r2
 8008eb2:	0018      	movs	r0, r3
 8008eb4:	f000 fc30 	bl	8009718 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	2222      	movs	r2, #34	@ 0x22
 8008ebc:	631a      	str	r2, [r3, #48]	@ 0x30
=======
 8009110:	b580      	push	{r7, lr}
 8009112:	b086      	sub	sp, #24
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
 8009118:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8009122:	683b      	ldr	r3, [r7, #0]
 8009124:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8009126:	200f      	movs	r0, #15
 8009128:	183b      	adds	r3, r7, r0
 800912a:	687a      	ldr	r2, [r7, #4]
 800912c:	2141      	movs	r1, #65	@ 0x41
 800912e:	5c52      	ldrb	r2, [r2, r1]
 8009130:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	2220      	movs	r2, #32
 8009138:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800913a:	183b      	adds	r3, r7, r0
 800913c:	781b      	ldrb	r3, [r3, #0]
 800913e:	2b21      	cmp	r3, #33	@ 0x21
 8009140:	d003      	beq.n	800914a <I2C_ITSlaveCplt+0x3a>
 8009142:	183b      	adds	r3, r7, r0
 8009144:	781b      	ldrb	r3, [r3, #0]
 8009146:	2b29      	cmp	r3, #41	@ 0x29
 8009148:	d109      	bne.n	800915e <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800914a:	4a7b      	ldr	r2, [pc, #492]	@ (8009338 <I2C_ITSlaveCplt+0x228>)
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	0011      	movs	r1, r2
 8009150:	0018      	movs	r0, r3
 8009152:	f000 fc43 	bl	80099dc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	2221      	movs	r2, #33	@ 0x21
 800915a:	631a      	str	r2, [r3, #48]	@ 0x30
 800915c:	e011      	b.n	8009182 <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800915e:	220f      	movs	r2, #15
 8009160:	18bb      	adds	r3, r7, r2
 8009162:	781b      	ldrb	r3, [r3, #0]
 8009164:	2b22      	cmp	r3, #34	@ 0x22
 8009166:	d003      	beq.n	8009170 <I2C_ITSlaveCplt+0x60>
 8009168:	18bb      	adds	r3, r7, r2
 800916a:	781b      	ldrb	r3, [r3, #0]
 800916c:	2b2a      	cmp	r3, #42	@ 0x2a
 800916e:	d108      	bne.n	8009182 <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8009170:	4a72      	ldr	r2, [pc, #456]	@ (800933c <I2C_ITSlaveCplt+0x22c>)
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	0011      	movs	r1, r2
 8009176:	0018      	movs	r0, r3
 8009178:	f000 fc30 	bl	80099dc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	2222      	movs	r2, #34	@ 0x22
 8009180:	631a      	str	r2, [r3, #48]	@ 0x30
>>>>>>> main
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
<<<<<<< HEAD
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	685a      	ldr	r2, [r3, #4]
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	2180      	movs	r1, #128	@ 0x80
 8008eca:	0209      	lsls	r1, r1, #8
 8008ecc:	430a      	orrs	r2, r1
 8008ece:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	685a      	ldr	r2, [r3, #4]
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	4968      	ldr	r1, [pc, #416]	@ (800907c <I2C_ITSlaveCplt+0x230>)
 8008edc:	400a      	ands	r2, r1
 8008ede:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	0018      	movs	r0, r3
 8008ee4:	f000 fa55 	bl	8009392 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8008ee8:	693a      	ldr	r2, [r7, #16]
 8008eea:	2380      	movs	r3, #128	@ 0x80
 8008eec:	01db      	lsls	r3, r3, #7
 8008eee:	4013      	ands	r3, r2
 8008ef0:	d013      	beq.n	8008f1a <I2C_ITSlaveCplt+0xce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	681a      	ldr	r2, [r3, #0]
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	4960      	ldr	r1, [pc, #384]	@ (8009080 <I2C_ITSlaveCplt+0x234>)
 8008efe:	400a      	ands	r2, r1
 8008f00:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d01f      	beq.n	8008f4a <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	685b      	ldr	r3, [r3, #4]
 8008f12:	b29a      	uxth	r2, r3
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8008f18:	e017      	b.n	8008f4a <I2C_ITSlaveCplt+0xfe>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8008f1a:	693a      	ldr	r2, [r7, #16]
 8008f1c:	2380      	movs	r3, #128	@ 0x80
 8008f1e:	021b      	lsls	r3, r3, #8
 8008f20:	4013      	ands	r3, r2
 8008f22:	d012      	beq.n	8008f4a <I2C_ITSlaveCplt+0xfe>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	681a      	ldr	r2, [r3, #0]
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	4955      	ldr	r1, [pc, #340]	@ (8009084 <I2C_ITSlaveCplt+0x238>)
 8008f30:	400a      	ands	r2, r1
 8008f32:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d006      	beq.n	8008f4a <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	685b      	ldr	r3, [r3, #4]
 8008f44:	b29a      	uxth	r2, r3
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	855a      	strh	r2, [r3, #42]	@ 0x2a
=======
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	685a      	ldr	r2, [r3, #4]
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	2180      	movs	r1, #128	@ 0x80
 800918e:	0209      	lsls	r1, r1, #8
 8009190:	430a      	orrs	r2, r1
 8009192:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	685a      	ldr	r2, [r3, #4]
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	4968      	ldr	r1, [pc, #416]	@ (8009340 <I2C_ITSlaveCplt+0x230>)
 80091a0:	400a      	ands	r2, r1
 80091a2:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	0018      	movs	r0, r3
 80091a8:	f000 fa55 	bl	8009656 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80091ac:	693a      	ldr	r2, [r7, #16]
 80091ae:	2380      	movs	r3, #128	@ 0x80
 80091b0:	01db      	lsls	r3, r3, #7
 80091b2:	4013      	ands	r3, r2
 80091b4:	d013      	beq.n	80091de <I2C_ITSlaveCplt+0xce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	681a      	ldr	r2, [r3, #0]
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	4960      	ldr	r1, [pc, #384]	@ (8009344 <I2C_ITSlaveCplt+0x234>)
 80091c2:	400a      	ands	r2, r1
 80091c4:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d01f      	beq.n	800920e <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	685b      	ldr	r3, [r3, #4]
 80091d6:	b29a      	uxth	r2, r3
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80091dc:	e017      	b.n	800920e <I2C_ITSlaveCplt+0xfe>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80091de:	693a      	ldr	r2, [r7, #16]
 80091e0:	2380      	movs	r3, #128	@ 0x80
 80091e2:	021b      	lsls	r3, r3, #8
 80091e4:	4013      	ands	r3, r2
 80091e6:	d012      	beq.n	800920e <I2C_ITSlaveCplt+0xfe>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	681a      	ldr	r2, [r3, #0]
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	4955      	ldr	r1, [pc, #340]	@ (8009348 <I2C_ITSlaveCplt+0x238>)
 80091f4:	400a      	ands	r2, r1
 80091f6:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d006      	beq.n	800920e <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	685b      	ldr	r3, [r3, #4]
 8009208:	b29a      	uxth	r2, r3
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	855a      	strh	r2, [r3, #42]	@ 0x2a
>>>>>>> main
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
<<<<<<< HEAD
 8008f4a:	697b      	ldr	r3, [r7, #20]
 8008f4c:	2204      	movs	r2, #4
 8008f4e:	4013      	ands	r3, r2
 8008f50:	d020      	beq.n	8008f94 <I2C_ITSlaveCplt+0x148>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8008f52:	697b      	ldr	r3, [r7, #20]
 8008f54:	2204      	movs	r2, #4
 8008f56:	4393      	bics	r3, r2
 8008f58:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f64:	b2d2      	uxtb	r2, r2
 8008f66:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f6c:	1c5a      	adds	r2, r3, #1
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d00c      	beq.n	8008f94 <I2C_ITSlaveCplt+0x148>
    {
      hi2c->XferSize--;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008f7e:	3b01      	subs	r3, #1
 8008f80:	b29a      	uxth	r2, r3
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008f8a:	b29b      	uxth	r3, r3
 8008f8c:	3b01      	subs	r3, #1
 8008f8e:	b29a      	uxth	r2, r3
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	855a      	strh	r2, [r3, #42]	@ 0x2a
=======
 800920e:	697b      	ldr	r3, [r7, #20]
 8009210:	2204      	movs	r2, #4
 8009212:	4013      	ands	r3, r2
 8009214:	d020      	beq.n	8009258 <I2C_ITSlaveCplt+0x148>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8009216:	697b      	ldr	r3, [r7, #20]
 8009218:	2204      	movs	r2, #4
 800921a:	4393      	bics	r3, r2
 800921c:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009228:	b2d2      	uxtb	r2, r2
 800922a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009230:	1c5a      	adds	r2, r3, #1
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800923a:	2b00      	cmp	r3, #0
 800923c:	d00c      	beq.n	8009258 <I2C_ITSlaveCplt+0x148>
    {
      hi2c->XferSize--;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009242:	3b01      	subs	r3, #1
 8009244:	b29a      	uxth	r2, r3
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800924e:	b29b      	uxth	r3, r3
 8009250:	3b01      	subs	r3, #1
 8009252:	b29a      	uxth	r2, r3
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	855a      	strh	r2, [r3, #42]	@ 0x2a
>>>>>>> main
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
<<<<<<< HEAD
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008f98:	b29b      	uxth	r3, r3
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d005      	beq.n	8008faa <I2C_ITSlaveCplt+0x15e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008fa2:	2204      	movs	r2, #4
 8008fa4:	431a      	orrs	r2, r3
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	2242      	movs	r2, #66	@ 0x42
 8008fae:	2100      	movs	r1, #0
 8008fb0:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	2200      	movs	r2, #0
 8008fb6:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d013      	beq.n	8008fe8 <I2C_ITSlaveCplt+0x19c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	0011      	movs	r1, r2
 8008fc8:	0018      	movs	r0, r3
 8008fca:	f000 f8b7 	bl	800913c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	2241      	movs	r2, #65	@ 0x41
 8008fd2:	5c9b      	ldrb	r3, [r3, r2]
 8008fd4:	b2db      	uxtb	r3, r3
 8008fd6:	2b28      	cmp	r3, #40	@ 0x28
 8008fd8:	d147      	bne.n	800906a <I2C_ITSlaveCplt+0x21e>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8008fda:	697a      	ldr	r2, [r7, #20]
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	0011      	movs	r1, r2
 8008fe0:	0018      	movs	r0, r3
 8008fe2:	f000 f853 	bl	800908c <I2C_ITListenCplt>
=======
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800925c:	b29b      	uxth	r3, r3
 800925e:	2b00      	cmp	r3, #0
 8009260:	d005      	beq.n	800926e <I2C_ITSlaveCplt+0x15e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009266:	2204      	movs	r2, #4
 8009268:	431a      	orrs	r2, r3
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	2242      	movs	r2, #66	@ 0x42
 8009272:	2100      	movs	r1, #0
 8009274:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	2200      	movs	r2, #0
 800927a:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009280:	2b00      	cmp	r3, #0
 8009282:	d013      	beq.n	80092ac <I2C_ITSlaveCplt+0x19c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	0011      	movs	r1, r2
 800928c:	0018      	movs	r0, r3
 800928e:	f000 f8b7 	bl	8009400 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	2241      	movs	r2, #65	@ 0x41
 8009296:	5c9b      	ldrb	r3, [r3, r2]
 8009298:	b2db      	uxtb	r3, r3
 800929a:	2b28      	cmp	r3, #40	@ 0x28
 800929c:	d147      	bne.n	800932e <I2C_ITSlaveCplt+0x21e>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800929e:	697a      	ldr	r2, [r7, #20]
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	0011      	movs	r1, r2
 80092a4:	0018      	movs	r0, r3
 80092a6:	f000 f853 	bl	8009350 <I2C_ITListenCplt>
>>>>>>> main
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
<<<<<<< HEAD
 8008fe6:	e040      	b.n	800906a <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fec:	4a26      	ldr	r2, [pc, #152]	@ (8009088 <I2C_ITSlaveCplt+0x23c>)
 8008fee:	4293      	cmp	r3, r2
 8008ff0:	d016      	beq.n	8009020 <I2C_ITSlaveCplt+0x1d4>
    I2C_ITSlaveSeqCplt(hi2c);
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	0018      	movs	r0, r3
 8008ff6:	f7ff fdf7 	bl	8008be8 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	4a22      	ldr	r2, [pc, #136]	@ (8009088 <I2C_ITSlaveCplt+0x23c>)
 8008ffe:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	2241      	movs	r2, #65	@ 0x41
 8009004:	2120      	movs	r1, #32
 8009006:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	2200      	movs	r2, #0
 800900c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	2240      	movs	r2, #64	@ 0x40
 8009012:	2100      	movs	r1, #0
 8009014:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	0018      	movs	r0, r3
 800901a:	f7fe ffae 	bl	8007f7a <HAL_I2C_ListenCpltCallback>
}
 800901e:	e024      	b.n	800906a <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	2241      	movs	r2, #65	@ 0x41
 8009024:	5c9b      	ldrb	r3, [r3, r2]
 8009026:	b2db      	uxtb	r3, r3
 8009028:	2b22      	cmp	r3, #34	@ 0x22
 800902a:	d10f      	bne.n	800904c <I2C_ITSlaveCplt+0x200>
    hi2c->State = HAL_I2C_STATE_READY;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	2241      	movs	r2, #65	@ 0x41
 8009030:	2120      	movs	r1, #32
 8009032:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	2200      	movs	r2, #0
 8009038:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	2240      	movs	r2, #64	@ 0x40
 800903e:	2100      	movs	r1, #0
 8009040:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	0018      	movs	r0, r3
 8009046:	f7fe ff80 	bl	8007f4a <HAL_I2C_SlaveRxCpltCallback>
}
 800904a:	e00e      	b.n	800906a <I2C_ITSlaveCplt+0x21e>
    hi2c->State = HAL_I2C_STATE_READY;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	2241      	movs	r2, #65	@ 0x41
 8009050:	2120      	movs	r1, #32
 8009052:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2200      	movs	r2, #0
 8009058:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	2240      	movs	r2, #64	@ 0x40
 800905e:	2100      	movs	r1, #0
 8009060:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	0018      	movs	r0, r3
 8009066:	f7fe ff68 	bl	8007f3a <HAL_I2C_SlaveTxCpltCallback>
}
 800906a:	46c0      	nop			@ (mov r8, r8)
 800906c:	46bd      	mov	sp, r7
 800906e:	b006      	add	sp, #24
 8009070:	bd80      	pop	{r7, pc}
 8009072:	46c0      	nop			@ (mov r8, r8)
 8009074:	00008001 	.word	0x00008001
 8009078:	00008002 	.word	0x00008002
 800907c:	fe00e800 	.word	0xfe00e800
 8009080:	ffffbfff 	.word	0xffffbfff
 8009084:	ffff7fff 	.word	0xffff7fff
 8009088:	ffff0000 	.word	0xffff0000

0800908c <I2C_ITListenCplt>:
=======
 80092aa:	e040      	b.n	800932e <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092b0:	4a26      	ldr	r2, [pc, #152]	@ (800934c <I2C_ITSlaveCplt+0x23c>)
 80092b2:	4293      	cmp	r3, r2
 80092b4:	d016      	beq.n	80092e4 <I2C_ITSlaveCplt+0x1d4>
    I2C_ITSlaveSeqCplt(hi2c);
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	0018      	movs	r0, r3
 80092ba:	f7ff fdf7 	bl	8008eac <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	4a22      	ldr	r2, [pc, #136]	@ (800934c <I2C_ITSlaveCplt+0x23c>)
 80092c2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	2241      	movs	r2, #65	@ 0x41
 80092c8:	2120      	movs	r1, #32
 80092ca:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	2200      	movs	r2, #0
 80092d0:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	2240      	movs	r2, #64	@ 0x40
 80092d6:	2100      	movs	r1, #0
 80092d8:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	0018      	movs	r0, r3
 80092de:	f7fe ffae 	bl	800823e <HAL_I2C_ListenCpltCallback>
}
 80092e2:	e024      	b.n	800932e <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	2241      	movs	r2, #65	@ 0x41
 80092e8:	5c9b      	ldrb	r3, [r3, r2]
 80092ea:	b2db      	uxtb	r3, r3
 80092ec:	2b22      	cmp	r3, #34	@ 0x22
 80092ee:	d10f      	bne.n	8009310 <I2C_ITSlaveCplt+0x200>
    hi2c->State = HAL_I2C_STATE_READY;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	2241      	movs	r2, #65	@ 0x41
 80092f4:	2120      	movs	r1, #32
 80092f6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	2200      	movs	r2, #0
 80092fc:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	2240      	movs	r2, #64	@ 0x40
 8009302:	2100      	movs	r1, #0
 8009304:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	0018      	movs	r0, r3
 800930a:	f7fe ff80 	bl	800820e <HAL_I2C_SlaveRxCpltCallback>
}
 800930e:	e00e      	b.n	800932e <I2C_ITSlaveCplt+0x21e>
    hi2c->State = HAL_I2C_STATE_READY;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	2241      	movs	r2, #65	@ 0x41
 8009314:	2120      	movs	r1, #32
 8009316:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	2200      	movs	r2, #0
 800931c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	2240      	movs	r2, #64	@ 0x40
 8009322:	2100      	movs	r1, #0
 8009324:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	0018      	movs	r0, r3
 800932a:	f7fe ff68 	bl	80081fe <HAL_I2C_SlaveTxCpltCallback>
}
 800932e:	46c0      	nop			@ (mov r8, r8)
 8009330:	46bd      	mov	sp, r7
 8009332:	b006      	add	sp, #24
 8009334:	bd80      	pop	{r7, pc}
 8009336:	46c0      	nop			@ (mov r8, r8)
 8009338:	00008001 	.word	0x00008001
 800933c:	00008002 	.word	0x00008002
 8009340:	fe00e800 	.word	0xfe00e800
 8009344:	ffffbfff 	.word	0xffffbfff
 8009348:	ffff7fff 	.word	0xffff7fff
 800934c:	ffff0000 	.word	0xffff0000

08009350 <I2C_ITListenCplt>:
>>>>>>> main
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
<<<<<<< HEAD
 800908c:	b580      	push	{r7, lr}
 800908e:	b082      	sub	sp, #8
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]
 8009094:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	4a26      	ldr	r2, [pc, #152]	@ (8009134 <I2C_ITListenCplt+0xa8>)
 800909a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	2200      	movs	r2, #0
 80090a0:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	2241      	movs	r2, #65	@ 0x41
 80090a6:	2120      	movs	r1, #32
 80090a8:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	2242      	movs	r2, #66	@ 0x42
 80090ae:	2100      	movs	r1, #0
 80090b0:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	2200      	movs	r2, #0
 80090b6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80090b8:	683b      	ldr	r3, [r7, #0]
 80090ba:	2204      	movs	r2, #4
 80090bc:	4013      	ands	r3, r2
 80090be:	d022      	beq.n	8009106 <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090ca:	b2d2      	uxtb	r2, r2
 80090cc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090d2:	1c5a      	adds	r2, r3, #1
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d012      	beq.n	8009106 <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80090e4:	3b01      	subs	r3, #1
 80090e6:	b29a      	uxth	r2, r3
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80090f0:	b29b      	uxth	r3, r3
 80090f2:	3b01      	subs	r3, #1
 80090f4:	b29a      	uxth	r2, r3
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80090fe:	2204      	movs	r2, #4
 8009100:	431a      	orrs	r2, r3
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	645a      	str	r2, [r3, #68]	@ 0x44
=======
 8009350:	b580      	push	{r7, lr}
 8009352:	b082      	sub	sp, #8
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]
 8009358:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	4a26      	ldr	r2, [pc, #152]	@ (80093f8 <I2C_ITListenCplt+0xa8>)
 800935e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	2200      	movs	r2, #0
 8009364:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	2241      	movs	r2, #65	@ 0x41
 800936a:	2120      	movs	r1, #32
 800936c:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	2242      	movs	r2, #66	@ 0x42
 8009372:	2100      	movs	r1, #0
 8009374:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	2200      	movs	r2, #0
 800937a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800937c:	683b      	ldr	r3, [r7, #0]
 800937e:	2204      	movs	r2, #4
 8009380:	4013      	ands	r3, r2
 8009382:	d022      	beq.n	80093ca <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800938e:	b2d2      	uxtb	r2, r2
 8009390:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009396:	1c5a      	adds	r2, r3, #1
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d012      	beq.n	80093ca <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80093a8:	3b01      	subs	r3, #1
 80093aa:	b29a      	uxth	r2, r3
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80093b4:	b29b      	uxth	r3, r3
 80093b6:	3b01      	subs	r3, #1
 80093b8:	b29a      	uxth	r2, r3
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80093c2:	2204      	movs	r2, #4
 80093c4:	431a      	orrs	r2, r3
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	645a      	str	r2, [r3, #68]	@ 0x44
>>>>>>> main
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
<<<<<<< HEAD
 8009106:	4a0c      	ldr	r2, [pc, #48]	@ (8009138 <I2C_ITListenCplt+0xac>)
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	0011      	movs	r1, r2
 800910c:	0018      	movs	r0, r3
 800910e:	f000 fb03 	bl	8009718 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	2210      	movs	r2, #16
 8009118:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	2240      	movs	r2, #64	@ 0x40
 800911e:	2100      	movs	r1, #0
 8009120:	5499      	strb	r1, [r3, r2]
=======
 80093ca:	4a0c      	ldr	r2, [pc, #48]	@ (80093fc <I2C_ITListenCplt+0xac>)
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	0011      	movs	r1, r2
 80093d0:	0018      	movs	r0, r3
 80093d2:	f000 fb03 	bl	80099dc <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	2210      	movs	r2, #16
 80093dc:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	2240      	movs	r2, #64	@ 0x40
 80093e2:	2100      	movs	r1, #0
 80093e4:	5499      	strb	r1, [r3, r2]
>>>>>>> main

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
<<<<<<< HEAD
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	0018      	movs	r0, r3
 8009126:	f7fe ff28 	bl	8007f7a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800912a:	46c0      	nop			@ (mov r8, r8)
 800912c:	46bd      	mov	sp, r7
 800912e:	b002      	add	sp, #8
 8009130:	bd80      	pop	{r7, pc}
 8009132:	46c0      	nop			@ (mov r8, r8)
 8009134:	ffff0000 	.word	0xffff0000
 8009138:	00008003 	.word	0x00008003

0800913c <I2C_ITError>:
=======
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	0018      	movs	r0, r3
 80093ea:	f7fe ff28 	bl	800823e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80093ee:	46c0      	nop			@ (mov r8, r8)
 80093f0:	46bd      	mov	sp, r7
 80093f2:	b002      	add	sp, #8
 80093f4:	bd80      	pop	{r7, pc}
 80093f6:	46c0      	nop			@ (mov r8, r8)
 80093f8:	ffff0000 	.word	0xffff0000
 80093fc:	00008003 	.word	0x00008003

08009400 <I2C_ITError>:
>>>>>>> main
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
<<<<<<< HEAD
 800913c:	b580      	push	{r7, lr}
 800913e:	b084      	sub	sp, #16
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
 8009144:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8009146:	200f      	movs	r0, #15
 8009148:	183b      	adds	r3, r7, r0
 800914a:	687a      	ldr	r2, [r7, #4]
 800914c:	2141      	movs	r1, #65	@ 0x41
 800914e:	5c52      	ldrb	r2, [r2, r1]
 8009150:	701a      	strb	r2, [r3, #0]
=======
 8009400:	b580      	push	{r7, lr}
 8009402:	b084      	sub	sp, #16
 8009404:	af00      	add	r7, sp, #0
 8009406:	6078      	str	r0, [r7, #4]
 8009408:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800940a:	200f      	movs	r0, #15
 800940c:	183b      	adds	r3, r7, r0
 800940e:	687a      	ldr	r2, [r7, #4]
 8009410:	2141      	movs	r1, #65	@ 0x41
 8009412:	5c52      	ldrb	r2, [r2, r1]
 8009414:	701a      	strb	r2, [r3, #0]
>>>>>>> main

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
<<<<<<< HEAD
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	2242      	movs	r2, #66	@ 0x42
 8009156:	2100      	movs	r1, #0
 8009158:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	4a72      	ldr	r2, [pc, #456]	@ (8009328 <I2C_ITError+0x1ec>)
 800915e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	2200      	movs	r2, #0
 8009164:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800916a:	683b      	ldr	r3, [r7, #0]
 800916c:	431a      	orrs	r2, r3
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8009172:	183b      	adds	r3, r7, r0
 8009174:	781b      	ldrb	r3, [r3, #0]
 8009176:	2b28      	cmp	r3, #40	@ 0x28
 8009178:	d007      	beq.n	800918a <I2C_ITError+0x4e>
 800917a:	183b      	adds	r3, r7, r0
 800917c:	781b      	ldrb	r3, [r3, #0]
 800917e:	2b29      	cmp	r3, #41	@ 0x29
 8009180:	d003      	beq.n	800918a <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8009182:	183b      	adds	r3, r7, r0
 8009184:	781b      	ldrb	r3, [r3, #0]
 8009186:	2b2a      	cmp	r3, #42	@ 0x2a
 8009188:	d10c      	bne.n	80091a4 <I2C_ITError+0x68>
=======
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	2242      	movs	r2, #66	@ 0x42
 800941a:	2100      	movs	r1, #0
 800941c:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	4a72      	ldr	r2, [pc, #456]	@ (80095ec <I2C_ITError+0x1ec>)
 8009422:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	2200      	movs	r2, #0
 8009428:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800942e:	683b      	ldr	r3, [r7, #0]
 8009430:	431a      	orrs	r2, r3
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8009436:	183b      	adds	r3, r7, r0
 8009438:	781b      	ldrb	r3, [r3, #0]
 800943a:	2b28      	cmp	r3, #40	@ 0x28
 800943c:	d007      	beq.n	800944e <I2C_ITError+0x4e>
 800943e:	183b      	adds	r3, r7, r0
 8009440:	781b      	ldrb	r3, [r3, #0]
 8009442:	2b29      	cmp	r3, #41	@ 0x29
 8009444:	d003      	beq.n	800944e <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8009446:	183b      	adds	r3, r7, r0
 8009448:	781b      	ldrb	r3, [r3, #0]
 800944a:	2b2a      	cmp	r3, #42	@ 0x2a
 800944c:	d10c      	bne.n	8009468 <I2C_ITError+0x68>
>>>>>>> main
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
<<<<<<< HEAD
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	2103      	movs	r1, #3
 800918e:	0018      	movs	r0, r3
 8009190:	f000 fac2 	bl	8009718 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	2241      	movs	r2, #65	@ 0x41
 8009198:	2128      	movs	r1, #40	@ 0x28
 800919a:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	4a63      	ldr	r2, [pc, #396]	@ (800932c <I2C_ITError+0x1f0>)
 80091a0:	635a      	str	r2, [r3, #52]	@ 0x34
 80091a2:	e032      	b.n	800920a <I2C_ITError+0xce>
=======
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	2103      	movs	r1, #3
 8009452:	0018      	movs	r0, r3
 8009454:	f000 fac2 	bl	80099dc <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	2241      	movs	r2, #65	@ 0x41
 800945c:	2128      	movs	r1, #40	@ 0x28
 800945e:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	4a63      	ldr	r2, [pc, #396]	@ (80095f0 <I2C_ITError+0x1f0>)
 8009464:	635a      	str	r2, [r3, #52]	@ 0x34
 8009466:	e032      	b.n	80094ce <I2C_ITError+0xce>
>>>>>>> main
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
<<<<<<< HEAD
 80091a4:	4a62      	ldr	r2, [pc, #392]	@ (8009330 <I2C_ITError+0x1f4>)
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	0011      	movs	r1, r2
 80091aa:	0018      	movs	r0, r3
 80091ac:	f000 fab4 	bl	8009718 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	0018      	movs	r0, r3
 80091b4:	f000 f8ed 	bl	8009392 <I2C_Flush_TXDR>
=======
 8009468:	4a62      	ldr	r2, [pc, #392]	@ (80095f4 <I2C_ITError+0x1f4>)
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	0011      	movs	r1, r2
 800946e:	0018      	movs	r0, r3
 8009470:	f000 fab4 	bl	80099dc <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	0018      	movs	r0, r3
 8009478:	f000 f8ed 	bl	8009656 <I2C_Flush_TXDR>
>>>>>>> main

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
<<<<<<< HEAD
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	2241      	movs	r2, #65	@ 0x41
 80091bc:	5c9b      	ldrb	r3, [r3, r2]
 80091be:	b2db      	uxtb	r3, r3
 80091c0:	2b60      	cmp	r3, #96	@ 0x60
 80091c2:	d01f      	beq.n	8009204 <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	2241      	movs	r2, #65	@ 0x41
 80091c8:	2120      	movs	r1, #32
 80091ca:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	699b      	ldr	r3, [r3, #24]
 80091d2:	2220      	movs	r2, #32
 80091d4:	4013      	ands	r3, r2
 80091d6:	2b20      	cmp	r3, #32
 80091d8:	d114      	bne.n	8009204 <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	699b      	ldr	r3, [r3, #24]
 80091e0:	2210      	movs	r2, #16
 80091e2:	4013      	ands	r3, r2
 80091e4:	2b10      	cmp	r3, #16
 80091e6:	d109      	bne.n	80091fc <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	2210      	movs	r2, #16
 80091ee:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80091f4:	2204      	movs	r2, #4
 80091f6:	431a      	orrs	r2, r3
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	645a      	str	r2, [r3, #68]	@ 0x44
=======
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	2241      	movs	r2, #65	@ 0x41
 8009480:	5c9b      	ldrb	r3, [r3, r2]
 8009482:	b2db      	uxtb	r3, r3
 8009484:	2b60      	cmp	r3, #96	@ 0x60
 8009486:	d01f      	beq.n	80094c8 <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	2241      	movs	r2, #65	@ 0x41
 800948c:	2120      	movs	r1, #32
 800948e:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	699b      	ldr	r3, [r3, #24]
 8009496:	2220      	movs	r2, #32
 8009498:	4013      	ands	r3, r2
 800949a:	2b20      	cmp	r3, #32
 800949c:	d114      	bne.n	80094c8 <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	699b      	ldr	r3, [r3, #24]
 80094a4:	2210      	movs	r2, #16
 80094a6:	4013      	ands	r3, r2
 80094a8:	2b10      	cmp	r3, #16
 80094aa:	d109      	bne.n	80094c0 <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	2210      	movs	r2, #16
 80094b2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80094b8:	2204      	movs	r2, #4
 80094ba:	431a      	orrs	r2, r3
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	645a      	str	r2, [r3, #68]	@ 0x44
>>>>>>> main
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
<<<<<<< HEAD
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	2220      	movs	r2, #32
 8009202:	61da      	str	r2, [r3, #28]
=======
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	2220      	movs	r2, #32
 80094c6:	61da      	str	r2, [r3, #28]
>>>>>>> main
      }

    }
    hi2c->XferISR       = NULL;
<<<<<<< HEAD
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	2200      	movs	r2, #0
 8009208:	635a      	str	r2, [r3, #52]	@ 0x34
=======
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	2200      	movs	r2, #0
 80094cc:	635a      	str	r2, [r3, #52]	@ 0x34
>>>>>>> main
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
<<<<<<< HEAD
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800920e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009214:	2b00      	cmp	r3, #0
 8009216:	d03b      	beq.n	8009290 <I2C_ITError+0x154>
 8009218:	68bb      	ldr	r3, [r7, #8]
 800921a:	2b11      	cmp	r3, #17
 800921c:	d002      	beq.n	8009224 <I2C_ITError+0xe8>
 800921e:	68bb      	ldr	r3, [r7, #8]
 8009220:	2b21      	cmp	r3, #33	@ 0x21
 8009222:	d135      	bne.n	8009290 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	681a      	ldr	r2, [r3, #0]
 800922a:	2380      	movs	r3, #128	@ 0x80
 800922c:	01db      	lsls	r3, r3, #7
 800922e:	401a      	ands	r2, r3
 8009230:	2380      	movs	r3, #128	@ 0x80
 8009232:	01db      	lsls	r3, r3, #7
 8009234:	429a      	cmp	r2, r3
 8009236:	d107      	bne.n	8009248 <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	681a      	ldr	r2, [r3, #0]
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	493c      	ldr	r1, [pc, #240]	@ (8009334 <I2C_ITError+0x1f8>)
 8009244:	400a      	ands	r2, r1
 8009246:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800924c:	0018      	movs	r0, r3
 800924e:	f7fe f896 	bl	800737e <HAL_DMA_GetState>
 8009252:	0003      	movs	r3, r0
 8009254:	2b01      	cmp	r3, #1
 8009256:	d016      	beq.n	8009286 <I2C_ITError+0x14a>
=======
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094d2:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d03b      	beq.n	8009554 <I2C_ITError+0x154>
 80094dc:	68bb      	ldr	r3, [r7, #8]
 80094de:	2b11      	cmp	r3, #17
 80094e0:	d002      	beq.n	80094e8 <I2C_ITError+0xe8>
 80094e2:	68bb      	ldr	r3, [r7, #8]
 80094e4:	2b21      	cmp	r3, #33	@ 0x21
 80094e6:	d135      	bne.n	8009554 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	681a      	ldr	r2, [r3, #0]
 80094ee:	2380      	movs	r3, #128	@ 0x80
 80094f0:	01db      	lsls	r3, r3, #7
 80094f2:	401a      	ands	r2, r3
 80094f4:	2380      	movs	r3, #128	@ 0x80
 80094f6:	01db      	lsls	r3, r3, #7
 80094f8:	429a      	cmp	r2, r3
 80094fa:	d107      	bne.n	800950c <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	681a      	ldr	r2, [r3, #0]
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	493c      	ldr	r1, [pc, #240]	@ (80095f8 <I2C_ITError+0x1f8>)
 8009508:	400a      	ands	r2, r1
 800950a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009510:	0018      	movs	r0, r3
 8009512:	f7fe f896 	bl	8007642 <HAL_DMA_GetState>
 8009516:	0003      	movs	r3, r0
 8009518:	2b01      	cmp	r3, #1
 800951a:	d016      	beq.n	800954a <I2C_ITError+0x14a>
>>>>>>> main
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
<<<<<<< HEAD
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800925c:	4a36      	ldr	r2, [pc, #216]	@ (8009338 <I2C_ITError+0x1fc>)
 800925e:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	2240      	movs	r2, #64	@ 0x40
 8009264:	2100      	movs	r1, #0
 8009266:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800926c:	0018      	movs	r0, r3
 800926e:	f7fd ff91 	bl	8007194 <HAL_DMA_Abort_IT>
 8009272:	1e03      	subs	r3, r0, #0
 8009274:	d051      	beq.n	800931a <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800927a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009280:	0018      	movs	r0, r3
 8009282:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8009284:	e049      	b.n	800931a <I2C_ITError+0x1de>
=======
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009520:	4a36      	ldr	r2, [pc, #216]	@ (80095fc <I2C_ITError+0x1fc>)
 8009522:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	2240      	movs	r2, #64	@ 0x40
 8009528:	2100      	movs	r1, #0
 800952a:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009530:	0018      	movs	r0, r3
 8009532:	f7fd ff91 	bl	8007458 <HAL_DMA_Abort_IT>
 8009536:	1e03      	subs	r3, r0, #0
 8009538:	d051      	beq.n	80095de <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800953e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009544:	0018      	movs	r0, r3
 8009546:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8009548:	e049      	b.n	80095de <I2C_ITError+0x1de>
>>>>>>> main
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
<<<<<<< HEAD
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	0018      	movs	r0, r3
 800928a:	f000 f859 	bl	8009340 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800928e:	e044      	b.n	800931a <I2C_ITError+0x1de>
=======
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	0018      	movs	r0, r3
 800954e:	f000 f859 	bl	8009604 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8009552:	e044      	b.n	80095de <I2C_ITError+0x1de>
>>>>>>> main
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
<<<<<<< HEAD
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009294:	2b00      	cmp	r3, #0
 8009296:	d03b      	beq.n	8009310 <I2C_ITError+0x1d4>
 8009298:	68bb      	ldr	r3, [r7, #8]
 800929a:	2b12      	cmp	r3, #18
 800929c:	d002      	beq.n	80092a4 <I2C_ITError+0x168>
 800929e:	68bb      	ldr	r3, [r7, #8]
 80092a0:	2b22      	cmp	r3, #34	@ 0x22
 80092a2:	d135      	bne.n	8009310 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	681a      	ldr	r2, [r3, #0]
 80092aa:	2380      	movs	r3, #128	@ 0x80
 80092ac:	021b      	lsls	r3, r3, #8
 80092ae:	401a      	ands	r2, r3
 80092b0:	2380      	movs	r3, #128	@ 0x80
 80092b2:	021b      	lsls	r3, r3, #8
 80092b4:	429a      	cmp	r2, r3
 80092b6:	d107      	bne.n	80092c8 <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	681a      	ldr	r2, [r3, #0]
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	491e      	ldr	r1, [pc, #120]	@ (800933c <I2C_ITError+0x200>)
 80092c4:	400a      	ands	r2, r1
 80092c6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80092cc:	0018      	movs	r0, r3
 80092ce:	f7fe f856 	bl	800737e <HAL_DMA_GetState>
 80092d2:	0003      	movs	r3, r0
 80092d4:	2b01      	cmp	r3, #1
 80092d6:	d016      	beq.n	8009306 <I2C_ITError+0x1ca>
=======
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009558:	2b00      	cmp	r3, #0
 800955a:	d03b      	beq.n	80095d4 <I2C_ITError+0x1d4>
 800955c:	68bb      	ldr	r3, [r7, #8]
 800955e:	2b12      	cmp	r3, #18
 8009560:	d002      	beq.n	8009568 <I2C_ITError+0x168>
 8009562:	68bb      	ldr	r3, [r7, #8]
 8009564:	2b22      	cmp	r3, #34	@ 0x22
 8009566:	d135      	bne.n	80095d4 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	681a      	ldr	r2, [r3, #0]
 800956e:	2380      	movs	r3, #128	@ 0x80
 8009570:	021b      	lsls	r3, r3, #8
 8009572:	401a      	ands	r2, r3
 8009574:	2380      	movs	r3, #128	@ 0x80
 8009576:	021b      	lsls	r3, r3, #8
 8009578:	429a      	cmp	r2, r3
 800957a:	d107      	bne.n	800958c <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	681a      	ldr	r2, [r3, #0]
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	491e      	ldr	r1, [pc, #120]	@ (8009600 <I2C_ITError+0x200>)
 8009588:	400a      	ands	r2, r1
 800958a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009590:	0018      	movs	r0, r3
 8009592:	f7fe f856 	bl	8007642 <HAL_DMA_GetState>
 8009596:	0003      	movs	r3, r0
 8009598:	2b01      	cmp	r3, #1
 800959a:	d016      	beq.n	80095ca <I2C_ITError+0x1ca>
>>>>>>> main
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
<<<<<<< HEAD
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80092dc:	4a16      	ldr	r2, [pc, #88]	@ (8009338 <I2C_ITError+0x1fc>)
 80092de:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	2240      	movs	r2, #64	@ 0x40
 80092e4:	2100      	movs	r1, #0
 80092e6:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80092ec:	0018      	movs	r0, r3
 80092ee:	f7fd ff51 	bl	8007194 <HAL_DMA_Abort_IT>
 80092f2:	1e03      	subs	r3, r0, #0
 80092f4:	d013      	beq.n	800931e <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80092fa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009300:	0018      	movs	r0, r3
 8009302:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009304:	e00b      	b.n	800931e <I2C_ITError+0x1e2>
=======
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80095a0:	4a16      	ldr	r2, [pc, #88]	@ (80095fc <I2C_ITError+0x1fc>)
 80095a2:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	2240      	movs	r2, #64	@ 0x40
 80095a8:	2100      	movs	r1, #0
 80095aa:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80095b0:	0018      	movs	r0, r3
 80095b2:	f7fd ff51 	bl	8007458 <HAL_DMA_Abort_IT>
 80095b6:	1e03      	subs	r3, r0, #0
 80095b8:	d013      	beq.n	80095e2 <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80095be:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80095c4:	0018      	movs	r0, r3
 80095c6:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80095c8:	e00b      	b.n	80095e2 <I2C_ITError+0x1e2>
>>>>>>> main
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
<<<<<<< HEAD
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	0018      	movs	r0, r3
 800930a:	f000 f819 	bl	8009340 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800930e:	e006      	b.n	800931e <I2C_ITError+0x1e2>
=======
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	0018      	movs	r0, r3
 80095ce:	f000 f819 	bl	8009604 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80095d2:	e006      	b.n	80095e2 <I2C_ITError+0x1e2>
>>>>>>> main
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
<<<<<<< HEAD
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	0018      	movs	r0, r3
 8009314:	f000 f814 	bl	8009340 <I2C_TreatErrorCallback>
  }
}
 8009318:	e002      	b.n	8009320 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800931a:	46c0      	nop			@ (mov r8, r8)
 800931c:	e000      	b.n	8009320 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800931e:	46c0      	nop			@ (mov r8, r8)
}
 8009320:	46c0      	nop			@ (mov r8, r8)
 8009322:	46bd      	mov	sp, r7
 8009324:	b004      	add	sp, #16
 8009326:	bd80      	pop	{r7, pc}
 8009328:	ffff0000 	.word	0xffff0000
 800932c:	08008221 	.word	0x08008221
 8009330:	00008003 	.word	0x00008003
 8009334:	ffffbfff 	.word	0xffffbfff
 8009338:	0800954b 	.word	0x0800954b
 800933c:	ffff7fff 	.word	0xffff7fff

08009340 <I2C_TreatErrorCallback>:
=======
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	0018      	movs	r0, r3
 80095d8:	f000 f814 	bl	8009604 <I2C_TreatErrorCallback>
  }
}
 80095dc:	e002      	b.n	80095e4 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80095de:	46c0      	nop			@ (mov r8, r8)
 80095e0:	e000      	b.n	80095e4 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80095e2:	46c0      	nop			@ (mov r8, r8)
}
 80095e4:	46c0      	nop			@ (mov r8, r8)
 80095e6:	46bd      	mov	sp, r7
 80095e8:	b004      	add	sp, #16
 80095ea:	bd80      	pop	{r7, pc}
 80095ec:	ffff0000 	.word	0xffff0000
 80095f0:	080084e5 	.word	0x080084e5
 80095f4:	00008003 	.word	0x00008003
 80095f8:	ffffbfff 	.word	0xffffbfff
 80095fc:	0800980f 	.word	0x0800980f
 8009600:	ffff7fff 	.word	0xffff7fff

08009604 <I2C_TreatErrorCallback>:
>>>>>>> main
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
<<<<<<< HEAD
 8009340:	b580      	push	{r7, lr}
 8009342:	b082      	sub	sp, #8
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	2241      	movs	r2, #65	@ 0x41
 800934c:	5c9b      	ldrb	r3, [r3, r2]
 800934e:	b2db      	uxtb	r3, r3
 8009350:	2b60      	cmp	r3, #96	@ 0x60
 8009352:	d10f      	bne.n	8009374 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	2241      	movs	r2, #65	@ 0x41
 8009358:	2120      	movs	r1, #32
 800935a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	2200      	movs	r2, #0
 8009360:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	2240      	movs	r2, #64	@ 0x40
 8009366:	2100      	movs	r1, #0
 8009368:	5499      	strb	r1, [r3, r2]
=======
 8009604:	b580      	push	{r7, lr}
 8009606:	b082      	sub	sp, #8
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	2241      	movs	r2, #65	@ 0x41
 8009610:	5c9b      	ldrb	r3, [r3, r2]
 8009612:	b2db      	uxtb	r3, r3
 8009614:	2b60      	cmp	r3, #96	@ 0x60
 8009616:	d10f      	bne.n	8009638 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	2241      	movs	r2, #65	@ 0x41
 800961c:	2120      	movs	r1, #32
 800961e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	2200      	movs	r2, #0
 8009624:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	2240      	movs	r2, #64	@ 0x40
 800962a:	2100      	movs	r1, #0
 800962c:	5499      	strb	r1, [r3, r2]
>>>>>>> main

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
<<<<<<< HEAD
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	0018      	movs	r0, r3
 800936e:	f7fe fe24 	bl	8007fba <HAL_I2C_AbortCpltCallback>
=======
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	0018      	movs	r0, r3
 8009632:	f7fe fe24 	bl	800827e <HAL_I2C_AbortCpltCallback>
>>>>>>> main
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
<<<<<<< HEAD
 8009372:	e00a      	b.n	800938a <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	2200      	movs	r2, #0
 8009378:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	2240      	movs	r2, #64	@ 0x40
 800937e:	2100      	movs	r1, #0
 8009380:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	0018      	movs	r0, r3
 8009386:	f7fe fe10 	bl	8007faa <HAL_I2C_ErrorCallback>
}
 800938a:	46c0      	nop			@ (mov r8, r8)
 800938c:	46bd      	mov	sp, r7
 800938e:	b002      	add	sp, #8
 8009390:	bd80      	pop	{r7, pc}

08009392 <I2C_Flush_TXDR>:
=======
 8009636:	e00a      	b.n	800964e <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	2200      	movs	r2, #0
 800963c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	2240      	movs	r2, #64	@ 0x40
 8009642:	2100      	movs	r1, #0
 8009644:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	0018      	movs	r0, r3
 800964a:	f7fe fe10 	bl	800826e <HAL_I2C_ErrorCallback>
}
 800964e:	46c0      	nop			@ (mov r8, r8)
 8009650:	46bd      	mov	sp, r7
 8009652:	b002      	add	sp, #8
 8009654:	bd80      	pop	{r7, pc}

08009656 <I2C_Flush_TXDR>:
>>>>>>> main
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
<<<<<<< HEAD
 8009392:	b580      	push	{r7, lr}
 8009394:	b082      	sub	sp, #8
 8009396:	af00      	add	r7, sp, #0
 8009398:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	699b      	ldr	r3, [r3, #24]
 80093a0:	2202      	movs	r2, #2
 80093a2:	4013      	ands	r3, r2
 80093a4:	2b02      	cmp	r3, #2
 80093a6:	d103      	bne.n	80093b0 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	2200      	movs	r2, #0
 80093ae:	629a      	str	r2, [r3, #40]	@ 0x28
=======
 8009656:	b580      	push	{r7, lr}
 8009658:	b082      	sub	sp, #8
 800965a:	af00      	add	r7, sp, #0
 800965c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	699b      	ldr	r3, [r3, #24]
 8009664:	2202      	movs	r2, #2
 8009666:	4013      	ands	r3, r2
 8009668:	2b02      	cmp	r3, #2
 800966a:	d103      	bne.n	8009674 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	2200      	movs	r2, #0
 8009672:	629a      	str	r2, [r3, #40]	@ 0x28
>>>>>>> main
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
<<<<<<< HEAD
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	699b      	ldr	r3, [r3, #24]
 80093b6:	2201      	movs	r2, #1
 80093b8:	4013      	ands	r3, r2
 80093ba:	2b01      	cmp	r3, #1
 80093bc:	d007      	beq.n	80093ce <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	699a      	ldr	r2, [r3, #24]
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	2101      	movs	r1, #1
 80093ca:	430a      	orrs	r2, r1
 80093cc:	619a      	str	r2, [r3, #24]
  }
}
 80093ce:	46c0      	nop			@ (mov r8, r8)
 80093d0:	46bd      	mov	sp, r7
 80093d2:	b002      	add	sp, #8
 80093d4:	bd80      	pop	{r7, pc}
	...

080093d8 <I2C_DMAMasterTransmitCplt>:
=======
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	699b      	ldr	r3, [r3, #24]
 800967a:	2201      	movs	r2, #1
 800967c:	4013      	ands	r3, r2
 800967e:	2b01      	cmp	r3, #1
 8009680:	d007      	beq.n	8009692 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	699a      	ldr	r2, [r3, #24]
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	2101      	movs	r1, #1
 800968e:	430a      	orrs	r2, r1
 8009690:	619a      	str	r2, [r3, #24]
  }
}
 8009692:	46c0      	nop			@ (mov r8, r8)
 8009694:	46bd      	mov	sp, r7
 8009696:	b002      	add	sp, #8
 8009698:	bd80      	pop	{r7, pc}
	...

0800969c <I2C_DMAMasterTransmitCplt>:
>>>>>>> main
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 80093d8:	b580      	push	{r7, lr}
 80093da:	b084      	sub	sp, #16
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093e4:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	681a      	ldr	r2, [r3, #0]
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	4920      	ldr	r1, [pc, #128]	@ (8009474 <I2C_DMAMasterTransmitCplt+0x9c>)
 80093f2:	400a      	ands	r2, r1
 80093f4:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80093fa:	b29b      	uxth	r3, r3
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d105      	bne.n	800940c <I2C_DMAMasterTransmitCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	2120      	movs	r1, #32
 8009404:	0018      	movs	r0, r3
 8009406:	f000 f8f9 	bl	80095fc <I2C_Enable_IRQ>
=======
 800969c:	b580      	push	{r7, lr}
 800969e:	b084      	sub	sp, #16
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096a8:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	681a      	ldr	r2, [r3, #0]
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	4920      	ldr	r1, [pc, #128]	@ (8009738 <I2C_DMAMasterTransmitCplt+0x9c>)
 80096b6:	400a      	ands	r2, r1
 80096b8:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80096be:	b29b      	uxth	r3, r3
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d105      	bne.n	80096d0 <I2C_DMAMasterTransmitCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	2120      	movs	r1, #32
 80096c8:	0018      	movs	r0, r3
 80096ca:	f000 f8f9 	bl	80098c0 <I2C_Enable_IRQ>
>>>>>>> main
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
<<<<<<< HEAD
 800940a:	e02e      	b.n	800946a <I2C_DMAMasterTransmitCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009410:	68fa      	ldr	r2, [r7, #12]
 8009412:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8009414:	189a      	adds	r2, r3, r2
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800941e:	b29b      	uxth	r3, r3
 8009420:	2bff      	cmp	r3, #255	@ 0xff
 8009422:	d903      	bls.n	800942c <I2C_DMAMasterTransmitCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	22ff      	movs	r2, #255	@ 0xff
 8009428:	851a      	strh	r2, [r3, #40]	@ 0x28
 800942a:	e004      	b.n	8009436 <I2C_DMAMasterTransmitCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009430:	b29a      	uxth	r2, r3
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800943e:	0019      	movs	r1, r3
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	3328      	adds	r3, #40	@ 0x28
 8009446:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800944c:	f7fd fdfc 	bl	8007048 <HAL_DMA_Start_IT>
 8009450:	1e03      	subs	r3, r0, #0
 8009452:	d005      	beq.n	8009460 <I2C_DMAMasterTransmitCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	2110      	movs	r1, #16
 8009458:	0018      	movs	r0, r3
 800945a:	f7ff fe6f 	bl	800913c <I2C_ITError>
}
 800945e:	e004      	b.n	800946a <I2C_DMAMasterTransmitCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	2140      	movs	r1, #64	@ 0x40
 8009464:	0018      	movs	r0, r3
 8009466:	f000 f8c9 	bl	80095fc <I2C_Enable_IRQ>
}
 800946a:	46c0      	nop			@ (mov r8, r8)
 800946c:	46bd      	mov	sp, r7
 800946e:	b004      	add	sp, #16
 8009470:	bd80      	pop	{r7, pc}
 8009472:	46c0      	nop			@ (mov r8, r8)
 8009474:	ffffbfff 	.word	0xffffbfff

08009478 <I2C_DMAMasterReceiveCplt>:
=======
 80096ce:	e02e      	b.n	800972e <I2C_DMAMasterTransmitCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096d4:	68fa      	ldr	r2, [r7, #12]
 80096d6:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 80096d8:	189a      	adds	r2, r3, r2
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80096e2:	b29b      	uxth	r3, r3
 80096e4:	2bff      	cmp	r3, #255	@ 0xff
 80096e6:	d903      	bls.n	80096f0 <I2C_DMAMasterTransmitCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	22ff      	movs	r2, #255	@ 0xff
 80096ec:	851a      	strh	r2, [r3, #40]	@ 0x28
 80096ee:	e004      	b.n	80096fa <I2C_DMAMasterTransmitCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80096f4:	b29a      	uxth	r2, r3
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009702:	0019      	movs	r1, r3
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	3328      	adds	r3, #40	@ 0x28
 800970a:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8009710:	f7fd fdfc 	bl	800730c <HAL_DMA_Start_IT>
 8009714:	1e03      	subs	r3, r0, #0
 8009716:	d005      	beq.n	8009724 <I2C_DMAMasterTransmitCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	2110      	movs	r1, #16
 800971c:	0018      	movs	r0, r3
 800971e:	f7ff fe6f 	bl	8009400 <I2C_ITError>
}
 8009722:	e004      	b.n	800972e <I2C_DMAMasterTransmitCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	2140      	movs	r1, #64	@ 0x40
 8009728:	0018      	movs	r0, r3
 800972a:	f000 f8c9 	bl	80098c0 <I2C_Enable_IRQ>
}
 800972e:	46c0      	nop			@ (mov r8, r8)
 8009730:	46bd      	mov	sp, r7
 8009732:	b004      	add	sp, #16
 8009734:	bd80      	pop	{r7, pc}
 8009736:	46c0      	nop			@ (mov r8, r8)
 8009738:	ffffbfff 	.word	0xffffbfff

0800973c <I2C_DMAMasterReceiveCplt>:
>>>>>>> main
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8009478:	b580      	push	{r7, lr}
 800947a:	b084      	sub	sp, #16
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009484:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	681a      	ldr	r2, [r3, #0]
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	4920      	ldr	r1, [pc, #128]	@ (8009514 <I2C_DMAMasterReceiveCplt+0x9c>)
 8009492:	400a      	ands	r2, r1
 8009494:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800949a:	b29b      	uxth	r3, r3
 800949c:	2b00      	cmp	r3, #0
 800949e:	d105      	bne.n	80094ac <I2C_DMAMasterReceiveCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	2120      	movs	r1, #32
 80094a4:	0018      	movs	r0, r3
 80094a6:	f000 f8a9 	bl	80095fc <I2C_Enable_IRQ>
=======
 800973c:	b580      	push	{r7, lr}
 800973e:	b084      	sub	sp, #16
 8009740:	af00      	add	r7, sp, #0
 8009742:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009748:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	681a      	ldr	r2, [r3, #0]
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	4920      	ldr	r1, [pc, #128]	@ (80097d8 <I2C_DMAMasterReceiveCplt+0x9c>)
 8009756:	400a      	ands	r2, r1
 8009758:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800975e:	b29b      	uxth	r3, r3
 8009760:	2b00      	cmp	r3, #0
 8009762:	d105      	bne.n	8009770 <I2C_DMAMasterReceiveCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	2120      	movs	r1, #32
 8009768:	0018      	movs	r0, r3
 800976a:	f000 f8a9 	bl	80098c0 <I2C_Enable_IRQ>
>>>>>>> main
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
<<<<<<< HEAD
 80094aa:	e02e      	b.n	800950a <I2C_DMAMasterReceiveCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094b0:	68fa      	ldr	r2, [r7, #12]
 80094b2:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 80094b4:	189a      	adds	r2, r3, r2
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80094be:	b29b      	uxth	r3, r3
 80094c0:	2bff      	cmp	r3, #255	@ 0xff
 80094c2:	d903      	bls.n	80094cc <I2C_DMAMasterReceiveCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	22ff      	movs	r2, #255	@ 0xff
 80094c8:	851a      	strh	r2, [r3, #40]	@ 0x28
 80094ca:	e004      	b.n	80094d6 <I2C_DMAMasterReceiveCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80094d0:	b29a      	uxth	r2, r3
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	3324      	adds	r3, #36	@ 0x24
 80094e0:	0019      	movs	r1, r3
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094e6:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 80094ec:	f7fd fdac 	bl	8007048 <HAL_DMA_Start_IT>
 80094f0:	1e03      	subs	r3, r0, #0
 80094f2:	d005      	beq.n	8009500 <I2C_DMAMasterReceiveCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	2110      	movs	r1, #16
 80094f8:	0018      	movs	r0, r3
 80094fa:	f7ff fe1f 	bl	800913c <I2C_ITError>
}
 80094fe:	e004      	b.n	800950a <I2C_DMAMasterReceiveCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	2140      	movs	r1, #64	@ 0x40
 8009504:	0018      	movs	r0, r3
 8009506:	f000 f879 	bl	80095fc <I2C_Enable_IRQ>
}
 800950a:	46c0      	nop			@ (mov r8, r8)
 800950c:	46bd      	mov	sp, r7
 800950e:	b004      	add	sp, #16
 8009510:	bd80      	pop	{r7, pc}
 8009512:	46c0      	nop			@ (mov r8, r8)
 8009514:	ffff7fff 	.word	0xffff7fff

08009518 <I2C_DMAError>:
=======
 800976e:	e02e      	b.n	80097ce <I2C_DMAMasterReceiveCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009774:	68fa      	ldr	r2, [r7, #12]
 8009776:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8009778:	189a      	adds	r2, r3, r2
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009782:	b29b      	uxth	r3, r3
 8009784:	2bff      	cmp	r3, #255	@ 0xff
 8009786:	d903      	bls.n	8009790 <I2C_DMAMasterReceiveCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	22ff      	movs	r2, #255	@ 0xff
 800978c:	851a      	strh	r2, [r3, #40]	@ 0x28
 800978e:	e004      	b.n	800979a <I2C_DMAMasterReceiveCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009794:	b29a      	uxth	r2, r3
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	3324      	adds	r3, #36	@ 0x24
 80097a4:	0019      	movs	r1, r3
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097aa:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 80097b0:	f7fd fdac 	bl	800730c <HAL_DMA_Start_IT>
 80097b4:	1e03      	subs	r3, r0, #0
 80097b6:	d005      	beq.n	80097c4 <I2C_DMAMasterReceiveCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	2110      	movs	r1, #16
 80097bc:	0018      	movs	r0, r3
 80097be:	f7ff fe1f 	bl	8009400 <I2C_ITError>
}
 80097c2:	e004      	b.n	80097ce <I2C_DMAMasterReceiveCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	2140      	movs	r1, #64	@ 0x40
 80097c8:	0018      	movs	r0, r3
 80097ca:	f000 f879 	bl	80098c0 <I2C_Enable_IRQ>
}
 80097ce:	46c0      	nop			@ (mov r8, r8)
 80097d0:	46bd      	mov	sp, r7
 80097d2:	b004      	add	sp, #16
 80097d4:	bd80      	pop	{r7, pc}
 80097d6:	46c0      	nop			@ (mov r8, r8)
 80097d8:	ffff7fff 	.word	0xffff7fff

080097dc <I2C_DMAError>:
>>>>>>> main
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8009518:	b580      	push	{r7, lr}
 800951a:	b084      	sub	sp, #16
 800951c:	af00      	add	r7, sp, #0
 800951e:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009524:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	685a      	ldr	r2, [r3, #4]
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	2180      	movs	r1, #128	@ 0x80
 8009532:	0209      	lsls	r1, r1, #8
 8009534:	430a      	orrs	r2, r1
 8009536:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	2110      	movs	r1, #16
 800953c:	0018      	movs	r0, r3
 800953e:	f7ff fdfd 	bl	800913c <I2C_ITError>
}
 8009542:	46c0      	nop			@ (mov r8, r8)
 8009544:	46bd      	mov	sp, r7
 8009546:	b004      	add	sp, #16
 8009548:	bd80      	pop	{r7, pc}

0800954a <I2C_DMAAbort>:
=======
 80097dc:	b580      	push	{r7, lr}
 80097de:	b084      	sub	sp, #16
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097e8:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	685a      	ldr	r2, [r3, #4]
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	2180      	movs	r1, #128	@ 0x80
 80097f6:	0209      	lsls	r1, r1, #8
 80097f8:	430a      	orrs	r2, r1
 80097fa:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	2110      	movs	r1, #16
 8009800:	0018      	movs	r0, r3
 8009802:	f7ff fdfd 	bl	8009400 <I2C_ITError>
}
 8009806:	46c0      	nop			@ (mov r8, r8)
 8009808:	46bd      	mov	sp, r7
 800980a:	b004      	add	sp, #16
 800980c:	bd80      	pop	{r7, pc}

0800980e <I2C_DMAAbort>:
>>>>>>> main
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 800954a:	b580      	push	{r7, lr}
 800954c:	b084      	sub	sp, #16
 800954e:	af00      	add	r7, sp, #0
 8009550:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009556:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800955c:	2b00      	cmp	r3, #0
 800955e:	d003      	beq.n	8009568 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009564:	2200      	movs	r2, #0
 8009566:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800956c:	2b00      	cmp	r3, #0
 800956e:	d003      	beq.n	8009578 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009574:	2200      	movs	r2, #0
 8009576:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	0018      	movs	r0, r3
 800957c:	f7ff fee0 	bl	8009340 <I2C_TreatErrorCallback>
}
 8009580:	46c0      	nop			@ (mov r8, r8)
 8009582:	46bd      	mov	sp, r7
 8009584:	b004      	add	sp, #16
 8009586:	bd80      	pop	{r7, pc}

08009588 <I2C_TransferConfig>:
=======
 800980e:	b580      	push	{r7, lr}
 8009810:	b084      	sub	sp, #16
 8009812:	af00      	add	r7, sp, #0
 8009814:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800981a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009820:	2b00      	cmp	r3, #0
 8009822:	d003      	beq.n	800982c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009828:	2200      	movs	r2, #0
 800982a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009830:	2b00      	cmp	r3, #0
 8009832:	d003      	beq.n	800983c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009838:	2200      	movs	r2, #0
 800983a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	0018      	movs	r0, r3
 8009840:	f7ff fee0 	bl	8009604 <I2C_TreatErrorCallback>
}
 8009844:	46c0      	nop			@ (mov r8, r8)
 8009846:	46bd      	mov	sp, r7
 8009848:	b004      	add	sp, #16
 800984a:	bd80      	pop	{r7, pc}

0800984c <I2C_TransferConfig>:
>>>>>>> main
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
<<<<<<< HEAD
 8009588:	b590      	push	{r4, r7, lr}
 800958a:	b087      	sub	sp, #28
 800958c:	af00      	add	r7, sp, #0
 800958e:	60f8      	str	r0, [r7, #12]
 8009590:	0008      	movs	r0, r1
 8009592:	0011      	movs	r1, r2
 8009594:	607b      	str	r3, [r7, #4]
 8009596:	240a      	movs	r4, #10
 8009598:	193b      	adds	r3, r7, r4
 800959a:	1c02      	adds	r2, r0, #0
 800959c:	801a      	strh	r2, [r3, #0]
 800959e:	2009      	movs	r0, #9
 80095a0:	183b      	adds	r3, r7, r0
 80095a2:	1c0a      	adds	r2, r1, #0
 80095a4:	701a      	strb	r2, [r3, #0]
=======
 800984c:	b590      	push	{r4, r7, lr}
 800984e:	b087      	sub	sp, #28
 8009850:	af00      	add	r7, sp, #0
 8009852:	60f8      	str	r0, [r7, #12]
 8009854:	0008      	movs	r0, r1
 8009856:	0011      	movs	r1, r2
 8009858:	607b      	str	r3, [r7, #4]
 800985a:	240a      	movs	r4, #10
 800985c:	193b      	adds	r3, r7, r4
 800985e:	1c02      	adds	r2, r0, #0
 8009860:	801a      	strh	r2, [r3, #0]
 8009862:	2009      	movs	r0, #9
 8009864:	183b      	adds	r3, r7, r0
 8009866:	1c0a      	adds	r2, r1, #0
 8009868:	701a      	strb	r2, [r3, #0]
>>>>>>> main
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
<<<<<<< HEAD
 80095a6:	193b      	adds	r3, r7, r4
 80095a8:	881b      	ldrh	r3, [r3, #0]
 80095aa:	059b      	lsls	r3, r3, #22
 80095ac:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80095ae:	183b      	adds	r3, r7, r0
 80095b0:	781b      	ldrb	r3, [r3, #0]
 80095b2:	0419      	lsls	r1, r3, #16
 80095b4:	23ff      	movs	r3, #255	@ 0xff
 80095b6:	041b      	lsls	r3, r3, #16
 80095b8:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80095ba:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80095c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095c2:	4313      	orrs	r3, r2
 80095c4:	005b      	lsls	r3, r3, #1
 80095c6:	085b      	lsrs	r3, r3, #1
 80095c8:	617b      	str	r3, [r7, #20]
=======
 800986a:	193b      	adds	r3, r7, r4
 800986c:	881b      	ldrh	r3, [r3, #0]
 800986e:	059b      	lsls	r3, r3, #22
 8009870:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009872:	183b      	adds	r3, r7, r0
 8009874:	781b      	ldrb	r3, [r3, #0]
 8009876:	0419      	lsls	r1, r3, #16
 8009878:	23ff      	movs	r3, #255	@ 0xff
 800987a:	041b      	lsls	r3, r3, #16
 800987c:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800987e:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009884:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009886:	4313      	orrs	r3, r2
 8009888:	005b      	lsls	r3, r3, #1
 800988a:	085b      	lsrs	r3, r3, #1
 800988c:	617b      	str	r3, [r7, #20]
>>>>>>> main
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
<<<<<<< HEAD
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	685b      	ldr	r3, [r3, #4]
 80095d0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80095d2:	0d51      	lsrs	r1, r2, #21
 80095d4:	2280      	movs	r2, #128	@ 0x80
 80095d6:	00d2      	lsls	r2, r2, #3
 80095d8:	400a      	ands	r2, r1
 80095da:	4907      	ldr	r1, [pc, #28]	@ (80095f8 <I2C_TransferConfig+0x70>)
 80095dc:	430a      	orrs	r2, r1
 80095de:	43d2      	mvns	r2, r2
 80095e0:	401a      	ands	r2, r3
 80095e2:	0011      	movs	r1, r2
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	697a      	ldr	r2, [r7, #20]
 80095ea:	430a      	orrs	r2, r1
 80095ec:	605a      	str	r2, [r3, #4]
=======
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	685b      	ldr	r3, [r3, #4]
 8009894:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009896:	0d51      	lsrs	r1, r2, #21
 8009898:	2280      	movs	r2, #128	@ 0x80
 800989a:	00d2      	lsls	r2, r2, #3
 800989c:	400a      	ands	r2, r1
 800989e:	4907      	ldr	r1, [pc, #28]	@ (80098bc <I2C_TransferConfig+0x70>)
 80098a0:	430a      	orrs	r2, r1
 80098a2:	43d2      	mvns	r2, r2
 80098a4:	401a      	ands	r2, r3
 80098a6:	0011      	movs	r1, r2
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	697a      	ldr	r2, [r7, #20]
 80098ae:	430a      	orrs	r2, r1
 80098b0:	605a      	str	r2, [r3, #4]
>>>>>>> main
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
<<<<<<< HEAD
 80095ee:	46c0      	nop			@ (mov r8, r8)
 80095f0:	46bd      	mov	sp, r7
 80095f2:	b007      	add	sp, #28
 80095f4:	bd90      	pop	{r4, r7, pc}
 80095f6:	46c0      	nop			@ (mov r8, r8)
 80095f8:	03ff63ff 	.word	0x03ff63ff

080095fc <I2C_Enable_IRQ>:
=======
 80098b2:	46c0      	nop			@ (mov r8, r8)
 80098b4:	46bd      	mov	sp, r7
 80098b6:	b007      	add	sp, #28
 80098b8:	bd90      	pop	{r4, r7, pc}
 80098ba:	46c0      	nop			@ (mov r8, r8)
 80098bc:	03ff63ff 	.word	0x03ff63ff

080098c0 <I2C_Enable_IRQ>:
>>>>>>> main
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
<<<<<<< HEAD
 80095fc:	b580      	push	{r7, lr}
 80095fe:	b084      	sub	sp, #16
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
 8009604:	000a      	movs	r2, r1
 8009606:	1cbb      	adds	r3, r7, #2
 8009608:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 800960a:	2300      	movs	r3, #0
 800960c:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009612:	4b3e      	ldr	r3, [pc, #248]	@ (800970c <I2C_Enable_IRQ+0x110>)
 8009614:	429a      	cmp	r2, r3
 8009616:	d035      	beq.n	8009684 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800961c:	4b3c      	ldr	r3, [pc, #240]	@ (8009710 <I2C_Enable_IRQ+0x114>)
 800961e:	429a      	cmp	r2, r3
 8009620:	d030      	beq.n	8009684 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8009626:	4b3b      	ldr	r3, [pc, #236]	@ (8009714 <I2C_Enable_IRQ+0x118>)
 8009628:	429a      	cmp	r2, r3
 800962a:	d02b      	beq.n	8009684 <I2C_Enable_IRQ+0x88>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800962c:	1cbb      	adds	r3, r7, #2
 800962e:	2200      	movs	r2, #0
 8009630:	5e9b      	ldrsh	r3, [r3, r2]
 8009632:	2b00      	cmp	r3, #0
 8009634:	da03      	bge.n	800963e <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	22b8      	movs	r2, #184	@ 0xb8
 800963a:	4313      	orrs	r3, r2
 800963c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800963e:	1cbb      	adds	r3, r7, #2
 8009640:	881b      	ldrh	r3, [r3, #0]
 8009642:	2201      	movs	r2, #1
 8009644:	4013      	ands	r3, r2
 8009646:	d003      	beq.n	8009650 <I2C_Enable_IRQ+0x54>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	22f2      	movs	r2, #242	@ 0xf2
 800964c:	4313      	orrs	r3, r2
 800964e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8009650:	1cbb      	adds	r3, r7, #2
 8009652:	881b      	ldrh	r3, [r3, #0]
 8009654:	2202      	movs	r2, #2
 8009656:	4013      	ands	r3, r2
 8009658:	d003      	beq.n	8009662 <I2C_Enable_IRQ+0x66>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	22f4      	movs	r2, #244	@ 0xf4
 800965e:	4313      	orrs	r3, r2
 8009660:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8009662:	1cbb      	adds	r3, r7, #2
 8009664:	881b      	ldrh	r3, [r3, #0]
 8009666:	2b10      	cmp	r3, #16
 8009668:	d103      	bne.n	8009672 <I2C_Enable_IRQ+0x76>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	2290      	movs	r2, #144	@ 0x90
 800966e:	4313      	orrs	r3, r2
 8009670:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8009672:	1cbb      	adds	r3, r7, #2
 8009674:	881b      	ldrh	r3, [r3, #0]
 8009676:	2b20      	cmp	r3, #32
 8009678:	d13c      	bne.n	80096f4 <I2C_Enable_IRQ+0xf8>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	2220      	movs	r2, #32
 800967e:	4313      	orrs	r3, r2
 8009680:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8009682:	e037      	b.n	80096f4 <I2C_Enable_IRQ+0xf8>
=======
 80098c0:	b580      	push	{r7, lr}
 80098c2:	b084      	sub	sp, #16
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	6078      	str	r0, [r7, #4]
 80098c8:	000a      	movs	r2, r1
 80098ca:	1cbb      	adds	r3, r7, #2
 80098cc:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 80098ce:	2300      	movs	r3, #0
 80098d0:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80098d6:	4b3e      	ldr	r3, [pc, #248]	@ (80099d0 <I2C_Enable_IRQ+0x110>)
 80098d8:	429a      	cmp	r2, r3
 80098da:	d035      	beq.n	8009948 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80098e0:	4b3c      	ldr	r3, [pc, #240]	@ (80099d4 <I2C_Enable_IRQ+0x114>)
 80098e2:	429a      	cmp	r2, r3
 80098e4:	d030      	beq.n	8009948 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80098ea:	4b3b      	ldr	r3, [pc, #236]	@ (80099d8 <I2C_Enable_IRQ+0x118>)
 80098ec:	429a      	cmp	r2, r3
 80098ee:	d02b      	beq.n	8009948 <I2C_Enable_IRQ+0x88>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80098f0:	1cbb      	adds	r3, r7, #2
 80098f2:	2200      	movs	r2, #0
 80098f4:	5e9b      	ldrsh	r3, [r3, r2]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	da03      	bge.n	8009902 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	22b8      	movs	r2, #184	@ 0xb8
 80098fe:	4313      	orrs	r3, r2
 8009900:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8009902:	1cbb      	adds	r3, r7, #2
 8009904:	881b      	ldrh	r3, [r3, #0]
 8009906:	2201      	movs	r2, #1
 8009908:	4013      	ands	r3, r2
 800990a:	d003      	beq.n	8009914 <I2C_Enable_IRQ+0x54>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	22f2      	movs	r2, #242	@ 0xf2
 8009910:	4313      	orrs	r3, r2
 8009912:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8009914:	1cbb      	adds	r3, r7, #2
 8009916:	881b      	ldrh	r3, [r3, #0]
 8009918:	2202      	movs	r2, #2
 800991a:	4013      	ands	r3, r2
 800991c:	d003      	beq.n	8009926 <I2C_Enable_IRQ+0x66>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	22f4      	movs	r2, #244	@ 0xf4
 8009922:	4313      	orrs	r3, r2
 8009924:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8009926:	1cbb      	adds	r3, r7, #2
 8009928:	881b      	ldrh	r3, [r3, #0]
 800992a:	2b10      	cmp	r3, #16
 800992c:	d103      	bne.n	8009936 <I2C_Enable_IRQ+0x76>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	2290      	movs	r2, #144	@ 0x90
 8009932:	4313      	orrs	r3, r2
 8009934:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8009936:	1cbb      	adds	r3, r7, #2
 8009938:	881b      	ldrh	r3, [r3, #0]
 800993a:	2b20      	cmp	r3, #32
 800993c:	d13c      	bne.n	80099b8 <I2C_Enable_IRQ+0xf8>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	2220      	movs	r2, #32
 8009942:	4313      	orrs	r3, r2
 8009944:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8009946:	e037      	b.n	80099b8 <I2C_Enable_IRQ+0xf8>
>>>>>>> main
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
<<<<<<< HEAD
 8009684:	1cbb      	adds	r3, r7, #2
 8009686:	2200      	movs	r2, #0
 8009688:	5e9b      	ldrsh	r3, [r3, r2]
 800968a:	2b00      	cmp	r3, #0
 800968c:	da03      	bge.n	8009696 <I2C_Enable_IRQ+0x9a>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	22b8      	movs	r2, #184	@ 0xb8
 8009692:	4313      	orrs	r3, r2
 8009694:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8009696:	1cbb      	adds	r3, r7, #2
 8009698:	881b      	ldrh	r3, [r3, #0]
 800969a:	2201      	movs	r2, #1
 800969c:	4013      	ands	r3, r2
 800969e:	d003      	beq.n	80096a8 <I2C_Enable_IRQ+0xac>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	22f2      	movs	r2, #242	@ 0xf2
 80096a4:	4313      	orrs	r3, r2
 80096a6:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80096a8:	1cbb      	adds	r3, r7, #2
 80096aa:	881b      	ldrh	r3, [r3, #0]
 80096ac:	2202      	movs	r2, #2
 80096ae:	4013      	ands	r3, r2
 80096b0:	d003      	beq.n	80096ba <I2C_Enable_IRQ+0xbe>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	22f4      	movs	r2, #244	@ 0xf4
 80096b6:	4313      	orrs	r3, r2
 80096b8:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80096ba:	1cbb      	adds	r3, r7, #2
 80096bc:	881b      	ldrh	r3, [r3, #0]
 80096be:	2b10      	cmp	r3, #16
 80096c0:	d103      	bne.n	80096ca <I2C_Enable_IRQ+0xce>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	2290      	movs	r2, #144	@ 0x90
 80096c6:	4313      	orrs	r3, r2
 80096c8:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80096ca:	1cbb      	adds	r3, r7, #2
 80096cc:	881b      	ldrh	r3, [r3, #0]
 80096ce:	2b20      	cmp	r3, #32
 80096d0:	d103      	bne.n	80096da <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	2260      	movs	r2, #96	@ 0x60
 80096d6:	4313      	orrs	r3, r2
 80096d8:	60fb      	str	r3, [r7, #12]
    }

    if ((hi2c->XferISR != I2C_Mem_ISR_DMA) && (InterruptRequest == I2C_XFER_RELOAD_IT))
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80096de:	4b0d      	ldr	r3, [pc, #52]	@ (8009714 <I2C_Enable_IRQ+0x118>)
 80096e0:	429a      	cmp	r2, r3
 80096e2:	d007      	beq.n	80096f4 <I2C_Enable_IRQ+0xf8>
 80096e4:	1cbb      	adds	r3, r7, #2
 80096e6:	881b      	ldrh	r3, [r3, #0]
 80096e8:	2b40      	cmp	r3, #64	@ 0x40
 80096ea:	d103      	bne.n	80096f4 <I2C_Enable_IRQ+0xf8>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	2240      	movs	r2, #64	@ 0x40
 80096f0:	4313      	orrs	r3, r2
 80096f2:	60fb      	str	r3, [r7, #12]
=======
 8009948:	1cbb      	adds	r3, r7, #2
 800994a:	2200      	movs	r2, #0
 800994c:	5e9b      	ldrsh	r3, [r3, r2]
 800994e:	2b00      	cmp	r3, #0
 8009950:	da03      	bge.n	800995a <I2C_Enable_IRQ+0x9a>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	22b8      	movs	r2, #184	@ 0xb8
 8009956:	4313      	orrs	r3, r2
 8009958:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800995a:	1cbb      	adds	r3, r7, #2
 800995c:	881b      	ldrh	r3, [r3, #0]
 800995e:	2201      	movs	r2, #1
 8009960:	4013      	ands	r3, r2
 8009962:	d003      	beq.n	800996c <I2C_Enable_IRQ+0xac>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	22f2      	movs	r2, #242	@ 0xf2
 8009968:	4313      	orrs	r3, r2
 800996a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800996c:	1cbb      	adds	r3, r7, #2
 800996e:	881b      	ldrh	r3, [r3, #0]
 8009970:	2202      	movs	r2, #2
 8009972:	4013      	ands	r3, r2
 8009974:	d003      	beq.n	800997e <I2C_Enable_IRQ+0xbe>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	22f4      	movs	r2, #244	@ 0xf4
 800997a:	4313      	orrs	r3, r2
 800997c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800997e:	1cbb      	adds	r3, r7, #2
 8009980:	881b      	ldrh	r3, [r3, #0]
 8009982:	2b10      	cmp	r3, #16
 8009984:	d103      	bne.n	800998e <I2C_Enable_IRQ+0xce>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	2290      	movs	r2, #144	@ 0x90
 800998a:	4313      	orrs	r3, r2
 800998c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800998e:	1cbb      	adds	r3, r7, #2
 8009990:	881b      	ldrh	r3, [r3, #0]
 8009992:	2b20      	cmp	r3, #32
 8009994:	d103      	bne.n	800999e <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	2260      	movs	r2, #96	@ 0x60
 800999a:	4313      	orrs	r3, r2
 800999c:	60fb      	str	r3, [r7, #12]
    }

    if ((hi2c->XferISR != I2C_Mem_ISR_DMA) && (InterruptRequest == I2C_XFER_RELOAD_IT))
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80099a2:	4b0d      	ldr	r3, [pc, #52]	@ (80099d8 <I2C_Enable_IRQ+0x118>)
 80099a4:	429a      	cmp	r2, r3
 80099a6:	d007      	beq.n	80099b8 <I2C_Enable_IRQ+0xf8>
 80099a8:	1cbb      	adds	r3, r7, #2
 80099aa:	881b      	ldrh	r3, [r3, #0]
 80099ac:	2b40      	cmp	r3, #64	@ 0x40
 80099ae:	d103      	bne.n	80099b8 <I2C_Enable_IRQ+0xf8>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	2240      	movs	r2, #64	@ 0x40
 80099b4:	4313      	orrs	r3, r2
 80099b6:	60fb      	str	r3, [r7, #12]
>>>>>>> main
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
<<<<<<< HEAD
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	6819      	ldr	r1, [r3, #0]
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	68fa      	ldr	r2, [r7, #12]
 8009700:	430a      	orrs	r2, r1
 8009702:	601a      	str	r2, [r3, #0]
}
 8009704:	46c0      	nop			@ (mov r8, r8)
 8009706:	46bd      	mov	sp, r7
 8009708:	b004      	add	sp, #16
 800970a:	bd80      	pop	{r7, pc}
 800970c:	08008421 	.word	0x08008421
 8009710:	08008851 	.word	0x08008851
 8009714:	08008619 	.word	0x08008619

08009718 <I2C_Disable_IRQ>:
=======
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	6819      	ldr	r1, [r3, #0]
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	68fa      	ldr	r2, [r7, #12]
 80099c4:	430a      	orrs	r2, r1
 80099c6:	601a      	str	r2, [r3, #0]
}
 80099c8:	46c0      	nop			@ (mov r8, r8)
 80099ca:	46bd      	mov	sp, r7
 80099cc:	b004      	add	sp, #16
 80099ce:	bd80      	pop	{r7, pc}
 80099d0:	080086e5 	.word	0x080086e5
 80099d4:	08008b15 	.word	0x08008b15
 80099d8:	080088dd 	.word	0x080088dd

080099dc <I2C_Disable_IRQ>:
>>>>>>> main
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
<<<<<<< HEAD
 8009718:	b580      	push	{r7, lr}
 800971a:	b084      	sub	sp, #16
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
 8009720:	000a      	movs	r2, r1
 8009722:	1cbb      	adds	r3, r7, #2
 8009724:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8009726:	2300      	movs	r3, #0
 8009728:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800972a:	1cbb      	adds	r3, r7, #2
 800972c:	881b      	ldrh	r3, [r3, #0]
 800972e:	2201      	movs	r2, #1
 8009730:	4013      	ands	r3, r2
 8009732:	d010      	beq.n	8009756 <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	2242      	movs	r2, #66	@ 0x42
 8009738:	4313      	orrs	r3, r2
 800973a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	2241      	movs	r2, #65	@ 0x41
 8009740:	5c9b      	ldrb	r3, [r3, r2]
 8009742:	b2db      	uxtb	r3, r3
 8009744:	001a      	movs	r2, r3
 8009746:	2328      	movs	r3, #40	@ 0x28
 8009748:	4013      	ands	r3, r2
 800974a:	2b28      	cmp	r3, #40	@ 0x28
 800974c:	d003      	beq.n	8009756 <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	22b0      	movs	r2, #176	@ 0xb0
 8009752:	4313      	orrs	r3, r2
 8009754:	60fb      	str	r3, [r7, #12]
=======
 80099dc:	b580      	push	{r7, lr}
 80099de:	b084      	sub	sp, #16
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
 80099e4:	000a      	movs	r2, r1
 80099e6:	1cbb      	adds	r3, r7, #2
 80099e8:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 80099ea:	2300      	movs	r3, #0
 80099ec:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80099ee:	1cbb      	adds	r3, r7, #2
 80099f0:	881b      	ldrh	r3, [r3, #0]
 80099f2:	2201      	movs	r2, #1
 80099f4:	4013      	ands	r3, r2
 80099f6:	d010      	beq.n	8009a1a <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	2242      	movs	r2, #66	@ 0x42
 80099fc:	4313      	orrs	r3, r2
 80099fe:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	2241      	movs	r2, #65	@ 0x41
 8009a04:	5c9b      	ldrb	r3, [r3, r2]
 8009a06:	b2db      	uxtb	r3, r3
 8009a08:	001a      	movs	r2, r3
 8009a0a:	2328      	movs	r3, #40	@ 0x28
 8009a0c:	4013      	ands	r3, r2
 8009a0e:	2b28      	cmp	r3, #40	@ 0x28
 8009a10:	d003      	beq.n	8009a1a <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	22b0      	movs	r2, #176	@ 0xb0
 8009a16:	4313      	orrs	r3, r2
 8009a18:	60fb      	str	r3, [r7, #12]
>>>>>>> main
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
<<<<<<< HEAD
 8009756:	1cbb      	adds	r3, r7, #2
 8009758:	881b      	ldrh	r3, [r3, #0]
 800975a:	2202      	movs	r2, #2
 800975c:	4013      	ands	r3, r2
 800975e:	d010      	beq.n	8009782 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	2244      	movs	r2, #68	@ 0x44
 8009764:	4313      	orrs	r3, r2
 8009766:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	2241      	movs	r2, #65	@ 0x41
 800976c:	5c9b      	ldrb	r3, [r3, r2]
 800976e:	b2db      	uxtb	r3, r3
 8009770:	001a      	movs	r2, r3
 8009772:	2328      	movs	r3, #40	@ 0x28
 8009774:	4013      	ands	r3, r2
 8009776:	2b28      	cmp	r3, #40	@ 0x28
 8009778:	d003      	beq.n	8009782 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	22b0      	movs	r2, #176	@ 0xb0
 800977e:	4313      	orrs	r3, r2
 8009780:	60fb      	str	r3, [r7, #12]
=======
 8009a1a:	1cbb      	adds	r3, r7, #2
 8009a1c:	881b      	ldrh	r3, [r3, #0]
 8009a1e:	2202      	movs	r2, #2
 8009a20:	4013      	ands	r3, r2
 8009a22:	d010      	beq.n	8009a46 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	2244      	movs	r2, #68	@ 0x44
 8009a28:	4313      	orrs	r3, r2
 8009a2a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	2241      	movs	r2, #65	@ 0x41
 8009a30:	5c9b      	ldrb	r3, [r3, r2]
 8009a32:	b2db      	uxtb	r3, r3
 8009a34:	001a      	movs	r2, r3
 8009a36:	2328      	movs	r3, #40	@ 0x28
 8009a38:	4013      	ands	r3, r2
 8009a3a:	2b28      	cmp	r3, #40	@ 0x28
 8009a3c:	d003      	beq.n	8009a46 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	22b0      	movs	r2, #176	@ 0xb0
 8009a42:	4313      	orrs	r3, r2
 8009a44:	60fb      	str	r3, [r7, #12]
>>>>>>> main
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
<<<<<<< HEAD
 8009782:	1cbb      	adds	r3, r7, #2
 8009784:	2200      	movs	r2, #0
 8009786:	5e9b      	ldrsh	r3, [r3, r2]
 8009788:	2b00      	cmp	r3, #0
 800978a:	da03      	bge.n	8009794 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	22b8      	movs	r2, #184	@ 0xb8
 8009790:	4313      	orrs	r3, r2
 8009792:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8009794:	1cbb      	adds	r3, r7, #2
 8009796:	881b      	ldrh	r3, [r3, #0]
 8009798:	2b10      	cmp	r3, #16
 800979a:	d103      	bne.n	80097a4 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	2290      	movs	r2, #144	@ 0x90
 80097a0:	4313      	orrs	r3, r2
 80097a2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80097a4:	1cbb      	adds	r3, r7, #2
 80097a6:	881b      	ldrh	r3, [r3, #0]
 80097a8:	2b20      	cmp	r3, #32
 80097aa:	d103      	bne.n	80097b4 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	2220      	movs	r2, #32
 80097b0:	4313      	orrs	r3, r2
 80097b2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80097b4:	1cbb      	adds	r3, r7, #2
 80097b6:	881b      	ldrh	r3, [r3, #0]
 80097b8:	2b40      	cmp	r3, #64	@ 0x40
 80097ba:	d103      	bne.n	80097c4 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	2240      	movs	r2, #64	@ 0x40
 80097c0:	4313      	orrs	r3, r2
 80097c2:	60fb      	str	r3, [r7, #12]
=======
 8009a46:	1cbb      	adds	r3, r7, #2
 8009a48:	2200      	movs	r2, #0
 8009a4a:	5e9b      	ldrsh	r3, [r3, r2]
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	da03      	bge.n	8009a58 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	22b8      	movs	r2, #184	@ 0xb8
 8009a54:	4313      	orrs	r3, r2
 8009a56:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8009a58:	1cbb      	adds	r3, r7, #2
 8009a5a:	881b      	ldrh	r3, [r3, #0]
 8009a5c:	2b10      	cmp	r3, #16
 8009a5e:	d103      	bne.n	8009a68 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	2290      	movs	r2, #144	@ 0x90
 8009a64:	4313      	orrs	r3, r2
 8009a66:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8009a68:	1cbb      	adds	r3, r7, #2
 8009a6a:	881b      	ldrh	r3, [r3, #0]
 8009a6c:	2b20      	cmp	r3, #32
 8009a6e:	d103      	bne.n	8009a78 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	2220      	movs	r2, #32
 8009a74:	4313      	orrs	r3, r2
 8009a76:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8009a78:	1cbb      	adds	r3, r7, #2
 8009a7a:	881b      	ldrh	r3, [r3, #0]
 8009a7c:	2b40      	cmp	r3, #64	@ 0x40
 8009a7e:	d103      	bne.n	8009a88 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	2240      	movs	r2, #64	@ 0x40
 8009a84:	4313      	orrs	r3, r2
 8009a86:	60fb      	str	r3, [r7, #12]
>>>>>>> main
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
<<<<<<< HEAD
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	681a      	ldr	r2, [r3, #0]
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	43d9      	mvns	r1, r3
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	400a      	ands	r2, r1
 80097d4:	601a      	str	r2, [r3, #0]
}
 80097d6:	46c0      	nop			@ (mov r8, r8)
 80097d8:	46bd      	mov	sp, r7
 80097da:	b004      	add	sp, #16
 80097dc:	bd80      	pop	{r7, pc}
	...

080097e0 <HAL_I2CEx_ConfigAnalogFilter>:
=======
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	681a      	ldr	r2, [r3, #0]
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	43d9      	mvns	r1, r3
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	400a      	ands	r2, r1
 8009a98:	601a      	str	r2, [r3, #0]
}
 8009a9a:	46c0      	nop			@ (mov r8, r8)
 8009a9c:	46bd      	mov	sp, r7
 8009a9e:	b004      	add	sp, #16
 8009aa0:	bd80      	pop	{r7, pc}
	...

08009aa4 <HAL_I2CEx_ConfigAnalogFilter>:
>>>>>>> main
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
<<<<<<< HEAD
 80097e0:	b580      	push	{r7, lr}
 80097e2:	b082      	sub	sp, #8
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	6078      	str	r0, [r7, #4]
 80097e8:	6039      	str	r1, [r7, #0]
=======
 8009aa4:	b580      	push	{r7, lr}
 8009aa6:	b082      	sub	sp, #8
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	6078      	str	r0, [r7, #4]
 8009aac:	6039      	str	r1, [r7, #0]
>>>>>>> main
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
<<<<<<< HEAD
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	2241      	movs	r2, #65	@ 0x41
 80097ee:	5c9b      	ldrb	r3, [r3, r2]
 80097f0:	b2db      	uxtb	r3, r3
 80097f2:	2b20      	cmp	r3, #32
 80097f4:	d138      	bne.n	8009868 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	2240      	movs	r2, #64	@ 0x40
 80097fa:	5c9b      	ldrb	r3, [r3, r2]
 80097fc:	2b01      	cmp	r3, #1
 80097fe:	d101      	bne.n	8009804 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009800:	2302      	movs	r3, #2
 8009802:	e032      	b.n	800986a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	2240      	movs	r2, #64	@ 0x40
 8009808:	2101      	movs	r1, #1
 800980a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	2241      	movs	r2, #65	@ 0x41
 8009810:	2124      	movs	r1, #36	@ 0x24
 8009812:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	681a      	ldr	r2, [r3, #0]
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	2101      	movs	r1, #1
 8009820:	438a      	bics	r2, r1
 8009822:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	681a      	ldr	r2, [r3, #0]
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	4911      	ldr	r1, [pc, #68]	@ (8009874 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8009830:	400a      	ands	r2, r1
 8009832:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	6819      	ldr	r1, [r3, #0]
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	683a      	ldr	r2, [r7, #0]
 8009840:	430a      	orrs	r2, r1
 8009842:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	681a      	ldr	r2, [r3, #0]
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	2101      	movs	r1, #1
 8009850:	430a      	orrs	r2, r1
 8009852:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	2241      	movs	r2, #65	@ 0x41
 8009858:	2120      	movs	r1, #32
 800985a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	2240      	movs	r2, #64	@ 0x40
 8009860:	2100      	movs	r1, #0
 8009862:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8009864:	2300      	movs	r3, #0
 8009866:	e000      	b.n	800986a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
=======
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	2241      	movs	r2, #65	@ 0x41
 8009ab2:	5c9b      	ldrb	r3, [r3, r2]
 8009ab4:	b2db      	uxtb	r3, r3
 8009ab6:	2b20      	cmp	r3, #32
 8009ab8:	d138      	bne.n	8009b2c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	2240      	movs	r2, #64	@ 0x40
 8009abe:	5c9b      	ldrb	r3, [r3, r2]
 8009ac0:	2b01      	cmp	r3, #1
 8009ac2:	d101      	bne.n	8009ac8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009ac4:	2302      	movs	r3, #2
 8009ac6:	e032      	b.n	8009b2e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	2240      	movs	r2, #64	@ 0x40
 8009acc:	2101      	movs	r1, #1
 8009ace:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	2241      	movs	r2, #65	@ 0x41
 8009ad4:	2124      	movs	r1, #36	@ 0x24
 8009ad6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	681a      	ldr	r2, [r3, #0]
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	2101      	movs	r1, #1
 8009ae4:	438a      	bics	r2, r1
 8009ae6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	681a      	ldr	r2, [r3, #0]
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	4911      	ldr	r1, [pc, #68]	@ (8009b38 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8009af4:	400a      	ands	r2, r1
 8009af6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	6819      	ldr	r1, [r3, #0]
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	683a      	ldr	r2, [r7, #0]
 8009b04:	430a      	orrs	r2, r1
 8009b06:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	681a      	ldr	r2, [r3, #0]
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	2101      	movs	r1, #1
 8009b14:	430a      	orrs	r2, r1
 8009b16:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	2241      	movs	r2, #65	@ 0x41
 8009b1c:	2120      	movs	r1, #32
 8009b1e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	2240      	movs	r2, #64	@ 0x40
 8009b24:	2100      	movs	r1, #0
 8009b26:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8009b28:	2300      	movs	r3, #0
 8009b2a:	e000      	b.n	8009b2e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
>>>>>>> main
  }
  else
  {
    return HAL_BUSY;
<<<<<<< HEAD
 8009868:	2302      	movs	r3, #2
  }
}
 800986a:	0018      	movs	r0, r3
 800986c:	46bd      	mov	sp, r7
 800986e:	b002      	add	sp, #8
 8009870:	bd80      	pop	{r7, pc}
 8009872:	46c0      	nop			@ (mov r8, r8)
 8009874:	ffffefff 	.word	0xffffefff

08009878 <HAL_I2CEx_ConfigDigitalFilter>:
=======
 8009b2c:	2302      	movs	r3, #2
  }
}
 8009b2e:	0018      	movs	r0, r3
 8009b30:	46bd      	mov	sp, r7
 8009b32:	b002      	add	sp, #8
 8009b34:	bd80      	pop	{r7, pc}
 8009b36:	46c0      	nop			@ (mov r8, r8)
 8009b38:	ffffefff 	.word	0xffffefff

08009b3c <HAL_I2CEx_ConfigDigitalFilter>:
>>>>>>> main
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
<<<<<<< HEAD
 8009878:	b580      	push	{r7, lr}
 800987a:	b084      	sub	sp, #16
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
 8009880:	6039      	str	r1, [r7, #0]
=======
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	b084      	sub	sp, #16
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
 8009b44:	6039      	str	r1, [r7, #0]
>>>>>>> main

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
<<<<<<< HEAD
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	2241      	movs	r2, #65	@ 0x41
 8009886:	5c9b      	ldrb	r3, [r3, r2]
 8009888:	b2db      	uxtb	r3, r3
 800988a:	2b20      	cmp	r3, #32
 800988c:	d139      	bne.n	8009902 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	2240      	movs	r2, #64	@ 0x40
 8009892:	5c9b      	ldrb	r3, [r3, r2]
 8009894:	2b01      	cmp	r3, #1
 8009896:	d101      	bne.n	800989c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009898:	2302      	movs	r3, #2
 800989a:	e033      	b.n	8009904 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	2240      	movs	r2, #64	@ 0x40
 80098a0:	2101      	movs	r1, #1
 80098a2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	2241      	movs	r2, #65	@ 0x41
 80098a8:	2124      	movs	r1, #36	@ 0x24
 80098aa:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	681a      	ldr	r2, [r3, #0]
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	2101      	movs	r1, #1
 80098b8:	438a      	bics	r2, r1
 80098ba:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	4a11      	ldr	r2, [pc, #68]	@ (800990c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80098c8:	4013      	ands	r3, r2
 80098ca:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80098cc:	683b      	ldr	r3, [r7, #0]
 80098ce:	021b      	lsls	r3, r3, #8
 80098d0:	68fa      	ldr	r2, [r7, #12]
 80098d2:	4313      	orrs	r3, r2
 80098d4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	68fa      	ldr	r2, [r7, #12]
 80098dc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	681a      	ldr	r2, [r3, #0]
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	2101      	movs	r1, #1
 80098ea:	430a      	orrs	r2, r1
 80098ec:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	2241      	movs	r2, #65	@ 0x41
 80098f2:	2120      	movs	r1, #32
 80098f4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	2240      	movs	r2, #64	@ 0x40
 80098fa:	2100      	movs	r1, #0
 80098fc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80098fe:	2300      	movs	r3, #0
 8009900:	e000      	b.n	8009904 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
=======
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	2241      	movs	r2, #65	@ 0x41
 8009b4a:	5c9b      	ldrb	r3, [r3, r2]
 8009b4c:	b2db      	uxtb	r3, r3
 8009b4e:	2b20      	cmp	r3, #32
 8009b50:	d139      	bne.n	8009bc6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	2240      	movs	r2, #64	@ 0x40
 8009b56:	5c9b      	ldrb	r3, [r3, r2]
 8009b58:	2b01      	cmp	r3, #1
 8009b5a:	d101      	bne.n	8009b60 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009b5c:	2302      	movs	r3, #2
 8009b5e:	e033      	b.n	8009bc8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	2240      	movs	r2, #64	@ 0x40
 8009b64:	2101      	movs	r1, #1
 8009b66:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	2241      	movs	r2, #65	@ 0x41
 8009b6c:	2124      	movs	r1, #36	@ 0x24
 8009b6e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	681a      	ldr	r2, [r3, #0]
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	2101      	movs	r1, #1
 8009b7c:	438a      	bics	r2, r1
 8009b7e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	4a11      	ldr	r2, [pc, #68]	@ (8009bd0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8009b8c:	4013      	ands	r3, r2
 8009b8e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009b90:	683b      	ldr	r3, [r7, #0]
 8009b92:	021b      	lsls	r3, r3, #8
 8009b94:	68fa      	ldr	r2, [r7, #12]
 8009b96:	4313      	orrs	r3, r2
 8009b98:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	68fa      	ldr	r2, [r7, #12]
 8009ba0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	681a      	ldr	r2, [r3, #0]
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	2101      	movs	r1, #1
 8009bae:	430a      	orrs	r2, r1
 8009bb0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	2241      	movs	r2, #65	@ 0x41
 8009bb6:	2120      	movs	r1, #32
 8009bb8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	2240      	movs	r2, #64	@ 0x40
 8009bbe:	2100      	movs	r1, #0
 8009bc0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	e000      	b.n	8009bc8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
>>>>>>> main
  }
  else
  {
    return HAL_BUSY;
<<<<<<< HEAD
 8009902:	2302      	movs	r3, #2
  }
}
 8009904:	0018      	movs	r0, r3
 8009906:	46bd      	mov	sp, r7
 8009908:	b004      	add	sp, #16
 800990a:	bd80      	pop	{r7, pc}
 800990c:	fffff0ff 	.word	0xfffff0ff

08009910 <HAL_I2S_Init>:
=======
 8009bc6:	2302      	movs	r3, #2
  }
}
 8009bc8:	0018      	movs	r0, r3
 8009bca:	46bd      	mov	sp, r7
 8009bcc:	b004      	add	sp, #16
 8009bce:	bd80      	pop	{r7, pc}
 8009bd0:	fffff0ff 	.word	0xfffff0ff

08009bd4 <HAL_I2S_Init>:
>>>>>>> main
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
<<<<<<< HEAD
 8009910:	b580      	push	{r7, lr}
 8009912:	b088      	sub	sp, #32
 8009914:	af00      	add	r7, sp, #0
 8009916:	6078      	str	r0, [r7, #4]
=======
 8009bd4:	b580      	push	{r7, lr}
 8009bd6:	b088      	sub	sp, #32
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	6078      	str	r0, [r7, #4]
>>>>>>> main
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
<<<<<<< HEAD
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	2b00      	cmp	r3, #0
 800991c:	d101      	bne.n	8009922 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800991e:	2301      	movs	r3, #1
 8009920:	e0e1      	b.n	8009ae6 <HAL_I2S_Init+0x1d6>
=======
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d101      	bne.n	8009be6 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8009be2:	2301      	movs	r3, #1
 8009be4:	e0e1      	b.n	8009daa <HAL_I2S_Init+0x1d6>
>>>>>>> main
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
<<<<<<< HEAD
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	2235      	movs	r2, #53	@ 0x35
 8009926:	5c9b      	ldrb	r3, [r3, r2]
 8009928:	b2db      	uxtb	r3, r3
 800992a:	2b00      	cmp	r3, #0
 800992c:	d107      	bne.n	800993e <HAL_I2S_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	2234      	movs	r2, #52	@ 0x34
 8009932:	2100      	movs	r1, #0
 8009934:	5499      	strb	r1, [r3, r2]
=======
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	2235      	movs	r2, #53	@ 0x35
 8009bea:	5c9b      	ldrb	r3, [r3, r2]
 8009bec:	b2db      	uxtb	r3, r3
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d107      	bne.n	8009c02 <HAL_I2S_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	2234      	movs	r2, #52	@ 0x34
 8009bf6:	2100      	movs	r1, #0
 8009bf8:	5499      	strb	r1, [r3, r2]
>>>>>>> main

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
<<<<<<< HEAD
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	0018      	movs	r0, r3
 800993a:	f7fa f9ab 	bl	8003c94 <HAL_I2S_MspInit>
=======
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	0018      	movs	r0, r3
 8009bfe:	f7fa f86f 	bl	8003ce0 <HAL_I2S_MspInit>
>>>>>>> main
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
<<<<<<< HEAD
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	2235      	movs	r2, #53	@ 0x35
 8009942:	2102      	movs	r1, #2
 8009944:	5499      	strb	r1, [r3, r2]
=======
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	2235      	movs	r2, #53	@ 0x35
 8009c06:	2102      	movs	r1, #2
 8009c08:	5499      	strb	r1, [r3, r2]
>>>>>>> main

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
<<<<<<< HEAD
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	69da      	ldr	r2, [r3, #28]
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	4967      	ldr	r1, [pc, #412]	@ (8009af0 <HAL_I2S_Init+0x1e0>)
 8009952:	400a      	ands	r2, r1
 8009954:	61da      	str	r2, [r3, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	2202      	movs	r2, #2
 800995c:	621a      	str	r2, [r3, #32]
=======
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	69da      	ldr	r2, [r3, #28]
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	4967      	ldr	r1, [pc, #412]	@ (8009db4 <HAL_I2S_Init+0x1e0>)
 8009c16:	400a      	ands	r2, r1
 8009c18:	61da      	str	r2, [r3, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	2202      	movs	r2, #2
 8009c20:	621a      	str	r2, [r3, #32]
>>>>>>> main

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
<<<<<<< HEAD
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	695b      	ldr	r3, [r3, #20]
 8009962:	2b02      	cmp	r3, #2
 8009964:	d073      	beq.n	8009a4e <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	68db      	ldr	r3, [r3, #12]
 800996a:	2b00      	cmp	r3, #0
 800996c:	d102      	bne.n	8009974 <HAL_I2S_Init+0x64>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800996e:	2310      	movs	r3, #16
 8009970:	617b      	str	r3, [r7, #20]
 8009972:	e001      	b.n	8009978 <HAL_I2S_Init+0x68>
=======
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	695b      	ldr	r3, [r3, #20]
 8009c26:	2b02      	cmp	r3, #2
 8009c28:	d073      	beq.n	8009d12 <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	68db      	ldr	r3, [r3, #12]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d102      	bne.n	8009c38 <HAL_I2S_Init+0x64>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8009c32:	2310      	movs	r3, #16
 8009c34:	617b      	str	r3, [r7, #20]
 8009c36:	e001      	b.n	8009c3c <HAL_I2S_Init+0x68>
>>>>>>> main
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
<<<<<<< HEAD
 8009974:	2320      	movs	r3, #32
 8009976:	617b      	str	r3, [r7, #20]
=======
 8009c38:	2320      	movs	r3, #32
 8009c3a:	617b      	str	r3, [r7, #20]
>>>>>>> main
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
<<<<<<< HEAD
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	689b      	ldr	r3, [r3, #8]
 800997c:	2b20      	cmp	r3, #32
 800997e:	d802      	bhi.n	8009986 <HAL_I2S_Init+0x76>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8009980:	697b      	ldr	r3, [r7, #20]
 8009982:	005b      	lsls	r3, r3, #1
 8009984:	617b      	str	r3, [r7, #20]
=======
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	689b      	ldr	r3, [r3, #8]
 8009c40:	2b20      	cmp	r3, #32
 8009c42:	d802      	bhi.n	8009c4a <HAL_I2S_Init+0x76>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8009c44:	697b      	ldr	r3, [r7, #20]
 8009c46:	005b      	lsls	r3, r3, #1
 8009c48:	617b      	str	r3, [r7, #20]
>>>>>>> main
    }

    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCC_GetSysClockFreq();
<<<<<<< HEAD
 8009986:	f001 f957 	bl	800ac38 <HAL_RCC_GetSysClockFreq>
 800998a:	0003      	movs	r3, r0
 800998c:	60fb      	str	r3, [r7, #12]

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	691a      	ldr	r2, [r3, #16]
 8009992:	2380      	movs	r3, #128	@ 0x80
 8009994:	009b      	lsls	r3, r3, #2
 8009996:	429a      	cmp	r2, r3
 8009998:	d131      	bne.n	80099fe <HAL_I2S_Init+0xee>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	68db      	ldr	r3, [r3, #12]
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d016      	beq.n	80099d0 <HAL_I2S_Init+0xc0>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80099a2:	697b      	ldr	r3, [r7, #20]
 80099a4:	009b      	lsls	r3, r3, #2
 80099a6:	0019      	movs	r1, r3
 80099a8:	68f8      	ldr	r0, [r7, #12]
 80099aa:	f7f6 fbc9 	bl	8000140 <__udivsi3>
 80099ae:	0003      	movs	r3, r0
 80099b0:	001a      	movs	r2, r3
 80099b2:	0013      	movs	r3, r2
 80099b4:	009b      	lsls	r3, r3, #2
 80099b6:	189b      	adds	r3, r3, r2
 80099b8:	005b      	lsls	r3, r3, #1
 80099ba:	001a      	movs	r2, r3
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	695b      	ldr	r3, [r3, #20]
 80099c0:	0019      	movs	r1, r3
 80099c2:	0010      	movs	r0, r2
 80099c4:	f7f6 fbbc 	bl	8000140 <__udivsi3>
 80099c8:	0003      	movs	r3, r0
 80099ca:	3305      	adds	r3, #5
 80099cc:	613b      	str	r3, [r7, #16]
 80099ce:	e02a      	b.n	8009a26 <HAL_I2S_Init+0x116>
=======
 8009c4a:	f001 f957 	bl	800aefc <HAL_RCC_GetSysClockFreq>
 8009c4e:	0003      	movs	r3, r0
 8009c50:	60fb      	str	r3, [r7, #12]

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	691a      	ldr	r2, [r3, #16]
 8009c56:	2380      	movs	r3, #128	@ 0x80
 8009c58:	009b      	lsls	r3, r3, #2
 8009c5a:	429a      	cmp	r2, r3
 8009c5c:	d131      	bne.n	8009cc2 <HAL_I2S_Init+0xee>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	68db      	ldr	r3, [r3, #12]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d016      	beq.n	8009c94 <HAL_I2S_Init+0xc0>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8009c66:	697b      	ldr	r3, [r7, #20]
 8009c68:	009b      	lsls	r3, r3, #2
 8009c6a:	0019      	movs	r1, r3
 8009c6c:	68f8      	ldr	r0, [r7, #12]
 8009c6e:	f7f6 fa67 	bl	8000140 <__udivsi3>
 8009c72:	0003      	movs	r3, r0
 8009c74:	001a      	movs	r2, r3
 8009c76:	0013      	movs	r3, r2
 8009c78:	009b      	lsls	r3, r3, #2
 8009c7a:	189b      	adds	r3, r3, r2
 8009c7c:	005b      	lsls	r3, r3, #1
 8009c7e:	001a      	movs	r2, r3
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	695b      	ldr	r3, [r3, #20]
 8009c84:	0019      	movs	r1, r3
 8009c86:	0010      	movs	r0, r2
 8009c88:	f7f6 fa5a 	bl	8000140 <__udivsi3>
 8009c8c:	0003      	movs	r3, r0
 8009c8e:	3305      	adds	r3, #5
 8009c90:	613b      	str	r3, [r7, #16]
 8009c92:	e02a      	b.n	8009cea <HAL_I2S_Init+0x116>
>>>>>>> main
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
<<<<<<< HEAD
 80099d0:	697b      	ldr	r3, [r7, #20]
 80099d2:	00db      	lsls	r3, r3, #3
 80099d4:	0019      	movs	r1, r3
 80099d6:	68f8      	ldr	r0, [r7, #12]
 80099d8:	f7f6 fbb2 	bl	8000140 <__udivsi3>
 80099dc:	0003      	movs	r3, r0
 80099de:	001a      	movs	r2, r3
 80099e0:	0013      	movs	r3, r2
 80099e2:	009b      	lsls	r3, r3, #2
 80099e4:	189b      	adds	r3, r3, r2
 80099e6:	005b      	lsls	r3, r3, #1
 80099e8:	001a      	movs	r2, r3
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	695b      	ldr	r3, [r3, #20]
 80099ee:	0019      	movs	r1, r3
 80099f0:	0010      	movs	r0, r2
 80099f2:	f7f6 fba5 	bl	8000140 <__udivsi3>
 80099f6:	0003      	movs	r3, r0
 80099f8:	3305      	adds	r3, #5
 80099fa:	613b      	str	r3, [r7, #16]
 80099fc:	e013      	b.n	8009a26 <HAL_I2S_Init+0x116>
=======
 8009c94:	697b      	ldr	r3, [r7, #20]
 8009c96:	00db      	lsls	r3, r3, #3
 8009c98:	0019      	movs	r1, r3
 8009c9a:	68f8      	ldr	r0, [r7, #12]
 8009c9c:	f7f6 fa50 	bl	8000140 <__udivsi3>
 8009ca0:	0003      	movs	r3, r0
 8009ca2:	001a      	movs	r2, r3
 8009ca4:	0013      	movs	r3, r2
 8009ca6:	009b      	lsls	r3, r3, #2
 8009ca8:	189b      	adds	r3, r3, r2
 8009caa:	005b      	lsls	r3, r3, #1
 8009cac:	001a      	movs	r2, r3
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	695b      	ldr	r3, [r3, #20]
 8009cb2:	0019      	movs	r1, r3
 8009cb4:	0010      	movs	r0, r2
 8009cb6:	f7f6 fa43 	bl	8000140 <__udivsi3>
 8009cba:	0003      	movs	r3, r0
 8009cbc:	3305      	adds	r3, #5
 8009cbe:	613b      	str	r3, [r7, #16]
 8009cc0:	e013      	b.n	8009cea <HAL_I2S_Init+0x116>
>>>>>>> main
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
<<<<<<< HEAD
 80099fe:	6979      	ldr	r1, [r7, #20]
 8009a00:	68f8      	ldr	r0, [r7, #12]
 8009a02:	f7f6 fb9d 	bl	8000140 <__udivsi3>
 8009a06:	0003      	movs	r3, r0
 8009a08:	001a      	movs	r2, r3
 8009a0a:	0013      	movs	r3, r2
 8009a0c:	009b      	lsls	r3, r3, #2
 8009a0e:	189b      	adds	r3, r3, r2
 8009a10:	005b      	lsls	r3, r3, #1
 8009a12:	001a      	movs	r2, r3
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	695b      	ldr	r3, [r3, #20]
 8009a18:	0019      	movs	r1, r3
 8009a1a:	0010      	movs	r0, r2
 8009a1c:	f7f6 fb90 	bl	8000140 <__udivsi3>
 8009a20:	0003      	movs	r3, r0
 8009a22:	3305      	adds	r3, #5
 8009a24:	613b      	str	r3, [r7, #16]
=======
 8009cc2:	6979      	ldr	r1, [r7, #20]
 8009cc4:	68f8      	ldr	r0, [r7, #12]
 8009cc6:	f7f6 fa3b 	bl	8000140 <__udivsi3>
 8009cca:	0003      	movs	r3, r0
 8009ccc:	001a      	movs	r2, r3
 8009cce:	0013      	movs	r3, r2
 8009cd0:	009b      	lsls	r3, r3, #2
 8009cd2:	189b      	adds	r3, r3, r2
 8009cd4:	005b      	lsls	r3, r3, #1
 8009cd6:	001a      	movs	r2, r3
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	695b      	ldr	r3, [r3, #20]
 8009cdc:	0019      	movs	r1, r3
 8009cde:	0010      	movs	r0, r2
 8009ce0:	f7f6 fa2e 	bl	8000140 <__udivsi3>
 8009ce4:	0003      	movs	r3, r0
 8009ce6:	3305      	adds	r3, #5
 8009ce8:	613b      	str	r3, [r7, #16]
>>>>>>> main
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
<<<<<<< HEAD
 8009a26:	693b      	ldr	r3, [r7, #16]
 8009a28:	210a      	movs	r1, #10
 8009a2a:	0018      	movs	r0, r3
 8009a2c:	f7f6 fb88 	bl	8000140 <__udivsi3>
 8009a30:	0003      	movs	r3, r0
 8009a32:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8009a34:	693b      	ldr	r3, [r7, #16]
 8009a36:	2201      	movs	r2, #1
 8009a38:	4013      	ands	r3, r2
 8009a3a:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8009a3c:	693a      	ldr	r2, [r7, #16]
 8009a3e:	69bb      	ldr	r3, [r7, #24]
 8009a40:	1ad3      	subs	r3, r2, r3
 8009a42:	085b      	lsrs	r3, r3, #1
 8009a44:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8009a46:	69bb      	ldr	r3, [r7, #24]
 8009a48:	021b      	lsls	r3, r3, #8
 8009a4a:	61bb      	str	r3, [r7, #24]
 8009a4c:	e003      	b.n	8009a56 <HAL_I2S_Init+0x146>
=======
 8009cea:	693b      	ldr	r3, [r7, #16]
 8009cec:	210a      	movs	r1, #10
 8009cee:	0018      	movs	r0, r3
 8009cf0:	f7f6 fa26 	bl	8000140 <__udivsi3>
 8009cf4:	0003      	movs	r3, r0
 8009cf6:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8009cf8:	693b      	ldr	r3, [r7, #16]
 8009cfa:	2201      	movs	r2, #1
 8009cfc:	4013      	ands	r3, r2
 8009cfe:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8009d00:	693a      	ldr	r2, [r7, #16]
 8009d02:	69bb      	ldr	r3, [r7, #24]
 8009d04:	1ad3      	subs	r3, r2, r3
 8009d06:	085b      	lsrs	r3, r3, #1
 8009d08:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8009d0a:	69bb      	ldr	r3, [r7, #24]
 8009d0c:	021b      	lsls	r3, r3, #8
 8009d0e:	61bb      	str	r3, [r7, #24]
 8009d10:	e003      	b.n	8009d1a <HAL_I2S_Init+0x146>
>>>>>>> main
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
<<<<<<< HEAD
 8009a4e:	2302      	movs	r3, #2
 8009a50:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8009a52:	2300      	movs	r3, #0
 8009a54:	61bb      	str	r3, [r7, #24]
=======
 8009d12:	2302      	movs	r3, #2
 8009d14:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8009d16:	2300      	movs	r3, #0
 8009d18:	61bb      	str	r3, [r7, #24]
>>>>>>> main
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
<<<<<<< HEAD
 8009a56:	69fb      	ldr	r3, [r7, #28]
 8009a58:	2b01      	cmp	r3, #1
 8009a5a:	d902      	bls.n	8009a62 <HAL_I2S_Init+0x152>
 8009a5c:	69fb      	ldr	r3, [r7, #28]
 8009a5e:	2bff      	cmp	r3, #255	@ 0xff
 8009a60:	d907      	bls.n	8009a72 <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a66:	2210      	movs	r2, #16
 8009a68:	431a      	orrs	r2, r3
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	639a      	str	r2, [r3, #56]	@ 0x38
    return  HAL_ERROR;
 8009a6e:	2301      	movs	r3, #1
 8009a70:	e039      	b.n	8009ae6 <HAL_I2S_Init+0x1d6>
=======
 8009d1a:	69fb      	ldr	r3, [r7, #28]
 8009d1c:	2b01      	cmp	r3, #1
 8009d1e:	d902      	bls.n	8009d26 <HAL_I2S_Init+0x152>
 8009d20:	69fb      	ldr	r3, [r7, #28]
 8009d22:	2bff      	cmp	r3, #255	@ 0xff
 8009d24:	d907      	bls.n	8009d36 <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d2a:	2210      	movs	r2, #16
 8009d2c:	431a      	orrs	r2, r3
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	639a      	str	r2, [r3, #56]	@ 0x38
    return  HAL_ERROR;
 8009d32:	2301      	movs	r3, #1
 8009d34:	e039      	b.n	8009daa <HAL_I2S_Init+0x1d6>
>>>>>>> main
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
<<<<<<< HEAD
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	691a      	ldr	r2, [r3, #16]
 8009a76:	69bb      	ldr	r3, [r7, #24]
 8009a78:	431a      	orrs	r2, r3
 8009a7a:	0011      	movs	r1, r2
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	69fa      	ldr	r2, [r7, #28]
 8009a82:	430a      	orrs	r2, r1
 8009a84:	621a      	str	r2, [r3, #32]
=======
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	691a      	ldr	r2, [r3, #16]
 8009d3a:	69bb      	ldr	r3, [r7, #24]
 8009d3c:	431a      	orrs	r2, r3
 8009d3e:	0011      	movs	r1, r2
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	69fa      	ldr	r2, [r7, #28]
 8009d46:	430a      	orrs	r2, r1
 8009d48:	621a      	str	r2, [r3, #32]
>>>>>>> main

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
<<<<<<< HEAD
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	69db      	ldr	r3, [r3, #28]
 8009a8c:	4a18      	ldr	r2, [pc, #96]	@ (8009af0 <HAL_I2S_Init+0x1e0>)
 8009a8e:	401a      	ands	r2, r3
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	6859      	ldr	r1, [r3, #4]
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	689b      	ldr	r3, [r3, #8]
 8009a98:	4319      	orrs	r1, r3
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	68db      	ldr	r3, [r3, #12]
 8009a9e:	4319      	orrs	r1, r3
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	699b      	ldr	r3, [r3, #24]
 8009aa4:	430b      	orrs	r3, r1
 8009aa6:	431a      	orrs	r2, r3
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	2180      	movs	r1, #128	@ 0x80
 8009aae:	0109      	lsls	r1, r1, #4
 8009ab0:	430a      	orrs	r2, r1
 8009ab2:	61da      	str	r2, [r3, #28]
=======
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	69db      	ldr	r3, [r3, #28]
 8009d50:	4a18      	ldr	r2, [pc, #96]	@ (8009db4 <HAL_I2S_Init+0x1e0>)
 8009d52:	401a      	ands	r2, r3
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	6859      	ldr	r1, [r3, #4]
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	689b      	ldr	r3, [r3, #8]
 8009d5c:	4319      	orrs	r1, r3
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	68db      	ldr	r3, [r3, #12]
 8009d62:	4319      	orrs	r1, r3
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	699b      	ldr	r3, [r3, #24]
 8009d68:	430b      	orrs	r3, r1
 8009d6a:	431a      	orrs	r2, r3
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	2180      	movs	r1, #128	@ 0x80
 8009d72:	0109      	lsls	r1, r1, #4
 8009d74:	430a      	orrs	r2, r1
 8009d76:	61da      	str	r2, [r3, #28]
>>>>>>> main
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
<<<<<<< HEAD
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	689b      	ldr	r3, [r3, #8]
 8009ab8:	2b30      	cmp	r3, #48	@ 0x30
 8009aba:	d003      	beq.n	8009ac4 <HAL_I2S_Init+0x1b4>
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	689b      	ldr	r3, [r3, #8]
 8009ac0:	2bb0      	cmp	r3, #176	@ 0xb0
 8009ac2:	d108      	bne.n	8009ad6 <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	69da      	ldr	r2, [r3, #28]
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	2180      	movs	r1, #128	@ 0x80
 8009ad0:	0149      	lsls	r1, r1, #5
 8009ad2:	430a      	orrs	r2, r1
 8009ad4:	61da      	str	r2, [r3, #28]
=======
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	689b      	ldr	r3, [r3, #8]
 8009d7c:	2b30      	cmp	r3, #48	@ 0x30
 8009d7e:	d003      	beq.n	8009d88 <HAL_I2S_Init+0x1b4>
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	689b      	ldr	r3, [r3, #8]
 8009d84:	2bb0      	cmp	r3, #176	@ 0xb0
 8009d86:	d108      	bne.n	8009d9a <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	69da      	ldr	r2, [r3, #28]
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	2180      	movs	r1, #128	@ 0x80
 8009d94:	0149      	lsls	r1, r1, #5
 8009d96:	430a      	orrs	r2, r1
 8009d98:	61da      	str	r2, [r3, #28]
>>>>>>> main
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
<<<<<<< HEAD
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	2200      	movs	r2, #0
 8009ada:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	2235      	movs	r2, #53	@ 0x35
 8009ae0:	2101      	movs	r1, #1
 8009ae2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009ae4:	2300      	movs	r3, #0
}
 8009ae6:	0018      	movs	r0, r3
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	b008      	add	sp, #32
 8009aec:	bd80      	pop	{r7, pc}
 8009aee:	46c0      	nop			@ (mov r8, r8)
 8009af0:	fffff040 	.word	0xfffff040

08009af4 <HAL_I2S_DeInit>:
=======
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	2200      	movs	r2, #0
 8009d9e:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	2235      	movs	r2, #53	@ 0x35
 8009da4:	2101      	movs	r1, #1
 8009da6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009da8:	2300      	movs	r3, #0
}
 8009daa:	0018      	movs	r0, r3
 8009dac:	46bd      	mov	sp, r7
 8009dae:	b008      	add	sp, #32
 8009db0:	bd80      	pop	{r7, pc}
 8009db2:	46c0      	nop			@ (mov r8, r8)
 8009db4:	fffff040 	.word	0xfffff040

08009db8 <HAL_I2S_DeInit>:
>>>>>>> main
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DeInit(I2S_HandleTypeDef *hi2s)
{
<<<<<<< HEAD
 8009af4:	b580      	push	{r7, lr}
 8009af6:	b082      	sub	sp, #8
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	6078      	str	r0, [r7, #4]
  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d101      	bne.n	8009b06 <HAL_I2S_DeInit+0x12>
  {
    return HAL_ERROR;
 8009b02:	2301      	movs	r3, #1
 8009b04:	e01b      	b.n	8009b3e <HAL_I2S_DeInit+0x4a>
=======
 8009db8:	b580      	push	{r7, lr}
 8009dba:	b082      	sub	sp, #8
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	6078      	str	r0, [r7, #4]
  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d101      	bne.n	8009dca <HAL_I2S_DeInit+0x12>
  {
    return HAL_ERROR;
 8009dc6:	2301      	movs	r3, #1
 8009dc8:	e01b      	b.n	8009e02 <HAL_I2S_DeInit+0x4a>
>>>>>>> main
  }

  /* Check the parameters */
  assert_param(IS_I2S_ALL_INSTANCE(hi2s->Instance));

  hi2s->State = HAL_I2S_STATE_BUSY;
<<<<<<< HEAD
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	2235      	movs	r2, #53	@ 0x35
 8009b0a:	2102      	movs	r1, #2
 8009b0c:	5499      	strb	r1, [r3, r2]

  /* Disable the I2S Peripheral Clock */
  __HAL_I2S_DISABLE(hi2s);
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	69da      	ldr	r2, [r3, #28]
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	490b      	ldr	r1, [pc, #44]	@ (8009b48 <HAL_I2S_DeInit+0x54>)
 8009b1a:	400a      	ands	r2, r1
 8009b1c:	61da      	str	r2, [r3, #28]
=======
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	2235      	movs	r2, #53	@ 0x35
 8009dce:	2102      	movs	r1, #2
 8009dd0:	5499      	strb	r1, [r3, r2]

  /* Disable the I2S Peripheral Clock */
  __HAL_I2S_DISABLE(hi2s);
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	69da      	ldr	r2, [r3, #28]
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	490b      	ldr	r1, [pc, #44]	@ (8009e0c <HAL_I2S_DeInit+0x54>)
 8009dde:	400a      	ands	r2, r1
 8009de0:	61da      	str	r2, [r3, #28]
>>>>>>> main

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hi2s->MspDeInitCallback(hi2s);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_I2S_MspDeInit(hi2s);
<<<<<<< HEAD
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	0018      	movs	r0, r3
 8009b22:	f7fa f92b 	bl	8003d7c <HAL_I2S_MspDeInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	2200      	movs	r2, #0
 8009b2a:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->State     = HAL_I2S_STATE_RESET;
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	2235      	movs	r2, #53	@ 0x35
 8009b30:	2100      	movs	r1, #0
 8009b32:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hi2s);
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	2234      	movs	r2, #52	@ 0x34
 8009b38:	2100      	movs	r1, #0
 8009b3a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009b3c:	2300      	movs	r3, #0
}
 8009b3e:	0018      	movs	r0, r3
 8009b40:	46bd      	mov	sp, r7
 8009b42:	b002      	add	sp, #8
 8009b44:	bd80      	pop	{r7, pc}
 8009b46:	46c0      	nop			@ (mov r8, r8)
 8009b48:	fffffbff 	.word	0xfffffbff

08009b4c <HAL_I2S_Receive_DMA>:
=======
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	0018      	movs	r0, r3
 8009de6:	f7f9 ffef 	bl	8003dc8 <HAL_I2S_MspDeInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	2200      	movs	r2, #0
 8009dee:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->State     = HAL_I2S_STATE_RESET;
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	2235      	movs	r2, #53	@ 0x35
 8009df4:	2100      	movs	r1, #0
 8009df6:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hi2s);
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	2234      	movs	r2, #52	@ 0x34
 8009dfc:	2100      	movs	r1, #0
 8009dfe:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009e00:	2300      	movs	r3, #0
}
 8009e02:	0018      	movs	r0, r3
 8009e04:	46bd      	mov	sp, r7
 8009e06:	b002      	add	sp, #8
 8009e08:	bd80      	pop	{r7, pc}
 8009e0a:	46c0      	nop			@ (mov r8, r8)
 8009e0c:	fffffbff 	.word	0xfffffbff

08009e10 <HAL_I2S_Receive_DMA>:
>>>>>>> main
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
<<<<<<< HEAD
 8009b4c:	b580      	push	{r7, lr}
 8009b4e:	b086      	sub	sp, #24
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	60f8      	str	r0, [r7, #12]
 8009b54:	60b9      	str	r1, [r7, #8]
 8009b56:	1dbb      	adds	r3, r7, #6
 8009b58:	801a      	strh	r2, [r3, #0]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8009b5a:	68bb      	ldr	r3, [r7, #8]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d003      	beq.n	8009b68 <HAL_I2S_Receive_DMA+0x1c>
 8009b60:	1dbb      	adds	r3, r7, #6
 8009b62:	881b      	ldrh	r3, [r3, #0]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d101      	bne.n	8009b6c <HAL_I2S_Receive_DMA+0x20>
  {
    return  HAL_ERROR;
 8009b68:	2301      	movs	r3, #1
 8009b6a:	e0a6      	b.n	8009cba <HAL_I2S_Receive_DMA+0x16e>
=======
 8009e10:	b580      	push	{r7, lr}
 8009e12:	b086      	sub	sp, #24
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	60f8      	str	r0, [r7, #12]
 8009e18:	60b9      	str	r1, [r7, #8]
 8009e1a:	1dbb      	adds	r3, r7, #6
 8009e1c:	801a      	strh	r2, [r3, #0]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8009e1e:	68bb      	ldr	r3, [r7, #8]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d003      	beq.n	8009e2c <HAL_I2S_Receive_DMA+0x1c>
 8009e24:	1dbb      	adds	r3, r7, #6
 8009e26:	881b      	ldrh	r3, [r3, #0]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d101      	bne.n	8009e30 <HAL_I2S_Receive_DMA+0x20>
  {
    return  HAL_ERROR;
 8009e2c:	2301      	movs	r3, #1
 8009e2e:	e0a6      	b.n	8009f7e <HAL_I2S_Receive_DMA+0x16e>
>>>>>>> main
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
<<<<<<< HEAD
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	2234      	movs	r2, #52	@ 0x34
 8009b70:	5c9b      	ldrb	r3, [r3, r2]
 8009b72:	b2db      	uxtb	r3, r3
 8009b74:	2b01      	cmp	r3, #1
 8009b76:	d101      	bne.n	8009b7c <HAL_I2S_Receive_DMA+0x30>
 8009b78:	2302      	movs	r3, #2
 8009b7a:	e09e      	b.n	8009cba <HAL_I2S_Receive_DMA+0x16e>
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	2234      	movs	r2, #52	@ 0x34
 8009b80:	2101      	movs	r1, #1
 8009b82:	5499      	strb	r1, [r3, r2]

  if (hi2s->State != HAL_I2S_STATE_READY)
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	2235      	movs	r2, #53	@ 0x35
 8009b88:	5c9b      	ldrb	r3, [r3, r2]
 8009b8a:	b2db      	uxtb	r3, r3
 8009b8c:	2b01      	cmp	r3, #1
 8009b8e:	d005      	beq.n	8009b9c <HAL_I2S_Receive_DMA+0x50>
  {
    __HAL_UNLOCK(hi2s);
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	2234      	movs	r2, #52	@ 0x34
 8009b94:	2100      	movs	r1, #0
 8009b96:	5499      	strb	r1, [r3, r2]
    return HAL_BUSY;
 8009b98:	2302      	movs	r3, #2
 8009b9a:	e08e      	b.n	8009cba <HAL_I2S_Receive_DMA+0x16e>
=======
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	2234      	movs	r2, #52	@ 0x34
 8009e34:	5c9b      	ldrb	r3, [r3, r2]
 8009e36:	b2db      	uxtb	r3, r3
 8009e38:	2b01      	cmp	r3, #1
 8009e3a:	d101      	bne.n	8009e40 <HAL_I2S_Receive_DMA+0x30>
 8009e3c:	2302      	movs	r3, #2
 8009e3e:	e09e      	b.n	8009f7e <HAL_I2S_Receive_DMA+0x16e>
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	2234      	movs	r2, #52	@ 0x34
 8009e44:	2101      	movs	r1, #1
 8009e46:	5499      	strb	r1, [r3, r2]

  if (hi2s->State != HAL_I2S_STATE_READY)
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	2235      	movs	r2, #53	@ 0x35
 8009e4c:	5c9b      	ldrb	r3, [r3, r2]
 8009e4e:	b2db      	uxtb	r3, r3
 8009e50:	2b01      	cmp	r3, #1
 8009e52:	d005      	beq.n	8009e60 <HAL_I2S_Receive_DMA+0x50>
  {
    __HAL_UNLOCK(hi2s);
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	2234      	movs	r2, #52	@ 0x34
 8009e58:	2100      	movs	r1, #0
 8009e5a:	5499      	strb	r1, [r3, r2]
    return HAL_BUSY;
 8009e5c:	2302      	movs	r3, #2
 8009e5e:	e08e      	b.n	8009f7e <HAL_I2S_Receive_DMA+0x16e>
>>>>>>> main
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
<<<<<<< HEAD
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	2235      	movs	r2, #53	@ 0x35
 8009ba0:	2104      	movs	r1, #4
 8009ba2:	5499      	strb	r1, [r3, r2]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	2200      	movs	r2, #0
 8009ba8:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->pRxBuffPtr = pData;
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	68ba      	ldr	r2, [r7, #8]
 8009bae:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	69db      	ldr	r3, [r3, #28]
 8009bb6:	2207      	movs	r2, #7
 8009bb8:	4013      	ands	r3, r2
 8009bba:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8009bbc:	697b      	ldr	r3, [r7, #20]
 8009bbe:	2b03      	cmp	r3, #3
 8009bc0:	d002      	beq.n	8009bc8 <HAL_I2S_Receive_DMA+0x7c>
 8009bc2:	697b      	ldr	r3, [r7, #20]
 8009bc4:	2b05      	cmp	r3, #5
 8009bc6:	d10c      	bne.n	8009be2 <HAL_I2S_Receive_DMA+0x96>
  {
    hi2s->RxXferSize = (Size << 1U);
 8009bc8:	1dbb      	adds	r3, r7, #6
 8009bca:	881b      	ldrh	r3, [r3, #0]
 8009bcc:	18db      	adds	r3, r3, r3
 8009bce:	b29a      	uxth	r2, r3
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = (Size << 1U);
 8009bd4:	1dbb      	adds	r3, r7, #6
 8009bd6:	881b      	ldrh	r3, [r3, #0]
 8009bd8:	18db      	adds	r3, r3, r3
 8009bda:	b29a      	uxth	r2, r3
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8009be0:	e007      	b.n	8009bf2 <HAL_I2S_Receive_DMA+0xa6>
=======
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	2235      	movs	r2, #53	@ 0x35
 8009e64:	2104      	movs	r1, #4
 8009e66:	5499      	strb	r1, [r3, r2]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->pRxBuffPtr = pData;
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	68ba      	ldr	r2, [r7, #8]
 8009e72:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	69db      	ldr	r3, [r3, #28]
 8009e7a:	2207      	movs	r2, #7
 8009e7c:	4013      	ands	r3, r2
 8009e7e:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8009e80:	697b      	ldr	r3, [r7, #20]
 8009e82:	2b03      	cmp	r3, #3
 8009e84:	d002      	beq.n	8009e8c <HAL_I2S_Receive_DMA+0x7c>
 8009e86:	697b      	ldr	r3, [r7, #20]
 8009e88:	2b05      	cmp	r3, #5
 8009e8a:	d10c      	bne.n	8009ea6 <HAL_I2S_Receive_DMA+0x96>
  {
    hi2s->RxXferSize = (Size << 1U);
 8009e8c:	1dbb      	adds	r3, r7, #6
 8009e8e:	881b      	ldrh	r3, [r3, #0]
 8009e90:	18db      	adds	r3, r3, r3
 8009e92:	b29a      	uxth	r2, r3
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = (Size << 1U);
 8009e98:	1dbb      	adds	r3, r7, #6
 8009e9a:	881b      	ldrh	r3, [r3, #0]
 8009e9c:	18db      	adds	r3, r3, r3
 8009e9e:	b29a      	uxth	r2, r3
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8009ea4:	e007      	b.n	8009eb6 <HAL_I2S_Receive_DMA+0xa6>
>>>>>>> main
  }
  else
  {
    hi2s->RxXferSize = Size;
<<<<<<< HEAD
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	1dba      	adds	r2, r7, #6
 8009be6:	8812      	ldrh	r2, [r2, #0]
 8009be8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = Size;
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	1dba      	adds	r2, r7, #6
 8009bee:	8812      	ldrh	r2, [r2, #0]
 8009bf0:	855a      	strh	r2, [r3, #42]	@ 0x2a
=======
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	1dba      	adds	r2, r7, #6
 8009eaa:	8812      	ldrh	r2, [r2, #0]
 8009eac:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = Size;
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	1dba      	adds	r2, r7, #6
 8009eb2:	8812      	ldrh	r2, [r2, #0]
 8009eb4:	855a      	strh	r2, [r3, #42]	@ 0x2a
>>>>>>> main
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
<<<<<<< HEAD
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009bf6:	4a33      	ldr	r2, [pc, #204]	@ (8009cc4 <HAL_I2S_Receive_DMA+0x178>)
 8009bf8:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009bfe:	4a32      	ldr	r2, [pc, #200]	@ (8009cc8 <HAL_I2S_Receive_DMA+0x17c>)
 8009c00:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c06:	4a31      	ldr	r2, [pc, #196]	@ (8009ccc <HAL_I2S_Receive_DMA+0x180>)
 8009c08:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	69da      	ldr	r2, [r3, #28]
 8009c10:	23c0      	movs	r3, #192	@ 0xc0
 8009c12:	009b      	lsls	r3, r3, #2
 8009c14:	401a      	ands	r2, r3
 8009c16:	23c0      	movs	r3, #192	@ 0xc0
 8009c18:	009b      	lsls	r3, r3, #2
 8009c1a:	429a      	cmp	r2, r3
 8009c1c:	d10a      	bne.n	8009c34 <HAL_I2S_Receive_DMA+0xe8>
=======
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009eba:	4a33      	ldr	r2, [pc, #204]	@ (8009f88 <HAL_I2S_Receive_DMA+0x178>)
 8009ebc:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ec2:	4a32      	ldr	r2, [pc, #200]	@ (8009f8c <HAL_I2S_Receive_DMA+0x17c>)
 8009ec4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009eca:	4a31      	ldr	r2, [pc, #196]	@ (8009f90 <HAL_I2S_Receive_DMA+0x180>)
 8009ecc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	69da      	ldr	r2, [r3, #28]
 8009ed4:	23c0      	movs	r3, #192	@ 0xc0
 8009ed6:	009b      	lsls	r3, r3, #2
 8009ed8:	401a      	ands	r2, r3
 8009eda:	23c0      	movs	r3, #192	@ 0xc0
 8009edc:	009b      	lsls	r3, r3, #2
 8009ede:	429a      	cmp	r2, r3
 8009ee0:	d10a      	bne.n	8009ef8 <HAL_I2S_Receive_DMA+0xe8>
>>>>>>> main
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
<<<<<<< HEAD
 8009c1e:	2300      	movs	r3, #0
 8009c20:	613b      	str	r3, [r7, #16]
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	68db      	ldr	r3, [r3, #12]
 8009c28:	613b      	str	r3, [r7, #16]
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	689b      	ldr	r3, [r3, #8]
 8009c30:	613b      	str	r3, [r7, #16]
 8009c32:	693b      	ldr	r3, [r7, #16]
=======
 8009ee2:	2300      	movs	r3, #0
 8009ee4:	613b      	str	r3, [r7, #16]
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	68db      	ldr	r3, [r3, #12]
 8009eec:	613b      	str	r3, [r7, #16]
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	689b      	ldr	r3, [r3, #8]
 8009ef4:	613b      	str	r3, [r7, #16]
 8009ef6:	693b      	ldr	r3, [r7, #16]
>>>>>>> main
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
<<<<<<< HEAD
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	330c      	adds	r3, #12
 8009c3e:	0019      	movs	r1, r3
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c44:	001a      	movs	r2, r3
                                 hi2s->RxXferSize))
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009c4a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8009c4c:	f7fd f9fc 	bl	8007048 <HAL_DMA_Start_IT>
 8009c50:	1e03      	subs	r3, r0, #0
 8009c52:	d00f      	beq.n	8009c74 <HAL_I2S_Receive_DMA+0x128>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c58:	2208      	movs	r2, #8
 8009c5a:	431a      	orrs	r2, r3
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	639a      	str	r2, [r3, #56]	@ 0x38
    hi2s->State = HAL_I2S_STATE_READY;
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	2235      	movs	r2, #53	@ 0x35
 8009c64:	2101      	movs	r1, #1
 8009c66:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hi2s);
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	2234      	movs	r2, #52	@ 0x34
 8009c6c:	2100      	movs	r1, #0
 8009c6e:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8009c70:	2301      	movs	r3, #1
 8009c72:	e022      	b.n	8009cba <HAL_I2S_Receive_DMA+0x16e>
=======
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	330c      	adds	r3, #12
 8009f02:	0019      	movs	r1, r3
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f08:	001a      	movs	r2, r3
                                 hi2s->RxXferSize))
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009f0e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8009f10:	f7fd f9fc 	bl	800730c <HAL_DMA_Start_IT>
 8009f14:	1e03      	subs	r3, r0, #0
 8009f16:	d00f      	beq.n	8009f38 <HAL_I2S_Receive_DMA+0x128>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f1c:	2208      	movs	r2, #8
 8009f1e:	431a      	orrs	r2, r3
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	639a      	str	r2, [r3, #56]	@ 0x38
    hi2s->State = HAL_I2S_STATE_READY;
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	2235      	movs	r2, #53	@ 0x35
 8009f28:	2101      	movs	r1, #1
 8009f2a:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hi2s);
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	2234      	movs	r2, #52	@ 0x34
 8009f30:	2100      	movs	r1, #0
 8009f32:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8009f34:	2301      	movs	r3, #1
 8009f36:	e022      	b.n	8009f7e <HAL_I2S_Receive_DMA+0x16e>
>>>>>>> main
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
<<<<<<< HEAD
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	69da      	ldr	r2, [r3, #28]
 8009c7a:	2380      	movs	r3, #128	@ 0x80
 8009c7c:	00db      	lsls	r3, r3, #3
 8009c7e:	4013      	ands	r3, r2
 8009c80:	d108      	bne.n	8009c94 <HAL_I2S_Receive_DMA+0x148>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	69da      	ldr	r2, [r3, #28]
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	2180      	movs	r1, #128	@ 0x80
 8009c8e:	00c9      	lsls	r1, r1, #3
 8009c90:	430a      	orrs	r2, r1
 8009c92:	61da      	str	r2, [r3, #28]
=======
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	69da      	ldr	r2, [r3, #28]
 8009f3e:	2380      	movs	r3, #128	@ 0x80
 8009f40:	00db      	lsls	r3, r3, #3
 8009f42:	4013      	ands	r3, r2
 8009f44:	d108      	bne.n	8009f58 <HAL_I2S_Receive_DMA+0x148>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	69da      	ldr	r2, [r3, #28]
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	2180      	movs	r1, #128	@ 0x80
 8009f52:	00c9      	lsls	r1, r1, #3
 8009f54:	430a      	orrs	r2, r1
 8009f56:	61da      	str	r2, [r3, #28]
>>>>>>> main
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
<<<<<<< HEAD
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	685b      	ldr	r3, [r3, #4]
 8009c9a:	2201      	movs	r2, #1
 8009c9c:	4013      	ands	r3, r2
 8009c9e:	d107      	bne.n	8009cb0 <HAL_I2S_Receive_DMA+0x164>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	685a      	ldr	r2, [r3, #4]
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	2101      	movs	r1, #1
 8009cac:	430a      	orrs	r2, r1
 8009cae:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	2234      	movs	r2, #52	@ 0x34
 8009cb4:	2100      	movs	r1, #0
 8009cb6:	5499      	strb	r1, [r3, r2]
  return HAL_OK;
 8009cb8:	2300      	movs	r3, #0
}
 8009cba:	0018      	movs	r0, r3
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	b006      	add	sp, #24
 8009cc0:	bd80      	pop	{r7, pc}
 8009cc2:	46c0      	nop			@ (mov r8, r8)
 8009cc4:	08009ecd 	.word	0x08009ecd
 8009cc8:	08009e89 	.word	0x08009e89
 8009ccc:	08009eeb 	.word	0x08009eeb

08009cd0 <HAL_I2S_DMAStop>:
=======
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	685b      	ldr	r3, [r3, #4]
 8009f5e:	2201      	movs	r2, #1
 8009f60:	4013      	ands	r3, r2
 8009f62:	d107      	bne.n	8009f74 <HAL_I2S_Receive_DMA+0x164>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	685a      	ldr	r2, [r3, #4]
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	2101      	movs	r1, #1
 8009f70:	430a      	orrs	r2, r1
 8009f72:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	2234      	movs	r2, #52	@ 0x34
 8009f78:	2100      	movs	r1, #0
 8009f7a:	5499      	strb	r1, [r3, r2]
  return HAL_OK;
 8009f7c:	2300      	movs	r3, #0
}
 8009f7e:	0018      	movs	r0, r3
 8009f80:	46bd      	mov	sp, r7
 8009f82:	b006      	add	sp, #24
 8009f84:	bd80      	pop	{r7, pc}
 8009f86:	46c0      	nop			@ (mov r8, r8)
 8009f88:	0800a191 	.word	0x0800a191
 8009f8c:	0800a14d 	.word	0x0800a14d
 8009f90:	0800a1af 	.word	0x0800a1af

08009f94 <HAL_I2S_DMAStop>:
>>>>>>> main
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
<<<<<<< HEAD
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	b086      	sub	sp, #24
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009cd8:	2317      	movs	r3, #23
 8009cda:	18fb      	adds	r3, r7, r3
 8009cdc:	2200      	movs	r2, #0
 8009cde:	701a      	strb	r2, [r3, #0]
=======
 8009f94:	b580      	push	{r7, lr}
 8009f96:	b086      	sub	sp, #24
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009f9c:	2317      	movs	r3, #23
 8009f9e:	18fb      	adds	r3, r7, r3
 8009fa0:	2200      	movs	r2, #0
 8009fa2:	701a      	strb	r2, [r3, #0]
>>>>>>> main
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
<<<<<<< HEAD
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	685a      	ldr	r2, [r3, #4]
 8009ce4:	2380      	movs	r3, #128	@ 0x80
 8009ce6:	009b      	lsls	r3, r3, #2
 8009ce8:	429a      	cmp	r2, r3
 8009cea:	d003      	beq.n	8009cf4 <HAL_I2S_DMAStop+0x24>
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	685b      	ldr	r3, [r3, #4]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d158      	bne.n	8009da6 <HAL_I2S_DMAStop+0xd6>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d010      	beq.n	8009d1e <HAL_I2S_DMAStop+0x4e>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d00:	0018      	movs	r0, r3
 8009d02:	f7fd fa07 	bl	8007114 <HAL_DMA_Abort>
 8009d06:	1e03      	subs	r3, r0, #0
 8009d08:	d009      	beq.n	8009d1e <HAL_I2S_DMAStop+0x4e>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d0e:	2208      	movs	r2, #8
 8009d10:	431a      	orrs	r2, r3
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 8009d16:	2317      	movs	r3, #23
 8009d18:	18fb      	adds	r3, r7, r3
 8009d1a:	2201      	movs	r2, #1
 8009d1c:	701a      	strb	r2, [r3, #0]
=======
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	685a      	ldr	r2, [r3, #4]
 8009fa8:	2380      	movs	r3, #128	@ 0x80
 8009faa:	009b      	lsls	r3, r3, #2
 8009fac:	429a      	cmp	r2, r3
 8009fae:	d003      	beq.n	8009fb8 <HAL_I2S_DMAStop+0x24>
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	685b      	ldr	r3, [r3, #4]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d158      	bne.n	800a06a <HAL_I2S_DMAStop+0xd6>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d010      	beq.n	8009fe2 <HAL_I2S_DMAStop+0x4e>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fc4:	0018      	movs	r0, r3
 8009fc6:	f7fd fa07 	bl	80073d8 <HAL_DMA_Abort>
 8009fca:	1e03      	subs	r3, r0, #0
 8009fcc:	d009      	beq.n	8009fe2 <HAL_I2S_DMAStop+0x4e>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009fd2:	2208      	movs	r2, #8
 8009fd4:	431a      	orrs	r2, r3
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 8009fda:	2317      	movs	r3, #23
 8009fdc:	18fb      	adds	r3, r7, r3
 8009fde:	2201      	movs	r2, #1
 8009fe0:	701a      	strb	r2, [r3, #0]
>>>>>>> main
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
<<<<<<< HEAD
 8009d1e:	6878      	ldr	r0, [r7, #4]
 8009d20:	2364      	movs	r3, #100	@ 0x64
 8009d22:	2201      	movs	r2, #1
 8009d24:	2102      	movs	r1, #2
 8009d26:	f000 f907 	bl	8009f38 <I2S_WaitFlagStateUntilTimeout>
 8009d2a:	1e03      	subs	r3, r0, #0
 8009d2c:	d00d      	beq.n	8009d4a <HAL_I2S_DMAStop+0x7a>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d32:	2201      	movs	r2, #1
 8009d34:	431a      	orrs	r2, r3
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	2235      	movs	r2, #53	@ 0x35
 8009d3e:	2101      	movs	r1, #1
 8009d40:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 8009d42:	2317      	movs	r3, #23
 8009d44:	18fb      	adds	r3, r7, r3
 8009d46:	2201      	movs	r2, #1
 8009d48:	701a      	strb	r2, [r3, #0]
=======
 8009fe2:	6878      	ldr	r0, [r7, #4]
 8009fe4:	2364      	movs	r3, #100	@ 0x64
 8009fe6:	2201      	movs	r2, #1
 8009fe8:	2102      	movs	r1, #2
 8009fea:	f000 f907 	bl	800a1fc <I2S_WaitFlagStateUntilTimeout>
 8009fee:	1e03      	subs	r3, r0, #0
 8009ff0:	d00d      	beq.n	800a00e <HAL_I2S_DMAStop+0x7a>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ff6:	2201      	movs	r2, #1
 8009ff8:	431a      	orrs	r2, r3
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	2235      	movs	r2, #53	@ 0x35
 800a002:	2101      	movs	r1, #1
 800a004:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 800a006:	2317      	movs	r3, #23
 800a008:	18fb      	adds	r3, r7, r3
 800a00a:	2201      	movs	r2, #1
 800a00c:	701a      	strb	r2, [r3, #0]
>>>>>>> main
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
<<<<<<< HEAD
 8009d4a:	6878      	ldr	r0, [r7, #4]
 8009d4c:	2364      	movs	r3, #100	@ 0x64
 8009d4e:	2200      	movs	r2, #0
 8009d50:	2180      	movs	r1, #128	@ 0x80
 8009d52:	f000 f8f1 	bl	8009f38 <I2S_WaitFlagStateUntilTimeout>
 8009d56:	1e03      	subs	r3, r0, #0
 8009d58:	d00d      	beq.n	8009d76 <HAL_I2S_DMAStop+0xa6>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d5e:	2201      	movs	r2, #1
 8009d60:	431a      	orrs	r2, r3
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	2235      	movs	r2, #53	@ 0x35
 8009d6a:	2101      	movs	r1, #1
 8009d6c:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 8009d6e:	2317      	movs	r3, #23
 8009d70:	18fb      	adds	r3, r7, r3
 8009d72:	2201      	movs	r2, #1
 8009d74:	701a      	strb	r2, [r3, #0]
=======
 800a00e:	6878      	ldr	r0, [r7, #4]
 800a010:	2364      	movs	r3, #100	@ 0x64
 800a012:	2200      	movs	r2, #0
 800a014:	2180      	movs	r1, #128	@ 0x80
 800a016:	f000 f8f1 	bl	800a1fc <I2S_WaitFlagStateUntilTimeout>
 800a01a:	1e03      	subs	r3, r0, #0
 800a01c:	d00d      	beq.n	800a03a <HAL_I2S_DMAStop+0xa6>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a022:	2201      	movs	r2, #1
 800a024:	431a      	orrs	r2, r3
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	2235      	movs	r2, #53	@ 0x35
 800a02e:	2101      	movs	r1, #1
 800a030:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 800a032:	2317      	movs	r3, #23
 800a034:	18fb      	adds	r3, r7, r3
 800a036:	2201      	movs	r2, #1
 800a038:	701a      	strb	r2, [r3, #0]
>>>>>>> main
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
<<<<<<< HEAD
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	69da      	ldr	r2, [r3, #28]
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	4938      	ldr	r1, [pc, #224]	@ (8009e64 <HAL_I2S_DMAStop+0x194>)
 8009d82:	400a      	ands	r2, r1
 8009d84:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8009d86:	2300      	movs	r3, #0
 8009d88:	613b      	str	r3, [r7, #16]
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	689b      	ldr	r3, [r3, #8]
 8009d90:	613b      	str	r3, [r7, #16]
 8009d92:	693b      	ldr	r3, [r7, #16]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	685a      	ldr	r2, [r3, #4]
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	2102      	movs	r1, #2
 8009da0:	438a      	bics	r2, r1
 8009da2:	605a      	str	r2, [r3, #4]
 8009da4:	e053      	b.n	8009e4e <HAL_I2S_DMAStop+0x17e>
=======
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	69da      	ldr	r2, [r3, #28]
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	4938      	ldr	r1, [pc, #224]	@ (800a128 <HAL_I2S_DMAStop+0x194>)
 800a046:	400a      	ands	r2, r1
 800a048:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800a04a:	2300      	movs	r3, #0
 800a04c:	613b      	str	r3, [r7, #16]
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	689b      	ldr	r3, [r3, #8]
 800a054:	613b      	str	r3, [r7, #16]
 800a056:	693b      	ldr	r3, [r7, #16]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	685a      	ldr	r2, [r3, #4]
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	2102      	movs	r1, #2
 800a064:	438a      	bics	r2, r1
 800a066:	605a      	str	r2, [r3, #4]
 800a068:	e053      	b.n	800a112 <HAL_I2S_DMAStop+0x17e>
>>>>>>> main

  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
<<<<<<< HEAD
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	685a      	ldr	r2, [r3, #4]
 8009daa:	23c0      	movs	r3, #192	@ 0xc0
 8009dac:	009b      	lsls	r3, r3, #2
 8009dae:	429a      	cmp	r2, r3
 8009db0:	d005      	beq.n	8009dbe <HAL_I2S_DMAStop+0xee>
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	685a      	ldr	r2, [r3, #4]
 8009db6:	2380      	movs	r3, #128	@ 0x80
 8009db8:	005b      	lsls	r3, r3, #1
 8009dba:	429a      	cmp	r2, r3
 8009dbc:	d147      	bne.n	8009e4e <HAL_I2S_DMAStop+0x17e>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d010      	beq.n	8009de8 <HAL_I2S_DMAStop+0x118>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009dca:	0018      	movs	r0, r3
 8009dcc:	f7fd f9a2 	bl	8007114 <HAL_DMA_Abort>
 8009dd0:	1e03      	subs	r3, r0, #0
 8009dd2:	d009      	beq.n	8009de8 <HAL_I2S_DMAStop+0x118>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009dd8:	2208      	movs	r2, #8
 8009dda:	431a      	orrs	r2, r3
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 8009de0:	2317      	movs	r3, #23
 8009de2:	18fb      	adds	r3, r7, r3
 8009de4:	2201      	movs	r2, #1
 8009de6:	701a      	strb	r2, [r3, #0]
=======
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	685a      	ldr	r2, [r3, #4]
 800a06e:	23c0      	movs	r3, #192	@ 0xc0
 800a070:	009b      	lsls	r3, r3, #2
 800a072:	429a      	cmp	r2, r3
 800a074:	d005      	beq.n	800a082 <HAL_I2S_DMAStop+0xee>
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	685a      	ldr	r2, [r3, #4]
 800a07a:	2380      	movs	r3, #128	@ 0x80
 800a07c:	005b      	lsls	r3, r3, #1
 800a07e:	429a      	cmp	r2, r3
 800a080:	d147      	bne.n	800a112 <HAL_I2S_DMAStop+0x17e>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a086:	2b00      	cmp	r3, #0
 800a088:	d010      	beq.n	800a0ac <HAL_I2S_DMAStop+0x118>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a08e:	0018      	movs	r0, r3
 800a090:	f7fd f9a2 	bl	80073d8 <HAL_DMA_Abort>
 800a094:	1e03      	subs	r3, r0, #0
 800a096:	d009      	beq.n	800a0ac <HAL_I2S_DMAStop+0x118>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a09c:	2208      	movs	r2, #8
 800a09e:	431a      	orrs	r2, r3
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 800a0a4:	2317      	movs	r3, #23
 800a0a6:	18fb      	adds	r3, r7, r3
 800a0a8:	2201      	movs	r2, #1
 800a0aa:	701a      	strb	r2, [r3, #0]
>>>>>>> main
      }
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
<<<<<<< HEAD
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	69da      	ldr	r2, [r3, #28]
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	491c      	ldr	r1, [pc, #112]	@ (8009e64 <HAL_I2S_DMAStop+0x194>)
 8009df4:	400a      	ands	r2, r1
 8009df6:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8009df8:	2300      	movs	r3, #0
 8009dfa:	60fb      	str	r3, [r7, #12]
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	68db      	ldr	r3, [r3, #12]
 8009e02:	60fb      	str	r3, [r7, #12]
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	689b      	ldr	r3, [r3, #8]
 8009e0a:	60fb      	str	r3, [r7, #12]
 8009e0c:	68fb      	ldr	r3, [r7, #12]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	685a      	ldr	r2, [r3, #4]
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	2101      	movs	r1, #1
 8009e1a:	438a      	bics	r2, r1
 8009e1c:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	685a      	ldr	r2, [r3, #4]
 8009e22:	2380      	movs	r3, #128	@ 0x80
 8009e24:	005b      	lsls	r3, r3, #1
 8009e26:	429a      	cmp	r2, r3
 8009e28:	d10e      	bne.n	8009e48 <HAL_I2S_DMAStop+0x178>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e2e:	2240      	movs	r2, #64	@ 0x40
 8009e30:	431a      	orrs	r2, r3
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	2235      	movs	r2, #53	@ 0x35
 8009e3a:	2101      	movs	r1, #1
 8009e3c:	5499      	strb	r1, [r3, r2]
      errorcode = HAL_ERROR;
 8009e3e:	2317      	movs	r3, #23
 8009e40:	18fb      	adds	r3, r7, r3
 8009e42:	2201      	movs	r2, #1
 8009e44:	701a      	strb	r2, [r3, #0]
 8009e46:	e002      	b.n	8009e4e <HAL_I2S_DMAStop+0x17e>
=======
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	69da      	ldr	r2, [r3, #28]
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	491c      	ldr	r1, [pc, #112]	@ (800a128 <HAL_I2S_DMAStop+0x194>)
 800a0b8:	400a      	ands	r2, r1
 800a0ba:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800a0bc:	2300      	movs	r3, #0
 800a0be:	60fb      	str	r3, [r7, #12]
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	68db      	ldr	r3, [r3, #12]
 800a0c6:	60fb      	str	r3, [r7, #12]
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	689b      	ldr	r3, [r3, #8]
 800a0ce:	60fb      	str	r3, [r7, #12]
 800a0d0:	68fb      	ldr	r3, [r7, #12]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	685a      	ldr	r2, [r3, #4]
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	2101      	movs	r1, #1
 800a0de:	438a      	bics	r2, r1
 800a0e0:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	685a      	ldr	r2, [r3, #4]
 800a0e6:	2380      	movs	r3, #128	@ 0x80
 800a0e8:	005b      	lsls	r3, r3, #1
 800a0ea:	429a      	cmp	r2, r3
 800a0ec:	d10e      	bne.n	800a10c <HAL_I2S_DMAStop+0x178>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0f2:	2240      	movs	r2, #64	@ 0x40
 800a0f4:	431a      	orrs	r2, r3
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	2235      	movs	r2, #53	@ 0x35
 800a0fe:	2101      	movs	r1, #1
 800a100:	5499      	strb	r1, [r3, r2]
      errorcode = HAL_ERROR;
 800a102:	2317      	movs	r3, #23
 800a104:	18fb      	adds	r3, r7, r3
 800a106:	2201      	movs	r2, #1
 800a108:	701a      	strb	r2, [r3, #0]
 800a10a:	e002      	b.n	800a112 <HAL_I2S_DMAStop+0x17e>
>>>>>>> main
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
<<<<<<< HEAD
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	68db      	ldr	r3, [r3, #12]
=======
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	68db      	ldr	r3, [r3, #12]
>>>>>>> main
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
<<<<<<< HEAD
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	2235      	movs	r2, #53	@ 0x35
 8009e52:	2101      	movs	r1, #1
 8009e54:	5499      	strb	r1, [r3, r2]

  return errorcode;
 8009e56:	2317      	movs	r3, #23
 8009e58:	18fb      	adds	r3, r7, r3
 8009e5a:	781b      	ldrb	r3, [r3, #0]
}
 8009e5c:	0018      	movs	r0, r3
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	b006      	add	sp, #24
 8009e62:	bd80      	pop	{r7, pc}
 8009e64:	fffffbff 	.word	0xfffffbff

08009e68 <HAL_I2S_RxHalfCpltCallback>:
=======
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	2235      	movs	r2, #53	@ 0x35
 800a116:	2101      	movs	r1, #1
 800a118:	5499      	strb	r1, [r3, r2]

  return errorcode;
 800a11a:	2317      	movs	r3, #23
 800a11c:	18fb      	adds	r3, r7, r3
 800a11e:	781b      	ldrb	r3, [r3, #0]
}
 800a120:	0018      	movs	r0, r3
 800a122:	46bd      	mov	sp, r7
 800a124:	b006      	add	sp, #24
 800a126:	bd80      	pop	{r7, pc}
 800a128:	fffffbff 	.word	0xfffffbff

0800a12c <HAL_I2S_RxHalfCpltCallback>:
>>>>>>> main
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
<<<<<<< HEAD
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	b082      	sub	sp, #8
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	6078      	str	r0, [r7, #4]
=======
 800a12c:	b580      	push	{r7, lr}
 800a12e:	b082      	sub	sp, #8
 800a130:	af00      	add	r7, sp, #0
 800a132:	6078      	str	r0, [r7, #4]
>>>>>>> main
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxHalfCpltCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8009e70:	46c0      	nop			@ (mov r8, r8)
 8009e72:	46bd      	mov	sp, r7
 8009e74:	b002      	add	sp, #8
 8009e76:	bd80      	pop	{r7, pc}

08009e78 <HAL_I2S_ErrorCallback>:
=======
 800a134:	46c0      	nop			@ (mov r8, r8)
 800a136:	46bd      	mov	sp, r7
 800a138:	b002      	add	sp, #8
 800a13a:	bd80      	pop	{r7, pc}

0800a13c <HAL_I2S_ErrorCallback>:
>>>>>>> main
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
<<<<<<< HEAD
 8009e78:	b580      	push	{r7, lr}
 8009e7a:	b082      	sub	sp, #8
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]
=======
 800a13c:	b580      	push	{r7, lr}
 800a13e:	b082      	sub	sp, #8
 800a140:	af00      	add	r7, sp, #0
 800a142:	6078      	str	r0, [r7, #4]
>>>>>>> main
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8009e80:	46c0      	nop			@ (mov r8, r8)
 8009e82:	46bd      	mov	sp, r7
 8009e84:	b002      	add	sp, #8
 8009e86:	bd80      	pop	{r7, pc}

08009e88 <I2S_DMARxCplt>:
=======
 800a144:	46c0      	nop			@ (mov r8, r8)
 800a146:	46bd      	mov	sp, r7
 800a148:	b002      	add	sp, #8
 800a14a:	bd80      	pop	{r7, pc}

0800a14c <I2S_DMARxCplt>:
>>>>>>> main
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8009e88:	b580      	push	{r7, lr}
 8009e8a:	b084      	sub	sp, #16
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e94:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	69db      	ldr	r3, [r3, #28]
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d10e      	bne.n	8009ebc <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	685a      	ldr	r2, [r3, #4]
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	2101      	movs	r1, #1
 8009eaa:	438a      	bics	r2, r1
 8009eac:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	2200      	movs	r2, #0
 8009eb2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	2235      	movs	r2, #53	@ 0x35
 8009eb8:	2101      	movs	r1, #1
 8009eba:	5499      	strb	r1, [r3, r2]
=======
 800a14c:	b580      	push	{r7, lr}
 800a14e:	b084      	sub	sp, #16
 800a150:	af00      	add	r7, sp, #0
 800a152:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a158:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	69db      	ldr	r3, [r3, #28]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d10e      	bne.n	800a180 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	685a      	ldr	r2, [r3, #4]
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	2101      	movs	r1, #1
 800a16e:	438a      	bics	r2, r1
 800a170:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	2200      	movs	r2, #0
 800a176:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	2235      	movs	r2, #53	@ 0x35
 800a17c:	2101      	movs	r1, #1
 800a17e:	5499      	strb	r1, [r3, r2]
>>>>>>> main
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
<<<<<<< HEAD
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	0018      	movs	r0, r3
 8009ec0:	f7fa fb98 	bl	80045f4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8009ec4:	46c0      	nop			@ (mov r8, r8)
 8009ec6:	46bd      	mov	sp, r7
 8009ec8:	b004      	add	sp, #16
 8009eca:	bd80      	pop	{r7, pc}

08009ecc <I2S_DMARxHalfCplt>:
=======
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	0018      	movs	r0, r3
 800a184:	f7fa fa60 	bl	8004648 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800a188:	46c0      	nop			@ (mov r8, r8)
 800a18a:	46bd      	mov	sp, r7
 800a18c:	b004      	add	sp, #16
 800a18e:	bd80      	pop	{r7, pc}

0800a190 <I2S_DMARxHalfCplt>:
>>>>>>> main
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8009ecc:	b580      	push	{r7, lr}
 8009ece:	b084      	sub	sp, #16
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ed8:	60fb      	str	r3, [r7, #12]
=======
 800a190:	b580      	push	{r7, lr}
 800a192:	b084      	sub	sp, #16
 800a194:	af00      	add	r7, sp, #0
 800a196:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a19c:	60fb      	str	r3, [r7, #12]
>>>>>>> main

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
<<<<<<< HEAD
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	0018      	movs	r0, r3
 8009ede:	f7ff ffc3 	bl	8009e68 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8009ee2:	46c0      	nop			@ (mov r8, r8)
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	b004      	add	sp, #16
 8009ee8:	bd80      	pop	{r7, pc}

08009eea <I2S_DMAError>:
=======
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	0018      	movs	r0, r3
 800a1a2:	f7ff ffc3 	bl	800a12c <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800a1a6:	46c0      	nop			@ (mov r8, r8)
 800a1a8:	46bd      	mov	sp, r7
 800a1aa:	b004      	add	sp, #16
 800a1ac:	bd80      	pop	{r7, pc}

0800a1ae <I2S_DMAError>:
>>>>>>> main
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8009eea:	b580      	push	{r7, lr}
 8009eec:	b084      	sub	sp, #16
 8009eee:	af00      	add	r7, sp, #0
 8009ef0:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ef6:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	685a      	ldr	r2, [r3, #4]
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	2103      	movs	r1, #3
 8009f04:	438a      	bics	r2, r1
 8009f06:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	2200      	movs	r2, #0
 8009f0c:	845a      	strh	r2, [r3, #34]	@ 0x22
  hi2s->RxXferCount = 0U;
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	2200      	movs	r2, #0
 8009f12:	855a      	strh	r2, [r3, #42]	@ 0x2a

  hi2s->State = HAL_I2S_STATE_READY;
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	2235      	movs	r2, #53	@ 0x35
 8009f18:	2101      	movs	r1, #1
 8009f1a:	5499      	strb	r1, [r3, r2]

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f20:	2208      	movs	r2, #8
 8009f22:	431a      	orrs	r2, r3
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	639a      	str	r2, [r3, #56]	@ 0x38
=======
 800a1ae:	b580      	push	{r7, lr}
 800a1b0:	b084      	sub	sp, #16
 800a1b2:	af00      	add	r7, sp, #0
 800a1b4:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1ba:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	685a      	ldr	r2, [r3, #4]
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	2103      	movs	r1, #3
 800a1c8:	438a      	bics	r2, r1
 800a1ca:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	2200      	movs	r2, #0
 800a1d0:	845a      	strh	r2, [r3, #34]	@ 0x22
  hi2s->RxXferCount = 0U;
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	2200      	movs	r2, #0
 800a1d6:	855a      	strh	r2, [r3, #42]	@ 0x2a

  hi2s->State = HAL_I2S_STATE_READY;
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	2235      	movs	r2, #53	@ 0x35
 800a1dc:	2101      	movs	r1, #1
 800a1de:	5499      	strb	r1, [r3, r2]

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a1e4:	2208      	movs	r2, #8
 800a1e6:	431a      	orrs	r2, r3
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	639a      	str	r2, [r3, #56]	@ 0x38
>>>>>>> main
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
<<<<<<< HEAD
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	0018      	movs	r0, r3
 8009f2c:	f7ff ffa4 	bl	8009e78 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8009f30:	46c0      	nop			@ (mov r8, r8)
 8009f32:	46bd      	mov	sp, r7
 8009f34:	b004      	add	sp, #16
 8009f36:	bd80      	pop	{r7, pc}

08009f38 <I2S_WaitFlagStateUntilTimeout>:
=======
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	0018      	movs	r0, r3
 800a1f0:	f7ff ffa4 	bl	800a13c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800a1f4:	46c0      	nop			@ (mov r8, r8)
 800a1f6:	46bd      	mov	sp, r7
 800a1f8:	b004      	add	sp, #16
 800a1fa:	bd80      	pop	{r7, pc}

0800a1fc <I2S_WaitFlagStateUntilTimeout>:
>>>>>>> main
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
<<<<<<< HEAD
 8009f38:	b580      	push	{r7, lr}
 8009f3a:	b086      	sub	sp, #24
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	60f8      	str	r0, [r7, #12]
 8009f40:	60b9      	str	r1, [r7, #8]
 8009f42:	603b      	str	r3, [r7, #0]
 8009f44:	1dfb      	adds	r3, r7, #7
 8009f46:	701a      	strb	r2, [r3, #0]
=======
 800a1fc:	b580      	push	{r7, lr}
 800a1fe:	b086      	sub	sp, #24
 800a200:	af00      	add	r7, sp, #0
 800a202:	60f8      	str	r0, [r7, #12]
 800a204:	60b9      	str	r1, [r7, #8]
 800a206:	603b      	str	r3, [r7, #0]
 800a208:	1dfb      	adds	r3, r7, #7
 800a20a:	701a      	strb	r2, [r3, #0]
>>>>>>> main
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
<<<<<<< HEAD
 8009f48:	f7fc fe9c 	bl	8006c84 <HAL_GetTick>
 8009f4c:	0003      	movs	r3, r0
 8009f4e:	617b      	str	r3, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8009f50:	e017      	b.n	8009f82 <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009f52:	683b      	ldr	r3, [r7, #0]
 8009f54:	3301      	adds	r3, #1
 8009f56:	d014      	beq.n	8009f82 <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8009f58:	f7fc fe94 	bl	8006c84 <HAL_GetTick>
 8009f5c:	0002      	movs	r2, r0
 8009f5e:	697b      	ldr	r3, [r7, #20]
 8009f60:	1ad3      	subs	r3, r2, r3
 8009f62:	683a      	ldr	r2, [r7, #0]
 8009f64:	429a      	cmp	r2, r3
 8009f66:	d902      	bls.n	8009f6e <I2S_WaitFlagStateUntilTimeout+0x36>
 8009f68:	683b      	ldr	r3, [r7, #0]
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d109      	bne.n	8009f82 <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	2235      	movs	r2, #53	@ 0x35
 8009f72:	2101      	movs	r1, #1
 8009f74:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	2234      	movs	r2, #52	@ 0x34
 8009f7a:	2100      	movs	r1, #0
 8009f7c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8009f7e:	2303      	movs	r3, #3
 8009f80:	e00f      	b.n	8009fa2 <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	689b      	ldr	r3, [r3, #8]
 8009f88:	68ba      	ldr	r2, [r7, #8]
 8009f8a:	4013      	ands	r3, r2
 8009f8c:	68ba      	ldr	r2, [r7, #8]
 8009f8e:	1ad3      	subs	r3, r2, r3
 8009f90:	425a      	negs	r2, r3
 8009f92:	4153      	adcs	r3, r2
 8009f94:	b2db      	uxtb	r3, r3
 8009f96:	001a      	movs	r2, r3
 8009f98:	1dfb      	adds	r3, r7, #7
 8009f9a:	781b      	ldrb	r3, [r3, #0]
 8009f9c:	429a      	cmp	r2, r3
 8009f9e:	d1d8      	bne.n	8009f52 <I2S_WaitFlagStateUntilTimeout+0x1a>
=======
 800a20c:	f7fc fe9c 	bl	8006f48 <HAL_GetTick>
 800a210:	0003      	movs	r3, r0
 800a212:	617b      	str	r3, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 800a214:	e017      	b.n	800a246 <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a216:	683b      	ldr	r3, [r7, #0]
 800a218:	3301      	adds	r3, #1
 800a21a:	d014      	beq.n	800a246 <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 800a21c:	f7fc fe94 	bl	8006f48 <HAL_GetTick>
 800a220:	0002      	movs	r2, r0
 800a222:	697b      	ldr	r3, [r7, #20]
 800a224:	1ad3      	subs	r3, r2, r3
 800a226:	683a      	ldr	r2, [r7, #0]
 800a228:	429a      	cmp	r2, r3
 800a22a:	d902      	bls.n	800a232 <I2S_WaitFlagStateUntilTimeout+0x36>
 800a22c:	683b      	ldr	r3, [r7, #0]
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d109      	bne.n	800a246 <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	2235      	movs	r2, #53	@ 0x35
 800a236:	2101      	movs	r1, #1
 800a238:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	2234      	movs	r2, #52	@ 0x34
 800a23e:	2100      	movs	r1, #0
 800a240:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800a242:	2303      	movs	r3, #3
 800a244:	e00f      	b.n	800a266 <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	689b      	ldr	r3, [r3, #8]
 800a24c:	68ba      	ldr	r2, [r7, #8]
 800a24e:	4013      	ands	r3, r2
 800a250:	68ba      	ldr	r2, [r7, #8]
 800a252:	1ad3      	subs	r3, r2, r3
 800a254:	425a      	negs	r2, r3
 800a256:	4153      	adcs	r3, r2
 800a258:	b2db      	uxtb	r3, r3
 800a25a:	001a      	movs	r2, r3
 800a25c:	1dfb      	adds	r3, r7, #7
 800a25e:	781b      	ldrb	r3, [r3, #0]
 800a260:	429a      	cmp	r2, r3
 800a262:	d1d8      	bne.n	800a216 <I2S_WaitFlagStateUntilTimeout+0x1a>
>>>>>>> main
      }
    }
  }
  return HAL_OK;
<<<<<<< HEAD
 8009fa0:	2300      	movs	r3, #0
}
 8009fa2:	0018      	movs	r0, r3
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	b006      	add	sp, #24
 8009fa8:	bd80      	pop	{r7, pc}
	...

08009fac <HAL_PCD_Init>:
=======
 800a264:	2300      	movs	r3, #0
}
 800a266:	0018      	movs	r0, r3
 800a268:	46bd      	mov	sp, r7
 800a26a:	b006      	add	sp, #24
 800a26c:	bd80      	pop	{r7, pc}
	...

0800a270 <HAL_PCD_Init>:
>>>>>>> main
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
<<<<<<< HEAD
 8009fac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009fae:	b08b      	sub	sp, #44	@ 0x2c
 8009fb0:	af06      	add	r7, sp, #24
 8009fb2:	6078      	str	r0, [r7, #4]
=======
 800a270:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a272:	b08b      	sub	sp, #44	@ 0x2c
 800a274:	af06      	add	r7, sp, #24
 800a276:	6078      	str	r0, [r7, #4]
>>>>>>> main
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
<<<<<<< HEAD
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d101      	bne.n	8009fbe <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8009fba:	2301      	movs	r3, #1
 8009fbc:	e0f0      	b.n	800a1a0 <HAL_PCD_Init+0x1f4>
=======
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d101      	bne.n	800a282 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800a27e:	2301      	movs	r3, #1
 800a280:	e0f0      	b.n	800a464 <HAL_PCD_Init+0x1f4>
>>>>>>> main
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
<<<<<<< HEAD
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	4a79      	ldr	r2, [pc, #484]	@ (800a1a8 <HAL_PCD_Init+0x1fc>)
 8009fc2:	5c9b      	ldrb	r3, [r3, r2]
 8009fc4:	b2db      	uxtb	r3, r3
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d108      	bne.n	8009fdc <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8009fca:	687a      	ldr	r2, [r7, #4]
 8009fcc:	23aa      	movs	r3, #170	@ 0xaa
 8009fce:	009b      	lsls	r3, r3, #2
 8009fd0:	2100      	movs	r1, #0
 8009fd2:	54d1      	strb	r1, [r2, r3]
=======
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	4a79      	ldr	r2, [pc, #484]	@ (800a46c <HAL_PCD_Init+0x1fc>)
 800a286:	5c9b      	ldrb	r3, [r3, r2]
 800a288:	b2db      	uxtb	r3, r3
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d108      	bne.n	800a2a0 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800a28e:	687a      	ldr	r2, [r7, #4]
 800a290:	23aa      	movs	r3, #170	@ 0xaa
 800a292:	009b      	lsls	r3, r3, #2
 800a294:	2100      	movs	r1, #0
 800a296:	54d1      	strb	r1, [r2, r3]
>>>>>>> main

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
<<<<<<< HEAD
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	0018      	movs	r0, r3
 8009fd8:	f7fc f9c8 	bl	800636c <HAL_PCD_MspInit>
=======
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	0018      	movs	r0, r3
 800a29c:	f7fc f9ee 	bl	800667c <HAL_PCD_MspInit>
>>>>>>> main
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
<<<<<<< HEAD
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	4a72      	ldr	r2, [pc, #456]	@ (800a1a8 <HAL_PCD_Init+0x1fc>)
 8009fe0:	2103      	movs	r1, #3
 8009fe2:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	0018      	movs	r0, r3
 8009fea:	f002 fd7f 	bl	800caec <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009fee:	230f      	movs	r3, #15
 8009ff0:	18fb      	adds	r3, r7, r3
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	701a      	strb	r2, [r3, #0]
 8009ff6:	e049      	b.n	800a08c <HAL_PCD_Init+0xe0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8009ff8:	200f      	movs	r0, #15
 8009ffa:	183b      	adds	r3, r7, r0
 8009ffc:	781b      	ldrb	r3, [r3, #0]
 8009ffe:	6879      	ldr	r1, [r7, #4]
 800a000:	1c5a      	adds	r2, r3, #1
 800a002:	0013      	movs	r3, r2
 800a004:	009b      	lsls	r3, r3, #2
 800a006:	189b      	adds	r3, r3, r2
 800a008:	00db      	lsls	r3, r3, #3
 800a00a:	18cb      	adds	r3, r1, r3
 800a00c:	3301      	adds	r3, #1
 800a00e:	2201      	movs	r2, #1
 800a010:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800a012:	183b      	adds	r3, r7, r0
 800a014:	781b      	ldrb	r3, [r3, #0]
 800a016:	6879      	ldr	r1, [r7, #4]
 800a018:	1c5a      	adds	r2, r3, #1
 800a01a:	0013      	movs	r3, r2
 800a01c:	009b      	lsls	r3, r3, #2
 800a01e:	189b      	adds	r3, r3, r2
 800a020:	00db      	lsls	r3, r3, #3
 800a022:	183a      	adds	r2, r7, r0
 800a024:	7812      	ldrb	r2, [r2, #0]
 800a026:	545a      	strb	r2, [r3, r1]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800a028:	183b      	adds	r3, r7, r0
 800a02a:	781b      	ldrb	r3, [r3, #0]
 800a02c:	6879      	ldr	r1, [r7, #4]
 800a02e:	1c5a      	adds	r2, r3, #1
 800a030:	0013      	movs	r3, r2
 800a032:	009b      	lsls	r3, r3, #2
 800a034:	189b      	adds	r3, r3, r2
 800a036:	00db      	lsls	r3, r3, #3
 800a038:	18cb      	adds	r3, r1, r3
 800a03a:	3303      	adds	r3, #3
 800a03c:	2200      	movs	r2, #0
 800a03e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800a040:	183b      	adds	r3, r7, r0
 800a042:	781a      	ldrb	r2, [r3, #0]
 800a044:	6879      	ldr	r1, [r7, #4]
 800a046:	0013      	movs	r3, r2
 800a048:	009b      	lsls	r3, r3, #2
 800a04a:	189b      	adds	r3, r3, r2
 800a04c:	00db      	lsls	r3, r3, #3
 800a04e:	18cb      	adds	r3, r1, r3
 800a050:	3338      	adds	r3, #56	@ 0x38
 800a052:	2200      	movs	r2, #0
 800a054:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800a056:	183b      	adds	r3, r7, r0
 800a058:	781a      	ldrb	r2, [r3, #0]
 800a05a:	6879      	ldr	r1, [r7, #4]
 800a05c:	0013      	movs	r3, r2
 800a05e:	009b      	lsls	r3, r3, #2
 800a060:	189b      	adds	r3, r3, r2
 800a062:	00db      	lsls	r3, r3, #3
 800a064:	18cb      	adds	r3, r1, r3
 800a066:	333c      	adds	r3, #60	@ 0x3c
 800a068:	2200      	movs	r2, #0
 800a06a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800a06c:	183b      	adds	r3, r7, r0
 800a06e:	781a      	ldrb	r2, [r3, #0]
 800a070:	6879      	ldr	r1, [r7, #4]
 800a072:	0013      	movs	r3, r2
 800a074:	009b      	lsls	r3, r3, #2
 800a076:	189b      	adds	r3, r3, r2
 800a078:	00db      	lsls	r3, r3, #3
 800a07a:	18cb      	adds	r3, r1, r3
 800a07c:	3340      	adds	r3, #64	@ 0x40
 800a07e:	2200      	movs	r2, #0
 800a080:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a082:	183b      	adds	r3, r7, r0
 800a084:	781a      	ldrb	r2, [r3, #0]
 800a086:	183b      	adds	r3, r7, r0
 800a088:	3201      	adds	r2, #1
 800a08a:	701a      	strb	r2, [r3, #0]
 800a08c:	210f      	movs	r1, #15
 800a08e:	187b      	adds	r3, r7, r1
 800a090:	781a      	ldrb	r2, [r3, #0]
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	685b      	ldr	r3, [r3, #4]
 800a096:	429a      	cmp	r2, r3
 800a098:	d3ae      	bcc.n	8009ff8 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a09a:	187b      	adds	r3, r7, r1
 800a09c:	2200      	movs	r2, #0
 800a09e:	701a      	strb	r2, [r3, #0]
 800a0a0:	e056      	b.n	800a150 <HAL_PCD_Init+0x1a4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800a0a2:	240f      	movs	r4, #15
 800a0a4:	193b      	adds	r3, r7, r4
 800a0a6:	781a      	ldrb	r2, [r3, #0]
 800a0a8:	6878      	ldr	r0, [r7, #4]
 800a0aa:	236a      	movs	r3, #106	@ 0x6a
 800a0ac:	33ff      	adds	r3, #255	@ 0xff
 800a0ae:	0019      	movs	r1, r3
 800a0b0:	0013      	movs	r3, r2
 800a0b2:	009b      	lsls	r3, r3, #2
 800a0b4:	189b      	adds	r3, r3, r2
 800a0b6:	00db      	lsls	r3, r3, #3
 800a0b8:	18c3      	adds	r3, r0, r3
 800a0ba:	185b      	adds	r3, r3, r1
 800a0bc:	2200      	movs	r2, #0
 800a0be:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800a0c0:	193b      	adds	r3, r7, r4
 800a0c2:	781a      	ldrb	r2, [r3, #0]
 800a0c4:	6878      	ldr	r0, [r7, #4]
 800a0c6:	23b4      	movs	r3, #180	@ 0xb4
 800a0c8:	0059      	lsls	r1, r3, #1
 800a0ca:	0013      	movs	r3, r2
 800a0cc:	009b      	lsls	r3, r3, #2
 800a0ce:	189b      	adds	r3, r3, r2
 800a0d0:	00db      	lsls	r3, r3, #3
 800a0d2:	18c3      	adds	r3, r0, r3
 800a0d4:	185b      	adds	r3, r3, r1
 800a0d6:	193a      	adds	r2, r7, r4
 800a0d8:	7812      	ldrb	r2, [r2, #0]
 800a0da:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800a0dc:	193b      	adds	r3, r7, r4
 800a0de:	781a      	ldrb	r2, [r3, #0]
 800a0e0:	6878      	ldr	r0, [r7, #4]
 800a0e2:	236c      	movs	r3, #108	@ 0x6c
 800a0e4:	33ff      	adds	r3, #255	@ 0xff
 800a0e6:	0019      	movs	r1, r3
 800a0e8:	0013      	movs	r3, r2
 800a0ea:	009b      	lsls	r3, r3, #2
 800a0ec:	189b      	adds	r3, r3, r2
 800a0ee:	00db      	lsls	r3, r3, #3
 800a0f0:	18c3      	adds	r3, r0, r3
 800a0f2:	185b      	adds	r3, r3, r1
 800a0f4:	2200      	movs	r2, #0
 800a0f6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800a0f8:	193b      	adds	r3, r7, r4
 800a0fa:	781a      	ldrb	r2, [r3, #0]
 800a0fc:	6878      	ldr	r0, [r7, #4]
 800a0fe:	23bc      	movs	r3, #188	@ 0xbc
 800a100:	0059      	lsls	r1, r3, #1
 800a102:	0013      	movs	r3, r2
 800a104:	009b      	lsls	r3, r3, #2
 800a106:	189b      	adds	r3, r3, r2
 800a108:	00db      	lsls	r3, r3, #3
 800a10a:	18c3      	adds	r3, r0, r3
 800a10c:	185b      	adds	r3, r3, r1
 800a10e:	2200      	movs	r2, #0
 800a110:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800a112:	193b      	adds	r3, r7, r4
 800a114:	781a      	ldrb	r2, [r3, #0]
 800a116:	6878      	ldr	r0, [r7, #4]
 800a118:	23be      	movs	r3, #190	@ 0xbe
 800a11a:	0059      	lsls	r1, r3, #1
 800a11c:	0013      	movs	r3, r2
 800a11e:	009b      	lsls	r3, r3, #2
 800a120:	189b      	adds	r3, r3, r2
 800a122:	00db      	lsls	r3, r3, #3
 800a124:	18c3      	adds	r3, r0, r3
 800a126:	185b      	adds	r3, r3, r1
 800a128:	2200      	movs	r2, #0
 800a12a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800a12c:	193b      	adds	r3, r7, r4
 800a12e:	781a      	ldrb	r2, [r3, #0]
 800a130:	6878      	ldr	r0, [r7, #4]
 800a132:	23c0      	movs	r3, #192	@ 0xc0
 800a134:	0059      	lsls	r1, r3, #1
 800a136:	0013      	movs	r3, r2
 800a138:	009b      	lsls	r3, r3, #2
 800a13a:	189b      	adds	r3, r3, r2
 800a13c:	00db      	lsls	r3, r3, #3
 800a13e:	18c3      	adds	r3, r0, r3
 800a140:	185b      	adds	r3, r3, r1
 800a142:	2200      	movs	r2, #0
 800a144:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a146:	193b      	adds	r3, r7, r4
 800a148:	781a      	ldrb	r2, [r3, #0]
 800a14a:	193b      	adds	r3, r7, r4
 800a14c:	3201      	adds	r2, #1
 800a14e:	701a      	strb	r2, [r3, #0]
 800a150:	230f      	movs	r3, #15
 800a152:	18fb      	adds	r3, r7, r3
 800a154:	781a      	ldrb	r2, [r3, #0]
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	685b      	ldr	r3, [r3, #4]
 800a15a:	429a      	cmp	r2, r3
 800a15c:	d3a1      	bcc.n	800a0a2 <HAL_PCD_Init+0xf6>
=======
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	4a72      	ldr	r2, [pc, #456]	@ (800a46c <HAL_PCD_Init+0x1fc>)
 800a2a4:	2103      	movs	r1, #3
 800a2a6:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	0018      	movs	r0, r3
 800a2ae:	f002 fd69 	bl	800cd84 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a2b2:	230f      	movs	r3, #15
 800a2b4:	18fb      	adds	r3, r7, r3
 800a2b6:	2200      	movs	r2, #0
 800a2b8:	701a      	strb	r2, [r3, #0]
 800a2ba:	e049      	b.n	800a350 <HAL_PCD_Init+0xe0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800a2bc:	200f      	movs	r0, #15
 800a2be:	183b      	adds	r3, r7, r0
 800a2c0:	781b      	ldrb	r3, [r3, #0]
 800a2c2:	6879      	ldr	r1, [r7, #4]
 800a2c4:	1c5a      	adds	r2, r3, #1
 800a2c6:	0013      	movs	r3, r2
 800a2c8:	009b      	lsls	r3, r3, #2
 800a2ca:	189b      	adds	r3, r3, r2
 800a2cc:	00db      	lsls	r3, r3, #3
 800a2ce:	18cb      	adds	r3, r1, r3
 800a2d0:	3301      	adds	r3, #1
 800a2d2:	2201      	movs	r2, #1
 800a2d4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800a2d6:	183b      	adds	r3, r7, r0
 800a2d8:	781b      	ldrb	r3, [r3, #0]
 800a2da:	6879      	ldr	r1, [r7, #4]
 800a2dc:	1c5a      	adds	r2, r3, #1
 800a2de:	0013      	movs	r3, r2
 800a2e0:	009b      	lsls	r3, r3, #2
 800a2e2:	189b      	adds	r3, r3, r2
 800a2e4:	00db      	lsls	r3, r3, #3
 800a2e6:	183a      	adds	r2, r7, r0
 800a2e8:	7812      	ldrb	r2, [r2, #0]
 800a2ea:	545a      	strb	r2, [r3, r1]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800a2ec:	183b      	adds	r3, r7, r0
 800a2ee:	781b      	ldrb	r3, [r3, #0]
 800a2f0:	6879      	ldr	r1, [r7, #4]
 800a2f2:	1c5a      	adds	r2, r3, #1
 800a2f4:	0013      	movs	r3, r2
 800a2f6:	009b      	lsls	r3, r3, #2
 800a2f8:	189b      	adds	r3, r3, r2
 800a2fa:	00db      	lsls	r3, r3, #3
 800a2fc:	18cb      	adds	r3, r1, r3
 800a2fe:	3303      	adds	r3, #3
 800a300:	2200      	movs	r2, #0
 800a302:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800a304:	183b      	adds	r3, r7, r0
 800a306:	781a      	ldrb	r2, [r3, #0]
 800a308:	6879      	ldr	r1, [r7, #4]
 800a30a:	0013      	movs	r3, r2
 800a30c:	009b      	lsls	r3, r3, #2
 800a30e:	189b      	adds	r3, r3, r2
 800a310:	00db      	lsls	r3, r3, #3
 800a312:	18cb      	adds	r3, r1, r3
 800a314:	3338      	adds	r3, #56	@ 0x38
 800a316:	2200      	movs	r2, #0
 800a318:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800a31a:	183b      	adds	r3, r7, r0
 800a31c:	781a      	ldrb	r2, [r3, #0]
 800a31e:	6879      	ldr	r1, [r7, #4]
 800a320:	0013      	movs	r3, r2
 800a322:	009b      	lsls	r3, r3, #2
 800a324:	189b      	adds	r3, r3, r2
 800a326:	00db      	lsls	r3, r3, #3
 800a328:	18cb      	adds	r3, r1, r3
 800a32a:	333c      	adds	r3, #60	@ 0x3c
 800a32c:	2200      	movs	r2, #0
 800a32e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800a330:	183b      	adds	r3, r7, r0
 800a332:	781a      	ldrb	r2, [r3, #0]
 800a334:	6879      	ldr	r1, [r7, #4]
 800a336:	0013      	movs	r3, r2
 800a338:	009b      	lsls	r3, r3, #2
 800a33a:	189b      	adds	r3, r3, r2
 800a33c:	00db      	lsls	r3, r3, #3
 800a33e:	18cb      	adds	r3, r1, r3
 800a340:	3340      	adds	r3, #64	@ 0x40
 800a342:	2200      	movs	r2, #0
 800a344:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a346:	183b      	adds	r3, r7, r0
 800a348:	781a      	ldrb	r2, [r3, #0]
 800a34a:	183b      	adds	r3, r7, r0
 800a34c:	3201      	adds	r2, #1
 800a34e:	701a      	strb	r2, [r3, #0]
 800a350:	210f      	movs	r1, #15
 800a352:	187b      	adds	r3, r7, r1
 800a354:	781a      	ldrb	r2, [r3, #0]
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	685b      	ldr	r3, [r3, #4]
 800a35a:	429a      	cmp	r2, r3
 800a35c:	d3ae      	bcc.n	800a2bc <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a35e:	187b      	adds	r3, r7, r1
 800a360:	2200      	movs	r2, #0
 800a362:	701a      	strb	r2, [r3, #0]
 800a364:	e056      	b.n	800a414 <HAL_PCD_Init+0x1a4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800a366:	240f      	movs	r4, #15
 800a368:	193b      	adds	r3, r7, r4
 800a36a:	781a      	ldrb	r2, [r3, #0]
 800a36c:	6878      	ldr	r0, [r7, #4]
 800a36e:	236a      	movs	r3, #106	@ 0x6a
 800a370:	33ff      	adds	r3, #255	@ 0xff
 800a372:	0019      	movs	r1, r3
 800a374:	0013      	movs	r3, r2
 800a376:	009b      	lsls	r3, r3, #2
 800a378:	189b      	adds	r3, r3, r2
 800a37a:	00db      	lsls	r3, r3, #3
 800a37c:	18c3      	adds	r3, r0, r3
 800a37e:	185b      	adds	r3, r3, r1
 800a380:	2200      	movs	r2, #0
 800a382:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800a384:	193b      	adds	r3, r7, r4
 800a386:	781a      	ldrb	r2, [r3, #0]
 800a388:	6878      	ldr	r0, [r7, #4]
 800a38a:	23b4      	movs	r3, #180	@ 0xb4
 800a38c:	0059      	lsls	r1, r3, #1
 800a38e:	0013      	movs	r3, r2
 800a390:	009b      	lsls	r3, r3, #2
 800a392:	189b      	adds	r3, r3, r2
 800a394:	00db      	lsls	r3, r3, #3
 800a396:	18c3      	adds	r3, r0, r3
 800a398:	185b      	adds	r3, r3, r1
 800a39a:	193a      	adds	r2, r7, r4
 800a39c:	7812      	ldrb	r2, [r2, #0]
 800a39e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800a3a0:	193b      	adds	r3, r7, r4
 800a3a2:	781a      	ldrb	r2, [r3, #0]
 800a3a4:	6878      	ldr	r0, [r7, #4]
 800a3a6:	236c      	movs	r3, #108	@ 0x6c
 800a3a8:	33ff      	adds	r3, #255	@ 0xff
 800a3aa:	0019      	movs	r1, r3
 800a3ac:	0013      	movs	r3, r2
 800a3ae:	009b      	lsls	r3, r3, #2
 800a3b0:	189b      	adds	r3, r3, r2
 800a3b2:	00db      	lsls	r3, r3, #3
 800a3b4:	18c3      	adds	r3, r0, r3
 800a3b6:	185b      	adds	r3, r3, r1
 800a3b8:	2200      	movs	r2, #0
 800a3ba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800a3bc:	193b      	adds	r3, r7, r4
 800a3be:	781a      	ldrb	r2, [r3, #0]
 800a3c0:	6878      	ldr	r0, [r7, #4]
 800a3c2:	23bc      	movs	r3, #188	@ 0xbc
 800a3c4:	0059      	lsls	r1, r3, #1
 800a3c6:	0013      	movs	r3, r2
 800a3c8:	009b      	lsls	r3, r3, #2
 800a3ca:	189b      	adds	r3, r3, r2
 800a3cc:	00db      	lsls	r3, r3, #3
 800a3ce:	18c3      	adds	r3, r0, r3
 800a3d0:	185b      	adds	r3, r3, r1
 800a3d2:	2200      	movs	r2, #0
 800a3d4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800a3d6:	193b      	adds	r3, r7, r4
 800a3d8:	781a      	ldrb	r2, [r3, #0]
 800a3da:	6878      	ldr	r0, [r7, #4]
 800a3dc:	23be      	movs	r3, #190	@ 0xbe
 800a3de:	0059      	lsls	r1, r3, #1
 800a3e0:	0013      	movs	r3, r2
 800a3e2:	009b      	lsls	r3, r3, #2
 800a3e4:	189b      	adds	r3, r3, r2
 800a3e6:	00db      	lsls	r3, r3, #3
 800a3e8:	18c3      	adds	r3, r0, r3
 800a3ea:	185b      	adds	r3, r3, r1
 800a3ec:	2200      	movs	r2, #0
 800a3ee:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800a3f0:	193b      	adds	r3, r7, r4
 800a3f2:	781a      	ldrb	r2, [r3, #0]
 800a3f4:	6878      	ldr	r0, [r7, #4]
 800a3f6:	23c0      	movs	r3, #192	@ 0xc0
 800a3f8:	0059      	lsls	r1, r3, #1
 800a3fa:	0013      	movs	r3, r2
 800a3fc:	009b      	lsls	r3, r3, #2
 800a3fe:	189b      	adds	r3, r3, r2
 800a400:	00db      	lsls	r3, r3, #3
 800a402:	18c3      	adds	r3, r0, r3
 800a404:	185b      	adds	r3, r3, r1
 800a406:	2200      	movs	r2, #0
 800a408:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a40a:	193b      	adds	r3, r7, r4
 800a40c:	781a      	ldrb	r2, [r3, #0]
 800a40e:	193b      	adds	r3, r7, r4
 800a410:	3201      	adds	r2, #1
 800a412:	701a      	strb	r2, [r3, #0]
 800a414:	230f      	movs	r3, #15
 800a416:	18fb      	adds	r3, r7, r3
 800a418:	781a      	ldrb	r2, [r3, #0]
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	685b      	ldr	r3, [r3, #4]
 800a41e:	429a      	cmp	r2, r3
 800a420:	d3a1      	bcc.n	800a366 <HAL_PCD_Init+0xf6>
>>>>>>> main
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
<<<<<<< HEAD
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	6818      	ldr	r0, [r3, #0]
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	466a      	mov	r2, sp
 800a166:	0011      	movs	r1, r2
 800a168:	001a      	movs	r2, r3
 800a16a:	3210      	adds	r2, #16
 800a16c:	ca70      	ldmia	r2!, {r4, r5, r6}
 800a16e:	c170      	stmia	r1!, {r4, r5, r6}
 800a170:	ca30      	ldmia	r2!, {r4, r5}
 800a172:	c130      	stmia	r1!, {r4, r5}
 800a174:	6859      	ldr	r1, [r3, #4]
 800a176:	689a      	ldr	r2, [r3, #8]
 800a178:	68db      	ldr	r3, [r3, #12]
 800a17a:	f002 fcd1 	bl	800cb20 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	2224      	movs	r2, #36	@ 0x24
 800a182:	2100      	movs	r1, #0
 800a184:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	4a07      	ldr	r2, [pc, #28]	@ (800a1a8 <HAL_PCD_Init+0x1fc>)
 800a18a:	2101      	movs	r1, #1
 800a18c:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	69db      	ldr	r3, [r3, #28]
 800a192:	2b01      	cmp	r3, #1
 800a194:	d103      	bne.n	800a19e <HAL_PCD_Init+0x1f2>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	0018      	movs	r0, r3
 800a19a:	f000 f807 	bl	800a1ac <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800a19e:	2300      	movs	r3, #0
}
 800a1a0:	0018      	movs	r0, r3
 800a1a2:	46bd      	mov	sp, r7
 800a1a4:	b005      	add	sp, #20
 800a1a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a1a8:	000002a9 	.word	0x000002a9

0800a1ac <HAL_PCDEx_ActivateLPM>:
=======
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	6818      	ldr	r0, [r3, #0]
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	466a      	mov	r2, sp
 800a42a:	0011      	movs	r1, r2
 800a42c:	001a      	movs	r2, r3
 800a42e:	3210      	adds	r2, #16
 800a430:	ca70      	ldmia	r2!, {r4, r5, r6}
 800a432:	c170      	stmia	r1!, {r4, r5, r6}
 800a434:	ca30      	ldmia	r2!, {r4, r5}
 800a436:	c130      	stmia	r1!, {r4, r5}
 800a438:	6859      	ldr	r1, [r3, #4]
 800a43a:	689a      	ldr	r2, [r3, #8]
 800a43c:	68db      	ldr	r3, [r3, #12]
 800a43e:	f002 fcbb 	bl	800cdb8 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	2224      	movs	r2, #36	@ 0x24
 800a446:	2100      	movs	r1, #0
 800a448:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	4a07      	ldr	r2, [pc, #28]	@ (800a46c <HAL_PCD_Init+0x1fc>)
 800a44e:	2101      	movs	r1, #1
 800a450:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	69db      	ldr	r3, [r3, #28]
 800a456:	2b01      	cmp	r3, #1
 800a458:	d103      	bne.n	800a462 <HAL_PCD_Init+0x1f2>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	0018      	movs	r0, r3
 800a45e:	f000 f807 	bl	800a470 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800a462:	2300      	movs	r3, #0
}
 800a464:	0018      	movs	r0, r3
 800a466:	46bd      	mov	sp, r7
 800a468:	b005      	add	sp, #20
 800a46a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a46c:	000002a9 	.word	0x000002a9

0800a470 <HAL_PCDEx_ActivateLPM>:
>>>>>>> main
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
<<<<<<< HEAD
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	b084      	sub	sp, #16
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800a1ba:	687a      	ldr	r2, [r7, #4]
 800a1bc:	23ba      	movs	r3, #186	@ 0xba
 800a1be:	009b      	lsls	r3, r3, #2
 800a1c0:	2101      	movs	r1, #1
 800a1c2:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 800a1c4:	687a      	ldr	r2, [r7, #4]
 800a1c6:	23b8      	movs	r3, #184	@ 0xb8
 800a1c8:	009b      	lsls	r3, r3, #2
 800a1ca:	2100      	movs	r1, #0
 800a1cc:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	2254      	movs	r2, #84	@ 0x54
 800a1d2:	5a9b      	ldrh	r3, [r3, r2]
 800a1d4:	b29b      	uxth	r3, r3
 800a1d6:	2201      	movs	r2, #1
 800a1d8:	4313      	orrs	r3, r2
 800a1da:	b299      	uxth	r1, r3
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	2254      	movs	r2, #84	@ 0x54
 800a1e0:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	2254      	movs	r2, #84	@ 0x54
 800a1e6:	5a9b      	ldrh	r3, [r3, r2]
 800a1e8:	b29b      	uxth	r3, r3
 800a1ea:	2202      	movs	r2, #2
 800a1ec:	4313      	orrs	r3, r2
 800a1ee:	b299      	uxth	r1, r3
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	2254      	movs	r2, #84	@ 0x54
 800a1f4:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800a1f6:	2300      	movs	r3, #0
}
 800a1f8:	0018      	movs	r0, r3
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	b004      	add	sp, #16
 800a1fe:	bd80      	pop	{r7, pc}

0800a200 <HAL_RCC_OscConfig>:
=======
 800a470:	b580      	push	{r7, lr}
 800a472:	b084      	sub	sp, #16
 800a474:	af00      	add	r7, sp, #0
 800a476:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800a47e:	687a      	ldr	r2, [r7, #4]
 800a480:	23ba      	movs	r3, #186	@ 0xba
 800a482:	009b      	lsls	r3, r3, #2
 800a484:	2101      	movs	r1, #1
 800a486:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 800a488:	687a      	ldr	r2, [r7, #4]
 800a48a:	23b8      	movs	r3, #184	@ 0xb8
 800a48c:	009b      	lsls	r3, r3, #2
 800a48e:	2100      	movs	r1, #0
 800a490:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	2254      	movs	r2, #84	@ 0x54
 800a496:	5a9b      	ldrh	r3, [r3, r2]
 800a498:	b29b      	uxth	r3, r3
 800a49a:	2201      	movs	r2, #1
 800a49c:	4313      	orrs	r3, r2
 800a49e:	b299      	uxth	r1, r3
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	2254      	movs	r2, #84	@ 0x54
 800a4a4:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	2254      	movs	r2, #84	@ 0x54
 800a4aa:	5a9b      	ldrh	r3, [r3, r2]
 800a4ac:	b29b      	uxth	r3, r3
 800a4ae:	2202      	movs	r2, #2
 800a4b0:	4313      	orrs	r3, r2
 800a4b2:	b299      	uxth	r1, r3
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	2254      	movs	r2, #84	@ 0x54
 800a4b8:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800a4ba:	2300      	movs	r3, #0
}
 800a4bc:	0018      	movs	r0, r3
 800a4be:	46bd      	mov	sp, r7
 800a4c0:	b004      	add	sp, #16
 800a4c2:	bd80      	pop	{r7, pc}

0800a4c4 <HAL_RCC_OscConfig>:
>>>>>>> main
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
<<<<<<< HEAD
 800a200:	b5b0      	push	{r4, r5, r7, lr}
 800a202:	b08a      	sub	sp, #40	@ 0x28
 800a204:	af00      	add	r7, sp, #0
 800a206:	6078      	str	r0, [r7, #4]
=======
 800a4c4:	b5b0      	push	{r4, r5, r7, lr}
 800a4c6:	b08a      	sub	sp, #40	@ 0x28
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	6078      	str	r0, [r7, #4]
>>>>>>> main
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
<<<<<<< HEAD
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d102      	bne.n	800a214 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800a20e:	2301      	movs	r3, #1
 800a210:	f000 fbbf 	bl	800a992 <HAL_RCC_OscConfig+0x792>
=======
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d102      	bne.n	800a4d8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800a4d2:	2301      	movs	r3, #1
 800a4d4:	f000 fbbf 	bl	800ac56 <HAL_RCC_OscConfig+0x792>
>>>>>>> main
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
<<<<<<< HEAD
 800a214:	4bc9      	ldr	r3, [pc, #804]	@ (800a53c <HAL_RCC_OscConfig+0x33c>)
 800a216:	68db      	ldr	r3, [r3, #12]
 800a218:	220c      	movs	r2, #12
 800a21a:	4013      	ands	r3, r2
 800a21c:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a21e:	4bc7      	ldr	r3, [pc, #796]	@ (800a53c <HAL_RCC_OscConfig+0x33c>)
 800a220:	68da      	ldr	r2, [r3, #12]
 800a222:	2380      	movs	r3, #128	@ 0x80
 800a224:	025b      	lsls	r3, r3, #9
 800a226:	4013      	ands	r3, r2
 800a228:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	2201      	movs	r2, #1
 800a230:	4013      	ands	r3, r2
 800a232:	d100      	bne.n	800a236 <HAL_RCC_OscConfig+0x36>
 800a234:	e07e      	b.n	800a334 <HAL_RCC_OscConfig+0x134>
=======
 800a4d8:	4bc9      	ldr	r3, [pc, #804]	@ (800a800 <HAL_RCC_OscConfig+0x33c>)
 800a4da:	68db      	ldr	r3, [r3, #12]
 800a4dc:	220c      	movs	r2, #12
 800a4de:	4013      	ands	r3, r2
 800a4e0:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a4e2:	4bc7      	ldr	r3, [pc, #796]	@ (800a800 <HAL_RCC_OscConfig+0x33c>)
 800a4e4:	68da      	ldr	r2, [r3, #12]
 800a4e6:	2380      	movs	r3, #128	@ 0x80
 800a4e8:	025b      	lsls	r3, r3, #9
 800a4ea:	4013      	ands	r3, r2
 800a4ec:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	2201      	movs	r2, #1
 800a4f4:	4013      	ands	r3, r2
 800a4f6:	d100      	bne.n	800a4fa <HAL_RCC_OscConfig+0x36>
 800a4f8:	e07e      	b.n	800a5f8 <HAL_RCC_OscConfig+0x134>
>>>>>>> main
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
<<<<<<< HEAD
 800a236:	69fb      	ldr	r3, [r7, #28]
 800a238:	2b08      	cmp	r3, #8
 800a23a:	d007      	beq.n	800a24c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800a23c:	69fb      	ldr	r3, [r7, #28]
 800a23e:	2b0c      	cmp	r3, #12
 800a240:	d112      	bne.n	800a268 <HAL_RCC_OscConfig+0x68>
 800a242:	69ba      	ldr	r2, [r7, #24]
 800a244:	2380      	movs	r3, #128	@ 0x80
 800a246:	025b      	lsls	r3, r3, #9
 800a248:	429a      	cmp	r2, r3
 800a24a:	d10d      	bne.n	800a268 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a24c:	4bbb      	ldr	r3, [pc, #748]	@ (800a53c <HAL_RCC_OscConfig+0x33c>)
 800a24e:	681a      	ldr	r2, [r3, #0]
 800a250:	2380      	movs	r3, #128	@ 0x80
 800a252:	029b      	lsls	r3, r3, #10
 800a254:	4013      	ands	r3, r2
 800a256:	d100      	bne.n	800a25a <HAL_RCC_OscConfig+0x5a>
 800a258:	e06b      	b.n	800a332 <HAL_RCC_OscConfig+0x132>
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	685b      	ldr	r3, [r3, #4]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d167      	bne.n	800a332 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800a262:	2301      	movs	r3, #1
 800a264:	f000 fb95 	bl	800a992 <HAL_RCC_OscConfig+0x792>
=======
 800a4fa:	69fb      	ldr	r3, [r7, #28]
 800a4fc:	2b08      	cmp	r3, #8
 800a4fe:	d007      	beq.n	800a510 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800a500:	69fb      	ldr	r3, [r7, #28]
 800a502:	2b0c      	cmp	r3, #12
 800a504:	d112      	bne.n	800a52c <HAL_RCC_OscConfig+0x68>
 800a506:	69ba      	ldr	r2, [r7, #24]
 800a508:	2380      	movs	r3, #128	@ 0x80
 800a50a:	025b      	lsls	r3, r3, #9
 800a50c:	429a      	cmp	r2, r3
 800a50e:	d10d      	bne.n	800a52c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a510:	4bbb      	ldr	r3, [pc, #748]	@ (800a800 <HAL_RCC_OscConfig+0x33c>)
 800a512:	681a      	ldr	r2, [r3, #0]
 800a514:	2380      	movs	r3, #128	@ 0x80
 800a516:	029b      	lsls	r3, r3, #10
 800a518:	4013      	ands	r3, r2
 800a51a:	d100      	bne.n	800a51e <HAL_RCC_OscConfig+0x5a>
 800a51c:	e06b      	b.n	800a5f6 <HAL_RCC_OscConfig+0x132>
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	685b      	ldr	r3, [r3, #4]
 800a522:	2b00      	cmp	r3, #0
 800a524:	d167      	bne.n	800a5f6 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800a526:	2301      	movs	r3, #1
 800a528:	f000 fb95 	bl	800ac56 <HAL_RCC_OscConfig+0x792>
>>>>>>> main
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
<<<<<<< HEAD
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	685a      	ldr	r2, [r3, #4]
 800a26c:	2380      	movs	r3, #128	@ 0x80
 800a26e:	025b      	lsls	r3, r3, #9
 800a270:	429a      	cmp	r2, r3
 800a272:	d107      	bne.n	800a284 <HAL_RCC_OscConfig+0x84>
 800a274:	4bb1      	ldr	r3, [pc, #708]	@ (800a53c <HAL_RCC_OscConfig+0x33c>)
 800a276:	681a      	ldr	r2, [r3, #0]
 800a278:	4bb0      	ldr	r3, [pc, #704]	@ (800a53c <HAL_RCC_OscConfig+0x33c>)
 800a27a:	2180      	movs	r1, #128	@ 0x80
 800a27c:	0249      	lsls	r1, r1, #9
 800a27e:	430a      	orrs	r2, r1
 800a280:	601a      	str	r2, [r3, #0]
 800a282:	e027      	b.n	800a2d4 <HAL_RCC_OscConfig+0xd4>
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	685a      	ldr	r2, [r3, #4]
 800a288:	23a0      	movs	r3, #160	@ 0xa0
 800a28a:	02db      	lsls	r3, r3, #11
 800a28c:	429a      	cmp	r2, r3
 800a28e:	d10e      	bne.n	800a2ae <HAL_RCC_OscConfig+0xae>
 800a290:	4baa      	ldr	r3, [pc, #680]	@ (800a53c <HAL_RCC_OscConfig+0x33c>)
 800a292:	681a      	ldr	r2, [r3, #0]
 800a294:	4ba9      	ldr	r3, [pc, #676]	@ (800a53c <HAL_RCC_OscConfig+0x33c>)
 800a296:	2180      	movs	r1, #128	@ 0x80
 800a298:	02c9      	lsls	r1, r1, #11
 800a29a:	430a      	orrs	r2, r1
 800a29c:	601a      	str	r2, [r3, #0]
 800a29e:	4ba7      	ldr	r3, [pc, #668]	@ (800a53c <HAL_RCC_OscConfig+0x33c>)
 800a2a0:	681a      	ldr	r2, [r3, #0]
 800a2a2:	4ba6      	ldr	r3, [pc, #664]	@ (800a53c <HAL_RCC_OscConfig+0x33c>)
 800a2a4:	2180      	movs	r1, #128	@ 0x80
 800a2a6:	0249      	lsls	r1, r1, #9
 800a2a8:	430a      	orrs	r2, r1
 800a2aa:	601a      	str	r2, [r3, #0]
 800a2ac:	e012      	b.n	800a2d4 <HAL_RCC_OscConfig+0xd4>
 800a2ae:	4ba3      	ldr	r3, [pc, #652]	@ (800a53c <HAL_RCC_OscConfig+0x33c>)
 800a2b0:	681a      	ldr	r2, [r3, #0]
 800a2b2:	4ba2      	ldr	r3, [pc, #648]	@ (800a53c <HAL_RCC_OscConfig+0x33c>)
 800a2b4:	49a2      	ldr	r1, [pc, #648]	@ (800a540 <HAL_RCC_OscConfig+0x340>)
 800a2b6:	400a      	ands	r2, r1
 800a2b8:	601a      	str	r2, [r3, #0]
 800a2ba:	4ba0      	ldr	r3, [pc, #640]	@ (800a53c <HAL_RCC_OscConfig+0x33c>)
 800a2bc:	681a      	ldr	r2, [r3, #0]
 800a2be:	2380      	movs	r3, #128	@ 0x80
 800a2c0:	025b      	lsls	r3, r3, #9
 800a2c2:	4013      	ands	r3, r2
 800a2c4:	60fb      	str	r3, [r7, #12]
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	4b9c      	ldr	r3, [pc, #624]	@ (800a53c <HAL_RCC_OscConfig+0x33c>)
 800a2ca:	681a      	ldr	r2, [r3, #0]
 800a2cc:	4b9b      	ldr	r3, [pc, #620]	@ (800a53c <HAL_RCC_OscConfig+0x33c>)
 800a2ce:	499d      	ldr	r1, [pc, #628]	@ (800a544 <HAL_RCC_OscConfig+0x344>)
 800a2d0:	400a      	ands	r2, r1
 800a2d2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	685b      	ldr	r3, [r3, #4]
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d015      	beq.n	800a308 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a2dc:	f7fc fcd2 	bl	8006c84 <HAL_GetTick>
 800a2e0:	0003      	movs	r3, r0
 800a2e2:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a2e4:	e009      	b.n	800a2fa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a2e6:	f7fc fccd 	bl	8006c84 <HAL_GetTick>
 800a2ea:	0002      	movs	r2, r0
 800a2ec:	697b      	ldr	r3, [r7, #20]
 800a2ee:	1ad3      	subs	r3, r2, r3
 800a2f0:	2b64      	cmp	r3, #100	@ 0x64
 800a2f2:	d902      	bls.n	800a2fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a2f4:	2303      	movs	r3, #3
 800a2f6:	f000 fb4c 	bl	800a992 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a2fa:	4b90      	ldr	r3, [pc, #576]	@ (800a53c <HAL_RCC_OscConfig+0x33c>)
 800a2fc:	681a      	ldr	r2, [r3, #0]
 800a2fe:	2380      	movs	r3, #128	@ 0x80
 800a300:	029b      	lsls	r3, r3, #10
 800a302:	4013      	ands	r3, r2
 800a304:	d0ef      	beq.n	800a2e6 <HAL_RCC_OscConfig+0xe6>
 800a306:	e015      	b.n	800a334 <HAL_RCC_OscConfig+0x134>
=======
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	685a      	ldr	r2, [r3, #4]
 800a530:	2380      	movs	r3, #128	@ 0x80
 800a532:	025b      	lsls	r3, r3, #9
 800a534:	429a      	cmp	r2, r3
 800a536:	d107      	bne.n	800a548 <HAL_RCC_OscConfig+0x84>
 800a538:	4bb1      	ldr	r3, [pc, #708]	@ (800a800 <HAL_RCC_OscConfig+0x33c>)
 800a53a:	681a      	ldr	r2, [r3, #0]
 800a53c:	4bb0      	ldr	r3, [pc, #704]	@ (800a800 <HAL_RCC_OscConfig+0x33c>)
 800a53e:	2180      	movs	r1, #128	@ 0x80
 800a540:	0249      	lsls	r1, r1, #9
 800a542:	430a      	orrs	r2, r1
 800a544:	601a      	str	r2, [r3, #0]
 800a546:	e027      	b.n	800a598 <HAL_RCC_OscConfig+0xd4>
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	685a      	ldr	r2, [r3, #4]
 800a54c:	23a0      	movs	r3, #160	@ 0xa0
 800a54e:	02db      	lsls	r3, r3, #11
 800a550:	429a      	cmp	r2, r3
 800a552:	d10e      	bne.n	800a572 <HAL_RCC_OscConfig+0xae>
 800a554:	4baa      	ldr	r3, [pc, #680]	@ (800a800 <HAL_RCC_OscConfig+0x33c>)
 800a556:	681a      	ldr	r2, [r3, #0]
 800a558:	4ba9      	ldr	r3, [pc, #676]	@ (800a800 <HAL_RCC_OscConfig+0x33c>)
 800a55a:	2180      	movs	r1, #128	@ 0x80
 800a55c:	02c9      	lsls	r1, r1, #11
 800a55e:	430a      	orrs	r2, r1
 800a560:	601a      	str	r2, [r3, #0]
 800a562:	4ba7      	ldr	r3, [pc, #668]	@ (800a800 <HAL_RCC_OscConfig+0x33c>)
 800a564:	681a      	ldr	r2, [r3, #0]
 800a566:	4ba6      	ldr	r3, [pc, #664]	@ (800a800 <HAL_RCC_OscConfig+0x33c>)
 800a568:	2180      	movs	r1, #128	@ 0x80
 800a56a:	0249      	lsls	r1, r1, #9
 800a56c:	430a      	orrs	r2, r1
 800a56e:	601a      	str	r2, [r3, #0]
 800a570:	e012      	b.n	800a598 <HAL_RCC_OscConfig+0xd4>
 800a572:	4ba3      	ldr	r3, [pc, #652]	@ (800a800 <HAL_RCC_OscConfig+0x33c>)
 800a574:	681a      	ldr	r2, [r3, #0]
 800a576:	4ba2      	ldr	r3, [pc, #648]	@ (800a800 <HAL_RCC_OscConfig+0x33c>)
 800a578:	49a2      	ldr	r1, [pc, #648]	@ (800a804 <HAL_RCC_OscConfig+0x340>)
 800a57a:	400a      	ands	r2, r1
 800a57c:	601a      	str	r2, [r3, #0]
 800a57e:	4ba0      	ldr	r3, [pc, #640]	@ (800a800 <HAL_RCC_OscConfig+0x33c>)
 800a580:	681a      	ldr	r2, [r3, #0]
 800a582:	2380      	movs	r3, #128	@ 0x80
 800a584:	025b      	lsls	r3, r3, #9
 800a586:	4013      	ands	r3, r2
 800a588:	60fb      	str	r3, [r7, #12]
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	4b9c      	ldr	r3, [pc, #624]	@ (800a800 <HAL_RCC_OscConfig+0x33c>)
 800a58e:	681a      	ldr	r2, [r3, #0]
 800a590:	4b9b      	ldr	r3, [pc, #620]	@ (800a800 <HAL_RCC_OscConfig+0x33c>)
 800a592:	499d      	ldr	r1, [pc, #628]	@ (800a808 <HAL_RCC_OscConfig+0x344>)
 800a594:	400a      	ands	r2, r1
 800a596:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	685b      	ldr	r3, [r3, #4]
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d015      	beq.n	800a5cc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a5a0:	f7fc fcd2 	bl	8006f48 <HAL_GetTick>
 800a5a4:	0003      	movs	r3, r0
 800a5a6:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a5a8:	e009      	b.n	800a5be <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a5aa:	f7fc fccd 	bl	8006f48 <HAL_GetTick>
 800a5ae:	0002      	movs	r2, r0
 800a5b0:	697b      	ldr	r3, [r7, #20]
 800a5b2:	1ad3      	subs	r3, r2, r3
 800a5b4:	2b64      	cmp	r3, #100	@ 0x64
 800a5b6:	d902      	bls.n	800a5be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a5b8:	2303      	movs	r3, #3
 800a5ba:	f000 fb4c 	bl	800ac56 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a5be:	4b90      	ldr	r3, [pc, #576]	@ (800a800 <HAL_RCC_OscConfig+0x33c>)
 800a5c0:	681a      	ldr	r2, [r3, #0]
 800a5c2:	2380      	movs	r3, #128	@ 0x80
 800a5c4:	029b      	lsls	r3, r3, #10
 800a5c6:	4013      	ands	r3, r2
 800a5c8:	d0ef      	beq.n	800a5aa <HAL_RCC_OscConfig+0xe6>
 800a5ca:	e015      	b.n	800a5f8 <HAL_RCC_OscConfig+0x134>
>>>>>>> main
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
<<<<<<< HEAD
 800a308:	f7fc fcbc 	bl	8006c84 <HAL_GetTick>
 800a30c:	0003      	movs	r3, r0
 800a30e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a310:	e008      	b.n	800a324 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a312:	f7fc fcb7 	bl	8006c84 <HAL_GetTick>
 800a316:	0002      	movs	r2, r0
 800a318:	697b      	ldr	r3, [r7, #20]
 800a31a:	1ad3      	subs	r3, r2, r3
 800a31c:	2b64      	cmp	r3, #100	@ 0x64
 800a31e:	d901      	bls.n	800a324 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 800a320:	2303      	movs	r3, #3
 800a322:	e336      	b.n	800a992 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a324:	4b85      	ldr	r3, [pc, #532]	@ (800a53c <HAL_RCC_OscConfig+0x33c>)
 800a326:	681a      	ldr	r2, [r3, #0]
 800a328:	2380      	movs	r3, #128	@ 0x80
 800a32a:	029b      	lsls	r3, r3, #10
 800a32c:	4013      	ands	r3, r2
 800a32e:	d1f0      	bne.n	800a312 <HAL_RCC_OscConfig+0x112>
 800a330:	e000      	b.n	800a334 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a332:	46c0      	nop			@ (mov r8, r8)
=======
 800a5cc:	f7fc fcbc 	bl	8006f48 <HAL_GetTick>
 800a5d0:	0003      	movs	r3, r0
 800a5d2:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a5d4:	e008      	b.n	800a5e8 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a5d6:	f7fc fcb7 	bl	8006f48 <HAL_GetTick>
 800a5da:	0002      	movs	r2, r0
 800a5dc:	697b      	ldr	r3, [r7, #20]
 800a5de:	1ad3      	subs	r3, r2, r3
 800a5e0:	2b64      	cmp	r3, #100	@ 0x64
 800a5e2:	d901      	bls.n	800a5e8 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 800a5e4:	2303      	movs	r3, #3
 800a5e6:	e336      	b.n	800ac56 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a5e8:	4b85      	ldr	r3, [pc, #532]	@ (800a800 <HAL_RCC_OscConfig+0x33c>)
 800a5ea:	681a      	ldr	r2, [r3, #0]
 800a5ec:	2380      	movs	r3, #128	@ 0x80
 800a5ee:	029b      	lsls	r3, r3, #10
 800a5f0:	4013      	ands	r3, r2
 800a5f2:	d1f0      	bne.n	800a5d6 <HAL_RCC_OscConfig+0x112>
 800a5f4:	e000      	b.n	800a5f8 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a5f6:	46c0      	nop			@ (mov r8, r8)
>>>>>>> main
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
<<<<<<< HEAD
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	2202      	movs	r2, #2
 800a33a:	4013      	ands	r3, r2
 800a33c:	d100      	bne.n	800a340 <HAL_RCC_OscConfig+0x140>
 800a33e:	e099      	b.n	800a474 <HAL_RCC_OscConfig+0x274>
=======
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	2202      	movs	r2, #2
 800a5fe:	4013      	ands	r3, r2
 800a600:	d100      	bne.n	800a604 <HAL_RCC_OscConfig+0x140>
 800a602:	e099      	b.n	800a738 <HAL_RCC_OscConfig+0x274>
>>>>>>> main
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
<<<<<<< HEAD
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	68db      	ldr	r3, [r3, #12]
 800a344:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 800a346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a348:	2220      	movs	r2, #32
 800a34a:	4013      	ands	r3, r2
 800a34c:	d009      	beq.n	800a362 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 800a34e:	4b7b      	ldr	r3, [pc, #492]	@ (800a53c <HAL_RCC_OscConfig+0x33c>)
 800a350:	681a      	ldr	r2, [r3, #0]
 800a352:	4b7a      	ldr	r3, [pc, #488]	@ (800a53c <HAL_RCC_OscConfig+0x33c>)
 800a354:	2120      	movs	r1, #32
 800a356:	430a      	orrs	r2, r1
 800a358:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 800a35a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a35c:	2220      	movs	r2, #32
 800a35e:	4393      	bics	r3, r2
 800a360:	627b      	str	r3, [r7, #36]	@ 0x24
=======
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	68db      	ldr	r3, [r3, #12]
 800a608:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 800a60a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a60c:	2220      	movs	r2, #32
 800a60e:	4013      	ands	r3, r2
 800a610:	d009      	beq.n	800a626 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 800a612:	4b7b      	ldr	r3, [pc, #492]	@ (800a800 <HAL_RCC_OscConfig+0x33c>)
 800a614:	681a      	ldr	r2, [r3, #0]
 800a616:	4b7a      	ldr	r3, [pc, #488]	@ (800a800 <HAL_RCC_OscConfig+0x33c>)
 800a618:	2120      	movs	r1, #32
 800a61a:	430a      	orrs	r2, r1
 800a61c:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 800a61e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a620:	2220      	movs	r2, #32
 800a622:	4393      	bics	r3, r2
 800a624:	627b      	str	r3, [r7, #36]	@ 0x24
>>>>>>> main
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
<<<<<<< HEAD
 800a362:	69fb      	ldr	r3, [r7, #28]
 800a364:	2b04      	cmp	r3, #4
 800a366:	d005      	beq.n	800a374 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800a368:	69fb      	ldr	r3, [r7, #28]
 800a36a:	2b0c      	cmp	r3, #12
 800a36c:	d13e      	bne.n	800a3ec <HAL_RCC_OscConfig+0x1ec>
 800a36e:	69bb      	ldr	r3, [r7, #24]
 800a370:	2b00      	cmp	r3, #0
 800a372:	d13b      	bne.n	800a3ec <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800a374:	4b71      	ldr	r3, [pc, #452]	@ (800a53c <HAL_RCC_OscConfig+0x33c>)
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	2204      	movs	r2, #4
 800a37a:	4013      	ands	r3, r2
 800a37c:	d004      	beq.n	800a388 <HAL_RCC_OscConfig+0x188>
 800a37e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a380:	2b00      	cmp	r3, #0
 800a382:	d101      	bne.n	800a388 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 800a384:	2301      	movs	r3, #1
 800a386:	e304      	b.n	800a992 <HAL_RCC_OscConfig+0x792>
=======
 800a626:	69fb      	ldr	r3, [r7, #28]
 800a628:	2b04      	cmp	r3, #4
 800a62a:	d005      	beq.n	800a638 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800a62c:	69fb      	ldr	r3, [r7, #28]
 800a62e:	2b0c      	cmp	r3, #12
 800a630:	d13e      	bne.n	800a6b0 <HAL_RCC_OscConfig+0x1ec>
 800a632:	69bb      	ldr	r3, [r7, #24]
 800a634:	2b00      	cmp	r3, #0
 800a636:	d13b      	bne.n	800a6b0 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800a638:	4b71      	ldr	r3, [pc, #452]	@ (800a800 <HAL_RCC_OscConfig+0x33c>)
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	2204      	movs	r2, #4
 800a63e:	4013      	ands	r3, r2
 800a640:	d004      	beq.n	800a64c <HAL_RCC_OscConfig+0x188>
 800a642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a644:	2b00      	cmp	r3, #0
 800a646:	d101      	bne.n	800a64c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 800a648:	2301      	movs	r3, #1
 800a64a:	e304      	b.n	800ac56 <HAL_RCC_OscConfig+0x792>
>>>>>>> main
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< HEAD
 800a388:	4b6c      	ldr	r3, [pc, #432]	@ (800a53c <HAL_RCC_OscConfig+0x33c>)
 800a38a:	685b      	ldr	r3, [r3, #4]
 800a38c:	4a6e      	ldr	r2, [pc, #440]	@ (800a548 <HAL_RCC_OscConfig+0x348>)
 800a38e:	4013      	ands	r3, r2
 800a390:	0019      	movs	r1, r3
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	691b      	ldr	r3, [r3, #16]
 800a396:	021a      	lsls	r2, r3, #8
 800a398:	4b68      	ldr	r3, [pc, #416]	@ (800a53c <HAL_RCC_OscConfig+0x33c>)
 800a39a:	430a      	orrs	r2, r1
 800a39c:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800a39e:	4b67      	ldr	r3, [pc, #412]	@ (800a53c <HAL_RCC_OscConfig+0x33c>)
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	2209      	movs	r2, #9
 800a3a4:	4393      	bics	r3, r2
 800a3a6:	0019      	movs	r1, r3
 800a3a8:	4b64      	ldr	r3, [pc, #400]	@ (800a53c <HAL_RCC_OscConfig+0x33c>)
 800a3aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a3ac:	430a      	orrs	r2, r1
 800a3ae:	601a      	str	r2, [r3, #0]
=======
 800a64c:	4b6c      	ldr	r3, [pc, #432]	@ (800a800 <HAL_RCC_OscConfig+0x33c>)
 800a64e:	685b      	ldr	r3, [r3, #4]
 800a650:	4a6e      	ldr	r2, [pc, #440]	@ (800a80c <HAL_RCC_OscConfig+0x348>)
 800a652:	4013      	ands	r3, r2
 800a654:	0019      	movs	r1, r3
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	691b      	ldr	r3, [r3, #16]
 800a65a:	021a      	lsls	r2, r3, #8
 800a65c:	4b68      	ldr	r3, [pc, #416]	@ (800a800 <HAL_RCC_OscConfig+0x33c>)
 800a65e:	430a      	orrs	r2, r1
 800a660:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800a662:	4b67      	ldr	r3, [pc, #412]	@ (800a800 <HAL_RCC_OscConfig+0x33c>)
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	2209      	movs	r2, #9
 800a668:	4393      	bics	r3, r2
 800a66a:	0019      	movs	r1, r3
 800a66c:	4b64      	ldr	r3, [pc, #400]	@ (800a800 <HAL_RCC_OscConfig+0x33c>)
 800a66e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a670:	430a      	orrs	r2, r1
 800a672:	601a      	str	r2, [r3, #0]
>>>>>>> main
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
<<<<<<< HEAD
 800a3b0:	f000 fc42 	bl	800ac38 <HAL_RCC_GetSysClockFreq>
 800a3b4:	0001      	movs	r1, r0
 800a3b6:	4b61      	ldr	r3, [pc, #388]	@ (800a53c <HAL_RCC_OscConfig+0x33c>)
 800a3b8:	68db      	ldr	r3, [r3, #12]
 800a3ba:	091b      	lsrs	r3, r3, #4
 800a3bc:	220f      	movs	r2, #15
 800a3be:	4013      	ands	r3, r2
 800a3c0:	4a62      	ldr	r2, [pc, #392]	@ (800a54c <HAL_RCC_OscConfig+0x34c>)
 800a3c2:	5cd3      	ldrb	r3, [r2, r3]
 800a3c4:	000a      	movs	r2, r1
 800a3c6:	40da      	lsrs	r2, r3
 800a3c8:	4b61      	ldr	r3, [pc, #388]	@ (800a550 <HAL_RCC_OscConfig+0x350>)
 800a3ca:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 800a3cc:	4b61      	ldr	r3, [pc, #388]	@ (800a554 <HAL_RCC_OscConfig+0x354>)
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	2513      	movs	r5, #19
 800a3d2:	197c      	adds	r4, r7, r5
 800a3d4:	0018      	movs	r0, r3
 800a3d6:	f7fc fc0f 	bl	8006bf8 <HAL_InitTick>
 800a3da:	0003      	movs	r3, r0
 800a3dc:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800a3de:	197b      	adds	r3, r7, r5
 800a3e0:	781b      	ldrb	r3, [r3, #0]
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d046      	beq.n	800a474 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 800a3e6:	197b      	adds	r3, r7, r5
 800a3e8:	781b      	ldrb	r3, [r3, #0]
 800a3ea:	e2d2      	b.n	800a992 <HAL_RCC_OscConfig+0x792>
=======
 800a674:	f000 fc42 	bl	800aefc <HAL_RCC_GetSysClockFreq>
 800a678:	0001      	movs	r1, r0
 800a67a:	4b61      	ldr	r3, [pc, #388]	@ (800a800 <HAL_RCC_OscConfig+0x33c>)
 800a67c:	68db      	ldr	r3, [r3, #12]
 800a67e:	091b      	lsrs	r3, r3, #4
 800a680:	220f      	movs	r2, #15
 800a682:	4013      	ands	r3, r2
 800a684:	4a62      	ldr	r2, [pc, #392]	@ (800a810 <HAL_RCC_OscConfig+0x34c>)
 800a686:	5cd3      	ldrb	r3, [r2, r3]
 800a688:	000a      	movs	r2, r1
 800a68a:	40da      	lsrs	r2, r3
 800a68c:	4b61      	ldr	r3, [pc, #388]	@ (800a814 <HAL_RCC_OscConfig+0x350>)
 800a68e:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 800a690:	4b61      	ldr	r3, [pc, #388]	@ (800a818 <HAL_RCC_OscConfig+0x354>)
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	2513      	movs	r5, #19
 800a696:	197c      	adds	r4, r7, r5
 800a698:	0018      	movs	r0, r3
 800a69a:	f7fc fc0f 	bl	8006ebc <HAL_InitTick>
 800a69e:	0003      	movs	r3, r0
 800a6a0:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800a6a2:	197b      	adds	r3, r7, r5
 800a6a4:	781b      	ldrb	r3, [r3, #0]
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d046      	beq.n	800a738 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 800a6aa:	197b      	adds	r3, r7, r5
 800a6ac:	781b      	ldrb	r3, [r3, #0]
 800a6ae:	e2d2      	b.n	800ac56 <HAL_RCC_OscConfig+0x792>
>>>>>>> main
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
<<<<<<< HEAD
 800a3ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d027      	beq.n	800a442 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800a3f2:	4b52      	ldr	r3, [pc, #328]	@ (800a53c <HAL_RCC_OscConfig+0x33c>)
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	2209      	movs	r2, #9
 800a3f8:	4393      	bics	r3, r2
 800a3fa:	0019      	movs	r1, r3
 800a3fc:	4b4f      	ldr	r3, [pc, #316]	@ (800a53c <HAL_RCC_OscConfig+0x33c>)
 800a3fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a400:	430a      	orrs	r2, r1
 800a402:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a404:	f7fc fc3e 	bl	8006c84 <HAL_GetTick>
 800a408:	0003      	movs	r3, r0
 800a40a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a40c:	e008      	b.n	800a420 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a40e:	f7fc fc39 	bl	8006c84 <HAL_GetTick>
 800a412:	0002      	movs	r2, r0
 800a414:	697b      	ldr	r3, [r7, #20]
 800a416:	1ad3      	subs	r3, r2, r3
 800a418:	2b02      	cmp	r3, #2
 800a41a:	d901      	bls.n	800a420 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 800a41c:	2303      	movs	r3, #3
 800a41e:	e2b8      	b.n	800a992 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a420:	4b46      	ldr	r3, [pc, #280]	@ (800a53c <HAL_RCC_OscConfig+0x33c>)
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	2204      	movs	r2, #4
 800a426:	4013      	ands	r3, r2
 800a428:	d0f1      	beq.n	800a40e <HAL_RCC_OscConfig+0x20e>
=======
 800a6b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d027      	beq.n	800a706 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800a6b6:	4b52      	ldr	r3, [pc, #328]	@ (800a800 <HAL_RCC_OscConfig+0x33c>)
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	2209      	movs	r2, #9
 800a6bc:	4393      	bics	r3, r2
 800a6be:	0019      	movs	r1, r3
 800a6c0:	4b4f      	ldr	r3, [pc, #316]	@ (800a800 <HAL_RCC_OscConfig+0x33c>)
 800a6c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a6c4:	430a      	orrs	r2, r1
 800a6c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a6c8:	f7fc fc3e 	bl	8006f48 <HAL_GetTick>
 800a6cc:	0003      	movs	r3, r0
 800a6ce:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a6d0:	e008      	b.n	800a6e4 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a6d2:	f7fc fc39 	bl	8006f48 <HAL_GetTick>
 800a6d6:	0002      	movs	r2, r0
 800a6d8:	697b      	ldr	r3, [r7, #20]
 800a6da:	1ad3      	subs	r3, r2, r3
 800a6dc:	2b02      	cmp	r3, #2
 800a6de:	d901      	bls.n	800a6e4 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 800a6e0:	2303      	movs	r3, #3
 800a6e2:	e2b8      	b.n	800ac56 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a6e4:	4b46      	ldr	r3, [pc, #280]	@ (800a800 <HAL_RCC_OscConfig+0x33c>)
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	2204      	movs	r2, #4
 800a6ea:	4013      	ands	r3, r2
 800a6ec:	d0f1      	beq.n	800a6d2 <HAL_RCC_OscConfig+0x20e>
>>>>>>> main
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< HEAD
 800a42a:	4b44      	ldr	r3, [pc, #272]	@ (800a53c <HAL_RCC_OscConfig+0x33c>)
 800a42c:	685b      	ldr	r3, [r3, #4]
 800a42e:	4a46      	ldr	r2, [pc, #280]	@ (800a548 <HAL_RCC_OscConfig+0x348>)
 800a430:	4013      	ands	r3, r2
 800a432:	0019      	movs	r1, r3
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	691b      	ldr	r3, [r3, #16]
 800a438:	021a      	lsls	r2, r3, #8
 800a43a:	4b40      	ldr	r3, [pc, #256]	@ (800a53c <HAL_RCC_OscConfig+0x33c>)
 800a43c:	430a      	orrs	r2, r1
 800a43e:	605a      	str	r2, [r3, #4]
 800a440:	e018      	b.n	800a474 <HAL_RCC_OscConfig+0x274>
=======
 800a6ee:	4b44      	ldr	r3, [pc, #272]	@ (800a800 <HAL_RCC_OscConfig+0x33c>)
 800a6f0:	685b      	ldr	r3, [r3, #4]
 800a6f2:	4a46      	ldr	r2, [pc, #280]	@ (800a80c <HAL_RCC_OscConfig+0x348>)
 800a6f4:	4013      	ands	r3, r2
 800a6f6:	0019      	movs	r1, r3
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	691b      	ldr	r3, [r3, #16]
 800a6fc:	021a      	lsls	r2, r3, #8
 800a6fe:	4b40      	ldr	r3, [pc, #256]	@ (800a800 <HAL_RCC_OscConfig+0x33c>)
 800a700:	430a      	orrs	r2, r1
 800a702:	605a      	str	r2, [r3, #4]
 800a704:	e018      	b.n	800a738 <HAL_RCC_OscConfig+0x274>
>>>>>>> main
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
<<<<<<< HEAD
 800a442:	4b3e      	ldr	r3, [pc, #248]	@ (800a53c <HAL_RCC_OscConfig+0x33c>)
 800a444:	681a      	ldr	r2, [r3, #0]
 800a446:	4b3d      	ldr	r3, [pc, #244]	@ (800a53c <HAL_RCC_OscConfig+0x33c>)
 800a448:	2101      	movs	r1, #1
 800a44a:	438a      	bics	r2, r1
 800a44c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a44e:	f7fc fc19 	bl	8006c84 <HAL_GetTick>
 800a452:	0003      	movs	r3, r0
 800a454:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a456:	e008      	b.n	800a46a <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a458:	f7fc fc14 	bl	8006c84 <HAL_GetTick>
 800a45c:	0002      	movs	r2, r0
 800a45e:	697b      	ldr	r3, [r7, #20]
 800a460:	1ad3      	subs	r3, r2, r3
 800a462:	2b02      	cmp	r3, #2
 800a464:	d901      	bls.n	800a46a <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 800a466:	2303      	movs	r3, #3
 800a468:	e293      	b.n	800a992 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a46a:	4b34      	ldr	r3, [pc, #208]	@ (800a53c <HAL_RCC_OscConfig+0x33c>)
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	2204      	movs	r2, #4
 800a470:	4013      	ands	r3, r2
 800a472:	d1f1      	bne.n	800a458 <HAL_RCC_OscConfig+0x258>
=======
 800a706:	4b3e      	ldr	r3, [pc, #248]	@ (800a800 <HAL_RCC_OscConfig+0x33c>)
 800a708:	681a      	ldr	r2, [r3, #0]
 800a70a:	4b3d      	ldr	r3, [pc, #244]	@ (800a800 <HAL_RCC_OscConfig+0x33c>)
 800a70c:	2101      	movs	r1, #1
 800a70e:	438a      	bics	r2, r1
 800a710:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a712:	f7fc fc19 	bl	8006f48 <HAL_GetTick>
 800a716:	0003      	movs	r3, r0
 800a718:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a71a:	e008      	b.n	800a72e <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a71c:	f7fc fc14 	bl	8006f48 <HAL_GetTick>
 800a720:	0002      	movs	r2, r0
 800a722:	697b      	ldr	r3, [r7, #20]
 800a724:	1ad3      	subs	r3, r2, r3
 800a726:	2b02      	cmp	r3, #2
 800a728:	d901      	bls.n	800a72e <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 800a72a:	2303      	movs	r3, #3
 800a72c:	e293      	b.n	800ac56 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a72e:	4b34      	ldr	r3, [pc, #208]	@ (800a800 <HAL_RCC_OscConfig+0x33c>)
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	2204      	movs	r2, #4
 800a734:	4013      	ands	r3, r2
 800a736:	d1f1      	bne.n	800a71c <HAL_RCC_OscConfig+0x258>
>>>>>>> main
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
<<<<<<< HEAD
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	2210      	movs	r2, #16
 800a47a:	4013      	ands	r3, r2
 800a47c:	d100      	bne.n	800a480 <HAL_RCC_OscConfig+0x280>
 800a47e:	e0a2      	b.n	800a5c6 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800a480:	69fb      	ldr	r3, [r7, #28]
 800a482:	2b00      	cmp	r3, #0
 800a484:	d140      	bne.n	800a508 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800a486:	4b2d      	ldr	r3, [pc, #180]	@ (800a53c <HAL_RCC_OscConfig+0x33c>)
 800a488:	681a      	ldr	r2, [r3, #0]
 800a48a:	2380      	movs	r3, #128	@ 0x80
 800a48c:	009b      	lsls	r3, r3, #2
 800a48e:	4013      	ands	r3, r2
 800a490:	d005      	beq.n	800a49e <HAL_RCC_OscConfig+0x29e>
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	69db      	ldr	r3, [r3, #28]
 800a496:	2b00      	cmp	r3, #0
 800a498:	d101      	bne.n	800a49e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800a49a:	2301      	movs	r3, #1
 800a49c:	e279      	b.n	800a992 <HAL_RCC_OscConfig+0x792>
=======
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	2210      	movs	r2, #16
 800a73e:	4013      	ands	r3, r2
 800a740:	d100      	bne.n	800a744 <HAL_RCC_OscConfig+0x280>
 800a742:	e0a2      	b.n	800a88a <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800a744:	69fb      	ldr	r3, [r7, #28]
 800a746:	2b00      	cmp	r3, #0
 800a748:	d140      	bne.n	800a7cc <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800a74a:	4b2d      	ldr	r3, [pc, #180]	@ (800a800 <HAL_RCC_OscConfig+0x33c>)
 800a74c:	681a      	ldr	r2, [r3, #0]
 800a74e:	2380      	movs	r3, #128	@ 0x80
 800a750:	009b      	lsls	r3, r3, #2
 800a752:	4013      	ands	r3, r2
 800a754:	d005      	beq.n	800a762 <HAL_RCC_OscConfig+0x29e>
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	69db      	ldr	r3, [r3, #28]
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d101      	bne.n	800a762 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800a75e:	2301      	movs	r3, #1
 800a760:	e279      	b.n	800ac56 <HAL_RCC_OscConfig+0x792>
>>>>>>> main
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
<<<<<<< HEAD
 800a49e:	4b27      	ldr	r3, [pc, #156]	@ (800a53c <HAL_RCC_OscConfig+0x33c>)
 800a4a0:	685b      	ldr	r3, [r3, #4]
 800a4a2:	4a2d      	ldr	r2, [pc, #180]	@ (800a558 <HAL_RCC_OscConfig+0x358>)
 800a4a4:	4013      	ands	r3, r2
 800a4a6:	0019      	movs	r1, r3
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a4ac:	4b23      	ldr	r3, [pc, #140]	@ (800a53c <HAL_RCC_OscConfig+0x33c>)
 800a4ae:	430a      	orrs	r2, r1
 800a4b0:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a4b2:	4b22      	ldr	r3, [pc, #136]	@ (800a53c <HAL_RCC_OscConfig+0x33c>)
 800a4b4:	685b      	ldr	r3, [r3, #4]
 800a4b6:	021b      	lsls	r3, r3, #8
 800a4b8:	0a19      	lsrs	r1, r3, #8
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	6a1b      	ldr	r3, [r3, #32]
 800a4be:	061a      	lsls	r2, r3, #24
 800a4c0:	4b1e      	ldr	r3, [pc, #120]	@ (800a53c <HAL_RCC_OscConfig+0x33c>)
 800a4c2:	430a      	orrs	r2, r1
 800a4c4:	605a      	str	r2, [r3, #4]
=======
 800a762:	4b27      	ldr	r3, [pc, #156]	@ (800a800 <HAL_RCC_OscConfig+0x33c>)
 800a764:	685b      	ldr	r3, [r3, #4]
 800a766:	4a2d      	ldr	r2, [pc, #180]	@ (800a81c <HAL_RCC_OscConfig+0x358>)
 800a768:	4013      	ands	r3, r2
 800a76a:	0019      	movs	r1, r3
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a770:	4b23      	ldr	r3, [pc, #140]	@ (800a800 <HAL_RCC_OscConfig+0x33c>)
 800a772:	430a      	orrs	r2, r1
 800a774:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a776:	4b22      	ldr	r3, [pc, #136]	@ (800a800 <HAL_RCC_OscConfig+0x33c>)
 800a778:	685b      	ldr	r3, [r3, #4]
 800a77a:	021b      	lsls	r3, r3, #8
 800a77c:	0a19      	lsrs	r1, r3, #8
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	6a1b      	ldr	r3, [r3, #32]
 800a782:	061a      	lsls	r2, r3, #24
 800a784:	4b1e      	ldr	r3, [pc, #120]	@ (800a800 <HAL_RCC_OscConfig+0x33c>)
 800a786:	430a      	orrs	r2, r1
 800a788:	605a      	str	r2, [r3, #4]
>>>>>>> main


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
<<<<<<< HEAD
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4ca:	0b5b      	lsrs	r3, r3, #13
 800a4cc:	3301      	adds	r3, #1
 800a4ce:	2280      	movs	r2, #128	@ 0x80
 800a4d0:	0212      	lsls	r2, r2, #8
 800a4d2:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800a4d4:	4b19      	ldr	r3, [pc, #100]	@ (800a53c <HAL_RCC_OscConfig+0x33c>)
 800a4d6:	68db      	ldr	r3, [r3, #12]
 800a4d8:	091b      	lsrs	r3, r3, #4
 800a4da:	210f      	movs	r1, #15
 800a4dc:	400b      	ands	r3, r1
 800a4de:	491b      	ldr	r1, [pc, #108]	@ (800a54c <HAL_RCC_OscConfig+0x34c>)
 800a4e0:	5ccb      	ldrb	r3, [r1, r3]
 800a4e2:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800a4e4:	4b1a      	ldr	r3, [pc, #104]	@ (800a550 <HAL_RCC_OscConfig+0x350>)
 800a4e6:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 800a4e8:	4b1a      	ldr	r3, [pc, #104]	@ (800a554 <HAL_RCC_OscConfig+0x354>)
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	2513      	movs	r5, #19
 800a4ee:	197c      	adds	r4, r7, r5
 800a4f0:	0018      	movs	r0, r3
 800a4f2:	f7fc fb81 	bl	8006bf8 <HAL_InitTick>
 800a4f6:	0003      	movs	r3, r0
 800a4f8:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800a4fa:	197b      	adds	r3, r7, r5
 800a4fc:	781b      	ldrb	r3, [r3, #0]
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d061      	beq.n	800a5c6 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 800a502:	197b      	adds	r3, r7, r5
 800a504:	781b      	ldrb	r3, [r3, #0]
 800a506:	e244      	b.n	800a992 <HAL_RCC_OscConfig+0x792>
=======
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a78e:	0b5b      	lsrs	r3, r3, #13
 800a790:	3301      	adds	r3, #1
 800a792:	2280      	movs	r2, #128	@ 0x80
 800a794:	0212      	lsls	r2, r2, #8
 800a796:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800a798:	4b19      	ldr	r3, [pc, #100]	@ (800a800 <HAL_RCC_OscConfig+0x33c>)
 800a79a:	68db      	ldr	r3, [r3, #12]
 800a79c:	091b      	lsrs	r3, r3, #4
 800a79e:	210f      	movs	r1, #15
 800a7a0:	400b      	ands	r3, r1
 800a7a2:	491b      	ldr	r1, [pc, #108]	@ (800a810 <HAL_RCC_OscConfig+0x34c>)
 800a7a4:	5ccb      	ldrb	r3, [r1, r3]
 800a7a6:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800a7a8:	4b1a      	ldr	r3, [pc, #104]	@ (800a814 <HAL_RCC_OscConfig+0x350>)
 800a7aa:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 800a7ac:	4b1a      	ldr	r3, [pc, #104]	@ (800a818 <HAL_RCC_OscConfig+0x354>)
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	2513      	movs	r5, #19
 800a7b2:	197c      	adds	r4, r7, r5
 800a7b4:	0018      	movs	r0, r3
 800a7b6:	f7fc fb81 	bl	8006ebc <HAL_InitTick>
 800a7ba:	0003      	movs	r3, r0
 800a7bc:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800a7be:	197b      	adds	r3, r7, r5
 800a7c0:	781b      	ldrb	r3, [r3, #0]
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d061      	beq.n	800a88a <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 800a7c6:	197b      	adds	r3, r7, r5
 800a7c8:	781b      	ldrb	r3, [r3, #0]
 800a7ca:	e244      	b.n	800ac56 <HAL_RCC_OscConfig+0x792>
>>>>>>> main
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
<<<<<<< HEAD
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	69db      	ldr	r3, [r3, #28]
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d040      	beq.n	800a592 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800a510:	4b0a      	ldr	r3, [pc, #40]	@ (800a53c <HAL_RCC_OscConfig+0x33c>)
 800a512:	681a      	ldr	r2, [r3, #0]
 800a514:	4b09      	ldr	r3, [pc, #36]	@ (800a53c <HAL_RCC_OscConfig+0x33c>)
 800a516:	2180      	movs	r1, #128	@ 0x80
 800a518:	0049      	lsls	r1, r1, #1
 800a51a:	430a      	orrs	r2, r1
 800a51c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a51e:	f7fc fbb1 	bl	8006c84 <HAL_GetTick>
 800a522:	0003      	movs	r3, r0
 800a524:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800a526:	e019      	b.n	800a55c <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800a528:	f7fc fbac 	bl	8006c84 <HAL_GetTick>
 800a52c:	0002      	movs	r2, r0
 800a52e:	697b      	ldr	r3, [r7, #20]
 800a530:	1ad3      	subs	r3, r2, r3
 800a532:	2b02      	cmp	r3, #2
 800a534:	d912      	bls.n	800a55c <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 800a536:	2303      	movs	r3, #3
 800a538:	e22b      	b.n	800a992 <HAL_RCC_OscConfig+0x792>
 800a53a:	46c0      	nop			@ (mov r8, r8)
 800a53c:	40021000 	.word	0x40021000
 800a540:	fffeffff 	.word	0xfffeffff
 800a544:	fffbffff 	.word	0xfffbffff
 800a548:	ffffe0ff 	.word	0xffffe0ff
 800a54c:	08010578 	.word	0x08010578
 800a550:	2000002c 	.word	0x2000002c
 800a554:	20000040 	.word	0x20000040
 800a558:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800a55c:	4bca      	ldr	r3, [pc, #808]	@ (800a888 <HAL_RCC_OscConfig+0x688>)
 800a55e:	681a      	ldr	r2, [r3, #0]
 800a560:	2380      	movs	r3, #128	@ 0x80
 800a562:	009b      	lsls	r3, r3, #2
 800a564:	4013      	ands	r3, r2
 800a566:	d0df      	beq.n	800a528 <HAL_RCC_OscConfig+0x328>
=======
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	69db      	ldr	r3, [r3, #28]
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d040      	beq.n	800a856 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800a7d4:	4b0a      	ldr	r3, [pc, #40]	@ (800a800 <HAL_RCC_OscConfig+0x33c>)
 800a7d6:	681a      	ldr	r2, [r3, #0]
 800a7d8:	4b09      	ldr	r3, [pc, #36]	@ (800a800 <HAL_RCC_OscConfig+0x33c>)
 800a7da:	2180      	movs	r1, #128	@ 0x80
 800a7dc:	0049      	lsls	r1, r1, #1
 800a7de:	430a      	orrs	r2, r1
 800a7e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a7e2:	f7fc fbb1 	bl	8006f48 <HAL_GetTick>
 800a7e6:	0003      	movs	r3, r0
 800a7e8:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800a7ea:	e019      	b.n	800a820 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800a7ec:	f7fc fbac 	bl	8006f48 <HAL_GetTick>
 800a7f0:	0002      	movs	r2, r0
 800a7f2:	697b      	ldr	r3, [r7, #20]
 800a7f4:	1ad3      	subs	r3, r2, r3
 800a7f6:	2b02      	cmp	r3, #2
 800a7f8:	d912      	bls.n	800a820 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 800a7fa:	2303      	movs	r3, #3
 800a7fc:	e22b      	b.n	800ac56 <HAL_RCC_OscConfig+0x792>
 800a7fe:	46c0      	nop			@ (mov r8, r8)
 800a800:	40021000 	.word	0x40021000
 800a804:	fffeffff 	.word	0xfffeffff
 800a808:	fffbffff 	.word	0xfffbffff
 800a80c:	ffffe0ff 	.word	0xffffe0ff
 800a810:	080106d4 	.word	0x080106d4
 800a814:	20000038 	.word	0x20000038
 800a818:	2000004c 	.word	0x2000004c
 800a81c:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800a820:	4bca      	ldr	r3, [pc, #808]	@ (800ab4c <HAL_RCC_OscConfig+0x688>)
 800a822:	681a      	ldr	r2, [r3, #0]
 800a824:	2380      	movs	r3, #128	@ 0x80
 800a826:	009b      	lsls	r3, r3, #2
 800a828:	4013      	ands	r3, r2
 800a82a:	d0df      	beq.n	800a7ec <HAL_RCC_OscConfig+0x328>
>>>>>>> main
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
<<<<<<< HEAD
 800a568:	4bc7      	ldr	r3, [pc, #796]	@ (800a888 <HAL_RCC_OscConfig+0x688>)
 800a56a:	685b      	ldr	r3, [r3, #4]
 800a56c:	4ac7      	ldr	r2, [pc, #796]	@ (800a88c <HAL_RCC_OscConfig+0x68c>)
 800a56e:	4013      	ands	r3, r2
 800a570:	0019      	movs	r1, r3
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a576:	4bc4      	ldr	r3, [pc, #784]	@ (800a888 <HAL_RCC_OscConfig+0x688>)
 800a578:	430a      	orrs	r2, r1
 800a57a:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a57c:	4bc2      	ldr	r3, [pc, #776]	@ (800a888 <HAL_RCC_OscConfig+0x688>)
 800a57e:	685b      	ldr	r3, [r3, #4]
 800a580:	021b      	lsls	r3, r3, #8
 800a582:	0a19      	lsrs	r1, r3, #8
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	6a1b      	ldr	r3, [r3, #32]
 800a588:	061a      	lsls	r2, r3, #24
 800a58a:	4bbf      	ldr	r3, [pc, #764]	@ (800a888 <HAL_RCC_OscConfig+0x688>)
 800a58c:	430a      	orrs	r2, r1
 800a58e:	605a      	str	r2, [r3, #4]
 800a590:	e019      	b.n	800a5c6 <HAL_RCC_OscConfig+0x3c6>
=======
 800a82c:	4bc7      	ldr	r3, [pc, #796]	@ (800ab4c <HAL_RCC_OscConfig+0x688>)
 800a82e:	685b      	ldr	r3, [r3, #4]
 800a830:	4ac7      	ldr	r2, [pc, #796]	@ (800ab50 <HAL_RCC_OscConfig+0x68c>)
 800a832:	4013      	ands	r3, r2
 800a834:	0019      	movs	r1, r3
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a83a:	4bc4      	ldr	r3, [pc, #784]	@ (800ab4c <HAL_RCC_OscConfig+0x688>)
 800a83c:	430a      	orrs	r2, r1
 800a83e:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a840:	4bc2      	ldr	r3, [pc, #776]	@ (800ab4c <HAL_RCC_OscConfig+0x688>)
 800a842:	685b      	ldr	r3, [r3, #4]
 800a844:	021b      	lsls	r3, r3, #8
 800a846:	0a19      	lsrs	r1, r3, #8
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	6a1b      	ldr	r3, [r3, #32]
 800a84c:	061a      	lsls	r2, r3, #24
 800a84e:	4bbf      	ldr	r3, [pc, #764]	@ (800ab4c <HAL_RCC_OscConfig+0x688>)
 800a850:	430a      	orrs	r2, r1
 800a852:	605a      	str	r2, [r3, #4]
 800a854:	e019      	b.n	800a88a <HAL_RCC_OscConfig+0x3c6>
>>>>>>> main
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
<<<<<<< HEAD
 800a592:	4bbd      	ldr	r3, [pc, #756]	@ (800a888 <HAL_RCC_OscConfig+0x688>)
 800a594:	681a      	ldr	r2, [r3, #0]
 800a596:	4bbc      	ldr	r3, [pc, #752]	@ (800a888 <HAL_RCC_OscConfig+0x688>)
 800a598:	49bd      	ldr	r1, [pc, #756]	@ (800a890 <HAL_RCC_OscConfig+0x690>)
 800a59a:	400a      	ands	r2, r1
 800a59c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a59e:	f7fc fb71 	bl	8006c84 <HAL_GetTick>
 800a5a2:	0003      	movs	r3, r0
 800a5a4:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800a5a6:	e008      	b.n	800a5ba <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800a5a8:	f7fc fb6c 	bl	8006c84 <HAL_GetTick>
 800a5ac:	0002      	movs	r2, r0
 800a5ae:	697b      	ldr	r3, [r7, #20]
 800a5b0:	1ad3      	subs	r3, r2, r3
 800a5b2:	2b02      	cmp	r3, #2
 800a5b4:	d901      	bls.n	800a5ba <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 800a5b6:	2303      	movs	r3, #3
 800a5b8:	e1eb      	b.n	800a992 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800a5ba:	4bb3      	ldr	r3, [pc, #716]	@ (800a888 <HAL_RCC_OscConfig+0x688>)
 800a5bc:	681a      	ldr	r2, [r3, #0]
 800a5be:	2380      	movs	r3, #128	@ 0x80
 800a5c0:	009b      	lsls	r3, r3, #2
 800a5c2:	4013      	ands	r3, r2
 800a5c4:	d1f0      	bne.n	800a5a8 <HAL_RCC_OscConfig+0x3a8>
=======
 800a856:	4bbd      	ldr	r3, [pc, #756]	@ (800ab4c <HAL_RCC_OscConfig+0x688>)
 800a858:	681a      	ldr	r2, [r3, #0]
 800a85a:	4bbc      	ldr	r3, [pc, #752]	@ (800ab4c <HAL_RCC_OscConfig+0x688>)
 800a85c:	49bd      	ldr	r1, [pc, #756]	@ (800ab54 <HAL_RCC_OscConfig+0x690>)
 800a85e:	400a      	ands	r2, r1
 800a860:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a862:	f7fc fb71 	bl	8006f48 <HAL_GetTick>
 800a866:	0003      	movs	r3, r0
 800a868:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800a86a:	e008      	b.n	800a87e <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800a86c:	f7fc fb6c 	bl	8006f48 <HAL_GetTick>
 800a870:	0002      	movs	r2, r0
 800a872:	697b      	ldr	r3, [r7, #20]
 800a874:	1ad3      	subs	r3, r2, r3
 800a876:	2b02      	cmp	r3, #2
 800a878:	d901      	bls.n	800a87e <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 800a87a:	2303      	movs	r3, #3
 800a87c:	e1eb      	b.n	800ac56 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800a87e:	4bb3      	ldr	r3, [pc, #716]	@ (800ab4c <HAL_RCC_OscConfig+0x688>)
 800a880:	681a      	ldr	r2, [r3, #0]
 800a882:	2380      	movs	r3, #128	@ 0x80
 800a884:	009b      	lsls	r3, r3, #2
 800a886:	4013      	ands	r3, r2
 800a888:	d1f0      	bne.n	800a86c <HAL_RCC_OscConfig+0x3a8>
>>>>>>> main
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
<<<<<<< HEAD
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	2208      	movs	r2, #8
 800a5cc:	4013      	ands	r3, r2
 800a5ce:	d036      	beq.n	800a63e <HAL_RCC_OscConfig+0x43e>
=======
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	2208      	movs	r2, #8
 800a890:	4013      	ands	r3, r2
 800a892:	d036      	beq.n	800a902 <HAL_RCC_OscConfig+0x43e>
>>>>>>> main
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
<<<<<<< HEAD
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	695b      	ldr	r3, [r3, #20]
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d019      	beq.n	800a60c <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a5d8:	4bab      	ldr	r3, [pc, #684]	@ (800a888 <HAL_RCC_OscConfig+0x688>)
 800a5da:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a5dc:	4baa      	ldr	r3, [pc, #680]	@ (800a888 <HAL_RCC_OscConfig+0x688>)
 800a5de:	2101      	movs	r1, #1
 800a5e0:	430a      	orrs	r2, r1
 800a5e2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a5e4:	f7fc fb4e 	bl	8006c84 <HAL_GetTick>
 800a5e8:	0003      	movs	r3, r0
 800a5ea:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a5ec:	e008      	b.n	800a600 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a5ee:	f7fc fb49 	bl	8006c84 <HAL_GetTick>
 800a5f2:	0002      	movs	r2, r0
 800a5f4:	697b      	ldr	r3, [r7, #20]
 800a5f6:	1ad3      	subs	r3, r2, r3
 800a5f8:	2b02      	cmp	r3, #2
 800a5fa:	d901      	bls.n	800a600 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 800a5fc:	2303      	movs	r3, #3
 800a5fe:	e1c8      	b.n	800a992 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a600:	4ba1      	ldr	r3, [pc, #644]	@ (800a888 <HAL_RCC_OscConfig+0x688>)
 800a602:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a604:	2202      	movs	r2, #2
 800a606:	4013      	ands	r3, r2
 800a608:	d0f1      	beq.n	800a5ee <HAL_RCC_OscConfig+0x3ee>
 800a60a:	e018      	b.n	800a63e <HAL_RCC_OscConfig+0x43e>
=======
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	695b      	ldr	r3, [r3, #20]
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d019      	beq.n	800a8d0 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a89c:	4bab      	ldr	r3, [pc, #684]	@ (800ab4c <HAL_RCC_OscConfig+0x688>)
 800a89e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a8a0:	4baa      	ldr	r3, [pc, #680]	@ (800ab4c <HAL_RCC_OscConfig+0x688>)
 800a8a2:	2101      	movs	r1, #1
 800a8a4:	430a      	orrs	r2, r1
 800a8a6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a8a8:	f7fc fb4e 	bl	8006f48 <HAL_GetTick>
 800a8ac:	0003      	movs	r3, r0
 800a8ae:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a8b0:	e008      	b.n	800a8c4 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a8b2:	f7fc fb49 	bl	8006f48 <HAL_GetTick>
 800a8b6:	0002      	movs	r2, r0
 800a8b8:	697b      	ldr	r3, [r7, #20]
 800a8ba:	1ad3      	subs	r3, r2, r3
 800a8bc:	2b02      	cmp	r3, #2
 800a8be:	d901      	bls.n	800a8c4 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 800a8c0:	2303      	movs	r3, #3
 800a8c2:	e1c8      	b.n	800ac56 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a8c4:	4ba1      	ldr	r3, [pc, #644]	@ (800ab4c <HAL_RCC_OscConfig+0x688>)
 800a8c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a8c8:	2202      	movs	r2, #2
 800a8ca:	4013      	ands	r3, r2
 800a8cc:	d0f1      	beq.n	800a8b2 <HAL_RCC_OscConfig+0x3ee>
 800a8ce:	e018      	b.n	800a902 <HAL_RCC_OscConfig+0x43e>
>>>>>>> main
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
<<<<<<< HEAD
 800a60c:	4b9e      	ldr	r3, [pc, #632]	@ (800a888 <HAL_RCC_OscConfig+0x688>)
 800a60e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a610:	4b9d      	ldr	r3, [pc, #628]	@ (800a888 <HAL_RCC_OscConfig+0x688>)
 800a612:	2101      	movs	r1, #1
 800a614:	438a      	bics	r2, r1
 800a616:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a618:	f7fc fb34 	bl	8006c84 <HAL_GetTick>
 800a61c:	0003      	movs	r3, r0
 800a61e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a620:	e008      	b.n	800a634 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a622:	f7fc fb2f 	bl	8006c84 <HAL_GetTick>
 800a626:	0002      	movs	r2, r0
 800a628:	697b      	ldr	r3, [r7, #20]
 800a62a:	1ad3      	subs	r3, r2, r3
 800a62c:	2b02      	cmp	r3, #2
 800a62e:	d901      	bls.n	800a634 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 800a630:	2303      	movs	r3, #3
 800a632:	e1ae      	b.n	800a992 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a634:	4b94      	ldr	r3, [pc, #592]	@ (800a888 <HAL_RCC_OscConfig+0x688>)
 800a636:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a638:	2202      	movs	r2, #2
 800a63a:	4013      	ands	r3, r2
 800a63c:	d1f1      	bne.n	800a622 <HAL_RCC_OscConfig+0x422>
=======
 800a8d0:	4b9e      	ldr	r3, [pc, #632]	@ (800ab4c <HAL_RCC_OscConfig+0x688>)
 800a8d2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a8d4:	4b9d      	ldr	r3, [pc, #628]	@ (800ab4c <HAL_RCC_OscConfig+0x688>)
 800a8d6:	2101      	movs	r1, #1
 800a8d8:	438a      	bics	r2, r1
 800a8da:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a8dc:	f7fc fb34 	bl	8006f48 <HAL_GetTick>
 800a8e0:	0003      	movs	r3, r0
 800a8e2:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a8e4:	e008      	b.n	800a8f8 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a8e6:	f7fc fb2f 	bl	8006f48 <HAL_GetTick>
 800a8ea:	0002      	movs	r2, r0
 800a8ec:	697b      	ldr	r3, [r7, #20]
 800a8ee:	1ad3      	subs	r3, r2, r3
 800a8f0:	2b02      	cmp	r3, #2
 800a8f2:	d901      	bls.n	800a8f8 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 800a8f4:	2303      	movs	r3, #3
 800a8f6:	e1ae      	b.n	800ac56 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a8f8:	4b94      	ldr	r3, [pc, #592]	@ (800ab4c <HAL_RCC_OscConfig+0x688>)
 800a8fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a8fc:	2202      	movs	r2, #2
 800a8fe:	4013      	ands	r3, r2
 800a900:	d1f1      	bne.n	800a8e6 <HAL_RCC_OscConfig+0x422>
>>>>>>> main
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
<<<<<<< HEAD
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	2204      	movs	r2, #4
 800a644:	4013      	ands	r3, r2
 800a646:	d100      	bne.n	800a64a <HAL_RCC_OscConfig+0x44a>
 800a648:	e0ae      	b.n	800a7a8 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a64a:	2023      	movs	r0, #35	@ 0x23
 800a64c:	183b      	adds	r3, r7, r0
 800a64e:	2200      	movs	r2, #0
 800a650:	701a      	strb	r2, [r3, #0]
=======
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	2204      	movs	r2, #4
 800a908:	4013      	ands	r3, r2
 800a90a:	d100      	bne.n	800a90e <HAL_RCC_OscConfig+0x44a>
 800a90c:	e0ae      	b.n	800aa6c <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a90e:	2023      	movs	r0, #35	@ 0x23
 800a910:	183b      	adds	r3, r7, r0
 800a912:	2200      	movs	r2, #0
 800a914:	701a      	strb	r2, [r3, #0]
>>>>>>> main
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
<<<<<<< HEAD
 800a652:	4b8d      	ldr	r3, [pc, #564]	@ (800a888 <HAL_RCC_OscConfig+0x688>)
 800a654:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a656:	2380      	movs	r3, #128	@ 0x80
 800a658:	055b      	lsls	r3, r3, #21
 800a65a:	4013      	ands	r3, r2
 800a65c:	d109      	bne.n	800a672 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a65e:	4b8a      	ldr	r3, [pc, #552]	@ (800a888 <HAL_RCC_OscConfig+0x688>)
 800a660:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a662:	4b89      	ldr	r3, [pc, #548]	@ (800a888 <HAL_RCC_OscConfig+0x688>)
 800a664:	2180      	movs	r1, #128	@ 0x80
 800a666:	0549      	lsls	r1, r1, #21
 800a668:	430a      	orrs	r2, r1
 800a66a:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 800a66c:	183b      	adds	r3, r7, r0
 800a66e:	2201      	movs	r2, #1
 800a670:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a672:	4b88      	ldr	r3, [pc, #544]	@ (800a894 <HAL_RCC_OscConfig+0x694>)
 800a674:	681a      	ldr	r2, [r3, #0]
 800a676:	2380      	movs	r3, #128	@ 0x80
 800a678:	005b      	lsls	r3, r3, #1
 800a67a:	4013      	ands	r3, r2
 800a67c:	d11a      	bne.n	800a6b4 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a67e:	4b85      	ldr	r3, [pc, #532]	@ (800a894 <HAL_RCC_OscConfig+0x694>)
 800a680:	681a      	ldr	r2, [r3, #0]
 800a682:	4b84      	ldr	r3, [pc, #528]	@ (800a894 <HAL_RCC_OscConfig+0x694>)
 800a684:	2180      	movs	r1, #128	@ 0x80
 800a686:	0049      	lsls	r1, r1, #1
 800a688:	430a      	orrs	r2, r1
 800a68a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a68c:	f7fc fafa 	bl	8006c84 <HAL_GetTick>
 800a690:	0003      	movs	r3, r0
 800a692:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a694:	e008      	b.n	800a6a8 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a696:	f7fc faf5 	bl	8006c84 <HAL_GetTick>
 800a69a:	0002      	movs	r2, r0
 800a69c:	697b      	ldr	r3, [r7, #20]
 800a69e:	1ad3      	subs	r3, r2, r3
 800a6a0:	2b64      	cmp	r3, #100	@ 0x64
 800a6a2:	d901      	bls.n	800a6a8 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 800a6a4:	2303      	movs	r3, #3
 800a6a6:	e174      	b.n	800a992 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a6a8:	4b7a      	ldr	r3, [pc, #488]	@ (800a894 <HAL_RCC_OscConfig+0x694>)
 800a6aa:	681a      	ldr	r2, [r3, #0]
 800a6ac:	2380      	movs	r3, #128	@ 0x80
 800a6ae:	005b      	lsls	r3, r3, #1
 800a6b0:	4013      	ands	r3, r2
 800a6b2:	d0f0      	beq.n	800a696 <HAL_RCC_OscConfig+0x496>
=======
 800a916:	4b8d      	ldr	r3, [pc, #564]	@ (800ab4c <HAL_RCC_OscConfig+0x688>)
 800a918:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a91a:	2380      	movs	r3, #128	@ 0x80
 800a91c:	055b      	lsls	r3, r3, #21
 800a91e:	4013      	ands	r3, r2
 800a920:	d109      	bne.n	800a936 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a922:	4b8a      	ldr	r3, [pc, #552]	@ (800ab4c <HAL_RCC_OscConfig+0x688>)
 800a924:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a926:	4b89      	ldr	r3, [pc, #548]	@ (800ab4c <HAL_RCC_OscConfig+0x688>)
 800a928:	2180      	movs	r1, #128	@ 0x80
 800a92a:	0549      	lsls	r1, r1, #21
 800a92c:	430a      	orrs	r2, r1
 800a92e:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 800a930:	183b      	adds	r3, r7, r0
 800a932:	2201      	movs	r2, #1
 800a934:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a936:	4b88      	ldr	r3, [pc, #544]	@ (800ab58 <HAL_RCC_OscConfig+0x694>)
 800a938:	681a      	ldr	r2, [r3, #0]
 800a93a:	2380      	movs	r3, #128	@ 0x80
 800a93c:	005b      	lsls	r3, r3, #1
 800a93e:	4013      	ands	r3, r2
 800a940:	d11a      	bne.n	800a978 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a942:	4b85      	ldr	r3, [pc, #532]	@ (800ab58 <HAL_RCC_OscConfig+0x694>)
 800a944:	681a      	ldr	r2, [r3, #0]
 800a946:	4b84      	ldr	r3, [pc, #528]	@ (800ab58 <HAL_RCC_OscConfig+0x694>)
 800a948:	2180      	movs	r1, #128	@ 0x80
 800a94a:	0049      	lsls	r1, r1, #1
 800a94c:	430a      	orrs	r2, r1
 800a94e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a950:	f7fc fafa 	bl	8006f48 <HAL_GetTick>
 800a954:	0003      	movs	r3, r0
 800a956:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a958:	e008      	b.n	800a96c <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a95a:	f7fc faf5 	bl	8006f48 <HAL_GetTick>
 800a95e:	0002      	movs	r2, r0
 800a960:	697b      	ldr	r3, [r7, #20]
 800a962:	1ad3      	subs	r3, r2, r3
 800a964:	2b64      	cmp	r3, #100	@ 0x64
 800a966:	d901      	bls.n	800a96c <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 800a968:	2303      	movs	r3, #3
 800a96a:	e174      	b.n	800ac56 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a96c:	4b7a      	ldr	r3, [pc, #488]	@ (800ab58 <HAL_RCC_OscConfig+0x694>)
 800a96e:	681a      	ldr	r2, [r3, #0]
 800a970:	2380      	movs	r3, #128	@ 0x80
 800a972:	005b      	lsls	r3, r3, #1
 800a974:	4013      	ands	r3, r2
 800a976:	d0f0      	beq.n	800a95a <HAL_RCC_OscConfig+0x496>
>>>>>>> main
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
<<<<<<< HEAD
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	689a      	ldr	r2, [r3, #8]
 800a6b8:	2380      	movs	r3, #128	@ 0x80
 800a6ba:	005b      	lsls	r3, r3, #1
 800a6bc:	429a      	cmp	r2, r3
 800a6be:	d107      	bne.n	800a6d0 <HAL_RCC_OscConfig+0x4d0>
 800a6c0:	4b71      	ldr	r3, [pc, #452]	@ (800a888 <HAL_RCC_OscConfig+0x688>)
 800a6c2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a6c4:	4b70      	ldr	r3, [pc, #448]	@ (800a888 <HAL_RCC_OscConfig+0x688>)
 800a6c6:	2180      	movs	r1, #128	@ 0x80
 800a6c8:	0049      	lsls	r1, r1, #1
 800a6ca:	430a      	orrs	r2, r1
 800a6cc:	651a      	str	r2, [r3, #80]	@ 0x50
 800a6ce:	e031      	b.n	800a734 <HAL_RCC_OscConfig+0x534>
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	689b      	ldr	r3, [r3, #8]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d10c      	bne.n	800a6f2 <HAL_RCC_OscConfig+0x4f2>
 800a6d8:	4b6b      	ldr	r3, [pc, #428]	@ (800a888 <HAL_RCC_OscConfig+0x688>)
 800a6da:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a6dc:	4b6a      	ldr	r3, [pc, #424]	@ (800a888 <HAL_RCC_OscConfig+0x688>)
 800a6de:	496c      	ldr	r1, [pc, #432]	@ (800a890 <HAL_RCC_OscConfig+0x690>)
 800a6e0:	400a      	ands	r2, r1
 800a6e2:	651a      	str	r2, [r3, #80]	@ 0x50
 800a6e4:	4b68      	ldr	r3, [pc, #416]	@ (800a888 <HAL_RCC_OscConfig+0x688>)
 800a6e6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a6e8:	4b67      	ldr	r3, [pc, #412]	@ (800a888 <HAL_RCC_OscConfig+0x688>)
 800a6ea:	496b      	ldr	r1, [pc, #428]	@ (800a898 <HAL_RCC_OscConfig+0x698>)
 800a6ec:	400a      	ands	r2, r1
 800a6ee:	651a      	str	r2, [r3, #80]	@ 0x50
 800a6f0:	e020      	b.n	800a734 <HAL_RCC_OscConfig+0x534>
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	689a      	ldr	r2, [r3, #8]
 800a6f6:	23a0      	movs	r3, #160	@ 0xa0
 800a6f8:	00db      	lsls	r3, r3, #3
 800a6fa:	429a      	cmp	r2, r3
 800a6fc:	d10e      	bne.n	800a71c <HAL_RCC_OscConfig+0x51c>
 800a6fe:	4b62      	ldr	r3, [pc, #392]	@ (800a888 <HAL_RCC_OscConfig+0x688>)
 800a700:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a702:	4b61      	ldr	r3, [pc, #388]	@ (800a888 <HAL_RCC_OscConfig+0x688>)
 800a704:	2180      	movs	r1, #128	@ 0x80
 800a706:	00c9      	lsls	r1, r1, #3
 800a708:	430a      	orrs	r2, r1
 800a70a:	651a      	str	r2, [r3, #80]	@ 0x50
 800a70c:	4b5e      	ldr	r3, [pc, #376]	@ (800a888 <HAL_RCC_OscConfig+0x688>)
 800a70e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a710:	4b5d      	ldr	r3, [pc, #372]	@ (800a888 <HAL_RCC_OscConfig+0x688>)
 800a712:	2180      	movs	r1, #128	@ 0x80
 800a714:	0049      	lsls	r1, r1, #1
 800a716:	430a      	orrs	r2, r1
 800a718:	651a      	str	r2, [r3, #80]	@ 0x50
 800a71a:	e00b      	b.n	800a734 <HAL_RCC_OscConfig+0x534>
 800a71c:	4b5a      	ldr	r3, [pc, #360]	@ (800a888 <HAL_RCC_OscConfig+0x688>)
 800a71e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a720:	4b59      	ldr	r3, [pc, #356]	@ (800a888 <HAL_RCC_OscConfig+0x688>)
 800a722:	495b      	ldr	r1, [pc, #364]	@ (800a890 <HAL_RCC_OscConfig+0x690>)
 800a724:	400a      	ands	r2, r1
 800a726:	651a      	str	r2, [r3, #80]	@ 0x50
 800a728:	4b57      	ldr	r3, [pc, #348]	@ (800a888 <HAL_RCC_OscConfig+0x688>)
 800a72a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a72c:	4b56      	ldr	r3, [pc, #344]	@ (800a888 <HAL_RCC_OscConfig+0x688>)
 800a72e:	495a      	ldr	r1, [pc, #360]	@ (800a898 <HAL_RCC_OscConfig+0x698>)
 800a730:	400a      	ands	r2, r1
 800a732:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	689b      	ldr	r3, [r3, #8]
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d015      	beq.n	800a768 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a73c:	f7fc faa2 	bl	8006c84 <HAL_GetTick>
 800a740:	0003      	movs	r3, r0
 800a742:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a744:	e009      	b.n	800a75a <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a746:	f7fc fa9d 	bl	8006c84 <HAL_GetTick>
 800a74a:	0002      	movs	r2, r0
 800a74c:	697b      	ldr	r3, [r7, #20]
 800a74e:	1ad3      	subs	r3, r2, r3
 800a750:	4a52      	ldr	r2, [pc, #328]	@ (800a89c <HAL_RCC_OscConfig+0x69c>)
 800a752:	4293      	cmp	r3, r2
 800a754:	d901      	bls.n	800a75a <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 800a756:	2303      	movs	r3, #3
 800a758:	e11b      	b.n	800a992 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a75a:	4b4b      	ldr	r3, [pc, #300]	@ (800a888 <HAL_RCC_OscConfig+0x688>)
 800a75c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a75e:	2380      	movs	r3, #128	@ 0x80
 800a760:	009b      	lsls	r3, r3, #2
 800a762:	4013      	ands	r3, r2
 800a764:	d0ef      	beq.n	800a746 <HAL_RCC_OscConfig+0x546>
 800a766:	e014      	b.n	800a792 <HAL_RCC_OscConfig+0x592>
=======
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	689a      	ldr	r2, [r3, #8]
 800a97c:	2380      	movs	r3, #128	@ 0x80
 800a97e:	005b      	lsls	r3, r3, #1
 800a980:	429a      	cmp	r2, r3
 800a982:	d107      	bne.n	800a994 <HAL_RCC_OscConfig+0x4d0>
 800a984:	4b71      	ldr	r3, [pc, #452]	@ (800ab4c <HAL_RCC_OscConfig+0x688>)
 800a986:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a988:	4b70      	ldr	r3, [pc, #448]	@ (800ab4c <HAL_RCC_OscConfig+0x688>)
 800a98a:	2180      	movs	r1, #128	@ 0x80
 800a98c:	0049      	lsls	r1, r1, #1
 800a98e:	430a      	orrs	r2, r1
 800a990:	651a      	str	r2, [r3, #80]	@ 0x50
 800a992:	e031      	b.n	800a9f8 <HAL_RCC_OscConfig+0x534>
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	689b      	ldr	r3, [r3, #8]
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d10c      	bne.n	800a9b6 <HAL_RCC_OscConfig+0x4f2>
 800a99c:	4b6b      	ldr	r3, [pc, #428]	@ (800ab4c <HAL_RCC_OscConfig+0x688>)
 800a99e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a9a0:	4b6a      	ldr	r3, [pc, #424]	@ (800ab4c <HAL_RCC_OscConfig+0x688>)
 800a9a2:	496c      	ldr	r1, [pc, #432]	@ (800ab54 <HAL_RCC_OscConfig+0x690>)
 800a9a4:	400a      	ands	r2, r1
 800a9a6:	651a      	str	r2, [r3, #80]	@ 0x50
 800a9a8:	4b68      	ldr	r3, [pc, #416]	@ (800ab4c <HAL_RCC_OscConfig+0x688>)
 800a9aa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a9ac:	4b67      	ldr	r3, [pc, #412]	@ (800ab4c <HAL_RCC_OscConfig+0x688>)
 800a9ae:	496b      	ldr	r1, [pc, #428]	@ (800ab5c <HAL_RCC_OscConfig+0x698>)
 800a9b0:	400a      	ands	r2, r1
 800a9b2:	651a      	str	r2, [r3, #80]	@ 0x50
 800a9b4:	e020      	b.n	800a9f8 <HAL_RCC_OscConfig+0x534>
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	689a      	ldr	r2, [r3, #8]
 800a9ba:	23a0      	movs	r3, #160	@ 0xa0
 800a9bc:	00db      	lsls	r3, r3, #3
 800a9be:	429a      	cmp	r2, r3
 800a9c0:	d10e      	bne.n	800a9e0 <HAL_RCC_OscConfig+0x51c>
 800a9c2:	4b62      	ldr	r3, [pc, #392]	@ (800ab4c <HAL_RCC_OscConfig+0x688>)
 800a9c4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a9c6:	4b61      	ldr	r3, [pc, #388]	@ (800ab4c <HAL_RCC_OscConfig+0x688>)
 800a9c8:	2180      	movs	r1, #128	@ 0x80
 800a9ca:	00c9      	lsls	r1, r1, #3
 800a9cc:	430a      	orrs	r2, r1
 800a9ce:	651a      	str	r2, [r3, #80]	@ 0x50
 800a9d0:	4b5e      	ldr	r3, [pc, #376]	@ (800ab4c <HAL_RCC_OscConfig+0x688>)
 800a9d2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a9d4:	4b5d      	ldr	r3, [pc, #372]	@ (800ab4c <HAL_RCC_OscConfig+0x688>)
 800a9d6:	2180      	movs	r1, #128	@ 0x80
 800a9d8:	0049      	lsls	r1, r1, #1
 800a9da:	430a      	orrs	r2, r1
 800a9dc:	651a      	str	r2, [r3, #80]	@ 0x50
 800a9de:	e00b      	b.n	800a9f8 <HAL_RCC_OscConfig+0x534>
 800a9e0:	4b5a      	ldr	r3, [pc, #360]	@ (800ab4c <HAL_RCC_OscConfig+0x688>)
 800a9e2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a9e4:	4b59      	ldr	r3, [pc, #356]	@ (800ab4c <HAL_RCC_OscConfig+0x688>)
 800a9e6:	495b      	ldr	r1, [pc, #364]	@ (800ab54 <HAL_RCC_OscConfig+0x690>)
 800a9e8:	400a      	ands	r2, r1
 800a9ea:	651a      	str	r2, [r3, #80]	@ 0x50
 800a9ec:	4b57      	ldr	r3, [pc, #348]	@ (800ab4c <HAL_RCC_OscConfig+0x688>)
 800a9ee:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a9f0:	4b56      	ldr	r3, [pc, #344]	@ (800ab4c <HAL_RCC_OscConfig+0x688>)
 800a9f2:	495a      	ldr	r1, [pc, #360]	@ (800ab5c <HAL_RCC_OscConfig+0x698>)
 800a9f4:	400a      	ands	r2, r1
 800a9f6:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	689b      	ldr	r3, [r3, #8]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d015      	beq.n	800aa2c <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800aa00:	f7fc faa2 	bl	8006f48 <HAL_GetTick>
 800aa04:	0003      	movs	r3, r0
 800aa06:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800aa08:	e009      	b.n	800aa1e <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800aa0a:	f7fc fa9d 	bl	8006f48 <HAL_GetTick>
 800aa0e:	0002      	movs	r2, r0
 800aa10:	697b      	ldr	r3, [r7, #20]
 800aa12:	1ad3      	subs	r3, r2, r3
 800aa14:	4a52      	ldr	r2, [pc, #328]	@ (800ab60 <HAL_RCC_OscConfig+0x69c>)
 800aa16:	4293      	cmp	r3, r2
 800aa18:	d901      	bls.n	800aa1e <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 800aa1a:	2303      	movs	r3, #3
 800aa1c:	e11b      	b.n	800ac56 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800aa1e:	4b4b      	ldr	r3, [pc, #300]	@ (800ab4c <HAL_RCC_OscConfig+0x688>)
 800aa20:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800aa22:	2380      	movs	r3, #128	@ 0x80
 800aa24:	009b      	lsls	r3, r3, #2
 800aa26:	4013      	ands	r3, r2
 800aa28:	d0ef      	beq.n	800aa0a <HAL_RCC_OscConfig+0x546>
 800aa2a:	e014      	b.n	800aa56 <HAL_RCC_OscConfig+0x592>
>>>>>>> main
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
<<<<<<< HEAD
 800a768:	f7fc fa8c 	bl	8006c84 <HAL_GetTick>
 800a76c:	0003      	movs	r3, r0
 800a76e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a770:	e009      	b.n	800a786 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a772:	f7fc fa87 	bl	8006c84 <HAL_GetTick>
 800a776:	0002      	movs	r2, r0
 800a778:	697b      	ldr	r3, [r7, #20]
 800a77a:	1ad3      	subs	r3, r2, r3
 800a77c:	4a47      	ldr	r2, [pc, #284]	@ (800a89c <HAL_RCC_OscConfig+0x69c>)
 800a77e:	4293      	cmp	r3, r2
 800a780:	d901      	bls.n	800a786 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 800a782:	2303      	movs	r3, #3
 800a784:	e105      	b.n	800a992 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a786:	4b40      	ldr	r3, [pc, #256]	@ (800a888 <HAL_RCC_OscConfig+0x688>)
 800a788:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a78a:	2380      	movs	r3, #128	@ 0x80
 800a78c:	009b      	lsls	r3, r3, #2
 800a78e:	4013      	ands	r3, r2
 800a790:	d1ef      	bne.n	800a772 <HAL_RCC_OscConfig+0x572>
=======
 800aa2c:	f7fc fa8c 	bl	8006f48 <HAL_GetTick>
 800aa30:	0003      	movs	r3, r0
 800aa32:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800aa34:	e009      	b.n	800aa4a <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800aa36:	f7fc fa87 	bl	8006f48 <HAL_GetTick>
 800aa3a:	0002      	movs	r2, r0
 800aa3c:	697b      	ldr	r3, [r7, #20]
 800aa3e:	1ad3      	subs	r3, r2, r3
 800aa40:	4a47      	ldr	r2, [pc, #284]	@ (800ab60 <HAL_RCC_OscConfig+0x69c>)
 800aa42:	4293      	cmp	r3, r2
 800aa44:	d901      	bls.n	800aa4a <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 800aa46:	2303      	movs	r3, #3
 800aa48:	e105      	b.n	800ac56 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800aa4a:	4b40      	ldr	r3, [pc, #256]	@ (800ab4c <HAL_RCC_OscConfig+0x688>)
 800aa4c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800aa4e:	2380      	movs	r3, #128	@ 0x80
 800aa50:	009b      	lsls	r3, r3, #2
 800aa52:	4013      	ands	r3, r2
 800aa54:	d1ef      	bne.n	800aa36 <HAL_RCC_OscConfig+0x572>
>>>>>>> main
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
<<<<<<< HEAD
 800a792:	2323      	movs	r3, #35	@ 0x23
 800a794:	18fb      	adds	r3, r7, r3
 800a796:	781b      	ldrb	r3, [r3, #0]
 800a798:	2b01      	cmp	r3, #1
 800a79a:	d105      	bne.n	800a7a8 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a79c:	4b3a      	ldr	r3, [pc, #232]	@ (800a888 <HAL_RCC_OscConfig+0x688>)
 800a79e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a7a0:	4b39      	ldr	r3, [pc, #228]	@ (800a888 <HAL_RCC_OscConfig+0x688>)
 800a7a2:	493f      	ldr	r1, [pc, #252]	@ (800a8a0 <HAL_RCC_OscConfig+0x6a0>)
 800a7a4:	400a      	ands	r2, r1
 800a7a6:	639a      	str	r2, [r3, #56]	@ 0x38
=======
 800aa56:	2323      	movs	r3, #35	@ 0x23
 800aa58:	18fb      	adds	r3, r7, r3
 800aa5a:	781b      	ldrb	r3, [r3, #0]
 800aa5c:	2b01      	cmp	r3, #1
 800aa5e:	d105      	bne.n	800aa6c <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800aa60:	4b3a      	ldr	r3, [pc, #232]	@ (800ab4c <HAL_RCC_OscConfig+0x688>)
 800aa62:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800aa64:	4b39      	ldr	r3, [pc, #228]	@ (800ab4c <HAL_RCC_OscConfig+0x688>)
 800aa66:	493f      	ldr	r1, [pc, #252]	@ (800ab64 <HAL_RCC_OscConfig+0x6a0>)
 800aa68:	400a      	ands	r2, r1
 800aa6a:	639a      	str	r2, [r3, #56]	@ 0x38
>>>>>>> main
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
<<<<<<< HEAD
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	2220      	movs	r2, #32
 800a7ae:	4013      	ands	r3, r2
 800a7b0:	d049      	beq.n	800a846 <HAL_RCC_OscConfig+0x646>
=======
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	2220      	movs	r2, #32
 800aa72:	4013      	ands	r3, r2
 800aa74:	d049      	beq.n	800ab0a <HAL_RCC_OscConfig+0x646>
>>>>>>> main
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
<<<<<<< HEAD
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	699b      	ldr	r3, [r3, #24]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d026      	beq.n	800a808 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800a7ba:	4b33      	ldr	r3, [pc, #204]	@ (800a888 <HAL_RCC_OscConfig+0x688>)
 800a7bc:	689a      	ldr	r2, [r3, #8]
 800a7be:	4b32      	ldr	r3, [pc, #200]	@ (800a888 <HAL_RCC_OscConfig+0x688>)
 800a7c0:	2101      	movs	r1, #1
 800a7c2:	430a      	orrs	r2, r1
 800a7c4:	609a      	str	r2, [r3, #8]
 800a7c6:	4b30      	ldr	r3, [pc, #192]	@ (800a888 <HAL_RCC_OscConfig+0x688>)
 800a7c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a7ca:	4b2f      	ldr	r3, [pc, #188]	@ (800a888 <HAL_RCC_OscConfig+0x688>)
 800a7cc:	2101      	movs	r1, #1
 800a7ce:	430a      	orrs	r2, r1
 800a7d0:	635a      	str	r2, [r3, #52]	@ 0x34
 800a7d2:	4b34      	ldr	r3, [pc, #208]	@ (800a8a4 <HAL_RCC_OscConfig+0x6a4>)
 800a7d4:	6a1a      	ldr	r2, [r3, #32]
 800a7d6:	4b33      	ldr	r3, [pc, #204]	@ (800a8a4 <HAL_RCC_OscConfig+0x6a4>)
 800a7d8:	2180      	movs	r1, #128	@ 0x80
 800a7da:	0189      	lsls	r1, r1, #6
 800a7dc:	430a      	orrs	r2, r1
 800a7de:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a7e0:	f7fc fa50 	bl	8006c84 <HAL_GetTick>
 800a7e4:	0003      	movs	r3, r0
 800a7e6:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a7e8:	e008      	b.n	800a7fc <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a7ea:	f7fc fa4b 	bl	8006c84 <HAL_GetTick>
 800a7ee:	0002      	movs	r2, r0
 800a7f0:	697b      	ldr	r3, [r7, #20]
 800a7f2:	1ad3      	subs	r3, r2, r3
 800a7f4:	2b02      	cmp	r3, #2
 800a7f6:	d901      	bls.n	800a7fc <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 800a7f8:	2303      	movs	r3, #3
 800a7fa:	e0ca      	b.n	800a992 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a7fc:	4b22      	ldr	r3, [pc, #136]	@ (800a888 <HAL_RCC_OscConfig+0x688>)
 800a7fe:	689b      	ldr	r3, [r3, #8]
 800a800:	2202      	movs	r2, #2
 800a802:	4013      	ands	r3, r2
 800a804:	d0f1      	beq.n	800a7ea <HAL_RCC_OscConfig+0x5ea>
 800a806:	e01e      	b.n	800a846 <HAL_RCC_OscConfig+0x646>
=======
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	699b      	ldr	r3, [r3, #24]
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d026      	beq.n	800aacc <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800aa7e:	4b33      	ldr	r3, [pc, #204]	@ (800ab4c <HAL_RCC_OscConfig+0x688>)
 800aa80:	689a      	ldr	r2, [r3, #8]
 800aa82:	4b32      	ldr	r3, [pc, #200]	@ (800ab4c <HAL_RCC_OscConfig+0x688>)
 800aa84:	2101      	movs	r1, #1
 800aa86:	430a      	orrs	r2, r1
 800aa88:	609a      	str	r2, [r3, #8]
 800aa8a:	4b30      	ldr	r3, [pc, #192]	@ (800ab4c <HAL_RCC_OscConfig+0x688>)
 800aa8c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800aa8e:	4b2f      	ldr	r3, [pc, #188]	@ (800ab4c <HAL_RCC_OscConfig+0x688>)
 800aa90:	2101      	movs	r1, #1
 800aa92:	430a      	orrs	r2, r1
 800aa94:	635a      	str	r2, [r3, #52]	@ 0x34
 800aa96:	4b34      	ldr	r3, [pc, #208]	@ (800ab68 <HAL_RCC_OscConfig+0x6a4>)
 800aa98:	6a1a      	ldr	r2, [r3, #32]
 800aa9a:	4b33      	ldr	r3, [pc, #204]	@ (800ab68 <HAL_RCC_OscConfig+0x6a4>)
 800aa9c:	2180      	movs	r1, #128	@ 0x80
 800aa9e:	0189      	lsls	r1, r1, #6
 800aaa0:	430a      	orrs	r2, r1
 800aaa2:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800aaa4:	f7fc fa50 	bl	8006f48 <HAL_GetTick>
 800aaa8:	0003      	movs	r3, r0
 800aaaa:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800aaac:	e008      	b.n	800aac0 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800aaae:	f7fc fa4b 	bl	8006f48 <HAL_GetTick>
 800aab2:	0002      	movs	r2, r0
 800aab4:	697b      	ldr	r3, [r7, #20]
 800aab6:	1ad3      	subs	r3, r2, r3
 800aab8:	2b02      	cmp	r3, #2
 800aaba:	d901      	bls.n	800aac0 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 800aabc:	2303      	movs	r3, #3
 800aabe:	e0ca      	b.n	800ac56 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800aac0:	4b22      	ldr	r3, [pc, #136]	@ (800ab4c <HAL_RCC_OscConfig+0x688>)
 800aac2:	689b      	ldr	r3, [r3, #8]
 800aac4:	2202      	movs	r2, #2
 800aac6:	4013      	ands	r3, r2
 800aac8:	d0f1      	beq.n	800aaae <HAL_RCC_OscConfig+0x5ea>
 800aaca:	e01e      	b.n	800ab0a <HAL_RCC_OscConfig+0x646>
>>>>>>> main
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
<<<<<<< HEAD
 800a808:	4b1f      	ldr	r3, [pc, #124]	@ (800a888 <HAL_RCC_OscConfig+0x688>)
 800a80a:	689a      	ldr	r2, [r3, #8]
 800a80c:	4b1e      	ldr	r3, [pc, #120]	@ (800a888 <HAL_RCC_OscConfig+0x688>)
 800a80e:	2101      	movs	r1, #1
 800a810:	438a      	bics	r2, r1
 800a812:	609a      	str	r2, [r3, #8]
 800a814:	4b23      	ldr	r3, [pc, #140]	@ (800a8a4 <HAL_RCC_OscConfig+0x6a4>)
 800a816:	6a1a      	ldr	r2, [r3, #32]
 800a818:	4b22      	ldr	r3, [pc, #136]	@ (800a8a4 <HAL_RCC_OscConfig+0x6a4>)
 800a81a:	4923      	ldr	r1, [pc, #140]	@ (800a8a8 <HAL_RCC_OscConfig+0x6a8>)
 800a81c:	400a      	ands	r2, r1
 800a81e:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a820:	f7fc fa30 	bl	8006c84 <HAL_GetTick>
 800a824:	0003      	movs	r3, r0
 800a826:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a828:	e008      	b.n	800a83c <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a82a:	f7fc fa2b 	bl	8006c84 <HAL_GetTick>
 800a82e:	0002      	movs	r2, r0
 800a830:	697b      	ldr	r3, [r7, #20]
 800a832:	1ad3      	subs	r3, r2, r3
 800a834:	2b02      	cmp	r3, #2
 800a836:	d901      	bls.n	800a83c <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 800a838:	2303      	movs	r3, #3
 800a83a:	e0aa      	b.n	800a992 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a83c:	4b12      	ldr	r3, [pc, #72]	@ (800a888 <HAL_RCC_OscConfig+0x688>)
 800a83e:	689b      	ldr	r3, [r3, #8]
 800a840:	2202      	movs	r2, #2
 800a842:	4013      	ands	r3, r2
 800a844:	d1f1      	bne.n	800a82a <HAL_RCC_OscConfig+0x62a>
=======
 800aacc:	4b1f      	ldr	r3, [pc, #124]	@ (800ab4c <HAL_RCC_OscConfig+0x688>)
 800aace:	689a      	ldr	r2, [r3, #8]
 800aad0:	4b1e      	ldr	r3, [pc, #120]	@ (800ab4c <HAL_RCC_OscConfig+0x688>)
 800aad2:	2101      	movs	r1, #1
 800aad4:	438a      	bics	r2, r1
 800aad6:	609a      	str	r2, [r3, #8]
 800aad8:	4b23      	ldr	r3, [pc, #140]	@ (800ab68 <HAL_RCC_OscConfig+0x6a4>)
 800aada:	6a1a      	ldr	r2, [r3, #32]
 800aadc:	4b22      	ldr	r3, [pc, #136]	@ (800ab68 <HAL_RCC_OscConfig+0x6a4>)
 800aade:	4923      	ldr	r1, [pc, #140]	@ (800ab6c <HAL_RCC_OscConfig+0x6a8>)
 800aae0:	400a      	ands	r2, r1
 800aae2:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800aae4:	f7fc fa30 	bl	8006f48 <HAL_GetTick>
 800aae8:	0003      	movs	r3, r0
 800aaea:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800aaec:	e008      	b.n	800ab00 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800aaee:	f7fc fa2b 	bl	8006f48 <HAL_GetTick>
 800aaf2:	0002      	movs	r2, r0
 800aaf4:	697b      	ldr	r3, [r7, #20]
 800aaf6:	1ad3      	subs	r3, r2, r3
 800aaf8:	2b02      	cmp	r3, #2
 800aafa:	d901      	bls.n	800ab00 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 800aafc:	2303      	movs	r3, #3
 800aafe:	e0aa      	b.n	800ac56 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800ab00:	4b12      	ldr	r3, [pc, #72]	@ (800ab4c <HAL_RCC_OscConfig+0x688>)
 800ab02:	689b      	ldr	r3, [r3, #8]
 800ab04:	2202      	movs	r2, #2
 800ab06:	4013      	ands	r3, r2
 800ab08:	d1f1      	bne.n	800aaee <HAL_RCC_OscConfig+0x62a>
>>>>>>> main
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
<<<<<<< HEAD
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d100      	bne.n	800a850 <HAL_RCC_OscConfig+0x650>
 800a84e:	e09f      	b.n	800a990 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a850:	69fb      	ldr	r3, [r7, #28]
 800a852:	2b0c      	cmp	r3, #12
 800a854:	d100      	bne.n	800a858 <HAL_RCC_OscConfig+0x658>
 800a856:	e078      	b.n	800a94a <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a85c:	2b02      	cmp	r3, #2
 800a85e:	d159      	bne.n	800a914 <HAL_RCC_OscConfig+0x714>
=======
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d100      	bne.n	800ab14 <HAL_RCC_OscConfig+0x650>
 800ab12:	e09f      	b.n	800ac54 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800ab14:	69fb      	ldr	r3, [r7, #28]
 800ab16:	2b0c      	cmp	r3, #12
 800ab18:	d100      	bne.n	800ab1c <HAL_RCC_OscConfig+0x658>
 800ab1a:	e078      	b.n	800ac0e <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab20:	2b02      	cmp	r3, #2
 800ab22:	d159      	bne.n	800abd8 <HAL_RCC_OscConfig+0x714>
>>>>>>> main
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
<<<<<<< HEAD
 800a860:	4b09      	ldr	r3, [pc, #36]	@ (800a888 <HAL_RCC_OscConfig+0x688>)
 800a862:	681a      	ldr	r2, [r3, #0]
 800a864:	4b08      	ldr	r3, [pc, #32]	@ (800a888 <HAL_RCC_OscConfig+0x688>)
 800a866:	4911      	ldr	r1, [pc, #68]	@ (800a8ac <HAL_RCC_OscConfig+0x6ac>)
 800a868:	400a      	ands	r2, r1
 800a86a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a86c:	f7fc fa0a 	bl	8006c84 <HAL_GetTick>
 800a870:	0003      	movs	r3, r0
 800a872:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800a874:	e01c      	b.n	800a8b0 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a876:	f7fc fa05 	bl	8006c84 <HAL_GetTick>
 800a87a:	0002      	movs	r2, r0
 800a87c:	697b      	ldr	r3, [r7, #20]
 800a87e:	1ad3      	subs	r3, r2, r3
 800a880:	2b02      	cmp	r3, #2
 800a882:	d915      	bls.n	800a8b0 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 800a884:	2303      	movs	r3, #3
 800a886:	e084      	b.n	800a992 <HAL_RCC_OscConfig+0x792>
 800a888:	40021000 	.word	0x40021000
 800a88c:	ffff1fff 	.word	0xffff1fff
 800a890:	fffffeff 	.word	0xfffffeff
 800a894:	40007000 	.word	0x40007000
 800a898:	fffffbff 	.word	0xfffffbff
 800a89c:	00001388 	.word	0x00001388
 800a8a0:	efffffff 	.word	0xefffffff
 800a8a4:	40010000 	.word	0x40010000
 800a8a8:	ffffdfff 	.word	0xffffdfff
 800a8ac:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800a8b0:	4b3a      	ldr	r3, [pc, #232]	@ (800a99c <HAL_RCC_OscConfig+0x79c>)
 800a8b2:	681a      	ldr	r2, [r3, #0]
 800a8b4:	2380      	movs	r3, #128	@ 0x80
 800a8b6:	049b      	lsls	r3, r3, #18
 800a8b8:	4013      	ands	r3, r2
 800a8ba:	d1dc      	bne.n	800a876 <HAL_RCC_OscConfig+0x676>
=======
 800ab24:	4b09      	ldr	r3, [pc, #36]	@ (800ab4c <HAL_RCC_OscConfig+0x688>)
 800ab26:	681a      	ldr	r2, [r3, #0]
 800ab28:	4b08      	ldr	r3, [pc, #32]	@ (800ab4c <HAL_RCC_OscConfig+0x688>)
 800ab2a:	4911      	ldr	r1, [pc, #68]	@ (800ab70 <HAL_RCC_OscConfig+0x6ac>)
 800ab2c:	400a      	ands	r2, r1
 800ab2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ab30:	f7fc fa0a 	bl	8006f48 <HAL_GetTick>
 800ab34:	0003      	movs	r3, r0
 800ab36:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800ab38:	e01c      	b.n	800ab74 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ab3a:	f7fc fa05 	bl	8006f48 <HAL_GetTick>
 800ab3e:	0002      	movs	r2, r0
 800ab40:	697b      	ldr	r3, [r7, #20]
 800ab42:	1ad3      	subs	r3, r2, r3
 800ab44:	2b02      	cmp	r3, #2
 800ab46:	d915      	bls.n	800ab74 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 800ab48:	2303      	movs	r3, #3
 800ab4a:	e084      	b.n	800ac56 <HAL_RCC_OscConfig+0x792>
 800ab4c:	40021000 	.word	0x40021000
 800ab50:	ffff1fff 	.word	0xffff1fff
 800ab54:	fffffeff 	.word	0xfffffeff
 800ab58:	40007000 	.word	0x40007000
 800ab5c:	fffffbff 	.word	0xfffffbff
 800ab60:	00001388 	.word	0x00001388
 800ab64:	efffffff 	.word	0xefffffff
 800ab68:	40010000 	.word	0x40010000
 800ab6c:	ffffdfff 	.word	0xffffdfff
 800ab70:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800ab74:	4b3a      	ldr	r3, [pc, #232]	@ (800ac60 <HAL_RCC_OscConfig+0x79c>)
 800ab76:	681a      	ldr	r2, [r3, #0]
 800ab78:	2380      	movs	r3, #128	@ 0x80
 800ab7a:	049b      	lsls	r3, r3, #18
 800ab7c:	4013      	ands	r3, r2
 800ab7e:	d1dc      	bne.n	800ab3a <HAL_RCC_OscConfig+0x676>
>>>>>>> main
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
<<<<<<< HEAD
 800a8bc:	4b37      	ldr	r3, [pc, #220]	@ (800a99c <HAL_RCC_OscConfig+0x79c>)
 800a8be:	68db      	ldr	r3, [r3, #12]
 800a8c0:	4a37      	ldr	r2, [pc, #220]	@ (800a9a0 <HAL_RCC_OscConfig+0x7a0>)
 800a8c2:	4013      	ands	r3, r2
 800a8c4:	0019      	movs	r1, r3
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a8ce:	431a      	orrs	r2, r3
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a8d4:	431a      	orrs	r2, r3
 800a8d6:	4b31      	ldr	r3, [pc, #196]	@ (800a99c <HAL_RCC_OscConfig+0x79c>)
 800a8d8:	430a      	orrs	r2, r1
 800a8da:	60da      	str	r2, [r3, #12]
=======
 800ab80:	4b37      	ldr	r3, [pc, #220]	@ (800ac60 <HAL_RCC_OscConfig+0x79c>)
 800ab82:	68db      	ldr	r3, [r3, #12]
 800ab84:	4a37      	ldr	r2, [pc, #220]	@ (800ac64 <HAL_RCC_OscConfig+0x7a0>)
 800ab86:	4013      	ands	r3, r2
 800ab88:	0019      	movs	r1, r3
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ab92:	431a      	orrs	r2, r3
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ab98:	431a      	orrs	r2, r3
 800ab9a:	4b31      	ldr	r3, [pc, #196]	@ (800ac60 <HAL_RCC_OscConfig+0x79c>)
 800ab9c:	430a      	orrs	r2, r1
 800ab9e:	60da      	str	r2, [r3, #12]
>>>>>>> main
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
<<<<<<< HEAD
 800a8dc:	4b2f      	ldr	r3, [pc, #188]	@ (800a99c <HAL_RCC_OscConfig+0x79c>)
 800a8de:	681a      	ldr	r2, [r3, #0]
 800a8e0:	4b2e      	ldr	r3, [pc, #184]	@ (800a99c <HAL_RCC_OscConfig+0x79c>)
 800a8e2:	2180      	movs	r1, #128	@ 0x80
 800a8e4:	0449      	lsls	r1, r1, #17
 800a8e6:	430a      	orrs	r2, r1
 800a8e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a8ea:	f7fc f9cb 	bl	8006c84 <HAL_GetTick>
 800a8ee:	0003      	movs	r3, r0
 800a8f0:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800a8f2:	e008      	b.n	800a906 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a8f4:	f7fc f9c6 	bl	8006c84 <HAL_GetTick>
 800a8f8:	0002      	movs	r2, r0
 800a8fa:	697b      	ldr	r3, [r7, #20]
 800a8fc:	1ad3      	subs	r3, r2, r3
 800a8fe:	2b02      	cmp	r3, #2
 800a900:	d901      	bls.n	800a906 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 800a902:	2303      	movs	r3, #3
 800a904:	e045      	b.n	800a992 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800a906:	4b25      	ldr	r3, [pc, #148]	@ (800a99c <HAL_RCC_OscConfig+0x79c>)
 800a908:	681a      	ldr	r2, [r3, #0]
 800a90a:	2380      	movs	r3, #128	@ 0x80
 800a90c:	049b      	lsls	r3, r3, #18
 800a90e:	4013      	ands	r3, r2
 800a910:	d0f0      	beq.n	800a8f4 <HAL_RCC_OscConfig+0x6f4>
 800a912:	e03d      	b.n	800a990 <HAL_RCC_OscConfig+0x790>
=======
 800aba0:	4b2f      	ldr	r3, [pc, #188]	@ (800ac60 <HAL_RCC_OscConfig+0x79c>)
 800aba2:	681a      	ldr	r2, [r3, #0]
 800aba4:	4b2e      	ldr	r3, [pc, #184]	@ (800ac60 <HAL_RCC_OscConfig+0x79c>)
 800aba6:	2180      	movs	r1, #128	@ 0x80
 800aba8:	0449      	lsls	r1, r1, #17
 800abaa:	430a      	orrs	r2, r1
 800abac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800abae:	f7fc f9cb 	bl	8006f48 <HAL_GetTick>
 800abb2:	0003      	movs	r3, r0
 800abb4:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800abb6:	e008      	b.n	800abca <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800abb8:	f7fc f9c6 	bl	8006f48 <HAL_GetTick>
 800abbc:	0002      	movs	r2, r0
 800abbe:	697b      	ldr	r3, [r7, #20]
 800abc0:	1ad3      	subs	r3, r2, r3
 800abc2:	2b02      	cmp	r3, #2
 800abc4:	d901      	bls.n	800abca <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 800abc6:	2303      	movs	r3, #3
 800abc8:	e045      	b.n	800ac56 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800abca:	4b25      	ldr	r3, [pc, #148]	@ (800ac60 <HAL_RCC_OscConfig+0x79c>)
 800abcc:	681a      	ldr	r2, [r3, #0]
 800abce:	2380      	movs	r3, #128	@ 0x80
 800abd0:	049b      	lsls	r3, r3, #18
 800abd2:	4013      	ands	r3, r2
 800abd4:	d0f0      	beq.n	800abb8 <HAL_RCC_OscConfig+0x6f4>
 800abd6:	e03d      	b.n	800ac54 <HAL_RCC_OscConfig+0x790>
>>>>>>> main
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
<<<<<<< HEAD
 800a914:	4b21      	ldr	r3, [pc, #132]	@ (800a99c <HAL_RCC_OscConfig+0x79c>)
 800a916:	681a      	ldr	r2, [r3, #0]
 800a918:	4b20      	ldr	r3, [pc, #128]	@ (800a99c <HAL_RCC_OscConfig+0x79c>)
 800a91a:	4922      	ldr	r1, [pc, #136]	@ (800a9a4 <HAL_RCC_OscConfig+0x7a4>)
 800a91c:	400a      	ands	r2, r1
 800a91e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a920:	f7fc f9b0 	bl	8006c84 <HAL_GetTick>
 800a924:	0003      	movs	r3, r0
 800a926:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800a928:	e008      	b.n	800a93c <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a92a:	f7fc f9ab 	bl	8006c84 <HAL_GetTick>
 800a92e:	0002      	movs	r2, r0
 800a930:	697b      	ldr	r3, [r7, #20]
 800a932:	1ad3      	subs	r3, r2, r3
 800a934:	2b02      	cmp	r3, #2
 800a936:	d901      	bls.n	800a93c <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 800a938:	2303      	movs	r3, #3
 800a93a:	e02a      	b.n	800a992 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800a93c:	4b17      	ldr	r3, [pc, #92]	@ (800a99c <HAL_RCC_OscConfig+0x79c>)
 800a93e:	681a      	ldr	r2, [r3, #0]
 800a940:	2380      	movs	r3, #128	@ 0x80
 800a942:	049b      	lsls	r3, r3, #18
 800a944:	4013      	ands	r3, r2
 800a946:	d1f0      	bne.n	800a92a <HAL_RCC_OscConfig+0x72a>
 800a948:	e022      	b.n	800a990 <HAL_RCC_OscConfig+0x790>
=======
 800abd8:	4b21      	ldr	r3, [pc, #132]	@ (800ac60 <HAL_RCC_OscConfig+0x79c>)
 800abda:	681a      	ldr	r2, [r3, #0]
 800abdc:	4b20      	ldr	r3, [pc, #128]	@ (800ac60 <HAL_RCC_OscConfig+0x79c>)
 800abde:	4922      	ldr	r1, [pc, #136]	@ (800ac68 <HAL_RCC_OscConfig+0x7a4>)
 800abe0:	400a      	ands	r2, r1
 800abe2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800abe4:	f7fc f9b0 	bl	8006f48 <HAL_GetTick>
 800abe8:	0003      	movs	r3, r0
 800abea:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800abec:	e008      	b.n	800ac00 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800abee:	f7fc f9ab 	bl	8006f48 <HAL_GetTick>
 800abf2:	0002      	movs	r2, r0
 800abf4:	697b      	ldr	r3, [r7, #20]
 800abf6:	1ad3      	subs	r3, r2, r3
 800abf8:	2b02      	cmp	r3, #2
 800abfa:	d901      	bls.n	800ac00 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 800abfc:	2303      	movs	r3, #3
 800abfe:	e02a      	b.n	800ac56 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800ac00:	4b17      	ldr	r3, [pc, #92]	@ (800ac60 <HAL_RCC_OscConfig+0x79c>)
 800ac02:	681a      	ldr	r2, [r3, #0]
 800ac04:	2380      	movs	r3, #128	@ 0x80
 800ac06:	049b      	lsls	r3, r3, #18
 800ac08:	4013      	ands	r3, r2
 800ac0a:	d1f0      	bne.n	800abee <HAL_RCC_OscConfig+0x72a>
 800ac0c:	e022      	b.n	800ac54 <HAL_RCC_OscConfig+0x790>
>>>>>>> main
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
<<<<<<< HEAD
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a94e:	2b01      	cmp	r3, #1
 800a950:	d101      	bne.n	800a956 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 800a952:	2301      	movs	r3, #1
 800a954:	e01d      	b.n	800a992 <HAL_RCC_OscConfig+0x792>
=======
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac12:	2b01      	cmp	r3, #1
 800ac14:	d101      	bne.n	800ac1a <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 800ac16:	2301      	movs	r3, #1
 800ac18:	e01d      	b.n	800ac56 <HAL_RCC_OscConfig+0x792>
>>>>>>> main
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
<<<<<<< HEAD
 800a956:	4b11      	ldr	r3, [pc, #68]	@ (800a99c <HAL_RCC_OscConfig+0x79c>)
 800a958:	68db      	ldr	r3, [r3, #12]
 800a95a:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a95c:	69ba      	ldr	r2, [r7, #24]
 800a95e:	2380      	movs	r3, #128	@ 0x80
 800a960:	025b      	lsls	r3, r3, #9
 800a962:	401a      	ands	r2, r3
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a968:	429a      	cmp	r2, r3
 800a96a:	d10f      	bne.n	800a98c <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800a96c:	69ba      	ldr	r2, [r7, #24]
 800a96e:	23f0      	movs	r3, #240	@ 0xf0
 800a970:	039b      	lsls	r3, r3, #14
 800a972:	401a      	ands	r2, r3
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a978:	429a      	cmp	r2, r3
 800a97a:	d107      	bne.n	800a98c <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800a97c:	69ba      	ldr	r2, [r7, #24]
 800a97e:	23c0      	movs	r3, #192	@ 0xc0
 800a980:	041b      	lsls	r3, r3, #16
 800a982:	401a      	ands	r2, r3
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800a988:	429a      	cmp	r2, r3
 800a98a:	d001      	beq.n	800a990 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 800a98c:	2301      	movs	r3, #1
 800a98e:	e000      	b.n	800a992 <HAL_RCC_OscConfig+0x792>
=======
 800ac1a:	4b11      	ldr	r3, [pc, #68]	@ (800ac60 <HAL_RCC_OscConfig+0x79c>)
 800ac1c:	68db      	ldr	r3, [r3, #12]
 800ac1e:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ac20:	69ba      	ldr	r2, [r7, #24]
 800ac22:	2380      	movs	r3, #128	@ 0x80
 800ac24:	025b      	lsls	r3, r3, #9
 800ac26:	401a      	ands	r2, r3
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac2c:	429a      	cmp	r2, r3
 800ac2e:	d10f      	bne.n	800ac50 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800ac30:	69ba      	ldr	r2, [r7, #24]
 800ac32:	23f0      	movs	r3, #240	@ 0xf0
 800ac34:	039b      	lsls	r3, r3, #14
 800ac36:	401a      	ands	r2, r3
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ac3c:	429a      	cmp	r2, r3
 800ac3e:	d107      	bne.n	800ac50 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800ac40:	69ba      	ldr	r2, [r7, #24]
 800ac42:	23c0      	movs	r3, #192	@ 0xc0
 800ac44:	041b      	lsls	r3, r3, #16
 800ac46:	401a      	ands	r2, r3
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800ac4c:	429a      	cmp	r2, r3
 800ac4e:	d001      	beq.n	800ac54 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 800ac50:	2301      	movs	r3, #1
 800ac52:	e000      	b.n	800ac56 <HAL_RCC_OscConfig+0x792>
>>>>>>> main
        }
      }
    }
  }
  return HAL_OK;
<<<<<<< HEAD
 800a990:	2300      	movs	r3, #0
}
 800a992:	0018      	movs	r0, r3
 800a994:	46bd      	mov	sp, r7
 800a996:	b00a      	add	sp, #40	@ 0x28
 800a998:	bdb0      	pop	{r4, r5, r7, pc}
 800a99a:	46c0      	nop			@ (mov r8, r8)
 800a99c:	40021000 	.word	0x40021000
 800a9a0:	ff02ffff 	.word	0xff02ffff
 800a9a4:	feffffff 	.word	0xfeffffff

0800a9a8 <HAL_RCC_ClockConfig>:
=======
 800ac54:	2300      	movs	r3, #0
}
 800ac56:	0018      	movs	r0, r3
 800ac58:	46bd      	mov	sp, r7
 800ac5a:	b00a      	add	sp, #40	@ 0x28
 800ac5c:	bdb0      	pop	{r4, r5, r7, pc}
 800ac5e:	46c0      	nop			@ (mov r8, r8)
 800ac60:	40021000 	.word	0x40021000
 800ac64:	ff02ffff 	.word	0xff02ffff
 800ac68:	feffffff 	.word	0xfeffffff

0800ac6c <HAL_RCC_ClockConfig>:
>>>>>>> main
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
<<<<<<< HEAD
 800a9a8:	b5b0      	push	{r4, r5, r7, lr}
 800a9aa:	b084      	sub	sp, #16
 800a9ac:	af00      	add	r7, sp, #0
 800a9ae:	6078      	str	r0, [r7, #4]
 800a9b0:	6039      	str	r1, [r7, #0]
=======
 800ac6c:	b5b0      	push	{r4, r5, r7, lr}
 800ac6e:	b084      	sub	sp, #16
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	6078      	str	r0, [r7, #4]
 800ac74:	6039      	str	r1, [r7, #0]
>>>>>>> main
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
<<<<<<< HEAD
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d101      	bne.n	800a9bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a9b8:	2301      	movs	r3, #1
 800a9ba:	e128      	b.n	800ac0e <HAL_RCC_ClockConfig+0x266>
=======
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d101      	bne.n	800ac80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ac7c:	2301      	movs	r3, #1
 800ac7e:	e128      	b.n	800aed2 <HAL_RCC_ClockConfig+0x266>
>>>>>>> main
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
<<<<<<< HEAD
 800a9bc:	4b96      	ldr	r3, [pc, #600]	@ (800ac18 <HAL_RCC_ClockConfig+0x270>)
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	2201      	movs	r2, #1
 800a9c2:	4013      	ands	r3, r2
 800a9c4:	683a      	ldr	r2, [r7, #0]
 800a9c6:	429a      	cmp	r2, r3
 800a9c8:	d91e      	bls.n	800aa08 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a9ca:	4b93      	ldr	r3, [pc, #588]	@ (800ac18 <HAL_RCC_ClockConfig+0x270>)
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	2201      	movs	r2, #1
 800a9d0:	4393      	bics	r3, r2
 800a9d2:	0019      	movs	r1, r3
 800a9d4:	4b90      	ldr	r3, [pc, #576]	@ (800ac18 <HAL_RCC_ClockConfig+0x270>)
 800a9d6:	683a      	ldr	r2, [r7, #0]
 800a9d8:	430a      	orrs	r2, r1
 800a9da:	601a      	str	r2, [r3, #0]
=======
 800ac80:	4b96      	ldr	r3, [pc, #600]	@ (800aedc <HAL_RCC_ClockConfig+0x270>)
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	2201      	movs	r2, #1
 800ac86:	4013      	ands	r3, r2
 800ac88:	683a      	ldr	r2, [r7, #0]
 800ac8a:	429a      	cmp	r2, r3
 800ac8c:	d91e      	bls.n	800accc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ac8e:	4b93      	ldr	r3, [pc, #588]	@ (800aedc <HAL_RCC_ClockConfig+0x270>)
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	2201      	movs	r2, #1
 800ac94:	4393      	bics	r3, r2
 800ac96:	0019      	movs	r1, r3
 800ac98:	4b90      	ldr	r3, [pc, #576]	@ (800aedc <HAL_RCC_ClockConfig+0x270>)
 800ac9a:	683a      	ldr	r2, [r7, #0]
 800ac9c:	430a      	orrs	r2, r1
 800ac9e:	601a      	str	r2, [r3, #0]
>>>>>>> main

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
<<<<<<< HEAD
 800a9dc:	f7fc f952 	bl	8006c84 <HAL_GetTick>
 800a9e0:	0003      	movs	r3, r0
 800a9e2:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a9e4:	e009      	b.n	800a9fa <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a9e6:	f7fc f94d 	bl	8006c84 <HAL_GetTick>
 800a9ea:	0002      	movs	r2, r0
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	1ad3      	subs	r3, r2, r3
 800a9f0:	4a8a      	ldr	r2, [pc, #552]	@ (800ac1c <HAL_RCC_ClockConfig+0x274>)
 800a9f2:	4293      	cmp	r3, r2
 800a9f4:	d901      	bls.n	800a9fa <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800a9f6:	2303      	movs	r3, #3
 800a9f8:	e109      	b.n	800ac0e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a9fa:	4b87      	ldr	r3, [pc, #540]	@ (800ac18 <HAL_RCC_ClockConfig+0x270>)
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	2201      	movs	r2, #1
 800aa00:	4013      	ands	r3, r2
 800aa02:	683a      	ldr	r2, [r7, #0]
 800aa04:	429a      	cmp	r2, r3
 800aa06:	d1ee      	bne.n	800a9e6 <HAL_RCC_ClockConfig+0x3e>
=======
 800aca0:	f7fc f952 	bl	8006f48 <HAL_GetTick>
 800aca4:	0003      	movs	r3, r0
 800aca6:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800aca8:	e009      	b.n	800acbe <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800acaa:	f7fc f94d 	bl	8006f48 <HAL_GetTick>
 800acae:	0002      	movs	r2, r0
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	1ad3      	subs	r3, r2, r3
 800acb4:	4a8a      	ldr	r2, [pc, #552]	@ (800aee0 <HAL_RCC_ClockConfig+0x274>)
 800acb6:	4293      	cmp	r3, r2
 800acb8:	d901      	bls.n	800acbe <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800acba:	2303      	movs	r3, #3
 800acbc:	e109      	b.n	800aed2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800acbe:	4b87      	ldr	r3, [pc, #540]	@ (800aedc <HAL_RCC_ClockConfig+0x270>)
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	2201      	movs	r2, #1
 800acc4:	4013      	ands	r3, r2
 800acc6:	683a      	ldr	r2, [r7, #0]
 800acc8:	429a      	cmp	r2, r3
 800acca:	d1ee      	bne.n	800acaa <HAL_RCC_ClockConfig+0x3e>
>>>>>>> main
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
<<<<<<< HEAD
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	2202      	movs	r2, #2
 800aa0e:	4013      	ands	r3, r2
 800aa10:	d009      	beq.n	800aa26 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800aa12:	4b83      	ldr	r3, [pc, #524]	@ (800ac20 <HAL_RCC_ClockConfig+0x278>)
 800aa14:	68db      	ldr	r3, [r3, #12]
 800aa16:	22f0      	movs	r2, #240	@ 0xf0
 800aa18:	4393      	bics	r3, r2
 800aa1a:	0019      	movs	r1, r3
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	689a      	ldr	r2, [r3, #8]
 800aa20:	4b7f      	ldr	r3, [pc, #508]	@ (800ac20 <HAL_RCC_ClockConfig+0x278>)
 800aa22:	430a      	orrs	r2, r1
 800aa24:	60da      	str	r2, [r3, #12]
=======
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	2202      	movs	r2, #2
 800acd2:	4013      	ands	r3, r2
 800acd4:	d009      	beq.n	800acea <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800acd6:	4b83      	ldr	r3, [pc, #524]	@ (800aee4 <HAL_RCC_ClockConfig+0x278>)
 800acd8:	68db      	ldr	r3, [r3, #12]
 800acda:	22f0      	movs	r2, #240	@ 0xf0
 800acdc:	4393      	bics	r3, r2
 800acde:	0019      	movs	r1, r3
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	689a      	ldr	r2, [r3, #8]
 800ace4:	4b7f      	ldr	r3, [pc, #508]	@ (800aee4 <HAL_RCC_ClockConfig+0x278>)
 800ace6:	430a      	orrs	r2, r1
 800ace8:	60da      	str	r2, [r3, #12]
>>>>>>> main
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
<<<<<<< HEAD
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	2201      	movs	r2, #1
 800aa2c:	4013      	ands	r3, r2
 800aa2e:	d100      	bne.n	800aa32 <HAL_RCC_ClockConfig+0x8a>
 800aa30:	e089      	b.n	800ab46 <HAL_RCC_ClockConfig+0x19e>
=======
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	2201      	movs	r2, #1
 800acf0:	4013      	ands	r3, r2
 800acf2:	d100      	bne.n	800acf6 <HAL_RCC_ClockConfig+0x8a>
 800acf4:	e089      	b.n	800ae0a <HAL_RCC_ClockConfig+0x19e>
>>>>>>> main
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
<<<<<<< HEAD
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	685b      	ldr	r3, [r3, #4]
 800aa36:	2b02      	cmp	r3, #2
 800aa38:	d107      	bne.n	800aa4a <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800aa3a:	4b79      	ldr	r3, [pc, #484]	@ (800ac20 <HAL_RCC_ClockConfig+0x278>)
 800aa3c:	681a      	ldr	r2, [r3, #0]
 800aa3e:	2380      	movs	r3, #128	@ 0x80
 800aa40:	029b      	lsls	r3, r3, #10
 800aa42:	4013      	ands	r3, r2
 800aa44:	d120      	bne.n	800aa88 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800aa46:	2301      	movs	r3, #1
 800aa48:	e0e1      	b.n	800ac0e <HAL_RCC_ClockConfig+0x266>
=======
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	685b      	ldr	r3, [r3, #4]
 800acfa:	2b02      	cmp	r3, #2
 800acfc:	d107      	bne.n	800ad0e <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800acfe:	4b79      	ldr	r3, [pc, #484]	@ (800aee4 <HAL_RCC_ClockConfig+0x278>)
 800ad00:	681a      	ldr	r2, [r3, #0]
 800ad02:	2380      	movs	r3, #128	@ 0x80
 800ad04:	029b      	lsls	r3, r3, #10
 800ad06:	4013      	ands	r3, r2
 800ad08:	d120      	bne.n	800ad4c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800ad0a:	2301      	movs	r3, #1
 800ad0c:	e0e1      	b.n	800aed2 <HAL_RCC_ClockConfig+0x266>
>>>>>>> main
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
<<<<<<< HEAD
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	685b      	ldr	r3, [r3, #4]
 800aa4e:	2b03      	cmp	r3, #3
 800aa50:	d107      	bne.n	800aa62 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800aa52:	4b73      	ldr	r3, [pc, #460]	@ (800ac20 <HAL_RCC_ClockConfig+0x278>)
 800aa54:	681a      	ldr	r2, [r3, #0]
 800aa56:	2380      	movs	r3, #128	@ 0x80
 800aa58:	049b      	lsls	r3, r3, #18
 800aa5a:	4013      	ands	r3, r2
 800aa5c:	d114      	bne.n	800aa88 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800aa5e:	2301      	movs	r3, #1
 800aa60:	e0d5      	b.n	800ac0e <HAL_RCC_ClockConfig+0x266>
=======
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	685b      	ldr	r3, [r3, #4]
 800ad12:	2b03      	cmp	r3, #3
 800ad14:	d107      	bne.n	800ad26 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800ad16:	4b73      	ldr	r3, [pc, #460]	@ (800aee4 <HAL_RCC_ClockConfig+0x278>)
 800ad18:	681a      	ldr	r2, [r3, #0]
 800ad1a:	2380      	movs	r3, #128	@ 0x80
 800ad1c:	049b      	lsls	r3, r3, #18
 800ad1e:	4013      	ands	r3, r2
 800ad20:	d114      	bne.n	800ad4c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800ad22:	2301      	movs	r3, #1
 800ad24:	e0d5      	b.n	800aed2 <HAL_RCC_ClockConfig+0x266>
>>>>>>> main
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
<<<<<<< HEAD
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	685b      	ldr	r3, [r3, #4]
 800aa66:	2b01      	cmp	r3, #1
 800aa68:	d106      	bne.n	800aa78 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800aa6a:	4b6d      	ldr	r3, [pc, #436]	@ (800ac20 <HAL_RCC_ClockConfig+0x278>)
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	2204      	movs	r2, #4
 800aa70:	4013      	ands	r3, r2
 800aa72:	d109      	bne.n	800aa88 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800aa74:	2301      	movs	r3, #1
 800aa76:	e0ca      	b.n	800ac0e <HAL_RCC_ClockConfig+0x266>
=======
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	685b      	ldr	r3, [r3, #4]
 800ad2a:	2b01      	cmp	r3, #1
 800ad2c:	d106      	bne.n	800ad3c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ad2e:	4b6d      	ldr	r3, [pc, #436]	@ (800aee4 <HAL_RCC_ClockConfig+0x278>)
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	2204      	movs	r2, #4
 800ad34:	4013      	ands	r3, r2
 800ad36:	d109      	bne.n	800ad4c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800ad38:	2301      	movs	r3, #1
 800ad3a:	e0ca      	b.n	800aed2 <HAL_RCC_ClockConfig+0x266>
>>>>>>> main
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
<<<<<<< HEAD
 800aa78:	4b69      	ldr	r3, [pc, #420]	@ (800ac20 <HAL_RCC_ClockConfig+0x278>)
 800aa7a:	681a      	ldr	r2, [r3, #0]
 800aa7c:	2380      	movs	r3, #128	@ 0x80
 800aa7e:	009b      	lsls	r3, r3, #2
 800aa80:	4013      	ands	r3, r2
 800aa82:	d101      	bne.n	800aa88 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800aa84:	2301      	movs	r3, #1
 800aa86:	e0c2      	b.n	800ac0e <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800aa88:	4b65      	ldr	r3, [pc, #404]	@ (800ac20 <HAL_RCC_ClockConfig+0x278>)
 800aa8a:	68db      	ldr	r3, [r3, #12]
 800aa8c:	2203      	movs	r2, #3
 800aa8e:	4393      	bics	r3, r2
 800aa90:	0019      	movs	r1, r3
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	685a      	ldr	r2, [r3, #4]
 800aa96:	4b62      	ldr	r3, [pc, #392]	@ (800ac20 <HAL_RCC_ClockConfig+0x278>)
 800aa98:	430a      	orrs	r2, r1
 800aa9a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800aa9c:	f7fc f8f2 	bl	8006c84 <HAL_GetTick>
 800aaa0:	0003      	movs	r3, r0
 800aaa2:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	685b      	ldr	r3, [r3, #4]
 800aaa8:	2b02      	cmp	r3, #2
 800aaaa:	d111      	bne.n	800aad0 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800aaac:	e009      	b.n	800aac2 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800aaae:	f7fc f8e9 	bl	8006c84 <HAL_GetTick>
 800aab2:	0002      	movs	r2, r0
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	1ad3      	subs	r3, r2, r3
 800aab8:	4a58      	ldr	r2, [pc, #352]	@ (800ac1c <HAL_RCC_ClockConfig+0x274>)
 800aaba:	4293      	cmp	r3, r2
 800aabc:	d901      	bls.n	800aac2 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800aabe:	2303      	movs	r3, #3
 800aac0:	e0a5      	b.n	800ac0e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800aac2:	4b57      	ldr	r3, [pc, #348]	@ (800ac20 <HAL_RCC_ClockConfig+0x278>)
 800aac4:	68db      	ldr	r3, [r3, #12]
 800aac6:	220c      	movs	r2, #12
 800aac8:	4013      	ands	r3, r2
 800aaca:	2b08      	cmp	r3, #8
 800aacc:	d1ef      	bne.n	800aaae <HAL_RCC_ClockConfig+0x106>
 800aace:	e03a      	b.n	800ab46 <HAL_RCC_ClockConfig+0x19e>
=======
 800ad3c:	4b69      	ldr	r3, [pc, #420]	@ (800aee4 <HAL_RCC_ClockConfig+0x278>)
 800ad3e:	681a      	ldr	r2, [r3, #0]
 800ad40:	2380      	movs	r3, #128	@ 0x80
 800ad42:	009b      	lsls	r3, r3, #2
 800ad44:	4013      	ands	r3, r2
 800ad46:	d101      	bne.n	800ad4c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800ad48:	2301      	movs	r3, #1
 800ad4a:	e0c2      	b.n	800aed2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800ad4c:	4b65      	ldr	r3, [pc, #404]	@ (800aee4 <HAL_RCC_ClockConfig+0x278>)
 800ad4e:	68db      	ldr	r3, [r3, #12]
 800ad50:	2203      	movs	r2, #3
 800ad52:	4393      	bics	r3, r2
 800ad54:	0019      	movs	r1, r3
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	685a      	ldr	r2, [r3, #4]
 800ad5a:	4b62      	ldr	r3, [pc, #392]	@ (800aee4 <HAL_RCC_ClockConfig+0x278>)
 800ad5c:	430a      	orrs	r2, r1
 800ad5e:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800ad60:	f7fc f8f2 	bl	8006f48 <HAL_GetTick>
 800ad64:	0003      	movs	r3, r0
 800ad66:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	685b      	ldr	r3, [r3, #4]
 800ad6c:	2b02      	cmp	r3, #2
 800ad6e:	d111      	bne.n	800ad94 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800ad70:	e009      	b.n	800ad86 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ad72:	f7fc f8e9 	bl	8006f48 <HAL_GetTick>
 800ad76:	0002      	movs	r2, r0
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	1ad3      	subs	r3, r2, r3
 800ad7c:	4a58      	ldr	r2, [pc, #352]	@ (800aee0 <HAL_RCC_ClockConfig+0x274>)
 800ad7e:	4293      	cmp	r3, r2
 800ad80:	d901      	bls.n	800ad86 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800ad82:	2303      	movs	r3, #3
 800ad84:	e0a5      	b.n	800aed2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800ad86:	4b57      	ldr	r3, [pc, #348]	@ (800aee4 <HAL_RCC_ClockConfig+0x278>)
 800ad88:	68db      	ldr	r3, [r3, #12]
 800ad8a:	220c      	movs	r2, #12
 800ad8c:	4013      	ands	r3, r2
 800ad8e:	2b08      	cmp	r3, #8
 800ad90:	d1ef      	bne.n	800ad72 <HAL_RCC_ClockConfig+0x106>
 800ad92:	e03a      	b.n	800ae0a <HAL_RCC_ClockConfig+0x19e>
>>>>>>> main
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
<<<<<<< HEAD
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	685b      	ldr	r3, [r3, #4]
 800aad4:	2b03      	cmp	r3, #3
 800aad6:	d111      	bne.n	800aafc <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800aad8:	e009      	b.n	800aaee <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800aada:	f7fc f8d3 	bl	8006c84 <HAL_GetTick>
 800aade:	0002      	movs	r2, r0
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	1ad3      	subs	r3, r2, r3
 800aae4:	4a4d      	ldr	r2, [pc, #308]	@ (800ac1c <HAL_RCC_ClockConfig+0x274>)
 800aae6:	4293      	cmp	r3, r2
 800aae8:	d901      	bls.n	800aaee <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800aaea:	2303      	movs	r3, #3
 800aaec:	e08f      	b.n	800ac0e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800aaee:	4b4c      	ldr	r3, [pc, #304]	@ (800ac20 <HAL_RCC_ClockConfig+0x278>)
 800aaf0:	68db      	ldr	r3, [r3, #12]
 800aaf2:	220c      	movs	r2, #12
 800aaf4:	4013      	ands	r3, r2
 800aaf6:	2b0c      	cmp	r3, #12
 800aaf8:	d1ef      	bne.n	800aada <HAL_RCC_ClockConfig+0x132>
 800aafa:	e024      	b.n	800ab46 <HAL_RCC_ClockConfig+0x19e>
=======
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	685b      	ldr	r3, [r3, #4]
 800ad98:	2b03      	cmp	r3, #3
 800ad9a:	d111      	bne.n	800adc0 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800ad9c:	e009      	b.n	800adb2 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ad9e:	f7fc f8d3 	bl	8006f48 <HAL_GetTick>
 800ada2:	0002      	movs	r2, r0
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	1ad3      	subs	r3, r2, r3
 800ada8:	4a4d      	ldr	r2, [pc, #308]	@ (800aee0 <HAL_RCC_ClockConfig+0x274>)
 800adaa:	4293      	cmp	r3, r2
 800adac:	d901      	bls.n	800adb2 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800adae:	2303      	movs	r3, #3
 800adb0:	e08f      	b.n	800aed2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800adb2:	4b4c      	ldr	r3, [pc, #304]	@ (800aee4 <HAL_RCC_ClockConfig+0x278>)
 800adb4:	68db      	ldr	r3, [r3, #12]
 800adb6:	220c      	movs	r2, #12
 800adb8:	4013      	ands	r3, r2
 800adba:	2b0c      	cmp	r3, #12
 800adbc:	d1ef      	bne.n	800ad9e <HAL_RCC_ClockConfig+0x132>
 800adbe:	e024      	b.n	800ae0a <HAL_RCC_ClockConfig+0x19e>
>>>>>>> main
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
<<<<<<< HEAD
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	685b      	ldr	r3, [r3, #4]
 800ab00:	2b01      	cmp	r3, #1
 800ab02:	d11b      	bne.n	800ab3c <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800ab04:	e009      	b.n	800ab1a <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ab06:	f7fc f8bd 	bl	8006c84 <HAL_GetTick>
 800ab0a:	0002      	movs	r2, r0
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	1ad3      	subs	r3, r2, r3
 800ab10:	4a42      	ldr	r2, [pc, #264]	@ (800ac1c <HAL_RCC_ClockConfig+0x274>)
 800ab12:	4293      	cmp	r3, r2
 800ab14:	d901      	bls.n	800ab1a <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800ab16:	2303      	movs	r3, #3
 800ab18:	e079      	b.n	800ac0e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800ab1a:	4b41      	ldr	r3, [pc, #260]	@ (800ac20 <HAL_RCC_ClockConfig+0x278>)
 800ab1c:	68db      	ldr	r3, [r3, #12]
 800ab1e:	220c      	movs	r2, #12
 800ab20:	4013      	ands	r3, r2
 800ab22:	2b04      	cmp	r3, #4
 800ab24:	d1ef      	bne.n	800ab06 <HAL_RCC_ClockConfig+0x15e>
 800ab26:	e00e      	b.n	800ab46 <HAL_RCC_ClockConfig+0x19e>
=======
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	685b      	ldr	r3, [r3, #4]
 800adc4:	2b01      	cmp	r3, #1
 800adc6:	d11b      	bne.n	800ae00 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800adc8:	e009      	b.n	800adde <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800adca:	f7fc f8bd 	bl	8006f48 <HAL_GetTick>
 800adce:	0002      	movs	r2, r0
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	1ad3      	subs	r3, r2, r3
 800add4:	4a42      	ldr	r2, [pc, #264]	@ (800aee0 <HAL_RCC_ClockConfig+0x274>)
 800add6:	4293      	cmp	r3, r2
 800add8:	d901      	bls.n	800adde <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800adda:	2303      	movs	r3, #3
 800addc:	e079      	b.n	800aed2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800adde:	4b41      	ldr	r3, [pc, #260]	@ (800aee4 <HAL_RCC_ClockConfig+0x278>)
 800ade0:	68db      	ldr	r3, [r3, #12]
 800ade2:	220c      	movs	r2, #12
 800ade4:	4013      	ands	r3, r2
 800ade6:	2b04      	cmp	r3, #4
 800ade8:	d1ef      	bne.n	800adca <HAL_RCC_ClockConfig+0x15e>
 800adea:	e00e      	b.n	800ae0a <HAL_RCC_ClockConfig+0x19e>
>>>>>>> main
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
<<<<<<< HEAD
 800ab28:	f7fc f8ac 	bl	8006c84 <HAL_GetTick>
 800ab2c:	0002      	movs	r2, r0
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	1ad3      	subs	r3, r2, r3
 800ab32:	4a3a      	ldr	r2, [pc, #232]	@ (800ac1c <HAL_RCC_ClockConfig+0x274>)
 800ab34:	4293      	cmp	r3, r2
 800ab36:	d901      	bls.n	800ab3c <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 800ab38:	2303      	movs	r3, #3
 800ab3a:	e068      	b.n	800ac0e <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800ab3c:	4b38      	ldr	r3, [pc, #224]	@ (800ac20 <HAL_RCC_ClockConfig+0x278>)
 800ab3e:	68db      	ldr	r3, [r3, #12]
 800ab40:	220c      	movs	r2, #12
 800ab42:	4013      	ands	r3, r2
 800ab44:	d1f0      	bne.n	800ab28 <HAL_RCC_ClockConfig+0x180>
=======
 800adec:	f7fc f8ac 	bl	8006f48 <HAL_GetTick>
 800adf0:	0002      	movs	r2, r0
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	1ad3      	subs	r3, r2, r3
 800adf6:	4a3a      	ldr	r2, [pc, #232]	@ (800aee0 <HAL_RCC_ClockConfig+0x274>)
 800adf8:	4293      	cmp	r3, r2
 800adfa:	d901      	bls.n	800ae00 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 800adfc:	2303      	movs	r3, #3
 800adfe:	e068      	b.n	800aed2 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800ae00:	4b38      	ldr	r3, [pc, #224]	@ (800aee4 <HAL_RCC_ClockConfig+0x278>)
 800ae02:	68db      	ldr	r3, [r3, #12]
 800ae04:	220c      	movs	r2, #12
 800ae06:	4013      	ands	r3, r2
 800ae08:	d1f0      	bne.n	800adec <HAL_RCC_ClockConfig+0x180>
>>>>>>> main
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
<<<<<<< HEAD
 800ab46:	4b34      	ldr	r3, [pc, #208]	@ (800ac18 <HAL_RCC_ClockConfig+0x270>)
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	2201      	movs	r2, #1
 800ab4c:	4013      	ands	r3, r2
 800ab4e:	683a      	ldr	r2, [r7, #0]
 800ab50:	429a      	cmp	r2, r3
 800ab52:	d21e      	bcs.n	800ab92 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ab54:	4b30      	ldr	r3, [pc, #192]	@ (800ac18 <HAL_RCC_ClockConfig+0x270>)
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	2201      	movs	r2, #1
 800ab5a:	4393      	bics	r3, r2
 800ab5c:	0019      	movs	r1, r3
 800ab5e:	4b2e      	ldr	r3, [pc, #184]	@ (800ac18 <HAL_RCC_ClockConfig+0x270>)
 800ab60:	683a      	ldr	r2, [r7, #0]
 800ab62:	430a      	orrs	r2, r1
 800ab64:	601a      	str	r2, [r3, #0]
=======
 800ae0a:	4b34      	ldr	r3, [pc, #208]	@ (800aedc <HAL_RCC_ClockConfig+0x270>)
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	2201      	movs	r2, #1
 800ae10:	4013      	ands	r3, r2
 800ae12:	683a      	ldr	r2, [r7, #0]
 800ae14:	429a      	cmp	r2, r3
 800ae16:	d21e      	bcs.n	800ae56 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ae18:	4b30      	ldr	r3, [pc, #192]	@ (800aedc <HAL_RCC_ClockConfig+0x270>)
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	2201      	movs	r2, #1
 800ae1e:	4393      	bics	r3, r2
 800ae20:	0019      	movs	r1, r3
 800ae22:	4b2e      	ldr	r3, [pc, #184]	@ (800aedc <HAL_RCC_ClockConfig+0x270>)
 800ae24:	683a      	ldr	r2, [r7, #0]
 800ae26:	430a      	orrs	r2, r1
 800ae28:	601a      	str	r2, [r3, #0]
>>>>>>> main

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
<<<<<<< HEAD
 800ab66:	f7fc f88d 	bl	8006c84 <HAL_GetTick>
 800ab6a:	0003      	movs	r3, r0
 800ab6c:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ab6e:	e009      	b.n	800ab84 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ab70:	f7fc f888 	bl	8006c84 <HAL_GetTick>
 800ab74:	0002      	movs	r2, r0
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	1ad3      	subs	r3, r2, r3
 800ab7a:	4a28      	ldr	r2, [pc, #160]	@ (800ac1c <HAL_RCC_ClockConfig+0x274>)
 800ab7c:	4293      	cmp	r3, r2
 800ab7e:	d901      	bls.n	800ab84 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 800ab80:	2303      	movs	r3, #3
 800ab82:	e044      	b.n	800ac0e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ab84:	4b24      	ldr	r3, [pc, #144]	@ (800ac18 <HAL_RCC_ClockConfig+0x270>)
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	2201      	movs	r2, #1
 800ab8a:	4013      	ands	r3, r2
 800ab8c:	683a      	ldr	r2, [r7, #0]
 800ab8e:	429a      	cmp	r2, r3
 800ab90:	d1ee      	bne.n	800ab70 <HAL_RCC_ClockConfig+0x1c8>
=======
 800ae2a:	f7fc f88d 	bl	8006f48 <HAL_GetTick>
 800ae2e:	0003      	movs	r3, r0
 800ae30:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ae32:	e009      	b.n	800ae48 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ae34:	f7fc f888 	bl	8006f48 <HAL_GetTick>
 800ae38:	0002      	movs	r2, r0
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	1ad3      	subs	r3, r2, r3
 800ae3e:	4a28      	ldr	r2, [pc, #160]	@ (800aee0 <HAL_RCC_ClockConfig+0x274>)
 800ae40:	4293      	cmp	r3, r2
 800ae42:	d901      	bls.n	800ae48 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 800ae44:	2303      	movs	r3, #3
 800ae46:	e044      	b.n	800aed2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ae48:	4b24      	ldr	r3, [pc, #144]	@ (800aedc <HAL_RCC_ClockConfig+0x270>)
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	2201      	movs	r2, #1
 800ae4e:	4013      	ands	r3, r2
 800ae50:	683a      	ldr	r2, [r7, #0]
 800ae52:	429a      	cmp	r2, r3
 800ae54:	d1ee      	bne.n	800ae34 <HAL_RCC_ClockConfig+0x1c8>
>>>>>>> main
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
<<<<<<< HEAD
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	2204      	movs	r2, #4
 800ab98:	4013      	ands	r3, r2
 800ab9a:	d009      	beq.n	800abb0 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800ab9c:	4b20      	ldr	r3, [pc, #128]	@ (800ac20 <HAL_RCC_ClockConfig+0x278>)
 800ab9e:	68db      	ldr	r3, [r3, #12]
 800aba0:	4a20      	ldr	r2, [pc, #128]	@ (800ac24 <HAL_RCC_ClockConfig+0x27c>)
 800aba2:	4013      	ands	r3, r2
 800aba4:	0019      	movs	r1, r3
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	68da      	ldr	r2, [r3, #12]
 800abaa:	4b1d      	ldr	r3, [pc, #116]	@ (800ac20 <HAL_RCC_ClockConfig+0x278>)
 800abac:	430a      	orrs	r2, r1
 800abae:	60da      	str	r2, [r3, #12]
=======
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	2204      	movs	r2, #4
 800ae5c:	4013      	ands	r3, r2
 800ae5e:	d009      	beq.n	800ae74 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800ae60:	4b20      	ldr	r3, [pc, #128]	@ (800aee4 <HAL_RCC_ClockConfig+0x278>)
 800ae62:	68db      	ldr	r3, [r3, #12]
 800ae64:	4a20      	ldr	r2, [pc, #128]	@ (800aee8 <HAL_RCC_ClockConfig+0x27c>)
 800ae66:	4013      	ands	r3, r2
 800ae68:	0019      	movs	r1, r3
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	68da      	ldr	r2, [r3, #12]
 800ae6e:	4b1d      	ldr	r3, [pc, #116]	@ (800aee4 <HAL_RCC_ClockConfig+0x278>)
 800ae70:	430a      	orrs	r2, r1
 800ae72:	60da      	str	r2, [r3, #12]
>>>>>>> main
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
<<<<<<< HEAD
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	2208      	movs	r2, #8
 800abb6:	4013      	ands	r3, r2
 800abb8:	d00a      	beq.n	800abd0 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800abba:	4b19      	ldr	r3, [pc, #100]	@ (800ac20 <HAL_RCC_ClockConfig+0x278>)
 800abbc:	68db      	ldr	r3, [r3, #12]
 800abbe:	4a1a      	ldr	r2, [pc, #104]	@ (800ac28 <HAL_RCC_ClockConfig+0x280>)
 800abc0:	4013      	ands	r3, r2
 800abc2:	0019      	movs	r1, r3
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	691b      	ldr	r3, [r3, #16]
 800abc8:	00da      	lsls	r2, r3, #3
 800abca:	4b15      	ldr	r3, [pc, #84]	@ (800ac20 <HAL_RCC_ClockConfig+0x278>)
 800abcc:	430a      	orrs	r2, r1
 800abce:	60da      	str	r2, [r3, #12]
=======
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	2208      	movs	r2, #8
 800ae7a:	4013      	ands	r3, r2
 800ae7c:	d00a      	beq.n	800ae94 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800ae7e:	4b19      	ldr	r3, [pc, #100]	@ (800aee4 <HAL_RCC_ClockConfig+0x278>)
 800ae80:	68db      	ldr	r3, [r3, #12]
 800ae82:	4a1a      	ldr	r2, [pc, #104]	@ (800aeec <HAL_RCC_ClockConfig+0x280>)
 800ae84:	4013      	ands	r3, r2
 800ae86:	0019      	movs	r1, r3
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	691b      	ldr	r3, [r3, #16]
 800ae8c:	00da      	lsls	r2, r3, #3
 800ae8e:	4b15      	ldr	r3, [pc, #84]	@ (800aee4 <HAL_RCC_ClockConfig+0x278>)
 800ae90:	430a      	orrs	r2, r1
 800ae92:	60da      	str	r2, [r3, #12]
>>>>>>> main
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
<<<<<<< HEAD
 800abd0:	f000 f832 	bl	800ac38 <HAL_RCC_GetSysClockFreq>
 800abd4:	0001      	movs	r1, r0
 800abd6:	4b12      	ldr	r3, [pc, #72]	@ (800ac20 <HAL_RCC_ClockConfig+0x278>)
 800abd8:	68db      	ldr	r3, [r3, #12]
 800abda:	091b      	lsrs	r3, r3, #4
 800abdc:	220f      	movs	r2, #15
 800abde:	4013      	ands	r3, r2
 800abe0:	4a12      	ldr	r2, [pc, #72]	@ (800ac2c <HAL_RCC_ClockConfig+0x284>)
 800abe2:	5cd3      	ldrb	r3, [r2, r3]
 800abe4:	000a      	movs	r2, r1
 800abe6:	40da      	lsrs	r2, r3
 800abe8:	4b11      	ldr	r3, [pc, #68]	@ (800ac30 <HAL_RCC_ClockConfig+0x288>)
 800abea:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800abec:	4b11      	ldr	r3, [pc, #68]	@ (800ac34 <HAL_RCC_ClockConfig+0x28c>)
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	250b      	movs	r5, #11
 800abf2:	197c      	adds	r4, r7, r5
 800abf4:	0018      	movs	r0, r3
 800abf6:	f7fb ffff 	bl	8006bf8 <HAL_InitTick>
 800abfa:	0003      	movs	r3, r0
 800abfc:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800abfe:	197b      	adds	r3, r7, r5
 800ac00:	781b      	ldrb	r3, [r3, #0]
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d002      	beq.n	800ac0c <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 800ac06:	197b      	adds	r3, r7, r5
 800ac08:	781b      	ldrb	r3, [r3, #0]
 800ac0a:	e000      	b.n	800ac0e <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 800ac0c:	2300      	movs	r3, #0
}
 800ac0e:	0018      	movs	r0, r3
 800ac10:	46bd      	mov	sp, r7
 800ac12:	b004      	add	sp, #16
 800ac14:	bdb0      	pop	{r4, r5, r7, pc}
 800ac16:	46c0      	nop			@ (mov r8, r8)
 800ac18:	40022000 	.word	0x40022000
 800ac1c:	00001388 	.word	0x00001388
 800ac20:	40021000 	.word	0x40021000
 800ac24:	fffff8ff 	.word	0xfffff8ff
 800ac28:	ffffc7ff 	.word	0xffffc7ff
 800ac2c:	08010578 	.word	0x08010578
 800ac30:	2000002c 	.word	0x2000002c
 800ac34:	20000040 	.word	0x20000040

0800ac38 <HAL_RCC_GetSysClockFreq>:
=======
 800ae94:	f000 f832 	bl	800aefc <HAL_RCC_GetSysClockFreq>
 800ae98:	0001      	movs	r1, r0
 800ae9a:	4b12      	ldr	r3, [pc, #72]	@ (800aee4 <HAL_RCC_ClockConfig+0x278>)
 800ae9c:	68db      	ldr	r3, [r3, #12]
 800ae9e:	091b      	lsrs	r3, r3, #4
 800aea0:	220f      	movs	r2, #15
 800aea2:	4013      	ands	r3, r2
 800aea4:	4a12      	ldr	r2, [pc, #72]	@ (800aef0 <HAL_RCC_ClockConfig+0x284>)
 800aea6:	5cd3      	ldrb	r3, [r2, r3]
 800aea8:	000a      	movs	r2, r1
 800aeaa:	40da      	lsrs	r2, r3
 800aeac:	4b11      	ldr	r3, [pc, #68]	@ (800aef4 <HAL_RCC_ClockConfig+0x288>)
 800aeae:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800aeb0:	4b11      	ldr	r3, [pc, #68]	@ (800aef8 <HAL_RCC_ClockConfig+0x28c>)
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	250b      	movs	r5, #11
 800aeb6:	197c      	adds	r4, r7, r5
 800aeb8:	0018      	movs	r0, r3
 800aeba:	f7fb ffff 	bl	8006ebc <HAL_InitTick>
 800aebe:	0003      	movs	r3, r0
 800aec0:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800aec2:	197b      	adds	r3, r7, r5
 800aec4:	781b      	ldrb	r3, [r3, #0]
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d002      	beq.n	800aed0 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 800aeca:	197b      	adds	r3, r7, r5
 800aecc:	781b      	ldrb	r3, [r3, #0]
 800aece:	e000      	b.n	800aed2 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 800aed0:	2300      	movs	r3, #0
}
 800aed2:	0018      	movs	r0, r3
 800aed4:	46bd      	mov	sp, r7
 800aed6:	b004      	add	sp, #16
 800aed8:	bdb0      	pop	{r4, r5, r7, pc}
 800aeda:	46c0      	nop			@ (mov r8, r8)
 800aedc:	40022000 	.word	0x40022000
 800aee0:	00001388 	.word	0x00001388
 800aee4:	40021000 	.word	0x40021000
 800aee8:	fffff8ff 	.word	0xfffff8ff
 800aeec:	ffffc7ff 	.word	0xffffc7ff
 800aef0:	080106d4 	.word	0x080106d4
 800aef4:	20000038 	.word	0x20000038
 800aef8:	2000004c 	.word	0x2000004c

0800aefc <HAL_RCC_GetSysClockFreq>:
>>>>>>> main
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
<<<<<<< HEAD
 800ac38:	b5b0      	push	{r4, r5, r7, lr}
 800ac3a:	b08e      	sub	sp, #56	@ 0x38
 800ac3c:	af00      	add	r7, sp, #0
=======
 800aefc:	b5b0      	push	{r4, r5, r7, lr}
 800aefe:	b08e      	sub	sp, #56	@ 0x38
 800af00:	af00      	add	r7, sp, #0
>>>>>>> main
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
<<<<<<< HEAD
 800ac3e:	4b4c      	ldr	r3, [pc, #304]	@ (800ad70 <HAL_RCC_GetSysClockFreq+0x138>)
 800ac40:	68db      	ldr	r3, [r3, #12]
 800ac42:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800ac44:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ac46:	230c      	movs	r3, #12
 800ac48:	4013      	ands	r3, r2
 800ac4a:	2b0c      	cmp	r3, #12
 800ac4c:	d014      	beq.n	800ac78 <HAL_RCC_GetSysClockFreq+0x40>
 800ac4e:	d900      	bls.n	800ac52 <HAL_RCC_GetSysClockFreq+0x1a>
 800ac50:	e07b      	b.n	800ad4a <HAL_RCC_GetSysClockFreq+0x112>
 800ac52:	2b04      	cmp	r3, #4
 800ac54:	d002      	beq.n	800ac5c <HAL_RCC_GetSysClockFreq+0x24>
 800ac56:	2b08      	cmp	r3, #8
 800ac58:	d00b      	beq.n	800ac72 <HAL_RCC_GetSysClockFreq+0x3a>
 800ac5a:	e076      	b.n	800ad4a <HAL_RCC_GetSysClockFreq+0x112>
=======
 800af02:	4b4c      	ldr	r3, [pc, #304]	@ (800b034 <HAL_RCC_GetSysClockFreq+0x138>)
 800af04:	68db      	ldr	r3, [r3, #12]
 800af06:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800af08:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800af0a:	230c      	movs	r3, #12
 800af0c:	4013      	ands	r3, r2
 800af0e:	2b0c      	cmp	r3, #12
 800af10:	d014      	beq.n	800af3c <HAL_RCC_GetSysClockFreq+0x40>
 800af12:	d900      	bls.n	800af16 <HAL_RCC_GetSysClockFreq+0x1a>
 800af14:	e07b      	b.n	800b00e <HAL_RCC_GetSysClockFreq+0x112>
 800af16:	2b04      	cmp	r3, #4
 800af18:	d002      	beq.n	800af20 <HAL_RCC_GetSysClockFreq+0x24>
 800af1a:	2b08      	cmp	r3, #8
 800af1c:	d00b      	beq.n	800af36 <HAL_RCC_GetSysClockFreq+0x3a>
 800af1e:	e076      	b.n	800b00e <HAL_RCC_GetSysClockFreq+0x112>
>>>>>>> main
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
<<<<<<< HEAD
 800ac5c:	4b44      	ldr	r3, [pc, #272]	@ (800ad70 <HAL_RCC_GetSysClockFreq+0x138>)
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	2210      	movs	r2, #16
 800ac62:	4013      	ands	r3, r2
 800ac64:	d002      	beq.n	800ac6c <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800ac66:	4b43      	ldr	r3, [pc, #268]	@ (800ad74 <HAL_RCC_GetSysClockFreq+0x13c>)
 800ac68:	633b      	str	r3, [r7, #48]	@ 0x30
=======
 800af20:	4b44      	ldr	r3, [pc, #272]	@ (800b034 <HAL_RCC_GetSysClockFreq+0x138>)
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	2210      	movs	r2, #16
 800af26:	4013      	ands	r3, r2
 800af28:	d002      	beq.n	800af30 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800af2a:	4b43      	ldr	r3, [pc, #268]	@ (800b038 <HAL_RCC_GetSysClockFreq+0x13c>)
 800af2c:	633b      	str	r3, [r7, #48]	@ 0x30
>>>>>>> main
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
<<<<<<< HEAD
 800ac6a:	e07c      	b.n	800ad66 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 800ac6c:	4b42      	ldr	r3, [pc, #264]	@ (800ad78 <HAL_RCC_GetSysClockFreq+0x140>)
 800ac6e:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800ac70:	e079      	b.n	800ad66 <HAL_RCC_GetSysClockFreq+0x12e>
=======
 800af2e:	e07c      	b.n	800b02a <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 800af30:	4b42      	ldr	r3, [pc, #264]	@ (800b03c <HAL_RCC_GetSysClockFreq+0x140>)
 800af32:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800af34:	e079      	b.n	800b02a <HAL_RCC_GetSysClockFreq+0x12e>
>>>>>>> main
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
<<<<<<< HEAD
 800ac72:	4b42      	ldr	r3, [pc, #264]	@ (800ad7c <HAL_RCC_GetSysClockFreq+0x144>)
 800ac74:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800ac76:	e076      	b.n	800ad66 <HAL_RCC_GetSysClockFreq+0x12e>
=======
 800af36:	4b42      	ldr	r3, [pc, #264]	@ (800b040 <HAL_RCC_GetSysClockFreq+0x144>)
 800af38:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800af3a:	e076      	b.n	800b02a <HAL_RCC_GetSysClockFreq+0x12e>
>>>>>>> main
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
<<<<<<< HEAD
 800ac78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac7a:	0c9a      	lsrs	r2, r3, #18
 800ac7c:	230f      	movs	r3, #15
 800ac7e:	401a      	ands	r2, r3
 800ac80:	4b3f      	ldr	r3, [pc, #252]	@ (800ad80 <HAL_RCC_GetSysClockFreq+0x148>)
 800ac82:	5c9b      	ldrb	r3, [r3, r2]
 800ac84:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800ac86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac88:	0d9a      	lsrs	r2, r3, #22
 800ac8a:	2303      	movs	r3, #3
 800ac8c:	4013      	ands	r3, r2
 800ac8e:	3301      	adds	r3, #1
 800ac90:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800ac92:	4b37      	ldr	r3, [pc, #220]	@ (800ad70 <HAL_RCC_GetSysClockFreq+0x138>)
 800ac94:	68da      	ldr	r2, [r3, #12]
 800ac96:	2380      	movs	r3, #128	@ 0x80
 800ac98:	025b      	lsls	r3, r3, #9
 800ac9a:	4013      	ands	r3, r2
 800ac9c:	d01a      	beq.n	800acd4 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800ac9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aca0:	61bb      	str	r3, [r7, #24]
 800aca2:	2300      	movs	r3, #0
 800aca4:	61fb      	str	r3, [r7, #28]
 800aca6:	4a35      	ldr	r2, [pc, #212]	@ (800ad7c <HAL_RCC_GetSysClockFreq+0x144>)
 800aca8:	2300      	movs	r3, #0
 800acaa:	69b8      	ldr	r0, [r7, #24]
 800acac:	69f9      	ldr	r1, [r7, #28]
 800acae:	f7f5 fc55 	bl	800055c <__aeabi_lmul>
 800acb2:	0002      	movs	r2, r0
 800acb4:	000b      	movs	r3, r1
 800acb6:	0010      	movs	r0, r2
 800acb8:	0019      	movs	r1, r3
 800acba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acbc:	613b      	str	r3, [r7, #16]
 800acbe:	2300      	movs	r3, #0
 800acc0:	617b      	str	r3, [r7, #20]
 800acc2:	693a      	ldr	r2, [r7, #16]
 800acc4:	697b      	ldr	r3, [r7, #20]
 800acc6:	f7f5 fc29 	bl	800051c <__aeabi_uldivmod>
 800acca:	0002      	movs	r2, r0
 800accc:	000b      	movs	r3, r1
 800acce:	0013      	movs	r3, r2
 800acd0:	637b      	str	r3, [r7, #52]	@ 0x34
 800acd2:	e037      	b.n	800ad44 <HAL_RCC_GetSysClockFreq+0x10c>
=======
 800af3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af3e:	0c9a      	lsrs	r2, r3, #18
 800af40:	230f      	movs	r3, #15
 800af42:	401a      	ands	r2, r3
 800af44:	4b3f      	ldr	r3, [pc, #252]	@ (800b044 <HAL_RCC_GetSysClockFreq+0x148>)
 800af46:	5c9b      	ldrb	r3, [r3, r2]
 800af48:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800af4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af4c:	0d9a      	lsrs	r2, r3, #22
 800af4e:	2303      	movs	r3, #3
 800af50:	4013      	ands	r3, r2
 800af52:	3301      	adds	r3, #1
 800af54:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800af56:	4b37      	ldr	r3, [pc, #220]	@ (800b034 <HAL_RCC_GetSysClockFreq+0x138>)
 800af58:	68da      	ldr	r2, [r3, #12]
 800af5a:	2380      	movs	r3, #128	@ 0x80
 800af5c:	025b      	lsls	r3, r3, #9
 800af5e:	4013      	ands	r3, r2
 800af60:	d01a      	beq.n	800af98 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800af62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af64:	61bb      	str	r3, [r7, #24]
 800af66:	2300      	movs	r3, #0
 800af68:	61fb      	str	r3, [r7, #28]
 800af6a:	4a35      	ldr	r2, [pc, #212]	@ (800b040 <HAL_RCC_GetSysClockFreq+0x144>)
 800af6c:	2300      	movs	r3, #0
 800af6e:	69b8      	ldr	r0, [r7, #24]
 800af70:	69f9      	ldr	r1, [r7, #28]
 800af72:	f7f5 faf3 	bl	800055c <__aeabi_lmul>
 800af76:	0002      	movs	r2, r0
 800af78:	000b      	movs	r3, r1
 800af7a:	0010      	movs	r0, r2
 800af7c:	0019      	movs	r1, r3
 800af7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af80:	613b      	str	r3, [r7, #16]
 800af82:	2300      	movs	r3, #0
 800af84:	617b      	str	r3, [r7, #20]
 800af86:	693a      	ldr	r2, [r7, #16]
 800af88:	697b      	ldr	r3, [r7, #20]
 800af8a:	f7f5 fac7 	bl	800051c <__aeabi_uldivmod>
 800af8e:	0002      	movs	r2, r0
 800af90:	000b      	movs	r3, r1
 800af92:	0013      	movs	r3, r2
 800af94:	637b      	str	r3, [r7, #52]	@ 0x34
 800af96:	e037      	b.n	800b008 <HAL_RCC_GetSysClockFreq+0x10c>
>>>>>>> main
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
<<<<<<< HEAD
 800acd4:	4b26      	ldr	r3, [pc, #152]	@ (800ad70 <HAL_RCC_GetSysClockFreq+0x138>)
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	2210      	movs	r2, #16
 800acda:	4013      	ands	r3, r2
 800acdc:	d01a      	beq.n	800ad14 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800acde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ace0:	60bb      	str	r3, [r7, #8]
 800ace2:	2300      	movs	r3, #0
 800ace4:	60fb      	str	r3, [r7, #12]
 800ace6:	4a23      	ldr	r2, [pc, #140]	@ (800ad74 <HAL_RCC_GetSysClockFreq+0x13c>)
 800ace8:	2300      	movs	r3, #0
 800acea:	68b8      	ldr	r0, [r7, #8]
 800acec:	68f9      	ldr	r1, [r7, #12]
 800acee:	f7f5 fc35 	bl	800055c <__aeabi_lmul>
 800acf2:	0002      	movs	r2, r0
 800acf4:	000b      	movs	r3, r1
 800acf6:	0010      	movs	r0, r2
 800acf8:	0019      	movs	r1, r3
 800acfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acfc:	603b      	str	r3, [r7, #0]
 800acfe:	2300      	movs	r3, #0
 800ad00:	607b      	str	r3, [r7, #4]
 800ad02:	683a      	ldr	r2, [r7, #0]
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	f7f5 fc09 	bl	800051c <__aeabi_uldivmod>
 800ad0a:	0002      	movs	r2, r0
 800ad0c:	000b      	movs	r3, r1
 800ad0e:	0013      	movs	r3, r2
 800ad10:	637b      	str	r3, [r7, #52]	@ 0x34
 800ad12:	e017      	b.n	800ad44 <HAL_RCC_GetSysClockFreq+0x10c>
=======
 800af98:	4b26      	ldr	r3, [pc, #152]	@ (800b034 <HAL_RCC_GetSysClockFreq+0x138>)
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	2210      	movs	r2, #16
 800af9e:	4013      	ands	r3, r2
 800afa0:	d01a      	beq.n	800afd8 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800afa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afa4:	60bb      	str	r3, [r7, #8]
 800afa6:	2300      	movs	r3, #0
 800afa8:	60fb      	str	r3, [r7, #12]
 800afaa:	4a23      	ldr	r2, [pc, #140]	@ (800b038 <HAL_RCC_GetSysClockFreq+0x13c>)
 800afac:	2300      	movs	r3, #0
 800afae:	68b8      	ldr	r0, [r7, #8]
 800afb0:	68f9      	ldr	r1, [r7, #12]
 800afb2:	f7f5 fad3 	bl	800055c <__aeabi_lmul>
 800afb6:	0002      	movs	r2, r0
 800afb8:	000b      	movs	r3, r1
 800afba:	0010      	movs	r0, r2
 800afbc:	0019      	movs	r1, r3
 800afbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afc0:	603b      	str	r3, [r7, #0]
 800afc2:	2300      	movs	r3, #0
 800afc4:	607b      	str	r3, [r7, #4]
 800afc6:	683a      	ldr	r2, [r7, #0]
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	f7f5 faa7 	bl	800051c <__aeabi_uldivmod>
 800afce:	0002      	movs	r2, r0
 800afd0:	000b      	movs	r3, r1
 800afd2:	0013      	movs	r3, r2
 800afd4:	637b      	str	r3, [r7, #52]	@ 0x34
 800afd6:	e017      	b.n	800b008 <HAL_RCC_GetSysClockFreq+0x10c>
>>>>>>> main
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
<<<<<<< HEAD
 800ad14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad16:	0018      	movs	r0, r3
 800ad18:	2300      	movs	r3, #0
 800ad1a:	0019      	movs	r1, r3
 800ad1c:	4a16      	ldr	r2, [pc, #88]	@ (800ad78 <HAL_RCC_GetSysClockFreq+0x140>)
 800ad1e:	2300      	movs	r3, #0
 800ad20:	f7f5 fc1c 	bl	800055c <__aeabi_lmul>
 800ad24:	0002      	movs	r2, r0
 800ad26:	000b      	movs	r3, r1
 800ad28:	0010      	movs	r0, r2
 800ad2a:	0019      	movs	r1, r3
 800ad2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad2e:	001c      	movs	r4, r3
 800ad30:	2300      	movs	r3, #0
 800ad32:	001d      	movs	r5, r3
 800ad34:	0022      	movs	r2, r4
 800ad36:	002b      	movs	r3, r5
 800ad38:	f7f5 fbf0 	bl	800051c <__aeabi_uldivmod>
 800ad3c:	0002      	movs	r2, r0
 800ad3e:	000b      	movs	r3, r1
 800ad40:	0013      	movs	r3, r2
 800ad42:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 800ad44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad46:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800ad48:	e00d      	b.n	800ad66 <HAL_RCC_GetSysClockFreq+0x12e>
=======
 800afd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afda:	0018      	movs	r0, r3
 800afdc:	2300      	movs	r3, #0
 800afde:	0019      	movs	r1, r3
 800afe0:	4a16      	ldr	r2, [pc, #88]	@ (800b03c <HAL_RCC_GetSysClockFreq+0x140>)
 800afe2:	2300      	movs	r3, #0
 800afe4:	f7f5 faba 	bl	800055c <__aeabi_lmul>
 800afe8:	0002      	movs	r2, r0
 800afea:	000b      	movs	r3, r1
 800afec:	0010      	movs	r0, r2
 800afee:	0019      	movs	r1, r3
 800aff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aff2:	001c      	movs	r4, r3
 800aff4:	2300      	movs	r3, #0
 800aff6:	001d      	movs	r5, r3
 800aff8:	0022      	movs	r2, r4
 800affa:	002b      	movs	r3, r5
 800affc:	f7f5 fa8e 	bl	800051c <__aeabi_uldivmod>
 800b000:	0002      	movs	r2, r0
 800b002:	000b      	movs	r3, r1
 800b004:	0013      	movs	r3, r2
 800b006:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 800b008:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b00a:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800b00c:	e00d      	b.n	800b02a <HAL_RCC_GetSysClockFreq+0x12e>
>>>>>>> main
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
<<<<<<< HEAD
 800ad4a:	4b09      	ldr	r3, [pc, #36]	@ (800ad70 <HAL_RCC_GetSysClockFreq+0x138>)
 800ad4c:	685b      	ldr	r3, [r3, #4]
 800ad4e:	0b5b      	lsrs	r3, r3, #13
 800ad50:	2207      	movs	r2, #7
 800ad52:	4013      	ands	r3, r2
 800ad54:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800ad56:	6a3b      	ldr	r3, [r7, #32]
 800ad58:	3301      	adds	r3, #1
 800ad5a:	2280      	movs	r2, #128	@ 0x80
 800ad5c:	0212      	lsls	r2, r2, #8
 800ad5e:	409a      	lsls	r2, r3
 800ad60:	0013      	movs	r3, r2
 800ad62:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800ad64:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 800ad66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 800ad68:	0018      	movs	r0, r3
 800ad6a:	46bd      	mov	sp, r7
 800ad6c:	b00e      	add	sp, #56	@ 0x38
 800ad6e:	bdb0      	pop	{r4, r5, r7, pc}
 800ad70:	40021000 	.word	0x40021000
 800ad74:	003d0900 	.word	0x003d0900
 800ad78:	00f42400 	.word	0x00f42400
 800ad7c:	007a1200 	.word	0x007a1200
 800ad80:	08010590 	.word	0x08010590

0800ad84 <HAL_RCC_GetHCLKFreq>:
=======
 800b00e:	4b09      	ldr	r3, [pc, #36]	@ (800b034 <HAL_RCC_GetSysClockFreq+0x138>)
 800b010:	685b      	ldr	r3, [r3, #4]
 800b012:	0b5b      	lsrs	r3, r3, #13
 800b014:	2207      	movs	r2, #7
 800b016:	4013      	ands	r3, r2
 800b018:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800b01a:	6a3b      	ldr	r3, [r7, #32]
 800b01c:	3301      	adds	r3, #1
 800b01e:	2280      	movs	r2, #128	@ 0x80
 800b020:	0212      	lsls	r2, r2, #8
 800b022:	409a      	lsls	r2, r3
 800b024:	0013      	movs	r3, r2
 800b026:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800b028:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 800b02a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 800b02c:	0018      	movs	r0, r3
 800b02e:	46bd      	mov	sp, r7
 800b030:	b00e      	add	sp, #56	@ 0x38
 800b032:	bdb0      	pop	{r4, r5, r7, pc}
 800b034:	40021000 	.word	0x40021000
 800b038:	003d0900 	.word	0x003d0900
 800b03c:	00f42400 	.word	0x00f42400
 800b040:	007a1200 	.word	0x007a1200
 800b044:	080106ec 	.word	0x080106ec

0800b048 <HAL_RCC_GetHCLKFreq>:
>>>>>>> main
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
<<<<<<< HEAD
 800ad84:	b580      	push	{r7, lr}
 800ad86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800ad88:	4b02      	ldr	r3, [pc, #8]	@ (800ad94 <HAL_RCC_GetHCLKFreq+0x10>)
 800ad8a:	681b      	ldr	r3, [r3, #0]
}
 800ad8c:	0018      	movs	r0, r3
 800ad8e:	46bd      	mov	sp, r7
 800ad90:	bd80      	pop	{r7, pc}
 800ad92:	46c0      	nop			@ (mov r8, r8)
 800ad94:	2000002c 	.word	0x2000002c

0800ad98 <HAL_RCC_GetPCLK1Freq>:
=======
 800b048:	b580      	push	{r7, lr}
 800b04a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b04c:	4b02      	ldr	r3, [pc, #8]	@ (800b058 <HAL_RCC_GetHCLKFreq+0x10>)
 800b04e:	681b      	ldr	r3, [r3, #0]
}
 800b050:	0018      	movs	r0, r3
 800b052:	46bd      	mov	sp, r7
 800b054:	bd80      	pop	{r7, pc}
 800b056:	46c0      	nop			@ (mov r8, r8)
 800b058:	20000038 	.word	0x20000038

0800b05c <HAL_RCC_GetPCLK1Freq>:
>>>>>>> main
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
<<<<<<< HEAD
 800ad98:	b580      	push	{r7, lr}
 800ad9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800ad9c:	f7ff fff2 	bl	800ad84 <HAL_RCC_GetHCLKFreq>
 800ada0:	0001      	movs	r1, r0
 800ada2:	4b06      	ldr	r3, [pc, #24]	@ (800adbc <HAL_RCC_GetPCLK1Freq+0x24>)
 800ada4:	68db      	ldr	r3, [r3, #12]
 800ada6:	0a1b      	lsrs	r3, r3, #8
 800ada8:	2207      	movs	r2, #7
 800adaa:	4013      	ands	r3, r2
 800adac:	4a04      	ldr	r2, [pc, #16]	@ (800adc0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800adae:	5cd3      	ldrb	r3, [r2, r3]
 800adb0:	40d9      	lsrs	r1, r3
 800adb2:	000b      	movs	r3, r1
}
 800adb4:	0018      	movs	r0, r3
 800adb6:	46bd      	mov	sp, r7
 800adb8:	bd80      	pop	{r7, pc}
 800adba:	46c0      	nop			@ (mov r8, r8)
 800adbc:	40021000 	.word	0x40021000
 800adc0:	08010588 	.word	0x08010588

0800adc4 <HAL_RCC_GetPCLK2Freq>:
=======
 800b05c:	b580      	push	{r7, lr}
 800b05e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800b060:	f7ff fff2 	bl	800b048 <HAL_RCC_GetHCLKFreq>
 800b064:	0001      	movs	r1, r0
 800b066:	4b06      	ldr	r3, [pc, #24]	@ (800b080 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b068:	68db      	ldr	r3, [r3, #12]
 800b06a:	0a1b      	lsrs	r3, r3, #8
 800b06c:	2207      	movs	r2, #7
 800b06e:	4013      	ands	r3, r2
 800b070:	4a04      	ldr	r2, [pc, #16]	@ (800b084 <HAL_RCC_GetPCLK1Freq+0x28>)
 800b072:	5cd3      	ldrb	r3, [r2, r3]
 800b074:	40d9      	lsrs	r1, r3
 800b076:	000b      	movs	r3, r1
}
 800b078:	0018      	movs	r0, r3
 800b07a:	46bd      	mov	sp, r7
 800b07c:	bd80      	pop	{r7, pc}
 800b07e:	46c0      	nop			@ (mov r8, r8)
 800b080:	40021000 	.word	0x40021000
 800b084:	080106e4 	.word	0x080106e4

0800b088 <HAL_RCC_GetPCLK2Freq>:
>>>>>>> main
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
<<<<<<< HEAD
 800adc4:	b580      	push	{r7, lr}
 800adc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800adc8:	f7ff ffdc 	bl	800ad84 <HAL_RCC_GetHCLKFreq>
 800adcc:	0001      	movs	r1, r0
 800adce:	4b06      	ldr	r3, [pc, #24]	@ (800ade8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800add0:	68db      	ldr	r3, [r3, #12]
 800add2:	0adb      	lsrs	r3, r3, #11
 800add4:	2207      	movs	r2, #7
 800add6:	4013      	ands	r3, r2
 800add8:	4a04      	ldr	r2, [pc, #16]	@ (800adec <HAL_RCC_GetPCLK2Freq+0x28>)
 800adda:	5cd3      	ldrb	r3, [r2, r3]
 800addc:	40d9      	lsrs	r1, r3
 800adde:	000b      	movs	r3, r1
}
 800ade0:	0018      	movs	r0, r3
 800ade2:	46bd      	mov	sp, r7
 800ade4:	bd80      	pop	{r7, pc}
 800ade6:	46c0      	nop			@ (mov r8, r8)
 800ade8:	40021000 	.word	0x40021000
 800adec:	08010588 	.word	0x08010588

0800adf0 <HAL_RCCEx_PeriphCLKConfig>:
=======
 800b088:	b580      	push	{r7, lr}
 800b08a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800b08c:	f7ff ffdc 	bl	800b048 <HAL_RCC_GetHCLKFreq>
 800b090:	0001      	movs	r1, r0
 800b092:	4b06      	ldr	r3, [pc, #24]	@ (800b0ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800b094:	68db      	ldr	r3, [r3, #12]
 800b096:	0adb      	lsrs	r3, r3, #11
 800b098:	2207      	movs	r2, #7
 800b09a:	4013      	ands	r3, r2
 800b09c:	4a04      	ldr	r2, [pc, #16]	@ (800b0b0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800b09e:	5cd3      	ldrb	r3, [r2, r3]
 800b0a0:	40d9      	lsrs	r1, r3
 800b0a2:	000b      	movs	r3, r1
}
 800b0a4:	0018      	movs	r0, r3
 800b0a6:	46bd      	mov	sp, r7
 800b0a8:	bd80      	pop	{r7, pc}
 800b0aa:	46c0      	nop			@ (mov r8, r8)
 800b0ac:	40021000 	.word	0x40021000
 800b0b0:	080106e4 	.word	0x080106e4

0800b0b4 <HAL_RCCEx_PeriphCLKConfig>:
>>>>>>> main
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
<<<<<<< HEAD
 800adf0:	b580      	push	{r7, lr}
 800adf2:	b086      	sub	sp, #24
 800adf4:	af00      	add	r7, sp, #0
 800adf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 800adf8:	2017      	movs	r0, #23
 800adfa:	183b      	adds	r3, r7, r0
 800adfc:	2200      	movs	r2, #0
 800adfe:	701a      	strb	r2, [r3, #0]
=======
 800b0b4:	b580      	push	{r7, lr}
 800b0b6:	b086      	sub	sp, #24
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 800b0bc:	2017      	movs	r0, #23
 800b0be:	183b      	adds	r3, r7, r0
 800b0c0:	2200      	movs	r2, #0
 800b0c2:	701a      	strb	r2, [r3, #0]
>>>>>>> main

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
<<<<<<< HEAD
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	2220      	movs	r2, #32
 800ae06:	4013      	ands	r3, r2
 800ae08:	d100      	bne.n	800ae0c <HAL_RCCEx_PeriphCLKConfig+0x1c>
 800ae0a:	e0c7      	b.n	800af9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
=======
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	2220      	movs	r2, #32
 800b0ca:	4013      	ands	r3, r2
 800b0cc:	d100      	bne.n	800b0d0 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 800b0ce:	e0c7      	b.n	800b260 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
>>>>>>> main
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
<<<<<<< HEAD
 800ae0c:	4b9b      	ldr	r3, [pc, #620]	@ (800b07c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800ae0e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ae10:	2380      	movs	r3, #128	@ 0x80
 800ae12:	055b      	lsls	r3, r3, #21
 800ae14:	4013      	ands	r3, r2
 800ae16:	d109      	bne.n	800ae2c <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ae18:	4b98      	ldr	r3, [pc, #608]	@ (800b07c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800ae1a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ae1c:	4b97      	ldr	r3, [pc, #604]	@ (800b07c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800ae1e:	2180      	movs	r1, #128	@ 0x80
 800ae20:	0549      	lsls	r1, r1, #21
 800ae22:	430a      	orrs	r2, r1
 800ae24:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 800ae26:	183b      	adds	r3, r7, r0
 800ae28:	2201      	movs	r2, #1
 800ae2a:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ae2c:	4b94      	ldr	r3, [pc, #592]	@ (800b080 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800ae2e:	681a      	ldr	r2, [r3, #0]
 800ae30:	2380      	movs	r3, #128	@ 0x80
 800ae32:	005b      	lsls	r3, r3, #1
 800ae34:	4013      	ands	r3, r2
 800ae36:	d11a      	bne.n	800ae6e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800ae38:	4b91      	ldr	r3, [pc, #580]	@ (800b080 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800ae3a:	681a      	ldr	r2, [r3, #0]
 800ae3c:	4b90      	ldr	r3, [pc, #576]	@ (800b080 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800ae3e:	2180      	movs	r1, #128	@ 0x80
 800ae40:	0049      	lsls	r1, r1, #1
 800ae42:	430a      	orrs	r2, r1
 800ae44:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ae46:	f7fb ff1d 	bl	8006c84 <HAL_GetTick>
 800ae4a:	0003      	movs	r3, r0
 800ae4c:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ae4e:	e008      	b.n	800ae62 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ae50:	f7fb ff18 	bl	8006c84 <HAL_GetTick>
 800ae54:	0002      	movs	r2, r0
 800ae56:	693b      	ldr	r3, [r7, #16]
 800ae58:	1ad3      	subs	r3, r2, r3
 800ae5a:	2b64      	cmp	r3, #100	@ 0x64
 800ae5c:	d901      	bls.n	800ae62 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 800ae5e:	2303      	movs	r3, #3
 800ae60:	e107      	b.n	800b072 <HAL_RCCEx_PeriphCLKConfig+0x282>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ae62:	4b87      	ldr	r3, [pc, #540]	@ (800b080 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800ae64:	681a      	ldr	r2, [r3, #0]
 800ae66:	2380      	movs	r3, #128	@ 0x80
 800ae68:	005b      	lsls	r3, r3, #1
 800ae6a:	4013      	ands	r3, r2
 800ae6c:	d0f0      	beq.n	800ae50 <HAL_RCCEx_PeriphCLKConfig+0x60>
=======
 800b0d0:	4b9b      	ldr	r3, [pc, #620]	@ (800b340 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800b0d2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b0d4:	2380      	movs	r3, #128	@ 0x80
 800b0d6:	055b      	lsls	r3, r3, #21
 800b0d8:	4013      	ands	r3, r2
 800b0da:	d109      	bne.n	800b0f0 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b0dc:	4b98      	ldr	r3, [pc, #608]	@ (800b340 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800b0de:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b0e0:	4b97      	ldr	r3, [pc, #604]	@ (800b340 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800b0e2:	2180      	movs	r1, #128	@ 0x80
 800b0e4:	0549      	lsls	r1, r1, #21
 800b0e6:	430a      	orrs	r2, r1
 800b0e8:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 800b0ea:	183b      	adds	r3, r7, r0
 800b0ec:	2201      	movs	r2, #1
 800b0ee:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b0f0:	4b94      	ldr	r3, [pc, #592]	@ (800b344 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800b0f2:	681a      	ldr	r2, [r3, #0]
 800b0f4:	2380      	movs	r3, #128	@ 0x80
 800b0f6:	005b      	lsls	r3, r3, #1
 800b0f8:	4013      	ands	r3, r2
 800b0fa:	d11a      	bne.n	800b132 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800b0fc:	4b91      	ldr	r3, [pc, #580]	@ (800b344 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800b0fe:	681a      	ldr	r2, [r3, #0]
 800b100:	4b90      	ldr	r3, [pc, #576]	@ (800b344 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800b102:	2180      	movs	r1, #128	@ 0x80
 800b104:	0049      	lsls	r1, r1, #1
 800b106:	430a      	orrs	r2, r1
 800b108:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b10a:	f7fb ff1d 	bl	8006f48 <HAL_GetTick>
 800b10e:	0003      	movs	r3, r0
 800b110:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b112:	e008      	b.n	800b126 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b114:	f7fb ff18 	bl	8006f48 <HAL_GetTick>
 800b118:	0002      	movs	r2, r0
 800b11a:	693b      	ldr	r3, [r7, #16]
 800b11c:	1ad3      	subs	r3, r2, r3
 800b11e:	2b64      	cmp	r3, #100	@ 0x64
 800b120:	d901      	bls.n	800b126 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 800b122:	2303      	movs	r3, #3
 800b124:	e107      	b.n	800b336 <HAL_RCCEx_PeriphCLKConfig+0x282>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b126:	4b87      	ldr	r3, [pc, #540]	@ (800b344 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800b128:	681a      	ldr	r2, [r3, #0]
 800b12a:	2380      	movs	r3, #128	@ 0x80
 800b12c:	005b      	lsls	r3, r3, #1
 800b12e:	4013      	ands	r3, r2
 800b130:	d0f0      	beq.n	800b114 <HAL_RCCEx_PeriphCLKConfig+0x60>
>>>>>>> main
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
<<<<<<< HEAD
 800ae6e:	4b83      	ldr	r3, [pc, #524]	@ (800b07c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800ae70:	681a      	ldr	r2, [r3, #0]
 800ae72:	23c0      	movs	r3, #192	@ 0xc0
 800ae74:	039b      	lsls	r3, r3, #14
 800ae76:	4013      	ands	r3, r2
 800ae78:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	685a      	ldr	r2, [r3, #4]
 800ae7e:	23c0      	movs	r3, #192	@ 0xc0
 800ae80:	039b      	lsls	r3, r3, #14
 800ae82:	4013      	ands	r3, r2
 800ae84:	68fa      	ldr	r2, [r7, #12]
 800ae86:	429a      	cmp	r2, r3
 800ae88:	d013      	beq.n	800aeb2 <HAL_RCCEx_PeriphCLKConfig+0xc2>
=======
 800b132:	4b83      	ldr	r3, [pc, #524]	@ (800b340 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800b134:	681a      	ldr	r2, [r3, #0]
 800b136:	23c0      	movs	r3, #192	@ 0xc0
 800b138:	039b      	lsls	r3, r3, #14
 800b13a:	4013      	ands	r3, r2
 800b13c:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	685a      	ldr	r2, [r3, #4]
 800b142:	23c0      	movs	r3, #192	@ 0xc0
 800b144:	039b      	lsls	r3, r3, #14
 800b146:	4013      	ands	r3, r2
 800b148:	68fa      	ldr	r2, [r7, #12]
 800b14a:	429a      	cmp	r2, r3
 800b14c:	d013      	beq.n	800b176 <HAL_RCCEx_PeriphCLKConfig+0xc2>
>>>>>>> main
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
<<<<<<< HEAD
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	685a      	ldr	r2, [r3, #4]
 800ae8e:	23c0      	movs	r3, #192	@ 0xc0
 800ae90:	029b      	lsls	r3, r3, #10
 800ae92:	401a      	ands	r2, r3
 800ae94:	23c0      	movs	r3, #192	@ 0xc0
 800ae96:	029b      	lsls	r3, r3, #10
 800ae98:	429a      	cmp	r2, r3
 800ae9a:	d10a      	bne.n	800aeb2 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ae9c:	4b77      	ldr	r3, [pc, #476]	@ (800b07c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800ae9e:	681a      	ldr	r2, [r3, #0]
 800aea0:	2380      	movs	r3, #128	@ 0x80
 800aea2:	029b      	lsls	r3, r3, #10
 800aea4:	401a      	ands	r2, r3
 800aea6:	2380      	movs	r3, #128	@ 0x80
 800aea8:	029b      	lsls	r3, r3, #10
 800aeaa:	429a      	cmp	r2, r3
 800aeac:	d101      	bne.n	800aeb2 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 800aeae:	2301      	movs	r3, #1
 800aeb0:	e0df      	b.n	800b072 <HAL_RCCEx_PeriphCLKConfig+0x282>
=======
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	685a      	ldr	r2, [r3, #4]
 800b152:	23c0      	movs	r3, #192	@ 0xc0
 800b154:	029b      	lsls	r3, r3, #10
 800b156:	401a      	ands	r2, r3
 800b158:	23c0      	movs	r3, #192	@ 0xc0
 800b15a:	029b      	lsls	r3, r3, #10
 800b15c:	429a      	cmp	r2, r3
 800b15e:	d10a      	bne.n	800b176 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b160:	4b77      	ldr	r3, [pc, #476]	@ (800b340 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800b162:	681a      	ldr	r2, [r3, #0]
 800b164:	2380      	movs	r3, #128	@ 0x80
 800b166:	029b      	lsls	r3, r3, #10
 800b168:	401a      	ands	r2, r3
 800b16a:	2380      	movs	r3, #128	@ 0x80
 800b16c:	029b      	lsls	r3, r3, #10
 800b16e:	429a      	cmp	r2, r3
 800b170:	d101      	bne.n	800b176 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 800b172:	2301      	movs	r3, #1
 800b174:	e0df      	b.n	800b336 <HAL_RCCEx_PeriphCLKConfig+0x282>
>>>>>>> main
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
<<<<<<< HEAD
 800aeb2:	4b72      	ldr	r3, [pc, #456]	@ (800b07c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800aeb4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800aeb6:	23c0      	movs	r3, #192	@ 0xc0
 800aeb8:	029b      	lsls	r3, r3, #10
 800aeba:	4013      	ands	r3, r2
 800aebc:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d03b      	beq.n	800af3c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	685a      	ldr	r2, [r3, #4]
 800aec8:	23c0      	movs	r3, #192	@ 0xc0
 800aeca:	029b      	lsls	r3, r3, #10
 800aecc:	4013      	ands	r3, r2
 800aece:	68fa      	ldr	r2, [r7, #12]
 800aed0:	429a      	cmp	r2, r3
 800aed2:	d033      	beq.n	800af3c <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	2220      	movs	r2, #32
 800aeda:	4013      	ands	r3, r2
 800aedc:	d02e      	beq.n	800af3c <HAL_RCCEx_PeriphCLKConfig+0x14c>
=======
 800b176:	4b72      	ldr	r3, [pc, #456]	@ (800b340 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800b178:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b17a:	23c0      	movs	r3, #192	@ 0xc0
 800b17c:	029b      	lsls	r3, r3, #10
 800b17e:	4013      	ands	r3, r2
 800b180:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	2b00      	cmp	r3, #0
 800b186:	d03b      	beq.n	800b200 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	685a      	ldr	r2, [r3, #4]
 800b18c:	23c0      	movs	r3, #192	@ 0xc0
 800b18e:	029b      	lsls	r3, r3, #10
 800b190:	4013      	ands	r3, r2
 800b192:	68fa      	ldr	r2, [r7, #12]
 800b194:	429a      	cmp	r2, r3
 800b196:	d033      	beq.n	800b200 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	2220      	movs	r2, #32
 800b19e:	4013      	ands	r3, r2
 800b1a0:	d02e      	beq.n	800b200 <HAL_RCCEx_PeriphCLKConfig+0x14c>
>>>>>>> main
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
<<<<<<< HEAD
 800aede:	4b67      	ldr	r3, [pc, #412]	@ (800b07c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800aee0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aee2:	4a68      	ldr	r2, [pc, #416]	@ (800b084 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800aee4:	4013      	ands	r3, r2
 800aee6:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800aee8:	4b64      	ldr	r3, [pc, #400]	@ (800b07c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800aeea:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800aeec:	4b63      	ldr	r3, [pc, #396]	@ (800b07c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800aeee:	2180      	movs	r1, #128	@ 0x80
 800aef0:	0309      	lsls	r1, r1, #12
 800aef2:	430a      	orrs	r2, r1
 800aef4:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800aef6:	4b61      	ldr	r3, [pc, #388]	@ (800b07c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800aef8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800aefa:	4b60      	ldr	r3, [pc, #384]	@ (800b07c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800aefc:	4962      	ldr	r1, [pc, #392]	@ (800b088 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 800aefe:	400a      	ands	r2, r1
 800af00:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 800af02:	4b5e      	ldr	r3, [pc, #376]	@ (800b07c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800af04:	68fa      	ldr	r2, [r7, #12]
 800af06:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800af08:	68fa      	ldr	r2, [r7, #12]
 800af0a:	2380      	movs	r3, #128	@ 0x80
 800af0c:	005b      	lsls	r3, r3, #1
 800af0e:	4013      	ands	r3, r2
 800af10:	d014      	beq.n	800af3c <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800af12:	f7fb feb7 	bl	8006c84 <HAL_GetTick>
 800af16:	0003      	movs	r3, r0
 800af18:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800af1a:	e009      	b.n	800af30 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800af1c:	f7fb feb2 	bl	8006c84 <HAL_GetTick>
 800af20:	0002      	movs	r2, r0
 800af22:	693b      	ldr	r3, [r7, #16]
 800af24:	1ad3      	subs	r3, r2, r3
 800af26:	4a59      	ldr	r2, [pc, #356]	@ (800b08c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800af28:	4293      	cmp	r3, r2
 800af2a:	d901      	bls.n	800af30 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 800af2c:	2303      	movs	r3, #3
 800af2e:	e0a0      	b.n	800b072 <HAL_RCCEx_PeriphCLKConfig+0x282>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800af30:	4b52      	ldr	r3, [pc, #328]	@ (800b07c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800af32:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800af34:	2380      	movs	r3, #128	@ 0x80
 800af36:	009b      	lsls	r3, r3, #2
 800af38:	4013      	ands	r3, r2
 800af3a:	d0ef      	beq.n	800af1c <HAL_RCCEx_PeriphCLKConfig+0x12c>
=======
 800b1a2:	4b67      	ldr	r3, [pc, #412]	@ (800b340 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800b1a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b1a6:	4a68      	ldr	r2, [pc, #416]	@ (800b348 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800b1a8:	4013      	ands	r3, r2
 800b1aa:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800b1ac:	4b64      	ldr	r3, [pc, #400]	@ (800b340 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800b1ae:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b1b0:	4b63      	ldr	r3, [pc, #396]	@ (800b340 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800b1b2:	2180      	movs	r1, #128	@ 0x80
 800b1b4:	0309      	lsls	r1, r1, #12
 800b1b6:	430a      	orrs	r2, r1
 800b1b8:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800b1ba:	4b61      	ldr	r3, [pc, #388]	@ (800b340 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800b1bc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b1be:	4b60      	ldr	r3, [pc, #384]	@ (800b340 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800b1c0:	4962      	ldr	r1, [pc, #392]	@ (800b34c <HAL_RCCEx_PeriphCLKConfig+0x298>)
 800b1c2:	400a      	ands	r2, r1
 800b1c4:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 800b1c6:	4b5e      	ldr	r3, [pc, #376]	@ (800b340 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800b1c8:	68fa      	ldr	r2, [r7, #12]
 800b1ca:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800b1cc:	68fa      	ldr	r2, [r7, #12]
 800b1ce:	2380      	movs	r3, #128	@ 0x80
 800b1d0:	005b      	lsls	r3, r3, #1
 800b1d2:	4013      	ands	r3, r2
 800b1d4:	d014      	beq.n	800b200 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b1d6:	f7fb feb7 	bl	8006f48 <HAL_GetTick>
 800b1da:	0003      	movs	r3, r0
 800b1dc:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b1de:	e009      	b.n	800b1f4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b1e0:	f7fb feb2 	bl	8006f48 <HAL_GetTick>
 800b1e4:	0002      	movs	r2, r0
 800b1e6:	693b      	ldr	r3, [r7, #16]
 800b1e8:	1ad3      	subs	r3, r2, r3
 800b1ea:	4a59      	ldr	r2, [pc, #356]	@ (800b350 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800b1ec:	4293      	cmp	r3, r2
 800b1ee:	d901      	bls.n	800b1f4 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 800b1f0:	2303      	movs	r3, #3
 800b1f2:	e0a0      	b.n	800b336 <HAL_RCCEx_PeriphCLKConfig+0x282>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b1f4:	4b52      	ldr	r3, [pc, #328]	@ (800b340 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800b1f6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b1f8:	2380      	movs	r3, #128	@ 0x80
 800b1fa:	009b      	lsls	r3, r3, #2
 800b1fc:	4013      	ands	r3, r2
 800b1fe:	d0ef      	beq.n	800b1e0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
>>>>>>> main
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
<<<<<<< HEAD
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	2220      	movs	r2, #32
 800af42:	4013      	ands	r3, r2
 800af44:	d01f      	beq.n	800af86 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	685a      	ldr	r2, [r3, #4]
 800af4a:	23c0      	movs	r3, #192	@ 0xc0
 800af4c:	029b      	lsls	r3, r3, #10
 800af4e:	401a      	ands	r2, r3
 800af50:	23c0      	movs	r3, #192	@ 0xc0
 800af52:	029b      	lsls	r3, r3, #10
 800af54:	429a      	cmp	r2, r3
 800af56:	d10c      	bne.n	800af72 <HAL_RCCEx_PeriphCLKConfig+0x182>
 800af58:	4b48      	ldr	r3, [pc, #288]	@ (800b07c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	4a4c      	ldr	r2, [pc, #304]	@ (800b090 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 800af5e:	4013      	ands	r3, r2
 800af60:	0019      	movs	r1, r3
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	685a      	ldr	r2, [r3, #4]
 800af66:	23c0      	movs	r3, #192	@ 0xc0
 800af68:	039b      	lsls	r3, r3, #14
 800af6a:	401a      	ands	r2, r3
 800af6c:	4b43      	ldr	r3, [pc, #268]	@ (800b07c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800af6e:	430a      	orrs	r2, r1
 800af70:	601a      	str	r2, [r3, #0]
 800af72:	4b42      	ldr	r3, [pc, #264]	@ (800b07c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800af74:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	685a      	ldr	r2, [r3, #4]
 800af7a:	23c0      	movs	r3, #192	@ 0xc0
 800af7c:	029b      	lsls	r3, r3, #10
 800af7e:	401a      	ands	r2, r3
 800af80:	4b3e      	ldr	r3, [pc, #248]	@ (800b07c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800af82:	430a      	orrs	r2, r1
 800af84:	651a      	str	r2, [r3, #80]	@ 0x50
=======
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	2220      	movs	r2, #32
 800b206:	4013      	ands	r3, r2
 800b208:	d01f      	beq.n	800b24a <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	685a      	ldr	r2, [r3, #4]
 800b20e:	23c0      	movs	r3, #192	@ 0xc0
 800b210:	029b      	lsls	r3, r3, #10
 800b212:	401a      	ands	r2, r3
 800b214:	23c0      	movs	r3, #192	@ 0xc0
 800b216:	029b      	lsls	r3, r3, #10
 800b218:	429a      	cmp	r2, r3
 800b21a:	d10c      	bne.n	800b236 <HAL_RCCEx_PeriphCLKConfig+0x182>
 800b21c:	4b48      	ldr	r3, [pc, #288]	@ (800b340 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	4a4c      	ldr	r2, [pc, #304]	@ (800b354 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 800b222:	4013      	ands	r3, r2
 800b224:	0019      	movs	r1, r3
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	685a      	ldr	r2, [r3, #4]
 800b22a:	23c0      	movs	r3, #192	@ 0xc0
 800b22c:	039b      	lsls	r3, r3, #14
 800b22e:	401a      	ands	r2, r3
 800b230:	4b43      	ldr	r3, [pc, #268]	@ (800b340 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800b232:	430a      	orrs	r2, r1
 800b234:	601a      	str	r2, [r3, #0]
 800b236:	4b42      	ldr	r3, [pc, #264]	@ (800b340 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800b238:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	685a      	ldr	r2, [r3, #4]
 800b23e:	23c0      	movs	r3, #192	@ 0xc0
 800b240:	029b      	lsls	r3, r3, #10
 800b242:	401a      	ands	r2, r3
 800b244:	4b3e      	ldr	r3, [pc, #248]	@ (800b340 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800b246:	430a      	orrs	r2, r1
 800b248:	651a      	str	r2, [r3, #80]	@ 0x50
>>>>>>> main
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
<<<<<<< HEAD
 800af86:	2317      	movs	r3, #23
 800af88:	18fb      	adds	r3, r7, r3
 800af8a:	781b      	ldrb	r3, [r3, #0]
 800af8c:	2b01      	cmp	r3, #1
 800af8e:	d105      	bne.n	800af9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800af90:	4b3a      	ldr	r3, [pc, #232]	@ (800b07c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800af92:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800af94:	4b39      	ldr	r3, [pc, #228]	@ (800b07c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800af96:	493f      	ldr	r1, [pc, #252]	@ (800b094 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 800af98:	400a      	ands	r2, r1
 800af9a:	639a      	str	r2, [r3, #56]	@ 0x38
=======
 800b24a:	2317      	movs	r3, #23
 800b24c:	18fb      	adds	r3, r7, r3
 800b24e:	781b      	ldrb	r3, [r3, #0]
 800b250:	2b01      	cmp	r3, #1
 800b252:	d105      	bne.n	800b260 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b254:	4b3a      	ldr	r3, [pc, #232]	@ (800b340 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800b256:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b258:	4b39      	ldr	r3, [pc, #228]	@ (800b340 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800b25a:	493f      	ldr	r1, [pc, #252]	@ (800b358 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 800b25c:	400a      	ands	r2, r1
 800b25e:	639a      	str	r2, [r3, #56]	@ 0x38
>>>>>>> main
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
<<<<<<< HEAD
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	2201      	movs	r2, #1
 800afa2:	4013      	ands	r3, r2
 800afa4:	d009      	beq.n	800afba <HAL_RCCEx_PeriphCLKConfig+0x1ca>
=======
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	2201      	movs	r2, #1
 800b266:	4013      	ands	r3, r2
 800b268:	d009      	beq.n	800b27e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
>>>>>>> main
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
<<<<<<< HEAD
 800afa6:	4b35      	ldr	r3, [pc, #212]	@ (800b07c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800afa8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800afaa:	2203      	movs	r2, #3
 800afac:	4393      	bics	r3, r2
 800afae:	0019      	movs	r1, r3
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	689a      	ldr	r2, [r3, #8]
 800afb4:	4b31      	ldr	r3, [pc, #196]	@ (800b07c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800afb6:	430a      	orrs	r2, r1
 800afb8:	64da      	str	r2, [r3, #76]	@ 0x4c
=======
 800b26a:	4b35      	ldr	r3, [pc, #212]	@ (800b340 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800b26c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b26e:	2203      	movs	r2, #3
 800b270:	4393      	bics	r3, r2
 800b272:	0019      	movs	r1, r3
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	689a      	ldr	r2, [r3, #8]
 800b278:	4b31      	ldr	r3, [pc, #196]	@ (800b340 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800b27a:	430a      	orrs	r2, r1
 800b27c:	64da      	str	r2, [r3, #76]	@ 0x4c
>>>>>>> main
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
<<<<<<< HEAD
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	2202      	movs	r2, #2
 800afc0:	4013      	ands	r3, r2
 800afc2:	d009      	beq.n	800afd8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
=======
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	2202      	movs	r2, #2
 800b284:	4013      	ands	r3, r2
 800b286:	d009      	beq.n	800b29c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
>>>>>>> main
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
<<<<<<< HEAD
 800afc4:	4b2d      	ldr	r3, [pc, #180]	@ (800b07c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800afc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800afc8:	220c      	movs	r2, #12
 800afca:	4393      	bics	r3, r2
 800afcc:	0019      	movs	r1, r3
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	68da      	ldr	r2, [r3, #12]
 800afd2:	4b2a      	ldr	r3, [pc, #168]	@ (800b07c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800afd4:	430a      	orrs	r2, r1
 800afd6:	64da      	str	r2, [r3, #76]	@ 0x4c
=======
 800b288:	4b2d      	ldr	r3, [pc, #180]	@ (800b340 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800b28a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b28c:	220c      	movs	r2, #12
 800b28e:	4393      	bics	r3, r2
 800b290:	0019      	movs	r1, r3
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	68da      	ldr	r2, [r3, #12]
 800b296:	4b2a      	ldr	r3, [pc, #168]	@ (800b340 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800b298:	430a      	orrs	r2, r1
 800b29a:	64da      	str	r2, [r3, #76]	@ 0x4c
>>>>>>> main
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
<<<<<<< HEAD
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	2204      	movs	r2, #4
 800afde:	4013      	ands	r3, r2
 800afe0:	d009      	beq.n	800aff6 <HAL_RCCEx_PeriphCLKConfig+0x206>
=======
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	2204      	movs	r2, #4
 800b2a2:	4013      	ands	r3, r2
 800b2a4:	d009      	beq.n	800b2ba <HAL_RCCEx_PeriphCLKConfig+0x206>
>>>>>>> main
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
<<<<<<< HEAD
 800afe2:	4b26      	ldr	r3, [pc, #152]	@ (800b07c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800afe4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800afe6:	4a2c      	ldr	r2, [pc, #176]	@ (800b098 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 800afe8:	4013      	ands	r3, r2
 800afea:	0019      	movs	r1, r3
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	691a      	ldr	r2, [r3, #16]
 800aff0:	4b22      	ldr	r3, [pc, #136]	@ (800b07c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800aff2:	430a      	orrs	r2, r1
 800aff4:	64da      	str	r2, [r3, #76]	@ 0x4c
=======
 800b2a6:	4b26      	ldr	r3, [pc, #152]	@ (800b340 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800b2a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b2aa:	4a2c      	ldr	r2, [pc, #176]	@ (800b35c <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 800b2ac:	4013      	ands	r3, r2
 800b2ae:	0019      	movs	r1, r3
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	691a      	ldr	r2, [r3, #16]
 800b2b4:	4b22      	ldr	r3, [pc, #136]	@ (800b340 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800b2b6:	430a      	orrs	r2, r1
 800b2b8:	64da      	str	r2, [r3, #76]	@ 0x4c
>>>>>>> main
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
<<<<<<< HEAD
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	2208      	movs	r2, #8
 800affc:	4013      	ands	r3, r2
 800affe:	d009      	beq.n	800b014 <HAL_RCCEx_PeriphCLKConfig+0x224>
=======
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	2208      	movs	r2, #8
 800b2c0:	4013      	ands	r3, r2
 800b2c2:	d009      	beq.n	800b2d8 <HAL_RCCEx_PeriphCLKConfig+0x224>
>>>>>>> main
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
<<<<<<< HEAD
 800b000:	4b1e      	ldr	r3, [pc, #120]	@ (800b07c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800b002:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b004:	4a25      	ldr	r2, [pc, #148]	@ (800b09c <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 800b006:	4013      	ands	r3, r2
 800b008:	0019      	movs	r1, r3
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	695a      	ldr	r2, [r3, #20]
 800b00e:	4b1b      	ldr	r3, [pc, #108]	@ (800b07c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800b010:	430a      	orrs	r2, r1
 800b012:	64da      	str	r2, [r3, #76]	@ 0x4c
=======
 800b2c4:	4b1e      	ldr	r3, [pc, #120]	@ (800b340 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800b2c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b2c8:	4a25      	ldr	r2, [pc, #148]	@ (800b360 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 800b2ca:	4013      	ands	r3, r2
 800b2cc:	0019      	movs	r1, r3
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	695a      	ldr	r2, [r3, #20]
 800b2d2:	4b1b      	ldr	r3, [pc, #108]	@ (800b340 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800b2d4:	430a      	orrs	r2, r1
 800b2d6:	64da      	str	r2, [r3, #76]	@ 0x4c
>>>>>>> main
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
<<<<<<< HEAD
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	681a      	ldr	r2, [r3, #0]
 800b018:	2380      	movs	r3, #128	@ 0x80
 800b01a:	005b      	lsls	r3, r3, #1
 800b01c:	4013      	ands	r3, r2
 800b01e:	d009      	beq.n	800b034 <HAL_RCCEx_PeriphCLKConfig+0x244>
=======
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	681a      	ldr	r2, [r3, #0]
 800b2dc:	2380      	movs	r3, #128	@ 0x80
 800b2de:	005b      	lsls	r3, r3, #1
 800b2e0:	4013      	ands	r3, r2
 800b2e2:	d009      	beq.n	800b2f8 <HAL_RCCEx_PeriphCLKConfig+0x244>
>>>>>>> main
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
<<<<<<< HEAD
 800b020:	4b16      	ldr	r3, [pc, #88]	@ (800b07c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800b022:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b024:	4a17      	ldr	r2, [pc, #92]	@ (800b084 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800b026:	4013      	ands	r3, r2
 800b028:	0019      	movs	r1, r3
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	699a      	ldr	r2, [r3, #24]
 800b02e:	4b13      	ldr	r3, [pc, #76]	@ (800b07c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800b030:	430a      	orrs	r2, r1
 800b032:	64da      	str	r2, [r3, #76]	@ 0x4c
=======
 800b2e4:	4b16      	ldr	r3, [pc, #88]	@ (800b340 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800b2e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b2e8:	4a17      	ldr	r2, [pc, #92]	@ (800b348 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800b2ea:	4013      	ands	r3, r2
 800b2ec:	0019      	movs	r1, r3
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	699a      	ldr	r2, [r3, #24]
 800b2f2:	4b13      	ldr	r3, [pc, #76]	@ (800b340 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800b2f4:	430a      	orrs	r2, r1
 800b2f6:	64da      	str	r2, [r3, #76]	@ 0x4c
>>>>>>> main
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
<<<<<<< HEAD
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	2240      	movs	r2, #64	@ 0x40
 800b03a:	4013      	ands	r3, r2
 800b03c:	d009      	beq.n	800b052 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b03e:	4b0f      	ldr	r3, [pc, #60]	@ (800b07c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800b040:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b042:	4a17      	ldr	r2, [pc, #92]	@ (800b0a0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 800b044:	4013      	ands	r3, r2
 800b046:	0019      	movs	r1, r3
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	6a1a      	ldr	r2, [r3, #32]
 800b04c:	4b0b      	ldr	r3, [pc, #44]	@ (800b07c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800b04e:	430a      	orrs	r2, r1
 800b050:	64da      	str	r2, [r3, #76]	@ 0x4c
=======
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	2240      	movs	r2, #64	@ 0x40
 800b2fe:	4013      	ands	r3, r2
 800b300:	d009      	beq.n	800b316 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b302:	4b0f      	ldr	r3, [pc, #60]	@ (800b340 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800b304:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b306:	4a17      	ldr	r2, [pc, #92]	@ (800b364 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 800b308:	4013      	ands	r3, r2
 800b30a:	0019      	movs	r1, r3
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	6a1a      	ldr	r2, [r3, #32]
 800b310:	4b0b      	ldr	r3, [pc, #44]	@ (800b340 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800b312:	430a      	orrs	r2, r1
 800b314:	64da      	str	r2, [r3, #76]	@ 0x4c
>>>>>>> main
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
<<<<<<< HEAD
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	2280      	movs	r2, #128	@ 0x80
 800b058:	4013      	ands	r3, r2
 800b05a:	d009      	beq.n	800b070 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800b05c:	4b07      	ldr	r3, [pc, #28]	@ (800b07c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800b05e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b060:	4a10      	ldr	r2, [pc, #64]	@ (800b0a4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 800b062:	4013      	ands	r3, r2
 800b064:	0019      	movs	r1, r3
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	69da      	ldr	r2, [r3, #28]
 800b06a:	4b04      	ldr	r3, [pc, #16]	@ (800b07c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800b06c:	430a      	orrs	r2, r1
 800b06e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800b070:	2300      	movs	r3, #0
}
 800b072:	0018      	movs	r0, r3
 800b074:	46bd      	mov	sp, r7
 800b076:	b006      	add	sp, #24
 800b078:	bd80      	pop	{r7, pc}
 800b07a:	46c0      	nop			@ (mov r8, r8)
 800b07c:	40021000 	.word	0x40021000
 800b080:	40007000 	.word	0x40007000
 800b084:	fffcffff 	.word	0xfffcffff
 800b088:	fff7ffff 	.word	0xfff7ffff
 800b08c:	00001388 	.word	0x00001388
 800b090:	ffcfffff 	.word	0xffcfffff
 800b094:	efffffff 	.word	0xefffffff
 800b098:	fffff3ff 	.word	0xfffff3ff
 800b09c:	ffffcfff 	.word	0xffffcfff
 800b0a0:	fbffffff 	.word	0xfbffffff
 800b0a4:	fff3ffff 	.word	0xfff3ffff

0800b0a8 <HAL_TIM_PWM_Init>:
=======
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	2280      	movs	r2, #128	@ 0x80
 800b31c:	4013      	ands	r3, r2
 800b31e:	d009      	beq.n	800b334 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800b320:	4b07      	ldr	r3, [pc, #28]	@ (800b340 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800b322:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b324:	4a10      	ldr	r2, [pc, #64]	@ (800b368 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 800b326:	4013      	ands	r3, r2
 800b328:	0019      	movs	r1, r3
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	69da      	ldr	r2, [r3, #28]
 800b32e:	4b04      	ldr	r3, [pc, #16]	@ (800b340 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800b330:	430a      	orrs	r2, r1
 800b332:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800b334:	2300      	movs	r3, #0
}
 800b336:	0018      	movs	r0, r3
 800b338:	46bd      	mov	sp, r7
 800b33a:	b006      	add	sp, #24
 800b33c:	bd80      	pop	{r7, pc}
 800b33e:	46c0      	nop			@ (mov r8, r8)
 800b340:	40021000 	.word	0x40021000
 800b344:	40007000 	.word	0x40007000
 800b348:	fffcffff 	.word	0xfffcffff
 800b34c:	fff7ffff 	.word	0xfff7ffff
 800b350:	00001388 	.word	0x00001388
 800b354:	ffcfffff 	.word	0xffcfffff
 800b358:	efffffff 	.word	0xefffffff
 800b35c:	fffff3ff 	.word	0xfffff3ff
 800b360:	ffffcfff 	.word	0xffffcfff
 800b364:	fbffffff 	.word	0xfbffffff
 800b368:	fff3ffff 	.word	0xfff3ffff

0800b36c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800b36c:	b580      	push	{r7, lr}
 800b36e:	b082      	sub	sp, #8
 800b370:	af00      	add	r7, sp, #0
 800b372:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	2b00      	cmp	r3, #0
 800b378:	d101      	bne.n	800b37e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800b37a:	2301      	movs	r3, #1
 800b37c:	e032      	b.n	800b3e4 <HAL_TIM_OC_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	2239      	movs	r2, #57	@ 0x39
 800b382:	5c9b      	ldrb	r3, [r3, r2]
 800b384:	b2db      	uxtb	r3, r3
 800b386:	2b00      	cmp	r3, #0
 800b388:	d107      	bne.n	800b39a <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	2238      	movs	r2, #56	@ 0x38
 800b38e:	2100      	movs	r1, #0
 800b390:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	0018      	movs	r0, r3
 800b396:	f000 f829 	bl	800b3ec <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	2239      	movs	r2, #57	@ 0x39
 800b39e:	2102      	movs	r1, #2
 800b3a0:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	681a      	ldr	r2, [r3, #0]
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	3304      	adds	r3, #4
 800b3aa:	0019      	movs	r1, r3
 800b3ac:	0010      	movs	r0, r2
 800b3ae:	f000 f983 	bl	800b6b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	223e      	movs	r2, #62	@ 0x3e
 800b3b6:	2101      	movs	r1, #1
 800b3b8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	223a      	movs	r2, #58	@ 0x3a
 800b3be:	2101      	movs	r1, #1
 800b3c0:	5499      	strb	r1, [r3, r2]
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	223b      	movs	r2, #59	@ 0x3b
 800b3c6:	2101      	movs	r1, #1
 800b3c8:	5499      	strb	r1, [r3, r2]
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	223c      	movs	r2, #60	@ 0x3c
 800b3ce:	2101      	movs	r1, #1
 800b3d0:	5499      	strb	r1, [r3, r2]
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	223d      	movs	r2, #61	@ 0x3d
 800b3d6:	2101      	movs	r1, #1
 800b3d8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	2239      	movs	r2, #57	@ 0x39
 800b3de:	2101      	movs	r1, #1
 800b3e0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b3e2:	2300      	movs	r3, #0
}
 800b3e4:	0018      	movs	r0, r3
 800b3e6:	46bd      	mov	sp, r7
 800b3e8:	b002      	add	sp, #8
 800b3ea:	bd80      	pop	{r7, pc}

0800b3ec <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800b3ec:	b580      	push	{r7, lr}
 800b3ee:	b082      	sub	sp, #8
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800b3f4:	46c0      	nop			@ (mov r8, r8)
 800b3f6:	46bd      	mov	sp, r7
 800b3f8:	b002      	add	sp, #8
 800b3fa:	bd80      	pop	{r7, pc}

0800b3fc <HAL_TIM_PWM_Init>:
>>>>>>> main
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 800b0a8:	b580      	push	{r7, lr}
 800b0aa:	b082      	sub	sp, #8
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d101      	bne.n	800b0ba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b0b6:	2301      	movs	r3, #1
 800b0b8:	e032      	b.n	800b120 <HAL_TIM_PWM_Init+0x78>
=======
 800b3fc:	b580      	push	{r7, lr}
 800b3fe:	b082      	sub	sp, #8
 800b400:	af00      	add	r7, sp, #0
 800b402:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	2b00      	cmp	r3, #0
 800b408:	d101      	bne.n	800b40e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b40a:	2301      	movs	r3, #1
 800b40c:	e032      	b.n	800b474 <HAL_TIM_PWM_Init+0x78>
>>>>>>> main
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
<<<<<<< HEAD
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	2239      	movs	r2, #57	@ 0x39
 800b0be:	5c9b      	ldrb	r3, [r3, r2]
 800b0c0:	b2db      	uxtb	r3, r3
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d107      	bne.n	800b0d6 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	2238      	movs	r2, #56	@ 0x38
 800b0ca:	2100      	movs	r1, #0
 800b0cc:	5499      	strb	r1, [r3, r2]
=======
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	2239      	movs	r2, #57	@ 0x39
 800b412:	5c9b      	ldrb	r3, [r3, r2]
 800b414:	b2db      	uxtb	r3, r3
 800b416:	2b00      	cmp	r3, #0
 800b418:	d107      	bne.n	800b42a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	2238      	movs	r2, #56	@ 0x38
 800b41e:	2100      	movs	r1, #0
 800b420:	5499      	strb	r1, [r3, r2]
>>>>>>> main
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
<<<<<<< HEAD
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	0018      	movs	r0, r3
 800b0d2:	f7fa fed5 	bl	8005e80 <HAL_TIM_PWM_MspInit>
=======
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	0018      	movs	r0, r3
 800b426:	f7fa ff15 	bl	8006254 <HAL_TIM_PWM_MspInit>
>>>>>>> main
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< HEAD
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	2239      	movs	r2, #57	@ 0x39
 800b0da:	2102      	movs	r1, #2
 800b0dc:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	681a      	ldr	r2, [r3, #0]
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	3304      	adds	r3, #4
 800b0e6:	0019      	movs	r1, r3
 800b0e8:	0010      	movs	r0, r2
 800b0ea:	f000 f975 	bl	800b3d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	223e      	movs	r2, #62	@ 0x3e
 800b0f2:	2101      	movs	r1, #1
 800b0f4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	223a      	movs	r2, #58	@ 0x3a
 800b0fa:	2101      	movs	r1, #1
 800b0fc:	5499      	strb	r1, [r3, r2]
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	223b      	movs	r2, #59	@ 0x3b
 800b102:	2101      	movs	r1, #1
 800b104:	5499      	strb	r1, [r3, r2]
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	223c      	movs	r2, #60	@ 0x3c
 800b10a:	2101      	movs	r1, #1
 800b10c:	5499      	strb	r1, [r3, r2]
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	223d      	movs	r2, #61	@ 0x3d
 800b112:	2101      	movs	r1, #1
 800b114:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	2239      	movs	r2, #57	@ 0x39
 800b11a:	2101      	movs	r1, #1
 800b11c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b11e:	2300      	movs	r3, #0
}
 800b120:	0018      	movs	r0, r3
 800b122:	46bd      	mov	sp, r7
 800b124:	b002      	add	sp, #8
 800b126:	bd80      	pop	{r7, pc}

0800b128 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
=======
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	2239      	movs	r2, #57	@ 0x39
 800b42e:	2102      	movs	r1, #2
 800b430:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	681a      	ldr	r2, [r3, #0]
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	3304      	adds	r3, #4
 800b43a:	0019      	movs	r1, r3
 800b43c:	0010      	movs	r0, r2
 800b43e:	f000 f93b 	bl	800b6b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	223e      	movs	r2, #62	@ 0x3e
 800b446:	2101      	movs	r1, #1
 800b448:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	223a      	movs	r2, #58	@ 0x3a
 800b44e:	2101      	movs	r1, #1
 800b450:	5499      	strb	r1, [r3, r2]
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	223b      	movs	r2, #59	@ 0x3b
 800b456:	2101      	movs	r1, #1
 800b458:	5499      	strb	r1, [r3, r2]
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	223c      	movs	r2, #60	@ 0x3c
 800b45e:	2101      	movs	r1, #1
 800b460:	5499      	strb	r1, [r3, r2]
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	223d      	movs	r2, #61	@ 0x3d
 800b466:	2101      	movs	r1, #1
 800b468:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	2239      	movs	r2, #57	@ 0x39
 800b46e:	2101      	movs	r1, #1
 800b470:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b472:	2300      	movs	r3, #0
}
 800b474:	0018      	movs	r0, r3
 800b476:	46bd      	mov	sp, r7
 800b478:	b002      	add	sp, #8
 800b47a:	bd80      	pop	{r7, pc}

0800b47c <HAL_TIM_OC_ConfigChannel>:
>>>>>>> main
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
<<<<<<< HEAD
 800b128:	b580      	push	{r7, lr}
 800b12a:	b084      	sub	sp, #16
 800b12c:	af00      	add	r7, sp, #0
 800b12e:	6078      	str	r0, [r7, #4]
 800b130:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b132:	683b      	ldr	r3, [r7, #0]
 800b134:	2b00      	cmp	r3, #0
 800b136:	d108      	bne.n	800b14a <HAL_TIM_PWM_Start+0x22>
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	223a      	movs	r2, #58	@ 0x3a
 800b13c:	5c9b      	ldrb	r3, [r3, r2]
 800b13e:	b2db      	uxtb	r3, r3
 800b140:	3b01      	subs	r3, #1
 800b142:	1e5a      	subs	r2, r3, #1
 800b144:	4193      	sbcs	r3, r2
 800b146:	b2db      	uxtb	r3, r3
 800b148:	e01f      	b.n	800b18a <HAL_TIM_PWM_Start+0x62>
 800b14a:	683b      	ldr	r3, [r7, #0]
 800b14c:	2b04      	cmp	r3, #4
 800b14e:	d108      	bne.n	800b162 <HAL_TIM_PWM_Start+0x3a>
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	223b      	movs	r2, #59	@ 0x3b
 800b154:	5c9b      	ldrb	r3, [r3, r2]
 800b156:	b2db      	uxtb	r3, r3
 800b158:	3b01      	subs	r3, #1
 800b15a:	1e5a      	subs	r2, r3, #1
 800b15c:	4193      	sbcs	r3, r2
 800b15e:	b2db      	uxtb	r3, r3
 800b160:	e013      	b.n	800b18a <HAL_TIM_PWM_Start+0x62>
 800b162:	683b      	ldr	r3, [r7, #0]
 800b164:	2b08      	cmp	r3, #8
 800b166:	d108      	bne.n	800b17a <HAL_TIM_PWM_Start+0x52>
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	223c      	movs	r2, #60	@ 0x3c
 800b16c:	5c9b      	ldrb	r3, [r3, r2]
 800b16e:	b2db      	uxtb	r3, r3
 800b170:	3b01      	subs	r3, #1
 800b172:	1e5a      	subs	r2, r3, #1
 800b174:	4193      	sbcs	r3, r2
 800b176:	b2db      	uxtb	r3, r3
 800b178:	e007      	b.n	800b18a <HAL_TIM_PWM_Start+0x62>
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	223d      	movs	r2, #61	@ 0x3d
 800b17e:	5c9b      	ldrb	r3, [r3, r2]
 800b180:	b2db      	uxtb	r3, r3
 800b182:	3b01      	subs	r3, #1
 800b184:	1e5a      	subs	r2, r3, #1
 800b186:	4193      	sbcs	r3, r2
 800b188:	b2db      	uxtb	r3, r3
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d001      	beq.n	800b192 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 800b18e:	2301      	movs	r3, #1
 800b190:	e052      	b.n	800b238 <HAL_TIM_PWM_Start+0x110>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b192:	683b      	ldr	r3, [r7, #0]
 800b194:	2b00      	cmp	r3, #0
 800b196:	d104      	bne.n	800b1a2 <HAL_TIM_PWM_Start+0x7a>
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	223a      	movs	r2, #58	@ 0x3a
 800b19c:	2102      	movs	r1, #2
 800b19e:	5499      	strb	r1, [r3, r2]
 800b1a0:	e013      	b.n	800b1ca <HAL_TIM_PWM_Start+0xa2>
 800b1a2:	683b      	ldr	r3, [r7, #0]
 800b1a4:	2b04      	cmp	r3, #4
 800b1a6:	d104      	bne.n	800b1b2 <HAL_TIM_PWM_Start+0x8a>
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	223b      	movs	r2, #59	@ 0x3b
 800b1ac:	2102      	movs	r1, #2
 800b1ae:	5499      	strb	r1, [r3, r2]
 800b1b0:	e00b      	b.n	800b1ca <HAL_TIM_PWM_Start+0xa2>
 800b1b2:	683b      	ldr	r3, [r7, #0]
 800b1b4:	2b08      	cmp	r3, #8
 800b1b6:	d104      	bne.n	800b1c2 <HAL_TIM_PWM_Start+0x9a>
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	223c      	movs	r2, #60	@ 0x3c
 800b1bc:	2102      	movs	r1, #2
 800b1be:	5499      	strb	r1, [r3, r2]
 800b1c0:	e003      	b.n	800b1ca <HAL_TIM_PWM_Start+0xa2>
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	223d      	movs	r2, #61	@ 0x3d
 800b1c6:	2102      	movs	r1, #2
 800b1c8:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	6839      	ldr	r1, [r7, #0]
 800b1d0:	2201      	movs	r2, #1
 800b1d2:	0018      	movs	r0, r3
 800b1d4:	f000 fa62 	bl	800b69c <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	681a      	ldr	r2, [r3, #0]
 800b1dc:	2380      	movs	r3, #128	@ 0x80
 800b1de:	05db      	lsls	r3, r3, #23
 800b1e0:	429a      	cmp	r2, r3
 800b1e2:	d00e      	beq.n	800b202 <HAL_TIM_PWM_Start+0xda>
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	4a15      	ldr	r2, [pc, #84]	@ (800b240 <HAL_TIM_PWM_Start+0x118>)
 800b1ea:	4293      	cmp	r3, r2
 800b1ec:	d009      	beq.n	800b202 <HAL_TIM_PWM_Start+0xda>
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	4a14      	ldr	r2, [pc, #80]	@ (800b244 <HAL_TIM_PWM_Start+0x11c>)
 800b1f4:	4293      	cmp	r3, r2
 800b1f6:	d004      	beq.n	800b202 <HAL_TIM_PWM_Start+0xda>
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	4a12      	ldr	r2, [pc, #72]	@ (800b248 <HAL_TIM_PWM_Start+0x120>)
 800b1fe:	4293      	cmp	r3, r2
 800b200:	d111      	bne.n	800b226 <HAL_TIM_PWM_Start+0xfe>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	689b      	ldr	r3, [r3, #8]
 800b208:	2207      	movs	r2, #7
 800b20a:	4013      	ands	r3, r2
 800b20c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	2b06      	cmp	r3, #6
 800b212:	d010      	beq.n	800b236 <HAL_TIM_PWM_Start+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	681a      	ldr	r2, [r3, #0]
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	2101      	movs	r1, #1
 800b220:	430a      	orrs	r2, r1
 800b222:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b224:	e007      	b.n	800b236 <HAL_TIM_PWM_Start+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	681a      	ldr	r2, [r3, #0]
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	2101      	movs	r1, #1
 800b232:	430a      	orrs	r2, r1
 800b234:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b236:	2300      	movs	r3, #0
}
 800b238:	0018      	movs	r0, r3
 800b23a:	46bd      	mov	sp, r7
 800b23c:	b004      	add	sp, #16
 800b23e:	bd80      	pop	{r7, pc}
 800b240:	40000400 	.word	0x40000400
 800b244:	40010800 	.word	0x40010800
 800b248:	40011400 	.word	0x40011400

0800b24c <HAL_TIM_PWM_ConfigChannel>:
=======
 800b47c:	b580      	push	{r7, lr}
 800b47e:	b086      	sub	sp, #24
 800b480:	af00      	add	r7, sp, #0
 800b482:	60f8      	str	r0, [r7, #12]
 800b484:	60b9      	str	r1, [r7, #8]
 800b486:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b488:	2317      	movs	r3, #23
 800b48a:	18fb      	adds	r3, r7, r3
 800b48c:	2200      	movs	r2, #0
 800b48e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	2238      	movs	r2, #56	@ 0x38
 800b494:	5c9b      	ldrb	r3, [r3, r2]
 800b496:	2b01      	cmp	r3, #1
 800b498:	d101      	bne.n	800b49e <HAL_TIM_OC_ConfigChannel+0x22>
 800b49a:	2302      	movs	r3, #2
 800b49c:	e042      	b.n	800b524 <HAL_TIM_OC_ConfigChannel+0xa8>
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	2238      	movs	r2, #56	@ 0x38
 800b4a2:	2101      	movs	r1, #1
 800b4a4:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	2b0c      	cmp	r3, #12
 800b4aa:	d027      	beq.n	800b4fc <HAL_TIM_OC_ConfigChannel+0x80>
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	2b0c      	cmp	r3, #12
 800b4b0:	d82c      	bhi.n	800b50c <HAL_TIM_OC_ConfigChannel+0x90>
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	2b08      	cmp	r3, #8
 800b4b6:	d019      	beq.n	800b4ec <HAL_TIM_OC_ConfigChannel+0x70>
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	2b08      	cmp	r3, #8
 800b4bc:	d826      	bhi.n	800b50c <HAL_TIM_OC_ConfigChannel+0x90>
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d003      	beq.n	800b4cc <HAL_TIM_OC_ConfigChannel+0x50>
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	2b04      	cmp	r3, #4
 800b4c8:	d008      	beq.n	800b4dc <HAL_TIM_OC_ConfigChannel+0x60>
 800b4ca:	e01f      	b.n	800b50c <HAL_TIM_OC_ConfigChannel+0x90>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	68ba      	ldr	r2, [r7, #8]
 800b4d2:	0011      	movs	r1, r2
 800b4d4:	0018      	movs	r0, r3
 800b4d6:	f000 f94d 	bl	800b774 <TIM_OC1_SetConfig>
      break;
 800b4da:	e01c      	b.n	800b516 <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	68ba      	ldr	r2, [r7, #8]
 800b4e2:	0011      	movs	r1, r2
 800b4e4:	0018      	movs	r0, r3
 800b4e6:	f000 f981 	bl	800b7ec <TIM_OC2_SetConfig>
      break;
 800b4ea:	e014      	b.n	800b516 <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	68ba      	ldr	r2, [r7, #8]
 800b4f2:	0011      	movs	r1, r2
 800b4f4:	0018      	movs	r0, r3
 800b4f6:	f000 f9bb 	bl	800b870 <TIM_OC3_SetConfig>
      break;
 800b4fa:	e00c      	b.n	800b516 <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	68ba      	ldr	r2, [r7, #8]
 800b502:	0011      	movs	r1, r2
 800b504:	0018      	movs	r0, r3
 800b506:	f000 f9f3 	bl	800b8f0 <TIM_OC4_SetConfig>
      break;
 800b50a:	e004      	b.n	800b516 <HAL_TIM_OC_ConfigChannel+0x9a>
    }

    default:
      status = HAL_ERROR;
 800b50c:	2317      	movs	r3, #23
 800b50e:	18fb      	adds	r3, r7, r3
 800b510:	2201      	movs	r2, #1
 800b512:	701a      	strb	r2, [r3, #0]
      break;
 800b514:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	2238      	movs	r2, #56	@ 0x38
 800b51a:	2100      	movs	r1, #0
 800b51c:	5499      	strb	r1, [r3, r2]

  return status;
 800b51e:	2317      	movs	r3, #23
 800b520:	18fb      	adds	r3, r7, r3
 800b522:	781b      	ldrb	r3, [r3, #0]
}
 800b524:	0018      	movs	r0, r3
 800b526:	46bd      	mov	sp, r7
 800b528:	b006      	add	sp, #24
 800b52a:	bd80      	pop	{r7, pc}

0800b52c <HAL_TIM_PWM_ConfigChannel>:
>>>>>>> main
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
<<<<<<< HEAD
 800b24c:	b580      	push	{r7, lr}
 800b24e:	b086      	sub	sp, #24
 800b250:	af00      	add	r7, sp, #0
 800b252:	60f8      	str	r0, [r7, #12]
 800b254:	60b9      	str	r1, [r7, #8]
 800b256:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b258:	2317      	movs	r3, #23
 800b25a:	18fb      	adds	r3, r7, r3
 800b25c:	2200      	movs	r2, #0
 800b25e:	701a      	strb	r2, [r3, #0]
=======
 800b52c:	b580      	push	{r7, lr}
 800b52e:	b086      	sub	sp, #24
 800b530:	af00      	add	r7, sp, #0
 800b532:	60f8      	str	r0, [r7, #12]
 800b534:	60b9      	str	r1, [r7, #8]
 800b536:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b538:	2317      	movs	r3, #23
 800b53a:	18fb      	adds	r3, r7, r3
 800b53c:	2200      	movs	r2, #0
 800b53e:	701a      	strb	r2, [r3, #0]
>>>>>>> main
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
<<<<<<< HEAD
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	2238      	movs	r2, #56	@ 0x38
 800b264:	5c9b      	ldrb	r3, [r3, r2]
 800b266:	2b01      	cmp	r3, #1
 800b268:	d101      	bne.n	800b26e <HAL_TIM_PWM_ConfigChannel+0x22>
 800b26a:	2302      	movs	r3, #2
 800b26c:	e0ad      	b.n	800b3ca <HAL_TIM_PWM_ConfigChannel+0x17e>
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	2238      	movs	r2, #56	@ 0x38
 800b272:	2101      	movs	r1, #1
 800b274:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	2b0c      	cmp	r3, #12
 800b27a:	d100      	bne.n	800b27e <HAL_TIM_PWM_ConfigChannel+0x32>
 800b27c:	e076      	b.n	800b36c <HAL_TIM_PWM_ConfigChannel+0x120>
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	2b0c      	cmp	r3, #12
 800b282:	d900      	bls.n	800b286 <HAL_TIM_PWM_ConfigChannel+0x3a>
 800b284:	e095      	b.n	800b3b2 <HAL_TIM_PWM_ConfigChannel+0x166>
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	2b08      	cmp	r3, #8
 800b28a:	d04e      	beq.n	800b32a <HAL_TIM_PWM_ConfigChannel+0xde>
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	2b08      	cmp	r3, #8
 800b290:	d900      	bls.n	800b294 <HAL_TIM_PWM_ConfigChannel+0x48>
 800b292:	e08e      	b.n	800b3b2 <HAL_TIM_PWM_ConfigChannel+0x166>
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	2b00      	cmp	r3, #0
 800b298:	d003      	beq.n	800b2a2 <HAL_TIM_PWM_ConfigChannel+0x56>
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	2b04      	cmp	r3, #4
 800b29e:	d021      	beq.n	800b2e4 <HAL_TIM_PWM_ConfigChannel+0x98>
 800b2a0:	e087      	b.n	800b3b2 <HAL_TIM_PWM_ConfigChannel+0x166>
=======
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	2238      	movs	r2, #56	@ 0x38
 800b544:	5c9b      	ldrb	r3, [r3, r2]
 800b546:	2b01      	cmp	r3, #1
 800b548:	d101      	bne.n	800b54e <HAL_TIM_PWM_ConfigChannel+0x22>
 800b54a:	2302      	movs	r3, #2
 800b54c:	e0ad      	b.n	800b6aa <HAL_TIM_PWM_ConfigChannel+0x17e>
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	2238      	movs	r2, #56	@ 0x38
 800b552:	2101      	movs	r1, #1
 800b554:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	2b0c      	cmp	r3, #12
 800b55a:	d100      	bne.n	800b55e <HAL_TIM_PWM_ConfigChannel+0x32>
 800b55c:	e076      	b.n	800b64c <HAL_TIM_PWM_ConfigChannel+0x120>
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	2b0c      	cmp	r3, #12
 800b562:	d900      	bls.n	800b566 <HAL_TIM_PWM_ConfigChannel+0x3a>
 800b564:	e095      	b.n	800b692 <HAL_TIM_PWM_ConfigChannel+0x166>
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	2b08      	cmp	r3, #8
 800b56a:	d04e      	beq.n	800b60a <HAL_TIM_PWM_ConfigChannel+0xde>
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	2b08      	cmp	r3, #8
 800b570:	d900      	bls.n	800b574 <HAL_TIM_PWM_ConfigChannel+0x48>
 800b572:	e08e      	b.n	800b692 <HAL_TIM_PWM_ConfigChannel+0x166>
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	2b00      	cmp	r3, #0
 800b578:	d003      	beq.n	800b582 <HAL_TIM_PWM_ConfigChannel+0x56>
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	2b04      	cmp	r3, #4
 800b57e:	d021      	beq.n	800b5c4 <HAL_TIM_PWM_ConfigChannel+0x98>
 800b580:	e087      	b.n	800b692 <HAL_TIM_PWM_ConfigChannel+0x166>
>>>>>>> main
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
<<<<<<< HEAD
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	68ba      	ldr	r2, [r7, #8]
 800b2a8:	0011      	movs	r1, r2
 800b2aa:	0018      	movs	r0, r3
 800b2ac:	f000 f8f2 	bl	800b494 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	699a      	ldr	r2, [r3, #24]
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	2108      	movs	r1, #8
 800b2bc:	430a      	orrs	r2, r1
 800b2be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	699a      	ldr	r2, [r3, #24]
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	2104      	movs	r1, #4
 800b2cc:	438a      	bics	r2, r1
 800b2ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	6999      	ldr	r1, [r3, #24]
 800b2d6:	68bb      	ldr	r3, [r7, #8]
 800b2d8:	68da      	ldr	r2, [r3, #12]
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	430a      	orrs	r2, r1
 800b2e0:	619a      	str	r2, [r3, #24]
      break;
 800b2e2:	e06b      	b.n	800b3bc <HAL_TIM_PWM_ConfigChannel+0x170>
=======
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	68ba      	ldr	r2, [r7, #8]
 800b588:	0011      	movs	r1, r2
 800b58a:	0018      	movs	r0, r3
 800b58c:	f000 f8f2 	bl	800b774 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	699a      	ldr	r2, [r3, #24]
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	2108      	movs	r1, #8
 800b59c:	430a      	orrs	r2, r1
 800b59e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	699a      	ldr	r2, [r3, #24]
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	2104      	movs	r1, #4
 800b5ac:	438a      	bics	r2, r1
 800b5ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	6999      	ldr	r1, [r3, #24]
 800b5b6:	68bb      	ldr	r3, [r7, #8]
 800b5b8:	68da      	ldr	r2, [r3, #12]
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	430a      	orrs	r2, r1
 800b5c0:	619a      	str	r2, [r3, #24]
      break;
 800b5c2:	e06b      	b.n	800b69c <HAL_TIM_PWM_ConfigChannel+0x170>
>>>>>>> main
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
<<<<<<< HEAD
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	68ba      	ldr	r2, [r7, #8]
 800b2ea:	0011      	movs	r1, r2
 800b2ec:	0018      	movs	r0, r3
 800b2ee:	f000 f90d 	bl	800b50c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	699a      	ldr	r2, [r3, #24]
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	2180      	movs	r1, #128	@ 0x80
 800b2fe:	0109      	lsls	r1, r1, #4
 800b300:	430a      	orrs	r2, r1
 800b302:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	699a      	ldr	r2, [r3, #24]
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	4931      	ldr	r1, [pc, #196]	@ (800b3d4 <HAL_TIM_PWM_ConfigChannel+0x188>)
 800b310:	400a      	ands	r2, r1
 800b312:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	6999      	ldr	r1, [r3, #24]
 800b31a:	68bb      	ldr	r3, [r7, #8]
 800b31c:	68db      	ldr	r3, [r3, #12]
 800b31e:	021a      	lsls	r2, r3, #8
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	430a      	orrs	r2, r1
 800b326:	619a      	str	r2, [r3, #24]
      break;
 800b328:	e048      	b.n	800b3bc <HAL_TIM_PWM_ConfigChannel+0x170>
=======
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	68ba      	ldr	r2, [r7, #8]
 800b5ca:	0011      	movs	r1, r2
 800b5cc:	0018      	movs	r0, r3
 800b5ce:	f000 f90d 	bl	800b7ec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	699a      	ldr	r2, [r3, #24]
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	2180      	movs	r1, #128	@ 0x80
 800b5de:	0109      	lsls	r1, r1, #4
 800b5e0:	430a      	orrs	r2, r1
 800b5e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	699a      	ldr	r2, [r3, #24]
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	4931      	ldr	r1, [pc, #196]	@ (800b6b4 <HAL_TIM_PWM_ConfigChannel+0x188>)
 800b5f0:	400a      	ands	r2, r1
 800b5f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	6999      	ldr	r1, [r3, #24]
 800b5fa:	68bb      	ldr	r3, [r7, #8]
 800b5fc:	68db      	ldr	r3, [r3, #12]
 800b5fe:	021a      	lsls	r2, r3, #8
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	430a      	orrs	r2, r1
 800b606:	619a      	str	r2, [r3, #24]
      break;
 800b608:	e048      	b.n	800b69c <HAL_TIM_PWM_ConfigChannel+0x170>
>>>>>>> main
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
<<<<<<< HEAD
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	68ba      	ldr	r2, [r7, #8]
 800b330:	0011      	movs	r1, r2
 800b332:	0018      	movs	r0, r3
 800b334:	f000 f92c 	bl	800b590 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	69da      	ldr	r2, [r3, #28]
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	2108      	movs	r1, #8
 800b344:	430a      	orrs	r2, r1
 800b346:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	69da      	ldr	r2, [r3, #28]
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	2104      	movs	r1, #4
 800b354:	438a      	bics	r2, r1
 800b356:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	69d9      	ldr	r1, [r3, #28]
 800b35e:	68bb      	ldr	r3, [r7, #8]
 800b360:	68da      	ldr	r2, [r3, #12]
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	430a      	orrs	r2, r1
 800b368:	61da      	str	r2, [r3, #28]
      break;
 800b36a:	e027      	b.n	800b3bc <HAL_TIM_PWM_ConfigChannel+0x170>
=======
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	68ba      	ldr	r2, [r7, #8]
 800b610:	0011      	movs	r1, r2
 800b612:	0018      	movs	r0, r3
 800b614:	f000 f92c 	bl	800b870 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	69da      	ldr	r2, [r3, #28]
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	2108      	movs	r1, #8
 800b624:	430a      	orrs	r2, r1
 800b626:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	69da      	ldr	r2, [r3, #28]
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	2104      	movs	r1, #4
 800b634:	438a      	bics	r2, r1
 800b636:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	69d9      	ldr	r1, [r3, #28]
 800b63e:	68bb      	ldr	r3, [r7, #8]
 800b640:	68da      	ldr	r2, [r3, #12]
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	430a      	orrs	r2, r1
 800b648:	61da      	str	r2, [r3, #28]
      break;
 800b64a:	e027      	b.n	800b69c <HAL_TIM_PWM_ConfigChannel+0x170>
>>>>>>> main
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
<<<<<<< HEAD
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	68ba      	ldr	r2, [r7, #8]
 800b372:	0011      	movs	r1, r2
 800b374:	0018      	movs	r0, r3
 800b376:	f000 f94b 	bl	800b610 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	69da      	ldr	r2, [r3, #28]
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	2180      	movs	r1, #128	@ 0x80
 800b386:	0109      	lsls	r1, r1, #4
 800b388:	430a      	orrs	r2, r1
 800b38a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	69da      	ldr	r2, [r3, #28]
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	490f      	ldr	r1, [pc, #60]	@ (800b3d4 <HAL_TIM_PWM_ConfigChannel+0x188>)
 800b398:	400a      	ands	r2, r1
 800b39a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	69d9      	ldr	r1, [r3, #28]
 800b3a2:	68bb      	ldr	r3, [r7, #8]
 800b3a4:	68db      	ldr	r3, [r3, #12]
 800b3a6:	021a      	lsls	r2, r3, #8
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	430a      	orrs	r2, r1
 800b3ae:	61da      	str	r2, [r3, #28]
      break;
 800b3b0:	e004      	b.n	800b3bc <HAL_TIM_PWM_ConfigChannel+0x170>
=======
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	68ba      	ldr	r2, [r7, #8]
 800b652:	0011      	movs	r1, r2
 800b654:	0018      	movs	r0, r3
 800b656:	f000 f94b 	bl	800b8f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	69da      	ldr	r2, [r3, #28]
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	2180      	movs	r1, #128	@ 0x80
 800b666:	0109      	lsls	r1, r1, #4
 800b668:	430a      	orrs	r2, r1
 800b66a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	69da      	ldr	r2, [r3, #28]
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	490f      	ldr	r1, [pc, #60]	@ (800b6b4 <HAL_TIM_PWM_ConfigChannel+0x188>)
 800b678:	400a      	ands	r2, r1
 800b67a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	69d9      	ldr	r1, [r3, #28]
 800b682:	68bb      	ldr	r3, [r7, #8]
 800b684:	68db      	ldr	r3, [r3, #12]
 800b686:	021a      	lsls	r2, r3, #8
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	430a      	orrs	r2, r1
 800b68e:	61da      	str	r2, [r3, #28]
      break;
 800b690:	e004      	b.n	800b69c <HAL_TIM_PWM_ConfigChannel+0x170>
>>>>>>> main
    }

    default:
      status = HAL_ERROR;
<<<<<<< HEAD
 800b3b2:	2317      	movs	r3, #23
 800b3b4:	18fb      	adds	r3, r7, r3
 800b3b6:	2201      	movs	r2, #1
 800b3b8:	701a      	strb	r2, [r3, #0]
      break;
 800b3ba:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	2238      	movs	r2, #56	@ 0x38
 800b3c0:	2100      	movs	r1, #0
 800b3c2:	5499      	strb	r1, [r3, r2]

  return status;
 800b3c4:	2317      	movs	r3, #23
 800b3c6:	18fb      	adds	r3, r7, r3
 800b3c8:	781b      	ldrb	r3, [r3, #0]
}
 800b3ca:	0018      	movs	r0, r3
 800b3cc:	46bd      	mov	sp, r7
 800b3ce:	b006      	add	sp, #24
 800b3d0:	bd80      	pop	{r7, pc}
 800b3d2:	46c0      	nop			@ (mov r8, r8)
 800b3d4:	fffffbff 	.word	0xfffffbff

0800b3d8 <TIM_Base_SetConfig>:
=======
 800b692:	2317      	movs	r3, #23
 800b694:	18fb      	adds	r3, r7, r3
 800b696:	2201      	movs	r2, #1
 800b698:	701a      	strb	r2, [r3, #0]
      break;
 800b69a:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	2238      	movs	r2, #56	@ 0x38
 800b6a0:	2100      	movs	r1, #0
 800b6a2:	5499      	strb	r1, [r3, r2]

  return status;
 800b6a4:	2317      	movs	r3, #23
 800b6a6:	18fb      	adds	r3, r7, r3
 800b6a8:	781b      	ldrb	r3, [r3, #0]
}
 800b6aa:	0018      	movs	r0, r3
 800b6ac:	46bd      	mov	sp, r7
 800b6ae:	b006      	add	sp, #24
 800b6b0:	bd80      	pop	{r7, pc}
 800b6b2:	46c0      	nop			@ (mov r8, r8)
 800b6b4:	fffffbff 	.word	0xfffffbff

0800b6b8 <TIM_Base_SetConfig>:
>>>>>>> main
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
<<<<<<< HEAD
 800b3d8:	b580      	push	{r7, lr}
 800b3da:	b084      	sub	sp, #16
 800b3dc:	af00      	add	r7, sp, #0
 800b3de:	6078      	str	r0, [r7, #4]
 800b3e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b3e8:	687a      	ldr	r2, [r7, #4]
 800b3ea:	2380      	movs	r3, #128	@ 0x80
 800b3ec:	05db      	lsls	r3, r3, #23
 800b3ee:	429a      	cmp	r2, r3
 800b3f0:	d00b      	beq.n	800b40a <TIM_Base_SetConfig+0x32>
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	4a23      	ldr	r2, [pc, #140]	@ (800b484 <TIM_Base_SetConfig+0xac>)
 800b3f6:	4293      	cmp	r3, r2
 800b3f8:	d007      	beq.n	800b40a <TIM_Base_SetConfig+0x32>
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	4a22      	ldr	r2, [pc, #136]	@ (800b488 <TIM_Base_SetConfig+0xb0>)
 800b3fe:	4293      	cmp	r3, r2
 800b400:	d003      	beq.n	800b40a <TIM_Base_SetConfig+0x32>
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	4a21      	ldr	r2, [pc, #132]	@ (800b48c <TIM_Base_SetConfig+0xb4>)
 800b406:	4293      	cmp	r3, r2
 800b408:	d108      	bne.n	800b41c <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	2270      	movs	r2, #112	@ 0x70
 800b40e:	4393      	bics	r3, r2
 800b410:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b412:	683b      	ldr	r3, [r7, #0]
 800b414:	685b      	ldr	r3, [r3, #4]
 800b416:	68fa      	ldr	r2, [r7, #12]
 800b418:	4313      	orrs	r3, r2
 800b41a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b41c:	687a      	ldr	r2, [r7, #4]
 800b41e:	2380      	movs	r3, #128	@ 0x80
 800b420:	05db      	lsls	r3, r3, #23
 800b422:	429a      	cmp	r2, r3
 800b424:	d00b      	beq.n	800b43e <TIM_Base_SetConfig+0x66>
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	4a16      	ldr	r2, [pc, #88]	@ (800b484 <TIM_Base_SetConfig+0xac>)
 800b42a:	4293      	cmp	r3, r2
 800b42c:	d007      	beq.n	800b43e <TIM_Base_SetConfig+0x66>
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	4a15      	ldr	r2, [pc, #84]	@ (800b488 <TIM_Base_SetConfig+0xb0>)
 800b432:	4293      	cmp	r3, r2
 800b434:	d003      	beq.n	800b43e <TIM_Base_SetConfig+0x66>
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	4a14      	ldr	r2, [pc, #80]	@ (800b48c <TIM_Base_SetConfig+0xb4>)
 800b43a:	4293      	cmp	r3, r2
 800b43c:	d108      	bne.n	800b450 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	4a13      	ldr	r2, [pc, #76]	@ (800b490 <TIM_Base_SetConfig+0xb8>)
 800b442:	4013      	ands	r3, r2
 800b444:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b446:	683b      	ldr	r3, [r7, #0]
 800b448:	68db      	ldr	r3, [r3, #12]
 800b44a:	68fa      	ldr	r2, [r7, #12]
 800b44c:	4313      	orrs	r3, r2
 800b44e:	60fb      	str	r3, [r7, #12]
=======
 800b6b8:	b580      	push	{r7, lr}
 800b6ba:	b084      	sub	sp, #16
 800b6bc:	af00      	add	r7, sp, #0
 800b6be:	6078      	str	r0, [r7, #4]
 800b6c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b6c8:	687a      	ldr	r2, [r7, #4]
 800b6ca:	2380      	movs	r3, #128	@ 0x80
 800b6cc:	05db      	lsls	r3, r3, #23
 800b6ce:	429a      	cmp	r2, r3
 800b6d0:	d00b      	beq.n	800b6ea <TIM_Base_SetConfig+0x32>
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	4a23      	ldr	r2, [pc, #140]	@ (800b764 <TIM_Base_SetConfig+0xac>)
 800b6d6:	4293      	cmp	r3, r2
 800b6d8:	d007      	beq.n	800b6ea <TIM_Base_SetConfig+0x32>
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	4a22      	ldr	r2, [pc, #136]	@ (800b768 <TIM_Base_SetConfig+0xb0>)
 800b6de:	4293      	cmp	r3, r2
 800b6e0:	d003      	beq.n	800b6ea <TIM_Base_SetConfig+0x32>
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	4a21      	ldr	r2, [pc, #132]	@ (800b76c <TIM_Base_SetConfig+0xb4>)
 800b6e6:	4293      	cmp	r3, r2
 800b6e8:	d108      	bne.n	800b6fc <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	2270      	movs	r2, #112	@ 0x70
 800b6ee:	4393      	bics	r3, r2
 800b6f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b6f2:	683b      	ldr	r3, [r7, #0]
 800b6f4:	685b      	ldr	r3, [r3, #4]
 800b6f6:	68fa      	ldr	r2, [r7, #12]
 800b6f8:	4313      	orrs	r3, r2
 800b6fa:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b6fc:	687a      	ldr	r2, [r7, #4]
 800b6fe:	2380      	movs	r3, #128	@ 0x80
 800b700:	05db      	lsls	r3, r3, #23
 800b702:	429a      	cmp	r2, r3
 800b704:	d00b      	beq.n	800b71e <TIM_Base_SetConfig+0x66>
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	4a16      	ldr	r2, [pc, #88]	@ (800b764 <TIM_Base_SetConfig+0xac>)
 800b70a:	4293      	cmp	r3, r2
 800b70c:	d007      	beq.n	800b71e <TIM_Base_SetConfig+0x66>
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	4a15      	ldr	r2, [pc, #84]	@ (800b768 <TIM_Base_SetConfig+0xb0>)
 800b712:	4293      	cmp	r3, r2
 800b714:	d003      	beq.n	800b71e <TIM_Base_SetConfig+0x66>
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	4a14      	ldr	r2, [pc, #80]	@ (800b76c <TIM_Base_SetConfig+0xb4>)
 800b71a:	4293      	cmp	r3, r2
 800b71c:	d108      	bne.n	800b730 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	4a13      	ldr	r2, [pc, #76]	@ (800b770 <TIM_Base_SetConfig+0xb8>)
 800b722:	4013      	ands	r3, r2
 800b724:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b726:	683b      	ldr	r3, [r7, #0]
 800b728:	68db      	ldr	r3, [r3, #12]
 800b72a:	68fa      	ldr	r2, [r7, #12]
 800b72c:	4313      	orrs	r3, r2
 800b72e:	60fb      	str	r3, [r7, #12]
>>>>>>> main
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
<<<<<<< HEAD
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	2280      	movs	r2, #128	@ 0x80
 800b454:	4393      	bics	r3, r2
 800b456:	001a      	movs	r2, r3
 800b458:	683b      	ldr	r3, [r7, #0]
 800b45a:	691b      	ldr	r3, [r3, #16]
 800b45c:	4313      	orrs	r3, r2
 800b45e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	68fa      	ldr	r2, [r7, #12]
 800b464:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b466:	683b      	ldr	r3, [r7, #0]
 800b468:	689a      	ldr	r2, [r3, #8]
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b46e:	683b      	ldr	r3, [r7, #0]
 800b470:	681a      	ldr	r2, [r3, #0]
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	629a      	str	r2, [r3, #40]	@ 0x28
=======
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	2280      	movs	r2, #128	@ 0x80
 800b734:	4393      	bics	r3, r2
 800b736:	001a      	movs	r2, r3
 800b738:	683b      	ldr	r3, [r7, #0]
 800b73a:	691b      	ldr	r3, [r3, #16]
 800b73c:	4313      	orrs	r3, r2
 800b73e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	68fa      	ldr	r2, [r7, #12]
 800b744:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b746:	683b      	ldr	r3, [r7, #0]
 800b748:	689a      	ldr	r2, [r3, #8]
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b74e:	683b      	ldr	r3, [r7, #0]
 800b750:	681a      	ldr	r2, [r3, #0]
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	629a      	str	r2, [r3, #40]	@ 0x28
>>>>>>> main

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
<<<<<<< HEAD
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	2201      	movs	r2, #1
 800b47a:	615a      	str	r2, [r3, #20]
}
 800b47c:	46c0      	nop			@ (mov r8, r8)
 800b47e:	46bd      	mov	sp, r7
 800b480:	b004      	add	sp, #16
 800b482:	bd80      	pop	{r7, pc}
 800b484:	40000400 	.word	0x40000400
 800b488:	40010800 	.word	0x40010800
 800b48c:	40011400 	.word	0x40011400
 800b490:	fffffcff 	.word	0xfffffcff

0800b494 <TIM_OC1_SetConfig>:
=======
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	2201      	movs	r2, #1
 800b75a:	615a      	str	r2, [r3, #20]
}
 800b75c:	46c0      	nop			@ (mov r8, r8)
 800b75e:	46bd      	mov	sp, r7
 800b760:	b004      	add	sp, #16
 800b762:	bd80      	pop	{r7, pc}
 800b764:	40000400 	.word	0x40000400
 800b768:	40010800 	.word	0x40010800
 800b76c:	40011400 	.word	0x40011400
 800b770:	fffffcff 	.word	0xfffffcff

0800b774 <TIM_OC1_SetConfig>:
>>>>>>> main
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< HEAD
 800b494:	b580      	push	{r7, lr}
 800b496:	b086      	sub	sp, #24
 800b498:	af00      	add	r7, sp, #0
 800b49a:	6078      	str	r0, [r7, #4]
 800b49c:	6039      	str	r1, [r7, #0]
=======
 800b774:	b580      	push	{r7, lr}
 800b776:	b086      	sub	sp, #24
 800b778:	af00      	add	r7, sp, #0
 800b77a:	6078      	str	r0, [r7, #4]
 800b77c:	6039      	str	r1, [r7, #0]
>>>>>>> main
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
<<<<<<< HEAD
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	6a1b      	ldr	r3, [r3, #32]
 800b4a2:	2201      	movs	r2, #1
 800b4a4:	4393      	bics	r3, r2
 800b4a6:	001a      	movs	r2, r3
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	6a1b      	ldr	r3, [r3, #32]
 800b4b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	685b      	ldr	r3, [r3, #4]
 800b4b6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	699b      	ldr	r3, [r3, #24]
 800b4bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	2270      	movs	r2, #112	@ 0x70
 800b4c2:	4393      	bics	r3, r2
 800b4c4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	2203      	movs	r2, #3
 800b4ca:	4393      	bics	r3, r2
 800b4cc:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b4ce:	683b      	ldr	r3, [r7, #0]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	68fa      	ldr	r2, [r7, #12]
 800b4d4:	4313      	orrs	r3, r2
 800b4d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b4d8:	697b      	ldr	r3, [r7, #20]
 800b4da:	2202      	movs	r2, #2
 800b4dc:	4393      	bics	r3, r2
 800b4de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b4e0:	683b      	ldr	r3, [r7, #0]
 800b4e2:	689b      	ldr	r3, [r3, #8]
 800b4e4:	697a      	ldr	r2, [r7, #20]
 800b4e6:	4313      	orrs	r3, r2
 800b4e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	693a      	ldr	r2, [r7, #16]
 800b4ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	68fa      	ldr	r2, [r7, #12]
 800b4f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b4f6:	683b      	ldr	r3, [r7, #0]
 800b4f8:	685a      	ldr	r2, [r3, #4]
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	697a      	ldr	r2, [r7, #20]
 800b502:	621a      	str	r2, [r3, #32]
}
 800b504:	46c0      	nop			@ (mov r8, r8)
 800b506:	46bd      	mov	sp, r7
 800b508:	b006      	add	sp, #24
 800b50a:	bd80      	pop	{r7, pc}

0800b50c <TIM_OC2_SetConfig>:
=======
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	6a1b      	ldr	r3, [r3, #32]
 800b782:	2201      	movs	r2, #1
 800b784:	4393      	bics	r3, r2
 800b786:	001a      	movs	r2, r3
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	6a1b      	ldr	r3, [r3, #32]
 800b790:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	685b      	ldr	r3, [r3, #4]
 800b796:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	699b      	ldr	r3, [r3, #24]
 800b79c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	2270      	movs	r2, #112	@ 0x70
 800b7a2:	4393      	bics	r3, r2
 800b7a4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	2203      	movs	r2, #3
 800b7aa:	4393      	bics	r3, r2
 800b7ac:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b7ae:	683b      	ldr	r3, [r7, #0]
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	68fa      	ldr	r2, [r7, #12]
 800b7b4:	4313      	orrs	r3, r2
 800b7b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b7b8:	697b      	ldr	r3, [r7, #20]
 800b7ba:	2202      	movs	r2, #2
 800b7bc:	4393      	bics	r3, r2
 800b7be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b7c0:	683b      	ldr	r3, [r7, #0]
 800b7c2:	689b      	ldr	r3, [r3, #8]
 800b7c4:	697a      	ldr	r2, [r7, #20]
 800b7c6:	4313      	orrs	r3, r2
 800b7c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	693a      	ldr	r2, [r7, #16]
 800b7ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	68fa      	ldr	r2, [r7, #12]
 800b7d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b7d6:	683b      	ldr	r3, [r7, #0]
 800b7d8:	685a      	ldr	r2, [r3, #4]
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	697a      	ldr	r2, [r7, #20]
 800b7e2:	621a      	str	r2, [r3, #32]
}
 800b7e4:	46c0      	nop			@ (mov r8, r8)
 800b7e6:	46bd      	mov	sp, r7
 800b7e8:	b006      	add	sp, #24
 800b7ea:	bd80      	pop	{r7, pc}

0800b7ec <TIM_OC2_SetConfig>:
>>>>>>> main
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< HEAD
 800b50c:	b580      	push	{r7, lr}
 800b50e:	b086      	sub	sp, #24
 800b510:	af00      	add	r7, sp, #0
 800b512:	6078      	str	r0, [r7, #4]
 800b514:	6039      	str	r1, [r7, #0]
=======
 800b7ec:	b580      	push	{r7, lr}
 800b7ee:	b086      	sub	sp, #24
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	6078      	str	r0, [r7, #4]
 800b7f4:	6039      	str	r1, [r7, #0]
>>>>>>> main
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
<<<<<<< HEAD
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	6a1b      	ldr	r3, [r3, #32]
 800b51a:	2210      	movs	r2, #16
 800b51c:	4393      	bics	r3, r2
 800b51e:	001a      	movs	r2, r3
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	6a1b      	ldr	r3, [r3, #32]
 800b528:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	685b      	ldr	r3, [r3, #4]
 800b52e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	699b      	ldr	r3, [r3, #24]
 800b534:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	4a13      	ldr	r2, [pc, #76]	@ (800b588 <TIM_OC2_SetConfig+0x7c>)
 800b53a:	4013      	ands	r3, r2
 800b53c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	4a12      	ldr	r2, [pc, #72]	@ (800b58c <TIM_OC2_SetConfig+0x80>)
 800b542:	4013      	ands	r3, r2
 800b544:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b546:	683b      	ldr	r3, [r7, #0]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	021b      	lsls	r3, r3, #8
 800b54c:	68fa      	ldr	r2, [r7, #12]
 800b54e:	4313      	orrs	r3, r2
 800b550:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b552:	697b      	ldr	r3, [r7, #20]
 800b554:	2220      	movs	r2, #32
 800b556:	4393      	bics	r3, r2
 800b558:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b55a:	683b      	ldr	r3, [r7, #0]
 800b55c:	689b      	ldr	r3, [r3, #8]
 800b55e:	011b      	lsls	r3, r3, #4
 800b560:	697a      	ldr	r2, [r7, #20]
 800b562:	4313      	orrs	r3, r2
 800b564:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	693a      	ldr	r2, [r7, #16]
 800b56a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	68fa      	ldr	r2, [r7, #12]
 800b570:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b572:	683b      	ldr	r3, [r7, #0]
 800b574:	685a      	ldr	r2, [r3, #4]
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	697a      	ldr	r2, [r7, #20]
 800b57e:	621a      	str	r2, [r3, #32]
}
 800b580:	46c0      	nop			@ (mov r8, r8)
 800b582:	46bd      	mov	sp, r7
 800b584:	b006      	add	sp, #24
 800b586:	bd80      	pop	{r7, pc}
 800b588:	ffff8fff 	.word	0xffff8fff
 800b58c:	fffffcff 	.word	0xfffffcff

0800b590 <TIM_OC3_SetConfig>:
=======
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	6a1b      	ldr	r3, [r3, #32]
 800b7fa:	2210      	movs	r2, #16
 800b7fc:	4393      	bics	r3, r2
 800b7fe:	001a      	movs	r2, r3
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	6a1b      	ldr	r3, [r3, #32]
 800b808:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	685b      	ldr	r3, [r3, #4]
 800b80e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	699b      	ldr	r3, [r3, #24]
 800b814:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	4a13      	ldr	r2, [pc, #76]	@ (800b868 <TIM_OC2_SetConfig+0x7c>)
 800b81a:	4013      	ands	r3, r2
 800b81c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	4a12      	ldr	r2, [pc, #72]	@ (800b86c <TIM_OC2_SetConfig+0x80>)
 800b822:	4013      	ands	r3, r2
 800b824:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b826:	683b      	ldr	r3, [r7, #0]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	021b      	lsls	r3, r3, #8
 800b82c:	68fa      	ldr	r2, [r7, #12]
 800b82e:	4313      	orrs	r3, r2
 800b830:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b832:	697b      	ldr	r3, [r7, #20]
 800b834:	2220      	movs	r2, #32
 800b836:	4393      	bics	r3, r2
 800b838:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b83a:	683b      	ldr	r3, [r7, #0]
 800b83c:	689b      	ldr	r3, [r3, #8]
 800b83e:	011b      	lsls	r3, r3, #4
 800b840:	697a      	ldr	r2, [r7, #20]
 800b842:	4313      	orrs	r3, r2
 800b844:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	693a      	ldr	r2, [r7, #16]
 800b84a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	68fa      	ldr	r2, [r7, #12]
 800b850:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b852:	683b      	ldr	r3, [r7, #0]
 800b854:	685a      	ldr	r2, [r3, #4]
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	697a      	ldr	r2, [r7, #20]
 800b85e:	621a      	str	r2, [r3, #32]
}
 800b860:	46c0      	nop			@ (mov r8, r8)
 800b862:	46bd      	mov	sp, r7
 800b864:	b006      	add	sp, #24
 800b866:	bd80      	pop	{r7, pc}
 800b868:	ffff8fff 	.word	0xffff8fff
 800b86c:	fffffcff 	.word	0xfffffcff

0800b870 <TIM_OC3_SetConfig>:
>>>>>>> main
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< HEAD
 800b590:	b580      	push	{r7, lr}
 800b592:	b086      	sub	sp, #24
 800b594:	af00      	add	r7, sp, #0
 800b596:	6078      	str	r0, [r7, #4]
 800b598:	6039      	str	r1, [r7, #0]
=======
 800b870:	b580      	push	{r7, lr}
 800b872:	b086      	sub	sp, #24
 800b874:	af00      	add	r7, sp, #0
 800b876:	6078      	str	r0, [r7, #4]
 800b878:	6039      	str	r1, [r7, #0]
>>>>>>> main
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
<<<<<<< HEAD
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	6a1b      	ldr	r3, [r3, #32]
 800b59e:	4a1a      	ldr	r2, [pc, #104]	@ (800b608 <TIM_OC3_SetConfig+0x78>)
 800b5a0:	401a      	ands	r2, r3
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	6a1b      	ldr	r3, [r3, #32]
 800b5aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	685b      	ldr	r3, [r3, #4]
 800b5b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	69db      	ldr	r3, [r3, #28]
 800b5b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	2270      	movs	r2, #112	@ 0x70
 800b5bc:	4393      	bics	r3, r2
 800b5be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	2203      	movs	r2, #3
 800b5c4:	4393      	bics	r3, r2
 800b5c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b5c8:	683b      	ldr	r3, [r7, #0]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	68fa      	ldr	r2, [r7, #12]
 800b5ce:	4313      	orrs	r3, r2
 800b5d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b5d2:	697b      	ldr	r3, [r7, #20]
 800b5d4:	4a0d      	ldr	r2, [pc, #52]	@ (800b60c <TIM_OC3_SetConfig+0x7c>)
 800b5d6:	4013      	ands	r3, r2
 800b5d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b5da:	683b      	ldr	r3, [r7, #0]
 800b5dc:	689b      	ldr	r3, [r3, #8]
 800b5de:	021b      	lsls	r3, r3, #8
 800b5e0:	697a      	ldr	r2, [r7, #20]
 800b5e2:	4313      	orrs	r3, r2
 800b5e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	693a      	ldr	r2, [r7, #16]
 800b5ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	68fa      	ldr	r2, [r7, #12]
 800b5f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b5f2:	683b      	ldr	r3, [r7, #0]
 800b5f4:	685a      	ldr	r2, [r3, #4]
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	697a      	ldr	r2, [r7, #20]
 800b5fe:	621a      	str	r2, [r3, #32]
}
 800b600:	46c0      	nop			@ (mov r8, r8)
 800b602:	46bd      	mov	sp, r7
 800b604:	b006      	add	sp, #24
 800b606:	bd80      	pop	{r7, pc}
 800b608:	fffffeff 	.word	0xfffffeff
 800b60c:	fffffdff 	.word	0xfffffdff

0800b610 <TIM_OC4_SetConfig>:
=======
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	6a1b      	ldr	r3, [r3, #32]
 800b87e:	4a1a      	ldr	r2, [pc, #104]	@ (800b8e8 <TIM_OC3_SetConfig+0x78>)
 800b880:	401a      	ands	r2, r3
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	6a1b      	ldr	r3, [r3, #32]
 800b88a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	685b      	ldr	r3, [r3, #4]
 800b890:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	69db      	ldr	r3, [r3, #28]
 800b896:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	2270      	movs	r2, #112	@ 0x70
 800b89c:	4393      	bics	r3, r2
 800b89e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	2203      	movs	r2, #3
 800b8a4:	4393      	bics	r3, r2
 800b8a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b8a8:	683b      	ldr	r3, [r7, #0]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	68fa      	ldr	r2, [r7, #12]
 800b8ae:	4313      	orrs	r3, r2
 800b8b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b8b2:	697b      	ldr	r3, [r7, #20]
 800b8b4:	4a0d      	ldr	r2, [pc, #52]	@ (800b8ec <TIM_OC3_SetConfig+0x7c>)
 800b8b6:	4013      	ands	r3, r2
 800b8b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b8ba:	683b      	ldr	r3, [r7, #0]
 800b8bc:	689b      	ldr	r3, [r3, #8]
 800b8be:	021b      	lsls	r3, r3, #8
 800b8c0:	697a      	ldr	r2, [r7, #20]
 800b8c2:	4313      	orrs	r3, r2
 800b8c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	693a      	ldr	r2, [r7, #16]
 800b8ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	68fa      	ldr	r2, [r7, #12]
 800b8d0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b8d2:	683b      	ldr	r3, [r7, #0]
 800b8d4:	685a      	ldr	r2, [r3, #4]
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	697a      	ldr	r2, [r7, #20]
 800b8de:	621a      	str	r2, [r3, #32]
}
 800b8e0:	46c0      	nop			@ (mov r8, r8)
 800b8e2:	46bd      	mov	sp, r7
 800b8e4:	b006      	add	sp, #24
 800b8e6:	bd80      	pop	{r7, pc}
 800b8e8:	fffffeff 	.word	0xfffffeff
 800b8ec:	fffffdff 	.word	0xfffffdff

0800b8f0 <TIM_OC4_SetConfig>:
>>>>>>> main
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< HEAD
 800b610:	b580      	push	{r7, lr}
 800b612:	b086      	sub	sp, #24
 800b614:	af00      	add	r7, sp, #0
 800b616:	6078      	str	r0, [r7, #4]
 800b618:	6039      	str	r1, [r7, #0]
=======
 800b8f0:	b580      	push	{r7, lr}
 800b8f2:	b086      	sub	sp, #24
 800b8f4:	af00      	add	r7, sp, #0
 800b8f6:	6078      	str	r0, [r7, #4]
 800b8f8:	6039      	str	r1, [r7, #0]
>>>>>>> main
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
<<<<<<< HEAD
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	6a1b      	ldr	r3, [r3, #32]
 800b61e:	4a1b      	ldr	r2, [pc, #108]	@ (800b68c <TIM_OC4_SetConfig+0x7c>)
 800b620:	401a      	ands	r2, r3
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	6a1b      	ldr	r3, [r3, #32]
 800b62a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	685b      	ldr	r3, [r3, #4]
 800b630:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	69db      	ldr	r3, [r3, #28]
 800b636:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	4a15      	ldr	r2, [pc, #84]	@ (800b690 <TIM_OC4_SetConfig+0x80>)
 800b63c:	4013      	ands	r3, r2
 800b63e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	4a14      	ldr	r2, [pc, #80]	@ (800b694 <TIM_OC4_SetConfig+0x84>)
 800b644:	4013      	ands	r3, r2
 800b646:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b648:	683b      	ldr	r3, [r7, #0]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	021b      	lsls	r3, r3, #8
 800b64e:	68fa      	ldr	r2, [r7, #12]
 800b650:	4313      	orrs	r3, r2
 800b652:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b654:	697b      	ldr	r3, [r7, #20]
 800b656:	4a10      	ldr	r2, [pc, #64]	@ (800b698 <TIM_OC4_SetConfig+0x88>)
 800b658:	4013      	ands	r3, r2
 800b65a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b65c:	683b      	ldr	r3, [r7, #0]
 800b65e:	689b      	ldr	r3, [r3, #8]
 800b660:	031b      	lsls	r3, r3, #12
 800b662:	697a      	ldr	r2, [r7, #20]
 800b664:	4313      	orrs	r3, r2
 800b666:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	693a      	ldr	r2, [r7, #16]
 800b66c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	68fa      	ldr	r2, [r7, #12]
 800b672:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b674:	683b      	ldr	r3, [r7, #0]
 800b676:	685a      	ldr	r2, [r3, #4]
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	697a      	ldr	r2, [r7, #20]
 800b680:	621a      	str	r2, [r3, #32]
}
 800b682:	46c0      	nop			@ (mov r8, r8)
 800b684:	46bd      	mov	sp, r7
 800b686:	b006      	add	sp, #24
 800b688:	bd80      	pop	{r7, pc}
 800b68a:	46c0      	nop			@ (mov r8, r8)
 800b68c:	ffffefff 	.word	0xffffefff
 800b690:	ffff8fff 	.word	0xffff8fff
 800b694:	fffffcff 	.word	0xfffffcff
 800b698:	ffffdfff 	.word	0xffffdfff

0800b69c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b69c:	b580      	push	{r7, lr}
 800b69e:	b086      	sub	sp, #24
 800b6a0:	af00      	add	r7, sp, #0
 800b6a2:	60f8      	str	r0, [r7, #12]
 800b6a4:	60b9      	str	r1, [r7, #8]
 800b6a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b6a8:	68bb      	ldr	r3, [r7, #8]
 800b6aa:	221f      	movs	r2, #31
 800b6ac:	4013      	ands	r3, r2
 800b6ae:	2201      	movs	r2, #1
 800b6b0:	409a      	lsls	r2, r3
 800b6b2:	0013      	movs	r3, r2
 800b6b4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	6a1b      	ldr	r3, [r3, #32]
 800b6ba:	697a      	ldr	r2, [r7, #20]
 800b6bc:	43d2      	mvns	r2, r2
 800b6be:	401a      	ands	r2, r3
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	6a1a      	ldr	r2, [r3, #32]
 800b6c8:	68bb      	ldr	r3, [r7, #8]
 800b6ca:	211f      	movs	r1, #31
 800b6cc:	400b      	ands	r3, r1
 800b6ce:	6879      	ldr	r1, [r7, #4]
 800b6d0:	4099      	lsls	r1, r3
 800b6d2:	000b      	movs	r3, r1
 800b6d4:	431a      	orrs	r2, r3
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	621a      	str	r2, [r3, #32]
}
 800b6da:	46c0      	nop			@ (mov r8, r8)
 800b6dc:	46bd      	mov	sp, r7
 800b6de:	b006      	add	sp, #24
 800b6e0:	bd80      	pop	{r7, pc}
	...

0800b6e4 <HAL_TIMEx_MasterConfigSynchronization>:
=======
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	6a1b      	ldr	r3, [r3, #32]
 800b8fe:	4a1b      	ldr	r2, [pc, #108]	@ (800b96c <TIM_OC4_SetConfig+0x7c>)
 800b900:	401a      	ands	r2, r3
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	6a1b      	ldr	r3, [r3, #32]
 800b90a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	685b      	ldr	r3, [r3, #4]
 800b910:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	69db      	ldr	r3, [r3, #28]
 800b916:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	4a15      	ldr	r2, [pc, #84]	@ (800b970 <TIM_OC4_SetConfig+0x80>)
 800b91c:	4013      	ands	r3, r2
 800b91e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	4a14      	ldr	r2, [pc, #80]	@ (800b974 <TIM_OC4_SetConfig+0x84>)
 800b924:	4013      	ands	r3, r2
 800b926:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b928:	683b      	ldr	r3, [r7, #0]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	021b      	lsls	r3, r3, #8
 800b92e:	68fa      	ldr	r2, [r7, #12]
 800b930:	4313      	orrs	r3, r2
 800b932:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b934:	697b      	ldr	r3, [r7, #20]
 800b936:	4a10      	ldr	r2, [pc, #64]	@ (800b978 <TIM_OC4_SetConfig+0x88>)
 800b938:	4013      	ands	r3, r2
 800b93a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b93c:	683b      	ldr	r3, [r7, #0]
 800b93e:	689b      	ldr	r3, [r3, #8]
 800b940:	031b      	lsls	r3, r3, #12
 800b942:	697a      	ldr	r2, [r7, #20]
 800b944:	4313      	orrs	r3, r2
 800b946:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	693a      	ldr	r2, [r7, #16]
 800b94c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	68fa      	ldr	r2, [r7, #12]
 800b952:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b954:	683b      	ldr	r3, [r7, #0]
 800b956:	685a      	ldr	r2, [r3, #4]
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	697a      	ldr	r2, [r7, #20]
 800b960:	621a      	str	r2, [r3, #32]
}
 800b962:	46c0      	nop			@ (mov r8, r8)
 800b964:	46bd      	mov	sp, r7
 800b966:	b006      	add	sp, #24
 800b968:	bd80      	pop	{r7, pc}
 800b96a:	46c0      	nop			@ (mov r8, r8)
 800b96c:	ffffefff 	.word	0xffffefff
 800b970:	ffff8fff 	.word	0xffff8fff
 800b974:	fffffcff 	.word	0xfffffcff
 800b978:	ffffdfff 	.word	0xffffdfff

0800b97c <HAL_TIMEx_MasterConfigSynchronization>:
>>>>>>> main
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
<<<<<<< HEAD
 800b6e4:	b580      	push	{r7, lr}
 800b6e6:	b084      	sub	sp, #16
 800b6e8:	af00      	add	r7, sp, #0
 800b6ea:	6078      	str	r0, [r7, #4]
 800b6ec:	6039      	str	r1, [r7, #0]
=======
 800b97c:	b580      	push	{r7, lr}
 800b97e:	b084      	sub	sp, #16
 800b980:	af00      	add	r7, sp, #0
 800b982:	6078      	str	r0, [r7, #4]
 800b984:	6039      	str	r1, [r7, #0]
>>>>>>> main
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
<<<<<<< HEAD
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	2238      	movs	r2, #56	@ 0x38
 800b6f2:	5c9b      	ldrb	r3, [r3, r2]
 800b6f4:	2b01      	cmp	r3, #1
 800b6f6:	d101      	bne.n	800b6fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b6f8:	2302      	movs	r3, #2
 800b6fa:	e047      	b.n	800b78c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	2238      	movs	r2, #56	@ 0x38
 800b700:	2101      	movs	r1, #1
 800b702:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	2239      	movs	r2, #57	@ 0x39
 800b708:	2102      	movs	r1, #2
 800b70a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	685b      	ldr	r3, [r3, #4]
 800b712:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	689b      	ldr	r3, [r3, #8]
 800b71a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	2270      	movs	r2, #112	@ 0x70
 800b720:	4393      	bics	r3, r2
 800b722:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b724:	683b      	ldr	r3, [r7, #0]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	68fa      	ldr	r2, [r7, #12]
 800b72a:	4313      	orrs	r3, r2
 800b72c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	68fa      	ldr	r2, [r7, #12]
 800b734:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	681a      	ldr	r2, [r3, #0]
 800b73a:	2380      	movs	r3, #128	@ 0x80
 800b73c:	05db      	lsls	r3, r3, #23
 800b73e:	429a      	cmp	r2, r3
 800b740:	d00e      	beq.n	800b760 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	4a13      	ldr	r2, [pc, #76]	@ (800b794 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800b748:	4293      	cmp	r3, r2
 800b74a:	d009      	beq.n	800b760 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	4a11      	ldr	r2, [pc, #68]	@ (800b798 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800b752:	4293      	cmp	r3, r2
 800b754:	d004      	beq.n	800b760 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	4a10      	ldr	r2, [pc, #64]	@ (800b79c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800b75c:	4293      	cmp	r3, r2
 800b75e:	d10c      	bne.n	800b77a <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b760:	68bb      	ldr	r3, [r7, #8]
 800b762:	2280      	movs	r2, #128	@ 0x80
 800b764:	4393      	bics	r3, r2
 800b766:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b768:	683b      	ldr	r3, [r7, #0]
 800b76a:	685b      	ldr	r3, [r3, #4]
 800b76c:	68ba      	ldr	r2, [r7, #8]
 800b76e:	4313      	orrs	r3, r2
 800b770:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	68ba      	ldr	r2, [r7, #8]
 800b778:	609a      	str	r2, [r3, #8]
=======
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	2238      	movs	r2, #56	@ 0x38
 800b98a:	5c9b      	ldrb	r3, [r3, r2]
 800b98c:	2b01      	cmp	r3, #1
 800b98e:	d101      	bne.n	800b994 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b990:	2302      	movs	r3, #2
 800b992:	e047      	b.n	800ba24 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	2238      	movs	r2, #56	@ 0x38
 800b998:	2101      	movs	r1, #1
 800b99a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	2239      	movs	r2, #57	@ 0x39
 800b9a0:	2102      	movs	r1, #2
 800b9a2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	685b      	ldr	r3, [r3, #4]
 800b9aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	689b      	ldr	r3, [r3, #8]
 800b9b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	2270      	movs	r2, #112	@ 0x70
 800b9b8:	4393      	bics	r3, r2
 800b9ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b9bc:	683b      	ldr	r3, [r7, #0]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	68fa      	ldr	r2, [r7, #12]
 800b9c2:	4313      	orrs	r3, r2
 800b9c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	68fa      	ldr	r2, [r7, #12]
 800b9cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	681a      	ldr	r2, [r3, #0]
 800b9d2:	2380      	movs	r3, #128	@ 0x80
 800b9d4:	05db      	lsls	r3, r3, #23
 800b9d6:	429a      	cmp	r2, r3
 800b9d8:	d00e      	beq.n	800b9f8 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	4a13      	ldr	r2, [pc, #76]	@ (800ba2c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800b9e0:	4293      	cmp	r3, r2
 800b9e2:	d009      	beq.n	800b9f8 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	4a11      	ldr	r2, [pc, #68]	@ (800ba30 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800b9ea:	4293      	cmp	r3, r2
 800b9ec:	d004      	beq.n	800b9f8 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	4a10      	ldr	r2, [pc, #64]	@ (800ba34 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800b9f4:	4293      	cmp	r3, r2
 800b9f6:	d10c      	bne.n	800ba12 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b9f8:	68bb      	ldr	r3, [r7, #8]
 800b9fa:	2280      	movs	r2, #128	@ 0x80
 800b9fc:	4393      	bics	r3, r2
 800b9fe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ba00:	683b      	ldr	r3, [r7, #0]
 800ba02:	685b      	ldr	r3, [r3, #4]
 800ba04:	68ba      	ldr	r2, [r7, #8]
 800ba06:	4313      	orrs	r3, r2
 800ba08:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	68ba      	ldr	r2, [r7, #8]
 800ba10:	609a      	str	r2, [r3, #8]
>>>>>>> main
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
<<<<<<< HEAD
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	2239      	movs	r2, #57	@ 0x39
 800b77e:	2101      	movs	r1, #1
 800b780:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	2238      	movs	r2, #56	@ 0x38
 800b786:	2100      	movs	r1, #0
 800b788:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b78a:	2300      	movs	r3, #0
}
 800b78c:	0018      	movs	r0, r3
 800b78e:	46bd      	mov	sp, r7
 800b790:	b004      	add	sp, #16
 800b792:	bd80      	pop	{r7, pc}
 800b794:	40000400 	.word	0x40000400
 800b798:	40010800 	.word	0x40010800
 800b79c:	40011400 	.word	0x40011400

0800b7a0 <HAL_TIMEx_RemapConfig>:
=======
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	2239      	movs	r2, #57	@ 0x39
 800ba16:	2101      	movs	r1, #1
 800ba18:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	2238      	movs	r2, #56	@ 0x38
 800ba1e:	2100      	movs	r1, #0
 800ba20:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800ba22:	2300      	movs	r3, #0
}
 800ba24:	0018      	movs	r0, r3
 800ba26:	46bd      	mov	sp, r7
 800ba28:	b004      	add	sp, #16
 800ba2a:	bd80      	pop	{r7, pc}
 800ba2c:	40000400 	.word	0x40000400
 800ba30:	40010800 	.word	0x40010800
 800ba34:	40011400 	.word	0x40011400

0800ba38 <HAL_TIMEx_RemapConfig>:
>>>>>>> main
  @endif
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
<<<<<<< HEAD
 800b7a0:	b580      	push	{r7, lr}
 800b7a2:	b082      	sub	sp, #8
 800b7a4:	af00      	add	r7, sp, #0
 800b7a6:	6078      	str	r0, [r7, #4]
 800b7a8:	6039      	str	r1, [r7, #0]
=======
 800ba38:	b580      	push	{r7, lr}
 800ba3a:	b082      	sub	sp, #8
 800ba3c:	af00      	add	r7, sp, #0
 800ba3e:	6078      	str	r0, [r7, #4]
 800ba40:	6039      	str	r1, [r7, #0]
>>>>>>> main

  /* Check parameters */
  assert_param(IS_TIM_REMAP(htim->Instance, Remap));

  __HAL_LOCK(htim);
<<<<<<< HEAD
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	2238      	movs	r2, #56	@ 0x38
 800b7ae:	5c9b      	ldrb	r3, [r3, r2]
 800b7b0:	2b01      	cmp	r3, #1
 800b7b2:	d101      	bne.n	800b7b8 <HAL_TIMEx_RemapConfig+0x18>
 800b7b4:	2302      	movs	r3, #2
 800b7b6:	e00c      	b.n	800b7d2 <HAL_TIMEx_RemapConfig+0x32>
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	2238      	movs	r2, #56	@ 0x38
 800b7bc:	2101      	movs	r1, #1
 800b7be:	5499      	strb	r1, [r3, r2]

  /* Set the Timer remapping configuration */
  WRITE_REG(htim->Instance->OR, Remap);
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	683a      	ldr	r2, [r7, #0]
 800b7c6:	651a      	str	r2, [r3, #80]	@ 0x50

  __HAL_UNLOCK(htim);
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	2238      	movs	r2, #56	@ 0x38
 800b7cc:	2100      	movs	r1, #0
 800b7ce:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b7d0:	2300      	movs	r3, #0
}
 800b7d2:	0018      	movs	r0, r3
 800b7d4:	46bd      	mov	sp, r7
 800b7d6:	b002      	add	sp, #8
 800b7d8:	bd80      	pop	{r7, pc}
	...

0800b7dc <HAL_UART_Init>:
=======
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	2238      	movs	r2, #56	@ 0x38
 800ba46:	5c9b      	ldrb	r3, [r3, r2]
 800ba48:	2b01      	cmp	r3, #1
 800ba4a:	d101      	bne.n	800ba50 <HAL_TIMEx_RemapConfig+0x18>
 800ba4c:	2302      	movs	r3, #2
 800ba4e:	e00c      	b.n	800ba6a <HAL_TIMEx_RemapConfig+0x32>
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	2238      	movs	r2, #56	@ 0x38
 800ba54:	2101      	movs	r1, #1
 800ba56:	5499      	strb	r1, [r3, r2]

  /* Set the Timer remapping configuration */
  WRITE_REG(htim->Instance->OR, Remap);
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	683a      	ldr	r2, [r7, #0]
 800ba5e:	651a      	str	r2, [r3, #80]	@ 0x50

  __HAL_UNLOCK(htim);
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	2238      	movs	r2, #56	@ 0x38
 800ba64:	2100      	movs	r1, #0
 800ba66:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800ba68:	2300      	movs	r3, #0
}
 800ba6a:	0018      	movs	r0, r3
 800ba6c:	46bd      	mov	sp, r7
 800ba6e:	b002      	add	sp, #8
 800ba70:	bd80      	pop	{r7, pc}
	...

0800ba74 <HAL_UART_Init>:
>>>>>>> main
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 800b7dc:	b580      	push	{r7, lr}
 800b7de:	b082      	sub	sp, #8
 800b7e0:	af00      	add	r7, sp, #0
 800b7e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d101      	bne.n	800b7ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b7ea:	2301      	movs	r3, #1
 800b7ec:	e053      	b.n	800b896 <HAL_UART_Init+0xba>
=======
 800ba74:	b580      	push	{r7, lr}
 800ba76:	b082      	sub	sp, #8
 800ba78:	af00      	add	r7, sp, #0
 800ba7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d101      	bne.n	800ba86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ba82:	2301      	movs	r3, #1
 800ba84:	e053      	b.n	800bb2e <HAL_UART_Init+0xba>
>>>>>>> main
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
<<<<<<< HEAD
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d116      	bne.n	800b824 <HAL_UART_Init+0x48>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	2278      	movs	r2, #120	@ 0x78
 800b7fa:	2100      	movs	r1, #0
 800b7fc:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	0018      	movs	r0, r3
 800b802:	f000 fc19 	bl	800c038 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	22b0      	movs	r2, #176	@ 0xb0
 800b80a:	589b      	ldr	r3, [r3, r2]
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d103      	bne.n	800b818 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	21b0      	movs	r1, #176	@ 0xb0
 800b814:	4a22      	ldr	r2, [pc, #136]	@ (800b8a0 <HAL_UART_Init+0xc4>)
 800b816:	505a      	str	r2, [r3, r1]
=======
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d116      	bne.n	800babc <HAL_UART_Init+0x48>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	2278      	movs	r2, #120	@ 0x78
 800ba92:	2100      	movs	r1, #0
 800ba94:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	0018      	movs	r0, r3
 800ba9a:	f000 fc19 	bl	800c2d0 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	22b0      	movs	r2, #176	@ 0xb0
 800baa2:	589b      	ldr	r3, [r3, r2]
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d103      	bne.n	800bab0 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	21b0      	movs	r1, #176	@ 0xb0
 800baac:	4a22      	ldr	r2, [pc, #136]	@ (800bb38 <HAL_UART_Init+0xc4>)
 800baae:	505a      	str	r2, [r3, r1]
>>>>>>> main
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
<<<<<<< HEAD
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	22b0      	movs	r2, #176	@ 0xb0
 800b81c:	589b      	ldr	r3, [r3, r2]
 800b81e:	687a      	ldr	r2, [r7, #4]
 800b820:	0010      	movs	r0, r2
 800b822:	4798      	blx	r3
=======
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	22b0      	movs	r2, #176	@ 0xb0
 800bab4:	589b      	ldr	r3, [r3, r2]
 800bab6:	687a      	ldr	r2, [r7, #4]
 800bab8:	0010      	movs	r0, r2
 800baba:	4798      	blx	r3
>>>>>>> main
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
<<<<<<< HEAD
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	2224      	movs	r2, #36	@ 0x24
 800b828:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	681a      	ldr	r2, [r3, #0]
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	2101      	movs	r1, #1
 800b836:	438a      	bics	r2, r1
 800b838:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	0018      	movs	r0, r3
 800b83e:	f000 fc3f 	bl	800c0c0 <UART_SetConfig>
 800b842:	0003      	movs	r3, r0
 800b844:	2b01      	cmp	r3, #1
 800b846:	d101      	bne.n	800b84c <HAL_UART_Init+0x70>
  {
    return HAL_ERROR;
 800b848:	2301      	movs	r3, #1
 800b84a:	e024      	b.n	800b896 <HAL_UART_Init+0xba>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b850:	2b00      	cmp	r3, #0
 800b852:	d003      	beq.n	800b85c <HAL_UART_Init+0x80>
  {
    UART_AdvFeatureConfig(huart);
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	0018      	movs	r0, r3
 800b858:	f000 fed0 	bl	800c5fc <UART_AdvFeatureConfig>
=======
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	2224      	movs	r2, #36	@ 0x24
 800bac0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	681a      	ldr	r2, [r3, #0]
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	2101      	movs	r1, #1
 800bace:	438a      	bics	r2, r1
 800bad0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	0018      	movs	r0, r3
 800bad6:	f000 fc3f 	bl	800c358 <UART_SetConfig>
 800bada:	0003      	movs	r3, r0
 800badc:	2b01      	cmp	r3, #1
 800bade:	d101      	bne.n	800bae4 <HAL_UART_Init+0x70>
  {
    return HAL_ERROR;
 800bae0:	2301      	movs	r3, #1
 800bae2:	e024      	b.n	800bb2e <HAL_UART_Init+0xba>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d003      	beq.n	800baf4 <HAL_UART_Init+0x80>
  {
    UART_AdvFeatureConfig(huart);
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	0018      	movs	r0, r3
 800baf0:	f000 fed0 	bl	800c894 <UART_AdvFeatureConfig>
>>>>>>> main
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
<<<<<<< HEAD
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	685a      	ldr	r2, [r3, #4]
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	490f      	ldr	r1, [pc, #60]	@ (800b8a4 <HAL_UART_Init+0xc8>)
 800b868:	400a      	ands	r2, r1
 800b86a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	689a      	ldr	r2, [r3, #8]
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	212a      	movs	r1, #42	@ 0x2a
 800b878:	438a      	bics	r2, r1
 800b87a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	681a      	ldr	r2, [r3, #0]
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	2101      	movs	r1, #1
 800b888:	430a      	orrs	r2, r1
 800b88a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	0018      	movs	r0, r3
 800b890:	f000 ff68 	bl	800c764 <UART_CheckIdleState>
 800b894:	0003      	movs	r3, r0
}
 800b896:	0018      	movs	r0, r3
 800b898:	46bd      	mov	sp, r7
 800b89a:	b002      	add	sp, #8
 800b89c:	bd80      	pop	{r7, pc}
 800b89e:	46c0      	nop			@ (mov r8, r8)
 800b8a0:	080060c1 	.word	0x080060c1
 800b8a4:	ffffb7ff 	.word	0xffffb7ff

0800b8a8 <HAL_UART_Transmit>:
=======
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	685a      	ldr	r2, [r3, #4]
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	490f      	ldr	r1, [pc, #60]	@ (800bb3c <HAL_UART_Init+0xc8>)
 800bb00:	400a      	ands	r2, r1
 800bb02:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	689a      	ldr	r2, [r3, #8]
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	212a      	movs	r1, #42	@ 0x2a
 800bb10:	438a      	bics	r2, r1
 800bb12:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	681a      	ldr	r2, [r3, #0]
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	2101      	movs	r1, #1
 800bb20:	430a      	orrs	r2, r1
 800bb22:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	0018      	movs	r0, r3
 800bb28:	f000 ff68 	bl	800c9fc <UART_CheckIdleState>
 800bb2c:	0003      	movs	r3, r0
}
 800bb2e:	0018      	movs	r0, r3
 800bb30:	46bd      	mov	sp, r7
 800bb32:	b002      	add	sp, #8
 800bb34:	bd80      	pop	{r7, pc}
 800bb36:	46c0      	nop			@ (mov r8, r8)
 800bb38:	08006435 	.word	0x08006435
 800bb3c:	ffffb7ff 	.word	0xffffb7ff

0800bb40 <HAL_UART_Transmit>:
>>>>>>> main
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
<<<<<<< HEAD
 800b8a8:	b580      	push	{r7, lr}
 800b8aa:	b08a      	sub	sp, #40	@ 0x28
 800b8ac:	af02      	add	r7, sp, #8
 800b8ae:	60f8      	str	r0, [r7, #12]
 800b8b0:	60b9      	str	r1, [r7, #8]
 800b8b2:	603b      	str	r3, [r7, #0]
 800b8b4:	1dbb      	adds	r3, r7, #6
 800b8b6:	801a      	strh	r2, [r3, #0]
=======
 800bb40:	b580      	push	{r7, lr}
 800bb42:	b08a      	sub	sp, #40	@ 0x28
 800bb44:	af02      	add	r7, sp, #8
 800bb46:	60f8      	str	r0, [r7, #12]
 800bb48:	60b9      	str	r1, [r7, #8]
 800bb4a:	603b      	str	r3, [r7, #0]
 800bb4c:	1dbb      	adds	r3, r7, #6
 800bb4e:	801a      	strh	r2, [r3, #0]
>>>>>>> main
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
<<<<<<< HEAD
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b8bc:	2b20      	cmp	r3, #32
 800b8be:	d000      	beq.n	800b8c2 <HAL_UART_Transmit+0x1a>
 800b8c0:	e08c      	b.n	800b9dc <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 800b8c2:	68bb      	ldr	r3, [r7, #8]
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d003      	beq.n	800b8d0 <HAL_UART_Transmit+0x28>
 800b8c8:	1dbb      	adds	r3, r7, #6
 800b8ca:	881b      	ldrh	r3, [r3, #0]
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d101      	bne.n	800b8d4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800b8d0:	2301      	movs	r3, #1
 800b8d2:	e084      	b.n	800b9de <HAL_UART_Transmit+0x136>
=======
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800bb54:	2b20      	cmp	r3, #32
 800bb56:	d000      	beq.n	800bb5a <HAL_UART_Transmit+0x1a>
 800bb58:	e08c      	b.n	800bc74 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 800bb5a:	68bb      	ldr	r3, [r7, #8]
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d003      	beq.n	800bb68 <HAL_UART_Transmit+0x28>
 800bb60:	1dbb      	adds	r3, r7, #6
 800bb62:	881b      	ldrh	r3, [r3, #0]
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d101      	bne.n	800bb6c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800bb68:	2301      	movs	r3, #1
 800bb6a:	e084      	b.n	800bc76 <HAL_UART_Transmit+0x136>
>>>>>>> main
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
<<<<<<< HEAD
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	689a      	ldr	r2, [r3, #8]
 800b8d8:	2380      	movs	r3, #128	@ 0x80
 800b8da:	015b      	lsls	r3, r3, #5
 800b8dc:	429a      	cmp	r2, r3
 800b8de:	d109      	bne.n	800b8f4 <HAL_UART_Transmit+0x4c>
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	691b      	ldr	r3, [r3, #16]
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d105      	bne.n	800b8f4 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800b8e8:	68bb      	ldr	r3, [r7, #8]
 800b8ea:	2201      	movs	r2, #1
 800b8ec:	4013      	ands	r3, r2
 800b8ee:	d001      	beq.n	800b8f4 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 800b8f0:	2301      	movs	r3, #1
 800b8f2:	e074      	b.n	800b9de <HAL_UART_Transmit+0x136>
=======
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	689a      	ldr	r2, [r3, #8]
 800bb70:	2380      	movs	r3, #128	@ 0x80
 800bb72:	015b      	lsls	r3, r3, #5
 800bb74:	429a      	cmp	r2, r3
 800bb76:	d109      	bne.n	800bb8c <HAL_UART_Transmit+0x4c>
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	691b      	ldr	r3, [r3, #16]
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d105      	bne.n	800bb8c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800bb80:	68bb      	ldr	r3, [r7, #8]
 800bb82:	2201      	movs	r2, #1
 800bb84:	4013      	ands	r3, r2
 800bb86:	d001      	beq.n	800bb8c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 800bb88:	2301      	movs	r3, #1
 800bb8a:	e074      	b.n	800bc76 <HAL_UART_Transmit+0x136>
>>>>>>> main
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
<<<<<<< HEAD
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	2284      	movs	r2, #132	@ 0x84
 800b8f8:	2100      	movs	r1, #0
 800b8fa:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	2221      	movs	r2, #33	@ 0x21
 800b900:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b902:	f7fb f9bf 	bl	8006c84 <HAL_GetTick>
 800b906:	0003      	movs	r3, r0
 800b908:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	1dba      	adds	r2, r7, #6
 800b90e:	2150      	movs	r1, #80	@ 0x50
 800b910:	8812      	ldrh	r2, [r2, #0]
 800b912:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	1dba      	adds	r2, r7, #6
 800b918:	2152      	movs	r1, #82	@ 0x52
 800b91a:	8812      	ldrh	r2, [r2, #0]
 800b91c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	689a      	ldr	r2, [r3, #8]
 800b922:	2380      	movs	r3, #128	@ 0x80
 800b924:	015b      	lsls	r3, r3, #5
 800b926:	429a      	cmp	r2, r3
 800b928:	d108      	bne.n	800b93c <HAL_UART_Transmit+0x94>
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	691b      	ldr	r3, [r3, #16]
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d104      	bne.n	800b93c <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 800b932:	2300      	movs	r3, #0
 800b934:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b936:	68bb      	ldr	r3, [r7, #8]
 800b938:	61bb      	str	r3, [r7, #24]
 800b93a:	e003      	b.n	800b944 <HAL_UART_Transmit+0x9c>
=======
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	2284      	movs	r2, #132	@ 0x84
 800bb90:	2100      	movs	r1, #0
 800bb92:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	2221      	movs	r2, #33	@ 0x21
 800bb98:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800bb9a:	f7fb f9d5 	bl	8006f48 <HAL_GetTick>
 800bb9e:	0003      	movs	r3, r0
 800bba0:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	1dba      	adds	r2, r7, #6
 800bba6:	2150      	movs	r1, #80	@ 0x50
 800bba8:	8812      	ldrh	r2, [r2, #0]
 800bbaa:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	1dba      	adds	r2, r7, #6
 800bbb0:	2152      	movs	r1, #82	@ 0x52
 800bbb2:	8812      	ldrh	r2, [r2, #0]
 800bbb4:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	689a      	ldr	r2, [r3, #8]
 800bbba:	2380      	movs	r3, #128	@ 0x80
 800bbbc:	015b      	lsls	r3, r3, #5
 800bbbe:	429a      	cmp	r2, r3
 800bbc0:	d108      	bne.n	800bbd4 <HAL_UART_Transmit+0x94>
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	691b      	ldr	r3, [r3, #16]
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d104      	bne.n	800bbd4 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 800bbca:	2300      	movs	r3, #0
 800bbcc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800bbce:	68bb      	ldr	r3, [r7, #8]
 800bbd0:	61bb      	str	r3, [r7, #24]
 800bbd2:	e003      	b.n	800bbdc <HAL_UART_Transmit+0x9c>
>>>>>>> main
    }
    else
    {
      pdata8bits  = pData;
<<<<<<< HEAD
 800b93c:	68bb      	ldr	r3, [r7, #8]
 800b93e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b940:	2300      	movs	r3, #0
 800b942:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800b944:	e02f      	b.n	800b9a6 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b946:	697a      	ldr	r2, [r7, #20]
 800b948:	68f8      	ldr	r0, [r7, #12]
 800b94a:	683b      	ldr	r3, [r7, #0]
 800b94c:	9300      	str	r3, [sp, #0]
 800b94e:	0013      	movs	r3, r2
 800b950:	2200      	movs	r2, #0
 800b952:	2180      	movs	r1, #128	@ 0x80
 800b954:	f000 ffae 	bl	800c8b4 <UART_WaitOnFlagUntilTimeout>
 800b958:	1e03      	subs	r3, r0, #0
 800b95a:	d004      	beq.n	800b966 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	2220      	movs	r2, #32
 800b960:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800b962:	2303      	movs	r3, #3
 800b964:	e03b      	b.n	800b9de <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 800b966:	69fb      	ldr	r3, [r7, #28]
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d10b      	bne.n	800b984 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b96c:	69bb      	ldr	r3, [r7, #24]
 800b96e:	881b      	ldrh	r3, [r3, #0]
 800b970:	001a      	movs	r2, r3
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	05d2      	lsls	r2, r2, #23
 800b978:	0dd2      	lsrs	r2, r2, #23
 800b97a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800b97c:	69bb      	ldr	r3, [r7, #24]
 800b97e:	3302      	adds	r3, #2
 800b980:	61bb      	str	r3, [r7, #24]
 800b982:	e007      	b.n	800b994 <HAL_UART_Transmit+0xec>
=======
 800bbd4:	68bb      	ldr	r3, [r7, #8]
 800bbd6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800bbd8:	2300      	movs	r3, #0
 800bbda:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800bbdc:	e02f      	b.n	800bc3e <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800bbde:	697a      	ldr	r2, [r7, #20]
 800bbe0:	68f8      	ldr	r0, [r7, #12]
 800bbe2:	683b      	ldr	r3, [r7, #0]
 800bbe4:	9300      	str	r3, [sp, #0]
 800bbe6:	0013      	movs	r3, r2
 800bbe8:	2200      	movs	r2, #0
 800bbea:	2180      	movs	r1, #128	@ 0x80
 800bbec:	f000 ffae 	bl	800cb4c <UART_WaitOnFlagUntilTimeout>
 800bbf0:	1e03      	subs	r3, r0, #0
 800bbf2:	d004      	beq.n	800bbfe <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	2220      	movs	r2, #32
 800bbf8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800bbfa:	2303      	movs	r3, #3
 800bbfc:	e03b      	b.n	800bc76 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 800bbfe:	69fb      	ldr	r3, [r7, #28]
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d10b      	bne.n	800bc1c <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800bc04:	69bb      	ldr	r3, [r7, #24]
 800bc06:	881b      	ldrh	r3, [r3, #0]
 800bc08:	001a      	movs	r2, r3
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	05d2      	lsls	r2, r2, #23
 800bc10:	0dd2      	lsrs	r2, r2, #23
 800bc12:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800bc14:	69bb      	ldr	r3, [r7, #24]
 800bc16:	3302      	adds	r3, #2
 800bc18:	61bb      	str	r3, [r7, #24]
 800bc1a:	e007      	b.n	800bc2c <HAL_UART_Transmit+0xec>
>>>>>>> main
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
<<<<<<< HEAD
 800b984:	69fb      	ldr	r3, [r7, #28]
 800b986:	781a      	ldrb	r2, [r3, #0]
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800b98e:	69fb      	ldr	r3, [r7, #28]
 800b990:	3301      	adds	r3, #1
 800b992:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	2252      	movs	r2, #82	@ 0x52
 800b998:	5a9b      	ldrh	r3, [r3, r2]
 800b99a:	b29b      	uxth	r3, r3
 800b99c:	3b01      	subs	r3, #1
 800b99e:	b299      	uxth	r1, r3
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	2252      	movs	r2, #82	@ 0x52
 800b9a4:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	2252      	movs	r2, #82	@ 0x52
 800b9aa:	5a9b      	ldrh	r3, [r3, r2]
 800b9ac:	b29b      	uxth	r3, r3
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d1c9      	bne.n	800b946 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b9b2:	697a      	ldr	r2, [r7, #20]
 800b9b4:	68f8      	ldr	r0, [r7, #12]
 800b9b6:	683b      	ldr	r3, [r7, #0]
 800b9b8:	9300      	str	r3, [sp, #0]
 800b9ba:	0013      	movs	r3, r2
 800b9bc:	2200      	movs	r2, #0
 800b9be:	2140      	movs	r1, #64	@ 0x40
 800b9c0:	f000 ff78 	bl	800c8b4 <UART_WaitOnFlagUntilTimeout>
 800b9c4:	1e03      	subs	r3, r0, #0
 800b9c6:	d004      	beq.n	800b9d2 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	2220      	movs	r2, #32
 800b9cc:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800b9ce:	2303      	movs	r3, #3
 800b9d0:	e005      	b.n	800b9de <HAL_UART_Transmit+0x136>
=======
 800bc1c:	69fb      	ldr	r3, [r7, #28]
 800bc1e:	781a      	ldrb	r2, [r3, #0]
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800bc26:	69fb      	ldr	r3, [r7, #28]
 800bc28:	3301      	adds	r3, #1
 800bc2a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	2252      	movs	r2, #82	@ 0x52
 800bc30:	5a9b      	ldrh	r3, [r3, r2]
 800bc32:	b29b      	uxth	r3, r3
 800bc34:	3b01      	subs	r3, #1
 800bc36:	b299      	uxth	r1, r3
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	2252      	movs	r2, #82	@ 0x52
 800bc3c:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	2252      	movs	r2, #82	@ 0x52
 800bc42:	5a9b      	ldrh	r3, [r3, r2]
 800bc44:	b29b      	uxth	r3, r3
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d1c9      	bne.n	800bbde <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800bc4a:	697a      	ldr	r2, [r7, #20]
 800bc4c:	68f8      	ldr	r0, [r7, #12]
 800bc4e:	683b      	ldr	r3, [r7, #0]
 800bc50:	9300      	str	r3, [sp, #0]
 800bc52:	0013      	movs	r3, r2
 800bc54:	2200      	movs	r2, #0
 800bc56:	2140      	movs	r1, #64	@ 0x40
 800bc58:	f000 ff78 	bl	800cb4c <UART_WaitOnFlagUntilTimeout>
 800bc5c:	1e03      	subs	r3, r0, #0
 800bc5e:	d004      	beq.n	800bc6a <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	2220      	movs	r2, #32
 800bc64:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800bc66:	2303      	movs	r3, #3
 800bc68:	e005      	b.n	800bc76 <HAL_UART_Transmit+0x136>
>>>>>>> main
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
<<<<<<< HEAD
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	2220      	movs	r2, #32
 800b9d6:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800b9d8:	2300      	movs	r3, #0
 800b9da:	e000      	b.n	800b9de <HAL_UART_Transmit+0x136>
=======
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	2220      	movs	r2, #32
 800bc6e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800bc70:	2300      	movs	r3, #0
 800bc72:	e000      	b.n	800bc76 <HAL_UART_Transmit+0x136>
>>>>>>> main
  }
  else
  {
    return HAL_BUSY;
<<<<<<< HEAD
 800b9dc:	2302      	movs	r3, #2
  }
}
 800b9de:	0018      	movs	r0, r3
 800b9e0:	46bd      	mov	sp, r7
 800b9e2:	b008      	add	sp, #32
 800b9e4:	bd80      	pop	{r7, pc}
	...

0800b9e8 <HAL_UART_IRQHandler>:
=======
 800bc74:	2302      	movs	r3, #2
  }
}
 800bc76:	0018      	movs	r0, r3
 800bc78:	46bd      	mov	sp, r7
 800bc7a:	b008      	add	sp, #32
 800bc7c:	bd80      	pop	{r7, pc}
	...

0800bc80 <HAL_UART_IRQHandler>:
>>>>>>> main
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 800b9e8:	b590      	push	{r4, r7, lr}
 800b9ea:	b0ab      	sub	sp, #172	@ 0xac
 800b9ec:	af00      	add	r7, sp, #0
 800b9ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	69db      	ldr	r3, [r3, #28]
 800b9f6:	22a4      	movs	r2, #164	@ 0xa4
 800b9f8:	18b9      	adds	r1, r7, r2
 800b9fa:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	20a0      	movs	r0, #160	@ 0xa0
 800ba04:	1839      	adds	r1, r7, r0
 800ba06:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	689b      	ldr	r3, [r3, #8]
 800ba0e:	219c      	movs	r1, #156	@ 0x9c
 800ba10:	1879      	adds	r1, r7, r1
 800ba12:	600b      	str	r3, [r1, #0]
=======
 800bc80:	b590      	push	{r4, r7, lr}
 800bc82:	b0ab      	sub	sp, #172	@ 0xac
 800bc84:	af00      	add	r7, sp, #0
 800bc86:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	69db      	ldr	r3, [r3, #28]
 800bc8e:	22a4      	movs	r2, #164	@ 0xa4
 800bc90:	18b9      	adds	r1, r7, r2
 800bc92:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	20a0      	movs	r0, #160	@ 0xa0
 800bc9c:	1839      	adds	r1, r7, r0
 800bc9e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	689b      	ldr	r3, [r3, #8]
 800bca6:	219c      	movs	r1, #156	@ 0x9c
 800bca8:	1879      	adds	r1, r7, r1
 800bcaa:	600b      	str	r3, [r1, #0]
>>>>>>> main

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
<<<<<<< HEAD
 800ba14:	0011      	movs	r1, r2
 800ba16:	18bb      	adds	r3, r7, r2
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	4a9c      	ldr	r2, [pc, #624]	@ (800bc8c <HAL_UART_IRQHandler+0x2a4>)
 800ba1c:	4013      	ands	r3, r2
 800ba1e:	2298      	movs	r2, #152	@ 0x98
 800ba20:	18bc      	adds	r4, r7, r2
 800ba22:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 800ba24:	18bb      	adds	r3, r7, r2
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d114      	bne.n	800ba56 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800ba2c:	187b      	adds	r3, r7, r1
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	2220      	movs	r2, #32
 800ba32:	4013      	ands	r3, r2
 800ba34:	d00f      	beq.n	800ba56 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800ba36:	183b      	adds	r3, r7, r0
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	2220      	movs	r2, #32
 800ba3c:	4013      	ands	r3, r2
 800ba3e:	d00a      	beq.n	800ba56 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d100      	bne.n	800ba4a <HAL_UART_IRQHandler+0x62>
 800ba48:	e2aa      	b.n	800bfa0 <HAL_UART_IRQHandler+0x5b8>
      {
        huart->RxISR(huart);
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ba4e:	687a      	ldr	r2, [r7, #4]
 800ba50:	0010      	movs	r0, r2
 800ba52:	4798      	blx	r3
      }
      return;
 800ba54:	e2a4      	b.n	800bfa0 <HAL_UART_IRQHandler+0x5b8>
=======
 800bcac:	0011      	movs	r1, r2
 800bcae:	18bb      	adds	r3, r7, r2
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	4a9c      	ldr	r2, [pc, #624]	@ (800bf24 <HAL_UART_IRQHandler+0x2a4>)
 800bcb4:	4013      	ands	r3, r2
 800bcb6:	2298      	movs	r2, #152	@ 0x98
 800bcb8:	18bc      	adds	r4, r7, r2
 800bcba:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 800bcbc:	18bb      	adds	r3, r7, r2
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d114      	bne.n	800bcee <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800bcc4:	187b      	adds	r3, r7, r1
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	2220      	movs	r2, #32
 800bcca:	4013      	ands	r3, r2
 800bccc:	d00f      	beq.n	800bcee <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800bcce:	183b      	adds	r3, r7, r0
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	2220      	movs	r2, #32
 800bcd4:	4013      	ands	r3, r2
 800bcd6:	d00a      	beq.n	800bcee <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d100      	bne.n	800bce2 <HAL_UART_IRQHandler+0x62>
 800bce0:	e2aa      	b.n	800c238 <HAL_UART_IRQHandler+0x5b8>
      {
        huart->RxISR(huart);
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bce6:	687a      	ldr	r2, [r7, #4]
 800bce8:	0010      	movs	r0, r2
 800bcea:	4798      	blx	r3
      }
      return;
 800bcec:	e2a4      	b.n	800c238 <HAL_UART_IRQHandler+0x5b8>
>>>>>>> main
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
<<<<<<< HEAD
 800ba56:	2398      	movs	r3, #152	@ 0x98
 800ba58:	18fb      	adds	r3, r7, r3
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d100      	bne.n	800ba62 <HAL_UART_IRQHandler+0x7a>
 800ba60:	e11a      	b.n	800bc98 <HAL_UART_IRQHandler+0x2b0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800ba62:	239c      	movs	r3, #156	@ 0x9c
 800ba64:	18fb      	adds	r3, r7, r3
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	2201      	movs	r2, #1
 800ba6a:	4013      	ands	r3, r2
 800ba6c:	d106      	bne.n	800ba7c <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800ba6e:	23a0      	movs	r3, #160	@ 0xa0
 800ba70:	18fb      	adds	r3, r7, r3
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	4a86      	ldr	r2, [pc, #536]	@ (800bc90 <HAL_UART_IRQHandler+0x2a8>)
 800ba76:	4013      	ands	r3, r2
 800ba78:	d100      	bne.n	800ba7c <HAL_UART_IRQHandler+0x94>
 800ba7a:	e10d      	b.n	800bc98 <HAL_UART_IRQHandler+0x2b0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ba7c:	23a4      	movs	r3, #164	@ 0xa4
 800ba7e:	18fb      	adds	r3, r7, r3
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	2201      	movs	r2, #1
 800ba84:	4013      	ands	r3, r2
 800ba86:	d012      	beq.n	800baae <HAL_UART_IRQHandler+0xc6>
 800ba88:	23a0      	movs	r3, #160	@ 0xa0
 800ba8a:	18fb      	adds	r3, r7, r3
 800ba8c:	681a      	ldr	r2, [r3, #0]
 800ba8e:	2380      	movs	r3, #128	@ 0x80
 800ba90:	005b      	lsls	r3, r3, #1
 800ba92:	4013      	ands	r3, r2
 800ba94:	d00b      	beq.n	800baae <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	2201      	movs	r2, #1
 800ba9c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	2284      	movs	r2, #132	@ 0x84
 800baa2:	589b      	ldr	r3, [r3, r2]
 800baa4:	2201      	movs	r2, #1
 800baa6:	431a      	orrs	r2, r3
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	2184      	movs	r1, #132	@ 0x84
 800baac:	505a      	str	r2, [r3, r1]
=======
 800bcee:	2398      	movs	r3, #152	@ 0x98
 800bcf0:	18fb      	adds	r3, r7, r3
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d100      	bne.n	800bcfa <HAL_UART_IRQHandler+0x7a>
 800bcf8:	e11a      	b.n	800bf30 <HAL_UART_IRQHandler+0x2b0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800bcfa:	239c      	movs	r3, #156	@ 0x9c
 800bcfc:	18fb      	adds	r3, r7, r3
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	2201      	movs	r2, #1
 800bd02:	4013      	ands	r3, r2
 800bd04:	d106      	bne.n	800bd14 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800bd06:	23a0      	movs	r3, #160	@ 0xa0
 800bd08:	18fb      	adds	r3, r7, r3
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	4a86      	ldr	r2, [pc, #536]	@ (800bf28 <HAL_UART_IRQHandler+0x2a8>)
 800bd0e:	4013      	ands	r3, r2
 800bd10:	d100      	bne.n	800bd14 <HAL_UART_IRQHandler+0x94>
 800bd12:	e10d      	b.n	800bf30 <HAL_UART_IRQHandler+0x2b0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800bd14:	23a4      	movs	r3, #164	@ 0xa4
 800bd16:	18fb      	adds	r3, r7, r3
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	2201      	movs	r2, #1
 800bd1c:	4013      	ands	r3, r2
 800bd1e:	d012      	beq.n	800bd46 <HAL_UART_IRQHandler+0xc6>
 800bd20:	23a0      	movs	r3, #160	@ 0xa0
 800bd22:	18fb      	adds	r3, r7, r3
 800bd24:	681a      	ldr	r2, [r3, #0]
 800bd26:	2380      	movs	r3, #128	@ 0x80
 800bd28:	005b      	lsls	r3, r3, #1
 800bd2a:	4013      	ands	r3, r2
 800bd2c:	d00b      	beq.n	800bd46 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	2201      	movs	r2, #1
 800bd34:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	2284      	movs	r2, #132	@ 0x84
 800bd3a:	589b      	ldr	r3, [r3, r2]
 800bd3c:	2201      	movs	r2, #1
 800bd3e:	431a      	orrs	r2, r3
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	2184      	movs	r1, #132	@ 0x84
 800bd44:	505a      	str	r2, [r3, r1]
>>>>>>> main
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
<<<<<<< HEAD
 800baae:	23a4      	movs	r3, #164	@ 0xa4
 800bab0:	18fb      	adds	r3, r7, r3
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	2202      	movs	r2, #2
 800bab6:	4013      	ands	r3, r2
 800bab8:	d011      	beq.n	800bade <HAL_UART_IRQHandler+0xf6>
 800baba:	239c      	movs	r3, #156	@ 0x9c
 800babc:	18fb      	adds	r3, r7, r3
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	2201      	movs	r2, #1
 800bac2:	4013      	ands	r3, r2
 800bac4:	d00b      	beq.n	800bade <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	2202      	movs	r2, #2
 800bacc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	2284      	movs	r2, #132	@ 0x84
 800bad2:	589b      	ldr	r3, [r3, r2]
 800bad4:	2204      	movs	r2, #4
 800bad6:	431a      	orrs	r2, r3
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	2184      	movs	r1, #132	@ 0x84
 800badc:	505a      	str	r2, [r3, r1]
=======
 800bd46:	23a4      	movs	r3, #164	@ 0xa4
 800bd48:	18fb      	adds	r3, r7, r3
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	2202      	movs	r2, #2
 800bd4e:	4013      	ands	r3, r2
 800bd50:	d011      	beq.n	800bd76 <HAL_UART_IRQHandler+0xf6>
 800bd52:	239c      	movs	r3, #156	@ 0x9c
 800bd54:	18fb      	adds	r3, r7, r3
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	2201      	movs	r2, #1
 800bd5a:	4013      	ands	r3, r2
 800bd5c:	d00b      	beq.n	800bd76 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	2202      	movs	r2, #2
 800bd64:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	2284      	movs	r2, #132	@ 0x84
 800bd6a:	589b      	ldr	r3, [r3, r2]
 800bd6c:	2204      	movs	r2, #4
 800bd6e:	431a      	orrs	r2, r3
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	2184      	movs	r1, #132	@ 0x84
 800bd74:	505a      	str	r2, [r3, r1]
>>>>>>> main
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
<<<<<<< HEAD
 800bade:	23a4      	movs	r3, #164	@ 0xa4
 800bae0:	18fb      	adds	r3, r7, r3
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	2204      	movs	r2, #4
 800bae6:	4013      	ands	r3, r2
 800bae8:	d011      	beq.n	800bb0e <HAL_UART_IRQHandler+0x126>
 800baea:	239c      	movs	r3, #156	@ 0x9c
 800baec:	18fb      	adds	r3, r7, r3
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	2201      	movs	r2, #1
 800baf2:	4013      	ands	r3, r2
 800baf4:	d00b      	beq.n	800bb0e <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	2204      	movs	r2, #4
 800bafc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	2284      	movs	r2, #132	@ 0x84
 800bb02:	589b      	ldr	r3, [r3, r2]
 800bb04:	2202      	movs	r2, #2
 800bb06:	431a      	orrs	r2, r3
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	2184      	movs	r1, #132	@ 0x84
 800bb0c:	505a      	str	r2, [r3, r1]
=======
 800bd76:	23a4      	movs	r3, #164	@ 0xa4
 800bd78:	18fb      	adds	r3, r7, r3
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	2204      	movs	r2, #4
 800bd7e:	4013      	ands	r3, r2
 800bd80:	d011      	beq.n	800bda6 <HAL_UART_IRQHandler+0x126>
 800bd82:	239c      	movs	r3, #156	@ 0x9c
 800bd84:	18fb      	adds	r3, r7, r3
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	2201      	movs	r2, #1
 800bd8a:	4013      	ands	r3, r2
 800bd8c:	d00b      	beq.n	800bda6 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	2204      	movs	r2, #4
 800bd94:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	2284      	movs	r2, #132	@ 0x84
 800bd9a:	589b      	ldr	r3, [r3, r2]
 800bd9c:	2202      	movs	r2, #2
 800bd9e:	431a      	orrs	r2, r3
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	2184      	movs	r1, #132	@ 0x84
 800bda4:	505a      	str	r2, [r3, r1]
>>>>>>> main
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
<<<<<<< HEAD
 800bb0e:	23a4      	movs	r3, #164	@ 0xa4
 800bb10:	18fb      	adds	r3, r7, r3
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	2208      	movs	r2, #8
 800bb16:	4013      	ands	r3, r2
 800bb18:	d017      	beq.n	800bb4a <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800bb1a:	23a0      	movs	r3, #160	@ 0xa0
 800bb1c:	18fb      	adds	r3, r7, r3
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	2220      	movs	r2, #32
 800bb22:	4013      	ands	r3, r2
 800bb24:	d105      	bne.n	800bb32 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800bb26:	239c      	movs	r3, #156	@ 0x9c
 800bb28:	18fb      	adds	r3, r7, r3
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	2201      	movs	r2, #1
 800bb2e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800bb30:	d00b      	beq.n	800bb4a <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	2208      	movs	r2, #8
 800bb38:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	2284      	movs	r2, #132	@ 0x84
 800bb3e:	589b      	ldr	r3, [r3, r2]
 800bb40:	2208      	movs	r2, #8
 800bb42:	431a      	orrs	r2, r3
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	2184      	movs	r1, #132	@ 0x84
 800bb48:	505a      	str	r2, [r3, r1]
=======
 800bda6:	23a4      	movs	r3, #164	@ 0xa4
 800bda8:	18fb      	adds	r3, r7, r3
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	2208      	movs	r2, #8
 800bdae:	4013      	ands	r3, r2
 800bdb0:	d017      	beq.n	800bde2 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800bdb2:	23a0      	movs	r3, #160	@ 0xa0
 800bdb4:	18fb      	adds	r3, r7, r3
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	2220      	movs	r2, #32
 800bdba:	4013      	ands	r3, r2
 800bdbc:	d105      	bne.n	800bdca <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800bdbe:	239c      	movs	r3, #156	@ 0x9c
 800bdc0:	18fb      	adds	r3, r7, r3
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	2201      	movs	r2, #1
 800bdc6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800bdc8:	d00b      	beq.n	800bde2 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	2208      	movs	r2, #8
 800bdd0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	2284      	movs	r2, #132	@ 0x84
 800bdd6:	589b      	ldr	r3, [r3, r2]
 800bdd8:	2208      	movs	r2, #8
 800bdda:	431a      	orrs	r2, r3
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	2184      	movs	r1, #132	@ 0x84
 800bde0:	505a      	str	r2, [r3, r1]
>>>>>>> main
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
<<<<<<< HEAD
 800bb4a:	23a4      	movs	r3, #164	@ 0xa4
 800bb4c:	18fb      	adds	r3, r7, r3
 800bb4e:	681a      	ldr	r2, [r3, #0]
 800bb50:	2380      	movs	r3, #128	@ 0x80
 800bb52:	011b      	lsls	r3, r3, #4
 800bb54:	4013      	ands	r3, r2
 800bb56:	d013      	beq.n	800bb80 <HAL_UART_IRQHandler+0x198>
 800bb58:	23a0      	movs	r3, #160	@ 0xa0
 800bb5a:	18fb      	adds	r3, r7, r3
 800bb5c:	681a      	ldr	r2, [r3, #0]
 800bb5e:	2380      	movs	r3, #128	@ 0x80
 800bb60:	04db      	lsls	r3, r3, #19
 800bb62:	4013      	ands	r3, r2
 800bb64:	d00c      	beq.n	800bb80 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	2280      	movs	r2, #128	@ 0x80
 800bb6c:	0112      	lsls	r2, r2, #4
 800bb6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	2284      	movs	r2, #132	@ 0x84
 800bb74:	589b      	ldr	r3, [r3, r2]
 800bb76:	2220      	movs	r2, #32
 800bb78:	431a      	orrs	r2, r3
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	2184      	movs	r1, #132	@ 0x84
 800bb7e:	505a      	str	r2, [r3, r1]
=======
 800bde2:	23a4      	movs	r3, #164	@ 0xa4
 800bde4:	18fb      	adds	r3, r7, r3
 800bde6:	681a      	ldr	r2, [r3, #0]
 800bde8:	2380      	movs	r3, #128	@ 0x80
 800bdea:	011b      	lsls	r3, r3, #4
 800bdec:	4013      	ands	r3, r2
 800bdee:	d013      	beq.n	800be18 <HAL_UART_IRQHandler+0x198>
 800bdf0:	23a0      	movs	r3, #160	@ 0xa0
 800bdf2:	18fb      	adds	r3, r7, r3
 800bdf4:	681a      	ldr	r2, [r3, #0]
 800bdf6:	2380      	movs	r3, #128	@ 0x80
 800bdf8:	04db      	lsls	r3, r3, #19
 800bdfa:	4013      	ands	r3, r2
 800bdfc:	d00c      	beq.n	800be18 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	2280      	movs	r2, #128	@ 0x80
 800be04:	0112      	lsls	r2, r2, #4
 800be06:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	2284      	movs	r2, #132	@ 0x84
 800be0c:	589b      	ldr	r3, [r3, r2]
 800be0e:	2220      	movs	r2, #32
 800be10:	431a      	orrs	r2, r3
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	2184      	movs	r1, #132	@ 0x84
 800be16:	505a      	str	r2, [r3, r1]
>>>>>>> main
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
<<<<<<< HEAD
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	2284      	movs	r2, #132	@ 0x84
 800bb84:	589b      	ldr	r3, [r3, r2]
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d100      	bne.n	800bb8c <HAL_UART_IRQHandler+0x1a4>
 800bb8a:	e20b      	b.n	800bfa4 <HAL_UART_IRQHandler+0x5bc>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800bb8c:	23a4      	movs	r3, #164	@ 0xa4
 800bb8e:	18fb      	adds	r3, r7, r3
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	2220      	movs	r2, #32
 800bb94:	4013      	ands	r3, r2
 800bb96:	d00e      	beq.n	800bbb6 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800bb98:	23a0      	movs	r3, #160	@ 0xa0
 800bb9a:	18fb      	adds	r3, r7, r3
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	2220      	movs	r2, #32
 800bba0:	4013      	ands	r3, r2
 800bba2:	d008      	beq.n	800bbb6 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d004      	beq.n	800bbb6 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bbb0:	687a      	ldr	r2, [r7, #4]
 800bbb2:	0010      	movs	r0, r2
 800bbb4:	4798      	blx	r3
=======
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	2284      	movs	r2, #132	@ 0x84
 800be1c:	589b      	ldr	r3, [r3, r2]
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d100      	bne.n	800be24 <HAL_UART_IRQHandler+0x1a4>
 800be22:	e20b      	b.n	800c23c <HAL_UART_IRQHandler+0x5bc>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800be24:	23a4      	movs	r3, #164	@ 0xa4
 800be26:	18fb      	adds	r3, r7, r3
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	2220      	movs	r2, #32
 800be2c:	4013      	ands	r3, r2
 800be2e:	d00e      	beq.n	800be4e <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800be30:	23a0      	movs	r3, #160	@ 0xa0
 800be32:	18fb      	adds	r3, r7, r3
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	2220      	movs	r2, #32
 800be38:	4013      	ands	r3, r2
 800be3a:	d008      	beq.n	800be4e <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800be40:	2b00      	cmp	r3, #0
 800be42:	d004      	beq.n	800be4e <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800be48:	687a      	ldr	r2, [r7, #4]
 800be4a:	0010      	movs	r0, r2
 800be4c:	4798      	blx	r3
>>>>>>> main
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
<<<<<<< HEAD
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	2284      	movs	r2, #132	@ 0x84
 800bbba:	589b      	ldr	r3, [r3, r2]
 800bbbc:	2194      	movs	r1, #148	@ 0x94
 800bbbe:	187a      	adds	r2, r7, r1
 800bbc0:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	689b      	ldr	r3, [r3, #8]
 800bbc8:	2240      	movs	r2, #64	@ 0x40
 800bbca:	4013      	ands	r3, r2
 800bbcc:	2b40      	cmp	r3, #64	@ 0x40
 800bbce:	d004      	beq.n	800bbda <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800bbd0:	187b      	adds	r3, r7, r1
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	2228      	movs	r2, #40	@ 0x28
 800bbd6:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bbd8:	d04b      	beq.n	800bc72 <HAL_UART_IRQHandler+0x28a>
=======
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	2284      	movs	r2, #132	@ 0x84
 800be52:	589b      	ldr	r3, [r3, r2]
 800be54:	2194      	movs	r1, #148	@ 0x94
 800be56:	187a      	adds	r2, r7, r1
 800be58:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	689b      	ldr	r3, [r3, #8]
 800be60:	2240      	movs	r2, #64	@ 0x40
 800be62:	4013      	ands	r3, r2
 800be64:	2b40      	cmp	r3, #64	@ 0x40
 800be66:	d004      	beq.n	800be72 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800be68:	187b      	adds	r3, r7, r1
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	2228      	movs	r2, #40	@ 0x28
 800be6e:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800be70:	d04b      	beq.n	800bf0a <HAL_UART_IRQHandler+0x28a>
>>>>>>> main
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
<<<<<<< HEAD
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	0018      	movs	r0, r3
 800bbde:	f000 fed3 	bl	800c988 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	689b      	ldr	r3, [r3, #8]
 800bbe8:	2240      	movs	r2, #64	@ 0x40
 800bbea:	4013      	ands	r3, r2
 800bbec:	2b40      	cmp	r3, #64	@ 0x40
 800bbee:	d139      	bne.n	800bc64 <HAL_UART_IRQHandler+0x27c>
=======
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	0018      	movs	r0, r3
 800be76:	f000 fed3 	bl	800cc20 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	689b      	ldr	r3, [r3, #8]
 800be80:	2240      	movs	r2, #64	@ 0x40
 800be82:	4013      	ands	r3, r2
 800be84:	2b40      	cmp	r3, #64	@ 0x40
 800be86:	d139      	bne.n	800befc <HAL_UART_IRQHandler+0x27c>
>>>>>>> main
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
<<<<<<< HEAD
 800bbf0:	f3ef 8310 	mrs	r3, PRIMASK
 800bbf4:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 800bbf6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bbf8:	2090      	movs	r0, #144	@ 0x90
 800bbfa:	183a      	adds	r2, r7, r0
 800bbfc:	6013      	str	r3, [r2, #0]
 800bbfe:	2301      	movs	r3, #1
 800bc00:	667b      	str	r3, [r7, #100]	@ 0x64
=======
 800be88:	f3ef 8310 	mrs	r3, PRIMASK
 800be8c:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 800be8e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800be90:	2090      	movs	r0, #144	@ 0x90
 800be92:	183a      	adds	r2, r7, r0
 800be94:	6013      	str	r3, [r2, #0]
 800be96:	2301      	movs	r3, #1
 800be98:	667b      	str	r3, [r7, #100]	@ 0x64
>>>>>>> main
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
<<<<<<< HEAD
 800bc02:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bc04:	f383 8810 	msr	PRIMASK, r3
}
 800bc08:	46c0      	nop			@ (mov r8, r8)
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	689a      	ldr	r2, [r3, #8]
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	2140      	movs	r1, #64	@ 0x40
 800bc16:	438a      	bics	r2, r1
 800bc18:	609a      	str	r2, [r3, #8]
 800bc1a:	183b      	adds	r3, r7, r0
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bc20:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800bc22:	f383 8810 	msr	PRIMASK, r3
}
 800bc26:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d012      	beq.n	800bc56 <HAL_UART_IRQHandler+0x26e>
=======
 800be9a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800be9c:	f383 8810 	msr	PRIMASK, r3
}
 800bea0:	46c0      	nop			@ (mov r8, r8)
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	689a      	ldr	r2, [r3, #8]
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	2140      	movs	r1, #64	@ 0x40
 800beae:	438a      	bics	r2, r1
 800beb0:	609a      	str	r2, [r3, #8]
 800beb2:	183b      	adds	r3, r7, r0
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800beb8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800beba:	f383 8810 	msr	PRIMASK, r3
}
 800bebe:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d012      	beq.n	800beee <HAL_UART_IRQHandler+0x26e>
>>>>>>> main
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
<<<<<<< HEAD
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bc34:	4a17      	ldr	r2, [pc, #92]	@ (800bc94 <HAL_UART_IRQHandler+0x2ac>)
 800bc36:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bc3c:	0018      	movs	r0, r3
 800bc3e:	f7fb faa9 	bl	8007194 <HAL_DMA_Abort_IT>
 800bc42:	1e03      	subs	r3, r0, #0
 800bc44:	d020      	beq.n	800bc88 <HAL_UART_IRQHandler+0x2a0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bc4a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bc50:	0018      	movs	r0, r3
 800bc52:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc54:	e018      	b.n	800bc88 <HAL_UART_IRQHandler+0x2a0>
=======
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800becc:	4a17      	ldr	r2, [pc, #92]	@ (800bf2c <HAL_UART_IRQHandler+0x2ac>)
 800bece:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bed4:	0018      	movs	r0, r3
 800bed6:	f7fb fabf 	bl	8007458 <HAL_DMA_Abort_IT>
 800beda:	1e03      	subs	r3, r0, #0
 800bedc:	d020      	beq.n	800bf20 <HAL_UART_IRQHandler+0x2a0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bee2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bee8:	0018      	movs	r0, r3
 800beea:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800beec:	e018      	b.n	800bf20 <HAL_UART_IRQHandler+0x2a0>
>>>>>>> main
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
<<<<<<< HEAD
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	2298      	movs	r2, #152	@ 0x98
 800bc5a:	589b      	ldr	r3, [r3, r2]
 800bc5c:	687a      	ldr	r2, [r7, #4]
 800bc5e:	0010      	movs	r0, r2
 800bc60:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc62:	e011      	b.n	800bc88 <HAL_UART_IRQHandler+0x2a0>
=======
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	2298      	movs	r2, #152	@ 0x98
 800bef2:	589b      	ldr	r3, [r3, r2]
 800bef4:	687a      	ldr	r2, [r7, #4]
 800bef6:	0010      	movs	r0, r2
 800bef8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800befa:	e011      	b.n	800bf20 <HAL_UART_IRQHandler+0x2a0>
>>>>>>> main
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
<<<<<<< HEAD
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	2298      	movs	r2, #152	@ 0x98
 800bc68:	589b      	ldr	r3, [r3, r2]
 800bc6a:	687a      	ldr	r2, [r7, #4]
 800bc6c:	0010      	movs	r0, r2
 800bc6e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc70:	e00a      	b.n	800bc88 <HAL_UART_IRQHandler+0x2a0>
=======
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	2298      	movs	r2, #152	@ 0x98
 800bf00:	589b      	ldr	r3, [r3, r2]
 800bf02:	687a      	ldr	r2, [r7, #4]
 800bf04:	0010      	movs	r0, r2
 800bf06:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bf08:	e00a      	b.n	800bf20 <HAL_UART_IRQHandler+0x2a0>
>>>>>>> main
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
<<<<<<< HEAD
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	2298      	movs	r2, #152	@ 0x98
 800bc76:	589b      	ldr	r3, [r3, r2]
 800bc78:	687a      	ldr	r2, [r7, #4]
 800bc7a:	0010      	movs	r0, r2
 800bc7c:	4798      	blx	r3
=======
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	2298      	movs	r2, #152	@ 0x98
 800bf0e:	589b      	ldr	r3, [r3, r2]
 800bf10:	687a      	ldr	r2, [r7, #4]
 800bf12:	0010      	movs	r0, r2
 800bf14:	4798      	blx	r3
>>>>>>> main
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
<<<<<<< HEAD
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	2284      	movs	r2, #132	@ 0x84
 800bc82:	2100      	movs	r1, #0
 800bc84:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800bc86:	e18d      	b.n	800bfa4 <HAL_UART_IRQHandler+0x5bc>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc88:	46c0      	nop			@ (mov r8, r8)
    return;
 800bc8a:	e18b      	b.n	800bfa4 <HAL_UART_IRQHandler+0x5bc>
 800bc8c:	0000080f 	.word	0x0000080f
 800bc90:	04000120 	.word	0x04000120
 800bc94:	0800ca51 	.word	0x0800ca51
=======
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	2284      	movs	r2, #132	@ 0x84
 800bf1a:	2100      	movs	r1, #0
 800bf1c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800bf1e:	e18d      	b.n	800c23c <HAL_UART_IRQHandler+0x5bc>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bf20:	46c0      	nop			@ (mov r8, r8)
    return;
 800bf22:	e18b      	b.n	800c23c <HAL_UART_IRQHandler+0x5bc>
 800bf24:	0000080f 	.word	0x0000080f
 800bf28:	04000120 	.word	0x04000120
 800bf2c:	0800cce9 	.word	0x0800cce9
>>>>>>> main

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
<<<<<<< HEAD
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bc9c:	2b01      	cmp	r3, #1
 800bc9e:	d000      	beq.n	800bca2 <HAL_UART_IRQHandler+0x2ba>
 800bca0:	e13d      	b.n	800bf1e <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800bca2:	23a4      	movs	r3, #164	@ 0xa4
 800bca4:	18fb      	adds	r3, r7, r3
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	2210      	movs	r2, #16
 800bcaa:	4013      	ands	r3, r2
 800bcac:	d100      	bne.n	800bcb0 <HAL_UART_IRQHandler+0x2c8>
 800bcae:	e136      	b.n	800bf1e <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800bcb0:	23a0      	movs	r3, #160	@ 0xa0
 800bcb2:	18fb      	adds	r3, r7, r3
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	2210      	movs	r2, #16
 800bcb8:	4013      	ands	r3, r2
 800bcba:	d100      	bne.n	800bcbe <HAL_UART_IRQHandler+0x2d6>
 800bcbc:	e12f      	b.n	800bf1e <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	2210      	movs	r2, #16
 800bcc4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	689b      	ldr	r3, [r3, #8]
 800bccc:	2240      	movs	r2, #64	@ 0x40
 800bcce:	4013      	ands	r3, r2
 800bcd0:	2b40      	cmp	r3, #64	@ 0x40
 800bcd2:	d000      	beq.n	800bcd6 <HAL_UART_IRQHandler+0x2ee>
 800bcd4:	e0a2      	b.n	800be1c <HAL_UART_IRQHandler+0x434>
=======
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bf34:	2b01      	cmp	r3, #1
 800bf36:	d000      	beq.n	800bf3a <HAL_UART_IRQHandler+0x2ba>
 800bf38:	e13d      	b.n	800c1b6 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800bf3a:	23a4      	movs	r3, #164	@ 0xa4
 800bf3c:	18fb      	adds	r3, r7, r3
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	2210      	movs	r2, #16
 800bf42:	4013      	ands	r3, r2
 800bf44:	d100      	bne.n	800bf48 <HAL_UART_IRQHandler+0x2c8>
 800bf46:	e136      	b.n	800c1b6 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800bf48:	23a0      	movs	r3, #160	@ 0xa0
 800bf4a:	18fb      	adds	r3, r7, r3
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	2210      	movs	r2, #16
 800bf50:	4013      	ands	r3, r2
 800bf52:	d100      	bne.n	800bf56 <HAL_UART_IRQHandler+0x2d6>
 800bf54:	e12f      	b.n	800c1b6 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	2210      	movs	r2, #16
 800bf5c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	689b      	ldr	r3, [r3, #8]
 800bf64:	2240      	movs	r2, #64	@ 0x40
 800bf66:	4013      	ands	r3, r2
 800bf68:	2b40      	cmp	r3, #64	@ 0x40
 800bf6a:	d000      	beq.n	800bf6e <HAL_UART_IRQHandler+0x2ee>
 800bf6c:	e0a2      	b.n	800c0b4 <HAL_UART_IRQHandler+0x434>
>>>>>>> main
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
<<<<<<< HEAD
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	685a      	ldr	r2, [r3, #4]
 800bcde:	217e      	movs	r1, #126	@ 0x7e
 800bce0:	187b      	adds	r3, r7, r1
 800bce2:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800bce4:	187b      	adds	r3, r7, r1
 800bce6:	881b      	ldrh	r3, [r3, #0]
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d100      	bne.n	800bcee <HAL_UART_IRQHandler+0x306>
 800bcec:	e15c      	b.n	800bfa8 <HAL_UART_IRQHandler+0x5c0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	2258      	movs	r2, #88	@ 0x58
 800bcf2:	5a9b      	ldrh	r3, [r3, r2]
 800bcf4:	187a      	adds	r2, r7, r1
 800bcf6:	8812      	ldrh	r2, [r2, #0]
 800bcf8:	429a      	cmp	r2, r3
 800bcfa:	d300      	bcc.n	800bcfe <HAL_UART_IRQHandler+0x316>
 800bcfc:	e154      	b.n	800bfa8 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	187a      	adds	r2, r7, r1
 800bd02:	215a      	movs	r1, #90	@ 0x5a
 800bd04:	8812      	ldrh	r2, [r2, #0]
 800bd06:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	2220      	movs	r2, #32
 800bd12:	4013      	ands	r3, r2
 800bd14:	d16f      	bne.n	800bdf6 <HAL_UART_IRQHandler+0x40e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bd16:	f3ef 8310 	mrs	r3, PRIMASK
 800bd1a:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800bd1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bd1e:	67bb      	str	r3, [r7, #120]	@ 0x78
 800bd20:	2301      	movs	r3, #1
 800bd22:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bd24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bd26:	f383 8810 	msr	PRIMASK, r3
}
 800bd2a:	46c0      	nop			@ (mov r8, r8)
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	681a      	ldr	r2, [r3, #0]
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	49a0      	ldr	r1, [pc, #640]	@ (800bfb8 <HAL_UART_IRQHandler+0x5d0>)
 800bd38:	400a      	ands	r2, r1
 800bd3a:	601a      	str	r2, [r3, #0]
 800bd3c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bd3e:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bd40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd42:	f383 8810 	msr	PRIMASK, r3
}
 800bd46:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bd48:	f3ef 8310 	mrs	r3, PRIMASK
 800bd4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 800bd4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bd50:	677b      	str	r3, [r7, #116]	@ 0x74
 800bd52:	2301      	movs	r3, #1
 800bd54:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bd56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bd58:	f383 8810 	msr	PRIMASK, r3
}
 800bd5c:	46c0      	nop			@ (mov r8, r8)
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	689a      	ldr	r2, [r3, #8]
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	2101      	movs	r1, #1
 800bd6a:	438a      	bics	r2, r1
 800bd6c:	609a      	str	r2, [r3, #8]
 800bd6e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bd70:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bd72:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bd74:	f383 8810 	msr	PRIMASK, r3
}
 800bd78:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bd7a:	f3ef 8310 	mrs	r3, PRIMASK
 800bd7e:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 800bd80:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
=======
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	685a      	ldr	r2, [r3, #4]
 800bf76:	217e      	movs	r1, #126	@ 0x7e
 800bf78:	187b      	adds	r3, r7, r1
 800bf7a:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800bf7c:	187b      	adds	r3, r7, r1
 800bf7e:	881b      	ldrh	r3, [r3, #0]
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d100      	bne.n	800bf86 <HAL_UART_IRQHandler+0x306>
 800bf84:	e15c      	b.n	800c240 <HAL_UART_IRQHandler+0x5c0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	2258      	movs	r2, #88	@ 0x58
 800bf8a:	5a9b      	ldrh	r3, [r3, r2]
 800bf8c:	187a      	adds	r2, r7, r1
 800bf8e:	8812      	ldrh	r2, [r2, #0]
 800bf90:	429a      	cmp	r2, r3
 800bf92:	d300      	bcc.n	800bf96 <HAL_UART_IRQHandler+0x316>
 800bf94:	e154      	b.n	800c240 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	187a      	adds	r2, r7, r1
 800bf9a:	215a      	movs	r1, #90	@ 0x5a
 800bf9c:	8812      	ldrh	r2, [r2, #0]
 800bf9e:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	2220      	movs	r2, #32
 800bfaa:	4013      	ands	r3, r2
 800bfac:	d16f      	bne.n	800c08e <HAL_UART_IRQHandler+0x40e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bfae:	f3ef 8310 	mrs	r3, PRIMASK
 800bfb2:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800bfb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bfb6:	67bb      	str	r3, [r7, #120]	@ 0x78
 800bfb8:	2301      	movs	r3, #1
 800bfba:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bfbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bfbe:	f383 8810 	msr	PRIMASK, r3
}
 800bfc2:	46c0      	nop			@ (mov r8, r8)
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	681a      	ldr	r2, [r3, #0]
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	49a0      	ldr	r1, [pc, #640]	@ (800c250 <HAL_UART_IRQHandler+0x5d0>)
 800bfd0:	400a      	ands	r2, r1
 800bfd2:	601a      	str	r2, [r3, #0]
 800bfd4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bfd6:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bfd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bfda:	f383 8810 	msr	PRIMASK, r3
}
 800bfde:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bfe0:	f3ef 8310 	mrs	r3, PRIMASK
 800bfe4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 800bfe6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bfe8:	677b      	str	r3, [r7, #116]	@ 0x74
 800bfea:	2301      	movs	r3, #1
 800bfec:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bfee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bff0:	f383 8810 	msr	PRIMASK, r3
}
 800bff4:	46c0      	nop			@ (mov r8, r8)
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	689a      	ldr	r2, [r3, #8]
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	2101      	movs	r1, #1
 800c002:	438a      	bics	r2, r1
 800c004:	609a      	str	r2, [r3, #8]
 800c006:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c008:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c00a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c00c:	f383 8810 	msr	PRIMASK, r3
}
 800c010:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c012:	f3ef 8310 	mrs	r3, PRIMASK
 800c016:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 800c018:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
>>>>>>> main

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
<<<<<<< HEAD
 800bd82:	673b      	str	r3, [r7, #112]	@ 0x70
 800bd84:	2301      	movs	r3, #1
 800bd86:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bd88:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bd8a:	f383 8810 	msr	PRIMASK, r3
}
 800bd8e:	46c0      	nop			@ (mov r8, r8)
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	689a      	ldr	r2, [r3, #8]
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	2140      	movs	r1, #64	@ 0x40
 800bd9c:	438a      	bics	r2, r1
 800bd9e:	609a      	str	r2, [r3, #8]
 800bda0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800bda2:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bda4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bda6:	f383 8810 	msr	PRIMASK, r3
}
 800bdaa:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	2280      	movs	r2, #128	@ 0x80
 800bdb0:	2120      	movs	r1, #32
 800bdb2:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	2200      	movs	r2, #0
 800bdb8:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bdba:	f3ef 8310 	mrs	r3, PRIMASK
 800bdbe:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 800bdc0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bdc2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800bdc4:	2301      	movs	r3, #1
 800bdc6:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bdc8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bdca:	f383 8810 	msr	PRIMASK, r3
}
 800bdce:	46c0      	nop			@ (mov r8, r8)
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	681a      	ldr	r2, [r3, #0]
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	2110      	movs	r1, #16
 800bddc:	438a      	bics	r2, r1
 800bdde:	601a      	str	r2, [r3, #0]
 800bde0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bde2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bde4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bde6:	f383 8810 	msr	PRIMASK, r3
}
 800bdea:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bdf0:	0018      	movs	r0, r3
 800bdf2:	f7fb f98f 	bl	8007114 <HAL_DMA_Abort>
=======
 800c01a:	673b      	str	r3, [r7, #112]	@ 0x70
 800c01c:	2301      	movs	r3, #1
 800c01e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c020:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c022:	f383 8810 	msr	PRIMASK, r3
}
 800c026:	46c0      	nop			@ (mov r8, r8)
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	689a      	ldr	r2, [r3, #8]
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	2140      	movs	r1, #64	@ 0x40
 800c034:	438a      	bics	r2, r1
 800c036:	609a      	str	r2, [r3, #8]
 800c038:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c03a:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c03c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c03e:	f383 8810 	msr	PRIMASK, r3
}
 800c042:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	2280      	movs	r2, #128	@ 0x80
 800c048:	2120      	movs	r1, #32
 800c04a:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	2200      	movs	r2, #0
 800c050:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c052:	f3ef 8310 	mrs	r3, PRIMASK
 800c056:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 800c058:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c05a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800c05c:	2301      	movs	r3, #1
 800c05e:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c060:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c062:	f383 8810 	msr	PRIMASK, r3
}
 800c066:	46c0      	nop			@ (mov r8, r8)
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	681a      	ldr	r2, [r3, #0]
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	2110      	movs	r1, #16
 800c074:	438a      	bics	r2, r1
 800c076:	601a      	str	r2, [r3, #0]
 800c078:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c07a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c07c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c07e:	f383 8810 	msr	PRIMASK, r3
}
 800c082:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c088:	0018      	movs	r0, r3
 800c08a:	f7fb f9a5 	bl	80073d8 <HAL_DMA_Abort>
>>>>>>> main
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
<<<<<<< HEAD
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	2202      	movs	r2, #2
 800bdfa:	665a      	str	r2, [r3, #100]	@ 0x64
=======
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	2202      	movs	r2, #2
 800c092:	665a      	str	r2, [r3, #100]	@ 0x64
>>>>>>> main

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
<<<<<<< HEAD
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	22ac      	movs	r2, #172	@ 0xac
 800be00:	589b      	ldr	r3, [r3, r2]
 800be02:	687a      	ldr	r2, [r7, #4]
 800be04:	2158      	movs	r1, #88	@ 0x58
 800be06:	5a51      	ldrh	r1, [r2, r1]
 800be08:	687a      	ldr	r2, [r7, #4]
 800be0a:	205a      	movs	r0, #90	@ 0x5a
 800be0c:	5a12      	ldrh	r2, [r2, r0]
 800be0e:	b292      	uxth	r2, r2
 800be10:	1a8a      	subs	r2, r1, r2
 800be12:	b291      	uxth	r1, r2
 800be14:	687a      	ldr	r2, [r7, #4]
 800be16:	0010      	movs	r0, r2
 800be18:	4798      	blx	r3
=======
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	22ac      	movs	r2, #172	@ 0xac
 800c098:	589b      	ldr	r3, [r3, r2]
 800c09a:	687a      	ldr	r2, [r7, #4]
 800c09c:	2158      	movs	r1, #88	@ 0x58
 800c09e:	5a51      	ldrh	r1, [r2, r1]
 800c0a0:	687a      	ldr	r2, [r7, #4]
 800c0a2:	205a      	movs	r0, #90	@ 0x5a
 800c0a4:	5a12      	ldrh	r2, [r2, r0]
 800c0a6:	b292      	uxth	r2, r2
 800c0a8:	1a8a      	subs	r2, r1, r2
 800c0aa:	b291      	uxth	r1, r2
 800c0ac:	687a      	ldr	r2, [r7, #4]
 800c0ae:	0010      	movs	r0, r2
 800c0b0:	4798      	blx	r3
>>>>>>> main
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
<<<<<<< HEAD
 800be1a:	e0c5      	b.n	800bfa8 <HAL_UART_IRQHandler+0x5c0>
=======
 800c0b2:	e0c5      	b.n	800c240 <HAL_UART_IRQHandler+0x5c0>
>>>>>>> main
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
<<<<<<< HEAD
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	2258      	movs	r2, #88	@ 0x58
 800be20:	5a99      	ldrh	r1, [r3, r2]
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	225a      	movs	r2, #90	@ 0x5a
 800be26:	5a9b      	ldrh	r3, [r3, r2]
 800be28:	b29a      	uxth	r2, r3
 800be2a:	208e      	movs	r0, #142	@ 0x8e
 800be2c:	183b      	adds	r3, r7, r0
 800be2e:	1a8a      	subs	r2, r1, r2
 800be30:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	225a      	movs	r2, #90	@ 0x5a
 800be36:	5a9b      	ldrh	r3, [r3, r2]
 800be38:	b29b      	uxth	r3, r3
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d100      	bne.n	800be40 <HAL_UART_IRQHandler+0x458>
 800be3e:	e0b5      	b.n	800bfac <HAL_UART_IRQHandler+0x5c4>
          && (nb_rx_data > 0U))
 800be40:	183b      	adds	r3, r7, r0
 800be42:	881b      	ldrh	r3, [r3, #0]
 800be44:	2b00      	cmp	r3, #0
 800be46:	d100      	bne.n	800be4a <HAL_UART_IRQHandler+0x462>
 800be48:	e0b0      	b.n	800bfac <HAL_UART_IRQHandler+0x5c4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800be4a:	f3ef 8310 	mrs	r3, PRIMASK
 800be4e:	60fb      	str	r3, [r7, #12]
  return(result);
 800be50:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800be52:	2488      	movs	r4, #136	@ 0x88
 800be54:	193a      	adds	r2, r7, r4
 800be56:	6013      	str	r3, [r2, #0]
 800be58:	2301      	movs	r3, #1
 800be5a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800be5c:	693b      	ldr	r3, [r7, #16]
 800be5e:	f383 8810 	msr	PRIMASK, r3
}
 800be62:	46c0      	nop			@ (mov r8, r8)
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	681a      	ldr	r2, [r3, #0]
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	4953      	ldr	r1, [pc, #332]	@ (800bfbc <HAL_UART_IRQHandler+0x5d4>)
 800be70:	400a      	ands	r2, r1
 800be72:	601a      	str	r2, [r3, #0]
 800be74:	193b      	adds	r3, r7, r4
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800be7a:	697b      	ldr	r3, [r7, #20]
 800be7c:	f383 8810 	msr	PRIMASK, r3
}
 800be80:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800be82:	f3ef 8310 	mrs	r3, PRIMASK
 800be86:	61bb      	str	r3, [r7, #24]
  return(result);
 800be88:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800be8a:	2484      	movs	r4, #132	@ 0x84
 800be8c:	193a      	adds	r2, r7, r4
 800be8e:	6013      	str	r3, [r2, #0]
 800be90:	2301      	movs	r3, #1
 800be92:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800be94:	69fb      	ldr	r3, [r7, #28]
 800be96:	f383 8810 	msr	PRIMASK, r3
}
 800be9a:	46c0      	nop			@ (mov r8, r8)
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	689a      	ldr	r2, [r3, #8]
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	2101      	movs	r1, #1
 800bea8:	438a      	bics	r2, r1
 800beaa:	609a      	str	r2, [r3, #8]
 800beac:	193b      	adds	r3, r7, r4
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800beb2:	6a3b      	ldr	r3, [r7, #32]
 800beb4:	f383 8810 	msr	PRIMASK, r3
}
 800beb8:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	2280      	movs	r2, #128	@ 0x80
 800bebe:	2120      	movs	r1, #32
 800bec0:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	2200      	movs	r2, #0
 800bec6:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	2200      	movs	r2, #0
 800becc:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bece:	f3ef 8310 	mrs	r3, PRIMASK
 800bed2:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800bed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bed6:	2480      	movs	r4, #128	@ 0x80
 800bed8:	193a      	adds	r2, r7, r4
 800beda:	6013      	str	r3, [r2, #0]
 800bedc:	2301      	movs	r3, #1
 800bede:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bee0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bee2:	f383 8810 	msr	PRIMASK, r3
}
 800bee6:	46c0      	nop			@ (mov r8, r8)
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	681a      	ldr	r2, [r3, #0]
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	2110      	movs	r1, #16
 800bef4:	438a      	bics	r2, r1
 800bef6:	601a      	str	r2, [r3, #0]
 800bef8:	193b      	adds	r3, r7, r4
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800befe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf00:	f383 8810 	msr	PRIMASK, r3
}
 800bf04:	46c0      	nop			@ (mov r8, r8)
=======
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	2258      	movs	r2, #88	@ 0x58
 800c0b8:	5a99      	ldrh	r1, [r3, r2]
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	225a      	movs	r2, #90	@ 0x5a
 800c0be:	5a9b      	ldrh	r3, [r3, r2]
 800c0c0:	b29a      	uxth	r2, r3
 800c0c2:	208e      	movs	r0, #142	@ 0x8e
 800c0c4:	183b      	adds	r3, r7, r0
 800c0c6:	1a8a      	subs	r2, r1, r2
 800c0c8:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	225a      	movs	r2, #90	@ 0x5a
 800c0ce:	5a9b      	ldrh	r3, [r3, r2]
 800c0d0:	b29b      	uxth	r3, r3
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d100      	bne.n	800c0d8 <HAL_UART_IRQHandler+0x458>
 800c0d6:	e0b5      	b.n	800c244 <HAL_UART_IRQHandler+0x5c4>
          && (nb_rx_data > 0U))
 800c0d8:	183b      	adds	r3, r7, r0
 800c0da:	881b      	ldrh	r3, [r3, #0]
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d100      	bne.n	800c0e2 <HAL_UART_IRQHandler+0x462>
 800c0e0:	e0b0      	b.n	800c244 <HAL_UART_IRQHandler+0x5c4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c0e2:	f3ef 8310 	mrs	r3, PRIMASK
 800c0e6:	60fb      	str	r3, [r7, #12]
  return(result);
 800c0e8:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c0ea:	2488      	movs	r4, #136	@ 0x88
 800c0ec:	193a      	adds	r2, r7, r4
 800c0ee:	6013      	str	r3, [r2, #0]
 800c0f0:	2301      	movs	r3, #1
 800c0f2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c0f4:	693b      	ldr	r3, [r7, #16]
 800c0f6:	f383 8810 	msr	PRIMASK, r3
}
 800c0fa:	46c0      	nop			@ (mov r8, r8)
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	681a      	ldr	r2, [r3, #0]
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	4953      	ldr	r1, [pc, #332]	@ (800c254 <HAL_UART_IRQHandler+0x5d4>)
 800c108:	400a      	ands	r2, r1
 800c10a:	601a      	str	r2, [r3, #0]
 800c10c:	193b      	adds	r3, r7, r4
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c112:	697b      	ldr	r3, [r7, #20]
 800c114:	f383 8810 	msr	PRIMASK, r3
}
 800c118:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c11a:	f3ef 8310 	mrs	r3, PRIMASK
 800c11e:	61bb      	str	r3, [r7, #24]
  return(result);
 800c120:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c122:	2484      	movs	r4, #132	@ 0x84
 800c124:	193a      	adds	r2, r7, r4
 800c126:	6013      	str	r3, [r2, #0]
 800c128:	2301      	movs	r3, #1
 800c12a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c12c:	69fb      	ldr	r3, [r7, #28]
 800c12e:	f383 8810 	msr	PRIMASK, r3
}
 800c132:	46c0      	nop			@ (mov r8, r8)
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	689a      	ldr	r2, [r3, #8]
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	2101      	movs	r1, #1
 800c140:	438a      	bics	r2, r1
 800c142:	609a      	str	r2, [r3, #8]
 800c144:	193b      	adds	r3, r7, r4
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c14a:	6a3b      	ldr	r3, [r7, #32]
 800c14c:	f383 8810 	msr	PRIMASK, r3
}
 800c150:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	2280      	movs	r2, #128	@ 0x80
 800c156:	2120      	movs	r1, #32
 800c158:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	2200      	movs	r2, #0
 800c15e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	2200      	movs	r2, #0
 800c164:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c166:	f3ef 8310 	mrs	r3, PRIMASK
 800c16a:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800c16c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c16e:	2480      	movs	r4, #128	@ 0x80
 800c170:	193a      	adds	r2, r7, r4
 800c172:	6013      	str	r3, [r2, #0]
 800c174:	2301      	movs	r3, #1
 800c176:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c178:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c17a:	f383 8810 	msr	PRIMASK, r3
}
 800c17e:	46c0      	nop			@ (mov r8, r8)
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	681a      	ldr	r2, [r3, #0]
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	2110      	movs	r1, #16
 800c18c:	438a      	bics	r2, r1
 800c18e:	601a      	str	r2, [r3, #0]
 800c190:	193b      	adds	r3, r7, r4
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c196:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c198:	f383 8810 	msr	PRIMASK, r3
}
 800c19c:	46c0      	nop			@ (mov r8, r8)
>>>>>>> main

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
<<<<<<< HEAD
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	2202      	movs	r2, #2
 800bf0a:	665a      	str	r2, [r3, #100]	@ 0x64
=======
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	2202      	movs	r2, #2
 800c1a2:	665a      	str	r2, [r3, #100]	@ 0x64
>>>>>>> main

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
<<<<<<< HEAD
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	22ac      	movs	r2, #172	@ 0xac
 800bf10:	589b      	ldr	r3, [r3, r2]
 800bf12:	183a      	adds	r2, r7, r0
 800bf14:	8811      	ldrh	r1, [r2, #0]
 800bf16:	687a      	ldr	r2, [r7, #4]
 800bf18:	0010      	movs	r0, r2
 800bf1a:	4798      	blx	r3
=======
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	22ac      	movs	r2, #172	@ 0xac
 800c1a8:	589b      	ldr	r3, [r3, r2]
 800c1aa:	183a      	adds	r2, r7, r0
 800c1ac:	8811      	ldrh	r1, [r2, #0]
 800c1ae:	687a      	ldr	r2, [r7, #4]
 800c1b0:	0010      	movs	r0, r2
 800c1b2:	4798      	blx	r3
>>>>>>> main
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
<<<<<<< HEAD
 800bf1c:	e046      	b.n	800bfac <HAL_UART_IRQHandler+0x5c4>
=======
 800c1b4:	e046      	b.n	800c244 <HAL_UART_IRQHandler+0x5c4>
>>>>>>> main
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
<<<<<<< HEAD
 800bf1e:	23a4      	movs	r3, #164	@ 0xa4
 800bf20:	18fb      	adds	r3, r7, r3
 800bf22:	681a      	ldr	r2, [r3, #0]
 800bf24:	2380      	movs	r3, #128	@ 0x80
 800bf26:	035b      	lsls	r3, r3, #13
 800bf28:	4013      	ands	r3, r2
 800bf2a:	d012      	beq.n	800bf52 <HAL_UART_IRQHandler+0x56a>
 800bf2c:	239c      	movs	r3, #156	@ 0x9c
 800bf2e:	18fb      	adds	r3, r7, r3
 800bf30:	681a      	ldr	r2, [r3, #0]
 800bf32:	2380      	movs	r3, #128	@ 0x80
 800bf34:	03db      	lsls	r3, r3, #15
 800bf36:	4013      	ands	r3, r2
 800bf38:	d00b      	beq.n	800bf52 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	2280      	movs	r2, #128	@ 0x80
 800bf40:	0352      	lsls	r2, r2, #13
 800bf42:	621a      	str	r2, [r3, #32]
=======
 800c1b6:	23a4      	movs	r3, #164	@ 0xa4
 800c1b8:	18fb      	adds	r3, r7, r3
 800c1ba:	681a      	ldr	r2, [r3, #0]
 800c1bc:	2380      	movs	r3, #128	@ 0x80
 800c1be:	035b      	lsls	r3, r3, #13
 800c1c0:	4013      	ands	r3, r2
 800c1c2:	d012      	beq.n	800c1ea <HAL_UART_IRQHandler+0x56a>
 800c1c4:	239c      	movs	r3, #156	@ 0x9c
 800c1c6:	18fb      	adds	r3, r7, r3
 800c1c8:	681a      	ldr	r2, [r3, #0]
 800c1ca:	2380      	movs	r3, #128	@ 0x80
 800c1cc:	03db      	lsls	r3, r3, #15
 800c1ce:	4013      	ands	r3, r2
 800c1d0:	d00b      	beq.n	800c1ea <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	2280      	movs	r2, #128	@ 0x80
 800c1d8:	0352      	lsls	r2, r2, #13
 800c1da:	621a      	str	r2, [r3, #32]
>>>>>>> main
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
<<<<<<< HEAD
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	22a8      	movs	r2, #168	@ 0xa8
 800bf48:	589b      	ldr	r3, [r3, r2]
 800bf4a:	687a      	ldr	r2, [r7, #4]
 800bf4c:	0010      	movs	r0, r2
 800bf4e:	4798      	blx	r3
=======
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	22a8      	movs	r2, #168	@ 0xa8
 800c1e0:	589b      	ldr	r3, [r3, r2]
 800c1e2:	687a      	ldr	r2, [r7, #4]
 800c1e4:	0010      	movs	r0, r2
 800c1e6:	4798      	blx	r3
>>>>>>> main
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
<<<<<<< HEAD
 800bf50:	e02f      	b.n	800bfb2 <HAL_UART_IRQHandler+0x5ca>
=======
 800c1e8:	e02f      	b.n	800c24a <HAL_UART_IRQHandler+0x5ca>
>>>>>>> main
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
<<<<<<< HEAD
 800bf52:	23a4      	movs	r3, #164	@ 0xa4
 800bf54:	18fb      	adds	r3, r7, r3
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	2280      	movs	r2, #128	@ 0x80
 800bf5a:	4013      	ands	r3, r2
 800bf5c:	d00f      	beq.n	800bf7e <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800bf5e:	23a0      	movs	r3, #160	@ 0xa0
 800bf60:	18fb      	adds	r3, r7, r3
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	2280      	movs	r2, #128	@ 0x80
 800bf66:	4013      	ands	r3, r2
 800bf68:	d009      	beq.n	800bf7e <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d01e      	beq.n	800bfb0 <HAL_UART_IRQHandler+0x5c8>
    {
      huart->TxISR(huart);
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bf76:	687a      	ldr	r2, [r7, #4]
 800bf78:	0010      	movs	r0, r2
 800bf7a:	4798      	blx	r3
    }
    return;
 800bf7c:	e018      	b.n	800bfb0 <HAL_UART_IRQHandler+0x5c8>
=======
 800c1ea:	23a4      	movs	r3, #164	@ 0xa4
 800c1ec:	18fb      	adds	r3, r7, r3
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	2280      	movs	r2, #128	@ 0x80
 800c1f2:	4013      	ands	r3, r2
 800c1f4:	d00f      	beq.n	800c216 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800c1f6:	23a0      	movs	r3, #160	@ 0xa0
 800c1f8:	18fb      	adds	r3, r7, r3
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	2280      	movs	r2, #128	@ 0x80
 800c1fe:	4013      	ands	r3, r2
 800c200:	d009      	beq.n	800c216 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c206:	2b00      	cmp	r3, #0
 800c208:	d01e      	beq.n	800c248 <HAL_UART_IRQHandler+0x5c8>
    {
      huart->TxISR(huart);
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c20e:	687a      	ldr	r2, [r7, #4]
 800c210:	0010      	movs	r0, r2
 800c212:	4798      	blx	r3
    }
    return;
 800c214:	e018      	b.n	800c248 <HAL_UART_IRQHandler+0x5c8>
>>>>>>> main
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
<<<<<<< HEAD
 800bf7e:	23a4      	movs	r3, #164	@ 0xa4
 800bf80:	18fb      	adds	r3, r7, r3
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	2240      	movs	r2, #64	@ 0x40
 800bf86:	4013      	ands	r3, r2
 800bf88:	d013      	beq.n	800bfb2 <HAL_UART_IRQHandler+0x5ca>
 800bf8a:	23a0      	movs	r3, #160	@ 0xa0
 800bf8c:	18fb      	adds	r3, r7, r3
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	2240      	movs	r2, #64	@ 0x40
 800bf92:	4013      	ands	r3, r2
 800bf94:	d00d      	beq.n	800bfb2 <HAL_UART_IRQHandler+0x5ca>
  {
    UART_EndTransmit_IT(huart);
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	0018      	movs	r0, r3
 800bf9a:	f000 fd72 	bl	800ca82 <UART_EndTransmit_IT>
    return;
 800bf9e:	e008      	b.n	800bfb2 <HAL_UART_IRQHandler+0x5ca>
      return;
 800bfa0:	46c0      	nop			@ (mov r8, r8)
 800bfa2:	e006      	b.n	800bfb2 <HAL_UART_IRQHandler+0x5ca>
    return;
 800bfa4:	46c0      	nop			@ (mov r8, r8)
 800bfa6:	e004      	b.n	800bfb2 <HAL_UART_IRQHandler+0x5ca>
      return;
 800bfa8:	46c0      	nop			@ (mov r8, r8)
 800bfaa:	e002      	b.n	800bfb2 <HAL_UART_IRQHandler+0x5ca>
      return;
 800bfac:	46c0      	nop			@ (mov r8, r8)
 800bfae:	e000      	b.n	800bfb2 <HAL_UART_IRQHandler+0x5ca>
    return;
 800bfb0:	46c0      	nop			@ (mov r8, r8)
  }

}
 800bfb2:	46bd      	mov	sp, r7
 800bfb4:	b02b      	add	sp, #172	@ 0xac
 800bfb6:	bd90      	pop	{r4, r7, pc}
 800bfb8:	fffffeff 	.word	0xfffffeff
 800bfbc:	fffffedf 	.word	0xfffffedf

0800bfc0 <HAL_UART_TxCpltCallback>:
=======
 800c216:	23a4      	movs	r3, #164	@ 0xa4
 800c218:	18fb      	adds	r3, r7, r3
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	2240      	movs	r2, #64	@ 0x40
 800c21e:	4013      	ands	r3, r2
 800c220:	d013      	beq.n	800c24a <HAL_UART_IRQHandler+0x5ca>
 800c222:	23a0      	movs	r3, #160	@ 0xa0
 800c224:	18fb      	adds	r3, r7, r3
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	2240      	movs	r2, #64	@ 0x40
 800c22a:	4013      	ands	r3, r2
 800c22c:	d00d      	beq.n	800c24a <HAL_UART_IRQHandler+0x5ca>
  {
    UART_EndTransmit_IT(huart);
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	0018      	movs	r0, r3
 800c232:	f000 fd72 	bl	800cd1a <UART_EndTransmit_IT>
    return;
 800c236:	e008      	b.n	800c24a <HAL_UART_IRQHandler+0x5ca>
      return;
 800c238:	46c0      	nop			@ (mov r8, r8)
 800c23a:	e006      	b.n	800c24a <HAL_UART_IRQHandler+0x5ca>
    return;
 800c23c:	46c0      	nop			@ (mov r8, r8)
 800c23e:	e004      	b.n	800c24a <HAL_UART_IRQHandler+0x5ca>
      return;
 800c240:	46c0      	nop			@ (mov r8, r8)
 800c242:	e002      	b.n	800c24a <HAL_UART_IRQHandler+0x5ca>
      return;
 800c244:	46c0      	nop			@ (mov r8, r8)
 800c246:	e000      	b.n	800c24a <HAL_UART_IRQHandler+0x5ca>
    return;
 800c248:	46c0      	nop			@ (mov r8, r8)
  }

}
 800c24a:	46bd      	mov	sp, r7
 800c24c:	b02b      	add	sp, #172	@ 0xac
 800c24e:	bd90      	pop	{r4, r7, pc}
 800c250:	fffffeff 	.word	0xfffffeff
 800c254:	fffffedf 	.word	0xfffffedf

0800c258 <HAL_UART_TxCpltCallback>:
>>>>>>> main
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 800bfc0:	b580      	push	{r7, lr}
 800bfc2:	b082      	sub	sp, #8
 800bfc4:	af00      	add	r7, sp, #0
 800bfc6:	6078      	str	r0, [r7, #4]
=======
 800c258:	b580      	push	{r7, lr}
 800c25a:	b082      	sub	sp, #8
 800c25c:	af00      	add	r7, sp, #0
 800c25e:	6078      	str	r0, [r7, #4]
>>>>>>> main
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
<<<<<<< HEAD
 800bfc8:	46c0      	nop			@ (mov r8, r8)
 800bfca:	46bd      	mov	sp, r7
 800bfcc:	b002      	add	sp, #8
 800bfce:	bd80      	pop	{r7, pc}

0800bfd0 <HAL_UART_TxHalfCpltCallback>:
=======
 800c260:	46c0      	nop			@ (mov r8, r8)
 800c262:	46bd      	mov	sp, r7
 800c264:	b002      	add	sp, #8
 800c266:	bd80      	pop	{r7, pc}

0800c268 <HAL_UART_TxHalfCpltCallback>:
>>>>>>> main
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 800bfd0:	b580      	push	{r7, lr}
 800bfd2:	b082      	sub	sp, #8
 800bfd4:	af00      	add	r7, sp, #0
 800bfd6:	6078      	str	r0, [r7, #4]
=======
 800c268:	b580      	push	{r7, lr}
 800c26a:	b082      	sub	sp, #8
 800c26c:	af00      	add	r7, sp, #0
 800c26e:	6078      	str	r0, [r7, #4]
>>>>>>> main
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
<<<<<<< HEAD
 800bfd8:	46c0      	nop			@ (mov r8, r8)
 800bfda:	46bd      	mov	sp, r7
 800bfdc:	b002      	add	sp, #8
 800bfde:	bd80      	pop	{r7, pc}

0800bfe0 <HAL_UART_RxHalfCpltCallback>:
=======
 800c270:	46c0      	nop			@ (mov r8, r8)
 800c272:	46bd      	mov	sp, r7
 800c274:	b002      	add	sp, #8
 800c276:	bd80      	pop	{r7, pc}

0800c278 <HAL_UART_RxHalfCpltCallback>:
>>>>>>> main
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 800bfe0:	b580      	push	{r7, lr}
 800bfe2:	b082      	sub	sp, #8
 800bfe4:	af00      	add	r7, sp, #0
 800bfe6:	6078      	str	r0, [r7, #4]
=======
 800c278:	b580      	push	{r7, lr}
 800c27a:	b082      	sub	sp, #8
 800c27c:	af00      	add	r7, sp, #0
 800c27e:	6078      	str	r0, [r7, #4]
>>>>>>> main
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
<<<<<<< HEAD
 800bfe8:	46c0      	nop			@ (mov r8, r8)
 800bfea:	46bd      	mov	sp, r7
 800bfec:	b002      	add	sp, #8
 800bfee:	bd80      	pop	{r7, pc}

0800bff0 <HAL_UART_AbortCpltCallback>:
=======
 800c280:	46c0      	nop			@ (mov r8, r8)
 800c282:	46bd      	mov	sp, r7
 800c284:	b002      	add	sp, #8
 800c286:	bd80      	pop	{r7, pc}

0800c288 <HAL_UART_AbortCpltCallback>:
>>>>>>> main
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 800bff0:	b580      	push	{r7, lr}
 800bff2:	b082      	sub	sp, #8
 800bff4:	af00      	add	r7, sp, #0
 800bff6:	6078      	str	r0, [r7, #4]
=======
 800c288:	b580      	push	{r7, lr}
 800c28a:	b082      	sub	sp, #8
 800c28c:	af00      	add	r7, sp, #0
 800c28e:	6078      	str	r0, [r7, #4]
>>>>>>> main
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
<<<<<<< HEAD
 800bff8:	46c0      	nop			@ (mov r8, r8)
 800bffa:	46bd      	mov	sp, r7
 800bffc:	b002      	add	sp, #8
 800bffe:	bd80      	pop	{r7, pc}

0800c000 <HAL_UART_AbortTransmitCpltCallback>:
=======
 800c290:	46c0      	nop			@ (mov r8, r8)
 800c292:	46bd      	mov	sp, r7
 800c294:	b002      	add	sp, #8
 800c296:	bd80      	pop	{r7, pc}

0800c298 <HAL_UART_AbortTransmitCpltCallback>:
>>>>>>> main
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 800c000:	b580      	push	{r7, lr}
 800c002:	b082      	sub	sp, #8
 800c004:	af00      	add	r7, sp, #0
 800c006:	6078      	str	r0, [r7, #4]
=======
 800c298:	b580      	push	{r7, lr}
 800c29a:	b082      	sub	sp, #8
 800c29c:	af00      	add	r7, sp, #0
 800c29e:	6078      	str	r0, [r7, #4]
>>>>>>> main
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
<<<<<<< HEAD
 800c008:	46c0      	nop			@ (mov r8, r8)
 800c00a:	46bd      	mov	sp, r7
 800c00c:	b002      	add	sp, #8
 800c00e:	bd80      	pop	{r7, pc}

0800c010 <HAL_UART_AbortReceiveCpltCallback>:
=======
 800c2a0:	46c0      	nop			@ (mov r8, r8)
 800c2a2:	46bd      	mov	sp, r7
 800c2a4:	b002      	add	sp, #8
 800c2a6:	bd80      	pop	{r7, pc}

0800c2a8 <HAL_UART_AbortReceiveCpltCallback>:
>>>>>>> main
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 800c010:	b580      	push	{r7, lr}
 800c012:	b082      	sub	sp, #8
 800c014:	af00      	add	r7, sp, #0
 800c016:	6078      	str	r0, [r7, #4]
=======
 800c2a8:	b580      	push	{r7, lr}
 800c2aa:	b082      	sub	sp, #8
 800c2ac:	af00      	add	r7, sp, #0
 800c2ae:	6078      	str	r0, [r7, #4]
>>>>>>> main
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
<<<<<<< HEAD
 800c018:	46c0      	nop			@ (mov r8, r8)
 800c01a:	46bd      	mov	sp, r7
 800c01c:	b002      	add	sp, #8
 800c01e:	bd80      	pop	{r7, pc}

0800c020 <HAL_UARTEx_RxEventCallback>:
=======
 800c2b0:	46c0      	nop			@ (mov r8, r8)
 800c2b2:	46bd      	mov	sp, r7
 800c2b4:	b002      	add	sp, #8
 800c2b6:	bd80      	pop	{r7, pc}

0800c2b8 <HAL_UARTEx_RxEventCallback>:
>>>>>>> main
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
<<<<<<< HEAD
 800c020:	b580      	push	{r7, lr}
 800c022:	b082      	sub	sp, #8
 800c024:	af00      	add	r7, sp, #0
 800c026:	6078      	str	r0, [r7, #4]
 800c028:	000a      	movs	r2, r1
 800c02a:	1cbb      	adds	r3, r7, #2
 800c02c:	801a      	strh	r2, [r3, #0]
=======
 800c2b8:	b580      	push	{r7, lr}
 800c2ba:	b082      	sub	sp, #8
 800c2bc:	af00      	add	r7, sp, #0
 800c2be:	6078      	str	r0, [r7, #4]
 800c2c0:	000a      	movs	r2, r1
 800c2c2:	1cbb      	adds	r3, r7, #2
 800c2c4:	801a      	strh	r2, [r3, #0]
>>>>>>> main
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
<<<<<<< HEAD
 800c02e:	46c0      	nop			@ (mov r8, r8)
 800c030:	46bd      	mov	sp, r7
 800c032:	b002      	add	sp, #8
 800c034:	bd80      	pop	{r7, pc}
	...

0800c038 <UART_InitCallbacksToDefault>:
=======
 800c2c6:	46c0      	nop			@ (mov r8, r8)
 800c2c8:	46bd      	mov	sp, r7
 800c2ca:	b002      	add	sp, #8
 800c2cc:	bd80      	pop	{r7, pc}
	...

0800c2d0 <UART_InitCallbacksToDefault>:
>>>>>>> main
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 800c038:	b580      	push	{r7, lr}
 800c03a:	b082      	sub	sp, #8
 800c03c:	af00      	add	r7, sp, #0
 800c03e:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	2188      	movs	r1, #136	@ 0x88
 800c044:	4a14      	ldr	r2, [pc, #80]	@ (800c098 <UART_InitCallbacksToDefault+0x60>)
 800c046:	505a      	str	r2, [r3, r1]
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	218c      	movs	r1, #140	@ 0x8c
 800c04c:	4a13      	ldr	r2, [pc, #76]	@ (800c09c <UART_InitCallbacksToDefault+0x64>)
 800c04e:	505a      	str	r2, [r3, r1]
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	2190      	movs	r1, #144	@ 0x90
 800c054:	4a12      	ldr	r2, [pc, #72]	@ (800c0a0 <UART_InitCallbacksToDefault+0x68>)
 800c056:	505a      	str	r2, [r3, r1]
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	2194      	movs	r1, #148	@ 0x94
 800c05c:	4a11      	ldr	r2, [pc, #68]	@ (800c0a4 <UART_InitCallbacksToDefault+0x6c>)
 800c05e:	505a      	str	r2, [r3, r1]
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	2198      	movs	r1, #152	@ 0x98
 800c064:	4a10      	ldr	r2, [pc, #64]	@ (800c0a8 <UART_InitCallbacksToDefault+0x70>)
 800c066:	505a      	str	r2, [r3, r1]
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	219c      	movs	r1, #156	@ 0x9c
 800c06c:	4a0f      	ldr	r2, [pc, #60]	@ (800c0ac <UART_InitCallbacksToDefault+0x74>)
 800c06e:	505a      	str	r2, [r3, r1]
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	21a0      	movs	r1, #160	@ 0xa0
 800c074:	4a0e      	ldr	r2, [pc, #56]	@ (800c0b0 <UART_InitCallbacksToDefault+0x78>)
 800c076:	505a      	str	r2, [r3, r1]
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	21a4      	movs	r1, #164	@ 0xa4
 800c07c:	4a0d      	ldr	r2, [pc, #52]	@ (800c0b4 <UART_InitCallbacksToDefault+0x7c>)
 800c07e:	505a      	str	r2, [r3, r1]
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	21a8      	movs	r1, #168	@ 0xa8
 800c084:	4a0c      	ldr	r2, [pc, #48]	@ (800c0b8 <UART_InitCallbacksToDefault+0x80>)
 800c086:	505a      	str	r2, [r3, r1]
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	21ac      	movs	r1, #172	@ 0xac
 800c08c:	4a0b      	ldr	r2, [pc, #44]	@ (800c0bc <UART_InitCallbacksToDefault+0x84>)
 800c08e:	505a      	str	r2, [r3, r1]

}
 800c090:	46c0      	nop			@ (mov r8, r8)
 800c092:	46bd      	mov	sp, r7
 800c094:	b002      	add	sp, #8
 800c096:	bd80      	pop	{r7, pc}
 800c098:	0800bfd1 	.word	0x0800bfd1
 800c09c:	0800bfc1 	.word	0x0800bfc1
 800c0a0:	0800bfe1 	.word	0x0800bfe1
 800c0a4:	08003451 	.word	0x08003451
 800c0a8:	0800348d 	.word	0x0800348d
 800c0ac:	0800bff1 	.word	0x0800bff1
 800c0b0:	0800c001 	.word	0x0800c001
 800c0b4:	0800c011 	.word	0x0800c011
 800c0b8:	0800cadd 	.word	0x0800cadd
 800c0bc:	0800c021 	.word	0x0800c021

0800c0c0 <UART_SetConfig>:
=======
 800c2d0:	b580      	push	{r7, lr}
 800c2d2:	b082      	sub	sp, #8
 800c2d4:	af00      	add	r7, sp, #0
 800c2d6:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	2188      	movs	r1, #136	@ 0x88
 800c2dc:	4a14      	ldr	r2, [pc, #80]	@ (800c330 <UART_InitCallbacksToDefault+0x60>)
 800c2de:	505a      	str	r2, [r3, r1]
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	218c      	movs	r1, #140	@ 0x8c
 800c2e4:	4a13      	ldr	r2, [pc, #76]	@ (800c334 <UART_InitCallbacksToDefault+0x64>)
 800c2e6:	505a      	str	r2, [r3, r1]
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	2190      	movs	r1, #144	@ 0x90
 800c2ec:	4a12      	ldr	r2, [pc, #72]	@ (800c338 <UART_InitCallbacksToDefault+0x68>)
 800c2ee:	505a      	str	r2, [r3, r1]
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	2194      	movs	r1, #148	@ 0x94
 800c2f4:	4a11      	ldr	r2, [pc, #68]	@ (800c33c <UART_InitCallbacksToDefault+0x6c>)
 800c2f6:	505a      	str	r2, [r3, r1]
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	2198      	movs	r1, #152	@ 0x98
 800c2fc:	4a10      	ldr	r2, [pc, #64]	@ (800c340 <UART_InitCallbacksToDefault+0x70>)
 800c2fe:	505a      	str	r2, [r3, r1]
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	219c      	movs	r1, #156	@ 0x9c
 800c304:	4a0f      	ldr	r2, [pc, #60]	@ (800c344 <UART_InitCallbacksToDefault+0x74>)
 800c306:	505a      	str	r2, [r3, r1]
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	21a0      	movs	r1, #160	@ 0xa0
 800c30c:	4a0e      	ldr	r2, [pc, #56]	@ (800c348 <UART_InitCallbacksToDefault+0x78>)
 800c30e:	505a      	str	r2, [r3, r1]
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	21a4      	movs	r1, #164	@ 0xa4
 800c314:	4a0d      	ldr	r2, [pc, #52]	@ (800c34c <UART_InitCallbacksToDefault+0x7c>)
 800c316:	505a      	str	r2, [r3, r1]
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	21a8      	movs	r1, #168	@ 0xa8
 800c31c:	4a0c      	ldr	r2, [pc, #48]	@ (800c350 <UART_InitCallbacksToDefault+0x80>)
 800c31e:	505a      	str	r2, [r3, r1]
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	21ac      	movs	r1, #172	@ 0xac
 800c324:	4a0b      	ldr	r2, [pc, #44]	@ (800c354 <UART_InitCallbacksToDefault+0x84>)
 800c326:	505a      	str	r2, [r3, r1]

}
 800c328:	46c0      	nop			@ (mov r8, r8)
 800c32a:	46bd      	mov	sp, r7
 800c32c:	b002      	add	sp, #8
 800c32e:	bd80      	pop	{r7, pc}
 800c330:	0800c269 	.word	0x0800c269
 800c334:	0800c259 	.word	0x0800c259
 800c338:	0800c279 	.word	0x0800c279
 800c33c:	0800354d 	.word	0x0800354d
 800c340:	08003589 	.word	0x08003589
 800c344:	0800c289 	.word	0x0800c289
 800c348:	0800c299 	.word	0x0800c299
 800c34c:	0800c2a9 	.word	0x0800c2a9
 800c350:	0800cd75 	.word	0x0800cd75
 800c354:	0800c2b9 	.word	0x0800c2b9

0800c358 <UART_SetConfig>:
>>>>>>> main
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 800c0c0:	b5b0      	push	{r4, r5, r7, lr}
 800c0c2:	b08e      	sub	sp, #56	@ 0x38
 800c0c4:	af00      	add	r7, sp, #0
 800c0c6:	61f8      	str	r0, [r7, #28]
=======
 800c358:	b5b0      	push	{r4, r5, r7, lr}
 800c35a:	b08e      	sub	sp, #56	@ 0x38
 800c35c:	af00      	add	r7, sp, #0
 800c35e:	61f8      	str	r0, [r7, #28]
>>>>>>> main
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
<<<<<<< HEAD
 800c0c8:	231a      	movs	r3, #26
 800c0ca:	2218      	movs	r2, #24
 800c0cc:	189b      	adds	r3, r3, r2
 800c0ce:	19db      	adds	r3, r3, r7
 800c0d0:	2200      	movs	r2, #0
 800c0d2:	701a      	strb	r2, [r3, #0]
=======
 800c360:	231a      	movs	r3, #26
 800c362:	2218      	movs	r2, #24
 800c364:	189b      	adds	r3, r3, r2
 800c366:	19db      	adds	r3, r3, r7
 800c368:	2200      	movs	r2, #0
 800c36a:	701a      	strb	r2, [r3, #0]
>>>>>>> main
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
<<<<<<< HEAD
 800c0d4:	69fb      	ldr	r3, [r7, #28]
 800c0d6:	689a      	ldr	r2, [r3, #8]
 800c0d8:	69fb      	ldr	r3, [r7, #28]
 800c0da:	691b      	ldr	r3, [r3, #16]
 800c0dc:	431a      	orrs	r2, r3
 800c0de:	69fb      	ldr	r3, [r7, #28]
 800c0e0:	695b      	ldr	r3, [r3, #20]
 800c0e2:	431a      	orrs	r2, r3
 800c0e4:	69fb      	ldr	r3, [r7, #28]
 800c0e6:	69db      	ldr	r3, [r3, #28]
 800c0e8:	4313      	orrs	r3, r2
 800c0ea:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c0ec:	69fb      	ldr	r3, [r7, #28]
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	4ac3      	ldr	r2, [pc, #780]	@ (800c400 <UART_SetConfig+0x340>)
 800c0f4:	4013      	ands	r3, r2
 800c0f6:	0019      	movs	r1, r3
 800c0f8:	69fb      	ldr	r3, [r7, #28]
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c0fe:	430a      	orrs	r2, r1
 800c100:	601a      	str	r2, [r3, #0]
=======
 800c36c:	69fb      	ldr	r3, [r7, #28]
 800c36e:	689a      	ldr	r2, [r3, #8]
 800c370:	69fb      	ldr	r3, [r7, #28]
 800c372:	691b      	ldr	r3, [r3, #16]
 800c374:	431a      	orrs	r2, r3
 800c376:	69fb      	ldr	r3, [r7, #28]
 800c378:	695b      	ldr	r3, [r3, #20]
 800c37a:	431a      	orrs	r2, r3
 800c37c:	69fb      	ldr	r3, [r7, #28]
 800c37e:	69db      	ldr	r3, [r3, #28]
 800c380:	4313      	orrs	r3, r2
 800c382:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c384:	69fb      	ldr	r3, [r7, #28]
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	4ac3      	ldr	r2, [pc, #780]	@ (800c698 <UART_SetConfig+0x340>)
 800c38c:	4013      	ands	r3, r2
 800c38e:	0019      	movs	r1, r3
 800c390:	69fb      	ldr	r3, [r7, #28]
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c396:	430a      	orrs	r2, r1
 800c398:	601a      	str	r2, [r3, #0]
>>>>>>> main

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
<<<<<<< HEAD
 800c102:	69fb      	ldr	r3, [r7, #28]
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	685b      	ldr	r3, [r3, #4]
 800c108:	4abe      	ldr	r2, [pc, #760]	@ (800c404 <UART_SetConfig+0x344>)
 800c10a:	4013      	ands	r3, r2
 800c10c:	0019      	movs	r1, r3
 800c10e:	69fb      	ldr	r3, [r7, #28]
 800c110:	68da      	ldr	r2, [r3, #12]
 800c112:	69fb      	ldr	r3, [r7, #28]
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	430a      	orrs	r2, r1
 800c118:	605a      	str	r2, [r3, #4]
=======
 800c39a:	69fb      	ldr	r3, [r7, #28]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	685b      	ldr	r3, [r3, #4]
 800c3a0:	4abe      	ldr	r2, [pc, #760]	@ (800c69c <UART_SetConfig+0x344>)
 800c3a2:	4013      	ands	r3, r2
 800c3a4:	0019      	movs	r1, r3
 800c3a6:	69fb      	ldr	r3, [r7, #28]
 800c3a8:	68da      	ldr	r2, [r3, #12]
 800c3aa:	69fb      	ldr	r3, [r7, #28]
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	430a      	orrs	r2, r1
 800c3b0:	605a      	str	r2, [r3, #4]
>>>>>>> main
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
<<<<<<< HEAD
 800c11a:	69fb      	ldr	r3, [r7, #28]
 800c11c:	699b      	ldr	r3, [r3, #24]
 800c11e:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c120:	69fb      	ldr	r3, [r7, #28]
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	4ab8      	ldr	r2, [pc, #736]	@ (800c408 <UART_SetConfig+0x348>)
 800c126:	4293      	cmp	r3, r2
 800c128:	d004      	beq.n	800c134 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c12a:	69fb      	ldr	r3, [r7, #28]
 800c12c:	6a1b      	ldr	r3, [r3, #32]
 800c12e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c130:	4313      	orrs	r3, r2
 800c132:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c134:	69fb      	ldr	r3, [r7, #28]
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	689b      	ldr	r3, [r3, #8]
 800c13a:	4ab4      	ldr	r2, [pc, #720]	@ (800c40c <UART_SetConfig+0x34c>)
 800c13c:	4013      	ands	r3, r2
 800c13e:	0019      	movs	r1, r3
 800c140:	69fb      	ldr	r3, [r7, #28]
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c146:	430a      	orrs	r2, r1
 800c148:	609a      	str	r2, [r3, #8]
=======
 800c3b2:	69fb      	ldr	r3, [r7, #28]
 800c3b4:	699b      	ldr	r3, [r3, #24]
 800c3b6:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c3b8:	69fb      	ldr	r3, [r7, #28]
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	4ab8      	ldr	r2, [pc, #736]	@ (800c6a0 <UART_SetConfig+0x348>)
 800c3be:	4293      	cmp	r3, r2
 800c3c0:	d004      	beq.n	800c3cc <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c3c2:	69fb      	ldr	r3, [r7, #28]
 800c3c4:	6a1b      	ldr	r3, [r3, #32]
 800c3c6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c3c8:	4313      	orrs	r3, r2
 800c3ca:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c3cc:	69fb      	ldr	r3, [r7, #28]
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	689b      	ldr	r3, [r3, #8]
 800c3d2:	4ab4      	ldr	r2, [pc, #720]	@ (800c6a4 <UART_SetConfig+0x34c>)
 800c3d4:	4013      	ands	r3, r2
 800c3d6:	0019      	movs	r1, r3
 800c3d8:	69fb      	ldr	r3, [r7, #28]
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c3de:	430a      	orrs	r2, r1
 800c3e0:	609a      	str	r2, [r3, #8]
>>>>>>> main


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
<<<<<<< HEAD
 800c14a:	69fb      	ldr	r3, [r7, #28]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	4ab0      	ldr	r2, [pc, #704]	@ (800c410 <UART_SetConfig+0x350>)
 800c150:	4293      	cmp	r3, r2
 800c152:	d131      	bne.n	800c1b8 <UART_SetConfig+0xf8>
 800c154:	4baf      	ldr	r3, [pc, #700]	@ (800c414 <UART_SetConfig+0x354>)
 800c156:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c158:	2203      	movs	r2, #3
 800c15a:	4013      	ands	r3, r2
 800c15c:	2b03      	cmp	r3, #3
 800c15e:	d01d      	beq.n	800c19c <UART_SetConfig+0xdc>
 800c160:	d823      	bhi.n	800c1aa <UART_SetConfig+0xea>
 800c162:	2b02      	cmp	r3, #2
 800c164:	d00c      	beq.n	800c180 <UART_SetConfig+0xc0>
 800c166:	d820      	bhi.n	800c1aa <UART_SetConfig+0xea>
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d002      	beq.n	800c172 <UART_SetConfig+0xb2>
 800c16c:	2b01      	cmp	r3, #1
 800c16e:	d00e      	beq.n	800c18e <UART_SetConfig+0xce>
 800c170:	e01b      	b.n	800c1aa <UART_SetConfig+0xea>
 800c172:	231b      	movs	r3, #27
 800c174:	2218      	movs	r2, #24
 800c176:	189b      	adds	r3, r3, r2
 800c178:	19db      	adds	r3, r3, r7
 800c17a:	2201      	movs	r2, #1
 800c17c:	701a      	strb	r2, [r3, #0]
 800c17e:	e0b4      	b.n	800c2ea <UART_SetConfig+0x22a>
 800c180:	231b      	movs	r3, #27
 800c182:	2218      	movs	r2, #24
 800c184:	189b      	adds	r3, r3, r2
 800c186:	19db      	adds	r3, r3, r7
 800c188:	2202      	movs	r2, #2
 800c18a:	701a      	strb	r2, [r3, #0]
 800c18c:	e0ad      	b.n	800c2ea <UART_SetConfig+0x22a>
 800c18e:	231b      	movs	r3, #27
 800c190:	2218      	movs	r2, #24
 800c192:	189b      	adds	r3, r3, r2
 800c194:	19db      	adds	r3, r3, r7
 800c196:	2204      	movs	r2, #4
 800c198:	701a      	strb	r2, [r3, #0]
 800c19a:	e0a6      	b.n	800c2ea <UART_SetConfig+0x22a>
 800c19c:	231b      	movs	r3, #27
 800c19e:	2218      	movs	r2, #24
 800c1a0:	189b      	adds	r3, r3, r2
 800c1a2:	19db      	adds	r3, r3, r7
 800c1a4:	2208      	movs	r2, #8
 800c1a6:	701a      	strb	r2, [r3, #0]
 800c1a8:	e09f      	b.n	800c2ea <UART_SetConfig+0x22a>
 800c1aa:	231b      	movs	r3, #27
 800c1ac:	2218      	movs	r2, #24
 800c1ae:	189b      	adds	r3, r3, r2
 800c1b0:	19db      	adds	r3, r3, r7
 800c1b2:	2210      	movs	r2, #16
 800c1b4:	701a      	strb	r2, [r3, #0]
 800c1b6:	e098      	b.n	800c2ea <UART_SetConfig+0x22a>
 800c1b8:	69fb      	ldr	r3, [r7, #28]
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	4a96      	ldr	r2, [pc, #600]	@ (800c418 <UART_SetConfig+0x358>)
 800c1be:	4293      	cmp	r3, r2
 800c1c0:	d131      	bne.n	800c226 <UART_SetConfig+0x166>
 800c1c2:	4b94      	ldr	r3, [pc, #592]	@ (800c414 <UART_SetConfig+0x354>)
 800c1c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c1c6:	220c      	movs	r2, #12
 800c1c8:	4013      	ands	r3, r2
 800c1ca:	2b0c      	cmp	r3, #12
 800c1cc:	d01d      	beq.n	800c20a <UART_SetConfig+0x14a>
 800c1ce:	d823      	bhi.n	800c218 <UART_SetConfig+0x158>
 800c1d0:	2b08      	cmp	r3, #8
 800c1d2:	d00c      	beq.n	800c1ee <UART_SetConfig+0x12e>
 800c1d4:	d820      	bhi.n	800c218 <UART_SetConfig+0x158>
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d002      	beq.n	800c1e0 <UART_SetConfig+0x120>
 800c1da:	2b04      	cmp	r3, #4
 800c1dc:	d00e      	beq.n	800c1fc <UART_SetConfig+0x13c>
 800c1de:	e01b      	b.n	800c218 <UART_SetConfig+0x158>
 800c1e0:	231b      	movs	r3, #27
 800c1e2:	2218      	movs	r2, #24
 800c1e4:	189b      	adds	r3, r3, r2
 800c1e6:	19db      	adds	r3, r3, r7
 800c1e8:	2200      	movs	r2, #0
 800c1ea:	701a      	strb	r2, [r3, #0]
 800c1ec:	e07d      	b.n	800c2ea <UART_SetConfig+0x22a>
 800c1ee:	231b      	movs	r3, #27
 800c1f0:	2218      	movs	r2, #24
 800c1f2:	189b      	adds	r3, r3, r2
 800c1f4:	19db      	adds	r3, r3, r7
 800c1f6:	2202      	movs	r2, #2
 800c1f8:	701a      	strb	r2, [r3, #0]
 800c1fa:	e076      	b.n	800c2ea <UART_SetConfig+0x22a>
 800c1fc:	231b      	movs	r3, #27
 800c1fe:	2218      	movs	r2, #24
 800c200:	189b      	adds	r3, r3, r2
 800c202:	19db      	adds	r3, r3, r7
 800c204:	2204      	movs	r2, #4
 800c206:	701a      	strb	r2, [r3, #0]
 800c208:	e06f      	b.n	800c2ea <UART_SetConfig+0x22a>
 800c20a:	231b      	movs	r3, #27
 800c20c:	2218      	movs	r2, #24
 800c20e:	189b      	adds	r3, r3, r2
 800c210:	19db      	adds	r3, r3, r7
 800c212:	2208      	movs	r2, #8
 800c214:	701a      	strb	r2, [r3, #0]
 800c216:	e068      	b.n	800c2ea <UART_SetConfig+0x22a>
 800c218:	231b      	movs	r3, #27
 800c21a:	2218      	movs	r2, #24
 800c21c:	189b      	adds	r3, r3, r2
 800c21e:	19db      	adds	r3, r3, r7
 800c220:	2210      	movs	r2, #16
 800c222:	701a      	strb	r2, [r3, #0]
 800c224:	e061      	b.n	800c2ea <UART_SetConfig+0x22a>
 800c226:	69fb      	ldr	r3, [r7, #28]
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	4a7c      	ldr	r2, [pc, #496]	@ (800c41c <UART_SetConfig+0x35c>)
 800c22c:	4293      	cmp	r3, r2
 800c22e:	d106      	bne.n	800c23e <UART_SetConfig+0x17e>
 800c230:	231b      	movs	r3, #27
 800c232:	2218      	movs	r2, #24
 800c234:	189b      	adds	r3, r3, r2
 800c236:	19db      	adds	r3, r3, r7
 800c238:	2200      	movs	r2, #0
 800c23a:	701a      	strb	r2, [r3, #0]
 800c23c:	e055      	b.n	800c2ea <UART_SetConfig+0x22a>
 800c23e:	69fb      	ldr	r3, [r7, #28]
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	4a77      	ldr	r2, [pc, #476]	@ (800c420 <UART_SetConfig+0x360>)
 800c244:	4293      	cmp	r3, r2
 800c246:	d106      	bne.n	800c256 <UART_SetConfig+0x196>
 800c248:	231b      	movs	r3, #27
 800c24a:	2218      	movs	r2, #24
 800c24c:	189b      	adds	r3, r3, r2
 800c24e:	19db      	adds	r3, r3, r7
 800c250:	2200      	movs	r2, #0
 800c252:	701a      	strb	r2, [r3, #0]
 800c254:	e049      	b.n	800c2ea <UART_SetConfig+0x22a>
 800c256:	69fb      	ldr	r3, [r7, #28]
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	4a6b      	ldr	r2, [pc, #428]	@ (800c408 <UART_SetConfig+0x348>)
 800c25c:	4293      	cmp	r3, r2
 800c25e:	d13e      	bne.n	800c2de <UART_SetConfig+0x21e>
 800c260:	4b6c      	ldr	r3, [pc, #432]	@ (800c414 <UART_SetConfig+0x354>)
 800c262:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c264:	23c0      	movs	r3, #192	@ 0xc0
 800c266:	011b      	lsls	r3, r3, #4
 800c268:	4013      	ands	r3, r2
 800c26a:	22c0      	movs	r2, #192	@ 0xc0
 800c26c:	0112      	lsls	r2, r2, #4
 800c26e:	4293      	cmp	r3, r2
 800c270:	d027      	beq.n	800c2c2 <UART_SetConfig+0x202>
 800c272:	22c0      	movs	r2, #192	@ 0xc0
 800c274:	0112      	lsls	r2, r2, #4
 800c276:	4293      	cmp	r3, r2
 800c278:	d82a      	bhi.n	800c2d0 <UART_SetConfig+0x210>
 800c27a:	2280      	movs	r2, #128	@ 0x80
 800c27c:	0112      	lsls	r2, r2, #4
 800c27e:	4293      	cmp	r3, r2
 800c280:	d011      	beq.n	800c2a6 <UART_SetConfig+0x1e6>
 800c282:	2280      	movs	r2, #128	@ 0x80
 800c284:	0112      	lsls	r2, r2, #4
 800c286:	4293      	cmp	r3, r2
 800c288:	d822      	bhi.n	800c2d0 <UART_SetConfig+0x210>
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d004      	beq.n	800c298 <UART_SetConfig+0x1d8>
 800c28e:	2280      	movs	r2, #128	@ 0x80
 800c290:	00d2      	lsls	r2, r2, #3
 800c292:	4293      	cmp	r3, r2
 800c294:	d00e      	beq.n	800c2b4 <UART_SetConfig+0x1f4>
 800c296:	e01b      	b.n	800c2d0 <UART_SetConfig+0x210>
 800c298:	231b      	movs	r3, #27
 800c29a:	2218      	movs	r2, #24
 800c29c:	189b      	adds	r3, r3, r2
 800c29e:	19db      	adds	r3, r3, r7
 800c2a0:	2200      	movs	r2, #0
 800c2a2:	701a      	strb	r2, [r3, #0]
 800c2a4:	e021      	b.n	800c2ea <UART_SetConfig+0x22a>
 800c2a6:	231b      	movs	r3, #27
 800c2a8:	2218      	movs	r2, #24
 800c2aa:	189b      	adds	r3, r3, r2
 800c2ac:	19db      	adds	r3, r3, r7
 800c2ae:	2202      	movs	r2, #2
 800c2b0:	701a      	strb	r2, [r3, #0]
 800c2b2:	e01a      	b.n	800c2ea <UART_SetConfig+0x22a>
 800c2b4:	231b      	movs	r3, #27
 800c2b6:	2218      	movs	r2, #24
 800c2b8:	189b      	adds	r3, r3, r2
 800c2ba:	19db      	adds	r3, r3, r7
 800c2bc:	2204      	movs	r2, #4
 800c2be:	701a      	strb	r2, [r3, #0]
 800c2c0:	e013      	b.n	800c2ea <UART_SetConfig+0x22a>
 800c2c2:	231b      	movs	r3, #27
 800c2c4:	2218      	movs	r2, #24
 800c2c6:	189b      	adds	r3, r3, r2
 800c2c8:	19db      	adds	r3, r3, r7
 800c2ca:	2208      	movs	r2, #8
 800c2cc:	701a      	strb	r2, [r3, #0]
 800c2ce:	e00c      	b.n	800c2ea <UART_SetConfig+0x22a>
 800c2d0:	231b      	movs	r3, #27
 800c2d2:	2218      	movs	r2, #24
 800c2d4:	189b      	adds	r3, r3, r2
 800c2d6:	19db      	adds	r3, r3, r7
 800c2d8:	2210      	movs	r2, #16
 800c2da:	701a      	strb	r2, [r3, #0]
 800c2dc:	e005      	b.n	800c2ea <UART_SetConfig+0x22a>
 800c2de:	231b      	movs	r3, #27
 800c2e0:	2218      	movs	r2, #24
 800c2e2:	189b      	adds	r3, r3, r2
 800c2e4:	19db      	adds	r3, r3, r7
 800c2e6:	2210      	movs	r2, #16
 800c2e8:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c2ea:	69fb      	ldr	r3, [r7, #28]
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	4a46      	ldr	r2, [pc, #280]	@ (800c408 <UART_SetConfig+0x348>)
 800c2f0:	4293      	cmp	r3, r2
 800c2f2:	d000      	beq.n	800c2f6 <UART_SetConfig+0x236>
 800c2f4:	e09a      	b.n	800c42c <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c2f6:	231b      	movs	r3, #27
 800c2f8:	2218      	movs	r2, #24
 800c2fa:	189b      	adds	r3, r3, r2
 800c2fc:	19db      	adds	r3, r3, r7
 800c2fe:	781b      	ldrb	r3, [r3, #0]
 800c300:	2b08      	cmp	r3, #8
 800c302:	d01d      	beq.n	800c340 <UART_SetConfig+0x280>
 800c304:	dc20      	bgt.n	800c348 <UART_SetConfig+0x288>
 800c306:	2b04      	cmp	r3, #4
 800c308:	d015      	beq.n	800c336 <UART_SetConfig+0x276>
 800c30a:	dc1d      	bgt.n	800c348 <UART_SetConfig+0x288>
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d002      	beq.n	800c316 <UART_SetConfig+0x256>
 800c310:	2b02      	cmp	r3, #2
 800c312:	d005      	beq.n	800c320 <UART_SetConfig+0x260>
 800c314:	e018      	b.n	800c348 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c316:	f7fe fd3f 	bl	800ad98 <HAL_RCC_GetPCLK1Freq>
 800c31a:	0003      	movs	r3, r0
 800c31c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800c31e:	e01c      	b.n	800c35a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c320:	4b3c      	ldr	r3, [pc, #240]	@ (800c414 <UART_SetConfig+0x354>)
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	2210      	movs	r2, #16
 800c326:	4013      	ands	r3, r2
 800c328:	d002      	beq.n	800c330 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800c32a:	4b3e      	ldr	r3, [pc, #248]	@ (800c424 <UART_SetConfig+0x364>)
 800c32c:	62fb      	str	r3, [r7, #44]	@ 0x2c
=======
 800c3e2:	69fb      	ldr	r3, [r7, #28]
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	4ab0      	ldr	r2, [pc, #704]	@ (800c6a8 <UART_SetConfig+0x350>)
 800c3e8:	4293      	cmp	r3, r2
 800c3ea:	d131      	bne.n	800c450 <UART_SetConfig+0xf8>
 800c3ec:	4baf      	ldr	r3, [pc, #700]	@ (800c6ac <UART_SetConfig+0x354>)
 800c3ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c3f0:	2203      	movs	r2, #3
 800c3f2:	4013      	ands	r3, r2
 800c3f4:	2b03      	cmp	r3, #3
 800c3f6:	d01d      	beq.n	800c434 <UART_SetConfig+0xdc>
 800c3f8:	d823      	bhi.n	800c442 <UART_SetConfig+0xea>
 800c3fa:	2b02      	cmp	r3, #2
 800c3fc:	d00c      	beq.n	800c418 <UART_SetConfig+0xc0>
 800c3fe:	d820      	bhi.n	800c442 <UART_SetConfig+0xea>
 800c400:	2b00      	cmp	r3, #0
 800c402:	d002      	beq.n	800c40a <UART_SetConfig+0xb2>
 800c404:	2b01      	cmp	r3, #1
 800c406:	d00e      	beq.n	800c426 <UART_SetConfig+0xce>
 800c408:	e01b      	b.n	800c442 <UART_SetConfig+0xea>
 800c40a:	231b      	movs	r3, #27
 800c40c:	2218      	movs	r2, #24
 800c40e:	189b      	adds	r3, r3, r2
 800c410:	19db      	adds	r3, r3, r7
 800c412:	2201      	movs	r2, #1
 800c414:	701a      	strb	r2, [r3, #0]
 800c416:	e0b4      	b.n	800c582 <UART_SetConfig+0x22a>
 800c418:	231b      	movs	r3, #27
 800c41a:	2218      	movs	r2, #24
 800c41c:	189b      	adds	r3, r3, r2
 800c41e:	19db      	adds	r3, r3, r7
 800c420:	2202      	movs	r2, #2
 800c422:	701a      	strb	r2, [r3, #0]
 800c424:	e0ad      	b.n	800c582 <UART_SetConfig+0x22a>
 800c426:	231b      	movs	r3, #27
 800c428:	2218      	movs	r2, #24
 800c42a:	189b      	adds	r3, r3, r2
 800c42c:	19db      	adds	r3, r3, r7
 800c42e:	2204      	movs	r2, #4
 800c430:	701a      	strb	r2, [r3, #0]
 800c432:	e0a6      	b.n	800c582 <UART_SetConfig+0x22a>
 800c434:	231b      	movs	r3, #27
 800c436:	2218      	movs	r2, #24
 800c438:	189b      	adds	r3, r3, r2
 800c43a:	19db      	adds	r3, r3, r7
 800c43c:	2208      	movs	r2, #8
 800c43e:	701a      	strb	r2, [r3, #0]
 800c440:	e09f      	b.n	800c582 <UART_SetConfig+0x22a>
 800c442:	231b      	movs	r3, #27
 800c444:	2218      	movs	r2, #24
 800c446:	189b      	adds	r3, r3, r2
 800c448:	19db      	adds	r3, r3, r7
 800c44a:	2210      	movs	r2, #16
 800c44c:	701a      	strb	r2, [r3, #0]
 800c44e:	e098      	b.n	800c582 <UART_SetConfig+0x22a>
 800c450:	69fb      	ldr	r3, [r7, #28]
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	4a96      	ldr	r2, [pc, #600]	@ (800c6b0 <UART_SetConfig+0x358>)
 800c456:	4293      	cmp	r3, r2
 800c458:	d131      	bne.n	800c4be <UART_SetConfig+0x166>
 800c45a:	4b94      	ldr	r3, [pc, #592]	@ (800c6ac <UART_SetConfig+0x354>)
 800c45c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c45e:	220c      	movs	r2, #12
 800c460:	4013      	ands	r3, r2
 800c462:	2b0c      	cmp	r3, #12
 800c464:	d01d      	beq.n	800c4a2 <UART_SetConfig+0x14a>
 800c466:	d823      	bhi.n	800c4b0 <UART_SetConfig+0x158>
 800c468:	2b08      	cmp	r3, #8
 800c46a:	d00c      	beq.n	800c486 <UART_SetConfig+0x12e>
 800c46c:	d820      	bhi.n	800c4b0 <UART_SetConfig+0x158>
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d002      	beq.n	800c478 <UART_SetConfig+0x120>
 800c472:	2b04      	cmp	r3, #4
 800c474:	d00e      	beq.n	800c494 <UART_SetConfig+0x13c>
 800c476:	e01b      	b.n	800c4b0 <UART_SetConfig+0x158>
 800c478:	231b      	movs	r3, #27
 800c47a:	2218      	movs	r2, #24
 800c47c:	189b      	adds	r3, r3, r2
 800c47e:	19db      	adds	r3, r3, r7
 800c480:	2200      	movs	r2, #0
 800c482:	701a      	strb	r2, [r3, #0]
 800c484:	e07d      	b.n	800c582 <UART_SetConfig+0x22a>
 800c486:	231b      	movs	r3, #27
 800c488:	2218      	movs	r2, #24
 800c48a:	189b      	adds	r3, r3, r2
 800c48c:	19db      	adds	r3, r3, r7
 800c48e:	2202      	movs	r2, #2
 800c490:	701a      	strb	r2, [r3, #0]
 800c492:	e076      	b.n	800c582 <UART_SetConfig+0x22a>
 800c494:	231b      	movs	r3, #27
 800c496:	2218      	movs	r2, #24
 800c498:	189b      	adds	r3, r3, r2
 800c49a:	19db      	adds	r3, r3, r7
 800c49c:	2204      	movs	r2, #4
 800c49e:	701a      	strb	r2, [r3, #0]
 800c4a0:	e06f      	b.n	800c582 <UART_SetConfig+0x22a>
 800c4a2:	231b      	movs	r3, #27
 800c4a4:	2218      	movs	r2, #24
 800c4a6:	189b      	adds	r3, r3, r2
 800c4a8:	19db      	adds	r3, r3, r7
 800c4aa:	2208      	movs	r2, #8
 800c4ac:	701a      	strb	r2, [r3, #0]
 800c4ae:	e068      	b.n	800c582 <UART_SetConfig+0x22a>
 800c4b0:	231b      	movs	r3, #27
 800c4b2:	2218      	movs	r2, #24
 800c4b4:	189b      	adds	r3, r3, r2
 800c4b6:	19db      	adds	r3, r3, r7
 800c4b8:	2210      	movs	r2, #16
 800c4ba:	701a      	strb	r2, [r3, #0]
 800c4bc:	e061      	b.n	800c582 <UART_SetConfig+0x22a>
 800c4be:	69fb      	ldr	r3, [r7, #28]
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	4a7c      	ldr	r2, [pc, #496]	@ (800c6b4 <UART_SetConfig+0x35c>)
 800c4c4:	4293      	cmp	r3, r2
 800c4c6:	d106      	bne.n	800c4d6 <UART_SetConfig+0x17e>
 800c4c8:	231b      	movs	r3, #27
 800c4ca:	2218      	movs	r2, #24
 800c4cc:	189b      	adds	r3, r3, r2
 800c4ce:	19db      	adds	r3, r3, r7
 800c4d0:	2200      	movs	r2, #0
 800c4d2:	701a      	strb	r2, [r3, #0]
 800c4d4:	e055      	b.n	800c582 <UART_SetConfig+0x22a>
 800c4d6:	69fb      	ldr	r3, [r7, #28]
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	4a77      	ldr	r2, [pc, #476]	@ (800c6b8 <UART_SetConfig+0x360>)
 800c4dc:	4293      	cmp	r3, r2
 800c4de:	d106      	bne.n	800c4ee <UART_SetConfig+0x196>
 800c4e0:	231b      	movs	r3, #27
 800c4e2:	2218      	movs	r2, #24
 800c4e4:	189b      	adds	r3, r3, r2
 800c4e6:	19db      	adds	r3, r3, r7
 800c4e8:	2200      	movs	r2, #0
 800c4ea:	701a      	strb	r2, [r3, #0]
 800c4ec:	e049      	b.n	800c582 <UART_SetConfig+0x22a>
 800c4ee:	69fb      	ldr	r3, [r7, #28]
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	4a6b      	ldr	r2, [pc, #428]	@ (800c6a0 <UART_SetConfig+0x348>)
 800c4f4:	4293      	cmp	r3, r2
 800c4f6:	d13e      	bne.n	800c576 <UART_SetConfig+0x21e>
 800c4f8:	4b6c      	ldr	r3, [pc, #432]	@ (800c6ac <UART_SetConfig+0x354>)
 800c4fa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c4fc:	23c0      	movs	r3, #192	@ 0xc0
 800c4fe:	011b      	lsls	r3, r3, #4
 800c500:	4013      	ands	r3, r2
 800c502:	22c0      	movs	r2, #192	@ 0xc0
 800c504:	0112      	lsls	r2, r2, #4
 800c506:	4293      	cmp	r3, r2
 800c508:	d027      	beq.n	800c55a <UART_SetConfig+0x202>
 800c50a:	22c0      	movs	r2, #192	@ 0xc0
 800c50c:	0112      	lsls	r2, r2, #4
 800c50e:	4293      	cmp	r3, r2
 800c510:	d82a      	bhi.n	800c568 <UART_SetConfig+0x210>
 800c512:	2280      	movs	r2, #128	@ 0x80
 800c514:	0112      	lsls	r2, r2, #4
 800c516:	4293      	cmp	r3, r2
 800c518:	d011      	beq.n	800c53e <UART_SetConfig+0x1e6>
 800c51a:	2280      	movs	r2, #128	@ 0x80
 800c51c:	0112      	lsls	r2, r2, #4
 800c51e:	4293      	cmp	r3, r2
 800c520:	d822      	bhi.n	800c568 <UART_SetConfig+0x210>
 800c522:	2b00      	cmp	r3, #0
 800c524:	d004      	beq.n	800c530 <UART_SetConfig+0x1d8>
 800c526:	2280      	movs	r2, #128	@ 0x80
 800c528:	00d2      	lsls	r2, r2, #3
 800c52a:	4293      	cmp	r3, r2
 800c52c:	d00e      	beq.n	800c54c <UART_SetConfig+0x1f4>
 800c52e:	e01b      	b.n	800c568 <UART_SetConfig+0x210>
 800c530:	231b      	movs	r3, #27
 800c532:	2218      	movs	r2, #24
 800c534:	189b      	adds	r3, r3, r2
 800c536:	19db      	adds	r3, r3, r7
 800c538:	2200      	movs	r2, #0
 800c53a:	701a      	strb	r2, [r3, #0]
 800c53c:	e021      	b.n	800c582 <UART_SetConfig+0x22a>
 800c53e:	231b      	movs	r3, #27
 800c540:	2218      	movs	r2, #24
 800c542:	189b      	adds	r3, r3, r2
 800c544:	19db      	adds	r3, r3, r7
 800c546:	2202      	movs	r2, #2
 800c548:	701a      	strb	r2, [r3, #0]
 800c54a:	e01a      	b.n	800c582 <UART_SetConfig+0x22a>
 800c54c:	231b      	movs	r3, #27
 800c54e:	2218      	movs	r2, #24
 800c550:	189b      	adds	r3, r3, r2
 800c552:	19db      	adds	r3, r3, r7
 800c554:	2204      	movs	r2, #4
 800c556:	701a      	strb	r2, [r3, #0]
 800c558:	e013      	b.n	800c582 <UART_SetConfig+0x22a>
 800c55a:	231b      	movs	r3, #27
 800c55c:	2218      	movs	r2, #24
 800c55e:	189b      	adds	r3, r3, r2
 800c560:	19db      	adds	r3, r3, r7
 800c562:	2208      	movs	r2, #8
 800c564:	701a      	strb	r2, [r3, #0]
 800c566:	e00c      	b.n	800c582 <UART_SetConfig+0x22a>
 800c568:	231b      	movs	r3, #27
 800c56a:	2218      	movs	r2, #24
 800c56c:	189b      	adds	r3, r3, r2
 800c56e:	19db      	adds	r3, r3, r7
 800c570:	2210      	movs	r2, #16
 800c572:	701a      	strb	r2, [r3, #0]
 800c574:	e005      	b.n	800c582 <UART_SetConfig+0x22a>
 800c576:	231b      	movs	r3, #27
 800c578:	2218      	movs	r2, #24
 800c57a:	189b      	adds	r3, r3, r2
 800c57c:	19db      	adds	r3, r3, r7
 800c57e:	2210      	movs	r2, #16
 800c580:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c582:	69fb      	ldr	r3, [r7, #28]
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	4a46      	ldr	r2, [pc, #280]	@ (800c6a0 <UART_SetConfig+0x348>)
 800c588:	4293      	cmp	r3, r2
 800c58a:	d000      	beq.n	800c58e <UART_SetConfig+0x236>
 800c58c:	e09a      	b.n	800c6c4 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c58e:	231b      	movs	r3, #27
 800c590:	2218      	movs	r2, #24
 800c592:	189b      	adds	r3, r3, r2
 800c594:	19db      	adds	r3, r3, r7
 800c596:	781b      	ldrb	r3, [r3, #0]
 800c598:	2b08      	cmp	r3, #8
 800c59a:	d01d      	beq.n	800c5d8 <UART_SetConfig+0x280>
 800c59c:	dc20      	bgt.n	800c5e0 <UART_SetConfig+0x288>
 800c59e:	2b04      	cmp	r3, #4
 800c5a0:	d015      	beq.n	800c5ce <UART_SetConfig+0x276>
 800c5a2:	dc1d      	bgt.n	800c5e0 <UART_SetConfig+0x288>
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d002      	beq.n	800c5ae <UART_SetConfig+0x256>
 800c5a8:	2b02      	cmp	r3, #2
 800c5aa:	d005      	beq.n	800c5b8 <UART_SetConfig+0x260>
 800c5ac:	e018      	b.n	800c5e0 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c5ae:	f7fe fd55 	bl	800b05c <HAL_RCC_GetPCLK1Freq>
 800c5b2:	0003      	movs	r3, r0
 800c5b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800c5b6:	e01c      	b.n	800c5f2 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c5b8:	4b3c      	ldr	r3, [pc, #240]	@ (800c6ac <UART_SetConfig+0x354>)
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	2210      	movs	r2, #16
 800c5be:	4013      	ands	r3, r2
 800c5c0:	d002      	beq.n	800c5c8 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800c5c2:	4b3e      	ldr	r3, [pc, #248]	@ (800c6bc <UART_SetConfig+0x364>)
 800c5c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
>>>>>>> main
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
<<<<<<< HEAD
 800c32e:	e014      	b.n	800c35a <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 800c330:	4b3d      	ldr	r3, [pc, #244]	@ (800c428 <UART_SetConfig+0x368>)
 800c332:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800c334:	e011      	b.n	800c35a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c336:	f7fe fc7f 	bl	800ac38 <HAL_RCC_GetSysClockFreq>
 800c33a:	0003      	movs	r3, r0
 800c33c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800c33e:	e00c      	b.n	800c35a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c340:	2380      	movs	r3, #128	@ 0x80
 800c342:	021b      	lsls	r3, r3, #8
 800c344:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800c346:	e008      	b.n	800c35a <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 800c348:	2300      	movs	r3, #0
 800c34a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 800c34c:	231a      	movs	r3, #26
 800c34e:	2218      	movs	r2, #24
 800c350:	189b      	adds	r3, r3, r2
 800c352:	19db      	adds	r3, r3, r7
 800c354:	2201      	movs	r2, #1
 800c356:	701a      	strb	r2, [r3, #0]
        break;
 800c358:	46c0      	nop			@ (mov r8, r8)
=======
 800c5c6:	e014      	b.n	800c5f2 <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 800c5c8:	4b3d      	ldr	r3, [pc, #244]	@ (800c6c0 <UART_SetConfig+0x368>)
 800c5ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800c5cc:	e011      	b.n	800c5f2 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c5ce:	f7fe fc95 	bl	800aefc <HAL_RCC_GetSysClockFreq>
 800c5d2:	0003      	movs	r3, r0
 800c5d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800c5d6:	e00c      	b.n	800c5f2 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c5d8:	2380      	movs	r3, #128	@ 0x80
 800c5da:	021b      	lsls	r3, r3, #8
 800c5dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800c5de:	e008      	b.n	800c5f2 <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 800c5e0:	2300      	movs	r3, #0
 800c5e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 800c5e4:	231a      	movs	r3, #26
 800c5e6:	2218      	movs	r2, #24
 800c5e8:	189b      	adds	r3, r3, r2
 800c5ea:	19db      	adds	r3, r3, r7
 800c5ec:	2201      	movs	r2, #1
 800c5ee:	701a      	strb	r2, [r3, #0]
        break;
 800c5f0:	46c0      	nop			@ (mov r8, r8)
>>>>>>> main
    }

    /* If proper clock source reported */
    if (pclk != 0U)
<<<<<<< HEAD
 800c35a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d100      	bne.n	800c362 <UART_SetConfig+0x2a2>
 800c360:	e133      	b.n	800c5ca <UART_SetConfig+0x50a>
=======
 800c5f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d100      	bne.n	800c5fa <UART_SetConfig+0x2a2>
 800c5f8:	e133      	b.n	800c862 <UART_SetConfig+0x50a>
>>>>>>> main
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
<<<<<<< HEAD
 800c362:	69fb      	ldr	r3, [r7, #28]
 800c364:	685a      	ldr	r2, [r3, #4]
 800c366:	0013      	movs	r3, r2
 800c368:	005b      	lsls	r3, r3, #1
 800c36a:	189b      	adds	r3, r3, r2
 800c36c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c36e:	429a      	cmp	r2, r3
 800c370:	d305      	bcc.n	800c37e <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 800c372:	69fb      	ldr	r3, [r7, #28]
 800c374:	685b      	ldr	r3, [r3, #4]
 800c376:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800c378:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c37a:	429a      	cmp	r2, r3
 800c37c:	d906      	bls.n	800c38c <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 800c37e:	231a      	movs	r3, #26
 800c380:	2218      	movs	r2, #24
 800c382:	189b      	adds	r3, r3, r2
 800c384:	19db      	adds	r3, r3, r7
 800c386:	2201      	movs	r2, #1
 800c388:	701a      	strb	r2, [r3, #0]
 800c38a:	e11e      	b.n	800c5ca <UART_SetConfig+0x50a>
=======
 800c5fa:	69fb      	ldr	r3, [r7, #28]
 800c5fc:	685a      	ldr	r2, [r3, #4]
 800c5fe:	0013      	movs	r3, r2
 800c600:	005b      	lsls	r3, r3, #1
 800c602:	189b      	adds	r3, r3, r2
 800c604:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c606:	429a      	cmp	r2, r3
 800c608:	d305      	bcc.n	800c616 <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 800c60a:	69fb      	ldr	r3, [r7, #28]
 800c60c:	685b      	ldr	r3, [r3, #4]
 800c60e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800c610:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c612:	429a      	cmp	r2, r3
 800c614:	d906      	bls.n	800c624 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 800c616:	231a      	movs	r3, #26
 800c618:	2218      	movs	r2, #24
 800c61a:	189b      	adds	r3, r3, r2
 800c61c:	19db      	adds	r3, r3, r7
 800c61e:	2201      	movs	r2, #1
 800c620:	701a      	strb	r2, [r3, #0]
 800c622:	e11e      	b.n	800c862 <UART_SetConfig+0x50a>
>>>>>>> main
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
<<<<<<< HEAD
 800c38c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c38e:	613b      	str	r3, [r7, #16]
 800c390:	2300      	movs	r3, #0
 800c392:	617b      	str	r3, [r7, #20]
 800c394:	6939      	ldr	r1, [r7, #16]
 800c396:	697a      	ldr	r2, [r7, #20]
 800c398:	000b      	movs	r3, r1
 800c39a:	0e1b      	lsrs	r3, r3, #24
 800c39c:	0010      	movs	r0, r2
 800c39e:	0205      	lsls	r5, r0, #8
 800c3a0:	431d      	orrs	r5, r3
 800c3a2:	000b      	movs	r3, r1
 800c3a4:	021c      	lsls	r4, r3, #8
 800c3a6:	69fb      	ldr	r3, [r7, #28]
 800c3a8:	685b      	ldr	r3, [r3, #4]
 800c3aa:	085b      	lsrs	r3, r3, #1
 800c3ac:	60bb      	str	r3, [r7, #8]
 800c3ae:	2300      	movs	r3, #0
 800c3b0:	60fb      	str	r3, [r7, #12]
 800c3b2:	68b8      	ldr	r0, [r7, #8]
 800c3b4:	68f9      	ldr	r1, [r7, #12]
 800c3b6:	1900      	adds	r0, r0, r4
 800c3b8:	4169      	adcs	r1, r5
 800c3ba:	69fb      	ldr	r3, [r7, #28]
 800c3bc:	685b      	ldr	r3, [r3, #4]
 800c3be:	603b      	str	r3, [r7, #0]
 800c3c0:	2300      	movs	r3, #0
 800c3c2:	607b      	str	r3, [r7, #4]
 800c3c4:	683a      	ldr	r2, [r7, #0]
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	f7f4 f8a8 	bl	800051c <__aeabi_uldivmod>
 800c3cc:	0002      	movs	r2, r0
 800c3ce:	000b      	movs	r3, r1
 800c3d0:	0013      	movs	r3, r2
 800c3d2:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c3d4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c3d6:	23c0      	movs	r3, #192	@ 0xc0
 800c3d8:	009b      	lsls	r3, r3, #2
 800c3da:	429a      	cmp	r2, r3
 800c3dc:	d309      	bcc.n	800c3f2 <UART_SetConfig+0x332>
 800c3de:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c3e0:	2380      	movs	r3, #128	@ 0x80
 800c3e2:	035b      	lsls	r3, r3, #13
 800c3e4:	429a      	cmp	r2, r3
 800c3e6:	d204      	bcs.n	800c3f2 <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 800c3e8:	69fb      	ldr	r3, [r7, #28]
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c3ee:	60da      	str	r2, [r3, #12]
 800c3f0:	e0eb      	b.n	800c5ca <UART_SetConfig+0x50a>
=======
 800c624:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c626:	613b      	str	r3, [r7, #16]
 800c628:	2300      	movs	r3, #0
 800c62a:	617b      	str	r3, [r7, #20]
 800c62c:	6939      	ldr	r1, [r7, #16]
 800c62e:	697a      	ldr	r2, [r7, #20]
 800c630:	000b      	movs	r3, r1
 800c632:	0e1b      	lsrs	r3, r3, #24
 800c634:	0010      	movs	r0, r2
 800c636:	0205      	lsls	r5, r0, #8
 800c638:	431d      	orrs	r5, r3
 800c63a:	000b      	movs	r3, r1
 800c63c:	021c      	lsls	r4, r3, #8
 800c63e:	69fb      	ldr	r3, [r7, #28]
 800c640:	685b      	ldr	r3, [r3, #4]
 800c642:	085b      	lsrs	r3, r3, #1
 800c644:	60bb      	str	r3, [r7, #8]
 800c646:	2300      	movs	r3, #0
 800c648:	60fb      	str	r3, [r7, #12]
 800c64a:	68b8      	ldr	r0, [r7, #8]
 800c64c:	68f9      	ldr	r1, [r7, #12]
 800c64e:	1900      	adds	r0, r0, r4
 800c650:	4169      	adcs	r1, r5
 800c652:	69fb      	ldr	r3, [r7, #28]
 800c654:	685b      	ldr	r3, [r3, #4]
 800c656:	603b      	str	r3, [r7, #0]
 800c658:	2300      	movs	r3, #0
 800c65a:	607b      	str	r3, [r7, #4]
 800c65c:	683a      	ldr	r2, [r7, #0]
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	f7f3 ff5c 	bl	800051c <__aeabi_uldivmod>
 800c664:	0002      	movs	r2, r0
 800c666:	000b      	movs	r3, r1
 800c668:	0013      	movs	r3, r2
 800c66a:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c66c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c66e:	23c0      	movs	r3, #192	@ 0xc0
 800c670:	009b      	lsls	r3, r3, #2
 800c672:	429a      	cmp	r2, r3
 800c674:	d309      	bcc.n	800c68a <UART_SetConfig+0x332>
 800c676:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c678:	2380      	movs	r3, #128	@ 0x80
 800c67a:	035b      	lsls	r3, r3, #13
 800c67c:	429a      	cmp	r2, r3
 800c67e:	d204      	bcs.n	800c68a <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 800c680:	69fb      	ldr	r3, [r7, #28]
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c686:	60da      	str	r2, [r3, #12]
 800c688:	e0eb      	b.n	800c862 <UART_SetConfig+0x50a>
>>>>>>> main
        }
        else
        {
          ret = HAL_ERROR;
<<<<<<< HEAD
 800c3f2:	231a      	movs	r3, #26
 800c3f4:	2218      	movs	r2, #24
 800c3f6:	189b      	adds	r3, r3, r2
 800c3f8:	19db      	adds	r3, r3, r7
 800c3fa:	2201      	movs	r2, #1
 800c3fc:	701a      	strb	r2, [r3, #0]
 800c3fe:	e0e4      	b.n	800c5ca <UART_SetConfig+0x50a>
 800c400:	efff69f3 	.word	0xefff69f3
 800c404:	ffffcfff 	.word	0xffffcfff
 800c408:	40004800 	.word	0x40004800
 800c40c:	fffff4ff 	.word	0xfffff4ff
 800c410:	40013800 	.word	0x40013800
 800c414:	40021000 	.word	0x40021000
 800c418:	40004400 	.word	0x40004400
 800c41c:	40004c00 	.word	0x40004c00
 800c420:	40005000 	.word	0x40005000
 800c424:	003d0900 	.word	0x003d0900
 800c428:	00f42400 	.word	0x00f42400
=======
 800c68a:	231a      	movs	r3, #26
 800c68c:	2218      	movs	r2, #24
 800c68e:	189b      	adds	r3, r3, r2
 800c690:	19db      	adds	r3, r3, r7
 800c692:	2201      	movs	r2, #1
 800c694:	701a      	strb	r2, [r3, #0]
 800c696:	e0e4      	b.n	800c862 <UART_SetConfig+0x50a>
 800c698:	efff69f3 	.word	0xefff69f3
 800c69c:	ffffcfff 	.word	0xffffcfff
 800c6a0:	40004800 	.word	0x40004800
 800c6a4:	fffff4ff 	.word	0xfffff4ff
 800c6a8:	40013800 	.word	0x40013800
 800c6ac:	40021000 	.word	0x40021000
 800c6b0:	40004400 	.word	0x40004400
 800c6b4:	40004c00 	.word	0x40004c00
 800c6b8:	40005000 	.word	0x40005000
 800c6bc:	003d0900 	.word	0x003d0900
 800c6c0:	00f42400 	.word	0x00f42400
>>>>>>> main
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
<<<<<<< HEAD
 800c42c:	69fb      	ldr	r3, [r7, #28]
 800c42e:	69da      	ldr	r2, [r3, #28]
 800c430:	2380      	movs	r3, #128	@ 0x80
 800c432:	021b      	lsls	r3, r3, #8
 800c434:	429a      	cmp	r2, r3
 800c436:	d000      	beq.n	800c43a <UART_SetConfig+0x37a>
 800c438:	e070      	b.n	800c51c <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 800c43a:	231b      	movs	r3, #27
 800c43c:	2218      	movs	r2, #24
 800c43e:	189b      	adds	r3, r3, r2
 800c440:	19db      	adds	r3, r3, r7
 800c442:	781b      	ldrb	r3, [r3, #0]
 800c444:	2b08      	cmp	r3, #8
 800c446:	d822      	bhi.n	800c48e <UART_SetConfig+0x3ce>
 800c448:	009a      	lsls	r2, r3, #2
 800c44a:	4b67      	ldr	r3, [pc, #412]	@ (800c5e8 <UART_SetConfig+0x528>)
 800c44c:	18d3      	adds	r3, r2, r3
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c452:	f7fe fca1 	bl	800ad98 <HAL_RCC_GetPCLK1Freq>
 800c456:	0003      	movs	r3, r0
 800c458:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800c45a:	e021      	b.n	800c4a0 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c45c:	f7fe fcb2 	bl	800adc4 <HAL_RCC_GetPCLK2Freq>
 800c460:	0003      	movs	r3, r0
 800c462:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800c464:	e01c      	b.n	800c4a0 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c466:	4b61      	ldr	r3, [pc, #388]	@ (800c5ec <UART_SetConfig+0x52c>)
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	2210      	movs	r2, #16
 800c46c:	4013      	ands	r3, r2
 800c46e:	d002      	beq.n	800c476 <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800c470:	4b5f      	ldr	r3, [pc, #380]	@ (800c5f0 <UART_SetConfig+0x530>)
 800c472:	62fb      	str	r3, [r7, #44]	@ 0x2c
=======
 800c6c4:	69fb      	ldr	r3, [r7, #28]
 800c6c6:	69da      	ldr	r2, [r3, #28]
 800c6c8:	2380      	movs	r3, #128	@ 0x80
 800c6ca:	021b      	lsls	r3, r3, #8
 800c6cc:	429a      	cmp	r2, r3
 800c6ce:	d000      	beq.n	800c6d2 <UART_SetConfig+0x37a>
 800c6d0:	e070      	b.n	800c7b4 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 800c6d2:	231b      	movs	r3, #27
 800c6d4:	2218      	movs	r2, #24
 800c6d6:	189b      	adds	r3, r3, r2
 800c6d8:	19db      	adds	r3, r3, r7
 800c6da:	781b      	ldrb	r3, [r3, #0]
 800c6dc:	2b08      	cmp	r3, #8
 800c6de:	d822      	bhi.n	800c726 <UART_SetConfig+0x3ce>
 800c6e0:	009a      	lsls	r2, r3, #2
 800c6e2:	4b67      	ldr	r3, [pc, #412]	@ (800c880 <UART_SetConfig+0x528>)
 800c6e4:	18d3      	adds	r3, r2, r3
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c6ea:	f7fe fcb7 	bl	800b05c <HAL_RCC_GetPCLK1Freq>
 800c6ee:	0003      	movs	r3, r0
 800c6f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800c6f2:	e021      	b.n	800c738 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c6f4:	f7fe fcc8 	bl	800b088 <HAL_RCC_GetPCLK2Freq>
 800c6f8:	0003      	movs	r3, r0
 800c6fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800c6fc:	e01c      	b.n	800c738 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c6fe:	4b61      	ldr	r3, [pc, #388]	@ (800c884 <UART_SetConfig+0x52c>)
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	2210      	movs	r2, #16
 800c704:	4013      	ands	r3, r2
 800c706:	d002      	beq.n	800c70e <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800c708:	4b5f      	ldr	r3, [pc, #380]	@ (800c888 <UART_SetConfig+0x530>)
 800c70a:	62fb      	str	r3, [r7, #44]	@ 0x2c
>>>>>>> main
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
<<<<<<< HEAD
 800c474:	e014      	b.n	800c4a0 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 800c476:	4b5f      	ldr	r3, [pc, #380]	@ (800c5f4 <UART_SetConfig+0x534>)
 800c478:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800c47a:	e011      	b.n	800c4a0 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c47c:	f7fe fbdc 	bl	800ac38 <HAL_RCC_GetSysClockFreq>
 800c480:	0003      	movs	r3, r0
 800c482:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800c484:	e00c      	b.n	800c4a0 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c486:	2380      	movs	r3, #128	@ 0x80
 800c488:	021b      	lsls	r3, r3, #8
 800c48a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800c48c:	e008      	b.n	800c4a0 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 800c48e:	2300      	movs	r3, #0
 800c490:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 800c492:	231a      	movs	r3, #26
 800c494:	2218      	movs	r2, #24
 800c496:	189b      	adds	r3, r3, r2
 800c498:	19db      	adds	r3, r3, r7
 800c49a:	2201      	movs	r2, #1
 800c49c:	701a      	strb	r2, [r3, #0]
        break;
 800c49e:	46c0      	nop			@ (mov r8, r8)
=======
 800c70c:	e014      	b.n	800c738 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 800c70e:	4b5f      	ldr	r3, [pc, #380]	@ (800c88c <UART_SetConfig+0x534>)
 800c710:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800c712:	e011      	b.n	800c738 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c714:	f7fe fbf2 	bl	800aefc <HAL_RCC_GetSysClockFreq>
 800c718:	0003      	movs	r3, r0
 800c71a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800c71c:	e00c      	b.n	800c738 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c71e:	2380      	movs	r3, #128	@ 0x80
 800c720:	021b      	lsls	r3, r3, #8
 800c722:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800c724:	e008      	b.n	800c738 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 800c726:	2300      	movs	r3, #0
 800c728:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 800c72a:	231a      	movs	r3, #26
 800c72c:	2218      	movs	r2, #24
 800c72e:	189b      	adds	r3, r3, r2
 800c730:	19db      	adds	r3, r3, r7
 800c732:	2201      	movs	r2, #1
 800c734:	701a      	strb	r2, [r3, #0]
        break;
 800c736:	46c0      	nop			@ (mov r8, r8)
>>>>>>> main
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
<<<<<<< HEAD
 800c4a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d100      	bne.n	800c4a8 <UART_SetConfig+0x3e8>
 800c4a6:	e090      	b.n	800c5ca <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800c4a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4aa:	005a      	lsls	r2, r3, #1
 800c4ac:	69fb      	ldr	r3, [r7, #28]
 800c4ae:	685b      	ldr	r3, [r3, #4]
 800c4b0:	085b      	lsrs	r3, r3, #1
 800c4b2:	18d2      	adds	r2, r2, r3
 800c4b4:	69fb      	ldr	r3, [r7, #28]
 800c4b6:	685b      	ldr	r3, [r3, #4]
 800c4b8:	0019      	movs	r1, r3
 800c4ba:	0010      	movs	r0, r2
 800c4bc:	f7f3 fe40 	bl	8000140 <__udivsi3>
 800c4c0:	0003      	movs	r3, r0
 800c4c2:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c4c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4c6:	2b0f      	cmp	r3, #15
 800c4c8:	d921      	bls.n	800c50e <UART_SetConfig+0x44e>
 800c4ca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c4cc:	2380      	movs	r3, #128	@ 0x80
 800c4ce:	025b      	lsls	r3, r3, #9
 800c4d0:	429a      	cmp	r2, r3
 800c4d2:	d21c      	bcs.n	800c50e <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c4d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4d6:	b29a      	uxth	r2, r3
 800c4d8:	200e      	movs	r0, #14
 800c4da:	2418      	movs	r4, #24
 800c4dc:	1903      	adds	r3, r0, r4
 800c4de:	19db      	adds	r3, r3, r7
 800c4e0:	210f      	movs	r1, #15
 800c4e2:	438a      	bics	r2, r1
 800c4e4:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c4e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4e8:	085b      	lsrs	r3, r3, #1
 800c4ea:	b29b      	uxth	r3, r3
 800c4ec:	2207      	movs	r2, #7
 800c4ee:	4013      	ands	r3, r2
 800c4f0:	b299      	uxth	r1, r3
 800c4f2:	1903      	adds	r3, r0, r4
 800c4f4:	19db      	adds	r3, r3, r7
 800c4f6:	1902      	adds	r2, r0, r4
 800c4f8:	19d2      	adds	r2, r2, r7
 800c4fa:	8812      	ldrh	r2, [r2, #0]
 800c4fc:	430a      	orrs	r2, r1
 800c4fe:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800c500:	69fb      	ldr	r3, [r7, #28]
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	1902      	adds	r2, r0, r4
 800c506:	19d2      	adds	r2, r2, r7
 800c508:	8812      	ldrh	r2, [r2, #0]
 800c50a:	60da      	str	r2, [r3, #12]
 800c50c:	e05d      	b.n	800c5ca <UART_SetConfig+0x50a>
=======
 800c738:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d100      	bne.n	800c740 <UART_SetConfig+0x3e8>
 800c73e:	e090      	b.n	800c862 <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800c740:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c742:	005a      	lsls	r2, r3, #1
 800c744:	69fb      	ldr	r3, [r7, #28]
 800c746:	685b      	ldr	r3, [r3, #4]
 800c748:	085b      	lsrs	r3, r3, #1
 800c74a:	18d2      	adds	r2, r2, r3
 800c74c:	69fb      	ldr	r3, [r7, #28]
 800c74e:	685b      	ldr	r3, [r3, #4]
 800c750:	0019      	movs	r1, r3
 800c752:	0010      	movs	r0, r2
 800c754:	f7f3 fcf4 	bl	8000140 <__udivsi3>
 800c758:	0003      	movs	r3, r0
 800c75a:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c75c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c75e:	2b0f      	cmp	r3, #15
 800c760:	d921      	bls.n	800c7a6 <UART_SetConfig+0x44e>
 800c762:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c764:	2380      	movs	r3, #128	@ 0x80
 800c766:	025b      	lsls	r3, r3, #9
 800c768:	429a      	cmp	r2, r3
 800c76a:	d21c      	bcs.n	800c7a6 <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c76c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c76e:	b29a      	uxth	r2, r3
 800c770:	200e      	movs	r0, #14
 800c772:	2418      	movs	r4, #24
 800c774:	1903      	adds	r3, r0, r4
 800c776:	19db      	adds	r3, r3, r7
 800c778:	210f      	movs	r1, #15
 800c77a:	438a      	bics	r2, r1
 800c77c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c77e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c780:	085b      	lsrs	r3, r3, #1
 800c782:	b29b      	uxth	r3, r3
 800c784:	2207      	movs	r2, #7
 800c786:	4013      	ands	r3, r2
 800c788:	b299      	uxth	r1, r3
 800c78a:	1903      	adds	r3, r0, r4
 800c78c:	19db      	adds	r3, r3, r7
 800c78e:	1902      	adds	r2, r0, r4
 800c790:	19d2      	adds	r2, r2, r7
 800c792:	8812      	ldrh	r2, [r2, #0]
 800c794:	430a      	orrs	r2, r1
 800c796:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800c798:	69fb      	ldr	r3, [r7, #28]
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	1902      	adds	r2, r0, r4
 800c79e:	19d2      	adds	r2, r2, r7
 800c7a0:	8812      	ldrh	r2, [r2, #0]
 800c7a2:	60da      	str	r2, [r3, #12]
 800c7a4:	e05d      	b.n	800c862 <UART_SetConfig+0x50a>
>>>>>>> main
      }
      else
      {
        ret = HAL_ERROR;
<<<<<<< HEAD
 800c50e:	231a      	movs	r3, #26
 800c510:	2218      	movs	r2, #24
 800c512:	189b      	adds	r3, r3, r2
 800c514:	19db      	adds	r3, r3, r7
 800c516:	2201      	movs	r2, #1
 800c518:	701a      	strb	r2, [r3, #0]
 800c51a:	e056      	b.n	800c5ca <UART_SetConfig+0x50a>
=======
 800c7a6:	231a      	movs	r3, #26
 800c7a8:	2218      	movs	r2, #24
 800c7aa:	189b      	adds	r3, r3, r2
 800c7ac:	19db      	adds	r3, r3, r7
 800c7ae:	2201      	movs	r2, #1
 800c7b0:	701a      	strb	r2, [r3, #0]
 800c7b2:	e056      	b.n	800c862 <UART_SetConfig+0x50a>
>>>>>>> main
      }
    }
  }
  else
  {
    switch (clocksource)
<<<<<<< HEAD
 800c51c:	231b      	movs	r3, #27
 800c51e:	2218      	movs	r2, #24
 800c520:	189b      	adds	r3, r3, r2
 800c522:	19db      	adds	r3, r3, r7
 800c524:	781b      	ldrb	r3, [r3, #0]
 800c526:	2b08      	cmp	r3, #8
 800c528:	d822      	bhi.n	800c570 <UART_SetConfig+0x4b0>
 800c52a:	009a      	lsls	r2, r3, #2
 800c52c:	4b32      	ldr	r3, [pc, #200]	@ (800c5f8 <UART_SetConfig+0x538>)
 800c52e:	18d3      	adds	r3, r2, r3
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c534:	f7fe fc30 	bl	800ad98 <HAL_RCC_GetPCLK1Freq>
 800c538:	0003      	movs	r3, r0
 800c53a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800c53c:	e021      	b.n	800c582 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c53e:	f7fe fc41 	bl	800adc4 <HAL_RCC_GetPCLK2Freq>
 800c542:	0003      	movs	r3, r0
 800c544:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800c546:	e01c      	b.n	800c582 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c548:	4b28      	ldr	r3, [pc, #160]	@ (800c5ec <UART_SetConfig+0x52c>)
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	2210      	movs	r2, #16
 800c54e:	4013      	ands	r3, r2
 800c550:	d002      	beq.n	800c558 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800c552:	4b27      	ldr	r3, [pc, #156]	@ (800c5f0 <UART_SetConfig+0x530>)
 800c554:	62fb      	str	r3, [r7, #44]	@ 0x2c
=======
 800c7b4:	231b      	movs	r3, #27
 800c7b6:	2218      	movs	r2, #24
 800c7b8:	189b      	adds	r3, r3, r2
 800c7ba:	19db      	adds	r3, r3, r7
 800c7bc:	781b      	ldrb	r3, [r3, #0]
 800c7be:	2b08      	cmp	r3, #8
 800c7c0:	d822      	bhi.n	800c808 <UART_SetConfig+0x4b0>
 800c7c2:	009a      	lsls	r2, r3, #2
 800c7c4:	4b32      	ldr	r3, [pc, #200]	@ (800c890 <UART_SetConfig+0x538>)
 800c7c6:	18d3      	adds	r3, r2, r3
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c7cc:	f7fe fc46 	bl	800b05c <HAL_RCC_GetPCLK1Freq>
 800c7d0:	0003      	movs	r3, r0
 800c7d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800c7d4:	e021      	b.n	800c81a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c7d6:	f7fe fc57 	bl	800b088 <HAL_RCC_GetPCLK2Freq>
 800c7da:	0003      	movs	r3, r0
 800c7dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800c7de:	e01c      	b.n	800c81a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c7e0:	4b28      	ldr	r3, [pc, #160]	@ (800c884 <UART_SetConfig+0x52c>)
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	2210      	movs	r2, #16
 800c7e6:	4013      	ands	r3, r2
 800c7e8:	d002      	beq.n	800c7f0 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800c7ea:	4b27      	ldr	r3, [pc, #156]	@ (800c888 <UART_SetConfig+0x530>)
 800c7ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
>>>>>>> main
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
<<<<<<< HEAD
 800c556:	e014      	b.n	800c582 <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 800c558:	4b26      	ldr	r3, [pc, #152]	@ (800c5f4 <UART_SetConfig+0x534>)
 800c55a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800c55c:	e011      	b.n	800c582 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c55e:	f7fe fb6b 	bl	800ac38 <HAL_RCC_GetSysClockFreq>
 800c562:	0003      	movs	r3, r0
 800c564:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800c566:	e00c      	b.n	800c582 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c568:	2380      	movs	r3, #128	@ 0x80
 800c56a:	021b      	lsls	r3, r3, #8
 800c56c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800c56e:	e008      	b.n	800c582 <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 800c570:	2300      	movs	r3, #0
 800c572:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 800c574:	231a      	movs	r3, #26
 800c576:	2218      	movs	r2, #24
 800c578:	189b      	adds	r3, r3, r2
 800c57a:	19db      	adds	r3, r3, r7
 800c57c:	2201      	movs	r2, #1
 800c57e:	701a      	strb	r2, [r3, #0]
        break;
 800c580:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800c582:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c584:	2b00      	cmp	r3, #0
 800c586:	d020      	beq.n	800c5ca <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800c588:	69fb      	ldr	r3, [r7, #28]
 800c58a:	685b      	ldr	r3, [r3, #4]
 800c58c:	085a      	lsrs	r2, r3, #1
 800c58e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c590:	18d2      	adds	r2, r2, r3
 800c592:	69fb      	ldr	r3, [r7, #28]
 800c594:	685b      	ldr	r3, [r3, #4]
 800c596:	0019      	movs	r1, r3
 800c598:	0010      	movs	r0, r2
 800c59a:	f7f3 fdd1 	bl	8000140 <__udivsi3>
 800c59e:	0003      	movs	r3, r0
 800c5a0:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c5a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5a4:	2b0f      	cmp	r3, #15
 800c5a6:	d90a      	bls.n	800c5be <UART_SetConfig+0x4fe>
 800c5a8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c5aa:	2380      	movs	r3, #128	@ 0x80
 800c5ac:	025b      	lsls	r3, r3, #9
 800c5ae:	429a      	cmp	r2, r3
 800c5b0:	d205      	bcs.n	800c5be <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c5b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5b4:	b29a      	uxth	r2, r3
 800c5b6:	69fb      	ldr	r3, [r7, #28]
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	60da      	str	r2, [r3, #12]
 800c5bc:	e005      	b.n	800c5ca <UART_SetConfig+0x50a>
=======
 800c7ee:	e014      	b.n	800c81a <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 800c7f0:	4b26      	ldr	r3, [pc, #152]	@ (800c88c <UART_SetConfig+0x534>)
 800c7f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800c7f4:	e011      	b.n	800c81a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c7f6:	f7fe fb81 	bl	800aefc <HAL_RCC_GetSysClockFreq>
 800c7fa:	0003      	movs	r3, r0
 800c7fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800c7fe:	e00c      	b.n	800c81a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c800:	2380      	movs	r3, #128	@ 0x80
 800c802:	021b      	lsls	r3, r3, #8
 800c804:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800c806:	e008      	b.n	800c81a <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 800c808:	2300      	movs	r3, #0
 800c80a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 800c80c:	231a      	movs	r3, #26
 800c80e:	2218      	movs	r2, #24
 800c810:	189b      	adds	r3, r3, r2
 800c812:	19db      	adds	r3, r3, r7
 800c814:	2201      	movs	r2, #1
 800c816:	701a      	strb	r2, [r3, #0]
        break;
 800c818:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800c81a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d020      	beq.n	800c862 <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800c820:	69fb      	ldr	r3, [r7, #28]
 800c822:	685b      	ldr	r3, [r3, #4]
 800c824:	085a      	lsrs	r2, r3, #1
 800c826:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c828:	18d2      	adds	r2, r2, r3
 800c82a:	69fb      	ldr	r3, [r7, #28]
 800c82c:	685b      	ldr	r3, [r3, #4]
 800c82e:	0019      	movs	r1, r3
 800c830:	0010      	movs	r0, r2
 800c832:	f7f3 fc85 	bl	8000140 <__udivsi3>
 800c836:	0003      	movs	r3, r0
 800c838:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c83a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c83c:	2b0f      	cmp	r3, #15
 800c83e:	d90a      	bls.n	800c856 <UART_SetConfig+0x4fe>
 800c840:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c842:	2380      	movs	r3, #128	@ 0x80
 800c844:	025b      	lsls	r3, r3, #9
 800c846:	429a      	cmp	r2, r3
 800c848:	d205      	bcs.n	800c856 <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c84a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c84c:	b29a      	uxth	r2, r3
 800c84e:	69fb      	ldr	r3, [r7, #28]
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	60da      	str	r2, [r3, #12]
 800c854:	e005      	b.n	800c862 <UART_SetConfig+0x50a>
>>>>>>> main
      }
      else
      {
        ret = HAL_ERROR;
<<<<<<< HEAD
 800c5be:	231a      	movs	r3, #26
 800c5c0:	2218      	movs	r2, #24
 800c5c2:	189b      	adds	r3, r3, r2
 800c5c4:	19db      	adds	r3, r3, r7
 800c5c6:	2201      	movs	r2, #1
 800c5c8:	701a      	strb	r2, [r3, #0]
=======
 800c856:	231a      	movs	r3, #26
 800c858:	2218      	movs	r2, #24
 800c85a:	189b      	adds	r3, r3, r2
 800c85c:	19db      	adds	r3, r3, r7
 800c85e:	2201      	movs	r2, #1
 800c860:	701a      	strb	r2, [r3, #0]
>>>>>>> main
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
<<<<<<< HEAD
 800c5ca:	69fb      	ldr	r3, [r7, #28]
 800c5cc:	2200      	movs	r2, #0
 800c5ce:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800c5d0:	69fb      	ldr	r3, [r7, #28]
 800c5d2:	2200      	movs	r2, #0
 800c5d4:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800c5d6:	231a      	movs	r3, #26
 800c5d8:	2218      	movs	r2, #24
 800c5da:	189b      	adds	r3, r3, r2
 800c5dc:	19db      	adds	r3, r3, r7
 800c5de:	781b      	ldrb	r3, [r3, #0]
}
 800c5e0:	0018      	movs	r0, r3
 800c5e2:	46bd      	mov	sp, r7
 800c5e4:	b00e      	add	sp, #56	@ 0x38
 800c5e6:	bdb0      	pop	{r4, r5, r7, pc}
 800c5e8:	0801059c 	.word	0x0801059c
 800c5ec:	40021000 	.word	0x40021000
 800c5f0:	003d0900 	.word	0x003d0900
 800c5f4:	00f42400 	.word	0x00f42400
 800c5f8:	080105c0 	.word	0x080105c0

0800c5fc <UART_AdvFeatureConfig>:
=======
 800c862:	69fb      	ldr	r3, [r7, #28]
 800c864:	2200      	movs	r2, #0
 800c866:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800c868:	69fb      	ldr	r3, [r7, #28]
 800c86a:	2200      	movs	r2, #0
 800c86c:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800c86e:	231a      	movs	r3, #26
 800c870:	2218      	movs	r2, #24
 800c872:	189b      	adds	r3, r3, r2
 800c874:	19db      	adds	r3, r3, r7
 800c876:	781b      	ldrb	r3, [r3, #0]
}
 800c878:	0018      	movs	r0, r3
 800c87a:	46bd      	mov	sp, r7
 800c87c:	b00e      	add	sp, #56	@ 0x38
 800c87e:	bdb0      	pop	{r4, r5, r7, pc}
 800c880:	080106f8 	.word	0x080106f8
 800c884:	40021000 	.word	0x40021000
 800c888:	003d0900 	.word	0x003d0900
 800c88c:	00f42400 	.word	0x00f42400
 800c890:	0801071c 	.word	0x0801071c

0800c894 <UART_AdvFeatureConfig>:
>>>>>>> main
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 800c5fc:	b580      	push	{r7, lr}
 800c5fe:	b082      	sub	sp, #8
 800c600:	af00      	add	r7, sp, #0
 800c602:	6078      	str	r0, [r7, #4]
=======
 800c894:	b580      	push	{r7, lr}
 800c896:	b082      	sub	sp, #8
 800c898:	af00      	add	r7, sp, #0
 800c89a:	6078      	str	r0, [r7, #4]
>>>>>>> main
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
<<<<<<< HEAD
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c608:	2201      	movs	r2, #1
 800c60a:	4013      	ands	r3, r2
 800c60c:	d00b      	beq.n	800c626 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	685b      	ldr	r3, [r3, #4]
 800c614:	4a4a      	ldr	r2, [pc, #296]	@ (800c740 <UART_AdvFeatureConfig+0x144>)
 800c616:	4013      	ands	r3, r2
 800c618:	0019      	movs	r1, r3
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	430a      	orrs	r2, r1
 800c624:	605a      	str	r2, [r3, #4]
=======
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c8a0:	2201      	movs	r2, #1
 800c8a2:	4013      	ands	r3, r2
 800c8a4:	d00b      	beq.n	800c8be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	685b      	ldr	r3, [r3, #4]
 800c8ac:	4a4a      	ldr	r2, [pc, #296]	@ (800c9d8 <UART_AdvFeatureConfig+0x144>)
 800c8ae:	4013      	ands	r3, r2
 800c8b0:	0019      	movs	r1, r3
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	430a      	orrs	r2, r1
 800c8bc:	605a      	str	r2, [r3, #4]
>>>>>>> main
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
<<<<<<< HEAD
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c62a:	2202      	movs	r2, #2
 800c62c:	4013      	ands	r3, r2
 800c62e:	d00b      	beq.n	800c648 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	685b      	ldr	r3, [r3, #4]
 800c636:	4a43      	ldr	r2, [pc, #268]	@ (800c744 <UART_AdvFeatureConfig+0x148>)
 800c638:	4013      	ands	r3, r2
 800c63a:	0019      	movs	r1, r3
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	430a      	orrs	r2, r1
 800c646:	605a      	str	r2, [r3, #4]
=======
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c8c2:	2202      	movs	r2, #2
 800c8c4:	4013      	ands	r3, r2
 800c8c6:	d00b      	beq.n	800c8e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	685b      	ldr	r3, [r3, #4]
 800c8ce:	4a43      	ldr	r2, [pc, #268]	@ (800c9dc <UART_AdvFeatureConfig+0x148>)
 800c8d0:	4013      	ands	r3, r2
 800c8d2:	0019      	movs	r1, r3
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	430a      	orrs	r2, r1
 800c8de:	605a      	str	r2, [r3, #4]
>>>>>>> main
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
<<<<<<< HEAD
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c64c:	2204      	movs	r2, #4
 800c64e:	4013      	ands	r3, r2
 800c650:	d00b      	beq.n	800c66a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	685b      	ldr	r3, [r3, #4]
 800c658:	4a3b      	ldr	r2, [pc, #236]	@ (800c748 <UART_AdvFeatureConfig+0x14c>)
 800c65a:	4013      	ands	r3, r2
 800c65c:	0019      	movs	r1, r3
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	430a      	orrs	r2, r1
 800c668:	605a      	str	r2, [r3, #4]
=======
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c8e4:	2204      	movs	r2, #4
 800c8e6:	4013      	ands	r3, r2
 800c8e8:	d00b      	beq.n	800c902 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	685b      	ldr	r3, [r3, #4]
 800c8f0:	4a3b      	ldr	r2, [pc, #236]	@ (800c9e0 <UART_AdvFeatureConfig+0x14c>)
 800c8f2:	4013      	ands	r3, r2
 800c8f4:	0019      	movs	r1, r3
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	430a      	orrs	r2, r1
 800c900:	605a      	str	r2, [r3, #4]
>>>>>>> main
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
<<<<<<< HEAD
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c66e:	2208      	movs	r2, #8
 800c670:	4013      	ands	r3, r2
 800c672:	d00b      	beq.n	800c68c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	685b      	ldr	r3, [r3, #4]
 800c67a:	4a34      	ldr	r2, [pc, #208]	@ (800c74c <UART_AdvFeatureConfig+0x150>)
 800c67c:	4013      	ands	r3, r2
 800c67e:	0019      	movs	r1, r3
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	430a      	orrs	r2, r1
 800c68a:	605a      	str	r2, [r3, #4]
=======
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c906:	2208      	movs	r2, #8
 800c908:	4013      	ands	r3, r2
 800c90a:	d00b      	beq.n	800c924 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	685b      	ldr	r3, [r3, #4]
 800c912:	4a34      	ldr	r2, [pc, #208]	@ (800c9e4 <UART_AdvFeatureConfig+0x150>)
 800c914:	4013      	ands	r3, r2
 800c916:	0019      	movs	r1, r3
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	430a      	orrs	r2, r1
 800c922:	605a      	str	r2, [r3, #4]
>>>>>>> main
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
<<<<<<< HEAD
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c690:	2210      	movs	r2, #16
 800c692:	4013      	ands	r3, r2
 800c694:	d00b      	beq.n	800c6ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	689b      	ldr	r3, [r3, #8]
 800c69c:	4a2c      	ldr	r2, [pc, #176]	@ (800c750 <UART_AdvFeatureConfig+0x154>)
 800c69e:	4013      	ands	r3, r2
 800c6a0:	0019      	movs	r1, r3
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	430a      	orrs	r2, r1
 800c6ac:	609a      	str	r2, [r3, #8]
=======
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c928:	2210      	movs	r2, #16
 800c92a:	4013      	ands	r3, r2
 800c92c:	d00b      	beq.n	800c946 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	689b      	ldr	r3, [r3, #8]
 800c934:	4a2c      	ldr	r2, [pc, #176]	@ (800c9e8 <UART_AdvFeatureConfig+0x154>)
 800c936:	4013      	ands	r3, r2
 800c938:	0019      	movs	r1, r3
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	430a      	orrs	r2, r1
 800c944:	609a      	str	r2, [r3, #8]
>>>>>>> main
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
<<<<<<< HEAD
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c6b2:	2220      	movs	r2, #32
 800c6b4:	4013      	ands	r3, r2
 800c6b6:	d00b      	beq.n	800c6d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	689b      	ldr	r3, [r3, #8]
 800c6be:	4a25      	ldr	r2, [pc, #148]	@ (800c754 <UART_AdvFeatureConfig+0x158>)
 800c6c0:	4013      	ands	r3, r2
 800c6c2:	0019      	movs	r1, r3
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	430a      	orrs	r2, r1
 800c6ce:	609a      	str	r2, [r3, #8]
=======
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c94a:	2220      	movs	r2, #32
 800c94c:	4013      	ands	r3, r2
 800c94e:	d00b      	beq.n	800c968 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	689b      	ldr	r3, [r3, #8]
 800c956:	4a25      	ldr	r2, [pc, #148]	@ (800c9ec <UART_AdvFeatureConfig+0x158>)
 800c958:	4013      	ands	r3, r2
 800c95a:	0019      	movs	r1, r3
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	430a      	orrs	r2, r1
 800c966:	609a      	str	r2, [r3, #8]
>>>>>>> main
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
<<<<<<< HEAD
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c6d4:	2240      	movs	r2, #64	@ 0x40
 800c6d6:	4013      	ands	r3, r2
 800c6d8:	d01d      	beq.n	800c716 <UART_AdvFeatureConfig+0x11a>
=======
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c96c:	2240      	movs	r2, #64	@ 0x40
 800c96e:	4013      	ands	r3, r2
 800c970:	d01d      	beq.n	800c9ae <UART_AdvFeatureConfig+0x11a>
>>>>>>> main
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
<<<<<<< HEAD
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	685b      	ldr	r3, [r3, #4]
 800c6e0:	4a1d      	ldr	r2, [pc, #116]	@ (800c758 <UART_AdvFeatureConfig+0x15c>)
 800c6e2:	4013      	ands	r3, r2
 800c6e4:	0019      	movs	r1, r3
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	430a      	orrs	r2, r1
 800c6f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c6f6:	2380      	movs	r3, #128	@ 0x80
 800c6f8:	035b      	lsls	r3, r3, #13
 800c6fa:	429a      	cmp	r2, r3
 800c6fc:	d10b      	bne.n	800c716 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	685b      	ldr	r3, [r3, #4]
 800c704:	4a15      	ldr	r2, [pc, #84]	@ (800c75c <UART_AdvFeatureConfig+0x160>)
 800c706:	4013      	ands	r3, r2
 800c708:	0019      	movs	r1, r3
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	430a      	orrs	r2, r1
 800c714:	605a      	str	r2, [r3, #4]
=======
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	685b      	ldr	r3, [r3, #4]
 800c978:	4a1d      	ldr	r2, [pc, #116]	@ (800c9f0 <UART_AdvFeatureConfig+0x15c>)
 800c97a:	4013      	ands	r3, r2
 800c97c:	0019      	movs	r1, r3
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	430a      	orrs	r2, r1
 800c988:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c98e:	2380      	movs	r3, #128	@ 0x80
 800c990:	035b      	lsls	r3, r3, #13
 800c992:	429a      	cmp	r2, r3
 800c994:	d10b      	bne.n	800c9ae <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	685b      	ldr	r3, [r3, #4]
 800c99c:	4a15      	ldr	r2, [pc, #84]	@ (800c9f4 <UART_AdvFeatureConfig+0x160>)
 800c99e:	4013      	ands	r3, r2
 800c9a0:	0019      	movs	r1, r3
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	430a      	orrs	r2, r1
 800c9ac:	605a      	str	r2, [r3, #4]
>>>>>>> main
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
<<<<<<< HEAD
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c71a:	2280      	movs	r2, #128	@ 0x80
 800c71c:	4013      	ands	r3, r2
 800c71e:	d00b      	beq.n	800c738 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	685b      	ldr	r3, [r3, #4]
 800c726:	4a0e      	ldr	r2, [pc, #56]	@ (800c760 <UART_AdvFeatureConfig+0x164>)
 800c728:	4013      	ands	r3, r2
 800c72a:	0019      	movs	r1, r3
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	430a      	orrs	r2, r1
 800c736:	605a      	str	r2, [r3, #4]
  }
}
 800c738:	46c0      	nop			@ (mov r8, r8)
 800c73a:	46bd      	mov	sp, r7
 800c73c:	b002      	add	sp, #8
 800c73e:	bd80      	pop	{r7, pc}
 800c740:	fffdffff 	.word	0xfffdffff
 800c744:	fffeffff 	.word	0xfffeffff
 800c748:	fffbffff 	.word	0xfffbffff
 800c74c:	ffff7fff 	.word	0xffff7fff
 800c750:	ffffefff 	.word	0xffffefff
 800c754:	ffffdfff 	.word	0xffffdfff
 800c758:	ffefffff 	.word	0xffefffff
 800c75c:	ff9fffff 	.word	0xff9fffff
 800c760:	fff7ffff 	.word	0xfff7ffff

0800c764 <UART_CheckIdleState>:
=======
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c9b2:	2280      	movs	r2, #128	@ 0x80
 800c9b4:	4013      	ands	r3, r2
 800c9b6:	d00b      	beq.n	800c9d0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	685b      	ldr	r3, [r3, #4]
 800c9be:	4a0e      	ldr	r2, [pc, #56]	@ (800c9f8 <UART_AdvFeatureConfig+0x164>)
 800c9c0:	4013      	ands	r3, r2
 800c9c2:	0019      	movs	r1, r3
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	430a      	orrs	r2, r1
 800c9ce:	605a      	str	r2, [r3, #4]
  }
}
 800c9d0:	46c0      	nop			@ (mov r8, r8)
 800c9d2:	46bd      	mov	sp, r7
 800c9d4:	b002      	add	sp, #8
 800c9d6:	bd80      	pop	{r7, pc}
 800c9d8:	fffdffff 	.word	0xfffdffff
 800c9dc:	fffeffff 	.word	0xfffeffff
 800c9e0:	fffbffff 	.word	0xfffbffff
 800c9e4:	ffff7fff 	.word	0xffff7fff
 800c9e8:	ffffefff 	.word	0xffffefff
 800c9ec:	ffffdfff 	.word	0xffffdfff
 800c9f0:	ffefffff 	.word	0xffefffff
 800c9f4:	ff9fffff 	.word	0xff9fffff
 800c9f8:	fff7ffff 	.word	0xfff7ffff

0800c9fc <UART_CheckIdleState>:
>>>>>>> main
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 800c764:	b580      	push	{r7, lr}
 800c766:	b092      	sub	sp, #72	@ 0x48
 800c768:	af02      	add	r7, sp, #8
 800c76a:	6078      	str	r0, [r7, #4]
=======
 800c9fc:	b580      	push	{r7, lr}
 800c9fe:	b092      	sub	sp, #72	@ 0x48
 800ca00:	af02      	add	r7, sp, #8
 800ca02:	6078      	str	r0, [r7, #4]
>>>>>>> main
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
<<<<<<< HEAD
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	2284      	movs	r2, #132	@ 0x84
 800c770:	2100      	movs	r1, #0
 800c772:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c774:	f7fa fa86 	bl	8006c84 <HAL_GetTick>
 800c778:	0003      	movs	r3, r0
 800c77a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	2208      	movs	r2, #8
 800c784:	4013      	ands	r3, r2
 800c786:	2b08      	cmp	r3, #8
 800c788:	d12c      	bne.n	800c7e4 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c78a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c78c:	2280      	movs	r2, #128	@ 0x80
 800c78e:	0391      	lsls	r1, r2, #14
 800c790:	6878      	ldr	r0, [r7, #4]
 800c792:	4a46      	ldr	r2, [pc, #280]	@ (800c8ac <UART_CheckIdleState+0x148>)
 800c794:	9200      	str	r2, [sp, #0]
 800c796:	2200      	movs	r2, #0
 800c798:	f000 f88c 	bl	800c8b4 <UART_WaitOnFlagUntilTimeout>
 800c79c:	1e03      	subs	r3, r0, #0
 800c79e:	d021      	beq.n	800c7e4 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c7a0:	f3ef 8310 	mrs	r3, PRIMASK
 800c7a4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800c7a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800c7a8:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c7aa:	2301      	movs	r3, #1
 800c7ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c7ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c7b0:	f383 8810 	msr	PRIMASK, r3
}
 800c7b4:	46c0      	nop			@ (mov r8, r8)
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	681a      	ldr	r2, [r3, #0]
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	2180      	movs	r1, #128	@ 0x80
 800c7c2:	438a      	bics	r2, r1
 800c7c4:	601a      	str	r2, [r3, #0]
 800c7c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c7ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7cc:	f383 8810 	msr	PRIMASK, r3
}
 800c7d0:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	2220      	movs	r2, #32
 800c7d6:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	2278      	movs	r2, #120	@ 0x78
 800c7dc:	2100      	movs	r1, #0
 800c7de:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c7e0:	2303      	movs	r3, #3
 800c7e2:	e05f      	b.n	800c8a4 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	2204      	movs	r2, #4
 800c7ec:	4013      	ands	r3, r2
 800c7ee:	2b04      	cmp	r3, #4
 800c7f0:	d146      	bne.n	800c880 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c7f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c7f4:	2280      	movs	r2, #128	@ 0x80
 800c7f6:	03d1      	lsls	r1, r2, #15
 800c7f8:	6878      	ldr	r0, [r7, #4]
 800c7fa:	4a2c      	ldr	r2, [pc, #176]	@ (800c8ac <UART_CheckIdleState+0x148>)
 800c7fc:	9200      	str	r2, [sp, #0]
 800c7fe:	2200      	movs	r2, #0
 800c800:	f000 f858 	bl	800c8b4 <UART_WaitOnFlagUntilTimeout>
 800c804:	1e03      	subs	r3, r0, #0
 800c806:	d03b      	beq.n	800c880 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c808:	f3ef 8310 	mrs	r3, PRIMASK
 800c80c:	60fb      	str	r3, [r7, #12]
  return(result);
 800c80e:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c810:	637b      	str	r3, [r7, #52]	@ 0x34
 800c812:	2301      	movs	r3, #1
 800c814:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c816:	693b      	ldr	r3, [r7, #16]
 800c818:	f383 8810 	msr	PRIMASK, r3
}
 800c81c:	46c0      	nop			@ (mov r8, r8)
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	681a      	ldr	r2, [r3, #0]
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	4921      	ldr	r1, [pc, #132]	@ (800c8b0 <UART_CheckIdleState+0x14c>)
 800c82a:	400a      	ands	r2, r1
 800c82c:	601a      	str	r2, [r3, #0]
 800c82e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c830:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c832:	697b      	ldr	r3, [r7, #20]
 800c834:	f383 8810 	msr	PRIMASK, r3
}
 800c838:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c83a:	f3ef 8310 	mrs	r3, PRIMASK
 800c83e:	61bb      	str	r3, [r7, #24]
  return(result);
 800c840:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c842:	633b      	str	r3, [r7, #48]	@ 0x30
 800c844:	2301      	movs	r3, #1
 800c846:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c848:	69fb      	ldr	r3, [r7, #28]
 800c84a:	f383 8810 	msr	PRIMASK, r3
}
 800c84e:	46c0      	nop			@ (mov r8, r8)
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	689a      	ldr	r2, [r3, #8]
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	2101      	movs	r1, #1
 800c85c:	438a      	bics	r2, r1
 800c85e:	609a      	str	r2, [r3, #8]
 800c860:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c862:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c864:	6a3b      	ldr	r3, [r7, #32]
 800c866:	f383 8810 	msr	PRIMASK, r3
}
 800c86a:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	2280      	movs	r2, #128	@ 0x80
 800c870:	2120      	movs	r1, #32
 800c872:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	2278      	movs	r2, #120	@ 0x78
 800c878:	2100      	movs	r1, #0
 800c87a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c87c:	2303      	movs	r3, #3
 800c87e:	e011      	b.n	800c8a4 <UART_CheckIdleState+0x140>
=======
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	2284      	movs	r2, #132	@ 0x84
 800ca08:	2100      	movs	r1, #0
 800ca0a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ca0c:	f7fa fa9c 	bl	8006f48 <HAL_GetTick>
 800ca10:	0003      	movs	r3, r0
 800ca12:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	2208      	movs	r2, #8
 800ca1c:	4013      	ands	r3, r2
 800ca1e:	2b08      	cmp	r3, #8
 800ca20:	d12c      	bne.n	800ca7c <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ca22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca24:	2280      	movs	r2, #128	@ 0x80
 800ca26:	0391      	lsls	r1, r2, #14
 800ca28:	6878      	ldr	r0, [r7, #4]
 800ca2a:	4a46      	ldr	r2, [pc, #280]	@ (800cb44 <UART_CheckIdleState+0x148>)
 800ca2c:	9200      	str	r2, [sp, #0]
 800ca2e:	2200      	movs	r2, #0
 800ca30:	f000 f88c 	bl	800cb4c <UART_WaitOnFlagUntilTimeout>
 800ca34:	1e03      	subs	r3, r0, #0
 800ca36:	d021      	beq.n	800ca7c <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ca38:	f3ef 8310 	mrs	r3, PRIMASK
 800ca3c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800ca3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800ca40:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ca42:	2301      	movs	r3, #1
 800ca44:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ca46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca48:	f383 8810 	msr	PRIMASK, r3
}
 800ca4c:	46c0      	nop			@ (mov r8, r8)
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	681a      	ldr	r2, [r3, #0]
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	2180      	movs	r1, #128	@ 0x80
 800ca5a:	438a      	bics	r2, r1
 800ca5c:	601a      	str	r2, [r3, #0]
 800ca5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca60:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ca62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca64:	f383 8810 	msr	PRIMASK, r3
}
 800ca68:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	2220      	movs	r2, #32
 800ca6e:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	2278      	movs	r2, #120	@ 0x78
 800ca74:	2100      	movs	r1, #0
 800ca76:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ca78:	2303      	movs	r3, #3
 800ca7a:	e05f      	b.n	800cb3c <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	2204      	movs	r2, #4
 800ca84:	4013      	ands	r3, r2
 800ca86:	2b04      	cmp	r3, #4
 800ca88:	d146      	bne.n	800cb18 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ca8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca8c:	2280      	movs	r2, #128	@ 0x80
 800ca8e:	03d1      	lsls	r1, r2, #15
 800ca90:	6878      	ldr	r0, [r7, #4]
 800ca92:	4a2c      	ldr	r2, [pc, #176]	@ (800cb44 <UART_CheckIdleState+0x148>)
 800ca94:	9200      	str	r2, [sp, #0]
 800ca96:	2200      	movs	r2, #0
 800ca98:	f000 f858 	bl	800cb4c <UART_WaitOnFlagUntilTimeout>
 800ca9c:	1e03      	subs	r3, r0, #0
 800ca9e:	d03b      	beq.n	800cb18 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800caa0:	f3ef 8310 	mrs	r3, PRIMASK
 800caa4:	60fb      	str	r3, [r7, #12]
  return(result);
 800caa6:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800caa8:	637b      	str	r3, [r7, #52]	@ 0x34
 800caaa:	2301      	movs	r3, #1
 800caac:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800caae:	693b      	ldr	r3, [r7, #16]
 800cab0:	f383 8810 	msr	PRIMASK, r3
}
 800cab4:	46c0      	nop			@ (mov r8, r8)
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	681a      	ldr	r2, [r3, #0]
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	4921      	ldr	r1, [pc, #132]	@ (800cb48 <UART_CheckIdleState+0x14c>)
 800cac2:	400a      	ands	r2, r1
 800cac4:	601a      	str	r2, [r3, #0]
 800cac6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cac8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800caca:	697b      	ldr	r3, [r7, #20]
 800cacc:	f383 8810 	msr	PRIMASK, r3
}
 800cad0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cad2:	f3ef 8310 	mrs	r3, PRIMASK
 800cad6:	61bb      	str	r3, [r7, #24]
  return(result);
 800cad8:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cada:	633b      	str	r3, [r7, #48]	@ 0x30
 800cadc:	2301      	movs	r3, #1
 800cade:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cae0:	69fb      	ldr	r3, [r7, #28]
 800cae2:	f383 8810 	msr	PRIMASK, r3
}
 800cae6:	46c0      	nop			@ (mov r8, r8)
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	689a      	ldr	r2, [r3, #8]
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	2101      	movs	r1, #1
 800caf4:	438a      	bics	r2, r1
 800caf6:	609a      	str	r2, [r3, #8]
 800caf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cafa:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cafc:	6a3b      	ldr	r3, [r7, #32]
 800cafe:	f383 8810 	msr	PRIMASK, r3
}
 800cb02:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	2280      	movs	r2, #128	@ 0x80
 800cb08:	2120      	movs	r1, #32
 800cb0a:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	2278      	movs	r2, #120	@ 0x78
 800cb10:	2100      	movs	r1, #0
 800cb12:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cb14:	2303      	movs	r3, #3
 800cb16:	e011      	b.n	800cb3c <UART_CheckIdleState+0x140>
>>>>>>> main
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
<<<<<<< HEAD
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	2220      	movs	r2, #32
 800c884:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	2280      	movs	r2, #128	@ 0x80
 800c88a:	2120      	movs	r1, #32
 800c88c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	2200      	movs	r2, #0
 800c892:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	2200      	movs	r2, #0
 800c898:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	2278      	movs	r2, #120	@ 0x78
 800c89e:	2100      	movs	r1, #0
 800c8a0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c8a2:	2300      	movs	r3, #0
}
 800c8a4:	0018      	movs	r0, r3
 800c8a6:	46bd      	mov	sp, r7
 800c8a8:	b010      	add	sp, #64	@ 0x40
 800c8aa:	bd80      	pop	{r7, pc}
 800c8ac:	01ffffff 	.word	0x01ffffff
 800c8b0:	fffffedf 	.word	0xfffffedf

0800c8b4 <UART_WaitOnFlagUntilTimeout>:
=======
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	2220      	movs	r2, #32
 800cb1c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	2280      	movs	r2, #128	@ 0x80
 800cb22:	2120      	movs	r1, #32
 800cb24:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	2200      	movs	r2, #0
 800cb2a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	2200      	movs	r2, #0
 800cb30:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	2278      	movs	r2, #120	@ 0x78
 800cb36:	2100      	movs	r1, #0
 800cb38:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800cb3a:	2300      	movs	r3, #0
}
 800cb3c:	0018      	movs	r0, r3
 800cb3e:	46bd      	mov	sp, r7
 800cb40:	b010      	add	sp, #64	@ 0x40
 800cb42:	bd80      	pop	{r7, pc}
 800cb44:	01ffffff 	.word	0x01ffffff
 800cb48:	fffffedf 	.word	0xfffffedf

0800cb4c <UART_WaitOnFlagUntilTimeout>:
>>>>>>> main
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
<<<<<<< HEAD
 800c8b4:	b580      	push	{r7, lr}
 800c8b6:	b084      	sub	sp, #16
 800c8b8:	af00      	add	r7, sp, #0
 800c8ba:	60f8      	str	r0, [r7, #12]
 800c8bc:	60b9      	str	r1, [r7, #8]
 800c8be:	603b      	str	r3, [r7, #0]
 800c8c0:	1dfb      	adds	r3, r7, #7
 800c8c2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c8c4:	e04b      	b.n	800c95e <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c8c6:	69bb      	ldr	r3, [r7, #24]
 800c8c8:	3301      	adds	r3, #1
 800c8ca:	d048      	beq.n	800c95e <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c8cc:	f7fa f9da 	bl	8006c84 <HAL_GetTick>
 800c8d0:	0002      	movs	r2, r0
 800c8d2:	683b      	ldr	r3, [r7, #0]
 800c8d4:	1ad3      	subs	r3, r2, r3
 800c8d6:	69ba      	ldr	r2, [r7, #24]
 800c8d8:	429a      	cmp	r2, r3
 800c8da:	d302      	bcc.n	800c8e2 <UART_WaitOnFlagUntilTimeout+0x2e>
 800c8dc:	69bb      	ldr	r3, [r7, #24]
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d101      	bne.n	800c8e6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800c8e2:	2303      	movs	r3, #3
 800c8e4:	e04b      	b.n	800c97e <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	2204      	movs	r2, #4
 800c8ee:	4013      	ands	r3, r2
 800c8f0:	d035      	beq.n	800c95e <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	69db      	ldr	r3, [r3, #28]
 800c8f8:	2208      	movs	r2, #8
 800c8fa:	4013      	ands	r3, r2
 800c8fc:	2b08      	cmp	r3, #8
 800c8fe:	d111      	bne.n	800c924 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	2208      	movs	r2, #8
 800c906:	621a      	str	r2, [r3, #32]
=======
 800cb4c:	b580      	push	{r7, lr}
 800cb4e:	b084      	sub	sp, #16
 800cb50:	af00      	add	r7, sp, #0
 800cb52:	60f8      	str	r0, [r7, #12]
 800cb54:	60b9      	str	r1, [r7, #8]
 800cb56:	603b      	str	r3, [r7, #0]
 800cb58:	1dfb      	adds	r3, r7, #7
 800cb5a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cb5c:	e04b      	b.n	800cbf6 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cb5e:	69bb      	ldr	r3, [r7, #24]
 800cb60:	3301      	adds	r3, #1
 800cb62:	d048      	beq.n	800cbf6 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cb64:	f7fa f9f0 	bl	8006f48 <HAL_GetTick>
 800cb68:	0002      	movs	r2, r0
 800cb6a:	683b      	ldr	r3, [r7, #0]
 800cb6c:	1ad3      	subs	r3, r2, r3
 800cb6e:	69ba      	ldr	r2, [r7, #24]
 800cb70:	429a      	cmp	r2, r3
 800cb72:	d302      	bcc.n	800cb7a <UART_WaitOnFlagUntilTimeout+0x2e>
 800cb74:	69bb      	ldr	r3, [r7, #24]
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d101      	bne.n	800cb7e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800cb7a:	2303      	movs	r3, #3
 800cb7c:	e04b      	b.n	800cc16 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	2204      	movs	r2, #4
 800cb86:	4013      	ands	r3, r2
 800cb88:	d035      	beq.n	800cbf6 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	69db      	ldr	r3, [r3, #28]
 800cb90:	2208      	movs	r2, #8
 800cb92:	4013      	ands	r3, r2
 800cb94:	2b08      	cmp	r3, #8
 800cb96:	d111      	bne.n	800cbbc <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800cb98:	68fb      	ldr	r3, [r7, #12]
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	2208      	movs	r2, #8
 800cb9e:	621a      	str	r2, [r3, #32]
>>>>>>> main

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
<<<<<<< HEAD
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	0018      	movs	r0, r3
 800c90c:	f000 f83c 	bl	800c988 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	2284      	movs	r2, #132	@ 0x84
 800c914:	2108      	movs	r1, #8
 800c916:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	2278      	movs	r2, #120	@ 0x78
 800c91c:	2100      	movs	r1, #0
 800c91e:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 800c920:	2301      	movs	r3, #1
 800c922:	e02c      	b.n	800c97e <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	69da      	ldr	r2, [r3, #28]
 800c92a:	2380      	movs	r3, #128	@ 0x80
 800c92c:	011b      	lsls	r3, r3, #4
 800c92e:	401a      	ands	r2, r3
 800c930:	2380      	movs	r3, #128	@ 0x80
 800c932:	011b      	lsls	r3, r3, #4
 800c934:	429a      	cmp	r2, r3
 800c936:	d112      	bne.n	800c95e <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	2280      	movs	r2, #128	@ 0x80
 800c93e:	0112      	lsls	r2, r2, #4
 800c940:	621a      	str	r2, [r3, #32]
=======
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	0018      	movs	r0, r3
 800cba4:	f000 f83c 	bl	800cc20 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	2284      	movs	r2, #132	@ 0x84
 800cbac:	2108      	movs	r1, #8
 800cbae:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	2278      	movs	r2, #120	@ 0x78
 800cbb4:	2100      	movs	r1, #0
 800cbb6:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 800cbb8:	2301      	movs	r3, #1
 800cbba:	e02c      	b.n	800cc16 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	69da      	ldr	r2, [r3, #28]
 800cbc2:	2380      	movs	r3, #128	@ 0x80
 800cbc4:	011b      	lsls	r3, r3, #4
 800cbc6:	401a      	ands	r2, r3
 800cbc8:	2380      	movs	r3, #128	@ 0x80
 800cbca:	011b      	lsls	r3, r3, #4
 800cbcc:	429a      	cmp	r2, r3
 800cbce:	d112      	bne.n	800cbf6 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	2280      	movs	r2, #128	@ 0x80
 800cbd6:	0112      	lsls	r2, r2, #4
 800cbd8:	621a      	str	r2, [r3, #32]
>>>>>>> main

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
<<<<<<< HEAD
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	0018      	movs	r0, r3
 800c946:	f000 f81f 	bl	800c988 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	2284      	movs	r2, #132	@ 0x84
 800c94e:	2120      	movs	r1, #32
 800c950:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	2278      	movs	r2, #120	@ 0x78
 800c956:	2100      	movs	r1, #0
 800c958:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800c95a:	2303      	movs	r3, #3
 800c95c:	e00f      	b.n	800c97e <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	69db      	ldr	r3, [r3, #28]
 800c964:	68ba      	ldr	r2, [r7, #8]
 800c966:	4013      	ands	r3, r2
 800c968:	68ba      	ldr	r2, [r7, #8]
 800c96a:	1ad3      	subs	r3, r2, r3
 800c96c:	425a      	negs	r2, r3
 800c96e:	4153      	adcs	r3, r2
 800c970:	b2db      	uxtb	r3, r3
 800c972:	001a      	movs	r2, r3
 800c974:	1dfb      	adds	r3, r7, #7
 800c976:	781b      	ldrb	r3, [r3, #0]
 800c978:	429a      	cmp	r2, r3
 800c97a:	d0a4      	beq.n	800c8c6 <UART_WaitOnFlagUntilTimeout+0x12>
=======
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	0018      	movs	r0, r3
 800cbde:	f000 f81f 	bl	800cc20 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	2284      	movs	r2, #132	@ 0x84
 800cbe6:	2120      	movs	r1, #32
 800cbe8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cbea:	68fb      	ldr	r3, [r7, #12]
 800cbec:	2278      	movs	r2, #120	@ 0x78
 800cbee:	2100      	movs	r1, #0
 800cbf0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800cbf2:	2303      	movs	r3, #3
 800cbf4:	e00f      	b.n	800cc16 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	69db      	ldr	r3, [r3, #28]
 800cbfc:	68ba      	ldr	r2, [r7, #8]
 800cbfe:	4013      	ands	r3, r2
 800cc00:	68ba      	ldr	r2, [r7, #8]
 800cc02:	1ad3      	subs	r3, r2, r3
 800cc04:	425a      	negs	r2, r3
 800cc06:	4153      	adcs	r3, r2
 800cc08:	b2db      	uxtb	r3, r3
 800cc0a:	001a      	movs	r2, r3
 800cc0c:	1dfb      	adds	r3, r7, #7
 800cc0e:	781b      	ldrb	r3, [r3, #0]
 800cc10:	429a      	cmp	r2, r3
 800cc12:	d0a4      	beq.n	800cb5e <UART_WaitOnFlagUntilTimeout+0x12>
>>>>>>> main
        }
      }
    }
  }
  return HAL_OK;
<<<<<<< HEAD
 800c97c:	2300      	movs	r3, #0
}
 800c97e:	0018      	movs	r0, r3
 800c980:	46bd      	mov	sp, r7
 800c982:	b004      	add	sp, #16
 800c984:	bd80      	pop	{r7, pc}
	...

0800c988 <UART_EndRxTransfer>:
=======
 800cc14:	2300      	movs	r3, #0
}
 800cc16:	0018      	movs	r0, r3
 800cc18:	46bd      	mov	sp, r7
 800cc1a:	b004      	add	sp, #16
 800cc1c:	bd80      	pop	{r7, pc}
	...

0800cc20 <UART_EndRxTransfer>:
>>>>>>> main
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 800c988:	b580      	push	{r7, lr}
 800c98a:	b08e      	sub	sp, #56	@ 0x38
 800c98c:	af00      	add	r7, sp, #0
 800c98e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c990:	f3ef 8310 	mrs	r3, PRIMASK
 800c994:	617b      	str	r3, [r7, #20]
  return(result);
 800c996:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c998:	637b      	str	r3, [r7, #52]	@ 0x34
 800c99a:	2301      	movs	r3, #1
 800c99c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c99e:	69bb      	ldr	r3, [r7, #24]
 800c9a0:	f383 8810 	msr	PRIMASK, r3
}
 800c9a4:	46c0      	nop			@ (mov r8, r8)
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	681a      	ldr	r2, [r3, #0]
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	4926      	ldr	r1, [pc, #152]	@ (800ca4c <UART_EndRxTransfer+0xc4>)
 800c9b2:	400a      	ands	r2, r1
 800c9b4:	601a      	str	r2, [r3, #0]
 800c9b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c9b8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c9ba:	69fb      	ldr	r3, [r7, #28]
 800c9bc:	f383 8810 	msr	PRIMASK, r3
}
 800c9c0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c9c2:	f3ef 8310 	mrs	r3, PRIMASK
 800c9c6:	623b      	str	r3, [r7, #32]
  return(result);
 800c9c8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c9ca:	633b      	str	r3, [r7, #48]	@ 0x30
 800c9cc:	2301      	movs	r3, #1
 800c9ce:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c9d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9d2:	f383 8810 	msr	PRIMASK, r3
}
 800c9d6:	46c0      	nop			@ (mov r8, r8)
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	689a      	ldr	r2, [r3, #8]
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	2101      	movs	r1, #1
 800c9e4:	438a      	bics	r2, r1
 800c9e6:	609a      	str	r2, [r3, #8]
 800c9e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c9ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9ee:	f383 8810 	msr	PRIMASK, r3
}
 800c9f2:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c9f8:	2b01      	cmp	r3, #1
 800c9fa:	d118      	bne.n	800ca2e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c9fc:	f3ef 8310 	mrs	r3, PRIMASK
 800ca00:	60bb      	str	r3, [r7, #8]
  return(result);
 800ca02:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ca04:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ca06:	2301      	movs	r3, #1
 800ca08:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	f383 8810 	msr	PRIMASK, r3
}
 800ca10:	46c0      	nop			@ (mov r8, r8)
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	681a      	ldr	r2, [r3, #0]
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	2110      	movs	r1, #16
 800ca1e:	438a      	bics	r2, r1
 800ca20:	601a      	str	r2, [r3, #0]
 800ca22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca24:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ca26:	693b      	ldr	r3, [r7, #16]
 800ca28:	f383 8810 	msr	PRIMASK, r3
}
 800ca2c:	46c0      	nop			@ (mov r8, r8)
=======
 800cc20:	b580      	push	{r7, lr}
 800cc22:	b08e      	sub	sp, #56	@ 0x38
 800cc24:	af00      	add	r7, sp, #0
 800cc26:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cc28:	f3ef 8310 	mrs	r3, PRIMASK
 800cc2c:	617b      	str	r3, [r7, #20]
  return(result);
 800cc2e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800cc30:	637b      	str	r3, [r7, #52]	@ 0x34
 800cc32:	2301      	movs	r3, #1
 800cc34:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cc36:	69bb      	ldr	r3, [r7, #24]
 800cc38:	f383 8810 	msr	PRIMASK, r3
}
 800cc3c:	46c0      	nop			@ (mov r8, r8)
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	681a      	ldr	r2, [r3, #0]
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	4926      	ldr	r1, [pc, #152]	@ (800cce4 <UART_EndRxTransfer+0xc4>)
 800cc4a:	400a      	ands	r2, r1
 800cc4c:	601a      	str	r2, [r3, #0]
 800cc4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc50:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cc52:	69fb      	ldr	r3, [r7, #28]
 800cc54:	f383 8810 	msr	PRIMASK, r3
}
 800cc58:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cc5a:	f3ef 8310 	mrs	r3, PRIMASK
 800cc5e:	623b      	str	r3, [r7, #32]
  return(result);
 800cc60:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cc62:	633b      	str	r3, [r7, #48]	@ 0x30
 800cc64:	2301      	movs	r3, #1
 800cc66:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cc68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc6a:	f383 8810 	msr	PRIMASK, r3
}
 800cc6e:	46c0      	nop			@ (mov r8, r8)
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	689a      	ldr	r2, [r3, #8]
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	2101      	movs	r1, #1
 800cc7c:	438a      	bics	r2, r1
 800cc7e:	609a      	str	r2, [r3, #8]
 800cc80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc82:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cc84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc86:	f383 8810 	msr	PRIMASK, r3
}
 800cc8a:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cc90:	2b01      	cmp	r3, #1
 800cc92:	d118      	bne.n	800ccc6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cc94:	f3ef 8310 	mrs	r3, PRIMASK
 800cc98:	60bb      	str	r3, [r7, #8]
  return(result);
 800cc9a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cc9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cc9e:	2301      	movs	r3, #1
 800cca0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cca2:	68fb      	ldr	r3, [r7, #12]
 800cca4:	f383 8810 	msr	PRIMASK, r3
}
 800cca8:	46c0      	nop			@ (mov r8, r8)
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	681a      	ldr	r2, [r3, #0]
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	2110      	movs	r1, #16
 800ccb6:	438a      	bics	r2, r1
 800ccb8:	601a      	str	r2, [r3, #0]
 800ccba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ccbc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ccbe:	693b      	ldr	r3, [r7, #16]
 800ccc0:	f383 8810 	msr	PRIMASK, r3
}
 800ccc4:	46c0      	nop			@ (mov r8, r8)
>>>>>>> main
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
<<<<<<< HEAD
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	2280      	movs	r2, #128	@ 0x80
 800ca32:	2120      	movs	r1, #32
 800ca34:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	2200      	movs	r2, #0
 800ca3a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	2200      	movs	r2, #0
 800ca40:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800ca42:	46c0      	nop			@ (mov r8, r8)
 800ca44:	46bd      	mov	sp, r7
 800ca46:	b00e      	add	sp, #56	@ 0x38
 800ca48:	bd80      	pop	{r7, pc}
 800ca4a:	46c0      	nop			@ (mov r8, r8)
 800ca4c:	fffffedf 	.word	0xfffffedf

0800ca50 <UART_DMAAbortOnError>:
=======
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	2280      	movs	r2, #128	@ 0x80
 800ccca:	2120      	movs	r1, #32
 800cccc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	2200      	movs	r2, #0
 800ccd2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	2200      	movs	r2, #0
 800ccd8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800ccda:	46c0      	nop			@ (mov r8, r8)
 800ccdc:	46bd      	mov	sp, r7
 800ccde:	b00e      	add	sp, #56	@ 0x38
 800cce0:	bd80      	pop	{r7, pc}
 800cce2:	46c0      	nop			@ (mov r8, r8)
 800cce4:	fffffedf 	.word	0xfffffedf

0800cce8 <UART_DMAAbortOnError>:
>>>>>>> main
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 800ca50:	b580      	push	{r7, lr}
 800ca52:	b084      	sub	sp, #16
 800ca54:	af00      	add	r7, sp, #0
 800ca56:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ca5c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	225a      	movs	r2, #90	@ 0x5a
 800ca62:	2100      	movs	r1, #0
 800ca64:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	2252      	movs	r2, #82	@ 0x52
 800ca6a:	2100      	movs	r1, #0
 800ca6c:	5299      	strh	r1, [r3, r2]
=======
 800cce8:	b580      	push	{r7, lr}
 800ccea:	b084      	sub	sp, #16
 800ccec:	af00      	add	r7, sp, #0
 800ccee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ccf4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	225a      	movs	r2, #90	@ 0x5a
 800ccfa:	2100      	movs	r1, #0
 800ccfc:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	2252      	movs	r2, #82	@ 0x52
 800cd02:	2100      	movs	r1, #0
 800cd04:	5299      	strh	r1, [r3, r2]
>>>>>>> main

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
<<<<<<< HEAD
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	2298      	movs	r2, #152	@ 0x98
 800ca72:	589b      	ldr	r3, [r3, r2]
 800ca74:	68fa      	ldr	r2, [r7, #12]
 800ca76:	0010      	movs	r0, r2
 800ca78:	4798      	blx	r3
=======
 800cd06:	68fb      	ldr	r3, [r7, #12]
 800cd08:	2298      	movs	r2, #152	@ 0x98
 800cd0a:	589b      	ldr	r3, [r3, r2]
 800cd0c:	68fa      	ldr	r2, [r7, #12]
 800cd0e:	0010      	movs	r0, r2
 800cd10:	4798      	blx	r3
>>>>>>> main
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
<<<<<<< HEAD
 800ca7a:	46c0      	nop			@ (mov r8, r8)
 800ca7c:	46bd      	mov	sp, r7
 800ca7e:	b004      	add	sp, #16
 800ca80:	bd80      	pop	{r7, pc}

0800ca82 <UART_EndTransmit_IT>:
=======
 800cd12:	46c0      	nop			@ (mov r8, r8)
 800cd14:	46bd      	mov	sp, r7
 800cd16:	b004      	add	sp, #16
 800cd18:	bd80      	pop	{r7, pc}

0800cd1a <UART_EndTransmit_IT>:
>>>>>>> main
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 800ca82:	b580      	push	{r7, lr}
 800ca84:	b086      	sub	sp, #24
 800ca86:	af00      	add	r7, sp, #0
 800ca88:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ca8a:	f3ef 8310 	mrs	r3, PRIMASK
 800ca8e:	60bb      	str	r3, [r7, #8]
  return(result);
 800ca90:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ca92:	617b      	str	r3, [r7, #20]
 800ca94:	2301      	movs	r3, #1
 800ca96:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	f383 8810 	msr	PRIMASK, r3
}
 800ca9e:	46c0      	nop			@ (mov r8, r8)
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	681a      	ldr	r2, [r3, #0]
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	2140      	movs	r1, #64	@ 0x40
 800caac:	438a      	bics	r2, r1
 800caae:	601a      	str	r2, [r3, #0]
 800cab0:	697b      	ldr	r3, [r7, #20]
 800cab2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cab4:	693b      	ldr	r3, [r7, #16]
 800cab6:	f383 8810 	msr	PRIMASK, r3
}
 800caba:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	2220      	movs	r2, #32
 800cac0:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	2200      	movs	r2, #0
 800cac6:	66da      	str	r2, [r3, #108]	@ 0x6c
=======
 800cd1a:	b580      	push	{r7, lr}
 800cd1c:	b086      	sub	sp, #24
 800cd1e:	af00      	add	r7, sp, #0
 800cd20:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cd22:	f3ef 8310 	mrs	r3, PRIMASK
 800cd26:	60bb      	str	r3, [r7, #8]
  return(result);
 800cd28:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800cd2a:	617b      	str	r3, [r7, #20]
 800cd2c:	2301      	movs	r3, #1
 800cd2e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cd30:	68fb      	ldr	r3, [r7, #12]
 800cd32:	f383 8810 	msr	PRIMASK, r3
}
 800cd36:	46c0      	nop			@ (mov r8, r8)
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	681a      	ldr	r2, [r3, #0]
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	2140      	movs	r1, #64	@ 0x40
 800cd44:	438a      	bics	r2, r1
 800cd46:	601a      	str	r2, [r3, #0]
 800cd48:	697b      	ldr	r3, [r7, #20]
 800cd4a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cd4c:	693b      	ldr	r3, [r7, #16]
 800cd4e:	f383 8810 	msr	PRIMASK, r3
}
 800cd52:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	2220      	movs	r2, #32
 800cd58:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	2200      	movs	r2, #0
 800cd5e:	66da      	str	r2, [r3, #108]	@ 0x6c
>>>>>>> main

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
<<<<<<< HEAD
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	228c      	movs	r2, #140	@ 0x8c
 800cacc:	589b      	ldr	r3, [r3, r2]
 800cace:	687a      	ldr	r2, [r7, #4]
 800cad0:	0010      	movs	r0, r2
 800cad2:	4798      	blx	r3
=======
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	228c      	movs	r2, #140	@ 0x8c
 800cd64:	589b      	ldr	r3, [r3, r2]
 800cd66:	687a      	ldr	r2, [r7, #4]
 800cd68:	0010      	movs	r0, r2
 800cd6a:	4798      	blx	r3
>>>>>>> main
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
<<<<<<< HEAD
 800cad4:	46c0      	nop			@ (mov r8, r8)
 800cad6:	46bd      	mov	sp, r7
 800cad8:	b006      	add	sp, #24
 800cada:	bd80      	pop	{r7, pc}

0800cadc <HAL_UARTEx_WakeupCallback>:
=======
 800cd6c:	46c0      	nop			@ (mov r8, r8)
 800cd6e:	46bd      	mov	sp, r7
 800cd70:	b006      	add	sp, #24
 800cd72:	bd80      	pop	{r7, pc}

0800cd74 <HAL_UARTEx_WakeupCallback>:
>>>>>>> main
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 800cadc:	b580      	push	{r7, lr}
 800cade:	b082      	sub	sp, #8
 800cae0:	af00      	add	r7, sp, #0
 800cae2:	6078      	str	r0, [r7, #4]
=======
 800cd74:	b580      	push	{r7, lr}
 800cd76:	b082      	sub	sp, #8
 800cd78:	af00      	add	r7, sp, #0
 800cd7a:	6078      	str	r0, [r7, #4]
>>>>>>> main
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
<<<<<<< HEAD
 800cae4:	46c0      	nop			@ (mov r8, r8)
 800cae6:	46bd      	mov	sp, r7
 800cae8:	b002      	add	sp, #8
 800caea:	bd80      	pop	{r7, pc}

0800caec <USB_DisableGlobalInt>:
=======
 800cd7c:	46c0      	nop			@ (mov r8, r8)
 800cd7e:	46bd      	mov	sp, r7
 800cd80:	b002      	add	sp, #8
 800cd82:	bd80      	pop	{r7, pc}

0800cd84 <USB_DisableGlobalInt>:
>>>>>>> main
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
<<<<<<< HEAD
 800caec:	b580      	push	{r7, lr}
 800caee:	b084      	sub	sp, #16
 800caf0:	af00      	add	r7, sp, #0
 800caf2:	6078      	str	r0, [r7, #4]
=======
 800cd84:	b580      	push	{r7, lr}
 800cd86:	b084      	sub	sp, #16
 800cd88:	af00      	add	r7, sp, #0
 800cd8a:	6078      	str	r0, [r7, #4]
>>>>>>> main
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
<<<<<<< HEAD
 800caf4:	4b09      	ldr	r3, [pc, #36]	@ (800cb1c <USB_DisableGlobalInt+0x30>)
 800caf6:	60fb      	str	r3, [r7, #12]
=======
 800cd8c:	4b09      	ldr	r3, [pc, #36]	@ (800cdb4 <USB_DisableGlobalInt+0x30>)
 800cd8e:	60fb      	str	r3, [r7, #12]
>>>>>>> main
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
<<<<<<< HEAD
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	2240      	movs	r2, #64	@ 0x40
 800cafc:	5a9b      	ldrh	r3, [r3, r2]
 800cafe:	b29b      	uxth	r3, r3
 800cb00:	68fa      	ldr	r2, [r7, #12]
 800cb02:	b292      	uxth	r2, r2
 800cb04:	43d2      	mvns	r2, r2
 800cb06:	b292      	uxth	r2, r2
 800cb08:	4013      	ands	r3, r2
 800cb0a:	b299      	uxth	r1, r3
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	2240      	movs	r2, #64	@ 0x40
 800cb10:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800cb12:	2300      	movs	r3, #0
}
 800cb14:	0018      	movs	r0, r3
 800cb16:	46bd      	mov	sp, r7
 800cb18:	b004      	add	sp, #16
 800cb1a:	bd80      	pop	{r7, pc}
 800cb1c:	0000bf80 	.word	0x0000bf80

0800cb20 <USB_DevInit>:
=======
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	2240      	movs	r2, #64	@ 0x40
 800cd94:	5a9b      	ldrh	r3, [r3, r2]
 800cd96:	b29b      	uxth	r3, r3
 800cd98:	68fa      	ldr	r2, [r7, #12]
 800cd9a:	b292      	uxth	r2, r2
 800cd9c:	43d2      	mvns	r2, r2
 800cd9e:	b292      	uxth	r2, r2
 800cda0:	4013      	ands	r3, r2
 800cda2:	b299      	uxth	r1, r3
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	2240      	movs	r2, #64	@ 0x40
 800cda8:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800cdaa:	2300      	movs	r3, #0
}
 800cdac:	0018      	movs	r0, r3
 800cdae:	46bd      	mov	sp, r7
 800cdb0:	b004      	add	sp, #16
 800cdb2:	bd80      	pop	{r7, pc}
 800cdb4:	0000bf80 	.word	0x0000bf80

0800cdb8 <USB_DevInit>:
>>>>>>> main
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
<<<<<<< HEAD
 800cb20:	b084      	sub	sp, #16
 800cb22:	b590      	push	{r4, r7, lr}
 800cb24:	b083      	sub	sp, #12
 800cb26:	af00      	add	r7, sp, #0
 800cb28:	6078      	str	r0, [r7, #4]
 800cb2a:	2004      	movs	r0, #4
 800cb2c:	2410      	movs	r4, #16
 800cb2e:	1900      	adds	r0, r0, r4
 800cb30:	2408      	movs	r4, #8
 800cb32:	46a4      	mov	ip, r4
 800cb34:	44bc      	add	ip, r7
 800cb36:	4460      	add	r0, ip
 800cb38:	6001      	str	r1, [r0, #0]
 800cb3a:	6042      	str	r2, [r0, #4]
 800cb3c:	6083      	str	r3, [r0, #8]
=======
 800cdb8:	b084      	sub	sp, #16
 800cdba:	b590      	push	{r4, r7, lr}
 800cdbc:	b083      	sub	sp, #12
 800cdbe:	af00      	add	r7, sp, #0
 800cdc0:	6078      	str	r0, [r7, #4]
 800cdc2:	2004      	movs	r0, #4
 800cdc4:	2410      	movs	r4, #16
 800cdc6:	1900      	adds	r0, r0, r4
 800cdc8:	2408      	movs	r4, #8
 800cdca:	46a4      	mov	ip, r4
 800cdcc:	44bc      	add	ip, r7
 800cdce:	4460      	add	r0, ip
 800cdd0:	6001      	str	r1, [r0, #0]
 800cdd2:	6042      	str	r2, [r0, #4]
 800cdd4:	6083      	str	r3, [r0, #8]
>>>>>>> main
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
<<<<<<< HEAD
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	2240      	movs	r2, #64	@ 0x40
 800cb42:	2101      	movs	r1, #1
 800cb44:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	2240      	movs	r2, #64	@ 0x40
 800cb4a:	2100      	movs	r1, #0
 800cb4c:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	2244      	movs	r2, #68	@ 0x44
 800cb52:	2100      	movs	r1, #0
 800cb54:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	2250      	movs	r2, #80	@ 0x50
 800cb5a:	2100      	movs	r1, #0
 800cb5c:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800cb5e:	2300      	movs	r3, #0
}
 800cb60:	0018      	movs	r0, r3
 800cb62:	46bd      	mov	sp, r7
 800cb64:	b003      	add	sp, #12
 800cb66:	bc90      	pop	{r4, r7}
 800cb68:	bc08      	pop	{r3}
 800cb6a:	b004      	add	sp, #16
 800cb6c:	4718      	bx	r3

0800cb6e <__cvt>:
 800cb6e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cb70:	001f      	movs	r7, r3
 800cb72:	2300      	movs	r3, #0
 800cb74:	0016      	movs	r6, r2
 800cb76:	b08b      	sub	sp, #44	@ 0x2c
 800cb78:	429f      	cmp	r7, r3
 800cb7a:	da04      	bge.n	800cb86 <__cvt+0x18>
 800cb7c:	2180      	movs	r1, #128	@ 0x80
 800cb7e:	0609      	lsls	r1, r1, #24
 800cb80:	187b      	adds	r3, r7, r1
 800cb82:	001f      	movs	r7, r3
 800cb84:	232d      	movs	r3, #45	@ 0x2d
 800cb86:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800cb88:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 800cb8a:	7013      	strb	r3, [r2, #0]
 800cb8c:	2320      	movs	r3, #32
 800cb8e:	2203      	movs	r2, #3
 800cb90:	439d      	bics	r5, r3
 800cb92:	2d46      	cmp	r5, #70	@ 0x46
 800cb94:	d007      	beq.n	800cba6 <__cvt+0x38>
 800cb96:	002b      	movs	r3, r5
 800cb98:	3b45      	subs	r3, #69	@ 0x45
 800cb9a:	4259      	negs	r1, r3
 800cb9c:	414b      	adcs	r3, r1
 800cb9e:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800cba0:	3a01      	subs	r2, #1
 800cba2:	18cb      	adds	r3, r1, r3
 800cba4:	9310      	str	r3, [sp, #64]	@ 0x40
 800cba6:	ab09      	add	r3, sp, #36	@ 0x24
 800cba8:	9304      	str	r3, [sp, #16]
 800cbaa:	ab08      	add	r3, sp, #32
 800cbac:	9303      	str	r3, [sp, #12]
 800cbae:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800cbb0:	9200      	str	r2, [sp, #0]
 800cbb2:	9302      	str	r3, [sp, #8]
 800cbb4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800cbb6:	0032      	movs	r2, r6
 800cbb8:	9301      	str	r3, [sp, #4]
 800cbba:	003b      	movs	r3, r7
 800cbbc:	f000 fedc 	bl	800d978 <_dtoa_r>
 800cbc0:	0004      	movs	r4, r0
 800cbc2:	2d47      	cmp	r5, #71	@ 0x47
 800cbc4:	d11b      	bne.n	800cbfe <__cvt+0x90>
 800cbc6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800cbc8:	07db      	lsls	r3, r3, #31
 800cbca:	d511      	bpl.n	800cbf0 <__cvt+0x82>
 800cbcc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800cbce:	18c3      	adds	r3, r0, r3
 800cbd0:	9307      	str	r3, [sp, #28]
 800cbd2:	2200      	movs	r2, #0
 800cbd4:	2300      	movs	r3, #0
 800cbd6:	0030      	movs	r0, r6
 800cbd8:	0039      	movs	r1, r7
 800cbda:	f7f3 fc37 	bl	800044c <__aeabi_dcmpeq>
 800cbde:	2800      	cmp	r0, #0
 800cbe0:	d001      	beq.n	800cbe6 <__cvt+0x78>
 800cbe2:	9b07      	ldr	r3, [sp, #28]
 800cbe4:	9309      	str	r3, [sp, #36]	@ 0x24
 800cbe6:	2230      	movs	r2, #48	@ 0x30
 800cbe8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cbea:	9907      	ldr	r1, [sp, #28]
 800cbec:	428b      	cmp	r3, r1
 800cbee:	d320      	bcc.n	800cc32 <__cvt+0xc4>
 800cbf0:	0020      	movs	r0, r4
 800cbf2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cbf4:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800cbf6:	1b1b      	subs	r3, r3, r4
 800cbf8:	6013      	str	r3, [r2, #0]
 800cbfa:	b00b      	add	sp, #44	@ 0x2c
 800cbfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cbfe:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800cc00:	18c3      	adds	r3, r0, r3
 800cc02:	9307      	str	r3, [sp, #28]
 800cc04:	2d46      	cmp	r5, #70	@ 0x46
 800cc06:	d1e4      	bne.n	800cbd2 <__cvt+0x64>
 800cc08:	7803      	ldrb	r3, [r0, #0]
 800cc0a:	2b30      	cmp	r3, #48	@ 0x30
 800cc0c:	d10c      	bne.n	800cc28 <__cvt+0xba>
 800cc0e:	2200      	movs	r2, #0
 800cc10:	2300      	movs	r3, #0
 800cc12:	0030      	movs	r0, r6
 800cc14:	0039      	movs	r1, r7
 800cc16:	f7f3 fc19 	bl	800044c <__aeabi_dcmpeq>
 800cc1a:	2800      	cmp	r0, #0
 800cc1c:	d104      	bne.n	800cc28 <__cvt+0xba>
 800cc1e:	2301      	movs	r3, #1
 800cc20:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800cc22:	1a9b      	subs	r3, r3, r2
 800cc24:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800cc26:	6013      	str	r3, [r2, #0]
 800cc28:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800cc2a:	9a07      	ldr	r2, [sp, #28]
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	18d3      	adds	r3, r2, r3
 800cc30:	e7ce      	b.n	800cbd0 <__cvt+0x62>
 800cc32:	1c59      	adds	r1, r3, #1
 800cc34:	9109      	str	r1, [sp, #36]	@ 0x24
 800cc36:	701a      	strb	r2, [r3, #0]
 800cc38:	e7d6      	b.n	800cbe8 <__cvt+0x7a>

0800cc3a <__exponent>:
 800cc3a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cc3c:	232b      	movs	r3, #43	@ 0x2b
 800cc3e:	0005      	movs	r5, r0
 800cc40:	000c      	movs	r4, r1
 800cc42:	b085      	sub	sp, #20
 800cc44:	7002      	strb	r2, [r0, #0]
 800cc46:	2900      	cmp	r1, #0
 800cc48:	da01      	bge.n	800cc4e <__exponent+0x14>
 800cc4a:	424c      	negs	r4, r1
 800cc4c:	3302      	adds	r3, #2
 800cc4e:	706b      	strb	r3, [r5, #1]
 800cc50:	2c09      	cmp	r4, #9
 800cc52:	dd2c      	ble.n	800ccae <__exponent+0x74>
 800cc54:	ab02      	add	r3, sp, #8
 800cc56:	1dde      	adds	r6, r3, #7
 800cc58:	0020      	movs	r0, r4
 800cc5a:	210a      	movs	r1, #10
 800cc5c:	f7f3 fbe0 	bl	8000420 <__aeabi_idivmod>
 800cc60:	0037      	movs	r7, r6
 800cc62:	3130      	adds	r1, #48	@ 0x30
 800cc64:	3e01      	subs	r6, #1
 800cc66:	0020      	movs	r0, r4
 800cc68:	7031      	strb	r1, [r6, #0]
 800cc6a:	210a      	movs	r1, #10
 800cc6c:	9401      	str	r4, [sp, #4]
 800cc6e:	f7f3 faf1 	bl	8000254 <__divsi3>
 800cc72:	9b01      	ldr	r3, [sp, #4]
 800cc74:	0004      	movs	r4, r0
 800cc76:	2b63      	cmp	r3, #99	@ 0x63
 800cc78:	dcee      	bgt.n	800cc58 <__exponent+0x1e>
 800cc7a:	1eba      	subs	r2, r7, #2
 800cc7c:	1ca8      	adds	r0, r5, #2
 800cc7e:	0001      	movs	r1, r0
 800cc80:	0013      	movs	r3, r2
 800cc82:	3430      	adds	r4, #48	@ 0x30
 800cc84:	7014      	strb	r4, [r2, #0]
 800cc86:	ac02      	add	r4, sp, #8
 800cc88:	3407      	adds	r4, #7
 800cc8a:	429c      	cmp	r4, r3
 800cc8c:	d80a      	bhi.n	800cca4 <__exponent+0x6a>
 800cc8e:	2300      	movs	r3, #0
 800cc90:	42a2      	cmp	r2, r4
 800cc92:	d803      	bhi.n	800cc9c <__exponent+0x62>
 800cc94:	3309      	adds	r3, #9
 800cc96:	aa02      	add	r2, sp, #8
 800cc98:	189b      	adds	r3, r3, r2
 800cc9a:	1bdb      	subs	r3, r3, r7
 800cc9c:	18c0      	adds	r0, r0, r3
 800cc9e:	1b40      	subs	r0, r0, r5
 800cca0:	b005      	add	sp, #20
 800cca2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cca4:	781c      	ldrb	r4, [r3, #0]
 800cca6:	3301      	adds	r3, #1
 800cca8:	700c      	strb	r4, [r1, #0]
 800ccaa:	3101      	adds	r1, #1
 800ccac:	e7eb      	b.n	800cc86 <__exponent+0x4c>
 800ccae:	2330      	movs	r3, #48	@ 0x30
 800ccb0:	18e4      	adds	r4, r4, r3
 800ccb2:	70ab      	strb	r3, [r5, #2]
 800ccb4:	1d28      	adds	r0, r5, #4
 800ccb6:	70ec      	strb	r4, [r5, #3]
 800ccb8:	e7f1      	b.n	800cc9e <__exponent+0x64>
	...

0800ccbc <_printf_float>:
 800ccbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ccbe:	b097      	sub	sp, #92	@ 0x5c
 800ccc0:	000d      	movs	r5, r1
 800ccc2:	920a      	str	r2, [sp, #40]	@ 0x28
 800ccc4:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 800ccc6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ccc8:	9009      	str	r0, [sp, #36]	@ 0x24
 800ccca:	f000 fd33 	bl	800d734 <_localeconv_r>
 800ccce:	6803      	ldr	r3, [r0, #0]
 800ccd0:	0018      	movs	r0, r3
 800ccd2:	930d      	str	r3, [sp, #52]	@ 0x34
 800ccd4:	f7f3 fa18 	bl	8000108 <strlen>
 800ccd8:	2300      	movs	r3, #0
 800ccda:	900f      	str	r0, [sp, #60]	@ 0x3c
 800ccdc:	9314      	str	r3, [sp, #80]	@ 0x50
 800ccde:	7e2b      	ldrb	r3, [r5, #24]
 800cce0:	2207      	movs	r2, #7
 800cce2:	930c      	str	r3, [sp, #48]	@ 0x30
 800cce4:	682b      	ldr	r3, [r5, #0]
 800cce6:	930e      	str	r3, [sp, #56]	@ 0x38
 800cce8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800ccea:	6823      	ldr	r3, [r4, #0]
 800ccec:	05c9      	lsls	r1, r1, #23
 800ccee:	d545      	bpl.n	800cd7c <_printf_float+0xc0>
 800ccf0:	189b      	adds	r3, r3, r2
 800ccf2:	4393      	bics	r3, r2
 800ccf4:	001a      	movs	r2, r3
 800ccf6:	3208      	adds	r2, #8
 800ccf8:	6022      	str	r2, [r4, #0]
 800ccfa:	2201      	movs	r2, #1
 800ccfc:	681e      	ldr	r6, [r3, #0]
 800ccfe:	685f      	ldr	r7, [r3, #4]
 800cd00:	007b      	lsls	r3, r7, #1
 800cd02:	085b      	lsrs	r3, r3, #1
 800cd04:	9311      	str	r3, [sp, #68]	@ 0x44
 800cd06:	9610      	str	r6, [sp, #64]	@ 0x40
 800cd08:	64ae      	str	r6, [r5, #72]	@ 0x48
 800cd0a:	64ef      	str	r7, [r5, #76]	@ 0x4c
 800cd0c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800cd0e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800cd10:	4ba7      	ldr	r3, [pc, #668]	@ (800cfb0 <_printf_float+0x2f4>)
 800cd12:	4252      	negs	r2, r2
 800cd14:	f7f6 fa3e 	bl	8003194 <__aeabi_dcmpun>
 800cd18:	2800      	cmp	r0, #0
 800cd1a:	d131      	bne.n	800cd80 <_printf_float+0xc4>
 800cd1c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800cd1e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800cd20:	2201      	movs	r2, #1
 800cd22:	4ba3      	ldr	r3, [pc, #652]	@ (800cfb0 <_printf_float+0x2f4>)
 800cd24:	4252      	negs	r2, r2
 800cd26:	f7f3 fba1 	bl	800046c <__aeabi_dcmple>
 800cd2a:	2800      	cmp	r0, #0
 800cd2c:	d128      	bne.n	800cd80 <_printf_float+0xc4>
 800cd2e:	2200      	movs	r2, #0
 800cd30:	2300      	movs	r3, #0
 800cd32:	0030      	movs	r0, r6
 800cd34:	0039      	movs	r1, r7
 800cd36:	f7f3 fb8f 	bl	8000458 <__aeabi_dcmplt>
 800cd3a:	2800      	cmp	r0, #0
 800cd3c:	d003      	beq.n	800cd46 <_printf_float+0x8a>
 800cd3e:	002b      	movs	r3, r5
 800cd40:	222d      	movs	r2, #45	@ 0x2d
 800cd42:	3343      	adds	r3, #67	@ 0x43
 800cd44:	701a      	strb	r2, [r3, #0]
 800cd46:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800cd48:	4f9a      	ldr	r7, [pc, #616]	@ (800cfb4 <_printf_float+0x2f8>)
 800cd4a:	2b47      	cmp	r3, #71	@ 0x47
 800cd4c:	d900      	bls.n	800cd50 <_printf_float+0x94>
 800cd4e:	4f9a      	ldr	r7, [pc, #616]	@ (800cfb8 <_printf_float+0x2fc>)
 800cd50:	2303      	movs	r3, #3
 800cd52:	2400      	movs	r4, #0
 800cd54:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cd56:	612b      	str	r3, [r5, #16]
 800cd58:	3301      	adds	r3, #1
 800cd5a:	439a      	bics	r2, r3
 800cd5c:	602a      	str	r2, [r5, #0]
 800cd5e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cd60:	0029      	movs	r1, r5
 800cd62:	9300      	str	r3, [sp, #0]
 800cd64:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cd66:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cd68:	aa15      	add	r2, sp, #84	@ 0x54
 800cd6a:	f000 f9e5 	bl	800d138 <_printf_common>
 800cd6e:	3001      	adds	r0, #1
 800cd70:	d000      	beq.n	800cd74 <_printf_float+0xb8>
 800cd72:	e09f      	b.n	800ceb4 <_printf_float+0x1f8>
 800cd74:	2001      	movs	r0, #1
 800cd76:	4240      	negs	r0, r0
 800cd78:	b017      	add	sp, #92	@ 0x5c
 800cd7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cd7c:	3307      	adds	r3, #7
 800cd7e:	e7b8      	b.n	800ccf2 <_printf_float+0x36>
 800cd80:	0032      	movs	r2, r6
 800cd82:	003b      	movs	r3, r7
 800cd84:	0030      	movs	r0, r6
 800cd86:	0039      	movs	r1, r7
 800cd88:	f7f6 fa04 	bl	8003194 <__aeabi_dcmpun>
 800cd8c:	2800      	cmp	r0, #0
 800cd8e:	d00b      	beq.n	800cda8 <_printf_float+0xec>
 800cd90:	2f00      	cmp	r7, #0
 800cd92:	da03      	bge.n	800cd9c <_printf_float+0xe0>
 800cd94:	002b      	movs	r3, r5
 800cd96:	222d      	movs	r2, #45	@ 0x2d
 800cd98:	3343      	adds	r3, #67	@ 0x43
 800cd9a:	701a      	strb	r2, [r3, #0]
 800cd9c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800cd9e:	4f87      	ldr	r7, [pc, #540]	@ (800cfbc <_printf_float+0x300>)
 800cda0:	2b47      	cmp	r3, #71	@ 0x47
 800cda2:	d9d5      	bls.n	800cd50 <_printf_float+0x94>
 800cda4:	4f86      	ldr	r7, [pc, #536]	@ (800cfc0 <_printf_float+0x304>)
 800cda6:	e7d3      	b.n	800cd50 <_printf_float+0x94>
 800cda8:	2220      	movs	r2, #32
 800cdaa:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 800cdac:	686b      	ldr	r3, [r5, #4]
 800cdae:	4394      	bics	r4, r2
 800cdb0:	1c5a      	adds	r2, r3, #1
 800cdb2:	d146      	bne.n	800ce42 <_printf_float+0x186>
 800cdb4:	3307      	adds	r3, #7
 800cdb6:	606b      	str	r3, [r5, #4]
 800cdb8:	2380      	movs	r3, #128	@ 0x80
 800cdba:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cdbc:	00db      	lsls	r3, r3, #3
 800cdbe:	4313      	orrs	r3, r2
 800cdc0:	2200      	movs	r2, #0
 800cdc2:	602b      	str	r3, [r5, #0]
 800cdc4:	9206      	str	r2, [sp, #24]
 800cdc6:	aa14      	add	r2, sp, #80	@ 0x50
 800cdc8:	9205      	str	r2, [sp, #20]
 800cdca:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800cdcc:	a90a      	add	r1, sp, #40	@ 0x28
 800cdce:	9204      	str	r2, [sp, #16]
 800cdd0:	aa13      	add	r2, sp, #76	@ 0x4c
 800cdd2:	9203      	str	r2, [sp, #12]
 800cdd4:	2223      	movs	r2, #35	@ 0x23
 800cdd6:	1852      	adds	r2, r2, r1
 800cdd8:	9202      	str	r2, [sp, #8]
 800cdda:	9301      	str	r3, [sp, #4]
 800cddc:	686b      	ldr	r3, [r5, #4]
 800cdde:	0032      	movs	r2, r6
 800cde0:	9300      	str	r3, [sp, #0]
 800cde2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cde4:	003b      	movs	r3, r7
 800cde6:	f7ff fec2 	bl	800cb6e <__cvt>
 800cdea:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800cdec:	0007      	movs	r7, r0
 800cdee:	2c47      	cmp	r4, #71	@ 0x47
 800cdf0:	d12d      	bne.n	800ce4e <_printf_float+0x192>
 800cdf2:	1cd3      	adds	r3, r2, #3
 800cdf4:	db02      	blt.n	800cdfc <_printf_float+0x140>
 800cdf6:	686b      	ldr	r3, [r5, #4]
 800cdf8:	429a      	cmp	r2, r3
 800cdfa:	dd48      	ble.n	800ce8e <_printf_float+0x1d2>
 800cdfc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800cdfe:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800ce00:	3b02      	subs	r3, #2
 800ce02:	b2db      	uxtb	r3, r3
 800ce04:	930c      	str	r3, [sp, #48]	@ 0x30
 800ce06:	0028      	movs	r0, r5
 800ce08:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800ce0a:	3901      	subs	r1, #1
 800ce0c:	3050      	adds	r0, #80	@ 0x50
 800ce0e:	9113      	str	r1, [sp, #76]	@ 0x4c
 800ce10:	f7ff ff13 	bl	800cc3a <__exponent>
 800ce14:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800ce16:	0004      	movs	r4, r0
 800ce18:	1813      	adds	r3, r2, r0
 800ce1a:	612b      	str	r3, [r5, #16]
 800ce1c:	2a01      	cmp	r2, #1
 800ce1e:	dc02      	bgt.n	800ce26 <_printf_float+0x16a>
 800ce20:	682a      	ldr	r2, [r5, #0]
 800ce22:	07d2      	lsls	r2, r2, #31
 800ce24:	d501      	bpl.n	800ce2a <_printf_float+0x16e>
 800ce26:	3301      	adds	r3, #1
 800ce28:	612b      	str	r3, [r5, #16]
 800ce2a:	2323      	movs	r3, #35	@ 0x23
 800ce2c:	aa0a      	add	r2, sp, #40	@ 0x28
 800ce2e:	189b      	adds	r3, r3, r2
 800ce30:	781b      	ldrb	r3, [r3, #0]
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d100      	bne.n	800ce38 <_printf_float+0x17c>
 800ce36:	e792      	b.n	800cd5e <_printf_float+0xa2>
 800ce38:	002b      	movs	r3, r5
 800ce3a:	222d      	movs	r2, #45	@ 0x2d
 800ce3c:	3343      	adds	r3, #67	@ 0x43
 800ce3e:	701a      	strb	r2, [r3, #0]
 800ce40:	e78d      	b.n	800cd5e <_printf_float+0xa2>
 800ce42:	2c47      	cmp	r4, #71	@ 0x47
 800ce44:	d1b8      	bne.n	800cdb8 <_printf_float+0xfc>
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d1b6      	bne.n	800cdb8 <_printf_float+0xfc>
 800ce4a:	3301      	adds	r3, #1
 800ce4c:	e7b3      	b.n	800cdb6 <_printf_float+0xfa>
 800ce4e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ce50:	0011      	movs	r1, r2
 800ce52:	2b65      	cmp	r3, #101	@ 0x65
 800ce54:	d9d7      	bls.n	800ce06 <_printf_float+0x14a>
 800ce56:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ce58:	2b66      	cmp	r3, #102	@ 0x66
 800ce5a:	d11a      	bne.n	800ce92 <_printf_float+0x1d6>
 800ce5c:	686b      	ldr	r3, [r5, #4]
 800ce5e:	2a00      	cmp	r2, #0
 800ce60:	dd09      	ble.n	800ce76 <_printf_float+0x1ba>
 800ce62:	612a      	str	r2, [r5, #16]
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d102      	bne.n	800ce6e <_printf_float+0x1b2>
 800ce68:	6829      	ldr	r1, [r5, #0]
 800ce6a:	07c9      	lsls	r1, r1, #31
 800ce6c:	d50b      	bpl.n	800ce86 <_printf_float+0x1ca>
 800ce6e:	3301      	adds	r3, #1
 800ce70:	189b      	adds	r3, r3, r2
 800ce72:	612b      	str	r3, [r5, #16]
 800ce74:	e007      	b.n	800ce86 <_printf_float+0x1ca>
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d103      	bne.n	800ce82 <_printf_float+0x1c6>
 800ce7a:	2201      	movs	r2, #1
 800ce7c:	6829      	ldr	r1, [r5, #0]
 800ce7e:	4211      	tst	r1, r2
 800ce80:	d000      	beq.n	800ce84 <_printf_float+0x1c8>
 800ce82:	1c9a      	adds	r2, r3, #2
 800ce84:	612a      	str	r2, [r5, #16]
 800ce86:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ce88:	2400      	movs	r4, #0
 800ce8a:	65ab      	str	r3, [r5, #88]	@ 0x58
 800ce8c:	e7cd      	b.n	800ce2a <_printf_float+0x16e>
 800ce8e:	2367      	movs	r3, #103	@ 0x67
 800ce90:	930c      	str	r3, [sp, #48]	@ 0x30
 800ce92:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800ce94:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800ce96:	4299      	cmp	r1, r3
 800ce98:	db06      	blt.n	800cea8 <_printf_float+0x1ec>
 800ce9a:	682b      	ldr	r3, [r5, #0]
 800ce9c:	6129      	str	r1, [r5, #16]
 800ce9e:	07db      	lsls	r3, r3, #31
 800cea0:	d5f1      	bpl.n	800ce86 <_printf_float+0x1ca>
 800cea2:	3101      	adds	r1, #1
 800cea4:	6129      	str	r1, [r5, #16]
 800cea6:	e7ee      	b.n	800ce86 <_printf_float+0x1ca>
 800cea8:	2201      	movs	r2, #1
 800ceaa:	2900      	cmp	r1, #0
 800ceac:	dce0      	bgt.n	800ce70 <_printf_float+0x1b4>
 800ceae:	1892      	adds	r2, r2, r2
 800ceb0:	1a52      	subs	r2, r2, r1
 800ceb2:	e7dd      	b.n	800ce70 <_printf_float+0x1b4>
 800ceb4:	682a      	ldr	r2, [r5, #0]
 800ceb6:	0553      	lsls	r3, r2, #21
 800ceb8:	d408      	bmi.n	800cecc <_printf_float+0x210>
 800ceba:	692b      	ldr	r3, [r5, #16]
 800cebc:	003a      	movs	r2, r7
 800cebe:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800cec0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cec2:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800cec4:	47a0      	blx	r4
 800cec6:	3001      	adds	r0, #1
 800cec8:	d129      	bne.n	800cf1e <_printf_float+0x262>
 800ceca:	e753      	b.n	800cd74 <_printf_float+0xb8>
 800cecc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800cece:	2b65      	cmp	r3, #101	@ 0x65
 800ced0:	d800      	bhi.n	800ced4 <_printf_float+0x218>
 800ced2:	e0da      	b.n	800d08a <_printf_float+0x3ce>
 800ced4:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800ced6:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800ced8:	2200      	movs	r2, #0
 800ceda:	2300      	movs	r3, #0
 800cedc:	f7f3 fab6 	bl	800044c <__aeabi_dcmpeq>
 800cee0:	2800      	cmp	r0, #0
 800cee2:	d033      	beq.n	800cf4c <_printf_float+0x290>
 800cee4:	2301      	movs	r3, #1
 800cee6:	4a37      	ldr	r2, [pc, #220]	@ (800cfc4 <_printf_float+0x308>)
 800cee8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ceea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ceec:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800ceee:	47a0      	blx	r4
 800cef0:	3001      	adds	r0, #1
 800cef2:	d100      	bne.n	800cef6 <_printf_float+0x23a>
 800cef4:	e73e      	b.n	800cd74 <_printf_float+0xb8>
 800cef6:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 800cef8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800cefa:	42b3      	cmp	r3, r6
 800cefc:	db02      	blt.n	800cf04 <_printf_float+0x248>
 800cefe:	682b      	ldr	r3, [r5, #0]
 800cf00:	07db      	lsls	r3, r3, #31
 800cf02:	d50c      	bpl.n	800cf1e <_printf_float+0x262>
 800cf04:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800cf06:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cf08:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800cf0a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800cf0c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cf0e:	47a0      	blx	r4
 800cf10:	2400      	movs	r4, #0
 800cf12:	3001      	adds	r0, #1
 800cf14:	d100      	bne.n	800cf18 <_printf_float+0x25c>
 800cf16:	e72d      	b.n	800cd74 <_printf_float+0xb8>
 800cf18:	1e73      	subs	r3, r6, #1
 800cf1a:	42a3      	cmp	r3, r4
 800cf1c:	dc0a      	bgt.n	800cf34 <_printf_float+0x278>
 800cf1e:	682b      	ldr	r3, [r5, #0]
 800cf20:	079b      	lsls	r3, r3, #30
 800cf22:	d500      	bpl.n	800cf26 <_printf_float+0x26a>
 800cf24:	e105      	b.n	800d132 <_printf_float+0x476>
 800cf26:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800cf28:	68e8      	ldr	r0, [r5, #12]
 800cf2a:	4298      	cmp	r0, r3
 800cf2c:	db00      	blt.n	800cf30 <_printf_float+0x274>
 800cf2e:	e723      	b.n	800cd78 <_printf_float+0xbc>
 800cf30:	0018      	movs	r0, r3
 800cf32:	e721      	b.n	800cd78 <_printf_float+0xbc>
 800cf34:	002a      	movs	r2, r5
 800cf36:	2301      	movs	r3, #1
 800cf38:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800cf3a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cf3c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800cf3e:	321a      	adds	r2, #26
 800cf40:	47b8      	blx	r7
 800cf42:	3001      	adds	r0, #1
 800cf44:	d100      	bne.n	800cf48 <_printf_float+0x28c>
 800cf46:	e715      	b.n	800cd74 <_printf_float+0xb8>
 800cf48:	3401      	adds	r4, #1
 800cf4a:	e7e5      	b.n	800cf18 <_printf_float+0x25c>
 800cf4c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	dc3a      	bgt.n	800cfc8 <_printf_float+0x30c>
 800cf52:	2301      	movs	r3, #1
 800cf54:	4a1b      	ldr	r2, [pc, #108]	@ (800cfc4 <_printf_float+0x308>)
 800cf56:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800cf58:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cf5a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800cf5c:	47a0      	blx	r4
 800cf5e:	3001      	adds	r0, #1
 800cf60:	d100      	bne.n	800cf64 <_printf_float+0x2a8>
 800cf62:	e707      	b.n	800cd74 <_printf_float+0xb8>
 800cf64:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 800cf66:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800cf68:	4333      	orrs	r3, r6
 800cf6a:	d102      	bne.n	800cf72 <_printf_float+0x2b6>
 800cf6c:	682b      	ldr	r3, [r5, #0]
 800cf6e:	07db      	lsls	r3, r3, #31
 800cf70:	d5d5      	bpl.n	800cf1e <_printf_float+0x262>
 800cf72:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cf74:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800cf76:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800cf78:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cf7a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800cf7c:	47a0      	blx	r4
 800cf7e:	2300      	movs	r3, #0
 800cf80:	3001      	adds	r0, #1
 800cf82:	d100      	bne.n	800cf86 <_printf_float+0x2ca>
 800cf84:	e6f6      	b.n	800cd74 <_printf_float+0xb8>
 800cf86:	930c      	str	r3, [sp, #48]	@ 0x30
 800cf88:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800cf8a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800cf8c:	425b      	negs	r3, r3
 800cf8e:	4293      	cmp	r3, r2
 800cf90:	dc01      	bgt.n	800cf96 <_printf_float+0x2da>
 800cf92:	0033      	movs	r3, r6
 800cf94:	e792      	b.n	800cebc <_printf_float+0x200>
 800cf96:	002a      	movs	r2, r5
 800cf98:	2301      	movs	r3, #1
 800cf9a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800cf9c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cf9e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800cfa0:	321a      	adds	r2, #26
 800cfa2:	47a0      	blx	r4
 800cfa4:	3001      	adds	r0, #1
 800cfa6:	d100      	bne.n	800cfaa <_printf_float+0x2ee>
 800cfa8:	e6e4      	b.n	800cd74 <_printf_float+0xb8>
 800cfaa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800cfac:	3301      	adds	r3, #1
 800cfae:	e7ea      	b.n	800cf86 <_printf_float+0x2ca>
 800cfb0:	7fefffff 	.word	0x7fefffff
 800cfb4:	080105e4 	.word	0x080105e4
 800cfb8:	080105e8 	.word	0x080105e8
 800cfbc:	080105ec 	.word	0x080105ec
 800cfc0:	080105f0 	.word	0x080105f0
 800cfc4:	080105f4 	.word	0x080105f4
 800cfc8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800cfca:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 800cfcc:	930c      	str	r3, [sp, #48]	@ 0x30
 800cfce:	429e      	cmp	r6, r3
 800cfd0:	dd00      	ble.n	800cfd4 <_printf_float+0x318>
 800cfd2:	001e      	movs	r6, r3
 800cfd4:	2e00      	cmp	r6, #0
 800cfd6:	dc31      	bgt.n	800d03c <_printf_float+0x380>
 800cfd8:	43f3      	mvns	r3, r6
 800cfda:	2400      	movs	r4, #0
 800cfdc:	17db      	asrs	r3, r3, #31
 800cfde:	4033      	ands	r3, r6
 800cfe0:	930e      	str	r3, [sp, #56]	@ 0x38
 800cfe2:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 800cfe4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cfe6:	1af3      	subs	r3, r6, r3
 800cfe8:	42a3      	cmp	r3, r4
 800cfea:	dc30      	bgt.n	800d04e <_printf_float+0x392>
 800cfec:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800cfee:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800cff0:	429a      	cmp	r2, r3
 800cff2:	dc38      	bgt.n	800d066 <_printf_float+0x3aa>
 800cff4:	682b      	ldr	r3, [r5, #0]
 800cff6:	07db      	lsls	r3, r3, #31
 800cff8:	d435      	bmi.n	800d066 <_printf_float+0x3aa>
 800cffa:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 800cffc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800cffe:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800d000:	1b9b      	subs	r3, r3, r6
 800d002:	1b14      	subs	r4, r2, r4
 800d004:	429c      	cmp	r4, r3
 800d006:	dd00      	ble.n	800d00a <_printf_float+0x34e>
 800d008:	001c      	movs	r4, r3
 800d00a:	2c00      	cmp	r4, #0
 800d00c:	dc34      	bgt.n	800d078 <_printf_float+0x3bc>
 800d00e:	43e3      	mvns	r3, r4
 800d010:	2600      	movs	r6, #0
 800d012:	17db      	asrs	r3, r3, #31
 800d014:	401c      	ands	r4, r3
 800d016:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d018:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800d01a:	1ad3      	subs	r3, r2, r3
 800d01c:	1b1b      	subs	r3, r3, r4
 800d01e:	42b3      	cmp	r3, r6
 800d020:	dc00      	bgt.n	800d024 <_printf_float+0x368>
 800d022:	e77c      	b.n	800cf1e <_printf_float+0x262>
 800d024:	002a      	movs	r2, r5
 800d026:	2301      	movs	r3, #1
 800d028:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d02a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d02c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800d02e:	321a      	adds	r2, #26
 800d030:	47b8      	blx	r7
 800d032:	3001      	adds	r0, #1
 800d034:	d100      	bne.n	800d038 <_printf_float+0x37c>
 800d036:	e69d      	b.n	800cd74 <_printf_float+0xb8>
 800d038:	3601      	adds	r6, #1
 800d03a:	e7ec      	b.n	800d016 <_printf_float+0x35a>
 800d03c:	0033      	movs	r3, r6
 800d03e:	003a      	movs	r2, r7
 800d040:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d042:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d044:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800d046:	47a0      	blx	r4
 800d048:	3001      	adds	r0, #1
 800d04a:	d1c5      	bne.n	800cfd8 <_printf_float+0x31c>
 800d04c:	e692      	b.n	800cd74 <_printf_float+0xb8>
 800d04e:	002a      	movs	r2, r5
 800d050:	2301      	movs	r3, #1
 800d052:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d054:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d056:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800d058:	321a      	adds	r2, #26
 800d05a:	47b0      	blx	r6
 800d05c:	3001      	adds	r0, #1
 800d05e:	d100      	bne.n	800d062 <_printf_float+0x3a6>
 800d060:	e688      	b.n	800cd74 <_printf_float+0xb8>
 800d062:	3401      	adds	r4, #1
 800d064:	e7bd      	b.n	800cfe2 <_printf_float+0x326>
 800d066:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d068:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d06a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d06c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d06e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800d070:	47a0      	blx	r4
 800d072:	3001      	adds	r0, #1
 800d074:	d1c1      	bne.n	800cffa <_printf_float+0x33e>
 800d076:	e67d      	b.n	800cd74 <_printf_float+0xb8>
 800d078:	19ba      	adds	r2, r7, r6
 800d07a:	0023      	movs	r3, r4
 800d07c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d07e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d080:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800d082:	47b0      	blx	r6
 800d084:	3001      	adds	r0, #1
 800d086:	d1c2      	bne.n	800d00e <_printf_float+0x352>
 800d088:	e674      	b.n	800cd74 <_printf_float+0xb8>
 800d08a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800d08c:	930c      	str	r3, [sp, #48]	@ 0x30
 800d08e:	2b01      	cmp	r3, #1
 800d090:	dc02      	bgt.n	800d098 <_printf_float+0x3dc>
 800d092:	2301      	movs	r3, #1
 800d094:	421a      	tst	r2, r3
 800d096:	d039      	beq.n	800d10c <_printf_float+0x450>
 800d098:	2301      	movs	r3, #1
 800d09a:	003a      	movs	r2, r7
 800d09c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d09e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d0a0:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800d0a2:	47b0      	blx	r6
 800d0a4:	3001      	adds	r0, #1
 800d0a6:	d100      	bne.n	800d0aa <_printf_float+0x3ee>
 800d0a8:	e664      	b.n	800cd74 <_printf_float+0xb8>
 800d0aa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d0ac:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d0ae:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d0b0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d0b2:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800d0b4:	47b0      	blx	r6
 800d0b6:	3001      	adds	r0, #1
 800d0b8:	d100      	bne.n	800d0bc <_printf_float+0x400>
 800d0ba:	e65b      	b.n	800cd74 <_printf_float+0xb8>
 800d0bc:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800d0be:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800d0c0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d0c2:	2200      	movs	r2, #0
 800d0c4:	3b01      	subs	r3, #1
 800d0c6:	930c      	str	r3, [sp, #48]	@ 0x30
 800d0c8:	2300      	movs	r3, #0
 800d0ca:	f7f3 f9bf 	bl	800044c <__aeabi_dcmpeq>
 800d0ce:	2800      	cmp	r0, #0
 800d0d0:	d11a      	bne.n	800d108 <_printf_float+0x44c>
 800d0d2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d0d4:	1c7a      	adds	r2, r7, #1
 800d0d6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d0d8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d0da:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800d0dc:	47b0      	blx	r6
 800d0de:	3001      	adds	r0, #1
 800d0e0:	d10e      	bne.n	800d100 <_printf_float+0x444>
 800d0e2:	e647      	b.n	800cd74 <_printf_float+0xb8>
 800d0e4:	002a      	movs	r2, r5
 800d0e6:	2301      	movs	r3, #1
 800d0e8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d0ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d0ec:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800d0ee:	321a      	adds	r2, #26
 800d0f0:	47b8      	blx	r7
 800d0f2:	3001      	adds	r0, #1
 800d0f4:	d100      	bne.n	800d0f8 <_printf_float+0x43c>
 800d0f6:	e63d      	b.n	800cd74 <_printf_float+0xb8>
 800d0f8:	3601      	adds	r6, #1
 800d0fa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d0fc:	429e      	cmp	r6, r3
 800d0fe:	dbf1      	blt.n	800d0e4 <_printf_float+0x428>
 800d100:	002a      	movs	r2, r5
 800d102:	0023      	movs	r3, r4
 800d104:	3250      	adds	r2, #80	@ 0x50
 800d106:	e6da      	b.n	800cebe <_printf_float+0x202>
 800d108:	2600      	movs	r6, #0
 800d10a:	e7f6      	b.n	800d0fa <_printf_float+0x43e>
 800d10c:	003a      	movs	r2, r7
 800d10e:	e7e2      	b.n	800d0d6 <_printf_float+0x41a>
 800d110:	002a      	movs	r2, r5
 800d112:	2301      	movs	r3, #1
 800d114:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d116:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d118:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800d11a:	3219      	adds	r2, #25
 800d11c:	47b0      	blx	r6
 800d11e:	3001      	adds	r0, #1
 800d120:	d100      	bne.n	800d124 <_printf_float+0x468>
 800d122:	e627      	b.n	800cd74 <_printf_float+0xb8>
 800d124:	3401      	adds	r4, #1
 800d126:	68eb      	ldr	r3, [r5, #12]
 800d128:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800d12a:	1a9b      	subs	r3, r3, r2
 800d12c:	42a3      	cmp	r3, r4
 800d12e:	dcef      	bgt.n	800d110 <_printf_float+0x454>
 800d130:	e6f9      	b.n	800cf26 <_printf_float+0x26a>
 800d132:	2400      	movs	r4, #0
 800d134:	e7f7      	b.n	800d126 <_printf_float+0x46a>
 800d136:	46c0      	nop			@ (mov r8, r8)

0800d138 <_printf_common>:
 800d138:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d13a:	0016      	movs	r6, r2
 800d13c:	9301      	str	r3, [sp, #4]
 800d13e:	688a      	ldr	r2, [r1, #8]
 800d140:	690b      	ldr	r3, [r1, #16]
 800d142:	000c      	movs	r4, r1
 800d144:	9000      	str	r0, [sp, #0]
 800d146:	4293      	cmp	r3, r2
 800d148:	da00      	bge.n	800d14c <_printf_common+0x14>
 800d14a:	0013      	movs	r3, r2
 800d14c:	0022      	movs	r2, r4
 800d14e:	6033      	str	r3, [r6, #0]
 800d150:	3243      	adds	r2, #67	@ 0x43
 800d152:	7812      	ldrb	r2, [r2, #0]
 800d154:	2a00      	cmp	r2, #0
 800d156:	d001      	beq.n	800d15c <_printf_common+0x24>
 800d158:	3301      	adds	r3, #1
 800d15a:	6033      	str	r3, [r6, #0]
 800d15c:	6823      	ldr	r3, [r4, #0]
 800d15e:	069b      	lsls	r3, r3, #26
 800d160:	d502      	bpl.n	800d168 <_printf_common+0x30>
 800d162:	6833      	ldr	r3, [r6, #0]
 800d164:	3302      	adds	r3, #2
 800d166:	6033      	str	r3, [r6, #0]
 800d168:	6822      	ldr	r2, [r4, #0]
 800d16a:	2306      	movs	r3, #6
 800d16c:	0015      	movs	r5, r2
 800d16e:	401d      	ands	r5, r3
 800d170:	421a      	tst	r2, r3
 800d172:	d027      	beq.n	800d1c4 <_printf_common+0x8c>
 800d174:	0023      	movs	r3, r4
 800d176:	3343      	adds	r3, #67	@ 0x43
 800d178:	781b      	ldrb	r3, [r3, #0]
 800d17a:	1e5a      	subs	r2, r3, #1
 800d17c:	4193      	sbcs	r3, r2
 800d17e:	6822      	ldr	r2, [r4, #0]
 800d180:	0692      	lsls	r2, r2, #26
 800d182:	d430      	bmi.n	800d1e6 <_printf_common+0xae>
 800d184:	0022      	movs	r2, r4
 800d186:	9901      	ldr	r1, [sp, #4]
 800d188:	9800      	ldr	r0, [sp, #0]
 800d18a:	9d08      	ldr	r5, [sp, #32]
 800d18c:	3243      	adds	r2, #67	@ 0x43
 800d18e:	47a8      	blx	r5
 800d190:	3001      	adds	r0, #1
 800d192:	d025      	beq.n	800d1e0 <_printf_common+0xa8>
 800d194:	2206      	movs	r2, #6
 800d196:	6823      	ldr	r3, [r4, #0]
 800d198:	2500      	movs	r5, #0
 800d19a:	4013      	ands	r3, r2
 800d19c:	2b04      	cmp	r3, #4
 800d19e:	d105      	bne.n	800d1ac <_printf_common+0x74>
 800d1a0:	6833      	ldr	r3, [r6, #0]
 800d1a2:	68e5      	ldr	r5, [r4, #12]
 800d1a4:	1aed      	subs	r5, r5, r3
 800d1a6:	43eb      	mvns	r3, r5
 800d1a8:	17db      	asrs	r3, r3, #31
 800d1aa:	401d      	ands	r5, r3
 800d1ac:	68a3      	ldr	r3, [r4, #8]
 800d1ae:	6922      	ldr	r2, [r4, #16]
 800d1b0:	4293      	cmp	r3, r2
 800d1b2:	dd01      	ble.n	800d1b8 <_printf_common+0x80>
 800d1b4:	1a9b      	subs	r3, r3, r2
 800d1b6:	18ed      	adds	r5, r5, r3
 800d1b8:	2600      	movs	r6, #0
 800d1ba:	42b5      	cmp	r5, r6
 800d1bc:	d120      	bne.n	800d200 <_printf_common+0xc8>
 800d1be:	2000      	movs	r0, #0
 800d1c0:	e010      	b.n	800d1e4 <_printf_common+0xac>
 800d1c2:	3501      	adds	r5, #1
 800d1c4:	68e3      	ldr	r3, [r4, #12]
 800d1c6:	6832      	ldr	r2, [r6, #0]
 800d1c8:	1a9b      	subs	r3, r3, r2
 800d1ca:	42ab      	cmp	r3, r5
 800d1cc:	ddd2      	ble.n	800d174 <_printf_common+0x3c>
 800d1ce:	0022      	movs	r2, r4
 800d1d0:	2301      	movs	r3, #1
 800d1d2:	9901      	ldr	r1, [sp, #4]
 800d1d4:	9800      	ldr	r0, [sp, #0]
 800d1d6:	9f08      	ldr	r7, [sp, #32]
 800d1d8:	3219      	adds	r2, #25
 800d1da:	47b8      	blx	r7
 800d1dc:	3001      	adds	r0, #1
 800d1de:	d1f0      	bne.n	800d1c2 <_printf_common+0x8a>
 800d1e0:	2001      	movs	r0, #1
 800d1e2:	4240      	negs	r0, r0
 800d1e4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d1e6:	2030      	movs	r0, #48	@ 0x30
 800d1e8:	18e1      	adds	r1, r4, r3
 800d1ea:	3143      	adds	r1, #67	@ 0x43
 800d1ec:	7008      	strb	r0, [r1, #0]
 800d1ee:	0021      	movs	r1, r4
 800d1f0:	1c5a      	adds	r2, r3, #1
 800d1f2:	3145      	adds	r1, #69	@ 0x45
 800d1f4:	7809      	ldrb	r1, [r1, #0]
 800d1f6:	18a2      	adds	r2, r4, r2
 800d1f8:	3243      	adds	r2, #67	@ 0x43
 800d1fa:	3302      	adds	r3, #2
 800d1fc:	7011      	strb	r1, [r2, #0]
 800d1fe:	e7c1      	b.n	800d184 <_printf_common+0x4c>
 800d200:	0022      	movs	r2, r4
 800d202:	2301      	movs	r3, #1
 800d204:	9901      	ldr	r1, [sp, #4]
 800d206:	9800      	ldr	r0, [sp, #0]
 800d208:	9f08      	ldr	r7, [sp, #32]
 800d20a:	321a      	adds	r2, #26
 800d20c:	47b8      	blx	r7
 800d20e:	3001      	adds	r0, #1
 800d210:	d0e6      	beq.n	800d1e0 <_printf_common+0xa8>
 800d212:	3601      	adds	r6, #1
 800d214:	e7d1      	b.n	800d1ba <_printf_common+0x82>
	...

0800d218 <_printf_i>:
 800d218:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d21a:	b08b      	sub	sp, #44	@ 0x2c
 800d21c:	9206      	str	r2, [sp, #24]
 800d21e:	000a      	movs	r2, r1
 800d220:	3243      	adds	r2, #67	@ 0x43
 800d222:	9307      	str	r3, [sp, #28]
 800d224:	9005      	str	r0, [sp, #20]
 800d226:	9203      	str	r2, [sp, #12]
 800d228:	7e0a      	ldrb	r2, [r1, #24]
 800d22a:	000c      	movs	r4, r1
 800d22c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d22e:	2a78      	cmp	r2, #120	@ 0x78
 800d230:	d809      	bhi.n	800d246 <_printf_i+0x2e>
 800d232:	2a62      	cmp	r2, #98	@ 0x62
 800d234:	d80b      	bhi.n	800d24e <_printf_i+0x36>
 800d236:	2a00      	cmp	r2, #0
 800d238:	d100      	bne.n	800d23c <_printf_i+0x24>
 800d23a:	e0bc      	b.n	800d3b6 <_printf_i+0x19e>
 800d23c:	497b      	ldr	r1, [pc, #492]	@ (800d42c <_printf_i+0x214>)
 800d23e:	9104      	str	r1, [sp, #16]
 800d240:	2a58      	cmp	r2, #88	@ 0x58
 800d242:	d100      	bne.n	800d246 <_printf_i+0x2e>
 800d244:	e090      	b.n	800d368 <_printf_i+0x150>
 800d246:	0025      	movs	r5, r4
 800d248:	3542      	adds	r5, #66	@ 0x42
 800d24a:	702a      	strb	r2, [r5, #0]
 800d24c:	e022      	b.n	800d294 <_printf_i+0x7c>
 800d24e:	0010      	movs	r0, r2
 800d250:	3863      	subs	r0, #99	@ 0x63
 800d252:	2815      	cmp	r0, #21
 800d254:	d8f7      	bhi.n	800d246 <_printf_i+0x2e>
 800d256:	f7f2 ff69 	bl	800012c <__gnu_thumb1_case_shi>
 800d25a:	0016      	.short	0x0016
 800d25c:	fff6001f 	.word	0xfff6001f
 800d260:	fff6fff6 	.word	0xfff6fff6
 800d264:	001ffff6 	.word	0x001ffff6
 800d268:	fff6fff6 	.word	0xfff6fff6
 800d26c:	fff6fff6 	.word	0xfff6fff6
 800d270:	003600a1 	.word	0x003600a1
 800d274:	fff60080 	.word	0xfff60080
 800d278:	00b2fff6 	.word	0x00b2fff6
 800d27c:	0036fff6 	.word	0x0036fff6
 800d280:	fff6fff6 	.word	0xfff6fff6
 800d284:	0084      	.short	0x0084
 800d286:	0025      	movs	r5, r4
 800d288:	681a      	ldr	r2, [r3, #0]
 800d28a:	3542      	adds	r5, #66	@ 0x42
 800d28c:	1d11      	adds	r1, r2, #4
 800d28e:	6019      	str	r1, [r3, #0]
 800d290:	6813      	ldr	r3, [r2, #0]
 800d292:	702b      	strb	r3, [r5, #0]
 800d294:	2301      	movs	r3, #1
 800d296:	e0a0      	b.n	800d3da <_printf_i+0x1c2>
 800d298:	6818      	ldr	r0, [r3, #0]
 800d29a:	6809      	ldr	r1, [r1, #0]
 800d29c:	1d02      	adds	r2, r0, #4
 800d29e:	060d      	lsls	r5, r1, #24
 800d2a0:	d50b      	bpl.n	800d2ba <_printf_i+0xa2>
 800d2a2:	6806      	ldr	r6, [r0, #0]
 800d2a4:	601a      	str	r2, [r3, #0]
 800d2a6:	2e00      	cmp	r6, #0
 800d2a8:	da03      	bge.n	800d2b2 <_printf_i+0x9a>
 800d2aa:	232d      	movs	r3, #45	@ 0x2d
 800d2ac:	9a03      	ldr	r2, [sp, #12]
 800d2ae:	4276      	negs	r6, r6
 800d2b0:	7013      	strb	r3, [r2, #0]
 800d2b2:	4b5e      	ldr	r3, [pc, #376]	@ (800d42c <_printf_i+0x214>)
 800d2b4:	270a      	movs	r7, #10
 800d2b6:	9304      	str	r3, [sp, #16]
 800d2b8:	e018      	b.n	800d2ec <_printf_i+0xd4>
 800d2ba:	6806      	ldr	r6, [r0, #0]
 800d2bc:	601a      	str	r2, [r3, #0]
 800d2be:	0649      	lsls	r1, r1, #25
 800d2c0:	d5f1      	bpl.n	800d2a6 <_printf_i+0x8e>
 800d2c2:	b236      	sxth	r6, r6
 800d2c4:	e7ef      	b.n	800d2a6 <_printf_i+0x8e>
 800d2c6:	6808      	ldr	r0, [r1, #0]
 800d2c8:	6819      	ldr	r1, [r3, #0]
 800d2ca:	c940      	ldmia	r1!, {r6}
 800d2cc:	0605      	lsls	r5, r0, #24
 800d2ce:	d402      	bmi.n	800d2d6 <_printf_i+0xbe>
 800d2d0:	0640      	lsls	r0, r0, #25
 800d2d2:	d500      	bpl.n	800d2d6 <_printf_i+0xbe>
 800d2d4:	b2b6      	uxth	r6, r6
 800d2d6:	6019      	str	r1, [r3, #0]
 800d2d8:	4b54      	ldr	r3, [pc, #336]	@ (800d42c <_printf_i+0x214>)
 800d2da:	270a      	movs	r7, #10
 800d2dc:	9304      	str	r3, [sp, #16]
 800d2de:	2a6f      	cmp	r2, #111	@ 0x6f
 800d2e0:	d100      	bne.n	800d2e4 <_printf_i+0xcc>
 800d2e2:	3f02      	subs	r7, #2
 800d2e4:	0023      	movs	r3, r4
 800d2e6:	2200      	movs	r2, #0
 800d2e8:	3343      	adds	r3, #67	@ 0x43
 800d2ea:	701a      	strb	r2, [r3, #0]
 800d2ec:	6863      	ldr	r3, [r4, #4]
 800d2ee:	60a3      	str	r3, [r4, #8]
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	db03      	blt.n	800d2fc <_printf_i+0xe4>
 800d2f4:	2104      	movs	r1, #4
 800d2f6:	6822      	ldr	r2, [r4, #0]
 800d2f8:	438a      	bics	r2, r1
 800d2fa:	6022      	str	r2, [r4, #0]
 800d2fc:	2e00      	cmp	r6, #0
 800d2fe:	d102      	bne.n	800d306 <_printf_i+0xee>
 800d300:	9d03      	ldr	r5, [sp, #12]
 800d302:	2b00      	cmp	r3, #0
 800d304:	d00c      	beq.n	800d320 <_printf_i+0x108>
 800d306:	9d03      	ldr	r5, [sp, #12]
 800d308:	0030      	movs	r0, r6
 800d30a:	0039      	movs	r1, r7
 800d30c:	f7f2 ff9e 	bl	800024c <__aeabi_uidivmod>
 800d310:	9b04      	ldr	r3, [sp, #16]
 800d312:	3d01      	subs	r5, #1
 800d314:	5c5b      	ldrb	r3, [r3, r1]
 800d316:	702b      	strb	r3, [r5, #0]
 800d318:	0033      	movs	r3, r6
 800d31a:	0006      	movs	r6, r0
 800d31c:	429f      	cmp	r7, r3
 800d31e:	d9f3      	bls.n	800d308 <_printf_i+0xf0>
 800d320:	2f08      	cmp	r7, #8
 800d322:	d109      	bne.n	800d338 <_printf_i+0x120>
 800d324:	6823      	ldr	r3, [r4, #0]
 800d326:	07db      	lsls	r3, r3, #31
 800d328:	d506      	bpl.n	800d338 <_printf_i+0x120>
 800d32a:	6862      	ldr	r2, [r4, #4]
 800d32c:	6923      	ldr	r3, [r4, #16]
 800d32e:	429a      	cmp	r2, r3
 800d330:	dc02      	bgt.n	800d338 <_printf_i+0x120>
 800d332:	2330      	movs	r3, #48	@ 0x30
 800d334:	3d01      	subs	r5, #1
 800d336:	702b      	strb	r3, [r5, #0]
 800d338:	9b03      	ldr	r3, [sp, #12]
 800d33a:	1b5b      	subs	r3, r3, r5
 800d33c:	6123      	str	r3, [r4, #16]
 800d33e:	9b07      	ldr	r3, [sp, #28]
 800d340:	0021      	movs	r1, r4
 800d342:	9300      	str	r3, [sp, #0]
 800d344:	9805      	ldr	r0, [sp, #20]
 800d346:	9b06      	ldr	r3, [sp, #24]
 800d348:	aa09      	add	r2, sp, #36	@ 0x24
 800d34a:	f7ff fef5 	bl	800d138 <_printf_common>
 800d34e:	3001      	adds	r0, #1
 800d350:	d148      	bne.n	800d3e4 <_printf_i+0x1cc>
 800d352:	2001      	movs	r0, #1
 800d354:	4240      	negs	r0, r0
 800d356:	b00b      	add	sp, #44	@ 0x2c
 800d358:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d35a:	2220      	movs	r2, #32
 800d35c:	6809      	ldr	r1, [r1, #0]
 800d35e:	430a      	orrs	r2, r1
 800d360:	6022      	str	r2, [r4, #0]
 800d362:	2278      	movs	r2, #120	@ 0x78
 800d364:	4932      	ldr	r1, [pc, #200]	@ (800d430 <_printf_i+0x218>)
 800d366:	9104      	str	r1, [sp, #16]
 800d368:	0021      	movs	r1, r4
 800d36a:	3145      	adds	r1, #69	@ 0x45
 800d36c:	700a      	strb	r2, [r1, #0]
 800d36e:	6819      	ldr	r1, [r3, #0]
 800d370:	6822      	ldr	r2, [r4, #0]
 800d372:	c940      	ldmia	r1!, {r6}
 800d374:	0610      	lsls	r0, r2, #24
 800d376:	d402      	bmi.n	800d37e <_printf_i+0x166>
 800d378:	0650      	lsls	r0, r2, #25
 800d37a:	d500      	bpl.n	800d37e <_printf_i+0x166>
 800d37c:	b2b6      	uxth	r6, r6
 800d37e:	6019      	str	r1, [r3, #0]
 800d380:	07d3      	lsls	r3, r2, #31
 800d382:	d502      	bpl.n	800d38a <_printf_i+0x172>
 800d384:	2320      	movs	r3, #32
 800d386:	4313      	orrs	r3, r2
 800d388:	6023      	str	r3, [r4, #0]
 800d38a:	2e00      	cmp	r6, #0
 800d38c:	d001      	beq.n	800d392 <_printf_i+0x17a>
 800d38e:	2710      	movs	r7, #16
 800d390:	e7a8      	b.n	800d2e4 <_printf_i+0xcc>
 800d392:	2220      	movs	r2, #32
 800d394:	6823      	ldr	r3, [r4, #0]
 800d396:	4393      	bics	r3, r2
 800d398:	6023      	str	r3, [r4, #0]
 800d39a:	e7f8      	b.n	800d38e <_printf_i+0x176>
 800d39c:	681a      	ldr	r2, [r3, #0]
 800d39e:	680d      	ldr	r5, [r1, #0]
 800d3a0:	1d10      	adds	r0, r2, #4
 800d3a2:	6949      	ldr	r1, [r1, #20]
 800d3a4:	6018      	str	r0, [r3, #0]
 800d3a6:	6813      	ldr	r3, [r2, #0]
 800d3a8:	062e      	lsls	r6, r5, #24
 800d3aa:	d501      	bpl.n	800d3b0 <_printf_i+0x198>
 800d3ac:	6019      	str	r1, [r3, #0]
 800d3ae:	e002      	b.n	800d3b6 <_printf_i+0x19e>
 800d3b0:	066d      	lsls	r5, r5, #25
 800d3b2:	d5fb      	bpl.n	800d3ac <_printf_i+0x194>
 800d3b4:	8019      	strh	r1, [r3, #0]
 800d3b6:	2300      	movs	r3, #0
 800d3b8:	9d03      	ldr	r5, [sp, #12]
 800d3ba:	6123      	str	r3, [r4, #16]
 800d3bc:	e7bf      	b.n	800d33e <_printf_i+0x126>
 800d3be:	681a      	ldr	r2, [r3, #0]
 800d3c0:	1d11      	adds	r1, r2, #4
 800d3c2:	6019      	str	r1, [r3, #0]
 800d3c4:	6815      	ldr	r5, [r2, #0]
 800d3c6:	2100      	movs	r1, #0
 800d3c8:	0028      	movs	r0, r5
 800d3ca:	6862      	ldr	r2, [r4, #4]
 800d3cc:	f000 fa31 	bl	800d832 <memchr>
 800d3d0:	2800      	cmp	r0, #0
 800d3d2:	d001      	beq.n	800d3d8 <_printf_i+0x1c0>
 800d3d4:	1b40      	subs	r0, r0, r5
 800d3d6:	6060      	str	r0, [r4, #4]
 800d3d8:	6863      	ldr	r3, [r4, #4]
 800d3da:	6123      	str	r3, [r4, #16]
 800d3dc:	2300      	movs	r3, #0
 800d3de:	9a03      	ldr	r2, [sp, #12]
 800d3e0:	7013      	strb	r3, [r2, #0]
 800d3e2:	e7ac      	b.n	800d33e <_printf_i+0x126>
 800d3e4:	002a      	movs	r2, r5
 800d3e6:	6923      	ldr	r3, [r4, #16]
 800d3e8:	9906      	ldr	r1, [sp, #24]
 800d3ea:	9805      	ldr	r0, [sp, #20]
 800d3ec:	9d07      	ldr	r5, [sp, #28]
 800d3ee:	47a8      	blx	r5
 800d3f0:	3001      	adds	r0, #1
 800d3f2:	d0ae      	beq.n	800d352 <_printf_i+0x13a>
 800d3f4:	6823      	ldr	r3, [r4, #0]
 800d3f6:	079b      	lsls	r3, r3, #30
 800d3f8:	d415      	bmi.n	800d426 <_printf_i+0x20e>
 800d3fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d3fc:	68e0      	ldr	r0, [r4, #12]
 800d3fe:	4298      	cmp	r0, r3
 800d400:	daa9      	bge.n	800d356 <_printf_i+0x13e>
 800d402:	0018      	movs	r0, r3
 800d404:	e7a7      	b.n	800d356 <_printf_i+0x13e>
 800d406:	0022      	movs	r2, r4
 800d408:	2301      	movs	r3, #1
 800d40a:	9906      	ldr	r1, [sp, #24]
 800d40c:	9805      	ldr	r0, [sp, #20]
 800d40e:	9e07      	ldr	r6, [sp, #28]
 800d410:	3219      	adds	r2, #25
 800d412:	47b0      	blx	r6
 800d414:	3001      	adds	r0, #1
 800d416:	d09c      	beq.n	800d352 <_printf_i+0x13a>
 800d418:	3501      	adds	r5, #1
 800d41a:	68e3      	ldr	r3, [r4, #12]
 800d41c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d41e:	1a9b      	subs	r3, r3, r2
 800d420:	42ab      	cmp	r3, r5
 800d422:	dcf0      	bgt.n	800d406 <_printf_i+0x1ee>
 800d424:	e7e9      	b.n	800d3fa <_printf_i+0x1e2>
 800d426:	2500      	movs	r5, #0
 800d428:	e7f7      	b.n	800d41a <_printf_i+0x202>
 800d42a:	46c0      	nop			@ (mov r8, r8)
 800d42c:	080105f6 	.word	0x080105f6
 800d430:	08010607 	.word	0x08010607

0800d434 <std>:
 800d434:	2300      	movs	r3, #0
 800d436:	b510      	push	{r4, lr}
 800d438:	0004      	movs	r4, r0
 800d43a:	6003      	str	r3, [r0, #0]
 800d43c:	6043      	str	r3, [r0, #4]
 800d43e:	6083      	str	r3, [r0, #8]
 800d440:	8181      	strh	r1, [r0, #12]
 800d442:	6643      	str	r3, [r0, #100]	@ 0x64
 800d444:	81c2      	strh	r2, [r0, #14]
 800d446:	6103      	str	r3, [r0, #16]
 800d448:	6143      	str	r3, [r0, #20]
 800d44a:	6183      	str	r3, [r0, #24]
 800d44c:	0019      	movs	r1, r3
 800d44e:	2208      	movs	r2, #8
 800d450:	305c      	adds	r0, #92	@ 0x5c
 800d452:	f000 f967 	bl	800d724 <memset>
 800d456:	4b0b      	ldr	r3, [pc, #44]	@ (800d484 <std+0x50>)
 800d458:	6224      	str	r4, [r4, #32]
 800d45a:	6263      	str	r3, [r4, #36]	@ 0x24
 800d45c:	4b0a      	ldr	r3, [pc, #40]	@ (800d488 <std+0x54>)
 800d45e:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d460:	4b0a      	ldr	r3, [pc, #40]	@ (800d48c <std+0x58>)
 800d462:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d464:	4b0a      	ldr	r3, [pc, #40]	@ (800d490 <std+0x5c>)
 800d466:	6323      	str	r3, [r4, #48]	@ 0x30
 800d468:	4b0a      	ldr	r3, [pc, #40]	@ (800d494 <std+0x60>)
 800d46a:	429c      	cmp	r4, r3
 800d46c:	d005      	beq.n	800d47a <std+0x46>
 800d46e:	4b0a      	ldr	r3, [pc, #40]	@ (800d498 <std+0x64>)
 800d470:	429c      	cmp	r4, r3
 800d472:	d002      	beq.n	800d47a <std+0x46>
 800d474:	4b09      	ldr	r3, [pc, #36]	@ (800d49c <std+0x68>)
 800d476:	429c      	cmp	r4, r3
 800d478:	d103      	bne.n	800d482 <std+0x4e>
 800d47a:	0020      	movs	r0, r4
 800d47c:	3058      	adds	r0, #88	@ 0x58
 800d47e:	f000 f9d5 	bl	800d82c <__retarget_lock_init_recursive>
 800d482:	bd10      	pop	{r4, pc}
 800d484:	0800d61d 	.word	0x0800d61d
 800d488:	0800d645 	.word	0x0800d645
 800d48c:	0800d67d 	.word	0x0800d67d
 800d490:	0800d6a9 	.word	0x0800d6a9
 800d494:	2000176c 	.word	0x2000176c
 800d498:	200017d4 	.word	0x200017d4
 800d49c:	2000183c 	.word	0x2000183c

0800d4a0 <stdio_exit_handler>:
 800d4a0:	b510      	push	{r4, lr}
 800d4a2:	4a03      	ldr	r2, [pc, #12]	@ (800d4b0 <stdio_exit_handler+0x10>)
 800d4a4:	4903      	ldr	r1, [pc, #12]	@ (800d4b4 <stdio_exit_handler+0x14>)
 800d4a6:	4804      	ldr	r0, [pc, #16]	@ (800d4b8 <stdio_exit_handler+0x18>)
 800d4a8:	f000 f86c 	bl	800d584 <_fwalk_sglue>
 800d4ac:	bd10      	pop	{r4, pc}
 800d4ae:	46c0      	nop			@ (mov r8, r8)
 800d4b0:	20000048 	.word	0x20000048
 800d4b4:	0800f505 	.word	0x0800f505
 800d4b8:	20000058 	.word	0x20000058

0800d4bc <cleanup_stdio>:
 800d4bc:	6841      	ldr	r1, [r0, #4]
 800d4be:	4b0b      	ldr	r3, [pc, #44]	@ (800d4ec <cleanup_stdio+0x30>)
 800d4c0:	b510      	push	{r4, lr}
 800d4c2:	0004      	movs	r4, r0
 800d4c4:	4299      	cmp	r1, r3
 800d4c6:	d001      	beq.n	800d4cc <cleanup_stdio+0x10>
 800d4c8:	f002 f81c 	bl	800f504 <_fflush_r>
 800d4cc:	68a1      	ldr	r1, [r4, #8]
 800d4ce:	4b08      	ldr	r3, [pc, #32]	@ (800d4f0 <cleanup_stdio+0x34>)
 800d4d0:	4299      	cmp	r1, r3
 800d4d2:	d002      	beq.n	800d4da <cleanup_stdio+0x1e>
 800d4d4:	0020      	movs	r0, r4
 800d4d6:	f002 f815 	bl	800f504 <_fflush_r>
 800d4da:	68e1      	ldr	r1, [r4, #12]
 800d4dc:	4b05      	ldr	r3, [pc, #20]	@ (800d4f4 <cleanup_stdio+0x38>)
 800d4de:	4299      	cmp	r1, r3
 800d4e0:	d002      	beq.n	800d4e8 <cleanup_stdio+0x2c>
 800d4e2:	0020      	movs	r0, r4
 800d4e4:	f002 f80e 	bl	800f504 <_fflush_r>
 800d4e8:	bd10      	pop	{r4, pc}
 800d4ea:	46c0      	nop			@ (mov r8, r8)
 800d4ec:	2000176c 	.word	0x2000176c
 800d4f0:	200017d4 	.word	0x200017d4
 800d4f4:	2000183c 	.word	0x2000183c

0800d4f8 <global_stdio_init.part.0>:
 800d4f8:	b510      	push	{r4, lr}
 800d4fa:	4b09      	ldr	r3, [pc, #36]	@ (800d520 <global_stdio_init.part.0+0x28>)
 800d4fc:	4a09      	ldr	r2, [pc, #36]	@ (800d524 <global_stdio_init.part.0+0x2c>)
 800d4fe:	2104      	movs	r1, #4
 800d500:	601a      	str	r2, [r3, #0]
 800d502:	4809      	ldr	r0, [pc, #36]	@ (800d528 <global_stdio_init.part.0+0x30>)
 800d504:	2200      	movs	r2, #0
 800d506:	f7ff ff95 	bl	800d434 <std>
 800d50a:	2201      	movs	r2, #1
 800d50c:	2109      	movs	r1, #9
 800d50e:	4807      	ldr	r0, [pc, #28]	@ (800d52c <global_stdio_init.part.0+0x34>)
 800d510:	f7ff ff90 	bl	800d434 <std>
 800d514:	2202      	movs	r2, #2
 800d516:	2112      	movs	r1, #18
 800d518:	4805      	ldr	r0, [pc, #20]	@ (800d530 <global_stdio_init.part.0+0x38>)
 800d51a:	f7ff ff8b 	bl	800d434 <std>
 800d51e:	bd10      	pop	{r4, pc}
 800d520:	200018a4 	.word	0x200018a4
 800d524:	0800d4a1 	.word	0x0800d4a1
 800d528:	2000176c 	.word	0x2000176c
 800d52c:	200017d4 	.word	0x200017d4
 800d530:	2000183c 	.word	0x2000183c

0800d534 <__sfp_lock_acquire>:
 800d534:	b510      	push	{r4, lr}
 800d536:	4802      	ldr	r0, [pc, #8]	@ (800d540 <__sfp_lock_acquire+0xc>)
 800d538:	f000 f979 	bl	800d82e <__retarget_lock_acquire_recursive>
 800d53c:	bd10      	pop	{r4, pc}
 800d53e:	46c0      	nop			@ (mov r8, r8)
 800d540:	200018ad 	.word	0x200018ad

0800d544 <__sfp_lock_release>:
 800d544:	b510      	push	{r4, lr}
 800d546:	4802      	ldr	r0, [pc, #8]	@ (800d550 <__sfp_lock_release+0xc>)
 800d548:	f000 f972 	bl	800d830 <__retarget_lock_release_recursive>
 800d54c:	bd10      	pop	{r4, pc}
 800d54e:	46c0      	nop			@ (mov r8, r8)
 800d550:	200018ad 	.word	0x200018ad

0800d554 <__sinit>:
 800d554:	b510      	push	{r4, lr}
 800d556:	0004      	movs	r4, r0
 800d558:	f7ff ffec 	bl	800d534 <__sfp_lock_acquire>
 800d55c:	6a23      	ldr	r3, [r4, #32]
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d002      	beq.n	800d568 <__sinit+0x14>
 800d562:	f7ff ffef 	bl	800d544 <__sfp_lock_release>
 800d566:	bd10      	pop	{r4, pc}
 800d568:	4b04      	ldr	r3, [pc, #16]	@ (800d57c <__sinit+0x28>)
 800d56a:	6223      	str	r3, [r4, #32]
 800d56c:	4b04      	ldr	r3, [pc, #16]	@ (800d580 <__sinit+0x2c>)
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	2b00      	cmp	r3, #0
 800d572:	d1f6      	bne.n	800d562 <__sinit+0xe>
 800d574:	f7ff ffc0 	bl	800d4f8 <global_stdio_init.part.0>
 800d578:	e7f3      	b.n	800d562 <__sinit+0xe>
 800d57a:	46c0      	nop			@ (mov r8, r8)
 800d57c:	0800d4bd 	.word	0x0800d4bd
 800d580:	200018a4 	.word	0x200018a4

0800d584 <_fwalk_sglue>:
 800d584:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d586:	0014      	movs	r4, r2
 800d588:	2600      	movs	r6, #0
 800d58a:	9000      	str	r0, [sp, #0]
 800d58c:	9101      	str	r1, [sp, #4]
 800d58e:	68a5      	ldr	r5, [r4, #8]
 800d590:	6867      	ldr	r7, [r4, #4]
 800d592:	3f01      	subs	r7, #1
 800d594:	d504      	bpl.n	800d5a0 <_fwalk_sglue+0x1c>
 800d596:	6824      	ldr	r4, [r4, #0]
 800d598:	2c00      	cmp	r4, #0
 800d59a:	d1f8      	bne.n	800d58e <_fwalk_sglue+0xa>
 800d59c:	0030      	movs	r0, r6
 800d59e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d5a0:	89ab      	ldrh	r3, [r5, #12]
 800d5a2:	2b01      	cmp	r3, #1
 800d5a4:	d908      	bls.n	800d5b8 <_fwalk_sglue+0x34>
 800d5a6:	220e      	movs	r2, #14
 800d5a8:	5eab      	ldrsh	r3, [r5, r2]
 800d5aa:	3301      	adds	r3, #1
 800d5ac:	d004      	beq.n	800d5b8 <_fwalk_sglue+0x34>
 800d5ae:	0029      	movs	r1, r5
 800d5b0:	9800      	ldr	r0, [sp, #0]
 800d5b2:	9b01      	ldr	r3, [sp, #4]
 800d5b4:	4798      	blx	r3
 800d5b6:	4306      	orrs	r6, r0
 800d5b8:	3568      	adds	r5, #104	@ 0x68
 800d5ba:	e7ea      	b.n	800d592 <_fwalk_sglue+0xe>

0800d5bc <iprintf>:
 800d5bc:	b40f      	push	{r0, r1, r2, r3}
 800d5be:	b507      	push	{r0, r1, r2, lr}
 800d5c0:	4905      	ldr	r1, [pc, #20]	@ (800d5d8 <iprintf+0x1c>)
 800d5c2:	ab04      	add	r3, sp, #16
 800d5c4:	6808      	ldr	r0, [r1, #0]
 800d5c6:	cb04      	ldmia	r3!, {r2}
 800d5c8:	6881      	ldr	r1, [r0, #8]
 800d5ca:	9301      	str	r3, [sp, #4]
 800d5cc:	f001 fdf8 	bl	800f1c0 <_vfiprintf_r>
 800d5d0:	b003      	add	sp, #12
 800d5d2:	bc08      	pop	{r3}
 800d5d4:	b004      	add	sp, #16
 800d5d6:	4718      	bx	r3
 800d5d8:	20000054 	.word	0x20000054

0800d5dc <siprintf>:
 800d5dc:	b40e      	push	{r1, r2, r3}
 800d5de:	b500      	push	{lr}
 800d5e0:	490b      	ldr	r1, [pc, #44]	@ (800d610 <siprintf+0x34>)
 800d5e2:	b09c      	sub	sp, #112	@ 0x70
 800d5e4:	ab1d      	add	r3, sp, #116	@ 0x74
 800d5e6:	9002      	str	r0, [sp, #8]
 800d5e8:	9006      	str	r0, [sp, #24]
 800d5ea:	9107      	str	r1, [sp, #28]
 800d5ec:	9104      	str	r1, [sp, #16]
 800d5ee:	4809      	ldr	r0, [pc, #36]	@ (800d614 <siprintf+0x38>)
 800d5f0:	4909      	ldr	r1, [pc, #36]	@ (800d618 <siprintf+0x3c>)
 800d5f2:	cb04      	ldmia	r3!, {r2}
 800d5f4:	9105      	str	r1, [sp, #20]
 800d5f6:	6800      	ldr	r0, [r0, #0]
 800d5f8:	a902      	add	r1, sp, #8
 800d5fa:	9301      	str	r3, [sp, #4]
 800d5fc:	f001 fcba 	bl	800ef74 <_svfiprintf_r>
 800d600:	2200      	movs	r2, #0
 800d602:	9b02      	ldr	r3, [sp, #8]
 800d604:	701a      	strb	r2, [r3, #0]
 800d606:	b01c      	add	sp, #112	@ 0x70
 800d608:	bc08      	pop	{r3}
 800d60a:	b003      	add	sp, #12
 800d60c:	4718      	bx	r3
 800d60e:	46c0      	nop			@ (mov r8, r8)
 800d610:	7fffffff 	.word	0x7fffffff
 800d614:	20000054 	.word	0x20000054
 800d618:	ffff0208 	.word	0xffff0208

0800d61c <__sread>:
 800d61c:	b570      	push	{r4, r5, r6, lr}
 800d61e:	000c      	movs	r4, r1
 800d620:	250e      	movs	r5, #14
 800d622:	5f49      	ldrsh	r1, [r1, r5]
 800d624:	f000 f8b0 	bl	800d788 <_read_r>
 800d628:	2800      	cmp	r0, #0
 800d62a:	db03      	blt.n	800d634 <__sread+0x18>
 800d62c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800d62e:	181b      	adds	r3, r3, r0
 800d630:	6563      	str	r3, [r4, #84]	@ 0x54
 800d632:	bd70      	pop	{r4, r5, r6, pc}
 800d634:	89a3      	ldrh	r3, [r4, #12]
 800d636:	4a02      	ldr	r2, [pc, #8]	@ (800d640 <__sread+0x24>)
 800d638:	4013      	ands	r3, r2
 800d63a:	81a3      	strh	r3, [r4, #12]
 800d63c:	e7f9      	b.n	800d632 <__sread+0x16>
 800d63e:	46c0      	nop			@ (mov r8, r8)
 800d640:	ffffefff 	.word	0xffffefff

0800d644 <__swrite>:
 800d644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d646:	001f      	movs	r7, r3
 800d648:	898b      	ldrh	r3, [r1, #12]
 800d64a:	0005      	movs	r5, r0
 800d64c:	000c      	movs	r4, r1
 800d64e:	0016      	movs	r6, r2
 800d650:	05db      	lsls	r3, r3, #23
 800d652:	d505      	bpl.n	800d660 <__swrite+0x1c>
 800d654:	230e      	movs	r3, #14
 800d656:	5ec9      	ldrsh	r1, [r1, r3]
 800d658:	2200      	movs	r2, #0
 800d65a:	2302      	movs	r3, #2
 800d65c:	f000 f880 	bl	800d760 <_lseek_r>
 800d660:	89a3      	ldrh	r3, [r4, #12]
 800d662:	4a05      	ldr	r2, [pc, #20]	@ (800d678 <__swrite+0x34>)
 800d664:	0028      	movs	r0, r5
 800d666:	4013      	ands	r3, r2
 800d668:	81a3      	strh	r3, [r4, #12]
 800d66a:	0032      	movs	r2, r6
 800d66c:	230e      	movs	r3, #14
 800d66e:	5ee1      	ldrsh	r1, [r4, r3]
 800d670:	003b      	movs	r3, r7
 800d672:	f000 f89d 	bl	800d7b0 <_write_r>
 800d676:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d678:	ffffefff 	.word	0xffffefff

0800d67c <__sseek>:
 800d67c:	b570      	push	{r4, r5, r6, lr}
 800d67e:	000c      	movs	r4, r1
 800d680:	250e      	movs	r5, #14
 800d682:	5f49      	ldrsh	r1, [r1, r5]
 800d684:	f000 f86c 	bl	800d760 <_lseek_r>
 800d688:	89a3      	ldrh	r3, [r4, #12]
 800d68a:	1c42      	adds	r2, r0, #1
 800d68c:	d103      	bne.n	800d696 <__sseek+0x1a>
 800d68e:	4a05      	ldr	r2, [pc, #20]	@ (800d6a4 <__sseek+0x28>)
 800d690:	4013      	ands	r3, r2
 800d692:	81a3      	strh	r3, [r4, #12]
 800d694:	bd70      	pop	{r4, r5, r6, pc}
 800d696:	2280      	movs	r2, #128	@ 0x80
 800d698:	0152      	lsls	r2, r2, #5
 800d69a:	4313      	orrs	r3, r2
 800d69c:	81a3      	strh	r3, [r4, #12]
 800d69e:	6560      	str	r0, [r4, #84]	@ 0x54
 800d6a0:	e7f8      	b.n	800d694 <__sseek+0x18>
 800d6a2:	46c0      	nop			@ (mov r8, r8)
 800d6a4:	ffffefff 	.word	0xffffefff

0800d6a8 <__sclose>:
 800d6a8:	b510      	push	{r4, lr}
 800d6aa:	230e      	movs	r3, #14
 800d6ac:	5ec9      	ldrsh	r1, [r1, r3]
 800d6ae:	f000 f845 	bl	800d73c <_close_r>
 800d6b2:	bd10      	pop	{r4, pc}

0800d6b4 <_vsniprintf_r>:
 800d6b4:	b530      	push	{r4, r5, lr}
 800d6b6:	0014      	movs	r4, r2
 800d6b8:	0005      	movs	r5, r0
 800d6ba:	001a      	movs	r2, r3
 800d6bc:	b09b      	sub	sp, #108	@ 0x6c
 800d6be:	2c00      	cmp	r4, #0
 800d6c0:	da05      	bge.n	800d6ce <_vsniprintf_r+0x1a>
 800d6c2:	238b      	movs	r3, #139	@ 0x8b
 800d6c4:	6003      	str	r3, [r0, #0]
 800d6c6:	2001      	movs	r0, #1
 800d6c8:	4240      	negs	r0, r0
 800d6ca:	b01b      	add	sp, #108	@ 0x6c
 800d6cc:	bd30      	pop	{r4, r5, pc}
 800d6ce:	2382      	movs	r3, #130	@ 0x82
 800d6d0:	4668      	mov	r0, sp
 800d6d2:	009b      	lsls	r3, r3, #2
 800d6d4:	8183      	strh	r3, [r0, #12]
 800d6d6:	2300      	movs	r3, #0
 800d6d8:	9100      	str	r1, [sp, #0]
 800d6da:	9104      	str	r1, [sp, #16]
 800d6dc:	429c      	cmp	r4, r3
 800d6de:	d000      	beq.n	800d6e2 <_vsniprintf_r+0x2e>
 800d6e0:	1e63      	subs	r3, r4, #1
 800d6e2:	9302      	str	r3, [sp, #8]
 800d6e4:	9305      	str	r3, [sp, #20]
 800d6e6:	2301      	movs	r3, #1
 800d6e8:	4669      	mov	r1, sp
 800d6ea:	425b      	negs	r3, r3
 800d6ec:	81cb      	strh	r3, [r1, #14]
 800d6ee:	0028      	movs	r0, r5
 800d6f0:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800d6f2:	f001 fc3f 	bl	800ef74 <_svfiprintf_r>
 800d6f6:	1c43      	adds	r3, r0, #1
 800d6f8:	da01      	bge.n	800d6fe <_vsniprintf_r+0x4a>
 800d6fa:	238b      	movs	r3, #139	@ 0x8b
 800d6fc:	602b      	str	r3, [r5, #0]
 800d6fe:	2c00      	cmp	r4, #0
 800d700:	d0e3      	beq.n	800d6ca <_vsniprintf_r+0x16>
 800d702:	2200      	movs	r2, #0
 800d704:	9b00      	ldr	r3, [sp, #0]
 800d706:	701a      	strb	r2, [r3, #0]
 800d708:	e7df      	b.n	800d6ca <_vsniprintf_r+0x16>
	...

0800d70c <vsniprintf>:
 800d70c:	b513      	push	{r0, r1, r4, lr}
 800d70e:	4c04      	ldr	r4, [pc, #16]	@ (800d720 <vsniprintf+0x14>)
 800d710:	9300      	str	r3, [sp, #0]
 800d712:	0013      	movs	r3, r2
 800d714:	000a      	movs	r2, r1
 800d716:	0001      	movs	r1, r0
 800d718:	6820      	ldr	r0, [r4, #0]
 800d71a:	f7ff ffcb 	bl	800d6b4 <_vsniprintf_r>
 800d71e:	bd16      	pop	{r1, r2, r4, pc}
 800d720:	20000054 	.word	0x20000054

0800d724 <memset>:
 800d724:	0003      	movs	r3, r0
 800d726:	1882      	adds	r2, r0, r2
 800d728:	4293      	cmp	r3, r2
 800d72a:	d100      	bne.n	800d72e <memset+0xa>
 800d72c:	4770      	bx	lr
 800d72e:	7019      	strb	r1, [r3, #0]
 800d730:	3301      	adds	r3, #1
 800d732:	e7f9      	b.n	800d728 <memset+0x4>

0800d734 <_localeconv_r>:
 800d734:	4800      	ldr	r0, [pc, #0]	@ (800d738 <_localeconv_r+0x4>)
 800d736:	4770      	bx	lr
 800d738:	20000194 	.word	0x20000194

0800d73c <_close_r>:
 800d73c:	2300      	movs	r3, #0
 800d73e:	b570      	push	{r4, r5, r6, lr}
 800d740:	4d06      	ldr	r5, [pc, #24]	@ (800d75c <_close_r+0x20>)
 800d742:	0004      	movs	r4, r0
 800d744:	0008      	movs	r0, r1
 800d746:	602b      	str	r3, [r5, #0]
 800d748:	f7f8 fa40 	bl	8005bcc <_close>
 800d74c:	1c43      	adds	r3, r0, #1
 800d74e:	d103      	bne.n	800d758 <_close_r+0x1c>
 800d750:	682b      	ldr	r3, [r5, #0]
 800d752:	2b00      	cmp	r3, #0
 800d754:	d000      	beq.n	800d758 <_close_r+0x1c>
 800d756:	6023      	str	r3, [r4, #0]
 800d758:	bd70      	pop	{r4, r5, r6, pc}
 800d75a:	46c0      	nop			@ (mov r8, r8)
 800d75c:	200018a8 	.word	0x200018a8

0800d760 <_lseek_r>:
 800d760:	b570      	push	{r4, r5, r6, lr}
 800d762:	0004      	movs	r4, r0
 800d764:	0008      	movs	r0, r1
 800d766:	0011      	movs	r1, r2
 800d768:	001a      	movs	r2, r3
 800d76a:	2300      	movs	r3, #0
 800d76c:	4d05      	ldr	r5, [pc, #20]	@ (800d784 <_lseek_r+0x24>)
 800d76e:	602b      	str	r3, [r5, #0]
 800d770:	f7f8 fa4d 	bl	8005c0e <_lseek>
 800d774:	1c43      	adds	r3, r0, #1
 800d776:	d103      	bne.n	800d780 <_lseek_r+0x20>
 800d778:	682b      	ldr	r3, [r5, #0]
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d000      	beq.n	800d780 <_lseek_r+0x20>
 800d77e:	6023      	str	r3, [r4, #0]
 800d780:	bd70      	pop	{r4, r5, r6, pc}
 800d782:	46c0      	nop			@ (mov r8, r8)
 800d784:	200018a8 	.word	0x200018a8

0800d788 <_read_r>:
 800d788:	b570      	push	{r4, r5, r6, lr}
 800d78a:	0004      	movs	r4, r0
 800d78c:	0008      	movs	r0, r1
 800d78e:	0011      	movs	r1, r2
 800d790:	001a      	movs	r2, r3
 800d792:	2300      	movs	r3, #0
 800d794:	4d05      	ldr	r5, [pc, #20]	@ (800d7ac <_read_r+0x24>)
 800d796:	602b      	str	r3, [r5, #0]
 800d798:	f7f8 f9fb 	bl	8005b92 <_read>
 800d79c:	1c43      	adds	r3, r0, #1
 800d79e:	d103      	bne.n	800d7a8 <_read_r+0x20>
 800d7a0:	682b      	ldr	r3, [r5, #0]
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d000      	beq.n	800d7a8 <_read_r+0x20>
 800d7a6:	6023      	str	r3, [r4, #0]
 800d7a8:	bd70      	pop	{r4, r5, r6, pc}
 800d7aa:	46c0      	nop			@ (mov r8, r8)
 800d7ac:	200018a8 	.word	0x200018a8

0800d7b0 <_write_r>:
 800d7b0:	b570      	push	{r4, r5, r6, lr}
 800d7b2:	0004      	movs	r4, r0
 800d7b4:	0008      	movs	r0, r1
 800d7b6:	0011      	movs	r1, r2
 800d7b8:	001a      	movs	r2, r3
 800d7ba:	2300      	movs	r3, #0
 800d7bc:	4d05      	ldr	r5, [pc, #20]	@ (800d7d4 <_write_r+0x24>)
 800d7be:	602b      	str	r3, [r5, #0]
 800d7c0:	f7f8 feaa 	bl	8006518 <_write>
 800d7c4:	1c43      	adds	r3, r0, #1
 800d7c6:	d103      	bne.n	800d7d0 <_write_r+0x20>
 800d7c8:	682b      	ldr	r3, [r5, #0]
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d000      	beq.n	800d7d0 <_write_r+0x20>
 800d7ce:	6023      	str	r3, [r4, #0]
 800d7d0:	bd70      	pop	{r4, r5, r6, pc}
 800d7d2:	46c0      	nop			@ (mov r8, r8)
 800d7d4:	200018a8 	.word	0x200018a8

0800d7d8 <__errno>:
 800d7d8:	4b01      	ldr	r3, [pc, #4]	@ (800d7e0 <__errno+0x8>)
 800d7da:	6818      	ldr	r0, [r3, #0]
 800d7dc:	4770      	bx	lr
 800d7de:	46c0      	nop			@ (mov r8, r8)
 800d7e0:	20000054 	.word	0x20000054

0800d7e4 <__libc_init_array>:
 800d7e4:	b570      	push	{r4, r5, r6, lr}
 800d7e6:	2600      	movs	r6, #0
 800d7e8:	4c0c      	ldr	r4, [pc, #48]	@ (800d81c <__libc_init_array+0x38>)
 800d7ea:	4d0d      	ldr	r5, [pc, #52]	@ (800d820 <__libc_init_array+0x3c>)
 800d7ec:	1b64      	subs	r4, r4, r5
 800d7ee:	10a4      	asrs	r4, r4, #2
 800d7f0:	42a6      	cmp	r6, r4
 800d7f2:	d109      	bne.n	800d808 <__libc_init_array+0x24>
 800d7f4:	2600      	movs	r6, #0
 800d7f6:	f002 fae1 	bl	800fdbc <_init>
 800d7fa:	4c0a      	ldr	r4, [pc, #40]	@ (800d824 <__libc_init_array+0x40>)
 800d7fc:	4d0a      	ldr	r5, [pc, #40]	@ (800d828 <__libc_init_array+0x44>)
 800d7fe:	1b64      	subs	r4, r4, r5
 800d800:	10a4      	asrs	r4, r4, #2
 800d802:	42a6      	cmp	r6, r4
 800d804:	d105      	bne.n	800d812 <__libc_init_array+0x2e>
 800d806:	bd70      	pop	{r4, r5, r6, pc}
 800d808:	00b3      	lsls	r3, r6, #2
 800d80a:	58eb      	ldr	r3, [r5, r3]
 800d80c:	4798      	blx	r3
 800d80e:	3601      	adds	r6, #1
 800d810:	e7ee      	b.n	800d7f0 <__libc_init_array+0xc>
 800d812:	00b3      	lsls	r3, r6, #2
 800d814:	58eb      	ldr	r3, [r5, r3]
 800d816:	4798      	blx	r3
 800d818:	3601      	adds	r6, #1
 800d81a:	e7f2      	b.n	800d802 <__libc_init_array+0x1e>
 800d81c:	08010978 	.word	0x08010978
 800d820:	08010978 	.word	0x08010978
 800d824:	0801097c 	.word	0x0801097c
 800d828:	08010978 	.word	0x08010978

0800d82c <__retarget_lock_init_recursive>:
 800d82c:	4770      	bx	lr

0800d82e <__retarget_lock_acquire_recursive>:
 800d82e:	4770      	bx	lr

0800d830 <__retarget_lock_release_recursive>:
 800d830:	4770      	bx	lr

0800d832 <memchr>:
 800d832:	b2c9      	uxtb	r1, r1
 800d834:	1882      	adds	r2, r0, r2
 800d836:	4290      	cmp	r0, r2
 800d838:	d101      	bne.n	800d83e <memchr+0xc>
 800d83a:	2000      	movs	r0, #0
 800d83c:	4770      	bx	lr
 800d83e:	7803      	ldrb	r3, [r0, #0]
 800d840:	428b      	cmp	r3, r1
 800d842:	d0fb      	beq.n	800d83c <memchr+0xa>
 800d844:	3001      	adds	r0, #1
 800d846:	e7f6      	b.n	800d836 <memchr+0x4>

0800d848 <memcpy>:
 800d848:	2300      	movs	r3, #0
 800d84a:	b510      	push	{r4, lr}
 800d84c:	429a      	cmp	r2, r3
 800d84e:	d100      	bne.n	800d852 <memcpy+0xa>
 800d850:	bd10      	pop	{r4, pc}
 800d852:	5ccc      	ldrb	r4, [r1, r3]
 800d854:	54c4      	strb	r4, [r0, r3]
 800d856:	3301      	adds	r3, #1
 800d858:	e7f8      	b.n	800d84c <memcpy+0x4>

0800d85a <quorem>:
 800d85a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d85c:	6902      	ldr	r2, [r0, #16]
 800d85e:	690f      	ldr	r7, [r1, #16]
 800d860:	b087      	sub	sp, #28
 800d862:	0006      	movs	r6, r0
 800d864:	000b      	movs	r3, r1
 800d866:	2000      	movs	r0, #0
 800d868:	9102      	str	r1, [sp, #8]
 800d86a:	42ba      	cmp	r2, r7
 800d86c:	db6d      	blt.n	800d94a <quorem+0xf0>
 800d86e:	3f01      	subs	r7, #1
 800d870:	00bc      	lsls	r4, r7, #2
 800d872:	3314      	adds	r3, #20
 800d874:	9305      	str	r3, [sp, #20]
 800d876:	191b      	adds	r3, r3, r4
 800d878:	9303      	str	r3, [sp, #12]
 800d87a:	0033      	movs	r3, r6
 800d87c:	3314      	adds	r3, #20
 800d87e:	191c      	adds	r4, r3, r4
 800d880:	9301      	str	r3, [sp, #4]
 800d882:	6823      	ldr	r3, [r4, #0]
 800d884:	9304      	str	r3, [sp, #16]
 800d886:	9b03      	ldr	r3, [sp, #12]
 800d888:	9804      	ldr	r0, [sp, #16]
 800d88a:	681d      	ldr	r5, [r3, #0]
 800d88c:	3501      	adds	r5, #1
 800d88e:	0029      	movs	r1, r5
 800d890:	f7f2 fc56 	bl	8000140 <__udivsi3>
 800d894:	9b04      	ldr	r3, [sp, #16]
 800d896:	9000      	str	r0, [sp, #0]
 800d898:	42ab      	cmp	r3, r5
 800d89a:	d32b      	bcc.n	800d8f4 <quorem+0x9a>
 800d89c:	9b05      	ldr	r3, [sp, #20]
 800d89e:	9d01      	ldr	r5, [sp, #4]
 800d8a0:	469c      	mov	ip, r3
 800d8a2:	2300      	movs	r3, #0
 800d8a4:	9305      	str	r3, [sp, #20]
 800d8a6:	9304      	str	r3, [sp, #16]
 800d8a8:	4662      	mov	r2, ip
 800d8aa:	ca08      	ldmia	r2!, {r3}
 800d8ac:	6828      	ldr	r0, [r5, #0]
 800d8ae:	4694      	mov	ip, r2
 800d8b0:	9a00      	ldr	r2, [sp, #0]
 800d8b2:	b299      	uxth	r1, r3
 800d8b4:	4351      	muls	r1, r2
 800d8b6:	9a05      	ldr	r2, [sp, #20]
 800d8b8:	0c1b      	lsrs	r3, r3, #16
 800d8ba:	1889      	adds	r1, r1, r2
 800d8bc:	9a00      	ldr	r2, [sp, #0]
 800d8be:	4353      	muls	r3, r2
 800d8c0:	0c0a      	lsrs	r2, r1, #16
 800d8c2:	189b      	adds	r3, r3, r2
 800d8c4:	0c1a      	lsrs	r2, r3, #16
 800d8c6:	b289      	uxth	r1, r1
 800d8c8:	9205      	str	r2, [sp, #20]
 800d8ca:	b282      	uxth	r2, r0
 800d8cc:	1a52      	subs	r2, r2, r1
 800d8ce:	9904      	ldr	r1, [sp, #16]
 800d8d0:	0c00      	lsrs	r0, r0, #16
 800d8d2:	1852      	adds	r2, r2, r1
 800d8d4:	b29b      	uxth	r3, r3
 800d8d6:	1411      	asrs	r1, r2, #16
 800d8d8:	1ac3      	subs	r3, r0, r3
 800d8da:	185b      	adds	r3, r3, r1
 800d8dc:	1419      	asrs	r1, r3, #16
 800d8de:	b292      	uxth	r2, r2
 800d8e0:	041b      	lsls	r3, r3, #16
 800d8e2:	431a      	orrs	r2, r3
 800d8e4:	9b03      	ldr	r3, [sp, #12]
 800d8e6:	9104      	str	r1, [sp, #16]
 800d8e8:	c504      	stmia	r5!, {r2}
 800d8ea:	4563      	cmp	r3, ip
 800d8ec:	d2dc      	bcs.n	800d8a8 <quorem+0x4e>
 800d8ee:	6823      	ldr	r3, [r4, #0]
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d030      	beq.n	800d956 <quorem+0xfc>
 800d8f4:	0030      	movs	r0, r6
 800d8f6:	9902      	ldr	r1, [sp, #8]
 800d8f8:	f001 f9c6 	bl	800ec88 <__mcmp>
 800d8fc:	2800      	cmp	r0, #0
 800d8fe:	db23      	blt.n	800d948 <quorem+0xee>
 800d900:	0034      	movs	r4, r6
 800d902:	2500      	movs	r5, #0
 800d904:	9902      	ldr	r1, [sp, #8]
 800d906:	3414      	adds	r4, #20
 800d908:	3114      	adds	r1, #20
 800d90a:	6823      	ldr	r3, [r4, #0]
 800d90c:	c901      	ldmia	r1!, {r0}
 800d90e:	9302      	str	r3, [sp, #8]
 800d910:	466b      	mov	r3, sp
 800d912:	891b      	ldrh	r3, [r3, #8]
 800d914:	b282      	uxth	r2, r0
 800d916:	1a9a      	subs	r2, r3, r2
 800d918:	9b02      	ldr	r3, [sp, #8]
 800d91a:	1952      	adds	r2, r2, r5
 800d91c:	0c00      	lsrs	r0, r0, #16
 800d91e:	0c1b      	lsrs	r3, r3, #16
 800d920:	1a1b      	subs	r3, r3, r0
 800d922:	1410      	asrs	r0, r2, #16
 800d924:	181b      	adds	r3, r3, r0
 800d926:	141d      	asrs	r5, r3, #16
 800d928:	b292      	uxth	r2, r2
 800d92a:	041b      	lsls	r3, r3, #16
 800d92c:	431a      	orrs	r2, r3
 800d92e:	9b03      	ldr	r3, [sp, #12]
 800d930:	c404      	stmia	r4!, {r2}
 800d932:	428b      	cmp	r3, r1
 800d934:	d2e9      	bcs.n	800d90a <quorem+0xb0>
 800d936:	9a01      	ldr	r2, [sp, #4]
 800d938:	00bb      	lsls	r3, r7, #2
 800d93a:	18d3      	adds	r3, r2, r3
 800d93c:	681a      	ldr	r2, [r3, #0]
 800d93e:	2a00      	cmp	r2, #0
 800d940:	d013      	beq.n	800d96a <quorem+0x110>
 800d942:	9b00      	ldr	r3, [sp, #0]
 800d944:	3301      	adds	r3, #1
 800d946:	9300      	str	r3, [sp, #0]
 800d948:	9800      	ldr	r0, [sp, #0]
 800d94a:	b007      	add	sp, #28
 800d94c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d94e:	6823      	ldr	r3, [r4, #0]
 800d950:	2b00      	cmp	r3, #0
 800d952:	d104      	bne.n	800d95e <quorem+0x104>
 800d954:	3f01      	subs	r7, #1
 800d956:	9b01      	ldr	r3, [sp, #4]
 800d958:	3c04      	subs	r4, #4
 800d95a:	42a3      	cmp	r3, r4
 800d95c:	d3f7      	bcc.n	800d94e <quorem+0xf4>
 800d95e:	6137      	str	r7, [r6, #16]
 800d960:	e7c8      	b.n	800d8f4 <quorem+0x9a>
 800d962:	681a      	ldr	r2, [r3, #0]
 800d964:	2a00      	cmp	r2, #0
 800d966:	d104      	bne.n	800d972 <quorem+0x118>
 800d968:	3f01      	subs	r7, #1
 800d96a:	9a01      	ldr	r2, [sp, #4]
 800d96c:	3b04      	subs	r3, #4
 800d96e:	429a      	cmp	r2, r3
 800d970:	d3f7      	bcc.n	800d962 <quorem+0x108>
 800d972:	6137      	str	r7, [r6, #16]
 800d974:	e7e5      	b.n	800d942 <quorem+0xe8>
	...

0800d978 <_dtoa_r>:
 800d978:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d97a:	0014      	movs	r4, r2
 800d97c:	001d      	movs	r5, r3
 800d97e:	69c6      	ldr	r6, [r0, #28]
 800d980:	b09d      	sub	sp, #116	@ 0x74
 800d982:	940a      	str	r4, [sp, #40]	@ 0x28
 800d984:	950b      	str	r5, [sp, #44]	@ 0x2c
 800d986:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 800d988:	9003      	str	r0, [sp, #12]
 800d98a:	2e00      	cmp	r6, #0
 800d98c:	d10f      	bne.n	800d9ae <_dtoa_r+0x36>
 800d98e:	2010      	movs	r0, #16
 800d990:	f000 fe30 	bl	800e5f4 <malloc>
 800d994:	9b03      	ldr	r3, [sp, #12]
 800d996:	1e02      	subs	r2, r0, #0
 800d998:	61d8      	str	r0, [r3, #28]
 800d99a:	d104      	bne.n	800d9a6 <_dtoa_r+0x2e>
 800d99c:	21ef      	movs	r1, #239	@ 0xef
 800d99e:	4bc7      	ldr	r3, [pc, #796]	@ (800dcbc <_dtoa_r+0x344>)
 800d9a0:	48c7      	ldr	r0, [pc, #796]	@ (800dcc0 <_dtoa_r+0x348>)
 800d9a2:	f001 fea1 	bl	800f6e8 <__assert_func>
 800d9a6:	6046      	str	r6, [r0, #4]
 800d9a8:	6086      	str	r6, [r0, #8]
 800d9aa:	6006      	str	r6, [r0, #0]
 800d9ac:	60c6      	str	r6, [r0, #12]
 800d9ae:	9b03      	ldr	r3, [sp, #12]
 800d9b0:	69db      	ldr	r3, [r3, #28]
 800d9b2:	6819      	ldr	r1, [r3, #0]
 800d9b4:	2900      	cmp	r1, #0
 800d9b6:	d00b      	beq.n	800d9d0 <_dtoa_r+0x58>
 800d9b8:	685a      	ldr	r2, [r3, #4]
 800d9ba:	2301      	movs	r3, #1
 800d9bc:	4093      	lsls	r3, r2
 800d9be:	604a      	str	r2, [r1, #4]
 800d9c0:	608b      	str	r3, [r1, #8]
 800d9c2:	9803      	ldr	r0, [sp, #12]
 800d9c4:	f000 ff16 	bl	800e7f4 <_Bfree>
 800d9c8:	2200      	movs	r2, #0
 800d9ca:	9b03      	ldr	r3, [sp, #12]
 800d9cc:	69db      	ldr	r3, [r3, #28]
 800d9ce:	601a      	str	r2, [r3, #0]
 800d9d0:	2d00      	cmp	r5, #0
 800d9d2:	da1e      	bge.n	800da12 <_dtoa_r+0x9a>
 800d9d4:	2301      	movs	r3, #1
 800d9d6:	603b      	str	r3, [r7, #0]
 800d9d8:	006b      	lsls	r3, r5, #1
 800d9da:	085b      	lsrs	r3, r3, #1
 800d9dc:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d9de:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800d9e0:	4bb8      	ldr	r3, [pc, #736]	@ (800dcc4 <_dtoa_r+0x34c>)
 800d9e2:	4ab8      	ldr	r2, [pc, #736]	@ (800dcc4 <_dtoa_r+0x34c>)
 800d9e4:	403b      	ands	r3, r7
 800d9e6:	4293      	cmp	r3, r2
 800d9e8:	d116      	bne.n	800da18 <_dtoa_r+0xa0>
 800d9ea:	4bb7      	ldr	r3, [pc, #732]	@ (800dcc8 <_dtoa_r+0x350>)
 800d9ec:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800d9ee:	6013      	str	r3, [r2, #0]
 800d9f0:	033b      	lsls	r3, r7, #12
 800d9f2:	0b1b      	lsrs	r3, r3, #12
 800d9f4:	4323      	orrs	r3, r4
 800d9f6:	d101      	bne.n	800d9fc <_dtoa_r+0x84>
 800d9f8:	f000 fd83 	bl	800e502 <_dtoa_r+0xb8a>
 800d9fc:	4bb3      	ldr	r3, [pc, #716]	@ (800dccc <_dtoa_r+0x354>)
 800d9fe:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800da00:	9308      	str	r3, [sp, #32]
 800da02:	2a00      	cmp	r2, #0
 800da04:	d002      	beq.n	800da0c <_dtoa_r+0x94>
 800da06:	4bb2      	ldr	r3, [pc, #712]	@ (800dcd0 <_dtoa_r+0x358>)
 800da08:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800da0a:	6013      	str	r3, [r2, #0]
 800da0c:	9808      	ldr	r0, [sp, #32]
 800da0e:	b01d      	add	sp, #116	@ 0x74
 800da10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800da12:	2300      	movs	r3, #0
 800da14:	603b      	str	r3, [r7, #0]
 800da16:	e7e2      	b.n	800d9de <_dtoa_r+0x66>
 800da18:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800da1a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800da1c:	9212      	str	r2, [sp, #72]	@ 0x48
 800da1e:	9313      	str	r3, [sp, #76]	@ 0x4c
 800da20:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800da22:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800da24:	2200      	movs	r2, #0
 800da26:	2300      	movs	r3, #0
 800da28:	f7f2 fd10 	bl	800044c <__aeabi_dcmpeq>
 800da2c:	1e06      	subs	r6, r0, #0
 800da2e:	d00b      	beq.n	800da48 <_dtoa_r+0xd0>
 800da30:	2301      	movs	r3, #1
 800da32:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800da34:	6013      	str	r3, [r2, #0]
 800da36:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800da38:	2b00      	cmp	r3, #0
 800da3a:	d002      	beq.n	800da42 <_dtoa_r+0xca>
 800da3c:	4ba5      	ldr	r3, [pc, #660]	@ (800dcd4 <_dtoa_r+0x35c>)
 800da3e:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800da40:	6013      	str	r3, [r2, #0]
 800da42:	4ba5      	ldr	r3, [pc, #660]	@ (800dcd8 <_dtoa_r+0x360>)
 800da44:	9308      	str	r3, [sp, #32]
 800da46:	e7e1      	b.n	800da0c <_dtoa_r+0x94>
 800da48:	ab1a      	add	r3, sp, #104	@ 0x68
 800da4a:	9301      	str	r3, [sp, #4]
 800da4c:	ab1b      	add	r3, sp, #108	@ 0x6c
 800da4e:	9300      	str	r3, [sp, #0]
 800da50:	9803      	ldr	r0, [sp, #12]
 800da52:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800da54:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800da56:	f001 f9cd 	bl	800edf4 <__d2b>
 800da5a:	007a      	lsls	r2, r7, #1
 800da5c:	9005      	str	r0, [sp, #20]
 800da5e:	0d52      	lsrs	r2, r2, #21
 800da60:	d100      	bne.n	800da64 <_dtoa_r+0xec>
 800da62:	e07b      	b.n	800db5c <_dtoa_r+0x1e4>
 800da64:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800da66:	9618      	str	r6, [sp, #96]	@ 0x60
 800da68:	0319      	lsls	r1, r3, #12
 800da6a:	4b9c      	ldr	r3, [pc, #624]	@ (800dcdc <_dtoa_r+0x364>)
 800da6c:	0b09      	lsrs	r1, r1, #12
 800da6e:	430b      	orrs	r3, r1
 800da70:	499b      	ldr	r1, [pc, #620]	@ (800dce0 <_dtoa_r+0x368>)
 800da72:	1857      	adds	r7, r2, r1
 800da74:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800da76:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800da78:	0019      	movs	r1, r3
 800da7a:	2200      	movs	r2, #0
 800da7c:	4b99      	ldr	r3, [pc, #612]	@ (800dce4 <_dtoa_r+0x36c>)
 800da7e:	f7f4 ffed 	bl	8002a5c <__aeabi_dsub>
 800da82:	4a99      	ldr	r2, [pc, #612]	@ (800dce8 <_dtoa_r+0x370>)
 800da84:	4b99      	ldr	r3, [pc, #612]	@ (800dcec <_dtoa_r+0x374>)
 800da86:	f7f4 fd21 	bl	80024cc <__aeabi_dmul>
 800da8a:	4a99      	ldr	r2, [pc, #612]	@ (800dcf0 <_dtoa_r+0x378>)
 800da8c:	4b99      	ldr	r3, [pc, #612]	@ (800dcf4 <_dtoa_r+0x37c>)
 800da8e:	f7f3 fd75 	bl	800157c <__aeabi_dadd>
 800da92:	0004      	movs	r4, r0
 800da94:	0038      	movs	r0, r7
 800da96:	000d      	movs	r5, r1
 800da98:	f7f5 fbda 	bl	8003250 <__aeabi_i2d>
 800da9c:	4a96      	ldr	r2, [pc, #600]	@ (800dcf8 <_dtoa_r+0x380>)
 800da9e:	4b97      	ldr	r3, [pc, #604]	@ (800dcfc <_dtoa_r+0x384>)
 800daa0:	f7f4 fd14 	bl	80024cc <__aeabi_dmul>
 800daa4:	0002      	movs	r2, r0
 800daa6:	000b      	movs	r3, r1
 800daa8:	0020      	movs	r0, r4
 800daaa:	0029      	movs	r1, r5
 800daac:	f7f3 fd66 	bl	800157c <__aeabi_dadd>
 800dab0:	0004      	movs	r4, r0
 800dab2:	000d      	movs	r5, r1
 800dab4:	f7f5 fb90 	bl	80031d8 <__aeabi_d2iz>
 800dab8:	2200      	movs	r2, #0
 800daba:	9004      	str	r0, [sp, #16]
 800dabc:	2300      	movs	r3, #0
 800dabe:	0020      	movs	r0, r4
 800dac0:	0029      	movs	r1, r5
 800dac2:	f7f2 fcc9 	bl	8000458 <__aeabi_dcmplt>
 800dac6:	2800      	cmp	r0, #0
 800dac8:	d00b      	beq.n	800dae2 <_dtoa_r+0x16a>
 800daca:	9804      	ldr	r0, [sp, #16]
 800dacc:	f7f5 fbc0 	bl	8003250 <__aeabi_i2d>
 800dad0:	002b      	movs	r3, r5
 800dad2:	0022      	movs	r2, r4
 800dad4:	f7f2 fcba 	bl	800044c <__aeabi_dcmpeq>
 800dad8:	4243      	negs	r3, r0
 800dada:	4158      	adcs	r0, r3
 800dadc:	9b04      	ldr	r3, [sp, #16]
 800dade:	1a1b      	subs	r3, r3, r0
 800dae0:	9304      	str	r3, [sp, #16]
 800dae2:	2301      	movs	r3, #1
 800dae4:	9315      	str	r3, [sp, #84]	@ 0x54
 800dae6:	9b04      	ldr	r3, [sp, #16]
 800dae8:	2b16      	cmp	r3, #22
 800daea:	d810      	bhi.n	800db0e <_dtoa_r+0x196>
 800daec:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800daee:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800daf0:	9a04      	ldr	r2, [sp, #16]
 800daf2:	4b83      	ldr	r3, [pc, #524]	@ (800dd00 <_dtoa_r+0x388>)
 800daf4:	00d2      	lsls	r2, r2, #3
 800daf6:	189b      	adds	r3, r3, r2
 800daf8:	681a      	ldr	r2, [r3, #0]
 800dafa:	685b      	ldr	r3, [r3, #4]
 800dafc:	f7f2 fcac 	bl	8000458 <__aeabi_dcmplt>
 800db00:	2800      	cmp	r0, #0
 800db02:	d047      	beq.n	800db94 <_dtoa_r+0x21c>
 800db04:	9b04      	ldr	r3, [sp, #16]
 800db06:	3b01      	subs	r3, #1
 800db08:	9304      	str	r3, [sp, #16]
 800db0a:	2300      	movs	r3, #0
 800db0c:	9315      	str	r3, [sp, #84]	@ 0x54
 800db0e:	2200      	movs	r2, #0
 800db10:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800db12:	9206      	str	r2, [sp, #24]
 800db14:	1bdb      	subs	r3, r3, r7
 800db16:	1e5a      	subs	r2, r3, #1
 800db18:	d53e      	bpl.n	800db98 <_dtoa_r+0x220>
 800db1a:	2201      	movs	r2, #1
 800db1c:	1ad3      	subs	r3, r2, r3
 800db1e:	9306      	str	r3, [sp, #24]
 800db20:	2300      	movs	r3, #0
 800db22:	930d      	str	r3, [sp, #52]	@ 0x34
 800db24:	9b04      	ldr	r3, [sp, #16]
 800db26:	2b00      	cmp	r3, #0
 800db28:	db38      	blt.n	800db9c <_dtoa_r+0x224>
 800db2a:	9a04      	ldr	r2, [sp, #16]
 800db2c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800db2e:	4694      	mov	ip, r2
 800db30:	4463      	add	r3, ip
 800db32:	930d      	str	r3, [sp, #52]	@ 0x34
 800db34:	2300      	movs	r3, #0
 800db36:	9214      	str	r2, [sp, #80]	@ 0x50
 800db38:	930f      	str	r3, [sp, #60]	@ 0x3c
 800db3a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800db3c:	2401      	movs	r4, #1
 800db3e:	2b09      	cmp	r3, #9
 800db40:	d867      	bhi.n	800dc12 <_dtoa_r+0x29a>
 800db42:	2b05      	cmp	r3, #5
 800db44:	dd02      	ble.n	800db4c <_dtoa_r+0x1d4>
 800db46:	2400      	movs	r4, #0
 800db48:	3b04      	subs	r3, #4
 800db4a:	9322      	str	r3, [sp, #136]	@ 0x88
 800db4c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800db4e:	1e98      	subs	r0, r3, #2
 800db50:	2803      	cmp	r0, #3
 800db52:	d867      	bhi.n	800dc24 <_dtoa_r+0x2ac>
 800db54:	f7f2 fae0 	bl	8000118 <__gnu_thumb1_case_uqi>
 800db58:	5b383a2b 	.word	0x5b383a2b
 800db5c:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800db5e:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 800db60:	18f6      	adds	r6, r6, r3
 800db62:	4b68      	ldr	r3, [pc, #416]	@ (800dd04 <_dtoa_r+0x38c>)
 800db64:	18f2      	adds	r2, r6, r3
 800db66:	2a20      	cmp	r2, #32
 800db68:	dd0f      	ble.n	800db8a <_dtoa_r+0x212>
 800db6a:	2340      	movs	r3, #64	@ 0x40
 800db6c:	1a9b      	subs	r3, r3, r2
 800db6e:	409f      	lsls	r7, r3
 800db70:	4b65      	ldr	r3, [pc, #404]	@ (800dd08 <_dtoa_r+0x390>)
 800db72:	0038      	movs	r0, r7
 800db74:	18f3      	adds	r3, r6, r3
 800db76:	40dc      	lsrs	r4, r3
 800db78:	4320      	orrs	r0, r4
 800db7a:	f7f5 fb97 	bl	80032ac <__aeabi_ui2d>
 800db7e:	2201      	movs	r2, #1
 800db80:	4b62      	ldr	r3, [pc, #392]	@ (800dd0c <_dtoa_r+0x394>)
 800db82:	1e77      	subs	r7, r6, #1
 800db84:	18cb      	adds	r3, r1, r3
 800db86:	9218      	str	r2, [sp, #96]	@ 0x60
 800db88:	e776      	b.n	800da78 <_dtoa_r+0x100>
 800db8a:	2320      	movs	r3, #32
 800db8c:	0020      	movs	r0, r4
 800db8e:	1a9b      	subs	r3, r3, r2
 800db90:	4098      	lsls	r0, r3
 800db92:	e7f2      	b.n	800db7a <_dtoa_r+0x202>
 800db94:	9015      	str	r0, [sp, #84]	@ 0x54
 800db96:	e7ba      	b.n	800db0e <_dtoa_r+0x196>
 800db98:	920d      	str	r2, [sp, #52]	@ 0x34
 800db9a:	e7c3      	b.n	800db24 <_dtoa_r+0x1ac>
 800db9c:	9b06      	ldr	r3, [sp, #24]
 800db9e:	9a04      	ldr	r2, [sp, #16]
 800dba0:	1a9b      	subs	r3, r3, r2
 800dba2:	9306      	str	r3, [sp, #24]
 800dba4:	4253      	negs	r3, r2
 800dba6:	930f      	str	r3, [sp, #60]	@ 0x3c
 800dba8:	2300      	movs	r3, #0
 800dbaa:	9314      	str	r3, [sp, #80]	@ 0x50
 800dbac:	e7c5      	b.n	800db3a <_dtoa_r+0x1c2>
 800dbae:	2300      	movs	r3, #0
 800dbb0:	9310      	str	r3, [sp, #64]	@ 0x40
 800dbb2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800dbb4:	930e      	str	r3, [sp, #56]	@ 0x38
 800dbb6:	9309      	str	r3, [sp, #36]	@ 0x24
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	dc13      	bgt.n	800dbe4 <_dtoa_r+0x26c>
 800dbbc:	2301      	movs	r3, #1
 800dbbe:	001a      	movs	r2, r3
 800dbc0:	930e      	str	r3, [sp, #56]	@ 0x38
 800dbc2:	9309      	str	r3, [sp, #36]	@ 0x24
 800dbc4:	9223      	str	r2, [sp, #140]	@ 0x8c
 800dbc6:	e00d      	b.n	800dbe4 <_dtoa_r+0x26c>
 800dbc8:	2301      	movs	r3, #1
 800dbca:	e7f1      	b.n	800dbb0 <_dtoa_r+0x238>
 800dbcc:	2300      	movs	r3, #0
 800dbce:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800dbd0:	9310      	str	r3, [sp, #64]	@ 0x40
 800dbd2:	4694      	mov	ip, r2
 800dbd4:	9b04      	ldr	r3, [sp, #16]
 800dbd6:	4463      	add	r3, ip
 800dbd8:	930e      	str	r3, [sp, #56]	@ 0x38
 800dbda:	3301      	adds	r3, #1
 800dbdc:	9309      	str	r3, [sp, #36]	@ 0x24
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	dc00      	bgt.n	800dbe4 <_dtoa_r+0x26c>
 800dbe2:	2301      	movs	r3, #1
 800dbe4:	9a03      	ldr	r2, [sp, #12]
 800dbe6:	2100      	movs	r1, #0
 800dbe8:	69d0      	ldr	r0, [r2, #28]
 800dbea:	2204      	movs	r2, #4
 800dbec:	0015      	movs	r5, r2
 800dbee:	3514      	adds	r5, #20
 800dbf0:	429d      	cmp	r5, r3
 800dbf2:	d91b      	bls.n	800dc2c <_dtoa_r+0x2b4>
 800dbf4:	6041      	str	r1, [r0, #4]
 800dbf6:	9803      	ldr	r0, [sp, #12]
 800dbf8:	f000 fdb8 	bl	800e76c <_Balloc>
 800dbfc:	9008      	str	r0, [sp, #32]
 800dbfe:	2800      	cmp	r0, #0
 800dc00:	d117      	bne.n	800dc32 <_dtoa_r+0x2ba>
 800dc02:	21b0      	movs	r1, #176	@ 0xb0
 800dc04:	4b42      	ldr	r3, [pc, #264]	@ (800dd10 <_dtoa_r+0x398>)
 800dc06:	482e      	ldr	r0, [pc, #184]	@ (800dcc0 <_dtoa_r+0x348>)
 800dc08:	9a08      	ldr	r2, [sp, #32]
 800dc0a:	31ff      	adds	r1, #255	@ 0xff
 800dc0c:	e6c9      	b.n	800d9a2 <_dtoa_r+0x2a>
 800dc0e:	2301      	movs	r3, #1
 800dc10:	e7dd      	b.n	800dbce <_dtoa_r+0x256>
 800dc12:	2300      	movs	r3, #0
 800dc14:	9410      	str	r4, [sp, #64]	@ 0x40
 800dc16:	9322      	str	r3, [sp, #136]	@ 0x88
 800dc18:	3b01      	subs	r3, #1
 800dc1a:	930e      	str	r3, [sp, #56]	@ 0x38
 800dc1c:	9309      	str	r3, [sp, #36]	@ 0x24
 800dc1e:	2200      	movs	r2, #0
 800dc20:	3313      	adds	r3, #19
 800dc22:	e7cf      	b.n	800dbc4 <_dtoa_r+0x24c>
 800dc24:	2301      	movs	r3, #1
 800dc26:	9310      	str	r3, [sp, #64]	@ 0x40
 800dc28:	3b02      	subs	r3, #2
 800dc2a:	e7f6      	b.n	800dc1a <_dtoa_r+0x2a2>
 800dc2c:	3101      	adds	r1, #1
 800dc2e:	0052      	lsls	r2, r2, #1
 800dc30:	e7dc      	b.n	800dbec <_dtoa_r+0x274>
 800dc32:	9b03      	ldr	r3, [sp, #12]
 800dc34:	9a08      	ldr	r2, [sp, #32]
 800dc36:	69db      	ldr	r3, [r3, #28]
 800dc38:	601a      	str	r2, [r3, #0]
 800dc3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dc3c:	2b0e      	cmp	r3, #14
 800dc3e:	d900      	bls.n	800dc42 <_dtoa_r+0x2ca>
 800dc40:	e0d9      	b.n	800ddf6 <_dtoa_r+0x47e>
 800dc42:	2c00      	cmp	r4, #0
 800dc44:	d100      	bne.n	800dc48 <_dtoa_r+0x2d0>
 800dc46:	e0d6      	b.n	800ddf6 <_dtoa_r+0x47e>
 800dc48:	9b04      	ldr	r3, [sp, #16]
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	dd64      	ble.n	800dd18 <_dtoa_r+0x3a0>
 800dc4e:	210f      	movs	r1, #15
 800dc50:	9a04      	ldr	r2, [sp, #16]
 800dc52:	4b2b      	ldr	r3, [pc, #172]	@ (800dd00 <_dtoa_r+0x388>)
 800dc54:	400a      	ands	r2, r1
 800dc56:	00d2      	lsls	r2, r2, #3
 800dc58:	189b      	adds	r3, r3, r2
 800dc5a:	681e      	ldr	r6, [r3, #0]
 800dc5c:	685f      	ldr	r7, [r3, #4]
 800dc5e:	9b04      	ldr	r3, [sp, #16]
 800dc60:	2402      	movs	r4, #2
 800dc62:	111d      	asrs	r5, r3, #4
 800dc64:	05db      	lsls	r3, r3, #23
 800dc66:	d50a      	bpl.n	800dc7e <_dtoa_r+0x306>
 800dc68:	4b2a      	ldr	r3, [pc, #168]	@ (800dd14 <_dtoa_r+0x39c>)
 800dc6a:	400d      	ands	r5, r1
 800dc6c:	6a1a      	ldr	r2, [r3, #32]
 800dc6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dc70:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800dc72:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800dc74:	f7f3 ffe6 	bl	8001c44 <__aeabi_ddiv>
 800dc78:	900a      	str	r0, [sp, #40]	@ 0x28
 800dc7a:	910b      	str	r1, [sp, #44]	@ 0x2c
 800dc7c:	3401      	adds	r4, #1
 800dc7e:	4b25      	ldr	r3, [pc, #148]	@ (800dd14 <_dtoa_r+0x39c>)
 800dc80:	930c      	str	r3, [sp, #48]	@ 0x30
 800dc82:	2d00      	cmp	r5, #0
 800dc84:	d108      	bne.n	800dc98 <_dtoa_r+0x320>
 800dc86:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800dc88:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800dc8a:	0032      	movs	r2, r6
 800dc8c:	003b      	movs	r3, r7
 800dc8e:	f7f3 ffd9 	bl	8001c44 <__aeabi_ddiv>
 800dc92:	900a      	str	r0, [sp, #40]	@ 0x28
 800dc94:	910b      	str	r1, [sp, #44]	@ 0x2c
 800dc96:	e05a      	b.n	800dd4e <_dtoa_r+0x3d6>
 800dc98:	2301      	movs	r3, #1
 800dc9a:	421d      	tst	r5, r3
 800dc9c:	d009      	beq.n	800dcb2 <_dtoa_r+0x33a>
 800dc9e:	18e4      	adds	r4, r4, r3
 800dca0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800dca2:	0030      	movs	r0, r6
 800dca4:	681a      	ldr	r2, [r3, #0]
 800dca6:	685b      	ldr	r3, [r3, #4]
 800dca8:	0039      	movs	r1, r7
 800dcaa:	f7f4 fc0f 	bl	80024cc <__aeabi_dmul>
 800dcae:	0006      	movs	r6, r0
 800dcb0:	000f      	movs	r7, r1
 800dcb2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800dcb4:	106d      	asrs	r5, r5, #1
 800dcb6:	3308      	adds	r3, #8
 800dcb8:	e7e2      	b.n	800dc80 <_dtoa_r+0x308>
 800dcba:	46c0      	nop			@ (mov r8, r8)
 800dcbc:	08010625 	.word	0x08010625
 800dcc0:	0801063c 	.word	0x0801063c
 800dcc4:	7ff00000 	.word	0x7ff00000
 800dcc8:	0000270f 	.word	0x0000270f
 800dccc:	08010621 	.word	0x08010621
 800dcd0:	08010624 	.word	0x08010624
 800dcd4:	080105f5 	.word	0x080105f5
 800dcd8:	080105f4 	.word	0x080105f4
 800dcdc:	3ff00000 	.word	0x3ff00000
 800dce0:	fffffc01 	.word	0xfffffc01
 800dce4:	3ff80000 	.word	0x3ff80000
 800dce8:	636f4361 	.word	0x636f4361
 800dcec:	3fd287a7 	.word	0x3fd287a7
 800dcf0:	8b60c8b3 	.word	0x8b60c8b3
 800dcf4:	3fc68a28 	.word	0x3fc68a28
 800dcf8:	509f79fb 	.word	0x509f79fb
 800dcfc:	3fd34413 	.word	0x3fd34413
 800dd00:	08010738 	.word	0x08010738
 800dd04:	00000432 	.word	0x00000432
 800dd08:	00000412 	.word	0x00000412
 800dd0c:	fe100000 	.word	0xfe100000
 800dd10:	08010694 	.word	0x08010694
 800dd14:	08010710 	.word	0x08010710
 800dd18:	9b04      	ldr	r3, [sp, #16]
 800dd1a:	2402      	movs	r4, #2
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d016      	beq.n	800dd4e <_dtoa_r+0x3d6>
 800dd20:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800dd22:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800dd24:	220f      	movs	r2, #15
 800dd26:	425d      	negs	r5, r3
 800dd28:	402a      	ands	r2, r5
 800dd2a:	4bd7      	ldr	r3, [pc, #860]	@ (800e088 <_dtoa_r+0x710>)
 800dd2c:	00d2      	lsls	r2, r2, #3
 800dd2e:	189b      	adds	r3, r3, r2
 800dd30:	681a      	ldr	r2, [r3, #0]
 800dd32:	685b      	ldr	r3, [r3, #4]
 800dd34:	f7f4 fbca 	bl	80024cc <__aeabi_dmul>
 800dd38:	2701      	movs	r7, #1
 800dd3a:	2300      	movs	r3, #0
 800dd3c:	900a      	str	r0, [sp, #40]	@ 0x28
 800dd3e:	910b      	str	r1, [sp, #44]	@ 0x2c
 800dd40:	4ed2      	ldr	r6, [pc, #840]	@ (800e08c <_dtoa_r+0x714>)
 800dd42:	112d      	asrs	r5, r5, #4
 800dd44:	2d00      	cmp	r5, #0
 800dd46:	d000      	beq.n	800dd4a <_dtoa_r+0x3d2>
 800dd48:	e0ba      	b.n	800dec0 <_dtoa_r+0x548>
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d1a1      	bne.n	800dc92 <_dtoa_r+0x31a>
 800dd4e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800dd50:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800dd52:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d100      	bne.n	800dd5a <_dtoa_r+0x3e2>
 800dd58:	e0bd      	b.n	800ded6 <_dtoa_r+0x55e>
 800dd5a:	2200      	movs	r2, #0
 800dd5c:	0030      	movs	r0, r6
 800dd5e:	0039      	movs	r1, r7
 800dd60:	4bcb      	ldr	r3, [pc, #812]	@ (800e090 <_dtoa_r+0x718>)
 800dd62:	f7f2 fb79 	bl	8000458 <__aeabi_dcmplt>
 800dd66:	2800      	cmp	r0, #0
 800dd68:	d100      	bne.n	800dd6c <_dtoa_r+0x3f4>
 800dd6a:	e0b4      	b.n	800ded6 <_dtoa_r+0x55e>
 800dd6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	d100      	bne.n	800dd74 <_dtoa_r+0x3fc>
 800dd72:	e0b0      	b.n	800ded6 <_dtoa_r+0x55e>
 800dd74:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	dd39      	ble.n	800ddee <_dtoa_r+0x476>
 800dd7a:	9b04      	ldr	r3, [sp, #16]
 800dd7c:	2200      	movs	r2, #0
 800dd7e:	3b01      	subs	r3, #1
 800dd80:	930c      	str	r3, [sp, #48]	@ 0x30
 800dd82:	0030      	movs	r0, r6
 800dd84:	4bc3      	ldr	r3, [pc, #780]	@ (800e094 <_dtoa_r+0x71c>)
 800dd86:	0039      	movs	r1, r7
 800dd88:	f7f4 fba0 	bl	80024cc <__aeabi_dmul>
 800dd8c:	900a      	str	r0, [sp, #40]	@ 0x28
 800dd8e:	910b      	str	r1, [sp, #44]	@ 0x2c
 800dd90:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dd92:	3401      	adds	r4, #1
 800dd94:	0020      	movs	r0, r4
 800dd96:	9311      	str	r3, [sp, #68]	@ 0x44
 800dd98:	f7f5 fa5a 	bl	8003250 <__aeabi_i2d>
 800dd9c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800dd9e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dda0:	f7f4 fb94 	bl	80024cc <__aeabi_dmul>
 800dda4:	4bbc      	ldr	r3, [pc, #752]	@ (800e098 <_dtoa_r+0x720>)
 800dda6:	2200      	movs	r2, #0
 800dda8:	f7f3 fbe8 	bl	800157c <__aeabi_dadd>
 800ddac:	4bbb      	ldr	r3, [pc, #748]	@ (800e09c <_dtoa_r+0x724>)
 800ddae:	0006      	movs	r6, r0
 800ddb0:	18cf      	adds	r7, r1, r3
 800ddb2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	d000      	beq.n	800ddba <_dtoa_r+0x442>
 800ddb8:	e091      	b.n	800dede <_dtoa_r+0x566>
 800ddba:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ddbc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ddbe:	2200      	movs	r2, #0
 800ddc0:	4bb7      	ldr	r3, [pc, #732]	@ (800e0a0 <_dtoa_r+0x728>)
 800ddc2:	f7f4 fe4b 	bl	8002a5c <__aeabi_dsub>
 800ddc6:	0032      	movs	r2, r6
 800ddc8:	003b      	movs	r3, r7
 800ddca:	0004      	movs	r4, r0
 800ddcc:	000d      	movs	r5, r1
 800ddce:	f7f2 fb57 	bl	8000480 <__aeabi_dcmpgt>
 800ddd2:	2800      	cmp	r0, #0
 800ddd4:	d000      	beq.n	800ddd8 <_dtoa_r+0x460>
 800ddd6:	e29d      	b.n	800e314 <_dtoa_r+0x99c>
 800ddd8:	2180      	movs	r1, #128	@ 0x80
 800ddda:	0609      	lsls	r1, r1, #24
 800dddc:	187b      	adds	r3, r7, r1
 800ddde:	0032      	movs	r2, r6
 800dde0:	0020      	movs	r0, r4
 800dde2:	0029      	movs	r1, r5
 800dde4:	f7f2 fb38 	bl	8000458 <__aeabi_dcmplt>
 800dde8:	2800      	cmp	r0, #0
 800ddea:	d000      	beq.n	800ddee <_dtoa_r+0x476>
 800ddec:	e130      	b.n	800e050 <_dtoa_r+0x6d8>
 800ddee:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ddf0:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 800ddf2:	930a      	str	r3, [sp, #40]	@ 0x28
 800ddf4:	940b      	str	r4, [sp, #44]	@ 0x2c
 800ddf6:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	da00      	bge.n	800ddfe <_dtoa_r+0x486>
 800ddfc:	e177      	b.n	800e0ee <_dtoa_r+0x776>
 800ddfe:	9a04      	ldr	r2, [sp, #16]
 800de00:	2a0e      	cmp	r2, #14
 800de02:	dd00      	ble.n	800de06 <_dtoa_r+0x48e>
 800de04:	e173      	b.n	800e0ee <_dtoa_r+0x776>
 800de06:	4ba0      	ldr	r3, [pc, #640]	@ (800e088 <_dtoa_r+0x710>)
 800de08:	00d2      	lsls	r2, r2, #3
 800de0a:	189b      	adds	r3, r3, r2
 800de0c:	685c      	ldr	r4, [r3, #4]
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	9306      	str	r3, [sp, #24]
 800de12:	9407      	str	r4, [sp, #28]
 800de14:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800de16:	2b00      	cmp	r3, #0
 800de18:	da03      	bge.n	800de22 <_dtoa_r+0x4aa>
 800de1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	dc00      	bgt.n	800de22 <_dtoa_r+0x4aa>
 800de20:	e106      	b.n	800e030 <_dtoa_r+0x6b8>
 800de22:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800de24:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800de26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800de28:	9d08      	ldr	r5, [sp, #32]
 800de2a:	3b01      	subs	r3, #1
 800de2c:	195b      	adds	r3, r3, r5
 800de2e:	930a      	str	r3, [sp, #40]	@ 0x28
 800de30:	9a06      	ldr	r2, [sp, #24]
 800de32:	9b07      	ldr	r3, [sp, #28]
 800de34:	0030      	movs	r0, r6
 800de36:	0039      	movs	r1, r7
 800de38:	f7f3 ff04 	bl	8001c44 <__aeabi_ddiv>
 800de3c:	f7f5 f9cc 	bl	80031d8 <__aeabi_d2iz>
 800de40:	9009      	str	r0, [sp, #36]	@ 0x24
 800de42:	f7f5 fa05 	bl	8003250 <__aeabi_i2d>
 800de46:	9a06      	ldr	r2, [sp, #24]
 800de48:	9b07      	ldr	r3, [sp, #28]
 800de4a:	f7f4 fb3f 	bl	80024cc <__aeabi_dmul>
 800de4e:	0002      	movs	r2, r0
 800de50:	000b      	movs	r3, r1
 800de52:	0030      	movs	r0, r6
 800de54:	0039      	movs	r1, r7
 800de56:	f7f4 fe01 	bl	8002a5c <__aeabi_dsub>
 800de5a:	002b      	movs	r3, r5
 800de5c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800de5e:	3501      	adds	r5, #1
 800de60:	3230      	adds	r2, #48	@ 0x30
 800de62:	701a      	strb	r2, [r3, #0]
 800de64:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800de66:	002c      	movs	r4, r5
 800de68:	429a      	cmp	r2, r3
 800de6a:	d000      	beq.n	800de6e <_dtoa_r+0x4f6>
 800de6c:	e131      	b.n	800e0d2 <_dtoa_r+0x75a>
 800de6e:	0002      	movs	r2, r0
 800de70:	000b      	movs	r3, r1
 800de72:	f7f3 fb83 	bl	800157c <__aeabi_dadd>
 800de76:	9a06      	ldr	r2, [sp, #24]
 800de78:	9b07      	ldr	r3, [sp, #28]
 800de7a:	0006      	movs	r6, r0
 800de7c:	000f      	movs	r7, r1
 800de7e:	f7f2 faff 	bl	8000480 <__aeabi_dcmpgt>
 800de82:	2800      	cmp	r0, #0
 800de84:	d000      	beq.n	800de88 <_dtoa_r+0x510>
 800de86:	e10f      	b.n	800e0a8 <_dtoa_r+0x730>
 800de88:	9a06      	ldr	r2, [sp, #24]
 800de8a:	9b07      	ldr	r3, [sp, #28]
 800de8c:	0030      	movs	r0, r6
 800de8e:	0039      	movs	r1, r7
 800de90:	f7f2 fadc 	bl	800044c <__aeabi_dcmpeq>
 800de94:	2800      	cmp	r0, #0
 800de96:	d003      	beq.n	800dea0 <_dtoa_r+0x528>
 800de98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800de9a:	07dd      	lsls	r5, r3, #31
 800de9c:	d500      	bpl.n	800dea0 <_dtoa_r+0x528>
 800de9e:	e103      	b.n	800e0a8 <_dtoa_r+0x730>
 800dea0:	9905      	ldr	r1, [sp, #20]
 800dea2:	9803      	ldr	r0, [sp, #12]
 800dea4:	f000 fca6 	bl	800e7f4 <_Bfree>
 800dea8:	2300      	movs	r3, #0
 800deaa:	7023      	strb	r3, [r4, #0]
 800deac:	9b04      	ldr	r3, [sp, #16]
 800deae:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800deb0:	3301      	adds	r3, #1
 800deb2:	6013      	str	r3, [r2, #0]
 800deb4:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d100      	bne.n	800debc <_dtoa_r+0x544>
 800deba:	e5a7      	b.n	800da0c <_dtoa_r+0x94>
 800debc:	601c      	str	r4, [r3, #0]
 800debe:	e5a5      	b.n	800da0c <_dtoa_r+0x94>
 800dec0:	423d      	tst	r5, r7
 800dec2:	d005      	beq.n	800ded0 <_dtoa_r+0x558>
 800dec4:	6832      	ldr	r2, [r6, #0]
 800dec6:	6873      	ldr	r3, [r6, #4]
 800dec8:	f7f4 fb00 	bl	80024cc <__aeabi_dmul>
 800decc:	003b      	movs	r3, r7
 800dece:	3401      	adds	r4, #1
 800ded0:	106d      	asrs	r5, r5, #1
 800ded2:	3608      	adds	r6, #8
 800ded4:	e736      	b.n	800dd44 <_dtoa_r+0x3cc>
 800ded6:	9b04      	ldr	r3, [sp, #16]
 800ded8:	930c      	str	r3, [sp, #48]	@ 0x30
 800deda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dedc:	e75a      	b.n	800dd94 <_dtoa_r+0x41c>
 800dede:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800dee0:	4b69      	ldr	r3, [pc, #420]	@ (800e088 <_dtoa_r+0x710>)
 800dee2:	3a01      	subs	r2, #1
 800dee4:	00d2      	lsls	r2, r2, #3
 800dee6:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800dee8:	189b      	adds	r3, r3, r2
 800deea:	681a      	ldr	r2, [r3, #0]
 800deec:	685b      	ldr	r3, [r3, #4]
 800deee:	2900      	cmp	r1, #0
 800def0:	d04c      	beq.n	800df8c <_dtoa_r+0x614>
 800def2:	2000      	movs	r0, #0
 800def4:	496b      	ldr	r1, [pc, #428]	@ (800e0a4 <_dtoa_r+0x72c>)
 800def6:	f7f3 fea5 	bl	8001c44 <__aeabi_ddiv>
 800defa:	0032      	movs	r2, r6
 800defc:	003b      	movs	r3, r7
 800defe:	f7f4 fdad 	bl	8002a5c <__aeabi_dsub>
 800df02:	9a08      	ldr	r2, [sp, #32]
 800df04:	0006      	movs	r6, r0
 800df06:	4694      	mov	ip, r2
 800df08:	000f      	movs	r7, r1
 800df0a:	9b08      	ldr	r3, [sp, #32]
 800df0c:	9316      	str	r3, [sp, #88]	@ 0x58
 800df0e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800df10:	4463      	add	r3, ip
 800df12:	9311      	str	r3, [sp, #68]	@ 0x44
 800df14:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800df16:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800df18:	f7f5 f95e 	bl	80031d8 <__aeabi_d2iz>
 800df1c:	0005      	movs	r5, r0
 800df1e:	f7f5 f997 	bl	8003250 <__aeabi_i2d>
 800df22:	0002      	movs	r2, r0
 800df24:	000b      	movs	r3, r1
 800df26:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800df28:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800df2a:	f7f4 fd97 	bl	8002a5c <__aeabi_dsub>
 800df2e:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800df30:	3530      	adds	r5, #48	@ 0x30
 800df32:	1c5c      	adds	r4, r3, #1
 800df34:	701d      	strb	r5, [r3, #0]
 800df36:	0032      	movs	r2, r6
 800df38:	003b      	movs	r3, r7
 800df3a:	900a      	str	r0, [sp, #40]	@ 0x28
 800df3c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800df3e:	f7f2 fa8b 	bl	8000458 <__aeabi_dcmplt>
 800df42:	2800      	cmp	r0, #0
 800df44:	d16a      	bne.n	800e01c <_dtoa_r+0x6a4>
 800df46:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800df48:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800df4a:	2000      	movs	r0, #0
 800df4c:	4950      	ldr	r1, [pc, #320]	@ (800e090 <_dtoa_r+0x718>)
 800df4e:	f7f4 fd85 	bl	8002a5c <__aeabi_dsub>
 800df52:	0032      	movs	r2, r6
 800df54:	003b      	movs	r3, r7
 800df56:	f7f2 fa7f 	bl	8000458 <__aeabi_dcmplt>
 800df5a:	2800      	cmp	r0, #0
 800df5c:	d000      	beq.n	800df60 <_dtoa_r+0x5e8>
 800df5e:	e0a5      	b.n	800e0ac <_dtoa_r+0x734>
 800df60:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800df62:	42a3      	cmp	r3, r4
 800df64:	d100      	bne.n	800df68 <_dtoa_r+0x5f0>
 800df66:	e742      	b.n	800ddee <_dtoa_r+0x476>
 800df68:	2200      	movs	r2, #0
 800df6a:	0030      	movs	r0, r6
 800df6c:	0039      	movs	r1, r7
 800df6e:	4b49      	ldr	r3, [pc, #292]	@ (800e094 <_dtoa_r+0x71c>)
 800df70:	f7f4 faac 	bl	80024cc <__aeabi_dmul>
 800df74:	2200      	movs	r2, #0
 800df76:	0006      	movs	r6, r0
 800df78:	000f      	movs	r7, r1
 800df7a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800df7c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800df7e:	4b45      	ldr	r3, [pc, #276]	@ (800e094 <_dtoa_r+0x71c>)
 800df80:	f7f4 faa4 	bl	80024cc <__aeabi_dmul>
 800df84:	9416      	str	r4, [sp, #88]	@ 0x58
 800df86:	900a      	str	r0, [sp, #40]	@ 0x28
 800df88:	910b      	str	r1, [sp, #44]	@ 0x2c
 800df8a:	e7c3      	b.n	800df14 <_dtoa_r+0x59c>
 800df8c:	0030      	movs	r0, r6
 800df8e:	0039      	movs	r1, r7
 800df90:	f7f4 fa9c 	bl	80024cc <__aeabi_dmul>
 800df94:	9d08      	ldr	r5, [sp, #32]
 800df96:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800df98:	002b      	movs	r3, r5
 800df9a:	4694      	mov	ip, r2
 800df9c:	9016      	str	r0, [sp, #88]	@ 0x58
 800df9e:	9117      	str	r1, [sp, #92]	@ 0x5c
 800dfa0:	4463      	add	r3, ip
 800dfa2:	9319      	str	r3, [sp, #100]	@ 0x64
 800dfa4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800dfa6:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800dfa8:	f7f5 f916 	bl	80031d8 <__aeabi_d2iz>
 800dfac:	0004      	movs	r4, r0
 800dfae:	f7f5 f94f 	bl	8003250 <__aeabi_i2d>
 800dfb2:	000b      	movs	r3, r1
 800dfb4:	0002      	movs	r2, r0
 800dfb6:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800dfb8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800dfba:	f7f4 fd4f 	bl	8002a5c <__aeabi_dsub>
 800dfbe:	3430      	adds	r4, #48	@ 0x30
 800dfc0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800dfc2:	702c      	strb	r4, [r5, #0]
 800dfc4:	3501      	adds	r5, #1
 800dfc6:	0006      	movs	r6, r0
 800dfc8:	000f      	movs	r7, r1
 800dfca:	42ab      	cmp	r3, r5
 800dfcc:	d129      	bne.n	800e022 <_dtoa_r+0x6aa>
 800dfce:	9816      	ldr	r0, [sp, #88]	@ 0x58
 800dfd0:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 800dfd2:	9b08      	ldr	r3, [sp, #32]
 800dfd4:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 800dfd6:	469c      	mov	ip, r3
 800dfd8:	2200      	movs	r2, #0
 800dfda:	4b32      	ldr	r3, [pc, #200]	@ (800e0a4 <_dtoa_r+0x72c>)
 800dfdc:	4464      	add	r4, ip
 800dfde:	f7f3 facd 	bl	800157c <__aeabi_dadd>
 800dfe2:	0002      	movs	r2, r0
 800dfe4:	000b      	movs	r3, r1
 800dfe6:	0030      	movs	r0, r6
 800dfe8:	0039      	movs	r1, r7
 800dfea:	f7f2 fa49 	bl	8000480 <__aeabi_dcmpgt>
 800dfee:	2800      	cmp	r0, #0
 800dff0:	d15c      	bne.n	800e0ac <_dtoa_r+0x734>
 800dff2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800dff4:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800dff6:	2000      	movs	r0, #0
 800dff8:	492a      	ldr	r1, [pc, #168]	@ (800e0a4 <_dtoa_r+0x72c>)
 800dffa:	f7f4 fd2f 	bl	8002a5c <__aeabi_dsub>
 800dffe:	0002      	movs	r2, r0
 800e000:	000b      	movs	r3, r1
 800e002:	0030      	movs	r0, r6
 800e004:	0039      	movs	r1, r7
 800e006:	f7f2 fa27 	bl	8000458 <__aeabi_dcmplt>
 800e00a:	2800      	cmp	r0, #0
 800e00c:	d100      	bne.n	800e010 <_dtoa_r+0x698>
 800e00e:	e6ee      	b.n	800ddee <_dtoa_r+0x476>
 800e010:	0023      	movs	r3, r4
 800e012:	3c01      	subs	r4, #1
 800e014:	7822      	ldrb	r2, [r4, #0]
 800e016:	2a30      	cmp	r2, #48	@ 0x30
 800e018:	d0fa      	beq.n	800e010 <_dtoa_r+0x698>
 800e01a:	001c      	movs	r4, r3
 800e01c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e01e:	9304      	str	r3, [sp, #16]
 800e020:	e73e      	b.n	800dea0 <_dtoa_r+0x528>
 800e022:	2200      	movs	r2, #0
 800e024:	4b1b      	ldr	r3, [pc, #108]	@ (800e094 <_dtoa_r+0x71c>)
 800e026:	f7f4 fa51 	bl	80024cc <__aeabi_dmul>
 800e02a:	900a      	str	r0, [sp, #40]	@ 0x28
 800e02c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800e02e:	e7b9      	b.n	800dfa4 <_dtoa_r+0x62c>
 800e030:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e032:	2b00      	cmp	r3, #0
 800e034:	d10c      	bne.n	800e050 <_dtoa_r+0x6d8>
 800e036:	9806      	ldr	r0, [sp, #24]
 800e038:	9907      	ldr	r1, [sp, #28]
 800e03a:	2200      	movs	r2, #0
 800e03c:	4b18      	ldr	r3, [pc, #96]	@ (800e0a0 <_dtoa_r+0x728>)
 800e03e:	f7f4 fa45 	bl	80024cc <__aeabi_dmul>
 800e042:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e044:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e046:	f7f2 fa25 	bl	8000494 <__aeabi_dcmpge>
 800e04a:	2800      	cmp	r0, #0
 800e04c:	d100      	bne.n	800e050 <_dtoa_r+0x6d8>
 800e04e:	e164      	b.n	800e31a <_dtoa_r+0x9a2>
 800e050:	2600      	movs	r6, #0
 800e052:	0037      	movs	r7, r6
 800e054:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e056:	9c08      	ldr	r4, [sp, #32]
 800e058:	43db      	mvns	r3, r3
 800e05a:	930c      	str	r3, [sp, #48]	@ 0x30
 800e05c:	2300      	movs	r3, #0
 800e05e:	9304      	str	r3, [sp, #16]
 800e060:	0031      	movs	r1, r6
 800e062:	9803      	ldr	r0, [sp, #12]
 800e064:	f000 fbc6 	bl	800e7f4 <_Bfree>
 800e068:	2f00      	cmp	r7, #0
 800e06a:	d0d7      	beq.n	800e01c <_dtoa_r+0x6a4>
 800e06c:	9b04      	ldr	r3, [sp, #16]
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d005      	beq.n	800e07e <_dtoa_r+0x706>
 800e072:	42bb      	cmp	r3, r7
 800e074:	d003      	beq.n	800e07e <_dtoa_r+0x706>
 800e076:	0019      	movs	r1, r3
 800e078:	9803      	ldr	r0, [sp, #12]
 800e07a:	f000 fbbb 	bl	800e7f4 <_Bfree>
 800e07e:	0039      	movs	r1, r7
 800e080:	9803      	ldr	r0, [sp, #12]
 800e082:	f000 fbb7 	bl	800e7f4 <_Bfree>
 800e086:	e7c9      	b.n	800e01c <_dtoa_r+0x6a4>
 800e088:	08010738 	.word	0x08010738
 800e08c:	08010710 	.word	0x08010710
 800e090:	3ff00000 	.word	0x3ff00000
 800e094:	40240000 	.word	0x40240000
 800e098:	401c0000 	.word	0x401c0000
 800e09c:	fcc00000 	.word	0xfcc00000
 800e0a0:	40140000 	.word	0x40140000
 800e0a4:	3fe00000 	.word	0x3fe00000
 800e0a8:	9b04      	ldr	r3, [sp, #16]
 800e0aa:	930c      	str	r3, [sp, #48]	@ 0x30
 800e0ac:	0023      	movs	r3, r4
 800e0ae:	001c      	movs	r4, r3
 800e0b0:	3b01      	subs	r3, #1
 800e0b2:	781a      	ldrb	r2, [r3, #0]
 800e0b4:	2a39      	cmp	r2, #57	@ 0x39
 800e0b6:	d108      	bne.n	800e0ca <_dtoa_r+0x752>
 800e0b8:	9a08      	ldr	r2, [sp, #32]
 800e0ba:	429a      	cmp	r2, r3
 800e0bc:	d1f7      	bne.n	800e0ae <_dtoa_r+0x736>
 800e0be:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800e0c0:	9908      	ldr	r1, [sp, #32]
 800e0c2:	3201      	adds	r2, #1
 800e0c4:	920c      	str	r2, [sp, #48]	@ 0x30
 800e0c6:	2230      	movs	r2, #48	@ 0x30
 800e0c8:	700a      	strb	r2, [r1, #0]
 800e0ca:	781a      	ldrb	r2, [r3, #0]
 800e0cc:	3201      	adds	r2, #1
 800e0ce:	701a      	strb	r2, [r3, #0]
 800e0d0:	e7a4      	b.n	800e01c <_dtoa_r+0x6a4>
 800e0d2:	2200      	movs	r2, #0
 800e0d4:	4bc6      	ldr	r3, [pc, #792]	@ (800e3f0 <_dtoa_r+0xa78>)
 800e0d6:	f7f4 f9f9 	bl	80024cc <__aeabi_dmul>
 800e0da:	2200      	movs	r2, #0
 800e0dc:	2300      	movs	r3, #0
 800e0de:	0006      	movs	r6, r0
 800e0e0:	000f      	movs	r7, r1
 800e0e2:	f7f2 f9b3 	bl	800044c <__aeabi_dcmpeq>
 800e0e6:	2800      	cmp	r0, #0
 800e0e8:	d100      	bne.n	800e0ec <_dtoa_r+0x774>
 800e0ea:	e6a1      	b.n	800de30 <_dtoa_r+0x4b8>
 800e0ec:	e6d8      	b.n	800dea0 <_dtoa_r+0x528>
 800e0ee:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 800e0f0:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 800e0f2:	9c06      	ldr	r4, [sp, #24]
 800e0f4:	2f00      	cmp	r7, #0
 800e0f6:	d014      	beq.n	800e122 <_dtoa_r+0x7aa>
 800e0f8:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800e0fa:	2a01      	cmp	r2, #1
 800e0fc:	dd00      	ble.n	800e100 <_dtoa_r+0x788>
 800e0fe:	e0c8      	b.n	800e292 <_dtoa_r+0x91a>
 800e100:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800e102:	2a00      	cmp	r2, #0
 800e104:	d100      	bne.n	800e108 <_dtoa_r+0x790>
 800e106:	e0be      	b.n	800e286 <_dtoa_r+0x90e>
 800e108:	4aba      	ldr	r2, [pc, #744]	@ (800e3f4 <_dtoa_r+0xa7c>)
 800e10a:	189b      	adds	r3, r3, r2
 800e10c:	9a06      	ldr	r2, [sp, #24]
 800e10e:	2101      	movs	r1, #1
 800e110:	18d2      	adds	r2, r2, r3
 800e112:	9206      	str	r2, [sp, #24]
 800e114:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e116:	9803      	ldr	r0, [sp, #12]
 800e118:	18d3      	adds	r3, r2, r3
 800e11a:	930d      	str	r3, [sp, #52]	@ 0x34
 800e11c:	f000 fc22 	bl	800e964 <__i2b>
 800e120:	0007      	movs	r7, r0
 800e122:	2c00      	cmp	r4, #0
 800e124:	d00e      	beq.n	800e144 <_dtoa_r+0x7cc>
 800e126:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e128:	2b00      	cmp	r3, #0
 800e12a:	dd0b      	ble.n	800e144 <_dtoa_r+0x7cc>
 800e12c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e12e:	0023      	movs	r3, r4
 800e130:	4294      	cmp	r4, r2
 800e132:	dd00      	ble.n	800e136 <_dtoa_r+0x7be>
 800e134:	0013      	movs	r3, r2
 800e136:	9a06      	ldr	r2, [sp, #24]
 800e138:	1ae4      	subs	r4, r4, r3
 800e13a:	1ad2      	subs	r2, r2, r3
 800e13c:	9206      	str	r2, [sp, #24]
 800e13e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e140:	1ad3      	subs	r3, r2, r3
 800e142:	930d      	str	r3, [sp, #52]	@ 0x34
 800e144:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e146:	2b00      	cmp	r3, #0
 800e148:	d01f      	beq.n	800e18a <_dtoa_r+0x812>
 800e14a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	d100      	bne.n	800e152 <_dtoa_r+0x7da>
 800e150:	e0b5      	b.n	800e2be <_dtoa_r+0x946>
 800e152:	2d00      	cmp	r5, #0
 800e154:	d010      	beq.n	800e178 <_dtoa_r+0x800>
 800e156:	0039      	movs	r1, r7
 800e158:	002a      	movs	r2, r5
 800e15a:	9803      	ldr	r0, [sp, #12]
 800e15c:	f000 fccc 	bl	800eaf8 <__pow5mult>
 800e160:	9a05      	ldr	r2, [sp, #20]
 800e162:	0001      	movs	r1, r0
 800e164:	0007      	movs	r7, r0
 800e166:	9803      	ldr	r0, [sp, #12]
 800e168:	f000 fc14 	bl	800e994 <__multiply>
 800e16c:	0006      	movs	r6, r0
 800e16e:	9905      	ldr	r1, [sp, #20]
 800e170:	9803      	ldr	r0, [sp, #12]
 800e172:	f000 fb3f 	bl	800e7f4 <_Bfree>
 800e176:	9605      	str	r6, [sp, #20]
 800e178:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e17a:	1b5a      	subs	r2, r3, r5
 800e17c:	42ab      	cmp	r3, r5
 800e17e:	d004      	beq.n	800e18a <_dtoa_r+0x812>
 800e180:	9905      	ldr	r1, [sp, #20]
 800e182:	9803      	ldr	r0, [sp, #12]
 800e184:	f000 fcb8 	bl	800eaf8 <__pow5mult>
 800e188:	9005      	str	r0, [sp, #20]
 800e18a:	2101      	movs	r1, #1
 800e18c:	9803      	ldr	r0, [sp, #12]
 800e18e:	f000 fbe9 	bl	800e964 <__i2b>
 800e192:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800e194:	0006      	movs	r6, r0
 800e196:	2b00      	cmp	r3, #0
 800e198:	d100      	bne.n	800e19c <_dtoa_r+0x824>
 800e19a:	e1bc      	b.n	800e516 <_dtoa_r+0xb9e>
 800e19c:	001a      	movs	r2, r3
 800e19e:	0001      	movs	r1, r0
 800e1a0:	9803      	ldr	r0, [sp, #12]
 800e1a2:	f000 fca9 	bl	800eaf8 <__pow5mult>
 800e1a6:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800e1a8:	0006      	movs	r6, r0
 800e1aa:	2500      	movs	r5, #0
 800e1ac:	2b01      	cmp	r3, #1
 800e1ae:	dc16      	bgt.n	800e1de <_dtoa_r+0x866>
 800e1b0:	2500      	movs	r5, #0
 800e1b2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e1b4:	42ab      	cmp	r3, r5
 800e1b6:	d10e      	bne.n	800e1d6 <_dtoa_r+0x85e>
 800e1b8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e1ba:	031b      	lsls	r3, r3, #12
 800e1bc:	42ab      	cmp	r3, r5
 800e1be:	d10a      	bne.n	800e1d6 <_dtoa_r+0x85e>
 800e1c0:	4b8d      	ldr	r3, [pc, #564]	@ (800e3f8 <_dtoa_r+0xa80>)
 800e1c2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800e1c4:	4213      	tst	r3, r2
 800e1c6:	d006      	beq.n	800e1d6 <_dtoa_r+0x85e>
 800e1c8:	9b06      	ldr	r3, [sp, #24]
 800e1ca:	3501      	adds	r5, #1
 800e1cc:	3301      	adds	r3, #1
 800e1ce:	9306      	str	r3, [sp, #24]
 800e1d0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e1d2:	3301      	adds	r3, #1
 800e1d4:	930d      	str	r3, [sp, #52]	@ 0x34
 800e1d6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800e1d8:	2001      	movs	r0, #1
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d008      	beq.n	800e1f0 <_dtoa_r+0x878>
 800e1de:	6933      	ldr	r3, [r6, #16]
 800e1e0:	3303      	adds	r3, #3
 800e1e2:	009b      	lsls	r3, r3, #2
 800e1e4:	18f3      	adds	r3, r6, r3
 800e1e6:	6858      	ldr	r0, [r3, #4]
 800e1e8:	f000 fb6c 	bl	800e8c4 <__hi0bits>
 800e1ec:	2320      	movs	r3, #32
 800e1ee:	1a18      	subs	r0, r3, r0
 800e1f0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e1f2:	1818      	adds	r0, r3, r0
 800e1f4:	0002      	movs	r2, r0
 800e1f6:	231f      	movs	r3, #31
 800e1f8:	401a      	ands	r2, r3
 800e1fa:	4218      	tst	r0, r3
 800e1fc:	d065      	beq.n	800e2ca <_dtoa_r+0x952>
 800e1fe:	3301      	adds	r3, #1
 800e200:	1a9b      	subs	r3, r3, r2
 800e202:	2b04      	cmp	r3, #4
 800e204:	dd5d      	ble.n	800e2c2 <_dtoa_r+0x94a>
 800e206:	231c      	movs	r3, #28
 800e208:	1a9b      	subs	r3, r3, r2
 800e20a:	9a06      	ldr	r2, [sp, #24]
 800e20c:	18e4      	adds	r4, r4, r3
 800e20e:	18d2      	adds	r2, r2, r3
 800e210:	9206      	str	r2, [sp, #24]
 800e212:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e214:	18d3      	adds	r3, r2, r3
 800e216:	930d      	str	r3, [sp, #52]	@ 0x34
 800e218:	9b06      	ldr	r3, [sp, #24]
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	dd05      	ble.n	800e22a <_dtoa_r+0x8b2>
 800e21e:	001a      	movs	r2, r3
 800e220:	9905      	ldr	r1, [sp, #20]
 800e222:	9803      	ldr	r0, [sp, #12]
 800e224:	f000 fcc4 	bl	800ebb0 <__lshift>
 800e228:	9005      	str	r0, [sp, #20]
 800e22a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	dd05      	ble.n	800e23c <_dtoa_r+0x8c4>
 800e230:	0031      	movs	r1, r6
 800e232:	001a      	movs	r2, r3
 800e234:	9803      	ldr	r0, [sp, #12]
 800e236:	f000 fcbb 	bl	800ebb0 <__lshift>
 800e23a:	0006      	movs	r6, r0
 800e23c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800e23e:	2b00      	cmp	r3, #0
 800e240:	d045      	beq.n	800e2ce <_dtoa_r+0x956>
 800e242:	0031      	movs	r1, r6
 800e244:	9805      	ldr	r0, [sp, #20]
 800e246:	f000 fd1f 	bl	800ec88 <__mcmp>
 800e24a:	2800      	cmp	r0, #0
 800e24c:	da3f      	bge.n	800e2ce <_dtoa_r+0x956>
 800e24e:	9b04      	ldr	r3, [sp, #16]
 800e250:	220a      	movs	r2, #10
 800e252:	3b01      	subs	r3, #1
 800e254:	930c      	str	r3, [sp, #48]	@ 0x30
 800e256:	9905      	ldr	r1, [sp, #20]
 800e258:	2300      	movs	r3, #0
 800e25a:	9803      	ldr	r0, [sp, #12]
 800e25c:	f000 faee 	bl	800e83c <__multadd>
 800e260:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e262:	9005      	str	r0, [sp, #20]
 800e264:	2b00      	cmp	r3, #0
 800e266:	d100      	bne.n	800e26a <_dtoa_r+0x8f2>
 800e268:	e15c      	b.n	800e524 <_dtoa_r+0xbac>
 800e26a:	2300      	movs	r3, #0
 800e26c:	0039      	movs	r1, r7
 800e26e:	220a      	movs	r2, #10
 800e270:	9803      	ldr	r0, [sp, #12]
 800e272:	f000 fae3 	bl	800e83c <__multadd>
 800e276:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e278:	0007      	movs	r7, r0
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	dc55      	bgt.n	800e32a <_dtoa_r+0x9b2>
 800e27e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800e280:	2b02      	cmp	r3, #2
 800e282:	dc2d      	bgt.n	800e2e0 <_dtoa_r+0x968>
 800e284:	e051      	b.n	800e32a <_dtoa_r+0x9b2>
 800e286:	2336      	movs	r3, #54	@ 0x36
 800e288:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800e28a:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 800e28c:	9c06      	ldr	r4, [sp, #24]
 800e28e:	1a9b      	subs	r3, r3, r2
 800e290:	e73c      	b.n	800e10c <_dtoa_r+0x794>
 800e292:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e294:	1e5d      	subs	r5, r3, #1
 800e296:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e298:	42ab      	cmp	r3, r5
 800e29a:	db08      	blt.n	800e2ae <_dtoa_r+0x936>
 800e29c:	1b5d      	subs	r5, r3, r5
 800e29e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e2a0:	9c06      	ldr	r4, [sp, #24]
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	db00      	blt.n	800e2a8 <_dtoa_r+0x930>
 800e2a6:	e731      	b.n	800e10c <_dtoa_r+0x794>
 800e2a8:	1ae4      	subs	r4, r4, r3
 800e2aa:	2300      	movs	r3, #0
 800e2ac:	e72e      	b.n	800e10c <_dtoa_r+0x794>
 800e2ae:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e2b0:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800e2b2:	1aeb      	subs	r3, r5, r3
 800e2b4:	18d3      	adds	r3, r2, r3
 800e2b6:	950f      	str	r5, [sp, #60]	@ 0x3c
 800e2b8:	9314      	str	r3, [sp, #80]	@ 0x50
 800e2ba:	2500      	movs	r5, #0
 800e2bc:	e7ef      	b.n	800e29e <_dtoa_r+0x926>
 800e2be:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800e2c0:	e75e      	b.n	800e180 <_dtoa_r+0x808>
 800e2c2:	2b04      	cmp	r3, #4
 800e2c4:	d0a8      	beq.n	800e218 <_dtoa_r+0x8a0>
 800e2c6:	331c      	adds	r3, #28
 800e2c8:	e79f      	b.n	800e20a <_dtoa_r+0x892>
 800e2ca:	0013      	movs	r3, r2
 800e2cc:	e7fb      	b.n	800e2c6 <_dtoa_r+0x94e>
 800e2ce:	9b04      	ldr	r3, [sp, #16]
 800e2d0:	930c      	str	r3, [sp, #48]	@ 0x30
 800e2d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e2d4:	930e      	str	r3, [sp, #56]	@ 0x38
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	dc23      	bgt.n	800e322 <_dtoa_r+0x9aa>
 800e2da:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800e2dc:	2b02      	cmp	r3, #2
 800e2de:	dd20      	ble.n	800e322 <_dtoa_r+0x9aa>
 800e2e0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d000      	beq.n	800e2e8 <_dtoa_r+0x970>
 800e2e6:	e6b5      	b.n	800e054 <_dtoa_r+0x6dc>
 800e2e8:	0031      	movs	r1, r6
 800e2ea:	2205      	movs	r2, #5
 800e2ec:	9803      	ldr	r0, [sp, #12]
 800e2ee:	f000 faa5 	bl	800e83c <__multadd>
 800e2f2:	0006      	movs	r6, r0
 800e2f4:	0001      	movs	r1, r0
 800e2f6:	9805      	ldr	r0, [sp, #20]
 800e2f8:	f000 fcc6 	bl	800ec88 <__mcmp>
 800e2fc:	2800      	cmp	r0, #0
 800e2fe:	dc00      	bgt.n	800e302 <_dtoa_r+0x98a>
 800e300:	e6a8      	b.n	800e054 <_dtoa_r+0x6dc>
 800e302:	9b08      	ldr	r3, [sp, #32]
 800e304:	9a08      	ldr	r2, [sp, #32]
 800e306:	1c5c      	adds	r4, r3, #1
 800e308:	2331      	movs	r3, #49	@ 0x31
 800e30a:	7013      	strb	r3, [r2, #0]
 800e30c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e30e:	3301      	adds	r3, #1
 800e310:	930c      	str	r3, [sp, #48]	@ 0x30
 800e312:	e6a3      	b.n	800e05c <_dtoa_r+0x6e4>
 800e314:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 800e316:	0037      	movs	r7, r6
 800e318:	e7f3      	b.n	800e302 <_dtoa_r+0x98a>
 800e31a:	9b04      	ldr	r3, [sp, #16]
 800e31c:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 800e31e:	930c      	str	r3, [sp, #48]	@ 0x30
 800e320:	e7f9      	b.n	800e316 <_dtoa_r+0x99e>
 800e322:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e324:	2b00      	cmp	r3, #0
 800e326:	d100      	bne.n	800e32a <_dtoa_r+0x9b2>
 800e328:	e100      	b.n	800e52c <_dtoa_r+0xbb4>
 800e32a:	2c00      	cmp	r4, #0
 800e32c:	dd05      	ble.n	800e33a <_dtoa_r+0x9c2>
 800e32e:	0039      	movs	r1, r7
 800e330:	0022      	movs	r2, r4
 800e332:	9803      	ldr	r0, [sp, #12]
 800e334:	f000 fc3c 	bl	800ebb0 <__lshift>
 800e338:	0007      	movs	r7, r0
 800e33a:	0038      	movs	r0, r7
 800e33c:	2d00      	cmp	r5, #0
 800e33e:	d018      	beq.n	800e372 <_dtoa_r+0x9fa>
 800e340:	6879      	ldr	r1, [r7, #4]
 800e342:	9803      	ldr	r0, [sp, #12]
 800e344:	f000 fa12 	bl	800e76c <_Balloc>
 800e348:	1e04      	subs	r4, r0, #0
 800e34a:	d105      	bne.n	800e358 <_dtoa_r+0x9e0>
 800e34c:	0022      	movs	r2, r4
 800e34e:	4b2b      	ldr	r3, [pc, #172]	@ (800e3fc <_dtoa_r+0xa84>)
 800e350:	482b      	ldr	r0, [pc, #172]	@ (800e400 <_dtoa_r+0xa88>)
 800e352:	492c      	ldr	r1, [pc, #176]	@ (800e404 <_dtoa_r+0xa8c>)
 800e354:	f7ff fb25 	bl	800d9a2 <_dtoa_r+0x2a>
 800e358:	0039      	movs	r1, r7
 800e35a:	693a      	ldr	r2, [r7, #16]
 800e35c:	310c      	adds	r1, #12
 800e35e:	3202      	adds	r2, #2
 800e360:	0092      	lsls	r2, r2, #2
 800e362:	300c      	adds	r0, #12
 800e364:	f7ff fa70 	bl	800d848 <memcpy>
 800e368:	2201      	movs	r2, #1
 800e36a:	0021      	movs	r1, r4
 800e36c:	9803      	ldr	r0, [sp, #12]
 800e36e:	f000 fc1f 	bl	800ebb0 <__lshift>
 800e372:	9b08      	ldr	r3, [sp, #32]
 800e374:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e376:	9306      	str	r3, [sp, #24]
 800e378:	3b01      	subs	r3, #1
 800e37a:	189b      	adds	r3, r3, r2
 800e37c:	2201      	movs	r2, #1
 800e37e:	9704      	str	r7, [sp, #16]
 800e380:	0007      	movs	r7, r0
 800e382:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e384:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e386:	4013      	ands	r3, r2
 800e388:	930e      	str	r3, [sp, #56]	@ 0x38
 800e38a:	0031      	movs	r1, r6
 800e38c:	9805      	ldr	r0, [sp, #20]
 800e38e:	f7ff fa64 	bl	800d85a <quorem>
 800e392:	9904      	ldr	r1, [sp, #16]
 800e394:	0005      	movs	r5, r0
 800e396:	900a      	str	r0, [sp, #40]	@ 0x28
 800e398:	9805      	ldr	r0, [sp, #20]
 800e39a:	f000 fc75 	bl	800ec88 <__mcmp>
 800e39e:	003a      	movs	r2, r7
 800e3a0:	900d      	str	r0, [sp, #52]	@ 0x34
 800e3a2:	0031      	movs	r1, r6
 800e3a4:	9803      	ldr	r0, [sp, #12]
 800e3a6:	f000 fc8b 	bl	800ecc0 <__mdiff>
 800e3aa:	2201      	movs	r2, #1
 800e3ac:	68c3      	ldr	r3, [r0, #12]
 800e3ae:	0004      	movs	r4, r0
 800e3b0:	3530      	adds	r5, #48	@ 0x30
 800e3b2:	9209      	str	r2, [sp, #36]	@ 0x24
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d104      	bne.n	800e3c2 <_dtoa_r+0xa4a>
 800e3b8:	0001      	movs	r1, r0
 800e3ba:	9805      	ldr	r0, [sp, #20]
 800e3bc:	f000 fc64 	bl	800ec88 <__mcmp>
 800e3c0:	9009      	str	r0, [sp, #36]	@ 0x24
 800e3c2:	0021      	movs	r1, r4
 800e3c4:	9803      	ldr	r0, [sp, #12]
 800e3c6:	f000 fa15 	bl	800e7f4 <_Bfree>
 800e3ca:	9b06      	ldr	r3, [sp, #24]
 800e3cc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e3ce:	1c5c      	adds	r4, r3, #1
 800e3d0:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800e3d2:	4313      	orrs	r3, r2
 800e3d4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e3d6:	4313      	orrs	r3, r2
 800e3d8:	d116      	bne.n	800e408 <_dtoa_r+0xa90>
 800e3da:	2d39      	cmp	r5, #57	@ 0x39
 800e3dc:	d02f      	beq.n	800e43e <_dtoa_r+0xac6>
 800e3de:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	dd01      	ble.n	800e3e8 <_dtoa_r+0xa70>
 800e3e4:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800e3e6:	3531      	adds	r5, #49	@ 0x31
 800e3e8:	9b06      	ldr	r3, [sp, #24]
 800e3ea:	701d      	strb	r5, [r3, #0]
 800e3ec:	e638      	b.n	800e060 <_dtoa_r+0x6e8>
 800e3ee:	46c0      	nop			@ (mov r8, r8)
 800e3f0:	40240000 	.word	0x40240000
 800e3f4:	00000433 	.word	0x00000433
 800e3f8:	7ff00000 	.word	0x7ff00000
 800e3fc:	08010694 	.word	0x08010694
 800e400:	0801063c 	.word	0x0801063c
 800e404:	000002ef 	.word	0x000002ef
 800e408:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	db04      	blt.n	800e418 <_dtoa_r+0xaa0>
 800e40e:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800e410:	4313      	orrs	r3, r2
 800e412:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e414:	4313      	orrs	r3, r2
 800e416:	d11e      	bne.n	800e456 <_dtoa_r+0xade>
 800e418:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	dde4      	ble.n	800e3e8 <_dtoa_r+0xa70>
 800e41e:	9905      	ldr	r1, [sp, #20]
 800e420:	2201      	movs	r2, #1
 800e422:	9803      	ldr	r0, [sp, #12]
 800e424:	f000 fbc4 	bl	800ebb0 <__lshift>
 800e428:	0031      	movs	r1, r6
 800e42a:	9005      	str	r0, [sp, #20]
 800e42c:	f000 fc2c 	bl	800ec88 <__mcmp>
 800e430:	2800      	cmp	r0, #0
 800e432:	dc02      	bgt.n	800e43a <_dtoa_r+0xac2>
 800e434:	d1d8      	bne.n	800e3e8 <_dtoa_r+0xa70>
 800e436:	07eb      	lsls	r3, r5, #31
 800e438:	d5d6      	bpl.n	800e3e8 <_dtoa_r+0xa70>
 800e43a:	2d39      	cmp	r5, #57	@ 0x39
 800e43c:	d1d2      	bne.n	800e3e4 <_dtoa_r+0xa6c>
 800e43e:	2339      	movs	r3, #57	@ 0x39
 800e440:	9a06      	ldr	r2, [sp, #24]
 800e442:	7013      	strb	r3, [r2, #0]
 800e444:	0023      	movs	r3, r4
 800e446:	001c      	movs	r4, r3
 800e448:	3b01      	subs	r3, #1
 800e44a:	781a      	ldrb	r2, [r3, #0]
 800e44c:	2a39      	cmp	r2, #57	@ 0x39
 800e44e:	d04f      	beq.n	800e4f0 <_dtoa_r+0xb78>
 800e450:	3201      	adds	r2, #1
 800e452:	701a      	strb	r2, [r3, #0]
 800e454:	e604      	b.n	800e060 <_dtoa_r+0x6e8>
 800e456:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e458:	2b00      	cmp	r3, #0
 800e45a:	dd03      	ble.n	800e464 <_dtoa_r+0xaec>
 800e45c:	2d39      	cmp	r5, #57	@ 0x39
 800e45e:	d0ee      	beq.n	800e43e <_dtoa_r+0xac6>
 800e460:	3501      	adds	r5, #1
 800e462:	e7c1      	b.n	800e3e8 <_dtoa_r+0xa70>
 800e464:	9b06      	ldr	r3, [sp, #24]
 800e466:	9a06      	ldr	r2, [sp, #24]
 800e468:	701d      	strb	r5, [r3, #0]
 800e46a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e46c:	4293      	cmp	r3, r2
 800e46e:	d02a      	beq.n	800e4c6 <_dtoa_r+0xb4e>
 800e470:	2300      	movs	r3, #0
 800e472:	220a      	movs	r2, #10
 800e474:	9905      	ldr	r1, [sp, #20]
 800e476:	9803      	ldr	r0, [sp, #12]
 800e478:	f000 f9e0 	bl	800e83c <__multadd>
 800e47c:	9b04      	ldr	r3, [sp, #16]
 800e47e:	9005      	str	r0, [sp, #20]
 800e480:	42bb      	cmp	r3, r7
 800e482:	d109      	bne.n	800e498 <_dtoa_r+0xb20>
 800e484:	2300      	movs	r3, #0
 800e486:	220a      	movs	r2, #10
 800e488:	9904      	ldr	r1, [sp, #16]
 800e48a:	9803      	ldr	r0, [sp, #12]
 800e48c:	f000 f9d6 	bl	800e83c <__multadd>
 800e490:	9004      	str	r0, [sp, #16]
 800e492:	0007      	movs	r7, r0
 800e494:	9406      	str	r4, [sp, #24]
 800e496:	e778      	b.n	800e38a <_dtoa_r+0xa12>
 800e498:	9904      	ldr	r1, [sp, #16]
 800e49a:	2300      	movs	r3, #0
 800e49c:	220a      	movs	r2, #10
 800e49e:	9803      	ldr	r0, [sp, #12]
 800e4a0:	f000 f9cc 	bl	800e83c <__multadd>
 800e4a4:	2300      	movs	r3, #0
 800e4a6:	9004      	str	r0, [sp, #16]
 800e4a8:	220a      	movs	r2, #10
 800e4aa:	0039      	movs	r1, r7
 800e4ac:	9803      	ldr	r0, [sp, #12]
 800e4ae:	f000 f9c5 	bl	800e83c <__multadd>
 800e4b2:	e7ee      	b.n	800e492 <_dtoa_r+0xb1a>
 800e4b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e4b6:	2401      	movs	r4, #1
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	dd00      	ble.n	800e4be <_dtoa_r+0xb46>
 800e4bc:	001c      	movs	r4, r3
 800e4be:	9b08      	ldr	r3, [sp, #32]
 800e4c0:	191c      	adds	r4, r3, r4
 800e4c2:	2300      	movs	r3, #0
 800e4c4:	9304      	str	r3, [sp, #16]
 800e4c6:	9905      	ldr	r1, [sp, #20]
 800e4c8:	2201      	movs	r2, #1
 800e4ca:	9803      	ldr	r0, [sp, #12]
 800e4cc:	f000 fb70 	bl	800ebb0 <__lshift>
 800e4d0:	0031      	movs	r1, r6
 800e4d2:	9005      	str	r0, [sp, #20]
 800e4d4:	f000 fbd8 	bl	800ec88 <__mcmp>
 800e4d8:	2800      	cmp	r0, #0
 800e4da:	dcb3      	bgt.n	800e444 <_dtoa_r+0xacc>
 800e4dc:	d101      	bne.n	800e4e2 <_dtoa_r+0xb6a>
 800e4de:	07ed      	lsls	r5, r5, #31
 800e4e0:	d4b0      	bmi.n	800e444 <_dtoa_r+0xacc>
 800e4e2:	0023      	movs	r3, r4
 800e4e4:	001c      	movs	r4, r3
 800e4e6:	3b01      	subs	r3, #1
 800e4e8:	781a      	ldrb	r2, [r3, #0]
 800e4ea:	2a30      	cmp	r2, #48	@ 0x30
 800e4ec:	d0fa      	beq.n	800e4e4 <_dtoa_r+0xb6c>
 800e4ee:	e5b7      	b.n	800e060 <_dtoa_r+0x6e8>
 800e4f0:	9a08      	ldr	r2, [sp, #32]
 800e4f2:	429a      	cmp	r2, r3
 800e4f4:	d1a7      	bne.n	800e446 <_dtoa_r+0xace>
 800e4f6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e4f8:	3301      	adds	r3, #1
 800e4fa:	930c      	str	r3, [sp, #48]	@ 0x30
 800e4fc:	2331      	movs	r3, #49	@ 0x31
 800e4fe:	7013      	strb	r3, [r2, #0]
 800e500:	e5ae      	b.n	800e060 <_dtoa_r+0x6e8>
 800e502:	4b15      	ldr	r3, [pc, #84]	@ (800e558 <_dtoa_r+0xbe0>)
 800e504:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800e506:	9308      	str	r3, [sp, #32]
 800e508:	4b14      	ldr	r3, [pc, #80]	@ (800e55c <_dtoa_r+0xbe4>)
 800e50a:	2a00      	cmp	r2, #0
 800e50c:	d001      	beq.n	800e512 <_dtoa_r+0xb9a>
 800e50e:	f7ff fa7b 	bl	800da08 <_dtoa_r+0x90>
 800e512:	f7ff fa7b 	bl	800da0c <_dtoa_r+0x94>
 800e516:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800e518:	2b01      	cmp	r3, #1
 800e51a:	dc00      	bgt.n	800e51e <_dtoa_r+0xba6>
 800e51c:	e648      	b.n	800e1b0 <_dtoa_r+0x838>
 800e51e:	2001      	movs	r0, #1
 800e520:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 800e522:	e665      	b.n	800e1f0 <_dtoa_r+0x878>
 800e524:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e526:	2b00      	cmp	r3, #0
 800e528:	dc00      	bgt.n	800e52c <_dtoa_r+0xbb4>
 800e52a:	e6d6      	b.n	800e2da <_dtoa_r+0x962>
 800e52c:	2400      	movs	r4, #0
 800e52e:	0031      	movs	r1, r6
 800e530:	9805      	ldr	r0, [sp, #20]
 800e532:	f7ff f992 	bl	800d85a <quorem>
 800e536:	9b08      	ldr	r3, [sp, #32]
 800e538:	3030      	adds	r0, #48	@ 0x30
 800e53a:	5518      	strb	r0, [r3, r4]
 800e53c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e53e:	3401      	adds	r4, #1
 800e540:	0005      	movs	r5, r0
 800e542:	429c      	cmp	r4, r3
 800e544:	dab6      	bge.n	800e4b4 <_dtoa_r+0xb3c>
 800e546:	2300      	movs	r3, #0
 800e548:	220a      	movs	r2, #10
 800e54a:	9905      	ldr	r1, [sp, #20]
 800e54c:	9803      	ldr	r0, [sp, #12]
 800e54e:	f000 f975 	bl	800e83c <__multadd>
 800e552:	9005      	str	r0, [sp, #20]
 800e554:	e7eb      	b.n	800e52e <_dtoa_r+0xbb6>
 800e556:	46c0      	nop			@ (mov r8, r8)
 800e558:	08010618 	.word	0x08010618
 800e55c:	08010620 	.word	0x08010620

0800e560 <_free_r>:
 800e560:	b570      	push	{r4, r5, r6, lr}
 800e562:	0005      	movs	r5, r0
 800e564:	1e0c      	subs	r4, r1, #0
 800e566:	d010      	beq.n	800e58a <_free_r+0x2a>
 800e568:	3c04      	subs	r4, #4
 800e56a:	6823      	ldr	r3, [r4, #0]
 800e56c:	2b00      	cmp	r3, #0
 800e56e:	da00      	bge.n	800e572 <_free_r+0x12>
 800e570:	18e4      	adds	r4, r4, r3
 800e572:	0028      	movs	r0, r5
 800e574:	f000 f8ea 	bl	800e74c <__malloc_lock>
 800e578:	4a1d      	ldr	r2, [pc, #116]	@ (800e5f0 <_free_r+0x90>)
 800e57a:	6813      	ldr	r3, [r2, #0]
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	d105      	bne.n	800e58c <_free_r+0x2c>
 800e580:	6063      	str	r3, [r4, #4]
 800e582:	6014      	str	r4, [r2, #0]
 800e584:	0028      	movs	r0, r5
 800e586:	f000 f8e9 	bl	800e75c <__malloc_unlock>
 800e58a:	bd70      	pop	{r4, r5, r6, pc}
 800e58c:	42a3      	cmp	r3, r4
 800e58e:	d908      	bls.n	800e5a2 <_free_r+0x42>
 800e590:	6820      	ldr	r0, [r4, #0]
 800e592:	1821      	adds	r1, r4, r0
 800e594:	428b      	cmp	r3, r1
 800e596:	d1f3      	bne.n	800e580 <_free_r+0x20>
 800e598:	6819      	ldr	r1, [r3, #0]
 800e59a:	685b      	ldr	r3, [r3, #4]
 800e59c:	1809      	adds	r1, r1, r0
 800e59e:	6021      	str	r1, [r4, #0]
 800e5a0:	e7ee      	b.n	800e580 <_free_r+0x20>
 800e5a2:	001a      	movs	r2, r3
 800e5a4:	685b      	ldr	r3, [r3, #4]
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	d001      	beq.n	800e5ae <_free_r+0x4e>
 800e5aa:	42a3      	cmp	r3, r4
 800e5ac:	d9f9      	bls.n	800e5a2 <_free_r+0x42>
 800e5ae:	6811      	ldr	r1, [r2, #0]
 800e5b0:	1850      	adds	r0, r2, r1
 800e5b2:	42a0      	cmp	r0, r4
 800e5b4:	d10b      	bne.n	800e5ce <_free_r+0x6e>
 800e5b6:	6820      	ldr	r0, [r4, #0]
 800e5b8:	1809      	adds	r1, r1, r0
 800e5ba:	1850      	adds	r0, r2, r1
 800e5bc:	6011      	str	r1, [r2, #0]
 800e5be:	4283      	cmp	r3, r0
 800e5c0:	d1e0      	bne.n	800e584 <_free_r+0x24>
 800e5c2:	6818      	ldr	r0, [r3, #0]
 800e5c4:	685b      	ldr	r3, [r3, #4]
 800e5c6:	1841      	adds	r1, r0, r1
 800e5c8:	6011      	str	r1, [r2, #0]
 800e5ca:	6053      	str	r3, [r2, #4]
 800e5cc:	e7da      	b.n	800e584 <_free_r+0x24>
 800e5ce:	42a0      	cmp	r0, r4
 800e5d0:	d902      	bls.n	800e5d8 <_free_r+0x78>
 800e5d2:	230c      	movs	r3, #12
 800e5d4:	602b      	str	r3, [r5, #0]
 800e5d6:	e7d5      	b.n	800e584 <_free_r+0x24>
 800e5d8:	6820      	ldr	r0, [r4, #0]
 800e5da:	1821      	adds	r1, r4, r0
 800e5dc:	428b      	cmp	r3, r1
 800e5de:	d103      	bne.n	800e5e8 <_free_r+0x88>
 800e5e0:	6819      	ldr	r1, [r3, #0]
 800e5e2:	685b      	ldr	r3, [r3, #4]
 800e5e4:	1809      	adds	r1, r1, r0
 800e5e6:	6021      	str	r1, [r4, #0]
 800e5e8:	6063      	str	r3, [r4, #4]
 800e5ea:	6054      	str	r4, [r2, #4]
 800e5ec:	e7ca      	b.n	800e584 <_free_r+0x24>
 800e5ee:	46c0      	nop			@ (mov r8, r8)
 800e5f0:	200018b4 	.word	0x200018b4

0800e5f4 <malloc>:
 800e5f4:	b510      	push	{r4, lr}
 800e5f6:	4b03      	ldr	r3, [pc, #12]	@ (800e604 <malloc+0x10>)
 800e5f8:	0001      	movs	r1, r0
 800e5fa:	6818      	ldr	r0, [r3, #0]
 800e5fc:	f000 f826 	bl	800e64c <_malloc_r>
 800e600:	bd10      	pop	{r4, pc}
 800e602:	46c0      	nop			@ (mov r8, r8)
 800e604:	20000054 	.word	0x20000054

0800e608 <sbrk_aligned>:
 800e608:	b570      	push	{r4, r5, r6, lr}
 800e60a:	4e0f      	ldr	r6, [pc, #60]	@ (800e648 <sbrk_aligned+0x40>)
 800e60c:	000d      	movs	r5, r1
 800e60e:	6831      	ldr	r1, [r6, #0]
 800e610:	0004      	movs	r4, r0
 800e612:	2900      	cmp	r1, #0
 800e614:	d102      	bne.n	800e61c <sbrk_aligned+0x14>
 800e616:	f001 f855 	bl	800f6c4 <_sbrk_r>
 800e61a:	6030      	str	r0, [r6, #0]
 800e61c:	0029      	movs	r1, r5
 800e61e:	0020      	movs	r0, r4
 800e620:	f001 f850 	bl	800f6c4 <_sbrk_r>
 800e624:	1c43      	adds	r3, r0, #1
 800e626:	d103      	bne.n	800e630 <sbrk_aligned+0x28>
 800e628:	2501      	movs	r5, #1
 800e62a:	426d      	negs	r5, r5
 800e62c:	0028      	movs	r0, r5
 800e62e:	bd70      	pop	{r4, r5, r6, pc}
 800e630:	2303      	movs	r3, #3
 800e632:	1cc5      	adds	r5, r0, #3
 800e634:	439d      	bics	r5, r3
 800e636:	42a8      	cmp	r0, r5
 800e638:	d0f8      	beq.n	800e62c <sbrk_aligned+0x24>
 800e63a:	1a29      	subs	r1, r5, r0
 800e63c:	0020      	movs	r0, r4
 800e63e:	f001 f841 	bl	800f6c4 <_sbrk_r>
 800e642:	3001      	adds	r0, #1
 800e644:	d1f2      	bne.n	800e62c <sbrk_aligned+0x24>
 800e646:	e7ef      	b.n	800e628 <sbrk_aligned+0x20>
 800e648:	200018b0 	.word	0x200018b0

0800e64c <_malloc_r>:
 800e64c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e64e:	2203      	movs	r2, #3
 800e650:	1ccb      	adds	r3, r1, #3
 800e652:	4393      	bics	r3, r2
 800e654:	3308      	adds	r3, #8
 800e656:	0005      	movs	r5, r0
 800e658:	001f      	movs	r7, r3
 800e65a:	2b0c      	cmp	r3, #12
 800e65c:	d234      	bcs.n	800e6c8 <_malloc_r+0x7c>
 800e65e:	270c      	movs	r7, #12
 800e660:	42b9      	cmp	r1, r7
 800e662:	d833      	bhi.n	800e6cc <_malloc_r+0x80>
 800e664:	0028      	movs	r0, r5
 800e666:	f000 f871 	bl	800e74c <__malloc_lock>
 800e66a:	4e37      	ldr	r6, [pc, #220]	@ (800e748 <_malloc_r+0xfc>)
 800e66c:	6833      	ldr	r3, [r6, #0]
 800e66e:	001c      	movs	r4, r3
 800e670:	2c00      	cmp	r4, #0
 800e672:	d12f      	bne.n	800e6d4 <_malloc_r+0x88>
 800e674:	0039      	movs	r1, r7
 800e676:	0028      	movs	r0, r5
 800e678:	f7ff ffc6 	bl	800e608 <sbrk_aligned>
 800e67c:	0004      	movs	r4, r0
 800e67e:	1c43      	adds	r3, r0, #1
 800e680:	d15f      	bne.n	800e742 <_malloc_r+0xf6>
 800e682:	6834      	ldr	r4, [r6, #0]
 800e684:	9400      	str	r4, [sp, #0]
 800e686:	9b00      	ldr	r3, [sp, #0]
 800e688:	2b00      	cmp	r3, #0
 800e68a:	d14a      	bne.n	800e722 <_malloc_r+0xd6>
 800e68c:	2c00      	cmp	r4, #0
 800e68e:	d052      	beq.n	800e736 <_malloc_r+0xea>
 800e690:	6823      	ldr	r3, [r4, #0]
 800e692:	0028      	movs	r0, r5
 800e694:	18e3      	adds	r3, r4, r3
 800e696:	9900      	ldr	r1, [sp, #0]
 800e698:	9301      	str	r3, [sp, #4]
 800e69a:	f001 f813 	bl	800f6c4 <_sbrk_r>
 800e69e:	9b01      	ldr	r3, [sp, #4]
 800e6a0:	4283      	cmp	r3, r0
 800e6a2:	d148      	bne.n	800e736 <_malloc_r+0xea>
 800e6a4:	6823      	ldr	r3, [r4, #0]
 800e6a6:	0028      	movs	r0, r5
 800e6a8:	1aff      	subs	r7, r7, r3
 800e6aa:	0039      	movs	r1, r7
 800e6ac:	f7ff ffac 	bl	800e608 <sbrk_aligned>
 800e6b0:	3001      	adds	r0, #1
 800e6b2:	d040      	beq.n	800e736 <_malloc_r+0xea>
 800e6b4:	6823      	ldr	r3, [r4, #0]
 800e6b6:	19db      	adds	r3, r3, r7
 800e6b8:	6023      	str	r3, [r4, #0]
 800e6ba:	6833      	ldr	r3, [r6, #0]
 800e6bc:	685a      	ldr	r2, [r3, #4]
 800e6be:	2a00      	cmp	r2, #0
 800e6c0:	d133      	bne.n	800e72a <_malloc_r+0xde>
 800e6c2:	9b00      	ldr	r3, [sp, #0]
 800e6c4:	6033      	str	r3, [r6, #0]
 800e6c6:	e019      	b.n	800e6fc <_malloc_r+0xb0>
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	dac9      	bge.n	800e660 <_malloc_r+0x14>
 800e6cc:	230c      	movs	r3, #12
 800e6ce:	602b      	str	r3, [r5, #0]
 800e6d0:	2000      	movs	r0, #0
 800e6d2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800e6d4:	6821      	ldr	r1, [r4, #0]
 800e6d6:	1bc9      	subs	r1, r1, r7
 800e6d8:	d420      	bmi.n	800e71c <_malloc_r+0xd0>
 800e6da:	290b      	cmp	r1, #11
 800e6dc:	d90a      	bls.n	800e6f4 <_malloc_r+0xa8>
 800e6de:	19e2      	adds	r2, r4, r7
 800e6e0:	6027      	str	r7, [r4, #0]
 800e6e2:	42a3      	cmp	r3, r4
 800e6e4:	d104      	bne.n	800e6f0 <_malloc_r+0xa4>
 800e6e6:	6032      	str	r2, [r6, #0]
 800e6e8:	6863      	ldr	r3, [r4, #4]
 800e6ea:	6011      	str	r1, [r2, #0]
 800e6ec:	6053      	str	r3, [r2, #4]
 800e6ee:	e005      	b.n	800e6fc <_malloc_r+0xb0>
 800e6f0:	605a      	str	r2, [r3, #4]
 800e6f2:	e7f9      	b.n	800e6e8 <_malloc_r+0x9c>
 800e6f4:	6862      	ldr	r2, [r4, #4]
 800e6f6:	42a3      	cmp	r3, r4
 800e6f8:	d10e      	bne.n	800e718 <_malloc_r+0xcc>
 800e6fa:	6032      	str	r2, [r6, #0]
 800e6fc:	0028      	movs	r0, r5
 800e6fe:	f000 f82d 	bl	800e75c <__malloc_unlock>
 800e702:	0020      	movs	r0, r4
 800e704:	2207      	movs	r2, #7
 800e706:	300b      	adds	r0, #11
 800e708:	1d23      	adds	r3, r4, #4
 800e70a:	4390      	bics	r0, r2
 800e70c:	1ac2      	subs	r2, r0, r3
 800e70e:	4298      	cmp	r0, r3
 800e710:	d0df      	beq.n	800e6d2 <_malloc_r+0x86>
 800e712:	1a1b      	subs	r3, r3, r0
 800e714:	50a3      	str	r3, [r4, r2]
 800e716:	e7dc      	b.n	800e6d2 <_malloc_r+0x86>
 800e718:	605a      	str	r2, [r3, #4]
 800e71a:	e7ef      	b.n	800e6fc <_malloc_r+0xb0>
 800e71c:	0023      	movs	r3, r4
 800e71e:	6864      	ldr	r4, [r4, #4]
 800e720:	e7a6      	b.n	800e670 <_malloc_r+0x24>
 800e722:	9c00      	ldr	r4, [sp, #0]
 800e724:	6863      	ldr	r3, [r4, #4]
 800e726:	9300      	str	r3, [sp, #0]
 800e728:	e7ad      	b.n	800e686 <_malloc_r+0x3a>
 800e72a:	001a      	movs	r2, r3
 800e72c:	685b      	ldr	r3, [r3, #4]
 800e72e:	42a3      	cmp	r3, r4
 800e730:	d1fb      	bne.n	800e72a <_malloc_r+0xde>
 800e732:	2300      	movs	r3, #0
 800e734:	e7da      	b.n	800e6ec <_malloc_r+0xa0>
 800e736:	230c      	movs	r3, #12
 800e738:	0028      	movs	r0, r5
 800e73a:	602b      	str	r3, [r5, #0]
 800e73c:	f000 f80e 	bl	800e75c <__malloc_unlock>
 800e740:	e7c6      	b.n	800e6d0 <_malloc_r+0x84>
 800e742:	6007      	str	r7, [r0, #0]
 800e744:	e7da      	b.n	800e6fc <_malloc_r+0xb0>
 800e746:	46c0      	nop			@ (mov r8, r8)
 800e748:	200018b4 	.word	0x200018b4

0800e74c <__malloc_lock>:
 800e74c:	b510      	push	{r4, lr}
 800e74e:	4802      	ldr	r0, [pc, #8]	@ (800e758 <__malloc_lock+0xc>)
 800e750:	f7ff f86d 	bl	800d82e <__retarget_lock_acquire_recursive>
 800e754:	bd10      	pop	{r4, pc}
 800e756:	46c0      	nop			@ (mov r8, r8)
 800e758:	200018ac 	.word	0x200018ac

0800e75c <__malloc_unlock>:
 800e75c:	b510      	push	{r4, lr}
 800e75e:	4802      	ldr	r0, [pc, #8]	@ (800e768 <__malloc_unlock+0xc>)
 800e760:	f7ff f866 	bl	800d830 <__retarget_lock_release_recursive>
 800e764:	bd10      	pop	{r4, pc}
 800e766:	46c0      	nop			@ (mov r8, r8)
 800e768:	200018ac 	.word	0x200018ac

0800e76c <_Balloc>:
 800e76c:	b570      	push	{r4, r5, r6, lr}
 800e76e:	69c5      	ldr	r5, [r0, #28]
 800e770:	0006      	movs	r6, r0
 800e772:	000c      	movs	r4, r1
 800e774:	2d00      	cmp	r5, #0
 800e776:	d10e      	bne.n	800e796 <_Balloc+0x2a>
 800e778:	2010      	movs	r0, #16
 800e77a:	f7ff ff3b 	bl	800e5f4 <malloc>
 800e77e:	1e02      	subs	r2, r0, #0
 800e780:	61f0      	str	r0, [r6, #28]
 800e782:	d104      	bne.n	800e78e <_Balloc+0x22>
 800e784:	216b      	movs	r1, #107	@ 0x6b
 800e786:	4b19      	ldr	r3, [pc, #100]	@ (800e7ec <_Balloc+0x80>)
 800e788:	4819      	ldr	r0, [pc, #100]	@ (800e7f0 <_Balloc+0x84>)
 800e78a:	f000 ffad 	bl	800f6e8 <__assert_func>
 800e78e:	6045      	str	r5, [r0, #4]
 800e790:	6085      	str	r5, [r0, #8]
 800e792:	6005      	str	r5, [r0, #0]
 800e794:	60c5      	str	r5, [r0, #12]
 800e796:	69f5      	ldr	r5, [r6, #28]
 800e798:	68eb      	ldr	r3, [r5, #12]
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	d013      	beq.n	800e7c6 <_Balloc+0x5a>
 800e79e:	69f3      	ldr	r3, [r6, #28]
 800e7a0:	00a2      	lsls	r2, r4, #2
 800e7a2:	68db      	ldr	r3, [r3, #12]
 800e7a4:	189b      	adds	r3, r3, r2
 800e7a6:	6818      	ldr	r0, [r3, #0]
 800e7a8:	2800      	cmp	r0, #0
 800e7aa:	d118      	bne.n	800e7de <_Balloc+0x72>
 800e7ac:	2101      	movs	r1, #1
 800e7ae:	000d      	movs	r5, r1
 800e7b0:	40a5      	lsls	r5, r4
 800e7b2:	1d6a      	adds	r2, r5, #5
 800e7b4:	0030      	movs	r0, r6
 800e7b6:	0092      	lsls	r2, r2, #2
 800e7b8:	f000 ffb4 	bl	800f724 <_calloc_r>
 800e7bc:	2800      	cmp	r0, #0
 800e7be:	d00c      	beq.n	800e7da <_Balloc+0x6e>
 800e7c0:	6044      	str	r4, [r0, #4]
 800e7c2:	6085      	str	r5, [r0, #8]
 800e7c4:	e00d      	b.n	800e7e2 <_Balloc+0x76>
 800e7c6:	2221      	movs	r2, #33	@ 0x21
 800e7c8:	2104      	movs	r1, #4
 800e7ca:	0030      	movs	r0, r6
 800e7cc:	f000 ffaa 	bl	800f724 <_calloc_r>
 800e7d0:	69f3      	ldr	r3, [r6, #28]
 800e7d2:	60e8      	str	r0, [r5, #12]
 800e7d4:	68db      	ldr	r3, [r3, #12]
 800e7d6:	2b00      	cmp	r3, #0
 800e7d8:	d1e1      	bne.n	800e79e <_Balloc+0x32>
 800e7da:	2000      	movs	r0, #0
 800e7dc:	bd70      	pop	{r4, r5, r6, pc}
 800e7de:	6802      	ldr	r2, [r0, #0]
 800e7e0:	601a      	str	r2, [r3, #0]
 800e7e2:	2300      	movs	r3, #0
 800e7e4:	6103      	str	r3, [r0, #16]
 800e7e6:	60c3      	str	r3, [r0, #12]
 800e7e8:	e7f8      	b.n	800e7dc <_Balloc+0x70>
 800e7ea:	46c0      	nop			@ (mov r8, r8)
 800e7ec:	08010625 	.word	0x08010625
 800e7f0:	080106a5 	.word	0x080106a5

0800e7f4 <_Bfree>:
 800e7f4:	b570      	push	{r4, r5, r6, lr}
 800e7f6:	69c6      	ldr	r6, [r0, #28]
 800e7f8:	0005      	movs	r5, r0
 800e7fa:	000c      	movs	r4, r1
 800e7fc:	2e00      	cmp	r6, #0
 800e7fe:	d10e      	bne.n	800e81e <_Bfree+0x2a>
 800e800:	2010      	movs	r0, #16
 800e802:	f7ff fef7 	bl	800e5f4 <malloc>
 800e806:	1e02      	subs	r2, r0, #0
 800e808:	61e8      	str	r0, [r5, #28]
 800e80a:	d104      	bne.n	800e816 <_Bfree+0x22>
 800e80c:	218f      	movs	r1, #143	@ 0x8f
 800e80e:	4b09      	ldr	r3, [pc, #36]	@ (800e834 <_Bfree+0x40>)
 800e810:	4809      	ldr	r0, [pc, #36]	@ (800e838 <_Bfree+0x44>)
 800e812:	f000 ff69 	bl	800f6e8 <__assert_func>
 800e816:	6046      	str	r6, [r0, #4]
 800e818:	6086      	str	r6, [r0, #8]
 800e81a:	6006      	str	r6, [r0, #0]
 800e81c:	60c6      	str	r6, [r0, #12]
 800e81e:	2c00      	cmp	r4, #0
 800e820:	d007      	beq.n	800e832 <_Bfree+0x3e>
 800e822:	69eb      	ldr	r3, [r5, #28]
 800e824:	6862      	ldr	r2, [r4, #4]
 800e826:	68db      	ldr	r3, [r3, #12]
 800e828:	0092      	lsls	r2, r2, #2
 800e82a:	189b      	adds	r3, r3, r2
 800e82c:	681a      	ldr	r2, [r3, #0]
 800e82e:	6022      	str	r2, [r4, #0]
 800e830:	601c      	str	r4, [r3, #0]
 800e832:	bd70      	pop	{r4, r5, r6, pc}
 800e834:	08010625 	.word	0x08010625
 800e838:	080106a5 	.word	0x080106a5

0800e83c <__multadd>:
 800e83c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e83e:	000f      	movs	r7, r1
 800e840:	9001      	str	r0, [sp, #4]
 800e842:	000c      	movs	r4, r1
 800e844:	001e      	movs	r6, r3
 800e846:	2000      	movs	r0, #0
 800e848:	690d      	ldr	r5, [r1, #16]
 800e84a:	3714      	adds	r7, #20
 800e84c:	683b      	ldr	r3, [r7, #0]
 800e84e:	3001      	adds	r0, #1
 800e850:	b299      	uxth	r1, r3
 800e852:	4351      	muls	r1, r2
 800e854:	0c1b      	lsrs	r3, r3, #16
 800e856:	4353      	muls	r3, r2
 800e858:	1989      	adds	r1, r1, r6
 800e85a:	0c0e      	lsrs	r6, r1, #16
 800e85c:	199b      	adds	r3, r3, r6
 800e85e:	0c1e      	lsrs	r6, r3, #16
 800e860:	b289      	uxth	r1, r1
 800e862:	041b      	lsls	r3, r3, #16
 800e864:	185b      	adds	r3, r3, r1
 800e866:	c708      	stmia	r7!, {r3}
 800e868:	4285      	cmp	r5, r0
 800e86a:	dcef      	bgt.n	800e84c <__multadd+0x10>
 800e86c:	2e00      	cmp	r6, #0
 800e86e:	d022      	beq.n	800e8b6 <__multadd+0x7a>
 800e870:	68a3      	ldr	r3, [r4, #8]
 800e872:	42ab      	cmp	r3, r5
 800e874:	dc19      	bgt.n	800e8aa <__multadd+0x6e>
 800e876:	6861      	ldr	r1, [r4, #4]
 800e878:	9801      	ldr	r0, [sp, #4]
 800e87a:	3101      	adds	r1, #1
 800e87c:	f7ff ff76 	bl	800e76c <_Balloc>
 800e880:	1e07      	subs	r7, r0, #0
 800e882:	d105      	bne.n	800e890 <__multadd+0x54>
 800e884:	003a      	movs	r2, r7
 800e886:	21ba      	movs	r1, #186	@ 0xba
 800e888:	4b0c      	ldr	r3, [pc, #48]	@ (800e8bc <__multadd+0x80>)
 800e88a:	480d      	ldr	r0, [pc, #52]	@ (800e8c0 <__multadd+0x84>)
 800e88c:	f000 ff2c 	bl	800f6e8 <__assert_func>
 800e890:	0021      	movs	r1, r4
 800e892:	6922      	ldr	r2, [r4, #16]
 800e894:	310c      	adds	r1, #12
 800e896:	3202      	adds	r2, #2
 800e898:	0092      	lsls	r2, r2, #2
 800e89a:	300c      	adds	r0, #12
 800e89c:	f7fe ffd4 	bl	800d848 <memcpy>
 800e8a0:	0021      	movs	r1, r4
 800e8a2:	9801      	ldr	r0, [sp, #4]
 800e8a4:	f7ff ffa6 	bl	800e7f4 <_Bfree>
 800e8a8:	003c      	movs	r4, r7
 800e8aa:	1d2b      	adds	r3, r5, #4
 800e8ac:	009b      	lsls	r3, r3, #2
 800e8ae:	18e3      	adds	r3, r4, r3
 800e8b0:	3501      	adds	r5, #1
 800e8b2:	605e      	str	r6, [r3, #4]
 800e8b4:	6125      	str	r5, [r4, #16]
 800e8b6:	0020      	movs	r0, r4
 800e8b8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800e8ba:	46c0      	nop			@ (mov r8, r8)
 800e8bc:	08010694 	.word	0x08010694
 800e8c0:	080106a5 	.word	0x080106a5

0800e8c4 <__hi0bits>:
 800e8c4:	2280      	movs	r2, #128	@ 0x80
 800e8c6:	0003      	movs	r3, r0
 800e8c8:	0252      	lsls	r2, r2, #9
 800e8ca:	2000      	movs	r0, #0
 800e8cc:	4293      	cmp	r3, r2
 800e8ce:	d201      	bcs.n	800e8d4 <__hi0bits+0x10>
 800e8d0:	041b      	lsls	r3, r3, #16
 800e8d2:	3010      	adds	r0, #16
 800e8d4:	2280      	movs	r2, #128	@ 0x80
 800e8d6:	0452      	lsls	r2, r2, #17
 800e8d8:	4293      	cmp	r3, r2
 800e8da:	d201      	bcs.n	800e8e0 <__hi0bits+0x1c>
 800e8dc:	3008      	adds	r0, #8
 800e8de:	021b      	lsls	r3, r3, #8
 800e8e0:	2280      	movs	r2, #128	@ 0x80
 800e8e2:	0552      	lsls	r2, r2, #21
 800e8e4:	4293      	cmp	r3, r2
 800e8e6:	d201      	bcs.n	800e8ec <__hi0bits+0x28>
 800e8e8:	3004      	adds	r0, #4
 800e8ea:	011b      	lsls	r3, r3, #4
 800e8ec:	2280      	movs	r2, #128	@ 0x80
 800e8ee:	05d2      	lsls	r2, r2, #23
 800e8f0:	4293      	cmp	r3, r2
 800e8f2:	d201      	bcs.n	800e8f8 <__hi0bits+0x34>
 800e8f4:	3002      	adds	r0, #2
 800e8f6:	009b      	lsls	r3, r3, #2
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	db03      	blt.n	800e904 <__hi0bits+0x40>
 800e8fc:	3001      	adds	r0, #1
 800e8fe:	4213      	tst	r3, r2
 800e900:	d100      	bne.n	800e904 <__hi0bits+0x40>
 800e902:	2020      	movs	r0, #32
 800e904:	4770      	bx	lr

0800e906 <__lo0bits>:
 800e906:	6803      	ldr	r3, [r0, #0]
 800e908:	0001      	movs	r1, r0
 800e90a:	2207      	movs	r2, #7
 800e90c:	0018      	movs	r0, r3
 800e90e:	4010      	ands	r0, r2
 800e910:	4213      	tst	r3, r2
 800e912:	d00d      	beq.n	800e930 <__lo0bits+0x2a>
 800e914:	3a06      	subs	r2, #6
 800e916:	2000      	movs	r0, #0
 800e918:	4213      	tst	r3, r2
 800e91a:	d105      	bne.n	800e928 <__lo0bits+0x22>
 800e91c:	3002      	adds	r0, #2
 800e91e:	4203      	tst	r3, r0
 800e920:	d003      	beq.n	800e92a <__lo0bits+0x24>
 800e922:	40d3      	lsrs	r3, r2
 800e924:	0010      	movs	r0, r2
 800e926:	600b      	str	r3, [r1, #0]
 800e928:	4770      	bx	lr
 800e92a:	089b      	lsrs	r3, r3, #2
 800e92c:	600b      	str	r3, [r1, #0]
 800e92e:	e7fb      	b.n	800e928 <__lo0bits+0x22>
 800e930:	b29a      	uxth	r2, r3
 800e932:	2a00      	cmp	r2, #0
 800e934:	d101      	bne.n	800e93a <__lo0bits+0x34>
 800e936:	2010      	movs	r0, #16
 800e938:	0c1b      	lsrs	r3, r3, #16
 800e93a:	b2da      	uxtb	r2, r3
 800e93c:	2a00      	cmp	r2, #0
 800e93e:	d101      	bne.n	800e944 <__lo0bits+0x3e>
 800e940:	3008      	adds	r0, #8
 800e942:	0a1b      	lsrs	r3, r3, #8
 800e944:	071a      	lsls	r2, r3, #28
 800e946:	d101      	bne.n	800e94c <__lo0bits+0x46>
 800e948:	3004      	adds	r0, #4
 800e94a:	091b      	lsrs	r3, r3, #4
 800e94c:	079a      	lsls	r2, r3, #30
 800e94e:	d101      	bne.n	800e954 <__lo0bits+0x4e>
 800e950:	3002      	adds	r0, #2
 800e952:	089b      	lsrs	r3, r3, #2
 800e954:	07da      	lsls	r2, r3, #31
 800e956:	d4e9      	bmi.n	800e92c <__lo0bits+0x26>
 800e958:	3001      	adds	r0, #1
 800e95a:	085b      	lsrs	r3, r3, #1
 800e95c:	d1e6      	bne.n	800e92c <__lo0bits+0x26>
 800e95e:	2020      	movs	r0, #32
 800e960:	e7e2      	b.n	800e928 <__lo0bits+0x22>
	...

0800e964 <__i2b>:
 800e964:	b510      	push	{r4, lr}
 800e966:	000c      	movs	r4, r1
 800e968:	2101      	movs	r1, #1
 800e96a:	f7ff feff 	bl	800e76c <_Balloc>
 800e96e:	2800      	cmp	r0, #0
 800e970:	d107      	bne.n	800e982 <__i2b+0x1e>
 800e972:	2146      	movs	r1, #70	@ 0x46
 800e974:	4c05      	ldr	r4, [pc, #20]	@ (800e98c <__i2b+0x28>)
 800e976:	0002      	movs	r2, r0
 800e978:	4b05      	ldr	r3, [pc, #20]	@ (800e990 <__i2b+0x2c>)
 800e97a:	0020      	movs	r0, r4
 800e97c:	31ff      	adds	r1, #255	@ 0xff
 800e97e:	f000 feb3 	bl	800f6e8 <__assert_func>
 800e982:	2301      	movs	r3, #1
 800e984:	6144      	str	r4, [r0, #20]
 800e986:	6103      	str	r3, [r0, #16]
 800e988:	bd10      	pop	{r4, pc}
 800e98a:	46c0      	nop			@ (mov r8, r8)
 800e98c:	080106a5 	.word	0x080106a5
 800e990:	08010694 	.word	0x08010694

0800e994 <__multiply>:
 800e994:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e996:	0014      	movs	r4, r2
 800e998:	690a      	ldr	r2, [r1, #16]
 800e99a:	6923      	ldr	r3, [r4, #16]
 800e99c:	000d      	movs	r5, r1
 800e99e:	b08b      	sub	sp, #44	@ 0x2c
 800e9a0:	429a      	cmp	r2, r3
 800e9a2:	db02      	blt.n	800e9aa <__multiply+0x16>
 800e9a4:	0023      	movs	r3, r4
 800e9a6:	000c      	movs	r4, r1
 800e9a8:	001d      	movs	r5, r3
 800e9aa:	6927      	ldr	r7, [r4, #16]
 800e9ac:	692e      	ldr	r6, [r5, #16]
 800e9ae:	6861      	ldr	r1, [r4, #4]
 800e9b0:	19bb      	adds	r3, r7, r6
 800e9b2:	9303      	str	r3, [sp, #12]
 800e9b4:	68a3      	ldr	r3, [r4, #8]
 800e9b6:	19ba      	adds	r2, r7, r6
 800e9b8:	4293      	cmp	r3, r2
 800e9ba:	da00      	bge.n	800e9be <__multiply+0x2a>
 800e9bc:	3101      	adds	r1, #1
 800e9be:	f7ff fed5 	bl	800e76c <_Balloc>
 800e9c2:	9002      	str	r0, [sp, #8]
 800e9c4:	2800      	cmp	r0, #0
 800e9c6:	d106      	bne.n	800e9d6 <__multiply+0x42>
 800e9c8:	21b1      	movs	r1, #177	@ 0xb1
 800e9ca:	4b49      	ldr	r3, [pc, #292]	@ (800eaf0 <__multiply+0x15c>)
 800e9cc:	4849      	ldr	r0, [pc, #292]	@ (800eaf4 <__multiply+0x160>)
 800e9ce:	9a02      	ldr	r2, [sp, #8]
 800e9d0:	0049      	lsls	r1, r1, #1
 800e9d2:	f000 fe89 	bl	800f6e8 <__assert_func>
 800e9d6:	9b02      	ldr	r3, [sp, #8]
 800e9d8:	2200      	movs	r2, #0
 800e9da:	3314      	adds	r3, #20
 800e9dc:	469c      	mov	ip, r3
 800e9de:	19bb      	adds	r3, r7, r6
 800e9e0:	009b      	lsls	r3, r3, #2
 800e9e2:	4463      	add	r3, ip
 800e9e4:	9304      	str	r3, [sp, #16]
 800e9e6:	4663      	mov	r3, ip
 800e9e8:	9904      	ldr	r1, [sp, #16]
 800e9ea:	428b      	cmp	r3, r1
 800e9ec:	d32a      	bcc.n	800ea44 <__multiply+0xb0>
 800e9ee:	0023      	movs	r3, r4
 800e9f0:	00bf      	lsls	r7, r7, #2
 800e9f2:	3314      	adds	r3, #20
 800e9f4:	3514      	adds	r5, #20
 800e9f6:	9308      	str	r3, [sp, #32]
 800e9f8:	00b6      	lsls	r6, r6, #2
 800e9fa:	19db      	adds	r3, r3, r7
 800e9fc:	9305      	str	r3, [sp, #20]
 800e9fe:	19ab      	adds	r3, r5, r6
 800ea00:	9309      	str	r3, [sp, #36]	@ 0x24
 800ea02:	2304      	movs	r3, #4
 800ea04:	9306      	str	r3, [sp, #24]
 800ea06:	0023      	movs	r3, r4
 800ea08:	9a05      	ldr	r2, [sp, #20]
 800ea0a:	3315      	adds	r3, #21
 800ea0c:	9501      	str	r5, [sp, #4]
 800ea0e:	429a      	cmp	r2, r3
 800ea10:	d305      	bcc.n	800ea1e <__multiply+0x8a>
 800ea12:	1b13      	subs	r3, r2, r4
 800ea14:	3b15      	subs	r3, #21
 800ea16:	089b      	lsrs	r3, r3, #2
 800ea18:	3301      	adds	r3, #1
 800ea1a:	009b      	lsls	r3, r3, #2
 800ea1c:	9306      	str	r3, [sp, #24]
 800ea1e:	9b01      	ldr	r3, [sp, #4]
 800ea20:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ea22:	4293      	cmp	r3, r2
 800ea24:	d310      	bcc.n	800ea48 <__multiply+0xb4>
 800ea26:	9b03      	ldr	r3, [sp, #12]
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	dd05      	ble.n	800ea38 <__multiply+0xa4>
 800ea2c:	9b04      	ldr	r3, [sp, #16]
 800ea2e:	3b04      	subs	r3, #4
 800ea30:	9304      	str	r3, [sp, #16]
 800ea32:	681b      	ldr	r3, [r3, #0]
 800ea34:	2b00      	cmp	r3, #0
 800ea36:	d056      	beq.n	800eae6 <__multiply+0x152>
 800ea38:	9b02      	ldr	r3, [sp, #8]
 800ea3a:	9a03      	ldr	r2, [sp, #12]
 800ea3c:	0018      	movs	r0, r3
 800ea3e:	611a      	str	r2, [r3, #16]
 800ea40:	b00b      	add	sp, #44	@ 0x2c
 800ea42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ea44:	c304      	stmia	r3!, {r2}
 800ea46:	e7cf      	b.n	800e9e8 <__multiply+0x54>
 800ea48:	9b01      	ldr	r3, [sp, #4]
 800ea4a:	6818      	ldr	r0, [r3, #0]
 800ea4c:	b280      	uxth	r0, r0
 800ea4e:	2800      	cmp	r0, #0
 800ea50:	d01e      	beq.n	800ea90 <__multiply+0xfc>
 800ea52:	4667      	mov	r7, ip
 800ea54:	2500      	movs	r5, #0
 800ea56:	9e08      	ldr	r6, [sp, #32]
 800ea58:	ce02      	ldmia	r6!, {r1}
 800ea5a:	683b      	ldr	r3, [r7, #0]
 800ea5c:	9307      	str	r3, [sp, #28]
 800ea5e:	b28b      	uxth	r3, r1
 800ea60:	4343      	muls	r3, r0
 800ea62:	001a      	movs	r2, r3
 800ea64:	466b      	mov	r3, sp
 800ea66:	0c09      	lsrs	r1, r1, #16
 800ea68:	8b9b      	ldrh	r3, [r3, #28]
 800ea6a:	4341      	muls	r1, r0
 800ea6c:	18d3      	adds	r3, r2, r3
 800ea6e:	9a07      	ldr	r2, [sp, #28]
 800ea70:	195b      	adds	r3, r3, r5
 800ea72:	0c12      	lsrs	r2, r2, #16
 800ea74:	1889      	adds	r1, r1, r2
 800ea76:	0c1a      	lsrs	r2, r3, #16
 800ea78:	188a      	adds	r2, r1, r2
 800ea7a:	b29b      	uxth	r3, r3
 800ea7c:	0c15      	lsrs	r5, r2, #16
 800ea7e:	0412      	lsls	r2, r2, #16
 800ea80:	431a      	orrs	r2, r3
 800ea82:	9b05      	ldr	r3, [sp, #20]
 800ea84:	c704      	stmia	r7!, {r2}
 800ea86:	42b3      	cmp	r3, r6
 800ea88:	d8e6      	bhi.n	800ea58 <__multiply+0xc4>
 800ea8a:	4663      	mov	r3, ip
 800ea8c:	9a06      	ldr	r2, [sp, #24]
 800ea8e:	509d      	str	r5, [r3, r2]
 800ea90:	9b01      	ldr	r3, [sp, #4]
 800ea92:	6818      	ldr	r0, [r3, #0]
 800ea94:	0c00      	lsrs	r0, r0, #16
 800ea96:	d020      	beq.n	800eada <__multiply+0x146>
 800ea98:	4663      	mov	r3, ip
 800ea9a:	0025      	movs	r5, r4
 800ea9c:	4661      	mov	r1, ip
 800ea9e:	2700      	movs	r7, #0
 800eaa0:	681b      	ldr	r3, [r3, #0]
 800eaa2:	3514      	adds	r5, #20
 800eaa4:	682a      	ldr	r2, [r5, #0]
 800eaa6:	680e      	ldr	r6, [r1, #0]
 800eaa8:	b292      	uxth	r2, r2
 800eaaa:	4342      	muls	r2, r0
 800eaac:	0c36      	lsrs	r6, r6, #16
 800eaae:	1992      	adds	r2, r2, r6
 800eab0:	19d2      	adds	r2, r2, r7
 800eab2:	0416      	lsls	r6, r2, #16
 800eab4:	b29b      	uxth	r3, r3
 800eab6:	431e      	orrs	r6, r3
 800eab8:	600e      	str	r6, [r1, #0]
 800eaba:	cd40      	ldmia	r5!, {r6}
 800eabc:	684b      	ldr	r3, [r1, #4]
 800eabe:	0c36      	lsrs	r6, r6, #16
 800eac0:	4346      	muls	r6, r0
 800eac2:	b29b      	uxth	r3, r3
 800eac4:	0c12      	lsrs	r2, r2, #16
 800eac6:	18f3      	adds	r3, r6, r3
 800eac8:	189b      	adds	r3, r3, r2
 800eaca:	9a05      	ldr	r2, [sp, #20]
 800eacc:	0c1f      	lsrs	r7, r3, #16
 800eace:	3104      	adds	r1, #4
 800ead0:	42aa      	cmp	r2, r5
 800ead2:	d8e7      	bhi.n	800eaa4 <__multiply+0x110>
 800ead4:	4662      	mov	r2, ip
 800ead6:	9906      	ldr	r1, [sp, #24]
 800ead8:	5053      	str	r3, [r2, r1]
 800eada:	9b01      	ldr	r3, [sp, #4]
 800eadc:	3304      	adds	r3, #4
 800eade:	9301      	str	r3, [sp, #4]
 800eae0:	2304      	movs	r3, #4
 800eae2:	449c      	add	ip, r3
 800eae4:	e79b      	b.n	800ea1e <__multiply+0x8a>
 800eae6:	9b03      	ldr	r3, [sp, #12]
 800eae8:	3b01      	subs	r3, #1
 800eaea:	9303      	str	r3, [sp, #12]
 800eaec:	e79b      	b.n	800ea26 <__multiply+0x92>
 800eaee:	46c0      	nop			@ (mov r8, r8)
 800eaf0:	08010694 	.word	0x08010694
 800eaf4:	080106a5 	.word	0x080106a5

0800eaf8 <__pow5mult>:
 800eaf8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800eafa:	2303      	movs	r3, #3
 800eafc:	0015      	movs	r5, r2
 800eafe:	0007      	movs	r7, r0
 800eb00:	000e      	movs	r6, r1
 800eb02:	401a      	ands	r2, r3
 800eb04:	421d      	tst	r5, r3
 800eb06:	d008      	beq.n	800eb1a <__pow5mult+0x22>
 800eb08:	4925      	ldr	r1, [pc, #148]	@ (800eba0 <__pow5mult+0xa8>)
 800eb0a:	3a01      	subs	r2, #1
 800eb0c:	0092      	lsls	r2, r2, #2
 800eb0e:	5852      	ldr	r2, [r2, r1]
 800eb10:	2300      	movs	r3, #0
 800eb12:	0031      	movs	r1, r6
 800eb14:	f7ff fe92 	bl	800e83c <__multadd>
 800eb18:	0006      	movs	r6, r0
 800eb1a:	10ad      	asrs	r5, r5, #2
 800eb1c:	d03d      	beq.n	800eb9a <__pow5mult+0xa2>
 800eb1e:	69fc      	ldr	r4, [r7, #28]
 800eb20:	2c00      	cmp	r4, #0
 800eb22:	d10f      	bne.n	800eb44 <__pow5mult+0x4c>
 800eb24:	2010      	movs	r0, #16
 800eb26:	f7ff fd65 	bl	800e5f4 <malloc>
 800eb2a:	1e02      	subs	r2, r0, #0
 800eb2c:	61f8      	str	r0, [r7, #28]
 800eb2e:	d105      	bne.n	800eb3c <__pow5mult+0x44>
 800eb30:	21b4      	movs	r1, #180	@ 0xb4
 800eb32:	4b1c      	ldr	r3, [pc, #112]	@ (800eba4 <__pow5mult+0xac>)
 800eb34:	481c      	ldr	r0, [pc, #112]	@ (800eba8 <__pow5mult+0xb0>)
 800eb36:	31ff      	adds	r1, #255	@ 0xff
 800eb38:	f000 fdd6 	bl	800f6e8 <__assert_func>
 800eb3c:	6044      	str	r4, [r0, #4]
 800eb3e:	6084      	str	r4, [r0, #8]
 800eb40:	6004      	str	r4, [r0, #0]
 800eb42:	60c4      	str	r4, [r0, #12]
 800eb44:	69fb      	ldr	r3, [r7, #28]
 800eb46:	689c      	ldr	r4, [r3, #8]
 800eb48:	9301      	str	r3, [sp, #4]
 800eb4a:	2c00      	cmp	r4, #0
 800eb4c:	d108      	bne.n	800eb60 <__pow5mult+0x68>
 800eb4e:	0038      	movs	r0, r7
 800eb50:	4916      	ldr	r1, [pc, #88]	@ (800ebac <__pow5mult+0xb4>)
 800eb52:	f7ff ff07 	bl	800e964 <__i2b>
 800eb56:	9b01      	ldr	r3, [sp, #4]
 800eb58:	0004      	movs	r4, r0
 800eb5a:	6098      	str	r0, [r3, #8]
 800eb5c:	2300      	movs	r3, #0
 800eb5e:	6003      	str	r3, [r0, #0]
 800eb60:	2301      	movs	r3, #1
 800eb62:	421d      	tst	r5, r3
 800eb64:	d00a      	beq.n	800eb7c <__pow5mult+0x84>
 800eb66:	0031      	movs	r1, r6
 800eb68:	0022      	movs	r2, r4
 800eb6a:	0038      	movs	r0, r7
 800eb6c:	f7ff ff12 	bl	800e994 <__multiply>
 800eb70:	0031      	movs	r1, r6
 800eb72:	9001      	str	r0, [sp, #4]
 800eb74:	0038      	movs	r0, r7
 800eb76:	f7ff fe3d 	bl	800e7f4 <_Bfree>
 800eb7a:	9e01      	ldr	r6, [sp, #4]
 800eb7c:	106d      	asrs	r5, r5, #1
 800eb7e:	d00c      	beq.n	800eb9a <__pow5mult+0xa2>
 800eb80:	6820      	ldr	r0, [r4, #0]
 800eb82:	2800      	cmp	r0, #0
 800eb84:	d107      	bne.n	800eb96 <__pow5mult+0x9e>
 800eb86:	0022      	movs	r2, r4
 800eb88:	0021      	movs	r1, r4
 800eb8a:	0038      	movs	r0, r7
 800eb8c:	f7ff ff02 	bl	800e994 <__multiply>
 800eb90:	2300      	movs	r3, #0
 800eb92:	6020      	str	r0, [r4, #0]
 800eb94:	6003      	str	r3, [r0, #0]
 800eb96:	0004      	movs	r4, r0
 800eb98:	e7e2      	b.n	800eb60 <__pow5mult+0x68>
 800eb9a:	0030      	movs	r0, r6
 800eb9c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800eb9e:	46c0      	nop			@ (mov r8, r8)
 800eba0:	08010700 	.word	0x08010700
 800eba4:	08010625 	.word	0x08010625
 800eba8:	080106a5 	.word	0x080106a5
 800ebac:	00000271 	.word	0x00000271

0800ebb0 <__lshift>:
 800ebb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ebb2:	000c      	movs	r4, r1
 800ebb4:	0016      	movs	r6, r2
 800ebb6:	6923      	ldr	r3, [r4, #16]
 800ebb8:	1157      	asrs	r7, r2, #5
 800ebba:	b085      	sub	sp, #20
 800ebbc:	18fb      	adds	r3, r7, r3
 800ebbe:	9301      	str	r3, [sp, #4]
 800ebc0:	3301      	adds	r3, #1
 800ebc2:	9300      	str	r3, [sp, #0]
 800ebc4:	6849      	ldr	r1, [r1, #4]
 800ebc6:	68a3      	ldr	r3, [r4, #8]
 800ebc8:	9002      	str	r0, [sp, #8]
 800ebca:	9a00      	ldr	r2, [sp, #0]
 800ebcc:	4293      	cmp	r3, r2
 800ebce:	db10      	blt.n	800ebf2 <__lshift+0x42>
 800ebd0:	9802      	ldr	r0, [sp, #8]
 800ebd2:	f7ff fdcb 	bl	800e76c <_Balloc>
 800ebd6:	2300      	movs	r3, #0
 800ebd8:	0001      	movs	r1, r0
 800ebda:	0005      	movs	r5, r0
 800ebdc:	001a      	movs	r2, r3
 800ebde:	3114      	adds	r1, #20
 800ebe0:	4298      	cmp	r0, r3
 800ebe2:	d10c      	bne.n	800ebfe <__lshift+0x4e>
 800ebe4:	21ef      	movs	r1, #239	@ 0xef
 800ebe6:	002a      	movs	r2, r5
 800ebe8:	4b25      	ldr	r3, [pc, #148]	@ (800ec80 <__lshift+0xd0>)
 800ebea:	4826      	ldr	r0, [pc, #152]	@ (800ec84 <__lshift+0xd4>)
 800ebec:	0049      	lsls	r1, r1, #1
 800ebee:	f000 fd7b 	bl	800f6e8 <__assert_func>
 800ebf2:	3101      	adds	r1, #1
 800ebf4:	005b      	lsls	r3, r3, #1
 800ebf6:	e7e8      	b.n	800ebca <__lshift+0x1a>
 800ebf8:	0098      	lsls	r0, r3, #2
 800ebfa:	500a      	str	r2, [r1, r0]
 800ebfc:	3301      	adds	r3, #1
 800ebfe:	42bb      	cmp	r3, r7
 800ec00:	dbfa      	blt.n	800ebf8 <__lshift+0x48>
 800ec02:	43fb      	mvns	r3, r7
 800ec04:	17db      	asrs	r3, r3, #31
 800ec06:	401f      	ands	r7, r3
 800ec08:	00bf      	lsls	r7, r7, #2
 800ec0a:	0023      	movs	r3, r4
 800ec0c:	201f      	movs	r0, #31
 800ec0e:	19c9      	adds	r1, r1, r7
 800ec10:	0037      	movs	r7, r6
 800ec12:	6922      	ldr	r2, [r4, #16]
 800ec14:	3314      	adds	r3, #20
 800ec16:	0092      	lsls	r2, r2, #2
 800ec18:	189a      	adds	r2, r3, r2
 800ec1a:	4007      	ands	r7, r0
 800ec1c:	4206      	tst	r6, r0
 800ec1e:	d029      	beq.n	800ec74 <__lshift+0xc4>
 800ec20:	3001      	adds	r0, #1
 800ec22:	1bc0      	subs	r0, r0, r7
 800ec24:	9003      	str	r0, [sp, #12]
 800ec26:	468c      	mov	ip, r1
 800ec28:	2000      	movs	r0, #0
 800ec2a:	681e      	ldr	r6, [r3, #0]
 800ec2c:	40be      	lsls	r6, r7
 800ec2e:	4306      	orrs	r6, r0
 800ec30:	4660      	mov	r0, ip
 800ec32:	c040      	stmia	r0!, {r6}
 800ec34:	4684      	mov	ip, r0
 800ec36:	9e03      	ldr	r6, [sp, #12]
 800ec38:	cb01      	ldmia	r3!, {r0}
 800ec3a:	40f0      	lsrs	r0, r6
 800ec3c:	429a      	cmp	r2, r3
 800ec3e:	d8f4      	bhi.n	800ec2a <__lshift+0x7a>
 800ec40:	0026      	movs	r6, r4
 800ec42:	3615      	adds	r6, #21
 800ec44:	2304      	movs	r3, #4
 800ec46:	42b2      	cmp	r2, r6
 800ec48:	d304      	bcc.n	800ec54 <__lshift+0xa4>
 800ec4a:	1b13      	subs	r3, r2, r4
 800ec4c:	3b15      	subs	r3, #21
 800ec4e:	089b      	lsrs	r3, r3, #2
 800ec50:	3301      	adds	r3, #1
 800ec52:	009b      	lsls	r3, r3, #2
 800ec54:	50c8      	str	r0, [r1, r3]
 800ec56:	2800      	cmp	r0, #0
 800ec58:	d002      	beq.n	800ec60 <__lshift+0xb0>
 800ec5a:	9b01      	ldr	r3, [sp, #4]
 800ec5c:	3302      	adds	r3, #2
 800ec5e:	9300      	str	r3, [sp, #0]
 800ec60:	9b00      	ldr	r3, [sp, #0]
 800ec62:	9802      	ldr	r0, [sp, #8]
 800ec64:	3b01      	subs	r3, #1
 800ec66:	0021      	movs	r1, r4
 800ec68:	612b      	str	r3, [r5, #16]
 800ec6a:	f7ff fdc3 	bl	800e7f4 <_Bfree>
 800ec6e:	0028      	movs	r0, r5
 800ec70:	b005      	add	sp, #20
 800ec72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ec74:	cb01      	ldmia	r3!, {r0}
 800ec76:	c101      	stmia	r1!, {r0}
 800ec78:	429a      	cmp	r2, r3
 800ec7a:	d8fb      	bhi.n	800ec74 <__lshift+0xc4>
 800ec7c:	e7f0      	b.n	800ec60 <__lshift+0xb0>
 800ec7e:	46c0      	nop			@ (mov r8, r8)
 800ec80:	08010694 	.word	0x08010694
 800ec84:	080106a5 	.word	0x080106a5

0800ec88 <__mcmp>:
 800ec88:	b530      	push	{r4, r5, lr}
 800ec8a:	690b      	ldr	r3, [r1, #16]
 800ec8c:	6904      	ldr	r4, [r0, #16]
 800ec8e:	0002      	movs	r2, r0
 800ec90:	1ae0      	subs	r0, r4, r3
 800ec92:	429c      	cmp	r4, r3
 800ec94:	d10f      	bne.n	800ecb6 <__mcmp+0x2e>
 800ec96:	3214      	adds	r2, #20
 800ec98:	009b      	lsls	r3, r3, #2
 800ec9a:	3114      	adds	r1, #20
 800ec9c:	0014      	movs	r4, r2
 800ec9e:	18c9      	adds	r1, r1, r3
 800eca0:	18d2      	adds	r2, r2, r3
 800eca2:	3a04      	subs	r2, #4
 800eca4:	3904      	subs	r1, #4
 800eca6:	6815      	ldr	r5, [r2, #0]
 800eca8:	680b      	ldr	r3, [r1, #0]
 800ecaa:	429d      	cmp	r5, r3
 800ecac:	d004      	beq.n	800ecb8 <__mcmp+0x30>
 800ecae:	2001      	movs	r0, #1
 800ecb0:	429d      	cmp	r5, r3
 800ecb2:	d200      	bcs.n	800ecb6 <__mcmp+0x2e>
 800ecb4:	3802      	subs	r0, #2
 800ecb6:	bd30      	pop	{r4, r5, pc}
 800ecb8:	4294      	cmp	r4, r2
 800ecba:	d3f2      	bcc.n	800eca2 <__mcmp+0x1a>
 800ecbc:	e7fb      	b.n	800ecb6 <__mcmp+0x2e>
	...

0800ecc0 <__mdiff>:
 800ecc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ecc2:	000c      	movs	r4, r1
 800ecc4:	b087      	sub	sp, #28
 800ecc6:	9000      	str	r0, [sp, #0]
 800ecc8:	0011      	movs	r1, r2
 800ecca:	0020      	movs	r0, r4
 800eccc:	0017      	movs	r7, r2
 800ecce:	f7ff ffdb 	bl	800ec88 <__mcmp>
 800ecd2:	1e05      	subs	r5, r0, #0
 800ecd4:	d110      	bne.n	800ecf8 <__mdiff+0x38>
 800ecd6:	0001      	movs	r1, r0
 800ecd8:	9800      	ldr	r0, [sp, #0]
 800ecda:	f7ff fd47 	bl	800e76c <_Balloc>
 800ecde:	1e02      	subs	r2, r0, #0
 800ece0:	d104      	bne.n	800ecec <__mdiff+0x2c>
 800ece2:	4b40      	ldr	r3, [pc, #256]	@ (800ede4 <__mdiff+0x124>)
 800ece4:	4840      	ldr	r0, [pc, #256]	@ (800ede8 <__mdiff+0x128>)
 800ece6:	4941      	ldr	r1, [pc, #260]	@ (800edec <__mdiff+0x12c>)
 800ece8:	f000 fcfe 	bl	800f6e8 <__assert_func>
 800ecec:	2301      	movs	r3, #1
 800ecee:	6145      	str	r5, [r0, #20]
 800ecf0:	6103      	str	r3, [r0, #16]
 800ecf2:	0010      	movs	r0, r2
 800ecf4:	b007      	add	sp, #28
 800ecf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ecf8:	2600      	movs	r6, #0
 800ecfa:	42b0      	cmp	r0, r6
 800ecfc:	da03      	bge.n	800ed06 <__mdiff+0x46>
 800ecfe:	0023      	movs	r3, r4
 800ed00:	003c      	movs	r4, r7
 800ed02:	001f      	movs	r7, r3
 800ed04:	3601      	adds	r6, #1
 800ed06:	6861      	ldr	r1, [r4, #4]
 800ed08:	9800      	ldr	r0, [sp, #0]
 800ed0a:	f7ff fd2f 	bl	800e76c <_Balloc>
 800ed0e:	1e02      	subs	r2, r0, #0
 800ed10:	d103      	bne.n	800ed1a <__mdiff+0x5a>
 800ed12:	4b34      	ldr	r3, [pc, #208]	@ (800ede4 <__mdiff+0x124>)
 800ed14:	4834      	ldr	r0, [pc, #208]	@ (800ede8 <__mdiff+0x128>)
 800ed16:	4936      	ldr	r1, [pc, #216]	@ (800edf0 <__mdiff+0x130>)
 800ed18:	e7e6      	b.n	800ece8 <__mdiff+0x28>
 800ed1a:	6923      	ldr	r3, [r4, #16]
 800ed1c:	3414      	adds	r4, #20
 800ed1e:	9300      	str	r3, [sp, #0]
 800ed20:	009b      	lsls	r3, r3, #2
 800ed22:	18e3      	adds	r3, r4, r3
 800ed24:	0021      	movs	r1, r4
 800ed26:	9401      	str	r4, [sp, #4]
 800ed28:	003c      	movs	r4, r7
 800ed2a:	9302      	str	r3, [sp, #8]
 800ed2c:	693b      	ldr	r3, [r7, #16]
 800ed2e:	3414      	adds	r4, #20
 800ed30:	009b      	lsls	r3, r3, #2
 800ed32:	18e3      	adds	r3, r4, r3
 800ed34:	9303      	str	r3, [sp, #12]
 800ed36:	0003      	movs	r3, r0
 800ed38:	60c6      	str	r6, [r0, #12]
 800ed3a:	468c      	mov	ip, r1
 800ed3c:	2000      	movs	r0, #0
 800ed3e:	3314      	adds	r3, #20
 800ed40:	9304      	str	r3, [sp, #16]
 800ed42:	9305      	str	r3, [sp, #20]
 800ed44:	4663      	mov	r3, ip
 800ed46:	cb20      	ldmia	r3!, {r5}
 800ed48:	b2a9      	uxth	r1, r5
 800ed4a:	000e      	movs	r6, r1
 800ed4c:	469c      	mov	ip, r3
 800ed4e:	cc08      	ldmia	r4!, {r3}
 800ed50:	0c2d      	lsrs	r5, r5, #16
 800ed52:	b299      	uxth	r1, r3
 800ed54:	1a71      	subs	r1, r6, r1
 800ed56:	1809      	adds	r1, r1, r0
 800ed58:	0c1b      	lsrs	r3, r3, #16
 800ed5a:	1408      	asrs	r0, r1, #16
 800ed5c:	1aeb      	subs	r3, r5, r3
 800ed5e:	181b      	adds	r3, r3, r0
 800ed60:	1418      	asrs	r0, r3, #16
 800ed62:	b289      	uxth	r1, r1
 800ed64:	041b      	lsls	r3, r3, #16
 800ed66:	4319      	orrs	r1, r3
 800ed68:	9b05      	ldr	r3, [sp, #20]
 800ed6a:	c302      	stmia	r3!, {r1}
 800ed6c:	9305      	str	r3, [sp, #20]
 800ed6e:	9b03      	ldr	r3, [sp, #12]
 800ed70:	42a3      	cmp	r3, r4
 800ed72:	d8e7      	bhi.n	800ed44 <__mdiff+0x84>
 800ed74:	0039      	movs	r1, r7
 800ed76:	9c03      	ldr	r4, [sp, #12]
 800ed78:	3115      	adds	r1, #21
 800ed7a:	2304      	movs	r3, #4
 800ed7c:	428c      	cmp	r4, r1
 800ed7e:	d304      	bcc.n	800ed8a <__mdiff+0xca>
 800ed80:	1be3      	subs	r3, r4, r7
 800ed82:	3b15      	subs	r3, #21
 800ed84:	089b      	lsrs	r3, r3, #2
 800ed86:	3301      	adds	r3, #1
 800ed88:	009b      	lsls	r3, r3, #2
 800ed8a:	9901      	ldr	r1, [sp, #4]
 800ed8c:	18cd      	adds	r5, r1, r3
 800ed8e:	9904      	ldr	r1, [sp, #16]
 800ed90:	002e      	movs	r6, r5
 800ed92:	18cb      	adds	r3, r1, r3
 800ed94:	001f      	movs	r7, r3
 800ed96:	9902      	ldr	r1, [sp, #8]
 800ed98:	428e      	cmp	r6, r1
 800ed9a:	d311      	bcc.n	800edc0 <__mdiff+0x100>
 800ed9c:	9c02      	ldr	r4, [sp, #8]
 800ed9e:	1ee9      	subs	r1, r5, #3
 800eda0:	2000      	movs	r0, #0
 800eda2:	428c      	cmp	r4, r1
 800eda4:	d304      	bcc.n	800edb0 <__mdiff+0xf0>
 800eda6:	0021      	movs	r1, r4
 800eda8:	3103      	adds	r1, #3
 800edaa:	1b49      	subs	r1, r1, r5
 800edac:	0889      	lsrs	r1, r1, #2
 800edae:	0088      	lsls	r0, r1, #2
 800edb0:	181b      	adds	r3, r3, r0
 800edb2:	3b04      	subs	r3, #4
 800edb4:	6819      	ldr	r1, [r3, #0]
 800edb6:	2900      	cmp	r1, #0
 800edb8:	d010      	beq.n	800eddc <__mdiff+0x11c>
 800edba:	9b00      	ldr	r3, [sp, #0]
 800edbc:	6113      	str	r3, [r2, #16]
 800edbe:	e798      	b.n	800ecf2 <__mdiff+0x32>
 800edc0:	4684      	mov	ip, r0
 800edc2:	ce02      	ldmia	r6!, {r1}
 800edc4:	b288      	uxth	r0, r1
 800edc6:	4460      	add	r0, ip
 800edc8:	1400      	asrs	r0, r0, #16
 800edca:	0c0c      	lsrs	r4, r1, #16
 800edcc:	1904      	adds	r4, r0, r4
 800edce:	4461      	add	r1, ip
 800edd0:	1420      	asrs	r0, r4, #16
 800edd2:	b289      	uxth	r1, r1
 800edd4:	0424      	lsls	r4, r4, #16
 800edd6:	4321      	orrs	r1, r4
 800edd8:	c702      	stmia	r7!, {r1}
 800edda:	e7dc      	b.n	800ed96 <__mdiff+0xd6>
 800eddc:	9900      	ldr	r1, [sp, #0]
 800edde:	3901      	subs	r1, #1
 800ede0:	9100      	str	r1, [sp, #0]
 800ede2:	e7e6      	b.n	800edb2 <__mdiff+0xf2>
 800ede4:	08010694 	.word	0x08010694
 800ede8:	080106a5 	.word	0x080106a5
 800edec:	00000237 	.word	0x00000237
 800edf0:	00000245 	.word	0x00000245

0800edf4 <__d2b>:
 800edf4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800edf6:	2101      	movs	r1, #1
 800edf8:	0016      	movs	r6, r2
 800edfa:	001f      	movs	r7, r3
 800edfc:	f7ff fcb6 	bl	800e76c <_Balloc>
 800ee00:	1e04      	subs	r4, r0, #0
 800ee02:	d105      	bne.n	800ee10 <__d2b+0x1c>
 800ee04:	0022      	movs	r2, r4
 800ee06:	4b25      	ldr	r3, [pc, #148]	@ (800ee9c <__d2b+0xa8>)
 800ee08:	4825      	ldr	r0, [pc, #148]	@ (800eea0 <__d2b+0xac>)
 800ee0a:	4926      	ldr	r1, [pc, #152]	@ (800eea4 <__d2b+0xb0>)
 800ee0c:	f000 fc6c 	bl	800f6e8 <__assert_func>
 800ee10:	033b      	lsls	r3, r7, #12
 800ee12:	007d      	lsls	r5, r7, #1
 800ee14:	0b1b      	lsrs	r3, r3, #12
 800ee16:	0d6d      	lsrs	r5, r5, #21
 800ee18:	d002      	beq.n	800ee20 <__d2b+0x2c>
 800ee1a:	2280      	movs	r2, #128	@ 0x80
 800ee1c:	0352      	lsls	r2, r2, #13
 800ee1e:	4313      	orrs	r3, r2
 800ee20:	9301      	str	r3, [sp, #4]
 800ee22:	2e00      	cmp	r6, #0
 800ee24:	d025      	beq.n	800ee72 <__d2b+0x7e>
 800ee26:	4668      	mov	r0, sp
 800ee28:	9600      	str	r6, [sp, #0]
 800ee2a:	f7ff fd6c 	bl	800e906 <__lo0bits>
 800ee2e:	9b01      	ldr	r3, [sp, #4]
 800ee30:	9900      	ldr	r1, [sp, #0]
 800ee32:	2800      	cmp	r0, #0
 800ee34:	d01b      	beq.n	800ee6e <__d2b+0x7a>
 800ee36:	2220      	movs	r2, #32
 800ee38:	001e      	movs	r6, r3
 800ee3a:	1a12      	subs	r2, r2, r0
 800ee3c:	4096      	lsls	r6, r2
 800ee3e:	0032      	movs	r2, r6
 800ee40:	40c3      	lsrs	r3, r0
 800ee42:	430a      	orrs	r2, r1
 800ee44:	6162      	str	r2, [r4, #20]
 800ee46:	9301      	str	r3, [sp, #4]
 800ee48:	9e01      	ldr	r6, [sp, #4]
 800ee4a:	61a6      	str	r6, [r4, #24]
 800ee4c:	1e73      	subs	r3, r6, #1
 800ee4e:	419e      	sbcs	r6, r3
 800ee50:	3601      	adds	r6, #1
 800ee52:	6126      	str	r6, [r4, #16]
 800ee54:	2d00      	cmp	r5, #0
 800ee56:	d014      	beq.n	800ee82 <__d2b+0x8e>
 800ee58:	2635      	movs	r6, #53	@ 0x35
 800ee5a:	4b13      	ldr	r3, [pc, #76]	@ (800eea8 <__d2b+0xb4>)
 800ee5c:	18ed      	adds	r5, r5, r3
 800ee5e:	9b08      	ldr	r3, [sp, #32]
 800ee60:	182d      	adds	r5, r5, r0
 800ee62:	601d      	str	r5, [r3, #0]
 800ee64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ee66:	1a36      	subs	r6, r6, r0
 800ee68:	601e      	str	r6, [r3, #0]
 800ee6a:	0020      	movs	r0, r4
 800ee6c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ee6e:	6161      	str	r1, [r4, #20]
 800ee70:	e7ea      	b.n	800ee48 <__d2b+0x54>
 800ee72:	a801      	add	r0, sp, #4
 800ee74:	f7ff fd47 	bl	800e906 <__lo0bits>
 800ee78:	9b01      	ldr	r3, [sp, #4]
 800ee7a:	2601      	movs	r6, #1
 800ee7c:	6163      	str	r3, [r4, #20]
 800ee7e:	3020      	adds	r0, #32
 800ee80:	e7e7      	b.n	800ee52 <__d2b+0x5e>
 800ee82:	4b0a      	ldr	r3, [pc, #40]	@ (800eeac <__d2b+0xb8>)
 800ee84:	18c0      	adds	r0, r0, r3
 800ee86:	9b08      	ldr	r3, [sp, #32]
 800ee88:	6018      	str	r0, [r3, #0]
 800ee8a:	4b09      	ldr	r3, [pc, #36]	@ (800eeb0 <__d2b+0xbc>)
 800ee8c:	18f3      	adds	r3, r6, r3
 800ee8e:	009b      	lsls	r3, r3, #2
 800ee90:	18e3      	adds	r3, r4, r3
 800ee92:	6958      	ldr	r0, [r3, #20]
 800ee94:	f7ff fd16 	bl	800e8c4 <__hi0bits>
 800ee98:	0176      	lsls	r6, r6, #5
 800ee9a:	e7e3      	b.n	800ee64 <__d2b+0x70>
 800ee9c:	08010694 	.word	0x08010694
 800eea0:	080106a5 	.word	0x080106a5
 800eea4:	0000030f 	.word	0x0000030f
 800eea8:	fffffbcd 	.word	0xfffffbcd
 800eeac:	fffffbce 	.word	0xfffffbce
 800eeb0:	3fffffff 	.word	0x3fffffff

0800eeb4 <__ssputs_r>:
 800eeb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eeb6:	688e      	ldr	r6, [r1, #8]
 800eeb8:	b085      	sub	sp, #20
 800eeba:	001f      	movs	r7, r3
 800eebc:	000c      	movs	r4, r1
 800eebe:	680b      	ldr	r3, [r1, #0]
 800eec0:	9002      	str	r0, [sp, #8]
 800eec2:	9203      	str	r2, [sp, #12]
 800eec4:	42be      	cmp	r6, r7
 800eec6:	d830      	bhi.n	800ef2a <__ssputs_r+0x76>
 800eec8:	210c      	movs	r1, #12
 800eeca:	5e62      	ldrsh	r2, [r4, r1]
 800eecc:	2190      	movs	r1, #144	@ 0x90
 800eece:	00c9      	lsls	r1, r1, #3
 800eed0:	420a      	tst	r2, r1
 800eed2:	d028      	beq.n	800ef26 <__ssputs_r+0x72>
 800eed4:	2003      	movs	r0, #3
 800eed6:	6921      	ldr	r1, [r4, #16]
 800eed8:	1a5b      	subs	r3, r3, r1
 800eeda:	9301      	str	r3, [sp, #4]
 800eedc:	6963      	ldr	r3, [r4, #20]
 800eede:	4343      	muls	r3, r0
 800eee0:	9801      	ldr	r0, [sp, #4]
 800eee2:	0fdd      	lsrs	r5, r3, #31
 800eee4:	18ed      	adds	r5, r5, r3
 800eee6:	1c7b      	adds	r3, r7, #1
 800eee8:	181b      	adds	r3, r3, r0
 800eeea:	106d      	asrs	r5, r5, #1
 800eeec:	42ab      	cmp	r3, r5
 800eeee:	d900      	bls.n	800eef2 <__ssputs_r+0x3e>
 800eef0:	001d      	movs	r5, r3
 800eef2:	0552      	lsls	r2, r2, #21
 800eef4:	d528      	bpl.n	800ef48 <__ssputs_r+0x94>
 800eef6:	0029      	movs	r1, r5
 800eef8:	9802      	ldr	r0, [sp, #8]
 800eefa:	f7ff fba7 	bl	800e64c <_malloc_r>
 800eefe:	1e06      	subs	r6, r0, #0
 800ef00:	d02c      	beq.n	800ef5c <__ssputs_r+0xa8>
 800ef02:	9a01      	ldr	r2, [sp, #4]
 800ef04:	6921      	ldr	r1, [r4, #16]
 800ef06:	f7fe fc9f 	bl	800d848 <memcpy>
 800ef0a:	89a2      	ldrh	r2, [r4, #12]
 800ef0c:	4b18      	ldr	r3, [pc, #96]	@ (800ef70 <__ssputs_r+0xbc>)
 800ef0e:	401a      	ands	r2, r3
 800ef10:	2380      	movs	r3, #128	@ 0x80
 800ef12:	4313      	orrs	r3, r2
 800ef14:	81a3      	strh	r3, [r4, #12]
 800ef16:	9b01      	ldr	r3, [sp, #4]
 800ef18:	6126      	str	r6, [r4, #16]
 800ef1a:	18f6      	adds	r6, r6, r3
 800ef1c:	6026      	str	r6, [r4, #0]
 800ef1e:	003e      	movs	r6, r7
 800ef20:	6165      	str	r5, [r4, #20]
 800ef22:	1aed      	subs	r5, r5, r3
 800ef24:	60a5      	str	r5, [r4, #8]
 800ef26:	42be      	cmp	r6, r7
 800ef28:	d900      	bls.n	800ef2c <__ssputs_r+0x78>
 800ef2a:	003e      	movs	r6, r7
 800ef2c:	0032      	movs	r2, r6
 800ef2e:	9903      	ldr	r1, [sp, #12]
 800ef30:	6820      	ldr	r0, [r4, #0]
 800ef32:	f000 fbb3 	bl	800f69c <memmove>
 800ef36:	2000      	movs	r0, #0
 800ef38:	68a3      	ldr	r3, [r4, #8]
 800ef3a:	1b9b      	subs	r3, r3, r6
 800ef3c:	60a3      	str	r3, [r4, #8]
 800ef3e:	6823      	ldr	r3, [r4, #0]
 800ef40:	199b      	adds	r3, r3, r6
 800ef42:	6023      	str	r3, [r4, #0]
 800ef44:	b005      	add	sp, #20
 800ef46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ef48:	002a      	movs	r2, r5
 800ef4a:	9802      	ldr	r0, [sp, #8]
 800ef4c:	f000 fc29 	bl	800f7a2 <_realloc_r>
 800ef50:	1e06      	subs	r6, r0, #0
 800ef52:	d1e0      	bne.n	800ef16 <__ssputs_r+0x62>
 800ef54:	6921      	ldr	r1, [r4, #16]
 800ef56:	9802      	ldr	r0, [sp, #8]
 800ef58:	f7ff fb02 	bl	800e560 <_free_r>
 800ef5c:	230c      	movs	r3, #12
 800ef5e:	2001      	movs	r0, #1
 800ef60:	9a02      	ldr	r2, [sp, #8]
 800ef62:	4240      	negs	r0, r0
 800ef64:	6013      	str	r3, [r2, #0]
 800ef66:	89a2      	ldrh	r2, [r4, #12]
 800ef68:	3334      	adds	r3, #52	@ 0x34
 800ef6a:	4313      	orrs	r3, r2
 800ef6c:	81a3      	strh	r3, [r4, #12]
 800ef6e:	e7e9      	b.n	800ef44 <__ssputs_r+0x90>
 800ef70:	fffffb7f 	.word	0xfffffb7f

0800ef74 <_svfiprintf_r>:
 800ef74:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ef76:	b0a1      	sub	sp, #132	@ 0x84
 800ef78:	9003      	str	r0, [sp, #12]
 800ef7a:	001d      	movs	r5, r3
 800ef7c:	898b      	ldrh	r3, [r1, #12]
 800ef7e:	000f      	movs	r7, r1
 800ef80:	0016      	movs	r6, r2
 800ef82:	061b      	lsls	r3, r3, #24
 800ef84:	d511      	bpl.n	800efaa <_svfiprintf_r+0x36>
 800ef86:	690b      	ldr	r3, [r1, #16]
 800ef88:	2b00      	cmp	r3, #0
 800ef8a:	d10e      	bne.n	800efaa <_svfiprintf_r+0x36>
 800ef8c:	2140      	movs	r1, #64	@ 0x40
 800ef8e:	f7ff fb5d 	bl	800e64c <_malloc_r>
 800ef92:	6038      	str	r0, [r7, #0]
 800ef94:	6138      	str	r0, [r7, #16]
 800ef96:	2800      	cmp	r0, #0
 800ef98:	d105      	bne.n	800efa6 <_svfiprintf_r+0x32>
 800ef9a:	230c      	movs	r3, #12
 800ef9c:	9a03      	ldr	r2, [sp, #12]
 800ef9e:	6013      	str	r3, [r2, #0]
 800efa0:	2001      	movs	r0, #1
 800efa2:	4240      	negs	r0, r0
 800efa4:	e0cf      	b.n	800f146 <_svfiprintf_r+0x1d2>
 800efa6:	2340      	movs	r3, #64	@ 0x40
 800efa8:	617b      	str	r3, [r7, #20]
 800efaa:	2300      	movs	r3, #0
 800efac:	ac08      	add	r4, sp, #32
 800efae:	6163      	str	r3, [r4, #20]
 800efb0:	3320      	adds	r3, #32
 800efb2:	7663      	strb	r3, [r4, #25]
 800efb4:	3310      	adds	r3, #16
 800efb6:	76a3      	strb	r3, [r4, #26]
 800efb8:	9507      	str	r5, [sp, #28]
 800efba:	0035      	movs	r5, r6
 800efbc:	782b      	ldrb	r3, [r5, #0]
 800efbe:	2b00      	cmp	r3, #0
 800efc0:	d001      	beq.n	800efc6 <_svfiprintf_r+0x52>
 800efc2:	2b25      	cmp	r3, #37	@ 0x25
 800efc4:	d148      	bne.n	800f058 <_svfiprintf_r+0xe4>
 800efc6:	1bab      	subs	r3, r5, r6
 800efc8:	9305      	str	r3, [sp, #20]
 800efca:	42b5      	cmp	r5, r6
 800efcc:	d00b      	beq.n	800efe6 <_svfiprintf_r+0x72>
 800efce:	0032      	movs	r2, r6
 800efd0:	0039      	movs	r1, r7
 800efd2:	9803      	ldr	r0, [sp, #12]
 800efd4:	f7ff ff6e 	bl	800eeb4 <__ssputs_r>
 800efd8:	3001      	adds	r0, #1
 800efda:	d100      	bne.n	800efde <_svfiprintf_r+0x6a>
 800efdc:	e0ae      	b.n	800f13c <_svfiprintf_r+0x1c8>
 800efde:	6963      	ldr	r3, [r4, #20]
 800efe0:	9a05      	ldr	r2, [sp, #20]
 800efe2:	189b      	adds	r3, r3, r2
 800efe4:	6163      	str	r3, [r4, #20]
 800efe6:	782b      	ldrb	r3, [r5, #0]
 800efe8:	2b00      	cmp	r3, #0
 800efea:	d100      	bne.n	800efee <_svfiprintf_r+0x7a>
 800efec:	e0a6      	b.n	800f13c <_svfiprintf_r+0x1c8>
 800efee:	2201      	movs	r2, #1
 800eff0:	2300      	movs	r3, #0
 800eff2:	4252      	negs	r2, r2
 800eff4:	6062      	str	r2, [r4, #4]
 800eff6:	a904      	add	r1, sp, #16
 800eff8:	3254      	adds	r2, #84	@ 0x54
 800effa:	1852      	adds	r2, r2, r1
 800effc:	1c6e      	adds	r6, r5, #1
 800effe:	6023      	str	r3, [r4, #0]
 800f000:	60e3      	str	r3, [r4, #12]
 800f002:	60a3      	str	r3, [r4, #8]
 800f004:	7013      	strb	r3, [r2, #0]
 800f006:	65a3      	str	r3, [r4, #88]	@ 0x58
 800f008:	4b54      	ldr	r3, [pc, #336]	@ (800f15c <_svfiprintf_r+0x1e8>)
 800f00a:	2205      	movs	r2, #5
 800f00c:	0018      	movs	r0, r3
 800f00e:	7831      	ldrb	r1, [r6, #0]
 800f010:	9305      	str	r3, [sp, #20]
 800f012:	f7fe fc0e 	bl	800d832 <memchr>
 800f016:	1c75      	adds	r5, r6, #1
 800f018:	2800      	cmp	r0, #0
 800f01a:	d11f      	bne.n	800f05c <_svfiprintf_r+0xe8>
 800f01c:	6822      	ldr	r2, [r4, #0]
 800f01e:	06d3      	lsls	r3, r2, #27
 800f020:	d504      	bpl.n	800f02c <_svfiprintf_r+0xb8>
 800f022:	2353      	movs	r3, #83	@ 0x53
 800f024:	a904      	add	r1, sp, #16
 800f026:	185b      	adds	r3, r3, r1
 800f028:	2120      	movs	r1, #32
 800f02a:	7019      	strb	r1, [r3, #0]
 800f02c:	0713      	lsls	r3, r2, #28
 800f02e:	d504      	bpl.n	800f03a <_svfiprintf_r+0xc6>
 800f030:	2353      	movs	r3, #83	@ 0x53
 800f032:	a904      	add	r1, sp, #16
 800f034:	185b      	adds	r3, r3, r1
 800f036:	212b      	movs	r1, #43	@ 0x2b
 800f038:	7019      	strb	r1, [r3, #0]
 800f03a:	7833      	ldrb	r3, [r6, #0]
 800f03c:	2b2a      	cmp	r3, #42	@ 0x2a
 800f03e:	d016      	beq.n	800f06e <_svfiprintf_r+0xfa>
 800f040:	0035      	movs	r5, r6
 800f042:	2100      	movs	r1, #0
 800f044:	200a      	movs	r0, #10
 800f046:	68e3      	ldr	r3, [r4, #12]
 800f048:	782a      	ldrb	r2, [r5, #0]
 800f04a:	1c6e      	adds	r6, r5, #1
 800f04c:	3a30      	subs	r2, #48	@ 0x30
 800f04e:	2a09      	cmp	r2, #9
 800f050:	d950      	bls.n	800f0f4 <_svfiprintf_r+0x180>
 800f052:	2900      	cmp	r1, #0
 800f054:	d111      	bne.n	800f07a <_svfiprintf_r+0x106>
 800f056:	e017      	b.n	800f088 <_svfiprintf_r+0x114>
 800f058:	3501      	adds	r5, #1
 800f05a:	e7af      	b.n	800efbc <_svfiprintf_r+0x48>
 800f05c:	9b05      	ldr	r3, [sp, #20]
 800f05e:	6822      	ldr	r2, [r4, #0]
 800f060:	1ac0      	subs	r0, r0, r3
 800f062:	2301      	movs	r3, #1
 800f064:	4083      	lsls	r3, r0
 800f066:	4313      	orrs	r3, r2
 800f068:	002e      	movs	r6, r5
 800f06a:	6023      	str	r3, [r4, #0]
 800f06c:	e7cc      	b.n	800f008 <_svfiprintf_r+0x94>
 800f06e:	9b07      	ldr	r3, [sp, #28]
 800f070:	1d19      	adds	r1, r3, #4
 800f072:	681b      	ldr	r3, [r3, #0]
 800f074:	9107      	str	r1, [sp, #28]
 800f076:	2b00      	cmp	r3, #0
 800f078:	db01      	blt.n	800f07e <_svfiprintf_r+0x10a>
 800f07a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f07c:	e004      	b.n	800f088 <_svfiprintf_r+0x114>
 800f07e:	425b      	negs	r3, r3
 800f080:	60e3      	str	r3, [r4, #12]
 800f082:	2302      	movs	r3, #2
 800f084:	4313      	orrs	r3, r2
 800f086:	6023      	str	r3, [r4, #0]
 800f088:	782b      	ldrb	r3, [r5, #0]
 800f08a:	2b2e      	cmp	r3, #46	@ 0x2e
 800f08c:	d10c      	bne.n	800f0a8 <_svfiprintf_r+0x134>
 800f08e:	786b      	ldrb	r3, [r5, #1]
 800f090:	2b2a      	cmp	r3, #42	@ 0x2a
 800f092:	d134      	bne.n	800f0fe <_svfiprintf_r+0x18a>
 800f094:	9b07      	ldr	r3, [sp, #28]
 800f096:	3502      	adds	r5, #2
 800f098:	1d1a      	adds	r2, r3, #4
 800f09a:	681b      	ldr	r3, [r3, #0]
 800f09c:	9207      	str	r2, [sp, #28]
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	da01      	bge.n	800f0a6 <_svfiprintf_r+0x132>
 800f0a2:	2301      	movs	r3, #1
 800f0a4:	425b      	negs	r3, r3
 800f0a6:	9309      	str	r3, [sp, #36]	@ 0x24
 800f0a8:	4e2d      	ldr	r6, [pc, #180]	@ (800f160 <_svfiprintf_r+0x1ec>)
 800f0aa:	2203      	movs	r2, #3
 800f0ac:	0030      	movs	r0, r6
 800f0ae:	7829      	ldrb	r1, [r5, #0]
 800f0b0:	f7fe fbbf 	bl	800d832 <memchr>
 800f0b4:	2800      	cmp	r0, #0
 800f0b6:	d006      	beq.n	800f0c6 <_svfiprintf_r+0x152>
 800f0b8:	2340      	movs	r3, #64	@ 0x40
 800f0ba:	1b80      	subs	r0, r0, r6
 800f0bc:	4083      	lsls	r3, r0
 800f0be:	6822      	ldr	r2, [r4, #0]
 800f0c0:	3501      	adds	r5, #1
 800f0c2:	4313      	orrs	r3, r2
 800f0c4:	6023      	str	r3, [r4, #0]
 800f0c6:	7829      	ldrb	r1, [r5, #0]
 800f0c8:	2206      	movs	r2, #6
 800f0ca:	4826      	ldr	r0, [pc, #152]	@ (800f164 <_svfiprintf_r+0x1f0>)
 800f0cc:	1c6e      	adds	r6, r5, #1
 800f0ce:	7621      	strb	r1, [r4, #24]
 800f0d0:	f7fe fbaf 	bl	800d832 <memchr>
 800f0d4:	2800      	cmp	r0, #0
 800f0d6:	d038      	beq.n	800f14a <_svfiprintf_r+0x1d6>
 800f0d8:	4b23      	ldr	r3, [pc, #140]	@ (800f168 <_svfiprintf_r+0x1f4>)
 800f0da:	2b00      	cmp	r3, #0
 800f0dc:	d122      	bne.n	800f124 <_svfiprintf_r+0x1b0>
 800f0de:	2207      	movs	r2, #7
 800f0e0:	9b07      	ldr	r3, [sp, #28]
 800f0e2:	3307      	adds	r3, #7
 800f0e4:	4393      	bics	r3, r2
 800f0e6:	3308      	adds	r3, #8
 800f0e8:	9307      	str	r3, [sp, #28]
 800f0ea:	6963      	ldr	r3, [r4, #20]
 800f0ec:	9a04      	ldr	r2, [sp, #16]
 800f0ee:	189b      	adds	r3, r3, r2
 800f0f0:	6163      	str	r3, [r4, #20]
 800f0f2:	e762      	b.n	800efba <_svfiprintf_r+0x46>
 800f0f4:	4343      	muls	r3, r0
 800f0f6:	0035      	movs	r5, r6
 800f0f8:	2101      	movs	r1, #1
 800f0fa:	189b      	adds	r3, r3, r2
 800f0fc:	e7a4      	b.n	800f048 <_svfiprintf_r+0xd4>
 800f0fe:	2300      	movs	r3, #0
 800f100:	200a      	movs	r0, #10
 800f102:	0019      	movs	r1, r3
 800f104:	3501      	adds	r5, #1
 800f106:	6063      	str	r3, [r4, #4]
 800f108:	782a      	ldrb	r2, [r5, #0]
 800f10a:	1c6e      	adds	r6, r5, #1
 800f10c:	3a30      	subs	r2, #48	@ 0x30
 800f10e:	2a09      	cmp	r2, #9
 800f110:	d903      	bls.n	800f11a <_svfiprintf_r+0x1a6>
 800f112:	2b00      	cmp	r3, #0
 800f114:	d0c8      	beq.n	800f0a8 <_svfiprintf_r+0x134>
 800f116:	9109      	str	r1, [sp, #36]	@ 0x24
 800f118:	e7c6      	b.n	800f0a8 <_svfiprintf_r+0x134>
 800f11a:	4341      	muls	r1, r0
 800f11c:	0035      	movs	r5, r6
 800f11e:	2301      	movs	r3, #1
 800f120:	1889      	adds	r1, r1, r2
 800f122:	e7f1      	b.n	800f108 <_svfiprintf_r+0x194>
 800f124:	aa07      	add	r2, sp, #28
 800f126:	9200      	str	r2, [sp, #0]
 800f128:	0021      	movs	r1, r4
 800f12a:	003a      	movs	r2, r7
 800f12c:	4b0f      	ldr	r3, [pc, #60]	@ (800f16c <_svfiprintf_r+0x1f8>)
 800f12e:	9803      	ldr	r0, [sp, #12]
 800f130:	f7fd fdc4 	bl	800ccbc <_printf_float>
 800f134:	9004      	str	r0, [sp, #16]
 800f136:	9b04      	ldr	r3, [sp, #16]
 800f138:	3301      	adds	r3, #1
 800f13a:	d1d6      	bne.n	800f0ea <_svfiprintf_r+0x176>
 800f13c:	89bb      	ldrh	r3, [r7, #12]
 800f13e:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800f140:	065b      	lsls	r3, r3, #25
 800f142:	d500      	bpl.n	800f146 <_svfiprintf_r+0x1d2>
 800f144:	e72c      	b.n	800efa0 <_svfiprintf_r+0x2c>
 800f146:	b021      	add	sp, #132	@ 0x84
 800f148:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f14a:	aa07      	add	r2, sp, #28
 800f14c:	9200      	str	r2, [sp, #0]
 800f14e:	0021      	movs	r1, r4
 800f150:	003a      	movs	r2, r7
 800f152:	4b06      	ldr	r3, [pc, #24]	@ (800f16c <_svfiprintf_r+0x1f8>)
 800f154:	9803      	ldr	r0, [sp, #12]
 800f156:	f7fe f85f 	bl	800d218 <_printf_i>
 800f15a:	e7eb      	b.n	800f134 <_svfiprintf_r+0x1c0>
 800f15c:	08010800 	.word	0x08010800
 800f160:	08010806 	.word	0x08010806
 800f164:	0801080a 	.word	0x0801080a
 800f168:	0800ccbd 	.word	0x0800ccbd
 800f16c:	0800eeb5 	.word	0x0800eeb5

0800f170 <__sfputc_r>:
 800f170:	6893      	ldr	r3, [r2, #8]
 800f172:	b510      	push	{r4, lr}
 800f174:	3b01      	subs	r3, #1
 800f176:	6093      	str	r3, [r2, #8]
 800f178:	2b00      	cmp	r3, #0
 800f17a:	da04      	bge.n	800f186 <__sfputc_r+0x16>
 800f17c:	6994      	ldr	r4, [r2, #24]
 800f17e:	42a3      	cmp	r3, r4
 800f180:	db07      	blt.n	800f192 <__sfputc_r+0x22>
 800f182:	290a      	cmp	r1, #10
 800f184:	d005      	beq.n	800f192 <__sfputc_r+0x22>
 800f186:	6813      	ldr	r3, [r2, #0]
 800f188:	1c58      	adds	r0, r3, #1
 800f18a:	6010      	str	r0, [r2, #0]
 800f18c:	7019      	strb	r1, [r3, #0]
 800f18e:	0008      	movs	r0, r1
 800f190:	bd10      	pop	{r4, pc}
 800f192:	f000 f9e2 	bl	800f55a <__swbuf_r>
 800f196:	0001      	movs	r1, r0
 800f198:	e7f9      	b.n	800f18e <__sfputc_r+0x1e>

0800f19a <__sfputs_r>:
 800f19a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f19c:	0006      	movs	r6, r0
 800f19e:	000f      	movs	r7, r1
 800f1a0:	0014      	movs	r4, r2
 800f1a2:	18d5      	adds	r5, r2, r3
 800f1a4:	42ac      	cmp	r4, r5
 800f1a6:	d101      	bne.n	800f1ac <__sfputs_r+0x12>
 800f1a8:	2000      	movs	r0, #0
 800f1aa:	e007      	b.n	800f1bc <__sfputs_r+0x22>
 800f1ac:	7821      	ldrb	r1, [r4, #0]
 800f1ae:	003a      	movs	r2, r7
 800f1b0:	0030      	movs	r0, r6
 800f1b2:	f7ff ffdd 	bl	800f170 <__sfputc_r>
 800f1b6:	3401      	adds	r4, #1
 800f1b8:	1c43      	adds	r3, r0, #1
 800f1ba:	d1f3      	bne.n	800f1a4 <__sfputs_r+0xa>
 800f1bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f1c0 <_vfiprintf_r>:
 800f1c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f1c2:	b0a1      	sub	sp, #132	@ 0x84
 800f1c4:	000f      	movs	r7, r1
 800f1c6:	0015      	movs	r5, r2
 800f1c8:	001e      	movs	r6, r3
 800f1ca:	9003      	str	r0, [sp, #12]
 800f1cc:	2800      	cmp	r0, #0
 800f1ce:	d004      	beq.n	800f1da <_vfiprintf_r+0x1a>
 800f1d0:	6a03      	ldr	r3, [r0, #32]
 800f1d2:	2b00      	cmp	r3, #0
 800f1d4:	d101      	bne.n	800f1da <_vfiprintf_r+0x1a>
 800f1d6:	f7fe f9bd 	bl	800d554 <__sinit>
 800f1da:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f1dc:	07db      	lsls	r3, r3, #31
 800f1de:	d405      	bmi.n	800f1ec <_vfiprintf_r+0x2c>
 800f1e0:	89bb      	ldrh	r3, [r7, #12]
 800f1e2:	059b      	lsls	r3, r3, #22
 800f1e4:	d402      	bmi.n	800f1ec <_vfiprintf_r+0x2c>
 800f1e6:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800f1e8:	f7fe fb21 	bl	800d82e <__retarget_lock_acquire_recursive>
 800f1ec:	89bb      	ldrh	r3, [r7, #12]
 800f1ee:	071b      	lsls	r3, r3, #28
 800f1f0:	d502      	bpl.n	800f1f8 <_vfiprintf_r+0x38>
 800f1f2:	693b      	ldr	r3, [r7, #16]
 800f1f4:	2b00      	cmp	r3, #0
 800f1f6:	d113      	bne.n	800f220 <_vfiprintf_r+0x60>
 800f1f8:	0039      	movs	r1, r7
 800f1fa:	9803      	ldr	r0, [sp, #12]
 800f1fc:	f000 f9f0 	bl	800f5e0 <__swsetup_r>
 800f200:	2800      	cmp	r0, #0
 800f202:	d00d      	beq.n	800f220 <_vfiprintf_r+0x60>
 800f204:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f206:	07db      	lsls	r3, r3, #31
 800f208:	d503      	bpl.n	800f212 <_vfiprintf_r+0x52>
 800f20a:	2001      	movs	r0, #1
 800f20c:	4240      	negs	r0, r0
 800f20e:	b021      	add	sp, #132	@ 0x84
 800f210:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f212:	89bb      	ldrh	r3, [r7, #12]
 800f214:	059b      	lsls	r3, r3, #22
 800f216:	d4f8      	bmi.n	800f20a <_vfiprintf_r+0x4a>
 800f218:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800f21a:	f7fe fb09 	bl	800d830 <__retarget_lock_release_recursive>
 800f21e:	e7f4      	b.n	800f20a <_vfiprintf_r+0x4a>
 800f220:	2300      	movs	r3, #0
 800f222:	ac08      	add	r4, sp, #32
 800f224:	6163      	str	r3, [r4, #20]
 800f226:	3320      	adds	r3, #32
 800f228:	7663      	strb	r3, [r4, #25]
 800f22a:	3310      	adds	r3, #16
 800f22c:	76a3      	strb	r3, [r4, #26]
 800f22e:	9607      	str	r6, [sp, #28]
 800f230:	002e      	movs	r6, r5
 800f232:	7833      	ldrb	r3, [r6, #0]
 800f234:	2b00      	cmp	r3, #0
 800f236:	d001      	beq.n	800f23c <_vfiprintf_r+0x7c>
 800f238:	2b25      	cmp	r3, #37	@ 0x25
 800f23a:	d148      	bne.n	800f2ce <_vfiprintf_r+0x10e>
 800f23c:	1b73      	subs	r3, r6, r5
 800f23e:	9305      	str	r3, [sp, #20]
 800f240:	42ae      	cmp	r6, r5
 800f242:	d00b      	beq.n	800f25c <_vfiprintf_r+0x9c>
 800f244:	002a      	movs	r2, r5
 800f246:	0039      	movs	r1, r7
 800f248:	9803      	ldr	r0, [sp, #12]
 800f24a:	f7ff ffa6 	bl	800f19a <__sfputs_r>
 800f24e:	3001      	adds	r0, #1
 800f250:	d100      	bne.n	800f254 <_vfiprintf_r+0x94>
 800f252:	e0ae      	b.n	800f3b2 <_vfiprintf_r+0x1f2>
 800f254:	6963      	ldr	r3, [r4, #20]
 800f256:	9a05      	ldr	r2, [sp, #20]
 800f258:	189b      	adds	r3, r3, r2
 800f25a:	6163      	str	r3, [r4, #20]
 800f25c:	7833      	ldrb	r3, [r6, #0]
 800f25e:	2b00      	cmp	r3, #0
 800f260:	d100      	bne.n	800f264 <_vfiprintf_r+0xa4>
 800f262:	e0a6      	b.n	800f3b2 <_vfiprintf_r+0x1f2>
 800f264:	2201      	movs	r2, #1
 800f266:	2300      	movs	r3, #0
 800f268:	4252      	negs	r2, r2
 800f26a:	6062      	str	r2, [r4, #4]
 800f26c:	a904      	add	r1, sp, #16
 800f26e:	3254      	adds	r2, #84	@ 0x54
 800f270:	1852      	adds	r2, r2, r1
 800f272:	1c75      	adds	r5, r6, #1
 800f274:	6023      	str	r3, [r4, #0]
 800f276:	60e3      	str	r3, [r4, #12]
 800f278:	60a3      	str	r3, [r4, #8]
 800f27a:	7013      	strb	r3, [r2, #0]
 800f27c:	65a3      	str	r3, [r4, #88]	@ 0x58
 800f27e:	4b59      	ldr	r3, [pc, #356]	@ (800f3e4 <_vfiprintf_r+0x224>)
 800f280:	2205      	movs	r2, #5
 800f282:	0018      	movs	r0, r3
 800f284:	7829      	ldrb	r1, [r5, #0]
 800f286:	9305      	str	r3, [sp, #20]
 800f288:	f7fe fad3 	bl	800d832 <memchr>
 800f28c:	1c6e      	adds	r6, r5, #1
 800f28e:	2800      	cmp	r0, #0
 800f290:	d11f      	bne.n	800f2d2 <_vfiprintf_r+0x112>
 800f292:	6822      	ldr	r2, [r4, #0]
 800f294:	06d3      	lsls	r3, r2, #27
 800f296:	d504      	bpl.n	800f2a2 <_vfiprintf_r+0xe2>
 800f298:	2353      	movs	r3, #83	@ 0x53
 800f29a:	a904      	add	r1, sp, #16
 800f29c:	185b      	adds	r3, r3, r1
 800f29e:	2120      	movs	r1, #32
 800f2a0:	7019      	strb	r1, [r3, #0]
 800f2a2:	0713      	lsls	r3, r2, #28
 800f2a4:	d504      	bpl.n	800f2b0 <_vfiprintf_r+0xf0>
 800f2a6:	2353      	movs	r3, #83	@ 0x53
 800f2a8:	a904      	add	r1, sp, #16
 800f2aa:	185b      	adds	r3, r3, r1
 800f2ac:	212b      	movs	r1, #43	@ 0x2b
 800f2ae:	7019      	strb	r1, [r3, #0]
 800f2b0:	782b      	ldrb	r3, [r5, #0]
 800f2b2:	2b2a      	cmp	r3, #42	@ 0x2a
 800f2b4:	d016      	beq.n	800f2e4 <_vfiprintf_r+0x124>
 800f2b6:	002e      	movs	r6, r5
 800f2b8:	2100      	movs	r1, #0
 800f2ba:	200a      	movs	r0, #10
 800f2bc:	68e3      	ldr	r3, [r4, #12]
 800f2be:	7832      	ldrb	r2, [r6, #0]
 800f2c0:	1c75      	adds	r5, r6, #1
 800f2c2:	3a30      	subs	r2, #48	@ 0x30
 800f2c4:	2a09      	cmp	r2, #9
 800f2c6:	d950      	bls.n	800f36a <_vfiprintf_r+0x1aa>
 800f2c8:	2900      	cmp	r1, #0
 800f2ca:	d111      	bne.n	800f2f0 <_vfiprintf_r+0x130>
 800f2cc:	e017      	b.n	800f2fe <_vfiprintf_r+0x13e>
 800f2ce:	3601      	adds	r6, #1
 800f2d0:	e7af      	b.n	800f232 <_vfiprintf_r+0x72>
 800f2d2:	9b05      	ldr	r3, [sp, #20]
 800f2d4:	6822      	ldr	r2, [r4, #0]
 800f2d6:	1ac0      	subs	r0, r0, r3
 800f2d8:	2301      	movs	r3, #1
 800f2da:	4083      	lsls	r3, r0
 800f2dc:	4313      	orrs	r3, r2
 800f2de:	0035      	movs	r5, r6
 800f2e0:	6023      	str	r3, [r4, #0]
 800f2e2:	e7cc      	b.n	800f27e <_vfiprintf_r+0xbe>
 800f2e4:	9b07      	ldr	r3, [sp, #28]
 800f2e6:	1d19      	adds	r1, r3, #4
 800f2e8:	681b      	ldr	r3, [r3, #0]
 800f2ea:	9107      	str	r1, [sp, #28]
 800f2ec:	2b00      	cmp	r3, #0
 800f2ee:	db01      	blt.n	800f2f4 <_vfiprintf_r+0x134>
 800f2f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f2f2:	e004      	b.n	800f2fe <_vfiprintf_r+0x13e>
 800f2f4:	425b      	negs	r3, r3
 800f2f6:	60e3      	str	r3, [r4, #12]
 800f2f8:	2302      	movs	r3, #2
 800f2fa:	4313      	orrs	r3, r2
 800f2fc:	6023      	str	r3, [r4, #0]
 800f2fe:	7833      	ldrb	r3, [r6, #0]
 800f300:	2b2e      	cmp	r3, #46	@ 0x2e
 800f302:	d10c      	bne.n	800f31e <_vfiprintf_r+0x15e>
 800f304:	7873      	ldrb	r3, [r6, #1]
 800f306:	2b2a      	cmp	r3, #42	@ 0x2a
 800f308:	d134      	bne.n	800f374 <_vfiprintf_r+0x1b4>
 800f30a:	9b07      	ldr	r3, [sp, #28]
 800f30c:	3602      	adds	r6, #2
 800f30e:	1d1a      	adds	r2, r3, #4
 800f310:	681b      	ldr	r3, [r3, #0]
 800f312:	9207      	str	r2, [sp, #28]
 800f314:	2b00      	cmp	r3, #0
 800f316:	da01      	bge.n	800f31c <_vfiprintf_r+0x15c>
 800f318:	2301      	movs	r3, #1
 800f31a:	425b      	negs	r3, r3
 800f31c:	9309      	str	r3, [sp, #36]	@ 0x24
 800f31e:	4d32      	ldr	r5, [pc, #200]	@ (800f3e8 <_vfiprintf_r+0x228>)
 800f320:	2203      	movs	r2, #3
 800f322:	0028      	movs	r0, r5
 800f324:	7831      	ldrb	r1, [r6, #0]
 800f326:	f7fe fa84 	bl	800d832 <memchr>
 800f32a:	2800      	cmp	r0, #0
 800f32c:	d006      	beq.n	800f33c <_vfiprintf_r+0x17c>
 800f32e:	2340      	movs	r3, #64	@ 0x40
 800f330:	1b40      	subs	r0, r0, r5
 800f332:	4083      	lsls	r3, r0
 800f334:	6822      	ldr	r2, [r4, #0]
 800f336:	3601      	adds	r6, #1
 800f338:	4313      	orrs	r3, r2
 800f33a:	6023      	str	r3, [r4, #0]
 800f33c:	7831      	ldrb	r1, [r6, #0]
 800f33e:	2206      	movs	r2, #6
 800f340:	482a      	ldr	r0, [pc, #168]	@ (800f3ec <_vfiprintf_r+0x22c>)
 800f342:	1c75      	adds	r5, r6, #1
 800f344:	7621      	strb	r1, [r4, #24]
 800f346:	f7fe fa74 	bl	800d832 <memchr>
 800f34a:	2800      	cmp	r0, #0
 800f34c:	d040      	beq.n	800f3d0 <_vfiprintf_r+0x210>
 800f34e:	4b28      	ldr	r3, [pc, #160]	@ (800f3f0 <_vfiprintf_r+0x230>)
 800f350:	2b00      	cmp	r3, #0
 800f352:	d122      	bne.n	800f39a <_vfiprintf_r+0x1da>
 800f354:	2207      	movs	r2, #7
 800f356:	9b07      	ldr	r3, [sp, #28]
 800f358:	3307      	adds	r3, #7
 800f35a:	4393      	bics	r3, r2
 800f35c:	3308      	adds	r3, #8
 800f35e:	9307      	str	r3, [sp, #28]
 800f360:	6963      	ldr	r3, [r4, #20]
 800f362:	9a04      	ldr	r2, [sp, #16]
 800f364:	189b      	adds	r3, r3, r2
 800f366:	6163      	str	r3, [r4, #20]
 800f368:	e762      	b.n	800f230 <_vfiprintf_r+0x70>
 800f36a:	4343      	muls	r3, r0
 800f36c:	002e      	movs	r6, r5
 800f36e:	2101      	movs	r1, #1
 800f370:	189b      	adds	r3, r3, r2
 800f372:	e7a4      	b.n	800f2be <_vfiprintf_r+0xfe>
 800f374:	2300      	movs	r3, #0
 800f376:	200a      	movs	r0, #10
 800f378:	0019      	movs	r1, r3
 800f37a:	3601      	adds	r6, #1
 800f37c:	6063      	str	r3, [r4, #4]
 800f37e:	7832      	ldrb	r2, [r6, #0]
 800f380:	1c75      	adds	r5, r6, #1
 800f382:	3a30      	subs	r2, #48	@ 0x30
 800f384:	2a09      	cmp	r2, #9
 800f386:	d903      	bls.n	800f390 <_vfiprintf_r+0x1d0>
 800f388:	2b00      	cmp	r3, #0
 800f38a:	d0c8      	beq.n	800f31e <_vfiprintf_r+0x15e>
 800f38c:	9109      	str	r1, [sp, #36]	@ 0x24
 800f38e:	e7c6      	b.n	800f31e <_vfiprintf_r+0x15e>
 800f390:	4341      	muls	r1, r0
 800f392:	002e      	movs	r6, r5
 800f394:	2301      	movs	r3, #1
 800f396:	1889      	adds	r1, r1, r2
 800f398:	e7f1      	b.n	800f37e <_vfiprintf_r+0x1be>
 800f39a:	aa07      	add	r2, sp, #28
 800f39c:	9200      	str	r2, [sp, #0]
 800f39e:	0021      	movs	r1, r4
 800f3a0:	003a      	movs	r2, r7
 800f3a2:	4b14      	ldr	r3, [pc, #80]	@ (800f3f4 <_vfiprintf_r+0x234>)
 800f3a4:	9803      	ldr	r0, [sp, #12]
 800f3a6:	f7fd fc89 	bl	800ccbc <_printf_float>
 800f3aa:	9004      	str	r0, [sp, #16]
 800f3ac:	9b04      	ldr	r3, [sp, #16]
 800f3ae:	3301      	adds	r3, #1
 800f3b0:	d1d6      	bne.n	800f360 <_vfiprintf_r+0x1a0>
 800f3b2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f3b4:	07db      	lsls	r3, r3, #31
 800f3b6:	d405      	bmi.n	800f3c4 <_vfiprintf_r+0x204>
 800f3b8:	89bb      	ldrh	r3, [r7, #12]
 800f3ba:	059b      	lsls	r3, r3, #22
 800f3bc:	d402      	bmi.n	800f3c4 <_vfiprintf_r+0x204>
 800f3be:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800f3c0:	f7fe fa36 	bl	800d830 <__retarget_lock_release_recursive>
 800f3c4:	89bb      	ldrh	r3, [r7, #12]
 800f3c6:	065b      	lsls	r3, r3, #25
 800f3c8:	d500      	bpl.n	800f3cc <_vfiprintf_r+0x20c>
 800f3ca:	e71e      	b.n	800f20a <_vfiprintf_r+0x4a>
 800f3cc:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800f3ce:	e71e      	b.n	800f20e <_vfiprintf_r+0x4e>
 800f3d0:	aa07      	add	r2, sp, #28
 800f3d2:	9200      	str	r2, [sp, #0]
 800f3d4:	0021      	movs	r1, r4
 800f3d6:	003a      	movs	r2, r7
 800f3d8:	4b06      	ldr	r3, [pc, #24]	@ (800f3f4 <_vfiprintf_r+0x234>)
 800f3da:	9803      	ldr	r0, [sp, #12]
 800f3dc:	f7fd ff1c 	bl	800d218 <_printf_i>
 800f3e0:	e7e3      	b.n	800f3aa <_vfiprintf_r+0x1ea>
 800f3e2:	46c0      	nop			@ (mov r8, r8)
 800f3e4:	08010800 	.word	0x08010800
 800f3e8:	08010806 	.word	0x08010806
 800f3ec:	0801080a 	.word	0x0801080a
 800f3f0:	0800ccbd 	.word	0x0800ccbd
 800f3f4:	0800f19b 	.word	0x0800f19b

0800f3f8 <__sflush_r>:
 800f3f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f3fa:	220c      	movs	r2, #12
 800f3fc:	5e8b      	ldrsh	r3, [r1, r2]
 800f3fe:	0005      	movs	r5, r0
 800f400:	000c      	movs	r4, r1
 800f402:	071a      	lsls	r2, r3, #28
 800f404:	d456      	bmi.n	800f4b4 <__sflush_r+0xbc>
 800f406:	684a      	ldr	r2, [r1, #4]
 800f408:	2a00      	cmp	r2, #0
 800f40a:	dc02      	bgt.n	800f412 <__sflush_r+0x1a>
 800f40c:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 800f40e:	2a00      	cmp	r2, #0
 800f410:	dd4e      	ble.n	800f4b0 <__sflush_r+0xb8>
 800f412:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800f414:	2f00      	cmp	r7, #0
 800f416:	d04b      	beq.n	800f4b0 <__sflush_r+0xb8>
 800f418:	2200      	movs	r2, #0
 800f41a:	2080      	movs	r0, #128	@ 0x80
 800f41c:	682e      	ldr	r6, [r5, #0]
 800f41e:	602a      	str	r2, [r5, #0]
 800f420:	001a      	movs	r2, r3
 800f422:	0140      	lsls	r0, r0, #5
 800f424:	6a21      	ldr	r1, [r4, #32]
 800f426:	4002      	ands	r2, r0
 800f428:	4203      	tst	r3, r0
 800f42a:	d033      	beq.n	800f494 <__sflush_r+0x9c>
 800f42c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f42e:	89a3      	ldrh	r3, [r4, #12]
 800f430:	075b      	lsls	r3, r3, #29
 800f432:	d506      	bpl.n	800f442 <__sflush_r+0x4a>
 800f434:	6863      	ldr	r3, [r4, #4]
 800f436:	1ad2      	subs	r2, r2, r3
 800f438:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	d001      	beq.n	800f442 <__sflush_r+0x4a>
 800f43e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f440:	1ad2      	subs	r2, r2, r3
 800f442:	2300      	movs	r3, #0
 800f444:	0028      	movs	r0, r5
 800f446:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800f448:	6a21      	ldr	r1, [r4, #32]
 800f44a:	47b8      	blx	r7
 800f44c:	89a2      	ldrh	r2, [r4, #12]
 800f44e:	1c43      	adds	r3, r0, #1
 800f450:	d106      	bne.n	800f460 <__sflush_r+0x68>
 800f452:	6829      	ldr	r1, [r5, #0]
 800f454:	291d      	cmp	r1, #29
 800f456:	d846      	bhi.n	800f4e6 <__sflush_r+0xee>
 800f458:	4b29      	ldr	r3, [pc, #164]	@ (800f500 <__sflush_r+0x108>)
 800f45a:	410b      	asrs	r3, r1
 800f45c:	07db      	lsls	r3, r3, #31
 800f45e:	d442      	bmi.n	800f4e6 <__sflush_r+0xee>
 800f460:	2300      	movs	r3, #0
 800f462:	6063      	str	r3, [r4, #4]
 800f464:	6923      	ldr	r3, [r4, #16]
 800f466:	6023      	str	r3, [r4, #0]
 800f468:	04d2      	lsls	r2, r2, #19
 800f46a:	d505      	bpl.n	800f478 <__sflush_r+0x80>
 800f46c:	1c43      	adds	r3, r0, #1
 800f46e:	d102      	bne.n	800f476 <__sflush_r+0x7e>
 800f470:	682b      	ldr	r3, [r5, #0]
 800f472:	2b00      	cmp	r3, #0
 800f474:	d100      	bne.n	800f478 <__sflush_r+0x80>
 800f476:	6560      	str	r0, [r4, #84]	@ 0x54
 800f478:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f47a:	602e      	str	r6, [r5, #0]
 800f47c:	2900      	cmp	r1, #0
 800f47e:	d017      	beq.n	800f4b0 <__sflush_r+0xb8>
 800f480:	0023      	movs	r3, r4
 800f482:	3344      	adds	r3, #68	@ 0x44
 800f484:	4299      	cmp	r1, r3
 800f486:	d002      	beq.n	800f48e <__sflush_r+0x96>
 800f488:	0028      	movs	r0, r5
 800f48a:	f7ff f869 	bl	800e560 <_free_r>
 800f48e:	2300      	movs	r3, #0
 800f490:	6363      	str	r3, [r4, #52]	@ 0x34
 800f492:	e00d      	b.n	800f4b0 <__sflush_r+0xb8>
 800f494:	2301      	movs	r3, #1
 800f496:	0028      	movs	r0, r5
 800f498:	47b8      	blx	r7
 800f49a:	0002      	movs	r2, r0
 800f49c:	1c43      	adds	r3, r0, #1
 800f49e:	d1c6      	bne.n	800f42e <__sflush_r+0x36>
 800f4a0:	682b      	ldr	r3, [r5, #0]
 800f4a2:	2b00      	cmp	r3, #0
 800f4a4:	d0c3      	beq.n	800f42e <__sflush_r+0x36>
 800f4a6:	2b1d      	cmp	r3, #29
 800f4a8:	d001      	beq.n	800f4ae <__sflush_r+0xb6>
 800f4aa:	2b16      	cmp	r3, #22
 800f4ac:	d11a      	bne.n	800f4e4 <__sflush_r+0xec>
 800f4ae:	602e      	str	r6, [r5, #0]
 800f4b0:	2000      	movs	r0, #0
 800f4b2:	e01e      	b.n	800f4f2 <__sflush_r+0xfa>
 800f4b4:	690e      	ldr	r6, [r1, #16]
 800f4b6:	2e00      	cmp	r6, #0
 800f4b8:	d0fa      	beq.n	800f4b0 <__sflush_r+0xb8>
 800f4ba:	680f      	ldr	r7, [r1, #0]
 800f4bc:	600e      	str	r6, [r1, #0]
 800f4be:	1bba      	subs	r2, r7, r6
 800f4c0:	9201      	str	r2, [sp, #4]
 800f4c2:	2200      	movs	r2, #0
 800f4c4:	079b      	lsls	r3, r3, #30
 800f4c6:	d100      	bne.n	800f4ca <__sflush_r+0xd2>
 800f4c8:	694a      	ldr	r2, [r1, #20]
 800f4ca:	60a2      	str	r2, [r4, #8]
 800f4cc:	9b01      	ldr	r3, [sp, #4]
 800f4ce:	2b00      	cmp	r3, #0
 800f4d0:	ddee      	ble.n	800f4b0 <__sflush_r+0xb8>
 800f4d2:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800f4d4:	0032      	movs	r2, r6
 800f4d6:	001f      	movs	r7, r3
 800f4d8:	0028      	movs	r0, r5
 800f4da:	9b01      	ldr	r3, [sp, #4]
 800f4dc:	6a21      	ldr	r1, [r4, #32]
 800f4de:	47b8      	blx	r7
 800f4e0:	2800      	cmp	r0, #0
 800f4e2:	dc07      	bgt.n	800f4f4 <__sflush_r+0xfc>
 800f4e4:	89a2      	ldrh	r2, [r4, #12]
 800f4e6:	2340      	movs	r3, #64	@ 0x40
 800f4e8:	2001      	movs	r0, #1
 800f4ea:	4313      	orrs	r3, r2
 800f4ec:	b21b      	sxth	r3, r3
 800f4ee:	81a3      	strh	r3, [r4, #12]
 800f4f0:	4240      	negs	r0, r0
 800f4f2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800f4f4:	9b01      	ldr	r3, [sp, #4]
 800f4f6:	1836      	adds	r6, r6, r0
 800f4f8:	1a1b      	subs	r3, r3, r0
 800f4fa:	9301      	str	r3, [sp, #4]
 800f4fc:	e7e6      	b.n	800f4cc <__sflush_r+0xd4>
 800f4fe:	46c0      	nop			@ (mov r8, r8)
 800f500:	dfbffffe 	.word	0xdfbffffe

0800f504 <_fflush_r>:
 800f504:	690b      	ldr	r3, [r1, #16]
 800f506:	b570      	push	{r4, r5, r6, lr}
 800f508:	0005      	movs	r5, r0
 800f50a:	000c      	movs	r4, r1
 800f50c:	2b00      	cmp	r3, #0
 800f50e:	d102      	bne.n	800f516 <_fflush_r+0x12>
 800f510:	2500      	movs	r5, #0
 800f512:	0028      	movs	r0, r5
 800f514:	bd70      	pop	{r4, r5, r6, pc}
 800f516:	2800      	cmp	r0, #0
 800f518:	d004      	beq.n	800f524 <_fflush_r+0x20>
 800f51a:	6a03      	ldr	r3, [r0, #32]
 800f51c:	2b00      	cmp	r3, #0
 800f51e:	d101      	bne.n	800f524 <_fflush_r+0x20>
 800f520:	f7fe f818 	bl	800d554 <__sinit>
 800f524:	220c      	movs	r2, #12
 800f526:	5ea3      	ldrsh	r3, [r4, r2]
 800f528:	2b00      	cmp	r3, #0
 800f52a:	d0f1      	beq.n	800f510 <_fflush_r+0xc>
 800f52c:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f52e:	07d2      	lsls	r2, r2, #31
 800f530:	d404      	bmi.n	800f53c <_fflush_r+0x38>
 800f532:	059b      	lsls	r3, r3, #22
 800f534:	d402      	bmi.n	800f53c <_fflush_r+0x38>
 800f536:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f538:	f7fe f979 	bl	800d82e <__retarget_lock_acquire_recursive>
 800f53c:	0028      	movs	r0, r5
 800f53e:	0021      	movs	r1, r4
 800f540:	f7ff ff5a 	bl	800f3f8 <__sflush_r>
 800f544:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f546:	0005      	movs	r5, r0
 800f548:	07db      	lsls	r3, r3, #31
 800f54a:	d4e2      	bmi.n	800f512 <_fflush_r+0xe>
 800f54c:	89a3      	ldrh	r3, [r4, #12]
 800f54e:	059b      	lsls	r3, r3, #22
 800f550:	d4df      	bmi.n	800f512 <_fflush_r+0xe>
 800f552:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f554:	f7fe f96c 	bl	800d830 <__retarget_lock_release_recursive>
 800f558:	e7db      	b.n	800f512 <_fflush_r+0xe>

0800f55a <__swbuf_r>:
 800f55a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f55c:	0006      	movs	r6, r0
 800f55e:	000d      	movs	r5, r1
 800f560:	0014      	movs	r4, r2
 800f562:	2800      	cmp	r0, #0
 800f564:	d004      	beq.n	800f570 <__swbuf_r+0x16>
 800f566:	6a03      	ldr	r3, [r0, #32]
 800f568:	2b00      	cmp	r3, #0
 800f56a:	d101      	bne.n	800f570 <__swbuf_r+0x16>
 800f56c:	f7fd fff2 	bl	800d554 <__sinit>
 800f570:	69a3      	ldr	r3, [r4, #24]
 800f572:	60a3      	str	r3, [r4, #8]
 800f574:	89a3      	ldrh	r3, [r4, #12]
 800f576:	071b      	lsls	r3, r3, #28
 800f578:	d502      	bpl.n	800f580 <__swbuf_r+0x26>
 800f57a:	6923      	ldr	r3, [r4, #16]
 800f57c:	2b00      	cmp	r3, #0
 800f57e:	d109      	bne.n	800f594 <__swbuf_r+0x3a>
 800f580:	0021      	movs	r1, r4
 800f582:	0030      	movs	r0, r6
 800f584:	f000 f82c 	bl	800f5e0 <__swsetup_r>
 800f588:	2800      	cmp	r0, #0
 800f58a:	d003      	beq.n	800f594 <__swbuf_r+0x3a>
 800f58c:	2501      	movs	r5, #1
 800f58e:	426d      	negs	r5, r5
 800f590:	0028      	movs	r0, r5
 800f592:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f594:	6923      	ldr	r3, [r4, #16]
 800f596:	6820      	ldr	r0, [r4, #0]
 800f598:	b2ef      	uxtb	r7, r5
 800f59a:	1ac0      	subs	r0, r0, r3
 800f59c:	6963      	ldr	r3, [r4, #20]
 800f59e:	b2ed      	uxtb	r5, r5
 800f5a0:	4283      	cmp	r3, r0
 800f5a2:	dc05      	bgt.n	800f5b0 <__swbuf_r+0x56>
 800f5a4:	0021      	movs	r1, r4
 800f5a6:	0030      	movs	r0, r6
 800f5a8:	f7ff ffac 	bl	800f504 <_fflush_r>
 800f5ac:	2800      	cmp	r0, #0
 800f5ae:	d1ed      	bne.n	800f58c <__swbuf_r+0x32>
 800f5b0:	68a3      	ldr	r3, [r4, #8]
 800f5b2:	3001      	adds	r0, #1
 800f5b4:	3b01      	subs	r3, #1
 800f5b6:	60a3      	str	r3, [r4, #8]
 800f5b8:	6823      	ldr	r3, [r4, #0]
 800f5ba:	1c5a      	adds	r2, r3, #1
 800f5bc:	6022      	str	r2, [r4, #0]
 800f5be:	701f      	strb	r7, [r3, #0]
 800f5c0:	6963      	ldr	r3, [r4, #20]
 800f5c2:	4283      	cmp	r3, r0
 800f5c4:	d004      	beq.n	800f5d0 <__swbuf_r+0x76>
 800f5c6:	89a3      	ldrh	r3, [r4, #12]
 800f5c8:	07db      	lsls	r3, r3, #31
 800f5ca:	d5e1      	bpl.n	800f590 <__swbuf_r+0x36>
 800f5cc:	2d0a      	cmp	r5, #10
 800f5ce:	d1df      	bne.n	800f590 <__swbuf_r+0x36>
 800f5d0:	0021      	movs	r1, r4
 800f5d2:	0030      	movs	r0, r6
 800f5d4:	f7ff ff96 	bl	800f504 <_fflush_r>
 800f5d8:	2800      	cmp	r0, #0
 800f5da:	d0d9      	beq.n	800f590 <__swbuf_r+0x36>
 800f5dc:	e7d6      	b.n	800f58c <__swbuf_r+0x32>
	...

0800f5e0 <__swsetup_r>:
 800f5e0:	4b2d      	ldr	r3, [pc, #180]	@ (800f698 <__swsetup_r+0xb8>)
 800f5e2:	b570      	push	{r4, r5, r6, lr}
 800f5e4:	0005      	movs	r5, r0
 800f5e6:	6818      	ldr	r0, [r3, #0]
 800f5e8:	000c      	movs	r4, r1
 800f5ea:	2800      	cmp	r0, #0
 800f5ec:	d004      	beq.n	800f5f8 <__swsetup_r+0x18>
 800f5ee:	6a03      	ldr	r3, [r0, #32]
 800f5f0:	2b00      	cmp	r3, #0
 800f5f2:	d101      	bne.n	800f5f8 <__swsetup_r+0x18>
 800f5f4:	f7fd ffae 	bl	800d554 <__sinit>
 800f5f8:	230c      	movs	r3, #12
 800f5fa:	5ee2      	ldrsh	r2, [r4, r3]
 800f5fc:	0713      	lsls	r3, r2, #28
 800f5fe:	d423      	bmi.n	800f648 <__swsetup_r+0x68>
 800f600:	06d3      	lsls	r3, r2, #27
 800f602:	d407      	bmi.n	800f614 <__swsetup_r+0x34>
 800f604:	2309      	movs	r3, #9
 800f606:	602b      	str	r3, [r5, #0]
 800f608:	2340      	movs	r3, #64	@ 0x40
 800f60a:	2001      	movs	r0, #1
 800f60c:	4313      	orrs	r3, r2
 800f60e:	81a3      	strh	r3, [r4, #12]
 800f610:	4240      	negs	r0, r0
 800f612:	e03a      	b.n	800f68a <__swsetup_r+0xaa>
 800f614:	0752      	lsls	r2, r2, #29
 800f616:	d513      	bpl.n	800f640 <__swsetup_r+0x60>
 800f618:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f61a:	2900      	cmp	r1, #0
 800f61c:	d008      	beq.n	800f630 <__swsetup_r+0x50>
 800f61e:	0023      	movs	r3, r4
 800f620:	3344      	adds	r3, #68	@ 0x44
 800f622:	4299      	cmp	r1, r3
 800f624:	d002      	beq.n	800f62c <__swsetup_r+0x4c>
 800f626:	0028      	movs	r0, r5
 800f628:	f7fe ff9a 	bl	800e560 <_free_r>
 800f62c:	2300      	movs	r3, #0
 800f62e:	6363      	str	r3, [r4, #52]	@ 0x34
 800f630:	2224      	movs	r2, #36	@ 0x24
 800f632:	89a3      	ldrh	r3, [r4, #12]
 800f634:	4393      	bics	r3, r2
 800f636:	81a3      	strh	r3, [r4, #12]
 800f638:	2300      	movs	r3, #0
 800f63a:	6063      	str	r3, [r4, #4]
 800f63c:	6923      	ldr	r3, [r4, #16]
 800f63e:	6023      	str	r3, [r4, #0]
 800f640:	2308      	movs	r3, #8
 800f642:	89a2      	ldrh	r2, [r4, #12]
 800f644:	4313      	orrs	r3, r2
 800f646:	81a3      	strh	r3, [r4, #12]
 800f648:	6923      	ldr	r3, [r4, #16]
 800f64a:	2b00      	cmp	r3, #0
 800f64c:	d10b      	bne.n	800f666 <__swsetup_r+0x86>
 800f64e:	21a0      	movs	r1, #160	@ 0xa0
 800f650:	2280      	movs	r2, #128	@ 0x80
 800f652:	89a3      	ldrh	r3, [r4, #12]
 800f654:	0089      	lsls	r1, r1, #2
 800f656:	0092      	lsls	r2, r2, #2
 800f658:	400b      	ands	r3, r1
 800f65a:	4293      	cmp	r3, r2
 800f65c:	d003      	beq.n	800f666 <__swsetup_r+0x86>
 800f65e:	0021      	movs	r1, r4
 800f660:	0028      	movs	r0, r5
 800f662:	f000 f915 	bl	800f890 <__smakebuf_r>
 800f666:	230c      	movs	r3, #12
 800f668:	5ee2      	ldrsh	r2, [r4, r3]
 800f66a:	2101      	movs	r1, #1
 800f66c:	0013      	movs	r3, r2
 800f66e:	400b      	ands	r3, r1
 800f670:	420a      	tst	r2, r1
 800f672:	d00b      	beq.n	800f68c <__swsetup_r+0xac>
 800f674:	2300      	movs	r3, #0
 800f676:	60a3      	str	r3, [r4, #8]
 800f678:	6963      	ldr	r3, [r4, #20]
 800f67a:	425b      	negs	r3, r3
 800f67c:	61a3      	str	r3, [r4, #24]
 800f67e:	2000      	movs	r0, #0
 800f680:	6923      	ldr	r3, [r4, #16]
 800f682:	4283      	cmp	r3, r0
 800f684:	d101      	bne.n	800f68a <__swsetup_r+0xaa>
 800f686:	0613      	lsls	r3, r2, #24
 800f688:	d4be      	bmi.n	800f608 <__swsetup_r+0x28>
 800f68a:	bd70      	pop	{r4, r5, r6, pc}
 800f68c:	0791      	lsls	r1, r2, #30
 800f68e:	d400      	bmi.n	800f692 <__swsetup_r+0xb2>
 800f690:	6963      	ldr	r3, [r4, #20]
 800f692:	60a3      	str	r3, [r4, #8]
 800f694:	e7f3      	b.n	800f67e <__swsetup_r+0x9e>
 800f696:	46c0      	nop			@ (mov r8, r8)
 800f698:	20000054 	.word	0x20000054

0800f69c <memmove>:
 800f69c:	b510      	push	{r4, lr}
 800f69e:	4288      	cmp	r0, r1
 800f6a0:	d806      	bhi.n	800f6b0 <memmove+0x14>
 800f6a2:	2300      	movs	r3, #0
 800f6a4:	429a      	cmp	r2, r3
 800f6a6:	d008      	beq.n	800f6ba <memmove+0x1e>
 800f6a8:	5ccc      	ldrb	r4, [r1, r3]
 800f6aa:	54c4      	strb	r4, [r0, r3]
 800f6ac:	3301      	adds	r3, #1
 800f6ae:	e7f9      	b.n	800f6a4 <memmove+0x8>
 800f6b0:	188b      	adds	r3, r1, r2
 800f6b2:	4298      	cmp	r0, r3
 800f6b4:	d2f5      	bcs.n	800f6a2 <memmove+0x6>
 800f6b6:	3a01      	subs	r2, #1
 800f6b8:	d200      	bcs.n	800f6bc <memmove+0x20>
 800f6ba:	bd10      	pop	{r4, pc}
 800f6bc:	5c8b      	ldrb	r3, [r1, r2]
 800f6be:	5483      	strb	r3, [r0, r2]
 800f6c0:	e7f9      	b.n	800f6b6 <memmove+0x1a>
	...

0800f6c4 <_sbrk_r>:
 800f6c4:	2300      	movs	r3, #0
 800f6c6:	b570      	push	{r4, r5, r6, lr}
 800f6c8:	4d06      	ldr	r5, [pc, #24]	@ (800f6e4 <_sbrk_r+0x20>)
 800f6ca:	0004      	movs	r4, r0
 800f6cc:	0008      	movs	r0, r1
 800f6ce:	602b      	str	r3, [r5, #0]
 800f6d0:	f7f6 faa8 	bl	8005c24 <_sbrk>
 800f6d4:	1c43      	adds	r3, r0, #1
 800f6d6:	d103      	bne.n	800f6e0 <_sbrk_r+0x1c>
 800f6d8:	682b      	ldr	r3, [r5, #0]
 800f6da:	2b00      	cmp	r3, #0
 800f6dc:	d000      	beq.n	800f6e0 <_sbrk_r+0x1c>
 800f6de:	6023      	str	r3, [r4, #0]
 800f6e0:	bd70      	pop	{r4, r5, r6, pc}
 800f6e2:	46c0      	nop			@ (mov r8, r8)
 800f6e4:	200018a8 	.word	0x200018a8

0800f6e8 <__assert_func>:
 800f6e8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800f6ea:	0014      	movs	r4, r2
 800f6ec:	001a      	movs	r2, r3
 800f6ee:	4b09      	ldr	r3, [pc, #36]	@ (800f714 <__assert_func+0x2c>)
 800f6f0:	0005      	movs	r5, r0
 800f6f2:	681b      	ldr	r3, [r3, #0]
 800f6f4:	000e      	movs	r6, r1
 800f6f6:	68d8      	ldr	r0, [r3, #12]
 800f6f8:	4b07      	ldr	r3, [pc, #28]	@ (800f718 <__assert_func+0x30>)
 800f6fa:	2c00      	cmp	r4, #0
 800f6fc:	d101      	bne.n	800f702 <__assert_func+0x1a>
 800f6fe:	4b07      	ldr	r3, [pc, #28]	@ (800f71c <__assert_func+0x34>)
 800f700:	001c      	movs	r4, r3
 800f702:	4907      	ldr	r1, [pc, #28]	@ (800f720 <__assert_func+0x38>)
 800f704:	9301      	str	r3, [sp, #4]
 800f706:	9402      	str	r4, [sp, #8]
 800f708:	002b      	movs	r3, r5
 800f70a:	9600      	str	r6, [sp, #0]
 800f70c:	f000 f886 	bl	800f81c <fiprintf>
 800f710:	f000 f924 	bl	800f95c <abort>
 800f714:	20000054 	.word	0x20000054
 800f718:	0801081b 	.word	0x0801081b
 800f71c:	08010856 	.word	0x08010856
 800f720:	08010828 	.word	0x08010828

0800f724 <_calloc_r>:
 800f724:	b570      	push	{r4, r5, r6, lr}
 800f726:	0c0b      	lsrs	r3, r1, #16
 800f728:	0c15      	lsrs	r5, r2, #16
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	d11e      	bne.n	800f76c <_calloc_r+0x48>
 800f72e:	2d00      	cmp	r5, #0
 800f730:	d10c      	bne.n	800f74c <_calloc_r+0x28>
 800f732:	b289      	uxth	r1, r1
 800f734:	b294      	uxth	r4, r2
 800f736:	434c      	muls	r4, r1
 800f738:	0021      	movs	r1, r4
 800f73a:	f7fe ff87 	bl	800e64c <_malloc_r>
 800f73e:	1e05      	subs	r5, r0, #0
 800f740:	d01a      	beq.n	800f778 <_calloc_r+0x54>
 800f742:	0022      	movs	r2, r4
 800f744:	2100      	movs	r1, #0
 800f746:	f7fd ffed 	bl	800d724 <memset>
 800f74a:	e016      	b.n	800f77a <_calloc_r+0x56>
 800f74c:	1c2b      	adds	r3, r5, #0
 800f74e:	1c0c      	adds	r4, r1, #0
 800f750:	b289      	uxth	r1, r1
 800f752:	b292      	uxth	r2, r2
 800f754:	434a      	muls	r2, r1
 800f756:	b29b      	uxth	r3, r3
 800f758:	b2a1      	uxth	r1, r4
 800f75a:	4359      	muls	r1, r3
 800f75c:	0c14      	lsrs	r4, r2, #16
 800f75e:	190c      	adds	r4, r1, r4
 800f760:	0c23      	lsrs	r3, r4, #16
 800f762:	d107      	bne.n	800f774 <_calloc_r+0x50>
 800f764:	0424      	lsls	r4, r4, #16
 800f766:	b292      	uxth	r2, r2
 800f768:	4314      	orrs	r4, r2
 800f76a:	e7e5      	b.n	800f738 <_calloc_r+0x14>
 800f76c:	2d00      	cmp	r5, #0
 800f76e:	d101      	bne.n	800f774 <_calloc_r+0x50>
 800f770:	1c14      	adds	r4, r2, #0
 800f772:	e7ed      	b.n	800f750 <_calloc_r+0x2c>
 800f774:	230c      	movs	r3, #12
 800f776:	6003      	str	r3, [r0, #0]
 800f778:	2500      	movs	r5, #0
 800f77a:	0028      	movs	r0, r5
 800f77c:	bd70      	pop	{r4, r5, r6, pc}

0800f77e <__ascii_mbtowc>:
 800f77e:	b082      	sub	sp, #8
 800f780:	2900      	cmp	r1, #0
 800f782:	d100      	bne.n	800f786 <__ascii_mbtowc+0x8>
 800f784:	a901      	add	r1, sp, #4
 800f786:	1e10      	subs	r0, r2, #0
 800f788:	d006      	beq.n	800f798 <__ascii_mbtowc+0x1a>
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	d006      	beq.n	800f79c <__ascii_mbtowc+0x1e>
 800f78e:	7813      	ldrb	r3, [r2, #0]
 800f790:	600b      	str	r3, [r1, #0]
 800f792:	7810      	ldrb	r0, [r2, #0]
 800f794:	1e43      	subs	r3, r0, #1
 800f796:	4198      	sbcs	r0, r3
 800f798:	b002      	add	sp, #8
 800f79a:	4770      	bx	lr
 800f79c:	2002      	movs	r0, #2
 800f79e:	4240      	negs	r0, r0
 800f7a0:	e7fa      	b.n	800f798 <__ascii_mbtowc+0x1a>

0800f7a2 <_realloc_r>:
 800f7a2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f7a4:	0006      	movs	r6, r0
 800f7a6:	000c      	movs	r4, r1
 800f7a8:	0015      	movs	r5, r2
 800f7aa:	2900      	cmp	r1, #0
 800f7ac:	d105      	bne.n	800f7ba <_realloc_r+0x18>
 800f7ae:	0011      	movs	r1, r2
 800f7b0:	f7fe ff4c 	bl	800e64c <_malloc_r>
 800f7b4:	0004      	movs	r4, r0
 800f7b6:	0020      	movs	r0, r4
 800f7b8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800f7ba:	2a00      	cmp	r2, #0
 800f7bc:	d103      	bne.n	800f7c6 <_realloc_r+0x24>
 800f7be:	f7fe fecf 	bl	800e560 <_free_r>
 800f7c2:	2400      	movs	r4, #0
 800f7c4:	e7f7      	b.n	800f7b6 <_realloc_r+0x14>
 800f7c6:	f000 f8d0 	bl	800f96a <_malloc_usable_size_r>
 800f7ca:	0007      	movs	r7, r0
 800f7cc:	4285      	cmp	r5, r0
 800f7ce:	d802      	bhi.n	800f7d6 <_realloc_r+0x34>
 800f7d0:	0843      	lsrs	r3, r0, #1
 800f7d2:	42ab      	cmp	r3, r5
 800f7d4:	d3ef      	bcc.n	800f7b6 <_realloc_r+0x14>
 800f7d6:	0029      	movs	r1, r5
 800f7d8:	0030      	movs	r0, r6
 800f7da:	f7fe ff37 	bl	800e64c <_malloc_r>
 800f7de:	9001      	str	r0, [sp, #4]
 800f7e0:	2800      	cmp	r0, #0
 800f7e2:	d0ee      	beq.n	800f7c2 <_realloc_r+0x20>
 800f7e4:	002a      	movs	r2, r5
 800f7e6:	42bd      	cmp	r5, r7
 800f7e8:	d900      	bls.n	800f7ec <_realloc_r+0x4a>
 800f7ea:	003a      	movs	r2, r7
 800f7ec:	0021      	movs	r1, r4
 800f7ee:	9801      	ldr	r0, [sp, #4]
 800f7f0:	f7fe f82a 	bl	800d848 <memcpy>
 800f7f4:	0021      	movs	r1, r4
 800f7f6:	0030      	movs	r0, r6
 800f7f8:	f7fe feb2 	bl	800e560 <_free_r>
 800f7fc:	9c01      	ldr	r4, [sp, #4]
 800f7fe:	e7da      	b.n	800f7b6 <_realloc_r+0x14>

0800f800 <__ascii_wctomb>:
 800f800:	0003      	movs	r3, r0
 800f802:	1e08      	subs	r0, r1, #0
 800f804:	d005      	beq.n	800f812 <__ascii_wctomb+0x12>
 800f806:	2aff      	cmp	r2, #255	@ 0xff
 800f808:	d904      	bls.n	800f814 <__ascii_wctomb+0x14>
 800f80a:	228a      	movs	r2, #138	@ 0x8a
 800f80c:	2001      	movs	r0, #1
 800f80e:	601a      	str	r2, [r3, #0]
 800f810:	4240      	negs	r0, r0
 800f812:	4770      	bx	lr
 800f814:	2001      	movs	r0, #1
 800f816:	700a      	strb	r2, [r1, #0]
 800f818:	e7fb      	b.n	800f812 <__ascii_wctomb+0x12>
	...

0800f81c <fiprintf>:
 800f81c:	b40e      	push	{r1, r2, r3}
 800f81e:	b517      	push	{r0, r1, r2, r4, lr}
 800f820:	4c05      	ldr	r4, [pc, #20]	@ (800f838 <fiprintf+0x1c>)
 800f822:	ab05      	add	r3, sp, #20
 800f824:	cb04      	ldmia	r3!, {r2}
 800f826:	0001      	movs	r1, r0
 800f828:	6820      	ldr	r0, [r4, #0]
 800f82a:	9301      	str	r3, [sp, #4]
 800f82c:	f7ff fcc8 	bl	800f1c0 <_vfiprintf_r>
 800f830:	bc1e      	pop	{r1, r2, r3, r4}
 800f832:	bc08      	pop	{r3}
 800f834:	b003      	add	sp, #12
 800f836:	4718      	bx	r3
 800f838:	20000054 	.word	0x20000054

0800f83c <__swhatbuf_r>:
 800f83c:	b570      	push	{r4, r5, r6, lr}
 800f83e:	000e      	movs	r6, r1
 800f840:	001d      	movs	r5, r3
 800f842:	230e      	movs	r3, #14
 800f844:	5ec9      	ldrsh	r1, [r1, r3]
 800f846:	0014      	movs	r4, r2
 800f848:	b096      	sub	sp, #88	@ 0x58
 800f84a:	2900      	cmp	r1, #0
 800f84c:	da0c      	bge.n	800f868 <__swhatbuf_r+0x2c>
 800f84e:	89b2      	ldrh	r2, [r6, #12]
 800f850:	2380      	movs	r3, #128	@ 0x80
 800f852:	0011      	movs	r1, r2
 800f854:	4019      	ands	r1, r3
 800f856:	421a      	tst	r2, r3
 800f858:	d114      	bne.n	800f884 <__swhatbuf_r+0x48>
 800f85a:	2380      	movs	r3, #128	@ 0x80
 800f85c:	00db      	lsls	r3, r3, #3
 800f85e:	2000      	movs	r0, #0
 800f860:	6029      	str	r1, [r5, #0]
 800f862:	6023      	str	r3, [r4, #0]
 800f864:	b016      	add	sp, #88	@ 0x58
 800f866:	bd70      	pop	{r4, r5, r6, pc}
 800f868:	466a      	mov	r2, sp
 800f86a:	f000 f853 	bl	800f914 <_fstat_r>
 800f86e:	2800      	cmp	r0, #0
 800f870:	dbed      	blt.n	800f84e <__swhatbuf_r+0x12>
 800f872:	23f0      	movs	r3, #240	@ 0xf0
 800f874:	9901      	ldr	r1, [sp, #4]
 800f876:	021b      	lsls	r3, r3, #8
 800f878:	4019      	ands	r1, r3
 800f87a:	4b04      	ldr	r3, [pc, #16]	@ (800f88c <__swhatbuf_r+0x50>)
 800f87c:	18c9      	adds	r1, r1, r3
 800f87e:	424b      	negs	r3, r1
 800f880:	4159      	adcs	r1, r3
 800f882:	e7ea      	b.n	800f85a <__swhatbuf_r+0x1e>
 800f884:	2100      	movs	r1, #0
 800f886:	2340      	movs	r3, #64	@ 0x40
 800f888:	e7e9      	b.n	800f85e <__swhatbuf_r+0x22>
 800f88a:	46c0      	nop			@ (mov r8, r8)
 800f88c:	ffffe000 	.word	0xffffe000

0800f890 <__smakebuf_r>:
 800f890:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f892:	2602      	movs	r6, #2
 800f894:	898b      	ldrh	r3, [r1, #12]
 800f896:	0005      	movs	r5, r0
 800f898:	000c      	movs	r4, r1
 800f89a:	b085      	sub	sp, #20
 800f89c:	4233      	tst	r3, r6
 800f89e:	d007      	beq.n	800f8b0 <__smakebuf_r+0x20>
 800f8a0:	0023      	movs	r3, r4
 800f8a2:	3347      	adds	r3, #71	@ 0x47
 800f8a4:	6023      	str	r3, [r4, #0]
 800f8a6:	6123      	str	r3, [r4, #16]
 800f8a8:	2301      	movs	r3, #1
 800f8aa:	6163      	str	r3, [r4, #20]
 800f8ac:	b005      	add	sp, #20
 800f8ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f8b0:	ab03      	add	r3, sp, #12
 800f8b2:	aa02      	add	r2, sp, #8
 800f8b4:	f7ff ffc2 	bl	800f83c <__swhatbuf_r>
 800f8b8:	9f02      	ldr	r7, [sp, #8]
 800f8ba:	9001      	str	r0, [sp, #4]
 800f8bc:	0039      	movs	r1, r7
 800f8be:	0028      	movs	r0, r5
 800f8c0:	f7fe fec4 	bl	800e64c <_malloc_r>
 800f8c4:	2800      	cmp	r0, #0
 800f8c6:	d108      	bne.n	800f8da <__smakebuf_r+0x4a>
 800f8c8:	220c      	movs	r2, #12
 800f8ca:	5ea3      	ldrsh	r3, [r4, r2]
 800f8cc:	059a      	lsls	r2, r3, #22
 800f8ce:	d4ed      	bmi.n	800f8ac <__smakebuf_r+0x1c>
 800f8d0:	2203      	movs	r2, #3
 800f8d2:	4393      	bics	r3, r2
 800f8d4:	431e      	orrs	r6, r3
 800f8d6:	81a6      	strh	r6, [r4, #12]
 800f8d8:	e7e2      	b.n	800f8a0 <__smakebuf_r+0x10>
 800f8da:	2380      	movs	r3, #128	@ 0x80
 800f8dc:	89a2      	ldrh	r2, [r4, #12]
 800f8de:	6020      	str	r0, [r4, #0]
 800f8e0:	4313      	orrs	r3, r2
 800f8e2:	81a3      	strh	r3, [r4, #12]
 800f8e4:	9b03      	ldr	r3, [sp, #12]
 800f8e6:	6120      	str	r0, [r4, #16]
 800f8e8:	6167      	str	r7, [r4, #20]
 800f8ea:	2b00      	cmp	r3, #0
 800f8ec:	d00c      	beq.n	800f908 <__smakebuf_r+0x78>
 800f8ee:	0028      	movs	r0, r5
 800f8f0:	230e      	movs	r3, #14
 800f8f2:	5ee1      	ldrsh	r1, [r4, r3]
 800f8f4:	f000 f820 	bl	800f938 <_isatty_r>
 800f8f8:	2800      	cmp	r0, #0
 800f8fa:	d005      	beq.n	800f908 <__smakebuf_r+0x78>
 800f8fc:	2303      	movs	r3, #3
 800f8fe:	89a2      	ldrh	r2, [r4, #12]
 800f900:	439a      	bics	r2, r3
 800f902:	3b02      	subs	r3, #2
 800f904:	4313      	orrs	r3, r2
 800f906:	81a3      	strh	r3, [r4, #12]
 800f908:	89a3      	ldrh	r3, [r4, #12]
 800f90a:	9a01      	ldr	r2, [sp, #4]
 800f90c:	4313      	orrs	r3, r2
 800f90e:	81a3      	strh	r3, [r4, #12]
 800f910:	e7cc      	b.n	800f8ac <__smakebuf_r+0x1c>
	...

0800f914 <_fstat_r>:
 800f914:	2300      	movs	r3, #0
 800f916:	b570      	push	{r4, r5, r6, lr}
 800f918:	4d06      	ldr	r5, [pc, #24]	@ (800f934 <_fstat_r+0x20>)
 800f91a:	0004      	movs	r4, r0
 800f91c:	0008      	movs	r0, r1
 800f91e:	0011      	movs	r1, r2
 800f920:	602b      	str	r3, [r5, #0]
 800f922:	f7f6 f95d 	bl	8005be0 <_fstat>
 800f926:	1c43      	adds	r3, r0, #1
 800f928:	d103      	bne.n	800f932 <_fstat_r+0x1e>
 800f92a:	682b      	ldr	r3, [r5, #0]
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	d000      	beq.n	800f932 <_fstat_r+0x1e>
 800f930:	6023      	str	r3, [r4, #0]
 800f932:	bd70      	pop	{r4, r5, r6, pc}
 800f934:	200018a8 	.word	0x200018a8

0800f938 <_isatty_r>:
 800f938:	2300      	movs	r3, #0
 800f93a:	b570      	push	{r4, r5, r6, lr}
 800f93c:	4d06      	ldr	r5, [pc, #24]	@ (800f958 <_isatty_r+0x20>)
 800f93e:	0004      	movs	r4, r0
 800f940:	0008      	movs	r0, r1
 800f942:	602b      	str	r3, [r5, #0]
 800f944:	f7f6 f95a 	bl	8005bfc <_isatty>
 800f948:	1c43      	adds	r3, r0, #1
 800f94a:	d103      	bne.n	800f954 <_isatty_r+0x1c>
 800f94c:	682b      	ldr	r3, [r5, #0]
 800f94e:	2b00      	cmp	r3, #0
 800f950:	d000      	beq.n	800f954 <_isatty_r+0x1c>
 800f952:	6023      	str	r3, [r4, #0]
 800f954:	bd70      	pop	{r4, r5, r6, pc}
 800f956:	46c0      	nop			@ (mov r8, r8)
 800f958:	200018a8 	.word	0x200018a8

0800f95c <abort>:
 800f95c:	2006      	movs	r0, #6
 800f95e:	b510      	push	{r4, lr}
 800f960:	f000 f834 	bl	800f9cc <raise>
 800f964:	2001      	movs	r0, #1
 800f966:	f7f6 f907 	bl	8005b78 <_exit>

0800f96a <_malloc_usable_size_r>:
 800f96a:	1f0b      	subs	r3, r1, #4
 800f96c:	681b      	ldr	r3, [r3, #0]
 800f96e:	1f18      	subs	r0, r3, #4
 800f970:	2b00      	cmp	r3, #0
 800f972:	da01      	bge.n	800f978 <_malloc_usable_size_r+0xe>
 800f974:	580b      	ldr	r3, [r1, r0]
 800f976:	18c0      	adds	r0, r0, r3
 800f978:	4770      	bx	lr

0800f97a <_raise_r>:
 800f97a:	b570      	push	{r4, r5, r6, lr}
 800f97c:	0004      	movs	r4, r0
 800f97e:	000d      	movs	r5, r1
 800f980:	291f      	cmp	r1, #31
 800f982:	d904      	bls.n	800f98e <_raise_r+0x14>
 800f984:	2316      	movs	r3, #22
 800f986:	6003      	str	r3, [r0, #0]
 800f988:	2001      	movs	r0, #1
 800f98a:	4240      	negs	r0, r0
 800f98c:	bd70      	pop	{r4, r5, r6, pc}
 800f98e:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800f990:	2b00      	cmp	r3, #0
 800f992:	d004      	beq.n	800f99e <_raise_r+0x24>
 800f994:	008a      	lsls	r2, r1, #2
 800f996:	189b      	adds	r3, r3, r2
 800f998:	681a      	ldr	r2, [r3, #0]
 800f99a:	2a00      	cmp	r2, #0
 800f99c:	d108      	bne.n	800f9b0 <_raise_r+0x36>
 800f99e:	0020      	movs	r0, r4
 800f9a0:	f000 f830 	bl	800fa04 <_getpid_r>
 800f9a4:	002a      	movs	r2, r5
 800f9a6:	0001      	movs	r1, r0
 800f9a8:	0020      	movs	r0, r4
 800f9aa:	f000 f819 	bl	800f9e0 <_kill_r>
 800f9ae:	e7ed      	b.n	800f98c <_raise_r+0x12>
 800f9b0:	2a01      	cmp	r2, #1
 800f9b2:	d009      	beq.n	800f9c8 <_raise_r+0x4e>
 800f9b4:	1c51      	adds	r1, r2, #1
 800f9b6:	d103      	bne.n	800f9c0 <_raise_r+0x46>
 800f9b8:	2316      	movs	r3, #22
 800f9ba:	6003      	str	r3, [r0, #0]
 800f9bc:	2001      	movs	r0, #1
 800f9be:	e7e5      	b.n	800f98c <_raise_r+0x12>
 800f9c0:	2100      	movs	r1, #0
 800f9c2:	0028      	movs	r0, r5
 800f9c4:	6019      	str	r1, [r3, #0]
 800f9c6:	4790      	blx	r2
 800f9c8:	2000      	movs	r0, #0
 800f9ca:	e7df      	b.n	800f98c <_raise_r+0x12>

0800f9cc <raise>:
 800f9cc:	b510      	push	{r4, lr}
 800f9ce:	4b03      	ldr	r3, [pc, #12]	@ (800f9dc <raise+0x10>)
 800f9d0:	0001      	movs	r1, r0
 800f9d2:	6818      	ldr	r0, [r3, #0]
 800f9d4:	f7ff ffd1 	bl	800f97a <_raise_r>
 800f9d8:	bd10      	pop	{r4, pc}
 800f9da:	46c0      	nop			@ (mov r8, r8)
 800f9dc:	20000054 	.word	0x20000054

0800f9e0 <_kill_r>:
 800f9e0:	2300      	movs	r3, #0
 800f9e2:	b570      	push	{r4, r5, r6, lr}
 800f9e4:	4d06      	ldr	r5, [pc, #24]	@ (800fa00 <_kill_r+0x20>)
 800f9e6:	0004      	movs	r4, r0
 800f9e8:	0008      	movs	r0, r1
 800f9ea:	0011      	movs	r1, r2
 800f9ec:	602b      	str	r3, [r5, #0]
 800f9ee:	f7f6 f8b3 	bl	8005b58 <_kill>
 800f9f2:	1c43      	adds	r3, r0, #1
 800f9f4:	d103      	bne.n	800f9fe <_kill_r+0x1e>
 800f9f6:	682b      	ldr	r3, [r5, #0]
 800f9f8:	2b00      	cmp	r3, #0
 800f9fa:	d000      	beq.n	800f9fe <_kill_r+0x1e>
 800f9fc:	6023      	str	r3, [r4, #0]
 800f9fe:	bd70      	pop	{r4, r5, r6, pc}
 800fa00:	200018a8 	.word	0x200018a8

0800fa04 <_getpid_r>:
 800fa04:	b510      	push	{r4, lr}
 800fa06:	f7f6 f8a1 	bl	8005b4c <_getpid>
 800fa0a:	bd10      	pop	{r4, pc}

0800fa0c <expf>:
 800fa0c:	b570      	push	{r4, r5, r6, lr}
 800fa0e:	1c04      	adds	r4, r0, #0
 800fa10:	f000 f8c2 	bl	800fb98 <__ieee754_expf>
 800fa14:	1c05      	adds	r5, r0, #0
 800fa16:	1c20      	adds	r0, r4, #0
 800fa18:	f000 f83c 	bl	800fa94 <finitef>
 800fa1c:	2800      	cmp	r0, #0
 800fa1e:	d00b      	beq.n	800fa38 <expf+0x2c>
 800fa20:	490c      	ldr	r1, [pc, #48]	@ (800fa54 <expf+0x48>)
 800fa22:	1c20      	adds	r0, r4, #0
 800fa24:	f7f0 fd66 	bl	80004f4 <__aeabi_fcmpgt>
 800fa28:	2800      	cmp	r0, #0
 800fa2a:	d007      	beq.n	800fa3c <expf+0x30>
 800fa2c:	f7fd fed4 	bl	800d7d8 <__errno>
 800fa30:	25ff      	movs	r5, #255	@ 0xff
 800fa32:	2322      	movs	r3, #34	@ 0x22
 800fa34:	05ed      	lsls	r5, r5, #23
 800fa36:	6003      	str	r3, [r0, #0]
 800fa38:	1c28      	adds	r0, r5, #0
 800fa3a:	bd70      	pop	{r4, r5, r6, pc}
 800fa3c:	4906      	ldr	r1, [pc, #24]	@ (800fa58 <expf+0x4c>)
 800fa3e:	1c20      	adds	r0, r4, #0
 800fa40:	f7f0 fd44 	bl	80004cc <__aeabi_fcmplt>
 800fa44:	2800      	cmp	r0, #0
 800fa46:	d0f7      	beq.n	800fa38 <expf+0x2c>
 800fa48:	f7fd fec6 	bl	800d7d8 <__errno>
 800fa4c:	2322      	movs	r3, #34	@ 0x22
 800fa4e:	2500      	movs	r5, #0
 800fa50:	6003      	str	r3, [r0, #0]
 800fa52:	e7f1      	b.n	800fa38 <expf+0x2c>
 800fa54:	42b17217 	.word	0x42b17217
 800fa58:	c2cff1b5 	.word	0xc2cff1b5

0800fa5c <sqrtf>:
 800fa5c:	b570      	push	{r4, r5, r6, lr}
 800fa5e:	1c05      	adds	r5, r0, #0
 800fa60:	f000 f822 	bl	800faa8 <__ieee754_sqrtf>
 800fa64:	1c29      	adds	r1, r5, #0
 800fa66:	1c04      	adds	r4, r0, #0
 800fa68:	1c28      	adds	r0, r5, #0
 800fa6a:	f7f1 fcc3 	bl	80013f4 <__aeabi_fcmpun>
 800fa6e:	2800      	cmp	r0, #0
 800fa70:	d10e      	bne.n	800fa90 <sqrtf+0x34>
 800fa72:	2100      	movs	r1, #0
 800fa74:	1c28      	adds	r0, r5, #0
 800fa76:	f7f0 fd29 	bl	80004cc <__aeabi_fcmplt>
 800fa7a:	2800      	cmp	r0, #0
 800fa7c:	d008      	beq.n	800fa90 <sqrtf+0x34>
 800fa7e:	f7fd feab 	bl	800d7d8 <__errno>
 800fa82:	2321      	movs	r3, #33	@ 0x21
 800fa84:	2100      	movs	r1, #0
 800fa86:	6003      	str	r3, [r0, #0]
 800fa88:	1c08      	adds	r0, r1, #0
 800fa8a:	f7f0 ffeb 	bl	8000a64 <__aeabi_fdiv>
 800fa8e:	1c04      	adds	r4, r0, #0
 800fa90:	1c20      	adds	r0, r4, #0
 800fa92:	bd70      	pop	{r4, r5, r6, pc}

0800fa94 <finitef>:
 800fa94:	22ff      	movs	r2, #255	@ 0xff
 800fa96:	0043      	lsls	r3, r0, #1
 800fa98:	085b      	lsrs	r3, r3, #1
 800fa9a:	2001      	movs	r0, #1
 800fa9c:	05d2      	lsls	r2, r2, #23
 800fa9e:	4293      	cmp	r3, r2
 800faa0:	db00      	blt.n	800faa4 <finitef+0x10>
 800faa2:	2000      	movs	r0, #0
 800faa4:	4770      	bx	lr
	...

0800faa8 <__ieee754_sqrtf>:
 800faa8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800faaa:	0003      	movs	r3, r0
 800faac:	0042      	lsls	r2, r0, #1
 800faae:	1c04      	adds	r4, r0, #0
 800fab0:	20ff      	movs	r0, #255	@ 0xff
 800fab2:	0852      	lsrs	r2, r2, #1
 800fab4:	05c0      	lsls	r0, r0, #23
 800fab6:	4282      	cmp	r2, r0
 800fab8:	d30a      	bcc.n	800fad0 <__ieee754_sqrtf+0x28>
 800faba:	1c21      	adds	r1, r4, #0
 800fabc:	1c20      	adds	r0, r4, #0
 800fabe:	f7f1 f9b7 	bl	8000e30 <__aeabi_fmul>
 800fac2:	1c01      	adds	r1, r0, #0
 800fac4:	1c20      	adds	r0, r4, #0
 800fac6:	f7f0 fe43 	bl	8000750 <__aeabi_fadd>
 800faca:	1c04      	adds	r4, r0, #0
 800facc:	1c20      	adds	r0, r4, #0
 800face:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800fad0:	2a00      	cmp	r2, #0
 800fad2:	d0fb      	beq.n	800facc <__ieee754_sqrtf+0x24>
 800fad4:	2c00      	cmp	r4, #0
 800fad6:	da07      	bge.n	800fae8 <__ieee754_sqrtf+0x40>
 800fad8:	1c21      	adds	r1, r4, #0
 800fada:	1c20      	adds	r0, r4, #0
 800fadc:	f7f1 fae6 	bl	80010ac <__aeabi_fsub>
 800fae0:	1c01      	adds	r1, r0, #0
 800fae2:	f7f0 ffbf 	bl	8000a64 <__aeabi_fdiv>
 800fae6:	e7f0      	b.n	800faca <__ieee754_sqrtf+0x22>
 800fae8:	0022      	movs	r2, r4
 800faea:	15e1      	asrs	r1, r4, #23
 800faec:	4002      	ands	r2, r0
 800faee:	4204      	tst	r4, r0
 800faf0:	d046      	beq.n	800fb80 <__ieee754_sqrtf+0xd8>
 800faf2:	2280      	movs	r2, #128	@ 0x80
 800faf4:	000f      	movs	r7, r1
 800faf6:	025b      	lsls	r3, r3, #9
 800faf8:	0a5b      	lsrs	r3, r3, #9
 800fafa:	0412      	lsls	r2, r2, #16
 800fafc:	3f7f      	subs	r7, #127	@ 0x7f
 800fafe:	4313      	orrs	r3, r2
 800fb00:	07c9      	lsls	r1, r1, #31
 800fb02:	d400      	bmi.n	800fb06 <__ieee754_sqrtf+0x5e>
 800fb04:	005b      	lsls	r3, r3, #1
 800fb06:	2400      	movs	r4, #0
 800fb08:	2180      	movs	r1, #128	@ 0x80
 800fb0a:	2019      	movs	r0, #25
 800fb0c:	0026      	movs	r6, r4
 800fb0e:	107f      	asrs	r7, r7, #1
 800fb10:	005b      	lsls	r3, r3, #1
 800fb12:	0449      	lsls	r1, r1, #17
 800fb14:	1875      	adds	r5, r6, r1
 800fb16:	001a      	movs	r2, r3
 800fb18:	429d      	cmp	r5, r3
 800fb1a:	dc02      	bgt.n	800fb22 <__ieee754_sqrtf+0x7a>
 800fb1c:	186e      	adds	r6, r5, r1
 800fb1e:	1b5a      	subs	r2, r3, r5
 800fb20:	1864      	adds	r4, r4, r1
 800fb22:	3801      	subs	r0, #1
 800fb24:	0053      	lsls	r3, r2, #1
 800fb26:	0849      	lsrs	r1, r1, #1
 800fb28:	2800      	cmp	r0, #0
 800fb2a:	d1f3      	bne.n	800fb14 <__ieee754_sqrtf+0x6c>
 800fb2c:	2a00      	cmp	r2, #0
 800fb2e:	d019      	beq.n	800fb64 <__ieee754_sqrtf+0xbc>
 800fb30:	4d17      	ldr	r5, [pc, #92]	@ (800fb90 <__ieee754_sqrtf+0xe8>)
 800fb32:	4e18      	ldr	r6, [pc, #96]	@ (800fb94 <__ieee754_sqrtf+0xec>)
 800fb34:	6828      	ldr	r0, [r5, #0]
 800fb36:	6831      	ldr	r1, [r6, #0]
 800fb38:	682b      	ldr	r3, [r5, #0]
 800fb3a:	9301      	str	r3, [sp, #4]
 800fb3c:	f7f1 fab6 	bl	80010ac <__aeabi_fsub>
 800fb40:	1c01      	adds	r1, r0, #0
 800fb42:	9801      	ldr	r0, [sp, #4]
 800fb44:	f7f0 fccc 	bl	80004e0 <__aeabi_fcmple>
 800fb48:	2800      	cmp	r0, #0
 800fb4a:	d00b      	beq.n	800fb64 <__ieee754_sqrtf+0xbc>
 800fb4c:	6828      	ldr	r0, [r5, #0]
 800fb4e:	6831      	ldr	r1, [r6, #0]
 800fb50:	f7f0 fdfe 	bl	8000750 <__aeabi_fadd>
 800fb54:	682d      	ldr	r5, [r5, #0]
 800fb56:	1c01      	adds	r1, r0, #0
 800fb58:	1c28      	adds	r0, r5, #0
 800fb5a:	f7f0 fcb7 	bl	80004cc <__aeabi_fcmplt>
 800fb5e:	2800      	cmp	r0, #0
 800fb60:	d011      	beq.n	800fb86 <__ieee754_sqrtf+0xde>
 800fb62:	3402      	adds	r4, #2
 800fb64:	23fc      	movs	r3, #252	@ 0xfc
 800fb66:	1064      	asrs	r4, r4, #1
 800fb68:	059b      	lsls	r3, r3, #22
 800fb6a:	18e3      	adds	r3, r4, r3
 800fb6c:	05fc      	lsls	r4, r7, #23
 800fb6e:	18e4      	adds	r4, r4, r3
 800fb70:	e7ac      	b.n	800facc <__ieee754_sqrtf+0x24>
 800fb72:	005b      	lsls	r3, r3, #1
 800fb74:	3201      	adds	r2, #1
 800fb76:	4203      	tst	r3, r0
 800fb78:	d0fb      	beq.n	800fb72 <__ieee754_sqrtf+0xca>
 800fb7a:	3a01      	subs	r2, #1
 800fb7c:	1a89      	subs	r1, r1, r2
 800fb7e:	e7b8      	b.n	800faf2 <__ieee754_sqrtf+0x4a>
 800fb80:	2080      	movs	r0, #128	@ 0x80
 800fb82:	0400      	lsls	r0, r0, #16
 800fb84:	e7f7      	b.n	800fb76 <__ieee754_sqrtf+0xce>
 800fb86:	2301      	movs	r3, #1
 800fb88:	3401      	adds	r4, #1
 800fb8a:	439c      	bics	r4, r3
 800fb8c:	e7ea      	b.n	800fb64 <__ieee754_sqrtf+0xbc>
 800fb8e:	46c0      	nop			@ (mov r8, r8)
 800fb90:	20000214 	.word	0x20000214
 800fb94:	20000210 	.word	0x20000210

0800fb98 <__ieee754_expf>:
 800fb98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fb9a:	21ff      	movs	r1, #255	@ 0xff
 800fb9c:	0043      	lsls	r3, r0, #1
 800fb9e:	1c04      	adds	r4, r0, #0
 800fba0:	085b      	lsrs	r3, r3, #1
 800fba2:	05c9      	lsls	r1, r1, #23
 800fba4:	428b      	cmp	r3, r1
 800fba6:	d904      	bls.n	800fbb2 <__ieee754_expf+0x1a>
 800fba8:	1c01      	adds	r1, r0, #0
 800fbaa:	1c20      	adds	r0, r4, #0
 800fbac:	f7f0 fdd0 	bl	8000750 <__aeabi_fadd>
 800fbb0:	e00d      	b.n	800fbce <__ieee754_expf+0x36>
 800fbb2:	0fc6      	lsrs	r6, r0, #31
 800fbb4:	428b      	cmp	r3, r1
 800fbb6:	d104      	bne.n	800fbc2 <__ieee754_expf+0x2a>
 800fbb8:	2e00      	cmp	r6, #0
 800fbba:	d000      	beq.n	800fbbe <__ieee754_expf+0x26>
 800fbbc:	e0ba      	b.n	800fd34 <__ieee754_expf+0x19c>
 800fbbe:	1c20      	adds	r0, r4, #0
 800fbc0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800fbc2:	495d      	ldr	r1, [pc, #372]	@ (800fd38 <__ieee754_expf+0x1a0>)
 800fbc4:	4288      	cmp	r0, r1
 800fbc6:	dd04      	ble.n	800fbd2 <__ieee754_expf+0x3a>
 800fbc8:	2000      	movs	r0, #0
 800fbca:	f000 f8f1 	bl	800fdb0 <__math_oflowf>
 800fbce:	1c04      	adds	r4, r0, #0
 800fbd0:	e7f5      	b.n	800fbbe <__ieee754_expf+0x26>
 800fbd2:	2800      	cmp	r0, #0
 800fbd4:	da06      	bge.n	800fbe4 <__ieee754_expf+0x4c>
 800fbd6:	4a59      	ldr	r2, [pc, #356]	@ (800fd3c <__ieee754_expf+0x1a4>)
 800fbd8:	4293      	cmp	r3, r2
 800fbda:	d903      	bls.n	800fbe4 <__ieee754_expf+0x4c>
 800fbdc:	2000      	movs	r0, #0
 800fbde:	f000 f8e1 	bl	800fda4 <__math_uflowf>
 800fbe2:	e7f4      	b.n	800fbce <__ieee754_expf+0x36>
 800fbe4:	4a56      	ldr	r2, [pc, #344]	@ (800fd40 <__ieee754_expf+0x1a8>)
 800fbe6:	4293      	cmp	r3, r2
 800fbe8:	d96e      	bls.n	800fcc8 <__ieee754_expf+0x130>
 800fbea:	4a56      	ldr	r2, [pc, #344]	@ (800fd44 <__ieee754_expf+0x1ac>)
 800fbec:	00b5      	lsls	r5, r6, #2
 800fbee:	4293      	cmp	r3, r2
 800fbf0:	d84e      	bhi.n	800fc90 <__ieee754_expf+0xf8>
 800fbf2:	4b55      	ldr	r3, [pc, #340]	@ (800fd48 <__ieee754_expf+0x1b0>)
 800fbf4:	1c20      	adds	r0, r4, #0
 800fbf6:	5959      	ldr	r1, [r3, r5]
 800fbf8:	f7f1 fa58 	bl	80010ac <__aeabi_fsub>
 800fbfc:	4b53      	ldr	r3, [pc, #332]	@ (800fd4c <__ieee754_expf+0x1b4>)
 800fbfe:	1c07      	adds	r7, r0, #0
 800fc00:	595b      	ldr	r3, [r3, r5]
 800fc02:	2501      	movs	r5, #1
 800fc04:	1bad      	subs	r5, r5, r6
 800fc06:	9300      	str	r3, [sp, #0]
 800fc08:	1bad      	subs	r5, r5, r6
 800fc0a:	9900      	ldr	r1, [sp, #0]
 800fc0c:	1c38      	adds	r0, r7, #0
 800fc0e:	f7f1 fa4d 	bl	80010ac <__aeabi_fsub>
 800fc12:	1c04      	adds	r4, r0, #0
 800fc14:	1c21      	adds	r1, r4, #0
 800fc16:	1c20      	adds	r0, r4, #0
 800fc18:	f7f1 f90a 	bl	8000e30 <__aeabi_fmul>
 800fc1c:	494c      	ldr	r1, [pc, #304]	@ (800fd50 <__ieee754_expf+0x1b8>)
 800fc1e:	1c06      	adds	r6, r0, #0
 800fc20:	f7f1 f906 	bl	8000e30 <__aeabi_fmul>
 800fc24:	494b      	ldr	r1, [pc, #300]	@ (800fd54 <__ieee754_expf+0x1bc>)
 800fc26:	f7f1 fa41 	bl	80010ac <__aeabi_fsub>
 800fc2a:	1c31      	adds	r1, r6, #0
 800fc2c:	f7f1 f900 	bl	8000e30 <__aeabi_fmul>
 800fc30:	4949      	ldr	r1, [pc, #292]	@ (800fd58 <__ieee754_expf+0x1c0>)
 800fc32:	f7f0 fd8d 	bl	8000750 <__aeabi_fadd>
 800fc36:	1c31      	adds	r1, r6, #0
 800fc38:	f7f1 f8fa 	bl	8000e30 <__aeabi_fmul>
 800fc3c:	4947      	ldr	r1, [pc, #284]	@ (800fd5c <__ieee754_expf+0x1c4>)
 800fc3e:	f7f1 fa35 	bl	80010ac <__aeabi_fsub>
 800fc42:	1c31      	adds	r1, r6, #0
 800fc44:	f7f1 f8f4 	bl	8000e30 <__aeabi_fmul>
 800fc48:	4945      	ldr	r1, [pc, #276]	@ (800fd60 <__ieee754_expf+0x1c8>)
 800fc4a:	f7f0 fd81 	bl	8000750 <__aeabi_fadd>
 800fc4e:	1c31      	adds	r1, r6, #0
 800fc50:	f7f1 f8ee 	bl	8000e30 <__aeabi_fmul>
 800fc54:	1c01      	adds	r1, r0, #0
 800fc56:	1c20      	adds	r0, r4, #0
 800fc58:	f7f1 fa28 	bl	80010ac <__aeabi_fsub>
 800fc5c:	1c01      	adds	r1, r0, #0
 800fc5e:	1c06      	adds	r6, r0, #0
 800fc60:	1c20      	adds	r0, r4, #0
 800fc62:	f7f1 f8e5 	bl	8000e30 <__aeabi_fmul>
 800fc66:	9001      	str	r0, [sp, #4]
 800fc68:	2d00      	cmp	r5, #0
 800fc6a:	d140      	bne.n	800fcee <__ieee754_expf+0x156>
 800fc6c:	2180      	movs	r1, #128	@ 0x80
 800fc6e:	1c30      	adds	r0, r6, #0
 800fc70:	05c9      	lsls	r1, r1, #23
 800fc72:	f7f1 fa1b 	bl	80010ac <__aeabi_fsub>
 800fc76:	1c01      	adds	r1, r0, #0
 800fc78:	9801      	ldr	r0, [sp, #4]
 800fc7a:	f7f0 fef3 	bl	8000a64 <__aeabi_fdiv>
 800fc7e:	1c21      	adds	r1, r4, #0
 800fc80:	f7f1 fa14 	bl	80010ac <__aeabi_fsub>
 800fc84:	1c01      	adds	r1, r0, #0
 800fc86:	20fe      	movs	r0, #254	@ 0xfe
 800fc88:	0580      	lsls	r0, r0, #22
 800fc8a:	f7f1 fa0f 	bl	80010ac <__aeabi_fsub>
 800fc8e:	e79e      	b.n	800fbce <__ieee754_expf+0x36>
 800fc90:	4934      	ldr	r1, [pc, #208]	@ (800fd64 <__ieee754_expf+0x1cc>)
 800fc92:	1c20      	adds	r0, r4, #0
 800fc94:	f7f1 f8cc 	bl	8000e30 <__aeabi_fmul>
 800fc98:	4b33      	ldr	r3, [pc, #204]	@ (800fd68 <__ieee754_expf+0x1d0>)
 800fc9a:	5959      	ldr	r1, [r3, r5]
 800fc9c:	f7f0 fd58 	bl	8000750 <__aeabi_fadd>
 800fca0:	f7f1 fbbe 	bl	8001420 <__aeabi_f2iz>
 800fca4:	0005      	movs	r5, r0
 800fca6:	f7f1 fbdb 	bl	8001460 <__aeabi_i2f>
 800fcaa:	4930      	ldr	r1, [pc, #192]	@ (800fd6c <__ieee754_expf+0x1d4>)
 800fcac:	1c06      	adds	r6, r0, #0
 800fcae:	f7f1 f8bf 	bl	8000e30 <__aeabi_fmul>
 800fcb2:	1c01      	adds	r1, r0, #0
 800fcb4:	1c20      	adds	r0, r4, #0
 800fcb6:	f7f1 f9f9 	bl	80010ac <__aeabi_fsub>
 800fcba:	492d      	ldr	r1, [pc, #180]	@ (800fd70 <__ieee754_expf+0x1d8>)
 800fcbc:	1c07      	adds	r7, r0, #0
 800fcbe:	1c30      	adds	r0, r6, #0
 800fcc0:	f7f1 f8b6 	bl	8000e30 <__aeabi_fmul>
 800fcc4:	9000      	str	r0, [sp, #0]
 800fcc6:	e7a0      	b.n	800fc0a <__ieee754_expf+0x72>
 800fcc8:	22d0      	movs	r2, #208	@ 0xd0
 800fcca:	0592      	lsls	r2, r2, #22
 800fccc:	4293      	cmp	r3, r2
 800fcce:	d20c      	bcs.n	800fcea <__ieee754_expf+0x152>
 800fcd0:	4928      	ldr	r1, [pc, #160]	@ (800fd74 <__ieee754_expf+0x1dc>)
 800fcd2:	1c20      	adds	r0, r4, #0
 800fcd4:	f7f0 fd3c 	bl	8000750 <__aeabi_fadd>
 800fcd8:	21fe      	movs	r1, #254	@ 0xfe
 800fcda:	0589      	lsls	r1, r1, #22
 800fcdc:	f7f0 fc0a 	bl	80004f4 <__aeabi_fcmpgt>
 800fce0:	1e05      	subs	r5, r0, #0
 800fce2:	d097      	beq.n	800fc14 <__ieee754_expf+0x7c>
 800fce4:	21fe      	movs	r1, #254	@ 0xfe
 800fce6:	0589      	lsls	r1, r1, #22
 800fce8:	e75f      	b.n	800fbaa <__ieee754_expf+0x12>
 800fcea:	2500      	movs	r5, #0
 800fcec:	e792      	b.n	800fc14 <__ieee754_expf+0x7c>
 800fcee:	2080      	movs	r0, #128	@ 0x80
 800fcf0:	1c31      	adds	r1, r6, #0
 800fcf2:	05c0      	lsls	r0, r0, #23
 800fcf4:	f7f1 f9da 	bl	80010ac <__aeabi_fsub>
 800fcf8:	1c01      	adds	r1, r0, #0
 800fcfa:	9801      	ldr	r0, [sp, #4]
 800fcfc:	f7f0 feb2 	bl	8000a64 <__aeabi_fdiv>
 800fd00:	1c01      	adds	r1, r0, #0
 800fd02:	9800      	ldr	r0, [sp, #0]
 800fd04:	f7f1 f9d2 	bl	80010ac <__aeabi_fsub>
 800fd08:	1c39      	adds	r1, r7, #0
 800fd0a:	f7f1 f9cf 	bl	80010ac <__aeabi_fsub>
 800fd0e:	1c01      	adds	r1, r0, #0
 800fd10:	20fe      	movs	r0, #254	@ 0xfe
 800fd12:	0580      	lsls	r0, r0, #22
 800fd14:	f7f1 f9ca 	bl	80010ac <__aeabi_fsub>
 800fd18:	002b      	movs	r3, r5
 800fd1a:	337d      	adds	r3, #125	@ 0x7d
 800fd1c:	db02      	blt.n	800fd24 <__ieee754_expf+0x18c>
 800fd1e:	05ec      	lsls	r4, r5, #23
 800fd20:	1824      	adds	r4, r4, r0
 800fd22:	e74c      	b.n	800fbbe <__ieee754_expf+0x26>
 800fd24:	21d8      	movs	r1, #216	@ 0xd8
 800fd26:	3564      	adds	r5, #100	@ 0x64
 800fd28:	05ed      	lsls	r5, r5, #23
 800fd2a:	1828      	adds	r0, r5, r0
 800fd2c:	0509      	lsls	r1, r1, #20
 800fd2e:	f7f1 f87f 	bl	8000e30 <__aeabi_fmul>
 800fd32:	e74c      	b.n	800fbce <__ieee754_expf+0x36>
 800fd34:	2400      	movs	r4, #0
 800fd36:	e742      	b.n	800fbbe <__ieee754_expf+0x26>
 800fd38:	42b17217 	.word	0x42b17217
 800fd3c:	42cff1b5 	.word	0x42cff1b5
 800fd40:	3eb17218 	.word	0x3eb17218
 800fd44:	3f851591 	.word	0x3f851591
 800fd48:	08010960 	.word	0x08010960
 800fd4c:	08010958 	.word	0x08010958
 800fd50:	3331bb4c 	.word	0x3331bb4c
 800fd54:	35ddea0e 	.word	0x35ddea0e
 800fd58:	388ab355 	.word	0x388ab355
 800fd5c:	3b360b61 	.word	0x3b360b61
 800fd60:	3e2aaaab 	.word	0x3e2aaaab
 800fd64:	3fb8aa3b 	.word	0x3fb8aa3b
 800fd68:	08010968 	.word	0x08010968
 800fd6c:	3f317180 	.word	0x3f317180
 800fd70:	3717f7d1 	.word	0x3717f7d1
 800fd74:	7149f2ca 	.word	0x7149f2ca

0800fd78 <with_errnof>:
 800fd78:	b570      	push	{r4, r5, r6, lr}
 800fd7a:	000d      	movs	r5, r1
 800fd7c:	1c04      	adds	r4, r0, #0
 800fd7e:	f7fd fd2b 	bl	800d7d8 <__errno>
 800fd82:	6005      	str	r5, [r0, #0]
 800fd84:	1c20      	adds	r0, r4, #0
 800fd86:	bd70      	pop	{r4, r5, r6, pc}

0800fd88 <xflowf>:
 800fd88:	b510      	push	{r4, lr}
 800fd8a:	1c0b      	adds	r3, r1, #0
 800fd8c:	2800      	cmp	r0, #0
 800fd8e:	d002      	beq.n	800fd96 <xflowf+0xe>
 800fd90:	2380      	movs	r3, #128	@ 0x80
 800fd92:	061b      	lsls	r3, r3, #24
 800fd94:	18cb      	adds	r3, r1, r3
 800fd96:	1c18      	adds	r0, r3, #0
 800fd98:	f7f1 f84a 	bl	8000e30 <__aeabi_fmul>
 800fd9c:	2122      	movs	r1, #34	@ 0x22
 800fd9e:	f7ff ffeb 	bl	800fd78 <with_errnof>
 800fda2:	bd10      	pop	{r4, pc}

0800fda4 <__math_uflowf>:
 800fda4:	2180      	movs	r1, #128	@ 0x80
 800fda6:	b510      	push	{r4, lr}
 800fda8:	0549      	lsls	r1, r1, #21
 800fdaa:	f7ff ffed 	bl	800fd88 <xflowf>
 800fdae:	bd10      	pop	{r4, pc}

0800fdb0 <__math_oflowf>:
 800fdb0:	21e0      	movs	r1, #224	@ 0xe0
 800fdb2:	b510      	push	{r4, lr}
 800fdb4:	05c9      	lsls	r1, r1, #23
 800fdb6:	f7ff ffe7 	bl	800fd88 <xflowf>
 800fdba:	bd10      	pop	{r4, pc}

0800fdbc <_init>:
 800fdbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fdbe:	46c0      	nop			@ (mov r8, r8)
 800fdc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fdc2:	bc08      	pop	{r3}
 800fdc4:	469e      	mov	lr, r3
 800fdc6:	4770      	bx	lr

0800fdc8 <_fini>:
 800fdc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fdca:	46c0      	nop			@ (mov r8, r8)
 800fdcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fdce:	bc08      	pop	{r3}
 800fdd0:	469e      	mov	lr, r3
 800fdd2:	4770      	bx	lr
=======
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	2240      	movs	r2, #64	@ 0x40
 800cdda:	2101      	movs	r1, #1
 800cddc:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	2240      	movs	r2, #64	@ 0x40
 800cde2:	2100      	movs	r1, #0
 800cde4:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	2244      	movs	r2, #68	@ 0x44
 800cdea:	2100      	movs	r1, #0
 800cdec:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	2250      	movs	r2, #80	@ 0x50
 800cdf2:	2100      	movs	r1, #0
 800cdf4:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800cdf6:	2300      	movs	r3, #0
}
 800cdf8:	0018      	movs	r0, r3
 800cdfa:	46bd      	mov	sp, r7
 800cdfc:	b003      	add	sp, #12
 800cdfe:	bc90      	pop	{r4, r7}
 800ce00:	bc08      	pop	{r3}
 800ce02:	b004      	add	sp, #16
 800ce04:	4718      	bx	r3

0800ce06 <__cvt>:
 800ce06:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ce08:	001f      	movs	r7, r3
 800ce0a:	2300      	movs	r3, #0
 800ce0c:	0016      	movs	r6, r2
 800ce0e:	b08b      	sub	sp, #44	@ 0x2c
 800ce10:	429f      	cmp	r7, r3
 800ce12:	da04      	bge.n	800ce1e <__cvt+0x18>
 800ce14:	2180      	movs	r1, #128	@ 0x80
 800ce16:	0609      	lsls	r1, r1, #24
 800ce18:	187b      	adds	r3, r7, r1
 800ce1a:	001f      	movs	r7, r3
 800ce1c:	232d      	movs	r3, #45	@ 0x2d
 800ce1e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800ce20:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 800ce22:	7013      	strb	r3, [r2, #0]
 800ce24:	2320      	movs	r3, #32
 800ce26:	2203      	movs	r2, #3
 800ce28:	439d      	bics	r5, r3
 800ce2a:	2d46      	cmp	r5, #70	@ 0x46
 800ce2c:	d007      	beq.n	800ce3e <__cvt+0x38>
 800ce2e:	002b      	movs	r3, r5
 800ce30:	3b45      	subs	r3, #69	@ 0x45
 800ce32:	4259      	negs	r1, r3
 800ce34:	414b      	adcs	r3, r1
 800ce36:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800ce38:	3a01      	subs	r2, #1
 800ce3a:	18cb      	adds	r3, r1, r3
 800ce3c:	9310      	str	r3, [sp, #64]	@ 0x40
 800ce3e:	ab09      	add	r3, sp, #36	@ 0x24
 800ce40:	9304      	str	r3, [sp, #16]
 800ce42:	ab08      	add	r3, sp, #32
 800ce44:	9303      	str	r3, [sp, #12]
 800ce46:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ce48:	9200      	str	r2, [sp, #0]
 800ce4a:	9302      	str	r3, [sp, #8]
 800ce4c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ce4e:	0032      	movs	r2, r6
 800ce50:	9301      	str	r3, [sp, #4]
 800ce52:	003b      	movs	r3, r7
 800ce54:	f000 fedc 	bl	800dc10 <_dtoa_r>
 800ce58:	0004      	movs	r4, r0
 800ce5a:	2d47      	cmp	r5, #71	@ 0x47
 800ce5c:	d11b      	bne.n	800ce96 <__cvt+0x90>
 800ce5e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ce60:	07db      	lsls	r3, r3, #31
 800ce62:	d511      	bpl.n	800ce88 <__cvt+0x82>
 800ce64:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ce66:	18c3      	adds	r3, r0, r3
 800ce68:	9307      	str	r3, [sp, #28]
 800ce6a:	2200      	movs	r2, #0
 800ce6c:	2300      	movs	r3, #0
 800ce6e:	0030      	movs	r0, r6
 800ce70:	0039      	movs	r1, r7
 800ce72:	f7f3 faeb 	bl	800044c <__aeabi_dcmpeq>
 800ce76:	2800      	cmp	r0, #0
 800ce78:	d001      	beq.n	800ce7e <__cvt+0x78>
 800ce7a:	9b07      	ldr	r3, [sp, #28]
 800ce7c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ce7e:	2230      	movs	r2, #48	@ 0x30
 800ce80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ce82:	9907      	ldr	r1, [sp, #28]
 800ce84:	428b      	cmp	r3, r1
 800ce86:	d320      	bcc.n	800ceca <__cvt+0xc4>
 800ce88:	0020      	movs	r0, r4
 800ce8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ce8c:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800ce8e:	1b1b      	subs	r3, r3, r4
 800ce90:	6013      	str	r3, [r2, #0]
 800ce92:	b00b      	add	sp, #44	@ 0x2c
 800ce94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce96:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ce98:	18c3      	adds	r3, r0, r3
 800ce9a:	9307      	str	r3, [sp, #28]
 800ce9c:	2d46      	cmp	r5, #70	@ 0x46
 800ce9e:	d1e4      	bne.n	800ce6a <__cvt+0x64>
 800cea0:	7803      	ldrb	r3, [r0, #0]
 800cea2:	2b30      	cmp	r3, #48	@ 0x30
 800cea4:	d10c      	bne.n	800cec0 <__cvt+0xba>
 800cea6:	2200      	movs	r2, #0
 800cea8:	2300      	movs	r3, #0
 800ceaa:	0030      	movs	r0, r6
 800ceac:	0039      	movs	r1, r7
 800ceae:	f7f3 facd 	bl	800044c <__aeabi_dcmpeq>
 800ceb2:	2800      	cmp	r0, #0
 800ceb4:	d104      	bne.n	800cec0 <__cvt+0xba>
 800ceb6:	2301      	movs	r3, #1
 800ceb8:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800ceba:	1a9b      	subs	r3, r3, r2
 800cebc:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800cebe:	6013      	str	r3, [r2, #0]
 800cec0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800cec2:	9a07      	ldr	r2, [sp, #28]
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	18d3      	adds	r3, r2, r3
 800cec8:	e7ce      	b.n	800ce68 <__cvt+0x62>
 800ceca:	1c59      	adds	r1, r3, #1
 800cecc:	9109      	str	r1, [sp, #36]	@ 0x24
 800cece:	701a      	strb	r2, [r3, #0]
 800ced0:	e7d6      	b.n	800ce80 <__cvt+0x7a>

0800ced2 <__exponent>:
 800ced2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ced4:	232b      	movs	r3, #43	@ 0x2b
 800ced6:	0005      	movs	r5, r0
 800ced8:	000c      	movs	r4, r1
 800ceda:	b085      	sub	sp, #20
 800cedc:	7002      	strb	r2, [r0, #0]
 800cede:	2900      	cmp	r1, #0
 800cee0:	da01      	bge.n	800cee6 <__exponent+0x14>
 800cee2:	424c      	negs	r4, r1
 800cee4:	3302      	adds	r3, #2
 800cee6:	706b      	strb	r3, [r5, #1]
 800cee8:	2c09      	cmp	r4, #9
 800ceea:	dd2c      	ble.n	800cf46 <__exponent+0x74>
 800ceec:	ab02      	add	r3, sp, #8
 800ceee:	1dde      	adds	r6, r3, #7
 800cef0:	0020      	movs	r0, r4
 800cef2:	210a      	movs	r1, #10
 800cef4:	f7f3 fa94 	bl	8000420 <__aeabi_idivmod>
 800cef8:	0037      	movs	r7, r6
 800cefa:	3130      	adds	r1, #48	@ 0x30
 800cefc:	3e01      	subs	r6, #1
 800cefe:	0020      	movs	r0, r4
 800cf00:	7031      	strb	r1, [r6, #0]
 800cf02:	210a      	movs	r1, #10
 800cf04:	9401      	str	r4, [sp, #4]
 800cf06:	f7f3 f9a5 	bl	8000254 <__divsi3>
 800cf0a:	9b01      	ldr	r3, [sp, #4]
 800cf0c:	0004      	movs	r4, r0
 800cf0e:	2b63      	cmp	r3, #99	@ 0x63
 800cf10:	dcee      	bgt.n	800cef0 <__exponent+0x1e>
 800cf12:	1eba      	subs	r2, r7, #2
 800cf14:	1ca8      	adds	r0, r5, #2
 800cf16:	0001      	movs	r1, r0
 800cf18:	0013      	movs	r3, r2
 800cf1a:	3430      	adds	r4, #48	@ 0x30
 800cf1c:	7014      	strb	r4, [r2, #0]
 800cf1e:	ac02      	add	r4, sp, #8
 800cf20:	3407      	adds	r4, #7
 800cf22:	429c      	cmp	r4, r3
 800cf24:	d80a      	bhi.n	800cf3c <__exponent+0x6a>
 800cf26:	2300      	movs	r3, #0
 800cf28:	42a2      	cmp	r2, r4
 800cf2a:	d803      	bhi.n	800cf34 <__exponent+0x62>
 800cf2c:	3309      	adds	r3, #9
 800cf2e:	aa02      	add	r2, sp, #8
 800cf30:	189b      	adds	r3, r3, r2
 800cf32:	1bdb      	subs	r3, r3, r7
 800cf34:	18c0      	adds	r0, r0, r3
 800cf36:	1b40      	subs	r0, r0, r5
 800cf38:	b005      	add	sp, #20
 800cf3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cf3c:	781c      	ldrb	r4, [r3, #0]
 800cf3e:	3301      	adds	r3, #1
 800cf40:	700c      	strb	r4, [r1, #0]
 800cf42:	3101      	adds	r1, #1
 800cf44:	e7eb      	b.n	800cf1e <__exponent+0x4c>
 800cf46:	2330      	movs	r3, #48	@ 0x30
 800cf48:	18e4      	adds	r4, r4, r3
 800cf4a:	70ab      	strb	r3, [r5, #2]
 800cf4c:	1d28      	adds	r0, r5, #4
 800cf4e:	70ec      	strb	r4, [r5, #3]
 800cf50:	e7f1      	b.n	800cf36 <__exponent+0x64>
	...

0800cf54 <_printf_float>:
 800cf54:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cf56:	b097      	sub	sp, #92	@ 0x5c
 800cf58:	000d      	movs	r5, r1
 800cf5a:	920a      	str	r2, [sp, #40]	@ 0x28
 800cf5c:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 800cf5e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cf60:	9009      	str	r0, [sp, #36]	@ 0x24
 800cf62:	f000 fd33 	bl	800d9cc <_localeconv_r>
 800cf66:	6803      	ldr	r3, [r0, #0]
 800cf68:	0018      	movs	r0, r3
 800cf6a:	930d      	str	r3, [sp, #52]	@ 0x34
 800cf6c:	f7f3 f8cc 	bl	8000108 <strlen>
 800cf70:	2300      	movs	r3, #0
 800cf72:	900f      	str	r0, [sp, #60]	@ 0x3c
 800cf74:	9314      	str	r3, [sp, #80]	@ 0x50
 800cf76:	7e2b      	ldrb	r3, [r5, #24]
 800cf78:	2207      	movs	r2, #7
 800cf7a:	930c      	str	r3, [sp, #48]	@ 0x30
 800cf7c:	682b      	ldr	r3, [r5, #0]
 800cf7e:	930e      	str	r3, [sp, #56]	@ 0x38
 800cf80:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800cf82:	6823      	ldr	r3, [r4, #0]
 800cf84:	05c9      	lsls	r1, r1, #23
 800cf86:	d545      	bpl.n	800d014 <_printf_float+0xc0>
 800cf88:	189b      	adds	r3, r3, r2
 800cf8a:	4393      	bics	r3, r2
 800cf8c:	001a      	movs	r2, r3
 800cf8e:	3208      	adds	r2, #8
 800cf90:	6022      	str	r2, [r4, #0]
 800cf92:	2201      	movs	r2, #1
 800cf94:	681e      	ldr	r6, [r3, #0]
 800cf96:	685f      	ldr	r7, [r3, #4]
 800cf98:	007b      	lsls	r3, r7, #1
 800cf9a:	085b      	lsrs	r3, r3, #1
 800cf9c:	9311      	str	r3, [sp, #68]	@ 0x44
 800cf9e:	9610      	str	r6, [sp, #64]	@ 0x40
 800cfa0:	64ae      	str	r6, [r5, #72]	@ 0x48
 800cfa2:	64ef      	str	r7, [r5, #76]	@ 0x4c
 800cfa4:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800cfa6:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800cfa8:	4ba7      	ldr	r3, [pc, #668]	@ (800d248 <_printf_float+0x2f4>)
 800cfaa:	4252      	negs	r2, r2
 800cfac:	f7f6 f928 	bl	8003200 <__aeabi_dcmpun>
 800cfb0:	2800      	cmp	r0, #0
 800cfb2:	d131      	bne.n	800d018 <_printf_float+0xc4>
 800cfb4:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800cfb6:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800cfb8:	2201      	movs	r2, #1
 800cfba:	4ba3      	ldr	r3, [pc, #652]	@ (800d248 <_printf_float+0x2f4>)
 800cfbc:	4252      	negs	r2, r2
 800cfbe:	f7f3 fa55 	bl	800046c <__aeabi_dcmple>
 800cfc2:	2800      	cmp	r0, #0
 800cfc4:	d128      	bne.n	800d018 <_printf_float+0xc4>
 800cfc6:	2200      	movs	r2, #0
 800cfc8:	2300      	movs	r3, #0
 800cfca:	0030      	movs	r0, r6
 800cfcc:	0039      	movs	r1, r7
 800cfce:	f7f3 fa43 	bl	8000458 <__aeabi_dcmplt>
 800cfd2:	2800      	cmp	r0, #0
 800cfd4:	d003      	beq.n	800cfde <_printf_float+0x8a>
 800cfd6:	002b      	movs	r3, r5
 800cfd8:	222d      	movs	r2, #45	@ 0x2d
 800cfda:	3343      	adds	r3, #67	@ 0x43
 800cfdc:	701a      	strb	r2, [r3, #0]
 800cfde:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800cfe0:	4f9a      	ldr	r7, [pc, #616]	@ (800d24c <_printf_float+0x2f8>)
 800cfe2:	2b47      	cmp	r3, #71	@ 0x47
 800cfe4:	d900      	bls.n	800cfe8 <_printf_float+0x94>
 800cfe6:	4f9a      	ldr	r7, [pc, #616]	@ (800d250 <_printf_float+0x2fc>)
 800cfe8:	2303      	movs	r3, #3
 800cfea:	2400      	movs	r4, #0
 800cfec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cfee:	612b      	str	r3, [r5, #16]
 800cff0:	3301      	adds	r3, #1
 800cff2:	439a      	bics	r2, r3
 800cff4:	602a      	str	r2, [r5, #0]
 800cff6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cff8:	0029      	movs	r1, r5
 800cffa:	9300      	str	r3, [sp, #0]
 800cffc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cffe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d000:	aa15      	add	r2, sp, #84	@ 0x54
 800d002:	f000 f9e5 	bl	800d3d0 <_printf_common>
 800d006:	3001      	adds	r0, #1
 800d008:	d000      	beq.n	800d00c <_printf_float+0xb8>
 800d00a:	e09f      	b.n	800d14c <_printf_float+0x1f8>
 800d00c:	2001      	movs	r0, #1
 800d00e:	4240      	negs	r0, r0
 800d010:	b017      	add	sp, #92	@ 0x5c
 800d012:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d014:	3307      	adds	r3, #7
 800d016:	e7b8      	b.n	800cf8a <_printf_float+0x36>
 800d018:	0032      	movs	r2, r6
 800d01a:	003b      	movs	r3, r7
 800d01c:	0030      	movs	r0, r6
 800d01e:	0039      	movs	r1, r7
 800d020:	f7f6 f8ee 	bl	8003200 <__aeabi_dcmpun>
 800d024:	2800      	cmp	r0, #0
 800d026:	d00b      	beq.n	800d040 <_printf_float+0xec>
 800d028:	2f00      	cmp	r7, #0
 800d02a:	da03      	bge.n	800d034 <_printf_float+0xe0>
 800d02c:	002b      	movs	r3, r5
 800d02e:	222d      	movs	r2, #45	@ 0x2d
 800d030:	3343      	adds	r3, #67	@ 0x43
 800d032:	701a      	strb	r2, [r3, #0]
 800d034:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d036:	4f87      	ldr	r7, [pc, #540]	@ (800d254 <_printf_float+0x300>)
 800d038:	2b47      	cmp	r3, #71	@ 0x47
 800d03a:	d9d5      	bls.n	800cfe8 <_printf_float+0x94>
 800d03c:	4f86      	ldr	r7, [pc, #536]	@ (800d258 <_printf_float+0x304>)
 800d03e:	e7d3      	b.n	800cfe8 <_printf_float+0x94>
 800d040:	2220      	movs	r2, #32
 800d042:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 800d044:	686b      	ldr	r3, [r5, #4]
 800d046:	4394      	bics	r4, r2
 800d048:	1c5a      	adds	r2, r3, #1
 800d04a:	d146      	bne.n	800d0da <_printf_float+0x186>
 800d04c:	3307      	adds	r3, #7
 800d04e:	606b      	str	r3, [r5, #4]
 800d050:	2380      	movs	r3, #128	@ 0x80
 800d052:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d054:	00db      	lsls	r3, r3, #3
 800d056:	4313      	orrs	r3, r2
 800d058:	2200      	movs	r2, #0
 800d05a:	602b      	str	r3, [r5, #0]
 800d05c:	9206      	str	r2, [sp, #24]
 800d05e:	aa14      	add	r2, sp, #80	@ 0x50
 800d060:	9205      	str	r2, [sp, #20]
 800d062:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800d064:	a90a      	add	r1, sp, #40	@ 0x28
 800d066:	9204      	str	r2, [sp, #16]
 800d068:	aa13      	add	r2, sp, #76	@ 0x4c
 800d06a:	9203      	str	r2, [sp, #12]
 800d06c:	2223      	movs	r2, #35	@ 0x23
 800d06e:	1852      	adds	r2, r2, r1
 800d070:	9202      	str	r2, [sp, #8]
 800d072:	9301      	str	r3, [sp, #4]
 800d074:	686b      	ldr	r3, [r5, #4]
 800d076:	0032      	movs	r2, r6
 800d078:	9300      	str	r3, [sp, #0]
 800d07a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d07c:	003b      	movs	r3, r7
 800d07e:	f7ff fec2 	bl	800ce06 <__cvt>
 800d082:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800d084:	0007      	movs	r7, r0
 800d086:	2c47      	cmp	r4, #71	@ 0x47
 800d088:	d12d      	bne.n	800d0e6 <_printf_float+0x192>
 800d08a:	1cd3      	adds	r3, r2, #3
 800d08c:	db02      	blt.n	800d094 <_printf_float+0x140>
 800d08e:	686b      	ldr	r3, [r5, #4]
 800d090:	429a      	cmp	r2, r3
 800d092:	dd48      	ble.n	800d126 <_printf_float+0x1d2>
 800d094:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d096:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800d098:	3b02      	subs	r3, #2
 800d09a:	b2db      	uxtb	r3, r3
 800d09c:	930c      	str	r3, [sp, #48]	@ 0x30
 800d09e:	0028      	movs	r0, r5
 800d0a0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800d0a2:	3901      	subs	r1, #1
 800d0a4:	3050      	adds	r0, #80	@ 0x50
 800d0a6:	9113      	str	r1, [sp, #76]	@ 0x4c
 800d0a8:	f7ff ff13 	bl	800ced2 <__exponent>
 800d0ac:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800d0ae:	0004      	movs	r4, r0
 800d0b0:	1813      	adds	r3, r2, r0
 800d0b2:	612b      	str	r3, [r5, #16]
 800d0b4:	2a01      	cmp	r2, #1
 800d0b6:	dc02      	bgt.n	800d0be <_printf_float+0x16a>
 800d0b8:	682a      	ldr	r2, [r5, #0]
 800d0ba:	07d2      	lsls	r2, r2, #31
 800d0bc:	d501      	bpl.n	800d0c2 <_printf_float+0x16e>
 800d0be:	3301      	adds	r3, #1
 800d0c0:	612b      	str	r3, [r5, #16]
 800d0c2:	2323      	movs	r3, #35	@ 0x23
 800d0c4:	aa0a      	add	r2, sp, #40	@ 0x28
 800d0c6:	189b      	adds	r3, r3, r2
 800d0c8:	781b      	ldrb	r3, [r3, #0]
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d100      	bne.n	800d0d0 <_printf_float+0x17c>
 800d0ce:	e792      	b.n	800cff6 <_printf_float+0xa2>
 800d0d0:	002b      	movs	r3, r5
 800d0d2:	222d      	movs	r2, #45	@ 0x2d
 800d0d4:	3343      	adds	r3, #67	@ 0x43
 800d0d6:	701a      	strb	r2, [r3, #0]
 800d0d8:	e78d      	b.n	800cff6 <_printf_float+0xa2>
 800d0da:	2c47      	cmp	r4, #71	@ 0x47
 800d0dc:	d1b8      	bne.n	800d050 <_printf_float+0xfc>
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d1b6      	bne.n	800d050 <_printf_float+0xfc>
 800d0e2:	3301      	adds	r3, #1
 800d0e4:	e7b3      	b.n	800d04e <_printf_float+0xfa>
 800d0e6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d0e8:	0011      	movs	r1, r2
 800d0ea:	2b65      	cmp	r3, #101	@ 0x65
 800d0ec:	d9d7      	bls.n	800d09e <_printf_float+0x14a>
 800d0ee:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d0f0:	2b66      	cmp	r3, #102	@ 0x66
 800d0f2:	d11a      	bne.n	800d12a <_printf_float+0x1d6>
 800d0f4:	686b      	ldr	r3, [r5, #4]
 800d0f6:	2a00      	cmp	r2, #0
 800d0f8:	dd09      	ble.n	800d10e <_printf_float+0x1ba>
 800d0fa:	612a      	str	r2, [r5, #16]
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d102      	bne.n	800d106 <_printf_float+0x1b2>
 800d100:	6829      	ldr	r1, [r5, #0]
 800d102:	07c9      	lsls	r1, r1, #31
 800d104:	d50b      	bpl.n	800d11e <_printf_float+0x1ca>
 800d106:	3301      	adds	r3, #1
 800d108:	189b      	adds	r3, r3, r2
 800d10a:	612b      	str	r3, [r5, #16]
 800d10c:	e007      	b.n	800d11e <_printf_float+0x1ca>
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d103      	bne.n	800d11a <_printf_float+0x1c6>
 800d112:	2201      	movs	r2, #1
 800d114:	6829      	ldr	r1, [r5, #0]
 800d116:	4211      	tst	r1, r2
 800d118:	d000      	beq.n	800d11c <_printf_float+0x1c8>
 800d11a:	1c9a      	adds	r2, r3, #2
 800d11c:	612a      	str	r2, [r5, #16]
 800d11e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d120:	2400      	movs	r4, #0
 800d122:	65ab      	str	r3, [r5, #88]	@ 0x58
 800d124:	e7cd      	b.n	800d0c2 <_printf_float+0x16e>
 800d126:	2367      	movs	r3, #103	@ 0x67
 800d128:	930c      	str	r3, [sp, #48]	@ 0x30
 800d12a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800d12c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800d12e:	4299      	cmp	r1, r3
 800d130:	db06      	blt.n	800d140 <_printf_float+0x1ec>
 800d132:	682b      	ldr	r3, [r5, #0]
 800d134:	6129      	str	r1, [r5, #16]
 800d136:	07db      	lsls	r3, r3, #31
 800d138:	d5f1      	bpl.n	800d11e <_printf_float+0x1ca>
 800d13a:	3101      	adds	r1, #1
 800d13c:	6129      	str	r1, [r5, #16]
 800d13e:	e7ee      	b.n	800d11e <_printf_float+0x1ca>
 800d140:	2201      	movs	r2, #1
 800d142:	2900      	cmp	r1, #0
 800d144:	dce0      	bgt.n	800d108 <_printf_float+0x1b4>
 800d146:	1892      	adds	r2, r2, r2
 800d148:	1a52      	subs	r2, r2, r1
 800d14a:	e7dd      	b.n	800d108 <_printf_float+0x1b4>
 800d14c:	682a      	ldr	r2, [r5, #0]
 800d14e:	0553      	lsls	r3, r2, #21
 800d150:	d408      	bmi.n	800d164 <_printf_float+0x210>
 800d152:	692b      	ldr	r3, [r5, #16]
 800d154:	003a      	movs	r2, r7
 800d156:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d158:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d15a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800d15c:	47a0      	blx	r4
 800d15e:	3001      	adds	r0, #1
 800d160:	d129      	bne.n	800d1b6 <_printf_float+0x262>
 800d162:	e753      	b.n	800d00c <_printf_float+0xb8>
 800d164:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d166:	2b65      	cmp	r3, #101	@ 0x65
 800d168:	d800      	bhi.n	800d16c <_printf_float+0x218>
 800d16a:	e0da      	b.n	800d322 <_printf_float+0x3ce>
 800d16c:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800d16e:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800d170:	2200      	movs	r2, #0
 800d172:	2300      	movs	r3, #0
 800d174:	f7f3 f96a 	bl	800044c <__aeabi_dcmpeq>
 800d178:	2800      	cmp	r0, #0
 800d17a:	d033      	beq.n	800d1e4 <_printf_float+0x290>
 800d17c:	2301      	movs	r3, #1
 800d17e:	4a37      	ldr	r2, [pc, #220]	@ (800d25c <_printf_float+0x308>)
 800d180:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d182:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d184:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800d186:	47a0      	blx	r4
 800d188:	3001      	adds	r0, #1
 800d18a:	d100      	bne.n	800d18e <_printf_float+0x23a>
 800d18c:	e73e      	b.n	800d00c <_printf_float+0xb8>
 800d18e:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 800d190:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d192:	42b3      	cmp	r3, r6
 800d194:	db02      	blt.n	800d19c <_printf_float+0x248>
 800d196:	682b      	ldr	r3, [r5, #0]
 800d198:	07db      	lsls	r3, r3, #31
 800d19a:	d50c      	bpl.n	800d1b6 <_printf_float+0x262>
 800d19c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800d19e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d1a0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d1a2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d1a4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d1a6:	47a0      	blx	r4
 800d1a8:	2400      	movs	r4, #0
 800d1aa:	3001      	adds	r0, #1
 800d1ac:	d100      	bne.n	800d1b0 <_printf_float+0x25c>
 800d1ae:	e72d      	b.n	800d00c <_printf_float+0xb8>
 800d1b0:	1e73      	subs	r3, r6, #1
 800d1b2:	42a3      	cmp	r3, r4
 800d1b4:	dc0a      	bgt.n	800d1cc <_printf_float+0x278>
 800d1b6:	682b      	ldr	r3, [r5, #0]
 800d1b8:	079b      	lsls	r3, r3, #30
 800d1ba:	d500      	bpl.n	800d1be <_printf_float+0x26a>
 800d1bc:	e105      	b.n	800d3ca <_printf_float+0x476>
 800d1be:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800d1c0:	68e8      	ldr	r0, [r5, #12]
 800d1c2:	4298      	cmp	r0, r3
 800d1c4:	db00      	blt.n	800d1c8 <_printf_float+0x274>
 800d1c6:	e723      	b.n	800d010 <_printf_float+0xbc>
 800d1c8:	0018      	movs	r0, r3
 800d1ca:	e721      	b.n	800d010 <_printf_float+0xbc>
 800d1cc:	002a      	movs	r2, r5
 800d1ce:	2301      	movs	r3, #1
 800d1d0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d1d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d1d4:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800d1d6:	321a      	adds	r2, #26
 800d1d8:	47b8      	blx	r7
 800d1da:	3001      	adds	r0, #1
 800d1dc:	d100      	bne.n	800d1e0 <_printf_float+0x28c>
 800d1de:	e715      	b.n	800d00c <_printf_float+0xb8>
 800d1e0:	3401      	adds	r4, #1
 800d1e2:	e7e5      	b.n	800d1b0 <_printf_float+0x25c>
 800d1e4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	dc3a      	bgt.n	800d260 <_printf_float+0x30c>
 800d1ea:	2301      	movs	r3, #1
 800d1ec:	4a1b      	ldr	r2, [pc, #108]	@ (800d25c <_printf_float+0x308>)
 800d1ee:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d1f0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d1f2:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800d1f4:	47a0      	blx	r4
 800d1f6:	3001      	adds	r0, #1
 800d1f8:	d100      	bne.n	800d1fc <_printf_float+0x2a8>
 800d1fa:	e707      	b.n	800d00c <_printf_float+0xb8>
 800d1fc:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 800d1fe:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d200:	4333      	orrs	r3, r6
 800d202:	d102      	bne.n	800d20a <_printf_float+0x2b6>
 800d204:	682b      	ldr	r3, [r5, #0]
 800d206:	07db      	lsls	r3, r3, #31
 800d208:	d5d5      	bpl.n	800d1b6 <_printf_float+0x262>
 800d20a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d20c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d20e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d210:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d212:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800d214:	47a0      	blx	r4
 800d216:	2300      	movs	r3, #0
 800d218:	3001      	adds	r0, #1
 800d21a:	d100      	bne.n	800d21e <_printf_float+0x2ca>
 800d21c:	e6f6      	b.n	800d00c <_printf_float+0xb8>
 800d21e:	930c      	str	r3, [sp, #48]	@ 0x30
 800d220:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d222:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800d224:	425b      	negs	r3, r3
 800d226:	4293      	cmp	r3, r2
 800d228:	dc01      	bgt.n	800d22e <_printf_float+0x2da>
 800d22a:	0033      	movs	r3, r6
 800d22c:	e792      	b.n	800d154 <_printf_float+0x200>
 800d22e:	002a      	movs	r2, r5
 800d230:	2301      	movs	r3, #1
 800d232:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d234:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d236:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800d238:	321a      	adds	r2, #26
 800d23a:	47a0      	blx	r4
 800d23c:	3001      	adds	r0, #1
 800d23e:	d100      	bne.n	800d242 <_printf_float+0x2ee>
 800d240:	e6e4      	b.n	800d00c <_printf_float+0xb8>
 800d242:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d244:	3301      	adds	r3, #1
 800d246:	e7ea      	b.n	800d21e <_printf_float+0x2ca>
 800d248:	7fefffff 	.word	0x7fefffff
 800d24c:	08010740 	.word	0x08010740
 800d250:	08010744 	.word	0x08010744
 800d254:	08010748 	.word	0x08010748
 800d258:	0801074c 	.word	0x0801074c
 800d25c:	08010750 	.word	0x08010750
 800d260:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800d262:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 800d264:	930c      	str	r3, [sp, #48]	@ 0x30
 800d266:	429e      	cmp	r6, r3
 800d268:	dd00      	ble.n	800d26c <_printf_float+0x318>
 800d26a:	001e      	movs	r6, r3
 800d26c:	2e00      	cmp	r6, #0
 800d26e:	dc31      	bgt.n	800d2d4 <_printf_float+0x380>
 800d270:	43f3      	mvns	r3, r6
 800d272:	2400      	movs	r4, #0
 800d274:	17db      	asrs	r3, r3, #31
 800d276:	4033      	ands	r3, r6
 800d278:	930e      	str	r3, [sp, #56]	@ 0x38
 800d27a:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 800d27c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d27e:	1af3      	subs	r3, r6, r3
 800d280:	42a3      	cmp	r3, r4
 800d282:	dc30      	bgt.n	800d2e6 <_printf_float+0x392>
 800d284:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d286:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800d288:	429a      	cmp	r2, r3
 800d28a:	dc38      	bgt.n	800d2fe <_printf_float+0x3aa>
 800d28c:	682b      	ldr	r3, [r5, #0]
 800d28e:	07db      	lsls	r3, r3, #31
 800d290:	d435      	bmi.n	800d2fe <_printf_float+0x3aa>
 800d292:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 800d294:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d296:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800d298:	1b9b      	subs	r3, r3, r6
 800d29a:	1b14      	subs	r4, r2, r4
 800d29c:	429c      	cmp	r4, r3
 800d29e:	dd00      	ble.n	800d2a2 <_printf_float+0x34e>
 800d2a0:	001c      	movs	r4, r3
 800d2a2:	2c00      	cmp	r4, #0
 800d2a4:	dc34      	bgt.n	800d310 <_printf_float+0x3bc>
 800d2a6:	43e3      	mvns	r3, r4
 800d2a8:	2600      	movs	r6, #0
 800d2aa:	17db      	asrs	r3, r3, #31
 800d2ac:	401c      	ands	r4, r3
 800d2ae:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d2b0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800d2b2:	1ad3      	subs	r3, r2, r3
 800d2b4:	1b1b      	subs	r3, r3, r4
 800d2b6:	42b3      	cmp	r3, r6
 800d2b8:	dc00      	bgt.n	800d2bc <_printf_float+0x368>
 800d2ba:	e77c      	b.n	800d1b6 <_printf_float+0x262>
 800d2bc:	002a      	movs	r2, r5
 800d2be:	2301      	movs	r3, #1
 800d2c0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d2c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d2c4:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800d2c6:	321a      	adds	r2, #26
 800d2c8:	47b8      	blx	r7
 800d2ca:	3001      	adds	r0, #1
 800d2cc:	d100      	bne.n	800d2d0 <_printf_float+0x37c>
 800d2ce:	e69d      	b.n	800d00c <_printf_float+0xb8>
 800d2d0:	3601      	adds	r6, #1
 800d2d2:	e7ec      	b.n	800d2ae <_printf_float+0x35a>
 800d2d4:	0033      	movs	r3, r6
 800d2d6:	003a      	movs	r2, r7
 800d2d8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d2da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d2dc:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800d2de:	47a0      	blx	r4
 800d2e0:	3001      	adds	r0, #1
 800d2e2:	d1c5      	bne.n	800d270 <_printf_float+0x31c>
 800d2e4:	e692      	b.n	800d00c <_printf_float+0xb8>
 800d2e6:	002a      	movs	r2, r5
 800d2e8:	2301      	movs	r3, #1
 800d2ea:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d2ec:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d2ee:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800d2f0:	321a      	adds	r2, #26
 800d2f2:	47b0      	blx	r6
 800d2f4:	3001      	adds	r0, #1
 800d2f6:	d100      	bne.n	800d2fa <_printf_float+0x3a6>
 800d2f8:	e688      	b.n	800d00c <_printf_float+0xb8>
 800d2fa:	3401      	adds	r4, #1
 800d2fc:	e7bd      	b.n	800d27a <_printf_float+0x326>
 800d2fe:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d300:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d302:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d304:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d306:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800d308:	47a0      	blx	r4
 800d30a:	3001      	adds	r0, #1
 800d30c:	d1c1      	bne.n	800d292 <_printf_float+0x33e>
 800d30e:	e67d      	b.n	800d00c <_printf_float+0xb8>
 800d310:	19ba      	adds	r2, r7, r6
 800d312:	0023      	movs	r3, r4
 800d314:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d316:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d318:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800d31a:	47b0      	blx	r6
 800d31c:	3001      	adds	r0, #1
 800d31e:	d1c2      	bne.n	800d2a6 <_printf_float+0x352>
 800d320:	e674      	b.n	800d00c <_printf_float+0xb8>
 800d322:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800d324:	930c      	str	r3, [sp, #48]	@ 0x30
 800d326:	2b01      	cmp	r3, #1
 800d328:	dc02      	bgt.n	800d330 <_printf_float+0x3dc>
 800d32a:	2301      	movs	r3, #1
 800d32c:	421a      	tst	r2, r3
 800d32e:	d039      	beq.n	800d3a4 <_printf_float+0x450>
 800d330:	2301      	movs	r3, #1
 800d332:	003a      	movs	r2, r7
 800d334:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d336:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d338:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800d33a:	47b0      	blx	r6
 800d33c:	3001      	adds	r0, #1
 800d33e:	d100      	bne.n	800d342 <_printf_float+0x3ee>
 800d340:	e664      	b.n	800d00c <_printf_float+0xb8>
 800d342:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d344:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d346:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d348:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d34a:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800d34c:	47b0      	blx	r6
 800d34e:	3001      	adds	r0, #1
 800d350:	d100      	bne.n	800d354 <_printf_float+0x400>
 800d352:	e65b      	b.n	800d00c <_printf_float+0xb8>
 800d354:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800d356:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800d358:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d35a:	2200      	movs	r2, #0
 800d35c:	3b01      	subs	r3, #1
 800d35e:	930c      	str	r3, [sp, #48]	@ 0x30
 800d360:	2300      	movs	r3, #0
 800d362:	f7f3 f873 	bl	800044c <__aeabi_dcmpeq>
 800d366:	2800      	cmp	r0, #0
 800d368:	d11a      	bne.n	800d3a0 <_printf_float+0x44c>
 800d36a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d36c:	1c7a      	adds	r2, r7, #1
 800d36e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d370:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d372:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800d374:	47b0      	blx	r6
 800d376:	3001      	adds	r0, #1
 800d378:	d10e      	bne.n	800d398 <_printf_float+0x444>
 800d37a:	e647      	b.n	800d00c <_printf_float+0xb8>
 800d37c:	002a      	movs	r2, r5
 800d37e:	2301      	movs	r3, #1
 800d380:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d382:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d384:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800d386:	321a      	adds	r2, #26
 800d388:	47b8      	blx	r7
 800d38a:	3001      	adds	r0, #1
 800d38c:	d100      	bne.n	800d390 <_printf_float+0x43c>
 800d38e:	e63d      	b.n	800d00c <_printf_float+0xb8>
 800d390:	3601      	adds	r6, #1
 800d392:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d394:	429e      	cmp	r6, r3
 800d396:	dbf1      	blt.n	800d37c <_printf_float+0x428>
 800d398:	002a      	movs	r2, r5
 800d39a:	0023      	movs	r3, r4
 800d39c:	3250      	adds	r2, #80	@ 0x50
 800d39e:	e6da      	b.n	800d156 <_printf_float+0x202>
 800d3a0:	2600      	movs	r6, #0
 800d3a2:	e7f6      	b.n	800d392 <_printf_float+0x43e>
 800d3a4:	003a      	movs	r2, r7
 800d3a6:	e7e2      	b.n	800d36e <_printf_float+0x41a>
 800d3a8:	002a      	movs	r2, r5
 800d3aa:	2301      	movs	r3, #1
 800d3ac:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d3ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d3b0:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800d3b2:	3219      	adds	r2, #25
 800d3b4:	47b0      	blx	r6
 800d3b6:	3001      	adds	r0, #1
 800d3b8:	d100      	bne.n	800d3bc <_printf_float+0x468>
 800d3ba:	e627      	b.n	800d00c <_printf_float+0xb8>
 800d3bc:	3401      	adds	r4, #1
 800d3be:	68eb      	ldr	r3, [r5, #12]
 800d3c0:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800d3c2:	1a9b      	subs	r3, r3, r2
 800d3c4:	42a3      	cmp	r3, r4
 800d3c6:	dcef      	bgt.n	800d3a8 <_printf_float+0x454>
 800d3c8:	e6f9      	b.n	800d1be <_printf_float+0x26a>
 800d3ca:	2400      	movs	r4, #0
 800d3cc:	e7f7      	b.n	800d3be <_printf_float+0x46a>
 800d3ce:	46c0      	nop			@ (mov r8, r8)

0800d3d0 <_printf_common>:
 800d3d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d3d2:	0016      	movs	r6, r2
 800d3d4:	9301      	str	r3, [sp, #4]
 800d3d6:	688a      	ldr	r2, [r1, #8]
 800d3d8:	690b      	ldr	r3, [r1, #16]
 800d3da:	000c      	movs	r4, r1
 800d3dc:	9000      	str	r0, [sp, #0]
 800d3de:	4293      	cmp	r3, r2
 800d3e0:	da00      	bge.n	800d3e4 <_printf_common+0x14>
 800d3e2:	0013      	movs	r3, r2
 800d3e4:	0022      	movs	r2, r4
 800d3e6:	6033      	str	r3, [r6, #0]
 800d3e8:	3243      	adds	r2, #67	@ 0x43
 800d3ea:	7812      	ldrb	r2, [r2, #0]
 800d3ec:	2a00      	cmp	r2, #0
 800d3ee:	d001      	beq.n	800d3f4 <_printf_common+0x24>
 800d3f0:	3301      	adds	r3, #1
 800d3f2:	6033      	str	r3, [r6, #0]
 800d3f4:	6823      	ldr	r3, [r4, #0]
 800d3f6:	069b      	lsls	r3, r3, #26
 800d3f8:	d502      	bpl.n	800d400 <_printf_common+0x30>
 800d3fa:	6833      	ldr	r3, [r6, #0]
 800d3fc:	3302      	adds	r3, #2
 800d3fe:	6033      	str	r3, [r6, #0]
 800d400:	6822      	ldr	r2, [r4, #0]
 800d402:	2306      	movs	r3, #6
 800d404:	0015      	movs	r5, r2
 800d406:	401d      	ands	r5, r3
 800d408:	421a      	tst	r2, r3
 800d40a:	d027      	beq.n	800d45c <_printf_common+0x8c>
 800d40c:	0023      	movs	r3, r4
 800d40e:	3343      	adds	r3, #67	@ 0x43
 800d410:	781b      	ldrb	r3, [r3, #0]
 800d412:	1e5a      	subs	r2, r3, #1
 800d414:	4193      	sbcs	r3, r2
 800d416:	6822      	ldr	r2, [r4, #0]
 800d418:	0692      	lsls	r2, r2, #26
 800d41a:	d430      	bmi.n	800d47e <_printf_common+0xae>
 800d41c:	0022      	movs	r2, r4
 800d41e:	9901      	ldr	r1, [sp, #4]
 800d420:	9800      	ldr	r0, [sp, #0]
 800d422:	9d08      	ldr	r5, [sp, #32]
 800d424:	3243      	adds	r2, #67	@ 0x43
 800d426:	47a8      	blx	r5
 800d428:	3001      	adds	r0, #1
 800d42a:	d025      	beq.n	800d478 <_printf_common+0xa8>
 800d42c:	2206      	movs	r2, #6
 800d42e:	6823      	ldr	r3, [r4, #0]
 800d430:	2500      	movs	r5, #0
 800d432:	4013      	ands	r3, r2
 800d434:	2b04      	cmp	r3, #4
 800d436:	d105      	bne.n	800d444 <_printf_common+0x74>
 800d438:	6833      	ldr	r3, [r6, #0]
 800d43a:	68e5      	ldr	r5, [r4, #12]
 800d43c:	1aed      	subs	r5, r5, r3
 800d43e:	43eb      	mvns	r3, r5
 800d440:	17db      	asrs	r3, r3, #31
 800d442:	401d      	ands	r5, r3
 800d444:	68a3      	ldr	r3, [r4, #8]
 800d446:	6922      	ldr	r2, [r4, #16]
 800d448:	4293      	cmp	r3, r2
 800d44a:	dd01      	ble.n	800d450 <_printf_common+0x80>
 800d44c:	1a9b      	subs	r3, r3, r2
 800d44e:	18ed      	adds	r5, r5, r3
 800d450:	2600      	movs	r6, #0
 800d452:	42b5      	cmp	r5, r6
 800d454:	d120      	bne.n	800d498 <_printf_common+0xc8>
 800d456:	2000      	movs	r0, #0
 800d458:	e010      	b.n	800d47c <_printf_common+0xac>
 800d45a:	3501      	adds	r5, #1
 800d45c:	68e3      	ldr	r3, [r4, #12]
 800d45e:	6832      	ldr	r2, [r6, #0]
 800d460:	1a9b      	subs	r3, r3, r2
 800d462:	42ab      	cmp	r3, r5
 800d464:	ddd2      	ble.n	800d40c <_printf_common+0x3c>
 800d466:	0022      	movs	r2, r4
 800d468:	2301      	movs	r3, #1
 800d46a:	9901      	ldr	r1, [sp, #4]
 800d46c:	9800      	ldr	r0, [sp, #0]
 800d46e:	9f08      	ldr	r7, [sp, #32]
 800d470:	3219      	adds	r2, #25
 800d472:	47b8      	blx	r7
 800d474:	3001      	adds	r0, #1
 800d476:	d1f0      	bne.n	800d45a <_printf_common+0x8a>
 800d478:	2001      	movs	r0, #1
 800d47a:	4240      	negs	r0, r0
 800d47c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d47e:	2030      	movs	r0, #48	@ 0x30
 800d480:	18e1      	adds	r1, r4, r3
 800d482:	3143      	adds	r1, #67	@ 0x43
 800d484:	7008      	strb	r0, [r1, #0]
 800d486:	0021      	movs	r1, r4
 800d488:	1c5a      	adds	r2, r3, #1
 800d48a:	3145      	adds	r1, #69	@ 0x45
 800d48c:	7809      	ldrb	r1, [r1, #0]
 800d48e:	18a2      	adds	r2, r4, r2
 800d490:	3243      	adds	r2, #67	@ 0x43
 800d492:	3302      	adds	r3, #2
 800d494:	7011      	strb	r1, [r2, #0]
 800d496:	e7c1      	b.n	800d41c <_printf_common+0x4c>
 800d498:	0022      	movs	r2, r4
 800d49a:	2301      	movs	r3, #1
 800d49c:	9901      	ldr	r1, [sp, #4]
 800d49e:	9800      	ldr	r0, [sp, #0]
 800d4a0:	9f08      	ldr	r7, [sp, #32]
 800d4a2:	321a      	adds	r2, #26
 800d4a4:	47b8      	blx	r7
 800d4a6:	3001      	adds	r0, #1
 800d4a8:	d0e6      	beq.n	800d478 <_printf_common+0xa8>
 800d4aa:	3601      	adds	r6, #1
 800d4ac:	e7d1      	b.n	800d452 <_printf_common+0x82>
	...

0800d4b0 <_printf_i>:
 800d4b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d4b2:	b08b      	sub	sp, #44	@ 0x2c
 800d4b4:	9206      	str	r2, [sp, #24]
 800d4b6:	000a      	movs	r2, r1
 800d4b8:	3243      	adds	r2, #67	@ 0x43
 800d4ba:	9307      	str	r3, [sp, #28]
 800d4bc:	9005      	str	r0, [sp, #20]
 800d4be:	9203      	str	r2, [sp, #12]
 800d4c0:	7e0a      	ldrb	r2, [r1, #24]
 800d4c2:	000c      	movs	r4, r1
 800d4c4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d4c6:	2a78      	cmp	r2, #120	@ 0x78
 800d4c8:	d809      	bhi.n	800d4de <_printf_i+0x2e>
 800d4ca:	2a62      	cmp	r2, #98	@ 0x62
 800d4cc:	d80b      	bhi.n	800d4e6 <_printf_i+0x36>
 800d4ce:	2a00      	cmp	r2, #0
 800d4d0:	d100      	bne.n	800d4d4 <_printf_i+0x24>
 800d4d2:	e0bc      	b.n	800d64e <_printf_i+0x19e>
 800d4d4:	497b      	ldr	r1, [pc, #492]	@ (800d6c4 <_printf_i+0x214>)
 800d4d6:	9104      	str	r1, [sp, #16]
 800d4d8:	2a58      	cmp	r2, #88	@ 0x58
 800d4da:	d100      	bne.n	800d4de <_printf_i+0x2e>
 800d4dc:	e090      	b.n	800d600 <_printf_i+0x150>
 800d4de:	0025      	movs	r5, r4
 800d4e0:	3542      	adds	r5, #66	@ 0x42
 800d4e2:	702a      	strb	r2, [r5, #0]
 800d4e4:	e022      	b.n	800d52c <_printf_i+0x7c>
 800d4e6:	0010      	movs	r0, r2
 800d4e8:	3863      	subs	r0, #99	@ 0x63
 800d4ea:	2815      	cmp	r0, #21
 800d4ec:	d8f7      	bhi.n	800d4de <_printf_i+0x2e>
 800d4ee:	f7f2 fe1d 	bl	800012c <__gnu_thumb1_case_shi>
 800d4f2:	0016      	.short	0x0016
 800d4f4:	fff6001f 	.word	0xfff6001f
 800d4f8:	fff6fff6 	.word	0xfff6fff6
 800d4fc:	001ffff6 	.word	0x001ffff6
 800d500:	fff6fff6 	.word	0xfff6fff6
 800d504:	fff6fff6 	.word	0xfff6fff6
 800d508:	003600a1 	.word	0x003600a1
 800d50c:	fff60080 	.word	0xfff60080
 800d510:	00b2fff6 	.word	0x00b2fff6
 800d514:	0036fff6 	.word	0x0036fff6
 800d518:	fff6fff6 	.word	0xfff6fff6
 800d51c:	0084      	.short	0x0084
 800d51e:	0025      	movs	r5, r4
 800d520:	681a      	ldr	r2, [r3, #0]
 800d522:	3542      	adds	r5, #66	@ 0x42
 800d524:	1d11      	adds	r1, r2, #4
 800d526:	6019      	str	r1, [r3, #0]
 800d528:	6813      	ldr	r3, [r2, #0]
 800d52a:	702b      	strb	r3, [r5, #0]
 800d52c:	2301      	movs	r3, #1
 800d52e:	e0a0      	b.n	800d672 <_printf_i+0x1c2>
 800d530:	6818      	ldr	r0, [r3, #0]
 800d532:	6809      	ldr	r1, [r1, #0]
 800d534:	1d02      	adds	r2, r0, #4
 800d536:	060d      	lsls	r5, r1, #24
 800d538:	d50b      	bpl.n	800d552 <_printf_i+0xa2>
 800d53a:	6806      	ldr	r6, [r0, #0]
 800d53c:	601a      	str	r2, [r3, #0]
 800d53e:	2e00      	cmp	r6, #0
 800d540:	da03      	bge.n	800d54a <_printf_i+0x9a>
 800d542:	232d      	movs	r3, #45	@ 0x2d
 800d544:	9a03      	ldr	r2, [sp, #12]
 800d546:	4276      	negs	r6, r6
 800d548:	7013      	strb	r3, [r2, #0]
 800d54a:	4b5e      	ldr	r3, [pc, #376]	@ (800d6c4 <_printf_i+0x214>)
 800d54c:	270a      	movs	r7, #10
 800d54e:	9304      	str	r3, [sp, #16]
 800d550:	e018      	b.n	800d584 <_printf_i+0xd4>
 800d552:	6806      	ldr	r6, [r0, #0]
 800d554:	601a      	str	r2, [r3, #0]
 800d556:	0649      	lsls	r1, r1, #25
 800d558:	d5f1      	bpl.n	800d53e <_printf_i+0x8e>
 800d55a:	b236      	sxth	r6, r6
 800d55c:	e7ef      	b.n	800d53e <_printf_i+0x8e>
 800d55e:	6808      	ldr	r0, [r1, #0]
 800d560:	6819      	ldr	r1, [r3, #0]
 800d562:	c940      	ldmia	r1!, {r6}
 800d564:	0605      	lsls	r5, r0, #24
 800d566:	d402      	bmi.n	800d56e <_printf_i+0xbe>
 800d568:	0640      	lsls	r0, r0, #25
 800d56a:	d500      	bpl.n	800d56e <_printf_i+0xbe>
 800d56c:	b2b6      	uxth	r6, r6
 800d56e:	6019      	str	r1, [r3, #0]
 800d570:	4b54      	ldr	r3, [pc, #336]	@ (800d6c4 <_printf_i+0x214>)
 800d572:	270a      	movs	r7, #10
 800d574:	9304      	str	r3, [sp, #16]
 800d576:	2a6f      	cmp	r2, #111	@ 0x6f
 800d578:	d100      	bne.n	800d57c <_printf_i+0xcc>
 800d57a:	3f02      	subs	r7, #2
 800d57c:	0023      	movs	r3, r4
 800d57e:	2200      	movs	r2, #0
 800d580:	3343      	adds	r3, #67	@ 0x43
 800d582:	701a      	strb	r2, [r3, #0]
 800d584:	6863      	ldr	r3, [r4, #4]
 800d586:	60a3      	str	r3, [r4, #8]
 800d588:	2b00      	cmp	r3, #0
 800d58a:	db03      	blt.n	800d594 <_printf_i+0xe4>
 800d58c:	2104      	movs	r1, #4
 800d58e:	6822      	ldr	r2, [r4, #0]
 800d590:	438a      	bics	r2, r1
 800d592:	6022      	str	r2, [r4, #0]
 800d594:	2e00      	cmp	r6, #0
 800d596:	d102      	bne.n	800d59e <_printf_i+0xee>
 800d598:	9d03      	ldr	r5, [sp, #12]
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d00c      	beq.n	800d5b8 <_printf_i+0x108>
 800d59e:	9d03      	ldr	r5, [sp, #12]
 800d5a0:	0030      	movs	r0, r6
 800d5a2:	0039      	movs	r1, r7
 800d5a4:	f7f2 fe52 	bl	800024c <__aeabi_uidivmod>
 800d5a8:	9b04      	ldr	r3, [sp, #16]
 800d5aa:	3d01      	subs	r5, #1
 800d5ac:	5c5b      	ldrb	r3, [r3, r1]
 800d5ae:	702b      	strb	r3, [r5, #0]
 800d5b0:	0033      	movs	r3, r6
 800d5b2:	0006      	movs	r6, r0
 800d5b4:	429f      	cmp	r7, r3
 800d5b6:	d9f3      	bls.n	800d5a0 <_printf_i+0xf0>
 800d5b8:	2f08      	cmp	r7, #8
 800d5ba:	d109      	bne.n	800d5d0 <_printf_i+0x120>
 800d5bc:	6823      	ldr	r3, [r4, #0]
 800d5be:	07db      	lsls	r3, r3, #31
 800d5c0:	d506      	bpl.n	800d5d0 <_printf_i+0x120>
 800d5c2:	6862      	ldr	r2, [r4, #4]
 800d5c4:	6923      	ldr	r3, [r4, #16]
 800d5c6:	429a      	cmp	r2, r3
 800d5c8:	dc02      	bgt.n	800d5d0 <_printf_i+0x120>
 800d5ca:	2330      	movs	r3, #48	@ 0x30
 800d5cc:	3d01      	subs	r5, #1
 800d5ce:	702b      	strb	r3, [r5, #0]
 800d5d0:	9b03      	ldr	r3, [sp, #12]
 800d5d2:	1b5b      	subs	r3, r3, r5
 800d5d4:	6123      	str	r3, [r4, #16]
 800d5d6:	9b07      	ldr	r3, [sp, #28]
 800d5d8:	0021      	movs	r1, r4
 800d5da:	9300      	str	r3, [sp, #0]
 800d5dc:	9805      	ldr	r0, [sp, #20]
 800d5de:	9b06      	ldr	r3, [sp, #24]
 800d5e0:	aa09      	add	r2, sp, #36	@ 0x24
 800d5e2:	f7ff fef5 	bl	800d3d0 <_printf_common>
 800d5e6:	3001      	adds	r0, #1
 800d5e8:	d148      	bne.n	800d67c <_printf_i+0x1cc>
 800d5ea:	2001      	movs	r0, #1
 800d5ec:	4240      	negs	r0, r0
 800d5ee:	b00b      	add	sp, #44	@ 0x2c
 800d5f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d5f2:	2220      	movs	r2, #32
 800d5f4:	6809      	ldr	r1, [r1, #0]
 800d5f6:	430a      	orrs	r2, r1
 800d5f8:	6022      	str	r2, [r4, #0]
 800d5fa:	2278      	movs	r2, #120	@ 0x78
 800d5fc:	4932      	ldr	r1, [pc, #200]	@ (800d6c8 <_printf_i+0x218>)
 800d5fe:	9104      	str	r1, [sp, #16]
 800d600:	0021      	movs	r1, r4
 800d602:	3145      	adds	r1, #69	@ 0x45
 800d604:	700a      	strb	r2, [r1, #0]
 800d606:	6819      	ldr	r1, [r3, #0]
 800d608:	6822      	ldr	r2, [r4, #0]
 800d60a:	c940      	ldmia	r1!, {r6}
 800d60c:	0610      	lsls	r0, r2, #24
 800d60e:	d402      	bmi.n	800d616 <_printf_i+0x166>
 800d610:	0650      	lsls	r0, r2, #25
 800d612:	d500      	bpl.n	800d616 <_printf_i+0x166>
 800d614:	b2b6      	uxth	r6, r6
 800d616:	6019      	str	r1, [r3, #0]
 800d618:	07d3      	lsls	r3, r2, #31
 800d61a:	d502      	bpl.n	800d622 <_printf_i+0x172>
 800d61c:	2320      	movs	r3, #32
 800d61e:	4313      	orrs	r3, r2
 800d620:	6023      	str	r3, [r4, #0]
 800d622:	2e00      	cmp	r6, #0
 800d624:	d001      	beq.n	800d62a <_printf_i+0x17a>
 800d626:	2710      	movs	r7, #16
 800d628:	e7a8      	b.n	800d57c <_printf_i+0xcc>
 800d62a:	2220      	movs	r2, #32
 800d62c:	6823      	ldr	r3, [r4, #0]
 800d62e:	4393      	bics	r3, r2
 800d630:	6023      	str	r3, [r4, #0]
 800d632:	e7f8      	b.n	800d626 <_printf_i+0x176>
 800d634:	681a      	ldr	r2, [r3, #0]
 800d636:	680d      	ldr	r5, [r1, #0]
 800d638:	1d10      	adds	r0, r2, #4
 800d63a:	6949      	ldr	r1, [r1, #20]
 800d63c:	6018      	str	r0, [r3, #0]
 800d63e:	6813      	ldr	r3, [r2, #0]
 800d640:	062e      	lsls	r6, r5, #24
 800d642:	d501      	bpl.n	800d648 <_printf_i+0x198>
 800d644:	6019      	str	r1, [r3, #0]
 800d646:	e002      	b.n	800d64e <_printf_i+0x19e>
 800d648:	066d      	lsls	r5, r5, #25
 800d64a:	d5fb      	bpl.n	800d644 <_printf_i+0x194>
 800d64c:	8019      	strh	r1, [r3, #0]
 800d64e:	2300      	movs	r3, #0
 800d650:	9d03      	ldr	r5, [sp, #12]
 800d652:	6123      	str	r3, [r4, #16]
 800d654:	e7bf      	b.n	800d5d6 <_printf_i+0x126>
 800d656:	681a      	ldr	r2, [r3, #0]
 800d658:	1d11      	adds	r1, r2, #4
 800d65a:	6019      	str	r1, [r3, #0]
 800d65c:	6815      	ldr	r5, [r2, #0]
 800d65e:	2100      	movs	r1, #0
 800d660:	0028      	movs	r0, r5
 800d662:	6862      	ldr	r2, [r4, #4]
 800d664:	f000 fa31 	bl	800daca <memchr>
 800d668:	2800      	cmp	r0, #0
 800d66a:	d001      	beq.n	800d670 <_printf_i+0x1c0>
 800d66c:	1b40      	subs	r0, r0, r5
 800d66e:	6060      	str	r0, [r4, #4]
 800d670:	6863      	ldr	r3, [r4, #4]
 800d672:	6123      	str	r3, [r4, #16]
 800d674:	2300      	movs	r3, #0
 800d676:	9a03      	ldr	r2, [sp, #12]
 800d678:	7013      	strb	r3, [r2, #0]
 800d67a:	e7ac      	b.n	800d5d6 <_printf_i+0x126>
 800d67c:	002a      	movs	r2, r5
 800d67e:	6923      	ldr	r3, [r4, #16]
 800d680:	9906      	ldr	r1, [sp, #24]
 800d682:	9805      	ldr	r0, [sp, #20]
 800d684:	9d07      	ldr	r5, [sp, #28]
 800d686:	47a8      	blx	r5
 800d688:	3001      	adds	r0, #1
 800d68a:	d0ae      	beq.n	800d5ea <_printf_i+0x13a>
 800d68c:	6823      	ldr	r3, [r4, #0]
 800d68e:	079b      	lsls	r3, r3, #30
 800d690:	d415      	bmi.n	800d6be <_printf_i+0x20e>
 800d692:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d694:	68e0      	ldr	r0, [r4, #12]
 800d696:	4298      	cmp	r0, r3
 800d698:	daa9      	bge.n	800d5ee <_printf_i+0x13e>
 800d69a:	0018      	movs	r0, r3
 800d69c:	e7a7      	b.n	800d5ee <_printf_i+0x13e>
 800d69e:	0022      	movs	r2, r4
 800d6a0:	2301      	movs	r3, #1
 800d6a2:	9906      	ldr	r1, [sp, #24]
 800d6a4:	9805      	ldr	r0, [sp, #20]
 800d6a6:	9e07      	ldr	r6, [sp, #28]
 800d6a8:	3219      	adds	r2, #25
 800d6aa:	47b0      	blx	r6
 800d6ac:	3001      	adds	r0, #1
 800d6ae:	d09c      	beq.n	800d5ea <_printf_i+0x13a>
 800d6b0:	3501      	adds	r5, #1
 800d6b2:	68e3      	ldr	r3, [r4, #12]
 800d6b4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d6b6:	1a9b      	subs	r3, r3, r2
 800d6b8:	42ab      	cmp	r3, r5
 800d6ba:	dcf0      	bgt.n	800d69e <_printf_i+0x1ee>
 800d6bc:	e7e9      	b.n	800d692 <_printf_i+0x1e2>
 800d6be:	2500      	movs	r5, #0
 800d6c0:	e7f7      	b.n	800d6b2 <_printf_i+0x202>
 800d6c2:	46c0      	nop			@ (mov r8, r8)
 800d6c4:	08010752 	.word	0x08010752
 800d6c8:	08010763 	.word	0x08010763

0800d6cc <std>:
 800d6cc:	2300      	movs	r3, #0
 800d6ce:	b510      	push	{r4, lr}
 800d6d0:	0004      	movs	r4, r0
 800d6d2:	6003      	str	r3, [r0, #0]
 800d6d4:	6043      	str	r3, [r0, #4]
 800d6d6:	6083      	str	r3, [r0, #8]
 800d6d8:	8181      	strh	r1, [r0, #12]
 800d6da:	6643      	str	r3, [r0, #100]	@ 0x64
 800d6dc:	81c2      	strh	r2, [r0, #14]
 800d6de:	6103      	str	r3, [r0, #16]
 800d6e0:	6143      	str	r3, [r0, #20]
 800d6e2:	6183      	str	r3, [r0, #24]
 800d6e4:	0019      	movs	r1, r3
 800d6e6:	2208      	movs	r2, #8
 800d6e8:	305c      	adds	r0, #92	@ 0x5c
 800d6ea:	f000 f967 	bl	800d9bc <memset>
 800d6ee:	4b0b      	ldr	r3, [pc, #44]	@ (800d71c <std+0x50>)
 800d6f0:	6224      	str	r4, [r4, #32]
 800d6f2:	6263      	str	r3, [r4, #36]	@ 0x24
 800d6f4:	4b0a      	ldr	r3, [pc, #40]	@ (800d720 <std+0x54>)
 800d6f6:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d6f8:	4b0a      	ldr	r3, [pc, #40]	@ (800d724 <std+0x58>)
 800d6fa:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d6fc:	4b0a      	ldr	r3, [pc, #40]	@ (800d728 <std+0x5c>)
 800d6fe:	6323      	str	r3, [r4, #48]	@ 0x30
 800d700:	4b0a      	ldr	r3, [pc, #40]	@ (800d72c <std+0x60>)
 800d702:	429c      	cmp	r4, r3
 800d704:	d005      	beq.n	800d712 <std+0x46>
 800d706:	4b0a      	ldr	r3, [pc, #40]	@ (800d730 <std+0x64>)
 800d708:	429c      	cmp	r4, r3
 800d70a:	d002      	beq.n	800d712 <std+0x46>
 800d70c:	4b09      	ldr	r3, [pc, #36]	@ (800d734 <std+0x68>)
 800d70e:	429c      	cmp	r4, r3
 800d710:	d103      	bne.n	800d71a <std+0x4e>
 800d712:	0020      	movs	r0, r4
 800d714:	3058      	adds	r0, #88	@ 0x58
 800d716:	f000 f9d5 	bl	800dac4 <__retarget_lock_init_recursive>
 800d71a:	bd10      	pop	{r4, pc}
 800d71c:	0800d8b5 	.word	0x0800d8b5
 800d720:	0800d8dd 	.word	0x0800d8dd
 800d724:	0800d915 	.word	0x0800d915
 800d728:	0800d941 	.word	0x0800d941
 800d72c:	20001acc 	.word	0x20001acc
 800d730:	20001b34 	.word	0x20001b34
 800d734:	20001b9c 	.word	0x20001b9c

0800d738 <stdio_exit_handler>:
 800d738:	b510      	push	{r4, lr}
 800d73a:	4a03      	ldr	r2, [pc, #12]	@ (800d748 <stdio_exit_handler+0x10>)
 800d73c:	4903      	ldr	r1, [pc, #12]	@ (800d74c <stdio_exit_handler+0x14>)
 800d73e:	4804      	ldr	r0, [pc, #16]	@ (800d750 <stdio_exit_handler+0x18>)
 800d740:	f000 f86c 	bl	800d81c <_fwalk_sglue>
 800d744:	bd10      	pop	{r4, pc}
 800d746:	46c0      	nop			@ (mov r8, r8)
 800d748:	20000054 	.word	0x20000054
 800d74c:	0800f79d 	.word	0x0800f79d
 800d750:	20000064 	.word	0x20000064

0800d754 <cleanup_stdio>:
 800d754:	6841      	ldr	r1, [r0, #4]
 800d756:	4b0b      	ldr	r3, [pc, #44]	@ (800d784 <cleanup_stdio+0x30>)
 800d758:	b510      	push	{r4, lr}
 800d75a:	0004      	movs	r4, r0
 800d75c:	4299      	cmp	r1, r3
 800d75e:	d001      	beq.n	800d764 <cleanup_stdio+0x10>
 800d760:	f002 f81c 	bl	800f79c <_fflush_r>
 800d764:	68a1      	ldr	r1, [r4, #8]
 800d766:	4b08      	ldr	r3, [pc, #32]	@ (800d788 <cleanup_stdio+0x34>)
 800d768:	4299      	cmp	r1, r3
 800d76a:	d002      	beq.n	800d772 <cleanup_stdio+0x1e>
 800d76c:	0020      	movs	r0, r4
 800d76e:	f002 f815 	bl	800f79c <_fflush_r>
 800d772:	68e1      	ldr	r1, [r4, #12]
 800d774:	4b05      	ldr	r3, [pc, #20]	@ (800d78c <cleanup_stdio+0x38>)
 800d776:	4299      	cmp	r1, r3
 800d778:	d002      	beq.n	800d780 <cleanup_stdio+0x2c>
 800d77a:	0020      	movs	r0, r4
 800d77c:	f002 f80e 	bl	800f79c <_fflush_r>
 800d780:	bd10      	pop	{r4, pc}
 800d782:	46c0      	nop			@ (mov r8, r8)
 800d784:	20001acc 	.word	0x20001acc
 800d788:	20001b34 	.word	0x20001b34
 800d78c:	20001b9c 	.word	0x20001b9c

0800d790 <global_stdio_init.part.0>:
 800d790:	b510      	push	{r4, lr}
 800d792:	4b09      	ldr	r3, [pc, #36]	@ (800d7b8 <global_stdio_init.part.0+0x28>)
 800d794:	4a09      	ldr	r2, [pc, #36]	@ (800d7bc <global_stdio_init.part.0+0x2c>)
 800d796:	2104      	movs	r1, #4
 800d798:	601a      	str	r2, [r3, #0]
 800d79a:	4809      	ldr	r0, [pc, #36]	@ (800d7c0 <global_stdio_init.part.0+0x30>)
 800d79c:	2200      	movs	r2, #0
 800d79e:	f7ff ff95 	bl	800d6cc <std>
 800d7a2:	2201      	movs	r2, #1
 800d7a4:	2109      	movs	r1, #9
 800d7a6:	4807      	ldr	r0, [pc, #28]	@ (800d7c4 <global_stdio_init.part.0+0x34>)
 800d7a8:	f7ff ff90 	bl	800d6cc <std>
 800d7ac:	2202      	movs	r2, #2
 800d7ae:	2112      	movs	r1, #18
 800d7b0:	4805      	ldr	r0, [pc, #20]	@ (800d7c8 <global_stdio_init.part.0+0x38>)
 800d7b2:	f7ff ff8b 	bl	800d6cc <std>
 800d7b6:	bd10      	pop	{r4, pc}
 800d7b8:	20001c04 	.word	0x20001c04
 800d7bc:	0800d739 	.word	0x0800d739
 800d7c0:	20001acc 	.word	0x20001acc
 800d7c4:	20001b34 	.word	0x20001b34
 800d7c8:	20001b9c 	.word	0x20001b9c

0800d7cc <__sfp_lock_acquire>:
 800d7cc:	b510      	push	{r4, lr}
 800d7ce:	4802      	ldr	r0, [pc, #8]	@ (800d7d8 <__sfp_lock_acquire+0xc>)
 800d7d0:	f000 f979 	bl	800dac6 <__retarget_lock_acquire_recursive>
 800d7d4:	bd10      	pop	{r4, pc}
 800d7d6:	46c0      	nop			@ (mov r8, r8)
 800d7d8:	20001c0d 	.word	0x20001c0d

0800d7dc <__sfp_lock_release>:
 800d7dc:	b510      	push	{r4, lr}
 800d7de:	4802      	ldr	r0, [pc, #8]	@ (800d7e8 <__sfp_lock_release+0xc>)
 800d7e0:	f000 f972 	bl	800dac8 <__retarget_lock_release_recursive>
 800d7e4:	bd10      	pop	{r4, pc}
 800d7e6:	46c0      	nop			@ (mov r8, r8)
 800d7e8:	20001c0d 	.word	0x20001c0d

0800d7ec <__sinit>:
 800d7ec:	b510      	push	{r4, lr}
 800d7ee:	0004      	movs	r4, r0
 800d7f0:	f7ff ffec 	bl	800d7cc <__sfp_lock_acquire>
 800d7f4:	6a23      	ldr	r3, [r4, #32]
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d002      	beq.n	800d800 <__sinit+0x14>
 800d7fa:	f7ff ffef 	bl	800d7dc <__sfp_lock_release>
 800d7fe:	bd10      	pop	{r4, pc}
 800d800:	4b04      	ldr	r3, [pc, #16]	@ (800d814 <__sinit+0x28>)
 800d802:	6223      	str	r3, [r4, #32]
 800d804:	4b04      	ldr	r3, [pc, #16]	@ (800d818 <__sinit+0x2c>)
 800d806:	681b      	ldr	r3, [r3, #0]
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d1f6      	bne.n	800d7fa <__sinit+0xe>
 800d80c:	f7ff ffc0 	bl	800d790 <global_stdio_init.part.0>
 800d810:	e7f3      	b.n	800d7fa <__sinit+0xe>
 800d812:	46c0      	nop			@ (mov r8, r8)
 800d814:	0800d755 	.word	0x0800d755
 800d818:	20001c04 	.word	0x20001c04

0800d81c <_fwalk_sglue>:
 800d81c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d81e:	0014      	movs	r4, r2
 800d820:	2600      	movs	r6, #0
 800d822:	9000      	str	r0, [sp, #0]
 800d824:	9101      	str	r1, [sp, #4]
 800d826:	68a5      	ldr	r5, [r4, #8]
 800d828:	6867      	ldr	r7, [r4, #4]
 800d82a:	3f01      	subs	r7, #1
 800d82c:	d504      	bpl.n	800d838 <_fwalk_sglue+0x1c>
 800d82e:	6824      	ldr	r4, [r4, #0]
 800d830:	2c00      	cmp	r4, #0
 800d832:	d1f8      	bne.n	800d826 <_fwalk_sglue+0xa>
 800d834:	0030      	movs	r0, r6
 800d836:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d838:	89ab      	ldrh	r3, [r5, #12]
 800d83a:	2b01      	cmp	r3, #1
 800d83c:	d908      	bls.n	800d850 <_fwalk_sglue+0x34>
 800d83e:	220e      	movs	r2, #14
 800d840:	5eab      	ldrsh	r3, [r5, r2]
 800d842:	3301      	adds	r3, #1
 800d844:	d004      	beq.n	800d850 <_fwalk_sglue+0x34>
 800d846:	0029      	movs	r1, r5
 800d848:	9800      	ldr	r0, [sp, #0]
 800d84a:	9b01      	ldr	r3, [sp, #4]
 800d84c:	4798      	blx	r3
 800d84e:	4306      	orrs	r6, r0
 800d850:	3568      	adds	r5, #104	@ 0x68
 800d852:	e7ea      	b.n	800d82a <_fwalk_sglue+0xe>

0800d854 <iprintf>:
 800d854:	b40f      	push	{r0, r1, r2, r3}
 800d856:	b507      	push	{r0, r1, r2, lr}
 800d858:	4905      	ldr	r1, [pc, #20]	@ (800d870 <iprintf+0x1c>)
 800d85a:	ab04      	add	r3, sp, #16
 800d85c:	6808      	ldr	r0, [r1, #0]
 800d85e:	cb04      	ldmia	r3!, {r2}
 800d860:	6881      	ldr	r1, [r0, #8]
 800d862:	9301      	str	r3, [sp, #4]
 800d864:	f001 fdf8 	bl	800f458 <_vfiprintf_r>
 800d868:	b003      	add	sp, #12
 800d86a:	bc08      	pop	{r3}
 800d86c:	b004      	add	sp, #16
 800d86e:	4718      	bx	r3
 800d870:	20000060 	.word	0x20000060

0800d874 <siprintf>:
 800d874:	b40e      	push	{r1, r2, r3}
 800d876:	b500      	push	{lr}
 800d878:	490b      	ldr	r1, [pc, #44]	@ (800d8a8 <siprintf+0x34>)
 800d87a:	b09c      	sub	sp, #112	@ 0x70
 800d87c:	ab1d      	add	r3, sp, #116	@ 0x74
 800d87e:	9002      	str	r0, [sp, #8]
 800d880:	9006      	str	r0, [sp, #24]
 800d882:	9107      	str	r1, [sp, #28]
 800d884:	9104      	str	r1, [sp, #16]
 800d886:	4809      	ldr	r0, [pc, #36]	@ (800d8ac <siprintf+0x38>)
 800d888:	4909      	ldr	r1, [pc, #36]	@ (800d8b0 <siprintf+0x3c>)
 800d88a:	cb04      	ldmia	r3!, {r2}
 800d88c:	9105      	str	r1, [sp, #20]
 800d88e:	6800      	ldr	r0, [r0, #0]
 800d890:	a902      	add	r1, sp, #8
 800d892:	9301      	str	r3, [sp, #4]
 800d894:	f001 fcba 	bl	800f20c <_svfiprintf_r>
 800d898:	2200      	movs	r2, #0
 800d89a:	9b02      	ldr	r3, [sp, #8]
 800d89c:	701a      	strb	r2, [r3, #0]
 800d89e:	b01c      	add	sp, #112	@ 0x70
 800d8a0:	bc08      	pop	{r3}
 800d8a2:	b003      	add	sp, #12
 800d8a4:	4718      	bx	r3
 800d8a6:	46c0      	nop			@ (mov r8, r8)
 800d8a8:	7fffffff 	.word	0x7fffffff
 800d8ac:	20000060 	.word	0x20000060
 800d8b0:	ffff0208 	.word	0xffff0208

0800d8b4 <__sread>:
 800d8b4:	b570      	push	{r4, r5, r6, lr}
 800d8b6:	000c      	movs	r4, r1
 800d8b8:	250e      	movs	r5, #14
 800d8ba:	5f49      	ldrsh	r1, [r1, r5]
 800d8bc:	f000 f8b0 	bl	800da20 <_read_r>
 800d8c0:	2800      	cmp	r0, #0
 800d8c2:	db03      	blt.n	800d8cc <__sread+0x18>
 800d8c4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800d8c6:	181b      	adds	r3, r3, r0
 800d8c8:	6563      	str	r3, [r4, #84]	@ 0x54
 800d8ca:	bd70      	pop	{r4, r5, r6, pc}
 800d8cc:	89a3      	ldrh	r3, [r4, #12]
 800d8ce:	4a02      	ldr	r2, [pc, #8]	@ (800d8d8 <__sread+0x24>)
 800d8d0:	4013      	ands	r3, r2
 800d8d2:	81a3      	strh	r3, [r4, #12]
 800d8d4:	e7f9      	b.n	800d8ca <__sread+0x16>
 800d8d6:	46c0      	nop			@ (mov r8, r8)
 800d8d8:	ffffefff 	.word	0xffffefff

0800d8dc <__swrite>:
 800d8dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8de:	001f      	movs	r7, r3
 800d8e0:	898b      	ldrh	r3, [r1, #12]
 800d8e2:	0005      	movs	r5, r0
 800d8e4:	000c      	movs	r4, r1
 800d8e6:	0016      	movs	r6, r2
 800d8e8:	05db      	lsls	r3, r3, #23
 800d8ea:	d505      	bpl.n	800d8f8 <__swrite+0x1c>
 800d8ec:	230e      	movs	r3, #14
 800d8ee:	5ec9      	ldrsh	r1, [r1, r3]
 800d8f0:	2200      	movs	r2, #0
 800d8f2:	2302      	movs	r3, #2
 800d8f4:	f000 f880 	bl	800d9f8 <_lseek_r>
 800d8f8:	89a3      	ldrh	r3, [r4, #12]
 800d8fa:	4a05      	ldr	r2, [pc, #20]	@ (800d910 <__swrite+0x34>)
 800d8fc:	0028      	movs	r0, r5
 800d8fe:	4013      	ands	r3, r2
 800d900:	81a3      	strh	r3, [r4, #12]
 800d902:	0032      	movs	r2, r6
 800d904:	230e      	movs	r3, #14
 800d906:	5ee1      	ldrsh	r1, [r4, r3]
 800d908:	003b      	movs	r3, r7
 800d90a:	f000 f89d 	bl	800da48 <_write_r>
 800d90e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d910:	ffffefff 	.word	0xffffefff

0800d914 <__sseek>:
 800d914:	b570      	push	{r4, r5, r6, lr}
 800d916:	000c      	movs	r4, r1
 800d918:	250e      	movs	r5, #14
 800d91a:	5f49      	ldrsh	r1, [r1, r5]
 800d91c:	f000 f86c 	bl	800d9f8 <_lseek_r>
 800d920:	89a3      	ldrh	r3, [r4, #12]
 800d922:	1c42      	adds	r2, r0, #1
 800d924:	d103      	bne.n	800d92e <__sseek+0x1a>
 800d926:	4a05      	ldr	r2, [pc, #20]	@ (800d93c <__sseek+0x28>)
 800d928:	4013      	ands	r3, r2
 800d92a:	81a3      	strh	r3, [r4, #12]
 800d92c:	bd70      	pop	{r4, r5, r6, pc}
 800d92e:	2280      	movs	r2, #128	@ 0x80
 800d930:	0152      	lsls	r2, r2, #5
 800d932:	4313      	orrs	r3, r2
 800d934:	81a3      	strh	r3, [r4, #12]
 800d936:	6560      	str	r0, [r4, #84]	@ 0x54
 800d938:	e7f8      	b.n	800d92c <__sseek+0x18>
 800d93a:	46c0      	nop			@ (mov r8, r8)
 800d93c:	ffffefff 	.word	0xffffefff

0800d940 <__sclose>:
 800d940:	b510      	push	{r4, lr}
 800d942:	230e      	movs	r3, #14
 800d944:	5ec9      	ldrsh	r1, [r1, r3]
 800d946:	f000 f845 	bl	800d9d4 <_close_r>
 800d94a:	bd10      	pop	{r4, pc}

0800d94c <_vsniprintf_r>:
 800d94c:	b530      	push	{r4, r5, lr}
 800d94e:	0014      	movs	r4, r2
 800d950:	0005      	movs	r5, r0
 800d952:	001a      	movs	r2, r3
 800d954:	b09b      	sub	sp, #108	@ 0x6c
 800d956:	2c00      	cmp	r4, #0
 800d958:	da05      	bge.n	800d966 <_vsniprintf_r+0x1a>
 800d95a:	238b      	movs	r3, #139	@ 0x8b
 800d95c:	6003      	str	r3, [r0, #0]
 800d95e:	2001      	movs	r0, #1
 800d960:	4240      	negs	r0, r0
 800d962:	b01b      	add	sp, #108	@ 0x6c
 800d964:	bd30      	pop	{r4, r5, pc}
 800d966:	2382      	movs	r3, #130	@ 0x82
 800d968:	4668      	mov	r0, sp
 800d96a:	009b      	lsls	r3, r3, #2
 800d96c:	8183      	strh	r3, [r0, #12]
 800d96e:	2300      	movs	r3, #0
 800d970:	9100      	str	r1, [sp, #0]
 800d972:	9104      	str	r1, [sp, #16]
 800d974:	429c      	cmp	r4, r3
 800d976:	d000      	beq.n	800d97a <_vsniprintf_r+0x2e>
 800d978:	1e63      	subs	r3, r4, #1
 800d97a:	9302      	str	r3, [sp, #8]
 800d97c:	9305      	str	r3, [sp, #20]
 800d97e:	2301      	movs	r3, #1
 800d980:	4669      	mov	r1, sp
 800d982:	425b      	negs	r3, r3
 800d984:	81cb      	strh	r3, [r1, #14]
 800d986:	0028      	movs	r0, r5
 800d988:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800d98a:	f001 fc3f 	bl	800f20c <_svfiprintf_r>
 800d98e:	1c43      	adds	r3, r0, #1
 800d990:	da01      	bge.n	800d996 <_vsniprintf_r+0x4a>
 800d992:	238b      	movs	r3, #139	@ 0x8b
 800d994:	602b      	str	r3, [r5, #0]
 800d996:	2c00      	cmp	r4, #0
 800d998:	d0e3      	beq.n	800d962 <_vsniprintf_r+0x16>
 800d99a:	2200      	movs	r2, #0
 800d99c:	9b00      	ldr	r3, [sp, #0]
 800d99e:	701a      	strb	r2, [r3, #0]
 800d9a0:	e7df      	b.n	800d962 <_vsniprintf_r+0x16>
	...

0800d9a4 <vsniprintf>:
 800d9a4:	b513      	push	{r0, r1, r4, lr}
 800d9a6:	4c04      	ldr	r4, [pc, #16]	@ (800d9b8 <vsniprintf+0x14>)
 800d9a8:	9300      	str	r3, [sp, #0]
 800d9aa:	0013      	movs	r3, r2
 800d9ac:	000a      	movs	r2, r1
 800d9ae:	0001      	movs	r1, r0
 800d9b0:	6820      	ldr	r0, [r4, #0]
 800d9b2:	f7ff ffcb 	bl	800d94c <_vsniprintf_r>
 800d9b6:	bd16      	pop	{r1, r2, r4, pc}
 800d9b8:	20000060 	.word	0x20000060

0800d9bc <memset>:
 800d9bc:	0003      	movs	r3, r0
 800d9be:	1882      	adds	r2, r0, r2
 800d9c0:	4293      	cmp	r3, r2
 800d9c2:	d100      	bne.n	800d9c6 <memset+0xa>
 800d9c4:	4770      	bx	lr
 800d9c6:	7019      	strb	r1, [r3, #0]
 800d9c8:	3301      	adds	r3, #1
 800d9ca:	e7f9      	b.n	800d9c0 <memset+0x4>

0800d9cc <_localeconv_r>:
 800d9cc:	4800      	ldr	r0, [pc, #0]	@ (800d9d0 <_localeconv_r+0x4>)
 800d9ce:	4770      	bx	lr
 800d9d0:	200001a0 	.word	0x200001a0

0800d9d4 <_close_r>:
 800d9d4:	2300      	movs	r3, #0
 800d9d6:	b570      	push	{r4, r5, r6, lr}
 800d9d8:	4d06      	ldr	r5, [pc, #24]	@ (800d9f4 <_close_r+0x20>)
 800d9da:	0004      	movs	r4, r0
 800d9dc:	0008      	movs	r0, r1
 800d9de:	602b      	str	r3, [r5, #0]
 800d9e0:	f7f8 fad2 	bl	8005f88 <_close>
 800d9e4:	1c43      	adds	r3, r0, #1
 800d9e6:	d103      	bne.n	800d9f0 <_close_r+0x1c>
 800d9e8:	682b      	ldr	r3, [r5, #0]
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d000      	beq.n	800d9f0 <_close_r+0x1c>
 800d9ee:	6023      	str	r3, [r4, #0]
 800d9f0:	bd70      	pop	{r4, r5, r6, pc}
 800d9f2:	46c0      	nop			@ (mov r8, r8)
 800d9f4:	20001c08 	.word	0x20001c08

0800d9f8 <_lseek_r>:
 800d9f8:	b570      	push	{r4, r5, r6, lr}
 800d9fa:	0004      	movs	r4, r0
 800d9fc:	0008      	movs	r0, r1
 800d9fe:	0011      	movs	r1, r2
 800da00:	001a      	movs	r2, r3
 800da02:	2300      	movs	r3, #0
 800da04:	4d05      	ldr	r5, [pc, #20]	@ (800da1c <_lseek_r+0x24>)
 800da06:	602b      	str	r3, [r5, #0]
 800da08:	f7f8 fadf 	bl	8005fca <_lseek>
 800da0c:	1c43      	adds	r3, r0, #1
 800da0e:	d103      	bne.n	800da18 <_lseek_r+0x20>
 800da10:	682b      	ldr	r3, [r5, #0]
 800da12:	2b00      	cmp	r3, #0
 800da14:	d000      	beq.n	800da18 <_lseek_r+0x20>
 800da16:	6023      	str	r3, [r4, #0]
 800da18:	bd70      	pop	{r4, r5, r6, pc}
 800da1a:	46c0      	nop			@ (mov r8, r8)
 800da1c:	20001c08 	.word	0x20001c08

0800da20 <_read_r>:
 800da20:	b570      	push	{r4, r5, r6, lr}
 800da22:	0004      	movs	r4, r0
 800da24:	0008      	movs	r0, r1
 800da26:	0011      	movs	r1, r2
 800da28:	001a      	movs	r2, r3
 800da2a:	2300      	movs	r3, #0
 800da2c:	4d05      	ldr	r5, [pc, #20]	@ (800da44 <_read_r+0x24>)
 800da2e:	602b      	str	r3, [r5, #0]
 800da30:	f7f8 fa8d 	bl	8005f4e <_read>
 800da34:	1c43      	adds	r3, r0, #1
 800da36:	d103      	bne.n	800da40 <_read_r+0x20>
 800da38:	682b      	ldr	r3, [r5, #0]
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d000      	beq.n	800da40 <_read_r+0x20>
 800da3e:	6023      	str	r3, [r4, #0]
 800da40:	bd70      	pop	{r4, r5, r6, pc}
 800da42:	46c0      	nop			@ (mov r8, r8)
 800da44:	20001c08 	.word	0x20001c08

0800da48 <_write_r>:
 800da48:	b570      	push	{r4, r5, r6, lr}
 800da4a:	0004      	movs	r4, r0
 800da4c:	0008      	movs	r0, r1
 800da4e:	0011      	movs	r1, r2
 800da50:	001a      	movs	r2, r3
 800da52:	2300      	movs	r3, #0
 800da54:	4d05      	ldr	r5, [pc, #20]	@ (800da6c <_write_r+0x24>)
 800da56:	602b      	str	r3, [r5, #0]
 800da58:	f7f8 fee6 	bl	8006828 <_write>
 800da5c:	1c43      	adds	r3, r0, #1
 800da5e:	d103      	bne.n	800da68 <_write_r+0x20>
 800da60:	682b      	ldr	r3, [r5, #0]
 800da62:	2b00      	cmp	r3, #0
 800da64:	d000      	beq.n	800da68 <_write_r+0x20>
 800da66:	6023      	str	r3, [r4, #0]
 800da68:	bd70      	pop	{r4, r5, r6, pc}
 800da6a:	46c0      	nop			@ (mov r8, r8)
 800da6c:	20001c08 	.word	0x20001c08

0800da70 <__errno>:
 800da70:	4b01      	ldr	r3, [pc, #4]	@ (800da78 <__errno+0x8>)
 800da72:	6818      	ldr	r0, [r3, #0]
 800da74:	4770      	bx	lr
 800da76:	46c0      	nop			@ (mov r8, r8)
 800da78:	20000060 	.word	0x20000060

0800da7c <__libc_init_array>:
 800da7c:	b570      	push	{r4, r5, r6, lr}
 800da7e:	2600      	movs	r6, #0
 800da80:	4c0c      	ldr	r4, [pc, #48]	@ (800dab4 <__libc_init_array+0x38>)
 800da82:	4d0d      	ldr	r5, [pc, #52]	@ (800dab8 <__libc_init_array+0x3c>)
 800da84:	1b64      	subs	r4, r4, r5
 800da86:	10a4      	asrs	r4, r4, #2
 800da88:	42a6      	cmp	r6, r4
 800da8a:	d109      	bne.n	800daa0 <__libc_init_array+0x24>
 800da8c:	2600      	movs	r6, #0
 800da8e:	f002 fae1 	bl	8010054 <_init>
 800da92:	4c0a      	ldr	r4, [pc, #40]	@ (800dabc <__libc_init_array+0x40>)
 800da94:	4d0a      	ldr	r5, [pc, #40]	@ (800dac0 <__libc_init_array+0x44>)
 800da96:	1b64      	subs	r4, r4, r5
 800da98:	10a4      	asrs	r4, r4, #2
 800da9a:	42a6      	cmp	r6, r4
 800da9c:	d105      	bne.n	800daaa <__libc_init_array+0x2e>
 800da9e:	bd70      	pop	{r4, r5, r6, pc}
 800daa0:	00b3      	lsls	r3, r6, #2
 800daa2:	58eb      	ldr	r3, [r5, r3]
 800daa4:	4798      	blx	r3
 800daa6:	3601      	adds	r6, #1
 800daa8:	e7ee      	b.n	800da88 <__libc_init_array+0xc>
 800daaa:	00b3      	lsls	r3, r6, #2
 800daac:	58eb      	ldr	r3, [r5, r3]
 800daae:	4798      	blx	r3
 800dab0:	3601      	adds	r6, #1
 800dab2:	e7f2      	b.n	800da9a <__libc_init_array+0x1e>
 800dab4:	08010ad0 	.word	0x08010ad0
 800dab8:	08010ad0 	.word	0x08010ad0
 800dabc:	08010ad4 	.word	0x08010ad4
 800dac0:	08010ad0 	.word	0x08010ad0

0800dac4 <__retarget_lock_init_recursive>:
 800dac4:	4770      	bx	lr

0800dac6 <__retarget_lock_acquire_recursive>:
 800dac6:	4770      	bx	lr

0800dac8 <__retarget_lock_release_recursive>:
 800dac8:	4770      	bx	lr

0800daca <memchr>:
 800daca:	b2c9      	uxtb	r1, r1
 800dacc:	1882      	adds	r2, r0, r2
 800dace:	4290      	cmp	r0, r2
 800dad0:	d101      	bne.n	800dad6 <memchr+0xc>
 800dad2:	2000      	movs	r0, #0
 800dad4:	4770      	bx	lr
 800dad6:	7803      	ldrb	r3, [r0, #0]
 800dad8:	428b      	cmp	r3, r1
 800dada:	d0fb      	beq.n	800dad4 <memchr+0xa>
 800dadc:	3001      	adds	r0, #1
 800dade:	e7f6      	b.n	800dace <memchr+0x4>

0800dae0 <memcpy>:
 800dae0:	2300      	movs	r3, #0
 800dae2:	b510      	push	{r4, lr}
 800dae4:	429a      	cmp	r2, r3
 800dae6:	d100      	bne.n	800daea <memcpy+0xa>
 800dae8:	bd10      	pop	{r4, pc}
 800daea:	5ccc      	ldrb	r4, [r1, r3]
 800daec:	54c4      	strb	r4, [r0, r3]
 800daee:	3301      	adds	r3, #1
 800daf0:	e7f8      	b.n	800dae4 <memcpy+0x4>

0800daf2 <quorem>:
 800daf2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800daf4:	6902      	ldr	r2, [r0, #16]
 800daf6:	690f      	ldr	r7, [r1, #16]
 800daf8:	b087      	sub	sp, #28
 800dafa:	0006      	movs	r6, r0
 800dafc:	000b      	movs	r3, r1
 800dafe:	2000      	movs	r0, #0
 800db00:	9102      	str	r1, [sp, #8]
 800db02:	42ba      	cmp	r2, r7
 800db04:	db6d      	blt.n	800dbe2 <quorem+0xf0>
 800db06:	3f01      	subs	r7, #1
 800db08:	00bc      	lsls	r4, r7, #2
 800db0a:	3314      	adds	r3, #20
 800db0c:	9305      	str	r3, [sp, #20]
 800db0e:	191b      	adds	r3, r3, r4
 800db10:	9303      	str	r3, [sp, #12]
 800db12:	0033      	movs	r3, r6
 800db14:	3314      	adds	r3, #20
 800db16:	191c      	adds	r4, r3, r4
 800db18:	9301      	str	r3, [sp, #4]
 800db1a:	6823      	ldr	r3, [r4, #0]
 800db1c:	9304      	str	r3, [sp, #16]
 800db1e:	9b03      	ldr	r3, [sp, #12]
 800db20:	9804      	ldr	r0, [sp, #16]
 800db22:	681d      	ldr	r5, [r3, #0]
 800db24:	3501      	adds	r5, #1
 800db26:	0029      	movs	r1, r5
 800db28:	f7f2 fb0a 	bl	8000140 <__udivsi3>
 800db2c:	9b04      	ldr	r3, [sp, #16]
 800db2e:	9000      	str	r0, [sp, #0]
 800db30:	42ab      	cmp	r3, r5
 800db32:	d32b      	bcc.n	800db8c <quorem+0x9a>
 800db34:	9b05      	ldr	r3, [sp, #20]
 800db36:	9d01      	ldr	r5, [sp, #4]
 800db38:	469c      	mov	ip, r3
 800db3a:	2300      	movs	r3, #0
 800db3c:	9305      	str	r3, [sp, #20]
 800db3e:	9304      	str	r3, [sp, #16]
 800db40:	4662      	mov	r2, ip
 800db42:	ca08      	ldmia	r2!, {r3}
 800db44:	6828      	ldr	r0, [r5, #0]
 800db46:	4694      	mov	ip, r2
 800db48:	9a00      	ldr	r2, [sp, #0]
 800db4a:	b299      	uxth	r1, r3
 800db4c:	4351      	muls	r1, r2
 800db4e:	9a05      	ldr	r2, [sp, #20]
 800db50:	0c1b      	lsrs	r3, r3, #16
 800db52:	1889      	adds	r1, r1, r2
 800db54:	9a00      	ldr	r2, [sp, #0]
 800db56:	4353      	muls	r3, r2
 800db58:	0c0a      	lsrs	r2, r1, #16
 800db5a:	189b      	adds	r3, r3, r2
 800db5c:	0c1a      	lsrs	r2, r3, #16
 800db5e:	b289      	uxth	r1, r1
 800db60:	9205      	str	r2, [sp, #20]
 800db62:	b282      	uxth	r2, r0
 800db64:	1a52      	subs	r2, r2, r1
 800db66:	9904      	ldr	r1, [sp, #16]
 800db68:	0c00      	lsrs	r0, r0, #16
 800db6a:	1852      	adds	r2, r2, r1
 800db6c:	b29b      	uxth	r3, r3
 800db6e:	1411      	asrs	r1, r2, #16
 800db70:	1ac3      	subs	r3, r0, r3
 800db72:	185b      	adds	r3, r3, r1
 800db74:	1419      	asrs	r1, r3, #16
 800db76:	b292      	uxth	r2, r2
 800db78:	041b      	lsls	r3, r3, #16
 800db7a:	431a      	orrs	r2, r3
 800db7c:	9b03      	ldr	r3, [sp, #12]
 800db7e:	9104      	str	r1, [sp, #16]
 800db80:	c504      	stmia	r5!, {r2}
 800db82:	4563      	cmp	r3, ip
 800db84:	d2dc      	bcs.n	800db40 <quorem+0x4e>
 800db86:	6823      	ldr	r3, [r4, #0]
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d030      	beq.n	800dbee <quorem+0xfc>
 800db8c:	0030      	movs	r0, r6
 800db8e:	9902      	ldr	r1, [sp, #8]
 800db90:	f001 f9c6 	bl	800ef20 <__mcmp>
 800db94:	2800      	cmp	r0, #0
 800db96:	db23      	blt.n	800dbe0 <quorem+0xee>
 800db98:	0034      	movs	r4, r6
 800db9a:	2500      	movs	r5, #0
 800db9c:	9902      	ldr	r1, [sp, #8]
 800db9e:	3414      	adds	r4, #20
 800dba0:	3114      	adds	r1, #20
 800dba2:	6823      	ldr	r3, [r4, #0]
 800dba4:	c901      	ldmia	r1!, {r0}
 800dba6:	9302      	str	r3, [sp, #8]
 800dba8:	466b      	mov	r3, sp
 800dbaa:	891b      	ldrh	r3, [r3, #8]
 800dbac:	b282      	uxth	r2, r0
 800dbae:	1a9a      	subs	r2, r3, r2
 800dbb0:	9b02      	ldr	r3, [sp, #8]
 800dbb2:	1952      	adds	r2, r2, r5
 800dbb4:	0c00      	lsrs	r0, r0, #16
 800dbb6:	0c1b      	lsrs	r3, r3, #16
 800dbb8:	1a1b      	subs	r3, r3, r0
 800dbba:	1410      	asrs	r0, r2, #16
 800dbbc:	181b      	adds	r3, r3, r0
 800dbbe:	141d      	asrs	r5, r3, #16
 800dbc0:	b292      	uxth	r2, r2
 800dbc2:	041b      	lsls	r3, r3, #16
 800dbc4:	431a      	orrs	r2, r3
 800dbc6:	9b03      	ldr	r3, [sp, #12]
 800dbc8:	c404      	stmia	r4!, {r2}
 800dbca:	428b      	cmp	r3, r1
 800dbcc:	d2e9      	bcs.n	800dba2 <quorem+0xb0>
 800dbce:	9a01      	ldr	r2, [sp, #4]
 800dbd0:	00bb      	lsls	r3, r7, #2
 800dbd2:	18d3      	adds	r3, r2, r3
 800dbd4:	681a      	ldr	r2, [r3, #0]
 800dbd6:	2a00      	cmp	r2, #0
 800dbd8:	d013      	beq.n	800dc02 <quorem+0x110>
 800dbda:	9b00      	ldr	r3, [sp, #0]
 800dbdc:	3301      	adds	r3, #1
 800dbde:	9300      	str	r3, [sp, #0]
 800dbe0:	9800      	ldr	r0, [sp, #0]
 800dbe2:	b007      	add	sp, #28
 800dbe4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dbe6:	6823      	ldr	r3, [r4, #0]
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d104      	bne.n	800dbf6 <quorem+0x104>
 800dbec:	3f01      	subs	r7, #1
 800dbee:	9b01      	ldr	r3, [sp, #4]
 800dbf0:	3c04      	subs	r4, #4
 800dbf2:	42a3      	cmp	r3, r4
 800dbf4:	d3f7      	bcc.n	800dbe6 <quorem+0xf4>
 800dbf6:	6137      	str	r7, [r6, #16]
 800dbf8:	e7c8      	b.n	800db8c <quorem+0x9a>
 800dbfa:	681a      	ldr	r2, [r3, #0]
 800dbfc:	2a00      	cmp	r2, #0
 800dbfe:	d104      	bne.n	800dc0a <quorem+0x118>
 800dc00:	3f01      	subs	r7, #1
 800dc02:	9a01      	ldr	r2, [sp, #4]
 800dc04:	3b04      	subs	r3, #4
 800dc06:	429a      	cmp	r2, r3
 800dc08:	d3f7      	bcc.n	800dbfa <quorem+0x108>
 800dc0a:	6137      	str	r7, [r6, #16]
 800dc0c:	e7e5      	b.n	800dbda <quorem+0xe8>
	...

0800dc10 <_dtoa_r>:
 800dc10:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dc12:	0014      	movs	r4, r2
 800dc14:	001d      	movs	r5, r3
 800dc16:	69c6      	ldr	r6, [r0, #28]
 800dc18:	b09d      	sub	sp, #116	@ 0x74
 800dc1a:	940a      	str	r4, [sp, #40]	@ 0x28
 800dc1c:	950b      	str	r5, [sp, #44]	@ 0x2c
 800dc1e:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 800dc20:	9003      	str	r0, [sp, #12]
 800dc22:	2e00      	cmp	r6, #0
 800dc24:	d10f      	bne.n	800dc46 <_dtoa_r+0x36>
 800dc26:	2010      	movs	r0, #16
 800dc28:	f000 fe30 	bl	800e88c <malloc>
 800dc2c:	9b03      	ldr	r3, [sp, #12]
 800dc2e:	1e02      	subs	r2, r0, #0
 800dc30:	61d8      	str	r0, [r3, #28]
 800dc32:	d104      	bne.n	800dc3e <_dtoa_r+0x2e>
 800dc34:	21ef      	movs	r1, #239	@ 0xef
 800dc36:	4bc7      	ldr	r3, [pc, #796]	@ (800df54 <_dtoa_r+0x344>)
 800dc38:	48c7      	ldr	r0, [pc, #796]	@ (800df58 <_dtoa_r+0x348>)
 800dc3a:	f001 fea1 	bl	800f980 <__assert_func>
 800dc3e:	6046      	str	r6, [r0, #4]
 800dc40:	6086      	str	r6, [r0, #8]
 800dc42:	6006      	str	r6, [r0, #0]
 800dc44:	60c6      	str	r6, [r0, #12]
 800dc46:	9b03      	ldr	r3, [sp, #12]
 800dc48:	69db      	ldr	r3, [r3, #28]
 800dc4a:	6819      	ldr	r1, [r3, #0]
 800dc4c:	2900      	cmp	r1, #0
 800dc4e:	d00b      	beq.n	800dc68 <_dtoa_r+0x58>
 800dc50:	685a      	ldr	r2, [r3, #4]
 800dc52:	2301      	movs	r3, #1
 800dc54:	4093      	lsls	r3, r2
 800dc56:	604a      	str	r2, [r1, #4]
 800dc58:	608b      	str	r3, [r1, #8]
 800dc5a:	9803      	ldr	r0, [sp, #12]
 800dc5c:	f000 ff16 	bl	800ea8c <_Bfree>
 800dc60:	2200      	movs	r2, #0
 800dc62:	9b03      	ldr	r3, [sp, #12]
 800dc64:	69db      	ldr	r3, [r3, #28]
 800dc66:	601a      	str	r2, [r3, #0]
 800dc68:	2d00      	cmp	r5, #0
 800dc6a:	da1e      	bge.n	800dcaa <_dtoa_r+0x9a>
 800dc6c:	2301      	movs	r3, #1
 800dc6e:	603b      	str	r3, [r7, #0]
 800dc70:	006b      	lsls	r3, r5, #1
 800dc72:	085b      	lsrs	r3, r3, #1
 800dc74:	930b      	str	r3, [sp, #44]	@ 0x2c
 800dc76:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800dc78:	4bb8      	ldr	r3, [pc, #736]	@ (800df5c <_dtoa_r+0x34c>)
 800dc7a:	4ab8      	ldr	r2, [pc, #736]	@ (800df5c <_dtoa_r+0x34c>)
 800dc7c:	403b      	ands	r3, r7
 800dc7e:	4293      	cmp	r3, r2
 800dc80:	d116      	bne.n	800dcb0 <_dtoa_r+0xa0>
 800dc82:	4bb7      	ldr	r3, [pc, #732]	@ (800df60 <_dtoa_r+0x350>)
 800dc84:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800dc86:	6013      	str	r3, [r2, #0]
 800dc88:	033b      	lsls	r3, r7, #12
 800dc8a:	0b1b      	lsrs	r3, r3, #12
 800dc8c:	4323      	orrs	r3, r4
 800dc8e:	d101      	bne.n	800dc94 <_dtoa_r+0x84>
 800dc90:	f000 fd83 	bl	800e79a <_dtoa_r+0xb8a>
 800dc94:	4bb3      	ldr	r3, [pc, #716]	@ (800df64 <_dtoa_r+0x354>)
 800dc96:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800dc98:	9308      	str	r3, [sp, #32]
 800dc9a:	2a00      	cmp	r2, #0
 800dc9c:	d002      	beq.n	800dca4 <_dtoa_r+0x94>
 800dc9e:	4bb2      	ldr	r3, [pc, #712]	@ (800df68 <_dtoa_r+0x358>)
 800dca0:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800dca2:	6013      	str	r3, [r2, #0]
 800dca4:	9808      	ldr	r0, [sp, #32]
 800dca6:	b01d      	add	sp, #116	@ 0x74
 800dca8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dcaa:	2300      	movs	r3, #0
 800dcac:	603b      	str	r3, [r7, #0]
 800dcae:	e7e2      	b.n	800dc76 <_dtoa_r+0x66>
 800dcb0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800dcb2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dcb4:	9212      	str	r2, [sp, #72]	@ 0x48
 800dcb6:	9313      	str	r3, [sp, #76]	@ 0x4c
 800dcb8:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800dcba:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800dcbc:	2200      	movs	r2, #0
 800dcbe:	2300      	movs	r3, #0
 800dcc0:	f7f2 fbc4 	bl	800044c <__aeabi_dcmpeq>
 800dcc4:	1e06      	subs	r6, r0, #0
 800dcc6:	d00b      	beq.n	800dce0 <_dtoa_r+0xd0>
 800dcc8:	2301      	movs	r3, #1
 800dcca:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800dccc:	6013      	str	r3, [r2, #0]
 800dcce:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	d002      	beq.n	800dcda <_dtoa_r+0xca>
 800dcd4:	4ba5      	ldr	r3, [pc, #660]	@ (800df6c <_dtoa_r+0x35c>)
 800dcd6:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800dcd8:	6013      	str	r3, [r2, #0]
 800dcda:	4ba5      	ldr	r3, [pc, #660]	@ (800df70 <_dtoa_r+0x360>)
 800dcdc:	9308      	str	r3, [sp, #32]
 800dcde:	e7e1      	b.n	800dca4 <_dtoa_r+0x94>
 800dce0:	ab1a      	add	r3, sp, #104	@ 0x68
 800dce2:	9301      	str	r3, [sp, #4]
 800dce4:	ab1b      	add	r3, sp, #108	@ 0x6c
 800dce6:	9300      	str	r3, [sp, #0]
 800dce8:	9803      	ldr	r0, [sp, #12]
 800dcea:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800dcec:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800dcee:	f001 f9cd 	bl	800f08c <__d2b>
 800dcf2:	007a      	lsls	r2, r7, #1
 800dcf4:	9005      	str	r0, [sp, #20]
 800dcf6:	0d52      	lsrs	r2, r2, #21
 800dcf8:	d100      	bne.n	800dcfc <_dtoa_r+0xec>
 800dcfa:	e07b      	b.n	800ddf4 <_dtoa_r+0x1e4>
 800dcfc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800dcfe:	9618      	str	r6, [sp, #96]	@ 0x60
 800dd00:	0319      	lsls	r1, r3, #12
 800dd02:	4b9c      	ldr	r3, [pc, #624]	@ (800df74 <_dtoa_r+0x364>)
 800dd04:	0b09      	lsrs	r1, r1, #12
 800dd06:	430b      	orrs	r3, r1
 800dd08:	499b      	ldr	r1, [pc, #620]	@ (800df78 <_dtoa_r+0x368>)
 800dd0a:	1857      	adds	r7, r2, r1
 800dd0c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800dd0e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800dd10:	0019      	movs	r1, r3
 800dd12:	2200      	movs	r2, #0
 800dd14:	4b99      	ldr	r3, [pc, #612]	@ (800df7c <_dtoa_r+0x36c>)
 800dd16:	f7f4 fed7 	bl	8002ac8 <__aeabi_dsub>
 800dd1a:	4a99      	ldr	r2, [pc, #612]	@ (800df80 <_dtoa_r+0x370>)
 800dd1c:	4b99      	ldr	r3, [pc, #612]	@ (800df84 <_dtoa_r+0x374>)
 800dd1e:	f7f4 fc0b 	bl	8002538 <__aeabi_dmul>
 800dd22:	4a99      	ldr	r2, [pc, #612]	@ (800df88 <_dtoa_r+0x378>)
 800dd24:	4b99      	ldr	r3, [pc, #612]	@ (800df8c <_dtoa_r+0x37c>)
 800dd26:	f7f3 fc5f 	bl	80015e8 <__aeabi_dadd>
 800dd2a:	0004      	movs	r4, r0
 800dd2c:	0038      	movs	r0, r7
 800dd2e:	000d      	movs	r5, r1
 800dd30:	f7f5 fac4 	bl	80032bc <__aeabi_i2d>
 800dd34:	4a96      	ldr	r2, [pc, #600]	@ (800df90 <_dtoa_r+0x380>)
 800dd36:	4b97      	ldr	r3, [pc, #604]	@ (800df94 <_dtoa_r+0x384>)
 800dd38:	f7f4 fbfe 	bl	8002538 <__aeabi_dmul>
 800dd3c:	0002      	movs	r2, r0
 800dd3e:	000b      	movs	r3, r1
 800dd40:	0020      	movs	r0, r4
 800dd42:	0029      	movs	r1, r5
 800dd44:	f7f3 fc50 	bl	80015e8 <__aeabi_dadd>
 800dd48:	0004      	movs	r4, r0
 800dd4a:	000d      	movs	r5, r1
 800dd4c:	f7f5 fa7a 	bl	8003244 <__aeabi_d2iz>
 800dd50:	2200      	movs	r2, #0
 800dd52:	9004      	str	r0, [sp, #16]
 800dd54:	2300      	movs	r3, #0
 800dd56:	0020      	movs	r0, r4
 800dd58:	0029      	movs	r1, r5
 800dd5a:	f7f2 fb7d 	bl	8000458 <__aeabi_dcmplt>
 800dd5e:	2800      	cmp	r0, #0
 800dd60:	d00b      	beq.n	800dd7a <_dtoa_r+0x16a>
 800dd62:	9804      	ldr	r0, [sp, #16]
 800dd64:	f7f5 faaa 	bl	80032bc <__aeabi_i2d>
 800dd68:	002b      	movs	r3, r5
 800dd6a:	0022      	movs	r2, r4
 800dd6c:	f7f2 fb6e 	bl	800044c <__aeabi_dcmpeq>
 800dd70:	4243      	negs	r3, r0
 800dd72:	4158      	adcs	r0, r3
 800dd74:	9b04      	ldr	r3, [sp, #16]
 800dd76:	1a1b      	subs	r3, r3, r0
 800dd78:	9304      	str	r3, [sp, #16]
 800dd7a:	2301      	movs	r3, #1
 800dd7c:	9315      	str	r3, [sp, #84]	@ 0x54
 800dd7e:	9b04      	ldr	r3, [sp, #16]
 800dd80:	2b16      	cmp	r3, #22
 800dd82:	d810      	bhi.n	800dda6 <_dtoa_r+0x196>
 800dd84:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800dd86:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800dd88:	9a04      	ldr	r2, [sp, #16]
 800dd8a:	4b83      	ldr	r3, [pc, #524]	@ (800df98 <_dtoa_r+0x388>)
 800dd8c:	00d2      	lsls	r2, r2, #3
 800dd8e:	189b      	adds	r3, r3, r2
 800dd90:	681a      	ldr	r2, [r3, #0]
 800dd92:	685b      	ldr	r3, [r3, #4]
 800dd94:	f7f2 fb60 	bl	8000458 <__aeabi_dcmplt>
 800dd98:	2800      	cmp	r0, #0
 800dd9a:	d047      	beq.n	800de2c <_dtoa_r+0x21c>
 800dd9c:	9b04      	ldr	r3, [sp, #16]
 800dd9e:	3b01      	subs	r3, #1
 800dda0:	9304      	str	r3, [sp, #16]
 800dda2:	2300      	movs	r3, #0
 800dda4:	9315      	str	r3, [sp, #84]	@ 0x54
 800dda6:	2200      	movs	r2, #0
 800dda8:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800ddaa:	9206      	str	r2, [sp, #24]
 800ddac:	1bdb      	subs	r3, r3, r7
 800ddae:	1e5a      	subs	r2, r3, #1
 800ddb0:	d53e      	bpl.n	800de30 <_dtoa_r+0x220>
 800ddb2:	2201      	movs	r2, #1
 800ddb4:	1ad3      	subs	r3, r2, r3
 800ddb6:	9306      	str	r3, [sp, #24]
 800ddb8:	2300      	movs	r3, #0
 800ddba:	930d      	str	r3, [sp, #52]	@ 0x34
 800ddbc:	9b04      	ldr	r3, [sp, #16]
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	db38      	blt.n	800de34 <_dtoa_r+0x224>
 800ddc2:	9a04      	ldr	r2, [sp, #16]
 800ddc4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ddc6:	4694      	mov	ip, r2
 800ddc8:	4463      	add	r3, ip
 800ddca:	930d      	str	r3, [sp, #52]	@ 0x34
 800ddcc:	2300      	movs	r3, #0
 800ddce:	9214      	str	r2, [sp, #80]	@ 0x50
 800ddd0:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ddd2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800ddd4:	2401      	movs	r4, #1
 800ddd6:	2b09      	cmp	r3, #9
 800ddd8:	d867      	bhi.n	800deaa <_dtoa_r+0x29a>
 800ddda:	2b05      	cmp	r3, #5
 800dddc:	dd02      	ble.n	800dde4 <_dtoa_r+0x1d4>
 800ddde:	2400      	movs	r4, #0
 800dde0:	3b04      	subs	r3, #4
 800dde2:	9322      	str	r3, [sp, #136]	@ 0x88
 800dde4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800dde6:	1e98      	subs	r0, r3, #2
 800dde8:	2803      	cmp	r0, #3
 800ddea:	d867      	bhi.n	800debc <_dtoa_r+0x2ac>
 800ddec:	f7f2 f994 	bl	8000118 <__gnu_thumb1_case_uqi>
 800ddf0:	5b383a2b 	.word	0x5b383a2b
 800ddf4:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800ddf6:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 800ddf8:	18f6      	adds	r6, r6, r3
 800ddfa:	4b68      	ldr	r3, [pc, #416]	@ (800df9c <_dtoa_r+0x38c>)
 800ddfc:	18f2      	adds	r2, r6, r3
 800ddfe:	2a20      	cmp	r2, #32
 800de00:	dd0f      	ble.n	800de22 <_dtoa_r+0x212>
 800de02:	2340      	movs	r3, #64	@ 0x40
 800de04:	1a9b      	subs	r3, r3, r2
 800de06:	409f      	lsls	r7, r3
 800de08:	4b65      	ldr	r3, [pc, #404]	@ (800dfa0 <_dtoa_r+0x390>)
 800de0a:	0038      	movs	r0, r7
 800de0c:	18f3      	adds	r3, r6, r3
 800de0e:	40dc      	lsrs	r4, r3
 800de10:	4320      	orrs	r0, r4
 800de12:	f7f5 fa81 	bl	8003318 <__aeabi_ui2d>
 800de16:	2201      	movs	r2, #1
 800de18:	4b62      	ldr	r3, [pc, #392]	@ (800dfa4 <_dtoa_r+0x394>)
 800de1a:	1e77      	subs	r7, r6, #1
 800de1c:	18cb      	adds	r3, r1, r3
 800de1e:	9218      	str	r2, [sp, #96]	@ 0x60
 800de20:	e776      	b.n	800dd10 <_dtoa_r+0x100>
 800de22:	2320      	movs	r3, #32
 800de24:	0020      	movs	r0, r4
 800de26:	1a9b      	subs	r3, r3, r2
 800de28:	4098      	lsls	r0, r3
 800de2a:	e7f2      	b.n	800de12 <_dtoa_r+0x202>
 800de2c:	9015      	str	r0, [sp, #84]	@ 0x54
 800de2e:	e7ba      	b.n	800dda6 <_dtoa_r+0x196>
 800de30:	920d      	str	r2, [sp, #52]	@ 0x34
 800de32:	e7c3      	b.n	800ddbc <_dtoa_r+0x1ac>
 800de34:	9b06      	ldr	r3, [sp, #24]
 800de36:	9a04      	ldr	r2, [sp, #16]
 800de38:	1a9b      	subs	r3, r3, r2
 800de3a:	9306      	str	r3, [sp, #24]
 800de3c:	4253      	negs	r3, r2
 800de3e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800de40:	2300      	movs	r3, #0
 800de42:	9314      	str	r3, [sp, #80]	@ 0x50
 800de44:	e7c5      	b.n	800ddd2 <_dtoa_r+0x1c2>
 800de46:	2300      	movs	r3, #0
 800de48:	9310      	str	r3, [sp, #64]	@ 0x40
 800de4a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800de4c:	930e      	str	r3, [sp, #56]	@ 0x38
 800de4e:	9309      	str	r3, [sp, #36]	@ 0x24
 800de50:	2b00      	cmp	r3, #0
 800de52:	dc13      	bgt.n	800de7c <_dtoa_r+0x26c>
 800de54:	2301      	movs	r3, #1
 800de56:	001a      	movs	r2, r3
 800de58:	930e      	str	r3, [sp, #56]	@ 0x38
 800de5a:	9309      	str	r3, [sp, #36]	@ 0x24
 800de5c:	9223      	str	r2, [sp, #140]	@ 0x8c
 800de5e:	e00d      	b.n	800de7c <_dtoa_r+0x26c>
 800de60:	2301      	movs	r3, #1
 800de62:	e7f1      	b.n	800de48 <_dtoa_r+0x238>
 800de64:	2300      	movs	r3, #0
 800de66:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800de68:	9310      	str	r3, [sp, #64]	@ 0x40
 800de6a:	4694      	mov	ip, r2
 800de6c:	9b04      	ldr	r3, [sp, #16]
 800de6e:	4463      	add	r3, ip
 800de70:	930e      	str	r3, [sp, #56]	@ 0x38
 800de72:	3301      	adds	r3, #1
 800de74:	9309      	str	r3, [sp, #36]	@ 0x24
 800de76:	2b00      	cmp	r3, #0
 800de78:	dc00      	bgt.n	800de7c <_dtoa_r+0x26c>
 800de7a:	2301      	movs	r3, #1
 800de7c:	9a03      	ldr	r2, [sp, #12]
 800de7e:	2100      	movs	r1, #0
 800de80:	69d0      	ldr	r0, [r2, #28]
 800de82:	2204      	movs	r2, #4
 800de84:	0015      	movs	r5, r2
 800de86:	3514      	adds	r5, #20
 800de88:	429d      	cmp	r5, r3
 800de8a:	d91b      	bls.n	800dec4 <_dtoa_r+0x2b4>
 800de8c:	6041      	str	r1, [r0, #4]
 800de8e:	9803      	ldr	r0, [sp, #12]
 800de90:	f000 fdb8 	bl	800ea04 <_Balloc>
 800de94:	9008      	str	r0, [sp, #32]
 800de96:	2800      	cmp	r0, #0
 800de98:	d117      	bne.n	800deca <_dtoa_r+0x2ba>
 800de9a:	21b0      	movs	r1, #176	@ 0xb0
 800de9c:	4b42      	ldr	r3, [pc, #264]	@ (800dfa8 <_dtoa_r+0x398>)
 800de9e:	482e      	ldr	r0, [pc, #184]	@ (800df58 <_dtoa_r+0x348>)
 800dea0:	9a08      	ldr	r2, [sp, #32]
 800dea2:	31ff      	adds	r1, #255	@ 0xff
 800dea4:	e6c9      	b.n	800dc3a <_dtoa_r+0x2a>
 800dea6:	2301      	movs	r3, #1
 800dea8:	e7dd      	b.n	800de66 <_dtoa_r+0x256>
 800deaa:	2300      	movs	r3, #0
 800deac:	9410      	str	r4, [sp, #64]	@ 0x40
 800deae:	9322      	str	r3, [sp, #136]	@ 0x88
 800deb0:	3b01      	subs	r3, #1
 800deb2:	930e      	str	r3, [sp, #56]	@ 0x38
 800deb4:	9309      	str	r3, [sp, #36]	@ 0x24
 800deb6:	2200      	movs	r2, #0
 800deb8:	3313      	adds	r3, #19
 800deba:	e7cf      	b.n	800de5c <_dtoa_r+0x24c>
 800debc:	2301      	movs	r3, #1
 800debe:	9310      	str	r3, [sp, #64]	@ 0x40
 800dec0:	3b02      	subs	r3, #2
 800dec2:	e7f6      	b.n	800deb2 <_dtoa_r+0x2a2>
 800dec4:	3101      	adds	r1, #1
 800dec6:	0052      	lsls	r2, r2, #1
 800dec8:	e7dc      	b.n	800de84 <_dtoa_r+0x274>
 800deca:	9b03      	ldr	r3, [sp, #12]
 800decc:	9a08      	ldr	r2, [sp, #32]
 800dece:	69db      	ldr	r3, [r3, #28]
 800ded0:	601a      	str	r2, [r3, #0]
 800ded2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ded4:	2b0e      	cmp	r3, #14
 800ded6:	d900      	bls.n	800deda <_dtoa_r+0x2ca>
 800ded8:	e0d9      	b.n	800e08e <_dtoa_r+0x47e>
 800deda:	2c00      	cmp	r4, #0
 800dedc:	d100      	bne.n	800dee0 <_dtoa_r+0x2d0>
 800dede:	e0d6      	b.n	800e08e <_dtoa_r+0x47e>
 800dee0:	9b04      	ldr	r3, [sp, #16]
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	dd64      	ble.n	800dfb0 <_dtoa_r+0x3a0>
 800dee6:	210f      	movs	r1, #15
 800dee8:	9a04      	ldr	r2, [sp, #16]
 800deea:	4b2b      	ldr	r3, [pc, #172]	@ (800df98 <_dtoa_r+0x388>)
 800deec:	400a      	ands	r2, r1
 800deee:	00d2      	lsls	r2, r2, #3
 800def0:	189b      	adds	r3, r3, r2
 800def2:	681e      	ldr	r6, [r3, #0]
 800def4:	685f      	ldr	r7, [r3, #4]
 800def6:	9b04      	ldr	r3, [sp, #16]
 800def8:	2402      	movs	r4, #2
 800defa:	111d      	asrs	r5, r3, #4
 800defc:	05db      	lsls	r3, r3, #23
 800defe:	d50a      	bpl.n	800df16 <_dtoa_r+0x306>
 800df00:	4b2a      	ldr	r3, [pc, #168]	@ (800dfac <_dtoa_r+0x39c>)
 800df02:	400d      	ands	r5, r1
 800df04:	6a1a      	ldr	r2, [r3, #32]
 800df06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800df08:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800df0a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800df0c:	f7f3 fed0 	bl	8001cb0 <__aeabi_ddiv>
 800df10:	900a      	str	r0, [sp, #40]	@ 0x28
 800df12:	910b      	str	r1, [sp, #44]	@ 0x2c
 800df14:	3401      	adds	r4, #1
 800df16:	4b25      	ldr	r3, [pc, #148]	@ (800dfac <_dtoa_r+0x39c>)
 800df18:	930c      	str	r3, [sp, #48]	@ 0x30
 800df1a:	2d00      	cmp	r5, #0
 800df1c:	d108      	bne.n	800df30 <_dtoa_r+0x320>
 800df1e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800df20:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800df22:	0032      	movs	r2, r6
 800df24:	003b      	movs	r3, r7
 800df26:	f7f3 fec3 	bl	8001cb0 <__aeabi_ddiv>
 800df2a:	900a      	str	r0, [sp, #40]	@ 0x28
 800df2c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800df2e:	e05a      	b.n	800dfe6 <_dtoa_r+0x3d6>
 800df30:	2301      	movs	r3, #1
 800df32:	421d      	tst	r5, r3
 800df34:	d009      	beq.n	800df4a <_dtoa_r+0x33a>
 800df36:	18e4      	adds	r4, r4, r3
 800df38:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800df3a:	0030      	movs	r0, r6
 800df3c:	681a      	ldr	r2, [r3, #0]
 800df3e:	685b      	ldr	r3, [r3, #4]
 800df40:	0039      	movs	r1, r7
 800df42:	f7f4 faf9 	bl	8002538 <__aeabi_dmul>
 800df46:	0006      	movs	r6, r0
 800df48:	000f      	movs	r7, r1
 800df4a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800df4c:	106d      	asrs	r5, r5, #1
 800df4e:	3308      	adds	r3, #8
 800df50:	e7e2      	b.n	800df18 <_dtoa_r+0x308>
 800df52:	46c0      	nop			@ (mov r8, r8)
 800df54:	08010781 	.word	0x08010781
 800df58:	08010798 	.word	0x08010798
 800df5c:	7ff00000 	.word	0x7ff00000
 800df60:	0000270f 	.word	0x0000270f
 800df64:	0801077d 	.word	0x0801077d
 800df68:	08010780 	.word	0x08010780
 800df6c:	08010751 	.word	0x08010751
 800df70:	08010750 	.word	0x08010750
 800df74:	3ff00000 	.word	0x3ff00000
 800df78:	fffffc01 	.word	0xfffffc01
 800df7c:	3ff80000 	.word	0x3ff80000
 800df80:	636f4361 	.word	0x636f4361
 800df84:	3fd287a7 	.word	0x3fd287a7
 800df88:	8b60c8b3 	.word	0x8b60c8b3
 800df8c:	3fc68a28 	.word	0x3fc68a28
 800df90:	509f79fb 	.word	0x509f79fb
 800df94:	3fd34413 	.word	0x3fd34413
 800df98:	08010890 	.word	0x08010890
 800df9c:	00000432 	.word	0x00000432
 800dfa0:	00000412 	.word	0x00000412
 800dfa4:	fe100000 	.word	0xfe100000
 800dfa8:	080107f0 	.word	0x080107f0
 800dfac:	08010868 	.word	0x08010868
 800dfb0:	9b04      	ldr	r3, [sp, #16]
 800dfb2:	2402      	movs	r4, #2
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d016      	beq.n	800dfe6 <_dtoa_r+0x3d6>
 800dfb8:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800dfba:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800dfbc:	220f      	movs	r2, #15
 800dfbe:	425d      	negs	r5, r3
 800dfc0:	402a      	ands	r2, r5
 800dfc2:	4bd7      	ldr	r3, [pc, #860]	@ (800e320 <_dtoa_r+0x710>)
 800dfc4:	00d2      	lsls	r2, r2, #3
 800dfc6:	189b      	adds	r3, r3, r2
 800dfc8:	681a      	ldr	r2, [r3, #0]
 800dfca:	685b      	ldr	r3, [r3, #4]
 800dfcc:	f7f4 fab4 	bl	8002538 <__aeabi_dmul>
 800dfd0:	2701      	movs	r7, #1
 800dfd2:	2300      	movs	r3, #0
 800dfd4:	900a      	str	r0, [sp, #40]	@ 0x28
 800dfd6:	910b      	str	r1, [sp, #44]	@ 0x2c
 800dfd8:	4ed2      	ldr	r6, [pc, #840]	@ (800e324 <_dtoa_r+0x714>)
 800dfda:	112d      	asrs	r5, r5, #4
 800dfdc:	2d00      	cmp	r5, #0
 800dfde:	d000      	beq.n	800dfe2 <_dtoa_r+0x3d2>
 800dfe0:	e0ba      	b.n	800e158 <_dtoa_r+0x548>
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	d1a1      	bne.n	800df2a <_dtoa_r+0x31a>
 800dfe6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800dfe8:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800dfea:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	d100      	bne.n	800dff2 <_dtoa_r+0x3e2>
 800dff0:	e0bd      	b.n	800e16e <_dtoa_r+0x55e>
 800dff2:	2200      	movs	r2, #0
 800dff4:	0030      	movs	r0, r6
 800dff6:	0039      	movs	r1, r7
 800dff8:	4bcb      	ldr	r3, [pc, #812]	@ (800e328 <_dtoa_r+0x718>)
 800dffa:	f7f2 fa2d 	bl	8000458 <__aeabi_dcmplt>
 800dffe:	2800      	cmp	r0, #0
 800e000:	d100      	bne.n	800e004 <_dtoa_r+0x3f4>
 800e002:	e0b4      	b.n	800e16e <_dtoa_r+0x55e>
 800e004:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e006:	2b00      	cmp	r3, #0
 800e008:	d100      	bne.n	800e00c <_dtoa_r+0x3fc>
 800e00a:	e0b0      	b.n	800e16e <_dtoa_r+0x55e>
 800e00c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e00e:	2b00      	cmp	r3, #0
 800e010:	dd39      	ble.n	800e086 <_dtoa_r+0x476>
 800e012:	9b04      	ldr	r3, [sp, #16]
 800e014:	2200      	movs	r2, #0
 800e016:	3b01      	subs	r3, #1
 800e018:	930c      	str	r3, [sp, #48]	@ 0x30
 800e01a:	0030      	movs	r0, r6
 800e01c:	4bc3      	ldr	r3, [pc, #780]	@ (800e32c <_dtoa_r+0x71c>)
 800e01e:	0039      	movs	r1, r7
 800e020:	f7f4 fa8a 	bl	8002538 <__aeabi_dmul>
 800e024:	900a      	str	r0, [sp, #40]	@ 0x28
 800e026:	910b      	str	r1, [sp, #44]	@ 0x2c
 800e028:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e02a:	3401      	adds	r4, #1
 800e02c:	0020      	movs	r0, r4
 800e02e:	9311      	str	r3, [sp, #68]	@ 0x44
 800e030:	f7f5 f944 	bl	80032bc <__aeabi_i2d>
 800e034:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e036:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e038:	f7f4 fa7e 	bl	8002538 <__aeabi_dmul>
 800e03c:	4bbc      	ldr	r3, [pc, #752]	@ (800e330 <_dtoa_r+0x720>)
 800e03e:	2200      	movs	r2, #0
 800e040:	f7f3 fad2 	bl	80015e8 <__aeabi_dadd>
 800e044:	4bbb      	ldr	r3, [pc, #748]	@ (800e334 <_dtoa_r+0x724>)
 800e046:	0006      	movs	r6, r0
 800e048:	18cf      	adds	r7, r1, r3
 800e04a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	d000      	beq.n	800e052 <_dtoa_r+0x442>
 800e050:	e091      	b.n	800e176 <_dtoa_r+0x566>
 800e052:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800e054:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e056:	2200      	movs	r2, #0
 800e058:	4bb7      	ldr	r3, [pc, #732]	@ (800e338 <_dtoa_r+0x728>)
 800e05a:	f7f4 fd35 	bl	8002ac8 <__aeabi_dsub>
 800e05e:	0032      	movs	r2, r6
 800e060:	003b      	movs	r3, r7
 800e062:	0004      	movs	r4, r0
 800e064:	000d      	movs	r5, r1
 800e066:	f7f2 fa0b 	bl	8000480 <__aeabi_dcmpgt>
 800e06a:	2800      	cmp	r0, #0
 800e06c:	d000      	beq.n	800e070 <_dtoa_r+0x460>
 800e06e:	e29d      	b.n	800e5ac <_dtoa_r+0x99c>
 800e070:	2180      	movs	r1, #128	@ 0x80
 800e072:	0609      	lsls	r1, r1, #24
 800e074:	187b      	adds	r3, r7, r1
 800e076:	0032      	movs	r2, r6
 800e078:	0020      	movs	r0, r4
 800e07a:	0029      	movs	r1, r5
 800e07c:	f7f2 f9ec 	bl	8000458 <__aeabi_dcmplt>
 800e080:	2800      	cmp	r0, #0
 800e082:	d000      	beq.n	800e086 <_dtoa_r+0x476>
 800e084:	e130      	b.n	800e2e8 <_dtoa_r+0x6d8>
 800e086:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e088:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 800e08a:	930a      	str	r3, [sp, #40]	@ 0x28
 800e08c:	940b      	str	r4, [sp, #44]	@ 0x2c
 800e08e:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800e090:	2b00      	cmp	r3, #0
 800e092:	da00      	bge.n	800e096 <_dtoa_r+0x486>
 800e094:	e177      	b.n	800e386 <_dtoa_r+0x776>
 800e096:	9a04      	ldr	r2, [sp, #16]
 800e098:	2a0e      	cmp	r2, #14
 800e09a:	dd00      	ble.n	800e09e <_dtoa_r+0x48e>
 800e09c:	e173      	b.n	800e386 <_dtoa_r+0x776>
 800e09e:	4ba0      	ldr	r3, [pc, #640]	@ (800e320 <_dtoa_r+0x710>)
 800e0a0:	00d2      	lsls	r2, r2, #3
 800e0a2:	189b      	adds	r3, r3, r2
 800e0a4:	685c      	ldr	r4, [r3, #4]
 800e0a6:	681b      	ldr	r3, [r3, #0]
 800e0a8:	9306      	str	r3, [sp, #24]
 800e0aa:	9407      	str	r4, [sp, #28]
 800e0ac:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	da03      	bge.n	800e0ba <_dtoa_r+0x4aa>
 800e0b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	dc00      	bgt.n	800e0ba <_dtoa_r+0x4aa>
 800e0b8:	e106      	b.n	800e2c8 <_dtoa_r+0x6b8>
 800e0ba:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800e0bc:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800e0be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e0c0:	9d08      	ldr	r5, [sp, #32]
 800e0c2:	3b01      	subs	r3, #1
 800e0c4:	195b      	adds	r3, r3, r5
 800e0c6:	930a      	str	r3, [sp, #40]	@ 0x28
 800e0c8:	9a06      	ldr	r2, [sp, #24]
 800e0ca:	9b07      	ldr	r3, [sp, #28]
 800e0cc:	0030      	movs	r0, r6
 800e0ce:	0039      	movs	r1, r7
 800e0d0:	f7f3 fdee 	bl	8001cb0 <__aeabi_ddiv>
 800e0d4:	f7f5 f8b6 	bl	8003244 <__aeabi_d2iz>
 800e0d8:	9009      	str	r0, [sp, #36]	@ 0x24
 800e0da:	f7f5 f8ef 	bl	80032bc <__aeabi_i2d>
 800e0de:	9a06      	ldr	r2, [sp, #24]
 800e0e0:	9b07      	ldr	r3, [sp, #28]
 800e0e2:	f7f4 fa29 	bl	8002538 <__aeabi_dmul>
 800e0e6:	0002      	movs	r2, r0
 800e0e8:	000b      	movs	r3, r1
 800e0ea:	0030      	movs	r0, r6
 800e0ec:	0039      	movs	r1, r7
 800e0ee:	f7f4 fceb 	bl	8002ac8 <__aeabi_dsub>
 800e0f2:	002b      	movs	r3, r5
 800e0f4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e0f6:	3501      	adds	r5, #1
 800e0f8:	3230      	adds	r2, #48	@ 0x30
 800e0fa:	701a      	strb	r2, [r3, #0]
 800e0fc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e0fe:	002c      	movs	r4, r5
 800e100:	429a      	cmp	r2, r3
 800e102:	d000      	beq.n	800e106 <_dtoa_r+0x4f6>
 800e104:	e131      	b.n	800e36a <_dtoa_r+0x75a>
 800e106:	0002      	movs	r2, r0
 800e108:	000b      	movs	r3, r1
 800e10a:	f7f3 fa6d 	bl	80015e8 <__aeabi_dadd>
 800e10e:	9a06      	ldr	r2, [sp, #24]
 800e110:	9b07      	ldr	r3, [sp, #28]
 800e112:	0006      	movs	r6, r0
 800e114:	000f      	movs	r7, r1
 800e116:	f7f2 f9b3 	bl	8000480 <__aeabi_dcmpgt>
 800e11a:	2800      	cmp	r0, #0
 800e11c:	d000      	beq.n	800e120 <_dtoa_r+0x510>
 800e11e:	e10f      	b.n	800e340 <_dtoa_r+0x730>
 800e120:	9a06      	ldr	r2, [sp, #24]
 800e122:	9b07      	ldr	r3, [sp, #28]
 800e124:	0030      	movs	r0, r6
 800e126:	0039      	movs	r1, r7
 800e128:	f7f2 f990 	bl	800044c <__aeabi_dcmpeq>
 800e12c:	2800      	cmp	r0, #0
 800e12e:	d003      	beq.n	800e138 <_dtoa_r+0x528>
 800e130:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e132:	07dd      	lsls	r5, r3, #31
 800e134:	d500      	bpl.n	800e138 <_dtoa_r+0x528>
 800e136:	e103      	b.n	800e340 <_dtoa_r+0x730>
 800e138:	9905      	ldr	r1, [sp, #20]
 800e13a:	9803      	ldr	r0, [sp, #12]
 800e13c:	f000 fca6 	bl	800ea8c <_Bfree>
 800e140:	2300      	movs	r3, #0
 800e142:	7023      	strb	r3, [r4, #0]
 800e144:	9b04      	ldr	r3, [sp, #16]
 800e146:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800e148:	3301      	adds	r3, #1
 800e14a:	6013      	str	r3, [r2, #0]
 800e14c:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800e14e:	2b00      	cmp	r3, #0
 800e150:	d100      	bne.n	800e154 <_dtoa_r+0x544>
 800e152:	e5a7      	b.n	800dca4 <_dtoa_r+0x94>
 800e154:	601c      	str	r4, [r3, #0]
 800e156:	e5a5      	b.n	800dca4 <_dtoa_r+0x94>
 800e158:	423d      	tst	r5, r7
 800e15a:	d005      	beq.n	800e168 <_dtoa_r+0x558>
 800e15c:	6832      	ldr	r2, [r6, #0]
 800e15e:	6873      	ldr	r3, [r6, #4]
 800e160:	f7f4 f9ea 	bl	8002538 <__aeabi_dmul>
 800e164:	003b      	movs	r3, r7
 800e166:	3401      	adds	r4, #1
 800e168:	106d      	asrs	r5, r5, #1
 800e16a:	3608      	adds	r6, #8
 800e16c:	e736      	b.n	800dfdc <_dtoa_r+0x3cc>
 800e16e:	9b04      	ldr	r3, [sp, #16]
 800e170:	930c      	str	r3, [sp, #48]	@ 0x30
 800e172:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e174:	e75a      	b.n	800e02c <_dtoa_r+0x41c>
 800e176:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800e178:	4b69      	ldr	r3, [pc, #420]	@ (800e320 <_dtoa_r+0x710>)
 800e17a:	3a01      	subs	r2, #1
 800e17c:	00d2      	lsls	r2, r2, #3
 800e17e:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800e180:	189b      	adds	r3, r3, r2
 800e182:	681a      	ldr	r2, [r3, #0]
 800e184:	685b      	ldr	r3, [r3, #4]
 800e186:	2900      	cmp	r1, #0
 800e188:	d04c      	beq.n	800e224 <_dtoa_r+0x614>
 800e18a:	2000      	movs	r0, #0
 800e18c:	496b      	ldr	r1, [pc, #428]	@ (800e33c <_dtoa_r+0x72c>)
 800e18e:	f7f3 fd8f 	bl	8001cb0 <__aeabi_ddiv>
 800e192:	0032      	movs	r2, r6
 800e194:	003b      	movs	r3, r7
 800e196:	f7f4 fc97 	bl	8002ac8 <__aeabi_dsub>
 800e19a:	9a08      	ldr	r2, [sp, #32]
 800e19c:	0006      	movs	r6, r0
 800e19e:	4694      	mov	ip, r2
 800e1a0:	000f      	movs	r7, r1
 800e1a2:	9b08      	ldr	r3, [sp, #32]
 800e1a4:	9316      	str	r3, [sp, #88]	@ 0x58
 800e1a6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e1a8:	4463      	add	r3, ip
 800e1aa:	9311      	str	r3, [sp, #68]	@ 0x44
 800e1ac:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800e1ae:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e1b0:	f7f5 f848 	bl	8003244 <__aeabi_d2iz>
 800e1b4:	0005      	movs	r5, r0
 800e1b6:	f7f5 f881 	bl	80032bc <__aeabi_i2d>
 800e1ba:	0002      	movs	r2, r0
 800e1bc:	000b      	movs	r3, r1
 800e1be:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800e1c0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e1c2:	f7f4 fc81 	bl	8002ac8 <__aeabi_dsub>
 800e1c6:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800e1c8:	3530      	adds	r5, #48	@ 0x30
 800e1ca:	1c5c      	adds	r4, r3, #1
 800e1cc:	701d      	strb	r5, [r3, #0]
 800e1ce:	0032      	movs	r2, r6
 800e1d0:	003b      	movs	r3, r7
 800e1d2:	900a      	str	r0, [sp, #40]	@ 0x28
 800e1d4:	910b      	str	r1, [sp, #44]	@ 0x2c
 800e1d6:	f7f2 f93f 	bl	8000458 <__aeabi_dcmplt>
 800e1da:	2800      	cmp	r0, #0
 800e1dc:	d16a      	bne.n	800e2b4 <_dtoa_r+0x6a4>
 800e1de:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e1e0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e1e2:	2000      	movs	r0, #0
 800e1e4:	4950      	ldr	r1, [pc, #320]	@ (800e328 <_dtoa_r+0x718>)
 800e1e6:	f7f4 fc6f 	bl	8002ac8 <__aeabi_dsub>
 800e1ea:	0032      	movs	r2, r6
 800e1ec:	003b      	movs	r3, r7
 800e1ee:	f7f2 f933 	bl	8000458 <__aeabi_dcmplt>
 800e1f2:	2800      	cmp	r0, #0
 800e1f4:	d000      	beq.n	800e1f8 <_dtoa_r+0x5e8>
 800e1f6:	e0a5      	b.n	800e344 <_dtoa_r+0x734>
 800e1f8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e1fa:	42a3      	cmp	r3, r4
 800e1fc:	d100      	bne.n	800e200 <_dtoa_r+0x5f0>
 800e1fe:	e742      	b.n	800e086 <_dtoa_r+0x476>
 800e200:	2200      	movs	r2, #0
 800e202:	0030      	movs	r0, r6
 800e204:	0039      	movs	r1, r7
 800e206:	4b49      	ldr	r3, [pc, #292]	@ (800e32c <_dtoa_r+0x71c>)
 800e208:	f7f4 f996 	bl	8002538 <__aeabi_dmul>
 800e20c:	2200      	movs	r2, #0
 800e20e:	0006      	movs	r6, r0
 800e210:	000f      	movs	r7, r1
 800e212:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800e214:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e216:	4b45      	ldr	r3, [pc, #276]	@ (800e32c <_dtoa_r+0x71c>)
 800e218:	f7f4 f98e 	bl	8002538 <__aeabi_dmul>
 800e21c:	9416      	str	r4, [sp, #88]	@ 0x58
 800e21e:	900a      	str	r0, [sp, #40]	@ 0x28
 800e220:	910b      	str	r1, [sp, #44]	@ 0x2c
 800e222:	e7c3      	b.n	800e1ac <_dtoa_r+0x59c>
 800e224:	0030      	movs	r0, r6
 800e226:	0039      	movs	r1, r7
 800e228:	f7f4 f986 	bl	8002538 <__aeabi_dmul>
 800e22c:	9d08      	ldr	r5, [sp, #32]
 800e22e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800e230:	002b      	movs	r3, r5
 800e232:	4694      	mov	ip, r2
 800e234:	9016      	str	r0, [sp, #88]	@ 0x58
 800e236:	9117      	str	r1, [sp, #92]	@ 0x5c
 800e238:	4463      	add	r3, ip
 800e23a:	9319      	str	r3, [sp, #100]	@ 0x64
 800e23c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800e23e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e240:	f7f5 f800 	bl	8003244 <__aeabi_d2iz>
 800e244:	0004      	movs	r4, r0
 800e246:	f7f5 f839 	bl	80032bc <__aeabi_i2d>
 800e24a:	000b      	movs	r3, r1
 800e24c:	0002      	movs	r2, r0
 800e24e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800e250:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e252:	f7f4 fc39 	bl	8002ac8 <__aeabi_dsub>
 800e256:	3430      	adds	r4, #48	@ 0x30
 800e258:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e25a:	702c      	strb	r4, [r5, #0]
 800e25c:	3501      	adds	r5, #1
 800e25e:	0006      	movs	r6, r0
 800e260:	000f      	movs	r7, r1
 800e262:	42ab      	cmp	r3, r5
 800e264:	d129      	bne.n	800e2ba <_dtoa_r+0x6aa>
 800e266:	9816      	ldr	r0, [sp, #88]	@ 0x58
 800e268:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 800e26a:	9b08      	ldr	r3, [sp, #32]
 800e26c:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 800e26e:	469c      	mov	ip, r3
 800e270:	2200      	movs	r2, #0
 800e272:	4b32      	ldr	r3, [pc, #200]	@ (800e33c <_dtoa_r+0x72c>)
 800e274:	4464      	add	r4, ip
 800e276:	f7f3 f9b7 	bl	80015e8 <__aeabi_dadd>
 800e27a:	0002      	movs	r2, r0
 800e27c:	000b      	movs	r3, r1
 800e27e:	0030      	movs	r0, r6
 800e280:	0039      	movs	r1, r7
 800e282:	f7f2 f8fd 	bl	8000480 <__aeabi_dcmpgt>
 800e286:	2800      	cmp	r0, #0
 800e288:	d15c      	bne.n	800e344 <_dtoa_r+0x734>
 800e28a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800e28c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e28e:	2000      	movs	r0, #0
 800e290:	492a      	ldr	r1, [pc, #168]	@ (800e33c <_dtoa_r+0x72c>)
 800e292:	f7f4 fc19 	bl	8002ac8 <__aeabi_dsub>
 800e296:	0002      	movs	r2, r0
 800e298:	000b      	movs	r3, r1
 800e29a:	0030      	movs	r0, r6
 800e29c:	0039      	movs	r1, r7
 800e29e:	f7f2 f8db 	bl	8000458 <__aeabi_dcmplt>
 800e2a2:	2800      	cmp	r0, #0
 800e2a4:	d100      	bne.n	800e2a8 <_dtoa_r+0x698>
 800e2a6:	e6ee      	b.n	800e086 <_dtoa_r+0x476>
 800e2a8:	0023      	movs	r3, r4
 800e2aa:	3c01      	subs	r4, #1
 800e2ac:	7822      	ldrb	r2, [r4, #0]
 800e2ae:	2a30      	cmp	r2, #48	@ 0x30
 800e2b0:	d0fa      	beq.n	800e2a8 <_dtoa_r+0x698>
 800e2b2:	001c      	movs	r4, r3
 800e2b4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e2b6:	9304      	str	r3, [sp, #16]
 800e2b8:	e73e      	b.n	800e138 <_dtoa_r+0x528>
 800e2ba:	2200      	movs	r2, #0
 800e2bc:	4b1b      	ldr	r3, [pc, #108]	@ (800e32c <_dtoa_r+0x71c>)
 800e2be:	f7f4 f93b 	bl	8002538 <__aeabi_dmul>
 800e2c2:	900a      	str	r0, [sp, #40]	@ 0x28
 800e2c4:	910b      	str	r1, [sp, #44]	@ 0x2c
 800e2c6:	e7b9      	b.n	800e23c <_dtoa_r+0x62c>
 800e2c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	d10c      	bne.n	800e2e8 <_dtoa_r+0x6d8>
 800e2ce:	9806      	ldr	r0, [sp, #24]
 800e2d0:	9907      	ldr	r1, [sp, #28]
 800e2d2:	2200      	movs	r2, #0
 800e2d4:	4b18      	ldr	r3, [pc, #96]	@ (800e338 <_dtoa_r+0x728>)
 800e2d6:	f7f4 f92f 	bl	8002538 <__aeabi_dmul>
 800e2da:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e2dc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e2de:	f7f2 f8d9 	bl	8000494 <__aeabi_dcmpge>
 800e2e2:	2800      	cmp	r0, #0
 800e2e4:	d100      	bne.n	800e2e8 <_dtoa_r+0x6d8>
 800e2e6:	e164      	b.n	800e5b2 <_dtoa_r+0x9a2>
 800e2e8:	2600      	movs	r6, #0
 800e2ea:	0037      	movs	r7, r6
 800e2ec:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e2ee:	9c08      	ldr	r4, [sp, #32]
 800e2f0:	43db      	mvns	r3, r3
 800e2f2:	930c      	str	r3, [sp, #48]	@ 0x30
 800e2f4:	2300      	movs	r3, #0
 800e2f6:	9304      	str	r3, [sp, #16]
 800e2f8:	0031      	movs	r1, r6
 800e2fa:	9803      	ldr	r0, [sp, #12]
 800e2fc:	f000 fbc6 	bl	800ea8c <_Bfree>
 800e300:	2f00      	cmp	r7, #0
 800e302:	d0d7      	beq.n	800e2b4 <_dtoa_r+0x6a4>
 800e304:	9b04      	ldr	r3, [sp, #16]
 800e306:	2b00      	cmp	r3, #0
 800e308:	d005      	beq.n	800e316 <_dtoa_r+0x706>
 800e30a:	42bb      	cmp	r3, r7
 800e30c:	d003      	beq.n	800e316 <_dtoa_r+0x706>
 800e30e:	0019      	movs	r1, r3
 800e310:	9803      	ldr	r0, [sp, #12]
 800e312:	f000 fbbb 	bl	800ea8c <_Bfree>
 800e316:	0039      	movs	r1, r7
 800e318:	9803      	ldr	r0, [sp, #12]
 800e31a:	f000 fbb7 	bl	800ea8c <_Bfree>
 800e31e:	e7c9      	b.n	800e2b4 <_dtoa_r+0x6a4>
 800e320:	08010890 	.word	0x08010890
 800e324:	08010868 	.word	0x08010868
 800e328:	3ff00000 	.word	0x3ff00000
 800e32c:	40240000 	.word	0x40240000
 800e330:	401c0000 	.word	0x401c0000
 800e334:	fcc00000 	.word	0xfcc00000
 800e338:	40140000 	.word	0x40140000
 800e33c:	3fe00000 	.word	0x3fe00000
 800e340:	9b04      	ldr	r3, [sp, #16]
 800e342:	930c      	str	r3, [sp, #48]	@ 0x30
 800e344:	0023      	movs	r3, r4
 800e346:	001c      	movs	r4, r3
 800e348:	3b01      	subs	r3, #1
 800e34a:	781a      	ldrb	r2, [r3, #0]
 800e34c:	2a39      	cmp	r2, #57	@ 0x39
 800e34e:	d108      	bne.n	800e362 <_dtoa_r+0x752>
 800e350:	9a08      	ldr	r2, [sp, #32]
 800e352:	429a      	cmp	r2, r3
 800e354:	d1f7      	bne.n	800e346 <_dtoa_r+0x736>
 800e356:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800e358:	9908      	ldr	r1, [sp, #32]
 800e35a:	3201      	adds	r2, #1
 800e35c:	920c      	str	r2, [sp, #48]	@ 0x30
 800e35e:	2230      	movs	r2, #48	@ 0x30
 800e360:	700a      	strb	r2, [r1, #0]
 800e362:	781a      	ldrb	r2, [r3, #0]
 800e364:	3201      	adds	r2, #1
 800e366:	701a      	strb	r2, [r3, #0]
 800e368:	e7a4      	b.n	800e2b4 <_dtoa_r+0x6a4>
 800e36a:	2200      	movs	r2, #0
 800e36c:	4bc6      	ldr	r3, [pc, #792]	@ (800e688 <_dtoa_r+0xa78>)
 800e36e:	f7f4 f8e3 	bl	8002538 <__aeabi_dmul>
 800e372:	2200      	movs	r2, #0
 800e374:	2300      	movs	r3, #0
 800e376:	0006      	movs	r6, r0
 800e378:	000f      	movs	r7, r1
 800e37a:	f7f2 f867 	bl	800044c <__aeabi_dcmpeq>
 800e37e:	2800      	cmp	r0, #0
 800e380:	d100      	bne.n	800e384 <_dtoa_r+0x774>
 800e382:	e6a1      	b.n	800e0c8 <_dtoa_r+0x4b8>
 800e384:	e6d8      	b.n	800e138 <_dtoa_r+0x528>
 800e386:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 800e388:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 800e38a:	9c06      	ldr	r4, [sp, #24]
 800e38c:	2f00      	cmp	r7, #0
 800e38e:	d014      	beq.n	800e3ba <_dtoa_r+0x7aa>
 800e390:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800e392:	2a01      	cmp	r2, #1
 800e394:	dd00      	ble.n	800e398 <_dtoa_r+0x788>
 800e396:	e0c8      	b.n	800e52a <_dtoa_r+0x91a>
 800e398:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800e39a:	2a00      	cmp	r2, #0
 800e39c:	d100      	bne.n	800e3a0 <_dtoa_r+0x790>
 800e39e:	e0be      	b.n	800e51e <_dtoa_r+0x90e>
 800e3a0:	4aba      	ldr	r2, [pc, #744]	@ (800e68c <_dtoa_r+0xa7c>)
 800e3a2:	189b      	adds	r3, r3, r2
 800e3a4:	9a06      	ldr	r2, [sp, #24]
 800e3a6:	2101      	movs	r1, #1
 800e3a8:	18d2      	adds	r2, r2, r3
 800e3aa:	9206      	str	r2, [sp, #24]
 800e3ac:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e3ae:	9803      	ldr	r0, [sp, #12]
 800e3b0:	18d3      	adds	r3, r2, r3
 800e3b2:	930d      	str	r3, [sp, #52]	@ 0x34
 800e3b4:	f000 fc22 	bl	800ebfc <__i2b>
 800e3b8:	0007      	movs	r7, r0
 800e3ba:	2c00      	cmp	r4, #0
 800e3bc:	d00e      	beq.n	800e3dc <_dtoa_r+0x7cc>
 800e3be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	dd0b      	ble.n	800e3dc <_dtoa_r+0x7cc>
 800e3c4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e3c6:	0023      	movs	r3, r4
 800e3c8:	4294      	cmp	r4, r2
 800e3ca:	dd00      	ble.n	800e3ce <_dtoa_r+0x7be>
 800e3cc:	0013      	movs	r3, r2
 800e3ce:	9a06      	ldr	r2, [sp, #24]
 800e3d0:	1ae4      	subs	r4, r4, r3
 800e3d2:	1ad2      	subs	r2, r2, r3
 800e3d4:	9206      	str	r2, [sp, #24]
 800e3d6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e3d8:	1ad3      	subs	r3, r2, r3
 800e3da:	930d      	str	r3, [sp, #52]	@ 0x34
 800e3dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	d01f      	beq.n	800e422 <_dtoa_r+0x812>
 800e3e2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	d100      	bne.n	800e3ea <_dtoa_r+0x7da>
 800e3e8:	e0b5      	b.n	800e556 <_dtoa_r+0x946>
 800e3ea:	2d00      	cmp	r5, #0
 800e3ec:	d010      	beq.n	800e410 <_dtoa_r+0x800>
 800e3ee:	0039      	movs	r1, r7
 800e3f0:	002a      	movs	r2, r5
 800e3f2:	9803      	ldr	r0, [sp, #12]
 800e3f4:	f000 fccc 	bl	800ed90 <__pow5mult>
 800e3f8:	9a05      	ldr	r2, [sp, #20]
 800e3fa:	0001      	movs	r1, r0
 800e3fc:	0007      	movs	r7, r0
 800e3fe:	9803      	ldr	r0, [sp, #12]
 800e400:	f000 fc14 	bl	800ec2c <__multiply>
 800e404:	0006      	movs	r6, r0
 800e406:	9905      	ldr	r1, [sp, #20]
 800e408:	9803      	ldr	r0, [sp, #12]
 800e40a:	f000 fb3f 	bl	800ea8c <_Bfree>
 800e40e:	9605      	str	r6, [sp, #20]
 800e410:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e412:	1b5a      	subs	r2, r3, r5
 800e414:	42ab      	cmp	r3, r5
 800e416:	d004      	beq.n	800e422 <_dtoa_r+0x812>
 800e418:	9905      	ldr	r1, [sp, #20]
 800e41a:	9803      	ldr	r0, [sp, #12]
 800e41c:	f000 fcb8 	bl	800ed90 <__pow5mult>
 800e420:	9005      	str	r0, [sp, #20]
 800e422:	2101      	movs	r1, #1
 800e424:	9803      	ldr	r0, [sp, #12]
 800e426:	f000 fbe9 	bl	800ebfc <__i2b>
 800e42a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800e42c:	0006      	movs	r6, r0
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d100      	bne.n	800e434 <_dtoa_r+0x824>
 800e432:	e1bc      	b.n	800e7ae <_dtoa_r+0xb9e>
 800e434:	001a      	movs	r2, r3
 800e436:	0001      	movs	r1, r0
 800e438:	9803      	ldr	r0, [sp, #12]
 800e43a:	f000 fca9 	bl	800ed90 <__pow5mult>
 800e43e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800e440:	0006      	movs	r6, r0
 800e442:	2500      	movs	r5, #0
 800e444:	2b01      	cmp	r3, #1
 800e446:	dc16      	bgt.n	800e476 <_dtoa_r+0x866>
 800e448:	2500      	movs	r5, #0
 800e44a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e44c:	42ab      	cmp	r3, r5
 800e44e:	d10e      	bne.n	800e46e <_dtoa_r+0x85e>
 800e450:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e452:	031b      	lsls	r3, r3, #12
 800e454:	42ab      	cmp	r3, r5
 800e456:	d10a      	bne.n	800e46e <_dtoa_r+0x85e>
 800e458:	4b8d      	ldr	r3, [pc, #564]	@ (800e690 <_dtoa_r+0xa80>)
 800e45a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800e45c:	4213      	tst	r3, r2
 800e45e:	d006      	beq.n	800e46e <_dtoa_r+0x85e>
 800e460:	9b06      	ldr	r3, [sp, #24]
 800e462:	3501      	adds	r5, #1
 800e464:	3301      	adds	r3, #1
 800e466:	9306      	str	r3, [sp, #24]
 800e468:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e46a:	3301      	adds	r3, #1
 800e46c:	930d      	str	r3, [sp, #52]	@ 0x34
 800e46e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800e470:	2001      	movs	r0, #1
 800e472:	2b00      	cmp	r3, #0
 800e474:	d008      	beq.n	800e488 <_dtoa_r+0x878>
 800e476:	6933      	ldr	r3, [r6, #16]
 800e478:	3303      	adds	r3, #3
 800e47a:	009b      	lsls	r3, r3, #2
 800e47c:	18f3      	adds	r3, r6, r3
 800e47e:	6858      	ldr	r0, [r3, #4]
 800e480:	f000 fb6c 	bl	800eb5c <__hi0bits>
 800e484:	2320      	movs	r3, #32
 800e486:	1a18      	subs	r0, r3, r0
 800e488:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e48a:	1818      	adds	r0, r3, r0
 800e48c:	0002      	movs	r2, r0
 800e48e:	231f      	movs	r3, #31
 800e490:	401a      	ands	r2, r3
 800e492:	4218      	tst	r0, r3
 800e494:	d065      	beq.n	800e562 <_dtoa_r+0x952>
 800e496:	3301      	adds	r3, #1
 800e498:	1a9b      	subs	r3, r3, r2
 800e49a:	2b04      	cmp	r3, #4
 800e49c:	dd5d      	ble.n	800e55a <_dtoa_r+0x94a>
 800e49e:	231c      	movs	r3, #28
 800e4a0:	1a9b      	subs	r3, r3, r2
 800e4a2:	9a06      	ldr	r2, [sp, #24]
 800e4a4:	18e4      	adds	r4, r4, r3
 800e4a6:	18d2      	adds	r2, r2, r3
 800e4a8:	9206      	str	r2, [sp, #24]
 800e4aa:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e4ac:	18d3      	adds	r3, r2, r3
 800e4ae:	930d      	str	r3, [sp, #52]	@ 0x34
 800e4b0:	9b06      	ldr	r3, [sp, #24]
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	dd05      	ble.n	800e4c2 <_dtoa_r+0x8b2>
 800e4b6:	001a      	movs	r2, r3
 800e4b8:	9905      	ldr	r1, [sp, #20]
 800e4ba:	9803      	ldr	r0, [sp, #12]
 800e4bc:	f000 fcc4 	bl	800ee48 <__lshift>
 800e4c0:	9005      	str	r0, [sp, #20]
 800e4c2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	dd05      	ble.n	800e4d4 <_dtoa_r+0x8c4>
 800e4c8:	0031      	movs	r1, r6
 800e4ca:	001a      	movs	r2, r3
 800e4cc:	9803      	ldr	r0, [sp, #12]
 800e4ce:	f000 fcbb 	bl	800ee48 <__lshift>
 800e4d2:	0006      	movs	r6, r0
 800e4d4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d045      	beq.n	800e566 <_dtoa_r+0x956>
 800e4da:	0031      	movs	r1, r6
 800e4dc:	9805      	ldr	r0, [sp, #20]
 800e4de:	f000 fd1f 	bl	800ef20 <__mcmp>
 800e4e2:	2800      	cmp	r0, #0
 800e4e4:	da3f      	bge.n	800e566 <_dtoa_r+0x956>
 800e4e6:	9b04      	ldr	r3, [sp, #16]
 800e4e8:	220a      	movs	r2, #10
 800e4ea:	3b01      	subs	r3, #1
 800e4ec:	930c      	str	r3, [sp, #48]	@ 0x30
 800e4ee:	9905      	ldr	r1, [sp, #20]
 800e4f0:	2300      	movs	r3, #0
 800e4f2:	9803      	ldr	r0, [sp, #12]
 800e4f4:	f000 faee 	bl	800ead4 <__multadd>
 800e4f8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e4fa:	9005      	str	r0, [sp, #20]
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	d100      	bne.n	800e502 <_dtoa_r+0x8f2>
 800e500:	e15c      	b.n	800e7bc <_dtoa_r+0xbac>
 800e502:	2300      	movs	r3, #0
 800e504:	0039      	movs	r1, r7
 800e506:	220a      	movs	r2, #10
 800e508:	9803      	ldr	r0, [sp, #12]
 800e50a:	f000 fae3 	bl	800ead4 <__multadd>
 800e50e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e510:	0007      	movs	r7, r0
 800e512:	2b00      	cmp	r3, #0
 800e514:	dc55      	bgt.n	800e5c2 <_dtoa_r+0x9b2>
 800e516:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800e518:	2b02      	cmp	r3, #2
 800e51a:	dc2d      	bgt.n	800e578 <_dtoa_r+0x968>
 800e51c:	e051      	b.n	800e5c2 <_dtoa_r+0x9b2>
 800e51e:	2336      	movs	r3, #54	@ 0x36
 800e520:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800e522:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 800e524:	9c06      	ldr	r4, [sp, #24]
 800e526:	1a9b      	subs	r3, r3, r2
 800e528:	e73c      	b.n	800e3a4 <_dtoa_r+0x794>
 800e52a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e52c:	1e5d      	subs	r5, r3, #1
 800e52e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e530:	42ab      	cmp	r3, r5
 800e532:	db08      	blt.n	800e546 <_dtoa_r+0x936>
 800e534:	1b5d      	subs	r5, r3, r5
 800e536:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e538:	9c06      	ldr	r4, [sp, #24]
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	db00      	blt.n	800e540 <_dtoa_r+0x930>
 800e53e:	e731      	b.n	800e3a4 <_dtoa_r+0x794>
 800e540:	1ae4      	subs	r4, r4, r3
 800e542:	2300      	movs	r3, #0
 800e544:	e72e      	b.n	800e3a4 <_dtoa_r+0x794>
 800e546:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e548:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800e54a:	1aeb      	subs	r3, r5, r3
 800e54c:	18d3      	adds	r3, r2, r3
 800e54e:	950f      	str	r5, [sp, #60]	@ 0x3c
 800e550:	9314      	str	r3, [sp, #80]	@ 0x50
 800e552:	2500      	movs	r5, #0
 800e554:	e7ef      	b.n	800e536 <_dtoa_r+0x926>
 800e556:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800e558:	e75e      	b.n	800e418 <_dtoa_r+0x808>
 800e55a:	2b04      	cmp	r3, #4
 800e55c:	d0a8      	beq.n	800e4b0 <_dtoa_r+0x8a0>
 800e55e:	331c      	adds	r3, #28
 800e560:	e79f      	b.n	800e4a2 <_dtoa_r+0x892>
 800e562:	0013      	movs	r3, r2
 800e564:	e7fb      	b.n	800e55e <_dtoa_r+0x94e>
 800e566:	9b04      	ldr	r3, [sp, #16]
 800e568:	930c      	str	r3, [sp, #48]	@ 0x30
 800e56a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e56c:	930e      	str	r3, [sp, #56]	@ 0x38
 800e56e:	2b00      	cmp	r3, #0
 800e570:	dc23      	bgt.n	800e5ba <_dtoa_r+0x9aa>
 800e572:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800e574:	2b02      	cmp	r3, #2
 800e576:	dd20      	ble.n	800e5ba <_dtoa_r+0x9aa>
 800e578:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	d000      	beq.n	800e580 <_dtoa_r+0x970>
 800e57e:	e6b5      	b.n	800e2ec <_dtoa_r+0x6dc>
 800e580:	0031      	movs	r1, r6
 800e582:	2205      	movs	r2, #5
 800e584:	9803      	ldr	r0, [sp, #12]
 800e586:	f000 faa5 	bl	800ead4 <__multadd>
 800e58a:	0006      	movs	r6, r0
 800e58c:	0001      	movs	r1, r0
 800e58e:	9805      	ldr	r0, [sp, #20]
 800e590:	f000 fcc6 	bl	800ef20 <__mcmp>
 800e594:	2800      	cmp	r0, #0
 800e596:	dc00      	bgt.n	800e59a <_dtoa_r+0x98a>
 800e598:	e6a8      	b.n	800e2ec <_dtoa_r+0x6dc>
 800e59a:	9b08      	ldr	r3, [sp, #32]
 800e59c:	9a08      	ldr	r2, [sp, #32]
 800e59e:	1c5c      	adds	r4, r3, #1
 800e5a0:	2331      	movs	r3, #49	@ 0x31
 800e5a2:	7013      	strb	r3, [r2, #0]
 800e5a4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e5a6:	3301      	adds	r3, #1
 800e5a8:	930c      	str	r3, [sp, #48]	@ 0x30
 800e5aa:	e6a3      	b.n	800e2f4 <_dtoa_r+0x6e4>
 800e5ac:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 800e5ae:	0037      	movs	r7, r6
 800e5b0:	e7f3      	b.n	800e59a <_dtoa_r+0x98a>
 800e5b2:	9b04      	ldr	r3, [sp, #16]
 800e5b4:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 800e5b6:	930c      	str	r3, [sp, #48]	@ 0x30
 800e5b8:	e7f9      	b.n	800e5ae <_dtoa_r+0x99e>
 800e5ba:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	d100      	bne.n	800e5c2 <_dtoa_r+0x9b2>
 800e5c0:	e100      	b.n	800e7c4 <_dtoa_r+0xbb4>
 800e5c2:	2c00      	cmp	r4, #0
 800e5c4:	dd05      	ble.n	800e5d2 <_dtoa_r+0x9c2>
 800e5c6:	0039      	movs	r1, r7
 800e5c8:	0022      	movs	r2, r4
 800e5ca:	9803      	ldr	r0, [sp, #12]
 800e5cc:	f000 fc3c 	bl	800ee48 <__lshift>
 800e5d0:	0007      	movs	r7, r0
 800e5d2:	0038      	movs	r0, r7
 800e5d4:	2d00      	cmp	r5, #0
 800e5d6:	d018      	beq.n	800e60a <_dtoa_r+0x9fa>
 800e5d8:	6879      	ldr	r1, [r7, #4]
 800e5da:	9803      	ldr	r0, [sp, #12]
 800e5dc:	f000 fa12 	bl	800ea04 <_Balloc>
 800e5e0:	1e04      	subs	r4, r0, #0
 800e5e2:	d105      	bne.n	800e5f0 <_dtoa_r+0x9e0>
 800e5e4:	0022      	movs	r2, r4
 800e5e6:	4b2b      	ldr	r3, [pc, #172]	@ (800e694 <_dtoa_r+0xa84>)
 800e5e8:	482b      	ldr	r0, [pc, #172]	@ (800e698 <_dtoa_r+0xa88>)
 800e5ea:	492c      	ldr	r1, [pc, #176]	@ (800e69c <_dtoa_r+0xa8c>)
 800e5ec:	f7ff fb25 	bl	800dc3a <_dtoa_r+0x2a>
 800e5f0:	0039      	movs	r1, r7
 800e5f2:	693a      	ldr	r2, [r7, #16]
 800e5f4:	310c      	adds	r1, #12
 800e5f6:	3202      	adds	r2, #2
 800e5f8:	0092      	lsls	r2, r2, #2
 800e5fa:	300c      	adds	r0, #12
 800e5fc:	f7ff fa70 	bl	800dae0 <memcpy>
 800e600:	2201      	movs	r2, #1
 800e602:	0021      	movs	r1, r4
 800e604:	9803      	ldr	r0, [sp, #12]
 800e606:	f000 fc1f 	bl	800ee48 <__lshift>
 800e60a:	9b08      	ldr	r3, [sp, #32]
 800e60c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e60e:	9306      	str	r3, [sp, #24]
 800e610:	3b01      	subs	r3, #1
 800e612:	189b      	adds	r3, r3, r2
 800e614:	2201      	movs	r2, #1
 800e616:	9704      	str	r7, [sp, #16]
 800e618:	0007      	movs	r7, r0
 800e61a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e61c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e61e:	4013      	ands	r3, r2
 800e620:	930e      	str	r3, [sp, #56]	@ 0x38
 800e622:	0031      	movs	r1, r6
 800e624:	9805      	ldr	r0, [sp, #20]
 800e626:	f7ff fa64 	bl	800daf2 <quorem>
 800e62a:	9904      	ldr	r1, [sp, #16]
 800e62c:	0005      	movs	r5, r0
 800e62e:	900a      	str	r0, [sp, #40]	@ 0x28
 800e630:	9805      	ldr	r0, [sp, #20]
 800e632:	f000 fc75 	bl	800ef20 <__mcmp>
 800e636:	003a      	movs	r2, r7
 800e638:	900d      	str	r0, [sp, #52]	@ 0x34
 800e63a:	0031      	movs	r1, r6
 800e63c:	9803      	ldr	r0, [sp, #12]
 800e63e:	f000 fc8b 	bl	800ef58 <__mdiff>
 800e642:	2201      	movs	r2, #1
 800e644:	68c3      	ldr	r3, [r0, #12]
 800e646:	0004      	movs	r4, r0
 800e648:	3530      	adds	r5, #48	@ 0x30
 800e64a:	9209      	str	r2, [sp, #36]	@ 0x24
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d104      	bne.n	800e65a <_dtoa_r+0xa4a>
 800e650:	0001      	movs	r1, r0
 800e652:	9805      	ldr	r0, [sp, #20]
 800e654:	f000 fc64 	bl	800ef20 <__mcmp>
 800e658:	9009      	str	r0, [sp, #36]	@ 0x24
 800e65a:	0021      	movs	r1, r4
 800e65c:	9803      	ldr	r0, [sp, #12]
 800e65e:	f000 fa15 	bl	800ea8c <_Bfree>
 800e662:	9b06      	ldr	r3, [sp, #24]
 800e664:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e666:	1c5c      	adds	r4, r3, #1
 800e668:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800e66a:	4313      	orrs	r3, r2
 800e66c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e66e:	4313      	orrs	r3, r2
 800e670:	d116      	bne.n	800e6a0 <_dtoa_r+0xa90>
 800e672:	2d39      	cmp	r5, #57	@ 0x39
 800e674:	d02f      	beq.n	800e6d6 <_dtoa_r+0xac6>
 800e676:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e678:	2b00      	cmp	r3, #0
 800e67a:	dd01      	ble.n	800e680 <_dtoa_r+0xa70>
 800e67c:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800e67e:	3531      	adds	r5, #49	@ 0x31
 800e680:	9b06      	ldr	r3, [sp, #24]
 800e682:	701d      	strb	r5, [r3, #0]
 800e684:	e638      	b.n	800e2f8 <_dtoa_r+0x6e8>
 800e686:	46c0      	nop			@ (mov r8, r8)
 800e688:	40240000 	.word	0x40240000
 800e68c:	00000433 	.word	0x00000433
 800e690:	7ff00000 	.word	0x7ff00000
 800e694:	080107f0 	.word	0x080107f0
 800e698:	08010798 	.word	0x08010798
 800e69c:	000002ef 	.word	0x000002ef
 800e6a0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	db04      	blt.n	800e6b0 <_dtoa_r+0xaa0>
 800e6a6:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800e6a8:	4313      	orrs	r3, r2
 800e6aa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e6ac:	4313      	orrs	r3, r2
 800e6ae:	d11e      	bne.n	800e6ee <_dtoa_r+0xade>
 800e6b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	dde4      	ble.n	800e680 <_dtoa_r+0xa70>
 800e6b6:	9905      	ldr	r1, [sp, #20]
 800e6b8:	2201      	movs	r2, #1
 800e6ba:	9803      	ldr	r0, [sp, #12]
 800e6bc:	f000 fbc4 	bl	800ee48 <__lshift>
 800e6c0:	0031      	movs	r1, r6
 800e6c2:	9005      	str	r0, [sp, #20]
 800e6c4:	f000 fc2c 	bl	800ef20 <__mcmp>
 800e6c8:	2800      	cmp	r0, #0
 800e6ca:	dc02      	bgt.n	800e6d2 <_dtoa_r+0xac2>
 800e6cc:	d1d8      	bne.n	800e680 <_dtoa_r+0xa70>
 800e6ce:	07eb      	lsls	r3, r5, #31
 800e6d0:	d5d6      	bpl.n	800e680 <_dtoa_r+0xa70>
 800e6d2:	2d39      	cmp	r5, #57	@ 0x39
 800e6d4:	d1d2      	bne.n	800e67c <_dtoa_r+0xa6c>
 800e6d6:	2339      	movs	r3, #57	@ 0x39
 800e6d8:	9a06      	ldr	r2, [sp, #24]
 800e6da:	7013      	strb	r3, [r2, #0]
 800e6dc:	0023      	movs	r3, r4
 800e6de:	001c      	movs	r4, r3
 800e6e0:	3b01      	subs	r3, #1
 800e6e2:	781a      	ldrb	r2, [r3, #0]
 800e6e4:	2a39      	cmp	r2, #57	@ 0x39
 800e6e6:	d04f      	beq.n	800e788 <_dtoa_r+0xb78>
 800e6e8:	3201      	adds	r2, #1
 800e6ea:	701a      	strb	r2, [r3, #0]
 800e6ec:	e604      	b.n	800e2f8 <_dtoa_r+0x6e8>
 800e6ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	dd03      	ble.n	800e6fc <_dtoa_r+0xaec>
 800e6f4:	2d39      	cmp	r5, #57	@ 0x39
 800e6f6:	d0ee      	beq.n	800e6d6 <_dtoa_r+0xac6>
 800e6f8:	3501      	adds	r5, #1
 800e6fa:	e7c1      	b.n	800e680 <_dtoa_r+0xa70>
 800e6fc:	9b06      	ldr	r3, [sp, #24]
 800e6fe:	9a06      	ldr	r2, [sp, #24]
 800e700:	701d      	strb	r5, [r3, #0]
 800e702:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e704:	4293      	cmp	r3, r2
 800e706:	d02a      	beq.n	800e75e <_dtoa_r+0xb4e>
 800e708:	2300      	movs	r3, #0
 800e70a:	220a      	movs	r2, #10
 800e70c:	9905      	ldr	r1, [sp, #20]
 800e70e:	9803      	ldr	r0, [sp, #12]
 800e710:	f000 f9e0 	bl	800ead4 <__multadd>
 800e714:	9b04      	ldr	r3, [sp, #16]
 800e716:	9005      	str	r0, [sp, #20]
 800e718:	42bb      	cmp	r3, r7
 800e71a:	d109      	bne.n	800e730 <_dtoa_r+0xb20>
 800e71c:	2300      	movs	r3, #0
 800e71e:	220a      	movs	r2, #10
 800e720:	9904      	ldr	r1, [sp, #16]
 800e722:	9803      	ldr	r0, [sp, #12]
 800e724:	f000 f9d6 	bl	800ead4 <__multadd>
 800e728:	9004      	str	r0, [sp, #16]
 800e72a:	0007      	movs	r7, r0
 800e72c:	9406      	str	r4, [sp, #24]
 800e72e:	e778      	b.n	800e622 <_dtoa_r+0xa12>
 800e730:	9904      	ldr	r1, [sp, #16]
 800e732:	2300      	movs	r3, #0
 800e734:	220a      	movs	r2, #10
 800e736:	9803      	ldr	r0, [sp, #12]
 800e738:	f000 f9cc 	bl	800ead4 <__multadd>
 800e73c:	2300      	movs	r3, #0
 800e73e:	9004      	str	r0, [sp, #16]
 800e740:	220a      	movs	r2, #10
 800e742:	0039      	movs	r1, r7
 800e744:	9803      	ldr	r0, [sp, #12]
 800e746:	f000 f9c5 	bl	800ead4 <__multadd>
 800e74a:	e7ee      	b.n	800e72a <_dtoa_r+0xb1a>
 800e74c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e74e:	2401      	movs	r4, #1
 800e750:	2b00      	cmp	r3, #0
 800e752:	dd00      	ble.n	800e756 <_dtoa_r+0xb46>
 800e754:	001c      	movs	r4, r3
 800e756:	9b08      	ldr	r3, [sp, #32]
 800e758:	191c      	adds	r4, r3, r4
 800e75a:	2300      	movs	r3, #0
 800e75c:	9304      	str	r3, [sp, #16]
 800e75e:	9905      	ldr	r1, [sp, #20]
 800e760:	2201      	movs	r2, #1
 800e762:	9803      	ldr	r0, [sp, #12]
 800e764:	f000 fb70 	bl	800ee48 <__lshift>
 800e768:	0031      	movs	r1, r6
 800e76a:	9005      	str	r0, [sp, #20]
 800e76c:	f000 fbd8 	bl	800ef20 <__mcmp>
 800e770:	2800      	cmp	r0, #0
 800e772:	dcb3      	bgt.n	800e6dc <_dtoa_r+0xacc>
 800e774:	d101      	bne.n	800e77a <_dtoa_r+0xb6a>
 800e776:	07ed      	lsls	r5, r5, #31
 800e778:	d4b0      	bmi.n	800e6dc <_dtoa_r+0xacc>
 800e77a:	0023      	movs	r3, r4
 800e77c:	001c      	movs	r4, r3
 800e77e:	3b01      	subs	r3, #1
 800e780:	781a      	ldrb	r2, [r3, #0]
 800e782:	2a30      	cmp	r2, #48	@ 0x30
 800e784:	d0fa      	beq.n	800e77c <_dtoa_r+0xb6c>
 800e786:	e5b7      	b.n	800e2f8 <_dtoa_r+0x6e8>
 800e788:	9a08      	ldr	r2, [sp, #32]
 800e78a:	429a      	cmp	r2, r3
 800e78c:	d1a7      	bne.n	800e6de <_dtoa_r+0xace>
 800e78e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e790:	3301      	adds	r3, #1
 800e792:	930c      	str	r3, [sp, #48]	@ 0x30
 800e794:	2331      	movs	r3, #49	@ 0x31
 800e796:	7013      	strb	r3, [r2, #0]
 800e798:	e5ae      	b.n	800e2f8 <_dtoa_r+0x6e8>
 800e79a:	4b15      	ldr	r3, [pc, #84]	@ (800e7f0 <_dtoa_r+0xbe0>)
 800e79c:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800e79e:	9308      	str	r3, [sp, #32]
 800e7a0:	4b14      	ldr	r3, [pc, #80]	@ (800e7f4 <_dtoa_r+0xbe4>)
 800e7a2:	2a00      	cmp	r2, #0
 800e7a4:	d001      	beq.n	800e7aa <_dtoa_r+0xb9a>
 800e7a6:	f7ff fa7b 	bl	800dca0 <_dtoa_r+0x90>
 800e7aa:	f7ff fa7b 	bl	800dca4 <_dtoa_r+0x94>
 800e7ae:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800e7b0:	2b01      	cmp	r3, #1
 800e7b2:	dc00      	bgt.n	800e7b6 <_dtoa_r+0xba6>
 800e7b4:	e648      	b.n	800e448 <_dtoa_r+0x838>
 800e7b6:	2001      	movs	r0, #1
 800e7b8:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 800e7ba:	e665      	b.n	800e488 <_dtoa_r+0x878>
 800e7bc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e7be:	2b00      	cmp	r3, #0
 800e7c0:	dc00      	bgt.n	800e7c4 <_dtoa_r+0xbb4>
 800e7c2:	e6d6      	b.n	800e572 <_dtoa_r+0x962>
 800e7c4:	2400      	movs	r4, #0
 800e7c6:	0031      	movs	r1, r6
 800e7c8:	9805      	ldr	r0, [sp, #20]
 800e7ca:	f7ff f992 	bl	800daf2 <quorem>
 800e7ce:	9b08      	ldr	r3, [sp, #32]
 800e7d0:	3030      	adds	r0, #48	@ 0x30
 800e7d2:	5518      	strb	r0, [r3, r4]
 800e7d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e7d6:	3401      	adds	r4, #1
 800e7d8:	0005      	movs	r5, r0
 800e7da:	429c      	cmp	r4, r3
 800e7dc:	dab6      	bge.n	800e74c <_dtoa_r+0xb3c>
 800e7de:	2300      	movs	r3, #0
 800e7e0:	220a      	movs	r2, #10
 800e7e2:	9905      	ldr	r1, [sp, #20]
 800e7e4:	9803      	ldr	r0, [sp, #12]
 800e7e6:	f000 f975 	bl	800ead4 <__multadd>
 800e7ea:	9005      	str	r0, [sp, #20]
 800e7ec:	e7eb      	b.n	800e7c6 <_dtoa_r+0xbb6>
 800e7ee:	46c0      	nop			@ (mov r8, r8)
 800e7f0:	08010774 	.word	0x08010774
 800e7f4:	0801077c 	.word	0x0801077c

0800e7f8 <_free_r>:
 800e7f8:	b570      	push	{r4, r5, r6, lr}
 800e7fa:	0005      	movs	r5, r0
 800e7fc:	1e0c      	subs	r4, r1, #0
 800e7fe:	d010      	beq.n	800e822 <_free_r+0x2a>
 800e800:	3c04      	subs	r4, #4
 800e802:	6823      	ldr	r3, [r4, #0]
 800e804:	2b00      	cmp	r3, #0
 800e806:	da00      	bge.n	800e80a <_free_r+0x12>
 800e808:	18e4      	adds	r4, r4, r3
 800e80a:	0028      	movs	r0, r5
 800e80c:	f000 f8ea 	bl	800e9e4 <__malloc_lock>
 800e810:	4a1d      	ldr	r2, [pc, #116]	@ (800e888 <_free_r+0x90>)
 800e812:	6813      	ldr	r3, [r2, #0]
 800e814:	2b00      	cmp	r3, #0
 800e816:	d105      	bne.n	800e824 <_free_r+0x2c>
 800e818:	6063      	str	r3, [r4, #4]
 800e81a:	6014      	str	r4, [r2, #0]
 800e81c:	0028      	movs	r0, r5
 800e81e:	f000 f8e9 	bl	800e9f4 <__malloc_unlock>
 800e822:	bd70      	pop	{r4, r5, r6, pc}
 800e824:	42a3      	cmp	r3, r4
 800e826:	d908      	bls.n	800e83a <_free_r+0x42>
 800e828:	6820      	ldr	r0, [r4, #0]
 800e82a:	1821      	adds	r1, r4, r0
 800e82c:	428b      	cmp	r3, r1
 800e82e:	d1f3      	bne.n	800e818 <_free_r+0x20>
 800e830:	6819      	ldr	r1, [r3, #0]
 800e832:	685b      	ldr	r3, [r3, #4]
 800e834:	1809      	adds	r1, r1, r0
 800e836:	6021      	str	r1, [r4, #0]
 800e838:	e7ee      	b.n	800e818 <_free_r+0x20>
 800e83a:	001a      	movs	r2, r3
 800e83c:	685b      	ldr	r3, [r3, #4]
 800e83e:	2b00      	cmp	r3, #0
 800e840:	d001      	beq.n	800e846 <_free_r+0x4e>
 800e842:	42a3      	cmp	r3, r4
 800e844:	d9f9      	bls.n	800e83a <_free_r+0x42>
 800e846:	6811      	ldr	r1, [r2, #0]
 800e848:	1850      	adds	r0, r2, r1
 800e84a:	42a0      	cmp	r0, r4
 800e84c:	d10b      	bne.n	800e866 <_free_r+0x6e>
 800e84e:	6820      	ldr	r0, [r4, #0]
 800e850:	1809      	adds	r1, r1, r0
 800e852:	1850      	adds	r0, r2, r1
 800e854:	6011      	str	r1, [r2, #0]
 800e856:	4283      	cmp	r3, r0
 800e858:	d1e0      	bne.n	800e81c <_free_r+0x24>
 800e85a:	6818      	ldr	r0, [r3, #0]
 800e85c:	685b      	ldr	r3, [r3, #4]
 800e85e:	1841      	adds	r1, r0, r1
 800e860:	6011      	str	r1, [r2, #0]
 800e862:	6053      	str	r3, [r2, #4]
 800e864:	e7da      	b.n	800e81c <_free_r+0x24>
 800e866:	42a0      	cmp	r0, r4
 800e868:	d902      	bls.n	800e870 <_free_r+0x78>
 800e86a:	230c      	movs	r3, #12
 800e86c:	602b      	str	r3, [r5, #0]
 800e86e:	e7d5      	b.n	800e81c <_free_r+0x24>
 800e870:	6820      	ldr	r0, [r4, #0]
 800e872:	1821      	adds	r1, r4, r0
 800e874:	428b      	cmp	r3, r1
 800e876:	d103      	bne.n	800e880 <_free_r+0x88>
 800e878:	6819      	ldr	r1, [r3, #0]
 800e87a:	685b      	ldr	r3, [r3, #4]
 800e87c:	1809      	adds	r1, r1, r0
 800e87e:	6021      	str	r1, [r4, #0]
 800e880:	6063      	str	r3, [r4, #4]
 800e882:	6054      	str	r4, [r2, #4]
 800e884:	e7ca      	b.n	800e81c <_free_r+0x24>
 800e886:	46c0      	nop			@ (mov r8, r8)
 800e888:	20001c14 	.word	0x20001c14

0800e88c <malloc>:
 800e88c:	b510      	push	{r4, lr}
 800e88e:	4b03      	ldr	r3, [pc, #12]	@ (800e89c <malloc+0x10>)
 800e890:	0001      	movs	r1, r0
 800e892:	6818      	ldr	r0, [r3, #0]
 800e894:	f000 f826 	bl	800e8e4 <_malloc_r>
 800e898:	bd10      	pop	{r4, pc}
 800e89a:	46c0      	nop			@ (mov r8, r8)
 800e89c:	20000060 	.word	0x20000060

0800e8a0 <sbrk_aligned>:
 800e8a0:	b570      	push	{r4, r5, r6, lr}
 800e8a2:	4e0f      	ldr	r6, [pc, #60]	@ (800e8e0 <sbrk_aligned+0x40>)
 800e8a4:	000d      	movs	r5, r1
 800e8a6:	6831      	ldr	r1, [r6, #0]
 800e8a8:	0004      	movs	r4, r0
 800e8aa:	2900      	cmp	r1, #0
 800e8ac:	d102      	bne.n	800e8b4 <sbrk_aligned+0x14>
 800e8ae:	f001 f855 	bl	800f95c <_sbrk_r>
 800e8b2:	6030      	str	r0, [r6, #0]
 800e8b4:	0029      	movs	r1, r5
 800e8b6:	0020      	movs	r0, r4
 800e8b8:	f001 f850 	bl	800f95c <_sbrk_r>
 800e8bc:	1c43      	adds	r3, r0, #1
 800e8be:	d103      	bne.n	800e8c8 <sbrk_aligned+0x28>
 800e8c0:	2501      	movs	r5, #1
 800e8c2:	426d      	negs	r5, r5
 800e8c4:	0028      	movs	r0, r5
 800e8c6:	bd70      	pop	{r4, r5, r6, pc}
 800e8c8:	2303      	movs	r3, #3
 800e8ca:	1cc5      	adds	r5, r0, #3
 800e8cc:	439d      	bics	r5, r3
 800e8ce:	42a8      	cmp	r0, r5
 800e8d0:	d0f8      	beq.n	800e8c4 <sbrk_aligned+0x24>
 800e8d2:	1a29      	subs	r1, r5, r0
 800e8d4:	0020      	movs	r0, r4
 800e8d6:	f001 f841 	bl	800f95c <_sbrk_r>
 800e8da:	3001      	adds	r0, #1
 800e8dc:	d1f2      	bne.n	800e8c4 <sbrk_aligned+0x24>
 800e8de:	e7ef      	b.n	800e8c0 <sbrk_aligned+0x20>
 800e8e0:	20001c10 	.word	0x20001c10

0800e8e4 <_malloc_r>:
 800e8e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e8e6:	2203      	movs	r2, #3
 800e8e8:	1ccb      	adds	r3, r1, #3
 800e8ea:	4393      	bics	r3, r2
 800e8ec:	3308      	adds	r3, #8
 800e8ee:	0005      	movs	r5, r0
 800e8f0:	001f      	movs	r7, r3
 800e8f2:	2b0c      	cmp	r3, #12
 800e8f4:	d234      	bcs.n	800e960 <_malloc_r+0x7c>
 800e8f6:	270c      	movs	r7, #12
 800e8f8:	42b9      	cmp	r1, r7
 800e8fa:	d833      	bhi.n	800e964 <_malloc_r+0x80>
 800e8fc:	0028      	movs	r0, r5
 800e8fe:	f000 f871 	bl	800e9e4 <__malloc_lock>
 800e902:	4e37      	ldr	r6, [pc, #220]	@ (800e9e0 <_malloc_r+0xfc>)
 800e904:	6833      	ldr	r3, [r6, #0]
 800e906:	001c      	movs	r4, r3
 800e908:	2c00      	cmp	r4, #0
 800e90a:	d12f      	bne.n	800e96c <_malloc_r+0x88>
 800e90c:	0039      	movs	r1, r7
 800e90e:	0028      	movs	r0, r5
 800e910:	f7ff ffc6 	bl	800e8a0 <sbrk_aligned>
 800e914:	0004      	movs	r4, r0
 800e916:	1c43      	adds	r3, r0, #1
 800e918:	d15f      	bne.n	800e9da <_malloc_r+0xf6>
 800e91a:	6834      	ldr	r4, [r6, #0]
 800e91c:	9400      	str	r4, [sp, #0]
 800e91e:	9b00      	ldr	r3, [sp, #0]
 800e920:	2b00      	cmp	r3, #0
 800e922:	d14a      	bne.n	800e9ba <_malloc_r+0xd6>
 800e924:	2c00      	cmp	r4, #0
 800e926:	d052      	beq.n	800e9ce <_malloc_r+0xea>
 800e928:	6823      	ldr	r3, [r4, #0]
 800e92a:	0028      	movs	r0, r5
 800e92c:	18e3      	adds	r3, r4, r3
 800e92e:	9900      	ldr	r1, [sp, #0]
 800e930:	9301      	str	r3, [sp, #4]
 800e932:	f001 f813 	bl	800f95c <_sbrk_r>
 800e936:	9b01      	ldr	r3, [sp, #4]
 800e938:	4283      	cmp	r3, r0
 800e93a:	d148      	bne.n	800e9ce <_malloc_r+0xea>
 800e93c:	6823      	ldr	r3, [r4, #0]
 800e93e:	0028      	movs	r0, r5
 800e940:	1aff      	subs	r7, r7, r3
 800e942:	0039      	movs	r1, r7
 800e944:	f7ff ffac 	bl	800e8a0 <sbrk_aligned>
 800e948:	3001      	adds	r0, #1
 800e94a:	d040      	beq.n	800e9ce <_malloc_r+0xea>
 800e94c:	6823      	ldr	r3, [r4, #0]
 800e94e:	19db      	adds	r3, r3, r7
 800e950:	6023      	str	r3, [r4, #0]
 800e952:	6833      	ldr	r3, [r6, #0]
 800e954:	685a      	ldr	r2, [r3, #4]
 800e956:	2a00      	cmp	r2, #0
 800e958:	d133      	bne.n	800e9c2 <_malloc_r+0xde>
 800e95a:	9b00      	ldr	r3, [sp, #0]
 800e95c:	6033      	str	r3, [r6, #0]
 800e95e:	e019      	b.n	800e994 <_malloc_r+0xb0>
 800e960:	2b00      	cmp	r3, #0
 800e962:	dac9      	bge.n	800e8f8 <_malloc_r+0x14>
 800e964:	230c      	movs	r3, #12
 800e966:	602b      	str	r3, [r5, #0]
 800e968:	2000      	movs	r0, #0
 800e96a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800e96c:	6821      	ldr	r1, [r4, #0]
 800e96e:	1bc9      	subs	r1, r1, r7
 800e970:	d420      	bmi.n	800e9b4 <_malloc_r+0xd0>
 800e972:	290b      	cmp	r1, #11
 800e974:	d90a      	bls.n	800e98c <_malloc_r+0xa8>
 800e976:	19e2      	adds	r2, r4, r7
 800e978:	6027      	str	r7, [r4, #0]
 800e97a:	42a3      	cmp	r3, r4
 800e97c:	d104      	bne.n	800e988 <_malloc_r+0xa4>
 800e97e:	6032      	str	r2, [r6, #0]
 800e980:	6863      	ldr	r3, [r4, #4]
 800e982:	6011      	str	r1, [r2, #0]
 800e984:	6053      	str	r3, [r2, #4]
 800e986:	e005      	b.n	800e994 <_malloc_r+0xb0>
 800e988:	605a      	str	r2, [r3, #4]
 800e98a:	e7f9      	b.n	800e980 <_malloc_r+0x9c>
 800e98c:	6862      	ldr	r2, [r4, #4]
 800e98e:	42a3      	cmp	r3, r4
 800e990:	d10e      	bne.n	800e9b0 <_malloc_r+0xcc>
 800e992:	6032      	str	r2, [r6, #0]
 800e994:	0028      	movs	r0, r5
 800e996:	f000 f82d 	bl	800e9f4 <__malloc_unlock>
 800e99a:	0020      	movs	r0, r4
 800e99c:	2207      	movs	r2, #7
 800e99e:	300b      	adds	r0, #11
 800e9a0:	1d23      	adds	r3, r4, #4
 800e9a2:	4390      	bics	r0, r2
 800e9a4:	1ac2      	subs	r2, r0, r3
 800e9a6:	4298      	cmp	r0, r3
 800e9a8:	d0df      	beq.n	800e96a <_malloc_r+0x86>
 800e9aa:	1a1b      	subs	r3, r3, r0
 800e9ac:	50a3      	str	r3, [r4, r2]
 800e9ae:	e7dc      	b.n	800e96a <_malloc_r+0x86>
 800e9b0:	605a      	str	r2, [r3, #4]
 800e9b2:	e7ef      	b.n	800e994 <_malloc_r+0xb0>
 800e9b4:	0023      	movs	r3, r4
 800e9b6:	6864      	ldr	r4, [r4, #4]
 800e9b8:	e7a6      	b.n	800e908 <_malloc_r+0x24>
 800e9ba:	9c00      	ldr	r4, [sp, #0]
 800e9bc:	6863      	ldr	r3, [r4, #4]
 800e9be:	9300      	str	r3, [sp, #0]
 800e9c0:	e7ad      	b.n	800e91e <_malloc_r+0x3a>
 800e9c2:	001a      	movs	r2, r3
 800e9c4:	685b      	ldr	r3, [r3, #4]
 800e9c6:	42a3      	cmp	r3, r4
 800e9c8:	d1fb      	bne.n	800e9c2 <_malloc_r+0xde>
 800e9ca:	2300      	movs	r3, #0
 800e9cc:	e7da      	b.n	800e984 <_malloc_r+0xa0>
 800e9ce:	230c      	movs	r3, #12
 800e9d0:	0028      	movs	r0, r5
 800e9d2:	602b      	str	r3, [r5, #0]
 800e9d4:	f000 f80e 	bl	800e9f4 <__malloc_unlock>
 800e9d8:	e7c6      	b.n	800e968 <_malloc_r+0x84>
 800e9da:	6007      	str	r7, [r0, #0]
 800e9dc:	e7da      	b.n	800e994 <_malloc_r+0xb0>
 800e9de:	46c0      	nop			@ (mov r8, r8)
 800e9e0:	20001c14 	.word	0x20001c14

0800e9e4 <__malloc_lock>:
 800e9e4:	b510      	push	{r4, lr}
 800e9e6:	4802      	ldr	r0, [pc, #8]	@ (800e9f0 <__malloc_lock+0xc>)
 800e9e8:	f7ff f86d 	bl	800dac6 <__retarget_lock_acquire_recursive>
 800e9ec:	bd10      	pop	{r4, pc}
 800e9ee:	46c0      	nop			@ (mov r8, r8)
 800e9f0:	20001c0c 	.word	0x20001c0c

0800e9f4 <__malloc_unlock>:
 800e9f4:	b510      	push	{r4, lr}
 800e9f6:	4802      	ldr	r0, [pc, #8]	@ (800ea00 <__malloc_unlock+0xc>)
 800e9f8:	f7ff f866 	bl	800dac8 <__retarget_lock_release_recursive>
 800e9fc:	bd10      	pop	{r4, pc}
 800e9fe:	46c0      	nop			@ (mov r8, r8)
 800ea00:	20001c0c 	.word	0x20001c0c

0800ea04 <_Balloc>:
 800ea04:	b570      	push	{r4, r5, r6, lr}
 800ea06:	69c5      	ldr	r5, [r0, #28]
 800ea08:	0006      	movs	r6, r0
 800ea0a:	000c      	movs	r4, r1
 800ea0c:	2d00      	cmp	r5, #0
 800ea0e:	d10e      	bne.n	800ea2e <_Balloc+0x2a>
 800ea10:	2010      	movs	r0, #16
 800ea12:	f7ff ff3b 	bl	800e88c <malloc>
 800ea16:	1e02      	subs	r2, r0, #0
 800ea18:	61f0      	str	r0, [r6, #28]
 800ea1a:	d104      	bne.n	800ea26 <_Balloc+0x22>
 800ea1c:	216b      	movs	r1, #107	@ 0x6b
 800ea1e:	4b19      	ldr	r3, [pc, #100]	@ (800ea84 <_Balloc+0x80>)
 800ea20:	4819      	ldr	r0, [pc, #100]	@ (800ea88 <_Balloc+0x84>)
 800ea22:	f000 ffad 	bl	800f980 <__assert_func>
 800ea26:	6045      	str	r5, [r0, #4]
 800ea28:	6085      	str	r5, [r0, #8]
 800ea2a:	6005      	str	r5, [r0, #0]
 800ea2c:	60c5      	str	r5, [r0, #12]
 800ea2e:	69f5      	ldr	r5, [r6, #28]
 800ea30:	68eb      	ldr	r3, [r5, #12]
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	d013      	beq.n	800ea5e <_Balloc+0x5a>
 800ea36:	69f3      	ldr	r3, [r6, #28]
 800ea38:	00a2      	lsls	r2, r4, #2
 800ea3a:	68db      	ldr	r3, [r3, #12]
 800ea3c:	189b      	adds	r3, r3, r2
 800ea3e:	6818      	ldr	r0, [r3, #0]
 800ea40:	2800      	cmp	r0, #0
 800ea42:	d118      	bne.n	800ea76 <_Balloc+0x72>
 800ea44:	2101      	movs	r1, #1
 800ea46:	000d      	movs	r5, r1
 800ea48:	40a5      	lsls	r5, r4
 800ea4a:	1d6a      	adds	r2, r5, #5
 800ea4c:	0030      	movs	r0, r6
 800ea4e:	0092      	lsls	r2, r2, #2
 800ea50:	f000 ffb4 	bl	800f9bc <_calloc_r>
 800ea54:	2800      	cmp	r0, #0
 800ea56:	d00c      	beq.n	800ea72 <_Balloc+0x6e>
 800ea58:	6044      	str	r4, [r0, #4]
 800ea5a:	6085      	str	r5, [r0, #8]
 800ea5c:	e00d      	b.n	800ea7a <_Balloc+0x76>
 800ea5e:	2221      	movs	r2, #33	@ 0x21
 800ea60:	2104      	movs	r1, #4
 800ea62:	0030      	movs	r0, r6
 800ea64:	f000 ffaa 	bl	800f9bc <_calloc_r>
 800ea68:	69f3      	ldr	r3, [r6, #28]
 800ea6a:	60e8      	str	r0, [r5, #12]
 800ea6c:	68db      	ldr	r3, [r3, #12]
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	d1e1      	bne.n	800ea36 <_Balloc+0x32>
 800ea72:	2000      	movs	r0, #0
 800ea74:	bd70      	pop	{r4, r5, r6, pc}
 800ea76:	6802      	ldr	r2, [r0, #0]
 800ea78:	601a      	str	r2, [r3, #0]
 800ea7a:	2300      	movs	r3, #0
 800ea7c:	6103      	str	r3, [r0, #16]
 800ea7e:	60c3      	str	r3, [r0, #12]
 800ea80:	e7f8      	b.n	800ea74 <_Balloc+0x70>
 800ea82:	46c0      	nop			@ (mov r8, r8)
 800ea84:	08010781 	.word	0x08010781
 800ea88:	08010801 	.word	0x08010801

0800ea8c <_Bfree>:
 800ea8c:	b570      	push	{r4, r5, r6, lr}
 800ea8e:	69c6      	ldr	r6, [r0, #28]
 800ea90:	0005      	movs	r5, r0
 800ea92:	000c      	movs	r4, r1
 800ea94:	2e00      	cmp	r6, #0
 800ea96:	d10e      	bne.n	800eab6 <_Bfree+0x2a>
 800ea98:	2010      	movs	r0, #16
 800ea9a:	f7ff fef7 	bl	800e88c <malloc>
 800ea9e:	1e02      	subs	r2, r0, #0
 800eaa0:	61e8      	str	r0, [r5, #28]
 800eaa2:	d104      	bne.n	800eaae <_Bfree+0x22>
 800eaa4:	218f      	movs	r1, #143	@ 0x8f
 800eaa6:	4b09      	ldr	r3, [pc, #36]	@ (800eacc <_Bfree+0x40>)
 800eaa8:	4809      	ldr	r0, [pc, #36]	@ (800ead0 <_Bfree+0x44>)
 800eaaa:	f000 ff69 	bl	800f980 <__assert_func>
 800eaae:	6046      	str	r6, [r0, #4]
 800eab0:	6086      	str	r6, [r0, #8]
 800eab2:	6006      	str	r6, [r0, #0]
 800eab4:	60c6      	str	r6, [r0, #12]
 800eab6:	2c00      	cmp	r4, #0
 800eab8:	d007      	beq.n	800eaca <_Bfree+0x3e>
 800eaba:	69eb      	ldr	r3, [r5, #28]
 800eabc:	6862      	ldr	r2, [r4, #4]
 800eabe:	68db      	ldr	r3, [r3, #12]
 800eac0:	0092      	lsls	r2, r2, #2
 800eac2:	189b      	adds	r3, r3, r2
 800eac4:	681a      	ldr	r2, [r3, #0]
 800eac6:	6022      	str	r2, [r4, #0]
 800eac8:	601c      	str	r4, [r3, #0]
 800eaca:	bd70      	pop	{r4, r5, r6, pc}
 800eacc:	08010781 	.word	0x08010781
 800ead0:	08010801 	.word	0x08010801

0800ead4 <__multadd>:
 800ead4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ead6:	000f      	movs	r7, r1
 800ead8:	9001      	str	r0, [sp, #4]
 800eada:	000c      	movs	r4, r1
 800eadc:	001e      	movs	r6, r3
 800eade:	2000      	movs	r0, #0
 800eae0:	690d      	ldr	r5, [r1, #16]
 800eae2:	3714      	adds	r7, #20
 800eae4:	683b      	ldr	r3, [r7, #0]
 800eae6:	3001      	adds	r0, #1
 800eae8:	b299      	uxth	r1, r3
 800eaea:	4351      	muls	r1, r2
 800eaec:	0c1b      	lsrs	r3, r3, #16
 800eaee:	4353      	muls	r3, r2
 800eaf0:	1989      	adds	r1, r1, r6
 800eaf2:	0c0e      	lsrs	r6, r1, #16
 800eaf4:	199b      	adds	r3, r3, r6
 800eaf6:	0c1e      	lsrs	r6, r3, #16
 800eaf8:	b289      	uxth	r1, r1
 800eafa:	041b      	lsls	r3, r3, #16
 800eafc:	185b      	adds	r3, r3, r1
 800eafe:	c708      	stmia	r7!, {r3}
 800eb00:	4285      	cmp	r5, r0
 800eb02:	dcef      	bgt.n	800eae4 <__multadd+0x10>
 800eb04:	2e00      	cmp	r6, #0
 800eb06:	d022      	beq.n	800eb4e <__multadd+0x7a>
 800eb08:	68a3      	ldr	r3, [r4, #8]
 800eb0a:	42ab      	cmp	r3, r5
 800eb0c:	dc19      	bgt.n	800eb42 <__multadd+0x6e>
 800eb0e:	6861      	ldr	r1, [r4, #4]
 800eb10:	9801      	ldr	r0, [sp, #4]
 800eb12:	3101      	adds	r1, #1
 800eb14:	f7ff ff76 	bl	800ea04 <_Balloc>
 800eb18:	1e07      	subs	r7, r0, #0
 800eb1a:	d105      	bne.n	800eb28 <__multadd+0x54>
 800eb1c:	003a      	movs	r2, r7
 800eb1e:	21ba      	movs	r1, #186	@ 0xba
 800eb20:	4b0c      	ldr	r3, [pc, #48]	@ (800eb54 <__multadd+0x80>)
 800eb22:	480d      	ldr	r0, [pc, #52]	@ (800eb58 <__multadd+0x84>)
 800eb24:	f000 ff2c 	bl	800f980 <__assert_func>
 800eb28:	0021      	movs	r1, r4
 800eb2a:	6922      	ldr	r2, [r4, #16]
 800eb2c:	310c      	adds	r1, #12
 800eb2e:	3202      	adds	r2, #2
 800eb30:	0092      	lsls	r2, r2, #2
 800eb32:	300c      	adds	r0, #12
 800eb34:	f7fe ffd4 	bl	800dae0 <memcpy>
 800eb38:	0021      	movs	r1, r4
 800eb3a:	9801      	ldr	r0, [sp, #4]
 800eb3c:	f7ff ffa6 	bl	800ea8c <_Bfree>
 800eb40:	003c      	movs	r4, r7
 800eb42:	1d2b      	adds	r3, r5, #4
 800eb44:	009b      	lsls	r3, r3, #2
 800eb46:	18e3      	adds	r3, r4, r3
 800eb48:	3501      	adds	r5, #1
 800eb4a:	605e      	str	r6, [r3, #4]
 800eb4c:	6125      	str	r5, [r4, #16]
 800eb4e:	0020      	movs	r0, r4
 800eb50:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800eb52:	46c0      	nop			@ (mov r8, r8)
 800eb54:	080107f0 	.word	0x080107f0
 800eb58:	08010801 	.word	0x08010801

0800eb5c <__hi0bits>:
 800eb5c:	2280      	movs	r2, #128	@ 0x80
 800eb5e:	0003      	movs	r3, r0
 800eb60:	0252      	lsls	r2, r2, #9
 800eb62:	2000      	movs	r0, #0
 800eb64:	4293      	cmp	r3, r2
 800eb66:	d201      	bcs.n	800eb6c <__hi0bits+0x10>
 800eb68:	041b      	lsls	r3, r3, #16
 800eb6a:	3010      	adds	r0, #16
 800eb6c:	2280      	movs	r2, #128	@ 0x80
 800eb6e:	0452      	lsls	r2, r2, #17
 800eb70:	4293      	cmp	r3, r2
 800eb72:	d201      	bcs.n	800eb78 <__hi0bits+0x1c>
 800eb74:	3008      	adds	r0, #8
 800eb76:	021b      	lsls	r3, r3, #8
 800eb78:	2280      	movs	r2, #128	@ 0x80
 800eb7a:	0552      	lsls	r2, r2, #21
 800eb7c:	4293      	cmp	r3, r2
 800eb7e:	d201      	bcs.n	800eb84 <__hi0bits+0x28>
 800eb80:	3004      	adds	r0, #4
 800eb82:	011b      	lsls	r3, r3, #4
 800eb84:	2280      	movs	r2, #128	@ 0x80
 800eb86:	05d2      	lsls	r2, r2, #23
 800eb88:	4293      	cmp	r3, r2
 800eb8a:	d201      	bcs.n	800eb90 <__hi0bits+0x34>
 800eb8c:	3002      	adds	r0, #2
 800eb8e:	009b      	lsls	r3, r3, #2
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	db03      	blt.n	800eb9c <__hi0bits+0x40>
 800eb94:	3001      	adds	r0, #1
 800eb96:	4213      	tst	r3, r2
 800eb98:	d100      	bne.n	800eb9c <__hi0bits+0x40>
 800eb9a:	2020      	movs	r0, #32
 800eb9c:	4770      	bx	lr

0800eb9e <__lo0bits>:
 800eb9e:	6803      	ldr	r3, [r0, #0]
 800eba0:	0001      	movs	r1, r0
 800eba2:	2207      	movs	r2, #7
 800eba4:	0018      	movs	r0, r3
 800eba6:	4010      	ands	r0, r2
 800eba8:	4213      	tst	r3, r2
 800ebaa:	d00d      	beq.n	800ebc8 <__lo0bits+0x2a>
 800ebac:	3a06      	subs	r2, #6
 800ebae:	2000      	movs	r0, #0
 800ebb0:	4213      	tst	r3, r2
 800ebb2:	d105      	bne.n	800ebc0 <__lo0bits+0x22>
 800ebb4:	3002      	adds	r0, #2
 800ebb6:	4203      	tst	r3, r0
 800ebb8:	d003      	beq.n	800ebc2 <__lo0bits+0x24>
 800ebba:	40d3      	lsrs	r3, r2
 800ebbc:	0010      	movs	r0, r2
 800ebbe:	600b      	str	r3, [r1, #0]
 800ebc0:	4770      	bx	lr
 800ebc2:	089b      	lsrs	r3, r3, #2
 800ebc4:	600b      	str	r3, [r1, #0]
 800ebc6:	e7fb      	b.n	800ebc0 <__lo0bits+0x22>
 800ebc8:	b29a      	uxth	r2, r3
 800ebca:	2a00      	cmp	r2, #0
 800ebcc:	d101      	bne.n	800ebd2 <__lo0bits+0x34>
 800ebce:	2010      	movs	r0, #16
 800ebd0:	0c1b      	lsrs	r3, r3, #16
 800ebd2:	b2da      	uxtb	r2, r3
 800ebd4:	2a00      	cmp	r2, #0
 800ebd6:	d101      	bne.n	800ebdc <__lo0bits+0x3e>
 800ebd8:	3008      	adds	r0, #8
 800ebda:	0a1b      	lsrs	r3, r3, #8
 800ebdc:	071a      	lsls	r2, r3, #28
 800ebde:	d101      	bne.n	800ebe4 <__lo0bits+0x46>
 800ebe0:	3004      	adds	r0, #4
 800ebe2:	091b      	lsrs	r3, r3, #4
 800ebe4:	079a      	lsls	r2, r3, #30
 800ebe6:	d101      	bne.n	800ebec <__lo0bits+0x4e>
 800ebe8:	3002      	adds	r0, #2
 800ebea:	089b      	lsrs	r3, r3, #2
 800ebec:	07da      	lsls	r2, r3, #31
 800ebee:	d4e9      	bmi.n	800ebc4 <__lo0bits+0x26>
 800ebf0:	3001      	adds	r0, #1
 800ebf2:	085b      	lsrs	r3, r3, #1
 800ebf4:	d1e6      	bne.n	800ebc4 <__lo0bits+0x26>
 800ebf6:	2020      	movs	r0, #32
 800ebf8:	e7e2      	b.n	800ebc0 <__lo0bits+0x22>
	...

0800ebfc <__i2b>:
 800ebfc:	b510      	push	{r4, lr}
 800ebfe:	000c      	movs	r4, r1
 800ec00:	2101      	movs	r1, #1
 800ec02:	f7ff feff 	bl	800ea04 <_Balloc>
 800ec06:	2800      	cmp	r0, #0
 800ec08:	d107      	bne.n	800ec1a <__i2b+0x1e>
 800ec0a:	2146      	movs	r1, #70	@ 0x46
 800ec0c:	4c05      	ldr	r4, [pc, #20]	@ (800ec24 <__i2b+0x28>)
 800ec0e:	0002      	movs	r2, r0
 800ec10:	4b05      	ldr	r3, [pc, #20]	@ (800ec28 <__i2b+0x2c>)
 800ec12:	0020      	movs	r0, r4
 800ec14:	31ff      	adds	r1, #255	@ 0xff
 800ec16:	f000 feb3 	bl	800f980 <__assert_func>
 800ec1a:	2301      	movs	r3, #1
 800ec1c:	6144      	str	r4, [r0, #20]
 800ec1e:	6103      	str	r3, [r0, #16]
 800ec20:	bd10      	pop	{r4, pc}
 800ec22:	46c0      	nop			@ (mov r8, r8)
 800ec24:	08010801 	.word	0x08010801
 800ec28:	080107f0 	.word	0x080107f0

0800ec2c <__multiply>:
 800ec2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ec2e:	0014      	movs	r4, r2
 800ec30:	690a      	ldr	r2, [r1, #16]
 800ec32:	6923      	ldr	r3, [r4, #16]
 800ec34:	000d      	movs	r5, r1
 800ec36:	b08b      	sub	sp, #44	@ 0x2c
 800ec38:	429a      	cmp	r2, r3
 800ec3a:	db02      	blt.n	800ec42 <__multiply+0x16>
 800ec3c:	0023      	movs	r3, r4
 800ec3e:	000c      	movs	r4, r1
 800ec40:	001d      	movs	r5, r3
 800ec42:	6927      	ldr	r7, [r4, #16]
 800ec44:	692e      	ldr	r6, [r5, #16]
 800ec46:	6861      	ldr	r1, [r4, #4]
 800ec48:	19bb      	adds	r3, r7, r6
 800ec4a:	9303      	str	r3, [sp, #12]
 800ec4c:	68a3      	ldr	r3, [r4, #8]
 800ec4e:	19ba      	adds	r2, r7, r6
 800ec50:	4293      	cmp	r3, r2
 800ec52:	da00      	bge.n	800ec56 <__multiply+0x2a>
 800ec54:	3101      	adds	r1, #1
 800ec56:	f7ff fed5 	bl	800ea04 <_Balloc>
 800ec5a:	9002      	str	r0, [sp, #8]
 800ec5c:	2800      	cmp	r0, #0
 800ec5e:	d106      	bne.n	800ec6e <__multiply+0x42>
 800ec60:	21b1      	movs	r1, #177	@ 0xb1
 800ec62:	4b49      	ldr	r3, [pc, #292]	@ (800ed88 <__multiply+0x15c>)
 800ec64:	4849      	ldr	r0, [pc, #292]	@ (800ed8c <__multiply+0x160>)
 800ec66:	9a02      	ldr	r2, [sp, #8]
 800ec68:	0049      	lsls	r1, r1, #1
 800ec6a:	f000 fe89 	bl	800f980 <__assert_func>
 800ec6e:	9b02      	ldr	r3, [sp, #8]
 800ec70:	2200      	movs	r2, #0
 800ec72:	3314      	adds	r3, #20
 800ec74:	469c      	mov	ip, r3
 800ec76:	19bb      	adds	r3, r7, r6
 800ec78:	009b      	lsls	r3, r3, #2
 800ec7a:	4463      	add	r3, ip
 800ec7c:	9304      	str	r3, [sp, #16]
 800ec7e:	4663      	mov	r3, ip
 800ec80:	9904      	ldr	r1, [sp, #16]
 800ec82:	428b      	cmp	r3, r1
 800ec84:	d32a      	bcc.n	800ecdc <__multiply+0xb0>
 800ec86:	0023      	movs	r3, r4
 800ec88:	00bf      	lsls	r7, r7, #2
 800ec8a:	3314      	adds	r3, #20
 800ec8c:	3514      	adds	r5, #20
 800ec8e:	9308      	str	r3, [sp, #32]
 800ec90:	00b6      	lsls	r6, r6, #2
 800ec92:	19db      	adds	r3, r3, r7
 800ec94:	9305      	str	r3, [sp, #20]
 800ec96:	19ab      	adds	r3, r5, r6
 800ec98:	9309      	str	r3, [sp, #36]	@ 0x24
 800ec9a:	2304      	movs	r3, #4
 800ec9c:	9306      	str	r3, [sp, #24]
 800ec9e:	0023      	movs	r3, r4
 800eca0:	9a05      	ldr	r2, [sp, #20]
 800eca2:	3315      	adds	r3, #21
 800eca4:	9501      	str	r5, [sp, #4]
 800eca6:	429a      	cmp	r2, r3
 800eca8:	d305      	bcc.n	800ecb6 <__multiply+0x8a>
 800ecaa:	1b13      	subs	r3, r2, r4
 800ecac:	3b15      	subs	r3, #21
 800ecae:	089b      	lsrs	r3, r3, #2
 800ecb0:	3301      	adds	r3, #1
 800ecb2:	009b      	lsls	r3, r3, #2
 800ecb4:	9306      	str	r3, [sp, #24]
 800ecb6:	9b01      	ldr	r3, [sp, #4]
 800ecb8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ecba:	4293      	cmp	r3, r2
 800ecbc:	d310      	bcc.n	800ece0 <__multiply+0xb4>
 800ecbe:	9b03      	ldr	r3, [sp, #12]
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	dd05      	ble.n	800ecd0 <__multiply+0xa4>
 800ecc4:	9b04      	ldr	r3, [sp, #16]
 800ecc6:	3b04      	subs	r3, #4
 800ecc8:	9304      	str	r3, [sp, #16]
 800ecca:	681b      	ldr	r3, [r3, #0]
 800eccc:	2b00      	cmp	r3, #0
 800ecce:	d056      	beq.n	800ed7e <__multiply+0x152>
 800ecd0:	9b02      	ldr	r3, [sp, #8]
 800ecd2:	9a03      	ldr	r2, [sp, #12]
 800ecd4:	0018      	movs	r0, r3
 800ecd6:	611a      	str	r2, [r3, #16]
 800ecd8:	b00b      	add	sp, #44	@ 0x2c
 800ecda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ecdc:	c304      	stmia	r3!, {r2}
 800ecde:	e7cf      	b.n	800ec80 <__multiply+0x54>
 800ece0:	9b01      	ldr	r3, [sp, #4]
 800ece2:	6818      	ldr	r0, [r3, #0]
 800ece4:	b280      	uxth	r0, r0
 800ece6:	2800      	cmp	r0, #0
 800ece8:	d01e      	beq.n	800ed28 <__multiply+0xfc>
 800ecea:	4667      	mov	r7, ip
 800ecec:	2500      	movs	r5, #0
 800ecee:	9e08      	ldr	r6, [sp, #32]
 800ecf0:	ce02      	ldmia	r6!, {r1}
 800ecf2:	683b      	ldr	r3, [r7, #0]
 800ecf4:	9307      	str	r3, [sp, #28]
 800ecf6:	b28b      	uxth	r3, r1
 800ecf8:	4343      	muls	r3, r0
 800ecfa:	001a      	movs	r2, r3
 800ecfc:	466b      	mov	r3, sp
 800ecfe:	0c09      	lsrs	r1, r1, #16
 800ed00:	8b9b      	ldrh	r3, [r3, #28]
 800ed02:	4341      	muls	r1, r0
 800ed04:	18d3      	adds	r3, r2, r3
 800ed06:	9a07      	ldr	r2, [sp, #28]
 800ed08:	195b      	adds	r3, r3, r5
 800ed0a:	0c12      	lsrs	r2, r2, #16
 800ed0c:	1889      	adds	r1, r1, r2
 800ed0e:	0c1a      	lsrs	r2, r3, #16
 800ed10:	188a      	adds	r2, r1, r2
 800ed12:	b29b      	uxth	r3, r3
 800ed14:	0c15      	lsrs	r5, r2, #16
 800ed16:	0412      	lsls	r2, r2, #16
 800ed18:	431a      	orrs	r2, r3
 800ed1a:	9b05      	ldr	r3, [sp, #20]
 800ed1c:	c704      	stmia	r7!, {r2}
 800ed1e:	42b3      	cmp	r3, r6
 800ed20:	d8e6      	bhi.n	800ecf0 <__multiply+0xc4>
 800ed22:	4663      	mov	r3, ip
 800ed24:	9a06      	ldr	r2, [sp, #24]
 800ed26:	509d      	str	r5, [r3, r2]
 800ed28:	9b01      	ldr	r3, [sp, #4]
 800ed2a:	6818      	ldr	r0, [r3, #0]
 800ed2c:	0c00      	lsrs	r0, r0, #16
 800ed2e:	d020      	beq.n	800ed72 <__multiply+0x146>
 800ed30:	4663      	mov	r3, ip
 800ed32:	0025      	movs	r5, r4
 800ed34:	4661      	mov	r1, ip
 800ed36:	2700      	movs	r7, #0
 800ed38:	681b      	ldr	r3, [r3, #0]
 800ed3a:	3514      	adds	r5, #20
 800ed3c:	682a      	ldr	r2, [r5, #0]
 800ed3e:	680e      	ldr	r6, [r1, #0]
 800ed40:	b292      	uxth	r2, r2
 800ed42:	4342      	muls	r2, r0
 800ed44:	0c36      	lsrs	r6, r6, #16
 800ed46:	1992      	adds	r2, r2, r6
 800ed48:	19d2      	adds	r2, r2, r7
 800ed4a:	0416      	lsls	r6, r2, #16
 800ed4c:	b29b      	uxth	r3, r3
 800ed4e:	431e      	orrs	r6, r3
 800ed50:	600e      	str	r6, [r1, #0]
 800ed52:	cd40      	ldmia	r5!, {r6}
 800ed54:	684b      	ldr	r3, [r1, #4]
 800ed56:	0c36      	lsrs	r6, r6, #16
 800ed58:	4346      	muls	r6, r0
 800ed5a:	b29b      	uxth	r3, r3
 800ed5c:	0c12      	lsrs	r2, r2, #16
 800ed5e:	18f3      	adds	r3, r6, r3
 800ed60:	189b      	adds	r3, r3, r2
 800ed62:	9a05      	ldr	r2, [sp, #20]
 800ed64:	0c1f      	lsrs	r7, r3, #16
 800ed66:	3104      	adds	r1, #4
 800ed68:	42aa      	cmp	r2, r5
 800ed6a:	d8e7      	bhi.n	800ed3c <__multiply+0x110>
 800ed6c:	4662      	mov	r2, ip
 800ed6e:	9906      	ldr	r1, [sp, #24]
 800ed70:	5053      	str	r3, [r2, r1]
 800ed72:	9b01      	ldr	r3, [sp, #4]
 800ed74:	3304      	adds	r3, #4
 800ed76:	9301      	str	r3, [sp, #4]
 800ed78:	2304      	movs	r3, #4
 800ed7a:	449c      	add	ip, r3
 800ed7c:	e79b      	b.n	800ecb6 <__multiply+0x8a>
 800ed7e:	9b03      	ldr	r3, [sp, #12]
 800ed80:	3b01      	subs	r3, #1
 800ed82:	9303      	str	r3, [sp, #12]
 800ed84:	e79b      	b.n	800ecbe <__multiply+0x92>
 800ed86:	46c0      	nop			@ (mov r8, r8)
 800ed88:	080107f0 	.word	0x080107f0
 800ed8c:	08010801 	.word	0x08010801

0800ed90 <__pow5mult>:
 800ed90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ed92:	2303      	movs	r3, #3
 800ed94:	0015      	movs	r5, r2
 800ed96:	0007      	movs	r7, r0
 800ed98:	000e      	movs	r6, r1
 800ed9a:	401a      	ands	r2, r3
 800ed9c:	421d      	tst	r5, r3
 800ed9e:	d008      	beq.n	800edb2 <__pow5mult+0x22>
 800eda0:	4925      	ldr	r1, [pc, #148]	@ (800ee38 <__pow5mult+0xa8>)
 800eda2:	3a01      	subs	r2, #1
 800eda4:	0092      	lsls	r2, r2, #2
 800eda6:	5852      	ldr	r2, [r2, r1]
 800eda8:	2300      	movs	r3, #0
 800edaa:	0031      	movs	r1, r6
 800edac:	f7ff fe92 	bl	800ead4 <__multadd>
 800edb0:	0006      	movs	r6, r0
 800edb2:	10ad      	asrs	r5, r5, #2
 800edb4:	d03d      	beq.n	800ee32 <__pow5mult+0xa2>
 800edb6:	69fc      	ldr	r4, [r7, #28]
 800edb8:	2c00      	cmp	r4, #0
 800edba:	d10f      	bne.n	800eddc <__pow5mult+0x4c>
 800edbc:	2010      	movs	r0, #16
 800edbe:	f7ff fd65 	bl	800e88c <malloc>
 800edc2:	1e02      	subs	r2, r0, #0
 800edc4:	61f8      	str	r0, [r7, #28]
 800edc6:	d105      	bne.n	800edd4 <__pow5mult+0x44>
 800edc8:	21b4      	movs	r1, #180	@ 0xb4
 800edca:	4b1c      	ldr	r3, [pc, #112]	@ (800ee3c <__pow5mult+0xac>)
 800edcc:	481c      	ldr	r0, [pc, #112]	@ (800ee40 <__pow5mult+0xb0>)
 800edce:	31ff      	adds	r1, #255	@ 0xff
 800edd0:	f000 fdd6 	bl	800f980 <__assert_func>
 800edd4:	6044      	str	r4, [r0, #4]
 800edd6:	6084      	str	r4, [r0, #8]
 800edd8:	6004      	str	r4, [r0, #0]
 800edda:	60c4      	str	r4, [r0, #12]
 800eddc:	69fb      	ldr	r3, [r7, #28]
 800edde:	689c      	ldr	r4, [r3, #8]
 800ede0:	9301      	str	r3, [sp, #4]
 800ede2:	2c00      	cmp	r4, #0
 800ede4:	d108      	bne.n	800edf8 <__pow5mult+0x68>
 800ede6:	0038      	movs	r0, r7
 800ede8:	4916      	ldr	r1, [pc, #88]	@ (800ee44 <__pow5mult+0xb4>)
 800edea:	f7ff ff07 	bl	800ebfc <__i2b>
 800edee:	9b01      	ldr	r3, [sp, #4]
 800edf0:	0004      	movs	r4, r0
 800edf2:	6098      	str	r0, [r3, #8]
 800edf4:	2300      	movs	r3, #0
 800edf6:	6003      	str	r3, [r0, #0]
 800edf8:	2301      	movs	r3, #1
 800edfa:	421d      	tst	r5, r3
 800edfc:	d00a      	beq.n	800ee14 <__pow5mult+0x84>
 800edfe:	0031      	movs	r1, r6
 800ee00:	0022      	movs	r2, r4
 800ee02:	0038      	movs	r0, r7
 800ee04:	f7ff ff12 	bl	800ec2c <__multiply>
 800ee08:	0031      	movs	r1, r6
 800ee0a:	9001      	str	r0, [sp, #4]
 800ee0c:	0038      	movs	r0, r7
 800ee0e:	f7ff fe3d 	bl	800ea8c <_Bfree>
 800ee12:	9e01      	ldr	r6, [sp, #4]
 800ee14:	106d      	asrs	r5, r5, #1
 800ee16:	d00c      	beq.n	800ee32 <__pow5mult+0xa2>
 800ee18:	6820      	ldr	r0, [r4, #0]
 800ee1a:	2800      	cmp	r0, #0
 800ee1c:	d107      	bne.n	800ee2e <__pow5mult+0x9e>
 800ee1e:	0022      	movs	r2, r4
 800ee20:	0021      	movs	r1, r4
 800ee22:	0038      	movs	r0, r7
 800ee24:	f7ff ff02 	bl	800ec2c <__multiply>
 800ee28:	2300      	movs	r3, #0
 800ee2a:	6020      	str	r0, [r4, #0]
 800ee2c:	6003      	str	r3, [r0, #0]
 800ee2e:	0004      	movs	r4, r0
 800ee30:	e7e2      	b.n	800edf8 <__pow5mult+0x68>
 800ee32:	0030      	movs	r0, r6
 800ee34:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ee36:	46c0      	nop			@ (mov r8, r8)
 800ee38:	0801085c 	.word	0x0801085c
 800ee3c:	08010781 	.word	0x08010781
 800ee40:	08010801 	.word	0x08010801
 800ee44:	00000271 	.word	0x00000271

0800ee48 <__lshift>:
 800ee48:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ee4a:	000c      	movs	r4, r1
 800ee4c:	0016      	movs	r6, r2
 800ee4e:	6923      	ldr	r3, [r4, #16]
 800ee50:	1157      	asrs	r7, r2, #5
 800ee52:	b085      	sub	sp, #20
 800ee54:	18fb      	adds	r3, r7, r3
 800ee56:	9301      	str	r3, [sp, #4]
 800ee58:	3301      	adds	r3, #1
 800ee5a:	9300      	str	r3, [sp, #0]
 800ee5c:	6849      	ldr	r1, [r1, #4]
 800ee5e:	68a3      	ldr	r3, [r4, #8]
 800ee60:	9002      	str	r0, [sp, #8]
 800ee62:	9a00      	ldr	r2, [sp, #0]
 800ee64:	4293      	cmp	r3, r2
 800ee66:	db10      	blt.n	800ee8a <__lshift+0x42>
 800ee68:	9802      	ldr	r0, [sp, #8]
 800ee6a:	f7ff fdcb 	bl	800ea04 <_Balloc>
 800ee6e:	2300      	movs	r3, #0
 800ee70:	0001      	movs	r1, r0
 800ee72:	0005      	movs	r5, r0
 800ee74:	001a      	movs	r2, r3
 800ee76:	3114      	adds	r1, #20
 800ee78:	4298      	cmp	r0, r3
 800ee7a:	d10c      	bne.n	800ee96 <__lshift+0x4e>
 800ee7c:	21ef      	movs	r1, #239	@ 0xef
 800ee7e:	002a      	movs	r2, r5
 800ee80:	4b25      	ldr	r3, [pc, #148]	@ (800ef18 <__lshift+0xd0>)
 800ee82:	4826      	ldr	r0, [pc, #152]	@ (800ef1c <__lshift+0xd4>)
 800ee84:	0049      	lsls	r1, r1, #1
 800ee86:	f000 fd7b 	bl	800f980 <__assert_func>
 800ee8a:	3101      	adds	r1, #1
 800ee8c:	005b      	lsls	r3, r3, #1
 800ee8e:	e7e8      	b.n	800ee62 <__lshift+0x1a>
 800ee90:	0098      	lsls	r0, r3, #2
 800ee92:	500a      	str	r2, [r1, r0]
 800ee94:	3301      	adds	r3, #1
 800ee96:	42bb      	cmp	r3, r7
 800ee98:	dbfa      	blt.n	800ee90 <__lshift+0x48>
 800ee9a:	43fb      	mvns	r3, r7
 800ee9c:	17db      	asrs	r3, r3, #31
 800ee9e:	401f      	ands	r7, r3
 800eea0:	00bf      	lsls	r7, r7, #2
 800eea2:	0023      	movs	r3, r4
 800eea4:	201f      	movs	r0, #31
 800eea6:	19c9      	adds	r1, r1, r7
 800eea8:	0037      	movs	r7, r6
 800eeaa:	6922      	ldr	r2, [r4, #16]
 800eeac:	3314      	adds	r3, #20
 800eeae:	0092      	lsls	r2, r2, #2
 800eeb0:	189a      	adds	r2, r3, r2
 800eeb2:	4007      	ands	r7, r0
 800eeb4:	4206      	tst	r6, r0
 800eeb6:	d029      	beq.n	800ef0c <__lshift+0xc4>
 800eeb8:	3001      	adds	r0, #1
 800eeba:	1bc0      	subs	r0, r0, r7
 800eebc:	9003      	str	r0, [sp, #12]
 800eebe:	468c      	mov	ip, r1
 800eec0:	2000      	movs	r0, #0
 800eec2:	681e      	ldr	r6, [r3, #0]
 800eec4:	40be      	lsls	r6, r7
 800eec6:	4306      	orrs	r6, r0
 800eec8:	4660      	mov	r0, ip
 800eeca:	c040      	stmia	r0!, {r6}
 800eecc:	4684      	mov	ip, r0
 800eece:	9e03      	ldr	r6, [sp, #12]
 800eed0:	cb01      	ldmia	r3!, {r0}
 800eed2:	40f0      	lsrs	r0, r6
 800eed4:	429a      	cmp	r2, r3
 800eed6:	d8f4      	bhi.n	800eec2 <__lshift+0x7a>
 800eed8:	0026      	movs	r6, r4
 800eeda:	3615      	adds	r6, #21
 800eedc:	2304      	movs	r3, #4
 800eede:	42b2      	cmp	r2, r6
 800eee0:	d304      	bcc.n	800eeec <__lshift+0xa4>
 800eee2:	1b13      	subs	r3, r2, r4
 800eee4:	3b15      	subs	r3, #21
 800eee6:	089b      	lsrs	r3, r3, #2
 800eee8:	3301      	adds	r3, #1
 800eeea:	009b      	lsls	r3, r3, #2
 800eeec:	50c8      	str	r0, [r1, r3]
 800eeee:	2800      	cmp	r0, #0
 800eef0:	d002      	beq.n	800eef8 <__lshift+0xb0>
 800eef2:	9b01      	ldr	r3, [sp, #4]
 800eef4:	3302      	adds	r3, #2
 800eef6:	9300      	str	r3, [sp, #0]
 800eef8:	9b00      	ldr	r3, [sp, #0]
 800eefa:	9802      	ldr	r0, [sp, #8]
 800eefc:	3b01      	subs	r3, #1
 800eefe:	0021      	movs	r1, r4
 800ef00:	612b      	str	r3, [r5, #16]
 800ef02:	f7ff fdc3 	bl	800ea8c <_Bfree>
 800ef06:	0028      	movs	r0, r5
 800ef08:	b005      	add	sp, #20
 800ef0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ef0c:	cb01      	ldmia	r3!, {r0}
 800ef0e:	c101      	stmia	r1!, {r0}
 800ef10:	429a      	cmp	r2, r3
 800ef12:	d8fb      	bhi.n	800ef0c <__lshift+0xc4>
 800ef14:	e7f0      	b.n	800eef8 <__lshift+0xb0>
 800ef16:	46c0      	nop			@ (mov r8, r8)
 800ef18:	080107f0 	.word	0x080107f0
 800ef1c:	08010801 	.word	0x08010801

0800ef20 <__mcmp>:
 800ef20:	b530      	push	{r4, r5, lr}
 800ef22:	690b      	ldr	r3, [r1, #16]
 800ef24:	6904      	ldr	r4, [r0, #16]
 800ef26:	0002      	movs	r2, r0
 800ef28:	1ae0      	subs	r0, r4, r3
 800ef2a:	429c      	cmp	r4, r3
 800ef2c:	d10f      	bne.n	800ef4e <__mcmp+0x2e>
 800ef2e:	3214      	adds	r2, #20
 800ef30:	009b      	lsls	r3, r3, #2
 800ef32:	3114      	adds	r1, #20
 800ef34:	0014      	movs	r4, r2
 800ef36:	18c9      	adds	r1, r1, r3
 800ef38:	18d2      	adds	r2, r2, r3
 800ef3a:	3a04      	subs	r2, #4
 800ef3c:	3904      	subs	r1, #4
 800ef3e:	6815      	ldr	r5, [r2, #0]
 800ef40:	680b      	ldr	r3, [r1, #0]
 800ef42:	429d      	cmp	r5, r3
 800ef44:	d004      	beq.n	800ef50 <__mcmp+0x30>
 800ef46:	2001      	movs	r0, #1
 800ef48:	429d      	cmp	r5, r3
 800ef4a:	d200      	bcs.n	800ef4e <__mcmp+0x2e>
 800ef4c:	3802      	subs	r0, #2
 800ef4e:	bd30      	pop	{r4, r5, pc}
 800ef50:	4294      	cmp	r4, r2
 800ef52:	d3f2      	bcc.n	800ef3a <__mcmp+0x1a>
 800ef54:	e7fb      	b.n	800ef4e <__mcmp+0x2e>
	...

0800ef58 <__mdiff>:
 800ef58:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ef5a:	000c      	movs	r4, r1
 800ef5c:	b087      	sub	sp, #28
 800ef5e:	9000      	str	r0, [sp, #0]
 800ef60:	0011      	movs	r1, r2
 800ef62:	0020      	movs	r0, r4
 800ef64:	0017      	movs	r7, r2
 800ef66:	f7ff ffdb 	bl	800ef20 <__mcmp>
 800ef6a:	1e05      	subs	r5, r0, #0
 800ef6c:	d110      	bne.n	800ef90 <__mdiff+0x38>
 800ef6e:	0001      	movs	r1, r0
 800ef70:	9800      	ldr	r0, [sp, #0]
 800ef72:	f7ff fd47 	bl	800ea04 <_Balloc>
 800ef76:	1e02      	subs	r2, r0, #0
 800ef78:	d104      	bne.n	800ef84 <__mdiff+0x2c>
 800ef7a:	4b40      	ldr	r3, [pc, #256]	@ (800f07c <__mdiff+0x124>)
 800ef7c:	4840      	ldr	r0, [pc, #256]	@ (800f080 <__mdiff+0x128>)
 800ef7e:	4941      	ldr	r1, [pc, #260]	@ (800f084 <__mdiff+0x12c>)
 800ef80:	f000 fcfe 	bl	800f980 <__assert_func>
 800ef84:	2301      	movs	r3, #1
 800ef86:	6145      	str	r5, [r0, #20]
 800ef88:	6103      	str	r3, [r0, #16]
 800ef8a:	0010      	movs	r0, r2
 800ef8c:	b007      	add	sp, #28
 800ef8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ef90:	2600      	movs	r6, #0
 800ef92:	42b0      	cmp	r0, r6
 800ef94:	da03      	bge.n	800ef9e <__mdiff+0x46>
 800ef96:	0023      	movs	r3, r4
 800ef98:	003c      	movs	r4, r7
 800ef9a:	001f      	movs	r7, r3
 800ef9c:	3601      	adds	r6, #1
 800ef9e:	6861      	ldr	r1, [r4, #4]
 800efa0:	9800      	ldr	r0, [sp, #0]
 800efa2:	f7ff fd2f 	bl	800ea04 <_Balloc>
 800efa6:	1e02      	subs	r2, r0, #0
 800efa8:	d103      	bne.n	800efb2 <__mdiff+0x5a>
 800efaa:	4b34      	ldr	r3, [pc, #208]	@ (800f07c <__mdiff+0x124>)
 800efac:	4834      	ldr	r0, [pc, #208]	@ (800f080 <__mdiff+0x128>)
 800efae:	4936      	ldr	r1, [pc, #216]	@ (800f088 <__mdiff+0x130>)
 800efb0:	e7e6      	b.n	800ef80 <__mdiff+0x28>
 800efb2:	6923      	ldr	r3, [r4, #16]
 800efb4:	3414      	adds	r4, #20
 800efb6:	9300      	str	r3, [sp, #0]
 800efb8:	009b      	lsls	r3, r3, #2
 800efba:	18e3      	adds	r3, r4, r3
 800efbc:	0021      	movs	r1, r4
 800efbe:	9401      	str	r4, [sp, #4]
 800efc0:	003c      	movs	r4, r7
 800efc2:	9302      	str	r3, [sp, #8]
 800efc4:	693b      	ldr	r3, [r7, #16]
 800efc6:	3414      	adds	r4, #20
 800efc8:	009b      	lsls	r3, r3, #2
 800efca:	18e3      	adds	r3, r4, r3
 800efcc:	9303      	str	r3, [sp, #12]
 800efce:	0003      	movs	r3, r0
 800efd0:	60c6      	str	r6, [r0, #12]
 800efd2:	468c      	mov	ip, r1
 800efd4:	2000      	movs	r0, #0
 800efd6:	3314      	adds	r3, #20
 800efd8:	9304      	str	r3, [sp, #16]
 800efda:	9305      	str	r3, [sp, #20]
 800efdc:	4663      	mov	r3, ip
 800efde:	cb20      	ldmia	r3!, {r5}
 800efe0:	b2a9      	uxth	r1, r5
 800efe2:	000e      	movs	r6, r1
 800efe4:	469c      	mov	ip, r3
 800efe6:	cc08      	ldmia	r4!, {r3}
 800efe8:	0c2d      	lsrs	r5, r5, #16
 800efea:	b299      	uxth	r1, r3
 800efec:	1a71      	subs	r1, r6, r1
 800efee:	1809      	adds	r1, r1, r0
 800eff0:	0c1b      	lsrs	r3, r3, #16
 800eff2:	1408      	asrs	r0, r1, #16
 800eff4:	1aeb      	subs	r3, r5, r3
 800eff6:	181b      	adds	r3, r3, r0
 800eff8:	1418      	asrs	r0, r3, #16
 800effa:	b289      	uxth	r1, r1
 800effc:	041b      	lsls	r3, r3, #16
 800effe:	4319      	orrs	r1, r3
 800f000:	9b05      	ldr	r3, [sp, #20]
 800f002:	c302      	stmia	r3!, {r1}
 800f004:	9305      	str	r3, [sp, #20]
 800f006:	9b03      	ldr	r3, [sp, #12]
 800f008:	42a3      	cmp	r3, r4
 800f00a:	d8e7      	bhi.n	800efdc <__mdiff+0x84>
 800f00c:	0039      	movs	r1, r7
 800f00e:	9c03      	ldr	r4, [sp, #12]
 800f010:	3115      	adds	r1, #21
 800f012:	2304      	movs	r3, #4
 800f014:	428c      	cmp	r4, r1
 800f016:	d304      	bcc.n	800f022 <__mdiff+0xca>
 800f018:	1be3      	subs	r3, r4, r7
 800f01a:	3b15      	subs	r3, #21
 800f01c:	089b      	lsrs	r3, r3, #2
 800f01e:	3301      	adds	r3, #1
 800f020:	009b      	lsls	r3, r3, #2
 800f022:	9901      	ldr	r1, [sp, #4]
 800f024:	18cd      	adds	r5, r1, r3
 800f026:	9904      	ldr	r1, [sp, #16]
 800f028:	002e      	movs	r6, r5
 800f02a:	18cb      	adds	r3, r1, r3
 800f02c:	001f      	movs	r7, r3
 800f02e:	9902      	ldr	r1, [sp, #8]
 800f030:	428e      	cmp	r6, r1
 800f032:	d311      	bcc.n	800f058 <__mdiff+0x100>
 800f034:	9c02      	ldr	r4, [sp, #8]
 800f036:	1ee9      	subs	r1, r5, #3
 800f038:	2000      	movs	r0, #0
 800f03a:	428c      	cmp	r4, r1
 800f03c:	d304      	bcc.n	800f048 <__mdiff+0xf0>
 800f03e:	0021      	movs	r1, r4
 800f040:	3103      	adds	r1, #3
 800f042:	1b49      	subs	r1, r1, r5
 800f044:	0889      	lsrs	r1, r1, #2
 800f046:	0088      	lsls	r0, r1, #2
 800f048:	181b      	adds	r3, r3, r0
 800f04a:	3b04      	subs	r3, #4
 800f04c:	6819      	ldr	r1, [r3, #0]
 800f04e:	2900      	cmp	r1, #0
 800f050:	d010      	beq.n	800f074 <__mdiff+0x11c>
 800f052:	9b00      	ldr	r3, [sp, #0]
 800f054:	6113      	str	r3, [r2, #16]
 800f056:	e798      	b.n	800ef8a <__mdiff+0x32>
 800f058:	4684      	mov	ip, r0
 800f05a:	ce02      	ldmia	r6!, {r1}
 800f05c:	b288      	uxth	r0, r1
 800f05e:	4460      	add	r0, ip
 800f060:	1400      	asrs	r0, r0, #16
 800f062:	0c0c      	lsrs	r4, r1, #16
 800f064:	1904      	adds	r4, r0, r4
 800f066:	4461      	add	r1, ip
 800f068:	1420      	asrs	r0, r4, #16
 800f06a:	b289      	uxth	r1, r1
 800f06c:	0424      	lsls	r4, r4, #16
 800f06e:	4321      	orrs	r1, r4
 800f070:	c702      	stmia	r7!, {r1}
 800f072:	e7dc      	b.n	800f02e <__mdiff+0xd6>
 800f074:	9900      	ldr	r1, [sp, #0]
 800f076:	3901      	subs	r1, #1
 800f078:	9100      	str	r1, [sp, #0]
 800f07a:	e7e6      	b.n	800f04a <__mdiff+0xf2>
 800f07c:	080107f0 	.word	0x080107f0
 800f080:	08010801 	.word	0x08010801
 800f084:	00000237 	.word	0x00000237
 800f088:	00000245 	.word	0x00000245

0800f08c <__d2b>:
 800f08c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f08e:	2101      	movs	r1, #1
 800f090:	0016      	movs	r6, r2
 800f092:	001f      	movs	r7, r3
 800f094:	f7ff fcb6 	bl	800ea04 <_Balloc>
 800f098:	1e04      	subs	r4, r0, #0
 800f09a:	d105      	bne.n	800f0a8 <__d2b+0x1c>
 800f09c:	0022      	movs	r2, r4
 800f09e:	4b25      	ldr	r3, [pc, #148]	@ (800f134 <__d2b+0xa8>)
 800f0a0:	4825      	ldr	r0, [pc, #148]	@ (800f138 <__d2b+0xac>)
 800f0a2:	4926      	ldr	r1, [pc, #152]	@ (800f13c <__d2b+0xb0>)
 800f0a4:	f000 fc6c 	bl	800f980 <__assert_func>
 800f0a8:	033b      	lsls	r3, r7, #12
 800f0aa:	007d      	lsls	r5, r7, #1
 800f0ac:	0b1b      	lsrs	r3, r3, #12
 800f0ae:	0d6d      	lsrs	r5, r5, #21
 800f0b0:	d002      	beq.n	800f0b8 <__d2b+0x2c>
 800f0b2:	2280      	movs	r2, #128	@ 0x80
 800f0b4:	0352      	lsls	r2, r2, #13
 800f0b6:	4313      	orrs	r3, r2
 800f0b8:	9301      	str	r3, [sp, #4]
 800f0ba:	2e00      	cmp	r6, #0
 800f0bc:	d025      	beq.n	800f10a <__d2b+0x7e>
 800f0be:	4668      	mov	r0, sp
 800f0c0:	9600      	str	r6, [sp, #0]
 800f0c2:	f7ff fd6c 	bl	800eb9e <__lo0bits>
 800f0c6:	9b01      	ldr	r3, [sp, #4]
 800f0c8:	9900      	ldr	r1, [sp, #0]
 800f0ca:	2800      	cmp	r0, #0
 800f0cc:	d01b      	beq.n	800f106 <__d2b+0x7a>
 800f0ce:	2220      	movs	r2, #32
 800f0d0:	001e      	movs	r6, r3
 800f0d2:	1a12      	subs	r2, r2, r0
 800f0d4:	4096      	lsls	r6, r2
 800f0d6:	0032      	movs	r2, r6
 800f0d8:	40c3      	lsrs	r3, r0
 800f0da:	430a      	orrs	r2, r1
 800f0dc:	6162      	str	r2, [r4, #20]
 800f0de:	9301      	str	r3, [sp, #4]
 800f0e0:	9e01      	ldr	r6, [sp, #4]
 800f0e2:	61a6      	str	r6, [r4, #24]
 800f0e4:	1e73      	subs	r3, r6, #1
 800f0e6:	419e      	sbcs	r6, r3
 800f0e8:	3601      	adds	r6, #1
 800f0ea:	6126      	str	r6, [r4, #16]
 800f0ec:	2d00      	cmp	r5, #0
 800f0ee:	d014      	beq.n	800f11a <__d2b+0x8e>
 800f0f0:	2635      	movs	r6, #53	@ 0x35
 800f0f2:	4b13      	ldr	r3, [pc, #76]	@ (800f140 <__d2b+0xb4>)
 800f0f4:	18ed      	adds	r5, r5, r3
 800f0f6:	9b08      	ldr	r3, [sp, #32]
 800f0f8:	182d      	adds	r5, r5, r0
 800f0fa:	601d      	str	r5, [r3, #0]
 800f0fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f0fe:	1a36      	subs	r6, r6, r0
 800f100:	601e      	str	r6, [r3, #0]
 800f102:	0020      	movs	r0, r4
 800f104:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800f106:	6161      	str	r1, [r4, #20]
 800f108:	e7ea      	b.n	800f0e0 <__d2b+0x54>
 800f10a:	a801      	add	r0, sp, #4
 800f10c:	f7ff fd47 	bl	800eb9e <__lo0bits>
 800f110:	9b01      	ldr	r3, [sp, #4]
 800f112:	2601      	movs	r6, #1
 800f114:	6163      	str	r3, [r4, #20]
 800f116:	3020      	adds	r0, #32
 800f118:	e7e7      	b.n	800f0ea <__d2b+0x5e>
 800f11a:	4b0a      	ldr	r3, [pc, #40]	@ (800f144 <__d2b+0xb8>)
 800f11c:	18c0      	adds	r0, r0, r3
 800f11e:	9b08      	ldr	r3, [sp, #32]
 800f120:	6018      	str	r0, [r3, #0]
 800f122:	4b09      	ldr	r3, [pc, #36]	@ (800f148 <__d2b+0xbc>)
 800f124:	18f3      	adds	r3, r6, r3
 800f126:	009b      	lsls	r3, r3, #2
 800f128:	18e3      	adds	r3, r4, r3
 800f12a:	6958      	ldr	r0, [r3, #20]
 800f12c:	f7ff fd16 	bl	800eb5c <__hi0bits>
 800f130:	0176      	lsls	r6, r6, #5
 800f132:	e7e3      	b.n	800f0fc <__d2b+0x70>
 800f134:	080107f0 	.word	0x080107f0
 800f138:	08010801 	.word	0x08010801
 800f13c:	0000030f 	.word	0x0000030f
 800f140:	fffffbcd 	.word	0xfffffbcd
 800f144:	fffffbce 	.word	0xfffffbce
 800f148:	3fffffff 	.word	0x3fffffff

0800f14c <__ssputs_r>:
 800f14c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f14e:	688e      	ldr	r6, [r1, #8]
 800f150:	b085      	sub	sp, #20
 800f152:	001f      	movs	r7, r3
 800f154:	000c      	movs	r4, r1
 800f156:	680b      	ldr	r3, [r1, #0]
 800f158:	9002      	str	r0, [sp, #8]
 800f15a:	9203      	str	r2, [sp, #12]
 800f15c:	42be      	cmp	r6, r7
 800f15e:	d830      	bhi.n	800f1c2 <__ssputs_r+0x76>
 800f160:	210c      	movs	r1, #12
 800f162:	5e62      	ldrsh	r2, [r4, r1]
 800f164:	2190      	movs	r1, #144	@ 0x90
 800f166:	00c9      	lsls	r1, r1, #3
 800f168:	420a      	tst	r2, r1
 800f16a:	d028      	beq.n	800f1be <__ssputs_r+0x72>
 800f16c:	2003      	movs	r0, #3
 800f16e:	6921      	ldr	r1, [r4, #16]
 800f170:	1a5b      	subs	r3, r3, r1
 800f172:	9301      	str	r3, [sp, #4]
 800f174:	6963      	ldr	r3, [r4, #20]
 800f176:	4343      	muls	r3, r0
 800f178:	9801      	ldr	r0, [sp, #4]
 800f17a:	0fdd      	lsrs	r5, r3, #31
 800f17c:	18ed      	adds	r5, r5, r3
 800f17e:	1c7b      	adds	r3, r7, #1
 800f180:	181b      	adds	r3, r3, r0
 800f182:	106d      	asrs	r5, r5, #1
 800f184:	42ab      	cmp	r3, r5
 800f186:	d900      	bls.n	800f18a <__ssputs_r+0x3e>
 800f188:	001d      	movs	r5, r3
 800f18a:	0552      	lsls	r2, r2, #21
 800f18c:	d528      	bpl.n	800f1e0 <__ssputs_r+0x94>
 800f18e:	0029      	movs	r1, r5
 800f190:	9802      	ldr	r0, [sp, #8]
 800f192:	f7ff fba7 	bl	800e8e4 <_malloc_r>
 800f196:	1e06      	subs	r6, r0, #0
 800f198:	d02c      	beq.n	800f1f4 <__ssputs_r+0xa8>
 800f19a:	9a01      	ldr	r2, [sp, #4]
 800f19c:	6921      	ldr	r1, [r4, #16]
 800f19e:	f7fe fc9f 	bl	800dae0 <memcpy>
 800f1a2:	89a2      	ldrh	r2, [r4, #12]
 800f1a4:	4b18      	ldr	r3, [pc, #96]	@ (800f208 <__ssputs_r+0xbc>)
 800f1a6:	401a      	ands	r2, r3
 800f1a8:	2380      	movs	r3, #128	@ 0x80
 800f1aa:	4313      	orrs	r3, r2
 800f1ac:	81a3      	strh	r3, [r4, #12]
 800f1ae:	9b01      	ldr	r3, [sp, #4]
 800f1b0:	6126      	str	r6, [r4, #16]
 800f1b2:	18f6      	adds	r6, r6, r3
 800f1b4:	6026      	str	r6, [r4, #0]
 800f1b6:	003e      	movs	r6, r7
 800f1b8:	6165      	str	r5, [r4, #20]
 800f1ba:	1aed      	subs	r5, r5, r3
 800f1bc:	60a5      	str	r5, [r4, #8]
 800f1be:	42be      	cmp	r6, r7
 800f1c0:	d900      	bls.n	800f1c4 <__ssputs_r+0x78>
 800f1c2:	003e      	movs	r6, r7
 800f1c4:	0032      	movs	r2, r6
 800f1c6:	9903      	ldr	r1, [sp, #12]
 800f1c8:	6820      	ldr	r0, [r4, #0]
 800f1ca:	f000 fbb3 	bl	800f934 <memmove>
 800f1ce:	2000      	movs	r0, #0
 800f1d0:	68a3      	ldr	r3, [r4, #8]
 800f1d2:	1b9b      	subs	r3, r3, r6
 800f1d4:	60a3      	str	r3, [r4, #8]
 800f1d6:	6823      	ldr	r3, [r4, #0]
 800f1d8:	199b      	adds	r3, r3, r6
 800f1da:	6023      	str	r3, [r4, #0]
 800f1dc:	b005      	add	sp, #20
 800f1de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f1e0:	002a      	movs	r2, r5
 800f1e2:	9802      	ldr	r0, [sp, #8]
 800f1e4:	f000 fc29 	bl	800fa3a <_realloc_r>
 800f1e8:	1e06      	subs	r6, r0, #0
 800f1ea:	d1e0      	bne.n	800f1ae <__ssputs_r+0x62>
 800f1ec:	6921      	ldr	r1, [r4, #16]
 800f1ee:	9802      	ldr	r0, [sp, #8]
 800f1f0:	f7ff fb02 	bl	800e7f8 <_free_r>
 800f1f4:	230c      	movs	r3, #12
 800f1f6:	2001      	movs	r0, #1
 800f1f8:	9a02      	ldr	r2, [sp, #8]
 800f1fa:	4240      	negs	r0, r0
 800f1fc:	6013      	str	r3, [r2, #0]
 800f1fe:	89a2      	ldrh	r2, [r4, #12]
 800f200:	3334      	adds	r3, #52	@ 0x34
 800f202:	4313      	orrs	r3, r2
 800f204:	81a3      	strh	r3, [r4, #12]
 800f206:	e7e9      	b.n	800f1dc <__ssputs_r+0x90>
 800f208:	fffffb7f 	.word	0xfffffb7f

0800f20c <_svfiprintf_r>:
 800f20c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f20e:	b0a1      	sub	sp, #132	@ 0x84
 800f210:	9003      	str	r0, [sp, #12]
 800f212:	001d      	movs	r5, r3
 800f214:	898b      	ldrh	r3, [r1, #12]
 800f216:	000f      	movs	r7, r1
 800f218:	0016      	movs	r6, r2
 800f21a:	061b      	lsls	r3, r3, #24
 800f21c:	d511      	bpl.n	800f242 <_svfiprintf_r+0x36>
 800f21e:	690b      	ldr	r3, [r1, #16]
 800f220:	2b00      	cmp	r3, #0
 800f222:	d10e      	bne.n	800f242 <_svfiprintf_r+0x36>
 800f224:	2140      	movs	r1, #64	@ 0x40
 800f226:	f7ff fb5d 	bl	800e8e4 <_malloc_r>
 800f22a:	6038      	str	r0, [r7, #0]
 800f22c:	6138      	str	r0, [r7, #16]
 800f22e:	2800      	cmp	r0, #0
 800f230:	d105      	bne.n	800f23e <_svfiprintf_r+0x32>
 800f232:	230c      	movs	r3, #12
 800f234:	9a03      	ldr	r2, [sp, #12]
 800f236:	6013      	str	r3, [r2, #0]
 800f238:	2001      	movs	r0, #1
 800f23a:	4240      	negs	r0, r0
 800f23c:	e0cf      	b.n	800f3de <_svfiprintf_r+0x1d2>
 800f23e:	2340      	movs	r3, #64	@ 0x40
 800f240:	617b      	str	r3, [r7, #20]
 800f242:	2300      	movs	r3, #0
 800f244:	ac08      	add	r4, sp, #32
 800f246:	6163      	str	r3, [r4, #20]
 800f248:	3320      	adds	r3, #32
 800f24a:	7663      	strb	r3, [r4, #25]
 800f24c:	3310      	adds	r3, #16
 800f24e:	76a3      	strb	r3, [r4, #26]
 800f250:	9507      	str	r5, [sp, #28]
 800f252:	0035      	movs	r5, r6
 800f254:	782b      	ldrb	r3, [r5, #0]
 800f256:	2b00      	cmp	r3, #0
 800f258:	d001      	beq.n	800f25e <_svfiprintf_r+0x52>
 800f25a:	2b25      	cmp	r3, #37	@ 0x25
 800f25c:	d148      	bne.n	800f2f0 <_svfiprintf_r+0xe4>
 800f25e:	1bab      	subs	r3, r5, r6
 800f260:	9305      	str	r3, [sp, #20]
 800f262:	42b5      	cmp	r5, r6
 800f264:	d00b      	beq.n	800f27e <_svfiprintf_r+0x72>
 800f266:	0032      	movs	r2, r6
 800f268:	0039      	movs	r1, r7
 800f26a:	9803      	ldr	r0, [sp, #12]
 800f26c:	f7ff ff6e 	bl	800f14c <__ssputs_r>
 800f270:	3001      	adds	r0, #1
 800f272:	d100      	bne.n	800f276 <_svfiprintf_r+0x6a>
 800f274:	e0ae      	b.n	800f3d4 <_svfiprintf_r+0x1c8>
 800f276:	6963      	ldr	r3, [r4, #20]
 800f278:	9a05      	ldr	r2, [sp, #20]
 800f27a:	189b      	adds	r3, r3, r2
 800f27c:	6163      	str	r3, [r4, #20]
 800f27e:	782b      	ldrb	r3, [r5, #0]
 800f280:	2b00      	cmp	r3, #0
 800f282:	d100      	bne.n	800f286 <_svfiprintf_r+0x7a>
 800f284:	e0a6      	b.n	800f3d4 <_svfiprintf_r+0x1c8>
 800f286:	2201      	movs	r2, #1
 800f288:	2300      	movs	r3, #0
 800f28a:	4252      	negs	r2, r2
 800f28c:	6062      	str	r2, [r4, #4]
 800f28e:	a904      	add	r1, sp, #16
 800f290:	3254      	adds	r2, #84	@ 0x54
 800f292:	1852      	adds	r2, r2, r1
 800f294:	1c6e      	adds	r6, r5, #1
 800f296:	6023      	str	r3, [r4, #0]
 800f298:	60e3      	str	r3, [r4, #12]
 800f29a:	60a3      	str	r3, [r4, #8]
 800f29c:	7013      	strb	r3, [r2, #0]
 800f29e:	65a3      	str	r3, [r4, #88]	@ 0x58
 800f2a0:	4b54      	ldr	r3, [pc, #336]	@ (800f3f4 <_svfiprintf_r+0x1e8>)
 800f2a2:	2205      	movs	r2, #5
 800f2a4:	0018      	movs	r0, r3
 800f2a6:	7831      	ldrb	r1, [r6, #0]
 800f2a8:	9305      	str	r3, [sp, #20]
 800f2aa:	f7fe fc0e 	bl	800daca <memchr>
 800f2ae:	1c75      	adds	r5, r6, #1
 800f2b0:	2800      	cmp	r0, #0
 800f2b2:	d11f      	bne.n	800f2f4 <_svfiprintf_r+0xe8>
 800f2b4:	6822      	ldr	r2, [r4, #0]
 800f2b6:	06d3      	lsls	r3, r2, #27
 800f2b8:	d504      	bpl.n	800f2c4 <_svfiprintf_r+0xb8>
 800f2ba:	2353      	movs	r3, #83	@ 0x53
 800f2bc:	a904      	add	r1, sp, #16
 800f2be:	185b      	adds	r3, r3, r1
 800f2c0:	2120      	movs	r1, #32
 800f2c2:	7019      	strb	r1, [r3, #0]
 800f2c4:	0713      	lsls	r3, r2, #28
 800f2c6:	d504      	bpl.n	800f2d2 <_svfiprintf_r+0xc6>
 800f2c8:	2353      	movs	r3, #83	@ 0x53
 800f2ca:	a904      	add	r1, sp, #16
 800f2cc:	185b      	adds	r3, r3, r1
 800f2ce:	212b      	movs	r1, #43	@ 0x2b
 800f2d0:	7019      	strb	r1, [r3, #0]
 800f2d2:	7833      	ldrb	r3, [r6, #0]
 800f2d4:	2b2a      	cmp	r3, #42	@ 0x2a
 800f2d6:	d016      	beq.n	800f306 <_svfiprintf_r+0xfa>
 800f2d8:	0035      	movs	r5, r6
 800f2da:	2100      	movs	r1, #0
 800f2dc:	200a      	movs	r0, #10
 800f2de:	68e3      	ldr	r3, [r4, #12]
 800f2e0:	782a      	ldrb	r2, [r5, #0]
 800f2e2:	1c6e      	adds	r6, r5, #1
 800f2e4:	3a30      	subs	r2, #48	@ 0x30
 800f2e6:	2a09      	cmp	r2, #9
 800f2e8:	d950      	bls.n	800f38c <_svfiprintf_r+0x180>
 800f2ea:	2900      	cmp	r1, #0
 800f2ec:	d111      	bne.n	800f312 <_svfiprintf_r+0x106>
 800f2ee:	e017      	b.n	800f320 <_svfiprintf_r+0x114>
 800f2f0:	3501      	adds	r5, #1
 800f2f2:	e7af      	b.n	800f254 <_svfiprintf_r+0x48>
 800f2f4:	9b05      	ldr	r3, [sp, #20]
 800f2f6:	6822      	ldr	r2, [r4, #0]
 800f2f8:	1ac0      	subs	r0, r0, r3
 800f2fa:	2301      	movs	r3, #1
 800f2fc:	4083      	lsls	r3, r0
 800f2fe:	4313      	orrs	r3, r2
 800f300:	002e      	movs	r6, r5
 800f302:	6023      	str	r3, [r4, #0]
 800f304:	e7cc      	b.n	800f2a0 <_svfiprintf_r+0x94>
 800f306:	9b07      	ldr	r3, [sp, #28]
 800f308:	1d19      	adds	r1, r3, #4
 800f30a:	681b      	ldr	r3, [r3, #0]
 800f30c:	9107      	str	r1, [sp, #28]
 800f30e:	2b00      	cmp	r3, #0
 800f310:	db01      	blt.n	800f316 <_svfiprintf_r+0x10a>
 800f312:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f314:	e004      	b.n	800f320 <_svfiprintf_r+0x114>
 800f316:	425b      	negs	r3, r3
 800f318:	60e3      	str	r3, [r4, #12]
 800f31a:	2302      	movs	r3, #2
 800f31c:	4313      	orrs	r3, r2
 800f31e:	6023      	str	r3, [r4, #0]
 800f320:	782b      	ldrb	r3, [r5, #0]
 800f322:	2b2e      	cmp	r3, #46	@ 0x2e
 800f324:	d10c      	bne.n	800f340 <_svfiprintf_r+0x134>
 800f326:	786b      	ldrb	r3, [r5, #1]
 800f328:	2b2a      	cmp	r3, #42	@ 0x2a
 800f32a:	d134      	bne.n	800f396 <_svfiprintf_r+0x18a>
 800f32c:	9b07      	ldr	r3, [sp, #28]
 800f32e:	3502      	adds	r5, #2
 800f330:	1d1a      	adds	r2, r3, #4
 800f332:	681b      	ldr	r3, [r3, #0]
 800f334:	9207      	str	r2, [sp, #28]
 800f336:	2b00      	cmp	r3, #0
 800f338:	da01      	bge.n	800f33e <_svfiprintf_r+0x132>
 800f33a:	2301      	movs	r3, #1
 800f33c:	425b      	negs	r3, r3
 800f33e:	9309      	str	r3, [sp, #36]	@ 0x24
 800f340:	4e2d      	ldr	r6, [pc, #180]	@ (800f3f8 <_svfiprintf_r+0x1ec>)
 800f342:	2203      	movs	r2, #3
 800f344:	0030      	movs	r0, r6
 800f346:	7829      	ldrb	r1, [r5, #0]
 800f348:	f7fe fbbf 	bl	800daca <memchr>
 800f34c:	2800      	cmp	r0, #0
 800f34e:	d006      	beq.n	800f35e <_svfiprintf_r+0x152>
 800f350:	2340      	movs	r3, #64	@ 0x40
 800f352:	1b80      	subs	r0, r0, r6
 800f354:	4083      	lsls	r3, r0
 800f356:	6822      	ldr	r2, [r4, #0]
 800f358:	3501      	adds	r5, #1
 800f35a:	4313      	orrs	r3, r2
 800f35c:	6023      	str	r3, [r4, #0]
 800f35e:	7829      	ldrb	r1, [r5, #0]
 800f360:	2206      	movs	r2, #6
 800f362:	4826      	ldr	r0, [pc, #152]	@ (800f3fc <_svfiprintf_r+0x1f0>)
 800f364:	1c6e      	adds	r6, r5, #1
 800f366:	7621      	strb	r1, [r4, #24]
 800f368:	f7fe fbaf 	bl	800daca <memchr>
 800f36c:	2800      	cmp	r0, #0
 800f36e:	d038      	beq.n	800f3e2 <_svfiprintf_r+0x1d6>
 800f370:	4b23      	ldr	r3, [pc, #140]	@ (800f400 <_svfiprintf_r+0x1f4>)
 800f372:	2b00      	cmp	r3, #0
 800f374:	d122      	bne.n	800f3bc <_svfiprintf_r+0x1b0>
 800f376:	2207      	movs	r2, #7
 800f378:	9b07      	ldr	r3, [sp, #28]
 800f37a:	3307      	adds	r3, #7
 800f37c:	4393      	bics	r3, r2
 800f37e:	3308      	adds	r3, #8
 800f380:	9307      	str	r3, [sp, #28]
 800f382:	6963      	ldr	r3, [r4, #20]
 800f384:	9a04      	ldr	r2, [sp, #16]
 800f386:	189b      	adds	r3, r3, r2
 800f388:	6163      	str	r3, [r4, #20]
 800f38a:	e762      	b.n	800f252 <_svfiprintf_r+0x46>
 800f38c:	4343      	muls	r3, r0
 800f38e:	0035      	movs	r5, r6
 800f390:	2101      	movs	r1, #1
 800f392:	189b      	adds	r3, r3, r2
 800f394:	e7a4      	b.n	800f2e0 <_svfiprintf_r+0xd4>
 800f396:	2300      	movs	r3, #0
 800f398:	200a      	movs	r0, #10
 800f39a:	0019      	movs	r1, r3
 800f39c:	3501      	adds	r5, #1
 800f39e:	6063      	str	r3, [r4, #4]
 800f3a0:	782a      	ldrb	r2, [r5, #0]
 800f3a2:	1c6e      	adds	r6, r5, #1
 800f3a4:	3a30      	subs	r2, #48	@ 0x30
 800f3a6:	2a09      	cmp	r2, #9
 800f3a8:	d903      	bls.n	800f3b2 <_svfiprintf_r+0x1a6>
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	d0c8      	beq.n	800f340 <_svfiprintf_r+0x134>
 800f3ae:	9109      	str	r1, [sp, #36]	@ 0x24
 800f3b0:	e7c6      	b.n	800f340 <_svfiprintf_r+0x134>
 800f3b2:	4341      	muls	r1, r0
 800f3b4:	0035      	movs	r5, r6
 800f3b6:	2301      	movs	r3, #1
 800f3b8:	1889      	adds	r1, r1, r2
 800f3ba:	e7f1      	b.n	800f3a0 <_svfiprintf_r+0x194>
 800f3bc:	aa07      	add	r2, sp, #28
 800f3be:	9200      	str	r2, [sp, #0]
 800f3c0:	0021      	movs	r1, r4
 800f3c2:	003a      	movs	r2, r7
 800f3c4:	4b0f      	ldr	r3, [pc, #60]	@ (800f404 <_svfiprintf_r+0x1f8>)
 800f3c6:	9803      	ldr	r0, [sp, #12]
 800f3c8:	f7fd fdc4 	bl	800cf54 <_printf_float>
 800f3cc:	9004      	str	r0, [sp, #16]
 800f3ce:	9b04      	ldr	r3, [sp, #16]
 800f3d0:	3301      	adds	r3, #1
 800f3d2:	d1d6      	bne.n	800f382 <_svfiprintf_r+0x176>
 800f3d4:	89bb      	ldrh	r3, [r7, #12]
 800f3d6:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800f3d8:	065b      	lsls	r3, r3, #25
 800f3da:	d500      	bpl.n	800f3de <_svfiprintf_r+0x1d2>
 800f3dc:	e72c      	b.n	800f238 <_svfiprintf_r+0x2c>
 800f3de:	b021      	add	sp, #132	@ 0x84
 800f3e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f3e2:	aa07      	add	r2, sp, #28
 800f3e4:	9200      	str	r2, [sp, #0]
 800f3e6:	0021      	movs	r1, r4
 800f3e8:	003a      	movs	r2, r7
 800f3ea:	4b06      	ldr	r3, [pc, #24]	@ (800f404 <_svfiprintf_r+0x1f8>)
 800f3ec:	9803      	ldr	r0, [sp, #12]
 800f3ee:	f7fe f85f 	bl	800d4b0 <_printf_i>
 800f3f2:	e7eb      	b.n	800f3cc <_svfiprintf_r+0x1c0>
 800f3f4:	08010958 	.word	0x08010958
 800f3f8:	0801095e 	.word	0x0801095e
 800f3fc:	08010962 	.word	0x08010962
 800f400:	0800cf55 	.word	0x0800cf55
 800f404:	0800f14d 	.word	0x0800f14d

0800f408 <__sfputc_r>:
 800f408:	6893      	ldr	r3, [r2, #8]
 800f40a:	b510      	push	{r4, lr}
 800f40c:	3b01      	subs	r3, #1
 800f40e:	6093      	str	r3, [r2, #8]
 800f410:	2b00      	cmp	r3, #0
 800f412:	da04      	bge.n	800f41e <__sfputc_r+0x16>
 800f414:	6994      	ldr	r4, [r2, #24]
 800f416:	42a3      	cmp	r3, r4
 800f418:	db07      	blt.n	800f42a <__sfputc_r+0x22>
 800f41a:	290a      	cmp	r1, #10
 800f41c:	d005      	beq.n	800f42a <__sfputc_r+0x22>
 800f41e:	6813      	ldr	r3, [r2, #0]
 800f420:	1c58      	adds	r0, r3, #1
 800f422:	6010      	str	r0, [r2, #0]
 800f424:	7019      	strb	r1, [r3, #0]
 800f426:	0008      	movs	r0, r1
 800f428:	bd10      	pop	{r4, pc}
 800f42a:	f000 f9e2 	bl	800f7f2 <__swbuf_r>
 800f42e:	0001      	movs	r1, r0
 800f430:	e7f9      	b.n	800f426 <__sfputc_r+0x1e>

0800f432 <__sfputs_r>:
 800f432:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f434:	0006      	movs	r6, r0
 800f436:	000f      	movs	r7, r1
 800f438:	0014      	movs	r4, r2
 800f43a:	18d5      	adds	r5, r2, r3
 800f43c:	42ac      	cmp	r4, r5
 800f43e:	d101      	bne.n	800f444 <__sfputs_r+0x12>
 800f440:	2000      	movs	r0, #0
 800f442:	e007      	b.n	800f454 <__sfputs_r+0x22>
 800f444:	7821      	ldrb	r1, [r4, #0]
 800f446:	003a      	movs	r2, r7
 800f448:	0030      	movs	r0, r6
 800f44a:	f7ff ffdd 	bl	800f408 <__sfputc_r>
 800f44e:	3401      	adds	r4, #1
 800f450:	1c43      	adds	r3, r0, #1
 800f452:	d1f3      	bne.n	800f43c <__sfputs_r+0xa>
 800f454:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f458 <_vfiprintf_r>:
 800f458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f45a:	b0a1      	sub	sp, #132	@ 0x84
 800f45c:	000f      	movs	r7, r1
 800f45e:	0015      	movs	r5, r2
 800f460:	001e      	movs	r6, r3
 800f462:	9003      	str	r0, [sp, #12]
 800f464:	2800      	cmp	r0, #0
 800f466:	d004      	beq.n	800f472 <_vfiprintf_r+0x1a>
 800f468:	6a03      	ldr	r3, [r0, #32]
 800f46a:	2b00      	cmp	r3, #0
 800f46c:	d101      	bne.n	800f472 <_vfiprintf_r+0x1a>
 800f46e:	f7fe f9bd 	bl	800d7ec <__sinit>
 800f472:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f474:	07db      	lsls	r3, r3, #31
 800f476:	d405      	bmi.n	800f484 <_vfiprintf_r+0x2c>
 800f478:	89bb      	ldrh	r3, [r7, #12]
 800f47a:	059b      	lsls	r3, r3, #22
 800f47c:	d402      	bmi.n	800f484 <_vfiprintf_r+0x2c>
 800f47e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800f480:	f7fe fb21 	bl	800dac6 <__retarget_lock_acquire_recursive>
 800f484:	89bb      	ldrh	r3, [r7, #12]
 800f486:	071b      	lsls	r3, r3, #28
 800f488:	d502      	bpl.n	800f490 <_vfiprintf_r+0x38>
 800f48a:	693b      	ldr	r3, [r7, #16]
 800f48c:	2b00      	cmp	r3, #0
 800f48e:	d113      	bne.n	800f4b8 <_vfiprintf_r+0x60>
 800f490:	0039      	movs	r1, r7
 800f492:	9803      	ldr	r0, [sp, #12]
 800f494:	f000 f9f0 	bl	800f878 <__swsetup_r>
 800f498:	2800      	cmp	r0, #0
 800f49a:	d00d      	beq.n	800f4b8 <_vfiprintf_r+0x60>
 800f49c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f49e:	07db      	lsls	r3, r3, #31
 800f4a0:	d503      	bpl.n	800f4aa <_vfiprintf_r+0x52>
 800f4a2:	2001      	movs	r0, #1
 800f4a4:	4240      	negs	r0, r0
 800f4a6:	b021      	add	sp, #132	@ 0x84
 800f4a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f4aa:	89bb      	ldrh	r3, [r7, #12]
 800f4ac:	059b      	lsls	r3, r3, #22
 800f4ae:	d4f8      	bmi.n	800f4a2 <_vfiprintf_r+0x4a>
 800f4b0:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800f4b2:	f7fe fb09 	bl	800dac8 <__retarget_lock_release_recursive>
 800f4b6:	e7f4      	b.n	800f4a2 <_vfiprintf_r+0x4a>
 800f4b8:	2300      	movs	r3, #0
 800f4ba:	ac08      	add	r4, sp, #32
 800f4bc:	6163      	str	r3, [r4, #20]
 800f4be:	3320      	adds	r3, #32
 800f4c0:	7663      	strb	r3, [r4, #25]
 800f4c2:	3310      	adds	r3, #16
 800f4c4:	76a3      	strb	r3, [r4, #26]
 800f4c6:	9607      	str	r6, [sp, #28]
 800f4c8:	002e      	movs	r6, r5
 800f4ca:	7833      	ldrb	r3, [r6, #0]
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	d001      	beq.n	800f4d4 <_vfiprintf_r+0x7c>
 800f4d0:	2b25      	cmp	r3, #37	@ 0x25
 800f4d2:	d148      	bne.n	800f566 <_vfiprintf_r+0x10e>
 800f4d4:	1b73      	subs	r3, r6, r5
 800f4d6:	9305      	str	r3, [sp, #20]
 800f4d8:	42ae      	cmp	r6, r5
 800f4da:	d00b      	beq.n	800f4f4 <_vfiprintf_r+0x9c>
 800f4dc:	002a      	movs	r2, r5
 800f4de:	0039      	movs	r1, r7
 800f4e0:	9803      	ldr	r0, [sp, #12]
 800f4e2:	f7ff ffa6 	bl	800f432 <__sfputs_r>
 800f4e6:	3001      	adds	r0, #1
 800f4e8:	d100      	bne.n	800f4ec <_vfiprintf_r+0x94>
 800f4ea:	e0ae      	b.n	800f64a <_vfiprintf_r+0x1f2>
 800f4ec:	6963      	ldr	r3, [r4, #20]
 800f4ee:	9a05      	ldr	r2, [sp, #20]
 800f4f0:	189b      	adds	r3, r3, r2
 800f4f2:	6163      	str	r3, [r4, #20]
 800f4f4:	7833      	ldrb	r3, [r6, #0]
 800f4f6:	2b00      	cmp	r3, #0
 800f4f8:	d100      	bne.n	800f4fc <_vfiprintf_r+0xa4>
 800f4fa:	e0a6      	b.n	800f64a <_vfiprintf_r+0x1f2>
 800f4fc:	2201      	movs	r2, #1
 800f4fe:	2300      	movs	r3, #0
 800f500:	4252      	negs	r2, r2
 800f502:	6062      	str	r2, [r4, #4]
 800f504:	a904      	add	r1, sp, #16
 800f506:	3254      	adds	r2, #84	@ 0x54
 800f508:	1852      	adds	r2, r2, r1
 800f50a:	1c75      	adds	r5, r6, #1
 800f50c:	6023      	str	r3, [r4, #0]
 800f50e:	60e3      	str	r3, [r4, #12]
 800f510:	60a3      	str	r3, [r4, #8]
 800f512:	7013      	strb	r3, [r2, #0]
 800f514:	65a3      	str	r3, [r4, #88]	@ 0x58
 800f516:	4b59      	ldr	r3, [pc, #356]	@ (800f67c <_vfiprintf_r+0x224>)
 800f518:	2205      	movs	r2, #5
 800f51a:	0018      	movs	r0, r3
 800f51c:	7829      	ldrb	r1, [r5, #0]
 800f51e:	9305      	str	r3, [sp, #20]
 800f520:	f7fe fad3 	bl	800daca <memchr>
 800f524:	1c6e      	adds	r6, r5, #1
 800f526:	2800      	cmp	r0, #0
 800f528:	d11f      	bne.n	800f56a <_vfiprintf_r+0x112>
 800f52a:	6822      	ldr	r2, [r4, #0]
 800f52c:	06d3      	lsls	r3, r2, #27
 800f52e:	d504      	bpl.n	800f53a <_vfiprintf_r+0xe2>
 800f530:	2353      	movs	r3, #83	@ 0x53
 800f532:	a904      	add	r1, sp, #16
 800f534:	185b      	adds	r3, r3, r1
 800f536:	2120      	movs	r1, #32
 800f538:	7019      	strb	r1, [r3, #0]
 800f53a:	0713      	lsls	r3, r2, #28
 800f53c:	d504      	bpl.n	800f548 <_vfiprintf_r+0xf0>
 800f53e:	2353      	movs	r3, #83	@ 0x53
 800f540:	a904      	add	r1, sp, #16
 800f542:	185b      	adds	r3, r3, r1
 800f544:	212b      	movs	r1, #43	@ 0x2b
 800f546:	7019      	strb	r1, [r3, #0]
 800f548:	782b      	ldrb	r3, [r5, #0]
 800f54a:	2b2a      	cmp	r3, #42	@ 0x2a
 800f54c:	d016      	beq.n	800f57c <_vfiprintf_r+0x124>
 800f54e:	002e      	movs	r6, r5
 800f550:	2100      	movs	r1, #0
 800f552:	200a      	movs	r0, #10
 800f554:	68e3      	ldr	r3, [r4, #12]
 800f556:	7832      	ldrb	r2, [r6, #0]
 800f558:	1c75      	adds	r5, r6, #1
 800f55a:	3a30      	subs	r2, #48	@ 0x30
 800f55c:	2a09      	cmp	r2, #9
 800f55e:	d950      	bls.n	800f602 <_vfiprintf_r+0x1aa>
 800f560:	2900      	cmp	r1, #0
 800f562:	d111      	bne.n	800f588 <_vfiprintf_r+0x130>
 800f564:	e017      	b.n	800f596 <_vfiprintf_r+0x13e>
 800f566:	3601      	adds	r6, #1
 800f568:	e7af      	b.n	800f4ca <_vfiprintf_r+0x72>
 800f56a:	9b05      	ldr	r3, [sp, #20]
 800f56c:	6822      	ldr	r2, [r4, #0]
 800f56e:	1ac0      	subs	r0, r0, r3
 800f570:	2301      	movs	r3, #1
 800f572:	4083      	lsls	r3, r0
 800f574:	4313      	orrs	r3, r2
 800f576:	0035      	movs	r5, r6
 800f578:	6023      	str	r3, [r4, #0]
 800f57a:	e7cc      	b.n	800f516 <_vfiprintf_r+0xbe>
 800f57c:	9b07      	ldr	r3, [sp, #28]
 800f57e:	1d19      	adds	r1, r3, #4
 800f580:	681b      	ldr	r3, [r3, #0]
 800f582:	9107      	str	r1, [sp, #28]
 800f584:	2b00      	cmp	r3, #0
 800f586:	db01      	blt.n	800f58c <_vfiprintf_r+0x134>
 800f588:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f58a:	e004      	b.n	800f596 <_vfiprintf_r+0x13e>
 800f58c:	425b      	negs	r3, r3
 800f58e:	60e3      	str	r3, [r4, #12]
 800f590:	2302      	movs	r3, #2
 800f592:	4313      	orrs	r3, r2
 800f594:	6023      	str	r3, [r4, #0]
 800f596:	7833      	ldrb	r3, [r6, #0]
 800f598:	2b2e      	cmp	r3, #46	@ 0x2e
 800f59a:	d10c      	bne.n	800f5b6 <_vfiprintf_r+0x15e>
 800f59c:	7873      	ldrb	r3, [r6, #1]
 800f59e:	2b2a      	cmp	r3, #42	@ 0x2a
 800f5a0:	d134      	bne.n	800f60c <_vfiprintf_r+0x1b4>
 800f5a2:	9b07      	ldr	r3, [sp, #28]
 800f5a4:	3602      	adds	r6, #2
 800f5a6:	1d1a      	adds	r2, r3, #4
 800f5a8:	681b      	ldr	r3, [r3, #0]
 800f5aa:	9207      	str	r2, [sp, #28]
 800f5ac:	2b00      	cmp	r3, #0
 800f5ae:	da01      	bge.n	800f5b4 <_vfiprintf_r+0x15c>
 800f5b0:	2301      	movs	r3, #1
 800f5b2:	425b      	negs	r3, r3
 800f5b4:	9309      	str	r3, [sp, #36]	@ 0x24
 800f5b6:	4d32      	ldr	r5, [pc, #200]	@ (800f680 <_vfiprintf_r+0x228>)
 800f5b8:	2203      	movs	r2, #3
 800f5ba:	0028      	movs	r0, r5
 800f5bc:	7831      	ldrb	r1, [r6, #0]
 800f5be:	f7fe fa84 	bl	800daca <memchr>
 800f5c2:	2800      	cmp	r0, #0
 800f5c4:	d006      	beq.n	800f5d4 <_vfiprintf_r+0x17c>
 800f5c6:	2340      	movs	r3, #64	@ 0x40
 800f5c8:	1b40      	subs	r0, r0, r5
 800f5ca:	4083      	lsls	r3, r0
 800f5cc:	6822      	ldr	r2, [r4, #0]
 800f5ce:	3601      	adds	r6, #1
 800f5d0:	4313      	orrs	r3, r2
 800f5d2:	6023      	str	r3, [r4, #0]
 800f5d4:	7831      	ldrb	r1, [r6, #0]
 800f5d6:	2206      	movs	r2, #6
 800f5d8:	482a      	ldr	r0, [pc, #168]	@ (800f684 <_vfiprintf_r+0x22c>)
 800f5da:	1c75      	adds	r5, r6, #1
 800f5dc:	7621      	strb	r1, [r4, #24]
 800f5de:	f7fe fa74 	bl	800daca <memchr>
 800f5e2:	2800      	cmp	r0, #0
 800f5e4:	d040      	beq.n	800f668 <_vfiprintf_r+0x210>
 800f5e6:	4b28      	ldr	r3, [pc, #160]	@ (800f688 <_vfiprintf_r+0x230>)
 800f5e8:	2b00      	cmp	r3, #0
 800f5ea:	d122      	bne.n	800f632 <_vfiprintf_r+0x1da>
 800f5ec:	2207      	movs	r2, #7
 800f5ee:	9b07      	ldr	r3, [sp, #28]
 800f5f0:	3307      	adds	r3, #7
 800f5f2:	4393      	bics	r3, r2
 800f5f4:	3308      	adds	r3, #8
 800f5f6:	9307      	str	r3, [sp, #28]
 800f5f8:	6963      	ldr	r3, [r4, #20]
 800f5fa:	9a04      	ldr	r2, [sp, #16]
 800f5fc:	189b      	adds	r3, r3, r2
 800f5fe:	6163      	str	r3, [r4, #20]
 800f600:	e762      	b.n	800f4c8 <_vfiprintf_r+0x70>
 800f602:	4343      	muls	r3, r0
 800f604:	002e      	movs	r6, r5
 800f606:	2101      	movs	r1, #1
 800f608:	189b      	adds	r3, r3, r2
 800f60a:	e7a4      	b.n	800f556 <_vfiprintf_r+0xfe>
 800f60c:	2300      	movs	r3, #0
 800f60e:	200a      	movs	r0, #10
 800f610:	0019      	movs	r1, r3
 800f612:	3601      	adds	r6, #1
 800f614:	6063      	str	r3, [r4, #4]
 800f616:	7832      	ldrb	r2, [r6, #0]
 800f618:	1c75      	adds	r5, r6, #1
 800f61a:	3a30      	subs	r2, #48	@ 0x30
 800f61c:	2a09      	cmp	r2, #9
 800f61e:	d903      	bls.n	800f628 <_vfiprintf_r+0x1d0>
 800f620:	2b00      	cmp	r3, #0
 800f622:	d0c8      	beq.n	800f5b6 <_vfiprintf_r+0x15e>
 800f624:	9109      	str	r1, [sp, #36]	@ 0x24
 800f626:	e7c6      	b.n	800f5b6 <_vfiprintf_r+0x15e>
 800f628:	4341      	muls	r1, r0
 800f62a:	002e      	movs	r6, r5
 800f62c:	2301      	movs	r3, #1
 800f62e:	1889      	adds	r1, r1, r2
 800f630:	e7f1      	b.n	800f616 <_vfiprintf_r+0x1be>
 800f632:	aa07      	add	r2, sp, #28
 800f634:	9200      	str	r2, [sp, #0]
 800f636:	0021      	movs	r1, r4
 800f638:	003a      	movs	r2, r7
 800f63a:	4b14      	ldr	r3, [pc, #80]	@ (800f68c <_vfiprintf_r+0x234>)
 800f63c:	9803      	ldr	r0, [sp, #12]
 800f63e:	f7fd fc89 	bl	800cf54 <_printf_float>
 800f642:	9004      	str	r0, [sp, #16]
 800f644:	9b04      	ldr	r3, [sp, #16]
 800f646:	3301      	adds	r3, #1
 800f648:	d1d6      	bne.n	800f5f8 <_vfiprintf_r+0x1a0>
 800f64a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f64c:	07db      	lsls	r3, r3, #31
 800f64e:	d405      	bmi.n	800f65c <_vfiprintf_r+0x204>
 800f650:	89bb      	ldrh	r3, [r7, #12]
 800f652:	059b      	lsls	r3, r3, #22
 800f654:	d402      	bmi.n	800f65c <_vfiprintf_r+0x204>
 800f656:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800f658:	f7fe fa36 	bl	800dac8 <__retarget_lock_release_recursive>
 800f65c:	89bb      	ldrh	r3, [r7, #12]
 800f65e:	065b      	lsls	r3, r3, #25
 800f660:	d500      	bpl.n	800f664 <_vfiprintf_r+0x20c>
 800f662:	e71e      	b.n	800f4a2 <_vfiprintf_r+0x4a>
 800f664:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800f666:	e71e      	b.n	800f4a6 <_vfiprintf_r+0x4e>
 800f668:	aa07      	add	r2, sp, #28
 800f66a:	9200      	str	r2, [sp, #0]
 800f66c:	0021      	movs	r1, r4
 800f66e:	003a      	movs	r2, r7
 800f670:	4b06      	ldr	r3, [pc, #24]	@ (800f68c <_vfiprintf_r+0x234>)
 800f672:	9803      	ldr	r0, [sp, #12]
 800f674:	f7fd ff1c 	bl	800d4b0 <_printf_i>
 800f678:	e7e3      	b.n	800f642 <_vfiprintf_r+0x1ea>
 800f67a:	46c0      	nop			@ (mov r8, r8)
 800f67c:	08010958 	.word	0x08010958
 800f680:	0801095e 	.word	0x0801095e
 800f684:	08010962 	.word	0x08010962
 800f688:	0800cf55 	.word	0x0800cf55
 800f68c:	0800f433 	.word	0x0800f433

0800f690 <__sflush_r>:
 800f690:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f692:	220c      	movs	r2, #12
 800f694:	5e8b      	ldrsh	r3, [r1, r2]
 800f696:	0005      	movs	r5, r0
 800f698:	000c      	movs	r4, r1
 800f69a:	071a      	lsls	r2, r3, #28
 800f69c:	d456      	bmi.n	800f74c <__sflush_r+0xbc>
 800f69e:	684a      	ldr	r2, [r1, #4]
 800f6a0:	2a00      	cmp	r2, #0
 800f6a2:	dc02      	bgt.n	800f6aa <__sflush_r+0x1a>
 800f6a4:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 800f6a6:	2a00      	cmp	r2, #0
 800f6a8:	dd4e      	ble.n	800f748 <__sflush_r+0xb8>
 800f6aa:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800f6ac:	2f00      	cmp	r7, #0
 800f6ae:	d04b      	beq.n	800f748 <__sflush_r+0xb8>
 800f6b0:	2200      	movs	r2, #0
 800f6b2:	2080      	movs	r0, #128	@ 0x80
 800f6b4:	682e      	ldr	r6, [r5, #0]
 800f6b6:	602a      	str	r2, [r5, #0]
 800f6b8:	001a      	movs	r2, r3
 800f6ba:	0140      	lsls	r0, r0, #5
 800f6bc:	6a21      	ldr	r1, [r4, #32]
 800f6be:	4002      	ands	r2, r0
 800f6c0:	4203      	tst	r3, r0
 800f6c2:	d033      	beq.n	800f72c <__sflush_r+0x9c>
 800f6c4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f6c6:	89a3      	ldrh	r3, [r4, #12]
 800f6c8:	075b      	lsls	r3, r3, #29
 800f6ca:	d506      	bpl.n	800f6da <__sflush_r+0x4a>
 800f6cc:	6863      	ldr	r3, [r4, #4]
 800f6ce:	1ad2      	subs	r2, r2, r3
 800f6d0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f6d2:	2b00      	cmp	r3, #0
 800f6d4:	d001      	beq.n	800f6da <__sflush_r+0x4a>
 800f6d6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f6d8:	1ad2      	subs	r2, r2, r3
 800f6da:	2300      	movs	r3, #0
 800f6dc:	0028      	movs	r0, r5
 800f6de:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800f6e0:	6a21      	ldr	r1, [r4, #32]
 800f6e2:	47b8      	blx	r7
 800f6e4:	89a2      	ldrh	r2, [r4, #12]
 800f6e6:	1c43      	adds	r3, r0, #1
 800f6e8:	d106      	bne.n	800f6f8 <__sflush_r+0x68>
 800f6ea:	6829      	ldr	r1, [r5, #0]
 800f6ec:	291d      	cmp	r1, #29
 800f6ee:	d846      	bhi.n	800f77e <__sflush_r+0xee>
 800f6f0:	4b29      	ldr	r3, [pc, #164]	@ (800f798 <__sflush_r+0x108>)
 800f6f2:	410b      	asrs	r3, r1
 800f6f4:	07db      	lsls	r3, r3, #31
 800f6f6:	d442      	bmi.n	800f77e <__sflush_r+0xee>
 800f6f8:	2300      	movs	r3, #0
 800f6fa:	6063      	str	r3, [r4, #4]
 800f6fc:	6923      	ldr	r3, [r4, #16]
 800f6fe:	6023      	str	r3, [r4, #0]
 800f700:	04d2      	lsls	r2, r2, #19
 800f702:	d505      	bpl.n	800f710 <__sflush_r+0x80>
 800f704:	1c43      	adds	r3, r0, #1
 800f706:	d102      	bne.n	800f70e <__sflush_r+0x7e>
 800f708:	682b      	ldr	r3, [r5, #0]
 800f70a:	2b00      	cmp	r3, #0
 800f70c:	d100      	bne.n	800f710 <__sflush_r+0x80>
 800f70e:	6560      	str	r0, [r4, #84]	@ 0x54
 800f710:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f712:	602e      	str	r6, [r5, #0]
 800f714:	2900      	cmp	r1, #0
 800f716:	d017      	beq.n	800f748 <__sflush_r+0xb8>
 800f718:	0023      	movs	r3, r4
 800f71a:	3344      	adds	r3, #68	@ 0x44
 800f71c:	4299      	cmp	r1, r3
 800f71e:	d002      	beq.n	800f726 <__sflush_r+0x96>
 800f720:	0028      	movs	r0, r5
 800f722:	f7ff f869 	bl	800e7f8 <_free_r>
 800f726:	2300      	movs	r3, #0
 800f728:	6363      	str	r3, [r4, #52]	@ 0x34
 800f72a:	e00d      	b.n	800f748 <__sflush_r+0xb8>
 800f72c:	2301      	movs	r3, #1
 800f72e:	0028      	movs	r0, r5
 800f730:	47b8      	blx	r7
 800f732:	0002      	movs	r2, r0
 800f734:	1c43      	adds	r3, r0, #1
 800f736:	d1c6      	bne.n	800f6c6 <__sflush_r+0x36>
 800f738:	682b      	ldr	r3, [r5, #0]
 800f73a:	2b00      	cmp	r3, #0
 800f73c:	d0c3      	beq.n	800f6c6 <__sflush_r+0x36>
 800f73e:	2b1d      	cmp	r3, #29
 800f740:	d001      	beq.n	800f746 <__sflush_r+0xb6>
 800f742:	2b16      	cmp	r3, #22
 800f744:	d11a      	bne.n	800f77c <__sflush_r+0xec>
 800f746:	602e      	str	r6, [r5, #0]
 800f748:	2000      	movs	r0, #0
 800f74a:	e01e      	b.n	800f78a <__sflush_r+0xfa>
 800f74c:	690e      	ldr	r6, [r1, #16]
 800f74e:	2e00      	cmp	r6, #0
 800f750:	d0fa      	beq.n	800f748 <__sflush_r+0xb8>
 800f752:	680f      	ldr	r7, [r1, #0]
 800f754:	600e      	str	r6, [r1, #0]
 800f756:	1bba      	subs	r2, r7, r6
 800f758:	9201      	str	r2, [sp, #4]
 800f75a:	2200      	movs	r2, #0
 800f75c:	079b      	lsls	r3, r3, #30
 800f75e:	d100      	bne.n	800f762 <__sflush_r+0xd2>
 800f760:	694a      	ldr	r2, [r1, #20]
 800f762:	60a2      	str	r2, [r4, #8]
 800f764:	9b01      	ldr	r3, [sp, #4]
 800f766:	2b00      	cmp	r3, #0
 800f768:	ddee      	ble.n	800f748 <__sflush_r+0xb8>
 800f76a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800f76c:	0032      	movs	r2, r6
 800f76e:	001f      	movs	r7, r3
 800f770:	0028      	movs	r0, r5
 800f772:	9b01      	ldr	r3, [sp, #4]
 800f774:	6a21      	ldr	r1, [r4, #32]
 800f776:	47b8      	blx	r7
 800f778:	2800      	cmp	r0, #0
 800f77a:	dc07      	bgt.n	800f78c <__sflush_r+0xfc>
 800f77c:	89a2      	ldrh	r2, [r4, #12]
 800f77e:	2340      	movs	r3, #64	@ 0x40
 800f780:	2001      	movs	r0, #1
 800f782:	4313      	orrs	r3, r2
 800f784:	b21b      	sxth	r3, r3
 800f786:	81a3      	strh	r3, [r4, #12]
 800f788:	4240      	negs	r0, r0
 800f78a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800f78c:	9b01      	ldr	r3, [sp, #4]
 800f78e:	1836      	adds	r6, r6, r0
 800f790:	1a1b      	subs	r3, r3, r0
 800f792:	9301      	str	r3, [sp, #4]
 800f794:	e7e6      	b.n	800f764 <__sflush_r+0xd4>
 800f796:	46c0      	nop			@ (mov r8, r8)
 800f798:	dfbffffe 	.word	0xdfbffffe

0800f79c <_fflush_r>:
 800f79c:	690b      	ldr	r3, [r1, #16]
 800f79e:	b570      	push	{r4, r5, r6, lr}
 800f7a0:	0005      	movs	r5, r0
 800f7a2:	000c      	movs	r4, r1
 800f7a4:	2b00      	cmp	r3, #0
 800f7a6:	d102      	bne.n	800f7ae <_fflush_r+0x12>
 800f7a8:	2500      	movs	r5, #0
 800f7aa:	0028      	movs	r0, r5
 800f7ac:	bd70      	pop	{r4, r5, r6, pc}
 800f7ae:	2800      	cmp	r0, #0
 800f7b0:	d004      	beq.n	800f7bc <_fflush_r+0x20>
 800f7b2:	6a03      	ldr	r3, [r0, #32]
 800f7b4:	2b00      	cmp	r3, #0
 800f7b6:	d101      	bne.n	800f7bc <_fflush_r+0x20>
 800f7b8:	f7fe f818 	bl	800d7ec <__sinit>
 800f7bc:	220c      	movs	r2, #12
 800f7be:	5ea3      	ldrsh	r3, [r4, r2]
 800f7c0:	2b00      	cmp	r3, #0
 800f7c2:	d0f1      	beq.n	800f7a8 <_fflush_r+0xc>
 800f7c4:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f7c6:	07d2      	lsls	r2, r2, #31
 800f7c8:	d404      	bmi.n	800f7d4 <_fflush_r+0x38>
 800f7ca:	059b      	lsls	r3, r3, #22
 800f7cc:	d402      	bmi.n	800f7d4 <_fflush_r+0x38>
 800f7ce:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f7d0:	f7fe f979 	bl	800dac6 <__retarget_lock_acquire_recursive>
 800f7d4:	0028      	movs	r0, r5
 800f7d6:	0021      	movs	r1, r4
 800f7d8:	f7ff ff5a 	bl	800f690 <__sflush_r>
 800f7dc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f7de:	0005      	movs	r5, r0
 800f7e0:	07db      	lsls	r3, r3, #31
 800f7e2:	d4e2      	bmi.n	800f7aa <_fflush_r+0xe>
 800f7e4:	89a3      	ldrh	r3, [r4, #12]
 800f7e6:	059b      	lsls	r3, r3, #22
 800f7e8:	d4df      	bmi.n	800f7aa <_fflush_r+0xe>
 800f7ea:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f7ec:	f7fe f96c 	bl	800dac8 <__retarget_lock_release_recursive>
 800f7f0:	e7db      	b.n	800f7aa <_fflush_r+0xe>

0800f7f2 <__swbuf_r>:
 800f7f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f7f4:	0006      	movs	r6, r0
 800f7f6:	000d      	movs	r5, r1
 800f7f8:	0014      	movs	r4, r2
 800f7fa:	2800      	cmp	r0, #0
 800f7fc:	d004      	beq.n	800f808 <__swbuf_r+0x16>
 800f7fe:	6a03      	ldr	r3, [r0, #32]
 800f800:	2b00      	cmp	r3, #0
 800f802:	d101      	bne.n	800f808 <__swbuf_r+0x16>
 800f804:	f7fd fff2 	bl	800d7ec <__sinit>
 800f808:	69a3      	ldr	r3, [r4, #24]
 800f80a:	60a3      	str	r3, [r4, #8]
 800f80c:	89a3      	ldrh	r3, [r4, #12]
 800f80e:	071b      	lsls	r3, r3, #28
 800f810:	d502      	bpl.n	800f818 <__swbuf_r+0x26>
 800f812:	6923      	ldr	r3, [r4, #16]
 800f814:	2b00      	cmp	r3, #0
 800f816:	d109      	bne.n	800f82c <__swbuf_r+0x3a>
 800f818:	0021      	movs	r1, r4
 800f81a:	0030      	movs	r0, r6
 800f81c:	f000 f82c 	bl	800f878 <__swsetup_r>
 800f820:	2800      	cmp	r0, #0
 800f822:	d003      	beq.n	800f82c <__swbuf_r+0x3a>
 800f824:	2501      	movs	r5, #1
 800f826:	426d      	negs	r5, r5
 800f828:	0028      	movs	r0, r5
 800f82a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f82c:	6923      	ldr	r3, [r4, #16]
 800f82e:	6820      	ldr	r0, [r4, #0]
 800f830:	b2ef      	uxtb	r7, r5
 800f832:	1ac0      	subs	r0, r0, r3
 800f834:	6963      	ldr	r3, [r4, #20]
 800f836:	b2ed      	uxtb	r5, r5
 800f838:	4283      	cmp	r3, r0
 800f83a:	dc05      	bgt.n	800f848 <__swbuf_r+0x56>
 800f83c:	0021      	movs	r1, r4
 800f83e:	0030      	movs	r0, r6
 800f840:	f7ff ffac 	bl	800f79c <_fflush_r>
 800f844:	2800      	cmp	r0, #0
 800f846:	d1ed      	bne.n	800f824 <__swbuf_r+0x32>
 800f848:	68a3      	ldr	r3, [r4, #8]
 800f84a:	3001      	adds	r0, #1
 800f84c:	3b01      	subs	r3, #1
 800f84e:	60a3      	str	r3, [r4, #8]
 800f850:	6823      	ldr	r3, [r4, #0]
 800f852:	1c5a      	adds	r2, r3, #1
 800f854:	6022      	str	r2, [r4, #0]
 800f856:	701f      	strb	r7, [r3, #0]
 800f858:	6963      	ldr	r3, [r4, #20]
 800f85a:	4283      	cmp	r3, r0
 800f85c:	d004      	beq.n	800f868 <__swbuf_r+0x76>
 800f85e:	89a3      	ldrh	r3, [r4, #12]
 800f860:	07db      	lsls	r3, r3, #31
 800f862:	d5e1      	bpl.n	800f828 <__swbuf_r+0x36>
 800f864:	2d0a      	cmp	r5, #10
 800f866:	d1df      	bne.n	800f828 <__swbuf_r+0x36>
 800f868:	0021      	movs	r1, r4
 800f86a:	0030      	movs	r0, r6
 800f86c:	f7ff ff96 	bl	800f79c <_fflush_r>
 800f870:	2800      	cmp	r0, #0
 800f872:	d0d9      	beq.n	800f828 <__swbuf_r+0x36>
 800f874:	e7d6      	b.n	800f824 <__swbuf_r+0x32>
	...

0800f878 <__swsetup_r>:
 800f878:	4b2d      	ldr	r3, [pc, #180]	@ (800f930 <__swsetup_r+0xb8>)
 800f87a:	b570      	push	{r4, r5, r6, lr}
 800f87c:	0005      	movs	r5, r0
 800f87e:	6818      	ldr	r0, [r3, #0]
 800f880:	000c      	movs	r4, r1
 800f882:	2800      	cmp	r0, #0
 800f884:	d004      	beq.n	800f890 <__swsetup_r+0x18>
 800f886:	6a03      	ldr	r3, [r0, #32]
 800f888:	2b00      	cmp	r3, #0
 800f88a:	d101      	bne.n	800f890 <__swsetup_r+0x18>
 800f88c:	f7fd ffae 	bl	800d7ec <__sinit>
 800f890:	230c      	movs	r3, #12
 800f892:	5ee2      	ldrsh	r2, [r4, r3]
 800f894:	0713      	lsls	r3, r2, #28
 800f896:	d423      	bmi.n	800f8e0 <__swsetup_r+0x68>
 800f898:	06d3      	lsls	r3, r2, #27
 800f89a:	d407      	bmi.n	800f8ac <__swsetup_r+0x34>
 800f89c:	2309      	movs	r3, #9
 800f89e:	602b      	str	r3, [r5, #0]
 800f8a0:	2340      	movs	r3, #64	@ 0x40
 800f8a2:	2001      	movs	r0, #1
 800f8a4:	4313      	orrs	r3, r2
 800f8a6:	81a3      	strh	r3, [r4, #12]
 800f8a8:	4240      	negs	r0, r0
 800f8aa:	e03a      	b.n	800f922 <__swsetup_r+0xaa>
 800f8ac:	0752      	lsls	r2, r2, #29
 800f8ae:	d513      	bpl.n	800f8d8 <__swsetup_r+0x60>
 800f8b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f8b2:	2900      	cmp	r1, #0
 800f8b4:	d008      	beq.n	800f8c8 <__swsetup_r+0x50>
 800f8b6:	0023      	movs	r3, r4
 800f8b8:	3344      	adds	r3, #68	@ 0x44
 800f8ba:	4299      	cmp	r1, r3
 800f8bc:	d002      	beq.n	800f8c4 <__swsetup_r+0x4c>
 800f8be:	0028      	movs	r0, r5
 800f8c0:	f7fe ff9a 	bl	800e7f8 <_free_r>
 800f8c4:	2300      	movs	r3, #0
 800f8c6:	6363      	str	r3, [r4, #52]	@ 0x34
 800f8c8:	2224      	movs	r2, #36	@ 0x24
 800f8ca:	89a3      	ldrh	r3, [r4, #12]
 800f8cc:	4393      	bics	r3, r2
 800f8ce:	81a3      	strh	r3, [r4, #12]
 800f8d0:	2300      	movs	r3, #0
 800f8d2:	6063      	str	r3, [r4, #4]
 800f8d4:	6923      	ldr	r3, [r4, #16]
 800f8d6:	6023      	str	r3, [r4, #0]
 800f8d8:	2308      	movs	r3, #8
 800f8da:	89a2      	ldrh	r2, [r4, #12]
 800f8dc:	4313      	orrs	r3, r2
 800f8de:	81a3      	strh	r3, [r4, #12]
 800f8e0:	6923      	ldr	r3, [r4, #16]
 800f8e2:	2b00      	cmp	r3, #0
 800f8e4:	d10b      	bne.n	800f8fe <__swsetup_r+0x86>
 800f8e6:	21a0      	movs	r1, #160	@ 0xa0
 800f8e8:	2280      	movs	r2, #128	@ 0x80
 800f8ea:	89a3      	ldrh	r3, [r4, #12]
 800f8ec:	0089      	lsls	r1, r1, #2
 800f8ee:	0092      	lsls	r2, r2, #2
 800f8f0:	400b      	ands	r3, r1
 800f8f2:	4293      	cmp	r3, r2
 800f8f4:	d003      	beq.n	800f8fe <__swsetup_r+0x86>
 800f8f6:	0021      	movs	r1, r4
 800f8f8:	0028      	movs	r0, r5
 800f8fa:	f000 f915 	bl	800fb28 <__smakebuf_r>
 800f8fe:	230c      	movs	r3, #12
 800f900:	5ee2      	ldrsh	r2, [r4, r3]
 800f902:	2101      	movs	r1, #1
 800f904:	0013      	movs	r3, r2
 800f906:	400b      	ands	r3, r1
 800f908:	420a      	tst	r2, r1
 800f90a:	d00b      	beq.n	800f924 <__swsetup_r+0xac>
 800f90c:	2300      	movs	r3, #0
 800f90e:	60a3      	str	r3, [r4, #8]
 800f910:	6963      	ldr	r3, [r4, #20]
 800f912:	425b      	negs	r3, r3
 800f914:	61a3      	str	r3, [r4, #24]
 800f916:	2000      	movs	r0, #0
 800f918:	6923      	ldr	r3, [r4, #16]
 800f91a:	4283      	cmp	r3, r0
 800f91c:	d101      	bne.n	800f922 <__swsetup_r+0xaa>
 800f91e:	0613      	lsls	r3, r2, #24
 800f920:	d4be      	bmi.n	800f8a0 <__swsetup_r+0x28>
 800f922:	bd70      	pop	{r4, r5, r6, pc}
 800f924:	0791      	lsls	r1, r2, #30
 800f926:	d400      	bmi.n	800f92a <__swsetup_r+0xb2>
 800f928:	6963      	ldr	r3, [r4, #20]
 800f92a:	60a3      	str	r3, [r4, #8]
 800f92c:	e7f3      	b.n	800f916 <__swsetup_r+0x9e>
 800f92e:	46c0      	nop			@ (mov r8, r8)
 800f930:	20000060 	.word	0x20000060

0800f934 <memmove>:
 800f934:	b510      	push	{r4, lr}
 800f936:	4288      	cmp	r0, r1
 800f938:	d806      	bhi.n	800f948 <memmove+0x14>
 800f93a:	2300      	movs	r3, #0
 800f93c:	429a      	cmp	r2, r3
 800f93e:	d008      	beq.n	800f952 <memmove+0x1e>
 800f940:	5ccc      	ldrb	r4, [r1, r3]
 800f942:	54c4      	strb	r4, [r0, r3]
 800f944:	3301      	adds	r3, #1
 800f946:	e7f9      	b.n	800f93c <memmove+0x8>
 800f948:	188b      	adds	r3, r1, r2
 800f94a:	4298      	cmp	r0, r3
 800f94c:	d2f5      	bcs.n	800f93a <memmove+0x6>
 800f94e:	3a01      	subs	r2, #1
 800f950:	d200      	bcs.n	800f954 <memmove+0x20>
 800f952:	bd10      	pop	{r4, pc}
 800f954:	5c8b      	ldrb	r3, [r1, r2]
 800f956:	5483      	strb	r3, [r0, r2]
 800f958:	e7f9      	b.n	800f94e <memmove+0x1a>
	...

0800f95c <_sbrk_r>:
 800f95c:	2300      	movs	r3, #0
 800f95e:	b570      	push	{r4, r5, r6, lr}
 800f960:	4d06      	ldr	r5, [pc, #24]	@ (800f97c <_sbrk_r+0x20>)
 800f962:	0004      	movs	r4, r0
 800f964:	0008      	movs	r0, r1
 800f966:	602b      	str	r3, [r5, #0]
 800f968:	f7f6 fb3a 	bl	8005fe0 <_sbrk>
 800f96c:	1c43      	adds	r3, r0, #1
 800f96e:	d103      	bne.n	800f978 <_sbrk_r+0x1c>
 800f970:	682b      	ldr	r3, [r5, #0]
 800f972:	2b00      	cmp	r3, #0
 800f974:	d000      	beq.n	800f978 <_sbrk_r+0x1c>
 800f976:	6023      	str	r3, [r4, #0]
 800f978:	bd70      	pop	{r4, r5, r6, pc}
 800f97a:	46c0      	nop			@ (mov r8, r8)
 800f97c:	20001c08 	.word	0x20001c08

0800f980 <__assert_func>:
 800f980:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800f982:	0014      	movs	r4, r2
 800f984:	001a      	movs	r2, r3
 800f986:	4b09      	ldr	r3, [pc, #36]	@ (800f9ac <__assert_func+0x2c>)
 800f988:	0005      	movs	r5, r0
 800f98a:	681b      	ldr	r3, [r3, #0]
 800f98c:	000e      	movs	r6, r1
 800f98e:	68d8      	ldr	r0, [r3, #12]
 800f990:	4b07      	ldr	r3, [pc, #28]	@ (800f9b0 <__assert_func+0x30>)
 800f992:	2c00      	cmp	r4, #0
 800f994:	d101      	bne.n	800f99a <__assert_func+0x1a>
 800f996:	4b07      	ldr	r3, [pc, #28]	@ (800f9b4 <__assert_func+0x34>)
 800f998:	001c      	movs	r4, r3
 800f99a:	4907      	ldr	r1, [pc, #28]	@ (800f9b8 <__assert_func+0x38>)
 800f99c:	9301      	str	r3, [sp, #4]
 800f99e:	9402      	str	r4, [sp, #8]
 800f9a0:	002b      	movs	r3, r5
 800f9a2:	9600      	str	r6, [sp, #0]
 800f9a4:	f000 f886 	bl	800fab4 <fiprintf>
 800f9a8:	f000 f924 	bl	800fbf4 <abort>
 800f9ac:	20000060 	.word	0x20000060
 800f9b0:	08010973 	.word	0x08010973
 800f9b4:	080109ae 	.word	0x080109ae
 800f9b8:	08010980 	.word	0x08010980

0800f9bc <_calloc_r>:
 800f9bc:	b570      	push	{r4, r5, r6, lr}
 800f9be:	0c0b      	lsrs	r3, r1, #16
 800f9c0:	0c15      	lsrs	r5, r2, #16
 800f9c2:	2b00      	cmp	r3, #0
 800f9c4:	d11e      	bne.n	800fa04 <_calloc_r+0x48>
 800f9c6:	2d00      	cmp	r5, #0
 800f9c8:	d10c      	bne.n	800f9e4 <_calloc_r+0x28>
 800f9ca:	b289      	uxth	r1, r1
 800f9cc:	b294      	uxth	r4, r2
 800f9ce:	434c      	muls	r4, r1
 800f9d0:	0021      	movs	r1, r4
 800f9d2:	f7fe ff87 	bl	800e8e4 <_malloc_r>
 800f9d6:	1e05      	subs	r5, r0, #0
 800f9d8:	d01a      	beq.n	800fa10 <_calloc_r+0x54>
 800f9da:	0022      	movs	r2, r4
 800f9dc:	2100      	movs	r1, #0
 800f9de:	f7fd ffed 	bl	800d9bc <memset>
 800f9e2:	e016      	b.n	800fa12 <_calloc_r+0x56>
 800f9e4:	1c2b      	adds	r3, r5, #0
 800f9e6:	1c0c      	adds	r4, r1, #0
 800f9e8:	b289      	uxth	r1, r1
 800f9ea:	b292      	uxth	r2, r2
 800f9ec:	434a      	muls	r2, r1
 800f9ee:	b29b      	uxth	r3, r3
 800f9f0:	b2a1      	uxth	r1, r4
 800f9f2:	4359      	muls	r1, r3
 800f9f4:	0c14      	lsrs	r4, r2, #16
 800f9f6:	190c      	adds	r4, r1, r4
 800f9f8:	0c23      	lsrs	r3, r4, #16
 800f9fa:	d107      	bne.n	800fa0c <_calloc_r+0x50>
 800f9fc:	0424      	lsls	r4, r4, #16
 800f9fe:	b292      	uxth	r2, r2
 800fa00:	4314      	orrs	r4, r2
 800fa02:	e7e5      	b.n	800f9d0 <_calloc_r+0x14>
 800fa04:	2d00      	cmp	r5, #0
 800fa06:	d101      	bne.n	800fa0c <_calloc_r+0x50>
 800fa08:	1c14      	adds	r4, r2, #0
 800fa0a:	e7ed      	b.n	800f9e8 <_calloc_r+0x2c>
 800fa0c:	230c      	movs	r3, #12
 800fa0e:	6003      	str	r3, [r0, #0]
 800fa10:	2500      	movs	r5, #0
 800fa12:	0028      	movs	r0, r5
 800fa14:	bd70      	pop	{r4, r5, r6, pc}

0800fa16 <__ascii_mbtowc>:
 800fa16:	b082      	sub	sp, #8
 800fa18:	2900      	cmp	r1, #0
 800fa1a:	d100      	bne.n	800fa1e <__ascii_mbtowc+0x8>
 800fa1c:	a901      	add	r1, sp, #4
 800fa1e:	1e10      	subs	r0, r2, #0
 800fa20:	d006      	beq.n	800fa30 <__ascii_mbtowc+0x1a>
 800fa22:	2b00      	cmp	r3, #0
 800fa24:	d006      	beq.n	800fa34 <__ascii_mbtowc+0x1e>
 800fa26:	7813      	ldrb	r3, [r2, #0]
 800fa28:	600b      	str	r3, [r1, #0]
 800fa2a:	7810      	ldrb	r0, [r2, #0]
 800fa2c:	1e43      	subs	r3, r0, #1
 800fa2e:	4198      	sbcs	r0, r3
 800fa30:	b002      	add	sp, #8
 800fa32:	4770      	bx	lr
 800fa34:	2002      	movs	r0, #2
 800fa36:	4240      	negs	r0, r0
 800fa38:	e7fa      	b.n	800fa30 <__ascii_mbtowc+0x1a>

0800fa3a <_realloc_r>:
 800fa3a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fa3c:	0006      	movs	r6, r0
 800fa3e:	000c      	movs	r4, r1
 800fa40:	0015      	movs	r5, r2
 800fa42:	2900      	cmp	r1, #0
 800fa44:	d105      	bne.n	800fa52 <_realloc_r+0x18>
 800fa46:	0011      	movs	r1, r2
 800fa48:	f7fe ff4c 	bl	800e8e4 <_malloc_r>
 800fa4c:	0004      	movs	r4, r0
 800fa4e:	0020      	movs	r0, r4
 800fa50:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800fa52:	2a00      	cmp	r2, #0
 800fa54:	d103      	bne.n	800fa5e <_realloc_r+0x24>
 800fa56:	f7fe fecf 	bl	800e7f8 <_free_r>
 800fa5a:	2400      	movs	r4, #0
 800fa5c:	e7f7      	b.n	800fa4e <_realloc_r+0x14>
 800fa5e:	f000 f8d0 	bl	800fc02 <_malloc_usable_size_r>
 800fa62:	0007      	movs	r7, r0
 800fa64:	4285      	cmp	r5, r0
 800fa66:	d802      	bhi.n	800fa6e <_realloc_r+0x34>
 800fa68:	0843      	lsrs	r3, r0, #1
 800fa6a:	42ab      	cmp	r3, r5
 800fa6c:	d3ef      	bcc.n	800fa4e <_realloc_r+0x14>
 800fa6e:	0029      	movs	r1, r5
 800fa70:	0030      	movs	r0, r6
 800fa72:	f7fe ff37 	bl	800e8e4 <_malloc_r>
 800fa76:	9001      	str	r0, [sp, #4]
 800fa78:	2800      	cmp	r0, #0
 800fa7a:	d0ee      	beq.n	800fa5a <_realloc_r+0x20>
 800fa7c:	002a      	movs	r2, r5
 800fa7e:	42bd      	cmp	r5, r7
 800fa80:	d900      	bls.n	800fa84 <_realloc_r+0x4a>
 800fa82:	003a      	movs	r2, r7
 800fa84:	0021      	movs	r1, r4
 800fa86:	9801      	ldr	r0, [sp, #4]
 800fa88:	f7fe f82a 	bl	800dae0 <memcpy>
 800fa8c:	0021      	movs	r1, r4
 800fa8e:	0030      	movs	r0, r6
 800fa90:	f7fe feb2 	bl	800e7f8 <_free_r>
 800fa94:	9c01      	ldr	r4, [sp, #4]
 800fa96:	e7da      	b.n	800fa4e <_realloc_r+0x14>

0800fa98 <__ascii_wctomb>:
 800fa98:	0003      	movs	r3, r0
 800fa9a:	1e08      	subs	r0, r1, #0
 800fa9c:	d005      	beq.n	800faaa <__ascii_wctomb+0x12>
 800fa9e:	2aff      	cmp	r2, #255	@ 0xff
 800faa0:	d904      	bls.n	800faac <__ascii_wctomb+0x14>
 800faa2:	228a      	movs	r2, #138	@ 0x8a
 800faa4:	2001      	movs	r0, #1
 800faa6:	601a      	str	r2, [r3, #0]
 800faa8:	4240      	negs	r0, r0
 800faaa:	4770      	bx	lr
 800faac:	2001      	movs	r0, #1
 800faae:	700a      	strb	r2, [r1, #0]
 800fab0:	e7fb      	b.n	800faaa <__ascii_wctomb+0x12>
	...

0800fab4 <fiprintf>:
 800fab4:	b40e      	push	{r1, r2, r3}
 800fab6:	b517      	push	{r0, r1, r2, r4, lr}
 800fab8:	4c05      	ldr	r4, [pc, #20]	@ (800fad0 <fiprintf+0x1c>)
 800faba:	ab05      	add	r3, sp, #20
 800fabc:	cb04      	ldmia	r3!, {r2}
 800fabe:	0001      	movs	r1, r0
 800fac0:	6820      	ldr	r0, [r4, #0]
 800fac2:	9301      	str	r3, [sp, #4]
 800fac4:	f7ff fcc8 	bl	800f458 <_vfiprintf_r>
 800fac8:	bc1e      	pop	{r1, r2, r3, r4}
 800faca:	bc08      	pop	{r3}
 800facc:	b003      	add	sp, #12
 800face:	4718      	bx	r3
 800fad0:	20000060 	.word	0x20000060

0800fad4 <__swhatbuf_r>:
 800fad4:	b570      	push	{r4, r5, r6, lr}
 800fad6:	000e      	movs	r6, r1
 800fad8:	001d      	movs	r5, r3
 800fada:	230e      	movs	r3, #14
 800fadc:	5ec9      	ldrsh	r1, [r1, r3]
 800fade:	0014      	movs	r4, r2
 800fae0:	b096      	sub	sp, #88	@ 0x58
 800fae2:	2900      	cmp	r1, #0
 800fae4:	da0c      	bge.n	800fb00 <__swhatbuf_r+0x2c>
 800fae6:	89b2      	ldrh	r2, [r6, #12]
 800fae8:	2380      	movs	r3, #128	@ 0x80
 800faea:	0011      	movs	r1, r2
 800faec:	4019      	ands	r1, r3
 800faee:	421a      	tst	r2, r3
 800faf0:	d114      	bne.n	800fb1c <__swhatbuf_r+0x48>
 800faf2:	2380      	movs	r3, #128	@ 0x80
 800faf4:	00db      	lsls	r3, r3, #3
 800faf6:	2000      	movs	r0, #0
 800faf8:	6029      	str	r1, [r5, #0]
 800fafa:	6023      	str	r3, [r4, #0]
 800fafc:	b016      	add	sp, #88	@ 0x58
 800fafe:	bd70      	pop	{r4, r5, r6, pc}
 800fb00:	466a      	mov	r2, sp
 800fb02:	f000 f853 	bl	800fbac <_fstat_r>
 800fb06:	2800      	cmp	r0, #0
 800fb08:	dbed      	blt.n	800fae6 <__swhatbuf_r+0x12>
 800fb0a:	23f0      	movs	r3, #240	@ 0xf0
 800fb0c:	9901      	ldr	r1, [sp, #4]
 800fb0e:	021b      	lsls	r3, r3, #8
 800fb10:	4019      	ands	r1, r3
 800fb12:	4b04      	ldr	r3, [pc, #16]	@ (800fb24 <__swhatbuf_r+0x50>)
 800fb14:	18c9      	adds	r1, r1, r3
 800fb16:	424b      	negs	r3, r1
 800fb18:	4159      	adcs	r1, r3
 800fb1a:	e7ea      	b.n	800faf2 <__swhatbuf_r+0x1e>
 800fb1c:	2100      	movs	r1, #0
 800fb1e:	2340      	movs	r3, #64	@ 0x40
 800fb20:	e7e9      	b.n	800faf6 <__swhatbuf_r+0x22>
 800fb22:	46c0      	nop			@ (mov r8, r8)
 800fb24:	ffffe000 	.word	0xffffe000

0800fb28 <__smakebuf_r>:
 800fb28:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fb2a:	2602      	movs	r6, #2
 800fb2c:	898b      	ldrh	r3, [r1, #12]
 800fb2e:	0005      	movs	r5, r0
 800fb30:	000c      	movs	r4, r1
 800fb32:	b085      	sub	sp, #20
 800fb34:	4233      	tst	r3, r6
 800fb36:	d007      	beq.n	800fb48 <__smakebuf_r+0x20>
 800fb38:	0023      	movs	r3, r4
 800fb3a:	3347      	adds	r3, #71	@ 0x47
 800fb3c:	6023      	str	r3, [r4, #0]
 800fb3e:	6123      	str	r3, [r4, #16]
 800fb40:	2301      	movs	r3, #1
 800fb42:	6163      	str	r3, [r4, #20]
 800fb44:	b005      	add	sp, #20
 800fb46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fb48:	ab03      	add	r3, sp, #12
 800fb4a:	aa02      	add	r2, sp, #8
 800fb4c:	f7ff ffc2 	bl	800fad4 <__swhatbuf_r>
 800fb50:	9f02      	ldr	r7, [sp, #8]
 800fb52:	9001      	str	r0, [sp, #4]
 800fb54:	0039      	movs	r1, r7
 800fb56:	0028      	movs	r0, r5
 800fb58:	f7fe fec4 	bl	800e8e4 <_malloc_r>
 800fb5c:	2800      	cmp	r0, #0
 800fb5e:	d108      	bne.n	800fb72 <__smakebuf_r+0x4a>
 800fb60:	220c      	movs	r2, #12
 800fb62:	5ea3      	ldrsh	r3, [r4, r2]
 800fb64:	059a      	lsls	r2, r3, #22
 800fb66:	d4ed      	bmi.n	800fb44 <__smakebuf_r+0x1c>
 800fb68:	2203      	movs	r2, #3
 800fb6a:	4393      	bics	r3, r2
 800fb6c:	431e      	orrs	r6, r3
 800fb6e:	81a6      	strh	r6, [r4, #12]
 800fb70:	e7e2      	b.n	800fb38 <__smakebuf_r+0x10>
 800fb72:	2380      	movs	r3, #128	@ 0x80
 800fb74:	89a2      	ldrh	r2, [r4, #12]
 800fb76:	6020      	str	r0, [r4, #0]
 800fb78:	4313      	orrs	r3, r2
 800fb7a:	81a3      	strh	r3, [r4, #12]
 800fb7c:	9b03      	ldr	r3, [sp, #12]
 800fb7e:	6120      	str	r0, [r4, #16]
 800fb80:	6167      	str	r7, [r4, #20]
 800fb82:	2b00      	cmp	r3, #0
 800fb84:	d00c      	beq.n	800fba0 <__smakebuf_r+0x78>
 800fb86:	0028      	movs	r0, r5
 800fb88:	230e      	movs	r3, #14
 800fb8a:	5ee1      	ldrsh	r1, [r4, r3]
 800fb8c:	f000 f820 	bl	800fbd0 <_isatty_r>
 800fb90:	2800      	cmp	r0, #0
 800fb92:	d005      	beq.n	800fba0 <__smakebuf_r+0x78>
 800fb94:	2303      	movs	r3, #3
 800fb96:	89a2      	ldrh	r2, [r4, #12]
 800fb98:	439a      	bics	r2, r3
 800fb9a:	3b02      	subs	r3, #2
 800fb9c:	4313      	orrs	r3, r2
 800fb9e:	81a3      	strh	r3, [r4, #12]
 800fba0:	89a3      	ldrh	r3, [r4, #12]
 800fba2:	9a01      	ldr	r2, [sp, #4]
 800fba4:	4313      	orrs	r3, r2
 800fba6:	81a3      	strh	r3, [r4, #12]
 800fba8:	e7cc      	b.n	800fb44 <__smakebuf_r+0x1c>
	...

0800fbac <_fstat_r>:
 800fbac:	2300      	movs	r3, #0
 800fbae:	b570      	push	{r4, r5, r6, lr}
 800fbb0:	4d06      	ldr	r5, [pc, #24]	@ (800fbcc <_fstat_r+0x20>)
 800fbb2:	0004      	movs	r4, r0
 800fbb4:	0008      	movs	r0, r1
 800fbb6:	0011      	movs	r1, r2
 800fbb8:	602b      	str	r3, [r5, #0]
 800fbba:	f7f6 f9ef 	bl	8005f9c <_fstat>
 800fbbe:	1c43      	adds	r3, r0, #1
 800fbc0:	d103      	bne.n	800fbca <_fstat_r+0x1e>
 800fbc2:	682b      	ldr	r3, [r5, #0]
 800fbc4:	2b00      	cmp	r3, #0
 800fbc6:	d000      	beq.n	800fbca <_fstat_r+0x1e>
 800fbc8:	6023      	str	r3, [r4, #0]
 800fbca:	bd70      	pop	{r4, r5, r6, pc}
 800fbcc:	20001c08 	.word	0x20001c08

0800fbd0 <_isatty_r>:
 800fbd0:	2300      	movs	r3, #0
 800fbd2:	b570      	push	{r4, r5, r6, lr}
 800fbd4:	4d06      	ldr	r5, [pc, #24]	@ (800fbf0 <_isatty_r+0x20>)
 800fbd6:	0004      	movs	r4, r0
 800fbd8:	0008      	movs	r0, r1
 800fbda:	602b      	str	r3, [r5, #0]
 800fbdc:	f7f6 f9ec 	bl	8005fb8 <_isatty>
 800fbe0:	1c43      	adds	r3, r0, #1
 800fbe2:	d103      	bne.n	800fbec <_isatty_r+0x1c>
 800fbe4:	682b      	ldr	r3, [r5, #0]
 800fbe6:	2b00      	cmp	r3, #0
 800fbe8:	d000      	beq.n	800fbec <_isatty_r+0x1c>
 800fbea:	6023      	str	r3, [r4, #0]
 800fbec:	bd70      	pop	{r4, r5, r6, pc}
 800fbee:	46c0      	nop			@ (mov r8, r8)
 800fbf0:	20001c08 	.word	0x20001c08

0800fbf4 <abort>:
 800fbf4:	2006      	movs	r0, #6
 800fbf6:	b510      	push	{r4, lr}
 800fbf8:	f000 f834 	bl	800fc64 <raise>
 800fbfc:	2001      	movs	r0, #1
 800fbfe:	f7f6 f999 	bl	8005f34 <_exit>

0800fc02 <_malloc_usable_size_r>:
 800fc02:	1f0b      	subs	r3, r1, #4
 800fc04:	681b      	ldr	r3, [r3, #0]
 800fc06:	1f18      	subs	r0, r3, #4
 800fc08:	2b00      	cmp	r3, #0
 800fc0a:	da01      	bge.n	800fc10 <_malloc_usable_size_r+0xe>
 800fc0c:	580b      	ldr	r3, [r1, r0]
 800fc0e:	18c0      	adds	r0, r0, r3
 800fc10:	4770      	bx	lr

0800fc12 <_raise_r>:
 800fc12:	b570      	push	{r4, r5, r6, lr}
 800fc14:	0004      	movs	r4, r0
 800fc16:	000d      	movs	r5, r1
 800fc18:	291f      	cmp	r1, #31
 800fc1a:	d904      	bls.n	800fc26 <_raise_r+0x14>
 800fc1c:	2316      	movs	r3, #22
 800fc1e:	6003      	str	r3, [r0, #0]
 800fc20:	2001      	movs	r0, #1
 800fc22:	4240      	negs	r0, r0
 800fc24:	bd70      	pop	{r4, r5, r6, pc}
 800fc26:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800fc28:	2b00      	cmp	r3, #0
 800fc2a:	d004      	beq.n	800fc36 <_raise_r+0x24>
 800fc2c:	008a      	lsls	r2, r1, #2
 800fc2e:	189b      	adds	r3, r3, r2
 800fc30:	681a      	ldr	r2, [r3, #0]
 800fc32:	2a00      	cmp	r2, #0
 800fc34:	d108      	bne.n	800fc48 <_raise_r+0x36>
 800fc36:	0020      	movs	r0, r4
 800fc38:	f000 f830 	bl	800fc9c <_getpid_r>
 800fc3c:	002a      	movs	r2, r5
 800fc3e:	0001      	movs	r1, r0
 800fc40:	0020      	movs	r0, r4
 800fc42:	f000 f819 	bl	800fc78 <_kill_r>
 800fc46:	e7ed      	b.n	800fc24 <_raise_r+0x12>
 800fc48:	2a01      	cmp	r2, #1
 800fc4a:	d009      	beq.n	800fc60 <_raise_r+0x4e>
 800fc4c:	1c51      	adds	r1, r2, #1
 800fc4e:	d103      	bne.n	800fc58 <_raise_r+0x46>
 800fc50:	2316      	movs	r3, #22
 800fc52:	6003      	str	r3, [r0, #0]
 800fc54:	2001      	movs	r0, #1
 800fc56:	e7e5      	b.n	800fc24 <_raise_r+0x12>
 800fc58:	2100      	movs	r1, #0
 800fc5a:	0028      	movs	r0, r5
 800fc5c:	6019      	str	r1, [r3, #0]
 800fc5e:	4790      	blx	r2
 800fc60:	2000      	movs	r0, #0
 800fc62:	e7df      	b.n	800fc24 <_raise_r+0x12>

0800fc64 <raise>:
 800fc64:	b510      	push	{r4, lr}
 800fc66:	4b03      	ldr	r3, [pc, #12]	@ (800fc74 <raise+0x10>)
 800fc68:	0001      	movs	r1, r0
 800fc6a:	6818      	ldr	r0, [r3, #0]
 800fc6c:	f7ff ffd1 	bl	800fc12 <_raise_r>
 800fc70:	bd10      	pop	{r4, pc}
 800fc72:	46c0      	nop			@ (mov r8, r8)
 800fc74:	20000060 	.word	0x20000060

0800fc78 <_kill_r>:
 800fc78:	2300      	movs	r3, #0
 800fc7a:	b570      	push	{r4, r5, r6, lr}
 800fc7c:	4d06      	ldr	r5, [pc, #24]	@ (800fc98 <_kill_r+0x20>)
 800fc7e:	0004      	movs	r4, r0
 800fc80:	0008      	movs	r0, r1
 800fc82:	0011      	movs	r1, r2
 800fc84:	602b      	str	r3, [r5, #0]
 800fc86:	f7f6 f945 	bl	8005f14 <_kill>
 800fc8a:	1c43      	adds	r3, r0, #1
 800fc8c:	d103      	bne.n	800fc96 <_kill_r+0x1e>
 800fc8e:	682b      	ldr	r3, [r5, #0]
 800fc90:	2b00      	cmp	r3, #0
 800fc92:	d000      	beq.n	800fc96 <_kill_r+0x1e>
 800fc94:	6023      	str	r3, [r4, #0]
 800fc96:	bd70      	pop	{r4, r5, r6, pc}
 800fc98:	20001c08 	.word	0x20001c08

0800fc9c <_getpid_r>:
 800fc9c:	b510      	push	{r4, lr}
 800fc9e:	f7f6 f933 	bl	8005f08 <_getpid>
 800fca2:	bd10      	pop	{r4, pc}

0800fca4 <expf>:
 800fca4:	b570      	push	{r4, r5, r6, lr}
 800fca6:	1c04      	adds	r4, r0, #0
 800fca8:	f000 f8c2 	bl	800fe30 <__ieee754_expf>
 800fcac:	1c05      	adds	r5, r0, #0
 800fcae:	1c20      	adds	r0, r4, #0
 800fcb0:	f000 f83c 	bl	800fd2c <finitef>
 800fcb4:	2800      	cmp	r0, #0
 800fcb6:	d00b      	beq.n	800fcd0 <expf+0x2c>
 800fcb8:	490c      	ldr	r1, [pc, #48]	@ (800fcec <expf+0x48>)
 800fcba:	1c20      	adds	r0, r4, #0
 800fcbc:	f7f0 fc1a 	bl	80004f4 <__aeabi_fcmpgt>
 800fcc0:	2800      	cmp	r0, #0
 800fcc2:	d007      	beq.n	800fcd4 <expf+0x30>
 800fcc4:	f7fd fed4 	bl	800da70 <__errno>
 800fcc8:	25ff      	movs	r5, #255	@ 0xff
 800fcca:	2322      	movs	r3, #34	@ 0x22
 800fccc:	05ed      	lsls	r5, r5, #23
 800fcce:	6003      	str	r3, [r0, #0]
 800fcd0:	1c28      	adds	r0, r5, #0
 800fcd2:	bd70      	pop	{r4, r5, r6, pc}
 800fcd4:	4906      	ldr	r1, [pc, #24]	@ (800fcf0 <expf+0x4c>)
 800fcd6:	1c20      	adds	r0, r4, #0
 800fcd8:	f7f0 fbf8 	bl	80004cc <__aeabi_fcmplt>
 800fcdc:	2800      	cmp	r0, #0
 800fcde:	d0f7      	beq.n	800fcd0 <expf+0x2c>
 800fce0:	f7fd fec6 	bl	800da70 <__errno>
 800fce4:	2322      	movs	r3, #34	@ 0x22
 800fce6:	2500      	movs	r5, #0
 800fce8:	6003      	str	r3, [r0, #0]
 800fcea:	e7f1      	b.n	800fcd0 <expf+0x2c>
 800fcec:	42b17217 	.word	0x42b17217
 800fcf0:	c2cff1b5 	.word	0xc2cff1b5

0800fcf4 <sqrtf>:
 800fcf4:	b570      	push	{r4, r5, r6, lr}
 800fcf6:	1c05      	adds	r5, r0, #0
 800fcf8:	f000 f822 	bl	800fd40 <__ieee754_sqrtf>
 800fcfc:	1c29      	adds	r1, r5, #0
 800fcfe:	1c04      	adds	r4, r0, #0
 800fd00:	1c28      	adds	r0, r5, #0
 800fd02:	f7f1 fbad 	bl	8001460 <__aeabi_fcmpun>
 800fd06:	2800      	cmp	r0, #0
 800fd08:	d10e      	bne.n	800fd28 <sqrtf+0x34>
 800fd0a:	2100      	movs	r1, #0
 800fd0c:	1c28      	adds	r0, r5, #0
 800fd0e:	f7f0 fbdd 	bl	80004cc <__aeabi_fcmplt>
 800fd12:	2800      	cmp	r0, #0
 800fd14:	d008      	beq.n	800fd28 <sqrtf+0x34>
 800fd16:	f7fd feab 	bl	800da70 <__errno>
 800fd1a:	2321      	movs	r3, #33	@ 0x21
 800fd1c:	2100      	movs	r1, #0
 800fd1e:	6003      	str	r3, [r0, #0]
 800fd20:	1c08      	adds	r0, r1, #0
 800fd22:	f7f0 fed5 	bl	8000ad0 <__aeabi_fdiv>
 800fd26:	1c04      	adds	r4, r0, #0
 800fd28:	1c20      	adds	r0, r4, #0
 800fd2a:	bd70      	pop	{r4, r5, r6, pc}

0800fd2c <finitef>:
 800fd2c:	22ff      	movs	r2, #255	@ 0xff
 800fd2e:	0043      	lsls	r3, r0, #1
 800fd30:	085b      	lsrs	r3, r3, #1
 800fd32:	2001      	movs	r0, #1
 800fd34:	05d2      	lsls	r2, r2, #23
 800fd36:	4293      	cmp	r3, r2
 800fd38:	db00      	blt.n	800fd3c <finitef+0x10>
 800fd3a:	2000      	movs	r0, #0
 800fd3c:	4770      	bx	lr
	...

0800fd40 <__ieee754_sqrtf>:
 800fd40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fd42:	0003      	movs	r3, r0
 800fd44:	0042      	lsls	r2, r0, #1
 800fd46:	1c04      	adds	r4, r0, #0
 800fd48:	20ff      	movs	r0, #255	@ 0xff
 800fd4a:	0852      	lsrs	r2, r2, #1
 800fd4c:	05c0      	lsls	r0, r0, #23
 800fd4e:	4282      	cmp	r2, r0
 800fd50:	d30a      	bcc.n	800fd68 <__ieee754_sqrtf+0x28>
 800fd52:	1c21      	adds	r1, r4, #0
 800fd54:	1c20      	adds	r0, r4, #0
 800fd56:	f7f1 f8a1 	bl	8000e9c <__aeabi_fmul>
 800fd5a:	1c01      	adds	r1, r0, #0
 800fd5c:	1c20      	adds	r0, r4, #0
 800fd5e:	f7f0 fd2d 	bl	80007bc <__aeabi_fadd>
 800fd62:	1c04      	adds	r4, r0, #0
 800fd64:	1c20      	adds	r0, r4, #0
 800fd66:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800fd68:	2a00      	cmp	r2, #0
 800fd6a:	d0fb      	beq.n	800fd64 <__ieee754_sqrtf+0x24>
 800fd6c:	2c00      	cmp	r4, #0
 800fd6e:	da07      	bge.n	800fd80 <__ieee754_sqrtf+0x40>
 800fd70:	1c21      	adds	r1, r4, #0
 800fd72:	1c20      	adds	r0, r4, #0
 800fd74:	f7f1 f9d0 	bl	8001118 <__aeabi_fsub>
 800fd78:	1c01      	adds	r1, r0, #0
 800fd7a:	f7f0 fea9 	bl	8000ad0 <__aeabi_fdiv>
 800fd7e:	e7f0      	b.n	800fd62 <__ieee754_sqrtf+0x22>
 800fd80:	0022      	movs	r2, r4
 800fd82:	15e1      	asrs	r1, r4, #23
 800fd84:	4002      	ands	r2, r0
 800fd86:	4204      	tst	r4, r0
 800fd88:	d046      	beq.n	800fe18 <__ieee754_sqrtf+0xd8>
 800fd8a:	2280      	movs	r2, #128	@ 0x80
 800fd8c:	000f      	movs	r7, r1
 800fd8e:	025b      	lsls	r3, r3, #9
 800fd90:	0a5b      	lsrs	r3, r3, #9
 800fd92:	0412      	lsls	r2, r2, #16
 800fd94:	3f7f      	subs	r7, #127	@ 0x7f
 800fd96:	4313      	orrs	r3, r2
 800fd98:	07c9      	lsls	r1, r1, #31
 800fd9a:	d400      	bmi.n	800fd9e <__ieee754_sqrtf+0x5e>
 800fd9c:	005b      	lsls	r3, r3, #1
 800fd9e:	2400      	movs	r4, #0
 800fda0:	2180      	movs	r1, #128	@ 0x80
 800fda2:	2019      	movs	r0, #25
 800fda4:	0026      	movs	r6, r4
 800fda6:	107f      	asrs	r7, r7, #1
 800fda8:	005b      	lsls	r3, r3, #1
 800fdaa:	0449      	lsls	r1, r1, #17
 800fdac:	1875      	adds	r5, r6, r1
 800fdae:	001a      	movs	r2, r3
 800fdb0:	429d      	cmp	r5, r3
 800fdb2:	dc02      	bgt.n	800fdba <__ieee754_sqrtf+0x7a>
 800fdb4:	186e      	adds	r6, r5, r1
 800fdb6:	1b5a      	subs	r2, r3, r5
 800fdb8:	1864      	adds	r4, r4, r1
 800fdba:	3801      	subs	r0, #1
 800fdbc:	0053      	lsls	r3, r2, #1
 800fdbe:	0849      	lsrs	r1, r1, #1
 800fdc0:	2800      	cmp	r0, #0
 800fdc2:	d1f3      	bne.n	800fdac <__ieee754_sqrtf+0x6c>
 800fdc4:	2a00      	cmp	r2, #0
 800fdc6:	d019      	beq.n	800fdfc <__ieee754_sqrtf+0xbc>
 800fdc8:	4d17      	ldr	r5, [pc, #92]	@ (800fe28 <__ieee754_sqrtf+0xe8>)
 800fdca:	4e18      	ldr	r6, [pc, #96]	@ (800fe2c <__ieee754_sqrtf+0xec>)
 800fdcc:	6828      	ldr	r0, [r5, #0]
 800fdce:	6831      	ldr	r1, [r6, #0]
 800fdd0:	682b      	ldr	r3, [r5, #0]
 800fdd2:	9301      	str	r3, [sp, #4]
 800fdd4:	f7f1 f9a0 	bl	8001118 <__aeabi_fsub>
 800fdd8:	1c01      	adds	r1, r0, #0
 800fdda:	9801      	ldr	r0, [sp, #4]
 800fddc:	f7f0 fb80 	bl	80004e0 <__aeabi_fcmple>
 800fde0:	2800      	cmp	r0, #0
 800fde2:	d00b      	beq.n	800fdfc <__ieee754_sqrtf+0xbc>
 800fde4:	6828      	ldr	r0, [r5, #0]
 800fde6:	6831      	ldr	r1, [r6, #0]
 800fde8:	f7f0 fce8 	bl	80007bc <__aeabi_fadd>
 800fdec:	682d      	ldr	r5, [r5, #0]
 800fdee:	1c01      	adds	r1, r0, #0
 800fdf0:	1c28      	adds	r0, r5, #0
 800fdf2:	f7f0 fb6b 	bl	80004cc <__aeabi_fcmplt>
 800fdf6:	2800      	cmp	r0, #0
 800fdf8:	d011      	beq.n	800fe1e <__ieee754_sqrtf+0xde>
 800fdfa:	3402      	adds	r4, #2
 800fdfc:	23fc      	movs	r3, #252	@ 0xfc
 800fdfe:	1064      	asrs	r4, r4, #1
 800fe00:	059b      	lsls	r3, r3, #22
 800fe02:	18e3      	adds	r3, r4, r3
 800fe04:	05fc      	lsls	r4, r7, #23
 800fe06:	18e4      	adds	r4, r4, r3
 800fe08:	e7ac      	b.n	800fd64 <__ieee754_sqrtf+0x24>
 800fe0a:	005b      	lsls	r3, r3, #1
 800fe0c:	3201      	adds	r2, #1
 800fe0e:	4203      	tst	r3, r0
 800fe10:	d0fb      	beq.n	800fe0a <__ieee754_sqrtf+0xca>
 800fe12:	3a01      	subs	r2, #1
 800fe14:	1a89      	subs	r1, r1, r2
 800fe16:	e7b8      	b.n	800fd8a <__ieee754_sqrtf+0x4a>
 800fe18:	2080      	movs	r0, #128	@ 0x80
 800fe1a:	0400      	lsls	r0, r0, #16
 800fe1c:	e7f7      	b.n	800fe0e <__ieee754_sqrtf+0xce>
 800fe1e:	2301      	movs	r3, #1
 800fe20:	3401      	adds	r4, #1
 800fe22:	439c      	bics	r4, r3
 800fe24:	e7ea      	b.n	800fdfc <__ieee754_sqrtf+0xbc>
 800fe26:	46c0      	nop			@ (mov r8, r8)
 800fe28:	20000220 	.word	0x20000220
 800fe2c:	2000021c 	.word	0x2000021c

0800fe30 <__ieee754_expf>:
 800fe30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fe32:	21ff      	movs	r1, #255	@ 0xff
 800fe34:	0043      	lsls	r3, r0, #1
 800fe36:	1c04      	adds	r4, r0, #0
 800fe38:	085b      	lsrs	r3, r3, #1
 800fe3a:	05c9      	lsls	r1, r1, #23
 800fe3c:	428b      	cmp	r3, r1
 800fe3e:	d904      	bls.n	800fe4a <__ieee754_expf+0x1a>
 800fe40:	1c01      	adds	r1, r0, #0
 800fe42:	1c20      	adds	r0, r4, #0
 800fe44:	f7f0 fcba 	bl	80007bc <__aeabi_fadd>
 800fe48:	e00d      	b.n	800fe66 <__ieee754_expf+0x36>
 800fe4a:	0fc6      	lsrs	r6, r0, #31
 800fe4c:	428b      	cmp	r3, r1
 800fe4e:	d104      	bne.n	800fe5a <__ieee754_expf+0x2a>
 800fe50:	2e00      	cmp	r6, #0
 800fe52:	d000      	beq.n	800fe56 <__ieee754_expf+0x26>
 800fe54:	e0ba      	b.n	800ffcc <__ieee754_expf+0x19c>
 800fe56:	1c20      	adds	r0, r4, #0
 800fe58:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800fe5a:	495d      	ldr	r1, [pc, #372]	@ (800ffd0 <__ieee754_expf+0x1a0>)
 800fe5c:	4288      	cmp	r0, r1
 800fe5e:	dd04      	ble.n	800fe6a <__ieee754_expf+0x3a>
 800fe60:	2000      	movs	r0, #0
 800fe62:	f000 f8f1 	bl	8010048 <__math_oflowf>
 800fe66:	1c04      	adds	r4, r0, #0
 800fe68:	e7f5      	b.n	800fe56 <__ieee754_expf+0x26>
 800fe6a:	2800      	cmp	r0, #0
 800fe6c:	da06      	bge.n	800fe7c <__ieee754_expf+0x4c>
 800fe6e:	4a59      	ldr	r2, [pc, #356]	@ (800ffd4 <__ieee754_expf+0x1a4>)
 800fe70:	4293      	cmp	r3, r2
 800fe72:	d903      	bls.n	800fe7c <__ieee754_expf+0x4c>
 800fe74:	2000      	movs	r0, #0
 800fe76:	f000 f8e1 	bl	801003c <__math_uflowf>
 800fe7a:	e7f4      	b.n	800fe66 <__ieee754_expf+0x36>
 800fe7c:	4a56      	ldr	r2, [pc, #344]	@ (800ffd8 <__ieee754_expf+0x1a8>)
 800fe7e:	4293      	cmp	r3, r2
 800fe80:	d96e      	bls.n	800ff60 <__ieee754_expf+0x130>
 800fe82:	4a56      	ldr	r2, [pc, #344]	@ (800ffdc <__ieee754_expf+0x1ac>)
 800fe84:	00b5      	lsls	r5, r6, #2
 800fe86:	4293      	cmp	r3, r2
 800fe88:	d84e      	bhi.n	800ff28 <__ieee754_expf+0xf8>
 800fe8a:	4b55      	ldr	r3, [pc, #340]	@ (800ffe0 <__ieee754_expf+0x1b0>)
 800fe8c:	1c20      	adds	r0, r4, #0
 800fe8e:	5959      	ldr	r1, [r3, r5]
 800fe90:	f7f1 f942 	bl	8001118 <__aeabi_fsub>
 800fe94:	4b53      	ldr	r3, [pc, #332]	@ (800ffe4 <__ieee754_expf+0x1b4>)
 800fe96:	1c07      	adds	r7, r0, #0
 800fe98:	595b      	ldr	r3, [r3, r5]
 800fe9a:	2501      	movs	r5, #1
 800fe9c:	1bad      	subs	r5, r5, r6
 800fe9e:	9300      	str	r3, [sp, #0]
 800fea0:	1bad      	subs	r5, r5, r6
 800fea2:	9900      	ldr	r1, [sp, #0]
 800fea4:	1c38      	adds	r0, r7, #0
 800fea6:	f7f1 f937 	bl	8001118 <__aeabi_fsub>
 800feaa:	1c04      	adds	r4, r0, #0
 800feac:	1c21      	adds	r1, r4, #0
 800feae:	1c20      	adds	r0, r4, #0
 800feb0:	f7f0 fff4 	bl	8000e9c <__aeabi_fmul>
 800feb4:	494c      	ldr	r1, [pc, #304]	@ (800ffe8 <__ieee754_expf+0x1b8>)
 800feb6:	1c06      	adds	r6, r0, #0
 800feb8:	f7f0 fff0 	bl	8000e9c <__aeabi_fmul>
 800febc:	494b      	ldr	r1, [pc, #300]	@ (800ffec <__ieee754_expf+0x1bc>)
 800febe:	f7f1 f92b 	bl	8001118 <__aeabi_fsub>
 800fec2:	1c31      	adds	r1, r6, #0
 800fec4:	f7f0 ffea 	bl	8000e9c <__aeabi_fmul>
 800fec8:	4949      	ldr	r1, [pc, #292]	@ (800fff0 <__ieee754_expf+0x1c0>)
 800feca:	f7f0 fc77 	bl	80007bc <__aeabi_fadd>
 800fece:	1c31      	adds	r1, r6, #0
 800fed0:	f7f0 ffe4 	bl	8000e9c <__aeabi_fmul>
 800fed4:	4947      	ldr	r1, [pc, #284]	@ (800fff4 <__ieee754_expf+0x1c4>)
 800fed6:	f7f1 f91f 	bl	8001118 <__aeabi_fsub>
 800feda:	1c31      	adds	r1, r6, #0
 800fedc:	f7f0 ffde 	bl	8000e9c <__aeabi_fmul>
 800fee0:	4945      	ldr	r1, [pc, #276]	@ (800fff8 <__ieee754_expf+0x1c8>)
 800fee2:	f7f0 fc6b 	bl	80007bc <__aeabi_fadd>
 800fee6:	1c31      	adds	r1, r6, #0
 800fee8:	f7f0 ffd8 	bl	8000e9c <__aeabi_fmul>
 800feec:	1c01      	adds	r1, r0, #0
 800feee:	1c20      	adds	r0, r4, #0
 800fef0:	f7f1 f912 	bl	8001118 <__aeabi_fsub>
 800fef4:	1c01      	adds	r1, r0, #0
 800fef6:	1c06      	adds	r6, r0, #0
 800fef8:	1c20      	adds	r0, r4, #0
 800fefa:	f7f0 ffcf 	bl	8000e9c <__aeabi_fmul>
 800fefe:	9001      	str	r0, [sp, #4]
 800ff00:	2d00      	cmp	r5, #0
 800ff02:	d140      	bne.n	800ff86 <__ieee754_expf+0x156>
 800ff04:	2180      	movs	r1, #128	@ 0x80
 800ff06:	1c30      	adds	r0, r6, #0
 800ff08:	05c9      	lsls	r1, r1, #23
 800ff0a:	f7f1 f905 	bl	8001118 <__aeabi_fsub>
 800ff0e:	1c01      	adds	r1, r0, #0
 800ff10:	9801      	ldr	r0, [sp, #4]
 800ff12:	f7f0 fddd 	bl	8000ad0 <__aeabi_fdiv>
 800ff16:	1c21      	adds	r1, r4, #0
 800ff18:	f7f1 f8fe 	bl	8001118 <__aeabi_fsub>
 800ff1c:	1c01      	adds	r1, r0, #0
 800ff1e:	20fe      	movs	r0, #254	@ 0xfe
 800ff20:	0580      	lsls	r0, r0, #22
 800ff22:	f7f1 f8f9 	bl	8001118 <__aeabi_fsub>
 800ff26:	e79e      	b.n	800fe66 <__ieee754_expf+0x36>
 800ff28:	4934      	ldr	r1, [pc, #208]	@ (800fffc <__ieee754_expf+0x1cc>)
 800ff2a:	1c20      	adds	r0, r4, #0
 800ff2c:	f7f0 ffb6 	bl	8000e9c <__aeabi_fmul>
 800ff30:	4b33      	ldr	r3, [pc, #204]	@ (8010000 <__ieee754_expf+0x1d0>)
 800ff32:	5959      	ldr	r1, [r3, r5]
 800ff34:	f7f0 fc42 	bl	80007bc <__aeabi_fadd>
 800ff38:	f7f1 faa8 	bl	800148c <__aeabi_f2iz>
 800ff3c:	0005      	movs	r5, r0
 800ff3e:	f7f1 fac5 	bl	80014cc <__aeabi_i2f>
 800ff42:	4930      	ldr	r1, [pc, #192]	@ (8010004 <__ieee754_expf+0x1d4>)
 800ff44:	1c06      	adds	r6, r0, #0
 800ff46:	f7f0 ffa9 	bl	8000e9c <__aeabi_fmul>
 800ff4a:	1c01      	adds	r1, r0, #0
 800ff4c:	1c20      	adds	r0, r4, #0
 800ff4e:	f7f1 f8e3 	bl	8001118 <__aeabi_fsub>
 800ff52:	492d      	ldr	r1, [pc, #180]	@ (8010008 <__ieee754_expf+0x1d8>)
 800ff54:	1c07      	adds	r7, r0, #0
 800ff56:	1c30      	adds	r0, r6, #0
 800ff58:	f7f0 ffa0 	bl	8000e9c <__aeabi_fmul>
 800ff5c:	9000      	str	r0, [sp, #0]
 800ff5e:	e7a0      	b.n	800fea2 <__ieee754_expf+0x72>
 800ff60:	22d0      	movs	r2, #208	@ 0xd0
 800ff62:	0592      	lsls	r2, r2, #22
 800ff64:	4293      	cmp	r3, r2
 800ff66:	d20c      	bcs.n	800ff82 <__ieee754_expf+0x152>
 800ff68:	4928      	ldr	r1, [pc, #160]	@ (801000c <__ieee754_expf+0x1dc>)
 800ff6a:	1c20      	adds	r0, r4, #0
 800ff6c:	f7f0 fc26 	bl	80007bc <__aeabi_fadd>
 800ff70:	21fe      	movs	r1, #254	@ 0xfe
 800ff72:	0589      	lsls	r1, r1, #22
 800ff74:	f7f0 fabe 	bl	80004f4 <__aeabi_fcmpgt>
 800ff78:	1e05      	subs	r5, r0, #0
 800ff7a:	d097      	beq.n	800feac <__ieee754_expf+0x7c>
 800ff7c:	21fe      	movs	r1, #254	@ 0xfe
 800ff7e:	0589      	lsls	r1, r1, #22
 800ff80:	e75f      	b.n	800fe42 <__ieee754_expf+0x12>
 800ff82:	2500      	movs	r5, #0
 800ff84:	e792      	b.n	800feac <__ieee754_expf+0x7c>
 800ff86:	2080      	movs	r0, #128	@ 0x80
 800ff88:	1c31      	adds	r1, r6, #0
 800ff8a:	05c0      	lsls	r0, r0, #23
 800ff8c:	f7f1 f8c4 	bl	8001118 <__aeabi_fsub>
 800ff90:	1c01      	adds	r1, r0, #0
 800ff92:	9801      	ldr	r0, [sp, #4]
 800ff94:	f7f0 fd9c 	bl	8000ad0 <__aeabi_fdiv>
 800ff98:	1c01      	adds	r1, r0, #0
 800ff9a:	9800      	ldr	r0, [sp, #0]
 800ff9c:	f7f1 f8bc 	bl	8001118 <__aeabi_fsub>
 800ffa0:	1c39      	adds	r1, r7, #0
 800ffa2:	f7f1 f8b9 	bl	8001118 <__aeabi_fsub>
 800ffa6:	1c01      	adds	r1, r0, #0
 800ffa8:	20fe      	movs	r0, #254	@ 0xfe
 800ffaa:	0580      	lsls	r0, r0, #22
 800ffac:	f7f1 f8b4 	bl	8001118 <__aeabi_fsub>
 800ffb0:	002b      	movs	r3, r5
 800ffb2:	337d      	adds	r3, #125	@ 0x7d
 800ffb4:	db02      	blt.n	800ffbc <__ieee754_expf+0x18c>
 800ffb6:	05ec      	lsls	r4, r5, #23
 800ffb8:	1824      	adds	r4, r4, r0
 800ffba:	e74c      	b.n	800fe56 <__ieee754_expf+0x26>
 800ffbc:	21d8      	movs	r1, #216	@ 0xd8
 800ffbe:	3564      	adds	r5, #100	@ 0x64
 800ffc0:	05ed      	lsls	r5, r5, #23
 800ffc2:	1828      	adds	r0, r5, r0
 800ffc4:	0509      	lsls	r1, r1, #20
 800ffc6:	f7f0 ff69 	bl	8000e9c <__aeabi_fmul>
 800ffca:	e74c      	b.n	800fe66 <__ieee754_expf+0x36>
 800ffcc:	2400      	movs	r4, #0
 800ffce:	e742      	b.n	800fe56 <__ieee754_expf+0x26>
 800ffd0:	42b17217 	.word	0x42b17217
 800ffd4:	42cff1b5 	.word	0x42cff1b5
 800ffd8:	3eb17218 	.word	0x3eb17218
 800ffdc:	3f851591 	.word	0x3f851591
 800ffe0:	08010ab8 	.word	0x08010ab8
 800ffe4:	08010ab0 	.word	0x08010ab0
 800ffe8:	3331bb4c 	.word	0x3331bb4c
 800ffec:	35ddea0e 	.word	0x35ddea0e
 800fff0:	388ab355 	.word	0x388ab355
 800fff4:	3b360b61 	.word	0x3b360b61
 800fff8:	3e2aaaab 	.word	0x3e2aaaab
 800fffc:	3fb8aa3b 	.word	0x3fb8aa3b
 8010000:	08010ac0 	.word	0x08010ac0
 8010004:	3f317180 	.word	0x3f317180
 8010008:	3717f7d1 	.word	0x3717f7d1
 801000c:	7149f2ca 	.word	0x7149f2ca

08010010 <with_errnof>:
 8010010:	b570      	push	{r4, r5, r6, lr}
 8010012:	000d      	movs	r5, r1
 8010014:	1c04      	adds	r4, r0, #0
 8010016:	f7fd fd2b 	bl	800da70 <__errno>
 801001a:	6005      	str	r5, [r0, #0]
 801001c:	1c20      	adds	r0, r4, #0
 801001e:	bd70      	pop	{r4, r5, r6, pc}

08010020 <xflowf>:
 8010020:	b510      	push	{r4, lr}
 8010022:	1c0b      	adds	r3, r1, #0
 8010024:	2800      	cmp	r0, #0
 8010026:	d002      	beq.n	801002e <xflowf+0xe>
 8010028:	2380      	movs	r3, #128	@ 0x80
 801002a:	061b      	lsls	r3, r3, #24
 801002c:	18cb      	adds	r3, r1, r3
 801002e:	1c18      	adds	r0, r3, #0
 8010030:	f7f0 ff34 	bl	8000e9c <__aeabi_fmul>
 8010034:	2122      	movs	r1, #34	@ 0x22
 8010036:	f7ff ffeb 	bl	8010010 <with_errnof>
 801003a:	bd10      	pop	{r4, pc}

0801003c <__math_uflowf>:
 801003c:	2180      	movs	r1, #128	@ 0x80
 801003e:	b510      	push	{r4, lr}
 8010040:	0549      	lsls	r1, r1, #21
 8010042:	f7ff ffed 	bl	8010020 <xflowf>
 8010046:	bd10      	pop	{r4, pc}

08010048 <__math_oflowf>:
 8010048:	21e0      	movs	r1, #224	@ 0xe0
 801004a:	b510      	push	{r4, lr}
 801004c:	05c9      	lsls	r1, r1, #23
 801004e:	f7ff ffe7 	bl	8010020 <xflowf>
 8010052:	bd10      	pop	{r4, pc}

08010054 <_init>:
 8010054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010056:	46c0      	nop			@ (mov r8, r8)
 8010058:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801005a:	bc08      	pop	{r3}
 801005c:	469e      	mov	lr, r3
 801005e:	4770      	bx	lr

08010060 <_fini>:
 8010060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010062:	46c0      	nop			@ (mov r8, r8)
 8010064:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010066:	bc08      	pop	{r3}
 8010068:	469e      	mov	lr, r3
 801006a:	4770      	bx	lr
>>>>>>> main
