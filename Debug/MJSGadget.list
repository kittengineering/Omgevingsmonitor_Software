
MJSGadget.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f478  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a38  0800f538  0800f538  00010538  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ff70  0800ff70  00011210  2**0
                  CONTENTS
  4 .ARM          00000008  0800ff70  0800ff70  00010f70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ff78  0800ff78  00011210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ff78  0800ff78  00010f78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ff7c  0800ff7c  00010f7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000210  20000000  0800ff80  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f58  20000210  08010190  00011210  2**2
                  ALLOC
 10 ._user_heap_stack 00000500  20001168  08010190  00012168  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00011210  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017455  00000000  00000000  00011238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004627  00000000  00000000  0002868d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001398  00000000  00000000  0002ccb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ed3  00000000  00000000  0002e050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019d02  00000000  00000000  0002ef23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f530  00000000  00000000  00048c25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089e29  00000000  00000000  00068155  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f1f7e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000057f4  00000000  00000000  000f1fc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  000f77b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000210 	.word	0x20000210
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800f520 	.word	0x0800f520

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000214 	.word	0x20000214
 8000104:	0800f520 	.word	0x0800f520

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			@ (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	@ 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			@ (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	@ 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	@ 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			@ (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			@ (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 ffd3 	bl	80023e8 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 ff13 	bl	8002278 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 ffc5 	bl	80023e8 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 ffbb 	bl	80023e8 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 ff3d 	bl	8002300 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			@ (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 ff33 	bl	8002300 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			@ (mov r8, r8)

080004a8 <__aeabi_cfrcmple>:
 80004a8:	4684      	mov	ip, r0
 80004aa:	0008      	movs	r0, r1
 80004ac:	4661      	mov	r1, ip
 80004ae:	e7ff      	b.n	80004b0 <__aeabi_cfcmpeq>

080004b0 <__aeabi_cfcmpeq>:
 80004b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004b2:	f000 fc6f 	bl	8000d94 <__lesf2>
 80004b6:	2800      	cmp	r0, #0
 80004b8:	d401      	bmi.n	80004be <__aeabi_cfcmpeq+0xe>
 80004ba:	2100      	movs	r1, #0
 80004bc:	42c8      	cmn	r0, r1
 80004be:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004c0 <__aeabi_fcmpeq>:
 80004c0:	b510      	push	{r4, lr}
 80004c2:	f000 fbef 	bl	8000ca4 <__eqsf2>
 80004c6:	4240      	negs	r0, r0
 80004c8:	3001      	adds	r0, #1
 80004ca:	bd10      	pop	{r4, pc}

080004cc <__aeabi_fcmplt>:
 80004cc:	b510      	push	{r4, lr}
 80004ce:	f000 fc61 	bl	8000d94 <__lesf2>
 80004d2:	2800      	cmp	r0, #0
 80004d4:	db01      	blt.n	80004da <__aeabi_fcmplt+0xe>
 80004d6:	2000      	movs	r0, #0
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	2001      	movs	r0, #1
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	46c0      	nop			@ (mov r8, r8)

080004e0 <__aeabi_fcmple>:
 80004e0:	b510      	push	{r4, lr}
 80004e2:	f000 fc57 	bl	8000d94 <__lesf2>
 80004e6:	2800      	cmp	r0, #0
 80004e8:	dd01      	ble.n	80004ee <__aeabi_fcmple+0xe>
 80004ea:	2000      	movs	r0, #0
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	2001      	movs	r0, #1
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	46c0      	nop			@ (mov r8, r8)

080004f4 <__aeabi_fcmpgt>:
 80004f4:	b510      	push	{r4, lr}
 80004f6:	f000 fbfd 	bl	8000cf4 <__gesf2>
 80004fa:	2800      	cmp	r0, #0
 80004fc:	dc01      	bgt.n	8000502 <__aeabi_fcmpgt+0xe>
 80004fe:	2000      	movs	r0, #0
 8000500:	bd10      	pop	{r4, pc}
 8000502:	2001      	movs	r0, #1
 8000504:	bd10      	pop	{r4, pc}
 8000506:	46c0      	nop			@ (mov r8, r8)

08000508 <__aeabi_fcmpge>:
 8000508:	b510      	push	{r4, lr}
 800050a:	f000 fbf3 	bl	8000cf4 <__gesf2>
 800050e:	2800      	cmp	r0, #0
 8000510:	da01      	bge.n	8000516 <__aeabi_fcmpge+0xe>
 8000512:	2000      	movs	r0, #0
 8000514:	bd10      	pop	{r4, pc}
 8000516:	2001      	movs	r0, #1
 8000518:	bd10      	pop	{r4, pc}
 800051a:	46c0      	nop			@ (mov r8, r8)

0800051c <__aeabi_uldivmod>:
 800051c:	2b00      	cmp	r3, #0
 800051e:	d111      	bne.n	8000544 <__aeabi_uldivmod+0x28>
 8000520:	2a00      	cmp	r2, #0
 8000522:	d10f      	bne.n	8000544 <__aeabi_uldivmod+0x28>
 8000524:	2900      	cmp	r1, #0
 8000526:	d100      	bne.n	800052a <__aeabi_uldivmod+0xe>
 8000528:	2800      	cmp	r0, #0
 800052a:	d002      	beq.n	8000532 <__aeabi_uldivmod+0x16>
 800052c:	2100      	movs	r1, #0
 800052e:	43c9      	mvns	r1, r1
 8000530:	0008      	movs	r0, r1
 8000532:	b407      	push	{r0, r1, r2}
 8000534:	4802      	ldr	r0, [pc, #8]	@ (8000540 <__aeabi_uldivmod+0x24>)
 8000536:	a102      	add	r1, pc, #8	@ (adr r1, 8000540 <__aeabi_uldivmod+0x24>)
 8000538:	1840      	adds	r0, r0, r1
 800053a:	9002      	str	r0, [sp, #8]
 800053c:	bd03      	pop	{r0, r1, pc}
 800053e:	46c0      	nop			@ (mov r8, r8)
 8000540:	fffffee9 	.word	0xfffffee9
 8000544:	b403      	push	{r0, r1}
 8000546:	4668      	mov	r0, sp
 8000548:	b501      	push	{r0, lr}
 800054a:	9802      	ldr	r0, [sp, #8]
 800054c:	f000 f834 	bl	80005b8 <__udivmoddi4>
 8000550:	9b01      	ldr	r3, [sp, #4]
 8000552:	469e      	mov	lr, r3
 8000554:	b002      	add	sp, #8
 8000556:	bc0c      	pop	{r2, r3}
 8000558:	4770      	bx	lr
 800055a:	46c0      	nop			@ (mov r8, r8)

0800055c <__aeabi_lmul>:
 800055c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800055e:	46ce      	mov	lr, r9
 8000560:	4699      	mov	r9, r3
 8000562:	0c03      	lsrs	r3, r0, #16
 8000564:	469c      	mov	ip, r3
 8000566:	0413      	lsls	r3, r2, #16
 8000568:	4647      	mov	r7, r8
 800056a:	0c1b      	lsrs	r3, r3, #16
 800056c:	001d      	movs	r5, r3
 800056e:	000e      	movs	r6, r1
 8000570:	4661      	mov	r1, ip
 8000572:	0404      	lsls	r4, r0, #16
 8000574:	0c24      	lsrs	r4, r4, #16
 8000576:	b580      	push	{r7, lr}
 8000578:	0007      	movs	r7, r0
 800057a:	0c10      	lsrs	r0, r2, #16
 800057c:	434b      	muls	r3, r1
 800057e:	4365      	muls	r5, r4
 8000580:	4341      	muls	r1, r0
 8000582:	4360      	muls	r0, r4
 8000584:	0c2c      	lsrs	r4, r5, #16
 8000586:	18c0      	adds	r0, r0, r3
 8000588:	1824      	adds	r4, r4, r0
 800058a:	468c      	mov	ip, r1
 800058c:	42a3      	cmp	r3, r4
 800058e:	d903      	bls.n	8000598 <__aeabi_lmul+0x3c>
 8000590:	2380      	movs	r3, #128	@ 0x80
 8000592:	025b      	lsls	r3, r3, #9
 8000594:	4698      	mov	r8, r3
 8000596:	44c4      	add	ip, r8
 8000598:	4649      	mov	r1, r9
 800059a:	4379      	muls	r1, r7
 800059c:	4356      	muls	r6, r2
 800059e:	0c23      	lsrs	r3, r4, #16
 80005a0:	042d      	lsls	r5, r5, #16
 80005a2:	0c2d      	lsrs	r5, r5, #16
 80005a4:	1989      	adds	r1, r1, r6
 80005a6:	4463      	add	r3, ip
 80005a8:	0424      	lsls	r4, r4, #16
 80005aa:	1960      	adds	r0, r4, r5
 80005ac:	18c9      	adds	r1, r1, r3
 80005ae:	bcc0      	pop	{r6, r7}
 80005b0:	46b9      	mov	r9, r7
 80005b2:	46b0      	mov	r8, r6
 80005b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005b6:	46c0      	nop			@ (mov r8, r8)

080005b8 <__udivmoddi4>:
 80005b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005ba:	4657      	mov	r7, sl
 80005bc:	464e      	mov	r6, r9
 80005be:	4645      	mov	r5, r8
 80005c0:	46de      	mov	lr, fp
 80005c2:	b5e0      	push	{r5, r6, r7, lr}
 80005c4:	0004      	movs	r4, r0
 80005c6:	000d      	movs	r5, r1
 80005c8:	4692      	mov	sl, r2
 80005ca:	4699      	mov	r9, r3
 80005cc:	b083      	sub	sp, #12
 80005ce:	428b      	cmp	r3, r1
 80005d0:	d830      	bhi.n	8000634 <__udivmoddi4+0x7c>
 80005d2:	d02d      	beq.n	8000630 <__udivmoddi4+0x78>
 80005d4:	4649      	mov	r1, r9
 80005d6:	4650      	mov	r0, sl
 80005d8:	f002 ff2e 	bl	8003438 <__clzdi2>
 80005dc:	0029      	movs	r1, r5
 80005de:	0006      	movs	r6, r0
 80005e0:	0020      	movs	r0, r4
 80005e2:	f002 ff29 	bl	8003438 <__clzdi2>
 80005e6:	1a33      	subs	r3, r6, r0
 80005e8:	4698      	mov	r8, r3
 80005ea:	3b20      	subs	r3, #32
 80005ec:	d434      	bmi.n	8000658 <__udivmoddi4+0xa0>
 80005ee:	469b      	mov	fp, r3
 80005f0:	4653      	mov	r3, sl
 80005f2:	465a      	mov	r2, fp
 80005f4:	4093      	lsls	r3, r2
 80005f6:	4642      	mov	r2, r8
 80005f8:	001f      	movs	r7, r3
 80005fa:	4653      	mov	r3, sl
 80005fc:	4093      	lsls	r3, r2
 80005fe:	001e      	movs	r6, r3
 8000600:	42af      	cmp	r7, r5
 8000602:	d83b      	bhi.n	800067c <__udivmoddi4+0xc4>
 8000604:	42af      	cmp	r7, r5
 8000606:	d100      	bne.n	800060a <__udivmoddi4+0x52>
 8000608:	e079      	b.n	80006fe <__udivmoddi4+0x146>
 800060a:	465b      	mov	r3, fp
 800060c:	1ba4      	subs	r4, r4, r6
 800060e:	41bd      	sbcs	r5, r7
 8000610:	2b00      	cmp	r3, #0
 8000612:	da00      	bge.n	8000616 <__udivmoddi4+0x5e>
 8000614:	e076      	b.n	8000704 <__udivmoddi4+0x14c>
 8000616:	2200      	movs	r2, #0
 8000618:	2300      	movs	r3, #0
 800061a:	9200      	str	r2, [sp, #0]
 800061c:	9301      	str	r3, [sp, #4]
 800061e:	2301      	movs	r3, #1
 8000620:	465a      	mov	r2, fp
 8000622:	4093      	lsls	r3, r2
 8000624:	9301      	str	r3, [sp, #4]
 8000626:	2301      	movs	r3, #1
 8000628:	4642      	mov	r2, r8
 800062a:	4093      	lsls	r3, r2
 800062c:	9300      	str	r3, [sp, #0]
 800062e:	e029      	b.n	8000684 <__udivmoddi4+0xcc>
 8000630:	4282      	cmp	r2, r0
 8000632:	d9cf      	bls.n	80005d4 <__udivmoddi4+0x1c>
 8000634:	2200      	movs	r2, #0
 8000636:	2300      	movs	r3, #0
 8000638:	9200      	str	r2, [sp, #0]
 800063a:	9301      	str	r3, [sp, #4]
 800063c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <__udivmoddi4+0x8e>
 8000642:	601c      	str	r4, [r3, #0]
 8000644:	605d      	str	r5, [r3, #4]
 8000646:	9800      	ldr	r0, [sp, #0]
 8000648:	9901      	ldr	r1, [sp, #4]
 800064a:	b003      	add	sp, #12
 800064c:	bcf0      	pop	{r4, r5, r6, r7}
 800064e:	46bb      	mov	fp, r7
 8000650:	46b2      	mov	sl, r6
 8000652:	46a9      	mov	r9, r5
 8000654:	46a0      	mov	r8, r4
 8000656:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000658:	4642      	mov	r2, r8
 800065a:	469b      	mov	fp, r3
 800065c:	2320      	movs	r3, #32
 800065e:	1a9b      	subs	r3, r3, r2
 8000660:	4652      	mov	r2, sl
 8000662:	40da      	lsrs	r2, r3
 8000664:	4641      	mov	r1, r8
 8000666:	0013      	movs	r3, r2
 8000668:	464a      	mov	r2, r9
 800066a:	408a      	lsls	r2, r1
 800066c:	0017      	movs	r7, r2
 800066e:	4642      	mov	r2, r8
 8000670:	431f      	orrs	r7, r3
 8000672:	4653      	mov	r3, sl
 8000674:	4093      	lsls	r3, r2
 8000676:	001e      	movs	r6, r3
 8000678:	42af      	cmp	r7, r5
 800067a:	d9c3      	bls.n	8000604 <__udivmoddi4+0x4c>
 800067c:	2200      	movs	r2, #0
 800067e:	2300      	movs	r3, #0
 8000680:	9200      	str	r2, [sp, #0]
 8000682:	9301      	str	r3, [sp, #4]
 8000684:	4643      	mov	r3, r8
 8000686:	2b00      	cmp	r3, #0
 8000688:	d0d8      	beq.n	800063c <__udivmoddi4+0x84>
 800068a:	07fb      	lsls	r3, r7, #31
 800068c:	0872      	lsrs	r2, r6, #1
 800068e:	431a      	orrs	r2, r3
 8000690:	4646      	mov	r6, r8
 8000692:	087b      	lsrs	r3, r7, #1
 8000694:	e00e      	b.n	80006b4 <__udivmoddi4+0xfc>
 8000696:	42ab      	cmp	r3, r5
 8000698:	d101      	bne.n	800069e <__udivmoddi4+0xe6>
 800069a:	42a2      	cmp	r2, r4
 800069c:	d80c      	bhi.n	80006b8 <__udivmoddi4+0x100>
 800069e:	1aa4      	subs	r4, r4, r2
 80006a0:	419d      	sbcs	r5, r3
 80006a2:	2001      	movs	r0, #1
 80006a4:	1924      	adds	r4, r4, r4
 80006a6:	416d      	adcs	r5, r5
 80006a8:	2100      	movs	r1, #0
 80006aa:	3e01      	subs	r6, #1
 80006ac:	1824      	adds	r4, r4, r0
 80006ae:	414d      	adcs	r5, r1
 80006b0:	2e00      	cmp	r6, #0
 80006b2:	d006      	beq.n	80006c2 <__udivmoddi4+0x10a>
 80006b4:	42ab      	cmp	r3, r5
 80006b6:	d9ee      	bls.n	8000696 <__udivmoddi4+0xde>
 80006b8:	3e01      	subs	r6, #1
 80006ba:	1924      	adds	r4, r4, r4
 80006bc:	416d      	adcs	r5, r5
 80006be:	2e00      	cmp	r6, #0
 80006c0:	d1f8      	bne.n	80006b4 <__udivmoddi4+0xfc>
 80006c2:	9800      	ldr	r0, [sp, #0]
 80006c4:	9901      	ldr	r1, [sp, #4]
 80006c6:	465b      	mov	r3, fp
 80006c8:	1900      	adds	r0, r0, r4
 80006ca:	4169      	adcs	r1, r5
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	db24      	blt.n	800071a <__udivmoddi4+0x162>
 80006d0:	002b      	movs	r3, r5
 80006d2:	465a      	mov	r2, fp
 80006d4:	4644      	mov	r4, r8
 80006d6:	40d3      	lsrs	r3, r2
 80006d8:	002a      	movs	r2, r5
 80006da:	40e2      	lsrs	r2, r4
 80006dc:	001c      	movs	r4, r3
 80006de:	465b      	mov	r3, fp
 80006e0:	0015      	movs	r5, r2
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	db2a      	blt.n	800073c <__udivmoddi4+0x184>
 80006e6:	0026      	movs	r6, r4
 80006e8:	409e      	lsls	r6, r3
 80006ea:	0033      	movs	r3, r6
 80006ec:	0026      	movs	r6, r4
 80006ee:	4647      	mov	r7, r8
 80006f0:	40be      	lsls	r6, r7
 80006f2:	0032      	movs	r2, r6
 80006f4:	1a80      	subs	r0, r0, r2
 80006f6:	4199      	sbcs	r1, r3
 80006f8:	9000      	str	r0, [sp, #0]
 80006fa:	9101      	str	r1, [sp, #4]
 80006fc:	e79e      	b.n	800063c <__udivmoddi4+0x84>
 80006fe:	42a3      	cmp	r3, r4
 8000700:	d8bc      	bhi.n	800067c <__udivmoddi4+0xc4>
 8000702:	e782      	b.n	800060a <__udivmoddi4+0x52>
 8000704:	4642      	mov	r2, r8
 8000706:	2320      	movs	r3, #32
 8000708:	2100      	movs	r1, #0
 800070a:	1a9b      	subs	r3, r3, r2
 800070c:	2200      	movs	r2, #0
 800070e:	9100      	str	r1, [sp, #0]
 8000710:	9201      	str	r2, [sp, #4]
 8000712:	2201      	movs	r2, #1
 8000714:	40da      	lsrs	r2, r3
 8000716:	9201      	str	r2, [sp, #4]
 8000718:	e785      	b.n	8000626 <__udivmoddi4+0x6e>
 800071a:	4642      	mov	r2, r8
 800071c:	2320      	movs	r3, #32
 800071e:	1a9b      	subs	r3, r3, r2
 8000720:	002a      	movs	r2, r5
 8000722:	4646      	mov	r6, r8
 8000724:	409a      	lsls	r2, r3
 8000726:	0023      	movs	r3, r4
 8000728:	40f3      	lsrs	r3, r6
 800072a:	4644      	mov	r4, r8
 800072c:	4313      	orrs	r3, r2
 800072e:	002a      	movs	r2, r5
 8000730:	40e2      	lsrs	r2, r4
 8000732:	001c      	movs	r4, r3
 8000734:	465b      	mov	r3, fp
 8000736:	0015      	movs	r5, r2
 8000738:	2b00      	cmp	r3, #0
 800073a:	dad4      	bge.n	80006e6 <__udivmoddi4+0x12e>
 800073c:	4642      	mov	r2, r8
 800073e:	002f      	movs	r7, r5
 8000740:	2320      	movs	r3, #32
 8000742:	0026      	movs	r6, r4
 8000744:	4097      	lsls	r7, r2
 8000746:	1a9b      	subs	r3, r3, r2
 8000748:	40de      	lsrs	r6, r3
 800074a:	003b      	movs	r3, r7
 800074c:	4333      	orrs	r3, r6
 800074e:	e7cd      	b.n	80006ec <__udivmoddi4+0x134>

08000750 <__aeabi_fadd>:
 8000750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000752:	46ce      	mov	lr, r9
 8000754:	4647      	mov	r7, r8
 8000756:	0243      	lsls	r3, r0, #9
 8000758:	0a5a      	lsrs	r2, r3, #9
 800075a:	024e      	lsls	r6, r1, #9
 800075c:	0045      	lsls	r5, r0, #1
 800075e:	0fc4      	lsrs	r4, r0, #31
 8000760:	0048      	lsls	r0, r1, #1
 8000762:	4691      	mov	r9, r2
 8000764:	0e2d      	lsrs	r5, r5, #24
 8000766:	0a72      	lsrs	r2, r6, #9
 8000768:	0e00      	lsrs	r0, r0, #24
 800076a:	4694      	mov	ip, r2
 800076c:	b580      	push	{r7, lr}
 800076e:	099b      	lsrs	r3, r3, #6
 8000770:	0fc9      	lsrs	r1, r1, #31
 8000772:	09b6      	lsrs	r6, r6, #6
 8000774:	1a2a      	subs	r2, r5, r0
 8000776:	428c      	cmp	r4, r1
 8000778:	d021      	beq.n	80007be <__aeabi_fadd+0x6e>
 800077a:	2a00      	cmp	r2, #0
 800077c:	dd0d      	ble.n	800079a <__aeabi_fadd+0x4a>
 800077e:	2800      	cmp	r0, #0
 8000780:	d12d      	bne.n	80007de <__aeabi_fadd+0x8e>
 8000782:	2e00      	cmp	r6, #0
 8000784:	d100      	bne.n	8000788 <__aeabi_fadd+0x38>
 8000786:	e08d      	b.n	80008a4 <__aeabi_fadd+0x154>
 8000788:	1e51      	subs	r1, r2, #1
 800078a:	2a01      	cmp	r2, #1
 800078c:	d100      	bne.n	8000790 <__aeabi_fadd+0x40>
 800078e:	e11d      	b.n	80009cc <__aeabi_fadd+0x27c>
 8000790:	2aff      	cmp	r2, #255	@ 0xff
 8000792:	d100      	bne.n	8000796 <__aeabi_fadd+0x46>
 8000794:	e0ab      	b.n	80008ee <__aeabi_fadd+0x19e>
 8000796:	000a      	movs	r2, r1
 8000798:	e027      	b.n	80007ea <__aeabi_fadd+0x9a>
 800079a:	2a00      	cmp	r2, #0
 800079c:	d04d      	beq.n	800083a <__aeabi_fadd+0xea>
 800079e:	1b42      	subs	r2, r0, r5
 80007a0:	2d00      	cmp	r5, #0
 80007a2:	d000      	beq.n	80007a6 <__aeabi_fadd+0x56>
 80007a4:	e0cc      	b.n	8000940 <__aeabi_fadd+0x1f0>
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d100      	bne.n	80007ac <__aeabi_fadd+0x5c>
 80007aa:	e079      	b.n	80008a0 <__aeabi_fadd+0x150>
 80007ac:	1e54      	subs	r4, r2, #1
 80007ae:	2a01      	cmp	r2, #1
 80007b0:	d100      	bne.n	80007b4 <__aeabi_fadd+0x64>
 80007b2:	e128      	b.n	8000a06 <__aeabi_fadd+0x2b6>
 80007b4:	2aff      	cmp	r2, #255	@ 0xff
 80007b6:	d100      	bne.n	80007ba <__aeabi_fadd+0x6a>
 80007b8:	e097      	b.n	80008ea <__aeabi_fadd+0x19a>
 80007ba:	0022      	movs	r2, r4
 80007bc:	e0c5      	b.n	800094a <__aeabi_fadd+0x1fa>
 80007be:	2a00      	cmp	r2, #0
 80007c0:	dc00      	bgt.n	80007c4 <__aeabi_fadd+0x74>
 80007c2:	e096      	b.n	80008f2 <__aeabi_fadd+0x1a2>
 80007c4:	2800      	cmp	r0, #0
 80007c6:	d04f      	beq.n	8000868 <__aeabi_fadd+0x118>
 80007c8:	2dff      	cmp	r5, #255	@ 0xff
 80007ca:	d100      	bne.n	80007ce <__aeabi_fadd+0x7e>
 80007cc:	e08f      	b.n	80008ee <__aeabi_fadd+0x19e>
 80007ce:	2180      	movs	r1, #128	@ 0x80
 80007d0:	04c9      	lsls	r1, r1, #19
 80007d2:	430e      	orrs	r6, r1
 80007d4:	2a1b      	cmp	r2, #27
 80007d6:	dd51      	ble.n	800087c <__aeabi_fadd+0x12c>
 80007d8:	002a      	movs	r2, r5
 80007da:	3301      	adds	r3, #1
 80007dc:	e018      	b.n	8000810 <__aeabi_fadd+0xc0>
 80007de:	2dff      	cmp	r5, #255	@ 0xff
 80007e0:	d100      	bne.n	80007e4 <__aeabi_fadd+0x94>
 80007e2:	e084      	b.n	80008ee <__aeabi_fadd+0x19e>
 80007e4:	2180      	movs	r1, #128	@ 0x80
 80007e6:	04c9      	lsls	r1, r1, #19
 80007e8:	430e      	orrs	r6, r1
 80007ea:	2101      	movs	r1, #1
 80007ec:	2a1b      	cmp	r2, #27
 80007ee:	dc08      	bgt.n	8000802 <__aeabi_fadd+0xb2>
 80007f0:	0031      	movs	r1, r6
 80007f2:	2020      	movs	r0, #32
 80007f4:	40d1      	lsrs	r1, r2
 80007f6:	1a82      	subs	r2, r0, r2
 80007f8:	4096      	lsls	r6, r2
 80007fa:	0032      	movs	r2, r6
 80007fc:	1e50      	subs	r0, r2, #1
 80007fe:	4182      	sbcs	r2, r0
 8000800:	4311      	orrs	r1, r2
 8000802:	1a5b      	subs	r3, r3, r1
 8000804:	015a      	lsls	r2, r3, #5
 8000806:	d459      	bmi.n	80008bc <__aeabi_fadd+0x16c>
 8000808:	2107      	movs	r1, #7
 800080a:	002a      	movs	r2, r5
 800080c:	4019      	ands	r1, r3
 800080e:	d049      	beq.n	80008a4 <__aeabi_fadd+0x154>
 8000810:	210f      	movs	r1, #15
 8000812:	4019      	ands	r1, r3
 8000814:	2904      	cmp	r1, #4
 8000816:	d000      	beq.n	800081a <__aeabi_fadd+0xca>
 8000818:	3304      	adds	r3, #4
 800081a:	0159      	lsls	r1, r3, #5
 800081c:	d542      	bpl.n	80008a4 <__aeabi_fadd+0x154>
 800081e:	1c50      	adds	r0, r2, #1
 8000820:	2afe      	cmp	r2, #254	@ 0xfe
 8000822:	d03a      	beq.n	800089a <__aeabi_fadd+0x14a>
 8000824:	019b      	lsls	r3, r3, #6
 8000826:	b2c0      	uxtb	r0, r0
 8000828:	0a5b      	lsrs	r3, r3, #9
 800082a:	05c0      	lsls	r0, r0, #23
 800082c:	4318      	orrs	r0, r3
 800082e:	07e4      	lsls	r4, r4, #31
 8000830:	4320      	orrs	r0, r4
 8000832:	bcc0      	pop	{r6, r7}
 8000834:	46b9      	mov	r9, r7
 8000836:	46b0      	mov	r8, r6
 8000838:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800083a:	20fe      	movs	r0, #254	@ 0xfe
 800083c:	4680      	mov	r8, r0
 800083e:	1c6f      	adds	r7, r5, #1
 8000840:	0038      	movs	r0, r7
 8000842:	4647      	mov	r7, r8
 8000844:	4207      	tst	r7, r0
 8000846:	d000      	beq.n	800084a <__aeabi_fadd+0xfa>
 8000848:	e08e      	b.n	8000968 <__aeabi_fadd+0x218>
 800084a:	2d00      	cmp	r5, #0
 800084c:	d000      	beq.n	8000850 <__aeabi_fadd+0x100>
 800084e:	e0b4      	b.n	80009ba <__aeabi_fadd+0x26a>
 8000850:	2b00      	cmp	r3, #0
 8000852:	d100      	bne.n	8000856 <__aeabi_fadd+0x106>
 8000854:	e0db      	b.n	8000a0e <__aeabi_fadd+0x2be>
 8000856:	2e00      	cmp	r6, #0
 8000858:	d06c      	beq.n	8000934 <__aeabi_fadd+0x1e4>
 800085a:	1b98      	subs	r0, r3, r6
 800085c:	0145      	lsls	r5, r0, #5
 800085e:	d400      	bmi.n	8000862 <__aeabi_fadd+0x112>
 8000860:	e0f7      	b.n	8000a52 <__aeabi_fadd+0x302>
 8000862:	000c      	movs	r4, r1
 8000864:	1af3      	subs	r3, r6, r3
 8000866:	e03d      	b.n	80008e4 <__aeabi_fadd+0x194>
 8000868:	2e00      	cmp	r6, #0
 800086a:	d01b      	beq.n	80008a4 <__aeabi_fadd+0x154>
 800086c:	1e51      	subs	r1, r2, #1
 800086e:	2a01      	cmp	r2, #1
 8000870:	d100      	bne.n	8000874 <__aeabi_fadd+0x124>
 8000872:	e082      	b.n	800097a <__aeabi_fadd+0x22a>
 8000874:	2aff      	cmp	r2, #255	@ 0xff
 8000876:	d03a      	beq.n	80008ee <__aeabi_fadd+0x19e>
 8000878:	000a      	movs	r2, r1
 800087a:	e7ab      	b.n	80007d4 <__aeabi_fadd+0x84>
 800087c:	0031      	movs	r1, r6
 800087e:	2020      	movs	r0, #32
 8000880:	40d1      	lsrs	r1, r2
 8000882:	1a82      	subs	r2, r0, r2
 8000884:	4096      	lsls	r6, r2
 8000886:	0032      	movs	r2, r6
 8000888:	1e50      	subs	r0, r2, #1
 800088a:	4182      	sbcs	r2, r0
 800088c:	430a      	orrs	r2, r1
 800088e:	189b      	adds	r3, r3, r2
 8000890:	015a      	lsls	r2, r3, #5
 8000892:	d5b9      	bpl.n	8000808 <__aeabi_fadd+0xb8>
 8000894:	1c6a      	adds	r2, r5, #1
 8000896:	2dfe      	cmp	r5, #254	@ 0xfe
 8000898:	d175      	bne.n	8000986 <__aeabi_fadd+0x236>
 800089a:	20ff      	movs	r0, #255	@ 0xff
 800089c:	2300      	movs	r3, #0
 800089e:	e7c4      	b.n	800082a <__aeabi_fadd+0xda>
 80008a0:	000c      	movs	r4, r1
 80008a2:	0033      	movs	r3, r6
 80008a4:	08db      	lsrs	r3, r3, #3
 80008a6:	2aff      	cmp	r2, #255	@ 0xff
 80008a8:	d146      	bne.n	8000938 <__aeabi_fadd+0x1e8>
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d0f5      	beq.n	800089a <__aeabi_fadd+0x14a>
 80008ae:	2280      	movs	r2, #128	@ 0x80
 80008b0:	03d2      	lsls	r2, r2, #15
 80008b2:	4313      	orrs	r3, r2
 80008b4:	025b      	lsls	r3, r3, #9
 80008b6:	20ff      	movs	r0, #255	@ 0xff
 80008b8:	0a5b      	lsrs	r3, r3, #9
 80008ba:	e7b6      	b.n	800082a <__aeabi_fadd+0xda>
 80008bc:	019f      	lsls	r7, r3, #6
 80008be:	09bf      	lsrs	r7, r7, #6
 80008c0:	0038      	movs	r0, r7
 80008c2:	f002 fd9b 	bl	80033fc <__clzsi2>
 80008c6:	3805      	subs	r0, #5
 80008c8:	4087      	lsls	r7, r0
 80008ca:	4285      	cmp	r5, r0
 80008cc:	dc24      	bgt.n	8000918 <__aeabi_fadd+0x1c8>
 80008ce:	003b      	movs	r3, r7
 80008d0:	2120      	movs	r1, #32
 80008d2:	1b42      	subs	r2, r0, r5
 80008d4:	3201      	adds	r2, #1
 80008d6:	40d3      	lsrs	r3, r2
 80008d8:	1a8a      	subs	r2, r1, r2
 80008da:	4097      	lsls	r7, r2
 80008dc:	1e7a      	subs	r2, r7, #1
 80008de:	4197      	sbcs	r7, r2
 80008e0:	2200      	movs	r2, #0
 80008e2:	433b      	orrs	r3, r7
 80008e4:	0759      	lsls	r1, r3, #29
 80008e6:	d193      	bne.n	8000810 <__aeabi_fadd+0xc0>
 80008e8:	e797      	b.n	800081a <__aeabi_fadd+0xca>
 80008ea:	000c      	movs	r4, r1
 80008ec:	0033      	movs	r3, r6
 80008ee:	08db      	lsrs	r3, r3, #3
 80008f0:	e7db      	b.n	80008aa <__aeabi_fadd+0x15a>
 80008f2:	2a00      	cmp	r2, #0
 80008f4:	d014      	beq.n	8000920 <__aeabi_fadd+0x1d0>
 80008f6:	1b42      	subs	r2, r0, r5
 80008f8:	2d00      	cmp	r5, #0
 80008fa:	d14b      	bne.n	8000994 <__aeabi_fadd+0x244>
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d0d0      	beq.n	80008a2 <__aeabi_fadd+0x152>
 8000900:	1e51      	subs	r1, r2, #1
 8000902:	2a01      	cmp	r2, #1
 8000904:	d100      	bne.n	8000908 <__aeabi_fadd+0x1b8>
 8000906:	e09e      	b.n	8000a46 <__aeabi_fadd+0x2f6>
 8000908:	2aff      	cmp	r2, #255	@ 0xff
 800090a:	d0ef      	beq.n	80008ec <__aeabi_fadd+0x19c>
 800090c:	000a      	movs	r2, r1
 800090e:	2a1b      	cmp	r2, #27
 8000910:	dd5f      	ble.n	80009d2 <__aeabi_fadd+0x282>
 8000912:	0002      	movs	r2, r0
 8000914:	1c73      	adds	r3, r6, #1
 8000916:	e77b      	b.n	8000810 <__aeabi_fadd+0xc0>
 8000918:	4b50      	ldr	r3, [pc, #320]	@ (8000a5c <__aeabi_fadd+0x30c>)
 800091a:	1a2a      	subs	r2, r5, r0
 800091c:	403b      	ands	r3, r7
 800091e:	e7e1      	b.n	80008e4 <__aeabi_fadd+0x194>
 8000920:	21fe      	movs	r1, #254	@ 0xfe
 8000922:	1c6a      	adds	r2, r5, #1
 8000924:	4211      	tst	r1, r2
 8000926:	d13b      	bne.n	80009a0 <__aeabi_fadd+0x250>
 8000928:	2d00      	cmp	r5, #0
 800092a:	d15d      	bne.n	80009e8 <__aeabi_fadd+0x298>
 800092c:	2b00      	cmp	r3, #0
 800092e:	d07f      	beq.n	8000a30 <__aeabi_fadd+0x2e0>
 8000930:	2e00      	cmp	r6, #0
 8000932:	d17f      	bne.n	8000a34 <__aeabi_fadd+0x2e4>
 8000934:	2200      	movs	r2, #0
 8000936:	08db      	lsrs	r3, r3, #3
 8000938:	025b      	lsls	r3, r3, #9
 800093a:	0a5b      	lsrs	r3, r3, #9
 800093c:	b2d0      	uxtb	r0, r2
 800093e:	e774      	b.n	800082a <__aeabi_fadd+0xda>
 8000940:	28ff      	cmp	r0, #255	@ 0xff
 8000942:	d0d2      	beq.n	80008ea <__aeabi_fadd+0x19a>
 8000944:	2480      	movs	r4, #128	@ 0x80
 8000946:	04e4      	lsls	r4, r4, #19
 8000948:	4323      	orrs	r3, r4
 800094a:	2401      	movs	r4, #1
 800094c:	2a1b      	cmp	r2, #27
 800094e:	dc07      	bgt.n	8000960 <__aeabi_fadd+0x210>
 8000950:	001c      	movs	r4, r3
 8000952:	2520      	movs	r5, #32
 8000954:	40d4      	lsrs	r4, r2
 8000956:	1aaa      	subs	r2, r5, r2
 8000958:	4093      	lsls	r3, r2
 800095a:	1e5a      	subs	r2, r3, #1
 800095c:	4193      	sbcs	r3, r2
 800095e:	431c      	orrs	r4, r3
 8000960:	1b33      	subs	r3, r6, r4
 8000962:	0005      	movs	r5, r0
 8000964:	000c      	movs	r4, r1
 8000966:	e74d      	b.n	8000804 <__aeabi_fadd+0xb4>
 8000968:	1b9f      	subs	r7, r3, r6
 800096a:	017a      	lsls	r2, r7, #5
 800096c:	d422      	bmi.n	80009b4 <__aeabi_fadd+0x264>
 800096e:	2f00      	cmp	r7, #0
 8000970:	d1a6      	bne.n	80008c0 <__aeabi_fadd+0x170>
 8000972:	2400      	movs	r4, #0
 8000974:	2000      	movs	r0, #0
 8000976:	2300      	movs	r3, #0
 8000978:	e757      	b.n	800082a <__aeabi_fadd+0xda>
 800097a:	199b      	adds	r3, r3, r6
 800097c:	2501      	movs	r5, #1
 800097e:	3201      	adds	r2, #1
 8000980:	0159      	lsls	r1, r3, #5
 8000982:	d400      	bmi.n	8000986 <__aeabi_fadd+0x236>
 8000984:	e740      	b.n	8000808 <__aeabi_fadd+0xb8>
 8000986:	2101      	movs	r1, #1
 8000988:	4835      	ldr	r0, [pc, #212]	@ (8000a60 <__aeabi_fadd+0x310>)
 800098a:	4019      	ands	r1, r3
 800098c:	085b      	lsrs	r3, r3, #1
 800098e:	4003      	ands	r3, r0
 8000990:	430b      	orrs	r3, r1
 8000992:	e7a7      	b.n	80008e4 <__aeabi_fadd+0x194>
 8000994:	28ff      	cmp	r0, #255	@ 0xff
 8000996:	d0a9      	beq.n	80008ec <__aeabi_fadd+0x19c>
 8000998:	2180      	movs	r1, #128	@ 0x80
 800099a:	04c9      	lsls	r1, r1, #19
 800099c:	430b      	orrs	r3, r1
 800099e:	e7b6      	b.n	800090e <__aeabi_fadd+0x1be>
 80009a0:	2aff      	cmp	r2, #255	@ 0xff
 80009a2:	d100      	bne.n	80009a6 <__aeabi_fadd+0x256>
 80009a4:	e779      	b.n	800089a <__aeabi_fadd+0x14a>
 80009a6:	199b      	adds	r3, r3, r6
 80009a8:	085b      	lsrs	r3, r3, #1
 80009aa:	0759      	lsls	r1, r3, #29
 80009ac:	d000      	beq.n	80009b0 <__aeabi_fadd+0x260>
 80009ae:	e72f      	b.n	8000810 <__aeabi_fadd+0xc0>
 80009b0:	08db      	lsrs	r3, r3, #3
 80009b2:	e7c1      	b.n	8000938 <__aeabi_fadd+0x1e8>
 80009b4:	000c      	movs	r4, r1
 80009b6:	1af7      	subs	r7, r6, r3
 80009b8:	e782      	b.n	80008c0 <__aeabi_fadd+0x170>
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d12c      	bne.n	8000a18 <__aeabi_fadd+0x2c8>
 80009be:	2e00      	cmp	r6, #0
 80009c0:	d193      	bne.n	80008ea <__aeabi_fadd+0x19a>
 80009c2:	2380      	movs	r3, #128	@ 0x80
 80009c4:	2400      	movs	r4, #0
 80009c6:	20ff      	movs	r0, #255	@ 0xff
 80009c8:	03db      	lsls	r3, r3, #15
 80009ca:	e72e      	b.n	800082a <__aeabi_fadd+0xda>
 80009cc:	2501      	movs	r5, #1
 80009ce:	1b9b      	subs	r3, r3, r6
 80009d0:	e718      	b.n	8000804 <__aeabi_fadd+0xb4>
 80009d2:	0019      	movs	r1, r3
 80009d4:	2520      	movs	r5, #32
 80009d6:	40d1      	lsrs	r1, r2
 80009d8:	1aaa      	subs	r2, r5, r2
 80009da:	4093      	lsls	r3, r2
 80009dc:	1e5a      	subs	r2, r3, #1
 80009de:	4193      	sbcs	r3, r2
 80009e0:	430b      	orrs	r3, r1
 80009e2:	0005      	movs	r5, r0
 80009e4:	199b      	adds	r3, r3, r6
 80009e6:	e753      	b.n	8000890 <__aeabi_fadd+0x140>
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d100      	bne.n	80009ee <__aeabi_fadd+0x29e>
 80009ec:	e77e      	b.n	80008ec <__aeabi_fadd+0x19c>
 80009ee:	2e00      	cmp	r6, #0
 80009f0:	d100      	bne.n	80009f4 <__aeabi_fadd+0x2a4>
 80009f2:	e77c      	b.n	80008ee <__aeabi_fadd+0x19e>
 80009f4:	2280      	movs	r2, #128	@ 0x80
 80009f6:	03d2      	lsls	r2, r2, #15
 80009f8:	4591      	cmp	r9, r2
 80009fa:	d302      	bcc.n	8000a02 <__aeabi_fadd+0x2b2>
 80009fc:	4594      	cmp	ip, r2
 80009fe:	d200      	bcs.n	8000a02 <__aeabi_fadd+0x2b2>
 8000a00:	0033      	movs	r3, r6
 8000a02:	08db      	lsrs	r3, r3, #3
 8000a04:	e753      	b.n	80008ae <__aeabi_fadd+0x15e>
 8000a06:	000c      	movs	r4, r1
 8000a08:	1af3      	subs	r3, r6, r3
 8000a0a:	3501      	adds	r5, #1
 8000a0c:	e6fa      	b.n	8000804 <__aeabi_fadd+0xb4>
 8000a0e:	2e00      	cmp	r6, #0
 8000a10:	d0af      	beq.n	8000972 <__aeabi_fadd+0x222>
 8000a12:	000c      	movs	r4, r1
 8000a14:	0033      	movs	r3, r6
 8000a16:	e78d      	b.n	8000934 <__aeabi_fadd+0x1e4>
 8000a18:	2e00      	cmp	r6, #0
 8000a1a:	d100      	bne.n	8000a1e <__aeabi_fadd+0x2ce>
 8000a1c:	e767      	b.n	80008ee <__aeabi_fadd+0x19e>
 8000a1e:	2280      	movs	r2, #128	@ 0x80
 8000a20:	03d2      	lsls	r2, r2, #15
 8000a22:	4591      	cmp	r9, r2
 8000a24:	d3ed      	bcc.n	8000a02 <__aeabi_fadd+0x2b2>
 8000a26:	4594      	cmp	ip, r2
 8000a28:	d2eb      	bcs.n	8000a02 <__aeabi_fadd+0x2b2>
 8000a2a:	000c      	movs	r4, r1
 8000a2c:	0033      	movs	r3, r6
 8000a2e:	e7e8      	b.n	8000a02 <__aeabi_fadd+0x2b2>
 8000a30:	0033      	movs	r3, r6
 8000a32:	e77f      	b.n	8000934 <__aeabi_fadd+0x1e4>
 8000a34:	199b      	adds	r3, r3, r6
 8000a36:	2200      	movs	r2, #0
 8000a38:	0159      	lsls	r1, r3, #5
 8000a3a:	d5b9      	bpl.n	80009b0 <__aeabi_fadd+0x260>
 8000a3c:	4a07      	ldr	r2, [pc, #28]	@ (8000a5c <__aeabi_fadd+0x30c>)
 8000a3e:	4013      	ands	r3, r2
 8000a40:	08db      	lsrs	r3, r3, #3
 8000a42:	2201      	movs	r2, #1
 8000a44:	e778      	b.n	8000938 <__aeabi_fadd+0x1e8>
 8000a46:	199b      	adds	r3, r3, r6
 8000a48:	3201      	adds	r2, #1
 8000a4a:	3501      	adds	r5, #1
 8000a4c:	0159      	lsls	r1, r3, #5
 8000a4e:	d49a      	bmi.n	8000986 <__aeabi_fadd+0x236>
 8000a50:	e6da      	b.n	8000808 <__aeabi_fadd+0xb8>
 8000a52:	1e03      	subs	r3, r0, #0
 8000a54:	d08d      	beq.n	8000972 <__aeabi_fadd+0x222>
 8000a56:	08db      	lsrs	r3, r3, #3
 8000a58:	e76e      	b.n	8000938 <__aeabi_fadd+0x1e8>
 8000a5a:	46c0      	nop			@ (mov r8, r8)
 8000a5c:	fbffffff 	.word	0xfbffffff
 8000a60:	7dffffff 	.word	0x7dffffff

08000a64 <__aeabi_fdiv>:
 8000a64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a66:	464f      	mov	r7, r9
 8000a68:	4646      	mov	r6, r8
 8000a6a:	46d6      	mov	lr, sl
 8000a6c:	0244      	lsls	r4, r0, #9
 8000a6e:	b5c0      	push	{r6, r7, lr}
 8000a70:	0047      	lsls	r7, r0, #1
 8000a72:	1c0e      	adds	r6, r1, #0
 8000a74:	0a64      	lsrs	r4, r4, #9
 8000a76:	0e3f      	lsrs	r7, r7, #24
 8000a78:	0fc5      	lsrs	r5, r0, #31
 8000a7a:	2f00      	cmp	r7, #0
 8000a7c:	d03c      	beq.n	8000af8 <__aeabi_fdiv+0x94>
 8000a7e:	2fff      	cmp	r7, #255	@ 0xff
 8000a80:	d042      	beq.n	8000b08 <__aeabi_fdiv+0xa4>
 8000a82:	2300      	movs	r3, #0
 8000a84:	2280      	movs	r2, #128	@ 0x80
 8000a86:	4699      	mov	r9, r3
 8000a88:	469a      	mov	sl, r3
 8000a8a:	00e4      	lsls	r4, r4, #3
 8000a8c:	04d2      	lsls	r2, r2, #19
 8000a8e:	4314      	orrs	r4, r2
 8000a90:	3f7f      	subs	r7, #127	@ 0x7f
 8000a92:	0273      	lsls	r3, r6, #9
 8000a94:	0a5b      	lsrs	r3, r3, #9
 8000a96:	4698      	mov	r8, r3
 8000a98:	0073      	lsls	r3, r6, #1
 8000a9a:	0e1b      	lsrs	r3, r3, #24
 8000a9c:	0ff6      	lsrs	r6, r6, #31
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d01b      	beq.n	8000ada <__aeabi_fdiv+0x76>
 8000aa2:	2bff      	cmp	r3, #255	@ 0xff
 8000aa4:	d013      	beq.n	8000ace <__aeabi_fdiv+0x6a>
 8000aa6:	4642      	mov	r2, r8
 8000aa8:	2180      	movs	r1, #128	@ 0x80
 8000aaa:	00d2      	lsls	r2, r2, #3
 8000aac:	04c9      	lsls	r1, r1, #19
 8000aae:	4311      	orrs	r1, r2
 8000ab0:	4688      	mov	r8, r1
 8000ab2:	2000      	movs	r0, #0
 8000ab4:	3b7f      	subs	r3, #127	@ 0x7f
 8000ab6:	0029      	movs	r1, r5
 8000ab8:	1aff      	subs	r7, r7, r3
 8000aba:	464b      	mov	r3, r9
 8000abc:	4071      	eors	r1, r6
 8000abe:	b2c9      	uxtb	r1, r1
 8000ac0:	2b0f      	cmp	r3, #15
 8000ac2:	d900      	bls.n	8000ac6 <__aeabi_fdiv+0x62>
 8000ac4:	e0b5      	b.n	8000c32 <__aeabi_fdiv+0x1ce>
 8000ac6:	4a74      	ldr	r2, [pc, #464]	@ (8000c98 <__aeabi_fdiv+0x234>)
 8000ac8:	009b      	lsls	r3, r3, #2
 8000aca:	58d3      	ldr	r3, [r2, r3]
 8000acc:	469f      	mov	pc, r3
 8000ace:	4643      	mov	r3, r8
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d13f      	bne.n	8000b54 <__aeabi_fdiv+0xf0>
 8000ad4:	3fff      	subs	r7, #255	@ 0xff
 8000ad6:	3302      	adds	r3, #2
 8000ad8:	e003      	b.n	8000ae2 <__aeabi_fdiv+0x7e>
 8000ada:	4643      	mov	r3, r8
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d12d      	bne.n	8000b3c <__aeabi_fdiv+0xd8>
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	0029      	movs	r1, r5
 8000ae4:	464a      	mov	r2, r9
 8000ae6:	4071      	eors	r1, r6
 8000ae8:	b2c9      	uxtb	r1, r1
 8000aea:	431a      	orrs	r2, r3
 8000aec:	2a0e      	cmp	r2, #14
 8000aee:	d838      	bhi.n	8000b62 <__aeabi_fdiv+0xfe>
 8000af0:	486a      	ldr	r0, [pc, #424]	@ (8000c9c <__aeabi_fdiv+0x238>)
 8000af2:	0092      	lsls	r2, r2, #2
 8000af4:	5882      	ldr	r2, [r0, r2]
 8000af6:	4697      	mov	pc, r2
 8000af8:	2c00      	cmp	r4, #0
 8000afa:	d113      	bne.n	8000b24 <__aeabi_fdiv+0xc0>
 8000afc:	2304      	movs	r3, #4
 8000afe:	4699      	mov	r9, r3
 8000b00:	3b03      	subs	r3, #3
 8000b02:	2700      	movs	r7, #0
 8000b04:	469a      	mov	sl, r3
 8000b06:	e7c4      	b.n	8000a92 <__aeabi_fdiv+0x2e>
 8000b08:	2c00      	cmp	r4, #0
 8000b0a:	d105      	bne.n	8000b18 <__aeabi_fdiv+0xb4>
 8000b0c:	2308      	movs	r3, #8
 8000b0e:	4699      	mov	r9, r3
 8000b10:	3b06      	subs	r3, #6
 8000b12:	27ff      	movs	r7, #255	@ 0xff
 8000b14:	469a      	mov	sl, r3
 8000b16:	e7bc      	b.n	8000a92 <__aeabi_fdiv+0x2e>
 8000b18:	230c      	movs	r3, #12
 8000b1a:	4699      	mov	r9, r3
 8000b1c:	3b09      	subs	r3, #9
 8000b1e:	27ff      	movs	r7, #255	@ 0xff
 8000b20:	469a      	mov	sl, r3
 8000b22:	e7b6      	b.n	8000a92 <__aeabi_fdiv+0x2e>
 8000b24:	0020      	movs	r0, r4
 8000b26:	f002 fc69 	bl	80033fc <__clzsi2>
 8000b2a:	2776      	movs	r7, #118	@ 0x76
 8000b2c:	1f43      	subs	r3, r0, #5
 8000b2e:	409c      	lsls	r4, r3
 8000b30:	2300      	movs	r3, #0
 8000b32:	427f      	negs	r7, r7
 8000b34:	4699      	mov	r9, r3
 8000b36:	469a      	mov	sl, r3
 8000b38:	1a3f      	subs	r7, r7, r0
 8000b3a:	e7aa      	b.n	8000a92 <__aeabi_fdiv+0x2e>
 8000b3c:	4640      	mov	r0, r8
 8000b3e:	f002 fc5d 	bl	80033fc <__clzsi2>
 8000b42:	4642      	mov	r2, r8
 8000b44:	1f43      	subs	r3, r0, #5
 8000b46:	409a      	lsls	r2, r3
 8000b48:	2376      	movs	r3, #118	@ 0x76
 8000b4a:	425b      	negs	r3, r3
 8000b4c:	1a1b      	subs	r3, r3, r0
 8000b4e:	4690      	mov	r8, r2
 8000b50:	2000      	movs	r0, #0
 8000b52:	e7b0      	b.n	8000ab6 <__aeabi_fdiv+0x52>
 8000b54:	2303      	movs	r3, #3
 8000b56:	464a      	mov	r2, r9
 8000b58:	431a      	orrs	r2, r3
 8000b5a:	4691      	mov	r9, r2
 8000b5c:	2003      	movs	r0, #3
 8000b5e:	33fc      	adds	r3, #252	@ 0xfc
 8000b60:	e7a9      	b.n	8000ab6 <__aeabi_fdiv+0x52>
 8000b62:	000d      	movs	r5, r1
 8000b64:	20ff      	movs	r0, #255	@ 0xff
 8000b66:	2200      	movs	r2, #0
 8000b68:	05c0      	lsls	r0, r0, #23
 8000b6a:	07ed      	lsls	r5, r5, #31
 8000b6c:	4310      	orrs	r0, r2
 8000b6e:	4328      	orrs	r0, r5
 8000b70:	bce0      	pop	{r5, r6, r7}
 8000b72:	46ba      	mov	sl, r7
 8000b74:	46b1      	mov	r9, r6
 8000b76:	46a8      	mov	r8, r5
 8000b78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b7a:	000d      	movs	r5, r1
 8000b7c:	2000      	movs	r0, #0
 8000b7e:	2200      	movs	r2, #0
 8000b80:	e7f2      	b.n	8000b68 <__aeabi_fdiv+0x104>
 8000b82:	4653      	mov	r3, sl
 8000b84:	2b02      	cmp	r3, #2
 8000b86:	d0ed      	beq.n	8000b64 <__aeabi_fdiv+0x100>
 8000b88:	2b03      	cmp	r3, #3
 8000b8a:	d033      	beq.n	8000bf4 <__aeabi_fdiv+0x190>
 8000b8c:	46a0      	mov	r8, r4
 8000b8e:	2b01      	cmp	r3, #1
 8000b90:	d105      	bne.n	8000b9e <__aeabi_fdiv+0x13a>
 8000b92:	2000      	movs	r0, #0
 8000b94:	2200      	movs	r2, #0
 8000b96:	e7e7      	b.n	8000b68 <__aeabi_fdiv+0x104>
 8000b98:	0035      	movs	r5, r6
 8000b9a:	2803      	cmp	r0, #3
 8000b9c:	d07a      	beq.n	8000c94 <__aeabi_fdiv+0x230>
 8000b9e:	003b      	movs	r3, r7
 8000ba0:	337f      	adds	r3, #127	@ 0x7f
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	dd2d      	ble.n	8000c02 <__aeabi_fdiv+0x19e>
 8000ba6:	4642      	mov	r2, r8
 8000ba8:	0752      	lsls	r2, r2, #29
 8000baa:	d007      	beq.n	8000bbc <__aeabi_fdiv+0x158>
 8000bac:	220f      	movs	r2, #15
 8000bae:	4641      	mov	r1, r8
 8000bb0:	400a      	ands	r2, r1
 8000bb2:	2a04      	cmp	r2, #4
 8000bb4:	d002      	beq.n	8000bbc <__aeabi_fdiv+0x158>
 8000bb6:	2204      	movs	r2, #4
 8000bb8:	4694      	mov	ip, r2
 8000bba:	44e0      	add	r8, ip
 8000bbc:	4642      	mov	r2, r8
 8000bbe:	0112      	lsls	r2, r2, #4
 8000bc0:	d505      	bpl.n	8000bce <__aeabi_fdiv+0x16a>
 8000bc2:	4642      	mov	r2, r8
 8000bc4:	4b36      	ldr	r3, [pc, #216]	@ (8000ca0 <__aeabi_fdiv+0x23c>)
 8000bc6:	401a      	ands	r2, r3
 8000bc8:	003b      	movs	r3, r7
 8000bca:	4690      	mov	r8, r2
 8000bcc:	3380      	adds	r3, #128	@ 0x80
 8000bce:	2bfe      	cmp	r3, #254	@ 0xfe
 8000bd0:	dcc8      	bgt.n	8000b64 <__aeabi_fdiv+0x100>
 8000bd2:	4642      	mov	r2, r8
 8000bd4:	0192      	lsls	r2, r2, #6
 8000bd6:	0a52      	lsrs	r2, r2, #9
 8000bd8:	b2d8      	uxtb	r0, r3
 8000bda:	e7c5      	b.n	8000b68 <__aeabi_fdiv+0x104>
 8000bdc:	2280      	movs	r2, #128	@ 0x80
 8000bde:	2500      	movs	r5, #0
 8000be0:	20ff      	movs	r0, #255	@ 0xff
 8000be2:	03d2      	lsls	r2, r2, #15
 8000be4:	e7c0      	b.n	8000b68 <__aeabi_fdiv+0x104>
 8000be6:	2280      	movs	r2, #128	@ 0x80
 8000be8:	03d2      	lsls	r2, r2, #15
 8000bea:	4214      	tst	r4, r2
 8000bec:	d002      	beq.n	8000bf4 <__aeabi_fdiv+0x190>
 8000bee:	4643      	mov	r3, r8
 8000bf0:	4213      	tst	r3, r2
 8000bf2:	d049      	beq.n	8000c88 <__aeabi_fdiv+0x224>
 8000bf4:	2280      	movs	r2, #128	@ 0x80
 8000bf6:	03d2      	lsls	r2, r2, #15
 8000bf8:	4322      	orrs	r2, r4
 8000bfa:	0252      	lsls	r2, r2, #9
 8000bfc:	20ff      	movs	r0, #255	@ 0xff
 8000bfe:	0a52      	lsrs	r2, r2, #9
 8000c00:	e7b2      	b.n	8000b68 <__aeabi_fdiv+0x104>
 8000c02:	2201      	movs	r2, #1
 8000c04:	1ad3      	subs	r3, r2, r3
 8000c06:	2b1b      	cmp	r3, #27
 8000c08:	dcc3      	bgt.n	8000b92 <__aeabi_fdiv+0x12e>
 8000c0a:	4642      	mov	r2, r8
 8000c0c:	40da      	lsrs	r2, r3
 8000c0e:	4643      	mov	r3, r8
 8000c10:	379e      	adds	r7, #158	@ 0x9e
 8000c12:	40bb      	lsls	r3, r7
 8000c14:	1e59      	subs	r1, r3, #1
 8000c16:	418b      	sbcs	r3, r1
 8000c18:	431a      	orrs	r2, r3
 8000c1a:	0753      	lsls	r3, r2, #29
 8000c1c:	d004      	beq.n	8000c28 <__aeabi_fdiv+0x1c4>
 8000c1e:	230f      	movs	r3, #15
 8000c20:	4013      	ands	r3, r2
 8000c22:	2b04      	cmp	r3, #4
 8000c24:	d000      	beq.n	8000c28 <__aeabi_fdiv+0x1c4>
 8000c26:	3204      	adds	r2, #4
 8000c28:	0153      	lsls	r3, r2, #5
 8000c2a:	d529      	bpl.n	8000c80 <__aeabi_fdiv+0x21c>
 8000c2c:	2001      	movs	r0, #1
 8000c2e:	2200      	movs	r2, #0
 8000c30:	e79a      	b.n	8000b68 <__aeabi_fdiv+0x104>
 8000c32:	4642      	mov	r2, r8
 8000c34:	0163      	lsls	r3, r4, #5
 8000c36:	0155      	lsls	r5, r2, #5
 8000c38:	42ab      	cmp	r3, r5
 8000c3a:	d215      	bcs.n	8000c68 <__aeabi_fdiv+0x204>
 8000c3c:	201b      	movs	r0, #27
 8000c3e:	2200      	movs	r2, #0
 8000c40:	3f01      	subs	r7, #1
 8000c42:	2601      	movs	r6, #1
 8000c44:	001c      	movs	r4, r3
 8000c46:	0052      	lsls	r2, r2, #1
 8000c48:	005b      	lsls	r3, r3, #1
 8000c4a:	2c00      	cmp	r4, #0
 8000c4c:	db01      	blt.n	8000c52 <__aeabi_fdiv+0x1ee>
 8000c4e:	429d      	cmp	r5, r3
 8000c50:	d801      	bhi.n	8000c56 <__aeabi_fdiv+0x1f2>
 8000c52:	1b5b      	subs	r3, r3, r5
 8000c54:	4332      	orrs	r2, r6
 8000c56:	3801      	subs	r0, #1
 8000c58:	2800      	cmp	r0, #0
 8000c5a:	d1f3      	bne.n	8000c44 <__aeabi_fdiv+0x1e0>
 8000c5c:	1e58      	subs	r0, r3, #1
 8000c5e:	4183      	sbcs	r3, r0
 8000c60:	4313      	orrs	r3, r2
 8000c62:	4698      	mov	r8, r3
 8000c64:	000d      	movs	r5, r1
 8000c66:	e79a      	b.n	8000b9e <__aeabi_fdiv+0x13a>
 8000c68:	201a      	movs	r0, #26
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	1b5b      	subs	r3, r3, r5
 8000c6e:	e7e8      	b.n	8000c42 <__aeabi_fdiv+0x1de>
 8000c70:	3b02      	subs	r3, #2
 8000c72:	425a      	negs	r2, r3
 8000c74:	4153      	adcs	r3, r2
 8000c76:	425b      	negs	r3, r3
 8000c78:	0035      	movs	r5, r6
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	b2d8      	uxtb	r0, r3
 8000c7e:	e773      	b.n	8000b68 <__aeabi_fdiv+0x104>
 8000c80:	0192      	lsls	r2, r2, #6
 8000c82:	2000      	movs	r0, #0
 8000c84:	0a52      	lsrs	r2, r2, #9
 8000c86:	e76f      	b.n	8000b68 <__aeabi_fdiv+0x104>
 8000c88:	431a      	orrs	r2, r3
 8000c8a:	0252      	lsls	r2, r2, #9
 8000c8c:	0035      	movs	r5, r6
 8000c8e:	20ff      	movs	r0, #255	@ 0xff
 8000c90:	0a52      	lsrs	r2, r2, #9
 8000c92:	e769      	b.n	8000b68 <__aeabi_fdiv+0x104>
 8000c94:	4644      	mov	r4, r8
 8000c96:	e7ad      	b.n	8000bf4 <__aeabi_fdiv+0x190>
 8000c98:	0800fa9c 	.word	0x0800fa9c
 8000c9c:	0800fadc 	.word	0x0800fadc
 8000ca0:	f7ffffff 	.word	0xf7ffffff

08000ca4 <__eqsf2>:
 8000ca4:	b570      	push	{r4, r5, r6, lr}
 8000ca6:	0042      	lsls	r2, r0, #1
 8000ca8:	024e      	lsls	r6, r1, #9
 8000caa:	004c      	lsls	r4, r1, #1
 8000cac:	0245      	lsls	r5, r0, #9
 8000cae:	0a6d      	lsrs	r5, r5, #9
 8000cb0:	0e12      	lsrs	r2, r2, #24
 8000cb2:	0fc3      	lsrs	r3, r0, #31
 8000cb4:	0a76      	lsrs	r6, r6, #9
 8000cb6:	0e24      	lsrs	r4, r4, #24
 8000cb8:	0fc9      	lsrs	r1, r1, #31
 8000cba:	2aff      	cmp	r2, #255	@ 0xff
 8000cbc:	d010      	beq.n	8000ce0 <__eqsf2+0x3c>
 8000cbe:	2cff      	cmp	r4, #255	@ 0xff
 8000cc0:	d00c      	beq.n	8000cdc <__eqsf2+0x38>
 8000cc2:	2001      	movs	r0, #1
 8000cc4:	42a2      	cmp	r2, r4
 8000cc6:	d10a      	bne.n	8000cde <__eqsf2+0x3a>
 8000cc8:	42b5      	cmp	r5, r6
 8000cca:	d108      	bne.n	8000cde <__eqsf2+0x3a>
 8000ccc:	428b      	cmp	r3, r1
 8000cce:	d00f      	beq.n	8000cf0 <__eqsf2+0x4c>
 8000cd0:	2a00      	cmp	r2, #0
 8000cd2:	d104      	bne.n	8000cde <__eqsf2+0x3a>
 8000cd4:	0028      	movs	r0, r5
 8000cd6:	1e43      	subs	r3, r0, #1
 8000cd8:	4198      	sbcs	r0, r3
 8000cda:	e000      	b.n	8000cde <__eqsf2+0x3a>
 8000cdc:	2001      	movs	r0, #1
 8000cde:	bd70      	pop	{r4, r5, r6, pc}
 8000ce0:	2001      	movs	r0, #1
 8000ce2:	2cff      	cmp	r4, #255	@ 0xff
 8000ce4:	d1fb      	bne.n	8000cde <__eqsf2+0x3a>
 8000ce6:	4335      	orrs	r5, r6
 8000ce8:	d1f9      	bne.n	8000cde <__eqsf2+0x3a>
 8000cea:	404b      	eors	r3, r1
 8000cec:	0018      	movs	r0, r3
 8000cee:	e7f6      	b.n	8000cde <__eqsf2+0x3a>
 8000cf0:	2000      	movs	r0, #0
 8000cf2:	e7f4      	b.n	8000cde <__eqsf2+0x3a>

08000cf4 <__gesf2>:
 8000cf4:	b530      	push	{r4, r5, lr}
 8000cf6:	0042      	lsls	r2, r0, #1
 8000cf8:	0244      	lsls	r4, r0, #9
 8000cfa:	024d      	lsls	r5, r1, #9
 8000cfc:	0fc3      	lsrs	r3, r0, #31
 8000cfe:	0048      	lsls	r0, r1, #1
 8000d00:	0a64      	lsrs	r4, r4, #9
 8000d02:	0e12      	lsrs	r2, r2, #24
 8000d04:	0a6d      	lsrs	r5, r5, #9
 8000d06:	0e00      	lsrs	r0, r0, #24
 8000d08:	0fc9      	lsrs	r1, r1, #31
 8000d0a:	2aff      	cmp	r2, #255	@ 0xff
 8000d0c:	d019      	beq.n	8000d42 <__gesf2+0x4e>
 8000d0e:	28ff      	cmp	r0, #255	@ 0xff
 8000d10:	d00b      	beq.n	8000d2a <__gesf2+0x36>
 8000d12:	2a00      	cmp	r2, #0
 8000d14:	d11e      	bne.n	8000d54 <__gesf2+0x60>
 8000d16:	2800      	cmp	r0, #0
 8000d18:	d10b      	bne.n	8000d32 <__gesf2+0x3e>
 8000d1a:	2d00      	cmp	r5, #0
 8000d1c:	d027      	beq.n	8000d6e <__gesf2+0x7a>
 8000d1e:	2c00      	cmp	r4, #0
 8000d20:	d134      	bne.n	8000d8c <__gesf2+0x98>
 8000d22:	2900      	cmp	r1, #0
 8000d24:	d02f      	beq.n	8000d86 <__gesf2+0x92>
 8000d26:	0008      	movs	r0, r1
 8000d28:	bd30      	pop	{r4, r5, pc}
 8000d2a:	2d00      	cmp	r5, #0
 8000d2c:	d128      	bne.n	8000d80 <__gesf2+0x8c>
 8000d2e:	2a00      	cmp	r2, #0
 8000d30:	d101      	bne.n	8000d36 <__gesf2+0x42>
 8000d32:	2c00      	cmp	r4, #0
 8000d34:	d0f5      	beq.n	8000d22 <__gesf2+0x2e>
 8000d36:	428b      	cmp	r3, r1
 8000d38:	d107      	bne.n	8000d4a <__gesf2+0x56>
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d023      	beq.n	8000d86 <__gesf2+0x92>
 8000d3e:	0018      	movs	r0, r3
 8000d40:	e7f2      	b.n	8000d28 <__gesf2+0x34>
 8000d42:	2c00      	cmp	r4, #0
 8000d44:	d11c      	bne.n	8000d80 <__gesf2+0x8c>
 8000d46:	28ff      	cmp	r0, #255	@ 0xff
 8000d48:	d014      	beq.n	8000d74 <__gesf2+0x80>
 8000d4a:	1e58      	subs	r0, r3, #1
 8000d4c:	2302      	movs	r3, #2
 8000d4e:	4018      	ands	r0, r3
 8000d50:	3801      	subs	r0, #1
 8000d52:	e7e9      	b.n	8000d28 <__gesf2+0x34>
 8000d54:	2800      	cmp	r0, #0
 8000d56:	d0f8      	beq.n	8000d4a <__gesf2+0x56>
 8000d58:	428b      	cmp	r3, r1
 8000d5a:	d1f6      	bne.n	8000d4a <__gesf2+0x56>
 8000d5c:	4282      	cmp	r2, r0
 8000d5e:	dcf4      	bgt.n	8000d4a <__gesf2+0x56>
 8000d60:	dbeb      	blt.n	8000d3a <__gesf2+0x46>
 8000d62:	42ac      	cmp	r4, r5
 8000d64:	d8f1      	bhi.n	8000d4a <__gesf2+0x56>
 8000d66:	2000      	movs	r0, #0
 8000d68:	42ac      	cmp	r4, r5
 8000d6a:	d2dd      	bcs.n	8000d28 <__gesf2+0x34>
 8000d6c:	e7e5      	b.n	8000d3a <__gesf2+0x46>
 8000d6e:	2c00      	cmp	r4, #0
 8000d70:	d0da      	beq.n	8000d28 <__gesf2+0x34>
 8000d72:	e7ea      	b.n	8000d4a <__gesf2+0x56>
 8000d74:	2d00      	cmp	r5, #0
 8000d76:	d103      	bne.n	8000d80 <__gesf2+0x8c>
 8000d78:	428b      	cmp	r3, r1
 8000d7a:	d1e6      	bne.n	8000d4a <__gesf2+0x56>
 8000d7c:	2000      	movs	r0, #0
 8000d7e:	e7d3      	b.n	8000d28 <__gesf2+0x34>
 8000d80:	2002      	movs	r0, #2
 8000d82:	4240      	negs	r0, r0
 8000d84:	e7d0      	b.n	8000d28 <__gesf2+0x34>
 8000d86:	2001      	movs	r0, #1
 8000d88:	4240      	negs	r0, r0
 8000d8a:	e7cd      	b.n	8000d28 <__gesf2+0x34>
 8000d8c:	428b      	cmp	r3, r1
 8000d8e:	d0e8      	beq.n	8000d62 <__gesf2+0x6e>
 8000d90:	e7db      	b.n	8000d4a <__gesf2+0x56>
 8000d92:	46c0      	nop			@ (mov r8, r8)

08000d94 <__lesf2>:
 8000d94:	b530      	push	{r4, r5, lr}
 8000d96:	0042      	lsls	r2, r0, #1
 8000d98:	0244      	lsls	r4, r0, #9
 8000d9a:	024d      	lsls	r5, r1, #9
 8000d9c:	0fc3      	lsrs	r3, r0, #31
 8000d9e:	0048      	lsls	r0, r1, #1
 8000da0:	0a64      	lsrs	r4, r4, #9
 8000da2:	0e12      	lsrs	r2, r2, #24
 8000da4:	0a6d      	lsrs	r5, r5, #9
 8000da6:	0e00      	lsrs	r0, r0, #24
 8000da8:	0fc9      	lsrs	r1, r1, #31
 8000daa:	2aff      	cmp	r2, #255	@ 0xff
 8000dac:	d01a      	beq.n	8000de4 <__lesf2+0x50>
 8000dae:	28ff      	cmp	r0, #255	@ 0xff
 8000db0:	d00e      	beq.n	8000dd0 <__lesf2+0x3c>
 8000db2:	2a00      	cmp	r2, #0
 8000db4:	d11e      	bne.n	8000df4 <__lesf2+0x60>
 8000db6:	2800      	cmp	r0, #0
 8000db8:	d10e      	bne.n	8000dd8 <__lesf2+0x44>
 8000dba:	2d00      	cmp	r5, #0
 8000dbc:	d02a      	beq.n	8000e14 <__lesf2+0x80>
 8000dbe:	2c00      	cmp	r4, #0
 8000dc0:	d00c      	beq.n	8000ddc <__lesf2+0x48>
 8000dc2:	428b      	cmp	r3, r1
 8000dc4:	d01d      	beq.n	8000e02 <__lesf2+0x6e>
 8000dc6:	1e58      	subs	r0, r3, #1
 8000dc8:	2302      	movs	r3, #2
 8000dca:	4018      	ands	r0, r3
 8000dcc:	3801      	subs	r0, #1
 8000dce:	e010      	b.n	8000df2 <__lesf2+0x5e>
 8000dd0:	2d00      	cmp	r5, #0
 8000dd2:	d10d      	bne.n	8000df0 <__lesf2+0x5c>
 8000dd4:	2a00      	cmp	r2, #0
 8000dd6:	d120      	bne.n	8000e1a <__lesf2+0x86>
 8000dd8:	2c00      	cmp	r4, #0
 8000dda:	d11e      	bne.n	8000e1a <__lesf2+0x86>
 8000ddc:	2900      	cmp	r1, #0
 8000dde:	d023      	beq.n	8000e28 <__lesf2+0x94>
 8000de0:	0008      	movs	r0, r1
 8000de2:	e006      	b.n	8000df2 <__lesf2+0x5e>
 8000de4:	2c00      	cmp	r4, #0
 8000de6:	d103      	bne.n	8000df0 <__lesf2+0x5c>
 8000de8:	28ff      	cmp	r0, #255	@ 0xff
 8000dea:	d1ec      	bne.n	8000dc6 <__lesf2+0x32>
 8000dec:	2d00      	cmp	r5, #0
 8000dee:	d017      	beq.n	8000e20 <__lesf2+0x8c>
 8000df0:	2002      	movs	r0, #2
 8000df2:	bd30      	pop	{r4, r5, pc}
 8000df4:	2800      	cmp	r0, #0
 8000df6:	d0e6      	beq.n	8000dc6 <__lesf2+0x32>
 8000df8:	428b      	cmp	r3, r1
 8000dfa:	d1e4      	bne.n	8000dc6 <__lesf2+0x32>
 8000dfc:	4282      	cmp	r2, r0
 8000dfe:	dce2      	bgt.n	8000dc6 <__lesf2+0x32>
 8000e00:	db04      	blt.n	8000e0c <__lesf2+0x78>
 8000e02:	42ac      	cmp	r4, r5
 8000e04:	d8df      	bhi.n	8000dc6 <__lesf2+0x32>
 8000e06:	2000      	movs	r0, #0
 8000e08:	42ac      	cmp	r4, r5
 8000e0a:	d2f2      	bcs.n	8000df2 <__lesf2+0x5e>
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d00b      	beq.n	8000e28 <__lesf2+0x94>
 8000e10:	0018      	movs	r0, r3
 8000e12:	e7ee      	b.n	8000df2 <__lesf2+0x5e>
 8000e14:	2c00      	cmp	r4, #0
 8000e16:	d0ec      	beq.n	8000df2 <__lesf2+0x5e>
 8000e18:	e7d5      	b.n	8000dc6 <__lesf2+0x32>
 8000e1a:	428b      	cmp	r3, r1
 8000e1c:	d1d3      	bne.n	8000dc6 <__lesf2+0x32>
 8000e1e:	e7f5      	b.n	8000e0c <__lesf2+0x78>
 8000e20:	2000      	movs	r0, #0
 8000e22:	428b      	cmp	r3, r1
 8000e24:	d0e5      	beq.n	8000df2 <__lesf2+0x5e>
 8000e26:	e7ce      	b.n	8000dc6 <__lesf2+0x32>
 8000e28:	2001      	movs	r0, #1
 8000e2a:	4240      	negs	r0, r0
 8000e2c:	e7e1      	b.n	8000df2 <__lesf2+0x5e>
 8000e2e:	46c0      	nop			@ (mov r8, r8)

08000e30 <__aeabi_fmul>:
 8000e30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e32:	464f      	mov	r7, r9
 8000e34:	4646      	mov	r6, r8
 8000e36:	46d6      	mov	lr, sl
 8000e38:	0243      	lsls	r3, r0, #9
 8000e3a:	0a5b      	lsrs	r3, r3, #9
 8000e3c:	0045      	lsls	r5, r0, #1
 8000e3e:	b5c0      	push	{r6, r7, lr}
 8000e40:	4699      	mov	r9, r3
 8000e42:	1c0f      	adds	r7, r1, #0
 8000e44:	0e2d      	lsrs	r5, r5, #24
 8000e46:	0fc6      	lsrs	r6, r0, #31
 8000e48:	2d00      	cmp	r5, #0
 8000e4a:	d100      	bne.n	8000e4e <__aeabi_fmul+0x1e>
 8000e4c:	e088      	b.n	8000f60 <__aeabi_fmul+0x130>
 8000e4e:	2dff      	cmp	r5, #255	@ 0xff
 8000e50:	d100      	bne.n	8000e54 <__aeabi_fmul+0x24>
 8000e52:	e08d      	b.n	8000f70 <__aeabi_fmul+0x140>
 8000e54:	2280      	movs	r2, #128	@ 0x80
 8000e56:	00db      	lsls	r3, r3, #3
 8000e58:	04d2      	lsls	r2, r2, #19
 8000e5a:	431a      	orrs	r2, r3
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	4691      	mov	r9, r2
 8000e60:	4698      	mov	r8, r3
 8000e62:	469a      	mov	sl, r3
 8000e64:	3d7f      	subs	r5, #127	@ 0x7f
 8000e66:	027c      	lsls	r4, r7, #9
 8000e68:	007b      	lsls	r3, r7, #1
 8000e6a:	0a64      	lsrs	r4, r4, #9
 8000e6c:	0e1b      	lsrs	r3, r3, #24
 8000e6e:	0fff      	lsrs	r7, r7, #31
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d068      	beq.n	8000f46 <__aeabi_fmul+0x116>
 8000e74:	2bff      	cmp	r3, #255	@ 0xff
 8000e76:	d021      	beq.n	8000ebc <__aeabi_fmul+0x8c>
 8000e78:	2280      	movs	r2, #128	@ 0x80
 8000e7a:	00e4      	lsls	r4, r4, #3
 8000e7c:	04d2      	lsls	r2, r2, #19
 8000e7e:	4314      	orrs	r4, r2
 8000e80:	4642      	mov	r2, r8
 8000e82:	3b7f      	subs	r3, #127	@ 0x7f
 8000e84:	195b      	adds	r3, r3, r5
 8000e86:	2100      	movs	r1, #0
 8000e88:	1c5d      	adds	r5, r3, #1
 8000e8a:	2a0a      	cmp	r2, #10
 8000e8c:	dc2e      	bgt.n	8000eec <__aeabi_fmul+0xbc>
 8000e8e:	407e      	eors	r6, r7
 8000e90:	4642      	mov	r2, r8
 8000e92:	2a02      	cmp	r2, #2
 8000e94:	dc23      	bgt.n	8000ede <__aeabi_fmul+0xae>
 8000e96:	3a01      	subs	r2, #1
 8000e98:	2a01      	cmp	r2, #1
 8000e9a:	d900      	bls.n	8000e9e <__aeabi_fmul+0x6e>
 8000e9c:	e0bd      	b.n	800101a <__aeabi_fmul+0x1ea>
 8000e9e:	2902      	cmp	r1, #2
 8000ea0:	d06e      	beq.n	8000f80 <__aeabi_fmul+0x150>
 8000ea2:	2901      	cmp	r1, #1
 8000ea4:	d12c      	bne.n	8000f00 <__aeabi_fmul+0xd0>
 8000ea6:	2000      	movs	r0, #0
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	05c0      	lsls	r0, r0, #23
 8000eac:	07f6      	lsls	r6, r6, #31
 8000eae:	4310      	orrs	r0, r2
 8000eb0:	4330      	orrs	r0, r6
 8000eb2:	bce0      	pop	{r5, r6, r7}
 8000eb4:	46ba      	mov	sl, r7
 8000eb6:	46b1      	mov	r9, r6
 8000eb8:	46a8      	mov	r8, r5
 8000eba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ebc:	002b      	movs	r3, r5
 8000ebe:	33ff      	adds	r3, #255	@ 0xff
 8000ec0:	2c00      	cmp	r4, #0
 8000ec2:	d065      	beq.n	8000f90 <__aeabi_fmul+0x160>
 8000ec4:	2203      	movs	r2, #3
 8000ec6:	4641      	mov	r1, r8
 8000ec8:	4311      	orrs	r1, r2
 8000eca:	0032      	movs	r2, r6
 8000ecc:	3501      	adds	r5, #1
 8000ece:	4688      	mov	r8, r1
 8000ed0:	407a      	eors	r2, r7
 8000ed2:	35ff      	adds	r5, #255	@ 0xff
 8000ed4:	290a      	cmp	r1, #10
 8000ed6:	dd00      	ble.n	8000eda <__aeabi_fmul+0xaa>
 8000ed8:	e0d8      	b.n	800108c <__aeabi_fmul+0x25c>
 8000eda:	0016      	movs	r6, r2
 8000edc:	2103      	movs	r1, #3
 8000ede:	4640      	mov	r0, r8
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	4082      	lsls	r2, r0
 8000ee4:	20a6      	movs	r0, #166	@ 0xa6
 8000ee6:	00c0      	lsls	r0, r0, #3
 8000ee8:	4202      	tst	r2, r0
 8000eea:	d020      	beq.n	8000f2e <__aeabi_fmul+0xfe>
 8000eec:	4653      	mov	r3, sl
 8000eee:	2b02      	cmp	r3, #2
 8000ef0:	d046      	beq.n	8000f80 <__aeabi_fmul+0x150>
 8000ef2:	2b03      	cmp	r3, #3
 8000ef4:	d100      	bne.n	8000ef8 <__aeabi_fmul+0xc8>
 8000ef6:	e0bb      	b.n	8001070 <__aeabi_fmul+0x240>
 8000ef8:	4651      	mov	r1, sl
 8000efa:	464c      	mov	r4, r9
 8000efc:	2901      	cmp	r1, #1
 8000efe:	d0d2      	beq.n	8000ea6 <__aeabi_fmul+0x76>
 8000f00:	002b      	movs	r3, r5
 8000f02:	337f      	adds	r3, #127	@ 0x7f
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	dd70      	ble.n	8000fea <__aeabi_fmul+0x1ba>
 8000f08:	0762      	lsls	r2, r4, #29
 8000f0a:	d004      	beq.n	8000f16 <__aeabi_fmul+0xe6>
 8000f0c:	220f      	movs	r2, #15
 8000f0e:	4022      	ands	r2, r4
 8000f10:	2a04      	cmp	r2, #4
 8000f12:	d000      	beq.n	8000f16 <__aeabi_fmul+0xe6>
 8000f14:	3404      	adds	r4, #4
 8000f16:	0122      	lsls	r2, r4, #4
 8000f18:	d503      	bpl.n	8000f22 <__aeabi_fmul+0xf2>
 8000f1a:	4b63      	ldr	r3, [pc, #396]	@ (80010a8 <__aeabi_fmul+0x278>)
 8000f1c:	401c      	ands	r4, r3
 8000f1e:	002b      	movs	r3, r5
 8000f20:	3380      	adds	r3, #128	@ 0x80
 8000f22:	2bfe      	cmp	r3, #254	@ 0xfe
 8000f24:	dc2c      	bgt.n	8000f80 <__aeabi_fmul+0x150>
 8000f26:	01a2      	lsls	r2, r4, #6
 8000f28:	0a52      	lsrs	r2, r2, #9
 8000f2a:	b2d8      	uxtb	r0, r3
 8000f2c:	e7bd      	b.n	8000eaa <__aeabi_fmul+0x7a>
 8000f2e:	2090      	movs	r0, #144	@ 0x90
 8000f30:	0080      	lsls	r0, r0, #2
 8000f32:	4202      	tst	r2, r0
 8000f34:	d127      	bne.n	8000f86 <__aeabi_fmul+0x156>
 8000f36:	38b9      	subs	r0, #185	@ 0xb9
 8000f38:	38ff      	subs	r0, #255	@ 0xff
 8000f3a:	4210      	tst	r0, r2
 8000f3c:	d06d      	beq.n	800101a <__aeabi_fmul+0x1ea>
 8000f3e:	003e      	movs	r6, r7
 8000f40:	46a1      	mov	r9, r4
 8000f42:	468a      	mov	sl, r1
 8000f44:	e7d2      	b.n	8000eec <__aeabi_fmul+0xbc>
 8000f46:	2c00      	cmp	r4, #0
 8000f48:	d141      	bne.n	8000fce <__aeabi_fmul+0x19e>
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	4642      	mov	r2, r8
 8000f4e:	431a      	orrs	r2, r3
 8000f50:	4690      	mov	r8, r2
 8000f52:	002b      	movs	r3, r5
 8000f54:	4642      	mov	r2, r8
 8000f56:	2101      	movs	r1, #1
 8000f58:	1c5d      	adds	r5, r3, #1
 8000f5a:	2a0a      	cmp	r2, #10
 8000f5c:	dd97      	ble.n	8000e8e <__aeabi_fmul+0x5e>
 8000f5e:	e7c5      	b.n	8000eec <__aeabi_fmul+0xbc>
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d126      	bne.n	8000fb2 <__aeabi_fmul+0x182>
 8000f64:	2304      	movs	r3, #4
 8000f66:	4698      	mov	r8, r3
 8000f68:	3b03      	subs	r3, #3
 8000f6a:	2500      	movs	r5, #0
 8000f6c:	469a      	mov	sl, r3
 8000f6e:	e77a      	b.n	8000e66 <__aeabi_fmul+0x36>
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d118      	bne.n	8000fa6 <__aeabi_fmul+0x176>
 8000f74:	2308      	movs	r3, #8
 8000f76:	4698      	mov	r8, r3
 8000f78:	3b06      	subs	r3, #6
 8000f7a:	25ff      	movs	r5, #255	@ 0xff
 8000f7c:	469a      	mov	sl, r3
 8000f7e:	e772      	b.n	8000e66 <__aeabi_fmul+0x36>
 8000f80:	20ff      	movs	r0, #255	@ 0xff
 8000f82:	2200      	movs	r2, #0
 8000f84:	e791      	b.n	8000eaa <__aeabi_fmul+0x7a>
 8000f86:	2280      	movs	r2, #128	@ 0x80
 8000f88:	2600      	movs	r6, #0
 8000f8a:	20ff      	movs	r0, #255	@ 0xff
 8000f8c:	03d2      	lsls	r2, r2, #15
 8000f8e:	e78c      	b.n	8000eaa <__aeabi_fmul+0x7a>
 8000f90:	4641      	mov	r1, r8
 8000f92:	2202      	movs	r2, #2
 8000f94:	3501      	adds	r5, #1
 8000f96:	4311      	orrs	r1, r2
 8000f98:	4688      	mov	r8, r1
 8000f9a:	35ff      	adds	r5, #255	@ 0xff
 8000f9c:	290a      	cmp	r1, #10
 8000f9e:	dca5      	bgt.n	8000eec <__aeabi_fmul+0xbc>
 8000fa0:	2102      	movs	r1, #2
 8000fa2:	407e      	eors	r6, r7
 8000fa4:	e774      	b.n	8000e90 <__aeabi_fmul+0x60>
 8000fa6:	230c      	movs	r3, #12
 8000fa8:	4698      	mov	r8, r3
 8000faa:	3b09      	subs	r3, #9
 8000fac:	25ff      	movs	r5, #255	@ 0xff
 8000fae:	469a      	mov	sl, r3
 8000fb0:	e759      	b.n	8000e66 <__aeabi_fmul+0x36>
 8000fb2:	0018      	movs	r0, r3
 8000fb4:	f002 fa22 	bl	80033fc <__clzsi2>
 8000fb8:	464a      	mov	r2, r9
 8000fba:	1f43      	subs	r3, r0, #5
 8000fbc:	2576      	movs	r5, #118	@ 0x76
 8000fbe:	409a      	lsls	r2, r3
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	426d      	negs	r5, r5
 8000fc4:	4691      	mov	r9, r2
 8000fc6:	4698      	mov	r8, r3
 8000fc8:	469a      	mov	sl, r3
 8000fca:	1a2d      	subs	r5, r5, r0
 8000fcc:	e74b      	b.n	8000e66 <__aeabi_fmul+0x36>
 8000fce:	0020      	movs	r0, r4
 8000fd0:	f002 fa14 	bl	80033fc <__clzsi2>
 8000fd4:	4642      	mov	r2, r8
 8000fd6:	1f43      	subs	r3, r0, #5
 8000fd8:	409c      	lsls	r4, r3
 8000fda:	1a2b      	subs	r3, r5, r0
 8000fdc:	3b76      	subs	r3, #118	@ 0x76
 8000fde:	2100      	movs	r1, #0
 8000fe0:	1c5d      	adds	r5, r3, #1
 8000fe2:	2a0a      	cmp	r2, #10
 8000fe4:	dc00      	bgt.n	8000fe8 <__aeabi_fmul+0x1b8>
 8000fe6:	e752      	b.n	8000e8e <__aeabi_fmul+0x5e>
 8000fe8:	e780      	b.n	8000eec <__aeabi_fmul+0xbc>
 8000fea:	2201      	movs	r2, #1
 8000fec:	1ad3      	subs	r3, r2, r3
 8000fee:	2b1b      	cmp	r3, #27
 8000ff0:	dd00      	ble.n	8000ff4 <__aeabi_fmul+0x1c4>
 8000ff2:	e758      	b.n	8000ea6 <__aeabi_fmul+0x76>
 8000ff4:	359e      	adds	r5, #158	@ 0x9e
 8000ff6:	0022      	movs	r2, r4
 8000ff8:	40ac      	lsls	r4, r5
 8000ffa:	40da      	lsrs	r2, r3
 8000ffc:	1e63      	subs	r3, r4, #1
 8000ffe:	419c      	sbcs	r4, r3
 8001000:	4322      	orrs	r2, r4
 8001002:	0753      	lsls	r3, r2, #29
 8001004:	d004      	beq.n	8001010 <__aeabi_fmul+0x1e0>
 8001006:	230f      	movs	r3, #15
 8001008:	4013      	ands	r3, r2
 800100a:	2b04      	cmp	r3, #4
 800100c:	d000      	beq.n	8001010 <__aeabi_fmul+0x1e0>
 800100e:	3204      	adds	r2, #4
 8001010:	0153      	lsls	r3, r2, #5
 8001012:	d537      	bpl.n	8001084 <__aeabi_fmul+0x254>
 8001014:	2001      	movs	r0, #1
 8001016:	2200      	movs	r2, #0
 8001018:	e747      	b.n	8000eaa <__aeabi_fmul+0x7a>
 800101a:	0c21      	lsrs	r1, r4, #16
 800101c:	464a      	mov	r2, r9
 800101e:	0424      	lsls	r4, r4, #16
 8001020:	0c24      	lsrs	r4, r4, #16
 8001022:	0027      	movs	r7, r4
 8001024:	0c10      	lsrs	r0, r2, #16
 8001026:	0412      	lsls	r2, r2, #16
 8001028:	0c12      	lsrs	r2, r2, #16
 800102a:	4344      	muls	r4, r0
 800102c:	4357      	muls	r7, r2
 800102e:	4348      	muls	r0, r1
 8001030:	4351      	muls	r1, r2
 8001032:	0c3a      	lsrs	r2, r7, #16
 8001034:	1909      	adds	r1, r1, r4
 8001036:	1852      	adds	r2, r2, r1
 8001038:	4294      	cmp	r4, r2
 800103a:	d903      	bls.n	8001044 <__aeabi_fmul+0x214>
 800103c:	2180      	movs	r1, #128	@ 0x80
 800103e:	0249      	lsls	r1, r1, #9
 8001040:	468c      	mov	ip, r1
 8001042:	4460      	add	r0, ip
 8001044:	043f      	lsls	r7, r7, #16
 8001046:	0411      	lsls	r1, r2, #16
 8001048:	0c3f      	lsrs	r7, r7, #16
 800104a:	19c9      	adds	r1, r1, r7
 800104c:	018c      	lsls	r4, r1, #6
 800104e:	1e67      	subs	r7, r4, #1
 8001050:	41bc      	sbcs	r4, r7
 8001052:	0c12      	lsrs	r2, r2, #16
 8001054:	0e89      	lsrs	r1, r1, #26
 8001056:	1812      	adds	r2, r2, r0
 8001058:	430c      	orrs	r4, r1
 800105a:	0192      	lsls	r2, r2, #6
 800105c:	4314      	orrs	r4, r2
 800105e:	0112      	lsls	r2, r2, #4
 8001060:	d50e      	bpl.n	8001080 <__aeabi_fmul+0x250>
 8001062:	2301      	movs	r3, #1
 8001064:	0862      	lsrs	r2, r4, #1
 8001066:	401c      	ands	r4, r3
 8001068:	4314      	orrs	r4, r2
 800106a:	e749      	b.n	8000f00 <__aeabi_fmul+0xd0>
 800106c:	003e      	movs	r6, r7
 800106e:	46a1      	mov	r9, r4
 8001070:	2280      	movs	r2, #128	@ 0x80
 8001072:	464b      	mov	r3, r9
 8001074:	03d2      	lsls	r2, r2, #15
 8001076:	431a      	orrs	r2, r3
 8001078:	0252      	lsls	r2, r2, #9
 800107a:	20ff      	movs	r0, #255	@ 0xff
 800107c:	0a52      	lsrs	r2, r2, #9
 800107e:	e714      	b.n	8000eaa <__aeabi_fmul+0x7a>
 8001080:	001d      	movs	r5, r3
 8001082:	e73d      	b.n	8000f00 <__aeabi_fmul+0xd0>
 8001084:	0192      	lsls	r2, r2, #6
 8001086:	2000      	movs	r0, #0
 8001088:	0a52      	lsrs	r2, r2, #9
 800108a:	e70e      	b.n	8000eaa <__aeabi_fmul+0x7a>
 800108c:	290f      	cmp	r1, #15
 800108e:	d1ed      	bne.n	800106c <__aeabi_fmul+0x23c>
 8001090:	2280      	movs	r2, #128	@ 0x80
 8001092:	464b      	mov	r3, r9
 8001094:	03d2      	lsls	r2, r2, #15
 8001096:	4213      	tst	r3, r2
 8001098:	d0ea      	beq.n	8001070 <__aeabi_fmul+0x240>
 800109a:	4214      	tst	r4, r2
 800109c:	d1e8      	bne.n	8001070 <__aeabi_fmul+0x240>
 800109e:	003e      	movs	r6, r7
 80010a0:	20ff      	movs	r0, #255	@ 0xff
 80010a2:	4322      	orrs	r2, r4
 80010a4:	e701      	b.n	8000eaa <__aeabi_fmul+0x7a>
 80010a6:	46c0      	nop			@ (mov r8, r8)
 80010a8:	f7ffffff 	.word	0xf7ffffff

080010ac <__aeabi_fsub>:
 80010ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010ae:	4647      	mov	r7, r8
 80010b0:	46ce      	mov	lr, r9
 80010b2:	024e      	lsls	r6, r1, #9
 80010b4:	0243      	lsls	r3, r0, #9
 80010b6:	0045      	lsls	r5, r0, #1
 80010b8:	0a72      	lsrs	r2, r6, #9
 80010ba:	0fc4      	lsrs	r4, r0, #31
 80010bc:	0048      	lsls	r0, r1, #1
 80010be:	b580      	push	{r7, lr}
 80010c0:	4694      	mov	ip, r2
 80010c2:	0a5f      	lsrs	r7, r3, #9
 80010c4:	0e2d      	lsrs	r5, r5, #24
 80010c6:	099b      	lsrs	r3, r3, #6
 80010c8:	0e00      	lsrs	r0, r0, #24
 80010ca:	0fc9      	lsrs	r1, r1, #31
 80010cc:	09b6      	lsrs	r6, r6, #6
 80010ce:	28ff      	cmp	r0, #255	@ 0xff
 80010d0:	d024      	beq.n	800111c <__aeabi_fsub+0x70>
 80010d2:	2201      	movs	r2, #1
 80010d4:	4051      	eors	r1, r2
 80010d6:	1a2a      	subs	r2, r5, r0
 80010d8:	428c      	cmp	r4, r1
 80010da:	d00f      	beq.n	80010fc <__aeabi_fsub+0x50>
 80010dc:	2a00      	cmp	r2, #0
 80010de:	dc00      	bgt.n	80010e2 <__aeabi_fsub+0x36>
 80010e0:	e16a      	b.n	80013b8 <__aeabi_fsub+0x30c>
 80010e2:	2800      	cmp	r0, #0
 80010e4:	d135      	bne.n	8001152 <__aeabi_fsub+0xa6>
 80010e6:	2e00      	cmp	r6, #0
 80010e8:	d100      	bne.n	80010ec <__aeabi_fsub+0x40>
 80010ea:	e0a2      	b.n	8001232 <__aeabi_fsub+0x186>
 80010ec:	1e51      	subs	r1, r2, #1
 80010ee:	2a01      	cmp	r2, #1
 80010f0:	d100      	bne.n	80010f4 <__aeabi_fsub+0x48>
 80010f2:	e124      	b.n	800133e <__aeabi_fsub+0x292>
 80010f4:	2aff      	cmp	r2, #255	@ 0xff
 80010f6:	d021      	beq.n	800113c <__aeabi_fsub+0x90>
 80010f8:	000a      	movs	r2, r1
 80010fa:	e02f      	b.n	800115c <__aeabi_fsub+0xb0>
 80010fc:	2a00      	cmp	r2, #0
 80010fe:	dc00      	bgt.n	8001102 <__aeabi_fsub+0x56>
 8001100:	e167      	b.n	80013d2 <__aeabi_fsub+0x326>
 8001102:	2800      	cmp	r0, #0
 8001104:	d05e      	beq.n	80011c4 <__aeabi_fsub+0x118>
 8001106:	2dff      	cmp	r5, #255	@ 0xff
 8001108:	d018      	beq.n	800113c <__aeabi_fsub+0x90>
 800110a:	2180      	movs	r1, #128	@ 0x80
 800110c:	04c9      	lsls	r1, r1, #19
 800110e:	430e      	orrs	r6, r1
 8001110:	2a1b      	cmp	r2, #27
 8001112:	dc00      	bgt.n	8001116 <__aeabi_fsub+0x6a>
 8001114:	e076      	b.n	8001204 <__aeabi_fsub+0x158>
 8001116:	002a      	movs	r2, r5
 8001118:	3301      	adds	r3, #1
 800111a:	e032      	b.n	8001182 <__aeabi_fsub+0xd6>
 800111c:	002a      	movs	r2, r5
 800111e:	3aff      	subs	r2, #255	@ 0xff
 8001120:	4691      	mov	r9, r2
 8001122:	2e00      	cmp	r6, #0
 8001124:	d042      	beq.n	80011ac <__aeabi_fsub+0x100>
 8001126:	428c      	cmp	r4, r1
 8001128:	d055      	beq.n	80011d6 <__aeabi_fsub+0x12a>
 800112a:	464a      	mov	r2, r9
 800112c:	2a00      	cmp	r2, #0
 800112e:	d100      	bne.n	8001132 <__aeabi_fsub+0x86>
 8001130:	e09c      	b.n	800126c <__aeabi_fsub+0x1c0>
 8001132:	2d00      	cmp	r5, #0
 8001134:	d100      	bne.n	8001138 <__aeabi_fsub+0x8c>
 8001136:	e077      	b.n	8001228 <__aeabi_fsub+0x17c>
 8001138:	000c      	movs	r4, r1
 800113a:	0033      	movs	r3, r6
 800113c:	08db      	lsrs	r3, r3, #3
 800113e:	2b00      	cmp	r3, #0
 8001140:	d100      	bne.n	8001144 <__aeabi_fsub+0x98>
 8001142:	e06e      	b.n	8001222 <__aeabi_fsub+0x176>
 8001144:	2280      	movs	r2, #128	@ 0x80
 8001146:	03d2      	lsls	r2, r2, #15
 8001148:	4313      	orrs	r3, r2
 800114a:	025b      	lsls	r3, r3, #9
 800114c:	20ff      	movs	r0, #255	@ 0xff
 800114e:	0a5b      	lsrs	r3, r3, #9
 8001150:	e024      	b.n	800119c <__aeabi_fsub+0xf0>
 8001152:	2dff      	cmp	r5, #255	@ 0xff
 8001154:	d0f2      	beq.n	800113c <__aeabi_fsub+0x90>
 8001156:	2180      	movs	r1, #128	@ 0x80
 8001158:	04c9      	lsls	r1, r1, #19
 800115a:	430e      	orrs	r6, r1
 800115c:	2101      	movs	r1, #1
 800115e:	2a1b      	cmp	r2, #27
 8001160:	dc08      	bgt.n	8001174 <__aeabi_fsub+0xc8>
 8001162:	0031      	movs	r1, r6
 8001164:	2020      	movs	r0, #32
 8001166:	40d1      	lsrs	r1, r2
 8001168:	1a82      	subs	r2, r0, r2
 800116a:	4096      	lsls	r6, r2
 800116c:	0032      	movs	r2, r6
 800116e:	1e50      	subs	r0, r2, #1
 8001170:	4182      	sbcs	r2, r0
 8001172:	4311      	orrs	r1, r2
 8001174:	1a5b      	subs	r3, r3, r1
 8001176:	015a      	lsls	r2, r3, #5
 8001178:	d460      	bmi.n	800123c <__aeabi_fsub+0x190>
 800117a:	2107      	movs	r1, #7
 800117c:	002a      	movs	r2, r5
 800117e:	4019      	ands	r1, r3
 8001180:	d057      	beq.n	8001232 <__aeabi_fsub+0x186>
 8001182:	210f      	movs	r1, #15
 8001184:	4019      	ands	r1, r3
 8001186:	2904      	cmp	r1, #4
 8001188:	d000      	beq.n	800118c <__aeabi_fsub+0xe0>
 800118a:	3304      	adds	r3, #4
 800118c:	0159      	lsls	r1, r3, #5
 800118e:	d550      	bpl.n	8001232 <__aeabi_fsub+0x186>
 8001190:	1c50      	adds	r0, r2, #1
 8001192:	2afe      	cmp	r2, #254	@ 0xfe
 8001194:	d045      	beq.n	8001222 <__aeabi_fsub+0x176>
 8001196:	019b      	lsls	r3, r3, #6
 8001198:	b2c0      	uxtb	r0, r0
 800119a:	0a5b      	lsrs	r3, r3, #9
 800119c:	05c0      	lsls	r0, r0, #23
 800119e:	4318      	orrs	r0, r3
 80011a0:	07e4      	lsls	r4, r4, #31
 80011a2:	4320      	orrs	r0, r4
 80011a4:	bcc0      	pop	{r6, r7}
 80011a6:	46b9      	mov	r9, r7
 80011a8:	46b0      	mov	r8, r6
 80011aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80011ac:	2201      	movs	r2, #1
 80011ae:	4051      	eors	r1, r2
 80011b0:	428c      	cmp	r4, r1
 80011b2:	d1ba      	bne.n	800112a <__aeabi_fsub+0x7e>
 80011b4:	464a      	mov	r2, r9
 80011b6:	2a00      	cmp	r2, #0
 80011b8:	d010      	beq.n	80011dc <__aeabi_fsub+0x130>
 80011ba:	2d00      	cmp	r5, #0
 80011bc:	d100      	bne.n	80011c0 <__aeabi_fsub+0x114>
 80011be:	e098      	b.n	80012f2 <__aeabi_fsub+0x246>
 80011c0:	2300      	movs	r3, #0
 80011c2:	e7bb      	b.n	800113c <__aeabi_fsub+0x90>
 80011c4:	2e00      	cmp	r6, #0
 80011c6:	d034      	beq.n	8001232 <__aeabi_fsub+0x186>
 80011c8:	1e51      	subs	r1, r2, #1
 80011ca:	2a01      	cmp	r2, #1
 80011cc:	d06e      	beq.n	80012ac <__aeabi_fsub+0x200>
 80011ce:	2aff      	cmp	r2, #255	@ 0xff
 80011d0:	d0b4      	beq.n	800113c <__aeabi_fsub+0x90>
 80011d2:	000a      	movs	r2, r1
 80011d4:	e79c      	b.n	8001110 <__aeabi_fsub+0x64>
 80011d6:	2a00      	cmp	r2, #0
 80011d8:	d000      	beq.n	80011dc <__aeabi_fsub+0x130>
 80011da:	e088      	b.n	80012ee <__aeabi_fsub+0x242>
 80011dc:	20fe      	movs	r0, #254	@ 0xfe
 80011de:	1c6a      	adds	r2, r5, #1
 80011e0:	4210      	tst	r0, r2
 80011e2:	d000      	beq.n	80011e6 <__aeabi_fsub+0x13a>
 80011e4:	e092      	b.n	800130c <__aeabi_fsub+0x260>
 80011e6:	2d00      	cmp	r5, #0
 80011e8:	d000      	beq.n	80011ec <__aeabi_fsub+0x140>
 80011ea:	e0a4      	b.n	8001336 <__aeabi_fsub+0x28a>
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d100      	bne.n	80011f2 <__aeabi_fsub+0x146>
 80011f0:	e0cb      	b.n	800138a <__aeabi_fsub+0x2de>
 80011f2:	2e00      	cmp	r6, #0
 80011f4:	d000      	beq.n	80011f8 <__aeabi_fsub+0x14c>
 80011f6:	e0ca      	b.n	800138e <__aeabi_fsub+0x2e2>
 80011f8:	2200      	movs	r2, #0
 80011fa:	08db      	lsrs	r3, r3, #3
 80011fc:	025b      	lsls	r3, r3, #9
 80011fe:	0a5b      	lsrs	r3, r3, #9
 8001200:	b2d0      	uxtb	r0, r2
 8001202:	e7cb      	b.n	800119c <__aeabi_fsub+0xf0>
 8001204:	0031      	movs	r1, r6
 8001206:	2020      	movs	r0, #32
 8001208:	40d1      	lsrs	r1, r2
 800120a:	1a82      	subs	r2, r0, r2
 800120c:	4096      	lsls	r6, r2
 800120e:	0032      	movs	r2, r6
 8001210:	1e50      	subs	r0, r2, #1
 8001212:	4182      	sbcs	r2, r0
 8001214:	430a      	orrs	r2, r1
 8001216:	189b      	adds	r3, r3, r2
 8001218:	015a      	lsls	r2, r3, #5
 800121a:	d5ae      	bpl.n	800117a <__aeabi_fsub+0xce>
 800121c:	1c6a      	adds	r2, r5, #1
 800121e:	2dfe      	cmp	r5, #254	@ 0xfe
 8001220:	d14a      	bne.n	80012b8 <__aeabi_fsub+0x20c>
 8001222:	20ff      	movs	r0, #255	@ 0xff
 8001224:	2300      	movs	r3, #0
 8001226:	e7b9      	b.n	800119c <__aeabi_fsub+0xf0>
 8001228:	22ff      	movs	r2, #255	@ 0xff
 800122a:	2b00      	cmp	r3, #0
 800122c:	d14b      	bne.n	80012c6 <__aeabi_fsub+0x21a>
 800122e:	000c      	movs	r4, r1
 8001230:	0033      	movs	r3, r6
 8001232:	08db      	lsrs	r3, r3, #3
 8001234:	2aff      	cmp	r2, #255	@ 0xff
 8001236:	d100      	bne.n	800123a <__aeabi_fsub+0x18e>
 8001238:	e781      	b.n	800113e <__aeabi_fsub+0x92>
 800123a:	e7df      	b.n	80011fc <__aeabi_fsub+0x150>
 800123c:	019f      	lsls	r7, r3, #6
 800123e:	09bf      	lsrs	r7, r7, #6
 8001240:	0038      	movs	r0, r7
 8001242:	f002 f8db 	bl	80033fc <__clzsi2>
 8001246:	3805      	subs	r0, #5
 8001248:	4087      	lsls	r7, r0
 800124a:	4285      	cmp	r5, r0
 800124c:	dc21      	bgt.n	8001292 <__aeabi_fsub+0x1e6>
 800124e:	003b      	movs	r3, r7
 8001250:	2120      	movs	r1, #32
 8001252:	1b42      	subs	r2, r0, r5
 8001254:	3201      	adds	r2, #1
 8001256:	40d3      	lsrs	r3, r2
 8001258:	1a8a      	subs	r2, r1, r2
 800125a:	4097      	lsls	r7, r2
 800125c:	1e7a      	subs	r2, r7, #1
 800125e:	4197      	sbcs	r7, r2
 8001260:	2200      	movs	r2, #0
 8001262:	433b      	orrs	r3, r7
 8001264:	0759      	lsls	r1, r3, #29
 8001266:	d000      	beq.n	800126a <__aeabi_fsub+0x1be>
 8001268:	e78b      	b.n	8001182 <__aeabi_fsub+0xd6>
 800126a:	e78f      	b.n	800118c <__aeabi_fsub+0xe0>
 800126c:	20fe      	movs	r0, #254	@ 0xfe
 800126e:	1c6a      	adds	r2, r5, #1
 8001270:	4210      	tst	r0, r2
 8001272:	d112      	bne.n	800129a <__aeabi_fsub+0x1ee>
 8001274:	2d00      	cmp	r5, #0
 8001276:	d152      	bne.n	800131e <__aeabi_fsub+0x272>
 8001278:	2b00      	cmp	r3, #0
 800127a:	d07c      	beq.n	8001376 <__aeabi_fsub+0x2ca>
 800127c:	2e00      	cmp	r6, #0
 800127e:	d0bb      	beq.n	80011f8 <__aeabi_fsub+0x14c>
 8001280:	1b9a      	subs	r2, r3, r6
 8001282:	0150      	lsls	r0, r2, #5
 8001284:	d400      	bmi.n	8001288 <__aeabi_fsub+0x1dc>
 8001286:	e08b      	b.n	80013a0 <__aeabi_fsub+0x2f4>
 8001288:	2401      	movs	r4, #1
 800128a:	2200      	movs	r2, #0
 800128c:	1af3      	subs	r3, r6, r3
 800128e:	400c      	ands	r4, r1
 8001290:	e7e8      	b.n	8001264 <__aeabi_fsub+0x1b8>
 8001292:	4b56      	ldr	r3, [pc, #344]	@ (80013ec <__aeabi_fsub+0x340>)
 8001294:	1a2a      	subs	r2, r5, r0
 8001296:	403b      	ands	r3, r7
 8001298:	e7e4      	b.n	8001264 <__aeabi_fsub+0x1b8>
 800129a:	1b9f      	subs	r7, r3, r6
 800129c:	017a      	lsls	r2, r7, #5
 800129e:	d446      	bmi.n	800132e <__aeabi_fsub+0x282>
 80012a0:	2f00      	cmp	r7, #0
 80012a2:	d1cd      	bne.n	8001240 <__aeabi_fsub+0x194>
 80012a4:	2400      	movs	r4, #0
 80012a6:	2000      	movs	r0, #0
 80012a8:	2300      	movs	r3, #0
 80012aa:	e777      	b.n	800119c <__aeabi_fsub+0xf0>
 80012ac:	199b      	adds	r3, r3, r6
 80012ae:	2501      	movs	r5, #1
 80012b0:	3201      	adds	r2, #1
 80012b2:	0159      	lsls	r1, r3, #5
 80012b4:	d400      	bmi.n	80012b8 <__aeabi_fsub+0x20c>
 80012b6:	e760      	b.n	800117a <__aeabi_fsub+0xce>
 80012b8:	2101      	movs	r1, #1
 80012ba:	484d      	ldr	r0, [pc, #308]	@ (80013f0 <__aeabi_fsub+0x344>)
 80012bc:	4019      	ands	r1, r3
 80012be:	085b      	lsrs	r3, r3, #1
 80012c0:	4003      	ands	r3, r0
 80012c2:	430b      	orrs	r3, r1
 80012c4:	e7ce      	b.n	8001264 <__aeabi_fsub+0x1b8>
 80012c6:	1e57      	subs	r7, r2, #1
 80012c8:	2a01      	cmp	r2, #1
 80012ca:	d05a      	beq.n	8001382 <__aeabi_fsub+0x2d6>
 80012cc:	000c      	movs	r4, r1
 80012ce:	2aff      	cmp	r2, #255	@ 0xff
 80012d0:	d033      	beq.n	800133a <__aeabi_fsub+0x28e>
 80012d2:	2201      	movs	r2, #1
 80012d4:	2f1b      	cmp	r7, #27
 80012d6:	dc07      	bgt.n	80012e8 <__aeabi_fsub+0x23c>
 80012d8:	2120      	movs	r1, #32
 80012da:	1bc9      	subs	r1, r1, r7
 80012dc:	001a      	movs	r2, r3
 80012de:	408b      	lsls	r3, r1
 80012e0:	40fa      	lsrs	r2, r7
 80012e2:	1e59      	subs	r1, r3, #1
 80012e4:	418b      	sbcs	r3, r1
 80012e6:	431a      	orrs	r2, r3
 80012e8:	0005      	movs	r5, r0
 80012ea:	1ab3      	subs	r3, r6, r2
 80012ec:	e743      	b.n	8001176 <__aeabi_fsub+0xca>
 80012ee:	2d00      	cmp	r5, #0
 80012f0:	d123      	bne.n	800133a <__aeabi_fsub+0x28e>
 80012f2:	22ff      	movs	r2, #255	@ 0xff
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d09b      	beq.n	8001230 <__aeabi_fsub+0x184>
 80012f8:	1e51      	subs	r1, r2, #1
 80012fa:	2a01      	cmp	r2, #1
 80012fc:	d0d6      	beq.n	80012ac <__aeabi_fsub+0x200>
 80012fe:	2aff      	cmp	r2, #255	@ 0xff
 8001300:	d01b      	beq.n	800133a <__aeabi_fsub+0x28e>
 8001302:	291b      	cmp	r1, #27
 8001304:	dd2c      	ble.n	8001360 <__aeabi_fsub+0x2b4>
 8001306:	0002      	movs	r2, r0
 8001308:	1c73      	adds	r3, r6, #1
 800130a:	e73a      	b.n	8001182 <__aeabi_fsub+0xd6>
 800130c:	2aff      	cmp	r2, #255	@ 0xff
 800130e:	d088      	beq.n	8001222 <__aeabi_fsub+0x176>
 8001310:	199b      	adds	r3, r3, r6
 8001312:	085b      	lsrs	r3, r3, #1
 8001314:	0759      	lsls	r1, r3, #29
 8001316:	d000      	beq.n	800131a <__aeabi_fsub+0x26e>
 8001318:	e733      	b.n	8001182 <__aeabi_fsub+0xd6>
 800131a:	08db      	lsrs	r3, r3, #3
 800131c:	e76e      	b.n	80011fc <__aeabi_fsub+0x150>
 800131e:	2b00      	cmp	r3, #0
 8001320:	d110      	bne.n	8001344 <__aeabi_fsub+0x298>
 8001322:	2e00      	cmp	r6, #0
 8001324:	d043      	beq.n	80013ae <__aeabi_fsub+0x302>
 8001326:	2401      	movs	r4, #1
 8001328:	0033      	movs	r3, r6
 800132a:	400c      	ands	r4, r1
 800132c:	e706      	b.n	800113c <__aeabi_fsub+0x90>
 800132e:	2401      	movs	r4, #1
 8001330:	1af7      	subs	r7, r6, r3
 8001332:	400c      	ands	r4, r1
 8001334:	e784      	b.n	8001240 <__aeabi_fsub+0x194>
 8001336:	2b00      	cmp	r3, #0
 8001338:	d104      	bne.n	8001344 <__aeabi_fsub+0x298>
 800133a:	0033      	movs	r3, r6
 800133c:	e6fe      	b.n	800113c <__aeabi_fsub+0x90>
 800133e:	2501      	movs	r5, #1
 8001340:	1b9b      	subs	r3, r3, r6
 8001342:	e718      	b.n	8001176 <__aeabi_fsub+0xca>
 8001344:	2e00      	cmp	r6, #0
 8001346:	d100      	bne.n	800134a <__aeabi_fsub+0x29e>
 8001348:	e6f8      	b.n	800113c <__aeabi_fsub+0x90>
 800134a:	2280      	movs	r2, #128	@ 0x80
 800134c:	03d2      	lsls	r2, r2, #15
 800134e:	4297      	cmp	r7, r2
 8001350:	d304      	bcc.n	800135c <__aeabi_fsub+0x2b0>
 8001352:	4594      	cmp	ip, r2
 8001354:	d202      	bcs.n	800135c <__aeabi_fsub+0x2b0>
 8001356:	2401      	movs	r4, #1
 8001358:	0033      	movs	r3, r6
 800135a:	400c      	ands	r4, r1
 800135c:	08db      	lsrs	r3, r3, #3
 800135e:	e6f1      	b.n	8001144 <__aeabi_fsub+0x98>
 8001360:	001a      	movs	r2, r3
 8001362:	2520      	movs	r5, #32
 8001364:	40ca      	lsrs	r2, r1
 8001366:	1a69      	subs	r1, r5, r1
 8001368:	408b      	lsls	r3, r1
 800136a:	1e59      	subs	r1, r3, #1
 800136c:	418b      	sbcs	r3, r1
 800136e:	4313      	orrs	r3, r2
 8001370:	0005      	movs	r5, r0
 8001372:	199b      	adds	r3, r3, r6
 8001374:	e750      	b.n	8001218 <__aeabi_fsub+0x16c>
 8001376:	2e00      	cmp	r6, #0
 8001378:	d094      	beq.n	80012a4 <__aeabi_fsub+0x1f8>
 800137a:	2401      	movs	r4, #1
 800137c:	0033      	movs	r3, r6
 800137e:	400c      	ands	r4, r1
 8001380:	e73a      	b.n	80011f8 <__aeabi_fsub+0x14c>
 8001382:	000c      	movs	r4, r1
 8001384:	2501      	movs	r5, #1
 8001386:	1af3      	subs	r3, r6, r3
 8001388:	e6f5      	b.n	8001176 <__aeabi_fsub+0xca>
 800138a:	0033      	movs	r3, r6
 800138c:	e734      	b.n	80011f8 <__aeabi_fsub+0x14c>
 800138e:	199b      	adds	r3, r3, r6
 8001390:	2200      	movs	r2, #0
 8001392:	0159      	lsls	r1, r3, #5
 8001394:	d5c1      	bpl.n	800131a <__aeabi_fsub+0x26e>
 8001396:	4a15      	ldr	r2, [pc, #84]	@ (80013ec <__aeabi_fsub+0x340>)
 8001398:	4013      	ands	r3, r2
 800139a:	08db      	lsrs	r3, r3, #3
 800139c:	2201      	movs	r2, #1
 800139e:	e72d      	b.n	80011fc <__aeabi_fsub+0x150>
 80013a0:	2a00      	cmp	r2, #0
 80013a2:	d100      	bne.n	80013a6 <__aeabi_fsub+0x2fa>
 80013a4:	e77e      	b.n	80012a4 <__aeabi_fsub+0x1f8>
 80013a6:	0013      	movs	r3, r2
 80013a8:	2200      	movs	r2, #0
 80013aa:	08db      	lsrs	r3, r3, #3
 80013ac:	e726      	b.n	80011fc <__aeabi_fsub+0x150>
 80013ae:	2380      	movs	r3, #128	@ 0x80
 80013b0:	2400      	movs	r4, #0
 80013b2:	20ff      	movs	r0, #255	@ 0xff
 80013b4:	03db      	lsls	r3, r3, #15
 80013b6:	e6f1      	b.n	800119c <__aeabi_fsub+0xf0>
 80013b8:	2a00      	cmp	r2, #0
 80013ba:	d100      	bne.n	80013be <__aeabi_fsub+0x312>
 80013bc:	e756      	b.n	800126c <__aeabi_fsub+0x1c0>
 80013be:	1b47      	subs	r7, r0, r5
 80013c0:	003a      	movs	r2, r7
 80013c2:	2d00      	cmp	r5, #0
 80013c4:	d100      	bne.n	80013c8 <__aeabi_fsub+0x31c>
 80013c6:	e730      	b.n	800122a <__aeabi_fsub+0x17e>
 80013c8:	2280      	movs	r2, #128	@ 0x80
 80013ca:	04d2      	lsls	r2, r2, #19
 80013cc:	000c      	movs	r4, r1
 80013ce:	4313      	orrs	r3, r2
 80013d0:	e77f      	b.n	80012d2 <__aeabi_fsub+0x226>
 80013d2:	2a00      	cmp	r2, #0
 80013d4:	d100      	bne.n	80013d8 <__aeabi_fsub+0x32c>
 80013d6:	e701      	b.n	80011dc <__aeabi_fsub+0x130>
 80013d8:	1b41      	subs	r1, r0, r5
 80013da:	2d00      	cmp	r5, #0
 80013dc:	d101      	bne.n	80013e2 <__aeabi_fsub+0x336>
 80013de:	000a      	movs	r2, r1
 80013e0:	e788      	b.n	80012f4 <__aeabi_fsub+0x248>
 80013e2:	2280      	movs	r2, #128	@ 0x80
 80013e4:	04d2      	lsls	r2, r2, #19
 80013e6:	4313      	orrs	r3, r2
 80013e8:	e78b      	b.n	8001302 <__aeabi_fsub+0x256>
 80013ea:	46c0      	nop			@ (mov r8, r8)
 80013ec:	fbffffff 	.word	0xfbffffff
 80013f0:	7dffffff 	.word	0x7dffffff

080013f4 <__aeabi_fcmpun>:
 80013f4:	0243      	lsls	r3, r0, #9
 80013f6:	024a      	lsls	r2, r1, #9
 80013f8:	0040      	lsls	r0, r0, #1
 80013fa:	0049      	lsls	r1, r1, #1
 80013fc:	0a5b      	lsrs	r3, r3, #9
 80013fe:	0a52      	lsrs	r2, r2, #9
 8001400:	0e09      	lsrs	r1, r1, #24
 8001402:	0e00      	lsrs	r0, r0, #24
 8001404:	28ff      	cmp	r0, #255	@ 0xff
 8001406:	d006      	beq.n	8001416 <__aeabi_fcmpun+0x22>
 8001408:	2000      	movs	r0, #0
 800140a:	29ff      	cmp	r1, #255	@ 0xff
 800140c:	d102      	bne.n	8001414 <__aeabi_fcmpun+0x20>
 800140e:	1e53      	subs	r3, r2, #1
 8001410:	419a      	sbcs	r2, r3
 8001412:	0010      	movs	r0, r2
 8001414:	4770      	bx	lr
 8001416:	38fe      	subs	r0, #254	@ 0xfe
 8001418:	2b00      	cmp	r3, #0
 800141a:	d1fb      	bne.n	8001414 <__aeabi_fcmpun+0x20>
 800141c:	e7f4      	b.n	8001408 <__aeabi_fcmpun+0x14>
 800141e:	46c0      	nop			@ (mov r8, r8)

08001420 <__aeabi_f2iz>:
 8001420:	0241      	lsls	r1, r0, #9
 8001422:	0042      	lsls	r2, r0, #1
 8001424:	0fc3      	lsrs	r3, r0, #31
 8001426:	0a49      	lsrs	r1, r1, #9
 8001428:	2000      	movs	r0, #0
 800142a:	0e12      	lsrs	r2, r2, #24
 800142c:	2a7e      	cmp	r2, #126	@ 0x7e
 800142e:	dd03      	ble.n	8001438 <__aeabi_f2iz+0x18>
 8001430:	2a9d      	cmp	r2, #157	@ 0x9d
 8001432:	dd02      	ble.n	800143a <__aeabi_f2iz+0x1a>
 8001434:	4a09      	ldr	r2, [pc, #36]	@ (800145c <__aeabi_f2iz+0x3c>)
 8001436:	1898      	adds	r0, r3, r2
 8001438:	4770      	bx	lr
 800143a:	2080      	movs	r0, #128	@ 0x80
 800143c:	0400      	lsls	r0, r0, #16
 800143e:	4301      	orrs	r1, r0
 8001440:	2a95      	cmp	r2, #149	@ 0x95
 8001442:	dc07      	bgt.n	8001454 <__aeabi_f2iz+0x34>
 8001444:	2096      	movs	r0, #150	@ 0x96
 8001446:	1a82      	subs	r2, r0, r2
 8001448:	40d1      	lsrs	r1, r2
 800144a:	4248      	negs	r0, r1
 800144c:	2b00      	cmp	r3, #0
 800144e:	d1f3      	bne.n	8001438 <__aeabi_f2iz+0x18>
 8001450:	0008      	movs	r0, r1
 8001452:	e7f1      	b.n	8001438 <__aeabi_f2iz+0x18>
 8001454:	3a96      	subs	r2, #150	@ 0x96
 8001456:	4091      	lsls	r1, r2
 8001458:	e7f7      	b.n	800144a <__aeabi_f2iz+0x2a>
 800145a:	46c0      	nop			@ (mov r8, r8)
 800145c:	7fffffff 	.word	0x7fffffff

08001460 <__aeabi_i2f>:
 8001460:	b570      	push	{r4, r5, r6, lr}
 8001462:	2800      	cmp	r0, #0
 8001464:	d013      	beq.n	800148e <__aeabi_i2f+0x2e>
 8001466:	17c3      	asrs	r3, r0, #31
 8001468:	18c5      	adds	r5, r0, r3
 800146a:	405d      	eors	r5, r3
 800146c:	0fc4      	lsrs	r4, r0, #31
 800146e:	0028      	movs	r0, r5
 8001470:	f001 ffc4 	bl	80033fc <__clzsi2>
 8001474:	239e      	movs	r3, #158	@ 0x9e
 8001476:	0001      	movs	r1, r0
 8001478:	1a1b      	subs	r3, r3, r0
 800147a:	2b96      	cmp	r3, #150	@ 0x96
 800147c:	dc0f      	bgt.n	800149e <__aeabi_i2f+0x3e>
 800147e:	2808      	cmp	r0, #8
 8001480:	d034      	beq.n	80014ec <__aeabi_i2f+0x8c>
 8001482:	3908      	subs	r1, #8
 8001484:	408d      	lsls	r5, r1
 8001486:	026d      	lsls	r5, r5, #9
 8001488:	0a6d      	lsrs	r5, r5, #9
 800148a:	b2d8      	uxtb	r0, r3
 800148c:	e002      	b.n	8001494 <__aeabi_i2f+0x34>
 800148e:	2400      	movs	r4, #0
 8001490:	2000      	movs	r0, #0
 8001492:	2500      	movs	r5, #0
 8001494:	05c0      	lsls	r0, r0, #23
 8001496:	4328      	orrs	r0, r5
 8001498:	07e4      	lsls	r4, r4, #31
 800149a:	4320      	orrs	r0, r4
 800149c:	bd70      	pop	{r4, r5, r6, pc}
 800149e:	2b99      	cmp	r3, #153	@ 0x99
 80014a0:	dc16      	bgt.n	80014d0 <__aeabi_i2f+0x70>
 80014a2:	1f42      	subs	r2, r0, #5
 80014a4:	2805      	cmp	r0, #5
 80014a6:	d000      	beq.n	80014aa <__aeabi_i2f+0x4a>
 80014a8:	4095      	lsls	r5, r2
 80014aa:	002a      	movs	r2, r5
 80014ac:	4811      	ldr	r0, [pc, #68]	@ (80014f4 <__aeabi_i2f+0x94>)
 80014ae:	4002      	ands	r2, r0
 80014b0:	076e      	lsls	r6, r5, #29
 80014b2:	d009      	beq.n	80014c8 <__aeabi_i2f+0x68>
 80014b4:	260f      	movs	r6, #15
 80014b6:	4035      	ands	r5, r6
 80014b8:	2d04      	cmp	r5, #4
 80014ba:	d005      	beq.n	80014c8 <__aeabi_i2f+0x68>
 80014bc:	3204      	adds	r2, #4
 80014be:	0155      	lsls	r5, r2, #5
 80014c0:	d502      	bpl.n	80014c8 <__aeabi_i2f+0x68>
 80014c2:	239f      	movs	r3, #159	@ 0x9f
 80014c4:	4002      	ands	r2, r0
 80014c6:	1a5b      	subs	r3, r3, r1
 80014c8:	0192      	lsls	r2, r2, #6
 80014ca:	0a55      	lsrs	r5, r2, #9
 80014cc:	b2d8      	uxtb	r0, r3
 80014ce:	e7e1      	b.n	8001494 <__aeabi_i2f+0x34>
 80014d0:	2205      	movs	r2, #5
 80014d2:	1a12      	subs	r2, r2, r0
 80014d4:	0028      	movs	r0, r5
 80014d6:	40d0      	lsrs	r0, r2
 80014d8:	0002      	movs	r2, r0
 80014da:	0008      	movs	r0, r1
 80014dc:	301b      	adds	r0, #27
 80014de:	4085      	lsls	r5, r0
 80014e0:	0028      	movs	r0, r5
 80014e2:	1e45      	subs	r5, r0, #1
 80014e4:	41a8      	sbcs	r0, r5
 80014e6:	4302      	orrs	r2, r0
 80014e8:	0015      	movs	r5, r2
 80014ea:	e7de      	b.n	80014aa <__aeabi_i2f+0x4a>
 80014ec:	026d      	lsls	r5, r5, #9
 80014ee:	2096      	movs	r0, #150	@ 0x96
 80014f0:	0a6d      	lsrs	r5, r5, #9
 80014f2:	e7cf      	b.n	8001494 <__aeabi_i2f+0x34>
 80014f4:	fbffffff 	.word	0xfbffffff

080014f8 <__aeabi_ui2f>:
 80014f8:	b570      	push	{r4, r5, r6, lr}
 80014fa:	1e04      	subs	r4, r0, #0
 80014fc:	d00e      	beq.n	800151c <__aeabi_ui2f+0x24>
 80014fe:	f001 ff7d 	bl	80033fc <__clzsi2>
 8001502:	239e      	movs	r3, #158	@ 0x9e
 8001504:	0001      	movs	r1, r0
 8001506:	1a1b      	subs	r3, r3, r0
 8001508:	2b96      	cmp	r3, #150	@ 0x96
 800150a:	dc0c      	bgt.n	8001526 <__aeabi_ui2f+0x2e>
 800150c:	2808      	cmp	r0, #8
 800150e:	d02f      	beq.n	8001570 <__aeabi_ui2f+0x78>
 8001510:	3908      	subs	r1, #8
 8001512:	408c      	lsls	r4, r1
 8001514:	0264      	lsls	r4, r4, #9
 8001516:	0a64      	lsrs	r4, r4, #9
 8001518:	b2d8      	uxtb	r0, r3
 800151a:	e001      	b.n	8001520 <__aeabi_ui2f+0x28>
 800151c:	2000      	movs	r0, #0
 800151e:	2400      	movs	r4, #0
 8001520:	05c0      	lsls	r0, r0, #23
 8001522:	4320      	orrs	r0, r4
 8001524:	bd70      	pop	{r4, r5, r6, pc}
 8001526:	2b99      	cmp	r3, #153	@ 0x99
 8001528:	dc16      	bgt.n	8001558 <__aeabi_ui2f+0x60>
 800152a:	1f42      	subs	r2, r0, #5
 800152c:	2805      	cmp	r0, #5
 800152e:	d000      	beq.n	8001532 <__aeabi_ui2f+0x3a>
 8001530:	4094      	lsls	r4, r2
 8001532:	0022      	movs	r2, r4
 8001534:	4810      	ldr	r0, [pc, #64]	@ (8001578 <__aeabi_ui2f+0x80>)
 8001536:	4002      	ands	r2, r0
 8001538:	0765      	lsls	r5, r4, #29
 800153a:	d009      	beq.n	8001550 <__aeabi_ui2f+0x58>
 800153c:	250f      	movs	r5, #15
 800153e:	402c      	ands	r4, r5
 8001540:	2c04      	cmp	r4, #4
 8001542:	d005      	beq.n	8001550 <__aeabi_ui2f+0x58>
 8001544:	3204      	adds	r2, #4
 8001546:	0154      	lsls	r4, r2, #5
 8001548:	d502      	bpl.n	8001550 <__aeabi_ui2f+0x58>
 800154a:	239f      	movs	r3, #159	@ 0x9f
 800154c:	4002      	ands	r2, r0
 800154e:	1a5b      	subs	r3, r3, r1
 8001550:	0192      	lsls	r2, r2, #6
 8001552:	0a54      	lsrs	r4, r2, #9
 8001554:	b2d8      	uxtb	r0, r3
 8001556:	e7e3      	b.n	8001520 <__aeabi_ui2f+0x28>
 8001558:	0002      	movs	r2, r0
 800155a:	0020      	movs	r0, r4
 800155c:	321b      	adds	r2, #27
 800155e:	4090      	lsls	r0, r2
 8001560:	0002      	movs	r2, r0
 8001562:	1e50      	subs	r0, r2, #1
 8001564:	4182      	sbcs	r2, r0
 8001566:	2005      	movs	r0, #5
 8001568:	1a40      	subs	r0, r0, r1
 800156a:	40c4      	lsrs	r4, r0
 800156c:	4314      	orrs	r4, r2
 800156e:	e7e0      	b.n	8001532 <__aeabi_ui2f+0x3a>
 8001570:	0264      	lsls	r4, r4, #9
 8001572:	2096      	movs	r0, #150	@ 0x96
 8001574:	0a64      	lsrs	r4, r4, #9
 8001576:	e7d3      	b.n	8001520 <__aeabi_ui2f+0x28>
 8001578:	fbffffff 	.word	0xfbffffff

0800157c <__aeabi_dadd>:
 800157c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800157e:	4657      	mov	r7, sl
 8001580:	464e      	mov	r6, r9
 8001582:	4645      	mov	r5, r8
 8001584:	46de      	mov	lr, fp
 8001586:	b5e0      	push	{r5, r6, r7, lr}
 8001588:	b083      	sub	sp, #12
 800158a:	9000      	str	r0, [sp, #0]
 800158c:	9101      	str	r1, [sp, #4]
 800158e:	030c      	lsls	r4, r1, #12
 8001590:	004f      	lsls	r7, r1, #1
 8001592:	0fce      	lsrs	r6, r1, #31
 8001594:	0a61      	lsrs	r1, r4, #9
 8001596:	9c00      	ldr	r4, [sp, #0]
 8001598:	031d      	lsls	r5, r3, #12
 800159a:	0f64      	lsrs	r4, r4, #29
 800159c:	430c      	orrs	r4, r1
 800159e:	9900      	ldr	r1, [sp, #0]
 80015a0:	9200      	str	r2, [sp, #0]
 80015a2:	9301      	str	r3, [sp, #4]
 80015a4:	00c8      	lsls	r0, r1, #3
 80015a6:	0059      	lsls	r1, r3, #1
 80015a8:	0d4b      	lsrs	r3, r1, #21
 80015aa:	4699      	mov	r9, r3
 80015ac:	9a00      	ldr	r2, [sp, #0]
 80015ae:	9b01      	ldr	r3, [sp, #4]
 80015b0:	0a6d      	lsrs	r5, r5, #9
 80015b2:	0fd9      	lsrs	r1, r3, #31
 80015b4:	0f53      	lsrs	r3, r2, #29
 80015b6:	432b      	orrs	r3, r5
 80015b8:	469a      	mov	sl, r3
 80015ba:	9b00      	ldr	r3, [sp, #0]
 80015bc:	0d7f      	lsrs	r7, r7, #21
 80015be:	00da      	lsls	r2, r3, #3
 80015c0:	4694      	mov	ip, r2
 80015c2:	464a      	mov	r2, r9
 80015c4:	46b0      	mov	r8, r6
 80015c6:	1aba      	subs	r2, r7, r2
 80015c8:	428e      	cmp	r6, r1
 80015ca:	d100      	bne.n	80015ce <__aeabi_dadd+0x52>
 80015cc:	e0b0      	b.n	8001730 <__aeabi_dadd+0x1b4>
 80015ce:	2a00      	cmp	r2, #0
 80015d0:	dc00      	bgt.n	80015d4 <__aeabi_dadd+0x58>
 80015d2:	e078      	b.n	80016c6 <__aeabi_dadd+0x14a>
 80015d4:	4649      	mov	r1, r9
 80015d6:	2900      	cmp	r1, #0
 80015d8:	d100      	bne.n	80015dc <__aeabi_dadd+0x60>
 80015da:	e0e9      	b.n	80017b0 <__aeabi_dadd+0x234>
 80015dc:	49c9      	ldr	r1, [pc, #804]	@ (8001904 <__aeabi_dadd+0x388>)
 80015de:	428f      	cmp	r7, r1
 80015e0:	d100      	bne.n	80015e4 <__aeabi_dadd+0x68>
 80015e2:	e195      	b.n	8001910 <__aeabi_dadd+0x394>
 80015e4:	2501      	movs	r5, #1
 80015e6:	2a38      	cmp	r2, #56	@ 0x38
 80015e8:	dc16      	bgt.n	8001618 <__aeabi_dadd+0x9c>
 80015ea:	2180      	movs	r1, #128	@ 0x80
 80015ec:	4653      	mov	r3, sl
 80015ee:	0409      	lsls	r1, r1, #16
 80015f0:	430b      	orrs	r3, r1
 80015f2:	469a      	mov	sl, r3
 80015f4:	2a1f      	cmp	r2, #31
 80015f6:	dd00      	ble.n	80015fa <__aeabi_dadd+0x7e>
 80015f8:	e1e7      	b.n	80019ca <__aeabi_dadd+0x44e>
 80015fa:	2120      	movs	r1, #32
 80015fc:	4655      	mov	r5, sl
 80015fe:	1a8b      	subs	r3, r1, r2
 8001600:	4661      	mov	r1, ip
 8001602:	409d      	lsls	r5, r3
 8001604:	40d1      	lsrs	r1, r2
 8001606:	430d      	orrs	r5, r1
 8001608:	4661      	mov	r1, ip
 800160a:	4099      	lsls	r1, r3
 800160c:	1e4b      	subs	r3, r1, #1
 800160e:	4199      	sbcs	r1, r3
 8001610:	4653      	mov	r3, sl
 8001612:	40d3      	lsrs	r3, r2
 8001614:	430d      	orrs	r5, r1
 8001616:	1ae4      	subs	r4, r4, r3
 8001618:	1b45      	subs	r5, r0, r5
 800161a:	42a8      	cmp	r0, r5
 800161c:	4180      	sbcs	r0, r0
 800161e:	4240      	negs	r0, r0
 8001620:	1a24      	subs	r4, r4, r0
 8001622:	0223      	lsls	r3, r4, #8
 8001624:	d400      	bmi.n	8001628 <__aeabi_dadd+0xac>
 8001626:	e10f      	b.n	8001848 <__aeabi_dadd+0x2cc>
 8001628:	0264      	lsls	r4, r4, #9
 800162a:	0a64      	lsrs	r4, r4, #9
 800162c:	2c00      	cmp	r4, #0
 800162e:	d100      	bne.n	8001632 <__aeabi_dadd+0xb6>
 8001630:	e139      	b.n	80018a6 <__aeabi_dadd+0x32a>
 8001632:	0020      	movs	r0, r4
 8001634:	f001 fee2 	bl	80033fc <__clzsi2>
 8001638:	0003      	movs	r3, r0
 800163a:	3b08      	subs	r3, #8
 800163c:	2120      	movs	r1, #32
 800163e:	0028      	movs	r0, r5
 8001640:	1aca      	subs	r2, r1, r3
 8001642:	40d0      	lsrs	r0, r2
 8001644:	409c      	lsls	r4, r3
 8001646:	0002      	movs	r2, r0
 8001648:	409d      	lsls	r5, r3
 800164a:	4322      	orrs	r2, r4
 800164c:	429f      	cmp	r7, r3
 800164e:	dd00      	ble.n	8001652 <__aeabi_dadd+0xd6>
 8001650:	e173      	b.n	800193a <__aeabi_dadd+0x3be>
 8001652:	1bd8      	subs	r0, r3, r7
 8001654:	3001      	adds	r0, #1
 8001656:	1a09      	subs	r1, r1, r0
 8001658:	002c      	movs	r4, r5
 800165a:	408d      	lsls	r5, r1
 800165c:	40c4      	lsrs	r4, r0
 800165e:	1e6b      	subs	r3, r5, #1
 8001660:	419d      	sbcs	r5, r3
 8001662:	0013      	movs	r3, r2
 8001664:	40c2      	lsrs	r2, r0
 8001666:	408b      	lsls	r3, r1
 8001668:	4325      	orrs	r5, r4
 800166a:	2700      	movs	r7, #0
 800166c:	0014      	movs	r4, r2
 800166e:	431d      	orrs	r5, r3
 8001670:	076b      	lsls	r3, r5, #29
 8001672:	d009      	beq.n	8001688 <__aeabi_dadd+0x10c>
 8001674:	230f      	movs	r3, #15
 8001676:	402b      	ands	r3, r5
 8001678:	2b04      	cmp	r3, #4
 800167a:	d005      	beq.n	8001688 <__aeabi_dadd+0x10c>
 800167c:	1d2b      	adds	r3, r5, #4
 800167e:	42ab      	cmp	r3, r5
 8001680:	41ad      	sbcs	r5, r5
 8001682:	426d      	negs	r5, r5
 8001684:	1964      	adds	r4, r4, r5
 8001686:	001d      	movs	r5, r3
 8001688:	0223      	lsls	r3, r4, #8
 800168a:	d400      	bmi.n	800168e <__aeabi_dadd+0x112>
 800168c:	e12d      	b.n	80018ea <__aeabi_dadd+0x36e>
 800168e:	4a9d      	ldr	r2, [pc, #628]	@ (8001904 <__aeabi_dadd+0x388>)
 8001690:	3701      	adds	r7, #1
 8001692:	4297      	cmp	r7, r2
 8001694:	d100      	bne.n	8001698 <__aeabi_dadd+0x11c>
 8001696:	e0d3      	b.n	8001840 <__aeabi_dadd+0x2c4>
 8001698:	4646      	mov	r6, r8
 800169a:	499b      	ldr	r1, [pc, #620]	@ (8001908 <__aeabi_dadd+0x38c>)
 800169c:	08ed      	lsrs	r5, r5, #3
 800169e:	4021      	ands	r1, r4
 80016a0:	074a      	lsls	r2, r1, #29
 80016a2:	432a      	orrs	r2, r5
 80016a4:	057c      	lsls	r4, r7, #21
 80016a6:	024d      	lsls	r5, r1, #9
 80016a8:	0b2d      	lsrs	r5, r5, #12
 80016aa:	0d64      	lsrs	r4, r4, #21
 80016ac:	0524      	lsls	r4, r4, #20
 80016ae:	432c      	orrs	r4, r5
 80016b0:	07f6      	lsls	r6, r6, #31
 80016b2:	4334      	orrs	r4, r6
 80016b4:	0010      	movs	r0, r2
 80016b6:	0021      	movs	r1, r4
 80016b8:	b003      	add	sp, #12
 80016ba:	bcf0      	pop	{r4, r5, r6, r7}
 80016bc:	46bb      	mov	fp, r7
 80016be:	46b2      	mov	sl, r6
 80016c0:	46a9      	mov	r9, r5
 80016c2:	46a0      	mov	r8, r4
 80016c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016c6:	2a00      	cmp	r2, #0
 80016c8:	d100      	bne.n	80016cc <__aeabi_dadd+0x150>
 80016ca:	e084      	b.n	80017d6 <__aeabi_dadd+0x25a>
 80016cc:	464a      	mov	r2, r9
 80016ce:	1bd2      	subs	r2, r2, r7
 80016d0:	2f00      	cmp	r7, #0
 80016d2:	d000      	beq.n	80016d6 <__aeabi_dadd+0x15a>
 80016d4:	e16d      	b.n	80019b2 <__aeabi_dadd+0x436>
 80016d6:	0025      	movs	r5, r4
 80016d8:	4305      	orrs	r5, r0
 80016da:	d100      	bne.n	80016de <__aeabi_dadd+0x162>
 80016dc:	e127      	b.n	800192e <__aeabi_dadd+0x3b2>
 80016de:	1e56      	subs	r6, r2, #1
 80016e0:	2a01      	cmp	r2, #1
 80016e2:	d100      	bne.n	80016e6 <__aeabi_dadd+0x16a>
 80016e4:	e23b      	b.n	8001b5e <__aeabi_dadd+0x5e2>
 80016e6:	4d87      	ldr	r5, [pc, #540]	@ (8001904 <__aeabi_dadd+0x388>)
 80016e8:	42aa      	cmp	r2, r5
 80016ea:	d100      	bne.n	80016ee <__aeabi_dadd+0x172>
 80016ec:	e26a      	b.n	8001bc4 <__aeabi_dadd+0x648>
 80016ee:	2501      	movs	r5, #1
 80016f0:	2e38      	cmp	r6, #56	@ 0x38
 80016f2:	dc12      	bgt.n	800171a <__aeabi_dadd+0x19e>
 80016f4:	0032      	movs	r2, r6
 80016f6:	2a1f      	cmp	r2, #31
 80016f8:	dd00      	ble.n	80016fc <__aeabi_dadd+0x180>
 80016fa:	e1f8      	b.n	8001aee <__aeabi_dadd+0x572>
 80016fc:	2620      	movs	r6, #32
 80016fe:	0025      	movs	r5, r4
 8001700:	1ab6      	subs	r6, r6, r2
 8001702:	0007      	movs	r7, r0
 8001704:	4653      	mov	r3, sl
 8001706:	40b0      	lsls	r0, r6
 8001708:	40d4      	lsrs	r4, r2
 800170a:	40b5      	lsls	r5, r6
 800170c:	40d7      	lsrs	r7, r2
 800170e:	1e46      	subs	r6, r0, #1
 8001710:	41b0      	sbcs	r0, r6
 8001712:	1b1b      	subs	r3, r3, r4
 8001714:	469a      	mov	sl, r3
 8001716:	433d      	orrs	r5, r7
 8001718:	4305      	orrs	r5, r0
 800171a:	4662      	mov	r2, ip
 800171c:	1b55      	subs	r5, r2, r5
 800171e:	45ac      	cmp	ip, r5
 8001720:	4192      	sbcs	r2, r2
 8001722:	4653      	mov	r3, sl
 8001724:	4252      	negs	r2, r2
 8001726:	000e      	movs	r6, r1
 8001728:	464f      	mov	r7, r9
 800172a:	4688      	mov	r8, r1
 800172c:	1a9c      	subs	r4, r3, r2
 800172e:	e778      	b.n	8001622 <__aeabi_dadd+0xa6>
 8001730:	2a00      	cmp	r2, #0
 8001732:	dc00      	bgt.n	8001736 <__aeabi_dadd+0x1ba>
 8001734:	e08e      	b.n	8001854 <__aeabi_dadd+0x2d8>
 8001736:	4649      	mov	r1, r9
 8001738:	2900      	cmp	r1, #0
 800173a:	d175      	bne.n	8001828 <__aeabi_dadd+0x2ac>
 800173c:	4661      	mov	r1, ip
 800173e:	4653      	mov	r3, sl
 8001740:	4319      	orrs	r1, r3
 8001742:	d100      	bne.n	8001746 <__aeabi_dadd+0x1ca>
 8001744:	e0f6      	b.n	8001934 <__aeabi_dadd+0x3b8>
 8001746:	1e51      	subs	r1, r2, #1
 8001748:	2a01      	cmp	r2, #1
 800174a:	d100      	bne.n	800174e <__aeabi_dadd+0x1d2>
 800174c:	e191      	b.n	8001a72 <__aeabi_dadd+0x4f6>
 800174e:	4d6d      	ldr	r5, [pc, #436]	@ (8001904 <__aeabi_dadd+0x388>)
 8001750:	42aa      	cmp	r2, r5
 8001752:	d100      	bne.n	8001756 <__aeabi_dadd+0x1da>
 8001754:	e0dc      	b.n	8001910 <__aeabi_dadd+0x394>
 8001756:	2501      	movs	r5, #1
 8001758:	2938      	cmp	r1, #56	@ 0x38
 800175a:	dc14      	bgt.n	8001786 <__aeabi_dadd+0x20a>
 800175c:	000a      	movs	r2, r1
 800175e:	2a1f      	cmp	r2, #31
 8001760:	dd00      	ble.n	8001764 <__aeabi_dadd+0x1e8>
 8001762:	e1a2      	b.n	8001aaa <__aeabi_dadd+0x52e>
 8001764:	2120      	movs	r1, #32
 8001766:	4653      	mov	r3, sl
 8001768:	1a89      	subs	r1, r1, r2
 800176a:	408b      	lsls	r3, r1
 800176c:	001d      	movs	r5, r3
 800176e:	4663      	mov	r3, ip
 8001770:	40d3      	lsrs	r3, r2
 8001772:	431d      	orrs	r5, r3
 8001774:	4663      	mov	r3, ip
 8001776:	408b      	lsls	r3, r1
 8001778:	0019      	movs	r1, r3
 800177a:	1e4b      	subs	r3, r1, #1
 800177c:	4199      	sbcs	r1, r3
 800177e:	4653      	mov	r3, sl
 8001780:	40d3      	lsrs	r3, r2
 8001782:	430d      	orrs	r5, r1
 8001784:	18e4      	adds	r4, r4, r3
 8001786:	182d      	adds	r5, r5, r0
 8001788:	4285      	cmp	r5, r0
 800178a:	4180      	sbcs	r0, r0
 800178c:	4240      	negs	r0, r0
 800178e:	1824      	adds	r4, r4, r0
 8001790:	0223      	lsls	r3, r4, #8
 8001792:	d559      	bpl.n	8001848 <__aeabi_dadd+0x2cc>
 8001794:	4b5b      	ldr	r3, [pc, #364]	@ (8001904 <__aeabi_dadd+0x388>)
 8001796:	3701      	adds	r7, #1
 8001798:	429f      	cmp	r7, r3
 800179a:	d051      	beq.n	8001840 <__aeabi_dadd+0x2c4>
 800179c:	2101      	movs	r1, #1
 800179e:	4b5a      	ldr	r3, [pc, #360]	@ (8001908 <__aeabi_dadd+0x38c>)
 80017a0:	086a      	lsrs	r2, r5, #1
 80017a2:	401c      	ands	r4, r3
 80017a4:	4029      	ands	r1, r5
 80017a6:	430a      	orrs	r2, r1
 80017a8:	07e5      	lsls	r5, r4, #31
 80017aa:	4315      	orrs	r5, r2
 80017ac:	0864      	lsrs	r4, r4, #1
 80017ae:	e75f      	b.n	8001670 <__aeabi_dadd+0xf4>
 80017b0:	4661      	mov	r1, ip
 80017b2:	4653      	mov	r3, sl
 80017b4:	4319      	orrs	r1, r3
 80017b6:	d100      	bne.n	80017ba <__aeabi_dadd+0x23e>
 80017b8:	e0bc      	b.n	8001934 <__aeabi_dadd+0x3b8>
 80017ba:	1e51      	subs	r1, r2, #1
 80017bc:	2a01      	cmp	r2, #1
 80017be:	d100      	bne.n	80017c2 <__aeabi_dadd+0x246>
 80017c0:	e164      	b.n	8001a8c <__aeabi_dadd+0x510>
 80017c2:	4d50      	ldr	r5, [pc, #320]	@ (8001904 <__aeabi_dadd+0x388>)
 80017c4:	42aa      	cmp	r2, r5
 80017c6:	d100      	bne.n	80017ca <__aeabi_dadd+0x24e>
 80017c8:	e16a      	b.n	8001aa0 <__aeabi_dadd+0x524>
 80017ca:	2501      	movs	r5, #1
 80017cc:	2938      	cmp	r1, #56	@ 0x38
 80017ce:	dd00      	ble.n	80017d2 <__aeabi_dadd+0x256>
 80017d0:	e722      	b.n	8001618 <__aeabi_dadd+0x9c>
 80017d2:	000a      	movs	r2, r1
 80017d4:	e70e      	b.n	80015f4 <__aeabi_dadd+0x78>
 80017d6:	4a4d      	ldr	r2, [pc, #308]	@ (800190c <__aeabi_dadd+0x390>)
 80017d8:	1c7d      	adds	r5, r7, #1
 80017da:	4215      	tst	r5, r2
 80017dc:	d000      	beq.n	80017e0 <__aeabi_dadd+0x264>
 80017de:	e0d0      	b.n	8001982 <__aeabi_dadd+0x406>
 80017e0:	0025      	movs	r5, r4
 80017e2:	4662      	mov	r2, ip
 80017e4:	4653      	mov	r3, sl
 80017e6:	4305      	orrs	r5, r0
 80017e8:	431a      	orrs	r2, r3
 80017ea:	2f00      	cmp	r7, #0
 80017ec:	d000      	beq.n	80017f0 <__aeabi_dadd+0x274>
 80017ee:	e137      	b.n	8001a60 <__aeabi_dadd+0x4e4>
 80017f0:	2d00      	cmp	r5, #0
 80017f2:	d100      	bne.n	80017f6 <__aeabi_dadd+0x27a>
 80017f4:	e1a8      	b.n	8001b48 <__aeabi_dadd+0x5cc>
 80017f6:	2a00      	cmp	r2, #0
 80017f8:	d100      	bne.n	80017fc <__aeabi_dadd+0x280>
 80017fa:	e16a      	b.n	8001ad2 <__aeabi_dadd+0x556>
 80017fc:	4663      	mov	r3, ip
 80017fe:	1ac5      	subs	r5, r0, r3
 8001800:	4653      	mov	r3, sl
 8001802:	1ae2      	subs	r2, r4, r3
 8001804:	42a8      	cmp	r0, r5
 8001806:	419b      	sbcs	r3, r3
 8001808:	425b      	negs	r3, r3
 800180a:	1ad3      	subs	r3, r2, r3
 800180c:	021a      	lsls	r2, r3, #8
 800180e:	d400      	bmi.n	8001812 <__aeabi_dadd+0x296>
 8001810:	e203      	b.n	8001c1a <__aeabi_dadd+0x69e>
 8001812:	4663      	mov	r3, ip
 8001814:	1a1d      	subs	r5, r3, r0
 8001816:	45ac      	cmp	ip, r5
 8001818:	4192      	sbcs	r2, r2
 800181a:	4653      	mov	r3, sl
 800181c:	4252      	negs	r2, r2
 800181e:	1b1c      	subs	r4, r3, r4
 8001820:	000e      	movs	r6, r1
 8001822:	4688      	mov	r8, r1
 8001824:	1aa4      	subs	r4, r4, r2
 8001826:	e723      	b.n	8001670 <__aeabi_dadd+0xf4>
 8001828:	4936      	ldr	r1, [pc, #216]	@ (8001904 <__aeabi_dadd+0x388>)
 800182a:	428f      	cmp	r7, r1
 800182c:	d070      	beq.n	8001910 <__aeabi_dadd+0x394>
 800182e:	2501      	movs	r5, #1
 8001830:	2a38      	cmp	r2, #56	@ 0x38
 8001832:	dca8      	bgt.n	8001786 <__aeabi_dadd+0x20a>
 8001834:	2180      	movs	r1, #128	@ 0x80
 8001836:	4653      	mov	r3, sl
 8001838:	0409      	lsls	r1, r1, #16
 800183a:	430b      	orrs	r3, r1
 800183c:	469a      	mov	sl, r3
 800183e:	e78e      	b.n	800175e <__aeabi_dadd+0x1e2>
 8001840:	003c      	movs	r4, r7
 8001842:	2500      	movs	r5, #0
 8001844:	2200      	movs	r2, #0
 8001846:	e731      	b.n	80016ac <__aeabi_dadd+0x130>
 8001848:	2307      	movs	r3, #7
 800184a:	402b      	ands	r3, r5
 800184c:	2b00      	cmp	r3, #0
 800184e:	d000      	beq.n	8001852 <__aeabi_dadd+0x2d6>
 8001850:	e710      	b.n	8001674 <__aeabi_dadd+0xf8>
 8001852:	e093      	b.n	800197c <__aeabi_dadd+0x400>
 8001854:	2a00      	cmp	r2, #0
 8001856:	d074      	beq.n	8001942 <__aeabi_dadd+0x3c6>
 8001858:	464a      	mov	r2, r9
 800185a:	1bd2      	subs	r2, r2, r7
 800185c:	2f00      	cmp	r7, #0
 800185e:	d100      	bne.n	8001862 <__aeabi_dadd+0x2e6>
 8001860:	e0c7      	b.n	80019f2 <__aeabi_dadd+0x476>
 8001862:	4928      	ldr	r1, [pc, #160]	@ (8001904 <__aeabi_dadd+0x388>)
 8001864:	4589      	cmp	r9, r1
 8001866:	d100      	bne.n	800186a <__aeabi_dadd+0x2ee>
 8001868:	e185      	b.n	8001b76 <__aeabi_dadd+0x5fa>
 800186a:	2501      	movs	r5, #1
 800186c:	2a38      	cmp	r2, #56	@ 0x38
 800186e:	dc12      	bgt.n	8001896 <__aeabi_dadd+0x31a>
 8001870:	2180      	movs	r1, #128	@ 0x80
 8001872:	0409      	lsls	r1, r1, #16
 8001874:	430c      	orrs	r4, r1
 8001876:	2a1f      	cmp	r2, #31
 8001878:	dd00      	ble.n	800187c <__aeabi_dadd+0x300>
 800187a:	e1ab      	b.n	8001bd4 <__aeabi_dadd+0x658>
 800187c:	2120      	movs	r1, #32
 800187e:	0025      	movs	r5, r4
 8001880:	1a89      	subs	r1, r1, r2
 8001882:	0007      	movs	r7, r0
 8001884:	4088      	lsls	r0, r1
 8001886:	408d      	lsls	r5, r1
 8001888:	40d7      	lsrs	r7, r2
 800188a:	1e41      	subs	r1, r0, #1
 800188c:	4188      	sbcs	r0, r1
 800188e:	40d4      	lsrs	r4, r2
 8001890:	433d      	orrs	r5, r7
 8001892:	4305      	orrs	r5, r0
 8001894:	44a2      	add	sl, r4
 8001896:	4465      	add	r5, ip
 8001898:	4565      	cmp	r5, ip
 800189a:	4192      	sbcs	r2, r2
 800189c:	4252      	negs	r2, r2
 800189e:	4452      	add	r2, sl
 80018a0:	0014      	movs	r4, r2
 80018a2:	464f      	mov	r7, r9
 80018a4:	e774      	b.n	8001790 <__aeabi_dadd+0x214>
 80018a6:	0028      	movs	r0, r5
 80018a8:	f001 fda8 	bl	80033fc <__clzsi2>
 80018ac:	0003      	movs	r3, r0
 80018ae:	3318      	adds	r3, #24
 80018b0:	2b1f      	cmp	r3, #31
 80018b2:	dc00      	bgt.n	80018b6 <__aeabi_dadd+0x33a>
 80018b4:	e6c2      	b.n	800163c <__aeabi_dadd+0xc0>
 80018b6:	002a      	movs	r2, r5
 80018b8:	3808      	subs	r0, #8
 80018ba:	4082      	lsls	r2, r0
 80018bc:	429f      	cmp	r7, r3
 80018be:	dd00      	ble.n	80018c2 <__aeabi_dadd+0x346>
 80018c0:	e0a9      	b.n	8001a16 <__aeabi_dadd+0x49a>
 80018c2:	1bdb      	subs	r3, r3, r7
 80018c4:	1c58      	adds	r0, r3, #1
 80018c6:	281f      	cmp	r0, #31
 80018c8:	dc00      	bgt.n	80018cc <__aeabi_dadd+0x350>
 80018ca:	e1ac      	b.n	8001c26 <__aeabi_dadd+0x6aa>
 80018cc:	0015      	movs	r5, r2
 80018ce:	3b1f      	subs	r3, #31
 80018d0:	40dd      	lsrs	r5, r3
 80018d2:	2820      	cmp	r0, #32
 80018d4:	d005      	beq.n	80018e2 <__aeabi_dadd+0x366>
 80018d6:	2340      	movs	r3, #64	@ 0x40
 80018d8:	1a1b      	subs	r3, r3, r0
 80018da:	409a      	lsls	r2, r3
 80018dc:	1e53      	subs	r3, r2, #1
 80018de:	419a      	sbcs	r2, r3
 80018e0:	4315      	orrs	r5, r2
 80018e2:	2307      	movs	r3, #7
 80018e4:	2700      	movs	r7, #0
 80018e6:	402b      	ands	r3, r5
 80018e8:	e7b0      	b.n	800184c <__aeabi_dadd+0x2d0>
 80018ea:	08ed      	lsrs	r5, r5, #3
 80018ec:	4b05      	ldr	r3, [pc, #20]	@ (8001904 <__aeabi_dadd+0x388>)
 80018ee:	0762      	lsls	r2, r4, #29
 80018f0:	432a      	orrs	r2, r5
 80018f2:	08e4      	lsrs	r4, r4, #3
 80018f4:	429f      	cmp	r7, r3
 80018f6:	d00f      	beq.n	8001918 <__aeabi_dadd+0x39c>
 80018f8:	0324      	lsls	r4, r4, #12
 80018fa:	0b25      	lsrs	r5, r4, #12
 80018fc:	057c      	lsls	r4, r7, #21
 80018fe:	0d64      	lsrs	r4, r4, #21
 8001900:	e6d4      	b.n	80016ac <__aeabi_dadd+0x130>
 8001902:	46c0      	nop			@ (mov r8, r8)
 8001904:	000007ff 	.word	0x000007ff
 8001908:	ff7fffff 	.word	0xff7fffff
 800190c:	000007fe 	.word	0x000007fe
 8001910:	08c0      	lsrs	r0, r0, #3
 8001912:	0762      	lsls	r2, r4, #29
 8001914:	4302      	orrs	r2, r0
 8001916:	08e4      	lsrs	r4, r4, #3
 8001918:	0013      	movs	r3, r2
 800191a:	4323      	orrs	r3, r4
 800191c:	d100      	bne.n	8001920 <__aeabi_dadd+0x3a4>
 800191e:	e186      	b.n	8001c2e <__aeabi_dadd+0x6b2>
 8001920:	2580      	movs	r5, #128	@ 0x80
 8001922:	032d      	lsls	r5, r5, #12
 8001924:	4325      	orrs	r5, r4
 8001926:	032d      	lsls	r5, r5, #12
 8001928:	4cc3      	ldr	r4, [pc, #780]	@ (8001c38 <__aeabi_dadd+0x6bc>)
 800192a:	0b2d      	lsrs	r5, r5, #12
 800192c:	e6be      	b.n	80016ac <__aeabi_dadd+0x130>
 800192e:	4660      	mov	r0, ip
 8001930:	4654      	mov	r4, sl
 8001932:	000e      	movs	r6, r1
 8001934:	0017      	movs	r7, r2
 8001936:	08c5      	lsrs	r5, r0, #3
 8001938:	e7d8      	b.n	80018ec <__aeabi_dadd+0x370>
 800193a:	4cc0      	ldr	r4, [pc, #768]	@ (8001c3c <__aeabi_dadd+0x6c0>)
 800193c:	1aff      	subs	r7, r7, r3
 800193e:	4014      	ands	r4, r2
 8001940:	e696      	b.n	8001670 <__aeabi_dadd+0xf4>
 8001942:	4abf      	ldr	r2, [pc, #764]	@ (8001c40 <__aeabi_dadd+0x6c4>)
 8001944:	1c79      	adds	r1, r7, #1
 8001946:	4211      	tst	r1, r2
 8001948:	d16b      	bne.n	8001a22 <__aeabi_dadd+0x4a6>
 800194a:	0022      	movs	r2, r4
 800194c:	4302      	orrs	r2, r0
 800194e:	2f00      	cmp	r7, #0
 8001950:	d000      	beq.n	8001954 <__aeabi_dadd+0x3d8>
 8001952:	e0db      	b.n	8001b0c <__aeabi_dadd+0x590>
 8001954:	2a00      	cmp	r2, #0
 8001956:	d100      	bne.n	800195a <__aeabi_dadd+0x3de>
 8001958:	e12d      	b.n	8001bb6 <__aeabi_dadd+0x63a>
 800195a:	4662      	mov	r2, ip
 800195c:	4653      	mov	r3, sl
 800195e:	431a      	orrs	r2, r3
 8001960:	d100      	bne.n	8001964 <__aeabi_dadd+0x3e8>
 8001962:	e0b6      	b.n	8001ad2 <__aeabi_dadd+0x556>
 8001964:	4663      	mov	r3, ip
 8001966:	18c5      	adds	r5, r0, r3
 8001968:	4285      	cmp	r5, r0
 800196a:	4180      	sbcs	r0, r0
 800196c:	4454      	add	r4, sl
 800196e:	4240      	negs	r0, r0
 8001970:	1824      	adds	r4, r4, r0
 8001972:	0223      	lsls	r3, r4, #8
 8001974:	d502      	bpl.n	800197c <__aeabi_dadd+0x400>
 8001976:	000f      	movs	r7, r1
 8001978:	4bb0      	ldr	r3, [pc, #704]	@ (8001c3c <__aeabi_dadd+0x6c0>)
 800197a:	401c      	ands	r4, r3
 800197c:	003a      	movs	r2, r7
 800197e:	0028      	movs	r0, r5
 8001980:	e7d8      	b.n	8001934 <__aeabi_dadd+0x3b8>
 8001982:	4662      	mov	r2, ip
 8001984:	1a85      	subs	r5, r0, r2
 8001986:	42a8      	cmp	r0, r5
 8001988:	4192      	sbcs	r2, r2
 800198a:	4653      	mov	r3, sl
 800198c:	4252      	negs	r2, r2
 800198e:	4691      	mov	r9, r2
 8001990:	1ae3      	subs	r3, r4, r3
 8001992:	001a      	movs	r2, r3
 8001994:	464b      	mov	r3, r9
 8001996:	1ad2      	subs	r2, r2, r3
 8001998:	0013      	movs	r3, r2
 800199a:	4691      	mov	r9, r2
 800199c:	021a      	lsls	r2, r3, #8
 800199e:	d454      	bmi.n	8001a4a <__aeabi_dadd+0x4ce>
 80019a0:	464a      	mov	r2, r9
 80019a2:	464c      	mov	r4, r9
 80019a4:	432a      	orrs	r2, r5
 80019a6:	d000      	beq.n	80019aa <__aeabi_dadd+0x42e>
 80019a8:	e640      	b.n	800162c <__aeabi_dadd+0xb0>
 80019aa:	2600      	movs	r6, #0
 80019ac:	2400      	movs	r4, #0
 80019ae:	2500      	movs	r5, #0
 80019b0:	e67c      	b.n	80016ac <__aeabi_dadd+0x130>
 80019b2:	4da1      	ldr	r5, [pc, #644]	@ (8001c38 <__aeabi_dadd+0x6bc>)
 80019b4:	45a9      	cmp	r9, r5
 80019b6:	d100      	bne.n	80019ba <__aeabi_dadd+0x43e>
 80019b8:	e090      	b.n	8001adc <__aeabi_dadd+0x560>
 80019ba:	2501      	movs	r5, #1
 80019bc:	2a38      	cmp	r2, #56	@ 0x38
 80019be:	dd00      	ble.n	80019c2 <__aeabi_dadd+0x446>
 80019c0:	e6ab      	b.n	800171a <__aeabi_dadd+0x19e>
 80019c2:	2580      	movs	r5, #128	@ 0x80
 80019c4:	042d      	lsls	r5, r5, #16
 80019c6:	432c      	orrs	r4, r5
 80019c8:	e695      	b.n	80016f6 <__aeabi_dadd+0x17a>
 80019ca:	0011      	movs	r1, r2
 80019cc:	4655      	mov	r5, sl
 80019ce:	3920      	subs	r1, #32
 80019d0:	40cd      	lsrs	r5, r1
 80019d2:	46a9      	mov	r9, r5
 80019d4:	2a20      	cmp	r2, #32
 80019d6:	d006      	beq.n	80019e6 <__aeabi_dadd+0x46a>
 80019d8:	2140      	movs	r1, #64	@ 0x40
 80019da:	4653      	mov	r3, sl
 80019dc:	1a8a      	subs	r2, r1, r2
 80019de:	4093      	lsls	r3, r2
 80019e0:	4662      	mov	r2, ip
 80019e2:	431a      	orrs	r2, r3
 80019e4:	4694      	mov	ip, r2
 80019e6:	4665      	mov	r5, ip
 80019e8:	1e6b      	subs	r3, r5, #1
 80019ea:	419d      	sbcs	r5, r3
 80019ec:	464b      	mov	r3, r9
 80019ee:	431d      	orrs	r5, r3
 80019f0:	e612      	b.n	8001618 <__aeabi_dadd+0x9c>
 80019f2:	0021      	movs	r1, r4
 80019f4:	4301      	orrs	r1, r0
 80019f6:	d100      	bne.n	80019fa <__aeabi_dadd+0x47e>
 80019f8:	e0c4      	b.n	8001b84 <__aeabi_dadd+0x608>
 80019fa:	1e51      	subs	r1, r2, #1
 80019fc:	2a01      	cmp	r2, #1
 80019fe:	d100      	bne.n	8001a02 <__aeabi_dadd+0x486>
 8001a00:	e0fb      	b.n	8001bfa <__aeabi_dadd+0x67e>
 8001a02:	4d8d      	ldr	r5, [pc, #564]	@ (8001c38 <__aeabi_dadd+0x6bc>)
 8001a04:	42aa      	cmp	r2, r5
 8001a06:	d100      	bne.n	8001a0a <__aeabi_dadd+0x48e>
 8001a08:	e0b5      	b.n	8001b76 <__aeabi_dadd+0x5fa>
 8001a0a:	2501      	movs	r5, #1
 8001a0c:	2938      	cmp	r1, #56	@ 0x38
 8001a0e:	dd00      	ble.n	8001a12 <__aeabi_dadd+0x496>
 8001a10:	e741      	b.n	8001896 <__aeabi_dadd+0x31a>
 8001a12:	000a      	movs	r2, r1
 8001a14:	e72f      	b.n	8001876 <__aeabi_dadd+0x2fa>
 8001a16:	4c89      	ldr	r4, [pc, #548]	@ (8001c3c <__aeabi_dadd+0x6c0>)
 8001a18:	1aff      	subs	r7, r7, r3
 8001a1a:	4014      	ands	r4, r2
 8001a1c:	0762      	lsls	r2, r4, #29
 8001a1e:	08e4      	lsrs	r4, r4, #3
 8001a20:	e76a      	b.n	80018f8 <__aeabi_dadd+0x37c>
 8001a22:	4a85      	ldr	r2, [pc, #532]	@ (8001c38 <__aeabi_dadd+0x6bc>)
 8001a24:	4291      	cmp	r1, r2
 8001a26:	d100      	bne.n	8001a2a <__aeabi_dadd+0x4ae>
 8001a28:	e0e3      	b.n	8001bf2 <__aeabi_dadd+0x676>
 8001a2a:	4663      	mov	r3, ip
 8001a2c:	18c2      	adds	r2, r0, r3
 8001a2e:	4282      	cmp	r2, r0
 8001a30:	4180      	sbcs	r0, r0
 8001a32:	0023      	movs	r3, r4
 8001a34:	4240      	negs	r0, r0
 8001a36:	4453      	add	r3, sl
 8001a38:	181b      	adds	r3, r3, r0
 8001a3a:	07dd      	lsls	r5, r3, #31
 8001a3c:	085c      	lsrs	r4, r3, #1
 8001a3e:	2307      	movs	r3, #7
 8001a40:	0852      	lsrs	r2, r2, #1
 8001a42:	4315      	orrs	r5, r2
 8001a44:	000f      	movs	r7, r1
 8001a46:	402b      	ands	r3, r5
 8001a48:	e700      	b.n	800184c <__aeabi_dadd+0x2d0>
 8001a4a:	4663      	mov	r3, ip
 8001a4c:	1a1d      	subs	r5, r3, r0
 8001a4e:	45ac      	cmp	ip, r5
 8001a50:	4192      	sbcs	r2, r2
 8001a52:	4653      	mov	r3, sl
 8001a54:	4252      	negs	r2, r2
 8001a56:	1b1c      	subs	r4, r3, r4
 8001a58:	000e      	movs	r6, r1
 8001a5a:	4688      	mov	r8, r1
 8001a5c:	1aa4      	subs	r4, r4, r2
 8001a5e:	e5e5      	b.n	800162c <__aeabi_dadd+0xb0>
 8001a60:	2d00      	cmp	r5, #0
 8001a62:	d000      	beq.n	8001a66 <__aeabi_dadd+0x4ea>
 8001a64:	e091      	b.n	8001b8a <__aeabi_dadd+0x60e>
 8001a66:	2a00      	cmp	r2, #0
 8001a68:	d138      	bne.n	8001adc <__aeabi_dadd+0x560>
 8001a6a:	2480      	movs	r4, #128	@ 0x80
 8001a6c:	2600      	movs	r6, #0
 8001a6e:	0324      	lsls	r4, r4, #12
 8001a70:	e756      	b.n	8001920 <__aeabi_dadd+0x3a4>
 8001a72:	4663      	mov	r3, ip
 8001a74:	18c5      	adds	r5, r0, r3
 8001a76:	4285      	cmp	r5, r0
 8001a78:	4180      	sbcs	r0, r0
 8001a7a:	4454      	add	r4, sl
 8001a7c:	4240      	negs	r0, r0
 8001a7e:	1824      	adds	r4, r4, r0
 8001a80:	2701      	movs	r7, #1
 8001a82:	0223      	lsls	r3, r4, #8
 8001a84:	d400      	bmi.n	8001a88 <__aeabi_dadd+0x50c>
 8001a86:	e6df      	b.n	8001848 <__aeabi_dadd+0x2cc>
 8001a88:	2702      	movs	r7, #2
 8001a8a:	e687      	b.n	800179c <__aeabi_dadd+0x220>
 8001a8c:	4663      	mov	r3, ip
 8001a8e:	1ac5      	subs	r5, r0, r3
 8001a90:	42a8      	cmp	r0, r5
 8001a92:	4180      	sbcs	r0, r0
 8001a94:	4653      	mov	r3, sl
 8001a96:	4240      	negs	r0, r0
 8001a98:	1ae4      	subs	r4, r4, r3
 8001a9a:	2701      	movs	r7, #1
 8001a9c:	1a24      	subs	r4, r4, r0
 8001a9e:	e5c0      	b.n	8001622 <__aeabi_dadd+0xa6>
 8001aa0:	0762      	lsls	r2, r4, #29
 8001aa2:	08c0      	lsrs	r0, r0, #3
 8001aa4:	4302      	orrs	r2, r0
 8001aa6:	08e4      	lsrs	r4, r4, #3
 8001aa8:	e736      	b.n	8001918 <__aeabi_dadd+0x39c>
 8001aaa:	0011      	movs	r1, r2
 8001aac:	4653      	mov	r3, sl
 8001aae:	3920      	subs	r1, #32
 8001ab0:	40cb      	lsrs	r3, r1
 8001ab2:	4699      	mov	r9, r3
 8001ab4:	2a20      	cmp	r2, #32
 8001ab6:	d006      	beq.n	8001ac6 <__aeabi_dadd+0x54a>
 8001ab8:	2140      	movs	r1, #64	@ 0x40
 8001aba:	4653      	mov	r3, sl
 8001abc:	1a8a      	subs	r2, r1, r2
 8001abe:	4093      	lsls	r3, r2
 8001ac0:	4662      	mov	r2, ip
 8001ac2:	431a      	orrs	r2, r3
 8001ac4:	4694      	mov	ip, r2
 8001ac6:	4665      	mov	r5, ip
 8001ac8:	1e6b      	subs	r3, r5, #1
 8001aca:	419d      	sbcs	r5, r3
 8001acc:	464b      	mov	r3, r9
 8001ace:	431d      	orrs	r5, r3
 8001ad0:	e659      	b.n	8001786 <__aeabi_dadd+0x20a>
 8001ad2:	0762      	lsls	r2, r4, #29
 8001ad4:	08c0      	lsrs	r0, r0, #3
 8001ad6:	4302      	orrs	r2, r0
 8001ad8:	08e4      	lsrs	r4, r4, #3
 8001ada:	e70d      	b.n	80018f8 <__aeabi_dadd+0x37c>
 8001adc:	4653      	mov	r3, sl
 8001ade:	075a      	lsls	r2, r3, #29
 8001ae0:	4663      	mov	r3, ip
 8001ae2:	08d8      	lsrs	r0, r3, #3
 8001ae4:	4653      	mov	r3, sl
 8001ae6:	000e      	movs	r6, r1
 8001ae8:	4302      	orrs	r2, r0
 8001aea:	08dc      	lsrs	r4, r3, #3
 8001aec:	e714      	b.n	8001918 <__aeabi_dadd+0x39c>
 8001aee:	0015      	movs	r5, r2
 8001af0:	0026      	movs	r6, r4
 8001af2:	3d20      	subs	r5, #32
 8001af4:	40ee      	lsrs	r6, r5
 8001af6:	2a20      	cmp	r2, #32
 8001af8:	d003      	beq.n	8001b02 <__aeabi_dadd+0x586>
 8001afa:	2540      	movs	r5, #64	@ 0x40
 8001afc:	1aaa      	subs	r2, r5, r2
 8001afe:	4094      	lsls	r4, r2
 8001b00:	4320      	orrs	r0, r4
 8001b02:	1e42      	subs	r2, r0, #1
 8001b04:	4190      	sbcs	r0, r2
 8001b06:	0005      	movs	r5, r0
 8001b08:	4335      	orrs	r5, r6
 8001b0a:	e606      	b.n	800171a <__aeabi_dadd+0x19e>
 8001b0c:	2a00      	cmp	r2, #0
 8001b0e:	d07c      	beq.n	8001c0a <__aeabi_dadd+0x68e>
 8001b10:	4662      	mov	r2, ip
 8001b12:	4653      	mov	r3, sl
 8001b14:	08c0      	lsrs	r0, r0, #3
 8001b16:	431a      	orrs	r2, r3
 8001b18:	d100      	bne.n	8001b1c <__aeabi_dadd+0x5a0>
 8001b1a:	e6fa      	b.n	8001912 <__aeabi_dadd+0x396>
 8001b1c:	0762      	lsls	r2, r4, #29
 8001b1e:	4310      	orrs	r0, r2
 8001b20:	2280      	movs	r2, #128	@ 0x80
 8001b22:	08e4      	lsrs	r4, r4, #3
 8001b24:	0312      	lsls	r2, r2, #12
 8001b26:	4214      	tst	r4, r2
 8001b28:	d008      	beq.n	8001b3c <__aeabi_dadd+0x5c0>
 8001b2a:	08d9      	lsrs	r1, r3, #3
 8001b2c:	4211      	tst	r1, r2
 8001b2e:	d105      	bne.n	8001b3c <__aeabi_dadd+0x5c0>
 8001b30:	4663      	mov	r3, ip
 8001b32:	08d8      	lsrs	r0, r3, #3
 8001b34:	4653      	mov	r3, sl
 8001b36:	000c      	movs	r4, r1
 8001b38:	075b      	lsls	r3, r3, #29
 8001b3a:	4318      	orrs	r0, r3
 8001b3c:	0f42      	lsrs	r2, r0, #29
 8001b3e:	00c0      	lsls	r0, r0, #3
 8001b40:	08c0      	lsrs	r0, r0, #3
 8001b42:	0752      	lsls	r2, r2, #29
 8001b44:	4302      	orrs	r2, r0
 8001b46:	e6e7      	b.n	8001918 <__aeabi_dadd+0x39c>
 8001b48:	2a00      	cmp	r2, #0
 8001b4a:	d100      	bne.n	8001b4e <__aeabi_dadd+0x5d2>
 8001b4c:	e72d      	b.n	80019aa <__aeabi_dadd+0x42e>
 8001b4e:	4663      	mov	r3, ip
 8001b50:	08d8      	lsrs	r0, r3, #3
 8001b52:	4653      	mov	r3, sl
 8001b54:	075a      	lsls	r2, r3, #29
 8001b56:	000e      	movs	r6, r1
 8001b58:	4302      	orrs	r2, r0
 8001b5a:	08dc      	lsrs	r4, r3, #3
 8001b5c:	e6cc      	b.n	80018f8 <__aeabi_dadd+0x37c>
 8001b5e:	4663      	mov	r3, ip
 8001b60:	1a1d      	subs	r5, r3, r0
 8001b62:	45ac      	cmp	ip, r5
 8001b64:	4192      	sbcs	r2, r2
 8001b66:	4653      	mov	r3, sl
 8001b68:	4252      	negs	r2, r2
 8001b6a:	1b1c      	subs	r4, r3, r4
 8001b6c:	000e      	movs	r6, r1
 8001b6e:	4688      	mov	r8, r1
 8001b70:	1aa4      	subs	r4, r4, r2
 8001b72:	3701      	adds	r7, #1
 8001b74:	e555      	b.n	8001622 <__aeabi_dadd+0xa6>
 8001b76:	4663      	mov	r3, ip
 8001b78:	08d9      	lsrs	r1, r3, #3
 8001b7a:	4653      	mov	r3, sl
 8001b7c:	075a      	lsls	r2, r3, #29
 8001b7e:	430a      	orrs	r2, r1
 8001b80:	08dc      	lsrs	r4, r3, #3
 8001b82:	e6c9      	b.n	8001918 <__aeabi_dadd+0x39c>
 8001b84:	4660      	mov	r0, ip
 8001b86:	4654      	mov	r4, sl
 8001b88:	e6d4      	b.n	8001934 <__aeabi_dadd+0x3b8>
 8001b8a:	08c0      	lsrs	r0, r0, #3
 8001b8c:	2a00      	cmp	r2, #0
 8001b8e:	d100      	bne.n	8001b92 <__aeabi_dadd+0x616>
 8001b90:	e6bf      	b.n	8001912 <__aeabi_dadd+0x396>
 8001b92:	0762      	lsls	r2, r4, #29
 8001b94:	4310      	orrs	r0, r2
 8001b96:	2280      	movs	r2, #128	@ 0x80
 8001b98:	08e4      	lsrs	r4, r4, #3
 8001b9a:	0312      	lsls	r2, r2, #12
 8001b9c:	4214      	tst	r4, r2
 8001b9e:	d0cd      	beq.n	8001b3c <__aeabi_dadd+0x5c0>
 8001ba0:	08dd      	lsrs	r5, r3, #3
 8001ba2:	4215      	tst	r5, r2
 8001ba4:	d1ca      	bne.n	8001b3c <__aeabi_dadd+0x5c0>
 8001ba6:	4663      	mov	r3, ip
 8001ba8:	08d8      	lsrs	r0, r3, #3
 8001baa:	4653      	mov	r3, sl
 8001bac:	075b      	lsls	r3, r3, #29
 8001bae:	000e      	movs	r6, r1
 8001bb0:	002c      	movs	r4, r5
 8001bb2:	4318      	orrs	r0, r3
 8001bb4:	e7c2      	b.n	8001b3c <__aeabi_dadd+0x5c0>
 8001bb6:	4663      	mov	r3, ip
 8001bb8:	08d9      	lsrs	r1, r3, #3
 8001bba:	4653      	mov	r3, sl
 8001bbc:	075a      	lsls	r2, r3, #29
 8001bbe:	430a      	orrs	r2, r1
 8001bc0:	08dc      	lsrs	r4, r3, #3
 8001bc2:	e699      	b.n	80018f8 <__aeabi_dadd+0x37c>
 8001bc4:	4663      	mov	r3, ip
 8001bc6:	08d8      	lsrs	r0, r3, #3
 8001bc8:	4653      	mov	r3, sl
 8001bca:	075a      	lsls	r2, r3, #29
 8001bcc:	000e      	movs	r6, r1
 8001bce:	4302      	orrs	r2, r0
 8001bd0:	08dc      	lsrs	r4, r3, #3
 8001bd2:	e6a1      	b.n	8001918 <__aeabi_dadd+0x39c>
 8001bd4:	0011      	movs	r1, r2
 8001bd6:	0027      	movs	r7, r4
 8001bd8:	3920      	subs	r1, #32
 8001bda:	40cf      	lsrs	r7, r1
 8001bdc:	2a20      	cmp	r2, #32
 8001bde:	d003      	beq.n	8001be8 <__aeabi_dadd+0x66c>
 8001be0:	2140      	movs	r1, #64	@ 0x40
 8001be2:	1a8a      	subs	r2, r1, r2
 8001be4:	4094      	lsls	r4, r2
 8001be6:	4320      	orrs	r0, r4
 8001be8:	1e42      	subs	r2, r0, #1
 8001bea:	4190      	sbcs	r0, r2
 8001bec:	0005      	movs	r5, r0
 8001bee:	433d      	orrs	r5, r7
 8001bf0:	e651      	b.n	8001896 <__aeabi_dadd+0x31a>
 8001bf2:	000c      	movs	r4, r1
 8001bf4:	2500      	movs	r5, #0
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	e558      	b.n	80016ac <__aeabi_dadd+0x130>
 8001bfa:	4460      	add	r0, ip
 8001bfc:	4560      	cmp	r0, ip
 8001bfe:	4192      	sbcs	r2, r2
 8001c00:	4454      	add	r4, sl
 8001c02:	4252      	negs	r2, r2
 8001c04:	0005      	movs	r5, r0
 8001c06:	18a4      	adds	r4, r4, r2
 8001c08:	e73a      	b.n	8001a80 <__aeabi_dadd+0x504>
 8001c0a:	4653      	mov	r3, sl
 8001c0c:	075a      	lsls	r2, r3, #29
 8001c0e:	4663      	mov	r3, ip
 8001c10:	08d9      	lsrs	r1, r3, #3
 8001c12:	4653      	mov	r3, sl
 8001c14:	430a      	orrs	r2, r1
 8001c16:	08dc      	lsrs	r4, r3, #3
 8001c18:	e67e      	b.n	8001918 <__aeabi_dadd+0x39c>
 8001c1a:	001a      	movs	r2, r3
 8001c1c:	001c      	movs	r4, r3
 8001c1e:	432a      	orrs	r2, r5
 8001c20:	d000      	beq.n	8001c24 <__aeabi_dadd+0x6a8>
 8001c22:	e6ab      	b.n	800197c <__aeabi_dadd+0x400>
 8001c24:	e6c1      	b.n	80019aa <__aeabi_dadd+0x42e>
 8001c26:	2120      	movs	r1, #32
 8001c28:	2500      	movs	r5, #0
 8001c2a:	1a09      	subs	r1, r1, r0
 8001c2c:	e519      	b.n	8001662 <__aeabi_dadd+0xe6>
 8001c2e:	2200      	movs	r2, #0
 8001c30:	2500      	movs	r5, #0
 8001c32:	4c01      	ldr	r4, [pc, #4]	@ (8001c38 <__aeabi_dadd+0x6bc>)
 8001c34:	e53a      	b.n	80016ac <__aeabi_dadd+0x130>
 8001c36:	46c0      	nop			@ (mov r8, r8)
 8001c38:	000007ff 	.word	0x000007ff
 8001c3c:	ff7fffff 	.word	0xff7fffff
 8001c40:	000007fe 	.word	0x000007fe

08001c44 <__aeabi_ddiv>:
 8001c44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c46:	46de      	mov	lr, fp
 8001c48:	4645      	mov	r5, r8
 8001c4a:	4657      	mov	r7, sl
 8001c4c:	464e      	mov	r6, r9
 8001c4e:	b5e0      	push	{r5, r6, r7, lr}
 8001c50:	b087      	sub	sp, #28
 8001c52:	9200      	str	r2, [sp, #0]
 8001c54:	9301      	str	r3, [sp, #4]
 8001c56:	030b      	lsls	r3, r1, #12
 8001c58:	0b1b      	lsrs	r3, r3, #12
 8001c5a:	469b      	mov	fp, r3
 8001c5c:	0fca      	lsrs	r2, r1, #31
 8001c5e:	004b      	lsls	r3, r1, #1
 8001c60:	0004      	movs	r4, r0
 8001c62:	4680      	mov	r8, r0
 8001c64:	0d5b      	lsrs	r3, r3, #21
 8001c66:	9202      	str	r2, [sp, #8]
 8001c68:	d100      	bne.n	8001c6c <__aeabi_ddiv+0x28>
 8001c6a:	e16a      	b.n	8001f42 <__aeabi_ddiv+0x2fe>
 8001c6c:	4ad4      	ldr	r2, [pc, #848]	@ (8001fc0 <__aeabi_ddiv+0x37c>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d100      	bne.n	8001c74 <__aeabi_ddiv+0x30>
 8001c72:	e18c      	b.n	8001f8e <__aeabi_ddiv+0x34a>
 8001c74:	4659      	mov	r1, fp
 8001c76:	0f42      	lsrs	r2, r0, #29
 8001c78:	00c9      	lsls	r1, r1, #3
 8001c7a:	430a      	orrs	r2, r1
 8001c7c:	2180      	movs	r1, #128	@ 0x80
 8001c7e:	0409      	lsls	r1, r1, #16
 8001c80:	4311      	orrs	r1, r2
 8001c82:	00c2      	lsls	r2, r0, #3
 8001c84:	4690      	mov	r8, r2
 8001c86:	4acf      	ldr	r2, [pc, #828]	@ (8001fc4 <__aeabi_ddiv+0x380>)
 8001c88:	4689      	mov	r9, r1
 8001c8a:	4692      	mov	sl, r2
 8001c8c:	449a      	add	sl, r3
 8001c8e:	2300      	movs	r3, #0
 8001c90:	2400      	movs	r4, #0
 8001c92:	9303      	str	r3, [sp, #12]
 8001c94:	9e00      	ldr	r6, [sp, #0]
 8001c96:	9f01      	ldr	r7, [sp, #4]
 8001c98:	033b      	lsls	r3, r7, #12
 8001c9a:	0b1b      	lsrs	r3, r3, #12
 8001c9c:	469b      	mov	fp, r3
 8001c9e:	007b      	lsls	r3, r7, #1
 8001ca0:	0030      	movs	r0, r6
 8001ca2:	0d5b      	lsrs	r3, r3, #21
 8001ca4:	0ffd      	lsrs	r5, r7, #31
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d100      	bne.n	8001cac <__aeabi_ddiv+0x68>
 8001caa:	e128      	b.n	8001efe <__aeabi_ddiv+0x2ba>
 8001cac:	4ac4      	ldr	r2, [pc, #784]	@ (8001fc0 <__aeabi_ddiv+0x37c>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d100      	bne.n	8001cb4 <__aeabi_ddiv+0x70>
 8001cb2:	e177      	b.n	8001fa4 <__aeabi_ddiv+0x360>
 8001cb4:	4659      	mov	r1, fp
 8001cb6:	0f72      	lsrs	r2, r6, #29
 8001cb8:	00c9      	lsls	r1, r1, #3
 8001cba:	430a      	orrs	r2, r1
 8001cbc:	2180      	movs	r1, #128	@ 0x80
 8001cbe:	0409      	lsls	r1, r1, #16
 8001cc0:	4311      	orrs	r1, r2
 8001cc2:	468b      	mov	fp, r1
 8001cc4:	49bf      	ldr	r1, [pc, #764]	@ (8001fc4 <__aeabi_ddiv+0x380>)
 8001cc6:	00f2      	lsls	r2, r6, #3
 8001cc8:	468c      	mov	ip, r1
 8001cca:	4651      	mov	r1, sl
 8001ccc:	4463      	add	r3, ip
 8001cce:	1acb      	subs	r3, r1, r3
 8001cd0:	469a      	mov	sl, r3
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	9e02      	ldr	r6, [sp, #8]
 8001cd6:	406e      	eors	r6, r5
 8001cd8:	2c0f      	cmp	r4, #15
 8001cda:	d827      	bhi.n	8001d2c <__aeabi_ddiv+0xe8>
 8001cdc:	49ba      	ldr	r1, [pc, #744]	@ (8001fc8 <__aeabi_ddiv+0x384>)
 8001cde:	00a4      	lsls	r4, r4, #2
 8001ce0:	5909      	ldr	r1, [r1, r4]
 8001ce2:	468f      	mov	pc, r1
 8001ce4:	46cb      	mov	fp, r9
 8001ce6:	4642      	mov	r2, r8
 8001ce8:	9e02      	ldr	r6, [sp, #8]
 8001cea:	9b03      	ldr	r3, [sp, #12]
 8001cec:	2b02      	cmp	r3, #2
 8001cee:	d016      	beq.n	8001d1e <__aeabi_ddiv+0xda>
 8001cf0:	2b03      	cmp	r3, #3
 8001cf2:	d100      	bne.n	8001cf6 <__aeabi_ddiv+0xb2>
 8001cf4:	e2a6      	b.n	8002244 <__aeabi_ddiv+0x600>
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d000      	beq.n	8001cfc <__aeabi_ddiv+0xb8>
 8001cfa:	e0df      	b.n	8001ebc <__aeabi_ddiv+0x278>
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	2300      	movs	r3, #0
 8001d00:	2400      	movs	r4, #0
 8001d02:	4690      	mov	r8, r2
 8001d04:	051b      	lsls	r3, r3, #20
 8001d06:	4323      	orrs	r3, r4
 8001d08:	07f6      	lsls	r6, r6, #31
 8001d0a:	4333      	orrs	r3, r6
 8001d0c:	4640      	mov	r0, r8
 8001d0e:	0019      	movs	r1, r3
 8001d10:	b007      	add	sp, #28
 8001d12:	bcf0      	pop	{r4, r5, r6, r7}
 8001d14:	46bb      	mov	fp, r7
 8001d16:	46b2      	mov	sl, r6
 8001d18:	46a9      	mov	r9, r5
 8001d1a:	46a0      	mov	r8, r4
 8001d1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d1e:	2200      	movs	r2, #0
 8001d20:	2400      	movs	r4, #0
 8001d22:	4690      	mov	r8, r2
 8001d24:	4ba6      	ldr	r3, [pc, #664]	@ (8001fc0 <__aeabi_ddiv+0x37c>)
 8001d26:	e7ed      	b.n	8001d04 <__aeabi_ddiv+0xc0>
 8001d28:	002e      	movs	r6, r5
 8001d2a:	e7df      	b.n	8001cec <__aeabi_ddiv+0xa8>
 8001d2c:	45cb      	cmp	fp, r9
 8001d2e:	d200      	bcs.n	8001d32 <__aeabi_ddiv+0xee>
 8001d30:	e1d4      	b.n	80020dc <__aeabi_ddiv+0x498>
 8001d32:	d100      	bne.n	8001d36 <__aeabi_ddiv+0xf2>
 8001d34:	e1cf      	b.n	80020d6 <__aeabi_ddiv+0x492>
 8001d36:	2301      	movs	r3, #1
 8001d38:	425b      	negs	r3, r3
 8001d3a:	469c      	mov	ip, r3
 8001d3c:	4644      	mov	r4, r8
 8001d3e:	4648      	mov	r0, r9
 8001d40:	2700      	movs	r7, #0
 8001d42:	44e2      	add	sl, ip
 8001d44:	465b      	mov	r3, fp
 8001d46:	0e15      	lsrs	r5, r2, #24
 8001d48:	021b      	lsls	r3, r3, #8
 8001d4a:	431d      	orrs	r5, r3
 8001d4c:	0c19      	lsrs	r1, r3, #16
 8001d4e:	042b      	lsls	r3, r5, #16
 8001d50:	0212      	lsls	r2, r2, #8
 8001d52:	9500      	str	r5, [sp, #0]
 8001d54:	0c1d      	lsrs	r5, r3, #16
 8001d56:	4691      	mov	r9, r2
 8001d58:	9102      	str	r1, [sp, #8]
 8001d5a:	9503      	str	r5, [sp, #12]
 8001d5c:	f7fe fa76 	bl	800024c <__aeabi_uidivmod>
 8001d60:	0002      	movs	r2, r0
 8001d62:	436a      	muls	r2, r5
 8001d64:	040b      	lsls	r3, r1, #16
 8001d66:	0c21      	lsrs	r1, r4, #16
 8001d68:	4680      	mov	r8, r0
 8001d6a:	4319      	orrs	r1, r3
 8001d6c:	428a      	cmp	r2, r1
 8001d6e:	d909      	bls.n	8001d84 <__aeabi_ddiv+0x140>
 8001d70:	9d00      	ldr	r5, [sp, #0]
 8001d72:	2301      	movs	r3, #1
 8001d74:	46ac      	mov	ip, r5
 8001d76:	425b      	negs	r3, r3
 8001d78:	4461      	add	r1, ip
 8001d7a:	469c      	mov	ip, r3
 8001d7c:	44e0      	add	r8, ip
 8001d7e:	428d      	cmp	r5, r1
 8001d80:	d800      	bhi.n	8001d84 <__aeabi_ddiv+0x140>
 8001d82:	e1fb      	b.n	800217c <__aeabi_ddiv+0x538>
 8001d84:	1a88      	subs	r0, r1, r2
 8001d86:	9902      	ldr	r1, [sp, #8]
 8001d88:	f7fe fa60 	bl	800024c <__aeabi_uidivmod>
 8001d8c:	9a03      	ldr	r2, [sp, #12]
 8001d8e:	0424      	lsls	r4, r4, #16
 8001d90:	4342      	muls	r2, r0
 8001d92:	0409      	lsls	r1, r1, #16
 8001d94:	0c24      	lsrs	r4, r4, #16
 8001d96:	0003      	movs	r3, r0
 8001d98:	430c      	orrs	r4, r1
 8001d9a:	42a2      	cmp	r2, r4
 8001d9c:	d906      	bls.n	8001dac <__aeabi_ddiv+0x168>
 8001d9e:	9900      	ldr	r1, [sp, #0]
 8001da0:	3b01      	subs	r3, #1
 8001da2:	468c      	mov	ip, r1
 8001da4:	4464      	add	r4, ip
 8001da6:	42a1      	cmp	r1, r4
 8001da8:	d800      	bhi.n	8001dac <__aeabi_ddiv+0x168>
 8001daa:	e1e1      	b.n	8002170 <__aeabi_ddiv+0x52c>
 8001dac:	1aa0      	subs	r0, r4, r2
 8001dae:	4642      	mov	r2, r8
 8001db0:	0412      	lsls	r2, r2, #16
 8001db2:	431a      	orrs	r2, r3
 8001db4:	4693      	mov	fp, r2
 8001db6:	464b      	mov	r3, r9
 8001db8:	4659      	mov	r1, fp
 8001dba:	0c1b      	lsrs	r3, r3, #16
 8001dbc:	001d      	movs	r5, r3
 8001dbe:	9304      	str	r3, [sp, #16]
 8001dc0:	040b      	lsls	r3, r1, #16
 8001dc2:	4649      	mov	r1, r9
 8001dc4:	0409      	lsls	r1, r1, #16
 8001dc6:	0c09      	lsrs	r1, r1, #16
 8001dc8:	000c      	movs	r4, r1
 8001dca:	0c1b      	lsrs	r3, r3, #16
 8001dcc:	435c      	muls	r4, r3
 8001dce:	0c12      	lsrs	r2, r2, #16
 8001dd0:	436b      	muls	r3, r5
 8001dd2:	4688      	mov	r8, r1
 8001dd4:	4351      	muls	r1, r2
 8001dd6:	436a      	muls	r2, r5
 8001dd8:	0c25      	lsrs	r5, r4, #16
 8001dda:	46ac      	mov	ip, r5
 8001ddc:	185b      	adds	r3, r3, r1
 8001dde:	4463      	add	r3, ip
 8001de0:	4299      	cmp	r1, r3
 8001de2:	d903      	bls.n	8001dec <__aeabi_ddiv+0x1a8>
 8001de4:	2180      	movs	r1, #128	@ 0x80
 8001de6:	0249      	lsls	r1, r1, #9
 8001de8:	468c      	mov	ip, r1
 8001dea:	4462      	add	r2, ip
 8001dec:	0c19      	lsrs	r1, r3, #16
 8001dee:	0424      	lsls	r4, r4, #16
 8001df0:	041b      	lsls	r3, r3, #16
 8001df2:	0c24      	lsrs	r4, r4, #16
 8001df4:	188a      	adds	r2, r1, r2
 8001df6:	191c      	adds	r4, r3, r4
 8001df8:	4290      	cmp	r0, r2
 8001dfa:	d302      	bcc.n	8001e02 <__aeabi_ddiv+0x1be>
 8001dfc:	d116      	bne.n	8001e2c <__aeabi_ddiv+0x1e8>
 8001dfe:	42a7      	cmp	r7, r4
 8001e00:	d214      	bcs.n	8001e2c <__aeabi_ddiv+0x1e8>
 8001e02:	465b      	mov	r3, fp
 8001e04:	9d00      	ldr	r5, [sp, #0]
 8001e06:	3b01      	subs	r3, #1
 8001e08:	444f      	add	r7, r9
 8001e0a:	9305      	str	r3, [sp, #20]
 8001e0c:	454f      	cmp	r7, r9
 8001e0e:	419b      	sbcs	r3, r3
 8001e10:	46ac      	mov	ip, r5
 8001e12:	425b      	negs	r3, r3
 8001e14:	4463      	add	r3, ip
 8001e16:	18c0      	adds	r0, r0, r3
 8001e18:	4285      	cmp	r5, r0
 8001e1a:	d300      	bcc.n	8001e1e <__aeabi_ddiv+0x1da>
 8001e1c:	e1a1      	b.n	8002162 <__aeabi_ddiv+0x51e>
 8001e1e:	4282      	cmp	r2, r0
 8001e20:	d900      	bls.n	8001e24 <__aeabi_ddiv+0x1e0>
 8001e22:	e1f6      	b.n	8002212 <__aeabi_ddiv+0x5ce>
 8001e24:	d100      	bne.n	8001e28 <__aeabi_ddiv+0x1e4>
 8001e26:	e1f1      	b.n	800220c <__aeabi_ddiv+0x5c8>
 8001e28:	9b05      	ldr	r3, [sp, #20]
 8001e2a:	469b      	mov	fp, r3
 8001e2c:	1b3c      	subs	r4, r7, r4
 8001e2e:	42a7      	cmp	r7, r4
 8001e30:	41bf      	sbcs	r7, r7
 8001e32:	9d00      	ldr	r5, [sp, #0]
 8001e34:	1a80      	subs	r0, r0, r2
 8001e36:	427f      	negs	r7, r7
 8001e38:	1bc0      	subs	r0, r0, r7
 8001e3a:	4285      	cmp	r5, r0
 8001e3c:	d100      	bne.n	8001e40 <__aeabi_ddiv+0x1fc>
 8001e3e:	e1d0      	b.n	80021e2 <__aeabi_ddiv+0x59e>
 8001e40:	9902      	ldr	r1, [sp, #8]
 8001e42:	f7fe fa03 	bl	800024c <__aeabi_uidivmod>
 8001e46:	9a03      	ldr	r2, [sp, #12]
 8001e48:	040b      	lsls	r3, r1, #16
 8001e4a:	4342      	muls	r2, r0
 8001e4c:	0c21      	lsrs	r1, r4, #16
 8001e4e:	0007      	movs	r7, r0
 8001e50:	4319      	orrs	r1, r3
 8001e52:	428a      	cmp	r2, r1
 8001e54:	d900      	bls.n	8001e58 <__aeabi_ddiv+0x214>
 8001e56:	e178      	b.n	800214a <__aeabi_ddiv+0x506>
 8001e58:	1a88      	subs	r0, r1, r2
 8001e5a:	9902      	ldr	r1, [sp, #8]
 8001e5c:	f7fe f9f6 	bl	800024c <__aeabi_uidivmod>
 8001e60:	9a03      	ldr	r2, [sp, #12]
 8001e62:	0424      	lsls	r4, r4, #16
 8001e64:	4342      	muls	r2, r0
 8001e66:	0409      	lsls	r1, r1, #16
 8001e68:	0c24      	lsrs	r4, r4, #16
 8001e6a:	0003      	movs	r3, r0
 8001e6c:	430c      	orrs	r4, r1
 8001e6e:	42a2      	cmp	r2, r4
 8001e70:	d900      	bls.n	8001e74 <__aeabi_ddiv+0x230>
 8001e72:	e15d      	b.n	8002130 <__aeabi_ddiv+0x4ec>
 8001e74:	4641      	mov	r1, r8
 8001e76:	1aa4      	subs	r4, r4, r2
 8001e78:	043a      	lsls	r2, r7, #16
 8001e7a:	431a      	orrs	r2, r3
 8001e7c:	9d04      	ldr	r5, [sp, #16]
 8001e7e:	0413      	lsls	r3, r2, #16
 8001e80:	0c1b      	lsrs	r3, r3, #16
 8001e82:	4359      	muls	r1, r3
 8001e84:	4647      	mov	r7, r8
 8001e86:	436b      	muls	r3, r5
 8001e88:	469c      	mov	ip, r3
 8001e8a:	0c10      	lsrs	r0, r2, #16
 8001e8c:	4347      	muls	r7, r0
 8001e8e:	0c0b      	lsrs	r3, r1, #16
 8001e90:	44bc      	add	ip, r7
 8001e92:	4463      	add	r3, ip
 8001e94:	4368      	muls	r0, r5
 8001e96:	429f      	cmp	r7, r3
 8001e98:	d903      	bls.n	8001ea2 <__aeabi_ddiv+0x25e>
 8001e9a:	2580      	movs	r5, #128	@ 0x80
 8001e9c:	026d      	lsls	r5, r5, #9
 8001e9e:	46ac      	mov	ip, r5
 8001ea0:	4460      	add	r0, ip
 8001ea2:	0c1f      	lsrs	r7, r3, #16
 8001ea4:	0409      	lsls	r1, r1, #16
 8001ea6:	041b      	lsls	r3, r3, #16
 8001ea8:	0c09      	lsrs	r1, r1, #16
 8001eaa:	183f      	adds	r7, r7, r0
 8001eac:	185b      	adds	r3, r3, r1
 8001eae:	42bc      	cmp	r4, r7
 8001eb0:	d200      	bcs.n	8001eb4 <__aeabi_ddiv+0x270>
 8001eb2:	e102      	b.n	80020ba <__aeabi_ddiv+0x476>
 8001eb4:	d100      	bne.n	8001eb8 <__aeabi_ddiv+0x274>
 8001eb6:	e0fd      	b.n	80020b4 <__aeabi_ddiv+0x470>
 8001eb8:	2301      	movs	r3, #1
 8001eba:	431a      	orrs	r2, r3
 8001ebc:	4b43      	ldr	r3, [pc, #268]	@ (8001fcc <__aeabi_ddiv+0x388>)
 8001ebe:	4453      	add	r3, sl
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	dc00      	bgt.n	8001ec6 <__aeabi_ddiv+0x282>
 8001ec4:	e0ae      	b.n	8002024 <__aeabi_ddiv+0x3e0>
 8001ec6:	0751      	lsls	r1, r2, #29
 8001ec8:	d000      	beq.n	8001ecc <__aeabi_ddiv+0x288>
 8001eca:	e198      	b.n	80021fe <__aeabi_ddiv+0x5ba>
 8001ecc:	4659      	mov	r1, fp
 8001ece:	01c9      	lsls	r1, r1, #7
 8001ed0:	d506      	bpl.n	8001ee0 <__aeabi_ddiv+0x29c>
 8001ed2:	4659      	mov	r1, fp
 8001ed4:	4b3e      	ldr	r3, [pc, #248]	@ (8001fd0 <__aeabi_ddiv+0x38c>)
 8001ed6:	4019      	ands	r1, r3
 8001ed8:	2380      	movs	r3, #128	@ 0x80
 8001eda:	468b      	mov	fp, r1
 8001edc:	00db      	lsls	r3, r3, #3
 8001ede:	4453      	add	r3, sl
 8001ee0:	493c      	ldr	r1, [pc, #240]	@ (8001fd4 <__aeabi_ddiv+0x390>)
 8001ee2:	428b      	cmp	r3, r1
 8001ee4:	dd00      	ble.n	8001ee8 <__aeabi_ddiv+0x2a4>
 8001ee6:	e71a      	b.n	8001d1e <__aeabi_ddiv+0xda>
 8001ee8:	4659      	mov	r1, fp
 8001eea:	08d2      	lsrs	r2, r2, #3
 8001eec:	0749      	lsls	r1, r1, #29
 8001eee:	4311      	orrs	r1, r2
 8001ef0:	465a      	mov	r2, fp
 8001ef2:	055b      	lsls	r3, r3, #21
 8001ef4:	0254      	lsls	r4, r2, #9
 8001ef6:	4688      	mov	r8, r1
 8001ef8:	0b24      	lsrs	r4, r4, #12
 8001efa:	0d5b      	lsrs	r3, r3, #21
 8001efc:	e702      	b.n	8001d04 <__aeabi_ddiv+0xc0>
 8001efe:	465a      	mov	r2, fp
 8001f00:	9b00      	ldr	r3, [sp, #0]
 8001f02:	431a      	orrs	r2, r3
 8001f04:	d100      	bne.n	8001f08 <__aeabi_ddiv+0x2c4>
 8001f06:	e07e      	b.n	8002006 <__aeabi_ddiv+0x3c2>
 8001f08:	465b      	mov	r3, fp
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d100      	bne.n	8001f10 <__aeabi_ddiv+0x2cc>
 8001f0e:	e100      	b.n	8002112 <__aeabi_ddiv+0x4ce>
 8001f10:	4658      	mov	r0, fp
 8001f12:	f001 fa73 	bl	80033fc <__clzsi2>
 8001f16:	0002      	movs	r2, r0
 8001f18:	0003      	movs	r3, r0
 8001f1a:	3a0b      	subs	r2, #11
 8001f1c:	271d      	movs	r7, #29
 8001f1e:	9e00      	ldr	r6, [sp, #0]
 8001f20:	1aba      	subs	r2, r7, r2
 8001f22:	0019      	movs	r1, r3
 8001f24:	4658      	mov	r0, fp
 8001f26:	40d6      	lsrs	r6, r2
 8001f28:	3908      	subs	r1, #8
 8001f2a:	4088      	lsls	r0, r1
 8001f2c:	0032      	movs	r2, r6
 8001f2e:	4302      	orrs	r2, r0
 8001f30:	4693      	mov	fp, r2
 8001f32:	9a00      	ldr	r2, [sp, #0]
 8001f34:	408a      	lsls	r2, r1
 8001f36:	4928      	ldr	r1, [pc, #160]	@ (8001fd8 <__aeabi_ddiv+0x394>)
 8001f38:	4453      	add	r3, sl
 8001f3a:	468a      	mov	sl, r1
 8001f3c:	449a      	add	sl, r3
 8001f3e:	2300      	movs	r3, #0
 8001f40:	e6c8      	b.n	8001cd4 <__aeabi_ddiv+0x90>
 8001f42:	465b      	mov	r3, fp
 8001f44:	4303      	orrs	r3, r0
 8001f46:	4699      	mov	r9, r3
 8001f48:	d056      	beq.n	8001ff8 <__aeabi_ddiv+0x3b4>
 8001f4a:	465b      	mov	r3, fp
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d100      	bne.n	8001f52 <__aeabi_ddiv+0x30e>
 8001f50:	e0cd      	b.n	80020ee <__aeabi_ddiv+0x4aa>
 8001f52:	4658      	mov	r0, fp
 8001f54:	f001 fa52 	bl	80033fc <__clzsi2>
 8001f58:	230b      	movs	r3, #11
 8001f5a:	425b      	negs	r3, r3
 8001f5c:	469c      	mov	ip, r3
 8001f5e:	0002      	movs	r2, r0
 8001f60:	4484      	add	ip, r0
 8001f62:	4666      	mov	r6, ip
 8001f64:	231d      	movs	r3, #29
 8001f66:	1b9b      	subs	r3, r3, r6
 8001f68:	0026      	movs	r6, r4
 8001f6a:	0011      	movs	r1, r2
 8001f6c:	4658      	mov	r0, fp
 8001f6e:	40de      	lsrs	r6, r3
 8001f70:	3908      	subs	r1, #8
 8001f72:	4088      	lsls	r0, r1
 8001f74:	0033      	movs	r3, r6
 8001f76:	4303      	orrs	r3, r0
 8001f78:	4699      	mov	r9, r3
 8001f7a:	0023      	movs	r3, r4
 8001f7c:	408b      	lsls	r3, r1
 8001f7e:	4698      	mov	r8, r3
 8001f80:	4b16      	ldr	r3, [pc, #88]	@ (8001fdc <__aeabi_ddiv+0x398>)
 8001f82:	2400      	movs	r4, #0
 8001f84:	1a9b      	subs	r3, r3, r2
 8001f86:	469a      	mov	sl, r3
 8001f88:	2300      	movs	r3, #0
 8001f8a:	9303      	str	r3, [sp, #12]
 8001f8c:	e682      	b.n	8001c94 <__aeabi_ddiv+0x50>
 8001f8e:	465a      	mov	r2, fp
 8001f90:	4302      	orrs	r2, r0
 8001f92:	4691      	mov	r9, r2
 8001f94:	d12a      	bne.n	8001fec <__aeabi_ddiv+0x3a8>
 8001f96:	2200      	movs	r2, #0
 8001f98:	469a      	mov	sl, r3
 8001f9a:	2302      	movs	r3, #2
 8001f9c:	4690      	mov	r8, r2
 8001f9e:	2408      	movs	r4, #8
 8001fa0:	9303      	str	r3, [sp, #12]
 8001fa2:	e677      	b.n	8001c94 <__aeabi_ddiv+0x50>
 8001fa4:	465a      	mov	r2, fp
 8001fa6:	9b00      	ldr	r3, [sp, #0]
 8001fa8:	431a      	orrs	r2, r3
 8001faa:	4b0d      	ldr	r3, [pc, #52]	@ (8001fe0 <__aeabi_ddiv+0x39c>)
 8001fac:	469c      	mov	ip, r3
 8001fae:	44e2      	add	sl, ip
 8001fb0:	2a00      	cmp	r2, #0
 8001fb2:	d117      	bne.n	8001fe4 <__aeabi_ddiv+0x3a0>
 8001fb4:	2302      	movs	r3, #2
 8001fb6:	431c      	orrs	r4, r3
 8001fb8:	2300      	movs	r3, #0
 8001fba:	469b      	mov	fp, r3
 8001fbc:	3302      	adds	r3, #2
 8001fbe:	e689      	b.n	8001cd4 <__aeabi_ddiv+0x90>
 8001fc0:	000007ff 	.word	0x000007ff
 8001fc4:	fffffc01 	.word	0xfffffc01
 8001fc8:	0800fb18 	.word	0x0800fb18
 8001fcc:	000003ff 	.word	0x000003ff
 8001fd0:	feffffff 	.word	0xfeffffff
 8001fd4:	000007fe 	.word	0x000007fe
 8001fd8:	000003f3 	.word	0x000003f3
 8001fdc:	fffffc0d 	.word	0xfffffc0d
 8001fe0:	fffff801 	.word	0xfffff801
 8001fe4:	2303      	movs	r3, #3
 8001fe6:	0032      	movs	r2, r6
 8001fe8:	431c      	orrs	r4, r3
 8001fea:	e673      	b.n	8001cd4 <__aeabi_ddiv+0x90>
 8001fec:	469a      	mov	sl, r3
 8001fee:	2303      	movs	r3, #3
 8001ff0:	46d9      	mov	r9, fp
 8001ff2:	240c      	movs	r4, #12
 8001ff4:	9303      	str	r3, [sp, #12]
 8001ff6:	e64d      	b.n	8001c94 <__aeabi_ddiv+0x50>
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	4698      	mov	r8, r3
 8001ffc:	469a      	mov	sl, r3
 8001ffe:	3301      	adds	r3, #1
 8002000:	2404      	movs	r4, #4
 8002002:	9303      	str	r3, [sp, #12]
 8002004:	e646      	b.n	8001c94 <__aeabi_ddiv+0x50>
 8002006:	2301      	movs	r3, #1
 8002008:	431c      	orrs	r4, r3
 800200a:	2300      	movs	r3, #0
 800200c:	469b      	mov	fp, r3
 800200e:	3301      	adds	r3, #1
 8002010:	e660      	b.n	8001cd4 <__aeabi_ddiv+0x90>
 8002012:	2300      	movs	r3, #0
 8002014:	2480      	movs	r4, #128	@ 0x80
 8002016:	4698      	mov	r8, r3
 8002018:	2600      	movs	r6, #0
 800201a:	4b92      	ldr	r3, [pc, #584]	@ (8002264 <__aeabi_ddiv+0x620>)
 800201c:	0324      	lsls	r4, r4, #12
 800201e:	e671      	b.n	8001d04 <__aeabi_ddiv+0xc0>
 8002020:	2201      	movs	r2, #1
 8002022:	4252      	negs	r2, r2
 8002024:	2101      	movs	r1, #1
 8002026:	1ac9      	subs	r1, r1, r3
 8002028:	2938      	cmp	r1, #56	@ 0x38
 800202a:	dd00      	ble.n	800202e <__aeabi_ddiv+0x3ea>
 800202c:	e666      	b.n	8001cfc <__aeabi_ddiv+0xb8>
 800202e:	291f      	cmp	r1, #31
 8002030:	dc00      	bgt.n	8002034 <__aeabi_ddiv+0x3f0>
 8002032:	e0ab      	b.n	800218c <__aeabi_ddiv+0x548>
 8002034:	201f      	movs	r0, #31
 8002036:	4240      	negs	r0, r0
 8002038:	1ac3      	subs	r3, r0, r3
 800203a:	4658      	mov	r0, fp
 800203c:	40d8      	lsrs	r0, r3
 800203e:	0003      	movs	r3, r0
 8002040:	2920      	cmp	r1, #32
 8002042:	d004      	beq.n	800204e <__aeabi_ddiv+0x40a>
 8002044:	4658      	mov	r0, fp
 8002046:	4988      	ldr	r1, [pc, #544]	@ (8002268 <__aeabi_ddiv+0x624>)
 8002048:	4451      	add	r1, sl
 800204a:	4088      	lsls	r0, r1
 800204c:	4302      	orrs	r2, r0
 800204e:	1e51      	subs	r1, r2, #1
 8002050:	418a      	sbcs	r2, r1
 8002052:	431a      	orrs	r2, r3
 8002054:	2307      	movs	r3, #7
 8002056:	0019      	movs	r1, r3
 8002058:	2400      	movs	r4, #0
 800205a:	4011      	ands	r1, r2
 800205c:	4213      	tst	r3, r2
 800205e:	d00c      	beq.n	800207a <__aeabi_ddiv+0x436>
 8002060:	230f      	movs	r3, #15
 8002062:	4013      	ands	r3, r2
 8002064:	2b04      	cmp	r3, #4
 8002066:	d100      	bne.n	800206a <__aeabi_ddiv+0x426>
 8002068:	e0f9      	b.n	800225e <__aeabi_ddiv+0x61a>
 800206a:	1d11      	adds	r1, r2, #4
 800206c:	4291      	cmp	r1, r2
 800206e:	419b      	sbcs	r3, r3
 8002070:	000a      	movs	r2, r1
 8002072:	425b      	negs	r3, r3
 8002074:	0759      	lsls	r1, r3, #29
 8002076:	025b      	lsls	r3, r3, #9
 8002078:	0b1c      	lsrs	r4, r3, #12
 800207a:	08d2      	lsrs	r2, r2, #3
 800207c:	430a      	orrs	r2, r1
 800207e:	4690      	mov	r8, r2
 8002080:	2300      	movs	r3, #0
 8002082:	e63f      	b.n	8001d04 <__aeabi_ddiv+0xc0>
 8002084:	2480      	movs	r4, #128	@ 0x80
 8002086:	464b      	mov	r3, r9
 8002088:	0324      	lsls	r4, r4, #12
 800208a:	4223      	tst	r3, r4
 800208c:	d009      	beq.n	80020a2 <__aeabi_ddiv+0x45e>
 800208e:	465b      	mov	r3, fp
 8002090:	4223      	tst	r3, r4
 8002092:	d106      	bne.n	80020a2 <__aeabi_ddiv+0x45e>
 8002094:	431c      	orrs	r4, r3
 8002096:	0324      	lsls	r4, r4, #12
 8002098:	002e      	movs	r6, r5
 800209a:	4690      	mov	r8, r2
 800209c:	4b71      	ldr	r3, [pc, #452]	@ (8002264 <__aeabi_ddiv+0x620>)
 800209e:	0b24      	lsrs	r4, r4, #12
 80020a0:	e630      	b.n	8001d04 <__aeabi_ddiv+0xc0>
 80020a2:	2480      	movs	r4, #128	@ 0x80
 80020a4:	464b      	mov	r3, r9
 80020a6:	0324      	lsls	r4, r4, #12
 80020a8:	431c      	orrs	r4, r3
 80020aa:	0324      	lsls	r4, r4, #12
 80020ac:	9e02      	ldr	r6, [sp, #8]
 80020ae:	4b6d      	ldr	r3, [pc, #436]	@ (8002264 <__aeabi_ddiv+0x620>)
 80020b0:	0b24      	lsrs	r4, r4, #12
 80020b2:	e627      	b.n	8001d04 <__aeabi_ddiv+0xc0>
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d100      	bne.n	80020ba <__aeabi_ddiv+0x476>
 80020b8:	e700      	b.n	8001ebc <__aeabi_ddiv+0x278>
 80020ba:	9800      	ldr	r0, [sp, #0]
 80020bc:	1e51      	subs	r1, r2, #1
 80020be:	4684      	mov	ip, r0
 80020c0:	4464      	add	r4, ip
 80020c2:	4284      	cmp	r4, r0
 80020c4:	d200      	bcs.n	80020c8 <__aeabi_ddiv+0x484>
 80020c6:	e084      	b.n	80021d2 <__aeabi_ddiv+0x58e>
 80020c8:	42bc      	cmp	r4, r7
 80020ca:	d200      	bcs.n	80020ce <__aeabi_ddiv+0x48a>
 80020cc:	e0ae      	b.n	800222c <__aeabi_ddiv+0x5e8>
 80020ce:	d100      	bne.n	80020d2 <__aeabi_ddiv+0x48e>
 80020d0:	e0c1      	b.n	8002256 <__aeabi_ddiv+0x612>
 80020d2:	000a      	movs	r2, r1
 80020d4:	e6f0      	b.n	8001eb8 <__aeabi_ddiv+0x274>
 80020d6:	4542      	cmp	r2, r8
 80020d8:	d900      	bls.n	80020dc <__aeabi_ddiv+0x498>
 80020da:	e62c      	b.n	8001d36 <__aeabi_ddiv+0xf2>
 80020dc:	464b      	mov	r3, r9
 80020de:	07dc      	lsls	r4, r3, #31
 80020e0:	0858      	lsrs	r0, r3, #1
 80020e2:	4643      	mov	r3, r8
 80020e4:	085b      	lsrs	r3, r3, #1
 80020e6:	431c      	orrs	r4, r3
 80020e8:	4643      	mov	r3, r8
 80020ea:	07df      	lsls	r7, r3, #31
 80020ec:	e62a      	b.n	8001d44 <__aeabi_ddiv+0x100>
 80020ee:	f001 f985 	bl	80033fc <__clzsi2>
 80020f2:	2315      	movs	r3, #21
 80020f4:	469c      	mov	ip, r3
 80020f6:	4484      	add	ip, r0
 80020f8:	0002      	movs	r2, r0
 80020fa:	4663      	mov	r3, ip
 80020fc:	3220      	adds	r2, #32
 80020fe:	2b1c      	cmp	r3, #28
 8002100:	dc00      	bgt.n	8002104 <__aeabi_ddiv+0x4c0>
 8002102:	e72e      	b.n	8001f62 <__aeabi_ddiv+0x31e>
 8002104:	0023      	movs	r3, r4
 8002106:	3808      	subs	r0, #8
 8002108:	4083      	lsls	r3, r0
 800210a:	4699      	mov	r9, r3
 800210c:	2300      	movs	r3, #0
 800210e:	4698      	mov	r8, r3
 8002110:	e736      	b.n	8001f80 <__aeabi_ddiv+0x33c>
 8002112:	f001 f973 	bl	80033fc <__clzsi2>
 8002116:	0002      	movs	r2, r0
 8002118:	0003      	movs	r3, r0
 800211a:	3215      	adds	r2, #21
 800211c:	3320      	adds	r3, #32
 800211e:	2a1c      	cmp	r2, #28
 8002120:	dc00      	bgt.n	8002124 <__aeabi_ddiv+0x4e0>
 8002122:	e6fb      	b.n	8001f1c <__aeabi_ddiv+0x2d8>
 8002124:	9900      	ldr	r1, [sp, #0]
 8002126:	3808      	subs	r0, #8
 8002128:	4081      	lsls	r1, r0
 800212a:	2200      	movs	r2, #0
 800212c:	468b      	mov	fp, r1
 800212e:	e702      	b.n	8001f36 <__aeabi_ddiv+0x2f2>
 8002130:	9900      	ldr	r1, [sp, #0]
 8002132:	3b01      	subs	r3, #1
 8002134:	468c      	mov	ip, r1
 8002136:	4464      	add	r4, ip
 8002138:	42a1      	cmp	r1, r4
 800213a:	d900      	bls.n	800213e <__aeabi_ddiv+0x4fa>
 800213c:	e69a      	b.n	8001e74 <__aeabi_ddiv+0x230>
 800213e:	42a2      	cmp	r2, r4
 8002140:	d800      	bhi.n	8002144 <__aeabi_ddiv+0x500>
 8002142:	e697      	b.n	8001e74 <__aeabi_ddiv+0x230>
 8002144:	1e83      	subs	r3, r0, #2
 8002146:	4464      	add	r4, ip
 8002148:	e694      	b.n	8001e74 <__aeabi_ddiv+0x230>
 800214a:	46ac      	mov	ip, r5
 800214c:	4461      	add	r1, ip
 800214e:	3f01      	subs	r7, #1
 8002150:	428d      	cmp	r5, r1
 8002152:	d900      	bls.n	8002156 <__aeabi_ddiv+0x512>
 8002154:	e680      	b.n	8001e58 <__aeabi_ddiv+0x214>
 8002156:	428a      	cmp	r2, r1
 8002158:	d800      	bhi.n	800215c <__aeabi_ddiv+0x518>
 800215a:	e67d      	b.n	8001e58 <__aeabi_ddiv+0x214>
 800215c:	1e87      	subs	r7, r0, #2
 800215e:	4461      	add	r1, ip
 8002160:	e67a      	b.n	8001e58 <__aeabi_ddiv+0x214>
 8002162:	4285      	cmp	r5, r0
 8002164:	d000      	beq.n	8002168 <__aeabi_ddiv+0x524>
 8002166:	e65f      	b.n	8001e28 <__aeabi_ddiv+0x1e4>
 8002168:	45b9      	cmp	r9, r7
 800216a:	d900      	bls.n	800216e <__aeabi_ddiv+0x52a>
 800216c:	e65c      	b.n	8001e28 <__aeabi_ddiv+0x1e4>
 800216e:	e656      	b.n	8001e1e <__aeabi_ddiv+0x1da>
 8002170:	42a2      	cmp	r2, r4
 8002172:	d800      	bhi.n	8002176 <__aeabi_ddiv+0x532>
 8002174:	e61a      	b.n	8001dac <__aeabi_ddiv+0x168>
 8002176:	1e83      	subs	r3, r0, #2
 8002178:	4464      	add	r4, ip
 800217a:	e617      	b.n	8001dac <__aeabi_ddiv+0x168>
 800217c:	428a      	cmp	r2, r1
 800217e:	d800      	bhi.n	8002182 <__aeabi_ddiv+0x53e>
 8002180:	e600      	b.n	8001d84 <__aeabi_ddiv+0x140>
 8002182:	46ac      	mov	ip, r5
 8002184:	1e83      	subs	r3, r0, #2
 8002186:	4698      	mov	r8, r3
 8002188:	4461      	add	r1, ip
 800218a:	e5fb      	b.n	8001d84 <__aeabi_ddiv+0x140>
 800218c:	4837      	ldr	r0, [pc, #220]	@ (800226c <__aeabi_ddiv+0x628>)
 800218e:	0014      	movs	r4, r2
 8002190:	4450      	add	r0, sl
 8002192:	4082      	lsls	r2, r0
 8002194:	465b      	mov	r3, fp
 8002196:	0017      	movs	r7, r2
 8002198:	4083      	lsls	r3, r0
 800219a:	40cc      	lsrs	r4, r1
 800219c:	1e7a      	subs	r2, r7, #1
 800219e:	4197      	sbcs	r7, r2
 80021a0:	4323      	orrs	r3, r4
 80021a2:	433b      	orrs	r3, r7
 80021a4:	001a      	movs	r2, r3
 80021a6:	465b      	mov	r3, fp
 80021a8:	40cb      	lsrs	r3, r1
 80021aa:	0751      	lsls	r1, r2, #29
 80021ac:	d009      	beq.n	80021c2 <__aeabi_ddiv+0x57e>
 80021ae:	210f      	movs	r1, #15
 80021b0:	4011      	ands	r1, r2
 80021b2:	2904      	cmp	r1, #4
 80021b4:	d005      	beq.n	80021c2 <__aeabi_ddiv+0x57e>
 80021b6:	1d11      	adds	r1, r2, #4
 80021b8:	4291      	cmp	r1, r2
 80021ba:	4192      	sbcs	r2, r2
 80021bc:	4252      	negs	r2, r2
 80021be:	189b      	adds	r3, r3, r2
 80021c0:	000a      	movs	r2, r1
 80021c2:	0219      	lsls	r1, r3, #8
 80021c4:	d400      	bmi.n	80021c8 <__aeabi_ddiv+0x584>
 80021c6:	e755      	b.n	8002074 <__aeabi_ddiv+0x430>
 80021c8:	2200      	movs	r2, #0
 80021ca:	2301      	movs	r3, #1
 80021cc:	2400      	movs	r4, #0
 80021ce:	4690      	mov	r8, r2
 80021d0:	e598      	b.n	8001d04 <__aeabi_ddiv+0xc0>
 80021d2:	000a      	movs	r2, r1
 80021d4:	42bc      	cmp	r4, r7
 80021d6:	d000      	beq.n	80021da <__aeabi_ddiv+0x596>
 80021d8:	e66e      	b.n	8001eb8 <__aeabi_ddiv+0x274>
 80021da:	454b      	cmp	r3, r9
 80021dc:	d000      	beq.n	80021e0 <__aeabi_ddiv+0x59c>
 80021de:	e66b      	b.n	8001eb8 <__aeabi_ddiv+0x274>
 80021e0:	e66c      	b.n	8001ebc <__aeabi_ddiv+0x278>
 80021e2:	4b23      	ldr	r3, [pc, #140]	@ (8002270 <__aeabi_ddiv+0x62c>)
 80021e4:	4a23      	ldr	r2, [pc, #140]	@ (8002274 <__aeabi_ddiv+0x630>)
 80021e6:	4453      	add	r3, sl
 80021e8:	4592      	cmp	sl, r2
 80021ea:	da00      	bge.n	80021ee <__aeabi_ddiv+0x5aa>
 80021ec:	e718      	b.n	8002020 <__aeabi_ddiv+0x3dc>
 80021ee:	2101      	movs	r1, #1
 80021f0:	4249      	negs	r1, r1
 80021f2:	1d0a      	adds	r2, r1, #4
 80021f4:	428a      	cmp	r2, r1
 80021f6:	4189      	sbcs	r1, r1
 80021f8:	4249      	negs	r1, r1
 80021fa:	448b      	add	fp, r1
 80021fc:	e666      	b.n	8001ecc <__aeabi_ddiv+0x288>
 80021fe:	210f      	movs	r1, #15
 8002200:	4011      	ands	r1, r2
 8002202:	2904      	cmp	r1, #4
 8002204:	d100      	bne.n	8002208 <__aeabi_ddiv+0x5c4>
 8002206:	e661      	b.n	8001ecc <__aeabi_ddiv+0x288>
 8002208:	0011      	movs	r1, r2
 800220a:	e7f2      	b.n	80021f2 <__aeabi_ddiv+0x5ae>
 800220c:	42bc      	cmp	r4, r7
 800220e:	d800      	bhi.n	8002212 <__aeabi_ddiv+0x5ce>
 8002210:	e60a      	b.n	8001e28 <__aeabi_ddiv+0x1e4>
 8002212:	2302      	movs	r3, #2
 8002214:	425b      	negs	r3, r3
 8002216:	469c      	mov	ip, r3
 8002218:	9900      	ldr	r1, [sp, #0]
 800221a:	444f      	add	r7, r9
 800221c:	454f      	cmp	r7, r9
 800221e:	419b      	sbcs	r3, r3
 8002220:	44e3      	add	fp, ip
 8002222:	468c      	mov	ip, r1
 8002224:	425b      	negs	r3, r3
 8002226:	4463      	add	r3, ip
 8002228:	18c0      	adds	r0, r0, r3
 800222a:	e5ff      	b.n	8001e2c <__aeabi_ddiv+0x1e8>
 800222c:	4649      	mov	r1, r9
 800222e:	9d00      	ldr	r5, [sp, #0]
 8002230:	0048      	lsls	r0, r1, #1
 8002232:	4548      	cmp	r0, r9
 8002234:	4189      	sbcs	r1, r1
 8002236:	46ac      	mov	ip, r5
 8002238:	4249      	negs	r1, r1
 800223a:	4461      	add	r1, ip
 800223c:	4681      	mov	r9, r0
 800223e:	3a02      	subs	r2, #2
 8002240:	1864      	adds	r4, r4, r1
 8002242:	e7c7      	b.n	80021d4 <__aeabi_ddiv+0x590>
 8002244:	2480      	movs	r4, #128	@ 0x80
 8002246:	465b      	mov	r3, fp
 8002248:	0324      	lsls	r4, r4, #12
 800224a:	431c      	orrs	r4, r3
 800224c:	0324      	lsls	r4, r4, #12
 800224e:	4690      	mov	r8, r2
 8002250:	4b04      	ldr	r3, [pc, #16]	@ (8002264 <__aeabi_ddiv+0x620>)
 8002252:	0b24      	lsrs	r4, r4, #12
 8002254:	e556      	b.n	8001d04 <__aeabi_ddiv+0xc0>
 8002256:	4599      	cmp	r9, r3
 8002258:	d3e8      	bcc.n	800222c <__aeabi_ddiv+0x5e8>
 800225a:	000a      	movs	r2, r1
 800225c:	e7bd      	b.n	80021da <__aeabi_ddiv+0x596>
 800225e:	2300      	movs	r3, #0
 8002260:	e708      	b.n	8002074 <__aeabi_ddiv+0x430>
 8002262:	46c0      	nop			@ (mov r8, r8)
 8002264:	000007ff 	.word	0x000007ff
 8002268:	0000043e 	.word	0x0000043e
 800226c:	0000041e 	.word	0x0000041e
 8002270:	000003ff 	.word	0x000003ff
 8002274:	fffffc02 	.word	0xfffffc02

08002278 <__eqdf2>:
 8002278:	b5f0      	push	{r4, r5, r6, r7, lr}
 800227a:	4657      	mov	r7, sl
 800227c:	46de      	mov	lr, fp
 800227e:	464e      	mov	r6, r9
 8002280:	4645      	mov	r5, r8
 8002282:	b5e0      	push	{r5, r6, r7, lr}
 8002284:	000d      	movs	r5, r1
 8002286:	0004      	movs	r4, r0
 8002288:	0fe8      	lsrs	r0, r5, #31
 800228a:	4683      	mov	fp, r0
 800228c:	0309      	lsls	r1, r1, #12
 800228e:	0fd8      	lsrs	r0, r3, #31
 8002290:	0b09      	lsrs	r1, r1, #12
 8002292:	4682      	mov	sl, r0
 8002294:	4819      	ldr	r0, [pc, #100]	@ (80022fc <__eqdf2+0x84>)
 8002296:	468c      	mov	ip, r1
 8002298:	031f      	lsls	r7, r3, #12
 800229a:	0069      	lsls	r1, r5, #1
 800229c:	005e      	lsls	r6, r3, #1
 800229e:	0d49      	lsrs	r1, r1, #21
 80022a0:	0b3f      	lsrs	r7, r7, #12
 80022a2:	0d76      	lsrs	r6, r6, #21
 80022a4:	4281      	cmp	r1, r0
 80022a6:	d018      	beq.n	80022da <__eqdf2+0x62>
 80022a8:	4286      	cmp	r6, r0
 80022aa:	d00f      	beq.n	80022cc <__eqdf2+0x54>
 80022ac:	2001      	movs	r0, #1
 80022ae:	42b1      	cmp	r1, r6
 80022b0:	d10d      	bne.n	80022ce <__eqdf2+0x56>
 80022b2:	45bc      	cmp	ip, r7
 80022b4:	d10b      	bne.n	80022ce <__eqdf2+0x56>
 80022b6:	4294      	cmp	r4, r2
 80022b8:	d109      	bne.n	80022ce <__eqdf2+0x56>
 80022ba:	45d3      	cmp	fp, sl
 80022bc:	d01c      	beq.n	80022f8 <__eqdf2+0x80>
 80022be:	2900      	cmp	r1, #0
 80022c0:	d105      	bne.n	80022ce <__eqdf2+0x56>
 80022c2:	4660      	mov	r0, ip
 80022c4:	4320      	orrs	r0, r4
 80022c6:	1e43      	subs	r3, r0, #1
 80022c8:	4198      	sbcs	r0, r3
 80022ca:	e000      	b.n	80022ce <__eqdf2+0x56>
 80022cc:	2001      	movs	r0, #1
 80022ce:	bcf0      	pop	{r4, r5, r6, r7}
 80022d0:	46bb      	mov	fp, r7
 80022d2:	46b2      	mov	sl, r6
 80022d4:	46a9      	mov	r9, r5
 80022d6:	46a0      	mov	r8, r4
 80022d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022da:	2001      	movs	r0, #1
 80022dc:	428e      	cmp	r6, r1
 80022de:	d1f6      	bne.n	80022ce <__eqdf2+0x56>
 80022e0:	4661      	mov	r1, ip
 80022e2:	4339      	orrs	r1, r7
 80022e4:	000f      	movs	r7, r1
 80022e6:	4317      	orrs	r7, r2
 80022e8:	4327      	orrs	r7, r4
 80022ea:	d1f0      	bne.n	80022ce <__eqdf2+0x56>
 80022ec:	465b      	mov	r3, fp
 80022ee:	4652      	mov	r2, sl
 80022f0:	1a98      	subs	r0, r3, r2
 80022f2:	1e43      	subs	r3, r0, #1
 80022f4:	4198      	sbcs	r0, r3
 80022f6:	e7ea      	b.n	80022ce <__eqdf2+0x56>
 80022f8:	2000      	movs	r0, #0
 80022fa:	e7e8      	b.n	80022ce <__eqdf2+0x56>
 80022fc:	000007ff 	.word	0x000007ff

08002300 <__gedf2>:
 8002300:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002302:	4657      	mov	r7, sl
 8002304:	464e      	mov	r6, r9
 8002306:	4645      	mov	r5, r8
 8002308:	46de      	mov	lr, fp
 800230a:	b5e0      	push	{r5, r6, r7, lr}
 800230c:	000d      	movs	r5, r1
 800230e:	030f      	lsls	r7, r1, #12
 8002310:	0b39      	lsrs	r1, r7, #12
 8002312:	b083      	sub	sp, #12
 8002314:	0004      	movs	r4, r0
 8002316:	4680      	mov	r8, r0
 8002318:	9101      	str	r1, [sp, #4]
 800231a:	0058      	lsls	r0, r3, #1
 800231c:	0fe9      	lsrs	r1, r5, #31
 800231e:	4f31      	ldr	r7, [pc, #196]	@ (80023e4 <__gedf2+0xe4>)
 8002320:	0d40      	lsrs	r0, r0, #21
 8002322:	468c      	mov	ip, r1
 8002324:	006e      	lsls	r6, r5, #1
 8002326:	0319      	lsls	r1, r3, #12
 8002328:	4682      	mov	sl, r0
 800232a:	4691      	mov	r9, r2
 800232c:	0d76      	lsrs	r6, r6, #21
 800232e:	0b09      	lsrs	r1, r1, #12
 8002330:	0fd8      	lsrs	r0, r3, #31
 8002332:	42be      	cmp	r6, r7
 8002334:	d01f      	beq.n	8002376 <__gedf2+0x76>
 8002336:	45ba      	cmp	sl, r7
 8002338:	d00f      	beq.n	800235a <__gedf2+0x5a>
 800233a:	2e00      	cmp	r6, #0
 800233c:	d12f      	bne.n	800239e <__gedf2+0x9e>
 800233e:	4655      	mov	r5, sl
 8002340:	9e01      	ldr	r6, [sp, #4]
 8002342:	4334      	orrs	r4, r6
 8002344:	2d00      	cmp	r5, #0
 8002346:	d127      	bne.n	8002398 <__gedf2+0x98>
 8002348:	430a      	orrs	r2, r1
 800234a:	d03a      	beq.n	80023c2 <__gedf2+0xc2>
 800234c:	2c00      	cmp	r4, #0
 800234e:	d145      	bne.n	80023dc <__gedf2+0xdc>
 8002350:	2800      	cmp	r0, #0
 8002352:	d11a      	bne.n	800238a <__gedf2+0x8a>
 8002354:	2001      	movs	r0, #1
 8002356:	4240      	negs	r0, r0
 8002358:	e017      	b.n	800238a <__gedf2+0x8a>
 800235a:	4311      	orrs	r1, r2
 800235c:	d13b      	bne.n	80023d6 <__gedf2+0xd6>
 800235e:	2e00      	cmp	r6, #0
 8002360:	d102      	bne.n	8002368 <__gedf2+0x68>
 8002362:	9f01      	ldr	r7, [sp, #4]
 8002364:	4327      	orrs	r7, r4
 8002366:	d0f3      	beq.n	8002350 <__gedf2+0x50>
 8002368:	4584      	cmp	ip, r0
 800236a:	d109      	bne.n	8002380 <__gedf2+0x80>
 800236c:	4663      	mov	r3, ip
 800236e:	2b00      	cmp	r3, #0
 8002370:	d0f0      	beq.n	8002354 <__gedf2+0x54>
 8002372:	4660      	mov	r0, ip
 8002374:	e009      	b.n	800238a <__gedf2+0x8a>
 8002376:	9f01      	ldr	r7, [sp, #4]
 8002378:	4327      	orrs	r7, r4
 800237a:	d12c      	bne.n	80023d6 <__gedf2+0xd6>
 800237c:	45b2      	cmp	sl, r6
 800237e:	d024      	beq.n	80023ca <__gedf2+0xca>
 8002380:	4663      	mov	r3, ip
 8002382:	2002      	movs	r0, #2
 8002384:	3b01      	subs	r3, #1
 8002386:	4018      	ands	r0, r3
 8002388:	3801      	subs	r0, #1
 800238a:	b003      	add	sp, #12
 800238c:	bcf0      	pop	{r4, r5, r6, r7}
 800238e:	46bb      	mov	fp, r7
 8002390:	46b2      	mov	sl, r6
 8002392:	46a9      	mov	r9, r5
 8002394:	46a0      	mov	r8, r4
 8002396:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002398:	2c00      	cmp	r4, #0
 800239a:	d0d9      	beq.n	8002350 <__gedf2+0x50>
 800239c:	e7e4      	b.n	8002368 <__gedf2+0x68>
 800239e:	4654      	mov	r4, sl
 80023a0:	2c00      	cmp	r4, #0
 80023a2:	d0ed      	beq.n	8002380 <__gedf2+0x80>
 80023a4:	4584      	cmp	ip, r0
 80023a6:	d1eb      	bne.n	8002380 <__gedf2+0x80>
 80023a8:	4556      	cmp	r6, sl
 80023aa:	dce9      	bgt.n	8002380 <__gedf2+0x80>
 80023ac:	dbde      	blt.n	800236c <__gedf2+0x6c>
 80023ae:	9b01      	ldr	r3, [sp, #4]
 80023b0:	428b      	cmp	r3, r1
 80023b2:	d8e5      	bhi.n	8002380 <__gedf2+0x80>
 80023b4:	d1da      	bne.n	800236c <__gedf2+0x6c>
 80023b6:	45c8      	cmp	r8, r9
 80023b8:	d8e2      	bhi.n	8002380 <__gedf2+0x80>
 80023ba:	2000      	movs	r0, #0
 80023bc:	45c8      	cmp	r8, r9
 80023be:	d2e4      	bcs.n	800238a <__gedf2+0x8a>
 80023c0:	e7d4      	b.n	800236c <__gedf2+0x6c>
 80023c2:	2000      	movs	r0, #0
 80023c4:	2c00      	cmp	r4, #0
 80023c6:	d0e0      	beq.n	800238a <__gedf2+0x8a>
 80023c8:	e7da      	b.n	8002380 <__gedf2+0x80>
 80023ca:	4311      	orrs	r1, r2
 80023cc:	d103      	bne.n	80023d6 <__gedf2+0xd6>
 80023ce:	4584      	cmp	ip, r0
 80023d0:	d1d6      	bne.n	8002380 <__gedf2+0x80>
 80023d2:	2000      	movs	r0, #0
 80023d4:	e7d9      	b.n	800238a <__gedf2+0x8a>
 80023d6:	2002      	movs	r0, #2
 80023d8:	4240      	negs	r0, r0
 80023da:	e7d6      	b.n	800238a <__gedf2+0x8a>
 80023dc:	4584      	cmp	ip, r0
 80023de:	d0e6      	beq.n	80023ae <__gedf2+0xae>
 80023e0:	e7ce      	b.n	8002380 <__gedf2+0x80>
 80023e2:	46c0      	nop			@ (mov r8, r8)
 80023e4:	000007ff 	.word	0x000007ff

080023e8 <__ledf2>:
 80023e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023ea:	4657      	mov	r7, sl
 80023ec:	464e      	mov	r6, r9
 80023ee:	4645      	mov	r5, r8
 80023f0:	46de      	mov	lr, fp
 80023f2:	b5e0      	push	{r5, r6, r7, lr}
 80023f4:	000d      	movs	r5, r1
 80023f6:	030f      	lsls	r7, r1, #12
 80023f8:	0004      	movs	r4, r0
 80023fa:	4680      	mov	r8, r0
 80023fc:	0fe8      	lsrs	r0, r5, #31
 80023fe:	0b39      	lsrs	r1, r7, #12
 8002400:	4684      	mov	ip, r0
 8002402:	b083      	sub	sp, #12
 8002404:	0058      	lsls	r0, r3, #1
 8002406:	4f30      	ldr	r7, [pc, #192]	@ (80024c8 <__ledf2+0xe0>)
 8002408:	0d40      	lsrs	r0, r0, #21
 800240a:	9101      	str	r1, [sp, #4]
 800240c:	031e      	lsls	r6, r3, #12
 800240e:	0069      	lsls	r1, r5, #1
 8002410:	4682      	mov	sl, r0
 8002412:	4691      	mov	r9, r2
 8002414:	0d49      	lsrs	r1, r1, #21
 8002416:	0b36      	lsrs	r6, r6, #12
 8002418:	0fd8      	lsrs	r0, r3, #31
 800241a:	42b9      	cmp	r1, r7
 800241c:	d020      	beq.n	8002460 <__ledf2+0x78>
 800241e:	45ba      	cmp	sl, r7
 8002420:	d00f      	beq.n	8002442 <__ledf2+0x5a>
 8002422:	2900      	cmp	r1, #0
 8002424:	d12b      	bne.n	800247e <__ledf2+0x96>
 8002426:	9901      	ldr	r1, [sp, #4]
 8002428:	430c      	orrs	r4, r1
 800242a:	4651      	mov	r1, sl
 800242c:	2900      	cmp	r1, #0
 800242e:	d137      	bne.n	80024a0 <__ledf2+0xb8>
 8002430:	4332      	orrs	r2, r6
 8002432:	d038      	beq.n	80024a6 <__ledf2+0xbe>
 8002434:	2c00      	cmp	r4, #0
 8002436:	d144      	bne.n	80024c2 <__ledf2+0xda>
 8002438:	2800      	cmp	r0, #0
 800243a:	d119      	bne.n	8002470 <__ledf2+0x88>
 800243c:	2001      	movs	r0, #1
 800243e:	4240      	negs	r0, r0
 8002440:	e016      	b.n	8002470 <__ledf2+0x88>
 8002442:	4316      	orrs	r6, r2
 8002444:	d113      	bne.n	800246e <__ledf2+0x86>
 8002446:	2900      	cmp	r1, #0
 8002448:	d102      	bne.n	8002450 <__ledf2+0x68>
 800244a:	9f01      	ldr	r7, [sp, #4]
 800244c:	4327      	orrs	r7, r4
 800244e:	d0f3      	beq.n	8002438 <__ledf2+0x50>
 8002450:	4584      	cmp	ip, r0
 8002452:	d020      	beq.n	8002496 <__ledf2+0xae>
 8002454:	4663      	mov	r3, ip
 8002456:	2002      	movs	r0, #2
 8002458:	3b01      	subs	r3, #1
 800245a:	4018      	ands	r0, r3
 800245c:	3801      	subs	r0, #1
 800245e:	e007      	b.n	8002470 <__ledf2+0x88>
 8002460:	9f01      	ldr	r7, [sp, #4]
 8002462:	4327      	orrs	r7, r4
 8002464:	d103      	bne.n	800246e <__ledf2+0x86>
 8002466:	458a      	cmp	sl, r1
 8002468:	d1f4      	bne.n	8002454 <__ledf2+0x6c>
 800246a:	4316      	orrs	r6, r2
 800246c:	d01f      	beq.n	80024ae <__ledf2+0xc6>
 800246e:	2002      	movs	r0, #2
 8002470:	b003      	add	sp, #12
 8002472:	bcf0      	pop	{r4, r5, r6, r7}
 8002474:	46bb      	mov	fp, r7
 8002476:	46b2      	mov	sl, r6
 8002478:	46a9      	mov	r9, r5
 800247a:	46a0      	mov	r8, r4
 800247c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800247e:	4654      	mov	r4, sl
 8002480:	2c00      	cmp	r4, #0
 8002482:	d0e7      	beq.n	8002454 <__ledf2+0x6c>
 8002484:	4584      	cmp	ip, r0
 8002486:	d1e5      	bne.n	8002454 <__ledf2+0x6c>
 8002488:	4551      	cmp	r1, sl
 800248a:	dce3      	bgt.n	8002454 <__ledf2+0x6c>
 800248c:	db03      	blt.n	8002496 <__ledf2+0xae>
 800248e:	9b01      	ldr	r3, [sp, #4]
 8002490:	42b3      	cmp	r3, r6
 8002492:	d8df      	bhi.n	8002454 <__ledf2+0x6c>
 8002494:	d00f      	beq.n	80024b6 <__ledf2+0xce>
 8002496:	4663      	mov	r3, ip
 8002498:	2b00      	cmp	r3, #0
 800249a:	d0cf      	beq.n	800243c <__ledf2+0x54>
 800249c:	4660      	mov	r0, ip
 800249e:	e7e7      	b.n	8002470 <__ledf2+0x88>
 80024a0:	2c00      	cmp	r4, #0
 80024a2:	d0c9      	beq.n	8002438 <__ledf2+0x50>
 80024a4:	e7d4      	b.n	8002450 <__ledf2+0x68>
 80024a6:	2000      	movs	r0, #0
 80024a8:	2c00      	cmp	r4, #0
 80024aa:	d0e1      	beq.n	8002470 <__ledf2+0x88>
 80024ac:	e7d2      	b.n	8002454 <__ledf2+0x6c>
 80024ae:	4584      	cmp	ip, r0
 80024b0:	d1d0      	bne.n	8002454 <__ledf2+0x6c>
 80024b2:	2000      	movs	r0, #0
 80024b4:	e7dc      	b.n	8002470 <__ledf2+0x88>
 80024b6:	45c8      	cmp	r8, r9
 80024b8:	d8cc      	bhi.n	8002454 <__ledf2+0x6c>
 80024ba:	2000      	movs	r0, #0
 80024bc:	45c8      	cmp	r8, r9
 80024be:	d2d7      	bcs.n	8002470 <__ledf2+0x88>
 80024c0:	e7e9      	b.n	8002496 <__ledf2+0xae>
 80024c2:	4584      	cmp	ip, r0
 80024c4:	d0e3      	beq.n	800248e <__ledf2+0xa6>
 80024c6:	e7c5      	b.n	8002454 <__ledf2+0x6c>
 80024c8:	000007ff 	.word	0x000007ff

080024cc <__aeabi_dmul>:
 80024cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024ce:	4657      	mov	r7, sl
 80024d0:	46de      	mov	lr, fp
 80024d2:	464e      	mov	r6, r9
 80024d4:	4645      	mov	r5, r8
 80024d6:	b5e0      	push	{r5, r6, r7, lr}
 80024d8:	001f      	movs	r7, r3
 80024da:	030b      	lsls	r3, r1, #12
 80024dc:	0b1b      	lsrs	r3, r3, #12
 80024de:	0016      	movs	r6, r2
 80024e0:	469a      	mov	sl, r3
 80024e2:	0fca      	lsrs	r2, r1, #31
 80024e4:	004b      	lsls	r3, r1, #1
 80024e6:	0004      	movs	r4, r0
 80024e8:	4693      	mov	fp, r2
 80024ea:	b087      	sub	sp, #28
 80024ec:	0d5b      	lsrs	r3, r3, #21
 80024ee:	d100      	bne.n	80024f2 <__aeabi_dmul+0x26>
 80024f0:	e0d5      	b.n	800269e <__aeabi_dmul+0x1d2>
 80024f2:	4abb      	ldr	r2, [pc, #748]	@ (80027e0 <__aeabi_dmul+0x314>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d100      	bne.n	80024fa <__aeabi_dmul+0x2e>
 80024f8:	e0f8      	b.n	80026ec <__aeabi_dmul+0x220>
 80024fa:	4651      	mov	r1, sl
 80024fc:	0f42      	lsrs	r2, r0, #29
 80024fe:	00c9      	lsls	r1, r1, #3
 8002500:	430a      	orrs	r2, r1
 8002502:	2180      	movs	r1, #128	@ 0x80
 8002504:	0409      	lsls	r1, r1, #16
 8002506:	4311      	orrs	r1, r2
 8002508:	00c2      	lsls	r2, r0, #3
 800250a:	4691      	mov	r9, r2
 800250c:	4ab5      	ldr	r2, [pc, #724]	@ (80027e4 <__aeabi_dmul+0x318>)
 800250e:	468a      	mov	sl, r1
 8002510:	189d      	adds	r5, r3, r2
 8002512:	2300      	movs	r3, #0
 8002514:	4698      	mov	r8, r3
 8002516:	9302      	str	r3, [sp, #8]
 8002518:	033c      	lsls	r4, r7, #12
 800251a:	007b      	lsls	r3, r7, #1
 800251c:	0ffa      	lsrs	r2, r7, #31
 800251e:	0030      	movs	r0, r6
 8002520:	0b24      	lsrs	r4, r4, #12
 8002522:	0d5b      	lsrs	r3, r3, #21
 8002524:	9200      	str	r2, [sp, #0]
 8002526:	d100      	bne.n	800252a <__aeabi_dmul+0x5e>
 8002528:	e096      	b.n	8002658 <__aeabi_dmul+0x18c>
 800252a:	4aad      	ldr	r2, [pc, #692]	@ (80027e0 <__aeabi_dmul+0x314>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d031      	beq.n	8002594 <__aeabi_dmul+0xc8>
 8002530:	0f72      	lsrs	r2, r6, #29
 8002532:	00e4      	lsls	r4, r4, #3
 8002534:	4322      	orrs	r2, r4
 8002536:	2480      	movs	r4, #128	@ 0x80
 8002538:	0424      	lsls	r4, r4, #16
 800253a:	4314      	orrs	r4, r2
 800253c:	4aa9      	ldr	r2, [pc, #676]	@ (80027e4 <__aeabi_dmul+0x318>)
 800253e:	00f0      	lsls	r0, r6, #3
 8002540:	4694      	mov	ip, r2
 8002542:	4463      	add	r3, ip
 8002544:	195b      	adds	r3, r3, r5
 8002546:	1c5a      	adds	r2, r3, #1
 8002548:	9201      	str	r2, [sp, #4]
 800254a:	4642      	mov	r2, r8
 800254c:	2600      	movs	r6, #0
 800254e:	2a0a      	cmp	r2, #10
 8002550:	dc42      	bgt.n	80025d8 <__aeabi_dmul+0x10c>
 8002552:	465a      	mov	r2, fp
 8002554:	9900      	ldr	r1, [sp, #0]
 8002556:	404a      	eors	r2, r1
 8002558:	4693      	mov	fp, r2
 800255a:	4642      	mov	r2, r8
 800255c:	2a02      	cmp	r2, #2
 800255e:	dc32      	bgt.n	80025c6 <__aeabi_dmul+0xfa>
 8002560:	3a01      	subs	r2, #1
 8002562:	2a01      	cmp	r2, #1
 8002564:	d900      	bls.n	8002568 <__aeabi_dmul+0x9c>
 8002566:	e149      	b.n	80027fc <__aeabi_dmul+0x330>
 8002568:	2e02      	cmp	r6, #2
 800256a:	d100      	bne.n	800256e <__aeabi_dmul+0xa2>
 800256c:	e0ca      	b.n	8002704 <__aeabi_dmul+0x238>
 800256e:	2e01      	cmp	r6, #1
 8002570:	d13d      	bne.n	80025ee <__aeabi_dmul+0x122>
 8002572:	2300      	movs	r3, #0
 8002574:	2400      	movs	r4, #0
 8002576:	2200      	movs	r2, #0
 8002578:	0010      	movs	r0, r2
 800257a:	465a      	mov	r2, fp
 800257c:	051b      	lsls	r3, r3, #20
 800257e:	4323      	orrs	r3, r4
 8002580:	07d2      	lsls	r2, r2, #31
 8002582:	4313      	orrs	r3, r2
 8002584:	0019      	movs	r1, r3
 8002586:	b007      	add	sp, #28
 8002588:	bcf0      	pop	{r4, r5, r6, r7}
 800258a:	46bb      	mov	fp, r7
 800258c:	46b2      	mov	sl, r6
 800258e:	46a9      	mov	r9, r5
 8002590:	46a0      	mov	r8, r4
 8002592:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002594:	4b92      	ldr	r3, [pc, #584]	@ (80027e0 <__aeabi_dmul+0x314>)
 8002596:	4326      	orrs	r6, r4
 8002598:	18eb      	adds	r3, r5, r3
 800259a:	2e00      	cmp	r6, #0
 800259c:	d100      	bne.n	80025a0 <__aeabi_dmul+0xd4>
 800259e:	e0bb      	b.n	8002718 <__aeabi_dmul+0x24c>
 80025a0:	2203      	movs	r2, #3
 80025a2:	4641      	mov	r1, r8
 80025a4:	4311      	orrs	r1, r2
 80025a6:	465a      	mov	r2, fp
 80025a8:	4688      	mov	r8, r1
 80025aa:	9900      	ldr	r1, [sp, #0]
 80025ac:	404a      	eors	r2, r1
 80025ae:	2180      	movs	r1, #128	@ 0x80
 80025b0:	0109      	lsls	r1, r1, #4
 80025b2:	468c      	mov	ip, r1
 80025b4:	0029      	movs	r1, r5
 80025b6:	4461      	add	r1, ip
 80025b8:	9101      	str	r1, [sp, #4]
 80025ba:	4641      	mov	r1, r8
 80025bc:	290a      	cmp	r1, #10
 80025be:	dd00      	ble.n	80025c2 <__aeabi_dmul+0xf6>
 80025c0:	e233      	b.n	8002a2a <__aeabi_dmul+0x55e>
 80025c2:	4693      	mov	fp, r2
 80025c4:	2603      	movs	r6, #3
 80025c6:	4642      	mov	r2, r8
 80025c8:	2701      	movs	r7, #1
 80025ca:	4097      	lsls	r7, r2
 80025cc:	21a6      	movs	r1, #166	@ 0xa6
 80025ce:	003a      	movs	r2, r7
 80025d0:	00c9      	lsls	r1, r1, #3
 80025d2:	400a      	ands	r2, r1
 80025d4:	420f      	tst	r7, r1
 80025d6:	d031      	beq.n	800263c <__aeabi_dmul+0x170>
 80025d8:	9e02      	ldr	r6, [sp, #8]
 80025da:	2e02      	cmp	r6, #2
 80025dc:	d100      	bne.n	80025e0 <__aeabi_dmul+0x114>
 80025de:	e235      	b.n	8002a4c <__aeabi_dmul+0x580>
 80025e0:	2e03      	cmp	r6, #3
 80025e2:	d100      	bne.n	80025e6 <__aeabi_dmul+0x11a>
 80025e4:	e1d2      	b.n	800298c <__aeabi_dmul+0x4c0>
 80025e6:	4654      	mov	r4, sl
 80025e8:	4648      	mov	r0, r9
 80025ea:	2e01      	cmp	r6, #1
 80025ec:	d0c1      	beq.n	8002572 <__aeabi_dmul+0xa6>
 80025ee:	9a01      	ldr	r2, [sp, #4]
 80025f0:	4b7d      	ldr	r3, [pc, #500]	@ (80027e8 <__aeabi_dmul+0x31c>)
 80025f2:	4694      	mov	ip, r2
 80025f4:	4463      	add	r3, ip
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	dc00      	bgt.n	80025fc <__aeabi_dmul+0x130>
 80025fa:	e0c0      	b.n	800277e <__aeabi_dmul+0x2b2>
 80025fc:	0742      	lsls	r2, r0, #29
 80025fe:	d009      	beq.n	8002614 <__aeabi_dmul+0x148>
 8002600:	220f      	movs	r2, #15
 8002602:	4002      	ands	r2, r0
 8002604:	2a04      	cmp	r2, #4
 8002606:	d005      	beq.n	8002614 <__aeabi_dmul+0x148>
 8002608:	1d02      	adds	r2, r0, #4
 800260a:	4282      	cmp	r2, r0
 800260c:	4180      	sbcs	r0, r0
 800260e:	4240      	negs	r0, r0
 8002610:	1824      	adds	r4, r4, r0
 8002612:	0010      	movs	r0, r2
 8002614:	01e2      	lsls	r2, r4, #7
 8002616:	d506      	bpl.n	8002626 <__aeabi_dmul+0x15a>
 8002618:	4b74      	ldr	r3, [pc, #464]	@ (80027ec <__aeabi_dmul+0x320>)
 800261a:	9a01      	ldr	r2, [sp, #4]
 800261c:	401c      	ands	r4, r3
 800261e:	2380      	movs	r3, #128	@ 0x80
 8002620:	4694      	mov	ip, r2
 8002622:	00db      	lsls	r3, r3, #3
 8002624:	4463      	add	r3, ip
 8002626:	4a72      	ldr	r2, [pc, #456]	@ (80027f0 <__aeabi_dmul+0x324>)
 8002628:	4293      	cmp	r3, r2
 800262a:	dc6b      	bgt.n	8002704 <__aeabi_dmul+0x238>
 800262c:	0762      	lsls	r2, r4, #29
 800262e:	08c0      	lsrs	r0, r0, #3
 8002630:	0264      	lsls	r4, r4, #9
 8002632:	055b      	lsls	r3, r3, #21
 8002634:	4302      	orrs	r2, r0
 8002636:	0b24      	lsrs	r4, r4, #12
 8002638:	0d5b      	lsrs	r3, r3, #21
 800263a:	e79d      	b.n	8002578 <__aeabi_dmul+0xac>
 800263c:	2190      	movs	r1, #144	@ 0x90
 800263e:	0089      	lsls	r1, r1, #2
 8002640:	420f      	tst	r7, r1
 8002642:	d163      	bne.n	800270c <__aeabi_dmul+0x240>
 8002644:	2288      	movs	r2, #136	@ 0x88
 8002646:	423a      	tst	r2, r7
 8002648:	d100      	bne.n	800264c <__aeabi_dmul+0x180>
 800264a:	e0d7      	b.n	80027fc <__aeabi_dmul+0x330>
 800264c:	9b00      	ldr	r3, [sp, #0]
 800264e:	46a2      	mov	sl, r4
 8002650:	469b      	mov	fp, r3
 8002652:	4681      	mov	r9, r0
 8002654:	9602      	str	r6, [sp, #8]
 8002656:	e7bf      	b.n	80025d8 <__aeabi_dmul+0x10c>
 8002658:	0023      	movs	r3, r4
 800265a:	4333      	orrs	r3, r6
 800265c:	d100      	bne.n	8002660 <__aeabi_dmul+0x194>
 800265e:	e07f      	b.n	8002760 <__aeabi_dmul+0x294>
 8002660:	2c00      	cmp	r4, #0
 8002662:	d100      	bne.n	8002666 <__aeabi_dmul+0x19a>
 8002664:	e1ad      	b.n	80029c2 <__aeabi_dmul+0x4f6>
 8002666:	0020      	movs	r0, r4
 8002668:	f000 fec8 	bl	80033fc <__clzsi2>
 800266c:	0002      	movs	r2, r0
 800266e:	0003      	movs	r3, r0
 8002670:	3a0b      	subs	r2, #11
 8002672:	201d      	movs	r0, #29
 8002674:	0019      	movs	r1, r3
 8002676:	1a82      	subs	r2, r0, r2
 8002678:	0030      	movs	r0, r6
 800267a:	3908      	subs	r1, #8
 800267c:	40d0      	lsrs	r0, r2
 800267e:	408c      	lsls	r4, r1
 8002680:	4304      	orrs	r4, r0
 8002682:	0030      	movs	r0, r6
 8002684:	4088      	lsls	r0, r1
 8002686:	4a5b      	ldr	r2, [pc, #364]	@ (80027f4 <__aeabi_dmul+0x328>)
 8002688:	1aeb      	subs	r3, r5, r3
 800268a:	4694      	mov	ip, r2
 800268c:	4463      	add	r3, ip
 800268e:	1c5a      	adds	r2, r3, #1
 8002690:	9201      	str	r2, [sp, #4]
 8002692:	4642      	mov	r2, r8
 8002694:	2600      	movs	r6, #0
 8002696:	2a0a      	cmp	r2, #10
 8002698:	dc00      	bgt.n	800269c <__aeabi_dmul+0x1d0>
 800269a:	e75a      	b.n	8002552 <__aeabi_dmul+0x86>
 800269c:	e79c      	b.n	80025d8 <__aeabi_dmul+0x10c>
 800269e:	4653      	mov	r3, sl
 80026a0:	4303      	orrs	r3, r0
 80026a2:	4699      	mov	r9, r3
 80026a4:	d054      	beq.n	8002750 <__aeabi_dmul+0x284>
 80026a6:	4653      	mov	r3, sl
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d100      	bne.n	80026ae <__aeabi_dmul+0x1e2>
 80026ac:	e177      	b.n	800299e <__aeabi_dmul+0x4d2>
 80026ae:	4650      	mov	r0, sl
 80026b0:	f000 fea4 	bl	80033fc <__clzsi2>
 80026b4:	230b      	movs	r3, #11
 80026b6:	425b      	negs	r3, r3
 80026b8:	469c      	mov	ip, r3
 80026ba:	0002      	movs	r2, r0
 80026bc:	4484      	add	ip, r0
 80026be:	0011      	movs	r1, r2
 80026c0:	4650      	mov	r0, sl
 80026c2:	3908      	subs	r1, #8
 80026c4:	4088      	lsls	r0, r1
 80026c6:	231d      	movs	r3, #29
 80026c8:	4680      	mov	r8, r0
 80026ca:	4660      	mov	r0, ip
 80026cc:	1a1b      	subs	r3, r3, r0
 80026ce:	0020      	movs	r0, r4
 80026d0:	40d8      	lsrs	r0, r3
 80026d2:	0003      	movs	r3, r0
 80026d4:	4640      	mov	r0, r8
 80026d6:	4303      	orrs	r3, r0
 80026d8:	469a      	mov	sl, r3
 80026da:	0023      	movs	r3, r4
 80026dc:	408b      	lsls	r3, r1
 80026de:	4699      	mov	r9, r3
 80026e0:	2300      	movs	r3, #0
 80026e2:	4d44      	ldr	r5, [pc, #272]	@ (80027f4 <__aeabi_dmul+0x328>)
 80026e4:	4698      	mov	r8, r3
 80026e6:	1aad      	subs	r5, r5, r2
 80026e8:	9302      	str	r3, [sp, #8]
 80026ea:	e715      	b.n	8002518 <__aeabi_dmul+0x4c>
 80026ec:	4652      	mov	r2, sl
 80026ee:	4302      	orrs	r2, r0
 80026f0:	4691      	mov	r9, r2
 80026f2:	d126      	bne.n	8002742 <__aeabi_dmul+0x276>
 80026f4:	2200      	movs	r2, #0
 80026f6:	001d      	movs	r5, r3
 80026f8:	2302      	movs	r3, #2
 80026fa:	4692      	mov	sl, r2
 80026fc:	3208      	adds	r2, #8
 80026fe:	4690      	mov	r8, r2
 8002700:	9302      	str	r3, [sp, #8]
 8002702:	e709      	b.n	8002518 <__aeabi_dmul+0x4c>
 8002704:	2400      	movs	r4, #0
 8002706:	2200      	movs	r2, #0
 8002708:	4b35      	ldr	r3, [pc, #212]	@ (80027e0 <__aeabi_dmul+0x314>)
 800270a:	e735      	b.n	8002578 <__aeabi_dmul+0xac>
 800270c:	2300      	movs	r3, #0
 800270e:	2480      	movs	r4, #128	@ 0x80
 8002710:	469b      	mov	fp, r3
 8002712:	0324      	lsls	r4, r4, #12
 8002714:	4b32      	ldr	r3, [pc, #200]	@ (80027e0 <__aeabi_dmul+0x314>)
 8002716:	e72f      	b.n	8002578 <__aeabi_dmul+0xac>
 8002718:	2202      	movs	r2, #2
 800271a:	4641      	mov	r1, r8
 800271c:	4311      	orrs	r1, r2
 800271e:	2280      	movs	r2, #128	@ 0x80
 8002720:	0112      	lsls	r2, r2, #4
 8002722:	4694      	mov	ip, r2
 8002724:	002a      	movs	r2, r5
 8002726:	4462      	add	r2, ip
 8002728:	4688      	mov	r8, r1
 800272a:	9201      	str	r2, [sp, #4]
 800272c:	290a      	cmp	r1, #10
 800272e:	dd00      	ble.n	8002732 <__aeabi_dmul+0x266>
 8002730:	e752      	b.n	80025d8 <__aeabi_dmul+0x10c>
 8002732:	465a      	mov	r2, fp
 8002734:	2000      	movs	r0, #0
 8002736:	9900      	ldr	r1, [sp, #0]
 8002738:	0004      	movs	r4, r0
 800273a:	404a      	eors	r2, r1
 800273c:	4693      	mov	fp, r2
 800273e:	2602      	movs	r6, #2
 8002740:	e70b      	b.n	800255a <__aeabi_dmul+0x8e>
 8002742:	220c      	movs	r2, #12
 8002744:	001d      	movs	r5, r3
 8002746:	2303      	movs	r3, #3
 8002748:	4681      	mov	r9, r0
 800274a:	4690      	mov	r8, r2
 800274c:	9302      	str	r3, [sp, #8]
 800274e:	e6e3      	b.n	8002518 <__aeabi_dmul+0x4c>
 8002750:	2300      	movs	r3, #0
 8002752:	469a      	mov	sl, r3
 8002754:	3304      	adds	r3, #4
 8002756:	4698      	mov	r8, r3
 8002758:	3b03      	subs	r3, #3
 800275a:	2500      	movs	r5, #0
 800275c:	9302      	str	r3, [sp, #8]
 800275e:	e6db      	b.n	8002518 <__aeabi_dmul+0x4c>
 8002760:	4642      	mov	r2, r8
 8002762:	3301      	adds	r3, #1
 8002764:	431a      	orrs	r2, r3
 8002766:	002b      	movs	r3, r5
 8002768:	4690      	mov	r8, r2
 800276a:	1c5a      	adds	r2, r3, #1
 800276c:	9201      	str	r2, [sp, #4]
 800276e:	4642      	mov	r2, r8
 8002770:	2400      	movs	r4, #0
 8002772:	2000      	movs	r0, #0
 8002774:	2601      	movs	r6, #1
 8002776:	2a0a      	cmp	r2, #10
 8002778:	dc00      	bgt.n	800277c <__aeabi_dmul+0x2b0>
 800277a:	e6ea      	b.n	8002552 <__aeabi_dmul+0x86>
 800277c:	e72c      	b.n	80025d8 <__aeabi_dmul+0x10c>
 800277e:	2201      	movs	r2, #1
 8002780:	1ad2      	subs	r2, r2, r3
 8002782:	2a38      	cmp	r2, #56	@ 0x38
 8002784:	dd00      	ble.n	8002788 <__aeabi_dmul+0x2bc>
 8002786:	e6f4      	b.n	8002572 <__aeabi_dmul+0xa6>
 8002788:	2a1f      	cmp	r2, #31
 800278a:	dc00      	bgt.n	800278e <__aeabi_dmul+0x2c2>
 800278c:	e12a      	b.n	80029e4 <__aeabi_dmul+0x518>
 800278e:	211f      	movs	r1, #31
 8002790:	4249      	negs	r1, r1
 8002792:	1acb      	subs	r3, r1, r3
 8002794:	0021      	movs	r1, r4
 8002796:	40d9      	lsrs	r1, r3
 8002798:	000b      	movs	r3, r1
 800279a:	2a20      	cmp	r2, #32
 800279c:	d005      	beq.n	80027aa <__aeabi_dmul+0x2de>
 800279e:	4a16      	ldr	r2, [pc, #88]	@ (80027f8 <__aeabi_dmul+0x32c>)
 80027a0:	9d01      	ldr	r5, [sp, #4]
 80027a2:	4694      	mov	ip, r2
 80027a4:	4465      	add	r5, ip
 80027a6:	40ac      	lsls	r4, r5
 80027a8:	4320      	orrs	r0, r4
 80027aa:	1e42      	subs	r2, r0, #1
 80027ac:	4190      	sbcs	r0, r2
 80027ae:	4318      	orrs	r0, r3
 80027b0:	2307      	movs	r3, #7
 80027b2:	0019      	movs	r1, r3
 80027b4:	2400      	movs	r4, #0
 80027b6:	4001      	ands	r1, r0
 80027b8:	4203      	tst	r3, r0
 80027ba:	d00c      	beq.n	80027d6 <__aeabi_dmul+0x30a>
 80027bc:	230f      	movs	r3, #15
 80027be:	4003      	ands	r3, r0
 80027c0:	2b04      	cmp	r3, #4
 80027c2:	d100      	bne.n	80027c6 <__aeabi_dmul+0x2fa>
 80027c4:	e140      	b.n	8002a48 <__aeabi_dmul+0x57c>
 80027c6:	1d03      	adds	r3, r0, #4
 80027c8:	4283      	cmp	r3, r0
 80027ca:	41a4      	sbcs	r4, r4
 80027cc:	0018      	movs	r0, r3
 80027ce:	4264      	negs	r4, r4
 80027d0:	0761      	lsls	r1, r4, #29
 80027d2:	0264      	lsls	r4, r4, #9
 80027d4:	0b24      	lsrs	r4, r4, #12
 80027d6:	08c2      	lsrs	r2, r0, #3
 80027d8:	2300      	movs	r3, #0
 80027da:	430a      	orrs	r2, r1
 80027dc:	e6cc      	b.n	8002578 <__aeabi_dmul+0xac>
 80027de:	46c0      	nop			@ (mov r8, r8)
 80027e0:	000007ff 	.word	0x000007ff
 80027e4:	fffffc01 	.word	0xfffffc01
 80027e8:	000003ff 	.word	0x000003ff
 80027ec:	feffffff 	.word	0xfeffffff
 80027f0:	000007fe 	.word	0x000007fe
 80027f4:	fffffc0d 	.word	0xfffffc0d
 80027f8:	0000043e 	.word	0x0000043e
 80027fc:	4649      	mov	r1, r9
 80027fe:	464a      	mov	r2, r9
 8002800:	0409      	lsls	r1, r1, #16
 8002802:	0c09      	lsrs	r1, r1, #16
 8002804:	000d      	movs	r5, r1
 8002806:	0c16      	lsrs	r6, r2, #16
 8002808:	0c02      	lsrs	r2, r0, #16
 800280a:	0400      	lsls	r0, r0, #16
 800280c:	0c00      	lsrs	r0, r0, #16
 800280e:	4345      	muls	r5, r0
 8002810:	46ac      	mov	ip, r5
 8002812:	0005      	movs	r5, r0
 8002814:	4375      	muls	r5, r6
 8002816:	46a8      	mov	r8, r5
 8002818:	0015      	movs	r5, r2
 800281a:	000f      	movs	r7, r1
 800281c:	4375      	muls	r5, r6
 800281e:	9200      	str	r2, [sp, #0]
 8002820:	9502      	str	r5, [sp, #8]
 8002822:	002a      	movs	r2, r5
 8002824:	9d00      	ldr	r5, [sp, #0]
 8002826:	436f      	muls	r7, r5
 8002828:	4665      	mov	r5, ip
 800282a:	0c2d      	lsrs	r5, r5, #16
 800282c:	46a9      	mov	r9, r5
 800282e:	4447      	add	r7, r8
 8002830:	444f      	add	r7, r9
 8002832:	45b8      	cmp	r8, r7
 8002834:	d905      	bls.n	8002842 <__aeabi_dmul+0x376>
 8002836:	0015      	movs	r5, r2
 8002838:	2280      	movs	r2, #128	@ 0x80
 800283a:	0252      	lsls	r2, r2, #9
 800283c:	4690      	mov	r8, r2
 800283e:	4445      	add	r5, r8
 8002840:	9502      	str	r5, [sp, #8]
 8002842:	0c3d      	lsrs	r5, r7, #16
 8002844:	9503      	str	r5, [sp, #12]
 8002846:	4665      	mov	r5, ip
 8002848:	042d      	lsls	r5, r5, #16
 800284a:	043f      	lsls	r7, r7, #16
 800284c:	0c2d      	lsrs	r5, r5, #16
 800284e:	46ac      	mov	ip, r5
 8002850:	003d      	movs	r5, r7
 8002852:	4465      	add	r5, ip
 8002854:	9504      	str	r5, [sp, #16]
 8002856:	0c25      	lsrs	r5, r4, #16
 8002858:	0424      	lsls	r4, r4, #16
 800285a:	0c24      	lsrs	r4, r4, #16
 800285c:	46ac      	mov	ip, r5
 800285e:	0025      	movs	r5, r4
 8002860:	4375      	muls	r5, r6
 8002862:	46a8      	mov	r8, r5
 8002864:	4665      	mov	r5, ip
 8002866:	000f      	movs	r7, r1
 8002868:	4369      	muls	r1, r5
 800286a:	4441      	add	r1, r8
 800286c:	4689      	mov	r9, r1
 800286e:	4367      	muls	r7, r4
 8002870:	0c39      	lsrs	r1, r7, #16
 8002872:	4449      	add	r1, r9
 8002874:	436e      	muls	r6, r5
 8002876:	4588      	cmp	r8, r1
 8002878:	d903      	bls.n	8002882 <__aeabi_dmul+0x3b6>
 800287a:	2280      	movs	r2, #128	@ 0x80
 800287c:	0252      	lsls	r2, r2, #9
 800287e:	4690      	mov	r8, r2
 8002880:	4446      	add	r6, r8
 8002882:	0c0d      	lsrs	r5, r1, #16
 8002884:	46a8      	mov	r8, r5
 8002886:	0035      	movs	r5, r6
 8002888:	4445      	add	r5, r8
 800288a:	9505      	str	r5, [sp, #20]
 800288c:	9d03      	ldr	r5, [sp, #12]
 800288e:	043f      	lsls	r7, r7, #16
 8002890:	46a8      	mov	r8, r5
 8002892:	0c3f      	lsrs	r7, r7, #16
 8002894:	0409      	lsls	r1, r1, #16
 8002896:	19c9      	adds	r1, r1, r7
 8002898:	4488      	add	r8, r1
 800289a:	4645      	mov	r5, r8
 800289c:	9503      	str	r5, [sp, #12]
 800289e:	4655      	mov	r5, sl
 80028a0:	042e      	lsls	r6, r5, #16
 80028a2:	0c36      	lsrs	r6, r6, #16
 80028a4:	0c2f      	lsrs	r7, r5, #16
 80028a6:	0035      	movs	r5, r6
 80028a8:	4345      	muls	r5, r0
 80028aa:	4378      	muls	r0, r7
 80028ac:	4681      	mov	r9, r0
 80028ae:	0038      	movs	r0, r7
 80028b0:	46a8      	mov	r8, r5
 80028b2:	0c2d      	lsrs	r5, r5, #16
 80028b4:	46aa      	mov	sl, r5
 80028b6:	9a00      	ldr	r2, [sp, #0]
 80028b8:	4350      	muls	r0, r2
 80028ba:	4372      	muls	r2, r6
 80028bc:	444a      	add	r2, r9
 80028be:	4452      	add	r2, sl
 80028c0:	4591      	cmp	r9, r2
 80028c2:	d903      	bls.n	80028cc <__aeabi_dmul+0x400>
 80028c4:	2580      	movs	r5, #128	@ 0x80
 80028c6:	026d      	lsls	r5, r5, #9
 80028c8:	46a9      	mov	r9, r5
 80028ca:	4448      	add	r0, r9
 80028cc:	0c15      	lsrs	r5, r2, #16
 80028ce:	46a9      	mov	r9, r5
 80028d0:	4645      	mov	r5, r8
 80028d2:	042d      	lsls	r5, r5, #16
 80028d4:	0c2d      	lsrs	r5, r5, #16
 80028d6:	46a8      	mov	r8, r5
 80028d8:	4665      	mov	r5, ip
 80028da:	437d      	muls	r5, r7
 80028dc:	0412      	lsls	r2, r2, #16
 80028de:	4448      	add	r0, r9
 80028e0:	4490      	add	r8, r2
 80028e2:	46a9      	mov	r9, r5
 80028e4:	0032      	movs	r2, r6
 80028e6:	4665      	mov	r5, ip
 80028e8:	4362      	muls	r2, r4
 80028ea:	436e      	muls	r6, r5
 80028ec:	437c      	muls	r4, r7
 80028ee:	0c17      	lsrs	r7, r2, #16
 80028f0:	1936      	adds	r6, r6, r4
 80028f2:	19bf      	adds	r7, r7, r6
 80028f4:	42bc      	cmp	r4, r7
 80028f6:	d903      	bls.n	8002900 <__aeabi_dmul+0x434>
 80028f8:	2480      	movs	r4, #128	@ 0x80
 80028fa:	0264      	lsls	r4, r4, #9
 80028fc:	46a4      	mov	ip, r4
 80028fe:	44e1      	add	r9, ip
 8002900:	9c02      	ldr	r4, [sp, #8]
 8002902:	9e03      	ldr	r6, [sp, #12]
 8002904:	46a4      	mov	ip, r4
 8002906:	9d05      	ldr	r5, [sp, #20]
 8002908:	4466      	add	r6, ip
 800290a:	428e      	cmp	r6, r1
 800290c:	4189      	sbcs	r1, r1
 800290e:	46ac      	mov	ip, r5
 8002910:	0412      	lsls	r2, r2, #16
 8002912:	043c      	lsls	r4, r7, #16
 8002914:	0c12      	lsrs	r2, r2, #16
 8002916:	18a2      	adds	r2, r4, r2
 8002918:	4462      	add	r2, ip
 800291a:	4249      	negs	r1, r1
 800291c:	1854      	adds	r4, r2, r1
 800291e:	4446      	add	r6, r8
 8002920:	46a4      	mov	ip, r4
 8002922:	4546      	cmp	r6, r8
 8002924:	41a4      	sbcs	r4, r4
 8002926:	4682      	mov	sl, r0
 8002928:	4264      	negs	r4, r4
 800292a:	46a0      	mov	r8, r4
 800292c:	42aa      	cmp	r2, r5
 800292e:	4192      	sbcs	r2, r2
 8002930:	458c      	cmp	ip, r1
 8002932:	4189      	sbcs	r1, r1
 8002934:	44e2      	add	sl, ip
 8002936:	44d0      	add	r8, sl
 8002938:	4249      	negs	r1, r1
 800293a:	4252      	negs	r2, r2
 800293c:	430a      	orrs	r2, r1
 800293e:	45a0      	cmp	r8, r4
 8002940:	41a4      	sbcs	r4, r4
 8002942:	4582      	cmp	sl, r0
 8002944:	4189      	sbcs	r1, r1
 8002946:	4264      	negs	r4, r4
 8002948:	4249      	negs	r1, r1
 800294a:	430c      	orrs	r4, r1
 800294c:	4641      	mov	r1, r8
 800294e:	0c3f      	lsrs	r7, r7, #16
 8002950:	19d2      	adds	r2, r2, r7
 8002952:	1912      	adds	r2, r2, r4
 8002954:	0dcc      	lsrs	r4, r1, #23
 8002956:	9904      	ldr	r1, [sp, #16]
 8002958:	0270      	lsls	r0, r6, #9
 800295a:	4308      	orrs	r0, r1
 800295c:	1e41      	subs	r1, r0, #1
 800295e:	4188      	sbcs	r0, r1
 8002960:	4641      	mov	r1, r8
 8002962:	444a      	add	r2, r9
 8002964:	0df6      	lsrs	r6, r6, #23
 8002966:	0252      	lsls	r2, r2, #9
 8002968:	4330      	orrs	r0, r6
 800296a:	0249      	lsls	r1, r1, #9
 800296c:	4314      	orrs	r4, r2
 800296e:	4308      	orrs	r0, r1
 8002970:	01d2      	lsls	r2, r2, #7
 8002972:	d535      	bpl.n	80029e0 <__aeabi_dmul+0x514>
 8002974:	2201      	movs	r2, #1
 8002976:	0843      	lsrs	r3, r0, #1
 8002978:	4002      	ands	r2, r0
 800297a:	4313      	orrs	r3, r2
 800297c:	07e0      	lsls	r0, r4, #31
 800297e:	4318      	orrs	r0, r3
 8002980:	0864      	lsrs	r4, r4, #1
 8002982:	e634      	b.n	80025ee <__aeabi_dmul+0x122>
 8002984:	9b00      	ldr	r3, [sp, #0]
 8002986:	46a2      	mov	sl, r4
 8002988:	469b      	mov	fp, r3
 800298a:	4681      	mov	r9, r0
 800298c:	2480      	movs	r4, #128	@ 0x80
 800298e:	4653      	mov	r3, sl
 8002990:	0324      	lsls	r4, r4, #12
 8002992:	431c      	orrs	r4, r3
 8002994:	0324      	lsls	r4, r4, #12
 8002996:	464a      	mov	r2, r9
 8002998:	4b2e      	ldr	r3, [pc, #184]	@ (8002a54 <__aeabi_dmul+0x588>)
 800299a:	0b24      	lsrs	r4, r4, #12
 800299c:	e5ec      	b.n	8002578 <__aeabi_dmul+0xac>
 800299e:	f000 fd2d 	bl	80033fc <__clzsi2>
 80029a2:	2315      	movs	r3, #21
 80029a4:	469c      	mov	ip, r3
 80029a6:	4484      	add	ip, r0
 80029a8:	0002      	movs	r2, r0
 80029aa:	4663      	mov	r3, ip
 80029ac:	3220      	adds	r2, #32
 80029ae:	2b1c      	cmp	r3, #28
 80029b0:	dc00      	bgt.n	80029b4 <__aeabi_dmul+0x4e8>
 80029b2:	e684      	b.n	80026be <__aeabi_dmul+0x1f2>
 80029b4:	2300      	movs	r3, #0
 80029b6:	4699      	mov	r9, r3
 80029b8:	0023      	movs	r3, r4
 80029ba:	3808      	subs	r0, #8
 80029bc:	4083      	lsls	r3, r0
 80029be:	469a      	mov	sl, r3
 80029c0:	e68e      	b.n	80026e0 <__aeabi_dmul+0x214>
 80029c2:	f000 fd1b 	bl	80033fc <__clzsi2>
 80029c6:	0002      	movs	r2, r0
 80029c8:	0003      	movs	r3, r0
 80029ca:	3215      	adds	r2, #21
 80029cc:	3320      	adds	r3, #32
 80029ce:	2a1c      	cmp	r2, #28
 80029d0:	dc00      	bgt.n	80029d4 <__aeabi_dmul+0x508>
 80029d2:	e64e      	b.n	8002672 <__aeabi_dmul+0x1a6>
 80029d4:	0002      	movs	r2, r0
 80029d6:	0034      	movs	r4, r6
 80029d8:	3a08      	subs	r2, #8
 80029da:	2000      	movs	r0, #0
 80029dc:	4094      	lsls	r4, r2
 80029de:	e652      	b.n	8002686 <__aeabi_dmul+0x1ba>
 80029e0:	9301      	str	r3, [sp, #4]
 80029e2:	e604      	b.n	80025ee <__aeabi_dmul+0x122>
 80029e4:	4b1c      	ldr	r3, [pc, #112]	@ (8002a58 <__aeabi_dmul+0x58c>)
 80029e6:	0021      	movs	r1, r4
 80029e8:	469c      	mov	ip, r3
 80029ea:	0003      	movs	r3, r0
 80029ec:	9d01      	ldr	r5, [sp, #4]
 80029ee:	40d3      	lsrs	r3, r2
 80029f0:	4465      	add	r5, ip
 80029f2:	40a9      	lsls	r1, r5
 80029f4:	4319      	orrs	r1, r3
 80029f6:	0003      	movs	r3, r0
 80029f8:	40ab      	lsls	r3, r5
 80029fa:	1e58      	subs	r0, r3, #1
 80029fc:	4183      	sbcs	r3, r0
 80029fe:	4319      	orrs	r1, r3
 8002a00:	0008      	movs	r0, r1
 8002a02:	40d4      	lsrs	r4, r2
 8002a04:	074b      	lsls	r3, r1, #29
 8002a06:	d009      	beq.n	8002a1c <__aeabi_dmul+0x550>
 8002a08:	230f      	movs	r3, #15
 8002a0a:	400b      	ands	r3, r1
 8002a0c:	2b04      	cmp	r3, #4
 8002a0e:	d005      	beq.n	8002a1c <__aeabi_dmul+0x550>
 8002a10:	1d0b      	adds	r3, r1, #4
 8002a12:	428b      	cmp	r3, r1
 8002a14:	4180      	sbcs	r0, r0
 8002a16:	4240      	negs	r0, r0
 8002a18:	1824      	adds	r4, r4, r0
 8002a1a:	0018      	movs	r0, r3
 8002a1c:	0223      	lsls	r3, r4, #8
 8002a1e:	d400      	bmi.n	8002a22 <__aeabi_dmul+0x556>
 8002a20:	e6d6      	b.n	80027d0 <__aeabi_dmul+0x304>
 8002a22:	2301      	movs	r3, #1
 8002a24:	2400      	movs	r4, #0
 8002a26:	2200      	movs	r2, #0
 8002a28:	e5a6      	b.n	8002578 <__aeabi_dmul+0xac>
 8002a2a:	290f      	cmp	r1, #15
 8002a2c:	d1aa      	bne.n	8002984 <__aeabi_dmul+0x4b8>
 8002a2e:	2380      	movs	r3, #128	@ 0x80
 8002a30:	4652      	mov	r2, sl
 8002a32:	031b      	lsls	r3, r3, #12
 8002a34:	421a      	tst	r2, r3
 8002a36:	d0a9      	beq.n	800298c <__aeabi_dmul+0x4c0>
 8002a38:	421c      	tst	r4, r3
 8002a3a:	d1a7      	bne.n	800298c <__aeabi_dmul+0x4c0>
 8002a3c:	431c      	orrs	r4, r3
 8002a3e:	9b00      	ldr	r3, [sp, #0]
 8002a40:	0002      	movs	r2, r0
 8002a42:	469b      	mov	fp, r3
 8002a44:	4b03      	ldr	r3, [pc, #12]	@ (8002a54 <__aeabi_dmul+0x588>)
 8002a46:	e597      	b.n	8002578 <__aeabi_dmul+0xac>
 8002a48:	2400      	movs	r4, #0
 8002a4a:	e6c1      	b.n	80027d0 <__aeabi_dmul+0x304>
 8002a4c:	2400      	movs	r4, #0
 8002a4e:	4b01      	ldr	r3, [pc, #4]	@ (8002a54 <__aeabi_dmul+0x588>)
 8002a50:	0022      	movs	r2, r4
 8002a52:	e591      	b.n	8002578 <__aeabi_dmul+0xac>
 8002a54:	000007ff 	.word	0x000007ff
 8002a58:	0000041e 	.word	0x0000041e

08002a5c <__aeabi_dsub>:
 8002a5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a5e:	464e      	mov	r6, r9
 8002a60:	4645      	mov	r5, r8
 8002a62:	46de      	mov	lr, fp
 8002a64:	4657      	mov	r7, sl
 8002a66:	b5e0      	push	{r5, r6, r7, lr}
 8002a68:	b085      	sub	sp, #20
 8002a6a:	9000      	str	r0, [sp, #0]
 8002a6c:	9101      	str	r1, [sp, #4]
 8002a6e:	030c      	lsls	r4, r1, #12
 8002a70:	004f      	lsls	r7, r1, #1
 8002a72:	0fce      	lsrs	r6, r1, #31
 8002a74:	0a61      	lsrs	r1, r4, #9
 8002a76:	9c00      	ldr	r4, [sp, #0]
 8002a78:	46b0      	mov	r8, r6
 8002a7a:	0f64      	lsrs	r4, r4, #29
 8002a7c:	430c      	orrs	r4, r1
 8002a7e:	9900      	ldr	r1, [sp, #0]
 8002a80:	0d7f      	lsrs	r7, r7, #21
 8002a82:	00c8      	lsls	r0, r1, #3
 8002a84:	0011      	movs	r1, r2
 8002a86:	001a      	movs	r2, r3
 8002a88:	031b      	lsls	r3, r3, #12
 8002a8a:	469c      	mov	ip, r3
 8002a8c:	9100      	str	r1, [sp, #0]
 8002a8e:	9201      	str	r2, [sp, #4]
 8002a90:	0051      	lsls	r1, r2, #1
 8002a92:	0d4b      	lsrs	r3, r1, #21
 8002a94:	4699      	mov	r9, r3
 8002a96:	9b01      	ldr	r3, [sp, #4]
 8002a98:	9d00      	ldr	r5, [sp, #0]
 8002a9a:	0fd9      	lsrs	r1, r3, #31
 8002a9c:	4663      	mov	r3, ip
 8002a9e:	0f6a      	lsrs	r2, r5, #29
 8002aa0:	0a5b      	lsrs	r3, r3, #9
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	00ea      	lsls	r2, r5, #3
 8002aa6:	4694      	mov	ip, r2
 8002aa8:	4693      	mov	fp, r2
 8002aaa:	4ac1      	ldr	r2, [pc, #772]	@ (8002db0 <__aeabi_dsub+0x354>)
 8002aac:	9003      	str	r0, [sp, #12]
 8002aae:	9302      	str	r3, [sp, #8]
 8002ab0:	4591      	cmp	r9, r2
 8002ab2:	d100      	bne.n	8002ab6 <__aeabi_dsub+0x5a>
 8002ab4:	e0cd      	b.n	8002c52 <__aeabi_dsub+0x1f6>
 8002ab6:	2501      	movs	r5, #1
 8002ab8:	4069      	eors	r1, r5
 8002aba:	464d      	mov	r5, r9
 8002abc:	1b7d      	subs	r5, r7, r5
 8002abe:	46aa      	mov	sl, r5
 8002ac0:	428e      	cmp	r6, r1
 8002ac2:	d100      	bne.n	8002ac6 <__aeabi_dsub+0x6a>
 8002ac4:	e080      	b.n	8002bc8 <__aeabi_dsub+0x16c>
 8002ac6:	2d00      	cmp	r5, #0
 8002ac8:	dc00      	bgt.n	8002acc <__aeabi_dsub+0x70>
 8002aca:	e335      	b.n	8003138 <__aeabi_dsub+0x6dc>
 8002acc:	4649      	mov	r1, r9
 8002ace:	2900      	cmp	r1, #0
 8002ad0:	d100      	bne.n	8002ad4 <__aeabi_dsub+0x78>
 8002ad2:	e0df      	b.n	8002c94 <__aeabi_dsub+0x238>
 8002ad4:	4297      	cmp	r7, r2
 8002ad6:	d100      	bne.n	8002ada <__aeabi_dsub+0x7e>
 8002ad8:	e194      	b.n	8002e04 <__aeabi_dsub+0x3a8>
 8002ada:	4652      	mov	r2, sl
 8002adc:	2501      	movs	r5, #1
 8002ade:	2a38      	cmp	r2, #56	@ 0x38
 8002ae0:	dc19      	bgt.n	8002b16 <__aeabi_dsub+0xba>
 8002ae2:	2280      	movs	r2, #128	@ 0x80
 8002ae4:	9b02      	ldr	r3, [sp, #8]
 8002ae6:	0412      	lsls	r2, r2, #16
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	9302      	str	r3, [sp, #8]
 8002aec:	4652      	mov	r2, sl
 8002aee:	2a1f      	cmp	r2, #31
 8002af0:	dd00      	ble.n	8002af4 <__aeabi_dsub+0x98>
 8002af2:	e1e3      	b.n	8002ebc <__aeabi_dsub+0x460>
 8002af4:	4653      	mov	r3, sl
 8002af6:	2220      	movs	r2, #32
 8002af8:	4661      	mov	r1, ip
 8002afa:	9d02      	ldr	r5, [sp, #8]
 8002afc:	1ad2      	subs	r2, r2, r3
 8002afe:	4095      	lsls	r5, r2
 8002b00:	40d9      	lsrs	r1, r3
 8002b02:	430d      	orrs	r5, r1
 8002b04:	4661      	mov	r1, ip
 8002b06:	4091      	lsls	r1, r2
 8002b08:	000a      	movs	r2, r1
 8002b0a:	1e51      	subs	r1, r2, #1
 8002b0c:	418a      	sbcs	r2, r1
 8002b0e:	4315      	orrs	r5, r2
 8002b10:	9a02      	ldr	r2, [sp, #8]
 8002b12:	40da      	lsrs	r2, r3
 8002b14:	1aa4      	subs	r4, r4, r2
 8002b16:	1b45      	subs	r5, r0, r5
 8002b18:	42a8      	cmp	r0, r5
 8002b1a:	4180      	sbcs	r0, r0
 8002b1c:	4240      	negs	r0, r0
 8002b1e:	1a24      	subs	r4, r4, r0
 8002b20:	0223      	lsls	r3, r4, #8
 8002b22:	d400      	bmi.n	8002b26 <__aeabi_dsub+0xca>
 8002b24:	e13d      	b.n	8002da2 <__aeabi_dsub+0x346>
 8002b26:	0264      	lsls	r4, r4, #9
 8002b28:	0a64      	lsrs	r4, r4, #9
 8002b2a:	2c00      	cmp	r4, #0
 8002b2c:	d100      	bne.n	8002b30 <__aeabi_dsub+0xd4>
 8002b2e:	e147      	b.n	8002dc0 <__aeabi_dsub+0x364>
 8002b30:	0020      	movs	r0, r4
 8002b32:	f000 fc63 	bl	80033fc <__clzsi2>
 8002b36:	0003      	movs	r3, r0
 8002b38:	3b08      	subs	r3, #8
 8002b3a:	2120      	movs	r1, #32
 8002b3c:	0028      	movs	r0, r5
 8002b3e:	1aca      	subs	r2, r1, r3
 8002b40:	40d0      	lsrs	r0, r2
 8002b42:	409c      	lsls	r4, r3
 8002b44:	0002      	movs	r2, r0
 8002b46:	409d      	lsls	r5, r3
 8002b48:	4322      	orrs	r2, r4
 8002b4a:	429f      	cmp	r7, r3
 8002b4c:	dd00      	ble.n	8002b50 <__aeabi_dsub+0xf4>
 8002b4e:	e177      	b.n	8002e40 <__aeabi_dsub+0x3e4>
 8002b50:	1bd8      	subs	r0, r3, r7
 8002b52:	3001      	adds	r0, #1
 8002b54:	1a09      	subs	r1, r1, r0
 8002b56:	002c      	movs	r4, r5
 8002b58:	408d      	lsls	r5, r1
 8002b5a:	40c4      	lsrs	r4, r0
 8002b5c:	1e6b      	subs	r3, r5, #1
 8002b5e:	419d      	sbcs	r5, r3
 8002b60:	0013      	movs	r3, r2
 8002b62:	40c2      	lsrs	r2, r0
 8002b64:	408b      	lsls	r3, r1
 8002b66:	4325      	orrs	r5, r4
 8002b68:	2700      	movs	r7, #0
 8002b6a:	0014      	movs	r4, r2
 8002b6c:	431d      	orrs	r5, r3
 8002b6e:	076b      	lsls	r3, r5, #29
 8002b70:	d009      	beq.n	8002b86 <__aeabi_dsub+0x12a>
 8002b72:	230f      	movs	r3, #15
 8002b74:	402b      	ands	r3, r5
 8002b76:	2b04      	cmp	r3, #4
 8002b78:	d005      	beq.n	8002b86 <__aeabi_dsub+0x12a>
 8002b7a:	1d2b      	adds	r3, r5, #4
 8002b7c:	42ab      	cmp	r3, r5
 8002b7e:	41ad      	sbcs	r5, r5
 8002b80:	426d      	negs	r5, r5
 8002b82:	1964      	adds	r4, r4, r5
 8002b84:	001d      	movs	r5, r3
 8002b86:	0223      	lsls	r3, r4, #8
 8002b88:	d400      	bmi.n	8002b8c <__aeabi_dsub+0x130>
 8002b8a:	e140      	b.n	8002e0e <__aeabi_dsub+0x3b2>
 8002b8c:	4a88      	ldr	r2, [pc, #544]	@ (8002db0 <__aeabi_dsub+0x354>)
 8002b8e:	3701      	adds	r7, #1
 8002b90:	4297      	cmp	r7, r2
 8002b92:	d100      	bne.n	8002b96 <__aeabi_dsub+0x13a>
 8002b94:	e101      	b.n	8002d9a <__aeabi_dsub+0x33e>
 8002b96:	2601      	movs	r6, #1
 8002b98:	4643      	mov	r3, r8
 8002b9a:	4986      	ldr	r1, [pc, #536]	@ (8002db4 <__aeabi_dsub+0x358>)
 8002b9c:	08ed      	lsrs	r5, r5, #3
 8002b9e:	4021      	ands	r1, r4
 8002ba0:	074a      	lsls	r2, r1, #29
 8002ba2:	432a      	orrs	r2, r5
 8002ba4:	057c      	lsls	r4, r7, #21
 8002ba6:	024d      	lsls	r5, r1, #9
 8002ba8:	0b2d      	lsrs	r5, r5, #12
 8002baa:	0d64      	lsrs	r4, r4, #21
 8002bac:	401e      	ands	r6, r3
 8002bae:	0524      	lsls	r4, r4, #20
 8002bb0:	432c      	orrs	r4, r5
 8002bb2:	07f6      	lsls	r6, r6, #31
 8002bb4:	4334      	orrs	r4, r6
 8002bb6:	0010      	movs	r0, r2
 8002bb8:	0021      	movs	r1, r4
 8002bba:	b005      	add	sp, #20
 8002bbc:	bcf0      	pop	{r4, r5, r6, r7}
 8002bbe:	46bb      	mov	fp, r7
 8002bc0:	46b2      	mov	sl, r6
 8002bc2:	46a9      	mov	r9, r5
 8002bc4:	46a0      	mov	r8, r4
 8002bc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002bc8:	2d00      	cmp	r5, #0
 8002bca:	dc00      	bgt.n	8002bce <__aeabi_dsub+0x172>
 8002bcc:	e2d0      	b.n	8003170 <__aeabi_dsub+0x714>
 8002bce:	4649      	mov	r1, r9
 8002bd0:	2900      	cmp	r1, #0
 8002bd2:	d000      	beq.n	8002bd6 <__aeabi_dsub+0x17a>
 8002bd4:	e0d4      	b.n	8002d80 <__aeabi_dsub+0x324>
 8002bd6:	4661      	mov	r1, ip
 8002bd8:	9b02      	ldr	r3, [sp, #8]
 8002bda:	4319      	orrs	r1, r3
 8002bdc:	d100      	bne.n	8002be0 <__aeabi_dsub+0x184>
 8002bde:	e12b      	b.n	8002e38 <__aeabi_dsub+0x3dc>
 8002be0:	1e69      	subs	r1, r5, #1
 8002be2:	2d01      	cmp	r5, #1
 8002be4:	d100      	bne.n	8002be8 <__aeabi_dsub+0x18c>
 8002be6:	e1d9      	b.n	8002f9c <__aeabi_dsub+0x540>
 8002be8:	4295      	cmp	r5, r2
 8002bea:	d100      	bne.n	8002bee <__aeabi_dsub+0x192>
 8002bec:	e10a      	b.n	8002e04 <__aeabi_dsub+0x3a8>
 8002bee:	2501      	movs	r5, #1
 8002bf0:	2938      	cmp	r1, #56	@ 0x38
 8002bf2:	dc17      	bgt.n	8002c24 <__aeabi_dsub+0x1c8>
 8002bf4:	468a      	mov	sl, r1
 8002bf6:	4653      	mov	r3, sl
 8002bf8:	2b1f      	cmp	r3, #31
 8002bfa:	dd00      	ble.n	8002bfe <__aeabi_dsub+0x1a2>
 8002bfc:	e1e7      	b.n	8002fce <__aeabi_dsub+0x572>
 8002bfe:	2220      	movs	r2, #32
 8002c00:	1ad2      	subs	r2, r2, r3
 8002c02:	9b02      	ldr	r3, [sp, #8]
 8002c04:	4661      	mov	r1, ip
 8002c06:	4093      	lsls	r3, r2
 8002c08:	001d      	movs	r5, r3
 8002c0a:	4653      	mov	r3, sl
 8002c0c:	40d9      	lsrs	r1, r3
 8002c0e:	4663      	mov	r3, ip
 8002c10:	4093      	lsls	r3, r2
 8002c12:	001a      	movs	r2, r3
 8002c14:	430d      	orrs	r5, r1
 8002c16:	1e51      	subs	r1, r2, #1
 8002c18:	418a      	sbcs	r2, r1
 8002c1a:	4653      	mov	r3, sl
 8002c1c:	4315      	orrs	r5, r2
 8002c1e:	9a02      	ldr	r2, [sp, #8]
 8002c20:	40da      	lsrs	r2, r3
 8002c22:	18a4      	adds	r4, r4, r2
 8002c24:	182d      	adds	r5, r5, r0
 8002c26:	4285      	cmp	r5, r0
 8002c28:	4180      	sbcs	r0, r0
 8002c2a:	4240      	negs	r0, r0
 8002c2c:	1824      	adds	r4, r4, r0
 8002c2e:	0223      	lsls	r3, r4, #8
 8002c30:	d400      	bmi.n	8002c34 <__aeabi_dsub+0x1d8>
 8002c32:	e0b6      	b.n	8002da2 <__aeabi_dsub+0x346>
 8002c34:	4b5e      	ldr	r3, [pc, #376]	@ (8002db0 <__aeabi_dsub+0x354>)
 8002c36:	3701      	adds	r7, #1
 8002c38:	429f      	cmp	r7, r3
 8002c3a:	d100      	bne.n	8002c3e <__aeabi_dsub+0x1e2>
 8002c3c:	e0ad      	b.n	8002d9a <__aeabi_dsub+0x33e>
 8002c3e:	2101      	movs	r1, #1
 8002c40:	4b5c      	ldr	r3, [pc, #368]	@ (8002db4 <__aeabi_dsub+0x358>)
 8002c42:	086a      	lsrs	r2, r5, #1
 8002c44:	401c      	ands	r4, r3
 8002c46:	4029      	ands	r1, r5
 8002c48:	430a      	orrs	r2, r1
 8002c4a:	07e5      	lsls	r5, r4, #31
 8002c4c:	4315      	orrs	r5, r2
 8002c4e:	0864      	lsrs	r4, r4, #1
 8002c50:	e78d      	b.n	8002b6e <__aeabi_dsub+0x112>
 8002c52:	4a59      	ldr	r2, [pc, #356]	@ (8002db8 <__aeabi_dsub+0x35c>)
 8002c54:	9b02      	ldr	r3, [sp, #8]
 8002c56:	4692      	mov	sl, r2
 8002c58:	4662      	mov	r2, ip
 8002c5a:	44ba      	add	sl, r7
 8002c5c:	431a      	orrs	r2, r3
 8002c5e:	d02c      	beq.n	8002cba <__aeabi_dsub+0x25e>
 8002c60:	428e      	cmp	r6, r1
 8002c62:	d02e      	beq.n	8002cc2 <__aeabi_dsub+0x266>
 8002c64:	4652      	mov	r2, sl
 8002c66:	2a00      	cmp	r2, #0
 8002c68:	d060      	beq.n	8002d2c <__aeabi_dsub+0x2d0>
 8002c6a:	2f00      	cmp	r7, #0
 8002c6c:	d100      	bne.n	8002c70 <__aeabi_dsub+0x214>
 8002c6e:	e0db      	b.n	8002e28 <__aeabi_dsub+0x3cc>
 8002c70:	4663      	mov	r3, ip
 8002c72:	000e      	movs	r6, r1
 8002c74:	9c02      	ldr	r4, [sp, #8]
 8002c76:	08d8      	lsrs	r0, r3, #3
 8002c78:	0762      	lsls	r2, r4, #29
 8002c7a:	4302      	orrs	r2, r0
 8002c7c:	08e4      	lsrs	r4, r4, #3
 8002c7e:	0013      	movs	r3, r2
 8002c80:	4323      	orrs	r3, r4
 8002c82:	d100      	bne.n	8002c86 <__aeabi_dsub+0x22a>
 8002c84:	e254      	b.n	8003130 <__aeabi_dsub+0x6d4>
 8002c86:	2580      	movs	r5, #128	@ 0x80
 8002c88:	032d      	lsls	r5, r5, #12
 8002c8a:	4325      	orrs	r5, r4
 8002c8c:	032d      	lsls	r5, r5, #12
 8002c8e:	4c48      	ldr	r4, [pc, #288]	@ (8002db0 <__aeabi_dsub+0x354>)
 8002c90:	0b2d      	lsrs	r5, r5, #12
 8002c92:	e78c      	b.n	8002bae <__aeabi_dsub+0x152>
 8002c94:	4661      	mov	r1, ip
 8002c96:	9b02      	ldr	r3, [sp, #8]
 8002c98:	4319      	orrs	r1, r3
 8002c9a:	d100      	bne.n	8002c9e <__aeabi_dsub+0x242>
 8002c9c:	e0cc      	b.n	8002e38 <__aeabi_dsub+0x3dc>
 8002c9e:	0029      	movs	r1, r5
 8002ca0:	3901      	subs	r1, #1
 8002ca2:	2d01      	cmp	r5, #1
 8002ca4:	d100      	bne.n	8002ca8 <__aeabi_dsub+0x24c>
 8002ca6:	e188      	b.n	8002fba <__aeabi_dsub+0x55e>
 8002ca8:	4295      	cmp	r5, r2
 8002caa:	d100      	bne.n	8002cae <__aeabi_dsub+0x252>
 8002cac:	e0aa      	b.n	8002e04 <__aeabi_dsub+0x3a8>
 8002cae:	2501      	movs	r5, #1
 8002cb0:	2938      	cmp	r1, #56	@ 0x38
 8002cb2:	dd00      	ble.n	8002cb6 <__aeabi_dsub+0x25a>
 8002cb4:	e72f      	b.n	8002b16 <__aeabi_dsub+0xba>
 8002cb6:	468a      	mov	sl, r1
 8002cb8:	e718      	b.n	8002aec <__aeabi_dsub+0x90>
 8002cba:	2201      	movs	r2, #1
 8002cbc:	4051      	eors	r1, r2
 8002cbe:	428e      	cmp	r6, r1
 8002cc0:	d1d0      	bne.n	8002c64 <__aeabi_dsub+0x208>
 8002cc2:	4653      	mov	r3, sl
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d100      	bne.n	8002cca <__aeabi_dsub+0x26e>
 8002cc8:	e0be      	b.n	8002e48 <__aeabi_dsub+0x3ec>
 8002cca:	2f00      	cmp	r7, #0
 8002ccc:	d000      	beq.n	8002cd0 <__aeabi_dsub+0x274>
 8002cce:	e138      	b.n	8002f42 <__aeabi_dsub+0x4e6>
 8002cd0:	46ca      	mov	sl, r9
 8002cd2:	0022      	movs	r2, r4
 8002cd4:	4302      	orrs	r2, r0
 8002cd6:	d100      	bne.n	8002cda <__aeabi_dsub+0x27e>
 8002cd8:	e1e2      	b.n	80030a0 <__aeabi_dsub+0x644>
 8002cda:	4653      	mov	r3, sl
 8002cdc:	1e59      	subs	r1, r3, #1
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d100      	bne.n	8002ce4 <__aeabi_dsub+0x288>
 8002ce2:	e20d      	b.n	8003100 <__aeabi_dsub+0x6a4>
 8002ce4:	4a32      	ldr	r2, [pc, #200]	@ (8002db0 <__aeabi_dsub+0x354>)
 8002ce6:	4592      	cmp	sl, r2
 8002ce8:	d100      	bne.n	8002cec <__aeabi_dsub+0x290>
 8002cea:	e1d2      	b.n	8003092 <__aeabi_dsub+0x636>
 8002cec:	2701      	movs	r7, #1
 8002cee:	2938      	cmp	r1, #56	@ 0x38
 8002cf0:	dc13      	bgt.n	8002d1a <__aeabi_dsub+0x2be>
 8002cf2:	291f      	cmp	r1, #31
 8002cf4:	dd00      	ble.n	8002cf8 <__aeabi_dsub+0x29c>
 8002cf6:	e1ee      	b.n	80030d6 <__aeabi_dsub+0x67a>
 8002cf8:	2220      	movs	r2, #32
 8002cfa:	9b02      	ldr	r3, [sp, #8]
 8002cfc:	1a52      	subs	r2, r2, r1
 8002cfe:	0025      	movs	r5, r4
 8002d00:	0007      	movs	r7, r0
 8002d02:	469a      	mov	sl, r3
 8002d04:	40cc      	lsrs	r4, r1
 8002d06:	4090      	lsls	r0, r2
 8002d08:	4095      	lsls	r5, r2
 8002d0a:	40cf      	lsrs	r7, r1
 8002d0c:	44a2      	add	sl, r4
 8002d0e:	1e42      	subs	r2, r0, #1
 8002d10:	4190      	sbcs	r0, r2
 8002d12:	4653      	mov	r3, sl
 8002d14:	432f      	orrs	r7, r5
 8002d16:	4307      	orrs	r7, r0
 8002d18:	9302      	str	r3, [sp, #8]
 8002d1a:	003d      	movs	r5, r7
 8002d1c:	4465      	add	r5, ip
 8002d1e:	4565      	cmp	r5, ip
 8002d20:	4192      	sbcs	r2, r2
 8002d22:	9b02      	ldr	r3, [sp, #8]
 8002d24:	4252      	negs	r2, r2
 8002d26:	464f      	mov	r7, r9
 8002d28:	18d4      	adds	r4, r2, r3
 8002d2a:	e780      	b.n	8002c2e <__aeabi_dsub+0x1d2>
 8002d2c:	4a23      	ldr	r2, [pc, #140]	@ (8002dbc <__aeabi_dsub+0x360>)
 8002d2e:	1c7d      	adds	r5, r7, #1
 8002d30:	4215      	tst	r5, r2
 8002d32:	d000      	beq.n	8002d36 <__aeabi_dsub+0x2da>
 8002d34:	e0aa      	b.n	8002e8c <__aeabi_dsub+0x430>
 8002d36:	4662      	mov	r2, ip
 8002d38:	0025      	movs	r5, r4
 8002d3a:	9b02      	ldr	r3, [sp, #8]
 8002d3c:	4305      	orrs	r5, r0
 8002d3e:	431a      	orrs	r2, r3
 8002d40:	2f00      	cmp	r7, #0
 8002d42:	d000      	beq.n	8002d46 <__aeabi_dsub+0x2ea>
 8002d44:	e0f5      	b.n	8002f32 <__aeabi_dsub+0x4d6>
 8002d46:	2d00      	cmp	r5, #0
 8002d48:	d100      	bne.n	8002d4c <__aeabi_dsub+0x2f0>
 8002d4a:	e16b      	b.n	8003024 <__aeabi_dsub+0x5c8>
 8002d4c:	2a00      	cmp	r2, #0
 8002d4e:	d100      	bne.n	8002d52 <__aeabi_dsub+0x2f6>
 8002d50:	e152      	b.n	8002ff8 <__aeabi_dsub+0x59c>
 8002d52:	4663      	mov	r3, ip
 8002d54:	1ac5      	subs	r5, r0, r3
 8002d56:	9b02      	ldr	r3, [sp, #8]
 8002d58:	1ae2      	subs	r2, r4, r3
 8002d5a:	42a8      	cmp	r0, r5
 8002d5c:	419b      	sbcs	r3, r3
 8002d5e:	425b      	negs	r3, r3
 8002d60:	1ad3      	subs	r3, r2, r3
 8002d62:	021a      	lsls	r2, r3, #8
 8002d64:	d400      	bmi.n	8002d68 <__aeabi_dsub+0x30c>
 8002d66:	e1d5      	b.n	8003114 <__aeabi_dsub+0x6b8>
 8002d68:	4663      	mov	r3, ip
 8002d6a:	1a1d      	subs	r5, r3, r0
 8002d6c:	45ac      	cmp	ip, r5
 8002d6e:	4192      	sbcs	r2, r2
 8002d70:	2601      	movs	r6, #1
 8002d72:	9b02      	ldr	r3, [sp, #8]
 8002d74:	4252      	negs	r2, r2
 8002d76:	1b1c      	subs	r4, r3, r4
 8002d78:	4688      	mov	r8, r1
 8002d7a:	1aa4      	subs	r4, r4, r2
 8002d7c:	400e      	ands	r6, r1
 8002d7e:	e6f6      	b.n	8002b6e <__aeabi_dsub+0x112>
 8002d80:	4297      	cmp	r7, r2
 8002d82:	d03f      	beq.n	8002e04 <__aeabi_dsub+0x3a8>
 8002d84:	4652      	mov	r2, sl
 8002d86:	2501      	movs	r5, #1
 8002d88:	2a38      	cmp	r2, #56	@ 0x38
 8002d8a:	dd00      	ble.n	8002d8e <__aeabi_dsub+0x332>
 8002d8c:	e74a      	b.n	8002c24 <__aeabi_dsub+0x1c8>
 8002d8e:	2280      	movs	r2, #128	@ 0x80
 8002d90:	9b02      	ldr	r3, [sp, #8]
 8002d92:	0412      	lsls	r2, r2, #16
 8002d94:	4313      	orrs	r3, r2
 8002d96:	9302      	str	r3, [sp, #8]
 8002d98:	e72d      	b.n	8002bf6 <__aeabi_dsub+0x19a>
 8002d9a:	003c      	movs	r4, r7
 8002d9c:	2500      	movs	r5, #0
 8002d9e:	2200      	movs	r2, #0
 8002da0:	e705      	b.n	8002bae <__aeabi_dsub+0x152>
 8002da2:	2307      	movs	r3, #7
 8002da4:	402b      	ands	r3, r5
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d000      	beq.n	8002dac <__aeabi_dsub+0x350>
 8002daa:	e6e2      	b.n	8002b72 <__aeabi_dsub+0x116>
 8002dac:	e06b      	b.n	8002e86 <__aeabi_dsub+0x42a>
 8002dae:	46c0      	nop			@ (mov r8, r8)
 8002db0:	000007ff 	.word	0x000007ff
 8002db4:	ff7fffff 	.word	0xff7fffff
 8002db8:	fffff801 	.word	0xfffff801
 8002dbc:	000007fe 	.word	0x000007fe
 8002dc0:	0028      	movs	r0, r5
 8002dc2:	f000 fb1b 	bl	80033fc <__clzsi2>
 8002dc6:	0003      	movs	r3, r0
 8002dc8:	3318      	adds	r3, #24
 8002dca:	2b1f      	cmp	r3, #31
 8002dcc:	dc00      	bgt.n	8002dd0 <__aeabi_dsub+0x374>
 8002dce:	e6b4      	b.n	8002b3a <__aeabi_dsub+0xde>
 8002dd0:	002a      	movs	r2, r5
 8002dd2:	3808      	subs	r0, #8
 8002dd4:	4082      	lsls	r2, r0
 8002dd6:	429f      	cmp	r7, r3
 8002dd8:	dd00      	ble.n	8002ddc <__aeabi_dsub+0x380>
 8002dda:	e0b9      	b.n	8002f50 <__aeabi_dsub+0x4f4>
 8002ddc:	1bdb      	subs	r3, r3, r7
 8002dde:	1c58      	adds	r0, r3, #1
 8002de0:	281f      	cmp	r0, #31
 8002de2:	dc00      	bgt.n	8002de6 <__aeabi_dsub+0x38a>
 8002de4:	e1a0      	b.n	8003128 <__aeabi_dsub+0x6cc>
 8002de6:	0015      	movs	r5, r2
 8002de8:	3b1f      	subs	r3, #31
 8002dea:	40dd      	lsrs	r5, r3
 8002dec:	2820      	cmp	r0, #32
 8002dee:	d005      	beq.n	8002dfc <__aeabi_dsub+0x3a0>
 8002df0:	2340      	movs	r3, #64	@ 0x40
 8002df2:	1a1b      	subs	r3, r3, r0
 8002df4:	409a      	lsls	r2, r3
 8002df6:	1e53      	subs	r3, r2, #1
 8002df8:	419a      	sbcs	r2, r3
 8002dfa:	4315      	orrs	r5, r2
 8002dfc:	2307      	movs	r3, #7
 8002dfe:	2700      	movs	r7, #0
 8002e00:	402b      	ands	r3, r5
 8002e02:	e7d0      	b.n	8002da6 <__aeabi_dsub+0x34a>
 8002e04:	08c0      	lsrs	r0, r0, #3
 8002e06:	0762      	lsls	r2, r4, #29
 8002e08:	4302      	orrs	r2, r0
 8002e0a:	08e4      	lsrs	r4, r4, #3
 8002e0c:	e737      	b.n	8002c7e <__aeabi_dsub+0x222>
 8002e0e:	08ea      	lsrs	r2, r5, #3
 8002e10:	0763      	lsls	r3, r4, #29
 8002e12:	431a      	orrs	r2, r3
 8002e14:	4bd3      	ldr	r3, [pc, #844]	@ (8003164 <__aeabi_dsub+0x708>)
 8002e16:	08e4      	lsrs	r4, r4, #3
 8002e18:	429f      	cmp	r7, r3
 8002e1a:	d100      	bne.n	8002e1e <__aeabi_dsub+0x3c2>
 8002e1c:	e72f      	b.n	8002c7e <__aeabi_dsub+0x222>
 8002e1e:	0324      	lsls	r4, r4, #12
 8002e20:	0b25      	lsrs	r5, r4, #12
 8002e22:	057c      	lsls	r4, r7, #21
 8002e24:	0d64      	lsrs	r4, r4, #21
 8002e26:	e6c2      	b.n	8002bae <__aeabi_dsub+0x152>
 8002e28:	46ca      	mov	sl, r9
 8002e2a:	0022      	movs	r2, r4
 8002e2c:	4302      	orrs	r2, r0
 8002e2e:	d158      	bne.n	8002ee2 <__aeabi_dsub+0x486>
 8002e30:	4663      	mov	r3, ip
 8002e32:	000e      	movs	r6, r1
 8002e34:	9c02      	ldr	r4, [sp, #8]
 8002e36:	9303      	str	r3, [sp, #12]
 8002e38:	9b03      	ldr	r3, [sp, #12]
 8002e3a:	4657      	mov	r7, sl
 8002e3c:	08da      	lsrs	r2, r3, #3
 8002e3e:	e7e7      	b.n	8002e10 <__aeabi_dsub+0x3b4>
 8002e40:	4cc9      	ldr	r4, [pc, #804]	@ (8003168 <__aeabi_dsub+0x70c>)
 8002e42:	1aff      	subs	r7, r7, r3
 8002e44:	4014      	ands	r4, r2
 8002e46:	e692      	b.n	8002b6e <__aeabi_dsub+0x112>
 8002e48:	4dc8      	ldr	r5, [pc, #800]	@ (800316c <__aeabi_dsub+0x710>)
 8002e4a:	1c7a      	adds	r2, r7, #1
 8002e4c:	422a      	tst	r2, r5
 8002e4e:	d000      	beq.n	8002e52 <__aeabi_dsub+0x3f6>
 8002e50:	e084      	b.n	8002f5c <__aeabi_dsub+0x500>
 8002e52:	0022      	movs	r2, r4
 8002e54:	4302      	orrs	r2, r0
 8002e56:	2f00      	cmp	r7, #0
 8002e58:	d000      	beq.n	8002e5c <__aeabi_dsub+0x400>
 8002e5a:	e0ef      	b.n	800303c <__aeabi_dsub+0x5e0>
 8002e5c:	2a00      	cmp	r2, #0
 8002e5e:	d100      	bne.n	8002e62 <__aeabi_dsub+0x406>
 8002e60:	e0e5      	b.n	800302e <__aeabi_dsub+0x5d2>
 8002e62:	4662      	mov	r2, ip
 8002e64:	9902      	ldr	r1, [sp, #8]
 8002e66:	430a      	orrs	r2, r1
 8002e68:	d100      	bne.n	8002e6c <__aeabi_dsub+0x410>
 8002e6a:	e0c5      	b.n	8002ff8 <__aeabi_dsub+0x59c>
 8002e6c:	4663      	mov	r3, ip
 8002e6e:	18c5      	adds	r5, r0, r3
 8002e70:	468c      	mov	ip, r1
 8002e72:	4285      	cmp	r5, r0
 8002e74:	4180      	sbcs	r0, r0
 8002e76:	4464      	add	r4, ip
 8002e78:	4240      	negs	r0, r0
 8002e7a:	1824      	adds	r4, r4, r0
 8002e7c:	0223      	lsls	r3, r4, #8
 8002e7e:	d502      	bpl.n	8002e86 <__aeabi_dsub+0x42a>
 8002e80:	4bb9      	ldr	r3, [pc, #740]	@ (8003168 <__aeabi_dsub+0x70c>)
 8002e82:	3701      	adds	r7, #1
 8002e84:	401c      	ands	r4, r3
 8002e86:	46ba      	mov	sl, r7
 8002e88:	9503      	str	r5, [sp, #12]
 8002e8a:	e7d5      	b.n	8002e38 <__aeabi_dsub+0x3dc>
 8002e8c:	4662      	mov	r2, ip
 8002e8e:	1a85      	subs	r5, r0, r2
 8002e90:	42a8      	cmp	r0, r5
 8002e92:	4192      	sbcs	r2, r2
 8002e94:	4252      	negs	r2, r2
 8002e96:	4691      	mov	r9, r2
 8002e98:	9b02      	ldr	r3, [sp, #8]
 8002e9a:	1ae3      	subs	r3, r4, r3
 8002e9c:	001a      	movs	r2, r3
 8002e9e:	464b      	mov	r3, r9
 8002ea0:	1ad2      	subs	r2, r2, r3
 8002ea2:	0013      	movs	r3, r2
 8002ea4:	4691      	mov	r9, r2
 8002ea6:	021a      	lsls	r2, r3, #8
 8002ea8:	d46c      	bmi.n	8002f84 <__aeabi_dsub+0x528>
 8002eaa:	464a      	mov	r2, r9
 8002eac:	464c      	mov	r4, r9
 8002eae:	432a      	orrs	r2, r5
 8002eb0:	d000      	beq.n	8002eb4 <__aeabi_dsub+0x458>
 8002eb2:	e63a      	b.n	8002b2a <__aeabi_dsub+0xce>
 8002eb4:	2600      	movs	r6, #0
 8002eb6:	2400      	movs	r4, #0
 8002eb8:	2500      	movs	r5, #0
 8002eba:	e678      	b.n	8002bae <__aeabi_dsub+0x152>
 8002ebc:	9902      	ldr	r1, [sp, #8]
 8002ebe:	4653      	mov	r3, sl
 8002ec0:	000d      	movs	r5, r1
 8002ec2:	3a20      	subs	r2, #32
 8002ec4:	40d5      	lsrs	r5, r2
 8002ec6:	2b20      	cmp	r3, #32
 8002ec8:	d006      	beq.n	8002ed8 <__aeabi_dsub+0x47c>
 8002eca:	2240      	movs	r2, #64	@ 0x40
 8002ecc:	1ad2      	subs	r2, r2, r3
 8002ece:	000b      	movs	r3, r1
 8002ed0:	4093      	lsls	r3, r2
 8002ed2:	4662      	mov	r2, ip
 8002ed4:	431a      	orrs	r2, r3
 8002ed6:	4693      	mov	fp, r2
 8002ed8:	465b      	mov	r3, fp
 8002eda:	1e5a      	subs	r2, r3, #1
 8002edc:	4193      	sbcs	r3, r2
 8002ede:	431d      	orrs	r5, r3
 8002ee0:	e619      	b.n	8002b16 <__aeabi_dsub+0xba>
 8002ee2:	4653      	mov	r3, sl
 8002ee4:	1e5a      	subs	r2, r3, #1
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d100      	bne.n	8002eec <__aeabi_dsub+0x490>
 8002eea:	e0c6      	b.n	800307a <__aeabi_dsub+0x61e>
 8002eec:	4e9d      	ldr	r6, [pc, #628]	@ (8003164 <__aeabi_dsub+0x708>)
 8002eee:	45b2      	cmp	sl, r6
 8002ef0:	d100      	bne.n	8002ef4 <__aeabi_dsub+0x498>
 8002ef2:	e6bd      	b.n	8002c70 <__aeabi_dsub+0x214>
 8002ef4:	4688      	mov	r8, r1
 8002ef6:	000e      	movs	r6, r1
 8002ef8:	2501      	movs	r5, #1
 8002efa:	2a38      	cmp	r2, #56	@ 0x38
 8002efc:	dc10      	bgt.n	8002f20 <__aeabi_dsub+0x4c4>
 8002efe:	2a1f      	cmp	r2, #31
 8002f00:	dc7f      	bgt.n	8003002 <__aeabi_dsub+0x5a6>
 8002f02:	2120      	movs	r1, #32
 8002f04:	0025      	movs	r5, r4
 8002f06:	1a89      	subs	r1, r1, r2
 8002f08:	0007      	movs	r7, r0
 8002f0a:	4088      	lsls	r0, r1
 8002f0c:	408d      	lsls	r5, r1
 8002f0e:	40d7      	lsrs	r7, r2
 8002f10:	40d4      	lsrs	r4, r2
 8002f12:	1e41      	subs	r1, r0, #1
 8002f14:	4188      	sbcs	r0, r1
 8002f16:	9b02      	ldr	r3, [sp, #8]
 8002f18:	433d      	orrs	r5, r7
 8002f1a:	1b1b      	subs	r3, r3, r4
 8002f1c:	4305      	orrs	r5, r0
 8002f1e:	9302      	str	r3, [sp, #8]
 8002f20:	4662      	mov	r2, ip
 8002f22:	1b55      	subs	r5, r2, r5
 8002f24:	45ac      	cmp	ip, r5
 8002f26:	4192      	sbcs	r2, r2
 8002f28:	9b02      	ldr	r3, [sp, #8]
 8002f2a:	4252      	negs	r2, r2
 8002f2c:	464f      	mov	r7, r9
 8002f2e:	1a9c      	subs	r4, r3, r2
 8002f30:	e5f6      	b.n	8002b20 <__aeabi_dsub+0xc4>
 8002f32:	2d00      	cmp	r5, #0
 8002f34:	d000      	beq.n	8002f38 <__aeabi_dsub+0x4dc>
 8002f36:	e0b7      	b.n	80030a8 <__aeabi_dsub+0x64c>
 8002f38:	2a00      	cmp	r2, #0
 8002f3a:	d100      	bne.n	8002f3e <__aeabi_dsub+0x4e2>
 8002f3c:	e0f0      	b.n	8003120 <__aeabi_dsub+0x6c4>
 8002f3e:	2601      	movs	r6, #1
 8002f40:	400e      	ands	r6, r1
 8002f42:	4663      	mov	r3, ip
 8002f44:	9802      	ldr	r0, [sp, #8]
 8002f46:	08d9      	lsrs	r1, r3, #3
 8002f48:	0742      	lsls	r2, r0, #29
 8002f4a:	430a      	orrs	r2, r1
 8002f4c:	08c4      	lsrs	r4, r0, #3
 8002f4e:	e696      	b.n	8002c7e <__aeabi_dsub+0x222>
 8002f50:	4c85      	ldr	r4, [pc, #532]	@ (8003168 <__aeabi_dsub+0x70c>)
 8002f52:	1aff      	subs	r7, r7, r3
 8002f54:	4014      	ands	r4, r2
 8002f56:	0762      	lsls	r2, r4, #29
 8002f58:	08e4      	lsrs	r4, r4, #3
 8002f5a:	e760      	b.n	8002e1e <__aeabi_dsub+0x3c2>
 8002f5c:	4981      	ldr	r1, [pc, #516]	@ (8003164 <__aeabi_dsub+0x708>)
 8002f5e:	428a      	cmp	r2, r1
 8002f60:	d100      	bne.n	8002f64 <__aeabi_dsub+0x508>
 8002f62:	e0c9      	b.n	80030f8 <__aeabi_dsub+0x69c>
 8002f64:	4663      	mov	r3, ip
 8002f66:	18c1      	adds	r1, r0, r3
 8002f68:	4281      	cmp	r1, r0
 8002f6a:	4180      	sbcs	r0, r0
 8002f6c:	9b02      	ldr	r3, [sp, #8]
 8002f6e:	4240      	negs	r0, r0
 8002f70:	18e3      	adds	r3, r4, r3
 8002f72:	181b      	adds	r3, r3, r0
 8002f74:	07dd      	lsls	r5, r3, #31
 8002f76:	085c      	lsrs	r4, r3, #1
 8002f78:	2307      	movs	r3, #7
 8002f7a:	0849      	lsrs	r1, r1, #1
 8002f7c:	430d      	orrs	r5, r1
 8002f7e:	0017      	movs	r7, r2
 8002f80:	402b      	ands	r3, r5
 8002f82:	e710      	b.n	8002da6 <__aeabi_dsub+0x34a>
 8002f84:	4663      	mov	r3, ip
 8002f86:	1a1d      	subs	r5, r3, r0
 8002f88:	45ac      	cmp	ip, r5
 8002f8a:	4192      	sbcs	r2, r2
 8002f8c:	2601      	movs	r6, #1
 8002f8e:	9b02      	ldr	r3, [sp, #8]
 8002f90:	4252      	negs	r2, r2
 8002f92:	1b1c      	subs	r4, r3, r4
 8002f94:	4688      	mov	r8, r1
 8002f96:	1aa4      	subs	r4, r4, r2
 8002f98:	400e      	ands	r6, r1
 8002f9a:	e5c6      	b.n	8002b2a <__aeabi_dsub+0xce>
 8002f9c:	4663      	mov	r3, ip
 8002f9e:	18c5      	adds	r5, r0, r3
 8002fa0:	9b02      	ldr	r3, [sp, #8]
 8002fa2:	4285      	cmp	r5, r0
 8002fa4:	4180      	sbcs	r0, r0
 8002fa6:	469c      	mov	ip, r3
 8002fa8:	4240      	negs	r0, r0
 8002faa:	4464      	add	r4, ip
 8002fac:	1824      	adds	r4, r4, r0
 8002fae:	2701      	movs	r7, #1
 8002fb0:	0223      	lsls	r3, r4, #8
 8002fb2:	d400      	bmi.n	8002fb6 <__aeabi_dsub+0x55a>
 8002fb4:	e6f5      	b.n	8002da2 <__aeabi_dsub+0x346>
 8002fb6:	2702      	movs	r7, #2
 8002fb8:	e641      	b.n	8002c3e <__aeabi_dsub+0x1e2>
 8002fba:	4663      	mov	r3, ip
 8002fbc:	1ac5      	subs	r5, r0, r3
 8002fbe:	42a8      	cmp	r0, r5
 8002fc0:	4180      	sbcs	r0, r0
 8002fc2:	9b02      	ldr	r3, [sp, #8]
 8002fc4:	4240      	negs	r0, r0
 8002fc6:	1ae4      	subs	r4, r4, r3
 8002fc8:	2701      	movs	r7, #1
 8002fca:	1a24      	subs	r4, r4, r0
 8002fcc:	e5a8      	b.n	8002b20 <__aeabi_dsub+0xc4>
 8002fce:	9d02      	ldr	r5, [sp, #8]
 8002fd0:	4652      	mov	r2, sl
 8002fd2:	002b      	movs	r3, r5
 8002fd4:	3a20      	subs	r2, #32
 8002fd6:	40d3      	lsrs	r3, r2
 8002fd8:	0019      	movs	r1, r3
 8002fda:	4653      	mov	r3, sl
 8002fdc:	2b20      	cmp	r3, #32
 8002fde:	d006      	beq.n	8002fee <__aeabi_dsub+0x592>
 8002fe0:	2240      	movs	r2, #64	@ 0x40
 8002fe2:	1ad2      	subs	r2, r2, r3
 8002fe4:	002b      	movs	r3, r5
 8002fe6:	4093      	lsls	r3, r2
 8002fe8:	4662      	mov	r2, ip
 8002fea:	431a      	orrs	r2, r3
 8002fec:	4693      	mov	fp, r2
 8002fee:	465d      	mov	r5, fp
 8002ff0:	1e6b      	subs	r3, r5, #1
 8002ff2:	419d      	sbcs	r5, r3
 8002ff4:	430d      	orrs	r5, r1
 8002ff6:	e615      	b.n	8002c24 <__aeabi_dsub+0x1c8>
 8002ff8:	0762      	lsls	r2, r4, #29
 8002ffa:	08c0      	lsrs	r0, r0, #3
 8002ffc:	4302      	orrs	r2, r0
 8002ffe:	08e4      	lsrs	r4, r4, #3
 8003000:	e70d      	b.n	8002e1e <__aeabi_dsub+0x3c2>
 8003002:	0011      	movs	r1, r2
 8003004:	0027      	movs	r7, r4
 8003006:	3920      	subs	r1, #32
 8003008:	40cf      	lsrs	r7, r1
 800300a:	2a20      	cmp	r2, #32
 800300c:	d005      	beq.n	800301a <__aeabi_dsub+0x5be>
 800300e:	2140      	movs	r1, #64	@ 0x40
 8003010:	1a8a      	subs	r2, r1, r2
 8003012:	4094      	lsls	r4, r2
 8003014:	0025      	movs	r5, r4
 8003016:	4305      	orrs	r5, r0
 8003018:	9503      	str	r5, [sp, #12]
 800301a:	9d03      	ldr	r5, [sp, #12]
 800301c:	1e6a      	subs	r2, r5, #1
 800301e:	4195      	sbcs	r5, r2
 8003020:	433d      	orrs	r5, r7
 8003022:	e77d      	b.n	8002f20 <__aeabi_dsub+0x4c4>
 8003024:	2a00      	cmp	r2, #0
 8003026:	d100      	bne.n	800302a <__aeabi_dsub+0x5ce>
 8003028:	e744      	b.n	8002eb4 <__aeabi_dsub+0x458>
 800302a:	2601      	movs	r6, #1
 800302c:	400e      	ands	r6, r1
 800302e:	4663      	mov	r3, ip
 8003030:	08d9      	lsrs	r1, r3, #3
 8003032:	9b02      	ldr	r3, [sp, #8]
 8003034:	075a      	lsls	r2, r3, #29
 8003036:	430a      	orrs	r2, r1
 8003038:	08dc      	lsrs	r4, r3, #3
 800303a:	e6f0      	b.n	8002e1e <__aeabi_dsub+0x3c2>
 800303c:	2a00      	cmp	r2, #0
 800303e:	d028      	beq.n	8003092 <__aeabi_dsub+0x636>
 8003040:	4662      	mov	r2, ip
 8003042:	9f02      	ldr	r7, [sp, #8]
 8003044:	08c0      	lsrs	r0, r0, #3
 8003046:	433a      	orrs	r2, r7
 8003048:	d100      	bne.n	800304c <__aeabi_dsub+0x5f0>
 800304a:	e6dc      	b.n	8002e06 <__aeabi_dsub+0x3aa>
 800304c:	0762      	lsls	r2, r4, #29
 800304e:	4310      	orrs	r0, r2
 8003050:	2280      	movs	r2, #128	@ 0x80
 8003052:	08e4      	lsrs	r4, r4, #3
 8003054:	0312      	lsls	r2, r2, #12
 8003056:	4214      	tst	r4, r2
 8003058:	d009      	beq.n	800306e <__aeabi_dsub+0x612>
 800305a:	08fd      	lsrs	r5, r7, #3
 800305c:	4215      	tst	r5, r2
 800305e:	d106      	bne.n	800306e <__aeabi_dsub+0x612>
 8003060:	4663      	mov	r3, ip
 8003062:	2601      	movs	r6, #1
 8003064:	002c      	movs	r4, r5
 8003066:	08d8      	lsrs	r0, r3, #3
 8003068:	077b      	lsls	r3, r7, #29
 800306a:	4318      	orrs	r0, r3
 800306c:	400e      	ands	r6, r1
 800306e:	0f42      	lsrs	r2, r0, #29
 8003070:	00c0      	lsls	r0, r0, #3
 8003072:	08c0      	lsrs	r0, r0, #3
 8003074:	0752      	lsls	r2, r2, #29
 8003076:	4302      	orrs	r2, r0
 8003078:	e601      	b.n	8002c7e <__aeabi_dsub+0x222>
 800307a:	4663      	mov	r3, ip
 800307c:	1a1d      	subs	r5, r3, r0
 800307e:	45ac      	cmp	ip, r5
 8003080:	4192      	sbcs	r2, r2
 8003082:	9b02      	ldr	r3, [sp, #8]
 8003084:	4252      	negs	r2, r2
 8003086:	1b1c      	subs	r4, r3, r4
 8003088:	000e      	movs	r6, r1
 800308a:	4688      	mov	r8, r1
 800308c:	2701      	movs	r7, #1
 800308e:	1aa4      	subs	r4, r4, r2
 8003090:	e546      	b.n	8002b20 <__aeabi_dsub+0xc4>
 8003092:	4663      	mov	r3, ip
 8003094:	08d9      	lsrs	r1, r3, #3
 8003096:	9b02      	ldr	r3, [sp, #8]
 8003098:	075a      	lsls	r2, r3, #29
 800309a:	430a      	orrs	r2, r1
 800309c:	08dc      	lsrs	r4, r3, #3
 800309e:	e5ee      	b.n	8002c7e <__aeabi_dsub+0x222>
 80030a0:	4663      	mov	r3, ip
 80030a2:	9c02      	ldr	r4, [sp, #8]
 80030a4:	9303      	str	r3, [sp, #12]
 80030a6:	e6c7      	b.n	8002e38 <__aeabi_dsub+0x3dc>
 80030a8:	08c0      	lsrs	r0, r0, #3
 80030aa:	2a00      	cmp	r2, #0
 80030ac:	d100      	bne.n	80030b0 <__aeabi_dsub+0x654>
 80030ae:	e6aa      	b.n	8002e06 <__aeabi_dsub+0x3aa>
 80030b0:	0762      	lsls	r2, r4, #29
 80030b2:	4310      	orrs	r0, r2
 80030b4:	2280      	movs	r2, #128	@ 0x80
 80030b6:	08e4      	lsrs	r4, r4, #3
 80030b8:	0312      	lsls	r2, r2, #12
 80030ba:	4214      	tst	r4, r2
 80030bc:	d0d7      	beq.n	800306e <__aeabi_dsub+0x612>
 80030be:	9f02      	ldr	r7, [sp, #8]
 80030c0:	08fd      	lsrs	r5, r7, #3
 80030c2:	4215      	tst	r5, r2
 80030c4:	d1d3      	bne.n	800306e <__aeabi_dsub+0x612>
 80030c6:	4663      	mov	r3, ip
 80030c8:	2601      	movs	r6, #1
 80030ca:	08d8      	lsrs	r0, r3, #3
 80030cc:	077b      	lsls	r3, r7, #29
 80030ce:	002c      	movs	r4, r5
 80030d0:	4318      	orrs	r0, r3
 80030d2:	400e      	ands	r6, r1
 80030d4:	e7cb      	b.n	800306e <__aeabi_dsub+0x612>
 80030d6:	000a      	movs	r2, r1
 80030d8:	0027      	movs	r7, r4
 80030da:	3a20      	subs	r2, #32
 80030dc:	40d7      	lsrs	r7, r2
 80030de:	2920      	cmp	r1, #32
 80030e0:	d005      	beq.n	80030ee <__aeabi_dsub+0x692>
 80030e2:	2240      	movs	r2, #64	@ 0x40
 80030e4:	1a52      	subs	r2, r2, r1
 80030e6:	4094      	lsls	r4, r2
 80030e8:	0025      	movs	r5, r4
 80030ea:	4305      	orrs	r5, r0
 80030ec:	9503      	str	r5, [sp, #12]
 80030ee:	9d03      	ldr	r5, [sp, #12]
 80030f0:	1e6a      	subs	r2, r5, #1
 80030f2:	4195      	sbcs	r5, r2
 80030f4:	432f      	orrs	r7, r5
 80030f6:	e610      	b.n	8002d1a <__aeabi_dsub+0x2be>
 80030f8:	0014      	movs	r4, r2
 80030fa:	2500      	movs	r5, #0
 80030fc:	2200      	movs	r2, #0
 80030fe:	e556      	b.n	8002bae <__aeabi_dsub+0x152>
 8003100:	9b02      	ldr	r3, [sp, #8]
 8003102:	4460      	add	r0, ip
 8003104:	4699      	mov	r9, r3
 8003106:	4560      	cmp	r0, ip
 8003108:	4192      	sbcs	r2, r2
 800310a:	444c      	add	r4, r9
 800310c:	4252      	negs	r2, r2
 800310e:	0005      	movs	r5, r0
 8003110:	18a4      	adds	r4, r4, r2
 8003112:	e74c      	b.n	8002fae <__aeabi_dsub+0x552>
 8003114:	001a      	movs	r2, r3
 8003116:	001c      	movs	r4, r3
 8003118:	432a      	orrs	r2, r5
 800311a:	d000      	beq.n	800311e <__aeabi_dsub+0x6c2>
 800311c:	e6b3      	b.n	8002e86 <__aeabi_dsub+0x42a>
 800311e:	e6c9      	b.n	8002eb4 <__aeabi_dsub+0x458>
 8003120:	2480      	movs	r4, #128	@ 0x80
 8003122:	2600      	movs	r6, #0
 8003124:	0324      	lsls	r4, r4, #12
 8003126:	e5ae      	b.n	8002c86 <__aeabi_dsub+0x22a>
 8003128:	2120      	movs	r1, #32
 800312a:	2500      	movs	r5, #0
 800312c:	1a09      	subs	r1, r1, r0
 800312e:	e517      	b.n	8002b60 <__aeabi_dsub+0x104>
 8003130:	2200      	movs	r2, #0
 8003132:	2500      	movs	r5, #0
 8003134:	4c0b      	ldr	r4, [pc, #44]	@ (8003164 <__aeabi_dsub+0x708>)
 8003136:	e53a      	b.n	8002bae <__aeabi_dsub+0x152>
 8003138:	2d00      	cmp	r5, #0
 800313a:	d100      	bne.n	800313e <__aeabi_dsub+0x6e2>
 800313c:	e5f6      	b.n	8002d2c <__aeabi_dsub+0x2d0>
 800313e:	464b      	mov	r3, r9
 8003140:	1bda      	subs	r2, r3, r7
 8003142:	4692      	mov	sl, r2
 8003144:	2f00      	cmp	r7, #0
 8003146:	d100      	bne.n	800314a <__aeabi_dsub+0x6ee>
 8003148:	e66f      	b.n	8002e2a <__aeabi_dsub+0x3ce>
 800314a:	2a38      	cmp	r2, #56	@ 0x38
 800314c:	dc05      	bgt.n	800315a <__aeabi_dsub+0x6fe>
 800314e:	2680      	movs	r6, #128	@ 0x80
 8003150:	0436      	lsls	r6, r6, #16
 8003152:	4334      	orrs	r4, r6
 8003154:	4688      	mov	r8, r1
 8003156:	000e      	movs	r6, r1
 8003158:	e6d1      	b.n	8002efe <__aeabi_dsub+0x4a2>
 800315a:	4688      	mov	r8, r1
 800315c:	000e      	movs	r6, r1
 800315e:	2501      	movs	r5, #1
 8003160:	e6de      	b.n	8002f20 <__aeabi_dsub+0x4c4>
 8003162:	46c0      	nop			@ (mov r8, r8)
 8003164:	000007ff 	.word	0x000007ff
 8003168:	ff7fffff 	.word	0xff7fffff
 800316c:	000007fe 	.word	0x000007fe
 8003170:	2d00      	cmp	r5, #0
 8003172:	d100      	bne.n	8003176 <__aeabi_dsub+0x71a>
 8003174:	e668      	b.n	8002e48 <__aeabi_dsub+0x3ec>
 8003176:	464b      	mov	r3, r9
 8003178:	1bd9      	subs	r1, r3, r7
 800317a:	2f00      	cmp	r7, #0
 800317c:	d101      	bne.n	8003182 <__aeabi_dsub+0x726>
 800317e:	468a      	mov	sl, r1
 8003180:	e5a7      	b.n	8002cd2 <__aeabi_dsub+0x276>
 8003182:	2701      	movs	r7, #1
 8003184:	2938      	cmp	r1, #56	@ 0x38
 8003186:	dd00      	ble.n	800318a <__aeabi_dsub+0x72e>
 8003188:	e5c7      	b.n	8002d1a <__aeabi_dsub+0x2be>
 800318a:	2280      	movs	r2, #128	@ 0x80
 800318c:	0412      	lsls	r2, r2, #16
 800318e:	4314      	orrs	r4, r2
 8003190:	e5af      	b.n	8002cf2 <__aeabi_dsub+0x296>
 8003192:	46c0      	nop			@ (mov r8, r8)

08003194 <__aeabi_dcmpun>:
 8003194:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003196:	46c6      	mov	lr, r8
 8003198:	031e      	lsls	r6, r3, #12
 800319a:	0b36      	lsrs	r6, r6, #12
 800319c:	46b0      	mov	r8, r6
 800319e:	4e0d      	ldr	r6, [pc, #52]	@ (80031d4 <__aeabi_dcmpun+0x40>)
 80031a0:	030c      	lsls	r4, r1, #12
 80031a2:	004d      	lsls	r5, r1, #1
 80031a4:	005f      	lsls	r7, r3, #1
 80031a6:	b500      	push	{lr}
 80031a8:	0b24      	lsrs	r4, r4, #12
 80031aa:	0d6d      	lsrs	r5, r5, #21
 80031ac:	0d7f      	lsrs	r7, r7, #21
 80031ae:	42b5      	cmp	r5, r6
 80031b0:	d00b      	beq.n	80031ca <__aeabi_dcmpun+0x36>
 80031b2:	4908      	ldr	r1, [pc, #32]	@ (80031d4 <__aeabi_dcmpun+0x40>)
 80031b4:	2000      	movs	r0, #0
 80031b6:	428f      	cmp	r7, r1
 80031b8:	d104      	bne.n	80031c4 <__aeabi_dcmpun+0x30>
 80031ba:	4646      	mov	r6, r8
 80031bc:	4316      	orrs	r6, r2
 80031be:	0030      	movs	r0, r6
 80031c0:	1e43      	subs	r3, r0, #1
 80031c2:	4198      	sbcs	r0, r3
 80031c4:	bc80      	pop	{r7}
 80031c6:	46b8      	mov	r8, r7
 80031c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80031ca:	4304      	orrs	r4, r0
 80031cc:	2001      	movs	r0, #1
 80031ce:	2c00      	cmp	r4, #0
 80031d0:	d1f8      	bne.n	80031c4 <__aeabi_dcmpun+0x30>
 80031d2:	e7ee      	b.n	80031b2 <__aeabi_dcmpun+0x1e>
 80031d4:	000007ff 	.word	0x000007ff

080031d8 <__aeabi_d2iz>:
 80031d8:	000b      	movs	r3, r1
 80031da:	0002      	movs	r2, r0
 80031dc:	b570      	push	{r4, r5, r6, lr}
 80031de:	4d16      	ldr	r5, [pc, #88]	@ (8003238 <__aeabi_d2iz+0x60>)
 80031e0:	030c      	lsls	r4, r1, #12
 80031e2:	b082      	sub	sp, #8
 80031e4:	0049      	lsls	r1, r1, #1
 80031e6:	2000      	movs	r0, #0
 80031e8:	9200      	str	r2, [sp, #0]
 80031ea:	9301      	str	r3, [sp, #4]
 80031ec:	0b24      	lsrs	r4, r4, #12
 80031ee:	0d49      	lsrs	r1, r1, #21
 80031f0:	0fde      	lsrs	r6, r3, #31
 80031f2:	42a9      	cmp	r1, r5
 80031f4:	dd04      	ble.n	8003200 <__aeabi_d2iz+0x28>
 80031f6:	4811      	ldr	r0, [pc, #68]	@ (800323c <__aeabi_d2iz+0x64>)
 80031f8:	4281      	cmp	r1, r0
 80031fa:	dd03      	ble.n	8003204 <__aeabi_d2iz+0x2c>
 80031fc:	4b10      	ldr	r3, [pc, #64]	@ (8003240 <__aeabi_d2iz+0x68>)
 80031fe:	18f0      	adds	r0, r6, r3
 8003200:	b002      	add	sp, #8
 8003202:	bd70      	pop	{r4, r5, r6, pc}
 8003204:	2080      	movs	r0, #128	@ 0x80
 8003206:	0340      	lsls	r0, r0, #13
 8003208:	4320      	orrs	r0, r4
 800320a:	4c0e      	ldr	r4, [pc, #56]	@ (8003244 <__aeabi_d2iz+0x6c>)
 800320c:	1a64      	subs	r4, r4, r1
 800320e:	2c1f      	cmp	r4, #31
 8003210:	dd08      	ble.n	8003224 <__aeabi_d2iz+0x4c>
 8003212:	4b0d      	ldr	r3, [pc, #52]	@ (8003248 <__aeabi_d2iz+0x70>)
 8003214:	1a5b      	subs	r3, r3, r1
 8003216:	40d8      	lsrs	r0, r3
 8003218:	0003      	movs	r3, r0
 800321a:	4258      	negs	r0, r3
 800321c:	2e00      	cmp	r6, #0
 800321e:	d1ef      	bne.n	8003200 <__aeabi_d2iz+0x28>
 8003220:	0018      	movs	r0, r3
 8003222:	e7ed      	b.n	8003200 <__aeabi_d2iz+0x28>
 8003224:	4b09      	ldr	r3, [pc, #36]	@ (800324c <__aeabi_d2iz+0x74>)
 8003226:	9a00      	ldr	r2, [sp, #0]
 8003228:	469c      	mov	ip, r3
 800322a:	0003      	movs	r3, r0
 800322c:	4461      	add	r1, ip
 800322e:	408b      	lsls	r3, r1
 8003230:	40e2      	lsrs	r2, r4
 8003232:	4313      	orrs	r3, r2
 8003234:	e7f1      	b.n	800321a <__aeabi_d2iz+0x42>
 8003236:	46c0      	nop			@ (mov r8, r8)
 8003238:	000003fe 	.word	0x000003fe
 800323c:	0000041d 	.word	0x0000041d
 8003240:	7fffffff 	.word	0x7fffffff
 8003244:	00000433 	.word	0x00000433
 8003248:	00000413 	.word	0x00000413
 800324c:	fffffbed 	.word	0xfffffbed

08003250 <__aeabi_i2d>:
 8003250:	b570      	push	{r4, r5, r6, lr}
 8003252:	2800      	cmp	r0, #0
 8003254:	d016      	beq.n	8003284 <__aeabi_i2d+0x34>
 8003256:	17c3      	asrs	r3, r0, #31
 8003258:	18c5      	adds	r5, r0, r3
 800325a:	405d      	eors	r5, r3
 800325c:	0fc4      	lsrs	r4, r0, #31
 800325e:	0028      	movs	r0, r5
 8003260:	f000 f8cc 	bl	80033fc <__clzsi2>
 8003264:	4b10      	ldr	r3, [pc, #64]	@ (80032a8 <__aeabi_i2d+0x58>)
 8003266:	1a1b      	subs	r3, r3, r0
 8003268:	055b      	lsls	r3, r3, #21
 800326a:	0d5b      	lsrs	r3, r3, #21
 800326c:	280a      	cmp	r0, #10
 800326e:	dc14      	bgt.n	800329a <__aeabi_i2d+0x4a>
 8003270:	0002      	movs	r2, r0
 8003272:	002e      	movs	r6, r5
 8003274:	3215      	adds	r2, #21
 8003276:	4096      	lsls	r6, r2
 8003278:	220b      	movs	r2, #11
 800327a:	1a12      	subs	r2, r2, r0
 800327c:	40d5      	lsrs	r5, r2
 800327e:	032d      	lsls	r5, r5, #12
 8003280:	0b2d      	lsrs	r5, r5, #12
 8003282:	e003      	b.n	800328c <__aeabi_i2d+0x3c>
 8003284:	2400      	movs	r4, #0
 8003286:	2300      	movs	r3, #0
 8003288:	2500      	movs	r5, #0
 800328a:	2600      	movs	r6, #0
 800328c:	051b      	lsls	r3, r3, #20
 800328e:	432b      	orrs	r3, r5
 8003290:	07e4      	lsls	r4, r4, #31
 8003292:	4323      	orrs	r3, r4
 8003294:	0030      	movs	r0, r6
 8003296:	0019      	movs	r1, r3
 8003298:	bd70      	pop	{r4, r5, r6, pc}
 800329a:	380b      	subs	r0, #11
 800329c:	4085      	lsls	r5, r0
 800329e:	032d      	lsls	r5, r5, #12
 80032a0:	2600      	movs	r6, #0
 80032a2:	0b2d      	lsrs	r5, r5, #12
 80032a4:	e7f2      	b.n	800328c <__aeabi_i2d+0x3c>
 80032a6:	46c0      	nop			@ (mov r8, r8)
 80032a8:	0000041e 	.word	0x0000041e

080032ac <__aeabi_ui2d>:
 80032ac:	b510      	push	{r4, lr}
 80032ae:	1e04      	subs	r4, r0, #0
 80032b0:	d010      	beq.n	80032d4 <__aeabi_ui2d+0x28>
 80032b2:	f000 f8a3 	bl	80033fc <__clzsi2>
 80032b6:	4b0e      	ldr	r3, [pc, #56]	@ (80032f0 <__aeabi_ui2d+0x44>)
 80032b8:	1a1b      	subs	r3, r3, r0
 80032ba:	055b      	lsls	r3, r3, #21
 80032bc:	0d5b      	lsrs	r3, r3, #21
 80032be:	280a      	cmp	r0, #10
 80032c0:	dc0f      	bgt.n	80032e2 <__aeabi_ui2d+0x36>
 80032c2:	220b      	movs	r2, #11
 80032c4:	0021      	movs	r1, r4
 80032c6:	1a12      	subs	r2, r2, r0
 80032c8:	40d1      	lsrs	r1, r2
 80032ca:	3015      	adds	r0, #21
 80032cc:	030a      	lsls	r2, r1, #12
 80032ce:	4084      	lsls	r4, r0
 80032d0:	0b12      	lsrs	r2, r2, #12
 80032d2:	e001      	b.n	80032d8 <__aeabi_ui2d+0x2c>
 80032d4:	2300      	movs	r3, #0
 80032d6:	2200      	movs	r2, #0
 80032d8:	051b      	lsls	r3, r3, #20
 80032da:	4313      	orrs	r3, r2
 80032dc:	0020      	movs	r0, r4
 80032de:	0019      	movs	r1, r3
 80032e0:	bd10      	pop	{r4, pc}
 80032e2:	0022      	movs	r2, r4
 80032e4:	380b      	subs	r0, #11
 80032e6:	4082      	lsls	r2, r0
 80032e8:	0312      	lsls	r2, r2, #12
 80032ea:	2400      	movs	r4, #0
 80032ec:	0b12      	lsrs	r2, r2, #12
 80032ee:	e7f3      	b.n	80032d8 <__aeabi_ui2d+0x2c>
 80032f0:	0000041e 	.word	0x0000041e

080032f4 <__aeabi_d2f>:
 80032f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032f6:	004b      	lsls	r3, r1, #1
 80032f8:	030f      	lsls	r7, r1, #12
 80032fa:	0d5b      	lsrs	r3, r3, #21
 80032fc:	4c3b      	ldr	r4, [pc, #236]	@ (80033ec <__aeabi_d2f+0xf8>)
 80032fe:	0f45      	lsrs	r5, r0, #29
 8003300:	b083      	sub	sp, #12
 8003302:	0a7f      	lsrs	r7, r7, #9
 8003304:	1c5e      	adds	r6, r3, #1
 8003306:	432f      	orrs	r7, r5
 8003308:	9000      	str	r0, [sp, #0]
 800330a:	9101      	str	r1, [sp, #4]
 800330c:	0fca      	lsrs	r2, r1, #31
 800330e:	00c5      	lsls	r5, r0, #3
 8003310:	4226      	tst	r6, r4
 8003312:	d00b      	beq.n	800332c <__aeabi_d2f+0x38>
 8003314:	4936      	ldr	r1, [pc, #216]	@ (80033f0 <__aeabi_d2f+0xfc>)
 8003316:	185c      	adds	r4, r3, r1
 8003318:	2cfe      	cmp	r4, #254	@ 0xfe
 800331a:	dd13      	ble.n	8003344 <__aeabi_d2f+0x50>
 800331c:	20ff      	movs	r0, #255	@ 0xff
 800331e:	2300      	movs	r3, #0
 8003320:	05c0      	lsls	r0, r0, #23
 8003322:	4318      	orrs	r0, r3
 8003324:	07d2      	lsls	r2, r2, #31
 8003326:	4310      	orrs	r0, r2
 8003328:	b003      	add	sp, #12
 800332a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800332c:	2b00      	cmp	r3, #0
 800332e:	d102      	bne.n	8003336 <__aeabi_d2f+0x42>
 8003330:	2000      	movs	r0, #0
 8003332:	2300      	movs	r3, #0
 8003334:	e7f4      	b.n	8003320 <__aeabi_d2f+0x2c>
 8003336:	433d      	orrs	r5, r7
 8003338:	d0f0      	beq.n	800331c <__aeabi_d2f+0x28>
 800333a:	2380      	movs	r3, #128	@ 0x80
 800333c:	03db      	lsls	r3, r3, #15
 800333e:	20ff      	movs	r0, #255	@ 0xff
 8003340:	433b      	orrs	r3, r7
 8003342:	e7ed      	b.n	8003320 <__aeabi_d2f+0x2c>
 8003344:	2c00      	cmp	r4, #0
 8003346:	dd14      	ble.n	8003372 <__aeabi_d2f+0x7e>
 8003348:	9b00      	ldr	r3, [sp, #0]
 800334a:	00ff      	lsls	r7, r7, #3
 800334c:	019b      	lsls	r3, r3, #6
 800334e:	1e58      	subs	r0, r3, #1
 8003350:	4183      	sbcs	r3, r0
 8003352:	0f69      	lsrs	r1, r5, #29
 8003354:	433b      	orrs	r3, r7
 8003356:	430b      	orrs	r3, r1
 8003358:	0759      	lsls	r1, r3, #29
 800335a:	d041      	beq.n	80033e0 <__aeabi_d2f+0xec>
 800335c:	210f      	movs	r1, #15
 800335e:	4019      	ands	r1, r3
 8003360:	2904      	cmp	r1, #4
 8003362:	d028      	beq.n	80033b6 <__aeabi_d2f+0xc2>
 8003364:	3304      	adds	r3, #4
 8003366:	0159      	lsls	r1, r3, #5
 8003368:	d525      	bpl.n	80033b6 <__aeabi_d2f+0xc2>
 800336a:	3401      	adds	r4, #1
 800336c:	2300      	movs	r3, #0
 800336e:	b2e0      	uxtb	r0, r4
 8003370:	e7d6      	b.n	8003320 <__aeabi_d2f+0x2c>
 8003372:	0021      	movs	r1, r4
 8003374:	3117      	adds	r1, #23
 8003376:	dbdb      	blt.n	8003330 <__aeabi_d2f+0x3c>
 8003378:	2180      	movs	r1, #128	@ 0x80
 800337a:	201e      	movs	r0, #30
 800337c:	0409      	lsls	r1, r1, #16
 800337e:	4339      	orrs	r1, r7
 8003380:	1b00      	subs	r0, r0, r4
 8003382:	281f      	cmp	r0, #31
 8003384:	dd1b      	ble.n	80033be <__aeabi_d2f+0xca>
 8003386:	2602      	movs	r6, #2
 8003388:	4276      	negs	r6, r6
 800338a:	1b34      	subs	r4, r6, r4
 800338c:	000e      	movs	r6, r1
 800338e:	40e6      	lsrs	r6, r4
 8003390:	0034      	movs	r4, r6
 8003392:	2820      	cmp	r0, #32
 8003394:	d004      	beq.n	80033a0 <__aeabi_d2f+0xac>
 8003396:	4817      	ldr	r0, [pc, #92]	@ (80033f4 <__aeabi_d2f+0x100>)
 8003398:	4684      	mov	ip, r0
 800339a:	4463      	add	r3, ip
 800339c:	4099      	lsls	r1, r3
 800339e:	430d      	orrs	r5, r1
 80033a0:	002b      	movs	r3, r5
 80033a2:	1e59      	subs	r1, r3, #1
 80033a4:	418b      	sbcs	r3, r1
 80033a6:	4323      	orrs	r3, r4
 80033a8:	0759      	lsls	r1, r3, #29
 80033aa:	d015      	beq.n	80033d8 <__aeabi_d2f+0xe4>
 80033ac:	210f      	movs	r1, #15
 80033ae:	2400      	movs	r4, #0
 80033b0:	4019      	ands	r1, r3
 80033b2:	2904      	cmp	r1, #4
 80033b4:	d117      	bne.n	80033e6 <__aeabi_d2f+0xf2>
 80033b6:	019b      	lsls	r3, r3, #6
 80033b8:	0a5b      	lsrs	r3, r3, #9
 80033ba:	b2e0      	uxtb	r0, r4
 80033bc:	e7b0      	b.n	8003320 <__aeabi_d2f+0x2c>
 80033be:	4c0e      	ldr	r4, [pc, #56]	@ (80033f8 <__aeabi_d2f+0x104>)
 80033c0:	191c      	adds	r4, r3, r4
 80033c2:	002b      	movs	r3, r5
 80033c4:	40a5      	lsls	r5, r4
 80033c6:	40c3      	lsrs	r3, r0
 80033c8:	40a1      	lsls	r1, r4
 80033ca:	1e68      	subs	r0, r5, #1
 80033cc:	4185      	sbcs	r5, r0
 80033ce:	4329      	orrs	r1, r5
 80033d0:	430b      	orrs	r3, r1
 80033d2:	2400      	movs	r4, #0
 80033d4:	0759      	lsls	r1, r3, #29
 80033d6:	d1c1      	bne.n	800335c <__aeabi_d2f+0x68>
 80033d8:	019b      	lsls	r3, r3, #6
 80033da:	2000      	movs	r0, #0
 80033dc:	0a5b      	lsrs	r3, r3, #9
 80033de:	e79f      	b.n	8003320 <__aeabi_d2f+0x2c>
 80033e0:	08db      	lsrs	r3, r3, #3
 80033e2:	b2e0      	uxtb	r0, r4
 80033e4:	e79c      	b.n	8003320 <__aeabi_d2f+0x2c>
 80033e6:	3304      	adds	r3, #4
 80033e8:	e7e5      	b.n	80033b6 <__aeabi_d2f+0xc2>
 80033ea:	46c0      	nop			@ (mov r8, r8)
 80033ec:	000007fe 	.word	0x000007fe
 80033f0:	fffffc80 	.word	0xfffffc80
 80033f4:	fffffca2 	.word	0xfffffca2
 80033f8:	fffffc82 	.word	0xfffffc82

080033fc <__clzsi2>:
 80033fc:	211c      	movs	r1, #28
 80033fe:	2301      	movs	r3, #1
 8003400:	041b      	lsls	r3, r3, #16
 8003402:	4298      	cmp	r0, r3
 8003404:	d301      	bcc.n	800340a <__clzsi2+0xe>
 8003406:	0c00      	lsrs	r0, r0, #16
 8003408:	3910      	subs	r1, #16
 800340a:	0a1b      	lsrs	r3, r3, #8
 800340c:	4298      	cmp	r0, r3
 800340e:	d301      	bcc.n	8003414 <__clzsi2+0x18>
 8003410:	0a00      	lsrs	r0, r0, #8
 8003412:	3908      	subs	r1, #8
 8003414:	091b      	lsrs	r3, r3, #4
 8003416:	4298      	cmp	r0, r3
 8003418:	d301      	bcc.n	800341e <__clzsi2+0x22>
 800341a:	0900      	lsrs	r0, r0, #4
 800341c:	3904      	subs	r1, #4
 800341e:	a202      	add	r2, pc, #8	@ (adr r2, 8003428 <__clzsi2+0x2c>)
 8003420:	5c10      	ldrb	r0, [r2, r0]
 8003422:	1840      	adds	r0, r0, r1
 8003424:	4770      	bx	lr
 8003426:	46c0      	nop			@ (mov r8, r8)
 8003428:	02020304 	.word	0x02020304
 800342c:	01010101 	.word	0x01010101
	...

08003438 <__clzdi2>:
 8003438:	b510      	push	{r4, lr}
 800343a:	2900      	cmp	r1, #0
 800343c:	d103      	bne.n	8003446 <__clzdi2+0xe>
 800343e:	f7ff ffdd 	bl	80033fc <__clzsi2>
 8003442:	3020      	adds	r0, #32
 8003444:	e002      	b.n	800344c <__clzdi2+0x14>
 8003446:	0008      	movs	r0, r1
 8003448:	f7ff ffd8 	bl	80033fc <__clzsi2>
 800344c:	bd10      	pop	{r4, pc}
 800344e:	46c0      	nop			@ (mov r8, r8)

08003450 <ESP_Init>:
static char* AT_OkResponse = "OK\r\n";

static ESP_States EspState = ESP_STATE_OFF;


void ESP_Init(UART_HandleTypeDef* espUart) {
 8003450:	b580      	push	{r7, lr}
 8003452:	b082      	sub	sp, #8
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  EspUart = espUart;
 8003458:	4b04      	ldr	r3, [pc, #16]	@ (800346c <ESP_Init+0x1c>)
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	601a      	str	r2, [r3, #0]
  EspState = ESP_STATE_INIT;
 800345e:	4b04      	ldr	r3, [pc, #16]	@ (8003470 <ESP_Init+0x20>)
 8003460:	2204      	movs	r2, #4
 8003462:	701a      	strb	r2, [r3, #0]
}
 8003464:	46c0      	nop			@ (mov r8, r8)
 8003466:	46bd      	mov	sp, r7
 8003468:	b002      	add	sp, #8
 800346a:	bd80      	pop	{r7, pc}
 800346c:	2000022c 	.word	0x2000022c
 8003470:	20000241 	.word	0x20000241

08003474 <ESP_Send>:

static bool ESP_Send(uint8_t* command, uint8_t length) {
 8003474:	b5b0      	push	{r4, r5, r7, lr}
 8003476:	b084      	sub	sp, #16
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
 800347c:	000a      	movs	r2, r1
 800347e:	1cfb      	adds	r3, r7, #3
 8003480:	701a      	strb	r2, [r3, #0]
  TxComplete = false;
 8003482:	4b12      	ldr	r3, [pc, #72]	@ (80034cc <ESP_Send+0x58>)
 8003484:	2200      	movs	r2, #0
 8003486:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_UART_Transmit_DMA(EspUart, command, length);
 8003488:	4b11      	ldr	r3, [pc, #68]	@ (80034d0 <ESP_Send+0x5c>)
 800348a:	6818      	ldr	r0, [r3, #0]
 800348c:	1cfb      	adds	r3, r7, #3
 800348e:	781b      	ldrb	r3, [r3, #0]
 8003490:	b29a      	uxth	r2, r3
 8003492:	250f      	movs	r5, #15
 8003494:	197c      	adds	r4, r7, r5
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	0019      	movs	r1, r3
 800349a:	f007 fb77 	bl	800ab8c <HAL_UART_Transmit_DMA>
 800349e:	0003      	movs	r3, r0
 80034a0:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 80034a2:	197b      	adds	r3, r7, r5
 80034a4:	781b      	ldrb	r3, [r3, #0]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d00a      	beq.n	80034c0 <ESP_Send+0x4c>
    Debug("Error in HAL_UART_Transmit_DMA");
 80034aa:	4a0a      	ldr	r2, [pc, #40]	@ (80034d4 <ESP_Send+0x60>)
 80034ac:	4b0a      	ldr	r3, [pc, #40]	@ (80034d8 <ESP_Send+0x64>)
 80034ae:	0019      	movs	r1, r3
 80034b0:	2003      	movs	r0, #3
 80034b2:	f002 fd71 	bl	8005f98 <CreateLine>
    TxComplete = true;
 80034b6:	4b05      	ldr	r3, [pc, #20]	@ (80034cc <ESP_Send+0x58>)
 80034b8:	2201      	movs	r2, #1
 80034ba:	701a      	strb	r2, [r3, #0]
    return false;
 80034bc:	2300      	movs	r3, #0
 80034be:	e000      	b.n	80034c2 <ESP_Send+0x4e>
  }
  return true;
 80034c0:	2301      	movs	r3, #1
}
 80034c2:	0018      	movs	r0, r3
 80034c4:	46bd      	mov	sp, r7
 80034c6:	b004      	add	sp, #16
 80034c8:	bdb0      	pop	{r4, r5, r7, pc}
 80034ca:	46c0      	nop			@ (mov r8, r8)
 80034cc:	20000230 	.word	0x20000230
 80034d0:	2000022c 	.word	0x2000022c
 80034d4:	0800f540 	.word	0x0800f540
 80034d8:	0800f560 	.word	0x0800f560

080034dc <ESP_Receive>:

static bool ESP_Receive(uint8_t* reply, uint8_t length) {
 80034dc:	b5b0      	push	{r4, r5, r7, lr}
 80034de:	b084      	sub	sp, #16
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
 80034e4:	000a      	movs	r2, r1
 80034e6:	1cfb      	adds	r3, r7, #3
 80034e8:	701a      	strb	r2, [r3, #0]
  RxComplete = false;
 80034ea:	4b12      	ldr	r3, [pc, #72]	@ (8003534 <ESP_Receive+0x58>)
 80034ec:	2200      	movs	r2, #0
 80034ee:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_UART_Receive_DMA(EspUart, reply, length);
 80034f0:	4b11      	ldr	r3, [pc, #68]	@ (8003538 <ESP_Receive+0x5c>)
 80034f2:	6818      	ldr	r0, [r3, #0]
 80034f4:	1cfb      	adds	r3, r7, #3
 80034f6:	781b      	ldrb	r3, [r3, #0]
 80034f8:	b29a      	uxth	r2, r3
 80034fa:	250f      	movs	r5, #15
 80034fc:	197c      	adds	r4, r7, r5
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	0019      	movs	r1, r3
 8003502:	f007 fbd3 	bl	800acac <HAL_UART_Receive_DMA>
 8003506:	0003      	movs	r3, r0
 8003508:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 800350a:	197b      	adds	r3, r7, r5
 800350c:	781b      	ldrb	r3, [r3, #0]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d00a      	beq.n	8003528 <ESP_Receive+0x4c>
    Debug("Error in HAL_UART_Receive_DMA.");
 8003512:	4a0a      	ldr	r2, [pc, #40]	@ (800353c <ESP_Receive+0x60>)
 8003514:	4b0a      	ldr	r3, [pc, #40]	@ (8003540 <ESP_Receive+0x64>)
 8003516:	0019      	movs	r1, r3
 8003518:	2003      	movs	r0, #3
 800351a:	f002 fd3d 	bl	8005f98 <CreateLine>
    RxComplete = true;
 800351e:	4b05      	ldr	r3, [pc, #20]	@ (8003534 <ESP_Receive+0x58>)
 8003520:	2201      	movs	r2, #1
 8003522:	701a      	strb	r2, [r3, #0]
    return false;
 8003524:	2300      	movs	r3, #0
 8003526:	e000      	b.n	800352a <ESP_Receive+0x4e>
  }
  return true;
 8003528:	2301      	movs	r3, #1
}
 800352a:	0018      	movs	r0, r3
 800352c:	46bd      	mov	sp, r7
 800352e:	b004      	add	sp, #16
 8003530:	bdb0      	pop	{r4, r5, r7, pc}
 8003532:	46c0      	nop			@ (mov r8, r8)
 8003534:	20000231 	.word	0x20000231
 8003538:	2000022c 	.word	0x2000022c
 800353c:	0800f564 	.word	0x0800f564
 8003540:	0800f560 	.word	0x0800f560

08003544 <HAL_UART_TxCpltCallback>:

// Callback for transmission complete
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8003544:	b580      	push	{r7, lr}
 8003546:	b082      	sub	sp, #8
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  if (huart == EspUart) {
 800354c:	4b08      	ldr	r3, [pc, #32]	@ (8003570 <HAL_UART_TxCpltCallback+0x2c>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	687a      	ldr	r2, [r7, #4]
 8003552:	429a      	cmp	r2, r3
 8003554:	d108      	bne.n	8003568 <HAL_UART_TxCpltCallback+0x24>
    TxComplete = true;
 8003556:	4b07      	ldr	r3, [pc, #28]	@ (8003574 <HAL_UART_TxCpltCallback+0x30>)
 8003558:	2201      	movs	r2, #1
 800355a:	701a      	strb	r2, [r3, #0]
    Debug("TxComplete");
 800355c:	4a06      	ldr	r2, [pc, #24]	@ (8003578 <HAL_UART_TxCpltCallback+0x34>)
 800355e:	4b07      	ldr	r3, [pc, #28]	@ (800357c <HAL_UART_TxCpltCallback+0x38>)
 8003560:	0019      	movs	r1, r3
 8003562:	2003      	movs	r0, #3
 8003564:	f002 fd18 	bl	8005f98 <CreateLine>
  }
}
 8003568:	46c0      	nop			@ (mov r8, r8)
 800356a:	46bd      	mov	sp, r7
 800356c:	b002      	add	sp, #8
 800356e:	bd80      	pop	{r7, pc}
 8003570:	2000022c 	.word	0x2000022c
 8003574:	20000230 	.word	0x20000230
 8003578:	0800f584 	.word	0x0800f584
 800357c:	0800f560 	.word	0x0800f560

08003580 <HAL_UART_RxCpltCallback>:

// Callback for reception complete
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8003580:	b580      	push	{r7, lr}
 8003582:	b082      	sub	sp, #8
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  if (huart == EspUart) {
 8003588:	4b08      	ldr	r3, [pc, #32]	@ (80035ac <HAL_UART_RxCpltCallback+0x2c>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	687a      	ldr	r2, [r7, #4]
 800358e:	429a      	cmp	r2, r3
 8003590:	d108      	bne.n	80035a4 <HAL_UART_RxCpltCallback+0x24>
    RxComplete = true;
 8003592:	4b07      	ldr	r3, [pc, #28]	@ (80035b0 <HAL_UART_RxCpltCallback+0x30>)
 8003594:	2201      	movs	r2, #1
 8003596:	701a      	strb	r2, [r3, #0]
    Debug("RxComplete");
 8003598:	4a06      	ldr	r2, [pc, #24]	@ (80035b4 <HAL_UART_RxCpltCallback+0x34>)
 800359a:	4b07      	ldr	r3, [pc, #28]	@ (80035b8 <HAL_UART_RxCpltCallback+0x38>)
 800359c:	0019      	movs	r1, r3
 800359e:	2003      	movs	r0, #3
 80035a0:	f002 fcfa 	bl	8005f98 <CreateLine>
  }
}
 80035a4:	46c0      	nop			@ (mov r8, r8)
 80035a6:	46bd      	mov	sp, r7
 80035a8:	b002      	add	sp, #8
 80035aa:	bd80      	pop	{r7, pc}
 80035ac:	2000022c 	.word	0x2000022c
 80035b0:	20000231 	.word	0x20000231
 80035b4:	0800f590 	.word	0x0800f590
 80035b8:	0800f560 	.word	0x0800f560

080035bc <HAL_UART_ErrorCallback>:

// Callback for UART error
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 80035bc:	b580      	push	{r7, lr}
 80035be:	b082      	sub	sp, #8
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  if (huart == EspUart) {
 80035c4:	4b05      	ldr	r3, [pc, #20]	@ (80035dc <HAL_UART_ErrorCallback+0x20>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	687a      	ldr	r2, [r7, #4]
 80035ca:	429a      	cmp	r2, r3
 80035cc:	d102      	bne.n	80035d4 <HAL_UART_ErrorCallback+0x18>
    // Handle error
    EspState = ESP_STATE_ERROR;
 80035ce:	4b04      	ldr	r3, [pc, #16]	@ (80035e0 <HAL_UART_ErrorCallback+0x24>)
 80035d0:	2208      	movs	r2, #8
 80035d2:	701a      	strb	r2, [r3, #0]
  }
}
 80035d4:	46c0      	nop			@ (mov r8, r8)
 80035d6:	46bd      	mov	sp, r7
 80035d8:	b002      	add	sp, #8
 80035da:	bd80      	pop	{r7, pc}
 80035dc:	2000022c 	.word	0x2000022c
 80035e0:	20000241 	.word	0x20000241

080035e4 <ESP_TranceivingDone>:

static bool ESP_TranceivingDone(void) {
 80035e4:	b580      	push	{r7, lr}
 80035e6:	af00      	add	r7, sp, #0
  if(TxComplete) {
 80035e8:	4b0d      	ldr	r3, [pc, #52]	@ (8003620 <ESP_TranceivingDone+0x3c>)
 80035ea:	781b      	ldrb	r3, [r3, #0]
 80035ec:	b2db      	uxtb	r3, r3
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d001      	beq.n	80035f6 <ESP_TranceivingDone+0x12>
    return true;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e010      	b.n	8003618 <ESP_TranceivingDone+0x34>
  }else {
    if(TxNotCompletedCount >= ESP_MAX_UART_RETRIES) {
 80035f6:	4b0b      	ldr	r3, [pc, #44]	@ (8003624 <ESP_TranceivingDone+0x40>)
 80035f8:	781b      	ldrb	r3, [r3, #0]
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d905      	bls.n	800360a <ESP_TranceivingDone+0x26>
      TxNotCompletedCount = 0;
 80035fe:	4b09      	ldr	r3, [pc, #36]	@ (8003624 <ESP_TranceivingDone+0x40>)
 8003600:	2200      	movs	r2, #0
 8003602:	701a      	strb	r2, [r3, #0]
      EspState = ESP_STATE_ERROR;
 8003604:	4b08      	ldr	r3, [pc, #32]	@ (8003628 <ESP_TranceivingDone+0x44>)
 8003606:	2208      	movs	r2, #8
 8003608:	701a      	strb	r2, [r3, #0]
    }
    TxNotCompletedCount += 1;
 800360a:	4b06      	ldr	r3, [pc, #24]	@ (8003624 <ESP_TranceivingDone+0x40>)
 800360c:	781b      	ldrb	r3, [r3, #0]
 800360e:	3301      	adds	r3, #1
 8003610:	b2da      	uxtb	r2, r3
 8003612:	4b04      	ldr	r3, [pc, #16]	@ (8003624 <ESP_TranceivingDone+0x40>)
 8003614:	701a      	strb	r2, [r3, #0]
    return false;
 8003616:	2300      	movs	r3, #0
  }
}
 8003618:	0018      	movs	r0, r3
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}
 800361e:	46c0      	nop			@ (mov r8, r8)
 8003620:	20000230 	.word	0x20000230
 8003624:	20000240 	.word	0x20000240
 8003628:	20000241 	.word	0x20000241

0800362c <ESP_ReceivingDone>:

static bool ESP_ReceivingDone(void) {
 800362c:	b580      	push	{r7, lr}
 800362e:	af00      	add	r7, sp, #0
  if(RxComplete) {
 8003630:	4b0d      	ldr	r3, [pc, #52]	@ (8003668 <ESP_ReceivingDone+0x3c>)
 8003632:	781b      	ldrb	r3, [r3, #0]
 8003634:	b2db      	uxtb	r3, r3
 8003636:	2b00      	cmp	r3, #0
 8003638:	d001      	beq.n	800363e <ESP_ReceivingDone+0x12>
    return true;
 800363a:	2301      	movs	r3, #1
 800363c:	e010      	b.n	8003660 <ESP_ReceivingDone+0x34>
  }else {
    if(RxNotCompletedCount >= ESP_MAX_UART_RETRIES) {
 800363e:	4b0b      	ldr	r3, [pc, #44]	@ (800366c <ESP_ReceivingDone+0x40>)
 8003640:	781b      	ldrb	r3, [r3, #0]
 8003642:	2b01      	cmp	r3, #1
 8003644:	d905      	bls.n	8003652 <ESP_ReceivingDone+0x26>
      RxNotCompletedCount = 0;
 8003646:	4b09      	ldr	r3, [pc, #36]	@ (800366c <ESP_ReceivingDone+0x40>)
 8003648:	2200      	movs	r2, #0
 800364a:	701a      	strb	r2, [r3, #0]
      EspState = ESP_STATE_ERROR;
 800364c:	4b08      	ldr	r3, [pc, #32]	@ (8003670 <ESP_ReceivingDone+0x44>)
 800364e:	2208      	movs	r2, #8
 8003650:	701a      	strb	r2, [r3, #0]
    }
    RxNotCompletedCount += 1;
 8003652:	4b06      	ldr	r3, [pc, #24]	@ (800366c <ESP_ReceivingDone+0x40>)
 8003654:	781b      	ldrb	r3, [r3, #0]
 8003656:	3301      	adds	r3, #1
 8003658:	b2da      	uxtb	r2, r3
 800365a:	4b04      	ldr	r3, [pc, #16]	@ (800366c <ESP_ReceivingDone+0x40>)
 800365c:	701a      	strb	r2, [r3, #0]
    return false;
 800365e:	2300      	movs	r3, #0
  }
}
 8003660:	0018      	movs	r0, r3
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}
 8003666:	46c0      	nop			@ (mov r8, r8)
 8003668:	20000231 	.word	0x20000231
 800366c:	2000023f 	.word	0x2000023f
 8003670:	20000241 	.word	0x20000241

08003674 <ESP_ResponseMatch>:

static bool ESP_ResponseMatch(uint8_t* rxBuffer, char* expectedResponse) {
 8003674:	b580      	push	{r7, lr}
 8003676:	b082      	sub	sp, #8
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
 800367c:	6039      	str	r1, [r7, #0]
  return(strstr((char*)rxBuffer, expectedResponse) != NULL);
 800367e:	683a      	ldr	r2, [r7, #0]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	0011      	movs	r1, r2
 8003684:	0018      	movs	r0, r3
 8003686:	f009 fbf1 	bl	800ce6c <strstr>
 800368a:	0003      	movs	r3, r0
 800368c:	1e5a      	subs	r2, r3, #1
 800368e:	4193      	sbcs	r3, r2
 8003690:	b2db      	uxtb	r3, r3
}
 8003692:	0018      	movs	r0, r3
 8003694:	46bd      	mov	sp, r7
 8003696:	b002      	add	sp, #8
 8003698:	bd80      	pop	{r7, pc}
	...

0800369c <ESP_Upkeep>:

void ESP_Upkeep(void) {
 800369c:	b580      	push	{r7, lr}
 800369e:	af00      	add	r7, sp, #0
  switch (EspState) {
 80036a0:	4b5e      	ldr	r3, [pc, #376]	@ (800381c <ESP_Upkeep+0x180>)
 80036a2:	781b      	ldrb	r3, [r3, #0]
 80036a4:	2b08      	cmp	r3, #8
 80036a6:	d900      	bls.n	80036aa <ESP_Upkeep+0xe>
 80036a8:	e0a9      	b.n	80037fe <ESP_Upkeep+0x162>
 80036aa:	009a      	lsls	r2, r3, #2
 80036ac:	4b5c      	ldr	r3, [pc, #368]	@ (8003820 <ESP_Upkeep+0x184>)
 80036ae:	18d3      	adds	r3, r2, r3
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	469f      	mov	pc, r3
    case ESP_STATE_OFF:
      // Turning off the ESP
      HAL_GPIO_WritePin(Wireless_EN_GPIO_Port, Wireless_EN_Pin, GPIO_PIN_RESET);
 80036b4:	2380      	movs	r3, #128	@ 0x80
 80036b6:	0219      	lsls	r1, r3, #8
 80036b8:	23a0      	movs	r3, #160	@ 0xa0
 80036ba:	05db      	lsls	r3, r3, #23
 80036bc:	2200      	movs	r2, #0
 80036be:	0018      	movs	r0, r3
 80036c0:	f003 fd60 	bl	8007184 <HAL_GPIO_WritePin>
      EspTurnedOn = false;
 80036c4:	4b57      	ldr	r3, [pc, #348]	@ (8003824 <ESP_Upkeep+0x188>)
 80036c6:	2200      	movs	r2, #0
 80036c8:	701a      	strb	r2, [r3, #0]
      EspState = ESP_STATE_IDLE;
 80036ca:	4b54      	ldr	r3, [pc, #336]	@ (800381c <ESP_Upkeep+0x180>)
 80036cc:	2201      	movs	r2, #1
 80036ce:	701a      	strb	r2, [r3, #0]
      break;
 80036d0:	e0a0      	b.n	8003814 <ESP_Upkeep+0x178>
      // Waiting for wake up call.
      break;

    case ESP_STATE_INIT:
        // Initialization state
      if(!EspTurnedOn) {
 80036d2:	4b54      	ldr	r3, [pc, #336]	@ (8003824 <ESP_Upkeep+0x188>)
 80036d4:	781b      	ldrb	r3, [r3, #0]
 80036d6:	2201      	movs	r2, #1
 80036d8:	4053      	eors	r3, r2
 80036da:	b2db      	uxtb	r3, r3
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d00a      	beq.n	80036f6 <ESP_Upkeep+0x5a>
        HAL_GPIO_WritePin(Wireless_EN_GPIO_Port, Wireless_EN_Pin, GPIO_PIN_SET);
 80036e0:	2380      	movs	r3, #128	@ 0x80
 80036e2:	0219      	lsls	r1, r3, #8
 80036e4:	23a0      	movs	r3, #160	@ 0xa0
 80036e6:	05db      	lsls	r3, r3, #23
 80036e8:	2201      	movs	r2, #1
 80036ea:	0018      	movs	r0, r3
 80036ec:	f003 fd4a 	bl	8007184 <HAL_GPIO_WritePin>
        EspTurnedOn = true;
 80036f0:	4b4c      	ldr	r3, [pc, #304]	@ (8003824 <ESP_Upkeep+0x188>)
 80036f2:	2201      	movs	r2, #1
 80036f4:	701a      	strb	r2, [r3, #0]
      }
      // Wait for ESP to be ready
      if (ESP_Send((uint8_t*)"AT\r\n", 4)) {
 80036f6:	4b4c      	ldr	r3, [pc, #304]	@ (8003828 <ESP_Upkeep+0x18c>)
 80036f8:	2104      	movs	r1, #4
 80036fa:	0018      	movs	r0, r3
 80036fc:	f7ff feba 	bl	8003474 <ESP_Send>
 8003700:	1e03      	subs	r3, r0, #0
 8003702:	d003      	beq.n	800370c <ESP_Upkeep+0x70>
          EspState = ESP_STATE_WAIT_FOR_READY;
 8003704:	4b45      	ldr	r3, [pc, #276]	@ (800381c <ESP_Upkeep+0x180>)
 8003706:	2202      	movs	r2, #2
 8003708:	701a      	strb	r2, [r3, #0]
      } else {
          EspState = ESP_STATE_ERROR;
      }
      break;
 800370a:	e083      	b.n	8003814 <ESP_Upkeep+0x178>
          EspState = ESP_STATE_ERROR;
 800370c:	4b43      	ldr	r3, [pc, #268]	@ (800381c <ESP_Upkeep+0x180>)
 800370e:	2208      	movs	r2, #8
 8003710:	701a      	strb	r2, [r3, #0]
      break;
 8003712:	e07f      	b.n	8003814 <ESP_Upkeep+0x178>

    case ESP_STATE_WAIT_FOR_READY:
      if(ESP_TranceivingDone()) {
 8003714:	f7ff ff66 	bl	80035e4 <ESP_TranceivingDone>
 8003718:	1e03      	subs	r3, r0, #0
 800371a:	d100      	bne.n	800371e <ESP_Upkeep+0x82>
 800371c:	e075      	b.n	800380a <ESP_Upkeep+0x16e>
        if (ESP_Receive(RxBuffer, 4)) {
 800371e:	4b43      	ldr	r3, [pc, #268]	@ (800382c <ESP_Upkeep+0x190>)
 8003720:	2104      	movs	r1, #4
 8003722:	0018      	movs	r0, r3
 8003724:	f7ff feda 	bl	80034dc <ESP_Receive>
 8003728:	1e03      	subs	r3, r0, #0
 800372a:	d100      	bne.n	800372e <ESP_Upkeep+0x92>
 800372c:	e06d      	b.n	800380a <ESP_Upkeep+0x16e>
          Debug("Checking rx");
 800372e:	4a40      	ldr	r2, [pc, #256]	@ (8003830 <ESP_Upkeep+0x194>)
 8003730:	4b40      	ldr	r3, [pc, #256]	@ (8003834 <ESP_Upkeep+0x198>)
 8003732:	0019      	movs	r1, r3
 8003734:	2003      	movs	r0, #3
 8003736:	f002 fc2f 	bl	8005f98 <CreateLine>
          EspState = ESP_STATE_PROCESS_READY;
 800373a:	4b38      	ldr	r3, [pc, #224]	@ (800381c <ESP_Upkeep+0x180>)
 800373c:	2203      	movs	r2, #3
 800373e:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8003740:	e063      	b.n	800380a <ESP_Upkeep+0x16e>

    case ESP_STATE_PROCESS_READY:
      if(ESP_ReceivingDone()) {
 8003742:	f7ff ff73 	bl	800362c <ESP_ReceivingDone>
 8003746:	1e03      	subs	r3, r0, #0
 8003748:	d061      	beq.n	800380e <ESP_Upkeep+0x172>
        if(ESP_ResponseMatch(RxBuffer, AT_OkResponse)) {
 800374a:	4b3b      	ldr	r3, [pc, #236]	@ (8003838 <ESP_Upkeep+0x19c>)
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	4b37      	ldr	r3, [pc, #220]	@ (800382c <ESP_Upkeep+0x190>)
 8003750:	0011      	movs	r1, r2
 8003752:	0018      	movs	r0, r3
 8003754:	f7ff ff8e 	bl	8003674 <ESP_ResponseMatch>
 8003758:	1e03      	subs	r3, r0, #0
 800375a:	d003      	beq.n	8003764 <ESP_Upkeep+0xc8>
          EspState = ESP_STATE_SEND_AT;
 800375c:	4b2f      	ldr	r3, [pc, #188]	@ (800381c <ESP_Upkeep+0x180>)
 800375e:	2205      	movs	r2, #5
 8003760:	701a      	strb	r2, [r3, #0]
        }else {
          EspState = ESP_STATE_ERROR;
        }
      }
      break;
 8003762:	e054      	b.n	800380e <ESP_Upkeep+0x172>
          EspState = ESP_STATE_ERROR;
 8003764:	4b2d      	ldr	r3, [pc, #180]	@ (800381c <ESP_Upkeep+0x180>)
 8003766:	2208      	movs	r2, #8
 8003768:	701a      	strb	r2, [r3, #0]
      break;
 800376a:	e050      	b.n	800380e <ESP_Upkeep+0x172>
    case ESP_STATE_SEND_AT:

      // Send an AT command
      // TODO: Add sequence of commands that you want to send.
      // Similar to the measurements, with done flag etc.
      if (ESP_Send((uint8_t*)"AT\r\n", 4)) {
 800376c:	4b2e      	ldr	r3, [pc, #184]	@ (8003828 <ESP_Upkeep+0x18c>)
 800376e:	2104      	movs	r1, #4
 8003770:	0018      	movs	r0, r3
 8003772:	f7ff fe7f 	bl	8003474 <ESP_Send>
 8003776:	1e03      	subs	r3, r0, #0
 8003778:	d003      	beq.n	8003782 <ESP_Upkeep+0xe6>
        EspState = ESP_STATE_WAIT_FOR_RESPONSE;
 800377a:	4b28      	ldr	r3, [pc, #160]	@ (800381c <ESP_Upkeep+0x180>)
 800377c:	2206      	movs	r2, #6
 800377e:	701a      	strb	r2, [r3, #0]
      } else {
        EspState = ESP_STATE_ERROR;
      }
      break;
 8003780:	e048      	b.n	8003814 <ESP_Upkeep+0x178>
        EspState = ESP_STATE_ERROR;
 8003782:	4b26      	ldr	r3, [pc, #152]	@ (800381c <ESP_Upkeep+0x180>)
 8003784:	2208      	movs	r2, #8
 8003786:	701a      	strb	r2, [r3, #0]
      break;
 8003788:	e044      	b.n	8003814 <ESP_Upkeep+0x178>

    case ESP_STATE_WAIT_FOR_RESPONSE:
      // Wait for the response
      if(TxComplete) {
 800378a:	4b2c      	ldr	r3, [pc, #176]	@ (800383c <ESP_Upkeep+0x1a0>)
 800378c:	781b      	ldrb	r3, [r3, #0]
 800378e:	b2db      	uxtb	r3, r3
 8003790:	2b00      	cmp	r3, #0
 8003792:	d03e      	beq.n	8003812 <ESP_Upkeep+0x176>
        if(ESP_Receive(RxBuffer, 4)) {
 8003794:	4b25      	ldr	r3, [pc, #148]	@ (800382c <ESP_Upkeep+0x190>)
 8003796:	2104      	movs	r1, #4
 8003798:	0018      	movs	r0, r3
 800379a:	f7ff fe9f 	bl	80034dc <ESP_Receive>
 800379e:	1e03      	subs	r3, r0, #0
 80037a0:	d037      	beq.n	8003812 <ESP_Upkeep+0x176>
          EspState = ESP_STATE_PROCESS_RESPONSE;
 80037a2:	4b1e      	ldr	r3, [pc, #120]	@ (800381c <ESP_Upkeep+0x180>)
 80037a4:	2207      	movs	r2, #7
 80037a6:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 80037a8:	e033      	b.n	8003812 <ESP_Upkeep+0x176>

    case ESP_STATE_PROCESS_RESPONSE:
      if(RxNotCompletedCount >= ESP_MAX_UART_RETRIES) {
 80037aa:	4b25      	ldr	r3, [pc, #148]	@ (8003840 <ESP_Upkeep+0x1a4>)
 80037ac:	781b      	ldrb	r3, [r3, #0]
 80037ae:	2b01      	cmp	r3, #1
 80037b0:	d905      	bls.n	80037be <ESP_Upkeep+0x122>
        RxNotCompletedCount = 0;
 80037b2:	4b23      	ldr	r3, [pc, #140]	@ (8003840 <ESP_Upkeep+0x1a4>)
 80037b4:	2200      	movs	r2, #0
 80037b6:	701a      	strb	r2, [r3, #0]
        EspState = ESP_STATE_ERROR;
 80037b8:	4b18      	ldr	r3, [pc, #96]	@ (800381c <ESP_Upkeep+0x180>)
 80037ba:	2208      	movs	r2, #8
 80037bc:	701a      	strb	r2, [r3, #0]
      }
      if(RxComplete) {
 80037be:	4b21      	ldr	r3, [pc, #132]	@ (8003844 <ESP_Upkeep+0x1a8>)
 80037c0:	781b      	ldrb	r3, [r3, #0]
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d009      	beq.n	80037dc <ESP_Upkeep+0x140>
        Debug("RxBuffer: %s", RxBuffer);
 80037c8:	4b18      	ldr	r3, [pc, #96]	@ (800382c <ESP_Upkeep+0x190>)
 80037ca:	4a1f      	ldr	r2, [pc, #124]	@ (8003848 <ESP_Upkeep+0x1ac>)
 80037cc:	4919      	ldr	r1, [pc, #100]	@ (8003834 <ESP_Upkeep+0x198>)
 80037ce:	2003      	movs	r0, #3
 80037d0:	f002 fbe2 	bl	8005f98 <CreateLine>
//        EspState = ESP_STATE_SEND_AT;
        EspState = ESP_STATE_OFF;
 80037d4:	4b11      	ldr	r3, [pc, #68]	@ (800381c <ESP_Upkeep+0x180>)
 80037d6:	2200      	movs	r2, #0
 80037d8:	701a      	strb	r2, [r3, #0]
      } else {
        RxNotCompletedCount += 1;
      }
      break;
 80037da:	e01b      	b.n	8003814 <ESP_Upkeep+0x178>
        RxNotCompletedCount += 1;
 80037dc:	4b18      	ldr	r3, [pc, #96]	@ (8003840 <ESP_Upkeep+0x1a4>)
 80037de:	781b      	ldrb	r3, [r3, #0]
 80037e0:	3301      	adds	r3, #1
 80037e2:	b2da      	uxtb	r2, r3
 80037e4:	4b16      	ldr	r3, [pc, #88]	@ (8003840 <ESP_Upkeep+0x1a4>)
 80037e6:	701a      	strb	r2, [r3, #0]
      break;
 80037e8:	e014      	b.n	8003814 <ESP_Upkeep+0x178>

    case ESP_STATE_ERROR:
      // Handle error state
      Debug("ESP Error occurred");
 80037ea:	4a18      	ldr	r2, [pc, #96]	@ (800384c <ESP_Upkeep+0x1b0>)
 80037ec:	4b11      	ldr	r3, [pc, #68]	@ (8003834 <ESP_Upkeep+0x198>)
 80037ee:	0019      	movs	r1, r3
 80037f0:	2003      	movs	r0, #3
 80037f2:	f002 fbd1 	bl	8005f98 <CreateLine>
      EspState = ESP_STATE_INIT;
 80037f6:	4b09      	ldr	r3, [pc, #36]	@ (800381c <ESP_Upkeep+0x180>)
 80037f8:	2204      	movs	r2, #4
 80037fa:	701a      	strb	r2, [r3, #0]
      break;
 80037fc:	e00a      	b.n	8003814 <ESP_Upkeep+0x178>

    default:
      // Handle unexpected state
      EspState = ESP_STATE_ERROR;
 80037fe:	4b07      	ldr	r3, [pc, #28]	@ (800381c <ESP_Upkeep+0x180>)
 8003800:	2208      	movs	r2, #8
 8003802:	701a      	strb	r2, [r3, #0]
      break;
 8003804:	e006      	b.n	8003814 <ESP_Upkeep+0x178>
      break;
 8003806:	46c0      	nop			@ (mov r8, r8)
 8003808:	e004      	b.n	8003814 <ESP_Upkeep+0x178>
      break;
 800380a:	46c0      	nop			@ (mov r8, r8)
 800380c:	e002      	b.n	8003814 <ESP_Upkeep+0x178>
      break;
 800380e:	46c0      	nop			@ (mov r8, r8)
 8003810:	e000      	b.n	8003814 <ESP_Upkeep+0x178>
      break;
 8003812:	46c0      	nop			@ (mov r8, r8)
  }
}
 8003814:	46c0      	nop			@ (mov r8, r8)
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}
 800381a:	46c0      	nop			@ (mov r8, r8)
 800381c:	20000241 	.word	0x20000241
 8003820:	0800fb58 	.word	0x0800fb58
 8003824:	2000023e 	.word	0x2000023e
 8003828:	0800f59c 	.word	0x0800f59c
 800382c:	20000234 	.word	0x20000234
 8003830:	0800f5a4 	.word	0x0800f5a4
 8003834:	0800f560 	.word	0x0800f560
 8003838:	20000000 	.word	0x20000000
 800383c:	20000230 	.word	0x20000230
 8003840:	2000023f 	.word	0x2000023f
 8003844:	20000231 	.word	0x20000231
 8003848:	0800f5b0 	.word	0x0800f5b0
 800384c:	0800f5c0 	.word	0x0800f5c0

08003850 <I2CSensors_Init>:
static I2C_HandleTypeDef* SensorI2C = NULL;

static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);
static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);

void I2CSensors_Init(I2C_HandleTypeDef* sensorI2C) {
 8003850:	b580      	push	{r7, lr}
 8003852:	b082      	sub	sp, #8
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
    SensorI2C = sensorI2C;
 8003858:	4b09      	ldr	r3, [pc, #36]	@ (8003880 <I2CSensors_Init+0x30>)
 800385a:	687a      	ldr	r2, [r7, #4]
 800385c:	601a      	str	r2, [r3, #0]
    HT_Init(ReadI2C, WriteI2C);
 800385e:	4a09      	ldr	r2, [pc, #36]	@ (8003884 <I2CSensors_Init+0x34>)
 8003860:	4b09      	ldr	r3, [pc, #36]	@ (8003888 <I2CSensors_Init+0x38>)
 8003862:	0011      	movs	r1, r2
 8003864:	0018      	movs	r0, r3
 8003866:	f000 f9e9 	bl	8003c3c <HT_Init>
    Gas_Init(ReadI2C, WriteI2C);
 800386a:	4a06      	ldr	r2, [pc, #24]	@ (8003884 <I2CSensors_Init+0x34>)
 800386c:	4b06      	ldr	r3, [pc, #24]	@ (8003888 <I2CSensors_Init+0x38>)
 800386e:	0011      	movs	r1, r2
 8003870:	0018      	movs	r0, r3
 8003872:	f000 f8a9 	bl	80039c8 <Gas_Init>
}
 8003876:	46c0      	nop			@ (mov r8, r8)
 8003878:	46bd      	mov	sp, r7
 800387a:	b002      	add	sp, #8
 800387c:	bd80      	pop	{r7, pc}
 800387e:	46c0      	nop			@ (mov r8, r8)
 8003880:	20000244 	.word	0x20000244
 8003884:	080038e1 	.word	0x080038e1
 8003888:	0800388d 	.word	0x0800388d

0800388c <ReadI2C>:

static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 800388c:	b5b0      	push	{r4, r5, r7, lr}
 800388e:	b084      	sub	sp, #16
 8003890:	af00      	add	r7, sp, #0
 8003892:	6039      	str	r1, [r7, #0]
 8003894:	0011      	movs	r1, r2
 8003896:	1dfb      	adds	r3, r7, #7
 8003898:	1c02      	adds	r2, r0, #0
 800389a:	701a      	strb	r2, [r3, #0]
 800389c:	1dbb      	adds	r3, r7, #6
 800389e:	1c0a      	adds	r2, r1, #0
 80038a0:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Receive_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 80038a2:	4b0e      	ldr	r3, [pc, #56]	@ (80038dc <ReadI2C+0x50>)
 80038a4:	6818      	ldr	r0, [r3, #0]
 80038a6:	1dfb      	adds	r3, r7, #7
 80038a8:	781b      	ldrb	r3, [r3, #0]
 80038aa:	b29b      	uxth	r3, r3
 80038ac:	18db      	adds	r3, r3, r3
 80038ae:	b299      	uxth	r1, r3
 80038b0:	1dbb      	adds	r3, r7, #6
 80038b2:	781b      	ldrb	r3, [r3, #0]
 80038b4:	b29b      	uxth	r3, r3
 80038b6:	250f      	movs	r5, #15
 80038b8:	197c      	adds	r4, r7, r5
 80038ba:	683a      	ldr	r2, [r7, #0]
 80038bc:	f003 fe36 	bl	800752c <HAL_I2C_Master_Receive_DMA>
 80038c0:	0003      	movs	r3, r0
 80038c2:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 80038c4:	197b      	adds	r3, r7, r5
 80038c6:	781b      	ldrb	r3, [r3, #0]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d001      	beq.n	80038d0 <ReadI2C+0x44>
        return false;
 80038cc:	2300      	movs	r3, #0
 80038ce:	e000      	b.n	80038d2 <ReadI2C+0x46>
    }
    return true;
 80038d0:	2301      	movs	r3, #1
}
 80038d2:	0018      	movs	r0, r3
 80038d4:	46bd      	mov	sp, r7
 80038d6:	b004      	add	sp, #16
 80038d8:	bdb0      	pop	{r4, r5, r7, pc}
 80038da:	46c0      	nop			@ (mov r8, r8)
 80038dc:	20000244 	.word	0x20000244

080038e0 <WriteI2C>:

static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 80038e0:	b5b0      	push	{r4, r5, r7, lr}
 80038e2:	b084      	sub	sp, #16
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6039      	str	r1, [r7, #0]
 80038e8:	0011      	movs	r1, r2
 80038ea:	1dfb      	adds	r3, r7, #7
 80038ec:	1c02      	adds	r2, r0, #0
 80038ee:	701a      	strb	r2, [r3, #0]
 80038f0:	1dbb      	adds	r3, r7, #6
 80038f2:	1c0a      	adds	r2, r1, #0
 80038f4:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Transmit_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 80038f6:	4b0e      	ldr	r3, [pc, #56]	@ (8003930 <WriteI2C+0x50>)
 80038f8:	6818      	ldr	r0, [r3, #0]
 80038fa:	1dfb      	adds	r3, r7, #7
 80038fc:	781b      	ldrb	r3, [r3, #0]
 80038fe:	b29b      	uxth	r3, r3
 8003900:	18db      	adds	r3, r3, r3
 8003902:	b299      	uxth	r1, r3
 8003904:	1dbb      	adds	r3, r7, #6
 8003906:	781b      	ldrb	r3, [r3, #0]
 8003908:	b29b      	uxth	r3, r3
 800390a:	250f      	movs	r5, #15
 800390c:	197c      	adds	r4, r7, r5
 800390e:	683a      	ldr	r2, [r7, #0]
 8003910:	f003 fd06 	bl	8007320 <HAL_I2C_Master_Transmit_DMA>
 8003914:	0003      	movs	r3, r0
 8003916:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 8003918:	197b      	adds	r3, r7, r5
 800391a:	781b      	ldrb	r3, [r3, #0]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d001      	beq.n	8003924 <WriteI2C+0x44>
        return false;
 8003920:	2300      	movs	r3, #0
 8003922:	e000      	b.n	8003926 <WriteI2C+0x46>
    }
    return true;
 8003924:	2301      	movs	r3, #1
}
 8003926:	0018      	movs	r0, r3
 8003928:	46bd      	mov	sp, r7
 800392a:	b004      	add	sp, #16
 800392c:	bdb0      	pop	{r4, r5, r7, pc}
 800392e:	46c0      	nop			@ (mov r8, r8)
 8003930:	20000244 	.word	0x20000244

08003934 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b082      	sub	sp, #8
 8003938:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800393a:	4b10      	ldr	r3, [pc, #64]	@ (800397c <MX_DMA_Init+0x48>)
 800393c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800393e:	4b0f      	ldr	r3, [pc, #60]	@ (800397c <MX_DMA_Init+0x48>)
 8003940:	2101      	movs	r1, #1
 8003942:	430a      	orrs	r2, r1
 8003944:	631a      	str	r2, [r3, #48]	@ 0x30
 8003946:	4b0d      	ldr	r3, [pc, #52]	@ (800397c <MX_DMA_Init+0x48>)
 8003948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800394a:	2201      	movs	r2, #1
 800394c:	4013      	ands	r3, r2
 800394e:	607b      	str	r3, [r7, #4]
 8003950:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8003952:	2200      	movs	r2, #0
 8003954:	2100      	movs	r1, #0
 8003956:	200a      	movs	r0, #10
 8003958:	f003 f816 	bl	8006988 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 800395c:	200a      	movs	r0, #10
 800395e:	f003 f828 	bl	80069b2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 3, 0);
 8003962:	2200      	movs	r2, #0
 8003964:	2103      	movs	r1, #3
 8003966:	200b      	movs	r0, #11
 8003968:	f003 f80e 	bl	8006988 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 800396c:	200b      	movs	r0, #11
 800396e:	f003 f820 	bl	80069b2 <HAL_NVIC_EnableIRQ>

}
 8003972:	46c0      	nop			@ (mov r8, r8)
 8003974:	46bd      	mov	sp, r7
 8003976:	b002      	add	sp, #8
 8003978:	bd80      	pop	{r7, pc}
 800397a:	46c0      	nop			@ (mov r8, r8)
 800397c:	40021000 	.word	0x40021000

08003980 <Gadget_Init>:
    .VOC_measurementEnabled = true,
    .NO_measurementEnabled = false,
    .MIC_measurementEnabled = true
};

void Gadget_Init(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s, UART_HandleTypeDef* espUart) {
 8003980:	b580      	push	{r7, lr}
 8003982:	b084      	sub	sp, #16
 8003984:	af00      	add	r7, sp, #0
 8003986:	60f8      	str	r0, [r7, #12]
 8003988:	60b9      	str	r1, [r7, #8]
 800398a:	607a      	str	r2, [r7, #4]
  // TODO: Add gadget re-init. So it works after sleep mode again.
  // Check battery power
  // Init sensor + peripherals
  Meas_SetEnabledSensors(SensorSetTest);
 800398c:	4b0b      	ldr	r3, [pc, #44]	@ (80039bc <Gadget_Init+0x3c>)
 800398e:	6818      	ldr	r0, [r3, #0]
 8003990:	f000 fcfc 	bl	800438c <Meas_SetEnabledSensors>
  Meas_Init(sensorI2C, micI2s);
 8003994:	68ba      	ldr	r2, [r7, #8]
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	0011      	movs	r1, r2
 800399a:	0018      	movs	r0, r3
 800399c:	f000 fc16 	bl	80041cc <Meas_Init>
  ESP_Init(espUart);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	0018      	movs	r0, r3
 80039a4:	f7ff fd54 	bl	8003450 <ESP_Init>
//  Gadget_SetSleepDuration();
  Info("Gadget initialised.");
 80039a8:	4a05      	ldr	r2, [pc, #20]	@ (80039c0 <Gadget_Init+0x40>)
 80039aa:	4b06      	ldr	r3, [pc, #24]	@ (80039c4 <Gadget_Init+0x44>)
 80039ac:	0019      	movs	r1, r3
 80039ae:	2002      	movs	r0, #2
 80039b0:	f002 faf2 	bl	8005f98 <CreateLine>
}
 80039b4:	46c0      	nop			@ (mov r8, r8)
 80039b6:	46bd      	mov	sp, r7
 80039b8:	b004      	add	sp, #16
 80039ba:	bd80      	pop	{r7, pc}
 80039bc:	20000248 	.word	0x20000248
 80039c0:	0800f5d4 	.word	0x0800f5d4
 80039c4:	0800f5e8 	.word	0x0800f5e8

080039c8 <Gas_Init>:

#include "gasSensor.h"
#include "stm32l0xx_it.h"
#include "utils.h"

void Gas_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b082      	sub	sp, #8
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
 80039d0:	6039      	str	r1, [r7, #0]
  SGP_Init(readFunction, writeFunction);
 80039d2:	683a      	ldr	r2, [r7, #0]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	0011      	movs	r1, r2
 80039d8:	0018      	movs	r0, r3
 80039da:	f001 fd27 	bl	800542c <SGP_Init>
}
 80039de:	46c0      	nop			@ (mov r8, r8)
 80039e0:	46bd      	mov	sp, r7
 80039e2:	b002      	add	sp, #8
 80039e4:	bd80      	pop	{r7, pc}

080039e6 <Gas_StartMeasurement>:

void Gas_StartMeasurement(void){
 80039e6:	b580      	push	{r7, lr}
 80039e8:	af00      	add	r7, sp, #0
  SGP_StartMeasurement();
 80039ea:	f001 fd39 	bl	8005460 <SGP_StartMeasurement>
}
 80039ee:	46c0      	nop			@ (mov r8, r8)
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}

080039f4 <Gas_GetMeasurementValues>:

bool Gas_GetMeasurementValues(int32_t* vocIndex) {
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b082      	sub	sp, #8
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  return SGP_GetMeasurementValues(vocIndex);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	0018      	movs	r0, r3
 8003a00:	f001 fd86 	bl	8005510 <SGP_GetMeasurementValues>
 8003a04:	0003      	movs	r3, r0
}
 8003a06:	0018      	movs	r0, r3
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	b002      	add	sp, #8
 8003a0c:	bd80      	pop	{r7, pc}

08003a0e <Gas_DeviceConnected>:

bool Gas_DeviceConnected(void) {
 8003a0e:	b580      	push	{r7, lr}
 8003a10:	af00      	add	r7, sp, #0
  return SGP_DeviceConnected();
 8003a12:	f001 fe87 	bl	8005724 <SGP_DeviceConnected>
 8003a16:	0003      	movs	r3, r0
}
 8003a18:	0018      	movs	r0, r3
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
	...

08003a20 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8003a20:	b590      	push	{r4, r7, lr}
 8003a22:	b08b      	sub	sp, #44	@ 0x2c
 8003a24:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a26:	2414      	movs	r4, #20
 8003a28:	193b      	adds	r3, r7, r4
 8003a2a:	0018      	movs	r0, r3
 8003a2c:	2314      	movs	r3, #20
 8003a2e:	001a      	movs	r2, r3
 8003a30:	2100      	movs	r1, #0
 8003a32:	f009 fa13 	bl	800ce5c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a36:	4b79      	ldr	r3, [pc, #484]	@ (8003c1c <MX_GPIO_Init+0x1fc>)
 8003a38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a3a:	4b78      	ldr	r3, [pc, #480]	@ (8003c1c <MX_GPIO_Init+0x1fc>)
 8003a3c:	2104      	movs	r1, #4
 8003a3e:	430a      	orrs	r2, r1
 8003a40:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003a42:	4b76      	ldr	r3, [pc, #472]	@ (8003c1c <MX_GPIO_Init+0x1fc>)
 8003a44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a46:	2204      	movs	r2, #4
 8003a48:	4013      	ands	r3, r2
 8003a4a:	613b      	str	r3, [r7, #16]
 8003a4c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003a4e:	4b73      	ldr	r3, [pc, #460]	@ (8003c1c <MX_GPIO_Init+0x1fc>)
 8003a50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a52:	4b72      	ldr	r3, [pc, #456]	@ (8003c1c <MX_GPIO_Init+0x1fc>)
 8003a54:	2180      	movs	r1, #128	@ 0x80
 8003a56:	430a      	orrs	r2, r1
 8003a58:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003a5a:	4b70      	ldr	r3, [pc, #448]	@ (8003c1c <MX_GPIO_Init+0x1fc>)
 8003a5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a5e:	2280      	movs	r2, #128	@ 0x80
 8003a60:	4013      	ands	r3, r2
 8003a62:	60fb      	str	r3, [r7, #12]
 8003a64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a66:	4b6d      	ldr	r3, [pc, #436]	@ (8003c1c <MX_GPIO_Init+0x1fc>)
 8003a68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a6a:	4b6c      	ldr	r3, [pc, #432]	@ (8003c1c <MX_GPIO_Init+0x1fc>)
 8003a6c:	2101      	movs	r1, #1
 8003a6e:	430a      	orrs	r2, r1
 8003a70:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003a72:	4b6a      	ldr	r3, [pc, #424]	@ (8003c1c <MX_GPIO_Init+0x1fc>)
 8003a74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a76:	2201      	movs	r2, #1
 8003a78:	4013      	ands	r3, r2
 8003a7a:	60bb      	str	r3, [r7, #8]
 8003a7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a7e:	4b67      	ldr	r3, [pc, #412]	@ (8003c1c <MX_GPIO_Init+0x1fc>)
 8003a80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a82:	4b66      	ldr	r3, [pc, #408]	@ (8003c1c <MX_GPIO_Init+0x1fc>)
 8003a84:	2102      	movs	r1, #2
 8003a86:	430a      	orrs	r2, r1
 8003a88:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003a8a:	4b64      	ldr	r3, [pc, #400]	@ (8003c1c <MX_GPIO_Init+0x1fc>)
 8003a8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a8e:	2202      	movs	r2, #2
 8003a90:	4013      	ands	r3, r2
 8003a92:	607b      	str	r3, [r7, #4]
 8003a94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003a96:	4b61      	ldr	r3, [pc, #388]	@ (8003c1c <MX_GPIO_Init+0x1fc>)
 8003a98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a9a:	4b60      	ldr	r3, [pc, #384]	@ (8003c1c <MX_GPIO_Init+0x1fc>)
 8003a9c:	2108      	movs	r1, #8
 8003a9e:	430a      	orrs	r2, r1
 8003aa0:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003aa2:	4b5e      	ldr	r3, [pc, #376]	@ (8003c1c <MX_GPIO_Init+0x1fc>)
 8003aa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003aa6:	2208      	movs	r2, #8
 8003aa8:	4013      	ands	r3, r2
 8003aaa:	603b      	str	r3, [r7, #0]
 8003aac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MIC_Trigger_GPIO_Port, MIC_Trigger_Pin, GPIO_PIN_RESET);
 8003aae:	2380      	movs	r3, #128	@ 0x80
 8003ab0:	00db      	lsls	r3, r3, #3
 8003ab2:	485b      	ldr	r0, [pc, #364]	@ (8003c20 <MX_GPIO_Init+0x200>)
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	0019      	movs	r1, r3
 8003ab8:	f003 fb64 	bl	8007184 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(STATUS_LED_GPIO_Port, STATUS_LED_Pin, GPIO_PIN_RESET);
 8003abc:	2380      	movs	r3, #128	@ 0x80
 8003abe:	005b      	lsls	r3, r3, #1
 8003ac0:	4858      	ldr	r0, [pc, #352]	@ (8003c24 <MX_GPIO_Init+0x204>)
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	0019      	movs	r1, r3
 8003ac6:	f003 fb5d 	bl	8007184 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Wireless_EN_GPIO_Port, Wireless_EN_Pin, GPIO_PIN_RESET);
 8003aca:	2380      	movs	r3, #128	@ 0x80
 8003acc:	0219      	lsls	r1, r3, #8
 8003ace:	23a0      	movs	r3, #160	@ 0xa0
 8003ad0:	05db      	lsls	r3, r3, #23
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	0018      	movs	r0, r3
 8003ad6:	f003 fb55 	bl	8007184 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC0 PC1 PC2
                           PC3 PC4 PC5 PC6
                           PC7 PC9 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
 8003ada:	193b      	adds	r3, r7, r4
 8003adc:	4a52      	ldr	r2, [pc, #328]	@ (8003c28 <MX_GPIO_Init+0x208>)
 8003ade:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003ae0:	193b      	adds	r3, r7, r4
 8003ae2:	2203      	movs	r2, #3
 8003ae4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ae6:	193b      	adds	r3, r7, r4
 8003ae8:	2200      	movs	r2, #0
 8003aea:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003aec:	193b      	adds	r3, r7, r4
 8003aee:	4a4d      	ldr	r2, [pc, #308]	@ (8003c24 <MX_GPIO_Init+0x204>)
 8003af0:	0019      	movs	r1, r3
 8003af2:	0010      	movs	r0, r2
 8003af4:	f003 f9c8 	bl	8006e88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003af8:	193b      	adds	r3, r7, r4
 8003afa:	2203      	movs	r2, #3
 8003afc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003afe:	193b      	adds	r3, r7, r4
 8003b00:	2203      	movs	r2, #3
 8003b02:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b04:	193b      	adds	r3, r7, r4
 8003b06:	2200      	movs	r2, #0
 8003b08:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003b0a:	193b      	adds	r3, r7, r4
 8003b0c:	4a47      	ldr	r2, [pc, #284]	@ (8003c2c <MX_GPIO_Init+0x20c>)
 8003b0e:	0019      	movs	r1, r3
 8003b10:	0010      	movs	r0, r2
 8003b12:	f003 f9b9 	bl	8006e88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA2 PA3 PA4
                           PA5 PA6 PA7 PA8
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8003b16:	193b      	adds	r3, r7, r4
 8003b18:	4a45      	ldr	r2, [pc, #276]	@ (8003c30 <MX_GPIO_Init+0x210>)
 8003b1a:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003b1c:	193b      	adds	r3, r7, r4
 8003b1e:	2203      	movs	r2, #3
 8003b20:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b22:	193b      	adds	r3, r7, r4
 8003b24:	2200      	movs	r2, #0
 8003b26:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b28:	193a      	adds	r2, r7, r4
 8003b2a:	23a0      	movs	r3, #160	@ 0xa0
 8003b2c:	05db      	lsls	r3, r3, #23
 8003b2e:	0011      	movs	r1, r2
 8003b30:	0018      	movs	r0, r3
 8003b32:	f003 f9a9 	bl	8006e88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB11
                           PB14 PB3 PB4 PB5
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_11
 8003b36:	193b      	adds	r3, r7, r4
 8003b38:	4a3e      	ldr	r2, [pc, #248]	@ (8003c34 <MX_GPIO_Init+0x214>)
 8003b3a:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_14|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003b3c:	193b      	adds	r3, r7, r4
 8003b3e:	2203      	movs	r2, #3
 8003b40:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b42:	193b      	adds	r3, r7, r4
 8003b44:	2200      	movs	r2, #0
 8003b46:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b48:	193b      	adds	r3, r7, r4
 8003b4a:	4a35      	ldr	r2, [pc, #212]	@ (8003c20 <MX_GPIO_Init+0x200>)
 8003b4c:	0019      	movs	r1, r3
 8003b4e:	0010      	movs	r0, r2
 8003b50:	f003 f99a 	bl	8006e88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MIC_Trigger_Pin;
 8003b54:	0021      	movs	r1, r4
 8003b56:	187b      	adds	r3, r7, r1
 8003b58:	2280      	movs	r2, #128	@ 0x80
 8003b5a:	00d2      	lsls	r2, r2, #3
 8003b5c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b5e:	000c      	movs	r4, r1
 8003b60:	193b      	adds	r3, r7, r4
 8003b62:	2201      	movs	r2, #1
 8003b64:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b66:	193b      	adds	r3, r7, r4
 8003b68:	2200      	movs	r2, #0
 8003b6a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b6c:	193b      	adds	r3, r7, r4
 8003b6e:	2203      	movs	r2, #3
 8003b70:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(MIC_Trigger_GPIO_Port, &GPIO_InitStruct);
 8003b72:	193b      	adds	r3, r7, r4
 8003b74:	4a2a      	ldr	r2, [pc, #168]	@ (8003c20 <MX_GPIO_Init+0x200>)
 8003b76:	0019      	movs	r1, r3
 8003b78:	0010      	movs	r0, r2
 8003b7a:	f003 f985 	bl	8006e88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = STATUS_LED_Pin;
 8003b7e:	0021      	movs	r1, r4
 8003b80:	187b      	adds	r3, r7, r1
 8003b82:	2280      	movs	r2, #128	@ 0x80
 8003b84:	0052      	lsls	r2, r2, #1
 8003b86:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b88:	000c      	movs	r4, r1
 8003b8a:	193b      	adds	r3, r7, r4
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b90:	193b      	adds	r3, r7, r4
 8003b92:	2200      	movs	r2, #0
 8003b94:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b96:	193b      	adds	r3, r7, r4
 8003b98:	2200      	movs	r2, #0
 8003b9a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(STATUS_LED_GPIO_Port, &GPIO_InitStruct);
 8003b9c:	193b      	adds	r3, r7, r4
 8003b9e:	4a21      	ldr	r2, [pc, #132]	@ (8003c24 <MX_GPIO_Init+0x204>)
 8003ba0:	0019      	movs	r1, r3
 8003ba2:	0010      	movs	r0, r2
 8003ba4:	f003 f970 	bl	8006e88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Wireless_EN_Pin;
 8003ba8:	0021      	movs	r1, r4
 8003baa:	187b      	adds	r3, r7, r1
 8003bac:	2280      	movs	r2, #128	@ 0x80
 8003bae:	0212      	lsls	r2, r2, #8
 8003bb0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003bb2:	000c      	movs	r4, r1
 8003bb4:	193b      	adds	r3, r7, r4
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bba:	193b      	adds	r3, r7, r4
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bc0:	193b      	adds	r3, r7, r4
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(Wireless_EN_GPIO_Port, &GPIO_InitStruct);
 8003bc6:	193a      	adds	r2, r7, r4
 8003bc8:	23a0      	movs	r3, #160	@ 0xa0
 8003bca:	05db      	lsls	r3, r3, #23
 8003bcc:	0011      	movs	r1, r2
 8003bce:	0018      	movs	r0, r3
 8003bd0:	f003 f95a 	bl	8006e88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003bd4:	193b      	adds	r3, r7, r4
 8003bd6:	2204      	movs	r2, #4
 8003bd8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003bda:	193b      	adds	r3, r7, r4
 8003bdc:	2203      	movs	r2, #3
 8003bde:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003be0:	193b      	adds	r3, r7, r4
 8003be2:	2200      	movs	r2, #0
 8003be4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003be6:	193b      	adds	r3, r7, r4
 8003be8:	4a13      	ldr	r2, [pc, #76]	@ (8003c38 <MX_GPIO_Init+0x218>)
 8003bea:	0019      	movs	r1, r3
 8003bec:	0010      	movs	r0, r2
 8003bee:	f003 f94b 	bl	8006e88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Wireless_PG_Pin;
 8003bf2:	0021      	movs	r1, r4
 8003bf4:	187b      	adds	r3, r7, r1
 8003bf6:	2280      	movs	r2, #128	@ 0x80
 8003bf8:	0052      	lsls	r2, r2, #1
 8003bfa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003bfc:	187b      	adds	r3, r7, r1
 8003bfe:	2200      	movs	r2, #0
 8003c00:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c02:	187b      	adds	r3, r7, r1
 8003c04:	2200      	movs	r2, #0
 8003c06:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Wireless_PG_GPIO_Port, &GPIO_InitStruct);
 8003c08:	187b      	adds	r3, r7, r1
 8003c0a:	4a05      	ldr	r2, [pc, #20]	@ (8003c20 <MX_GPIO_Init+0x200>)
 8003c0c:	0019      	movs	r1, r3
 8003c0e:	0010      	movs	r0, r2
 8003c10:	f003 f93a 	bl	8006e88 <HAL_GPIO_Init>

}
 8003c14:	46c0      	nop			@ (mov r8, r8)
 8003c16:	46bd      	mov	sp, r7
 8003c18:	b00b      	add	sp, #44	@ 0x2c
 8003c1a:	bd90      	pop	{r4, r7, pc}
 8003c1c:	40021000 	.word	0x40021000
 8003c20:	50000400 	.word	0x50000400
 8003c24:	50000800 	.word	0x50000800
 8003c28:	00003aff 	.word	0x00003aff
 8003c2c:	50001c00 	.word	0x50001c00
 8003c30:	000011fd 	.word	0x000011fd
 8003c34:	00004a3f 	.word	0x00004a3f
 8003c38:	50000c00 	.word	0x50000c00

08003c3c <HT_Init>:
#include <stdlib.h>
#include "humidTemp.h"
#include "utils.h"
#include "wsenHIDS.h"

void HT_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b082      	sub	sp, #8
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
 8003c44:	6039      	str	r1, [r7, #0]
  HIDS_Init(readFunction, writeFunction);
 8003c46:	683a      	ldr	r2, [r7, #0]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	0011      	movs	r1, r2
 8003c4c:	0018      	movs	r0, r3
 8003c4e:	f002 fafb 	bl	8006248 <HIDS_Init>
}
 8003c52:	46c0      	nop			@ (mov r8, r8)
 8003c54:	46bd      	mov	sp, r7
 8003c56:	b002      	add	sp, #8
 8003c58:	bd80      	pop	{r7, pc}

08003c5a <HT_StartMeasurement>:

void HT_StartMeasurement() {
 8003c5a:	b580      	push	{r7, lr}
 8003c5c:	af00      	add	r7, sp, #0
  HIDS_StartMeasurement();
 8003c5e:	f002 fb15 	bl	800628c <HIDS_StartMeasurement>
}
 8003c62:	46c0      	nop			@ (mov r8, r8)
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}

08003c68 <HT_GetMeasurementValues>:

void HT_SetMeasurementDuration(uint32_t duration) {
  HIDS_SetMeasurementDuration(duration);
}

bool HT_GetMeasurementValues(float* humidity_perc, float* temperature) {
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b082      	sub	sp, #8
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
 8003c70:	6039      	str	r1, [r7, #0]
  return HIDS_GetMeasurementValues(humidity_perc, temperature);
 8003c72:	683a      	ldr	r2, [r7, #0]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	0011      	movs	r1, r2
 8003c78:	0018      	movs	r0, r3
 8003c7a:	f002 fbe3 	bl	8006444 <HIDS_GetMeasurementValues>
 8003c7e:	0003      	movs	r3, r0
}
 8003c80:	0018      	movs	r0, r3
 8003c82:	46bd      	mov	sp, r7
 8003c84:	b002      	add	sp, #8
 8003c86:	bd80      	pop	{r7, pc}

08003c88 <HT_DeviceConnected>:

bool HT_DeviceConnected() {
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	af00      	add	r7, sp, #0
  return HIDS_DeviceConnected();
 8003c8c:	f002 fb7e 	bl	800638c <HIDS_DeviceConnected>
 8003c90:	0003      	movs	r3, r0
}
 8003c92:	0018      	movs	r0, r3
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}

08003c98 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003c9c:	4b1b      	ldr	r3, [pc, #108]	@ (8003d0c <MX_I2C1_Init+0x74>)
 8003c9e:	4a1c      	ldr	r2, [pc, #112]	@ (8003d10 <MX_I2C1_Init+0x78>)
 8003ca0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00503D58;
 8003ca2:	4b1a      	ldr	r3, [pc, #104]	@ (8003d0c <MX_I2C1_Init+0x74>)
 8003ca4:	4a1b      	ldr	r2, [pc, #108]	@ (8003d14 <MX_I2C1_Init+0x7c>)
 8003ca6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003ca8:	4b18      	ldr	r3, [pc, #96]	@ (8003d0c <MX_I2C1_Init+0x74>)
 8003caa:	2200      	movs	r2, #0
 8003cac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003cae:	4b17      	ldr	r3, [pc, #92]	@ (8003d0c <MX_I2C1_Init+0x74>)
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003cb4:	4b15      	ldr	r3, [pc, #84]	@ (8003d0c <MX_I2C1_Init+0x74>)
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003cba:	4b14      	ldr	r3, [pc, #80]	@ (8003d0c <MX_I2C1_Init+0x74>)
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003cc0:	4b12      	ldr	r3, [pc, #72]	@ (8003d0c <MX_I2C1_Init+0x74>)
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003cc6:	4b11      	ldr	r3, [pc, #68]	@ (8003d0c <MX_I2C1_Init+0x74>)
 8003cc8:	2200      	movs	r2, #0
 8003cca:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003ccc:	4b0f      	ldr	r3, [pc, #60]	@ (8003d0c <MX_I2C1_Init+0x74>)
 8003cce:	2200      	movs	r2, #0
 8003cd0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003cd2:	4b0e      	ldr	r3, [pc, #56]	@ (8003d0c <MX_I2C1_Init+0x74>)
 8003cd4:	0018      	movs	r0, r3
 8003cd6:	f003 fa8d 	bl	80071f4 <HAL_I2C_Init>
 8003cda:	1e03      	subs	r3, r0, #0
 8003cdc:	d001      	beq.n	8003ce2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8003cde:	f000 fa23 	bl	8004128 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003ce2:	4b0a      	ldr	r3, [pc, #40]	@ (8003d0c <MX_I2C1_Init+0x74>)
 8003ce4:	2100      	movs	r1, #0
 8003ce6:	0018      	movs	r0, r3
 8003ce8:	f005 f9fc 	bl	80090e4 <HAL_I2CEx_ConfigAnalogFilter>
 8003cec:	1e03      	subs	r3, r0, #0
 8003cee:	d001      	beq.n	8003cf4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003cf0:	f000 fa1a 	bl	8004128 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003cf4:	4b05      	ldr	r3, [pc, #20]	@ (8003d0c <MX_I2C1_Init+0x74>)
 8003cf6:	2100      	movs	r1, #0
 8003cf8:	0018      	movs	r0, r3
 8003cfa:	f005 fa3f 	bl	800917c <HAL_I2CEx_ConfigDigitalFilter>
 8003cfe:	1e03      	subs	r3, r0, #0
 8003d00:	d001      	beq.n	8003d06 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8003d02:	f000 fa11 	bl	8004128 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003d06:	46c0      	nop			@ (mov r8, r8)
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}
 8003d0c:	2000024c 	.word	0x2000024c
 8003d10:	40005400 	.word	0x40005400
 8003d14:	00503d58 	.word	0x00503d58

08003d18 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003d18:	b590      	push	{r4, r7, lr}
 8003d1a:	b089      	sub	sp, #36	@ 0x24
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d20:	240c      	movs	r4, #12
 8003d22:	193b      	adds	r3, r7, r4
 8003d24:	0018      	movs	r0, r3
 8003d26:	2314      	movs	r3, #20
 8003d28:	001a      	movs	r2, r3
 8003d2a:	2100      	movs	r1, #0
 8003d2c:	f009 f896 	bl	800ce5c <memset>
  if(i2cHandle->Instance==I2C1)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a45      	ldr	r2, [pc, #276]	@ (8003e4c <HAL_I2C_MspInit+0x134>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d000      	beq.n	8003d3c <HAL_I2C_MspInit+0x24>
 8003d3a:	e082      	b.n	8003e42 <HAL_I2C_MspInit+0x12a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d3c:	4b44      	ldr	r3, [pc, #272]	@ (8003e50 <HAL_I2C_MspInit+0x138>)
 8003d3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d40:	4b43      	ldr	r3, [pc, #268]	@ (8003e50 <HAL_I2C_MspInit+0x138>)
 8003d42:	2102      	movs	r1, #2
 8003d44:	430a      	orrs	r2, r1
 8003d46:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003d48:	4b41      	ldr	r3, [pc, #260]	@ (8003e50 <HAL_I2C_MspInit+0x138>)
 8003d4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d4c:	2202      	movs	r2, #2
 8003d4e:	4013      	ands	r3, r2
 8003d50:	60bb      	str	r3, [r7, #8]
 8003d52:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003d54:	0021      	movs	r1, r4
 8003d56:	187b      	adds	r3, r7, r1
 8003d58:	22c0      	movs	r2, #192	@ 0xc0
 8003d5a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003d5c:	187b      	adds	r3, r7, r1
 8003d5e:	2212      	movs	r2, #18
 8003d60:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d62:	187b      	adds	r3, r7, r1
 8003d64:	2200      	movs	r2, #0
 8003d66:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d68:	187b      	adds	r3, r7, r1
 8003d6a:	2203      	movs	r2, #3
 8003d6c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8003d6e:	187b      	adds	r3, r7, r1
 8003d70:	2201      	movs	r2, #1
 8003d72:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d74:	187b      	adds	r3, r7, r1
 8003d76:	4a37      	ldr	r2, [pc, #220]	@ (8003e54 <HAL_I2C_MspInit+0x13c>)
 8003d78:	0019      	movs	r1, r3
 8003d7a:	0010      	movs	r0, r2
 8003d7c:	f003 f884 	bl	8006e88 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003d80:	4b33      	ldr	r3, [pc, #204]	@ (8003e50 <HAL_I2C_MspInit+0x138>)
 8003d82:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003d84:	4b32      	ldr	r3, [pc, #200]	@ (8003e50 <HAL_I2C_MspInit+0x138>)
 8003d86:	2180      	movs	r1, #128	@ 0x80
 8003d88:	0389      	lsls	r1, r1, #14
 8003d8a:	430a      	orrs	r2, r1
 8003d8c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel3;
 8003d8e:	4b32      	ldr	r3, [pc, #200]	@ (8003e58 <HAL_I2C_MspInit+0x140>)
 8003d90:	4a32      	ldr	r2, [pc, #200]	@ (8003e5c <HAL_I2C_MspInit+0x144>)
 8003d92:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_6;
 8003d94:	4b30      	ldr	r3, [pc, #192]	@ (8003e58 <HAL_I2C_MspInit+0x140>)
 8003d96:	2206      	movs	r2, #6
 8003d98:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003d9a:	4b2f      	ldr	r3, [pc, #188]	@ (8003e58 <HAL_I2C_MspInit+0x140>)
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003da0:	4b2d      	ldr	r3, [pc, #180]	@ (8003e58 <HAL_I2C_MspInit+0x140>)
 8003da2:	2200      	movs	r2, #0
 8003da4:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003da6:	4b2c      	ldr	r3, [pc, #176]	@ (8003e58 <HAL_I2C_MspInit+0x140>)
 8003da8:	2280      	movs	r2, #128	@ 0x80
 8003daa:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003dac:	4b2a      	ldr	r3, [pc, #168]	@ (8003e58 <HAL_I2C_MspInit+0x140>)
 8003dae:	2200      	movs	r2, #0
 8003db0:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003db2:	4b29      	ldr	r3, [pc, #164]	@ (8003e58 <HAL_I2C_MspInit+0x140>)
 8003db4:	2200      	movs	r2, #0
 8003db6:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8003db8:	4b27      	ldr	r3, [pc, #156]	@ (8003e58 <HAL_I2C_MspInit+0x140>)
 8003dba:	2200      	movs	r2, #0
 8003dbc:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003dbe:	4b26      	ldr	r3, [pc, #152]	@ (8003e58 <HAL_I2C_MspInit+0x140>)
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8003dc4:	4b24      	ldr	r3, [pc, #144]	@ (8003e58 <HAL_I2C_MspInit+0x140>)
 8003dc6:	0018      	movs	r0, r3
 8003dc8:	f002 fe10 	bl	80069ec <HAL_DMA_Init>
 8003dcc:	1e03      	subs	r3, r0, #0
 8003dce:	d001      	beq.n	8003dd4 <HAL_I2C_MspInit+0xbc>
    {
      Error_Handler();
 8003dd0:	f000 f9aa 	bl	8004128 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	4a20      	ldr	r2, [pc, #128]	@ (8003e58 <HAL_I2C_MspInit+0x140>)
 8003dd8:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003dda:	4b1f      	ldr	r3, [pc, #124]	@ (8003e58 <HAL_I2C_MspInit+0x140>)
 8003ddc:	687a      	ldr	r2, [r7, #4]
 8003dde:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel2;
 8003de0:	4b1f      	ldr	r3, [pc, #124]	@ (8003e60 <HAL_I2C_MspInit+0x148>)
 8003de2:	4a20      	ldr	r2, [pc, #128]	@ (8003e64 <HAL_I2C_MspInit+0x14c>)
 8003de4:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_6;
 8003de6:	4b1e      	ldr	r3, [pc, #120]	@ (8003e60 <HAL_I2C_MspInit+0x148>)
 8003de8:	2206      	movs	r2, #6
 8003dea:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003dec:	4b1c      	ldr	r3, [pc, #112]	@ (8003e60 <HAL_I2C_MspInit+0x148>)
 8003dee:	2210      	movs	r2, #16
 8003df0:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003df2:	4b1b      	ldr	r3, [pc, #108]	@ (8003e60 <HAL_I2C_MspInit+0x148>)
 8003df4:	2200      	movs	r2, #0
 8003df6:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003df8:	4b19      	ldr	r3, [pc, #100]	@ (8003e60 <HAL_I2C_MspInit+0x148>)
 8003dfa:	2280      	movs	r2, #128	@ 0x80
 8003dfc:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003dfe:	4b18      	ldr	r3, [pc, #96]	@ (8003e60 <HAL_I2C_MspInit+0x148>)
 8003e00:	2200      	movs	r2, #0
 8003e02:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003e04:	4b16      	ldr	r3, [pc, #88]	@ (8003e60 <HAL_I2C_MspInit+0x148>)
 8003e06:	2200      	movs	r2, #0
 8003e08:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8003e0a:	4b15      	ldr	r3, [pc, #84]	@ (8003e60 <HAL_I2C_MspInit+0x148>)
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003e10:	4b13      	ldr	r3, [pc, #76]	@ (8003e60 <HAL_I2C_MspInit+0x148>)
 8003e12:	2200      	movs	r2, #0
 8003e14:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8003e16:	4b12      	ldr	r3, [pc, #72]	@ (8003e60 <HAL_I2C_MspInit+0x148>)
 8003e18:	0018      	movs	r0, r3
 8003e1a:	f002 fde7 	bl	80069ec <HAL_DMA_Init>
 8003e1e:	1e03      	subs	r3, r0, #0
 8003e20:	d001      	beq.n	8003e26 <HAL_I2C_MspInit+0x10e>
    {
      Error_Handler();
 8003e22:	f000 f981 	bl	8004128 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	4a0d      	ldr	r2, [pc, #52]	@ (8003e60 <HAL_I2C_MspInit+0x148>)
 8003e2a:	639a      	str	r2, [r3, #56]	@ 0x38
 8003e2c:	4b0c      	ldr	r3, [pc, #48]	@ (8003e60 <HAL_I2C_MspInit+0x148>)
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 8003e32:	2200      	movs	r2, #0
 8003e34:	2100      	movs	r1, #0
 8003e36:	2017      	movs	r0, #23
 8003e38:	f002 fda6 	bl	8006988 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 8003e3c:	2017      	movs	r0, #23
 8003e3e:	f002 fdb8 	bl	80069b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8003e42:	46c0      	nop			@ (mov r8, r8)
 8003e44:	46bd      	mov	sp, r7
 8003e46:	b009      	add	sp, #36	@ 0x24
 8003e48:	bd90      	pop	{r4, r7, pc}
 8003e4a:	46c0      	nop			@ (mov r8, r8)
 8003e4c:	40005400 	.word	0x40005400
 8003e50:	40021000 	.word	0x40021000
 8003e54:	50000400 	.word	0x50000400
 8003e58:	200002a0 	.word	0x200002a0
 8003e5c:	40020030 	.word	0x40020030
 8003e60:	200002e8 	.word	0x200002e8
 8003e64:	4002001c 	.word	0x4002001c

08003e68 <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
DMA_HandleTypeDef hdma_spi2_rx;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8003e6c:	4b10      	ldr	r3, [pc, #64]	@ (8003eb0 <MX_I2S2_Init+0x48>)
 8003e6e:	4a11      	ldr	r2, [pc, #68]	@ (8003eb4 <MX_I2S2_Init+0x4c>)
 8003e70:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 8003e72:	4b0f      	ldr	r3, [pc, #60]	@ (8003eb0 <MX_I2S2_Init+0x48>)
 8003e74:	22c0      	movs	r2, #192	@ 0xc0
 8003e76:	0092      	lsls	r2, r2, #2
 8003e78:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_MSB;
 8003e7a:	4b0d      	ldr	r3, [pc, #52]	@ (8003eb0 <MX_I2S2_Init+0x48>)
 8003e7c:	2210      	movs	r2, #16
 8003e7e:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_32B;
 8003e80:	4b0b      	ldr	r3, [pc, #44]	@ (8003eb0 <MX_I2S2_Init+0x48>)
 8003e82:	2205      	movs	r2, #5
 8003e84:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8003e86:	4b0a      	ldr	r3, [pc, #40]	@ (8003eb0 <MX_I2S2_Init+0x48>)
 8003e88:	2200      	movs	r2, #0
 8003e8a:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 8003e8c:	4b08      	ldr	r3, [pc, #32]	@ (8003eb0 <MX_I2S2_Init+0x48>)
 8003e8e:	22fa      	movs	r2, #250	@ 0xfa
 8003e90:	0152      	lsls	r2, r2, #5
 8003e92:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_HIGH;
 8003e94:	4b06      	ldr	r3, [pc, #24]	@ (8003eb0 <MX_I2S2_Init+0x48>)
 8003e96:	2208      	movs	r2, #8
 8003e98:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8003e9a:	4b05      	ldr	r3, [pc, #20]	@ (8003eb0 <MX_I2S2_Init+0x48>)
 8003e9c:	0018      	movs	r0, r3
 8003e9e:	f005 f9b9 	bl	8009214 <HAL_I2S_Init>
 8003ea2:	1e03      	subs	r3, r0, #0
 8003ea4:	d001      	beq.n	8003eaa <MX_I2S2_Init+0x42>
  {
    Error_Handler();
 8003ea6:	f000 f93f 	bl	8004128 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8003eaa:	46c0      	nop			@ (mov r8, r8)
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd80      	pop	{r7, pc}
 8003eb0:	20000330 	.word	0x20000330
 8003eb4:	40003800 	.word	0x40003800

08003eb8 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8003eb8:	b590      	push	{r4, r7, lr}
 8003eba:	b089      	sub	sp, #36	@ 0x24
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ec0:	240c      	movs	r4, #12
 8003ec2:	193b      	adds	r3, r7, r4
 8003ec4:	0018      	movs	r0, r3
 8003ec6:	2314      	movs	r3, #20
 8003ec8:	001a      	movs	r2, r3
 8003eca:	2100      	movs	r1, #0
 8003ecc:	f008 ffc6 	bl	800ce5c <memset>
  if(i2sHandle->Instance==SPI2)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a2d      	ldr	r2, [pc, #180]	@ (8003f8c <HAL_I2S_MspInit+0xd4>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d154      	bne.n	8003f84 <HAL_I2S_MspInit+0xcc>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003eda:	4b2d      	ldr	r3, [pc, #180]	@ (8003f90 <HAL_I2S_MspInit+0xd8>)
 8003edc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003ede:	4b2c      	ldr	r3, [pc, #176]	@ (8003f90 <HAL_I2S_MspInit+0xd8>)
 8003ee0:	2180      	movs	r1, #128	@ 0x80
 8003ee2:	01c9      	lsls	r1, r1, #7
 8003ee4:	430a      	orrs	r2, r1
 8003ee6:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ee8:	4b29      	ldr	r3, [pc, #164]	@ (8003f90 <HAL_I2S_MspInit+0xd8>)
 8003eea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003eec:	4b28      	ldr	r3, [pc, #160]	@ (8003f90 <HAL_I2S_MspInit+0xd8>)
 8003eee:	2102      	movs	r1, #2
 8003ef0:	430a      	orrs	r2, r1
 8003ef2:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003ef4:	4b26      	ldr	r3, [pc, #152]	@ (8003f90 <HAL_I2S_MspInit+0xd8>)
 8003ef6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ef8:	2202      	movs	r2, #2
 8003efa:	4013      	ands	r3, r2
 8003efc:	60bb      	str	r3, [r7, #8]
 8003efe:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8003f00:	193b      	adds	r3, r7, r4
 8003f02:	22b0      	movs	r2, #176	@ 0xb0
 8003f04:	0212      	lsls	r2, r2, #8
 8003f06:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f08:	0021      	movs	r1, r4
 8003f0a:	187b      	adds	r3, r7, r1
 8003f0c:	2202      	movs	r2, #2
 8003f0e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f10:	187b      	adds	r3, r7, r1
 8003f12:	2200      	movs	r2, #0
 8003f14:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f16:	187b      	adds	r3, r7, r1
 8003f18:	2200      	movs	r2, #0
 8003f1a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8003f1c:	187b      	adds	r3, r7, r1
 8003f1e:	2200      	movs	r2, #0
 8003f20:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f22:	187b      	adds	r3, r7, r1
 8003f24:	4a1b      	ldr	r2, [pc, #108]	@ (8003f94 <HAL_I2S_MspInit+0xdc>)
 8003f26:	0019      	movs	r1, r3
 8003f28:	0010      	movs	r0, r2
 8003f2a:	f002 ffad 	bl	8006e88 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel4;
 8003f2e:	4b1a      	ldr	r3, [pc, #104]	@ (8003f98 <HAL_I2S_MspInit+0xe0>)
 8003f30:	4a1a      	ldr	r2, [pc, #104]	@ (8003f9c <HAL_I2S_MspInit+0xe4>)
 8003f32:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_2;
 8003f34:	4b18      	ldr	r3, [pc, #96]	@ (8003f98 <HAL_I2S_MspInit+0xe0>)
 8003f36:	2202      	movs	r2, #2
 8003f38:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003f3a:	4b17      	ldr	r3, [pc, #92]	@ (8003f98 <HAL_I2S_MspInit+0xe0>)
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003f40:	4b15      	ldr	r3, [pc, #84]	@ (8003f98 <HAL_I2S_MspInit+0xe0>)
 8003f42:	2200      	movs	r2, #0
 8003f44:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003f46:	4b14      	ldr	r3, [pc, #80]	@ (8003f98 <HAL_I2S_MspInit+0xe0>)
 8003f48:	2280      	movs	r2, #128	@ 0x80
 8003f4a:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003f4c:	4b12      	ldr	r3, [pc, #72]	@ (8003f98 <HAL_I2S_MspInit+0xe0>)
 8003f4e:	2280      	movs	r2, #128	@ 0x80
 8003f50:	0052      	lsls	r2, r2, #1
 8003f52:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003f54:	4b10      	ldr	r3, [pc, #64]	@ (8003f98 <HAL_I2S_MspInit+0xe0>)
 8003f56:	2280      	movs	r2, #128	@ 0x80
 8003f58:	00d2      	lsls	r2, r2, #3
 8003f5a:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8003f5c:	4b0e      	ldr	r3, [pc, #56]	@ (8003f98 <HAL_I2S_MspInit+0xe0>)
 8003f5e:	2220      	movs	r2, #32
 8003f60:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003f62:	4b0d      	ldr	r3, [pc, #52]	@ (8003f98 <HAL_I2S_MspInit+0xe0>)
 8003f64:	2200      	movs	r2, #0
 8003f66:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8003f68:	4b0b      	ldr	r3, [pc, #44]	@ (8003f98 <HAL_I2S_MspInit+0xe0>)
 8003f6a:	0018      	movs	r0, r3
 8003f6c:	f002 fd3e 	bl	80069ec <HAL_DMA_Init>
 8003f70:	1e03      	subs	r3, r0, #0
 8003f72:	d001      	beq.n	8003f78 <HAL_I2S_MspInit+0xc0>
    {
      Error_Handler();
 8003f74:	f000 f8d8 	bl	8004128 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmarx,hdma_spi2_rx);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	4a07      	ldr	r2, [pc, #28]	@ (8003f98 <HAL_I2S_MspInit+0xe0>)
 8003f7c:	631a      	str	r2, [r3, #48]	@ 0x30
 8003f7e:	4b06      	ldr	r3, [pc, #24]	@ (8003f98 <HAL_I2S_MspInit+0xe0>)
 8003f80:	687a      	ldr	r2, [r7, #4]
 8003f82:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8003f84:	46c0      	nop			@ (mov r8, r8)
 8003f86:	46bd      	mov	sp, r7
 8003f88:	b009      	add	sp, #36	@ 0x24
 8003f8a:	bd90      	pop	{r4, r7, pc}
 8003f8c:	40003800 	.word	0x40003800
 8003f90:	40021000 	.word	0x40021000
 8003f94:	50000400 	.word	0x50000400
 8003f98:	2000036c 	.word	0x2000036c
 8003f9c:	40020044 	.word	0x40020044

08003fa0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b082      	sub	sp, #8
 8003fa4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003fa6:	f002 fbaf 	bl	8006708 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003faa:	f000 f841 	bl	8004030 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003fae:	f7ff fd37 	bl	8003a20 <MX_GPIO_Init>
  MX_DMA_Init();
 8003fb2:	f7ff fcbf 	bl	8003934 <MX_DMA_Init>
  MX_I2C1_Init();
 8003fb6:	f7ff fe6f 	bl	8003c98 <MX_I2C1_Init>
  MX_I2S2_Init();
 8003fba:	f7ff ff55 	bl	8003e68 <MX_I2S2_Init>
  MX_USART4_UART_Init();
 8003fbe:	f001 fe65 	bl	8005c8c <MX_USART4_UART_Init>
  MX_USART1_UART_Init();
 8003fc2:	f001 fe33 	bl	8005c2c <MX_USART1_UART_Init>
  MX_RTC_Init();
 8003fc6:	f000 fac9 	bl	800455c <MX_RTC_Init>
	 * : Default network: Sensor community
	 * : Different modes for outside and inside (check solar?)
	 * : Add CLI via usb-c
	 * : Network not found? Sleep
	 */
  uint32_t LedBlinkTimestamp = HAL_GetTick() + LED_BLINK_INTERVAL;
 8003fca:	f002 fc03 	bl	80067d4 <HAL_GetTick>
 8003fce:	0003      	movs	r3, r0
 8003fd0:	22fa      	movs	r2, #250	@ 0xfa
 8003fd2:	0092      	lsls	r2, r2, #2
 8003fd4:	4694      	mov	ip, r2
 8003fd6:	4463      	add	r3, ip
 8003fd8:	607b      	str	r3, [r7, #4]
  SetVerboseLevel(VERBOSE_ALL);
 8003fda:	2003      	movs	r0, #3
 8003fdc:	f002 f858 	bl	8006090 <SetVerboseLevel>
  BinaryReleaseInfo();
 8003fe0:	f002 f86e 	bl	80060c0 <BinaryReleaseInfo>
  Gadget_Init(&hi2c1, &hi2s2, &huart4);
 8003fe4:	4a0e      	ldr	r2, [pc, #56]	@ (8004020 <main+0x80>)
 8003fe6:	490f      	ldr	r1, [pc, #60]	@ (8004024 <main+0x84>)
 8003fe8:	4b0f      	ldr	r3, [pc, #60]	@ (8004028 <main+0x88>)
 8003fea:	0018      	movs	r0, r3
 8003fec:	f7ff fcc8 	bl	8003980 <Gadget_Init>
//  MIC_Start(16000, 512);
  while (1) {
//    MIC_GetSample();
	  // Upkeep gadget
//    UpkeepGadget();
    ESP_Upkeep();
 8003ff0:	f7ff fb54 	bl	800369c <ESP_Upkeep>


    if(TimestampIsReached(LedBlinkTimestamp)) {
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	0018      	movs	r0, r3
 8003ff8:	f001 ff78 	bl	8005eec <TimestampIsReached>
 8003ffc:	1e03      	subs	r3, r0, #0
 8003ffe:	d0f7      	beq.n	8003ff0 <main+0x50>
      HAL_GPIO_TogglePin(STATUS_LED_GPIO_Port, STATUS_LED_Pin);
 8004000:	2380      	movs	r3, #128	@ 0x80
 8004002:	005b      	lsls	r3, r3, #1
 8004004:	4a09      	ldr	r2, [pc, #36]	@ (800402c <main+0x8c>)
 8004006:	0019      	movs	r1, r3
 8004008:	0010      	movs	r0, r2
 800400a:	f003 f8d8 	bl	80071be <HAL_GPIO_TogglePin>
      LedBlinkTimestamp = HAL_GetTick() + LED_BLINK_INTERVAL;
 800400e:	f002 fbe1 	bl	80067d4 <HAL_GetTick>
 8004012:	0003      	movs	r3, r0
 8004014:	22fa      	movs	r2, #250	@ 0xfa
 8004016:	0092      	lsls	r2, r2, #2
 8004018:	4694      	mov	ip, r2
 800401a:	4463      	add	r3, ip
 800401c:	607b      	str	r3, [r7, #4]
    ESP_Upkeep();
 800401e:	e7e7      	b.n	8003ff0 <main+0x50>
 8004020:	200006b4 	.word	0x200006b4
 8004024:	20000330 	.word	0x20000330
 8004028:	2000024c 	.word	0x2000024c
 800402c:	50000800 	.word	0x50000800

08004030 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004030:	b590      	push	{r4, r7, lr}
 8004032:	b09d      	sub	sp, #116	@ 0x74
 8004034:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004036:	2438      	movs	r4, #56	@ 0x38
 8004038:	193b      	adds	r3, r7, r4
 800403a:	0018      	movs	r0, r3
 800403c:	2338      	movs	r3, #56	@ 0x38
 800403e:	001a      	movs	r2, r3
 8004040:	2100      	movs	r1, #0
 8004042:	f008 ff0b 	bl	800ce5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004046:	2324      	movs	r3, #36	@ 0x24
 8004048:	18fb      	adds	r3, r7, r3
 800404a:	0018      	movs	r0, r3
 800404c:	2314      	movs	r3, #20
 800404e:	001a      	movs	r2, r3
 8004050:	2100      	movs	r1, #0
 8004052:	f008 ff03 	bl	800ce5c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004056:	003b      	movs	r3, r7
 8004058:	0018      	movs	r0, r3
 800405a:	2324      	movs	r3, #36	@ 0x24
 800405c:	001a      	movs	r2, r3
 800405e:	2100      	movs	r1, #0
 8004060:	f008 fefc 	bl	800ce5c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004064:	4b2d      	ldr	r3, [pc, #180]	@ (800411c <SystemClock_Config+0xec>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a2d      	ldr	r2, [pc, #180]	@ (8004120 <SystemClock_Config+0xf0>)
 800406a:	401a      	ands	r2, r3
 800406c:	4b2b      	ldr	r3, [pc, #172]	@ (800411c <SystemClock_Config+0xec>)
 800406e:	2180      	movs	r1, #128	@ 0x80
 8004070:	0109      	lsls	r1, r1, #4
 8004072:	430a      	orrs	r2, r1
 8004074:	601a      	str	r2, [r3, #0]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8004076:	f005 fbef 	bl	8009858 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800407a:	4b2a      	ldr	r3, [pc, #168]	@ (8004124 <SystemClock_Config+0xf4>)
 800407c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800407e:	4b29      	ldr	r3, [pc, #164]	@ (8004124 <SystemClock_Config+0xf4>)
 8004080:	4927      	ldr	r1, [pc, #156]	@ (8004120 <SystemClock_Config+0xf0>)
 8004082:	400a      	ands	r2, r1
 8004084:	651a      	str	r2, [r3, #80]	@ 0x50

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8004086:	193b      	adds	r3, r7, r4
 8004088:	2206      	movs	r2, #6
 800408a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800408c:	193b      	adds	r3, r7, r4
 800408e:	2280      	movs	r2, #128	@ 0x80
 8004090:	0052      	lsls	r2, r2, #1
 8004092:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004094:	193b      	adds	r3, r7, r4
 8004096:	2201      	movs	r2, #1
 8004098:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800409a:	193b      	adds	r3, r7, r4
 800409c:	2210      	movs	r2, #16
 800409e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80040a0:	193b      	adds	r3, r7, r4
 80040a2:	2200      	movs	r2, #0
 80040a4:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80040a6:	193b      	adds	r3, r7, r4
 80040a8:	0018      	movs	r0, r3
 80040aa:	f005 fbe3 	bl	8009874 <HAL_RCC_OscConfig>
 80040ae:	1e03      	subs	r3, r0, #0
 80040b0:	d001      	beq.n	80040b6 <SystemClock_Config+0x86>
  {
    Error_Handler();
 80040b2:	f000 f839 	bl	8004128 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80040b6:	2124      	movs	r1, #36	@ 0x24
 80040b8:	187b      	adds	r3, r7, r1
 80040ba:	220f      	movs	r2, #15
 80040bc:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80040be:	187b      	adds	r3, r7, r1
 80040c0:	2201      	movs	r2, #1
 80040c2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80040c4:	187b      	adds	r3, r7, r1
 80040c6:	2200      	movs	r2, #0
 80040c8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80040ca:	187b      	adds	r3, r7, r1
 80040cc:	2200      	movs	r2, #0
 80040ce:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80040d0:	187b      	adds	r3, r7, r1
 80040d2:	2200      	movs	r2, #0
 80040d4:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80040d6:	187b      	adds	r3, r7, r1
 80040d8:	2100      	movs	r1, #0
 80040da:	0018      	movs	r0, r3
 80040dc:	f005 ff9e 	bl	800a01c <HAL_RCC_ClockConfig>
 80040e0:	1e03      	subs	r3, r0, #0
 80040e2:	d001      	beq.n	80040e8 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80040e4:	f000 f820 	bl	8004128 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1
 80040e8:	003b      	movs	r3, r7
 80040ea:	2229      	movs	r2, #41	@ 0x29
 80040ec:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_RTC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80040ee:	003b      	movs	r3, r7
 80040f0:	2200      	movs	r2, #0
 80040f2:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80040f4:	003b      	movs	r3, r7
 80040f6:	2200      	movs	r2, #0
 80040f8:	615a      	str	r2, [r3, #20]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80040fa:	003b      	movs	r3, r7
 80040fc:	2280      	movs	r2, #128	@ 0x80
 80040fe:	0252      	lsls	r2, r2, #9
 8004100:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004102:	003b      	movs	r3, r7
 8004104:	0018      	movs	r0, r3
 8004106:	f006 f9ad 	bl	800a464 <HAL_RCCEx_PeriphCLKConfig>
 800410a:	1e03      	subs	r3, r0, #0
 800410c:	d001      	beq.n	8004112 <SystemClock_Config+0xe2>
  {
    Error_Handler();
 800410e:	f000 f80b 	bl	8004128 <Error_Handler>
  }
}
 8004112:	46c0      	nop			@ (mov r8, r8)
 8004114:	46bd      	mov	sp, r7
 8004116:	b01d      	add	sp, #116	@ 0x74
 8004118:	bd90      	pop	{r4, r7, pc}
 800411a:	46c0      	nop			@ (mov r8, r8)
 800411c:	40007000 	.word	0x40007000
 8004120:	ffffe7ff 	.word	0xffffe7ff
 8004124:	40021000 	.word	0x40021000

08004128 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800412c:	b672      	cpsid	i
}
 800412e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004130:	46c0      	nop			@ (mov r8, r8)
 8004132:	e7fd      	b.n	8004130 <Error_Handler+0x8>

08004134 <HT_StartMeasurementWrapper>:
static MeasurementParameters Measurements[MEAS_MEASUREMENT_COUNT];
static EnabledMeasurements MeasEnabled;
static MeasurementState MeasState = MEAS_STATE_INIT;
static uint8_t CurrentMeasurementIndex = 0;

static void HT_StartMeasurementWrapper(void) {
 8004134:	b580      	push	{r7, lr}
 8004136:	af00      	add	r7, sp, #0
  HT_StartMeasurement();
 8004138:	f7ff fd8f 	bl	8003c5a <HT_StartMeasurement>
}
 800413c:	46c0      	nop			@ (mov r8, r8)
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}
	...

08004144 <HT_IsMeasurementDoneWrapper>:

static bool HT_IsMeasurementDoneWrapper(void) {
 8004144:	b580      	push	{r7, lr}
 8004146:	af00      	add	r7, sp, #0
  return HT_GetMeasurementValues(&MeasurementCtx.humidityPerc, &MeasurementCtx.temperature);
 8004148:	4a04      	ldr	r2, [pc, #16]	@ (800415c <HT_IsMeasurementDoneWrapper+0x18>)
 800414a:	4b05      	ldr	r3, [pc, #20]	@ (8004160 <HT_IsMeasurementDoneWrapper+0x1c>)
 800414c:	0011      	movs	r1, r2
 800414e:	0018      	movs	r0, r3
 8004150:	f7ff fd8a 	bl	8003c68 <HT_GetMeasurementValues>
 8004154:	0003      	movs	r3, r0
}
 8004156:	0018      	movs	r0, r3
 8004158:	46bd      	mov	sp, r7
 800415a:	bd80      	pop	{r7, pc}
 800415c:	200003b8 	.word	0x200003b8
 8004160:	200003b4 	.word	0x200003b4

08004164 <VOC_StartMeasurementWrapper>:

static void VOC_StartMeasurementWrapper(void) {
 8004164:	b580      	push	{r7, lr}
 8004166:	af00      	add	r7, sp, #0
  Gas_StartMeasurement();
 8004168:	f7ff fc3d 	bl	80039e6 <Gas_StartMeasurement>
}
 800416c:	46c0      	nop			@ (mov r8, r8)
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}
	...

08004174 <VOC_IsMeasurementDoneWrapper>:

static bool VOC_IsMeasurementDoneWrapper(void) {
 8004174:	b580      	push	{r7, lr}
 8004176:	af00      	add	r7, sp, #0
  return Gas_GetMeasurementValues(&MeasurementCtx.vocIndex);
 8004178:	4b03      	ldr	r3, [pc, #12]	@ (8004188 <VOC_IsMeasurementDoneWrapper+0x14>)
 800417a:	0018      	movs	r0, r3
 800417c:	f7ff fc3a 	bl	80039f4 <Gas_GetMeasurementValues>
 8004180:	0003      	movs	r3, r0
}
 8004182:	0018      	movs	r0, r3
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}
 8004188:	200003bc 	.word	0x200003bc

0800418c <NO_StartMeasurementWrapper>:

static void NO_StartMeasurementWrapper(void) {
 800418c:	b580      	push	{r7, lr}
 800418e:	af00      	add	r7, sp, #0
  // TODO: Implement NO wrapper.
}
 8004190:	46c0      	nop			@ (mov r8, r8)
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}

08004196 <NO_IsMeasurementDoneWrapper>:

static bool NO_IsMeasurementDoneWrapper(void) {
 8004196:	b580      	push	{r7, lr}
 8004198:	af00      	add	r7, sp, #0
  return true;
 800419a:	2301      	movs	r3, #1
}
 800419c:	0018      	movs	r0, r3
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}
	...

080041a4 <MIC_StartMeasurementWrapper>:

static void MIC_StartMeasurementWrapper(void) {
 80041a4:	b580      	push	{r7, lr}
 80041a6:	af00      	add	r7, sp, #0
  MIC_Start(SAMPLE_RATE_48K, NR_SAMPLES_128);
 80041a8:	2380      	movs	r3, #128	@ 0x80
 80041aa:	009b      	lsls	r3, r3, #2
 80041ac:	4a03      	ldr	r2, [pc, #12]	@ (80041bc <MIC_StartMeasurementWrapper+0x18>)
 80041ae:	0019      	movs	r1, r3
 80041b0:	0010      	movs	r0, r2
 80041b2:	f000 f947 	bl	8004444 <MIC_Start>
}
 80041b6:	46c0      	nop			@ (mov r8, r8)
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}
 80041bc:	0000bb80 	.word	0x0000bb80

080041c0 <MIC_IsMeasurementDoneWrapper>:

static bool MIC_IsMeasurementDoneWrapper(void) {
 80041c0:	b580      	push	{r7, lr}
 80041c2:	af00      	add	r7, sp, #0
    return false;
 80041c4:	2300      	movs	r3, #0
}
 80041c6:	0018      	movs	r0, r3
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}

080041cc <Meas_Init>:

void Meas_Init(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s) {
 80041cc:	b5b0      	push	{r4, r5, r7, lr}
 80041ce:	b094      	sub	sp, #80	@ 0x50
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
 80041d4:	6039      	str	r1, [r7, #0]
  MeasState = MEAS_STATE_INIT;
 80041d6:	4b5b      	ldr	r3, [pc, #364]	@ (8004344 <Meas_Init+0x178>)
 80041d8:	2200      	movs	r2, #0
 80041da:	701a      	strb	r2, [r3, #0]
  if(MeasEnabled.HT_measurementEnabled || MeasEnabled.VOC_measurementEnabled) {
 80041dc:	4b5a      	ldr	r3, [pc, #360]	@ (8004348 <Meas_Init+0x17c>)
 80041de:	781b      	ldrb	r3, [r3, #0]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d103      	bne.n	80041ec <Meas_Init+0x20>
 80041e4:	4b58      	ldr	r3, [pc, #352]	@ (8004348 <Meas_Init+0x17c>)
 80041e6:	785b      	ldrb	r3, [r3, #1]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d027      	beq.n	800423c <Meas_Init+0x70>
    I2CSensors_Init(sensorI2C);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	0018      	movs	r0, r3
 80041f0:	f7ff fb2e 	bl	8003850 <I2CSensors_Init>
    if(!HT_DeviceConnected()) {
 80041f4:	f7ff fd48 	bl	8003c88 <HT_DeviceConnected>
 80041f8:	0003      	movs	r3, r0
 80041fa:	001a      	movs	r2, r3
 80041fc:	2301      	movs	r3, #1
 80041fe:	4053      	eors	r3, r2
 8004200:	b2db      	uxtb	r3, r3
 8004202:	2b00      	cmp	r3, #0
 8004204:	d008      	beq.n	8004218 <Meas_Init+0x4c>
       Error("HT device not connected!");
 8004206:	4a51      	ldr	r2, [pc, #324]	@ (800434c <Meas_Init+0x180>)
 8004208:	4b51      	ldr	r3, [pc, #324]	@ (8004350 <Meas_Init+0x184>)
 800420a:	0019      	movs	r1, r3
 800420c:	2001      	movs	r0, #1
 800420e:	f001 fec3 	bl	8005f98 <CreateLine>
       MeasEnabled.HT_measurementEnabled = false;
 8004212:	4b4d      	ldr	r3, [pc, #308]	@ (8004348 <Meas_Init+0x17c>)
 8004214:	2200      	movs	r2, #0
 8004216:	701a      	strb	r2, [r3, #0]
    }
    if(!Gas_DeviceConnected()) {
 8004218:	f7ff fbf9 	bl	8003a0e <Gas_DeviceConnected>
 800421c:	0003      	movs	r3, r0
 800421e:	001a      	movs	r2, r3
 8004220:	2301      	movs	r3, #1
 8004222:	4053      	eors	r3, r2
 8004224:	b2db      	uxtb	r3, r3
 8004226:	2b00      	cmp	r3, #0
 8004228:	d008      	beq.n	800423c <Meas_Init+0x70>
       Error("SGP device not connected!");
 800422a:	4a4a      	ldr	r2, [pc, #296]	@ (8004354 <Meas_Init+0x188>)
 800422c:	4b48      	ldr	r3, [pc, #288]	@ (8004350 <Meas_Init+0x184>)
 800422e:	0019      	movs	r1, r3
 8004230:	2001      	movs	r0, #1
 8004232:	f001 feb1 	bl	8005f98 <CreateLine>
       MeasEnabled.VOC_measurementEnabled = false;
 8004236:	4b44      	ldr	r3, [pc, #272]	@ (8004348 <Meas_Init+0x17c>)
 8004238:	2200      	movs	r2, #0
 800423a:	705a      	strb	r2, [r3, #1]
    }
  }
  if(MeasEnabled.MIC_measurementEnabled) {
 800423c:	4b42      	ldr	r3, [pc, #264]	@ (8004348 <Meas_Init+0x17c>)
 800423e:	78db      	ldrb	r3, [r3, #3]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d003      	beq.n	800424c <Meas_Init+0x80>
    MIC_Init(micI2s);
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	0018      	movs	r0, r3
 8004248:	f000 f8ee 	bl	8004428 <MIC_Init>
  }
  uint8_t offset = 0;
 800424c:	254f      	movs	r5, #79	@ 0x4f
 800424e:	197b      	adds	r3, r7, r5
 8004250:	2200      	movs	r2, #0
 8004252:	701a      	strb	r2, [r3, #0]
  Measurements[offset++] = (MeasurementParameters) {HT_StartMeasurementWrapper, HT_IsMeasurementDoneWrapper, &MeasurementCtx.HT_measurementDone, MeasEnabled.HT_measurementEnabled};
 8004254:	197b      	adds	r3, r7, r5
 8004256:	781b      	ldrb	r3, [r3, #0]
 8004258:	197a      	adds	r2, r7, r5
 800425a:	1c59      	adds	r1, r3, #1
 800425c:	7011      	strb	r1, [r2, #0]
 800425e:	4a3a      	ldr	r2, [pc, #232]	@ (8004348 <Meas_Init+0x17c>)
 8004260:	7814      	ldrb	r4, [r2, #0]
 8004262:	4a3d      	ldr	r2, [pc, #244]	@ (8004358 <Meas_Init+0x18c>)
 8004264:	0119      	lsls	r1, r3, #4
 8004266:	483d      	ldr	r0, [pc, #244]	@ (800435c <Meas_Init+0x190>)
 8004268:	5088      	str	r0, [r1, r2]
 800426a:	493b      	ldr	r1, [pc, #236]	@ (8004358 <Meas_Init+0x18c>)
 800426c:	011a      	lsls	r2, r3, #4
 800426e:	188a      	adds	r2, r1, r2
 8004270:	3204      	adds	r2, #4
 8004272:	493b      	ldr	r1, [pc, #236]	@ (8004360 <Meas_Init+0x194>)
 8004274:	6011      	str	r1, [r2, #0]
 8004276:	4938      	ldr	r1, [pc, #224]	@ (8004358 <Meas_Init+0x18c>)
 8004278:	011a      	lsls	r2, r3, #4
 800427a:	188a      	adds	r2, r1, r2
 800427c:	3208      	adds	r2, #8
 800427e:	4939      	ldr	r1, [pc, #228]	@ (8004364 <Meas_Init+0x198>)
 8004280:	6011      	str	r1, [r2, #0]
 8004282:	4a35      	ldr	r2, [pc, #212]	@ (8004358 <Meas_Init+0x18c>)
 8004284:	011b      	lsls	r3, r3, #4
 8004286:	18d3      	adds	r3, r2, r3
 8004288:	330c      	adds	r3, #12
 800428a:	1c22      	adds	r2, r4, #0
 800428c:	701a      	strb	r2, [r3, #0]
  Measurements[offset++] = (MeasurementParameters) {VOC_StartMeasurementWrapper, VOC_IsMeasurementDoneWrapper, &MeasurementCtx.VOC_measurementDone, MeasEnabled.VOC_measurementEnabled};
 800428e:	197b      	adds	r3, r7, r5
 8004290:	781b      	ldrb	r3, [r3, #0]
 8004292:	197a      	adds	r2, r7, r5
 8004294:	1c59      	adds	r1, r3, #1
 8004296:	7011      	strb	r1, [r2, #0]
 8004298:	4a2b      	ldr	r2, [pc, #172]	@ (8004348 <Meas_Init+0x17c>)
 800429a:	7854      	ldrb	r4, [r2, #1]
 800429c:	4a2e      	ldr	r2, [pc, #184]	@ (8004358 <Meas_Init+0x18c>)
 800429e:	0119      	lsls	r1, r3, #4
 80042a0:	4831      	ldr	r0, [pc, #196]	@ (8004368 <Meas_Init+0x19c>)
 80042a2:	5088      	str	r0, [r1, r2]
 80042a4:	492c      	ldr	r1, [pc, #176]	@ (8004358 <Meas_Init+0x18c>)
 80042a6:	011a      	lsls	r2, r3, #4
 80042a8:	188a      	adds	r2, r1, r2
 80042aa:	3204      	adds	r2, #4
 80042ac:	492f      	ldr	r1, [pc, #188]	@ (800436c <Meas_Init+0x1a0>)
 80042ae:	6011      	str	r1, [r2, #0]
 80042b0:	4929      	ldr	r1, [pc, #164]	@ (8004358 <Meas_Init+0x18c>)
 80042b2:	011a      	lsls	r2, r3, #4
 80042b4:	188a      	adds	r2, r1, r2
 80042b6:	3208      	adds	r2, #8
 80042b8:	492d      	ldr	r1, [pc, #180]	@ (8004370 <Meas_Init+0x1a4>)
 80042ba:	6011      	str	r1, [r2, #0]
 80042bc:	4a26      	ldr	r2, [pc, #152]	@ (8004358 <Meas_Init+0x18c>)
 80042be:	011b      	lsls	r3, r3, #4
 80042c0:	18d3      	adds	r3, r2, r3
 80042c2:	330c      	adds	r3, #12
 80042c4:	1c22      	adds	r2, r4, #0
 80042c6:	701a      	strb	r2, [r3, #0]
  Measurements[offset++] = (MeasurementParameters) {NO_StartMeasurementWrapper, NO_IsMeasurementDoneWrapper, &MeasurementCtx.NO_measurementDone, MeasEnabled.NO_measurementEnabled};
 80042c8:	197b      	adds	r3, r7, r5
 80042ca:	781b      	ldrb	r3, [r3, #0]
 80042cc:	197a      	adds	r2, r7, r5
 80042ce:	1c59      	adds	r1, r3, #1
 80042d0:	7011      	strb	r1, [r2, #0]
 80042d2:	4a1d      	ldr	r2, [pc, #116]	@ (8004348 <Meas_Init+0x17c>)
 80042d4:	7894      	ldrb	r4, [r2, #2]
 80042d6:	4a20      	ldr	r2, [pc, #128]	@ (8004358 <Meas_Init+0x18c>)
 80042d8:	0119      	lsls	r1, r3, #4
 80042da:	4826      	ldr	r0, [pc, #152]	@ (8004374 <Meas_Init+0x1a8>)
 80042dc:	5088      	str	r0, [r1, r2]
 80042de:	491e      	ldr	r1, [pc, #120]	@ (8004358 <Meas_Init+0x18c>)
 80042e0:	011a      	lsls	r2, r3, #4
 80042e2:	188a      	adds	r2, r1, r2
 80042e4:	3204      	adds	r2, #4
 80042e6:	4924      	ldr	r1, [pc, #144]	@ (8004378 <Meas_Init+0x1ac>)
 80042e8:	6011      	str	r1, [r2, #0]
 80042ea:	491b      	ldr	r1, [pc, #108]	@ (8004358 <Meas_Init+0x18c>)
 80042ec:	011a      	lsls	r2, r3, #4
 80042ee:	188a      	adds	r2, r1, r2
 80042f0:	3208      	adds	r2, #8
 80042f2:	4922      	ldr	r1, [pc, #136]	@ (800437c <Meas_Init+0x1b0>)
 80042f4:	6011      	str	r1, [r2, #0]
 80042f6:	4a18      	ldr	r2, [pc, #96]	@ (8004358 <Meas_Init+0x18c>)
 80042f8:	011b      	lsls	r3, r3, #4
 80042fa:	18d3      	adds	r3, r2, r3
 80042fc:	330c      	adds	r3, #12
 80042fe:	1c22      	adds	r2, r4, #0
 8004300:	701a      	strb	r2, [r3, #0]
  Measurements[offset++] = (MeasurementParameters) {MIC_StartMeasurementWrapper, MIC_IsMeasurementDoneWrapper, &MeasurementCtx.MIC_measurementDone, MeasEnabled.MIC_measurementEnabled};
 8004302:	197b      	adds	r3, r7, r5
 8004304:	781b      	ldrb	r3, [r3, #0]
 8004306:	197a      	adds	r2, r7, r5
 8004308:	1c59      	adds	r1, r3, #1
 800430a:	7011      	strb	r1, [r2, #0]
 800430c:	4a0e      	ldr	r2, [pc, #56]	@ (8004348 <Meas_Init+0x17c>)
 800430e:	78d4      	ldrb	r4, [r2, #3]
 8004310:	4a11      	ldr	r2, [pc, #68]	@ (8004358 <Meas_Init+0x18c>)
 8004312:	0119      	lsls	r1, r3, #4
 8004314:	481a      	ldr	r0, [pc, #104]	@ (8004380 <Meas_Init+0x1b4>)
 8004316:	5088      	str	r0, [r1, r2]
 8004318:	490f      	ldr	r1, [pc, #60]	@ (8004358 <Meas_Init+0x18c>)
 800431a:	011a      	lsls	r2, r3, #4
 800431c:	188a      	adds	r2, r1, r2
 800431e:	3204      	adds	r2, #4
 8004320:	4918      	ldr	r1, [pc, #96]	@ (8004384 <Meas_Init+0x1b8>)
 8004322:	6011      	str	r1, [r2, #0]
 8004324:	490c      	ldr	r1, [pc, #48]	@ (8004358 <Meas_Init+0x18c>)
 8004326:	011a      	lsls	r2, r3, #4
 8004328:	188a      	adds	r2, r1, r2
 800432a:	3208      	adds	r2, #8
 800432c:	4916      	ldr	r1, [pc, #88]	@ (8004388 <Meas_Init+0x1bc>)
 800432e:	6011      	str	r1, [r2, #0]
 8004330:	4a09      	ldr	r2, [pc, #36]	@ (8004358 <Meas_Init+0x18c>)
 8004332:	011b      	lsls	r3, r3, #4
 8004334:	18d3      	adds	r3, r2, r3
 8004336:	330c      	adds	r3, #12
 8004338:	1c22      	adds	r2, r4, #0
 800433a:	701a      	strb	r2, [r3, #0]
}
 800433c:	46c0      	nop			@ (mov r8, r8)
 800433e:	46bd      	mov	sp, r7
 8004340:	b014      	add	sp, #80	@ 0x50
 8004342:	bdb0      	pop	{r4, r5, r7, pc}
 8004344:	20000408 	.word	0x20000408
 8004348:	20000404 	.word	0x20000404
 800434c:	0800f5ec 	.word	0x0800f5ec
 8004350:	0800f608 	.word	0x0800f608
 8004354:	0800f60c 	.word	0x0800f60c
 8004358:	200003c4 	.word	0x200003c4
 800435c:	08004135 	.word	0x08004135
 8004360:	08004145 	.word	0x08004145
 8004364:	200003c0 	.word	0x200003c0
 8004368:	08004165 	.word	0x08004165
 800436c:	08004175 	.word	0x08004175
 8004370:	200003c1 	.word	0x200003c1
 8004374:	0800418d 	.word	0x0800418d
 8004378:	08004197 	.word	0x08004197
 800437c:	200003c2 	.word	0x200003c2
 8004380:	080041a5 	.word	0x080041a5
 8004384:	080041c1 	.word	0x080041c1
 8004388:	200003c3 	.word	0x200003c3

0800438c <Meas_SetEnabledSensors>:
    MeasState = MEAS_STATE_INIT;
    break;
  }
}

void Meas_SetEnabledSensors(EnabledMeasurements enabled) {
 800438c:	b590      	push	{r4, r7, lr}
 800438e:	b085      	sub	sp, #20
 8004390:	af00      	add	r7, sp, #0
 8004392:	1d3b      	adds	r3, r7, #4
 8004394:	6018      	str	r0, [r3, #0]
  uint8_t offset = 0;
 8004396:	240f      	movs	r4, #15
 8004398:	193b      	adds	r3, r7, r4
 800439a:	2200      	movs	r2, #0
 800439c:	701a      	strb	r2, [r3, #0]
  MeasEnabled = enabled;
 800439e:	4b20      	ldr	r3, [pc, #128]	@ (8004420 <Meas_SetEnabledSensors+0x94>)
 80043a0:	1d3a      	adds	r2, r7, #4
 80043a2:	6812      	ldr	r2, [r2, #0]
 80043a4:	601a      	str	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.HT_measurementEnabled;
 80043a6:	193b      	adds	r3, r7, r4
 80043a8:	781b      	ldrb	r3, [r3, #0]
 80043aa:	193a      	adds	r2, r7, r4
 80043ac:	1c59      	adds	r1, r3, #1
 80043ae:	7011      	strb	r1, [r2, #0]
 80043b0:	0018      	movs	r0, r3
 80043b2:	1d3b      	adds	r3, r7, #4
 80043b4:	7819      	ldrb	r1, [r3, #0]
 80043b6:	4a1b      	ldr	r2, [pc, #108]	@ (8004424 <Meas_SetEnabledSensors+0x98>)
 80043b8:	0103      	lsls	r3, r0, #4
 80043ba:	18d3      	adds	r3, r2, r3
 80043bc:	330c      	adds	r3, #12
 80043be:	1c0a      	adds	r2, r1, #0
 80043c0:	701a      	strb	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.VOC_measurementEnabled;
 80043c2:	193b      	adds	r3, r7, r4
 80043c4:	781b      	ldrb	r3, [r3, #0]
 80043c6:	193a      	adds	r2, r7, r4
 80043c8:	1c59      	adds	r1, r3, #1
 80043ca:	7011      	strb	r1, [r2, #0]
 80043cc:	0018      	movs	r0, r3
 80043ce:	1d3b      	adds	r3, r7, #4
 80043d0:	7859      	ldrb	r1, [r3, #1]
 80043d2:	4a14      	ldr	r2, [pc, #80]	@ (8004424 <Meas_SetEnabledSensors+0x98>)
 80043d4:	0103      	lsls	r3, r0, #4
 80043d6:	18d3      	adds	r3, r2, r3
 80043d8:	330c      	adds	r3, #12
 80043da:	1c0a      	adds	r2, r1, #0
 80043dc:	701a      	strb	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.NO_measurementEnabled;
 80043de:	193b      	adds	r3, r7, r4
 80043e0:	781b      	ldrb	r3, [r3, #0]
 80043e2:	193a      	adds	r2, r7, r4
 80043e4:	1c59      	adds	r1, r3, #1
 80043e6:	7011      	strb	r1, [r2, #0]
 80043e8:	0018      	movs	r0, r3
 80043ea:	1d3b      	adds	r3, r7, #4
 80043ec:	7899      	ldrb	r1, [r3, #2]
 80043ee:	4a0d      	ldr	r2, [pc, #52]	@ (8004424 <Meas_SetEnabledSensors+0x98>)
 80043f0:	0103      	lsls	r3, r0, #4
 80043f2:	18d3      	adds	r3, r2, r3
 80043f4:	330c      	adds	r3, #12
 80043f6:	1c0a      	adds	r2, r1, #0
 80043f8:	701a      	strb	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.MIC_measurementEnabled;
 80043fa:	193b      	adds	r3, r7, r4
 80043fc:	781b      	ldrb	r3, [r3, #0]
 80043fe:	193a      	adds	r2, r7, r4
 8004400:	1c59      	adds	r1, r3, #1
 8004402:	7011      	strb	r1, [r2, #0]
 8004404:	0018      	movs	r0, r3
 8004406:	1d3b      	adds	r3, r7, #4
 8004408:	78d9      	ldrb	r1, [r3, #3]
 800440a:	4a06      	ldr	r2, [pc, #24]	@ (8004424 <Meas_SetEnabledSensors+0x98>)
 800440c:	0103      	lsls	r3, r0, #4
 800440e:	18d3      	adds	r3, r2, r3
 8004410:	330c      	adds	r3, #12
 8004412:	1c0a      	adds	r2, r1, #0
 8004414:	701a      	strb	r2, [r3, #0]
}
 8004416:	46c0      	nop			@ (mov r8, r8)
 8004418:	46bd      	mov	sp, r7
 800441a:	b005      	add	sp, #20
 800441c:	bd90      	pop	{r4, r7, pc}
 800441e:	46c0      	nop			@ (mov r8, r8)
 8004420:	20000404 	.word	0x20000404
 8004424:	200003c4 	.word	0x200003c4

08004428 <MIC_Init>:
static uint32_t StartTime = 0;
static uint32_t StartupDoneTime = 0;
static volatile bool StartUpDone = false;
static volatile bool DataReady = false;

void MIC_Init(I2S_HandleTypeDef* i2SHandle) { I2SHandle = i2SHandle; }
 8004428:	b580      	push	{r7, lr}
 800442a:	b082      	sub	sp, #8
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
 8004430:	4b03      	ldr	r3, [pc, #12]	@ (8004440 <MIC_Init+0x18>)
 8004432:	687a      	ldr	r2, [r7, #4]
 8004434:	601a      	str	r2, [r3, #0]
 8004436:	46c0      	nop			@ (mov r8, r8)
 8004438:	46bd      	mov	sp, r7
 800443a:	b002      	add	sp, #8
 800443c:	bd80      	pop	{r7, pc}
 800443e:	46c0      	nop			@ (mov r8, r8)
 8004440:	2000040c 	.word	0x2000040c

08004444 <MIC_Start>:
  uint32_t audioValue = data[1] | (data[0] << 16);
  audioValue = audioValue >> 7;
  return audioValue;
}

void MIC_Start(uint32_t sampleRate, uint16_t nrSamples) {
 8004444:	b5b0      	push	{r4, r5, r7, lr}
 8004446:	b084      	sub	sp, #16
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
 800444c:	000a      	movs	r2, r1
 800444e:	1cbb      	adds	r3, r7, #2
 8004450:	801a      	strh	r2, [r3, #0]
  if (I2SHandle == NULL) {
 8004452:	4b19      	ldr	r3, [pc, #100]	@ (80044b8 <MIC_Start+0x74>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d106      	bne.n	8004468 <MIC_Start+0x24>
    Error("Microphone is not initialised.");
 800445a:	4a18      	ldr	r2, [pc, #96]	@ (80044bc <MIC_Start+0x78>)
 800445c:	4b18      	ldr	r3, [pc, #96]	@ (80044c0 <MIC_Start+0x7c>)
 800445e:	0019      	movs	r1, r3
 8004460:	2001      	movs	r0, #1
 8004462:	f001 fd99 	bl	8005f98 <CreateLine>
    return;
 8004466:	e023      	b.n	80044b0 <MIC_Start+0x6c>
  }

//  UpdateSampleRate(sampleRate);

  StartTime = HAL_GetTick();
 8004468:	f002 f9b4 	bl	80067d4 <HAL_GetTick>
 800446c:	0002      	movs	r2, r0
 800446e:	4b15      	ldr	r3, [pc, #84]	@ (80044c4 <MIC_Start+0x80>)
 8004470:	601a      	str	r2, [r3, #0]
  StartupDoneTime = StartTime + 20;
 8004472:	4b14      	ldr	r3, [pc, #80]	@ (80044c4 <MIC_Start+0x80>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	3314      	adds	r3, #20
 8004478:	001a      	movs	r2, r3
 800447a:	4b13      	ldr	r3, [pc, #76]	@ (80044c8 <MIC_Start+0x84>)
 800447c:	601a      	str	r2, [r3, #0]
  StartUpDone = false;
 800447e:	4b13      	ldr	r3, [pc, #76]	@ (80044cc <MIC_Start+0x88>)
 8004480:	2200      	movs	r2, #0
 8004482:	701a      	strb	r2, [r3, #0]
  DataReady = false;
 8004484:	4b12      	ldr	r3, [pc, #72]	@ (80044d0 <MIC_Start+0x8c>)
 8004486:	2200      	movs	r2, #0
 8004488:	701a      	strb	r2, [r3, #0]

  HAL_StatusTypeDef status = HAL_I2S_Receive_DMA(I2SHandle, (uint16_t*)AudioRxBuffer, 256);
 800448a:	4b0b      	ldr	r3, [pc, #44]	@ (80044b8 <MIC_Start+0x74>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	250f      	movs	r5, #15
 8004490:	197c      	adds	r4, r7, r5
 8004492:	2280      	movs	r2, #128	@ 0x80
 8004494:	0052      	lsls	r2, r2, #1
 8004496:	490f      	ldr	r1, [pc, #60]	@ (80044d4 <MIC_Start+0x90>)
 8004498:	0018      	movs	r0, r3
 800449a:	f004 ffad 	bl	80093f8 <HAL_I2S_Receive_DMA>
 800449e:	0003      	movs	r3, r0
 80044a0:	7023      	strb	r3, [r4, #0]
//      HAL_I2S_Receive_DMA(I2SHandle, (uint16_t*)AudioRxBuffer,
//                          AUDIO_RX_BUFFER >> 1); //>>1 because reading half word

  Info("Status %d", status);
 80044a2:	197b      	adds	r3, r7, r5
 80044a4:	781b      	ldrb	r3, [r3, #0]
 80044a6:	4a0c      	ldr	r2, [pc, #48]	@ (80044d8 <MIC_Start+0x94>)
 80044a8:	490c      	ldr	r1, [pc, #48]	@ (80044dc <MIC_Start+0x98>)
 80044aa:	2002      	movs	r0, #2
 80044ac:	f001 fd74 	bl	8005f98 <CreateLine>
}
 80044b0:	46bd      	mov	sp, r7
 80044b2:	b004      	add	sp, #16
 80044b4:	bdb0      	pop	{r4, r5, r7, pc}
 80044b6:	46c0      	nop			@ (mov r8, r8)
 80044b8:	2000040c 	.word	0x2000040c
 80044bc:	0800f678 	.word	0x0800f678
 80044c0:	0800f698 	.word	0x0800f698
 80044c4:	20000510 	.word	0x20000510
 80044c8:	20000514 	.word	0x20000514
 80044cc:	20000518 	.word	0x20000518
 80044d0:	20000519 	.word	0x20000519
 80044d4:	20000410 	.word	0x20000410
 80044d8:	0800f69c 	.word	0x0800f69c
 80044dc:	0800f6a8 	.word	0x0800f6a8

080044e0 <HAL_I2S_RxCpltCallback>:
    Info("0x%08x", sample);
  }
}

// #TODO Also include half full callback
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef* hi2s) {
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b082      	sub	sp, #8
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  if (hi2s != I2SHandle)
 80044e8:	4b17      	ldr	r3, [pc, #92]	@ (8004548 <HAL_I2S_RxCpltCallback+0x68>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	687a      	ldr	r2, [r7, #4]
 80044ee:	429a      	cmp	r2, r3
 80044f0:	d126      	bne.n	8004540 <HAL_I2S_RxCpltCallback+0x60>
    return;

  if (StartUpDone) {
 80044f2:	4b16      	ldr	r3, [pc, #88]	@ (800454c <HAL_I2S_RxCpltCallback+0x6c>)
 80044f4:	781b      	ldrb	r3, [r3, #0]
 80044f6:	b2db      	uxtb	r3, r3
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d00f      	beq.n	800451c <HAL_I2S_RxCpltCallback+0x3c>
    HAL_I2S_DMAStop(I2SHandle);
 80044fc:	4b12      	ldr	r3, [pc, #72]	@ (8004548 <HAL_I2S_RxCpltCallback+0x68>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	0018      	movs	r0, r3
 8004502:	f005 f83b 	bl	800957c <HAL_I2S_DMAStop>
    DataReady = true;
 8004506:	4b12      	ldr	r3, [pc, #72]	@ (8004550 <HAL_I2S_RxCpltCallback+0x70>)
 8004508:	2201      	movs	r2, #1
 800450a:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(MIC_Trigger_GPIO_Port, MIC_Trigger_Pin, GPIO_PIN_RESET);
 800450c:	2380      	movs	r3, #128	@ 0x80
 800450e:	00db      	lsls	r3, r3, #3
 8004510:	4810      	ldr	r0, [pc, #64]	@ (8004554 <HAL_I2S_RxCpltCallback+0x74>)
 8004512:	2200      	movs	r2, #0
 8004514:	0019      	movs	r1, r3
 8004516:	f002 fe35 	bl	8007184 <HAL_GPIO_WritePin>
 800451a:	e012      	b.n	8004542 <HAL_I2S_RxCpltCallback+0x62>
  } else if (TimestampIsReached(StartupDoneTime)) {
 800451c:	4b0e      	ldr	r3, [pc, #56]	@ (8004558 <HAL_I2S_RxCpltCallback+0x78>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	0018      	movs	r0, r3
 8004522:	f001 fce3 	bl	8005eec <TimestampIsReached>
 8004526:	1e03      	subs	r3, r0, #0
 8004528:	d00b      	beq.n	8004542 <HAL_I2S_RxCpltCallback+0x62>
    StartUpDone = true;
 800452a:	4b08      	ldr	r3, [pc, #32]	@ (800454c <HAL_I2S_RxCpltCallback+0x6c>)
 800452c:	2201      	movs	r2, #1
 800452e:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(MIC_Trigger_GPIO_Port, MIC_Trigger_Pin, GPIO_PIN_SET);
 8004530:	2380      	movs	r3, #128	@ 0x80
 8004532:	00db      	lsls	r3, r3, #3
 8004534:	4807      	ldr	r0, [pc, #28]	@ (8004554 <HAL_I2S_RxCpltCallback+0x74>)
 8004536:	2201      	movs	r2, #1
 8004538:	0019      	movs	r1, r3
 800453a:	f002 fe23 	bl	8007184 <HAL_GPIO_WritePin>
 800453e:	e000      	b.n	8004542 <HAL_I2S_RxCpltCallback+0x62>
    return;
 8004540:	46c0      	nop			@ (mov r8, r8)
  }
}
 8004542:	46bd      	mov	sp, r7
 8004544:	b002      	add	sp, #8
 8004546:	bd80      	pop	{r7, pc}
 8004548:	2000040c 	.word	0x2000040c
 800454c:	20000518 	.word	0x20000518
 8004550:	20000519 	.word	0x20000519
 8004554:	50000400 	.word	0x50000400
 8004558:	20000514 	.word	0x20000514

0800455c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8004560:	4b11      	ldr	r3, [pc, #68]	@ (80045a8 <MX_RTC_Init+0x4c>)
 8004562:	4a12      	ldr	r2, [pc, #72]	@ (80045ac <MX_RTC_Init+0x50>)
 8004564:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8004566:	4b10      	ldr	r3, [pc, #64]	@ (80045a8 <MX_RTC_Init+0x4c>)
 8004568:	2200      	movs	r2, #0
 800456a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800456c:	4b0e      	ldr	r3, [pc, #56]	@ (80045a8 <MX_RTC_Init+0x4c>)
 800456e:	227f      	movs	r2, #127	@ 0x7f
 8004570:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8004572:	4b0d      	ldr	r3, [pc, #52]	@ (80045a8 <MX_RTC_Init+0x4c>)
 8004574:	22ff      	movs	r2, #255	@ 0xff
 8004576:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8004578:	4b0b      	ldr	r3, [pc, #44]	@ (80045a8 <MX_RTC_Init+0x4c>)
 800457a:	2200      	movs	r2, #0
 800457c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800457e:	4b0a      	ldr	r3, [pc, #40]	@ (80045a8 <MX_RTC_Init+0x4c>)
 8004580:	2200      	movs	r2, #0
 8004582:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8004584:	4b08      	ldr	r3, [pc, #32]	@ (80045a8 <MX_RTC_Init+0x4c>)
 8004586:	2200      	movs	r2, #0
 8004588:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800458a:	4b07      	ldr	r3, [pc, #28]	@ (80045a8 <MX_RTC_Init+0x4c>)
 800458c:	2200      	movs	r2, #0
 800458e:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8004590:	4b05      	ldr	r3, [pc, #20]	@ (80045a8 <MX_RTC_Init+0x4c>)
 8004592:	0018      	movs	r0, r3
 8004594:	f006 f8c2 	bl	800a71c <HAL_RTC_Init>
 8004598:	1e03      	subs	r3, r0, #0
 800459a:	d001      	beq.n	80045a0 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 800459c:	f7ff fdc4 	bl	8004128 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80045a0:	46c0      	nop			@ (mov r8, r8)
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}
 80045a6:	46c0      	nop			@ (mov r8, r8)
 80045a8:	2000051c 	.word	0x2000051c
 80045ac:	40002800 	.word	0x40002800

080045b0 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b082      	sub	sp, #8
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a06      	ldr	r2, [pc, #24]	@ (80045d8 <HAL_RTC_MspInit+0x28>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d106      	bne.n	80045d0 <HAL_RTC_MspInit+0x20>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80045c2:	4b06      	ldr	r3, [pc, #24]	@ (80045dc <HAL_RTC_MspInit+0x2c>)
 80045c4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80045c6:	4b05      	ldr	r3, [pc, #20]	@ (80045dc <HAL_RTC_MspInit+0x2c>)
 80045c8:	2180      	movs	r1, #128	@ 0x80
 80045ca:	02c9      	lsls	r1, r1, #11
 80045cc:	430a      	orrs	r2, r1
 80045ce:	651a      	str	r2, [r3, #80]	@ 0x50
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80045d0:	46c0      	nop			@ (mov r8, r8)
 80045d2:	46bd      	mov	sp, r7
 80045d4:	b002      	add	sp, #8
 80045d6:	bd80      	pop	{r7, pc}
 80045d8:	40002800 	.word	0x40002800
 80045dc:	40021000 	.word	0x40021000

080045e0 <GasIndexAlgorithm_init_with_sampling_interval>:
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample);

void GasIndexAlgorithm_init_with_sampling_interval(
    GasIndexAlgorithmParams* params, int32_t algorithm_type,
    float sampling_interval) {
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b084      	sub	sp, #16
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	60f8      	str	r0, [r7, #12]
 80045e8:	60b9      	str	r1, [r7, #8]
 80045ea:	607a      	str	r2, [r7, #4]
    params->mAlgorithm_Type = algorithm_type;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	68ba      	ldr	r2, [r7, #8]
 80045f0:	601a      	str	r2, [r3, #0]
    params->mSamplingInterval = sampling_interval;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	687a      	ldr	r2, [r7, #4]
 80045f6:	605a      	str	r2, [r3, #4]
    if ((algorithm_type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	d113      	bne.n	8004626 <GasIndexAlgorithm_init_with_sampling_interval+0x46>
        params->mIndex_Offset = GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	22fe      	movs	r2, #254	@ 0xfe
 8004602:	0592      	lsls	r2, r2, #22
 8004604:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_NOX_SRAW_MINIMUM;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	4a1a      	ldr	r2, [pc, #104]	@ (8004674 <GasIndexAlgorithm_init_with_sampling_interval+0x94>)
 800460a:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	4a1a      	ldr	r2, [pc, #104]	@ (8004678 <GasIndexAlgorithm_init_with_sampling_interval+0x98>)
 8004610:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_NOX_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_NOX;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	4a19      	ldr	r2, [pc, #100]	@ (800467c <GasIndexAlgorithm_init_with_sampling_interval+0x9c>)
 8004616:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	4a19      	ldr	r2, [pc, #100]	@ (8004680 <GasIndexAlgorithm_init_with_sampling_interval+0xa0>)
 800461c:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_NOX;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_NOX;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	4a18      	ldr	r2, [pc, #96]	@ (8004684 <GasIndexAlgorithm_init_with_sampling_interval+0xa4>)
 8004622:	61da      	str	r2, [r3, #28]
 8004624:	e011      	b.n	800464a <GasIndexAlgorithm_init_with_sampling_interval+0x6a>
    } else {
        params->mIndex_Offset = GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	4a17      	ldr	r2, [pc, #92]	@ (8004688 <GasIndexAlgorithm_init_with_sampling_interval+0xa8>)
 800462a:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_VOC_SRAW_MINIMUM;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	4a17      	ldr	r2, [pc, #92]	@ (800468c <GasIndexAlgorithm_init_with_sampling_interval+0xac>)
 8004630:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	4a16      	ldr	r2, [pc, #88]	@ (8004690 <GasIndexAlgorithm_init_with_sampling_interval+0xb0>)
 8004636:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_VOC_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_VOC;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	4a16      	ldr	r2, [pc, #88]	@ (8004694 <GasIndexAlgorithm_init_with_sampling_interval+0xb4>)
 800463c:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	4a15      	ldr	r2, [pc, #84]	@ (8004698 <GasIndexAlgorithm_init_with_sampling_interval+0xb8>)
 8004642:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_VOC;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_VOC;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	4a15      	ldr	r2, [pc, #84]	@ (800469c <GasIndexAlgorithm_init_with_sampling_interval+0xbc>)
 8004648:	61da      	str	r2, [r3, #28]
    }
    params->mIndex_Gain = GasIndexAlgorithm_INDEX_GAIN;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	4a14      	ldr	r2, [pc, #80]	@ (80046a0 <GasIndexAlgorithm_init_with_sampling_interval+0xc0>)
 800464e:	621a      	str	r2, [r3, #32]
    params->mTau_Mean_Hours = GasIndexAlgorithm_TAU_MEAN_HOURS;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	4a14      	ldr	r2, [pc, #80]	@ (80046a4 <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 8004654:	625a      	str	r2, [r3, #36]	@ 0x24
    params->mTau_Variance_Hours = GasIndexAlgorithm_TAU_VARIANCE_HOURS;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	4a12      	ldr	r2, [pc, #72]	@ (80046a4 <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 800465a:	629a      	str	r2, [r3, #40]	@ 0x28
    params->mSraw_Std_Initial = GasIndexAlgorithm_SRAW_STD_INITIAL;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	4a12      	ldr	r2, [pc, #72]	@ (80046a8 <GasIndexAlgorithm_init_with_sampling_interval+0xc8>)
 8004660:	62da      	str	r2, [r3, #44]	@ 0x2c
    GasIndexAlgorithm_reset(params);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	0018      	movs	r0, r3
 8004666:	f000 f831 	bl	80046cc <GasIndexAlgorithm_reset>
}
 800466a:	46c0      	nop			@ (mov r8, r8)
 800466c:	46bd      	mov	sp, r7
 800466e:	b004      	add	sp, #16
 8004670:	bd80      	pop	{r7, pc}
 8004672:	46c0      	nop			@ (mov r8, r8)
 8004674:	00002710 	.word	0x00002710
 8004678:	44340000 	.word	0x44340000
 800467c:	46859800 	.word	0x46859800
 8004680:	46a05000 	.word	0x46a05000
 8004684:	41f00000 	.word	0x41f00000
 8004688:	42c80000 	.word	0x42c80000
 800468c:	00004e20 	.word	0x00004e20
 8004690:	43340000 	.word	0x43340000
 8004694:	4528c000 	.word	0x4528c000
 8004698:	45a32000 	.word	0x45a32000
 800469c:	43aa0000 	.word	0x43aa0000
 80046a0:	43660000 	.word	0x43660000
 80046a4:	41400000 	.word	0x41400000
 80046a8:	42480000 	.word	0x42480000

080046ac <GasIndexAlgorithm_init>:

void GasIndexAlgorithm_init(GasIndexAlgorithmParams* params,
                            int32_t algorithm_type) {
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b082      	sub	sp, #8
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
 80046b4:	6039      	str	r1, [r7, #0]
    GasIndexAlgorithm_init_with_sampling_interval(
 80046b6:	22fe      	movs	r2, #254	@ 0xfe
 80046b8:	0592      	lsls	r2, r2, #22
 80046ba:	6839      	ldr	r1, [r7, #0]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	0018      	movs	r0, r3
 80046c0:	f7ff ff8e 	bl	80045e0 <GasIndexAlgorithm_init_with_sampling_interval>
        params, algorithm_type, GasIndexAlgorithm_DEFAULT_SAMPLING_INTERVAL);
}
 80046c4:	46c0      	nop			@ (mov r8, r8)
 80046c6:	46bd      	mov	sp, r7
 80046c8:	b002      	add	sp, #8
 80046ca:	bd80      	pop	{r7, pc}

080046cc <GasIndexAlgorithm_reset>:

void GasIndexAlgorithm_reset(GasIndexAlgorithmParams* params) {
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b082      	sub	sp, #8
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
    params->mUptime = 0.f;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2200      	movs	r2, #0
 80046d8:	631a      	str	r2, [r3, #48]	@ 0x30
    params->mSraw = 0.f;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2200      	movs	r2, #0
 80046de:	635a      	str	r2, [r3, #52]	@ 0x34
    params->mGas_Index = 0;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2200      	movs	r2, #0
 80046e4:	639a      	str	r2, [r3, #56]	@ 0x38
    GasIndexAlgorithm__init_instances(params);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	0018      	movs	r0, r3
 80046ea:	f000 f805 	bl	80046f8 <GasIndexAlgorithm__init_instances>
}
 80046ee:	46c0      	nop			@ (mov r8, r8)
 80046f0:	46bd      	mov	sp, r7
 80046f2:	b002      	add	sp, #8
 80046f4:	bd80      	pop	{r7, pc}
	...

080046f8 <GasIndexAlgorithm__init_instances>:

static void GasIndexAlgorithm__init_instances(GasIndexAlgorithmParams* params) {
 80046f8:	b590      	push	{r4, r7, lr}
 80046fa:	b083      	sub	sp, #12
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]

    GasIndexAlgorithm__mean_variance_estimator__set_parameters(params);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	0018      	movs	r0, r3
 8004704:	f000 f8e8 	bl	80048d8 <GasIndexAlgorithm__mean_variance_estimator__set_parameters>
    GasIndexAlgorithm__mox_model__set_parameters(
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	0018      	movs	r0, r3
 800470c:	f000 f9a6 	bl	8004a5c <GasIndexAlgorithm__mean_variance_estimator__get_std>
 8004710:	1c04      	adds	r4, r0, #0
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	0018      	movs	r0, r3
 8004716:	f000 f9ab 	bl	8004a70 <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 800471a:	1c02      	adds	r2, r0, #0
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	1c21      	adds	r1, r4, #0
 8004720:	0018      	movs	r0, r3
 8004722:	f000 fc3b 	bl	8004f9c <GasIndexAlgorithm__mox_model__set_parameters>
        params, GasIndexAlgorithm__mean_variance_estimator__get_std(params),
        GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	2b01      	cmp	r3, #1
 800472c:	d107      	bne.n	800473e <GasIndexAlgorithm__init_instances+0x46>
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 800472e:	23fe      	movs	r3, #254	@ 0xfe
 8004730:	059b      	lsls	r3, r3, #22
 8004732:	4a0a      	ldr	r2, [pc, #40]	@ (800475c <GasIndexAlgorithm__init_instances+0x64>)
 8004734:	490a      	ldr	r1, [pc, #40]	@ (8004760 <GasIndexAlgorithm__init_instances+0x68>)
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f000 fc86 	bl	8005048 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
 800473c:	e005      	b.n	800474a <GasIndexAlgorithm__init_instances+0x52>
            params, GasIndexAlgorithm_SIGMOID_X0_NOX,
            GasIndexAlgorithm_SIGMOID_K_NOX,
            GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT);
    } else {
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 800473e:	4b09      	ldr	r3, [pc, #36]	@ (8004764 <GasIndexAlgorithm__init_instances+0x6c>)
 8004740:	4a09      	ldr	r2, [pc, #36]	@ (8004768 <GasIndexAlgorithm__init_instances+0x70>)
 8004742:	490a      	ldr	r1, [pc, #40]	@ (800476c <GasIndexAlgorithm__init_instances+0x74>)
 8004744:	6878      	ldr	r0, [r7, #4]
 8004746:	f000 fc7f 	bl	8005048 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
            params, GasIndexAlgorithm_SIGMOID_X0_VOC,
            GasIndexAlgorithm_SIGMOID_K_VOC,
            GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT);
    }
    GasIndexAlgorithm__adaptive_lowpass__set_parameters(params);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	0018      	movs	r0, r3
 800474e:	f000 fd35 	bl	80051bc <GasIndexAlgorithm__adaptive_lowpass__set_parameters>
}
 8004752:	46c0      	nop			@ (mov r8, r8)
 8004754:	46bd      	mov	sp, r7
 8004756:	b003      	add	sp, #12
 8004758:	bd90      	pop	{r4, r7, pc}
 800475a:	46c0      	nop			@ (mov r8, r8)
 800475c:	bc257a78 	.word	0xbc257a78
 8004760:	44198000 	.word	0x44198000
 8004764:	42c80000 	.word	0x42c80000
 8004768:	bbd4fdf4 	.word	0xbbd4fdf4
 800476c:	43550000 	.word	0x43550000

08004770 <GasIndexAlgorithm_process>:
    *gain_factor = ((int32_t)(params->mIndex_Gain));
    return;
}

void GasIndexAlgorithm_process(GasIndexAlgorithmParams* params, int32_t sraw,
                               int32_t* gas_index) {
 8004770:	b590      	push	{r4, r7, lr}
 8004772:	b085      	sub	sp, #20
 8004774:	af00      	add	r7, sp, #0
 8004776:	60f8      	str	r0, [r7, #12]
 8004778:	60b9      	str	r1, [r7, #8]
 800477a:	607a      	str	r2, [r7, #4]

    if ((params->mUptime <= GasIndexAlgorithm_INITIAL_BLACKOUT)) {
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004780:	4952      	ldr	r1, [pc, #328]	@ (80048cc <GasIndexAlgorithm_process+0x15c>)
 8004782:	1c18      	adds	r0, r3, #0
 8004784:	f7fb feac 	bl	80004e0 <__aeabi_fcmple>
 8004788:	1e03      	subs	r3, r0, #0
 800478a:	d00c      	beq.n	80047a6 <GasIndexAlgorithm_process+0x36>
        params->mUptime = (params->mUptime + params->mSamplingInterval);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	1c19      	adds	r1, r3, #0
 8004796:	1c10      	adds	r0, r2, #0
 8004798:	f7fb ffda 	bl	8000750 <__aeabi_fadd>
 800479c:	1c03      	adds	r3, r0, #0
 800479e:	1c1a      	adds	r2, r3, #0
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	631a      	str	r2, [r3, #48]	@ 0x30
 80047a4:	e080      	b.n	80048a8 <GasIndexAlgorithm_process+0x138>
    } else {
        if (((sraw > 0) && (sraw < 65000))) {
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	dd25      	ble.n	80047f8 <GasIndexAlgorithm_process+0x88>
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	4a48      	ldr	r2, [pc, #288]	@ (80048d0 <GasIndexAlgorithm_process+0x160>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	dc21      	bgt.n	80047f8 <GasIndexAlgorithm_process+0x88>
            if ((sraw < (params->mSraw_Minimum + 1))) {
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	68db      	ldr	r3, [r3, #12]
 80047b8:	68ba      	ldr	r2, [r7, #8]
 80047ba:	429a      	cmp	r2, r3
 80047bc:	dc04      	bgt.n	80047c8 <GasIndexAlgorithm_process+0x58>
                sraw = (params->mSraw_Minimum + 1);
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	68db      	ldr	r3, [r3, #12]
 80047c2:	3301      	adds	r3, #1
 80047c4:	60bb      	str	r3, [r7, #8]
 80047c6:	e00d      	b.n	80047e4 <GasIndexAlgorithm_process+0x74>
            } else if ((sraw > (params->mSraw_Minimum + 32767))) {
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	68db      	ldr	r3, [r3, #12]
 80047cc:	4a41      	ldr	r2, [pc, #260]	@ (80048d4 <GasIndexAlgorithm_process+0x164>)
 80047ce:	4694      	mov	ip, r2
 80047d0:	4463      	add	r3, ip
 80047d2:	68ba      	ldr	r2, [r7, #8]
 80047d4:	429a      	cmp	r2, r3
 80047d6:	dd05      	ble.n	80047e4 <GasIndexAlgorithm_process+0x74>
                sraw = (params->mSraw_Minimum + 32767);
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	68db      	ldr	r3, [r3, #12]
 80047dc:	4a3d      	ldr	r2, [pc, #244]	@ (80048d4 <GasIndexAlgorithm_process+0x164>)
 80047de:	4694      	mov	ip, r2
 80047e0:	4463      	add	r3, ip
 80047e2:	60bb      	str	r3, [r7, #8]
            }
            params->mSraw = ((float)((sraw - params->mSraw_Minimum)));
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	68db      	ldr	r3, [r3, #12]
 80047e8:	68ba      	ldr	r2, [r7, #8]
 80047ea:	1ad3      	subs	r3, r2, r3
 80047ec:	0018      	movs	r0, r3
 80047ee:	f7fc fe37 	bl	8001460 <__aeabi_i2f>
 80047f2:	1c02      	adds	r2, r0, #0
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	635a      	str	r2, [r3, #52]	@ 0x34
        }
        if (((params->mAlgorithm_Type ==
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d005      	beq.n	800480c <GasIndexAlgorithm_process+0x9c>
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
             GasIndexAlgorithm__mean_variance_estimator__is_initialized(
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	0018      	movs	r0, r3
 8004804:	f000 f945 	bl	8004a92 <GasIndexAlgorithm__mean_variance_estimator__is_initialized>
 8004808:	1e03      	subs	r3, r0, #0
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
 800480a:	d014      	beq.n	8004836 <GasIndexAlgorithm_process+0xc6>
                 params))) {
            params->mGas_Index =
                GasIndexAlgorithm__mox_model__process(params, params->mSraw);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	1c11      	adds	r1, r2, #0
 8004814:	0018      	movs	r0, r3
 8004816:	f000 fbd1 	bl	8004fbc <GasIndexAlgorithm__mox_model__process>
 800481a:	1c02      	adds	r2, r0, #0
            params->mGas_Index =
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	639a      	str	r2, [r3, #56]	@ 0x38
            params->mGas_Index = GasIndexAlgorithm__sigmoid_scaled__process(
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	1c11      	adds	r1, r2, #0
 8004828:	0018      	movs	r0, r3
 800482a:	f000 fc25 	bl	8005078 <GasIndexAlgorithm__sigmoid_scaled__process>
 800482e:	1c02      	adds	r2, r0, #0
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	639a      	str	r2, [r3, #56]	@ 0x38
 8004834:	e003      	b.n	800483e <GasIndexAlgorithm_process+0xce>
                params, params->mGas_Index);
        } else {
            params->mGas_Index = params->mIndex_Offset;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	689a      	ldr	r2, [r3, #8]
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        params->mGas_Index = GasIndexAlgorithm__adaptive_lowpass__process(
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	1c11      	adds	r1, r2, #0
 8004846:	0018      	movs	r0, r3
 8004848:	f000 fcec 	bl	8005224 <GasIndexAlgorithm__adaptive_lowpass__process>
 800484c:	1c02      	adds	r2, r0, #0
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	639a      	str	r2, [r3, #56]	@ 0x38
            params, params->mGas_Index);
        if ((params->mGas_Index < 0.5f)) {
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004856:	21fc      	movs	r1, #252	@ 0xfc
 8004858:	0589      	lsls	r1, r1, #22
 800485a:	1c18      	adds	r0, r3, #0
 800485c:	f7fb fe36 	bl	80004cc <__aeabi_fcmplt>
 8004860:	1e03      	subs	r3, r0, #0
 8004862:	d003      	beq.n	800486c <GasIndexAlgorithm_process+0xfc>
            params->mGas_Index = 0.5f;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	22fc      	movs	r2, #252	@ 0xfc
 8004868:	0592      	lsls	r2, r2, #22
 800486a:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        if ((params->mSraw > 0.f)) {
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004870:	2100      	movs	r1, #0
 8004872:	1c18      	adds	r0, r3, #0
 8004874:	f7fb fe3e 	bl	80004f4 <__aeabi_fcmpgt>
 8004878:	1e03      	subs	r3, r0, #0
 800487a:	d015      	beq.n	80048a8 <GasIndexAlgorithm_process+0x138>
            GasIndexAlgorithm__mean_variance_estimator__process(params,
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	1c11      	adds	r1, r2, #0
 8004884:	0018      	movs	r0, r3
 8004886:	f000 fa4f 	bl	8004d28 <GasIndexAlgorithm__mean_variance_estimator__process>
                                                                params->mSraw);
            GasIndexAlgorithm__mox_model__set_parameters(
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	0018      	movs	r0, r3
 800488e:	f000 f8e5 	bl	8004a5c <GasIndexAlgorithm__mean_variance_estimator__get_std>
 8004892:	1c04      	adds	r4, r0, #0
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	0018      	movs	r0, r3
 8004898:	f000 f8ea 	bl	8004a70 <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 800489c:	1c02      	adds	r2, r0, #0
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	1c21      	adds	r1, r4, #0
 80048a2:	0018      	movs	r0, r3
 80048a4:	f000 fb7a 	bl	8004f9c <GasIndexAlgorithm__mox_model__set_parameters>
                params,
                GasIndexAlgorithm__mean_variance_estimator__get_std(params),
                GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
        }
    }
    *gas_index = ((int32_t)((params->mGas_Index + 0.5f)));
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048ac:	21fc      	movs	r1, #252	@ 0xfc
 80048ae:	0589      	lsls	r1, r1, #22
 80048b0:	1c18      	adds	r0, r3, #0
 80048b2:	f7fb ff4d 	bl	8000750 <__aeabi_fadd>
 80048b6:	1c03      	adds	r3, r0, #0
 80048b8:	1c18      	adds	r0, r3, #0
 80048ba:	f7fc fdb1 	bl	8001420 <__aeabi_f2iz>
 80048be:	0002      	movs	r2, r0
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	601a      	str	r2, [r3, #0]
    return;
 80048c4:	46c0      	nop			@ (mov r8, r8)
}
 80048c6:	46bd      	mov	sp, r7
 80048c8:	b005      	add	sp, #20
 80048ca:	bd90      	pop	{r4, r7, pc}
 80048cc:	42340000 	.word	0x42340000
 80048d0:	0000fde7 	.word	0x0000fde7
 80048d4:	00007fff 	.word	0x00007fff

080048d8 <GasIndexAlgorithm__mean_variance_estimator__set_parameters>:

static void GasIndexAlgorithm__mean_variance_estimator__set_parameters(
    GasIndexAlgorithmParams* params) {
 80048d8:	b5b0      	push	{r4, r5, r7, lr}
 80048da:	b082      	sub	sp, #8
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]

    params->m_Mean_Variance_Estimator___Initialized = false;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	223c      	movs	r2, #60	@ 0x3c
 80048e4:	2100      	movs	r1, #0
 80048e6:	5499      	strb	r1, [r3, r2]
    params->m_Mean_Variance_Estimator___Mean = 0.f;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2200      	movs	r2, #0
 80048ec:	641a      	str	r2, [r3, #64]	@ 0x40
    params->m_Mean_Variance_Estimator___Sraw_Offset = 0.f;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2200      	movs	r2, #0
 80048f2:	645a      	str	r2, [r3, #68]	@ 0x44
    params->m_Mean_Variance_Estimator___Std = params->mSraw_Std_Initial;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	649a      	str	r2, [r3, #72]	@ 0x48
    params->m_Mean_Variance_Estimator___Gamma_Mean =
        (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
          (params->mSamplingInterval / 3600.f)) /
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	4952      	ldr	r1, [pc, #328]	@ (8004a4c <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 8004902:	1c18      	adds	r0, r3, #0
 8004904:	f7fc f8ae 	bl	8000a64 <__aeabi_fdiv>
 8004908:	1c03      	adds	r3, r0, #0
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 800490a:	2188      	movs	r1, #136	@ 0x88
 800490c:	05c9      	lsls	r1, r1, #23
 800490e:	1c18      	adds	r0, r3, #0
 8004910:	f7fc fa8e 	bl	8000e30 <__aeabi_fmul>
 8004914:	1c03      	adds	r3, r0, #0
 8004916:	1c1d      	adds	r5, r3, #0
         (params->mTau_Mean_Hours + (params->mSamplingInterval / 3600.f)));
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	494a      	ldr	r1, [pc, #296]	@ (8004a4c <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 8004922:	1c18      	adds	r0, r3, #0
 8004924:	f7fc f89e 	bl	8000a64 <__aeabi_fdiv>
 8004928:	1c03      	adds	r3, r0, #0
 800492a:	1c19      	adds	r1, r3, #0
 800492c:	1c20      	adds	r0, r4, #0
 800492e:	f7fb ff0f 	bl	8000750 <__aeabi_fadd>
 8004932:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 8004934:	1c19      	adds	r1, r3, #0
 8004936:	1c28      	adds	r0, r5, #0
 8004938:	f7fc f894 	bl	8000a64 <__aeabi_fdiv>
 800493c:	1c03      	adds	r3, r0, #0
 800493e:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Mean =
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	64da      	str	r2, [r3, #76]	@ 0x4c
    params->m_Mean_Variance_Estimator___Gamma_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          (params->mSamplingInterval / 3600.f)) /
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	4940      	ldr	r1, [pc, #256]	@ (8004a4c <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800494a:	1c18      	adds	r0, r3, #0
 800494c:	f7fc f88a 	bl	8000a64 <__aeabi_fdiv>
 8004950:	1c03      	adds	r3, r0, #0
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 8004952:	2185      	movs	r1, #133	@ 0x85
 8004954:	05c9      	lsls	r1, r1, #23
 8004956:	1c18      	adds	r0, r3, #0
 8004958:	f7fc fa6a 	bl	8000e30 <__aeabi_fmul>
 800495c:	1c03      	adds	r3, r0, #0
 800495e:	1c1d      	adds	r5, r3, #0
         (params->mTau_Variance_Hours + (params->mSamplingInterval / 3600.f)));
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	4938      	ldr	r1, [pc, #224]	@ (8004a4c <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800496a:	1c18      	adds	r0, r3, #0
 800496c:	f7fc f87a 	bl	8000a64 <__aeabi_fdiv>
 8004970:	1c03      	adds	r3, r0, #0
 8004972:	1c19      	adds	r1, r3, #0
 8004974:	1c20      	adds	r0, r4, #0
 8004976:	f7fb feeb 	bl	8000750 <__aeabi_fadd>
 800497a:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 800497c:	1c19      	adds	r1, r3, #0
 800497e:	1c28      	adds	r0, r5, #0
 8004980:	f7fc f870 	bl	8000a64 <__aeabi_fdiv>
 8004984:	1c03      	adds	r3, r0, #0
 8004986:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Variance =
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	651a      	str	r2, [r3, #80]	@ 0x50
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	2b01      	cmp	r3, #1
 8004992:	d118      	bne.n	80049c6 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0xee>
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 8004998:	2188      	movs	r1, #136	@ 0x88
 800499a:	05c9      	lsls	r1, r1, #23
 800499c:	1c18      	adds	r0, r3, #0
 800499e:	f7fc fa47 	bl	8000e30 <__aeabi_fmul>
 80049a2:	1c03      	adds	r3, r0, #0
 80049a4:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
              params->mSamplingInterval));
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
 80049aa:	4929      	ldr	r1, [pc, #164]	@ (8004a50 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x178>)
 80049ac:	1c18      	adds	r0, r3, #0
 80049ae:	f7fb fecf 	bl	8000750 <__aeabi_fadd>
 80049b2:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 80049b4:	1c19      	adds	r1, r3, #0
 80049b6:	1c20      	adds	r0, r4, #0
 80049b8:	f7fc f854 	bl	8000a64 <__aeabi_fdiv>
 80049bc:	1c03      	adds	r3, r0, #0
 80049be:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	655a      	str	r2, [r3, #84]	@ 0x54
 80049c4:	e017      	b.n	80049f6 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x11e>
    } else {
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 80049ca:	2188      	movs	r1, #136	@ 0x88
 80049cc:	05c9      	lsls	r1, r1, #23
 80049ce:	1c18      	adds	r0, r3, #0
 80049d0:	f7fc fa2e 	bl	8000e30 <__aeabi_fmul>
 80049d4:	1c03      	adds	r3, r0, #0
 80049d6:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
              params->mSamplingInterval));
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
 80049dc:	491d      	ldr	r1, [pc, #116]	@ (8004a54 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x17c>)
 80049de:	1c18      	adds	r0, r3, #0
 80049e0:	f7fb feb6 	bl	8000750 <__aeabi_fadd>
 80049e4:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 80049e6:	1c19      	adds	r1, r3, #0
 80049e8:	1c20      	adds	r0, r4, #0
 80049ea:	f7fc f83b 	bl	8000a64 <__aeabi_fdiv>
 80049ee:	1c03      	adds	r3, r0, #0
 80049f0:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          params->mSamplingInterval) /
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	685b      	ldr	r3, [r3, #4]
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 80049fa:	2185      	movs	r1, #133	@ 0x85
 80049fc:	05c9      	lsls	r1, r1, #23
 80049fe:	1c18      	adds	r0, r3, #0
 8004a00:	f7fc fa16 	bl	8000e30 <__aeabi_fmul>
 8004a04:	1c03      	adds	r3, r0, #0
 8004a06:	1c1c      	adds	r4, r3, #0
         (GasIndexAlgorithm_TAU_INITIAL_VARIANCE + params->mSamplingInterval));
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	4912      	ldr	r1, [pc, #72]	@ (8004a58 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x180>)
 8004a0e:	1c18      	adds	r0, r3, #0
 8004a10:	f7fb fe9e 	bl	8000750 <__aeabi_fadd>
 8004a14:	1c03      	adds	r3, r0, #0
          params->mSamplingInterval) /
 8004a16:	1c19      	adds	r1, r3, #0
 8004a18:	1c20      	adds	r0, r4, #0
 8004a1a:	f7fc f823 	bl	8000a64 <__aeabi_fdiv>
 8004a1e:	1c03      	adds	r3, r0, #0
 8004a20:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	659a      	str	r2, [r3, #88]	@ 0x58
    params->m_Mean_Variance_Estimator__Gamma_Mean = 0.f;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	65da      	str	r2, [r3, #92]	@ 0x5c
    params->m_Mean_Variance_Estimator__Gamma_Variance = 0.f;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Uptime_Gamma = 0.f;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2200      	movs	r2, #0
 8004a36:	665a      	str	r2, [r3, #100]	@ 0x64
    params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	669a      	str	r2, [r3, #104]	@ 0x68
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2200      	movs	r2, #0
 8004a42:	66da      	str	r2, [r3, #108]	@ 0x6c
}
 8004a44:	46c0      	nop			@ (mov r8, r8)
 8004a46:	46bd      	mov	sp, r7
 8004a48:	b002      	add	sp, #8
 8004a4a:	bdb0      	pop	{r4, r5, r7, pc}
 8004a4c:	45610000 	.word	0x45610000
 8004a50:	44960000 	.word	0x44960000
 8004a54:	41a00000 	.word	0x41a00000
 8004a58:	451c4000 	.word	0x451c4000

08004a5c <GasIndexAlgorithm__mean_variance_estimator__get_std>:
    params->m_Mean_Variance_Estimator___Uptime_Gamma = uptime_gamma;
    params->m_Mean_Variance_Estimator___Initialized = true;
}

static float GasIndexAlgorithm__mean_variance_estimator__get_std(
    const GasIndexAlgorithmParams* params) {
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b082      	sub	sp, #8
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Std;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
}
 8004a68:	1c18      	adds	r0, r3, #0
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	b002      	add	sp, #8
 8004a6e:	bd80      	pop	{r7, pc}

08004a70 <GasIndexAlgorithm__mean_variance_estimator__get_mean>:

static float GasIndexAlgorithm__mean_variance_estimator__get_mean(
    const GasIndexAlgorithmParams* params) {
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b082      	sub	sp, #8
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]

    return (params->m_Mean_Variance_Estimator___Mean +
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
            params->m_Mean_Variance_Estimator___Sraw_Offset);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    return (params->m_Mean_Variance_Estimator___Mean +
 8004a80:	1c19      	adds	r1, r3, #0
 8004a82:	1c10      	adds	r0, r2, #0
 8004a84:	f7fb fe64 	bl	8000750 <__aeabi_fadd>
 8004a88:	1c03      	adds	r3, r0, #0
}
 8004a8a:	1c18      	adds	r0, r3, #0
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	b002      	add	sp, #8
 8004a90:	bd80      	pop	{r7, pc}

08004a92 <GasIndexAlgorithm__mean_variance_estimator__is_initialized>:

static bool GasIndexAlgorithm__mean_variance_estimator__is_initialized(
    GasIndexAlgorithmParams* params) {
 8004a92:	b580      	push	{r7, lr}
 8004a94:	b082      	sub	sp, #8
 8004a96:	af00      	add	r7, sp, #0
 8004a98:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Initialized;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	223c      	movs	r2, #60	@ 0x3c
 8004a9e:	5c9b      	ldrb	r3, [r3, r2]
}
 8004aa0:	0018      	movs	r0, r3
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	b002      	add	sp, #8
 8004aa6:	bd80      	pop	{r7, pc}

08004aa8 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>:

static void GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(
    GasIndexAlgorithmParams* params) {
 8004aa8:	b5b0      	push	{r4, r5, r7, lr}
 8004aaa:	b08c      	sub	sp, #48	@ 0x30
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
    float gamma_variance;
    float gating_threshold_variance;
    float sigmoid_gating_variance;

    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
                    params->mSamplingInterval);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	685b      	ldr	r3, [r3, #4]
    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
 8004ab4:	1c19      	adds	r1, r3, #0
 8004ab6:	4895      	ldr	r0, [pc, #596]	@ (8004d0c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x264>)
 8004ab8:	f7fc faf8 	bl	80010ac <__aeabi_fsub>
 8004abc:	1c03      	adds	r3, r0, #0
 8004abe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if ((params->m_Mean_Variance_Estimator___Uptime_Gamma < uptime_limit)) {
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004ac4:	1c19      	adds	r1, r3, #0
 8004ac6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004ac8:	f7fb fd14 	bl	80004f4 <__aeabi_fcmpgt>
 8004acc:	1e03      	subs	r3, r0, #0
 8004ace:	d00b      	beq.n	8004ae8 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x40>
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
             params->mSamplingInterval);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 8004ad8:	1c19      	adds	r1, r3, #0
 8004ada:	1c10      	adds	r0, r2, #0
 8004adc:	f7fb fe38 	bl	8000750 <__aeabi_fadd>
 8004ae0:	1c03      	adds	r3, r0, #0
 8004ae2:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    if ((params->m_Mean_Variance_Estimator___Uptime_Gating < uptime_limit)) {
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004aec:	1c19      	adds	r1, r3, #0
 8004aee:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004af0:	f7fb fd00 	bl	80004f4 <__aeabi_fcmpgt>
 8004af4:	1e03      	subs	r3, r0, #0
 8004af6:	d00b      	beq.n	8004b10 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x68>
        params->m_Mean_Variance_Estimator___Uptime_Gating =
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
             params->mSamplingInterval);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 8004b00:	1c19      	adds	r1, r3, #0
 8004b02:	1c10      	adds	r0, r2, #0
 8004b04:	f7fb fe24 	bl	8000750 <__aeabi_fadd>
 8004b08:	1c03      	adds	r3, r0, #0
 8004b0a:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gating =
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6959      	ldr	r1, [r3, #20]
 8004b14:	4a7e      	ldr	r2, [pc, #504]	@ (8004d10 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	0018      	movs	r0, r3
 8004b1a:	f000 f9f1 	bl	8004f00 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Mean,
        GasIndexAlgorithm_INIT_TRANSITION_MEAN);
    sigmoid_gamma_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	1c11      	adds	r1, r2, #0
 8004b26:	0018      	movs	r0, r3
 8004b28:	f000 f9fa 	bl	8004f20 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8004b2c:	1c03      	adds	r3, r0, #0
 8004b2e:	62bb      	str	r3, [r7, #40]	@ 0x28
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 8004b3c:	1c19      	adds	r1, r3, #0
 8004b3e:	1c10      	adds	r0, r2, #0
 8004b40:	f7fc fab4 	bl	80010ac <__aeabi_fsub>
 8004b44:	1c03      	adds	r3, r0, #0
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 8004b46:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004b48:	1c18      	adds	r0, r3, #0
 8004b4a:	f7fc f971 	bl	8000e30 <__aeabi_fmul>
 8004b4e:	1c03      	adds	r3, r0, #0
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 8004b50:	1c19      	adds	r1, r3, #0
 8004b52:	1c20      	adds	r0, r4, #0
 8004b54:	f7fb fdfc 	bl	8000750 <__aeabi_fadd>
 8004b58:	1c03      	adds	r3, r0, #0
 8004b5a:	627b      	str	r3, [r7, #36]	@ 0x24
                   sigmoid_gamma_mean));
    gating_threshold_mean =
        (params->mGating_Threshold +
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 8004b64:	1c19      	adds	r1, r3, #0
 8004b66:	486b      	ldr	r0, [pc, #428]	@ (8004d14 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 8004b68:	f7fc faa0 	bl	80010ac <__aeabi_fsub>
 8004b6c:	1c03      	adds	r3, r0, #0
 8004b6e:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	1c11      	adds	r1, r2, #0
 8004b78:	0018      	movs	r0, r3
 8004b7a:	f000 f9d1 	bl	8004f20 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8004b7e:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 8004b80:	1c19      	adds	r1, r3, #0
 8004b82:	1c28      	adds	r0, r5, #0
 8004b84:	f7fc f954 	bl	8000e30 <__aeabi_fmul>
 8004b88:	1c03      	adds	r3, r0, #0
    gating_threshold_mean =
 8004b8a:	1c19      	adds	r1, r3, #0
 8004b8c:	1c20      	adds	r0, r4, #0
 8004b8e:	f7fb fddf 	bl	8000750 <__aeabi_fadd>
 8004b92:	1c03      	adds	r3, r0, #0
 8004b94:	623b      	str	r3, [r7, #32]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 8004b96:	4a60      	ldr	r2, [pc, #384]	@ (8004d18 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 8004b98:	6a39      	ldr	r1, [r7, #32]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	0018      	movs	r0, r3
 8004b9e:	f000 f9af 	bl	8004f00 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_mean,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	1c11      	adds	r1, r2, #0
 8004baa:	0018      	movs	r0, r3
 8004bac:	f000 f9b8 	bl	8004f20 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8004bb0:	1c03      	adds	r3, r0, #0
 8004bb2:	61fb      	str	r3, [r7, #28]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Mean =
        (sigmoid_gating_mean * gamma_mean);
 8004bb4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004bb6:	69f8      	ldr	r0, [r7, #28]
 8004bb8:	f7fc f93a 	bl	8000e30 <__aeabi_fmul>
 8004bbc:	1c03      	adds	r3, r0, #0
 8004bbe:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Mean =
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	65da      	str	r2, [r3, #92]	@ 0x5c
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6999      	ldr	r1, [r3, #24]
 8004bc8:	4a51      	ldr	r2, [pc, #324]	@ (8004d10 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	0018      	movs	r0, r3
 8004bce:	f000 f997 	bl	8004f00 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Variance,
        GasIndexAlgorithm_INIT_TRANSITION_VARIANCE);
    sigmoid_gamma_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	1c11      	adds	r1, r2, #0
 8004bda:	0018      	movs	r0, r3
 8004bdc:	f000 f9a0 	bl	8004f20 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8004be0:	1c03      	adds	r3, r0, #0
 8004be2:	61bb      	str	r3, [r7, #24]
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_variance =
        (params->m_Mean_Variance_Estimator___Gamma_Variance +
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6d1c      	ldr	r4, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 8004bf0:	1c19      	adds	r1, r3, #0
 8004bf2:	1c10      	adds	r0, r2, #0
 8004bf4:	f7fc fa5a 	bl	80010ac <__aeabi_fsub>
 8004bf8:	1c03      	adds	r3, r0, #0
 8004bfa:	1c1d      	adds	r5, r3, #0
          (sigmoid_gamma_variance - sigmoid_gamma_mean)));
 8004bfc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004bfe:	69b8      	ldr	r0, [r7, #24]
 8004c00:	f7fc fa54 	bl	80010ac <__aeabi_fsub>
 8004c04:	1c03      	adds	r3, r0, #0
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 8004c06:	1c19      	adds	r1, r3, #0
 8004c08:	1c28      	adds	r0, r5, #0
 8004c0a:	f7fc f911 	bl	8000e30 <__aeabi_fmul>
 8004c0e:	1c03      	adds	r3, r0, #0
    gamma_variance =
 8004c10:	1c19      	adds	r1, r3, #0
 8004c12:	1c20      	adds	r0, r4, #0
 8004c14:	f7fb fd9c 	bl	8000750 <__aeabi_fadd>
 8004c18:	1c03      	adds	r3, r0, #0
 8004c1a:	617b      	str	r3, [r7, #20]
    gating_threshold_variance =
        (params->mGating_Threshold +
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 8004c24:	1c19      	adds	r1, r3, #0
 8004c26:	483b      	ldr	r0, [pc, #236]	@ (8004d14 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 8004c28:	f7fc fa40 	bl	80010ac <__aeabi_fsub>
 8004c2c:	1c03      	adds	r3, r0, #0
 8004c2e:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	1c11      	adds	r1, r2, #0
 8004c38:	0018      	movs	r0, r3
 8004c3a:	f000 f971 	bl	8004f20 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8004c3e:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 8004c40:	1c19      	adds	r1, r3, #0
 8004c42:	1c28      	adds	r0, r5, #0
 8004c44:	f7fc f8f4 	bl	8000e30 <__aeabi_fmul>
 8004c48:	1c03      	adds	r3, r0, #0
    gating_threshold_variance =
 8004c4a:	1c19      	adds	r1, r3, #0
 8004c4c:	1c20      	adds	r0, r4, #0
 8004c4e:	f7fb fd7f 	bl	8000750 <__aeabi_fadd>
 8004c52:	1c03      	adds	r3, r0, #0
 8004c54:	613b      	str	r3, [r7, #16]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 8004c56:	4a30      	ldr	r2, [pc, #192]	@ (8004d18 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 8004c58:	6939      	ldr	r1, [r7, #16]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	0018      	movs	r0, r3
 8004c5e:	f000 f94f 	bl	8004f00 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_variance,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	1c11      	adds	r1, r2, #0
 8004c6a:	0018      	movs	r0, r3
 8004c6c:	f000 f958 	bl	8004f20 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8004c70:	1c03      	adds	r3, r0, #0
 8004c72:	60fb      	str	r3, [r7, #12]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Variance =
        (sigmoid_gating_variance * gamma_variance);
 8004c74:	6979      	ldr	r1, [r7, #20]
 8004c76:	68f8      	ldr	r0, [r7, #12]
 8004c78:	f7fc f8da 	bl	8000e30 <__aeabi_fmul>
 8004c7c:	1c03      	adds	r3, r0, #0
 8004c7e:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Variance =
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6edc      	ldr	r4, [r3, #108]	@ 0x6c
         ((params->mSamplingInterval / 60.f) *
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	4923      	ldr	r1, [pc, #140]	@ (8004d1c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x274>)
 8004c8e:	1c18      	adds	r0, r3, #0
 8004c90:	f7fb fee8 	bl	8000a64 <__aeabi_fdiv>
 8004c94:	1c03      	adds	r3, r0, #0
 8004c96:	1c1d      	adds	r5, r3, #0
          (((1.f - sigmoid_gating_mean) *
 8004c98:	69f9      	ldr	r1, [r7, #28]
 8004c9a:	20fe      	movs	r0, #254	@ 0xfe
 8004c9c:	0580      	lsls	r0, r0, #22
 8004c9e:	f7fc fa05 	bl	80010ac <__aeabi_fsub>
 8004ca2:	1c03      	adds	r3, r0, #0
 8004ca4:	491e      	ldr	r1, [pc, #120]	@ (8004d20 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x278>)
 8004ca6:	1c18      	adds	r0, r3, #0
 8004ca8:	f7fc f8c2 	bl	8000e30 <__aeabi_fmul>
 8004cac:	1c03      	adds	r3, r0, #0
            (1.f + GasIndexAlgorithm_GATING_MAX_RATIO)) -
 8004cae:	491d      	ldr	r1, [pc, #116]	@ (8004d24 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x27c>)
 8004cb0:	1c18      	adds	r0, r3, #0
 8004cb2:	f7fc f9fb 	bl	80010ac <__aeabi_fsub>
 8004cb6:	1c03      	adds	r3, r0, #0
         ((params->mSamplingInterval / 60.f) *
 8004cb8:	1c19      	adds	r1, r3, #0
 8004cba:	1c28      	adds	r0, r5, #0
 8004cbc:	f7fc f8b8 	bl	8000e30 <__aeabi_fmul>
 8004cc0:	1c03      	adds	r3, r0, #0
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 8004cc2:	1c19      	adds	r1, r3, #0
 8004cc4:	1c20      	adds	r0, r4, #0
 8004cc6:	f7fb fd43 	bl	8000750 <__aeabi_fadd>
 8004cca:	1c03      	adds	r3, r0, #0
 8004ccc:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	66da      	str	r2, [r3, #108]	@ 0x6c
           GasIndexAlgorithm_GATING_MAX_RATIO)));
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes < 0.f)) {
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004cd6:	2100      	movs	r1, #0
 8004cd8:	1c18      	adds	r0, r3, #0
 8004cda:	f7fb fbf7 	bl	80004cc <__aeabi_fcmplt>
 8004cde:	1e03      	subs	r3, r0, #0
 8004ce0:	d002      	beq.n	8004ce8 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x240>
        params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
         params->mGating_Max_Duration_Minutes)) {
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	691b      	ldr	r3, [r3, #16]
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 8004cf0:	1c19      	adds	r1, r3, #0
 8004cf2:	1c10      	adds	r0, r2, #0
 8004cf4:	f7fb fbfe 	bl	80004f4 <__aeabi_fcmpgt>
 8004cf8:	1e03      	subs	r3, r0, #0
 8004cfa:	d100      	bne.n	8004cfe <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x256>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
    }
}
 8004cfc:	e002      	b.n	8004d04 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x25c>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2200      	movs	r2, #0
 8004d02:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004d04:	46c0      	nop			@ (mov r8, r8)
 8004d06:	46bd      	mov	sp, r7
 8004d08:	b00c      	add	sp, #48	@ 0x30
 8004d0a:	bdb0      	pop	{r4, r5, r7, pc}
 8004d0c:	46fffe00 	.word	0x46fffe00
 8004d10:	3c23d70a 	.word	0x3c23d70a
 8004d14:	43ff0000 	.word	0x43ff0000
 8004d18:	3db851ec 	.word	0x3db851ec
 8004d1c:	42700000 	.word	0x42700000
 8004d20:	3fa66666 	.word	0x3fa66666
 8004d24:	3e99999a 	.word	0x3e99999a

08004d28 <GasIndexAlgorithm__mean_variance_estimator__process>:

static void GasIndexAlgorithm__mean_variance_estimator__process(
    GasIndexAlgorithmParams* params, float sraw) {
 8004d28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d2a:	b087      	sub	sp, #28
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
 8004d30:	6039      	str	r1, [r7, #0]

    float delta_sgp;
    float c;
    float additional_scaling;

    if ((params->m_Mean_Variance_Estimator___Initialized == false)) {
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	223c      	movs	r2, #60	@ 0x3c
 8004d36:	5c9b      	ldrb	r3, [r3, r2]
 8004d38:	2201      	movs	r2, #1
 8004d3a:	4053      	eors	r3, r2
 8004d3c:	b2db      	uxtb	r3, r3
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d00a      	beq.n	8004d58 <GasIndexAlgorithm__mean_variance_estimator__process+0x30>
        params->m_Mean_Variance_Estimator___Initialized = true;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	223c      	movs	r2, #60	@ 0x3c
 8004d46:	2101      	movs	r1, #1
 8004d48:	5499      	strb	r1, [r3, r2]
        params->m_Mean_Variance_Estimator___Sraw_Offset = sraw;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	683a      	ldr	r2, [r7, #0]
 8004d4e:	645a      	str	r2, [r3, #68]	@ 0x44
        params->m_Mean_Variance_Estimator___Mean = 0.f;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2200      	movs	r2, #0
 8004d54:	641a      	str	r2, [r3, #64]	@ 0x40
        params->m_Mean_Variance_Estimator___Mean =
            (params->m_Mean_Variance_Estimator___Mean +
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
              GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING));
    }
}
 8004d56:	e0c8      	b.n	8004eea <GasIndexAlgorithm__mean_variance_estimator__process+0x1c2>
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d5c:	4965      	ldr	r1, [pc, #404]	@ (8004ef4 <GasIndexAlgorithm__mean_variance_estimator__process+0x1cc>)
 8004d5e:	1c18      	adds	r0, r3, #0
 8004d60:	f7fb fbd2 	bl	8000508 <__aeabi_fcmpge>
 8004d64:	1e03      	subs	r3, r0, #0
 8004d66:	d107      	bne.n	8004d78 <GasIndexAlgorithm__mean_variance_estimator__process+0x50>
             (params->m_Mean_Variance_Estimator___Mean <= -100.f))) {
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 8004d6c:	4962      	ldr	r1, [pc, #392]	@ (8004ef8 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d0>)
 8004d6e:	1c18      	adds	r0, r3, #0
 8004d70:	f7fb fbb6 	bl	80004e0 <__aeabi_fcmple>
 8004d74:	1e03      	subs	r3, r0, #0
 8004d76:	d00e      	beq.n	8004d96 <GasIndexAlgorithm__mean_variance_estimator__process+0x6e>
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
                 params->m_Mean_Variance_Estimator___Mean);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 8004d80:	1c19      	adds	r1, r3, #0
 8004d82:	1c10      	adds	r0, r2, #0
 8004d84:	f7fb fce4 	bl	8000750 <__aeabi_fadd>
 8004d88:	1c03      	adds	r3, r0, #0
 8004d8a:	1c1a      	adds	r2, r3, #0
            params->m_Mean_Variance_Estimator___Sraw_Offset =
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	645a      	str	r2, [r3, #68]	@ 0x44
            params->m_Mean_Variance_Estimator___Mean = 0.f;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2200      	movs	r2, #0
 8004d94:	641a      	str	r2, [r3, #64]	@ 0x40
        sraw = (sraw - params->m_Mean_Variance_Estimator___Sraw_Offset);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d9a:	1c19      	adds	r1, r3, #0
 8004d9c:	6838      	ldr	r0, [r7, #0]
 8004d9e:	f7fc f985 	bl	80010ac <__aeabi_fsub>
 8004da2:	1c03      	adds	r3, r0, #0
 8004da4:	603b      	str	r3, [r7, #0]
        GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(params);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	0018      	movs	r0, r3
 8004daa:	f7ff fe7d 	bl	8004aa8 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>
        delta_sgp = ((sraw - params->m_Mean_Variance_Estimator___Mean) /
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004db2:	1c19      	adds	r1, r3, #0
 8004db4:	6838      	ldr	r0, [r7, #0]
 8004db6:	f7fc f979 	bl	80010ac <__aeabi_fsub>
 8004dba:	1c03      	adds	r3, r0, #0
 8004dbc:	2185      	movs	r1, #133	@ 0x85
 8004dbe:	05c9      	lsls	r1, r1, #23
 8004dc0:	1c18      	adds	r0, r3, #0
 8004dc2:	f7fb fe4f 	bl	8000a64 <__aeabi_fdiv>
 8004dc6:	1c03      	adds	r3, r0, #0
 8004dc8:	60fb      	str	r3, [r7, #12]
        if ((delta_sgp < 0.f)) {
 8004dca:	2100      	movs	r1, #0
 8004dcc:	68f8      	ldr	r0, [r7, #12]
 8004dce:	f7fb fb7d 	bl	80004cc <__aeabi_fcmplt>
 8004dd2:	1e03      	subs	r3, r0, #0
 8004dd4:	d008      	beq.n	8004de8 <GasIndexAlgorithm__mean_variance_estimator__process+0xc0>
            c = (params->m_Mean_Variance_Estimator___Std - delta_sgp);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004dda:	68f9      	ldr	r1, [r7, #12]
 8004ddc:	1c18      	adds	r0, r3, #0
 8004dde:	f7fc f965 	bl	80010ac <__aeabi_fsub>
 8004de2:	1c03      	adds	r3, r0, #0
 8004de4:	617b      	str	r3, [r7, #20]
 8004de6:	e007      	b.n	8004df8 <GasIndexAlgorithm__mean_variance_estimator__process+0xd0>
            c = (params->m_Mean_Variance_Estimator___Std + delta_sgp);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004dec:	1c19      	adds	r1, r3, #0
 8004dee:	68f8      	ldr	r0, [r7, #12]
 8004df0:	f7fb fcae 	bl	8000750 <__aeabi_fadd>
 8004df4:	1c03      	adds	r3, r0, #0
 8004df6:	617b      	str	r3, [r7, #20]
        additional_scaling = 1.f;
 8004df8:	23fe      	movs	r3, #254	@ 0xfe
 8004dfa:	059b      	lsls	r3, r3, #22
 8004dfc:	613b      	str	r3, [r7, #16]
        if ((c > 1440.f)) {
 8004dfe:	493f      	ldr	r1, [pc, #252]	@ (8004efc <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 8004e00:	6978      	ldr	r0, [r7, #20]
 8004e02:	f7fb fb77 	bl	80004f4 <__aeabi_fcmpgt>
 8004e06:	1e03      	subs	r3, r0, #0
 8004e08:	d010      	beq.n	8004e2c <GasIndexAlgorithm__mean_variance_estimator__process+0x104>
            additional_scaling = ((c / 1440.f) * (c / 1440.f));
 8004e0a:	493c      	ldr	r1, [pc, #240]	@ (8004efc <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 8004e0c:	6978      	ldr	r0, [r7, #20]
 8004e0e:	f7fb fe29 	bl	8000a64 <__aeabi_fdiv>
 8004e12:	1c03      	adds	r3, r0, #0
 8004e14:	1c1c      	adds	r4, r3, #0
 8004e16:	4939      	ldr	r1, [pc, #228]	@ (8004efc <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 8004e18:	6978      	ldr	r0, [r7, #20]
 8004e1a:	f7fb fe23 	bl	8000a64 <__aeabi_fdiv>
 8004e1e:	1c03      	adds	r3, r0, #0
 8004e20:	1c19      	adds	r1, r3, #0
 8004e22:	1c20      	adds	r0, r4, #0
 8004e24:	f7fc f804 	bl	8000e30 <__aeabi_fmul>
 8004e28:	1c03      	adds	r3, r0, #0
 8004e2a:	613b      	str	r3, [r7, #16]
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING -
 8004e30:	1c19      	adds	r1, r3, #0
 8004e32:	2085      	movs	r0, #133	@ 0x85
 8004e34:	05c0      	lsls	r0, r0, #23
 8004e36:	f7fc f939 	bl	80010ac <__aeabi_fsub>
 8004e3a:	1c03      	adds	r3, r0, #0
            (sqrtf((additional_scaling *
 8004e3c:	6939      	ldr	r1, [r7, #16]
 8004e3e:	1c18      	adds	r0, r3, #0
 8004e40:	f7fb fff6 	bl	8000e30 <__aeabi_fmul>
 8004e44:	1c03      	adds	r3, r0, #0
 8004e46:	1c18      	adds	r0, r3, #0
 8004e48:	f00a f9ba 	bl	800f1c0 <sqrtf>
 8004e4c:	1c06      	adds	r6, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
                   (params->m_Mean_Variance_Estimator___Std /
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6c9d      	ldr	r5, [r3, #72]	@ 0x48
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 8004e56:	2185      	movs	r1, #133	@ 0x85
 8004e58:	05c9      	lsls	r1, r1, #23
 8004e5a:	6938      	ldr	r0, [r7, #16]
 8004e5c:	f7fb ffe8 	bl	8000e30 <__aeabi_fmul>
 8004e60:	1c03      	adds	r3, r0, #0
                   (params->m_Mean_Variance_Estimator___Std /
 8004e62:	1c19      	adds	r1, r3, #0
 8004e64:	1c28      	adds	r0, r5, #0
 8004e66:	f7fb fdfd 	bl	8000a64 <__aeabi_fdiv>
 8004e6a:	1c03      	adds	r3, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 8004e6c:	1c19      	adds	r1, r3, #0
 8004e6e:	1c20      	adds	r0, r4, #0
 8004e70:	f7fb ffde 	bl	8000e30 <__aeabi_fmul>
 8004e74:	1c03      	adds	r3, r0, #0
 8004e76:	1c1c      	adds	r4, r3, #0
                  (((params->m_Mean_Variance_Estimator__Gamma_Variance *
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e7c:	68f9      	ldr	r1, [r7, #12]
 8004e7e:	1c18      	adds	r0, r3, #0
 8004e80:	f7fb ffd6 	bl	8000e30 <__aeabi_fmul>
 8004e84:	1c03      	adds	r3, r0, #0
                     delta_sgp) /
 8004e86:	6939      	ldr	r1, [r7, #16]
 8004e88:	1c18      	adds	r0, r3, #0
 8004e8a:	f7fb fdeb 	bl	8000a64 <__aeabi_fdiv>
 8004e8e:	1c03      	adds	r3, r0, #0
                    additional_scaling) *
 8004e90:	68f9      	ldr	r1, [r7, #12]
 8004e92:	1c18      	adds	r0, r3, #0
 8004e94:	f7fb ffcc 	bl	8000e30 <__aeabi_fmul>
 8004e98:	1c03      	adds	r3, r0, #0
             sqrtf(
 8004e9a:	1c19      	adds	r1, r3, #0
 8004e9c:	1c20      	adds	r0, r4, #0
 8004e9e:	f7fb fc57 	bl	8000750 <__aeabi_fadd>
 8004ea2:	1c03      	adds	r3, r0, #0
 8004ea4:	1c18      	adds	r0, r3, #0
 8004ea6:	f00a f98b 	bl	800f1c0 <sqrtf>
 8004eaa:	1c03      	adds	r3, r0, #0
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 8004eac:	1c19      	adds	r1, r3, #0
 8004eae:	1c30      	adds	r0, r6, #0
 8004eb0:	f7fb ffbe 	bl	8000e30 <__aeabi_fmul>
 8004eb4:	1c03      	adds	r3, r0, #0
 8004eb6:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Std =
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	649a      	str	r2, [r3, #72]	@ 0x48
            (params->m_Mean_Variance_Estimator___Mean +
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ec4:	68f9      	ldr	r1, [r7, #12]
 8004ec6:	1c18      	adds	r0, r3, #0
 8004ec8:	f7fb ffb2 	bl	8000e30 <__aeabi_fmul>
 8004ecc:	1c03      	adds	r3, r0, #0
 8004ece:	2182      	movs	r1, #130	@ 0x82
 8004ed0:	05c9      	lsls	r1, r1, #23
 8004ed2:	1c18      	adds	r0, r3, #0
 8004ed4:	f7fb fdc6 	bl	8000a64 <__aeabi_fdiv>
 8004ed8:	1c03      	adds	r3, r0, #0
            (params->m_Mean_Variance_Estimator___Mean +
 8004eda:	1c19      	adds	r1, r3, #0
 8004edc:	1c20      	adds	r0, r4, #0
 8004ede:	f7fb fc37 	bl	8000750 <__aeabi_fadd>
 8004ee2:	1c03      	adds	r3, r0, #0
 8004ee4:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Mean =
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8004eea:	46c0      	nop			@ (mov r8, r8)
 8004eec:	46bd      	mov	sp, r7
 8004eee:	b007      	add	sp, #28
 8004ef0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ef2:	46c0      	nop			@ (mov r8, r8)
 8004ef4:	42c80000 	.word	0x42c80000
 8004ef8:	c2c80000 	.word	0xc2c80000
 8004efc:	44b40000 	.word	0x44b40000

08004f00 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>:

static void
GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K) {
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b084      	sub	sp, #16
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	60f8      	str	r0, [r7, #12]
 8004f08:	60b9      	str	r1, [r7, #8]
 8004f0a:	607a      	str	r2, [r7, #4]

    params->m_Mean_Variance_Estimator___Sigmoid__K = K;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	687a      	ldr	r2, [r7, #4]
 8004f10:	671a      	str	r2, [r3, #112]	@ 0x70
    params->m_Mean_Variance_Estimator___Sigmoid__X0 = X0;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	68ba      	ldr	r2, [r7, #8]
 8004f16:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004f18:	46c0      	nop			@ (mov r8, r8)
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	b004      	add	sp, #16
 8004f1e:	bd80      	pop	{r7, pc}

08004f20 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>:

static float GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
    GasIndexAlgorithmParams* params, float sample) {
 8004f20:	b590      	push	{r4, r7, lr}
 8004f22:	b085      	sub	sp, #20
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
 8004f28:	6039      	str	r1, [r7, #0]

    float x;

    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6f1c      	ldr	r4, [r3, #112]	@ 0x70
         (sample - params->m_Mean_Variance_Estimator___Sigmoid__X0));
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f32:	1c19      	adds	r1, r3, #0
 8004f34:	6838      	ldr	r0, [r7, #0]
 8004f36:	f7fc f8b9 	bl	80010ac <__aeabi_fsub>
 8004f3a:	1c03      	adds	r3, r0, #0
    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 8004f3c:	1c19      	adds	r1, r3, #0
 8004f3e:	1c20      	adds	r0, r4, #0
 8004f40:	f7fb ff76 	bl	8000e30 <__aeabi_fmul>
 8004f44:	1c03      	adds	r3, r0, #0
 8004f46:	60fb      	str	r3, [r7, #12]
    if ((x < -50.f)) {
 8004f48:	4912      	ldr	r1, [pc, #72]	@ (8004f94 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x74>)
 8004f4a:	68f8      	ldr	r0, [r7, #12]
 8004f4c:	f7fb fabe 	bl	80004cc <__aeabi_fcmplt>
 8004f50:	1e03      	subs	r3, r0, #0
 8004f52:	d002      	beq.n	8004f5a <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x3a>
        return 1.f;
 8004f54:	23fe      	movs	r3, #254	@ 0xfe
 8004f56:	059b      	lsls	r3, r3, #22
 8004f58:	e018      	b.n	8004f8c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else if ((x > 50.f)) {
 8004f5a:	490f      	ldr	r1, [pc, #60]	@ (8004f98 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x78>)
 8004f5c:	68f8      	ldr	r0, [r7, #12]
 8004f5e:	f7fb fac9 	bl	80004f4 <__aeabi_fcmpgt>
 8004f62:	1e03      	subs	r3, r0, #0
 8004f64:	d001      	beq.n	8004f6a <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x4a>
        return 0.f;
 8004f66:	2300      	movs	r3, #0
 8004f68:	e010      	b.n	8004f8c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else {
        return (1.f / (1.f + expf(x)));
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	1c18      	adds	r0, r3, #0
 8004f6e:	f00a f8ff 	bl	800f170 <expf>
 8004f72:	1c03      	adds	r3, r0, #0
 8004f74:	21fe      	movs	r1, #254	@ 0xfe
 8004f76:	0589      	lsls	r1, r1, #22
 8004f78:	1c18      	adds	r0, r3, #0
 8004f7a:	f7fb fbe9 	bl	8000750 <__aeabi_fadd>
 8004f7e:	1c03      	adds	r3, r0, #0
 8004f80:	1c19      	adds	r1, r3, #0
 8004f82:	20fe      	movs	r0, #254	@ 0xfe
 8004f84:	0580      	lsls	r0, r0, #22
 8004f86:	f7fb fd6d 	bl	8000a64 <__aeabi_fdiv>
 8004f8a:	1c03      	adds	r3, r0, #0
    }
}
 8004f8c:	1c18      	adds	r0, r3, #0
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	b005      	add	sp, #20
 8004f92:	bd90      	pop	{r4, r7, pc}
 8004f94:	c2480000 	.word	0xc2480000
 8004f98:	42480000 	.word	0x42480000

08004f9c <GasIndexAlgorithm__mox_model__set_parameters>:

static void
GasIndexAlgorithm__mox_model__set_parameters(GasIndexAlgorithmParams* params,
                                             float SRAW_STD, float SRAW_MEAN) {
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b084      	sub	sp, #16
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	60f8      	str	r0, [r7, #12]
 8004fa4:	60b9      	str	r1, [r7, #8]
 8004fa6:	607a      	str	r2, [r7, #4]

    params->m_Mox_Model__Sraw_Std = SRAW_STD;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	68ba      	ldr	r2, [r7, #8]
 8004fac:	679a      	str	r2, [r3, #120]	@ 0x78
    params->m_Mox_Model__Sraw_Mean = SRAW_MEAN;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	687a      	ldr	r2, [r7, #4]
 8004fb2:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8004fb4:	46c0      	nop			@ (mov r8, r8)
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	b004      	add	sp, #16
 8004fba:	bd80      	pop	{r7, pc}

08004fbc <GasIndexAlgorithm__mox_model__process>:

static float
GasIndexAlgorithm__mox_model__process(GasIndexAlgorithmParams* params,
                                      float sraw) {
 8004fbc:	b590      	push	{r4, r7, lr}
 8004fbe:	b083      	sub	sp, #12
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
 8004fc4:	6039      	str	r1, [r7, #0]

    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	2b01      	cmp	r3, #1
 8004fcc:	d114      	bne.n	8004ff8 <GasIndexAlgorithm__mox_model__process+0x3c>
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004fd2:	1c19      	adds	r1, r3, #0
 8004fd4:	6838      	ldr	r0, [r7, #0]
 8004fd6:	f7fc f869 	bl	80010ac <__aeabi_fsub>
 8004fda:	1c03      	adds	r3, r0, #0
 8004fdc:	4918      	ldr	r1, [pc, #96]	@ (8005040 <GasIndexAlgorithm__mox_model__process+0x84>)
 8004fde:	1c18      	adds	r0, r3, #0
 8004fe0:	f7fb fd40 	bl	8000a64 <__aeabi_fdiv>
 8004fe4:	1c03      	adds	r3, r0, #0
 8004fe6:	1c1a      	adds	r2, r3, #0
                 GasIndexAlgorithm_SRAW_STD_NOX) *
                params->mIndex_Gain);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6a1b      	ldr	r3, [r3, #32]
                 GasIndexAlgorithm_SRAW_STD_NOX) *
 8004fec:	1c19      	adds	r1, r3, #0
 8004fee:	1c10      	adds	r0, r2, #0
 8004ff0:	f7fb ff1e 	bl	8000e30 <__aeabi_fmul>
 8004ff4:	1c03      	adds	r3, r0, #0
 8004ff6:	e01f      	b.n	8005038 <GasIndexAlgorithm__mox_model__process+0x7c>
    } else {
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004ffc:	1c19      	adds	r1, r3, #0
 8004ffe:	6838      	ldr	r0, [r7, #0]
 8005000:	f7fc f854 	bl	80010ac <__aeabi_fsub>
 8005004:	1c03      	adds	r3, r0, #0
 8005006:	1c1a      	adds	r2, r3, #0
 8005008:	2380      	movs	r3, #128	@ 0x80
 800500a:	061b      	lsls	r3, r3, #24
 800500c:	4053      	eors	r3, r2
 800500e:	001c      	movs	r4, r3
                 (-1.f * (params->m_Mox_Model__Sraw_Std +
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005014:	490b      	ldr	r1, [pc, #44]	@ (8005044 <GasIndexAlgorithm__mox_model__process+0x88>)
 8005016:	1c18      	adds	r0, r3, #0
 8005018:	f7fb fb9a 	bl	8000750 <__aeabi_fadd>
 800501c:	1c03      	adds	r3, r0, #0
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 800501e:	1c19      	adds	r1, r3, #0
 8005020:	1c20      	adds	r0, r4, #0
 8005022:	f7fb fd1f 	bl	8000a64 <__aeabi_fdiv>
 8005026:	1c03      	adds	r3, r0, #0
 8005028:	1c1a      	adds	r2, r3, #0
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
                params->mIndex_Gain);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6a1b      	ldr	r3, [r3, #32]
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
 800502e:	1c19      	adds	r1, r3, #0
 8005030:	1c10      	adds	r0, r2, #0
 8005032:	f7fb fefd 	bl	8000e30 <__aeabi_fmul>
 8005036:	1c03      	adds	r3, r0, #0
    }
}
 8005038:	1c18      	adds	r0, r3, #0
 800503a:	46bd      	mov	sp, r7
 800503c:	b003      	add	sp, #12
 800503e:	bd90      	pop	{r4, r7, pc}
 8005040:	44fa0000 	.word	0x44fa0000
 8005044:	435c0000 	.word	0x435c0000

08005048 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>:

static void GasIndexAlgorithm__sigmoid_scaled__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K, float offset_default) {
 8005048:	b580      	push	{r7, lr}
 800504a:	b084      	sub	sp, #16
 800504c:	af00      	add	r7, sp, #0
 800504e:	60f8      	str	r0, [r7, #12]
 8005050:	60b9      	str	r1, [r7, #8]
 8005052:	607a      	str	r2, [r7, #4]
 8005054:	603b      	str	r3, [r7, #0]

    params->m_Sigmoid_Scaled__K = K;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	2180      	movs	r1, #128	@ 0x80
 800505a:	687a      	ldr	r2, [r7, #4]
 800505c:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__X0 = X0;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	2184      	movs	r1, #132	@ 0x84
 8005062:	68ba      	ldr	r2, [r7, #8]
 8005064:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__Offset_Default = offset_default;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	2188      	movs	r1, #136	@ 0x88
 800506a:	683a      	ldr	r2, [r7, #0]
 800506c:	505a      	str	r2, [r3, r1]
}
 800506e:	46c0      	nop			@ (mov r8, r8)
 8005070:	46bd      	mov	sp, r7
 8005072:	b004      	add	sp, #16
 8005074:	bd80      	pop	{r7, pc}
	...

08005078 <GasIndexAlgorithm__sigmoid_scaled__process>:

static float
GasIndexAlgorithm__sigmoid_scaled__process(GasIndexAlgorithmParams* params,
                                           float sample) {
 8005078:	b590      	push	{r4, r7, lr}
 800507a:	b085      	sub	sp, #20
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
 8005080:	6039      	str	r1, [r7, #0]

    float x;
    float shift;

    x = (params->m_Sigmoid_Scaled__K * (sample - params->m_Sigmoid_Scaled__X0));
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2280      	movs	r2, #128	@ 0x80
 8005086:	589c      	ldr	r4, [r3, r2]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2284      	movs	r2, #132	@ 0x84
 800508c:	589b      	ldr	r3, [r3, r2]
 800508e:	1c19      	adds	r1, r3, #0
 8005090:	6838      	ldr	r0, [r7, #0]
 8005092:	f7fc f80b 	bl	80010ac <__aeabi_fsub>
 8005096:	1c03      	adds	r3, r0, #0
 8005098:	1c19      	adds	r1, r3, #0
 800509a:	1c20      	adds	r0, r4, #0
 800509c:	f7fb fec8 	bl	8000e30 <__aeabi_fmul>
 80050a0:	1c03      	adds	r3, r0, #0
 80050a2:	60bb      	str	r3, [r7, #8]
    if ((x < -50.f)) {
 80050a4:	4940      	ldr	r1, [pc, #256]	@ (80051a8 <GasIndexAlgorithm__sigmoid_scaled__process+0x130>)
 80050a6:	68b8      	ldr	r0, [r7, #8]
 80050a8:	f7fb fa10 	bl	80004cc <__aeabi_fcmplt>
 80050ac:	1e03      	subs	r3, r0, #0
 80050ae:	d001      	beq.n	80050b4 <GasIndexAlgorithm__sigmoid_scaled__process+0x3c>
        return GasIndexAlgorithm_SIGMOID_L;
 80050b0:	4b3e      	ldr	r3, [pc, #248]	@ (80051ac <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 80050b2:	e075      	b.n	80051a0 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else if ((x > 50.f)) {
 80050b4:	493e      	ldr	r1, [pc, #248]	@ (80051b0 <GasIndexAlgorithm__sigmoid_scaled__process+0x138>)
 80050b6:	68b8      	ldr	r0, [r7, #8]
 80050b8:	f7fb fa1c 	bl	80004f4 <__aeabi_fcmpgt>
 80050bc:	1e03      	subs	r3, r0, #0
 80050be:	d001      	beq.n	80050c4 <GasIndexAlgorithm__sigmoid_scaled__process+0x4c>
        return 0.f;
 80050c0:	2300      	movs	r3, #0
 80050c2:	e06d      	b.n	80051a0 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else {
        if ((sample >= 0.f)) {
 80050c4:	2100      	movs	r1, #0
 80050c6:	6838      	ldr	r0, [r7, #0]
 80050c8:	f7fb fa1e 	bl	8000508 <__aeabi_fcmpge>
 80050cc:	1e03      	subs	r3, r0, #0
 80050ce:	d047      	beq.n	8005160 <GasIndexAlgorithm__sigmoid_scaled__process+0xe8>
            if ((params->m_Sigmoid_Scaled__Offset_Default == 1.f)) {
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2288      	movs	r2, #136	@ 0x88
 80050d4:	589b      	ldr	r3, [r3, r2]
 80050d6:	21fe      	movs	r1, #254	@ 0xfe
 80050d8:	0589      	lsls	r1, r1, #22
 80050da:	1c18      	adds	r0, r3, #0
 80050dc:	f7fb f9f0 	bl	80004c0 <__aeabi_fcmpeq>
 80050e0:	1e03      	subs	r3, r0, #0
 80050e2:	d00e      	beq.n	8005102 <GasIndexAlgorithm__sigmoid_scaled__process+0x8a>
                shift = ((500.f / 499.f) * (1.f - params->mIndex_Offset));
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	689b      	ldr	r3, [r3, #8]
 80050e8:	1c19      	adds	r1, r3, #0
 80050ea:	20fe      	movs	r0, #254	@ 0xfe
 80050ec:	0580      	lsls	r0, r0, #22
 80050ee:	f7fb ffdd 	bl	80010ac <__aeabi_fsub>
 80050f2:	1c03      	adds	r3, r0, #0
 80050f4:	492f      	ldr	r1, [pc, #188]	@ (80051b4 <GasIndexAlgorithm__sigmoid_scaled__process+0x13c>)
 80050f6:	1c18      	adds	r0, r3, #0
 80050f8:	f7fb fe9a 	bl	8000e30 <__aeabi_fmul>
 80050fc:	1c03      	adds	r3, r0, #0
 80050fe:	60fb      	str	r3, [r7, #12]
 8005100:	e012      	b.n	8005128 <GasIndexAlgorithm__sigmoid_scaled__process+0xb0>
            } else {
                shift = ((GasIndexAlgorithm_SIGMOID_L -
                          (5.f * params->mIndex_Offset)) /
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	689b      	ldr	r3, [r3, #8]
 8005106:	492c      	ldr	r1, [pc, #176]	@ (80051b8 <GasIndexAlgorithm__sigmoid_scaled__process+0x140>)
 8005108:	1c18      	adds	r0, r3, #0
 800510a:	f7fb fe91 	bl	8000e30 <__aeabi_fmul>
 800510e:	1c03      	adds	r3, r0, #0
                shift = ((GasIndexAlgorithm_SIGMOID_L -
 8005110:	1c19      	adds	r1, r3, #0
 8005112:	4826      	ldr	r0, [pc, #152]	@ (80051ac <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 8005114:	f7fb ffca 	bl	80010ac <__aeabi_fsub>
 8005118:	1c03      	adds	r3, r0, #0
 800511a:	2181      	movs	r1, #129	@ 0x81
 800511c:	05c9      	lsls	r1, r1, #23
 800511e:	1c18      	adds	r0, r3, #0
 8005120:	f7fb fca0 	bl	8000a64 <__aeabi_fdiv>
 8005124:	1c03      	adds	r3, r0, #0
 8005126:	60fb      	str	r3, [r7, #12]
                         4.f);
            }
            return (((GasIndexAlgorithm_SIGMOID_L + shift) / (1.f + expf(x))) -
 8005128:	4920      	ldr	r1, [pc, #128]	@ (80051ac <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800512a:	68f8      	ldr	r0, [r7, #12]
 800512c:	f7fb fb10 	bl	8000750 <__aeabi_fadd>
 8005130:	1c03      	adds	r3, r0, #0
 8005132:	1c1c      	adds	r4, r3, #0
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	1c18      	adds	r0, r3, #0
 8005138:	f00a f81a 	bl	800f170 <expf>
 800513c:	1c03      	adds	r3, r0, #0
 800513e:	21fe      	movs	r1, #254	@ 0xfe
 8005140:	0589      	lsls	r1, r1, #22
 8005142:	1c18      	adds	r0, r3, #0
 8005144:	f7fb fb04 	bl	8000750 <__aeabi_fadd>
 8005148:	1c03      	adds	r3, r0, #0
 800514a:	1c19      	adds	r1, r3, #0
 800514c:	1c20      	adds	r0, r4, #0
 800514e:	f7fb fc89 	bl	8000a64 <__aeabi_fdiv>
 8005152:	1c03      	adds	r3, r0, #0
 8005154:	68f9      	ldr	r1, [r7, #12]
 8005156:	1c18      	adds	r0, r3, #0
 8005158:	f7fb ffa8 	bl	80010ac <__aeabi_fsub>
 800515c:	1c03      	adds	r3, r0, #0
 800515e:	e01f      	b.n	80051a0 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
                    shift);
        } else {
            return ((params->mIndex_Offset /
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	689a      	ldr	r2, [r3, #8]
                     params->m_Sigmoid_Scaled__Offset_Default) *
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2188      	movs	r1, #136	@ 0x88
 8005168:	585b      	ldr	r3, [r3, r1]
            return ((params->mIndex_Offset /
 800516a:	1c19      	adds	r1, r3, #0
 800516c:	1c10      	adds	r0, r2, #0
 800516e:	f7fb fc79 	bl	8000a64 <__aeabi_fdiv>
 8005172:	1c03      	adds	r3, r0, #0
 8005174:	1c1c      	adds	r4, r3, #0
                    (GasIndexAlgorithm_SIGMOID_L / (1.f + expf(x))));
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	1c18      	adds	r0, r3, #0
 800517a:	f009 fff9 	bl	800f170 <expf>
 800517e:	1c03      	adds	r3, r0, #0
 8005180:	21fe      	movs	r1, #254	@ 0xfe
 8005182:	0589      	lsls	r1, r1, #22
 8005184:	1c18      	adds	r0, r3, #0
 8005186:	f7fb fae3 	bl	8000750 <__aeabi_fadd>
 800518a:	1c03      	adds	r3, r0, #0
 800518c:	1c19      	adds	r1, r3, #0
 800518e:	4807      	ldr	r0, [pc, #28]	@ (80051ac <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 8005190:	f7fb fc68 	bl	8000a64 <__aeabi_fdiv>
 8005194:	1c03      	adds	r3, r0, #0
                     params->m_Sigmoid_Scaled__Offset_Default) *
 8005196:	1c19      	adds	r1, r3, #0
 8005198:	1c20      	adds	r0, r4, #0
 800519a:	f7fb fe49 	bl	8000e30 <__aeabi_fmul>
 800519e:	1c03      	adds	r3, r0, #0
        }
    }
}
 80051a0:	1c18      	adds	r0, r3, #0
 80051a2:	46bd      	mov	sp, r7
 80051a4:	b005      	add	sp, #20
 80051a6:	bd90      	pop	{r4, r7, pc}
 80051a8:	c2480000 	.word	0xc2480000
 80051ac:	43fa0000 	.word	0x43fa0000
 80051b0:	42480000 	.word	0x42480000
 80051b4:	3f8041ab 	.word	0x3f8041ab
 80051b8:	40a00000 	.word	0x40a00000

080051bc <GasIndexAlgorithm__adaptive_lowpass__set_parameters>:

static void GasIndexAlgorithm__adaptive_lowpass__set_parameters(
    GasIndexAlgorithmParams* params) {
 80051bc:	b590      	push	{r4, r7, lr}
 80051be:	b083      	sub	sp, #12
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]

    params->m_Adaptive_Lowpass__A1 =
        (params->mSamplingInterval /
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_FAST + params->mSamplingInterval));
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	4913      	ldr	r1, [pc, #76]	@ (800521c <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x60>)
 80051ce:	1c18      	adds	r0, r3, #0
 80051d0:	f7fb fabe 	bl	8000750 <__aeabi_fadd>
 80051d4:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 80051d6:	1c19      	adds	r1, r3, #0
 80051d8:	1c20      	adds	r0, r4, #0
 80051da:	f7fb fc43 	bl	8000a64 <__aeabi_fdiv>
 80051de:	1c03      	adds	r3, r0, #0
 80051e0:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A1 =
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	228c      	movs	r2, #140	@ 0x8c
 80051e6:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass__A2 =
        (params->mSamplingInterval /
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_SLOW + params->mSamplingInterval));
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	490b      	ldr	r1, [pc, #44]	@ (8005220 <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x64>)
 80051f2:	1c18      	adds	r0, r3, #0
 80051f4:	f7fb faac 	bl	8000750 <__aeabi_fadd>
 80051f8:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 80051fa:	1c19      	adds	r1, r3, #0
 80051fc:	1c20      	adds	r0, r4, #0
 80051fe:	f7fb fc31 	bl	8000a64 <__aeabi_fdiv>
 8005202:	1c03      	adds	r3, r0, #0
 8005204:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A2 =
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2290      	movs	r2, #144	@ 0x90
 800520a:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___Initialized = false;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2294      	movs	r2, #148	@ 0x94
 8005210:	2100      	movs	r1, #0
 8005212:	5499      	strb	r1, [r3, r2]
}
 8005214:	46c0      	nop			@ (mov r8, r8)
 8005216:	46bd      	mov	sp, r7
 8005218:	b003      	add	sp, #12
 800521a:	bd90      	pop	{r4, r7, pc}
 800521c:	41a00000 	.word	0x41a00000
 8005220:	43fa0000 	.word	0x43fa0000

08005224 <GasIndexAlgorithm__adaptive_lowpass__process>:

static float
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample) {
 8005224:	b590      	push	{r4, r7, lr}
 8005226:	b087      	sub	sp, #28
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
 800522c:	6039      	str	r1, [r7, #0]
    float abs_delta;
    float F1;
    float tau_a;
    float a3;

    if ((params->m_Adaptive_Lowpass___Initialized == false)) {
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2294      	movs	r2, #148	@ 0x94
 8005232:	5c9b      	ldrb	r3, [r3, r2]
 8005234:	2201      	movs	r2, #1
 8005236:	4053      	eors	r3, r2
 8005238:	b2db      	uxtb	r3, r3
 800523a:	2b00      	cmp	r3, #0
 800523c:	d00f      	beq.n	800525e <GasIndexAlgorithm__adaptive_lowpass__process+0x3a>
        params->m_Adaptive_Lowpass___X1 = sample;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2198      	movs	r1, #152	@ 0x98
 8005242:	683a      	ldr	r2, [r7, #0]
 8005244:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X2 = sample;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	219c      	movs	r1, #156	@ 0x9c
 800524a:	683a      	ldr	r2, [r7, #0]
 800524c:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X3 = sample;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	21a0      	movs	r1, #160	@ 0xa0
 8005252:	683a      	ldr	r2, [r7, #0]
 8005254:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___Initialized = true;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2294      	movs	r2, #148	@ 0x94
 800525a:	2101      	movs	r1, #1
 800525c:	5499      	strb	r1, [r3, r2]
    }
    params->m_Adaptive_Lowpass___X1 =
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	228c      	movs	r2, #140	@ 0x8c
 8005262:	589b      	ldr	r3, [r3, r2]
 8005264:	1c19      	adds	r1, r3, #0
 8005266:	20fe      	movs	r0, #254	@ 0xfe
 8005268:	0580      	lsls	r0, r0, #22
 800526a:	f7fb ff1f 	bl	80010ac <__aeabi_fsub>
 800526e:	1c03      	adds	r3, r0, #0
 8005270:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X1) +
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2298      	movs	r2, #152	@ 0x98
 8005276:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 8005278:	1c19      	adds	r1, r3, #0
 800527a:	f7fb fdd9 	bl	8000e30 <__aeabi_fmul>
 800527e:	1c03      	adds	r3, r0, #0
 8005280:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A1 * sample));
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	228c      	movs	r2, #140	@ 0x8c
 8005286:	589b      	ldr	r3, [r3, r2]
 8005288:	6839      	ldr	r1, [r7, #0]
 800528a:	1c18      	adds	r0, r3, #0
 800528c:	f7fb fdd0 	bl	8000e30 <__aeabi_fmul>
 8005290:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X1) +
 8005292:	1c19      	adds	r1, r3, #0
 8005294:	1c20      	adds	r0, r4, #0
 8005296:	f7fb fa5b 	bl	8000750 <__aeabi_fadd>
 800529a:	1c03      	adds	r3, r0, #0
 800529c:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X1 =
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2298      	movs	r2, #152	@ 0x98
 80052a2:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___X2 =
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2290      	movs	r2, #144	@ 0x90
 80052a8:	589b      	ldr	r3, [r3, r2]
 80052aa:	1c19      	adds	r1, r3, #0
 80052ac:	20fe      	movs	r0, #254	@ 0xfe
 80052ae:	0580      	lsls	r0, r0, #22
 80052b0:	f7fb fefc 	bl	80010ac <__aeabi_fsub>
 80052b4:	1c03      	adds	r3, r0, #0
 80052b6:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X2) +
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	229c      	movs	r2, #156	@ 0x9c
 80052bc:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 80052be:	1c19      	adds	r1, r3, #0
 80052c0:	f7fb fdb6 	bl	8000e30 <__aeabi_fmul>
 80052c4:	1c03      	adds	r3, r0, #0
 80052c6:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A2 * sample));
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2290      	movs	r2, #144	@ 0x90
 80052cc:	589b      	ldr	r3, [r3, r2]
 80052ce:	6839      	ldr	r1, [r7, #0]
 80052d0:	1c18      	adds	r0, r3, #0
 80052d2:	f7fb fdad 	bl	8000e30 <__aeabi_fmul>
 80052d6:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X2) +
 80052d8:	1c19      	adds	r1, r3, #0
 80052da:	1c20      	adds	r0, r4, #0
 80052dc:	f7fb fa38 	bl	8000750 <__aeabi_fadd>
 80052e0:	1c03      	adds	r3, r0, #0
 80052e2:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X2 =
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	229c      	movs	r2, #156	@ 0x9c
 80052e8:	5099      	str	r1, [r3, r2]
    abs_delta =
        (params->m_Adaptive_Lowpass___X1 - params->m_Adaptive_Lowpass___X2);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2298      	movs	r2, #152	@ 0x98
 80052ee:	589a      	ldr	r2, [r3, r2]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	219c      	movs	r1, #156	@ 0x9c
 80052f4:	585b      	ldr	r3, [r3, r1]
    abs_delta =
 80052f6:	1c19      	adds	r1, r3, #0
 80052f8:	1c10      	adds	r0, r2, #0
 80052fa:	f7fb fed7 	bl	80010ac <__aeabi_fsub>
 80052fe:	1c03      	adds	r3, r0, #0
 8005300:	617b      	str	r3, [r7, #20]
    if ((abs_delta < 0.f)) {
 8005302:	2100      	movs	r1, #0
 8005304:	6978      	ldr	r0, [r7, #20]
 8005306:	f7fb f8e1 	bl	80004cc <__aeabi_fcmplt>
 800530a:	1e03      	subs	r3, r0, #0
 800530c:	d004      	beq.n	8005318 <GasIndexAlgorithm__adaptive_lowpass__process+0xf4>
        abs_delta = (-1.f * abs_delta);
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	2280      	movs	r2, #128	@ 0x80
 8005312:	0612      	lsls	r2, r2, #24
 8005314:	4053      	eors	r3, r2
 8005316:	617b      	str	r3, [r7, #20]
    }
    F1 = expf((GasIndexAlgorithm_LP_ALPHA * abs_delta));
 8005318:	4923      	ldr	r1, [pc, #140]	@ (80053a8 <GasIndexAlgorithm__adaptive_lowpass__process+0x184>)
 800531a:	6978      	ldr	r0, [r7, #20]
 800531c:	f7fb fd88 	bl	8000e30 <__aeabi_fmul>
 8005320:	1c03      	adds	r3, r0, #0
 8005322:	1c18      	adds	r0, r3, #0
 8005324:	f009 ff24 	bl	800f170 <expf>
 8005328:	1c03      	adds	r3, r0, #0
 800532a:	613b      	str	r3, [r7, #16]
    tau_a = (((GasIndexAlgorithm_LP_TAU_SLOW - GasIndexAlgorithm_LP_TAU_FAST) *
 800532c:	491f      	ldr	r1, [pc, #124]	@ (80053ac <GasIndexAlgorithm__adaptive_lowpass__process+0x188>)
 800532e:	6938      	ldr	r0, [r7, #16]
 8005330:	f7fb fd7e 	bl	8000e30 <__aeabi_fmul>
 8005334:	1c03      	adds	r3, r0, #0
 8005336:	491e      	ldr	r1, [pc, #120]	@ (80053b0 <GasIndexAlgorithm__adaptive_lowpass__process+0x18c>)
 8005338:	1c18      	adds	r0, r3, #0
 800533a:	f7fb fa09 	bl	8000750 <__aeabi_fadd>
 800533e:	1c03      	adds	r3, r0, #0
 8005340:	60fb      	str	r3, [r7, #12]
              F1) +
             GasIndexAlgorithm_LP_TAU_FAST);
    a3 = (params->mSamplingInterval / (params->mSamplingInterval + tau_a));
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	685c      	ldr	r4, [r3, #4]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	68f9      	ldr	r1, [r7, #12]
 800534c:	1c18      	adds	r0, r3, #0
 800534e:	f7fb f9ff 	bl	8000750 <__aeabi_fadd>
 8005352:	1c03      	adds	r3, r0, #0
 8005354:	1c19      	adds	r1, r3, #0
 8005356:	1c20      	adds	r0, r4, #0
 8005358:	f7fb fb84 	bl	8000a64 <__aeabi_fdiv>
 800535c:	1c03      	adds	r3, r0, #0
 800535e:	60bb      	str	r3, [r7, #8]
    params->m_Adaptive_Lowpass___X3 =
        (((1.f - a3) * params->m_Adaptive_Lowpass___X3) + (a3 * sample));
 8005360:	68b9      	ldr	r1, [r7, #8]
 8005362:	20fe      	movs	r0, #254	@ 0xfe
 8005364:	0580      	lsls	r0, r0, #22
 8005366:	f7fb fea1 	bl	80010ac <__aeabi_fsub>
 800536a:	1c03      	adds	r3, r0, #0
 800536c:	1c18      	adds	r0, r3, #0
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	22a0      	movs	r2, #160	@ 0xa0
 8005372:	589b      	ldr	r3, [r3, r2]
 8005374:	1c19      	adds	r1, r3, #0
 8005376:	f7fb fd5b 	bl	8000e30 <__aeabi_fmul>
 800537a:	1c03      	adds	r3, r0, #0
 800537c:	1c1c      	adds	r4, r3, #0
 800537e:	6839      	ldr	r1, [r7, #0]
 8005380:	68b8      	ldr	r0, [r7, #8]
 8005382:	f7fb fd55 	bl	8000e30 <__aeabi_fmul>
 8005386:	1c03      	adds	r3, r0, #0
 8005388:	1c19      	adds	r1, r3, #0
 800538a:	1c20      	adds	r0, r4, #0
 800538c:	f7fb f9e0 	bl	8000750 <__aeabi_fadd>
 8005390:	1c03      	adds	r3, r0, #0
 8005392:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X3 =
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	22a0      	movs	r2, #160	@ 0xa0
 8005398:	5099      	str	r1, [r3, r2]
    return params->m_Adaptive_Lowpass___X3;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	22a0      	movs	r2, #160	@ 0xa0
 800539e:	589b      	ldr	r3, [r3, r2]
}
 80053a0:	1c18      	adds	r0, r3, #0
 80053a2:	46bd      	mov	sp, r7
 80053a4:	b007      	add	sp, #28
 80053a6:	bd90      	pop	{r4, r7, pc}
 80053a8:	be4ccccd 	.word	0xbe4ccccd
 80053ac:	43f00000 	.word	0x43f00000
 80053b0:	41a00000 	.word	0x41a00000

080053b4 <ReadRegister>:
//#define SGP_TEST_BUFFER_SIZE 6
//#define SGP_TEST_SEGMENT_SIZE 3
// static uint8_t SGP_TestBuffer[SGP_TEST_BUFFER_SIZE] = {0xBE, 0xEF, 0x92,
// 0xBE, 0xEF, 0x92};

static void ReadRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 80053b4:	b590      	push	{r4, r7, lr}
 80053b6:	b083      	sub	sp, #12
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6039      	str	r1, [r7, #0]
 80053bc:	0011      	movs	r1, r2
 80053be:	1dfb      	adds	r3, r7, #7
 80053c0:	1c02      	adds	r2, r0, #0
 80053c2:	701a      	strb	r2, [r3, #0]
 80053c4:	1dbb      	adds	r3, r7, #6
 80053c6:	1c0a      	adds	r2, r1, #0
 80053c8:	701a      	strb	r2, [r3, #0]
  if (ReadFunction != NULL) {
 80053ca:	4b08      	ldr	r3, [pc, #32]	@ (80053ec <ReadRegister+0x38>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d008      	beq.n	80053e4 <ReadRegister+0x30>
    ReadFunction(address, buffer, nrBytes);
 80053d2:	4b06      	ldr	r3, [pc, #24]	@ (80053ec <ReadRegister+0x38>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	1dba      	adds	r2, r7, #6
 80053d8:	7814      	ldrb	r4, [r2, #0]
 80053da:	6839      	ldr	r1, [r7, #0]
 80053dc:	1dfa      	adds	r2, r7, #7
 80053de:	7810      	ldrb	r0, [r2, #0]
 80053e0:	0022      	movs	r2, r4
 80053e2:	4798      	blx	r3
  }
}
 80053e4:	46c0      	nop			@ (mov r8, r8)
 80053e6:	46bd      	mov	sp, r7
 80053e8:	b003      	add	sp, #12
 80053ea:	bd90      	pop	{r4, r7, pc}
 80053ec:	20000540 	.word	0x20000540

080053f0 <WriteRegister>:

static void WriteRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 80053f0:	b590      	push	{r4, r7, lr}
 80053f2:	b083      	sub	sp, #12
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6039      	str	r1, [r7, #0]
 80053f8:	0011      	movs	r1, r2
 80053fa:	1dfb      	adds	r3, r7, #7
 80053fc:	1c02      	adds	r2, r0, #0
 80053fe:	701a      	strb	r2, [r3, #0]
 8005400:	1dbb      	adds	r3, r7, #6
 8005402:	1c0a      	adds	r2, r1, #0
 8005404:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 8005406:	4b08      	ldr	r3, [pc, #32]	@ (8005428 <WriteRegister+0x38>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d008      	beq.n	8005420 <WriteRegister+0x30>
    WriteFunction(address, buffer, nrBytes);
 800540e:	4b06      	ldr	r3, [pc, #24]	@ (8005428 <WriteRegister+0x38>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	1dba      	adds	r2, r7, #6
 8005414:	7814      	ldrb	r4, [r2, #0]
 8005416:	6839      	ldr	r1, [r7, #0]
 8005418:	1dfa      	adds	r2, r7, #7
 800541a:	7810      	ldrb	r0, [r2, #0]
 800541c:	0022      	movs	r2, r4
 800541e:	4798      	blx	r3
  }
}
 8005420:	46c0      	nop			@ (mov r8, r8)
 8005422:	46bd      	mov	sp, r7
 8005424:	b003      	add	sp, #12
 8005426:	bd90      	pop	{r4, r7, pc}
 8005428:	20000544 	.word	0x20000544

0800542c <SGP_Init>:

void SGP_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 800542c:	b580      	push	{r7, lr}
 800542e:	b082      	sub	sp, #8
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
 8005434:	6039      	str	r1, [r7, #0]
  ReadFunction = readFunction;
 8005436:	4b07      	ldr	r3, [pc, #28]	@ (8005454 <SGP_Init+0x28>)
 8005438:	687a      	ldr	r2, [r7, #4]
 800543a:	601a      	str	r2, [r3, #0]
  WriteFunction = writeFunction;
 800543c:	4b06      	ldr	r3, [pc, #24]	@ (8005458 <SGP_Init+0x2c>)
 800543e:	683a      	ldr	r2, [r7, #0]
 8005440:	601a      	str	r2, [r3, #0]
  GasIndexAlgorithm_init(&params, GasIndexAlgorithm_ALGORITHM_TYPE_VOC);
 8005442:	4b06      	ldr	r3, [pc, #24]	@ (800545c <SGP_Init+0x30>)
 8005444:	2100      	movs	r1, #0
 8005446:	0018      	movs	r0, r3
 8005448:	f7ff f930 	bl	80046ac <GasIndexAlgorithm_init>
}
 800544c:	46c0      	nop			@ (mov r8, r8)
 800544e:	46bd      	mov	sp, r7
 8005450:	b002      	add	sp, #8
 8005452:	bd80      	pop	{r7, pc}
 8005454:	20000540 	.word	0x20000540
 8005458:	20000544 	.word	0x20000544
 800545c:	20000554 	.word	0x20000554

08005460 <SGP_StartMeasurement>:

void SGP_StartMeasurement(void) {
 8005460:	b580      	push	{r7, lr}
 8005462:	af00      	add	r7, sp, #0
  WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 8005464:	4b0a      	ldr	r3, [pc, #40]	@ (8005490 <SGP_StartMeasurement+0x30>)
 8005466:	2208      	movs	r2, #8
 8005468:	0019      	movs	r1, r3
 800546a:	2059      	movs	r0, #89	@ 0x59
 800546c:	f7ff ffc0 	bl	80053f0 <WriteRegister>
  SGP_HeatUpTime = GetCurrentHalTicks() + SGP_SENSOR_HEATUP_TIME;
 8005470:	f000 fe1e 	bl	80060b0 <GetCurrentHalTicks>
 8005474:	0003      	movs	r3, r0
 8005476:	33aa      	adds	r3, #170	@ 0xaa
 8005478:	001a      	movs	r2, r3
 800547a:	4b06      	ldr	r3, [pc, #24]	@ (8005494 <SGP_StartMeasurement+0x34>)
 800547c:	601a      	str	r2, [r3, #0]
  HeatUpIsDone = false;
 800547e:	4b06      	ldr	r3, [pc, #24]	@ (8005498 <SGP_StartMeasurement+0x38>)
 8005480:	2200      	movs	r2, #0
 8005482:	701a      	strb	r2, [r3, #0]
  MeasurementIsReady = false;
 8005484:	4b05      	ldr	r3, [pc, #20]	@ (800549c <SGP_StartMeasurement+0x3c>)
 8005486:	2200      	movs	r2, #0
 8005488:	701a      	strb	r2, [r3, #0]
}
 800548a:	46c0      	nop			@ (mov r8, r8)
 800548c:	46bd      	mov	sp, r7
 800548e:	bd80      	pop	{r7, pc}
 8005490:	2000000c 	.word	0x2000000c
 8005494:	20000018 	.word	0x20000018
 8005498:	20000552 	.word	0x20000552
 800549c:	20000553 	.word	0x20000553

080054a0 <SGP_HeatedUp>:

static bool SGP_HeatedUp(void) { return TimestampIsReached(SGP_HeatUpTime); }
 80054a0:	b580      	push	{r7, lr}
 80054a2:	af00      	add	r7, sp, #0
 80054a4:	4b04      	ldr	r3, [pc, #16]	@ (80054b8 <SGP_HeatedUp+0x18>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	0018      	movs	r0, r3
 80054aa:	f000 fd1f 	bl	8005eec <TimestampIsReached>
 80054ae:	0003      	movs	r3, r0
 80054b0:	0018      	movs	r0, r3
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd80      	pop	{r7, pc}
 80054b6:	46c0      	nop			@ (mov r8, r8)
 80054b8:	20000018 	.word	0x20000018

080054bc <SGP_MeasurementReady>:

static bool SGP_MeasurementReady(void) {
 80054bc:	b580      	push	{r7, lr}
 80054be:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_IdleTime);
 80054c0:	4b04      	ldr	r3, [pc, #16]	@ (80054d4 <SGP_MeasurementReady+0x18>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	0018      	movs	r0, r3
 80054c6:	f000 fd11 	bl	8005eec <TimestampIsReached>
 80054ca:	0003      	movs	r3, r0
}
 80054cc:	0018      	movs	r0, r3
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}
 80054d2:	46c0      	nop			@ (mov r8, r8)
 80054d4:	20000020 	.word	0x20000020

080054d8 <SGP_MeasurementDone>:

static bool SGP_MeasurementDone(void) {
 80054d8:	b580      	push	{r7, lr}
 80054da:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_MeasurementDutyCycle);
 80054dc:	4b04      	ldr	r3, [pc, #16]	@ (80054f0 <SGP_MeasurementDone+0x18>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	0018      	movs	r0, r3
 80054e2:	f000 fd03 	bl	8005eec <TimestampIsReached>
 80054e6:	0003      	movs	r3, r0
}
 80054e8:	0018      	movs	r0, r3
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bd80      	pop	{r7, pc}
 80054ee:	46c0      	nop			@ (mov r8, r8)
 80054f0:	2000001c 	.word	0x2000001c

080054f4 <SGP_TurnHeaterOff>:

void SGP_TurnHeaterOff(void) {
 80054f4:	b580      	push	{r7, lr}
 80054f6:	af00      	add	r7, sp, #0
  // This command could take from 0.1 to 1ms.
  WriteRegister(SGP_I2C_ADDRESS, TurnHeaterOffBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 80054f8:	4b04      	ldr	r3, [pc, #16]	@ (800550c <SGP_TurnHeaterOff+0x18>)
 80054fa:	2202      	movs	r2, #2
 80054fc:	0019      	movs	r1, r3
 80054fe:	2059      	movs	r0, #89	@ 0x59
 8005500:	f7ff ff76 	bl	80053f0 <WriteRegister>
}
 8005504:	46c0      	nop			@ (mov r8, r8)
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}
 800550a:	46c0      	nop			@ (mov r8, r8)
 800550c:	20000004 	.word	0x20000004

08005510 <SGP_GetMeasurementValues>:

bool SGP_GetMeasurementValues(int32_t *vocIndex) {
 8005510:	b590      	push	{r4, r7, lr}
 8005512:	b087      	sub	sp, #28
 8005514:	af02      	add	r7, sp, #8
 8005516:	6078      	str	r0, [r7, #4]
  // TODO: Don't parse the values 0 since VOC index is still measuring.
  // Maybe use the
  if (SGP_HeatedUp() && !HeatUpIsDone) {
 8005518:	f7ff ffc2 	bl	80054a0 <SGP_HeatedUp>
 800551c:	1e03      	subs	r3, r0, #0
 800551e:	d01c      	beq.n	800555a <SGP_GetMeasurementValues+0x4a>
 8005520:	4b6b      	ldr	r3, [pc, #428]	@ (80056d0 <SGP_GetMeasurementValues+0x1c0>)
 8005522:	781b      	ldrb	r3, [r3, #0]
 8005524:	2201      	movs	r2, #1
 8005526:	4053      	eors	r3, r2
 8005528:	b2db      	uxtb	r3, r3
 800552a:	2b00      	cmp	r3, #0
 800552c:	d015      	beq.n	800555a <SGP_GetMeasurementValues+0x4a>
    Debug("SGP is heated up, starting the measurement.");
 800552e:	4a69      	ldr	r2, [pc, #420]	@ (80056d4 <SGP_GetMeasurementValues+0x1c4>)
 8005530:	4b69      	ldr	r3, [pc, #420]	@ (80056d8 <SGP_GetMeasurementValues+0x1c8>)
 8005532:	0019      	movs	r1, r3
 8005534:	2003      	movs	r0, #3
 8005536:	f000 fd2f 	bl	8005f98 <CreateLine>
    HeatUpIsDone = true;
 800553a:	4b65      	ldr	r3, [pc, #404]	@ (80056d0 <SGP_GetMeasurementValues+0x1c0>)
 800553c:	2201      	movs	r2, #1
 800553e:	701a      	strb	r2, [r3, #0]
    // SGP is heated up, we ignore the output and start another measurement.
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 8005540:	4b66      	ldr	r3, [pc, #408]	@ (80056dc <SGP_GetMeasurementValues+0x1cc>)
 8005542:	2208      	movs	r2, #8
 8005544:	0019      	movs	r1, r3
 8005546:	2059      	movs	r0, #89	@ 0x59
 8005548:	f7ff ff52 	bl	80053f0 <WriteRegister>
    SGP_IdleTime = GetCurrentHalTicks() + SGP_SENSOR_IDLE_TIME;
 800554c:	f000 fdb0 	bl	80060b0 <GetCurrentHalTicks>
 8005550:	0003      	movs	r3, r0
 8005552:	331e      	adds	r3, #30
 8005554:	001a      	movs	r2, r3
 8005556:	4b62      	ldr	r3, [pc, #392]	@ (80056e0 <SGP_GetMeasurementValues+0x1d0>)
 8005558:	601a      	str	r2, [r3, #0]
  }
  if (HeatUpIsDone && SGP_MeasurementReady() && !MeasurementIsReady) {
 800555a:	4b5d      	ldr	r3, [pc, #372]	@ (80056d0 <SGP_GetMeasurementValues+0x1c0>)
 800555c:	781b      	ldrb	r3, [r3, #0]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d100      	bne.n	8005564 <SGP_GetMeasurementValues+0x54>
 8005562:	e09c      	b.n	800569e <SGP_GetMeasurementValues+0x18e>
 8005564:	f7ff ffaa 	bl	80054bc <SGP_MeasurementReady>
 8005568:	1e03      	subs	r3, r0, #0
 800556a:	d100      	bne.n	800556e <SGP_GetMeasurementValues+0x5e>
 800556c:	e097      	b.n	800569e <SGP_GetMeasurementValues+0x18e>
 800556e:	4b5d      	ldr	r3, [pc, #372]	@ (80056e4 <SGP_GetMeasurementValues+0x1d4>)
 8005570:	781b      	ldrb	r3, [r3, #0]
 8005572:	2201      	movs	r2, #1
 8005574:	4053      	eors	r3, r2
 8005576:	b2db      	uxtb	r3, r3
 8005578:	2b00      	cmp	r3, #0
 800557a:	d100      	bne.n	800557e <SGP_GetMeasurementValues+0x6e>
 800557c:	e08f      	b.n	800569e <SGP_GetMeasurementValues+0x18e>
    Debug("Measurement[%i] is ready, reading buffer.", SGP_AmountOfSamplesDone + 1);
 800557e:	4b5a      	ldr	r3, [pc, #360]	@ (80056e8 <SGP_GetMeasurementValues+0x1d8>)
 8005580:	781b      	ldrb	r3, [r3, #0]
 8005582:	3301      	adds	r3, #1
 8005584:	4a59      	ldr	r2, [pc, #356]	@ (80056ec <SGP_GetMeasurementValues+0x1dc>)
 8005586:	4954      	ldr	r1, [pc, #336]	@ (80056d8 <SGP_GetMeasurementValues+0x1c8>)
 8005588:	2003      	movs	r0, #3
 800558a:	f000 fd05 	bl	8005f98 <CreateLine>
    MeasurementIsReady = true;
 800558e:	4b55      	ldr	r3, [pc, #340]	@ (80056e4 <SGP_GetMeasurementValues+0x1d4>)
 8005590:	2201      	movs	r2, #1
 8005592:	701a      	strb	r2, [r3, #0]
    // Measurement is ready to be read, also turning the heater off.
    ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH);
 8005594:	4b56      	ldr	r3, [pc, #344]	@ (80056f0 <SGP_GetMeasurementValues+0x1e0>)
 8005596:	2203      	movs	r2, #3
 8005598:	0019      	movs	r1, r3
 800559a:	2059      	movs	r0, #89	@ 0x59
 800559c:	f7ff ff0a 	bl	80053b4 <ReadRegister>
    if (!CheckCRC(SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH, SGP_MEASURE_BUFFER_RESPONSE_LENGTH)) {
 80055a0:	4b53      	ldr	r3, [pc, #332]	@ (80056f0 <SGP_GetMeasurementValues+0x1e0>)
 80055a2:	2203      	movs	r2, #3
 80055a4:	2103      	movs	r1, #3
 80055a6:	0018      	movs	r0, r3
 80055a8:	f000 f8fc 	bl	80057a4 <CheckCRC>
 80055ac:	0003      	movs	r3, r0
 80055ae:	001a      	movs	r2, r3
 80055b0:	2301      	movs	r3, #1
 80055b2:	4053      	eors	r3, r2
 80055b4:	b2db      	uxtb	r3, r3
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d02a      	beq.n	8005610 <SGP_GetMeasurementValues+0x100>
      Error("SGP measurements CRC check failed.");
 80055ba:	4a4e      	ldr	r2, [pc, #312]	@ (80056f4 <SGP_GetMeasurementValues+0x1e4>)
 80055bc:	4b4e      	ldr	r3, [pc, #312]	@ (80056f8 <SGP_GetMeasurementValues+0x1e8>)
 80055be:	0019      	movs	r1, r3
 80055c0:	2001      	movs	r0, #1
 80055c2:	f000 fce9 	bl	8005f98 <CreateLine>
      Info("SGP_Measure buffer structure:");
 80055c6:	4a4d      	ldr	r2, [pc, #308]	@ (80056fc <SGP_GetMeasurementValues+0x1ec>)
 80055c8:	4b4d      	ldr	r3, [pc, #308]	@ (8005700 <SGP_GetMeasurementValues+0x1f0>)
 80055ca:	0019      	movs	r1, r3
 80055cc:	2002      	movs	r0, #2
 80055ce:	f000 fce3 	bl	8005f98 <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 80055d2:	230f      	movs	r3, #15
 80055d4:	18fb      	adds	r3, r7, r3
 80055d6:	2200      	movs	r2, #0
 80055d8:	701a      	strb	r2, [r3, #0]
 80055da:	e012      	b.n	8005602 <SGP_GetMeasurementValues+0xf2>
        Debug("SGP_Measurement buffer[%d]: %d", i, SGP_ReadBuffer[i]);
 80055dc:	240f      	movs	r4, #15
 80055de:	193b      	adds	r3, r7, r4
 80055e0:	7818      	ldrb	r0, [r3, #0]
 80055e2:	193b      	adds	r3, r7, r4
 80055e4:	781b      	ldrb	r3, [r3, #0]
 80055e6:	4a42      	ldr	r2, [pc, #264]	@ (80056f0 <SGP_GetMeasurementValues+0x1e0>)
 80055e8:	5cd3      	ldrb	r3, [r2, r3]
 80055ea:	4a46      	ldr	r2, [pc, #280]	@ (8005704 <SGP_GetMeasurementValues+0x1f4>)
 80055ec:	493a      	ldr	r1, [pc, #232]	@ (80056d8 <SGP_GetMeasurementValues+0x1c8>)
 80055ee:	9300      	str	r3, [sp, #0]
 80055f0:	0003      	movs	r3, r0
 80055f2:	2003      	movs	r0, #3
 80055f4:	f000 fcd0 	bl	8005f98 <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 80055f8:	193b      	adds	r3, r7, r4
 80055fa:	781a      	ldrb	r2, [r3, #0]
 80055fc:	193b      	adds	r3, r7, r4
 80055fe:	3201      	adds	r2, #1
 8005600:	701a      	strb	r2, [r3, #0]
 8005602:	230f      	movs	r3, #15
 8005604:	18fb      	adds	r3, r7, r3
 8005606:	781b      	ldrb	r3, [r3, #0]
 8005608:	2b02      	cmp	r3, #2
 800560a:	d9e7      	bls.n	80055dc <SGP_GetMeasurementValues+0xcc>
      }
      return false;
 800560c:	2300      	movs	r3, #0
 800560e:	e05b      	b.n	80056c8 <SGP_GetMeasurementValues+0x1b8>
    }
    SGP_MeasurementDutyCycle = GetCurrentHalTicks() + SGP_SENSOR_DUTYCYCLE;
 8005610:	f000 fd4e 	bl	80060b0 <GetCurrentHalTicks>
 8005614:	0003      	movs	r3, r0
 8005616:	22fa      	movs	r2, #250	@ 0xfa
 8005618:	0092      	lsls	r2, r2, #2
 800561a:	189a      	adds	r2, r3, r2
 800561c:	4b3a      	ldr	r3, [pc, #232]	@ (8005708 <SGP_GetMeasurementValues+0x1f8>)
 800561e:	601a      	str	r2, [r3, #0]
    SGP_TurnHeaterOff();
 8005620:	f7ff ff68 	bl	80054f4 <SGP_TurnHeaterOff>
    SGP_AmountOfSamplesDone += 1;
 8005624:	4b30      	ldr	r3, [pc, #192]	@ (80056e8 <SGP_GetMeasurementValues+0x1d8>)
 8005626:	781b      	ldrb	r3, [r3, #0]
 8005628:	3301      	adds	r3, #1
 800562a:	b2da      	uxtb	r2, r3
 800562c:	4b2e      	ldr	r3, [pc, #184]	@ (80056e8 <SGP_GetMeasurementValues+0x1d8>)
 800562e:	701a      	strb	r2, [r3, #0]
    if (SGP_AmountOfSamplesDone >= SGP_TotalSamples) {
 8005630:	4b2d      	ldr	r3, [pc, #180]	@ (80056e8 <SGP_GetMeasurementValues+0x1d8>)
 8005632:	781a      	ldrb	r2, [r3, #0]
 8005634:	4b35      	ldr	r3, [pc, #212]	@ (800570c <SGP_GetMeasurementValues+0x1fc>)
 8005636:	781b      	ldrb	r3, [r3, #0]
 8005638:	429a      	cmp	r2, r3
 800563a:	d330      	bcc.n	800569e <SGP_GetMeasurementValues+0x18e>
      uint16_t rawSignal = ((SGP_ReadBuffer[1] << 8) | (SGP_ReadBuffer[0]));
 800563c:	4b2c      	ldr	r3, [pc, #176]	@ (80056f0 <SGP_GetMeasurementValues+0x1e0>)
 800563e:	785b      	ldrb	r3, [r3, #1]
 8005640:	021b      	lsls	r3, r3, #8
 8005642:	b21a      	sxth	r2, r3
 8005644:	4b2a      	ldr	r3, [pc, #168]	@ (80056f0 <SGP_GetMeasurementValues+0x1e0>)
 8005646:	781b      	ldrb	r3, [r3, #0]
 8005648:	b21b      	sxth	r3, r3
 800564a:	4313      	orrs	r3, r2
 800564c:	b21a      	sxth	r2, r3
 800564e:	240c      	movs	r4, #12
 8005650:	193b      	adds	r3, r7, r4
 8005652:	801a      	strh	r2, [r3, #0]
      Debug("rawSignal value: %d", rawSignal);
 8005654:	193b      	adds	r3, r7, r4
 8005656:	881b      	ldrh	r3, [r3, #0]
 8005658:	4a2d      	ldr	r2, [pc, #180]	@ (8005710 <SGP_GetMeasurementValues+0x200>)
 800565a:	491f      	ldr	r1, [pc, #124]	@ (80056d8 <SGP_GetMeasurementValues+0x1c8>)
 800565c:	2003      	movs	r0, #3
 800565e:	f000 fc9b 	bl	8005f98 <CreateLine>
      int32_t tempVocIndex = 0;
 8005662:	2300      	movs	r3, #0
 8005664:	60bb      	str	r3, [r7, #8]
      GasIndexAlgorithm_process(&params, rawSignal, &tempVocIndex);
 8005666:	193b      	adds	r3, r7, r4
 8005668:	8819      	ldrh	r1, [r3, #0]
 800566a:	2308      	movs	r3, #8
 800566c:	18fa      	adds	r2, r7, r3
 800566e:	4b29      	ldr	r3, [pc, #164]	@ (8005714 <SGP_GetMeasurementValues+0x204>)
 8005670:	0018      	movs	r0, r3
 8005672:	f7ff f87d 	bl	8004770 <GasIndexAlgorithm_process>
      Debug("vocIndex value: %d", tempVocIndex);
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	4a27      	ldr	r2, [pc, #156]	@ (8005718 <SGP_GetMeasurementValues+0x208>)
 800567a:	4917      	ldr	r1, [pc, #92]	@ (80056d8 <SGP_GetMeasurementValues+0x1c8>)
 800567c:	2003      	movs	r0, #3
 800567e:	f000 fc8b 	bl	8005f98 <CreateLine>
//      *vocIndex = 1337;
      *vocIndex = tempVocIndex;
 8005682:	68ba      	ldr	r2, [r7, #8]
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	601a      	str	r2, [r3, #0]
      SGP_AmountOfSamplesDone = 0;
 8005688:	4b17      	ldr	r3, [pc, #92]	@ (80056e8 <SGP_GetMeasurementValues+0x1d8>)
 800568a:	2200      	movs	r2, #0
 800568c:	701a      	strb	r2, [r3, #0]
      Debug("Measurement completely done.");
 800568e:	4a23      	ldr	r2, [pc, #140]	@ (800571c <SGP_GetMeasurementValues+0x20c>)
 8005690:	4b11      	ldr	r3, [pc, #68]	@ (80056d8 <SGP_GetMeasurementValues+0x1c8>)
 8005692:	0019      	movs	r1, r3
 8005694:	2003      	movs	r0, #3
 8005696:	f000 fc7f 	bl	8005f98 <CreateLine>
//      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
//        Debug("SGP_Measurement buffer[%d]: %d", i, SGP_ReadBuffer[i]);
//      }
      return true;
 800569a:	2301      	movs	r3, #1
 800569c:	e014      	b.n	80056c8 <SGP_GetMeasurementValues+0x1b8>
    }
  }
  if (SGP_MeasurementDone() && HeatUpIsDone && MeasurementIsReady) {
 800569e:	f7ff ff1b 	bl	80054d8 <SGP_MeasurementDone>
 80056a2:	1e03      	subs	r3, r0, #0
 80056a4:	d00f      	beq.n	80056c6 <SGP_GetMeasurementValues+0x1b6>
 80056a6:	4b0a      	ldr	r3, [pc, #40]	@ (80056d0 <SGP_GetMeasurementValues+0x1c0>)
 80056a8:	781b      	ldrb	r3, [r3, #0]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d00b      	beq.n	80056c6 <SGP_GetMeasurementValues+0x1b6>
 80056ae:	4b0d      	ldr	r3, [pc, #52]	@ (80056e4 <SGP_GetMeasurementValues+0x1d4>)
 80056b0:	781b      	ldrb	r3, [r3, #0]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d007      	beq.n	80056c6 <SGP_GetMeasurementValues+0x1b6>
    // Starting next measurement
    Debug("Starting next measurement.");
 80056b6:	4a1a      	ldr	r2, [pc, #104]	@ (8005720 <SGP_GetMeasurementValues+0x210>)
 80056b8:	4b07      	ldr	r3, [pc, #28]	@ (80056d8 <SGP_GetMeasurementValues+0x1c8>)
 80056ba:	0019      	movs	r1, r3
 80056bc:	2003      	movs	r0, #3
 80056be:	f000 fc6b 	bl	8005f98 <CreateLine>
    SGP_StartMeasurement();
 80056c2:	f7ff fecd 	bl	8005460 <SGP_StartMeasurement>
  }
  return false;
 80056c6:	2300      	movs	r3, #0
}
 80056c8:	0018      	movs	r0, r3
 80056ca:	46bd      	mov	sp, r7
 80056cc:	b005      	add	sp, #20
 80056ce:	bd90      	pop	{r4, r7, pc}
 80056d0:	20000552 	.word	0x20000552
 80056d4:	0800f6c0 	.word	0x0800f6c0
 80056d8:	0800f6ec 	.word	0x0800f6ec
 80056dc:	2000000c 	.word	0x2000000c
 80056e0:	20000020 	.word	0x20000020
 80056e4:	20000553 	.word	0x20000553
 80056e8:	20000551 	.word	0x20000551
 80056ec:	0800f6f0 	.word	0x0800f6f0
 80056f0:	20000548 	.word	0x20000548
 80056f4:	0800f71c 	.word	0x0800f71c
 80056f8:	0800f740 	.word	0x0800f740
 80056fc:	0800f744 	.word	0x0800f744
 8005700:	0800f764 	.word	0x0800f764
 8005704:	0800f768 	.word	0x0800f768
 8005708:	2000001c 	.word	0x2000001c
 800570c:	20000014 	.word	0x20000014
 8005710:	0800f788 	.word	0x0800f788
 8005714:	20000554 	.word	0x20000554
 8005718:	0800f79c 	.word	0x0800f79c
 800571c:	0800f7b0 	.word	0x0800f7b0
 8005720:	0800f7d0 	.word	0x0800f7d0

08005724 <SGP_DeviceConnected>:

bool SGP_DeviceConnected(void) {
 8005724:	b580      	push	{r7, lr}
 8005726:	b084      	sub	sp, #16
 8005728:	af02      	add	r7, sp, #8
  WriteRegister(SGP_I2C_ADDRESS, GetSerialNumberBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 800572a:	4b1a      	ldr	r3, [pc, #104]	@ (8005794 <SGP_DeviceConnected+0x70>)
 800572c:	2202      	movs	r2, #2
 800572e:	0019      	movs	r1, r3
 8005730:	2059      	movs	r0, #89	@ 0x59
 8005732:	f7ff fe5d 	bl	80053f0 <WriteRegister>
  HAL_Delay(1); // 1ms delay for the sensor to respond (according to datasheet)
 8005736:	2001      	movs	r0, #1
 8005738:	f001 f856 	bl	80067e8 <HAL_Delay>
  ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH);
 800573c:	4b16      	ldr	r3, [pc, #88]	@ (8005798 <SGP_DeviceConnected+0x74>)
 800573e:	2209      	movs	r2, #9
 8005740:	0019      	movs	r1, r3
 8005742:	2059      	movs	r0, #89	@ 0x59
 8005744:	f7ff fe36 	bl	80053b4 <ReadRegister>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 8005748:	1dfb      	adds	r3, r7, #7
 800574a:	2200      	movs	r2, #0
 800574c:	701a      	strb	r2, [r3, #0]
 800574e:	e011      	b.n	8005774 <SGP_DeviceConnected+0x50>
    Info("SGP_Device serial ID[%d]: 0x%X", i, SGP_ReadBuffer[i]);
 8005750:	1dfb      	adds	r3, r7, #7
 8005752:	7818      	ldrb	r0, [r3, #0]
 8005754:	1dfb      	adds	r3, r7, #7
 8005756:	781b      	ldrb	r3, [r3, #0]
 8005758:	4a0f      	ldr	r2, [pc, #60]	@ (8005798 <SGP_DeviceConnected+0x74>)
 800575a:	5cd3      	ldrb	r3, [r2, r3]
 800575c:	4a0f      	ldr	r2, [pc, #60]	@ (800579c <SGP_DeviceConnected+0x78>)
 800575e:	4910      	ldr	r1, [pc, #64]	@ (80057a0 <SGP_DeviceConnected+0x7c>)
 8005760:	9300      	str	r3, [sp, #0]
 8005762:	0003      	movs	r3, r0
 8005764:	2002      	movs	r0, #2
 8005766:	f000 fc17 	bl	8005f98 <CreateLine>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 800576a:	1dfb      	adds	r3, r7, #7
 800576c:	781a      	ldrb	r2, [r3, #0]
 800576e:	1dfb      	adds	r3, r7, #7
 8005770:	3201      	adds	r2, #1
 8005772:	701a      	strb	r2, [r3, #0]
 8005774:	1dfb      	adds	r3, r7, #7
 8005776:	781b      	ldrb	r3, [r3, #0]
 8005778:	2b08      	cmp	r3, #8
 800577a:	d9e9      	bls.n	8005750 <SGP_DeviceConnected+0x2c>
  }
  return CheckCRC(SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH, SGP_SERIAL_NUMBER_SEGMENT_SIZE);
 800577c:	4b06      	ldr	r3, [pc, #24]	@ (8005798 <SGP_DeviceConnected+0x74>)
 800577e:	2203      	movs	r2, #3
 8005780:	2109      	movs	r1, #9
 8005782:	0018      	movs	r0, r3
 8005784:	f000 f80e 	bl	80057a4 <CheckCRC>
 8005788:	0003      	movs	r3, r0
}
 800578a:	0018      	movs	r0, r3
 800578c:	46bd      	mov	sp, r7
 800578e:	b002      	add	sp, #8
 8005790:	bd80      	pop	{r7, pc}
 8005792:	46c0      	nop			@ (mov r8, r8)
 8005794:	20000008 	.word	0x20000008
 8005798:	20000548 	.word	0x20000548
 800579c:	0800f7ec 	.word	0x0800f7ec
 80057a0:	0800f764 	.word	0x0800f764

080057a4 <CheckCRC>:

static bool CheckCRC(uint8_t *data, uint8_t dataLength, uint8_t segmentSize) {
 80057a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80057a6:	b08f      	sub	sp, #60	@ 0x3c
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6278      	str	r0, [r7, #36]	@ 0x24
 80057ac:	0008      	movs	r0, r1
 80057ae:	0011      	movs	r1, r2
 80057b0:	2323      	movs	r3, #35	@ 0x23
 80057b2:	18fb      	adds	r3, r7, r3
 80057b4:	1c02      	adds	r2, r0, #0
 80057b6:	701a      	strb	r2, [r3, #0]
 80057b8:	2322      	movs	r3, #34	@ 0x22
 80057ba:	18fb      	adds	r3, r7, r3
 80057bc:	1c0a      	adds	r2, r1, #0
 80057be:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 80057c0:	2317      	movs	r3, #23
 80057c2:	2220      	movs	r2, #32
 80057c4:	189b      	adds	r3, r3, r2
 80057c6:	19db      	adds	r3, r3, r7
 80057c8:	2200      	movs	r2, #0
 80057ca:	701a      	strb	r2, [r3, #0]
 80057cc:	e09f      	b.n	800590e <CheckCRC+0x16a>
 80057ce:	466b      	mov	r3, sp
 80057d0:	001e      	movs	r6, r3
    uint8_t crcData[segmentSize];
 80057d2:	2322      	movs	r3, #34	@ 0x22
 80057d4:	18fb      	adds	r3, r7, r3
 80057d6:	781b      	ldrb	r3, [r3, #0]
 80057d8:	001a      	movs	r2, r3
 80057da:	3a01      	subs	r2, #1
 80057dc:	633a      	str	r2, [r7, #48]	@ 0x30
 80057de:	60bb      	str	r3, [r7, #8]
 80057e0:	2200      	movs	r2, #0
 80057e2:	60fa      	str	r2, [r7, #12]
 80057e4:	68b8      	ldr	r0, [r7, #8]
 80057e6:	68f9      	ldr	r1, [r7, #12]
 80057e8:	0002      	movs	r2, r0
 80057ea:	0f52      	lsrs	r2, r2, #29
 80057ec:	000c      	movs	r4, r1
 80057ee:	00e4      	lsls	r4, r4, #3
 80057f0:	61fc      	str	r4, [r7, #28]
 80057f2:	69fc      	ldr	r4, [r7, #28]
 80057f4:	4314      	orrs	r4, r2
 80057f6:	61fc      	str	r4, [r7, #28]
 80057f8:	0002      	movs	r2, r0
 80057fa:	00d2      	lsls	r2, r2, #3
 80057fc:	61ba      	str	r2, [r7, #24]
 80057fe:	603b      	str	r3, [r7, #0]
 8005800:	2200      	movs	r2, #0
 8005802:	607a      	str	r2, [r7, #4]
 8005804:	6838      	ldr	r0, [r7, #0]
 8005806:	6879      	ldr	r1, [r7, #4]
 8005808:	0002      	movs	r2, r0
 800580a:	0f52      	lsrs	r2, r2, #29
 800580c:	000c      	movs	r4, r1
 800580e:	00e4      	lsls	r4, r4, #3
 8005810:	617c      	str	r4, [r7, #20]
 8005812:	697c      	ldr	r4, [r7, #20]
 8005814:	4314      	orrs	r4, r2
 8005816:	617c      	str	r4, [r7, #20]
 8005818:	0002      	movs	r2, r0
 800581a:	00d2      	lsls	r2, r2, #3
 800581c:	613a      	str	r2, [r7, #16]
 800581e:	3307      	adds	r3, #7
 8005820:	08db      	lsrs	r3, r3, #3
 8005822:	00db      	lsls	r3, r3, #3
 8005824:	466a      	mov	r2, sp
 8005826:	1ad3      	subs	r3, r2, r3
 8005828:	469d      	mov	sp, r3
 800582a:	466b      	mov	r3, sp
 800582c:	3300      	adds	r3, #0
 800582e:	62fb      	str	r3, [r7, #44]	@ 0x2c

    for (uint8_t j = 0; j < segmentSize; j++) {
 8005830:	2316      	movs	r3, #22
 8005832:	2220      	movs	r2, #32
 8005834:	189b      	adds	r3, r3, r2
 8005836:	19db      	adds	r3, r3, r7
 8005838:	2200      	movs	r2, #0
 800583a:	701a      	strb	r2, [r3, #0]
 800583c:	e01e      	b.n	800587c <CheckCRC+0xd8>
      crcData[j] = data[i + j];
 800583e:	2317      	movs	r3, #23
 8005840:	2220      	movs	r2, #32
 8005842:	189b      	adds	r3, r3, r2
 8005844:	19db      	adds	r3, r3, r7
 8005846:	781a      	ldrb	r2, [r3, #0]
 8005848:	2116      	movs	r1, #22
 800584a:	2320      	movs	r3, #32
 800584c:	18cb      	adds	r3, r1, r3
 800584e:	19db      	adds	r3, r3, r7
 8005850:	781b      	ldrb	r3, [r3, #0]
 8005852:	18d3      	adds	r3, r2, r3
 8005854:	001a      	movs	r2, r3
 8005856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005858:	189a      	adds	r2, r3, r2
 800585a:	0008      	movs	r0, r1
 800585c:	2320      	movs	r3, #32
 800585e:	18cb      	adds	r3, r1, r3
 8005860:	19db      	adds	r3, r3, r7
 8005862:	781b      	ldrb	r3, [r3, #0]
 8005864:	7811      	ldrb	r1, [r2, #0]
 8005866:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005868:	54d1      	strb	r1, [r2, r3]
    for (uint8_t j = 0; j < segmentSize; j++) {
 800586a:	2320      	movs	r3, #32
 800586c:	18c3      	adds	r3, r0, r3
 800586e:	19db      	adds	r3, r3, r7
 8005870:	781a      	ldrb	r2, [r3, #0]
 8005872:	2320      	movs	r3, #32
 8005874:	18c3      	adds	r3, r0, r3
 8005876:	19db      	adds	r3, r3, r7
 8005878:	3201      	adds	r2, #1
 800587a:	701a      	strb	r2, [r3, #0]
 800587c:	2316      	movs	r3, #22
 800587e:	2220      	movs	r2, #32
 8005880:	189b      	adds	r3, r3, r2
 8005882:	19da      	adds	r2, r3, r7
 8005884:	2322      	movs	r3, #34	@ 0x22
 8005886:	18fb      	adds	r3, r7, r3
 8005888:	7812      	ldrb	r2, [r2, #0]
 800588a:	781b      	ldrb	r3, [r3, #0]
 800588c:	429a      	cmp	r2, r3
 800588e:	d3d6      	bcc.n	800583e <CheckCRC+0x9a>
    }
    uint8_t crc = data[i + segmentSize - 1];
 8005890:	2417      	movs	r4, #23
 8005892:	2320      	movs	r3, #32
 8005894:	18e3      	adds	r3, r4, r3
 8005896:	19db      	adds	r3, r3, r7
 8005898:	781a      	ldrb	r2, [r3, #0]
 800589a:	2322      	movs	r3, #34	@ 0x22
 800589c:	18fb      	adds	r3, r7, r3
 800589e:	781b      	ldrb	r3, [r3, #0]
 80058a0:	18d3      	adds	r3, r2, r3
 80058a2:	3b01      	subs	r3, #1
 80058a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80058a6:	18d2      	adds	r2, r2, r3
 80058a8:	250b      	movs	r5, #11
 80058aa:	2320      	movs	r3, #32
 80058ac:	18eb      	adds	r3, r5, r3
 80058ae:	19db      	adds	r3, r3, r7
 80058b0:	7812      	ldrb	r2, [r2, #0]
 80058b2:	701a      	strb	r2, [r3, #0]

    if (CalculateCRC(crcData, segmentSize - 1) != crc) {
 80058b4:	2322      	movs	r3, #34	@ 0x22
 80058b6:	18fb      	adds	r3, r7, r3
 80058b8:	781b      	ldrb	r3, [r3, #0]
 80058ba:	3b01      	subs	r3, #1
 80058bc:	b2da      	uxtb	r2, r3
 80058be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058c0:	0011      	movs	r1, r2
 80058c2:	0018      	movs	r0, r3
 80058c4:	f000 f838 	bl	8005938 <CalculateCRC>
 80058c8:	0003      	movs	r3, r0
 80058ca:	001a      	movs	r2, r3
 80058cc:	2320      	movs	r3, #32
 80058ce:	18eb      	adds	r3, r5, r3
 80058d0:	19db      	adds	r3, r3, r7
 80058d2:	781b      	ldrb	r3, [r3, #0]
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d00c      	beq.n	80058f2 <CheckCRC+0x14e>
      Error("CRC check failed for segment: %d.", i + 1);
 80058d8:	2320      	movs	r3, #32
 80058da:	18e3      	adds	r3, r4, r3
 80058dc:	19db      	adds	r3, r3, r7
 80058de:	781b      	ldrb	r3, [r3, #0]
 80058e0:	3301      	adds	r3, #1
 80058e2:	4a13      	ldr	r2, [pc, #76]	@ (8005930 <CheckCRC+0x18c>)
 80058e4:	4913      	ldr	r1, [pc, #76]	@ (8005934 <CheckCRC+0x190>)
 80058e6:	2001      	movs	r0, #1
 80058e8:	f000 fb56 	bl	8005f98 <CreateLine>
      return false;
 80058ec:	2300      	movs	r3, #0
 80058ee:	46b5      	mov	sp, r6
 80058f0:	e019      	b.n	8005926 <CheckCRC+0x182>
 80058f2:	46b5      	mov	sp, r6
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 80058f4:	2217      	movs	r2, #23
 80058f6:	2320      	movs	r3, #32
 80058f8:	18d3      	adds	r3, r2, r3
 80058fa:	19db      	adds	r3, r3, r7
 80058fc:	2120      	movs	r1, #32
 80058fe:	1852      	adds	r2, r2, r1
 8005900:	19d1      	adds	r1, r2, r7
 8005902:	2222      	movs	r2, #34	@ 0x22
 8005904:	18ba      	adds	r2, r7, r2
 8005906:	7809      	ldrb	r1, [r1, #0]
 8005908:	7812      	ldrb	r2, [r2, #0]
 800590a:	188a      	adds	r2, r1, r2
 800590c:	701a      	strb	r2, [r3, #0]
 800590e:	2317      	movs	r3, #23
 8005910:	2220      	movs	r2, #32
 8005912:	189b      	adds	r3, r3, r2
 8005914:	19da      	adds	r2, r3, r7
 8005916:	2323      	movs	r3, #35	@ 0x23
 8005918:	18fb      	adds	r3, r7, r3
 800591a:	7812      	ldrb	r2, [r2, #0]
 800591c:	781b      	ldrb	r3, [r3, #0]
 800591e:	429a      	cmp	r2, r3
 8005920:	d200      	bcs.n	8005924 <CheckCRC+0x180>
 8005922:	e754      	b.n	80057ce <CheckCRC+0x2a>
    }
  }
  return true;
 8005924:	2301      	movs	r3, #1
}
 8005926:	0018      	movs	r0, r3
 8005928:	46bd      	mov	sp, r7
 800592a:	b00f      	add	sp, #60	@ 0x3c
 800592c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800592e:	46c0      	nop			@ (mov r8, r8)
 8005930:	0800f80c 	.word	0x0800f80c
 8005934:	0800f740 	.word	0x0800f740

08005938 <CalculateCRC>:

static uint8_t CalculateCRC(uint8_t *data, uint8_t length) {
 8005938:	b580      	push	{r7, lr}
 800593a:	b084      	sub	sp, #16
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
 8005940:	000a      	movs	r2, r1
 8005942:	1cfb      	adds	r3, r7, #3
 8005944:	701a      	strb	r2, [r3, #0]
  uint8_t crc = SGP_CRC_INIT_VALUE;
 8005946:	230f      	movs	r3, #15
 8005948:	18fb      	adds	r3, r7, r3
 800594a:	22ff      	movs	r2, #255	@ 0xff
 800594c:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 800594e:	230e      	movs	r3, #14
 8005950:	18fb      	adds	r3, r7, r3
 8005952:	2200      	movs	r2, #0
 8005954:	701a      	strb	r2, [r3, #0]
 8005956:	e037      	b.n	80059c8 <CalculateCRC+0x90>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 8005958:	230e      	movs	r3, #14
 800595a:	18fb      	adds	r3, r7, r3
 800595c:	781b      	ldrb	r3, [r3, #0]
 800595e:	687a      	ldr	r2, [r7, #4]
 8005960:	18d3      	adds	r3, r2, r3
 8005962:	7819      	ldrb	r1, [r3, #0]
 8005964:	220f      	movs	r2, #15
 8005966:	18bb      	adds	r3, r7, r2
 8005968:	18ba      	adds	r2, r7, r2
 800596a:	7812      	ldrb	r2, [r2, #0]
 800596c:	404a      	eors	r2, r1
 800596e:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 8005970:	230d      	movs	r3, #13
 8005972:	18fb      	adds	r3, r7, r3
 8005974:	2200      	movs	r2, #0
 8005976:	701a      	strb	r2, [r3, #0]
 8005978:	e01b      	b.n	80059b2 <CalculateCRC+0x7a>
      // If the leftmost (most significant) bit is set
      if (crc & SGP_CRC_MSB_MASK) {
 800597a:	210f      	movs	r1, #15
 800597c:	187b      	adds	r3, r7, r1
 800597e:	781b      	ldrb	r3, [r3, #0]
 8005980:	b25b      	sxtb	r3, r3
 8005982:	2b00      	cmp	r3, #0
 8005984:	da09      	bge.n	800599a <CalculateCRC+0x62>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ SGP_CRC_POLYNOMIAL;
 8005986:	187b      	adds	r3, r7, r1
 8005988:	781b      	ldrb	r3, [r3, #0]
 800598a:	005b      	lsls	r3, r3, #1
 800598c:	b25b      	sxtb	r3, r3
 800598e:	2231      	movs	r2, #49	@ 0x31
 8005990:	4053      	eors	r3, r2
 8005992:	b25a      	sxtb	r2, r3
 8005994:	187b      	adds	r3, r7, r1
 8005996:	701a      	strb	r2, [r3, #0]
 8005998:	e005      	b.n	80059a6 <CalculateCRC+0x6e>
      } else {
        crc <<= 1;
 800599a:	230f      	movs	r3, #15
 800599c:	18fa      	adds	r2, r7, r3
 800599e:	18fb      	adds	r3, r7, r3
 80059a0:	781b      	ldrb	r3, [r3, #0]
 80059a2:	18db      	adds	r3, r3, r3
 80059a4:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 80059a6:	210d      	movs	r1, #13
 80059a8:	187b      	adds	r3, r7, r1
 80059aa:	781a      	ldrb	r2, [r3, #0]
 80059ac:	187b      	adds	r3, r7, r1
 80059ae:	3201      	adds	r2, #1
 80059b0:	701a      	strb	r2, [r3, #0]
 80059b2:	230d      	movs	r3, #13
 80059b4:	18fb      	adds	r3, r7, r3
 80059b6:	781b      	ldrb	r3, [r3, #0]
 80059b8:	2b07      	cmp	r3, #7
 80059ba:	d9de      	bls.n	800597a <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 80059bc:	210e      	movs	r1, #14
 80059be:	187b      	adds	r3, r7, r1
 80059c0:	781a      	ldrb	r2, [r3, #0]
 80059c2:	187b      	adds	r3, r7, r1
 80059c4:	3201      	adds	r2, #1
 80059c6:	701a      	strb	r2, [r3, #0]
 80059c8:	230e      	movs	r3, #14
 80059ca:	18fa      	adds	r2, r7, r3
 80059cc:	1cfb      	adds	r3, r7, #3
 80059ce:	7812      	ldrb	r2, [r2, #0]
 80059d0:	781b      	ldrb	r3, [r3, #0]
 80059d2:	429a      	cmp	r2, r3
 80059d4:	d3c0      	bcc.n	8005958 <CalculateCRC+0x20>
      }
    }
  }
  //  Info("SGP_CRC calculated value: 0x%X", crc);
  return crc;
 80059d6:	230f      	movs	r3, #15
 80059d8:	18fb      	adds	r3, r7, r3
 80059da:	781b      	ldrb	r3, [r3, #0]
}
 80059dc:	0018      	movs	r0, r3
 80059de:	46bd      	mov	sp, r7
 80059e0:	b004      	add	sp, #16
 80059e2:	bd80      	pop	{r7, pc}

080059e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80059e8:	4b07      	ldr	r3, [pc, #28]	@ (8005a08 <HAL_MspInit+0x24>)
 80059ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80059ec:	4b06      	ldr	r3, [pc, #24]	@ (8005a08 <HAL_MspInit+0x24>)
 80059ee:	2101      	movs	r1, #1
 80059f0:	430a      	orrs	r2, r1
 80059f2:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80059f4:	4b04      	ldr	r3, [pc, #16]	@ (8005a08 <HAL_MspInit+0x24>)
 80059f6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80059f8:	4b03      	ldr	r3, [pc, #12]	@ (8005a08 <HAL_MspInit+0x24>)
 80059fa:	2180      	movs	r1, #128	@ 0x80
 80059fc:	0549      	lsls	r1, r1, #21
 80059fe:	430a      	orrs	r2, r1
 8005a00:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005a02:	46c0      	nop			@ (mov r8, r8)
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bd80      	pop	{r7, pc}
 8005a08:	40021000 	.word	0x40021000

08005a0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005a10:	46c0      	nop			@ (mov r8, r8)
 8005a12:	e7fd      	b.n	8005a10 <NMI_Handler+0x4>

08005a14 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005a18:	46c0      	nop			@ (mov r8, r8)
 8005a1a:	e7fd      	b.n	8005a18 <HardFault_Handler+0x4>

08005a1c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8005a20:	46c0      	nop			@ (mov r8, r8)
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bd80      	pop	{r7, pc}

08005a26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005a26:	b580      	push	{r7, lr}
 8005a28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005a2a:	46c0      	nop			@ (mov r8, r8)
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	bd80      	pop	{r7, pc}

08005a30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005a34:	f000 febc 	bl	80067b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005a38:	46c0      	nop			@ (mov r8, r8)
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}
	...

08005a40 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8005a44:	4b05      	ldr	r3, [pc, #20]	@ (8005a5c <DMA1_Channel2_3_IRQHandler+0x1c>)
 8005a46:	0018      	movs	r0, r3
 8005a48:	f001 f935 	bl	8006cb6 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8005a4c:	4b04      	ldr	r3, [pc, #16]	@ (8005a60 <DMA1_Channel2_3_IRQHandler+0x20>)
 8005a4e:	0018      	movs	r0, r3
 8005a50:	f001 f931 	bl	8006cb6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8005a54:	46c0      	nop			@ (mov r8, r8)
 8005a56:	46bd      	mov	sp, r7
 8005a58:	bd80      	pop	{r7, pc}
 8005a5a:	46c0      	nop			@ (mov r8, r8)
 8005a5c:	200002e8 	.word	0x200002e8
 8005a60:	200002a0 	.word	0x200002a0

08005a64 <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8005a68:	4b07      	ldr	r3, [pc, #28]	@ (8005a88 <DMA1_Channel4_5_6_7_IRQHandler+0x24>)
 8005a6a:	0018      	movs	r0, r3
 8005a6c:	f001 f923 	bl	8006cb6 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_rx);
 8005a70:	4b06      	ldr	r3, [pc, #24]	@ (8005a8c <DMA1_Channel4_5_6_7_IRQHandler+0x28>)
 8005a72:	0018      	movs	r0, r3
 8005a74:	f001 f91f 	bl	8006cb6 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_tx);
 8005a78:	4b05      	ldr	r3, [pc, #20]	@ (8005a90 <DMA1_Channel4_5_6_7_IRQHandler+0x2c>)
 8005a7a:	0018      	movs	r0, r3
 8005a7c:	f001 f91b 	bl	8006cb6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 8005a80:	46c0      	nop			@ (mov r8, r8)
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd80      	pop	{r7, pc}
 8005a86:	46c0      	nop			@ (mov r8, r8)
 8005a88:	2000036c 	.word	0x2000036c
 8005a8c:	2000076c 	.word	0x2000076c
 8005a90:	200007b4 	.word	0x200007b4

08005a94 <USART4_5_IRQHandler>:

/**
  * @brief This function handles USART4 and USART5 interrupt.
  */
void USART4_5_IRQHandler(void)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART4_5_IRQn 0 */

  /* USER CODE END USART4_5_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8005a98:	4b03      	ldr	r3, [pc, #12]	@ (8005aa8 <USART4_5_IRQHandler+0x14>)
 8005a9a:	0018      	movs	r0, r3
 8005a9c:	f005 f964 	bl	800ad68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART4_5_IRQn 1 */

  /* USER CODE END USART4_5_IRQn 1 */
}
 8005aa0:	46c0      	nop			@ (mov r8, r8)
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd80      	pop	{r7, pc}
 8005aa6:	46c0      	nop			@ (mov r8, r8)
 8005aa8:	200006b4 	.word	0x200006b4

08005aac <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8005ab0:	4b09      	ldr	r3, [pc, #36]	@ (8005ad8 <I2C1_IRQHandler+0x2c>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	699a      	ldr	r2, [r3, #24]
 8005ab6:	23e0      	movs	r3, #224	@ 0xe0
 8005ab8:	00db      	lsls	r3, r3, #3
 8005aba:	4013      	ands	r3, r2
 8005abc:	d004      	beq.n	8005ac8 <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 8005abe:	4b06      	ldr	r3, [pc, #24]	@ (8005ad8 <I2C1_IRQHandler+0x2c>)
 8005ac0:	0018      	movs	r0, r3
 8005ac2:	f001 fe53 	bl	800776c <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 8005ac6:	e003      	b.n	8005ad0 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 8005ac8:	4b03      	ldr	r3, [pc, #12]	@ (8005ad8 <I2C1_IRQHandler+0x2c>)
 8005aca:	0018      	movs	r0, r3
 8005acc:	f001 fe34 	bl	8007738 <HAL_I2C_EV_IRQHandler>
}
 8005ad0:	46c0      	nop			@ (mov r8, r8)
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bd80      	pop	{r7, pc}
 8005ad6:	46c0      	nop			@ (mov r8, r8)
 8005ad8:	2000024c 	.word	0x2000024c

08005adc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	af00      	add	r7, sp, #0
  return 1;
 8005ae0:	2301      	movs	r3, #1
}
 8005ae2:	0018      	movs	r0, r3
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	bd80      	pop	{r7, pc}

08005ae8 <_kill>:

int _kill(int pid, int sig)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b082      	sub	sp, #8
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
 8005af0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8005af2:	f007 fa23 	bl	800cf3c <__errno>
 8005af6:	0003      	movs	r3, r0
 8005af8:	2216      	movs	r2, #22
 8005afa:	601a      	str	r2, [r3, #0]
  return -1;
 8005afc:	2301      	movs	r3, #1
 8005afe:	425b      	negs	r3, r3
}
 8005b00:	0018      	movs	r0, r3
 8005b02:	46bd      	mov	sp, r7
 8005b04:	b002      	add	sp, #8
 8005b06:	bd80      	pop	{r7, pc}

08005b08 <_exit>:

void _exit (int status)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b082      	sub	sp, #8
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8005b10:	2301      	movs	r3, #1
 8005b12:	425a      	negs	r2, r3
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	0011      	movs	r1, r2
 8005b18:	0018      	movs	r0, r3
 8005b1a:	f7ff ffe5 	bl	8005ae8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8005b1e:	46c0      	nop			@ (mov r8, r8)
 8005b20:	e7fd      	b.n	8005b1e <_exit+0x16>

08005b22 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005b22:	b580      	push	{r7, lr}
 8005b24:	b086      	sub	sp, #24
 8005b26:	af00      	add	r7, sp, #0
 8005b28:	60f8      	str	r0, [r7, #12]
 8005b2a:	60b9      	str	r1, [r7, #8]
 8005b2c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005b2e:	2300      	movs	r3, #0
 8005b30:	617b      	str	r3, [r7, #20]
 8005b32:	e00a      	b.n	8005b4a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8005b34:	e000      	b.n	8005b38 <_read+0x16>
 8005b36:	bf00      	nop
 8005b38:	0001      	movs	r1, r0
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	1c5a      	adds	r2, r3, #1
 8005b3e:	60ba      	str	r2, [r7, #8]
 8005b40:	b2ca      	uxtb	r2, r1
 8005b42:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005b44:	697b      	ldr	r3, [r7, #20]
 8005b46:	3301      	adds	r3, #1
 8005b48:	617b      	str	r3, [r7, #20]
 8005b4a:	697a      	ldr	r2, [r7, #20]
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	429a      	cmp	r2, r3
 8005b50:	dbf0      	blt.n	8005b34 <_read+0x12>
  }

  return len;
 8005b52:	687b      	ldr	r3, [r7, #4]
}
 8005b54:	0018      	movs	r0, r3
 8005b56:	46bd      	mov	sp, r7
 8005b58:	b006      	add	sp, #24
 8005b5a:	bd80      	pop	{r7, pc}

08005b5c <_close>:
  }
  return len;
}

int _close(int file)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b082      	sub	sp, #8
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005b64:	2301      	movs	r3, #1
 8005b66:	425b      	negs	r3, r3
}
 8005b68:	0018      	movs	r0, r3
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	b002      	add	sp, #8
 8005b6e:	bd80      	pop	{r7, pc}

08005b70 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b082      	sub	sp, #8
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
 8005b78:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	2280      	movs	r2, #128	@ 0x80
 8005b7e:	0192      	lsls	r2, r2, #6
 8005b80:	605a      	str	r2, [r3, #4]
  return 0;
 8005b82:	2300      	movs	r3, #0
}
 8005b84:	0018      	movs	r0, r3
 8005b86:	46bd      	mov	sp, r7
 8005b88:	b002      	add	sp, #8
 8005b8a:	bd80      	pop	{r7, pc}

08005b8c <_isatty>:

int _isatty(int file)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b082      	sub	sp, #8
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005b94:	2301      	movs	r3, #1
}
 8005b96:	0018      	movs	r0, r3
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	b002      	add	sp, #8
 8005b9c:	bd80      	pop	{r7, pc}

08005b9e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005b9e:	b580      	push	{r7, lr}
 8005ba0:	b084      	sub	sp, #16
 8005ba2:	af00      	add	r7, sp, #0
 8005ba4:	60f8      	str	r0, [r7, #12]
 8005ba6:	60b9      	str	r1, [r7, #8]
 8005ba8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005baa:	2300      	movs	r3, #0
}
 8005bac:	0018      	movs	r0, r3
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	b004      	add	sp, #16
 8005bb2:	bd80      	pop	{r7, pc}

08005bb4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b086      	sub	sp, #24
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005bbc:	4a14      	ldr	r2, [pc, #80]	@ (8005c10 <_sbrk+0x5c>)
 8005bbe:	4b15      	ldr	r3, [pc, #84]	@ (8005c14 <_sbrk+0x60>)
 8005bc0:	1ad3      	subs	r3, r2, r3
 8005bc2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005bc4:	697b      	ldr	r3, [r7, #20]
 8005bc6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005bc8:	4b13      	ldr	r3, [pc, #76]	@ (8005c18 <_sbrk+0x64>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d102      	bne.n	8005bd6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005bd0:	4b11      	ldr	r3, [pc, #68]	@ (8005c18 <_sbrk+0x64>)
 8005bd2:	4a12      	ldr	r2, [pc, #72]	@ (8005c1c <_sbrk+0x68>)
 8005bd4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005bd6:	4b10      	ldr	r3, [pc, #64]	@ (8005c18 <_sbrk+0x64>)
 8005bd8:	681a      	ldr	r2, [r3, #0]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	18d3      	adds	r3, r2, r3
 8005bde:	693a      	ldr	r2, [r7, #16]
 8005be0:	429a      	cmp	r2, r3
 8005be2:	d207      	bcs.n	8005bf4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005be4:	f007 f9aa 	bl	800cf3c <__errno>
 8005be8:	0003      	movs	r3, r0
 8005bea:	220c      	movs	r2, #12
 8005bec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005bee:	2301      	movs	r3, #1
 8005bf0:	425b      	negs	r3, r3
 8005bf2:	e009      	b.n	8005c08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005bf4:	4b08      	ldr	r3, [pc, #32]	@ (8005c18 <_sbrk+0x64>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005bfa:	4b07      	ldr	r3, [pc, #28]	@ (8005c18 <_sbrk+0x64>)
 8005bfc:	681a      	ldr	r2, [r3, #0]
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	18d2      	adds	r2, r2, r3
 8005c02:	4b05      	ldr	r3, [pc, #20]	@ (8005c18 <_sbrk+0x64>)
 8005c04:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8005c06:	68fb      	ldr	r3, [r7, #12]
}
 8005c08:	0018      	movs	r0, r3
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	b006      	add	sp, #24
 8005c0e:	bd80      	pop	{r7, pc}
 8005c10:	20005000 	.word	0x20005000
 8005c14:	00000400 	.word	0x00000400
 8005c18:	200005f8 	.word	0x200005f8
 8005c1c:	20001168 	.word	0x20001168

08005c20 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005c24:	46c0      	nop			@ (mov r8, r8)
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd80      	pop	{r7, pc}
	...

08005c2c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart4_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005c30:	4b14      	ldr	r3, [pc, #80]	@ (8005c84 <MX_USART1_UART_Init+0x58>)
 8005c32:	4a15      	ldr	r2, [pc, #84]	@ (8005c88 <MX_USART1_UART_Init+0x5c>)
 8005c34:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8005c36:	4b13      	ldr	r3, [pc, #76]	@ (8005c84 <MX_USART1_UART_Init+0x58>)
 8005c38:	22e1      	movs	r2, #225	@ 0xe1
 8005c3a:	0252      	lsls	r2, r2, #9
 8005c3c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005c3e:	4b11      	ldr	r3, [pc, #68]	@ (8005c84 <MX_USART1_UART_Init+0x58>)
 8005c40:	2200      	movs	r2, #0
 8005c42:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005c44:	4b0f      	ldr	r3, [pc, #60]	@ (8005c84 <MX_USART1_UART_Init+0x58>)
 8005c46:	2200      	movs	r2, #0
 8005c48:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005c4a:	4b0e      	ldr	r3, [pc, #56]	@ (8005c84 <MX_USART1_UART_Init+0x58>)
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005c50:	4b0c      	ldr	r3, [pc, #48]	@ (8005c84 <MX_USART1_UART_Init+0x58>)
 8005c52:	220c      	movs	r2, #12
 8005c54:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005c56:	4b0b      	ldr	r3, [pc, #44]	@ (8005c84 <MX_USART1_UART_Init+0x58>)
 8005c58:	2200      	movs	r2, #0
 8005c5a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005c5c:	4b09      	ldr	r3, [pc, #36]	@ (8005c84 <MX_USART1_UART_Init+0x58>)
 8005c5e:	2200      	movs	r2, #0
 8005c60:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005c62:	4b08      	ldr	r3, [pc, #32]	@ (8005c84 <MX_USART1_UART_Init+0x58>)
 8005c64:	2200      	movs	r2, #0
 8005c66:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005c68:	4b06      	ldr	r3, [pc, #24]	@ (8005c84 <MX_USART1_UART_Init+0x58>)
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005c6e:	4b05      	ldr	r3, [pc, #20]	@ (8005c84 <MX_USART1_UART_Init+0x58>)
 8005c70:	0018      	movs	r0, r3
 8005c72:	f004 fe85 	bl	800a980 <HAL_UART_Init>
 8005c76:	1e03      	subs	r3, r0, #0
 8005c78:	d001      	beq.n	8005c7e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8005c7a:	f7fe fa55 	bl	8004128 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8005c7e:	46c0      	nop			@ (mov r8, r8)
 8005c80:	46bd      	mov	sp, r7
 8005c82:	bd80      	pop	{r7, pc}
 8005c84:	200005fc 	.word	0x200005fc
 8005c88:	40013800 	.word	0x40013800

08005c8c <MX_USART4_UART_Init>:
/* USART4 init function */

void MX_USART4_UART_Init(void)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 8005c90:	4b14      	ldr	r3, [pc, #80]	@ (8005ce4 <MX_USART4_UART_Init+0x58>)
 8005c92:	4a15      	ldr	r2, [pc, #84]	@ (8005ce8 <MX_USART4_UART_Init+0x5c>)
 8005c94:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8005c96:	4b13      	ldr	r3, [pc, #76]	@ (8005ce4 <MX_USART4_UART_Init+0x58>)
 8005c98:	22e1      	movs	r2, #225	@ 0xe1
 8005c9a:	0252      	lsls	r2, r2, #9
 8005c9c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8005c9e:	4b11      	ldr	r3, [pc, #68]	@ (8005ce4 <MX_USART4_UART_Init+0x58>)
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8005ca4:	4b0f      	ldr	r3, [pc, #60]	@ (8005ce4 <MX_USART4_UART_Init+0x58>)
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8005caa:	4b0e      	ldr	r3, [pc, #56]	@ (8005ce4 <MX_USART4_UART_Init+0x58>)
 8005cac:	2200      	movs	r2, #0
 8005cae:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8005cb0:	4b0c      	ldr	r3, [pc, #48]	@ (8005ce4 <MX_USART4_UART_Init+0x58>)
 8005cb2:	220c      	movs	r2, #12
 8005cb4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005cb6:	4b0b      	ldr	r3, [pc, #44]	@ (8005ce4 <MX_USART4_UART_Init+0x58>)
 8005cb8:	2200      	movs	r2, #0
 8005cba:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8005cbc:	4b09      	ldr	r3, [pc, #36]	@ (8005ce4 <MX_USART4_UART_Init+0x58>)
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005cc2:	4b08      	ldr	r3, [pc, #32]	@ (8005ce4 <MX_USART4_UART_Init+0x58>)
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005cc8:	4b06      	ldr	r3, [pc, #24]	@ (8005ce4 <MX_USART4_UART_Init+0x58>)
 8005cca:	2200      	movs	r2, #0
 8005ccc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8005cce:	4b05      	ldr	r3, [pc, #20]	@ (8005ce4 <MX_USART4_UART_Init+0x58>)
 8005cd0:	0018      	movs	r0, r3
 8005cd2:	f004 fe55 	bl	800a980 <HAL_UART_Init>
 8005cd6:	1e03      	subs	r3, r0, #0
 8005cd8:	d001      	beq.n	8005cde <MX_USART4_UART_Init+0x52>
  {
    Error_Handler();
 8005cda:	f7fe fa25 	bl	8004128 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 8005cde:	46c0      	nop			@ (mov r8, r8)
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	bd80      	pop	{r7, pc}
 8005ce4:	200006b4 	.word	0x200006b4
 8005ce8:	40004c00 	.word	0x40004c00

08005cec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005cec:	b590      	push	{r4, r7, lr}
 8005cee:	b08b      	sub	sp, #44	@ 0x2c
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005cf4:	2414      	movs	r4, #20
 8005cf6:	193b      	adds	r3, r7, r4
 8005cf8:	0018      	movs	r0, r3
 8005cfa:	2314      	movs	r3, #20
 8005cfc:	001a      	movs	r2, r3
 8005cfe:	2100      	movs	r1, #0
 8005d00:	f007 f8ac 	bl	800ce5c <memset>
  if(uartHandle->Instance==USART1)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4a70      	ldr	r2, [pc, #448]	@ (8005ecc <HAL_UART_MspInit+0x1e0>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d12b      	bne.n	8005d66 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005d0e:	4b70      	ldr	r3, [pc, #448]	@ (8005ed0 <HAL_UART_MspInit+0x1e4>)
 8005d10:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005d12:	4b6f      	ldr	r3, [pc, #444]	@ (8005ed0 <HAL_UART_MspInit+0x1e4>)
 8005d14:	2180      	movs	r1, #128	@ 0x80
 8005d16:	01c9      	lsls	r1, r1, #7
 8005d18:	430a      	orrs	r2, r1
 8005d1a:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005d1c:	4b6c      	ldr	r3, [pc, #432]	@ (8005ed0 <HAL_UART_MspInit+0x1e4>)
 8005d1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d20:	4b6b      	ldr	r3, [pc, #428]	@ (8005ed0 <HAL_UART_MspInit+0x1e4>)
 8005d22:	2101      	movs	r1, #1
 8005d24:	430a      	orrs	r2, r1
 8005d26:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005d28:	4b69      	ldr	r3, [pc, #420]	@ (8005ed0 <HAL_UART_MspInit+0x1e4>)
 8005d2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d2c:	2201      	movs	r2, #1
 8005d2e:	4013      	ands	r3, r2
 8005d30:	613b      	str	r3, [r7, #16]
 8005d32:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8005d34:	193b      	adds	r3, r7, r4
 8005d36:	22c0      	movs	r2, #192	@ 0xc0
 8005d38:	00d2      	lsls	r2, r2, #3
 8005d3a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d3c:	0021      	movs	r1, r4
 8005d3e:	187b      	adds	r3, r7, r1
 8005d40:	2202      	movs	r2, #2
 8005d42:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d44:	187b      	adds	r3, r7, r1
 8005d46:	2200      	movs	r2, #0
 8005d48:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005d4a:	187b      	adds	r3, r7, r1
 8005d4c:	2203      	movs	r2, #3
 8005d4e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8005d50:	187b      	adds	r3, r7, r1
 8005d52:	2204      	movs	r2, #4
 8005d54:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005d56:	187a      	adds	r2, r7, r1
 8005d58:	23a0      	movs	r3, #160	@ 0xa0
 8005d5a:	05db      	lsls	r3, r3, #23
 8005d5c:	0011      	movs	r1, r2
 8005d5e:	0018      	movs	r0, r3
 8005d60:	f001 f892 	bl	8006e88 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }
}
 8005d64:	e0ad      	b.n	8005ec2 <HAL_UART_MspInit+0x1d6>
  else if(uartHandle->Instance==USART4)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a5a      	ldr	r2, [pc, #360]	@ (8005ed4 <HAL_UART_MspInit+0x1e8>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d000      	beq.n	8005d72 <HAL_UART_MspInit+0x86>
 8005d70:	e0a7      	b.n	8005ec2 <HAL_UART_MspInit+0x1d6>
    __HAL_RCC_USART4_CLK_ENABLE();
 8005d72:	4b57      	ldr	r3, [pc, #348]	@ (8005ed0 <HAL_UART_MspInit+0x1e4>)
 8005d74:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005d76:	4b56      	ldr	r3, [pc, #344]	@ (8005ed0 <HAL_UART_MspInit+0x1e4>)
 8005d78:	2180      	movs	r1, #128	@ 0x80
 8005d7a:	0309      	lsls	r1, r1, #12
 8005d7c:	430a      	orrs	r2, r1
 8005d7e:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005d80:	4b53      	ldr	r3, [pc, #332]	@ (8005ed0 <HAL_UART_MspInit+0x1e4>)
 8005d82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d84:	4b52      	ldr	r3, [pc, #328]	@ (8005ed0 <HAL_UART_MspInit+0x1e4>)
 8005d86:	2101      	movs	r1, #1
 8005d88:	430a      	orrs	r2, r1
 8005d8a:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005d8c:	4b50      	ldr	r3, [pc, #320]	@ (8005ed0 <HAL_UART_MspInit+0x1e4>)
 8005d8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d90:	2201      	movs	r2, #1
 8005d92:	4013      	ands	r3, r2
 8005d94:	60fb      	str	r3, [r7, #12]
 8005d96:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005d98:	4b4d      	ldr	r3, [pc, #308]	@ (8005ed0 <HAL_UART_MspInit+0x1e4>)
 8005d9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d9c:	4b4c      	ldr	r3, [pc, #304]	@ (8005ed0 <HAL_UART_MspInit+0x1e4>)
 8005d9e:	2104      	movs	r1, #4
 8005da0:	430a      	orrs	r2, r1
 8005da2:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005da4:	4b4a      	ldr	r3, [pc, #296]	@ (8005ed0 <HAL_UART_MspInit+0x1e4>)
 8005da6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005da8:	2204      	movs	r2, #4
 8005daa:	4013      	ands	r3, r2
 8005dac:	60bb      	str	r3, [r7, #8]
 8005dae:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8005db0:	2414      	movs	r4, #20
 8005db2:	193b      	adds	r3, r7, r4
 8005db4:	2202      	movs	r2, #2
 8005db6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005db8:	193b      	adds	r3, r7, r4
 8005dba:	2202      	movs	r2, #2
 8005dbc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005dbe:	193b      	adds	r3, r7, r4
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005dc4:	193b      	adds	r3, r7, r4
 8005dc6:	2203      	movs	r2, #3
 8005dc8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 8005dca:	193b      	adds	r3, r7, r4
 8005dcc:	2206      	movs	r2, #6
 8005dce:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005dd0:	193a      	adds	r2, r7, r4
 8005dd2:	23a0      	movs	r3, #160	@ 0xa0
 8005dd4:	05db      	lsls	r3, r3, #23
 8005dd6:	0011      	movs	r1, r2
 8005dd8:	0018      	movs	r0, r3
 8005dda:	f001 f855 	bl	8006e88 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005dde:	0021      	movs	r1, r4
 8005de0:	187b      	adds	r3, r7, r1
 8005de2:	2280      	movs	r2, #128	@ 0x80
 8005de4:	00d2      	lsls	r2, r2, #3
 8005de6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005de8:	187b      	adds	r3, r7, r1
 8005dea:	2202      	movs	r2, #2
 8005dec:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005dee:	187b      	adds	r3, r7, r1
 8005df0:	2200      	movs	r2, #0
 8005df2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005df4:	187b      	adds	r3, r7, r1
 8005df6:	2203      	movs	r2, #3
 8005df8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 8005dfa:	187b      	adds	r3, r7, r1
 8005dfc:	2206      	movs	r2, #6
 8005dfe:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005e00:	187b      	adds	r3, r7, r1
 8005e02:	4a35      	ldr	r2, [pc, #212]	@ (8005ed8 <HAL_UART_MspInit+0x1ec>)
 8005e04:	0019      	movs	r1, r3
 8005e06:	0010      	movs	r0, r2
 8005e08:	f001 f83e 	bl	8006e88 <HAL_GPIO_Init>
    hdma_usart4_rx.Instance = DMA1_Channel6;
 8005e0c:	4b33      	ldr	r3, [pc, #204]	@ (8005edc <HAL_UART_MspInit+0x1f0>)
 8005e0e:	4a34      	ldr	r2, [pc, #208]	@ (8005ee0 <HAL_UART_MspInit+0x1f4>)
 8005e10:	601a      	str	r2, [r3, #0]
    hdma_usart4_rx.Init.Request = DMA_REQUEST_12;
 8005e12:	4b32      	ldr	r3, [pc, #200]	@ (8005edc <HAL_UART_MspInit+0x1f0>)
 8005e14:	220c      	movs	r2, #12
 8005e16:	605a      	str	r2, [r3, #4]
    hdma_usart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005e18:	4b30      	ldr	r3, [pc, #192]	@ (8005edc <HAL_UART_MspInit+0x1f0>)
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	609a      	str	r2, [r3, #8]
    hdma_usart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005e1e:	4b2f      	ldr	r3, [pc, #188]	@ (8005edc <HAL_UART_MspInit+0x1f0>)
 8005e20:	2200      	movs	r2, #0
 8005e22:	60da      	str	r2, [r3, #12]
    hdma_usart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005e24:	4b2d      	ldr	r3, [pc, #180]	@ (8005edc <HAL_UART_MspInit+0x1f0>)
 8005e26:	2280      	movs	r2, #128	@ 0x80
 8005e28:	611a      	str	r2, [r3, #16]
    hdma_usart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005e2a:	4b2c      	ldr	r3, [pc, #176]	@ (8005edc <HAL_UART_MspInit+0x1f0>)
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	615a      	str	r2, [r3, #20]
    hdma_usart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005e30:	4b2a      	ldr	r3, [pc, #168]	@ (8005edc <HAL_UART_MspInit+0x1f0>)
 8005e32:	2200      	movs	r2, #0
 8005e34:	619a      	str	r2, [r3, #24]
    hdma_usart4_rx.Init.Mode = DMA_NORMAL;
 8005e36:	4b29      	ldr	r3, [pc, #164]	@ (8005edc <HAL_UART_MspInit+0x1f0>)
 8005e38:	2200      	movs	r2, #0
 8005e3a:	61da      	str	r2, [r3, #28]
    hdma_usart4_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8005e3c:	4b27      	ldr	r3, [pc, #156]	@ (8005edc <HAL_UART_MspInit+0x1f0>)
 8005e3e:	22c0      	movs	r2, #192	@ 0xc0
 8005e40:	0192      	lsls	r2, r2, #6
 8005e42:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_rx) != HAL_OK)
 8005e44:	4b25      	ldr	r3, [pc, #148]	@ (8005edc <HAL_UART_MspInit+0x1f0>)
 8005e46:	0018      	movs	r0, r3
 8005e48:	f000 fdd0 	bl	80069ec <HAL_DMA_Init>
 8005e4c:	1e03      	subs	r3, r0, #0
 8005e4e:	d001      	beq.n	8005e54 <HAL_UART_MspInit+0x168>
      Error_Handler();
 8005e50:	f7fe f96a 	bl	8004128 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart4_rx);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	4a21      	ldr	r2, [pc, #132]	@ (8005edc <HAL_UART_MspInit+0x1f0>)
 8005e58:	675a      	str	r2, [r3, #116]	@ 0x74
 8005e5a:	4b20      	ldr	r3, [pc, #128]	@ (8005edc <HAL_UART_MspInit+0x1f0>)
 8005e5c:	687a      	ldr	r2, [r7, #4]
 8005e5e:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_usart4_tx.Instance = DMA1_Channel7;
 8005e60:	4b20      	ldr	r3, [pc, #128]	@ (8005ee4 <HAL_UART_MspInit+0x1f8>)
 8005e62:	4a21      	ldr	r2, [pc, #132]	@ (8005ee8 <HAL_UART_MspInit+0x1fc>)
 8005e64:	601a      	str	r2, [r3, #0]
    hdma_usart4_tx.Init.Request = DMA_REQUEST_12;
 8005e66:	4b1f      	ldr	r3, [pc, #124]	@ (8005ee4 <HAL_UART_MspInit+0x1f8>)
 8005e68:	220c      	movs	r2, #12
 8005e6a:	605a      	str	r2, [r3, #4]
    hdma_usart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005e6c:	4b1d      	ldr	r3, [pc, #116]	@ (8005ee4 <HAL_UART_MspInit+0x1f8>)
 8005e6e:	2210      	movs	r2, #16
 8005e70:	609a      	str	r2, [r3, #8]
    hdma_usart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005e72:	4b1c      	ldr	r3, [pc, #112]	@ (8005ee4 <HAL_UART_MspInit+0x1f8>)
 8005e74:	2200      	movs	r2, #0
 8005e76:	60da      	str	r2, [r3, #12]
    hdma_usart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005e78:	4b1a      	ldr	r3, [pc, #104]	@ (8005ee4 <HAL_UART_MspInit+0x1f8>)
 8005e7a:	2280      	movs	r2, #128	@ 0x80
 8005e7c:	611a      	str	r2, [r3, #16]
    hdma_usart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005e7e:	4b19      	ldr	r3, [pc, #100]	@ (8005ee4 <HAL_UART_MspInit+0x1f8>)
 8005e80:	2200      	movs	r2, #0
 8005e82:	615a      	str	r2, [r3, #20]
    hdma_usart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005e84:	4b17      	ldr	r3, [pc, #92]	@ (8005ee4 <HAL_UART_MspInit+0x1f8>)
 8005e86:	2200      	movs	r2, #0
 8005e88:	619a      	str	r2, [r3, #24]
    hdma_usart4_tx.Init.Mode = DMA_NORMAL;
 8005e8a:	4b16      	ldr	r3, [pc, #88]	@ (8005ee4 <HAL_UART_MspInit+0x1f8>)
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	61da      	str	r2, [r3, #28]
    hdma_usart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005e90:	4b14      	ldr	r3, [pc, #80]	@ (8005ee4 <HAL_UART_MspInit+0x1f8>)
 8005e92:	2200      	movs	r2, #0
 8005e94:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_tx) != HAL_OK)
 8005e96:	4b13      	ldr	r3, [pc, #76]	@ (8005ee4 <HAL_UART_MspInit+0x1f8>)
 8005e98:	0018      	movs	r0, r3
 8005e9a:	f000 fda7 	bl	80069ec <HAL_DMA_Init>
 8005e9e:	1e03      	subs	r3, r0, #0
 8005ea0:	d001      	beq.n	8005ea6 <HAL_UART_MspInit+0x1ba>
      Error_Handler();
 8005ea2:	f7fe f941 	bl	8004128 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart4_tx);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	4a0e      	ldr	r2, [pc, #56]	@ (8005ee4 <HAL_UART_MspInit+0x1f8>)
 8005eaa:	671a      	str	r2, [r3, #112]	@ 0x70
 8005eac:	4b0d      	ldr	r3, [pc, #52]	@ (8005ee4 <HAL_UART_MspInit+0x1f8>)
 8005eae:	687a      	ldr	r2, [r7, #4]
 8005eb0:	629a      	str	r2, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART4_5_IRQn, 0, 0);
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	2100      	movs	r1, #0
 8005eb6:	200e      	movs	r0, #14
 8005eb8:	f000 fd66 	bl	8006988 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
 8005ebc:	200e      	movs	r0, #14
 8005ebe:	f000 fd78 	bl	80069b2 <HAL_NVIC_EnableIRQ>
}
 8005ec2:	46c0      	nop			@ (mov r8, r8)
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	b00b      	add	sp, #44	@ 0x2c
 8005ec8:	bd90      	pop	{r4, r7, pc}
 8005eca:	46c0      	nop			@ (mov r8, r8)
 8005ecc:	40013800 	.word	0x40013800
 8005ed0:	40021000 	.word	0x40021000
 8005ed4:	40004c00 	.word	0x40004c00
 8005ed8:	50000800 	.word	0x50000800
 8005edc:	2000076c 	.word	0x2000076c
 8005ee0:	4002006c 	.word	0x4002006c
 8005ee4:	200007b4 	.word	0x200007b4
 8005ee8:	40020080 	.word	0x40020080

08005eec <TimestampIsReached>:
VerboseLevel CurrentVerboseLevel = VERBOSE_ALL;
#define TEXTBUFFER_LEN 1024

extern UART_HandleTypeDef huart1;

bool TimestampIsReached(uint32_t timestamp) {
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b086      	sub	sp, #24
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
  uint32_t now = HAL_GetTick();
 8005ef4:	f000 fc6e 	bl	80067d4 <HAL_GetTick>
 8005ef8:	0003      	movs	r3, r0
 8005efa:	617b      	str	r3, [r7, #20]
  const uint32_t HALF_TIME = 0x7FFFFFFF; // ~25 days max timestamp delay
 8005efc:	4b1c      	ldr	r3, [pc, #112]	@ (8005f70 <TimestampIsReached+0x84>)
 8005efe:	613b      	str	r3, [r7, #16]

  // Ensures that the difference between now and timestamp is less than half of
  // the maximum value of the counter. This confirms that the timestamp is not
  // too far in the past.
  bool noOverflow = (now >= timestamp && now - timestamp < HALF_TIME);
 8005f00:	697a      	ldr	r2, [r7, #20]
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	429a      	cmp	r2, r3
 8005f06:	d307      	bcc.n	8005f18 <TimestampIsReached+0x2c>
 8005f08:	697a      	ldr	r2, [r7, #20]
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	1ad3      	subs	r3, r2, r3
 8005f0e:	693a      	ldr	r2, [r7, #16]
 8005f10:	429a      	cmp	r2, r3
 8005f12:	d901      	bls.n	8005f18 <TimestampIsReached+0x2c>
 8005f14:	2201      	movs	r2, #1
 8005f16:	e000      	b.n	8005f1a <TimestampIsReached+0x2e>
 8005f18:	2200      	movs	r2, #0
 8005f1a:	230f      	movs	r3, #15
 8005f1c:	18fb      	adds	r3, r7, r3
 8005f1e:	701a      	strb	r2, [r3, #0]
 8005f20:	781a      	ldrb	r2, [r3, #0]
 8005f22:	2101      	movs	r1, #1
 8005f24:	400a      	ands	r2, r1
 8005f26:	701a      	strb	r2, [r3, #0]
  // Ensures that the timestamp is so far ahead that it would have wrapped
  // around past the maximum value of the counter indicating an overflow
  // scenario.
  bool overflowWithTimestampAhead =
      (now < timestamp && timestamp - now > HALF_TIME);
 8005f28:	697a      	ldr	r2, [r7, #20]
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	429a      	cmp	r2, r3
 8005f2e:	d207      	bcs.n	8005f40 <TimestampIsReached+0x54>
 8005f30:	687a      	ldr	r2, [r7, #4]
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	1ad3      	subs	r3, r2, r3
 8005f36:	693a      	ldr	r2, [r7, #16]
 8005f38:	429a      	cmp	r2, r3
 8005f3a:	d201      	bcs.n	8005f40 <TimestampIsReached+0x54>
 8005f3c:	2201      	movs	r2, #1
 8005f3e:	e000      	b.n	8005f42 <TimestampIsReached+0x56>
 8005f40:	2200      	movs	r2, #0
  bool overflowWithTimestampAhead =
 8005f42:	200e      	movs	r0, #14
 8005f44:	183b      	adds	r3, r7, r0
 8005f46:	701a      	strb	r2, [r3, #0]
 8005f48:	781a      	ldrb	r2, [r3, #0]
 8005f4a:	2101      	movs	r1, #1
 8005f4c:	400a      	ands	r2, r1
 8005f4e:	701a      	strb	r2, [r3, #0]

  if (noOverflow || overflowWithTimestampAhead) {
 8005f50:	230f      	movs	r3, #15
 8005f52:	18fb      	adds	r3, r7, r3
 8005f54:	781b      	ldrb	r3, [r3, #0]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d103      	bne.n	8005f62 <TimestampIsReached+0x76>
 8005f5a:	183b      	adds	r3, r7, r0
 8005f5c:	781b      	ldrb	r3, [r3, #0]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d001      	beq.n	8005f66 <TimestampIsReached+0x7a>
    // Timestamp has been reached
    return true;
 8005f62:	2301      	movs	r3, #1
 8005f64:	e000      	b.n	8005f68 <TimestampIsReached+0x7c>
  }

  // Timestamp not yet reached
  return false;
 8005f66:	2300      	movs	r3, #0
}
 8005f68:	0018      	movs	r0, r3
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	b006      	add	sp, #24
 8005f6e:	bd80      	pop	{r7, pc}
 8005f70:	7fffffff 	.word	0x7fffffff

08005f74 <AddTimestamp>:

static void AddTimestamp(char *stamp) {
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b082      	sub	sp, #8
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
  sprintf(stamp, "[%08lu] ", (uint32_t)HAL_GetTick());
 8005f7c:	f000 fc2a 	bl	80067d4 <HAL_GetTick>
 8005f80:	0002      	movs	r2, r0
 8005f82:	4904      	ldr	r1, [pc, #16]	@ (8005f94 <AddTimestamp+0x20>)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	0018      	movs	r0, r3
 8005f88:	f006 fec4 	bl	800cd14 <siprintf>
}
 8005f8c:	46c0      	nop			@ (mov r8, r8)
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	b002      	add	sp, #8
 8005f92:	bd80      	pop	{r7, pc}
 8005f94:	0800f8b4 	.word	0x0800f8b4

08005f98 <CreateLine>:

void CreateLine(VerboseLevel verboseLevel, char *tag, char *format, ...) {
 8005f98:	b40c      	push	{r2, r3}
 8005f9a:	b5b0      	push	{r4, r5, r7, lr}
 8005f9c:	4c2b      	ldr	r4, [pc, #172]	@ (800604c <CreateLine+0xb4>)
 8005f9e:	44a5      	add	sp, r4
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	0002      	movs	r2, r0
 8005fa4:	6039      	str	r1, [r7, #0]
 8005fa6:	4b2a      	ldr	r3, [pc, #168]	@ (8006050 <CreateLine+0xb8>)
 8005fa8:	2182      	movs	r1, #130	@ 0x82
 8005faa:	00c9      	lsls	r1, r1, #3
 8005fac:	185b      	adds	r3, r3, r1
 8005fae:	19db      	adds	r3, r3, r7
 8005fb0:	701a      	strb	r2, [r3, #0]

  if (verboseLevel > CurrentVerboseLevel) {
 8005fb2:	4b28      	ldr	r3, [pc, #160]	@ (8006054 <CreateLine+0xbc>)
 8005fb4:	781b      	ldrb	r3, [r3, #0]
 8005fb6:	4a26      	ldr	r2, [pc, #152]	@ (8006050 <CreateLine+0xb8>)
 8005fb8:	1852      	adds	r2, r2, r1
 8005fba:	19d2      	adds	r2, r2, r7
 8005fbc:	7812      	ldrb	r2, [r2, #0]
 8005fbe:	429a      	cmp	r2, r3
 8005fc0:	d83b      	bhi.n	800603a <CreateLine+0xa2>
    return;
  }
  char textBuffer[TEXTBUFFER_LEN];

  // Format the initial part of the message with the tag and timestamp
  sprintf(textBuffer, "%s ", tag);
 8005fc2:	683a      	ldr	r2, [r7, #0]
 8005fc4:	4924      	ldr	r1, [pc, #144]	@ (8006058 <CreateLine+0xc0>)
 8005fc6:	240c      	movs	r4, #12
 8005fc8:	193b      	adds	r3, r7, r4
 8005fca:	0018      	movs	r0, r3
 8005fcc:	f006 fea2 	bl	800cd14 <siprintf>

  if (CurrentVerboseLevel > VERBOSE_MINIMAL) {
 8005fd0:	4b20      	ldr	r3, [pc, #128]	@ (8006054 <CreateLine+0xbc>)
 8005fd2:	781b      	ldrb	r3, [r3, #0]
 8005fd4:	2b01      	cmp	r3, #1
 8005fd6:	d909      	bls.n	8005fec <CreateLine+0x54>
    AddTimestamp(&textBuffer[strlen(textBuffer)]);
 8005fd8:	193b      	adds	r3, r7, r4
 8005fda:	0018      	movs	r0, r3
 8005fdc:	f7fa f894 	bl	8000108 <strlen>
 8005fe0:	0002      	movs	r2, r0
 8005fe2:	193b      	adds	r3, r7, r4
 8005fe4:	189b      	adds	r3, r3, r2
 8005fe6:	0018      	movs	r0, r3
 8005fe8:	f7ff ffc4 	bl	8005f74 <AddTimestamp>
  }
  int lineOffset = strlen(textBuffer);
 8005fec:	240c      	movs	r4, #12
 8005fee:	193b      	adds	r3, r7, r4
 8005ff0:	0018      	movs	r0, r3
 8005ff2:	f7fa f889 	bl	8000108 <strlen>
 8005ff6:	0003      	movs	r3, r0
 8005ff8:	4918      	ldr	r1, [pc, #96]	@ (800605c <CreateLine+0xc4>)
 8005ffa:	187a      	adds	r2, r7, r1
 8005ffc:	6013      	str	r3, [r2, #0]

  // Format the rest of the message with the variable arguments
  va_list args;
  va_start(args, format);
 8005ffe:	4b18      	ldr	r3, [pc, #96]	@ (8006060 <CreateLine+0xc8>)
 8006000:	2508      	movs	r5, #8
 8006002:	195b      	adds	r3, r3, r5
 8006004:	19db      	adds	r3, r3, r7
 8006006:	60bb      	str	r3, [r7, #8]
  vsnprintf(&textBuffer[lineOffset], TEXTBUFFER_LEN - lineOffset, format, args);
 8006008:	193a      	adds	r2, r7, r4
 800600a:	187b      	adds	r3, r7, r1
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	18d0      	adds	r0, r2, r3
 8006010:	187b      	adds	r3, r7, r1
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	2280      	movs	r2, #128	@ 0x80
 8006016:	00d2      	lsls	r2, r2, #3
 8006018:	1ad3      	subs	r3, r2, r3
 800601a:	0019      	movs	r1, r3
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	2283      	movs	r2, #131	@ 0x83
 8006020:	00d2      	lsls	r2, r2, #3
 8006022:	1952      	adds	r2, r2, r5
 8006024:	19d2      	adds	r2, r2, r7
 8006026:	6812      	ldr	r2, [r2, #0]
 8006028:	f006 ff0c 	bl	800ce44 <vsniprintf>
  va_end(args);

  // Print the final formatted message
  printf("%s\r\n", textBuffer);
 800602c:	193a      	adds	r2, r7, r4
 800602e:	4b0d      	ldr	r3, [pc, #52]	@ (8006064 <CreateLine+0xcc>)
 8006030:	0011      	movs	r1, r2
 8006032:	0018      	movs	r0, r3
 8006034:	f006 fe5e 	bl	800ccf4 <iprintf>
 8006038:	e000      	b.n	800603c <CreateLine+0xa4>
    return;
 800603a:	46c0      	nop			@ (mov r8, r8)
}
 800603c:	46bd      	mov	sp, r7
 800603e:	2382      	movs	r3, #130	@ 0x82
 8006040:	00db      	lsls	r3, r3, #3
 8006042:	449d      	add	sp, r3
 8006044:	bcb0      	pop	{r4, r5, r7}
 8006046:	bc08      	pop	{r3}
 8006048:	b002      	add	sp, #8
 800604a:	4718      	bx	r3
 800604c:	fffffbf0 	.word	0xfffffbf0
 8006050:	fffffbf7 	.word	0xfffffbf7
 8006054:	20000028 	.word	0x20000028
 8006058:	0800f8c0 	.word	0x0800f8c0
 800605c:	0000040c 	.word	0x0000040c
 8006060:	0000041c 	.word	0x0000041c
 8006064:	0800f8c4 	.word	0x0800f8c4

08006068 <_write>:

int _write(int fd, const void *buf, size_t count) {
 8006068:	b580      	push	{r7, lr}
 800606a:	b084      	sub	sp, #16
 800606c:	af00      	add	r7, sp, #0
 800606e:	60f8      	str	r0, [r7, #12]
 8006070:	60b9      	str	r1, [r7, #8]
 8006072:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart1, buf, count, 100);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	b29a      	uxth	r2, r3
 8006078:	68b9      	ldr	r1, [r7, #8]
 800607a:	4804      	ldr	r0, [pc, #16]	@ (800608c <_write+0x24>)
 800607c:	2364      	movs	r3, #100	@ 0x64
 800607e:	f004 fce5 	bl	800aa4c <HAL_UART_Transmit>
  return count;
 8006082:	687b      	ldr	r3, [r7, #4]
}
 8006084:	0018      	movs	r0, r3
 8006086:	46bd      	mov	sp, r7
 8006088:	b004      	add	sp, #16
 800608a:	bd80      	pop	{r7, pc}
 800608c:	200005fc 	.word	0x200005fc

08006090 <SetVerboseLevel>:

void SetVerboseLevel(VerboseLevel level) { CurrentVerboseLevel = level; }
 8006090:	b580      	push	{r7, lr}
 8006092:	b082      	sub	sp, #8
 8006094:	af00      	add	r7, sp, #0
 8006096:	0002      	movs	r2, r0
 8006098:	1dfb      	adds	r3, r7, #7
 800609a:	701a      	strb	r2, [r3, #0]
 800609c:	4b03      	ldr	r3, [pc, #12]	@ (80060ac <SetVerboseLevel+0x1c>)
 800609e:	1dfa      	adds	r2, r7, #7
 80060a0:	7812      	ldrb	r2, [r2, #0]
 80060a2:	701a      	strb	r2, [r3, #0]
 80060a4:	46c0      	nop			@ (mov r8, r8)
 80060a6:	46bd      	mov	sp, r7
 80060a8:	b002      	add	sp, #8
 80060aa:	bd80      	pop	{r7, pc}
 80060ac:	20000028 	.word	0x20000028

080060b0 <GetCurrentHalTicks>:

uint32_t GetCurrentHalTicks(void) {
 80060b0:	b580      	push	{r7, lr}
 80060b2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80060b4:	f000 fb8e 	bl	80067d4 <HAL_GetTick>
 80060b8:	0003      	movs	r3, r0
}
 80060ba:	0018      	movs	r0, r3
 80060bc:	46bd      	mov	sp, r7
 80060be:	bd80      	pop	{r7, pc}

080060c0 <BinaryReleaseInfo>:

void BinaryReleaseInfo() {
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b082      	sub	sp, #8
 80060c4:	af02      	add	r7, sp, #8
  Info("=-=-=-=-=-=WOTS Gadget started.=-=-=-=-=-=");
 80060c6:	4a0f      	ldr	r2, [pc, #60]	@ (8006104 <BinaryReleaseInfo+0x44>)
 80060c8:	4b0f      	ldr	r3, [pc, #60]	@ (8006108 <BinaryReleaseInfo+0x48>)
 80060ca:	0019      	movs	r1, r3
 80060cc:	2002      	movs	r0, #2
 80060ce:	f7ff ff63 	bl	8005f98 <CreateLine>
  Info("Build on: %s at %s", __DATE__, __TIME__);
 80060d2:	480e      	ldr	r0, [pc, #56]	@ (800610c <BinaryReleaseInfo+0x4c>)
 80060d4:	4a0e      	ldr	r2, [pc, #56]	@ (8006110 <BinaryReleaseInfo+0x50>)
 80060d6:	490c      	ldr	r1, [pc, #48]	@ (8006108 <BinaryReleaseInfo+0x48>)
 80060d8:	4b0e      	ldr	r3, [pc, #56]	@ (8006114 <BinaryReleaseInfo+0x54>)
 80060da:	9300      	str	r3, [sp, #0]
 80060dc:	0003      	movs	r3, r0
 80060de:	2002      	movs	r0, #2
 80060e0:	f7ff ff5a 	bl	8005f98 <CreateLine>
  // Format: YY'w'WWv
  Info("Git: 24w28a");
 80060e4:	4a0c      	ldr	r2, [pc, #48]	@ (8006118 <BinaryReleaseInfo+0x58>)
 80060e6:	4b08      	ldr	r3, [pc, #32]	@ (8006108 <BinaryReleaseInfo+0x48>)
 80060e8:	0019      	movs	r1, r3
 80060ea:	2002      	movs	r0, #2
 80060ec:	f7ff ff54 	bl	8005f98 <CreateLine>
  Info("Software version: %s", SRC_VERSION);
 80060f0:	4b0a      	ldr	r3, [pc, #40]	@ (800611c <BinaryReleaseInfo+0x5c>)
 80060f2:	4a0b      	ldr	r2, [pc, #44]	@ (8006120 <BinaryReleaseInfo+0x60>)
 80060f4:	4904      	ldr	r1, [pc, #16]	@ (8006108 <BinaryReleaseInfo+0x48>)
 80060f6:	2002      	movs	r0, #2
 80060f8:	f7ff ff4e 	bl	8005f98 <CreateLine>
}
 80060fc:	46c0      	nop			@ (mov r8, r8)
 80060fe:	46bd      	mov	sp, r7
 8006100:	bd80      	pop	{r7, pc}
 8006102:	46c0      	nop			@ (mov r8, r8)
 8006104:	0800f8cc 	.word	0x0800f8cc
 8006108:	0800f8f8 	.word	0x0800f8f8
 800610c:	0800f8fc 	.word	0x0800f8fc
 8006110:	0800f908 	.word	0x0800f908
 8006114:	0800f91c 	.word	0x0800f91c
 8006118:	0800f928 	.word	0x0800f928
 800611c:	0800f934 	.word	0x0800f934
 8006120:	0800f93c 	.word	0x0800f93c

08006124 <ReadRegister>:
static bool MeasurementDone = false;

//static uint32_t SensorNextRunTime = HIDS_SENSOR_WAIT_TIME_HIGH;
//static uint32_t SensorWaitTime_ms = HIDS_SENSOR_WAIT_TIME_HIGH;

static void ReadRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8006124:	b590      	push	{r4, r7, lr}
 8006126:	b083      	sub	sp, #12
 8006128:	af00      	add	r7, sp, #0
 800612a:	6039      	str	r1, [r7, #0]
 800612c:	0011      	movs	r1, r2
 800612e:	1dfb      	adds	r3, r7, #7
 8006130:	1c02      	adds	r2, r0, #0
 8006132:	701a      	strb	r2, [r3, #0]
 8006134:	1dbb      	adds	r3, r7, #6
 8006136:	1c0a      	adds	r2, r1, #0
 8006138:	701a      	strb	r2, [r3, #0]
	if (ReadFunction != NULL) {
 800613a:	4b08      	ldr	r3, [pc, #32]	@ (800615c <ReadRegister+0x38>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d008      	beq.n	8006154 <ReadRegister+0x30>
		ReadFunction(address, buffer, nrBytes);
 8006142:	4b06      	ldr	r3, [pc, #24]	@ (800615c <ReadRegister+0x38>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	1dba      	adds	r2, r7, #6
 8006148:	7814      	ldrb	r4, [r2, #0]
 800614a:	6839      	ldr	r1, [r7, #0]
 800614c:	1dfa      	adds	r2, r7, #7
 800614e:	7810      	ldrb	r0, [r2, #0]
 8006150:	0022      	movs	r2, r4
 8006152:	4798      	blx	r3
	}
}
 8006154:	46c0      	nop			@ (mov r8, r8)
 8006156:	46bd      	mov	sp, r7
 8006158:	b003      	add	sp, #12
 800615a:	bd90      	pop	{r4, r7, pc}
 800615c:	200007fc 	.word	0x200007fc

08006160 <WriteRegister>:

static void WriteRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8006160:	b590      	push	{r4, r7, lr}
 8006162:	b083      	sub	sp, #12
 8006164:	af00      	add	r7, sp, #0
 8006166:	6039      	str	r1, [r7, #0]
 8006168:	0011      	movs	r1, r2
 800616a:	1dfb      	adds	r3, r7, #7
 800616c:	1c02      	adds	r2, r0, #0
 800616e:	701a      	strb	r2, [r3, #0]
 8006170:	1dbb      	adds	r3, r7, #6
 8006172:	1c0a      	adds	r2, r1, #0
 8006174:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 8006176:	4b08      	ldr	r3, [pc, #32]	@ (8006198 <WriteRegister+0x38>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d008      	beq.n	8006190 <WriteRegister+0x30>
    WriteFunction(address, buffer, nrBytes);
 800617e:	4b06      	ldr	r3, [pc, #24]	@ (8006198 <WriteRegister+0x38>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	1dba      	adds	r2, r7, #6
 8006184:	7814      	ldrb	r4, [r2, #0]
 8006186:	6839      	ldr	r1, [r7, #0]
 8006188:	1dfa      	adds	r2, r7, #7
 800618a:	7810      	ldrb	r0, [r2, #0]
 800618c:	0022      	movs	r2, r4
 800618e:	4798      	blx	r3
  }
}
 8006190:	46c0      	nop			@ (mov r8, r8)
 8006192:	46bd      	mov	sp, r7
 8006194:	b003      	add	sp, #12
 8006196:	bd90      	pop	{r4, r7, pc}
 8006198:	20000800 	.word	0x20000800

0800619c <CalculateCRC>:

static uint8_t CalculateCRC(uint8_t* data, uint8_t length) {
 800619c:	b580      	push	{r7, lr}
 800619e:	b084      	sub	sp, #16
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
 80061a4:	000a      	movs	r2, r1
 80061a6:	1cfb      	adds	r3, r7, #3
 80061a8:	701a      	strb	r2, [r3, #0]
  uint8_t crc = HIDS_CRC_INIT_VALUE;
 80061aa:	230f      	movs	r3, #15
 80061ac:	18fb      	adds	r3, r7, r3
 80061ae:	22ff      	movs	r2, #255	@ 0xff
 80061b0:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 80061b2:	230e      	movs	r3, #14
 80061b4:	18fb      	adds	r3, r7, r3
 80061b6:	2200      	movs	r2, #0
 80061b8:	701a      	strb	r2, [r3, #0]
 80061ba:	e037      	b.n	800622c <CalculateCRC+0x90>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 80061bc:	230e      	movs	r3, #14
 80061be:	18fb      	adds	r3, r7, r3
 80061c0:	781b      	ldrb	r3, [r3, #0]
 80061c2:	687a      	ldr	r2, [r7, #4]
 80061c4:	18d3      	adds	r3, r2, r3
 80061c6:	7819      	ldrb	r1, [r3, #0]
 80061c8:	220f      	movs	r2, #15
 80061ca:	18bb      	adds	r3, r7, r2
 80061cc:	18ba      	adds	r2, r7, r2
 80061ce:	7812      	ldrb	r2, [r2, #0]
 80061d0:	404a      	eors	r2, r1
 80061d2:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 80061d4:	230d      	movs	r3, #13
 80061d6:	18fb      	adds	r3, r7, r3
 80061d8:	2200      	movs	r2, #0
 80061da:	701a      	strb	r2, [r3, #0]
 80061dc:	e01b      	b.n	8006216 <CalculateCRC+0x7a>
      // If the leftmost (most significant) bit is set
      if (crc & HIDS_CRC_MSB_MASK) {
 80061de:	210f      	movs	r1, #15
 80061e0:	187b      	adds	r3, r7, r1
 80061e2:	781b      	ldrb	r3, [r3, #0]
 80061e4:	b25b      	sxtb	r3, r3
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	da09      	bge.n	80061fe <CalculateCRC+0x62>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ HIDS_CRC_POLYNOMIAL;
 80061ea:	187b      	adds	r3, r7, r1
 80061ec:	781b      	ldrb	r3, [r3, #0]
 80061ee:	005b      	lsls	r3, r3, #1
 80061f0:	b25b      	sxtb	r3, r3
 80061f2:	2231      	movs	r2, #49	@ 0x31
 80061f4:	4053      	eors	r3, r2
 80061f6:	b25a      	sxtb	r2, r3
 80061f8:	187b      	adds	r3, r7, r1
 80061fa:	701a      	strb	r2, [r3, #0]
 80061fc:	e005      	b.n	800620a <CalculateCRC+0x6e>
      } else {
          crc <<= 1;
 80061fe:	230f      	movs	r3, #15
 8006200:	18fa      	adds	r2, r7, r3
 8006202:	18fb      	adds	r3, r7, r3
 8006204:	781b      	ldrb	r3, [r3, #0]
 8006206:	18db      	adds	r3, r3, r3
 8006208:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 800620a:	210d      	movs	r1, #13
 800620c:	187b      	adds	r3, r7, r1
 800620e:	781a      	ldrb	r2, [r3, #0]
 8006210:	187b      	adds	r3, r7, r1
 8006212:	3201      	adds	r2, #1
 8006214:	701a      	strb	r2, [r3, #0]
 8006216:	230d      	movs	r3, #13
 8006218:	18fb      	adds	r3, r7, r3
 800621a:	781b      	ldrb	r3, [r3, #0]
 800621c:	2b07      	cmp	r3, #7
 800621e:	d9de      	bls.n	80061de <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 8006220:	210e      	movs	r1, #14
 8006222:	187b      	adds	r3, r7, r1
 8006224:	781a      	ldrb	r2, [r3, #0]
 8006226:	187b      	adds	r3, r7, r1
 8006228:	3201      	adds	r2, #1
 800622a:	701a      	strb	r2, [r3, #0]
 800622c:	230e      	movs	r3, #14
 800622e:	18fa      	adds	r2, r7, r3
 8006230:	1cfb      	adds	r3, r7, #3
 8006232:	7812      	ldrb	r2, [r2, #0]
 8006234:	781b      	ldrb	r3, [r3, #0]
 8006236:	429a      	cmp	r2, r3
 8006238:	d3c0      	bcc.n	80061bc <CalculateCRC+0x20>
      }
    }
  }

//  Debug("CRC calculated value: 0x%X", crc);
  return crc;
 800623a:	230f      	movs	r3, #15
 800623c:	18fb      	adds	r3, r7, r3
 800623e:	781b      	ldrb	r3, [r3, #0]
}
 8006240:	0018      	movs	r0, r3
 8006242:	46bd      	mov	sp, r7
 8006244:	b004      	add	sp, #16
 8006246:	bd80      	pop	{r7, pc}

08006248 <HIDS_Init>:
  uint8_t heaterReg = HeaterMode;
  WriteRegister(HIDS_I2C_ADDRESS, &heaterReg, 1);
  Info("Started the heater in mode: %d", heaterReg);
}

void HIDS_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 8006248:	b580      	push	{r7, lr}
 800624a:	b082      	sub	sp, #8
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
 8006250:	6039      	str	r1, [r7, #0]
	ReadFunction = readFunction;
 8006252:	4b0a      	ldr	r3, [pc, #40]	@ (800627c <HIDS_Init+0x34>)
 8006254:	687a      	ldr	r2, [r7, #4]
 8006256:	601a      	str	r2, [r3, #0]
	WriteFunction = writeFunction;
 8006258:	4b09      	ldr	r3, [pc, #36]	@ (8006280 <HIDS_Init+0x38>)
 800625a:	683a      	ldr	r2, [r7, #0]
 800625c:	601a      	str	r2, [r3, #0]
	HIDS_SetMeasurementMode(MeasureMode);
 800625e:	4b09      	ldr	r3, [pc, #36]	@ (8006284 <HIDS_Init+0x3c>)
 8006260:	781b      	ldrb	r3, [r3, #0]
 8006262:	0018      	movs	r0, r3
 8006264:	f000 f8d0 	bl	8006408 <HIDS_SetMeasurementMode>
	HIDS_SetHeaterMode(HeaterMode);
 8006268:	4b07      	ldr	r3, [pc, #28]	@ (8006288 <HIDS_Init+0x40>)
 800626a:	781b      	ldrb	r3, [r3, #0]
 800626c:	0018      	movs	r0, r3
 800626e:	f000 f82b 	bl	80062c8 <HIDS_SetHeaterMode>
//	HIDS_EnableHeater();
	// TODO: Enable heater after measurement is done and humidity is above a certain percentage, use formula.
}
 8006272:	46c0      	nop			@ (mov r8, r8)
 8006274:	46bd      	mov	sp, r7
 8006276:	b002      	add	sp, #8
 8006278:	bd80      	pop	{r7, pc}
 800627a:	46c0      	nop			@ (mov r8, r8)
 800627c:	200007fc 	.word	0x200007fc
 8006280:	20000800 	.word	0x20000800
 8006284:	2000002a 	.word	0x2000002a
 8006288:	20000029 	.word	0x20000029

0800628c <HIDS_StartMeasurement>:

void HIDS_StartMeasurement(void) {
 800628c:	b580      	push	{r7, lr}
 800628e:	af00      	add	r7, sp, #0
  HIDS_NextRunTime = GetCurrentHalTicks() + HIDS_Interval_ms;
 8006290:	f7ff ff0e 	bl	80060b0 <GetCurrentHalTicks>
 8006294:	0002      	movs	r2, r0
 8006296:	4b08      	ldr	r3, [pc, #32]	@ (80062b8 <HIDS_StartMeasurement+0x2c>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	18d2      	adds	r2, r2, r3
 800629c:	4b07      	ldr	r3, [pc, #28]	@ (80062bc <HIDS_StartMeasurement+0x30>)
 800629e:	601a      	str	r2, [r3, #0]
  WriteRegister(HIDS_I2C_ADDRESS, &MeasureMode, 1);
 80062a0:	4b07      	ldr	r3, [pc, #28]	@ (80062c0 <HIDS_StartMeasurement+0x34>)
 80062a2:	2201      	movs	r2, #1
 80062a4:	0019      	movs	r1, r3
 80062a6:	2044      	movs	r0, #68	@ 0x44
 80062a8:	f7ff ff5a 	bl	8006160 <WriteRegister>
  MeasurementDone = false;
 80062ac:	4b05      	ldr	r3, [pc, #20]	@ (80062c4 <HIDS_StartMeasurement+0x38>)
 80062ae:	2200      	movs	r2, #0
 80062b0:	701a      	strb	r2, [r3, #0]
}
 80062b2:	46c0      	nop			@ (mov r8, r8)
 80062b4:	46bd      	mov	sp, r7
 80062b6:	bd80      	pop	{r7, pc}
 80062b8:	20000030 	.word	0x20000030
 80062bc:	2000002c 	.word	0x2000002c
 80062c0:	2000002a 	.word	0x2000002a
 80062c4:	20000812 	.word	0x20000812

080062c8 <HIDS_SetHeaterMode>:

void HIDS_SetMeasurementDuration(uint32_t duration) {
  HIDS_MeasurementDuration = duration;
}

void HIDS_SetHeaterMode(HIDSHeaterModes modeHeater) {
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b082      	sub	sp, #8
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	0002      	movs	r2, r0
 80062d0:	1dfb      	adds	r3, r7, #7
 80062d2:	701a      	strb	r2, [r3, #0]
  HeaterMode = modeHeater;
 80062d4:	4b03      	ldr	r3, [pc, #12]	@ (80062e4 <HIDS_SetHeaterMode+0x1c>)
 80062d6:	1dfa      	adds	r2, r7, #7
 80062d8:	7812      	ldrb	r2, [r2, #0]
 80062da:	701a      	strb	r2, [r3, #0]
}
 80062dc:	46c0      	nop			@ (mov r8, r8)
 80062de:	46bd      	mov	sp, r7
 80062e0:	b002      	add	sp, #8
 80062e2:	bd80      	pop	{r7, pc}
 80062e4:	20000029 	.word	0x20000029

080062e8 <CheckCRC>:

static bool CheckCRC(uint8_t* data) {
 80062e8:	b590      	push	{r4, r7, lr}
 80062ea:	b085      	sub	sp, #20
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
  // Data format: 2 bytes for data, followed by an 8-bit CRC

	// Check CRC for the first segment
	uint8_t crcData1[2] = {data[0], data[1]};
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	781a      	ldrb	r2, [r3, #0]
 80062f4:	210c      	movs	r1, #12
 80062f6:	187b      	adds	r3, r7, r1
 80062f8:	701a      	strb	r2, [r3, #0]
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	785a      	ldrb	r2, [r3, #1]
 80062fe:	187b      	adds	r3, r7, r1
 8006300:	705a      	strb	r2, [r3, #1]
	uint8_t crc1 = data[2];
 8006302:	240f      	movs	r4, #15
 8006304:	193b      	adds	r3, r7, r4
 8006306:	687a      	ldr	r2, [r7, #4]
 8006308:	7892      	ldrb	r2, [r2, #2]
 800630a:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData1, 2) != crc1) {
 800630c:	187b      	adds	r3, r7, r1
 800630e:	2102      	movs	r1, #2
 8006310:	0018      	movs	r0, r3
 8006312:	f7ff ff43 	bl	800619c <CalculateCRC>
 8006316:	0003      	movs	r3, r0
 8006318:	001a      	movs	r2, r3
 800631a:	193b      	adds	r3, r7, r4
 800631c:	781b      	ldrb	r3, [r3, #0]
 800631e:	4293      	cmp	r3, r2
 8006320:	d007      	beq.n	8006332 <CheckCRC+0x4a>
		Error("CRC check failed for the first segment.");
 8006322:	4a17      	ldr	r2, [pc, #92]	@ (8006380 <CheckCRC+0x98>)
 8006324:	4b17      	ldr	r3, [pc, #92]	@ (8006384 <CheckCRC+0x9c>)
 8006326:	0019      	movs	r1, r3
 8006328:	2001      	movs	r0, #1
 800632a:	f7ff fe35 	bl	8005f98 <CreateLine>
		return false;
 800632e:	2300      	movs	r3, #0
 8006330:	e021      	b.n	8006376 <CheckCRC+0x8e>
	}

	// Check CRC for the second segment
	uint8_t crcData2[2] = {data[3], data[4]};
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	78da      	ldrb	r2, [r3, #3]
 8006336:	2108      	movs	r1, #8
 8006338:	187b      	adds	r3, r7, r1
 800633a:	701a      	strb	r2, [r3, #0]
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	791a      	ldrb	r2, [r3, #4]
 8006340:	187b      	adds	r3, r7, r1
 8006342:	705a      	strb	r2, [r3, #1]
	uint8_t crc2 = data[5];
 8006344:	240e      	movs	r4, #14
 8006346:	193b      	adds	r3, r7, r4
 8006348:	687a      	ldr	r2, [r7, #4]
 800634a:	7952      	ldrb	r2, [r2, #5]
 800634c:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData2, 2) != crc2) {
 800634e:	187b      	adds	r3, r7, r1
 8006350:	2102      	movs	r1, #2
 8006352:	0018      	movs	r0, r3
 8006354:	f7ff ff22 	bl	800619c <CalculateCRC>
 8006358:	0003      	movs	r3, r0
 800635a:	001a      	movs	r2, r3
 800635c:	193b      	adds	r3, r7, r4
 800635e:	781b      	ldrb	r3, [r3, #0]
 8006360:	4293      	cmp	r3, r2
 8006362:	d007      	beq.n	8006374 <CheckCRC+0x8c>
		Error("CRC check failed for the second segment.");
 8006364:	4a08      	ldr	r2, [pc, #32]	@ (8006388 <CheckCRC+0xa0>)
 8006366:	4b07      	ldr	r3, [pc, #28]	@ (8006384 <CheckCRC+0x9c>)
 8006368:	0019      	movs	r1, r3
 800636a:	2001      	movs	r0, #1
 800636c:	f7ff fe14 	bl	8005f98 <CreateLine>
		return false;
 8006370:	2300      	movs	r3, #0
 8006372:	e000      	b.n	8006376 <CheckCRC+0x8e>
	}
	return true;
 8006374:	2301      	movs	r3, #1
}
 8006376:	0018      	movs	r0, r3
 8006378:	46bd      	mov	sp, r7
 800637a:	b005      	add	sp, #20
 800637c:	bd90      	pop	{r4, r7, pc}
 800637e:	46c0      	nop			@ (mov r8, r8)
 8006380:	0800f978 	.word	0x0800f978
 8006384:	0800f9a0 	.word	0x0800f9a0
 8006388:	0800f9a4 	.word	0x0800f9a4

0800638c <HIDS_DeviceConnected>:

bool HIDS_DeviceConnected(void) {
 800638c:	b580      	push	{r7, lr}
 800638e:	b084      	sub	sp, #16
 8006390:	af02      	add	r7, sp, #8
	uint8_t serialReg = HIDS_SERIAL_NUMBER_REG;
 8006392:	1dbb      	adds	r3, r7, #6
 8006394:	2289      	movs	r2, #137	@ 0x89
 8006396:	701a      	strb	r2, [r3, #0]
	WriteRegister(HIDS_I2C_ADDRESS, &serialReg, 1);
 8006398:	1dbb      	adds	r3, r7, #6
 800639a:	2201      	movs	r2, #1
 800639c:	0019      	movs	r1, r3
 800639e:	2044      	movs	r0, #68	@ 0x44
 80063a0:	f7ff fede 	bl	8006160 <WriteRegister>
	HAL_Delay(30);
 80063a4:	201e      	movs	r0, #30
 80063a6:	f000 fa1f 	bl	80067e8 <HAL_Delay>
	ReadRegister(HIDS_I2C_ADDRESS, SerialBuffer, HIDS_SERIAL_BUFFER_LENGTH);
 80063aa:	4b14      	ldr	r3, [pc, #80]	@ (80063fc <HIDS_DeviceConnected+0x70>)
 80063ac:	2206      	movs	r2, #6
 80063ae:	0019      	movs	r1, r3
 80063b0:	2044      	movs	r0, #68	@ 0x44
 80063b2:	f7ff feb7 	bl	8006124 <ReadRegister>

	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 80063b6:	1dfb      	adds	r3, r7, #7
 80063b8:	2200      	movs	r2, #0
 80063ba:	701a      	strb	r2, [r3, #0]
 80063bc:	e011      	b.n	80063e2 <HIDS_DeviceConnected+0x56>
		Info("HIDS_Device serial ID[%d]: 0x%X", i, SerialBuffer[i]);
 80063be:	1dfb      	adds	r3, r7, #7
 80063c0:	7818      	ldrb	r0, [r3, #0]
 80063c2:	1dfb      	adds	r3, r7, #7
 80063c4:	781b      	ldrb	r3, [r3, #0]
 80063c6:	4a0d      	ldr	r2, [pc, #52]	@ (80063fc <HIDS_DeviceConnected+0x70>)
 80063c8:	5cd3      	ldrb	r3, [r2, r3]
 80063ca:	4a0d      	ldr	r2, [pc, #52]	@ (8006400 <HIDS_DeviceConnected+0x74>)
 80063cc:	490d      	ldr	r1, [pc, #52]	@ (8006404 <HIDS_DeviceConnected+0x78>)
 80063ce:	9300      	str	r3, [sp, #0]
 80063d0:	0003      	movs	r3, r0
 80063d2:	2002      	movs	r0, #2
 80063d4:	f7ff fde0 	bl	8005f98 <CreateLine>
	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 80063d8:	1dfb      	adds	r3, r7, #7
 80063da:	781a      	ldrb	r2, [r3, #0]
 80063dc:	1dfb      	adds	r3, r7, #7
 80063de:	3201      	adds	r2, #1
 80063e0:	701a      	strb	r2, [r3, #0]
 80063e2:	1dfb      	adds	r3, r7, #7
 80063e4:	781b      	ldrb	r3, [r3, #0]
 80063e6:	2b05      	cmp	r3, #5
 80063e8:	d9e9      	bls.n	80063be <HIDS_DeviceConnected+0x32>
	}
	return CheckCRC(SerialBuffer);
 80063ea:	4b04      	ldr	r3, [pc, #16]	@ (80063fc <HIDS_DeviceConnected+0x70>)
 80063ec:	0018      	movs	r0, r3
 80063ee:	f7ff ff7b 	bl	80062e8 <CheckCRC>
 80063f2:	0003      	movs	r3, r0
}
 80063f4:	0018      	movs	r0, r3
 80063f6:	46bd      	mov	sp, r7
 80063f8:	b002      	add	sp, #8
 80063fa:	bd80      	pop	{r7, pc}
 80063fc:	20000804 	.word	0x20000804
 8006400:	0800f9d0 	.word	0x0800f9d0
 8006404:	0800f974 	.word	0x0800f974

08006408 <HIDS_SetMeasurementMode>:

void HIDS_SetMeasurementMode(HIDSMeasureModes modeMeasure) {
 8006408:	b580      	push	{r7, lr}
 800640a:	b082      	sub	sp, #8
 800640c:	af00      	add	r7, sp, #0
 800640e:	0002      	movs	r2, r0
 8006410:	1dfb      	adds	r3, r7, #7
 8006412:	701a      	strb	r2, [r3, #0]
	MeasureMode = modeMeasure;
 8006414:	4b03      	ldr	r3, [pc, #12]	@ (8006424 <HIDS_SetMeasurementMode+0x1c>)
 8006416:	1dfa      	adds	r2, r7, #7
 8006418:	7812      	ldrb	r2, [r2, #0]
 800641a:	701a      	strb	r2, [r3, #0]
}
 800641c:	46c0      	nop			@ (mov r8, r8)
 800641e:	46bd      	mov	sp, r7
 8006420:	b002      	add	sp, #8
 8006422:	bd80      	pop	{r7, pc}
 8006424:	2000002a 	.word	0x2000002a

08006428 <HIDS_MeasurementReady>:

bool HIDS_MeasurementReady(void) {
 8006428:	b580      	push	{r7, lr}
 800642a:	af00      	add	r7, sp, #0
  return TimestampIsReached(HIDS_NextRunTime);
 800642c:	4b04      	ldr	r3, [pc, #16]	@ (8006440 <HIDS_MeasurementReady+0x18>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	0018      	movs	r0, r3
 8006432:	f7ff fd5b 	bl	8005eec <TimestampIsReached>
 8006436:	0003      	movs	r3, r0
}
 8006438:	0018      	movs	r0, r3
 800643a:	46bd      	mov	sp, r7
 800643c:	bd80      	pop	{r7, pc}
 800643e:	46c0      	nop			@ (mov r8, r8)
 8006440:	2000002c 	.word	0x2000002c

08006444 <HIDS_GetMeasurementValues>:
void HIDS_SoftReset(void){
  uint8_t resetReg = HIDS_SOFT_RESET_REG;
  WriteRegister(HIDS_I2C_ADDRESS, &resetReg, 1);
}

bool HIDS_GetMeasurementValues(float* humidity, float* temperature) {
 8006444:	b590      	push	{r4, r7, lr}
 8006446:	b08d      	sub	sp, #52	@ 0x34
 8006448:	af02      	add	r7, sp, #8
 800644a:	6078      	str	r0, [r7, #4]
 800644c:	6039      	str	r1, [r7, #0]
  // TODO: Store last measurement humidity for sgp40 measurement.
  if(MeasurementDone) return true;
 800644e:	4b87      	ldr	r3, [pc, #540]	@ (800666c <HIDS_GetMeasurementValues+0x228>)
 8006450:	781b      	ldrb	r3, [r3, #0]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d001      	beq.n	800645a <HIDS_GetMeasurementValues+0x16>
 8006456:	2301      	movs	r3, #1
 8006458:	e103      	b.n	8006662 <HIDS_GetMeasurementValues+0x21e>
  if(!HIDS_MeasurementReady()) return false;
 800645a:	f7ff ffe5 	bl	8006428 <HIDS_MeasurementReady>
 800645e:	0003      	movs	r3, r0
 8006460:	001a      	movs	r2, r3
 8006462:	2301      	movs	r3, #1
 8006464:	4053      	eors	r3, r2
 8006466:	b2db      	uxtb	r3, r3
 8006468:	2b00      	cmp	r3, #0
 800646a:	d001      	beq.n	8006470 <HIDS_GetMeasurementValues+0x2c>
 800646c:	2300      	movs	r3, #0
 800646e:	e0f8      	b.n	8006662 <HIDS_GetMeasurementValues+0x21e>
  uint32_t amountOfMeasurements = HIDS_MeasurementDuration / HIDS_Interval_ms;
 8006470:	4b7f      	ldr	r3, [pc, #508]	@ (8006670 <HIDS_GetMeasurementValues+0x22c>)
 8006472:	681a      	ldr	r2, [r3, #0]
 8006474:	4b7f      	ldr	r3, [pc, #508]	@ (8006674 <HIDS_GetMeasurementValues+0x230>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	0019      	movs	r1, r3
 800647a:	0010      	movs	r0, r2
 800647c:	f7f9 fe60 	bl	8000140 <__udivsi3>
 8006480:	0003      	movs	r3, r0
 8006482:	617b      	str	r3, [r7, #20]
  float currentTemperature;
  float currentHumidity;
  static float temperatures[HIDS_MAX_MEASUREMENTS];
  static float humidities[HIDS_MAX_MEASUREMENTS];

  Debug("HT measurements: %d out of %d completed.", measurements + 1, amountOfMeasurements);
 8006484:	4b7c      	ldr	r3, [pc, #496]	@ (8006678 <HIDS_GetMeasurementValues+0x234>)
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	1c58      	adds	r0, r3, #1
 800648a:	4a7c      	ldr	r2, [pc, #496]	@ (800667c <HIDS_GetMeasurementValues+0x238>)
 800648c:	497c      	ldr	r1, [pc, #496]	@ (8006680 <HIDS_GetMeasurementValues+0x23c>)
 800648e:	697b      	ldr	r3, [r7, #20]
 8006490:	9300      	str	r3, [sp, #0]
 8006492:	0003      	movs	r3, r0
 8006494:	2003      	movs	r0, #3
 8006496:	f7ff fd7f 	bl	8005f98 <CreateLine>
  ReadRegister(HIDS_I2C_ADDRESS, MeasureBuffer, HIDS_MEASURE_BUFFER_LENGTH);
 800649a:	4b7a      	ldr	r3, [pc, #488]	@ (8006684 <HIDS_GetMeasurementValues+0x240>)
 800649c:	2206      	movs	r2, #6
 800649e:	0019      	movs	r1, r3
 80064a0:	2044      	movs	r0, #68	@ 0x44
 80064a2:	f7ff fe3f 	bl	8006124 <ReadRegister>
	if(!CheckCRC(MeasureBuffer)) {
 80064a6:	4b77      	ldr	r3, [pc, #476]	@ (8006684 <HIDS_GetMeasurementValues+0x240>)
 80064a8:	0018      	movs	r0, r3
 80064aa:	f7ff ff1d 	bl	80062e8 <CheckCRC>
 80064ae:	0003      	movs	r3, r0
 80064b0:	001a      	movs	r2, r3
 80064b2:	2301      	movs	r3, #1
 80064b4:	4053      	eors	r3, r2
 80064b6:	b2db      	uxtb	r3, r3
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d02a      	beq.n	8006512 <HIDS_GetMeasurementValues+0xce>
		Error("HIDS measurements CRC check failed.");
 80064bc:	4a72      	ldr	r2, [pc, #456]	@ (8006688 <HIDS_GetMeasurementValues+0x244>)
 80064be:	4b73      	ldr	r3, [pc, #460]	@ (800668c <HIDS_GetMeasurementValues+0x248>)
 80064c0:	0019      	movs	r1, r3
 80064c2:	2001      	movs	r0, #1
 80064c4:	f7ff fd68 	bl	8005f98 <CreateLine>
		Info("Measure buffer structure:");
 80064c8:	4a71      	ldr	r2, [pc, #452]	@ (8006690 <HIDS_GetMeasurementValues+0x24c>)
 80064ca:	4b72      	ldr	r3, [pc, #456]	@ (8006694 <HIDS_GetMeasurementValues+0x250>)
 80064cc:	0019      	movs	r1, r3
 80064ce:	2002      	movs	r0, #2
 80064d0:	f7ff fd62 	bl	8005f98 <CreateLine>
		for(uint8_t i = 0; i < HIDS_MEASURE_BUFFER_LENGTH; i++) {
 80064d4:	2327      	movs	r3, #39	@ 0x27
 80064d6:	18fb      	adds	r3, r7, r3
 80064d8:	2200      	movs	r2, #0
 80064da:	701a      	strb	r2, [r3, #0]
 80064dc:	e012      	b.n	8006504 <HIDS_GetMeasurementValues+0xc0>
			Debug("HIDS_Measurement buffer[%d]: %d", i, MeasureBuffer[i]);
 80064de:	2427      	movs	r4, #39	@ 0x27
 80064e0:	193b      	adds	r3, r7, r4
 80064e2:	7818      	ldrb	r0, [r3, #0]
 80064e4:	193b      	adds	r3, r7, r4
 80064e6:	781b      	ldrb	r3, [r3, #0]
 80064e8:	4a66      	ldr	r2, [pc, #408]	@ (8006684 <HIDS_GetMeasurementValues+0x240>)
 80064ea:	5cd3      	ldrb	r3, [r2, r3]
 80064ec:	4a6a      	ldr	r2, [pc, #424]	@ (8006698 <HIDS_GetMeasurementValues+0x254>)
 80064ee:	4964      	ldr	r1, [pc, #400]	@ (8006680 <HIDS_GetMeasurementValues+0x23c>)
 80064f0:	9300      	str	r3, [sp, #0]
 80064f2:	0003      	movs	r3, r0
 80064f4:	2003      	movs	r0, #3
 80064f6:	f7ff fd4f 	bl	8005f98 <CreateLine>
		for(uint8_t i = 0; i < HIDS_MEASURE_BUFFER_LENGTH; i++) {
 80064fa:	193b      	adds	r3, r7, r4
 80064fc:	781a      	ldrb	r2, [r3, #0]
 80064fe:	193b      	adds	r3, r7, r4
 8006500:	3201      	adds	r2, #1
 8006502:	701a      	strb	r2, [r3, #0]
 8006504:	2327      	movs	r3, #39	@ 0x27
 8006506:	18fb      	adds	r3, r7, r3
 8006508:	781b      	ldrb	r3, [r3, #0]
 800650a:	2b05      	cmp	r3, #5
 800650c:	d9e7      	bls.n	80064de <HIDS_GetMeasurementValues+0x9a>
		}
		return false;
 800650e:	2300      	movs	r3, #0
 8006510:	e0a7      	b.n	8006662 <HIDS_GetMeasurementValues+0x21e>

  // Humidity formula in percentage:
  //  RH = ((-6 + 125 * SRH) / (2^16 - 1))
  // Temperature formula in degrees Celsius:
  //  T = ((-45 + (175 * ST) / (2^16 - 1)))
	currentTemperature = (((175 * (MeasureBuffer[0] << 8) | MeasureBuffer[1])) / HIDS_POW_2_16_MINUS_1);
 8006512:	4b5c      	ldr	r3, [pc, #368]	@ (8006684 <HIDS_GetMeasurementValues+0x240>)
 8006514:	781b      	ldrb	r3, [r3, #0]
 8006516:	021b      	lsls	r3, r3, #8
 8006518:	22af      	movs	r2, #175	@ 0xaf
 800651a:	4353      	muls	r3, r2
 800651c:	4a59      	ldr	r2, [pc, #356]	@ (8006684 <HIDS_GetMeasurementValues+0x240>)
 800651e:	7852      	ldrb	r2, [r2, #1]
 8006520:	4313      	orrs	r3, r2
 8006522:	0018      	movs	r0, r3
 8006524:	f7fc fe94 	bl	8003250 <__aeabi_i2d>
 8006528:	2200      	movs	r2, #0
 800652a:	4b5c      	ldr	r3, [pc, #368]	@ (800669c <HIDS_GetMeasurementValues+0x258>)
 800652c:	f7fb fb8a 	bl	8001c44 <__aeabi_ddiv>
 8006530:	0002      	movs	r2, r0
 8006532:	000b      	movs	r3, r1
 8006534:	0010      	movs	r0, r2
 8006536:	0019      	movs	r1, r3
 8006538:	f7fc fedc 	bl	80032f4 <__aeabi_d2f>
 800653c:	1c03      	adds	r3, r0, #0
 800653e:	613b      	str	r3, [r7, #16]
	currentTemperature += -45;
 8006540:	4957      	ldr	r1, [pc, #348]	@ (80066a0 <HIDS_GetMeasurementValues+0x25c>)
 8006542:	6938      	ldr	r0, [r7, #16]
 8006544:	f7fa fdb2 	bl	80010ac <__aeabi_fsub>
 8006548:	1c03      	adds	r3, r0, #0
 800654a:	613b      	str	r3, [r7, #16]
	currentHumidity = ((125 * ((MeasureBuffer[3] << 8) | MeasureBuffer[4]) / HIDS_POW_2_16_MINUS_1));
 800654c:	4b4d      	ldr	r3, [pc, #308]	@ (8006684 <HIDS_GetMeasurementValues+0x240>)
 800654e:	78db      	ldrb	r3, [r3, #3]
 8006550:	021b      	lsls	r3, r3, #8
 8006552:	4a4c      	ldr	r2, [pc, #304]	@ (8006684 <HIDS_GetMeasurementValues+0x240>)
 8006554:	7912      	ldrb	r2, [r2, #4]
 8006556:	431a      	orrs	r2, r3
 8006558:	0013      	movs	r3, r2
 800655a:	015b      	lsls	r3, r3, #5
 800655c:	1a9b      	subs	r3, r3, r2
 800655e:	009b      	lsls	r3, r3, #2
 8006560:	189b      	adds	r3, r3, r2
 8006562:	0018      	movs	r0, r3
 8006564:	f7fc fe74 	bl	8003250 <__aeabi_i2d>
 8006568:	2200      	movs	r2, #0
 800656a:	4b4c      	ldr	r3, [pc, #304]	@ (800669c <HIDS_GetMeasurementValues+0x258>)
 800656c:	f7fb fb6a 	bl	8001c44 <__aeabi_ddiv>
 8006570:	0002      	movs	r2, r0
 8006572:	000b      	movs	r3, r1
 8006574:	0010      	movs	r0, r2
 8006576:	0019      	movs	r1, r3
 8006578:	f7fc febc 	bl	80032f4 <__aeabi_d2f>
 800657c:	1c03      	adds	r3, r0, #0
 800657e:	60fb      	str	r3, [r7, #12]
	currentHumidity += -6;
 8006580:	4948      	ldr	r1, [pc, #288]	@ (80066a4 <HIDS_GetMeasurementValues+0x260>)
 8006582:	68f8      	ldr	r0, [r7, #12]
 8006584:	f7fa fd92 	bl	80010ac <__aeabi_fsub>
 8006588:	1c03      	adds	r3, r0, #0
 800658a:	60fb      	str	r3, [r7, #12]

	if(measurements < amountOfMeasurements) {
 800658c:	4b3a      	ldr	r3, [pc, #232]	@ (8006678 <HIDS_GetMeasurementValues+0x234>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	697a      	ldr	r2, [r7, #20]
 8006592:	429a      	cmp	r2, r3
 8006594:	d910      	bls.n	80065b8 <HIDS_GetMeasurementValues+0x174>
	  temperatures[measurements] = currentTemperature;
 8006596:	4b38      	ldr	r3, [pc, #224]	@ (8006678 <HIDS_GetMeasurementValues+0x234>)
 8006598:	681a      	ldr	r2, [r3, #0]
 800659a:	4b43      	ldr	r3, [pc, #268]	@ (80066a8 <HIDS_GetMeasurementValues+0x264>)
 800659c:	0092      	lsls	r2, r2, #2
 800659e:	6939      	ldr	r1, [r7, #16]
 80065a0:	50d1      	str	r1, [r2, r3]
	  humidities[measurements] = currentHumidity;
 80065a2:	4b35      	ldr	r3, [pc, #212]	@ (8006678 <HIDS_GetMeasurementValues+0x234>)
 80065a4:	681a      	ldr	r2, [r3, #0]
 80065a6:	4b41      	ldr	r3, [pc, #260]	@ (80066ac <HIDS_GetMeasurementValues+0x268>)
 80065a8:	0092      	lsls	r2, r2, #2
 80065aa:	68f9      	ldr	r1, [r7, #12]
 80065ac:	50d1      	str	r1, [r2, r3]
	  measurements++;
 80065ae:	4b32      	ldr	r3, [pc, #200]	@ (8006678 <HIDS_GetMeasurementValues+0x234>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	1c5a      	adds	r2, r3, #1
 80065b4:	4b30      	ldr	r3, [pc, #192]	@ (8006678 <HIDS_GetMeasurementValues+0x234>)
 80065b6:	601a      	str	r2, [r3, #0]
	}

	if (measurements >= amountOfMeasurements) {
 80065b8:	4b2f      	ldr	r3, [pc, #188]	@ (8006678 <HIDS_GetMeasurementValues+0x234>)
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	697a      	ldr	r2, [r7, #20]
 80065be:	429a      	cmp	r2, r3
 80065c0:	d84c      	bhi.n	800665c <HIDS_GetMeasurementValues+0x218>
	  // Measurements done, calculating average and returning it.
    float sumTemperature = 0.0;
 80065c2:	2300      	movs	r3, #0
 80065c4:	623b      	str	r3, [r7, #32]
    float sumHumidity = 0.0;
 80065c6:	2300      	movs	r3, #0
 80065c8:	61fb      	str	r3, [r7, #28]
    for (uint32_t i = 0; i < measurements; i++) {
 80065ca:	2300      	movs	r3, #0
 80065cc:	61bb      	str	r3, [r7, #24]
 80065ce:	e016      	b.n	80065fe <HIDS_GetMeasurementValues+0x1ba>
        sumTemperature += temperatures[i];
 80065d0:	4b35      	ldr	r3, [pc, #212]	@ (80066a8 <HIDS_GetMeasurementValues+0x264>)
 80065d2:	69ba      	ldr	r2, [r7, #24]
 80065d4:	0092      	lsls	r2, r2, #2
 80065d6:	58d3      	ldr	r3, [r2, r3]
 80065d8:	1c19      	adds	r1, r3, #0
 80065da:	6a38      	ldr	r0, [r7, #32]
 80065dc:	f7fa f8b8 	bl	8000750 <__aeabi_fadd>
 80065e0:	1c03      	adds	r3, r0, #0
 80065e2:	623b      	str	r3, [r7, #32]
        sumHumidity += humidities[i];
 80065e4:	4b31      	ldr	r3, [pc, #196]	@ (80066ac <HIDS_GetMeasurementValues+0x268>)
 80065e6:	69ba      	ldr	r2, [r7, #24]
 80065e8:	0092      	lsls	r2, r2, #2
 80065ea:	58d3      	ldr	r3, [r2, r3]
 80065ec:	1c19      	adds	r1, r3, #0
 80065ee:	69f8      	ldr	r0, [r7, #28]
 80065f0:	f7fa f8ae 	bl	8000750 <__aeabi_fadd>
 80065f4:	1c03      	adds	r3, r0, #0
 80065f6:	61fb      	str	r3, [r7, #28]
    for (uint32_t i = 0; i < measurements; i++) {
 80065f8:	69bb      	ldr	r3, [r7, #24]
 80065fa:	3301      	adds	r3, #1
 80065fc:	61bb      	str	r3, [r7, #24]
 80065fe:	4b1e      	ldr	r3, [pc, #120]	@ (8006678 <HIDS_GetMeasurementValues+0x234>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	69ba      	ldr	r2, [r7, #24]
 8006604:	429a      	cmp	r2, r3
 8006606:	d3e3      	bcc.n	80065d0 <HIDS_GetMeasurementValues+0x18c>
    }

    *temperature = sumTemperature / measurements;
 8006608:	4b1b      	ldr	r3, [pc, #108]	@ (8006678 <HIDS_GetMeasurementValues+0x234>)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	0018      	movs	r0, r3
 800660e:	f7fa ff73 	bl	80014f8 <__aeabi_ui2f>
 8006612:	1c03      	adds	r3, r0, #0
 8006614:	1c19      	adds	r1, r3, #0
 8006616:	6a38      	ldr	r0, [r7, #32]
 8006618:	f7fa fa24 	bl	8000a64 <__aeabi_fdiv>
 800661c:	1c03      	adds	r3, r0, #0
 800661e:	1c1a      	adds	r2, r3, #0
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	601a      	str	r2, [r3, #0]
    *humidity = sumHumidity / measurements;
 8006624:	4b14      	ldr	r3, [pc, #80]	@ (8006678 <HIDS_GetMeasurementValues+0x234>)
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	0018      	movs	r0, r3
 800662a:	f7fa ff65 	bl	80014f8 <__aeabi_ui2f>
 800662e:	1c03      	adds	r3, r0, #0
 8006630:	1c19      	adds	r1, r3, #0
 8006632:	69f8      	ldr	r0, [r7, #28]
 8006634:	f7fa fa16 	bl	8000a64 <__aeabi_fdiv>
 8006638:	1c03      	adds	r3, r0, #0
 800663a:	1c1a      	adds	r2, r3, #0
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	601a      	str	r2, [r3, #0]

    measurements = 0;
 8006640:	4b0d      	ldr	r3, [pc, #52]	@ (8006678 <HIDS_GetMeasurementValues+0x234>)
 8006642:	2200      	movs	r2, #0
 8006644:	601a      	str	r2, [r3, #0]
    MeasurementDone = true;
 8006646:	4b09      	ldr	r3, [pc, #36]	@ (800666c <HIDS_GetMeasurementValues+0x228>)
 8006648:	2201      	movs	r2, #1
 800664a:	701a      	strb	r2, [r3, #0]
    Debug("HIDS measurement is done.");
 800664c:	4a18      	ldr	r2, [pc, #96]	@ (80066b0 <HIDS_GetMeasurementValues+0x26c>)
 800664e:	4b0c      	ldr	r3, [pc, #48]	@ (8006680 <HIDS_GetMeasurementValues+0x23c>)
 8006650:	0019      	movs	r1, r3
 8006652:	2003      	movs	r0, #3
 8006654:	f7ff fca0 	bl	8005f98 <CreateLine>
    return true;
 8006658:	2301      	movs	r3, #1
 800665a:	e002      	b.n	8006662 <HIDS_GetMeasurementValues+0x21e>
	}
	// Starting another measurement, still not done with all measurements.
	HIDS_StartMeasurement();
 800665c:	f7ff fe16 	bl	800628c <HIDS_StartMeasurement>
	return false;
 8006660:	2300      	movs	r3, #0
}
 8006662:	0018      	movs	r0, r3
 8006664:	46bd      	mov	sp, r7
 8006666:	b00b      	add	sp, #44	@ 0x2c
 8006668:	bd90      	pop	{r4, r7, pc}
 800666a:	46c0      	nop			@ (mov r8, r8)
 800666c:	20000812 	.word	0x20000812
 8006670:	20000034 	.word	0x20000034
 8006674:	20000030 	.word	0x20000030
 8006678:	20000814 	.word	0x20000814
 800667c:	0800f9f0 	.word	0x0800f9f0
 8006680:	0800fa1c 	.word	0x0800fa1c
 8006684:	2000080c 	.word	0x2000080c
 8006688:	0800fa20 	.word	0x0800fa20
 800668c:	0800f9a0 	.word	0x0800f9a0
 8006690:	0800fa44 	.word	0x0800fa44
 8006694:	0800f974 	.word	0x0800f974
 8006698:	0800fa60 	.word	0x0800fa60
 800669c:	40efffe0 	.word	0x40efffe0
 80066a0:	42340000 	.word	0x42340000
 80066a4:	40c00000 	.word	0x40c00000
 80066a8:	20000818 	.word	0x20000818
 80066ac:	20000c18 	.word	0x20000c18
 80066b0:	0800fa80 	.word	0x0800fa80

080066b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80066b4:	480d      	ldr	r0, [pc, #52]	@ (80066ec <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80066b6:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 80066b8:	f7ff fab2 	bl	8005c20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80066bc:	480c      	ldr	r0, [pc, #48]	@ (80066f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80066be:	490d      	ldr	r1, [pc, #52]	@ (80066f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80066c0:	4a0d      	ldr	r2, [pc, #52]	@ (80066f8 <LoopForever+0xe>)
  movs r3, #0
 80066c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80066c4:	e002      	b.n	80066cc <LoopCopyDataInit>

080066c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80066c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80066c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80066ca:	3304      	adds	r3, #4

080066cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80066cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80066ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80066d0:	d3f9      	bcc.n	80066c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80066d2:	4a0a      	ldr	r2, [pc, #40]	@ (80066fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80066d4:	4c0a      	ldr	r4, [pc, #40]	@ (8006700 <LoopForever+0x16>)
  movs r3, #0
 80066d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80066d8:	e001      	b.n	80066de <LoopFillZerobss>

080066da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80066da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80066dc:	3204      	adds	r2, #4

080066de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80066de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80066e0:	d3fb      	bcc.n	80066da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80066e2:	f006 fc31 	bl	800cf48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80066e6:	f7fd fc5b 	bl	8003fa0 <main>

080066ea <LoopForever>:

LoopForever:
    b LoopForever
 80066ea:	e7fe      	b.n	80066ea <LoopForever>
   ldr   r0, =_estack
 80066ec:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80066f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80066f4:	20000210 	.word	0x20000210
  ldr r2, =_sidata
 80066f8:	0800ff80 	.word	0x0800ff80
  ldr r2, =_sbss
 80066fc:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 8006700:	20001168 	.word	0x20001168

08006704 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006704:	e7fe      	b.n	8006704 <ADC1_COMP_IRQHandler>
	...

08006708 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b082      	sub	sp, #8
 800670c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800670e:	1dfb      	adds	r3, r7, #7
 8006710:	2200      	movs	r2, #0
 8006712:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8006714:	4b0b      	ldr	r3, [pc, #44]	@ (8006744 <HAL_Init+0x3c>)
 8006716:	681a      	ldr	r2, [r3, #0]
 8006718:	4b0a      	ldr	r3, [pc, #40]	@ (8006744 <HAL_Init+0x3c>)
 800671a:	2140      	movs	r1, #64	@ 0x40
 800671c:	430a      	orrs	r2, r1
 800671e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006720:	2003      	movs	r0, #3
 8006722:	f000 f811 	bl	8006748 <HAL_InitTick>
 8006726:	1e03      	subs	r3, r0, #0
 8006728:	d003      	beq.n	8006732 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800672a:	1dfb      	adds	r3, r7, #7
 800672c:	2201      	movs	r2, #1
 800672e:	701a      	strb	r2, [r3, #0]
 8006730:	e001      	b.n	8006736 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8006732:	f7ff f957 	bl	80059e4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8006736:	1dfb      	adds	r3, r7, #7
 8006738:	781b      	ldrb	r3, [r3, #0]
}
 800673a:	0018      	movs	r0, r3
 800673c:	46bd      	mov	sp, r7
 800673e:	b002      	add	sp, #8
 8006740:	bd80      	pop	{r7, pc}
 8006742:	46c0      	nop			@ (mov r8, r8)
 8006744:	40022000 	.word	0x40022000

08006748 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006748:	b590      	push	{r4, r7, lr}
 800674a:	b083      	sub	sp, #12
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006750:	4b14      	ldr	r3, [pc, #80]	@ (80067a4 <HAL_InitTick+0x5c>)
 8006752:	681c      	ldr	r4, [r3, #0]
 8006754:	4b14      	ldr	r3, [pc, #80]	@ (80067a8 <HAL_InitTick+0x60>)
 8006756:	781b      	ldrb	r3, [r3, #0]
 8006758:	0019      	movs	r1, r3
 800675a:	23fa      	movs	r3, #250	@ 0xfa
 800675c:	0098      	lsls	r0, r3, #2
 800675e:	f7f9 fcef 	bl	8000140 <__udivsi3>
 8006762:	0003      	movs	r3, r0
 8006764:	0019      	movs	r1, r3
 8006766:	0020      	movs	r0, r4
 8006768:	f7f9 fcea 	bl	8000140 <__udivsi3>
 800676c:	0003      	movs	r3, r0
 800676e:	0018      	movs	r0, r3
 8006770:	f000 f92f 	bl	80069d2 <HAL_SYSTICK_Config>
 8006774:	1e03      	subs	r3, r0, #0
 8006776:	d001      	beq.n	800677c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8006778:	2301      	movs	r3, #1
 800677a:	e00f      	b.n	800679c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2b03      	cmp	r3, #3
 8006780:	d80b      	bhi.n	800679a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006782:	6879      	ldr	r1, [r7, #4]
 8006784:	2301      	movs	r3, #1
 8006786:	425b      	negs	r3, r3
 8006788:	2200      	movs	r2, #0
 800678a:	0018      	movs	r0, r3
 800678c:	f000 f8fc 	bl	8006988 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006790:	4b06      	ldr	r3, [pc, #24]	@ (80067ac <HAL_InitTick+0x64>)
 8006792:	687a      	ldr	r2, [r7, #4]
 8006794:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006796:	2300      	movs	r3, #0
 8006798:	e000      	b.n	800679c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800679a:	2301      	movs	r3, #1
}
 800679c:	0018      	movs	r0, r3
 800679e:	46bd      	mov	sp, r7
 80067a0:	b003      	add	sp, #12
 80067a2:	bd90      	pop	{r4, r7, pc}
 80067a4:	20000024 	.word	0x20000024
 80067a8:	2000003c 	.word	0x2000003c
 80067ac:	20000038 	.word	0x20000038

080067b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80067b4:	4b05      	ldr	r3, [pc, #20]	@ (80067cc <HAL_IncTick+0x1c>)
 80067b6:	781b      	ldrb	r3, [r3, #0]
 80067b8:	001a      	movs	r2, r3
 80067ba:	4b05      	ldr	r3, [pc, #20]	@ (80067d0 <HAL_IncTick+0x20>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	18d2      	adds	r2, r2, r3
 80067c0:	4b03      	ldr	r3, [pc, #12]	@ (80067d0 <HAL_IncTick+0x20>)
 80067c2:	601a      	str	r2, [r3, #0]
}
 80067c4:	46c0      	nop			@ (mov r8, r8)
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd80      	pop	{r7, pc}
 80067ca:	46c0      	nop			@ (mov r8, r8)
 80067cc:	2000003c 	.word	0x2000003c
 80067d0:	20001018 	.word	0x20001018

080067d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	af00      	add	r7, sp, #0
  return uwTick;
 80067d8:	4b02      	ldr	r3, [pc, #8]	@ (80067e4 <HAL_GetTick+0x10>)
 80067da:	681b      	ldr	r3, [r3, #0]
}
 80067dc:	0018      	movs	r0, r3
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd80      	pop	{r7, pc}
 80067e2:	46c0      	nop			@ (mov r8, r8)
 80067e4:	20001018 	.word	0x20001018

080067e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b084      	sub	sp, #16
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80067f0:	f7ff fff0 	bl	80067d4 <HAL_GetTick>
 80067f4:	0003      	movs	r3, r0
 80067f6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	3301      	adds	r3, #1
 8006800:	d005      	beq.n	800680e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006802:	4b0a      	ldr	r3, [pc, #40]	@ (800682c <HAL_Delay+0x44>)
 8006804:	781b      	ldrb	r3, [r3, #0]
 8006806:	001a      	movs	r2, r3
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	189b      	adds	r3, r3, r2
 800680c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800680e:	46c0      	nop			@ (mov r8, r8)
 8006810:	f7ff ffe0 	bl	80067d4 <HAL_GetTick>
 8006814:	0002      	movs	r2, r0
 8006816:	68bb      	ldr	r3, [r7, #8]
 8006818:	1ad3      	subs	r3, r2, r3
 800681a:	68fa      	ldr	r2, [r7, #12]
 800681c:	429a      	cmp	r2, r3
 800681e:	d8f7      	bhi.n	8006810 <HAL_Delay+0x28>
  {
  }
}
 8006820:	46c0      	nop			@ (mov r8, r8)
 8006822:	46c0      	nop			@ (mov r8, r8)
 8006824:	46bd      	mov	sp, r7
 8006826:	b004      	add	sp, #16
 8006828:	bd80      	pop	{r7, pc}
 800682a:	46c0      	nop			@ (mov r8, r8)
 800682c:	2000003c 	.word	0x2000003c

08006830 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b082      	sub	sp, #8
 8006834:	af00      	add	r7, sp, #0
 8006836:	0002      	movs	r2, r0
 8006838:	1dfb      	adds	r3, r7, #7
 800683a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800683c:	1dfb      	adds	r3, r7, #7
 800683e:	781b      	ldrb	r3, [r3, #0]
 8006840:	2b7f      	cmp	r3, #127	@ 0x7f
 8006842:	d809      	bhi.n	8006858 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006844:	1dfb      	adds	r3, r7, #7
 8006846:	781b      	ldrb	r3, [r3, #0]
 8006848:	001a      	movs	r2, r3
 800684a:	231f      	movs	r3, #31
 800684c:	401a      	ands	r2, r3
 800684e:	4b04      	ldr	r3, [pc, #16]	@ (8006860 <__NVIC_EnableIRQ+0x30>)
 8006850:	2101      	movs	r1, #1
 8006852:	4091      	lsls	r1, r2
 8006854:	000a      	movs	r2, r1
 8006856:	601a      	str	r2, [r3, #0]
  }
}
 8006858:	46c0      	nop			@ (mov r8, r8)
 800685a:	46bd      	mov	sp, r7
 800685c:	b002      	add	sp, #8
 800685e:	bd80      	pop	{r7, pc}
 8006860:	e000e100 	.word	0xe000e100

08006864 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006864:	b590      	push	{r4, r7, lr}
 8006866:	b083      	sub	sp, #12
 8006868:	af00      	add	r7, sp, #0
 800686a:	0002      	movs	r2, r0
 800686c:	6039      	str	r1, [r7, #0]
 800686e:	1dfb      	adds	r3, r7, #7
 8006870:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8006872:	1dfb      	adds	r3, r7, #7
 8006874:	781b      	ldrb	r3, [r3, #0]
 8006876:	2b7f      	cmp	r3, #127	@ 0x7f
 8006878:	d828      	bhi.n	80068cc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800687a:	4a2f      	ldr	r2, [pc, #188]	@ (8006938 <__NVIC_SetPriority+0xd4>)
 800687c:	1dfb      	adds	r3, r7, #7
 800687e:	781b      	ldrb	r3, [r3, #0]
 8006880:	b25b      	sxtb	r3, r3
 8006882:	089b      	lsrs	r3, r3, #2
 8006884:	33c0      	adds	r3, #192	@ 0xc0
 8006886:	009b      	lsls	r3, r3, #2
 8006888:	589b      	ldr	r3, [r3, r2]
 800688a:	1dfa      	adds	r2, r7, #7
 800688c:	7812      	ldrb	r2, [r2, #0]
 800688e:	0011      	movs	r1, r2
 8006890:	2203      	movs	r2, #3
 8006892:	400a      	ands	r2, r1
 8006894:	00d2      	lsls	r2, r2, #3
 8006896:	21ff      	movs	r1, #255	@ 0xff
 8006898:	4091      	lsls	r1, r2
 800689a:	000a      	movs	r2, r1
 800689c:	43d2      	mvns	r2, r2
 800689e:	401a      	ands	r2, r3
 80068a0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	019b      	lsls	r3, r3, #6
 80068a6:	22ff      	movs	r2, #255	@ 0xff
 80068a8:	401a      	ands	r2, r3
 80068aa:	1dfb      	adds	r3, r7, #7
 80068ac:	781b      	ldrb	r3, [r3, #0]
 80068ae:	0018      	movs	r0, r3
 80068b0:	2303      	movs	r3, #3
 80068b2:	4003      	ands	r3, r0
 80068b4:	00db      	lsls	r3, r3, #3
 80068b6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80068b8:	481f      	ldr	r0, [pc, #124]	@ (8006938 <__NVIC_SetPriority+0xd4>)
 80068ba:	1dfb      	adds	r3, r7, #7
 80068bc:	781b      	ldrb	r3, [r3, #0]
 80068be:	b25b      	sxtb	r3, r3
 80068c0:	089b      	lsrs	r3, r3, #2
 80068c2:	430a      	orrs	r2, r1
 80068c4:	33c0      	adds	r3, #192	@ 0xc0
 80068c6:	009b      	lsls	r3, r3, #2
 80068c8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80068ca:	e031      	b.n	8006930 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80068cc:	4a1b      	ldr	r2, [pc, #108]	@ (800693c <__NVIC_SetPriority+0xd8>)
 80068ce:	1dfb      	adds	r3, r7, #7
 80068d0:	781b      	ldrb	r3, [r3, #0]
 80068d2:	0019      	movs	r1, r3
 80068d4:	230f      	movs	r3, #15
 80068d6:	400b      	ands	r3, r1
 80068d8:	3b08      	subs	r3, #8
 80068da:	089b      	lsrs	r3, r3, #2
 80068dc:	3306      	adds	r3, #6
 80068de:	009b      	lsls	r3, r3, #2
 80068e0:	18d3      	adds	r3, r2, r3
 80068e2:	3304      	adds	r3, #4
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	1dfa      	adds	r2, r7, #7
 80068e8:	7812      	ldrb	r2, [r2, #0]
 80068ea:	0011      	movs	r1, r2
 80068ec:	2203      	movs	r2, #3
 80068ee:	400a      	ands	r2, r1
 80068f0:	00d2      	lsls	r2, r2, #3
 80068f2:	21ff      	movs	r1, #255	@ 0xff
 80068f4:	4091      	lsls	r1, r2
 80068f6:	000a      	movs	r2, r1
 80068f8:	43d2      	mvns	r2, r2
 80068fa:	401a      	ands	r2, r3
 80068fc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	019b      	lsls	r3, r3, #6
 8006902:	22ff      	movs	r2, #255	@ 0xff
 8006904:	401a      	ands	r2, r3
 8006906:	1dfb      	adds	r3, r7, #7
 8006908:	781b      	ldrb	r3, [r3, #0]
 800690a:	0018      	movs	r0, r3
 800690c:	2303      	movs	r3, #3
 800690e:	4003      	ands	r3, r0
 8006910:	00db      	lsls	r3, r3, #3
 8006912:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006914:	4809      	ldr	r0, [pc, #36]	@ (800693c <__NVIC_SetPriority+0xd8>)
 8006916:	1dfb      	adds	r3, r7, #7
 8006918:	781b      	ldrb	r3, [r3, #0]
 800691a:	001c      	movs	r4, r3
 800691c:	230f      	movs	r3, #15
 800691e:	4023      	ands	r3, r4
 8006920:	3b08      	subs	r3, #8
 8006922:	089b      	lsrs	r3, r3, #2
 8006924:	430a      	orrs	r2, r1
 8006926:	3306      	adds	r3, #6
 8006928:	009b      	lsls	r3, r3, #2
 800692a:	18c3      	adds	r3, r0, r3
 800692c:	3304      	adds	r3, #4
 800692e:	601a      	str	r2, [r3, #0]
}
 8006930:	46c0      	nop			@ (mov r8, r8)
 8006932:	46bd      	mov	sp, r7
 8006934:	b003      	add	sp, #12
 8006936:	bd90      	pop	{r4, r7, pc}
 8006938:	e000e100 	.word	0xe000e100
 800693c:	e000ed00 	.word	0xe000ed00

08006940 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b082      	sub	sp, #8
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	1e5a      	subs	r2, r3, #1
 800694c:	2380      	movs	r3, #128	@ 0x80
 800694e:	045b      	lsls	r3, r3, #17
 8006950:	429a      	cmp	r2, r3
 8006952:	d301      	bcc.n	8006958 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006954:	2301      	movs	r3, #1
 8006956:	e010      	b.n	800697a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006958:	4b0a      	ldr	r3, [pc, #40]	@ (8006984 <SysTick_Config+0x44>)
 800695a:	687a      	ldr	r2, [r7, #4]
 800695c:	3a01      	subs	r2, #1
 800695e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006960:	2301      	movs	r3, #1
 8006962:	425b      	negs	r3, r3
 8006964:	2103      	movs	r1, #3
 8006966:	0018      	movs	r0, r3
 8006968:	f7ff ff7c 	bl	8006864 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800696c:	4b05      	ldr	r3, [pc, #20]	@ (8006984 <SysTick_Config+0x44>)
 800696e:	2200      	movs	r2, #0
 8006970:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006972:	4b04      	ldr	r3, [pc, #16]	@ (8006984 <SysTick_Config+0x44>)
 8006974:	2207      	movs	r2, #7
 8006976:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006978:	2300      	movs	r3, #0
}
 800697a:	0018      	movs	r0, r3
 800697c:	46bd      	mov	sp, r7
 800697e:	b002      	add	sp, #8
 8006980:	bd80      	pop	{r7, pc}
 8006982:	46c0      	nop			@ (mov r8, r8)
 8006984:	e000e010 	.word	0xe000e010

08006988 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006988:	b580      	push	{r7, lr}
 800698a:	b084      	sub	sp, #16
 800698c:	af00      	add	r7, sp, #0
 800698e:	60b9      	str	r1, [r7, #8]
 8006990:	607a      	str	r2, [r7, #4]
 8006992:	210f      	movs	r1, #15
 8006994:	187b      	adds	r3, r7, r1
 8006996:	1c02      	adds	r2, r0, #0
 8006998:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800699a:	68ba      	ldr	r2, [r7, #8]
 800699c:	187b      	adds	r3, r7, r1
 800699e:	781b      	ldrb	r3, [r3, #0]
 80069a0:	b25b      	sxtb	r3, r3
 80069a2:	0011      	movs	r1, r2
 80069a4:	0018      	movs	r0, r3
 80069a6:	f7ff ff5d 	bl	8006864 <__NVIC_SetPriority>
}
 80069aa:	46c0      	nop			@ (mov r8, r8)
 80069ac:	46bd      	mov	sp, r7
 80069ae:	b004      	add	sp, #16
 80069b0:	bd80      	pop	{r7, pc}

080069b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80069b2:	b580      	push	{r7, lr}
 80069b4:	b082      	sub	sp, #8
 80069b6:	af00      	add	r7, sp, #0
 80069b8:	0002      	movs	r2, r0
 80069ba:	1dfb      	adds	r3, r7, #7
 80069bc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80069be:	1dfb      	adds	r3, r7, #7
 80069c0:	781b      	ldrb	r3, [r3, #0]
 80069c2:	b25b      	sxtb	r3, r3
 80069c4:	0018      	movs	r0, r3
 80069c6:	f7ff ff33 	bl	8006830 <__NVIC_EnableIRQ>
}
 80069ca:	46c0      	nop			@ (mov r8, r8)
 80069cc:	46bd      	mov	sp, r7
 80069ce:	b002      	add	sp, #8
 80069d0:	bd80      	pop	{r7, pc}

080069d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80069d2:	b580      	push	{r7, lr}
 80069d4:	b082      	sub	sp, #8
 80069d6:	af00      	add	r7, sp, #0
 80069d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	0018      	movs	r0, r3
 80069de:	f7ff ffaf 	bl	8006940 <SysTick_Config>
 80069e2:	0003      	movs	r3, r0
}
 80069e4:	0018      	movs	r0, r3
 80069e6:	46bd      	mov	sp, r7
 80069e8:	b002      	add	sp, #8
 80069ea:	bd80      	pop	{r7, pc}

080069ec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b084      	sub	sp, #16
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d101      	bne.n	80069fe <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80069fa:	2301      	movs	r3, #1
 80069fc:	e061      	b.n	8006ac2 <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	4a32      	ldr	r2, [pc, #200]	@ (8006acc <HAL_DMA_Init+0xe0>)
 8006a04:	4694      	mov	ip, r2
 8006a06:	4463      	add	r3, ip
 8006a08:	2114      	movs	r1, #20
 8006a0a:	0018      	movs	r0, r3
 8006a0c:	f7f9 fb98 	bl	8000140 <__udivsi3>
 8006a10:	0003      	movs	r3, r0
 8006a12:	009a      	lsls	r2, r3, #2
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	4a2d      	ldr	r2, [pc, #180]	@ (8006ad0 <HAL_DMA_Init+0xe4>)
 8006a1c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2225      	movs	r2, #37	@ 0x25
 8006a22:	2102      	movs	r1, #2
 8006a24:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	4a28      	ldr	r2, [pc, #160]	@ (8006ad4 <HAL_DMA_Init+0xe8>)
 8006a32:	4013      	ands	r3, r2
 8006a34:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8006a3e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	691b      	ldr	r3, [r3, #16]
 8006a44:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006a4a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	699b      	ldr	r3, [r3, #24]
 8006a50:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006a56:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6a1b      	ldr	r3, [r3, #32]
 8006a5c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006a5e:	68fa      	ldr	r2, [r7, #12]
 8006a60:	4313      	orrs	r3, r2
 8006a62:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	68fa      	ldr	r2, [r7, #12]
 8006a6a:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	689a      	ldr	r2, [r3, #8]
 8006a70:	2380      	movs	r3, #128	@ 0x80
 8006a72:	01db      	lsls	r3, r3, #7
 8006a74:	429a      	cmp	r2, r3
 8006a76:	d018      	beq.n	8006aaa <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8006a78:	4b17      	ldr	r3, [pc, #92]	@ (8006ad8 <HAL_DMA_Init+0xec>)
 8006a7a:	681a      	ldr	r2, [r3, #0]
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a80:	211c      	movs	r1, #28
 8006a82:	400b      	ands	r3, r1
 8006a84:	210f      	movs	r1, #15
 8006a86:	4099      	lsls	r1, r3
 8006a88:	000b      	movs	r3, r1
 8006a8a:	43d9      	mvns	r1, r3
 8006a8c:	4b12      	ldr	r3, [pc, #72]	@ (8006ad8 <HAL_DMA_Init+0xec>)
 8006a8e:	400a      	ands	r2, r1
 8006a90:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8006a92:	4b11      	ldr	r3, [pc, #68]	@ (8006ad8 <HAL_DMA_Init+0xec>)
 8006a94:	6819      	ldr	r1, [r3, #0]
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	685a      	ldr	r2, [r3, #4]
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a9e:	201c      	movs	r0, #28
 8006aa0:	4003      	ands	r3, r0
 8006aa2:	409a      	lsls	r2, r3
 8006aa4:	4b0c      	ldr	r3, [pc, #48]	@ (8006ad8 <HAL_DMA_Init+0xec>)
 8006aa6:	430a      	orrs	r2, r1
 8006aa8:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2200      	movs	r2, #0
 8006aae:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2225      	movs	r2, #37	@ 0x25
 8006ab4:	2101      	movs	r1, #1
 8006ab6:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2224      	movs	r2, #36	@ 0x24
 8006abc:	2100      	movs	r1, #0
 8006abe:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006ac0:	2300      	movs	r3, #0
}
 8006ac2:	0018      	movs	r0, r3
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	b004      	add	sp, #16
 8006ac8:	bd80      	pop	{r7, pc}
 8006aca:	46c0      	nop			@ (mov r8, r8)
 8006acc:	bffdfff8 	.word	0xbffdfff8
 8006ad0:	40020000 	.word	0x40020000
 8006ad4:	ffff800f 	.word	0xffff800f
 8006ad8:	400200a8 	.word	0x400200a8

08006adc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b086      	sub	sp, #24
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	60f8      	str	r0, [r7, #12]
 8006ae4:	60b9      	str	r1, [r7, #8]
 8006ae6:	607a      	str	r2, [r7, #4]
 8006ae8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006aea:	2317      	movs	r3, #23
 8006aec:	18fb      	adds	r3, r7, r3
 8006aee:	2200      	movs	r2, #0
 8006af0:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	2224      	movs	r2, #36	@ 0x24
 8006af6:	5c9b      	ldrb	r3, [r3, r2]
 8006af8:	2b01      	cmp	r3, #1
 8006afa:	d101      	bne.n	8006b00 <HAL_DMA_Start_IT+0x24>
 8006afc:	2302      	movs	r3, #2
 8006afe:	e04f      	b.n	8006ba0 <HAL_DMA_Start_IT+0xc4>
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	2224      	movs	r2, #36	@ 0x24
 8006b04:	2101      	movs	r1, #1
 8006b06:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	2225      	movs	r2, #37	@ 0x25
 8006b0c:	5c9b      	ldrb	r3, [r3, r2]
 8006b0e:	b2db      	uxtb	r3, r3
 8006b10:	2b01      	cmp	r3, #1
 8006b12:	d13a      	bne.n	8006b8a <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	2225      	movs	r2, #37	@ 0x25
 8006b18:	2102      	movs	r1, #2
 8006b1a:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	681a      	ldr	r2, [r3, #0]
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	2101      	movs	r1, #1
 8006b2e:	438a      	bics	r2, r1
 8006b30:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	687a      	ldr	r2, [r7, #4]
 8006b36:	68b9      	ldr	r1, [r7, #8]
 8006b38:	68f8      	ldr	r0, [r7, #12]
 8006b3a:	f000 f976 	bl	8006e2a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d008      	beq.n	8006b58 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	681a      	ldr	r2, [r3, #0]
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	210e      	movs	r1, #14
 8006b52:	430a      	orrs	r2, r1
 8006b54:	601a      	str	r2, [r3, #0]
 8006b56:	e00f      	b.n	8006b78 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	681a      	ldr	r2, [r3, #0]
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	2104      	movs	r1, #4
 8006b64:	438a      	bics	r2, r1
 8006b66:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	681a      	ldr	r2, [r3, #0]
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	210a      	movs	r1, #10
 8006b74:	430a      	orrs	r2, r1
 8006b76:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	681a      	ldr	r2, [r3, #0]
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	2101      	movs	r1, #1
 8006b84:	430a      	orrs	r2, r1
 8006b86:	601a      	str	r2, [r3, #0]
 8006b88:	e007      	b.n	8006b9a <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	2224      	movs	r2, #36	@ 0x24
 8006b8e:	2100      	movs	r1, #0
 8006b90:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8006b92:	2317      	movs	r3, #23
 8006b94:	18fb      	adds	r3, r7, r3
 8006b96:	2202      	movs	r2, #2
 8006b98:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8006b9a:	2317      	movs	r3, #23
 8006b9c:	18fb      	adds	r3, r7, r3
 8006b9e:	781b      	ldrb	r3, [r3, #0]
}
 8006ba0:	0018      	movs	r0, r3
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	b006      	add	sp, #24
 8006ba6:	bd80      	pop	{r7, pc}

08006ba8 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b084      	sub	sp, #16
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006bb0:	230f      	movs	r3, #15
 8006bb2:	18fb      	adds	r3, r7, r3
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2225      	movs	r2, #37	@ 0x25
 8006bbc:	5c9b      	ldrb	r3, [r3, r2]
 8006bbe:	b2db      	uxtb	r3, r3
 8006bc0:	2b02      	cmp	r3, #2
 8006bc2:	d008      	beq.n	8006bd6 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2204      	movs	r2, #4
 8006bc8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2224      	movs	r2, #36	@ 0x24
 8006bce:	2100      	movs	r1, #0
 8006bd0:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	e024      	b.n	8006c20 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	681a      	ldr	r2, [r3, #0]
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	210e      	movs	r1, #14
 8006be2:	438a      	bics	r2, r1
 8006be4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	681a      	ldr	r2, [r3, #0]
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	2101      	movs	r1, #1
 8006bf2:	438a      	bics	r2, r1
 8006bf4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006bfa:	221c      	movs	r2, #28
 8006bfc:	401a      	ands	r2, r3
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c02:	2101      	movs	r1, #1
 8006c04:	4091      	lsls	r1, r2
 8006c06:	000a      	movs	r2, r1
 8006c08:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2225      	movs	r2, #37	@ 0x25
 8006c0e:	2101      	movs	r1, #1
 8006c10:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2224      	movs	r2, #36	@ 0x24
 8006c16:	2100      	movs	r1, #0
 8006c18:	5499      	strb	r1, [r3, r2]

    return status;
 8006c1a:	230f      	movs	r3, #15
 8006c1c:	18fb      	adds	r3, r7, r3
 8006c1e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006c20:	0018      	movs	r0, r3
 8006c22:	46bd      	mov	sp, r7
 8006c24:	b004      	add	sp, #16
 8006c26:	bd80      	pop	{r7, pc}

08006c28 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b084      	sub	sp, #16
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006c30:	210f      	movs	r1, #15
 8006c32:	187b      	adds	r3, r7, r1
 8006c34:	2200      	movs	r2, #0
 8006c36:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2225      	movs	r2, #37	@ 0x25
 8006c3c:	5c9b      	ldrb	r3, [r3, r2]
 8006c3e:	b2db      	uxtb	r3, r3
 8006c40:	2b02      	cmp	r3, #2
 8006c42:	d006      	beq.n	8006c52 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2204      	movs	r2, #4
 8006c48:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8006c4a:	187b      	adds	r3, r7, r1
 8006c4c:	2201      	movs	r2, #1
 8006c4e:	701a      	strb	r2, [r3, #0]
 8006c50:	e02a      	b.n	8006ca8 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	681a      	ldr	r2, [r3, #0]
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	210e      	movs	r1, #14
 8006c5e:	438a      	bics	r2, r1
 8006c60:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	681a      	ldr	r2, [r3, #0]
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	2101      	movs	r1, #1
 8006c6e:	438a      	bics	r2, r1
 8006c70:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c76:	221c      	movs	r2, #28
 8006c78:	401a      	ands	r2, r3
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c7e:	2101      	movs	r1, #1
 8006c80:	4091      	lsls	r1, r2
 8006c82:	000a      	movs	r2, r1
 8006c84:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2225      	movs	r2, #37	@ 0x25
 8006c8a:	2101      	movs	r1, #1
 8006c8c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2224      	movs	r2, #36	@ 0x24
 8006c92:	2100      	movs	r1, #0
 8006c94:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d004      	beq.n	8006ca8 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ca2:	687a      	ldr	r2, [r7, #4]
 8006ca4:	0010      	movs	r0, r2
 8006ca6:	4798      	blx	r3
    }
  }
  return status;
 8006ca8:	230f      	movs	r3, #15
 8006caa:	18fb      	adds	r3, r7, r3
 8006cac:	781b      	ldrb	r3, [r3, #0]
}
 8006cae:	0018      	movs	r0, r3
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	b004      	add	sp, #16
 8006cb4:	bd80      	pop	{r7, pc}

08006cb6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006cb6:	b580      	push	{r7, lr}
 8006cb8:	b084      	sub	sp, #16
 8006cba:	af00      	add	r7, sp, #0
 8006cbc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006cd2:	221c      	movs	r2, #28
 8006cd4:	4013      	ands	r3, r2
 8006cd6:	2204      	movs	r2, #4
 8006cd8:	409a      	lsls	r2, r3
 8006cda:	0013      	movs	r3, r2
 8006cdc:	68fa      	ldr	r2, [r7, #12]
 8006cde:	4013      	ands	r3, r2
 8006ce0:	d026      	beq.n	8006d30 <HAL_DMA_IRQHandler+0x7a>
 8006ce2:	68bb      	ldr	r3, [r7, #8]
 8006ce4:	2204      	movs	r2, #4
 8006ce6:	4013      	ands	r3, r2
 8006ce8:	d022      	beq.n	8006d30 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	2220      	movs	r2, #32
 8006cf2:	4013      	ands	r3, r2
 8006cf4:	d107      	bne.n	8006d06 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	681a      	ldr	r2, [r3, #0]
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	2104      	movs	r1, #4
 8006d02:	438a      	bics	r2, r1
 8006d04:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d0a:	221c      	movs	r2, #28
 8006d0c:	401a      	ands	r2, r3
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d12:	2104      	movs	r1, #4
 8006d14:	4091      	lsls	r1, r2
 8006d16:	000a      	movs	r2, r1
 8006d18:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d100      	bne.n	8006d24 <HAL_DMA_IRQHandler+0x6e>
 8006d22:	e071      	b.n	8006e08 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d28:	687a      	ldr	r2, [r7, #4]
 8006d2a:	0010      	movs	r0, r2
 8006d2c:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 8006d2e:	e06b      	b.n	8006e08 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d34:	221c      	movs	r2, #28
 8006d36:	4013      	ands	r3, r2
 8006d38:	2202      	movs	r2, #2
 8006d3a:	409a      	lsls	r2, r3
 8006d3c:	0013      	movs	r3, r2
 8006d3e:	68fa      	ldr	r2, [r7, #12]
 8006d40:	4013      	ands	r3, r2
 8006d42:	d02d      	beq.n	8006da0 <HAL_DMA_IRQHandler+0xea>
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	2202      	movs	r2, #2
 8006d48:	4013      	ands	r3, r2
 8006d4a:	d029      	beq.n	8006da0 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	2220      	movs	r2, #32
 8006d54:	4013      	ands	r3, r2
 8006d56:	d10b      	bne.n	8006d70 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	681a      	ldr	r2, [r3, #0]
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	210a      	movs	r1, #10
 8006d64:	438a      	bics	r2, r1
 8006d66:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2225      	movs	r2, #37	@ 0x25
 8006d6c:	2101      	movs	r1, #1
 8006d6e:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d74:	221c      	movs	r2, #28
 8006d76:	401a      	ands	r2, r3
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d7c:	2102      	movs	r1, #2
 8006d7e:	4091      	lsls	r1, r2
 8006d80:	000a      	movs	r2, r1
 8006d82:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2224      	movs	r2, #36	@ 0x24
 8006d88:	2100      	movs	r1, #0
 8006d8a:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d039      	beq.n	8006e08 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d98:	687a      	ldr	r2, [r7, #4]
 8006d9a:	0010      	movs	r0, r2
 8006d9c:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8006d9e:	e033      	b.n	8006e08 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006da4:	221c      	movs	r2, #28
 8006da6:	4013      	ands	r3, r2
 8006da8:	2208      	movs	r2, #8
 8006daa:	409a      	lsls	r2, r3
 8006dac:	0013      	movs	r3, r2
 8006dae:	68fa      	ldr	r2, [r7, #12]
 8006db0:	4013      	ands	r3, r2
 8006db2:	d02a      	beq.n	8006e0a <HAL_DMA_IRQHandler+0x154>
 8006db4:	68bb      	ldr	r3, [r7, #8]
 8006db6:	2208      	movs	r2, #8
 8006db8:	4013      	ands	r3, r2
 8006dba:	d026      	beq.n	8006e0a <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	681a      	ldr	r2, [r3, #0]
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	210e      	movs	r1, #14
 8006dc8:	438a      	bics	r2, r1
 8006dca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006dd0:	221c      	movs	r2, #28
 8006dd2:	401a      	ands	r2, r3
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dd8:	2101      	movs	r1, #1
 8006dda:	4091      	lsls	r1, r2
 8006ddc:	000a      	movs	r2, r1
 8006dde:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2201      	movs	r2, #1
 8006de4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2225      	movs	r2, #37	@ 0x25
 8006dea:	2101      	movs	r1, #1
 8006dec:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2224      	movs	r2, #36	@ 0x24
 8006df2:	2100      	movs	r1, #0
 8006df4:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d005      	beq.n	8006e0a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e02:	687a      	ldr	r2, [r7, #4]
 8006e04:	0010      	movs	r0, r2
 8006e06:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8006e08:	46c0      	nop			@ (mov r8, r8)
 8006e0a:	46c0      	nop			@ (mov r8, r8)
}
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	b004      	add	sp, #16
 8006e10:	bd80      	pop	{r7, pc}

08006e12 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8006e12:	b580      	push	{r7, lr}
 8006e14:	b082      	sub	sp, #8
 8006e16:	af00      	add	r7, sp, #0
 8006e18:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2225      	movs	r2, #37	@ 0x25
 8006e1e:	5c9b      	ldrb	r3, [r3, r2]
 8006e20:	b2db      	uxtb	r3, r3
}
 8006e22:	0018      	movs	r0, r3
 8006e24:	46bd      	mov	sp, r7
 8006e26:	b002      	add	sp, #8
 8006e28:	bd80      	pop	{r7, pc}

08006e2a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006e2a:	b580      	push	{r7, lr}
 8006e2c:	b084      	sub	sp, #16
 8006e2e:	af00      	add	r7, sp, #0
 8006e30:	60f8      	str	r0, [r7, #12]
 8006e32:	60b9      	str	r1, [r7, #8]
 8006e34:	607a      	str	r2, [r7, #4]
 8006e36:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e3c:	221c      	movs	r2, #28
 8006e3e:	401a      	ands	r2, r3
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e44:	2101      	movs	r1, #1
 8006e46:	4091      	lsls	r1, r2
 8006e48:	000a      	movs	r2, r1
 8006e4a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	683a      	ldr	r2, [r7, #0]
 8006e52:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	689b      	ldr	r3, [r3, #8]
 8006e58:	2b10      	cmp	r3, #16
 8006e5a:	d108      	bne.n	8006e6e <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	687a      	ldr	r2, [r7, #4]
 8006e62:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	68ba      	ldr	r2, [r7, #8]
 8006e6a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006e6c:	e007      	b.n	8006e7e <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	68ba      	ldr	r2, [r7, #8]
 8006e74:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	687a      	ldr	r2, [r7, #4]
 8006e7c:	60da      	str	r2, [r3, #12]
}
 8006e7e:	46c0      	nop			@ (mov r8, r8)
 8006e80:	46bd      	mov	sp, r7
 8006e82:	b004      	add	sp, #16
 8006e84:	bd80      	pop	{r7, pc}
	...

08006e88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b086      	sub	sp, #24
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
 8006e90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006e92:	2300      	movs	r3, #0
 8006e94:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006e96:	2300      	movs	r3, #0
 8006e98:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8006e9e:	e155      	b.n	800714c <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	2101      	movs	r1, #1
 8006ea6:	697a      	ldr	r2, [r7, #20]
 8006ea8:	4091      	lsls	r1, r2
 8006eaa:	000a      	movs	r2, r1
 8006eac:	4013      	ands	r3, r2
 8006eae:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d100      	bne.n	8006eb8 <HAL_GPIO_Init+0x30>
 8006eb6:	e146      	b.n	8007146 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	685b      	ldr	r3, [r3, #4]
 8006ebc:	2203      	movs	r2, #3
 8006ebe:	4013      	ands	r3, r2
 8006ec0:	2b01      	cmp	r3, #1
 8006ec2:	d005      	beq.n	8006ed0 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	685b      	ldr	r3, [r3, #4]
 8006ec8:	2203      	movs	r2, #3
 8006eca:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006ecc:	2b02      	cmp	r3, #2
 8006ece:	d130      	bne.n	8006f32 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	689b      	ldr	r3, [r3, #8]
 8006ed4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8006ed6:	697b      	ldr	r3, [r7, #20]
 8006ed8:	005b      	lsls	r3, r3, #1
 8006eda:	2203      	movs	r2, #3
 8006edc:	409a      	lsls	r2, r3
 8006ede:	0013      	movs	r3, r2
 8006ee0:	43da      	mvns	r2, r3
 8006ee2:	693b      	ldr	r3, [r7, #16]
 8006ee4:	4013      	ands	r3, r2
 8006ee6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	68da      	ldr	r2, [r3, #12]
 8006eec:	697b      	ldr	r3, [r7, #20]
 8006eee:	005b      	lsls	r3, r3, #1
 8006ef0:	409a      	lsls	r2, r3
 8006ef2:	0013      	movs	r3, r2
 8006ef4:	693a      	ldr	r2, [r7, #16]
 8006ef6:	4313      	orrs	r3, r2
 8006ef8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	693a      	ldr	r2, [r7, #16]
 8006efe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	685b      	ldr	r3, [r3, #4]
 8006f04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006f06:	2201      	movs	r2, #1
 8006f08:	697b      	ldr	r3, [r7, #20]
 8006f0a:	409a      	lsls	r2, r3
 8006f0c:	0013      	movs	r3, r2
 8006f0e:	43da      	mvns	r2, r3
 8006f10:	693b      	ldr	r3, [r7, #16]
 8006f12:	4013      	ands	r3, r2
 8006f14:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	685b      	ldr	r3, [r3, #4]
 8006f1a:	091b      	lsrs	r3, r3, #4
 8006f1c:	2201      	movs	r2, #1
 8006f1e:	401a      	ands	r2, r3
 8006f20:	697b      	ldr	r3, [r7, #20]
 8006f22:	409a      	lsls	r2, r3
 8006f24:	0013      	movs	r3, r2
 8006f26:	693a      	ldr	r2, [r7, #16]
 8006f28:	4313      	orrs	r3, r2
 8006f2a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	693a      	ldr	r2, [r7, #16]
 8006f30:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	685b      	ldr	r3, [r3, #4]
 8006f36:	2203      	movs	r2, #3
 8006f38:	4013      	ands	r3, r2
 8006f3a:	2b03      	cmp	r3, #3
 8006f3c:	d017      	beq.n	8006f6e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	68db      	ldr	r3, [r3, #12]
 8006f42:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006f44:	697b      	ldr	r3, [r7, #20]
 8006f46:	005b      	lsls	r3, r3, #1
 8006f48:	2203      	movs	r2, #3
 8006f4a:	409a      	lsls	r2, r3
 8006f4c:	0013      	movs	r3, r2
 8006f4e:	43da      	mvns	r2, r3
 8006f50:	693b      	ldr	r3, [r7, #16]
 8006f52:	4013      	ands	r3, r2
 8006f54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	689a      	ldr	r2, [r3, #8]
 8006f5a:	697b      	ldr	r3, [r7, #20]
 8006f5c:	005b      	lsls	r3, r3, #1
 8006f5e:	409a      	lsls	r2, r3
 8006f60:	0013      	movs	r3, r2
 8006f62:	693a      	ldr	r2, [r7, #16]
 8006f64:	4313      	orrs	r3, r2
 8006f66:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	693a      	ldr	r2, [r7, #16]
 8006f6c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	685b      	ldr	r3, [r3, #4]
 8006f72:	2203      	movs	r2, #3
 8006f74:	4013      	ands	r3, r2
 8006f76:	2b02      	cmp	r3, #2
 8006f78:	d123      	bne.n	8006fc2 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006f7a:	697b      	ldr	r3, [r7, #20]
 8006f7c:	08da      	lsrs	r2, r3, #3
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	3208      	adds	r2, #8
 8006f82:	0092      	lsls	r2, r2, #2
 8006f84:	58d3      	ldr	r3, [r2, r3]
 8006f86:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8006f88:	697b      	ldr	r3, [r7, #20]
 8006f8a:	2207      	movs	r2, #7
 8006f8c:	4013      	ands	r3, r2
 8006f8e:	009b      	lsls	r3, r3, #2
 8006f90:	220f      	movs	r2, #15
 8006f92:	409a      	lsls	r2, r3
 8006f94:	0013      	movs	r3, r2
 8006f96:	43da      	mvns	r2, r3
 8006f98:	693b      	ldr	r3, [r7, #16]
 8006f9a:	4013      	ands	r3, r2
 8006f9c:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	691a      	ldr	r2, [r3, #16]
 8006fa2:	697b      	ldr	r3, [r7, #20]
 8006fa4:	2107      	movs	r1, #7
 8006fa6:	400b      	ands	r3, r1
 8006fa8:	009b      	lsls	r3, r3, #2
 8006faa:	409a      	lsls	r2, r3
 8006fac:	0013      	movs	r3, r2
 8006fae:	693a      	ldr	r2, [r7, #16]
 8006fb0:	4313      	orrs	r3, r2
 8006fb2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8006fb4:	697b      	ldr	r3, [r7, #20]
 8006fb6:	08da      	lsrs	r2, r3, #3
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	3208      	adds	r2, #8
 8006fbc:	0092      	lsls	r2, r2, #2
 8006fbe:	6939      	ldr	r1, [r7, #16]
 8006fc0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006fc8:	697b      	ldr	r3, [r7, #20]
 8006fca:	005b      	lsls	r3, r3, #1
 8006fcc:	2203      	movs	r2, #3
 8006fce:	409a      	lsls	r2, r3
 8006fd0:	0013      	movs	r3, r2
 8006fd2:	43da      	mvns	r2, r3
 8006fd4:	693b      	ldr	r3, [r7, #16]
 8006fd6:	4013      	ands	r3, r2
 8006fd8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	685b      	ldr	r3, [r3, #4]
 8006fde:	2203      	movs	r2, #3
 8006fe0:	401a      	ands	r2, r3
 8006fe2:	697b      	ldr	r3, [r7, #20]
 8006fe4:	005b      	lsls	r3, r3, #1
 8006fe6:	409a      	lsls	r2, r3
 8006fe8:	0013      	movs	r3, r2
 8006fea:	693a      	ldr	r2, [r7, #16]
 8006fec:	4313      	orrs	r3, r2
 8006fee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	693a      	ldr	r2, [r7, #16]
 8006ff4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	685a      	ldr	r2, [r3, #4]
 8006ffa:	23c0      	movs	r3, #192	@ 0xc0
 8006ffc:	029b      	lsls	r3, r3, #10
 8006ffe:	4013      	ands	r3, r2
 8007000:	d100      	bne.n	8007004 <HAL_GPIO_Init+0x17c>
 8007002:	e0a0      	b.n	8007146 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007004:	4b57      	ldr	r3, [pc, #348]	@ (8007164 <HAL_GPIO_Init+0x2dc>)
 8007006:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007008:	4b56      	ldr	r3, [pc, #344]	@ (8007164 <HAL_GPIO_Init+0x2dc>)
 800700a:	2101      	movs	r1, #1
 800700c:	430a      	orrs	r2, r1
 800700e:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8007010:	4a55      	ldr	r2, [pc, #340]	@ (8007168 <HAL_GPIO_Init+0x2e0>)
 8007012:	697b      	ldr	r3, [r7, #20]
 8007014:	089b      	lsrs	r3, r3, #2
 8007016:	3302      	adds	r3, #2
 8007018:	009b      	lsls	r3, r3, #2
 800701a:	589b      	ldr	r3, [r3, r2]
 800701c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800701e:	697b      	ldr	r3, [r7, #20]
 8007020:	2203      	movs	r2, #3
 8007022:	4013      	ands	r3, r2
 8007024:	009b      	lsls	r3, r3, #2
 8007026:	220f      	movs	r2, #15
 8007028:	409a      	lsls	r2, r3
 800702a:	0013      	movs	r3, r2
 800702c:	43da      	mvns	r2, r3
 800702e:	693b      	ldr	r3, [r7, #16]
 8007030:	4013      	ands	r3, r2
 8007032:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8007034:	687a      	ldr	r2, [r7, #4]
 8007036:	23a0      	movs	r3, #160	@ 0xa0
 8007038:	05db      	lsls	r3, r3, #23
 800703a:	429a      	cmp	r2, r3
 800703c:	d01f      	beq.n	800707e <HAL_GPIO_Init+0x1f6>
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	4a4a      	ldr	r2, [pc, #296]	@ (800716c <HAL_GPIO_Init+0x2e4>)
 8007042:	4293      	cmp	r3, r2
 8007044:	d019      	beq.n	800707a <HAL_GPIO_Init+0x1f2>
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	4a49      	ldr	r2, [pc, #292]	@ (8007170 <HAL_GPIO_Init+0x2e8>)
 800704a:	4293      	cmp	r3, r2
 800704c:	d013      	beq.n	8007076 <HAL_GPIO_Init+0x1ee>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	4a48      	ldr	r2, [pc, #288]	@ (8007174 <HAL_GPIO_Init+0x2ec>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d00d      	beq.n	8007072 <HAL_GPIO_Init+0x1ea>
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	4a47      	ldr	r2, [pc, #284]	@ (8007178 <HAL_GPIO_Init+0x2f0>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d007      	beq.n	800706e <HAL_GPIO_Init+0x1e6>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	4a46      	ldr	r2, [pc, #280]	@ (800717c <HAL_GPIO_Init+0x2f4>)
 8007062:	4293      	cmp	r3, r2
 8007064:	d101      	bne.n	800706a <HAL_GPIO_Init+0x1e2>
 8007066:	2305      	movs	r3, #5
 8007068:	e00a      	b.n	8007080 <HAL_GPIO_Init+0x1f8>
 800706a:	2306      	movs	r3, #6
 800706c:	e008      	b.n	8007080 <HAL_GPIO_Init+0x1f8>
 800706e:	2304      	movs	r3, #4
 8007070:	e006      	b.n	8007080 <HAL_GPIO_Init+0x1f8>
 8007072:	2303      	movs	r3, #3
 8007074:	e004      	b.n	8007080 <HAL_GPIO_Init+0x1f8>
 8007076:	2302      	movs	r3, #2
 8007078:	e002      	b.n	8007080 <HAL_GPIO_Init+0x1f8>
 800707a:	2301      	movs	r3, #1
 800707c:	e000      	b.n	8007080 <HAL_GPIO_Init+0x1f8>
 800707e:	2300      	movs	r3, #0
 8007080:	697a      	ldr	r2, [r7, #20]
 8007082:	2103      	movs	r1, #3
 8007084:	400a      	ands	r2, r1
 8007086:	0092      	lsls	r2, r2, #2
 8007088:	4093      	lsls	r3, r2
 800708a:	693a      	ldr	r2, [r7, #16]
 800708c:	4313      	orrs	r3, r2
 800708e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007090:	4935      	ldr	r1, [pc, #212]	@ (8007168 <HAL_GPIO_Init+0x2e0>)
 8007092:	697b      	ldr	r3, [r7, #20]
 8007094:	089b      	lsrs	r3, r3, #2
 8007096:	3302      	adds	r3, #2
 8007098:	009b      	lsls	r3, r3, #2
 800709a:	693a      	ldr	r2, [r7, #16]
 800709c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800709e:	4b38      	ldr	r3, [pc, #224]	@ (8007180 <HAL_GPIO_Init+0x2f8>)
 80070a0:	689b      	ldr	r3, [r3, #8]
 80070a2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	43da      	mvns	r2, r3
 80070a8:	693b      	ldr	r3, [r7, #16]
 80070aa:	4013      	ands	r3, r2
 80070ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	685a      	ldr	r2, [r3, #4]
 80070b2:	2380      	movs	r3, #128	@ 0x80
 80070b4:	035b      	lsls	r3, r3, #13
 80070b6:	4013      	ands	r3, r2
 80070b8:	d003      	beq.n	80070c2 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 80070ba:	693a      	ldr	r2, [r7, #16]
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	4313      	orrs	r3, r2
 80070c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80070c2:	4b2f      	ldr	r3, [pc, #188]	@ (8007180 <HAL_GPIO_Init+0x2f8>)
 80070c4:	693a      	ldr	r2, [r7, #16]
 80070c6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80070c8:	4b2d      	ldr	r3, [pc, #180]	@ (8007180 <HAL_GPIO_Init+0x2f8>)
 80070ca:	68db      	ldr	r3, [r3, #12]
 80070cc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	43da      	mvns	r2, r3
 80070d2:	693b      	ldr	r3, [r7, #16]
 80070d4:	4013      	ands	r3, r2
 80070d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	685a      	ldr	r2, [r3, #4]
 80070dc:	2380      	movs	r3, #128	@ 0x80
 80070de:	039b      	lsls	r3, r3, #14
 80070e0:	4013      	ands	r3, r2
 80070e2:	d003      	beq.n	80070ec <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80070e4:	693a      	ldr	r2, [r7, #16]
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	4313      	orrs	r3, r2
 80070ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80070ec:	4b24      	ldr	r3, [pc, #144]	@ (8007180 <HAL_GPIO_Init+0x2f8>)
 80070ee:	693a      	ldr	r2, [r7, #16]
 80070f0:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 80070f2:	4b23      	ldr	r3, [pc, #140]	@ (8007180 <HAL_GPIO_Init+0x2f8>)
 80070f4:	685b      	ldr	r3, [r3, #4]
 80070f6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	43da      	mvns	r2, r3
 80070fc:	693b      	ldr	r3, [r7, #16]
 80070fe:	4013      	ands	r3, r2
 8007100:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	685a      	ldr	r2, [r3, #4]
 8007106:	2380      	movs	r3, #128	@ 0x80
 8007108:	029b      	lsls	r3, r3, #10
 800710a:	4013      	ands	r3, r2
 800710c:	d003      	beq.n	8007116 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 800710e:	693a      	ldr	r2, [r7, #16]
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	4313      	orrs	r3, r2
 8007114:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8007116:	4b1a      	ldr	r3, [pc, #104]	@ (8007180 <HAL_GPIO_Init+0x2f8>)
 8007118:	693a      	ldr	r2, [r7, #16]
 800711a:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800711c:	4b18      	ldr	r3, [pc, #96]	@ (8007180 <HAL_GPIO_Init+0x2f8>)
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	43da      	mvns	r2, r3
 8007126:	693b      	ldr	r3, [r7, #16]
 8007128:	4013      	ands	r3, r2
 800712a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	685a      	ldr	r2, [r3, #4]
 8007130:	2380      	movs	r3, #128	@ 0x80
 8007132:	025b      	lsls	r3, r3, #9
 8007134:	4013      	ands	r3, r2
 8007136:	d003      	beq.n	8007140 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8007138:	693a      	ldr	r2, [r7, #16]
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	4313      	orrs	r3, r2
 800713e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8007140:	4b0f      	ldr	r3, [pc, #60]	@ (8007180 <HAL_GPIO_Init+0x2f8>)
 8007142:	693a      	ldr	r2, [r7, #16]
 8007144:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8007146:	697b      	ldr	r3, [r7, #20]
 8007148:	3301      	adds	r3, #1
 800714a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	681a      	ldr	r2, [r3, #0]
 8007150:	697b      	ldr	r3, [r7, #20]
 8007152:	40da      	lsrs	r2, r3
 8007154:	1e13      	subs	r3, r2, #0
 8007156:	d000      	beq.n	800715a <HAL_GPIO_Init+0x2d2>
 8007158:	e6a2      	b.n	8006ea0 <HAL_GPIO_Init+0x18>
  }
}
 800715a:	46c0      	nop			@ (mov r8, r8)
 800715c:	46c0      	nop			@ (mov r8, r8)
 800715e:	46bd      	mov	sp, r7
 8007160:	b006      	add	sp, #24
 8007162:	bd80      	pop	{r7, pc}
 8007164:	40021000 	.word	0x40021000
 8007168:	40010000 	.word	0x40010000
 800716c:	50000400 	.word	0x50000400
 8007170:	50000800 	.word	0x50000800
 8007174:	50000c00 	.word	0x50000c00
 8007178:	50001000 	.word	0x50001000
 800717c:	50001c00 	.word	0x50001c00
 8007180:	40010400 	.word	0x40010400

08007184 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b082      	sub	sp, #8
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
 800718c:	0008      	movs	r0, r1
 800718e:	0011      	movs	r1, r2
 8007190:	1cbb      	adds	r3, r7, #2
 8007192:	1c02      	adds	r2, r0, #0
 8007194:	801a      	strh	r2, [r3, #0]
 8007196:	1c7b      	adds	r3, r7, #1
 8007198:	1c0a      	adds	r2, r1, #0
 800719a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800719c:	1c7b      	adds	r3, r7, #1
 800719e:	781b      	ldrb	r3, [r3, #0]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d004      	beq.n	80071ae <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80071a4:	1cbb      	adds	r3, r7, #2
 80071a6:	881a      	ldrh	r2, [r3, #0]
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80071ac:	e003      	b.n	80071b6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80071ae:	1cbb      	adds	r3, r7, #2
 80071b0:	881a      	ldrh	r2, [r3, #0]
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80071b6:	46c0      	nop			@ (mov r8, r8)
 80071b8:	46bd      	mov	sp, r7
 80071ba:	b002      	add	sp, #8
 80071bc:	bd80      	pop	{r7, pc}

080071be <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80071be:	b580      	push	{r7, lr}
 80071c0:	b084      	sub	sp, #16
 80071c2:	af00      	add	r7, sp, #0
 80071c4:	6078      	str	r0, [r7, #4]
 80071c6:	000a      	movs	r2, r1
 80071c8:	1cbb      	adds	r3, r7, #2
 80071ca:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	695b      	ldr	r3, [r3, #20]
 80071d0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80071d2:	1cbb      	adds	r3, r7, #2
 80071d4:	881b      	ldrh	r3, [r3, #0]
 80071d6:	68fa      	ldr	r2, [r7, #12]
 80071d8:	4013      	ands	r3, r2
 80071da:	041a      	lsls	r2, r3, #16
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	43db      	mvns	r3, r3
 80071e0:	1cb9      	adds	r1, r7, #2
 80071e2:	8809      	ldrh	r1, [r1, #0]
 80071e4:	400b      	ands	r3, r1
 80071e6:	431a      	orrs	r2, r3
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	619a      	str	r2, [r3, #24]
}
 80071ec:	46c0      	nop			@ (mov r8, r8)
 80071ee:	46bd      	mov	sp, r7
 80071f0:	b004      	add	sp, #16
 80071f2:	bd80      	pop	{r7, pc}

080071f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b082      	sub	sp, #8
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d101      	bne.n	8007206 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007202:	2301      	movs	r3, #1
 8007204:	e082      	b.n	800730c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2241      	movs	r2, #65	@ 0x41
 800720a:	5c9b      	ldrb	r3, [r3, r2]
 800720c:	b2db      	uxtb	r3, r3
 800720e:	2b00      	cmp	r3, #0
 8007210:	d107      	bne.n	8007222 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2240      	movs	r2, #64	@ 0x40
 8007216:	2100      	movs	r1, #0
 8007218:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	0018      	movs	r0, r3
 800721e:	f7fc fd7b 	bl	8003d18 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2241      	movs	r2, #65	@ 0x41
 8007226:	2124      	movs	r1, #36	@ 0x24
 8007228:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	681a      	ldr	r2, [r3, #0]
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	2101      	movs	r1, #1
 8007236:	438a      	bics	r2, r1
 8007238:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	685a      	ldr	r2, [r3, #4]
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	4934      	ldr	r1, [pc, #208]	@ (8007314 <HAL_I2C_Init+0x120>)
 8007244:	400a      	ands	r2, r1
 8007246:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	689a      	ldr	r2, [r3, #8]
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	4931      	ldr	r1, [pc, #196]	@ (8007318 <HAL_I2C_Init+0x124>)
 8007254:	400a      	ands	r2, r1
 8007256:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	68db      	ldr	r3, [r3, #12]
 800725c:	2b01      	cmp	r3, #1
 800725e:	d108      	bne.n	8007272 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	689a      	ldr	r2, [r3, #8]
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	2180      	movs	r1, #128	@ 0x80
 800726a:	0209      	lsls	r1, r1, #8
 800726c:	430a      	orrs	r2, r1
 800726e:	609a      	str	r2, [r3, #8]
 8007270:	e007      	b.n	8007282 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	689a      	ldr	r2, [r3, #8]
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	2184      	movs	r1, #132	@ 0x84
 800727c:	0209      	lsls	r1, r1, #8
 800727e:	430a      	orrs	r2, r1
 8007280:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	68db      	ldr	r3, [r3, #12]
 8007286:	2b02      	cmp	r3, #2
 8007288:	d104      	bne.n	8007294 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	2280      	movs	r2, #128	@ 0x80
 8007290:	0112      	lsls	r2, r2, #4
 8007292:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	685a      	ldr	r2, [r3, #4]
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	491f      	ldr	r1, [pc, #124]	@ (800731c <HAL_I2C_Init+0x128>)
 80072a0:	430a      	orrs	r2, r1
 80072a2:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	68da      	ldr	r2, [r3, #12]
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	491a      	ldr	r1, [pc, #104]	@ (8007318 <HAL_I2C_Init+0x124>)
 80072b0:	400a      	ands	r2, r1
 80072b2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	691a      	ldr	r2, [r3, #16]
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	695b      	ldr	r3, [r3, #20]
 80072bc:	431a      	orrs	r2, r3
 80072be:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	699b      	ldr	r3, [r3, #24]
 80072c4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	430a      	orrs	r2, r1
 80072cc:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	69d9      	ldr	r1, [r3, #28]
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6a1a      	ldr	r2, [r3, #32]
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	430a      	orrs	r2, r1
 80072dc:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	681a      	ldr	r2, [r3, #0]
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	2101      	movs	r1, #1
 80072ea:	430a      	orrs	r2, r1
 80072ec:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2200      	movs	r2, #0
 80072f2:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2241      	movs	r2, #65	@ 0x41
 80072f8:	2120      	movs	r1, #32
 80072fa:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2200      	movs	r2, #0
 8007300:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2242      	movs	r2, #66	@ 0x42
 8007306:	2100      	movs	r1, #0
 8007308:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800730a:	2300      	movs	r3, #0
}
 800730c:	0018      	movs	r0, r3
 800730e:	46bd      	mov	sp, r7
 8007310:	b002      	add	sp, #8
 8007312:	bd80      	pop	{r7, pc}
 8007314:	f0ffffff 	.word	0xf0ffffff
 8007318:	ffff7fff 	.word	0xffff7fff
 800731c:	02008000 	.word	0x02008000

08007320 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 8007320:	b5b0      	push	{r4, r5, r7, lr}
 8007322:	b088      	sub	sp, #32
 8007324:	af02      	add	r7, sp, #8
 8007326:	60f8      	str	r0, [r7, #12]
 8007328:	0008      	movs	r0, r1
 800732a:	607a      	str	r2, [r7, #4]
 800732c:	0019      	movs	r1, r3
 800732e:	230a      	movs	r3, #10
 8007330:	18fb      	adds	r3, r7, r3
 8007332:	1c02      	adds	r2, r0, #0
 8007334:	801a      	strh	r2, [r3, #0]
 8007336:	2308      	movs	r3, #8
 8007338:	18fb      	adds	r3, r7, r3
 800733a:	1c0a      	adds	r2, r1, #0
 800733c:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	2241      	movs	r2, #65	@ 0x41
 8007342:	5c9b      	ldrb	r3, [r3, r2]
 8007344:	b2db      	uxtb	r3, r3
 8007346:	2b20      	cmp	r3, #32
 8007348:	d000      	beq.n	800734c <HAL_I2C_Master_Transmit_DMA+0x2c>
 800734a:	e0dd      	b.n	8007508 <HAL_I2C_Master_Transmit_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	699a      	ldr	r2, [r3, #24]
 8007352:	2380      	movs	r3, #128	@ 0x80
 8007354:	021b      	lsls	r3, r3, #8
 8007356:	401a      	ands	r2, r3
 8007358:	2380      	movs	r3, #128	@ 0x80
 800735a:	021b      	lsls	r3, r3, #8
 800735c:	429a      	cmp	r2, r3
 800735e:	d101      	bne.n	8007364 <HAL_I2C_Master_Transmit_DMA+0x44>
    {
      return HAL_BUSY;
 8007360:	2302      	movs	r3, #2
 8007362:	e0d2      	b.n	800750a <HAL_I2C_Master_Transmit_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	2240      	movs	r2, #64	@ 0x40
 8007368:	5c9b      	ldrb	r3, [r3, r2]
 800736a:	2b01      	cmp	r3, #1
 800736c:	d101      	bne.n	8007372 <HAL_I2C_Master_Transmit_DMA+0x52>
 800736e:	2302      	movs	r3, #2
 8007370:	e0cb      	b.n	800750a <HAL_I2C_Master_Transmit_DMA+0x1ea>
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	2240      	movs	r2, #64	@ 0x40
 8007376:	2101      	movs	r1, #1
 8007378:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	2241      	movs	r2, #65	@ 0x41
 800737e:	2121      	movs	r1, #33	@ 0x21
 8007380:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	2242      	movs	r2, #66	@ 0x42
 8007386:	2110      	movs	r1, #16
 8007388:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	2200      	movs	r2, #0
 800738e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	687a      	ldr	r2, [r7, #4]
 8007394:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	2208      	movs	r2, #8
 800739a:	18ba      	adds	r2, r7, r2
 800739c:	8812      	ldrh	r2, [r2, #0]
 800739e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	4a5c      	ldr	r2, [pc, #368]	@ (8007514 <HAL_I2C_Master_Transmit_DMA+0x1f4>)
 80073a4:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	4a5b      	ldr	r2, [pc, #364]	@ (8007518 <HAL_I2C_Master_Transmit_DMA+0x1f8>)
 80073aa:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80073b0:	b29b      	uxth	r3, r3
 80073b2:	2bff      	cmp	r3, #255	@ 0xff
 80073b4:	d906      	bls.n	80073c4 <HAL_I2C_Master_Transmit_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	22ff      	movs	r2, #255	@ 0xff
 80073ba:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80073bc:	2380      	movs	r3, #128	@ 0x80
 80073be:	045b      	lsls	r3, r3, #17
 80073c0:	617b      	str	r3, [r7, #20]
 80073c2:	e007      	b.n	80073d4 <HAL_I2C_Master_Transmit_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80073c8:	b29a      	uxth	r2, r3
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80073ce:	2380      	movs	r3, #128	@ 0x80
 80073d0:	049b      	lsls	r3, r3, #18
 80073d2:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d100      	bne.n	80073de <HAL_I2C_Master_Transmit_DMA+0xbe>
 80073dc:	e078      	b.n	80074d0 <HAL_I2C_Master_Transmit_DMA+0x1b0>
    {
      if (hi2c->hdmatx != NULL)
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d023      	beq.n	800742e <HAL_I2C_Master_Transmit_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073ea:	4a4c      	ldr	r2, [pc, #304]	@ (800751c <HAL_I2C_Master_Transmit_DMA+0x1fc>)
 80073ec:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073f2:	4a4b      	ldr	r2, [pc, #300]	@ (8007520 <HAL_I2C_Master_Transmit_DMA+0x200>)
 80073f4:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073fa:	2200      	movs	r2, #0
 80073fc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007402:	2200      	movs	r2, #0
 8007404:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800740a:	6879      	ldr	r1, [r7, #4]
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	3328      	adds	r3, #40	@ 0x28
 8007412:	001a      	movs	r2, r3
                                         hi2c->XferSize);
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8007418:	2513      	movs	r5, #19
 800741a:	197c      	adds	r4, r7, r5
 800741c:	f7ff fb5e 	bl	8006adc <HAL_DMA_Start_IT>
 8007420:	0003      	movs	r3, r0
 8007422:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8007424:	197b      	adds	r3, r7, r5
 8007426:	781b      	ldrb	r3, [r3, #0]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d13d      	bne.n	80074a8 <HAL_I2C_Master_Transmit_DMA+0x188>
 800742c:	e013      	b.n	8007456 <HAL_I2C_Master_Transmit_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	2241      	movs	r2, #65	@ 0x41
 8007432:	2120      	movs	r1, #32
 8007434:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	2242      	movs	r2, #66	@ 0x42
 800743a:	2100      	movs	r1, #0
 800743c:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007442:	2280      	movs	r2, #128	@ 0x80
 8007444:	431a      	orrs	r2, r3
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	2240      	movs	r2, #64	@ 0x40
 800744e:	2100      	movs	r1, #0
 8007450:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8007452:	2301      	movs	r3, #1
 8007454:	e059      	b.n	800750a <HAL_I2C_Master_Transmit_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800745a:	b2da      	uxtb	r2, r3
 800745c:	697c      	ldr	r4, [r7, #20]
 800745e:	230a      	movs	r3, #10
 8007460:	18fb      	adds	r3, r7, r3
 8007462:	8819      	ldrh	r1, [r3, #0]
 8007464:	68f8      	ldr	r0, [r7, #12]
 8007466:	4b2f      	ldr	r3, [pc, #188]	@ (8007524 <HAL_I2C_Master_Transmit_DMA+0x204>)
 8007468:	9300      	str	r3, [sp, #0]
 800746a:	0023      	movs	r3, r4
 800746c:	f001 fd0e 	bl	8008e8c <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007474:	b29a      	uxth	r2, r3
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800747a:	1ad3      	subs	r3, r2, r3
 800747c:	b29a      	uxth	r2, r3
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	2240      	movs	r2, #64	@ 0x40
 8007486:	2100      	movs	r1, #0
 8007488:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	2110      	movs	r1, #16
 800748e:	0018      	movs	r0, r3
 8007490:	f001 fd36 	bl	8008f00 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	681a      	ldr	r2, [r3, #0]
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	2180      	movs	r1, #128	@ 0x80
 80074a0:	01c9      	lsls	r1, r1, #7
 80074a2:	430a      	orrs	r2, r1
 80074a4:	601a      	str	r2, [r3, #0]
 80074a6:	e02d      	b.n	8007504 <HAL_I2C_Master_Transmit_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	2241      	movs	r2, #65	@ 0x41
 80074ac:	2120      	movs	r1, #32
 80074ae:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	2242      	movs	r2, #66	@ 0x42
 80074b4:	2100      	movs	r1, #0
 80074b6:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074bc:	2210      	movs	r2, #16
 80074be:	431a      	orrs	r2, r3
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	2240      	movs	r2, #64	@ 0x40
 80074c8:	2100      	movs	r1, #0
 80074ca:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80074cc:	2301      	movs	r3, #1
 80074ce:	e01c      	b.n	800750a <HAL_I2C_Master_Transmit_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	4a15      	ldr	r2, [pc, #84]	@ (8007528 <HAL_I2C_Master_Transmit_DMA+0x208>)
 80074d4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80074da:	b2da      	uxtb	r2, r3
 80074dc:	2380      	movs	r3, #128	@ 0x80
 80074de:	049c      	lsls	r4, r3, #18
 80074e0:	230a      	movs	r3, #10
 80074e2:	18fb      	adds	r3, r7, r3
 80074e4:	8819      	ldrh	r1, [r3, #0]
 80074e6:	68f8      	ldr	r0, [r7, #12]
 80074e8:	4b0e      	ldr	r3, [pc, #56]	@ (8007524 <HAL_I2C_Master_Transmit_DMA+0x204>)
 80074ea:	9300      	str	r3, [sp, #0]
 80074ec:	0023      	movs	r3, r4
 80074ee:	f001 fccd 	bl	8008e8c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	2240      	movs	r2, #64	@ 0x40
 80074f6:	2100      	movs	r1, #0
 80074f8:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	2101      	movs	r1, #1
 80074fe:	0018      	movs	r0, r3
 8007500:	f001 fcfe 	bl	8008f00 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8007504:	2300      	movs	r3, #0
 8007506:	e000      	b.n	800750a <HAL_I2C_Master_Transmit_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8007508:	2302      	movs	r3, #2
  }
}
 800750a:	0018      	movs	r0, r3
 800750c:	46bd      	mov	sp, r7
 800750e:	b006      	add	sp, #24
 8007510:	bdb0      	pop	{r4, r5, r7, pc}
 8007512:	46c0      	nop			@ (mov r8, r8)
 8007514:	ffff0000 	.word	0xffff0000
 8007518:	08007d25 	.word	0x08007d25
 800751c:	08008cdd 	.word	0x08008cdd
 8007520:	08008e1d 	.word	0x08008e1d
 8007524:	80002000 	.word	0x80002000
 8007528:	080078d1 	.word	0x080078d1

0800752c <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 800752c:	b5b0      	push	{r4, r5, r7, lr}
 800752e:	b088      	sub	sp, #32
 8007530:	af02      	add	r7, sp, #8
 8007532:	60f8      	str	r0, [r7, #12]
 8007534:	0008      	movs	r0, r1
 8007536:	607a      	str	r2, [r7, #4]
 8007538:	0019      	movs	r1, r3
 800753a:	230a      	movs	r3, #10
 800753c:	18fb      	adds	r3, r7, r3
 800753e:	1c02      	adds	r2, r0, #0
 8007540:	801a      	strh	r2, [r3, #0]
 8007542:	2308      	movs	r3, #8
 8007544:	18fb      	adds	r3, r7, r3
 8007546:	1c0a      	adds	r2, r1, #0
 8007548:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	2241      	movs	r2, #65	@ 0x41
 800754e:	5c9b      	ldrb	r3, [r3, r2]
 8007550:	b2db      	uxtb	r3, r3
 8007552:	2b20      	cmp	r3, #32
 8007554:	d000      	beq.n	8007558 <HAL_I2C_Master_Receive_DMA+0x2c>
 8007556:	e0dd      	b.n	8007714 <HAL_I2C_Master_Receive_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	699a      	ldr	r2, [r3, #24]
 800755e:	2380      	movs	r3, #128	@ 0x80
 8007560:	021b      	lsls	r3, r3, #8
 8007562:	401a      	ands	r2, r3
 8007564:	2380      	movs	r3, #128	@ 0x80
 8007566:	021b      	lsls	r3, r3, #8
 8007568:	429a      	cmp	r2, r3
 800756a:	d101      	bne.n	8007570 <HAL_I2C_Master_Receive_DMA+0x44>
    {
      return HAL_BUSY;
 800756c:	2302      	movs	r3, #2
 800756e:	e0d2      	b.n	8007716 <HAL_I2C_Master_Receive_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	2240      	movs	r2, #64	@ 0x40
 8007574:	5c9b      	ldrb	r3, [r3, r2]
 8007576:	2b01      	cmp	r3, #1
 8007578:	d101      	bne.n	800757e <HAL_I2C_Master_Receive_DMA+0x52>
 800757a:	2302      	movs	r3, #2
 800757c:	e0cb      	b.n	8007716 <HAL_I2C_Master_Receive_DMA+0x1ea>
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	2240      	movs	r2, #64	@ 0x40
 8007582:	2101      	movs	r1, #1
 8007584:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	2241      	movs	r2, #65	@ 0x41
 800758a:	2122      	movs	r1, #34	@ 0x22
 800758c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	2242      	movs	r2, #66	@ 0x42
 8007592:	2110      	movs	r1, #16
 8007594:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	2200      	movs	r2, #0
 800759a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	687a      	ldr	r2, [r7, #4]
 80075a0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	2208      	movs	r2, #8
 80075a6:	18ba      	adds	r2, r7, r2
 80075a8:	8812      	ldrh	r2, [r2, #0]
 80075aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	4a5c      	ldr	r2, [pc, #368]	@ (8007720 <HAL_I2C_Master_Receive_DMA+0x1f4>)
 80075b0:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	4a5b      	ldr	r2, [pc, #364]	@ (8007724 <HAL_I2C_Master_Receive_DMA+0x1f8>)
 80075b6:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80075bc:	b29b      	uxth	r3, r3
 80075be:	2bff      	cmp	r3, #255	@ 0xff
 80075c0:	d906      	bls.n	80075d0 <HAL_I2C_Master_Receive_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	22ff      	movs	r2, #255	@ 0xff
 80075c6:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80075c8:	2380      	movs	r3, #128	@ 0x80
 80075ca:	045b      	lsls	r3, r3, #17
 80075cc:	617b      	str	r3, [r7, #20]
 80075ce:	e007      	b.n	80075e0 <HAL_I2C_Master_Receive_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80075d4:	b29a      	uxth	r2, r3
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80075da:	2380      	movs	r3, #128	@ 0x80
 80075dc:	049b      	lsls	r3, r3, #18
 80075de:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d100      	bne.n	80075ea <HAL_I2C_Master_Receive_DMA+0xbe>
 80075e8:	e078      	b.n	80076dc <HAL_I2C_Master_Receive_DMA+0x1b0>
    {
      if (hi2c->hdmarx != NULL)
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d023      	beq.n	800763a <HAL_I2C_Master_Receive_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075f6:	4a4c      	ldr	r2, [pc, #304]	@ (8007728 <HAL_I2C_Master_Receive_DMA+0x1fc>)
 80075f8:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075fe:	4a4b      	ldr	r2, [pc, #300]	@ (800772c <HAL_I2C_Master_Receive_DMA+0x200>)
 8007600:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007606:	2200      	movs	r2, #0
 8007608:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800760e:	2200      	movs	r2, #0
 8007610:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	3324      	adds	r3, #36	@ 0x24
 800761c:	0019      	movs	r1, r3
 800761e:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8007624:	2513      	movs	r5, #19
 8007626:	197c      	adds	r4, r7, r5
 8007628:	f7ff fa58 	bl	8006adc <HAL_DMA_Start_IT>
 800762c:	0003      	movs	r3, r0
 800762e:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8007630:	197b      	adds	r3, r7, r5
 8007632:	781b      	ldrb	r3, [r3, #0]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d13d      	bne.n	80076b4 <HAL_I2C_Master_Receive_DMA+0x188>
 8007638:	e013      	b.n	8007662 <HAL_I2C_Master_Receive_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	2241      	movs	r2, #65	@ 0x41
 800763e:	2120      	movs	r1, #32
 8007640:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	2242      	movs	r2, #66	@ 0x42
 8007646:	2100      	movs	r1, #0
 8007648:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800764e:	2280      	movs	r2, #128	@ 0x80
 8007650:	431a      	orrs	r2, r3
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	2240      	movs	r2, #64	@ 0x40
 800765a:	2100      	movs	r1, #0
 800765c:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800765e:	2301      	movs	r3, #1
 8007660:	e059      	b.n	8007716 <HAL_I2C_Master_Receive_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007666:	b2da      	uxtb	r2, r3
 8007668:	697c      	ldr	r4, [r7, #20]
 800766a:	230a      	movs	r3, #10
 800766c:	18fb      	adds	r3, r7, r3
 800766e:	8819      	ldrh	r1, [r3, #0]
 8007670:	68f8      	ldr	r0, [r7, #12]
 8007672:	4b2f      	ldr	r3, [pc, #188]	@ (8007730 <HAL_I2C_Master_Receive_DMA+0x204>)
 8007674:	9300      	str	r3, [sp, #0]
 8007676:	0023      	movs	r3, r4
 8007678:	f001 fc08 	bl	8008e8c <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007680:	b29a      	uxth	r2, r3
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007686:	1ad3      	subs	r3, r2, r3
 8007688:	b29a      	uxth	r2, r3
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	2240      	movs	r2, #64	@ 0x40
 8007692:	2100      	movs	r1, #0
 8007694:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	2110      	movs	r1, #16
 800769a:	0018      	movs	r0, r3
 800769c:	f001 fc30 	bl	8008f00 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	681a      	ldr	r2, [r3, #0]
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	2180      	movs	r1, #128	@ 0x80
 80076ac:	0209      	lsls	r1, r1, #8
 80076ae:	430a      	orrs	r2, r1
 80076b0:	601a      	str	r2, [r3, #0]
 80076b2:	e02d      	b.n	8007710 <HAL_I2C_Master_Receive_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	2241      	movs	r2, #65	@ 0x41
 80076b8:	2120      	movs	r1, #32
 80076ba:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	2242      	movs	r2, #66	@ 0x42
 80076c0:	2100      	movs	r1, #0
 80076c2:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80076c8:	2210      	movs	r2, #16
 80076ca:	431a      	orrs	r2, r3
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	2240      	movs	r2, #64	@ 0x40
 80076d4:	2100      	movs	r1, #0
 80076d6:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80076d8:	2301      	movs	r3, #1
 80076da:	e01c      	b.n	8007716 <HAL_I2C_Master_Receive_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	4a15      	ldr	r2, [pc, #84]	@ (8007734 <HAL_I2C_Master_Receive_DMA+0x208>)
 80076e0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80076e6:	b2da      	uxtb	r2, r3
 80076e8:	2380      	movs	r3, #128	@ 0x80
 80076ea:	049c      	lsls	r4, r3, #18
 80076ec:	230a      	movs	r3, #10
 80076ee:	18fb      	adds	r3, r7, r3
 80076f0:	8819      	ldrh	r1, [r3, #0]
 80076f2:	68f8      	ldr	r0, [r7, #12]
 80076f4:	4b0e      	ldr	r3, [pc, #56]	@ (8007730 <HAL_I2C_Master_Receive_DMA+0x204>)
 80076f6:	9300      	str	r3, [sp, #0]
 80076f8:	0023      	movs	r3, r4
 80076fa:	f001 fbc7 	bl	8008e8c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	2240      	movs	r2, #64	@ 0x40
 8007702:	2100      	movs	r1, #0
 8007704:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	2101      	movs	r1, #1
 800770a:	0018      	movs	r0, r3
 800770c:	f001 fbf8 	bl	8008f00 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8007710:	2300      	movs	r3, #0
 8007712:	e000      	b.n	8007716 <HAL_I2C_Master_Receive_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8007714:	2302      	movs	r3, #2
  }
}
 8007716:	0018      	movs	r0, r3
 8007718:	46bd      	mov	sp, r7
 800771a:	b006      	add	sp, #24
 800771c:	bdb0      	pop	{r4, r5, r7, pc}
 800771e:	46c0      	nop			@ (mov r8, r8)
 8007720:	ffff0000 	.word	0xffff0000
 8007724:	08007d25 	.word	0x08007d25
 8007728:	08008d7d 	.word	0x08008d7d
 800772c:	08008e1d 	.word	0x08008e1d
 8007730:	80002400 	.word	0x80002400
 8007734:	080078d1 	.word	0x080078d1

08007738 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b084      	sub	sp, #16
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	699b      	ldr	r3, [r3, #24]
 8007746:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007754:	2b00      	cmp	r3, #0
 8007756:	d005      	beq.n	8007764 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800775c:	68ba      	ldr	r2, [r7, #8]
 800775e:	68f9      	ldr	r1, [r7, #12]
 8007760:	6878      	ldr	r0, [r7, #4]
 8007762:	4798      	blx	r3
  }
}
 8007764:	46c0      	nop			@ (mov r8, r8)
 8007766:	46bd      	mov	sp, r7
 8007768:	b004      	add	sp, #16
 800776a:	bd80      	pop	{r7, pc}

0800776c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b086      	sub	sp, #24
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	699b      	ldr	r3, [r3, #24]
 800777a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8007784:	697a      	ldr	r2, [r7, #20]
 8007786:	2380      	movs	r3, #128	@ 0x80
 8007788:	005b      	lsls	r3, r3, #1
 800778a:	4013      	ands	r3, r2
 800778c:	d00e      	beq.n	80077ac <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800778e:	693b      	ldr	r3, [r7, #16]
 8007790:	2280      	movs	r2, #128	@ 0x80
 8007792:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8007794:	d00a      	beq.n	80077ac <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800779a:	2201      	movs	r2, #1
 800779c:	431a      	orrs	r2, r3
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	2280      	movs	r2, #128	@ 0x80
 80077a8:	0052      	lsls	r2, r2, #1
 80077aa:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80077ac:	697a      	ldr	r2, [r7, #20]
 80077ae:	2380      	movs	r3, #128	@ 0x80
 80077b0:	00db      	lsls	r3, r3, #3
 80077b2:	4013      	ands	r3, r2
 80077b4:	d00e      	beq.n	80077d4 <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80077b6:	693b      	ldr	r3, [r7, #16]
 80077b8:	2280      	movs	r2, #128	@ 0x80
 80077ba:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80077bc:	d00a      	beq.n	80077d4 <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077c2:	2208      	movs	r2, #8
 80077c4:	431a      	orrs	r2, r3
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	2280      	movs	r2, #128	@ 0x80
 80077d0:	00d2      	lsls	r2, r2, #3
 80077d2:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80077d4:	697a      	ldr	r2, [r7, #20]
 80077d6:	2380      	movs	r3, #128	@ 0x80
 80077d8:	009b      	lsls	r3, r3, #2
 80077da:	4013      	ands	r3, r2
 80077dc:	d00e      	beq.n	80077fc <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80077de:	693b      	ldr	r3, [r7, #16]
 80077e0:	2280      	movs	r2, #128	@ 0x80
 80077e2:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80077e4:	d00a      	beq.n	80077fc <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077ea:	2202      	movs	r2, #2
 80077ec:	431a      	orrs	r2, r3
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	2280      	movs	r2, #128	@ 0x80
 80077f8:	0092      	lsls	r2, r2, #2
 80077fa:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007800:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	220b      	movs	r2, #11
 8007806:	4013      	ands	r3, r2
 8007808:	d005      	beq.n	8007816 <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 800780a:	68fa      	ldr	r2, [r7, #12]
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	0011      	movs	r1, r2
 8007810:	0018      	movs	r0, r3
 8007812:	f001 f915 	bl	8008a40 <I2C_ITError>
  }
}
 8007816:	46c0      	nop			@ (mov r8, r8)
 8007818:	46bd      	mov	sp, r7
 800781a:	b006      	add	sp, #24
 800781c:	bd80      	pop	{r7, pc}

0800781e <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800781e:	b580      	push	{r7, lr}
 8007820:	b082      	sub	sp, #8
 8007822:	af00      	add	r7, sp, #0
 8007824:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8007826:	46c0      	nop			@ (mov r8, r8)
 8007828:	46bd      	mov	sp, r7
 800782a:	b002      	add	sp, #8
 800782c:	bd80      	pop	{r7, pc}

0800782e <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800782e:	b580      	push	{r7, lr}
 8007830:	b082      	sub	sp, #8
 8007832:	af00      	add	r7, sp, #0
 8007834:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8007836:	46c0      	nop			@ (mov r8, r8)
 8007838:	46bd      	mov	sp, r7
 800783a:	b002      	add	sp, #8
 800783c:	bd80      	pop	{r7, pc}

0800783e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800783e:	b580      	push	{r7, lr}
 8007840:	b082      	sub	sp, #8
 8007842:	af00      	add	r7, sp, #0
 8007844:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8007846:	46c0      	nop			@ (mov r8, r8)
 8007848:	46bd      	mov	sp, r7
 800784a:	b002      	add	sp, #8
 800784c:	bd80      	pop	{r7, pc}

0800784e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800784e:	b580      	push	{r7, lr}
 8007850:	b082      	sub	sp, #8
 8007852:	af00      	add	r7, sp, #0
 8007854:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8007856:	46c0      	nop			@ (mov r8, r8)
 8007858:	46bd      	mov	sp, r7
 800785a:	b002      	add	sp, #8
 800785c:	bd80      	pop	{r7, pc}

0800785e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800785e:	b580      	push	{r7, lr}
 8007860:	b082      	sub	sp, #8
 8007862:	af00      	add	r7, sp, #0
 8007864:	6078      	str	r0, [r7, #4]
 8007866:	0008      	movs	r0, r1
 8007868:	0011      	movs	r1, r2
 800786a:	1cfb      	adds	r3, r7, #3
 800786c:	1c02      	adds	r2, r0, #0
 800786e:	701a      	strb	r2, [r3, #0]
 8007870:	003b      	movs	r3, r7
 8007872:	1c0a      	adds	r2, r1, #0
 8007874:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8007876:	46c0      	nop			@ (mov r8, r8)
 8007878:	46bd      	mov	sp, r7
 800787a:	b002      	add	sp, #8
 800787c:	bd80      	pop	{r7, pc}

0800787e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800787e:	b580      	push	{r7, lr}
 8007880:	b082      	sub	sp, #8
 8007882:	af00      	add	r7, sp, #0
 8007884:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8007886:	46c0      	nop			@ (mov r8, r8)
 8007888:	46bd      	mov	sp, r7
 800788a:	b002      	add	sp, #8
 800788c:	bd80      	pop	{r7, pc}

0800788e <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800788e:	b580      	push	{r7, lr}
 8007890:	b082      	sub	sp, #8
 8007892:	af00      	add	r7, sp, #0
 8007894:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8007896:	46c0      	nop			@ (mov r8, r8)
 8007898:	46bd      	mov	sp, r7
 800789a:	b002      	add	sp, #8
 800789c:	bd80      	pop	{r7, pc}

0800789e <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800789e:	b580      	push	{r7, lr}
 80078a0:	b082      	sub	sp, #8
 80078a2:	af00      	add	r7, sp, #0
 80078a4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80078a6:	46c0      	nop			@ (mov r8, r8)
 80078a8:	46bd      	mov	sp, r7
 80078aa:	b002      	add	sp, #8
 80078ac:	bd80      	pop	{r7, pc}

080078ae <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80078ae:	b580      	push	{r7, lr}
 80078b0:	b082      	sub	sp, #8
 80078b2:	af00      	add	r7, sp, #0
 80078b4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80078b6:	46c0      	nop			@ (mov r8, r8)
 80078b8:	46bd      	mov	sp, r7
 80078ba:	b002      	add	sp, #8
 80078bc:	bd80      	pop	{r7, pc}

080078be <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80078be:	b580      	push	{r7, lr}
 80078c0:	b082      	sub	sp, #8
 80078c2:	af00      	add	r7, sp, #0
 80078c4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80078c6:	46c0      	nop			@ (mov r8, r8)
 80078c8:	46bd      	mov	sp, r7
 80078ca:	b002      	add	sp, #8
 80078cc:	bd80      	pop	{r7, pc}
	...

080078d0 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80078d0:	b590      	push	{r4, r7, lr}
 80078d2:	b089      	sub	sp, #36	@ 0x24
 80078d4:	af02      	add	r7, sp, #8
 80078d6:	60f8      	str	r0, [r7, #12]
 80078d8:	60b9      	str	r1, [r7, #8]
 80078da:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 80078dc:	68bb      	ldr	r3, [r7, #8]
 80078de:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	2240      	movs	r2, #64	@ 0x40
 80078e4:	5c9b      	ldrb	r3, [r3, r2]
 80078e6:	2b01      	cmp	r3, #1
 80078e8:	d101      	bne.n	80078ee <I2C_Master_ISR_IT+0x1e>
 80078ea:	2302      	movs	r3, #2
 80078ec:	e113      	b.n	8007b16 <I2C_Master_ISR_IT+0x246>
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	2240      	movs	r2, #64	@ 0x40
 80078f2:	2101      	movs	r1, #1
 80078f4:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80078f6:	697b      	ldr	r3, [r7, #20]
 80078f8:	2210      	movs	r2, #16
 80078fa:	4013      	ands	r3, r2
 80078fc:	d012      	beq.n	8007924 <I2C_Master_ISR_IT+0x54>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2210      	movs	r2, #16
 8007902:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007904:	d00e      	beq.n	8007924 <I2C_Master_ISR_IT+0x54>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	2210      	movs	r2, #16
 800790c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007912:	2204      	movs	r2, #4
 8007914:	431a      	orrs	r2, r3
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	0018      	movs	r0, r3
 800791e:	f001 f9ba 	bl	8008c96 <I2C_Flush_TXDR>
 8007922:	e0e5      	b.n	8007af0 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8007924:	697b      	ldr	r3, [r7, #20]
 8007926:	2204      	movs	r2, #4
 8007928:	4013      	ands	r3, r2
 800792a:	d021      	beq.n	8007970 <I2C_Master_ISR_IT+0xa0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2204      	movs	r2, #4
 8007930:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8007932:	d01d      	beq.n	8007970 <I2C_Master_ISR_IT+0xa0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8007934:	697b      	ldr	r3, [r7, #20]
 8007936:	2204      	movs	r2, #4
 8007938:	4393      	bics	r3, r2
 800793a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007946:	b2d2      	uxtb	r2, r2
 8007948:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800794e:	1c5a      	adds	r2, r3, #1
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007958:	3b01      	subs	r3, #1
 800795a:	b29a      	uxth	r2, r3
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007964:	b29b      	uxth	r3, r3
 8007966:	3b01      	subs	r3, #1
 8007968:	b29a      	uxth	r2, r3
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800796e:	e0bf      	b.n	8007af0 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007970:	697b      	ldr	r3, [r7, #20]
 8007972:	2202      	movs	r2, #2
 8007974:	4013      	ands	r3, r2
 8007976:	d01c      	beq.n	80079b2 <I2C_Master_ISR_IT+0xe2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2202      	movs	r2, #2
 800797c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800797e:	d018      	beq.n	80079b2 <I2C_Master_ISR_IT+0xe2>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007984:	781a      	ldrb	r2, [r3, #0]
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007990:	1c5a      	adds	r2, r3, #1
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800799a:	3b01      	subs	r3, #1
 800799c:	b29a      	uxth	r2, r3
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80079a6:	b29b      	uxth	r3, r3
 80079a8:	3b01      	subs	r3, #1
 80079aa:	b29a      	uxth	r2, r3
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80079b0:	e09e      	b.n	8007af0 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80079b2:	697b      	ldr	r3, [r7, #20]
 80079b4:	2280      	movs	r2, #128	@ 0x80
 80079b6:	4013      	ands	r3, r2
 80079b8:	d100      	bne.n	80079bc <I2C_Master_ISR_IT+0xec>
 80079ba:	e069      	b.n	8007a90 <I2C_Master_ISR_IT+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2240      	movs	r2, #64	@ 0x40
 80079c0:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80079c2:	d065      	beq.n	8007a90 <I2C_Master_ISR_IT+0x1c0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80079c8:	b29b      	uxth	r3, r3
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d04a      	beq.n	8007a64 <I2C_Master_ISR_IT+0x194>
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d146      	bne.n	8007a64 <I2C_Master_ISR_IT+0x194>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	685b      	ldr	r3, [r3, #4]
 80079dc:	b29a      	uxth	r2, r3
 80079de:	2112      	movs	r1, #18
 80079e0:	187b      	adds	r3, r7, r1
 80079e2:	0592      	lsls	r2, r2, #22
 80079e4:	0d92      	lsrs	r2, r2, #22
 80079e6:	801a      	strh	r2, [r3, #0]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80079ec:	b29b      	uxth	r3, r3
 80079ee:	2bff      	cmp	r3, #255	@ 0xff
 80079f0:	d910      	bls.n	8007a14 <I2C_Master_ISR_IT+0x144>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	22ff      	movs	r2, #255	@ 0xff
 80079f6:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80079fc:	b2da      	uxtb	r2, r3
 80079fe:	2380      	movs	r3, #128	@ 0x80
 8007a00:	045c      	lsls	r4, r3, #17
 8007a02:	187b      	adds	r3, r7, r1
 8007a04:	8819      	ldrh	r1, [r3, #0]
 8007a06:	68f8      	ldr	r0, [r7, #12]
 8007a08:	2300      	movs	r3, #0
 8007a0a:	9300      	str	r3, [sp, #0]
 8007a0c:	0023      	movs	r3, r4
 8007a0e:	f001 fa3d 	bl	8008e8c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007a12:	e03c      	b.n	8007a8e <I2C_Master_ISR_IT+0x1be>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a18:	b29a      	uxth	r2, r3
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a22:	4a3f      	ldr	r2, [pc, #252]	@ (8007b20 <I2C_Master_ISR_IT+0x250>)
 8007a24:	4293      	cmp	r3, r2
 8007a26:	d00e      	beq.n	8007a46 <I2C_Master_ISR_IT+0x176>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007a2c:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8007a32:	2312      	movs	r3, #18
 8007a34:	18fb      	adds	r3, r7, r3
 8007a36:	8819      	ldrh	r1, [r3, #0]
 8007a38:	68f8      	ldr	r0, [r7, #12]
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	9300      	str	r3, [sp, #0]
 8007a3e:	0023      	movs	r3, r4
 8007a40:	f001 fa24 	bl	8008e8c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007a44:	e023      	b.n	8007a8e <I2C_Master_ISR_IT+0x1be>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007a4a:	b2da      	uxtb	r2, r3
 8007a4c:	2380      	movs	r3, #128	@ 0x80
 8007a4e:	049c      	lsls	r4, r3, #18
 8007a50:	2312      	movs	r3, #18
 8007a52:	18fb      	adds	r3, r7, r3
 8007a54:	8819      	ldrh	r1, [r3, #0]
 8007a56:	68f8      	ldr	r0, [r7, #12]
 8007a58:	2300      	movs	r3, #0
 8007a5a:	9300      	str	r3, [sp, #0]
 8007a5c:	0023      	movs	r3, r4
 8007a5e:	f001 fa15 	bl	8008e8c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007a62:	e014      	b.n	8007a8e <I2C_Master_ISR_IT+0x1be>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	685a      	ldr	r2, [r3, #4]
 8007a6a:	2380      	movs	r3, #128	@ 0x80
 8007a6c:	049b      	lsls	r3, r3, #18
 8007a6e:	401a      	ands	r2, r3
 8007a70:	2380      	movs	r3, #128	@ 0x80
 8007a72:	049b      	lsls	r3, r3, #18
 8007a74:	429a      	cmp	r2, r3
 8007a76:	d004      	beq.n	8007a82 <I2C_Master_ISR_IT+0x1b2>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	0018      	movs	r0, r3
 8007a7c:	f000 fcf4 	bl	8008468 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007a80:	e036      	b.n	8007af0 <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	2140      	movs	r1, #64	@ 0x40
 8007a86:	0018      	movs	r0, r3
 8007a88:	f000 ffda 	bl	8008a40 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007a8c:	e030      	b.n	8007af0 <I2C_Master_ISR_IT+0x220>
 8007a8e:	e02f      	b.n	8007af0 <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8007a90:	697b      	ldr	r3, [r7, #20]
 8007a92:	2240      	movs	r2, #64	@ 0x40
 8007a94:	4013      	ands	r3, r2
 8007a96:	d02b      	beq.n	8007af0 <I2C_Master_ISR_IT+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2240      	movs	r2, #64	@ 0x40
 8007a9c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8007a9e:	d027      	beq.n	8007af0 <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007aa4:	b29b      	uxth	r3, r3
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d11d      	bne.n	8007ae6 <I2C_Master_ISR_IT+0x216>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	685a      	ldr	r2, [r3, #4]
 8007ab0:	2380      	movs	r3, #128	@ 0x80
 8007ab2:	049b      	lsls	r3, r3, #18
 8007ab4:	401a      	ands	r2, r3
 8007ab6:	2380      	movs	r3, #128	@ 0x80
 8007ab8:	049b      	lsls	r3, r3, #18
 8007aba:	429a      	cmp	r2, r3
 8007abc:	d018      	beq.n	8007af0 <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ac2:	4a17      	ldr	r2, [pc, #92]	@ (8007b20 <I2C_Master_ISR_IT+0x250>)
 8007ac4:	4293      	cmp	r3, r2
 8007ac6:	d109      	bne.n	8007adc <I2C_Master_ISR_IT+0x20c>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	685a      	ldr	r2, [r3, #4]
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	2180      	movs	r1, #128	@ 0x80
 8007ad4:	01c9      	lsls	r1, r1, #7
 8007ad6:	430a      	orrs	r2, r1
 8007ad8:	605a      	str	r2, [r3, #4]
 8007ada:	e009      	b.n	8007af0 <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	0018      	movs	r0, r3
 8007ae0:	f000 fcc2 	bl	8008468 <I2C_ITMasterSeqCplt>
 8007ae4:	e004      	b.n	8007af0 <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	2140      	movs	r1, #64	@ 0x40
 8007aea:	0018      	movs	r0, r3
 8007aec:	f000 ffa8 	bl	8008a40 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007af0:	697b      	ldr	r3, [r7, #20]
 8007af2:	2220      	movs	r2, #32
 8007af4:	4013      	ands	r3, r2
 8007af6:	d009      	beq.n	8007b0c <I2C_Master_ISR_IT+0x23c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2220      	movs	r2, #32
 8007afc:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007afe:	d005      	beq.n	8007b0c <I2C_Master_ISR_IT+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8007b00:	697a      	ldr	r2, [r7, #20]
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	0011      	movs	r1, r2
 8007b06:	0018      	movs	r0, r3
 8007b08:	f000 fd54 	bl	80085b4 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	2240      	movs	r2, #64	@ 0x40
 8007b10:	2100      	movs	r1, #0
 8007b12:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007b14:	2300      	movs	r3, #0
}
 8007b16:	0018      	movs	r0, r3
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	b007      	add	sp, #28
 8007b1c:	bd90      	pop	{r4, r7, pc}
 8007b1e:	46c0      	nop			@ (mov r8, r8)
 8007b20:	ffff0000 	.word	0xffff0000

08007b24 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b086      	sub	sp, #24
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	60f8      	str	r0, [r7, #12]
 8007b2c:	60b9      	str	r1, [r7, #8]
 8007b2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b34:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8007b36:	68bb      	ldr	r3, [r7, #8]
 8007b38:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	2240      	movs	r2, #64	@ 0x40
 8007b3e:	5c9b      	ldrb	r3, [r3, r2]
 8007b40:	2b01      	cmp	r3, #1
 8007b42:	d101      	bne.n	8007b48 <I2C_Slave_ISR_IT+0x24>
 8007b44:	2302      	movs	r3, #2
 8007b46:	e0e6      	b.n	8007d16 <I2C_Slave_ISR_IT+0x1f2>
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	2240      	movs	r2, #64	@ 0x40
 8007b4c:	2101      	movs	r1, #1
 8007b4e:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007b50:	693b      	ldr	r3, [r7, #16]
 8007b52:	2220      	movs	r2, #32
 8007b54:	4013      	ands	r3, r2
 8007b56:	d009      	beq.n	8007b6c <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2220      	movs	r2, #32
 8007b5c:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007b5e:	d005      	beq.n	8007b6c <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8007b60:	693a      	ldr	r2, [r7, #16]
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	0011      	movs	r1, r2
 8007b66:	0018      	movs	r0, r3
 8007b68:	f000 fdf2 	bl	8008750 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007b6c:	693b      	ldr	r3, [r7, #16]
 8007b6e:	2210      	movs	r2, #16
 8007b70:	4013      	ands	r3, r2
 8007b72:	d052      	beq.n	8007c1a <I2C_Slave_ISR_IT+0xf6>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2210      	movs	r2, #16
 8007b78:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007b7a:	d04e      	beq.n	8007c1a <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b80:	b29b      	uxth	r3, r3
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d12d      	bne.n	8007be2 <I2C_Slave_ISR_IT+0xbe>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	2241      	movs	r2, #65	@ 0x41
 8007b8a:	5c9b      	ldrb	r3, [r3, r2]
 8007b8c:	b2db      	uxtb	r3, r3
 8007b8e:	2b28      	cmp	r3, #40	@ 0x28
 8007b90:	d10b      	bne.n	8007baa <I2C_Slave_ISR_IT+0x86>
 8007b92:	697a      	ldr	r2, [r7, #20]
 8007b94:	2380      	movs	r3, #128	@ 0x80
 8007b96:	049b      	lsls	r3, r3, #18
 8007b98:	429a      	cmp	r2, r3
 8007b9a:	d106      	bne.n	8007baa <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8007b9c:	693a      	ldr	r2, [r7, #16]
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	0011      	movs	r1, r2
 8007ba2:	0018      	movs	r0, r3
 8007ba4:	f000 fef4 	bl	8008990 <I2C_ITListenCplt>
 8007ba8:	e036      	b.n	8007c18 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	2241      	movs	r2, #65	@ 0x41
 8007bae:	5c9b      	ldrb	r3, [r3, r2]
 8007bb0:	b2db      	uxtb	r3, r3
 8007bb2:	2b29      	cmp	r3, #41	@ 0x29
 8007bb4:	d110      	bne.n	8007bd8 <I2C_Slave_ISR_IT+0xb4>
 8007bb6:	697b      	ldr	r3, [r7, #20]
 8007bb8:	4a59      	ldr	r2, [pc, #356]	@ (8007d20 <I2C_Slave_ISR_IT+0x1fc>)
 8007bba:	4293      	cmp	r3, r2
 8007bbc:	d00c      	beq.n	8007bd8 <I2C_Slave_ISR_IT+0xb4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	2210      	movs	r2, #16
 8007bc4:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	0018      	movs	r0, r3
 8007bca:	f001 f864 	bl	8008c96 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	0018      	movs	r0, r3
 8007bd2:	f000 fc8b 	bl	80084ec <I2C_ITSlaveSeqCplt>
 8007bd6:	e01f      	b.n	8007c18 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	2210      	movs	r2, #16
 8007bde:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8007be0:	e091      	b.n	8007d06 <I2C_Slave_ISR_IT+0x1e2>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	2210      	movs	r2, #16
 8007be8:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007bee:	2204      	movs	r2, #4
 8007bf0:	431a      	orrs	r2, r3
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8007bf6:	697b      	ldr	r3, [r7, #20]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d005      	beq.n	8007c08 <I2C_Slave_ISR_IT+0xe4>
 8007bfc:	697a      	ldr	r2, [r7, #20]
 8007bfe:	2380      	movs	r3, #128	@ 0x80
 8007c00:	045b      	lsls	r3, r3, #17
 8007c02:	429a      	cmp	r2, r3
 8007c04:	d000      	beq.n	8007c08 <I2C_Slave_ISR_IT+0xe4>
 8007c06:	e07e      	b.n	8007d06 <I2C_Slave_ISR_IT+0x1e2>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	0011      	movs	r1, r2
 8007c10:	0018      	movs	r0, r3
 8007c12:	f000 ff15 	bl	8008a40 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8007c16:	e076      	b.n	8007d06 <I2C_Slave_ISR_IT+0x1e2>
 8007c18:	e075      	b.n	8007d06 <I2C_Slave_ISR_IT+0x1e2>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8007c1a:	693b      	ldr	r3, [r7, #16]
 8007c1c:	2204      	movs	r2, #4
 8007c1e:	4013      	ands	r3, r2
 8007c20:	d02f      	beq.n	8007c82 <I2C_Slave_ISR_IT+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2204      	movs	r2, #4
 8007c26:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8007c28:	d02b      	beq.n	8007c82 <I2C_Slave_ISR_IT+0x15e>
  {
    if (hi2c->XferCount > 0U)
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007c2e:	b29b      	uxth	r3, r3
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d018      	beq.n	8007c66 <I2C_Slave_ISR_IT+0x142>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c3e:	b2d2      	uxtb	r2, r2
 8007c40:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c46:	1c5a      	adds	r2, r3, #1
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007c50:	3b01      	subs	r3, #1
 8007c52:	b29a      	uxth	r2, r3
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007c5c:	b29b      	uxth	r3, r3
 8007c5e:	3b01      	subs	r3, #1
 8007c60:	b29a      	uxth	r2, r3
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007c6a:	b29b      	uxth	r3, r3
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d14c      	bne.n	8007d0a <I2C_Slave_ISR_IT+0x1e6>
 8007c70:	697b      	ldr	r3, [r7, #20]
 8007c72:	4a2b      	ldr	r2, [pc, #172]	@ (8007d20 <I2C_Slave_ISR_IT+0x1fc>)
 8007c74:	4293      	cmp	r3, r2
 8007c76:	d048      	beq.n	8007d0a <I2C_Slave_ISR_IT+0x1e6>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	0018      	movs	r0, r3
 8007c7c:	f000 fc36 	bl	80084ec <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8007c80:	e043      	b.n	8007d0a <I2C_Slave_ISR_IT+0x1e6>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007c82:	693b      	ldr	r3, [r7, #16]
 8007c84:	2208      	movs	r2, #8
 8007c86:	4013      	ands	r3, r2
 8007c88:	d00a      	beq.n	8007ca0 <I2C_Slave_ISR_IT+0x17c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2208      	movs	r2, #8
 8007c8e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007c90:	d006      	beq.n	8007ca0 <I2C_Slave_ISR_IT+0x17c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8007c92:	693a      	ldr	r2, [r7, #16]
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	0011      	movs	r1, r2
 8007c98:	0018      	movs	r0, r3
 8007c9a:	f000 fb41 	bl	8008320 <I2C_ITAddrCplt>
 8007c9e:	e035      	b.n	8007d0c <I2C_Slave_ISR_IT+0x1e8>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007ca0:	693b      	ldr	r3, [r7, #16]
 8007ca2:	2202      	movs	r2, #2
 8007ca4:	4013      	ands	r3, r2
 8007ca6:	d031      	beq.n	8007d0c <I2C_Slave_ISR_IT+0x1e8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2202      	movs	r2, #2
 8007cac:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007cae:	d02d      	beq.n	8007d0c <I2C_Slave_ISR_IT+0x1e8>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007cb4:	b29b      	uxth	r3, r3
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d018      	beq.n	8007cec <I2C_Slave_ISR_IT+0x1c8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cbe:	781a      	ldrb	r2, [r3, #0]
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cca:	1c5a      	adds	r2, r3, #1
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007cd4:	b29b      	uxth	r3, r3
 8007cd6:	3b01      	subs	r3, #1
 8007cd8:	b29a      	uxth	r2, r3
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007ce2:	3b01      	subs	r3, #1
 8007ce4:	b29a      	uxth	r2, r3
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	851a      	strh	r2, [r3, #40]	@ 0x28
 8007cea:	e00f      	b.n	8007d0c <I2C_Slave_ISR_IT+0x1e8>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8007cec:	697a      	ldr	r2, [r7, #20]
 8007cee:	2380      	movs	r3, #128	@ 0x80
 8007cf0:	045b      	lsls	r3, r3, #17
 8007cf2:	429a      	cmp	r2, r3
 8007cf4:	d002      	beq.n	8007cfc <I2C_Slave_ISR_IT+0x1d8>
 8007cf6:	697b      	ldr	r3, [r7, #20]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d107      	bne.n	8007d0c <I2C_Slave_ISR_IT+0x1e8>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	0018      	movs	r0, r3
 8007d00:	f000 fbf4 	bl	80084ec <I2C_ITSlaveSeqCplt>
 8007d04:	e002      	b.n	8007d0c <I2C_Slave_ISR_IT+0x1e8>
    if (hi2c->XferCount == 0U)
 8007d06:	46c0      	nop			@ (mov r8, r8)
 8007d08:	e000      	b.n	8007d0c <I2C_Slave_ISR_IT+0x1e8>
    if ((hi2c->XferCount == 0U) && \
 8007d0a:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	2240      	movs	r2, #64	@ 0x40
 8007d10:	2100      	movs	r1, #0
 8007d12:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007d14:	2300      	movs	r3, #0
}
 8007d16:	0018      	movs	r0, r3
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	b006      	add	sp, #24
 8007d1c:	bd80      	pop	{r7, pc}
 8007d1e:	46c0      	nop			@ (mov r8, r8)
 8007d20:	ffff0000 	.word	0xffff0000

08007d24 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8007d24:	b590      	push	{r4, r7, lr}
 8007d26:	b089      	sub	sp, #36	@ 0x24
 8007d28:	af02      	add	r7, sp, #8
 8007d2a:	60f8      	str	r0, [r7, #12]
 8007d2c:	60b9      	str	r1, [r7, #8]
 8007d2e:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	2240      	movs	r2, #64	@ 0x40
 8007d34:	5c9b      	ldrb	r3, [r3, r2]
 8007d36:	2b01      	cmp	r3, #1
 8007d38:	d101      	bne.n	8007d3e <I2C_Master_ISR_DMA+0x1a>
 8007d3a:	2302      	movs	r3, #2
 8007d3c:	e0e7      	b.n	8007f0e <I2C_Master_ISR_DMA+0x1ea>
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	2240      	movs	r2, #64	@ 0x40
 8007d42:	2101      	movs	r1, #1
 8007d44:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8007d46:	68bb      	ldr	r3, [r7, #8]
 8007d48:	2210      	movs	r2, #16
 8007d4a:	4013      	ands	r3, r2
 8007d4c:	d017      	beq.n	8007d7e <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2210      	movs	r2, #16
 8007d52:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8007d54:	d013      	beq.n	8007d7e <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	2210      	movs	r2, #16
 8007d5c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d62:	2204      	movs	r2, #4
 8007d64:	431a      	orrs	r2, r3
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	2120      	movs	r1, #32
 8007d6e:	0018      	movs	r0, r3
 8007d70:	f001 f8c6 	bl	8008f00 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	0018      	movs	r0, r3
 8007d78:	f000 ff8d 	bl	8008c96 <I2C_Flush_TXDR>
 8007d7c:	e0c2      	b.n	8007f04 <I2C_Master_ISR_DMA+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8007d7e:	68bb      	ldr	r3, [r7, #8]
 8007d80:	2280      	movs	r2, #128	@ 0x80
 8007d82:	4013      	ands	r3, r2
 8007d84:	d100      	bne.n	8007d88 <I2C_Master_ISR_DMA+0x64>
 8007d86:	e07c      	b.n	8007e82 <I2C_Master_ISR_DMA+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2240      	movs	r2, #64	@ 0x40
 8007d8c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8007d8e:	d100      	bne.n	8007d92 <I2C_Master_ISR_DMA+0x6e>
 8007d90:	e077      	b.n	8007e82 <I2C_Master_ISR_DMA+0x15e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	681a      	ldr	r2, [r3, #0]
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	2140      	movs	r1, #64	@ 0x40
 8007d9e:	438a      	bics	r2, r1
 8007da0:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007da6:	b29b      	uxth	r3, r3
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d055      	beq.n	8007e58 <I2C_Master_ISR_DMA+0x134>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	685b      	ldr	r3, [r3, #4]
 8007db2:	b29a      	uxth	r2, r3
 8007db4:	2312      	movs	r3, #18
 8007db6:	18fb      	adds	r3, r7, r3
 8007db8:	0592      	lsls	r2, r2, #22
 8007dba:	0d92      	lsrs	r2, r2, #22
 8007dbc:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007dc2:	b29b      	uxth	r3, r3
 8007dc4:	2bff      	cmp	r3, #255	@ 0xff
 8007dc6:	d906      	bls.n	8007dd6 <I2C_Master_ISR_DMA+0xb2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	22ff      	movs	r2, #255	@ 0xff
 8007dcc:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 8007dce:	2380      	movs	r3, #128	@ 0x80
 8007dd0:	045b      	lsls	r3, r3, #17
 8007dd2:	617b      	str	r3, [r7, #20]
 8007dd4:	e010      	b.n	8007df8 <I2C_Master_ISR_DMA+0xd4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007dda:	b29a      	uxth	r2, r3
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007de4:	4a4c      	ldr	r2, [pc, #304]	@ (8007f18 <I2C_Master_ISR_DMA+0x1f4>)
 8007de6:	4293      	cmp	r3, r2
 8007de8:	d003      	beq.n	8007df2 <I2C_Master_ISR_DMA+0xce>
        {
          xfermode = hi2c->XferOptions;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dee:	617b      	str	r3, [r7, #20]
 8007df0:	e002      	b.n	8007df8 <I2C_Master_ISR_DMA+0xd4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8007df2:	2380      	movs	r3, #128	@ 0x80
 8007df4:	049b      	lsls	r3, r3, #18
 8007df6:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007dfc:	b2da      	uxtb	r2, r3
 8007dfe:	697c      	ldr	r4, [r7, #20]
 8007e00:	2312      	movs	r3, #18
 8007e02:	18fb      	adds	r3, r7, r3
 8007e04:	8819      	ldrh	r1, [r3, #0]
 8007e06:	68f8      	ldr	r0, [r7, #12]
 8007e08:	2300      	movs	r3, #0
 8007e0a:	9300      	str	r3, [sp, #0]
 8007e0c:	0023      	movs	r3, r4
 8007e0e:	f001 f83d 	bl	8008e8c <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007e16:	b29a      	uxth	r2, r3
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007e1c:	1ad3      	subs	r3, r2, r3
 8007e1e:	b29a      	uxth	r2, r3
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	2241      	movs	r2, #65	@ 0x41
 8007e28:	5c9b      	ldrb	r3, [r3, r2]
 8007e2a:	b2db      	uxtb	r3, r3
 8007e2c:	2b22      	cmp	r3, #34	@ 0x22
 8007e2e:	d109      	bne.n	8007e44 <I2C_Master_ISR_DMA+0x120>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	681a      	ldr	r2, [r3, #0]
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	2180      	movs	r1, #128	@ 0x80
 8007e3c:	0209      	lsls	r1, r1, #8
 8007e3e:	430a      	orrs	r2, r1
 8007e40:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8007e42:	e05f      	b.n	8007f04 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	681a      	ldr	r2, [r3, #0]
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	2180      	movs	r1, #128	@ 0x80
 8007e50:	01c9      	lsls	r1, r1, #7
 8007e52:	430a      	orrs	r2, r1
 8007e54:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8007e56:	e055      	b.n	8007f04 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	685a      	ldr	r2, [r3, #4]
 8007e5e:	2380      	movs	r3, #128	@ 0x80
 8007e60:	049b      	lsls	r3, r3, #18
 8007e62:	401a      	ands	r2, r3
 8007e64:	2380      	movs	r3, #128	@ 0x80
 8007e66:	049b      	lsls	r3, r3, #18
 8007e68:	429a      	cmp	r2, r3
 8007e6a:	d004      	beq.n	8007e76 <I2C_Master_ISR_DMA+0x152>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	0018      	movs	r0, r3
 8007e70:	f000 fafa 	bl	8008468 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8007e74:	e046      	b.n	8007f04 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	2140      	movs	r1, #64	@ 0x40
 8007e7a:	0018      	movs	r0, r3
 8007e7c:	f000 fde0 	bl	8008a40 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8007e80:	e040      	b.n	8007f04 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8007e82:	68bb      	ldr	r3, [r7, #8]
 8007e84:	2240      	movs	r2, #64	@ 0x40
 8007e86:	4013      	ands	r3, r2
 8007e88:	d02c      	beq.n	8007ee4 <I2C_Master_ISR_DMA+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	2240      	movs	r2, #64	@ 0x40
 8007e8e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8007e90:	d028      	beq.n	8007ee4 <I2C_Master_ISR_DMA+0x1c0>
  {
    if (hi2c->XferCount == 0U)
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007e96:	b29b      	uxth	r3, r3
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d11d      	bne.n	8007ed8 <I2C_Master_ISR_DMA+0x1b4>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	685a      	ldr	r2, [r3, #4]
 8007ea2:	2380      	movs	r3, #128	@ 0x80
 8007ea4:	049b      	lsls	r3, r3, #18
 8007ea6:	401a      	ands	r2, r3
 8007ea8:	2380      	movs	r3, #128	@ 0x80
 8007eaa:	049b      	lsls	r3, r3, #18
 8007eac:	429a      	cmp	r2, r3
 8007eae:	d028      	beq.n	8007f02 <I2C_Master_ISR_DMA+0x1de>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007eb4:	4a18      	ldr	r2, [pc, #96]	@ (8007f18 <I2C_Master_ISR_DMA+0x1f4>)
 8007eb6:	4293      	cmp	r3, r2
 8007eb8:	d109      	bne.n	8007ece <I2C_Master_ISR_DMA+0x1aa>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	685a      	ldr	r2, [r3, #4]
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	2180      	movs	r1, #128	@ 0x80
 8007ec6:	01c9      	lsls	r1, r1, #7
 8007ec8:	430a      	orrs	r2, r1
 8007eca:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8007ecc:	e019      	b.n	8007f02 <I2C_Master_ISR_DMA+0x1de>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	0018      	movs	r0, r3
 8007ed2:	f000 fac9 	bl	8008468 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8007ed6:	e014      	b.n	8007f02 <I2C_Master_ISR_DMA+0x1de>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	2140      	movs	r1, #64	@ 0x40
 8007edc:	0018      	movs	r0, r3
 8007ede:	f000 fdaf 	bl	8008a40 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8007ee2:	e00e      	b.n	8007f02 <I2C_Master_ISR_DMA+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007ee4:	68bb      	ldr	r3, [r7, #8]
 8007ee6:	2220      	movs	r2, #32
 8007ee8:	4013      	ands	r3, r2
 8007eea:	d00b      	beq.n	8007f04 <I2C_Master_ISR_DMA+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2220      	movs	r2, #32
 8007ef0:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007ef2:	d007      	beq.n	8007f04 <I2C_Master_ISR_DMA+0x1e0>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8007ef4:	68ba      	ldr	r2, [r7, #8]
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	0011      	movs	r1, r2
 8007efa:	0018      	movs	r0, r3
 8007efc:	f000 fb5a 	bl	80085b4 <I2C_ITMasterCplt>
 8007f00:	e000      	b.n	8007f04 <I2C_Master_ISR_DMA+0x1e0>
    if (hi2c->XferCount == 0U)
 8007f02:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	2240      	movs	r2, #64	@ 0x40
 8007f08:	2100      	movs	r1, #0
 8007f0a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007f0c:	2300      	movs	r3, #0
}
 8007f0e:	0018      	movs	r0, r3
 8007f10:	46bd      	mov	sp, r7
 8007f12:	b007      	add	sp, #28
 8007f14:	bd90      	pop	{r4, r7, pc}
 8007f16:	46c0      	nop			@ (mov r8, r8)
 8007f18:	ffff0000 	.word	0xffff0000

08007f1c <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8007f1c:	b590      	push	{r4, r7, lr}
 8007f1e:	b089      	sub	sp, #36	@ 0x24
 8007f20:	af02      	add	r7, sp, #8
 8007f22:	60f8      	str	r0, [r7, #12]
 8007f24:	60b9      	str	r1, [r7, #8]
 8007f26:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8007f28:	4b88      	ldr	r3, [pc, #544]	@ (800814c <I2C_Mem_ISR_DMA+0x230>)
 8007f2a:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	2240      	movs	r2, #64	@ 0x40
 8007f30:	5c9b      	ldrb	r3, [r3, r2]
 8007f32:	2b01      	cmp	r3, #1
 8007f34:	d101      	bne.n	8007f3a <I2C_Mem_ISR_DMA+0x1e>
 8007f36:	2302      	movs	r3, #2
 8007f38:	e104      	b.n	8008144 <I2C_Mem_ISR_DMA+0x228>
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	2240      	movs	r2, #64	@ 0x40
 8007f3e:	2101      	movs	r1, #1
 8007f40:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8007f42:	68bb      	ldr	r3, [r7, #8]
 8007f44:	2210      	movs	r2, #16
 8007f46:	4013      	ands	r3, r2
 8007f48:	d017      	beq.n	8007f7a <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2210      	movs	r2, #16
 8007f4e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8007f50:	d013      	beq.n	8007f7a <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	2210      	movs	r2, #16
 8007f58:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f5e:	2204      	movs	r2, #4
 8007f60:	431a      	orrs	r2, r3
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	2120      	movs	r1, #32
 8007f6a:	0018      	movs	r0, r3
 8007f6c:	f000 ffc8 	bl	8008f00 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	0018      	movs	r0, r3
 8007f74:	f000 fe8f 	bl	8008c96 <I2C_Flush_TXDR>
 8007f78:	e0df      	b.n	800813a <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007f7a:	68bb      	ldr	r3, [r7, #8]
 8007f7c:	2202      	movs	r2, #2
 8007f7e:	4013      	ands	r3, r2
 8007f80:	d00d      	beq.n	8007f9e <I2C_Mem_ISR_DMA+0x82>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	2202      	movs	r2, #2
 8007f86:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007f88:	d009      	beq.n	8007f9e <I2C_Mem_ISR_DMA+0x82>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	68fa      	ldr	r2, [r7, #12]
 8007f90:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8007f92:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	2201      	movs	r2, #1
 8007f98:	4252      	negs	r2, r2
 8007f9a:	651a      	str	r2, [r3, #80]	@ 0x50
 8007f9c:	e0cd      	b.n	800813a <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8007f9e:	68bb      	ldr	r3, [r7, #8]
 8007fa0:	2280      	movs	r2, #128	@ 0x80
 8007fa2:	4013      	ands	r3, r2
 8007fa4:	d05e      	beq.n	8008064 <I2C_Mem_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	2240      	movs	r2, #64	@ 0x40
 8007faa:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8007fac:	d05a      	beq.n	8008064 <I2C_Mem_ISR_DMA+0x148>
  {
    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	2110      	movs	r1, #16
 8007fb2:	0018      	movs	r0, r3
 8007fb4:	f000 ffa4 	bl	8008f00 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007fbc:	b29b      	uxth	r3, r3
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d04a      	beq.n	8008058 <I2C_Mem_ISR_DMA+0x13c>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007fc6:	b29b      	uxth	r3, r3
 8007fc8:	2bff      	cmp	r3, #255	@ 0xff
 8007fca:	d910      	bls.n	8007fee <I2C_Mem_ISR_DMA+0xd2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	22ff      	movs	r2, #255	@ 0xff
 8007fd0:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007fd6:	b299      	uxth	r1, r3
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007fdc:	b2da      	uxtb	r2, r3
 8007fde:	2380      	movs	r3, #128	@ 0x80
 8007fe0:	045b      	lsls	r3, r3, #17
 8007fe2:	68f8      	ldr	r0, [r7, #12]
 8007fe4:	2400      	movs	r4, #0
 8007fe6:	9400      	str	r4, [sp, #0]
 8007fe8:	f000 ff50 	bl	8008e8c <I2C_TransferConfig>
 8007fec:	e011      	b.n	8008012 <I2C_Mem_ISR_DMA+0xf6>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007ff2:	b29a      	uxth	r2, r3
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007ffc:	b299      	uxth	r1, r3
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008002:	b2da      	uxtb	r2, r3
 8008004:	2380      	movs	r3, #128	@ 0x80
 8008006:	049b      	lsls	r3, r3, #18
 8008008:	68f8      	ldr	r0, [r7, #12]
 800800a:	2400      	movs	r4, #0
 800800c:	9400      	str	r4, [sp, #0]
 800800e:	f000 ff3d 	bl	8008e8c <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008016:	b29a      	uxth	r2, r3
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800801c:	1ad3      	subs	r3, r2, r3
 800801e:	b29a      	uxth	r2, r3
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	2241      	movs	r2, #65	@ 0x41
 8008028:	5c9b      	ldrb	r3, [r3, r2]
 800802a:	b2db      	uxtb	r3, r3
 800802c:	2b22      	cmp	r3, #34	@ 0x22
 800802e:	d109      	bne.n	8008044 <I2C_Mem_ISR_DMA+0x128>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	681a      	ldr	r2, [r3, #0]
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	2180      	movs	r1, #128	@ 0x80
 800803c:	0209      	lsls	r1, r1, #8
 800803e:	430a      	orrs	r2, r1
 8008040:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8008042:	e07a      	b.n	800813a <I2C_Mem_ISR_DMA+0x21e>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	681a      	ldr	r2, [r3, #0]
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	2180      	movs	r1, #128	@ 0x80
 8008050:	01c9      	lsls	r1, r1, #7
 8008052:	430a      	orrs	r2, r1
 8008054:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8008056:	e070      	b.n	800813a <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	2140      	movs	r1, #64	@ 0x40
 800805c:	0018      	movs	r0, r3
 800805e:	f000 fcef 	bl	8008a40 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8008062:	e06a      	b.n	800813a <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8008064:	68bb      	ldr	r3, [r7, #8]
 8008066:	2240      	movs	r2, #64	@ 0x40
 8008068:	4013      	ands	r3, r2
 800806a:	d058      	beq.n	800811e <I2C_Mem_ISR_DMA+0x202>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2240      	movs	r2, #64	@ 0x40
 8008070:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8008072:	d054      	beq.n	800811e <I2C_Mem_ISR_DMA+0x202>
  {
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	2241      	movs	r2, #65	@ 0x41
 8008078:	5c9b      	ldrb	r3, [r3, r2]
 800807a:	b2db      	uxtb	r3, r3
 800807c:	2b22      	cmp	r3, #34	@ 0x22
 800807e:	d101      	bne.n	8008084 <I2C_Mem_ISR_DMA+0x168>
    {
      direction = I2C_GENERATE_START_READ;
 8008080:	4b33      	ldr	r3, [pc, #204]	@ (8008150 <I2C_Mem_ISR_DMA+0x234>)
 8008082:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008088:	b29b      	uxth	r3, r3
 800808a:	2bff      	cmp	r3, #255	@ 0xff
 800808c:	d911      	bls.n	80080b2 <I2C_Mem_ISR_DMA+0x196>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	22ff      	movs	r2, #255	@ 0xff
 8008092:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008098:	b299      	uxth	r1, r3
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800809e:	b2da      	uxtb	r2, r3
 80080a0:	2380      	movs	r3, #128	@ 0x80
 80080a2:	045c      	lsls	r4, r3, #17
 80080a4:	68f8      	ldr	r0, [r7, #12]
 80080a6:	697b      	ldr	r3, [r7, #20]
 80080a8:	9300      	str	r3, [sp, #0]
 80080aa:	0023      	movs	r3, r4
 80080ac:	f000 feee 	bl	8008e8c <I2C_TransferConfig>
 80080b0:	e012      	b.n	80080d8 <I2C_Mem_ISR_DMA+0x1bc>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80080b6:	b29a      	uxth	r2, r3
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80080c0:	b299      	uxth	r1, r3
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80080c6:	b2da      	uxtb	r2, r3
 80080c8:	2380      	movs	r3, #128	@ 0x80
 80080ca:	049c      	lsls	r4, r3, #18
 80080cc:	68f8      	ldr	r0, [r7, #12]
 80080ce:	697b      	ldr	r3, [r7, #20]
 80080d0:	9300      	str	r3, [sp, #0]
 80080d2:	0023      	movs	r3, r4
 80080d4:	f000 feda 	bl	8008e8c <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80080dc:	b29a      	uxth	r2, r3
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80080e2:	1ad3      	subs	r3, r2, r3
 80080e4:	b29a      	uxth	r2, r3
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	2241      	movs	r2, #65	@ 0x41
 80080ee:	5c9b      	ldrb	r3, [r3, r2]
 80080f0:	b2db      	uxtb	r3, r3
 80080f2:	2b22      	cmp	r3, #34	@ 0x22
 80080f4:	d109      	bne.n	800810a <I2C_Mem_ISR_DMA+0x1ee>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	681a      	ldr	r2, [r3, #0]
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	2180      	movs	r1, #128	@ 0x80
 8008102:	0209      	lsls	r1, r1, #8
 8008104:	430a      	orrs	r2, r1
 8008106:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008108:	e017      	b.n	800813a <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	681a      	ldr	r2, [r3, #0]
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	2180      	movs	r1, #128	@ 0x80
 8008116:	01c9      	lsls	r1, r1, #7
 8008118:	430a      	orrs	r2, r1
 800811a:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800811c:	e00d      	b.n	800813a <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800811e:	68bb      	ldr	r3, [r7, #8]
 8008120:	2220      	movs	r2, #32
 8008122:	4013      	ands	r3, r2
 8008124:	d009      	beq.n	800813a <I2C_Mem_ISR_DMA+0x21e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2220      	movs	r2, #32
 800812a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800812c:	d005      	beq.n	800813a <I2C_Mem_ISR_DMA+0x21e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800812e:	68ba      	ldr	r2, [r7, #8]
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	0011      	movs	r1, r2
 8008134:	0018      	movs	r0, r3
 8008136:	f000 fa3d 	bl	80085b4 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	2240      	movs	r2, #64	@ 0x40
 800813e:	2100      	movs	r1, #0
 8008140:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008142:	2300      	movs	r3, #0
}
 8008144:	0018      	movs	r0, r3
 8008146:	46bd      	mov	sp, r7
 8008148:	b007      	add	sp, #28
 800814a:	bd90      	pop	{r4, r7, pc}
 800814c:	80002000 	.word	0x80002000
 8008150:	80002400 	.word	0x80002400

08008154 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8008154:	b580      	push	{r7, lr}
 8008156:	b088      	sub	sp, #32
 8008158:	af00      	add	r7, sp, #0
 800815a:	60f8      	str	r0, [r7, #12]
 800815c:	60b9      	str	r1, [r7, #8]
 800815e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008164:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8008166:	2300      	movs	r3, #0
 8008168:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	2240      	movs	r2, #64	@ 0x40
 800816e:	5c9b      	ldrb	r3, [r3, r2]
 8008170:	2b01      	cmp	r3, #1
 8008172:	d101      	bne.n	8008178 <I2C_Slave_ISR_DMA+0x24>
 8008174:	2302      	movs	r3, #2
 8008176:	e0cd      	b.n	8008314 <I2C_Slave_ISR_DMA+0x1c0>
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	2240      	movs	r2, #64	@ 0x40
 800817c:	2101      	movs	r1, #1
 800817e:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008180:	68bb      	ldr	r3, [r7, #8]
 8008182:	2220      	movs	r2, #32
 8008184:	4013      	ands	r3, r2
 8008186:	d009      	beq.n	800819c <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2220      	movs	r2, #32
 800818c:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800818e:	d005      	beq.n	800819c <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8008190:	68ba      	ldr	r2, [r7, #8]
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	0011      	movs	r1, r2
 8008196:	0018      	movs	r0, r3
 8008198:	f000 fada 	bl	8008750 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800819c:	68bb      	ldr	r3, [r7, #8]
 800819e:	2210      	movs	r2, #16
 80081a0:	4013      	ands	r3, r2
 80081a2:	d100      	bne.n	80081a6 <I2C_Slave_ISR_DMA+0x52>
 80081a4:	e0a3      	b.n	80082ee <I2C_Slave_ISR_DMA+0x19a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2210      	movs	r2, #16
 80081aa:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80081ac:	d100      	bne.n	80081b0 <I2C_Slave_ISR_DMA+0x5c>
 80081ae:	e09e      	b.n	80082ee <I2C_Slave_ISR_DMA+0x19a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80081b0:	687a      	ldr	r2, [r7, #4]
 80081b2:	2380      	movs	r3, #128	@ 0x80
 80081b4:	01db      	lsls	r3, r3, #7
 80081b6:	4013      	ands	r3, r2
 80081b8:	d105      	bne.n	80081c6 <I2C_Slave_ISR_DMA+0x72>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 80081ba:	687a      	ldr	r2, [r7, #4]
 80081bc:	2380      	movs	r3, #128	@ 0x80
 80081be:	021b      	lsls	r3, r3, #8
 80081c0:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80081c2:	d100      	bne.n	80081c6 <I2C_Slave_ISR_DMA+0x72>
 80081c4:	e08c      	b.n	80082e0 <I2C_Slave_ISR_DMA+0x18c>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d00c      	beq.n	80081e8 <I2C_Slave_ISR_DMA+0x94>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 80081ce:	687a      	ldr	r2, [r7, #4]
 80081d0:	2380      	movs	r3, #128	@ 0x80
 80081d2:	021b      	lsls	r3, r3, #8
 80081d4:	4013      	ands	r3, r2
 80081d6:	d007      	beq.n	80081e8 <I2C_Slave_ISR_DMA+0x94>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	685b      	ldr	r3, [r3, #4]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d101      	bne.n	80081e8 <I2C_Slave_ISR_DMA+0x94>
          {
            treatdmanack = 1U;
 80081e4:	2301      	movs	r3, #1
 80081e6:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d00c      	beq.n	800820a <I2C_Slave_ISR_DMA+0xb6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 80081f0:	687a      	ldr	r2, [r7, #4]
 80081f2:	2380      	movs	r3, #128	@ 0x80
 80081f4:	01db      	lsls	r3, r3, #7
 80081f6:	4013      	ands	r3, r2
 80081f8:	d007      	beq.n	800820a <I2C_Slave_ISR_DMA+0xb6>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	685b      	ldr	r3, [r3, #4]
 8008202:	2b00      	cmp	r3, #0
 8008204:	d101      	bne.n	800820a <I2C_Slave_ISR_DMA+0xb6>
          {
            treatdmanack = 1U;
 8008206:	2301      	movs	r3, #1
 8008208:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800820a:	69fb      	ldr	r3, [r7, #28]
 800820c:	2b01      	cmp	r3, #1
 800820e:	d12d      	bne.n	800826c <I2C_Slave_ISR_DMA+0x118>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	2241      	movs	r2, #65	@ 0x41
 8008214:	5c9b      	ldrb	r3, [r3, r2]
 8008216:	b2db      	uxtb	r3, r3
 8008218:	2b28      	cmp	r3, #40	@ 0x28
 800821a:	d10b      	bne.n	8008234 <I2C_Slave_ISR_DMA+0xe0>
 800821c:	69ba      	ldr	r2, [r7, #24]
 800821e:	2380      	movs	r3, #128	@ 0x80
 8008220:	049b      	lsls	r3, r3, #18
 8008222:	429a      	cmp	r2, r3
 8008224:	d106      	bne.n	8008234 <I2C_Slave_ISR_DMA+0xe0>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8008226:	68ba      	ldr	r2, [r7, #8]
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	0011      	movs	r1, r2
 800822c:	0018      	movs	r0, r3
 800822e:	f000 fbaf 	bl	8008990 <I2C_ITListenCplt>
 8008232:	e054      	b.n	80082de <I2C_Slave_ISR_DMA+0x18a>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	2241      	movs	r2, #65	@ 0x41
 8008238:	5c9b      	ldrb	r3, [r3, r2]
 800823a:	b2db      	uxtb	r3, r3
 800823c:	2b29      	cmp	r3, #41	@ 0x29
 800823e:	d110      	bne.n	8008262 <I2C_Slave_ISR_DMA+0x10e>
 8008240:	69bb      	ldr	r3, [r7, #24]
 8008242:	4a36      	ldr	r2, [pc, #216]	@ (800831c <I2C_Slave_ISR_DMA+0x1c8>)
 8008244:	4293      	cmp	r3, r2
 8008246:	d00c      	beq.n	8008262 <I2C_Slave_ISR_DMA+0x10e>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	2210      	movs	r2, #16
 800824e:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	0018      	movs	r0, r3
 8008254:	f000 fd1f 	bl	8008c96 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	0018      	movs	r0, r3
 800825c:	f000 f946 	bl	80084ec <I2C_ITSlaveSeqCplt>
 8008260:	e03d      	b.n	80082de <I2C_Slave_ISR_DMA+0x18a>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	2210      	movs	r2, #16
 8008268:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800826a:	e03e      	b.n	80082ea <I2C_Slave_ISR_DMA+0x196>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	2210      	movs	r2, #16
 8008272:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008278:	2204      	movs	r2, #4
 800827a:	431a      	orrs	r2, r3
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8008280:	2317      	movs	r3, #23
 8008282:	18fb      	adds	r3, r7, r3
 8008284:	68fa      	ldr	r2, [r7, #12]
 8008286:	2141      	movs	r1, #65	@ 0x41
 8008288:	5c52      	ldrb	r2, [r2, r1]
 800828a:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800828c:	69bb      	ldr	r3, [r7, #24]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d004      	beq.n	800829c <I2C_Slave_ISR_DMA+0x148>
 8008292:	69ba      	ldr	r2, [r7, #24]
 8008294:	2380      	movs	r3, #128	@ 0x80
 8008296:	045b      	lsls	r3, r3, #17
 8008298:	429a      	cmp	r2, r3
 800829a:	d126      	bne.n	80082ea <I2C_Slave_ISR_DMA+0x196>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800829c:	2217      	movs	r2, #23
 800829e:	18bb      	adds	r3, r7, r2
 80082a0:	781b      	ldrb	r3, [r3, #0]
 80082a2:	2b21      	cmp	r3, #33	@ 0x21
 80082a4:	d003      	beq.n	80082ae <I2C_Slave_ISR_DMA+0x15a>
 80082a6:	18bb      	adds	r3, r7, r2
 80082a8:	781b      	ldrb	r3, [r3, #0]
 80082aa:	2b29      	cmp	r3, #41	@ 0x29
 80082ac:	d103      	bne.n	80082b6 <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	2221      	movs	r2, #33	@ 0x21
 80082b2:	631a      	str	r2, [r3, #48]	@ 0x30
 80082b4:	e00b      	b.n	80082ce <I2C_Slave_ISR_DMA+0x17a>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80082b6:	2217      	movs	r2, #23
 80082b8:	18bb      	adds	r3, r7, r2
 80082ba:	781b      	ldrb	r3, [r3, #0]
 80082bc:	2b22      	cmp	r3, #34	@ 0x22
 80082be:	d003      	beq.n	80082c8 <I2C_Slave_ISR_DMA+0x174>
 80082c0:	18bb      	adds	r3, r7, r2
 80082c2:	781b      	ldrb	r3, [r3, #0]
 80082c4:	2b2a      	cmp	r3, #42	@ 0x2a
 80082c6:	d102      	bne.n	80082ce <I2C_Slave_ISR_DMA+0x17a>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	2222      	movs	r2, #34	@ 0x22
 80082cc:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	0011      	movs	r1, r2
 80082d6:	0018      	movs	r0, r3
 80082d8:	f000 fbb2 	bl	8008a40 <I2C_ITError>
      if (treatdmanack == 1U)
 80082dc:	e005      	b.n	80082ea <I2C_Slave_ISR_DMA+0x196>
 80082de:	e004      	b.n	80082ea <I2C_Slave_ISR_DMA+0x196>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	2210      	movs	r2, #16
 80082e6:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80082e8:	e00f      	b.n	800830a <I2C_Slave_ISR_DMA+0x1b6>
      if (treatdmanack == 1U)
 80082ea:	46c0      	nop			@ (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80082ec:	e00d      	b.n	800830a <I2C_Slave_ISR_DMA+0x1b6>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80082ee:	68bb      	ldr	r3, [r7, #8]
 80082f0:	2208      	movs	r2, #8
 80082f2:	4013      	ands	r3, r2
 80082f4:	d009      	beq.n	800830a <I2C_Slave_ISR_DMA+0x1b6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	2208      	movs	r2, #8
 80082fa:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80082fc:	d005      	beq.n	800830a <I2C_Slave_ISR_DMA+0x1b6>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 80082fe:	68ba      	ldr	r2, [r7, #8]
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	0011      	movs	r1, r2
 8008304:	0018      	movs	r0, r3
 8008306:	f000 f80b 	bl	8008320 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	2240      	movs	r2, #64	@ 0x40
 800830e:	2100      	movs	r1, #0
 8008310:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008312:	2300      	movs	r3, #0
}
 8008314:	0018      	movs	r0, r3
 8008316:	46bd      	mov	sp, r7
 8008318:	b008      	add	sp, #32
 800831a:	bd80      	pop	{r7, pc}
 800831c:	ffff0000 	.word	0xffff0000

08008320 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008320:	b5b0      	push	{r4, r5, r7, lr}
 8008322:	b084      	sub	sp, #16
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
 8008328:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	2241      	movs	r2, #65	@ 0x41
 800832e:	5c9b      	ldrb	r3, [r3, r2]
 8008330:	b2db      	uxtb	r3, r3
 8008332:	001a      	movs	r2, r3
 8008334:	2328      	movs	r3, #40	@ 0x28
 8008336:	4013      	ands	r3, r2
 8008338:	2b28      	cmp	r3, #40	@ 0x28
 800833a:	d000      	beq.n	800833e <I2C_ITAddrCplt+0x1e>
 800833c:	e088      	b.n	8008450 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	699b      	ldr	r3, [r3, #24]
 8008344:	0c1b      	lsrs	r3, r3, #16
 8008346:	b2da      	uxtb	r2, r3
 8008348:	250f      	movs	r5, #15
 800834a:	197b      	adds	r3, r7, r5
 800834c:	2101      	movs	r1, #1
 800834e:	400a      	ands	r2, r1
 8008350:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	699b      	ldr	r3, [r3, #24]
 8008358:	0c1b      	lsrs	r3, r3, #16
 800835a:	b29a      	uxth	r2, r3
 800835c:	200c      	movs	r0, #12
 800835e:	183b      	adds	r3, r7, r0
 8008360:	21fe      	movs	r1, #254	@ 0xfe
 8008362:	400a      	ands	r2, r1
 8008364:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	689b      	ldr	r3, [r3, #8]
 800836c:	b29a      	uxth	r2, r3
 800836e:	240a      	movs	r4, #10
 8008370:	193b      	adds	r3, r7, r4
 8008372:	0592      	lsls	r2, r2, #22
 8008374:	0d92      	lsrs	r2, r2, #22
 8008376:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	68db      	ldr	r3, [r3, #12]
 800837e:	b29a      	uxth	r2, r3
 8008380:	2308      	movs	r3, #8
 8008382:	18fb      	adds	r3, r7, r3
 8008384:	21fe      	movs	r1, #254	@ 0xfe
 8008386:	400a      	ands	r2, r1
 8008388:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	68db      	ldr	r3, [r3, #12]
 800838e:	2b02      	cmp	r3, #2
 8008390:	d148      	bne.n	8008424 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8008392:	0021      	movs	r1, r4
 8008394:	187b      	adds	r3, r7, r1
 8008396:	881b      	ldrh	r3, [r3, #0]
 8008398:	09db      	lsrs	r3, r3, #7
 800839a:	b29a      	uxth	r2, r3
 800839c:	183b      	adds	r3, r7, r0
 800839e:	881b      	ldrh	r3, [r3, #0]
 80083a0:	4053      	eors	r3, r2
 80083a2:	b29b      	uxth	r3, r3
 80083a4:	001a      	movs	r2, r3
 80083a6:	2306      	movs	r3, #6
 80083a8:	4013      	ands	r3, r2
 80083aa:	d120      	bne.n	80083ee <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 80083ac:	183b      	adds	r3, r7, r0
 80083ae:	187a      	adds	r2, r7, r1
 80083b0:	8812      	ldrh	r2, [r2, #0]
 80083b2:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80083b8:	1c5a      	adds	r2, r3, #1
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80083c2:	2b02      	cmp	r3, #2
 80083c4:	d14c      	bne.n	8008460 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	2200      	movs	r2, #0
 80083ca:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	2208      	movs	r2, #8
 80083d2:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2240      	movs	r2, #64	@ 0x40
 80083d8:	2100      	movs	r1, #0
 80083da:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80083dc:	183b      	adds	r3, r7, r0
 80083de:	881a      	ldrh	r2, [r3, #0]
 80083e0:	197b      	adds	r3, r7, r5
 80083e2:	7819      	ldrb	r1, [r3, #0]
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	0018      	movs	r0, r3
 80083e8:	f7ff fa39 	bl	800785e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80083ec:	e038      	b.n	8008460 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 80083ee:	240c      	movs	r4, #12
 80083f0:	193b      	adds	r3, r7, r4
 80083f2:	2208      	movs	r2, #8
 80083f4:	18ba      	adds	r2, r7, r2
 80083f6:	8812      	ldrh	r2, [r2, #0]
 80083f8:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80083fa:	2380      	movs	r3, #128	@ 0x80
 80083fc:	021a      	lsls	r2, r3, #8
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	0011      	movs	r1, r2
 8008402:	0018      	movs	r0, r3
 8008404:	f000 fe0a 	bl	800901c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2240      	movs	r2, #64	@ 0x40
 800840c:	2100      	movs	r1, #0
 800840e:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008410:	193b      	adds	r3, r7, r4
 8008412:	881a      	ldrh	r2, [r3, #0]
 8008414:	230f      	movs	r3, #15
 8008416:	18fb      	adds	r3, r7, r3
 8008418:	7819      	ldrb	r1, [r3, #0]
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	0018      	movs	r0, r3
 800841e:	f7ff fa1e 	bl	800785e <HAL_I2C_AddrCallback>
}
 8008422:	e01d      	b.n	8008460 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8008424:	2380      	movs	r3, #128	@ 0x80
 8008426:	021a      	lsls	r2, r3, #8
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	0011      	movs	r1, r2
 800842c:	0018      	movs	r0, r3
 800842e:	f000 fdf5 	bl	800901c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	2240      	movs	r2, #64	@ 0x40
 8008436:	2100      	movs	r1, #0
 8008438:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800843a:	230c      	movs	r3, #12
 800843c:	18fb      	adds	r3, r7, r3
 800843e:	881a      	ldrh	r2, [r3, #0]
 8008440:	230f      	movs	r3, #15
 8008442:	18fb      	adds	r3, r7, r3
 8008444:	7819      	ldrb	r1, [r3, #0]
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	0018      	movs	r0, r3
 800844a:	f7ff fa08 	bl	800785e <HAL_I2C_AddrCallback>
}
 800844e:	e007      	b.n	8008460 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	2208      	movs	r2, #8
 8008456:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	2240      	movs	r2, #64	@ 0x40
 800845c:	2100      	movs	r1, #0
 800845e:	5499      	strb	r1, [r3, r2]
}
 8008460:	46c0      	nop			@ (mov r8, r8)
 8008462:	46bd      	mov	sp, r7
 8008464:	b004      	add	sp, #16
 8008466:	bdb0      	pop	{r4, r5, r7, pc}

08008468 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b082      	sub	sp, #8
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2242      	movs	r2, #66	@ 0x42
 8008474:	2100      	movs	r1, #0
 8008476:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2241      	movs	r2, #65	@ 0x41
 800847c:	5c9b      	ldrb	r3, [r3, r2]
 800847e:	b2db      	uxtb	r3, r3
 8008480:	2b21      	cmp	r3, #33	@ 0x21
 8008482:	d117      	bne.n	80084b4 <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2241      	movs	r2, #65	@ 0x41
 8008488:	2120      	movs	r1, #32
 800848a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2211      	movs	r2, #17
 8008490:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	2200      	movs	r2, #0
 8008496:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2101      	movs	r1, #1
 800849c:	0018      	movs	r0, r3
 800849e:	f000 fdbd 	bl	800901c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	2240      	movs	r2, #64	@ 0x40
 80084a6:	2100      	movs	r1, #0
 80084a8:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	0018      	movs	r0, r3
 80084ae:	f7ff f9b6 	bl	800781e <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80084b2:	e016      	b.n	80084e2 <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2241      	movs	r2, #65	@ 0x41
 80084b8:	2120      	movs	r1, #32
 80084ba:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2212      	movs	r2, #18
 80084c0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	2200      	movs	r2, #0
 80084c6:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	2102      	movs	r1, #2
 80084cc:	0018      	movs	r0, r3
 80084ce:	f000 fda5 	bl	800901c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	2240      	movs	r2, #64	@ 0x40
 80084d6:	2100      	movs	r1, #0
 80084d8:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	0018      	movs	r0, r3
 80084de:	f7ff f9a6 	bl	800782e <HAL_I2C_MasterRxCpltCallback>
}
 80084e2:	46c0      	nop			@ (mov r8, r8)
 80084e4:	46bd      	mov	sp, r7
 80084e6:	b002      	add	sp, #8
 80084e8:	bd80      	pop	{r7, pc}
	...

080084ec <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b084      	sub	sp, #16
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	2242      	movs	r2, #66	@ 0x42
 8008500:	2100      	movs	r1, #0
 8008502:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8008504:	68fa      	ldr	r2, [r7, #12]
 8008506:	2380      	movs	r3, #128	@ 0x80
 8008508:	01db      	lsls	r3, r3, #7
 800850a:	4013      	ands	r3, r2
 800850c:	d008      	beq.n	8008520 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	681a      	ldr	r2, [r3, #0]
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	4924      	ldr	r1, [pc, #144]	@ (80085ac <I2C_ITSlaveSeqCplt+0xc0>)
 800851a:	400a      	ands	r2, r1
 800851c:	601a      	str	r2, [r3, #0]
 800851e:	e00c      	b.n	800853a <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8008520:	68fa      	ldr	r2, [r7, #12]
 8008522:	2380      	movs	r3, #128	@ 0x80
 8008524:	021b      	lsls	r3, r3, #8
 8008526:	4013      	ands	r3, r2
 8008528:	d007      	beq.n	800853a <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	681a      	ldr	r2, [r3, #0]
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	491e      	ldr	r1, [pc, #120]	@ (80085b0 <I2C_ITSlaveSeqCplt+0xc4>)
 8008536:	400a      	ands	r2, r1
 8008538:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	2241      	movs	r2, #65	@ 0x41
 800853e:	5c9b      	ldrb	r3, [r3, r2]
 8008540:	b2db      	uxtb	r3, r3
 8008542:	2b29      	cmp	r3, #41	@ 0x29
 8008544:	d114      	bne.n	8008570 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	2241      	movs	r2, #65	@ 0x41
 800854a:	2128      	movs	r1, #40	@ 0x28
 800854c:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	2221      	movs	r2, #33	@ 0x21
 8008552:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	2101      	movs	r1, #1
 8008558:	0018      	movs	r0, r3
 800855a:	f000 fd5f 	bl	800901c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	2240      	movs	r2, #64	@ 0x40
 8008562:	2100      	movs	r1, #0
 8008564:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	0018      	movs	r0, r3
 800856a:	f7ff f968 	bl	800783e <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800856e:	e019      	b.n	80085a4 <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	2241      	movs	r2, #65	@ 0x41
 8008574:	5c9b      	ldrb	r3, [r3, r2]
 8008576:	b2db      	uxtb	r3, r3
 8008578:	2b2a      	cmp	r3, #42	@ 0x2a
 800857a:	d113      	bne.n	80085a4 <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	2241      	movs	r2, #65	@ 0x41
 8008580:	2128      	movs	r1, #40	@ 0x28
 8008582:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2222      	movs	r2, #34	@ 0x22
 8008588:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	2102      	movs	r1, #2
 800858e:	0018      	movs	r0, r3
 8008590:	f000 fd44 	bl	800901c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2240      	movs	r2, #64	@ 0x40
 8008598:	2100      	movs	r1, #0
 800859a:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	0018      	movs	r0, r3
 80085a0:	f7ff f955 	bl	800784e <HAL_I2C_SlaveRxCpltCallback>
}
 80085a4:	46c0      	nop			@ (mov r8, r8)
 80085a6:	46bd      	mov	sp, r7
 80085a8:	b004      	add	sp, #16
 80085aa:	bd80      	pop	{r7, pc}
 80085ac:	ffffbfff 	.word	0xffffbfff
 80085b0:	ffff7fff 	.word	0xffff7fff

080085b4 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b086      	sub	sp, #24
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
 80085bc:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 80085be:	683b      	ldr	r3, [r7, #0]
 80085c0:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	2220      	movs	r2, #32
 80085c8:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	2241      	movs	r2, #65	@ 0x41
 80085ce:	5c9b      	ldrb	r3, [r3, r2]
 80085d0:	b2db      	uxtb	r3, r3
 80085d2:	2b21      	cmp	r3, #33	@ 0x21
 80085d4:	d108      	bne.n	80085e8 <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	2101      	movs	r1, #1
 80085da:	0018      	movs	r0, r3
 80085dc:	f000 fd1e 	bl	800901c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2211      	movs	r2, #17
 80085e4:	631a      	str	r2, [r3, #48]	@ 0x30
 80085e6:	e00d      	b.n	8008604 <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2241      	movs	r2, #65	@ 0x41
 80085ec:	5c9b      	ldrb	r3, [r3, r2]
 80085ee:	b2db      	uxtb	r3, r3
 80085f0:	2b22      	cmp	r3, #34	@ 0x22
 80085f2:	d107      	bne.n	8008604 <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	2102      	movs	r1, #2
 80085f8:	0018      	movs	r0, r3
 80085fa:	f000 fd0f 	bl	800901c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	2212      	movs	r2, #18
 8008602:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	685a      	ldr	r2, [r3, #4]
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	494e      	ldr	r1, [pc, #312]	@ (8008748 <I2C_ITMasterCplt+0x194>)
 8008610:	400a      	ands	r2, r1
 8008612:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	2200      	movs	r2, #0
 8008618:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	4a4b      	ldr	r2, [pc, #300]	@ (800874c <I2C_ITMasterCplt+0x198>)
 800861e:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8008620:	697b      	ldr	r3, [r7, #20]
 8008622:	2210      	movs	r2, #16
 8008624:	4013      	ands	r3, r2
 8008626:	d009      	beq.n	800863c <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	2210      	movs	r2, #16
 800862e:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008634:	2204      	movs	r2, #4
 8008636:	431a      	orrs	r2, r3
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	2241      	movs	r2, #65	@ 0x41
 8008640:	5c9b      	ldrb	r3, [r3, r2]
 8008642:	b2db      	uxtb	r3, r3
 8008644:	2b60      	cmp	r3, #96	@ 0x60
 8008646:	d109      	bne.n	800865c <I2C_ITMasterCplt+0xa8>
 8008648:	697b      	ldr	r3, [r7, #20]
 800864a:	2204      	movs	r2, #4
 800864c:	4013      	ands	r3, r2
 800864e:	d005      	beq.n	800865c <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008656:	b2db      	uxtb	r3, r3
 8008658:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800865a:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	0018      	movs	r0, r3
 8008660:	f000 fb19 	bl	8008c96 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008668:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	2241      	movs	r2, #65	@ 0x41
 800866e:	5c9b      	ldrb	r3, [r3, r2]
 8008670:	b2db      	uxtb	r3, r3
 8008672:	2b60      	cmp	r3, #96	@ 0x60
 8008674:	d002      	beq.n	800867c <I2C_ITMasterCplt+0xc8>
 8008676:	693b      	ldr	r3, [r7, #16]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d007      	beq.n	800868c <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	0011      	movs	r1, r2
 8008684:	0018      	movs	r0, r3
 8008686:	f000 f9db 	bl	8008a40 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800868a:	e058      	b.n	800873e <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	2241      	movs	r2, #65	@ 0x41
 8008690:	5c9b      	ldrb	r3, [r3, r2]
 8008692:	b2db      	uxtb	r3, r3
 8008694:	2b21      	cmp	r3, #33	@ 0x21
 8008696:	d126      	bne.n	80086e6 <I2C_ITMasterCplt+0x132>
    hi2c->State = HAL_I2C_STATE_READY;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2241      	movs	r2, #65	@ 0x41
 800869c:	2120      	movs	r1, #32
 800869e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2200      	movs	r2, #0
 80086a4:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	2242      	movs	r2, #66	@ 0x42
 80086aa:	5c9b      	ldrb	r3, [r3, r2]
 80086ac:	b2db      	uxtb	r3, r3
 80086ae:	2b40      	cmp	r3, #64	@ 0x40
 80086b0:	d10c      	bne.n	80086cc <I2C_ITMasterCplt+0x118>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	2242      	movs	r2, #66	@ 0x42
 80086b6:	2100      	movs	r1, #0
 80086b8:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	2240      	movs	r2, #64	@ 0x40
 80086be:	2100      	movs	r1, #0
 80086c0:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	0018      	movs	r0, r3
 80086c6:	f7ff f8e2 	bl	800788e <HAL_I2C_MemTxCpltCallback>
}
 80086ca:	e038      	b.n	800873e <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2242      	movs	r2, #66	@ 0x42
 80086d0:	2100      	movs	r1, #0
 80086d2:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2240      	movs	r2, #64	@ 0x40
 80086d8:	2100      	movs	r1, #0
 80086da:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	0018      	movs	r0, r3
 80086e0:	f7ff f89d 	bl	800781e <HAL_I2C_MasterTxCpltCallback>
}
 80086e4:	e02b      	b.n	800873e <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	2241      	movs	r2, #65	@ 0x41
 80086ea:	5c9b      	ldrb	r3, [r3, r2]
 80086ec:	b2db      	uxtb	r3, r3
 80086ee:	2b22      	cmp	r3, #34	@ 0x22
 80086f0:	d125      	bne.n	800873e <I2C_ITMasterCplt+0x18a>
    hi2c->State = HAL_I2C_STATE_READY;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	2241      	movs	r2, #65	@ 0x41
 80086f6:	2120      	movs	r1, #32
 80086f8:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	2200      	movs	r2, #0
 80086fe:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2242      	movs	r2, #66	@ 0x42
 8008704:	5c9b      	ldrb	r3, [r3, r2]
 8008706:	b2db      	uxtb	r3, r3
 8008708:	2b40      	cmp	r3, #64	@ 0x40
 800870a:	d10c      	bne.n	8008726 <I2C_ITMasterCplt+0x172>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2242      	movs	r2, #66	@ 0x42
 8008710:	2100      	movs	r1, #0
 8008712:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2240      	movs	r2, #64	@ 0x40
 8008718:	2100      	movs	r1, #0
 800871a:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	0018      	movs	r0, r3
 8008720:	f7ff f8bd 	bl	800789e <HAL_I2C_MemRxCpltCallback>
}
 8008724:	e00b      	b.n	800873e <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	2242      	movs	r2, #66	@ 0x42
 800872a:	2100      	movs	r1, #0
 800872c:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	2240      	movs	r2, #64	@ 0x40
 8008732:	2100      	movs	r1, #0
 8008734:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	0018      	movs	r0, r3
 800873a:	f7ff f878 	bl	800782e <HAL_I2C_MasterRxCpltCallback>
}
 800873e:	46c0      	nop			@ (mov r8, r8)
 8008740:	46bd      	mov	sp, r7
 8008742:	b006      	add	sp, #24
 8008744:	bd80      	pop	{r7, pc}
 8008746:	46c0      	nop			@ (mov r8, r8)
 8008748:	fe00e800 	.word	0xfe00e800
 800874c:	ffff0000 	.word	0xffff0000

08008750 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008750:	b580      	push	{r7, lr}
 8008752:	b086      	sub	sp, #24
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
 8008758:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8008762:	683b      	ldr	r3, [r7, #0]
 8008764:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8008766:	200f      	movs	r0, #15
 8008768:	183b      	adds	r3, r7, r0
 800876a:	687a      	ldr	r2, [r7, #4]
 800876c:	2141      	movs	r1, #65	@ 0x41
 800876e:	5c52      	ldrb	r2, [r2, r1]
 8008770:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	2220      	movs	r2, #32
 8008778:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800877a:	183b      	adds	r3, r7, r0
 800877c:	781b      	ldrb	r3, [r3, #0]
 800877e:	2b21      	cmp	r3, #33	@ 0x21
 8008780:	d003      	beq.n	800878a <I2C_ITSlaveCplt+0x3a>
 8008782:	183b      	adds	r3, r7, r0
 8008784:	781b      	ldrb	r3, [r3, #0]
 8008786:	2b29      	cmp	r3, #41	@ 0x29
 8008788:	d109      	bne.n	800879e <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800878a:	4a7b      	ldr	r2, [pc, #492]	@ (8008978 <I2C_ITSlaveCplt+0x228>)
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	0011      	movs	r1, r2
 8008790:	0018      	movs	r0, r3
 8008792:	f000 fc43 	bl	800901c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	2221      	movs	r2, #33	@ 0x21
 800879a:	631a      	str	r2, [r3, #48]	@ 0x30
 800879c:	e011      	b.n	80087c2 <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800879e:	220f      	movs	r2, #15
 80087a0:	18bb      	adds	r3, r7, r2
 80087a2:	781b      	ldrb	r3, [r3, #0]
 80087a4:	2b22      	cmp	r3, #34	@ 0x22
 80087a6:	d003      	beq.n	80087b0 <I2C_ITSlaveCplt+0x60>
 80087a8:	18bb      	adds	r3, r7, r2
 80087aa:	781b      	ldrb	r3, [r3, #0]
 80087ac:	2b2a      	cmp	r3, #42	@ 0x2a
 80087ae:	d108      	bne.n	80087c2 <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80087b0:	4a72      	ldr	r2, [pc, #456]	@ (800897c <I2C_ITSlaveCplt+0x22c>)
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	0011      	movs	r1, r2
 80087b6:	0018      	movs	r0, r3
 80087b8:	f000 fc30 	bl	800901c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2222      	movs	r2, #34	@ 0x22
 80087c0:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	685a      	ldr	r2, [r3, #4]
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	2180      	movs	r1, #128	@ 0x80
 80087ce:	0209      	lsls	r1, r1, #8
 80087d0:	430a      	orrs	r2, r1
 80087d2:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	685a      	ldr	r2, [r3, #4]
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	4968      	ldr	r1, [pc, #416]	@ (8008980 <I2C_ITSlaveCplt+0x230>)
 80087e0:	400a      	ands	r2, r1
 80087e2:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	0018      	movs	r0, r3
 80087e8:	f000 fa55 	bl	8008c96 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80087ec:	693a      	ldr	r2, [r7, #16]
 80087ee:	2380      	movs	r3, #128	@ 0x80
 80087f0:	01db      	lsls	r3, r3, #7
 80087f2:	4013      	ands	r3, r2
 80087f4:	d013      	beq.n	800881e <I2C_ITSlaveCplt+0xce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	681a      	ldr	r2, [r3, #0]
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	4960      	ldr	r1, [pc, #384]	@ (8008984 <I2C_ITSlaveCplt+0x234>)
 8008802:	400a      	ands	r2, r1
 8008804:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800880a:	2b00      	cmp	r3, #0
 800880c:	d01f      	beq.n	800884e <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	685b      	ldr	r3, [r3, #4]
 8008816:	b29a      	uxth	r2, r3
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800881c:	e017      	b.n	800884e <I2C_ITSlaveCplt+0xfe>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800881e:	693a      	ldr	r2, [r7, #16]
 8008820:	2380      	movs	r3, #128	@ 0x80
 8008822:	021b      	lsls	r3, r3, #8
 8008824:	4013      	ands	r3, r2
 8008826:	d012      	beq.n	800884e <I2C_ITSlaveCplt+0xfe>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	681a      	ldr	r2, [r3, #0]
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	4955      	ldr	r1, [pc, #340]	@ (8008988 <I2C_ITSlaveCplt+0x238>)
 8008834:	400a      	ands	r2, r1
 8008836:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800883c:	2b00      	cmp	r3, #0
 800883e:	d006      	beq.n	800884e <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	685b      	ldr	r3, [r3, #4]
 8008848:	b29a      	uxth	r2, r3
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800884e:	697b      	ldr	r3, [r7, #20]
 8008850:	2204      	movs	r2, #4
 8008852:	4013      	ands	r3, r2
 8008854:	d020      	beq.n	8008898 <I2C_ITSlaveCplt+0x148>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8008856:	697b      	ldr	r3, [r7, #20]
 8008858:	2204      	movs	r2, #4
 800885a:	4393      	bics	r3, r2
 800885c:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008868:	b2d2      	uxtb	r2, r2
 800886a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008870:	1c5a      	adds	r2, r3, #1
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800887a:	2b00      	cmp	r3, #0
 800887c:	d00c      	beq.n	8008898 <I2C_ITSlaveCplt+0x148>
    {
      hi2c->XferSize--;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008882:	3b01      	subs	r3, #1
 8008884:	b29a      	uxth	r2, r3
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800888e:	b29b      	uxth	r3, r3
 8008890:	3b01      	subs	r3, #1
 8008892:	b29a      	uxth	r2, r3
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800889c:	b29b      	uxth	r3, r3
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d005      	beq.n	80088ae <I2C_ITSlaveCplt+0x15e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80088a6:	2204      	movs	r2, #4
 80088a8:	431a      	orrs	r2, r3
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	2242      	movs	r2, #66	@ 0x42
 80088b2:	2100      	movs	r1, #0
 80088b4:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	2200      	movs	r2, #0
 80088ba:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d013      	beq.n	80088ec <I2C_ITSlaveCplt+0x19c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	0011      	movs	r1, r2
 80088cc:	0018      	movs	r0, r3
 80088ce:	f000 f8b7 	bl	8008a40 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	2241      	movs	r2, #65	@ 0x41
 80088d6:	5c9b      	ldrb	r3, [r3, r2]
 80088d8:	b2db      	uxtb	r3, r3
 80088da:	2b28      	cmp	r3, #40	@ 0x28
 80088dc:	d147      	bne.n	800896e <I2C_ITSlaveCplt+0x21e>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80088de:	697a      	ldr	r2, [r7, #20]
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	0011      	movs	r1, r2
 80088e4:	0018      	movs	r0, r3
 80088e6:	f000 f853 	bl	8008990 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80088ea:	e040      	b.n	800896e <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088f0:	4a26      	ldr	r2, [pc, #152]	@ (800898c <I2C_ITSlaveCplt+0x23c>)
 80088f2:	4293      	cmp	r3, r2
 80088f4:	d016      	beq.n	8008924 <I2C_ITSlaveCplt+0x1d4>
    I2C_ITSlaveSeqCplt(hi2c);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	0018      	movs	r0, r3
 80088fa:	f7ff fdf7 	bl	80084ec <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	4a22      	ldr	r2, [pc, #136]	@ (800898c <I2C_ITSlaveCplt+0x23c>)
 8008902:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2241      	movs	r2, #65	@ 0x41
 8008908:	2120      	movs	r1, #32
 800890a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2200      	movs	r2, #0
 8008910:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	2240      	movs	r2, #64	@ 0x40
 8008916:	2100      	movs	r1, #0
 8008918:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	0018      	movs	r0, r3
 800891e:	f7fe ffae 	bl	800787e <HAL_I2C_ListenCpltCallback>
}
 8008922:	e024      	b.n	800896e <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2241      	movs	r2, #65	@ 0x41
 8008928:	5c9b      	ldrb	r3, [r3, r2]
 800892a:	b2db      	uxtb	r3, r3
 800892c:	2b22      	cmp	r3, #34	@ 0x22
 800892e:	d10f      	bne.n	8008950 <I2C_ITSlaveCplt+0x200>
    hi2c->State = HAL_I2C_STATE_READY;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	2241      	movs	r2, #65	@ 0x41
 8008934:	2120      	movs	r1, #32
 8008936:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	2200      	movs	r2, #0
 800893c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	2240      	movs	r2, #64	@ 0x40
 8008942:	2100      	movs	r1, #0
 8008944:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	0018      	movs	r0, r3
 800894a:	f7fe ff80 	bl	800784e <HAL_I2C_SlaveRxCpltCallback>
}
 800894e:	e00e      	b.n	800896e <I2C_ITSlaveCplt+0x21e>
    hi2c->State = HAL_I2C_STATE_READY;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	2241      	movs	r2, #65	@ 0x41
 8008954:	2120      	movs	r1, #32
 8008956:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	2200      	movs	r2, #0
 800895c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	2240      	movs	r2, #64	@ 0x40
 8008962:	2100      	movs	r1, #0
 8008964:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	0018      	movs	r0, r3
 800896a:	f7fe ff68 	bl	800783e <HAL_I2C_SlaveTxCpltCallback>
}
 800896e:	46c0      	nop			@ (mov r8, r8)
 8008970:	46bd      	mov	sp, r7
 8008972:	b006      	add	sp, #24
 8008974:	bd80      	pop	{r7, pc}
 8008976:	46c0      	nop			@ (mov r8, r8)
 8008978:	00008001 	.word	0x00008001
 800897c:	00008002 	.word	0x00008002
 8008980:	fe00e800 	.word	0xfe00e800
 8008984:	ffffbfff 	.word	0xffffbfff
 8008988:	ffff7fff 	.word	0xffff7fff
 800898c:	ffff0000 	.word	0xffff0000

08008990 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b082      	sub	sp, #8
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
 8008998:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	4a26      	ldr	r2, [pc, #152]	@ (8008a38 <I2C_ITListenCplt+0xa8>)
 800899e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	2200      	movs	r2, #0
 80089a4:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	2241      	movs	r2, #65	@ 0x41
 80089aa:	2120      	movs	r1, #32
 80089ac:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	2242      	movs	r2, #66	@ 0x42
 80089b2:	2100      	movs	r1, #0
 80089b4:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	2200      	movs	r2, #0
 80089ba:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80089bc:	683b      	ldr	r3, [r7, #0]
 80089be:	2204      	movs	r2, #4
 80089c0:	4013      	ands	r3, r2
 80089c2:	d022      	beq.n	8008a0a <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089ce:	b2d2      	uxtb	r2, r2
 80089d0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089d6:	1c5a      	adds	r2, r3, #1
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d012      	beq.n	8008a0a <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80089e8:	3b01      	subs	r3, #1
 80089ea:	b29a      	uxth	r2, r3
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80089f4:	b29b      	uxth	r3, r3
 80089f6:	3b01      	subs	r3, #1
 80089f8:	b29a      	uxth	r2, r3
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a02:	2204      	movs	r2, #4
 8008a04:	431a      	orrs	r2, r3
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8008a0a:	4a0c      	ldr	r2, [pc, #48]	@ (8008a3c <I2C_ITListenCplt+0xac>)
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	0011      	movs	r1, r2
 8008a10:	0018      	movs	r0, r3
 8008a12:	f000 fb03 	bl	800901c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	2210      	movs	r2, #16
 8008a1c:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	2240      	movs	r2, #64	@ 0x40
 8008a22:	2100      	movs	r1, #0
 8008a24:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	0018      	movs	r0, r3
 8008a2a:	f7fe ff28 	bl	800787e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8008a2e:	46c0      	nop			@ (mov r8, r8)
 8008a30:	46bd      	mov	sp, r7
 8008a32:	b002      	add	sp, #8
 8008a34:	bd80      	pop	{r7, pc}
 8008a36:	46c0      	nop			@ (mov r8, r8)
 8008a38:	ffff0000 	.word	0xffff0000
 8008a3c:	00008003 	.word	0x00008003

08008a40 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b084      	sub	sp, #16
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
 8008a48:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8008a4a:	200f      	movs	r0, #15
 8008a4c:	183b      	adds	r3, r7, r0
 8008a4e:	687a      	ldr	r2, [r7, #4]
 8008a50:	2141      	movs	r1, #65	@ 0x41
 8008a52:	5c52      	ldrb	r2, [r2, r1]
 8008a54:	701a      	strb	r2, [r3, #0]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	2242      	movs	r2, #66	@ 0x42
 8008a5a:	2100      	movs	r1, #0
 8008a5c:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	4a72      	ldr	r2, [pc, #456]	@ (8008c2c <I2C_ITError+0x1ec>)
 8008a62:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2200      	movs	r2, #0
 8008a68:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008a6e:	683b      	ldr	r3, [r7, #0]
 8008a70:	431a      	orrs	r2, r3
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8008a76:	183b      	adds	r3, r7, r0
 8008a78:	781b      	ldrb	r3, [r3, #0]
 8008a7a:	2b28      	cmp	r3, #40	@ 0x28
 8008a7c:	d007      	beq.n	8008a8e <I2C_ITError+0x4e>
 8008a7e:	183b      	adds	r3, r7, r0
 8008a80:	781b      	ldrb	r3, [r3, #0]
 8008a82:	2b29      	cmp	r3, #41	@ 0x29
 8008a84:	d003      	beq.n	8008a8e <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8008a86:	183b      	adds	r3, r7, r0
 8008a88:	781b      	ldrb	r3, [r3, #0]
 8008a8a:	2b2a      	cmp	r3, #42	@ 0x2a
 8008a8c:	d10c      	bne.n	8008aa8 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	2103      	movs	r1, #3
 8008a92:	0018      	movs	r0, r3
 8008a94:	f000 fac2 	bl	800901c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	2241      	movs	r2, #65	@ 0x41
 8008a9c:	2128      	movs	r1, #40	@ 0x28
 8008a9e:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	4a63      	ldr	r2, [pc, #396]	@ (8008c30 <I2C_ITError+0x1f0>)
 8008aa4:	635a      	str	r2, [r3, #52]	@ 0x34
 8008aa6:	e032      	b.n	8008b0e <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8008aa8:	4a62      	ldr	r2, [pc, #392]	@ (8008c34 <I2C_ITError+0x1f4>)
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	0011      	movs	r1, r2
 8008aae:	0018      	movs	r0, r3
 8008ab0:	f000 fab4 	bl	800901c <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	0018      	movs	r0, r3
 8008ab8:	f000 f8ed 	bl	8008c96 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2241      	movs	r2, #65	@ 0x41
 8008ac0:	5c9b      	ldrb	r3, [r3, r2]
 8008ac2:	b2db      	uxtb	r3, r3
 8008ac4:	2b60      	cmp	r3, #96	@ 0x60
 8008ac6:	d01f      	beq.n	8008b08 <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	2241      	movs	r2, #65	@ 0x41
 8008acc:	2120      	movs	r1, #32
 8008ace:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	699b      	ldr	r3, [r3, #24]
 8008ad6:	2220      	movs	r2, #32
 8008ad8:	4013      	ands	r3, r2
 8008ada:	2b20      	cmp	r3, #32
 8008adc:	d114      	bne.n	8008b08 <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	699b      	ldr	r3, [r3, #24]
 8008ae4:	2210      	movs	r2, #16
 8008ae6:	4013      	ands	r3, r2
 8008ae8:	2b10      	cmp	r3, #16
 8008aea:	d109      	bne.n	8008b00 <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	2210      	movs	r2, #16
 8008af2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008af8:	2204      	movs	r2, #4
 8008afa:	431a      	orrs	r2, r3
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	2220      	movs	r2, #32
 8008b06:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	2200      	movs	r2, #0
 8008b0c:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b12:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d03b      	beq.n	8008b94 <I2C_ITError+0x154>
 8008b1c:	68bb      	ldr	r3, [r7, #8]
 8008b1e:	2b11      	cmp	r3, #17
 8008b20:	d002      	beq.n	8008b28 <I2C_ITError+0xe8>
 8008b22:	68bb      	ldr	r3, [r7, #8]
 8008b24:	2b21      	cmp	r3, #33	@ 0x21
 8008b26:	d135      	bne.n	8008b94 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	681a      	ldr	r2, [r3, #0]
 8008b2e:	2380      	movs	r3, #128	@ 0x80
 8008b30:	01db      	lsls	r3, r3, #7
 8008b32:	401a      	ands	r2, r3
 8008b34:	2380      	movs	r3, #128	@ 0x80
 8008b36:	01db      	lsls	r3, r3, #7
 8008b38:	429a      	cmp	r2, r3
 8008b3a:	d107      	bne.n	8008b4c <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	681a      	ldr	r2, [r3, #0]
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	493c      	ldr	r1, [pc, #240]	@ (8008c38 <I2C_ITError+0x1f8>)
 8008b48:	400a      	ands	r2, r1
 8008b4a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b50:	0018      	movs	r0, r3
 8008b52:	f7fe f95e 	bl	8006e12 <HAL_DMA_GetState>
 8008b56:	0003      	movs	r3, r0
 8008b58:	2b01      	cmp	r3, #1
 8008b5a:	d016      	beq.n	8008b8a <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b60:	4a36      	ldr	r2, [pc, #216]	@ (8008c3c <I2C_ITError+0x1fc>)
 8008b62:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2240      	movs	r2, #64	@ 0x40
 8008b68:	2100      	movs	r1, #0
 8008b6a:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b70:	0018      	movs	r0, r3
 8008b72:	f7fe f859 	bl	8006c28 <HAL_DMA_Abort_IT>
 8008b76:	1e03      	subs	r3, r0, #0
 8008b78:	d051      	beq.n	8008c1e <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b7e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b84:	0018      	movs	r0, r3
 8008b86:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008b88:	e049      	b.n	8008c1e <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	0018      	movs	r0, r3
 8008b8e:	f000 f859 	bl	8008c44 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008b92:	e044      	b.n	8008c1e <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d03b      	beq.n	8008c14 <I2C_ITError+0x1d4>
 8008b9c:	68bb      	ldr	r3, [r7, #8]
 8008b9e:	2b12      	cmp	r3, #18
 8008ba0:	d002      	beq.n	8008ba8 <I2C_ITError+0x168>
 8008ba2:	68bb      	ldr	r3, [r7, #8]
 8008ba4:	2b22      	cmp	r3, #34	@ 0x22
 8008ba6:	d135      	bne.n	8008c14 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	681a      	ldr	r2, [r3, #0]
 8008bae:	2380      	movs	r3, #128	@ 0x80
 8008bb0:	021b      	lsls	r3, r3, #8
 8008bb2:	401a      	ands	r2, r3
 8008bb4:	2380      	movs	r3, #128	@ 0x80
 8008bb6:	021b      	lsls	r3, r3, #8
 8008bb8:	429a      	cmp	r2, r3
 8008bba:	d107      	bne.n	8008bcc <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	681a      	ldr	r2, [r3, #0]
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	491e      	ldr	r1, [pc, #120]	@ (8008c40 <I2C_ITError+0x200>)
 8008bc8:	400a      	ands	r2, r1
 8008bca:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008bd0:	0018      	movs	r0, r3
 8008bd2:	f7fe f91e 	bl	8006e12 <HAL_DMA_GetState>
 8008bd6:	0003      	movs	r3, r0
 8008bd8:	2b01      	cmp	r3, #1
 8008bda:	d016      	beq.n	8008c0a <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008be0:	4a16      	ldr	r2, [pc, #88]	@ (8008c3c <I2C_ITError+0x1fc>)
 8008be2:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	2240      	movs	r2, #64	@ 0x40
 8008be8:	2100      	movs	r1, #0
 8008bea:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008bf0:	0018      	movs	r0, r3
 8008bf2:	f7fe f819 	bl	8006c28 <HAL_DMA_Abort_IT>
 8008bf6:	1e03      	subs	r3, r0, #0
 8008bf8:	d013      	beq.n	8008c22 <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008bfe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c04:	0018      	movs	r0, r3
 8008c06:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008c08:	e00b      	b.n	8008c22 <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	0018      	movs	r0, r3
 8008c0e:	f000 f819 	bl	8008c44 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008c12:	e006      	b.n	8008c22 <I2C_ITError+0x1e2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	0018      	movs	r0, r3
 8008c18:	f000 f814 	bl	8008c44 <I2C_TreatErrorCallback>
  }
}
 8008c1c:	e002      	b.n	8008c24 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008c1e:	46c0      	nop			@ (mov r8, r8)
 8008c20:	e000      	b.n	8008c24 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008c22:	46c0      	nop			@ (mov r8, r8)
}
 8008c24:	46c0      	nop			@ (mov r8, r8)
 8008c26:	46bd      	mov	sp, r7
 8008c28:	b004      	add	sp, #16
 8008c2a:	bd80      	pop	{r7, pc}
 8008c2c:	ffff0000 	.word	0xffff0000
 8008c30:	08007b25 	.word	0x08007b25
 8008c34:	00008003 	.word	0x00008003
 8008c38:	ffffbfff 	.word	0xffffbfff
 8008c3c:	08008e4f 	.word	0x08008e4f
 8008c40:	ffff7fff 	.word	0xffff7fff

08008c44 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8008c44:	b580      	push	{r7, lr}
 8008c46:	b082      	sub	sp, #8
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	2241      	movs	r2, #65	@ 0x41
 8008c50:	5c9b      	ldrb	r3, [r3, r2]
 8008c52:	b2db      	uxtb	r3, r3
 8008c54:	2b60      	cmp	r3, #96	@ 0x60
 8008c56:	d10f      	bne.n	8008c78 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	2241      	movs	r2, #65	@ 0x41
 8008c5c:	2120      	movs	r1, #32
 8008c5e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	2200      	movs	r2, #0
 8008c64:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	2240      	movs	r2, #64	@ 0x40
 8008c6a:	2100      	movs	r1, #0
 8008c6c:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	0018      	movs	r0, r3
 8008c72:	f7fe fe24 	bl	80078be <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008c76:	e00a      	b.n	8008c8e <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	2240      	movs	r2, #64	@ 0x40
 8008c82:	2100      	movs	r1, #0
 8008c84:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	0018      	movs	r0, r3
 8008c8a:	f7fe fe10 	bl	80078ae <HAL_I2C_ErrorCallback>
}
 8008c8e:	46c0      	nop			@ (mov r8, r8)
 8008c90:	46bd      	mov	sp, r7
 8008c92:	b002      	add	sp, #8
 8008c94:	bd80      	pop	{r7, pc}

08008c96 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8008c96:	b580      	push	{r7, lr}
 8008c98:	b082      	sub	sp, #8
 8008c9a:	af00      	add	r7, sp, #0
 8008c9c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	699b      	ldr	r3, [r3, #24]
 8008ca4:	2202      	movs	r2, #2
 8008ca6:	4013      	ands	r3, r2
 8008ca8:	2b02      	cmp	r3, #2
 8008caa:	d103      	bne.n	8008cb4 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	699b      	ldr	r3, [r3, #24]
 8008cba:	2201      	movs	r2, #1
 8008cbc:	4013      	ands	r3, r2
 8008cbe:	2b01      	cmp	r3, #1
 8008cc0:	d007      	beq.n	8008cd2 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	699a      	ldr	r2, [r3, #24]
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	2101      	movs	r1, #1
 8008cce:	430a      	orrs	r2, r1
 8008cd0:	619a      	str	r2, [r3, #24]
  }
}
 8008cd2:	46c0      	nop			@ (mov r8, r8)
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	b002      	add	sp, #8
 8008cd8:	bd80      	pop	{r7, pc}
	...

08008cdc <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	b084      	sub	sp, #16
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ce8:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	681a      	ldr	r2, [r3, #0]
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	4920      	ldr	r1, [pc, #128]	@ (8008d78 <I2C_DMAMasterTransmitCplt+0x9c>)
 8008cf6:	400a      	ands	r2, r1
 8008cf8:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008cfe:	b29b      	uxth	r3, r3
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d105      	bne.n	8008d10 <I2C_DMAMasterTransmitCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	2120      	movs	r1, #32
 8008d08:	0018      	movs	r0, r3
 8008d0a:	f000 f8f9 	bl	8008f00 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8008d0e:	e02e      	b.n	8008d6e <I2C_DMAMasterTransmitCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d14:	68fa      	ldr	r2, [r7, #12]
 8008d16:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8008d18:	189a      	adds	r2, r3, r2
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008d22:	b29b      	uxth	r3, r3
 8008d24:	2bff      	cmp	r3, #255	@ 0xff
 8008d26:	d903      	bls.n	8008d30 <I2C_DMAMasterTransmitCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	22ff      	movs	r2, #255	@ 0xff
 8008d2c:	851a      	strh	r2, [r3, #40]	@ 0x28
 8008d2e:	e004      	b.n	8008d3a <I2C_DMAMasterTransmitCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008d34:	b29a      	uxth	r2, r3
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d42:	0019      	movs	r1, r3
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	3328      	adds	r3, #40	@ 0x28
 8008d4a:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8008d50:	f7fd fec4 	bl	8006adc <HAL_DMA_Start_IT>
 8008d54:	1e03      	subs	r3, r0, #0
 8008d56:	d005      	beq.n	8008d64 <I2C_DMAMasterTransmitCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	2110      	movs	r1, #16
 8008d5c:	0018      	movs	r0, r3
 8008d5e:	f7ff fe6f 	bl	8008a40 <I2C_ITError>
}
 8008d62:	e004      	b.n	8008d6e <I2C_DMAMasterTransmitCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	2140      	movs	r1, #64	@ 0x40
 8008d68:	0018      	movs	r0, r3
 8008d6a:	f000 f8c9 	bl	8008f00 <I2C_Enable_IRQ>
}
 8008d6e:	46c0      	nop			@ (mov r8, r8)
 8008d70:	46bd      	mov	sp, r7
 8008d72:	b004      	add	sp, #16
 8008d74:	bd80      	pop	{r7, pc}
 8008d76:	46c0      	nop			@ (mov r8, r8)
 8008d78:	ffffbfff 	.word	0xffffbfff

08008d7c <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b084      	sub	sp, #16
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d88:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	681a      	ldr	r2, [r3, #0]
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	4920      	ldr	r1, [pc, #128]	@ (8008e18 <I2C_DMAMasterReceiveCplt+0x9c>)
 8008d96:	400a      	ands	r2, r1
 8008d98:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008d9e:	b29b      	uxth	r3, r3
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d105      	bne.n	8008db0 <I2C_DMAMasterReceiveCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	2120      	movs	r1, #32
 8008da8:	0018      	movs	r0, r3
 8008daa:	f000 f8a9 	bl	8008f00 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8008dae:	e02e      	b.n	8008e0e <I2C_DMAMasterReceiveCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008db4:	68fa      	ldr	r2, [r7, #12]
 8008db6:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8008db8:	189a      	adds	r2, r3, r2
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008dc2:	b29b      	uxth	r3, r3
 8008dc4:	2bff      	cmp	r3, #255	@ 0xff
 8008dc6:	d903      	bls.n	8008dd0 <I2C_DMAMasterReceiveCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	22ff      	movs	r2, #255	@ 0xff
 8008dcc:	851a      	strh	r2, [r3, #40]	@ 0x28
 8008dce:	e004      	b.n	8008dda <I2C_DMAMasterReceiveCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008dd4:	b29a      	uxth	r2, r3
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	3324      	adds	r3, #36	@ 0x24
 8008de4:	0019      	movs	r1, r3
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008dea:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8008df0:	f7fd fe74 	bl	8006adc <HAL_DMA_Start_IT>
 8008df4:	1e03      	subs	r3, r0, #0
 8008df6:	d005      	beq.n	8008e04 <I2C_DMAMasterReceiveCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	2110      	movs	r1, #16
 8008dfc:	0018      	movs	r0, r3
 8008dfe:	f7ff fe1f 	bl	8008a40 <I2C_ITError>
}
 8008e02:	e004      	b.n	8008e0e <I2C_DMAMasterReceiveCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	2140      	movs	r1, #64	@ 0x40
 8008e08:	0018      	movs	r0, r3
 8008e0a:	f000 f879 	bl	8008f00 <I2C_Enable_IRQ>
}
 8008e0e:	46c0      	nop			@ (mov r8, r8)
 8008e10:	46bd      	mov	sp, r7
 8008e12:	b004      	add	sp, #16
 8008e14:	bd80      	pop	{r7, pc}
 8008e16:	46c0      	nop			@ (mov r8, r8)
 8008e18:	ffff7fff 	.word	0xffff7fff

08008e1c <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	b084      	sub	sp, #16
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e28:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	685a      	ldr	r2, [r3, #4]
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	2180      	movs	r1, #128	@ 0x80
 8008e36:	0209      	lsls	r1, r1, #8
 8008e38:	430a      	orrs	r2, r1
 8008e3a:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	2110      	movs	r1, #16
 8008e40:	0018      	movs	r0, r3
 8008e42:	f7ff fdfd 	bl	8008a40 <I2C_ITError>
}
 8008e46:	46c0      	nop			@ (mov r8, r8)
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	b004      	add	sp, #16
 8008e4c:	bd80      	pop	{r7, pc}

08008e4e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8008e4e:	b580      	push	{r7, lr}
 8008e50:	b084      	sub	sp, #16
 8008e52:	af00      	add	r7, sp, #0
 8008e54:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e5a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d003      	beq.n	8008e6c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e68:	2200      	movs	r2, #0
 8008e6a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d003      	beq.n	8008e7c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e78:	2200      	movs	r2, #0
 8008e7a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	0018      	movs	r0, r3
 8008e80:	f7ff fee0 	bl	8008c44 <I2C_TreatErrorCallback>
}
 8008e84:	46c0      	nop			@ (mov r8, r8)
 8008e86:	46bd      	mov	sp, r7
 8008e88:	b004      	add	sp, #16
 8008e8a:	bd80      	pop	{r7, pc}

08008e8c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8008e8c:	b590      	push	{r4, r7, lr}
 8008e8e:	b087      	sub	sp, #28
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	60f8      	str	r0, [r7, #12]
 8008e94:	0008      	movs	r0, r1
 8008e96:	0011      	movs	r1, r2
 8008e98:	607b      	str	r3, [r7, #4]
 8008e9a:	240a      	movs	r4, #10
 8008e9c:	193b      	adds	r3, r7, r4
 8008e9e:	1c02      	adds	r2, r0, #0
 8008ea0:	801a      	strh	r2, [r3, #0]
 8008ea2:	2009      	movs	r0, #9
 8008ea4:	183b      	adds	r3, r7, r0
 8008ea6:	1c0a      	adds	r2, r1, #0
 8008ea8:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008eaa:	193b      	adds	r3, r7, r4
 8008eac:	881b      	ldrh	r3, [r3, #0]
 8008eae:	059b      	lsls	r3, r3, #22
 8008eb0:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008eb2:	183b      	adds	r3, r7, r0
 8008eb4:	781b      	ldrb	r3, [r3, #0]
 8008eb6:	0419      	lsls	r1, r3, #16
 8008eb8:	23ff      	movs	r3, #255	@ 0xff
 8008eba:	041b      	lsls	r3, r3, #16
 8008ebc:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008ebe:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008ec4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ec6:	4313      	orrs	r3, r2
 8008ec8:	005b      	lsls	r3, r3, #1
 8008eca:	085b      	lsrs	r3, r3, #1
 8008ecc:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	685b      	ldr	r3, [r3, #4]
 8008ed4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008ed6:	0d51      	lsrs	r1, r2, #21
 8008ed8:	2280      	movs	r2, #128	@ 0x80
 8008eda:	00d2      	lsls	r2, r2, #3
 8008edc:	400a      	ands	r2, r1
 8008ede:	4907      	ldr	r1, [pc, #28]	@ (8008efc <I2C_TransferConfig+0x70>)
 8008ee0:	430a      	orrs	r2, r1
 8008ee2:	43d2      	mvns	r2, r2
 8008ee4:	401a      	ands	r2, r3
 8008ee6:	0011      	movs	r1, r2
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	697a      	ldr	r2, [r7, #20]
 8008eee:	430a      	orrs	r2, r1
 8008ef0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8008ef2:	46c0      	nop			@ (mov r8, r8)
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	b007      	add	sp, #28
 8008ef8:	bd90      	pop	{r4, r7, pc}
 8008efa:	46c0      	nop			@ (mov r8, r8)
 8008efc:	03ff63ff 	.word	0x03ff63ff

08008f00 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b084      	sub	sp, #16
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
 8008f08:	000a      	movs	r2, r1
 8008f0a:	1cbb      	adds	r3, r7, #2
 8008f0c:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8008f0e:	2300      	movs	r3, #0
 8008f10:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008f16:	4b3e      	ldr	r3, [pc, #248]	@ (8009010 <I2C_Enable_IRQ+0x110>)
 8008f18:	429a      	cmp	r2, r3
 8008f1a:	d035      	beq.n	8008f88 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8008f20:	4b3c      	ldr	r3, [pc, #240]	@ (8009014 <I2C_Enable_IRQ+0x114>)
 8008f22:	429a      	cmp	r2, r3
 8008f24:	d030      	beq.n	8008f88 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8008f2a:	4b3b      	ldr	r3, [pc, #236]	@ (8009018 <I2C_Enable_IRQ+0x118>)
 8008f2c:	429a      	cmp	r2, r3
 8008f2e:	d02b      	beq.n	8008f88 <I2C_Enable_IRQ+0x88>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8008f30:	1cbb      	adds	r3, r7, #2
 8008f32:	2200      	movs	r2, #0
 8008f34:	5e9b      	ldrsh	r3, [r3, r2]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	da03      	bge.n	8008f42 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	22b8      	movs	r2, #184	@ 0xb8
 8008f3e:	4313      	orrs	r3, r2
 8008f40:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8008f42:	1cbb      	adds	r3, r7, #2
 8008f44:	881b      	ldrh	r3, [r3, #0]
 8008f46:	2201      	movs	r2, #1
 8008f48:	4013      	ands	r3, r2
 8008f4a:	d003      	beq.n	8008f54 <I2C_Enable_IRQ+0x54>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	22f2      	movs	r2, #242	@ 0xf2
 8008f50:	4313      	orrs	r3, r2
 8008f52:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8008f54:	1cbb      	adds	r3, r7, #2
 8008f56:	881b      	ldrh	r3, [r3, #0]
 8008f58:	2202      	movs	r2, #2
 8008f5a:	4013      	ands	r3, r2
 8008f5c:	d003      	beq.n	8008f66 <I2C_Enable_IRQ+0x66>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	22f4      	movs	r2, #244	@ 0xf4
 8008f62:	4313      	orrs	r3, r2
 8008f64:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8008f66:	1cbb      	adds	r3, r7, #2
 8008f68:	881b      	ldrh	r3, [r3, #0]
 8008f6a:	2b10      	cmp	r3, #16
 8008f6c:	d103      	bne.n	8008f76 <I2C_Enable_IRQ+0x76>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	2290      	movs	r2, #144	@ 0x90
 8008f72:	4313      	orrs	r3, r2
 8008f74:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8008f76:	1cbb      	adds	r3, r7, #2
 8008f78:	881b      	ldrh	r3, [r3, #0]
 8008f7a:	2b20      	cmp	r3, #32
 8008f7c:	d13c      	bne.n	8008ff8 <I2C_Enable_IRQ+0xf8>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	2220      	movs	r2, #32
 8008f82:	4313      	orrs	r3, r2
 8008f84:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8008f86:	e037      	b.n	8008ff8 <I2C_Enable_IRQ+0xf8>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8008f88:	1cbb      	adds	r3, r7, #2
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	5e9b      	ldrsh	r3, [r3, r2]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	da03      	bge.n	8008f9a <I2C_Enable_IRQ+0x9a>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	22b8      	movs	r2, #184	@ 0xb8
 8008f96:	4313      	orrs	r3, r2
 8008f98:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8008f9a:	1cbb      	adds	r3, r7, #2
 8008f9c:	881b      	ldrh	r3, [r3, #0]
 8008f9e:	2201      	movs	r2, #1
 8008fa0:	4013      	ands	r3, r2
 8008fa2:	d003      	beq.n	8008fac <I2C_Enable_IRQ+0xac>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	22f2      	movs	r2, #242	@ 0xf2
 8008fa8:	4313      	orrs	r3, r2
 8008faa:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8008fac:	1cbb      	adds	r3, r7, #2
 8008fae:	881b      	ldrh	r3, [r3, #0]
 8008fb0:	2202      	movs	r2, #2
 8008fb2:	4013      	ands	r3, r2
 8008fb4:	d003      	beq.n	8008fbe <I2C_Enable_IRQ+0xbe>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	22f4      	movs	r2, #244	@ 0xf4
 8008fba:	4313      	orrs	r3, r2
 8008fbc:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8008fbe:	1cbb      	adds	r3, r7, #2
 8008fc0:	881b      	ldrh	r3, [r3, #0]
 8008fc2:	2b10      	cmp	r3, #16
 8008fc4:	d103      	bne.n	8008fce <I2C_Enable_IRQ+0xce>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	2290      	movs	r2, #144	@ 0x90
 8008fca:	4313      	orrs	r3, r2
 8008fcc:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8008fce:	1cbb      	adds	r3, r7, #2
 8008fd0:	881b      	ldrh	r3, [r3, #0]
 8008fd2:	2b20      	cmp	r3, #32
 8008fd4:	d103      	bne.n	8008fde <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	2260      	movs	r2, #96	@ 0x60
 8008fda:	4313      	orrs	r3, r2
 8008fdc:	60fb      	str	r3, [r7, #12]
    }

    if ((hi2c->XferISR != I2C_Mem_ISR_DMA) && (InterruptRequest == I2C_XFER_RELOAD_IT))
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008fe2:	4b0d      	ldr	r3, [pc, #52]	@ (8009018 <I2C_Enable_IRQ+0x118>)
 8008fe4:	429a      	cmp	r2, r3
 8008fe6:	d007      	beq.n	8008ff8 <I2C_Enable_IRQ+0xf8>
 8008fe8:	1cbb      	adds	r3, r7, #2
 8008fea:	881b      	ldrh	r3, [r3, #0]
 8008fec:	2b40      	cmp	r3, #64	@ 0x40
 8008fee:	d103      	bne.n	8008ff8 <I2C_Enable_IRQ+0xf8>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	2240      	movs	r2, #64	@ 0x40
 8008ff4:	4313      	orrs	r3, r2
 8008ff6:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	6819      	ldr	r1, [r3, #0]
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	68fa      	ldr	r2, [r7, #12]
 8009004:	430a      	orrs	r2, r1
 8009006:	601a      	str	r2, [r3, #0]
}
 8009008:	46c0      	nop			@ (mov r8, r8)
 800900a:	46bd      	mov	sp, r7
 800900c:	b004      	add	sp, #16
 800900e:	bd80      	pop	{r7, pc}
 8009010:	08007d25 	.word	0x08007d25
 8009014:	08008155 	.word	0x08008155
 8009018:	08007f1d 	.word	0x08007f1d

0800901c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800901c:	b580      	push	{r7, lr}
 800901e:	b084      	sub	sp, #16
 8009020:	af00      	add	r7, sp, #0
 8009022:	6078      	str	r0, [r7, #4]
 8009024:	000a      	movs	r2, r1
 8009026:	1cbb      	adds	r3, r7, #2
 8009028:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 800902a:	2300      	movs	r3, #0
 800902c:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800902e:	1cbb      	adds	r3, r7, #2
 8009030:	881b      	ldrh	r3, [r3, #0]
 8009032:	2201      	movs	r2, #1
 8009034:	4013      	ands	r3, r2
 8009036:	d010      	beq.n	800905a <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	2242      	movs	r2, #66	@ 0x42
 800903c:	4313      	orrs	r3, r2
 800903e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	2241      	movs	r2, #65	@ 0x41
 8009044:	5c9b      	ldrb	r3, [r3, r2]
 8009046:	b2db      	uxtb	r3, r3
 8009048:	001a      	movs	r2, r3
 800904a:	2328      	movs	r3, #40	@ 0x28
 800904c:	4013      	ands	r3, r2
 800904e:	2b28      	cmp	r3, #40	@ 0x28
 8009050:	d003      	beq.n	800905a <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	22b0      	movs	r2, #176	@ 0xb0
 8009056:	4313      	orrs	r3, r2
 8009058:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800905a:	1cbb      	adds	r3, r7, #2
 800905c:	881b      	ldrh	r3, [r3, #0]
 800905e:	2202      	movs	r2, #2
 8009060:	4013      	ands	r3, r2
 8009062:	d010      	beq.n	8009086 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	2244      	movs	r2, #68	@ 0x44
 8009068:	4313      	orrs	r3, r2
 800906a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	2241      	movs	r2, #65	@ 0x41
 8009070:	5c9b      	ldrb	r3, [r3, r2]
 8009072:	b2db      	uxtb	r3, r3
 8009074:	001a      	movs	r2, r3
 8009076:	2328      	movs	r3, #40	@ 0x28
 8009078:	4013      	ands	r3, r2
 800907a:	2b28      	cmp	r3, #40	@ 0x28
 800907c:	d003      	beq.n	8009086 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	22b0      	movs	r2, #176	@ 0xb0
 8009082:	4313      	orrs	r3, r2
 8009084:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8009086:	1cbb      	adds	r3, r7, #2
 8009088:	2200      	movs	r2, #0
 800908a:	5e9b      	ldrsh	r3, [r3, r2]
 800908c:	2b00      	cmp	r3, #0
 800908e:	da03      	bge.n	8009098 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	22b8      	movs	r2, #184	@ 0xb8
 8009094:	4313      	orrs	r3, r2
 8009096:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8009098:	1cbb      	adds	r3, r7, #2
 800909a:	881b      	ldrh	r3, [r3, #0]
 800909c:	2b10      	cmp	r3, #16
 800909e:	d103      	bne.n	80090a8 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	2290      	movs	r2, #144	@ 0x90
 80090a4:	4313      	orrs	r3, r2
 80090a6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80090a8:	1cbb      	adds	r3, r7, #2
 80090aa:	881b      	ldrh	r3, [r3, #0]
 80090ac:	2b20      	cmp	r3, #32
 80090ae:	d103      	bne.n	80090b8 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	2220      	movs	r2, #32
 80090b4:	4313      	orrs	r3, r2
 80090b6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80090b8:	1cbb      	adds	r3, r7, #2
 80090ba:	881b      	ldrh	r3, [r3, #0]
 80090bc:	2b40      	cmp	r3, #64	@ 0x40
 80090be:	d103      	bne.n	80090c8 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	2240      	movs	r2, #64	@ 0x40
 80090c4:	4313      	orrs	r3, r2
 80090c6:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	681a      	ldr	r2, [r3, #0]
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	43d9      	mvns	r1, r3
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	400a      	ands	r2, r1
 80090d8:	601a      	str	r2, [r3, #0]
}
 80090da:	46c0      	nop			@ (mov r8, r8)
 80090dc:	46bd      	mov	sp, r7
 80090de:	b004      	add	sp, #16
 80090e0:	bd80      	pop	{r7, pc}
	...

080090e4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80090e4:	b580      	push	{r7, lr}
 80090e6:	b082      	sub	sp, #8
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]
 80090ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	2241      	movs	r2, #65	@ 0x41
 80090f2:	5c9b      	ldrb	r3, [r3, r2]
 80090f4:	b2db      	uxtb	r3, r3
 80090f6:	2b20      	cmp	r3, #32
 80090f8:	d138      	bne.n	800916c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	2240      	movs	r2, #64	@ 0x40
 80090fe:	5c9b      	ldrb	r3, [r3, r2]
 8009100:	2b01      	cmp	r3, #1
 8009102:	d101      	bne.n	8009108 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009104:	2302      	movs	r3, #2
 8009106:	e032      	b.n	800916e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	2240      	movs	r2, #64	@ 0x40
 800910c:	2101      	movs	r1, #1
 800910e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	2241      	movs	r2, #65	@ 0x41
 8009114:	2124      	movs	r1, #36	@ 0x24
 8009116:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	681a      	ldr	r2, [r3, #0]
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	2101      	movs	r1, #1
 8009124:	438a      	bics	r2, r1
 8009126:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	681a      	ldr	r2, [r3, #0]
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	4911      	ldr	r1, [pc, #68]	@ (8009178 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8009134:	400a      	ands	r2, r1
 8009136:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	6819      	ldr	r1, [r3, #0]
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	683a      	ldr	r2, [r7, #0]
 8009144:	430a      	orrs	r2, r1
 8009146:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	681a      	ldr	r2, [r3, #0]
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	2101      	movs	r1, #1
 8009154:	430a      	orrs	r2, r1
 8009156:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	2241      	movs	r2, #65	@ 0x41
 800915c:	2120      	movs	r1, #32
 800915e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	2240      	movs	r2, #64	@ 0x40
 8009164:	2100      	movs	r1, #0
 8009166:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8009168:	2300      	movs	r3, #0
 800916a:	e000      	b.n	800916e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800916c:	2302      	movs	r3, #2
  }
}
 800916e:	0018      	movs	r0, r3
 8009170:	46bd      	mov	sp, r7
 8009172:	b002      	add	sp, #8
 8009174:	bd80      	pop	{r7, pc}
 8009176:	46c0      	nop			@ (mov r8, r8)
 8009178:	ffffefff 	.word	0xffffefff

0800917c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800917c:	b580      	push	{r7, lr}
 800917e:	b084      	sub	sp, #16
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
 8009184:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	2241      	movs	r2, #65	@ 0x41
 800918a:	5c9b      	ldrb	r3, [r3, r2]
 800918c:	b2db      	uxtb	r3, r3
 800918e:	2b20      	cmp	r3, #32
 8009190:	d139      	bne.n	8009206 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	2240      	movs	r2, #64	@ 0x40
 8009196:	5c9b      	ldrb	r3, [r3, r2]
 8009198:	2b01      	cmp	r3, #1
 800919a:	d101      	bne.n	80091a0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800919c:	2302      	movs	r3, #2
 800919e:	e033      	b.n	8009208 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	2240      	movs	r2, #64	@ 0x40
 80091a4:	2101      	movs	r1, #1
 80091a6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	2241      	movs	r2, #65	@ 0x41
 80091ac:	2124      	movs	r1, #36	@ 0x24
 80091ae:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	681a      	ldr	r2, [r3, #0]
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	2101      	movs	r1, #1
 80091bc:	438a      	bics	r2, r1
 80091be:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	4a11      	ldr	r2, [pc, #68]	@ (8009210 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80091cc:	4013      	ands	r3, r2
 80091ce:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80091d0:	683b      	ldr	r3, [r7, #0]
 80091d2:	021b      	lsls	r3, r3, #8
 80091d4:	68fa      	ldr	r2, [r7, #12]
 80091d6:	4313      	orrs	r3, r2
 80091d8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	68fa      	ldr	r2, [r7, #12]
 80091e0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	681a      	ldr	r2, [r3, #0]
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	2101      	movs	r1, #1
 80091ee:	430a      	orrs	r2, r1
 80091f0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	2241      	movs	r2, #65	@ 0x41
 80091f6:	2120      	movs	r1, #32
 80091f8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	2240      	movs	r2, #64	@ 0x40
 80091fe:	2100      	movs	r1, #0
 8009200:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8009202:	2300      	movs	r3, #0
 8009204:	e000      	b.n	8009208 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009206:	2302      	movs	r3, #2
  }
}
 8009208:	0018      	movs	r0, r3
 800920a:	46bd      	mov	sp, r7
 800920c:	b004      	add	sp, #16
 800920e:	bd80      	pop	{r7, pc}
 8009210:	fffff0ff 	.word	0xfffff0ff

08009214 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8009214:	b580      	push	{r7, lr}
 8009216:	b088      	sub	sp, #32
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d101      	bne.n	8009226 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8009222:	2301      	movs	r3, #1
 8009224:	e0e1      	b.n	80093ea <HAL_I2S_Init+0x1d6>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	2235      	movs	r2, #53	@ 0x35
 800922a:	5c9b      	ldrb	r3, [r3, r2]
 800922c:	b2db      	uxtb	r3, r3
 800922e:	2b00      	cmp	r3, #0
 8009230:	d107      	bne.n	8009242 <HAL_I2S_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	2234      	movs	r2, #52	@ 0x34
 8009236:	2100      	movs	r1, #0
 8009238:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	0018      	movs	r0, r3
 800923e:	f7fa fe3b 	bl	8003eb8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	2235      	movs	r2, #53	@ 0x35
 8009246:	2102      	movs	r1, #2
 8009248:	5499      	strb	r1, [r3, r2]

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	69da      	ldr	r2, [r3, #28]
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	4967      	ldr	r1, [pc, #412]	@ (80093f4 <HAL_I2S_Init+0x1e0>)
 8009256:	400a      	ands	r2, r1
 8009258:	61da      	str	r2, [r3, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	2202      	movs	r2, #2
 8009260:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	695b      	ldr	r3, [r3, #20]
 8009266:	2b02      	cmp	r3, #2
 8009268:	d073      	beq.n	8009352 <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	68db      	ldr	r3, [r3, #12]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d102      	bne.n	8009278 <HAL_I2S_Init+0x64>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8009272:	2310      	movs	r3, #16
 8009274:	617b      	str	r3, [r7, #20]
 8009276:	e001      	b.n	800927c <HAL_I2S_Init+0x68>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8009278:	2320      	movs	r3, #32
 800927a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	689b      	ldr	r3, [r3, #8]
 8009280:	2b20      	cmp	r3, #32
 8009282:	d802      	bhi.n	800928a <HAL_I2S_Init+0x76>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8009284:	697b      	ldr	r3, [r7, #20]
 8009286:	005b      	lsls	r3, r3, #1
 8009288:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCC_GetSysClockFreq();
 800928a:	f001 f80f 	bl	800a2ac <HAL_RCC_GetSysClockFreq>
 800928e:	0003      	movs	r3, r0
 8009290:	60fb      	str	r3, [r7, #12]

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	691a      	ldr	r2, [r3, #16]
 8009296:	2380      	movs	r3, #128	@ 0x80
 8009298:	009b      	lsls	r3, r3, #2
 800929a:	429a      	cmp	r2, r3
 800929c:	d131      	bne.n	8009302 <HAL_I2S_Init+0xee>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	68db      	ldr	r3, [r3, #12]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d016      	beq.n	80092d4 <HAL_I2S_Init+0xc0>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80092a6:	697b      	ldr	r3, [r7, #20]
 80092a8:	009b      	lsls	r3, r3, #2
 80092aa:	0019      	movs	r1, r3
 80092ac:	68f8      	ldr	r0, [r7, #12]
 80092ae:	f7f6 ff47 	bl	8000140 <__udivsi3>
 80092b2:	0003      	movs	r3, r0
 80092b4:	001a      	movs	r2, r3
 80092b6:	0013      	movs	r3, r2
 80092b8:	009b      	lsls	r3, r3, #2
 80092ba:	189b      	adds	r3, r3, r2
 80092bc:	005b      	lsls	r3, r3, #1
 80092be:	001a      	movs	r2, r3
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	695b      	ldr	r3, [r3, #20]
 80092c4:	0019      	movs	r1, r3
 80092c6:	0010      	movs	r0, r2
 80092c8:	f7f6 ff3a 	bl	8000140 <__udivsi3>
 80092cc:	0003      	movs	r3, r0
 80092ce:	3305      	adds	r3, #5
 80092d0:	613b      	str	r3, [r7, #16]
 80092d2:	e02a      	b.n	800932a <HAL_I2S_Init+0x116>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80092d4:	697b      	ldr	r3, [r7, #20]
 80092d6:	00db      	lsls	r3, r3, #3
 80092d8:	0019      	movs	r1, r3
 80092da:	68f8      	ldr	r0, [r7, #12]
 80092dc:	f7f6 ff30 	bl	8000140 <__udivsi3>
 80092e0:	0003      	movs	r3, r0
 80092e2:	001a      	movs	r2, r3
 80092e4:	0013      	movs	r3, r2
 80092e6:	009b      	lsls	r3, r3, #2
 80092e8:	189b      	adds	r3, r3, r2
 80092ea:	005b      	lsls	r3, r3, #1
 80092ec:	001a      	movs	r2, r3
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	695b      	ldr	r3, [r3, #20]
 80092f2:	0019      	movs	r1, r3
 80092f4:	0010      	movs	r0, r2
 80092f6:	f7f6 ff23 	bl	8000140 <__udivsi3>
 80092fa:	0003      	movs	r3, r0
 80092fc:	3305      	adds	r3, #5
 80092fe:	613b      	str	r3, [r7, #16]
 8009300:	e013      	b.n	800932a <HAL_I2S_Init+0x116>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8009302:	6979      	ldr	r1, [r7, #20]
 8009304:	68f8      	ldr	r0, [r7, #12]
 8009306:	f7f6 ff1b 	bl	8000140 <__udivsi3>
 800930a:	0003      	movs	r3, r0
 800930c:	001a      	movs	r2, r3
 800930e:	0013      	movs	r3, r2
 8009310:	009b      	lsls	r3, r3, #2
 8009312:	189b      	adds	r3, r3, r2
 8009314:	005b      	lsls	r3, r3, #1
 8009316:	001a      	movs	r2, r3
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	695b      	ldr	r3, [r3, #20]
 800931c:	0019      	movs	r1, r3
 800931e:	0010      	movs	r0, r2
 8009320:	f7f6 ff0e 	bl	8000140 <__udivsi3>
 8009324:	0003      	movs	r3, r0
 8009326:	3305      	adds	r3, #5
 8009328:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800932a:	693b      	ldr	r3, [r7, #16]
 800932c:	210a      	movs	r1, #10
 800932e:	0018      	movs	r0, r3
 8009330:	f7f6 ff06 	bl	8000140 <__udivsi3>
 8009334:	0003      	movs	r3, r0
 8009336:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8009338:	693b      	ldr	r3, [r7, #16]
 800933a:	2201      	movs	r2, #1
 800933c:	4013      	ands	r3, r2
 800933e:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8009340:	693a      	ldr	r2, [r7, #16]
 8009342:	69bb      	ldr	r3, [r7, #24]
 8009344:	1ad3      	subs	r3, r2, r3
 8009346:	085b      	lsrs	r3, r3, #1
 8009348:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800934a:	69bb      	ldr	r3, [r7, #24]
 800934c:	021b      	lsls	r3, r3, #8
 800934e:	61bb      	str	r3, [r7, #24]
 8009350:	e003      	b.n	800935a <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8009352:	2302      	movs	r3, #2
 8009354:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8009356:	2300      	movs	r3, #0
 8009358:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800935a:	69fb      	ldr	r3, [r7, #28]
 800935c:	2b01      	cmp	r3, #1
 800935e:	d902      	bls.n	8009366 <HAL_I2S_Init+0x152>
 8009360:	69fb      	ldr	r3, [r7, #28]
 8009362:	2bff      	cmp	r3, #255	@ 0xff
 8009364:	d907      	bls.n	8009376 <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800936a:	2210      	movs	r2, #16
 800936c:	431a      	orrs	r2, r3
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	639a      	str	r2, [r3, #56]	@ 0x38
    return  HAL_ERROR;
 8009372:	2301      	movs	r3, #1
 8009374:	e039      	b.n	80093ea <HAL_I2S_Init+0x1d6>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	691a      	ldr	r2, [r3, #16]
 800937a:	69bb      	ldr	r3, [r7, #24]
 800937c:	431a      	orrs	r2, r3
 800937e:	0011      	movs	r1, r2
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	69fa      	ldr	r2, [r7, #28]
 8009386:	430a      	orrs	r2, r1
 8009388:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	69db      	ldr	r3, [r3, #28]
 8009390:	4a18      	ldr	r2, [pc, #96]	@ (80093f4 <HAL_I2S_Init+0x1e0>)
 8009392:	401a      	ands	r2, r3
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	6859      	ldr	r1, [r3, #4]
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	689b      	ldr	r3, [r3, #8]
 800939c:	4319      	orrs	r1, r3
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	68db      	ldr	r3, [r3, #12]
 80093a2:	4319      	orrs	r1, r3
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	699b      	ldr	r3, [r3, #24]
 80093a8:	430b      	orrs	r3, r1
 80093aa:	431a      	orrs	r2, r3
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	2180      	movs	r1, #128	@ 0x80
 80093b2:	0109      	lsls	r1, r1, #4
 80093b4:	430a      	orrs	r2, r1
 80093b6:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	689b      	ldr	r3, [r3, #8]
 80093bc:	2b30      	cmp	r3, #48	@ 0x30
 80093be:	d003      	beq.n	80093c8 <HAL_I2S_Init+0x1b4>
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	689b      	ldr	r3, [r3, #8]
 80093c4:	2bb0      	cmp	r3, #176	@ 0xb0
 80093c6:	d108      	bne.n	80093da <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	69da      	ldr	r2, [r3, #28]
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	2180      	movs	r1, #128	@ 0x80
 80093d4:	0149      	lsls	r1, r1, #5
 80093d6:	430a      	orrs	r2, r1
 80093d8:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	2200      	movs	r2, #0
 80093de:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	2235      	movs	r2, #53	@ 0x35
 80093e4:	2101      	movs	r1, #1
 80093e6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80093e8:	2300      	movs	r3, #0
}
 80093ea:	0018      	movs	r0, r3
 80093ec:	46bd      	mov	sp, r7
 80093ee:	b008      	add	sp, #32
 80093f0:	bd80      	pop	{r7, pc}
 80093f2:	46c0      	nop			@ (mov r8, r8)
 80093f4:	fffff040 	.word	0xfffff040

080093f8 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b086      	sub	sp, #24
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	60f8      	str	r0, [r7, #12]
 8009400:	60b9      	str	r1, [r7, #8]
 8009402:	1dbb      	adds	r3, r7, #6
 8009404:	801a      	strh	r2, [r3, #0]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8009406:	68bb      	ldr	r3, [r7, #8]
 8009408:	2b00      	cmp	r3, #0
 800940a:	d003      	beq.n	8009414 <HAL_I2S_Receive_DMA+0x1c>
 800940c:	1dbb      	adds	r3, r7, #6
 800940e:	881b      	ldrh	r3, [r3, #0]
 8009410:	2b00      	cmp	r3, #0
 8009412:	d101      	bne.n	8009418 <HAL_I2S_Receive_DMA+0x20>
  {
    return  HAL_ERROR;
 8009414:	2301      	movs	r3, #1
 8009416:	e0a6      	b.n	8009566 <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	2234      	movs	r2, #52	@ 0x34
 800941c:	5c9b      	ldrb	r3, [r3, r2]
 800941e:	b2db      	uxtb	r3, r3
 8009420:	2b01      	cmp	r3, #1
 8009422:	d101      	bne.n	8009428 <HAL_I2S_Receive_DMA+0x30>
 8009424:	2302      	movs	r3, #2
 8009426:	e09e      	b.n	8009566 <HAL_I2S_Receive_DMA+0x16e>
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	2234      	movs	r2, #52	@ 0x34
 800942c:	2101      	movs	r1, #1
 800942e:	5499      	strb	r1, [r3, r2]

  if (hi2s->State != HAL_I2S_STATE_READY)
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	2235      	movs	r2, #53	@ 0x35
 8009434:	5c9b      	ldrb	r3, [r3, r2]
 8009436:	b2db      	uxtb	r3, r3
 8009438:	2b01      	cmp	r3, #1
 800943a:	d005      	beq.n	8009448 <HAL_I2S_Receive_DMA+0x50>
  {
    __HAL_UNLOCK(hi2s);
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	2234      	movs	r2, #52	@ 0x34
 8009440:	2100      	movs	r1, #0
 8009442:	5499      	strb	r1, [r3, r2]
    return HAL_BUSY;
 8009444:	2302      	movs	r3, #2
 8009446:	e08e      	b.n	8009566 <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	2235      	movs	r2, #53	@ 0x35
 800944c:	2104      	movs	r1, #4
 800944e:	5499      	strb	r1, [r3, r2]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	2200      	movs	r2, #0
 8009454:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->pRxBuffPtr = pData;
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	68ba      	ldr	r2, [r7, #8]
 800945a:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	69db      	ldr	r3, [r3, #28]
 8009462:	2207      	movs	r2, #7
 8009464:	4013      	ands	r3, r2
 8009466:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8009468:	697b      	ldr	r3, [r7, #20]
 800946a:	2b03      	cmp	r3, #3
 800946c:	d002      	beq.n	8009474 <HAL_I2S_Receive_DMA+0x7c>
 800946e:	697b      	ldr	r3, [r7, #20]
 8009470:	2b05      	cmp	r3, #5
 8009472:	d10c      	bne.n	800948e <HAL_I2S_Receive_DMA+0x96>
  {
    hi2s->RxXferSize = (Size << 1U);
 8009474:	1dbb      	adds	r3, r7, #6
 8009476:	881b      	ldrh	r3, [r3, #0]
 8009478:	18db      	adds	r3, r3, r3
 800947a:	b29a      	uxth	r2, r3
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = (Size << 1U);
 8009480:	1dbb      	adds	r3, r7, #6
 8009482:	881b      	ldrh	r3, [r3, #0]
 8009484:	18db      	adds	r3, r3, r3
 8009486:	b29a      	uxth	r2, r3
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800948c:	e007      	b.n	800949e <HAL_I2S_Receive_DMA+0xa6>
  }
  else
  {
    hi2s->RxXferSize = Size;
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	1dba      	adds	r2, r7, #6
 8009492:	8812      	ldrh	r2, [r2, #0]
 8009494:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = Size;
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	1dba      	adds	r2, r7, #6
 800949a:	8812      	ldrh	r2, [r2, #0]
 800949c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094a2:	4a33      	ldr	r2, [pc, #204]	@ (8009570 <HAL_I2S_Receive_DMA+0x178>)
 80094a4:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094aa:	4a32      	ldr	r2, [pc, #200]	@ (8009574 <HAL_I2S_Receive_DMA+0x17c>)
 80094ac:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094b2:	4a31      	ldr	r2, [pc, #196]	@ (8009578 <HAL_I2S_Receive_DMA+0x180>)
 80094b4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	69da      	ldr	r2, [r3, #28]
 80094bc:	23c0      	movs	r3, #192	@ 0xc0
 80094be:	009b      	lsls	r3, r3, #2
 80094c0:	401a      	ands	r2, r3
 80094c2:	23c0      	movs	r3, #192	@ 0xc0
 80094c4:	009b      	lsls	r3, r3, #2
 80094c6:	429a      	cmp	r2, r3
 80094c8:	d10a      	bne.n	80094e0 <HAL_I2S_Receive_DMA+0xe8>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80094ca:	2300      	movs	r3, #0
 80094cc:	613b      	str	r3, [r7, #16]
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	68db      	ldr	r3, [r3, #12]
 80094d4:	613b      	str	r3, [r7, #16]
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	689b      	ldr	r3, [r3, #8]
 80094dc:	613b      	str	r3, [r7, #16]
 80094de:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	330c      	adds	r3, #12
 80094ea:	0019      	movs	r1, r3
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094f0:	001a      	movs	r2, r3
                                 hi2s->RxXferSize))
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80094f6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 80094f8:	f7fd faf0 	bl	8006adc <HAL_DMA_Start_IT>
 80094fc:	1e03      	subs	r3, r0, #0
 80094fe:	d00f      	beq.n	8009520 <HAL_I2S_Receive_DMA+0x128>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009504:	2208      	movs	r2, #8
 8009506:	431a      	orrs	r2, r3
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	639a      	str	r2, [r3, #56]	@ 0x38
    hi2s->State = HAL_I2S_STATE_READY;
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	2235      	movs	r2, #53	@ 0x35
 8009510:	2101      	movs	r1, #1
 8009512:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hi2s);
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	2234      	movs	r2, #52	@ 0x34
 8009518:	2100      	movs	r1, #0
 800951a:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800951c:	2301      	movs	r3, #1
 800951e:	e022      	b.n	8009566 <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	69da      	ldr	r2, [r3, #28]
 8009526:	2380      	movs	r3, #128	@ 0x80
 8009528:	00db      	lsls	r3, r3, #3
 800952a:	4013      	ands	r3, r2
 800952c:	d108      	bne.n	8009540 <HAL_I2S_Receive_DMA+0x148>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	69da      	ldr	r2, [r3, #28]
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	2180      	movs	r1, #128	@ 0x80
 800953a:	00c9      	lsls	r1, r1, #3
 800953c:	430a      	orrs	r2, r1
 800953e:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	685b      	ldr	r3, [r3, #4]
 8009546:	2201      	movs	r2, #1
 8009548:	4013      	ands	r3, r2
 800954a:	d107      	bne.n	800955c <HAL_I2S_Receive_DMA+0x164>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	685a      	ldr	r2, [r3, #4]
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	2101      	movs	r1, #1
 8009558:	430a      	orrs	r2, r1
 800955a:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	2234      	movs	r2, #52	@ 0x34
 8009560:	2100      	movs	r1, #0
 8009562:	5499      	strb	r1, [r3, r2]
  return HAL_OK;
 8009564:	2300      	movs	r3, #0
}
 8009566:	0018      	movs	r0, r3
 8009568:	46bd      	mov	sp, r7
 800956a:	b006      	add	sp, #24
 800956c:	bd80      	pop	{r7, pc}
 800956e:	46c0      	nop			@ (mov r8, r8)
 8009570:	08009779 	.word	0x08009779
 8009574:	08009735 	.word	0x08009735
 8009578:	08009797 	.word	0x08009797

0800957c <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 800957c:	b580      	push	{r7, lr}
 800957e:	b086      	sub	sp, #24
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009584:	2317      	movs	r3, #23
 8009586:	18fb      	adds	r3, r7, r3
 8009588:	2200      	movs	r2, #0
 800958a:	701a      	strb	r2, [r3, #0]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	685a      	ldr	r2, [r3, #4]
 8009590:	2380      	movs	r3, #128	@ 0x80
 8009592:	009b      	lsls	r3, r3, #2
 8009594:	429a      	cmp	r2, r3
 8009596:	d003      	beq.n	80095a0 <HAL_I2S_DMAStop+0x24>
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	685b      	ldr	r3, [r3, #4]
 800959c:	2b00      	cmp	r3, #0
 800959e:	d158      	bne.n	8009652 <HAL_I2S_DMAStop+0xd6>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d010      	beq.n	80095ca <HAL_I2S_DMAStop+0x4e>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095ac:	0018      	movs	r0, r3
 80095ae:	f7fd fafb 	bl	8006ba8 <HAL_DMA_Abort>
 80095b2:	1e03      	subs	r3, r0, #0
 80095b4:	d009      	beq.n	80095ca <HAL_I2S_DMAStop+0x4e>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095ba:	2208      	movs	r2, #8
 80095bc:	431a      	orrs	r2, r3
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 80095c2:	2317      	movs	r3, #23
 80095c4:	18fb      	adds	r3, r7, r3
 80095c6:	2201      	movs	r2, #1
 80095c8:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 80095ca:	6878      	ldr	r0, [r7, #4]
 80095cc:	2364      	movs	r3, #100	@ 0x64
 80095ce:	2201      	movs	r2, #1
 80095d0:	2102      	movs	r1, #2
 80095d2:	f000 f907 	bl	80097e4 <I2S_WaitFlagStateUntilTimeout>
 80095d6:	1e03      	subs	r3, r0, #0
 80095d8:	d00d      	beq.n	80095f6 <HAL_I2S_DMAStop+0x7a>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095de:	2201      	movs	r2, #1
 80095e0:	431a      	orrs	r2, r3
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	2235      	movs	r2, #53	@ 0x35
 80095ea:	2101      	movs	r1, #1
 80095ec:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 80095ee:	2317      	movs	r3, #23
 80095f0:	18fb      	adds	r3, r7, r3
 80095f2:	2201      	movs	r2, #1
 80095f4:	701a      	strb	r2, [r3, #0]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 80095f6:	6878      	ldr	r0, [r7, #4]
 80095f8:	2364      	movs	r3, #100	@ 0x64
 80095fa:	2200      	movs	r2, #0
 80095fc:	2180      	movs	r1, #128	@ 0x80
 80095fe:	f000 f8f1 	bl	80097e4 <I2S_WaitFlagStateUntilTimeout>
 8009602:	1e03      	subs	r3, r0, #0
 8009604:	d00d      	beq.n	8009622 <HAL_I2S_DMAStop+0xa6>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800960a:	2201      	movs	r2, #1
 800960c:	431a      	orrs	r2, r3
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	2235      	movs	r2, #53	@ 0x35
 8009616:	2101      	movs	r1, #1
 8009618:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 800961a:	2317      	movs	r3, #23
 800961c:	18fb      	adds	r3, r7, r3
 800961e:	2201      	movs	r2, #1
 8009620:	701a      	strb	r2, [r3, #0]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	69da      	ldr	r2, [r3, #28]
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	4938      	ldr	r1, [pc, #224]	@ (8009710 <HAL_I2S_DMAStop+0x194>)
 800962e:	400a      	ands	r2, r1
 8009630:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8009632:	2300      	movs	r3, #0
 8009634:	613b      	str	r3, [r7, #16]
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	689b      	ldr	r3, [r3, #8]
 800963c:	613b      	str	r3, [r7, #16]
 800963e:	693b      	ldr	r3, [r7, #16]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	685a      	ldr	r2, [r3, #4]
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	2102      	movs	r1, #2
 800964c:	438a      	bics	r2, r1
 800964e:	605a      	str	r2, [r3, #4]
 8009650:	e053      	b.n	80096fa <HAL_I2S_DMAStop+0x17e>

  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	685a      	ldr	r2, [r3, #4]
 8009656:	23c0      	movs	r3, #192	@ 0xc0
 8009658:	009b      	lsls	r3, r3, #2
 800965a:	429a      	cmp	r2, r3
 800965c:	d005      	beq.n	800966a <HAL_I2S_DMAStop+0xee>
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	685a      	ldr	r2, [r3, #4]
 8009662:	2380      	movs	r3, #128	@ 0x80
 8009664:	005b      	lsls	r3, r3, #1
 8009666:	429a      	cmp	r2, r3
 8009668:	d147      	bne.n	80096fa <HAL_I2S_DMAStop+0x17e>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800966e:	2b00      	cmp	r3, #0
 8009670:	d010      	beq.n	8009694 <HAL_I2S_DMAStop+0x118>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009676:	0018      	movs	r0, r3
 8009678:	f7fd fa96 	bl	8006ba8 <HAL_DMA_Abort>
 800967c:	1e03      	subs	r3, r0, #0
 800967e:	d009      	beq.n	8009694 <HAL_I2S_DMAStop+0x118>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009684:	2208      	movs	r2, #8
 8009686:	431a      	orrs	r2, r3
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 800968c:	2317      	movs	r3, #23
 800968e:	18fb      	adds	r3, r7, r3
 8009690:	2201      	movs	r2, #1
 8009692:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	69da      	ldr	r2, [r3, #28]
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	491c      	ldr	r1, [pc, #112]	@ (8009710 <HAL_I2S_DMAStop+0x194>)
 80096a0:	400a      	ands	r2, r1
 80096a2:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80096a4:	2300      	movs	r3, #0
 80096a6:	60fb      	str	r3, [r7, #12]
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	68db      	ldr	r3, [r3, #12]
 80096ae:	60fb      	str	r3, [r7, #12]
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	689b      	ldr	r3, [r3, #8]
 80096b6:	60fb      	str	r3, [r7, #12]
 80096b8:	68fb      	ldr	r3, [r7, #12]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	685a      	ldr	r2, [r3, #4]
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	2101      	movs	r1, #1
 80096c6:	438a      	bics	r2, r1
 80096c8:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	685a      	ldr	r2, [r3, #4]
 80096ce:	2380      	movs	r3, #128	@ 0x80
 80096d0:	005b      	lsls	r3, r3, #1
 80096d2:	429a      	cmp	r2, r3
 80096d4:	d10e      	bne.n	80096f4 <HAL_I2S_DMAStop+0x178>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096da:	2240      	movs	r2, #64	@ 0x40
 80096dc:	431a      	orrs	r2, r3
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	2235      	movs	r2, #53	@ 0x35
 80096e6:	2101      	movs	r1, #1
 80096e8:	5499      	strb	r1, [r3, r2]
      errorcode = HAL_ERROR;
 80096ea:	2317      	movs	r3, #23
 80096ec:	18fb      	adds	r3, r7, r3
 80096ee:	2201      	movs	r2, #1
 80096f0:	701a      	strb	r2, [r3, #0]
 80096f2:	e002      	b.n	80096fa <HAL_I2S_DMAStop+0x17e>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	2235      	movs	r2, #53	@ 0x35
 80096fe:	2101      	movs	r1, #1
 8009700:	5499      	strb	r1, [r3, r2]

  return errorcode;
 8009702:	2317      	movs	r3, #23
 8009704:	18fb      	adds	r3, r7, r3
 8009706:	781b      	ldrb	r3, [r3, #0]
}
 8009708:	0018      	movs	r0, r3
 800970a:	46bd      	mov	sp, r7
 800970c:	b006      	add	sp, #24
 800970e:	bd80      	pop	{r7, pc}
 8009710:	fffffbff 	.word	0xfffffbff

08009714 <HAL_I2S_RxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8009714:	b580      	push	{r7, lr}
 8009716:	b082      	sub	sp, #8
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxHalfCpltCallback could be implemented in the user file
   */
}
 800971c:	46c0      	nop			@ (mov r8, r8)
 800971e:	46bd      	mov	sp, r7
 8009720:	b002      	add	sp, #8
 8009722:	bd80      	pop	{r7, pc}

08009724 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8009724:	b580      	push	{r7, lr}
 8009726:	b082      	sub	sp, #8
 8009728:	af00      	add	r7, sp, #0
 800972a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800972c:	46c0      	nop			@ (mov r8, r8)
 800972e:	46bd      	mov	sp, r7
 8009730:	b002      	add	sp, #8
 8009732:	bd80      	pop	{r7, pc}

08009734 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8009734:	b580      	push	{r7, lr}
 8009736:	b084      	sub	sp, #16
 8009738:	af00      	add	r7, sp, #0
 800973a:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009740:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	69db      	ldr	r3, [r3, #28]
 8009746:	2b00      	cmp	r3, #0
 8009748:	d10e      	bne.n	8009768 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	685a      	ldr	r2, [r3, #4]
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	2101      	movs	r1, #1
 8009756:	438a      	bics	r2, r1
 8009758:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	2200      	movs	r2, #0
 800975e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	2235      	movs	r2, #53	@ 0x35
 8009764:	2101      	movs	r1, #1
 8009766:	5499      	strb	r1, [r3, r2]
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	0018      	movs	r0, r3
 800976c:	f7fa feb8 	bl	80044e0 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8009770:	46c0      	nop			@ (mov r8, r8)
 8009772:	46bd      	mov	sp, r7
 8009774:	b004      	add	sp, #16
 8009776:	bd80      	pop	{r7, pc}

08009778 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009778:	b580      	push	{r7, lr}
 800977a:	b084      	sub	sp, #16
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009784:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	0018      	movs	r0, r3
 800978a:	f7ff ffc3 	bl	8009714 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800978e:	46c0      	nop			@ (mov r8, r8)
 8009790:	46bd      	mov	sp, r7
 8009792:	b004      	add	sp, #16
 8009794:	bd80      	pop	{r7, pc}

08009796 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8009796:	b580      	push	{r7, lr}
 8009798:	b084      	sub	sp, #16
 800979a:	af00      	add	r7, sp, #0
 800979c:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097a2:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	685a      	ldr	r2, [r3, #4]
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	2103      	movs	r1, #3
 80097b0:	438a      	bics	r2, r1
 80097b2:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	2200      	movs	r2, #0
 80097b8:	845a      	strh	r2, [r3, #34]	@ 0x22
  hi2s->RxXferCount = 0U;
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	2200      	movs	r2, #0
 80097be:	855a      	strh	r2, [r3, #42]	@ 0x2a

  hi2s->State = HAL_I2S_STATE_READY;
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	2235      	movs	r2, #53	@ 0x35
 80097c4:	2101      	movs	r1, #1
 80097c6:	5499      	strb	r1, [r3, r2]

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097cc:	2208      	movs	r2, #8
 80097ce:	431a      	orrs	r2, r3
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	0018      	movs	r0, r3
 80097d8:	f7ff ffa4 	bl	8009724 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80097dc:	46c0      	nop			@ (mov r8, r8)
 80097de:	46bd      	mov	sp, r7
 80097e0:	b004      	add	sp, #16
 80097e2:	bd80      	pop	{r7, pc}

080097e4 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b086      	sub	sp, #24
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	60f8      	str	r0, [r7, #12]
 80097ec:	60b9      	str	r1, [r7, #8]
 80097ee:	603b      	str	r3, [r7, #0]
 80097f0:	1dfb      	adds	r3, r7, #7
 80097f2:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 80097f4:	f7fc ffee 	bl	80067d4 <HAL_GetTick>
 80097f8:	0003      	movs	r3, r0
 80097fa:	617b      	str	r3, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 80097fc:	e017      	b.n	800982e <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 80097fe:	683b      	ldr	r3, [r7, #0]
 8009800:	3301      	adds	r3, #1
 8009802:	d014      	beq.n	800982e <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8009804:	f7fc ffe6 	bl	80067d4 <HAL_GetTick>
 8009808:	0002      	movs	r2, r0
 800980a:	697b      	ldr	r3, [r7, #20]
 800980c:	1ad3      	subs	r3, r2, r3
 800980e:	683a      	ldr	r2, [r7, #0]
 8009810:	429a      	cmp	r2, r3
 8009812:	d902      	bls.n	800981a <I2S_WaitFlagStateUntilTimeout+0x36>
 8009814:	683b      	ldr	r3, [r7, #0]
 8009816:	2b00      	cmp	r3, #0
 8009818:	d109      	bne.n	800982e <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	2235      	movs	r2, #53	@ 0x35
 800981e:	2101      	movs	r1, #1
 8009820:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	2234      	movs	r2, #52	@ 0x34
 8009826:	2100      	movs	r1, #0
 8009828:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800982a:	2303      	movs	r3, #3
 800982c:	e00f      	b.n	800984e <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	689b      	ldr	r3, [r3, #8]
 8009834:	68ba      	ldr	r2, [r7, #8]
 8009836:	4013      	ands	r3, r2
 8009838:	68ba      	ldr	r2, [r7, #8]
 800983a:	1ad3      	subs	r3, r2, r3
 800983c:	425a      	negs	r2, r3
 800983e:	4153      	adcs	r3, r2
 8009840:	b2db      	uxtb	r3, r3
 8009842:	001a      	movs	r2, r3
 8009844:	1dfb      	adds	r3, r7, #7
 8009846:	781b      	ldrb	r3, [r3, #0]
 8009848:	429a      	cmp	r2, r3
 800984a:	d1d8      	bne.n	80097fe <I2S_WaitFlagStateUntilTimeout+0x1a>
      }
    }
  }
  return HAL_OK;
 800984c:	2300      	movs	r3, #0
}
 800984e:	0018      	movs	r0, r3
 8009850:	46bd      	mov	sp, r7
 8009852:	b006      	add	sp, #24
 8009854:	bd80      	pop	{r7, pc}
	...

08009858 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8009858:	b580      	push	{r7, lr}
 800985a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 800985c:	4b04      	ldr	r3, [pc, #16]	@ (8009870 <HAL_PWR_EnableBkUpAccess+0x18>)
 800985e:	681a      	ldr	r2, [r3, #0]
 8009860:	4b03      	ldr	r3, [pc, #12]	@ (8009870 <HAL_PWR_EnableBkUpAccess+0x18>)
 8009862:	2180      	movs	r1, #128	@ 0x80
 8009864:	0049      	lsls	r1, r1, #1
 8009866:	430a      	orrs	r2, r1
 8009868:	601a      	str	r2, [r3, #0]
}
 800986a:	46c0      	nop			@ (mov r8, r8)
 800986c:	46bd      	mov	sp, r7
 800986e:	bd80      	pop	{r7, pc}
 8009870:	40007000 	.word	0x40007000

08009874 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009874:	b5b0      	push	{r4, r5, r7, lr}
 8009876:	b08a      	sub	sp, #40	@ 0x28
 8009878:	af00      	add	r7, sp, #0
 800987a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	2b00      	cmp	r3, #0
 8009880:	d102      	bne.n	8009888 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8009882:	2301      	movs	r3, #1
 8009884:	f000 fbbf 	bl	800a006 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009888:	4bc9      	ldr	r3, [pc, #804]	@ (8009bb0 <HAL_RCC_OscConfig+0x33c>)
 800988a:	68db      	ldr	r3, [r3, #12]
 800988c:	220c      	movs	r2, #12
 800988e:	4013      	ands	r3, r2
 8009890:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009892:	4bc7      	ldr	r3, [pc, #796]	@ (8009bb0 <HAL_RCC_OscConfig+0x33c>)
 8009894:	68da      	ldr	r2, [r3, #12]
 8009896:	2380      	movs	r3, #128	@ 0x80
 8009898:	025b      	lsls	r3, r3, #9
 800989a:	4013      	ands	r3, r2
 800989c:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	2201      	movs	r2, #1
 80098a4:	4013      	ands	r3, r2
 80098a6:	d100      	bne.n	80098aa <HAL_RCC_OscConfig+0x36>
 80098a8:	e07e      	b.n	80099a8 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80098aa:	69fb      	ldr	r3, [r7, #28]
 80098ac:	2b08      	cmp	r3, #8
 80098ae:	d007      	beq.n	80098c0 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80098b0:	69fb      	ldr	r3, [r7, #28]
 80098b2:	2b0c      	cmp	r3, #12
 80098b4:	d112      	bne.n	80098dc <HAL_RCC_OscConfig+0x68>
 80098b6:	69ba      	ldr	r2, [r7, #24]
 80098b8:	2380      	movs	r3, #128	@ 0x80
 80098ba:	025b      	lsls	r3, r3, #9
 80098bc:	429a      	cmp	r2, r3
 80098be:	d10d      	bne.n	80098dc <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80098c0:	4bbb      	ldr	r3, [pc, #748]	@ (8009bb0 <HAL_RCC_OscConfig+0x33c>)
 80098c2:	681a      	ldr	r2, [r3, #0]
 80098c4:	2380      	movs	r3, #128	@ 0x80
 80098c6:	029b      	lsls	r3, r3, #10
 80098c8:	4013      	ands	r3, r2
 80098ca:	d100      	bne.n	80098ce <HAL_RCC_OscConfig+0x5a>
 80098cc:	e06b      	b.n	80099a6 <HAL_RCC_OscConfig+0x132>
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	685b      	ldr	r3, [r3, #4]
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d167      	bne.n	80099a6 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80098d6:	2301      	movs	r3, #1
 80098d8:	f000 fb95 	bl	800a006 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	685a      	ldr	r2, [r3, #4]
 80098e0:	2380      	movs	r3, #128	@ 0x80
 80098e2:	025b      	lsls	r3, r3, #9
 80098e4:	429a      	cmp	r2, r3
 80098e6:	d107      	bne.n	80098f8 <HAL_RCC_OscConfig+0x84>
 80098e8:	4bb1      	ldr	r3, [pc, #708]	@ (8009bb0 <HAL_RCC_OscConfig+0x33c>)
 80098ea:	681a      	ldr	r2, [r3, #0]
 80098ec:	4bb0      	ldr	r3, [pc, #704]	@ (8009bb0 <HAL_RCC_OscConfig+0x33c>)
 80098ee:	2180      	movs	r1, #128	@ 0x80
 80098f0:	0249      	lsls	r1, r1, #9
 80098f2:	430a      	orrs	r2, r1
 80098f4:	601a      	str	r2, [r3, #0]
 80098f6:	e027      	b.n	8009948 <HAL_RCC_OscConfig+0xd4>
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	685a      	ldr	r2, [r3, #4]
 80098fc:	23a0      	movs	r3, #160	@ 0xa0
 80098fe:	02db      	lsls	r3, r3, #11
 8009900:	429a      	cmp	r2, r3
 8009902:	d10e      	bne.n	8009922 <HAL_RCC_OscConfig+0xae>
 8009904:	4baa      	ldr	r3, [pc, #680]	@ (8009bb0 <HAL_RCC_OscConfig+0x33c>)
 8009906:	681a      	ldr	r2, [r3, #0]
 8009908:	4ba9      	ldr	r3, [pc, #676]	@ (8009bb0 <HAL_RCC_OscConfig+0x33c>)
 800990a:	2180      	movs	r1, #128	@ 0x80
 800990c:	02c9      	lsls	r1, r1, #11
 800990e:	430a      	orrs	r2, r1
 8009910:	601a      	str	r2, [r3, #0]
 8009912:	4ba7      	ldr	r3, [pc, #668]	@ (8009bb0 <HAL_RCC_OscConfig+0x33c>)
 8009914:	681a      	ldr	r2, [r3, #0]
 8009916:	4ba6      	ldr	r3, [pc, #664]	@ (8009bb0 <HAL_RCC_OscConfig+0x33c>)
 8009918:	2180      	movs	r1, #128	@ 0x80
 800991a:	0249      	lsls	r1, r1, #9
 800991c:	430a      	orrs	r2, r1
 800991e:	601a      	str	r2, [r3, #0]
 8009920:	e012      	b.n	8009948 <HAL_RCC_OscConfig+0xd4>
 8009922:	4ba3      	ldr	r3, [pc, #652]	@ (8009bb0 <HAL_RCC_OscConfig+0x33c>)
 8009924:	681a      	ldr	r2, [r3, #0]
 8009926:	4ba2      	ldr	r3, [pc, #648]	@ (8009bb0 <HAL_RCC_OscConfig+0x33c>)
 8009928:	49a2      	ldr	r1, [pc, #648]	@ (8009bb4 <HAL_RCC_OscConfig+0x340>)
 800992a:	400a      	ands	r2, r1
 800992c:	601a      	str	r2, [r3, #0]
 800992e:	4ba0      	ldr	r3, [pc, #640]	@ (8009bb0 <HAL_RCC_OscConfig+0x33c>)
 8009930:	681a      	ldr	r2, [r3, #0]
 8009932:	2380      	movs	r3, #128	@ 0x80
 8009934:	025b      	lsls	r3, r3, #9
 8009936:	4013      	ands	r3, r2
 8009938:	60fb      	str	r3, [r7, #12]
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	4b9c      	ldr	r3, [pc, #624]	@ (8009bb0 <HAL_RCC_OscConfig+0x33c>)
 800993e:	681a      	ldr	r2, [r3, #0]
 8009940:	4b9b      	ldr	r3, [pc, #620]	@ (8009bb0 <HAL_RCC_OscConfig+0x33c>)
 8009942:	499d      	ldr	r1, [pc, #628]	@ (8009bb8 <HAL_RCC_OscConfig+0x344>)
 8009944:	400a      	ands	r2, r1
 8009946:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	685b      	ldr	r3, [r3, #4]
 800994c:	2b00      	cmp	r3, #0
 800994e:	d015      	beq.n	800997c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009950:	f7fc ff40 	bl	80067d4 <HAL_GetTick>
 8009954:	0003      	movs	r3, r0
 8009956:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009958:	e009      	b.n	800996e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800995a:	f7fc ff3b 	bl	80067d4 <HAL_GetTick>
 800995e:	0002      	movs	r2, r0
 8009960:	697b      	ldr	r3, [r7, #20]
 8009962:	1ad3      	subs	r3, r2, r3
 8009964:	2b64      	cmp	r3, #100	@ 0x64
 8009966:	d902      	bls.n	800996e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009968:	2303      	movs	r3, #3
 800996a:	f000 fb4c 	bl	800a006 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800996e:	4b90      	ldr	r3, [pc, #576]	@ (8009bb0 <HAL_RCC_OscConfig+0x33c>)
 8009970:	681a      	ldr	r2, [r3, #0]
 8009972:	2380      	movs	r3, #128	@ 0x80
 8009974:	029b      	lsls	r3, r3, #10
 8009976:	4013      	ands	r3, r2
 8009978:	d0ef      	beq.n	800995a <HAL_RCC_OscConfig+0xe6>
 800997a:	e015      	b.n	80099a8 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800997c:	f7fc ff2a 	bl	80067d4 <HAL_GetTick>
 8009980:	0003      	movs	r3, r0
 8009982:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009984:	e008      	b.n	8009998 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009986:	f7fc ff25 	bl	80067d4 <HAL_GetTick>
 800998a:	0002      	movs	r2, r0
 800998c:	697b      	ldr	r3, [r7, #20]
 800998e:	1ad3      	subs	r3, r2, r3
 8009990:	2b64      	cmp	r3, #100	@ 0x64
 8009992:	d901      	bls.n	8009998 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8009994:	2303      	movs	r3, #3
 8009996:	e336      	b.n	800a006 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009998:	4b85      	ldr	r3, [pc, #532]	@ (8009bb0 <HAL_RCC_OscConfig+0x33c>)
 800999a:	681a      	ldr	r2, [r3, #0]
 800999c:	2380      	movs	r3, #128	@ 0x80
 800999e:	029b      	lsls	r3, r3, #10
 80099a0:	4013      	ands	r3, r2
 80099a2:	d1f0      	bne.n	8009986 <HAL_RCC_OscConfig+0x112>
 80099a4:	e000      	b.n	80099a8 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80099a6:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	2202      	movs	r2, #2
 80099ae:	4013      	ands	r3, r2
 80099b0:	d100      	bne.n	80099b4 <HAL_RCC_OscConfig+0x140>
 80099b2:	e099      	b.n	8009ae8 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	68db      	ldr	r3, [r3, #12]
 80099b8:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80099ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099bc:	2220      	movs	r2, #32
 80099be:	4013      	ands	r3, r2
 80099c0:	d009      	beq.n	80099d6 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80099c2:	4b7b      	ldr	r3, [pc, #492]	@ (8009bb0 <HAL_RCC_OscConfig+0x33c>)
 80099c4:	681a      	ldr	r2, [r3, #0]
 80099c6:	4b7a      	ldr	r3, [pc, #488]	@ (8009bb0 <HAL_RCC_OscConfig+0x33c>)
 80099c8:	2120      	movs	r1, #32
 80099ca:	430a      	orrs	r2, r1
 80099cc:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 80099ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099d0:	2220      	movs	r2, #32
 80099d2:	4393      	bics	r3, r2
 80099d4:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80099d6:	69fb      	ldr	r3, [r7, #28]
 80099d8:	2b04      	cmp	r3, #4
 80099da:	d005      	beq.n	80099e8 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80099dc:	69fb      	ldr	r3, [r7, #28]
 80099de:	2b0c      	cmp	r3, #12
 80099e0:	d13e      	bne.n	8009a60 <HAL_RCC_OscConfig+0x1ec>
 80099e2:	69bb      	ldr	r3, [r7, #24]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d13b      	bne.n	8009a60 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80099e8:	4b71      	ldr	r3, [pc, #452]	@ (8009bb0 <HAL_RCC_OscConfig+0x33c>)
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	2204      	movs	r2, #4
 80099ee:	4013      	ands	r3, r2
 80099f0:	d004      	beq.n	80099fc <HAL_RCC_OscConfig+0x188>
 80099f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d101      	bne.n	80099fc <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80099f8:	2301      	movs	r3, #1
 80099fa:	e304      	b.n	800a006 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80099fc:	4b6c      	ldr	r3, [pc, #432]	@ (8009bb0 <HAL_RCC_OscConfig+0x33c>)
 80099fe:	685b      	ldr	r3, [r3, #4]
 8009a00:	4a6e      	ldr	r2, [pc, #440]	@ (8009bbc <HAL_RCC_OscConfig+0x348>)
 8009a02:	4013      	ands	r3, r2
 8009a04:	0019      	movs	r1, r3
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	691b      	ldr	r3, [r3, #16]
 8009a0a:	021a      	lsls	r2, r3, #8
 8009a0c:	4b68      	ldr	r3, [pc, #416]	@ (8009bb0 <HAL_RCC_OscConfig+0x33c>)
 8009a0e:	430a      	orrs	r2, r1
 8009a10:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8009a12:	4b67      	ldr	r3, [pc, #412]	@ (8009bb0 <HAL_RCC_OscConfig+0x33c>)
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	2209      	movs	r2, #9
 8009a18:	4393      	bics	r3, r2
 8009a1a:	0019      	movs	r1, r3
 8009a1c:	4b64      	ldr	r3, [pc, #400]	@ (8009bb0 <HAL_RCC_OscConfig+0x33c>)
 8009a1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009a20:	430a      	orrs	r2, r1
 8009a22:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009a24:	f000 fc42 	bl	800a2ac <HAL_RCC_GetSysClockFreq>
 8009a28:	0001      	movs	r1, r0
 8009a2a:	4b61      	ldr	r3, [pc, #388]	@ (8009bb0 <HAL_RCC_OscConfig+0x33c>)
 8009a2c:	68db      	ldr	r3, [r3, #12]
 8009a2e:	091b      	lsrs	r3, r3, #4
 8009a30:	220f      	movs	r2, #15
 8009a32:	4013      	ands	r3, r2
 8009a34:	4a62      	ldr	r2, [pc, #392]	@ (8009bc0 <HAL_RCC_OscConfig+0x34c>)
 8009a36:	5cd3      	ldrb	r3, [r2, r3]
 8009a38:	000a      	movs	r2, r1
 8009a3a:	40da      	lsrs	r2, r3
 8009a3c:	4b61      	ldr	r3, [pc, #388]	@ (8009bc4 <HAL_RCC_OscConfig+0x350>)
 8009a3e:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8009a40:	4b61      	ldr	r3, [pc, #388]	@ (8009bc8 <HAL_RCC_OscConfig+0x354>)
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	2513      	movs	r5, #19
 8009a46:	197c      	adds	r4, r7, r5
 8009a48:	0018      	movs	r0, r3
 8009a4a:	f7fc fe7d 	bl	8006748 <HAL_InitTick>
 8009a4e:	0003      	movs	r3, r0
 8009a50:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8009a52:	197b      	adds	r3, r7, r5
 8009a54:	781b      	ldrb	r3, [r3, #0]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d046      	beq.n	8009ae8 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8009a5a:	197b      	adds	r3, r7, r5
 8009a5c:	781b      	ldrb	r3, [r3, #0]
 8009a5e:	e2d2      	b.n	800a006 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8009a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d027      	beq.n	8009ab6 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8009a66:	4b52      	ldr	r3, [pc, #328]	@ (8009bb0 <HAL_RCC_OscConfig+0x33c>)
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	2209      	movs	r2, #9
 8009a6c:	4393      	bics	r3, r2
 8009a6e:	0019      	movs	r1, r3
 8009a70:	4b4f      	ldr	r3, [pc, #316]	@ (8009bb0 <HAL_RCC_OscConfig+0x33c>)
 8009a72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009a74:	430a      	orrs	r2, r1
 8009a76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009a78:	f7fc feac 	bl	80067d4 <HAL_GetTick>
 8009a7c:	0003      	movs	r3, r0
 8009a7e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009a80:	e008      	b.n	8009a94 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009a82:	f7fc fea7 	bl	80067d4 <HAL_GetTick>
 8009a86:	0002      	movs	r2, r0
 8009a88:	697b      	ldr	r3, [r7, #20]
 8009a8a:	1ad3      	subs	r3, r2, r3
 8009a8c:	2b02      	cmp	r3, #2
 8009a8e:	d901      	bls.n	8009a94 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8009a90:	2303      	movs	r3, #3
 8009a92:	e2b8      	b.n	800a006 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009a94:	4b46      	ldr	r3, [pc, #280]	@ (8009bb0 <HAL_RCC_OscConfig+0x33c>)
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	2204      	movs	r2, #4
 8009a9a:	4013      	ands	r3, r2
 8009a9c:	d0f1      	beq.n	8009a82 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009a9e:	4b44      	ldr	r3, [pc, #272]	@ (8009bb0 <HAL_RCC_OscConfig+0x33c>)
 8009aa0:	685b      	ldr	r3, [r3, #4]
 8009aa2:	4a46      	ldr	r2, [pc, #280]	@ (8009bbc <HAL_RCC_OscConfig+0x348>)
 8009aa4:	4013      	ands	r3, r2
 8009aa6:	0019      	movs	r1, r3
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	691b      	ldr	r3, [r3, #16]
 8009aac:	021a      	lsls	r2, r3, #8
 8009aae:	4b40      	ldr	r3, [pc, #256]	@ (8009bb0 <HAL_RCC_OscConfig+0x33c>)
 8009ab0:	430a      	orrs	r2, r1
 8009ab2:	605a      	str	r2, [r3, #4]
 8009ab4:	e018      	b.n	8009ae8 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009ab6:	4b3e      	ldr	r3, [pc, #248]	@ (8009bb0 <HAL_RCC_OscConfig+0x33c>)
 8009ab8:	681a      	ldr	r2, [r3, #0]
 8009aba:	4b3d      	ldr	r3, [pc, #244]	@ (8009bb0 <HAL_RCC_OscConfig+0x33c>)
 8009abc:	2101      	movs	r1, #1
 8009abe:	438a      	bics	r2, r1
 8009ac0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009ac2:	f7fc fe87 	bl	80067d4 <HAL_GetTick>
 8009ac6:	0003      	movs	r3, r0
 8009ac8:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009aca:	e008      	b.n	8009ade <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009acc:	f7fc fe82 	bl	80067d4 <HAL_GetTick>
 8009ad0:	0002      	movs	r2, r0
 8009ad2:	697b      	ldr	r3, [r7, #20]
 8009ad4:	1ad3      	subs	r3, r2, r3
 8009ad6:	2b02      	cmp	r3, #2
 8009ad8:	d901      	bls.n	8009ade <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8009ada:	2303      	movs	r3, #3
 8009adc:	e293      	b.n	800a006 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009ade:	4b34      	ldr	r3, [pc, #208]	@ (8009bb0 <HAL_RCC_OscConfig+0x33c>)
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	2204      	movs	r2, #4
 8009ae4:	4013      	ands	r3, r2
 8009ae6:	d1f1      	bne.n	8009acc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	2210      	movs	r2, #16
 8009aee:	4013      	ands	r3, r2
 8009af0:	d100      	bne.n	8009af4 <HAL_RCC_OscConfig+0x280>
 8009af2:	e0a2      	b.n	8009c3a <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8009af4:	69fb      	ldr	r3, [r7, #28]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d140      	bne.n	8009b7c <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8009afa:	4b2d      	ldr	r3, [pc, #180]	@ (8009bb0 <HAL_RCC_OscConfig+0x33c>)
 8009afc:	681a      	ldr	r2, [r3, #0]
 8009afe:	2380      	movs	r3, #128	@ 0x80
 8009b00:	009b      	lsls	r3, r3, #2
 8009b02:	4013      	ands	r3, r2
 8009b04:	d005      	beq.n	8009b12 <HAL_RCC_OscConfig+0x29e>
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	69db      	ldr	r3, [r3, #28]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d101      	bne.n	8009b12 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8009b0e:	2301      	movs	r3, #1
 8009b10:	e279      	b.n	800a006 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009b12:	4b27      	ldr	r3, [pc, #156]	@ (8009bb0 <HAL_RCC_OscConfig+0x33c>)
 8009b14:	685b      	ldr	r3, [r3, #4]
 8009b16:	4a2d      	ldr	r2, [pc, #180]	@ (8009bcc <HAL_RCC_OscConfig+0x358>)
 8009b18:	4013      	ands	r3, r2
 8009b1a:	0019      	movs	r1, r3
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009b20:	4b23      	ldr	r3, [pc, #140]	@ (8009bb0 <HAL_RCC_OscConfig+0x33c>)
 8009b22:	430a      	orrs	r2, r1
 8009b24:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009b26:	4b22      	ldr	r3, [pc, #136]	@ (8009bb0 <HAL_RCC_OscConfig+0x33c>)
 8009b28:	685b      	ldr	r3, [r3, #4]
 8009b2a:	021b      	lsls	r3, r3, #8
 8009b2c:	0a19      	lsrs	r1, r3, #8
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	6a1b      	ldr	r3, [r3, #32]
 8009b32:	061a      	lsls	r2, r3, #24
 8009b34:	4b1e      	ldr	r3, [pc, #120]	@ (8009bb0 <HAL_RCC_OscConfig+0x33c>)
 8009b36:	430a      	orrs	r2, r1
 8009b38:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b3e:	0b5b      	lsrs	r3, r3, #13
 8009b40:	3301      	adds	r3, #1
 8009b42:	2280      	movs	r2, #128	@ 0x80
 8009b44:	0212      	lsls	r2, r2, #8
 8009b46:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8009b48:	4b19      	ldr	r3, [pc, #100]	@ (8009bb0 <HAL_RCC_OscConfig+0x33c>)
 8009b4a:	68db      	ldr	r3, [r3, #12]
 8009b4c:	091b      	lsrs	r3, r3, #4
 8009b4e:	210f      	movs	r1, #15
 8009b50:	400b      	ands	r3, r1
 8009b52:	491b      	ldr	r1, [pc, #108]	@ (8009bc0 <HAL_RCC_OscConfig+0x34c>)
 8009b54:	5ccb      	ldrb	r3, [r1, r3]
 8009b56:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8009b58:	4b1a      	ldr	r3, [pc, #104]	@ (8009bc4 <HAL_RCC_OscConfig+0x350>)
 8009b5a:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8009b5c:	4b1a      	ldr	r3, [pc, #104]	@ (8009bc8 <HAL_RCC_OscConfig+0x354>)
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	2513      	movs	r5, #19
 8009b62:	197c      	adds	r4, r7, r5
 8009b64:	0018      	movs	r0, r3
 8009b66:	f7fc fdef 	bl	8006748 <HAL_InitTick>
 8009b6a:	0003      	movs	r3, r0
 8009b6c:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8009b6e:	197b      	adds	r3, r7, r5
 8009b70:	781b      	ldrb	r3, [r3, #0]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d061      	beq.n	8009c3a <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8009b76:	197b      	adds	r3, r7, r5
 8009b78:	781b      	ldrb	r3, [r3, #0]
 8009b7a:	e244      	b.n	800a006 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	69db      	ldr	r3, [r3, #28]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d040      	beq.n	8009c06 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8009b84:	4b0a      	ldr	r3, [pc, #40]	@ (8009bb0 <HAL_RCC_OscConfig+0x33c>)
 8009b86:	681a      	ldr	r2, [r3, #0]
 8009b88:	4b09      	ldr	r3, [pc, #36]	@ (8009bb0 <HAL_RCC_OscConfig+0x33c>)
 8009b8a:	2180      	movs	r1, #128	@ 0x80
 8009b8c:	0049      	lsls	r1, r1, #1
 8009b8e:	430a      	orrs	r2, r1
 8009b90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009b92:	f7fc fe1f 	bl	80067d4 <HAL_GetTick>
 8009b96:	0003      	movs	r3, r0
 8009b98:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8009b9a:	e019      	b.n	8009bd0 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8009b9c:	f7fc fe1a 	bl	80067d4 <HAL_GetTick>
 8009ba0:	0002      	movs	r2, r0
 8009ba2:	697b      	ldr	r3, [r7, #20]
 8009ba4:	1ad3      	subs	r3, r2, r3
 8009ba6:	2b02      	cmp	r3, #2
 8009ba8:	d912      	bls.n	8009bd0 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8009baa:	2303      	movs	r3, #3
 8009bac:	e22b      	b.n	800a006 <HAL_RCC_OscConfig+0x792>
 8009bae:	46c0      	nop			@ (mov r8, r8)
 8009bb0:	40021000 	.word	0x40021000
 8009bb4:	fffeffff 	.word	0xfffeffff
 8009bb8:	fffbffff 	.word	0xfffbffff
 8009bbc:	ffffe0ff 	.word	0xffffe0ff
 8009bc0:	0800fb7c 	.word	0x0800fb7c
 8009bc4:	20000024 	.word	0x20000024
 8009bc8:	20000038 	.word	0x20000038
 8009bcc:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8009bd0:	4bca      	ldr	r3, [pc, #808]	@ (8009efc <HAL_RCC_OscConfig+0x688>)
 8009bd2:	681a      	ldr	r2, [r3, #0]
 8009bd4:	2380      	movs	r3, #128	@ 0x80
 8009bd6:	009b      	lsls	r3, r3, #2
 8009bd8:	4013      	ands	r3, r2
 8009bda:	d0df      	beq.n	8009b9c <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009bdc:	4bc7      	ldr	r3, [pc, #796]	@ (8009efc <HAL_RCC_OscConfig+0x688>)
 8009bde:	685b      	ldr	r3, [r3, #4]
 8009be0:	4ac7      	ldr	r2, [pc, #796]	@ (8009f00 <HAL_RCC_OscConfig+0x68c>)
 8009be2:	4013      	ands	r3, r2
 8009be4:	0019      	movs	r1, r3
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009bea:	4bc4      	ldr	r3, [pc, #784]	@ (8009efc <HAL_RCC_OscConfig+0x688>)
 8009bec:	430a      	orrs	r2, r1
 8009bee:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009bf0:	4bc2      	ldr	r3, [pc, #776]	@ (8009efc <HAL_RCC_OscConfig+0x688>)
 8009bf2:	685b      	ldr	r3, [r3, #4]
 8009bf4:	021b      	lsls	r3, r3, #8
 8009bf6:	0a19      	lsrs	r1, r3, #8
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	6a1b      	ldr	r3, [r3, #32]
 8009bfc:	061a      	lsls	r2, r3, #24
 8009bfe:	4bbf      	ldr	r3, [pc, #764]	@ (8009efc <HAL_RCC_OscConfig+0x688>)
 8009c00:	430a      	orrs	r2, r1
 8009c02:	605a      	str	r2, [r3, #4]
 8009c04:	e019      	b.n	8009c3a <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8009c06:	4bbd      	ldr	r3, [pc, #756]	@ (8009efc <HAL_RCC_OscConfig+0x688>)
 8009c08:	681a      	ldr	r2, [r3, #0]
 8009c0a:	4bbc      	ldr	r3, [pc, #752]	@ (8009efc <HAL_RCC_OscConfig+0x688>)
 8009c0c:	49bd      	ldr	r1, [pc, #756]	@ (8009f04 <HAL_RCC_OscConfig+0x690>)
 8009c0e:	400a      	ands	r2, r1
 8009c10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009c12:	f7fc fddf 	bl	80067d4 <HAL_GetTick>
 8009c16:	0003      	movs	r3, r0
 8009c18:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8009c1a:	e008      	b.n	8009c2e <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8009c1c:	f7fc fdda 	bl	80067d4 <HAL_GetTick>
 8009c20:	0002      	movs	r2, r0
 8009c22:	697b      	ldr	r3, [r7, #20]
 8009c24:	1ad3      	subs	r3, r2, r3
 8009c26:	2b02      	cmp	r3, #2
 8009c28:	d901      	bls.n	8009c2e <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8009c2a:	2303      	movs	r3, #3
 8009c2c:	e1eb      	b.n	800a006 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8009c2e:	4bb3      	ldr	r3, [pc, #716]	@ (8009efc <HAL_RCC_OscConfig+0x688>)
 8009c30:	681a      	ldr	r2, [r3, #0]
 8009c32:	2380      	movs	r3, #128	@ 0x80
 8009c34:	009b      	lsls	r3, r3, #2
 8009c36:	4013      	ands	r3, r2
 8009c38:	d1f0      	bne.n	8009c1c <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	2208      	movs	r2, #8
 8009c40:	4013      	ands	r3, r2
 8009c42:	d036      	beq.n	8009cb2 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	695b      	ldr	r3, [r3, #20]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d019      	beq.n	8009c80 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009c4c:	4bab      	ldr	r3, [pc, #684]	@ (8009efc <HAL_RCC_OscConfig+0x688>)
 8009c4e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009c50:	4baa      	ldr	r3, [pc, #680]	@ (8009efc <HAL_RCC_OscConfig+0x688>)
 8009c52:	2101      	movs	r1, #1
 8009c54:	430a      	orrs	r2, r1
 8009c56:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009c58:	f7fc fdbc 	bl	80067d4 <HAL_GetTick>
 8009c5c:	0003      	movs	r3, r0
 8009c5e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009c60:	e008      	b.n	8009c74 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009c62:	f7fc fdb7 	bl	80067d4 <HAL_GetTick>
 8009c66:	0002      	movs	r2, r0
 8009c68:	697b      	ldr	r3, [r7, #20]
 8009c6a:	1ad3      	subs	r3, r2, r3
 8009c6c:	2b02      	cmp	r3, #2
 8009c6e:	d901      	bls.n	8009c74 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8009c70:	2303      	movs	r3, #3
 8009c72:	e1c8      	b.n	800a006 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009c74:	4ba1      	ldr	r3, [pc, #644]	@ (8009efc <HAL_RCC_OscConfig+0x688>)
 8009c76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009c78:	2202      	movs	r2, #2
 8009c7a:	4013      	ands	r3, r2
 8009c7c:	d0f1      	beq.n	8009c62 <HAL_RCC_OscConfig+0x3ee>
 8009c7e:	e018      	b.n	8009cb2 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009c80:	4b9e      	ldr	r3, [pc, #632]	@ (8009efc <HAL_RCC_OscConfig+0x688>)
 8009c82:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009c84:	4b9d      	ldr	r3, [pc, #628]	@ (8009efc <HAL_RCC_OscConfig+0x688>)
 8009c86:	2101      	movs	r1, #1
 8009c88:	438a      	bics	r2, r1
 8009c8a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009c8c:	f7fc fda2 	bl	80067d4 <HAL_GetTick>
 8009c90:	0003      	movs	r3, r0
 8009c92:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009c94:	e008      	b.n	8009ca8 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009c96:	f7fc fd9d 	bl	80067d4 <HAL_GetTick>
 8009c9a:	0002      	movs	r2, r0
 8009c9c:	697b      	ldr	r3, [r7, #20]
 8009c9e:	1ad3      	subs	r3, r2, r3
 8009ca0:	2b02      	cmp	r3, #2
 8009ca2:	d901      	bls.n	8009ca8 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8009ca4:	2303      	movs	r3, #3
 8009ca6:	e1ae      	b.n	800a006 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009ca8:	4b94      	ldr	r3, [pc, #592]	@ (8009efc <HAL_RCC_OscConfig+0x688>)
 8009caa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009cac:	2202      	movs	r2, #2
 8009cae:	4013      	ands	r3, r2
 8009cb0:	d1f1      	bne.n	8009c96 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	2204      	movs	r2, #4
 8009cb8:	4013      	ands	r3, r2
 8009cba:	d100      	bne.n	8009cbe <HAL_RCC_OscConfig+0x44a>
 8009cbc:	e0ae      	b.n	8009e1c <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009cbe:	2023      	movs	r0, #35	@ 0x23
 8009cc0:	183b      	adds	r3, r7, r0
 8009cc2:	2200      	movs	r2, #0
 8009cc4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009cc6:	4b8d      	ldr	r3, [pc, #564]	@ (8009efc <HAL_RCC_OscConfig+0x688>)
 8009cc8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009cca:	2380      	movs	r3, #128	@ 0x80
 8009ccc:	055b      	lsls	r3, r3, #21
 8009cce:	4013      	ands	r3, r2
 8009cd0:	d109      	bne.n	8009ce6 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009cd2:	4b8a      	ldr	r3, [pc, #552]	@ (8009efc <HAL_RCC_OscConfig+0x688>)
 8009cd4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009cd6:	4b89      	ldr	r3, [pc, #548]	@ (8009efc <HAL_RCC_OscConfig+0x688>)
 8009cd8:	2180      	movs	r1, #128	@ 0x80
 8009cda:	0549      	lsls	r1, r1, #21
 8009cdc:	430a      	orrs	r2, r1
 8009cde:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8009ce0:	183b      	adds	r3, r7, r0
 8009ce2:	2201      	movs	r2, #1
 8009ce4:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009ce6:	4b88      	ldr	r3, [pc, #544]	@ (8009f08 <HAL_RCC_OscConfig+0x694>)
 8009ce8:	681a      	ldr	r2, [r3, #0]
 8009cea:	2380      	movs	r3, #128	@ 0x80
 8009cec:	005b      	lsls	r3, r3, #1
 8009cee:	4013      	ands	r3, r2
 8009cf0:	d11a      	bne.n	8009d28 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009cf2:	4b85      	ldr	r3, [pc, #532]	@ (8009f08 <HAL_RCC_OscConfig+0x694>)
 8009cf4:	681a      	ldr	r2, [r3, #0]
 8009cf6:	4b84      	ldr	r3, [pc, #528]	@ (8009f08 <HAL_RCC_OscConfig+0x694>)
 8009cf8:	2180      	movs	r1, #128	@ 0x80
 8009cfa:	0049      	lsls	r1, r1, #1
 8009cfc:	430a      	orrs	r2, r1
 8009cfe:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009d00:	f7fc fd68 	bl	80067d4 <HAL_GetTick>
 8009d04:	0003      	movs	r3, r0
 8009d06:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009d08:	e008      	b.n	8009d1c <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009d0a:	f7fc fd63 	bl	80067d4 <HAL_GetTick>
 8009d0e:	0002      	movs	r2, r0
 8009d10:	697b      	ldr	r3, [r7, #20]
 8009d12:	1ad3      	subs	r3, r2, r3
 8009d14:	2b64      	cmp	r3, #100	@ 0x64
 8009d16:	d901      	bls.n	8009d1c <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8009d18:	2303      	movs	r3, #3
 8009d1a:	e174      	b.n	800a006 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009d1c:	4b7a      	ldr	r3, [pc, #488]	@ (8009f08 <HAL_RCC_OscConfig+0x694>)
 8009d1e:	681a      	ldr	r2, [r3, #0]
 8009d20:	2380      	movs	r3, #128	@ 0x80
 8009d22:	005b      	lsls	r3, r3, #1
 8009d24:	4013      	ands	r3, r2
 8009d26:	d0f0      	beq.n	8009d0a <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	689a      	ldr	r2, [r3, #8]
 8009d2c:	2380      	movs	r3, #128	@ 0x80
 8009d2e:	005b      	lsls	r3, r3, #1
 8009d30:	429a      	cmp	r2, r3
 8009d32:	d107      	bne.n	8009d44 <HAL_RCC_OscConfig+0x4d0>
 8009d34:	4b71      	ldr	r3, [pc, #452]	@ (8009efc <HAL_RCC_OscConfig+0x688>)
 8009d36:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009d38:	4b70      	ldr	r3, [pc, #448]	@ (8009efc <HAL_RCC_OscConfig+0x688>)
 8009d3a:	2180      	movs	r1, #128	@ 0x80
 8009d3c:	0049      	lsls	r1, r1, #1
 8009d3e:	430a      	orrs	r2, r1
 8009d40:	651a      	str	r2, [r3, #80]	@ 0x50
 8009d42:	e031      	b.n	8009da8 <HAL_RCC_OscConfig+0x534>
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	689b      	ldr	r3, [r3, #8]
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d10c      	bne.n	8009d66 <HAL_RCC_OscConfig+0x4f2>
 8009d4c:	4b6b      	ldr	r3, [pc, #428]	@ (8009efc <HAL_RCC_OscConfig+0x688>)
 8009d4e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009d50:	4b6a      	ldr	r3, [pc, #424]	@ (8009efc <HAL_RCC_OscConfig+0x688>)
 8009d52:	496c      	ldr	r1, [pc, #432]	@ (8009f04 <HAL_RCC_OscConfig+0x690>)
 8009d54:	400a      	ands	r2, r1
 8009d56:	651a      	str	r2, [r3, #80]	@ 0x50
 8009d58:	4b68      	ldr	r3, [pc, #416]	@ (8009efc <HAL_RCC_OscConfig+0x688>)
 8009d5a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009d5c:	4b67      	ldr	r3, [pc, #412]	@ (8009efc <HAL_RCC_OscConfig+0x688>)
 8009d5e:	496b      	ldr	r1, [pc, #428]	@ (8009f0c <HAL_RCC_OscConfig+0x698>)
 8009d60:	400a      	ands	r2, r1
 8009d62:	651a      	str	r2, [r3, #80]	@ 0x50
 8009d64:	e020      	b.n	8009da8 <HAL_RCC_OscConfig+0x534>
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	689a      	ldr	r2, [r3, #8]
 8009d6a:	23a0      	movs	r3, #160	@ 0xa0
 8009d6c:	00db      	lsls	r3, r3, #3
 8009d6e:	429a      	cmp	r2, r3
 8009d70:	d10e      	bne.n	8009d90 <HAL_RCC_OscConfig+0x51c>
 8009d72:	4b62      	ldr	r3, [pc, #392]	@ (8009efc <HAL_RCC_OscConfig+0x688>)
 8009d74:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009d76:	4b61      	ldr	r3, [pc, #388]	@ (8009efc <HAL_RCC_OscConfig+0x688>)
 8009d78:	2180      	movs	r1, #128	@ 0x80
 8009d7a:	00c9      	lsls	r1, r1, #3
 8009d7c:	430a      	orrs	r2, r1
 8009d7e:	651a      	str	r2, [r3, #80]	@ 0x50
 8009d80:	4b5e      	ldr	r3, [pc, #376]	@ (8009efc <HAL_RCC_OscConfig+0x688>)
 8009d82:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009d84:	4b5d      	ldr	r3, [pc, #372]	@ (8009efc <HAL_RCC_OscConfig+0x688>)
 8009d86:	2180      	movs	r1, #128	@ 0x80
 8009d88:	0049      	lsls	r1, r1, #1
 8009d8a:	430a      	orrs	r2, r1
 8009d8c:	651a      	str	r2, [r3, #80]	@ 0x50
 8009d8e:	e00b      	b.n	8009da8 <HAL_RCC_OscConfig+0x534>
 8009d90:	4b5a      	ldr	r3, [pc, #360]	@ (8009efc <HAL_RCC_OscConfig+0x688>)
 8009d92:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009d94:	4b59      	ldr	r3, [pc, #356]	@ (8009efc <HAL_RCC_OscConfig+0x688>)
 8009d96:	495b      	ldr	r1, [pc, #364]	@ (8009f04 <HAL_RCC_OscConfig+0x690>)
 8009d98:	400a      	ands	r2, r1
 8009d9a:	651a      	str	r2, [r3, #80]	@ 0x50
 8009d9c:	4b57      	ldr	r3, [pc, #348]	@ (8009efc <HAL_RCC_OscConfig+0x688>)
 8009d9e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009da0:	4b56      	ldr	r3, [pc, #344]	@ (8009efc <HAL_RCC_OscConfig+0x688>)
 8009da2:	495a      	ldr	r1, [pc, #360]	@ (8009f0c <HAL_RCC_OscConfig+0x698>)
 8009da4:	400a      	ands	r2, r1
 8009da6:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	689b      	ldr	r3, [r3, #8]
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d015      	beq.n	8009ddc <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009db0:	f7fc fd10 	bl	80067d4 <HAL_GetTick>
 8009db4:	0003      	movs	r3, r0
 8009db6:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009db8:	e009      	b.n	8009dce <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009dba:	f7fc fd0b 	bl	80067d4 <HAL_GetTick>
 8009dbe:	0002      	movs	r2, r0
 8009dc0:	697b      	ldr	r3, [r7, #20]
 8009dc2:	1ad3      	subs	r3, r2, r3
 8009dc4:	4a52      	ldr	r2, [pc, #328]	@ (8009f10 <HAL_RCC_OscConfig+0x69c>)
 8009dc6:	4293      	cmp	r3, r2
 8009dc8:	d901      	bls.n	8009dce <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8009dca:	2303      	movs	r3, #3
 8009dcc:	e11b      	b.n	800a006 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009dce:	4b4b      	ldr	r3, [pc, #300]	@ (8009efc <HAL_RCC_OscConfig+0x688>)
 8009dd0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009dd2:	2380      	movs	r3, #128	@ 0x80
 8009dd4:	009b      	lsls	r3, r3, #2
 8009dd6:	4013      	ands	r3, r2
 8009dd8:	d0ef      	beq.n	8009dba <HAL_RCC_OscConfig+0x546>
 8009dda:	e014      	b.n	8009e06 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009ddc:	f7fc fcfa 	bl	80067d4 <HAL_GetTick>
 8009de0:	0003      	movs	r3, r0
 8009de2:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009de4:	e009      	b.n	8009dfa <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009de6:	f7fc fcf5 	bl	80067d4 <HAL_GetTick>
 8009dea:	0002      	movs	r2, r0
 8009dec:	697b      	ldr	r3, [r7, #20]
 8009dee:	1ad3      	subs	r3, r2, r3
 8009df0:	4a47      	ldr	r2, [pc, #284]	@ (8009f10 <HAL_RCC_OscConfig+0x69c>)
 8009df2:	4293      	cmp	r3, r2
 8009df4:	d901      	bls.n	8009dfa <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8009df6:	2303      	movs	r3, #3
 8009df8:	e105      	b.n	800a006 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009dfa:	4b40      	ldr	r3, [pc, #256]	@ (8009efc <HAL_RCC_OscConfig+0x688>)
 8009dfc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009dfe:	2380      	movs	r3, #128	@ 0x80
 8009e00:	009b      	lsls	r3, r3, #2
 8009e02:	4013      	ands	r3, r2
 8009e04:	d1ef      	bne.n	8009de6 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8009e06:	2323      	movs	r3, #35	@ 0x23
 8009e08:	18fb      	adds	r3, r7, r3
 8009e0a:	781b      	ldrb	r3, [r3, #0]
 8009e0c:	2b01      	cmp	r3, #1
 8009e0e:	d105      	bne.n	8009e1c <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009e10:	4b3a      	ldr	r3, [pc, #232]	@ (8009efc <HAL_RCC_OscConfig+0x688>)
 8009e12:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009e14:	4b39      	ldr	r3, [pc, #228]	@ (8009efc <HAL_RCC_OscConfig+0x688>)
 8009e16:	493f      	ldr	r1, [pc, #252]	@ (8009f14 <HAL_RCC_OscConfig+0x6a0>)
 8009e18:	400a      	ands	r2, r1
 8009e1a:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	2220      	movs	r2, #32
 8009e22:	4013      	ands	r3, r2
 8009e24:	d049      	beq.n	8009eba <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	699b      	ldr	r3, [r3, #24]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d026      	beq.n	8009e7c <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8009e2e:	4b33      	ldr	r3, [pc, #204]	@ (8009efc <HAL_RCC_OscConfig+0x688>)
 8009e30:	689a      	ldr	r2, [r3, #8]
 8009e32:	4b32      	ldr	r3, [pc, #200]	@ (8009efc <HAL_RCC_OscConfig+0x688>)
 8009e34:	2101      	movs	r1, #1
 8009e36:	430a      	orrs	r2, r1
 8009e38:	609a      	str	r2, [r3, #8]
 8009e3a:	4b30      	ldr	r3, [pc, #192]	@ (8009efc <HAL_RCC_OscConfig+0x688>)
 8009e3c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009e3e:	4b2f      	ldr	r3, [pc, #188]	@ (8009efc <HAL_RCC_OscConfig+0x688>)
 8009e40:	2101      	movs	r1, #1
 8009e42:	430a      	orrs	r2, r1
 8009e44:	635a      	str	r2, [r3, #52]	@ 0x34
 8009e46:	4b34      	ldr	r3, [pc, #208]	@ (8009f18 <HAL_RCC_OscConfig+0x6a4>)
 8009e48:	6a1a      	ldr	r2, [r3, #32]
 8009e4a:	4b33      	ldr	r3, [pc, #204]	@ (8009f18 <HAL_RCC_OscConfig+0x6a4>)
 8009e4c:	2180      	movs	r1, #128	@ 0x80
 8009e4e:	0189      	lsls	r1, r1, #6
 8009e50:	430a      	orrs	r2, r1
 8009e52:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009e54:	f7fc fcbe 	bl	80067d4 <HAL_GetTick>
 8009e58:	0003      	movs	r3, r0
 8009e5a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009e5c:	e008      	b.n	8009e70 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009e5e:	f7fc fcb9 	bl	80067d4 <HAL_GetTick>
 8009e62:	0002      	movs	r2, r0
 8009e64:	697b      	ldr	r3, [r7, #20]
 8009e66:	1ad3      	subs	r3, r2, r3
 8009e68:	2b02      	cmp	r3, #2
 8009e6a:	d901      	bls.n	8009e70 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8009e6c:	2303      	movs	r3, #3
 8009e6e:	e0ca      	b.n	800a006 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009e70:	4b22      	ldr	r3, [pc, #136]	@ (8009efc <HAL_RCC_OscConfig+0x688>)
 8009e72:	689b      	ldr	r3, [r3, #8]
 8009e74:	2202      	movs	r2, #2
 8009e76:	4013      	ands	r3, r2
 8009e78:	d0f1      	beq.n	8009e5e <HAL_RCC_OscConfig+0x5ea>
 8009e7a:	e01e      	b.n	8009eba <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8009e7c:	4b1f      	ldr	r3, [pc, #124]	@ (8009efc <HAL_RCC_OscConfig+0x688>)
 8009e7e:	689a      	ldr	r2, [r3, #8]
 8009e80:	4b1e      	ldr	r3, [pc, #120]	@ (8009efc <HAL_RCC_OscConfig+0x688>)
 8009e82:	2101      	movs	r1, #1
 8009e84:	438a      	bics	r2, r1
 8009e86:	609a      	str	r2, [r3, #8]
 8009e88:	4b23      	ldr	r3, [pc, #140]	@ (8009f18 <HAL_RCC_OscConfig+0x6a4>)
 8009e8a:	6a1a      	ldr	r2, [r3, #32]
 8009e8c:	4b22      	ldr	r3, [pc, #136]	@ (8009f18 <HAL_RCC_OscConfig+0x6a4>)
 8009e8e:	4923      	ldr	r1, [pc, #140]	@ (8009f1c <HAL_RCC_OscConfig+0x6a8>)
 8009e90:	400a      	ands	r2, r1
 8009e92:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009e94:	f7fc fc9e 	bl	80067d4 <HAL_GetTick>
 8009e98:	0003      	movs	r3, r0
 8009e9a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009e9c:	e008      	b.n	8009eb0 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009e9e:	f7fc fc99 	bl	80067d4 <HAL_GetTick>
 8009ea2:	0002      	movs	r2, r0
 8009ea4:	697b      	ldr	r3, [r7, #20]
 8009ea6:	1ad3      	subs	r3, r2, r3
 8009ea8:	2b02      	cmp	r3, #2
 8009eaa:	d901      	bls.n	8009eb0 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8009eac:	2303      	movs	r3, #3
 8009eae:	e0aa      	b.n	800a006 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009eb0:	4b12      	ldr	r3, [pc, #72]	@ (8009efc <HAL_RCC_OscConfig+0x688>)
 8009eb2:	689b      	ldr	r3, [r3, #8]
 8009eb4:	2202      	movs	r2, #2
 8009eb6:	4013      	ands	r3, r2
 8009eb8:	d1f1      	bne.n	8009e9e <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d100      	bne.n	8009ec4 <HAL_RCC_OscConfig+0x650>
 8009ec2:	e09f      	b.n	800a004 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009ec4:	69fb      	ldr	r3, [r7, #28]
 8009ec6:	2b0c      	cmp	r3, #12
 8009ec8:	d100      	bne.n	8009ecc <HAL_RCC_OscConfig+0x658>
 8009eca:	e078      	b.n	8009fbe <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ed0:	2b02      	cmp	r3, #2
 8009ed2:	d159      	bne.n	8009f88 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009ed4:	4b09      	ldr	r3, [pc, #36]	@ (8009efc <HAL_RCC_OscConfig+0x688>)
 8009ed6:	681a      	ldr	r2, [r3, #0]
 8009ed8:	4b08      	ldr	r3, [pc, #32]	@ (8009efc <HAL_RCC_OscConfig+0x688>)
 8009eda:	4911      	ldr	r1, [pc, #68]	@ (8009f20 <HAL_RCC_OscConfig+0x6ac>)
 8009edc:	400a      	ands	r2, r1
 8009ede:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009ee0:	f7fc fc78 	bl	80067d4 <HAL_GetTick>
 8009ee4:	0003      	movs	r3, r0
 8009ee6:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8009ee8:	e01c      	b.n	8009f24 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009eea:	f7fc fc73 	bl	80067d4 <HAL_GetTick>
 8009eee:	0002      	movs	r2, r0
 8009ef0:	697b      	ldr	r3, [r7, #20]
 8009ef2:	1ad3      	subs	r3, r2, r3
 8009ef4:	2b02      	cmp	r3, #2
 8009ef6:	d915      	bls.n	8009f24 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8009ef8:	2303      	movs	r3, #3
 8009efa:	e084      	b.n	800a006 <HAL_RCC_OscConfig+0x792>
 8009efc:	40021000 	.word	0x40021000
 8009f00:	ffff1fff 	.word	0xffff1fff
 8009f04:	fffffeff 	.word	0xfffffeff
 8009f08:	40007000 	.word	0x40007000
 8009f0c:	fffffbff 	.word	0xfffffbff
 8009f10:	00001388 	.word	0x00001388
 8009f14:	efffffff 	.word	0xefffffff
 8009f18:	40010000 	.word	0x40010000
 8009f1c:	ffffdfff 	.word	0xffffdfff
 8009f20:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8009f24:	4b3a      	ldr	r3, [pc, #232]	@ (800a010 <HAL_RCC_OscConfig+0x79c>)
 8009f26:	681a      	ldr	r2, [r3, #0]
 8009f28:	2380      	movs	r3, #128	@ 0x80
 8009f2a:	049b      	lsls	r3, r3, #18
 8009f2c:	4013      	ands	r3, r2
 8009f2e:	d1dc      	bne.n	8009eea <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009f30:	4b37      	ldr	r3, [pc, #220]	@ (800a010 <HAL_RCC_OscConfig+0x79c>)
 8009f32:	68db      	ldr	r3, [r3, #12]
 8009f34:	4a37      	ldr	r2, [pc, #220]	@ (800a014 <HAL_RCC_OscConfig+0x7a0>)
 8009f36:	4013      	ands	r3, r2
 8009f38:	0019      	movs	r1, r3
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f42:	431a      	orrs	r2, r3
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f48:	431a      	orrs	r2, r3
 8009f4a:	4b31      	ldr	r3, [pc, #196]	@ (800a010 <HAL_RCC_OscConfig+0x79c>)
 8009f4c:	430a      	orrs	r2, r1
 8009f4e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009f50:	4b2f      	ldr	r3, [pc, #188]	@ (800a010 <HAL_RCC_OscConfig+0x79c>)
 8009f52:	681a      	ldr	r2, [r3, #0]
 8009f54:	4b2e      	ldr	r3, [pc, #184]	@ (800a010 <HAL_RCC_OscConfig+0x79c>)
 8009f56:	2180      	movs	r1, #128	@ 0x80
 8009f58:	0449      	lsls	r1, r1, #17
 8009f5a:	430a      	orrs	r2, r1
 8009f5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009f5e:	f7fc fc39 	bl	80067d4 <HAL_GetTick>
 8009f62:	0003      	movs	r3, r0
 8009f64:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8009f66:	e008      	b.n	8009f7a <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009f68:	f7fc fc34 	bl	80067d4 <HAL_GetTick>
 8009f6c:	0002      	movs	r2, r0
 8009f6e:	697b      	ldr	r3, [r7, #20]
 8009f70:	1ad3      	subs	r3, r2, r3
 8009f72:	2b02      	cmp	r3, #2
 8009f74:	d901      	bls.n	8009f7a <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8009f76:	2303      	movs	r3, #3
 8009f78:	e045      	b.n	800a006 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8009f7a:	4b25      	ldr	r3, [pc, #148]	@ (800a010 <HAL_RCC_OscConfig+0x79c>)
 8009f7c:	681a      	ldr	r2, [r3, #0]
 8009f7e:	2380      	movs	r3, #128	@ 0x80
 8009f80:	049b      	lsls	r3, r3, #18
 8009f82:	4013      	ands	r3, r2
 8009f84:	d0f0      	beq.n	8009f68 <HAL_RCC_OscConfig+0x6f4>
 8009f86:	e03d      	b.n	800a004 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009f88:	4b21      	ldr	r3, [pc, #132]	@ (800a010 <HAL_RCC_OscConfig+0x79c>)
 8009f8a:	681a      	ldr	r2, [r3, #0]
 8009f8c:	4b20      	ldr	r3, [pc, #128]	@ (800a010 <HAL_RCC_OscConfig+0x79c>)
 8009f8e:	4922      	ldr	r1, [pc, #136]	@ (800a018 <HAL_RCC_OscConfig+0x7a4>)
 8009f90:	400a      	ands	r2, r1
 8009f92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009f94:	f7fc fc1e 	bl	80067d4 <HAL_GetTick>
 8009f98:	0003      	movs	r3, r0
 8009f9a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8009f9c:	e008      	b.n	8009fb0 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009f9e:	f7fc fc19 	bl	80067d4 <HAL_GetTick>
 8009fa2:	0002      	movs	r2, r0
 8009fa4:	697b      	ldr	r3, [r7, #20]
 8009fa6:	1ad3      	subs	r3, r2, r3
 8009fa8:	2b02      	cmp	r3, #2
 8009faa:	d901      	bls.n	8009fb0 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8009fac:	2303      	movs	r3, #3
 8009fae:	e02a      	b.n	800a006 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8009fb0:	4b17      	ldr	r3, [pc, #92]	@ (800a010 <HAL_RCC_OscConfig+0x79c>)
 8009fb2:	681a      	ldr	r2, [r3, #0]
 8009fb4:	2380      	movs	r3, #128	@ 0x80
 8009fb6:	049b      	lsls	r3, r3, #18
 8009fb8:	4013      	ands	r3, r2
 8009fba:	d1f0      	bne.n	8009f9e <HAL_RCC_OscConfig+0x72a>
 8009fbc:	e022      	b.n	800a004 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fc2:	2b01      	cmp	r3, #1
 8009fc4:	d101      	bne.n	8009fca <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8009fc6:	2301      	movs	r3, #1
 8009fc8:	e01d      	b.n	800a006 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8009fca:	4b11      	ldr	r3, [pc, #68]	@ (800a010 <HAL_RCC_OscConfig+0x79c>)
 8009fcc:	68db      	ldr	r3, [r3, #12]
 8009fce:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009fd0:	69ba      	ldr	r2, [r7, #24]
 8009fd2:	2380      	movs	r3, #128	@ 0x80
 8009fd4:	025b      	lsls	r3, r3, #9
 8009fd6:	401a      	ands	r2, r3
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fdc:	429a      	cmp	r2, r3
 8009fde:	d10f      	bne.n	800a000 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8009fe0:	69ba      	ldr	r2, [r7, #24]
 8009fe2:	23f0      	movs	r3, #240	@ 0xf0
 8009fe4:	039b      	lsls	r3, r3, #14
 8009fe6:	401a      	ands	r2, r3
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009fec:	429a      	cmp	r2, r3
 8009fee:	d107      	bne.n	800a000 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8009ff0:	69ba      	ldr	r2, [r7, #24]
 8009ff2:	23c0      	movs	r3, #192	@ 0xc0
 8009ff4:	041b      	lsls	r3, r3, #16
 8009ff6:	401a      	ands	r2, r3
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8009ffc:	429a      	cmp	r2, r3
 8009ffe:	d001      	beq.n	800a004 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 800a000:	2301      	movs	r3, #1
 800a002:	e000      	b.n	800a006 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 800a004:	2300      	movs	r3, #0
}
 800a006:	0018      	movs	r0, r3
 800a008:	46bd      	mov	sp, r7
 800a00a:	b00a      	add	sp, #40	@ 0x28
 800a00c:	bdb0      	pop	{r4, r5, r7, pc}
 800a00e:	46c0      	nop			@ (mov r8, r8)
 800a010:	40021000 	.word	0x40021000
 800a014:	ff02ffff 	.word	0xff02ffff
 800a018:	feffffff 	.word	0xfeffffff

0800a01c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a01c:	b5b0      	push	{r4, r5, r7, lr}
 800a01e:	b084      	sub	sp, #16
 800a020:	af00      	add	r7, sp, #0
 800a022:	6078      	str	r0, [r7, #4]
 800a024:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d101      	bne.n	800a030 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a02c:	2301      	movs	r3, #1
 800a02e:	e128      	b.n	800a282 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a030:	4b96      	ldr	r3, [pc, #600]	@ (800a28c <HAL_RCC_ClockConfig+0x270>)
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	2201      	movs	r2, #1
 800a036:	4013      	ands	r3, r2
 800a038:	683a      	ldr	r2, [r7, #0]
 800a03a:	429a      	cmp	r2, r3
 800a03c:	d91e      	bls.n	800a07c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a03e:	4b93      	ldr	r3, [pc, #588]	@ (800a28c <HAL_RCC_ClockConfig+0x270>)
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	2201      	movs	r2, #1
 800a044:	4393      	bics	r3, r2
 800a046:	0019      	movs	r1, r3
 800a048:	4b90      	ldr	r3, [pc, #576]	@ (800a28c <HAL_RCC_ClockConfig+0x270>)
 800a04a:	683a      	ldr	r2, [r7, #0]
 800a04c:	430a      	orrs	r2, r1
 800a04e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800a050:	f7fc fbc0 	bl	80067d4 <HAL_GetTick>
 800a054:	0003      	movs	r3, r0
 800a056:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a058:	e009      	b.n	800a06e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a05a:	f7fc fbbb 	bl	80067d4 <HAL_GetTick>
 800a05e:	0002      	movs	r2, r0
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	1ad3      	subs	r3, r2, r3
 800a064:	4a8a      	ldr	r2, [pc, #552]	@ (800a290 <HAL_RCC_ClockConfig+0x274>)
 800a066:	4293      	cmp	r3, r2
 800a068:	d901      	bls.n	800a06e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800a06a:	2303      	movs	r3, #3
 800a06c:	e109      	b.n	800a282 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a06e:	4b87      	ldr	r3, [pc, #540]	@ (800a28c <HAL_RCC_ClockConfig+0x270>)
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	2201      	movs	r2, #1
 800a074:	4013      	ands	r3, r2
 800a076:	683a      	ldr	r2, [r7, #0]
 800a078:	429a      	cmp	r2, r3
 800a07a:	d1ee      	bne.n	800a05a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	2202      	movs	r2, #2
 800a082:	4013      	ands	r3, r2
 800a084:	d009      	beq.n	800a09a <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a086:	4b83      	ldr	r3, [pc, #524]	@ (800a294 <HAL_RCC_ClockConfig+0x278>)
 800a088:	68db      	ldr	r3, [r3, #12]
 800a08a:	22f0      	movs	r2, #240	@ 0xf0
 800a08c:	4393      	bics	r3, r2
 800a08e:	0019      	movs	r1, r3
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	689a      	ldr	r2, [r3, #8]
 800a094:	4b7f      	ldr	r3, [pc, #508]	@ (800a294 <HAL_RCC_ClockConfig+0x278>)
 800a096:	430a      	orrs	r2, r1
 800a098:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	2201      	movs	r2, #1
 800a0a0:	4013      	ands	r3, r2
 800a0a2:	d100      	bne.n	800a0a6 <HAL_RCC_ClockConfig+0x8a>
 800a0a4:	e089      	b.n	800a1ba <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	685b      	ldr	r3, [r3, #4]
 800a0aa:	2b02      	cmp	r3, #2
 800a0ac:	d107      	bne.n	800a0be <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a0ae:	4b79      	ldr	r3, [pc, #484]	@ (800a294 <HAL_RCC_ClockConfig+0x278>)
 800a0b0:	681a      	ldr	r2, [r3, #0]
 800a0b2:	2380      	movs	r3, #128	@ 0x80
 800a0b4:	029b      	lsls	r3, r3, #10
 800a0b6:	4013      	ands	r3, r2
 800a0b8:	d120      	bne.n	800a0fc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800a0ba:	2301      	movs	r3, #1
 800a0bc:	e0e1      	b.n	800a282 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	685b      	ldr	r3, [r3, #4]
 800a0c2:	2b03      	cmp	r3, #3
 800a0c4:	d107      	bne.n	800a0d6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a0c6:	4b73      	ldr	r3, [pc, #460]	@ (800a294 <HAL_RCC_ClockConfig+0x278>)
 800a0c8:	681a      	ldr	r2, [r3, #0]
 800a0ca:	2380      	movs	r3, #128	@ 0x80
 800a0cc:	049b      	lsls	r3, r3, #18
 800a0ce:	4013      	ands	r3, r2
 800a0d0:	d114      	bne.n	800a0fc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800a0d2:	2301      	movs	r3, #1
 800a0d4:	e0d5      	b.n	800a282 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	685b      	ldr	r3, [r3, #4]
 800a0da:	2b01      	cmp	r3, #1
 800a0dc:	d106      	bne.n	800a0ec <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a0de:	4b6d      	ldr	r3, [pc, #436]	@ (800a294 <HAL_RCC_ClockConfig+0x278>)
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	2204      	movs	r2, #4
 800a0e4:	4013      	ands	r3, r2
 800a0e6:	d109      	bne.n	800a0fc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800a0e8:	2301      	movs	r3, #1
 800a0ea:	e0ca      	b.n	800a282 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800a0ec:	4b69      	ldr	r3, [pc, #420]	@ (800a294 <HAL_RCC_ClockConfig+0x278>)
 800a0ee:	681a      	ldr	r2, [r3, #0]
 800a0f0:	2380      	movs	r3, #128	@ 0x80
 800a0f2:	009b      	lsls	r3, r3, #2
 800a0f4:	4013      	ands	r3, r2
 800a0f6:	d101      	bne.n	800a0fc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800a0f8:	2301      	movs	r3, #1
 800a0fa:	e0c2      	b.n	800a282 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a0fc:	4b65      	ldr	r3, [pc, #404]	@ (800a294 <HAL_RCC_ClockConfig+0x278>)
 800a0fe:	68db      	ldr	r3, [r3, #12]
 800a100:	2203      	movs	r2, #3
 800a102:	4393      	bics	r3, r2
 800a104:	0019      	movs	r1, r3
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	685a      	ldr	r2, [r3, #4]
 800a10a:	4b62      	ldr	r3, [pc, #392]	@ (800a294 <HAL_RCC_ClockConfig+0x278>)
 800a10c:	430a      	orrs	r2, r1
 800a10e:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a110:	f7fc fb60 	bl	80067d4 <HAL_GetTick>
 800a114:	0003      	movs	r3, r0
 800a116:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	685b      	ldr	r3, [r3, #4]
 800a11c:	2b02      	cmp	r3, #2
 800a11e:	d111      	bne.n	800a144 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800a120:	e009      	b.n	800a136 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a122:	f7fc fb57 	bl	80067d4 <HAL_GetTick>
 800a126:	0002      	movs	r2, r0
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	1ad3      	subs	r3, r2, r3
 800a12c:	4a58      	ldr	r2, [pc, #352]	@ (800a290 <HAL_RCC_ClockConfig+0x274>)
 800a12e:	4293      	cmp	r3, r2
 800a130:	d901      	bls.n	800a136 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800a132:	2303      	movs	r3, #3
 800a134:	e0a5      	b.n	800a282 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800a136:	4b57      	ldr	r3, [pc, #348]	@ (800a294 <HAL_RCC_ClockConfig+0x278>)
 800a138:	68db      	ldr	r3, [r3, #12]
 800a13a:	220c      	movs	r2, #12
 800a13c:	4013      	ands	r3, r2
 800a13e:	2b08      	cmp	r3, #8
 800a140:	d1ef      	bne.n	800a122 <HAL_RCC_ClockConfig+0x106>
 800a142:	e03a      	b.n	800a1ba <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	685b      	ldr	r3, [r3, #4]
 800a148:	2b03      	cmp	r3, #3
 800a14a:	d111      	bne.n	800a170 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a14c:	e009      	b.n	800a162 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a14e:	f7fc fb41 	bl	80067d4 <HAL_GetTick>
 800a152:	0002      	movs	r2, r0
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	1ad3      	subs	r3, r2, r3
 800a158:	4a4d      	ldr	r2, [pc, #308]	@ (800a290 <HAL_RCC_ClockConfig+0x274>)
 800a15a:	4293      	cmp	r3, r2
 800a15c:	d901      	bls.n	800a162 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800a15e:	2303      	movs	r3, #3
 800a160:	e08f      	b.n	800a282 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a162:	4b4c      	ldr	r3, [pc, #304]	@ (800a294 <HAL_RCC_ClockConfig+0x278>)
 800a164:	68db      	ldr	r3, [r3, #12]
 800a166:	220c      	movs	r2, #12
 800a168:	4013      	ands	r3, r2
 800a16a:	2b0c      	cmp	r3, #12
 800a16c:	d1ef      	bne.n	800a14e <HAL_RCC_ClockConfig+0x132>
 800a16e:	e024      	b.n	800a1ba <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	685b      	ldr	r3, [r3, #4]
 800a174:	2b01      	cmp	r3, #1
 800a176:	d11b      	bne.n	800a1b0 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800a178:	e009      	b.n	800a18e <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a17a:	f7fc fb2b 	bl	80067d4 <HAL_GetTick>
 800a17e:	0002      	movs	r2, r0
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	1ad3      	subs	r3, r2, r3
 800a184:	4a42      	ldr	r2, [pc, #264]	@ (800a290 <HAL_RCC_ClockConfig+0x274>)
 800a186:	4293      	cmp	r3, r2
 800a188:	d901      	bls.n	800a18e <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800a18a:	2303      	movs	r3, #3
 800a18c:	e079      	b.n	800a282 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800a18e:	4b41      	ldr	r3, [pc, #260]	@ (800a294 <HAL_RCC_ClockConfig+0x278>)
 800a190:	68db      	ldr	r3, [r3, #12]
 800a192:	220c      	movs	r2, #12
 800a194:	4013      	ands	r3, r2
 800a196:	2b04      	cmp	r3, #4
 800a198:	d1ef      	bne.n	800a17a <HAL_RCC_ClockConfig+0x15e>
 800a19a:	e00e      	b.n	800a1ba <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a19c:	f7fc fb1a 	bl	80067d4 <HAL_GetTick>
 800a1a0:	0002      	movs	r2, r0
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	1ad3      	subs	r3, r2, r3
 800a1a6:	4a3a      	ldr	r2, [pc, #232]	@ (800a290 <HAL_RCC_ClockConfig+0x274>)
 800a1a8:	4293      	cmp	r3, r2
 800a1aa:	d901      	bls.n	800a1b0 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 800a1ac:	2303      	movs	r3, #3
 800a1ae:	e068      	b.n	800a282 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800a1b0:	4b38      	ldr	r3, [pc, #224]	@ (800a294 <HAL_RCC_ClockConfig+0x278>)
 800a1b2:	68db      	ldr	r3, [r3, #12]
 800a1b4:	220c      	movs	r2, #12
 800a1b6:	4013      	ands	r3, r2
 800a1b8:	d1f0      	bne.n	800a19c <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a1ba:	4b34      	ldr	r3, [pc, #208]	@ (800a28c <HAL_RCC_ClockConfig+0x270>)
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	2201      	movs	r2, #1
 800a1c0:	4013      	ands	r3, r2
 800a1c2:	683a      	ldr	r2, [r7, #0]
 800a1c4:	429a      	cmp	r2, r3
 800a1c6:	d21e      	bcs.n	800a206 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a1c8:	4b30      	ldr	r3, [pc, #192]	@ (800a28c <HAL_RCC_ClockConfig+0x270>)
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	2201      	movs	r2, #1
 800a1ce:	4393      	bics	r3, r2
 800a1d0:	0019      	movs	r1, r3
 800a1d2:	4b2e      	ldr	r3, [pc, #184]	@ (800a28c <HAL_RCC_ClockConfig+0x270>)
 800a1d4:	683a      	ldr	r2, [r7, #0]
 800a1d6:	430a      	orrs	r2, r1
 800a1d8:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800a1da:	f7fc fafb 	bl	80067d4 <HAL_GetTick>
 800a1de:	0003      	movs	r3, r0
 800a1e0:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a1e2:	e009      	b.n	800a1f8 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a1e4:	f7fc faf6 	bl	80067d4 <HAL_GetTick>
 800a1e8:	0002      	movs	r2, r0
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	1ad3      	subs	r3, r2, r3
 800a1ee:	4a28      	ldr	r2, [pc, #160]	@ (800a290 <HAL_RCC_ClockConfig+0x274>)
 800a1f0:	4293      	cmp	r3, r2
 800a1f2:	d901      	bls.n	800a1f8 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 800a1f4:	2303      	movs	r3, #3
 800a1f6:	e044      	b.n	800a282 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a1f8:	4b24      	ldr	r3, [pc, #144]	@ (800a28c <HAL_RCC_ClockConfig+0x270>)
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	2201      	movs	r2, #1
 800a1fe:	4013      	ands	r3, r2
 800a200:	683a      	ldr	r2, [r7, #0]
 800a202:	429a      	cmp	r2, r3
 800a204:	d1ee      	bne.n	800a1e4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	2204      	movs	r2, #4
 800a20c:	4013      	ands	r3, r2
 800a20e:	d009      	beq.n	800a224 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a210:	4b20      	ldr	r3, [pc, #128]	@ (800a294 <HAL_RCC_ClockConfig+0x278>)
 800a212:	68db      	ldr	r3, [r3, #12]
 800a214:	4a20      	ldr	r2, [pc, #128]	@ (800a298 <HAL_RCC_ClockConfig+0x27c>)
 800a216:	4013      	ands	r3, r2
 800a218:	0019      	movs	r1, r3
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	68da      	ldr	r2, [r3, #12]
 800a21e:	4b1d      	ldr	r3, [pc, #116]	@ (800a294 <HAL_RCC_ClockConfig+0x278>)
 800a220:	430a      	orrs	r2, r1
 800a222:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	2208      	movs	r2, #8
 800a22a:	4013      	ands	r3, r2
 800a22c:	d00a      	beq.n	800a244 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800a22e:	4b19      	ldr	r3, [pc, #100]	@ (800a294 <HAL_RCC_ClockConfig+0x278>)
 800a230:	68db      	ldr	r3, [r3, #12]
 800a232:	4a1a      	ldr	r2, [pc, #104]	@ (800a29c <HAL_RCC_ClockConfig+0x280>)
 800a234:	4013      	ands	r3, r2
 800a236:	0019      	movs	r1, r3
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	691b      	ldr	r3, [r3, #16]
 800a23c:	00da      	lsls	r2, r3, #3
 800a23e:	4b15      	ldr	r3, [pc, #84]	@ (800a294 <HAL_RCC_ClockConfig+0x278>)
 800a240:	430a      	orrs	r2, r1
 800a242:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800a244:	f000 f832 	bl	800a2ac <HAL_RCC_GetSysClockFreq>
 800a248:	0001      	movs	r1, r0
 800a24a:	4b12      	ldr	r3, [pc, #72]	@ (800a294 <HAL_RCC_ClockConfig+0x278>)
 800a24c:	68db      	ldr	r3, [r3, #12]
 800a24e:	091b      	lsrs	r3, r3, #4
 800a250:	220f      	movs	r2, #15
 800a252:	4013      	ands	r3, r2
 800a254:	4a12      	ldr	r2, [pc, #72]	@ (800a2a0 <HAL_RCC_ClockConfig+0x284>)
 800a256:	5cd3      	ldrb	r3, [r2, r3]
 800a258:	000a      	movs	r2, r1
 800a25a:	40da      	lsrs	r2, r3
 800a25c:	4b11      	ldr	r3, [pc, #68]	@ (800a2a4 <HAL_RCC_ClockConfig+0x288>)
 800a25e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800a260:	4b11      	ldr	r3, [pc, #68]	@ (800a2a8 <HAL_RCC_ClockConfig+0x28c>)
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	250b      	movs	r5, #11
 800a266:	197c      	adds	r4, r7, r5
 800a268:	0018      	movs	r0, r3
 800a26a:	f7fc fa6d 	bl	8006748 <HAL_InitTick>
 800a26e:	0003      	movs	r3, r0
 800a270:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800a272:	197b      	adds	r3, r7, r5
 800a274:	781b      	ldrb	r3, [r3, #0]
 800a276:	2b00      	cmp	r3, #0
 800a278:	d002      	beq.n	800a280 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 800a27a:	197b      	adds	r3, r7, r5
 800a27c:	781b      	ldrb	r3, [r3, #0]
 800a27e:	e000      	b.n	800a282 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 800a280:	2300      	movs	r3, #0
}
 800a282:	0018      	movs	r0, r3
 800a284:	46bd      	mov	sp, r7
 800a286:	b004      	add	sp, #16
 800a288:	bdb0      	pop	{r4, r5, r7, pc}
 800a28a:	46c0      	nop			@ (mov r8, r8)
 800a28c:	40022000 	.word	0x40022000
 800a290:	00001388 	.word	0x00001388
 800a294:	40021000 	.word	0x40021000
 800a298:	fffff8ff 	.word	0xfffff8ff
 800a29c:	ffffc7ff 	.word	0xffffc7ff
 800a2a0:	0800fb7c 	.word	0x0800fb7c
 800a2a4:	20000024 	.word	0x20000024
 800a2a8:	20000038 	.word	0x20000038

0800a2ac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a2ac:	b5b0      	push	{r4, r5, r7, lr}
 800a2ae:	b08e      	sub	sp, #56	@ 0x38
 800a2b0:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800a2b2:	4b4c      	ldr	r3, [pc, #304]	@ (800a3e4 <HAL_RCC_GetSysClockFreq+0x138>)
 800a2b4:	68db      	ldr	r3, [r3, #12]
 800a2b6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800a2b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a2ba:	230c      	movs	r3, #12
 800a2bc:	4013      	ands	r3, r2
 800a2be:	2b0c      	cmp	r3, #12
 800a2c0:	d014      	beq.n	800a2ec <HAL_RCC_GetSysClockFreq+0x40>
 800a2c2:	d900      	bls.n	800a2c6 <HAL_RCC_GetSysClockFreq+0x1a>
 800a2c4:	e07b      	b.n	800a3be <HAL_RCC_GetSysClockFreq+0x112>
 800a2c6:	2b04      	cmp	r3, #4
 800a2c8:	d002      	beq.n	800a2d0 <HAL_RCC_GetSysClockFreq+0x24>
 800a2ca:	2b08      	cmp	r3, #8
 800a2cc:	d00b      	beq.n	800a2e6 <HAL_RCC_GetSysClockFreq+0x3a>
 800a2ce:	e076      	b.n	800a3be <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800a2d0:	4b44      	ldr	r3, [pc, #272]	@ (800a3e4 <HAL_RCC_GetSysClockFreq+0x138>)
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	2210      	movs	r2, #16
 800a2d6:	4013      	ands	r3, r2
 800a2d8:	d002      	beq.n	800a2e0 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800a2da:	4b43      	ldr	r3, [pc, #268]	@ (800a3e8 <HAL_RCC_GetSysClockFreq+0x13c>)
 800a2dc:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800a2de:	e07c      	b.n	800a3da <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 800a2e0:	4b42      	ldr	r3, [pc, #264]	@ (800a3ec <HAL_RCC_GetSysClockFreq+0x140>)
 800a2e2:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800a2e4:	e079      	b.n	800a3da <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800a2e6:	4b42      	ldr	r3, [pc, #264]	@ (800a3f0 <HAL_RCC_GetSysClockFreq+0x144>)
 800a2e8:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800a2ea:	e076      	b.n	800a3da <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800a2ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2ee:	0c9a      	lsrs	r2, r3, #18
 800a2f0:	230f      	movs	r3, #15
 800a2f2:	401a      	ands	r2, r3
 800a2f4:	4b3f      	ldr	r3, [pc, #252]	@ (800a3f4 <HAL_RCC_GetSysClockFreq+0x148>)
 800a2f6:	5c9b      	ldrb	r3, [r3, r2]
 800a2f8:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800a2fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2fc:	0d9a      	lsrs	r2, r3, #22
 800a2fe:	2303      	movs	r3, #3
 800a300:	4013      	ands	r3, r2
 800a302:	3301      	adds	r3, #1
 800a304:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a306:	4b37      	ldr	r3, [pc, #220]	@ (800a3e4 <HAL_RCC_GetSysClockFreq+0x138>)
 800a308:	68da      	ldr	r2, [r3, #12]
 800a30a:	2380      	movs	r3, #128	@ 0x80
 800a30c:	025b      	lsls	r3, r3, #9
 800a30e:	4013      	ands	r3, r2
 800a310:	d01a      	beq.n	800a348 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800a312:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a314:	61bb      	str	r3, [r7, #24]
 800a316:	2300      	movs	r3, #0
 800a318:	61fb      	str	r3, [r7, #28]
 800a31a:	4a35      	ldr	r2, [pc, #212]	@ (800a3f0 <HAL_RCC_GetSysClockFreq+0x144>)
 800a31c:	2300      	movs	r3, #0
 800a31e:	69b8      	ldr	r0, [r7, #24]
 800a320:	69f9      	ldr	r1, [r7, #28]
 800a322:	f7f6 f91b 	bl	800055c <__aeabi_lmul>
 800a326:	0002      	movs	r2, r0
 800a328:	000b      	movs	r3, r1
 800a32a:	0010      	movs	r0, r2
 800a32c:	0019      	movs	r1, r3
 800a32e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a330:	613b      	str	r3, [r7, #16]
 800a332:	2300      	movs	r3, #0
 800a334:	617b      	str	r3, [r7, #20]
 800a336:	693a      	ldr	r2, [r7, #16]
 800a338:	697b      	ldr	r3, [r7, #20]
 800a33a:	f7f6 f8ef 	bl	800051c <__aeabi_uldivmod>
 800a33e:	0002      	movs	r2, r0
 800a340:	000b      	movs	r3, r1
 800a342:	0013      	movs	r3, r2
 800a344:	637b      	str	r3, [r7, #52]	@ 0x34
 800a346:	e037      	b.n	800a3b8 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800a348:	4b26      	ldr	r3, [pc, #152]	@ (800a3e4 <HAL_RCC_GetSysClockFreq+0x138>)
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	2210      	movs	r2, #16
 800a34e:	4013      	ands	r3, r2
 800a350:	d01a      	beq.n	800a388 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800a352:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a354:	60bb      	str	r3, [r7, #8]
 800a356:	2300      	movs	r3, #0
 800a358:	60fb      	str	r3, [r7, #12]
 800a35a:	4a23      	ldr	r2, [pc, #140]	@ (800a3e8 <HAL_RCC_GetSysClockFreq+0x13c>)
 800a35c:	2300      	movs	r3, #0
 800a35e:	68b8      	ldr	r0, [r7, #8]
 800a360:	68f9      	ldr	r1, [r7, #12]
 800a362:	f7f6 f8fb 	bl	800055c <__aeabi_lmul>
 800a366:	0002      	movs	r2, r0
 800a368:	000b      	movs	r3, r1
 800a36a:	0010      	movs	r0, r2
 800a36c:	0019      	movs	r1, r3
 800a36e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a370:	603b      	str	r3, [r7, #0]
 800a372:	2300      	movs	r3, #0
 800a374:	607b      	str	r3, [r7, #4]
 800a376:	683a      	ldr	r2, [r7, #0]
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	f7f6 f8cf 	bl	800051c <__aeabi_uldivmod>
 800a37e:	0002      	movs	r2, r0
 800a380:	000b      	movs	r3, r1
 800a382:	0013      	movs	r3, r2
 800a384:	637b      	str	r3, [r7, #52]	@ 0x34
 800a386:	e017      	b.n	800a3b8 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800a388:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a38a:	0018      	movs	r0, r3
 800a38c:	2300      	movs	r3, #0
 800a38e:	0019      	movs	r1, r3
 800a390:	4a16      	ldr	r2, [pc, #88]	@ (800a3ec <HAL_RCC_GetSysClockFreq+0x140>)
 800a392:	2300      	movs	r3, #0
 800a394:	f7f6 f8e2 	bl	800055c <__aeabi_lmul>
 800a398:	0002      	movs	r2, r0
 800a39a:	000b      	movs	r3, r1
 800a39c:	0010      	movs	r0, r2
 800a39e:	0019      	movs	r1, r3
 800a3a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3a2:	001c      	movs	r4, r3
 800a3a4:	2300      	movs	r3, #0
 800a3a6:	001d      	movs	r5, r3
 800a3a8:	0022      	movs	r2, r4
 800a3aa:	002b      	movs	r3, r5
 800a3ac:	f7f6 f8b6 	bl	800051c <__aeabi_uldivmod>
 800a3b0:	0002      	movs	r2, r0
 800a3b2:	000b      	movs	r3, r1
 800a3b4:	0013      	movs	r3, r2
 800a3b6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 800a3b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3ba:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800a3bc:	e00d      	b.n	800a3da <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800a3be:	4b09      	ldr	r3, [pc, #36]	@ (800a3e4 <HAL_RCC_GetSysClockFreq+0x138>)
 800a3c0:	685b      	ldr	r3, [r3, #4]
 800a3c2:	0b5b      	lsrs	r3, r3, #13
 800a3c4:	2207      	movs	r2, #7
 800a3c6:	4013      	ands	r3, r2
 800a3c8:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800a3ca:	6a3b      	ldr	r3, [r7, #32]
 800a3cc:	3301      	adds	r3, #1
 800a3ce:	2280      	movs	r2, #128	@ 0x80
 800a3d0:	0212      	lsls	r2, r2, #8
 800a3d2:	409a      	lsls	r2, r3
 800a3d4:	0013      	movs	r3, r2
 800a3d6:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800a3d8:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 800a3da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 800a3dc:	0018      	movs	r0, r3
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	b00e      	add	sp, #56	@ 0x38
 800a3e2:	bdb0      	pop	{r4, r5, r7, pc}
 800a3e4:	40021000 	.word	0x40021000
 800a3e8:	003d0900 	.word	0x003d0900
 800a3ec:	00f42400 	.word	0x00f42400
 800a3f0:	007a1200 	.word	0x007a1200
 800a3f4:	0800fb94 	.word	0x0800fb94

0800a3f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a3f8:	b580      	push	{r7, lr}
 800a3fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a3fc:	4b02      	ldr	r3, [pc, #8]	@ (800a408 <HAL_RCC_GetHCLKFreq+0x10>)
 800a3fe:	681b      	ldr	r3, [r3, #0]
}
 800a400:	0018      	movs	r0, r3
 800a402:	46bd      	mov	sp, r7
 800a404:	bd80      	pop	{r7, pc}
 800a406:	46c0      	nop			@ (mov r8, r8)
 800a408:	20000024 	.word	0x20000024

0800a40c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a40c:	b580      	push	{r7, lr}
 800a40e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800a410:	f7ff fff2 	bl	800a3f8 <HAL_RCC_GetHCLKFreq>
 800a414:	0001      	movs	r1, r0
 800a416:	4b06      	ldr	r3, [pc, #24]	@ (800a430 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a418:	68db      	ldr	r3, [r3, #12]
 800a41a:	0a1b      	lsrs	r3, r3, #8
 800a41c:	2207      	movs	r2, #7
 800a41e:	4013      	ands	r3, r2
 800a420:	4a04      	ldr	r2, [pc, #16]	@ (800a434 <HAL_RCC_GetPCLK1Freq+0x28>)
 800a422:	5cd3      	ldrb	r3, [r2, r3]
 800a424:	40d9      	lsrs	r1, r3
 800a426:	000b      	movs	r3, r1
}
 800a428:	0018      	movs	r0, r3
 800a42a:	46bd      	mov	sp, r7
 800a42c:	bd80      	pop	{r7, pc}
 800a42e:	46c0      	nop			@ (mov r8, r8)
 800a430:	40021000 	.word	0x40021000
 800a434:	0800fb8c 	.word	0x0800fb8c

0800a438 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a438:	b580      	push	{r7, lr}
 800a43a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800a43c:	f7ff ffdc 	bl	800a3f8 <HAL_RCC_GetHCLKFreq>
 800a440:	0001      	movs	r1, r0
 800a442:	4b06      	ldr	r3, [pc, #24]	@ (800a45c <HAL_RCC_GetPCLK2Freq+0x24>)
 800a444:	68db      	ldr	r3, [r3, #12]
 800a446:	0adb      	lsrs	r3, r3, #11
 800a448:	2207      	movs	r2, #7
 800a44a:	4013      	ands	r3, r2
 800a44c:	4a04      	ldr	r2, [pc, #16]	@ (800a460 <HAL_RCC_GetPCLK2Freq+0x28>)
 800a44e:	5cd3      	ldrb	r3, [r2, r3]
 800a450:	40d9      	lsrs	r1, r3
 800a452:	000b      	movs	r3, r1
}
 800a454:	0018      	movs	r0, r3
 800a456:	46bd      	mov	sp, r7
 800a458:	bd80      	pop	{r7, pc}
 800a45a:	46c0      	nop			@ (mov r8, r8)
 800a45c:	40021000 	.word	0x40021000
 800a460:	0800fb8c 	.word	0x0800fb8c

0800a464 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a464:	b580      	push	{r7, lr}
 800a466:	b086      	sub	sp, #24
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 800a46c:	2017      	movs	r0, #23
 800a46e:	183b      	adds	r3, r7, r0
 800a470:	2200      	movs	r2, #0
 800a472:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	2220      	movs	r2, #32
 800a47a:	4013      	ands	r3, r2
 800a47c:	d100      	bne.n	800a480 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 800a47e:	e0c7      	b.n	800a610 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a480:	4b9b      	ldr	r3, [pc, #620]	@ (800a6f0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800a482:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a484:	2380      	movs	r3, #128	@ 0x80
 800a486:	055b      	lsls	r3, r3, #21
 800a488:	4013      	ands	r3, r2
 800a48a:	d109      	bne.n	800a4a0 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a48c:	4b98      	ldr	r3, [pc, #608]	@ (800a6f0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800a48e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a490:	4b97      	ldr	r3, [pc, #604]	@ (800a6f0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800a492:	2180      	movs	r1, #128	@ 0x80
 800a494:	0549      	lsls	r1, r1, #21
 800a496:	430a      	orrs	r2, r1
 800a498:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 800a49a:	183b      	adds	r3, r7, r0
 800a49c:	2201      	movs	r2, #1
 800a49e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a4a0:	4b94      	ldr	r3, [pc, #592]	@ (800a6f4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800a4a2:	681a      	ldr	r2, [r3, #0]
 800a4a4:	2380      	movs	r3, #128	@ 0x80
 800a4a6:	005b      	lsls	r3, r3, #1
 800a4a8:	4013      	ands	r3, r2
 800a4aa:	d11a      	bne.n	800a4e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a4ac:	4b91      	ldr	r3, [pc, #580]	@ (800a6f4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800a4ae:	681a      	ldr	r2, [r3, #0]
 800a4b0:	4b90      	ldr	r3, [pc, #576]	@ (800a6f4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800a4b2:	2180      	movs	r1, #128	@ 0x80
 800a4b4:	0049      	lsls	r1, r1, #1
 800a4b6:	430a      	orrs	r2, r1
 800a4b8:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a4ba:	f7fc f98b 	bl	80067d4 <HAL_GetTick>
 800a4be:	0003      	movs	r3, r0
 800a4c0:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a4c2:	e008      	b.n	800a4d6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a4c4:	f7fc f986 	bl	80067d4 <HAL_GetTick>
 800a4c8:	0002      	movs	r2, r0
 800a4ca:	693b      	ldr	r3, [r7, #16]
 800a4cc:	1ad3      	subs	r3, r2, r3
 800a4ce:	2b64      	cmp	r3, #100	@ 0x64
 800a4d0:	d901      	bls.n	800a4d6 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 800a4d2:	2303      	movs	r3, #3
 800a4d4:	e107      	b.n	800a6e6 <HAL_RCCEx_PeriphCLKConfig+0x282>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a4d6:	4b87      	ldr	r3, [pc, #540]	@ (800a6f4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800a4d8:	681a      	ldr	r2, [r3, #0]
 800a4da:	2380      	movs	r3, #128	@ 0x80
 800a4dc:	005b      	lsls	r3, r3, #1
 800a4de:	4013      	ands	r3, r2
 800a4e0:	d0f0      	beq.n	800a4c4 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800a4e2:	4b83      	ldr	r3, [pc, #524]	@ (800a6f0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800a4e4:	681a      	ldr	r2, [r3, #0]
 800a4e6:	23c0      	movs	r3, #192	@ 0xc0
 800a4e8:	039b      	lsls	r3, r3, #14
 800a4ea:	4013      	ands	r3, r2
 800a4ec:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	685a      	ldr	r2, [r3, #4]
 800a4f2:	23c0      	movs	r3, #192	@ 0xc0
 800a4f4:	039b      	lsls	r3, r3, #14
 800a4f6:	4013      	ands	r3, r2
 800a4f8:	68fa      	ldr	r2, [r7, #12]
 800a4fa:	429a      	cmp	r2, r3
 800a4fc:	d013      	beq.n	800a526 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	685a      	ldr	r2, [r3, #4]
 800a502:	23c0      	movs	r3, #192	@ 0xc0
 800a504:	029b      	lsls	r3, r3, #10
 800a506:	401a      	ands	r2, r3
 800a508:	23c0      	movs	r3, #192	@ 0xc0
 800a50a:	029b      	lsls	r3, r3, #10
 800a50c:	429a      	cmp	r2, r3
 800a50e:	d10a      	bne.n	800a526 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a510:	4b77      	ldr	r3, [pc, #476]	@ (800a6f0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800a512:	681a      	ldr	r2, [r3, #0]
 800a514:	2380      	movs	r3, #128	@ 0x80
 800a516:	029b      	lsls	r3, r3, #10
 800a518:	401a      	ands	r2, r3
 800a51a:	2380      	movs	r3, #128	@ 0x80
 800a51c:	029b      	lsls	r3, r3, #10
 800a51e:	429a      	cmp	r2, r3
 800a520:	d101      	bne.n	800a526 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 800a522:	2301      	movs	r3, #1
 800a524:	e0df      	b.n	800a6e6 <HAL_RCCEx_PeriphCLKConfig+0x282>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800a526:	4b72      	ldr	r3, [pc, #456]	@ (800a6f0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800a528:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a52a:	23c0      	movs	r3, #192	@ 0xc0
 800a52c:	029b      	lsls	r3, r3, #10
 800a52e:	4013      	ands	r3, r2
 800a530:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	2b00      	cmp	r3, #0
 800a536:	d03b      	beq.n	800a5b0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	685a      	ldr	r2, [r3, #4]
 800a53c:	23c0      	movs	r3, #192	@ 0xc0
 800a53e:	029b      	lsls	r3, r3, #10
 800a540:	4013      	ands	r3, r2
 800a542:	68fa      	ldr	r2, [r7, #12]
 800a544:	429a      	cmp	r2, r3
 800a546:	d033      	beq.n	800a5b0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	2220      	movs	r2, #32
 800a54e:	4013      	ands	r3, r2
 800a550:	d02e      	beq.n	800a5b0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800a552:	4b67      	ldr	r3, [pc, #412]	@ (800a6f0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800a554:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a556:	4a68      	ldr	r2, [pc, #416]	@ (800a6f8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800a558:	4013      	ands	r3, r2
 800a55a:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800a55c:	4b64      	ldr	r3, [pc, #400]	@ (800a6f0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800a55e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a560:	4b63      	ldr	r3, [pc, #396]	@ (800a6f0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800a562:	2180      	movs	r1, #128	@ 0x80
 800a564:	0309      	lsls	r1, r1, #12
 800a566:	430a      	orrs	r2, r1
 800a568:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800a56a:	4b61      	ldr	r3, [pc, #388]	@ (800a6f0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800a56c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a56e:	4b60      	ldr	r3, [pc, #384]	@ (800a6f0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800a570:	4962      	ldr	r1, [pc, #392]	@ (800a6fc <HAL_RCCEx_PeriphCLKConfig+0x298>)
 800a572:	400a      	ands	r2, r1
 800a574:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 800a576:	4b5e      	ldr	r3, [pc, #376]	@ (800a6f0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800a578:	68fa      	ldr	r2, [r7, #12]
 800a57a:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800a57c:	68fa      	ldr	r2, [r7, #12]
 800a57e:	2380      	movs	r3, #128	@ 0x80
 800a580:	005b      	lsls	r3, r3, #1
 800a582:	4013      	ands	r3, r2
 800a584:	d014      	beq.n	800a5b0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a586:	f7fc f925 	bl	80067d4 <HAL_GetTick>
 800a58a:	0003      	movs	r3, r0
 800a58c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a58e:	e009      	b.n	800a5a4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a590:	f7fc f920 	bl	80067d4 <HAL_GetTick>
 800a594:	0002      	movs	r2, r0
 800a596:	693b      	ldr	r3, [r7, #16]
 800a598:	1ad3      	subs	r3, r2, r3
 800a59a:	4a59      	ldr	r2, [pc, #356]	@ (800a700 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800a59c:	4293      	cmp	r3, r2
 800a59e:	d901      	bls.n	800a5a4 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 800a5a0:	2303      	movs	r3, #3
 800a5a2:	e0a0      	b.n	800a6e6 <HAL_RCCEx_PeriphCLKConfig+0x282>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a5a4:	4b52      	ldr	r3, [pc, #328]	@ (800a6f0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800a5a6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a5a8:	2380      	movs	r3, #128	@ 0x80
 800a5aa:	009b      	lsls	r3, r3, #2
 800a5ac:	4013      	ands	r3, r2
 800a5ae:	d0ef      	beq.n	800a590 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	2220      	movs	r2, #32
 800a5b6:	4013      	ands	r3, r2
 800a5b8:	d01f      	beq.n	800a5fa <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	685a      	ldr	r2, [r3, #4]
 800a5be:	23c0      	movs	r3, #192	@ 0xc0
 800a5c0:	029b      	lsls	r3, r3, #10
 800a5c2:	401a      	ands	r2, r3
 800a5c4:	23c0      	movs	r3, #192	@ 0xc0
 800a5c6:	029b      	lsls	r3, r3, #10
 800a5c8:	429a      	cmp	r2, r3
 800a5ca:	d10c      	bne.n	800a5e6 <HAL_RCCEx_PeriphCLKConfig+0x182>
 800a5cc:	4b48      	ldr	r3, [pc, #288]	@ (800a6f0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	4a4c      	ldr	r2, [pc, #304]	@ (800a704 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 800a5d2:	4013      	ands	r3, r2
 800a5d4:	0019      	movs	r1, r3
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	685a      	ldr	r2, [r3, #4]
 800a5da:	23c0      	movs	r3, #192	@ 0xc0
 800a5dc:	039b      	lsls	r3, r3, #14
 800a5de:	401a      	ands	r2, r3
 800a5e0:	4b43      	ldr	r3, [pc, #268]	@ (800a6f0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800a5e2:	430a      	orrs	r2, r1
 800a5e4:	601a      	str	r2, [r3, #0]
 800a5e6:	4b42      	ldr	r3, [pc, #264]	@ (800a6f0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800a5e8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	685a      	ldr	r2, [r3, #4]
 800a5ee:	23c0      	movs	r3, #192	@ 0xc0
 800a5f0:	029b      	lsls	r3, r3, #10
 800a5f2:	401a      	ands	r2, r3
 800a5f4:	4b3e      	ldr	r3, [pc, #248]	@ (800a6f0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800a5f6:	430a      	orrs	r2, r1
 800a5f8:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800a5fa:	2317      	movs	r3, #23
 800a5fc:	18fb      	adds	r3, r7, r3
 800a5fe:	781b      	ldrb	r3, [r3, #0]
 800a600:	2b01      	cmp	r3, #1
 800a602:	d105      	bne.n	800a610 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a604:	4b3a      	ldr	r3, [pc, #232]	@ (800a6f0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800a606:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a608:	4b39      	ldr	r3, [pc, #228]	@ (800a6f0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800a60a:	493f      	ldr	r1, [pc, #252]	@ (800a708 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 800a60c:	400a      	ands	r2, r1
 800a60e:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	2201      	movs	r2, #1
 800a616:	4013      	ands	r3, r2
 800a618:	d009      	beq.n	800a62e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800a61a:	4b35      	ldr	r3, [pc, #212]	@ (800a6f0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800a61c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a61e:	2203      	movs	r2, #3
 800a620:	4393      	bics	r3, r2
 800a622:	0019      	movs	r1, r3
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	689a      	ldr	r2, [r3, #8]
 800a628:	4b31      	ldr	r3, [pc, #196]	@ (800a6f0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800a62a:	430a      	orrs	r2, r1
 800a62c:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	2202      	movs	r2, #2
 800a634:	4013      	ands	r3, r2
 800a636:	d009      	beq.n	800a64c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800a638:	4b2d      	ldr	r3, [pc, #180]	@ (800a6f0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800a63a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a63c:	220c      	movs	r2, #12
 800a63e:	4393      	bics	r3, r2
 800a640:	0019      	movs	r1, r3
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	68da      	ldr	r2, [r3, #12]
 800a646:	4b2a      	ldr	r3, [pc, #168]	@ (800a6f0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800a648:	430a      	orrs	r2, r1
 800a64a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	2204      	movs	r2, #4
 800a652:	4013      	ands	r3, r2
 800a654:	d009      	beq.n	800a66a <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a656:	4b26      	ldr	r3, [pc, #152]	@ (800a6f0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800a658:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a65a:	4a2c      	ldr	r2, [pc, #176]	@ (800a70c <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 800a65c:	4013      	ands	r3, r2
 800a65e:	0019      	movs	r1, r3
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	691a      	ldr	r2, [r3, #16]
 800a664:	4b22      	ldr	r3, [pc, #136]	@ (800a6f0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800a666:	430a      	orrs	r2, r1
 800a668:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	2208      	movs	r2, #8
 800a670:	4013      	ands	r3, r2
 800a672:	d009      	beq.n	800a688 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800a674:	4b1e      	ldr	r3, [pc, #120]	@ (800a6f0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800a676:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a678:	4a25      	ldr	r2, [pc, #148]	@ (800a710 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 800a67a:	4013      	ands	r3, r2
 800a67c:	0019      	movs	r1, r3
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	695a      	ldr	r2, [r3, #20]
 800a682:	4b1b      	ldr	r3, [pc, #108]	@ (800a6f0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800a684:	430a      	orrs	r2, r1
 800a686:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	681a      	ldr	r2, [r3, #0]
 800a68c:	2380      	movs	r3, #128	@ 0x80
 800a68e:	005b      	lsls	r3, r3, #1
 800a690:	4013      	ands	r3, r2
 800a692:	d009      	beq.n	800a6a8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800a694:	4b16      	ldr	r3, [pc, #88]	@ (800a6f0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800a696:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a698:	4a17      	ldr	r2, [pc, #92]	@ (800a6f8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800a69a:	4013      	ands	r3, r2
 800a69c:	0019      	movs	r1, r3
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	699a      	ldr	r2, [r3, #24]
 800a6a2:	4b13      	ldr	r3, [pc, #76]	@ (800a6f0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800a6a4:	430a      	orrs	r2, r1
 800a6a6:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	2240      	movs	r2, #64	@ 0x40
 800a6ae:	4013      	ands	r3, r2
 800a6b0:	d009      	beq.n	800a6c6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a6b2:	4b0f      	ldr	r3, [pc, #60]	@ (800a6f0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800a6b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a6b6:	4a17      	ldr	r2, [pc, #92]	@ (800a714 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 800a6b8:	4013      	ands	r3, r2
 800a6ba:	0019      	movs	r1, r3
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	6a1a      	ldr	r2, [r3, #32]
 800a6c0:	4b0b      	ldr	r3, [pc, #44]	@ (800a6f0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800a6c2:	430a      	orrs	r2, r1
 800a6c4:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	2280      	movs	r2, #128	@ 0x80
 800a6cc:	4013      	ands	r3, r2
 800a6ce:	d009      	beq.n	800a6e4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800a6d0:	4b07      	ldr	r3, [pc, #28]	@ (800a6f0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800a6d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a6d4:	4a10      	ldr	r2, [pc, #64]	@ (800a718 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 800a6d6:	4013      	ands	r3, r2
 800a6d8:	0019      	movs	r1, r3
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	69da      	ldr	r2, [r3, #28]
 800a6de:	4b04      	ldr	r3, [pc, #16]	@ (800a6f0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800a6e0:	430a      	orrs	r2, r1
 800a6e2:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800a6e4:	2300      	movs	r3, #0
}
 800a6e6:	0018      	movs	r0, r3
 800a6e8:	46bd      	mov	sp, r7
 800a6ea:	b006      	add	sp, #24
 800a6ec:	bd80      	pop	{r7, pc}
 800a6ee:	46c0      	nop			@ (mov r8, r8)
 800a6f0:	40021000 	.word	0x40021000
 800a6f4:	40007000 	.word	0x40007000
 800a6f8:	fffcffff 	.word	0xfffcffff
 800a6fc:	fff7ffff 	.word	0xfff7ffff
 800a700:	00001388 	.word	0x00001388
 800a704:	ffcfffff 	.word	0xffcfffff
 800a708:	efffffff 	.word	0xefffffff
 800a70c:	fffff3ff 	.word	0xfffff3ff
 800a710:	ffffcfff 	.word	0xffffcfff
 800a714:	fbffffff 	.word	0xfbffffff
 800a718:	fff3ffff 	.word	0xfff3ffff

0800a71c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800a71c:	b5b0      	push	{r4, r5, r7, lr}
 800a71e:	b084      	sub	sp, #16
 800a720:	af00      	add	r7, sp, #0
 800a722:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800a724:	230f      	movs	r3, #15
 800a726:	18fb      	adds	r3, r7, r3
 800a728:	2201      	movs	r2, #1
 800a72a:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d101      	bne.n	800a736 <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 800a732:	2301      	movs	r3, #1
 800a734:	e088      	b.n	800a848 <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	2221      	movs	r2, #33	@ 0x21
 800a73a:	5c9b      	ldrb	r3, [r3, r2]
 800a73c:	b2db      	uxtb	r3, r3
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d107      	bne.n	800a752 <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	2220      	movs	r2, #32
 800a746:	2100      	movs	r1, #0
 800a748:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	0018      	movs	r0, r3
 800a74e:	f7f9 ff2f 	bl	80045b0 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	2221      	movs	r2, #33	@ 0x21
 800a756:	2102      	movs	r1, #2
 800a758:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	68db      	ldr	r3, [r3, #12]
 800a760:	2210      	movs	r2, #16
 800a762:	4013      	ands	r3, r2
 800a764:	2b10      	cmp	r3, #16
 800a766:	d05f      	beq.n	800a828 <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	22ca      	movs	r2, #202	@ 0xca
 800a76e:	625a      	str	r2, [r3, #36]	@ 0x24
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	2253      	movs	r2, #83	@ 0x53
 800a776:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800a778:	250f      	movs	r5, #15
 800a77a:	197c      	adds	r4, r7, r5
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	0018      	movs	r0, r3
 800a780:	f000 f890 	bl	800a8a4 <RTC_EnterInitMode>
 800a784:	0003      	movs	r3, r0
 800a786:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 800a788:	0028      	movs	r0, r5
 800a78a:	183b      	adds	r3, r7, r0
 800a78c:	781b      	ldrb	r3, [r3, #0]
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d12c      	bne.n	800a7ec <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	689a      	ldr	r2, [r3, #8]
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	492c      	ldr	r1, [pc, #176]	@ (800a850 <HAL_RTC_Init+0x134>)
 800a79e:	400a      	ands	r2, r1
 800a7a0:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	6899      	ldr	r1, [r3, #8]
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	685a      	ldr	r2, [r3, #4]
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	691b      	ldr	r3, [r3, #16]
 800a7b0:	431a      	orrs	r2, r3
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	699b      	ldr	r3, [r3, #24]
 800a7b6:	431a      	orrs	r2, r3
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	430a      	orrs	r2, r1
 800a7be:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	687a      	ldr	r2, [r7, #4]
 800a7c6:	68d2      	ldr	r2, [r2, #12]
 800a7c8:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	6919      	ldr	r1, [r3, #16]
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	689b      	ldr	r3, [r3, #8]
 800a7d4:	041a      	lsls	r2, r3, #16
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	430a      	orrs	r2, r1
 800a7dc:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800a7de:	183c      	adds	r4, r7, r0
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	0018      	movs	r0, r3
 800a7e4:	f000 f8a2 	bl	800a92c <RTC_ExitInitMode>
 800a7e8:	0003      	movs	r3, r0
 800a7ea:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 800a7ec:	230f      	movs	r3, #15
 800a7ee:	18fb      	adds	r3, r7, r3
 800a7f0:	781b      	ldrb	r3, [r3, #0]
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d113      	bne.n	800a81e <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	2103      	movs	r1, #3
 800a802:	438a      	bics	r2, r1
 800a804:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	69da      	ldr	r2, [r3, #28]
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	695b      	ldr	r3, [r3, #20]
 800a814:	431a      	orrs	r2, r3
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	430a      	orrs	r2, r1
 800a81c:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	22ff      	movs	r2, #255	@ 0xff
 800a824:	625a      	str	r2, [r3, #36]	@ 0x24
 800a826:	e003      	b.n	800a830 <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 800a828:	230f      	movs	r3, #15
 800a82a:	18fb      	adds	r3, r7, r3
 800a82c:	2200      	movs	r2, #0
 800a82e:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 800a830:	230f      	movs	r3, #15
 800a832:	18fb      	adds	r3, r7, r3
 800a834:	781b      	ldrb	r3, [r3, #0]
 800a836:	2b00      	cmp	r3, #0
 800a838:	d103      	bne.n	800a842 <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	2221      	movs	r2, #33	@ 0x21
 800a83e:	2101      	movs	r1, #1
 800a840:	5499      	strb	r1, [r3, r2]
  }

  return status;
 800a842:	230f      	movs	r3, #15
 800a844:	18fb      	adds	r3, r7, r3
 800a846:	781b      	ldrb	r3, [r3, #0]
}
 800a848:	0018      	movs	r0, r3
 800a84a:	46bd      	mov	sp, r7
 800a84c:	b004      	add	sp, #16
 800a84e:	bdb0      	pop	{r4, r5, r7, pc}
 800a850:	ff8fffbf 	.word	0xff8fffbf

0800a854 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800a854:	b580      	push	{r7, lr}
 800a856:	b084      	sub	sp, #16
 800a858:	af00      	add	r7, sp, #0
 800a85a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a85c:	2300      	movs	r3, #0
 800a85e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	4a0e      	ldr	r2, [pc, #56]	@ (800a8a0 <HAL_RTC_WaitForSynchro+0x4c>)
 800a866:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a868:	f7fb ffb4 	bl	80067d4 <HAL_GetTick>
 800a86c:	0003      	movs	r3, r0
 800a86e:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800a870:	e00a      	b.n	800a888 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a872:	f7fb ffaf 	bl	80067d4 <HAL_GetTick>
 800a876:	0002      	movs	r2, r0
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	1ad2      	subs	r2, r2, r3
 800a87c:	23fa      	movs	r3, #250	@ 0xfa
 800a87e:	009b      	lsls	r3, r3, #2
 800a880:	429a      	cmp	r2, r3
 800a882:	d901      	bls.n	800a888 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800a884:	2303      	movs	r3, #3
 800a886:	e006      	b.n	800a896 <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	68db      	ldr	r3, [r3, #12]
 800a88e:	2220      	movs	r2, #32
 800a890:	4013      	ands	r3, r2
 800a892:	d0ee      	beq.n	800a872 <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 800a894:	2300      	movs	r3, #0
}
 800a896:	0018      	movs	r0, r3
 800a898:	46bd      	mov	sp, r7
 800a89a:	b004      	add	sp, #16
 800a89c:	bd80      	pop	{r7, pc}
 800a89e:	46c0      	nop			@ (mov r8, r8)
 800a8a0:	0001ff5f 	.word	0x0001ff5f

0800a8a4 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800a8a4:	b580      	push	{r7, lr}
 800a8a6:	b084      	sub	sp, #16
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a8ac:	2300      	movs	r3, #0
 800a8ae:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800a8b0:	230f      	movs	r3, #15
 800a8b2:	18fb      	adds	r3, r7, r3
 800a8b4:	2200      	movs	r2, #0
 800a8b6:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	68db      	ldr	r3, [r3, #12]
 800a8be:	2240      	movs	r2, #64	@ 0x40
 800a8c0:	4013      	ands	r3, r2
 800a8c2:	d12c      	bne.n	800a91e <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	68da      	ldr	r2, [r3, #12]
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	2180      	movs	r1, #128	@ 0x80
 800a8d0:	430a      	orrs	r2, r1
 800a8d2:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a8d4:	f7fb ff7e 	bl	80067d4 <HAL_GetTick>
 800a8d8:	0003      	movs	r3, r0
 800a8da:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800a8dc:	e014      	b.n	800a908 <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a8de:	f7fb ff79 	bl	80067d4 <HAL_GetTick>
 800a8e2:	0002      	movs	r2, r0
 800a8e4:	68bb      	ldr	r3, [r7, #8]
 800a8e6:	1ad2      	subs	r2, r2, r3
 800a8e8:	200f      	movs	r0, #15
 800a8ea:	183b      	adds	r3, r7, r0
 800a8ec:	1839      	adds	r1, r7, r0
 800a8ee:	7809      	ldrb	r1, [r1, #0]
 800a8f0:	7019      	strb	r1, [r3, #0]
 800a8f2:	23fa      	movs	r3, #250	@ 0xfa
 800a8f4:	009b      	lsls	r3, r3, #2
 800a8f6:	429a      	cmp	r2, r3
 800a8f8:	d906      	bls.n	800a908 <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	2221      	movs	r2, #33	@ 0x21
 800a8fe:	2104      	movs	r1, #4
 800a900:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 800a902:	183b      	adds	r3, r7, r0
 800a904:	2201      	movs	r2, #1
 800a906:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	68db      	ldr	r3, [r3, #12]
 800a90e:	2240      	movs	r2, #64	@ 0x40
 800a910:	4013      	ands	r3, r2
 800a912:	d104      	bne.n	800a91e <RTC_EnterInitMode+0x7a>
 800a914:	230f      	movs	r3, #15
 800a916:	18fb      	adds	r3, r7, r3
 800a918:	781b      	ldrb	r3, [r3, #0]
 800a91a:	2b01      	cmp	r3, #1
 800a91c:	d1df      	bne.n	800a8de <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 800a91e:	230f      	movs	r3, #15
 800a920:	18fb      	adds	r3, r7, r3
 800a922:	781b      	ldrb	r3, [r3, #0]
}
 800a924:	0018      	movs	r0, r3
 800a926:	46bd      	mov	sp, r7
 800a928:	b004      	add	sp, #16
 800a92a:	bd80      	pop	{r7, pc}

0800a92c <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800a92c:	b590      	push	{r4, r7, lr}
 800a92e:	b085      	sub	sp, #20
 800a930:	af00      	add	r7, sp, #0
 800a932:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a934:	240f      	movs	r4, #15
 800a936:	193b      	adds	r3, r7, r4
 800a938:	2200      	movs	r2, #0
 800a93a:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	68da      	ldr	r2, [r3, #12]
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	2180      	movs	r1, #128	@ 0x80
 800a948:	438a      	bics	r2, r1
 800a94a:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	689b      	ldr	r3, [r3, #8]
 800a952:	2220      	movs	r2, #32
 800a954:	4013      	ands	r3, r2
 800a956:	d10c      	bne.n	800a972 <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	0018      	movs	r0, r3
 800a95c:	f7ff ff7a 	bl	800a854 <HAL_RTC_WaitForSynchro>
 800a960:	1e03      	subs	r3, r0, #0
 800a962:	d006      	beq.n	800a972 <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	2221      	movs	r2, #33	@ 0x21
 800a968:	2104      	movs	r1, #4
 800a96a:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 800a96c:	193b      	adds	r3, r7, r4
 800a96e:	2201      	movs	r2, #1
 800a970:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 800a972:	230f      	movs	r3, #15
 800a974:	18fb      	adds	r3, r7, r3
 800a976:	781b      	ldrb	r3, [r3, #0]
}
 800a978:	0018      	movs	r0, r3
 800a97a:	46bd      	mov	sp, r7
 800a97c:	b005      	add	sp, #20
 800a97e:	bd90      	pop	{r4, r7, pc}

0800a980 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a980:	b580      	push	{r7, lr}
 800a982:	b082      	sub	sp, #8
 800a984:	af00      	add	r7, sp, #0
 800a986:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d101      	bne.n	800a992 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a98e:	2301      	movs	r3, #1
 800a990:	e053      	b.n	800aa3a <HAL_UART_Init+0xba>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a996:	2b00      	cmp	r3, #0
 800a998:	d116      	bne.n	800a9c8 <HAL_UART_Init+0x48>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	2278      	movs	r2, #120	@ 0x78
 800a99e:	2100      	movs	r1, #0
 800a9a0:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	0018      	movs	r0, r3
 800a9a6:	f000 fcff 	bl	800b3a8 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	22b0      	movs	r2, #176	@ 0xb0
 800a9ae:	589b      	ldr	r3, [r3, r2]
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d103      	bne.n	800a9bc <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	21b0      	movs	r1, #176	@ 0xb0
 800a9b8:	4a22      	ldr	r2, [pc, #136]	@ (800aa44 <HAL_UART_Init+0xc4>)
 800a9ba:	505a      	str	r2, [r3, r1]
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	22b0      	movs	r2, #176	@ 0xb0
 800a9c0:	589b      	ldr	r3, [r3, r2]
 800a9c2:	687a      	ldr	r2, [r7, #4]
 800a9c4:	0010      	movs	r0, r2
 800a9c6:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	2224      	movs	r2, #36	@ 0x24
 800a9cc:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	681a      	ldr	r2, [r3, #0]
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	2101      	movs	r1, #1
 800a9da:	438a      	bics	r2, r1
 800a9dc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	0018      	movs	r0, r3
 800a9e2:	f000 fd25 	bl	800b430 <UART_SetConfig>
 800a9e6:	0003      	movs	r3, r0
 800a9e8:	2b01      	cmp	r3, #1
 800a9ea:	d101      	bne.n	800a9f0 <HAL_UART_Init+0x70>
  {
    return HAL_ERROR;
 800a9ec:	2301      	movs	r3, #1
 800a9ee:	e024      	b.n	800aa3a <HAL_UART_Init+0xba>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d003      	beq.n	800aa00 <HAL_UART_Init+0x80>
  {
    UART_AdvFeatureConfig(huart);
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	0018      	movs	r0, r3
 800a9fc:	f000 ffb6 	bl	800b96c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	685a      	ldr	r2, [r3, #4]
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	490f      	ldr	r1, [pc, #60]	@ (800aa48 <HAL_UART_Init+0xc8>)
 800aa0c:	400a      	ands	r2, r1
 800aa0e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	689a      	ldr	r2, [r3, #8]
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	212a      	movs	r1, #42	@ 0x2a
 800aa1c:	438a      	bics	r2, r1
 800aa1e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	681a      	ldr	r2, [r3, #0]
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	2101      	movs	r1, #1
 800aa2c:	430a      	orrs	r2, r1
 800aa2e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	0018      	movs	r0, r3
 800aa34:	f001 f84e 	bl	800bad4 <UART_CheckIdleState>
 800aa38:	0003      	movs	r3, r0
}
 800aa3a:	0018      	movs	r0, r3
 800aa3c:	46bd      	mov	sp, r7
 800aa3e:	b002      	add	sp, #8
 800aa40:	bd80      	pop	{r7, pc}
 800aa42:	46c0      	nop			@ (mov r8, r8)
 800aa44:	08005ced 	.word	0x08005ced
 800aa48:	ffffb7ff 	.word	0xffffb7ff

0800aa4c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800aa4c:	b580      	push	{r7, lr}
 800aa4e:	b08a      	sub	sp, #40	@ 0x28
 800aa50:	af02      	add	r7, sp, #8
 800aa52:	60f8      	str	r0, [r7, #12]
 800aa54:	60b9      	str	r1, [r7, #8]
 800aa56:	603b      	str	r3, [r7, #0]
 800aa58:	1dbb      	adds	r3, r7, #6
 800aa5a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800aa60:	2b20      	cmp	r3, #32
 800aa62:	d000      	beq.n	800aa66 <HAL_UART_Transmit+0x1a>
 800aa64:	e08c      	b.n	800ab80 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 800aa66:	68bb      	ldr	r3, [r7, #8]
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d003      	beq.n	800aa74 <HAL_UART_Transmit+0x28>
 800aa6c:	1dbb      	adds	r3, r7, #6
 800aa6e:	881b      	ldrh	r3, [r3, #0]
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d101      	bne.n	800aa78 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800aa74:	2301      	movs	r3, #1
 800aa76:	e084      	b.n	800ab82 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	689a      	ldr	r2, [r3, #8]
 800aa7c:	2380      	movs	r3, #128	@ 0x80
 800aa7e:	015b      	lsls	r3, r3, #5
 800aa80:	429a      	cmp	r2, r3
 800aa82:	d109      	bne.n	800aa98 <HAL_UART_Transmit+0x4c>
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	691b      	ldr	r3, [r3, #16]
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d105      	bne.n	800aa98 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800aa8c:	68bb      	ldr	r3, [r7, #8]
 800aa8e:	2201      	movs	r2, #1
 800aa90:	4013      	ands	r3, r2
 800aa92:	d001      	beq.n	800aa98 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 800aa94:	2301      	movs	r3, #1
 800aa96:	e074      	b.n	800ab82 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	2284      	movs	r2, #132	@ 0x84
 800aa9c:	2100      	movs	r1, #0
 800aa9e:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	2221      	movs	r2, #33	@ 0x21
 800aaa4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800aaa6:	f7fb fe95 	bl	80067d4 <HAL_GetTick>
 800aaaa:	0003      	movs	r3, r0
 800aaac:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	1dba      	adds	r2, r7, #6
 800aab2:	2150      	movs	r1, #80	@ 0x50
 800aab4:	8812      	ldrh	r2, [r2, #0]
 800aab6:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	1dba      	adds	r2, r7, #6
 800aabc:	2152      	movs	r1, #82	@ 0x52
 800aabe:	8812      	ldrh	r2, [r2, #0]
 800aac0:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	689a      	ldr	r2, [r3, #8]
 800aac6:	2380      	movs	r3, #128	@ 0x80
 800aac8:	015b      	lsls	r3, r3, #5
 800aaca:	429a      	cmp	r2, r3
 800aacc:	d108      	bne.n	800aae0 <HAL_UART_Transmit+0x94>
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	691b      	ldr	r3, [r3, #16]
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d104      	bne.n	800aae0 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 800aad6:	2300      	movs	r3, #0
 800aad8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800aada:	68bb      	ldr	r3, [r7, #8]
 800aadc:	61bb      	str	r3, [r7, #24]
 800aade:	e003      	b.n	800aae8 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 800aae0:	68bb      	ldr	r3, [r7, #8]
 800aae2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800aae4:	2300      	movs	r3, #0
 800aae6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800aae8:	e02f      	b.n	800ab4a <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800aaea:	697a      	ldr	r2, [r7, #20]
 800aaec:	68f8      	ldr	r0, [r7, #12]
 800aaee:	683b      	ldr	r3, [r7, #0]
 800aaf0:	9300      	str	r3, [sp, #0]
 800aaf2:	0013      	movs	r3, r2
 800aaf4:	2200      	movs	r2, #0
 800aaf6:	2180      	movs	r1, #128	@ 0x80
 800aaf8:	f001 f894 	bl	800bc24 <UART_WaitOnFlagUntilTimeout>
 800aafc:	1e03      	subs	r3, r0, #0
 800aafe:	d004      	beq.n	800ab0a <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	2220      	movs	r2, #32
 800ab04:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800ab06:	2303      	movs	r3, #3
 800ab08:	e03b      	b.n	800ab82 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 800ab0a:	69fb      	ldr	r3, [r7, #28]
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d10b      	bne.n	800ab28 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ab10:	69bb      	ldr	r3, [r7, #24]
 800ab12:	881b      	ldrh	r3, [r3, #0]
 800ab14:	001a      	movs	r2, r3
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	05d2      	lsls	r2, r2, #23
 800ab1c:	0dd2      	lsrs	r2, r2, #23
 800ab1e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800ab20:	69bb      	ldr	r3, [r7, #24]
 800ab22:	3302      	adds	r3, #2
 800ab24:	61bb      	str	r3, [r7, #24]
 800ab26:	e007      	b.n	800ab38 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ab28:	69fb      	ldr	r3, [r7, #28]
 800ab2a:	781a      	ldrb	r2, [r3, #0]
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800ab32:	69fb      	ldr	r3, [r7, #28]
 800ab34:	3301      	adds	r3, #1
 800ab36:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	2252      	movs	r2, #82	@ 0x52
 800ab3c:	5a9b      	ldrh	r3, [r3, r2]
 800ab3e:	b29b      	uxth	r3, r3
 800ab40:	3b01      	subs	r3, #1
 800ab42:	b299      	uxth	r1, r3
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	2252      	movs	r2, #82	@ 0x52
 800ab48:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	2252      	movs	r2, #82	@ 0x52
 800ab4e:	5a9b      	ldrh	r3, [r3, r2]
 800ab50:	b29b      	uxth	r3, r3
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d1c9      	bne.n	800aaea <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ab56:	697a      	ldr	r2, [r7, #20]
 800ab58:	68f8      	ldr	r0, [r7, #12]
 800ab5a:	683b      	ldr	r3, [r7, #0]
 800ab5c:	9300      	str	r3, [sp, #0]
 800ab5e:	0013      	movs	r3, r2
 800ab60:	2200      	movs	r2, #0
 800ab62:	2140      	movs	r1, #64	@ 0x40
 800ab64:	f001 f85e 	bl	800bc24 <UART_WaitOnFlagUntilTimeout>
 800ab68:	1e03      	subs	r3, r0, #0
 800ab6a:	d004      	beq.n	800ab76 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	2220      	movs	r2, #32
 800ab70:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800ab72:	2303      	movs	r3, #3
 800ab74:	e005      	b.n	800ab82 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	2220      	movs	r2, #32
 800ab7a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800ab7c:	2300      	movs	r3, #0
 800ab7e:	e000      	b.n	800ab82 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 800ab80:	2302      	movs	r3, #2
  }
}
 800ab82:	0018      	movs	r0, r3
 800ab84:	46bd      	mov	sp, r7
 800ab86:	b008      	add	sp, #32
 800ab88:	bd80      	pop	{r7, pc}
	...

0800ab8c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800ab8c:	b580      	push	{r7, lr}
 800ab8e:	b088      	sub	sp, #32
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	60f8      	str	r0, [r7, #12]
 800ab94:	60b9      	str	r1, [r7, #8]
 800ab96:	1dbb      	adds	r3, r7, #6
 800ab98:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ab9e:	2b20      	cmp	r3, #32
 800aba0:	d000      	beq.n	800aba4 <HAL_UART_Transmit_DMA+0x18>
 800aba2:	e077      	b.n	800ac94 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800aba4:	68bb      	ldr	r3, [r7, #8]
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d003      	beq.n	800abb2 <HAL_UART_Transmit_DMA+0x26>
 800abaa:	1dbb      	adds	r3, r7, #6
 800abac:	881b      	ldrh	r3, [r3, #0]
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d101      	bne.n	800abb6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800abb2:	2301      	movs	r3, #1
 800abb4:	e06f      	b.n	800ac96 <HAL_UART_Transmit_DMA+0x10a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	689a      	ldr	r2, [r3, #8]
 800abba:	2380      	movs	r3, #128	@ 0x80
 800abbc:	015b      	lsls	r3, r3, #5
 800abbe:	429a      	cmp	r2, r3
 800abc0:	d109      	bne.n	800abd6 <HAL_UART_Transmit_DMA+0x4a>
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	691b      	ldr	r3, [r3, #16]
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d105      	bne.n	800abd6 <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800abca:	68bb      	ldr	r3, [r7, #8]
 800abcc:	2201      	movs	r2, #1
 800abce:	4013      	ands	r3, r2
 800abd0:	d001      	beq.n	800abd6 <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 800abd2:	2301      	movs	r3, #1
 800abd4:	e05f      	b.n	800ac96 <HAL_UART_Transmit_DMA+0x10a>
      }
    }

    huart->pTxBuffPtr  = pData;
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	68ba      	ldr	r2, [r7, #8]
 800abda:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	1dba      	adds	r2, r7, #6
 800abe0:	2150      	movs	r1, #80	@ 0x50
 800abe2:	8812      	ldrh	r2, [r2, #0]
 800abe4:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	1dba      	adds	r2, r7, #6
 800abea:	2152      	movs	r1, #82	@ 0x52
 800abec:	8812      	ldrh	r2, [r2, #0]
 800abee:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	2284      	movs	r2, #132	@ 0x84
 800abf4:	2100      	movs	r1, #0
 800abf6:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	2221      	movs	r2, #33	@ 0x21
 800abfc:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d027      	beq.n	800ac56 <HAL_UART_Transmit_DMA+0xca>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ac0a:	4a25      	ldr	r2, [pc, #148]	@ (800aca0 <HAL_UART_Transmit_DMA+0x114>)
 800ac0c:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ac12:	4a24      	ldr	r2, [pc, #144]	@ (800aca4 <HAL_UART_Transmit_DMA+0x118>)
 800ac14:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ac1a:	4a23      	ldr	r2, [pc, #140]	@ (800aca8 <HAL_UART_Transmit_DMA+0x11c>)
 800ac1c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ac22:	2200      	movs	r2, #0
 800ac24:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ac2e:	0019      	movs	r1, r3
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	3328      	adds	r3, #40	@ 0x28
 800ac36:	001a      	movs	r2, r3
 800ac38:	1dbb      	adds	r3, r7, #6
 800ac3a:	881b      	ldrh	r3, [r3, #0]
 800ac3c:	f7fb ff4e 	bl	8006adc <HAL_DMA_Start_IT>
 800ac40:	1e03      	subs	r3, r0, #0
 800ac42:	d008      	beq.n	800ac56 <HAL_UART_Transmit_DMA+0xca>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	2284      	movs	r2, #132	@ 0x84
 800ac48:	2110      	movs	r1, #16
 800ac4a:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	2220      	movs	r2, #32
 800ac50:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 800ac52:	2301      	movs	r3, #1
 800ac54:	e01f      	b.n	800ac96 <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	2240      	movs	r2, #64	@ 0x40
 800ac5c:	621a      	str	r2, [r3, #32]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ac5e:	f3ef 8310 	mrs	r3, PRIMASK
 800ac62:	613b      	str	r3, [r7, #16]
  return(result);
 800ac64:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ac66:	61fb      	str	r3, [r7, #28]
 800ac68:	2301      	movs	r3, #1
 800ac6a:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ac6c:	697b      	ldr	r3, [r7, #20]
 800ac6e:	f383 8810 	msr	PRIMASK, r3
}
 800ac72:	46c0      	nop			@ (mov r8, r8)
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	689a      	ldr	r2, [r3, #8]
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	2180      	movs	r1, #128	@ 0x80
 800ac80:	430a      	orrs	r2, r1
 800ac82:	609a      	str	r2, [r3, #8]
 800ac84:	69fb      	ldr	r3, [r7, #28]
 800ac86:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ac88:	69bb      	ldr	r3, [r7, #24]
 800ac8a:	f383 8810 	msr	PRIMASK, r3
}
 800ac8e:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 800ac90:	2300      	movs	r3, #0
 800ac92:	e000      	b.n	800ac96 <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800ac94:	2302      	movs	r3, #2
  }
}
 800ac96:	0018      	movs	r0, r3
 800ac98:	46bd      	mov	sp, r7
 800ac9a:	b008      	add	sp, #32
 800ac9c:	bd80      	pop	{r7, pc}
 800ac9e:	46c0      	nop			@ (mov r8, r8)
 800aca0:	0800bf49 	.word	0x0800bf49
 800aca4:	0800bfe5 	.word	0x0800bfe5
 800aca8:	0800c185 	.word	0x0800c185

0800acac <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800acac:	b580      	push	{r7, lr}
 800acae:	b088      	sub	sp, #32
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	60f8      	str	r0, [r7, #12]
 800acb4:	60b9      	str	r1, [r7, #8]
 800acb6:	1dbb      	adds	r3, r7, #6
 800acb8:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	2280      	movs	r2, #128	@ 0x80
 800acbe:	589b      	ldr	r3, [r3, r2]
 800acc0:	2b20      	cmp	r3, #32
 800acc2:	d14a      	bne.n	800ad5a <HAL_UART_Receive_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 800acc4:	68bb      	ldr	r3, [r7, #8]
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d003      	beq.n	800acd2 <HAL_UART_Receive_DMA+0x26>
 800acca:	1dbb      	adds	r3, r7, #6
 800accc:	881b      	ldrh	r3, [r3, #0]
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d101      	bne.n	800acd6 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800acd2:	2301      	movs	r3, #1
 800acd4:	e042      	b.n	800ad5c <HAL_UART_Receive_DMA+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	689a      	ldr	r2, [r3, #8]
 800acda:	2380      	movs	r3, #128	@ 0x80
 800acdc:	015b      	lsls	r3, r3, #5
 800acde:	429a      	cmp	r2, r3
 800ace0:	d109      	bne.n	800acf6 <HAL_UART_Receive_DMA+0x4a>
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	691b      	ldr	r3, [r3, #16]
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d105      	bne.n	800acf6 <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800acea:	68bb      	ldr	r3, [r7, #8]
 800acec:	2201      	movs	r2, #1
 800acee:	4013      	ands	r3, r2
 800acf0:	d001      	beq.n	800acf6 <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 800acf2:	2301      	movs	r3, #1
 800acf4:	e032      	b.n	800ad5c <HAL_UART_Receive_DMA+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	2200      	movs	r2, #0
 800acfa:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	4a18      	ldr	r2, [pc, #96]	@ (800ad64 <HAL_UART_Receive_DMA+0xb8>)
 800ad02:	4293      	cmp	r3, r2
 800ad04:	d020      	beq.n	800ad48 <HAL_UART_Receive_DMA+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	685a      	ldr	r2, [r3, #4]
 800ad0c:	2380      	movs	r3, #128	@ 0x80
 800ad0e:	041b      	lsls	r3, r3, #16
 800ad10:	4013      	ands	r3, r2
 800ad12:	d019      	beq.n	800ad48 <HAL_UART_Receive_DMA+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ad14:	f3ef 8310 	mrs	r3, PRIMASK
 800ad18:	613b      	str	r3, [r7, #16]
  return(result);
 800ad1a:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ad1c:	61fb      	str	r3, [r7, #28]
 800ad1e:	2301      	movs	r3, #1
 800ad20:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ad22:	697b      	ldr	r3, [r7, #20]
 800ad24:	f383 8810 	msr	PRIMASK, r3
}
 800ad28:	46c0      	nop			@ (mov r8, r8)
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	681a      	ldr	r2, [r3, #0]
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	2180      	movs	r1, #128	@ 0x80
 800ad36:	04c9      	lsls	r1, r1, #19
 800ad38:	430a      	orrs	r2, r1
 800ad3a:	601a      	str	r2, [r3, #0]
 800ad3c:	69fb      	ldr	r3, [r7, #28]
 800ad3e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ad40:	69bb      	ldr	r3, [r7, #24]
 800ad42:	f383 8810 	msr	PRIMASK, r3
}
 800ad46:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800ad48:	1dbb      	adds	r3, r7, #6
 800ad4a:	881a      	ldrh	r2, [r3, #0]
 800ad4c:	68b9      	ldr	r1, [r7, #8]
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	0018      	movs	r0, r3
 800ad52:	f000 ffd1 	bl	800bcf8 <UART_Start_Receive_DMA>
 800ad56:	0003      	movs	r3, r0
 800ad58:	e000      	b.n	800ad5c <HAL_UART_Receive_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 800ad5a:	2302      	movs	r3, #2
  }
}
 800ad5c:	0018      	movs	r0, r3
 800ad5e:	46bd      	mov	sp, r7
 800ad60:	b008      	add	sp, #32
 800ad62:	bd80      	pop	{r7, pc}
 800ad64:	40004800 	.word	0x40004800

0800ad68 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ad68:	b590      	push	{r4, r7, lr}
 800ad6a:	b0ab      	sub	sp, #172	@ 0xac
 800ad6c:	af00      	add	r7, sp, #0
 800ad6e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	69db      	ldr	r3, [r3, #28]
 800ad76:	22a4      	movs	r2, #164	@ 0xa4
 800ad78:	18b9      	adds	r1, r7, r2
 800ad7a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	20a0      	movs	r0, #160	@ 0xa0
 800ad84:	1839      	adds	r1, r7, r0
 800ad86:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	689b      	ldr	r3, [r3, #8]
 800ad8e:	219c      	movs	r1, #156	@ 0x9c
 800ad90:	1879      	adds	r1, r7, r1
 800ad92:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ad94:	0011      	movs	r1, r2
 800ad96:	18bb      	adds	r3, r7, r2
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	4a9c      	ldr	r2, [pc, #624]	@ (800b00c <HAL_UART_IRQHandler+0x2a4>)
 800ad9c:	4013      	ands	r3, r2
 800ad9e:	2298      	movs	r2, #152	@ 0x98
 800ada0:	18bc      	adds	r4, r7, r2
 800ada2:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 800ada4:	18bb      	adds	r3, r7, r2
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d114      	bne.n	800add6 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800adac:	187b      	adds	r3, r7, r1
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	2220      	movs	r2, #32
 800adb2:	4013      	ands	r3, r2
 800adb4:	d00f      	beq.n	800add6 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800adb6:	183b      	adds	r3, r7, r0
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	2220      	movs	r2, #32
 800adbc:	4013      	ands	r3, r2
 800adbe:	d00a      	beq.n	800add6 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d100      	bne.n	800adca <HAL_UART_IRQHandler+0x62>
 800adc8:	e2aa      	b.n	800b320 <HAL_UART_IRQHandler+0x5b8>
      {
        huart->RxISR(huart);
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800adce:	687a      	ldr	r2, [r7, #4]
 800add0:	0010      	movs	r0, r2
 800add2:	4798      	blx	r3
      }
      return;
 800add4:	e2a4      	b.n	800b320 <HAL_UART_IRQHandler+0x5b8>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800add6:	2398      	movs	r3, #152	@ 0x98
 800add8:	18fb      	adds	r3, r7, r3
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	2b00      	cmp	r3, #0
 800adde:	d100      	bne.n	800ade2 <HAL_UART_IRQHandler+0x7a>
 800ade0:	e11a      	b.n	800b018 <HAL_UART_IRQHandler+0x2b0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800ade2:	239c      	movs	r3, #156	@ 0x9c
 800ade4:	18fb      	adds	r3, r7, r3
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	2201      	movs	r2, #1
 800adea:	4013      	ands	r3, r2
 800adec:	d106      	bne.n	800adfc <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800adee:	23a0      	movs	r3, #160	@ 0xa0
 800adf0:	18fb      	adds	r3, r7, r3
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	4a86      	ldr	r2, [pc, #536]	@ (800b010 <HAL_UART_IRQHandler+0x2a8>)
 800adf6:	4013      	ands	r3, r2
 800adf8:	d100      	bne.n	800adfc <HAL_UART_IRQHandler+0x94>
 800adfa:	e10d      	b.n	800b018 <HAL_UART_IRQHandler+0x2b0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800adfc:	23a4      	movs	r3, #164	@ 0xa4
 800adfe:	18fb      	adds	r3, r7, r3
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	2201      	movs	r2, #1
 800ae04:	4013      	ands	r3, r2
 800ae06:	d012      	beq.n	800ae2e <HAL_UART_IRQHandler+0xc6>
 800ae08:	23a0      	movs	r3, #160	@ 0xa0
 800ae0a:	18fb      	adds	r3, r7, r3
 800ae0c:	681a      	ldr	r2, [r3, #0]
 800ae0e:	2380      	movs	r3, #128	@ 0x80
 800ae10:	005b      	lsls	r3, r3, #1
 800ae12:	4013      	ands	r3, r2
 800ae14:	d00b      	beq.n	800ae2e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	2201      	movs	r2, #1
 800ae1c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	2284      	movs	r2, #132	@ 0x84
 800ae22:	589b      	ldr	r3, [r3, r2]
 800ae24:	2201      	movs	r2, #1
 800ae26:	431a      	orrs	r2, r3
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	2184      	movs	r1, #132	@ 0x84
 800ae2c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ae2e:	23a4      	movs	r3, #164	@ 0xa4
 800ae30:	18fb      	adds	r3, r7, r3
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	2202      	movs	r2, #2
 800ae36:	4013      	ands	r3, r2
 800ae38:	d011      	beq.n	800ae5e <HAL_UART_IRQHandler+0xf6>
 800ae3a:	239c      	movs	r3, #156	@ 0x9c
 800ae3c:	18fb      	adds	r3, r7, r3
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	2201      	movs	r2, #1
 800ae42:	4013      	ands	r3, r2
 800ae44:	d00b      	beq.n	800ae5e <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	2202      	movs	r2, #2
 800ae4c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	2284      	movs	r2, #132	@ 0x84
 800ae52:	589b      	ldr	r3, [r3, r2]
 800ae54:	2204      	movs	r2, #4
 800ae56:	431a      	orrs	r2, r3
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	2184      	movs	r1, #132	@ 0x84
 800ae5c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ae5e:	23a4      	movs	r3, #164	@ 0xa4
 800ae60:	18fb      	adds	r3, r7, r3
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	2204      	movs	r2, #4
 800ae66:	4013      	ands	r3, r2
 800ae68:	d011      	beq.n	800ae8e <HAL_UART_IRQHandler+0x126>
 800ae6a:	239c      	movs	r3, #156	@ 0x9c
 800ae6c:	18fb      	adds	r3, r7, r3
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	2201      	movs	r2, #1
 800ae72:	4013      	ands	r3, r2
 800ae74:	d00b      	beq.n	800ae8e <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	2204      	movs	r2, #4
 800ae7c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	2284      	movs	r2, #132	@ 0x84
 800ae82:	589b      	ldr	r3, [r3, r2]
 800ae84:	2202      	movs	r2, #2
 800ae86:	431a      	orrs	r2, r3
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	2184      	movs	r1, #132	@ 0x84
 800ae8c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ae8e:	23a4      	movs	r3, #164	@ 0xa4
 800ae90:	18fb      	adds	r3, r7, r3
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	2208      	movs	r2, #8
 800ae96:	4013      	ands	r3, r2
 800ae98:	d017      	beq.n	800aeca <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800ae9a:	23a0      	movs	r3, #160	@ 0xa0
 800ae9c:	18fb      	adds	r3, r7, r3
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	2220      	movs	r2, #32
 800aea2:	4013      	ands	r3, r2
 800aea4:	d105      	bne.n	800aeb2 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800aea6:	239c      	movs	r3, #156	@ 0x9c
 800aea8:	18fb      	adds	r3, r7, r3
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	2201      	movs	r2, #1
 800aeae:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800aeb0:	d00b      	beq.n	800aeca <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	2208      	movs	r2, #8
 800aeb8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	2284      	movs	r2, #132	@ 0x84
 800aebe:	589b      	ldr	r3, [r3, r2]
 800aec0:	2208      	movs	r2, #8
 800aec2:	431a      	orrs	r2, r3
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	2184      	movs	r1, #132	@ 0x84
 800aec8:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800aeca:	23a4      	movs	r3, #164	@ 0xa4
 800aecc:	18fb      	adds	r3, r7, r3
 800aece:	681a      	ldr	r2, [r3, #0]
 800aed0:	2380      	movs	r3, #128	@ 0x80
 800aed2:	011b      	lsls	r3, r3, #4
 800aed4:	4013      	ands	r3, r2
 800aed6:	d013      	beq.n	800af00 <HAL_UART_IRQHandler+0x198>
 800aed8:	23a0      	movs	r3, #160	@ 0xa0
 800aeda:	18fb      	adds	r3, r7, r3
 800aedc:	681a      	ldr	r2, [r3, #0]
 800aede:	2380      	movs	r3, #128	@ 0x80
 800aee0:	04db      	lsls	r3, r3, #19
 800aee2:	4013      	ands	r3, r2
 800aee4:	d00c      	beq.n	800af00 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	2280      	movs	r2, #128	@ 0x80
 800aeec:	0112      	lsls	r2, r2, #4
 800aeee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	2284      	movs	r2, #132	@ 0x84
 800aef4:	589b      	ldr	r3, [r3, r2]
 800aef6:	2220      	movs	r2, #32
 800aef8:	431a      	orrs	r2, r3
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	2184      	movs	r1, #132	@ 0x84
 800aefe:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	2284      	movs	r2, #132	@ 0x84
 800af04:	589b      	ldr	r3, [r3, r2]
 800af06:	2b00      	cmp	r3, #0
 800af08:	d100      	bne.n	800af0c <HAL_UART_IRQHandler+0x1a4>
 800af0a:	e20b      	b.n	800b324 <HAL_UART_IRQHandler+0x5bc>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800af0c:	23a4      	movs	r3, #164	@ 0xa4
 800af0e:	18fb      	adds	r3, r7, r3
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	2220      	movs	r2, #32
 800af14:	4013      	ands	r3, r2
 800af16:	d00e      	beq.n	800af36 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800af18:	23a0      	movs	r3, #160	@ 0xa0
 800af1a:	18fb      	adds	r3, r7, r3
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	2220      	movs	r2, #32
 800af20:	4013      	ands	r3, r2
 800af22:	d008      	beq.n	800af36 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d004      	beq.n	800af36 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800af30:	687a      	ldr	r2, [r7, #4]
 800af32:	0010      	movs	r0, r2
 800af34:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	2284      	movs	r2, #132	@ 0x84
 800af3a:	589b      	ldr	r3, [r3, r2]
 800af3c:	2194      	movs	r1, #148	@ 0x94
 800af3e:	187a      	adds	r2, r7, r1
 800af40:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	689b      	ldr	r3, [r3, #8]
 800af48:	2240      	movs	r2, #64	@ 0x40
 800af4a:	4013      	ands	r3, r2
 800af4c:	2b40      	cmp	r3, #64	@ 0x40
 800af4e:	d004      	beq.n	800af5a <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800af50:	187b      	adds	r3, r7, r1
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	2228      	movs	r2, #40	@ 0x28
 800af56:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800af58:	d04b      	beq.n	800aff2 <HAL_UART_IRQHandler+0x28a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	0018      	movs	r0, r3
 800af5e:	f000 ff8f 	bl	800be80 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	689b      	ldr	r3, [r3, #8]
 800af68:	2240      	movs	r2, #64	@ 0x40
 800af6a:	4013      	ands	r3, r2
 800af6c:	2b40      	cmp	r3, #64	@ 0x40
 800af6e:	d139      	bne.n	800afe4 <HAL_UART_IRQHandler+0x27c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800af70:	f3ef 8310 	mrs	r3, PRIMASK
 800af74:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 800af76:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800af78:	2090      	movs	r0, #144	@ 0x90
 800af7a:	183a      	adds	r2, r7, r0
 800af7c:	6013      	str	r3, [r2, #0]
 800af7e:	2301      	movs	r3, #1
 800af80:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800af82:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800af84:	f383 8810 	msr	PRIMASK, r3
}
 800af88:	46c0      	nop			@ (mov r8, r8)
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	689a      	ldr	r2, [r3, #8]
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	2140      	movs	r1, #64	@ 0x40
 800af96:	438a      	bics	r2, r1
 800af98:	609a      	str	r2, [r3, #8]
 800af9a:	183b      	adds	r3, r7, r0
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800afa0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800afa2:	f383 8810 	msr	PRIMASK, r3
}
 800afa6:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800afac:	2b00      	cmp	r3, #0
 800afae:	d012      	beq.n	800afd6 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800afb4:	4a17      	ldr	r2, [pc, #92]	@ (800b014 <HAL_UART_IRQHandler+0x2ac>)
 800afb6:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800afbc:	0018      	movs	r0, r3
 800afbe:	f7fb fe33 	bl	8006c28 <HAL_DMA_Abort_IT>
 800afc2:	1e03      	subs	r3, r0, #0
 800afc4:	d020      	beq.n	800b008 <HAL_UART_IRQHandler+0x2a0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800afca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800afd0:	0018      	movs	r0, r3
 800afd2:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800afd4:	e018      	b.n	800b008 <HAL_UART_IRQHandler+0x2a0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	2298      	movs	r2, #152	@ 0x98
 800afda:	589b      	ldr	r3, [r3, r2]
 800afdc:	687a      	ldr	r2, [r7, #4]
 800afde:	0010      	movs	r0, r2
 800afe0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800afe2:	e011      	b.n	800b008 <HAL_UART_IRQHandler+0x2a0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	2298      	movs	r2, #152	@ 0x98
 800afe8:	589b      	ldr	r3, [r3, r2]
 800afea:	687a      	ldr	r2, [r7, #4]
 800afec:	0010      	movs	r0, r2
 800afee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aff0:	e00a      	b.n	800b008 <HAL_UART_IRQHandler+0x2a0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	2298      	movs	r2, #152	@ 0x98
 800aff6:	589b      	ldr	r3, [r3, r2]
 800aff8:	687a      	ldr	r2, [r7, #4]
 800affa:	0010      	movs	r0, r2
 800affc:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	2284      	movs	r2, #132	@ 0x84
 800b002:	2100      	movs	r1, #0
 800b004:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800b006:	e18d      	b.n	800b324 <HAL_UART_IRQHandler+0x5bc>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b008:	46c0      	nop			@ (mov r8, r8)
    return;
 800b00a:	e18b      	b.n	800b324 <HAL_UART_IRQHandler+0x5bc>
 800b00c:	0000080f 	.word	0x0000080f
 800b010:	04000120 	.word	0x04000120
 800b014:	0800c20d 	.word	0x0800c20d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b01c:	2b01      	cmp	r3, #1
 800b01e:	d000      	beq.n	800b022 <HAL_UART_IRQHandler+0x2ba>
 800b020:	e13d      	b.n	800b29e <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b022:	23a4      	movs	r3, #164	@ 0xa4
 800b024:	18fb      	adds	r3, r7, r3
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	2210      	movs	r2, #16
 800b02a:	4013      	ands	r3, r2
 800b02c:	d100      	bne.n	800b030 <HAL_UART_IRQHandler+0x2c8>
 800b02e:	e136      	b.n	800b29e <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b030:	23a0      	movs	r3, #160	@ 0xa0
 800b032:	18fb      	adds	r3, r7, r3
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	2210      	movs	r2, #16
 800b038:	4013      	ands	r3, r2
 800b03a:	d100      	bne.n	800b03e <HAL_UART_IRQHandler+0x2d6>
 800b03c:	e12f      	b.n	800b29e <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	2210      	movs	r2, #16
 800b044:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	689b      	ldr	r3, [r3, #8]
 800b04c:	2240      	movs	r2, #64	@ 0x40
 800b04e:	4013      	ands	r3, r2
 800b050:	2b40      	cmp	r3, #64	@ 0x40
 800b052:	d000      	beq.n	800b056 <HAL_UART_IRQHandler+0x2ee>
 800b054:	e0a2      	b.n	800b19c <HAL_UART_IRQHandler+0x434>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	685a      	ldr	r2, [r3, #4]
 800b05e:	217e      	movs	r1, #126	@ 0x7e
 800b060:	187b      	adds	r3, r7, r1
 800b062:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800b064:	187b      	adds	r3, r7, r1
 800b066:	881b      	ldrh	r3, [r3, #0]
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d100      	bne.n	800b06e <HAL_UART_IRQHandler+0x306>
 800b06c:	e15c      	b.n	800b328 <HAL_UART_IRQHandler+0x5c0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	2258      	movs	r2, #88	@ 0x58
 800b072:	5a9b      	ldrh	r3, [r3, r2]
 800b074:	187a      	adds	r2, r7, r1
 800b076:	8812      	ldrh	r2, [r2, #0]
 800b078:	429a      	cmp	r2, r3
 800b07a:	d300      	bcc.n	800b07e <HAL_UART_IRQHandler+0x316>
 800b07c:	e154      	b.n	800b328 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	187a      	adds	r2, r7, r1
 800b082:	215a      	movs	r1, #90	@ 0x5a
 800b084:	8812      	ldrh	r2, [r2, #0]
 800b086:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	2220      	movs	r2, #32
 800b092:	4013      	ands	r3, r2
 800b094:	d16f      	bne.n	800b176 <HAL_UART_IRQHandler+0x40e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b096:	f3ef 8310 	mrs	r3, PRIMASK
 800b09a:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800b09c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b09e:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b0a0:	2301      	movs	r3, #1
 800b0a2:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b0a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b0a6:	f383 8810 	msr	PRIMASK, r3
}
 800b0aa:	46c0      	nop			@ (mov r8, r8)
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	681a      	ldr	r2, [r3, #0]
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	49a0      	ldr	r1, [pc, #640]	@ (800b338 <HAL_UART_IRQHandler+0x5d0>)
 800b0b8:	400a      	ands	r2, r1
 800b0ba:	601a      	str	r2, [r3, #0]
 800b0bc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b0be:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b0c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0c2:	f383 8810 	msr	PRIMASK, r3
}
 800b0c6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b0c8:	f3ef 8310 	mrs	r3, PRIMASK
 800b0cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 800b0ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b0d0:	677b      	str	r3, [r7, #116]	@ 0x74
 800b0d2:	2301      	movs	r3, #1
 800b0d4:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b0d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b0d8:	f383 8810 	msr	PRIMASK, r3
}
 800b0dc:	46c0      	nop			@ (mov r8, r8)
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	689a      	ldr	r2, [r3, #8]
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	2101      	movs	r1, #1
 800b0ea:	438a      	bics	r2, r1
 800b0ec:	609a      	str	r2, [r3, #8]
 800b0ee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b0f0:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b0f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b0f4:	f383 8810 	msr	PRIMASK, r3
}
 800b0f8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b0fa:	f3ef 8310 	mrs	r3, PRIMASK
 800b0fe:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 800b100:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b102:	673b      	str	r3, [r7, #112]	@ 0x70
 800b104:	2301      	movs	r3, #1
 800b106:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b108:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b10a:	f383 8810 	msr	PRIMASK, r3
}
 800b10e:	46c0      	nop			@ (mov r8, r8)
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	689a      	ldr	r2, [r3, #8]
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	2140      	movs	r1, #64	@ 0x40
 800b11c:	438a      	bics	r2, r1
 800b11e:	609a      	str	r2, [r3, #8]
 800b120:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b122:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b124:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b126:	f383 8810 	msr	PRIMASK, r3
}
 800b12a:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	2280      	movs	r2, #128	@ 0x80
 800b130:	2120      	movs	r1, #32
 800b132:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	2200      	movs	r2, #0
 800b138:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b13a:	f3ef 8310 	mrs	r3, PRIMASK
 800b13e:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 800b140:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b142:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800b144:	2301      	movs	r3, #1
 800b146:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b148:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b14a:	f383 8810 	msr	PRIMASK, r3
}
 800b14e:	46c0      	nop			@ (mov r8, r8)
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	681a      	ldr	r2, [r3, #0]
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	2110      	movs	r1, #16
 800b15c:	438a      	bics	r2, r1
 800b15e:	601a      	str	r2, [r3, #0]
 800b160:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b162:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b164:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b166:	f383 8810 	msr	PRIMASK, r3
}
 800b16a:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b170:	0018      	movs	r0, r3
 800b172:	f7fb fd19 	bl	8006ba8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	2202      	movs	r2, #2
 800b17a:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	22ac      	movs	r2, #172	@ 0xac
 800b180:	589b      	ldr	r3, [r3, r2]
 800b182:	687a      	ldr	r2, [r7, #4]
 800b184:	2158      	movs	r1, #88	@ 0x58
 800b186:	5a51      	ldrh	r1, [r2, r1]
 800b188:	687a      	ldr	r2, [r7, #4]
 800b18a:	205a      	movs	r0, #90	@ 0x5a
 800b18c:	5a12      	ldrh	r2, [r2, r0]
 800b18e:	b292      	uxth	r2, r2
 800b190:	1a8a      	subs	r2, r1, r2
 800b192:	b291      	uxth	r1, r2
 800b194:	687a      	ldr	r2, [r7, #4]
 800b196:	0010      	movs	r0, r2
 800b198:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b19a:	e0c5      	b.n	800b328 <HAL_UART_IRQHandler+0x5c0>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	2258      	movs	r2, #88	@ 0x58
 800b1a0:	5a99      	ldrh	r1, [r3, r2]
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	225a      	movs	r2, #90	@ 0x5a
 800b1a6:	5a9b      	ldrh	r3, [r3, r2]
 800b1a8:	b29a      	uxth	r2, r3
 800b1aa:	208e      	movs	r0, #142	@ 0x8e
 800b1ac:	183b      	adds	r3, r7, r0
 800b1ae:	1a8a      	subs	r2, r1, r2
 800b1b0:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	225a      	movs	r2, #90	@ 0x5a
 800b1b6:	5a9b      	ldrh	r3, [r3, r2]
 800b1b8:	b29b      	uxth	r3, r3
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d100      	bne.n	800b1c0 <HAL_UART_IRQHandler+0x458>
 800b1be:	e0b5      	b.n	800b32c <HAL_UART_IRQHandler+0x5c4>
          && (nb_rx_data > 0U))
 800b1c0:	183b      	adds	r3, r7, r0
 800b1c2:	881b      	ldrh	r3, [r3, #0]
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d100      	bne.n	800b1ca <HAL_UART_IRQHandler+0x462>
 800b1c8:	e0b0      	b.n	800b32c <HAL_UART_IRQHandler+0x5c4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b1ca:	f3ef 8310 	mrs	r3, PRIMASK
 800b1ce:	60fb      	str	r3, [r7, #12]
  return(result);
 800b1d0:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b1d2:	2488      	movs	r4, #136	@ 0x88
 800b1d4:	193a      	adds	r2, r7, r4
 800b1d6:	6013      	str	r3, [r2, #0]
 800b1d8:	2301      	movs	r3, #1
 800b1da:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b1dc:	693b      	ldr	r3, [r7, #16]
 800b1de:	f383 8810 	msr	PRIMASK, r3
}
 800b1e2:	46c0      	nop			@ (mov r8, r8)
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	681a      	ldr	r2, [r3, #0]
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	4953      	ldr	r1, [pc, #332]	@ (800b33c <HAL_UART_IRQHandler+0x5d4>)
 800b1f0:	400a      	ands	r2, r1
 800b1f2:	601a      	str	r2, [r3, #0]
 800b1f4:	193b      	adds	r3, r7, r4
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b1fa:	697b      	ldr	r3, [r7, #20]
 800b1fc:	f383 8810 	msr	PRIMASK, r3
}
 800b200:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b202:	f3ef 8310 	mrs	r3, PRIMASK
 800b206:	61bb      	str	r3, [r7, #24]
  return(result);
 800b208:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b20a:	2484      	movs	r4, #132	@ 0x84
 800b20c:	193a      	adds	r2, r7, r4
 800b20e:	6013      	str	r3, [r2, #0]
 800b210:	2301      	movs	r3, #1
 800b212:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b214:	69fb      	ldr	r3, [r7, #28]
 800b216:	f383 8810 	msr	PRIMASK, r3
}
 800b21a:	46c0      	nop			@ (mov r8, r8)
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	689a      	ldr	r2, [r3, #8]
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	2101      	movs	r1, #1
 800b228:	438a      	bics	r2, r1
 800b22a:	609a      	str	r2, [r3, #8]
 800b22c:	193b      	adds	r3, r7, r4
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b232:	6a3b      	ldr	r3, [r7, #32]
 800b234:	f383 8810 	msr	PRIMASK, r3
}
 800b238:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	2280      	movs	r2, #128	@ 0x80
 800b23e:	2120      	movs	r1, #32
 800b240:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	2200      	movs	r2, #0
 800b246:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	2200      	movs	r2, #0
 800b24c:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b24e:	f3ef 8310 	mrs	r3, PRIMASK
 800b252:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800b254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b256:	2480      	movs	r4, #128	@ 0x80
 800b258:	193a      	adds	r2, r7, r4
 800b25a:	6013      	str	r3, [r2, #0]
 800b25c:	2301      	movs	r3, #1
 800b25e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b260:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b262:	f383 8810 	msr	PRIMASK, r3
}
 800b266:	46c0      	nop			@ (mov r8, r8)
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	681a      	ldr	r2, [r3, #0]
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	2110      	movs	r1, #16
 800b274:	438a      	bics	r2, r1
 800b276:	601a      	str	r2, [r3, #0]
 800b278:	193b      	adds	r3, r7, r4
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b27e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b280:	f383 8810 	msr	PRIMASK, r3
}
 800b284:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	2202      	movs	r2, #2
 800b28a:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	22ac      	movs	r2, #172	@ 0xac
 800b290:	589b      	ldr	r3, [r3, r2]
 800b292:	183a      	adds	r2, r7, r0
 800b294:	8811      	ldrh	r1, [r2, #0]
 800b296:	687a      	ldr	r2, [r7, #4]
 800b298:	0010      	movs	r0, r2
 800b29a:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b29c:	e046      	b.n	800b32c <HAL_UART_IRQHandler+0x5c4>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b29e:	23a4      	movs	r3, #164	@ 0xa4
 800b2a0:	18fb      	adds	r3, r7, r3
 800b2a2:	681a      	ldr	r2, [r3, #0]
 800b2a4:	2380      	movs	r3, #128	@ 0x80
 800b2a6:	035b      	lsls	r3, r3, #13
 800b2a8:	4013      	ands	r3, r2
 800b2aa:	d012      	beq.n	800b2d2 <HAL_UART_IRQHandler+0x56a>
 800b2ac:	239c      	movs	r3, #156	@ 0x9c
 800b2ae:	18fb      	adds	r3, r7, r3
 800b2b0:	681a      	ldr	r2, [r3, #0]
 800b2b2:	2380      	movs	r3, #128	@ 0x80
 800b2b4:	03db      	lsls	r3, r3, #15
 800b2b6:	4013      	ands	r3, r2
 800b2b8:	d00b      	beq.n	800b2d2 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	2280      	movs	r2, #128	@ 0x80
 800b2c0:	0352      	lsls	r2, r2, #13
 800b2c2:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	22a8      	movs	r2, #168	@ 0xa8
 800b2c8:	589b      	ldr	r3, [r3, r2]
 800b2ca:	687a      	ldr	r2, [r7, #4]
 800b2cc:	0010      	movs	r0, r2
 800b2ce:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b2d0:	e02f      	b.n	800b332 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800b2d2:	23a4      	movs	r3, #164	@ 0xa4
 800b2d4:	18fb      	adds	r3, r7, r3
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	2280      	movs	r2, #128	@ 0x80
 800b2da:	4013      	ands	r3, r2
 800b2dc:	d00f      	beq.n	800b2fe <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800b2de:	23a0      	movs	r3, #160	@ 0xa0
 800b2e0:	18fb      	adds	r3, r7, r3
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	2280      	movs	r2, #128	@ 0x80
 800b2e6:	4013      	ands	r3, r2
 800b2e8:	d009      	beq.n	800b2fe <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d01e      	beq.n	800b330 <HAL_UART_IRQHandler+0x5c8>
    {
      huart->TxISR(huart);
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b2f6:	687a      	ldr	r2, [r7, #4]
 800b2f8:	0010      	movs	r0, r2
 800b2fa:	4798      	blx	r3
    }
    return;
 800b2fc:	e018      	b.n	800b330 <HAL_UART_IRQHandler+0x5c8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b2fe:	23a4      	movs	r3, #164	@ 0xa4
 800b300:	18fb      	adds	r3, r7, r3
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	2240      	movs	r2, #64	@ 0x40
 800b306:	4013      	ands	r3, r2
 800b308:	d013      	beq.n	800b332 <HAL_UART_IRQHandler+0x5ca>
 800b30a:	23a0      	movs	r3, #160	@ 0xa0
 800b30c:	18fb      	adds	r3, r7, r3
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	2240      	movs	r2, #64	@ 0x40
 800b312:	4013      	ands	r3, r2
 800b314:	d00d      	beq.n	800b332 <HAL_UART_IRQHandler+0x5ca>
  {
    UART_EndTransmit_IT(huart);
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	0018      	movs	r0, r3
 800b31a:	f000 ff90 	bl	800c23e <UART_EndTransmit_IT>
    return;
 800b31e:	e008      	b.n	800b332 <HAL_UART_IRQHandler+0x5ca>
      return;
 800b320:	46c0      	nop			@ (mov r8, r8)
 800b322:	e006      	b.n	800b332 <HAL_UART_IRQHandler+0x5ca>
    return;
 800b324:	46c0      	nop			@ (mov r8, r8)
 800b326:	e004      	b.n	800b332 <HAL_UART_IRQHandler+0x5ca>
      return;
 800b328:	46c0      	nop			@ (mov r8, r8)
 800b32a:	e002      	b.n	800b332 <HAL_UART_IRQHandler+0x5ca>
      return;
 800b32c:	46c0      	nop			@ (mov r8, r8)
 800b32e:	e000      	b.n	800b332 <HAL_UART_IRQHandler+0x5ca>
    return;
 800b330:	46c0      	nop			@ (mov r8, r8)
  }

}
 800b332:	46bd      	mov	sp, r7
 800b334:	b02b      	add	sp, #172	@ 0xac
 800b336:	bd90      	pop	{r4, r7, pc}
 800b338:	fffffeff 	.word	0xfffffeff
 800b33c:	fffffedf 	.word	0xfffffedf

0800b340 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b340:	b580      	push	{r7, lr}
 800b342:	b082      	sub	sp, #8
 800b344:	af00      	add	r7, sp, #0
 800b346:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800b348:	46c0      	nop			@ (mov r8, r8)
 800b34a:	46bd      	mov	sp, r7
 800b34c:	b002      	add	sp, #8
 800b34e:	bd80      	pop	{r7, pc}

0800b350 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b350:	b580      	push	{r7, lr}
 800b352:	b082      	sub	sp, #8
 800b354:	af00      	add	r7, sp, #0
 800b356:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800b358:	46c0      	nop			@ (mov r8, r8)
 800b35a:	46bd      	mov	sp, r7
 800b35c:	b002      	add	sp, #8
 800b35e:	bd80      	pop	{r7, pc}

0800b360 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800b360:	b580      	push	{r7, lr}
 800b362:	b082      	sub	sp, #8
 800b364:	af00      	add	r7, sp, #0
 800b366:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800b368:	46c0      	nop			@ (mov r8, r8)
 800b36a:	46bd      	mov	sp, r7
 800b36c:	b002      	add	sp, #8
 800b36e:	bd80      	pop	{r7, pc}

0800b370 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800b370:	b580      	push	{r7, lr}
 800b372:	b082      	sub	sp, #8
 800b374:	af00      	add	r7, sp, #0
 800b376:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800b378:	46c0      	nop			@ (mov r8, r8)
 800b37a:	46bd      	mov	sp, r7
 800b37c:	b002      	add	sp, #8
 800b37e:	bd80      	pop	{r7, pc}

0800b380 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800b380:	b580      	push	{r7, lr}
 800b382:	b082      	sub	sp, #8
 800b384:	af00      	add	r7, sp, #0
 800b386:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800b388:	46c0      	nop			@ (mov r8, r8)
 800b38a:	46bd      	mov	sp, r7
 800b38c:	b002      	add	sp, #8
 800b38e:	bd80      	pop	{r7, pc}

0800b390 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b390:	b580      	push	{r7, lr}
 800b392:	b082      	sub	sp, #8
 800b394:	af00      	add	r7, sp, #0
 800b396:	6078      	str	r0, [r7, #4]
 800b398:	000a      	movs	r2, r1
 800b39a:	1cbb      	adds	r3, r7, #2
 800b39c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b39e:	46c0      	nop			@ (mov r8, r8)
 800b3a0:	46bd      	mov	sp, r7
 800b3a2:	b002      	add	sp, #8
 800b3a4:	bd80      	pop	{r7, pc}
	...

0800b3a8 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800b3a8:	b580      	push	{r7, lr}
 800b3aa:	b082      	sub	sp, #8
 800b3ac:	af00      	add	r7, sp, #0
 800b3ae:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	2188      	movs	r1, #136	@ 0x88
 800b3b4:	4a14      	ldr	r2, [pc, #80]	@ (800b408 <UART_InitCallbacksToDefault+0x60>)
 800b3b6:	505a      	str	r2, [r3, r1]
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	218c      	movs	r1, #140	@ 0x8c
 800b3bc:	4a13      	ldr	r2, [pc, #76]	@ (800b40c <UART_InitCallbacksToDefault+0x64>)
 800b3be:	505a      	str	r2, [r3, r1]
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	2190      	movs	r1, #144	@ 0x90
 800b3c4:	4a12      	ldr	r2, [pc, #72]	@ (800b410 <UART_InitCallbacksToDefault+0x68>)
 800b3c6:	505a      	str	r2, [r3, r1]
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	2194      	movs	r1, #148	@ 0x94
 800b3cc:	4a11      	ldr	r2, [pc, #68]	@ (800b414 <UART_InitCallbacksToDefault+0x6c>)
 800b3ce:	505a      	str	r2, [r3, r1]
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	2198      	movs	r1, #152	@ 0x98
 800b3d4:	4a10      	ldr	r2, [pc, #64]	@ (800b418 <UART_InitCallbacksToDefault+0x70>)
 800b3d6:	505a      	str	r2, [r3, r1]
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	219c      	movs	r1, #156	@ 0x9c
 800b3dc:	4a0f      	ldr	r2, [pc, #60]	@ (800b41c <UART_InitCallbacksToDefault+0x74>)
 800b3de:	505a      	str	r2, [r3, r1]
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	21a0      	movs	r1, #160	@ 0xa0
 800b3e4:	4a0e      	ldr	r2, [pc, #56]	@ (800b420 <UART_InitCallbacksToDefault+0x78>)
 800b3e6:	505a      	str	r2, [r3, r1]
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	21a4      	movs	r1, #164	@ 0xa4
 800b3ec:	4a0d      	ldr	r2, [pc, #52]	@ (800b424 <UART_InitCallbacksToDefault+0x7c>)
 800b3ee:	505a      	str	r2, [r3, r1]
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	21a8      	movs	r1, #168	@ 0xa8
 800b3f4:	4a0c      	ldr	r2, [pc, #48]	@ (800b428 <UART_InitCallbacksToDefault+0x80>)
 800b3f6:	505a      	str	r2, [r3, r1]
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	21ac      	movs	r1, #172	@ 0xac
 800b3fc:	4a0b      	ldr	r2, [pc, #44]	@ (800b42c <UART_InitCallbacksToDefault+0x84>)
 800b3fe:	505a      	str	r2, [r3, r1]

}
 800b400:	46c0      	nop			@ (mov r8, r8)
 800b402:	46bd      	mov	sp, r7
 800b404:	b002      	add	sp, #8
 800b406:	bd80      	pop	{r7, pc}
 800b408:	0800b341 	.word	0x0800b341
 800b40c:	08003545 	.word	0x08003545
 800b410:	0800b351 	.word	0x0800b351
 800b414:	08003581 	.word	0x08003581
 800b418:	080035bd 	.word	0x080035bd
 800b41c:	0800b361 	.word	0x0800b361
 800b420:	0800b371 	.word	0x0800b371
 800b424:	0800b381 	.word	0x0800b381
 800b428:	0800c299 	.word	0x0800c299
 800b42c:	0800b391 	.word	0x0800b391

0800b430 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b430:	b5b0      	push	{r4, r5, r7, lr}
 800b432:	b08e      	sub	sp, #56	@ 0x38
 800b434:	af00      	add	r7, sp, #0
 800b436:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b438:	231a      	movs	r3, #26
 800b43a:	2218      	movs	r2, #24
 800b43c:	189b      	adds	r3, r3, r2
 800b43e:	19db      	adds	r3, r3, r7
 800b440:	2200      	movs	r2, #0
 800b442:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b444:	69fb      	ldr	r3, [r7, #28]
 800b446:	689a      	ldr	r2, [r3, #8]
 800b448:	69fb      	ldr	r3, [r7, #28]
 800b44a:	691b      	ldr	r3, [r3, #16]
 800b44c:	431a      	orrs	r2, r3
 800b44e:	69fb      	ldr	r3, [r7, #28]
 800b450:	695b      	ldr	r3, [r3, #20]
 800b452:	431a      	orrs	r2, r3
 800b454:	69fb      	ldr	r3, [r7, #28]
 800b456:	69db      	ldr	r3, [r3, #28]
 800b458:	4313      	orrs	r3, r2
 800b45a:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b45c:	69fb      	ldr	r3, [r7, #28]
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	4ac3      	ldr	r2, [pc, #780]	@ (800b770 <UART_SetConfig+0x340>)
 800b464:	4013      	ands	r3, r2
 800b466:	0019      	movs	r1, r3
 800b468:	69fb      	ldr	r3, [r7, #28]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b46e:	430a      	orrs	r2, r1
 800b470:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b472:	69fb      	ldr	r3, [r7, #28]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	685b      	ldr	r3, [r3, #4]
 800b478:	4abe      	ldr	r2, [pc, #760]	@ (800b774 <UART_SetConfig+0x344>)
 800b47a:	4013      	ands	r3, r2
 800b47c:	0019      	movs	r1, r3
 800b47e:	69fb      	ldr	r3, [r7, #28]
 800b480:	68da      	ldr	r2, [r3, #12]
 800b482:	69fb      	ldr	r3, [r7, #28]
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	430a      	orrs	r2, r1
 800b488:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b48a:	69fb      	ldr	r3, [r7, #28]
 800b48c:	699b      	ldr	r3, [r3, #24]
 800b48e:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b490:	69fb      	ldr	r3, [r7, #28]
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	4ab8      	ldr	r2, [pc, #736]	@ (800b778 <UART_SetConfig+0x348>)
 800b496:	4293      	cmp	r3, r2
 800b498:	d004      	beq.n	800b4a4 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b49a:	69fb      	ldr	r3, [r7, #28]
 800b49c:	6a1b      	ldr	r3, [r3, #32]
 800b49e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b4a0:	4313      	orrs	r3, r2
 800b4a2:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b4a4:	69fb      	ldr	r3, [r7, #28]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	689b      	ldr	r3, [r3, #8]
 800b4aa:	4ab4      	ldr	r2, [pc, #720]	@ (800b77c <UART_SetConfig+0x34c>)
 800b4ac:	4013      	ands	r3, r2
 800b4ae:	0019      	movs	r1, r3
 800b4b0:	69fb      	ldr	r3, [r7, #28]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b4b6:	430a      	orrs	r2, r1
 800b4b8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b4ba:	69fb      	ldr	r3, [r7, #28]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	4ab0      	ldr	r2, [pc, #704]	@ (800b780 <UART_SetConfig+0x350>)
 800b4c0:	4293      	cmp	r3, r2
 800b4c2:	d131      	bne.n	800b528 <UART_SetConfig+0xf8>
 800b4c4:	4baf      	ldr	r3, [pc, #700]	@ (800b784 <UART_SetConfig+0x354>)
 800b4c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b4c8:	2203      	movs	r2, #3
 800b4ca:	4013      	ands	r3, r2
 800b4cc:	2b03      	cmp	r3, #3
 800b4ce:	d01d      	beq.n	800b50c <UART_SetConfig+0xdc>
 800b4d0:	d823      	bhi.n	800b51a <UART_SetConfig+0xea>
 800b4d2:	2b02      	cmp	r3, #2
 800b4d4:	d00c      	beq.n	800b4f0 <UART_SetConfig+0xc0>
 800b4d6:	d820      	bhi.n	800b51a <UART_SetConfig+0xea>
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d002      	beq.n	800b4e2 <UART_SetConfig+0xb2>
 800b4dc:	2b01      	cmp	r3, #1
 800b4de:	d00e      	beq.n	800b4fe <UART_SetConfig+0xce>
 800b4e0:	e01b      	b.n	800b51a <UART_SetConfig+0xea>
 800b4e2:	231b      	movs	r3, #27
 800b4e4:	2218      	movs	r2, #24
 800b4e6:	189b      	adds	r3, r3, r2
 800b4e8:	19db      	adds	r3, r3, r7
 800b4ea:	2201      	movs	r2, #1
 800b4ec:	701a      	strb	r2, [r3, #0]
 800b4ee:	e0b4      	b.n	800b65a <UART_SetConfig+0x22a>
 800b4f0:	231b      	movs	r3, #27
 800b4f2:	2218      	movs	r2, #24
 800b4f4:	189b      	adds	r3, r3, r2
 800b4f6:	19db      	adds	r3, r3, r7
 800b4f8:	2202      	movs	r2, #2
 800b4fa:	701a      	strb	r2, [r3, #0]
 800b4fc:	e0ad      	b.n	800b65a <UART_SetConfig+0x22a>
 800b4fe:	231b      	movs	r3, #27
 800b500:	2218      	movs	r2, #24
 800b502:	189b      	adds	r3, r3, r2
 800b504:	19db      	adds	r3, r3, r7
 800b506:	2204      	movs	r2, #4
 800b508:	701a      	strb	r2, [r3, #0]
 800b50a:	e0a6      	b.n	800b65a <UART_SetConfig+0x22a>
 800b50c:	231b      	movs	r3, #27
 800b50e:	2218      	movs	r2, #24
 800b510:	189b      	adds	r3, r3, r2
 800b512:	19db      	adds	r3, r3, r7
 800b514:	2208      	movs	r2, #8
 800b516:	701a      	strb	r2, [r3, #0]
 800b518:	e09f      	b.n	800b65a <UART_SetConfig+0x22a>
 800b51a:	231b      	movs	r3, #27
 800b51c:	2218      	movs	r2, #24
 800b51e:	189b      	adds	r3, r3, r2
 800b520:	19db      	adds	r3, r3, r7
 800b522:	2210      	movs	r2, #16
 800b524:	701a      	strb	r2, [r3, #0]
 800b526:	e098      	b.n	800b65a <UART_SetConfig+0x22a>
 800b528:	69fb      	ldr	r3, [r7, #28]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	4a96      	ldr	r2, [pc, #600]	@ (800b788 <UART_SetConfig+0x358>)
 800b52e:	4293      	cmp	r3, r2
 800b530:	d131      	bne.n	800b596 <UART_SetConfig+0x166>
 800b532:	4b94      	ldr	r3, [pc, #592]	@ (800b784 <UART_SetConfig+0x354>)
 800b534:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b536:	220c      	movs	r2, #12
 800b538:	4013      	ands	r3, r2
 800b53a:	2b0c      	cmp	r3, #12
 800b53c:	d01d      	beq.n	800b57a <UART_SetConfig+0x14a>
 800b53e:	d823      	bhi.n	800b588 <UART_SetConfig+0x158>
 800b540:	2b08      	cmp	r3, #8
 800b542:	d00c      	beq.n	800b55e <UART_SetConfig+0x12e>
 800b544:	d820      	bhi.n	800b588 <UART_SetConfig+0x158>
 800b546:	2b00      	cmp	r3, #0
 800b548:	d002      	beq.n	800b550 <UART_SetConfig+0x120>
 800b54a:	2b04      	cmp	r3, #4
 800b54c:	d00e      	beq.n	800b56c <UART_SetConfig+0x13c>
 800b54e:	e01b      	b.n	800b588 <UART_SetConfig+0x158>
 800b550:	231b      	movs	r3, #27
 800b552:	2218      	movs	r2, #24
 800b554:	189b      	adds	r3, r3, r2
 800b556:	19db      	adds	r3, r3, r7
 800b558:	2200      	movs	r2, #0
 800b55a:	701a      	strb	r2, [r3, #0]
 800b55c:	e07d      	b.n	800b65a <UART_SetConfig+0x22a>
 800b55e:	231b      	movs	r3, #27
 800b560:	2218      	movs	r2, #24
 800b562:	189b      	adds	r3, r3, r2
 800b564:	19db      	adds	r3, r3, r7
 800b566:	2202      	movs	r2, #2
 800b568:	701a      	strb	r2, [r3, #0]
 800b56a:	e076      	b.n	800b65a <UART_SetConfig+0x22a>
 800b56c:	231b      	movs	r3, #27
 800b56e:	2218      	movs	r2, #24
 800b570:	189b      	adds	r3, r3, r2
 800b572:	19db      	adds	r3, r3, r7
 800b574:	2204      	movs	r2, #4
 800b576:	701a      	strb	r2, [r3, #0]
 800b578:	e06f      	b.n	800b65a <UART_SetConfig+0x22a>
 800b57a:	231b      	movs	r3, #27
 800b57c:	2218      	movs	r2, #24
 800b57e:	189b      	adds	r3, r3, r2
 800b580:	19db      	adds	r3, r3, r7
 800b582:	2208      	movs	r2, #8
 800b584:	701a      	strb	r2, [r3, #0]
 800b586:	e068      	b.n	800b65a <UART_SetConfig+0x22a>
 800b588:	231b      	movs	r3, #27
 800b58a:	2218      	movs	r2, #24
 800b58c:	189b      	adds	r3, r3, r2
 800b58e:	19db      	adds	r3, r3, r7
 800b590:	2210      	movs	r2, #16
 800b592:	701a      	strb	r2, [r3, #0]
 800b594:	e061      	b.n	800b65a <UART_SetConfig+0x22a>
 800b596:	69fb      	ldr	r3, [r7, #28]
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	4a7c      	ldr	r2, [pc, #496]	@ (800b78c <UART_SetConfig+0x35c>)
 800b59c:	4293      	cmp	r3, r2
 800b59e:	d106      	bne.n	800b5ae <UART_SetConfig+0x17e>
 800b5a0:	231b      	movs	r3, #27
 800b5a2:	2218      	movs	r2, #24
 800b5a4:	189b      	adds	r3, r3, r2
 800b5a6:	19db      	adds	r3, r3, r7
 800b5a8:	2200      	movs	r2, #0
 800b5aa:	701a      	strb	r2, [r3, #0]
 800b5ac:	e055      	b.n	800b65a <UART_SetConfig+0x22a>
 800b5ae:	69fb      	ldr	r3, [r7, #28]
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	4a77      	ldr	r2, [pc, #476]	@ (800b790 <UART_SetConfig+0x360>)
 800b5b4:	4293      	cmp	r3, r2
 800b5b6:	d106      	bne.n	800b5c6 <UART_SetConfig+0x196>
 800b5b8:	231b      	movs	r3, #27
 800b5ba:	2218      	movs	r2, #24
 800b5bc:	189b      	adds	r3, r3, r2
 800b5be:	19db      	adds	r3, r3, r7
 800b5c0:	2200      	movs	r2, #0
 800b5c2:	701a      	strb	r2, [r3, #0]
 800b5c4:	e049      	b.n	800b65a <UART_SetConfig+0x22a>
 800b5c6:	69fb      	ldr	r3, [r7, #28]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	4a6b      	ldr	r2, [pc, #428]	@ (800b778 <UART_SetConfig+0x348>)
 800b5cc:	4293      	cmp	r3, r2
 800b5ce:	d13e      	bne.n	800b64e <UART_SetConfig+0x21e>
 800b5d0:	4b6c      	ldr	r3, [pc, #432]	@ (800b784 <UART_SetConfig+0x354>)
 800b5d2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b5d4:	23c0      	movs	r3, #192	@ 0xc0
 800b5d6:	011b      	lsls	r3, r3, #4
 800b5d8:	4013      	ands	r3, r2
 800b5da:	22c0      	movs	r2, #192	@ 0xc0
 800b5dc:	0112      	lsls	r2, r2, #4
 800b5de:	4293      	cmp	r3, r2
 800b5e0:	d027      	beq.n	800b632 <UART_SetConfig+0x202>
 800b5e2:	22c0      	movs	r2, #192	@ 0xc0
 800b5e4:	0112      	lsls	r2, r2, #4
 800b5e6:	4293      	cmp	r3, r2
 800b5e8:	d82a      	bhi.n	800b640 <UART_SetConfig+0x210>
 800b5ea:	2280      	movs	r2, #128	@ 0x80
 800b5ec:	0112      	lsls	r2, r2, #4
 800b5ee:	4293      	cmp	r3, r2
 800b5f0:	d011      	beq.n	800b616 <UART_SetConfig+0x1e6>
 800b5f2:	2280      	movs	r2, #128	@ 0x80
 800b5f4:	0112      	lsls	r2, r2, #4
 800b5f6:	4293      	cmp	r3, r2
 800b5f8:	d822      	bhi.n	800b640 <UART_SetConfig+0x210>
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d004      	beq.n	800b608 <UART_SetConfig+0x1d8>
 800b5fe:	2280      	movs	r2, #128	@ 0x80
 800b600:	00d2      	lsls	r2, r2, #3
 800b602:	4293      	cmp	r3, r2
 800b604:	d00e      	beq.n	800b624 <UART_SetConfig+0x1f4>
 800b606:	e01b      	b.n	800b640 <UART_SetConfig+0x210>
 800b608:	231b      	movs	r3, #27
 800b60a:	2218      	movs	r2, #24
 800b60c:	189b      	adds	r3, r3, r2
 800b60e:	19db      	adds	r3, r3, r7
 800b610:	2200      	movs	r2, #0
 800b612:	701a      	strb	r2, [r3, #0]
 800b614:	e021      	b.n	800b65a <UART_SetConfig+0x22a>
 800b616:	231b      	movs	r3, #27
 800b618:	2218      	movs	r2, #24
 800b61a:	189b      	adds	r3, r3, r2
 800b61c:	19db      	adds	r3, r3, r7
 800b61e:	2202      	movs	r2, #2
 800b620:	701a      	strb	r2, [r3, #0]
 800b622:	e01a      	b.n	800b65a <UART_SetConfig+0x22a>
 800b624:	231b      	movs	r3, #27
 800b626:	2218      	movs	r2, #24
 800b628:	189b      	adds	r3, r3, r2
 800b62a:	19db      	adds	r3, r3, r7
 800b62c:	2204      	movs	r2, #4
 800b62e:	701a      	strb	r2, [r3, #0]
 800b630:	e013      	b.n	800b65a <UART_SetConfig+0x22a>
 800b632:	231b      	movs	r3, #27
 800b634:	2218      	movs	r2, #24
 800b636:	189b      	adds	r3, r3, r2
 800b638:	19db      	adds	r3, r3, r7
 800b63a:	2208      	movs	r2, #8
 800b63c:	701a      	strb	r2, [r3, #0]
 800b63e:	e00c      	b.n	800b65a <UART_SetConfig+0x22a>
 800b640:	231b      	movs	r3, #27
 800b642:	2218      	movs	r2, #24
 800b644:	189b      	adds	r3, r3, r2
 800b646:	19db      	adds	r3, r3, r7
 800b648:	2210      	movs	r2, #16
 800b64a:	701a      	strb	r2, [r3, #0]
 800b64c:	e005      	b.n	800b65a <UART_SetConfig+0x22a>
 800b64e:	231b      	movs	r3, #27
 800b650:	2218      	movs	r2, #24
 800b652:	189b      	adds	r3, r3, r2
 800b654:	19db      	adds	r3, r3, r7
 800b656:	2210      	movs	r2, #16
 800b658:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b65a:	69fb      	ldr	r3, [r7, #28]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	4a46      	ldr	r2, [pc, #280]	@ (800b778 <UART_SetConfig+0x348>)
 800b660:	4293      	cmp	r3, r2
 800b662:	d000      	beq.n	800b666 <UART_SetConfig+0x236>
 800b664:	e09a      	b.n	800b79c <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b666:	231b      	movs	r3, #27
 800b668:	2218      	movs	r2, #24
 800b66a:	189b      	adds	r3, r3, r2
 800b66c:	19db      	adds	r3, r3, r7
 800b66e:	781b      	ldrb	r3, [r3, #0]
 800b670:	2b08      	cmp	r3, #8
 800b672:	d01d      	beq.n	800b6b0 <UART_SetConfig+0x280>
 800b674:	dc20      	bgt.n	800b6b8 <UART_SetConfig+0x288>
 800b676:	2b04      	cmp	r3, #4
 800b678:	d015      	beq.n	800b6a6 <UART_SetConfig+0x276>
 800b67a:	dc1d      	bgt.n	800b6b8 <UART_SetConfig+0x288>
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d002      	beq.n	800b686 <UART_SetConfig+0x256>
 800b680:	2b02      	cmp	r3, #2
 800b682:	d005      	beq.n	800b690 <UART_SetConfig+0x260>
 800b684:	e018      	b.n	800b6b8 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b686:	f7fe fec1 	bl	800a40c <HAL_RCC_GetPCLK1Freq>
 800b68a:	0003      	movs	r3, r0
 800b68c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800b68e:	e01c      	b.n	800b6ca <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b690:	4b3c      	ldr	r3, [pc, #240]	@ (800b784 <UART_SetConfig+0x354>)
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	2210      	movs	r2, #16
 800b696:	4013      	ands	r3, r2
 800b698:	d002      	beq.n	800b6a0 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800b69a:	4b3e      	ldr	r3, [pc, #248]	@ (800b794 <UART_SetConfig+0x364>)
 800b69c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b69e:	e014      	b.n	800b6ca <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 800b6a0:	4b3d      	ldr	r3, [pc, #244]	@ (800b798 <UART_SetConfig+0x368>)
 800b6a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800b6a4:	e011      	b.n	800b6ca <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b6a6:	f7fe fe01 	bl	800a2ac <HAL_RCC_GetSysClockFreq>
 800b6aa:	0003      	movs	r3, r0
 800b6ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800b6ae:	e00c      	b.n	800b6ca <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b6b0:	2380      	movs	r3, #128	@ 0x80
 800b6b2:	021b      	lsls	r3, r3, #8
 800b6b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800b6b6:	e008      	b.n	800b6ca <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 800b6b8:	2300      	movs	r3, #0
 800b6ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 800b6bc:	231a      	movs	r3, #26
 800b6be:	2218      	movs	r2, #24
 800b6c0:	189b      	adds	r3, r3, r2
 800b6c2:	19db      	adds	r3, r3, r7
 800b6c4:	2201      	movs	r2, #1
 800b6c6:	701a      	strb	r2, [r3, #0]
        break;
 800b6c8:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b6ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d100      	bne.n	800b6d2 <UART_SetConfig+0x2a2>
 800b6d0:	e133      	b.n	800b93a <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800b6d2:	69fb      	ldr	r3, [r7, #28]
 800b6d4:	685a      	ldr	r2, [r3, #4]
 800b6d6:	0013      	movs	r3, r2
 800b6d8:	005b      	lsls	r3, r3, #1
 800b6da:	189b      	adds	r3, r3, r2
 800b6dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b6de:	429a      	cmp	r2, r3
 800b6e0:	d305      	bcc.n	800b6ee <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 800b6e2:	69fb      	ldr	r3, [r7, #28]
 800b6e4:	685b      	ldr	r3, [r3, #4]
 800b6e6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800b6e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b6ea:	429a      	cmp	r2, r3
 800b6ec:	d906      	bls.n	800b6fc <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 800b6ee:	231a      	movs	r3, #26
 800b6f0:	2218      	movs	r2, #24
 800b6f2:	189b      	adds	r3, r3, r2
 800b6f4:	19db      	adds	r3, r3, r7
 800b6f6:	2201      	movs	r2, #1
 800b6f8:	701a      	strb	r2, [r3, #0]
 800b6fa:	e11e      	b.n	800b93a <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800b6fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b6fe:	613b      	str	r3, [r7, #16]
 800b700:	2300      	movs	r3, #0
 800b702:	617b      	str	r3, [r7, #20]
 800b704:	6939      	ldr	r1, [r7, #16]
 800b706:	697a      	ldr	r2, [r7, #20]
 800b708:	000b      	movs	r3, r1
 800b70a:	0e1b      	lsrs	r3, r3, #24
 800b70c:	0010      	movs	r0, r2
 800b70e:	0205      	lsls	r5, r0, #8
 800b710:	431d      	orrs	r5, r3
 800b712:	000b      	movs	r3, r1
 800b714:	021c      	lsls	r4, r3, #8
 800b716:	69fb      	ldr	r3, [r7, #28]
 800b718:	685b      	ldr	r3, [r3, #4]
 800b71a:	085b      	lsrs	r3, r3, #1
 800b71c:	60bb      	str	r3, [r7, #8]
 800b71e:	2300      	movs	r3, #0
 800b720:	60fb      	str	r3, [r7, #12]
 800b722:	68b8      	ldr	r0, [r7, #8]
 800b724:	68f9      	ldr	r1, [r7, #12]
 800b726:	1900      	adds	r0, r0, r4
 800b728:	4169      	adcs	r1, r5
 800b72a:	69fb      	ldr	r3, [r7, #28]
 800b72c:	685b      	ldr	r3, [r3, #4]
 800b72e:	603b      	str	r3, [r7, #0]
 800b730:	2300      	movs	r3, #0
 800b732:	607b      	str	r3, [r7, #4]
 800b734:	683a      	ldr	r2, [r7, #0]
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	f7f4 fef0 	bl	800051c <__aeabi_uldivmod>
 800b73c:	0002      	movs	r2, r0
 800b73e:	000b      	movs	r3, r1
 800b740:	0013      	movs	r3, r2
 800b742:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b744:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b746:	23c0      	movs	r3, #192	@ 0xc0
 800b748:	009b      	lsls	r3, r3, #2
 800b74a:	429a      	cmp	r2, r3
 800b74c:	d309      	bcc.n	800b762 <UART_SetConfig+0x332>
 800b74e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b750:	2380      	movs	r3, #128	@ 0x80
 800b752:	035b      	lsls	r3, r3, #13
 800b754:	429a      	cmp	r2, r3
 800b756:	d204      	bcs.n	800b762 <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 800b758:	69fb      	ldr	r3, [r7, #28]
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b75e:	60da      	str	r2, [r3, #12]
 800b760:	e0eb      	b.n	800b93a <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 800b762:	231a      	movs	r3, #26
 800b764:	2218      	movs	r2, #24
 800b766:	189b      	adds	r3, r3, r2
 800b768:	19db      	adds	r3, r3, r7
 800b76a:	2201      	movs	r2, #1
 800b76c:	701a      	strb	r2, [r3, #0]
 800b76e:	e0e4      	b.n	800b93a <UART_SetConfig+0x50a>
 800b770:	efff69f3 	.word	0xefff69f3
 800b774:	ffffcfff 	.word	0xffffcfff
 800b778:	40004800 	.word	0x40004800
 800b77c:	fffff4ff 	.word	0xfffff4ff
 800b780:	40013800 	.word	0x40013800
 800b784:	40021000 	.word	0x40021000
 800b788:	40004400 	.word	0x40004400
 800b78c:	40004c00 	.word	0x40004c00
 800b790:	40005000 	.word	0x40005000
 800b794:	003d0900 	.word	0x003d0900
 800b798:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b79c:	69fb      	ldr	r3, [r7, #28]
 800b79e:	69da      	ldr	r2, [r3, #28]
 800b7a0:	2380      	movs	r3, #128	@ 0x80
 800b7a2:	021b      	lsls	r3, r3, #8
 800b7a4:	429a      	cmp	r2, r3
 800b7a6:	d000      	beq.n	800b7aa <UART_SetConfig+0x37a>
 800b7a8:	e070      	b.n	800b88c <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 800b7aa:	231b      	movs	r3, #27
 800b7ac:	2218      	movs	r2, #24
 800b7ae:	189b      	adds	r3, r3, r2
 800b7b0:	19db      	adds	r3, r3, r7
 800b7b2:	781b      	ldrb	r3, [r3, #0]
 800b7b4:	2b08      	cmp	r3, #8
 800b7b6:	d822      	bhi.n	800b7fe <UART_SetConfig+0x3ce>
 800b7b8:	009a      	lsls	r2, r3, #2
 800b7ba:	4b67      	ldr	r3, [pc, #412]	@ (800b958 <UART_SetConfig+0x528>)
 800b7bc:	18d3      	adds	r3, r2, r3
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b7c2:	f7fe fe23 	bl	800a40c <HAL_RCC_GetPCLK1Freq>
 800b7c6:	0003      	movs	r3, r0
 800b7c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800b7ca:	e021      	b.n	800b810 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b7cc:	f7fe fe34 	bl	800a438 <HAL_RCC_GetPCLK2Freq>
 800b7d0:	0003      	movs	r3, r0
 800b7d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800b7d4:	e01c      	b.n	800b810 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b7d6:	4b61      	ldr	r3, [pc, #388]	@ (800b95c <UART_SetConfig+0x52c>)
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	2210      	movs	r2, #16
 800b7dc:	4013      	ands	r3, r2
 800b7de:	d002      	beq.n	800b7e6 <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800b7e0:	4b5f      	ldr	r3, [pc, #380]	@ (800b960 <UART_SetConfig+0x530>)
 800b7e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b7e4:	e014      	b.n	800b810 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 800b7e6:	4b5f      	ldr	r3, [pc, #380]	@ (800b964 <UART_SetConfig+0x534>)
 800b7e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800b7ea:	e011      	b.n	800b810 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b7ec:	f7fe fd5e 	bl	800a2ac <HAL_RCC_GetSysClockFreq>
 800b7f0:	0003      	movs	r3, r0
 800b7f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800b7f4:	e00c      	b.n	800b810 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b7f6:	2380      	movs	r3, #128	@ 0x80
 800b7f8:	021b      	lsls	r3, r3, #8
 800b7fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800b7fc:	e008      	b.n	800b810 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 800b7fe:	2300      	movs	r3, #0
 800b800:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 800b802:	231a      	movs	r3, #26
 800b804:	2218      	movs	r2, #24
 800b806:	189b      	adds	r3, r3, r2
 800b808:	19db      	adds	r3, r3, r7
 800b80a:	2201      	movs	r2, #1
 800b80c:	701a      	strb	r2, [r3, #0]
        break;
 800b80e:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b810:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b812:	2b00      	cmp	r3, #0
 800b814:	d100      	bne.n	800b818 <UART_SetConfig+0x3e8>
 800b816:	e090      	b.n	800b93a <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b818:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b81a:	005a      	lsls	r2, r3, #1
 800b81c:	69fb      	ldr	r3, [r7, #28]
 800b81e:	685b      	ldr	r3, [r3, #4]
 800b820:	085b      	lsrs	r3, r3, #1
 800b822:	18d2      	adds	r2, r2, r3
 800b824:	69fb      	ldr	r3, [r7, #28]
 800b826:	685b      	ldr	r3, [r3, #4]
 800b828:	0019      	movs	r1, r3
 800b82a:	0010      	movs	r0, r2
 800b82c:	f7f4 fc88 	bl	8000140 <__udivsi3>
 800b830:	0003      	movs	r3, r0
 800b832:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b834:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b836:	2b0f      	cmp	r3, #15
 800b838:	d921      	bls.n	800b87e <UART_SetConfig+0x44e>
 800b83a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b83c:	2380      	movs	r3, #128	@ 0x80
 800b83e:	025b      	lsls	r3, r3, #9
 800b840:	429a      	cmp	r2, r3
 800b842:	d21c      	bcs.n	800b87e <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b844:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b846:	b29a      	uxth	r2, r3
 800b848:	200e      	movs	r0, #14
 800b84a:	2418      	movs	r4, #24
 800b84c:	1903      	adds	r3, r0, r4
 800b84e:	19db      	adds	r3, r3, r7
 800b850:	210f      	movs	r1, #15
 800b852:	438a      	bics	r2, r1
 800b854:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b856:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b858:	085b      	lsrs	r3, r3, #1
 800b85a:	b29b      	uxth	r3, r3
 800b85c:	2207      	movs	r2, #7
 800b85e:	4013      	ands	r3, r2
 800b860:	b299      	uxth	r1, r3
 800b862:	1903      	adds	r3, r0, r4
 800b864:	19db      	adds	r3, r3, r7
 800b866:	1902      	adds	r2, r0, r4
 800b868:	19d2      	adds	r2, r2, r7
 800b86a:	8812      	ldrh	r2, [r2, #0]
 800b86c:	430a      	orrs	r2, r1
 800b86e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800b870:	69fb      	ldr	r3, [r7, #28]
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	1902      	adds	r2, r0, r4
 800b876:	19d2      	adds	r2, r2, r7
 800b878:	8812      	ldrh	r2, [r2, #0]
 800b87a:	60da      	str	r2, [r3, #12]
 800b87c:	e05d      	b.n	800b93a <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 800b87e:	231a      	movs	r3, #26
 800b880:	2218      	movs	r2, #24
 800b882:	189b      	adds	r3, r3, r2
 800b884:	19db      	adds	r3, r3, r7
 800b886:	2201      	movs	r2, #1
 800b888:	701a      	strb	r2, [r3, #0]
 800b88a:	e056      	b.n	800b93a <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b88c:	231b      	movs	r3, #27
 800b88e:	2218      	movs	r2, #24
 800b890:	189b      	adds	r3, r3, r2
 800b892:	19db      	adds	r3, r3, r7
 800b894:	781b      	ldrb	r3, [r3, #0]
 800b896:	2b08      	cmp	r3, #8
 800b898:	d822      	bhi.n	800b8e0 <UART_SetConfig+0x4b0>
 800b89a:	009a      	lsls	r2, r3, #2
 800b89c:	4b32      	ldr	r3, [pc, #200]	@ (800b968 <UART_SetConfig+0x538>)
 800b89e:	18d3      	adds	r3, r2, r3
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b8a4:	f7fe fdb2 	bl	800a40c <HAL_RCC_GetPCLK1Freq>
 800b8a8:	0003      	movs	r3, r0
 800b8aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800b8ac:	e021      	b.n	800b8f2 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b8ae:	f7fe fdc3 	bl	800a438 <HAL_RCC_GetPCLK2Freq>
 800b8b2:	0003      	movs	r3, r0
 800b8b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800b8b6:	e01c      	b.n	800b8f2 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b8b8:	4b28      	ldr	r3, [pc, #160]	@ (800b95c <UART_SetConfig+0x52c>)
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	2210      	movs	r2, #16
 800b8be:	4013      	ands	r3, r2
 800b8c0:	d002      	beq.n	800b8c8 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800b8c2:	4b27      	ldr	r3, [pc, #156]	@ (800b960 <UART_SetConfig+0x530>)
 800b8c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b8c6:	e014      	b.n	800b8f2 <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 800b8c8:	4b26      	ldr	r3, [pc, #152]	@ (800b964 <UART_SetConfig+0x534>)
 800b8ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800b8cc:	e011      	b.n	800b8f2 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b8ce:	f7fe fced 	bl	800a2ac <HAL_RCC_GetSysClockFreq>
 800b8d2:	0003      	movs	r3, r0
 800b8d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800b8d6:	e00c      	b.n	800b8f2 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b8d8:	2380      	movs	r3, #128	@ 0x80
 800b8da:	021b      	lsls	r3, r3, #8
 800b8dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800b8de:	e008      	b.n	800b8f2 <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 800b8e0:	2300      	movs	r3, #0
 800b8e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 800b8e4:	231a      	movs	r3, #26
 800b8e6:	2218      	movs	r2, #24
 800b8e8:	189b      	adds	r3, r3, r2
 800b8ea:	19db      	adds	r3, r3, r7
 800b8ec:	2201      	movs	r2, #1
 800b8ee:	701a      	strb	r2, [r3, #0]
        break;
 800b8f0:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800b8f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d020      	beq.n	800b93a <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b8f8:	69fb      	ldr	r3, [r7, #28]
 800b8fa:	685b      	ldr	r3, [r3, #4]
 800b8fc:	085a      	lsrs	r2, r3, #1
 800b8fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b900:	18d2      	adds	r2, r2, r3
 800b902:	69fb      	ldr	r3, [r7, #28]
 800b904:	685b      	ldr	r3, [r3, #4]
 800b906:	0019      	movs	r1, r3
 800b908:	0010      	movs	r0, r2
 800b90a:	f7f4 fc19 	bl	8000140 <__udivsi3>
 800b90e:	0003      	movs	r3, r0
 800b910:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b912:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b914:	2b0f      	cmp	r3, #15
 800b916:	d90a      	bls.n	800b92e <UART_SetConfig+0x4fe>
 800b918:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b91a:	2380      	movs	r3, #128	@ 0x80
 800b91c:	025b      	lsls	r3, r3, #9
 800b91e:	429a      	cmp	r2, r3
 800b920:	d205      	bcs.n	800b92e <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b922:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b924:	b29a      	uxth	r2, r3
 800b926:	69fb      	ldr	r3, [r7, #28]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	60da      	str	r2, [r3, #12]
 800b92c:	e005      	b.n	800b93a <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 800b92e:	231a      	movs	r3, #26
 800b930:	2218      	movs	r2, #24
 800b932:	189b      	adds	r3, r3, r2
 800b934:	19db      	adds	r3, r3, r7
 800b936:	2201      	movs	r2, #1
 800b938:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b93a:	69fb      	ldr	r3, [r7, #28]
 800b93c:	2200      	movs	r2, #0
 800b93e:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800b940:	69fb      	ldr	r3, [r7, #28]
 800b942:	2200      	movs	r2, #0
 800b944:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800b946:	231a      	movs	r3, #26
 800b948:	2218      	movs	r2, #24
 800b94a:	189b      	adds	r3, r3, r2
 800b94c:	19db      	adds	r3, r3, r7
 800b94e:	781b      	ldrb	r3, [r3, #0]
}
 800b950:	0018      	movs	r0, r3
 800b952:	46bd      	mov	sp, r7
 800b954:	b00e      	add	sp, #56	@ 0x38
 800b956:	bdb0      	pop	{r4, r5, r7, pc}
 800b958:	0800fba0 	.word	0x0800fba0
 800b95c:	40021000 	.word	0x40021000
 800b960:	003d0900 	.word	0x003d0900
 800b964:	00f42400 	.word	0x00f42400
 800b968:	0800fbc4 	.word	0x0800fbc4

0800b96c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b96c:	b580      	push	{r7, lr}
 800b96e:	b082      	sub	sp, #8
 800b970:	af00      	add	r7, sp, #0
 800b972:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b978:	2201      	movs	r2, #1
 800b97a:	4013      	ands	r3, r2
 800b97c:	d00b      	beq.n	800b996 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	685b      	ldr	r3, [r3, #4]
 800b984:	4a4a      	ldr	r2, [pc, #296]	@ (800bab0 <UART_AdvFeatureConfig+0x144>)
 800b986:	4013      	ands	r3, r2
 800b988:	0019      	movs	r1, r3
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	430a      	orrs	r2, r1
 800b994:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b99a:	2202      	movs	r2, #2
 800b99c:	4013      	ands	r3, r2
 800b99e:	d00b      	beq.n	800b9b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	685b      	ldr	r3, [r3, #4]
 800b9a6:	4a43      	ldr	r2, [pc, #268]	@ (800bab4 <UART_AdvFeatureConfig+0x148>)
 800b9a8:	4013      	ands	r3, r2
 800b9aa:	0019      	movs	r1, r3
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	430a      	orrs	r2, r1
 800b9b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b9bc:	2204      	movs	r2, #4
 800b9be:	4013      	ands	r3, r2
 800b9c0:	d00b      	beq.n	800b9da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	685b      	ldr	r3, [r3, #4]
 800b9c8:	4a3b      	ldr	r2, [pc, #236]	@ (800bab8 <UART_AdvFeatureConfig+0x14c>)
 800b9ca:	4013      	ands	r3, r2
 800b9cc:	0019      	movs	r1, r3
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	430a      	orrs	r2, r1
 800b9d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b9de:	2208      	movs	r2, #8
 800b9e0:	4013      	ands	r3, r2
 800b9e2:	d00b      	beq.n	800b9fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	685b      	ldr	r3, [r3, #4]
 800b9ea:	4a34      	ldr	r2, [pc, #208]	@ (800babc <UART_AdvFeatureConfig+0x150>)
 800b9ec:	4013      	ands	r3, r2
 800b9ee:	0019      	movs	r1, r3
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	430a      	orrs	r2, r1
 800b9fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba00:	2210      	movs	r2, #16
 800ba02:	4013      	ands	r3, r2
 800ba04:	d00b      	beq.n	800ba1e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	689b      	ldr	r3, [r3, #8]
 800ba0c:	4a2c      	ldr	r2, [pc, #176]	@ (800bac0 <UART_AdvFeatureConfig+0x154>)
 800ba0e:	4013      	ands	r3, r2
 800ba10:	0019      	movs	r1, r3
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	430a      	orrs	r2, r1
 800ba1c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba22:	2220      	movs	r2, #32
 800ba24:	4013      	ands	r3, r2
 800ba26:	d00b      	beq.n	800ba40 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	689b      	ldr	r3, [r3, #8]
 800ba2e:	4a25      	ldr	r2, [pc, #148]	@ (800bac4 <UART_AdvFeatureConfig+0x158>)
 800ba30:	4013      	ands	r3, r2
 800ba32:	0019      	movs	r1, r3
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	430a      	orrs	r2, r1
 800ba3e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba44:	2240      	movs	r2, #64	@ 0x40
 800ba46:	4013      	ands	r3, r2
 800ba48:	d01d      	beq.n	800ba86 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	685b      	ldr	r3, [r3, #4]
 800ba50:	4a1d      	ldr	r2, [pc, #116]	@ (800bac8 <UART_AdvFeatureConfig+0x15c>)
 800ba52:	4013      	ands	r3, r2
 800ba54:	0019      	movs	r1, r3
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	430a      	orrs	r2, r1
 800ba60:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ba66:	2380      	movs	r3, #128	@ 0x80
 800ba68:	035b      	lsls	r3, r3, #13
 800ba6a:	429a      	cmp	r2, r3
 800ba6c:	d10b      	bne.n	800ba86 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	685b      	ldr	r3, [r3, #4]
 800ba74:	4a15      	ldr	r2, [pc, #84]	@ (800bacc <UART_AdvFeatureConfig+0x160>)
 800ba76:	4013      	ands	r3, r2
 800ba78:	0019      	movs	r1, r3
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	430a      	orrs	r2, r1
 800ba84:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba8a:	2280      	movs	r2, #128	@ 0x80
 800ba8c:	4013      	ands	r3, r2
 800ba8e:	d00b      	beq.n	800baa8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	685b      	ldr	r3, [r3, #4]
 800ba96:	4a0e      	ldr	r2, [pc, #56]	@ (800bad0 <UART_AdvFeatureConfig+0x164>)
 800ba98:	4013      	ands	r3, r2
 800ba9a:	0019      	movs	r1, r3
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	430a      	orrs	r2, r1
 800baa6:	605a      	str	r2, [r3, #4]
  }
}
 800baa8:	46c0      	nop			@ (mov r8, r8)
 800baaa:	46bd      	mov	sp, r7
 800baac:	b002      	add	sp, #8
 800baae:	bd80      	pop	{r7, pc}
 800bab0:	fffdffff 	.word	0xfffdffff
 800bab4:	fffeffff 	.word	0xfffeffff
 800bab8:	fffbffff 	.word	0xfffbffff
 800babc:	ffff7fff 	.word	0xffff7fff
 800bac0:	ffffefff 	.word	0xffffefff
 800bac4:	ffffdfff 	.word	0xffffdfff
 800bac8:	ffefffff 	.word	0xffefffff
 800bacc:	ff9fffff 	.word	0xff9fffff
 800bad0:	fff7ffff 	.word	0xfff7ffff

0800bad4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bad4:	b580      	push	{r7, lr}
 800bad6:	b092      	sub	sp, #72	@ 0x48
 800bad8:	af02      	add	r7, sp, #8
 800bada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	2284      	movs	r2, #132	@ 0x84
 800bae0:	2100      	movs	r1, #0
 800bae2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bae4:	f7fa fe76 	bl	80067d4 <HAL_GetTick>
 800bae8:	0003      	movs	r3, r0
 800baea:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	2208      	movs	r2, #8
 800baf4:	4013      	ands	r3, r2
 800baf6:	2b08      	cmp	r3, #8
 800baf8:	d12c      	bne.n	800bb54 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bafa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bafc:	2280      	movs	r2, #128	@ 0x80
 800bafe:	0391      	lsls	r1, r2, #14
 800bb00:	6878      	ldr	r0, [r7, #4]
 800bb02:	4a46      	ldr	r2, [pc, #280]	@ (800bc1c <UART_CheckIdleState+0x148>)
 800bb04:	9200      	str	r2, [sp, #0]
 800bb06:	2200      	movs	r2, #0
 800bb08:	f000 f88c 	bl	800bc24 <UART_WaitOnFlagUntilTimeout>
 800bb0c:	1e03      	subs	r3, r0, #0
 800bb0e:	d021      	beq.n	800bb54 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bb10:	f3ef 8310 	mrs	r3, PRIMASK
 800bb14:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800bb16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800bb18:	63bb      	str	r3, [r7, #56]	@ 0x38
 800bb1a:	2301      	movs	r3, #1
 800bb1c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bb1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb20:	f383 8810 	msr	PRIMASK, r3
}
 800bb24:	46c0      	nop			@ (mov r8, r8)
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	681a      	ldr	r2, [r3, #0]
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	2180      	movs	r1, #128	@ 0x80
 800bb32:	438a      	bics	r2, r1
 800bb34:	601a      	str	r2, [r3, #0]
 800bb36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb38:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bb3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb3c:	f383 8810 	msr	PRIMASK, r3
}
 800bb40:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	2220      	movs	r2, #32
 800bb46:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	2278      	movs	r2, #120	@ 0x78
 800bb4c:	2100      	movs	r1, #0
 800bb4e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bb50:	2303      	movs	r3, #3
 800bb52:	e05f      	b.n	800bc14 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	2204      	movs	r2, #4
 800bb5c:	4013      	ands	r3, r2
 800bb5e:	2b04      	cmp	r3, #4
 800bb60:	d146      	bne.n	800bbf0 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bb62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bb64:	2280      	movs	r2, #128	@ 0x80
 800bb66:	03d1      	lsls	r1, r2, #15
 800bb68:	6878      	ldr	r0, [r7, #4]
 800bb6a:	4a2c      	ldr	r2, [pc, #176]	@ (800bc1c <UART_CheckIdleState+0x148>)
 800bb6c:	9200      	str	r2, [sp, #0]
 800bb6e:	2200      	movs	r2, #0
 800bb70:	f000 f858 	bl	800bc24 <UART_WaitOnFlagUntilTimeout>
 800bb74:	1e03      	subs	r3, r0, #0
 800bb76:	d03b      	beq.n	800bbf0 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bb78:	f3ef 8310 	mrs	r3, PRIMASK
 800bb7c:	60fb      	str	r3, [r7, #12]
  return(result);
 800bb7e:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bb80:	637b      	str	r3, [r7, #52]	@ 0x34
 800bb82:	2301      	movs	r3, #1
 800bb84:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bb86:	693b      	ldr	r3, [r7, #16]
 800bb88:	f383 8810 	msr	PRIMASK, r3
}
 800bb8c:	46c0      	nop			@ (mov r8, r8)
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	681a      	ldr	r2, [r3, #0]
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	4921      	ldr	r1, [pc, #132]	@ (800bc20 <UART_CheckIdleState+0x14c>)
 800bb9a:	400a      	ands	r2, r1
 800bb9c:	601a      	str	r2, [r3, #0]
 800bb9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bba0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bba2:	697b      	ldr	r3, [r7, #20]
 800bba4:	f383 8810 	msr	PRIMASK, r3
}
 800bba8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bbaa:	f3ef 8310 	mrs	r3, PRIMASK
 800bbae:	61bb      	str	r3, [r7, #24]
  return(result);
 800bbb0:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bbb2:	633b      	str	r3, [r7, #48]	@ 0x30
 800bbb4:	2301      	movs	r3, #1
 800bbb6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bbb8:	69fb      	ldr	r3, [r7, #28]
 800bbba:	f383 8810 	msr	PRIMASK, r3
}
 800bbbe:	46c0      	nop			@ (mov r8, r8)
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	689a      	ldr	r2, [r3, #8]
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	2101      	movs	r1, #1
 800bbcc:	438a      	bics	r2, r1
 800bbce:	609a      	str	r2, [r3, #8]
 800bbd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bbd2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bbd4:	6a3b      	ldr	r3, [r7, #32]
 800bbd6:	f383 8810 	msr	PRIMASK, r3
}
 800bbda:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	2280      	movs	r2, #128	@ 0x80
 800bbe0:	2120      	movs	r1, #32
 800bbe2:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	2278      	movs	r2, #120	@ 0x78
 800bbe8:	2100      	movs	r1, #0
 800bbea:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bbec:	2303      	movs	r3, #3
 800bbee:	e011      	b.n	800bc14 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	2220      	movs	r2, #32
 800bbf4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	2280      	movs	r2, #128	@ 0x80
 800bbfa:	2120      	movs	r1, #32
 800bbfc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	2200      	movs	r2, #0
 800bc02:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	2200      	movs	r2, #0
 800bc08:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	2278      	movs	r2, #120	@ 0x78
 800bc0e:	2100      	movs	r1, #0
 800bc10:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800bc12:	2300      	movs	r3, #0
}
 800bc14:	0018      	movs	r0, r3
 800bc16:	46bd      	mov	sp, r7
 800bc18:	b010      	add	sp, #64	@ 0x40
 800bc1a:	bd80      	pop	{r7, pc}
 800bc1c:	01ffffff 	.word	0x01ffffff
 800bc20:	fffffedf 	.word	0xfffffedf

0800bc24 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bc24:	b580      	push	{r7, lr}
 800bc26:	b084      	sub	sp, #16
 800bc28:	af00      	add	r7, sp, #0
 800bc2a:	60f8      	str	r0, [r7, #12]
 800bc2c:	60b9      	str	r1, [r7, #8]
 800bc2e:	603b      	str	r3, [r7, #0]
 800bc30:	1dfb      	adds	r3, r7, #7
 800bc32:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bc34:	e04b      	b.n	800bcce <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bc36:	69bb      	ldr	r3, [r7, #24]
 800bc38:	3301      	adds	r3, #1
 800bc3a:	d048      	beq.n	800bcce <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bc3c:	f7fa fdca 	bl	80067d4 <HAL_GetTick>
 800bc40:	0002      	movs	r2, r0
 800bc42:	683b      	ldr	r3, [r7, #0]
 800bc44:	1ad3      	subs	r3, r2, r3
 800bc46:	69ba      	ldr	r2, [r7, #24]
 800bc48:	429a      	cmp	r2, r3
 800bc4a:	d302      	bcc.n	800bc52 <UART_WaitOnFlagUntilTimeout+0x2e>
 800bc4c:	69bb      	ldr	r3, [r7, #24]
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d101      	bne.n	800bc56 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800bc52:	2303      	movs	r3, #3
 800bc54:	e04b      	b.n	800bcee <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	2204      	movs	r2, #4
 800bc5e:	4013      	ands	r3, r2
 800bc60:	d035      	beq.n	800bcce <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	69db      	ldr	r3, [r3, #28]
 800bc68:	2208      	movs	r2, #8
 800bc6a:	4013      	ands	r3, r2
 800bc6c:	2b08      	cmp	r3, #8
 800bc6e:	d111      	bne.n	800bc94 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	2208      	movs	r2, #8
 800bc76:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	0018      	movs	r0, r3
 800bc7c:	f000 f900 	bl	800be80 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	2284      	movs	r2, #132	@ 0x84
 800bc84:	2108      	movs	r1, #8
 800bc86:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	2278      	movs	r2, #120	@ 0x78
 800bc8c:	2100      	movs	r1, #0
 800bc8e:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 800bc90:	2301      	movs	r3, #1
 800bc92:	e02c      	b.n	800bcee <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	69da      	ldr	r2, [r3, #28]
 800bc9a:	2380      	movs	r3, #128	@ 0x80
 800bc9c:	011b      	lsls	r3, r3, #4
 800bc9e:	401a      	ands	r2, r3
 800bca0:	2380      	movs	r3, #128	@ 0x80
 800bca2:	011b      	lsls	r3, r3, #4
 800bca4:	429a      	cmp	r2, r3
 800bca6:	d112      	bne.n	800bcce <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	2280      	movs	r2, #128	@ 0x80
 800bcae:	0112      	lsls	r2, r2, #4
 800bcb0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	0018      	movs	r0, r3
 800bcb6:	f000 f8e3 	bl	800be80 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	2284      	movs	r2, #132	@ 0x84
 800bcbe:	2120      	movs	r1, #32
 800bcc0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	2278      	movs	r2, #120	@ 0x78
 800bcc6:	2100      	movs	r1, #0
 800bcc8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800bcca:	2303      	movs	r3, #3
 800bccc:	e00f      	b.n	800bcee <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	69db      	ldr	r3, [r3, #28]
 800bcd4:	68ba      	ldr	r2, [r7, #8]
 800bcd6:	4013      	ands	r3, r2
 800bcd8:	68ba      	ldr	r2, [r7, #8]
 800bcda:	1ad3      	subs	r3, r2, r3
 800bcdc:	425a      	negs	r2, r3
 800bcde:	4153      	adcs	r3, r2
 800bce0:	b2db      	uxtb	r3, r3
 800bce2:	001a      	movs	r2, r3
 800bce4:	1dfb      	adds	r3, r7, #7
 800bce6:	781b      	ldrb	r3, [r3, #0]
 800bce8:	429a      	cmp	r2, r3
 800bcea:	d0a4      	beq.n	800bc36 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bcec:	2300      	movs	r3, #0
}
 800bcee:	0018      	movs	r0, r3
 800bcf0:	46bd      	mov	sp, r7
 800bcf2:	b004      	add	sp, #16
 800bcf4:	bd80      	pop	{r7, pc}
	...

0800bcf8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bcf8:	b580      	push	{r7, lr}
 800bcfa:	b090      	sub	sp, #64	@ 0x40
 800bcfc:	af00      	add	r7, sp, #0
 800bcfe:	60f8      	str	r0, [r7, #12]
 800bd00:	60b9      	str	r1, [r7, #8]
 800bd02:	1dbb      	adds	r3, r7, #6
 800bd04:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	68ba      	ldr	r2, [r7, #8]
 800bd0a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	1dba      	adds	r2, r7, #6
 800bd10:	2158      	movs	r1, #88	@ 0x58
 800bd12:	8812      	ldrh	r2, [r2, #0]
 800bd14:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	2284      	movs	r2, #132	@ 0x84
 800bd1a:	2100      	movs	r1, #0
 800bd1c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	2280      	movs	r2, #128	@ 0x80
 800bd22:	2122      	movs	r1, #34	@ 0x22
 800bd24:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d028      	beq.n	800bd80 <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bd32:	4a3e      	ldr	r2, [pc, #248]	@ (800be2c <UART_Start_Receive_DMA+0x134>)
 800bd34:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bd3a:	4a3d      	ldr	r2, [pc, #244]	@ (800be30 <UART_Start_Receive_DMA+0x138>)
 800bd3c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bd42:	4a3c      	ldr	r2, [pc, #240]	@ (800be34 <UART_Start_Receive_DMA+0x13c>)
 800bd44:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bd4a:	2200      	movs	r2, #0
 800bd4c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	3324      	adds	r3, #36	@ 0x24
 800bd58:	0019      	movs	r1, r3
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bd5e:	001a      	movs	r2, r3
 800bd60:	1dbb      	adds	r3, r7, #6
 800bd62:	881b      	ldrh	r3, [r3, #0]
 800bd64:	f7fa feba 	bl	8006adc <HAL_DMA_Start_IT>
 800bd68:	1e03      	subs	r3, r0, #0
 800bd6a:	d009      	beq.n	800bd80 <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	2284      	movs	r2, #132	@ 0x84
 800bd70:	2110      	movs	r1, #16
 800bd72:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	2280      	movs	r2, #128	@ 0x80
 800bd78:	2120      	movs	r1, #32
 800bd7a:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 800bd7c:	2301      	movs	r3, #1
 800bd7e:	e050      	b.n	800be22 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	691b      	ldr	r3, [r3, #16]
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d019      	beq.n	800bdbc <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bd88:	f3ef 8310 	mrs	r3, PRIMASK
 800bd8c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 800bd8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bd90:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bd92:	2301      	movs	r3, #1
 800bd94:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bd96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd98:	f383 8810 	msr	PRIMASK, r3
}
 800bd9c:	46c0      	nop			@ (mov r8, r8)
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	681a      	ldr	r2, [r3, #0]
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	2180      	movs	r1, #128	@ 0x80
 800bdaa:	0049      	lsls	r1, r1, #1
 800bdac:	430a      	orrs	r2, r1
 800bdae:	601a      	str	r2, [r3, #0]
 800bdb0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bdb2:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bdb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bdb6:	f383 8810 	msr	PRIMASK, r3
}
 800bdba:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bdbc:	f3ef 8310 	mrs	r3, PRIMASK
 800bdc0:	613b      	str	r3, [r7, #16]
  return(result);
 800bdc2:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bdc4:	63bb      	str	r3, [r7, #56]	@ 0x38
 800bdc6:	2301      	movs	r3, #1
 800bdc8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bdca:	697b      	ldr	r3, [r7, #20]
 800bdcc:	f383 8810 	msr	PRIMASK, r3
}
 800bdd0:	46c0      	nop			@ (mov r8, r8)
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	689a      	ldr	r2, [r3, #8]
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	2101      	movs	r1, #1
 800bdde:	430a      	orrs	r2, r1
 800bde0:	609a      	str	r2, [r3, #8]
 800bde2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bde4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bde6:	69bb      	ldr	r3, [r7, #24]
 800bde8:	f383 8810 	msr	PRIMASK, r3
}
 800bdec:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bdee:	f3ef 8310 	mrs	r3, PRIMASK
 800bdf2:	61fb      	str	r3, [r7, #28]
  return(result);
 800bdf4:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bdf6:	637b      	str	r3, [r7, #52]	@ 0x34
 800bdf8:	2301      	movs	r3, #1
 800bdfa:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bdfc:	6a3b      	ldr	r3, [r7, #32]
 800bdfe:	f383 8810 	msr	PRIMASK, r3
}
 800be02:	46c0      	nop			@ (mov r8, r8)
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	689a      	ldr	r2, [r3, #8]
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	2140      	movs	r1, #64	@ 0x40
 800be10:	430a      	orrs	r2, r1
 800be12:	609a      	str	r2, [r3, #8]
 800be14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800be16:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800be18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be1a:	f383 8810 	msr	PRIMASK, r3
}
 800be1e:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 800be20:	2300      	movs	r3, #0
}
 800be22:	0018      	movs	r0, r3
 800be24:	46bd      	mov	sp, r7
 800be26:	b010      	add	sp, #64	@ 0x40
 800be28:	bd80      	pop	{r7, pc}
 800be2a:	46c0      	nop			@ (mov r8, r8)
 800be2c:	0800c009 	.word	0x0800c009
 800be30:	0800c13d 	.word	0x0800c13d
 800be34:	0800c185 	.word	0x0800c185

0800be38 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800be38:	b580      	push	{r7, lr}
 800be3a:	b086      	sub	sp, #24
 800be3c:	af00      	add	r7, sp, #0
 800be3e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800be40:	f3ef 8310 	mrs	r3, PRIMASK
 800be44:	60bb      	str	r3, [r7, #8]
  return(result);
 800be46:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800be48:	617b      	str	r3, [r7, #20]
 800be4a:	2301      	movs	r3, #1
 800be4c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	f383 8810 	msr	PRIMASK, r3
}
 800be54:	46c0      	nop			@ (mov r8, r8)
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	681a      	ldr	r2, [r3, #0]
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	21c0      	movs	r1, #192	@ 0xc0
 800be62:	438a      	bics	r2, r1
 800be64:	601a      	str	r2, [r3, #0]
 800be66:	697b      	ldr	r3, [r7, #20]
 800be68:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800be6a:	693b      	ldr	r3, [r7, #16]
 800be6c:	f383 8810 	msr	PRIMASK, r3
}
 800be70:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	2220      	movs	r2, #32
 800be76:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800be78:	46c0      	nop			@ (mov r8, r8)
 800be7a:	46bd      	mov	sp, r7
 800be7c:	b006      	add	sp, #24
 800be7e:	bd80      	pop	{r7, pc}

0800be80 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800be80:	b580      	push	{r7, lr}
 800be82:	b08e      	sub	sp, #56	@ 0x38
 800be84:	af00      	add	r7, sp, #0
 800be86:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800be88:	f3ef 8310 	mrs	r3, PRIMASK
 800be8c:	617b      	str	r3, [r7, #20]
  return(result);
 800be8e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800be90:	637b      	str	r3, [r7, #52]	@ 0x34
 800be92:	2301      	movs	r3, #1
 800be94:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800be96:	69bb      	ldr	r3, [r7, #24]
 800be98:	f383 8810 	msr	PRIMASK, r3
}
 800be9c:	46c0      	nop			@ (mov r8, r8)
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	681a      	ldr	r2, [r3, #0]
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	4926      	ldr	r1, [pc, #152]	@ (800bf44 <UART_EndRxTransfer+0xc4>)
 800beaa:	400a      	ands	r2, r1
 800beac:	601a      	str	r2, [r3, #0]
 800beae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800beb0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800beb2:	69fb      	ldr	r3, [r7, #28]
 800beb4:	f383 8810 	msr	PRIMASK, r3
}
 800beb8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800beba:	f3ef 8310 	mrs	r3, PRIMASK
 800bebe:	623b      	str	r3, [r7, #32]
  return(result);
 800bec0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bec2:	633b      	str	r3, [r7, #48]	@ 0x30
 800bec4:	2301      	movs	r3, #1
 800bec6:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800beca:	f383 8810 	msr	PRIMASK, r3
}
 800bece:	46c0      	nop			@ (mov r8, r8)
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	689a      	ldr	r2, [r3, #8]
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	2101      	movs	r1, #1
 800bedc:	438a      	bics	r2, r1
 800bede:	609a      	str	r2, [r3, #8]
 800bee0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bee2:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bee4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bee6:	f383 8810 	msr	PRIMASK, r3
}
 800beea:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bef0:	2b01      	cmp	r3, #1
 800bef2:	d118      	bne.n	800bf26 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bef4:	f3ef 8310 	mrs	r3, PRIMASK
 800bef8:	60bb      	str	r3, [r7, #8]
  return(result);
 800befa:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800befc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800befe:	2301      	movs	r3, #1
 800bf00:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	f383 8810 	msr	PRIMASK, r3
}
 800bf08:	46c0      	nop			@ (mov r8, r8)
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	681a      	ldr	r2, [r3, #0]
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	2110      	movs	r1, #16
 800bf16:	438a      	bics	r2, r1
 800bf18:	601a      	str	r2, [r3, #0]
 800bf1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf1c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bf1e:	693b      	ldr	r3, [r7, #16]
 800bf20:	f383 8810 	msr	PRIMASK, r3
}
 800bf24:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	2280      	movs	r2, #128	@ 0x80
 800bf2a:	2120      	movs	r1, #32
 800bf2c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	2200      	movs	r2, #0
 800bf32:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	2200      	movs	r2, #0
 800bf38:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800bf3a:	46c0      	nop			@ (mov r8, r8)
 800bf3c:	46bd      	mov	sp, r7
 800bf3e:	b00e      	add	sp, #56	@ 0x38
 800bf40:	bd80      	pop	{r7, pc}
 800bf42:	46c0      	nop			@ (mov r8, r8)
 800bf44:	fffffedf 	.word	0xfffffedf

0800bf48 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800bf48:	b580      	push	{r7, lr}
 800bf4a:	b08c      	sub	sp, #48	@ 0x30
 800bf4c:	af00      	add	r7, sp, #0
 800bf4e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf54:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	2220      	movs	r2, #32
 800bf5e:	4013      	ands	r3, r2
 800bf60:	d135      	bne.n	800bfce <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 800bf62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf64:	2252      	movs	r2, #82	@ 0x52
 800bf66:	2100      	movs	r1, #0
 800bf68:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bf6a:	f3ef 8310 	mrs	r3, PRIMASK
 800bf6e:	60fb      	str	r3, [r7, #12]
  return(result);
 800bf70:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800bf72:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bf74:	2301      	movs	r3, #1
 800bf76:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bf78:	693b      	ldr	r3, [r7, #16]
 800bf7a:	f383 8810 	msr	PRIMASK, r3
}
 800bf7e:	46c0      	nop			@ (mov r8, r8)
 800bf80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	689a      	ldr	r2, [r3, #8]
 800bf86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	2180      	movs	r1, #128	@ 0x80
 800bf8c:	438a      	bics	r2, r1
 800bf8e:	609a      	str	r2, [r3, #8]
 800bf90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf92:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bf94:	697b      	ldr	r3, [r7, #20]
 800bf96:	f383 8810 	msr	PRIMASK, r3
}
 800bf9a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bf9c:	f3ef 8310 	mrs	r3, PRIMASK
 800bfa0:	61bb      	str	r3, [r7, #24]
  return(result);
 800bfa2:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bfa4:	627b      	str	r3, [r7, #36]	@ 0x24
 800bfa6:	2301      	movs	r3, #1
 800bfa8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bfaa:	69fb      	ldr	r3, [r7, #28]
 800bfac:	f383 8810 	msr	PRIMASK, r3
}
 800bfb0:	46c0      	nop			@ (mov r8, r8)
 800bfb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	681a      	ldr	r2, [r3, #0]
 800bfb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	2140      	movs	r1, #64	@ 0x40
 800bfbe:	430a      	orrs	r2, r1
 800bfc0:	601a      	str	r2, [r3, #0]
 800bfc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfc4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bfc6:	6a3b      	ldr	r3, [r7, #32]
 800bfc8:	f383 8810 	msr	PRIMASK, r3
}
 800bfcc:	e006      	b.n	800bfdc <UART_DMATransmitCplt+0x94>
  /* DMA Circular mode */
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
 800bfce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bfd0:	228c      	movs	r2, #140	@ 0x8c
 800bfd2:	589b      	ldr	r3, [r3, r2]
 800bfd4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bfd6:	0010      	movs	r0, r2
 800bfd8:	4798      	blx	r3
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800bfda:	46c0      	nop			@ (mov r8, r8)
 800bfdc:	46c0      	nop			@ (mov r8, r8)
 800bfde:	46bd      	mov	sp, r7
 800bfe0:	b00c      	add	sp, #48	@ 0x30
 800bfe2:	bd80      	pop	{r7, pc}

0800bfe4 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800bfe4:	b580      	push	{r7, lr}
 800bfe6:	b084      	sub	sp, #16
 800bfe8:	af00      	add	r7, sp, #0
 800bfea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bff0:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	2288      	movs	r2, #136	@ 0x88
 800bff6:	589b      	ldr	r3, [r3, r2]
 800bff8:	68fa      	ldr	r2, [r7, #12]
 800bffa:	0010      	movs	r0, r2
 800bffc:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bffe:	46c0      	nop			@ (mov r8, r8)
 800c000:	46bd      	mov	sp, r7
 800c002:	b004      	add	sp, #16
 800c004:	bd80      	pop	{r7, pc}
	...

0800c008 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c008:	b580      	push	{r7, lr}
 800c00a:	b094      	sub	sp, #80	@ 0x50
 800c00c:	af00      	add	r7, sp, #0
 800c00e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c014:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	2220      	movs	r2, #32
 800c01e:	4013      	ands	r3, r2
 800c020:	d16f      	bne.n	800c102 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 800c022:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c024:	225a      	movs	r2, #90	@ 0x5a
 800c026:	2100      	movs	r1, #0
 800c028:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c02a:	f3ef 8310 	mrs	r3, PRIMASK
 800c02e:	61bb      	str	r3, [r7, #24]
  return(result);
 800c030:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c032:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c034:	2301      	movs	r3, #1
 800c036:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c038:	69fb      	ldr	r3, [r7, #28]
 800c03a:	f383 8810 	msr	PRIMASK, r3
}
 800c03e:	46c0      	nop			@ (mov r8, r8)
 800c040:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	681a      	ldr	r2, [r3, #0]
 800c046:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	493b      	ldr	r1, [pc, #236]	@ (800c138 <UART_DMAReceiveCplt+0x130>)
 800c04c:	400a      	ands	r2, r1
 800c04e:	601a      	str	r2, [r3, #0]
 800c050:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c052:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c054:	6a3b      	ldr	r3, [r7, #32]
 800c056:	f383 8810 	msr	PRIMASK, r3
}
 800c05a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c05c:	f3ef 8310 	mrs	r3, PRIMASK
 800c060:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800c062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c064:	647b      	str	r3, [r7, #68]	@ 0x44
 800c066:	2301      	movs	r3, #1
 800c068:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c06a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c06c:	f383 8810 	msr	PRIMASK, r3
}
 800c070:	46c0      	nop			@ (mov r8, r8)
 800c072:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	689a      	ldr	r2, [r3, #8]
 800c078:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	2101      	movs	r1, #1
 800c07e:	438a      	bics	r2, r1
 800c080:	609a      	str	r2, [r3, #8]
 800c082:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c084:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c086:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c088:	f383 8810 	msr	PRIMASK, r3
}
 800c08c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c08e:	f3ef 8310 	mrs	r3, PRIMASK
 800c092:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800c094:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c096:	643b      	str	r3, [r7, #64]	@ 0x40
 800c098:	2301      	movs	r3, #1
 800c09a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c09c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c09e:	f383 8810 	msr	PRIMASK, r3
}
 800c0a2:	46c0      	nop			@ (mov r8, r8)
 800c0a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	689a      	ldr	r2, [r3, #8]
 800c0aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	2140      	movs	r1, #64	@ 0x40
 800c0b0:	438a      	bics	r2, r1
 800c0b2:	609a      	str	r2, [r3, #8]
 800c0b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c0b6:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c0b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0ba:	f383 8810 	msr	PRIMASK, r3
}
 800c0be:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800c0c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c0c2:	2280      	movs	r2, #128	@ 0x80
 800c0c4:	2120      	movs	r1, #32
 800c0c6:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c0c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c0ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c0cc:	2b01      	cmp	r3, #1
 800c0ce:	d118      	bne.n	800c102 <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c0d0:	f3ef 8310 	mrs	r3, PRIMASK
 800c0d4:	60fb      	str	r3, [r7, #12]
  return(result);
 800c0d6:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c0d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c0da:	2301      	movs	r3, #1
 800c0dc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c0de:	693b      	ldr	r3, [r7, #16]
 800c0e0:	f383 8810 	msr	PRIMASK, r3
}
 800c0e4:	46c0      	nop			@ (mov r8, r8)
 800c0e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	681a      	ldr	r2, [r3, #0]
 800c0ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	2110      	movs	r1, #16
 800c0f2:	438a      	bics	r2, r1
 800c0f4:	601a      	str	r2, [r3, #0]
 800c0f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c0f8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c0fa:	697b      	ldr	r3, [r7, #20]
 800c0fc:	f383 8810 	msr	PRIMASK, r3
}
 800c100:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c102:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c104:	2200      	movs	r2, #0
 800c106:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c108:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c10a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c10c:	2b01      	cmp	r3, #1
 800c10e:	d109      	bne.n	800c124 <UART_DMAReceiveCplt+0x11c>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 800c110:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c112:	22ac      	movs	r2, #172	@ 0xac
 800c114:	589b      	ldr	r3, [r3, r2]
 800c116:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c118:	2158      	movs	r1, #88	@ 0x58
 800c11a:	5a51      	ldrh	r1, [r2, r1]
 800c11c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c11e:	0010      	movs	r0, r2
 800c120:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c122:	e005      	b.n	800c130 <UART_DMAReceiveCplt+0x128>
    huart->RxCpltCallback(huart);
 800c124:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c126:	2294      	movs	r2, #148	@ 0x94
 800c128:	589b      	ldr	r3, [r3, r2]
 800c12a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c12c:	0010      	movs	r0, r2
 800c12e:	4798      	blx	r3
}
 800c130:	46c0      	nop			@ (mov r8, r8)
 800c132:	46bd      	mov	sp, r7
 800c134:	b014      	add	sp, #80	@ 0x50
 800c136:	bd80      	pop	{r7, pc}
 800c138:	fffffeff 	.word	0xfffffeff

0800c13c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c13c:	b580      	push	{r7, lr}
 800c13e:	b084      	sub	sp, #16
 800c140:	af00      	add	r7, sp, #0
 800c142:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c148:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	2201      	movs	r2, #1
 800c14e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c154:	2b01      	cmp	r3, #1
 800c156:	d10b      	bne.n	800c170 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	22ac      	movs	r2, #172	@ 0xac
 800c15c:	589b      	ldr	r3, [r3, r2]
 800c15e:	68fa      	ldr	r2, [r7, #12]
 800c160:	2158      	movs	r1, #88	@ 0x58
 800c162:	5a52      	ldrh	r2, [r2, r1]
 800c164:	0852      	lsrs	r2, r2, #1
 800c166:	b291      	uxth	r1, r2
 800c168:	68fa      	ldr	r2, [r7, #12]
 800c16a:	0010      	movs	r0, r2
 800c16c:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c16e:	e005      	b.n	800c17c <UART_DMARxHalfCplt+0x40>
    huart->RxHalfCpltCallback(huart);
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	2290      	movs	r2, #144	@ 0x90
 800c174:	589b      	ldr	r3, [r3, r2]
 800c176:	68fa      	ldr	r2, [r7, #12]
 800c178:	0010      	movs	r0, r2
 800c17a:	4798      	blx	r3
}
 800c17c:	46c0      	nop			@ (mov r8, r8)
 800c17e:	46bd      	mov	sp, r7
 800c180:	b004      	add	sp, #16
 800c182:	bd80      	pop	{r7, pc}

0800c184 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800c184:	b580      	push	{r7, lr}
 800c186:	b086      	sub	sp, #24
 800c188:	af00      	add	r7, sp, #0
 800c18a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c190:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800c192:	697b      	ldr	r3, [r7, #20]
 800c194:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c196:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800c198:	697b      	ldr	r3, [r7, #20]
 800c19a:	2280      	movs	r2, #128	@ 0x80
 800c19c:	589b      	ldr	r3, [r3, r2]
 800c19e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800c1a0:	697b      	ldr	r3, [r7, #20]
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	689b      	ldr	r3, [r3, #8]
 800c1a6:	2280      	movs	r2, #128	@ 0x80
 800c1a8:	4013      	ands	r3, r2
 800c1aa:	2b80      	cmp	r3, #128	@ 0x80
 800c1ac:	d10a      	bne.n	800c1c4 <UART_DMAError+0x40>
 800c1ae:	693b      	ldr	r3, [r7, #16]
 800c1b0:	2b21      	cmp	r3, #33	@ 0x21
 800c1b2:	d107      	bne.n	800c1c4 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800c1b4:	697b      	ldr	r3, [r7, #20]
 800c1b6:	2252      	movs	r2, #82	@ 0x52
 800c1b8:	2100      	movs	r1, #0
 800c1ba:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 800c1bc:	697b      	ldr	r3, [r7, #20]
 800c1be:	0018      	movs	r0, r3
 800c1c0:	f7ff fe3a 	bl	800be38 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800c1c4:	697b      	ldr	r3, [r7, #20]
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	689b      	ldr	r3, [r3, #8]
 800c1ca:	2240      	movs	r2, #64	@ 0x40
 800c1cc:	4013      	ands	r3, r2
 800c1ce:	2b40      	cmp	r3, #64	@ 0x40
 800c1d0:	d10a      	bne.n	800c1e8 <UART_DMAError+0x64>
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	2b22      	cmp	r3, #34	@ 0x22
 800c1d6:	d107      	bne.n	800c1e8 <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800c1d8:	697b      	ldr	r3, [r7, #20]
 800c1da:	225a      	movs	r2, #90	@ 0x5a
 800c1dc:	2100      	movs	r1, #0
 800c1de:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 800c1e0:	697b      	ldr	r3, [r7, #20]
 800c1e2:	0018      	movs	r0, r3
 800c1e4:	f7ff fe4c 	bl	800be80 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c1e8:	697b      	ldr	r3, [r7, #20]
 800c1ea:	2284      	movs	r2, #132	@ 0x84
 800c1ec:	589b      	ldr	r3, [r3, r2]
 800c1ee:	2210      	movs	r2, #16
 800c1f0:	431a      	orrs	r2, r3
 800c1f2:	697b      	ldr	r3, [r7, #20]
 800c1f4:	2184      	movs	r1, #132	@ 0x84
 800c1f6:	505a      	str	r2, [r3, r1]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800c1f8:	697b      	ldr	r3, [r7, #20]
 800c1fa:	2298      	movs	r2, #152	@ 0x98
 800c1fc:	589b      	ldr	r3, [r3, r2]
 800c1fe:	697a      	ldr	r2, [r7, #20]
 800c200:	0010      	movs	r0, r2
 800c202:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c204:	46c0      	nop			@ (mov r8, r8)
 800c206:	46bd      	mov	sp, r7
 800c208:	b006      	add	sp, #24
 800c20a:	bd80      	pop	{r7, pc}

0800c20c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c20c:	b580      	push	{r7, lr}
 800c20e:	b084      	sub	sp, #16
 800c210:	af00      	add	r7, sp, #0
 800c212:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c218:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	225a      	movs	r2, #90	@ 0x5a
 800c21e:	2100      	movs	r1, #0
 800c220:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	2252      	movs	r2, #82	@ 0x52
 800c226:	2100      	movs	r1, #0
 800c228:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	2298      	movs	r2, #152	@ 0x98
 800c22e:	589b      	ldr	r3, [r3, r2]
 800c230:	68fa      	ldr	r2, [r7, #12]
 800c232:	0010      	movs	r0, r2
 800c234:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c236:	46c0      	nop			@ (mov r8, r8)
 800c238:	46bd      	mov	sp, r7
 800c23a:	b004      	add	sp, #16
 800c23c:	bd80      	pop	{r7, pc}

0800c23e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c23e:	b580      	push	{r7, lr}
 800c240:	b086      	sub	sp, #24
 800c242:	af00      	add	r7, sp, #0
 800c244:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c246:	f3ef 8310 	mrs	r3, PRIMASK
 800c24a:	60bb      	str	r3, [r7, #8]
  return(result);
 800c24c:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c24e:	617b      	str	r3, [r7, #20]
 800c250:	2301      	movs	r3, #1
 800c252:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	f383 8810 	msr	PRIMASK, r3
}
 800c25a:	46c0      	nop			@ (mov r8, r8)
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	681a      	ldr	r2, [r3, #0]
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	2140      	movs	r1, #64	@ 0x40
 800c268:	438a      	bics	r2, r1
 800c26a:	601a      	str	r2, [r3, #0]
 800c26c:	697b      	ldr	r3, [r7, #20]
 800c26e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c270:	693b      	ldr	r3, [r7, #16]
 800c272:	f383 8810 	msr	PRIMASK, r3
}
 800c276:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	2220      	movs	r2, #32
 800c27c:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	2200      	movs	r2, #0
 800c282:	66da      	str	r2, [r3, #108]	@ 0x6c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	228c      	movs	r2, #140	@ 0x8c
 800c288:	589b      	ldr	r3, [r3, r2]
 800c28a:	687a      	ldr	r2, [r7, #4]
 800c28c:	0010      	movs	r0, r2
 800c28e:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c290:	46c0      	nop			@ (mov r8, r8)
 800c292:	46bd      	mov	sp, r7
 800c294:	b006      	add	sp, #24
 800c296:	bd80      	pop	{r7, pc}

0800c298 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c298:	b580      	push	{r7, lr}
 800c29a:	b082      	sub	sp, #8
 800c29c:	af00      	add	r7, sp, #0
 800c29e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c2a0:	46c0      	nop			@ (mov r8, r8)
 800c2a2:	46bd      	mov	sp, r7
 800c2a4:	b002      	add	sp, #8
 800c2a6:	bd80      	pop	{r7, pc}

0800c2a8 <__cvt>:
 800c2a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c2aa:	001f      	movs	r7, r3
 800c2ac:	2300      	movs	r3, #0
 800c2ae:	0016      	movs	r6, r2
 800c2b0:	b08b      	sub	sp, #44	@ 0x2c
 800c2b2:	429f      	cmp	r7, r3
 800c2b4:	da04      	bge.n	800c2c0 <__cvt+0x18>
 800c2b6:	2180      	movs	r1, #128	@ 0x80
 800c2b8:	0609      	lsls	r1, r1, #24
 800c2ba:	187b      	adds	r3, r7, r1
 800c2bc:	001f      	movs	r7, r3
 800c2be:	232d      	movs	r3, #45	@ 0x2d
 800c2c0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800c2c2:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 800c2c4:	7013      	strb	r3, [r2, #0]
 800c2c6:	2320      	movs	r3, #32
 800c2c8:	2203      	movs	r2, #3
 800c2ca:	439d      	bics	r5, r3
 800c2cc:	2d46      	cmp	r5, #70	@ 0x46
 800c2ce:	d007      	beq.n	800c2e0 <__cvt+0x38>
 800c2d0:	002b      	movs	r3, r5
 800c2d2:	3b45      	subs	r3, #69	@ 0x45
 800c2d4:	4259      	negs	r1, r3
 800c2d6:	414b      	adcs	r3, r1
 800c2d8:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800c2da:	3a01      	subs	r2, #1
 800c2dc:	18cb      	adds	r3, r1, r3
 800c2de:	9310      	str	r3, [sp, #64]	@ 0x40
 800c2e0:	ab09      	add	r3, sp, #36	@ 0x24
 800c2e2:	9304      	str	r3, [sp, #16]
 800c2e4:	ab08      	add	r3, sp, #32
 800c2e6:	9303      	str	r3, [sp, #12]
 800c2e8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c2ea:	9200      	str	r2, [sp, #0]
 800c2ec:	9302      	str	r3, [sp, #8]
 800c2ee:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c2f0:	0032      	movs	r2, r6
 800c2f2:	9301      	str	r3, [sp, #4]
 800c2f4:	003b      	movs	r3, r7
 800c2f6:	f000 fee7 	bl	800d0c8 <_dtoa_r>
 800c2fa:	0004      	movs	r4, r0
 800c2fc:	2d47      	cmp	r5, #71	@ 0x47
 800c2fe:	d11b      	bne.n	800c338 <__cvt+0x90>
 800c300:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c302:	07db      	lsls	r3, r3, #31
 800c304:	d511      	bpl.n	800c32a <__cvt+0x82>
 800c306:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c308:	18c3      	adds	r3, r0, r3
 800c30a:	9307      	str	r3, [sp, #28]
 800c30c:	2200      	movs	r2, #0
 800c30e:	2300      	movs	r3, #0
 800c310:	0030      	movs	r0, r6
 800c312:	0039      	movs	r1, r7
 800c314:	f7f4 f89a 	bl	800044c <__aeabi_dcmpeq>
 800c318:	2800      	cmp	r0, #0
 800c31a:	d001      	beq.n	800c320 <__cvt+0x78>
 800c31c:	9b07      	ldr	r3, [sp, #28]
 800c31e:	9309      	str	r3, [sp, #36]	@ 0x24
 800c320:	2230      	movs	r2, #48	@ 0x30
 800c322:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c324:	9907      	ldr	r1, [sp, #28]
 800c326:	428b      	cmp	r3, r1
 800c328:	d320      	bcc.n	800c36c <__cvt+0xc4>
 800c32a:	0020      	movs	r0, r4
 800c32c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c32e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800c330:	1b1b      	subs	r3, r3, r4
 800c332:	6013      	str	r3, [r2, #0]
 800c334:	b00b      	add	sp, #44	@ 0x2c
 800c336:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c338:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c33a:	18c3      	adds	r3, r0, r3
 800c33c:	9307      	str	r3, [sp, #28]
 800c33e:	2d46      	cmp	r5, #70	@ 0x46
 800c340:	d1e4      	bne.n	800c30c <__cvt+0x64>
 800c342:	7803      	ldrb	r3, [r0, #0]
 800c344:	2b30      	cmp	r3, #48	@ 0x30
 800c346:	d10c      	bne.n	800c362 <__cvt+0xba>
 800c348:	2200      	movs	r2, #0
 800c34a:	2300      	movs	r3, #0
 800c34c:	0030      	movs	r0, r6
 800c34e:	0039      	movs	r1, r7
 800c350:	f7f4 f87c 	bl	800044c <__aeabi_dcmpeq>
 800c354:	2800      	cmp	r0, #0
 800c356:	d104      	bne.n	800c362 <__cvt+0xba>
 800c358:	2301      	movs	r3, #1
 800c35a:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800c35c:	1a9b      	subs	r3, r3, r2
 800c35e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800c360:	6013      	str	r3, [r2, #0]
 800c362:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c364:	9a07      	ldr	r2, [sp, #28]
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	18d3      	adds	r3, r2, r3
 800c36a:	e7ce      	b.n	800c30a <__cvt+0x62>
 800c36c:	1c59      	adds	r1, r3, #1
 800c36e:	9109      	str	r1, [sp, #36]	@ 0x24
 800c370:	701a      	strb	r2, [r3, #0]
 800c372:	e7d6      	b.n	800c322 <__cvt+0x7a>

0800c374 <__exponent>:
 800c374:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c376:	232b      	movs	r3, #43	@ 0x2b
 800c378:	0005      	movs	r5, r0
 800c37a:	000c      	movs	r4, r1
 800c37c:	b085      	sub	sp, #20
 800c37e:	7002      	strb	r2, [r0, #0]
 800c380:	2900      	cmp	r1, #0
 800c382:	da01      	bge.n	800c388 <__exponent+0x14>
 800c384:	424c      	negs	r4, r1
 800c386:	3302      	adds	r3, #2
 800c388:	706b      	strb	r3, [r5, #1]
 800c38a:	2c09      	cmp	r4, #9
 800c38c:	dd2c      	ble.n	800c3e8 <__exponent+0x74>
 800c38e:	ab02      	add	r3, sp, #8
 800c390:	1dde      	adds	r6, r3, #7
 800c392:	0020      	movs	r0, r4
 800c394:	210a      	movs	r1, #10
 800c396:	f7f4 f843 	bl	8000420 <__aeabi_idivmod>
 800c39a:	0037      	movs	r7, r6
 800c39c:	3130      	adds	r1, #48	@ 0x30
 800c39e:	3e01      	subs	r6, #1
 800c3a0:	0020      	movs	r0, r4
 800c3a2:	7031      	strb	r1, [r6, #0]
 800c3a4:	210a      	movs	r1, #10
 800c3a6:	9401      	str	r4, [sp, #4]
 800c3a8:	f7f3 ff54 	bl	8000254 <__divsi3>
 800c3ac:	9b01      	ldr	r3, [sp, #4]
 800c3ae:	0004      	movs	r4, r0
 800c3b0:	2b63      	cmp	r3, #99	@ 0x63
 800c3b2:	dcee      	bgt.n	800c392 <__exponent+0x1e>
 800c3b4:	1eba      	subs	r2, r7, #2
 800c3b6:	1ca8      	adds	r0, r5, #2
 800c3b8:	0001      	movs	r1, r0
 800c3ba:	0013      	movs	r3, r2
 800c3bc:	3430      	adds	r4, #48	@ 0x30
 800c3be:	7014      	strb	r4, [r2, #0]
 800c3c0:	ac02      	add	r4, sp, #8
 800c3c2:	3407      	adds	r4, #7
 800c3c4:	429c      	cmp	r4, r3
 800c3c6:	d80a      	bhi.n	800c3de <__exponent+0x6a>
 800c3c8:	2300      	movs	r3, #0
 800c3ca:	42a2      	cmp	r2, r4
 800c3cc:	d803      	bhi.n	800c3d6 <__exponent+0x62>
 800c3ce:	3309      	adds	r3, #9
 800c3d0:	aa02      	add	r2, sp, #8
 800c3d2:	189b      	adds	r3, r3, r2
 800c3d4:	1bdb      	subs	r3, r3, r7
 800c3d6:	18c0      	adds	r0, r0, r3
 800c3d8:	1b40      	subs	r0, r0, r5
 800c3da:	b005      	add	sp, #20
 800c3dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c3de:	781c      	ldrb	r4, [r3, #0]
 800c3e0:	3301      	adds	r3, #1
 800c3e2:	700c      	strb	r4, [r1, #0]
 800c3e4:	3101      	adds	r1, #1
 800c3e6:	e7eb      	b.n	800c3c0 <__exponent+0x4c>
 800c3e8:	2330      	movs	r3, #48	@ 0x30
 800c3ea:	18e4      	adds	r4, r4, r3
 800c3ec:	70ab      	strb	r3, [r5, #2]
 800c3ee:	1d28      	adds	r0, r5, #4
 800c3f0:	70ec      	strb	r4, [r5, #3]
 800c3f2:	e7f1      	b.n	800c3d8 <__exponent+0x64>

0800c3f4 <_printf_float>:
 800c3f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c3f6:	b097      	sub	sp, #92	@ 0x5c
 800c3f8:	000d      	movs	r5, r1
 800c3fa:	920a      	str	r2, [sp, #40]	@ 0x28
 800c3fc:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 800c3fe:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c400:	9009      	str	r0, [sp, #36]	@ 0x24
 800c402:	f000 fd49 	bl	800ce98 <_localeconv_r>
 800c406:	6803      	ldr	r3, [r0, #0]
 800c408:	0018      	movs	r0, r3
 800c40a:	930d      	str	r3, [sp, #52]	@ 0x34
 800c40c:	f7f3 fe7c 	bl	8000108 <strlen>
 800c410:	2300      	movs	r3, #0
 800c412:	900f      	str	r0, [sp, #60]	@ 0x3c
 800c414:	9314      	str	r3, [sp, #80]	@ 0x50
 800c416:	7e2b      	ldrb	r3, [r5, #24]
 800c418:	2207      	movs	r2, #7
 800c41a:	930c      	str	r3, [sp, #48]	@ 0x30
 800c41c:	682b      	ldr	r3, [r5, #0]
 800c41e:	930e      	str	r3, [sp, #56]	@ 0x38
 800c420:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800c422:	6823      	ldr	r3, [r4, #0]
 800c424:	05c9      	lsls	r1, r1, #23
 800c426:	d545      	bpl.n	800c4b4 <_printf_float+0xc0>
 800c428:	189b      	adds	r3, r3, r2
 800c42a:	4393      	bics	r3, r2
 800c42c:	001a      	movs	r2, r3
 800c42e:	3208      	adds	r2, #8
 800c430:	6022      	str	r2, [r4, #0]
 800c432:	2201      	movs	r2, #1
 800c434:	681e      	ldr	r6, [r3, #0]
 800c436:	685f      	ldr	r7, [r3, #4]
 800c438:	007b      	lsls	r3, r7, #1
 800c43a:	085b      	lsrs	r3, r3, #1
 800c43c:	9311      	str	r3, [sp, #68]	@ 0x44
 800c43e:	9610      	str	r6, [sp, #64]	@ 0x40
 800c440:	64ae      	str	r6, [r5, #72]	@ 0x48
 800c442:	64ef      	str	r7, [r5, #76]	@ 0x4c
 800c444:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800c446:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800c448:	4ba7      	ldr	r3, [pc, #668]	@ (800c6e8 <_printf_float+0x2f4>)
 800c44a:	4252      	negs	r2, r2
 800c44c:	f7f6 fea2 	bl	8003194 <__aeabi_dcmpun>
 800c450:	2800      	cmp	r0, #0
 800c452:	d131      	bne.n	800c4b8 <_printf_float+0xc4>
 800c454:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800c456:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800c458:	2201      	movs	r2, #1
 800c45a:	4ba3      	ldr	r3, [pc, #652]	@ (800c6e8 <_printf_float+0x2f4>)
 800c45c:	4252      	negs	r2, r2
 800c45e:	f7f4 f805 	bl	800046c <__aeabi_dcmple>
 800c462:	2800      	cmp	r0, #0
 800c464:	d128      	bne.n	800c4b8 <_printf_float+0xc4>
 800c466:	2200      	movs	r2, #0
 800c468:	2300      	movs	r3, #0
 800c46a:	0030      	movs	r0, r6
 800c46c:	0039      	movs	r1, r7
 800c46e:	f7f3 fff3 	bl	8000458 <__aeabi_dcmplt>
 800c472:	2800      	cmp	r0, #0
 800c474:	d003      	beq.n	800c47e <_printf_float+0x8a>
 800c476:	002b      	movs	r3, r5
 800c478:	222d      	movs	r2, #45	@ 0x2d
 800c47a:	3343      	adds	r3, #67	@ 0x43
 800c47c:	701a      	strb	r2, [r3, #0]
 800c47e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c480:	4f9a      	ldr	r7, [pc, #616]	@ (800c6ec <_printf_float+0x2f8>)
 800c482:	2b47      	cmp	r3, #71	@ 0x47
 800c484:	d900      	bls.n	800c488 <_printf_float+0x94>
 800c486:	4f9a      	ldr	r7, [pc, #616]	@ (800c6f0 <_printf_float+0x2fc>)
 800c488:	2303      	movs	r3, #3
 800c48a:	2400      	movs	r4, #0
 800c48c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c48e:	612b      	str	r3, [r5, #16]
 800c490:	3301      	adds	r3, #1
 800c492:	439a      	bics	r2, r3
 800c494:	602a      	str	r2, [r5, #0]
 800c496:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c498:	0029      	movs	r1, r5
 800c49a:	9300      	str	r3, [sp, #0]
 800c49c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c49e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c4a0:	aa15      	add	r2, sp, #84	@ 0x54
 800c4a2:	f000 f9e5 	bl	800c870 <_printf_common>
 800c4a6:	3001      	adds	r0, #1
 800c4a8:	d000      	beq.n	800c4ac <_printf_float+0xb8>
 800c4aa:	e09f      	b.n	800c5ec <_printf_float+0x1f8>
 800c4ac:	2001      	movs	r0, #1
 800c4ae:	4240      	negs	r0, r0
 800c4b0:	b017      	add	sp, #92	@ 0x5c
 800c4b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c4b4:	3307      	adds	r3, #7
 800c4b6:	e7b8      	b.n	800c42a <_printf_float+0x36>
 800c4b8:	0032      	movs	r2, r6
 800c4ba:	003b      	movs	r3, r7
 800c4bc:	0030      	movs	r0, r6
 800c4be:	0039      	movs	r1, r7
 800c4c0:	f7f6 fe68 	bl	8003194 <__aeabi_dcmpun>
 800c4c4:	2800      	cmp	r0, #0
 800c4c6:	d00b      	beq.n	800c4e0 <_printf_float+0xec>
 800c4c8:	2f00      	cmp	r7, #0
 800c4ca:	da03      	bge.n	800c4d4 <_printf_float+0xe0>
 800c4cc:	002b      	movs	r3, r5
 800c4ce:	222d      	movs	r2, #45	@ 0x2d
 800c4d0:	3343      	adds	r3, #67	@ 0x43
 800c4d2:	701a      	strb	r2, [r3, #0]
 800c4d4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c4d6:	4f87      	ldr	r7, [pc, #540]	@ (800c6f4 <_printf_float+0x300>)
 800c4d8:	2b47      	cmp	r3, #71	@ 0x47
 800c4da:	d9d5      	bls.n	800c488 <_printf_float+0x94>
 800c4dc:	4f86      	ldr	r7, [pc, #536]	@ (800c6f8 <_printf_float+0x304>)
 800c4de:	e7d3      	b.n	800c488 <_printf_float+0x94>
 800c4e0:	2220      	movs	r2, #32
 800c4e2:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 800c4e4:	686b      	ldr	r3, [r5, #4]
 800c4e6:	4394      	bics	r4, r2
 800c4e8:	1c5a      	adds	r2, r3, #1
 800c4ea:	d146      	bne.n	800c57a <_printf_float+0x186>
 800c4ec:	3307      	adds	r3, #7
 800c4ee:	606b      	str	r3, [r5, #4]
 800c4f0:	2380      	movs	r3, #128	@ 0x80
 800c4f2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c4f4:	00db      	lsls	r3, r3, #3
 800c4f6:	4313      	orrs	r3, r2
 800c4f8:	2200      	movs	r2, #0
 800c4fa:	602b      	str	r3, [r5, #0]
 800c4fc:	9206      	str	r2, [sp, #24]
 800c4fe:	aa14      	add	r2, sp, #80	@ 0x50
 800c500:	9205      	str	r2, [sp, #20]
 800c502:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800c504:	a90a      	add	r1, sp, #40	@ 0x28
 800c506:	9204      	str	r2, [sp, #16]
 800c508:	aa13      	add	r2, sp, #76	@ 0x4c
 800c50a:	9203      	str	r2, [sp, #12]
 800c50c:	2223      	movs	r2, #35	@ 0x23
 800c50e:	1852      	adds	r2, r2, r1
 800c510:	9202      	str	r2, [sp, #8]
 800c512:	9301      	str	r3, [sp, #4]
 800c514:	686b      	ldr	r3, [r5, #4]
 800c516:	0032      	movs	r2, r6
 800c518:	9300      	str	r3, [sp, #0]
 800c51a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c51c:	003b      	movs	r3, r7
 800c51e:	f7ff fec3 	bl	800c2a8 <__cvt>
 800c522:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800c524:	0007      	movs	r7, r0
 800c526:	2c47      	cmp	r4, #71	@ 0x47
 800c528:	d12d      	bne.n	800c586 <_printf_float+0x192>
 800c52a:	1cd3      	adds	r3, r2, #3
 800c52c:	db02      	blt.n	800c534 <_printf_float+0x140>
 800c52e:	686b      	ldr	r3, [r5, #4]
 800c530:	429a      	cmp	r2, r3
 800c532:	dd48      	ble.n	800c5c6 <_printf_float+0x1d2>
 800c534:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c536:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800c538:	3b02      	subs	r3, #2
 800c53a:	b2db      	uxtb	r3, r3
 800c53c:	930c      	str	r3, [sp, #48]	@ 0x30
 800c53e:	0028      	movs	r0, r5
 800c540:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800c542:	3901      	subs	r1, #1
 800c544:	3050      	adds	r0, #80	@ 0x50
 800c546:	9113      	str	r1, [sp, #76]	@ 0x4c
 800c548:	f7ff ff14 	bl	800c374 <__exponent>
 800c54c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800c54e:	0004      	movs	r4, r0
 800c550:	1813      	adds	r3, r2, r0
 800c552:	612b      	str	r3, [r5, #16]
 800c554:	2a01      	cmp	r2, #1
 800c556:	dc02      	bgt.n	800c55e <_printf_float+0x16a>
 800c558:	682a      	ldr	r2, [r5, #0]
 800c55a:	07d2      	lsls	r2, r2, #31
 800c55c:	d501      	bpl.n	800c562 <_printf_float+0x16e>
 800c55e:	3301      	adds	r3, #1
 800c560:	612b      	str	r3, [r5, #16]
 800c562:	2323      	movs	r3, #35	@ 0x23
 800c564:	aa0a      	add	r2, sp, #40	@ 0x28
 800c566:	189b      	adds	r3, r3, r2
 800c568:	781b      	ldrb	r3, [r3, #0]
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d100      	bne.n	800c570 <_printf_float+0x17c>
 800c56e:	e792      	b.n	800c496 <_printf_float+0xa2>
 800c570:	002b      	movs	r3, r5
 800c572:	222d      	movs	r2, #45	@ 0x2d
 800c574:	3343      	adds	r3, #67	@ 0x43
 800c576:	701a      	strb	r2, [r3, #0]
 800c578:	e78d      	b.n	800c496 <_printf_float+0xa2>
 800c57a:	2c47      	cmp	r4, #71	@ 0x47
 800c57c:	d1b8      	bne.n	800c4f0 <_printf_float+0xfc>
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d1b6      	bne.n	800c4f0 <_printf_float+0xfc>
 800c582:	3301      	adds	r3, #1
 800c584:	e7b3      	b.n	800c4ee <_printf_float+0xfa>
 800c586:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c588:	0011      	movs	r1, r2
 800c58a:	2b65      	cmp	r3, #101	@ 0x65
 800c58c:	d9d7      	bls.n	800c53e <_printf_float+0x14a>
 800c58e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c590:	2b66      	cmp	r3, #102	@ 0x66
 800c592:	d11a      	bne.n	800c5ca <_printf_float+0x1d6>
 800c594:	686b      	ldr	r3, [r5, #4]
 800c596:	2a00      	cmp	r2, #0
 800c598:	dd09      	ble.n	800c5ae <_printf_float+0x1ba>
 800c59a:	612a      	str	r2, [r5, #16]
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d102      	bne.n	800c5a6 <_printf_float+0x1b2>
 800c5a0:	6829      	ldr	r1, [r5, #0]
 800c5a2:	07c9      	lsls	r1, r1, #31
 800c5a4:	d50b      	bpl.n	800c5be <_printf_float+0x1ca>
 800c5a6:	3301      	adds	r3, #1
 800c5a8:	189b      	adds	r3, r3, r2
 800c5aa:	612b      	str	r3, [r5, #16]
 800c5ac:	e007      	b.n	800c5be <_printf_float+0x1ca>
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d103      	bne.n	800c5ba <_printf_float+0x1c6>
 800c5b2:	2201      	movs	r2, #1
 800c5b4:	6829      	ldr	r1, [r5, #0]
 800c5b6:	4211      	tst	r1, r2
 800c5b8:	d000      	beq.n	800c5bc <_printf_float+0x1c8>
 800c5ba:	1c9a      	adds	r2, r3, #2
 800c5bc:	612a      	str	r2, [r5, #16]
 800c5be:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c5c0:	2400      	movs	r4, #0
 800c5c2:	65ab      	str	r3, [r5, #88]	@ 0x58
 800c5c4:	e7cd      	b.n	800c562 <_printf_float+0x16e>
 800c5c6:	2367      	movs	r3, #103	@ 0x67
 800c5c8:	930c      	str	r3, [sp, #48]	@ 0x30
 800c5ca:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800c5cc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c5ce:	4299      	cmp	r1, r3
 800c5d0:	db06      	blt.n	800c5e0 <_printf_float+0x1ec>
 800c5d2:	682b      	ldr	r3, [r5, #0]
 800c5d4:	6129      	str	r1, [r5, #16]
 800c5d6:	07db      	lsls	r3, r3, #31
 800c5d8:	d5f1      	bpl.n	800c5be <_printf_float+0x1ca>
 800c5da:	3101      	adds	r1, #1
 800c5dc:	6129      	str	r1, [r5, #16]
 800c5de:	e7ee      	b.n	800c5be <_printf_float+0x1ca>
 800c5e0:	2201      	movs	r2, #1
 800c5e2:	2900      	cmp	r1, #0
 800c5e4:	dce0      	bgt.n	800c5a8 <_printf_float+0x1b4>
 800c5e6:	1892      	adds	r2, r2, r2
 800c5e8:	1a52      	subs	r2, r2, r1
 800c5ea:	e7dd      	b.n	800c5a8 <_printf_float+0x1b4>
 800c5ec:	682a      	ldr	r2, [r5, #0]
 800c5ee:	0553      	lsls	r3, r2, #21
 800c5f0:	d408      	bmi.n	800c604 <_printf_float+0x210>
 800c5f2:	692b      	ldr	r3, [r5, #16]
 800c5f4:	003a      	movs	r2, r7
 800c5f6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c5f8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c5fa:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800c5fc:	47a0      	blx	r4
 800c5fe:	3001      	adds	r0, #1
 800c600:	d129      	bne.n	800c656 <_printf_float+0x262>
 800c602:	e753      	b.n	800c4ac <_printf_float+0xb8>
 800c604:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c606:	2b65      	cmp	r3, #101	@ 0x65
 800c608:	d800      	bhi.n	800c60c <_printf_float+0x218>
 800c60a:	e0da      	b.n	800c7c2 <_printf_float+0x3ce>
 800c60c:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800c60e:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800c610:	2200      	movs	r2, #0
 800c612:	2300      	movs	r3, #0
 800c614:	f7f3 ff1a 	bl	800044c <__aeabi_dcmpeq>
 800c618:	2800      	cmp	r0, #0
 800c61a:	d033      	beq.n	800c684 <_printf_float+0x290>
 800c61c:	2301      	movs	r3, #1
 800c61e:	4a37      	ldr	r2, [pc, #220]	@ (800c6fc <_printf_float+0x308>)
 800c620:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c622:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c624:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800c626:	47a0      	blx	r4
 800c628:	3001      	adds	r0, #1
 800c62a:	d100      	bne.n	800c62e <_printf_float+0x23a>
 800c62c:	e73e      	b.n	800c4ac <_printf_float+0xb8>
 800c62e:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 800c630:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c632:	42b3      	cmp	r3, r6
 800c634:	db02      	blt.n	800c63c <_printf_float+0x248>
 800c636:	682b      	ldr	r3, [r5, #0]
 800c638:	07db      	lsls	r3, r3, #31
 800c63a:	d50c      	bpl.n	800c656 <_printf_float+0x262>
 800c63c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800c63e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c640:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c642:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c644:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c646:	47a0      	blx	r4
 800c648:	2400      	movs	r4, #0
 800c64a:	3001      	adds	r0, #1
 800c64c:	d100      	bne.n	800c650 <_printf_float+0x25c>
 800c64e:	e72d      	b.n	800c4ac <_printf_float+0xb8>
 800c650:	1e73      	subs	r3, r6, #1
 800c652:	42a3      	cmp	r3, r4
 800c654:	dc0a      	bgt.n	800c66c <_printf_float+0x278>
 800c656:	682b      	ldr	r3, [r5, #0]
 800c658:	079b      	lsls	r3, r3, #30
 800c65a:	d500      	bpl.n	800c65e <_printf_float+0x26a>
 800c65c:	e105      	b.n	800c86a <_printf_float+0x476>
 800c65e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800c660:	68e8      	ldr	r0, [r5, #12]
 800c662:	4298      	cmp	r0, r3
 800c664:	db00      	blt.n	800c668 <_printf_float+0x274>
 800c666:	e723      	b.n	800c4b0 <_printf_float+0xbc>
 800c668:	0018      	movs	r0, r3
 800c66a:	e721      	b.n	800c4b0 <_printf_float+0xbc>
 800c66c:	002a      	movs	r2, r5
 800c66e:	2301      	movs	r3, #1
 800c670:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c672:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c674:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800c676:	321a      	adds	r2, #26
 800c678:	47b8      	blx	r7
 800c67a:	3001      	adds	r0, #1
 800c67c:	d100      	bne.n	800c680 <_printf_float+0x28c>
 800c67e:	e715      	b.n	800c4ac <_printf_float+0xb8>
 800c680:	3401      	adds	r4, #1
 800c682:	e7e5      	b.n	800c650 <_printf_float+0x25c>
 800c684:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c686:	2b00      	cmp	r3, #0
 800c688:	dc3a      	bgt.n	800c700 <_printf_float+0x30c>
 800c68a:	2301      	movs	r3, #1
 800c68c:	4a1b      	ldr	r2, [pc, #108]	@ (800c6fc <_printf_float+0x308>)
 800c68e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c690:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c692:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800c694:	47a0      	blx	r4
 800c696:	3001      	adds	r0, #1
 800c698:	d100      	bne.n	800c69c <_printf_float+0x2a8>
 800c69a:	e707      	b.n	800c4ac <_printf_float+0xb8>
 800c69c:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 800c69e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c6a0:	4333      	orrs	r3, r6
 800c6a2:	d102      	bne.n	800c6aa <_printf_float+0x2b6>
 800c6a4:	682b      	ldr	r3, [r5, #0]
 800c6a6:	07db      	lsls	r3, r3, #31
 800c6a8:	d5d5      	bpl.n	800c656 <_printf_float+0x262>
 800c6aa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c6ac:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c6ae:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c6b0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c6b2:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800c6b4:	47a0      	blx	r4
 800c6b6:	2300      	movs	r3, #0
 800c6b8:	3001      	adds	r0, #1
 800c6ba:	d100      	bne.n	800c6be <_printf_float+0x2ca>
 800c6bc:	e6f6      	b.n	800c4ac <_printf_float+0xb8>
 800c6be:	930c      	str	r3, [sp, #48]	@ 0x30
 800c6c0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c6c2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800c6c4:	425b      	negs	r3, r3
 800c6c6:	4293      	cmp	r3, r2
 800c6c8:	dc01      	bgt.n	800c6ce <_printf_float+0x2da>
 800c6ca:	0033      	movs	r3, r6
 800c6cc:	e792      	b.n	800c5f4 <_printf_float+0x200>
 800c6ce:	002a      	movs	r2, r5
 800c6d0:	2301      	movs	r3, #1
 800c6d2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c6d4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c6d6:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800c6d8:	321a      	adds	r2, #26
 800c6da:	47a0      	blx	r4
 800c6dc:	3001      	adds	r0, #1
 800c6de:	d100      	bne.n	800c6e2 <_printf_float+0x2ee>
 800c6e0:	e6e4      	b.n	800c4ac <_printf_float+0xb8>
 800c6e2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c6e4:	3301      	adds	r3, #1
 800c6e6:	e7ea      	b.n	800c6be <_printf_float+0x2ca>
 800c6e8:	7fefffff 	.word	0x7fefffff
 800c6ec:	0800fbe8 	.word	0x0800fbe8
 800c6f0:	0800fbec 	.word	0x0800fbec
 800c6f4:	0800fbf0 	.word	0x0800fbf0
 800c6f8:	0800fbf4 	.word	0x0800fbf4
 800c6fc:	0800fbf8 	.word	0x0800fbf8
 800c700:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c702:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 800c704:	930c      	str	r3, [sp, #48]	@ 0x30
 800c706:	429e      	cmp	r6, r3
 800c708:	dd00      	ble.n	800c70c <_printf_float+0x318>
 800c70a:	001e      	movs	r6, r3
 800c70c:	2e00      	cmp	r6, #0
 800c70e:	dc31      	bgt.n	800c774 <_printf_float+0x380>
 800c710:	43f3      	mvns	r3, r6
 800c712:	2400      	movs	r4, #0
 800c714:	17db      	asrs	r3, r3, #31
 800c716:	4033      	ands	r3, r6
 800c718:	930e      	str	r3, [sp, #56]	@ 0x38
 800c71a:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 800c71c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c71e:	1af3      	subs	r3, r6, r3
 800c720:	42a3      	cmp	r3, r4
 800c722:	dc30      	bgt.n	800c786 <_printf_float+0x392>
 800c724:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c726:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800c728:	429a      	cmp	r2, r3
 800c72a:	dc38      	bgt.n	800c79e <_printf_float+0x3aa>
 800c72c:	682b      	ldr	r3, [r5, #0]
 800c72e:	07db      	lsls	r3, r3, #31
 800c730:	d435      	bmi.n	800c79e <_printf_float+0x3aa>
 800c732:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 800c734:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c736:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800c738:	1b9b      	subs	r3, r3, r6
 800c73a:	1b14      	subs	r4, r2, r4
 800c73c:	429c      	cmp	r4, r3
 800c73e:	dd00      	ble.n	800c742 <_printf_float+0x34e>
 800c740:	001c      	movs	r4, r3
 800c742:	2c00      	cmp	r4, #0
 800c744:	dc34      	bgt.n	800c7b0 <_printf_float+0x3bc>
 800c746:	43e3      	mvns	r3, r4
 800c748:	2600      	movs	r6, #0
 800c74a:	17db      	asrs	r3, r3, #31
 800c74c:	401c      	ands	r4, r3
 800c74e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c750:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800c752:	1ad3      	subs	r3, r2, r3
 800c754:	1b1b      	subs	r3, r3, r4
 800c756:	42b3      	cmp	r3, r6
 800c758:	dc00      	bgt.n	800c75c <_printf_float+0x368>
 800c75a:	e77c      	b.n	800c656 <_printf_float+0x262>
 800c75c:	002a      	movs	r2, r5
 800c75e:	2301      	movs	r3, #1
 800c760:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c762:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c764:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800c766:	321a      	adds	r2, #26
 800c768:	47b8      	blx	r7
 800c76a:	3001      	adds	r0, #1
 800c76c:	d100      	bne.n	800c770 <_printf_float+0x37c>
 800c76e:	e69d      	b.n	800c4ac <_printf_float+0xb8>
 800c770:	3601      	adds	r6, #1
 800c772:	e7ec      	b.n	800c74e <_printf_float+0x35a>
 800c774:	0033      	movs	r3, r6
 800c776:	003a      	movs	r2, r7
 800c778:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c77a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c77c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800c77e:	47a0      	blx	r4
 800c780:	3001      	adds	r0, #1
 800c782:	d1c5      	bne.n	800c710 <_printf_float+0x31c>
 800c784:	e692      	b.n	800c4ac <_printf_float+0xb8>
 800c786:	002a      	movs	r2, r5
 800c788:	2301      	movs	r3, #1
 800c78a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c78c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c78e:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800c790:	321a      	adds	r2, #26
 800c792:	47b0      	blx	r6
 800c794:	3001      	adds	r0, #1
 800c796:	d100      	bne.n	800c79a <_printf_float+0x3a6>
 800c798:	e688      	b.n	800c4ac <_printf_float+0xb8>
 800c79a:	3401      	adds	r4, #1
 800c79c:	e7bd      	b.n	800c71a <_printf_float+0x326>
 800c79e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c7a0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c7a2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c7a4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c7a6:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800c7a8:	47a0      	blx	r4
 800c7aa:	3001      	adds	r0, #1
 800c7ac:	d1c1      	bne.n	800c732 <_printf_float+0x33e>
 800c7ae:	e67d      	b.n	800c4ac <_printf_float+0xb8>
 800c7b0:	19ba      	adds	r2, r7, r6
 800c7b2:	0023      	movs	r3, r4
 800c7b4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c7b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c7b8:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800c7ba:	47b0      	blx	r6
 800c7bc:	3001      	adds	r0, #1
 800c7be:	d1c2      	bne.n	800c746 <_printf_float+0x352>
 800c7c0:	e674      	b.n	800c4ac <_printf_float+0xb8>
 800c7c2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c7c4:	930c      	str	r3, [sp, #48]	@ 0x30
 800c7c6:	2b01      	cmp	r3, #1
 800c7c8:	dc02      	bgt.n	800c7d0 <_printf_float+0x3dc>
 800c7ca:	2301      	movs	r3, #1
 800c7cc:	421a      	tst	r2, r3
 800c7ce:	d039      	beq.n	800c844 <_printf_float+0x450>
 800c7d0:	2301      	movs	r3, #1
 800c7d2:	003a      	movs	r2, r7
 800c7d4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c7d6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c7d8:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800c7da:	47b0      	blx	r6
 800c7dc:	3001      	adds	r0, #1
 800c7de:	d100      	bne.n	800c7e2 <_printf_float+0x3ee>
 800c7e0:	e664      	b.n	800c4ac <_printf_float+0xb8>
 800c7e2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c7e4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c7e6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c7e8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c7ea:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800c7ec:	47b0      	blx	r6
 800c7ee:	3001      	adds	r0, #1
 800c7f0:	d100      	bne.n	800c7f4 <_printf_float+0x400>
 800c7f2:	e65b      	b.n	800c4ac <_printf_float+0xb8>
 800c7f4:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800c7f6:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800c7f8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c7fa:	2200      	movs	r2, #0
 800c7fc:	3b01      	subs	r3, #1
 800c7fe:	930c      	str	r3, [sp, #48]	@ 0x30
 800c800:	2300      	movs	r3, #0
 800c802:	f7f3 fe23 	bl	800044c <__aeabi_dcmpeq>
 800c806:	2800      	cmp	r0, #0
 800c808:	d11a      	bne.n	800c840 <_printf_float+0x44c>
 800c80a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c80c:	1c7a      	adds	r2, r7, #1
 800c80e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c810:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c812:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800c814:	47b0      	blx	r6
 800c816:	3001      	adds	r0, #1
 800c818:	d10e      	bne.n	800c838 <_printf_float+0x444>
 800c81a:	e647      	b.n	800c4ac <_printf_float+0xb8>
 800c81c:	002a      	movs	r2, r5
 800c81e:	2301      	movs	r3, #1
 800c820:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c822:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c824:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800c826:	321a      	adds	r2, #26
 800c828:	47b8      	blx	r7
 800c82a:	3001      	adds	r0, #1
 800c82c:	d100      	bne.n	800c830 <_printf_float+0x43c>
 800c82e:	e63d      	b.n	800c4ac <_printf_float+0xb8>
 800c830:	3601      	adds	r6, #1
 800c832:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c834:	429e      	cmp	r6, r3
 800c836:	dbf1      	blt.n	800c81c <_printf_float+0x428>
 800c838:	002a      	movs	r2, r5
 800c83a:	0023      	movs	r3, r4
 800c83c:	3250      	adds	r2, #80	@ 0x50
 800c83e:	e6da      	b.n	800c5f6 <_printf_float+0x202>
 800c840:	2600      	movs	r6, #0
 800c842:	e7f6      	b.n	800c832 <_printf_float+0x43e>
 800c844:	003a      	movs	r2, r7
 800c846:	e7e2      	b.n	800c80e <_printf_float+0x41a>
 800c848:	002a      	movs	r2, r5
 800c84a:	2301      	movs	r3, #1
 800c84c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c84e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c850:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800c852:	3219      	adds	r2, #25
 800c854:	47b0      	blx	r6
 800c856:	3001      	adds	r0, #1
 800c858:	d100      	bne.n	800c85c <_printf_float+0x468>
 800c85a:	e627      	b.n	800c4ac <_printf_float+0xb8>
 800c85c:	3401      	adds	r4, #1
 800c85e:	68eb      	ldr	r3, [r5, #12]
 800c860:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800c862:	1a9b      	subs	r3, r3, r2
 800c864:	42a3      	cmp	r3, r4
 800c866:	dcef      	bgt.n	800c848 <_printf_float+0x454>
 800c868:	e6f9      	b.n	800c65e <_printf_float+0x26a>
 800c86a:	2400      	movs	r4, #0
 800c86c:	e7f7      	b.n	800c85e <_printf_float+0x46a>
 800c86e:	46c0      	nop			@ (mov r8, r8)

0800c870 <_printf_common>:
 800c870:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c872:	0016      	movs	r6, r2
 800c874:	9301      	str	r3, [sp, #4]
 800c876:	688a      	ldr	r2, [r1, #8]
 800c878:	690b      	ldr	r3, [r1, #16]
 800c87a:	000c      	movs	r4, r1
 800c87c:	9000      	str	r0, [sp, #0]
 800c87e:	4293      	cmp	r3, r2
 800c880:	da00      	bge.n	800c884 <_printf_common+0x14>
 800c882:	0013      	movs	r3, r2
 800c884:	0022      	movs	r2, r4
 800c886:	6033      	str	r3, [r6, #0]
 800c888:	3243      	adds	r2, #67	@ 0x43
 800c88a:	7812      	ldrb	r2, [r2, #0]
 800c88c:	2a00      	cmp	r2, #0
 800c88e:	d001      	beq.n	800c894 <_printf_common+0x24>
 800c890:	3301      	adds	r3, #1
 800c892:	6033      	str	r3, [r6, #0]
 800c894:	6823      	ldr	r3, [r4, #0]
 800c896:	069b      	lsls	r3, r3, #26
 800c898:	d502      	bpl.n	800c8a0 <_printf_common+0x30>
 800c89a:	6833      	ldr	r3, [r6, #0]
 800c89c:	3302      	adds	r3, #2
 800c89e:	6033      	str	r3, [r6, #0]
 800c8a0:	6822      	ldr	r2, [r4, #0]
 800c8a2:	2306      	movs	r3, #6
 800c8a4:	0015      	movs	r5, r2
 800c8a6:	401d      	ands	r5, r3
 800c8a8:	421a      	tst	r2, r3
 800c8aa:	d027      	beq.n	800c8fc <_printf_common+0x8c>
 800c8ac:	0023      	movs	r3, r4
 800c8ae:	3343      	adds	r3, #67	@ 0x43
 800c8b0:	781b      	ldrb	r3, [r3, #0]
 800c8b2:	1e5a      	subs	r2, r3, #1
 800c8b4:	4193      	sbcs	r3, r2
 800c8b6:	6822      	ldr	r2, [r4, #0]
 800c8b8:	0692      	lsls	r2, r2, #26
 800c8ba:	d430      	bmi.n	800c91e <_printf_common+0xae>
 800c8bc:	0022      	movs	r2, r4
 800c8be:	9901      	ldr	r1, [sp, #4]
 800c8c0:	9800      	ldr	r0, [sp, #0]
 800c8c2:	9d08      	ldr	r5, [sp, #32]
 800c8c4:	3243      	adds	r2, #67	@ 0x43
 800c8c6:	47a8      	blx	r5
 800c8c8:	3001      	adds	r0, #1
 800c8ca:	d025      	beq.n	800c918 <_printf_common+0xa8>
 800c8cc:	2206      	movs	r2, #6
 800c8ce:	6823      	ldr	r3, [r4, #0]
 800c8d0:	2500      	movs	r5, #0
 800c8d2:	4013      	ands	r3, r2
 800c8d4:	2b04      	cmp	r3, #4
 800c8d6:	d105      	bne.n	800c8e4 <_printf_common+0x74>
 800c8d8:	6833      	ldr	r3, [r6, #0]
 800c8da:	68e5      	ldr	r5, [r4, #12]
 800c8dc:	1aed      	subs	r5, r5, r3
 800c8de:	43eb      	mvns	r3, r5
 800c8e0:	17db      	asrs	r3, r3, #31
 800c8e2:	401d      	ands	r5, r3
 800c8e4:	68a3      	ldr	r3, [r4, #8]
 800c8e6:	6922      	ldr	r2, [r4, #16]
 800c8e8:	4293      	cmp	r3, r2
 800c8ea:	dd01      	ble.n	800c8f0 <_printf_common+0x80>
 800c8ec:	1a9b      	subs	r3, r3, r2
 800c8ee:	18ed      	adds	r5, r5, r3
 800c8f0:	2600      	movs	r6, #0
 800c8f2:	42b5      	cmp	r5, r6
 800c8f4:	d120      	bne.n	800c938 <_printf_common+0xc8>
 800c8f6:	2000      	movs	r0, #0
 800c8f8:	e010      	b.n	800c91c <_printf_common+0xac>
 800c8fa:	3501      	adds	r5, #1
 800c8fc:	68e3      	ldr	r3, [r4, #12]
 800c8fe:	6832      	ldr	r2, [r6, #0]
 800c900:	1a9b      	subs	r3, r3, r2
 800c902:	42ab      	cmp	r3, r5
 800c904:	ddd2      	ble.n	800c8ac <_printf_common+0x3c>
 800c906:	0022      	movs	r2, r4
 800c908:	2301      	movs	r3, #1
 800c90a:	9901      	ldr	r1, [sp, #4]
 800c90c:	9800      	ldr	r0, [sp, #0]
 800c90e:	9f08      	ldr	r7, [sp, #32]
 800c910:	3219      	adds	r2, #25
 800c912:	47b8      	blx	r7
 800c914:	3001      	adds	r0, #1
 800c916:	d1f0      	bne.n	800c8fa <_printf_common+0x8a>
 800c918:	2001      	movs	r0, #1
 800c91a:	4240      	negs	r0, r0
 800c91c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c91e:	2030      	movs	r0, #48	@ 0x30
 800c920:	18e1      	adds	r1, r4, r3
 800c922:	3143      	adds	r1, #67	@ 0x43
 800c924:	7008      	strb	r0, [r1, #0]
 800c926:	0021      	movs	r1, r4
 800c928:	1c5a      	adds	r2, r3, #1
 800c92a:	3145      	adds	r1, #69	@ 0x45
 800c92c:	7809      	ldrb	r1, [r1, #0]
 800c92e:	18a2      	adds	r2, r4, r2
 800c930:	3243      	adds	r2, #67	@ 0x43
 800c932:	3302      	adds	r3, #2
 800c934:	7011      	strb	r1, [r2, #0]
 800c936:	e7c1      	b.n	800c8bc <_printf_common+0x4c>
 800c938:	0022      	movs	r2, r4
 800c93a:	2301      	movs	r3, #1
 800c93c:	9901      	ldr	r1, [sp, #4]
 800c93e:	9800      	ldr	r0, [sp, #0]
 800c940:	9f08      	ldr	r7, [sp, #32]
 800c942:	321a      	adds	r2, #26
 800c944:	47b8      	blx	r7
 800c946:	3001      	adds	r0, #1
 800c948:	d0e6      	beq.n	800c918 <_printf_common+0xa8>
 800c94a:	3601      	adds	r6, #1
 800c94c:	e7d1      	b.n	800c8f2 <_printf_common+0x82>
	...

0800c950 <_printf_i>:
 800c950:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c952:	b08b      	sub	sp, #44	@ 0x2c
 800c954:	9206      	str	r2, [sp, #24]
 800c956:	000a      	movs	r2, r1
 800c958:	3243      	adds	r2, #67	@ 0x43
 800c95a:	9307      	str	r3, [sp, #28]
 800c95c:	9005      	str	r0, [sp, #20]
 800c95e:	9203      	str	r2, [sp, #12]
 800c960:	7e0a      	ldrb	r2, [r1, #24]
 800c962:	000c      	movs	r4, r1
 800c964:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c966:	2a78      	cmp	r2, #120	@ 0x78
 800c968:	d809      	bhi.n	800c97e <_printf_i+0x2e>
 800c96a:	2a62      	cmp	r2, #98	@ 0x62
 800c96c:	d80b      	bhi.n	800c986 <_printf_i+0x36>
 800c96e:	2a00      	cmp	r2, #0
 800c970:	d100      	bne.n	800c974 <_printf_i+0x24>
 800c972:	e0bc      	b.n	800caee <_printf_i+0x19e>
 800c974:	497b      	ldr	r1, [pc, #492]	@ (800cb64 <_printf_i+0x214>)
 800c976:	9104      	str	r1, [sp, #16]
 800c978:	2a58      	cmp	r2, #88	@ 0x58
 800c97a:	d100      	bne.n	800c97e <_printf_i+0x2e>
 800c97c:	e090      	b.n	800caa0 <_printf_i+0x150>
 800c97e:	0025      	movs	r5, r4
 800c980:	3542      	adds	r5, #66	@ 0x42
 800c982:	702a      	strb	r2, [r5, #0]
 800c984:	e022      	b.n	800c9cc <_printf_i+0x7c>
 800c986:	0010      	movs	r0, r2
 800c988:	3863      	subs	r0, #99	@ 0x63
 800c98a:	2815      	cmp	r0, #21
 800c98c:	d8f7      	bhi.n	800c97e <_printf_i+0x2e>
 800c98e:	f7f3 fbcd 	bl	800012c <__gnu_thumb1_case_shi>
 800c992:	0016      	.short	0x0016
 800c994:	fff6001f 	.word	0xfff6001f
 800c998:	fff6fff6 	.word	0xfff6fff6
 800c99c:	001ffff6 	.word	0x001ffff6
 800c9a0:	fff6fff6 	.word	0xfff6fff6
 800c9a4:	fff6fff6 	.word	0xfff6fff6
 800c9a8:	003600a1 	.word	0x003600a1
 800c9ac:	fff60080 	.word	0xfff60080
 800c9b0:	00b2fff6 	.word	0x00b2fff6
 800c9b4:	0036fff6 	.word	0x0036fff6
 800c9b8:	fff6fff6 	.word	0xfff6fff6
 800c9bc:	0084      	.short	0x0084
 800c9be:	0025      	movs	r5, r4
 800c9c0:	681a      	ldr	r2, [r3, #0]
 800c9c2:	3542      	adds	r5, #66	@ 0x42
 800c9c4:	1d11      	adds	r1, r2, #4
 800c9c6:	6019      	str	r1, [r3, #0]
 800c9c8:	6813      	ldr	r3, [r2, #0]
 800c9ca:	702b      	strb	r3, [r5, #0]
 800c9cc:	2301      	movs	r3, #1
 800c9ce:	e0a0      	b.n	800cb12 <_printf_i+0x1c2>
 800c9d0:	6818      	ldr	r0, [r3, #0]
 800c9d2:	6809      	ldr	r1, [r1, #0]
 800c9d4:	1d02      	adds	r2, r0, #4
 800c9d6:	060d      	lsls	r5, r1, #24
 800c9d8:	d50b      	bpl.n	800c9f2 <_printf_i+0xa2>
 800c9da:	6806      	ldr	r6, [r0, #0]
 800c9dc:	601a      	str	r2, [r3, #0]
 800c9de:	2e00      	cmp	r6, #0
 800c9e0:	da03      	bge.n	800c9ea <_printf_i+0x9a>
 800c9e2:	232d      	movs	r3, #45	@ 0x2d
 800c9e4:	9a03      	ldr	r2, [sp, #12]
 800c9e6:	4276      	negs	r6, r6
 800c9e8:	7013      	strb	r3, [r2, #0]
 800c9ea:	4b5e      	ldr	r3, [pc, #376]	@ (800cb64 <_printf_i+0x214>)
 800c9ec:	270a      	movs	r7, #10
 800c9ee:	9304      	str	r3, [sp, #16]
 800c9f0:	e018      	b.n	800ca24 <_printf_i+0xd4>
 800c9f2:	6806      	ldr	r6, [r0, #0]
 800c9f4:	601a      	str	r2, [r3, #0]
 800c9f6:	0649      	lsls	r1, r1, #25
 800c9f8:	d5f1      	bpl.n	800c9de <_printf_i+0x8e>
 800c9fa:	b236      	sxth	r6, r6
 800c9fc:	e7ef      	b.n	800c9de <_printf_i+0x8e>
 800c9fe:	6808      	ldr	r0, [r1, #0]
 800ca00:	6819      	ldr	r1, [r3, #0]
 800ca02:	c940      	ldmia	r1!, {r6}
 800ca04:	0605      	lsls	r5, r0, #24
 800ca06:	d402      	bmi.n	800ca0e <_printf_i+0xbe>
 800ca08:	0640      	lsls	r0, r0, #25
 800ca0a:	d500      	bpl.n	800ca0e <_printf_i+0xbe>
 800ca0c:	b2b6      	uxth	r6, r6
 800ca0e:	6019      	str	r1, [r3, #0]
 800ca10:	4b54      	ldr	r3, [pc, #336]	@ (800cb64 <_printf_i+0x214>)
 800ca12:	270a      	movs	r7, #10
 800ca14:	9304      	str	r3, [sp, #16]
 800ca16:	2a6f      	cmp	r2, #111	@ 0x6f
 800ca18:	d100      	bne.n	800ca1c <_printf_i+0xcc>
 800ca1a:	3f02      	subs	r7, #2
 800ca1c:	0023      	movs	r3, r4
 800ca1e:	2200      	movs	r2, #0
 800ca20:	3343      	adds	r3, #67	@ 0x43
 800ca22:	701a      	strb	r2, [r3, #0]
 800ca24:	6863      	ldr	r3, [r4, #4]
 800ca26:	60a3      	str	r3, [r4, #8]
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	db03      	blt.n	800ca34 <_printf_i+0xe4>
 800ca2c:	2104      	movs	r1, #4
 800ca2e:	6822      	ldr	r2, [r4, #0]
 800ca30:	438a      	bics	r2, r1
 800ca32:	6022      	str	r2, [r4, #0]
 800ca34:	2e00      	cmp	r6, #0
 800ca36:	d102      	bne.n	800ca3e <_printf_i+0xee>
 800ca38:	9d03      	ldr	r5, [sp, #12]
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d00c      	beq.n	800ca58 <_printf_i+0x108>
 800ca3e:	9d03      	ldr	r5, [sp, #12]
 800ca40:	0030      	movs	r0, r6
 800ca42:	0039      	movs	r1, r7
 800ca44:	f7f3 fc02 	bl	800024c <__aeabi_uidivmod>
 800ca48:	9b04      	ldr	r3, [sp, #16]
 800ca4a:	3d01      	subs	r5, #1
 800ca4c:	5c5b      	ldrb	r3, [r3, r1]
 800ca4e:	702b      	strb	r3, [r5, #0]
 800ca50:	0033      	movs	r3, r6
 800ca52:	0006      	movs	r6, r0
 800ca54:	429f      	cmp	r7, r3
 800ca56:	d9f3      	bls.n	800ca40 <_printf_i+0xf0>
 800ca58:	2f08      	cmp	r7, #8
 800ca5a:	d109      	bne.n	800ca70 <_printf_i+0x120>
 800ca5c:	6823      	ldr	r3, [r4, #0]
 800ca5e:	07db      	lsls	r3, r3, #31
 800ca60:	d506      	bpl.n	800ca70 <_printf_i+0x120>
 800ca62:	6862      	ldr	r2, [r4, #4]
 800ca64:	6923      	ldr	r3, [r4, #16]
 800ca66:	429a      	cmp	r2, r3
 800ca68:	dc02      	bgt.n	800ca70 <_printf_i+0x120>
 800ca6a:	2330      	movs	r3, #48	@ 0x30
 800ca6c:	3d01      	subs	r5, #1
 800ca6e:	702b      	strb	r3, [r5, #0]
 800ca70:	9b03      	ldr	r3, [sp, #12]
 800ca72:	1b5b      	subs	r3, r3, r5
 800ca74:	6123      	str	r3, [r4, #16]
 800ca76:	9b07      	ldr	r3, [sp, #28]
 800ca78:	0021      	movs	r1, r4
 800ca7a:	9300      	str	r3, [sp, #0]
 800ca7c:	9805      	ldr	r0, [sp, #20]
 800ca7e:	9b06      	ldr	r3, [sp, #24]
 800ca80:	aa09      	add	r2, sp, #36	@ 0x24
 800ca82:	f7ff fef5 	bl	800c870 <_printf_common>
 800ca86:	3001      	adds	r0, #1
 800ca88:	d148      	bne.n	800cb1c <_printf_i+0x1cc>
 800ca8a:	2001      	movs	r0, #1
 800ca8c:	4240      	negs	r0, r0
 800ca8e:	b00b      	add	sp, #44	@ 0x2c
 800ca90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ca92:	2220      	movs	r2, #32
 800ca94:	6809      	ldr	r1, [r1, #0]
 800ca96:	430a      	orrs	r2, r1
 800ca98:	6022      	str	r2, [r4, #0]
 800ca9a:	2278      	movs	r2, #120	@ 0x78
 800ca9c:	4932      	ldr	r1, [pc, #200]	@ (800cb68 <_printf_i+0x218>)
 800ca9e:	9104      	str	r1, [sp, #16]
 800caa0:	0021      	movs	r1, r4
 800caa2:	3145      	adds	r1, #69	@ 0x45
 800caa4:	700a      	strb	r2, [r1, #0]
 800caa6:	6819      	ldr	r1, [r3, #0]
 800caa8:	6822      	ldr	r2, [r4, #0]
 800caaa:	c940      	ldmia	r1!, {r6}
 800caac:	0610      	lsls	r0, r2, #24
 800caae:	d402      	bmi.n	800cab6 <_printf_i+0x166>
 800cab0:	0650      	lsls	r0, r2, #25
 800cab2:	d500      	bpl.n	800cab6 <_printf_i+0x166>
 800cab4:	b2b6      	uxth	r6, r6
 800cab6:	6019      	str	r1, [r3, #0]
 800cab8:	07d3      	lsls	r3, r2, #31
 800caba:	d502      	bpl.n	800cac2 <_printf_i+0x172>
 800cabc:	2320      	movs	r3, #32
 800cabe:	4313      	orrs	r3, r2
 800cac0:	6023      	str	r3, [r4, #0]
 800cac2:	2e00      	cmp	r6, #0
 800cac4:	d001      	beq.n	800caca <_printf_i+0x17a>
 800cac6:	2710      	movs	r7, #16
 800cac8:	e7a8      	b.n	800ca1c <_printf_i+0xcc>
 800caca:	2220      	movs	r2, #32
 800cacc:	6823      	ldr	r3, [r4, #0]
 800cace:	4393      	bics	r3, r2
 800cad0:	6023      	str	r3, [r4, #0]
 800cad2:	e7f8      	b.n	800cac6 <_printf_i+0x176>
 800cad4:	681a      	ldr	r2, [r3, #0]
 800cad6:	680d      	ldr	r5, [r1, #0]
 800cad8:	1d10      	adds	r0, r2, #4
 800cada:	6949      	ldr	r1, [r1, #20]
 800cadc:	6018      	str	r0, [r3, #0]
 800cade:	6813      	ldr	r3, [r2, #0]
 800cae0:	062e      	lsls	r6, r5, #24
 800cae2:	d501      	bpl.n	800cae8 <_printf_i+0x198>
 800cae4:	6019      	str	r1, [r3, #0]
 800cae6:	e002      	b.n	800caee <_printf_i+0x19e>
 800cae8:	066d      	lsls	r5, r5, #25
 800caea:	d5fb      	bpl.n	800cae4 <_printf_i+0x194>
 800caec:	8019      	strh	r1, [r3, #0]
 800caee:	2300      	movs	r3, #0
 800caf0:	9d03      	ldr	r5, [sp, #12]
 800caf2:	6123      	str	r3, [r4, #16]
 800caf4:	e7bf      	b.n	800ca76 <_printf_i+0x126>
 800caf6:	681a      	ldr	r2, [r3, #0]
 800caf8:	1d11      	adds	r1, r2, #4
 800cafa:	6019      	str	r1, [r3, #0]
 800cafc:	6815      	ldr	r5, [r2, #0]
 800cafe:	2100      	movs	r1, #0
 800cb00:	0028      	movs	r0, r5
 800cb02:	6862      	ldr	r2, [r4, #4]
 800cb04:	f000 fa47 	bl	800cf96 <memchr>
 800cb08:	2800      	cmp	r0, #0
 800cb0a:	d001      	beq.n	800cb10 <_printf_i+0x1c0>
 800cb0c:	1b40      	subs	r0, r0, r5
 800cb0e:	6060      	str	r0, [r4, #4]
 800cb10:	6863      	ldr	r3, [r4, #4]
 800cb12:	6123      	str	r3, [r4, #16]
 800cb14:	2300      	movs	r3, #0
 800cb16:	9a03      	ldr	r2, [sp, #12]
 800cb18:	7013      	strb	r3, [r2, #0]
 800cb1a:	e7ac      	b.n	800ca76 <_printf_i+0x126>
 800cb1c:	002a      	movs	r2, r5
 800cb1e:	6923      	ldr	r3, [r4, #16]
 800cb20:	9906      	ldr	r1, [sp, #24]
 800cb22:	9805      	ldr	r0, [sp, #20]
 800cb24:	9d07      	ldr	r5, [sp, #28]
 800cb26:	47a8      	blx	r5
 800cb28:	3001      	adds	r0, #1
 800cb2a:	d0ae      	beq.n	800ca8a <_printf_i+0x13a>
 800cb2c:	6823      	ldr	r3, [r4, #0]
 800cb2e:	079b      	lsls	r3, r3, #30
 800cb30:	d415      	bmi.n	800cb5e <_printf_i+0x20e>
 800cb32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cb34:	68e0      	ldr	r0, [r4, #12]
 800cb36:	4298      	cmp	r0, r3
 800cb38:	daa9      	bge.n	800ca8e <_printf_i+0x13e>
 800cb3a:	0018      	movs	r0, r3
 800cb3c:	e7a7      	b.n	800ca8e <_printf_i+0x13e>
 800cb3e:	0022      	movs	r2, r4
 800cb40:	2301      	movs	r3, #1
 800cb42:	9906      	ldr	r1, [sp, #24]
 800cb44:	9805      	ldr	r0, [sp, #20]
 800cb46:	9e07      	ldr	r6, [sp, #28]
 800cb48:	3219      	adds	r2, #25
 800cb4a:	47b0      	blx	r6
 800cb4c:	3001      	adds	r0, #1
 800cb4e:	d09c      	beq.n	800ca8a <_printf_i+0x13a>
 800cb50:	3501      	adds	r5, #1
 800cb52:	68e3      	ldr	r3, [r4, #12]
 800cb54:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cb56:	1a9b      	subs	r3, r3, r2
 800cb58:	42ab      	cmp	r3, r5
 800cb5a:	dcf0      	bgt.n	800cb3e <_printf_i+0x1ee>
 800cb5c:	e7e9      	b.n	800cb32 <_printf_i+0x1e2>
 800cb5e:	2500      	movs	r5, #0
 800cb60:	e7f7      	b.n	800cb52 <_printf_i+0x202>
 800cb62:	46c0      	nop			@ (mov r8, r8)
 800cb64:	0800fbfa 	.word	0x0800fbfa
 800cb68:	0800fc0b 	.word	0x0800fc0b

0800cb6c <std>:
 800cb6c:	2300      	movs	r3, #0
 800cb6e:	b510      	push	{r4, lr}
 800cb70:	0004      	movs	r4, r0
 800cb72:	6003      	str	r3, [r0, #0]
 800cb74:	6043      	str	r3, [r0, #4]
 800cb76:	6083      	str	r3, [r0, #8]
 800cb78:	8181      	strh	r1, [r0, #12]
 800cb7a:	6643      	str	r3, [r0, #100]	@ 0x64
 800cb7c:	81c2      	strh	r2, [r0, #14]
 800cb7e:	6103      	str	r3, [r0, #16]
 800cb80:	6143      	str	r3, [r0, #20]
 800cb82:	6183      	str	r3, [r0, #24]
 800cb84:	0019      	movs	r1, r3
 800cb86:	2208      	movs	r2, #8
 800cb88:	305c      	adds	r0, #92	@ 0x5c
 800cb8a:	f000 f967 	bl	800ce5c <memset>
 800cb8e:	4b0b      	ldr	r3, [pc, #44]	@ (800cbbc <std+0x50>)
 800cb90:	6224      	str	r4, [r4, #32]
 800cb92:	6263      	str	r3, [r4, #36]	@ 0x24
 800cb94:	4b0a      	ldr	r3, [pc, #40]	@ (800cbc0 <std+0x54>)
 800cb96:	62a3      	str	r3, [r4, #40]	@ 0x28
 800cb98:	4b0a      	ldr	r3, [pc, #40]	@ (800cbc4 <std+0x58>)
 800cb9a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800cb9c:	4b0a      	ldr	r3, [pc, #40]	@ (800cbc8 <std+0x5c>)
 800cb9e:	6323      	str	r3, [r4, #48]	@ 0x30
 800cba0:	4b0a      	ldr	r3, [pc, #40]	@ (800cbcc <std+0x60>)
 800cba2:	429c      	cmp	r4, r3
 800cba4:	d005      	beq.n	800cbb2 <std+0x46>
 800cba6:	4b0a      	ldr	r3, [pc, #40]	@ (800cbd0 <std+0x64>)
 800cba8:	429c      	cmp	r4, r3
 800cbaa:	d002      	beq.n	800cbb2 <std+0x46>
 800cbac:	4b09      	ldr	r3, [pc, #36]	@ (800cbd4 <std+0x68>)
 800cbae:	429c      	cmp	r4, r3
 800cbb0:	d103      	bne.n	800cbba <std+0x4e>
 800cbb2:	0020      	movs	r0, r4
 800cbb4:	3058      	adds	r0, #88	@ 0x58
 800cbb6:	f000 f9eb 	bl	800cf90 <__retarget_lock_init_recursive>
 800cbba:	bd10      	pop	{r4, pc}
 800cbbc:	0800cd55 	.word	0x0800cd55
 800cbc0:	0800cd7d 	.word	0x0800cd7d
 800cbc4:	0800cdb5 	.word	0x0800cdb5
 800cbc8:	0800cde1 	.word	0x0800cde1
 800cbcc:	2000101c 	.word	0x2000101c
 800cbd0:	20001084 	.word	0x20001084
 800cbd4:	200010ec 	.word	0x200010ec

0800cbd8 <stdio_exit_handler>:
 800cbd8:	b510      	push	{r4, lr}
 800cbda:	4a03      	ldr	r2, [pc, #12]	@ (800cbe8 <stdio_exit_handler+0x10>)
 800cbdc:	4903      	ldr	r1, [pc, #12]	@ (800cbec <stdio_exit_handler+0x14>)
 800cbde:	4804      	ldr	r0, [pc, #16]	@ (800cbf0 <stdio_exit_handler+0x18>)
 800cbe0:	f000 f86c 	bl	800ccbc <_fwalk_sglue>
 800cbe4:	bd10      	pop	{r4, pc}
 800cbe6:	46c0      	nop			@ (mov r8, r8)
 800cbe8:	20000040 	.word	0x20000040
 800cbec:	0800ec55 	.word	0x0800ec55
 800cbf0:	20000050 	.word	0x20000050

0800cbf4 <cleanup_stdio>:
 800cbf4:	6841      	ldr	r1, [r0, #4]
 800cbf6:	4b0b      	ldr	r3, [pc, #44]	@ (800cc24 <cleanup_stdio+0x30>)
 800cbf8:	b510      	push	{r4, lr}
 800cbfa:	0004      	movs	r4, r0
 800cbfc:	4299      	cmp	r1, r3
 800cbfe:	d001      	beq.n	800cc04 <cleanup_stdio+0x10>
 800cc00:	f002 f828 	bl	800ec54 <_fflush_r>
 800cc04:	68a1      	ldr	r1, [r4, #8]
 800cc06:	4b08      	ldr	r3, [pc, #32]	@ (800cc28 <cleanup_stdio+0x34>)
 800cc08:	4299      	cmp	r1, r3
 800cc0a:	d002      	beq.n	800cc12 <cleanup_stdio+0x1e>
 800cc0c:	0020      	movs	r0, r4
 800cc0e:	f002 f821 	bl	800ec54 <_fflush_r>
 800cc12:	68e1      	ldr	r1, [r4, #12]
 800cc14:	4b05      	ldr	r3, [pc, #20]	@ (800cc2c <cleanup_stdio+0x38>)
 800cc16:	4299      	cmp	r1, r3
 800cc18:	d002      	beq.n	800cc20 <cleanup_stdio+0x2c>
 800cc1a:	0020      	movs	r0, r4
 800cc1c:	f002 f81a 	bl	800ec54 <_fflush_r>
 800cc20:	bd10      	pop	{r4, pc}
 800cc22:	46c0      	nop			@ (mov r8, r8)
 800cc24:	2000101c 	.word	0x2000101c
 800cc28:	20001084 	.word	0x20001084
 800cc2c:	200010ec 	.word	0x200010ec

0800cc30 <global_stdio_init.part.0>:
 800cc30:	b510      	push	{r4, lr}
 800cc32:	4b09      	ldr	r3, [pc, #36]	@ (800cc58 <global_stdio_init.part.0+0x28>)
 800cc34:	4a09      	ldr	r2, [pc, #36]	@ (800cc5c <global_stdio_init.part.0+0x2c>)
 800cc36:	2104      	movs	r1, #4
 800cc38:	601a      	str	r2, [r3, #0]
 800cc3a:	4809      	ldr	r0, [pc, #36]	@ (800cc60 <global_stdio_init.part.0+0x30>)
 800cc3c:	2200      	movs	r2, #0
 800cc3e:	f7ff ff95 	bl	800cb6c <std>
 800cc42:	2201      	movs	r2, #1
 800cc44:	2109      	movs	r1, #9
 800cc46:	4807      	ldr	r0, [pc, #28]	@ (800cc64 <global_stdio_init.part.0+0x34>)
 800cc48:	f7ff ff90 	bl	800cb6c <std>
 800cc4c:	2202      	movs	r2, #2
 800cc4e:	2112      	movs	r1, #18
 800cc50:	4805      	ldr	r0, [pc, #20]	@ (800cc68 <global_stdio_init.part.0+0x38>)
 800cc52:	f7ff ff8b 	bl	800cb6c <std>
 800cc56:	bd10      	pop	{r4, pc}
 800cc58:	20001154 	.word	0x20001154
 800cc5c:	0800cbd9 	.word	0x0800cbd9
 800cc60:	2000101c 	.word	0x2000101c
 800cc64:	20001084 	.word	0x20001084
 800cc68:	200010ec 	.word	0x200010ec

0800cc6c <__sfp_lock_acquire>:
 800cc6c:	b510      	push	{r4, lr}
 800cc6e:	4802      	ldr	r0, [pc, #8]	@ (800cc78 <__sfp_lock_acquire+0xc>)
 800cc70:	f000 f98f 	bl	800cf92 <__retarget_lock_acquire_recursive>
 800cc74:	bd10      	pop	{r4, pc}
 800cc76:	46c0      	nop			@ (mov r8, r8)
 800cc78:	2000115d 	.word	0x2000115d

0800cc7c <__sfp_lock_release>:
 800cc7c:	b510      	push	{r4, lr}
 800cc7e:	4802      	ldr	r0, [pc, #8]	@ (800cc88 <__sfp_lock_release+0xc>)
 800cc80:	f000 f988 	bl	800cf94 <__retarget_lock_release_recursive>
 800cc84:	bd10      	pop	{r4, pc}
 800cc86:	46c0      	nop			@ (mov r8, r8)
 800cc88:	2000115d 	.word	0x2000115d

0800cc8c <__sinit>:
 800cc8c:	b510      	push	{r4, lr}
 800cc8e:	0004      	movs	r4, r0
 800cc90:	f7ff ffec 	bl	800cc6c <__sfp_lock_acquire>
 800cc94:	6a23      	ldr	r3, [r4, #32]
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d002      	beq.n	800cca0 <__sinit+0x14>
 800cc9a:	f7ff ffef 	bl	800cc7c <__sfp_lock_release>
 800cc9e:	bd10      	pop	{r4, pc}
 800cca0:	4b04      	ldr	r3, [pc, #16]	@ (800ccb4 <__sinit+0x28>)
 800cca2:	6223      	str	r3, [r4, #32]
 800cca4:	4b04      	ldr	r3, [pc, #16]	@ (800ccb8 <__sinit+0x2c>)
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d1f6      	bne.n	800cc9a <__sinit+0xe>
 800ccac:	f7ff ffc0 	bl	800cc30 <global_stdio_init.part.0>
 800ccb0:	e7f3      	b.n	800cc9a <__sinit+0xe>
 800ccb2:	46c0      	nop			@ (mov r8, r8)
 800ccb4:	0800cbf5 	.word	0x0800cbf5
 800ccb8:	20001154 	.word	0x20001154

0800ccbc <_fwalk_sglue>:
 800ccbc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ccbe:	0014      	movs	r4, r2
 800ccc0:	2600      	movs	r6, #0
 800ccc2:	9000      	str	r0, [sp, #0]
 800ccc4:	9101      	str	r1, [sp, #4]
 800ccc6:	68a5      	ldr	r5, [r4, #8]
 800ccc8:	6867      	ldr	r7, [r4, #4]
 800ccca:	3f01      	subs	r7, #1
 800cccc:	d504      	bpl.n	800ccd8 <_fwalk_sglue+0x1c>
 800ccce:	6824      	ldr	r4, [r4, #0]
 800ccd0:	2c00      	cmp	r4, #0
 800ccd2:	d1f8      	bne.n	800ccc6 <_fwalk_sglue+0xa>
 800ccd4:	0030      	movs	r0, r6
 800ccd6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ccd8:	89ab      	ldrh	r3, [r5, #12]
 800ccda:	2b01      	cmp	r3, #1
 800ccdc:	d908      	bls.n	800ccf0 <_fwalk_sglue+0x34>
 800ccde:	220e      	movs	r2, #14
 800cce0:	5eab      	ldrsh	r3, [r5, r2]
 800cce2:	3301      	adds	r3, #1
 800cce4:	d004      	beq.n	800ccf0 <_fwalk_sglue+0x34>
 800cce6:	0029      	movs	r1, r5
 800cce8:	9800      	ldr	r0, [sp, #0]
 800ccea:	9b01      	ldr	r3, [sp, #4]
 800ccec:	4798      	blx	r3
 800ccee:	4306      	orrs	r6, r0
 800ccf0:	3568      	adds	r5, #104	@ 0x68
 800ccf2:	e7ea      	b.n	800ccca <_fwalk_sglue+0xe>

0800ccf4 <iprintf>:
 800ccf4:	b40f      	push	{r0, r1, r2, r3}
 800ccf6:	b507      	push	{r0, r1, r2, lr}
 800ccf8:	4905      	ldr	r1, [pc, #20]	@ (800cd10 <iprintf+0x1c>)
 800ccfa:	ab04      	add	r3, sp, #16
 800ccfc:	6808      	ldr	r0, [r1, #0]
 800ccfe:	cb04      	ldmia	r3!, {r2}
 800cd00:	6881      	ldr	r1, [r0, #8]
 800cd02:	9301      	str	r3, [sp, #4]
 800cd04:	f001 fe04 	bl	800e910 <_vfiprintf_r>
 800cd08:	b003      	add	sp, #12
 800cd0a:	bc08      	pop	{r3}
 800cd0c:	b004      	add	sp, #16
 800cd0e:	4718      	bx	r3
 800cd10:	2000004c 	.word	0x2000004c

0800cd14 <siprintf>:
 800cd14:	b40e      	push	{r1, r2, r3}
 800cd16:	b500      	push	{lr}
 800cd18:	490b      	ldr	r1, [pc, #44]	@ (800cd48 <siprintf+0x34>)
 800cd1a:	b09c      	sub	sp, #112	@ 0x70
 800cd1c:	ab1d      	add	r3, sp, #116	@ 0x74
 800cd1e:	9002      	str	r0, [sp, #8]
 800cd20:	9006      	str	r0, [sp, #24]
 800cd22:	9107      	str	r1, [sp, #28]
 800cd24:	9104      	str	r1, [sp, #16]
 800cd26:	4809      	ldr	r0, [pc, #36]	@ (800cd4c <siprintf+0x38>)
 800cd28:	4909      	ldr	r1, [pc, #36]	@ (800cd50 <siprintf+0x3c>)
 800cd2a:	cb04      	ldmia	r3!, {r2}
 800cd2c:	9105      	str	r1, [sp, #20]
 800cd2e:	6800      	ldr	r0, [r0, #0]
 800cd30:	a902      	add	r1, sp, #8
 800cd32:	9301      	str	r3, [sp, #4]
 800cd34:	f001 fcc6 	bl	800e6c4 <_svfiprintf_r>
 800cd38:	2200      	movs	r2, #0
 800cd3a:	9b02      	ldr	r3, [sp, #8]
 800cd3c:	701a      	strb	r2, [r3, #0]
 800cd3e:	b01c      	add	sp, #112	@ 0x70
 800cd40:	bc08      	pop	{r3}
 800cd42:	b003      	add	sp, #12
 800cd44:	4718      	bx	r3
 800cd46:	46c0      	nop			@ (mov r8, r8)
 800cd48:	7fffffff 	.word	0x7fffffff
 800cd4c:	2000004c 	.word	0x2000004c
 800cd50:	ffff0208 	.word	0xffff0208

0800cd54 <__sread>:
 800cd54:	b570      	push	{r4, r5, r6, lr}
 800cd56:	000c      	movs	r4, r1
 800cd58:	250e      	movs	r5, #14
 800cd5a:	5f49      	ldrsh	r1, [r1, r5]
 800cd5c:	f000 f8c6 	bl	800ceec <_read_r>
 800cd60:	2800      	cmp	r0, #0
 800cd62:	db03      	blt.n	800cd6c <__sread+0x18>
 800cd64:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800cd66:	181b      	adds	r3, r3, r0
 800cd68:	6563      	str	r3, [r4, #84]	@ 0x54
 800cd6a:	bd70      	pop	{r4, r5, r6, pc}
 800cd6c:	89a3      	ldrh	r3, [r4, #12]
 800cd6e:	4a02      	ldr	r2, [pc, #8]	@ (800cd78 <__sread+0x24>)
 800cd70:	4013      	ands	r3, r2
 800cd72:	81a3      	strh	r3, [r4, #12]
 800cd74:	e7f9      	b.n	800cd6a <__sread+0x16>
 800cd76:	46c0      	nop			@ (mov r8, r8)
 800cd78:	ffffefff 	.word	0xffffefff

0800cd7c <__swrite>:
 800cd7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd7e:	001f      	movs	r7, r3
 800cd80:	898b      	ldrh	r3, [r1, #12]
 800cd82:	0005      	movs	r5, r0
 800cd84:	000c      	movs	r4, r1
 800cd86:	0016      	movs	r6, r2
 800cd88:	05db      	lsls	r3, r3, #23
 800cd8a:	d505      	bpl.n	800cd98 <__swrite+0x1c>
 800cd8c:	230e      	movs	r3, #14
 800cd8e:	5ec9      	ldrsh	r1, [r1, r3]
 800cd90:	2200      	movs	r2, #0
 800cd92:	2302      	movs	r3, #2
 800cd94:	f000 f896 	bl	800cec4 <_lseek_r>
 800cd98:	89a3      	ldrh	r3, [r4, #12]
 800cd9a:	4a05      	ldr	r2, [pc, #20]	@ (800cdb0 <__swrite+0x34>)
 800cd9c:	0028      	movs	r0, r5
 800cd9e:	4013      	ands	r3, r2
 800cda0:	81a3      	strh	r3, [r4, #12]
 800cda2:	0032      	movs	r2, r6
 800cda4:	230e      	movs	r3, #14
 800cda6:	5ee1      	ldrsh	r1, [r4, r3]
 800cda8:	003b      	movs	r3, r7
 800cdaa:	f000 f8b3 	bl	800cf14 <_write_r>
 800cdae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cdb0:	ffffefff 	.word	0xffffefff

0800cdb4 <__sseek>:
 800cdb4:	b570      	push	{r4, r5, r6, lr}
 800cdb6:	000c      	movs	r4, r1
 800cdb8:	250e      	movs	r5, #14
 800cdba:	5f49      	ldrsh	r1, [r1, r5]
 800cdbc:	f000 f882 	bl	800cec4 <_lseek_r>
 800cdc0:	89a3      	ldrh	r3, [r4, #12]
 800cdc2:	1c42      	adds	r2, r0, #1
 800cdc4:	d103      	bne.n	800cdce <__sseek+0x1a>
 800cdc6:	4a05      	ldr	r2, [pc, #20]	@ (800cddc <__sseek+0x28>)
 800cdc8:	4013      	ands	r3, r2
 800cdca:	81a3      	strh	r3, [r4, #12]
 800cdcc:	bd70      	pop	{r4, r5, r6, pc}
 800cdce:	2280      	movs	r2, #128	@ 0x80
 800cdd0:	0152      	lsls	r2, r2, #5
 800cdd2:	4313      	orrs	r3, r2
 800cdd4:	81a3      	strh	r3, [r4, #12]
 800cdd6:	6560      	str	r0, [r4, #84]	@ 0x54
 800cdd8:	e7f8      	b.n	800cdcc <__sseek+0x18>
 800cdda:	46c0      	nop			@ (mov r8, r8)
 800cddc:	ffffefff 	.word	0xffffefff

0800cde0 <__sclose>:
 800cde0:	b510      	push	{r4, lr}
 800cde2:	230e      	movs	r3, #14
 800cde4:	5ec9      	ldrsh	r1, [r1, r3]
 800cde6:	f000 f85b 	bl	800cea0 <_close_r>
 800cdea:	bd10      	pop	{r4, pc}

0800cdec <_vsniprintf_r>:
 800cdec:	b530      	push	{r4, r5, lr}
 800cdee:	0014      	movs	r4, r2
 800cdf0:	0005      	movs	r5, r0
 800cdf2:	001a      	movs	r2, r3
 800cdf4:	b09b      	sub	sp, #108	@ 0x6c
 800cdf6:	2c00      	cmp	r4, #0
 800cdf8:	da05      	bge.n	800ce06 <_vsniprintf_r+0x1a>
 800cdfa:	238b      	movs	r3, #139	@ 0x8b
 800cdfc:	6003      	str	r3, [r0, #0]
 800cdfe:	2001      	movs	r0, #1
 800ce00:	4240      	negs	r0, r0
 800ce02:	b01b      	add	sp, #108	@ 0x6c
 800ce04:	bd30      	pop	{r4, r5, pc}
 800ce06:	2382      	movs	r3, #130	@ 0x82
 800ce08:	4668      	mov	r0, sp
 800ce0a:	009b      	lsls	r3, r3, #2
 800ce0c:	8183      	strh	r3, [r0, #12]
 800ce0e:	2300      	movs	r3, #0
 800ce10:	9100      	str	r1, [sp, #0]
 800ce12:	9104      	str	r1, [sp, #16]
 800ce14:	429c      	cmp	r4, r3
 800ce16:	d000      	beq.n	800ce1a <_vsniprintf_r+0x2e>
 800ce18:	1e63      	subs	r3, r4, #1
 800ce1a:	9302      	str	r3, [sp, #8]
 800ce1c:	9305      	str	r3, [sp, #20]
 800ce1e:	2301      	movs	r3, #1
 800ce20:	4669      	mov	r1, sp
 800ce22:	425b      	negs	r3, r3
 800ce24:	81cb      	strh	r3, [r1, #14]
 800ce26:	0028      	movs	r0, r5
 800ce28:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800ce2a:	f001 fc4b 	bl	800e6c4 <_svfiprintf_r>
 800ce2e:	1c43      	adds	r3, r0, #1
 800ce30:	da01      	bge.n	800ce36 <_vsniprintf_r+0x4a>
 800ce32:	238b      	movs	r3, #139	@ 0x8b
 800ce34:	602b      	str	r3, [r5, #0]
 800ce36:	2c00      	cmp	r4, #0
 800ce38:	d0e3      	beq.n	800ce02 <_vsniprintf_r+0x16>
 800ce3a:	2200      	movs	r2, #0
 800ce3c:	9b00      	ldr	r3, [sp, #0]
 800ce3e:	701a      	strb	r2, [r3, #0]
 800ce40:	e7df      	b.n	800ce02 <_vsniprintf_r+0x16>
	...

0800ce44 <vsniprintf>:
 800ce44:	b513      	push	{r0, r1, r4, lr}
 800ce46:	4c04      	ldr	r4, [pc, #16]	@ (800ce58 <vsniprintf+0x14>)
 800ce48:	9300      	str	r3, [sp, #0]
 800ce4a:	0013      	movs	r3, r2
 800ce4c:	000a      	movs	r2, r1
 800ce4e:	0001      	movs	r1, r0
 800ce50:	6820      	ldr	r0, [r4, #0]
 800ce52:	f7ff ffcb 	bl	800cdec <_vsniprintf_r>
 800ce56:	bd16      	pop	{r1, r2, r4, pc}
 800ce58:	2000004c 	.word	0x2000004c

0800ce5c <memset>:
 800ce5c:	0003      	movs	r3, r0
 800ce5e:	1882      	adds	r2, r0, r2
 800ce60:	4293      	cmp	r3, r2
 800ce62:	d100      	bne.n	800ce66 <memset+0xa>
 800ce64:	4770      	bx	lr
 800ce66:	7019      	strb	r1, [r3, #0]
 800ce68:	3301      	adds	r3, #1
 800ce6a:	e7f9      	b.n	800ce60 <memset+0x4>

0800ce6c <strstr>:
 800ce6c:	780a      	ldrb	r2, [r1, #0]
 800ce6e:	b530      	push	{r4, r5, lr}
 800ce70:	2a00      	cmp	r2, #0
 800ce72:	d10c      	bne.n	800ce8e <strstr+0x22>
 800ce74:	bd30      	pop	{r4, r5, pc}
 800ce76:	429a      	cmp	r2, r3
 800ce78:	d108      	bne.n	800ce8c <strstr+0x20>
 800ce7a:	2301      	movs	r3, #1
 800ce7c:	5ccc      	ldrb	r4, [r1, r3]
 800ce7e:	2c00      	cmp	r4, #0
 800ce80:	d0f8      	beq.n	800ce74 <strstr+0x8>
 800ce82:	5cc5      	ldrb	r5, [r0, r3]
 800ce84:	42a5      	cmp	r5, r4
 800ce86:	d101      	bne.n	800ce8c <strstr+0x20>
 800ce88:	3301      	adds	r3, #1
 800ce8a:	e7f7      	b.n	800ce7c <strstr+0x10>
 800ce8c:	3001      	adds	r0, #1
 800ce8e:	7803      	ldrb	r3, [r0, #0]
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d1f0      	bne.n	800ce76 <strstr+0xa>
 800ce94:	0018      	movs	r0, r3
 800ce96:	e7ed      	b.n	800ce74 <strstr+0x8>

0800ce98 <_localeconv_r>:
 800ce98:	4800      	ldr	r0, [pc, #0]	@ (800ce9c <_localeconv_r+0x4>)
 800ce9a:	4770      	bx	lr
 800ce9c:	2000018c 	.word	0x2000018c

0800cea0 <_close_r>:
 800cea0:	2300      	movs	r3, #0
 800cea2:	b570      	push	{r4, r5, r6, lr}
 800cea4:	4d06      	ldr	r5, [pc, #24]	@ (800cec0 <_close_r+0x20>)
 800cea6:	0004      	movs	r4, r0
 800cea8:	0008      	movs	r0, r1
 800ceaa:	602b      	str	r3, [r5, #0]
 800ceac:	f7f8 fe56 	bl	8005b5c <_close>
 800ceb0:	1c43      	adds	r3, r0, #1
 800ceb2:	d103      	bne.n	800cebc <_close_r+0x1c>
 800ceb4:	682b      	ldr	r3, [r5, #0]
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d000      	beq.n	800cebc <_close_r+0x1c>
 800ceba:	6023      	str	r3, [r4, #0]
 800cebc:	bd70      	pop	{r4, r5, r6, pc}
 800cebe:	46c0      	nop			@ (mov r8, r8)
 800cec0:	20001158 	.word	0x20001158

0800cec4 <_lseek_r>:
 800cec4:	b570      	push	{r4, r5, r6, lr}
 800cec6:	0004      	movs	r4, r0
 800cec8:	0008      	movs	r0, r1
 800ceca:	0011      	movs	r1, r2
 800cecc:	001a      	movs	r2, r3
 800cece:	2300      	movs	r3, #0
 800ced0:	4d05      	ldr	r5, [pc, #20]	@ (800cee8 <_lseek_r+0x24>)
 800ced2:	602b      	str	r3, [r5, #0]
 800ced4:	f7f8 fe63 	bl	8005b9e <_lseek>
 800ced8:	1c43      	adds	r3, r0, #1
 800ceda:	d103      	bne.n	800cee4 <_lseek_r+0x20>
 800cedc:	682b      	ldr	r3, [r5, #0]
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d000      	beq.n	800cee4 <_lseek_r+0x20>
 800cee2:	6023      	str	r3, [r4, #0]
 800cee4:	bd70      	pop	{r4, r5, r6, pc}
 800cee6:	46c0      	nop			@ (mov r8, r8)
 800cee8:	20001158 	.word	0x20001158

0800ceec <_read_r>:
 800ceec:	b570      	push	{r4, r5, r6, lr}
 800ceee:	0004      	movs	r4, r0
 800cef0:	0008      	movs	r0, r1
 800cef2:	0011      	movs	r1, r2
 800cef4:	001a      	movs	r2, r3
 800cef6:	2300      	movs	r3, #0
 800cef8:	4d05      	ldr	r5, [pc, #20]	@ (800cf10 <_read_r+0x24>)
 800cefa:	602b      	str	r3, [r5, #0]
 800cefc:	f7f8 fe11 	bl	8005b22 <_read>
 800cf00:	1c43      	adds	r3, r0, #1
 800cf02:	d103      	bne.n	800cf0c <_read_r+0x20>
 800cf04:	682b      	ldr	r3, [r5, #0]
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d000      	beq.n	800cf0c <_read_r+0x20>
 800cf0a:	6023      	str	r3, [r4, #0]
 800cf0c:	bd70      	pop	{r4, r5, r6, pc}
 800cf0e:	46c0      	nop			@ (mov r8, r8)
 800cf10:	20001158 	.word	0x20001158

0800cf14 <_write_r>:
 800cf14:	b570      	push	{r4, r5, r6, lr}
 800cf16:	0004      	movs	r4, r0
 800cf18:	0008      	movs	r0, r1
 800cf1a:	0011      	movs	r1, r2
 800cf1c:	001a      	movs	r2, r3
 800cf1e:	2300      	movs	r3, #0
 800cf20:	4d05      	ldr	r5, [pc, #20]	@ (800cf38 <_write_r+0x24>)
 800cf22:	602b      	str	r3, [r5, #0]
 800cf24:	f7f9 f8a0 	bl	8006068 <_write>
 800cf28:	1c43      	adds	r3, r0, #1
 800cf2a:	d103      	bne.n	800cf34 <_write_r+0x20>
 800cf2c:	682b      	ldr	r3, [r5, #0]
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d000      	beq.n	800cf34 <_write_r+0x20>
 800cf32:	6023      	str	r3, [r4, #0]
 800cf34:	bd70      	pop	{r4, r5, r6, pc}
 800cf36:	46c0      	nop			@ (mov r8, r8)
 800cf38:	20001158 	.word	0x20001158

0800cf3c <__errno>:
 800cf3c:	4b01      	ldr	r3, [pc, #4]	@ (800cf44 <__errno+0x8>)
 800cf3e:	6818      	ldr	r0, [r3, #0]
 800cf40:	4770      	bx	lr
 800cf42:	46c0      	nop			@ (mov r8, r8)
 800cf44:	2000004c 	.word	0x2000004c

0800cf48 <__libc_init_array>:
 800cf48:	b570      	push	{r4, r5, r6, lr}
 800cf4a:	2600      	movs	r6, #0
 800cf4c:	4c0c      	ldr	r4, [pc, #48]	@ (800cf80 <__libc_init_array+0x38>)
 800cf4e:	4d0d      	ldr	r5, [pc, #52]	@ (800cf84 <__libc_init_array+0x3c>)
 800cf50:	1b64      	subs	r4, r4, r5
 800cf52:	10a4      	asrs	r4, r4, #2
 800cf54:	42a6      	cmp	r6, r4
 800cf56:	d109      	bne.n	800cf6c <__libc_init_array+0x24>
 800cf58:	2600      	movs	r6, #0
 800cf5a:	f002 fae1 	bl	800f520 <_init>
 800cf5e:	4c0a      	ldr	r4, [pc, #40]	@ (800cf88 <__libc_init_array+0x40>)
 800cf60:	4d0a      	ldr	r5, [pc, #40]	@ (800cf8c <__libc_init_array+0x44>)
 800cf62:	1b64      	subs	r4, r4, r5
 800cf64:	10a4      	asrs	r4, r4, #2
 800cf66:	42a6      	cmp	r6, r4
 800cf68:	d105      	bne.n	800cf76 <__libc_init_array+0x2e>
 800cf6a:	bd70      	pop	{r4, r5, r6, pc}
 800cf6c:	00b3      	lsls	r3, r6, #2
 800cf6e:	58eb      	ldr	r3, [r5, r3]
 800cf70:	4798      	blx	r3
 800cf72:	3601      	adds	r6, #1
 800cf74:	e7ee      	b.n	800cf54 <__libc_init_array+0xc>
 800cf76:	00b3      	lsls	r3, r6, #2
 800cf78:	58eb      	ldr	r3, [r5, r3]
 800cf7a:	4798      	blx	r3
 800cf7c:	3601      	adds	r6, #1
 800cf7e:	e7f2      	b.n	800cf66 <__libc_init_array+0x1e>
 800cf80:	0800ff78 	.word	0x0800ff78
 800cf84:	0800ff78 	.word	0x0800ff78
 800cf88:	0800ff7c 	.word	0x0800ff7c
 800cf8c:	0800ff78 	.word	0x0800ff78

0800cf90 <__retarget_lock_init_recursive>:
 800cf90:	4770      	bx	lr

0800cf92 <__retarget_lock_acquire_recursive>:
 800cf92:	4770      	bx	lr

0800cf94 <__retarget_lock_release_recursive>:
 800cf94:	4770      	bx	lr

0800cf96 <memchr>:
 800cf96:	b2c9      	uxtb	r1, r1
 800cf98:	1882      	adds	r2, r0, r2
 800cf9a:	4290      	cmp	r0, r2
 800cf9c:	d101      	bne.n	800cfa2 <memchr+0xc>
 800cf9e:	2000      	movs	r0, #0
 800cfa0:	4770      	bx	lr
 800cfa2:	7803      	ldrb	r3, [r0, #0]
 800cfa4:	428b      	cmp	r3, r1
 800cfa6:	d0fb      	beq.n	800cfa0 <memchr+0xa>
 800cfa8:	3001      	adds	r0, #1
 800cfaa:	e7f6      	b.n	800cf9a <memchr+0x4>

0800cfac <quorem>:
 800cfac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cfae:	6902      	ldr	r2, [r0, #16]
 800cfb0:	690f      	ldr	r7, [r1, #16]
 800cfb2:	b087      	sub	sp, #28
 800cfb4:	0006      	movs	r6, r0
 800cfb6:	000b      	movs	r3, r1
 800cfb8:	2000      	movs	r0, #0
 800cfba:	9102      	str	r1, [sp, #8]
 800cfbc:	42ba      	cmp	r2, r7
 800cfbe:	db6d      	blt.n	800d09c <quorem+0xf0>
 800cfc0:	3f01      	subs	r7, #1
 800cfc2:	00bc      	lsls	r4, r7, #2
 800cfc4:	3314      	adds	r3, #20
 800cfc6:	9305      	str	r3, [sp, #20]
 800cfc8:	191b      	adds	r3, r3, r4
 800cfca:	9303      	str	r3, [sp, #12]
 800cfcc:	0033      	movs	r3, r6
 800cfce:	3314      	adds	r3, #20
 800cfd0:	191c      	adds	r4, r3, r4
 800cfd2:	9301      	str	r3, [sp, #4]
 800cfd4:	6823      	ldr	r3, [r4, #0]
 800cfd6:	9304      	str	r3, [sp, #16]
 800cfd8:	9b03      	ldr	r3, [sp, #12]
 800cfda:	9804      	ldr	r0, [sp, #16]
 800cfdc:	681d      	ldr	r5, [r3, #0]
 800cfde:	3501      	adds	r5, #1
 800cfe0:	0029      	movs	r1, r5
 800cfe2:	f7f3 f8ad 	bl	8000140 <__udivsi3>
 800cfe6:	9b04      	ldr	r3, [sp, #16]
 800cfe8:	9000      	str	r0, [sp, #0]
 800cfea:	42ab      	cmp	r3, r5
 800cfec:	d32b      	bcc.n	800d046 <quorem+0x9a>
 800cfee:	9b05      	ldr	r3, [sp, #20]
 800cff0:	9d01      	ldr	r5, [sp, #4]
 800cff2:	469c      	mov	ip, r3
 800cff4:	2300      	movs	r3, #0
 800cff6:	9305      	str	r3, [sp, #20]
 800cff8:	9304      	str	r3, [sp, #16]
 800cffa:	4662      	mov	r2, ip
 800cffc:	ca08      	ldmia	r2!, {r3}
 800cffe:	6828      	ldr	r0, [r5, #0]
 800d000:	4694      	mov	ip, r2
 800d002:	9a00      	ldr	r2, [sp, #0]
 800d004:	b299      	uxth	r1, r3
 800d006:	4351      	muls	r1, r2
 800d008:	9a05      	ldr	r2, [sp, #20]
 800d00a:	0c1b      	lsrs	r3, r3, #16
 800d00c:	1889      	adds	r1, r1, r2
 800d00e:	9a00      	ldr	r2, [sp, #0]
 800d010:	4353      	muls	r3, r2
 800d012:	0c0a      	lsrs	r2, r1, #16
 800d014:	189b      	adds	r3, r3, r2
 800d016:	0c1a      	lsrs	r2, r3, #16
 800d018:	b289      	uxth	r1, r1
 800d01a:	9205      	str	r2, [sp, #20]
 800d01c:	b282      	uxth	r2, r0
 800d01e:	1a52      	subs	r2, r2, r1
 800d020:	9904      	ldr	r1, [sp, #16]
 800d022:	0c00      	lsrs	r0, r0, #16
 800d024:	1852      	adds	r2, r2, r1
 800d026:	b29b      	uxth	r3, r3
 800d028:	1411      	asrs	r1, r2, #16
 800d02a:	1ac3      	subs	r3, r0, r3
 800d02c:	185b      	adds	r3, r3, r1
 800d02e:	1419      	asrs	r1, r3, #16
 800d030:	b292      	uxth	r2, r2
 800d032:	041b      	lsls	r3, r3, #16
 800d034:	431a      	orrs	r2, r3
 800d036:	9b03      	ldr	r3, [sp, #12]
 800d038:	9104      	str	r1, [sp, #16]
 800d03a:	c504      	stmia	r5!, {r2}
 800d03c:	4563      	cmp	r3, ip
 800d03e:	d2dc      	bcs.n	800cffa <quorem+0x4e>
 800d040:	6823      	ldr	r3, [r4, #0]
 800d042:	2b00      	cmp	r3, #0
 800d044:	d030      	beq.n	800d0a8 <quorem+0xfc>
 800d046:	0030      	movs	r0, r6
 800d048:	9902      	ldr	r1, [sp, #8]
 800d04a:	f001 f9c5 	bl	800e3d8 <__mcmp>
 800d04e:	2800      	cmp	r0, #0
 800d050:	db23      	blt.n	800d09a <quorem+0xee>
 800d052:	0034      	movs	r4, r6
 800d054:	2500      	movs	r5, #0
 800d056:	9902      	ldr	r1, [sp, #8]
 800d058:	3414      	adds	r4, #20
 800d05a:	3114      	adds	r1, #20
 800d05c:	6823      	ldr	r3, [r4, #0]
 800d05e:	c901      	ldmia	r1!, {r0}
 800d060:	9302      	str	r3, [sp, #8]
 800d062:	466b      	mov	r3, sp
 800d064:	891b      	ldrh	r3, [r3, #8]
 800d066:	b282      	uxth	r2, r0
 800d068:	1a9a      	subs	r2, r3, r2
 800d06a:	9b02      	ldr	r3, [sp, #8]
 800d06c:	1952      	adds	r2, r2, r5
 800d06e:	0c00      	lsrs	r0, r0, #16
 800d070:	0c1b      	lsrs	r3, r3, #16
 800d072:	1a1b      	subs	r3, r3, r0
 800d074:	1410      	asrs	r0, r2, #16
 800d076:	181b      	adds	r3, r3, r0
 800d078:	141d      	asrs	r5, r3, #16
 800d07a:	b292      	uxth	r2, r2
 800d07c:	041b      	lsls	r3, r3, #16
 800d07e:	431a      	orrs	r2, r3
 800d080:	9b03      	ldr	r3, [sp, #12]
 800d082:	c404      	stmia	r4!, {r2}
 800d084:	428b      	cmp	r3, r1
 800d086:	d2e9      	bcs.n	800d05c <quorem+0xb0>
 800d088:	9a01      	ldr	r2, [sp, #4]
 800d08a:	00bb      	lsls	r3, r7, #2
 800d08c:	18d3      	adds	r3, r2, r3
 800d08e:	681a      	ldr	r2, [r3, #0]
 800d090:	2a00      	cmp	r2, #0
 800d092:	d013      	beq.n	800d0bc <quorem+0x110>
 800d094:	9b00      	ldr	r3, [sp, #0]
 800d096:	3301      	adds	r3, #1
 800d098:	9300      	str	r3, [sp, #0]
 800d09a:	9800      	ldr	r0, [sp, #0]
 800d09c:	b007      	add	sp, #28
 800d09e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d0a0:	6823      	ldr	r3, [r4, #0]
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d104      	bne.n	800d0b0 <quorem+0x104>
 800d0a6:	3f01      	subs	r7, #1
 800d0a8:	9b01      	ldr	r3, [sp, #4]
 800d0aa:	3c04      	subs	r4, #4
 800d0ac:	42a3      	cmp	r3, r4
 800d0ae:	d3f7      	bcc.n	800d0a0 <quorem+0xf4>
 800d0b0:	6137      	str	r7, [r6, #16]
 800d0b2:	e7c8      	b.n	800d046 <quorem+0x9a>
 800d0b4:	681a      	ldr	r2, [r3, #0]
 800d0b6:	2a00      	cmp	r2, #0
 800d0b8:	d104      	bne.n	800d0c4 <quorem+0x118>
 800d0ba:	3f01      	subs	r7, #1
 800d0bc:	9a01      	ldr	r2, [sp, #4]
 800d0be:	3b04      	subs	r3, #4
 800d0c0:	429a      	cmp	r2, r3
 800d0c2:	d3f7      	bcc.n	800d0b4 <quorem+0x108>
 800d0c4:	6137      	str	r7, [r6, #16]
 800d0c6:	e7e5      	b.n	800d094 <quorem+0xe8>

0800d0c8 <_dtoa_r>:
 800d0c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d0ca:	0014      	movs	r4, r2
 800d0cc:	001d      	movs	r5, r3
 800d0ce:	69c6      	ldr	r6, [r0, #28]
 800d0d0:	b09d      	sub	sp, #116	@ 0x74
 800d0d2:	940a      	str	r4, [sp, #40]	@ 0x28
 800d0d4:	950b      	str	r5, [sp, #44]	@ 0x2c
 800d0d6:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 800d0d8:	9003      	str	r0, [sp, #12]
 800d0da:	2e00      	cmp	r6, #0
 800d0dc:	d10f      	bne.n	800d0fe <_dtoa_r+0x36>
 800d0de:	2010      	movs	r0, #16
 800d0e0:	f000 fe30 	bl	800dd44 <malloc>
 800d0e4:	9b03      	ldr	r3, [sp, #12]
 800d0e6:	1e02      	subs	r2, r0, #0
 800d0e8:	61d8      	str	r0, [r3, #28]
 800d0ea:	d104      	bne.n	800d0f6 <_dtoa_r+0x2e>
 800d0ec:	21ef      	movs	r1, #239	@ 0xef
 800d0ee:	4bc7      	ldr	r3, [pc, #796]	@ (800d40c <_dtoa_r+0x344>)
 800d0f0:	48c7      	ldr	r0, [pc, #796]	@ (800d410 <_dtoa_r+0x348>)
 800d0f2:	f001 feab 	bl	800ee4c <__assert_func>
 800d0f6:	6046      	str	r6, [r0, #4]
 800d0f8:	6086      	str	r6, [r0, #8]
 800d0fa:	6006      	str	r6, [r0, #0]
 800d0fc:	60c6      	str	r6, [r0, #12]
 800d0fe:	9b03      	ldr	r3, [sp, #12]
 800d100:	69db      	ldr	r3, [r3, #28]
 800d102:	6819      	ldr	r1, [r3, #0]
 800d104:	2900      	cmp	r1, #0
 800d106:	d00b      	beq.n	800d120 <_dtoa_r+0x58>
 800d108:	685a      	ldr	r2, [r3, #4]
 800d10a:	2301      	movs	r3, #1
 800d10c:	4093      	lsls	r3, r2
 800d10e:	604a      	str	r2, [r1, #4]
 800d110:	608b      	str	r3, [r1, #8]
 800d112:	9803      	ldr	r0, [sp, #12]
 800d114:	f000 ff16 	bl	800df44 <_Bfree>
 800d118:	2200      	movs	r2, #0
 800d11a:	9b03      	ldr	r3, [sp, #12]
 800d11c:	69db      	ldr	r3, [r3, #28]
 800d11e:	601a      	str	r2, [r3, #0]
 800d120:	2d00      	cmp	r5, #0
 800d122:	da1e      	bge.n	800d162 <_dtoa_r+0x9a>
 800d124:	2301      	movs	r3, #1
 800d126:	603b      	str	r3, [r7, #0]
 800d128:	006b      	lsls	r3, r5, #1
 800d12a:	085b      	lsrs	r3, r3, #1
 800d12c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d12e:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800d130:	4bb8      	ldr	r3, [pc, #736]	@ (800d414 <_dtoa_r+0x34c>)
 800d132:	4ab8      	ldr	r2, [pc, #736]	@ (800d414 <_dtoa_r+0x34c>)
 800d134:	403b      	ands	r3, r7
 800d136:	4293      	cmp	r3, r2
 800d138:	d116      	bne.n	800d168 <_dtoa_r+0xa0>
 800d13a:	4bb7      	ldr	r3, [pc, #732]	@ (800d418 <_dtoa_r+0x350>)
 800d13c:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800d13e:	6013      	str	r3, [r2, #0]
 800d140:	033b      	lsls	r3, r7, #12
 800d142:	0b1b      	lsrs	r3, r3, #12
 800d144:	4323      	orrs	r3, r4
 800d146:	d101      	bne.n	800d14c <_dtoa_r+0x84>
 800d148:	f000 fd83 	bl	800dc52 <_dtoa_r+0xb8a>
 800d14c:	4bb3      	ldr	r3, [pc, #716]	@ (800d41c <_dtoa_r+0x354>)
 800d14e:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800d150:	9308      	str	r3, [sp, #32]
 800d152:	2a00      	cmp	r2, #0
 800d154:	d002      	beq.n	800d15c <_dtoa_r+0x94>
 800d156:	4bb2      	ldr	r3, [pc, #712]	@ (800d420 <_dtoa_r+0x358>)
 800d158:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800d15a:	6013      	str	r3, [r2, #0]
 800d15c:	9808      	ldr	r0, [sp, #32]
 800d15e:	b01d      	add	sp, #116	@ 0x74
 800d160:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d162:	2300      	movs	r3, #0
 800d164:	603b      	str	r3, [r7, #0]
 800d166:	e7e2      	b.n	800d12e <_dtoa_r+0x66>
 800d168:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d16a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d16c:	9212      	str	r2, [sp, #72]	@ 0x48
 800d16e:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d170:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800d172:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800d174:	2200      	movs	r2, #0
 800d176:	2300      	movs	r3, #0
 800d178:	f7f3 f968 	bl	800044c <__aeabi_dcmpeq>
 800d17c:	1e06      	subs	r6, r0, #0
 800d17e:	d00b      	beq.n	800d198 <_dtoa_r+0xd0>
 800d180:	2301      	movs	r3, #1
 800d182:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800d184:	6013      	str	r3, [r2, #0]
 800d186:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d002      	beq.n	800d192 <_dtoa_r+0xca>
 800d18c:	4ba5      	ldr	r3, [pc, #660]	@ (800d424 <_dtoa_r+0x35c>)
 800d18e:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800d190:	6013      	str	r3, [r2, #0]
 800d192:	4ba5      	ldr	r3, [pc, #660]	@ (800d428 <_dtoa_r+0x360>)
 800d194:	9308      	str	r3, [sp, #32]
 800d196:	e7e1      	b.n	800d15c <_dtoa_r+0x94>
 800d198:	ab1a      	add	r3, sp, #104	@ 0x68
 800d19a:	9301      	str	r3, [sp, #4]
 800d19c:	ab1b      	add	r3, sp, #108	@ 0x6c
 800d19e:	9300      	str	r3, [sp, #0]
 800d1a0:	9803      	ldr	r0, [sp, #12]
 800d1a2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800d1a4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d1a6:	f001 f9cd 	bl	800e544 <__d2b>
 800d1aa:	007a      	lsls	r2, r7, #1
 800d1ac:	9005      	str	r0, [sp, #20]
 800d1ae:	0d52      	lsrs	r2, r2, #21
 800d1b0:	d100      	bne.n	800d1b4 <_dtoa_r+0xec>
 800d1b2:	e07b      	b.n	800d2ac <_dtoa_r+0x1e4>
 800d1b4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d1b6:	9618      	str	r6, [sp, #96]	@ 0x60
 800d1b8:	0319      	lsls	r1, r3, #12
 800d1ba:	4b9c      	ldr	r3, [pc, #624]	@ (800d42c <_dtoa_r+0x364>)
 800d1bc:	0b09      	lsrs	r1, r1, #12
 800d1be:	430b      	orrs	r3, r1
 800d1c0:	499b      	ldr	r1, [pc, #620]	@ (800d430 <_dtoa_r+0x368>)
 800d1c2:	1857      	adds	r7, r2, r1
 800d1c4:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800d1c6:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800d1c8:	0019      	movs	r1, r3
 800d1ca:	2200      	movs	r2, #0
 800d1cc:	4b99      	ldr	r3, [pc, #612]	@ (800d434 <_dtoa_r+0x36c>)
 800d1ce:	f7f5 fc45 	bl	8002a5c <__aeabi_dsub>
 800d1d2:	4a99      	ldr	r2, [pc, #612]	@ (800d438 <_dtoa_r+0x370>)
 800d1d4:	4b99      	ldr	r3, [pc, #612]	@ (800d43c <_dtoa_r+0x374>)
 800d1d6:	f7f5 f979 	bl	80024cc <__aeabi_dmul>
 800d1da:	4a99      	ldr	r2, [pc, #612]	@ (800d440 <_dtoa_r+0x378>)
 800d1dc:	4b99      	ldr	r3, [pc, #612]	@ (800d444 <_dtoa_r+0x37c>)
 800d1de:	f7f4 f9cd 	bl	800157c <__aeabi_dadd>
 800d1e2:	0004      	movs	r4, r0
 800d1e4:	0038      	movs	r0, r7
 800d1e6:	000d      	movs	r5, r1
 800d1e8:	f7f6 f832 	bl	8003250 <__aeabi_i2d>
 800d1ec:	4a96      	ldr	r2, [pc, #600]	@ (800d448 <_dtoa_r+0x380>)
 800d1ee:	4b97      	ldr	r3, [pc, #604]	@ (800d44c <_dtoa_r+0x384>)
 800d1f0:	f7f5 f96c 	bl	80024cc <__aeabi_dmul>
 800d1f4:	0002      	movs	r2, r0
 800d1f6:	000b      	movs	r3, r1
 800d1f8:	0020      	movs	r0, r4
 800d1fa:	0029      	movs	r1, r5
 800d1fc:	f7f4 f9be 	bl	800157c <__aeabi_dadd>
 800d200:	0004      	movs	r4, r0
 800d202:	000d      	movs	r5, r1
 800d204:	f7f5 ffe8 	bl	80031d8 <__aeabi_d2iz>
 800d208:	2200      	movs	r2, #0
 800d20a:	9004      	str	r0, [sp, #16]
 800d20c:	2300      	movs	r3, #0
 800d20e:	0020      	movs	r0, r4
 800d210:	0029      	movs	r1, r5
 800d212:	f7f3 f921 	bl	8000458 <__aeabi_dcmplt>
 800d216:	2800      	cmp	r0, #0
 800d218:	d00b      	beq.n	800d232 <_dtoa_r+0x16a>
 800d21a:	9804      	ldr	r0, [sp, #16]
 800d21c:	f7f6 f818 	bl	8003250 <__aeabi_i2d>
 800d220:	002b      	movs	r3, r5
 800d222:	0022      	movs	r2, r4
 800d224:	f7f3 f912 	bl	800044c <__aeabi_dcmpeq>
 800d228:	4243      	negs	r3, r0
 800d22a:	4158      	adcs	r0, r3
 800d22c:	9b04      	ldr	r3, [sp, #16]
 800d22e:	1a1b      	subs	r3, r3, r0
 800d230:	9304      	str	r3, [sp, #16]
 800d232:	2301      	movs	r3, #1
 800d234:	9315      	str	r3, [sp, #84]	@ 0x54
 800d236:	9b04      	ldr	r3, [sp, #16]
 800d238:	2b16      	cmp	r3, #22
 800d23a:	d810      	bhi.n	800d25e <_dtoa_r+0x196>
 800d23c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800d23e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800d240:	9a04      	ldr	r2, [sp, #16]
 800d242:	4b83      	ldr	r3, [pc, #524]	@ (800d450 <_dtoa_r+0x388>)
 800d244:	00d2      	lsls	r2, r2, #3
 800d246:	189b      	adds	r3, r3, r2
 800d248:	681a      	ldr	r2, [r3, #0]
 800d24a:	685b      	ldr	r3, [r3, #4]
 800d24c:	f7f3 f904 	bl	8000458 <__aeabi_dcmplt>
 800d250:	2800      	cmp	r0, #0
 800d252:	d047      	beq.n	800d2e4 <_dtoa_r+0x21c>
 800d254:	9b04      	ldr	r3, [sp, #16]
 800d256:	3b01      	subs	r3, #1
 800d258:	9304      	str	r3, [sp, #16]
 800d25a:	2300      	movs	r3, #0
 800d25c:	9315      	str	r3, [sp, #84]	@ 0x54
 800d25e:	2200      	movs	r2, #0
 800d260:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800d262:	9206      	str	r2, [sp, #24]
 800d264:	1bdb      	subs	r3, r3, r7
 800d266:	1e5a      	subs	r2, r3, #1
 800d268:	d53e      	bpl.n	800d2e8 <_dtoa_r+0x220>
 800d26a:	2201      	movs	r2, #1
 800d26c:	1ad3      	subs	r3, r2, r3
 800d26e:	9306      	str	r3, [sp, #24]
 800d270:	2300      	movs	r3, #0
 800d272:	930d      	str	r3, [sp, #52]	@ 0x34
 800d274:	9b04      	ldr	r3, [sp, #16]
 800d276:	2b00      	cmp	r3, #0
 800d278:	db38      	blt.n	800d2ec <_dtoa_r+0x224>
 800d27a:	9a04      	ldr	r2, [sp, #16]
 800d27c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d27e:	4694      	mov	ip, r2
 800d280:	4463      	add	r3, ip
 800d282:	930d      	str	r3, [sp, #52]	@ 0x34
 800d284:	2300      	movs	r3, #0
 800d286:	9214      	str	r2, [sp, #80]	@ 0x50
 800d288:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d28a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800d28c:	2401      	movs	r4, #1
 800d28e:	2b09      	cmp	r3, #9
 800d290:	d867      	bhi.n	800d362 <_dtoa_r+0x29a>
 800d292:	2b05      	cmp	r3, #5
 800d294:	dd02      	ble.n	800d29c <_dtoa_r+0x1d4>
 800d296:	2400      	movs	r4, #0
 800d298:	3b04      	subs	r3, #4
 800d29a:	9322      	str	r3, [sp, #136]	@ 0x88
 800d29c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800d29e:	1e98      	subs	r0, r3, #2
 800d2a0:	2803      	cmp	r0, #3
 800d2a2:	d867      	bhi.n	800d374 <_dtoa_r+0x2ac>
 800d2a4:	f7f2 ff38 	bl	8000118 <__gnu_thumb1_case_uqi>
 800d2a8:	5b383a2b 	.word	0x5b383a2b
 800d2ac:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800d2ae:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 800d2b0:	18f6      	adds	r6, r6, r3
 800d2b2:	4b68      	ldr	r3, [pc, #416]	@ (800d454 <_dtoa_r+0x38c>)
 800d2b4:	18f2      	adds	r2, r6, r3
 800d2b6:	2a20      	cmp	r2, #32
 800d2b8:	dd0f      	ble.n	800d2da <_dtoa_r+0x212>
 800d2ba:	2340      	movs	r3, #64	@ 0x40
 800d2bc:	1a9b      	subs	r3, r3, r2
 800d2be:	409f      	lsls	r7, r3
 800d2c0:	4b65      	ldr	r3, [pc, #404]	@ (800d458 <_dtoa_r+0x390>)
 800d2c2:	0038      	movs	r0, r7
 800d2c4:	18f3      	adds	r3, r6, r3
 800d2c6:	40dc      	lsrs	r4, r3
 800d2c8:	4320      	orrs	r0, r4
 800d2ca:	f7f5 ffef 	bl	80032ac <__aeabi_ui2d>
 800d2ce:	2201      	movs	r2, #1
 800d2d0:	4b62      	ldr	r3, [pc, #392]	@ (800d45c <_dtoa_r+0x394>)
 800d2d2:	1e77      	subs	r7, r6, #1
 800d2d4:	18cb      	adds	r3, r1, r3
 800d2d6:	9218      	str	r2, [sp, #96]	@ 0x60
 800d2d8:	e776      	b.n	800d1c8 <_dtoa_r+0x100>
 800d2da:	2320      	movs	r3, #32
 800d2dc:	0020      	movs	r0, r4
 800d2de:	1a9b      	subs	r3, r3, r2
 800d2e0:	4098      	lsls	r0, r3
 800d2e2:	e7f2      	b.n	800d2ca <_dtoa_r+0x202>
 800d2e4:	9015      	str	r0, [sp, #84]	@ 0x54
 800d2e6:	e7ba      	b.n	800d25e <_dtoa_r+0x196>
 800d2e8:	920d      	str	r2, [sp, #52]	@ 0x34
 800d2ea:	e7c3      	b.n	800d274 <_dtoa_r+0x1ac>
 800d2ec:	9b06      	ldr	r3, [sp, #24]
 800d2ee:	9a04      	ldr	r2, [sp, #16]
 800d2f0:	1a9b      	subs	r3, r3, r2
 800d2f2:	9306      	str	r3, [sp, #24]
 800d2f4:	4253      	negs	r3, r2
 800d2f6:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d2f8:	2300      	movs	r3, #0
 800d2fa:	9314      	str	r3, [sp, #80]	@ 0x50
 800d2fc:	e7c5      	b.n	800d28a <_dtoa_r+0x1c2>
 800d2fe:	2300      	movs	r3, #0
 800d300:	9310      	str	r3, [sp, #64]	@ 0x40
 800d302:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d304:	930e      	str	r3, [sp, #56]	@ 0x38
 800d306:	9309      	str	r3, [sp, #36]	@ 0x24
 800d308:	2b00      	cmp	r3, #0
 800d30a:	dc13      	bgt.n	800d334 <_dtoa_r+0x26c>
 800d30c:	2301      	movs	r3, #1
 800d30e:	001a      	movs	r2, r3
 800d310:	930e      	str	r3, [sp, #56]	@ 0x38
 800d312:	9309      	str	r3, [sp, #36]	@ 0x24
 800d314:	9223      	str	r2, [sp, #140]	@ 0x8c
 800d316:	e00d      	b.n	800d334 <_dtoa_r+0x26c>
 800d318:	2301      	movs	r3, #1
 800d31a:	e7f1      	b.n	800d300 <_dtoa_r+0x238>
 800d31c:	2300      	movs	r3, #0
 800d31e:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800d320:	9310      	str	r3, [sp, #64]	@ 0x40
 800d322:	4694      	mov	ip, r2
 800d324:	9b04      	ldr	r3, [sp, #16]
 800d326:	4463      	add	r3, ip
 800d328:	930e      	str	r3, [sp, #56]	@ 0x38
 800d32a:	3301      	adds	r3, #1
 800d32c:	9309      	str	r3, [sp, #36]	@ 0x24
 800d32e:	2b00      	cmp	r3, #0
 800d330:	dc00      	bgt.n	800d334 <_dtoa_r+0x26c>
 800d332:	2301      	movs	r3, #1
 800d334:	9a03      	ldr	r2, [sp, #12]
 800d336:	2100      	movs	r1, #0
 800d338:	69d0      	ldr	r0, [r2, #28]
 800d33a:	2204      	movs	r2, #4
 800d33c:	0015      	movs	r5, r2
 800d33e:	3514      	adds	r5, #20
 800d340:	429d      	cmp	r5, r3
 800d342:	d91b      	bls.n	800d37c <_dtoa_r+0x2b4>
 800d344:	6041      	str	r1, [r0, #4]
 800d346:	9803      	ldr	r0, [sp, #12]
 800d348:	f000 fdb8 	bl	800debc <_Balloc>
 800d34c:	9008      	str	r0, [sp, #32]
 800d34e:	2800      	cmp	r0, #0
 800d350:	d117      	bne.n	800d382 <_dtoa_r+0x2ba>
 800d352:	21b0      	movs	r1, #176	@ 0xb0
 800d354:	4b42      	ldr	r3, [pc, #264]	@ (800d460 <_dtoa_r+0x398>)
 800d356:	482e      	ldr	r0, [pc, #184]	@ (800d410 <_dtoa_r+0x348>)
 800d358:	9a08      	ldr	r2, [sp, #32]
 800d35a:	31ff      	adds	r1, #255	@ 0xff
 800d35c:	e6c9      	b.n	800d0f2 <_dtoa_r+0x2a>
 800d35e:	2301      	movs	r3, #1
 800d360:	e7dd      	b.n	800d31e <_dtoa_r+0x256>
 800d362:	2300      	movs	r3, #0
 800d364:	9410      	str	r4, [sp, #64]	@ 0x40
 800d366:	9322      	str	r3, [sp, #136]	@ 0x88
 800d368:	3b01      	subs	r3, #1
 800d36a:	930e      	str	r3, [sp, #56]	@ 0x38
 800d36c:	9309      	str	r3, [sp, #36]	@ 0x24
 800d36e:	2200      	movs	r2, #0
 800d370:	3313      	adds	r3, #19
 800d372:	e7cf      	b.n	800d314 <_dtoa_r+0x24c>
 800d374:	2301      	movs	r3, #1
 800d376:	9310      	str	r3, [sp, #64]	@ 0x40
 800d378:	3b02      	subs	r3, #2
 800d37a:	e7f6      	b.n	800d36a <_dtoa_r+0x2a2>
 800d37c:	3101      	adds	r1, #1
 800d37e:	0052      	lsls	r2, r2, #1
 800d380:	e7dc      	b.n	800d33c <_dtoa_r+0x274>
 800d382:	9b03      	ldr	r3, [sp, #12]
 800d384:	9a08      	ldr	r2, [sp, #32]
 800d386:	69db      	ldr	r3, [r3, #28]
 800d388:	601a      	str	r2, [r3, #0]
 800d38a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d38c:	2b0e      	cmp	r3, #14
 800d38e:	d900      	bls.n	800d392 <_dtoa_r+0x2ca>
 800d390:	e0d9      	b.n	800d546 <_dtoa_r+0x47e>
 800d392:	2c00      	cmp	r4, #0
 800d394:	d100      	bne.n	800d398 <_dtoa_r+0x2d0>
 800d396:	e0d6      	b.n	800d546 <_dtoa_r+0x47e>
 800d398:	9b04      	ldr	r3, [sp, #16]
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	dd64      	ble.n	800d468 <_dtoa_r+0x3a0>
 800d39e:	210f      	movs	r1, #15
 800d3a0:	9a04      	ldr	r2, [sp, #16]
 800d3a2:	4b2b      	ldr	r3, [pc, #172]	@ (800d450 <_dtoa_r+0x388>)
 800d3a4:	400a      	ands	r2, r1
 800d3a6:	00d2      	lsls	r2, r2, #3
 800d3a8:	189b      	adds	r3, r3, r2
 800d3aa:	681e      	ldr	r6, [r3, #0]
 800d3ac:	685f      	ldr	r7, [r3, #4]
 800d3ae:	9b04      	ldr	r3, [sp, #16]
 800d3b0:	2402      	movs	r4, #2
 800d3b2:	111d      	asrs	r5, r3, #4
 800d3b4:	05db      	lsls	r3, r3, #23
 800d3b6:	d50a      	bpl.n	800d3ce <_dtoa_r+0x306>
 800d3b8:	4b2a      	ldr	r3, [pc, #168]	@ (800d464 <_dtoa_r+0x39c>)
 800d3ba:	400d      	ands	r5, r1
 800d3bc:	6a1a      	ldr	r2, [r3, #32]
 800d3be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d3c0:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800d3c2:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800d3c4:	f7f4 fc3e 	bl	8001c44 <__aeabi_ddiv>
 800d3c8:	900a      	str	r0, [sp, #40]	@ 0x28
 800d3ca:	910b      	str	r1, [sp, #44]	@ 0x2c
 800d3cc:	3401      	adds	r4, #1
 800d3ce:	4b25      	ldr	r3, [pc, #148]	@ (800d464 <_dtoa_r+0x39c>)
 800d3d0:	930c      	str	r3, [sp, #48]	@ 0x30
 800d3d2:	2d00      	cmp	r5, #0
 800d3d4:	d108      	bne.n	800d3e8 <_dtoa_r+0x320>
 800d3d6:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800d3d8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d3da:	0032      	movs	r2, r6
 800d3dc:	003b      	movs	r3, r7
 800d3de:	f7f4 fc31 	bl	8001c44 <__aeabi_ddiv>
 800d3e2:	900a      	str	r0, [sp, #40]	@ 0x28
 800d3e4:	910b      	str	r1, [sp, #44]	@ 0x2c
 800d3e6:	e05a      	b.n	800d49e <_dtoa_r+0x3d6>
 800d3e8:	2301      	movs	r3, #1
 800d3ea:	421d      	tst	r5, r3
 800d3ec:	d009      	beq.n	800d402 <_dtoa_r+0x33a>
 800d3ee:	18e4      	adds	r4, r4, r3
 800d3f0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d3f2:	0030      	movs	r0, r6
 800d3f4:	681a      	ldr	r2, [r3, #0]
 800d3f6:	685b      	ldr	r3, [r3, #4]
 800d3f8:	0039      	movs	r1, r7
 800d3fa:	f7f5 f867 	bl	80024cc <__aeabi_dmul>
 800d3fe:	0006      	movs	r6, r0
 800d400:	000f      	movs	r7, r1
 800d402:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d404:	106d      	asrs	r5, r5, #1
 800d406:	3308      	adds	r3, #8
 800d408:	e7e2      	b.n	800d3d0 <_dtoa_r+0x308>
 800d40a:	46c0      	nop			@ (mov r8, r8)
 800d40c:	0800fc29 	.word	0x0800fc29
 800d410:	0800fc40 	.word	0x0800fc40
 800d414:	7ff00000 	.word	0x7ff00000
 800d418:	0000270f 	.word	0x0000270f
 800d41c:	0800fc25 	.word	0x0800fc25
 800d420:	0800fc28 	.word	0x0800fc28
 800d424:	0800fbf9 	.word	0x0800fbf9
 800d428:	0800fbf8 	.word	0x0800fbf8
 800d42c:	3ff00000 	.word	0x3ff00000
 800d430:	fffffc01 	.word	0xfffffc01
 800d434:	3ff80000 	.word	0x3ff80000
 800d438:	636f4361 	.word	0x636f4361
 800d43c:	3fd287a7 	.word	0x3fd287a7
 800d440:	8b60c8b3 	.word	0x8b60c8b3
 800d444:	3fc68a28 	.word	0x3fc68a28
 800d448:	509f79fb 	.word	0x509f79fb
 800d44c:	3fd34413 	.word	0x3fd34413
 800d450:	0800fd38 	.word	0x0800fd38
 800d454:	00000432 	.word	0x00000432
 800d458:	00000412 	.word	0x00000412
 800d45c:	fe100000 	.word	0xfe100000
 800d460:	0800fc98 	.word	0x0800fc98
 800d464:	0800fd10 	.word	0x0800fd10
 800d468:	9b04      	ldr	r3, [sp, #16]
 800d46a:	2402      	movs	r4, #2
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d016      	beq.n	800d49e <_dtoa_r+0x3d6>
 800d470:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800d472:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800d474:	220f      	movs	r2, #15
 800d476:	425d      	negs	r5, r3
 800d478:	402a      	ands	r2, r5
 800d47a:	4bd7      	ldr	r3, [pc, #860]	@ (800d7d8 <_dtoa_r+0x710>)
 800d47c:	00d2      	lsls	r2, r2, #3
 800d47e:	189b      	adds	r3, r3, r2
 800d480:	681a      	ldr	r2, [r3, #0]
 800d482:	685b      	ldr	r3, [r3, #4]
 800d484:	f7f5 f822 	bl	80024cc <__aeabi_dmul>
 800d488:	2701      	movs	r7, #1
 800d48a:	2300      	movs	r3, #0
 800d48c:	900a      	str	r0, [sp, #40]	@ 0x28
 800d48e:	910b      	str	r1, [sp, #44]	@ 0x2c
 800d490:	4ed2      	ldr	r6, [pc, #840]	@ (800d7dc <_dtoa_r+0x714>)
 800d492:	112d      	asrs	r5, r5, #4
 800d494:	2d00      	cmp	r5, #0
 800d496:	d000      	beq.n	800d49a <_dtoa_r+0x3d2>
 800d498:	e0ba      	b.n	800d610 <_dtoa_r+0x548>
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d1a1      	bne.n	800d3e2 <_dtoa_r+0x31a>
 800d49e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800d4a0:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800d4a2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d100      	bne.n	800d4aa <_dtoa_r+0x3e2>
 800d4a8:	e0bd      	b.n	800d626 <_dtoa_r+0x55e>
 800d4aa:	2200      	movs	r2, #0
 800d4ac:	0030      	movs	r0, r6
 800d4ae:	0039      	movs	r1, r7
 800d4b0:	4bcb      	ldr	r3, [pc, #812]	@ (800d7e0 <_dtoa_r+0x718>)
 800d4b2:	f7f2 ffd1 	bl	8000458 <__aeabi_dcmplt>
 800d4b6:	2800      	cmp	r0, #0
 800d4b8:	d100      	bne.n	800d4bc <_dtoa_r+0x3f4>
 800d4ba:	e0b4      	b.n	800d626 <_dtoa_r+0x55e>
 800d4bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d100      	bne.n	800d4c4 <_dtoa_r+0x3fc>
 800d4c2:	e0b0      	b.n	800d626 <_dtoa_r+0x55e>
 800d4c4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	dd39      	ble.n	800d53e <_dtoa_r+0x476>
 800d4ca:	9b04      	ldr	r3, [sp, #16]
 800d4cc:	2200      	movs	r2, #0
 800d4ce:	3b01      	subs	r3, #1
 800d4d0:	930c      	str	r3, [sp, #48]	@ 0x30
 800d4d2:	0030      	movs	r0, r6
 800d4d4:	4bc3      	ldr	r3, [pc, #780]	@ (800d7e4 <_dtoa_r+0x71c>)
 800d4d6:	0039      	movs	r1, r7
 800d4d8:	f7f4 fff8 	bl	80024cc <__aeabi_dmul>
 800d4dc:	900a      	str	r0, [sp, #40]	@ 0x28
 800d4de:	910b      	str	r1, [sp, #44]	@ 0x2c
 800d4e0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d4e2:	3401      	adds	r4, #1
 800d4e4:	0020      	movs	r0, r4
 800d4e6:	9311      	str	r3, [sp, #68]	@ 0x44
 800d4e8:	f7f5 feb2 	bl	8003250 <__aeabi_i2d>
 800d4ec:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d4ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d4f0:	f7f4 ffec 	bl	80024cc <__aeabi_dmul>
 800d4f4:	4bbc      	ldr	r3, [pc, #752]	@ (800d7e8 <_dtoa_r+0x720>)
 800d4f6:	2200      	movs	r2, #0
 800d4f8:	f7f4 f840 	bl	800157c <__aeabi_dadd>
 800d4fc:	4bbb      	ldr	r3, [pc, #748]	@ (800d7ec <_dtoa_r+0x724>)
 800d4fe:	0006      	movs	r6, r0
 800d500:	18cf      	adds	r7, r1, r3
 800d502:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d504:	2b00      	cmp	r3, #0
 800d506:	d000      	beq.n	800d50a <_dtoa_r+0x442>
 800d508:	e091      	b.n	800d62e <_dtoa_r+0x566>
 800d50a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800d50c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d50e:	2200      	movs	r2, #0
 800d510:	4bb7      	ldr	r3, [pc, #732]	@ (800d7f0 <_dtoa_r+0x728>)
 800d512:	f7f5 faa3 	bl	8002a5c <__aeabi_dsub>
 800d516:	0032      	movs	r2, r6
 800d518:	003b      	movs	r3, r7
 800d51a:	0004      	movs	r4, r0
 800d51c:	000d      	movs	r5, r1
 800d51e:	f7f2 ffaf 	bl	8000480 <__aeabi_dcmpgt>
 800d522:	2800      	cmp	r0, #0
 800d524:	d000      	beq.n	800d528 <_dtoa_r+0x460>
 800d526:	e29d      	b.n	800da64 <_dtoa_r+0x99c>
 800d528:	2180      	movs	r1, #128	@ 0x80
 800d52a:	0609      	lsls	r1, r1, #24
 800d52c:	187b      	adds	r3, r7, r1
 800d52e:	0032      	movs	r2, r6
 800d530:	0020      	movs	r0, r4
 800d532:	0029      	movs	r1, r5
 800d534:	f7f2 ff90 	bl	8000458 <__aeabi_dcmplt>
 800d538:	2800      	cmp	r0, #0
 800d53a:	d000      	beq.n	800d53e <_dtoa_r+0x476>
 800d53c:	e130      	b.n	800d7a0 <_dtoa_r+0x6d8>
 800d53e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d540:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 800d542:	930a      	str	r3, [sp, #40]	@ 0x28
 800d544:	940b      	str	r4, [sp, #44]	@ 0x2c
 800d546:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800d548:	2b00      	cmp	r3, #0
 800d54a:	da00      	bge.n	800d54e <_dtoa_r+0x486>
 800d54c:	e177      	b.n	800d83e <_dtoa_r+0x776>
 800d54e:	9a04      	ldr	r2, [sp, #16]
 800d550:	2a0e      	cmp	r2, #14
 800d552:	dd00      	ble.n	800d556 <_dtoa_r+0x48e>
 800d554:	e173      	b.n	800d83e <_dtoa_r+0x776>
 800d556:	4ba0      	ldr	r3, [pc, #640]	@ (800d7d8 <_dtoa_r+0x710>)
 800d558:	00d2      	lsls	r2, r2, #3
 800d55a:	189b      	adds	r3, r3, r2
 800d55c:	685c      	ldr	r4, [r3, #4]
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	9306      	str	r3, [sp, #24]
 800d562:	9407      	str	r4, [sp, #28]
 800d564:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d566:	2b00      	cmp	r3, #0
 800d568:	da03      	bge.n	800d572 <_dtoa_r+0x4aa>
 800d56a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	dc00      	bgt.n	800d572 <_dtoa_r+0x4aa>
 800d570:	e106      	b.n	800d780 <_dtoa_r+0x6b8>
 800d572:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800d574:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800d576:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d578:	9d08      	ldr	r5, [sp, #32]
 800d57a:	3b01      	subs	r3, #1
 800d57c:	195b      	adds	r3, r3, r5
 800d57e:	930a      	str	r3, [sp, #40]	@ 0x28
 800d580:	9a06      	ldr	r2, [sp, #24]
 800d582:	9b07      	ldr	r3, [sp, #28]
 800d584:	0030      	movs	r0, r6
 800d586:	0039      	movs	r1, r7
 800d588:	f7f4 fb5c 	bl	8001c44 <__aeabi_ddiv>
 800d58c:	f7f5 fe24 	bl	80031d8 <__aeabi_d2iz>
 800d590:	9009      	str	r0, [sp, #36]	@ 0x24
 800d592:	f7f5 fe5d 	bl	8003250 <__aeabi_i2d>
 800d596:	9a06      	ldr	r2, [sp, #24]
 800d598:	9b07      	ldr	r3, [sp, #28]
 800d59a:	f7f4 ff97 	bl	80024cc <__aeabi_dmul>
 800d59e:	0002      	movs	r2, r0
 800d5a0:	000b      	movs	r3, r1
 800d5a2:	0030      	movs	r0, r6
 800d5a4:	0039      	movs	r1, r7
 800d5a6:	f7f5 fa59 	bl	8002a5c <__aeabi_dsub>
 800d5aa:	002b      	movs	r3, r5
 800d5ac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d5ae:	3501      	adds	r5, #1
 800d5b0:	3230      	adds	r2, #48	@ 0x30
 800d5b2:	701a      	strb	r2, [r3, #0]
 800d5b4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d5b6:	002c      	movs	r4, r5
 800d5b8:	429a      	cmp	r2, r3
 800d5ba:	d000      	beq.n	800d5be <_dtoa_r+0x4f6>
 800d5bc:	e131      	b.n	800d822 <_dtoa_r+0x75a>
 800d5be:	0002      	movs	r2, r0
 800d5c0:	000b      	movs	r3, r1
 800d5c2:	f7f3 ffdb 	bl	800157c <__aeabi_dadd>
 800d5c6:	9a06      	ldr	r2, [sp, #24]
 800d5c8:	9b07      	ldr	r3, [sp, #28]
 800d5ca:	0006      	movs	r6, r0
 800d5cc:	000f      	movs	r7, r1
 800d5ce:	f7f2 ff57 	bl	8000480 <__aeabi_dcmpgt>
 800d5d2:	2800      	cmp	r0, #0
 800d5d4:	d000      	beq.n	800d5d8 <_dtoa_r+0x510>
 800d5d6:	e10f      	b.n	800d7f8 <_dtoa_r+0x730>
 800d5d8:	9a06      	ldr	r2, [sp, #24]
 800d5da:	9b07      	ldr	r3, [sp, #28]
 800d5dc:	0030      	movs	r0, r6
 800d5de:	0039      	movs	r1, r7
 800d5e0:	f7f2 ff34 	bl	800044c <__aeabi_dcmpeq>
 800d5e4:	2800      	cmp	r0, #0
 800d5e6:	d003      	beq.n	800d5f0 <_dtoa_r+0x528>
 800d5e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d5ea:	07dd      	lsls	r5, r3, #31
 800d5ec:	d500      	bpl.n	800d5f0 <_dtoa_r+0x528>
 800d5ee:	e103      	b.n	800d7f8 <_dtoa_r+0x730>
 800d5f0:	9905      	ldr	r1, [sp, #20]
 800d5f2:	9803      	ldr	r0, [sp, #12]
 800d5f4:	f000 fca6 	bl	800df44 <_Bfree>
 800d5f8:	2300      	movs	r3, #0
 800d5fa:	7023      	strb	r3, [r4, #0]
 800d5fc:	9b04      	ldr	r3, [sp, #16]
 800d5fe:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800d600:	3301      	adds	r3, #1
 800d602:	6013      	str	r3, [r2, #0]
 800d604:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800d606:	2b00      	cmp	r3, #0
 800d608:	d100      	bne.n	800d60c <_dtoa_r+0x544>
 800d60a:	e5a7      	b.n	800d15c <_dtoa_r+0x94>
 800d60c:	601c      	str	r4, [r3, #0]
 800d60e:	e5a5      	b.n	800d15c <_dtoa_r+0x94>
 800d610:	423d      	tst	r5, r7
 800d612:	d005      	beq.n	800d620 <_dtoa_r+0x558>
 800d614:	6832      	ldr	r2, [r6, #0]
 800d616:	6873      	ldr	r3, [r6, #4]
 800d618:	f7f4 ff58 	bl	80024cc <__aeabi_dmul>
 800d61c:	003b      	movs	r3, r7
 800d61e:	3401      	adds	r4, #1
 800d620:	106d      	asrs	r5, r5, #1
 800d622:	3608      	adds	r6, #8
 800d624:	e736      	b.n	800d494 <_dtoa_r+0x3cc>
 800d626:	9b04      	ldr	r3, [sp, #16]
 800d628:	930c      	str	r3, [sp, #48]	@ 0x30
 800d62a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d62c:	e75a      	b.n	800d4e4 <_dtoa_r+0x41c>
 800d62e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800d630:	4b69      	ldr	r3, [pc, #420]	@ (800d7d8 <_dtoa_r+0x710>)
 800d632:	3a01      	subs	r2, #1
 800d634:	00d2      	lsls	r2, r2, #3
 800d636:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800d638:	189b      	adds	r3, r3, r2
 800d63a:	681a      	ldr	r2, [r3, #0]
 800d63c:	685b      	ldr	r3, [r3, #4]
 800d63e:	2900      	cmp	r1, #0
 800d640:	d04c      	beq.n	800d6dc <_dtoa_r+0x614>
 800d642:	2000      	movs	r0, #0
 800d644:	496b      	ldr	r1, [pc, #428]	@ (800d7f4 <_dtoa_r+0x72c>)
 800d646:	f7f4 fafd 	bl	8001c44 <__aeabi_ddiv>
 800d64a:	0032      	movs	r2, r6
 800d64c:	003b      	movs	r3, r7
 800d64e:	f7f5 fa05 	bl	8002a5c <__aeabi_dsub>
 800d652:	9a08      	ldr	r2, [sp, #32]
 800d654:	0006      	movs	r6, r0
 800d656:	4694      	mov	ip, r2
 800d658:	000f      	movs	r7, r1
 800d65a:	9b08      	ldr	r3, [sp, #32]
 800d65c:	9316      	str	r3, [sp, #88]	@ 0x58
 800d65e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d660:	4463      	add	r3, ip
 800d662:	9311      	str	r3, [sp, #68]	@ 0x44
 800d664:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800d666:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d668:	f7f5 fdb6 	bl	80031d8 <__aeabi_d2iz>
 800d66c:	0005      	movs	r5, r0
 800d66e:	f7f5 fdef 	bl	8003250 <__aeabi_i2d>
 800d672:	0002      	movs	r2, r0
 800d674:	000b      	movs	r3, r1
 800d676:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800d678:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d67a:	f7f5 f9ef 	bl	8002a5c <__aeabi_dsub>
 800d67e:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800d680:	3530      	adds	r5, #48	@ 0x30
 800d682:	1c5c      	adds	r4, r3, #1
 800d684:	701d      	strb	r5, [r3, #0]
 800d686:	0032      	movs	r2, r6
 800d688:	003b      	movs	r3, r7
 800d68a:	900a      	str	r0, [sp, #40]	@ 0x28
 800d68c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800d68e:	f7f2 fee3 	bl	8000458 <__aeabi_dcmplt>
 800d692:	2800      	cmp	r0, #0
 800d694:	d16a      	bne.n	800d76c <_dtoa_r+0x6a4>
 800d696:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d698:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d69a:	2000      	movs	r0, #0
 800d69c:	4950      	ldr	r1, [pc, #320]	@ (800d7e0 <_dtoa_r+0x718>)
 800d69e:	f7f5 f9dd 	bl	8002a5c <__aeabi_dsub>
 800d6a2:	0032      	movs	r2, r6
 800d6a4:	003b      	movs	r3, r7
 800d6a6:	f7f2 fed7 	bl	8000458 <__aeabi_dcmplt>
 800d6aa:	2800      	cmp	r0, #0
 800d6ac:	d000      	beq.n	800d6b0 <_dtoa_r+0x5e8>
 800d6ae:	e0a5      	b.n	800d7fc <_dtoa_r+0x734>
 800d6b0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d6b2:	42a3      	cmp	r3, r4
 800d6b4:	d100      	bne.n	800d6b8 <_dtoa_r+0x5f0>
 800d6b6:	e742      	b.n	800d53e <_dtoa_r+0x476>
 800d6b8:	2200      	movs	r2, #0
 800d6ba:	0030      	movs	r0, r6
 800d6bc:	0039      	movs	r1, r7
 800d6be:	4b49      	ldr	r3, [pc, #292]	@ (800d7e4 <_dtoa_r+0x71c>)
 800d6c0:	f7f4 ff04 	bl	80024cc <__aeabi_dmul>
 800d6c4:	2200      	movs	r2, #0
 800d6c6:	0006      	movs	r6, r0
 800d6c8:	000f      	movs	r7, r1
 800d6ca:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800d6cc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d6ce:	4b45      	ldr	r3, [pc, #276]	@ (800d7e4 <_dtoa_r+0x71c>)
 800d6d0:	f7f4 fefc 	bl	80024cc <__aeabi_dmul>
 800d6d4:	9416      	str	r4, [sp, #88]	@ 0x58
 800d6d6:	900a      	str	r0, [sp, #40]	@ 0x28
 800d6d8:	910b      	str	r1, [sp, #44]	@ 0x2c
 800d6da:	e7c3      	b.n	800d664 <_dtoa_r+0x59c>
 800d6dc:	0030      	movs	r0, r6
 800d6de:	0039      	movs	r1, r7
 800d6e0:	f7f4 fef4 	bl	80024cc <__aeabi_dmul>
 800d6e4:	9d08      	ldr	r5, [sp, #32]
 800d6e6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800d6e8:	002b      	movs	r3, r5
 800d6ea:	4694      	mov	ip, r2
 800d6ec:	9016      	str	r0, [sp, #88]	@ 0x58
 800d6ee:	9117      	str	r1, [sp, #92]	@ 0x5c
 800d6f0:	4463      	add	r3, ip
 800d6f2:	9319      	str	r3, [sp, #100]	@ 0x64
 800d6f4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800d6f6:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d6f8:	f7f5 fd6e 	bl	80031d8 <__aeabi_d2iz>
 800d6fc:	0004      	movs	r4, r0
 800d6fe:	f7f5 fda7 	bl	8003250 <__aeabi_i2d>
 800d702:	000b      	movs	r3, r1
 800d704:	0002      	movs	r2, r0
 800d706:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800d708:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d70a:	f7f5 f9a7 	bl	8002a5c <__aeabi_dsub>
 800d70e:	3430      	adds	r4, #48	@ 0x30
 800d710:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d712:	702c      	strb	r4, [r5, #0]
 800d714:	3501      	adds	r5, #1
 800d716:	0006      	movs	r6, r0
 800d718:	000f      	movs	r7, r1
 800d71a:	42ab      	cmp	r3, r5
 800d71c:	d129      	bne.n	800d772 <_dtoa_r+0x6aa>
 800d71e:	9816      	ldr	r0, [sp, #88]	@ 0x58
 800d720:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 800d722:	9b08      	ldr	r3, [sp, #32]
 800d724:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 800d726:	469c      	mov	ip, r3
 800d728:	2200      	movs	r2, #0
 800d72a:	4b32      	ldr	r3, [pc, #200]	@ (800d7f4 <_dtoa_r+0x72c>)
 800d72c:	4464      	add	r4, ip
 800d72e:	f7f3 ff25 	bl	800157c <__aeabi_dadd>
 800d732:	0002      	movs	r2, r0
 800d734:	000b      	movs	r3, r1
 800d736:	0030      	movs	r0, r6
 800d738:	0039      	movs	r1, r7
 800d73a:	f7f2 fea1 	bl	8000480 <__aeabi_dcmpgt>
 800d73e:	2800      	cmp	r0, #0
 800d740:	d15c      	bne.n	800d7fc <_dtoa_r+0x734>
 800d742:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800d744:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d746:	2000      	movs	r0, #0
 800d748:	492a      	ldr	r1, [pc, #168]	@ (800d7f4 <_dtoa_r+0x72c>)
 800d74a:	f7f5 f987 	bl	8002a5c <__aeabi_dsub>
 800d74e:	0002      	movs	r2, r0
 800d750:	000b      	movs	r3, r1
 800d752:	0030      	movs	r0, r6
 800d754:	0039      	movs	r1, r7
 800d756:	f7f2 fe7f 	bl	8000458 <__aeabi_dcmplt>
 800d75a:	2800      	cmp	r0, #0
 800d75c:	d100      	bne.n	800d760 <_dtoa_r+0x698>
 800d75e:	e6ee      	b.n	800d53e <_dtoa_r+0x476>
 800d760:	0023      	movs	r3, r4
 800d762:	3c01      	subs	r4, #1
 800d764:	7822      	ldrb	r2, [r4, #0]
 800d766:	2a30      	cmp	r2, #48	@ 0x30
 800d768:	d0fa      	beq.n	800d760 <_dtoa_r+0x698>
 800d76a:	001c      	movs	r4, r3
 800d76c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d76e:	9304      	str	r3, [sp, #16]
 800d770:	e73e      	b.n	800d5f0 <_dtoa_r+0x528>
 800d772:	2200      	movs	r2, #0
 800d774:	4b1b      	ldr	r3, [pc, #108]	@ (800d7e4 <_dtoa_r+0x71c>)
 800d776:	f7f4 fea9 	bl	80024cc <__aeabi_dmul>
 800d77a:	900a      	str	r0, [sp, #40]	@ 0x28
 800d77c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800d77e:	e7b9      	b.n	800d6f4 <_dtoa_r+0x62c>
 800d780:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d782:	2b00      	cmp	r3, #0
 800d784:	d10c      	bne.n	800d7a0 <_dtoa_r+0x6d8>
 800d786:	9806      	ldr	r0, [sp, #24]
 800d788:	9907      	ldr	r1, [sp, #28]
 800d78a:	2200      	movs	r2, #0
 800d78c:	4b18      	ldr	r3, [pc, #96]	@ (800d7f0 <_dtoa_r+0x728>)
 800d78e:	f7f4 fe9d 	bl	80024cc <__aeabi_dmul>
 800d792:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d794:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d796:	f7f2 fe7d 	bl	8000494 <__aeabi_dcmpge>
 800d79a:	2800      	cmp	r0, #0
 800d79c:	d100      	bne.n	800d7a0 <_dtoa_r+0x6d8>
 800d79e:	e164      	b.n	800da6a <_dtoa_r+0x9a2>
 800d7a0:	2600      	movs	r6, #0
 800d7a2:	0037      	movs	r7, r6
 800d7a4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d7a6:	9c08      	ldr	r4, [sp, #32]
 800d7a8:	43db      	mvns	r3, r3
 800d7aa:	930c      	str	r3, [sp, #48]	@ 0x30
 800d7ac:	2300      	movs	r3, #0
 800d7ae:	9304      	str	r3, [sp, #16]
 800d7b0:	0031      	movs	r1, r6
 800d7b2:	9803      	ldr	r0, [sp, #12]
 800d7b4:	f000 fbc6 	bl	800df44 <_Bfree>
 800d7b8:	2f00      	cmp	r7, #0
 800d7ba:	d0d7      	beq.n	800d76c <_dtoa_r+0x6a4>
 800d7bc:	9b04      	ldr	r3, [sp, #16]
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d005      	beq.n	800d7ce <_dtoa_r+0x706>
 800d7c2:	42bb      	cmp	r3, r7
 800d7c4:	d003      	beq.n	800d7ce <_dtoa_r+0x706>
 800d7c6:	0019      	movs	r1, r3
 800d7c8:	9803      	ldr	r0, [sp, #12]
 800d7ca:	f000 fbbb 	bl	800df44 <_Bfree>
 800d7ce:	0039      	movs	r1, r7
 800d7d0:	9803      	ldr	r0, [sp, #12]
 800d7d2:	f000 fbb7 	bl	800df44 <_Bfree>
 800d7d6:	e7c9      	b.n	800d76c <_dtoa_r+0x6a4>
 800d7d8:	0800fd38 	.word	0x0800fd38
 800d7dc:	0800fd10 	.word	0x0800fd10
 800d7e0:	3ff00000 	.word	0x3ff00000
 800d7e4:	40240000 	.word	0x40240000
 800d7e8:	401c0000 	.word	0x401c0000
 800d7ec:	fcc00000 	.word	0xfcc00000
 800d7f0:	40140000 	.word	0x40140000
 800d7f4:	3fe00000 	.word	0x3fe00000
 800d7f8:	9b04      	ldr	r3, [sp, #16]
 800d7fa:	930c      	str	r3, [sp, #48]	@ 0x30
 800d7fc:	0023      	movs	r3, r4
 800d7fe:	001c      	movs	r4, r3
 800d800:	3b01      	subs	r3, #1
 800d802:	781a      	ldrb	r2, [r3, #0]
 800d804:	2a39      	cmp	r2, #57	@ 0x39
 800d806:	d108      	bne.n	800d81a <_dtoa_r+0x752>
 800d808:	9a08      	ldr	r2, [sp, #32]
 800d80a:	429a      	cmp	r2, r3
 800d80c:	d1f7      	bne.n	800d7fe <_dtoa_r+0x736>
 800d80e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800d810:	9908      	ldr	r1, [sp, #32]
 800d812:	3201      	adds	r2, #1
 800d814:	920c      	str	r2, [sp, #48]	@ 0x30
 800d816:	2230      	movs	r2, #48	@ 0x30
 800d818:	700a      	strb	r2, [r1, #0]
 800d81a:	781a      	ldrb	r2, [r3, #0]
 800d81c:	3201      	adds	r2, #1
 800d81e:	701a      	strb	r2, [r3, #0]
 800d820:	e7a4      	b.n	800d76c <_dtoa_r+0x6a4>
 800d822:	2200      	movs	r2, #0
 800d824:	4bc6      	ldr	r3, [pc, #792]	@ (800db40 <_dtoa_r+0xa78>)
 800d826:	f7f4 fe51 	bl	80024cc <__aeabi_dmul>
 800d82a:	2200      	movs	r2, #0
 800d82c:	2300      	movs	r3, #0
 800d82e:	0006      	movs	r6, r0
 800d830:	000f      	movs	r7, r1
 800d832:	f7f2 fe0b 	bl	800044c <__aeabi_dcmpeq>
 800d836:	2800      	cmp	r0, #0
 800d838:	d100      	bne.n	800d83c <_dtoa_r+0x774>
 800d83a:	e6a1      	b.n	800d580 <_dtoa_r+0x4b8>
 800d83c:	e6d8      	b.n	800d5f0 <_dtoa_r+0x528>
 800d83e:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 800d840:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 800d842:	9c06      	ldr	r4, [sp, #24]
 800d844:	2f00      	cmp	r7, #0
 800d846:	d014      	beq.n	800d872 <_dtoa_r+0x7aa>
 800d848:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800d84a:	2a01      	cmp	r2, #1
 800d84c:	dd00      	ble.n	800d850 <_dtoa_r+0x788>
 800d84e:	e0c8      	b.n	800d9e2 <_dtoa_r+0x91a>
 800d850:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800d852:	2a00      	cmp	r2, #0
 800d854:	d100      	bne.n	800d858 <_dtoa_r+0x790>
 800d856:	e0be      	b.n	800d9d6 <_dtoa_r+0x90e>
 800d858:	4aba      	ldr	r2, [pc, #744]	@ (800db44 <_dtoa_r+0xa7c>)
 800d85a:	189b      	adds	r3, r3, r2
 800d85c:	9a06      	ldr	r2, [sp, #24]
 800d85e:	2101      	movs	r1, #1
 800d860:	18d2      	adds	r2, r2, r3
 800d862:	9206      	str	r2, [sp, #24]
 800d864:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d866:	9803      	ldr	r0, [sp, #12]
 800d868:	18d3      	adds	r3, r2, r3
 800d86a:	930d      	str	r3, [sp, #52]	@ 0x34
 800d86c:	f000 fc22 	bl	800e0b4 <__i2b>
 800d870:	0007      	movs	r7, r0
 800d872:	2c00      	cmp	r4, #0
 800d874:	d00e      	beq.n	800d894 <_dtoa_r+0x7cc>
 800d876:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d878:	2b00      	cmp	r3, #0
 800d87a:	dd0b      	ble.n	800d894 <_dtoa_r+0x7cc>
 800d87c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d87e:	0023      	movs	r3, r4
 800d880:	4294      	cmp	r4, r2
 800d882:	dd00      	ble.n	800d886 <_dtoa_r+0x7be>
 800d884:	0013      	movs	r3, r2
 800d886:	9a06      	ldr	r2, [sp, #24]
 800d888:	1ae4      	subs	r4, r4, r3
 800d88a:	1ad2      	subs	r2, r2, r3
 800d88c:	9206      	str	r2, [sp, #24]
 800d88e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d890:	1ad3      	subs	r3, r2, r3
 800d892:	930d      	str	r3, [sp, #52]	@ 0x34
 800d894:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d896:	2b00      	cmp	r3, #0
 800d898:	d01f      	beq.n	800d8da <_dtoa_r+0x812>
 800d89a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d100      	bne.n	800d8a2 <_dtoa_r+0x7da>
 800d8a0:	e0b5      	b.n	800da0e <_dtoa_r+0x946>
 800d8a2:	2d00      	cmp	r5, #0
 800d8a4:	d010      	beq.n	800d8c8 <_dtoa_r+0x800>
 800d8a6:	0039      	movs	r1, r7
 800d8a8:	002a      	movs	r2, r5
 800d8aa:	9803      	ldr	r0, [sp, #12]
 800d8ac:	f000 fccc 	bl	800e248 <__pow5mult>
 800d8b0:	9a05      	ldr	r2, [sp, #20]
 800d8b2:	0001      	movs	r1, r0
 800d8b4:	0007      	movs	r7, r0
 800d8b6:	9803      	ldr	r0, [sp, #12]
 800d8b8:	f000 fc14 	bl	800e0e4 <__multiply>
 800d8bc:	0006      	movs	r6, r0
 800d8be:	9905      	ldr	r1, [sp, #20]
 800d8c0:	9803      	ldr	r0, [sp, #12]
 800d8c2:	f000 fb3f 	bl	800df44 <_Bfree>
 800d8c6:	9605      	str	r6, [sp, #20]
 800d8c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d8ca:	1b5a      	subs	r2, r3, r5
 800d8cc:	42ab      	cmp	r3, r5
 800d8ce:	d004      	beq.n	800d8da <_dtoa_r+0x812>
 800d8d0:	9905      	ldr	r1, [sp, #20]
 800d8d2:	9803      	ldr	r0, [sp, #12]
 800d8d4:	f000 fcb8 	bl	800e248 <__pow5mult>
 800d8d8:	9005      	str	r0, [sp, #20]
 800d8da:	2101      	movs	r1, #1
 800d8dc:	9803      	ldr	r0, [sp, #12]
 800d8de:	f000 fbe9 	bl	800e0b4 <__i2b>
 800d8e2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800d8e4:	0006      	movs	r6, r0
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d100      	bne.n	800d8ec <_dtoa_r+0x824>
 800d8ea:	e1bc      	b.n	800dc66 <_dtoa_r+0xb9e>
 800d8ec:	001a      	movs	r2, r3
 800d8ee:	0001      	movs	r1, r0
 800d8f0:	9803      	ldr	r0, [sp, #12]
 800d8f2:	f000 fca9 	bl	800e248 <__pow5mult>
 800d8f6:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800d8f8:	0006      	movs	r6, r0
 800d8fa:	2500      	movs	r5, #0
 800d8fc:	2b01      	cmp	r3, #1
 800d8fe:	dc16      	bgt.n	800d92e <_dtoa_r+0x866>
 800d900:	2500      	movs	r5, #0
 800d902:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d904:	42ab      	cmp	r3, r5
 800d906:	d10e      	bne.n	800d926 <_dtoa_r+0x85e>
 800d908:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d90a:	031b      	lsls	r3, r3, #12
 800d90c:	42ab      	cmp	r3, r5
 800d90e:	d10a      	bne.n	800d926 <_dtoa_r+0x85e>
 800d910:	4b8d      	ldr	r3, [pc, #564]	@ (800db48 <_dtoa_r+0xa80>)
 800d912:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800d914:	4213      	tst	r3, r2
 800d916:	d006      	beq.n	800d926 <_dtoa_r+0x85e>
 800d918:	9b06      	ldr	r3, [sp, #24]
 800d91a:	3501      	adds	r5, #1
 800d91c:	3301      	adds	r3, #1
 800d91e:	9306      	str	r3, [sp, #24]
 800d920:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d922:	3301      	adds	r3, #1
 800d924:	930d      	str	r3, [sp, #52]	@ 0x34
 800d926:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800d928:	2001      	movs	r0, #1
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d008      	beq.n	800d940 <_dtoa_r+0x878>
 800d92e:	6933      	ldr	r3, [r6, #16]
 800d930:	3303      	adds	r3, #3
 800d932:	009b      	lsls	r3, r3, #2
 800d934:	18f3      	adds	r3, r6, r3
 800d936:	6858      	ldr	r0, [r3, #4]
 800d938:	f000 fb6c 	bl	800e014 <__hi0bits>
 800d93c:	2320      	movs	r3, #32
 800d93e:	1a18      	subs	r0, r3, r0
 800d940:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d942:	1818      	adds	r0, r3, r0
 800d944:	0002      	movs	r2, r0
 800d946:	231f      	movs	r3, #31
 800d948:	401a      	ands	r2, r3
 800d94a:	4218      	tst	r0, r3
 800d94c:	d065      	beq.n	800da1a <_dtoa_r+0x952>
 800d94e:	3301      	adds	r3, #1
 800d950:	1a9b      	subs	r3, r3, r2
 800d952:	2b04      	cmp	r3, #4
 800d954:	dd5d      	ble.n	800da12 <_dtoa_r+0x94a>
 800d956:	231c      	movs	r3, #28
 800d958:	1a9b      	subs	r3, r3, r2
 800d95a:	9a06      	ldr	r2, [sp, #24]
 800d95c:	18e4      	adds	r4, r4, r3
 800d95e:	18d2      	adds	r2, r2, r3
 800d960:	9206      	str	r2, [sp, #24]
 800d962:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d964:	18d3      	adds	r3, r2, r3
 800d966:	930d      	str	r3, [sp, #52]	@ 0x34
 800d968:	9b06      	ldr	r3, [sp, #24]
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	dd05      	ble.n	800d97a <_dtoa_r+0x8b2>
 800d96e:	001a      	movs	r2, r3
 800d970:	9905      	ldr	r1, [sp, #20]
 800d972:	9803      	ldr	r0, [sp, #12]
 800d974:	f000 fcc4 	bl	800e300 <__lshift>
 800d978:	9005      	str	r0, [sp, #20]
 800d97a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	dd05      	ble.n	800d98c <_dtoa_r+0x8c4>
 800d980:	0031      	movs	r1, r6
 800d982:	001a      	movs	r2, r3
 800d984:	9803      	ldr	r0, [sp, #12]
 800d986:	f000 fcbb 	bl	800e300 <__lshift>
 800d98a:	0006      	movs	r6, r0
 800d98c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d045      	beq.n	800da1e <_dtoa_r+0x956>
 800d992:	0031      	movs	r1, r6
 800d994:	9805      	ldr	r0, [sp, #20]
 800d996:	f000 fd1f 	bl	800e3d8 <__mcmp>
 800d99a:	2800      	cmp	r0, #0
 800d99c:	da3f      	bge.n	800da1e <_dtoa_r+0x956>
 800d99e:	9b04      	ldr	r3, [sp, #16]
 800d9a0:	220a      	movs	r2, #10
 800d9a2:	3b01      	subs	r3, #1
 800d9a4:	930c      	str	r3, [sp, #48]	@ 0x30
 800d9a6:	9905      	ldr	r1, [sp, #20]
 800d9a8:	2300      	movs	r3, #0
 800d9aa:	9803      	ldr	r0, [sp, #12]
 800d9ac:	f000 faee 	bl	800df8c <__multadd>
 800d9b0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d9b2:	9005      	str	r0, [sp, #20]
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d100      	bne.n	800d9ba <_dtoa_r+0x8f2>
 800d9b8:	e15c      	b.n	800dc74 <_dtoa_r+0xbac>
 800d9ba:	2300      	movs	r3, #0
 800d9bc:	0039      	movs	r1, r7
 800d9be:	220a      	movs	r2, #10
 800d9c0:	9803      	ldr	r0, [sp, #12]
 800d9c2:	f000 fae3 	bl	800df8c <__multadd>
 800d9c6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d9c8:	0007      	movs	r7, r0
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	dc55      	bgt.n	800da7a <_dtoa_r+0x9b2>
 800d9ce:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800d9d0:	2b02      	cmp	r3, #2
 800d9d2:	dc2d      	bgt.n	800da30 <_dtoa_r+0x968>
 800d9d4:	e051      	b.n	800da7a <_dtoa_r+0x9b2>
 800d9d6:	2336      	movs	r3, #54	@ 0x36
 800d9d8:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800d9da:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 800d9dc:	9c06      	ldr	r4, [sp, #24]
 800d9de:	1a9b      	subs	r3, r3, r2
 800d9e0:	e73c      	b.n	800d85c <_dtoa_r+0x794>
 800d9e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d9e4:	1e5d      	subs	r5, r3, #1
 800d9e6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d9e8:	42ab      	cmp	r3, r5
 800d9ea:	db08      	blt.n	800d9fe <_dtoa_r+0x936>
 800d9ec:	1b5d      	subs	r5, r3, r5
 800d9ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d9f0:	9c06      	ldr	r4, [sp, #24]
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	db00      	blt.n	800d9f8 <_dtoa_r+0x930>
 800d9f6:	e731      	b.n	800d85c <_dtoa_r+0x794>
 800d9f8:	1ae4      	subs	r4, r4, r3
 800d9fa:	2300      	movs	r3, #0
 800d9fc:	e72e      	b.n	800d85c <_dtoa_r+0x794>
 800d9fe:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800da00:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800da02:	1aeb      	subs	r3, r5, r3
 800da04:	18d3      	adds	r3, r2, r3
 800da06:	950f      	str	r5, [sp, #60]	@ 0x3c
 800da08:	9314      	str	r3, [sp, #80]	@ 0x50
 800da0a:	2500      	movs	r5, #0
 800da0c:	e7ef      	b.n	800d9ee <_dtoa_r+0x926>
 800da0e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800da10:	e75e      	b.n	800d8d0 <_dtoa_r+0x808>
 800da12:	2b04      	cmp	r3, #4
 800da14:	d0a8      	beq.n	800d968 <_dtoa_r+0x8a0>
 800da16:	331c      	adds	r3, #28
 800da18:	e79f      	b.n	800d95a <_dtoa_r+0x892>
 800da1a:	0013      	movs	r3, r2
 800da1c:	e7fb      	b.n	800da16 <_dtoa_r+0x94e>
 800da1e:	9b04      	ldr	r3, [sp, #16]
 800da20:	930c      	str	r3, [sp, #48]	@ 0x30
 800da22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800da24:	930e      	str	r3, [sp, #56]	@ 0x38
 800da26:	2b00      	cmp	r3, #0
 800da28:	dc23      	bgt.n	800da72 <_dtoa_r+0x9aa>
 800da2a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800da2c:	2b02      	cmp	r3, #2
 800da2e:	dd20      	ble.n	800da72 <_dtoa_r+0x9aa>
 800da30:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800da32:	2b00      	cmp	r3, #0
 800da34:	d000      	beq.n	800da38 <_dtoa_r+0x970>
 800da36:	e6b5      	b.n	800d7a4 <_dtoa_r+0x6dc>
 800da38:	0031      	movs	r1, r6
 800da3a:	2205      	movs	r2, #5
 800da3c:	9803      	ldr	r0, [sp, #12]
 800da3e:	f000 faa5 	bl	800df8c <__multadd>
 800da42:	0006      	movs	r6, r0
 800da44:	0001      	movs	r1, r0
 800da46:	9805      	ldr	r0, [sp, #20]
 800da48:	f000 fcc6 	bl	800e3d8 <__mcmp>
 800da4c:	2800      	cmp	r0, #0
 800da4e:	dc00      	bgt.n	800da52 <_dtoa_r+0x98a>
 800da50:	e6a8      	b.n	800d7a4 <_dtoa_r+0x6dc>
 800da52:	9b08      	ldr	r3, [sp, #32]
 800da54:	9a08      	ldr	r2, [sp, #32]
 800da56:	1c5c      	adds	r4, r3, #1
 800da58:	2331      	movs	r3, #49	@ 0x31
 800da5a:	7013      	strb	r3, [r2, #0]
 800da5c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800da5e:	3301      	adds	r3, #1
 800da60:	930c      	str	r3, [sp, #48]	@ 0x30
 800da62:	e6a3      	b.n	800d7ac <_dtoa_r+0x6e4>
 800da64:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 800da66:	0037      	movs	r7, r6
 800da68:	e7f3      	b.n	800da52 <_dtoa_r+0x98a>
 800da6a:	9b04      	ldr	r3, [sp, #16]
 800da6c:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 800da6e:	930c      	str	r3, [sp, #48]	@ 0x30
 800da70:	e7f9      	b.n	800da66 <_dtoa_r+0x99e>
 800da72:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800da74:	2b00      	cmp	r3, #0
 800da76:	d100      	bne.n	800da7a <_dtoa_r+0x9b2>
 800da78:	e100      	b.n	800dc7c <_dtoa_r+0xbb4>
 800da7a:	2c00      	cmp	r4, #0
 800da7c:	dd05      	ble.n	800da8a <_dtoa_r+0x9c2>
 800da7e:	0039      	movs	r1, r7
 800da80:	0022      	movs	r2, r4
 800da82:	9803      	ldr	r0, [sp, #12]
 800da84:	f000 fc3c 	bl	800e300 <__lshift>
 800da88:	0007      	movs	r7, r0
 800da8a:	0038      	movs	r0, r7
 800da8c:	2d00      	cmp	r5, #0
 800da8e:	d018      	beq.n	800dac2 <_dtoa_r+0x9fa>
 800da90:	6879      	ldr	r1, [r7, #4]
 800da92:	9803      	ldr	r0, [sp, #12]
 800da94:	f000 fa12 	bl	800debc <_Balloc>
 800da98:	1e04      	subs	r4, r0, #0
 800da9a:	d105      	bne.n	800daa8 <_dtoa_r+0x9e0>
 800da9c:	0022      	movs	r2, r4
 800da9e:	4b2b      	ldr	r3, [pc, #172]	@ (800db4c <_dtoa_r+0xa84>)
 800daa0:	482b      	ldr	r0, [pc, #172]	@ (800db50 <_dtoa_r+0xa88>)
 800daa2:	492c      	ldr	r1, [pc, #176]	@ (800db54 <_dtoa_r+0xa8c>)
 800daa4:	f7ff fb25 	bl	800d0f2 <_dtoa_r+0x2a>
 800daa8:	0039      	movs	r1, r7
 800daaa:	693a      	ldr	r2, [r7, #16]
 800daac:	310c      	adds	r1, #12
 800daae:	3202      	adds	r2, #2
 800dab0:	0092      	lsls	r2, r2, #2
 800dab2:	300c      	adds	r0, #12
 800dab4:	f001 f9c0 	bl	800ee38 <memcpy>
 800dab8:	2201      	movs	r2, #1
 800daba:	0021      	movs	r1, r4
 800dabc:	9803      	ldr	r0, [sp, #12]
 800dabe:	f000 fc1f 	bl	800e300 <__lshift>
 800dac2:	9b08      	ldr	r3, [sp, #32]
 800dac4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800dac6:	9306      	str	r3, [sp, #24]
 800dac8:	3b01      	subs	r3, #1
 800daca:	189b      	adds	r3, r3, r2
 800dacc:	2201      	movs	r2, #1
 800dace:	9704      	str	r7, [sp, #16]
 800dad0:	0007      	movs	r7, r0
 800dad2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800dad4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dad6:	4013      	ands	r3, r2
 800dad8:	930e      	str	r3, [sp, #56]	@ 0x38
 800dada:	0031      	movs	r1, r6
 800dadc:	9805      	ldr	r0, [sp, #20]
 800dade:	f7ff fa65 	bl	800cfac <quorem>
 800dae2:	9904      	ldr	r1, [sp, #16]
 800dae4:	0005      	movs	r5, r0
 800dae6:	900a      	str	r0, [sp, #40]	@ 0x28
 800dae8:	9805      	ldr	r0, [sp, #20]
 800daea:	f000 fc75 	bl	800e3d8 <__mcmp>
 800daee:	003a      	movs	r2, r7
 800daf0:	900d      	str	r0, [sp, #52]	@ 0x34
 800daf2:	0031      	movs	r1, r6
 800daf4:	9803      	ldr	r0, [sp, #12]
 800daf6:	f000 fc8b 	bl	800e410 <__mdiff>
 800dafa:	2201      	movs	r2, #1
 800dafc:	68c3      	ldr	r3, [r0, #12]
 800dafe:	0004      	movs	r4, r0
 800db00:	3530      	adds	r5, #48	@ 0x30
 800db02:	9209      	str	r2, [sp, #36]	@ 0x24
 800db04:	2b00      	cmp	r3, #0
 800db06:	d104      	bne.n	800db12 <_dtoa_r+0xa4a>
 800db08:	0001      	movs	r1, r0
 800db0a:	9805      	ldr	r0, [sp, #20]
 800db0c:	f000 fc64 	bl	800e3d8 <__mcmp>
 800db10:	9009      	str	r0, [sp, #36]	@ 0x24
 800db12:	0021      	movs	r1, r4
 800db14:	9803      	ldr	r0, [sp, #12]
 800db16:	f000 fa15 	bl	800df44 <_Bfree>
 800db1a:	9b06      	ldr	r3, [sp, #24]
 800db1c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800db1e:	1c5c      	adds	r4, r3, #1
 800db20:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800db22:	4313      	orrs	r3, r2
 800db24:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800db26:	4313      	orrs	r3, r2
 800db28:	d116      	bne.n	800db58 <_dtoa_r+0xa90>
 800db2a:	2d39      	cmp	r5, #57	@ 0x39
 800db2c:	d02f      	beq.n	800db8e <_dtoa_r+0xac6>
 800db2e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800db30:	2b00      	cmp	r3, #0
 800db32:	dd01      	ble.n	800db38 <_dtoa_r+0xa70>
 800db34:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800db36:	3531      	adds	r5, #49	@ 0x31
 800db38:	9b06      	ldr	r3, [sp, #24]
 800db3a:	701d      	strb	r5, [r3, #0]
 800db3c:	e638      	b.n	800d7b0 <_dtoa_r+0x6e8>
 800db3e:	46c0      	nop			@ (mov r8, r8)
 800db40:	40240000 	.word	0x40240000
 800db44:	00000433 	.word	0x00000433
 800db48:	7ff00000 	.word	0x7ff00000
 800db4c:	0800fc98 	.word	0x0800fc98
 800db50:	0800fc40 	.word	0x0800fc40
 800db54:	000002ef 	.word	0x000002ef
 800db58:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	db04      	blt.n	800db68 <_dtoa_r+0xaa0>
 800db5e:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800db60:	4313      	orrs	r3, r2
 800db62:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800db64:	4313      	orrs	r3, r2
 800db66:	d11e      	bne.n	800dba6 <_dtoa_r+0xade>
 800db68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	dde4      	ble.n	800db38 <_dtoa_r+0xa70>
 800db6e:	9905      	ldr	r1, [sp, #20]
 800db70:	2201      	movs	r2, #1
 800db72:	9803      	ldr	r0, [sp, #12]
 800db74:	f000 fbc4 	bl	800e300 <__lshift>
 800db78:	0031      	movs	r1, r6
 800db7a:	9005      	str	r0, [sp, #20]
 800db7c:	f000 fc2c 	bl	800e3d8 <__mcmp>
 800db80:	2800      	cmp	r0, #0
 800db82:	dc02      	bgt.n	800db8a <_dtoa_r+0xac2>
 800db84:	d1d8      	bne.n	800db38 <_dtoa_r+0xa70>
 800db86:	07eb      	lsls	r3, r5, #31
 800db88:	d5d6      	bpl.n	800db38 <_dtoa_r+0xa70>
 800db8a:	2d39      	cmp	r5, #57	@ 0x39
 800db8c:	d1d2      	bne.n	800db34 <_dtoa_r+0xa6c>
 800db8e:	2339      	movs	r3, #57	@ 0x39
 800db90:	9a06      	ldr	r2, [sp, #24]
 800db92:	7013      	strb	r3, [r2, #0]
 800db94:	0023      	movs	r3, r4
 800db96:	001c      	movs	r4, r3
 800db98:	3b01      	subs	r3, #1
 800db9a:	781a      	ldrb	r2, [r3, #0]
 800db9c:	2a39      	cmp	r2, #57	@ 0x39
 800db9e:	d04f      	beq.n	800dc40 <_dtoa_r+0xb78>
 800dba0:	3201      	adds	r2, #1
 800dba2:	701a      	strb	r2, [r3, #0]
 800dba4:	e604      	b.n	800d7b0 <_dtoa_r+0x6e8>
 800dba6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	dd03      	ble.n	800dbb4 <_dtoa_r+0xaec>
 800dbac:	2d39      	cmp	r5, #57	@ 0x39
 800dbae:	d0ee      	beq.n	800db8e <_dtoa_r+0xac6>
 800dbb0:	3501      	adds	r5, #1
 800dbb2:	e7c1      	b.n	800db38 <_dtoa_r+0xa70>
 800dbb4:	9b06      	ldr	r3, [sp, #24]
 800dbb6:	9a06      	ldr	r2, [sp, #24]
 800dbb8:	701d      	strb	r5, [r3, #0]
 800dbba:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dbbc:	4293      	cmp	r3, r2
 800dbbe:	d02a      	beq.n	800dc16 <_dtoa_r+0xb4e>
 800dbc0:	2300      	movs	r3, #0
 800dbc2:	220a      	movs	r2, #10
 800dbc4:	9905      	ldr	r1, [sp, #20]
 800dbc6:	9803      	ldr	r0, [sp, #12]
 800dbc8:	f000 f9e0 	bl	800df8c <__multadd>
 800dbcc:	9b04      	ldr	r3, [sp, #16]
 800dbce:	9005      	str	r0, [sp, #20]
 800dbd0:	42bb      	cmp	r3, r7
 800dbd2:	d109      	bne.n	800dbe8 <_dtoa_r+0xb20>
 800dbd4:	2300      	movs	r3, #0
 800dbd6:	220a      	movs	r2, #10
 800dbd8:	9904      	ldr	r1, [sp, #16]
 800dbda:	9803      	ldr	r0, [sp, #12]
 800dbdc:	f000 f9d6 	bl	800df8c <__multadd>
 800dbe0:	9004      	str	r0, [sp, #16]
 800dbe2:	0007      	movs	r7, r0
 800dbe4:	9406      	str	r4, [sp, #24]
 800dbe6:	e778      	b.n	800dada <_dtoa_r+0xa12>
 800dbe8:	9904      	ldr	r1, [sp, #16]
 800dbea:	2300      	movs	r3, #0
 800dbec:	220a      	movs	r2, #10
 800dbee:	9803      	ldr	r0, [sp, #12]
 800dbf0:	f000 f9cc 	bl	800df8c <__multadd>
 800dbf4:	2300      	movs	r3, #0
 800dbf6:	9004      	str	r0, [sp, #16]
 800dbf8:	220a      	movs	r2, #10
 800dbfa:	0039      	movs	r1, r7
 800dbfc:	9803      	ldr	r0, [sp, #12]
 800dbfe:	f000 f9c5 	bl	800df8c <__multadd>
 800dc02:	e7ee      	b.n	800dbe2 <_dtoa_r+0xb1a>
 800dc04:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dc06:	2401      	movs	r4, #1
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	dd00      	ble.n	800dc0e <_dtoa_r+0xb46>
 800dc0c:	001c      	movs	r4, r3
 800dc0e:	9b08      	ldr	r3, [sp, #32]
 800dc10:	191c      	adds	r4, r3, r4
 800dc12:	2300      	movs	r3, #0
 800dc14:	9304      	str	r3, [sp, #16]
 800dc16:	9905      	ldr	r1, [sp, #20]
 800dc18:	2201      	movs	r2, #1
 800dc1a:	9803      	ldr	r0, [sp, #12]
 800dc1c:	f000 fb70 	bl	800e300 <__lshift>
 800dc20:	0031      	movs	r1, r6
 800dc22:	9005      	str	r0, [sp, #20]
 800dc24:	f000 fbd8 	bl	800e3d8 <__mcmp>
 800dc28:	2800      	cmp	r0, #0
 800dc2a:	dcb3      	bgt.n	800db94 <_dtoa_r+0xacc>
 800dc2c:	d101      	bne.n	800dc32 <_dtoa_r+0xb6a>
 800dc2e:	07ed      	lsls	r5, r5, #31
 800dc30:	d4b0      	bmi.n	800db94 <_dtoa_r+0xacc>
 800dc32:	0023      	movs	r3, r4
 800dc34:	001c      	movs	r4, r3
 800dc36:	3b01      	subs	r3, #1
 800dc38:	781a      	ldrb	r2, [r3, #0]
 800dc3a:	2a30      	cmp	r2, #48	@ 0x30
 800dc3c:	d0fa      	beq.n	800dc34 <_dtoa_r+0xb6c>
 800dc3e:	e5b7      	b.n	800d7b0 <_dtoa_r+0x6e8>
 800dc40:	9a08      	ldr	r2, [sp, #32]
 800dc42:	429a      	cmp	r2, r3
 800dc44:	d1a7      	bne.n	800db96 <_dtoa_r+0xace>
 800dc46:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800dc48:	3301      	adds	r3, #1
 800dc4a:	930c      	str	r3, [sp, #48]	@ 0x30
 800dc4c:	2331      	movs	r3, #49	@ 0x31
 800dc4e:	7013      	strb	r3, [r2, #0]
 800dc50:	e5ae      	b.n	800d7b0 <_dtoa_r+0x6e8>
 800dc52:	4b15      	ldr	r3, [pc, #84]	@ (800dca8 <_dtoa_r+0xbe0>)
 800dc54:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800dc56:	9308      	str	r3, [sp, #32]
 800dc58:	4b14      	ldr	r3, [pc, #80]	@ (800dcac <_dtoa_r+0xbe4>)
 800dc5a:	2a00      	cmp	r2, #0
 800dc5c:	d001      	beq.n	800dc62 <_dtoa_r+0xb9a>
 800dc5e:	f7ff fa7b 	bl	800d158 <_dtoa_r+0x90>
 800dc62:	f7ff fa7b 	bl	800d15c <_dtoa_r+0x94>
 800dc66:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800dc68:	2b01      	cmp	r3, #1
 800dc6a:	dc00      	bgt.n	800dc6e <_dtoa_r+0xba6>
 800dc6c:	e648      	b.n	800d900 <_dtoa_r+0x838>
 800dc6e:	2001      	movs	r0, #1
 800dc70:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 800dc72:	e665      	b.n	800d940 <_dtoa_r+0x878>
 800dc74:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	dc00      	bgt.n	800dc7c <_dtoa_r+0xbb4>
 800dc7a:	e6d6      	b.n	800da2a <_dtoa_r+0x962>
 800dc7c:	2400      	movs	r4, #0
 800dc7e:	0031      	movs	r1, r6
 800dc80:	9805      	ldr	r0, [sp, #20]
 800dc82:	f7ff f993 	bl	800cfac <quorem>
 800dc86:	9b08      	ldr	r3, [sp, #32]
 800dc88:	3030      	adds	r0, #48	@ 0x30
 800dc8a:	5518      	strb	r0, [r3, r4]
 800dc8c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dc8e:	3401      	adds	r4, #1
 800dc90:	0005      	movs	r5, r0
 800dc92:	429c      	cmp	r4, r3
 800dc94:	dab6      	bge.n	800dc04 <_dtoa_r+0xb3c>
 800dc96:	2300      	movs	r3, #0
 800dc98:	220a      	movs	r2, #10
 800dc9a:	9905      	ldr	r1, [sp, #20]
 800dc9c:	9803      	ldr	r0, [sp, #12]
 800dc9e:	f000 f975 	bl	800df8c <__multadd>
 800dca2:	9005      	str	r0, [sp, #20]
 800dca4:	e7eb      	b.n	800dc7e <_dtoa_r+0xbb6>
 800dca6:	46c0      	nop			@ (mov r8, r8)
 800dca8:	0800fc1c 	.word	0x0800fc1c
 800dcac:	0800fc24 	.word	0x0800fc24

0800dcb0 <_free_r>:
 800dcb0:	b570      	push	{r4, r5, r6, lr}
 800dcb2:	0005      	movs	r5, r0
 800dcb4:	1e0c      	subs	r4, r1, #0
 800dcb6:	d010      	beq.n	800dcda <_free_r+0x2a>
 800dcb8:	3c04      	subs	r4, #4
 800dcba:	6823      	ldr	r3, [r4, #0]
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	da00      	bge.n	800dcc2 <_free_r+0x12>
 800dcc0:	18e4      	adds	r4, r4, r3
 800dcc2:	0028      	movs	r0, r5
 800dcc4:	f000 f8ea 	bl	800de9c <__malloc_lock>
 800dcc8:	4a1d      	ldr	r2, [pc, #116]	@ (800dd40 <_free_r+0x90>)
 800dcca:	6813      	ldr	r3, [r2, #0]
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d105      	bne.n	800dcdc <_free_r+0x2c>
 800dcd0:	6063      	str	r3, [r4, #4]
 800dcd2:	6014      	str	r4, [r2, #0]
 800dcd4:	0028      	movs	r0, r5
 800dcd6:	f000 f8e9 	bl	800deac <__malloc_unlock>
 800dcda:	bd70      	pop	{r4, r5, r6, pc}
 800dcdc:	42a3      	cmp	r3, r4
 800dcde:	d908      	bls.n	800dcf2 <_free_r+0x42>
 800dce0:	6820      	ldr	r0, [r4, #0]
 800dce2:	1821      	adds	r1, r4, r0
 800dce4:	428b      	cmp	r3, r1
 800dce6:	d1f3      	bne.n	800dcd0 <_free_r+0x20>
 800dce8:	6819      	ldr	r1, [r3, #0]
 800dcea:	685b      	ldr	r3, [r3, #4]
 800dcec:	1809      	adds	r1, r1, r0
 800dcee:	6021      	str	r1, [r4, #0]
 800dcf0:	e7ee      	b.n	800dcd0 <_free_r+0x20>
 800dcf2:	001a      	movs	r2, r3
 800dcf4:	685b      	ldr	r3, [r3, #4]
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d001      	beq.n	800dcfe <_free_r+0x4e>
 800dcfa:	42a3      	cmp	r3, r4
 800dcfc:	d9f9      	bls.n	800dcf2 <_free_r+0x42>
 800dcfe:	6811      	ldr	r1, [r2, #0]
 800dd00:	1850      	adds	r0, r2, r1
 800dd02:	42a0      	cmp	r0, r4
 800dd04:	d10b      	bne.n	800dd1e <_free_r+0x6e>
 800dd06:	6820      	ldr	r0, [r4, #0]
 800dd08:	1809      	adds	r1, r1, r0
 800dd0a:	1850      	adds	r0, r2, r1
 800dd0c:	6011      	str	r1, [r2, #0]
 800dd0e:	4283      	cmp	r3, r0
 800dd10:	d1e0      	bne.n	800dcd4 <_free_r+0x24>
 800dd12:	6818      	ldr	r0, [r3, #0]
 800dd14:	685b      	ldr	r3, [r3, #4]
 800dd16:	1841      	adds	r1, r0, r1
 800dd18:	6011      	str	r1, [r2, #0]
 800dd1a:	6053      	str	r3, [r2, #4]
 800dd1c:	e7da      	b.n	800dcd4 <_free_r+0x24>
 800dd1e:	42a0      	cmp	r0, r4
 800dd20:	d902      	bls.n	800dd28 <_free_r+0x78>
 800dd22:	230c      	movs	r3, #12
 800dd24:	602b      	str	r3, [r5, #0]
 800dd26:	e7d5      	b.n	800dcd4 <_free_r+0x24>
 800dd28:	6820      	ldr	r0, [r4, #0]
 800dd2a:	1821      	adds	r1, r4, r0
 800dd2c:	428b      	cmp	r3, r1
 800dd2e:	d103      	bne.n	800dd38 <_free_r+0x88>
 800dd30:	6819      	ldr	r1, [r3, #0]
 800dd32:	685b      	ldr	r3, [r3, #4]
 800dd34:	1809      	adds	r1, r1, r0
 800dd36:	6021      	str	r1, [r4, #0]
 800dd38:	6063      	str	r3, [r4, #4]
 800dd3a:	6054      	str	r4, [r2, #4]
 800dd3c:	e7ca      	b.n	800dcd4 <_free_r+0x24>
 800dd3e:	46c0      	nop			@ (mov r8, r8)
 800dd40:	20001164 	.word	0x20001164

0800dd44 <malloc>:
 800dd44:	b510      	push	{r4, lr}
 800dd46:	4b03      	ldr	r3, [pc, #12]	@ (800dd54 <malloc+0x10>)
 800dd48:	0001      	movs	r1, r0
 800dd4a:	6818      	ldr	r0, [r3, #0]
 800dd4c:	f000 f826 	bl	800dd9c <_malloc_r>
 800dd50:	bd10      	pop	{r4, pc}
 800dd52:	46c0      	nop			@ (mov r8, r8)
 800dd54:	2000004c 	.word	0x2000004c

0800dd58 <sbrk_aligned>:
 800dd58:	b570      	push	{r4, r5, r6, lr}
 800dd5a:	4e0f      	ldr	r6, [pc, #60]	@ (800dd98 <sbrk_aligned+0x40>)
 800dd5c:	000d      	movs	r5, r1
 800dd5e:	6831      	ldr	r1, [r6, #0]
 800dd60:	0004      	movs	r4, r0
 800dd62:	2900      	cmp	r1, #0
 800dd64:	d102      	bne.n	800dd6c <sbrk_aligned+0x14>
 800dd66:	f001 f855 	bl	800ee14 <_sbrk_r>
 800dd6a:	6030      	str	r0, [r6, #0]
 800dd6c:	0029      	movs	r1, r5
 800dd6e:	0020      	movs	r0, r4
 800dd70:	f001 f850 	bl	800ee14 <_sbrk_r>
 800dd74:	1c43      	adds	r3, r0, #1
 800dd76:	d103      	bne.n	800dd80 <sbrk_aligned+0x28>
 800dd78:	2501      	movs	r5, #1
 800dd7a:	426d      	negs	r5, r5
 800dd7c:	0028      	movs	r0, r5
 800dd7e:	bd70      	pop	{r4, r5, r6, pc}
 800dd80:	2303      	movs	r3, #3
 800dd82:	1cc5      	adds	r5, r0, #3
 800dd84:	439d      	bics	r5, r3
 800dd86:	42a8      	cmp	r0, r5
 800dd88:	d0f8      	beq.n	800dd7c <sbrk_aligned+0x24>
 800dd8a:	1a29      	subs	r1, r5, r0
 800dd8c:	0020      	movs	r0, r4
 800dd8e:	f001 f841 	bl	800ee14 <_sbrk_r>
 800dd92:	3001      	adds	r0, #1
 800dd94:	d1f2      	bne.n	800dd7c <sbrk_aligned+0x24>
 800dd96:	e7ef      	b.n	800dd78 <sbrk_aligned+0x20>
 800dd98:	20001160 	.word	0x20001160

0800dd9c <_malloc_r>:
 800dd9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dd9e:	2203      	movs	r2, #3
 800dda0:	1ccb      	adds	r3, r1, #3
 800dda2:	4393      	bics	r3, r2
 800dda4:	3308      	adds	r3, #8
 800dda6:	0005      	movs	r5, r0
 800dda8:	001f      	movs	r7, r3
 800ddaa:	2b0c      	cmp	r3, #12
 800ddac:	d234      	bcs.n	800de18 <_malloc_r+0x7c>
 800ddae:	270c      	movs	r7, #12
 800ddb0:	42b9      	cmp	r1, r7
 800ddb2:	d833      	bhi.n	800de1c <_malloc_r+0x80>
 800ddb4:	0028      	movs	r0, r5
 800ddb6:	f000 f871 	bl	800de9c <__malloc_lock>
 800ddba:	4e37      	ldr	r6, [pc, #220]	@ (800de98 <_malloc_r+0xfc>)
 800ddbc:	6833      	ldr	r3, [r6, #0]
 800ddbe:	001c      	movs	r4, r3
 800ddc0:	2c00      	cmp	r4, #0
 800ddc2:	d12f      	bne.n	800de24 <_malloc_r+0x88>
 800ddc4:	0039      	movs	r1, r7
 800ddc6:	0028      	movs	r0, r5
 800ddc8:	f7ff ffc6 	bl	800dd58 <sbrk_aligned>
 800ddcc:	0004      	movs	r4, r0
 800ddce:	1c43      	adds	r3, r0, #1
 800ddd0:	d15f      	bne.n	800de92 <_malloc_r+0xf6>
 800ddd2:	6834      	ldr	r4, [r6, #0]
 800ddd4:	9400      	str	r4, [sp, #0]
 800ddd6:	9b00      	ldr	r3, [sp, #0]
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	d14a      	bne.n	800de72 <_malloc_r+0xd6>
 800dddc:	2c00      	cmp	r4, #0
 800ddde:	d052      	beq.n	800de86 <_malloc_r+0xea>
 800dde0:	6823      	ldr	r3, [r4, #0]
 800dde2:	0028      	movs	r0, r5
 800dde4:	18e3      	adds	r3, r4, r3
 800dde6:	9900      	ldr	r1, [sp, #0]
 800dde8:	9301      	str	r3, [sp, #4]
 800ddea:	f001 f813 	bl	800ee14 <_sbrk_r>
 800ddee:	9b01      	ldr	r3, [sp, #4]
 800ddf0:	4283      	cmp	r3, r0
 800ddf2:	d148      	bne.n	800de86 <_malloc_r+0xea>
 800ddf4:	6823      	ldr	r3, [r4, #0]
 800ddf6:	0028      	movs	r0, r5
 800ddf8:	1aff      	subs	r7, r7, r3
 800ddfa:	0039      	movs	r1, r7
 800ddfc:	f7ff ffac 	bl	800dd58 <sbrk_aligned>
 800de00:	3001      	adds	r0, #1
 800de02:	d040      	beq.n	800de86 <_malloc_r+0xea>
 800de04:	6823      	ldr	r3, [r4, #0]
 800de06:	19db      	adds	r3, r3, r7
 800de08:	6023      	str	r3, [r4, #0]
 800de0a:	6833      	ldr	r3, [r6, #0]
 800de0c:	685a      	ldr	r2, [r3, #4]
 800de0e:	2a00      	cmp	r2, #0
 800de10:	d133      	bne.n	800de7a <_malloc_r+0xde>
 800de12:	9b00      	ldr	r3, [sp, #0]
 800de14:	6033      	str	r3, [r6, #0]
 800de16:	e019      	b.n	800de4c <_malloc_r+0xb0>
 800de18:	2b00      	cmp	r3, #0
 800de1a:	dac9      	bge.n	800ddb0 <_malloc_r+0x14>
 800de1c:	230c      	movs	r3, #12
 800de1e:	602b      	str	r3, [r5, #0]
 800de20:	2000      	movs	r0, #0
 800de22:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800de24:	6821      	ldr	r1, [r4, #0]
 800de26:	1bc9      	subs	r1, r1, r7
 800de28:	d420      	bmi.n	800de6c <_malloc_r+0xd0>
 800de2a:	290b      	cmp	r1, #11
 800de2c:	d90a      	bls.n	800de44 <_malloc_r+0xa8>
 800de2e:	19e2      	adds	r2, r4, r7
 800de30:	6027      	str	r7, [r4, #0]
 800de32:	42a3      	cmp	r3, r4
 800de34:	d104      	bne.n	800de40 <_malloc_r+0xa4>
 800de36:	6032      	str	r2, [r6, #0]
 800de38:	6863      	ldr	r3, [r4, #4]
 800de3a:	6011      	str	r1, [r2, #0]
 800de3c:	6053      	str	r3, [r2, #4]
 800de3e:	e005      	b.n	800de4c <_malloc_r+0xb0>
 800de40:	605a      	str	r2, [r3, #4]
 800de42:	e7f9      	b.n	800de38 <_malloc_r+0x9c>
 800de44:	6862      	ldr	r2, [r4, #4]
 800de46:	42a3      	cmp	r3, r4
 800de48:	d10e      	bne.n	800de68 <_malloc_r+0xcc>
 800de4a:	6032      	str	r2, [r6, #0]
 800de4c:	0028      	movs	r0, r5
 800de4e:	f000 f82d 	bl	800deac <__malloc_unlock>
 800de52:	0020      	movs	r0, r4
 800de54:	2207      	movs	r2, #7
 800de56:	300b      	adds	r0, #11
 800de58:	1d23      	adds	r3, r4, #4
 800de5a:	4390      	bics	r0, r2
 800de5c:	1ac2      	subs	r2, r0, r3
 800de5e:	4298      	cmp	r0, r3
 800de60:	d0df      	beq.n	800de22 <_malloc_r+0x86>
 800de62:	1a1b      	subs	r3, r3, r0
 800de64:	50a3      	str	r3, [r4, r2]
 800de66:	e7dc      	b.n	800de22 <_malloc_r+0x86>
 800de68:	605a      	str	r2, [r3, #4]
 800de6a:	e7ef      	b.n	800de4c <_malloc_r+0xb0>
 800de6c:	0023      	movs	r3, r4
 800de6e:	6864      	ldr	r4, [r4, #4]
 800de70:	e7a6      	b.n	800ddc0 <_malloc_r+0x24>
 800de72:	9c00      	ldr	r4, [sp, #0]
 800de74:	6863      	ldr	r3, [r4, #4]
 800de76:	9300      	str	r3, [sp, #0]
 800de78:	e7ad      	b.n	800ddd6 <_malloc_r+0x3a>
 800de7a:	001a      	movs	r2, r3
 800de7c:	685b      	ldr	r3, [r3, #4]
 800de7e:	42a3      	cmp	r3, r4
 800de80:	d1fb      	bne.n	800de7a <_malloc_r+0xde>
 800de82:	2300      	movs	r3, #0
 800de84:	e7da      	b.n	800de3c <_malloc_r+0xa0>
 800de86:	230c      	movs	r3, #12
 800de88:	0028      	movs	r0, r5
 800de8a:	602b      	str	r3, [r5, #0]
 800de8c:	f000 f80e 	bl	800deac <__malloc_unlock>
 800de90:	e7c6      	b.n	800de20 <_malloc_r+0x84>
 800de92:	6007      	str	r7, [r0, #0]
 800de94:	e7da      	b.n	800de4c <_malloc_r+0xb0>
 800de96:	46c0      	nop			@ (mov r8, r8)
 800de98:	20001164 	.word	0x20001164

0800de9c <__malloc_lock>:
 800de9c:	b510      	push	{r4, lr}
 800de9e:	4802      	ldr	r0, [pc, #8]	@ (800dea8 <__malloc_lock+0xc>)
 800dea0:	f7ff f877 	bl	800cf92 <__retarget_lock_acquire_recursive>
 800dea4:	bd10      	pop	{r4, pc}
 800dea6:	46c0      	nop			@ (mov r8, r8)
 800dea8:	2000115c 	.word	0x2000115c

0800deac <__malloc_unlock>:
 800deac:	b510      	push	{r4, lr}
 800deae:	4802      	ldr	r0, [pc, #8]	@ (800deb8 <__malloc_unlock+0xc>)
 800deb0:	f7ff f870 	bl	800cf94 <__retarget_lock_release_recursive>
 800deb4:	bd10      	pop	{r4, pc}
 800deb6:	46c0      	nop			@ (mov r8, r8)
 800deb8:	2000115c 	.word	0x2000115c

0800debc <_Balloc>:
 800debc:	b570      	push	{r4, r5, r6, lr}
 800debe:	69c5      	ldr	r5, [r0, #28]
 800dec0:	0006      	movs	r6, r0
 800dec2:	000c      	movs	r4, r1
 800dec4:	2d00      	cmp	r5, #0
 800dec6:	d10e      	bne.n	800dee6 <_Balloc+0x2a>
 800dec8:	2010      	movs	r0, #16
 800deca:	f7ff ff3b 	bl	800dd44 <malloc>
 800dece:	1e02      	subs	r2, r0, #0
 800ded0:	61f0      	str	r0, [r6, #28]
 800ded2:	d104      	bne.n	800dede <_Balloc+0x22>
 800ded4:	216b      	movs	r1, #107	@ 0x6b
 800ded6:	4b19      	ldr	r3, [pc, #100]	@ (800df3c <_Balloc+0x80>)
 800ded8:	4819      	ldr	r0, [pc, #100]	@ (800df40 <_Balloc+0x84>)
 800deda:	f000 ffb7 	bl	800ee4c <__assert_func>
 800dede:	6045      	str	r5, [r0, #4]
 800dee0:	6085      	str	r5, [r0, #8]
 800dee2:	6005      	str	r5, [r0, #0]
 800dee4:	60c5      	str	r5, [r0, #12]
 800dee6:	69f5      	ldr	r5, [r6, #28]
 800dee8:	68eb      	ldr	r3, [r5, #12]
 800deea:	2b00      	cmp	r3, #0
 800deec:	d013      	beq.n	800df16 <_Balloc+0x5a>
 800deee:	69f3      	ldr	r3, [r6, #28]
 800def0:	00a2      	lsls	r2, r4, #2
 800def2:	68db      	ldr	r3, [r3, #12]
 800def4:	189b      	adds	r3, r3, r2
 800def6:	6818      	ldr	r0, [r3, #0]
 800def8:	2800      	cmp	r0, #0
 800defa:	d118      	bne.n	800df2e <_Balloc+0x72>
 800defc:	2101      	movs	r1, #1
 800defe:	000d      	movs	r5, r1
 800df00:	40a5      	lsls	r5, r4
 800df02:	1d6a      	adds	r2, r5, #5
 800df04:	0030      	movs	r0, r6
 800df06:	0092      	lsls	r2, r2, #2
 800df08:	f000 ffbe 	bl	800ee88 <_calloc_r>
 800df0c:	2800      	cmp	r0, #0
 800df0e:	d00c      	beq.n	800df2a <_Balloc+0x6e>
 800df10:	6044      	str	r4, [r0, #4]
 800df12:	6085      	str	r5, [r0, #8]
 800df14:	e00d      	b.n	800df32 <_Balloc+0x76>
 800df16:	2221      	movs	r2, #33	@ 0x21
 800df18:	2104      	movs	r1, #4
 800df1a:	0030      	movs	r0, r6
 800df1c:	f000 ffb4 	bl	800ee88 <_calloc_r>
 800df20:	69f3      	ldr	r3, [r6, #28]
 800df22:	60e8      	str	r0, [r5, #12]
 800df24:	68db      	ldr	r3, [r3, #12]
 800df26:	2b00      	cmp	r3, #0
 800df28:	d1e1      	bne.n	800deee <_Balloc+0x32>
 800df2a:	2000      	movs	r0, #0
 800df2c:	bd70      	pop	{r4, r5, r6, pc}
 800df2e:	6802      	ldr	r2, [r0, #0]
 800df30:	601a      	str	r2, [r3, #0]
 800df32:	2300      	movs	r3, #0
 800df34:	6103      	str	r3, [r0, #16]
 800df36:	60c3      	str	r3, [r0, #12]
 800df38:	e7f8      	b.n	800df2c <_Balloc+0x70>
 800df3a:	46c0      	nop			@ (mov r8, r8)
 800df3c:	0800fc29 	.word	0x0800fc29
 800df40:	0800fca9 	.word	0x0800fca9

0800df44 <_Bfree>:
 800df44:	b570      	push	{r4, r5, r6, lr}
 800df46:	69c6      	ldr	r6, [r0, #28]
 800df48:	0005      	movs	r5, r0
 800df4a:	000c      	movs	r4, r1
 800df4c:	2e00      	cmp	r6, #0
 800df4e:	d10e      	bne.n	800df6e <_Bfree+0x2a>
 800df50:	2010      	movs	r0, #16
 800df52:	f7ff fef7 	bl	800dd44 <malloc>
 800df56:	1e02      	subs	r2, r0, #0
 800df58:	61e8      	str	r0, [r5, #28]
 800df5a:	d104      	bne.n	800df66 <_Bfree+0x22>
 800df5c:	218f      	movs	r1, #143	@ 0x8f
 800df5e:	4b09      	ldr	r3, [pc, #36]	@ (800df84 <_Bfree+0x40>)
 800df60:	4809      	ldr	r0, [pc, #36]	@ (800df88 <_Bfree+0x44>)
 800df62:	f000 ff73 	bl	800ee4c <__assert_func>
 800df66:	6046      	str	r6, [r0, #4]
 800df68:	6086      	str	r6, [r0, #8]
 800df6a:	6006      	str	r6, [r0, #0]
 800df6c:	60c6      	str	r6, [r0, #12]
 800df6e:	2c00      	cmp	r4, #0
 800df70:	d007      	beq.n	800df82 <_Bfree+0x3e>
 800df72:	69eb      	ldr	r3, [r5, #28]
 800df74:	6862      	ldr	r2, [r4, #4]
 800df76:	68db      	ldr	r3, [r3, #12]
 800df78:	0092      	lsls	r2, r2, #2
 800df7a:	189b      	adds	r3, r3, r2
 800df7c:	681a      	ldr	r2, [r3, #0]
 800df7e:	6022      	str	r2, [r4, #0]
 800df80:	601c      	str	r4, [r3, #0]
 800df82:	bd70      	pop	{r4, r5, r6, pc}
 800df84:	0800fc29 	.word	0x0800fc29
 800df88:	0800fca9 	.word	0x0800fca9

0800df8c <__multadd>:
 800df8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800df8e:	000f      	movs	r7, r1
 800df90:	9001      	str	r0, [sp, #4]
 800df92:	000c      	movs	r4, r1
 800df94:	001e      	movs	r6, r3
 800df96:	2000      	movs	r0, #0
 800df98:	690d      	ldr	r5, [r1, #16]
 800df9a:	3714      	adds	r7, #20
 800df9c:	683b      	ldr	r3, [r7, #0]
 800df9e:	3001      	adds	r0, #1
 800dfa0:	b299      	uxth	r1, r3
 800dfa2:	4351      	muls	r1, r2
 800dfa4:	0c1b      	lsrs	r3, r3, #16
 800dfa6:	4353      	muls	r3, r2
 800dfa8:	1989      	adds	r1, r1, r6
 800dfaa:	0c0e      	lsrs	r6, r1, #16
 800dfac:	199b      	adds	r3, r3, r6
 800dfae:	0c1e      	lsrs	r6, r3, #16
 800dfb0:	b289      	uxth	r1, r1
 800dfb2:	041b      	lsls	r3, r3, #16
 800dfb4:	185b      	adds	r3, r3, r1
 800dfb6:	c708      	stmia	r7!, {r3}
 800dfb8:	4285      	cmp	r5, r0
 800dfba:	dcef      	bgt.n	800df9c <__multadd+0x10>
 800dfbc:	2e00      	cmp	r6, #0
 800dfbe:	d022      	beq.n	800e006 <__multadd+0x7a>
 800dfc0:	68a3      	ldr	r3, [r4, #8]
 800dfc2:	42ab      	cmp	r3, r5
 800dfc4:	dc19      	bgt.n	800dffa <__multadd+0x6e>
 800dfc6:	6861      	ldr	r1, [r4, #4]
 800dfc8:	9801      	ldr	r0, [sp, #4]
 800dfca:	3101      	adds	r1, #1
 800dfcc:	f7ff ff76 	bl	800debc <_Balloc>
 800dfd0:	1e07      	subs	r7, r0, #0
 800dfd2:	d105      	bne.n	800dfe0 <__multadd+0x54>
 800dfd4:	003a      	movs	r2, r7
 800dfd6:	21ba      	movs	r1, #186	@ 0xba
 800dfd8:	4b0c      	ldr	r3, [pc, #48]	@ (800e00c <__multadd+0x80>)
 800dfda:	480d      	ldr	r0, [pc, #52]	@ (800e010 <__multadd+0x84>)
 800dfdc:	f000 ff36 	bl	800ee4c <__assert_func>
 800dfe0:	0021      	movs	r1, r4
 800dfe2:	6922      	ldr	r2, [r4, #16]
 800dfe4:	310c      	adds	r1, #12
 800dfe6:	3202      	adds	r2, #2
 800dfe8:	0092      	lsls	r2, r2, #2
 800dfea:	300c      	adds	r0, #12
 800dfec:	f000 ff24 	bl	800ee38 <memcpy>
 800dff0:	0021      	movs	r1, r4
 800dff2:	9801      	ldr	r0, [sp, #4]
 800dff4:	f7ff ffa6 	bl	800df44 <_Bfree>
 800dff8:	003c      	movs	r4, r7
 800dffa:	1d2b      	adds	r3, r5, #4
 800dffc:	009b      	lsls	r3, r3, #2
 800dffe:	18e3      	adds	r3, r4, r3
 800e000:	3501      	adds	r5, #1
 800e002:	605e      	str	r6, [r3, #4]
 800e004:	6125      	str	r5, [r4, #16]
 800e006:	0020      	movs	r0, r4
 800e008:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800e00a:	46c0      	nop			@ (mov r8, r8)
 800e00c:	0800fc98 	.word	0x0800fc98
 800e010:	0800fca9 	.word	0x0800fca9

0800e014 <__hi0bits>:
 800e014:	2280      	movs	r2, #128	@ 0x80
 800e016:	0003      	movs	r3, r0
 800e018:	0252      	lsls	r2, r2, #9
 800e01a:	2000      	movs	r0, #0
 800e01c:	4293      	cmp	r3, r2
 800e01e:	d201      	bcs.n	800e024 <__hi0bits+0x10>
 800e020:	041b      	lsls	r3, r3, #16
 800e022:	3010      	adds	r0, #16
 800e024:	2280      	movs	r2, #128	@ 0x80
 800e026:	0452      	lsls	r2, r2, #17
 800e028:	4293      	cmp	r3, r2
 800e02a:	d201      	bcs.n	800e030 <__hi0bits+0x1c>
 800e02c:	3008      	adds	r0, #8
 800e02e:	021b      	lsls	r3, r3, #8
 800e030:	2280      	movs	r2, #128	@ 0x80
 800e032:	0552      	lsls	r2, r2, #21
 800e034:	4293      	cmp	r3, r2
 800e036:	d201      	bcs.n	800e03c <__hi0bits+0x28>
 800e038:	3004      	adds	r0, #4
 800e03a:	011b      	lsls	r3, r3, #4
 800e03c:	2280      	movs	r2, #128	@ 0x80
 800e03e:	05d2      	lsls	r2, r2, #23
 800e040:	4293      	cmp	r3, r2
 800e042:	d201      	bcs.n	800e048 <__hi0bits+0x34>
 800e044:	3002      	adds	r0, #2
 800e046:	009b      	lsls	r3, r3, #2
 800e048:	2b00      	cmp	r3, #0
 800e04a:	db03      	blt.n	800e054 <__hi0bits+0x40>
 800e04c:	3001      	adds	r0, #1
 800e04e:	4213      	tst	r3, r2
 800e050:	d100      	bne.n	800e054 <__hi0bits+0x40>
 800e052:	2020      	movs	r0, #32
 800e054:	4770      	bx	lr

0800e056 <__lo0bits>:
 800e056:	6803      	ldr	r3, [r0, #0]
 800e058:	0001      	movs	r1, r0
 800e05a:	2207      	movs	r2, #7
 800e05c:	0018      	movs	r0, r3
 800e05e:	4010      	ands	r0, r2
 800e060:	4213      	tst	r3, r2
 800e062:	d00d      	beq.n	800e080 <__lo0bits+0x2a>
 800e064:	3a06      	subs	r2, #6
 800e066:	2000      	movs	r0, #0
 800e068:	4213      	tst	r3, r2
 800e06a:	d105      	bne.n	800e078 <__lo0bits+0x22>
 800e06c:	3002      	adds	r0, #2
 800e06e:	4203      	tst	r3, r0
 800e070:	d003      	beq.n	800e07a <__lo0bits+0x24>
 800e072:	40d3      	lsrs	r3, r2
 800e074:	0010      	movs	r0, r2
 800e076:	600b      	str	r3, [r1, #0]
 800e078:	4770      	bx	lr
 800e07a:	089b      	lsrs	r3, r3, #2
 800e07c:	600b      	str	r3, [r1, #0]
 800e07e:	e7fb      	b.n	800e078 <__lo0bits+0x22>
 800e080:	b29a      	uxth	r2, r3
 800e082:	2a00      	cmp	r2, #0
 800e084:	d101      	bne.n	800e08a <__lo0bits+0x34>
 800e086:	2010      	movs	r0, #16
 800e088:	0c1b      	lsrs	r3, r3, #16
 800e08a:	b2da      	uxtb	r2, r3
 800e08c:	2a00      	cmp	r2, #0
 800e08e:	d101      	bne.n	800e094 <__lo0bits+0x3e>
 800e090:	3008      	adds	r0, #8
 800e092:	0a1b      	lsrs	r3, r3, #8
 800e094:	071a      	lsls	r2, r3, #28
 800e096:	d101      	bne.n	800e09c <__lo0bits+0x46>
 800e098:	3004      	adds	r0, #4
 800e09a:	091b      	lsrs	r3, r3, #4
 800e09c:	079a      	lsls	r2, r3, #30
 800e09e:	d101      	bne.n	800e0a4 <__lo0bits+0x4e>
 800e0a0:	3002      	adds	r0, #2
 800e0a2:	089b      	lsrs	r3, r3, #2
 800e0a4:	07da      	lsls	r2, r3, #31
 800e0a6:	d4e9      	bmi.n	800e07c <__lo0bits+0x26>
 800e0a8:	3001      	adds	r0, #1
 800e0aa:	085b      	lsrs	r3, r3, #1
 800e0ac:	d1e6      	bne.n	800e07c <__lo0bits+0x26>
 800e0ae:	2020      	movs	r0, #32
 800e0b0:	e7e2      	b.n	800e078 <__lo0bits+0x22>
	...

0800e0b4 <__i2b>:
 800e0b4:	b510      	push	{r4, lr}
 800e0b6:	000c      	movs	r4, r1
 800e0b8:	2101      	movs	r1, #1
 800e0ba:	f7ff feff 	bl	800debc <_Balloc>
 800e0be:	2800      	cmp	r0, #0
 800e0c0:	d107      	bne.n	800e0d2 <__i2b+0x1e>
 800e0c2:	2146      	movs	r1, #70	@ 0x46
 800e0c4:	4c05      	ldr	r4, [pc, #20]	@ (800e0dc <__i2b+0x28>)
 800e0c6:	0002      	movs	r2, r0
 800e0c8:	4b05      	ldr	r3, [pc, #20]	@ (800e0e0 <__i2b+0x2c>)
 800e0ca:	0020      	movs	r0, r4
 800e0cc:	31ff      	adds	r1, #255	@ 0xff
 800e0ce:	f000 febd 	bl	800ee4c <__assert_func>
 800e0d2:	2301      	movs	r3, #1
 800e0d4:	6144      	str	r4, [r0, #20]
 800e0d6:	6103      	str	r3, [r0, #16]
 800e0d8:	bd10      	pop	{r4, pc}
 800e0da:	46c0      	nop			@ (mov r8, r8)
 800e0dc:	0800fca9 	.word	0x0800fca9
 800e0e0:	0800fc98 	.word	0x0800fc98

0800e0e4 <__multiply>:
 800e0e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e0e6:	0014      	movs	r4, r2
 800e0e8:	690a      	ldr	r2, [r1, #16]
 800e0ea:	6923      	ldr	r3, [r4, #16]
 800e0ec:	000d      	movs	r5, r1
 800e0ee:	b08b      	sub	sp, #44	@ 0x2c
 800e0f0:	429a      	cmp	r2, r3
 800e0f2:	db02      	blt.n	800e0fa <__multiply+0x16>
 800e0f4:	0023      	movs	r3, r4
 800e0f6:	000c      	movs	r4, r1
 800e0f8:	001d      	movs	r5, r3
 800e0fa:	6927      	ldr	r7, [r4, #16]
 800e0fc:	692e      	ldr	r6, [r5, #16]
 800e0fe:	6861      	ldr	r1, [r4, #4]
 800e100:	19bb      	adds	r3, r7, r6
 800e102:	9303      	str	r3, [sp, #12]
 800e104:	68a3      	ldr	r3, [r4, #8]
 800e106:	19ba      	adds	r2, r7, r6
 800e108:	4293      	cmp	r3, r2
 800e10a:	da00      	bge.n	800e10e <__multiply+0x2a>
 800e10c:	3101      	adds	r1, #1
 800e10e:	f7ff fed5 	bl	800debc <_Balloc>
 800e112:	9002      	str	r0, [sp, #8]
 800e114:	2800      	cmp	r0, #0
 800e116:	d106      	bne.n	800e126 <__multiply+0x42>
 800e118:	21b1      	movs	r1, #177	@ 0xb1
 800e11a:	4b49      	ldr	r3, [pc, #292]	@ (800e240 <__multiply+0x15c>)
 800e11c:	4849      	ldr	r0, [pc, #292]	@ (800e244 <__multiply+0x160>)
 800e11e:	9a02      	ldr	r2, [sp, #8]
 800e120:	0049      	lsls	r1, r1, #1
 800e122:	f000 fe93 	bl	800ee4c <__assert_func>
 800e126:	9b02      	ldr	r3, [sp, #8]
 800e128:	2200      	movs	r2, #0
 800e12a:	3314      	adds	r3, #20
 800e12c:	469c      	mov	ip, r3
 800e12e:	19bb      	adds	r3, r7, r6
 800e130:	009b      	lsls	r3, r3, #2
 800e132:	4463      	add	r3, ip
 800e134:	9304      	str	r3, [sp, #16]
 800e136:	4663      	mov	r3, ip
 800e138:	9904      	ldr	r1, [sp, #16]
 800e13a:	428b      	cmp	r3, r1
 800e13c:	d32a      	bcc.n	800e194 <__multiply+0xb0>
 800e13e:	0023      	movs	r3, r4
 800e140:	00bf      	lsls	r7, r7, #2
 800e142:	3314      	adds	r3, #20
 800e144:	3514      	adds	r5, #20
 800e146:	9308      	str	r3, [sp, #32]
 800e148:	00b6      	lsls	r6, r6, #2
 800e14a:	19db      	adds	r3, r3, r7
 800e14c:	9305      	str	r3, [sp, #20]
 800e14e:	19ab      	adds	r3, r5, r6
 800e150:	9309      	str	r3, [sp, #36]	@ 0x24
 800e152:	2304      	movs	r3, #4
 800e154:	9306      	str	r3, [sp, #24]
 800e156:	0023      	movs	r3, r4
 800e158:	9a05      	ldr	r2, [sp, #20]
 800e15a:	3315      	adds	r3, #21
 800e15c:	9501      	str	r5, [sp, #4]
 800e15e:	429a      	cmp	r2, r3
 800e160:	d305      	bcc.n	800e16e <__multiply+0x8a>
 800e162:	1b13      	subs	r3, r2, r4
 800e164:	3b15      	subs	r3, #21
 800e166:	089b      	lsrs	r3, r3, #2
 800e168:	3301      	adds	r3, #1
 800e16a:	009b      	lsls	r3, r3, #2
 800e16c:	9306      	str	r3, [sp, #24]
 800e16e:	9b01      	ldr	r3, [sp, #4]
 800e170:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e172:	4293      	cmp	r3, r2
 800e174:	d310      	bcc.n	800e198 <__multiply+0xb4>
 800e176:	9b03      	ldr	r3, [sp, #12]
 800e178:	2b00      	cmp	r3, #0
 800e17a:	dd05      	ble.n	800e188 <__multiply+0xa4>
 800e17c:	9b04      	ldr	r3, [sp, #16]
 800e17e:	3b04      	subs	r3, #4
 800e180:	9304      	str	r3, [sp, #16]
 800e182:	681b      	ldr	r3, [r3, #0]
 800e184:	2b00      	cmp	r3, #0
 800e186:	d056      	beq.n	800e236 <__multiply+0x152>
 800e188:	9b02      	ldr	r3, [sp, #8]
 800e18a:	9a03      	ldr	r2, [sp, #12]
 800e18c:	0018      	movs	r0, r3
 800e18e:	611a      	str	r2, [r3, #16]
 800e190:	b00b      	add	sp, #44	@ 0x2c
 800e192:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e194:	c304      	stmia	r3!, {r2}
 800e196:	e7cf      	b.n	800e138 <__multiply+0x54>
 800e198:	9b01      	ldr	r3, [sp, #4]
 800e19a:	6818      	ldr	r0, [r3, #0]
 800e19c:	b280      	uxth	r0, r0
 800e19e:	2800      	cmp	r0, #0
 800e1a0:	d01e      	beq.n	800e1e0 <__multiply+0xfc>
 800e1a2:	4667      	mov	r7, ip
 800e1a4:	2500      	movs	r5, #0
 800e1a6:	9e08      	ldr	r6, [sp, #32]
 800e1a8:	ce02      	ldmia	r6!, {r1}
 800e1aa:	683b      	ldr	r3, [r7, #0]
 800e1ac:	9307      	str	r3, [sp, #28]
 800e1ae:	b28b      	uxth	r3, r1
 800e1b0:	4343      	muls	r3, r0
 800e1b2:	001a      	movs	r2, r3
 800e1b4:	466b      	mov	r3, sp
 800e1b6:	0c09      	lsrs	r1, r1, #16
 800e1b8:	8b9b      	ldrh	r3, [r3, #28]
 800e1ba:	4341      	muls	r1, r0
 800e1bc:	18d3      	adds	r3, r2, r3
 800e1be:	9a07      	ldr	r2, [sp, #28]
 800e1c0:	195b      	adds	r3, r3, r5
 800e1c2:	0c12      	lsrs	r2, r2, #16
 800e1c4:	1889      	adds	r1, r1, r2
 800e1c6:	0c1a      	lsrs	r2, r3, #16
 800e1c8:	188a      	adds	r2, r1, r2
 800e1ca:	b29b      	uxth	r3, r3
 800e1cc:	0c15      	lsrs	r5, r2, #16
 800e1ce:	0412      	lsls	r2, r2, #16
 800e1d0:	431a      	orrs	r2, r3
 800e1d2:	9b05      	ldr	r3, [sp, #20]
 800e1d4:	c704      	stmia	r7!, {r2}
 800e1d6:	42b3      	cmp	r3, r6
 800e1d8:	d8e6      	bhi.n	800e1a8 <__multiply+0xc4>
 800e1da:	4663      	mov	r3, ip
 800e1dc:	9a06      	ldr	r2, [sp, #24]
 800e1de:	509d      	str	r5, [r3, r2]
 800e1e0:	9b01      	ldr	r3, [sp, #4]
 800e1e2:	6818      	ldr	r0, [r3, #0]
 800e1e4:	0c00      	lsrs	r0, r0, #16
 800e1e6:	d020      	beq.n	800e22a <__multiply+0x146>
 800e1e8:	4663      	mov	r3, ip
 800e1ea:	0025      	movs	r5, r4
 800e1ec:	4661      	mov	r1, ip
 800e1ee:	2700      	movs	r7, #0
 800e1f0:	681b      	ldr	r3, [r3, #0]
 800e1f2:	3514      	adds	r5, #20
 800e1f4:	682a      	ldr	r2, [r5, #0]
 800e1f6:	680e      	ldr	r6, [r1, #0]
 800e1f8:	b292      	uxth	r2, r2
 800e1fa:	4342      	muls	r2, r0
 800e1fc:	0c36      	lsrs	r6, r6, #16
 800e1fe:	1992      	adds	r2, r2, r6
 800e200:	19d2      	adds	r2, r2, r7
 800e202:	0416      	lsls	r6, r2, #16
 800e204:	b29b      	uxth	r3, r3
 800e206:	431e      	orrs	r6, r3
 800e208:	600e      	str	r6, [r1, #0]
 800e20a:	cd40      	ldmia	r5!, {r6}
 800e20c:	684b      	ldr	r3, [r1, #4]
 800e20e:	0c36      	lsrs	r6, r6, #16
 800e210:	4346      	muls	r6, r0
 800e212:	b29b      	uxth	r3, r3
 800e214:	0c12      	lsrs	r2, r2, #16
 800e216:	18f3      	adds	r3, r6, r3
 800e218:	189b      	adds	r3, r3, r2
 800e21a:	9a05      	ldr	r2, [sp, #20]
 800e21c:	0c1f      	lsrs	r7, r3, #16
 800e21e:	3104      	adds	r1, #4
 800e220:	42aa      	cmp	r2, r5
 800e222:	d8e7      	bhi.n	800e1f4 <__multiply+0x110>
 800e224:	4662      	mov	r2, ip
 800e226:	9906      	ldr	r1, [sp, #24]
 800e228:	5053      	str	r3, [r2, r1]
 800e22a:	9b01      	ldr	r3, [sp, #4]
 800e22c:	3304      	adds	r3, #4
 800e22e:	9301      	str	r3, [sp, #4]
 800e230:	2304      	movs	r3, #4
 800e232:	449c      	add	ip, r3
 800e234:	e79b      	b.n	800e16e <__multiply+0x8a>
 800e236:	9b03      	ldr	r3, [sp, #12]
 800e238:	3b01      	subs	r3, #1
 800e23a:	9303      	str	r3, [sp, #12]
 800e23c:	e79b      	b.n	800e176 <__multiply+0x92>
 800e23e:	46c0      	nop			@ (mov r8, r8)
 800e240:	0800fc98 	.word	0x0800fc98
 800e244:	0800fca9 	.word	0x0800fca9

0800e248 <__pow5mult>:
 800e248:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e24a:	2303      	movs	r3, #3
 800e24c:	0015      	movs	r5, r2
 800e24e:	0007      	movs	r7, r0
 800e250:	000e      	movs	r6, r1
 800e252:	401a      	ands	r2, r3
 800e254:	421d      	tst	r5, r3
 800e256:	d008      	beq.n	800e26a <__pow5mult+0x22>
 800e258:	4925      	ldr	r1, [pc, #148]	@ (800e2f0 <__pow5mult+0xa8>)
 800e25a:	3a01      	subs	r2, #1
 800e25c:	0092      	lsls	r2, r2, #2
 800e25e:	5852      	ldr	r2, [r2, r1]
 800e260:	2300      	movs	r3, #0
 800e262:	0031      	movs	r1, r6
 800e264:	f7ff fe92 	bl	800df8c <__multadd>
 800e268:	0006      	movs	r6, r0
 800e26a:	10ad      	asrs	r5, r5, #2
 800e26c:	d03d      	beq.n	800e2ea <__pow5mult+0xa2>
 800e26e:	69fc      	ldr	r4, [r7, #28]
 800e270:	2c00      	cmp	r4, #0
 800e272:	d10f      	bne.n	800e294 <__pow5mult+0x4c>
 800e274:	2010      	movs	r0, #16
 800e276:	f7ff fd65 	bl	800dd44 <malloc>
 800e27a:	1e02      	subs	r2, r0, #0
 800e27c:	61f8      	str	r0, [r7, #28]
 800e27e:	d105      	bne.n	800e28c <__pow5mult+0x44>
 800e280:	21b4      	movs	r1, #180	@ 0xb4
 800e282:	4b1c      	ldr	r3, [pc, #112]	@ (800e2f4 <__pow5mult+0xac>)
 800e284:	481c      	ldr	r0, [pc, #112]	@ (800e2f8 <__pow5mult+0xb0>)
 800e286:	31ff      	adds	r1, #255	@ 0xff
 800e288:	f000 fde0 	bl	800ee4c <__assert_func>
 800e28c:	6044      	str	r4, [r0, #4]
 800e28e:	6084      	str	r4, [r0, #8]
 800e290:	6004      	str	r4, [r0, #0]
 800e292:	60c4      	str	r4, [r0, #12]
 800e294:	69fb      	ldr	r3, [r7, #28]
 800e296:	689c      	ldr	r4, [r3, #8]
 800e298:	9301      	str	r3, [sp, #4]
 800e29a:	2c00      	cmp	r4, #0
 800e29c:	d108      	bne.n	800e2b0 <__pow5mult+0x68>
 800e29e:	0038      	movs	r0, r7
 800e2a0:	4916      	ldr	r1, [pc, #88]	@ (800e2fc <__pow5mult+0xb4>)
 800e2a2:	f7ff ff07 	bl	800e0b4 <__i2b>
 800e2a6:	9b01      	ldr	r3, [sp, #4]
 800e2a8:	0004      	movs	r4, r0
 800e2aa:	6098      	str	r0, [r3, #8]
 800e2ac:	2300      	movs	r3, #0
 800e2ae:	6003      	str	r3, [r0, #0]
 800e2b0:	2301      	movs	r3, #1
 800e2b2:	421d      	tst	r5, r3
 800e2b4:	d00a      	beq.n	800e2cc <__pow5mult+0x84>
 800e2b6:	0031      	movs	r1, r6
 800e2b8:	0022      	movs	r2, r4
 800e2ba:	0038      	movs	r0, r7
 800e2bc:	f7ff ff12 	bl	800e0e4 <__multiply>
 800e2c0:	0031      	movs	r1, r6
 800e2c2:	9001      	str	r0, [sp, #4]
 800e2c4:	0038      	movs	r0, r7
 800e2c6:	f7ff fe3d 	bl	800df44 <_Bfree>
 800e2ca:	9e01      	ldr	r6, [sp, #4]
 800e2cc:	106d      	asrs	r5, r5, #1
 800e2ce:	d00c      	beq.n	800e2ea <__pow5mult+0xa2>
 800e2d0:	6820      	ldr	r0, [r4, #0]
 800e2d2:	2800      	cmp	r0, #0
 800e2d4:	d107      	bne.n	800e2e6 <__pow5mult+0x9e>
 800e2d6:	0022      	movs	r2, r4
 800e2d8:	0021      	movs	r1, r4
 800e2da:	0038      	movs	r0, r7
 800e2dc:	f7ff ff02 	bl	800e0e4 <__multiply>
 800e2e0:	2300      	movs	r3, #0
 800e2e2:	6020      	str	r0, [r4, #0]
 800e2e4:	6003      	str	r3, [r0, #0]
 800e2e6:	0004      	movs	r4, r0
 800e2e8:	e7e2      	b.n	800e2b0 <__pow5mult+0x68>
 800e2ea:	0030      	movs	r0, r6
 800e2ec:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800e2ee:	46c0      	nop			@ (mov r8, r8)
 800e2f0:	0800fd04 	.word	0x0800fd04
 800e2f4:	0800fc29 	.word	0x0800fc29
 800e2f8:	0800fca9 	.word	0x0800fca9
 800e2fc:	00000271 	.word	0x00000271

0800e300 <__lshift>:
 800e300:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e302:	000c      	movs	r4, r1
 800e304:	0016      	movs	r6, r2
 800e306:	6923      	ldr	r3, [r4, #16]
 800e308:	1157      	asrs	r7, r2, #5
 800e30a:	b085      	sub	sp, #20
 800e30c:	18fb      	adds	r3, r7, r3
 800e30e:	9301      	str	r3, [sp, #4]
 800e310:	3301      	adds	r3, #1
 800e312:	9300      	str	r3, [sp, #0]
 800e314:	6849      	ldr	r1, [r1, #4]
 800e316:	68a3      	ldr	r3, [r4, #8]
 800e318:	9002      	str	r0, [sp, #8]
 800e31a:	9a00      	ldr	r2, [sp, #0]
 800e31c:	4293      	cmp	r3, r2
 800e31e:	db10      	blt.n	800e342 <__lshift+0x42>
 800e320:	9802      	ldr	r0, [sp, #8]
 800e322:	f7ff fdcb 	bl	800debc <_Balloc>
 800e326:	2300      	movs	r3, #0
 800e328:	0001      	movs	r1, r0
 800e32a:	0005      	movs	r5, r0
 800e32c:	001a      	movs	r2, r3
 800e32e:	3114      	adds	r1, #20
 800e330:	4298      	cmp	r0, r3
 800e332:	d10c      	bne.n	800e34e <__lshift+0x4e>
 800e334:	21ef      	movs	r1, #239	@ 0xef
 800e336:	002a      	movs	r2, r5
 800e338:	4b25      	ldr	r3, [pc, #148]	@ (800e3d0 <__lshift+0xd0>)
 800e33a:	4826      	ldr	r0, [pc, #152]	@ (800e3d4 <__lshift+0xd4>)
 800e33c:	0049      	lsls	r1, r1, #1
 800e33e:	f000 fd85 	bl	800ee4c <__assert_func>
 800e342:	3101      	adds	r1, #1
 800e344:	005b      	lsls	r3, r3, #1
 800e346:	e7e8      	b.n	800e31a <__lshift+0x1a>
 800e348:	0098      	lsls	r0, r3, #2
 800e34a:	500a      	str	r2, [r1, r0]
 800e34c:	3301      	adds	r3, #1
 800e34e:	42bb      	cmp	r3, r7
 800e350:	dbfa      	blt.n	800e348 <__lshift+0x48>
 800e352:	43fb      	mvns	r3, r7
 800e354:	17db      	asrs	r3, r3, #31
 800e356:	401f      	ands	r7, r3
 800e358:	00bf      	lsls	r7, r7, #2
 800e35a:	0023      	movs	r3, r4
 800e35c:	201f      	movs	r0, #31
 800e35e:	19c9      	adds	r1, r1, r7
 800e360:	0037      	movs	r7, r6
 800e362:	6922      	ldr	r2, [r4, #16]
 800e364:	3314      	adds	r3, #20
 800e366:	0092      	lsls	r2, r2, #2
 800e368:	189a      	adds	r2, r3, r2
 800e36a:	4007      	ands	r7, r0
 800e36c:	4206      	tst	r6, r0
 800e36e:	d029      	beq.n	800e3c4 <__lshift+0xc4>
 800e370:	3001      	adds	r0, #1
 800e372:	1bc0      	subs	r0, r0, r7
 800e374:	9003      	str	r0, [sp, #12]
 800e376:	468c      	mov	ip, r1
 800e378:	2000      	movs	r0, #0
 800e37a:	681e      	ldr	r6, [r3, #0]
 800e37c:	40be      	lsls	r6, r7
 800e37e:	4306      	orrs	r6, r0
 800e380:	4660      	mov	r0, ip
 800e382:	c040      	stmia	r0!, {r6}
 800e384:	4684      	mov	ip, r0
 800e386:	9e03      	ldr	r6, [sp, #12]
 800e388:	cb01      	ldmia	r3!, {r0}
 800e38a:	40f0      	lsrs	r0, r6
 800e38c:	429a      	cmp	r2, r3
 800e38e:	d8f4      	bhi.n	800e37a <__lshift+0x7a>
 800e390:	0026      	movs	r6, r4
 800e392:	3615      	adds	r6, #21
 800e394:	2304      	movs	r3, #4
 800e396:	42b2      	cmp	r2, r6
 800e398:	d304      	bcc.n	800e3a4 <__lshift+0xa4>
 800e39a:	1b13      	subs	r3, r2, r4
 800e39c:	3b15      	subs	r3, #21
 800e39e:	089b      	lsrs	r3, r3, #2
 800e3a0:	3301      	adds	r3, #1
 800e3a2:	009b      	lsls	r3, r3, #2
 800e3a4:	50c8      	str	r0, [r1, r3]
 800e3a6:	2800      	cmp	r0, #0
 800e3a8:	d002      	beq.n	800e3b0 <__lshift+0xb0>
 800e3aa:	9b01      	ldr	r3, [sp, #4]
 800e3ac:	3302      	adds	r3, #2
 800e3ae:	9300      	str	r3, [sp, #0]
 800e3b0:	9b00      	ldr	r3, [sp, #0]
 800e3b2:	9802      	ldr	r0, [sp, #8]
 800e3b4:	3b01      	subs	r3, #1
 800e3b6:	0021      	movs	r1, r4
 800e3b8:	612b      	str	r3, [r5, #16]
 800e3ba:	f7ff fdc3 	bl	800df44 <_Bfree>
 800e3be:	0028      	movs	r0, r5
 800e3c0:	b005      	add	sp, #20
 800e3c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e3c4:	cb01      	ldmia	r3!, {r0}
 800e3c6:	c101      	stmia	r1!, {r0}
 800e3c8:	429a      	cmp	r2, r3
 800e3ca:	d8fb      	bhi.n	800e3c4 <__lshift+0xc4>
 800e3cc:	e7f0      	b.n	800e3b0 <__lshift+0xb0>
 800e3ce:	46c0      	nop			@ (mov r8, r8)
 800e3d0:	0800fc98 	.word	0x0800fc98
 800e3d4:	0800fca9 	.word	0x0800fca9

0800e3d8 <__mcmp>:
 800e3d8:	b530      	push	{r4, r5, lr}
 800e3da:	690b      	ldr	r3, [r1, #16]
 800e3dc:	6904      	ldr	r4, [r0, #16]
 800e3de:	0002      	movs	r2, r0
 800e3e0:	1ae0      	subs	r0, r4, r3
 800e3e2:	429c      	cmp	r4, r3
 800e3e4:	d10f      	bne.n	800e406 <__mcmp+0x2e>
 800e3e6:	3214      	adds	r2, #20
 800e3e8:	009b      	lsls	r3, r3, #2
 800e3ea:	3114      	adds	r1, #20
 800e3ec:	0014      	movs	r4, r2
 800e3ee:	18c9      	adds	r1, r1, r3
 800e3f0:	18d2      	adds	r2, r2, r3
 800e3f2:	3a04      	subs	r2, #4
 800e3f4:	3904      	subs	r1, #4
 800e3f6:	6815      	ldr	r5, [r2, #0]
 800e3f8:	680b      	ldr	r3, [r1, #0]
 800e3fa:	429d      	cmp	r5, r3
 800e3fc:	d004      	beq.n	800e408 <__mcmp+0x30>
 800e3fe:	2001      	movs	r0, #1
 800e400:	429d      	cmp	r5, r3
 800e402:	d200      	bcs.n	800e406 <__mcmp+0x2e>
 800e404:	3802      	subs	r0, #2
 800e406:	bd30      	pop	{r4, r5, pc}
 800e408:	4294      	cmp	r4, r2
 800e40a:	d3f2      	bcc.n	800e3f2 <__mcmp+0x1a>
 800e40c:	e7fb      	b.n	800e406 <__mcmp+0x2e>
	...

0800e410 <__mdiff>:
 800e410:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e412:	000c      	movs	r4, r1
 800e414:	b087      	sub	sp, #28
 800e416:	9000      	str	r0, [sp, #0]
 800e418:	0011      	movs	r1, r2
 800e41a:	0020      	movs	r0, r4
 800e41c:	0017      	movs	r7, r2
 800e41e:	f7ff ffdb 	bl	800e3d8 <__mcmp>
 800e422:	1e05      	subs	r5, r0, #0
 800e424:	d110      	bne.n	800e448 <__mdiff+0x38>
 800e426:	0001      	movs	r1, r0
 800e428:	9800      	ldr	r0, [sp, #0]
 800e42a:	f7ff fd47 	bl	800debc <_Balloc>
 800e42e:	1e02      	subs	r2, r0, #0
 800e430:	d104      	bne.n	800e43c <__mdiff+0x2c>
 800e432:	4b40      	ldr	r3, [pc, #256]	@ (800e534 <__mdiff+0x124>)
 800e434:	4840      	ldr	r0, [pc, #256]	@ (800e538 <__mdiff+0x128>)
 800e436:	4941      	ldr	r1, [pc, #260]	@ (800e53c <__mdiff+0x12c>)
 800e438:	f000 fd08 	bl	800ee4c <__assert_func>
 800e43c:	2301      	movs	r3, #1
 800e43e:	6145      	str	r5, [r0, #20]
 800e440:	6103      	str	r3, [r0, #16]
 800e442:	0010      	movs	r0, r2
 800e444:	b007      	add	sp, #28
 800e446:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e448:	2600      	movs	r6, #0
 800e44a:	42b0      	cmp	r0, r6
 800e44c:	da03      	bge.n	800e456 <__mdiff+0x46>
 800e44e:	0023      	movs	r3, r4
 800e450:	003c      	movs	r4, r7
 800e452:	001f      	movs	r7, r3
 800e454:	3601      	adds	r6, #1
 800e456:	6861      	ldr	r1, [r4, #4]
 800e458:	9800      	ldr	r0, [sp, #0]
 800e45a:	f7ff fd2f 	bl	800debc <_Balloc>
 800e45e:	1e02      	subs	r2, r0, #0
 800e460:	d103      	bne.n	800e46a <__mdiff+0x5a>
 800e462:	4b34      	ldr	r3, [pc, #208]	@ (800e534 <__mdiff+0x124>)
 800e464:	4834      	ldr	r0, [pc, #208]	@ (800e538 <__mdiff+0x128>)
 800e466:	4936      	ldr	r1, [pc, #216]	@ (800e540 <__mdiff+0x130>)
 800e468:	e7e6      	b.n	800e438 <__mdiff+0x28>
 800e46a:	6923      	ldr	r3, [r4, #16]
 800e46c:	3414      	adds	r4, #20
 800e46e:	9300      	str	r3, [sp, #0]
 800e470:	009b      	lsls	r3, r3, #2
 800e472:	18e3      	adds	r3, r4, r3
 800e474:	0021      	movs	r1, r4
 800e476:	9401      	str	r4, [sp, #4]
 800e478:	003c      	movs	r4, r7
 800e47a:	9302      	str	r3, [sp, #8]
 800e47c:	693b      	ldr	r3, [r7, #16]
 800e47e:	3414      	adds	r4, #20
 800e480:	009b      	lsls	r3, r3, #2
 800e482:	18e3      	adds	r3, r4, r3
 800e484:	9303      	str	r3, [sp, #12]
 800e486:	0003      	movs	r3, r0
 800e488:	60c6      	str	r6, [r0, #12]
 800e48a:	468c      	mov	ip, r1
 800e48c:	2000      	movs	r0, #0
 800e48e:	3314      	adds	r3, #20
 800e490:	9304      	str	r3, [sp, #16]
 800e492:	9305      	str	r3, [sp, #20]
 800e494:	4663      	mov	r3, ip
 800e496:	cb20      	ldmia	r3!, {r5}
 800e498:	b2a9      	uxth	r1, r5
 800e49a:	000e      	movs	r6, r1
 800e49c:	469c      	mov	ip, r3
 800e49e:	cc08      	ldmia	r4!, {r3}
 800e4a0:	0c2d      	lsrs	r5, r5, #16
 800e4a2:	b299      	uxth	r1, r3
 800e4a4:	1a71      	subs	r1, r6, r1
 800e4a6:	1809      	adds	r1, r1, r0
 800e4a8:	0c1b      	lsrs	r3, r3, #16
 800e4aa:	1408      	asrs	r0, r1, #16
 800e4ac:	1aeb      	subs	r3, r5, r3
 800e4ae:	181b      	adds	r3, r3, r0
 800e4b0:	1418      	asrs	r0, r3, #16
 800e4b2:	b289      	uxth	r1, r1
 800e4b4:	041b      	lsls	r3, r3, #16
 800e4b6:	4319      	orrs	r1, r3
 800e4b8:	9b05      	ldr	r3, [sp, #20]
 800e4ba:	c302      	stmia	r3!, {r1}
 800e4bc:	9305      	str	r3, [sp, #20]
 800e4be:	9b03      	ldr	r3, [sp, #12]
 800e4c0:	42a3      	cmp	r3, r4
 800e4c2:	d8e7      	bhi.n	800e494 <__mdiff+0x84>
 800e4c4:	0039      	movs	r1, r7
 800e4c6:	9c03      	ldr	r4, [sp, #12]
 800e4c8:	3115      	adds	r1, #21
 800e4ca:	2304      	movs	r3, #4
 800e4cc:	428c      	cmp	r4, r1
 800e4ce:	d304      	bcc.n	800e4da <__mdiff+0xca>
 800e4d0:	1be3      	subs	r3, r4, r7
 800e4d2:	3b15      	subs	r3, #21
 800e4d4:	089b      	lsrs	r3, r3, #2
 800e4d6:	3301      	adds	r3, #1
 800e4d8:	009b      	lsls	r3, r3, #2
 800e4da:	9901      	ldr	r1, [sp, #4]
 800e4dc:	18cd      	adds	r5, r1, r3
 800e4de:	9904      	ldr	r1, [sp, #16]
 800e4e0:	002e      	movs	r6, r5
 800e4e2:	18cb      	adds	r3, r1, r3
 800e4e4:	001f      	movs	r7, r3
 800e4e6:	9902      	ldr	r1, [sp, #8]
 800e4e8:	428e      	cmp	r6, r1
 800e4ea:	d311      	bcc.n	800e510 <__mdiff+0x100>
 800e4ec:	9c02      	ldr	r4, [sp, #8]
 800e4ee:	1ee9      	subs	r1, r5, #3
 800e4f0:	2000      	movs	r0, #0
 800e4f2:	428c      	cmp	r4, r1
 800e4f4:	d304      	bcc.n	800e500 <__mdiff+0xf0>
 800e4f6:	0021      	movs	r1, r4
 800e4f8:	3103      	adds	r1, #3
 800e4fa:	1b49      	subs	r1, r1, r5
 800e4fc:	0889      	lsrs	r1, r1, #2
 800e4fe:	0088      	lsls	r0, r1, #2
 800e500:	181b      	adds	r3, r3, r0
 800e502:	3b04      	subs	r3, #4
 800e504:	6819      	ldr	r1, [r3, #0]
 800e506:	2900      	cmp	r1, #0
 800e508:	d010      	beq.n	800e52c <__mdiff+0x11c>
 800e50a:	9b00      	ldr	r3, [sp, #0]
 800e50c:	6113      	str	r3, [r2, #16]
 800e50e:	e798      	b.n	800e442 <__mdiff+0x32>
 800e510:	4684      	mov	ip, r0
 800e512:	ce02      	ldmia	r6!, {r1}
 800e514:	b288      	uxth	r0, r1
 800e516:	4460      	add	r0, ip
 800e518:	1400      	asrs	r0, r0, #16
 800e51a:	0c0c      	lsrs	r4, r1, #16
 800e51c:	1904      	adds	r4, r0, r4
 800e51e:	4461      	add	r1, ip
 800e520:	1420      	asrs	r0, r4, #16
 800e522:	b289      	uxth	r1, r1
 800e524:	0424      	lsls	r4, r4, #16
 800e526:	4321      	orrs	r1, r4
 800e528:	c702      	stmia	r7!, {r1}
 800e52a:	e7dc      	b.n	800e4e6 <__mdiff+0xd6>
 800e52c:	9900      	ldr	r1, [sp, #0]
 800e52e:	3901      	subs	r1, #1
 800e530:	9100      	str	r1, [sp, #0]
 800e532:	e7e6      	b.n	800e502 <__mdiff+0xf2>
 800e534:	0800fc98 	.word	0x0800fc98
 800e538:	0800fca9 	.word	0x0800fca9
 800e53c:	00000237 	.word	0x00000237
 800e540:	00000245 	.word	0x00000245

0800e544 <__d2b>:
 800e544:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e546:	2101      	movs	r1, #1
 800e548:	0016      	movs	r6, r2
 800e54a:	001f      	movs	r7, r3
 800e54c:	f7ff fcb6 	bl	800debc <_Balloc>
 800e550:	1e04      	subs	r4, r0, #0
 800e552:	d105      	bne.n	800e560 <__d2b+0x1c>
 800e554:	0022      	movs	r2, r4
 800e556:	4b25      	ldr	r3, [pc, #148]	@ (800e5ec <__d2b+0xa8>)
 800e558:	4825      	ldr	r0, [pc, #148]	@ (800e5f0 <__d2b+0xac>)
 800e55a:	4926      	ldr	r1, [pc, #152]	@ (800e5f4 <__d2b+0xb0>)
 800e55c:	f000 fc76 	bl	800ee4c <__assert_func>
 800e560:	033b      	lsls	r3, r7, #12
 800e562:	007d      	lsls	r5, r7, #1
 800e564:	0b1b      	lsrs	r3, r3, #12
 800e566:	0d6d      	lsrs	r5, r5, #21
 800e568:	d002      	beq.n	800e570 <__d2b+0x2c>
 800e56a:	2280      	movs	r2, #128	@ 0x80
 800e56c:	0352      	lsls	r2, r2, #13
 800e56e:	4313      	orrs	r3, r2
 800e570:	9301      	str	r3, [sp, #4]
 800e572:	2e00      	cmp	r6, #0
 800e574:	d025      	beq.n	800e5c2 <__d2b+0x7e>
 800e576:	4668      	mov	r0, sp
 800e578:	9600      	str	r6, [sp, #0]
 800e57a:	f7ff fd6c 	bl	800e056 <__lo0bits>
 800e57e:	9b01      	ldr	r3, [sp, #4]
 800e580:	9900      	ldr	r1, [sp, #0]
 800e582:	2800      	cmp	r0, #0
 800e584:	d01b      	beq.n	800e5be <__d2b+0x7a>
 800e586:	2220      	movs	r2, #32
 800e588:	001e      	movs	r6, r3
 800e58a:	1a12      	subs	r2, r2, r0
 800e58c:	4096      	lsls	r6, r2
 800e58e:	0032      	movs	r2, r6
 800e590:	40c3      	lsrs	r3, r0
 800e592:	430a      	orrs	r2, r1
 800e594:	6162      	str	r2, [r4, #20]
 800e596:	9301      	str	r3, [sp, #4]
 800e598:	9e01      	ldr	r6, [sp, #4]
 800e59a:	61a6      	str	r6, [r4, #24]
 800e59c:	1e73      	subs	r3, r6, #1
 800e59e:	419e      	sbcs	r6, r3
 800e5a0:	3601      	adds	r6, #1
 800e5a2:	6126      	str	r6, [r4, #16]
 800e5a4:	2d00      	cmp	r5, #0
 800e5a6:	d014      	beq.n	800e5d2 <__d2b+0x8e>
 800e5a8:	2635      	movs	r6, #53	@ 0x35
 800e5aa:	4b13      	ldr	r3, [pc, #76]	@ (800e5f8 <__d2b+0xb4>)
 800e5ac:	18ed      	adds	r5, r5, r3
 800e5ae:	9b08      	ldr	r3, [sp, #32]
 800e5b0:	182d      	adds	r5, r5, r0
 800e5b2:	601d      	str	r5, [r3, #0]
 800e5b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e5b6:	1a36      	subs	r6, r6, r0
 800e5b8:	601e      	str	r6, [r3, #0]
 800e5ba:	0020      	movs	r0, r4
 800e5bc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800e5be:	6161      	str	r1, [r4, #20]
 800e5c0:	e7ea      	b.n	800e598 <__d2b+0x54>
 800e5c2:	a801      	add	r0, sp, #4
 800e5c4:	f7ff fd47 	bl	800e056 <__lo0bits>
 800e5c8:	9b01      	ldr	r3, [sp, #4]
 800e5ca:	2601      	movs	r6, #1
 800e5cc:	6163      	str	r3, [r4, #20]
 800e5ce:	3020      	adds	r0, #32
 800e5d0:	e7e7      	b.n	800e5a2 <__d2b+0x5e>
 800e5d2:	4b0a      	ldr	r3, [pc, #40]	@ (800e5fc <__d2b+0xb8>)
 800e5d4:	18c0      	adds	r0, r0, r3
 800e5d6:	9b08      	ldr	r3, [sp, #32]
 800e5d8:	6018      	str	r0, [r3, #0]
 800e5da:	4b09      	ldr	r3, [pc, #36]	@ (800e600 <__d2b+0xbc>)
 800e5dc:	18f3      	adds	r3, r6, r3
 800e5de:	009b      	lsls	r3, r3, #2
 800e5e0:	18e3      	adds	r3, r4, r3
 800e5e2:	6958      	ldr	r0, [r3, #20]
 800e5e4:	f7ff fd16 	bl	800e014 <__hi0bits>
 800e5e8:	0176      	lsls	r6, r6, #5
 800e5ea:	e7e3      	b.n	800e5b4 <__d2b+0x70>
 800e5ec:	0800fc98 	.word	0x0800fc98
 800e5f0:	0800fca9 	.word	0x0800fca9
 800e5f4:	0000030f 	.word	0x0000030f
 800e5f8:	fffffbcd 	.word	0xfffffbcd
 800e5fc:	fffffbce 	.word	0xfffffbce
 800e600:	3fffffff 	.word	0x3fffffff

0800e604 <__ssputs_r>:
 800e604:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e606:	688e      	ldr	r6, [r1, #8]
 800e608:	b085      	sub	sp, #20
 800e60a:	001f      	movs	r7, r3
 800e60c:	000c      	movs	r4, r1
 800e60e:	680b      	ldr	r3, [r1, #0]
 800e610:	9002      	str	r0, [sp, #8]
 800e612:	9203      	str	r2, [sp, #12]
 800e614:	42be      	cmp	r6, r7
 800e616:	d830      	bhi.n	800e67a <__ssputs_r+0x76>
 800e618:	210c      	movs	r1, #12
 800e61a:	5e62      	ldrsh	r2, [r4, r1]
 800e61c:	2190      	movs	r1, #144	@ 0x90
 800e61e:	00c9      	lsls	r1, r1, #3
 800e620:	420a      	tst	r2, r1
 800e622:	d028      	beq.n	800e676 <__ssputs_r+0x72>
 800e624:	2003      	movs	r0, #3
 800e626:	6921      	ldr	r1, [r4, #16]
 800e628:	1a5b      	subs	r3, r3, r1
 800e62a:	9301      	str	r3, [sp, #4]
 800e62c:	6963      	ldr	r3, [r4, #20]
 800e62e:	4343      	muls	r3, r0
 800e630:	9801      	ldr	r0, [sp, #4]
 800e632:	0fdd      	lsrs	r5, r3, #31
 800e634:	18ed      	adds	r5, r5, r3
 800e636:	1c7b      	adds	r3, r7, #1
 800e638:	181b      	adds	r3, r3, r0
 800e63a:	106d      	asrs	r5, r5, #1
 800e63c:	42ab      	cmp	r3, r5
 800e63e:	d900      	bls.n	800e642 <__ssputs_r+0x3e>
 800e640:	001d      	movs	r5, r3
 800e642:	0552      	lsls	r2, r2, #21
 800e644:	d528      	bpl.n	800e698 <__ssputs_r+0x94>
 800e646:	0029      	movs	r1, r5
 800e648:	9802      	ldr	r0, [sp, #8]
 800e64a:	f7ff fba7 	bl	800dd9c <_malloc_r>
 800e64e:	1e06      	subs	r6, r0, #0
 800e650:	d02c      	beq.n	800e6ac <__ssputs_r+0xa8>
 800e652:	9a01      	ldr	r2, [sp, #4]
 800e654:	6921      	ldr	r1, [r4, #16]
 800e656:	f000 fbef 	bl	800ee38 <memcpy>
 800e65a:	89a2      	ldrh	r2, [r4, #12]
 800e65c:	4b18      	ldr	r3, [pc, #96]	@ (800e6c0 <__ssputs_r+0xbc>)
 800e65e:	401a      	ands	r2, r3
 800e660:	2380      	movs	r3, #128	@ 0x80
 800e662:	4313      	orrs	r3, r2
 800e664:	81a3      	strh	r3, [r4, #12]
 800e666:	9b01      	ldr	r3, [sp, #4]
 800e668:	6126      	str	r6, [r4, #16]
 800e66a:	18f6      	adds	r6, r6, r3
 800e66c:	6026      	str	r6, [r4, #0]
 800e66e:	003e      	movs	r6, r7
 800e670:	6165      	str	r5, [r4, #20]
 800e672:	1aed      	subs	r5, r5, r3
 800e674:	60a5      	str	r5, [r4, #8]
 800e676:	42be      	cmp	r6, r7
 800e678:	d900      	bls.n	800e67c <__ssputs_r+0x78>
 800e67a:	003e      	movs	r6, r7
 800e67c:	0032      	movs	r2, r6
 800e67e:	9903      	ldr	r1, [sp, #12]
 800e680:	6820      	ldr	r0, [r4, #0]
 800e682:	f000 fbb3 	bl	800edec <memmove>
 800e686:	2000      	movs	r0, #0
 800e688:	68a3      	ldr	r3, [r4, #8]
 800e68a:	1b9b      	subs	r3, r3, r6
 800e68c:	60a3      	str	r3, [r4, #8]
 800e68e:	6823      	ldr	r3, [r4, #0]
 800e690:	199b      	adds	r3, r3, r6
 800e692:	6023      	str	r3, [r4, #0]
 800e694:	b005      	add	sp, #20
 800e696:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e698:	002a      	movs	r2, r5
 800e69a:	9802      	ldr	r0, [sp, #8]
 800e69c:	f000 fc33 	bl	800ef06 <_realloc_r>
 800e6a0:	1e06      	subs	r6, r0, #0
 800e6a2:	d1e0      	bne.n	800e666 <__ssputs_r+0x62>
 800e6a4:	6921      	ldr	r1, [r4, #16]
 800e6a6:	9802      	ldr	r0, [sp, #8]
 800e6a8:	f7ff fb02 	bl	800dcb0 <_free_r>
 800e6ac:	230c      	movs	r3, #12
 800e6ae:	2001      	movs	r0, #1
 800e6b0:	9a02      	ldr	r2, [sp, #8]
 800e6b2:	4240      	negs	r0, r0
 800e6b4:	6013      	str	r3, [r2, #0]
 800e6b6:	89a2      	ldrh	r2, [r4, #12]
 800e6b8:	3334      	adds	r3, #52	@ 0x34
 800e6ba:	4313      	orrs	r3, r2
 800e6bc:	81a3      	strh	r3, [r4, #12]
 800e6be:	e7e9      	b.n	800e694 <__ssputs_r+0x90>
 800e6c0:	fffffb7f 	.word	0xfffffb7f

0800e6c4 <_svfiprintf_r>:
 800e6c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e6c6:	b0a1      	sub	sp, #132	@ 0x84
 800e6c8:	9003      	str	r0, [sp, #12]
 800e6ca:	001d      	movs	r5, r3
 800e6cc:	898b      	ldrh	r3, [r1, #12]
 800e6ce:	000f      	movs	r7, r1
 800e6d0:	0016      	movs	r6, r2
 800e6d2:	061b      	lsls	r3, r3, #24
 800e6d4:	d511      	bpl.n	800e6fa <_svfiprintf_r+0x36>
 800e6d6:	690b      	ldr	r3, [r1, #16]
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	d10e      	bne.n	800e6fa <_svfiprintf_r+0x36>
 800e6dc:	2140      	movs	r1, #64	@ 0x40
 800e6de:	f7ff fb5d 	bl	800dd9c <_malloc_r>
 800e6e2:	6038      	str	r0, [r7, #0]
 800e6e4:	6138      	str	r0, [r7, #16]
 800e6e6:	2800      	cmp	r0, #0
 800e6e8:	d105      	bne.n	800e6f6 <_svfiprintf_r+0x32>
 800e6ea:	230c      	movs	r3, #12
 800e6ec:	9a03      	ldr	r2, [sp, #12]
 800e6ee:	6013      	str	r3, [r2, #0]
 800e6f0:	2001      	movs	r0, #1
 800e6f2:	4240      	negs	r0, r0
 800e6f4:	e0cf      	b.n	800e896 <_svfiprintf_r+0x1d2>
 800e6f6:	2340      	movs	r3, #64	@ 0x40
 800e6f8:	617b      	str	r3, [r7, #20]
 800e6fa:	2300      	movs	r3, #0
 800e6fc:	ac08      	add	r4, sp, #32
 800e6fe:	6163      	str	r3, [r4, #20]
 800e700:	3320      	adds	r3, #32
 800e702:	7663      	strb	r3, [r4, #25]
 800e704:	3310      	adds	r3, #16
 800e706:	76a3      	strb	r3, [r4, #26]
 800e708:	9507      	str	r5, [sp, #28]
 800e70a:	0035      	movs	r5, r6
 800e70c:	782b      	ldrb	r3, [r5, #0]
 800e70e:	2b00      	cmp	r3, #0
 800e710:	d001      	beq.n	800e716 <_svfiprintf_r+0x52>
 800e712:	2b25      	cmp	r3, #37	@ 0x25
 800e714:	d148      	bne.n	800e7a8 <_svfiprintf_r+0xe4>
 800e716:	1bab      	subs	r3, r5, r6
 800e718:	9305      	str	r3, [sp, #20]
 800e71a:	42b5      	cmp	r5, r6
 800e71c:	d00b      	beq.n	800e736 <_svfiprintf_r+0x72>
 800e71e:	0032      	movs	r2, r6
 800e720:	0039      	movs	r1, r7
 800e722:	9803      	ldr	r0, [sp, #12]
 800e724:	f7ff ff6e 	bl	800e604 <__ssputs_r>
 800e728:	3001      	adds	r0, #1
 800e72a:	d100      	bne.n	800e72e <_svfiprintf_r+0x6a>
 800e72c:	e0ae      	b.n	800e88c <_svfiprintf_r+0x1c8>
 800e72e:	6963      	ldr	r3, [r4, #20]
 800e730:	9a05      	ldr	r2, [sp, #20]
 800e732:	189b      	adds	r3, r3, r2
 800e734:	6163      	str	r3, [r4, #20]
 800e736:	782b      	ldrb	r3, [r5, #0]
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d100      	bne.n	800e73e <_svfiprintf_r+0x7a>
 800e73c:	e0a6      	b.n	800e88c <_svfiprintf_r+0x1c8>
 800e73e:	2201      	movs	r2, #1
 800e740:	2300      	movs	r3, #0
 800e742:	4252      	negs	r2, r2
 800e744:	6062      	str	r2, [r4, #4]
 800e746:	a904      	add	r1, sp, #16
 800e748:	3254      	adds	r2, #84	@ 0x54
 800e74a:	1852      	adds	r2, r2, r1
 800e74c:	1c6e      	adds	r6, r5, #1
 800e74e:	6023      	str	r3, [r4, #0]
 800e750:	60e3      	str	r3, [r4, #12]
 800e752:	60a3      	str	r3, [r4, #8]
 800e754:	7013      	strb	r3, [r2, #0]
 800e756:	65a3      	str	r3, [r4, #88]	@ 0x58
 800e758:	4b54      	ldr	r3, [pc, #336]	@ (800e8ac <_svfiprintf_r+0x1e8>)
 800e75a:	2205      	movs	r2, #5
 800e75c:	0018      	movs	r0, r3
 800e75e:	7831      	ldrb	r1, [r6, #0]
 800e760:	9305      	str	r3, [sp, #20]
 800e762:	f7fe fc18 	bl	800cf96 <memchr>
 800e766:	1c75      	adds	r5, r6, #1
 800e768:	2800      	cmp	r0, #0
 800e76a:	d11f      	bne.n	800e7ac <_svfiprintf_r+0xe8>
 800e76c:	6822      	ldr	r2, [r4, #0]
 800e76e:	06d3      	lsls	r3, r2, #27
 800e770:	d504      	bpl.n	800e77c <_svfiprintf_r+0xb8>
 800e772:	2353      	movs	r3, #83	@ 0x53
 800e774:	a904      	add	r1, sp, #16
 800e776:	185b      	adds	r3, r3, r1
 800e778:	2120      	movs	r1, #32
 800e77a:	7019      	strb	r1, [r3, #0]
 800e77c:	0713      	lsls	r3, r2, #28
 800e77e:	d504      	bpl.n	800e78a <_svfiprintf_r+0xc6>
 800e780:	2353      	movs	r3, #83	@ 0x53
 800e782:	a904      	add	r1, sp, #16
 800e784:	185b      	adds	r3, r3, r1
 800e786:	212b      	movs	r1, #43	@ 0x2b
 800e788:	7019      	strb	r1, [r3, #0]
 800e78a:	7833      	ldrb	r3, [r6, #0]
 800e78c:	2b2a      	cmp	r3, #42	@ 0x2a
 800e78e:	d016      	beq.n	800e7be <_svfiprintf_r+0xfa>
 800e790:	0035      	movs	r5, r6
 800e792:	2100      	movs	r1, #0
 800e794:	200a      	movs	r0, #10
 800e796:	68e3      	ldr	r3, [r4, #12]
 800e798:	782a      	ldrb	r2, [r5, #0]
 800e79a:	1c6e      	adds	r6, r5, #1
 800e79c:	3a30      	subs	r2, #48	@ 0x30
 800e79e:	2a09      	cmp	r2, #9
 800e7a0:	d950      	bls.n	800e844 <_svfiprintf_r+0x180>
 800e7a2:	2900      	cmp	r1, #0
 800e7a4:	d111      	bne.n	800e7ca <_svfiprintf_r+0x106>
 800e7a6:	e017      	b.n	800e7d8 <_svfiprintf_r+0x114>
 800e7a8:	3501      	adds	r5, #1
 800e7aa:	e7af      	b.n	800e70c <_svfiprintf_r+0x48>
 800e7ac:	9b05      	ldr	r3, [sp, #20]
 800e7ae:	6822      	ldr	r2, [r4, #0]
 800e7b0:	1ac0      	subs	r0, r0, r3
 800e7b2:	2301      	movs	r3, #1
 800e7b4:	4083      	lsls	r3, r0
 800e7b6:	4313      	orrs	r3, r2
 800e7b8:	002e      	movs	r6, r5
 800e7ba:	6023      	str	r3, [r4, #0]
 800e7bc:	e7cc      	b.n	800e758 <_svfiprintf_r+0x94>
 800e7be:	9b07      	ldr	r3, [sp, #28]
 800e7c0:	1d19      	adds	r1, r3, #4
 800e7c2:	681b      	ldr	r3, [r3, #0]
 800e7c4:	9107      	str	r1, [sp, #28]
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	db01      	blt.n	800e7ce <_svfiprintf_r+0x10a>
 800e7ca:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e7cc:	e004      	b.n	800e7d8 <_svfiprintf_r+0x114>
 800e7ce:	425b      	negs	r3, r3
 800e7d0:	60e3      	str	r3, [r4, #12]
 800e7d2:	2302      	movs	r3, #2
 800e7d4:	4313      	orrs	r3, r2
 800e7d6:	6023      	str	r3, [r4, #0]
 800e7d8:	782b      	ldrb	r3, [r5, #0]
 800e7da:	2b2e      	cmp	r3, #46	@ 0x2e
 800e7dc:	d10c      	bne.n	800e7f8 <_svfiprintf_r+0x134>
 800e7de:	786b      	ldrb	r3, [r5, #1]
 800e7e0:	2b2a      	cmp	r3, #42	@ 0x2a
 800e7e2:	d134      	bne.n	800e84e <_svfiprintf_r+0x18a>
 800e7e4:	9b07      	ldr	r3, [sp, #28]
 800e7e6:	3502      	adds	r5, #2
 800e7e8:	1d1a      	adds	r2, r3, #4
 800e7ea:	681b      	ldr	r3, [r3, #0]
 800e7ec:	9207      	str	r2, [sp, #28]
 800e7ee:	2b00      	cmp	r3, #0
 800e7f0:	da01      	bge.n	800e7f6 <_svfiprintf_r+0x132>
 800e7f2:	2301      	movs	r3, #1
 800e7f4:	425b      	negs	r3, r3
 800e7f6:	9309      	str	r3, [sp, #36]	@ 0x24
 800e7f8:	4e2d      	ldr	r6, [pc, #180]	@ (800e8b0 <_svfiprintf_r+0x1ec>)
 800e7fa:	2203      	movs	r2, #3
 800e7fc:	0030      	movs	r0, r6
 800e7fe:	7829      	ldrb	r1, [r5, #0]
 800e800:	f7fe fbc9 	bl	800cf96 <memchr>
 800e804:	2800      	cmp	r0, #0
 800e806:	d006      	beq.n	800e816 <_svfiprintf_r+0x152>
 800e808:	2340      	movs	r3, #64	@ 0x40
 800e80a:	1b80      	subs	r0, r0, r6
 800e80c:	4083      	lsls	r3, r0
 800e80e:	6822      	ldr	r2, [r4, #0]
 800e810:	3501      	adds	r5, #1
 800e812:	4313      	orrs	r3, r2
 800e814:	6023      	str	r3, [r4, #0]
 800e816:	7829      	ldrb	r1, [r5, #0]
 800e818:	2206      	movs	r2, #6
 800e81a:	4826      	ldr	r0, [pc, #152]	@ (800e8b4 <_svfiprintf_r+0x1f0>)
 800e81c:	1c6e      	adds	r6, r5, #1
 800e81e:	7621      	strb	r1, [r4, #24]
 800e820:	f7fe fbb9 	bl	800cf96 <memchr>
 800e824:	2800      	cmp	r0, #0
 800e826:	d038      	beq.n	800e89a <_svfiprintf_r+0x1d6>
 800e828:	4b23      	ldr	r3, [pc, #140]	@ (800e8b8 <_svfiprintf_r+0x1f4>)
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	d122      	bne.n	800e874 <_svfiprintf_r+0x1b0>
 800e82e:	2207      	movs	r2, #7
 800e830:	9b07      	ldr	r3, [sp, #28]
 800e832:	3307      	adds	r3, #7
 800e834:	4393      	bics	r3, r2
 800e836:	3308      	adds	r3, #8
 800e838:	9307      	str	r3, [sp, #28]
 800e83a:	6963      	ldr	r3, [r4, #20]
 800e83c:	9a04      	ldr	r2, [sp, #16]
 800e83e:	189b      	adds	r3, r3, r2
 800e840:	6163      	str	r3, [r4, #20]
 800e842:	e762      	b.n	800e70a <_svfiprintf_r+0x46>
 800e844:	4343      	muls	r3, r0
 800e846:	0035      	movs	r5, r6
 800e848:	2101      	movs	r1, #1
 800e84a:	189b      	adds	r3, r3, r2
 800e84c:	e7a4      	b.n	800e798 <_svfiprintf_r+0xd4>
 800e84e:	2300      	movs	r3, #0
 800e850:	200a      	movs	r0, #10
 800e852:	0019      	movs	r1, r3
 800e854:	3501      	adds	r5, #1
 800e856:	6063      	str	r3, [r4, #4]
 800e858:	782a      	ldrb	r2, [r5, #0]
 800e85a:	1c6e      	adds	r6, r5, #1
 800e85c:	3a30      	subs	r2, #48	@ 0x30
 800e85e:	2a09      	cmp	r2, #9
 800e860:	d903      	bls.n	800e86a <_svfiprintf_r+0x1a6>
 800e862:	2b00      	cmp	r3, #0
 800e864:	d0c8      	beq.n	800e7f8 <_svfiprintf_r+0x134>
 800e866:	9109      	str	r1, [sp, #36]	@ 0x24
 800e868:	e7c6      	b.n	800e7f8 <_svfiprintf_r+0x134>
 800e86a:	4341      	muls	r1, r0
 800e86c:	0035      	movs	r5, r6
 800e86e:	2301      	movs	r3, #1
 800e870:	1889      	adds	r1, r1, r2
 800e872:	e7f1      	b.n	800e858 <_svfiprintf_r+0x194>
 800e874:	aa07      	add	r2, sp, #28
 800e876:	9200      	str	r2, [sp, #0]
 800e878:	0021      	movs	r1, r4
 800e87a:	003a      	movs	r2, r7
 800e87c:	4b0f      	ldr	r3, [pc, #60]	@ (800e8bc <_svfiprintf_r+0x1f8>)
 800e87e:	9803      	ldr	r0, [sp, #12]
 800e880:	f7fd fdb8 	bl	800c3f4 <_printf_float>
 800e884:	9004      	str	r0, [sp, #16]
 800e886:	9b04      	ldr	r3, [sp, #16]
 800e888:	3301      	adds	r3, #1
 800e88a:	d1d6      	bne.n	800e83a <_svfiprintf_r+0x176>
 800e88c:	89bb      	ldrh	r3, [r7, #12]
 800e88e:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800e890:	065b      	lsls	r3, r3, #25
 800e892:	d500      	bpl.n	800e896 <_svfiprintf_r+0x1d2>
 800e894:	e72c      	b.n	800e6f0 <_svfiprintf_r+0x2c>
 800e896:	b021      	add	sp, #132	@ 0x84
 800e898:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e89a:	aa07      	add	r2, sp, #28
 800e89c:	9200      	str	r2, [sp, #0]
 800e89e:	0021      	movs	r1, r4
 800e8a0:	003a      	movs	r2, r7
 800e8a2:	4b06      	ldr	r3, [pc, #24]	@ (800e8bc <_svfiprintf_r+0x1f8>)
 800e8a4:	9803      	ldr	r0, [sp, #12]
 800e8a6:	f7fe f853 	bl	800c950 <_printf_i>
 800e8aa:	e7eb      	b.n	800e884 <_svfiprintf_r+0x1c0>
 800e8ac:	0800fe00 	.word	0x0800fe00
 800e8b0:	0800fe06 	.word	0x0800fe06
 800e8b4:	0800fe0a 	.word	0x0800fe0a
 800e8b8:	0800c3f5 	.word	0x0800c3f5
 800e8bc:	0800e605 	.word	0x0800e605

0800e8c0 <__sfputc_r>:
 800e8c0:	6893      	ldr	r3, [r2, #8]
 800e8c2:	b510      	push	{r4, lr}
 800e8c4:	3b01      	subs	r3, #1
 800e8c6:	6093      	str	r3, [r2, #8]
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	da04      	bge.n	800e8d6 <__sfputc_r+0x16>
 800e8cc:	6994      	ldr	r4, [r2, #24]
 800e8ce:	42a3      	cmp	r3, r4
 800e8d0:	db07      	blt.n	800e8e2 <__sfputc_r+0x22>
 800e8d2:	290a      	cmp	r1, #10
 800e8d4:	d005      	beq.n	800e8e2 <__sfputc_r+0x22>
 800e8d6:	6813      	ldr	r3, [r2, #0]
 800e8d8:	1c58      	adds	r0, r3, #1
 800e8da:	6010      	str	r0, [r2, #0]
 800e8dc:	7019      	strb	r1, [r3, #0]
 800e8de:	0008      	movs	r0, r1
 800e8e0:	bd10      	pop	{r4, pc}
 800e8e2:	f000 f9e2 	bl	800ecaa <__swbuf_r>
 800e8e6:	0001      	movs	r1, r0
 800e8e8:	e7f9      	b.n	800e8de <__sfputc_r+0x1e>

0800e8ea <__sfputs_r>:
 800e8ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8ec:	0006      	movs	r6, r0
 800e8ee:	000f      	movs	r7, r1
 800e8f0:	0014      	movs	r4, r2
 800e8f2:	18d5      	adds	r5, r2, r3
 800e8f4:	42ac      	cmp	r4, r5
 800e8f6:	d101      	bne.n	800e8fc <__sfputs_r+0x12>
 800e8f8:	2000      	movs	r0, #0
 800e8fa:	e007      	b.n	800e90c <__sfputs_r+0x22>
 800e8fc:	7821      	ldrb	r1, [r4, #0]
 800e8fe:	003a      	movs	r2, r7
 800e900:	0030      	movs	r0, r6
 800e902:	f7ff ffdd 	bl	800e8c0 <__sfputc_r>
 800e906:	3401      	adds	r4, #1
 800e908:	1c43      	adds	r3, r0, #1
 800e90a:	d1f3      	bne.n	800e8f4 <__sfputs_r+0xa>
 800e90c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e910 <_vfiprintf_r>:
 800e910:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e912:	b0a1      	sub	sp, #132	@ 0x84
 800e914:	000f      	movs	r7, r1
 800e916:	0015      	movs	r5, r2
 800e918:	001e      	movs	r6, r3
 800e91a:	9003      	str	r0, [sp, #12]
 800e91c:	2800      	cmp	r0, #0
 800e91e:	d004      	beq.n	800e92a <_vfiprintf_r+0x1a>
 800e920:	6a03      	ldr	r3, [r0, #32]
 800e922:	2b00      	cmp	r3, #0
 800e924:	d101      	bne.n	800e92a <_vfiprintf_r+0x1a>
 800e926:	f7fe f9b1 	bl	800cc8c <__sinit>
 800e92a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e92c:	07db      	lsls	r3, r3, #31
 800e92e:	d405      	bmi.n	800e93c <_vfiprintf_r+0x2c>
 800e930:	89bb      	ldrh	r3, [r7, #12]
 800e932:	059b      	lsls	r3, r3, #22
 800e934:	d402      	bmi.n	800e93c <_vfiprintf_r+0x2c>
 800e936:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800e938:	f7fe fb2b 	bl	800cf92 <__retarget_lock_acquire_recursive>
 800e93c:	89bb      	ldrh	r3, [r7, #12]
 800e93e:	071b      	lsls	r3, r3, #28
 800e940:	d502      	bpl.n	800e948 <_vfiprintf_r+0x38>
 800e942:	693b      	ldr	r3, [r7, #16]
 800e944:	2b00      	cmp	r3, #0
 800e946:	d113      	bne.n	800e970 <_vfiprintf_r+0x60>
 800e948:	0039      	movs	r1, r7
 800e94a:	9803      	ldr	r0, [sp, #12]
 800e94c:	f000 f9f0 	bl	800ed30 <__swsetup_r>
 800e950:	2800      	cmp	r0, #0
 800e952:	d00d      	beq.n	800e970 <_vfiprintf_r+0x60>
 800e954:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e956:	07db      	lsls	r3, r3, #31
 800e958:	d503      	bpl.n	800e962 <_vfiprintf_r+0x52>
 800e95a:	2001      	movs	r0, #1
 800e95c:	4240      	negs	r0, r0
 800e95e:	b021      	add	sp, #132	@ 0x84
 800e960:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e962:	89bb      	ldrh	r3, [r7, #12]
 800e964:	059b      	lsls	r3, r3, #22
 800e966:	d4f8      	bmi.n	800e95a <_vfiprintf_r+0x4a>
 800e968:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800e96a:	f7fe fb13 	bl	800cf94 <__retarget_lock_release_recursive>
 800e96e:	e7f4      	b.n	800e95a <_vfiprintf_r+0x4a>
 800e970:	2300      	movs	r3, #0
 800e972:	ac08      	add	r4, sp, #32
 800e974:	6163      	str	r3, [r4, #20]
 800e976:	3320      	adds	r3, #32
 800e978:	7663      	strb	r3, [r4, #25]
 800e97a:	3310      	adds	r3, #16
 800e97c:	76a3      	strb	r3, [r4, #26]
 800e97e:	9607      	str	r6, [sp, #28]
 800e980:	002e      	movs	r6, r5
 800e982:	7833      	ldrb	r3, [r6, #0]
 800e984:	2b00      	cmp	r3, #0
 800e986:	d001      	beq.n	800e98c <_vfiprintf_r+0x7c>
 800e988:	2b25      	cmp	r3, #37	@ 0x25
 800e98a:	d148      	bne.n	800ea1e <_vfiprintf_r+0x10e>
 800e98c:	1b73      	subs	r3, r6, r5
 800e98e:	9305      	str	r3, [sp, #20]
 800e990:	42ae      	cmp	r6, r5
 800e992:	d00b      	beq.n	800e9ac <_vfiprintf_r+0x9c>
 800e994:	002a      	movs	r2, r5
 800e996:	0039      	movs	r1, r7
 800e998:	9803      	ldr	r0, [sp, #12]
 800e99a:	f7ff ffa6 	bl	800e8ea <__sfputs_r>
 800e99e:	3001      	adds	r0, #1
 800e9a0:	d100      	bne.n	800e9a4 <_vfiprintf_r+0x94>
 800e9a2:	e0ae      	b.n	800eb02 <_vfiprintf_r+0x1f2>
 800e9a4:	6963      	ldr	r3, [r4, #20]
 800e9a6:	9a05      	ldr	r2, [sp, #20]
 800e9a8:	189b      	adds	r3, r3, r2
 800e9aa:	6163      	str	r3, [r4, #20]
 800e9ac:	7833      	ldrb	r3, [r6, #0]
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	d100      	bne.n	800e9b4 <_vfiprintf_r+0xa4>
 800e9b2:	e0a6      	b.n	800eb02 <_vfiprintf_r+0x1f2>
 800e9b4:	2201      	movs	r2, #1
 800e9b6:	2300      	movs	r3, #0
 800e9b8:	4252      	negs	r2, r2
 800e9ba:	6062      	str	r2, [r4, #4]
 800e9bc:	a904      	add	r1, sp, #16
 800e9be:	3254      	adds	r2, #84	@ 0x54
 800e9c0:	1852      	adds	r2, r2, r1
 800e9c2:	1c75      	adds	r5, r6, #1
 800e9c4:	6023      	str	r3, [r4, #0]
 800e9c6:	60e3      	str	r3, [r4, #12]
 800e9c8:	60a3      	str	r3, [r4, #8]
 800e9ca:	7013      	strb	r3, [r2, #0]
 800e9cc:	65a3      	str	r3, [r4, #88]	@ 0x58
 800e9ce:	4b59      	ldr	r3, [pc, #356]	@ (800eb34 <_vfiprintf_r+0x224>)
 800e9d0:	2205      	movs	r2, #5
 800e9d2:	0018      	movs	r0, r3
 800e9d4:	7829      	ldrb	r1, [r5, #0]
 800e9d6:	9305      	str	r3, [sp, #20]
 800e9d8:	f7fe fadd 	bl	800cf96 <memchr>
 800e9dc:	1c6e      	adds	r6, r5, #1
 800e9de:	2800      	cmp	r0, #0
 800e9e0:	d11f      	bne.n	800ea22 <_vfiprintf_r+0x112>
 800e9e2:	6822      	ldr	r2, [r4, #0]
 800e9e4:	06d3      	lsls	r3, r2, #27
 800e9e6:	d504      	bpl.n	800e9f2 <_vfiprintf_r+0xe2>
 800e9e8:	2353      	movs	r3, #83	@ 0x53
 800e9ea:	a904      	add	r1, sp, #16
 800e9ec:	185b      	adds	r3, r3, r1
 800e9ee:	2120      	movs	r1, #32
 800e9f0:	7019      	strb	r1, [r3, #0]
 800e9f2:	0713      	lsls	r3, r2, #28
 800e9f4:	d504      	bpl.n	800ea00 <_vfiprintf_r+0xf0>
 800e9f6:	2353      	movs	r3, #83	@ 0x53
 800e9f8:	a904      	add	r1, sp, #16
 800e9fa:	185b      	adds	r3, r3, r1
 800e9fc:	212b      	movs	r1, #43	@ 0x2b
 800e9fe:	7019      	strb	r1, [r3, #0]
 800ea00:	782b      	ldrb	r3, [r5, #0]
 800ea02:	2b2a      	cmp	r3, #42	@ 0x2a
 800ea04:	d016      	beq.n	800ea34 <_vfiprintf_r+0x124>
 800ea06:	002e      	movs	r6, r5
 800ea08:	2100      	movs	r1, #0
 800ea0a:	200a      	movs	r0, #10
 800ea0c:	68e3      	ldr	r3, [r4, #12]
 800ea0e:	7832      	ldrb	r2, [r6, #0]
 800ea10:	1c75      	adds	r5, r6, #1
 800ea12:	3a30      	subs	r2, #48	@ 0x30
 800ea14:	2a09      	cmp	r2, #9
 800ea16:	d950      	bls.n	800eaba <_vfiprintf_r+0x1aa>
 800ea18:	2900      	cmp	r1, #0
 800ea1a:	d111      	bne.n	800ea40 <_vfiprintf_r+0x130>
 800ea1c:	e017      	b.n	800ea4e <_vfiprintf_r+0x13e>
 800ea1e:	3601      	adds	r6, #1
 800ea20:	e7af      	b.n	800e982 <_vfiprintf_r+0x72>
 800ea22:	9b05      	ldr	r3, [sp, #20]
 800ea24:	6822      	ldr	r2, [r4, #0]
 800ea26:	1ac0      	subs	r0, r0, r3
 800ea28:	2301      	movs	r3, #1
 800ea2a:	4083      	lsls	r3, r0
 800ea2c:	4313      	orrs	r3, r2
 800ea2e:	0035      	movs	r5, r6
 800ea30:	6023      	str	r3, [r4, #0]
 800ea32:	e7cc      	b.n	800e9ce <_vfiprintf_r+0xbe>
 800ea34:	9b07      	ldr	r3, [sp, #28]
 800ea36:	1d19      	adds	r1, r3, #4
 800ea38:	681b      	ldr	r3, [r3, #0]
 800ea3a:	9107      	str	r1, [sp, #28]
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	db01      	blt.n	800ea44 <_vfiprintf_r+0x134>
 800ea40:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ea42:	e004      	b.n	800ea4e <_vfiprintf_r+0x13e>
 800ea44:	425b      	negs	r3, r3
 800ea46:	60e3      	str	r3, [r4, #12]
 800ea48:	2302      	movs	r3, #2
 800ea4a:	4313      	orrs	r3, r2
 800ea4c:	6023      	str	r3, [r4, #0]
 800ea4e:	7833      	ldrb	r3, [r6, #0]
 800ea50:	2b2e      	cmp	r3, #46	@ 0x2e
 800ea52:	d10c      	bne.n	800ea6e <_vfiprintf_r+0x15e>
 800ea54:	7873      	ldrb	r3, [r6, #1]
 800ea56:	2b2a      	cmp	r3, #42	@ 0x2a
 800ea58:	d134      	bne.n	800eac4 <_vfiprintf_r+0x1b4>
 800ea5a:	9b07      	ldr	r3, [sp, #28]
 800ea5c:	3602      	adds	r6, #2
 800ea5e:	1d1a      	adds	r2, r3, #4
 800ea60:	681b      	ldr	r3, [r3, #0]
 800ea62:	9207      	str	r2, [sp, #28]
 800ea64:	2b00      	cmp	r3, #0
 800ea66:	da01      	bge.n	800ea6c <_vfiprintf_r+0x15c>
 800ea68:	2301      	movs	r3, #1
 800ea6a:	425b      	negs	r3, r3
 800ea6c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ea6e:	4d32      	ldr	r5, [pc, #200]	@ (800eb38 <_vfiprintf_r+0x228>)
 800ea70:	2203      	movs	r2, #3
 800ea72:	0028      	movs	r0, r5
 800ea74:	7831      	ldrb	r1, [r6, #0]
 800ea76:	f7fe fa8e 	bl	800cf96 <memchr>
 800ea7a:	2800      	cmp	r0, #0
 800ea7c:	d006      	beq.n	800ea8c <_vfiprintf_r+0x17c>
 800ea7e:	2340      	movs	r3, #64	@ 0x40
 800ea80:	1b40      	subs	r0, r0, r5
 800ea82:	4083      	lsls	r3, r0
 800ea84:	6822      	ldr	r2, [r4, #0]
 800ea86:	3601      	adds	r6, #1
 800ea88:	4313      	orrs	r3, r2
 800ea8a:	6023      	str	r3, [r4, #0]
 800ea8c:	7831      	ldrb	r1, [r6, #0]
 800ea8e:	2206      	movs	r2, #6
 800ea90:	482a      	ldr	r0, [pc, #168]	@ (800eb3c <_vfiprintf_r+0x22c>)
 800ea92:	1c75      	adds	r5, r6, #1
 800ea94:	7621      	strb	r1, [r4, #24]
 800ea96:	f7fe fa7e 	bl	800cf96 <memchr>
 800ea9a:	2800      	cmp	r0, #0
 800ea9c:	d040      	beq.n	800eb20 <_vfiprintf_r+0x210>
 800ea9e:	4b28      	ldr	r3, [pc, #160]	@ (800eb40 <_vfiprintf_r+0x230>)
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	d122      	bne.n	800eaea <_vfiprintf_r+0x1da>
 800eaa4:	2207      	movs	r2, #7
 800eaa6:	9b07      	ldr	r3, [sp, #28]
 800eaa8:	3307      	adds	r3, #7
 800eaaa:	4393      	bics	r3, r2
 800eaac:	3308      	adds	r3, #8
 800eaae:	9307      	str	r3, [sp, #28]
 800eab0:	6963      	ldr	r3, [r4, #20]
 800eab2:	9a04      	ldr	r2, [sp, #16]
 800eab4:	189b      	adds	r3, r3, r2
 800eab6:	6163      	str	r3, [r4, #20]
 800eab8:	e762      	b.n	800e980 <_vfiprintf_r+0x70>
 800eaba:	4343      	muls	r3, r0
 800eabc:	002e      	movs	r6, r5
 800eabe:	2101      	movs	r1, #1
 800eac0:	189b      	adds	r3, r3, r2
 800eac2:	e7a4      	b.n	800ea0e <_vfiprintf_r+0xfe>
 800eac4:	2300      	movs	r3, #0
 800eac6:	200a      	movs	r0, #10
 800eac8:	0019      	movs	r1, r3
 800eaca:	3601      	adds	r6, #1
 800eacc:	6063      	str	r3, [r4, #4]
 800eace:	7832      	ldrb	r2, [r6, #0]
 800ead0:	1c75      	adds	r5, r6, #1
 800ead2:	3a30      	subs	r2, #48	@ 0x30
 800ead4:	2a09      	cmp	r2, #9
 800ead6:	d903      	bls.n	800eae0 <_vfiprintf_r+0x1d0>
 800ead8:	2b00      	cmp	r3, #0
 800eada:	d0c8      	beq.n	800ea6e <_vfiprintf_r+0x15e>
 800eadc:	9109      	str	r1, [sp, #36]	@ 0x24
 800eade:	e7c6      	b.n	800ea6e <_vfiprintf_r+0x15e>
 800eae0:	4341      	muls	r1, r0
 800eae2:	002e      	movs	r6, r5
 800eae4:	2301      	movs	r3, #1
 800eae6:	1889      	adds	r1, r1, r2
 800eae8:	e7f1      	b.n	800eace <_vfiprintf_r+0x1be>
 800eaea:	aa07      	add	r2, sp, #28
 800eaec:	9200      	str	r2, [sp, #0]
 800eaee:	0021      	movs	r1, r4
 800eaf0:	003a      	movs	r2, r7
 800eaf2:	4b14      	ldr	r3, [pc, #80]	@ (800eb44 <_vfiprintf_r+0x234>)
 800eaf4:	9803      	ldr	r0, [sp, #12]
 800eaf6:	f7fd fc7d 	bl	800c3f4 <_printf_float>
 800eafa:	9004      	str	r0, [sp, #16]
 800eafc:	9b04      	ldr	r3, [sp, #16]
 800eafe:	3301      	adds	r3, #1
 800eb00:	d1d6      	bne.n	800eab0 <_vfiprintf_r+0x1a0>
 800eb02:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800eb04:	07db      	lsls	r3, r3, #31
 800eb06:	d405      	bmi.n	800eb14 <_vfiprintf_r+0x204>
 800eb08:	89bb      	ldrh	r3, [r7, #12]
 800eb0a:	059b      	lsls	r3, r3, #22
 800eb0c:	d402      	bmi.n	800eb14 <_vfiprintf_r+0x204>
 800eb0e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800eb10:	f7fe fa40 	bl	800cf94 <__retarget_lock_release_recursive>
 800eb14:	89bb      	ldrh	r3, [r7, #12]
 800eb16:	065b      	lsls	r3, r3, #25
 800eb18:	d500      	bpl.n	800eb1c <_vfiprintf_r+0x20c>
 800eb1a:	e71e      	b.n	800e95a <_vfiprintf_r+0x4a>
 800eb1c:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800eb1e:	e71e      	b.n	800e95e <_vfiprintf_r+0x4e>
 800eb20:	aa07      	add	r2, sp, #28
 800eb22:	9200      	str	r2, [sp, #0]
 800eb24:	0021      	movs	r1, r4
 800eb26:	003a      	movs	r2, r7
 800eb28:	4b06      	ldr	r3, [pc, #24]	@ (800eb44 <_vfiprintf_r+0x234>)
 800eb2a:	9803      	ldr	r0, [sp, #12]
 800eb2c:	f7fd ff10 	bl	800c950 <_printf_i>
 800eb30:	e7e3      	b.n	800eafa <_vfiprintf_r+0x1ea>
 800eb32:	46c0      	nop			@ (mov r8, r8)
 800eb34:	0800fe00 	.word	0x0800fe00
 800eb38:	0800fe06 	.word	0x0800fe06
 800eb3c:	0800fe0a 	.word	0x0800fe0a
 800eb40:	0800c3f5 	.word	0x0800c3f5
 800eb44:	0800e8eb 	.word	0x0800e8eb

0800eb48 <__sflush_r>:
 800eb48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800eb4a:	220c      	movs	r2, #12
 800eb4c:	5e8b      	ldrsh	r3, [r1, r2]
 800eb4e:	0005      	movs	r5, r0
 800eb50:	000c      	movs	r4, r1
 800eb52:	071a      	lsls	r2, r3, #28
 800eb54:	d456      	bmi.n	800ec04 <__sflush_r+0xbc>
 800eb56:	684a      	ldr	r2, [r1, #4]
 800eb58:	2a00      	cmp	r2, #0
 800eb5a:	dc02      	bgt.n	800eb62 <__sflush_r+0x1a>
 800eb5c:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 800eb5e:	2a00      	cmp	r2, #0
 800eb60:	dd4e      	ble.n	800ec00 <__sflush_r+0xb8>
 800eb62:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800eb64:	2f00      	cmp	r7, #0
 800eb66:	d04b      	beq.n	800ec00 <__sflush_r+0xb8>
 800eb68:	2200      	movs	r2, #0
 800eb6a:	2080      	movs	r0, #128	@ 0x80
 800eb6c:	682e      	ldr	r6, [r5, #0]
 800eb6e:	602a      	str	r2, [r5, #0]
 800eb70:	001a      	movs	r2, r3
 800eb72:	0140      	lsls	r0, r0, #5
 800eb74:	6a21      	ldr	r1, [r4, #32]
 800eb76:	4002      	ands	r2, r0
 800eb78:	4203      	tst	r3, r0
 800eb7a:	d033      	beq.n	800ebe4 <__sflush_r+0x9c>
 800eb7c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800eb7e:	89a3      	ldrh	r3, [r4, #12]
 800eb80:	075b      	lsls	r3, r3, #29
 800eb82:	d506      	bpl.n	800eb92 <__sflush_r+0x4a>
 800eb84:	6863      	ldr	r3, [r4, #4]
 800eb86:	1ad2      	subs	r2, r2, r3
 800eb88:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	d001      	beq.n	800eb92 <__sflush_r+0x4a>
 800eb8e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800eb90:	1ad2      	subs	r2, r2, r3
 800eb92:	2300      	movs	r3, #0
 800eb94:	0028      	movs	r0, r5
 800eb96:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800eb98:	6a21      	ldr	r1, [r4, #32]
 800eb9a:	47b8      	blx	r7
 800eb9c:	89a2      	ldrh	r2, [r4, #12]
 800eb9e:	1c43      	adds	r3, r0, #1
 800eba0:	d106      	bne.n	800ebb0 <__sflush_r+0x68>
 800eba2:	6829      	ldr	r1, [r5, #0]
 800eba4:	291d      	cmp	r1, #29
 800eba6:	d846      	bhi.n	800ec36 <__sflush_r+0xee>
 800eba8:	4b29      	ldr	r3, [pc, #164]	@ (800ec50 <__sflush_r+0x108>)
 800ebaa:	410b      	asrs	r3, r1
 800ebac:	07db      	lsls	r3, r3, #31
 800ebae:	d442      	bmi.n	800ec36 <__sflush_r+0xee>
 800ebb0:	2300      	movs	r3, #0
 800ebb2:	6063      	str	r3, [r4, #4]
 800ebb4:	6923      	ldr	r3, [r4, #16]
 800ebb6:	6023      	str	r3, [r4, #0]
 800ebb8:	04d2      	lsls	r2, r2, #19
 800ebba:	d505      	bpl.n	800ebc8 <__sflush_r+0x80>
 800ebbc:	1c43      	adds	r3, r0, #1
 800ebbe:	d102      	bne.n	800ebc6 <__sflush_r+0x7e>
 800ebc0:	682b      	ldr	r3, [r5, #0]
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	d100      	bne.n	800ebc8 <__sflush_r+0x80>
 800ebc6:	6560      	str	r0, [r4, #84]	@ 0x54
 800ebc8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ebca:	602e      	str	r6, [r5, #0]
 800ebcc:	2900      	cmp	r1, #0
 800ebce:	d017      	beq.n	800ec00 <__sflush_r+0xb8>
 800ebd0:	0023      	movs	r3, r4
 800ebd2:	3344      	adds	r3, #68	@ 0x44
 800ebd4:	4299      	cmp	r1, r3
 800ebd6:	d002      	beq.n	800ebde <__sflush_r+0x96>
 800ebd8:	0028      	movs	r0, r5
 800ebda:	f7ff f869 	bl	800dcb0 <_free_r>
 800ebde:	2300      	movs	r3, #0
 800ebe0:	6363      	str	r3, [r4, #52]	@ 0x34
 800ebe2:	e00d      	b.n	800ec00 <__sflush_r+0xb8>
 800ebe4:	2301      	movs	r3, #1
 800ebe6:	0028      	movs	r0, r5
 800ebe8:	47b8      	blx	r7
 800ebea:	0002      	movs	r2, r0
 800ebec:	1c43      	adds	r3, r0, #1
 800ebee:	d1c6      	bne.n	800eb7e <__sflush_r+0x36>
 800ebf0:	682b      	ldr	r3, [r5, #0]
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	d0c3      	beq.n	800eb7e <__sflush_r+0x36>
 800ebf6:	2b1d      	cmp	r3, #29
 800ebf8:	d001      	beq.n	800ebfe <__sflush_r+0xb6>
 800ebfa:	2b16      	cmp	r3, #22
 800ebfc:	d11a      	bne.n	800ec34 <__sflush_r+0xec>
 800ebfe:	602e      	str	r6, [r5, #0]
 800ec00:	2000      	movs	r0, #0
 800ec02:	e01e      	b.n	800ec42 <__sflush_r+0xfa>
 800ec04:	690e      	ldr	r6, [r1, #16]
 800ec06:	2e00      	cmp	r6, #0
 800ec08:	d0fa      	beq.n	800ec00 <__sflush_r+0xb8>
 800ec0a:	680f      	ldr	r7, [r1, #0]
 800ec0c:	600e      	str	r6, [r1, #0]
 800ec0e:	1bba      	subs	r2, r7, r6
 800ec10:	9201      	str	r2, [sp, #4]
 800ec12:	2200      	movs	r2, #0
 800ec14:	079b      	lsls	r3, r3, #30
 800ec16:	d100      	bne.n	800ec1a <__sflush_r+0xd2>
 800ec18:	694a      	ldr	r2, [r1, #20]
 800ec1a:	60a2      	str	r2, [r4, #8]
 800ec1c:	9b01      	ldr	r3, [sp, #4]
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	ddee      	ble.n	800ec00 <__sflush_r+0xb8>
 800ec22:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800ec24:	0032      	movs	r2, r6
 800ec26:	001f      	movs	r7, r3
 800ec28:	0028      	movs	r0, r5
 800ec2a:	9b01      	ldr	r3, [sp, #4]
 800ec2c:	6a21      	ldr	r1, [r4, #32]
 800ec2e:	47b8      	blx	r7
 800ec30:	2800      	cmp	r0, #0
 800ec32:	dc07      	bgt.n	800ec44 <__sflush_r+0xfc>
 800ec34:	89a2      	ldrh	r2, [r4, #12]
 800ec36:	2340      	movs	r3, #64	@ 0x40
 800ec38:	2001      	movs	r0, #1
 800ec3a:	4313      	orrs	r3, r2
 800ec3c:	b21b      	sxth	r3, r3
 800ec3e:	81a3      	strh	r3, [r4, #12]
 800ec40:	4240      	negs	r0, r0
 800ec42:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ec44:	9b01      	ldr	r3, [sp, #4]
 800ec46:	1836      	adds	r6, r6, r0
 800ec48:	1a1b      	subs	r3, r3, r0
 800ec4a:	9301      	str	r3, [sp, #4]
 800ec4c:	e7e6      	b.n	800ec1c <__sflush_r+0xd4>
 800ec4e:	46c0      	nop			@ (mov r8, r8)
 800ec50:	dfbffffe 	.word	0xdfbffffe

0800ec54 <_fflush_r>:
 800ec54:	690b      	ldr	r3, [r1, #16]
 800ec56:	b570      	push	{r4, r5, r6, lr}
 800ec58:	0005      	movs	r5, r0
 800ec5a:	000c      	movs	r4, r1
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	d102      	bne.n	800ec66 <_fflush_r+0x12>
 800ec60:	2500      	movs	r5, #0
 800ec62:	0028      	movs	r0, r5
 800ec64:	bd70      	pop	{r4, r5, r6, pc}
 800ec66:	2800      	cmp	r0, #0
 800ec68:	d004      	beq.n	800ec74 <_fflush_r+0x20>
 800ec6a:	6a03      	ldr	r3, [r0, #32]
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	d101      	bne.n	800ec74 <_fflush_r+0x20>
 800ec70:	f7fe f80c 	bl	800cc8c <__sinit>
 800ec74:	220c      	movs	r2, #12
 800ec76:	5ea3      	ldrsh	r3, [r4, r2]
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	d0f1      	beq.n	800ec60 <_fflush_r+0xc>
 800ec7c:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ec7e:	07d2      	lsls	r2, r2, #31
 800ec80:	d404      	bmi.n	800ec8c <_fflush_r+0x38>
 800ec82:	059b      	lsls	r3, r3, #22
 800ec84:	d402      	bmi.n	800ec8c <_fflush_r+0x38>
 800ec86:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ec88:	f7fe f983 	bl	800cf92 <__retarget_lock_acquire_recursive>
 800ec8c:	0028      	movs	r0, r5
 800ec8e:	0021      	movs	r1, r4
 800ec90:	f7ff ff5a 	bl	800eb48 <__sflush_r>
 800ec94:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ec96:	0005      	movs	r5, r0
 800ec98:	07db      	lsls	r3, r3, #31
 800ec9a:	d4e2      	bmi.n	800ec62 <_fflush_r+0xe>
 800ec9c:	89a3      	ldrh	r3, [r4, #12]
 800ec9e:	059b      	lsls	r3, r3, #22
 800eca0:	d4df      	bmi.n	800ec62 <_fflush_r+0xe>
 800eca2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800eca4:	f7fe f976 	bl	800cf94 <__retarget_lock_release_recursive>
 800eca8:	e7db      	b.n	800ec62 <_fflush_r+0xe>

0800ecaa <__swbuf_r>:
 800ecaa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ecac:	0006      	movs	r6, r0
 800ecae:	000d      	movs	r5, r1
 800ecb0:	0014      	movs	r4, r2
 800ecb2:	2800      	cmp	r0, #0
 800ecb4:	d004      	beq.n	800ecc0 <__swbuf_r+0x16>
 800ecb6:	6a03      	ldr	r3, [r0, #32]
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	d101      	bne.n	800ecc0 <__swbuf_r+0x16>
 800ecbc:	f7fd ffe6 	bl	800cc8c <__sinit>
 800ecc0:	69a3      	ldr	r3, [r4, #24]
 800ecc2:	60a3      	str	r3, [r4, #8]
 800ecc4:	89a3      	ldrh	r3, [r4, #12]
 800ecc6:	071b      	lsls	r3, r3, #28
 800ecc8:	d502      	bpl.n	800ecd0 <__swbuf_r+0x26>
 800ecca:	6923      	ldr	r3, [r4, #16]
 800eccc:	2b00      	cmp	r3, #0
 800ecce:	d109      	bne.n	800ece4 <__swbuf_r+0x3a>
 800ecd0:	0021      	movs	r1, r4
 800ecd2:	0030      	movs	r0, r6
 800ecd4:	f000 f82c 	bl	800ed30 <__swsetup_r>
 800ecd8:	2800      	cmp	r0, #0
 800ecda:	d003      	beq.n	800ece4 <__swbuf_r+0x3a>
 800ecdc:	2501      	movs	r5, #1
 800ecde:	426d      	negs	r5, r5
 800ece0:	0028      	movs	r0, r5
 800ece2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ece4:	6923      	ldr	r3, [r4, #16]
 800ece6:	6820      	ldr	r0, [r4, #0]
 800ece8:	b2ef      	uxtb	r7, r5
 800ecea:	1ac0      	subs	r0, r0, r3
 800ecec:	6963      	ldr	r3, [r4, #20]
 800ecee:	b2ed      	uxtb	r5, r5
 800ecf0:	4283      	cmp	r3, r0
 800ecf2:	dc05      	bgt.n	800ed00 <__swbuf_r+0x56>
 800ecf4:	0021      	movs	r1, r4
 800ecf6:	0030      	movs	r0, r6
 800ecf8:	f7ff ffac 	bl	800ec54 <_fflush_r>
 800ecfc:	2800      	cmp	r0, #0
 800ecfe:	d1ed      	bne.n	800ecdc <__swbuf_r+0x32>
 800ed00:	68a3      	ldr	r3, [r4, #8]
 800ed02:	3001      	adds	r0, #1
 800ed04:	3b01      	subs	r3, #1
 800ed06:	60a3      	str	r3, [r4, #8]
 800ed08:	6823      	ldr	r3, [r4, #0]
 800ed0a:	1c5a      	adds	r2, r3, #1
 800ed0c:	6022      	str	r2, [r4, #0]
 800ed0e:	701f      	strb	r7, [r3, #0]
 800ed10:	6963      	ldr	r3, [r4, #20]
 800ed12:	4283      	cmp	r3, r0
 800ed14:	d004      	beq.n	800ed20 <__swbuf_r+0x76>
 800ed16:	89a3      	ldrh	r3, [r4, #12]
 800ed18:	07db      	lsls	r3, r3, #31
 800ed1a:	d5e1      	bpl.n	800ece0 <__swbuf_r+0x36>
 800ed1c:	2d0a      	cmp	r5, #10
 800ed1e:	d1df      	bne.n	800ece0 <__swbuf_r+0x36>
 800ed20:	0021      	movs	r1, r4
 800ed22:	0030      	movs	r0, r6
 800ed24:	f7ff ff96 	bl	800ec54 <_fflush_r>
 800ed28:	2800      	cmp	r0, #0
 800ed2a:	d0d9      	beq.n	800ece0 <__swbuf_r+0x36>
 800ed2c:	e7d6      	b.n	800ecdc <__swbuf_r+0x32>
	...

0800ed30 <__swsetup_r>:
 800ed30:	4b2d      	ldr	r3, [pc, #180]	@ (800ede8 <__swsetup_r+0xb8>)
 800ed32:	b570      	push	{r4, r5, r6, lr}
 800ed34:	0005      	movs	r5, r0
 800ed36:	6818      	ldr	r0, [r3, #0]
 800ed38:	000c      	movs	r4, r1
 800ed3a:	2800      	cmp	r0, #0
 800ed3c:	d004      	beq.n	800ed48 <__swsetup_r+0x18>
 800ed3e:	6a03      	ldr	r3, [r0, #32]
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	d101      	bne.n	800ed48 <__swsetup_r+0x18>
 800ed44:	f7fd ffa2 	bl	800cc8c <__sinit>
 800ed48:	230c      	movs	r3, #12
 800ed4a:	5ee2      	ldrsh	r2, [r4, r3]
 800ed4c:	0713      	lsls	r3, r2, #28
 800ed4e:	d423      	bmi.n	800ed98 <__swsetup_r+0x68>
 800ed50:	06d3      	lsls	r3, r2, #27
 800ed52:	d407      	bmi.n	800ed64 <__swsetup_r+0x34>
 800ed54:	2309      	movs	r3, #9
 800ed56:	602b      	str	r3, [r5, #0]
 800ed58:	2340      	movs	r3, #64	@ 0x40
 800ed5a:	2001      	movs	r0, #1
 800ed5c:	4313      	orrs	r3, r2
 800ed5e:	81a3      	strh	r3, [r4, #12]
 800ed60:	4240      	negs	r0, r0
 800ed62:	e03a      	b.n	800edda <__swsetup_r+0xaa>
 800ed64:	0752      	lsls	r2, r2, #29
 800ed66:	d513      	bpl.n	800ed90 <__swsetup_r+0x60>
 800ed68:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ed6a:	2900      	cmp	r1, #0
 800ed6c:	d008      	beq.n	800ed80 <__swsetup_r+0x50>
 800ed6e:	0023      	movs	r3, r4
 800ed70:	3344      	adds	r3, #68	@ 0x44
 800ed72:	4299      	cmp	r1, r3
 800ed74:	d002      	beq.n	800ed7c <__swsetup_r+0x4c>
 800ed76:	0028      	movs	r0, r5
 800ed78:	f7fe ff9a 	bl	800dcb0 <_free_r>
 800ed7c:	2300      	movs	r3, #0
 800ed7e:	6363      	str	r3, [r4, #52]	@ 0x34
 800ed80:	2224      	movs	r2, #36	@ 0x24
 800ed82:	89a3      	ldrh	r3, [r4, #12]
 800ed84:	4393      	bics	r3, r2
 800ed86:	81a3      	strh	r3, [r4, #12]
 800ed88:	2300      	movs	r3, #0
 800ed8a:	6063      	str	r3, [r4, #4]
 800ed8c:	6923      	ldr	r3, [r4, #16]
 800ed8e:	6023      	str	r3, [r4, #0]
 800ed90:	2308      	movs	r3, #8
 800ed92:	89a2      	ldrh	r2, [r4, #12]
 800ed94:	4313      	orrs	r3, r2
 800ed96:	81a3      	strh	r3, [r4, #12]
 800ed98:	6923      	ldr	r3, [r4, #16]
 800ed9a:	2b00      	cmp	r3, #0
 800ed9c:	d10b      	bne.n	800edb6 <__swsetup_r+0x86>
 800ed9e:	21a0      	movs	r1, #160	@ 0xa0
 800eda0:	2280      	movs	r2, #128	@ 0x80
 800eda2:	89a3      	ldrh	r3, [r4, #12]
 800eda4:	0089      	lsls	r1, r1, #2
 800eda6:	0092      	lsls	r2, r2, #2
 800eda8:	400b      	ands	r3, r1
 800edaa:	4293      	cmp	r3, r2
 800edac:	d003      	beq.n	800edb6 <__swsetup_r+0x86>
 800edae:	0021      	movs	r1, r4
 800edb0:	0028      	movs	r0, r5
 800edb2:	f000 f91f 	bl	800eff4 <__smakebuf_r>
 800edb6:	230c      	movs	r3, #12
 800edb8:	5ee2      	ldrsh	r2, [r4, r3]
 800edba:	2101      	movs	r1, #1
 800edbc:	0013      	movs	r3, r2
 800edbe:	400b      	ands	r3, r1
 800edc0:	420a      	tst	r2, r1
 800edc2:	d00b      	beq.n	800eddc <__swsetup_r+0xac>
 800edc4:	2300      	movs	r3, #0
 800edc6:	60a3      	str	r3, [r4, #8]
 800edc8:	6963      	ldr	r3, [r4, #20]
 800edca:	425b      	negs	r3, r3
 800edcc:	61a3      	str	r3, [r4, #24]
 800edce:	2000      	movs	r0, #0
 800edd0:	6923      	ldr	r3, [r4, #16]
 800edd2:	4283      	cmp	r3, r0
 800edd4:	d101      	bne.n	800edda <__swsetup_r+0xaa>
 800edd6:	0613      	lsls	r3, r2, #24
 800edd8:	d4be      	bmi.n	800ed58 <__swsetup_r+0x28>
 800edda:	bd70      	pop	{r4, r5, r6, pc}
 800eddc:	0791      	lsls	r1, r2, #30
 800edde:	d400      	bmi.n	800ede2 <__swsetup_r+0xb2>
 800ede0:	6963      	ldr	r3, [r4, #20]
 800ede2:	60a3      	str	r3, [r4, #8]
 800ede4:	e7f3      	b.n	800edce <__swsetup_r+0x9e>
 800ede6:	46c0      	nop			@ (mov r8, r8)
 800ede8:	2000004c 	.word	0x2000004c

0800edec <memmove>:
 800edec:	b510      	push	{r4, lr}
 800edee:	4288      	cmp	r0, r1
 800edf0:	d806      	bhi.n	800ee00 <memmove+0x14>
 800edf2:	2300      	movs	r3, #0
 800edf4:	429a      	cmp	r2, r3
 800edf6:	d008      	beq.n	800ee0a <memmove+0x1e>
 800edf8:	5ccc      	ldrb	r4, [r1, r3]
 800edfa:	54c4      	strb	r4, [r0, r3]
 800edfc:	3301      	adds	r3, #1
 800edfe:	e7f9      	b.n	800edf4 <memmove+0x8>
 800ee00:	188b      	adds	r3, r1, r2
 800ee02:	4298      	cmp	r0, r3
 800ee04:	d2f5      	bcs.n	800edf2 <memmove+0x6>
 800ee06:	3a01      	subs	r2, #1
 800ee08:	d200      	bcs.n	800ee0c <memmove+0x20>
 800ee0a:	bd10      	pop	{r4, pc}
 800ee0c:	5c8b      	ldrb	r3, [r1, r2]
 800ee0e:	5483      	strb	r3, [r0, r2]
 800ee10:	e7f9      	b.n	800ee06 <memmove+0x1a>
	...

0800ee14 <_sbrk_r>:
 800ee14:	2300      	movs	r3, #0
 800ee16:	b570      	push	{r4, r5, r6, lr}
 800ee18:	4d06      	ldr	r5, [pc, #24]	@ (800ee34 <_sbrk_r+0x20>)
 800ee1a:	0004      	movs	r4, r0
 800ee1c:	0008      	movs	r0, r1
 800ee1e:	602b      	str	r3, [r5, #0]
 800ee20:	f7f6 fec8 	bl	8005bb4 <_sbrk>
 800ee24:	1c43      	adds	r3, r0, #1
 800ee26:	d103      	bne.n	800ee30 <_sbrk_r+0x1c>
 800ee28:	682b      	ldr	r3, [r5, #0]
 800ee2a:	2b00      	cmp	r3, #0
 800ee2c:	d000      	beq.n	800ee30 <_sbrk_r+0x1c>
 800ee2e:	6023      	str	r3, [r4, #0]
 800ee30:	bd70      	pop	{r4, r5, r6, pc}
 800ee32:	46c0      	nop			@ (mov r8, r8)
 800ee34:	20001158 	.word	0x20001158

0800ee38 <memcpy>:
 800ee38:	2300      	movs	r3, #0
 800ee3a:	b510      	push	{r4, lr}
 800ee3c:	429a      	cmp	r2, r3
 800ee3e:	d100      	bne.n	800ee42 <memcpy+0xa>
 800ee40:	bd10      	pop	{r4, pc}
 800ee42:	5ccc      	ldrb	r4, [r1, r3]
 800ee44:	54c4      	strb	r4, [r0, r3]
 800ee46:	3301      	adds	r3, #1
 800ee48:	e7f8      	b.n	800ee3c <memcpy+0x4>
	...

0800ee4c <__assert_func>:
 800ee4c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800ee4e:	0014      	movs	r4, r2
 800ee50:	001a      	movs	r2, r3
 800ee52:	4b09      	ldr	r3, [pc, #36]	@ (800ee78 <__assert_func+0x2c>)
 800ee54:	0005      	movs	r5, r0
 800ee56:	681b      	ldr	r3, [r3, #0]
 800ee58:	000e      	movs	r6, r1
 800ee5a:	68d8      	ldr	r0, [r3, #12]
 800ee5c:	4b07      	ldr	r3, [pc, #28]	@ (800ee7c <__assert_func+0x30>)
 800ee5e:	2c00      	cmp	r4, #0
 800ee60:	d101      	bne.n	800ee66 <__assert_func+0x1a>
 800ee62:	4b07      	ldr	r3, [pc, #28]	@ (800ee80 <__assert_func+0x34>)
 800ee64:	001c      	movs	r4, r3
 800ee66:	4907      	ldr	r1, [pc, #28]	@ (800ee84 <__assert_func+0x38>)
 800ee68:	9301      	str	r3, [sp, #4]
 800ee6a:	9402      	str	r4, [sp, #8]
 800ee6c:	002b      	movs	r3, r5
 800ee6e:	9600      	str	r6, [sp, #0]
 800ee70:	f000 f886 	bl	800ef80 <fiprintf>
 800ee74:	f000 f924 	bl	800f0c0 <abort>
 800ee78:	2000004c 	.word	0x2000004c
 800ee7c:	0800fe1b 	.word	0x0800fe1b
 800ee80:	0800fe56 	.word	0x0800fe56
 800ee84:	0800fe28 	.word	0x0800fe28

0800ee88 <_calloc_r>:
 800ee88:	b570      	push	{r4, r5, r6, lr}
 800ee8a:	0c0b      	lsrs	r3, r1, #16
 800ee8c:	0c15      	lsrs	r5, r2, #16
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	d11e      	bne.n	800eed0 <_calloc_r+0x48>
 800ee92:	2d00      	cmp	r5, #0
 800ee94:	d10c      	bne.n	800eeb0 <_calloc_r+0x28>
 800ee96:	b289      	uxth	r1, r1
 800ee98:	b294      	uxth	r4, r2
 800ee9a:	434c      	muls	r4, r1
 800ee9c:	0021      	movs	r1, r4
 800ee9e:	f7fe ff7d 	bl	800dd9c <_malloc_r>
 800eea2:	1e05      	subs	r5, r0, #0
 800eea4:	d01a      	beq.n	800eedc <_calloc_r+0x54>
 800eea6:	0022      	movs	r2, r4
 800eea8:	2100      	movs	r1, #0
 800eeaa:	f7fd ffd7 	bl	800ce5c <memset>
 800eeae:	e016      	b.n	800eede <_calloc_r+0x56>
 800eeb0:	1c2b      	adds	r3, r5, #0
 800eeb2:	1c0c      	adds	r4, r1, #0
 800eeb4:	b289      	uxth	r1, r1
 800eeb6:	b292      	uxth	r2, r2
 800eeb8:	434a      	muls	r2, r1
 800eeba:	b29b      	uxth	r3, r3
 800eebc:	b2a1      	uxth	r1, r4
 800eebe:	4359      	muls	r1, r3
 800eec0:	0c14      	lsrs	r4, r2, #16
 800eec2:	190c      	adds	r4, r1, r4
 800eec4:	0c23      	lsrs	r3, r4, #16
 800eec6:	d107      	bne.n	800eed8 <_calloc_r+0x50>
 800eec8:	0424      	lsls	r4, r4, #16
 800eeca:	b292      	uxth	r2, r2
 800eecc:	4314      	orrs	r4, r2
 800eece:	e7e5      	b.n	800ee9c <_calloc_r+0x14>
 800eed0:	2d00      	cmp	r5, #0
 800eed2:	d101      	bne.n	800eed8 <_calloc_r+0x50>
 800eed4:	1c14      	adds	r4, r2, #0
 800eed6:	e7ed      	b.n	800eeb4 <_calloc_r+0x2c>
 800eed8:	230c      	movs	r3, #12
 800eeda:	6003      	str	r3, [r0, #0]
 800eedc:	2500      	movs	r5, #0
 800eede:	0028      	movs	r0, r5
 800eee0:	bd70      	pop	{r4, r5, r6, pc}

0800eee2 <__ascii_mbtowc>:
 800eee2:	b082      	sub	sp, #8
 800eee4:	2900      	cmp	r1, #0
 800eee6:	d100      	bne.n	800eeea <__ascii_mbtowc+0x8>
 800eee8:	a901      	add	r1, sp, #4
 800eeea:	1e10      	subs	r0, r2, #0
 800eeec:	d006      	beq.n	800eefc <__ascii_mbtowc+0x1a>
 800eeee:	2b00      	cmp	r3, #0
 800eef0:	d006      	beq.n	800ef00 <__ascii_mbtowc+0x1e>
 800eef2:	7813      	ldrb	r3, [r2, #0]
 800eef4:	600b      	str	r3, [r1, #0]
 800eef6:	7810      	ldrb	r0, [r2, #0]
 800eef8:	1e43      	subs	r3, r0, #1
 800eefa:	4198      	sbcs	r0, r3
 800eefc:	b002      	add	sp, #8
 800eefe:	4770      	bx	lr
 800ef00:	2002      	movs	r0, #2
 800ef02:	4240      	negs	r0, r0
 800ef04:	e7fa      	b.n	800eefc <__ascii_mbtowc+0x1a>

0800ef06 <_realloc_r>:
 800ef06:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ef08:	0006      	movs	r6, r0
 800ef0a:	000c      	movs	r4, r1
 800ef0c:	0015      	movs	r5, r2
 800ef0e:	2900      	cmp	r1, #0
 800ef10:	d105      	bne.n	800ef1e <_realloc_r+0x18>
 800ef12:	0011      	movs	r1, r2
 800ef14:	f7fe ff42 	bl	800dd9c <_malloc_r>
 800ef18:	0004      	movs	r4, r0
 800ef1a:	0020      	movs	r0, r4
 800ef1c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ef1e:	2a00      	cmp	r2, #0
 800ef20:	d103      	bne.n	800ef2a <_realloc_r+0x24>
 800ef22:	f7fe fec5 	bl	800dcb0 <_free_r>
 800ef26:	2400      	movs	r4, #0
 800ef28:	e7f7      	b.n	800ef1a <_realloc_r+0x14>
 800ef2a:	f000 f8d0 	bl	800f0ce <_malloc_usable_size_r>
 800ef2e:	0007      	movs	r7, r0
 800ef30:	4285      	cmp	r5, r0
 800ef32:	d802      	bhi.n	800ef3a <_realloc_r+0x34>
 800ef34:	0843      	lsrs	r3, r0, #1
 800ef36:	42ab      	cmp	r3, r5
 800ef38:	d3ef      	bcc.n	800ef1a <_realloc_r+0x14>
 800ef3a:	0029      	movs	r1, r5
 800ef3c:	0030      	movs	r0, r6
 800ef3e:	f7fe ff2d 	bl	800dd9c <_malloc_r>
 800ef42:	9001      	str	r0, [sp, #4]
 800ef44:	2800      	cmp	r0, #0
 800ef46:	d0ee      	beq.n	800ef26 <_realloc_r+0x20>
 800ef48:	002a      	movs	r2, r5
 800ef4a:	42bd      	cmp	r5, r7
 800ef4c:	d900      	bls.n	800ef50 <_realloc_r+0x4a>
 800ef4e:	003a      	movs	r2, r7
 800ef50:	0021      	movs	r1, r4
 800ef52:	9801      	ldr	r0, [sp, #4]
 800ef54:	f7ff ff70 	bl	800ee38 <memcpy>
 800ef58:	0021      	movs	r1, r4
 800ef5a:	0030      	movs	r0, r6
 800ef5c:	f7fe fea8 	bl	800dcb0 <_free_r>
 800ef60:	9c01      	ldr	r4, [sp, #4]
 800ef62:	e7da      	b.n	800ef1a <_realloc_r+0x14>

0800ef64 <__ascii_wctomb>:
 800ef64:	0003      	movs	r3, r0
 800ef66:	1e08      	subs	r0, r1, #0
 800ef68:	d005      	beq.n	800ef76 <__ascii_wctomb+0x12>
 800ef6a:	2aff      	cmp	r2, #255	@ 0xff
 800ef6c:	d904      	bls.n	800ef78 <__ascii_wctomb+0x14>
 800ef6e:	228a      	movs	r2, #138	@ 0x8a
 800ef70:	2001      	movs	r0, #1
 800ef72:	601a      	str	r2, [r3, #0]
 800ef74:	4240      	negs	r0, r0
 800ef76:	4770      	bx	lr
 800ef78:	2001      	movs	r0, #1
 800ef7a:	700a      	strb	r2, [r1, #0]
 800ef7c:	e7fb      	b.n	800ef76 <__ascii_wctomb+0x12>
	...

0800ef80 <fiprintf>:
 800ef80:	b40e      	push	{r1, r2, r3}
 800ef82:	b517      	push	{r0, r1, r2, r4, lr}
 800ef84:	4c05      	ldr	r4, [pc, #20]	@ (800ef9c <fiprintf+0x1c>)
 800ef86:	ab05      	add	r3, sp, #20
 800ef88:	cb04      	ldmia	r3!, {r2}
 800ef8a:	0001      	movs	r1, r0
 800ef8c:	6820      	ldr	r0, [r4, #0]
 800ef8e:	9301      	str	r3, [sp, #4]
 800ef90:	f7ff fcbe 	bl	800e910 <_vfiprintf_r>
 800ef94:	bc1e      	pop	{r1, r2, r3, r4}
 800ef96:	bc08      	pop	{r3}
 800ef98:	b003      	add	sp, #12
 800ef9a:	4718      	bx	r3
 800ef9c:	2000004c 	.word	0x2000004c

0800efa0 <__swhatbuf_r>:
 800efa0:	b570      	push	{r4, r5, r6, lr}
 800efa2:	000e      	movs	r6, r1
 800efa4:	001d      	movs	r5, r3
 800efa6:	230e      	movs	r3, #14
 800efa8:	5ec9      	ldrsh	r1, [r1, r3]
 800efaa:	0014      	movs	r4, r2
 800efac:	b096      	sub	sp, #88	@ 0x58
 800efae:	2900      	cmp	r1, #0
 800efb0:	da0c      	bge.n	800efcc <__swhatbuf_r+0x2c>
 800efb2:	89b2      	ldrh	r2, [r6, #12]
 800efb4:	2380      	movs	r3, #128	@ 0x80
 800efb6:	0011      	movs	r1, r2
 800efb8:	4019      	ands	r1, r3
 800efba:	421a      	tst	r2, r3
 800efbc:	d114      	bne.n	800efe8 <__swhatbuf_r+0x48>
 800efbe:	2380      	movs	r3, #128	@ 0x80
 800efc0:	00db      	lsls	r3, r3, #3
 800efc2:	2000      	movs	r0, #0
 800efc4:	6029      	str	r1, [r5, #0]
 800efc6:	6023      	str	r3, [r4, #0]
 800efc8:	b016      	add	sp, #88	@ 0x58
 800efca:	bd70      	pop	{r4, r5, r6, pc}
 800efcc:	466a      	mov	r2, sp
 800efce:	f000 f853 	bl	800f078 <_fstat_r>
 800efd2:	2800      	cmp	r0, #0
 800efd4:	dbed      	blt.n	800efb2 <__swhatbuf_r+0x12>
 800efd6:	23f0      	movs	r3, #240	@ 0xf0
 800efd8:	9901      	ldr	r1, [sp, #4]
 800efda:	021b      	lsls	r3, r3, #8
 800efdc:	4019      	ands	r1, r3
 800efde:	4b04      	ldr	r3, [pc, #16]	@ (800eff0 <__swhatbuf_r+0x50>)
 800efe0:	18c9      	adds	r1, r1, r3
 800efe2:	424b      	negs	r3, r1
 800efe4:	4159      	adcs	r1, r3
 800efe6:	e7ea      	b.n	800efbe <__swhatbuf_r+0x1e>
 800efe8:	2100      	movs	r1, #0
 800efea:	2340      	movs	r3, #64	@ 0x40
 800efec:	e7e9      	b.n	800efc2 <__swhatbuf_r+0x22>
 800efee:	46c0      	nop			@ (mov r8, r8)
 800eff0:	ffffe000 	.word	0xffffe000

0800eff4 <__smakebuf_r>:
 800eff4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eff6:	2602      	movs	r6, #2
 800eff8:	898b      	ldrh	r3, [r1, #12]
 800effa:	0005      	movs	r5, r0
 800effc:	000c      	movs	r4, r1
 800effe:	b085      	sub	sp, #20
 800f000:	4233      	tst	r3, r6
 800f002:	d007      	beq.n	800f014 <__smakebuf_r+0x20>
 800f004:	0023      	movs	r3, r4
 800f006:	3347      	adds	r3, #71	@ 0x47
 800f008:	6023      	str	r3, [r4, #0]
 800f00a:	6123      	str	r3, [r4, #16]
 800f00c:	2301      	movs	r3, #1
 800f00e:	6163      	str	r3, [r4, #20]
 800f010:	b005      	add	sp, #20
 800f012:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f014:	ab03      	add	r3, sp, #12
 800f016:	aa02      	add	r2, sp, #8
 800f018:	f7ff ffc2 	bl	800efa0 <__swhatbuf_r>
 800f01c:	9f02      	ldr	r7, [sp, #8]
 800f01e:	9001      	str	r0, [sp, #4]
 800f020:	0039      	movs	r1, r7
 800f022:	0028      	movs	r0, r5
 800f024:	f7fe feba 	bl	800dd9c <_malloc_r>
 800f028:	2800      	cmp	r0, #0
 800f02a:	d108      	bne.n	800f03e <__smakebuf_r+0x4a>
 800f02c:	220c      	movs	r2, #12
 800f02e:	5ea3      	ldrsh	r3, [r4, r2]
 800f030:	059a      	lsls	r2, r3, #22
 800f032:	d4ed      	bmi.n	800f010 <__smakebuf_r+0x1c>
 800f034:	2203      	movs	r2, #3
 800f036:	4393      	bics	r3, r2
 800f038:	431e      	orrs	r6, r3
 800f03a:	81a6      	strh	r6, [r4, #12]
 800f03c:	e7e2      	b.n	800f004 <__smakebuf_r+0x10>
 800f03e:	2380      	movs	r3, #128	@ 0x80
 800f040:	89a2      	ldrh	r2, [r4, #12]
 800f042:	6020      	str	r0, [r4, #0]
 800f044:	4313      	orrs	r3, r2
 800f046:	81a3      	strh	r3, [r4, #12]
 800f048:	9b03      	ldr	r3, [sp, #12]
 800f04a:	6120      	str	r0, [r4, #16]
 800f04c:	6167      	str	r7, [r4, #20]
 800f04e:	2b00      	cmp	r3, #0
 800f050:	d00c      	beq.n	800f06c <__smakebuf_r+0x78>
 800f052:	0028      	movs	r0, r5
 800f054:	230e      	movs	r3, #14
 800f056:	5ee1      	ldrsh	r1, [r4, r3]
 800f058:	f000 f820 	bl	800f09c <_isatty_r>
 800f05c:	2800      	cmp	r0, #0
 800f05e:	d005      	beq.n	800f06c <__smakebuf_r+0x78>
 800f060:	2303      	movs	r3, #3
 800f062:	89a2      	ldrh	r2, [r4, #12]
 800f064:	439a      	bics	r2, r3
 800f066:	3b02      	subs	r3, #2
 800f068:	4313      	orrs	r3, r2
 800f06a:	81a3      	strh	r3, [r4, #12]
 800f06c:	89a3      	ldrh	r3, [r4, #12]
 800f06e:	9a01      	ldr	r2, [sp, #4]
 800f070:	4313      	orrs	r3, r2
 800f072:	81a3      	strh	r3, [r4, #12]
 800f074:	e7cc      	b.n	800f010 <__smakebuf_r+0x1c>
	...

0800f078 <_fstat_r>:
 800f078:	2300      	movs	r3, #0
 800f07a:	b570      	push	{r4, r5, r6, lr}
 800f07c:	4d06      	ldr	r5, [pc, #24]	@ (800f098 <_fstat_r+0x20>)
 800f07e:	0004      	movs	r4, r0
 800f080:	0008      	movs	r0, r1
 800f082:	0011      	movs	r1, r2
 800f084:	602b      	str	r3, [r5, #0]
 800f086:	f7f6 fd73 	bl	8005b70 <_fstat>
 800f08a:	1c43      	adds	r3, r0, #1
 800f08c:	d103      	bne.n	800f096 <_fstat_r+0x1e>
 800f08e:	682b      	ldr	r3, [r5, #0]
 800f090:	2b00      	cmp	r3, #0
 800f092:	d000      	beq.n	800f096 <_fstat_r+0x1e>
 800f094:	6023      	str	r3, [r4, #0]
 800f096:	bd70      	pop	{r4, r5, r6, pc}
 800f098:	20001158 	.word	0x20001158

0800f09c <_isatty_r>:
 800f09c:	2300      	movs	r3, #0
 800f09e:	b570      	push	{r4, r5, r6, lr}
 800f0a0:	4d06      	ldr	r5, [pc, #24]	@ (800f0bc <_isatty_r+0x20>)
 800f0a2:	0004      	movs	r4, r0
 800f0a4:	0008      	movs	r0, r1
 800f0a6:	602b      	str	r3, [r5, #0]
 800f0a8:	f7f6 fd70 	bl	8005b8c <_isatty>
 800f0ac:	1c43      	adds	r3, r0, #1
 800f0ae:	d103      	bne.n	800f0b8 <_isatty_r+0x1c>
 800f0b0:	682b      	ldr	r3, [r5, #0]
 800f0b2:	2b00      	cmp	r3, #0
 800f0b4:	d000      	beq.n	800f0b8 <_isatty_r+0x1c>
 800f0b6:	6023      	str	r3, [r4, #0]
 800f0b8:	bd70      	pop	{r4, r5, r6, pc}
 800f0ba:	46c0      	nop			@ (mov r8, r8)
 800f0bc:	20001158 	.word	0x20001158

0800f0c0 <abort>:
 800f0c0:	2006      	movs	r0, #6
 800f0c2:	b510      	push	{r4, lr}
 800f0c4:	f000 f834 	bl	800f130 <raise>
 800f0c8:	2001      	movs	r0, #1
 800f0ca:	f7f6 fd1d 	bl	8005b08 <_exit>

0800f0ce <_malloc_usable_size_r>:
 800f0ce:	1f0b      	subs	r3, r1, #4
 800f0d0:	681b      	ldr	r3, [r3, #0]
 800f0d2:	1f18      	subs	r0, r3, #4
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	da01      	bge.n	800f0dc <_malloc_usable_size_r+0xe>
 800f0d8:	580b      	ldr	r3, [r1, r0]
 800f0da:	18c0      	adds	r0, r0, r3
 800f0dc:	4770      	bx	lr

0800f0de <_raise_r>:
 800f0de:	b570      	push	{r4, r5, r6, lr}
 800f0e0:	0004      	movs	r4, r0
 800f0e2:	000d      	movs	r5, r1
 800f0e4:	291f      	cmp	r1, #31
 800f0e6:	d904      	bls.n	800f0f2 <_raise_r+0x14>
 800f0e8:	2316      	movs	r3, #22
 800f0ea:	6003      	str	r3, [r0, #0]
 800f0ec:	2001      	movs	r0, #1
 800f0ee:	4240      	negs	r0, r0
 800f0f0:	bd70      	pop	{r4, r5, r6, pc}
 800f0f2:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	d004      	beq.n	800f102 <_raise_r+0x24>
 800f0f8:	008a      	lsls	r2, r1, #2
 800f0fa:	189b      	adds	r3, r3, r2
 800f0fc:	681a      	ldr	r2, [r3, #0]
 800f0fe:	2a00      	cmp	r2, #0
 800f100:	d108      	bne.n	800f114 <_raise_r+0x36>
 800f102:	0020      	movs	r0, r4
 800f104:	f000 f830 	bl	800f168 <_getpid_r>
 800f108:	002a      	movs	r2, r5
 800f10a:	0001      	movs	r1, r0
 800f10c:	0020      	movs	r0, r4
 800f10e:	f000 f819 	bl	800f144 <_kill_r>
 800f112:	e7ed      	b.n	800f0f0 <_raise_r+0x12>
 800f114:	2a01      	cmp	r2, #1
 800f116:	d009      	beq.n	800f12c <_raise_r+0x4e>
 800f118:	1c51      	adds	r1, r2, #1
 800f11a:	d103      	bne.n	800f124 <_raise_r+0x46>
 800f11c:	2316      	movs	r3, #22
 800f11e:	6003      	str	r3, [r0, #0]
 800f120:	2001      	movs	r0, #1
 800f122:	e7e5      	b.n	800f0f0 <_raise_r+0x12>
 800f124:	2100      	movs	r1, #0
 800f126:	0028      	movs	r0, r5
 800f128:	6019      	str	r1, [r3, #0]
 800f12a:	4790      	blx	r2
 800f12c:	2000      	movs	r0, #0
 800f12e:	e7df      	b.n	800f0f0 <_raise_r+0x12>

0800f130 <raise>:
 800f130:	b510      	push	{r4, lr}
 800f132:	4b03      	ldr	r3, [pc, #12]	@ (800f140 <raise+0x10>)
 800f134:	0001      	movs	r1, r0
 800f136:	6818      	ldr	r0, [r3, #0]
 800f138:	f7ff ffd1 	bl	800f0de <_raise_r>
 800f13c:	bd10      	pop	{r4, pc}
 800f13e:	46c0      	nop			@ (mov r8, r8)
 800f140:	2000004c 	.word	0x2000004c

0800f144 <_kill_r>:
 800f144:	2300      	movs	r3, #0
 800f146:	b570      	push	{r4, r5, r6, lr}
 800f148:	4d06      	ldr	r5, [pc, #24]	@ (800f164 <_kill_r+0x20>)
 800f14a:	0004      	movs	r4, r0
 800f14c:	0008      	movs	r0, r1
 800f14e:	0011      	movs	r1, r2
 800f150:	602b      	str	r3, [r5, #0]
 800f152:	f7f6 fcc9 	bl	8005ae8 <_kill>
 800f156:	1c43      	adds	r3, r0, #1
 800f158:	d103      	bne.n	800f162 <_kill_r+0x1e>
 800f15a:	682b      	ldr	r3, [r5, #0]
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	d000      	beq.n	800f162 <_kill_r+0x1e>
 800f160:	6023      	str	r3, [r4, #0]
 800f162:	bd70      	pop	{r4, r5, r6, pc}
 800f164:	20001158 	.word	0x20001158

0800f168 <_getpid_r>:
 800f168:	b510      	push	{r4, lr}
 800f16a:	f7f6 fcb7 	bl	8005adc <_getpid>
 800f16e:	bd10      	pop	{r4, pc}

0800f170 <expf>:
 800f170:	b570      	push	{r4, r5, r6, lr}
 800f172:	1c04      	adds	r4, r0, #0
 800f174:	f000 f8c2 	bl	800f2fc <__ieee754_expf>
 800f178:	1c05      	adds	r5, r0, #0
 800f17a:	1c20      	adds	r0, r4, #0
 800f17c:	f000 f83c 	bl	800f1f8 <finitef>
 800f180:	2800      	cmp	r0, #0
 800f182:	d00b      	beq.n	800f19c <expf+0x2c>
 800f184:	490c      	ldr	r1, [pc, #48]	@ (800f1b8 <expf+0x48>)
 800f186:	1c20      	adds	r0, r4, #0
 800f188:	f7f1 f9b4 	bl	80004f4 <__aeabi_fcmpgt>
 800f18c:	2800      	cmp	r0, #0
 800f18e:	d007      	beq.n	800f1a0 <expf+0x30>
 800f190:	f7fd fed4 	bl	800cf3c <__errno>
 800f194:	25ff      	movs	r5, #255	@ 0xff
 800f196:	2322      	movs	r3, #34	@ 0x22
 800f198:	05ed      	lsls	r5, r5, #23
 800f19a:	6003      	str	r3, [r0, #0]
 800f19c:	1c28      	adds	r0, r5, #0
 800f19e:	bd70      	pop	{r4, r5, r6, pc}
 800f1a0:	4906      	ldr	r1, [pc, #24]	@ (800f1bc <expf+0x4c>)
 800f1a2:	1c20      	adds	r0, r4, #0
 800f1a4:	f7f1 f992 	bl	80004cc <__aeabi_fcmplt>
 800f1a8:	2800      	cmp	r0, #0
 800f1aa:	d0f7      	beq.n	800f19c <expf+0x2c>
 800f1ac:	f7fd fec6 	bl	800cf3c <__errno>
 800f1b0:	2322      	movs	r3, #34	@ 0x22
 800f1b2:	2500      	movs	r5, #0
 800f1b4:	6003      	str	r3, [r0, #0]
 800f1b6:	e7f1      	b.n	800f19c <expf+0x2c>
 800f1b8:	42b17217 	.word	0x42b17217
 800f1bc:	c2cff1b5 	.word	0xc2cff1b5

0800f1c0 <sqrtf>:
 800f1c0:	b570      	push	{r4, r5, r6, lr}
 800f1c2:	1c05      	adds	r5, r0, #0
 800f1c4:	f000 f822 	bl	800f20c <__ieee754_sqrtf>
 800f1c8:	1c29      	adds	r1, r5, #0
 800f1ca:	1c04      	adds	r4, r0, #0
 800f1cc:	1c28      	adds	r0, r5, #0
 800f1ce:	f7f2 f911 	bl	80013f4 <__aeabi_fcmpun>
 800f1d2:	2800      	cmp	r0, #0
 800f1d4:	d10e      	bne.n	800f1f4 <sqrtf+0x34>
 800f1d6:	2100      	movs	r1, #0
 800f1d8:	1c28      	adds	r0, r5, #0
 800f1da:	f7f1 f977 	bl	80004cc <__aeabi_fcmplt>
 800f1de:	2800      	cmp	r0, #0
 800f1e0:	d008      	beq.n	800f1f4 <sqrtf+0x34>
 800f1e2:	f7fd feab 	bl	800cf3c <__errno>
 800f1e6:	2321      	movs	r3, #33	@ 0x21
 800f1e8:	2100      	movs	r1, #0
 800f1ea:	6003      	str	r3, [r0, #0]
 800f1ec:	1c08      	adds	r0, r1, #0
 800f1ee:	f7f1 fc39 	bl	8000a64 <__aeabi_fdiv>
 800f1f2:	1c04      	adds	r4, r0, #0
 800f1f4:	1c20      	adds	r0, r4, #0
 800f1f6:	bd70      	pop	{r4, r5, r6, pc}

0800f1f8 <finitef>:
 800f1f8:	22ff      	movs	r2, #255	@ 0xff
 800f1fa:	0043      	lsls	r3, r0, #1
 800f1fc:	085b      	lsrs	r3, r3, #1
 800f1fe:	2001      	movs	r0, #1
 800f200:	05d2      	lsls	r2, r2, #23
 800f202:	4293      	cmp	r3, r2
 800f204:	db00      	blt.n	800f208 <finitef+0x10>
 800f206:	2000      	movs	r0, #0
 800f208:	4770      	bx	lr
	...

0800f20c <__ieee754_sqrtf>:
 800f20c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f20e:	0003      	movs	r3, r0
 800f210:	0042      	lsls	r2, r0, #1
 800f212:	1c04      	adds	r4, r0, #0
 800f214:	20ff      	movs	r0, #255	@ 0xff
 800f216:	0852      	lsrs	r2, r2, #1
 800f218:	05c0      	lsls	r0, r0, #23
 800f21a:	4282      	cmp	r2, r0
 800f21c:	d30a      	bcc.n	800f234 <__ieee754_sqrtf+0x28>
 800f21e:	1c21      	adds	r1, r4, #0
 800f220:	1c20      	adds	r0, r4, #0
 800f222:	f7f1 fe05 	bl	8000e30 <__aeabi_fmul>
 800f226:	1c01      	adds	r1, r0, #0
 800f228:	1c20      	adds	r0, r4, #0
 800f22a:	f7f1 fa91 	bl	8000750 <__aeabi_fadd>
 800f22e:	1c04      	adds	r4, r0, #0
 800f230:	1c20      	adds	r0, r4, #0
 800f232:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800f234:	2a00      	cmp	r2, #0
 800f236:	d0fb      	beq.n	800f230 <__ieee754_sqrtf+0x24>
 800f238:	2c00      	cmp	r4, #0
 800f23a:	da07      	bge.n	800f24c <__ieee754_sqrtf+0x40>
 800f23c:	1c21      	adds	r1, r4, #0
 800f23e:	1c20      	adds	r0, r4, #0
 800f240:	f7f1 ff34 	bl	80010ac <__aeabi_fsub>
 800f244:	1c01      	adds	r1, r0, #0
 800f246:	f7f1 fc0d 	bl	8000a64 <__aeabi_fdiv>
 800f24a:	e7f0      	b.n	800f22e <__ieee754_sqrtf+0x22>
 800f24c:	0022      	movs	r2, r4
 800f24e:	15e1      	asrs	r1, r4, #23
 800f250:	4002      	ands	r2, r0
 800f252:	4204      	tst	r4, r0
 800f254:	d046      	beq.n	800f2e4 <__ieee754_sqrtf+0xd8>
 800f256:	2280      	movs	r2, #128	@ 0x80
 800f258:	000f      	movs	r7, r1
 800f25a:	025b      	lsls	r3, r3, #9
 800f25c:	0a5b      	lsrs	r3, r3, #9
 800f25e:	0412      	lsls	r2, r2, #16
 800f260:	3f7f      	subs	r7, #127	@ 0x7f
 800f262:	4313      	orrs	r3, r2
 800f264:	07c9      	lsls	r1, r1, #31
 800f266:	d400      	bmi.n	800f26a <__ieee754_sqrtf+0x5e>
 800f268:	005b      	lsls	r3, r3, #1
 800f26a:	2400      	movs	r4, #0
 800f26c:	2180      	movs	r1, #128	@ 0x80
 800f26e:	2019      	movs	r0, #25
 800f270:	0026      	movs	r6, r4
 800f272:	107f      	asrs	r7, r7, #1
 800f274:	005b      	lsls	r3, r3, #1
 800f276:	0449      	lsls	r1, r1, #17
 800f278:	1875      	adds	r5, r6, r1
 800f27a:	001a      	movs	r2, r3
 800f27c:	429d      	cmp	r5, r3
 800f27e:	dc02      	bgt.n	800f286 <__ieee754_sqrtf+0x7a>
 800f280:	186e      	adds	r6, r5, r1
 800f282:	1b5a      	subs	r2, r3, r5
 800f284:	1864      	adds	r4, r4, r1
 800f286:	3801      	subs	r0, #1
 800f288:	0053      	lsls	r3, r2, #1
 800f28a:	0849      	lsrs	r1, r1, #1
 800f28c:	2800      	cmp	r0, #0
 800f28e:	d1f3      	bne.n	800f278 <__ieee754_sqrtf+0x6c>
 800f290:	2a00      	cmp	r2, #0
 800f292:	d019      	beq.n	800f2c8 <__ieee754_sqrtf+0xbc>
 800f294:	4d17      	ldr	r5, [pc, #92]	@ (800f2f4 <__ieee754_sqrtf+0xe8>)
 800f296:	4e18      	ldr	r6, [pc, #96]	@ (800f2f8 <__ieee754_sqrtf+0xec>)
 800f298:	6828      	ldr	r0, [r5, #0]
 800f29a:	6831      	ldr	r1, [r6, #0]
 800f29c:	682b      	ldr	r3, [r5, #0]
 800f29e:	9301      	str	r3, [sp, #4]
 800f2a0:	f7f1 ff04 	bl	80010ac <__aeabi_fsub>
 800f2a4:	1c01      	adds	r1, r0, #0
 800f2a6:	9801      	ldr	r0, [sp, #4]
 800f2a8:	f7f1 f91a 	bl	80004e0 <__aeabi_fcmple>
 800f2ac:	2800      	cmp	r0, #0
 800f2ae:	d00b      	beq.n	800f2c8 <__ieee754_sqrtf+0xbc>
 800f2b0:	6828      	ldr	r0, [r5, #0]
 800f2b2:	6831      	ldr	r1, [r6, #0]
 800f2b4:	f7f1 fa4c 	bl	8000750 <__aeabi_fadd>
 800f2b8:	682d      	ldr	r5, [r5, #0]
 800f2ba:	1c01      	adds	r1, r0, #0
 800f2bc:	1c28      	adds	r0, r5, #0
 800f2be:	f7f1 f905 	bl	80004cc <__aeabi_fcmplt>
 800f2c2:	2800      	cmp	r0, #0
 800f2c4:	d011      	beq.n	800f2ea <__ieee754_sqrtf+0xde>
 800f2c6:	3402      	adds	r4, #2
 800f2c8:	23fc      	movs	r3, #252	@ 0xfc
 800f2ca:	1064      	asrs	r4, r4, #1
 800f2cc:	059b      	lsls	r3, r3, #22
 800f2ce:	18e3      	adds	r3, r4, r3
 800f2d0:	05fc      	lsls	r4, r7, #23
 800f2d2:	18e4      	adds	r4, r4, r3
 800f2d4:	e7ac      	b.n	800f230 <__ieee754_sqrtf+0x24>
 800f2d6:	005b      	lsls	r3, r3, #1
 800f2d8:	3201      	adds	r2, #1
 800f2da:	4203      	tst	r3, r0
 800f2dc:	d0fb      	beq.n	800f2d6 <__ieee754_sqrtf+0xca>
 800f2de:	3a01      	subs	r2, #1
 800f2e0:	1a89      	subs	r1, r1, r2
 800f2e2:	e7b8      	b.n	800f256 <__ieee754_sqrtf+0x4a>
 800f2e4:	2080      	movs	r0, #128	@ 0x80
 800f2e6:	0400      	lsls	r0, r0, #16
 800f2e8:	e7f7      	b.n	800f2da <__ieee754_sqrtf+0xce>
 800f2ea:	2301      	movs	r3, #1
 800f2ec:	3401      	adds	r4, #1
 800f2ee:	439c      	bics	r4, r3
 800f2f0:	e7ea      	b.n	800f2c8 <__ieee754_sqrtf+0xbc>
 800f2f2:	46c0      	nop			@ (mov r8, r8)
 800f2f4:	2000020c 	.word	0x2000020c
 800f2f8:	20000208 	.word	0x20000208

0800f2fc <__ieee754_expf>:
 800f2fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f2fe:	21ff      	movs	r1, #255	@ 0xff
 800f300:	0043      	lsls	r3, r0, #1
 800f302:	1c04      	adds	r4, r0, #0
 800f304:	085b      	lsrs	r3, r3, #1
 800f306:	05c9      	lsls	r1, r1, #23
 800f308:	428b      	cmp	r3, r1
 800f30a:	d904      	bls.n	800f316 <__ieee754_expf+0x1a>
 800f30c:	1c01      	adds	r1, r0, #0
 800f30e:	1c20      	adds	r0, r4, #0
 800f310:	f7f1 fa1e 	bl	8000750 <__aeabi_fadd>
 800f314:	e00d      	b.n	800f332 <__ieee754_expf+0x36>
 800f316:	0fc6      	lsrs	r6, r0, #31
 800f318:	428b      	cmp	r3, r1
 800f31a:	d104      	bne.n	800f326 <__ieee754_expf+0x2a>
 800f31c:	2e00      	cmp	r6, #0
 800f31e:	d000      	beq.n	800f322 <__ieee754_expf+0x26>
 800f320:	e0ba      	b.n	800f498 <__ieee754_expf+0x19c>
 800f322:	1c20      	adds	r0, r4, #0
 800f324:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800f326:	495d      	ldr	r1, [pc, #372]	@ (800f49c <__ieee754_expf+0x1a0>)
 800f328:	4288      	cmp	r0, r1
 800f32a:	dd04      	ble.n	800f336 <__ieee754_expf+0x3a>
 800f32c:	2000      	movs	r0, #0
 800f32e:	f000 f8f1 	bl	800f514 <__math_oflowf>
 800f332:	1c04      	adds	r4, r0, #0
 800f334:	e7f5      	b.n	800f322 <__ieee754_expf+0x26>
 800f336:	2800      	cmp	r0, #0
 800f338:	da06      	bge.n	800f348 <__ieee754_expf+0x4c>
 800f33a:	4a59      	ldr	r2, [pc, #356]	@ (800f4a0 <__ieee754_expf+0x1a4>)
 800f33c:	4293      	cmp	r3, r2
 800f33e:	d903      	bls.n	800f348 <__ieee754_expf+0x4c>
 800f340:	2000      	movs	r0, #0
 800f342:	f000 f8e1 	bl	800f508 <__math_uflowf>
 800f346:	e7f4      	b.n	800f332 <__ieee754_expf+0x36>
 800f348:	4a56      	ldr	r2, [pc, #344]	@ (800f4a4 <__ieee754_expf+0x1a8>)
 800f34a:	4293      	cmp	r3, r2
 800f34c:	d96e      	bls.n	800f42c <__ieee754_expf+0x130>
 800f34e:	4a56      	ldr	r2, [pc, #344]	@ (800f4a8 <__ieee754_expf+0x1ac>)
 800f350:	00b5      	lsls	r5, r6, #2
 800f352:	4293      	cmp	r3, r2
 800f354:	d84e      	bhi.n	800f3f4 <__ieee754_expf+0xf8>
 800f356:	4b55      	ldr	r3, [pc, #340]	@ (800f4ac <__ieee754_expf+0x1b0>)
 800f358:	1c20      	adds	r0, r4, #0
 800f35a:	5959      	ldr	r1, [r3, r5]
 800f35c:	f7f1 fea6 	bl	80010ac <__aeabi_fsub>
 800f360:	4b53      	ldr	r3, [pc, #332]	@ (800f4b0 <__ieee754_expf+0x1b4>)
 800f362:	1c07      	adds	r7, r0, #0
 800f364:	595b      	ldr	r3, [r3, r5]
 800f366:	2501      	movs	r5, #1
 800f368:	1bad      	subs	r5, r5, r6
 800f36a:	9300      	str	r3, [sp, #0]
 800f36c:	1bad      	subs	r5, r5, r6
 800f36e:	9900      	ldr	r1, [sp, #0]
 800f370:	1c38      	adds	r0, r7, #0
 800f372:	f7f1 fe9b 	bl	80010ac <__aeabi_fsub>
 800f376:	1c04      	adds	r4, r0, #0
 800f378:	1c21      	adds	r1, r4, #0
 800f37a:	1c20      	adds	r0, r4, #0
 800f37c:	f7f1 fd58 	bl	8000e30 <__aeabi_fmul>
 800f380:	494c      	ldr	r1, [pc, #304]	@ (800f4b4 <__ieee754_expf+0x1b8>)
 800f382:	1c06      	adds	r6, r0, #0
 800f384:	f7f1 fd54 	bl	8000e30 <__aeabi_fmul>
 800f388:	494b      	ldr	r1, [pc, #300]	@ (800f4b8 <__ieee754_expf+0x1bc>)
 800f38a:	f7f1 fe8f 	bl	80010ac <__aeabi_fsub>
 800f38e:	1c31      	adds	r1, r6, #0
 800f390:	f7f1 fd4e 	bl	8000e30 <__aeabi_fmul>
 800f394:	4949      	ldr	r1, [pc, #292]	@ (800f4bc <__ieee754_expf+0x1c0>)
 800f396:	f7f1 f9db 	bl	8000750 <__aeabi_fadd>
 800f39a:	1c31      	adds	r1, r6, #0
 800f39c:	f7f1 fd48 	bl	8000e30 <__aeabi_fmul>
 800f3a0:	4947      	ldr	r1, [pc, #284]	@ (800f4c0 <__ieee754_expf+0x1c4>)
 800f3a2:	f7f1 fe83 	bl	80010ac <__aeabi_fsub>
 800f3a6:	1c31      	adds	r1, r6, #0
 800f3a8:	f7f1 fd42 	bl	8000e30 <__aeabi_fmul>
 800f3ac:	4945      	ldr	r1, [pc, #276]	@ (800f4c4 <__ieee754_expf+0x1c8>)
 800f3ae:	f7f1 f9cf 	bl	8000750 <__aeabi_fadd>
 800f3b2:	1c31      	adds	r1, r6, #0
 800f3b4:	f7f1 fd3c 	bl	8000e30 <__aeabi_fmul>
 800f3b8:	1c01      	adds	r1, r0, #0
 800f3ba:	1c20      	adds	r0, r4, #0
 800f3bc:	f7f1 fe76 	bl	80010ac <__aeabi_fsub>
 800f3c0:	1c01      	adds	r1, r0, #0
 800f3c2:	1c06      	adds	r6, r0, #0
 800f3c4:	1c20      	adds	r0, r4, #0
 800f3c6:	f7f1 fd33 	bl	8000e30 <__aeabi_fmul>
 800f3ca:	9001      	str	r0, [sp, #4]
 800f3cc:	2d00      	cmp	r5, #0
 800f3ce:	d140      	bne.n	800f452 <__ieee754_expf+0x156>
 800f3d0:	2180      	movs	r1, #128	@ 0x80
 800f3d2:	1c30      	adds	r0, r6, #0
 800f3d4:	05c9      	lsls	r1, r1, #23
 800f3d6:	f7f1 fe69 	bl	80010ac <__aeabi_fsub>
 800f3da:	1c01      	adds	r1, r0, #0
 800f3dc:	9801      	ldr	r0, [sp, #4]
 800f3de:	f7f1 fb41 	bl	8000a64 <__aeabi_fdiv>
 800f3e2:	1c21      	adds	r1, r4, #0
 800f3e4:	f7f1 fe62 	bl	80010ac <__aeabi_fsub>
 800f3e8:	1c01      	adds	r1, r0, #0
 800f3ea:	20fe      	movs	r0, #254	@ 0xfe
 800f3ec:	0580      	lsls	r0, r0, #22
 800f3ee:	f7f1 fe5d 	bl	80010ac <__aeabi_fsub>
 800f3f2:	e79e      	b.n	800f332 <__ieee754_expf+0x36>
 800f3f4:	4934      	ldr	r1, [pc, #208]	@ (800f4c8 <__ieee754_expf+0x1cc>)
 800f3f6:	1c20      	adds	r0, r4, #0
 800f3f8:	f7f1 fd1a 	bl	8000e30 <__aeabi_fmul>
 800f3fc:	4b33      	ldr	r3, [pc, #204]	@ (800f4cc <__ieee754_expf+0x1d0>)
 800f3fe:	5959      	ldr	r1, [r3, r5]
 800f400:	f7f1 f9a6 	bl	8000750 <__aeabi_fadd>
 800f404:	f7f2 f80c 	bl	8001420 <__aeabi_f2iz>
 800f408:	0005      	movs	r5, r0
 800f40a:	f7f2 f829 	bl	8001460 <__aeabi_i2f>
 800f40e:	4930      	ldr	r1, [pc, #192]	@ (800f4d0 <__ieee754_expf+0x1d4>)
 800f410:	1c06      	adds	r6, r0, #0
 800f412:	f7f1 fd0d 	bl	8000e30 <__aeabi_fmul>
 800f416:	1c01      	adds	r1, r0, #0
 800f418:	1c20      	adds	r0, r4, #0
 800f41a:	f7f1 fe47 	bl	80010ac <__aeabi_fsub>
 800f41e:	492d      	ldr	r1, [pc, #180]	@ (800f4d4 <__ieee754_expf+0x1d8>)
 800f420:	1c07      	adds	r7, r0, #0
 800f422:	1c30      	adds	r0, r6, #0
 800f424:	f7f1 fd04 	bl	8000e30 <__aeabi_fmul>
 800f428:	9000      	str	r0, [sp, #0]
 800f42a:	e7a0      	b.n	800f36e <__ieee754_expf+0x72>
 800f42c:	22d0      	movs	r2, #208	@ 0xd0
 800f42e:	0592      	lsls	r2, r2, #22
 800f430:	4293      	cmp	r3, r2
 800f432:	d20c      	bcs.n	800f44e <__ieee754_expf+0x152>
 800f434:	4928      	ldr	r1, [pc, #160]	@ (800f4d8 <__ieee754_expf+0x1dc>)
 800f436:	1c20      	adds	r0, r4, #0
 800f438:	f7f1 f98a 	bl	8000750 <__aeabi_fadd>
 800f43c:	21fe      	movs	r1, #254	@ 0xfe
 800f43e:	0589      	lsls	r1, r1, #22
 800f440:	f7f1 f858 	bl	80004f4 <__aeabi_fcmpgt>
 800f444:	1e05      	subs	r5, r0, #0
 800f446:	d097      	beq.n	800f378 <__ieee754_expf+0x7c>
 800f448:	21fe      	movs	r1, #254	@ 0xfe
 800f44a:	0589      	lsls	r1, r1, #22
 800f44c:	e75f      	b.n	800f30e <__ieee754_expf+0x12>
 800f44e:	2500      	movs	r5, #0
 800f450:	e792      	b.n	800f378 <__ieee754_expf+0x7c>
 800f452:	2080      	movs	r0, #128	@ 0x80
 800f454:	1c31      	adds	r1, r6, #0
 800f456:	05c0      	lsls	r0, r0, #23
 800f458:	f7f1 fe28 	bl	80010ac <__aeabi_fsub>
 800f45c:	1c01      	adds	r1, r0, #0
 800f45e:	9801      	ldr	r0, [sp, #4]
 800f460:	f7f1 fb00 	bl	8000a64 <__aeabi_fdiv>
 800f464:	1c01      	adds	r1, r0, #0
 800f466:	9800      	ldr	r0, [sp, #0]
 800f468:	f7f1 fe20 	bl	80010ac <__aeabi_fsub>
 800f46c:	1c39      	adds	r1, r7, #0
 800f46e:	f7f1 fe1d 	bl	80010ac <__aeabi_fsub>
 800f472:	1c01      	adds	r1, r0, #0
 800f474:	20fe      	movs	r0, #254	@ 0xfe
 800f476:	0580      	lsls	r0, r0, #22
 800f478:	f7f1 fe18 	bl	80010ac <__aeabi_fsub>
 800f47c:	002b      	movs	r3, r5
 800f47e:	337d      	adds	r3, #125	@ 0x7d
 800f480:	db02      	blt.n	800f488 <__ieee754_expf+0x18c>
 800f482:	05ec      	lsls	r4, r5, #23
 800f484:	1824      	adds	r4, r4, r0
 800f486:	e74c      	b.n	800f322 <__ieee754_expf+0x26>
 800f488:	21d8      	movs	r1, #216	@ 0xd8
 800f48a:	3564      	adds	r5, #100	@ 0x64
 800f48c:	05ed      	lsls	r5, r5, #23
 800f48e:	1828      	adds	r0, r5, r0
 800f490:	0509      	lsls	r1, r1, #20
 800f492:	f7f1 fccd 	bl	8000e30 <__aeabi_fmul>
 800f496:	e74c      	b.n	800f332 <__ieee754_expf+0x36>
 800f498:	2400      	movs	r4, #0
 800f49a:	e742      	b.n	800f322 <__ieee754_expf+0x26>
 800f49c:	42b17217 	.word	0x42b17217
 800f4a0:	42cff1b5 	.word	0x42cff1b5
 800f4a4:	3eb17218 	.word	0x3eb17218
 800f4a8:	3f851591 	.word	0x3f851591
 800f4ac:	0800ff60 	.word	0x0800ff60
 800f4b0:	0800ff58 	.word	0x0800ff58
 800f4b4:	3331bb4c 	.word	0x3331bb4c
 800f4b8:	35ddea0e 	.word	0x35ddea0e
 800f4bc:	388ab355 	.word	0x388ab355
 800f4c0:	3b360b61 	.word	0x3b360b61
 800f4c4:	3e2aaaab 	.word	0x3e2aaaab
 800f4c8:	3fb8aa3b 	.word	0x3fb8aa3b
 800f4cc:	0800ff68 	.word	0x0800ff68
 800f4d0:	3f317180 	.word	0x3f317180
 800f4d4:	3717f7d1 	.word	0x3717f7d1
 800f4d8:	7149f2ca 	.word	0x7149f2ca

0800f4dc <with_errnof>:
 800f4dc:	b570      	push	{r4, r5, r6, lr}
 800f4de:	000d      	movs	r5, r1
 800f4e0:	1c04      	adds	r4, r0, #0
 800f4e2:	f7fd fd2b 	bl	800cf3c <__errno>
 800f4e6:	6005      	str	r5, [r0, #0]
 800f4e8:	1c20      	adds	r0, r4, #0
 800f4ea:	bd70      	pop	{r4, r5, r6, pc}

0800f4ec <xflowf>:
 800f4ec:	b510      	push	{r4, lr}
 800f4ee:	1c0b      	adds	r3, r1, #0
 800f4f0:	2800      	cmp	r0, #0
 800f4f2:	d002      	beq.n	800f4fa <xflowf+0xe>
 800f4f4:	2380      	movs	r3, #128	@ 0x80
 800f4f6:	061b      	lsls	r3, r3, #24
 800f4f8:	18cb      	adds	r3, r1, r3
 800f4fa:	1c18      	adds	r0, r3, #0
 800f4fc:	f7f1 fc98 	bl	8000e30 <__aeabi_fmul>
 800f500:	2122      	movs	r1, #34	@ 0x22
 800f502:	f7ff ffeb 	bl	800f4dc <with_errnof>
 800f506:	bd10      	pop	{r4, pc}

0800f508 <__math_uflowf>:
 800f508:	2180      	movs	r1, #128	@ 0x80
 800f50a:	b510      	push	{r4, lr}
 800f50c:	0549      	lsls	r1, r1, #21
 800f50e:	f7ff ffed 	bl	800f4ec <xflowf>
 800f512:	bd10      	pop	{r4, pc}

0800f514 <__math_oflowf>:
 800f514:	21e0      	movs	r1, #224	@ 0xe0
 800f516:	b510      	push	{r4, lr}
 800f518:	05c9      	lsls	r1, r1, #23
 800f51a:	f7ff ffe7 	bl	800f4ec <xflowf>
 800f51e:	bd10      	pop	{r4, pc}

0800f520 <_init>:
 800f520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f522:	46c0      	nop			@ (mov r8, r8)
 800f524:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f526:	bc08      	pop	{r3}
 800f528:	469e      	mov	lr, r3
 800f52a:	4770      	bx	lr

0800f52c <_fini>:
 800f52c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f52e:	46c0      	nop			@ (mov r8, r8)
 800f530:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f532:	bc08      	pop	{r3}
 800f534:	469e      	mov	lr, r3
 800f536:	4770      	bx	lr
