
MJSGadget.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001ab98  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001220  0801ac58  0801ac58  0001bc58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801be78  0801be78  0001d410  2**0
                  CONTENTS
  4 .ARM          00000008  0801be78  0801be78  0001ce78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801be80  0801be80  0001d410  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801be80  0801be80  0001ce80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801be84  0801be84  0001ce84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000410  20000000  0801be88  0001d000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003b14  20000410  0801c298  0001d410  2**2
                  ALLOC
 10 ._user_heap_stack 00000504  20003f24  0801c298  0001df24  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0001d410  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002b856  00000000  00000000  0001d438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000802e  00000000  00000000  00048c8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000024a8  00000000  00000000  00050cc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001bde  00000000  00000000  00053168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020bd1  00000000  00000000  00054d46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00039c1b  00000000  00000000  00075917  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d3f0  00000000  00000000  000af532  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014c922  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009738  00000000  00000000  0014c968  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  001560a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000410 	.word	0x20000410
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0801ac40 	.word	0x0801ac40

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000414 	.word	0x20000414
 8000104:	0801ac40 	.word	0x0801ac40

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			@ (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	@ 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			@ (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	@ 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	@ 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			@ (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			@ (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f002 f809 	bl	8002454 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 ff49 	bl	80022e4 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fffb 	bl	8002454 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fff1 	bl	8002454 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 ff73 	bl	800236c <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			@ (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 ff69 	bl	800236c <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			@ (mov r8, r8)

080004a8 <__aeabi_cfrcmple>:
 80004a8:	4684      	mov	ip, r0
 80004aa:	0008      	movs	r0, r1
 80004ac:	4661      	mov	r1, ip
 80004ae:	e7ff      	b.n	80004b0 <__aeabi_cfcmpeq>

080004b0 <__aeabi_cfcmpeq>:
 80004b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004b2:	f000 fca5 	bl	8000e00 <__lesf2>
 80004b6:	2800      	cmp	r0, #0
 80004b8:	d401      	bmi.n	80004be <__aeabi_cfcmpeq+0xe>
 80004ba:	2100      	movs	r1, #0
 80004bc:	42c8      	cmn	r0, r1
 80004be:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004c0 <__aeabi_fcmpeq>:
 80004c0:	b510      	push	{r4, lr}
 80004c2:	f000 fc25 	bl	8000d10 <__eqsf2>
 80004c6:	4240      	negs	r0, r0
 80004c8:	3001      	adds	r0, #1
 80004ca:	bd10      	pop	{r4, pc}

080004cc <__aeabi_fcmplt>:
 80004cc:	b510      	push	{r4, lr}
 80004ce:	f000 fc97 	bl	8000e00 <__lesf2>
 80004d2:	2800      	cmp	r0, #0
 80004d4:	db01      	blt.n	80004da <__aeabi_fcmplt+0xe>
 80004d6:	2000      	movs	r0, #0
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	2001      	movs	r0, #1
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	46c0      	nop			@ (mov r8, r8)

080004e0 <__aeabi_fcmple>:
 80004e0:	b510      	push	{r4, lr}
 80004e2:	f000 fc8d 	bl	8000e00 <__lesf2>
 80004e6:	2800      	cmp	r0, #0
 80004e8:	dd01      	ble.n	80004ee <__aeabi_fcmple+0xe>
 80004ea:	2000      	movs	r0, #0
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	2001      	movs	r0, #1
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	46c0      	nop			@ (mov r8, r8)

080004f4 <__aeabi_fcmpgt>:
 80004f4:	b510      	push	{r4, lr}
 80004f6:	f000 fc33 	bl	8000d60 <__gesf2>
 80004fa:	2800      	cmp	r0, #0
 80004fc:	dc01      	bgt.n	8000502 <__aeabi_fcmpgt+0xe>
 80004fe:	2000      	movs	r0, #0
 8000500:	bd10      	pop	{r4, pc}
 8000502:	2001      	movs	r0, #1
 8000504:	bd10      	pop	{r4, pc}
 8000506:	46c0      	nop			@ (mov r8, r8)

08000508 <__aeabi_fcmpge>:
 8000508:	b510      	push	{r4, lr}
 800050a:	f000 fc29 	bl	8000d60 <__gesf2>
 800050e:	2800      	cmp	r0, #0
 8000510:	da01      	bge.n	8000516 <__aeabi_fcmpge+0xe>
 8000512:	2000      	movs	r0, #0
 8000514:	bd10      	pop	{r4, pc}
 8000516:	2001      	movs	r0, #1
 8000518:	bd10      	pop	{r4, pc}
 800051a:	46c0      	nop			@ (mov r8, r8)

0800051c <__aeabi_uldivmod>:
 800051c:	2b00      	cmp	r3, #0
 800051e:	d111      	bne.n	8000544 <__aeabi_uldivmod+0x28>
 8000520:	2a00      	cmp	r2, #0
 8000522:	d10f      	bne.n	8000544 <__aeabi_uldivmod+0x28>
 8000524:	2900      	cmp	r1, #0
 8000526:	d100      	bne.n	800052a <__aeabi_uldivmod+0xe>
 8000528:	2800      	cmp	r0, #0
 800052a:	d002      	beq.n	8000532 <__aeabi_uldivmod+0x16>
 800052c:	2100      	movs	r1, #0
 800052e:	43c9      	mvns	r1, r1
 8000530:	0008      	movs	r0, r1
 8000532:	b407      	push	{r0, r1, r2}
 8000534:	4802      	ldr	r0, [pc, #8]	@ (8000540 <__aeabi_uldivmod+0x24>)
 8000536:	a102      	add	r1, pc, #8	@ (adr r1, 8000540 <__aeabi_uldivmod+0x24>)
 8000538:	1840      	adds	r0, r0, r1
 800053a:	9002      	str	r0, [sp, #8]
 800053c:	bd03      	pop	{r0, r1, pc}
 800053e:	46c0      	nop			@ (mov r8, r8)
 8000540:	fffffee9 	.word	0xfffffee9
 8000544:	b403      	push	{r0, r1}
 8000546:	4668      	mov	r0, sp
 8000548:	b501      	push	{r0, lr}
 800054a:	9802      	ldr	r0, [sp, #8]
 800054c:	f000 f86a 	bl	8000624 <__udivmoddi4>
 8000550:	9b01      	ldr	r3, [sp, #4]
 8000552:	469e      	mov	lr, r3
 8000554:	b002      	add	sp, #8
 8000556:	bc0c      	pop	{r2, r3}
 8000558:	4770      	bx	lr
 800055a:	46c0      	nop			@ (mov r8, r8)

0800055c <__aeabi_lmul>:
 800055c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800055e:	46ce      	mov	lr, r9
 8000560:	4699      	mov	r9, r3
 8000562:	0c03      	lsrs	r3, r0, #16
 8000564:	469c      	mov	ip, r3
 8000566:	0413      	lsls	r3, r2, #16
 8000568:	4647      	mov	r7, r8
 800056a:	0c1b      	lsrs	r3, r3, #16
 800056c:	001d      	movs	r5, r3
 800056e:	000e      	movs	r6, r1
 8000570:	4661      	mov	r1, ip
 8000572:	0404      	lsls	r4, r0, #16
 8000574:	0c24      	lsrs	r4, r4, #16
 8000576:	b580      	push	{r7, lr}
 8000578:	0007      	movs	r7, r0
 800057a:	0c10      	lsrs	r0, r2, #16
 800057c:	434b      	muls	r3, r1
 800057e:	4365      	muls	r5, r4
 8000580:	4341      	muls	r1, r0
 8000582:	4360      	muls	r0, r4
 8000584:	0c2c      	lsrs	r4, r5, #16
 8000586:	18c0      	adds	r0, r0, r3
 8000588:	1824      	adds	r4, r4, r0
 800058a:	468c      	mov	ip, r1
 800058c:	42a3      	cmp	r3, r4
 800058e:	d903      	bls.n	8000598 <__aeabi_lmul+0x3c>
 8000590:	2380      	movs	r3, #128	@ 0x80
 8000592:	025b      	lsls	r3, r3, #9
 8000594:	4698      	mov	r8, r3
 8000596:	44c4      	add	ip, r8
 8000598:	4649      	mov	r1, r9
 800059a:	4379      	muls	r1, r7
 800059c:	4356      	muls	r6, r2
 800059e:	0c23      	lsrs	r3, r4, #16
 80005a0:	042d      	lsls	r5, r5, #16
 80005a2:	0c2d      	lsrs	r5, r5, #16
 80005a4:	1989      	adds	r1, r1, r6
 80005a6:	4463      	add	r3, ip
 80005a8:	0424      	lsls	r4, r4, #16
 80005aa:	1960      	adds	r0, r4, r5
 80005ac:	18c9      	adds	r1, r1, r3
 80005ae:	bcc0      	pop	{r6, r7}
 80005b0:	46b9      	mov	r9, r7
 80005b2:	46b0      	mov	r8, r6
 80005b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005b6:	46c0      	nop			@ (mov r8, r8)

080005b8 <__aeabi_f2uiz>:
 80005b8:	219e      	movs	r1, #158	@ 0x9e
 80005ba:	b510      	push	{r4, lr}
 80005bc:	05c9      	lsls	r1, r1, #23
 80005be:	1c04      	adds	r4, r0, #0
 80005c0:	f7ff ffa2 	bl	8000508 <__aeabi_fcmpge>
 80005c4:	2800      	cmp	r0, #0
 80005c6:	d103      	bne.n	80005d0 <__aeabi_f2uiz+0x18>
 80005c8:	1c20      	adds	r0, r4, #0
 80005ca:	f000 ff5f 	bl	800148c <__aeabi_f2iz>
 80005ce:	bd10      	pop	{r4, pc}
 80005d0:	219e      	movs	r1, #158	@ 0x9e
 80005d2:	1c20      	adds	r0, r4, #0
 80005d4:	05c9      	lsls	r1, r1, #23
 80005d6:	f000 fd9f 	bl	8001118 <__aeabi_fsub>
 80005da:	f000 ff57 	bl	800148c <__aeabi_f2iz>
 80005de:	2380      	movs	r3, #128	@ 0x80
 80005e0:	061b      	lsls	r3, r3, #24
 80005e2:	469c      	mov	ip, r3
 80005e4:	4460      	add	r0, ip
 80005e6:	e7f2      	b.n	80005ce <__aeabi_f2uiz+0x16>

080005e8 <__aeabi_d2uiz>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	2200      	movs	r2, #0
 80005ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000620 <__aeabi_d2uiz+0x38>)
 80005ee:	0004      	movs	r4, r0
 80005f0:	000d      	movs	r5, r1
 80005f2:	f7ff ff4f 	bl	8000494 <__aeabi_dcmpge>
 80005f6:	2800      	cmp	r0, #0
 80005f8:	d104      	bne.n	8000604 <__aeabi_d2uiz+0x1c>
 80005fa:	0020      	movs	r0, r4
 80005fc:	0029      	movs	r1, r5
 80005fe:	f002 fe21 	bl	8003244 <__aeabi_d2iz>
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	4b06      	ldr	r3, [pc, #24]	@ (8000620 <__aeabi_d2uiz+0x38>)
 8000606:	2200      	movs	r2, #0
 8000608:	0020      	movs	r0, r4
 800060a:	0029      	movs	r1, r5
 800060c:	f002 fa5c 	bl	8002ac8 <__aeabi_dsub>
 8000610:	f002 fe18 	bl	8003244 <__aeabi_d2iz>
 8000614:	2380      	movs	r3, #128	@ 0x80
 8000616:	061b      	lsls	r3, r3, #24
 8000618:	469c      	mov	ip, r3
 800061a:	4460      	add	r0, ip
 800061c:	e7f1      	b.n	8000602 <__aeabi_d2uiz+0x1a>
 800061e:	46c0      	nop			@ (mov r8, r8)
 8000620:	41e00000 	.word	0x41e00000

08000624 <__udivmoddi4>:
 8000624:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000626:	4657      	mov	r7, sl
 8000628:	464e      	mov	r6, r9
 800062a:	4645      	mov	r5, r8
 800062c:	46de      	mov	lr, fp
 800062e:	b5e0      	push	{r5, r6, r7, lr}
 8000630:	0004      	movs	r4, r0
 8000632:	000d      	movs	r5, r1
 8000634:	4692      	mov	sl, r2
 8000636:	4699      	mov	r9, r3
 8000638:	b083      	sub	sp, #12
 800063a:	428b      	cmp	r3, r1
 800063c:	d830      	bhi.n	80006a0 <__udivmoddi4+0x7c>
 800063e:	d02d      	beq.n	800069c <__udivmoddi4+0x78>
 8000640:	4649      	mov	r1, r9
 8000642:	4650      	mov	r0, sl
 8000644:	f002 ff76 	bl	8003534 <__clzdi2>
 8000648:	0029      	movs	r1, r5
 800064a:	0006      	movs	r6, r0
 800064c:	0020      	movs	r0, r4
 800064e:	f002 ff71 	bl	8003534 <__clzdi2>
 8000652:	1a33      	subs	r3, r6, r0
 8000654:	4698      	mov	r8, r3
 8000656:	3b20      	subs	r3, #32
 8000658:	d434      	bmi.n	80006c4 <__udivmoddi4+0xa0>
 800065a:	469b      	mov	fp, r3
 800065c:	4653      	mov	r3, sl
 800065e:	465a      	mov	r2, fp
 8000660:	4093      	lsls	r3, r2
 8000662:	4642      	mov	r2, r8
 8000664:	001f      	movs	r7, r3
 8000666:	4653      	mov	r3, sl
 8000668:	4093      	lsls	r3, r2
 800066a:	001e      	movs	r6, r3
 800066c:	42af      	cmp	r7, r5
 800066e:	d83b      	bhi.n	80006e8 <__udivmoddi4+0xc4>
 8000670:	42af      	cmp	r7, r5
 8000672:	d100      	bne.n	8000676 <__udivmoddi4+0x52>
 8000674:	e079      	b.n	800076a <__udivmoddi4+0x146>
 8000676:	465b      	mov	r3, fp
 8000678:	1ba4      	subs	r4, r4, r6
 800067a:	41bd      	sbcs	r5, r7
 800067c:	2b00      	cmp	r3, #0
 800067e:	da00      	bge.n	8000682 <__udivmoddi4+0x5e>
 8000680:	e076      	b.n	8000770 <__udivmoddi4+0x14c>
 8000682:	2200      	movs	r2, #0
 8000684:	2300      	movs	r3, #0
 8000686:	9200      	str	r2, [sp, #0]
 8000688:	9301      	str	r3, [sp, #4]
 800068a:	2301      	movs	r3, #1
 800068c:	465a      	mov	r2, fp
 800068e:	4093      	lsls	r3, r2
 8000690:	9301      	str	r3, [sp, #4]
 8000692:	2301      	movs	r3, #1
 8000694:	4642      	mov	r2, r8
 8000696:	4093      	lsls	r3, r2
 8000698:	9300      	str	r3, [sp, #0]
 800069a:	e029      	b.n	80006f0 <__udivmoddi4+0xcc>
 800069c:	4282      	cmp	r2, r0
 800069e:	d9cf      	bls.n	8000640 <__udivmoddi4+0x1c>
 80006a0:	2200      	movs	r2, #0
 80006a2:	2300      	movs	r3, #0
 80006a4:	9200      	str	r2, [sp, #0]
 80006a6:	9301      	str	r3, [sp, #4]
 80006a8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <__udivmoddi4+0x8e>
 80006ae:	601c      	str	r4, [r3, #0]
 80006b0:	605d      	str	r5, [r3, #4]
 80006b2:	9800      	ldr	r0, [sp, #0]
 80006b4:	9901      	ldr	r1, [sp, #4]
 80006b6:	b003      	add	sp, #12
 80006b8:	bcf0      	pop	{r4, r5, r6, r7}
 80006ba:	46bb      	mov	fp, r7
 80006bc:	46b2      	mov	sl, r6
 80006be:	46a9      	mov	r9, r5
 80006c0:	46a0      	mov	r8, r4
 80006c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006c4:	4642      	mov	r2, r8
 80006c6:	469b      	mov	fp, r3
 80006c8:	2320      	movs	r3, #32
 80006ca:	1a9b      	subs	r3, r3, r2
 80006cc:	4652      	mov	r2, sl
 80006ce:	40da      	lsrs	r2, r3
 80006d0:	4641      	mov	r1, r8
 80006d2:	0013      	movs	r3, r2
 80006d4:	464a      	mov	r2, r9
 80006d6:	408a      	lsls	r2, r1
 80006d8:	0017      	movs	r7, r2
 80006da:	4642      	mov	r2, r8
 80006dc:	431f      	orrs	r7, r3
 80006de:	4653      	mov	r3, sl
 80006e0:	4093      	lsls	r3, r2
 80006e2:	001e      	movs	r6, r3
 80006e4:	42af      	cmp	r7, r5
 80006e6:	d9c3      	bls.n	8000670 <__udivmoddi4+0x4c>
 80006e8:	2200      	movs	r2, #0
 80006ea:	2300      	movs	r3, #0
 80006ec:	9200      	str	r2, [sp, #0]
 80006ee:	9301      	str	r3, [sp, #4]
 80006f0:	4643      	mov	r3, r8
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d0d8      	beq.n	80006a8 <__udivmoddi4+0x84>
 80006f6:	07fb      	lsls	r3, r7, #31
 80006f8:	0872      	lsrs	r2, r6, #1
 80006fa:	431a      	orrs	r2, r3
 80006fc:	4646      	mov	r6, r8
 80006fe:	087b      	lsrs	r3, r7, #1
 8000700:	e00e      	b.n	8000720 <__udivmoddi4+0xfc>
 8000702:	42ab      	cmp	r3, r5
 8000704:	d101      	bne.n	800070a <__udivmoddi4+0xe6>
 8000706:	42a2      	cmp	r2, r4
 8000708:	d80c      	bhi.n	8000724 <__udivmoddi4+0x100>
 800070a:	1aa4      	subs	r4, r4, r2
 800070c:	419d      	sbcs	r5, r3
 800070e:	2001      	movs	r0, #1
 8000710:	1924      	adds	r4, r4, r4
 8000712:	416d      	adcs	r5, r5
 8000714:	2100      	movs	r1, #0
 8000716:	3e01      	subs	r6, #1
 8000718:	1824      	adds	r4, r4, r0
 800071a:	414d      	adcs	r5, r1
 800071c:	2e00      	cmp	r6, #0
 800071e:	d006      	beq.n	800072e <__udivmoddi4+0x10a>
 8000720:	42ab      	cmp	r3, r5
 8000722:	d9ee      	bls.n	8000702 <__udivmoddi4+0xde>
 8000724:	3e01      	subs	r6, #1
 8000726:	1924      	adds	r4, r4, r4
 8000728:	416d      	adcs	r5, r5
 800072a:	2e00      	cmp	r6, #0
 800072c:	d1f8      	bne.n	8000720 <__udivmoddi4+0xfc>
 800072e:	9800      	ldr	r0, [sp, #0]
 8000730:	9901      	ldr	r1, [sp, #4]
 8000732:	465b      	mov	r3, fp
 8000734:	1900      	adds	r0, r0, r4
 8000736:	4169      	adcs	r1, r5
 8000738:	2b00      	cmp	r3, #0
 800073a:	db24      	blt.n	8000786 <__udivmoddi4+0x162>
 800073c:	002b      	movs	r3, r5
 800073e:	465a      	mov	r2, fp
 8000740:	4644      	mov	r4, r8
 8000742:	40d3      	lsrs	r3, r2
 8000744:	002a      	movs	r2, r5
 8000746:	40e2      	lsrs	r2, r4
 8000748:	001c      	movs	r4, r3
 800074a:	465b      	mov	r3, fp
 800074c:	0015      	movs	r5, r2
 800074e:	2b00      	cmp	r3, #0
 8000750:	db2a      	blt.n	80007a8 <__udivmoddi4+0x184>
 8000752:	0026      	movs	r6, r4
 8000754:	409e      	lsls	r6, r3
 8000756:	0033      	movs	r3, r6
 8000758:	0026      	movs	r6, r4
 800075a:	4647      	mov	r7, r8
 800075c:	40be      	lsls	r6, r7
 800075e:	0032      	movs	r2, r6
 8000760:	1a80      	subs	r0, r0, r2
 8000762:	4199      	sbcs	r1, r3
 8000764:	9000      	str	r0, [sp, #0]
 8000766:	9101      	str	r1, [sp, #4]
 8000768:	e79e      	b.n	80006a8 <__udivmoddi4+0x84>
 800076a:	42a3      	cmp	r3, r4
 800076c:	d8bc      	bhi.n	80006e8 <__udivmoddi4+0xc4>
 800076e:	e782      	b.n	8000676 <__udivmoddi4+0x52>
 8000770:	4642      	mov	r2, r8
 8000772:	2320      	movs	r3, #32
 8000774:	2100      	movs	r1, #0
 8000776:	1a9b      	subs	r3, r3, r2
 8000778:	2200      	movs	r2, #0
 800077a:	9100      	str	r1, [sp, #0]
 800077c:	9201      	str	r2, [sp, #4]
 800077e:	2201      	movs	r2, #1
 8000780:	40da      	lsrs	r2, r3
 8000782:	9201      	str	r2, [sp, #4]
 8000784:	e785      	b.n	8000692 <__udivmoddi4+0x6e>
 8000786:	4642      	mov	r2, r8
 8000788:	2320      	movs	r3, #32
 800078a:	1a9b      	subs	r3, r3, r2
 800078c:	002a      	movs	r2, r5
 800078e:	4646      	mov	r6, r8
 8000790:	409a      	lsls	r2, r3
 8000792:	0023      	movs	r3, r4
 8000794:	40f3      	lsrs	r3, r6
 8000796:	4644      	mov	r4, r8
 8000798:	4313      	orrs	r3, r2
 800079a:	002a      	movs	r2, r5
 800079c:	40e2      	lsrs	r2, r4
 800079e:	001c      	movs	r4, r3
 80007a0:	465b      	mov	r3, fp
 80007a2:	0015      	movs	r5, r2
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	dad4      	bge.n	8000752 <__udivmoddi4+0x12e>
 80007a8:	4642      	mov	r2, r8
 80007aa:	002f      	movs	r7, r5
 80007ac:	2320      	movs	r3, #32
 80007ae:	0026      	movs	r6, r4
 80007b0:	4097      	lsls	r7, r2
 80007b2:	1a9b      	subs	r3, r3, r2
 80007b4:	40de      	lsrs	r6, r3
 80007b6:	003b      	movs	r3, r7
 80007b8:	4333      	orrs	r3, r6
 80007ba:	e7cd      	b.n	8000758 <__udivmoddi4+0x134>

080007bc <__aeabi_fadd>:
 80007bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007be:	46ce      	mov	lr, r9
 80007c0:	4647      	mov	r7, r8
 80007c2:	0243      	lsls	r3, r0, #9
 80007c4:	0a5a      	lsrs	r2, r3, #9
 80007c6:	024e      	lsls	r6, r1, #9
 80007c8:	0045      	lsls	r5, r0, #1
 80007ca:	0fc4      	lsrs	r4, r0, #31
 80007cc:	0048      	lsls	r0, r1, #1
 80007ce:	4691      	mov	r9, r2
 80007d0:	0e2d      	lsrs	r5, r5, #24
 80007d2:	0a72      	lsrs	r2, r6, #9
 80007d4:	0e00      	lsrs	r0, r0, #24
 80007d6:	4694      	mov	ip, r2
 80007d8:	b580      	push	{r7, lr}
 80007da:	099b      	lsrs	r3, r3, #6
 80007dc:	0fc9      	lsrs	r1, r1, #31
 80007de:	09b6      	lsrs	r6, r6, #6
 80007e0:	1a2a      	subs	r2, r5, r0
 80007e2:	428c      	cmp	r4, r1
 80007e4:	d021      	beq.n	800082a <__aeabi_fadd+0x6e>
 80007e6:	2a00      	cmp	r2, #0
 80007e8:	dd0d      	ble.n	8000806 <__aeabi_fadd+0x4a>
 80007ea:	2800      	cmp	r0, #0
 80007ec:	d12d      	bne.n	800084a <__aeabi_fadd+0x8e>
 80007ee:	2e00      	cmp	r6, #0
 80007f0:	d100      	bne.n	80007f4 <__aeabi_fadd+0x38>
 80007f2:	e08d      	b.n	8000910 <__aeabi_fadd+0x154>
 80007f4:	1e51      	subs	r1, r2, #1
 80007f6:	2a01      	cmp	r2, #1
 80007f8:	d100      	bne.n	80007fc <__aeabi_fadd+0x40>
 80007fa:	e11d      	b.n	8000a38 <__aeabi_fadd+0x27c>
 80007fc:	2aff      	cmp	r2, #255	@ 0xff
 80007fe:	d100      	bne.n	8000802 <__aeabi_fadd+0x46>
 8000800:	e0ab      	b.n	800095a <__aeabi_fadd+0x19e>
 8000802:	000a      	movs	r2, r1
 8000804:	e027      	b.n	8000856 <__aeabi_fadd+0x9a>
 8000806:	2a00      	cmp	r2, #0
 8000808:	d04d      	beq.n	80008a6 <__aeabi_fadd+0xea>
 800080a:	1b42      	subs	r2, r0, r5
 800080c:	2d00      	cmp	r5, #0
 800080e:	d000      	beq.n	8000812 <__aeabi_fadd+0x56>
 8000810:	e0cc      	b.n	80009ac <__aeabi_fadd+0x1f0>
 8000812:	2b00      	cmp	r3, #0
 8000814:	d100      	bne.n	8000818 <__aeabi_fadd+0x5c>
 8000816:	e079      	b.n	800090c <__aeabi_fadd+0x150>
 8000818:	1e54      	subs	r4, r2, #1
 800081a:	2a01      	cmp	r2, #1
 800081c:	d100      	bne.n	8000820 <__aeabi_fadd+0x64>
 800081e:	e128      	b.n	8000a72 <__aeabi_fadd+0x2b6>
 8000820:	2aff      	cmp	r2, #255	@ 0xff
 8000822:	d100      	bne.n	8000826 <__aeabi_fadd+0x6a>
 8000824:	e097      	b.n	8000956 <__aeabi_fadd+0x19a>
 8000826:	0022      	movs	r2, r4
 8000828:	e0c5      	b.n	80009b6 <__aeabi_fadd+0x1fa>
 800082a:	2a00      	cmp	r2, #0
 800082c:	dc00      	bgt.n	8000830 <__aeabi_fadd+0x74>
 800082e:	e096      	b.n	800095e <__aeabi_fadd+0x1a2>
 8000830:	2800      	cmp	r0, #0
 8000832:	d04f      	beq.n	80008d4 <__aeabi_fadd+0x118>
 8000834:	2dff      	cmp	r5, #255	@ 0xff
 8000836:	d100      	bne.n	800083a <__aeabi_fadd+0x7e>
 8000838:	e08f      	b.n	800095a <__aeabi_fadd+0x19e>
 800083a:	2180      	movs	r1, #128	@ 0x80
 800083c:	04c9      	lsls	r1, r1, #19
 800083e:	430e      	orrs	r6, r1
 8000840:	2a1b      	cmp	r2, #27
 8000842:	dd51      	ble.n	80008e8 <__aeabi_fadd+0x12c>
 8000844:	002a      	movs	r2, r5
 8000846:	3301      	adds	r3, #1
 8000848:	e018      	b.n	800087c <__aeabi_fadd+0xc0>
 800084a:	2dff      	cmp	r5, #255	@ 0xff
 800084c:	d100      	bne.n	8000850 <__aeabi_fadd+0x94>
 800084e:	e084      	b.n	800095a <__aeabi_fadd+0x19e>
 8000850:	2180      	movs	r1, #128	@ 0x80
 8000852:	04c9      	lsls	r1, r1, #19
 8000854:	430e      	orrs	r6, r1
 8000856:	2101      	movs	r1, #1
 8000858:	2a1b      	cmp	r2, #27
 800085a:	dc08      	bgt.n	800086e <__aeabi_fadd+0xb2>
 800085c:	0031      	movs	r1, r6
 800085e:	2020      	movs	r0, #32
 8000860:	40d1      	lsrs	r1, r2
 8000862:	1a82      	subs	r2, r0, r2
 8000864:	4096      	lsls	r6, r2
 8000866:	0032      	movs	r2, r6
 8000868:	1e50      	subs	r0, r2, #1
 800086a:	4182      	sbcs	r2, r0
 800086c:	4311      	orrs	r1, r2
 800086e:	1a5b      	subs	r3, r3, r1
 8000870:	015a      	lsls	r2, r3, #5
 8000872:	d459      	bmi.n	8000928 <__aeabi_fadd+0x16c>
 8000874:	2107      	movs	r1, #7
 8000876:	002a      	movs	r2, r5
 8000878:	4019      	ands	r1, r3
 800087a:	d049      	beq.n	8000910 <__aeabi_fadd+0x154>
 800087c:	210f      	movs	r1, #15
 800087e:	4019      	ands	r1, r3
 8000880:	2904      	cmp	r1, #4
 8000882:	d000      	beq.n	8000886 <__aeabi_fadd+0xca>
 8000884:	3304      	adds	r3, #4
 8000886:	0159      	lsls	r1, r3, #5
 8000888:	d542      	bpl.n	8000910 <__aeabi_fadd+0x154>
 800088a:	1c50      	adds	r0, r2, #1
 800088c:	2afe      	cmp	r2, #254	@ 0xfe
 800088e:	d03a      	beq.n	8000906 <__aeabi_fadd+0x14a>
 8000890:	019b      	lsls	r3, r3, #6
 8000892:	b2c0      	uxtb	r0, r0
 8000894:	0a5b      	lsrs	r3, r3, #9
 8000896:	05c0      	lsls	r0, r0, #23
 8000898:	4318      	orrs	r0, r3
 800089a:	07e4      	lsls	r4, r4, #31
 800089c:	4320      	orrs	r0, r4
 800089e:	bcc0      	pop	{r6, r7}
 80008a0:	46b9      	mov	r9, r7
 80008a2:	46b0      	mov	r8, r6
 80008a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80008a6:	20fe      	movs	r0, #254	@ 0xfe
 80008a8:	4680      	mov	r8, r0
 80008aa:	1c6f      	adds	r7, r5, #1
 80008ac:	0038      	movs	r0, r7
 80008ae:	4647      	mov	r7, r8
 80008b0:	4207      	tst	r7, r0
 80008b2:	d000      	beq.n	80008b6 <__aeabi_fadd+0xfa>
 80008b4:	e08e      	b.n	80009d4 <__aeabi_fadd+0x218>
 80008b6:	2d00      	cmp	r5, #0
 80008b8:	d000      	beq.n	80008bc <__aeabi_fadd+0x100>
 80008ba:	e0b4      	b.n	8000a26 <__aeabi_fadd+0x26a>
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d100      	bne.n	80008c2 <__aeabi_fadd+0x106>
 80008c0:	e0db      	b.n	8000a7a <__aeabi_fadd+0x2be>
 80008c2:	2e00      	cmp	r6, #0
 80008c4:	d06c      	beq.n	80009a0 <__aeabi_fadd+0x1e4>
 80008c6:	1b98      	subs	r0, r3, r6
 80008c8:	0145      	lsls	r5, r0, #5
 80008ca:	d400      	bmi.n	80008ce <__aeabi_fadd+0x112>
 80008cc:	e0f7      	b.n	8000abe <__aeabi_fadd+0x302>
 80008ce:	000c      	movs	r4, r1
 80008d0:	1af3      	subs	r3, r6, r3
 80008d2:	e03d      	b.n	8000950 <__aeabi_fadd+0x194>
 80008d4:	2e00      	cmp	r6, #0
 80008d6:	d01b      	beq.n	8000910 <__aeabi_fadd+0x154>
 80008d8:	1e51      	subs	r1, r2, #1
 80008da:	2a01      	cmp	r2, #1
 80008dc:	d100      	bne.n	80008e0 <__aeabi_fadd+0x124>
 80008de:	e082      	b.n	80009e6 <__aeabi_fadd+0x22a>
 80008e0:	2aff      	cmp	r2, #255	@ 0xff
 80008e2:	d03a      	beq.n	800095a <__aeabi_fadd+0x19e>
 80008e4:	000a      	movs	r2, r1
 80008e6:	e7ab      	b.n	8000840 <__aeabi_fadd+0x84>
 80008e8:	0031      	movs	r1, r6
 80008ea:	2020      	movs	r0, #32
 80008ec:	40d1      	lsrs	r1, r2
 80008ee:	1a82      	subs	r2, r0, r2
 80008f0:	4096      	lsls	r6, r2
 80008f2:	0032      	movs	r2, r6
 80008f4:	1e50      	subs	r0, r2, #1
 80008f6:	4182      	sbcs	r2, r0
 80008f8:	430a      	orrs	r2, r1
 80008fa:	189b      	adds	r3, r3, r2
 80008fc:	015a      	lsls	r2, r3, #5
 80008fe:	d5b9      	bpl.n	8000874 <__aeabi_fadd+0xb8>
 8000900:	1c6a      	adds	r2, r5, #1
 8000902:	2dfe      	cmp	r5, #254	@ 0xfe
 8000904:	d175      	bne.n	80009f2 <__aeabi_fadd+0x236>
 8000906:	20ff      	movs	r0, #255	@ 0xff
 8000908:	2300      	movs	r3, #0
 800090a:	e7c4      	b.n	8000896 <__aeabi_fadd+0xda>
 800090c:	000c      	movs	r4, r1
 800090e:	0033      	movs	r3, r6
 8000910:	08db      	lsrs	r3, r3, #3
 8000912:	2aff      	cmp	r2, #255	@ 0xff
 8000914:	d146      	bne.n	80009a4 <__aeabi_fadd+0x1e8>
 8000916:	2b00      	cmp	r3, #0
 8000918:	d0f5      	beq.n	8000906 <__aeabi_fadd+0x14a>
 800091a:	2280      	movs	r2, #128	@ 0x80
 800091c:	03d2      	lsls	r2, r2, #15
 800091e:	4313      	orrs	r3, r2
 8000920:	025b      	lsls	r3, r3, #9
 8000922:	20ff      	movs	r0, #255	@ 0xff
 8000924:	0a5b      	lsrs	r3, r3, #9
 8000926:	e7b6      	b.n	8000896 <__aeabi_fadd+0xda>
 8000928:	019f      	lsls	r7, r3, #6
 800092a:	09bf      	lsrs	r7, r7, #6
 800092c:	0038      	movs	r0, r7
 800092e:	f002 fde3 	bl	80034f8 <__clzsi2>
 8000932:	3805      	subs	r0, #5
 8000934:	4087      	lsls	r7, r0
 8000936:	4285      	cmp	r5, r0
 8000938:	dc24      	bgt.n	8000984 <__aeabi_fadd+0x1c8>
 800093a:	003b      	movs	r3, r7
 800093c:	2120      	movs	r1, #32
 800093e:	1b42      	subs	r2, r0, r5
 8000940:	3201      	adds	r2, #1
 8000942:	40d3      	lsrs	r3, r2
 8000944:	1a8a      	subs	r2, r1, r2
 8000946:	4097      	lsls	r7, r2
 8000948:	1e7a      	subs	r2, r7, #1
 800094a:	4197      	sbcs	r7, r2
 800094c:	2200      	movs	r2, #0
 800094e:	433b      	orrs	r3, r7
 8000950:	0759      	lsls	r1, r3, #29
 8000952:	d193      	bne.n	800087c <__aeabi_fadd+0xc0>
 8000954:	e797      	b.n	8000886 <__aeabi_fadd+0xca>
 8000956:	000c      	movs	r4, r1
 8000958:	0033      	movs	r3, r6
 800095a:	08db      	lsrs	r3, r3, #3
 800095c:	e7db      	b.n	8000916 <__aeabi_fadd+0x15a>
 800095e:	2a00      	cmp	r2, #0
 8000960:	d014      	beq.n	800098c <__aeabi_fadd+0x1d0>
 8000962:	1b42      	subs	r2, r0, r5
 8000964:	2d00      	cmp	r5, #0
 8000966:	d14b      	bne.n	8000a00 <__aeabi_fadd+0x244>
 8000968:	2b00      	cmp	r3, #0
 800096a:	d0d0      	beq.n	800090e <__aeabi_fadd+0x152>
 800096c:	1e51      	subs	r1, r2, #1
 800096e:	2a01      	cmp	r2, #1
 8000970:	d100      	bne.n	8000974 <__aeabi_fadd+0x1b8>
 8000972:	e09e      	b.n	8000ab2 <__aeabi_fadd+0x2f6>
 8000974:	2aff      	cmp	r2, #255	@ 0xff
 8000976:	d0ef      	beq.n	8000958 <__aeabi_fadd+0x19c>
 8000978:	000a      	movs	r2, r1
 800097a:	2a1b      	cmp	r2, #27
 800097c:	dd5f      	ble.n	8000a3e <__aeabi_fadd+0x282>
 800097e:	0002      	movs	r2, r0
 8000980:	1c73      	adds	r3, r6, #1
 8000982:	e77b      	b.n	800087c <__aeabi_fadd+0xc0>
 8000984:	4b50      	ldr	r3, [pc, #320]	@ (8000ac8 <__aeabi_fadd+0x30c>)
 8000986:	1a2a      	subs	r2, r5, r0
 8000988:	403b      	ands	r3, r7
 800098a:	e7e1      	b.n	8000950 <__aeabi_fadd+0x194>
 800098c:	21fe      	movs	r1, #254	@ 0xfe
 800098e:	1c6a      	adds	r2, r5, #1
 8000990:	4211      	tst	r1, r2
 8000992:	d13b      	bne.n	8000a0c <__aeabi_fadd+0x250>
 8000994:	2d00      	cmp	r5, #0
 8000996:	d15d      	bne.n	8000a54 <__aeabi_fadd+0x298>
 8000998:	2b00      	cmp	r3, #0
 800099a:	d07f      	beq.n	8000a9c <__aeabi_fadd+0x2e0>
 800099c:	2e00      	cmp	r6, #0
 800099e:	d17f      	bne.n	8000aa0 <__aeabi_fadd+0x2e4>
 80009a0:	2200      	movs	r2, #0
 80009a2:	08db      	lsrs	r3, r3, #3
 80009a4:	025b      	lsls	r3, r3, #9
 80009a6:	0a5b      	lsrs	r3, r3, #9
 80009a8:	b2d0      	uxtb	r0, r2
 80009aa:	e774      	b.n	8000896 <__aeabi_fadd+0xda>
 80009ac:	28ff      	cmp	r0, #255	@ 0xff
 80009ae:	d0d2      	beq.n	8000956 <__aeabi_fadd+0x19a>
 80009b0:	2480      	movs	r4, #128	@ 0x80
 80009b2:	04e4      	lsls	r4, r4, #19
 80009b4:	4323      	orrs	r3, r4
 80009b6:	2401      	movs	r4, #1
 80009b8:	2a1b      	cmp	r2, #27
 80009ba:	dc07      	bgt.n	80009cc <__aeabi_fadd+0x210>
 80009bc:	001c      	movs	r4, r3
 80009be:	2520      	movs	r5, #32
 80009c0:	40d4      	lsrs	r4, r2
 80009c2:	1aaa      	subs	r2, r5, r2
 80009c4:	4093      	lsls	r3, r2
 80009c6:	1e5a      	subs	r2, r3, #1
 80009c8:	4193      	sbcs	r3, r2
 80009ca:	431c      	orrs	r4, r3
 80009cc:	1b33      	subs	r3, r6, r4
 80009ce:	0005      	movs	r5, r0
 80009d0:	000c      	movs	r4, r1
 80009d2:	e74d      	b.n	8000870 <__aeabi_fadd+0xb4>
 80009d4:	1b9f      	subs	r7, r3, r6
 80009d6:	017a      	lsls	r2, r7, #5
 80009d8:	d422      	bmi.n	8000a20 <__aeabi_fadd+0x264>
 80009da:	2f00      	cmp	r7, #0
 80009dc:	d1a6      	bne.n	800092c <__aeabi_fadd+0x170>
 80009de:	2400      	movs	r4, #0
 80009e0:	2000      	movs	r0, #0
 80009e2:	2300      	movs	r3, #0
 80009e4:	e757      	b.n	8000896 <__aeabi_fadd+0xda>
 80009e6:	199b      	adds	r3, r3, r6
 80009e8:	2501      	movs	r5, #1
 80009ea:	3201      	adds	r2, #1
 80009ec:	0159      	lsls	r1, r3, #5
 80009ee:	d400      	bmi.n	80009f2 <__aeabi_fadd+0x236>
 80009f0:	e740      	b.n	8000874 <__aeabi_fadd+0xb8>
 80009f2:	2101      	movs	r1, #1
 80009f4:	4835      	ldr	r0, [pc, #212]	@ (8000acc <__aeabi_fadd+0x310>)
 80009f6:	4019      	ands	r1, r3
 80009f8:	085b      	lsrs	r3, r3, #1
 80009fa:	4003      	ands	r3, r0
 80009fc:	430b      	orrs	r3, r1
 80009fe:	e7a7      	b.n	8000950 <__aeabi_fadd+0x194>
 8000a00:	28ff      	cmp	r0, #255	@ 0xff
 8000a02:	d0a9      	beq.n	8000958 <__aeabi_fadd+0x19c>
 8000a04:	2180      	movs	r1, #128	@ 0x80
 8000a06:	04c9      	lsls	r1, r1, #19
 8000a08:	430b      	orrs	r3, r1
 8000a0a:	e7b6      	b.n	800097a <__aeabi_fadd+0x1be>
 8000a0c:	2aff      	cmp	r2, #255	@ 0xff
 8000a0e:	d100      	bne.n	8000a12 <__aeabi_fadd+0x256>
 8000a10:	e779      	b.n	8000906 <__aeabi_fadd+0x14a>
 8000a12:	199b      	adds	r3, r3, r6
 8000a14:	085b      	lsrs	r3, r3, #1
 8000a16:	0759      	lsls	r1, r3, #29
 8000a18:	d000      	beq.n	8000a1c <__aeabi_fadd+0x260>
 8000a1a:	e72f      	b.n	800087c <__aeabi_fadd+0xc0>
 8000a1c:	08db      	lsrs	r3, r3, #3
 8000a1e:	e7c1      	b.n	80009a4 <__aeabi_fadd+0x1e8>
 8000a20:	000c      	movs	r4, r1
 8000a22:	1af7      	subs	r7, r6, r3
 8000a24:	e782      	b.n	800092c <__aeabi_fadd+0x170>
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d12c      	bne.n	8000a84 <__aeabi_fadd+0x2c8>
 8000a2a:	2e00      	cmp	r6, #0
 8000a2c:	d193      	bne.n	8000956 <__aeabi_fadd+0x19a>
 8000a2e:	2380      	movs	r3, #128	@ 0x80
 8000a30:	2400      	movs	r4, #0
 8000a32:	20ff      	movs	r0, #255	@ 0xff
 8000a34:	03db      	lsls	r3, r3, #15
 8000a36:	e72e      	b.n	8000896 <__aeabi_fadd+0xda>
 8000a38:	2501      	movs	r5, #1
 8000a3a:	1b9b      	subs	r3, r3, r6
 8000a3c:	e718      	b.n	8000870 <__aeabi_fadd+0xb4>
 8000a3e:	0019      	movs	r1, r3
 8000a40:	2520      	movs	r5, #32
 8000a42:	40d1      	lsrs	r1, r2
 8000a44:	1aaa      	subs	r2, r5, r2
 8000a46:	4093      	lsls	r3, r2
 8000a48:	1e5a      	subs	r2, r3, #1
 8000a4a:	4193      	sbcs	r3, r2
 8000a4c:	430b      	orrs	r3, r1
 8000a4e:	0005      	movs	r5, r0
 8000a50:	199b      	adds	r3, r3, r6
 8000a52:	e753      	b.n	80008fc <__aeabi_fadd+0x140>
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d100      	bne.n	8000a5a <__aeabi_fadd+0x29e>
 8000a58:	e77e      	b.n	8000958 <__aeabi_fadd+0x19c>
 8000a5a:	2e00      	cmp	r6, #0
 8000a5c:	d100      	bne.n	8000a60 <__aeabi_fadd+0x2a4>
 8000a5e:	e77c      	b.n	800095a <__aeabi_fadd+0x19e>
 8000a60:	2280      	movs	r2, #128	@ 0x80
 8000a62:	03d2      	lsls	r2, r2, #15
 8000a64:	4591      	cmp	r9, r2
 8000a66:	d302      	bcc.n	8000a6e <__aeabi_fadd+0x2b2>
 8000a68:	4594      	cmp	ip, r2
 8000a6a:	d200      	bcs.n	8000a6e <__aeabi_fadd+0x2b2>
 8000a6c:	0033      	movs	r3, r6
 8000a6e:	08db      	lsrs	r3, r3, #3
 8000a70:	e753      	b.n	800091a <__aeabi_fadd+0x15e>
 8000a72:	000c      	movs	r4, r1
 8000a74:	1af3      	subs	r3, r6, r3
 8000a76:	3501      	adds	r5, #1
 8000a78:	e6fa      	b.n	8000870 <__aeabi_fadd+0xb4>
 8000a7a:	2e00      	cmp	r6, #0
 8000a7c:	d0af      	beq.n	80009de <__aeabi_fadd+0x222>
 8000a7e:	000c      	movs	r4, r1
 8000a80:	0033      	movs	r3, r6
 8000a82:	e78d      	b.n	80009a0 <__aeabi_fadd+0x1e4>
 8000a84:	2e00      	cmp	r6, #0
 8000a86:	d100      	bne.n	8000a8a <__aeabi_fadd+0x2ce>
 8000a88:	e767      	b.n	800095a <__aeabi_fadd+0x19e>
 8000a8a:	2280      	movs	r2, #128	@ 0x80
 8000a8c:	03d2      	lsls	r2, r2, #15
 8000a8e:	4591      	cmp	r9, r2
 8000a90:	d3ed      	bcc.n	8000a6e <__aeabi_fadd+0x2b2>
 8000a92:	4594      	cmp	ip, r2
 8000a94:	d2eb      	bcs.n	8000a6e <__aeabi_fadd+0x2b2>
 8000a96:	000c      	movs	r4, r1
 8000a98:	0033      	movs	r3, r6
 8000a9a:	e7e8      	b.n	8000a6e <__aeabi_fadd+0x2b2>
 8000a9c:	0033      	movs	r3, r6
 8000a9e:	e77f      	b.n	80009a0 <__aeabi_fadd+0x1e4>
 8000aa0:	199b      	adds	r3, r3, r6
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	0159      	lsls	r1, r3, #5
 8000aa6:	d5b9      	bpl.n	8000a1c <__aeabi_fadd+0x260>
 8000aa8:	4a07      	ldr	r2, [pc, #28]	@ (8000ac8 <__aeabi_fadd+0x30c>)
 8000aaa:	4013      	ands	r3, r2
 8000aac:	08db      	lsrs	r3, r3, #3
 8000aae:	2201      	movs	r2, #1
 8000ab0:	e778      	b.n	80009a4 <__aeabi_fadd+0x1e8>
 8000ab2:	199b      	adds	r3, r3, r6
 8000ab4:	3201      	adds	r2, #1
 8000ab6:	3501      	adds	r5, #1
 8000ab8:	0159      	lsls	r1, r3, #5
 8000aba:	d49a      	bmi.n	80009f2 <__aeabi_fadd+0x236>
 8000abc:	e6da      	b.n	8000874 <__aeabi_fadd+0xb8>
 8000abe:	1e03      	subs	r3, r0, #0
 8000ac0:	d08d      	beq.n	80009de <__aeabi_fadd+0x222>
 8000ac2:	08db      	lsrs	r3, r3, #3
 8000ac4:	e76e      	b.n	80009a4 <__aeabi_fadd+0x1e8>
 8000ac6:	46c0      	nop			@ (mov r8, r8)
 8000ac8:	fbffffff 	.word	0xfbffffff
 8000acc:	7dffffff 	.word	0x7dffffff

08000ad0 <__aeabi_fdiv>:
 8000ad0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ad2:	464f      	mov	r7, r9
 8000ad4:	4646      	mov	r6, r8
 8000ad6:	46d6      	mov	lr, sl
 8000ad8:	0244      	lsls	r4, r0, #9
 8000ada:	b5c0      	push	{r6, r7, lr}
 8000adc:	0047      	lsls	r7, r0, #1
 8000ade:	1c0e      	adds	r6, r1, #0
 8000ae0:	0a64      	lsrs	r4, r4, #9
 8000ae2:	0e3f      	lsrs	r7, r7, #24
 8000ae4:	0fc5      	lsrs	r5, r0, #31
 8000ae6:	2f00      	cmp	r7, #0
 8000ae8:	d03c      	beq.n	8000b64 <__aeabi_fdiv+0x94>
 8000aea:	2fff      	cmp	r7, #255	@ 0xff
 8000aec:	d042      	beq.n	8000b74 <__aeabi_fdiv+0xa4>
 8000aee:	2300      	movs	r3, #0
 8000af0:	2280      	movs	r2, #128	@ 0x80
 8000af2:	4699      	mov	r9, r3
 8000af4:	469a      	mov	sl, r3
 8000af6:	00e4      	lsls	r4, r4, #3
 8000af8:	04d2      	lsls	r2, r2, #19
 8000afa:	4314      	orrs	r4, r2
 8000afc:	3f7f      	subs	r7, #127	@ 0x7f
 8000afe:	0273      	lsls	r3, r6, #9
 8000b00:	0a5b      	lsrs	r3, r3, #9
 8000b02:	4698      	mov	r8, r3
 8000b04:	0073      	lsls	r3, r6, #1
 8000b06:	0e1b      	lsrs	r3, r3, #24
 8000b08:	0ff6      	lsrs	r6, r6, #31
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d01b      	beq.n	8000b46 <__aeabi_fdiv+0x76>
 8000b0e:	2bff      	cmp	r3, #255	@ 0xff
 8000b10:	d013      	beq.n	8000b3a <__aeabi_fdiv+0x6a>
 8000b12:	4642      	mov	r2, r8
 8000b14:	2180      	movs	r1, #128	@ 0x80
 8000b16:	00d2      	lsls	r2, r2, #3
 8000b18:	04c9      	lsls	r1, r1, #19
 8000b1a:	4311      	orrs	r1, r2
 8000b1c:	4688      	mov	r8, r1
 8000b1e:	2000      	movs	r0, #0
 8000b20:	3b7f      	subs	r3, #127	@ 0x7f
 8000b22:	0029      	movs	r1, r5
 8000b24:	1aff      	subs	r7, r7, r3
 8000b26:	464b      	mov	r3, r9
 8000b28:	4071      	eors	r1, r6
 8000b2a:	b2c9      	uxtb	r1, r1
 8000b2c:	2b0f      	cmp	r3, #15
 8000b2e:	d900      	bls.n	8000b32 <__aeabi_fdiv+0x62>
 8000b30:	e0b5      	b.n	8000c9e <__aeabi_fdiv+0x1ce>
 8000b32:	4a74      	ldr	r2, [pc, #464]	@ (8000d04 <__aeabi_fdiv+0x234>)
 8000b34:	009b      	lsls	r3, r3, #2
 8000b36:	58d3      	ldr	r3, [r2, r3]
 8000b38:	469f      	mov	pc, r3
 8000b3a:	4643      	mov	r3, r8
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d13f      	bne.n	8000bc0 <__aeabi_fdiv+0xf0>
 8000b40:	3fff      	subs	r7, #255	@ 0xff
 8000b42:	3302      	adds	r3, #2
 8000b44:	e003      	b.n	8000b4e <__aeabi_fdiv+0x7e>
 8000b46:	4643      	mov	r3, r8
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d12d      	bne.n	8000ba8 <__aeabi_fdiv+0xd8>
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	0029      	movs	r1, r5
 8000b50:	464a      	mov	r2, r9
 8000b52:	4071      	eors	r1, r6
 8000b54:	b2c9      	uxtb	r1, r1
 8000b56:	431a      	orrs	r2, r3
 8000b58:	2a0e      	cmp	r2, #14
 8000b5a:	d838      	bhi.n	8000bce <__aeabi_fdiv+0xfe>
 8000b5c:	486a      	ldr	r0, [pc, #424]	@ (8000d08 <__aeabi_fdiv+0x238>)
 8000b5e:	0092      	lsls	r2, r2, #2
 8000b60:	5882      	ldr	r2, [r0, r2]
 8000b62:	4697      	mov	pc, r2
 8000b64:	2c00      	cmp	r4, #0
 8000b66:	d113      	bne.n	8000b90 <__aeabi_fdiv+0xc0>
 8000b68:	2304      	movs	r3, #4
 8000b6a:	4699      	mov	r9, r3
 8000b6c:	3b03      	subs	r3, #3
 8000b6e:	2700      	movs	r7, #0
 8000b70:	469a      	mov	sl, r3
 8000b72:	e7c4      	b.n	8000afe <__aeabi_fdiv+0x2e>
 8000b74:	2c00      	cmp	r4, #0
 8000b76:	d105      	bne.n	8000b84 <__aeabi_fdiv+0xb4>
 8000b78:	2308      	movs	r3, #8
 8000b7a:	4699      	mov	r9, r3
 8000b7c:	3b06      	subs	r3, #6
 8000b7e:	27ff      	movs	r7, #255	@ 0xff
 8000b80:	469a      	mov	sl, r3
 8000b82:	e7bc      	b.n	8000afe <__aeabi_fdiv+0x2e>
 8000b84:	230c      	movs	r3, #12
 8000b86:	4699      	mov	r9, r3
 8000b88:	3b09      	subs	r3, #9
 8000b8a:	27ff      	movs	r7, #255	@ 0xff
 8000b8c:	469a      	mov	sl, r3
 8000b8e:	e7b6      	b.n	8000afe <__aeabi_fdiv+0x2e>
 8000b90:	0020      	movs	r0, r4
 8000b92:	f002 fcb1 	bl	80034f8 <__clzsi2>
 8000b96:	2776      	movs	r7, #118	@ 0x76
 8000b98:	1f43      	subs	r3, r0, #5
 8000b9a:	409c      	lsls	r4, r3
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	427f      	negs	r7, r7
 8000ba0:	4699      	mov	r9, r3
 8000ba2:	469a      	mov	sl, r3
 8000ba4:	1a3f      	subs	r7, r7, r0
 8000ba6:	e7aa      	b.n	8000afe <__aeabi_fdiv+0x2e>
 8000ba8:	4640      	mov	r0, r8
 8000baa:	f002 fca5 	bl	80034f8 <__clzsi2>
 8000bae:	4642      	mov	r2, r8
 8000bb0:	1f43      	subs	r3, r0, #5
 8000bb2:	409a      	lsls	r2, r3
 8000bb4:	2376      	movs	r3, #118	@ 0x76
 8000bb6:	425b      	negs	r3, r3
 8000bb8:	1a1b      	subs	r3, r3, r0
 8000bba:	4690      	mov	r8, r2
 8000bbc:	2000      	movs	r0, #0
 8000bbe:	e7b0      	b.n	8000b22 <__aeabi_fdiv+0x52>
 8000bc0:	2303      	movs	r3, #3
 8000bc2:	464a      	mov	r2, r9
 8000bc4:	431a      	orrs	r2, r3
 8000bc6:	4691      	mov	r9, r2
 8000bc8:	2003      	movs	r0, #3
 8000bca:	33fc      	adds	r3, #252	@ 0xfc
 8000bcc:	e7a9      	b.n	8000b22 <__aeabi_fdiv+0x52>
 8000bce:	000d      	movs	r5, r1
 8000bd0:	20ff      	movs	r0, #255	@ 0xff
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	05c0      	lsls	r0, r0, #23
 8000bd6:	07ed      	lsls	r5, r5, #31
 8000bd8:	4310      	orrs	r0, r2
 8000bda:	4328      	orrs	r0, r5
 8000bdc:	bce0      	pop	{r5, r6, r7}
 8000bde:	46ba      	mov	sl, r7
 8000be0:	46b1      	mov	r9, r6
 8000be2:	46a8      	mov	r8, r5
 8000be4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000be6:	000d      	movs	r5, r1
 8000be8:	2000      	movs	r0, #0
 8000bea:	2200      	movs	r2, #0
 8000bec:	e7f2      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000bee:	4653      	mov	r3, sl
 8000bf0:	2b02      	cmp	r3, #2
 8000bf2:	d0ed      	beq.n	8000bd0 <__aeabi_fdiv+0x100>
 8000bf4:	2b03      	cmp	r3, #3
 8000bf6:	d033      	beq.n	8000c60 <__aeabi_fdiv+0x190>
 8000bf8:	46a0      	mov	r8, r4
 8000bfa:	2b01      	cmp	r3, #1
 8000bfc:	d105      	bne.n	8000c0a <__aeabi_fdiv+0x13a>
 8000bfe:	2000      	movs	r0, #0
 8000c00:	2200      	movs	r2, #0
 8000c02:	e7e7      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000c04:	0035      	movs	r5, r6
 8000c06:	2803      	cmp	r0, #3
 8000c08:	d07a      	beq.n	8000d00 <__aeabi_fdiv+0x230>
 8000c0a:	003b      	movs	r3, r7
 8000c0c:	337f      	adds	r3, #127	@ 0x7f
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	dd2d      	ble.n	8000c6e <__aeabi_fdiv+0x19e>
 8000c12:	4642      	mov	r2, r8
 8000c14:	0752      	lsls	r2, r2, #29
 8000c16:	d007      	beq.n	8000c28 <__aeabi_fdiv+0x158>
 8000c18:	220f      	movs	r2, #15
 8000c1a:	4641      	mov	r1, r8
 8000c1c:	400a      	ands	r2, r1
 8000c1e:	2a04      	cmp	r2, #4
 8000c20:	d002      	beq.n	8000c28 <__aeabi_fdiv+0x158>
 8000c22:	2204      	movs	r2, #4
 8000c24:	4694      	mov	ip, r2
 8000c26:	44e0      	add	r8, ip
 8000c28:	4642      	mov	r2, r8
 8000c2a:	0112      	lsls	r2, r2, #4
 8000c2c:	d505      	bpl.n	8000c3a <__aeabi_fdiv+0x16a>
 8000c2e:	4642      	mov	r2, r8
 8000c30:	4b36      	ldr	r3, [pc, #216]	@ (8000d0c <__aeabi_fdiv+0x23c>)
 8000c32:	401a      	ands	r2, r3
 8000c34:	003b      	movs	r3, r7
 8000c36:	4690      	mov	r8, r2
 8000c38:	3380      	adds	r3, #128	@ 0x80
 8000c3a:	2bfe      	cmp	r3, #254	@ 0xfe
 8000c3c:	dcc8      	bgt.n	8000bd0 <__aeabi_fdiv+0x100>
 8000c3e:	4642      	mov	r2, r8
 8000c40:	0192      	lsls	r2, r2, #6
 8000c42:	0a52      	lsrs	r2, r2, #9
 8000c44:	b2d8      	uxtb	r0, r3
 8000c46:	e7c5      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000c48:	2280      	movs	r2, #128	@ 0x80
 8000c4a:	2500      	movs	r5, #0
 8000c4c:	20ff      	movs	r0, #255	@ 0xff
 8000c4e:	03d2      	lsls	r2, r2, #15
 8000c50:	e7c0      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000c52:	2280      	movs	r2, #128	@ 0x80
 8000c54:	03d2      	lsls	r2, r2, #15
 8000c56:	4214      	tst	r4, r2
 8000c58:	d002      	beq.n	8000c60 <__aeabi_fdiv+0x190>
 8000c5a:	4643      	mov	r3, r8
 8000c5c:	4213      	tst	r3, r2
 8000c5e:	d049      	beq.n	8000cf4 <__aeabi_fdiv+0x224>
 8000c60:	2280      	movs	r2, #128	@ 0x80
 8000c62:	03d2      	lsls	r2, r2, #15
 8000c64:	4322      	orrs	r2, r4
 8000c66:	0252      	lsls	r2, r2, #9
 8000c68:	20ff      	movs	r0, #255	@ 0xff
 8000c6a:	0a52      	lsrs	r2, r2, #9
 8000c6c:	e7b2      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000c6e:	2201      	movs	r2, #1
 8000c70:	1ad3      	subs	r3, r2, r3
 8000c72:	2b1b      	cmp	r3, #27
 8000c74:	dcc3      	bgt.n	8000bfe <__aeabi_fdiv+0x12e>
 8000c76:	4642      	mov	r2, r8
 8000c78:	40da      	lsrs	r2, r3
 8000c7a:	4643      	mov	r3, r8
 8000c7c:	379e      	adds	r7, #158	@ 0x9e
 8000c7e:	40bb      	lsls	r3, r7
 8000c80:	1e59      	subs	r1, r3, #1
 8000c82:	418b      	sbcs	r3, r1
 8000c84:	431a      	orrs	r2, r3
 8000c86:	0753      	lsls	r3, r2, #29
 8000c88:	d004      	beq.n	8000c94 <__aeabi_fdiv+0x1c4>
 8000c8a:	230f      	movs	r3, #15
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	2b04      	cmp	r3, #4
 8000c90:	d000      	beq.n	8000c94 <__aeabi_fdiv+0x1c4>
 8000c92:	3204      	adds	r2, #4
 8000c94:	0153      	lsls	r3, r2, #5
 8000c96:	d529      	bpl.n	8000cec <__aeabi_fdiv+0x21c>
 8000c98:	2001      	movs	r0, #1
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	e79a      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000c9e:	4642      	mov	r2, r8
 8000ca0:	0163      	lsls	r3, r4, #5
 8000ca2:	0155      	lsls	r5, r2, #5
 8000ca4:	42ab      	cmp	r3, r5
 8000ca6:	d215      	bcs.n	8000cd4 <__aeabi_fdiv+0x204>
 8000ca8:	201b      	movs	r0, #27
 8000caa:	2200      	movs	r2, #0
 8000cac:	3f01      	subs	r7, #1
 8000cae:	2601      	movs	r6, #1
 8000cb0:	001c      	movs	r4, r3
 8000cb2:	0052      	lsls	r2, r2, #1
 8000cb4:	005b      	lsls	r3, r3, #1
 8000cb6:	2c00      	cmp	r4, #0
 8000cb8:	db01      	blt.n	8000cbe <__aeabi_fdiv+0x1ee>
 8000cba:	429d      	cmp	r5, r3
 8000cbc:	d801      	bhi.n	8000cc2 <__aeabi_fdiv+0x1f2>
 8000cbe:	1b5b      	subs	r3, r3, r5
 8000cc0:	4332      	orrs	r2, r6
 8000cc2:	3801      	subs	r0, #1
 8000cc4:	2800      	cmp	r0, #0
 8000cc6:	d1f3      	bne.n	8000cb0 <__aeabi_fdiv+0x1e0>
 8000cc8:	1e58      	subs	r0, r3, #1
 8000cca:	4183      	sbcs	r3, r0
 8000ccc:	4313      	orrs	r3, r2
 8000cce:	4698      	mov	r8, r3
 8000cd0:	000d      	movs	r5, r1
 8000cd2:	e79a      	b.n	8000c0a <__aeabi_fdiv+0x13a>
 8000cd4:	201a      	movs	r0, #26
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	1b5b      	subs	r3, r3, r5
 8000cda:	e7e8      	b.n	8000cae <__aeabi_fdiv+0x1de>
 8000cdc:	3b02      	subs	r3, #2
 8000cde:	425a      	negs	r2, r3
 8000ce0:	4153      	adcs	r3, r2
 8000ce2:	425b      	negs	r3, r3
 8000ce4:	0035      	movs	r5, r6
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	b2d8      	uxtb	r0, r3
 8000cea:	e773      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000cec:	0192      	lsls	r2, r2, #6
 8000cee:	2000      	movs	r0, #0
 8000cf0:	0a52      	lsrs	r2, r2, #9
 8000cf2:	e76f      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000cf4:	431a      	orrs	r2, r3
 8000cf6:	0252      	lsls	r2, r2, #9
 8000cf8:	0035      	movs	r5, r6
 8000cfa:	20ff      	movs	r0, #255	@ 0xff
 8000cfc:	0a52      	lsrs	r2, r2, #9
 8000cfe:	e769      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000d00:	4644      	mov	r4, r8
 8000d02:	e7ad      	b.n	8000c60 <__aeabi_fdiv+0x190>
 8000d04:	0801b744 	.word	0x0801b744
 8000d08:	0801b784 	.word	0x0801b784
 8000d0c:	f7ffffff 	.word	0xf7ffffff

08000d10 <__eqsf2>:
 8000d10:	b570      	push	{r4, r5, r6, lr}
 8000d12:	0042      	lsls	r2, r0, #1
 8000d14:	024e      	lsls	r6, r1, #9
 8000d16:	004c      	lsls	r4, r1, #1
 8000d18:	0245      	lsls	r5, r0, #9
 8000d1a:	0a6d      	lsrs	r5, r5, #9
 8000d1c:	0e12      	lsrs	r2, r2, #24
 8000d1e:	0fc3      	lsrs	r3, r0, #31
 8000d20:	0a76      	lsrs	r6, r6, #9
 8000d22:	0e24      	lsrs	r4, r4, #24
 8000d24:	0fc9      	lsrs	r1, r1, #31
 8000d26:	2aff      	cmp	r2, #255	@ 0xff
 8000d28:	d010      	beq.n	8000d4c <__eqsf2+0x3c>
 8000d2a:	2cff      	cmp	r4, #255	@ 0xff
 8000d2c:	d00c      	beq.n	8000d48 <__eqsf2+0x38>
 8000d2e:	2001      	movs	r0, #1
 8000d30:	42a2      	cmp	r2, r4
 8000d32:	d10a      	bne.n	8000d4a <__eqsf2+0x3a>
 8000d34:	42b5      	cmp	r5, r6
 8000d36:	d108      	bne.n	8000d4a <__eqsf2+0x3a>
 8000d38:	428b      	cmp	r3, r1
 8000d3a:	d00f      	beq.n	8000d5c <__eqsf2+0x4c>
 8000d3c:	2a00      	cmp	r2, #0
 8000d3e:	d104      	bne.n	8000d4a <__eqsf2+0x3a>
 8000d40:	0028      	movs	r0, r5
 8000d42:	1e43      	subs	r3, r0, #1
 8000d44:	4198      	sbcs	r0, r3
 8000d46:	e000      	b.n	8000d4a <__eqsf2+0x3a>
 8000d48:	2001      	movs	r0, #1
 8000d4a:	bd70      	pop	{r4, r5, r6, pc}
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	2cff      	cmp	r4, #255	@ 0xff
 8000d50:	d1fb      	bne.n	8000d4a <__eqsf2+0x3a>
 8000d52:	4335      	orrs	r5, r6
 8000d54:	d1f9      	bne.n	8000d4a <__eqsf2+0x3a>
 8000d56:	404b      	eors	r3, r1
 8000d58:	0018      	movs	r0, r3
 8000d5a:	e7f6      	b.n	8000d4a <__eqsf2+0x3a>
 8000d5c:	2000      	movs	r0, #0
 8000d5e:	e7f4      	b.n	8000d4a <__eqsf2+0x3a>

08000d60 <__gesf2>:
 8000d60:	b530      	push	{r4, r5, lr}
 8000d62:	0042      	lsls	r2, r0, #1
 8000d64:	0244      	lsls	r4, r0, #9
 8000d66:	024d      	lsls	r5, r1, #9
 8000d68:	0fc3      	lsrs	r3, r0, #31
 8000d6a:	0048      	lsls	r0, r1, #1
 8000d6c:	0a64      	lsrs	r4, r4, #9
 8000d6e:	0e12      	lsrs	r2, r2, #24
 8000d70:	0a6d      	lsrs	r5, r5, #9
 8000d72:	0e00      	lsrs	r0, r0, #24
 8000d74:	0fc9      	lsrs	r1, r1, #31
 8000d76:	2aff      	cmp	r2, #255	@ 0xff
 8000d78:	d019      	beq.n	8000dae <__gesf2+0x4e>
 8000d7a:	28ff      	cmp	r0, #255	@ 0xff
 8000d7c:	d00b      	beq.n	8000d96 <__gesf2+0x36>
 8000d7e:	2a00      	cmp	r2, #0
 8000d80:	d11e      	bne.n	8000dc0 <__gesf2+0x60>
 8000d82:	2800      	cmp	r0, #0
 8000d84:	d10b      	bne.n	8000d9e <__gesf2+0x3e>
 8000d86:	2d00      	cmp	r5, #0
 8000d88:	d027      	beq.n	8000dda <__gesf2+0x7a>
 8000d8a:	2c00      	cmp	r4, #0
 8000d8c:	d134      	bne.n	8000df8 <__gesf2+0x98>
 8000d8e:	2900      	cmp	r1, #0
 8000d90:	d02f      	beq.n	8000df2 <__gesf2+0x92>
 8000d92:	0008      	movs	r0, r1
 8000d94:	bd30      	pop	{r4, r5, pc}
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d128      	bne.n	8000dec <__gesf2+0x8c>
 8000d9a:	2a00      	cmp	r2, #0
 8000d9c:	d101      	bne.n	8000da2 <__gesf2+0x42>
 8000d9e:	2c00      	cmp	r4, #0
 8000da0:	d0f5      	beq.n	8000d8e <__gesf2+0x2e>
 8000da2:	428b      	cmp	r3, r1
 8000da4:	d107      	bne.n	8000db6 <__gesf2+0x56>
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d023      	beq.n	8000df2 <__gesf2+0x92>
 8000daa:	0018      	movs	r0, r3
 8000dac:	e7f2      	b.n	8000d94 <__gesf2+0x34>
 8000dae:	2c00      	cmp	r4, #0
 8000db0:	d11c      	bne.n	8000dec <__gesf2+0x8c>
 8000db2:	28ff      	cmp	r0, #255	@ 0xff
 8000db4:	d014      	beq.n	8000de0 <__gesf2+0x80>
 8000db6:	1e58      	subs	r0, r3, #1
 8000db8:	2302      	movs	r3, #2
 8000dba:	4018      	ands	r0, r3
 8000dbc:	3801      	subs	r0, #1
 8000dbe:	e7e9      	b.n	8000d94 <__gesf2+0x34>
 8000dc0:	2800      	cmp	r0, #0
 8000dc2:	d0f8      	beq.n	8000db6 <__gesf2+0x56>
 8000dc4:	428b      	cmp	r3, r1
 8000dc6:	d1f6      	bne.n	8000db6 <__gesf2+0x56>
 8000dc8:	4282      	cmp	r2, r0
 8000dca:	dcf4      	bgt.n	8000db6 <__gesf2+0x56>
 8000dcc:	dbeb      	blt.n	8000da6 <__gesf2+0x46>
 8000dce:	42ac      	cmp	r4, r5
 8000dd0:	d8f1      	bhi.n	8000db6 <__gesf2+0x56>
 8000dd2:	2000      	movs	r0, #0
 8000dd4:	42ac      	cmp	r4, r5
 8000dd6:	d2dd      	bcs.n	8000d94 <__gesf2+0x34>
 8000dd8:	e7e5      	b.n	8000da6 <__gesf2+0x46>
 8000dda:	2c00      	cmp	r4, #0
 8000ddc:	d0da      	beq.n	8000d94 <__gesf2+0x34>
 8000dde:	e7ea      	b.n	8000db6 <__gesf2+0x56>
 8000de0:	2d00      	cmp	r5, #0
 8000de2:	d103      	bne.n	8000dec <__gesf2+0x8c>
 8000de4:	428b      	cmp	r3, r1
 8000de6:	d1e6      	bne.n	8000db6 <__gesf2+0x56>
 8000de8:	2000      	movs	r0, #0
 8000dea:	e7d3      	b.n	8000d94 <__gesf2+0x34>
 8000dec:	2002      	movs	r0, #2
 8000dee:	4240      	negs	r0, r0
 8000df0:	e7d0      	b.n	8000d94 <__gesf2+0x34>
 8000df2:	2001      	movs	r0, #1
 8000df4:	4240      	negs	r0, r0
 8000df6:	e7cd      	b.n	8000d94 <__gesf2+0x34>
 8000df8:	428b      	cmp	r3, r1
 8000dfa:	d0e8      	beq.n	8000dce <__gesf2+0x6e>
 8000dfc:	e7db      	b.n	8000db6 <__gesf2+0x56>
 8000dfe:	46c0      	nop			@ (mov r8, r8)

08000e00 <__lesf2>:
 8000e00:	b530      	push	{r4, r5, lr}
 8000e02:	0042      	lsls	r2, r0, #1
 8000e04:	0244      	lsls	r4, r0, #9
 8000e06:	024d      	lsls	r5, r1, #9
 8000e08:	0fc3      	lsrs	r3, r0, #31
 8000e0a:	0048      	lsls	r0, r1, #1
 8000e0c:	0a64      	lsrs	r4, r4, #9
 8000e0e:	0e12      	lsrs	r2, r2, #24
 8000e10:	0a6d      	lsrs	r5, r5, #9
 8000e12:	0e00      	lsrs	r0, r0, #24
 8000e14:	0fc9      	lsrs	r1, r1, #31
 8000e16:	2aff      	cmp	r2, #255	@ 0xff
 8000e18:	d01a      	beq.n	8000e50 <__lesf2+0x50>
 8000e1a:	28ff      	cmp	r0, #255	@ 0xff
 8000e1c:	d00e      	beq.n	8000e3c <__lesf2+0x3c>
 8000e1e:	2a00      	cmp	r2, #0
 8000e20:	d11e      	bne.n	8000e60 <__lesf2+0x60>
 8000e22:	2800      	cmp	r0, #0
 8000e24:	d10e      	bne.n	8000e44 <__lesf2+0x44>
 8000e26:	2d00      	cmp	r5, #0
 8000e28:	d02a      	beq.n	8000e80 <__lesf2+0x80>
 8000e2a:	2c00      	cmp	r4, #0
 8000e2c:	d00c      	beq.n	8000e48 <__lesf2+0x48>
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d01d      	beq.n	8000e6e <__lesf2+0x6e>
 8000e32:	1e58      	subs	r0, r3, #1
 8000e34:	2302      	movs	r3, #2
 8000e36:	4018      	ands	r0, r3
 8000e38:	3801      	subs	r0, #1
 8000e3a:	e010      	b.n	8000e5e <__lesf2+0x5e>
 8000e3c:	2d00      	cmp	r5, #0
 8000e3e:	d10d      	bne.n	8000e5c <__lesf2+0x5c>
 8000e40:	2a00      	cmp	r2, #0
 8000e42:	d120      	bne.n	8000e86 <__lesf2+0x86>
 8000e44:	2c00      	cmp	r4, #0
 8000e46:	d11e      	bne.n	8000e86 <__lesf2+0x86>
 8000e48:	2900      	cmp	r1, #0
 8000e4a:	d023      	beq.n	8000e94 <__lesf2+0x94>
 8000e4c:	0008      	movs	r0, r1
 8000e4e:	e006      	b.n	8000e5e <__lesf2+0x5e>
 8000e50:	2c00      	cmp	r4, #0
 8000e52:	d103      	bne.n	8000e5c <__lesf2+0x5c>
 8000e54:	28ff      	cmp	r0, #255	@ 0xff
 8000e56:	d1ec      	bne.n	8000e32 <__lesf2+0x32>
 8000e58:	2d00      	cmp	r5, #0
 8000e5a:	d017      	beq.n	8000e8c <__lesf2+0x8c>
 8000e5c:	2002      	movs	r0, #2
 8000e5e:	bd30      	pop	{r4, r5, pc}
 8000e60:	2800      	cmp	r0, #0
 8000e62:	d0e6      	beq.n	8000e32 <__lesf2+0x32>
 8000e64:	428b      	cmp	r3, r1
 8000e66:	d1e4      	bne.n	8000e32 <__lesf2+0x32>
 8000e68:	4282      	cmp	r2, r0
 8000e6a:	dce2      	bgt.n	8000e32 <__lesf2+0x32>
 8000e6c:	db04      	blt.n	8000e78 <__lesf2+0x78>
 8000e6e:	42ac      	cmp	r4, r5
 8000e70:	d8df      	bhi.n	8000e32 <__lesf2+0x32>
 8000e72:	2000      	movs	r0, #0
 8000e74:	42ac      	cmp	r4, r5
 8000e76:	d2f2      	bcs.n	8000e5e <__lesf2+0x5e>
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d00b      	beq.n	8000e94 <__lesf2+0x94>
 8000e7c:	0018      	movs	r0, r3
 8000e7e:	e7ee      	b.n	8000e5e <__lesf2+0x5e>
 8000e80:	2c00      	cmp	r4, #0
 8000e82:	d0ec      	beq.n	8000e5e <__lesf2+0x5e>
 8000e84:	e7d5      	b.n	8000e32 <__lesf2+0x32>
 8000e86:	428b      	cmp	r3, r1
 8000e88:	d1d3      	bne.n	8000e32 <__lesf2+0x32>
 8000e8a:	e7f5      	b.n	8000e78 <__lesf2+0x78>
 8000e8c:	2000      	movs	r0, #0
 8000e8e:	428b      	cmp	r3, r1
 8000e90:	d0e5      	beq.n	8000e5e <__lesf2+0x5e>
 8000e92:	e7ce      	b.n	8000e32 <__lesf2+0x32>
 8000e94:	2001      	movs	r0, #1
 8000e96:	4240      	negs	r0, r0
 8000e98:	e7e1      	b.n	8000e5e <__lesf2+0x5e>
 8000e9a:	46c0      	nop			@ (mov r8, r8)

08000e9c <__aeabi_fmul>:
 8000e9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e9e:	464f      	mov	r7, r9
 8000ea0:	4646      	mov	r6, r8
 8000ea2:	46d6      	mov	lr, sl
 8000ea4:	0243      	lsls	r3, r0, #9
 8000ea6:	0a5b      	lsrs	r3, r3, #9
 8000ea8:	0045      	lsls	r5, r0, #1
 8000eaa:	b5c0      	push	{r6, r7, lr}
 8000eac:	4699      	mov	r9, r3
 8000eae:	1c0f      	adds	r7, r1, #0
 8000eb0:	0e2d      	lsrs	r5, r5, #24
 8000eb2:	0fc6      	lsrs	r6, r0, #31
 8000eb4:	2d00      	cmp	r5, #0
 8000eb6:	d100      	bne.n	8000eba <__aeabi_fmul+0x1e>
 8000eb8:	e088      	b.n	8000fcc <__aeabi_fmul+0x130>
 8000eba:	2dff      	cmp	r5, #255	@ 0xff
 8000ebc:	d100      	bne.n	8000ec0 <__aeabi_fmul+0x24>
 8000ebe:	e08d      	b.n	8000fdc <__aeabi_fmul+0x140>
 8000ec0:	2280      	movs	r2, #128	@ 0x80
 8000ec2:	00db      	lsls	r3, r3, #3
 8000ec4:	04d2      	lsls	r2, r2, #19
 8000ec6:	431a      	orrs	r2, r3
 8000ec8:	2300      	movs	r3, #0
 8000eca:	4691      	mov	r9, r2
 8000ecc:	4698      	mov	r8, r3
 8000ece:	469a      	mov	sl, r3
 8000ed0:	3d7f      	subs	r5, #127	@ 0x7f
 8000ed2:	027c      	lsls	r4, r7, #9
 8000ed4:	007b      	lsls	r3, r7, #1
 8000ed6:	0a64      	lsrs	r4, r4, #9
 8000ed8:	0e1b      	lsrs	r3, r3, #24
 8000eda:	0fff      	lsrs	r7, r7, #31
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d068      	beq.n	8000fb2 <__aeabi_fmul+0x116>
 8000ee0:	2bff      	cmp	r3, #255	@ 0xff
 8000ee2:	d021      	beq.n	8000f28 <__aeabi_fmul+0x8c>
 8000ee4:	2280      	movs	r2, #128	@ 0x80
 8000ee6:	00e4      	lsls	r4, r4, #3
 8000ee8:	04d2      	lsls	r2, r2, #19
 8000eea:	4314      	orrs	r4, r2
 8000eec:	4642      	mov	r2, r8
 8000eee:	3b7f      	subs	r3, #127	@ 0x7f
 8000ef0:	195b      	adds	r3, r3, r5
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	1c5d      	adds	r5, r3, #1
 8000ef6:	2a0a      	cmp	r2, #10
 8000ef8:	dc2e      	bgt.n	8000f58 <__aeabi_fmul+0xbc>
 8000efa:	407e      	eors	r6, r7
 8000efc:	4642      	mov	r2, r8
 8000efe:	2a02      	cmp	r2, #2
 8000f00:	dc23      	bgt.n	8000f4a <__aeabi_fmul+0xae>
 8000f02:	3a01      	subs	r2, #1
 8000f04:	2a01      	cmp	r2, #1
 8000f06:	d900      	bls.n	8000f0a <__aeabi_fmul+0x6e>
 8000f08:	e0bd      	b.n	8001086 <__aeabi_fmul+0x1ea>
 8000f0a:	2902      	cmp	r1, #2
 8000f0c:	d06e      	beq.n	8000fec <__aeabi_fmul+0x150>
 8000f0e:	2901      	cmp	r1, #1
 8000f10:	d12c      	bne.n	8000f6c <__aeabi_fmul+0xd0>
 8000f12:	2000      	movs	r0, #0
 8000f14:	2200      	movs	r2, #0
 8000f16:	05c0      	lsls	r0, r0, #23
 8000f18:	07f6      	lsls	r6, r6, #31
 8000f1a:	4310      	orrs	r0, r2
 8000f1c:	4330      	orrs	r0, r6
 8000f1e:	bce0      	pop	{r5, r6, r7}
 8000f20:	46ba      	mov	sl, r7
 8000f22:	46b1      	mov	r9, r6
 8000f24:	46a8      	mov	r8, r5
 8000f26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f28:	002b      	movs	r3, r5
 8000f2a:	33ff      	adds	r3, #255	@ 0xff
 8000f2c:	2c00      	cmp	r4, #0
 8000f2e:	d065      	beq.n	8000ffc <__aeabi_fmul+0x160>
 8000f30:	2203      	movs	r2, #3
 8000f32:	4641      	mov	r1, r8
 8000f34:	4311      	orrs	r1, r2
 8000f36:	0032      	movs	r2, r6
 8000f38:	3501      	adds	r5, #1
 8000f3a:	4688      	mov	r8, r1
 8000f3c:	407a      	eors	r2, r7
 8000f3e:	35ff      	adds	r5, #255	@ 0xff
 8000f40:	290a      	cmp	r1, #10
 8000f42:	dd00      	ble.n	8000f46 <__aeabi_fmul+0xaa>
 8000f44:	e0d8      	b.n	80010f8 <__aeabi_fmul+0x25c>
 8000f46:	0016      	movs	r6, r2
 8000f48:	2103      	movs	r1, #3
 8000f4a:	4640      	mov	r0, r8
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	4082      	lsls	r2, r0
 8000f50:	20a6      	movs	r0, #166	@ 0xa6
 8000f52:	00c0      	lsls	r0, r0, #3
 8000f54:	4202      	tst	r2, r0
 8000f56:	d020      	beq.n	8000f9a <__aeabi_fmul+0xfe>
 8000f58:	4653      	mov	r3, sl
 8000f5a:	2b02      	cmp	r3, #2
 8000f5c:	d046      	beq.n	8000fec <__aeabi_fmul+0x150>
 8000f5e:	2b03      	cmp	r3, #3
 8000f60:	d100      	bne.n	8000f64 <__aeabi_fmul+0xc8>
 8000f62:	e0bb      	b.n	80010dc <__aeabi_fmul+0x240>
 8000f64:	4651      	mov	r1, sl
 8000f66:	464c      	mov	r4, r9
 8000f68:	2901      	cmp	r1, #1
 8000f6a:	d0d2      	beq.n	8000f12 <__aeabi_fmul+0x76>
 8000f6c:	002b      	movs	r3, r5
 8000f6e:	337f      	adds	r3, #127	@ 0x7f
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	dd70      	ble.n	8001056 <__aeabi_fmul+0x1ba>
 8000f74:	0762      	lsls	r2, r4, #29
 8000f76:	d004      	beq.n	8000f82 <__aeabi_fmul+0xe6>
 8000f78:	220f      	movs	r2, #15
 8000f7a:	4022      	ands	r2, r4
 8000f7c:	2a04      	cmp	r2, #4
 8000f7e:	d000      	beq.n	8000f82 <__aeabi_fmul+0xe6>
 8000f80:	3404      	adds	r4, #4
 8000f82:	0122      	lsls	r2, r4, #4
 8000f84:	d503      	bpl.n	8000f8e <__aeabi_fmul+0xf2>
 8000f86:	4b63      	ldr	r3, [pc, #396]	@ (8001114 <__aeabi_fmul+0x278>)
 8000f88:	401c      	ands	r4, r3
 8000f8a:	002b      	movs	r3, r5
 8000f8c:	3380      	adds	r3, #128	@ 0x80
 8000f8e:	2bfe      	cmp	r3, #254	@ 0xfe
 8000f90:	dc2c      	bgt.n	8000fec <__aeabi_fmul+0x150>
 8000f92:	01a2      	lsls	r2, r4, #6
 8000f94:	0a52      	lsrs	r2, r2, #9
 8000f96:	b2d8      	uxtb	r0, r3
 8000f98:	e7bd      	b.n	8000f16 <__aeabi_fmul+0x7a>
 8000f9a:	2090      	movs	r0, #144	@ 0x90
 8000f9c:	0080      	lsls	r0, r0, #2
 8000f9e:	4202      	tst	r2, r0
 8000fa0:	d127      	bne.n	8000ff2 <__aeabi_fmul+0x156>
 8000fa2:	38b9      	subs	r0, #185	@ 0xb9
 8000fa4:	38ff      	subs	r0, #255	@ 0xff
 8000fa6:	4210      	tst	r0, r2
 8000fa8:	d06d      	beq.n	8001086 <__aeabi_fmul+0x1ea>
 8000faa:	003e      	movs	r6, r7
 8000fac:	46a1      	mov	r9, r4
 8000fae:	468a      	mov	sl, r1
 8000fb0:	e7d2      	b.n	8000f58 <__aeabi_fmul+0xbc>
 8000fb2:	2c00      	cmp	r4, #0
 8000fb4:	d141      	bne.n	800103a <__aeabi_fmul+0x19e>
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	4642      	mov	r2, r8
 8000fba:	431a      	orrs	r2, r3
 8000fbc:	4690      	mov	r8, r2
 8000fbe:	002b      	movs	r3, r5
 8000fc0:	4642      	mov	r2, r8
 8000fc2:	2101      	movs	r1, #1
 8000fc4:	1c5d      	adds	r5, r3, #1
 8000fc6:	2a0a      	cmp	r2, #10
 8000fc8:	dd97      	ble.n	8000efa <__aeabi_fmul+0x5e>
 8000fca:	e7c5      	b.n	8000f58 <__aeabi_fmul+0xbc>
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d126      	bne.n	800101e <__aeabi_fmul+0x182>
 8000fd0:	2304      	movs	r3, #4
 8000fd2:	4698      	mov	r8, r3
 8000fd4:	3b03      	subs	r3, #3
 8000fd6:	2500      	movs	r5, #0
 8000fd8:	469a      	mov	sl, r3
 8000fda:	e77a      	b.n	8000ed2 <__aeabi_fmul+0x36>
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d118      	bne.n	8001012 <__aeabi_fmul+0x176>
 8000fe0:	2308      	movs	r3, #8
 8000fe2:	4698      	mov	r8, r3
 8000fe4:	3b06      	subs	r3, #6
 8000fe6:	25ff      	movs	r5, #255	@ 0xff
 8000fe8:	469a      	mov	sl, r3
 8000fea:	e772      	b.n	8000ed2 <__aeabi_fmul+0x36>
 8000fec:	20ff      	movs	r0, #255	@ 0xff
 8000fee:	2200      	movs	r2, #0
 8000ff0:	e791      	b.n	8000f16 <__aeabi_fmul+0x7a>
 8000ff2:	2280      	movs	r2, #128	@ 0x80
 8000ff4:	2600      	movs	r6, #0
 8000ff6:	20ff      	movs	r0, #255	@ 0xff
 8000ff8:	03d2      	lsls	r2, r2, #15
 8000ffa:	e78c      	b.n	8000f16 <__aeabi_fmul+0x7a>
 8000ffc:	4641      	mov	r1, r8
 8000ffe:	2202      	movs	r2, #2
 8001000:	3501      	adds	r5, #1
 8001002:	4311      	orrs	r1, r2
 8001004:	4688      	mov	r8, r1
 8001006:	35ff      	adds	r5, #255	@ 0xff
 8001008:	290a      	cmp	r1, #10
 800100a:	dca5      	bgt.n	8000f58 <__aeabi_fmul+0xbc>
 800100c:	2102      	movs	r1, #2
 800100e:	407e      	eors	r6, r7
 8001010:	e774      	b.n	8000efc <__aeabi_fmul+0x60>
 8001012:	230c      	movs	r3, #12
 8001014:	4698      	mov	r8, r3
 8001016:	3b09      	subs	r3, #9
 8001018:	25ff      	movs	r5, #255	@ 0xff
 800101a:	469a      	mov	sl, r3
 800101c:	e759      	b.n	8000ed2 <__aeabi_fmul+0x36>
 800101e:	0018      	movs	r0, r3
 8001020:	f002 fa6a 	bl	80034f8 <__clzsi2>
 8001024:	464a      	mov	r2, r9
 8001026:	1f43      	subs	r3, r0, #5
 8001028:	2576      	movs	r5, #118	@ 0x76
 800102a:	409a      	lsls	r2, r3
 800102c:	2300      	movs	r3, #0
 800102e:	426d      	negs	r5, r5
 8001030:	4691      	mov	r9, r2
 8001032:	4698      	mov	r8, r3
 8001034:	469a      	mov	sl, r3
 8001036:	1a2d      	subs	r5, r5, r0
 8001038:	e74b      	b.n	8000ed2 <__aeabi_fmul+0x36>
 800103a:	0020      	movs	r0, r4
 800103c:	f002 fa5c 	bl	80034f8 <__clzsi2>
 8001040:	4642      	mov	r2, r8
 8001042:	1f43      	subs	r3, r0, #5
 8001044:	409c      	lsls	r4, r3
 8001046:	1a2b      	subs	r3, r5, r0
 8001048:	3b76      	subs	r3, #118	@ 0x76
 800104a:	2100      	movs	r1, #0
 800104c:	1c5d      	adds	r5, r3, #1
 800104e:	2a0a      	cmp	r2, #10
 8001050:	dc00      	bgt.n	8001054 <__aeabi_fmul+0x1b8>
 8001052:	e752      	b.n	8000efa <__aeabi_fmul+0x5e>
 8001054:	e780      	b.n	8000f58 <__aeabi_fmul+0xbc>
 8001056:	2201      	movs	r2, #1
 8001058:	1ad3      	subs	r3, r2, r3
 800105a:	2b1b      	cmp	r3, #27
 800105c:	dd00      	ble.n	8001060 <__aeabi_fmul+0x1c4>
 800105e:	e758      	b.n	8000f12 <__aeabi_fmul+0x76>
 8001060:	359e      	adds	r5, #158	@ 0x9e
 8001062:	0022      	movs	r2, r4
 8001064:	40ac      	lsls	r4, r5
 8001066:	40da      	lsrs	r2, r3
 8001068:	1e63      	subs	r3, r4, #1
 800106a:	419c      	sbcs	r4, r3
 800106c:	4322      	orrs	r2, r4
 800106e:	0753      	lsls	r3, r2, #29
 8001070:	d004      	beq.n	800107c <__aeabi_fmul+0x1e0>
 8001072:	230f      	movs	r3, #15
 8001074:	4013      	ands	r3, r2
 8001076:	2b04      	cmp	r3, #4
 8001078:	d000      	beq.n	800107c <__aeabi_fmul+0x1e0>
 800107a:	3204      	adds	r2, #4
 800107c:	0153      	lsls	r3, r2, #5
 800107e:	d537      	bpl.n	80010f0 <__aeabi_fmul+0x254>
 8001080:	2001      	movs	r0, #1
 8001082:	2200      	movs	r2, #0
 8001084:	e747      	b.n	8000f16 <__aeabi_fmul+0x7a>
 8001086:	0c21      	lsrs	r1, r4, #16
 8001088:	464a      	mov	r2, r9
 800108a:	0424      	lsls	r4, r4, #16
 800108c:	0c24      	lsrs	r4, r4, #16
 800108e:	0027      	movs	r7, r4
 8001090:	0c10      	lsrs	r0, r2, #16
 8001092:	0412      	lsls	r2, r2, #16
 8001094:	0c12      	lsrs	r2, r2, #16
 8001096:	4344      	muls	r4, r0
 8001098:	4357      	muls	r7, r2
 800109a:	4348      	muls	r0, r1
 800109c:	4351      	muls	r1, r2
 800109e:	0c3a      	lsrs	r2, r7, #16
 80010a0:	1909      	adds	r1, r1, r4
 80010a2:	1852      	adds	r2, r2, r1
 80010a4:	4294      	cmp	r4, r2
 80010a6:	d903      	bls.n	80010b0 <__aeabi_fmul+0x214>
 80010a8:	2180      	movs	r1, #128	@ 0x80
 80010aa:	0249      	lsls	r1, r1, #9
 80010ac:	468c      	mov	ip, r1
 80010ae:	4460      	add	r0, ip
 80010b0:	043f      	lsls	r7, r7, #16
 80010b2:	0411      	lsls	r1, r2, #16
 80010b4:	0c3f      	lsrs	r7, r7, #16
 80010b6:	19c9      	adds	r1, r1, r7
 80010b8:	018c      	lsls	r4, r1, #6
 80010ba:	1e67      	subs	r7, r4, #1
 80010bc:	41bc      	sbcs	r4, r7
 80010be:	0c12      	lsrs	r2, r2, #16
 80010c0:	0e89      	lsrs	r1, r1, #26
 80010c2:	1812      	adds	r2, r2, r0
 80010c4:	430c      	orrs	r4, r1
 80010c6:	0192      	lsls	r2, r2, #6
 80010c8:	4314      	orrs	r4, r2
 80010ca:	0112      	lsls	r2, r2, #4
 80010cc:	d50e      	bpl.n	80010ec <__aeabi_fmul+0x250>
 80010ce:	2301      	movs	r3, #1
 80010d0:	0862      	lsrs	r2, r4, #1
 80010d2:	401c      	ands	r4, r3
 80010d4:	4314      	orrs	r4, r2
 80010d6:	e749      	b.n	8000f6c <__aeabi_fmul+0xd0>
 80010d8:	003e      	movs	r6, r7
 80010da:	46a1      	mov	r9, r4
 80010dc:	2280      	movs	r2, #128	@ 0x80
 80010de:	464b      	mov	r3, r9
 80010e0:	03d2      	lsls	r2, r2, #15
 80010e2:	431a      	orrs	r2, r3
 80010e4:	0252      	lsls	r2, r2, #9
 80010e6:	20ff      	movs	r0, #255	@ 0xff
 80010e8:	0a52      	lsrs	r2, r2, #9
 80010ea:	e714      	b.n	8000f16 <__aeabi_fmul+0x7a>
 80010ec:	001d      	movs	r5, r3
 80010ee:	e73d      	b.n	8000f6c <__aeabi_fmul+0xd0>
 80010f0:	0192      	lsls	r2, r2, #6
 80010f2:	2000      	movs	r0, #0
 80010f4:	0a52      	lsrs	r2, r2, #9
 80010f6:	e70e      	b.n	8000f16 <__aeabi_fmul+0x7a>
 80010f8:	290f      	cmp	r1, #15
 80010fa:	d1ed      	bne.n	80010d8 <__aeabi_fmul+0x23c>
 80010fc:	2280      	movs	r2, #128	@ 0x80
 80010fe:	464b      	mov	r3, r9
 8001100:	03d2      	lsls	r2, r2, #15
 8001102:	4213      	tst	r3, r2
 8001104:	d0ea      	beq.n	80010dc <__aeabi_fmul+0x240>
 8001106:	4214      	tst	r4, r2
 8001108:	d1e8      	bne.n	80010dc <__aeabi_fmul+0x240>
 800110a:	003e      	movs	r6, r7
 800110c:	20ff      	movs	r0, #255	@ 0xff
 800110e:	4322      	orrs	r2, r4
 8001110:	e701      	b.n	8000f16 <__aeabi_fmul+0x7a>
 8001112:	46c0      	nop			@ (mov r8, r8)
 8001114:	f7ffffff 	.word	0xf7ffffff

08001118 <__aeabi_fsub>:
 8001118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800111a:	4647      	mov	r7, r8
 800111c:	46ce      	mov	lr, r9
 800111e:	024e      	lsls	r6, r1, #9
 8001120:	0243      	lsls	r3, r0, #9
 8001122:	0045      	lsls	r5, r0, #1
 8001124:	0a72      	lsrs	r2, r6, #9
 8001126:	0fc4      	lsrs	r4, r0, #31
 8001128:	0048      	lsls	r0, r1, #1
 800112a:	b580      	push	{r7, lr}
 800112c:	4694      	mov	ip, r2
 800112e:	0a5f      	lsrs	r7, r3, #9
 8001130:	0e2d      	lsrs	r5, r5, #24
 8001132:	099b      	lsrs	r3, r3, #6
 8001134:	0e00      	lsrs	r0, r0, #24
 8001136:	0fc9      	lsrs	r1, r1, #31
 8001138:	09b6      	lsrs	r6, r6, #6
 800113a:	28ff      	cmp	r0, #255	@ 0xff
 800113c:	d024      	beq.n	8001188 <__aeabi_fsub+0x70>
 800113e:	2201      	movs	r2, #1
 8001140:	4051      	eors	r1, r2
 8001142:	1a2a      	subs	r2, r5, r0
 8001144:	428c      	cmp	r4, r1
 8001146:	d00f      	beq.n	8001168 <__aeabi_fsub+0x50>
 8001148:	2a00      	cmp	r2, #0
 800114a:	dc00      	bgt.n	800114e <__aeabi_fsub+0x36>
 800114c:	e16a      	b.n	8001424 <__aeabi_fsub+0x30c>
 800114e:	2800      	cmp	r0, #0
 8001150:	d135      	bne.n	80011be <__aeabi_fsub+0xa6>
 8001152:	2e00      	cmp	r6, #0
 8001154:	d100      	bne.n	8001158 <__aeabi_fsub+0x40>
 8001156:	e0a2      	b.n	800129e <__aeabi_fsub+0x186>
 8001158:	1e51      	subs	r1, r2, #1
 800115a:	2a01      	cmp	r2, #1
 800115c:	d100      	bne.n	8001160 <__aeabi_fsub+0x48>
 800115e:	e124      	b.n	80013aa <__aeabi_fsub+0x292>
 8001160:	2aff      	cmp	r2, #255	@ 0xff
 8001162:	d021      	beq.n	80011a8 <__aeabi_fsub+0x90>
 8001164:	000a      	movs	r2, r1
 8001166:	e02f      	b.n	80011c8 <__aeabi_fsub+0xb0>
 8001168:	2a00      	cmp	r2, #0
 800116a:	dc00      	bgt.n	800116e <__aeabi_fsub+0x56>
 800116c:	e167      	b.n	800143e <__aeabi_fsub+0x326>
 800116e:	2800      	cmp	r0, #0
 8001170:	d05e      	beq.n	8001230 <__aeabi_fsub+0x118>
 8001172:	2dff      	cmp	r5, #255	@ 0xff
 8001174:	d018      	beq.n	80011a8 <__aeabi_fsub+0x90>
 8001176:	2180      	movs	r1, #128	@ 0x80
 8001178:	04c9      	lsls	r1, r1, #19
 800117a:	430e      	orrs	r6, r1
 800117c:	2a1b      	cmp	r2, #27
 800117e:	dc00      	bgt.n	8001182 <__aeabi_fsub+0x6a>
 8001180:	e076      	b.n	8001270 <__aeabi_fsub+0x158>
 8001182:	002a      	movs	r2, r5
 8001184:	3301      	adds	r3, #1
 8001186:	e032      	b.n	80011ee <__aeabi_fsub+0xd6>
 8001188:	002a      	movs	r2, r5
 800118a:	3aff      	subs	r2, #255	@ 0xff
 800118c:	4691      	mov	r9, r2
 800118e:	2e00      	cmp	r6, #0
 8001190:	d042      	beq.n	8001218 <__aeabi_fsub+0x100>
 8001192:	428c      	cmp	r4, r1
 8001194:	d055      	beq.n	8001242 <__aeabi_fsub+0x12a>
 8001196:	464a      	mov	r2, r9
 8001198:	2a00      	cmp	r2, #0
 800119a:	d100      	bne.n	800119e <__aeabi_fsub+0x86>
 800119c:	e09c      	b.n	80012d8 <__aeabi_fsub+0x1c0>
 800119e:	2d00      	cmp	r5, #0
 80011a0:	d100      	bne.n	80011a4 <__aeabi_fsub+0x8c>
 80011a2:	e077      	b.n	8001294 <__aeabi_fsub+0x17c>
 80011a4:	000c      	movs	r4, r1
 80011a6:	0033      	movs	r3, r6
 80011a8:	08db      	lsrs	r3, r3, #3
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d100      	bne.n	80011b0 <__aeabi_fsub+0x98>
 80011ae:	e06e      	b.n	800128e <__aeabi_fsub+0x176>
 80011b0:	2280      	movs	r2, #128	@ 0x80
 80011b2:	03d2      	lsls	r2, r2, #15
 80011b4:	4313      	orrs	r3, r2
 80011b6:	025b      	lsls	r3, r3, #9
 80011b8:	20ff      	movs	r0, #255	@ 0xff
 80011ba:	0a5b      	lsrs	r3, r3, #9
 80011bc:	e024      	b.n	8001208 <__aeabi_fsub+0xf0>
 80011be:	2dff      	cmp	r5, #255	@ 0xff
 80011c0:	d0f2      	beq.n	80011a8 <__aeabi_fsub+0x90>
 80011c2:	2180      	movs	r1, #128	@ 0x80
 80011c4:	04c9      	lsls	r1, r1, #19
 80011c6:	430e      	orrs	r6, r1
 80011c8:	2101      	movs	r1, #1
 80011ca:	2a1b      	cmp	r2, #27
 80011cc:	dc08      	bgt.n	80011e0 <__aeabi_fsub+0xc8>
 80011ce:	0031      	movs	r1, r6
 80011d0:	2020      	movs	r0, #32
 80011d2:	40d1      	lsrs	r1, r2
 80011d4:	1a82      	subs	r2, r0, r2
 80011d6:	4096      	lsls	r6, r2
 80011d8:	0032      	movs	r2, r6
 80011da:	1e50      	subs	r0, r2, #1
 80011dc:	4182      	sbcs	r2, r0
 80011de:	4311      	orrs	r1, r2
 80011e0:	1a5b      	subs	r3, r3, r1
 80011e2:	015a      	lsls	r2, r3, #5
 80011e4:	d460      	bmi.n	80012a8 <__aeabi_fsub+0x190>
 80011e6:	2107      	movs	r1, #7
 80011e8:	002a      	movs	r2, r5
 80011ea:	4019      	ands	r1, r3
 80011ec:	d057      	beq.n	800129e <__aeabi_fsub+0x186>
 80011ee:	210f      	movs	r1, #15
 80011f0:	4019      	ands	r1, r3
 80011f2:	2904      	cmp	r1, #4
 80011f4:	d000      	beq.n	80011f8 <__aeabi_fsub+0xe0>
 80011f6:	3304      	adds	r3, #4
 80011f8:	0159      	lsls	r1, r3, #5
 80011fa:	d550      	bpl.n	800129e <__aeabi_fsub+0x186>
 80011fc:	1c50      	adds	r0, r2, #1
 80011fe:	2afe      	cmp	r2, #254	@ 0xfe
 8001200:	d045      	beq.n	800128e <__aeabi_fsub+0x176>
 8001202:	019b      	lsls	r3, r3, #6
 8001204:	b2c0      	uxtb	r0, r0
 8001206:	0a5b      	lsrs	r3, r3, #9
 8001208:	05c0      	lsls	r0, r0, #23
 800120a:	4318      	orrs	r0, r3
 800120c:	07e4      	lsls	r4, r4, #31
 800120e:	4320      	orrs	r0, r4
 8001210:	bcc0      	pop	{r6, r7}
 8001212:	46b9      	mov	r9, r7
 8001214:	46b0      	mov	r8, r6
 8001216:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001218:	2201      	movs	r2, #1
 800121a:	4051      	eors	r1, r2
 800121c:	428c      	cmp	r4, r1
 800121e:	d1ba      	bne.n	8001196 <__aeabi_fsub+0x7e>
 8001220:	464a      	mov	r2, r9
 8001222:	2a00      	cmp	r2, #0
 8001224:	d010      	beq.n	8001248 <__aeabi_fsub+0x130>
 8001226:	2d00      	cmp	r5, #0
 8001228:	d100      	bne.n	800122c <__aeabi_fsub+0x114>
 800122a:	e098      	b.n	800135e <__aeabi_fsub+0x246>
 800122c:	2300      	movs	r3, #0
 800122e:	e7bb      	b.n	80011a8 <__aeabi_fsub+0x90>
 8001230:	2e00      	cmp	r6, #0
 8001232:	d034      	beq.n	800129e <__aeabi_fsub+0x186>
 8001234:	1e51      	subs	r1, r2, #1
 8001236:	2a01      	cmp	r2, #1
 8001238:	d06e      	beq.n	8001318 <__aeabi_fsub+0x200>
 800123a:	2aff      	cmp	r2, #255	@ 0xff
 800123c:	d0b4      	beq.n	80011a8 <__aeabi_fsub+0x90>
 800123e:	000a      	movs	r2, r1
 8001240:	e79c      	b.n	800117c <__aeabi_fsub+0x64>
 8001242:	2a00      	cmp	r2, #0
 8001244:	d000      	beq.n	8001248 <__aeabi_fsub+0x130>
 8001246:	e088      	b.n	800135a <__aeabi_fsub+0x242>
 8001248:	20fe      	movs	r0, #254	@ 0xfe
 800124a:	1c6a      	adds	r2, r5, #1
 800124c:	4210      	tst	r0, r2
 800124e:	d000      	beq.n	8001252 <__aeabi_fsub+0x13a>
 8001250:	e092      	b.n	8001378 <__aeabi_fsub+0x260>
 8001252:	2d00      	cmp	r5, #0
 8001254:	d000      	beq.n	8001258 <__aeabi_fsub+0x140>
 8001256:	e0a4      	b.n	80013a2 <__aeabi_fsub+0x28a>
 8001258:	2b00      	cmp	r3, #0
 800125a:	d100      	bne.n	800125e <__aeabi_fsub+0x146>
 800125c:	e0cb      	b.n	80013f6 <__aeabi_fsub+0x2de>
 800125e:	2e00      	cmp	r6, #0
 8001260:	d000      	beq.n	8001264 <__aeabi_fsub+0x14c>
 8001262:	e0ca      	b.n	80013fa <__aeabi_fsub+0x2e2>
 8001264:	2200      	movs	r2, #0
 8001266:	08db      	lsrs	r3, r3, #3
 8001268:	025b      	lsls	r3, r3, #9
 800126a:	0a5b      	lsrs	r3, r3, #9
 800126c:	b2d0      	uxtb	r0, r2
 800126e:	e7cb      	b.n	8001208 <__aeabi_fsub+0xf0>
 8001270:	0031      	movs	r1, r6
 8001272:	2020      	movs	r0, #32
 8001274:	40d1      	lsrs	r1, r2
 8001276:	1a82      	subs	r2, r0, r2
 8001278:	4096      	lsls	r6, r2
 800127a:	0032      	movs	r2, r6
 800127c:	1e50      	subs	r0, r2, #1
 800127e:	4182      	sbcs	r2, r0
 8001280:	430a      	orrs	r2, r1
 8001282:	189b      	adds	r3, r3, r2
 8001284:	015a      	lsls	r2, r3, #5
 8001286:	d5ae      	bpl.n	80011e6 <__aeabi_fsub+0xce>
 8001288:	1c6a      	adds	r2, r5, #1
 800128a:	2dfe      	cmp	r5, #254	@ 0xfe
 800128c:	d14a      	bne.n	8001324 <__aeabi_fsub+0x20c>
 800128e:	20ff      	movs	r0, #255	@ 0xff
 8001290:	2300      	movs	r3, #0
 8001292:	e7b9      	b.n	8001208 <__aeabi_fsub+0xf0>
 8001294:	22ff      	movs	r2, #255	@ 0xff
 8001296:	2b00      	cmp	r3, #0
 8001298:	d14b      	bne.n	8001332 <__aeabi_fsub+0x21a>
 800129a:	000c      	movs	r4, r1
 800129c:	0033      	movs	r3, r6
 800129e:	08db      	lsrs	r3, r3, #3
 80012a0:	2aff      	cmp	r2, #255	@ 0xff
 80012a2:	d100      	bne.n	80012a6 <__aeabi_fsub+0x18e>
 80012a4:	e781      	b.n	80011aa <__aeabi_fsub+0x92>
 80012a6:	e7df      	b.n	8001268 <__aeabi_fsub+0x150>
 80012a8:	019f      	lsls	r7, r3, #6
 80012aa:	09bf      	lsrs	r7, r7, #6
 80012ac:	0038      	movs	r0, r7
 80012ae:	f002 f923 	bl	80034f8 <__clzsi2>
 80012b2:	3805      	subs	r0, #5
 80012b4:	4087      	lsls	r7, r0
 80012b6:	4285      	cmp	r5, r0
 80012b8:	dc21      	bgt.n	80012fe <__aeabi_fsub+0x1e6>
 80012ba:	003b      	movs	r3, r7
 80012bc:	2120      	movs	r1, #32
 80012be:	1b42      	subs	r2, r0, r5
 80012c0:	3201      	adds	r2, #1
 80012c2:	40d3      	lsrs	r3, r2
 80012c4:	1a8a      	subs	r2, r1, r2
 80012c6:	4097      	lsls	r7, r2
 80012c8:	1e7a      	subs	r2, r7, #1
 80012ca:	4197      	sbcs	r7, r2
 80012cc:	2200      	movs	r2, #0
 80012ce:	433b      	orrs	r3, r7
 80012d0:	0759      	lsls	r1, r3, #29
 80012d2:	d000      	beq.n	80012d6 <__aeabi_fsub+0x1be>
 80012d4:	e78b      	b.n	80011ee <__aeabi_fsub+0xd6>
 80012d6:	e78f      	b.n	80011f8 <__aeabi_fsub+0xe0>
 80012d8:	20fe      	movs	r0, #254	@ 0xfe
 80012da:	1c6a      	adds	r2, r5, #1
 80012dc:	4210      	tst	r0, r2
 80012de:	d112      	bne.n	8001306 <__aeabi_fsub+0x1ee>
 80012e0:	2d00      	cmp	r5, #0
 80012e2:	d152      	bne.n	800138a <__aeabi_fsub+0x272>
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d07c      	beq.n	80013e2 <__aeabi_fsub+0x2ca>
 80012e8:	2e00      	cmp	r6, #0
 80012ea:	d0bb      	beq.n	8001264 <__aeabi_fsub+0x14c>
 80012ec:	1b9a      	subs	r2, r3, r6
 80012ee:	0150      	lsls	r0, r2, #5
 80012f0:	d400      	bmi.n	80012f4 <__aeabi_fsub+0x1dc>
 80012f2:	e08b      	b.n	800140c <__aeabi_fsub+0x2f4>
 80012f4:	2401      	movs	r4, #1
 80012f6:	2200      	movs	r2, #0
 80012f8:	1af3      	subs	r3, r6, r3
 80012fa:	400c      	ands	r4, r1
 80012fc:	e7e8      	b.n	80012d0 <__aeabi_fsub+0x1b8>
 80012fe:	4b56      	ldr	r3, [pc, #344]	@ (8001458 <__aeabi_fsub+0x340>)
 8001300:	1a2a      	subs	r2, r5, r0
 8001302:	403b      	ands	r3, r7
 8001304:	e7e4      	b.n	80012d0 <__aeabi_fsub+0x1b8>
 8001306:	1b9f      	subs	r7, r3, r6
 8001308:	017a      	lsls	r2, r7, #5
 800130a:	d446      	bmi.n	800139a <__aeabi_fsub+0x282>
 800130c:	2f00      	cmp	r7, #0
 800130e:	d1cd      	bne.n	80012ac <__aeabi_fsub+0x194>
 8001310:	2400      	movs	r4, #0
 8001312:	2000      	movs	r0, #0
 8001314:	2300      	movs	r3, #0
 8001316:	e777      	b.n	8001208 <__aeabi_fsub+0xf0>
 8001318:	199b      	adds	r3, r3, r6
 800131a:	2501      	movs	r5, #1
 800131c:	3201      	adds	r2, #1
 800131e:	0159      	lsls	r1, r3, #5
 8001320:	d400      	bmi.n	8001324 <__aeabi_fsub+0x20c>
 8001322:	e760      	b.n	80011e6 <__aeabi_fsub+0xce>
 8001324:	2101      	movs	r1, #1
 8001326:	484d      	ldr	r0, [pc, #308]	@ (800145c <__aeabi_fsub+0x344>)
 8001328:	4019      	ands	r1, r3
 800132a:	085b      	lsrs	r3, r3, #1
 800132c:	4003      	ands	r3, r0
 800132e:	430b      	orrs	r3, r1
 8001330:	e7ce      	b.n	80012d0 <__aeabi_fsub+0x1b8>
 8001332:	1e57      	subs	r7, r2, #1
 8001334:	2a01      	cmp	r2, #1
 8001336:	d05a      	beq.n	80013ee <__aeabi_fsub+0x2d6>
 8001338:	000c      	movs	r4, r1
 800133a:	2aff      	cmp	r2, #255	@ 0xff
 800133c:	d033      	beq.n	80013a6 <__aeabi_fsub+0x28e>
 800133e:	2201      	movs	r2, #1
 8001340:	2f1b      	cmp	r7, #27
 8001342:	dc07      	bgt.n	8001354 <__aeabi_fsub+0x23c>
 8001344:	2120      	movs	r1, #32
 8001346:	1bc9      	subs	r1, r1, r7
 8001348:	001a      	movs	r2, r3
 800134a:	408b      	lsls	r3, r1
 800134c:	40fa      	lsrs	r2, r7
 800134e:	1e59      	subs	r1, r3, #1
 8001350:	418b      	sbcs	r3, r1
 8001352:	431a      	orrs	r2, r3
 8001354:	0005      	movs	r5, r0
 8001356:	1ab3      	subs	r3, r6, r2
 8001358:	e743      	b.n	80011e2 <__aeabi_fsub+0xca>
 800135a:	2d00      	cmp	r5, #0
 800135c:	d123      	bne.n	80013a6 <__aeabi_fsub+0x28e>
 800135e:	22ff      	movs	r2, #255	@ 0xff
 8001360:	2b00      	cmp	r3, #0
 8001362:	d09b      	beq.n	800129c <__aeabi_fsub+0x184>
 8001364:	1e51      	subs	r1, r2, #1
 8001366:	2a01      	cmp	r2, #1
 8001368:	d0d6      	beq.n	8001318 <__aeabi_fsub+0x200>
 800136a:	2aff      	cmp	r2, #255	@ 0xff
 800136c:	d01b      	beq.n	80013a6 <__aeabi_fsub+0x28e>
 800136e:	291b      	cmp	r1, #27
 8001370:	dd2c      	ble.n	80013cc <__aeabi_fsub+0x2b4>
 8001372:	0002      	movs	r2, r0
 8001374:	1c73      	adds	r3, r6, #1
 8001376:	e73a      	b.n	80011ee <__aeabi_fsub+0xd6>
 8001378:	2aff      	cmp	r2, #255	@ 0xff
 800137a:	d088      	beq.n	800128e <__aeabi_fsub+0x176>
 800137c:	199b      	adds	r3, r3, r6
 800137e:	085b      	lsrs	r3, r3, #1
 8001380:	0759      	lsls	r1, r3, #29
 8001382:	d000      	beq.n	8001386 <__aeabi_fsub+0x26e>
 8001384:	e733      	b.n	80011ee <__aeabi_fsub+0xd6>
 8001386:	08db      	lsrs	r3, r3, #3
 8001388:	e76e      	b.n	8001268 <__aeabi_fsub+0x150>
 800138a:	2b00      	cmp	r3, #0
 800138c:	d110      	bne.n	80013b0 <__aeabi_fsub+0x298>
 800138e:	2e00      	cmp	r6, #0
 8001390:	d043      	beq.n	800141a <__aeabi_fsub+0x302>
 8001392:	2401      	movs	r4, #1
 8001394:	0033      	movs	r3, r6
 8001396:	400c      	ands	r4, r1
 8001398:	e706      	b.n	80011a8 <__aeabi_fsub+0x90>
 800139a:	2401      	movs	r4, #1
 800139c:	1af7      	subs	r7, r6, r3
 800139e:	400c      	ands	r4, r1
 80013a0:	e784      	b.n	80012ac <__aeabi_fsub+0x194>
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d104      	bne.n	80013b0 <__aeabi_fsub+0x298>
 80013a6:	0033      	movs	r3, r6
 80013a8:	e6fe      	b.n	80011a8 <__aeabi_fsub+0x90>
 80013aa:	2501      	movs	r5, #1
 80013ac:	1b9b      	subs	r3, r3, r6
 80013ae:	e718      	b.n	80011e2 <__aeabi_fsub+0xca>
 80013b0:	2e00      	cmp	r6, #0
 80013b2:	d100      	bne.n	80013b6 <__aeabi_fsub+0x29e>
 80013b4:	e6f8      	b.n	80011a8 <__aeabi_fsub+0x90>
 80013b6:	2280      	movs	r2, #128	@ 0x80
 80013b8:	03d2      	lsls	r2, r2, #15
 80013ba:	4297      	cmp	r7, r2
 80013bc:	d304      	bcc.n	80013c8 <__aeabi_fsub+0x2b0>
 80013be:	4594      	cmp	ip, r2
 80013c0:	d202      	bcs.n	80013c8 <__aeabi_fsub+0x2b0>
 80013c2:	2401      	movs	r4, #1
 80013c4:	0033      	movs	r3, r6
 80013c6:	400c      	ands	r4, r1
 80013c8:	08db      	lsrs	r3, r3, #3
 80013ca:	e6f1      	b.n	80011b0 <__aeabi_fsub+0x98>
 80013cc:	001a      	movs	r2, r3
 80013ce:	2520      	movs	r5, #32
 80013d0:	40ca      	lsrs	r2, r1
 80013d2:	1a69      	subs	r1, r5, r1
 80013d4:	408b      	lsls	r3, r1
 80013d6:	1e59      	subs	r1, r3, #1
 80013d8:	418b      	sbcs	r3, r1
 80013da:	4313      	orrs	r3, r2
 80013dc:	0005      	movs	r5, r0
 80013de:	199b      	adds	r3, r3, r6
 80013e0:	e750      	b.n	8001284 <__aeabi_fsub+0x16c>
 80013e2:	2e00      	cmp	r6, #0
 80013e4:	d094      	beq.n	8001310 <__aeabi_fsub+0x1f8>
 80013e6:	2401      	movs	r4, #1
 80013e8:	0033      	movs	r3, r6
 80013ea:	400c      	ands	r4, r1
 80013ec:	e73a      	b.n	8001264 <__aeabi_fsub+0x14c>
 80013ee:	000c      	movs	r4, r1
 80013f0:	2501      	movs	r5, #1
 80013f2:	1af3      	subs	r3, r6, r3
 80013f4:	e6f5      	b.n	80011e2 <__aeabi_fsub+0xca>
 80013f6:	0033      	movs	r3, r6
 80013f8:	e734      	b.n	8001264 <__aeabi_fsub+0x14c>
 80013fa:	199b      	adds	r3, r3, r6
 80013fc:	2200      	movs	r2, #0
 80013fe:	0159      	lsls	r1, r3, #5
 8001400:	d5c1      	bpl.n	8001386 <__aeabi_fsub+0x26e>
 8001402:	4a15      	ldr	r2, [pc, #84]	@ (8001458 <__aeabi_fsub+0x340>)
 8001404:	4013      	ands	r3, r2
 8001406:	08db      	lsrs	r3, r3, #3
 8001408:	2201      	movs	r2, #1
 800140a:	e72d      	b.n	8001268 <__aeabi_fsub+0x150>
 800140c:	2a00      	cmp	r2, #0
 800140e:	d100      	bne.n	8001412 <__aeabi_fsub+0x2fa>
 8001410:	e77e      	b.n	8001310 <__aeabi_fsub+0x1f8>
 8001412:	0013      	movs	r3, r2
 8001414:	2200      	movs	r2, #0
 8001416:	08db      	lsrs	r3, r3, #3
 8001418:	e726      	b.n	8001268 <__aeabi_fsub+0x150>
 800141a:	2380      	movs	r3, #128	@ 0x80
 800141c:	2400      	movs	r4, #0
 800141e:	20ff      	movs	r0, #255	@ 0xff
 8001420:	03db      	lsls	r3, r3, #15
 8001422:	e6f1      	b.n	8001208 <__aeabi_fsub+0xf0>
 8001424:	2a00      	cmp	r2, #0
 8001426:	d100      	bne.n	800142a <__aeabi_fsub+0x312>
 8001428:	e756      	b.n	80012d8 <__aeabi_fsub+0x1c0>
 800142a:	1b47      	subs	r7, r0, r5
 800142c:	003a      	movs	r2, r7
 800142e:	2d00      	cmp	r5, #0
 8001430:	d100      	bne.n	8001434 <__aeabi_fsub+0x31c>
 8001432:	e730      	b.n	8001296 <__aeabi_fsub+0x17e>
 8001434:	2280      	movs	r2, #128	@ 0x80
 8001436:	04d2      	lsls	r2, r2, #19
 8001438:	000c      	movs	r4, r1
 800143a:	4313      	orrs	r3, r2
 800143c:	e77f      	b.n	800133e <__aeabi_fsub+0x226>
 800143e:	2a00      	cmp	r2, #0
 8001440:	d100      	bne.n	8001444 <__aeabi_fsub+0x32c>
 8001442:	e701      	b.n	8001248 <__aeabi_fsub+0x130>
 8001444:	1b41      	subs	r1, r0, r5
 8001446:	2d00      	cmp	r5, #0
 8001448:	d101      	bne.n	800144e <__aeabi_fsub+0x336>
 800144a:	000a      	movs	r2, r1
 800144c:	e788      	b.n	8001360 <__aeabi_fsub+0x248>
 800144e:	2280      	movs	r2, #128	@ 0x80
 8001450:	04d2      	lsls	r2, r2, #19
 8001452:	4313      	orrs	r3, r2
 8001454:	e78b      	b.n	800136e <__aeabi_fsub+0x256>
 8001456:	46c0      	nop			@ (mov r8, r8)
 8001458:	fbffffff 	.word	0xfbffffff
 800145c:	7dffffff 	.word	0x7dffffff

08001460 <__aeabi_fcmpun>:
 8001460:	0243      	lsls	r3, r0, #9
 8001462:	024a      	lsls	r2, r1, #9
 8001464:	0040      	lsls	r0, r0, #1
 8001466:	0049      	lsls	r1, r1, #1
 8001468:	0a5b      	lsrs	r3, r3, #9
 800146a:	0a52      	lsrs	r2, r2, #9
 800146c:	0e09      	lsrs	r1, r1, #24
 800146e:	0e00      	lsrs	r0, r0, #24
 8001470:	28ff      	cmp	r0, #255	@ 0xff
 8001472:	d006      	beq.n	8001482 <__aeabi_fcmpun+0x22>
 8001474:	2000      	movs	r0, #0
 8001476:	29ff      	cmp	r1, #255	@ 0xff
 8001478:	d102      	bne.n	8001480 <__aeabi_fcmpun+0x20>
 800147a:	1e53      	subs	r3, r2, #1
 800147c:	419a      	sbcs	r2, r3
 800147e:	0010      	movs	r0, r2
 8001480:	4770      	bx	lr
 8001482:	38fe      	subs	r0, #254	@ 0xfe
 8001484:	2b00      	cmp	r3, #0
 8001486:	d1fb      	bne.n	8001480 <__aeabi_fcmpun+0x20>
 8001488:	e7f4      	b.n	8001474 <__aeabi_fcmpun+0x14>
 800148a:	46c0      	nop			@ (mov r8, r8)

0800148c <__aeabi_f2iz>:
 800148c:	0241      	lsls	r1, r0, #9
 800148e:	0042      	lsls	r2, r0, #1
 8001490:	0fc3      	lsrs	r3, r0, #31
 8001492:	0a49      	lsrs	r1, r1, #9
 8001494:	2000      	movs	r0, #0
 8001496:	0e12      	lsrs	r2, r2, #24
 8001498:	2a7e      	cmp	r2, #126	@ 0x7e
 800149a:	dd03      	ble.n	80014a4 <__aeabi_f2iz+0x18>
 800149c:	2a9d      	cmp	r2, #157	@ 0x9d
 800149e:	dd02      	ble.n	80014a6 <__aeabi_f2iz+0x1a>
 80014a0:	4a09      	ldr	r2, [pc, #36]	@ (80014c8 <__aeabi_f2iz+0x3c>)
 80014a2:	1898      	adds	r0, r3, r2
 80014a4:	4770      	bx	lr
 80014a6:	2080      	movs	r0, #128	@ 0x80
 80014a8:	0400      	lsls	r0, r0, #16
 80014aa:	4301      	orrs	r1, r0
 80014ac:	2a95      	cmp	r2, #149	@ 0x95
 80014ae:	dc07      	bgt.n	80014c0 <__aeabi_f2iz+0x34>
 80014b0:	2096      	movs	r0, #150	@ 0x96
 80014b2:	1a82      	subs	r2, r0, r2
 80014b4:	40d1      	lsrs	r1, r2
 80014b6:	4248      	negs	r0, r1
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d1f3      	bne.n	80014a4 <__aeabi_f2iz+0x18>
 80014bc:	0008      	movs	r0, r1
 80014be:	e7f1      	b.n	80014a4 <__aeabi_f2iz+0x18>
 80014c0:	3a96      	subs	r2, #150	@ 0x96
 80014c2:	4091      	lsls	r1, r2
 80014c4:	e7f7      	b.n	80014b6 <__aeabi_f2iz+0x2a>
 80014c6:	46c0      	nop			@ (mov r8, r8)
 80014c8:	7fffffff 	.word	0x7fffffff

080014cc <__aeabi_i2f>:
 80014cc:	b570      	push	{r4, r5, r6, lr}
 80014ce:	2800      	cmp	r0, #0
 80014d0:	d013      	beq.n	80014fa <__aeabi_i2f+0x2e>
 80014d2:	17c3      	asrs	r3, r0, #31
 80014d4:	18c5      	adds	r5, r0, r3
 80014d6:	405d      	eors	r5, r3
 80014d8:	0fc4      	lsrs	r4, r0, #31
 80014da:	0028      	movs	r0, r5
 80014dc:	f002 f80c 	bl	80034f8 <__clzsi2>
 80014e0:	239e      	movs	r3, #158	@ 0x9e
 80014e2:	0001      	movs	r1, r0
 80014e4:	1a1b      	subs	r3, r3, r0
 80014e6:	2b96      	cmp	r3, #150	@ 0x96
 80014e8:	dc0f      	bgt.n	800150a <__aeabi_i2f+0x3e>
 80014ea:	2808      	cmp	r0, #8
 80014ec:	d034      	beq.n	8001558 <__aeabi_i2f+0x8c>
 80014ee:	3908      	subs	r1, #8
 80014f0:	408d      	lsls	r5, r1
 80014f2:	026d      	lsls	r5, r5, #9
 80014f4:	0a6d      	lsrs	r5, r5, #9
 80014f6:	b2d8      	uxtb	r0, r3
 80014f8:	e002      	b.n	8001500 <__aeabi_i2f+0x34>
 80014fa:	2400      	movs	r4, #0
 80014fc:	2000      	movs	r0, #0
 80014fe:	2500      	movs	r5, #0
 8001500:	05c0      	lsls	r0, r0, #23
 8001502:	4328      	orrs	r0, r5
 8001504:	07e4      	lsls	r4, r4, #31
 8001506:	4320      	orrs	r0, r4
 8001508:	bd70      	pop	{r4, r5, r6, pc}
 800150a:	2b99      	cmp	r3, #153	@ 0x99
 800150c:	dc16      	bgt.n	800153c <__aeabi_i2f+0x70>
 800150e:	1f42      	subs	r2, r0, #5
 8001510:	2805      	cmp	r0, #5
 8001512:	d000      	beq.n	8001516 <__aeabi_i2f+0x4a>
 8001514:	4095      	lsls	r5, r2
 8001516:	002a      	movs	r2, r5
 8001518:	4811      	ldr	r0, [pc, #68]	@ (8001560 <__aeabi_i2f+0x94>)
 800151a:	4002      	ands	r2, r0
 800151c:	076e      	lsls	r6, r5, #29
 800151e:	d009      	beq.n	8001534 <__aeabi_i2f+0x68>
 8001520:	260f      	movs	r6, #15
 8001522:	4035      	ands	r5, r6
 8001524:	2d04      	cmp	r5, #4
 8001526:	d005      	beq.n	8001534 <__aeabi_i2f+0x68>
 8001528:	3204      	adds	r2, #4
 800152a:	0155      	lsls	r5, r2, #5
 800152c:	d502      	bpl.n	8001534 <__aeabi_i2f+0x68>
 800152e:	239f      	movs	r3, #159	@ 0x9f
 8001530:	4002      	ands	r2, r0
 8001532:	1a5b      	subs	r3, r3, r1
 8001534:	0192      	lsls	r2, r2, #6
 8001536:	0a55      	lsrs	r5, r2, #9
 8001538:	b2d8      	uxtb	r0, r3
 800153a:	e7e1      	b.n	8001500 <__aeabi_i2f+0x34>
 800153c:	2205      	movs	r2, #5
 800153e:	1a12      	subs	r2, r2, r0
 8001540:	0028      	movs	r0, r5
 8001542:	40d0      	lsrs	r0, r2
 8001544:	0002      	movs	r2, r0
 8001546:	0008      	movs	r0, r1
 8001548:	301b      	adds	r0, #27
 800154a:	4085      	lsls	r5, r0
 800154c:	0028      	movs	r0, r5
 800154e:	1e45      	subs	r5, r0, #1
 8001550:	41a8      	sbcs	r0, r5
 8001552:	4302      	orrs	r2, r0
 8001554:	0015      	movs	r5, r2
 8001556:	e7de      	b.n	8001516 <__aeabi_i2f+0x4a>
 8001558:	026d      	lsls	r5, r5, #9
 800155a:	2096      	movs	r0, #150	@ 0x96
 800155c:	0a6d      	lsrs	r5, r5, #9
 800155e:	e7cf      	b.n	8001500 <__aeabi_i2f+0x34>
 8001560:	fbffffff 	.word	0xfbffffff

08001564 <__aeabi_ui2f>:
 8001564:	b570      	push	{r4, r5, r6, lr}
 8001566:	1e04      	subs	r4, r0, #0
 8001568:	d00e      	beq.n	8001588 <__aeabi_ui2f+0x24>
 800156a:	f001 ffc5 	bl	80034f8 <__clzsi2>
 800156e:	239e      	movs	r3, #158	@ 0x9e
 8001570:	0001      	movs	r1, r0
 8001572:	1a1b      	subs	r3, r3, r0
 8001574:	2b96      	cmp	r3, #150	@ 0x96
 8001576:	dc0c      	bgt.n	8001592 <__aeabi_ui2f+0x2e>
 8001578:	2808      	cmp	r0, #8
 800157a:	d02f      	beq.n	80015dc <__aeabi_ui2f+0x78>
 800157c:	3908      	subs	r1, #8
 800157e:	408c      	lsls	r4, r1
 8001580:	0264      	lsls	r4, r4, #9
 8001582:	0a64      	lsrs	r4, r4, #9
 8001584:	b2d8      	uxtb	r0, r3
 8001586:	e001      	b.n	800158c <__aeabi_ui2f+0x28>
 8001588:	2000      	movs	r0, #0
 800158a:	2400      	movs	r4, #0
 800158c:	05c0      	lsls	r0, r0, #23
 800158e:	4320      	orrs	r0, r4
 8001590:	bd70      	pop	{r4, r5, r6, pc}
 8001592:	2b99      	cmp	r3, #153	@ 0x99
 8001594:	dc16      	bgt.n	80015c4 <__aeabi_ui2f+0x60>
 8001596:	1f42      	subs	r2, r0, #5
 8001598:	2805      	cmp	r0, #5
 800159a:	d000      	beq.n	800159e <__aeabi_ui2f+0x3a>
 800159c:	4094      	lsls	r4, r2
 800159e:	0022      	movs	r2, r4
 80015a0:	4810      	ldr	r0, [pc, #64]	@ (80015e4 <__aeabi_ui2f+0x80>)
 80015a2:	4002      	ands	r2, r0
 80015a4:	0765      	lsls	r5, r4, #29
 80015a6:	d009      	beq.n	80015bc <__aeabi_ui2f+0x58>
 80015a8:	250f      	movs	r5, #15
 80015aa:	402c      	ands	r4, r5
 80015ac:	2c04      	cmp	r4, #4
 80015ae:	d005      	beq.n	80015bc <__aeabi_ui2f+0x58>
 80015b0:	3204      	adds	r2, #4
 80015b2:	0154      	lsls	r4, r2, #5
 80015b4:	d502      	bpl.n	80015bc <__aeabi_ui2f+0x58>
 80015b6:	239f      	movs	r3, #159	@ 0x9f
 80015b8:	4002      	ands	r2, r0
 80015ba:	1a5b      	subs	r3, r3, r1
 80015bc:	0192      	lsls	r2, r2, #6
 80015be:	0a54      	lsrs	r4, r2, #9
 80015c0:	b2d8      	uxtb	r0, r3
 80015c2:	e7e3      	b.n	800158c <__aeabi_ui2f+0x28>
 80015c4:	0002      	movs	r2, r0
 80015c6:	0020      	movs	r0, r4
 80015c8:	321b      	adds	r2, #27
 80015ca:	4090      	lsls	r0, r2
 80015cc:	0002      	movs	r2, r0
 80015ce:	1e50      	subs	r0, r2, #1
 80015d0:	4182      	sbcs	r2, r0
 80015d2:	2005      	movs	r0, #5
 80015d4:	1a40      	subs	r0, r0, r1
 80015d6:	40c4      	lsrs	r4, r0
 80015d8:	4314      	orrs	r4, r2
 80015da:	e7e0      	b.n	800159e <__aeabi_ui2f+0x3a>
 80015dc:	0264      	lsls	r4, r4, #9
 80015de:	2096      	movs	r0, #150	@ 0x96
 80015e0:	0a64      	lsrs	r4, r4, #9
 80015e2:	e7d3      	b.n	800158c <__aeabi_ui2f+0x28>
 80015e4:	fbffffff 	.word	0xfbffffff

080015e8 <__aeabi_dadd>:
 80015e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015ea:	4657      	mov	r7, sl
 80015ec:	464e      	mov	r6, r9
 80015ee:	4645      	mov	r5, r8
 80015f0:	46de      	mov	lr, fp
 80015f2:	b5e0      	push	{r5, r6, r7, lr}
 80015f4:	b083      	sub	sp, #12
 80015f6:	9000      	str	r0, [sp, #0]
 80015f8:	9101      	str	r1, [sp, #4]
 80015fa:	030c      	lsls	r4, r1, #12
 80015fc:	004f      	lsls	r7, r1, #1
 80015fe:	0fce      	lsrs	r6, r1, #31
 8001600:	0a61      	lsrs	r1, r4, #9
 8001602:	9c00      	ldr	r4, [sp, #0]
 8001604:	031d      	lsls	r5, r3, #12
 8001606:	0f64      	lsrs	r4, r4, #29
 8001608:	430c      	orrs	r4, r1
 800160a:	9900      	ldr	r1, [sp, #0]
 800160c:	9200      	str	r2, [sp, #0]
 800160e:	9301      	str	r3, [sp, #4]
 8001610:	00c8      	lsls	r0, r1, #3
 8001612:	0059      	lsls	r1, r3, #1
 8001614:	0d4b      	lsrs	r3, r1, #21
 8001616:	4699      	mov	r9, r3
 8001618:	9a00      	ldr	r2, [sp, #0]
 800161a:	9b01      	ldr	r3, [sp, #4]
 800161c:	0a6d      	lsrs	r5, r5, #9
 800161e:	0fd9      	lsrs	r1, r3, #31
 8001620:	0f53      	lsrs	r3, r2, #29
 8001622:	432b      	orrs	r3, r5
 8001624:	469a      	mov	sl, r3
 8001626:	9b00      	ldr	r3, [sp, #0]
 8001628:	0d7f      	lsrs	r7, r7, #21
 800162a:	00da      	lsls	r2, r3, #3
 800162c:	4694      	mov	ip, r2
 800162e:	464a      	mov	r2, r9
 8001630:	46b0      	mov	r8, r6
 8001632:	1aba      	subs	r2, r7, r2
 8001634:	428e      	cmp	r6, r1
 8001636:	d100      	bne.n	800163a <__aeabi_dadd+0x52>
 8001638:	e0b0      	b.n	800179c <__aeabi_dadd+0x1b4>
 800163a:	2a00      	cmp	r2, #0
 800163c:	dc00      	bgt.n	8001640 <__aeabi_dadd+0x58>
 800163e:	e078      	b.n	8001732 <__aeabi_dadd+0x14a>
 8001640:	4649      	mov	r1, r9
 8001642:	2900      	cmp	r1, #0
 8001644:	d100      	bne.n	8001648 <__aeabi_dadd+0x60>
 8001646:	e0e9      	b.n	800181c <__aeabi_dadd+0x234>
 8001648:	49c9      	ldr	r1, [pc, #804]	@ (8001970 <__aeabi_dadd+0x388>)
 800164a:	428f      	cmp	r7, r1
 800164c:	d100      	bne.n	8001650 <__aeabi_dadd+0x68>
 800164e:	e195      	b.n	800197c <__aeabi_dadd+0x394>
 8001650:	2501      	movs	r5, #1
 8001652:	2a38      	cmp	r2, #56	@ 0x38
 8001654:	dc16      	bgt.n	8001684 <__aeabi_dadd+0x9c>
 8001656:	2180      	movs	r1, #128	@ 0x80
 8001658:	4653      	mov	r3, sl
 800165a:	0409      	lsls	r1, r1, #16
 800165c:	430b      	orrs	r3, r1
 800165e:	469a      	mov	sl, r3
 8001660:	2a1f      	cmp	r2, #31
 8001662:	dd00      	ble.n	8001666 <__aeabi_dadd+0x7e>
 8001664:	e1e7      	b.n	8001a36 <__aeabi_dadd+0x44e>
 8001666:	2120      	movs	r1, #32
 8001668:	4655      	mov	r5, sl
 800166a:	1a8b      	subs	r3, r1, r2
 800166c:	4661      	mov	r1, ip
 800166e:	409d      	lsls	r5, r3
 8001670:	40d1      	lsrs	r1, r2
 8001672:	430d      	orrs	r5, r1
 8001674:	4661      	mov	r1, ip
 8001676:	4099      	lsls	r1, r3
 8001678:	1e4b      	subs	r3, r1, #1
 800167a:	4199      	sbcs	r1, r3
 800167c:	4653      	mov	r3, sl
 800167e:	40d3      	lsrs	r3, r2
 8001680:	430d      	orrs	r5, r1
 8001682:	1ae4      	subs	r4, r4, r3
 8001684:	1b45      	subs	r5, r0, r5
 8001686:	42a8      	cmp	r0, r5
 8001688:	4180      	sbcs	r0, r0
 800168a:	4240      	negs	r0, r0
 800168c:	1a24      	subs	r4, r4, r0
 800168e:	0223      	lsls	r3, r4, #8
 8001690:	d400      	bmi.n	8001694 <__aeabi_dadd+0xac>
 8001692:	e10f      	b.n	80018b4 <__aeabi_dadd+0x2cc>
 8001694:	0264      	lsls	r4, r4, #9
 8001696:	0a64      	lsrs	r4, r4, #9
 8001698:	2c00      	cmp	r4, #0
 800169a:	d100      	bne.n	800169e <__aeabi_dadd+0xb6>
 800169c:	e139      	b.n	8001912 <__aeabi_dadd+0x32a>
 800169e:	0020      	movs	r0, r4
 80016a0:	f001 ff2a 	bl	80034f8 <__clzsi2>
 80016a4:	0003      	movs	r3, r0
 80016a6:	3b08      	subs	r3, #8
 80016a8:	2120      	movs	r1, #32
 80016aa:	0028      	movs	r0, r5
 80016ac:	1aca      	subs	r2, r1, r3
 80016ae:	40d0      	lsrs	r0, r2
 80016b0:	409c      	lsls	r4, r3
 80016b2:	0002      	movs	r2, r0
 80016b4:	409d      	lsls	r5, r3
 80016b6:	4322      	orrs	r2, r4
 80016b8:	429f      	cmp	r7, r3
 80016ba:	dd00      	ble.n	80016be <__aeabi_dadd+0xd6>
 80016bc:	e173      	b.n	80019a6 <__aeabi_dadd+0x3be>
 80016be:	1bd8      	subs	r0, r3, r7
 80016c0:	3001      	adds	r0, #1
 80016c2:	1a09      	subs	r1, r1, r0
 80016c4:	002c      	movs	r4, r5
 80016c6:	408d      	lsls	r5, r1
 80016c8:	40c4      	lsrs	r4, r0
 80016ca:	1e6b      	subs	r3, r5, #1
 80016cc:	419d      	sbcs	r5, r3
 80016ce:	0013      	movs	r3, r2
 80016d0:	40c2      	lsrs	r2, r0
 80016d2:	408b      	lsls	r3, r1
 80016d4:	4325      	orrs	r5, r4
 80016d6:	2700      	movs	r7, #0
 80016d8:	0014      	movs	r4, r2
 80016da:	431d      	orrs	r5, r3
 80016dc:	076b      	lsls	r3, r5, #29
 80016de:	d009      	beq.n	80016f4 <__aeabi_dadd+0x10c>
 80016e0:	230f      	movs	r3, #15
 80016e2:	402b      	ands	r3, r5
 80016e4:	2b04      	cmp	r3, #4
 80016e6:	d005      	beq.n	80016f4 <__aeabi_dadd+0x10c>
 80016e8:	1d2b      	adds	r3, r5, #4
 80016ea:	42ab      	cmp	r3, r5
 80016ec:	41ad      	sbcs	r5, r5
 80016ee:	426d      	negs	r5, r5
 80016f0:	1964      	adds	r4, r4, r5
 80016f2:	001d      	movs	r5, r3
 80016f4:	0223      	lsls	r3, r4, #8
 80016f6:	d400      	bmi.n	80016fa <__aeabi_dadd+0x112>
 80016f8:	e12d      	b.n	8001956 <__aeabi_dadd+0x36e>
 80016fa:	4a9d      	ldr	r2, [pc, #628]	@ (8001970 <__aeabi_dadd+0x388>)
 80016fc:	3701      	adds	r7, #1
 80016fe:	4297      	cmp	r7, r2
 8001700:	d100      	bne.n	8001704 <__aeabi_dadd+0x11c>
 8001702:	e0d3      	b.n	80018ac <__aeabi_dadd+0x2c4>
 8001704:	4646      	mov	r6, r8
 8001706:	499b      	ldr	r1, [pc, #620]	@ (8001974 <__aeabi_dadd+0x38c>)
 8001708:	08ed      	lsrs	r5, r5, #3
 800170a:	4021      	ands	r1, r4
 800170c:	074a      	lsls	r2, r1, #29
 800170e:	432a      	orrs	r2, r5
 8001710:	057c      	lsls	r4, r7, #21
 8001712:	024d      	lsls	r5, r1, #9
 8001714:	0b2d      	lsrs	r5, r5, #12
 8001716:	0d64      	lsrs	r4, r4, #21
 8001718:	0524      	lsls	r4, r4, #20
 800171a:	432c      	orrs	r4, r5
 800171c:	07f6      	lsls	r6, r6, #31
 800171e:	4334      	orrs	r4, r6
 8001720:	0010      	movs	r0, r2
 8001722:	0021      	movs	r1, r4
 8001724:	b003      	add	sp, #12
 8001726:	bcf0      	pop	{r4, r5, r6, r7}
 8001728:	46bb      	mov	fp, r7
 800172a:	46b2      	mov	sl, r6
 800172c:	46a9      	mov	r9, r5
 800172e:	46a0      	mov	r8, r4
 8001730:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001732:	2a00      	cmp	r2, #0
 8001734:	d100      	bne.n	8001738 <__aeabi_dadd+0x150>
 8001736:	e084      	b.n	8001842 <__aeabi_dadd+0x25a>
 8001738:	464a      	mov	r2, r9
 800173a:	1bd2      	subs	r2, r2, r7
 800173c:	2f00      	cmp	r7, #0
 800173e:	d000      	beq.n	8001742 <__aeabi_dadd+0x15a>
 8001740:	e16d      	b.n	8001a1e <__aeabi_dadd+0x436>
 8001742:	0025      	movs	r5, r4
 8001744:	4305      	orrs	r5, r0
 8001746:	d100      	bne.n	800174a <__aeabi_dadd+0x162>
 8001748:	e127      	b.n	800199a <__aeabi_dadd+0x3b2>
 800174a:	1e56      	subs	r6, r2, #1
 800174c:	2a01      	cmp	r2, #1
 800174e:	d100      	bne.n	8001752 <__aeabi_dadd+0x16a>
 8001750:	e23b      	b.n	8001bca <__aeabi_dadd+0x5e2>
 8001752:	4d87      	ldr	r5, [pc, #540]	@ (8001970 <__aeabi_dadd+0x388>)
 8001754:	42aa      	cmp	r2, r5
 8001756:	d100      	bne.n	800175a <__aeabi_dadd+0x172>
 8001758:	e26a      	b.n	8001c30 <__aeabi_dadd+0x648>
 800175a:	2501      	movs	r5, #1
 800175c:	2e38      	cmp	r6, #56	@ 0x38
 800175e:	dc12      	bgt.n	8001786 <__aeabi_dadd+0x19e>
 8001760:	0032      	movs	r2, r6
 8001762:	2a1f      	cmp	r2, #31
 8001764:	dd00      	ble.n	8001768 <__aeabi_dadd+0x180>
 8001766:	e1f8      	b.n	8001b5a <__aeabi_dadd+0x572>
 8001768:	2620      	movs	r6, #32
 800176a:	0025      	movs	r5, r4
 800176c:	1ab6      	subs	r6, r6, r2
 800176e:	0007      	movs	r7, r0
 8001770:	4653      	mov	r3, sl
 8001772:	40b0      	lsls	r0, r6
 8001774:	40d4      	lsrs	r4, r2
 8001776:	40b5      	lsls	r5, r6
 8001778:	40d7      	lsrs	r7, r2
 800177a:	1e46      	subs	r6, r0, #1
 800177c:	41b0      	sbcs	r0, r6
 800177e:	1b1b      	subs	r3, r3, r4
 8001780:	469a      	mov	sl, r3
 8001782:	433d      	orrs	r5, r7
 8001784:	4305      	orrs	r5, r0
 8001786:	4662      	mov	r2, ip
 8001788:	1b55      	subs	r5, r2, r5
 800178a:	45ac      	cmp	ip, r5
 800178c:	4192      	sbcs	r2, r2
 800178e:	4653      	mov	r3, sl
 8001790:	4252      	negs	r2, r2
 8001792:	000e      	movs	r6, r1
 8001794:	464f      	mov	r7, r9
 8001796:	4688      	mov	r8, r1
 8001798:	1a9c      	subs	r4, r3, r2
 800179a:	e778      	b.n	800168e <__aeabi_dadd+0xa6>
 800179c:	2a00      	cmp	r2, #0
 800179e:	dc00      	bgt.n	80017a2 <__aeabi_dadd+0x1ba>
 80017a0:	e08e      	b.n	80018c0 <__aeabi_dadd+0x2d8>
 80017a2:	4649      	mov	r1, r9
 80017a4:	2900      	cmp	r1, #0
 80017a6:	d175      	bne.n	8001894 <__aeabi_dadd+0x2ac>
 80017a8:	4661      	mov	r1, ip
 80017aa:	4653      	mov	r3, sl
 80017ac:	4319      	orrs	r1, r3
 80017ae:	d100      	bne.n	80017b2 <__aeabi_dadd+0x1ca>
 80017b0:	e0f6      	b.n	80019a0 <__aeabi_dadd+0x3b8>
 80017b2:	1e51      	subs	r1, r2, #1
 80017b4:	2a01      	cmp	r2, #1
 80017b6:	d100      	bne.n	80017ba <__aeabi_dadd+0x1d2>
 80017b8:	e191      	b.n	8001ade <__aeabi_dadd+0x4f6>
 80017ba:	4d6d      	ldr	r5, [pc, #436]	@ (8001970 <__aeabi_dadd+0x388>)
 80017bc:	42aa      	cmp	r2, r5
 80017be:	d100      	bne.n	80017c2 <__aeabi_dadd+0x1da>
 80017c0:	e0dc      	b.n	800197c <__aeabi_dadd+0x394>
 80017c2:	2501      	movs	r5, #1
 80017c4:	2938      	cmp	r1, #56	@ 0x38
 80017c6:	dc14      	bgt.n	80017f2 <__aeabi_dadd+0x20a>
 80017c8:	000a      	movs	r2, r1
 80017ca:	2a1f      	cmp	r2, #31
 80017cc:	dd00      	ble.n	80017d0 <__aeabi_dadd+0x1e8>
 80017ce:	e1a2      	b.n	8001b16 <__aeabi_dadd+0x52e>
 80017d0:	2120      	movs	r1, #32
 80017d2:	4653      	mov	r3, sl
 80017d4:	1a89      	subs	r1, r1, r2
 80017d6:	408b      	lsls	r3, r1
 80017d8:	001d      	movs	r5, r3
 80017da:	4663      	mov	r3, ip
 80017dc:	40d3      	lsrs	r3, r2
 80017de:	431d      	orrs	r5, r3
 80017e0:	4663      	mov	r3, ip
 80017e2:	408b      	lsls	r3, r1
 80017e4:	0019      	movs	r1, r3
 80017e6:	1e4b      	subs	r3, r1, #1
 80017e8:	4199      	sbcs	r1, r3
 80017ea:	4653      	mov	r3, sl
 80017ec:	40d3      	lsrs	r3, r2
 80017ee:	430d      	orrs	r5, r1
 80017f0:	18e4      	adds	r4, r4, r3
 80017f2:	182d      	adds	r5, r5, r0
 80017f4:	4285      	cmp	r5, r0
 80017f6:	4180      	sbcs	r0, r0
 80017f8:	4240      	negs	r0, r0
 80017fa:	1824      	adds	r4, r4, r0
 80017fc:	0223      	lsls	r3, r4, #8
 80017fe:	d559      	bpl.n	80018b4 <__aeabi_dadd+0x2cc>
 8001800:	4b5b      	ldr	r3, [pc, #364]	@ (8001970 <__aeabi_dadd+0x388>)
 8001802:	3701      	adds	r7, #1
 8001804:	429f      	cmp	r7, r3
 8001806:	d051      	beq.n	80018ac <__aeabi_dadd+0x2c4>
 8001808:	2101      	movs	r1, #1
 800180a:	4b5a      	ldr	r3, [pc, #360]	@ (8001974 <__aeabi_dadd+0x38c>)
 800180c:	086a      	lsrs	r2, r5, #1
 800180e:	401c      	ands	r4, r3
 8001810:	4029      	ands	r1, r5
 8001812:	430a      	orrs	r2, r1
 8001814:	07e5      	lsls	r5, r4, #31
 8001816:	4315      	orrs	r5, r2
 8001818:	0864      	lsrs	r4, r4, #1
 800181a:	e75f      	b.n	80016dc <__aeabi_dadd+0xf4>
 800181c:	4661      	mov	r1, ip
 800181e:	4653      	mov	r3, sl
 8001820:	4319      	orrs	r1, r3
 8001822:	d100      	bne.n	8001826 <__aeabi_dadd+0x23e>
 8001824:	e0bc      	b.n	80019a0 <__aeabi_dadd+0x3b8>
 8001826:	1e51      	subs	r1, r2, #1
 8001828:	2a01      	cmp	r2, #1
 800182a:	d100      	bne.n	800182e <__aeabi_dadd+0x246>
 800182c:	e164      	b.n	8001af8 <__aeabi_dadd+0x510>
 800182e:	4d50      	ldr	r5, [pc, #320]	@ (8001970 <__aeabi_dadd+0x388>)
 8001830:	42aa      	cmp	r2, r5
 8001832:	d100      	bne.n	8001836 <__aeabi_dadd+0x24e>
 8001834:	e16a      	b.n	8001b0c <__aeabi_dadd+0x524>
 8001836:	2501      	movs	r5, #1
 8001838:	2938      	cmp	r1, #56	@ 0x38
 800183a:	dd00      	ble.n	800183e <__aeabi_dadd+0x256>
 800183c:	e722      	b.n	8001684 <__aeabi_dadd+0x9c>
 800183e:	000a      	movs	r2, r1
 8001840:	e70e      	b.n	8001660 <__aeabi_dadd+0x78>
 8001842:	4a4d      	ldr	r2, [pc, #308]	@ (8001978 <__aeabi_dadd+0x390>)
 8001844:	1c7d      	adds	r5, r7, #1
 8001846:	4215      	tst	r5, r2
 8001848:	d000      	beq.n	800184c <__aeabi_dadd+0x264>
 800184a:	e0d0      	b.n	80019ee <__aeabi_dadd+0x406>
 800184c:	0025      	movs	r5, r4
 800184e:	4662      	mov	r2, ip
 8001850:	4653      	mov	r3, sl
 8001852:	4305      	orrs	r5, r0
 8001854:	431a      	orrs	r2, r3
 8001856:	2f00      	cmp	r7, #0
 8001858:	d000      	beq.n	800185c <__aeabi_dadd+0x274>
 800185a:	e137      	b.n	8001acc <__aeabi_dadd+0x4e4>
 800185c:	2d00      	cmp	r5, #0
 800185e:	d100      	bne.n	8001862 <__aeabi_dadd+0x27a>
 8001860:	e1a8      	b.n	8001bb4 <__aeabi_dadd+0x5cc>
 8001862:	2a00      	cmp	r2, #0
 8001864:	d100      	bne.n	8001868 <__aeabi_dadd+0x280>
 8001866:	e16a      	b.n	8001b3e <__aeabi_dadd+0x556>
 8001868:	4663      	mov	r3, ip
 800186a:	1ac5      	subs	r5, r0, r3
 800186c:	4653      	mov	r3, sl
 800186e:	1ae2      	subs	r2, r4, r3
 8001870:	42a8      	cmp	r0, r5
 8001872:	419b      	sbcs	r3, r3
 8001874:	425b      	negs	r3, r3
 8001876:	1ad3      	subs	r3, r2, r3
 8001878:	021a      	lsls	r2, r3, #8
 800187a:	d400      	bmi.n	800187e <__aeabi_dadd+0x296>
 800187c:	e203      	b.n	8001c86 <__aeabi_dadd+0x69e>
 800187e:	4663      	mov	r3, ip
 8001880:	1a1d      	subs	r5, r3, r0
 8001882:	45ac      	cmp	ip, r5
 8001884:	4192      	sbcs	r2, r2
 8001886:	4653      	mov	r3, sl
 8001888:	4252      	negs	r2, r2
 800188a:	1b1c      	subs	r4, r3, r4
 800188c:	000e      	movs	r6, r1
 800188e:	4688      	mov	r8, r1
 8001890:	1aa4      	subs	r4, r4, r2
 8001892:	e723      	b.n	80016dc <__aeabi_dadd+0xf4>
 8001894:	4936      	ldr	r1, [pc, #216]	@ (8001970 <__aeabi_dadd+0x388>)
 8001896:	428f      	cmp	r7, r1
 8001898:	d070      	beq.n	800197c <__aeabi_dadd+0x394>
 800189a:	2501      	movs	r5, #1
 800189c:	2a38      	cmp	r2, #56	@ 0x38
 800189e:	dca8      	bgt.n	80017f2 <__aeabi_dadd+0x20a>
 80018a0:	2180      	movs	r1, #128	@ 0x80
 80018a2:	4653      	mov	r3, sl
 80018a4:	0409      	lsls	r1, r1, #16
 80018a6:	430b      	orrs	r3, r1
 80018a8:	469a      	mov	sl, r3
 80018aa:	e78e      	b.n	80017ca <__aeabi_dadd+0x1e2>
 80018ac:	003c      	movs	r4, r7
 80018ae:	2500      	movs	r5, #0
 80018b0:	2200      	movs	r2, #0
 80018b2:	e731      	b.n	8001718 <__aeabi_dadd+0x130>
 80018b4:	2307      	movs	r3, #7
 80018b6:	402b      	ands	r3, r5
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d000      	beq.n	80018be <__aeabi_dadd+0x2d6>
 80018bc:	e710      	b.n	80016e0 <__aeabi_dadd+0xf8>
 80018be:	e093      	b.n	80019e8 <__aeabi_dadd+0x400>
 80018c0:	2a00      	cmp	r2, #0
 80018c2:	d074      	beq.n	80019ae <__aeabi_dadd+0x3c6>
 80018c4:	464a      	mov	r2, r9
 80018c6:	1bd2      	subs	r2, r2, r7
 80018c8:	2f00      	cmp	r7, #0
 80018ca:	d100      	bne.n	80018ce <__aeabi_dadd+0x2e6>
 80018cc:	e0c7      	b.n	8001a5e <__aeabi_dadd+0x476>
 80018ce:	4928      	ldr	r1, [pc, #160]	@ (8001970 <__aeabi_dadd+0x388>)
 80018d0:	4589      	cmp	r9, r1
 80018d2:	d100      	bne.n	80018d6 <__aeabi_dadd+0x2ee>
 80018d4:	e185      	b.n	8001be2 <__aeabi_dadd+0x5fa>
 80018d6:	2501      	movs	r5, #1
 80018d8:	2a38      	cmp	r2, #56	@ 0x38
 80018da:	dc12      	bgt.n	8001902 <__aeabi_dadd+0x31a>
 80018dc:	2180      	movs	r1, #128	@ 0x80
 80018de:	0409      	lsls	r1, r1, #16
 80018e0:	430c      	orrs	r4, r1
 80018e2:	2a1f      	cmp	r2, #31
 80018e4:	dd00      	ble.n	80018e8 <__aeabi_dadd+0x300>
 80018e6:	e1ab      	b.n	8001c40 <__aeabi_dadd+0x658>
 80018e8:	2120      	movs	r1, #32
 80018ea:	0025      	movs	r5, r4
 80018ec:	1a89      	subs	r1, r1, r2
 80018ee:	0007      	movs	r7, r0
 80018f0:	4088      	lsls	r0, r1
 80018f2:	408d      	lsls	r5, r1
 80018f4:	40d7      	lsrs	r7, r2
 80018f6:	1e41      	subs	r1, r0, #1
 80018f8:	4188      	sbcs	r0, r1
 80018fa:	40d4      	lsrs	r4, r2
 80018fc:	433d      	orrs	r5, r7
 80018fe:	4305      	orrs	r5, r0
 8001900:	44a2      	add	sl, r4
 8001902:	4465      	add	r5, ip
 8001904:	4565      	cmp	r5, ip
 8001906:	4192      	sbcs	r2, r2
 8001908:	4252      	negs	r2, r2
 800190a:	4452      	add	r2, sl
 800190c:	0014      	movs	r4, r2
 800190e:	464f      	mov	r7, r9
 8001910:	e774      	b.n	80017fc <__aeabi_dadd+0x214>
 8001912:	0028      	movs	r0, r5
 8001914:	f001 fdf0 	bl	80034f8 <__clzsi2>
 8001918:	0003      	movs	r3, r0
 800191a:	3318      	adds	r3, #24
 800191c:	2b1f      	cmp	r3, #31
 800191e:	dc00      	bgt.n	8001922 <__aeabi_dadd+0x33a>
 8001920:	e6c2      	b.n	80016a8 <__aeabi_dadd+0xc0>
 8001922:	002a      	movs	r2, r5
 8001924:	3808      	subs	r0, #8
 8001926:	4082      	lsls	r2, r0
 8001928:	429f      	cmp	r7, r3
 800192a:	dd00      	ble.n	800192e <__aeabi_dadd+0x346>
 800192c:	e0a9      	b.n	8001a82 <__aeabi_dadd+0x49a>
 800192e:	1bdb      	subs	r3, r3, r7
 8001930:	1c58      	adds	r0, r3, #1
 8001932:	281f      	cmp	r0, #31
 8001934:	dc00      	bgt.n	8001938 <__aeabi_dadd+0x350>
 8001936:	e1ac      	b.n	8001c92 <__aeabi_dadd+0x6aa>
 8001938:	0015      	movs	r5, r2
 800193a:	3b1f      	subs	r3, #31
 800193c:	40dd      	lsrs	r5, r3
 800193e:	2820      	cmp	r0, #32
 8001940:	d005      	beq.n	800194e <__aeabi_dadd+0x366>
 8001942:	2340      	movs	r3, #64	@ 0x40
 8001944:	1a1b      	subs	r3, r3, r0
 8001946:	409a      	lsls	r2, r3
 8001948:	1e53      	subs	r3, r2, #1
 800194a:	419a      	sbcs	r2, r3
 800194c:	4315      	orrs	r5, r2
 800194e:	2307      	movs	r3, #7
 8001950:	2700      	movs	r7, #0
 8001952:	402b      	ands	r3, r5
 8001954:	e7b0      	b.n	80018b8 <__aeabi_dadd+0x2d0>
 8001956:	08ed      	lsrs	r5, r5, #3
 8001958:	4b05      	ldr	r3, [pc, #20]	@ (8001970 <__aeabi_dadd+0x388>)
 800195a:	0762      	lsls	r2, r4, #29
 800195c:	432a      	orrs	r2, r5
 800195e:	08e4      	lsrs	r4, r4, #3
 8001960:	429f      	cmp	r7, r3
 8001962:	d00f      	beq.n	8001984 <__aeabi_dadd+0x39c>
 8001964:	0324      	lsls	r4, r4, #12
 8001966:	0b25      	lsrs	r5, r4, #12
 8001968:	057c      	lsls	r4, r7, #21
 800196a:	0d64      	lsrs	r4, r4, #21
 800196c:	e6d4      	b.n	8001718 <__aeabi_dadd+0x130>
 800196e:	46c0      	nop			@ (mov r8, r8)
 8001970:	000007ff 	.word	0x000007ff
 8001974:	ff7fffff 	.word	0xff7fffff
 8001978:	000007fe 	.word	0x000007fe
 800197c:	08c0      	lsrs	r0, r0, #3
 800197e:	0762      	lsls	r2, r4, #29
 8001980:	4302      	orrs	r2, r0
 8001982:	08e4      	lsrs	r4, r4, #3
 8001984:	0013      	movs	r3, r2
 8001986:	4323      	orrs	r3, r4
 8001988:	d100      	bne.n	800198c <__aeabi_dadd+0x3a4>
 800198a:	e186      	b.n	8001c9a <__aeabi_dadd+0x6b2>
 800198c:	2580      	movs	r5, #128	@ 0x80
 800198e:	032d      	lsls	r5, r5, #12
 8001990:	4325      	orrs	r5, r4
 8001992:	032d      	lsls	r5, r5, #12
 8001994:	4cc3      	ldr	r4, [pc, #780]	@ (8001ca4 <__aeabi_dadd+0x6bc>)
 8001996:	0b2d      	lsrs	r5, r5, #12
 8001998:	e6be      	b.n	8001718 <__aeabi_dadd+0x130>
 800199a:	4660      	mov	r0, ip
 800199c:	4654      	mov	r4, sl
 800199e:	000e      	movs	r6, r1
 80019a0:	0017      	movs	r7, r2
 80019a2:	08c5      	lsrs	r5, r0, #3
 80019a4:	e7d8      	b.n	8001958 <__aeabi_dadd+0x370>
 80019a6:	4cc0      	ldr	r4, [pc, #768]	@ (8001ca8 <__aeabi_dadd+0x6c0>)
 80019a8:	1aff      	subs	r7, r7, r3
 80019aa:	4014      	ands	r4, r2
 80019ac:	e696      	b.n	80016dc <__aeabi_dadd+0xf4>
 80019ae:	4abf      	ldr	r2, [pc, #764]	@ (8001cac <__aeabi_dadd+0x6c4>)
 80019b0:	1c79      	adds	r1, r7, #1
 80019b2:	4211      	tst	r1, r2
 80019b4:	d16b      	bne.n	8001a8e <__aeabi_dadd+0x4a6>
 80019b6:	0022      	movs	r2, r4
 80019b8:	4302      	orrs	r2, r0
 80019ba:	2f00      	cmp	r7, #0
 80019bc:	d000      	beq.n	80019c0 <__aeabi_dadd+0x3d8>
 80019be:	e0db      	b.n	8001b78 <__aeabi_dadd+0x590>
 80019c0:	2a00      	cmp	r2, #0
 80019c2:	d100      	bne.n	80019c6 <__aeabi_dadd+0x3de>
 80019c4:	e12d      	b.n	8001c22 <__aeabi_dadd+0x63a>
 80019c6:	4662      	mov	r2, ip
 80019c8:	4653      	mov	r3, sl
 80019ca:	431a      	orrs	r2, r3
 80019cc:	d100      	bne.n	80019d0 <__aeabi_dadd+0x3e8>
 80019ce:	e0b6      	b.n	8001b3e <__aeabi_dadd+0x556>
 80019d0:	4663      	mov	r3, ip
 80019d2:	18c5      	adds	r5, r0, r3
 80019d4:	4285      	cmp	r5, r0
 80019d6:	4180      	sbcs	r0, r0
 80019d8:	4454      	add	r4, sl
 80019da:	4240      	negs	r0, r0
 80019dc:	1824      	adds	r4, r4, r0
 80019de:	0223      	lsls	r3, r4, #8
 80019e0:	d502      	bpl.n	80019e8 <__aeabi_dadd+0x400>
 80019e2:	000f      	movs	r7, r1
 80019e4:	4bb0      	ldr	r3, [pc, #704]	@ (8001ca8 <__aeabi_dadd+0x6c0>)
 80019e6:	401c      	ands	r4, r3
 80019e8:	003a      	movs	r2, r7
 80019ea:	0028      	movs	r0, r5
 80019ec:	e7d8      	b.n	80019a0 <__aeabi_dadd+0x3b8>
 80019ee:	4662      	mov	r2, ip
 80019f0:	1a85      	subs	r5, r0, r2
 80019f2:	42a8      	cmp	r0, r5
 80019f4:	4192      	sbcs	r2, r2
 80019f6:	4653      	mov	r3, sl
 80019f8:	4252      	negs	r2, r2
 80019fa:	4691      	mov	r9, r2
 80019fc:	1ae3      	subs	r3, r4, r3
 80019fe:	001a      	movs	r2, r3
 8001a00:	464b      	mov	r3, r9
 8001a02:	1ad2      	subs	r2, r2, r3
 8001a04:	0013      	movs	r3, r2
 8001a06:	4691      	mov	r9, r2
 8001a08:	021a      	lsls	r2, r3, #8
 8001a0a:	d454      	bmi.n	8001ab6 <__aeabi_dadd+0x4ce>
 8001a0c:	464a      	mov	r2, r9
 8001a0e:	464c      	mov	r4, r9
 8001a10:	432a      	orrs	r2, r5
 8001a12:	d000      	beq.n	8001a16 <__aeabi_dadd+0x42e>
 8001a14:	e640      	b.n	8001698 <__aeabi_dadd+0xb0>
 8001a16:	2600      	movs	r6, #0
 8001a18:	2400      	movs	r4, #0
 8001a1a:	2500      	movs	r5, #0
 8001a1c:	e67c      	b.n	8001718 <__aeabi_dadd+0x130>
 8001a1e:	4da1      	ldr	r5, [pc, #644]	@ (8001ca4 <__aeabi_dadd+0x6bc>)
 8001a20:	45a9      	cmp	r9, r5
 8001a22:	d100      	bne.n	8001a26 <__aeabi_dadd+0x43e>
 8001a24:	e090      	b.n	8001b48 <__aeabi_dadd+0x560>
 8001a26:	2501      	movs	r5, #1
 8001a28:	2a38      	cmp	r2, #56	@ 0x38
 8001a2a:	dd00      	ble.n	8001a2e <__aeabi_dadd+0x446>
 8001a2c:	e6ab      	b.n	8001786 <__aeabi_dadd+0x19e>
 8001a2e:	2580      	movs	r5, #128	@ 0x80
 8001a30:	042d      	lsls	r5, r5, #16
 8001a32:	432c      	orrs	r4, r5
 8001a34:	e695      	b.n	8001762 <__aeabi_dadd+0x17a>
 8001a36:	0011      	movs	r1, r2
 8001a38:	4655      	mov	r5, sl
 8001a3a:	3920      	subs	r1, #32
 8001a3c:	40cd      	lsrs	r5, r1
 8001a3e:	46a9      	mov	r9, r5
 8001a40:	2a20      	cmp	r2, #32
 8001a42:	d006      	beq.n	8001a52 <__aeabi_dadd+0x46a>
 8001a44:	2140      	movs	r1, #64	@ 0x40
 8001a46:	4653      	mov	r3, sl
 8001a48:	1a8a      	subs	r2, r1, r2
 8001a4a:	4093      	lsls	r3, r2
 8001a4c:	4662      	mov	r2, ip
 8001a4e:	431a      	orrs	r2, r3
 8001a50:	4694      	mov	ip, r2
 8001a52:	4665      	mov	r5, ip
 8001a54:	1e6b      	subs	r3, r5, #1
 8001a56:	419d      	sbcs	r5, r3
 8001a58:	464b      	mov	r3, r9
 8001a5a:	431d      	orrs	r5, r3
 8001a5c:	e612      	b.n	8001684 <__aeabi_dadd+0x9c>
 8001a5e:	0021      	movs	r1, r4
 8001a60:	4301      	orrs	r1, r0
 8001a62:	d100      	bne.n	8001a66 <__aeabi_dadd+0x47e>
 8001a64:	e0c4      	b.n	8001bf0 <__aeabi_dadd+0x608>
 8001a66:	1e51      	subs	r1, r2, #1
 8001a68:	2a01      	cmp	r2, #1
 8001a6a:	d100      	bne.n	8001a6e <__aeabi_dadd+0x486>
 8001a6c:	e0fb      	b.n	8001c66 <__aeabi_dadd+0x67e>
 8001a6e:	4d8d      	ldr	r5, [pc, #564]	@ (8001ca4 <__aeabi_dadd+0x6bc>)
 8001a70:	42aa      	cmp	r2, r5
 8001a72:	d100      	bne.n	8001a76 <__aeabi_dadd+0x48e>
 8001a74:	e0b5      	b.n	8001be2 <__aeabi_dadd+0x5fa>
 8001a76:	2501      	movs	r5, #1
 8001a78:	2938      	cmp	r1, #56	@ 0x38
 8001a7a:	dd00      	ble.n	8001a7e <__aeabi_dadd+0x496>
 8001a7c:	e741      	b.n	8001902 <__aeabi_dadd+0x31a>
 8001a7e:	000a      	movs	r2, r1
 8001a80:	e72f      	b.n	80018e2 <__aeabi_dadd+0x2fa>
 8001a82:	4c89      	ldr	r4, [pc, #548]	@ (8001ca8 <__aeabi_dadd+0x6c0>)
 8001a84:	1aff      	subs	r7, r7, r3
 8001a86:	4014      	ands	r4, r2
 8001a88:	0762      	lsls	r2, r4, #29
 8001a8a:	08e4      	lsrs	r4, r4, #3
 8001a8c:	e76a      	b.n	8001964 <__aeabi_dadd+0x37c>
 8001a8e:	4a85      	ldr	r2, [pc, #532]	@ (8001ca4 <__aeabi_dadd+0x6bc>)
 8001a90:	4291      	cmp	r1, r2
 8001a92:	d100      	bne.n	8001a96 <__aeabi_dadd+0x4ae>
 8001a94:	e0e3      	b.n	8001c5e <__aeabi_dadd+0x676>
 8001a96:	4663      	mov	r3, ip
 8001a98:	18c2      	adds	r2, r0, r3
 8001a9a:	4282      	cmp	r2, r0
 8001a9c:	4180      	sbcs	r0, r0
 8001a9e:	0023      	movs	r3, r4
 8001aa0:	4240      	negs	r0, r0
 8001aa2:	4453      	add	r3, sl
 8001aa4:	181b      	adds	r3, r3, r0
 8001aa6:	07dd      	lsls	r5, r3, #31
 8001aa8:	085c      	lsrs	r4, r3, #1
 8001aaa:	2307      	movs	r3, #7
 8001aac:	0852      	lsrs	r2, r2, #1
 8001aae:	4315      	orrs	r5, r2
 8001ab0:	000f      	movs	r7, r1
 8001ab2:	402b      	ands	r3, r5
 8001ab4:	e700      	b.n	80018b8 <__aeabi_dadd+0x2d0>
 8001ab6:	4663      	mov	r3, ip
 8001ab8:	1a1d      	subs	r5, r3, r0
 8001aba:	45ac      	cmp	ip, r5
 8001abc:	4192      	sbcs	r2, r2
 8001abe:	4653      	mov	r3, sl
 8001ac0:	4252      	negs	r2, r2
 8001ac2:	1b1c      	subs	r4, r3, r4
 8001ac4:	000e      	movs	r6, r1
 8001ac6:	4688      	mov	r8, r1
 8001ac8:	1aa4      	subs	r4, r4, r2
 8001aca:	e5e5      	b.n	8001698 <__aeabi_dadd+0xb0>
 8001acc:	2d00      	cmp	r5, #0
 8001ace:	d000      	beq.n	8001ad2 <__aeabi_dadd+0x4ea>
 8001ad0:	e091      	b.n	8001bf6 <__aeabi_dadd+0x60e>
 8001ad2:	2a00      	cmp	r2, #0
 8001ad4:	d138      	bne.n	8001b48 <__aeabi_dadd+0x560>
 8001ad6:	2480      	movs	r4, #128	@ 0x80
 8001ad8:	2600      	movs	r6, #0
 8001ada:	0324      	lsls	r4, r4, #12
 8001adc:	e756      	b.n	800198c <__aeabi_dadd+0x3a4>
 8001ade:	4663      	mov	r3, ip
 8001ae0:	18c5      	adds	r5, r0, r3
 8001ae2:	4285      	cmp	r5, r0
 8001ae4:	4180      	sbcs	r0, r0
 8001ae6:	4454      	add	r4, sl
 8001ae8:	4240      	negs	r0, r0
 8001aea:	1824      	adds	r4, r4, r0
 8001aec:	2701      	movs	r7, #1
 8001aee:	0223      	lsls	r3, r4, #8
 8001af0:	d400      	bmi.n	8001af4 <__aeabi_dadd+0x50c>
 8001af2:	e6df      	b.n	80018b4 <__aeabi_dadd+0x2cc>
 8001af4:	2702      	movs	r7, #2
 8001af6:	e687      	b.n	8001808 <__aeabi_dadd+0x220>
 8001af8:	4663      	mov	r3, ip
 8001afa:	1ac5      	subs	r5, r0, r3
 8001afc:	42a8      	cmp	r0, r5
 8001afe:	4180      	sbcs	r0, r0
 8001b00:	4653      	mov	r3, sl
 8001b02:	4240      	negs	r0, r0
 8001b04:	1ae4      	subs	r4, r4, r3
 8001b06:	2701      	movs	r7, #1
 8001b08:	1a24      	subs	r4, r4, r0
 8001b0a:	e5c0      	b.n	800168e <__aeabi_dadd+0xa6>
 8001b0c:	0762      	lsls	r2, r4, #29
 8001b0e:	08c0      	lsrs	r0, r0, #3
 8001b10:	4302      	orrs	r2, r0
 8001b12:	08e4      	lsrs	r4, r4, #3
 8001b14:	e736      	b.n	8001984 <__aeabi_dadd+0x39c>
 8001b16:	0011      	movs	r1, r2
 8001b18:	4653      	mov	r3, sl
 8001b1a:	3920      	subs	r1, #32
 8001b1c:	40cb      	lsrs	r3, r1
 8001b1e:	4699      	mov	r9, r3
 8001b20:	2a20      	cmp	r2, #32
 8001b22:	d006      	beq.n	8001b32 <__aeabi_dadd+0x54a>
 8001b24:	2140      	movs	r1, #64	@ 0x40
 8001b26:	4653      	mov	r3, sl
 8001b28:	1a8a      	subs	r2, r1, r2
 8001b2a:	4093      	lsls	r3, r2
 8001b2c:	4662      	mov	r2, ip
 8001b2e:	431a      	orrs	r2, r3
 8001b30:	4694      	mov	ip, r2
 8001b32:	4665      	mov	r5, ip
 8001b34:	1e6b      	subs	r3, r5, #1
 8001b36:	419d      	sbcs	r5, r3
 8001b38:	464b      	mov	r3, r9
 8001b3a:	431d      	orrs	r5, r3
 8001b3c:	e659      	b.n	80017f2 <__aeabi_dadd+0x20a>
 8001b3e:	0762      	lsls	r2, r4, #29
 8001b40:	08c0      	lsrs	r0, r0, #3
 8001b42:	4302      	orrs	r2, r0
 8001b44:	08e4      	lsrs	r4, r4, #3
 8001b46:	e70d      	b.n	8001964 <__aeabi_dadd+0x37c>
 8001b48:	4653      	mov	r3, sl
 8001b4a:	075a      	lsls	r2, r3, #29
 8001b4c:	4663      	mov	r3, ip
 8001b4e:	08d8      	lsrs	r0, r3, #3
 8001b50:	4653      	mov	r3, sl
 8001b52:	000e      	movs	r6, r1
 8001b54:	4302      	orrs	r2, r0
 8001b56:	08dc      	lsrs	r4, r3, #3
 8001b58:	e714      	b.n	8001984 <__aeabi_dadd+0x39c>
 8001b5a:	0015      	movs	r5, r2
 8001b5c:	0026      	movs	r6, r4
 8001b5e:	3d20      	subs	r5, #32
 8001b60:	40ee      	lsrs	r6, r5
 8001b62:	2a20      	cmp	r2, #32
 8001b64:	d003      	beq.n	8001b6e <__aeabi_dadd+0x586>
 8001b66:	2540      	movs	r5, #64	@ 0x40
 8001b68:	1aaa      	subs	r2, r5, r2
 8001b6a:	4094      	lsls	r4, r2
 8001b6c:	4320      	orrs	r0, r4
 8001b6e:	1e42      	subs	r2, r0, #1
 8001b70:	4190      	sbcs	r0, r2
 8001b72:	0005      	movs	r5, r0
 8001b74:	4335      	orrs	r5, r6
 8001b76:	e606      	b.n	8001786 <__aeabi_dadd+0x19e>
 8001b78:	2a00      	cmp	r2, #0
 8001b7a:	d07c      	beq.n	8001c76 <__aeabi_dadd+0x68e>
 8001b7c:	4662      	mov	r2, ip
 8001b7e:	4653      	mov	r3, sl
 8001b80:	08c0      	lsrs	r0, r0, #3
 8001b82:	431a      	orrs	r2, r3
 8001b84:	d100      	bne.n	8001b88 <__aeabi_dadd+0x5a0>
 8001b86:	e6fa      	b.n	800197e <__aeabi_dadd+0x396>
 8001b88:	0762      	lsls	r2, r4, #29
 8001b8a:	4310      	orrs	r0, r2
 8001b8c:	2280      	movs	r2, #128	@ 0x80
 8001b8e:	08e4      	lsrs	r4, r4, #3
 8001b90:	0312      	lsls	r2, r2, #12
 8001b92:	4214      	tst	r4, r2
 8001b94:	d008      	beq.n	8001ba8 <__aeabi_dadd+0x5c0>
 8001b96:	08d9      	lsrs	r1, r3, #3
 8001b98:	4211      	tst	r1, r2
 8001b9a:	d105      	bne.n	8001ba8 <__aeabi_dadd+0x5c0>
 8001b9c:	4663      	mov	r3, ip
 8001b9e:	08d8      	lsrs	r0, r3, #3
 8001ba0:	4653      	mov	r3, sl
 8001ba2:	000c      	movs	r4, r1
 8001ba4:	075b      	lsls	r3, r3, #29
 8001ba6:	4318      	orrs	r0, r3
 8001ba8:	0f42      	lsrs	r2, r0, #29
 8001baa:	00c0      	lsls	r0, r0, #3
 8001bac:	08c0      	lsrs	r0, r0, #3
 8001bae:	0752      	lsls	r2, r2, #29
 8001bb0:	4302      	orrs	r2, r0
 8001bb2:	e6e7      	b.n	8001984 <__aeabi_dadd+0x39c>
 8001bb4:	2a00      	cmp	r2, #0
 8001bb6:	d100      	bne.n	8001bba <__aeabi_dadd+0x5d2>
 8001bb8:	e72d      	b.n	8001a16 <__aeabi_dadd+0x42e>
 8001bba:	4663      	mov	r3, ip
 8001bbc:	08d8      	lsrs	r0, r3, #3
 8001bbe:	4653      	mov	r3, sl
 8001bc0:	075a      	lsls	r2, r3, #29
 8001bc2:	000e      	movs	r6, r1
 8001bc4:	4302      	orrs	r2, r0
 8001bc6:	08dc      	lsrs	r4, r3, #3
 8001bc8:	e6cc      	b.n	8001964 <__aeabi_dadd+0x37c>
 8001bca:	4663      	mov	r3, ip
 8001bcc:	1a1d      	subs	r5, r3, r0
 8001bce:	45ac      	cmp	ip, r5
 8001bd0:	4192      	sbcs	r2, r2
 8001bd2:	4653      	mov	r3, sl
 8001bd4:	4252      	negs	r2, r2
 8001bd6:	1b1c      	subs	r4, r3, r4
 8001bd8:	000e      	movs	r6, r1
 8001bda:	4688      	mov	r8, r1
 8001bdc:	1aa4      	subs	r4, r4, r2
 8001bde:	3701      	adds	r7, #1
 8001be0:	e555      	b.n	800168e <__aeabi_dadd+0xa6>
 8001be2:	4663      	mov	r3, ip
 8001be4:	08d9      	lsrs	r1, r3, #3
 8001be6:	4653      	mov	r3, sl
 8001be8:	075a      	lsls	r2, r3, #29
 8001bea:	430a      	orrs	r2, r1
 8001bec:	08dc      	lsrs	r4, r3, #3
 8001bee:	e6c9      	b.n	8001984 <__aeabi_dadd+0x39c>
 8001bf0:	4660      	mov	r0, ip
 8001bf2:	4654      	mov	r4, sl
 8001bf4:	e6d4      	b.n	80019a0 <__aeabi_dadd+0x3b8>
 8001bf6:	08c0      	lsrs	r0, r0, #3
 8001bf8:	2a00      	cmp	r2, #0
 8001bfa:	d100      	bne.n	8001bfe <__aeabi_dadd+0x616>
 8001bfc:	e6bf      	b.n	800197e <__aeabi_dadd+0x396>
 8001bfe:	0762      	lsls	r2, r4, #29
 8001c00:	4310      	orrs	r0, r2
 8001c02:	2280      	movs	r2, #128	@ 0x80
 8001c04:	08e4      	lsrs	r4, r4, #3
 8001c06:	0312      	lsls	r2, r2, #12
 8001c08:	4214      	tst	r4, r2
 8001c0a:	d0cd      	beq.n	8001ba8 <__aeabi_dadd+0x5c0>
 8001c0c:	08dd      	lsrs	r5, r3, #3
 8001c0e:	4215      	tst	r5, r2
 8001c10:	d1ca      	bne.n	8001ba8 <__aeabi_dadd+0x5c0>
 8001c12:	4663      	mov	r3, ip
 8001c14:	08d8      	lsrs	r0, r3, #3
 8001c16:	4653      	mov	r3, sl
 8001c18:	075b      	lsls	r3, r3, #29
 8001c1a:	000e      	movs	r6, r1
 8001c1c:	002c      	movs	r4, r5
 8001c1e:	4318      	orrs	r0, r3
 8001c20:	e7c2      	b.n	8001ba8 <__aeabi_dadd+0x5c0>
 8001c22:	4663      	mov	r3, ip
 8001c24:	08d9      	lsrs	r1, r3, #3
 8001c26:	4653      	mov	r3, sl
 8001c28:	075a      	lsls	r2, r3, #29
 8001c2a:	430a      	orrs	r2, r1
 8001c2c:	08dc      	lsrs	r4, r3, #3
 8001c2e:	e699      	b.n	8001964 <__aeabi_dadd+0x37c>
 8001c30:	4663      	mov	r3, ip
 8001c32:	08d8      	lsrs	r0, r3, #3
 8001c34:	4653      	mov	r3, sl
 8001c36:	075a      	lsls	r2, r3, #29
 8001c38:	000e      	movs	r6, r1
 8001c3a:	4302      	orrs	r2, r0
 8001c3c:	08dc      	lsrs	r4, r3, #3
 8001c3e:	e6a1      	b.n	8001984 <__aeabi_dadd+0x39c>
 8001c40:	0011      	movs	r1, r2
 8001c42:	0027      	movs	r7, r4
 8001c44:	3920      	subs	r1, #32
 8001c46:	40cf      	lsrs	r7, r1
 8001c48:	2a20      	cmp	r2, #32
 8001c4a:	d003      	beq.n	8001c54 <__aeabi_dadd+0x66c>
 8001c4c:	2140      	movs	r1, #64	@ 0x40
 8001c4e:	1a8a      	subs	r2, r1, r2
 8001c50:	4094      	lsls	r4, r2
 8001c52:	4320      	orrs	r0, r4
 8001c54:	1e42      	subs	r2, r0, #1
 8001c56:	4190      	sbcs	r0, r2
 8001c58:	0005      	movs	r5, r0
 8001c5a:	433d      	orrs	r5, r7
 8001c5c:	e651      	b.n	8001902 <__aeabi_dadd+0x31a>
 8001c5e:	000c      	movs	r4, r1
 8001c60:	2500      	movs	r5, #0
 8001c62:	2200      	movs	r2, #0
 8001c64:	e558      	b.n	8001718 <__aeabi_dadd+0x130>
 8001c66:	4460      	add	r0, ip
 8001c68:	4560      	cmp	r0, ip
 8001c6a:	4192      	sbcs	r2, r2
 8001c6c:	4454      	add	r4, sl
 8001c6e:	4252      	negs	r2, r2
 8001c70:	0005      	movs	r5, r0
 8001c72:	18a4      	adds	r4, r4, r2
 8001c74:	e73a      	b.n	8001aec <__aeabi_dadd+0x504>
 8001c76:	4653      	mov	r3, sl
 8001c78:	075a      	lsls	r2, r3, #29
 8001c7a:	4663      	mov	r3, ip
 8001c7c:	08d9      	lsrs	r1, r3, #3
 8001c7e:	4653      	mov	r3, sl
 8001c80:	430a      	orrs	r2, r1
 8001c82:	08dc      	lsrs	r4, r3, #3
 8001c84:	e67e      	b.n	8001984 <__aeabi_dadd+0x39c>
 8001c86:	001a      	movs	r2, r3
 8001c88:	001c      	movs	r4, r3
 8001c8a:	432a      	orrs	r2, r5
 8001c8c:	d000      	beq.n	8001c90 <__aeabi_dadd+0x6a8>
 8001c8e:	e6ab      	b.n	80019e8 <__aeabi_dadd+0x400>
 8001c90:	e6c1      	b.n	8001a16 <__aeabi_dadd+0x42e>
 8001c92:	2120      	movs	r1, #32
 8001c94:	2500      	movs	r5, #0
 8001c96:	1a09      	subs	r1, r1, r0
 8001c98:	e519      	b.n	80016ce <__aeabi_dadd+0xe6>
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	2500      	movs	r5, #0
 8001c9e:	4c01      	ldr	r4, [pc, #4]	@ (8001ca4 <__aeabi_dadd+0x6bc>)
 8001ca0:	e53a      	b.n	8001718 <__aeabi_dadd+0x130>
 8001ca2:	46c0      	nop			@ (mov r8, r8)
 8001ca4:	000007ff 	.word	0x000007ff
 8001ca8:	ff7fffff 	.word	0xff7fffff
 8001cac:	000007fe 	.word	0x000007fe

08001cb0 <__aeabi_ddiv>:
 8001cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cb2:	46de      	mov	lr, fp
 8001cb4:	4645      	mov	r5, r8
 8001cb6:	4657      	mov	r7, sl
 8001cb8:	464e      	mov	r6, r9
 8001cba:	b5e0      	push	{r5, r6, r7, lr}
 8001cbc:	b087      	sub	sp, #28
 8001cbe:	9200      	str	r2, [sp, #0]
 8001cc0:	9301      	str	r3, [sp, #4]
 8001cc2:	030b      	lsls	r3, r1, #12
 8001cc4:	0b1b      	lsrs	r3, r3, #12
 8001cc6:	469b      	mov	fp, r3
 8001cc8:	0fca      	lsrs	r2, r1, #31
 8001cca:	004b      	lsls	r3, r1, #1
 8001ccc:	0004      	movs	r4, r0
 8001cce:	4680      	mov	r8, r0
 8001cd0:	0d5b      	lsrs	r3, r3, #21
 8001cd2:	9202      	str	r2, [sp, #8]
 8001cd4:	d100      	bne.n	8001cd8 <__aeabi_ddiv+0x28>
 8001cd6:	e16a      	b.n	8001fae <__aeabi_ddiv+0x2fe>
 8001cd8:	4ad4      	ldr	r2, [pc, #848]	@ (800202c <__aeabi_ddiv+0x37c>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d100      	bne.n	8001ce0 <__aeabi_ddiv+0x30>
 8001cde:	e18c      	b.n	8001ffa <__aeabi_ddiv+0x34a>
 8001ce0:	4659      	mov	r1, fp
 8001ce2:	0f42      	lsrs	r2, r0, #29
 8001ce4:	00c9      	lsls	r1, r1, #3
 8001ce6:	430a      	orrs	r2, r1
 8001ce8:	2180      	movs	r1, #128	@ 0x80
 8001cea:	0409      	lsls	r1, r1, #16
 8001cec:	4311      	orrs	r1, r2
 8001cee:	00c2      	lsls	r2, r0, #3
 8001cf0:	4690      	mov	r8, r2
 8001cf2:	4acf      	ldr	r2, [pc, #828]	@ (8002030 <__aeabi_ddiv+0x380>)
 8001cf4:	4689      	mov	r9, r1
 8001cf6:	4692      	mov	sl, r2
 8001cf8:	449a      	add	sl, r3
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	2400      	movs	r4, #0
 8001cfe:	9303      	str	r3, [sp, #12]
 8001d00:	9e00      	ldr	r6, [sp, #0]
 8001d02:	9f01      	ldr	r7, [sp, #4]
 8001d04:	033b      	lsls	r3, r7, #12
 8001d06:	0b1b      	lsrs	r3, r3, #12
 8001d08:	469b      	mov	fp, r3
 8001d0a:	007b      	lsls	r3, r7, #1
 8001d0c:	0030      	movs	r0, r6
 8001d0e:	0d5b      	lsrs	r3, r3, #21
 8001d10:	0ffd      	lsrs	r5, r7, #31
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d100      	bne.n	8001d18 <__aeabi_ddiv+0x68>
 8001d16:	e128      	b.n	8001f6a <__aeabi_ddiv+0x2ba>
 8001d18:	4ac4      	ldr	r2, [pc, #784]	@ (800202c <__aeabi_ddiv+0x37c>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d100      	bne.n	8001d20 <__aeabi_ddiv+0x70>
 8001d1e:	e177      	b.n	8002010 <__aeabi_ddiv+0x360>
 8001d20:	4659      	mov	r1, fp
 8001d22:	0f72      	lsrs	r2, r6, #29
 8001d24:	00c9      	lsls	r1, r1, #3
 8001d26:	430a      	orrs	r2, r1
 8001d28:	2180      	movs	r1, #128	@ 0x80
 8001d2a:	0409      	lsls	r1, r1, #16
 8001d2c:	4311      	orrs	r1, r2
 8001d2e:	468b      	mov	fp, r1
 8001d30:	49bf      	ldr	r1, [pc, #764]	@ (8002030 <__aeabi_ddiv+0x380>)
 8001d32:	00f2      	lsls	r2, r6, #3
 8001d34:	468c      	mov	ip, r1
 8001d36:	4651      	mov	r1, sl
 8001d38:	4463      	add	r3, ip
 8001d3a:	1acb      	subs	r3, r1, r3
 8001d3c:	469a      	mov	sl, r3
 8001d3e:	2300      	movs	r3, #0
 8001d40:	9e02      	ldr	r6, [sp, #8]
 8001d42:	406e      	eors	r6, r5
 8001d44:	2c0f      	cmp	r4, #15
 8001d46:	d827      	bhi.n	8001d98 <__aeabi_ddiv+0xe8>
 8001d48:	49ba      	ldr	r1, [pc, #744]	@ (8002034 <__aeabi_ddiv+0x384>)
 8001d4a:	00a4      	lsls	r4, r4, #2
 8001d4c:	5909      	ldr	r1, [r1, r4]
 8001d4e:	468f      	mov	pc, r1
 8001d50:	46cb      	mov	fp, r9
 8001d52:	4642      	mov	r2, r8
 8001d54:	9e02      	ldr	r6, [sp, #8]
 8001d56:	9b03      	ldr	r3, [sp, #12]
 8001d58:	2b02      	cmp	r3, #2
 8001d5a:	d016      	beq.n	8001d8a <__aeabi_ddiv+0xda>
 8001d5c:	2b03      	cmp	r3, #3
 8001d5e:	d100      	bne.n	8001d62 <__aeabi_ddiv+0xb2>
 8001d60:	e2a6      	b.n	80022b0 <__aeabi_ddiv+0x600>
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d000      	beq.n	8001d68 <__aeabi_ddiv+0xb8>
 8001d66:	e0df      	b.n	8001f28 <__aeabi_ddiv+0x278>
 8001d68:	2200      	movs	r2, #0
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	2400      	movs	r4, #0
 8001d6e:	4690      	mov	r8, r2
 8001d70:	051b      	lsls	r3, r3, #20
 8001d72:	4323      	orrs	r3, r4
 8001d74:	07f6      	lsls	r6, r6, #31
 8001d76:	4333      	orrs	r3, r6
 8001d78:	4640      	mov	r0, r8
 8001d7a:	0019      	movs	r1, r3
 8001d7c:	b007      	add	sp, #28
 8001d7e:	bcf0      	pop	{r4, r5, r6, r7}
 8001d80:	46bb      	mov	fp, r7
 8001d82:	46b2      	mov	sl, r6
 8001d84:	46a9      	mov	r9, r5
 8001d86:	46a0      	mov	r8, r4
 8001d88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	2400      	movs	r4, #0
 8001d8e:	4690      	mov	r8, r2
 8001d90:	4ba6      	ldr	r3, [pc, #664]	@ (800202c <__aeabi_ddiv+0x37c>)
 8001d92:	e7ed      	b.n	8001d70 <__aeabi_ddiv+0xc0>
 8001d94:	002e      	movs	r6, r5
 8001d96:	e7df      	b.n	8001d58 <__aeabi_ddiv+0xa8>
 8001d98:	45cb      	cmp	fp, r9
 8001d9a:	d200      	bcs.n	8001d9e <__aeabi_ddiv+0xee>
 8001d9c:	e1d4      	b.n	8002148 <__aeabi_ddiv+0x498>
 8001d9e:	d100      	bne.n	8001da2 <__aeabi_ddiv+0xf2>
 8001da0:	e1cf      	b.n	8002142 <__aeabi_ddiv+0x492>
 8001da2:	2301      	movs	r3, #1
 8001da4:	425b      	negs	r3, r3
 8001da6:	469c      	mov	ip, r3
 8001da8:	4644      	mov	r4, r8
 8001daa:	4648      	mov	r0, r9
 8001dac:	2700      	movs	r7, #0
 8001dae:	44e2      	add	sl, ip
 8001db0:	465b      	mov	r3, fp
 8001db2:	0e15      	lsrs	r5, r2, #24
 8001db4:	021b      	lsls	r3, r3, #8
 8001db6:	431d      	orrs	r5, r3
 8001db8:	0c19      	lsrs	r1, r3, #16
 8001dba:	042b      	lsls	r3, r5, #16
 8001dbc:	0212      	lsls	r2, r2, #8
 8001dbe:	9500      	str	r5, [sp, #0]
 8001dc0:	0c1d      	lsrs	r5, r3, #16
 8001dc2:	4691      	mov	r9, r2
 8001dc4:	9102      	str	r1, [sp, #8]
 8001dc6:	9503      	str	r5, [sp, #12]
 8001dc8:	f7fe fa40 	bl	800024c <__aeabi_uidivmod>
 8001dcc:	0002      	movs	r2, r0
 8001dce:	436a      	muls	r2, r5
 8001dd0:	040b      	lsls	r3, r1, #16
 8001dd2:	0c21      	lsrs	r1, r4, #16
 8001dd4:	4680      	mov	r8, r0
 8001dd6:	4319      	orrs	r1, r3
 8001dd8:	428a      	cmp	r2, r1
 8001dda:	d909      	bls.n	8001df0 <__aeabi_ddiv+0x140>
 8001ddc:	9d00      	ldr	r5, [sp, #0]
 8001dde:	2301      	movs	r3, #1
 8001de0:	46ac      	mov	ip, r5
 8001de2:	425b      	negs	r3, r3
 8001de4:	4461      	add	r1, ip
 8001de6:	469c      	mov	ip, r3
 8001de8:	44e0      	add	r8, ip
 8001dea:	428d      	cmp	r5, r1
 8001dec:	d800      	bhi.n	8001df0 <__aeabi_ddiv+0x140>
 8001dee:	e1fb      	b.n	80021e8 <__aeabi_ddiv+0x538>
 8001df0:	1a88      	subs	r0, r1, r2
 8001df2:	9902      	ldr	r1, [sp, #8]
 8001df4:	f7fe fa2a 	bl	800024c <__aeabi_uidivmod>
 8001df8:	9a03      	ldr	r2, [sp, #12]
 8001dfa:	0424      	lsls	r4, r4, #16
 8001dfc:	4342      	muls	r2, r0
 8001dfe:	0409      	lsls	r1, r1, #16
 8001e00:	0c24      	lsrs	r4, r4, #16
 8001e02:	0003      	movs	r3, r0
 8001e04:	430c      	orrs	r4, r1
 8001e06:	42a2      	cmp	r2, r4
 8001e08:	d906      	bls.n	8001e18 <__aeabi_ddiv+0x168>
 8001e0a:	9900      	ldr	r1, [sp, #0]
 8001e0c:	3b01      	subs	r3, #1
 8001e0e:	468c      	mov	ip, r1
 8001e10:	4464      	add	r4, ip
 8001e12:	42a1      	cmp	r1, r4
 8001e14:	d800      	bhi.n	8001e18 <__aeabi_ddiv+0x168>
 8001e16:	e1e1      	b.n	80021dc <__aeabi_ddiv+0x52c>
 8001e18:	1aa0      	subs	r0, r4, r2
 8001e1a:	4642      	mov	r2, r8
 8001e1c:	0412      	lsls	r2, r2, #16
 8001e1e:	431a      	orrs	r2, r3
 8001e20:	4693      	mov	fp, r2
 8001e22:	464b      	mov	r3, r9
 8001e24:	4659      	mov	r1, fp
 8001e26:	0c1b      	lsrs	r3, r3, #16
 8001e28:	001d      	movs	r5, r3
 8001e2a:	9304      	str	r3, [sp, #16]
 8001e2c:	040b      	lsls	r3, r1, #16
 8001e2e:	4649      	mov	r1, r9
 8001e30:	0409      	lsls	r1, r1, #16
 8001e32:	0c09      	lsrs	r1, r1, #16
 8001e34:	000c      	movs	r4, r1
 8001e36:	0c1b      	lsrs	r3, r3, #16
 8001e38:	435c      	muls	r4, r3
 8001e3a:	0c12      	lsrs	r2, r2, #16
 8001e3c:	436b      	muls	r3, r5
 8001e3e:	4688      	mov	r8, r1
 8001e40:	4351      	muls	r1, r2
 8001e42:	436a      	muls	r2, r5
 8001e44:	0c25      	lsrs	r5, r4, #16
 8001e46:	46ac      	mov	ip, r5
 8001e48:	185b      	adds	r3, r3, r1
 8001e4a:	4463      	add	r3, ip
 8001e4c:	4299      	cmp	r1, r3
 8001e4e:	d903      	bls.n	8001e58 <__aeabi_ddiv+0x1a8>
 8001e50:	2180      	movs	r1, #128	@ 0x80
 8001e52:	0249      	lsls	r1, r1, #9
 8001e54:	468c      	mov	ip, r1
 8001e56:	4462      	add	r2, ip
 8001e58:	0c19      	lsrs	r1, r3, #16
 8001e5a:	0424      	lsls	r4, r4, #16
 8001e5c:	041b      	lsls	r3, r3, #16
 8001e5e:	0c24      	lsrs	r4, r4, #16
 8001e60:	188a      	adds	r2, r1, r2
 8001e62:	191c      	adds	r4, r3, r4
 8001e64:	4290      	cmp	r0, r2
 8001e66:	d302      	bcc.n	8001e6e <__aeabi_ddiv+0x1be>
 8001e68:	d116      	bne.n	8001e98 <__aeabi_ddiv+0x1e8>
 8001e6a:	42a7      	cmp	r7, r4
 8001e6c:	d214      	bcs.n	8001e98 <__aeabi_ddiv+0x1e8>
 8001e6e:	465b      	mov	r3, fp
 8001e70:	9d00      	ldr	r5, [sp, #0]
 8001e72:	3b01      	subs	r3, #1
 8001e74:	444f      	add	r7, r9
 8001e76:	9305      	str	r3, [sp, #20]
 8001e78:	454f      	cmp	r7, r9
 8001e7a:	419b      	sbcs	r3, r3
 8001e7c:	46ac      	mov	ip, r5
 8001e7e:	425b      	negs	r3, r3
 8001e80:	4463      	add	r3, ip
 8001e82:	18c0      	adds	r0, r0, r3
 8001e84:	4285      	cmp	r5, r0
 8001e86:	d300      	bcc.n	8001e8a <__aeabi_ddiv+0x1da>
 8001e88:	e1a1      	b.n	80021ce <__aeabi_ddiv+0x51e>
 8001e8a:	4282      	cmp	r2, r0
 8001e8c:	d900      	bls.n	8001e90 <__aeabi_ddiv+0x1e0>
 8001e8e:	e1f6      	b.n	800227e <__aeabi_ddiv+0x5ce>
 8001e90:	d100      	bne.n	8001e94 <__aeabi_ddiv+0x1e4>
 8001e92:	e1f1      	b.n	8002278 <__aeabi_ddiv+0x5c8>
 8001e94:	9b05      	ldr	r3, [sp, #20]
 8001e96:	469b      	mov	fp, r3
 8001e98:	1b3c      	subs	r4, r7, r4
 8001e9a:	42a7      	cmp	r7, r4
 8001e9c:	41bf      	sbcs	r7, r7
 8001e9e:	9d00      	ldr	r5, [sp, #0]
 8001ea0:	1a80      	subs	r0, r0, r2
 8001ea2:	427f      	negs	r7, r7
 8001ea4:	1bc0      	subs	r0, r0, r7
 8001ea6:	4285      	cmp	r5, r0
 8001ea8:	d100      	bne.n	8001eac <__aeabi_ddiv+0x1fc>
 8001eaa:	e1d0      	b.n	800224e <__aeabi_ddiv+0x59e>
 8001eac:	9902      	ldr	r1, [sp, #8]
 8001eae:	f7fe f9cd 	bl	800024c <__aeabi_uidivmod>
 8001eb2:	9a03      	ldr	r2, [sp, #12]
 8001eb4:	040b      	lsls	r3, r1, #16
 8001eb6:	4342      	muls	r2, r0
 8001eb8:	0c21      	lsrs	r1, r4, #16
 8001eba:	0007      	movs	r7, r0
 8001ebc:	4319      	orrs	r1, r3
 8001ebe:	428a      	cmp	r2, r1
 8001ec0:	d900      	bls.n	8001ec4 <__aeabi_ddiv+0x214>
 8001ec2:	e178      	b.n	80021b6 <__aeabi_ddiv+0x506>
 8001ec4:	1a88      	subs	r0, r1, r2
 8001ec6:	9902      	ldr	r1, [sp, #8]
 8001ec8:	f7fe f9c0 	bl	800024c <__aeabi_uidivmod>
 8001ecc:	9a03      	ldr	r2, [sp, #12]
 8001ece:	0424      	lsls	r4, r4, #16
 8001ed0:	4342      	muls	r2, r0
 8001ed2:	0409      	lsls	r1, r1, #16
 8001ed4:	0c24      	lsrs	r4, r4, #16
 8001ed6:	0003      	movs	r3, r0
 8001ed8:	430c      	orrs	r4, r1
 8001eda:	42a2      	cmp	r2, r4
 8001edc:	d900      	bls.n	8001ee0 <__aeabi_ddiv+0x230>
 8001ede:	e15d      	b.n	800219c <__aeabi_ddiv+0x4ec>
 8001ee0:	4641      	mov	r1, r8
 8001ee2:	1aa4      	subs	r4, r4, r2
 8001ee4:	043a      	lsls	r2, r7, #16
 8001ee6:	431a      	orrs	r2, r3
 8001ee8:	9d04      	ldr	r5, [sp, #16]
 8001eea:	0413      	lsls	r3, r2, #16
 8001eec:	0c1b      	lsrs	r3, r3, #16
 8001eee:	4359      	muls	r1, r3
 8001ef0:	4647      	mov	r7, r8
 8001ef2:	436b      	muls	r3, r5
 8001ef4:	469c      	mov	ip, r3
 8001ef6:	0c10      	lsrs	r0, r2, #16
 8001ef8:	4347      	muls	r7, r0
 8001efa:	0c0b      	lsrs	r3, r1, #16
 8001efc:	44bc      	add	ip, r7
 8001efe:	4463      	add	r3, ip
 8001f00:	4368      	muls	r0, r5
 8001f02:	429f      	cmp	r7, r3
 8001f04:	d903      	bls.n	8001f0e <__aeabi_ddiv+0x25e>
 8001f06:	2580      	movs	r5, #128	@ 0x80
 8001f08:	026d      	lsls	r5, r5, #9
 8001f0a:	46ac      	mov	ip, r5
 8001f0c:	4460      	add	r0, ip
 8001f0e:	0c1f      	lsrs	r7, r3, #16
 8001f10:	0409      	lsls	r1, r1, #16
 8001f12:	041b      	lsls	r3, r3, #16
 8001f14:	0c09      	lsrs	r1, r1, #16
 8001f16:	183f      	adds	r7, r7, r0
 8001f18:	185b      	adds	r3, r3, r1
 8001f1a:	42bc      	cmp	r4, r7
 8001f1c:	d200      	bcs.n	8001f20 <__aeabi_ddiv+0x270>
 8001f1e:	e102      	b.n	8002126 <__aeabi_ddiv+0x476>
 8001f20:	d100      	bne.n	8001f24 <__aeabi_ddiv+0x274>
 8001f22:	e0fd      	b.n	8002120 <__aeabi_ddiv+0x470>
 8001f24:	2301      	movs	r3, #1
 8001f26:	431a      	orrs	r2, r3
 8001f28:	4b43      	ldr	r3, [pc, #268]	@ (8002038 <__aeabi_ddiv+0x388>)
 8001f2a:	4453      	add	r3, sl
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	dc00      	bgt.n	8001f32 <__aeabi_ddiv+0x282>
 8001f30:	e0ae      	b.n	8002090 <__aeabi_ddiv+0x3e0>
 8001f32:	0751      	lsls	r1, r2, #29
 8001f34:	d000      	beq.n	8001f38 <__aeabi_ddiv+0x288>
 8001f36:	e198      	b.n	800226a <__aeabi_ddiv+0x5ba>
 8001f38:	4659      	mov	r1, fp
 8001f3a:	01c9      	lsls	r1, r1, #7
 8001f3c:	d506      	bpl.n	8001f4c <__aeabi_ddiv+0x29c>
 8001f3e:	4659      	mov	r1, fp
 8001f40:	4b3e      	ldr	r3, [pc, #248]	@ (800203c <__aeabi_ddiv+0x38c>)
 8001f42:	4019      	ands	r1, r3
 8001f44:	2380      	movs	r3, #128	@ 0x80
 8001f46:	468b      	mov	fp, r1
 8001f48:	00db      	lsls	r3, r3, #3
 8001f4a:	4453      	add	r3, sl
 8001f4c:	493c      	ldr	r1, [pc, #240]	@ (8002040 <__aeabi_ddiv+0x390>)
 8001f4e:	428b      	cmp	r3, r1
 8001f50:	dd00      	ble.n	8001f54 <__aeabi_ddiv+0x2a4>
 8001f52:	e71a      	b.n	8001d8a <__aeabi_ddiv+0xda>
 8001f54:	4659      	mov	r1, fp
 8001f56:	08d2      	lsrs	r2, r2, #3
 8001f58:	0749      	lsls	r1, r1, #29
 8001f5a:	4311      	orrs	r1, r2
 8001f5c:	465a      	mov	r2, fp
 8001f5e:	055b      	lsls	r3, r3, #21
 8001f60:	0254      	lsls	r4, r2, #9
 8001f62:	4688      	mov	r8, r1
 8001f64:	0b24      	lsrs	r4, r4, #12
 8001f66:	0d5b      	lsrs	r3, r3, #21
 8001f68:	e702      	b.n	8001d70 <__aeabi_ddiv+0xc0>
 8001f6a:	465a      	mov	r2, fp
 8001f6c:	9b00      	ldr	r3, [sp, #0]
 8001f6e:	431a      	orrs	r2, r3
 8001f70:	d100      	bne.n	8001f74 <__aeabi_ddiv+0x2c4>
 8001f72:	e07e      	b.n	8002072 <__aeabi_ddiv+0x3c2>
 8001f74:	465b      	mov	r3, fp
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d100      	bne.n	8001f7c <__aeabi_ddiv+0x2cc>
 8001f7a:	e100      	b.n	800217e <__aeabi_ddiv+0x4ce>
 8001f7c:	4658      	mov	r0, fp
 8001f7e:	f001 fabb 	bl	80034f8 <__clzsi2>
 8001f82:	0002      	movs	r2, r0
 8001f84:	0003      	movs	r3, r0
 8001f86:	3a0b      	subs	r2, #11
 8001f88:	271d      	movs	r7, #29
 8001f8a:	9e00      	ldr	r6, [sp, #0]
 8001f8c:	1aba      	subs	r2, r7, r2
 8001f8e:	0019      	movs	r1, r3
 8001f90:	4658      	mov	r0, fp
 8001f92:	40d6      	lsrs	r6, r2
 8001f94:	3908      	subs	r1, #8
 8001f96:	4088      	lsls	r0, r1
 8001f98:	0032      	movs	r2, r6
 8001f9a:	4302      	orrs	r2, r0
 8001f9c:	4693      	mov	fp, r2
 8001f9e:	9a00      	ldr	r2, [sp, #0]
 8001fa0:	408a      	lsls	r2, r1
 8001fa2:	4928      	ldr	r1, [pc, #160]	@ (8002044 <__aeabi_ddiv+0x394>)
 8001fa4:	4453      	add	r3, sl
 8001fa6:	468a      	mov	sl, r1
 8001fa8:	449a      	add	sl, r3
 8001faa:	2300      	movs	r3, #0
 8001fac:	e6c8      	b.n	8001d40 <__aeabi_ddiv+0x90>
 8001fae:	465b      	mov	r3, fp
 8001fb0:	4303      	orrs	r3, r0
 8001fb2:	4699      	mov	r9, r3
 8001fb4:	d056      	beq.n	8002064 <__aeabi_ddiv+0x3b4>
 8001fb6:	465b      	mov	r3, fp
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d100      	bne.n	8001fbe <__aeabi_ddiv+0x30e>
 8001fbc:	e0cd      	b.n	800215a <__aeabi_ddiv+0x4aa>
 8001fbe:	4658      	mov	r0, fp
 8001fc0:	f001 fa9a 	bl	80034f8 <__clzsi2>
 8001fc4:	230b      	movs	r3, #11
 8001fc6:	425b      	negs	r3, r3
 8001fc8:	469c      	mov	ip, r3
 8001fca:	0002      	movs	r2, r0
 8001fcc:	4484      	add	ip, r0
 8001fce:	4666      	mov	r6, ip
 8001fd0:	231d      	movs	r3, #29
 8001fd2:	1b9b      	subs	r3, r3, r6
 8001fd4:	0026      	movs	r6, r4
 8001fd6:	0011      	movs	r1, r2
 8001fd8:	4658      	mov	r0, fp
 8001fda:	40de      	lsrs	r6, r3
 8001fdc:	3908      	subs	r1, #8
 8001fde:	4088      	lsls	r0, r1
 8001fe0:	0033      	movs	r3, r6
 8001fe2:	4303      	orrs	r3, r0
 8001fe4:	4699      	mov	r9, r3
 8001fe6:	0023      	movs	r3, r4
 8001fe8:	408b      	lsls	r3, r1
 8001fea:	4698      	mov	r8, r3
 8001fec:	4b16      	ldr	r3, [pc, #88]	@ (8002048 <__aeabi_ddiv+0x398>)
 8001fee:	2400      	movs	r4, #0
 8001ff0:	1a9b      	subs	r3, r3, r2
 8001ff2:	469a      	mov	sl, r3
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	9303      	str	r3, [sp, #12]
 8001ff8:	e682      	b.n	8001d00 <__aeabi_ddiv+0x50>
 8001ffa:	465a      	mov	r2, fp
 8001ffc:	4302      	orrs	r2, r0
 8001ffe:	4691      	mov	r9, r2
 8002000:	d12a      	bne.n	8002058 <__aeabi_ddiv+0x3a8>
 8002002:	2200      	movs	r2, #0
 8002004:	469a      	mov	sl, r3
 8002006:	2302      	movs	r3, #2
 8002008:	4690      	mov	r8, r2
 800200a:	2408      	movs	r4, #8
 800200c:	9303      	str	r3, [sp, #12]
 800200e:	e677      	b.n	8001d00 <__aeabi_ddiv+0x50>
 8002010:	465a      	mov	r2, fp
 8002012:	9b00      	ldr	r3, [sp, #0]
 8002014:	431a      	orrs	r2, r3
 8002016:	4b0d      	ldr	r3, [pc, #52]	@ (800204c <__aeabi_ddiv+0x39c>)
 8002018:	469c      	mov	ip, r3
 800201a:	44e2      	add	sl, ip
 800201c:	2a00      	cmp	r2, #0
 800201e:	d117      	bne.n	8002050 <__aeabi_ddiv+0x3a0>
 8002020:	2302      	movs	r3, #2
 8002022:	431c      	orrs	r4, r3
 8002024:	2300      	movs	r3, #0
 8002026:	469b      	mov	fp, r3
 8002028:	3302      	adds	r3, #2
 800202a:	e689      	b.n	8001d40 <__aeabi_ddiv+0x90>
 800202c:	000007ff 	.word	0x000007ff
 8002030:	fffffc01 	.word	0xfffffc01
 8002034:	0801b7c0 	.word	0x0801b7c0
 8002038:	000003ff 	.word	0x000003ff
 800203c:	feffffff 	.word	0xfeffffff
 8002040:	000007fe 	.word	0x000007fe
 8002044:	000003f3 	.word	0x000003f3
 8002048:	fffffc0d 	.word	0xfffffc0d
 800204c:	fffff801 	.word	0xfffff801
 8002050:	2303      	movs	r3, #3
 8002052:	0032      	movs	r2, r6
 8002054:	431c      	orrs	r4, r3
 8002056:	e673      	b.n	8001d40 <__aeabi_ddiv+0x90>
 8002058:	469a      	mov	sl, r3
 800205a:	2303      	movs	r3, #3
 800205c:	46d9      	mov	r9, fp
 800205e:	240c      	movs	r4, #12
 8002060:	9303      	str	r3, [sp, #12]
 8002062:	e64d      	b.n	8001d00 <__aeabi_ddiv+0x50>
 8002064:	2300      	movs	r3, #0
 8002066:	4698      	mov	r8, r3
 8002068:	469a      	mov	sl, r3
 800206a:	3301      	adds	r3, #1
 800206c:	2404      	movs	r4, #4
 800206e:	9303      	str	r3, [sp, #12]
 8002070:	e646      	b.n	8001d00 <__aeabi_ddiv+0x50>
 8002072:	2301      	movs	r3, #1
 8002074:	431c      	orrs	r4, r3
 8002076:	2300      	movs	r3, #0
 8002078:	469b      	mov	fp, r3
 800207a:	3301      	adds	r3, #1
 800207c:	e660      	b.n	8001d40 <__aeabi_ddiv+0x90>
 800207e:	2300      	movs	r3, #0
 8002080:	2480      	movs	r4, #128	@ 0x80
 8002082:	4698      	mov	r8, r3
 8002084:	2600      	movs	r6, #0
 8002086:	4b92      	ldr	r3, [pc, #584]	@ (80022d0 <__aeabi_ddiv+0x620>)
 8002088:	0324      	lsls	r4, r4, #12
 800208a:	e671      	b.n	8001d70 <__aeabi_ddiv+0xc0>
 800208c:	2201      	movs	r2, #1
 800208e:	4252      	negs	r2, r2
 8002090:	2101      	movs	r1, #1
 8002092:	1ac9      	subs	r1, r1, r3
 8002094:	2938      	cmp	r1, #56	@ 0x38
 8002096:	dd00      	ble.n	800209a <__aeabi_ddiv+0x3ea>
 8002098:	e666      	b.n	8001d68 <__aeabi_ddiv+0xb8>
 800209a:	291f      	cmp	r1, #31
 800209c:	dc00      	bgt.n	80020a0 <__aeabi_ddiv+0x3f0>
 800209e:	e0ab      	b.n	80021f8 <__aeabi_ddiv+0x548>
 80020a0:	201f      	movs	r0, #31
 80020a2:	4240      	negs	r0, r0
 80020a4:	1ac3      	subs	r3, r0, r3
 80020a6:	4658      	mov	r0, fp
 80020a8:	40d8      	lsrs	r0, r3
 80020aa:	0003      	movs	r3, r0
 80020ac:	2920      	cmp	r1, #32
 80020ae:	d004      	beq.n	80020ba <__aeabi_ddiv+0x40a>
 80020b0:	4658      	mov	r0, fp
 80020b2:	4988      	ldr	r1, [pc, #544]	@ (80022d4 <__aeabi_ddiv+0x624>)
 80020b4:	4451      	add	r1, sl
 80020b6:	4088      	lsls	r0, r1
 80020b8:	4302      	orrs	r2, r0
 80020ba:	1e51      	subs	r1, r2, #1
 80020bc:	418a      	sbcs	r2, r1
 80020be:	431a      	orrs	r2, r3
 80020c0:	2307      	movs	r3, #7
 80020c2:	0019      	movs	r1, r3
 80020c4:	2400      	movs	r4, #0
 80020c6:	4011      	ands	r1, r2
 80020c8:	4213      	tst	r3, r2
 80020ca:	d00c      	beq.n	80020e6 <__aeabi_ddiv+0x436>
 80020cc:	230f      	movs	r3, #15
 80020ce:	4013      	ands	r3, r2
 80020d0:	2b04      	cmp	r3, #4
 80020d2:	d100      	bne.n	80020d6 <__aeabi_ddiv+0x426>
 80020d4:	e0f9      	b.n	80022ca <__aeabi_ddiv+0x61a>
 80020d6:	1d11      	adds	r1, r2, #4
 80020d8:	4291      	cmp	r1, r2
 80020da:	419b      	sbcs	r3, r3
 80020dc:	000a      	movs	r2, r1
 80020de:	425b      	negs	r3, r3
 80020e0:	0759      	lsls	r1, r3, #29
 80020e2:	025b      	lsls	r3, r3, #9
 80020e4:	0b1c      	lsrs	r4, r3, #12
 80020e6:	08d2      	lsrs	r2, r2, #3
 80020e8:	430a      	orrs	r2, r1
 80020ea:	4690      	mov	r8, r2
 80020ec:	2300      	movs	r3, #0
 80020ee:	e63f      	b.n	8001d70 <__aeabi_ddiv+0xc0>
 80020f0:	2480      	movs	r4, #128	@ 0x80
 80020f2:	464b      	mov	r3, r9
 80020f4:	0324      	lsls	r4, r4, #12
 80020f6:	4223      	tst	r3, r4
 80020f8:	d009      	beq.n	800210e <__aeabi_ddiv+0x45e>
 80020fa:	465b      	mov	r3, fp
 80020fc:	4223      	tst	r3, r4
 80020fe:	d106      	bne.n	800210e <__aeabi_ddiv+0x45e>
 8002100:	431c      	orrs	r4, r3
 8002102:	0324      	lsls	r4, r4, #12
 8002104:	002e      	movs	r6, r5
 8002106:	4690      	mov	r8, r2
 8002108:	4b71      	ldr	r3, [pc, #452]	@ (80022d0 <__aeabi_ddiv+0x620>)
 800210a:	0b24      	lsrs	r4, r4, #12
 800210c:	e630      	b.n	8001d70 <__aeabi_ddiv+0xc0>
 800210e:	2480      	movs	r4, #128	@ 0x80
 8002110:	464b      	mov	r3, r9
 8002112:	0324      	lsls	r4, r4, #12
 8002114:	431c      	orrs	r4, r3
 8002116:	0324      	lsls	r4, r4, #12
 8002118:	9e02      	ldr	r6, [sp, #8]
 800211a:	4b6d      	ldr	r3, [pc, #436]	@ (80022d0 <__aeabi_ddiv+0x620>)
 800211c:	0b24      	lsrs	r4, r4, #12
 800211e:	e627      	b.n	8001d70 <__aeabi_ddiv+0xc0>
 8002120:	2b00      	cmp	r3, #0
 8002122:	d100      	bne.n	8002126 <__aeabi_ddiv+0x476>
 8002124:	e700      	b.n	8001f28 <__aeabi_ddiv+0x278>
 8002126:	9800      	ldr	r0, [sp, #0]
 8002128:	1e51      	subs	r1, r2, #1
 800212a:	4684      	mov	ip, r0
 800212c:	4464      	add	r4, ip
 800212e:	4284      	cmp	r4, r0
 8002130:	d200      	bcs.n	8002134 <__aeabi_ddiv+0x484>
 8002132:	e084      	b.n	800223e <__aeabi_ddiv+0x58e>
 8002134:	42bc      	cmp	r4, r7
 8002136:	d200      	bcs.n	800213a <__aeabi_ddiv+0x48a>
 8002138:	e0ae      	b.n	8002298 <__aeabi_ddiv+0x5e8>
 800213a:	d100      	bne.n	800213e <__aeabi_ddiv+0x48e>
 800213c:	e0c1      	b.n	80022c2 <__aeabi_ddiv+0x612>
 800213e:	000a      	movs	r2, r1
 8002140:	e6f0      	b.n	8001f24 <__aeabi_ddiv+0x274>
 8002142:	4542      	cmp	r2, r8
 8002144:	d900      	bls.n	8002148 <__aeabi_ddiv+0x498>
 8002146:	e62c      	b.n	8001da2 <__aeabi_ddiv+0xf2>
 8002148:	464b      	mov	r3, r9
 800214a:	07dc      	lsls	r4, r3, #31
 800214c:	0858      	lsrs	r0, r3, #1
 800214e:	4643      	mov	r3, r8
 8002150:	085b      	lsrs	r3, r3, #1
 8002152:	431c      	orrs	r4, r3
 8002154:	4643      	mov	r3, r8
 8002156:	07df      	lsls	r7, r3, #31
 8002158:	e62a      	b.n	8001db0 <__aeabi_ddiv+0x100>
 800215a:	f001 f9cd 	bl	80034f8 <__clzsi2>
 800215e:	2315      	movs	r3, #21
 8002160:	469c      	mov	ip, r3
 8002162:	4484      	add	ip, r0
 8002164:	0002      	movs	r2, r0
 8002166:	4663      	mov	r3, ip
 8002168:	3220      	adds	r2, #32
 800216a:	2b1c      	cmp	r3, #28
 800216c:	dc00      	bgt.n	8002170 <__aeabi_ddiv+0x4c0>
 800216e:	e72e      	b.n	8001fce <__aeabi_ddiv+0x31e>
 8002170:	0023      	movs	r3, r4
 8002172:	3808      	subs	r0, #8
 8002174:	4083      	lsls	r3, r0
 8002176:	4699      	mov	r9, r3
 8002178:	2300      	movs	r3, #0
 800217a:	4698      	mov	r8, r3
 800217c:	e736      	b.n	8001fec <__aeabi_ddiv+0x33c>
 800217e:	f001 f9bb 	bl	80034f8 <__clzsi2>
 8002182:	0002      	movs	r2, r0
 8002184:	0003      	movs	r3, r0
 8002186:	3215      	adds	r2, #21
 8002188:	3320      	adds	r3, #32
 800218a:	2a1c      	cmp	r2, #28
 800218c:	dc00      	bgt.n	8002190 <__aeabi_ddiv+0x4e0>
 800218e:	e6fb      	b.n	8001f88 <__aeabi_ddiv+0x2d8>
 8002190:	9900      	ldr	r1, [sp, #0]
 8002192:	3808      	subs	r0, #8
 8002194:	4081      	lsls	r1, r0
 8002196:	2200      	movs	r2, #0
 8002198:	468b      	mov	fp, r1
 800219a:	e702      	b.n	8001fa2 <__aeabi_ddiv+0x2f2>
 800219c:	9900      	ldr	r1, [sp, #0]
 800219e:	3b01      	subs	r3, #1
 80021a0:	468c      	mov	ip, r1
 80021a2:	4464      	add	r4, ip
 80021a4:	42a1      	cmp	r1, r4
 80021a6:	d900      	bls.n	80021aa <__aeabi_ddiv+0x4fa>
 80021a8:	e69a      	b.n	8001ee0 <__aeabi_ddiv+0x230>
 80021aa:	42a2      	cmp	r2, r4
 80021ac:	d800      	bhi.n	80021b0 <__aeabi_ddiv+0x500>
 80021ae:	e697      	b.n	8001ee0 <__aeabi_ddiv+0x230>
 80021b0:	1e83      	subs	r3, r0, #2
 80021b2:	4464      	add	r4, ip
 80021b4:	e694      	b.n	8001ee0 <__aeabi_ddiv+0x230>
 80021b6:	46ac      	mov	ip, r5
 80021b8:	4461      	add	r1, ip
 80021ba:	3f01      	subs	r7, #1
 80021bc:	428d      	cmp	r5, r1
 80021be:	d900      	bls.n	80021c2 <__aeabi_ddiv+0x512>
 80021c0:	e680      	b.n	8001ec4 <__aeabi_ddiv+0x214>
 80021c2:	428a      	cmp	r2, r1
 80021c4:	d800      	bhi.n	80021c8 <__aeabi_ddiv+0x518>
 80021c6:	e67d      	b.n	8001ec4 <__aeabi_ddiv+0x214>
 80021c8:	1e87      	subs	r7, r0, #2
 80021ca:	4461      	add	r1, ip
 80021cc:	e67a      	b.n	8001ec4 <__aeabi_ddiv+0x214>
 80021ce:	4285      	cmp	r5, r0
 80021d0:	d000      	beq.n	80021d4 <__aeabi_ddiv+0x524>
 80021d2:	e65f      	b.n	8001e94 <__aeabi_ddiv+0x1e4>
 80021d4:	45b9      	cmp	r9, r7
 80021d6:	d900      	bls.n	80021da <__aeabi_ddiv+0x52a>
 80021d8:	e65c      	b.n	8001e94 <__aeabi_ddiv+0x1e4>
 80021da:	e656      	b.n	8001e8a <__aeabi_ddiv+0x1da>
 80021dc:	42a2      	cmp	r2, r4
 80021de:	d800      	bhi.n	80021e2 <__aeabi_ddiv+0x532>
 80021e0:	e61a      	b.n	8001e18 <__aeabi_ddiv+0x168>
 80021e2:	1e83      	subs	r3, r0, #2
 80021e4:	4464      	add	r4, ip
 80021e6:	e617      	b.n	8001e18 <__aeabi_ddiv+0x168>
 80021e8:	428a      	cmp	r2, r1
 80021ea:	d800      	bhi.n	80021ee <__aeabi_ddiv+0x53e>
 80021ec:	e600      	b.n	8001df0 <__aeabi_ddiv+0x140>
 80021ee:	46ac      	mov	ip, r5
 80021f0:	1e83      	subs	r3, r0, #2
 80021f2:	4698      	mov	r8, r3
 80021f4:	4461      	add	r1, ip
 80021f6:	e5fb      	b.n	8001df0 <__aeabi_ddiv+0x140>
 80021f8:	4837      	ldr	r0, [pc, #220]	@ (80022d8 <__aeabi_ddiv+0x628>)
 80021fa:	0014      	movs	r4, r2
 80021fc:	4450      	add	r0, sl
 80021fe:	4082      	lsls	r2, r0
 8002200:	465b      	mov	r3, fp
 8002202:	0017      	movs	r7, r2
 8002204:	4083      	lsls	r3, r0
 8002206:	40cc      	lsrs	r4, r1
 8002208:	1e7a      	subs	r2, r7, #1
 800220a:	4197      	sbcs	r7, r2
 800220c:	4323      	orrs	r3, r4
 800220e:	433b      	orrs	r3, r7
 8002210:	001a      	movs	r2, r3
 8002212:	465b      	mov	r3, fp
 8002214:	40cb      	lsrs	r3, r1
 8002216:	0751      	lsls	r1, r2, #29
 8002218:	d009      	beq.n	800222e <__aeabi_ddiv+0x57e>
 800221a:	210f      	movs	r1, #15
 800221c:	4011      	ands	r1, r2
 800221e:	2904      	cmp	r1, #4
 8002220:	d005      	beq.n	800222e <__aeabi_ddiv+0x57e>
 8002222:	1d11      	adds	r1, r2, #4
 8002224:	4291      	cmp	r1, r2
 8002226:	4192      	sbcs	r2, r2
 8002228:	4252      	negs	r2, r2
 800222a:	189b      	adds	r3, r3, r2
 800222c:	000a      	movs	r2, r1
 800222e:	0219      	lsls	r1, r3, #8
 8002230:	d400      	bmi.n	8002234 <__aeabi_ddiv+0x584>
 8002232:	e755      	b.n	80020e0 <__aeabi_ddiv+0x430>
 8002234:	2200      	movs	r2, #0
 8002236:	2301      	movs	r3, #1
 8002238:	2400      	movs	r4, #0
 800223a:	4690      	mov	r8, r2
 800223c:	e598      	b.n	8001d70 <__aeabi_ddiv+0xc0>
 800223e:	000a      	movs	r2, r1
 8002240:	42bc      	cmp	r4, r7
 8002242:	d000      	beq.n	8002246 <__aeabi_ddiv+0x596>
 8002244:	e66e      	b.n	8001f24 <__aeabi_ddiv+0x274>
 8002246:	454b      	cmp	r3, r9
 8002248:	d000      	beq.n	800224c <__aeabi_ddiv+0x59c>
 800224a:	e66b      	b.n	8001f24 <__aeabi_ddiv+0x274>
 800224c:	e66c      	b.n	8001f28 <__aeabi_ddiv+0x278>
 800224e:	4b23      	ldr	r3, [pc, #140]	@ (80022dc <__aeabi_ddiv+0x62c>)
 8002250:	4a23      	ldr	r2, [pc, #140]	@ (80022e0 <__aeabi_ddiv+0x630>)
 8002252:	4453      	add	r3, sl
 8002254:	4592      	cmp	sl, r2
 8002256:	da00      	bge.n	800225a <__aeabi_ddiv+0x5aa>
 8002258:	e718      	b.n	800208c <__aeabi_ddiv+0x3dc>
 800225a:	2101      	movs	r1, #1
 800225c:	4249      	negs	r1, r1
 800225e:	1d0a      	adds	r2, r1, #4
 8002260:	428a      	cmp	r2, r1
 8002262:	4189      	sbcs	r1, r1
 8002264:	4249      	negs	r1, r1
 8002266:	448b      	add	fp, r1
 8002268:	e666      	b.n	8001f38 <__aeabi_ddiv+0x288>
 800226a:	210f      	movs	r1, #15
 800226c:	4011      	ands	r1, r2
 800226e:	2904      	cmp	r1, #4
 8002270:	d100      	bne.n	8002274 <__aeabi_ddiv+0x5c4>
 8002272:	e661      	b.n	8001f38 <__aeabi_ddiv+0x288>
 8002274:	0011      	movs	r1, r2
 8002276:	e7f2      	b.n	800225e <__aeabi_ddiv+0x5ae>
 8002278:	42bc      	cmp	r4, r7
 800227a:	d800      	bhi.n	800227e <__aeabi_ddiv+0x5ce>
 800227c:	e60a      	b.n	8001e94 <__aeabi_ddiv+0x1e4>
 800227e:	2302      	movs	r3, #2
 8002280:	425b      	negs	r3, r3
 8002282:	469c      	mov	ip, r3
 8002284:	9900      	ldr	r1, [sp, #0]
 8002286:	444f      	add	r7, r9
 8002288:	454f      	cmp	r7, r9
 800228a:	419b      	sbcs	r3, r3
 800228c:	44e3      	add	fp, ip
 800228e:	468c      	mov	ip, r1
 8002290:	425b      	negs	r3, r3
 8002292:	4463      	add	r3, ip
 8002294:	18c0      	adds	r0, r0, r3
 8002296:	e5ff      	b.n	8001e98 <__aeabi_ddiv+0x1e8>
 8002298:	4649      	mov	r1, r9
 800229a:	9d00      	ldr	r5, [sp, #0]
 800229c:	0048      	lsls	r0, r1, #1
 800229e:	4548      	cmp	r0, r9
 80022a0:	4189      	sbcs	r1, r1
 80022a2:	46ac      	mov	ip, r5
 80022a4:	4249      	negs	r1, r1
 80022a6:	4461      	add	r1, ip
 80022a8:	4681      	mov	r9, r0
 80022aa:	3a02      	subs	r2, #2
 80022ac:	1864      	adds	r4, r4, r1
 80022ae:	e7c7      	b.n	8002240 <__aeabi_ddiv+0x590>
 80022b0:	2480      	movs	r4, #128	@ 0x80
 80022b2:	465b      	mov	r3, fp
 80022b4:	0324      	lsls	r4, r4, #12
 80022b6:	431c      	orrs	r4, r3
 80022b8:	0324      	lsls	r4, r4, #12
 80022ba:	4690      	mov	r8, r2
 80022bc:	4b04      	ldr	r3, [pc, #16]	@ (80022d0 <__aeabi_ddiv+0x620>)
 80022be:	0b24      	lsrs	r4, r4, #12
 80022c0:	e556      	b.n	8001d70 <__aeabi_ddiv+0xc0>
 80022c2:	4599      	cmp	r9, r3
 80022c4:	d3e8      	bcc.n	8002298 <__aeabi_ddiv+0x5e8>
 80022c6:	000a      	movs	r2, r1
 80022c8:	e7bd      	b.n	8002246 <__aeabi_ddiv+0x596>
 80022ca:	2300      	movs	r3, #0
 80022cc:	e708      	b.n	80020e0 <__aeabi_ddiv+0x430>
 80022ce:	46c0      	nop			@ (mov r8, r8)
 80022d0:	000007ff 	.word	0x000007ff
 80022d4:	0000043e 	.word	0x0000043e
 80022d8:	0000041e 	.word	0x0000041e
 80022dc:	000003ff 	.word	0x000003ff
 80022e0:	fffffc02 	.word	0xfffffc02

080022e4 <__eqdf2>:
 80022e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022e6:	4657      	mov	r7, sl
 80022e8:	46de      	mov	lr, fp
 80022ea:	464e      	mov	r6, r9
 80022ec:	4645      	mov	r5, r8
 80022ee:	b5e0      	push	{r5, r6, r7, lr}
 80022f0:	000d      	movs	r5, r1
 80022f2:	0004      	movs	r4, r0
 80022f4:	0fe8      	lsrs	r0, r5, #31
 80022f6:	4683      	mov	fp, r0
 80022f8:	0309      	lsls	r1, r1, #12
 80022fa:	0fd8      	lsrs	r0, r3, #31
 80022fc:	0b09      	lsrs	r1, r1, #12
 80022fe:	4682      	mov	sl, r0
 8002300:	4819      	ldr	r0, [pc, #100]	@ (8002368 <__eqdf2+0x84>)
 8002302:	468c      	mov	ip, r1
 8002304:	031f      	lsls	r7, r3, #12
 8002306:	0069      	lsls	r1, r5, #1
 8002308:	005e      	lsls	r6, r3, #1
 800230a:	0d49      	lsrs	r1, r1, #21
 800230c:	0b3f      	lsrs	r7, r7, #12
 800230e:	0d76      	lsrs	r6, r6, #21
 8002310:	4281      	cmp	r1, r0
 8002312:	d018      	beq.n	8002346 <__eqdf2+0x62>
 8002314:	4286      	cmp	r6, r0
 8002316:	d00f      	beq.n	8002338 <__eqdf2+0x54>
 8002318:	2001      	movs	r0, #1
 800231a:	42b1      	cmp	r1, r6
 800231c:	d10d      	bne.n	800233a <__eqdf2+0x56>
 800231e:	45bc      	cmp	ip, r7
 8002320:	d10b      	bne.n	800233a <__eqdf2+0x56>
 8002322:	4294      	cmp	r4, r2
 8002324:	d109      	bne.n	800233a <__eqdf2+0x56>
 8002326:	45d3      	cmp	fp, sl
 8002328:	d01c      	beq.n	8002364 <__eqdf2+0x80>
 800232a:	2900      	cmp	r1, #0
 800232c:	d105      	bne.n	800233a <__eqdf2+0x56>
 800232e:	4660      	mov	r0, ip
 8002330:	4320      	orrs	r0, r4
 8002332:	1e43      	subs	r3, r0, #1
 8002334:	4198      	sbcs	r0, r3
 8002336:	e000      	b.n	800233a <__eqdf2+0x56>
 8002338:	2001      	movs	r0, #1
 800233a:	bcf0      	pop	{r4, r5, r6, r7}
 800233c:	46bb      	mov	fp, r7
 800233e:	46b2      	mov	sl, r6
 8002340:	46a9      	mov	r9, r5
 8002342:	46a0      	mov	r8, r4
 8002344:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002346:	2001      	movs	r0, #1
 8002348:	428e      	cmp	r6, r1
 800234a:	d1f6      	bne.n	800233a <__eqdf2+0x56>
 800234c:	4661      	mov	r1, ip
 800234e:	4339      	orrs	r1, r7
 8002350:	000f      	movs	r7, r1
 8002352:	4317      	orrs	r7, r2
 8002354:	4327      	orrs	r7, r4
 8002356:	d1f0      	bne.n	800233a <__eqdf2+0x56>
 8002358:	465b      	mov	r3, fp
 800235a:	4652      	mov	r2, sl
 800235c:	1a98      	subs	r0, r3, r2
 800235e:	1e43      	subs	r3, r0, #1
 8002360:	4198      	sbcs	r0, r3
 8002362:	e7ea      	b.n	800233a <__eqdf2+0x56>
 8002364:	2000      	movs	r0, #0
 8002366:	e7e8      	b.n	800233a <__eqdf2+0x56>
 8002368:	000007ff 	.word	0x000007ff

0800236c <__gedf2>:
 800236c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800236e:	4657      	mov	r7, sl
 8002370:	464e      	mov	r6, r9
 8002372:	4645      	mov	r5, r8
 8002374:	46de      	mov	lr, fp
 8002376:	b5e0      	push	{r5, r6, r7, lr}
 8002378:	000d      	movs	r5, r1
 800237a:	030f      	lsls	r7, r1, #12
 800237c:	0b39      	lsrs	r1, r7, #12
 800237e:	b083      	sub	sp, #12
 8002380:	0004      	movs	r4, r0
 8002382:	4680      	mov	r8, r0
 8002384:	9101      	str	r1, [sp, #4]
 8002386:	0058      	lsls	r0, r3, #1
 8002388:	0fe9      	lsrs	r1, r5, #31
 800238a:	4f31      	ldr	r7, [pc, #196]	@ (8002450 <__gedf2+0xe4>)
 800238c:	0d40      	lsrs	r0, r0, #21
 800238e:	468c      	mov	ip, r1
 8002390:	006e      	lsls	r6, r5, #1
 8002392:	0319      	lsls	r1, r3, #12
 8002394:	4682      	mov	sl, r0
 8002396:	4691      	mov	r9, r2
 8002398:	0d76      	lsrs	r6, r6, #21
 800239a:	0b09      	lsrs	r1, r1, #12
 800239c:	0fd8      	lsrs	r0, r3, #31
 800239e:	42be      	cmp	r6, r7
 80023a0:	d01f      	beq.n	80023e2 <__gedf2+0x76>
 80023a2:	45ba      	cmp	sl, r7
 80023a4:	d00f      	beq.n	80023c6 <__gedf2+0x5a>
 80023a6:	2e00      	cmp	r6, #0
 80023a8:	d12f      	bne.n	800240a <__gedf2+0x9e>
 80023aa:	4655      	mov	r5, sl
 80023ac:	9e01      	ldr	r6, [sp, #4]
 80023ae:	4334      	orrs	r4, r6
 80023b0:	2d00      	cmp	r5, #0
 80023b2:	d127      	bne.n	8002404 <__gedf2+0x98>
 80023b4:	430a      	orrs	r2, r1
 80023b6:	d03a      	beq.n	800242e <__gedf2+0xc2>
 80023b8:	2c00      	cmp	r4, #0
 80023ba:	d145      	bne.n	8002448 <__gedf2+0xdc>
 80023bc:	2800      	cmp	r0, #0
 80023be:	d11a      	bne.n	80023f6 <__gedf2+0x8a>
 80023c0:	2001      	movs	r0, #1
 80023c2:	4240      	negs	r0, r0
 80023c4:	e017      	b.n	80023f6 <__gedf2+0x8a>
 80023c6:	4311      	orrs	r1, r2
 80023c8:	d13b      	bne.n	8002442 <__gedf2+0xd6>
 80023ca:	2e00      	cmp	r6, #0
 80023cc:	d102      	bne.n	80023d4 <__gedf2+0x68>
 80023ce:	9f01      	ldr	r7, [sp, #4]
 80023d0:	4327      	orrs	r7, r4
 80023d2:	d0f3      	beq.n	80023bc <__gedf2+0x50>
 80023d4:	4584      	cmp	ip, r0
 80023d6:	d109      	bne.n	80023ec <__gedf2+0x80>
 80023d8:	4663      	mov	r3, ip
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d0f0      	beq.n	80023c0 <__gedf2+0x54>
 80023de:	4660      	mov	r0, ip
 80023e0:	e009      	b.n	80023f6 <__gedf2+0x8a>
 80023e2:	9f01      	ldr	r7, [sp, #4]
 80023e4:	4327      	orrs	r7, r4
 80023e6:	d12c      	bne.n	8002442 <__gedf2+0xd6>
 80023e8:	45b2      	cmp	sl, r6
 80023ea:	d024      	beq.n	8002436 <__gedf2+0xca>
 80023ec:	4663      	mov	r3, ip
 80023ee:	2002      	movs	r0, #2
 80023f0:	3b01      	subs	r3, #1
 80023f2:	4018      	ands	r0, r3
 80023f4:	3801      	subs	r0, #1
 80023f6:	b003      	add	sp, #12
 80023f8:	bcf0      	pop	{r4, r5, r6, r7}
 80023fa:	46bb      	mov	fp, r7
 80023fc:	46b2      	mov	sl, r6
 80023fe:	46a9      	mov	r9, r5
 8002400:	46a0      	mov	r8, r4
 8002402:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002404:	2c00      	cmp	r4, #0
 8002406:	d0d9      	beq.n	80023bc <__gedf2+0x50>
 8002408:	e7e4      	b.n	80023d4 <__gedf2+0x68>
 800240a:	4654      	mov	r4, sl
 800240c:	2c00      	cmp	r4, #0
 800240e:	d0ed      	beq.n	80023ec <__gedf2+0x80>
 8002410:	4584      	cmp	ip, r0
 8002412:	d1eb      	bne.n	80023ec <__gedf2+0x80>
 8002414:	4556      	cmp	r6, sl
 8002416:	dce9      	bgt.n	80023ec <__gedf2+0x80>
 8002418:	dbde      	blt.n	80023d8 <__gedf2+0x6c>
 800241a:	9b01      	ldr	r3, [sp, #4]
 800241c:	428b      	cmp	r3, r1
 800241e:	d8e5      	bhi.n	80023ec <__gedf2+0x80>
 8002420:	d1da      	bne.n	80023d8 <__gedf2+0x6c>
 8002422:	45c8      	cmp	r8, r9
 8002424:	d8e2      	bhi.n	80023ec <__gedf2+0x80>
 8002426:	2000      	movs	r0, #0
 8002428:	45c8      	cmp	r8, r9
 800242a:	d2e4      	bcs.n	80023f6 <__gedf2+0x8a>
 800242c:	e7d4      	b.n	80023d8 <__gedf2+0x6c>
 800242e:	2000      	movs	r0, #0
 8002430:	2c00      	cmp	r4, #0
 8002432:	d0e0      	beq.n	80023f6 <__gedf2+0x8a>
 8002434:	e7da      	b.n	80023ec <__gedf2+0x80>
 8002436:	4311      	orrs	r1, r2
 8002438:	d103      	bne.n	8002442 <__gedf2+0xd6>
 800243a:	4584      	cmp	ip, r0
 800243c:	d1d6      	bne.n	80023ec <__gedf2+0x80>
 800243e:	2000      	movs	r0, #0
 8002440:	e7d9      	b.n	80023f6 <__gedf2+0x8a>
 8002442:	2002      	movs	r0, #2
 8002444:	4240      	negs	r0, r0
 8002446:	e7d6      	b.n	80023f6 <__gedf2+0x8a>
 8002448:	4584      	cmp	ip, r0
 800244a:	d0e6      	beq.n	800241a <__gedf2+0xae>
 800244c:	e7ce      	b.n	80023ec <__gedf2+0x80>
 800244e:	46c0      	nop			@ (mov r8, r8)
 8002450:	000007ff 	.word	0x000007ff

08002454 <__ledf2>:
 8002454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002456:	4657      	mov	r7, sl
 8002458:	464e      	mov	r6, r9
 800245a:	4645      	mov	r5, r8
 800245c:	46de      	mov	lr, fp
 800245e:	b5e0      	push	{r5, r6, r7, lr}
 8002460:	000d      	movs	r5, r1
 8002462:	030f      	lsls	r7, r1, #12
 8002464:	0004      	movs	r4, r0
 8002466:	4680      	mov	r8, r0
 8002468:	0fe8      	lsrs	r0, r5, #31
 800246a:	0b39      	lsrs	r1, r7, #12
 800246c:	4684      	mov	ip, r0
 800246e:	b083      	sub	sp, #12
 8002470:	0058      	lsls	r0, r3, #1
 8002472:	4f30      	ldr	r7, [pc, #192]	@ (8002534 <__ledf2+0xe0>)
 8002474:	0d40      	lsrs	r0, r0, #21
 8002476:	9101      	str	r1, [sp, #4]
 8002478:	031e      	lsls	r6, r3, #12
 800247a:	0069      	lsls	r1, r5, #1
 800247c:	4682      	mov	sl, r0
 800247e:	4691      	mov	r9, r2
 8002480:	0d49      	lsrs	r1, r1, #21
 8002482:	0b36      	lsrs	r6, r6, #12
 8002484:	0fd8      	lsrs	r0, r3, #31
 8002486:	42b9      	cmp	r1, r7
 8002488:	d020      	beq.n	80024cc <__ledf2+0x78>
 800248a:	45ba      	cmp	sl, r7
 800248c:	d00f      	beq.n	80024ae <__ledf2+0x5a>
 800248e:	2900      	cmp	r1, #0
 8002490:	d12b      	bne.n	80024ea <__ledf2+0x96>
 8002492:	9901      	ldr	r1, [sp, #4]
 8002494:	430c      	orrs	r4, r1
 8002496:	4651      	mov	r1, sl
 8002498:	2900      	cmp	r1, #0
 800249a:	d137      	bne.n	800250c <__ledf2+0xb8>
 800249c:	4332      	orrs	r2, r6
 800249e:	d038      	beq.n	8002512 <__ledf2+0xbe>
 80024a0:	2c00      	cmp	r4, #0
 80024a2:	d144      	bne.n	800252e <__ledf2+0xda>
 80024a4:	2800      	cmp	r0, #0
 80024a6:	d119      	bne.n	80024dc <__ledf2+0x88>
 80024a8:	2001      	movs	r0, #1
 80024aa:	4240      	negs	r0, r0
 80024ac:	e016      	b.n	80024dc <__ledf2+0x88>
 80024ae:	4316      	orrs	r6, r2
 80024b0:	d113      	bne.n	80024da <__ledf2+0x86>
 80024b2:	2900      	cmp	r1, #0
 80024b4:	d102      	bne.n	80024bc <__ledf2+0x68>
 80024b6:	9f01      	ldr	r7, [sp, #4]
 80024b8:	4327      	orrs	r7, r4
 80024ba:	d0f3      	beq.n	80024a4 <__ledf2+0x50>
 80024bc:	4584      	cmp	ip, r0
 80024be:	d020      	beq.n	8002502 <__ledf2+0xae>
 80024c0:	4663      	mov	r3, ip
 80024c2:	2002      	movs	r0, #2
 80024c4:	3b01      	subs	r3, #1
 80024c6:	4018      	ands	r0, r3
 80024c8:	3801      	subs	r0, #1
 80024ca:	e007      	b.n	80024dc <__ledf2+0x88>
 80024cc:	9f01      	ldr	r7, [sp, #4]
 80024ce:	4327      	orrs	r7, r4
 80024d0:	d103      	bne.n	80024da <__ledf2+0x86>
 80024d2:	458a      	cmp	sl, r1
 80024d4:	d1f4      	bne.n	80024c0 <__ledf2+0x6c>
 80024d6:	4316      	orrs	r6, r2
 80024d8:	d01f      	beq.n	800251a <__ledf2+0xc6>
 80024da:	2002      	movs	r0, #2
 80024dc:	b003      	add	sp, #12
 80024de:	bcf0      	pop	{r4, r5, r6, r7}
 80024e0:	46bb      	mov	fp, r7
 80024e2:	46b2      	mov	sl, r6
 80024e4:	46a9      	mov	r9, r5
 80024e6:	46a0      	mov	r8, r4
 80024e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024ea:	4654      	mov	r4, sl
 80024ec:	2c00      	cmp	r4, #0
 80024ee:	d0e7      	beq.n	80024c0 <__ledf2+0x6c>
 80024f0:	4584      	cmp	ip, r0
 80024f2:	d1e5      	bne.n	80024c0 <__ledf2+0x6c>
 80024f4:	4551      	cmp	r1, sl
 80024f6:	dce3      	bgt.n	80024c0 <__ledf2+0x6c>
 80024f8:	db03      	blt.n	8002502 <__ledf2+0xae>
 80024fa:	9b01      	ldr	r3, [sp, #4]
 80024fc:	42b3      	cmp	r3, r6
 80024fe:	d8df      	bhi.n	80024c0 <__ledf2+0x6c>
 8002500:	d00f      	beq.n	8002522 <__ledf2+0xce>
 8002502:	4663      	mov	r3, ip
 8002504:	2b00      	cmp	r3, #0
 8002506:	d0cf      	beq.n	80024a8 <__ledf2+0x54>
 8002508:	4660      	mov	r0, ip
 800250a:	e7e7      	b.n	80024dc <__ledf2+0x88>
 800250c:	2c00      	cmp	r4, #0
 800250e:	d0c9      	beq.n	80024a4 <__ledf2+0x50>
 8002510:	e7d4      	b.n	80024bc <__ledf2+0x68>
 8002512:	2000      	movs	r0, #0
 8002514:	2c00      	cmp	r4, #0
 8002516:	d0e1      	beq.n	80024dc <__ledf2+0x88>
 8002518:	e7d2      	b.n	80024c0 <__ledf2+0x6c>
 800251a:	4584      	cmp	ip, r0
 800251c:	d1d0      	bne.n	80024c0 <__ledf2+0x6c>
 800251e:	2000      	movs	r0, #0
 8002520:	e7dc      	b.n	80024dc <__ledf2+0x88>
 8002522:	45c8      	cmp	r8, r9
 8002524:	d8cc      	bhi.n	80024c0 <__ledf2+0x6c>
 8002526:	2000      	movs	r0, #0
 8002528:	45c8      	cmp	r8, r9
 800252a:	d2d7      	bcs.n	80024dc <__ledf2+0x88>
 800252c:	e7e9      	b.n	8002502 <__ledf2+0xae>
 800252e:	4584      	cmp	ip, r0
 8002530:	d0e3      	beq.n	80024fa <__ledf2+0xa6>
 8002532:	e7c5      	b.n	80024c0 <__ledf2+0x6c>
 8002534:	000007ff 	.word	0x000007ff

08002538 <__aeabi_dmul>:
 8002538:	b5f0      	push	{r4, r5, r6, r7, lr}
 800253a:	4657      	mov	r7, sl
 800253c:	46de      	mov	lr, fp
 800253e:	464e      	mov	r6, r9
 8002540:	4645      	mov	r5, r8
 8002542:	b5e0      	push	{r5, r6, r7, lr}
 8002544:	001f      	movs	r7, r3
 8002546:	030b      	lsls	r3, r1, #12
 8002548:	0b1b      	lsrs	r3, r3, #12
 800254a:	0016      	movs	r6, r2
 800254c:	469a      	mov	sl, r3
 800254e:	0fca      	lsrs	r2, r1, #31
 8002550:	004b      	lsls	r3, r1, #1
 8002552:	0004      	movs	r4, r0
 8002554:	4693      	mov	fp, r2
 8002556:	b087      	sub	sp, #28
 8002558:	0d5b      	lsrs	r3, r3, #21
 800255a:	d100      	bne.n	800255e <__aeabi_dmul+0x26>
 800255c:	e0d5      	b.n	800270a <__aeabi_dmul+0x1d2>
 800255e:	4abb      	ldr	r2, [pc, #748]	@ (800284c <__aeabi_dmul+0x314>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d100      	bne.n	8002566 <__aeabi_dmul+0x2e>
 8002564:	e0f8      	b.n	8002758 <__aeabi_dmul+0x220>
 8002566:	4651      	mov	r1, sl
 8002568:	0f42      	lsrs	r2, r0, #29
 800256a:	00c9      	lsls	r1, r1, #3
 800256c:	430a      	orrs	r2, r1
 800256e:	2180      	movs	r1, #128	@ 0x80
 8002570:	0409      	lsls	r1, r1, #16
 8002572:	4311      	orrs	r1, r2
 8002574:	00c2      	lsls	r2, r0, #3
 8002576:	4691      	mov	r9, r2
 8002578:	4ab5      	ldr	r2, [pc, #724]	@ (8002850 <__aeabi_dmul+0x318>)
 800257a:	468a      	mov	sl, r1
 800257c:	189d      	adds	r5, r3, r2
 800257e:	2300      	movs	r3, #0
 8002580:	4698      	mov	r8, r3
 8002582:	9302      	str	r3, [sp, #8]
 8002584:	033c      	lsls	r4, r7, #12
 8002586:	007b      	lsls	r3, r7, #1
 8002588:	0ffa      	lsrs	r2, r7, #31
 800258a:	0030      	movs	r0, r6
 800258c:	0b24      	lsrs	r4, r4, #12
 800258e:	0d5b      	lsrs	r3, r3, #21
 8002590:	9200      	str	r2, [sp, #0]
 8002592:	d100      	bne.n	8002596 <__aeabi_dmul+0x5e>
 8002594:	e096      	b.n	80026c4 <__aeabi_dmul+0x18c>
 8002596:	4aad      	ldr	r2, [pc, #692]	@ (800284c <__aeabi_dmul+0x314>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d031      	beq.n	8002600 <__aeabi_dmul+0xc8>
 800259c:	0f72      	lsrs	r2, r6, #29
 800259e:	00e4      	lsls	r4, r4, #3
 80025a0:	4322      	orrs	r2, r4
 80025a2:	2480      	movs	r4, #128	@ 0x80
 80025a4:	0424      	lsls	r4, r4, #16
 80025a6:	4314      	orrs	r4, r2
 80025a8:	4aa9      	ldr	r2, [pc, #676]	@ (8002850 <__aeabi_dmul+0x318>)
 80025aa:	00f0      	lsls	r0, r6, #3
 80025ac:	4694      	mov	ip, r2
 80025ae:	4463      	add	r3, ip
 80025b0:	195b      	adds	r3, r3, r5
 80025b2:	1c5a      	adds	r2, r3, #1
 80025b4:	9201      	str	r2, [sp, #4]
 80025b6:	4642      	mov	r2, r8
 80025b8:	2600      	movs	r6, #0
 80025ba:	2a0a      	cmp	r2, #10
 80025bc:	dc42      	bgt.n	8002644 <__aeabi_dmul+0x10c>
 80025be:	465a      	mov	r2, fp
 80025c0:	9900      	ldr	r1, [sp, #0]
 80025c2:	404a      	eors	r2, r1
 80025c4:	4693      	mov	fp, r2
 80025c6:	4642      	mov	r2, r8
 80025c8:	2a02      	cmp	r2, #2
 80025ca:	dc32      	bgt.n	8002632 <__aeabi_dmul+0xfa>
 80025cc:	3a01      	subs	r2, #1
 80025ce:	2a01      	cmp	r2, #1
 80025d0:	d900      	bls.n	80025d4 <__aeabi_dmul+0x9c>
 80025d2:	e149      	b.n	8002868 <__aeabi_dmul+0x330>
 80025d4:	2e02      	cmp	r6, #2
 80025d6:	d100      	bne.n	80025da <__aeabi_dmul+0xa2>
 80025d8:	e0ca      	b.n	8002770 <__aeabi_dmul+0x238>
 80025da:	2e01      	cmp	r6, #1
 80025dc:	d13d      	bne.n	800265a <__aeabi_dmul+0x122>
 80025de:	2300      	movs	r3, #0
 80025e0:	2400      	movs	r4, #0
 80025e2:	2200      	movs	r2, #0
 80025e4:	0010      	movs	r0, r2
 80025e6:	465a      	mov	r2, fp
 80025e8:	051b      	lsls	r3, r3, #20
 80025ea:	4323      	orrs	r3, r4
 80025ec:	07d2      	lsls	r2, r2, #31
 80025ee:	4313      	orrs	r3, r2
 80025f0:	0019      	movs	r1, r3
 80025f2:	b007      	add	sp, #28
 80025f4:	bcf0      	pop	{r4, r5, r6, r7}
 80025f6:	46bb      	mov	fp, r7
 80025f8:	46b2      	mov	sl, r6
 80025fa:	46a9      	mov	r9, r5
 80025fc:	46a0      	mov	r8, r4
 80025fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002600:	4b92      	ldr	r3, [pc, #584]	@ (800284c <__aeabi_dmul+0x314>)
 8002602:	4326      	orrs	r6, r4
 8002604:	18eb      	adds	r3, r5, r3
 8002606:	2e00      	cmp	r6, #0
 8002608:	d100      	bne.n	800260c <__aeabi_dmul+0xd4>
 800260a:	e0bb      	b.n	8002784 <__aeabi_dmul+0x24c>
 800260c:	2203      	movs	r2, #3
 800260e:	4641      	mov	r1, r8
 8002610:	4311      	orrs	r1, r2
 8002612:	465a      	mov	r2, fp
 8002614:	4688      	mov	r8, r1
 8002616:	9900      	ldr	r1, [sp, #0]
 8002618:	404a      	eors	r2, r1
 800261a:	2180      	movs	r1, #128	@ 0x80
 800261c:	0109      	lsls	r1, r1, #4
 800261e:	468c      	mov	ip, r1
 8002620:	0029      	movs	r1, r5
 8002622:	4461      	add	r1, ip
 8002624:	9101      	str	r1, [sp, #4]
 8002626:	4641      	mov	r1, r8
 8002628:	290a      	cmp	r1, #10
 800262a:	dd00      	ble.n	800262e <__aeabi_dmul+0xf6>
 800262c:	e233      	b.n	8002a96 <__aeabi_dmul+0x55e>
 800262e:	4693      	mov	fp, r2
 8002630:	2603      	movs	r6, #3
 8002632:	4642      	mov	r2, r8
 8002634:	2701      	movs	r7, #1
 8002636:	4097      	lsls	r7, r2
 8002638:	21a6      	movs	r1, #166	@ 0xa6
 800263a:	003a      	movs	r2, r7
 800263c:	00c9      	lsls	r1, r1, #3
 800263e:	400a      	ands	r2, r1
 8002640:	420f      	tst	r7, r1
 8002642:	d031      	beq.n	80026a8 <__aeabi_dmul+0x170>
 8002644:	9e02      	ldr	r6, [sp, #8]
 8002646:	2e02      	cmp	r6, #2
 8002648:	d100      	bne.n	800264c <__aeabi_dmul+0x114>
 800264a:	e235      	b.n	8002ab8 <__aeabi_dmul+0x580>
 800264c:	2e03      	cmp	r6, #3
 800264e:	d100      	bne.n	8002652 <__aeabi_dmul+0x11a>
 8002650:	e1d2      	b.n	80029f8 <__aeabi_dmul+0x4c0>
 8002652:	4654      	mov	r4, sl
 8002654:	4648      	mov	r0, r9
 8002656:	2e01      	cmp	r6, #1
 8002658:	d0c1      	beq.n	80025de <__aeabi_dmul+0xa6>
 800265a:	9a01      	ldr	r2, [sp, #4]
 800265c:	4b7d      	ldr	r3, [pc, #500]	@ (8002854 <__aeabi_dmul+0x31c>)
 800265e:	4694      	mov	ip, r2
 8002660:	4463      	add	r3, ip
 8002662:	2b00      	cmp	r3, #0
 8002664:	dc00      	bgt.n	8002668 <__aeabi_dmul+0x130>
 8002666:	e0c0      	b.n	80027ea <__aeabi_dmul+0x2b2>
 8002668:	0742      	lsls	r2, r0, #29
 800266a:	d009      	beq.n	8002680 <__aeabi_dmul+0x148>
 800266c:	220f      	movs	r2, #15
 800266e:	4002      	ands	r2, r0
 8002670:	2a04      	cmp	r2, #4
 8002672:	d005      	beq.n	8002680 <__aeabi_dmul+0x148>
 8002674:	1d02      	adds	r2, r0, #4
 8002676:	4282      	cmp	r2, r0
 8002678:	4180      	sbcs	r0, r0
 800267a:	4240      	negs	r0, r0
 800267c:	1824      	adds	r4, r4, r0
 800267e:	0010      	movs	r0, r2
 8002680:	01e2      	lsls	r2, r4, #7
 8002682:	d506      	bpl.n	8002692 <__aeabi_dmul+0x15a>
 8002684:	4b74      	ldr	r3, [pc, #464]	@ (8002858 <__aeabi_dmul+0x320>)
 8002686:	9a01      	ldr	r2, [sp, #4]
 8002688:	401c      	ands	r4, r3
 800268a:	2380      	movs	r3, #128	@ 0x80
 800268c:	4694      	mov	ip, r2
 800268e:	00db      	lsls	r3, r3, #3
 8002690:	4463      	add	r3, ip
 8002692:	4a72      	ldr	r2, [pc, #456]	@ (800285c <__aeabi_dmul+0x324>)
 8002694:	4293      	cmp	r3, r2
 8002696:	dc6b      	bgt.n	8002770 <__aeabi_dmul+0x238>
 8002698:	0762      	lsls	r2, r4, #29
 800269a:	08c0      	lsrs	r0, r0, #3
 800269c:	0264      	lsls	r4, r4, #9
 800269e:	055b      	lsls	r3, r3, #21
 80026a0:	4302      	orrs	r2, r0
 80026a2:	0b24      	lsrs	r4, r4, #12
 80026a4:	0d5b      	lsrs	r3, r3, #21
 80026a6:	e79d      	b.n	80025e4 <__aeabi_dmul+0xac>
 80026a8:	2190      	movs	r1, #144	@ 0x90
 80026aa:	0089      	lsls	r1, r1, #2
 80026ac:	420f      	tst	r7, r1
 80026ae:	d163      	bne.n	8002778 <__aeabi_dmul+0x240>
 80026b0:	2288      	movs	r2, #136	@ 0x88
 80026b2:	423a      	tst	r2, r7
 80026b4:	d100      	bne.n	80026b8 <__aeabi_dmul+0x180>
 80026b6:	e0d7      	b.n	8002868 <__aeabi_dmul+0x330>
 80026b8:	9b00      	ldr	r3, [sp, #0]
 80026ba:	46a2      	mov	sl, r4
 80026bc:	469b      	mov	fp, r3
 80026be:	4681      	mov	r9, r0
 80026c0:	9602      	str	r6, [sp, #8]
 80026c2:	e7bf      	b.n	8002644 <__aeabi_dmul+0x10c>
 80026c4:	0023      	movs	r3, r4
 80026c6:	4333      	orrs	r3, r6
 80026c8:	d100      	bne.n	80026cc <__aeabi_dmul+0x194>
 80026ca:	e07f      	b.n	80027cc <__aeabi_dmul+0x294>
 80026cc:	2c00      	cmp	r4, #0
 80026ce:	d100      	bne.n	80026d2 <__aeabi_dmul+0x19a>
 80026d0:	e1ad      	b.n	8002a2e <__aeabi_dmul+0x4f6>
 80026d2:	0020      	movs	r0, r4
 80026d4:	f000 ff10 	bl	80034f8 <__clzsi2>
 80026d8:	0002      	movs	r2, r0
 80026da:	0003      	movs	r3, r0
 80026dc:	3a0b      	subs	r2, #11
 80026de:	201d      	movs	r0, #29
 80026e0:	0019      	movs	r1, r3
 80026e2:	1a82      	subs	r2, r0, r2
 80026e4:	0030      	movs	r0, r6
 80026e6:	3908      	subs	r1, #8
 80026e8:	40d0      	lsrs	r0, r2
 80026ea:	408c      	lsls	r4, r1
 80026ec:	4304      	orrs	r4, r0
 80026ee:	0030      	movs	r0, r6
 80026f0:	4088      	lsls	r0, r1
 80026f2:	4a5b      	ldr	r2, [pc, #364]	@ (8002860 <__aeabi_dmul+0x328>)
 80026f4:	1aeb      	subs	r3, r5, r3
 80026f6:	4694      	mov	ip, r2
 80026f8:	4463      	add	r3, ip
 80026fa:	1c5a      	adds	r2, r3, #1
 80026fc:	9201      	str	r2, [sp, #4]
 80026fe:	4642      	mov	r2, r8
 8002700:	2600      	movs	r6, #0
 8002702:	2a0a      	cmp	r2, #10
 8002704:	dc00      	bgt.n	8002708 <__aeabi_dmul+0x1d0>
 8002706:	e75a      	b.n	80025be <__aeabi_dmul+0x86>
 8002708:	e79c      	b.n	8002644 <__aeabi_dmul+0x10c>
 800270a:	4653      	mov	r3, sl
 800270c:	4303      	orrs	r3, r0
 800270e:	4699      	mov	r9, r3
 8002710:	d054      	beq.n	80027bc <__aeabi_dmul+0x284>
 8002712:	4653      	mov	r3, sl
 8002714:	2b00      	cmp	r3, #0
 8002716:	d100      	bne.n	800271a <__aeabi_dmul+0x1e2>
 8002718:	e177      	b.n	8002a0a <__aeabi_dmul+0x4d2>
 800271a:	4650      	mov	r0, sl
 800271c:	f000 feec 	bl	80034f8 <__clzsi2>
 8002720:	230b      	movs	r3, #11
 8002722:	425b      	negs	r3, r3
 8002724:	469c      	mov	ip, r3
 8002726:	0002      	movs	r2, r0
 8002728:	4484      	add	ip, r0
 800272a:	0011      	movs	r1, r2
 800272c:	4650      	mov	r0, sl
 800272e:	3908      	subs	r1, #8
 8002730:	4088      	lsls	r0, r1
 8002732:	231d      	movs	r3, #29
 8002734:	4680      	mov	r8, r0
 8002736:	4660      	mov	r0, ip
 8002738:	1a1b      	subs	r3, r3, r0
 800273a:	0020      	movs	r0, r4
 800273c:	40d8      	lsrs	r0, r3
 800273e:	0003      	movs	r3, r0
 8002740:	4640      	mov	r0, r8
 8002742:	4303      	orrs	r3, r0
 8002744:	469a      	mov	sl, r3
 8002746:	0023      	movs	r3, r4
 8002748:	408b      	lsls	r3, r1
 800274a:	4699      	mov	r9, r3
 800274c:	2300      	movs	r3, #0
 800274e:	4d44      	ldr	r5, [pc, #272]	@ (8002860 <__aeabi_dmul+0x328>)
 8002750:	4698      	mov	r8, r3
 8002752:	1aad      	subs	r5, r5, r2
 8002754:	9302      	str	r3, [sp, #8]
 8002756:	e715      	b.n	8002584 <__aeabi_dmul+0x4c>
 8002758:	4652      	mov	r2, sl
 800275a:	4302      	orrs	r2, r0
 800275c:	4691      	mov	r9, r2
 800275e:	d126      	bne.n	80027ae <__aeabi_dmul+0x276>
 8002760:	2200      	movs	r2, #0
 8002762:	001d      	movs	r5, r3
 8002764:	2302      	movs	r3, #2
 8002766:	4692      	mov	sl, r2
 8002768:	3208      	adds	r2, #8
 800276a:	4690      	mov	r8, r2
 800276c:	9302      	str	r3, [sp, #8]
 800276e:	e709      	b.n	8002584 <__aeabi_dmul+0x4c>
 8002770:	2400      	movs	r4, #0
 8002772:	2200      	movs	r2, #0
 8002774:	4b35      	ldr	r3, [pc, #212]	@ (800284c <__aeabi_dmul+0x314>)
 8002776:	e735      	b.n	80025e4 <__aeabi_dmul+0xac>
 8002778:	2300      	movs	r3, #0
 800277a:	2480      	movs	r4, #128	@ 0x80
 800277c:	469b      	mov	fp, r3
 800277e:	0324      	lsls	r4, r4, #12
 8002780:	4b32      	ldr	r3, [pc, #200]	@ (800284c <__aeabi_dmul+0x314>)
 8002782:	e72f      	b.n	80025e4 <__aeabi_dmul+0xac>
 8002784:	2202      	movs	r2, #2
 8002786:	4641      	mov	r1, r8
 8002788:	4311      	orrs	r1, r2
 800278a:	2280      	movs	r2, #128	@ 0x80
 800278c:	0112      	lsls	r2, r2, #4
 800278e:	4694      	mov	ip, r2
 8002790:	002a      	movs	r2, r5
 8002792:	4462      	add	r2, ip
 8002794:	4688      	mov	r8, r1
 8002796:	9201      	str	r2, [sp, #4]
 8002798:	290a      	cmp	r1, #10
 800279a:	dd00      	ble.n	800279e <__aeabi_dmul+0x266>
 800279c:	e752      	b.n	8002644 <__aeabi_dmul+0x10c>
 800279e:	465a      	mov	r2, fp
 80027a0:	2000      	movs	r0, #0
 80027a2:	9900      	ldr	r1, [sp, #0]
 80027a4:	0004      	movs	r4, r0
 80027a6:	404a      	eors	r2, r1
 80027a8:	4693      	mov	fp, r2
 80027aa:	2602      	movs	r6, #2
 80027ac:	e70b      	b.n	80025c6 <__aeabi_dmul+0x8e>
 80027ae:	220c      	movs	r2, #12
 80027b0:	001d      	movs	r5, r3
 80027b2:	2303      	movs	r3, #3
 80027b4:	4681      	mov	r9, r0
 80027b6:	4690      	mov	r8, r2
 80027b8:	9302      	str	r3, [sp, #8]
 80027ba:	e6e3      	b.n	8002584 <__aeabi_dmul+0x4c>
 80027bc:	2300      	movs	r3, #0
 80027be:	469a      	mov	sl, r3
 80027c0:	3304      	adds	r3, #4
 80027c2:	4698      	mov	r8, r3
 80027c4:	3b03      	subs	r3, #3
 80027c6:	2500      	movs	r5, #0
 80027c8:	9302      	str	r3, [sp, #8]
 80027ca:	e6db      	b.n	8002584 <__aeabi_dmul+0x4c>
 80027cc:	4642      	mov	r2, r8
 80027ce:	3301      	adds	r3, #1
 80027d0:	431a      	orrs	r2, r3
 80027d2:	002b      	movs	r3, r5
 80027d4:	4690      	mov	r8, r2
 80027d6:	1c5a      	adds	r2, r3, #1
 80027d8:	9201      	str	r2, [sp, #4]
 80027da:	4642      	mov	r2, r8
 80027dc:	2400      	movs	r4, #0
 80027de:	2000      	movs	r0, #0
 80027e0:	2601      	movs	r6, #1
 80027e2:	2a0a      	cmp	r2, #10
 80027e4:	dc00      	bgt.n	80027e8 <__aeabi_dmul+0x2b0>
 80027e6:	e6ea      	b.n	80025be <__aeabi_dmul+0x86>
 80027e8:	e72c      	b.n	8002644 <__aeabi_dmul+0x10c>
 80027ea:	2201      	movs	r2, #1
 80027ec:	1ad2      	subs	r2, r2, r3
 80027ee:	2a38      	cmp	r2, #56	@ 0x38
 80027f0:	dd00      	ble.n	80027f4 <__aeabi_dmul+0x2bc>
 80027f2:	e6f4      	b.n	80025de <__aeabi_dmul+0xa6>
 80027f4:	2a1f      	cmp	r2, #31
 80027f6:	dc00      	bgt.n	80027fa <__aeabi_dmul+0x2c2>
 80027f8:	e12a      	b.n	8002a50 <__aeabi_dmul+0x518>
 80027fa:	211f      	movs	r1, #31
 80027fc:	4249      	negs	r1, r1
 80027fe:	1acb      	subs	r3, r1, r3
 8002800:	0021      	movs	r1, r4
 8002802:	40d9      	lsrs	r1, r3
 8002804:	000b      	movs	r3, r1
 8002806:	2a20      	cmp	r2, #32
 8002808:	d005      	beq.n	8002816 <__aeabi_dmul+0x2de>
 800280a:	4a16      	ldr	r2, [pc, #88]	@ (8002864 <__aeabi_dmul+0x32c>)
 800280c:	9d01      	ldr	r5, [sp, #4]
 800280e:	4694      	mov	ip, r2
 8002810:	4465      	add	r5, ip
 8002812:	40ac      	lsls	r4, r5
 8002814:	4320      	orrs	r0, r4
 8002816:	1e42      	subs	r2, r0, #1
 8002818:	4190      	sbcs	r0, r2
 800281a:	4318      	orrs	r0, r3
 800281c:	2307      	movs	r3, #7
 800281e:	0019      	movs	r1, r3
 8002820:	2400      	movs	r4, #0
 8002822:	4001      	ands	r1, r0
 8002824:	4203      	tst	r3, r0
 8002826:	d00c      	beq.n	8002842 <__aeabi_dmul+0x30a>
 8002828:	230f      	movs	r3, #15
 800282a:	4003      	ands	r3, r0
 800282c:	2b04      	cmp	r3, #4
 800282e:	d100      	bne.n	8002832 <__aeabi_dmul+0x2fa>
 8002830:	e140      	b.n	8002ab4 <__aeabi_dmul+0x57c>
 8002832:	1d03      	adds	r3, r0, #4
 8002834:	4283      	cmp	r3, r0
 8002836:	41a4      	sbcs	r4, r4
 8002838:	0018      	movs	r0, r3
 800283a:	4264      	negs	r4, r4
 800283c:	0761      	lsls	r1, r4, #29
 800283e:	0264      	lsls	r4, r4, #9
 8002840:	0b24      	lsrs	r4, r4, #12
 8002842:	08c2      	lsrs	r2, r0, #3
 8002844:	2300      	movs	r3, #0
 8002846:	430a      	orrs	r2, r1
 8002848:	e6cc      	b.n	80025e4 <__aeabi_dmul+0xac>
 800284a:	46c0      	nop			@ (mov r8, r8)
 800284c:	000007ff 	.word	0x000007ff
 8002850:	fffffc01 	.word	0xfffffc01
 8002854:	000003ff 	.word	0x000003ff
 8002858:	feffffff 	.word	0xfeffffff
 800285c:	000007fe 	.word	0x000007fe
 8002860:	fffffc0d 	.word	0xfffffc0d
 8002864:	0000043e 	.word	0x0000043e
 8002868:	4649      	mov	r1, r9
 800286a:	464a      	mov	r2, r9
 800286c:	0409      	lsls	r1, r1, #16
 800286e:	0c09      	lsrs	r1, r1, #16
 8002870:	000d      	movs	r5, r1
 8002872:	0c16      	lsrs	r6, r2, #16
 8002874:	0c02      	lsrs	r2, r0, #16
 8002876:	0400      	lsls	r0, r0, #16
 8002878:	0c00      	lsrs	r0, r0, #16
 800287a:	4345      	muls	r5, r0
 800287c:	46ac      	mov	ip, r5
 800287e:	0005      	movs	r5, r0
 8002880:	4375      	muls	r5, r6
 8002882:	46a8      	mov	r8, r5
 8002884:	0015      	movs	r5, r2
 8002886:	000f      	movs	r7, r1
 8002888:	4375      	muls	r5, r6
 800288a:	9200      	str	r2, [sp, #0]
 800288c:	9502      	str	r5, [sp, #8]
 800288e:	002a      	movs	r2, r5
 8002890:	9d00      	ldr	r5, [sp, #0]
 8002892:	436f      	muls	r7, r5
 8002894:	4665      	mov	r5, ip
 8002896:	0c2d      	lsrs	r5, r5, #16
 8002898:	46a9      	mov	r9, r5
 800289a:	4447      	add	r7, r8
 800289c:	444f      	add	r7, r9
 800289e:	45b8      	cmp	r8, r7
 80028a0:	d905      	bls.n	80028ae <__aeabi_dmul+0x376>
 80028a2:	0015      	movs	r5, r2
 80028a4:	2280      	movs	r2, #128	@ 0x80
 80028a6:	0252      	lsls	r2, r2, #9
 80028a8:	4690      	mov	r8, r2
 80028aa:	4445      	add	r5, r8
 80028ac:	9502      	str	r5, [sp, #8]
 80028ae:	0c3d      	lsrs	r5, r7, #16
 80028b0:	9503      	str	r5, [sp, #12]
 80028b2:	4665      	mov	r5, ip
 80028b4:	042d      	lsls	r5, r5, #16
 80028b6:	043f      	lsls	r7, r7, #16
 80028b8:	0c2d      	lsrs	r5, r5, #16
 80028ba:	46ac      	mov	ip, r5
 80028bc:	003d      	movs	r5, r7
 80028be:	4465      	add	r5, ip
 80028c0:	9504      	str	r5, [sp, #16]
 80028c2:	0c25      	lsrs	r5, r4, #16
 80028c4:	0424      	lsls	r4, r4, #16
 80028c6:	0c24      	lsrs	r4, r4, #16
 80028c8:	46ac      	mov	ip, r5
 80028ca:	0025      	movs	r5, r4
 80028cc:	4375      	muls	r5, r6
 80028ce:	46a8      	mov	r8, r5
 80028d0:	4665      	mov	r5, ip
 80028d2:	000f      	movs	r7, r1
 80028d4:	4369      	muls	r1, r5
 80028d6:	4441      	add	r1, r8
 80028d8:	4689      	mov	r9, r1
 80028da:	4367      	muls	r7, r4
 80028dc:	0c39      	lsrs	r1, r7, #16
 80028de:	4449      	add	r1, r9
 80028e0:	436e      	muls	r6, r5
 80028e2:	4588      	cmp	r8, r1
 80028e4:	d903      	bls.n	80028ee <__aeabi_dmul+0x3b6>
 80028e6:	2280      	movs	r2, #128	@ 0x80
 80028e8:	0252      	lsls	r2, r2, #9
 80028ea:	4690      	mov	r8, r2
 80028ec:	4446      	add	r6, r8
 80028ee:	0c0d      	lsrs	r5, r1, #16
 80028f0:	46a8      	mov	r8, r5
 80028f2:	0035      	movs	r5, r6
 80028f4:	4445      	add	r5, r8
 80028f6:	9505      	str	r5, [sp, #20]
 80028f8:	9d03      	ldr	r5, [sp, #12]
 80028fa:	043f      	lsls	r7, r7, #16
 80028fc:	46a8      	mov	r8, r5
 80028fe:	0c3f      	lsrs	r7, r7, #16
 8002900:	0409      	lsls	r1, r1, #16
 8002902:	19c9      	adds	r1, r1, r7
 8002904:	4488      	add	r8, r1
 8002906:	4645      	mov	r5, r8
 8002908:	9503      	str	r5, [sp, #12]
 800290a:	4655      	mov	r5, sl
 800290c:	042e      	lsls	r6, r5, #16
 800290e:	0c36      	lsrs	r6, r6, #16
 8002910:	0c2f      	lsrs	r7, r5, #16
 8002912:	0035      	movs	r5, r6
 8002914:	4345      	muls	r5, r0
 8002916:	4378      	muls	r0, r7
 8002918:	4681      	mov	r9, r0
 800291a:	0038      	movs	r0, r7
 800291c:	46a8      	mov	r8, r5
 800291e:	0c2d      	lsrs	r5, r5, #16
 8002920:	46aa      	mov	sl, r5
 8002922:	9a00      	ldr	r2, [sp, #0]
 8002924:	4350      	muls	r0, r2
 8002926:	4372      	muls	r2, r6
 8002928:	444a      	add	r2, r9
 800292a:	4452      	add	r2, sl
 800292c:	4591      	cmp	r9, r2
 800292e:	d903      	bls.n	8002938 <__aeabi_dmul+0x400>
 8002930:	2580      	movs	r5, #128	@ 0x80
 8002932:	026d      	lsls	r5, r5, #9
 8002934:	46a9      	mov	r9, r5
 8002936:	4448      	add	r0, r9
 8002938:	0c15      	lsrs	r5, r2, #16
 800293a:	46a9      	mov	r9, r5
 800293c:	4645      	mov	r5, r8
 800293e:	042d      	lsls	r5, r5, #16
 8002940:	0c2d      	lsrs	r5, r5, #16
 8002942:	46a8      	mov	r8, r5
 8002944:	4665      	mov	r5, ip
 8002946:	437d      	muls	r5, r7
 8002948:	0412      	lsls	r2, r2, #16
 800294a:	4448      	add	r0, r9
 800294c:	4490      	add	r8, r2
 800294e:	46a9      	mov	r9, r5
 8002950:	0032      	movs	r2, r6
 8002952:	4665      	mov	r5, ip
 8002954:	4362      	muls	r2, r4
 8002956:	436e      	muls	r6, r5
 8002958:	437c      	muls	r4, r7
 800295a:	0c17      	lsrs	r7, r2, #16
 800295c:	1936      	adds	r6, r6, r4
 800295e:	19bf      	adds	r7, r7, r6
 8002960:	42bc      	cmp	r4, r7
 8002962:	d903      	bls.n	800296c <__aeabi_dmul+0x434>
 8002964:	2480      	movs	r4, #128	@ 0x80
 8002966:	0264      	lsls	r4, r4, #9
 8002968:	46a4      	mov	ip, r4
 800296a:	44e1      	add	r9, ip
 800296c:	9c02      	ldr	r4, [sp, #8]
 800296e:	9e03      	ldr	r6, [sp, #12]
 8002970:	46a4      	mov	ip, r4
 8002972:	9d05      	ldr	r5, [sp, #20]
 8002974:	4466      	add	r6, ip
 8002976:	428e      	cmp	r6, r1
 8002978:	4189      	sbcs	r1, r1
 800297a:	46ac      	mov	ip, r5
 800297c:	0412      	lsls	r2, r2, #16
 800297e:	043c      	lsls	r4, r7, #16
 8002980:	0c12      	lsrs	r2, r2, #16
 8002982:	18a2      	adds	r2, r4, r2
 8002984:	4462      	add	r2, ip
 8002986:	4249      	negs	r1, r1
 8002988:	1854      	adds	r4, r2, r1
 800298a:	4446      	add	r6, r8
 800298c:	46a4      	mov	ip, r4
 800298e:	4546      	cmp	r6, r8
 8002990:	41a4      	sbcs	r4, r4
 8002992:	4682      	mov	sl, r0
 8002994:	4264      	negs	r4, r4
 8002996:	46a0      	mov	r8, r4
 8002998:	42aa      	cmp	r2, r5
 800299a:	4192      	sbcs	r2, r2
 800299c:	458c      	cmp	ip, r1
 800299e:	4189      	sbcs	r1, r1
 80029a0:	44e2      	add	sl, ip
 80029a2:	44d0      	add	r8, sl
 80029a4:	4249      	negs	r1, r1
 80029a6:	4252      	negs	r2, r2
 80029a8:	430a      	orrs	r2, r1
 80029aa:	45a0      	cmp	r8, r4
 80029ac:	41a4      	sbcs	r4, r4
 80029ae:	4582      	cmp	sl, r0
 80029b0:	4189      	sbcs	r1, r1
 80029b2:	4264      	negs	r4, r4
 80029b4:	4249      	negs	r1, r1
 80029b6:	430c      	orrs	r4, r1
 80029b8:	4641      	mov	r1, r8
 80029ba:	0c3f      	lsrs	r7, r7, #16
 80029bc:	19d2      	adds	r2, r2, r7
 80029be:	1912      	adds	r2, r2, r4
 80029c0:	0dcc      	lsrs	r4, r1, #23
 80029c2:	9904      	ldr	r1, [sp, #16]
 80029c4:	0270      	lsls	r0, r6, #9
 80029c6:	4308      	orrs	r0, r1
 80029c8:	1e41      	subs	r1, r0, #1
 80029ca:	4188      	sbcs	r0, r1
 80029cc:	4641      	mov	r1, r8
 80029ce:	444a      	add	r2, r9
 80029d0:	0df6      	lsrs	r6, r6, #23
 80029d2:	0252      	lsls	r2, r2, #9
 80029d4:	4330      	orrs	r0, r6
 80029d6:	0249      	lsls	r1, r1, #9
 80029d8:	4314      	orrs	r4, r2
 80029da:	4308      	orrs	r0, r1
 80029dc:	01d2      	lsls	r2, r2, #7
 80029de:	d535      	bpl.n	8002a4c <__aeabi_dmul+0x514>
 80029e0:	2201      	movs	r2, #1
 80029e2:	0843      	lsrs	r3, r0, #1
 80029e4:	4002      	ands	r2, r0
 80029e6:	4313      	orrs	r3, r2
 80029e8:	07e0      	lsls	r0, r4, #31
 80029ea:	4318      	orrs	r0, r3
 80029ec:	0864      	lsrs	r4, r4, #1
 80029ee:	e634      	b.n	800265a <__aeabi_dmul+0x122>
 80029f0:	9b00      	ldr	r3, [sp, #0]
 80029f2:	46a2      	mov	sl, r4
 80029f4:	469b      	mov	fp, r3
 80029f6:	4681      	mov	r9, r0
 80029f8:	2480      	movs	r4, #128	@ 0x80
 80029fa:	4653      	mov	r3, sl
 80029fc:	0324      	lsls	r4, r4, #12
 80029fe:	431c      	orrs	r4, r3
 8002a00:	0324      	lsls	r4, r4, #12
 8002a02:	464a      	mov	r2, r9
 8002a04:	4b2e      	ldr	r3, [pc, #184]	@ (8002ac0 <__aeabi_dmul+0x588>)
 8002a06:	0b24      	lsrs	r4, r4, #12
 8002a08:	e5ec      	b.n	80025e4 <__aeabi_dmul+0xac>
 8002a0a:	f000 fd75 	bl	80034f8 <__clzsi2>
 8002a0e:	2315      	movs	r3, #21
 8002a10:	469c      	mov	ip, r3
 8002a12:	4484      	add	ip, r0
 8002a14:	0002      	movs	r2, r0
 8002a16:	4663      	mov	r3, ip
 8002a18:	3220      	adds	r2, #32
 8002a1a:	2b1c      	cmp	r3, #28
 8002a1c:	dc00      	bgt.n	8002a20 <__aeabi_dmul+0x4e8>
 8002a1e:	e684      	b.n	800272a <__aeabi_dmul+0x1f2>
 8002a20:	2300      	movs	r3, #0
 8002a22:	4699      	mov	r9, r3
 8002a24:	0023      	movs	r3, r4
 8002a26:	3808      	subs	r0, #8
 8002a28:	4083      	lsls	r3, r0
 8002a2a:	469a      	mov	sl, r3
 8002a2c:	e68e      	b.n	800274c <__aeabi_dmul+0x214>
 8002a2e:	f000 fd63 	bl	80034f8 <__clzsi2>
 8002a32:	0002      	movs	r2, r0
 8002a34:	0003      	movs	r3, r0
 8002a36:	3215      	adds	r2, #21
 8002a38:	3320      	adds	r3, #32
 8002a3a:	2a1c      	cmp	r2, #28
 8002a3c:	dc00      	bgt.n	8002a40 <__aeabi_dmul+0x508>
 8002a3e:	e64e      	b.n	80026de <__aeabi_dmul+0x1a6>
 8002a40:	0002      	movs	r2, r0
 8002a42:	0034      	movs	r4, r6
 8002a44:	3a08      	subs	r2, #8
 8002a46:	2000      	movs	r0, #0
 8002a48:	4094      	lsls	r4, r2
 8002a4a:	e652      	b.n	80026f2 <__aeabi_dmul+0x1ba>
 8002a4c:	9301      	str	r3, [sp, #4]
 8002a4e:	e604      	b.n	800265a <__aeabi_dmul+0x122>
 8002a50:	4b1c      	ldr	r3, [pc, #112]	@ (8002ac4 <__aeabi_dmul+0x58c>)
 8002a52:	0021      	movs	r1, r4
 8002a54:	469c      	mov	ip, r3
 8002a56:	0003      	movs	r3, r0
 8002a58:	9d01      	ldr	r5, [sp, #4]
 8002a5a:	40d3      	lsrs	r3, r2
 8002a5c:	4465      	add	r5, ip
 8002a5e:	40a9      	lsls	r1, r5
 8002a60:	4319      	orrs	r1, r3
 8002a62:	0003      	movs	r3, r0
 8002a64:	40ab      	lsls	r3, r5
 8002a66:	1e58      	subs	r0, r3, #1
 8002a68:	4183      	sbcs	r3, r0
 8002a6a:	4319      	orrs	r1, r3
 8002a6c:	0008      	movs	r0, r1
 8002a6e:	40d4      	lsrs	r4, r2
 8002a70:	074b      	lsls	r3, r1, #29
 8002a72:	d009      	beq.n	8002a88 <__aeabi_dmul+0x550>
 8002a74:	230f      	movs	r3, #15
 8002a76:	400b      	ands	r3, r1
 8002a78:	2b04      	cmp	r3, #4
 8002a7a:	d005      	beq.n	8002a88 <__aeabi_dmul+0x550>
 8002a7c:	1d0b      	adds	r3, r1, #4
 8002a7e:	428b      	cmp	r3, r1
 8002a80:	4180      	sbcs	r0, r0
 8002a82:	4240      	negs	r0, r0
 8002a84:	1824      	adds	r4, r4, r0
 8002a86:	0018      	movs	r0, r3
 8002a88:	0223      	lsls	r3, r4, #8
 8002a8a:	d400      	bmi.n	8002a8e <__aeabi_dmul+0x556>
 8002a8c:	e6d6      	b.n	800283c <__aeabi_dmul+0x304>
 8002a8e:	2301      	movs	r3, #1
 8002a90:	2400      	movs	r4, #0
 8002a92:	2200      	movs	r2, #0
 8002a94:	e5a6      	b.n	80025e4 <__aeabi_dmul+0xac>
 8002a96:	290f      	cmp	r1, #15
 8002a98:	d1aa      	bne.n	80029f0 <__aeabi_dmul+0x4b8>
 8002a9a:	2380      	movs	r3, #128	@ 0x80
 8002a9c:	4652      	mov	r2, sl
 8002a9e:	031b      	lsls	r3, r3, #12
 8002aa0:	421a      	tst	r2, r3
 8002aa2:	d0a9      	beq.n	80029f8 <__aeabi_dmul+0x4c0>
 8002aa4:	421c      	tst	r4, r3
 8002aa6:	d1a7      	bne.n	80029f8 <__aeabi_dmul+0x4c0>
 8002aa8:	431c      	orrs	r4, r3
 8002aaa:	9b00      	ldr	r3, [sp, #0]
 8002aac:	0002      	movs	r2, r0
 8002aae:	469b      	mov	fp, r3
 8002ab0:	4b03      	ldr	r3, [pc, #12]	@ (8002ac0 <__aeabi_dmul+0x588>)
 8002ab2:	e597      	b.n	80025e4 <__aeabi_dmul+0xac>
 8002ab4:	2400      	movs	r4, #0
 8002ab6:	e6c1      	b.n	800283c <__aeabi_dmul+0x304>
 8002ab8:	2400      	movs	r4, #0
 8002aba:	4b01      	ldr	r3, [pc, #4]	@ (8002ac0 <__aeabi_dmul+0x588>)
 8002abc:	0022      	movs	r2, r4
 8002abe:	e591      	b.n	80025e4 <__aeabi_dmul+0xac>
 8002ac0:	000007ff 	.word	0x000007ff
 8002ac4:	0000041e 	.word	0x0000041e

08002ac8 <__aeabi_dsub>:
 8002ac8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002aca:	464e      	mov	r6, r9
 8002acc:	4645      	mov	r5, r8
 8002ace:	46de      	mov	lr, fp
 8002ad0:	4657      	mov	r7, sl
 8002ad2:	b5e0      	push	{r5, r6, r7, lr}
 8002ad4:	b085      	sub	sp, #20
 8002ad6:	9000      	str	r0, [sp, #0]
 8002ad8:	9101      	str	r1, [sp, #4]
 8002ada:	030c      	lsls	r4, r1, #12
 8002adc:	004f      	lsls	r7, r1, #1
 8002ade:	0fce      	lsrs	r6, r1, #31
 8002ae0:	0a61      	lsrs	r1, r4, #9
 8002ae2:	9c00      	ldr	r4, [sp, #0]
 8002ae4:	46b0      	mov	r8, r6
 8002ae6:	0f64      	lsrs	r4, r4, #29
 8002ae8:	430c      	orrs	r4, r1
 8002aea:	9900      	ldr	r1, [sp, #0]
 8002aec:	0d7f      	lsrs	r7, r7, #21
 8002aee:	00c8      	lsls	r0, r1, #3
 8002af0:	0011      	movs	r1, r2
 8002af2:	001a      	movs	r2, r3
 8002af4:	031b      	lsls	r3, r3, #12
 8002af6:	469c      	mov	ip, r3
 8002af8:	9100      	str	r1, [sp, #0]
 8002afa:	9201      	str	r2, [sp, #4]
 8002afc:	0051      	lsls	r1, r2, #1
 8002afe:	0d4b      	lsrs	r3, r1, #21
 8002b00:	4699      	mov	r9, r3
 8002b02:	9b01      	ldr	r3, [sp, #4]
 8002b04:	9d00      	ldr	r5, [sp, #0]
 8002b06:	0fd9      	lsrs	r1, r3, #31
 8002b08:	4663      	mov	r3, ip
 8002b0a:	0f6a      	lsrs	r2, r5, #29
 8002b0c:	0a5b      	lsrs	r3, r3, #9
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	00ea      	lsls	r2, r5, #3
 8002b12:	4694      	mov	ip, r2
 8002b14:	4693      	mov	fp, r2
 8002b16:	4ac1      	ldr	r2, [pc, #772]	@ (8002e1c <__aeabi_dsub+0x354>)
 8002b18:	9003      	str	r0, [sp, #12]
 8002b1a:	9302      	str	r3, [sp, #8]
 8002b1c:	4591      	cmp	r9, r2
 8002b1e:	d100      	bne.n	8002b22 <__aeabi_dsub+0x5a>
 8002b20:	e0cd      	b.n	8002cbe <__aeabi_dsub+0x1f6>
 8002b22:	2501      	movs	r5, #1
 8002b24:	4069      	eors	r1, r5
 8002b26:	464d      	mov	r5, r9
 8002b28:	1b7d      	subs	r5, r7, r5
 8002b2a:	46aa      	mov	sl, r5
 8002b2c:	428e      	cmp	r6, r1
 8002b2e:	d100      	bne.n	8002b32 <__aeabi_dsub+0x6a>
 8002b30:	e080      	b.n	8002c34 <__aeabi_dsub+0x16c>
 8002b32:	2d00      	cmp	r5, #0
 8002b34:	dc00      	bgt.n	8002b38 <__aeabi_dsub+0x70>
 8002b36:	e335      	b.n	80031a4 <__aeabi_dsub+0x6dc>
 8002b38:	4649      	mov	r1, r9
 8002b3a:	2900      	cmp	r1, #0
 8002b3c:	d100      	bne.n	8002b40 <__aeabi_dsub+0x78>
 8002b3e:	e0df      	b.n	8002d00 <__aeabi_dsub+0x238>
 8002b40:	4297      	cmp	r7, r2
 8002b42:	d100      	bne.n	8002b46 <__aeabi_dsub+0x7e>
 8002b44:	e194      	b.n	8002e70 <__aeabi_dsub+0x3a8>
 8002b46:	4652      	mov	r2, sl
 8002b48:	2501      	movs	r5, #1
 8002b4a:	2a38      	cmp	r2, #56	@ 0x38
 8002b4c:	dc19      	bgt.n	8002b82 <__aeabi_dsub+0xba>
 8002b4e:	2280      	movs	r2, #128	@ 0x80
 8002b50:	9b02      	ldr	r3, [sp, #8]
 8002b52:	0412      	lsls	r2, r2, #16
 8002b54:	4313      	orrs	r3, r2
 8002b56:	9302      	str	r3, [sp, #8]
 8002b58:	4652      	mov	r2, sl
 8002b5a:	2a1f      	cmp	r2, #31
 8002b5c:	dd00      	ble.n	8002b60 <__aeabi_dsub+0x98>
 8002b5e:	e1e3      	b.n	8002f28 <__aeabi_dsub+0x460>
 8002b60:	4653      	mov	r3, sl
 8002b62:	2220      	movs	r2, #32
 8002b64:	4661      	mov	r1, ip
 8002b66:	9d02      	ldr	r5, [sp, #8]
 8002b68:	1ad2      	subs	r2, r2, r3
 8002b6a:	4095      	lsls	r5, r2
 8002b6c:	40d9      	lsrs	r1, r3
 8002b6e:	430d      	orrs	r5, r1
 8002b70:	4661      	mov	r1, ip
 8002b72:	4091      	lsls	r1, r2
 8002b74:	000a      	movs	r2, r1
 8002b76:	1e51      	subs	r1, r2, #1
 8002b78:	418a      	sbcs	r2, r1
 8002b7a:	4315      	orrs	r5, r2
 8002b7c:	9a02      	ldr	r2, [sp, #8]
 8002b7e:	40da      	lsrs	r2, r3
 8002b80:	1aa4      	subs	r4, r4, r2
 8002b82:	1b45      	subs	r5, r0, r5
 8002b84:	42a8      	cmp	r0, r5
 8002b86:	4180      	sbcs	r0, r0
 8002b88:	4240      	negs	r0, r0
 8002b8a:	1a24      	subs	r4, r4, r0
 8002b8c:	0223      	lsls	r3, r4, #8
 8002b8e:	d400      	bmi.n	8002b92 <__aeabi_dsub+0xca>
 8002b90:	e13d      	b.n	8002e0e <__aeabi_dsub+0x346>
 8002b92:	0264      	lsls	r4, r4, #9
 8002b94:	0a64      	lsrs	r4, r4, #9
 8002b96:	2c00      	cmp	r4, #0
 8002b98:	d100      	bne.n	8002b9c <__aeabi_dsub+0xd4>
 8002b9a:	e147      	b.n	8002e2c <__aeabi_dsub+0x364>
 8002b9c:	0020      	movs	r0, r4
 8002b9e:	f000 fcab 	bl	80034f8 <__clzsi2>
 8002ba2:	0003      	movs	r3, r0
 8002ba4:	3b08      	subs	r3, #8
 8002ba6:	2120      	movs	r1, #32
 8002ba8:	0028      	movs	r0, r5
 8002baa:	1aca      	subs	r2, r1, r3
 8002bac:	40d0      	lsrs	r0, r2
 8002bae:	409c      	lsls	r4, r3
 8002bb0:	0002      	movs	r2, r0
 8002bb2:	409d      	lsls	r5, r3
 8002bb4:	4322      	orrs	r2, r4
 8002bb6:	429f      	cmp	r7, r3
 8002bb8:	dd00      	ble.n	8002bbc <__aeabi_dsub+0xf4>
 8002bba:	e177      	b.n	8002eac <__aeabi_dsub+0x3e4>
 8002bbc:	1bd8      	subs	r0, r3, r7
 8002bbe:	3001      	adds	r0, #1
 8002bc0:	1a09      	subs	r1, r1, r0
 8002bc2:	002c      	movs	r4, r5
 8002bc4:	408d      	lsls	r5, r1
 8002bc6:	40c4      	lsrs	r4, r0
 8002bc8:	1e6b      	subs	r3, r5, #1
 8002bca:	419d      	sbcs	r5, r3
 8002bcc:	0013      	movs	r3, r2
 8002bce:	40c2      	lsrs	r2, r0
 8002bd0:	408b      	lsls	r3, r1
 8002bd2:	4325      	orrs	r5, r4
 8002bd4:	2700      	movs	r7, #0
 8002bd6:	0014      	movs	r4, r2
 8002bd8:	431d      	orrs	r5, r3
 8002bda:	076b      	lsls	r3, r5, #29
 8002bdc:	d009      	beq.n	8002bf2 <__aeabi_dsub+0x12a>
 8002bde:	230f      	movs	r3, #15
 8002be0:	402b      	ands	r3, r5
 8002be2:	2b04      	cmp	r3, #4
 8002be4:	d005      	beq.n	8002bf2 <__aeabi_dsub+0x12a>
 8002be6:	1d2b      	adds	r3, r5, #4
 8002be8:	42ab      	cmp	r3, r5
 8002bea:	41ad      	sbcs	r5, r5
 8002bec:	426d      	negs	r5, r5
 8002bee:	1964      	adds	r4, r4, r5
 8002bf0:	001d      	movs	r5, r3
 8002bf2:	0223      	lsls	r3, r4, #8
 8002bf4:	d400      	bmi.n	8002bf8 <__aeabi_dsub+0x130>
 8002bf6:	e140      	b.n	8002e7a <__aeabi_dsub+0x3b2>
 8002bf8:	4a88      	ldr	r2, [pc, #544]	@ (8002e1c <__aeabi_dsub+0x354>)
 8002bfa:	3701      	adds	r7, #1
 8002bfc:	4297      	cmp	r7, r2
 8002bfe:	d100      	bne.n	8002c02 <__aeabi_dsub+0x13a>
 8002c00:	e101      	b.n	8002e06 <__aeabi_dsub+0x33e>
 8002c02:	2601      	movs	r6, #1
 8002c04:	4643      	mov	r3, r8
 8002c06:	4986      	ldr	r1, [pc, #536]	@ (8002e20 <__aeabi_dsub+0x358>)
 8002c08:	08ed      	lsrs	r5, r5, #3
 8002c0a:	4021      	ands	r1, r4
 8002c0c:	074a      	lsls	r2, r1, #29
 8002c0e:	432a      	orrs	r2, r5
 8002c10:	057c      	lsls	r4, r7, #21
 8002c12:	024d      	lsls	r5, r1, #9
 8002c14:	0b2d      	lsrs	r5, r5, #12
 8002c16:	0d64      	lsrs	r4, r4, #21
 8002c18:	401e      	ands	r6, r3
 8002c1a:	0524      	lsls	r4, r4, #20
 8002c1c:	432c      	orrs	r4, r5
 8002c1e:	07f6      	lsls	r6, r6, #31
 8002c20:	4334      	orrs	r4, r6
 8002c22:	0010      	movs	r0, r2
 8002c24:	0021      	movs	r1, r4
 8002c26:	b005      	add	sp, #20
 8002c28:	bcf0      	pop	{r4, r5, r6, r7}
 8002c2a:	46bb      	mov	fp, r7
 8002c2c:	46b2      	mov	sl, r6
 8002c2e:	46a9      	mov	r9, r5
 8002c30:	46a0      	mov	r8, r4
 8002c32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c34:	2d00      	cmp	r5, #0
 8002c36:	dc00      	bgt.n	8002c3a <__aeabi_dsub+0x172>
 8002c38:	e2d0      	b.n	80031dc <__aeabi_dsub+0x714>
 8002c3a:	4649      	mov	r1, r9
 8002c3c:	2900      	cmp	r1, #0
 8002c3e:	d000      	beq.n	8002c42 <__aeabi_dsub+0x17a>
 8002c40:	e0d4      	b.n	8002dec <__aeabi_dsub+0x324>
 8002c42:	4661      	mov	r1, ip
 8002c44:	9b02      	ldr	r3, [sp, #8]
 8002c46:	4319      	orrs	r1, r3
 8002c48:	d100      	bne.n	8002c4c <__aeabi_dsub+0x184>
 8002c4a:	e12b      	b.n	8002ea4 <__aeabi_dsub+0x3dc>
 8002c4c:	1e69      	subs	r1, r5, #1
 8002c4e:	2d01      	cmp	r5, #1
 8002c50:	d100      	bne.n	8002c54 <__aeabi_dsub+0x18c>
 8002c52:	e1d9      	b.n	8003008 <__aeabi_dsub+0x540>
 8002c54:	4295      	cmp	r5, r2
 8002c56:	d100      	bne.n	8002c5a <__aeabi_dsub+0x192>
 8002c58:	e10a      	b.n	8002e70 <__aeabi_dsub+0x3a8>
 8002c5a:	2501      	movs	r5, #1
 8002c5c:	2938      	cmp	r1, #56	@ 0x38
 8002c5e:	dc17      	bgt.n	8002c90 <__aeabi_dsub+0x1c8>
 8002c60:	468a      	mov	sl, r1
 8002c62:	4653      	mov	r3, sl
 8002c64:	2b1f      	cmp	r3, #31
 8002c66:	dd00      	ble.n	8002c6a <__aeabi_dsub+0x1a2>
 8002c68:	e1e7      	b.n	800303a <__aeabi_dsub+0x572>
 8002c6a:	2220      	movs	r2, #32
 8002c6c:	1ad2      	subs	r2, r2, r3
 8002c6e:	9b02      	ldr	r3, [sp, #8]
 8002c70:	4661      	mov	r1, ip
 8002c72:	4093      	lsls	r3, r2
 8002c74:	001d      	movs	r5, r3
 8002c76:	4653      	mov	r3, sl
 8002c78:	40d9      	lsrs	r1, r3
 8002c7a:	4663      	mov	r3, ip
 8002c7c:	4093      	lsls	r3, r2
 8002c7e:	001a      	movs	r2, r3
 8002c80:	430d      	orrs	r5, r1
 8002c82:	1e51      	subs	r1, r2, #1
 8002c84:	418a      	sbcs	r2, r1
 8002c86:	4653      	mov	r3, sl
 8002c88:	4315      	orrs	r5, r2
 8002c8a:	9a02      	ldr	r2, [sp, #8]
 8002c8c:	40da      	lsrs	r2, r3
 8002c8e:	18a4      	adds	r4, r4, r2
 8002c90:	182d      	adds	r5, r5, r0
 8002c92:	4285      	cmp	r5, r0
 8002c94:	4180      	sbcs	r0, r0
 8002c96:	4240      	negs	r0, r0
 8002c98:	1824      	adds	r4, r4, r0
 8002c9a:	0223      	lsls	r3, r4, #8
 8002c9c:	d400      	bmi.n	8002ca0 <__aeabi_dsub+0x1d8>
 8002c9e:	e0b6      	b.n	8002e0e <__aeabi_dsub+0x346>
 8002ca0:	4b5e      	ldr	r3, [pc, #376]	@ (8002e1c <__aeabi_dsub+0x354>)
 8002ca2:	3701      	adds	r7, #1
 8002ca4:	429f      	cmp	r7, r3
 8002ca6:	d100      	bne.n	8002caa <__aeabi_dsub+0x1e2>
 8002ca8:	e0ad      	b.n	8002e06 <__aeabi_dsub+0x33e>
 8002caa:	2101      	movs	r1, #1
 8002cac:	4b5c      	ldr	r3, [pc, #368]	@ (8002e20 <__aeabi_dsub+0x358>)
 8002cae:	086a      	lsrs	r2, r5, #1
 8002cb0:	401c      	ands	r4, r3
 8002cb2:	4029      	ands	r1, r5
 8002cb4:	430a      	orrs	r2, r1
 8002cb6:	07e5      	lsls	r5, r4, #31
 8002cb8:	4315      	orrs	r5, r2
 8002cba:	0864      	lsrs	r4, r4, #1
 8002cbc:	e78d      	b.n	8002bda <__aeabi_dsub+0x112>
 8002cbe:	4a59      	ldr	r2, [pc, #356]	@ (8002e24 <__aeabi_dsub+0x35c>)
 8002cc0:	9b02      	ldr	r3, [sp, #8]
 8002cc2:	4692      	mov	sl, r2
 8002cc4:	4662      	mov	r2, ip
 8002cc6:	44ba      	add	sl, r7
 8002cc8:	431a      	orrs	r2, r3
 8002cca:	d02c      	beq.n	8002d26 <__aeabi_dsub+0x25e>
 8002ccc:	428e      	cmp	r6, r1
 8002cce:	d02e      	beq.n	8002d2e <__aeabi_dsub+0x266>
 8002cd0:	4652      	mov	r2, sl
 8002cd2:	2a00      	cmp	r2, #0
 8002cd4:	d060      	beq.n	8002d98 <__aeabi_dsub+0x2d0>
 8002cd6:	2f00      	cmp	r7, #0
 8002cd8:	d100      	bne.n	8002cdc <__aeabi_dsub+0x214>
 8002cda:	e0db      	b.n	8002e94 <__aeabi_dsub+0x3cc>
 8002cdc:	4663      	mov	r3, ip
 8002cde:	000e      	movs	r6, r1
 8002ce0:	9c02      	ldr	r4, [sp, #8]
 8002ce2:	08d8      	lsrs	r0, r3, #3
 8002ce4:	0762      	lsls	r2, r4, #29
 8002ce6:	4302      	orrs	r2, r0
 8002ce8:	08e4      	lsrs	r4, r4, #3
 8002cea:	0013      	movs	r3, r2
 8002cec:	4323      	orrs	r3, r4
 8002cee:	d100      	bne.n	8002cf2 <__aeabi_dsub+0x22a>
 8002cf0:	e254      	b.n	800319c <__aeabi_dsub+0x6d4>
 8002cf2:	2580      	movs	r5, #128	@ 0x80
 8002cf4:	032d      	lsls	r5, r5, #12
 8002cf6:	4325      	orrs	r5, r4
 8002cf8:	032d      	lsls	r5, r5, #12
 8002cfa:	4c48      	ldr	r4, [pc, #288]	@ (8002e1c <__aeabi_dsub+0x354>)
 8002cfc:	0b2d      	lsrs	r5, r5, #12
 8002cfe:	e78c      	b.n	8002c1a <__aeabi_dsub+0x152>
 8002d00:	4661      	mov	r1, ip
 8002d02:	9b02      	ldr	r3, [sp, #8]
 8002d04:	4319      	orrs	r1, r3
 8002d06:	d100      	bne.n	8002d0a <__aeabi_dsub+0x242>
 8002d08:	e0cc      	b.n	8002ea4 <__aeabi_dsub+0x3dc>
 8002d0a:	0029      	movs	r1, r5
 8002d0c:	3901      	subs	r1, #1
 8002d0e:	2d01      	cmp	r5, #1
 8002d10:	d100      	bne.n	8002d14 <__aeabi_dsub+0x24c>
 8002d12:	e188      	b.n	8003026 <__aeabi_dsub+0x55e>
 8002d14:	4295      	cmp	r5, r2
 8002d16:	d100      	bne.n	8002d1a <__aeabi_dsub+0x252>
 8002d18:	e0aa      	b.n	8002e70 <__aeabi_dsub+0x3a8>
 8002d1a:	2501      	movs	r5, #1
 8002d1c:	2938      	cmp	r1, #56	@ 0x38
 8002d1e:	dd00      	ble.n	8002d22 <__aeabi_dsub+0x25a>
 8002d20:	e72f      	b.n	8002b82 <__aeabi_dsub+0xba>
 8002d22:	468a      	mov	sl, r1
 8002d24:	e718      	b.n	8002b58 <__aeabi_dsub+0x90>
 8002d26:	2201      	movs	r2, #1
 8002d28:	4051      	eors	r1, r2
 8002d2a:	428e      	cmp	r6, r1
 8002d2c:	d1d0      	bne.n	8002cd0 <__aeabi_dsub+0x208>
 8002d2e:	4653      	mov	r3, sl
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d100      	bne.n	8002d36 <__aeabi_dsub+0x26e>
 8002d34:	e0be      	b.n	8002eb4 <__aeabi_dsub+0x3ec>
 8002d36:	2f00      	cmp	r7, #0
 8002d38:	d000      	beq.n	8002d3c <__aeabi_dsub+0x274>
 8002d3a:	e138      	b.n	8002fae <__aeabi_dsub+0x4e6>
 8002d3c:	46ca      	mov	sl, r9
 8002d3e:	0022      	movs	r2, r4
 8002d40:	4302      	orrs	r2, r0
 8002d42:	d100      	bne.n	8002d46 <__aeabi_dsub+0x27e>
 8002d44:	e1e2      	b.n	800310c <__aeabi_dsub+0x644>
 8002d46:	4653      	mov	r3, sl
 8002d48:	1e59      	subs	r1, r3, #1
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d100      	bne.n	8002d50 <__aeabi_dsub+0x288>
 8002d4e:	e20d      	b.n	800316c <__aeabi_dsub+0x6a4>
 8002d50:	4a32      	ldr	r2, [pc, #200]	@ (8002e1c <__aeabi_dsub+0x354>)
 8002d52:	4592      	cmp	sl, r2
 8002d54:	d100      	bne.n	8002d58 <__aeabi_dsub+0x290>
 8002d56:	e1d2      	b.n	80030fe <__aeabi_dsub+0x636>
 8002d58:	2701      	movs	r7, #1
 8002d5a:	2938      	cmp	r1, #56	@ 0x38
 8002d5c:	dc13      	bgt.n	8002d86 <__aeabi_dsub+0x2be>
 8002d5e:	291f      	cmp	r1, #31
 8002d60:	dd00      	ble.n	8002d64 <__aeabi_dsub+0x29c>
 8002d62:	e1ee      	b.n	8003142 <__aeabi_dsub+0x67a>
 8002d64:	2220      	movs	r2, #32
 8002d66:	9b02      	ldr	r3, [sp, #8]
 8002d68:	1a52      	subs	r2, r2, r1
 8002d6a:	0025      	movs	r5, r4
 8002d6c:	0007      	movs	r7, r0
 8002d6e:	469a      	mov	sl, r3
 8002d70:	40cc      	lsrs	r4, r1
 8002d72:	4090      	lsls	r0, r2
 8002d74:	4095      	lsls	r5, r2
 8002d76:	40cf      	lsrs	r7, r1
 8002d78:	44a2      	add	sl, r4
 8002d7a:	1e42      	subs	r2, r0, #1
 8002d7c:	4190      	sbcs	r0, r2
 8002d7e:	4653      	mov	r3, sl
 8002d80:	432f      	orrs	r7, r5
 8002d82:	4307      	orrs	r7, r0
 8002d84:	9302      	str	r3, [sp, #8]
 8002d86:	003d      	movs	r5, r7
 8002d88:	4465      	add	r5, ip
 8002d8a:	4565      	cmp	r5, ip
 8002d8c:	4192      	sbcs	r2, r2
 8002d8e:	9b02      	ldr	r3, [sp, #8]
 8002d90:	4252      	negs	r2, r2
 8002d92:	464f      	mov	r7, r9
 8002d94:	18d4      	adds	r4, r2, r3
 8002d96:	e780      	b.n	8002c9a <__aeabi_dsub+0x1d2>
 8002d98:	4a23      	ldr	r2, [pc, #140]	@ (8002e28 <__aeabi_dsub+0x360>)
 8002d9a:	1c7d      	adds	r5, r7, #1
 8002d9c:	4215      	tst	r5, r2
 8002d9e:	d000      	beq.n	8002da2 <__aeabi_dsub+0x2da>
 8002da0:	e0aa      	b.n	8002ef8 <__aeabi_dsub+0x430>
 8002da2:	4662      	mov	r2, ip
 8002da4:	0025      	movs	r5, r4
 8002da6:	9b02      	ldr	r3, [sp, #8]
 8002da8:	4305      	orrs	r5, r0
 8002daa:	431a      	orrs	r2, r3
 8002dac:	2f00      	cmp	r7, #0
 8002dae:	d000      	beq.n	8002db2 <__aeabi_dsub+0x2ea>
 8002db0:	e0f5      	b.n	8002f9e <__aeabi_dsub+0x4d6>
 8002db2:	2d00      	cmp	r5, #0
 8002db4:	d100      	bne.n	8002db8 <__aeabi_dsub+0x2f0>
 8002db6:	e16b      	b.n	8003090 <__aeabi_dsub+0x5c8>
 8002db8:	2a00      	cmp	r2, #0
 8002dba:	d100      	bne.n	8002dbe <__aeabi_dsub+0x2f6>
 8002dbc:	e152      	b.n	8003064 <__aeabi_dsub+0x59c>
 8002dbe:	4663      	mov	r3, ip
 8002dc0:	1ac5      	subs	r5, r0, r3
 8002dc2:	9b02      	ldr	r3, [sp, #8]
 8002dc4:	1ae2      	subs	r2, r4, r3
 8002dc6:	42a8      	cmp	r0, r5
 8002dc8:	419b      	sbcs	r3, r3
 8002dca:	425b      	negs	r3, r3
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	021a      	lsls	r2, r3, #8
 8002dd0:	d400      	bmi.n	8002dd4 <__aeabi_dsub+0x30c>
 8002dd2:	e1d5      	b.n	8003180 <__aeabi_dsub+0x6b8>
 8002dd4:	4663      	mov	r3, ip
 8002dd6:	1a1d      	subs	r5, r3, r0
 8002dd8:	45ac      	cmp	ip, r5
 8002dda:	4192      	sbcs	r2, r2
 8002ddc:	2601      	movs	r6, #1
 8002dde:	9b02      	ldr	r3, [sp, #8]
 8002de0:	4252      	negs	r2, r2
 8002de2:	1b1c      	subs	r4, r3, r4
 8002de4:	4688      	mov	r8, r1
 8002de6:	1aa4      	subs	r4, r4, r2
 8002de8:	400e      	ands	r6, r1
 8002dea:	e6f6      	b.n	8002bda <__aeabi_dsub+0x112>
 8002dec:	4297      	cmp	r7, r2
 8002dee:	d03f      	beq.n	8002e70 <__aeabi_dsub+0x3a8>
 8002df0:	4652      	mov	r2, sl
 8002df2:	2501      	movs	r5, #1
 8002df4:	2a38      	cmp	r2, #56	@ 0x38
 8002df6:	dd00      	ble.n	8002dfa <__aeabi_dsub+0x332>
 8002df8:	e74a      	b.n	8002c90 <__aeabi_dsub+0x1c8>
 8002dfa:	2280      	movs	r2, #128	@ 0x80
 8002dfc:	9b02      	ldr	r3, [sp, #8]
 8002dfe:	0412      	lsls	r2, r2, #16
 8002e00:	4313      	orrs	r3, r2
 8002e02:	9302      	str	r3, [sp, #8]
 8002e04:	e72d      	b.n	8002c62 <__aeabi_dsub+0x19a>
 8002e06:	003c      	movs	r4, r7
 8002e08:	2500      	movs	r5, #0
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	e705      	b.n	8002c1a <__aeabi_dsub+0x152>
 8002e0e:	2307      	movs	r3, #7
 8002e10:	402b      	ands	r3, r5
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d000      	beq.n	8002e18 <__aeabi_dsub+0x350>
 8002e16:	e6e2      	b.n	8002bde <__aeabi_dsub+0x116>
 8002e18:	e06b      	b.n	8002ef2 <__aeabi_dsub+0x42a>
 8002e1a:	46c0      	nop			@ (mov r8, r8)
 8002e1c:	000007ff 	.word	0x000007ff
 8002e20:	ff7fffff 	.word	0xff7fffff
 8002e24:	fffff801 	.word	0xfffff801
 8002e28:	000007fe 	.word	0x000007fe
 8002e2c:	0028      	movs	r0, r5
 8002e2e:	f000 fb63 	bl	80034f8 <__clzsi2>
 8002e32:	0003      	movs	r3, r0
 8002e34:	3318      	adds	r3, #24
 8002e36:	2b1f      	cmp	r3, #31
 8002e38:	dc00      	bgt.n	8002e3c <__aeabi_dsub+0x374>
 8002e3a:	e6b4      	b.n	8002ba6 <__aeabi_dsub+0xde>
 8002e3c:	002a      	movs	r2, r5
 8002e3e:	3808      	subs	r0, #8
 8002e40:	4082      	lsls	r2, r0
 8002e42:	429f      	cmp	r7, r3
 8002e44:	dd00      	ble.n	8002e48 <__aeabi_dsub+0x380>
 8002e46:	e0b9      	b.n	8002fbc <__aeabi_dsub+0x4f4>
 8002e48:	1bdb      	subs	r3, r3, r7
 8002e4a:	1c58      	adds	r0, r3, #1
 8002e4c:	281f      	cmp	r0, #31
 8002e4e:	dc00      	bgt.n	8002e52 <__aeabi_dsub+0x38a>
 8002e50:	e1a0      	b.n	8003194 <__aeabi_dsub+0x6cc>
 8002e52:	0015      	movs	r5, r2
 8002e54:	3b1f      	subs	r3, #31
 8002e56:	40dd      	lsrs	r5, r3
 8002e58:	2820      	cmp	r0, #32
 8002e5a:	d005      	beq.n	8002e68 <__aeabi_dsub+0x3a0>
 8002e5c:	2340      	movs	r3, #64	@ 0x40
 8002e5e:	1a1b      	subs	r3, r3, r0
 8002e60:	409a      	lsls	r2, r3
 8002e62:	1e53      	subs	r3, r2, #1
 8002e64:	419a      	sbcs	r2, r3
 8002e66:	4315      	orrs	r5, r2
 8002e68:	2307      	movs	r3, #7
 8002e6a:	2700      	movs	r7, #0
 8002e6c:	402b      	ands	r3, r5
 8002e6e:	e7d0      	b.n	8002e12 <__aeabi_dsub+0x34a>
 8002e70:	08c0      	lsrs	r0, r0, #3
 8002e72:	0762      	lsls	r2, r4, #29
 8002e74:	4302      	orrs	r2, r0
 8002e76:	08e4      	lsrs	r4, r4, #3
 8002e78:	e737      	b.n	8002cea <__aeabi_dsub+0x222>
 8002e7a:	08ea      	lsrs	r2, r5, #3
 8002e7c:	0763      	lsls	r3, r4, #29
 8002e7e:	431a      	orrs	r2, r3
 8002e80:	4bd3      	ldr	r3, [pc, #844]	@ (80031d0 <__aeabi_dsub+0x708>)
 8002e82:	08e4      	lsrs	r4, r4, #3
 8002e84:	429f      	cmp	r7, r3
 8002e86:	d100      	bne.n	8002e8a <__aeabi_dsub+0x3c2>
 8002e88:	e72f      	b.n	8002cea <__aeabi_dsub+0x222>
 8002e8a:	0324      	lsls	r4, r4, #12
 8002e8c:	0b25      	lsrs	r5, r4, #12
 8002e8e:	057c      	lsls	r4, r7, #21
 8002e90:	0d64      	lsrs	r4, r4, #21
 8002e92:	e6c2      	b.n	8002c1a <__aeabi_dsub+0x152>
 8002e94:	46ca      	mov	sl, r9
 8002e96:	0022      	movs	r2, r4
 8002e98:	4302      	orrs	r2, r0
 8002e9a:	d158      	bne.n	8002f4e <__aeabi_dsub+0x486>
 8002e9c:	4663      	mov	r3, ip
 8002e9e:	000e      	movs	r6, r1
 8002ea0:	9c02      	ldr	r4, [sp, #8]
 8002ea2:	9303      	str	r3, [sp, #12]
 8002ea4:	9b03      	ldr	r3, [sp, #12]
 8002ea6:	4657      	mov	r7, sl
 8002ea8:	08da      	lsrs	r2, r3, #3
 8002eaa:	e7e7      	b.n	8002e7c <__aeabi_dsub+0x3b4>
 8002eac:	4cc9      	ldr	r4, [pc, #804]	@ (80031d4 <__aeabi_dsub+0x70c>)
 8002eae:	1aff      	subs	r7, r7, r3
 8002eb0:	4014      	ands	r4, r2
 8002eb2:	e692      	b.n	8002bda <__aeabi_dsub+0x112>
 8002eb4:	4dc8      	ldr	r5, [pc, #800]	@ (80031d8 <__aeabi_dsub+0x710>)
 8002eb6:	1c7a      	adds	r2, r7, #1
 8002eb8:	422a      	tst	r2, r5
 8002eba:	d000      	beq.n	8002ebe <__aeabi_dsub+0x3f6>
 8002ebc:	e084      	b.n	8002fc8 <__aeabi_dsub+0x500>
 8002ebe:	0022      	movs	r2, r4
 8002ec0:	4302      	orrs	r2, r0
 8002ec2:	2f00      	cmp	r7, #0
 8002ec4:	d000      	beq.n	8002ec8 <__aeabi_dsub+0x400>
 8002ec6:	e0ef      	b.n	80030a8 <__aeabi_dsub+0x5e0>
 8002ec8:	2a00      	cmp	r2, #0
 8002eca:	d100      	bne.n	8002ece <__aeabi_dsub+0x406>
 8002ecc:	e0e5      	b.n	800309a <__aeabi_dsub+0x5d2>
 8002ece:	4662      	mov	r2, ip
 8002ed0:	9902      	ldr	r1, [sp, #8]
 8002ed2:	430a      	orrs	r2, r1
 8002ed4:	d100      	bne.n	8002ed8 <__aeabi_dsub+0x410>
 8002ed6:	e0c5      	b.n	8003064 <__aeabi_dsub+0x59c>
 8002ed8:	4663      	mov	r3, ip
 8002eda:	18c5      	adds	r5, r0, r3
 8002edc:	468c      	mov	ip, r1
 8002ede:	4285      	cmp	r5, r0
 8002ee0:	4180      	sbcs	r0, r0
 8002ee2:	4464      	add	r4, ip
 8002ee4:	4240      	negs	r0, r0
 8002ee6:	1824      	adds	r4, r4, r0
 8002ee8:	0223      	lsls	r3, r4, #8
 8002eea:	d502      	bpl.n	8002ef2 <__aeabi_dsub+0x42a>
 8002eec:	4bb9      	ldr	r3, [pc, #740]	@ (80031d4 <__aeabi_dsub+0x70c>)
 8002eee:	3701      	adds	r7, #1
 8002ef0:	401c      	ands	r4, r3
 8002ef2:	46ba      	mov	sl, r7
 8002ef4:	9503      	str	r5, [sp, #12]
 8002ef6:	e7d5      	b.n	8002ea4 <__aeabi_dsub+0x3dc>
 8002ef8:	4662      	mov	r2, ip
 8002efa:	1a85      	subs	r5, r0, r2
 8002efc:	42a8      	cmp	r0, r5
 8002efe:	4192      	sbcs	r2, r2
 8002f00:	4252      	negs	r2, r2
 8002f02:	4691      	mov	r9, r2
 8002f04:	9b02      	ldr	r3, [sp, #8]
 8002f06:	1ae3      	subs	r3, r4, r3
 8002f08:	001a      	movs	r2, r3
 8002f0a:	464b      	mov	r3, r9
 8002f0c:	1ad2      	subs	r2, r2, r3
 8002f0e:	0013      	movs	r3, r2
 8002f10:	4691      	mov	r9, r2
 8002f12:	021a      	lsls	r2, r3, #8
 8002f14:	d46c      	bmi.n	8002ff0 <__aeabi_dsub+0x528>
 8002f16:	464a      	mov	r2, r9
 8002f18:	464c      	mov	r4, r9
 8002f1a:	432a      	orrs	r2, r5
 8002f1c:	d000      	beq.n	8002f20 <__aeabi_dsub+0x458>
 8002f1e:	e63a      	b.n	8002b96 <__aeabi_dsub+0xce>
 8002f20:	2600      	movs	r6, #0
 8002f22:	2400      	movs	r4, #0
 8002f24:	2500      	movs	r5, #0
 8002f26:	e678      	b.n	8002c1a <__aeabi_dsub+0x152>
 8002f28:	9902      	ldr	r1, [sp, #8]
 8002f2a:	4653      	mov	r3, sl
 8002f2c:	000d      	movs	r5, r1
 8002f2e:	3a20      	subs	r2, #32
 8002f30:	40d5      	lsrs	r5, r2
 8002f32:	2b20      	cmp	r3, #32
 8002f34:	d006      	beq.n	8002f44 <__aeabi_dsub+0x47c>
 8002f36:	2240      	movs	r2, #64	@ 0x40
 8002f38:	1ad2      	subs	r2, r2, r3
 8002f3a:	000b      	movs	r3, r1
 8002f3c:	4093      	lsls	r3, r2
 8002f3e:	4662      	mov	r2, ip
 8002f40:	431a      	orrs	r2, r3
 8002f42:	4693      	mov	fp, r2
 8002f44:	465b      	mov	r3, fp
 8002f46:	1e5a      	subs	r2, r3, #1
 8002f48:	4193      	sbcs	r3, r2
 8002f4a:	431d      	orrs	r5, r3
 8002f4c:	e619      	b.n	8002b82 <__aeabi_dsub+0xba>
 8002f4e:	4653      	mov	r3, sl
 8002f50:	1e5a      	subs	r2, r3, #1
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d100      	bne.n	8002f58 <__aeabi_dsub+0x490>
 8002f56:	e0c6      	b.n	80030e6 <__aeabi_dsub+0x61e>
 8002f58:	4e9d      	ldr	r6, [pc, #628]	@ (80031d0 <__aeabi_dsub+0x708>)
 8002f5a:	45b2      	cmp	sl, r6
 8002f5c:	d100      	bne.n	8002f60 <__aeabi_dsub+0x498>
 8002f5e:	e6bd      	b.n	8002cdc <__aeabi_dsub+0x214>
 8002f60:	4688      	mov	r8, r1
 8002f62:	000e      	movs	r6, r1
 8002f64:	2501      	movs	r5, #1
 8002f66:	2a38      	cmp	r2, #56	@ 0x38
 8002f68:	dc10      	bgt.n	8002f8c <__aeabi_dsub+0x4c4>
 8002f6a:	2a1f      	cmp	r2, #31
 8002f6c:	dc7f      	bgt.n	800306e <__aeabi_dsub+0x5a6>
 8002f6e:	2120      	movs	r1, #32
 8002f70:	0025      	movs	r5, r4
 8002f72:	1a89      	subs	r1, r1, r2
 8002f74:	0007      	movs	r7, r0
 8002f76:	4088      	lsls	r0, r1
 8002f78:	408d      	lsls	r5, r1
 8002f7a:	40d7      	lsrs	r7, r2
 8002f7c:	40d4      	lsrs	r4, r2
 8002f7e:	1e41      	subs	r1, r0, #1
 8002f80:	4188      	sbcs	r0, r1
 8002f82:	9b02      	ldr	r3, [sp, #8]
 8002f84:	433d      	orrs	r5, r7
 8002f86:	1b1b      	subs	r3, r3, r4
 8002f88:	4305      	orrs	r5, r0
 8002f8a:	9302      	str	r3, [sp, #8]
 8002f8c:	4662      	mov	r2, ip
 8002f8e:	1b55      	subs	r5, r2, r5
 8002f90:	45ac      	cmp	ip, r5
 8002f92:	4192      	sbcs	r2, r2
 8002f94:	9b02      	ldr	r3, [sp, #8]
 8002f96:	4252      	negs	r2, r2
 8002f98:	464f      	mov	r7, r9
 8002f9a:	1a9c      	subs	r4, r3, r2
 8002f9c:	e5f6      	b.n	8002b8c <__aeabi_dsub+0xc4>
 8002f9e:	2d00      	cmp	r5, #0
 8002fa0:	d000      	beq.n	8002fa4 <__aeabi_dsub+0x4dc>
 8002fa2:	e0b7      	b.n	8003114 <__aeabi_dsub+0x64c>
 8002fa4:	2a00      	cmp	r2, #0
 8002fa6:	d100      	bne.n	8002faa <__aeabi_dsub+0x4e2>
 8002fa8:	e0f0      	b.n	800318c <__aeabi_dsub+0x6c4>
 8002faa:	2601      	movs	r6, #1
 8002fac:	400e      	ands	r6, r1
 8002fae:	4663      	mov	r3, ip
 8002fb0:	9802      	ldr	r0, [sp, #8]
 8002fb2:	08d9      	lsrs	r1, r3, #3
 8002fb4:	0742      	lsls	r2, r0, #29
 8002fb6:	430a      	orrs	r2, r1
 8002fb8:	08c4      	lsrs	r4, r0, #3
 8002fba:	e696      	b.n	8002cea <__aeabi_dsub+0x222>
 8002fbc:	4c85      	ldr	r4, [pc, #532]	@ (80031d4 <__aeabi_dsub+0x70c>)
 8002fbe:	1aff      	subs	r7, r7, r3
 8002fc0:	4014      	ands	r4, r2
 8002fc2:	0762      	lsls	r2, r4, #29
 8002fc4:	08e4      	lsrs	r4, r4, #3
 8002fc6:	e760      	b.n	8002e8a <__aeabi_dsub+0x3c2>
 8002fc8:	4981      	ldr	r1, [pc, #516]	@ (80031d0 <__aeabi_dsub+0x708>)
 8002fca:	428a      	cmp	r2, r1
 8002fcc:	d100      	bne.n	8002fd0 <__aeabi_dsub+0x508>
 8002fce:	e0c9      	b.n	8003164 <__aeabi_dsub+0x69c>
 8002fd0:	4663      	mov	r3, ip
 8002fd2:	18c1      	adds	r1, r0, r3
 8002fd4:	4281      	cmp	r1, r0
 8002fd6:	4180      	sbcs	r0, r0
 8002fd8:	9b02      	ldr	r3, [sp, #8]
 8002fda:	4240      	negs	r0, r0
 8002fdc:	18e3      	adds	r3, r4, r3
 8002fde:	181b      	adds	r3, r3, r0
 8002fe0:	07dd      	lsls	r5, r3, #31
 8002fe2:	085c      	lsrs	r4, r3, #1
 8002fe4:	2307      	movs	r3, #7
 8002fe6:	0849      	lsrs	r1, r1, #1
 8002fe8:	430d      	orrs	r5, r1
 8002fea:	0017      	movs	r7, r2
 8002fec:	402b      	ands	r3, r5
 8002fee:	e710      	b.n	8002e12 <__aeabi_dsub+0x34a>
 8002ff0:	4663      	mov	r3, ip
 8002ff2:	1a1d      	subs	r5, r3, r0
 8002ff4:	45ac      	cmp	ip, r5
 8002ff6:	4192      	sbcs	r2, r2
 8002ff8:	2601      	movs	r6, #1
 8002ffa:	9b02      	ldr	r3, [sp, #8]
 8002ffc:	4252      	negs	r2, r2
 8002ffe:	1b1c      	subs	r4, r3, r4
 8003000:	4688      	mov	r8, r1
 8003002:	1aa4      	subs	r4, r4, r2
 8003004:	400e      	ands	r6, r1
 8003006:	e5c6      	b.n	8002b96 <__aeabi_dsub+0xce>
 8003008:	4663      	mov	r3, ip
 800300a:	18c5      	adds	r5, r0, r3
 800300c:	9b02      	ldr	r3, [sp, #8]
 800300e:	4285      	cmp	r5, r0
 8003010:	4180      	sbcs	r0, r0
 8003012:	469c      	mov	ip, r3
 8003014:	4240      	negs	r0, r0
 8003016:	4464      	add	r4, ip
 8003018:	1824      	adds	r4, r4, r0
 800301a:	2701      	movs	r7, #1
 800301c:	0223      	lsls	r3, r4, #8
 800301e:	d400      	bmi.n	8003022 <__aeabi_dsub+0x55a>
 8003020:	e6f5      	b.n	8002e0e <__aeabi_dsub+0x346>
 8003022:	2702      	movs	r7, #2
 8003024:	e641      	b.n	8002caa <__aeabi_dsub+0x1e2>
 8003026:	4663      	mov	r3, ip
 8003028:	1ac5      	subs	r5, r0, r3
 800302a:	42a8      	cmp	r0, r5
 800302c:	4180      	sbcs	r0, r0
 800302e:	9b02      	ldr	r3, [sp, #8]
 8003030:	4240      	negs	r0, r0
 8003032:	1ae4      	subs	r4, r4, r3
 8003034:	2701      	movs	r7, #1
 8003036:	1a24      	subs	r4, r4, r0
 8003038:	e5a8      	b.n	8002b8c <__aeabi_dsub+0xc4>
 800303a:	9d02      	ldr	r5, [sp, #8]
 800303c:	4652      	mov	r2, sl
 800303e:	002b      	movs	r3, r5
 8003040:	3a20      	subs	r2, #32
 8003042:	40d3      	lsrs	r3, r2
 8003044:	0019      	movs	r1, r3
 8003046:	4653      	mov	r3, sl
 8003048:	2b20      	cmp	r3, #32
 800304a:	d006      	beq.n	800305a <__aeabi_dsub+0x592>
 800304c:	2240      	movs	r2, #64	@ 0x40
 800304e:	1ad2      	subs	r2, r2, r3
 8003050:	002b      	movs	r3, r5
 8003052:	4093      	lsls	r3, r2
 8003054:	4662      	mov	r2, ip
 8003056:	431a      	orrs	r2, r3
 8003058:	4693      	mov	fp, r2
 800305a:	465d      	mov	r5, fp
 800305c:	1e6b      	subs	r3, r5, #1
 800305e:	419d      	sbcs	r5, r3
 8003060:	430d      	orrs	r5, r1
 8003062:	e615      	b.n	8002c90 <__aeabi_dsub+0x1c8>
 8003064:	0762      	lsls	r2, r4, #29
 8003066:	08c0      	lsrs	r0, r0, #3
 8003068:	4302      	orrs	r2, r0
 800306a:	08e4      	lsrs	r4, r4, #3
 800306c:	e70d      	b.n	8002e8a <__aeabi_dsub+0x3c2>
 800306e:	0011      	movs	r1, r2
 8003070:	0027      	movs	r7, r4
 8003072:	3920      	subs	r1, #32
 8003074:	40cf      	lsrs	r7, r1
 8003076:	2a20      	cmp	r2, #32
 8003078:	d005      	beq.n	8003086 <__aeabi_dsub+0x5be>
 800307a:	2140      	movs	r1, #64	@ 0x40
 800307c:	1a8a      	subs	r2, r1, r2
 800307e:	4094      	lsls	r4, r2
 8003080:	0025      	movs	r5, r4
 8003082:	4305      	orrs	r5, r0
 8003084:	9503      	str	r5, [sp, #12]
 8003086:	9d03      	ldr	r5, [sp, #12]
 8003088:	1e6a      	subs	r2, r5, #1
 800308a:	4195      	sbcs	r5, r2
 800308c:	433d      	orrs	r5, r7
 800308e:	e77d      	b.n	8002f8c <__aeabi_dsub+0x4c4>
 8003090:	2a00      	cmp	r2, #0
 8003092:	d100      	bne.n	8003096 <__aeabi_dsub+0x5ce>
 8003094:	e744      	b.n	8002f20 <__aeabi_dsub+0x458>
 8003096:	2601      	movs	r6, #1
 8003098:	400e      	ands	r6, r1
 800309a:	4663      	mov	r3, ip
 800309c:	08d9      	lsrs	r1, r3, #3
 800309e:	9b02      	ldr	r3, [sp, #8]
 80030a0:	075a      	lsls	r2, r3, #29
 80030a2:	430a      	orrs	r2, r1
 80030a4:	08dc      	lsrs	r4, r3, #3
 80030a6:	e6f0      	b.n	8002e8a <__aeabi_dsub+0x3c2>
 80030a8:	2a00      	cmp	r2, #0
 80030aa:	d028      	beq.n	80030fe <__aeabi_dsub+0x636>
 80030ac:	4662      	mov	r2, ip
 80030ae:	9f02      	ldr	r7, [sp, #8]
 80030b0:	08c0      	lsrs	r0, r0, #3
 80030b2:	433a      	orrs	r2, r7
 80030b4:	d100      	bne.n	80030b8 <__aeabi_dsub+0x5f0>
 80030b6:	e6dc      	b.n	8002e72 <__aeabi_dsub+0x3aa>
 80030b8:	0762      	lsls	r2, r4, #29
 80030ba:	4310      	orrs	r0, r2
 80030bc:	2280      	movs	r2, #128	@ 0x80
 80030be:	08e4      	lsrs	r4, r4, #3
 80030c0:	0312      	lsls	r2, r2, #12
 80030c2:	4214      	tst	r4, r2
 80030c4:	d009      	beq.n	80030da <__aeabi_dsub+0x612>
 80030c6:	08fd      	lsrs	r5, r7, #3
 80030c8:	4215      	tst	r5, r2
 80030ca:	d106      	bne.n	80030da <__aeabi_dsub+0x612>
 80030cc:	4663      	mov	r3, ip
 80030ce:	2601      	movs	r6, #1
 80030d0:	002c      	movs	r4, r5
 80030d2:	08d8      	lsrs	r0, r3, #3
 80030d4:	077b      	lsls	r3, r7, #29
 80030d6:	4318      	orrs	r0, r3
 80030d8:	400e      	ands	r6, r1
 80030da:	0f42      	lsrs	r2, r0, #29
 80030dc:	00c0      	lsls	r0, r0, #3
 80030de:	08c0      	lsrs	r0, r0, #3
 80030e0:	0752      	lsls	r2, r2, #29
 80030e2:	4302      	orrs	r2, r0
 80030e4:	e601      	b.n	8002cea <__aeabi_dsub+0x222>
 80030e6:	4663      	mov	r3, ip
 80030e8:	1a1d      	subs	r5, r3, r0
 80030ea:	45ac      	cmp	ip, r5
 80030ec:	4192      	sbcs	r2, r2
 80030ee:	9b02      	ldr	r3, [sp, #8]
 80030f0:	4252      	negs	r2, r2
 80030f2:	1b1c      	subs	r4, r3, r4
 80030f4:	000e      	movs	r6, r1
 80030f6:	4688      	mov	r8, r1
 80030f8:	2701      	movs	r7, #1
 80030fa:	1aa4      	subs	r4, r4, r2
 80030fc:	e546      	b.n	8002b8c <__aeabi_dsub+0xc4>
 80030fe:	4663      	mov	r3, ip
 8003100:	08d9      	lsrs	r1, r3, #3
 8003102:	9b02      	ldr	r3, [sp, #8]
 8003104:	075a      	lsls	r2, r3, #29
 8003106:	430a      	orrs	r2, r1
 8003108:	08dc      	lsrs	r4, r3, #3
 800310a:	e5ee      	b.n	8002cea <__aeabi_dsub+0x222>
 800310c:	4663      	mov	r3, ip
 800310e:	9c02      	ldr	r4, [sp, #8]
 8003110:	9303      	str	r3, [sp, #12]
 8003112:	e6c7      	b.n	8002ea4 <__aeabi_dsub+0x3dc>
 8003114:	08c0      	lsrs	r0, r0, #3
 8003116:	2a00      	cmp	r2, #0
 8003118:	d100      	bne.n	800311c <__aeabi_dsub+0x654>
 800311a:	e6aa      	b.n	8002e72 <__aeabi_dsub+0x3aa>
 800311c:	0762      	lsls	r2, r4, #29
 800311e:	4310      	orrs	r0, r2
 8003120:	2280      	movs	r2, #128	@ 0x80
 8003122:	08e4      	lsrs	r4, r4, #3
 8003124:	0312      	lsls	r2, r2, #12
 8003126:	4214      	tst	r4, r2
 8003128:	d0d7      	beq.n	80030da <__aeabi_dsub+0x612>
 800312a:	9f02      	ldr	r7, [sp, #8]
 800312c:	08fd      	lsrs	r5, r7, #3
 800312e:	4215      	tst	r5, r2
 8003130:	d1d3      	bne.n	80030da <__aeabi_dsub+0x612>
 8003132:	4663      	mov	r3, ip
 8003134:	2601      	movs	r6, #1
 8003136:	08d8      	lsrs	r0, r3, #3
 8003138:	077b      	lsls	r3, r7, #29
 800313a:	002c      	movs	r4, r5
 800313c:	4318      	orrs	r0, r3
 800313e:	400e      	ands	r6, r1
 8003140:	e7cb      	b.n	80030da <__aeabi_dsub+0x612>
 8003142:	000a      	movs	r2, r1
 8003144:	0027      	movs	r7, r4
 8003146:	3a20      	subs	r2, #32
 8003148:	40d7      	lsrs	r7, r2
 800314a:	2920      	cmp	r1, #32
 800314c:	d005      	beq.n	800315a <__aeabi_dsub+0x692>
 800314e:	2240      	movs	r2, #64	@ 0x40
 8003150:	1a52      	subs	r2, r2, r1
 8003152:	4094      	lsls	r4, r2
 8003154:	0025      	movs	r5, r4
 8003156:	4305      	orrs	r5, r0
 8003158:	9503      	str	r5, [sp, #12]
 800315a:	9d03      	ldr	r5, [sp, #12]
 800315c:	1e6a      	subs	r2, r5, #1
 800315e:	4195      	sbcs	r5, r2
 8003160:	432f      	orrs	r7, r5
 8003162:	e610      	b.n	8002d86 <__aeabi_dsub+0x2be>
 8003164:	0014      	movs	r4, r2
 8003166:	2500      	movs	r5, #0
 8003168:	2200      	movs	r2, #0
 800316a:	e556      	b.n	8002c1a <__aeabi_dsub+0x152>
 800316c:	9b02      	ldr	r3, [sp, #8]
 800316e:	4460      	add	r0, ip
 8003170:	4699      	mov	r9, r3
 8003172:	4560      	cmp	r0, ip
 8003174:	4192      	sbcs	r2, r2
 8003176:	444c      	add	r4, r9
 8003178:	4252      	negs	r2, r2
 800317a:	0005      	movs	r5, r0
 800317c:	18a4      	adds	r4, r4, r2
 800317e:	e74c      	b.n	800301a <__aeabi_dsub+0x552>
 8003180:	001a      	movs	r2, r3
 8003182:	001c      	movs	r4, r3
 8003184:	432a      	orrs	r2, r5
 8003186:	d000      	beq.n	800318a <__aeabi_dsub+0x6c2>
 8003188:	e6b3      	b.n	8002ef2 <__aeabi_dsub+0x42a>
 800318a:	e6c9      	b.n	8002f20 <__aeabi_dsub+0x458>
 800318c:	2480      	movs	r4, #128	@ 0x80
 800318e:	2600      	movs	r6, #0
 8003190:	0324      	lsls	r4, r4, #12
 8003192:	e5ae      	b.n	8002cf2 <__aeabi_dsub+0x22a>
 8003194:	2120      	movs	r1, #32
 8003196:	2500      	movs	r5, #0
 8003198:	1a09      	subs	r1, r1, r0
 800319a:	e517      	b.n	8002bcc <__aeabi_dsub+0x104>
 800319c:	2200      	movs	r2, #0
 800319e:	2500      	movs	r5, #0
 80031a0:	4c0b      	ldr	r4, [pc, #44]	@ (80031d0 <__aeabi_dsub+0x708>)
 80031a2:	e53a      	b.n	8002c1a <__aeabi_dsub+0x152>
 80031a4:	2d00      	cmp	r5, #0
 80031a6:	d100      	bne.n	80031aa <__aeabi_dsub+0x6e2>
 80031a8:	e5f6      	b.n	8002d98 <__aeabi_dsub+0x2d0>
 80031aa:	464b      	mov	r3, r9
 80031ac:	1bda      	subs	r2, r3, r7
 80031ae:	4692      	mov	sl, r2
 80031b0:	2f00      	cmp	r7, #0
 80031b2:	d100      	bne.n	80031b6 <__aeabi_dsub+0x6ee>
 80031b4:	e66f      	b.n	8002e96 <__aeabi_dsub+0x3ce>
 80031b6:	2a38      	cmp	r2, #56	@ 0x38
 80031b8:	dc05      	bgt.n	80031c6 <__aeabi_dsub+0x6fe>
 80031ba:	2680      	movs	r6, #128	@ 0x80
 80031bc:	0436      	lsls	r6, r6, #16
 80031be:	4334      	orrs	r4, r6
 80031c0:	4688      	mov	r8, r1
 80031c2:	000e      	movs	r6, r1
 80031c4:	e6d1      	b.n	8002f6a <__aeabi_dsub+0x4a2>
 80031c6:	4688      	mov	r8, r1
 80031c8:	000e      	movs	r6, r1
 80031ca:	2501      	movs	r5, #1
 80031cc:	e6de      	b.n	8002f8c <__aeabi_dsub+0x4c4>
 80031ce:	46c0      	nop			@ (mov r8, r8)
 80031d0:	000007ff 	.word	0x000007ff
 80031d4:	ff7fffff 	.word	0xff7fffff
 80031d8:	000007fe 	.word	0x000007fe
 80031dc:	2d00      	cmp	r5, #0
 80031de:	d100      	bne.n	80031e2 <__aeabi_dsub+0x71a>
 80031e0:	e668      	b.n	8002eb4 <__aeabi_dsub+0x3ec>
 80031e2:	464b      	mov	r3, r9
 80031e4:	1bd9      	subs	r1, r3, r7
 80031e6:	2f00      	cmp	r7, #0
 80031e8:	d101      	bne.n	80031ee <__aeabi_dsub+0x726>
 80031ea:	468a      	mov	sl, r1
 80031ec:	e5a7      	b.n	8002d3e <__aeabi_dsub+0x276>
 80031ee:	2701      	movs	r7, #1
 80031f0:	2938      	cmp	r1, #56	@ 0x38
 80031f2:	dd00      	ble.n	80031f6 <__aeabi_dsub+0x72e>
 80031f4:	e5c7      	b.n	8002d86 <__aeabi_dsub+0x2be>
 80031f6:	2280      	movs	r2, #128	@ 0x80
 80031f8:	0412      	lsls	r2, r2, #16
 80031fa:	4314      	orrs	r4, r2
 80031fc:	e5af      	b.n	8002d5e <__aeabi_dsub+0x296>
 80031fe:	46c0      	nop			@ (mov r8, r8)

08003200 <__aeabi_dcmpun>:
 8003200:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003202:	46c6      	mov	lr, r8
 8003204:	031e      	lsls	r6, r3, #12
 8003206:	0b36      	lsrs	r6, r6, #12
 8003208:	46b0      	mov	r8, r6
 800320a:	4e0d      	ldr	r6, [pc, #52]	@ (8003240 <__aeabi_dcmpun+0x40>)
 800320c:	030c      	lsls	r4, r1, #12
 800320e:	004d      	lsls	r5, r1, #1
 8003210:	005f      	lsls	r7, r3, #1
 8003212:	b500      	push	{lr}
 8003214:	0b24      	lsrs	r4, r4, #12
 8003216:	0d6d      	lsrs	r5, r5, #21
 8003218:	0d7f      	lsrs	r7, r7, #21
 800321a:	42b5      	cmp	r5, r6
 800321c:	d00b      	beq.n	8003236 <__aeabi_dcmpun+0x36>
 800321e:	4908      	ldr	r1, [pc, #32]	@ (8003240 <__aeabi_dcmpun+0x40>)
 8003220:	2000      	movs	r0, #0
 8003222:	428f      	cmp	r7, r1
 8003224:	d104      	bne.n	8003230 <__aeabi_dcmpun+0x30>
 8003226:	4646      	mov	r6, r8
 8003228:	4316      	orrs	r6, r2
 800322a:	0030      	movs	r0, r6
 800322c:	1e43      	subs	r3, r0, #1
 800322e:	4198      	sbcs	r0, r3
 8003230:	bc80      	pop	{r7}
 8003232:	46b8      	mov	r8, r7
 8003234:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003236:	4304      	orrs	r4, r0
 8003238:	2001      	movs	r0, #1
 800323a:	2c00      	cmp	r4, #0
 800323c:	d1f8      	bne.n	8003230 <__aeabi_dcmpun+0x30>
 800323e:	e7ee      	b.n	800321e <__aeabi_dcmpun+0x1e>
 8003240:	000007ff 	.word	0x000007ff

08003244 <__aeabi_d2iz>:
 8003244:	000b      	movs	r3, r1
 8003246:	0002      	movs	r2, r0
 8003248:	b570      	push	{r4, r5, r6, lr}
 800324a:	4d16      	ldr	r5, [pc, #88]	@ (80032a4 <__aeabi_d2iz+0x60>)
 800324c:	030c      	lsls	r4, r1, #12
 800324e:	b082      	sub	sp, #8
 8003250:	0049      	lsls	r1, r1, #1
 8003252:	2000      	movs	r0, #0
 8003254:	9200      	str	r2, [sp, #0]
 8003256:	9301      	str	r3, [sp, #4]
 8003258:	0b24      	lsrs	r4, r4, #12
 800325a:	0d49      	lsrs	r1, r1, #21
 800325c:	0fde      	lsrs	r6, r3, #31
 800325e:	42a9      	cmp	r1, r5
 8003260:	dd04      	ble.n	800326c <__aeabi_d2iz+0x28>
 8003262:	4811      	ldr	r0, [pc, #68]	@ (80032a8 <__aeabi_d2iz+0x64>)
 8003264:	4281      	cmp	r1, r0
 8003266:	dd03      	ble.n	8003270 <__aeabi_d2iz+0x2c>
 8003268:	4b10      	ldr	r3, [pc, #64]	@ (80032ac <__aeabi_d2iz+0x68>)
 800326a:	18f0      	adds	r0, r6, r3
 800326c:	b002      	add	sp, #8
 800326e:	bd70      	pop	{r4, r5, r6, pc}
 8003270:	2080      	movs	r0, #128	@ 0x80
 8003272:	0340      	lsls	r0, r0, #13
 8003274:	4320      	orrs	r0, r4
 8003276:	4c0e      	ldr	r4, [pc, #56]	@ (80032b0 <__aeabi_d2iz+0x6c>)
 8003278:	1a64      	subs	r4, r4, r1
 800327a:	2c1f      	cmp	r4, #31
 800327c:	dd08      	ble.n	8003290 <__aeabi_d2iz+0x4c>
 800327e:	4b0d      	ldr	r3, [pc, #52]	@ (80032b4 <__aeabi_d2iz+0x70>)
 8003280:	1a5b      	subs	r3, r3, r1
 8003282:	40d8      	lsrs	r0, r3
 8003284:	0003      	movs	r3, r0
 8003286:	4258      	negs	r0, r3
 8003288:	2e00      	cmp	r6, #0
 800328a:	d1ef      	bne.n	800326c <__aeabi_d2iz+0x28>
 800328c:	0018      	movs	r0, r3
 800328e:	e7ed      	b.n	800326c <__aeabi_d2iz+0x28>
 8003290:	4b09      	ldr	r3, [pc, #36]	@ (80032b8 <__aeabi_d2iz+0x74>)
 8003292:	9a00      	ldr	r2, [sp, #0]
 8003294:	469c      	mov	ip, r3
 8003296:	0003      	movs	r3, r0
 8003298:	4461      	add	r1, ip
 800329a:	408b      	lsls	r3, r1
 800329c:	40e2      	lsrs	r2, r4
 800329e:	4313      	orrs	r3, r2
 80032a0:	e7f1      	b.n	8003286 <__aeabi_d2iz+0x42>
 80032a2:	46c0      	nop			@ (mov r8, r8)
 80032a4:	000003fe 	.word	0x000003fe
 80032a8:	0000041d 	.word	0x0000041d
 80032ac:	7fffffff 	.word	0x7fffffff
 80032b0:	00000433 	.word	0x00000433
 80032b4:	00000413 	.word	0x00000413
 80032b8:	fffffbed 	.word	0xfffffbed

080032bc <__aeabi_i2d>:
 80032bc:	b570      	push	{r4, r5, r6, lr}
 80032be:	2800      	cmp	r0, #0
 80032c0:	d016      	beq.n	80032f0 <__aeabi_i2d+0x34>
 80032c2:	17c3      	asrs	r3, r0, #31
 80032c4:	18c5      	adds	r5, r0, r3
 80032c6:	405d      	eors	r5, r3
 80032c8:	0fc4      	lsrs	r4, r0, #31
 80032ca:	0028      	movs	r0, r5
 80032cc:	f000 f914 	bl	80034f8 <__clzsi2>
 80032d0:	4b10      	ldr	r3, [pc, #64]	@ (8003314 <__aeabi_i2d+0x58>)
 80032d2:	1a1b      	subs	r3, r3, r0
 80032d4:	055b      	lsls	r3, r3, #21
 80032d6:	0d5b      	lsrs	r3, r3, #21
 80032d8:	280a      	cmp	r0, #10
 80032da:	dc14      	bgt.n	8003306 <__aeabi_i2d+0x4a>
 80032dc:	0002      	movs	r2, r0
 80032de:	002e      	movs	r6, r5
 80032e0:	3215      	adds	r2, #21
 80032e2:	4096      	lsls	r6, r2
 80032e4:	220b      	movs	r2, #11
 80032e6:	1a12      	subs	r2, r2, r0
 80032e8:	40d5      	lsrs	r5, r2
 80032ea:	032d      	lsls	r5, r5, #12
 80032ec:	0b2d      	lsrs	r5, r5, #12
 80032ee:	e003      	b.n	80032f8 <__aeabi_i2d+0x3c>
 80032f0:	2400      	movs	r4, #0
 80032f2:	2300      	movs	r3, #0
 80032f4:	2500      	movs	r5, #0
 80032f6:	2600      	movs	r6, #0
 80032f8:	051b      	lsls	r3, r3, #20
 80032fa:	432b      	orrs	r3, r5
 80032fc:	07e4      	lsls	r4, r4, #31
 80032fe:	4323      	orrs	r3, r4
 8003300:	0030      	movs	r0, r6
 8003302:	0019      	movs	r1, r3
 8003304:	bd70      	pop	{r4, r5, r6, pc}
 8003306:	380b      	subs	r0, #11
 8003308:	4085      	lsls	r5, r0
 800330a:	032d      	lsls	r5, r5, #12
 800330c:	2600      	movs	r6, #0
 800330e:	0b2d      	lsrs	r5, r5, #12
 8003310:	e7f2      	b.n	80032f8 <__aeabi_i2d+0x3c>
 8003312:	46c0      	nop			@ (mov r8, r8)
 8003314:	0000041e 	.word	0x0000041e

08003318 <__aeabi_ui2d>:
 8003318:	b510      	push	{r4, lr}
 800331a:	1e04      	subs	r4, r0, #0
 800331c:	d010      	beq.n	8003340 <__aeabi_ui2d+0x28>
 800331e:	f000 f8eb 	bl	80034f8 <__clzsi2>
 8003322:	4b0e      	ldr	r3, [pc, #56]	@ (800335c <__aeabi_ui2d+0x44>)
 8003324:	1a1b      	subs	r3, r3, r0
 8003326:	055b      	lsls	r3, r3, #21
 8003328:	0d5b      	lsrs	r3, r3, #21
 800332a:	280a      	cmp	r0, #10
 800332c:	dc0f      	bgt.n	800334e <__aeabi_ui2d+0x36>
 800332e:	220b      	movs	r2, #11
 8003330:	0021      	movs	r1, r4
 8003332:	1a12      	subs	r2, r2, r0
 8003334:	40d1      	lsrs	r1, r2
 8003336:	3015      	adds	r0, #21
 8003338:	030a      	lsls	r2, r1, #12
 800333a:	4084      	lsls	r4, r0
 800333c:	0b12      	lsrs	r2, r2, #12
 800333e:	e001      	b.n	8003344 <__aeabi_ui2d+0x2c>
 8003340:	2300      	movs	r3, #0
 8003342:	2200      	movs	r2, #0
 8003344:	051b      	lsls	r3, r3, #20
 8003346:	4313      	orrs	r3, r2
 8003348:	0020      	movs	r0, r4
 800334a:	0019      	movs	r1, r3
 800334c:	bd10      	pop	{r4, pc}
 800334e:	0022      	movs	r2, r4
 8003350:	380b      	subs	r0, #11
 8003352:	4082      	lsls	r2, r0
 8003354:	0312      	lsls	r2, r2, #12
 8003356:	2400      	movs	r4, #0
 8003358:	0b12      	lsrs	r2, r2, #12
 800335a:	e7f3      	b.n	8003344 <__aeabi_ui2d+0x2c>
 800335c:	0000041e 	.word	0x0000041e

08003360 <__aeabi_f2d>:
 8003360:	b570      	push	{r4, r5, r6, lr}
 8003362:	0242      	lsls	r2, r0, #9
 8003364:	0043      	lsls	r3, r0, #1
 8003366:	0fc4      	lsrs	r4, r0, #31
 8003368:	20fe      	movs	r0, #254	@ 0xfe
 800336a:	0e1b      	lsrs	r3, r3, #24
 800336c:	1c59      	adds	r1, r3, #1
 800336e:	0a55      	lsrs	r5, r2, #9
 8003370:	4208      	tst	r0, r1
 8003372:	d00c      	beq.n	800338e <__aeabi_f2d+0x2e>
 8003374:	21e0      	movs	r1, #224	@ 0xe0
 8003376:	0089      	lsls	r1, r1, #2
 8003378:	468c      	mov	ip, r1
 800337a:	076d      	lsls	r5, r5, #29
 800337c:	0b12      	lsrs	r2, r2, #12
 800337e:	4463      	add	r3, ip
 8003380:	051b      	lsls	r3, r3, #20
 8003382:	4313      	orrs	r3, r2
 8003384:	07e4      	lsls	r4, r4, #31
 8003386:	4323      	orrs	r3, r4
 8003388:	0028      	movs	r0, r5
 800338a:	0019      	movs	r1, r3
 800338c:	bd70      	pop	{r4, r5, r6, pc}
 800338e:	2b00      	cmp	r3, #0
 8003390:	d114      	bne.n	80033bc <__aeabi_f2d+0x5c>
 8003392:	2d00      	cmp	r5, #0
 8003394:	d01b      	beq.n	80033ce <__aeabi_f2d+0x6e>
 8003396:	0028      	movs	r0, r5
 8003398:	f000 f8ae 	bl	80034f8 <__clzsi2>
 800339c:	280a      	cmp	r0, #10
 800339e:	dc1c      	bgt.n	80033da <__aeabi_f2d+0x7a>
 80033a0:	230b      	movs	r3, #11
 80033a2:	002a      	movs	r2, r5
 80033a4:	1a1b      	subs	r3, r3, r0
 80033a6:	40da      	lsrs	r2, r3
 80033a8:	0003      	movs	r3, r0
 80033aa:	3315      	adds	r3, #21
 80033ac:	409d      	lsls	r5, r3
 80033ae:	4b0e      	ldr	r3, [pc, #56]	@ (80033e8 <__aeabi_f2d+0x88>)
 80033b0:	0312      	lsls	r2, r2, #12
 80033b2:	1a1b      	subs	r3, r3, r0
 80033b4:	055b      	lsls	r3, r3, #21
 80033b6:	0b12      	lsrs	r2, r2, #12
 80033b8:	0d5b      	lsrs	r3, r3, #21
 80033ba:	e7e1      	b.n	8003380 <__aeabi_f2d+0x20>
 80033bc:	2d00      	cmp	r5, #0
 80033be:	d009      	beq.n	80033d4 <__aeabi_f2d+0x74>
 80033c0:	0b13      	lsrs	r3, r2, #12
 80033c2:	2280      	movs	r2, #128	@ 0x80
 80033c4:	0312      	lsls	r2, r2, #12
 80033c6:	431a      	orrs	r2, r3
 80033c8:	076d      	lsls	r5, r5, #29
 80033ca:	4b08      	ldr	r3, [pc, #32]	@ (80033ec <__aeabi_f2d+0x8c>)
 80033cc:	e7d8      	b.n	8003380 <__aeabi_f2d+0x20>
 80033ce:	2300      	movs	r3, #0
 80033d0:	2200      	movs	r2, #0
 80033d2:	e7d5      	b.n	8003380 <__aeabi_f2d+0x20>
 80033d4:	2200      	movs	r2, #0
 80033d6:	4b05      	ldr	r3, [pc, #20]	@ (80033ec <__aeabi_f2d+0x8c>)
 80033d8:	e7d2      	b.n	8003380 <__aeabi_f2d+0x20>
 80033da:	0003      	movs	r3, r0
 80033dc:	002a      	movs	r2, r5
 80033de:	3b0b      	subs	r3, #11
 80033e0:	409a      	lsls	r2, r3
 80033e2:	2500      	movs	r5, #0
 80033e4:	e7e3      	b.n	80033ae <__aeabi_f2d+0x4e>
 80033e6:	46c0      	nop			@ (mov r8, r8)
 80033e8:	00000389 	.word	0x00000389
 80033ec:	000007ff 	.word	0x000007ff

080033f0 <__aeabi_d2f>:
 80033f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033f2:	004b      	lsls	r3, r1, #1
 80033f4:	030f      	lsls	r7, r1, #12
 80033f6:	0d5b      	lsrs	r3, r3, #21
 80033f8:	4c3b      	ldr	r4, [pc, #236]	@ (80034e8 <__aeabi_d2f+0xf8>)
 80033fa:	0f45      	lsrs	r5, r0, #29
 80033fc:	b083      	sub	sp, #12
 80033fe:	0a7f      	lsrs	r7, r7, #9
 8003400:	1c5e      	adds	r6, r3, #1
 8003402:	432f      	orrs	r7, r5
 8003404:	9000      	str	r0, [sp, #0]
 8003406:	9101      	str	r1, [sp, #4]
 8003408:	0fca      	lsrs	r2, r1, #31
 800340a:	00c5      	lsls	r5, r0, #3
 800340c:	4226      	tst	r6, r4
 800340e:	d00b      	beq.n	8003428 <__aeabi_d2f+0x38>
 8003410:	4936      	ldr	r1, [pc, #216]	@ (80034ec <__aeabi_d2f+0xfc>)
 8003412:	185c      	adds	r4, r3, r1
 8003414:	2cfe      	cmp	r4, #254	@ 0xfe
 8003416:	dd13      	ble.n	8003440 <__aeabi_d2f+0x50>
 8003418:	20ff      	movs	r0, #255	@ 0xff
 800341a:	2300      	movs	r3, #0
 800341c:	05c0      	lsls	r0, r0, #23
 800341e:	4318      	orrs	r0, r3
 8003420:	07d2      	lsls	r2, r2, #31
 8003422:	4310      	orrs	r0, r2
 8003424:	b003      	add	sp, #12
 8003426:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003428:	2b00      	cmp	r3, #0
 800342a:	d102      	bne.n	8003432 <__aeabi_d2f+0x42>
 800342c:	2000      	movs	r0, #0
 800342e:	2300      	movs	r3, #0
 8003430:	e7f4      	b.n	800341c <__aeabi_d2f+0x2c>
 8003432:	433d      	orrs	r5, r7
 8003434:	d0f0      	beq.n	8003418 <__aeabi_d2f+0x28>
 8003436:	2380      	movs	r3, #128	@ 0x80
 8003438:	03db      	lsls	r3, r3, #15
 800343a:	20ff      	movs	r0, #255	@ 0xff
 800343c:	433b      	orrs	r3, r7
 800343e:	e7ed      	b.n	800341c <__aeabi_d2f+0x2c>
 8003440:	2c00      	cmp	r4, #0
 8003442:	dd14      	ble.n	800346e <__aeabi_d2f+0x7e>
 8003444:	9b00      	ldr	r3, [sp, #0]
 8003446:	00ff      	lsls	r7, r7, #3
 8003448:	019b      	lsls	r3, r3, #6
 800344a:	1e58      	subs	r0, r3, #1
 800344c:	4183      	sbcs	r3, r0
 800344e:	0f69      	lsrs	r1, r5, #29
 8003450:	433b      	orrs	r3, r7
 8003452:	430b      	orrs	r3, r1
 8003454:	0759      	lsls	r1, r3, #29
 8003456:	d041      	beq.n	80034dc <__aeabi_d2f+0xec>
 8003458:	210f      	movs	r1, #15
 800345a:	4019      	ands	r1, r3
 800345c:	2904      	cmp	r1, #4
 800345e:	d028      	beq.n	80034b2 <__aeabi_d2f+0xc2>
 8003460:	3304      	adds	r3, #4
 8003462:	0159      	lsls	r1, r3, #5
 8003464:	d525      	bpl.n	80034b2 <__aeabi_d2f+0xc2>
 8003466:	3401      	adds	r4, #1
 8003468:	2300      	movs	r3, #0
 800346a:	b2e0      	uxtb	r0, r4
 800346c:	e7d6      	b.n	800341c <__aeabi_d2f+0x2c>
 800346e:	0021      	movs	r1, r4
 8003470:	3117      	adds	r1, #23
 8003472:	dbdb      	blt.n	800342c <__aeabi_d2f+0x3c>
 8003474:	2180      	movs	r1, #128	@ 0x80
 8003476:	201e      	movs	r0, #30
 8003478:	0409      	lsls	r1, r1, #16
 800347a:	4339      	orrs	r1, r7
 800347c:	1b00      	subs	r0, r0, r4
 800347e:	281f      	cmp	r0, #31
 8003480:	dd1b      	ble.n	80034ba <__aeabi_d2f+0xca>
 8003482:	2602      	movs	r6, #2
 8003484:	4276      	negs	r6, r6
 8003486:	1b34      	subs	r4, r6, r4
 8003488:	000e      	movs	r6, r1
 800348a:	40e6      	lsrs	r6, r4
 800348c:	0034      	movs	r4, r6
 800348e:	2820      	cmp	r0, #32
 8003490:	d004      	beq.n	800349c <__aeabi_d2f+0xac>
 8003492:	4817      	ldr	r0, [pc, #92]	@ (80034f0 <__aeabi_d2f+0x100>)
 8003494:	4684      	mov	ip, r0
 8003496:	4463      	add	r3, ip
 8003498:	4099      	lsls	r1, r3
 800349a:	430d      	orrs	r5, r1
 800349c:	002b      	movs	r3, r5
 800349e:	1e59      	subs	r1, r3, #1
 80034a0:	418b      	sbcs	r3, r1
 80034a2:	4323      	orrs	r3, r4
 80034a4:	0759      	lsls	r1, r3, #29
 80034a6:	d015      	beq.n	80034d4 <__aeabi_d2f+0xe4>
 80034a8:	210f      	movs	r1, #15
 80034aa:	2400      	movs	r4, #0
 80034ac:	4019      	ands	r1, r3
 80034ae:	2904      	cmp	r1, #4
 80034b0:	d117      	bne.n	80034e2 <__aeabi_d2f+0xf2>
 80034b2:	019b      	lsls	r3, r3, #6
 80034b4:	0a5b      	lsrs	r3, r3, #9
 80034b6:	b2e0      	uxtb	r0, r4
 80034b8:	e7b0      	b.n	800341c <__aeabi_d2f+0x2c>
 80034ba:	4c0e      	ldr	r4, [pc, #56]	@ (80034f4 <__aeabi_d2f+0x104>)
 80034bc:	191c      	adds	r4, r3, r4
 80034be:	002b      	movs	r3, r5
 80034c0:	40a5      	lsls	r5, r4
 80034c2:	40c3      	lsrs	r3, r0
 80034c4:	40a1      	lsls	r1, r4
 80034c6:	1e68      	subs	r0, r5, #1
 80034c8:	4185      	sbcs	r5, r0
 80034ca:	4329      	orrs	r1, r5
 80034cc:	430b      	orrs	r3, r1
 80034ce:	2400      	movs	r4, #0
 80034d0:	0759      	lsls	r1, r3, #29
 80034d2:	d1c1      	bne.n	8003458 <__aeabi_d2f+0x68>
 80034d4:	019b      	lsls	r3, r3, #6
 80034d6:	2000      	movs	r0, #0
 80034d8:	0a5b      	lsrs	r3, r3, #9
 80034da:	e79f      	b.n	800341c <__aeabi_d2f+0x2c>
 80034dc:	08db      	lsrs	r3, r3, #3
 80034de:	b2e0      	uxtb	r0, r4
 80034e0:	e79c      	b.n	800341c <__aeabi_d2f+0x2c>
 80034e2:	3304      	adds	r3, #4
 80034e4:	e7e5      	b.n	80034b2 <__aeabi_d2f+0xc2>
 80034e6:	46c0      	nop			@ (mov r8, r8)
 80034e8:	000007fe 	.word	0x000007fe
 80034ec:	fffffc80 	.word	0xfffffc80
 80034f0:	fffffca2 	.word	0xfffffca2
 80034f4:	fffffc82 	.word	0xfffffc82

080034f8 <__clzsi2>:
 80034f8:	211c      	movs	r1, #28
 80034fa:	2301      	movs	r3, #1
 80034fc:	041b      	lsls	r3, r3, #16
 80034fe:	4298      	cmp	r0, r3
 8003500:	d301      	bcc.n	8003506 <__clzsi2+0xe>
 8003502:	0c00      	lsrs	r0, r0, #16
 8003504:	3910      	subs	r1, #16
 8003506:	0a1b      	lsrs	r3, r3, #8
 8003508:	4298      	cmp	r0, r3
 800350a:	d301      	bcc.n	8003510 <__clzsi2+0x18>
 800350c:	0a00      	lsrs	r0, r0, #8
 800350e:	3908      	subs	r1, #8
 8003510:	091b      	lsrs	r3, r3, #4
 8003512:	4298      	cmp	r0, r3
 8003514:	d301      	bcc.n	800351a <__clzsi2+0x22>
 8003516:	0900      	lsrs	r0, r0, #4
 8003518:	3904      	subs	r1, #4
 800351a:	a202      	add	r2, pc, #8	@ (adr r2, 8003524 <__clzsi2+0x2c>)
 800351c:	5c10      	ldrb	r0, [r2, r0]
 800351e:	1840      	adds	r0, r0, r1
 8003520:	4770      	bx	lr
 8003522:	46c0      	nop			@ (mov r8, r8)
 8003524:	02020304 	.word	0x02020304
 8003528:	01010101 	.word	0x01010101
	...

08003534 <__clzdi2>:
 8003534:	b510      	push	{r4, lr}
 8003536:	2900      	cmp	r1, #0
 8003538:	d103      	bne.n	8003542 <__clzdi2+0xe>
 800353a:	f7ff ffdd 	bl	80034f8 <__clzsi2>
 800353e:	3020      	adds	r0, #32
 8003540:	e002      	b.n	8003548 <__clzdi2+0x14>
 8003542:	0008      	movs	r0, r1
 8003544:	f7ff ffd8 	bl	80034f8 <__clzsi2>
 8003548:	bd10      	pop	{r4, pc}
 800354a:	46c0      	nop			@ (mov r8, r8)

0800354c <WriteUint8ArrayEeprom>:
#include "../Inc/EEProm.h"

uint32_t WriteUint8ArrayEeprom(uint32_t startAddr, uint8_t data[], uint16_t size)
{
 800354c:	b590      	push	{r4, r7, lr}
 800354e:	b087      	sub	sp, #28
 8003550:	af00      	add	r7, sp, #0
 8003552:	60f8      	str	r0, [r7, #12]
 8003554:	60b9      	str	r1, [r7, #8]
 8003556:	1dbb      	adds	r3, r7, #6
 8003558:	801a      	strh	r2, [r3, #0]
    static uint32_t addr;
    addr = startAddr;
 800355a:	4b17      	ldr	r3, [pc, #92]	@ (80035b8 <WriteUint8ArrayEeprom+0x6c>)
 800355c:	68fa      	ldr	r2, [r7, #12]
 800355e:	601a      	str	r2, [r3, #0]
    HAL_FLASHEx_DATAEEPROM_Unlock();
 8003560:	f007 fc68 	bl	800ae34 <HAL_FLASHEx_DATAEEPROM_Unlock>
    for (uint16_t i = 0; i < size; i++)
 8003564:	2316      	movs	r3, #22
 8003566:	18fb      	adds	r3, r7, r3
 8003568:	2200      	movs	r2, #0
 800356a:	801a      	strh	r2, [r3, #0]
 800356c:	e015      	b.n	800359a <WriteUint8ArrayEeprom+0x4e>
    {
        HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_BYTE, addr, data[i]);
 800356e:	4b12      	ldr	r3, [pc, #72]	@ (80035b8 <WriteUint8ArrayEeprom+0x6c>)
 8003570:	6819      	ldr	r1, [r3, #0]
 8003572:	2416      	movs	r4, #22
 8003574:	193b      	adds	r3, r7, r4
 8003576:	881b      	ldrh	r3, [r3, #0]
 8003578:	68ba      	ldr	r2, [r7, #8]
 800357a:	18d3      	adds	r3, r2, r3
 800357c:	781b      	ldrb	r3, [r3, #0]
 800357e:	001a      	movs	r2, r3
 8003580:	2000      	movs	r0, #0
 8003582:	f007 fcbf 	bl	800af04 <HAL_FLASHEx_DATAEEPROM_Program>
        addr++;
 8003586:	4b0c      	ldr	r3, [pc, #48]	@ (80035b8 <WriteUint8ArrayEeprom+0x6c>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	1c5a      	adds	r2, r3, #1
 800358c:	4b0a      	ldr	r3, [pc, #40]	@ (80035b8 <WriteUint8ArrayEeprom+0x6c>)
 800358e:	601a      	str	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 8003590:	193b      	adds	r3, r7, r4
 8003592:	881a      	ldrh	r2, [r3, #0]
 8003594:	193b      	adds	r3, r7, r4
 8003596:	3201      	adds	r2, #1
 8003598:	801a      	strh	r2, [r3, #0]
 800359a:	2316      	movs	r3, #22
 800359c:	18fa      	adds	r2, r7, r3
 800359e:	1dbb      	adds	r3, r7, #6
 80035a0:	8812      	ldrh	r2, [r2, #0]
 80035a2:	881b      	ldrh	r3, [r3, #0]
 80035a4:	429a      	cmp	r2, r3
 80035a6:	d3e2      	bcc.n	800356e <WriteUint8ArrayEeprom+0x22>
    }
    HAL_FLASHEx_DATAEEPROM_Lock();
 80035a8:	f007 fc72 	bl	800ae90 <HAL_FLASHEx_DATAEEPROM_Lock>
    return addr;
 80035ac:	4b02      	ldr	r3, [pc, #8]	@ (80035b8 <WriteUint8ArrayEeprom+0x6c>)
 80035ae:	681b      	ldr	r3, [r3, #0]
}
 80035b0:	0018      	movs	r0, r3
 80035b2:	46bd      	mov	sp, r7
 80035b4:	b007      	add	sp, #28
 80035b6:	bd90      	pop	{r4, r7, pc}
 80035b8:	2000042c 	.word	0x2000042c

080035bc <WriteUint8ArrayEepromSafe>:

uint32_t WriteUint8ArrayEepromSafe(uint32_t startAddr, uint8_t data[], uint16_t size, uint16_t maxSize)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b084      	sub	sp, #16
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	60f8      	str	r0, [r7, #12]
 80035c4:	60b9      	str	r1, [r7, #8]
 80035c6:	0019      	movs	r1, r3
 80035c8:	1dbb      	adds	r3, r7, #6
 80035ca:	801a      	strh	r2, [r3, #0]
 80035cc:	1d3b      	adds	r3, r7, #4
 80035ce:	1c0a      	adds	r2, r1, #0
 80035d0:	801a      	strh	r2, [r3, #0]
    if (size <= maxSize)
 80035d2:	1dba      	adds	r2, r7, #6
 80035d4:	1d3b      	adds	r3, r7, #4
 80035d6:	8812      	ldrh	r2, [r2, #0]
 80035d8:	881b      	ldrh	r3, [r3, #0]
 80035da:	429a      	cmp	r2, r3
 80035dc:	d806      	bhi.n	80035ec <WriteUint8ArrayEepromSafe+0x30>
    {
        WriteUint8ArrayEeprom(startAddr, data, size);
 80035de:	1dbb      	adds	r3, r7, #6
 80035e0:	881a      	ldrh	r2, [r3, #0]
 80035e2:	68b9      	ldr	r1, [r7, #8]
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	0018      	movs	r0, r3
 80035e8:	f7ff ffb0 	bl	800354c <WriteUint8ArrayEeprom>
    }
}
 80035ec:	46c0      	nop			@ (mov r8, r8)
 80035ee:	0018      	movs	r0, r3
 80035f0:	46bd      	mov	sp, r7
 80035f2:	b004      	add	sp, #16
 80035f4:	bd80      	pop	{r7, pc}

080035f6 <ReadUint8ArrayEEprom>:

void ReadUint8ArrayEEprom(uint32_t startAddr, uint8_t data[], uint16_t size)
{
 80035f6:	b580      	push	{r7, lr}
 80035f8:	b086      	sub	sp, #24
 80035fa:	af00      	add	r7, sp, #0
 80035fc:	60f8      	str	r0, [r7, #12]
 80035fe:	60b9      	str	r1, [r7, #8]
 8003600:	1dbb      	adds	r3, r7, #6
 8003602:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 8003604:	2316      	movs	r3, #22
 8003606:	18fb      	adds	r3, r7, r3
 8003608:	2200      	movs	r2, #0
 800360a:	801a      	strh	r2, [r3, #0]
 800360c:	e010      	b.n	8003630 <ReadUint8ArrayEEprom+0x3a>
    {
        data[i] = *(uint8_t*)(startAddr + i);
 800360e:	2016      	movs	r0, #22
 8003610:	183b      	adds	r3, r7, r0
 8003612:	881a      	ldrh	r2, [r3, #0]
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	18d3      	adds	r3, r2, r3
 8003618:	0019      	movs	r1, r3
 800361a:	183b      	adds	r3, r7, r0
 800361c:	881b      	ldrh	r3, [r3, #0]
 800361e:	68ba      	ldr	r2, [r7, #8]
 8003620:	18d3      	adds	r3, r2, r3
 8003622:	780a      	ldrb	r2, [r1, #0]
 8003624:	701a      	strb	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 8003626:	183b      	adds	r3, r7, r0
 8003628:	881a      	ldrh	r2, [r3, #0]
 800362a:	183b      	adds	r3, r7, r0
 800362c:	3201      	adds	r2, #1
 800362e:	801a      	strh	r2, [r3, #0]
 8003630:	2316      	movs	r3, #22
 8003632:	18fa      	adds	r2, r7, r3
 8003634:	1dbb      	adds	r3, r7, #6
 8003636:	8812      	ldrh	r2, [r2, #0]
 8003638:	881b      	ldrh	r3, [r3, #0]
 800363a:	429a      	cmp	r2, r3
 800363c:	d3e7      	bcc.n	800360e <ReadUint8ArrayEEprom+0x18>
    }
}
 800363e:	46c0      	nop			@ (mov r8, r8)
 8003640:	46c0      	nop			@ (mov r8, r8)
 8003642:	46bd      	mov	sp, r7
 8003644:	b006      	add	sp, #24
 8003646:	bd80      	pop	{r7, pc}

08003648 <ClearEEprom>:

void ClearEEprom(uint32_t startAddr, uint16_t size)
{
 8003648:	b590      	push	{r4, r7, lr}
 800364a:	b085      	sub	sp, #20
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
 8003650:	000a      	movs	r2, r1
 8003652:	1cbb      	adds	r3, r7, #2
 8003654:	801a      	strh	r2, [r3, #0]
    HAL_FLASHEx_DATAEEPROM_Unlock();
 8003656:	f007 fbed 	bl	800ae34 <HAL_FLASHEx_DATAEEPROM_Unlock>
    for (uint16_t i = 0; i < size; i+=4)
 800365a:	230e      	movs	r3, #14
 800365c:	18fb      	adds	r3, r7, r3
 800365e:	2200      	movs	r2, #0
 8003660:	801a      	strh	r2, [r3, #0]
 8003662:	e00c      	b.n	800367e <ClearEEprom+0x36>
    {
        HAL_FLASHEx_DATAEEPROM_Erase(startAddr+i);
 8003664:	240e      	movs	r4, #14
 8003666:	193b      	adds	r3, r7, r4
 8003668:	881a      	ldrh	r2, [r3, #0]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	18d3      	adds	r3, r2, r3
 800366e:	0018      	movs	r0, r3
 8003670:	f007 fc1c 	bl	800aeac <HAL_FLASHEx_DATAEEPROM_Erase>
    for (uint16_t i = 0; i < size; i+=4)
 8003674:	193b      	adds	r3, r7, r4
 8003676:	193a      	adds	r2, r7, r4
 8003678:	8812      	ldrh	r2, [r2, #0]
 800367a:	3204      	adds	r2, #4
 800367c:	801a      	strh	r2, [r3, #0]
 800367e:	230e      	movs	r3, #14
 8003680:	18fa      	adds	r2, r7, r3
 8003682:	1cbb      	adds	r3, r7, #2
 8003684:	8812      	ldrh	r2, [r2, #0]
 8003686:	881b      	ldrh	r3, [r3, #0]
 8003688:	429a      	cmp	r2, r3
 800368a:	d3eb      	bcc.n	8003664 <ClearEEprom+0x1c>
    }
    HAL_FLASHEx_DATAEEPROM_Lock();
 800368c:	f007 fc00 	bl	800ae90 <HAL_FLASHEx_DATAEEPROM_Lock>
 8003690:	46c0      	nop			@ (mov r8, r8)
 8003692:	46bd      	mov	sp, r7
 8003694:	b005      	add	sp, #20
 8003696:	bd90      	pop	{r4, r7, pc}

08003698 <setCharges>:
typedef struct {
    char* ATCommand;
    bool* doneFlag;
} ATCommandsParameters;

void setCharges(){
 8003698:	b580      	push	{r7, lr}
 800369a:	af00      	add	r7, sp, #0
  batteryCharge = ReadBatteryVoltage();
 800369c:	f001 fef8 	bl	8005490 <ReadBatteryVoltage>
 80036a0:	1c02      	adds	r2, r0, #0
 80036a2:	4b05      	ldr	r3, [pc, #20]	@ (80036b8 <setCharges+0x20>)
 80036a4:	601a      	str	r2, [r3, #0]
  solarCharge = ReadSolarVoltage();
 80036a6:	f001 ff55 	bl	8005554 <ReadSolarVoltage>
 80036aa:	1c02      	adds	r2, r0, #0
 80036ac:	4b03      	ldr	r3, [pc, #12]	@ (80036bc <setCharges+0x24>)
 80036ae:	601a      	str	r2, [r3, #0]
}
 80036b0:	46c0      	nop			@ (mov r8, r8)
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	46c0      	nop			@ (mov r8, r8)
 80036b8:	20000550 	.word	0x20000550
 80036bc:	20000554 	.word	0x20000554

080036c0 <setMeasurement>:

void setMeasurement(float temp, float humid, uint16_t voc){
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b084      	sub	sp, #16
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	60f8      	str	r0, [r7, #12]
 80036c8:	60b9      	str	r1, [r7, #8]
 80036ca:	1dbb      	adds	r3, r7, #6
 80036cc:	801a      	strh	r2, [r3, #0]
  Temperature = temp;
 80036ce:	4b07      	ldr	r3, [pc, #28]	@ (80036ec <setMeasurement+0x2c>)
 80036d0:	68fa      	ldr	r2, [r7, #12]
 80036d2:	601a      	str	r2, [r3, #0]
  Humidity = humid;
 80036d4:	4b06      	ldr	r3, [pc, #24]	@ (80036f0 <setMeasurement+0x30>)
 80036d6:	68ba      	ldr	r2, [r7, #8]
 80036d8:	601a      	str	r2, [r3, #0]
  VOCIndex = voc;
 80036da:	4b06      	ldr	r3, [pc, #24]	@ (80036f4 <setMeasurement+0x34>)
 80036dc:	1dba      	adds	r2, r7, #6
 80036de:	8812      	ldrh	r2, [r2, #0]
 80036e0:	801a      	strh	r2, [r3, #0]
}
 80036e2:	46c0      	nop			@ (mov r8, r8)
 80036e4:	46bd      	mov	sp, r7
 80036e6:	b004      	add	sp, #16
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	46c0      	nop			@ (mov r8, r8)
 80036ec:	20000548 	.word	0x20000548
 80036f0:	2000054c 	.word	0x2000054c
 80036f4:	20000558 	.word	0x20000558

080036f8 <setMic>:
void setMic(float dB){
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b082      	sub	sp, #8
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  dBC = dB;
 8003700:	4b03      	ldr	r3, [pc, #12]	@ (8003710 <setMic+0x18>)
 8003702:	687a      	ldr	r2, [r7, #4]
 8003704:	601a      	str	r2, [r3, #0]
}
 8003706:	46c0      	nop			@ (mov r8, r8)
 8003708:	46bd      	mov	sp, r7
 800370a:	b002      	add	sp, #8
 800370c:	bd80      	pop	{r7, pc}
 800370e:	46c0      	nop			@ (mov r8, r8)
 8003710:	2000055c 	.word	0x2000055c

08003714 <SetConfigMode>:

void SetConfigMode(){
 8003714:	b580      	push	{r7, lr}
 8003716:	af00      	add	r7, sp, #0
  ReconfigSet = true;
 8003718:	4b02      	ldr	r3, [pc, #8]	@ (8003724 <SetConfigMode+0x10>)
 800371a:	2201      	movs	r2, #1
 800371c:	701a      	strb	r2, [r3, #0]
}
 800371e:	46c0      	nop			@ (mov r8, r8)
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}
 8003724:	2000053a 	.word	0x2000053a

08003728 <ESP_GetUID>:
static ESP_Test TestState = ESP_TEST_INIT;
//static ATCommandsParameters ATCommands[ESP_AT_COMMANDS_COUNT];

//TODO: Add de-init if ESP is off. Otherwise there is going to be 3.3V on the ESP.

void ESP_GetUID(){
 8003728:	b580      	push	{r7, lr}
 800372a:	af00      	add	r7, sp, #0
  uid[0] = HAL_GetUIDw0();
 800372c:	f006 fb4e 	bl	8009dcc <HAL_GetUIDw0>
 8003730:	0002      	movs	r2, r0
 8003732:	4b07      	ldr	r3, [pc, #28]	@ (8003750 <ESP_GetUID+0x28>)
 8003734:	601a      	str	r2, [r3, #0]
  uid[1] = HAL_GetUIDw1();
 8003736:	f006 fb53 	bl	8009de0 <HAL_GetUIDw1>
 800373a:	0002      	movs	r2, r0
 800373c:	4b04      	ldr	r3, [pc, #16]	@ (8003750 <ESP_GetUID+0x28>)
 800373e:	605a      	str	r2, [r3, #4]
  uid[2] = HAL_GetUIDw2();
 8003740:	f006 fb58 	bl	8009df4 <HAL_GetUIDw2>
 8003744:	0002      	movs	r2, r0
 8003746:	4b02      	ldr	r3, [pc, #8]	@ (8003750 <ESP_GetUID+0x28>)
 8003748:	609a      	str	r2, [r3, #8]
}
 800374a:	46c0      	nop			@ (mov r8, r8)
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}
 8003750:	2000053c 	.word	0x2000053c

08003754 <ESP_Init>:
void ESP_Init(UART_HandleTypeDef* espUart) {
 8003754:	b580      	push	{r7, lr}
 8003756:	b082      	sub	sp, #8
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  EspUart = espUart;
 800375c:	4b05      	ldr	r3, [pc, #20]	@ (8003774 <ESP_Init+0x20>)
 800375e:	687a      	ldr	r2, [r7, #4]
 8003760:	601a      	str	r2, [r3, #0]
  EspState = ESP_STATE_INIT;
 8003762:	4b05      	ldr	r3, [pc, #20]	@ (8003778 <ESP_Init+0x24>)
 8003764:	2202      	movs	r2, #2
 8003766:	701a      	strb	r2, [r3, #0]
  ESP_GetUID();
 8003768:	f7ff ffde 	bl	8003728 <ESP_GetUID>
}
 800376c:	46c0      	nop			@ (mov r8, r8)
 800376e:	46bd      	mov	sp, r7
 8003770:	b002      	add	sp, #8
 8003772:	bd80      	pop	{r7, pc}
 8003774:	20000430 	.word	0x20000430
 8003778:	20000069 	.word	0x20000069

0800377c <ESP_Send>:

static bool ESP_Send(uint8_t* command, uint16_t length) {
 800377c:	b5b0      	push	{r4, r5, r7, lr}
 800377e:	b084      	sub	sp, #16
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
 8003784:	000a      	movs	r2, r1
 8003786:	1cbb      	adds	r3, r7, #2
 8003788:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_UART_Transmit_DMA(EspUart, command, length);
 800378a:	4b0e      	ldr	r3, [pc, #56]	@ (80037c4 <ESP_Send+0x48>)
 800378c:	6818      	ldr	r0, [r3, #0]
 800378e:	250f      	movs	r5, #15
 8003790:	197c      	adds	r4, r7, r5
 8003792:	1cbb      	adds	r3, r7, #2
 8003794:	881a      	ldrh	r2, [r3, #0]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	0019      	movs	r1, r3
 800379a:	f00d fe37 	bl	801140c <HAL_UART_Transmit_DMA>
 800379e:	0003      	movs	r3, r0
 80037a0:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 80037a2:	197b      	adds	r3, r7, r5
 80037a4:	781b      	ldrb	r3, [r3, #0]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d007      	beq.n	80037ba <ESP_Send+0x3e>
    Debug("Error in HAL_UART_Transmit_DMA");
 80037aa:	4a07      	ldr	r2, [pc, #28]	@ (80037c8 <ESP_Send+0x4c>)
 80037ac:	4b07      	ldr	r3, [pc, #28]	@ (80037cc <ESP_Send+0x50>)
 80037ae:	0019      	movs	r1, r3
 80037b0:	2003      	movs	r0, #3
 80037b2:	f005 ff41 	bl	8009638 <CreateLine>
    return false;
 80037b6:	2300      	movs	r3, #0
 80037b8:	e000      	b.n	80037bc <ESP_Send+0x40>
  }
  return true;
 80037ba:	2301      	movs	r3, #1
}
 80037bc:	0018      	movs	r0, r3
 80037be:	46bd      	mov	sp, r7
 80037c0:	b004      	add	sp, #16
 80037c2:	bdb0      	pop	{r4, r5, r7, pc}
 80037c4:	20000430 	.word	0x20000430
 80037c8:	0801ac58 	.word	0x0801ac58
 80037cc:	0801ac78 	.word	0x0801ac78

080037d0 <ESP_Receive>:
static bool ESP_Receive(uint8_t* reply, uint8_t length) {
 80037d0:	b5b0      	push	{r4, r5, r7, lr}
 80037d2:	b084      	sub	sp, #16
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
 80037d8:	000a      	movs	r2, r1
 80037da:	1cfb      	adds	r3, r7, #3
 80037dc:	701a      	strb	r2, [r3, #0]
//  HAL_UART_DMAStop(EspUart);
  RxComplete = false;
 80037de:	4b12      	ldr	r3, [pc, #72]	@ (8003828 <ESP_Receive+0x58>)
 80037e0:	2200      	movs	r2, #0
 80037e2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_UART_Receive_DMA(EspUart, reply, length);
 80037e4:	4b11      	ldr	r3, [pc, #68]	@ (800382c <ESP_Receive+0x5c>)
 80037e6:	6818      	ldr	r0, [r3, #0]
 80037e8:	1cfb      	adds	r3, r7, #3
 80037ea:	781b      	ldrb	r3, [r3, #0]
 80037ec:	b29a      	uxth	r2, r3
 80037ee:	250f      	movs	r5, #15
 80037f0:	197c      	adds	r4, r7, r5
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	0019      	movs	r1, r3
 80037f6:	f00d fe99 	bl	801152c <HAL_UART_Receive_DMA>
 80037fa:	0003      	movs	r3, r0
 80037fc:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 80037fe:	197b      	adds	r3, r7, r5
 8003800:	781b      	ldrb	r3, [r3, #0]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d00a      	beq.n	800381c <ESP_Receive+0x4c>
    Debug("Error in HAL_UART_Receive_DMA.");
 8003806:	4a0a      	ldr	r2, [pc, #40]	@ (8003830 <ESP_Receive+0x60>)
 8003808:	4b0a      	ldr	r3, [pc, #40]	@ (8003834 <ESP_Receive+0x64>)
 800380a:	0019      	movs	r1, r3
 800380c:	2003      	movs	r0, #3
 800380e:	f005 ff13 	bl	8009638 <CreateLine>
    RxComplete = true;
 8003812:	4b05      	ldr	r3, [pc, #20]	@ (8003828 <ESP_Receive+0x58>)
 8003814:	2201      	movs	r2, #1
 8003816:	701a      	strb	r2, [r3, #0]
    return false;
 8003818:	2300      	movs	r3, #0
 800381a:	e000      	b.n	800381e <ESP_Receive+0x4e>
  }
  return true;
 800381c:	2301      	movs	r3, #1
}
 800381e:	0018      	movs	r0, r3
 8003820:	46bd      	mov	sp, r7
 8003822:	b004      	add	sp, #16
 8003824:	bdb0      	pop	{r4, r5, r7, pc}
 8003826:	46c0      	nop			@ (mov r8, r8)
 8003828:	20000434 	.word	0x20000434
 800382c:	20000430 	.word	0x20000430
 8003830:	0801ac7c 	.word	0x0801ac7c
 8003834:	0801ac78 	.word	0x0801ac78

08003838 <HAL_UART_RxCpltCallback>:

// Callback for reception complete
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8003838:	b580      	push	{r7, lr}
 800383a:	b082      	sub	sp, #8
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  if (huart == EspUart) {
 8003840:	4b08      	ldr	r3, [pc, #32]	@ (8003864 <HAL_UART_RxCpltCallback+0x2c>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	687a      	ldr	r2, [r7, #4]
 8003846:	429a      	cmp	r2, r3
 8003848:	d108      	bne.n	800385c <HAL_UART_RxCpltCallback+0x24>
    RxComplete = true;
 800384a:	4b07      	ldr	r3, [pc, #28]	@ (8003868 <HAL_UART_RxCpltCallback+0x30>)
 800384c:	2201      	movs	r2, #1
 800384e:	701a      	strb	r2, [r3, #0]
    Debug("RxComplete");
 8003850:	4a06      	ldr	r2, [pc, #24]	@ (800386c <HAL_UART_RxCpltCallback+0x34>)
 8003852:	4b07      	ldr	r3, [pc, #28]	@ (8003870 <HAL_UART_RxCpltCallback+0x38>)
 8003854:	0019      	movs	r1, r3
 8003856:	2003      	movs	r0, #3
 8003858:	f005 feee 	bl	8009638 <CreateLine>
  }
}
 800385c:	46c0      	nop			@ (mov r8, r8)
 800385e:	46bd      	mov	sp, r7
 8003860:	b002      	add	sp, #8
 8003862:	bd80      	pop	{r7, pc}
 8003864:	20000430 	.word	0x20000430
 8003868:	20000434 	.word	0x20000434
 800386c:	0801ac9c 	.word	0x0801ac9c
 8003870:	0801ac78 	.word	0x0801ac78

08003874 <HAL_UART_ErrorCallback>:

// Callback for UART error
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8003874:	b580      	push	{r7, lr}
 8003876:	b082      	sub	sp, #8
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  if (huart == EspUart) {
    // Handle error
    //EspState = ESP_STATE_ERROR;
  }
}
 800387c:	46c0      	nop			@ (mov r8, r8)
 800387e:	46bd      	mov	sp, r7
 8003880:	b002      	add	sp, #8
 8003882:	bd80      	pop	{r7, pc}

08003884 <CreateMessage>:
uint16_t CreateMessage(){
 8003884:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003886:	b089      	sub	sp, #36	@ 0x24
 8003888:	af04      	add	r7, sp, #16
  uint16_t messageLength = 0;
 800388a:	260e      	movs	r6, #14
 800388c:	19bb      	adds	r3, r7, r6
 800388e:	2200      	movs	r2, #0
 8003890:	801a      	strh	r2, [r3, #0]
  uint8_t sensorID[IdSize];
  setCharges();
 8003892:	f7ff ff01 	bl	8003698 <setCharges>
  ReadUint8ArrayEEprom(TempConfigAddr, sensorID, IdSize);
 8003896:	003b      	movs	r3, r7
 8003898:	4852      	ldr	r0, [pc, #328]	@ (80039e4 <CreateMessage+0x160>)
 800389a:	220c      	movs	r2, #12
 800389c:	0019      	movs	r1, r3
 800389e:	f7ff feaa 	bl	80035f6 <ReadUint8ArrayEEprom>
  sprintf(messagePart1, "\"name\":\"temp\", \"id\": %d, \"user\": %s, \"sensor\": %s, \"value\":%3.2f, \"unit\": \"graden\"", uid[2], user, sensorID1, Temperature);
 80038a2:	4b51      	ldr	r3, [pc, #324]	@ (80039e8 <CreateMessage+0x164>)
 80038a4:	689c      	ldr	r4, [r3, #8]
 80038a6:	4b51      	ldr	r3, [pc, #324]	@ (80039ec <CreateMessage+0x168>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	1c18      	adds	r0, r3, #0
 80038ac:	f7ff fd58 	bl	8003360 <__aeabi_f2d>
 80038b0:	0002      	movs	r2, r0
 80038b2:	000b      	movs	r3, r1
 80038b4:	4d4e      	ldr	r5, [pc, #312]	@ (80039f0 <CreateMessage+0x16c>)
 80038b6:	494f      	ldr	r1, [pc, #316]	@ (80039f4 <CreateMessage+0x170>)
 80038b8:	484f      	ldr	r0, [pc, #316]	@ (80039f8 <CreateMessage+0x174>)
 80038ba:	9202      	str	r2, [sp, #8]
 80038bc:	9303      	str	r3, [sp, #12]
 80038be:	4b4f      	ldr	r3, [pc, #316]	@ (80039fc <CreateMessage+0x178>)
 80038c0:	9300      	str	r3, [sp, #0]
 80038c2:	002b      	movs	r3, r5
 80038c4:	0022      	movs	r2, r4
 80038c6:	f014 fa1d 	bl	8017d04 <siprintf>
  messageLength += strlen(messagePart1);
 80038ca:	4b4b      	ldr	r3, [pc, #300]	@ (80039f8 <CreateMessage+0x174>)
 80038cc:	0018      	movs	r0, r3
 80038ce:	f7fc fc1b 	bl	8000108 <strlen>
 80038d2:	0003      	movs	r3, r0
 80038d4:	b299      	uxth	r1, r3
 80038d6:	19bb      	adds	r3, r7, r6
 80038d8:	19ba      	adds	r2, r7, r6
 80038da:	8812      	ldrh	r2, [r2, #0]
 80038dc:	188a      	adds	r2, r1, r2
 80038de:	801a      	strh	r2, [r3, #0]
  sprintf(messagePart2, "\"name\":\"humid\", \"id\": %d, \"user\": %s, \"sensor\": %s, \"value\":%3.2f, \"unit\": \"%%\"", uid[2], user, sensorID2, Humidity);
 80038e0:	4b41      	ldr	r3, [pc, #260]	@ (80039e8 <CreateMessage+0x164>)
 80038e2:	689c      	ldr	r4, [r3, #8]
 80038e4:	4b46      	ldr	r3, [pc, #280]	@ (8003a00 <CreateMessage+0x17c>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	1c18      	adds	r0, r3, #0
 80038ea:	f7ff fd39 	bl	8003360 <__aeabi_f2d>
 80038ee:	0002      	movs	r2, r0
 80038f0:	000b      	movs	r3, r1
 80038f2:	4d3f      	ldr	r5, [pc, #252]	@ (80039f0 <CreateMessage+0x16c>)
 80038f4:	4943      	ldr	r1, [pc, #268]	@ (8003a04 <CreateMessage+0x180>)
 80038f6:	4844      	ldr	r0, [pc, #272]	@ (8003a08 <CreateMessage+0x184>)
 80038f8:	9202      	str	r2, [sp, #8]
 80038fa:	9303      	str	r3, [sp, #12]
 80038fc:	4b43      	ldr	r3, [pc, #268]	@ (8003a0c <CreateMessage+0x188>)
 80038fe:	9300      	str	r3, [sp, #0]
 8003900:	002b      	movs	r3, r5
 8003902:	0022      	movs	r2, r4
 8003904:	f014 f9fe 	bl	8017d04 <siprintf>
  messageLength += strlen(messagePart2);
 8003908:	4b3f      	ldr	r3, [pc, #252]	@ (8003a08 <CreateMessage+0x184>)
 800390a:	0018      	movs	r0, r3
 800390c:	f7fc fbfc 	bl	8000108 <strlen>
 8003910:	0003      	movs	r3, r0
 8003912:	b299      	uxth	r1, r3
 8003914:	19bb      	adds	r3, r7, r6
 8003916:	19ba      	adds	r2, r7, r6
 8003918:	8812      	ldrh	r2, [r2, #0]
 800391a:	188a      	adds	r2, r1, r2
 800391c:	801a      	strh	r2, [r3, #0]
  sprintf(messagePart3, "\"name\":\"Sound\", \"id\": %d, \"user\": %s, \"sensor\": %s, \"value\":%3.2f, \"unit\": \"dBC\"", uid[2], user, sensorID3, dBC);
 800391e:	4b32      	ldr	r3, [pc, #200]	@ (80039e8 <CreateMessage+0x164>)
 8003920:	689c      	ldr	r4, [r3, #8]
 8003922:	4b3b      	ldr	r3, [pc, #236]	@ (8003a10 <CreateMessage+0x18c>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	1c18      	adds	r0, r3, #0
 8003928:	f7ff fd1a 	bl	8003360 <__aeabi_f2d>
 800392c:	0002      	movs	r2, r0
 800392e:	000b      	movs	r3, r1
 8003930:	4d2f      	ldr	r5, [pc, #188]	@ (80039f0 <CreateMessage+0x16c>)
 8003932:	4938      	ldr	r1, [pc, #224]	@ (8003a14 <CreateMessage+0x190>)
 8003934:	4838      	ldr	r0, [pc, #224]	@ (8003a18 <CreateMessage+0x194>)
 8003936:	9202      	str	r2, [sp, #8]
 8003938:	9303      	str	r3, [sp, #12]
 800393a:	4b38      	ldr	r3, [pc, #224]	@ (8003a1c <CreateMessage+0x198>)
 800393c:	9300      	str	r3, [sp, #0]
 800393e:	002b      	movs	r3, r5
 8003940:	0022      	movs	r2, r4
 8003942:	f014 f9df 	bl	8017d04 <siprintf>
  messageLength += strlen(messagePart3);
 8003946:	4b34      	ldr	r3, [pc, #208]	@ (8003a18 <CreateMessage+0x194>)
 8003948:	0018      	movs	r0, r3
 800394a:	f7fc fbdd 	bl	8000108 <strlen>
 800394e:	0003      	movs	r3, r0
 8003950:	b299      	uxth	r1, r3
 8003952:	19bb      	adds	r3, r7, r6
 8003954:	19ba      	adds	r2, r7, r6
 8003956:	8812      	ldrh	r2, [r2, #0]
 8003958:	188a      	adds	r2, r1, r2
 800395a:	801a      	strh	r2, [r3, #0]
  sprintf(messagePart4, "\"name\":\"voc\", \"id\": %d, \"user\": %s, \"sensor\": %s, \"value\":%d, \"unit\": \"VOC index\"", uid[2], user, sensorID4, VOCIndex);
 800395c:	4b22      	ldr	r3, [pc, #136]	@ (80039e8 <CreateMessage+0x164>)
 800395e:	689a      	ldr	r2, [r3, #8]
 8003960:	4b2f      	ldr	r3, [pc, #188]	@ (8003a20 <CreateMessage+0x19c>)
 8003962:	881b      	ldrh	r3, [r3, #0]
 8003964:	4c22      	ldr	r4, [pc, #136]	@ (80039f0 <CreateMessage+0x16c>)
 8003966:	492f      	ldr	r1, [pc, #188]	@ (8003a24 <CreateMessage+0x1a0>)
 8003968:	482f      	ldr	r0, [pc, #188]	@ (8003a28 <CreateMessage+0x1a4>)
 800396a:	9301      	str	r3, [sp, #4]
 800396c:	4b2f      	ldr	r3, [pc, #188]	@ (8003a2c <CreateMessage+0x1a8>)
 800396e:	9300      	str	r3, [sp, #0]
 8003970:	0023      	movs	r3, r4
 8003972:	f014 f9c7 	bl	8017d04 <siprintf>
  messageLength += strlen(messagePart4);
 8003976:	4b2c      	ldr	r3, [pc, #176]	@ (8003a28 <CreateMessage+0x1a4>)
 8003978:	0018      	movs	r0, r3
 800397a:	f7fc fbc5 	bl	8000108 <strlen>
 800397e:	0003      	movs	r3, r0
 8003980:	b299      	uxth	r1, r3
 8003982:	19bb      	adds	r3, r7, r6
 8003984:	19ba      	adds	r2, r7, r6
 8003986:	8812      	ldrh	r2, [r2, #0]
 8003988:	188a      	adds	r2, r1, r2
 800398a:	801a      	strh	r2, [r3, #0]
  sprintf(messagePart5, "\"name\":\"battery\", \"id\": %d, \"user\": %s, \"sensor\": %s, \"value\":%3.2f, \"unit\": \"Volt\"", uid[2], user, sensorID5, batteryCharge);
 800398c:	4b16      	ldr	r3, [pc, #88]	@ (80039e8 <CreateMessage+0x164>)
 800398e:	689c      	ldr	r4, [r3, #8]
 8003990:	4b27      	ldr	r3, [pc, #156]	@ (8003a30 <CreateMessage+0x1ac>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	1c18      	adds	r0, r3, #0
 8003996:	f7ff fce3 	bl	8003360 <__aeabi_f2d>
 800399a:	0002      	movs	r2, r0
 800399c:	000b      	movs	r3, r1
 800399e:	4d14      	ldr	r5, [pc, #80]	@ (80039f0 <CreateMessage+0x16c>)
 80039a0:	4924      	ldr	r1, [pc, #144]	@ (8003a34 <CreateMessage+0x1b0>)
 80039a2:	4825      	ldr	r0, [pc, #148]	@ (8003a38 <CreateMessage+0x1b4>)
 80039a4:	9202      	str	r2, [sp, #8]
 80039a6:	9303      	str	r3, [sp, #12]
 80039a8:	4b24      	ldr	r3, [pc, #144]	@ (8003a3c <CreateMessage+0x1b8>)
 80039aa:	9300      	str	r3, [sp, #0]
 80039ac:	002b      	movs	r3, r5
 80039ae:	0022      	movs	r2, r4
 80039b0:	f014 f9a8 	bl	8017d04 <siprintf>
  messageLength += strlen(messagePart5);
 80039b4:	4b20      	ldr	r3, [pc, #128]	@ (8003a38 <CreateMessage+0x1b4>)
 80039b6:	0018      	movs	r0, r3
 80039b8:	f7fc fba6 	bl	8000108 <strlen>
 80039bc:	0003      	movs	r3, r0
 80039be:	b299      	uxth	r1, r3
 80039c0:	19bb      	adds	r3, r7, r6
 80039c2:	19ba      	adds	r2, r7, r6
 80039c4:	8812      	ldrh	r2, [r2, #0]
 80039c6:	188a      	adds	r2, r1, r2
 80039c8:	801a      	strh	r2, [r3, #0]
  messageLength += 20;
 80039ca:	19bb      	adds	r3, r7, r6
 80039cc:	0031      	movs	r1, r6
 80039ce:	19ba      	adds	r2, r7, r6
 80039d0:	8812      	ldrh	r2, [r2, #0]
 80039d2:	3214      	adds	r2, #20
 80039d4:	801a      	strh	r2, [r3, #0]
  return(messageLength);
 80039d6:	187b      	adds	r3, r7, r1
 80039d8:	881b      	ldrh	r3, [r3, #0]
}
 80039da:	0018      	movs	r0, r3
 80039dc:	46bd      	mov	sp, r7
 80039de:	b005      	add	sp, #20
 80039e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80039e2:	46c0      	nop			@ (mov r8, r8)
 80039e4:	0808000c 	.word	0x0808000c
 80039e8:	2000053c 	.word	0x2000053c
 80039ec:	20000548 	.word	0x20000548
 80039f0:	20000040 	.word	0x20000040
 80039f4:	0801aca8 	.word	0x0801aca8
 80039f8:	20000560 	.word	0x20000560
 80039fc:	0801b824 	.word	0x0801b824
 8003a00:	2000054c 	.word	0x2000054c
 8003a04:	0801acfc 	.word	0x0801acfc
 8003a08:	200005e0 	.word	0x200005e0
 8003a0c:	0801b840 	.word	0x0801b840
 8003a10:	2000055c 	.word	0x2000055c
 8003a14:	0801ad4c 	.word	0x0801ad4c
 8003a18:	20000660 	.word	0x20000660
 8003a1c:	0801b85c 	.word	0x0801b85c
 8003a20:	20000558 	.word	0x20000558
 8003a24:	0801ada0 	.word	0x0801ada0
 8003a28:	200006e0 	.word	0x200006e0
 8003a2c:	0801b878 	.word	0x0801b878
 8003a30:	20000550 	.word	0x20000550
 8003a34:	0801adf4 	.word	0x0801adf4
 8003a38:	20000760 	.word	0x20000760
 8003a3c:	0801b894 	.word	0x0801b894

08003a40 <SetCommandBuffer>:

void SetCommandBuffer(const char* command) {
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b082      	sub	sp, #8
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
    strncpy(CommandBuffer, command, ESP_TX_BUFFER_SIZE);
 8003a48:	2380      	movs	r3, #128	@ 0x80
 8003a4a:	009a      	lsls	r2, r3, #2
 8003a4c:	6879      	ldr	r1, [r7, #4]
 8003a4e:	4b05      	ldr	r3, [pc, #20]	@ (8003a64 <SetCommandBuffer+0x24>)
 8003a50:	0018      	movs	r0, r3
 8003a52:	f014 fa11 	bl	8017e78 <strncpy>
    CommandEchoed = false; // Reset the flag when a new command is sent
 8003a56:	4b04      	ldr	r3, [pc, #16]	@ (8003a68 <SetCommandBuffer+0x28>)
 8003a58:	2200      	movs	r2, #0
 8003a5a:	701a      	strb	r2, [r3, #0]
}
 8003a5c:	46c0      	nop			@ (mov r8, r8)
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	b002      	add	sp, #8
 8003a62:	bd80      	pop	{r7, pc}
 8003a64:	200007f4 	.word	0x200007f4
 8003a68:	200009f4 	.word	0x200009f4

08003a6c <StartProg>:
void StartProg(){
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	af00      	add	r7, sp, #0
  //InitWifiConfig();
  HAL_Delay(100);
 8003a70:	2064      	movs	r0, #100	@ 0x64
 8003a72:	f006 f987 	bl	8009d84 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8003a76:	4b15      	ldr	r3, [pc, #84]	@ (8003acc <StartProg+0x60>)
 8003a78:	2200      	movs	r2, #0
 8003a7a:	2101      	movs	r1, #1
 8003a7c:	0018      	movs	r0, r3
 8003a7e:	f007 fd16 	bl	800b4ae <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8003a82:	2064      	movs	r0, #100	@ 0x64
 8003a84:	f006 f97e 	bl	8009d84 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 8003a88:	4b10      	ldr	r3, [pc, #64]	@ (8003acc <StartProg+0x60>)
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	2102      	movs	r1, #2
 8003a8e:	0018      	movs	r0, r3
 8003a90:	f007 fd0d 	bl	800b4ae <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8003a94:	23fa      	movs	r3, #250	@ 0xfa
 8003a96:	005b      	lsls	r3, r3, #1
 8003a98:	0018      	movs	r0, r3
 8003a9a:	f006 f973 	bl	8009d84 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 8003a9e:	4b0b      	ldr	r3, [pc, #44]	@ (8003acc <StartProg+0x60>)
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	2101      	movs	r1, #1
 8003aa4:	0018      	movs	r0, r3
 8003aa6:	f007 fd02 	bl	800b4ae <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8003aaa:	23fa      	movs	r3, #250	@ 0xfa
 8003aac:	005b      	lsls	r3, r3, #1
 8003aae:	0018      	movs	r0, r3
 8003ab0:	f006 f968 	bl	8009d84 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_SET);
 8003ab4:	4b05      	ldr	r3, [pc, #20]	@ (8003acc <StartProg+0x60>)
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	2102      	movs	r1, #2
 8003aba:	0018      	movs	r0, r3
 8003abc:	f007 fcf7 	bl	800b4ae <HAL_GPIO_WritePin>
  HAL_Delay(40);
 8003ac0:	2028      	movs	r0, #40	@ 0x28
 8003ac2:	f006 f95f 	bl	8009d84 <HAL_Delay>
}
 8003ac6:	46c0      	nop			@ (mov r8, r8)
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}
 8003acc:	50001c00 	.word	0x50001c00

08003ad0 <ParseBuffer>:
 uint8_t ParseBuffer(uint8_t* buffer, uint16_t len, uint8_t expectation) {
 8003ad0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ad2:	46c6      	mov	lr, r8
 8003ad4:	b500      	push	{lr}
 8003ad6:	b09a      	sub	sp, #104	@ 0x68
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	61f8      	str	r0, [r7, #28]
 8003adc:	0008      	movs	r0, r1
 8003ade:	0011      	movs	r1, r2
 8003ae0:	261a      	movs	r6, #26
 8003ae2:	19bb      	adds	r3, r7, r6
 8003ae4:	1c02      	adds	r2, r0, #0
 8003ae6:	801a      	strh	r2, [r3, #0]
 8003ae8:	2319      	movs	r3, #25
 8003aea:	18fb      	adds	r3, r7, r3
 8003aec:	1c0a      	adds	r2, r1, #0
 8003aee:	701a      	strb	r2, [r3, #0]
 8003af0:	466b      	mov	r3, sp
 8003af2:	4698      	mov	r8, r3
  char tempBuf[len+1];
 8003af4:	19bb      	adds	r3, r7, r6
 8003af6:	881b      	ldrh	r3, [r3, #0]
 8003af8:	3301      	adds	r3, #1
 8003afa:	1e5a      	subs	r2, r3, #1
 8003afc:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003afe:	001a      	movs	r2, r3
 8003b00:	60ba      	str	r2, [r7, #8]
 8003b02:	2200      	movs	r2, #0
 8003b04:	60fa      	str	r2, [r7, #12]
 8003b06:	68b8      	ldr	r0, [r7, #8]
 8003b08:	68f9      	ldr	r1, [r7, #12]
 8003b0a:	0002      	movs	r2, r0
 8003b0c:	0f52      	lsrs	r2, r2, #29
 8003b0e:	000e      	movs	r6, r1
 8003b10:	00f6      	lsls	r6, r6, #3
 8003b12:	617e      	str	r6, [r7, #20]
 8003b14:	697e      	ldr	r6, [r7, #20]
 8003b16:	4316      	orrs	r6, r2
 8003b18:	617e      	str	r6, [r7, #20]
 8003b1a:	0002      	movs	r2, r0
 8003b1c:	00d2      	lsls	r2, r2, #3
 8003b1e:	613a      	str	r2, [r7, #16]
 8003b20:	001a      	movs	r2, r3
 8003b22:	603a      	str	r2, [r7, #0]
 8003b24:	2200      	movs	r2, #0
 8003b26:	607a      	str	r2, [r7, #4]
 8003b28:	6838      	ldr	r0, [r7, #0]
 8003b2a:	6879      	ldr	r1, [r7, #4]
 8003b2c:	0002      	movs	r2, r0
 8003b2e:	0f52      	lsrs	r2, r2, #29
 8003b30:	000e      	movs	r6, r1
 8003b32:	00f5      	lsls	r5, r6, #3
 8003b34:	4315      	orrs	r5, r2
 8003b36:	0002      	movs	r2, r0
 8003b38:	00d4      	lsls	r4, r2, #3
 8003b3a:	3307      	adds	r3, #7
 8003b3c:	08db      	lsrs	r3, r3, #3
 8003b3e:	00db      	lsls	r3, r3, #3
 8003b40:	466a      	mov	r2, sp
 8003b42:	1ad3      	subs	r3, r2, r3
 8003b44:	469d      	mov	sp, r3
 8003b46:	466b      	mov	r3, sp
 8003b48:	3300      	adds	r3, #0
 8003b4a:	65bb      	str	r3, [r7, #88]	@ 0x58
  char status = RECEIVE_STATUS_INCOMPLETE;
 8003b4c:	234f      	movs	r3, #79	@ 0x4f
 8003b4e:	2118      	movs	r1, #24
 8003b50:	185b      	adds	r3, r3, r1
 8003b52:	19db      	adds	r3, r3, r7
 8003b54:	2203      	movs	r2, #3
 8003b56:	701a      	strb	r2, [r3, #0]
  for(uint16_t i=0; i<len; i++){
 8003b58:	234c      	movs	r3, #76	@ 0x4c
 8003b5a:	185b      	adds	r3, r3, r1
 8003b5c:	19db      	adds	r3, r3, r7
 8003b5e:	2200      	movs	r2, #0
 8003b60:	801a      	strh	r2, [r3, #0]
 8003b62:	e013      	b.n	8003b8c <ParseBuffer+0xbc>
    tempBuf[i] = (char)buffer[i];
 8003b64:	204c      	movs	r0, #76	@ 0x4c
 8003b66:	2418      	movs	r4, #24
 8003b68:	1903      	adds	r3, r0, r4
 8003b6a:	19db      	adds	r3, r3, r7
 8003b6c:	881b      	ldrh	r3, [r3, #0]
 8003b6e:	69fa      	ldr	r2, [r7, #28]
 8003b70:	18d2      	adds	r2, r2, r3
 8003b72:	1903      	adds	r3, r0, r4
 8003b74:	19db      	adds	r3, r3, r7
 8003b76:	881b      	ldrh	r3, [r3, #0]
 8003b78:	7811      	ldrb	r1, [r2, #0]
 8003b7a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003b7c:	54d1      	strb	r1, [r2, r3]
  for(uint16_t i=0; i<len; i++){
 8003b7e:	1903      	adds	r3, r0, r4
 8003b80:	19db      	adds	r3, r3, r7
 8003b82:	881a      	ldrh	r2, [r3, #0]
 8003b84:	1903      	adds	r3, r0, r4
 8003b86:	19db      	adds	r3, r3, r7
 8003b88:	3201      	adds	r2, #1
 8003b8a:	801a      	strh	r2, [r3, #0]
 8003b8c:	234c      	movs	r3, #76	@ 0x4c
 8003b8e:	2018      	movs	r0, #24
 8003b90:	181b      	adds	r3, r3, r0
 8003b92:	19da      	adds	r2, r3, r7
 8003b94:	211a      	movs	r1, #26
 8003b96:	187b      	adds	r3, r7, r1
 8003b98:	8812      	ldrh	r2, [r2, #0]
 8003b9a:	881b      	ldrh	r3, [r3, #0]
 8003b9c:	429a      	cmp	r2, r3
 8003b9e:	d3e1      	bcc.n	8003b64 <ParseBuffer+0x94>
  }
  tempBuf[len] = '\0';
 8003ba0:	187b      	adds	r3, r7, r1
 8003ba2:	881b      	ldrh	r3, [r3, #0]
 8003ba4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003ba6:	2100      	movs	r1, #0
 8003ba8:	54d1      	strb	r1, [r2, r3]
  char TestChar = 'N';
 8003baa:	233f      	movs	r3, #63	@ 0x3f
 8003bac:	0006      	movs	r6, r0
 8003bae:	199b      	adds	r3, r3, r6
 8003bb0:	19db      	adds	r3, r3, r7
 8003bb2:	224e      	movs	r2, #78	@ 0x4e
 8003bb4:	701a      	strb	r2, [r3, #0]
  char * ParsePoint;
  char * ParsePoint2;
  char * ParsePoint3;
  const char OK[] = AT_RESPONSE_OK;
 8003bb6:	2530      	movs	r5, #48	@ 0x30
 8003bb8:	19ab      	adds	r3, r5, r6
 8003bba:	19db      	adds	r3, r3, r7
 8003bbc:	4a60      	ldr	r2, [pc, #384]	@ (8003d40 <ParseBuffer+0x270>)
 8003bbe:	8811      	ldrh	r1, [r2, #0]
 8003bc0:	8019      	strh	r1, [r3, #0]
 8003bc2:	7892      	ldrb	r2, [r2, #2]
 8003bc4:	709a      	strb	r2, [r3, #2]
  const char ERROR[] = AT_RESPONSE_ERROR;
 8003bc6:	2328      	movs	r3, #40	@ 0x28
 8003bc8:	199b      	adds	r3, r3, r6
 8003bca:	19db      	adds	r3, r3, r7
 8003bcc:	4a5d      	ldr	r2, [pc, #372]	@ (8003d44 <ParseBuffer+0x274>)
 8003bce:	6811      	ldr	r1, [r2, #0]
 8003bd0:	6019      	str	r1, [r3, #0]
 8003bd2:	8892      	ldrh	r2, [r2, #4]
 8003bd4:	809a      	strh	r2, [r3, #4]
  const char ready[] = AT_RESPONSE_READY;
 8003bd6:	2320      	movs	r3, #32
 8003bd8:	199b      	adds	r3, r3, r6
 8003bda:	19db      	adds	r3, r3, r7
 8003bdc:	4a5a      	ldr	r2, [pc, #360]	@ (8003d48 <ParseBuffer+0x278>)
 8003bde:	6811      	ldr	r1, [r2, #0]
 8003be0:	6019      	str	r1, [r3, #0]
 8003be2:	8892      	ldrh	r2, [r2, #4]
 8003be4:	809a      	strh	r2, [r3, #4]
  const char start[] = AT_RESPONSE_START;
 8003be6:	231c      	movs	r3, #28
 8003be8:	199b      	adds	r3, r3, r6
 8003bea:	19db      	adds	r3, r3, r7
 8003bec:	223e      	movs	r2, #62	@ 0x3e
 8003bee:	801a      	strh	r2, [r3, #0]
  const char WIFI[] = AT_RESPONSE_WIFI;
 8003bf0:	230c      	movs	r3, #12
 8003bf2:	199b      	adds	r3, r3, r6
 8003bf4:	19db      	adds	r3, r3, r7
 8003bf6:	4a55      	ldr	r2, [pc, #340]	@ (8003d4c <ParseBuffer+0x27c>)
 8003bf8:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003bfa:	c313      	stmia	r3!, {r0, r1, r4}
 8003bfc:	8811      	ldrh	r1, [r2, #0]
 8003bfe:	8019      	strh	r1, [r3, #0]
 8003c00:	7892      	ldrb	r2, [r2, #2]
 8003c02:	709a      	strb	r2, [r3, #2]
  if(expectation == RECEIVE_EXPECTATION_OK){
 8003c04:	2319      	movs	r3, #25
 8003c06:	18fb      	adds	r3, r7, r3
 8003c08:	781b      	ldrb	r3, [r3, #0]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d108      	bne.n	8003c20 <ParseBuffer+0x150>
    ParsePoint = strstr(tempBuf, OK);
 8003c0e:	19ab      	adds	r3, r5, r6
 8003c10:	19da      	adds	r2, r3, r7
 8003c12:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003c14:	0011      	movs	r1, r2
 8003c16:	0018      	movs	r0, r3
 8003c18:	f014 f942 	bl	8017ea0 <strstr>
 8003c1c:	0003      	movs	r3, r0
 8003c1e:	663b      	str	r3, [r7, #96]	@ 0x60
  }
  if(expectation == RECEIVE_EXPECTATION_READY){
 8003c20:	2319      	movs	r3, #25
 8003c22:	18fb      	adds	r3, r7, r3
 8003c24:	781b      	ldrb	r3, [r3, #0]
 8003c26:	2b01      	cmp	r3, #1
 8003c28:	d10a      	bne.n	8003c40 <ParseBuffer+0x170>
    ParsePoint = strstr(tempBuf, ready);
 8003c2a:	2320      	movs	r3, #32
 8003c2c:	2218      	movs	r2, #24
 8003c2e:	189b      	adds	r3, r3, r2
 8003c30:	19da      	adds	r2, r3, r7
 8003c32:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003c34:	0011      	movs	r1, r2
 8003c36:	0018      	movs	r0, r3
 8003c38:	f014 f932 	bl	8017ea0 <strstr>
 8003c3c:	0003      	movs	r3, r0
 8003c3e:	663b      	str	r3, [r7, #96]	@ 0x60
  }
  if(expectation == RECEIVE_EXPECTATION_START){
 8003c40:	2319      	movs	r3, #25
 8003c42:	18fb      	adds	r3, r7, r3
 8003c44:	781b      	ldrb	r3, [r3, #0]
 8003c46:	2b02      	cmp	r3, #2
 8003c48:	d10a      	bne.n	8003c60 <ParseBuffer+0x190>
    ParsePoint = strstr(tempBuf, start);
 8003c4a:	231c      	movs	r3, #28
 8003c4c:	2218      	movs	r2, #24
 8003c4e:	189b      	adds	r3, r3, r2
 8003c50:	19da      	adds	r2, r3, r7
 8003c52:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003c54:	0011      	movs	r1, r2
 8003c56:	0018      	movs	r0, r3
 8003c58:	f014 f922 	bl	8017ea0 <strstr>
 8003c5c:	0003      	movs	r3, r0
 8003c5e:	663b      	str	r3, [r7, #96]	@ 0x60
  }
  ParsePoint2 = strstr(tempBuf, ERROR);
 8003c60:	2328      	movs	r3, #40	@ 0x28
 8003c62:	2418      	movs	r4, #24
 8003c64:	191b      	adds	r3, r3, r4
 8003c66:	19da      	adds	r2, r3, r7
 8003c68:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003c6a:	0011      	movs	r1, r2
 8003c6c:	0018      	movs	r0, r3
 8003c6e:	f014 f917 	bl	8017ea0 <strstr>
 8003c72:	0003      	movs	r3, r0
 8003c74:	653b      	str	r3, [r7, #80]	@ 0x50
  ParsePoint3 = strstr(tempBuf, WIFI);
 8003c76:	230c      	movs	r3, #12
 8003c78:	191b      	adds	r3, r3, r4
 8003c7a:	19da      	adds	r2, r3, r7
 8003c7c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003c7e:	0011      	movs	r1, r2
 8003c80:	0018      	movs	r0, r3
 8003c82:	f014 f90d 	bl	8017ea0 <strstr>
 8003c86:	0003      	movs	r3, r0
 8003c88:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if(len > 1 ){
 8003c8a:	231a      	movs	r3, #26
 8003c8c:	18fb      	adds	r3, r7, r3
 8003c8e:	881b      	ldrh	r3, [r3, #0]
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d948      	bls.n	8003d26 <ParseBuffer+0x256>
    TestChar = *ParsePoint;
 8003c94:	213f      	movs	r1, #63	@ 0x3f
 8003c96:	190b      	adds	r3, r1, r4
 8003c98:	19db      	adds	r3, r3, r7
 8003c9a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003c9c:	7812      	ldrb	r2, [r2, #0]
 8003c9e:	701a      	strb	r2, [r3, #0]
    if(TestChar == 'O'){
 8003ca0:	190b      	adds	r3, r1, r4
 8003ca2:	19db      	adds	r3, r3, r7
 8003ca4:	781b      	ldrb	r3, [r3, #0]
 8003ca6:	2b4f      	cmp	r3, #79	@ 0x4f
 8003ca8:	d104      	bne.n	8003cb4 <ParseBuffer+0x1e4>
      status = RECEIVE_STATUS_OK;
 8003caa:	234f      	movs	r3, #79	@ 0x4f
 8003cac:	191b      	adds	r3, r3, r4
 8003cae:	19db      	adds	r3, r3, r7
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	701a      	strb	r2, [r3, #0]
    }
    if(TestChar == 'r'){
 8003cb4:	233f      	movs	r3, #63	@ 0x3f
 8003cb6:	2218      	movs	r2, #24
 8003cb8:	189b      	adds	r3, r3, r2
 8003cba:	19db      	adds	r3, r3, r7
 8003cbc:	781b      	ldrb	r3, [r3, #0]
 8003cbe:	2b72      	cmp	r3, #114	@ 0x72
 8003cc0:	d104      	bne.n	8003ccc <ParseBuffer+0x1fc>
      status = RECEIVE_STATUS_READY;
 8003cc2:	234f      	movs	r3, #79	@ 0x4f
 8003cc4:	189b      	adds	r3, r3, r2
 8003cc6:	19db      	adds	r3, r3, r7
 8003cc8:	2202      	movs	r2, #2
 8003cca:	701a      	strb	r2, [r3, #0]
    }
    if(TestChar == '>'){
 8003ccc:	233f      	movs	r3, #63	@ 0x3f
 8003cce:	2218      	movs	r2, #24
 8003cd0:	189b      	adds	r3, r3, r2
 8003cd2:	19db      	adds	r3, r3, r7
 8003cd4:	781b      	ldrb	r3, [r3, #0]
 8003cd6:	2b3e      	cmp	r3, #62	@ 0x3e
 8003cd8:	d104      	bne.n	8003ce4 <ParseBuffer+0x214>
      status = RECEIVE_STATUS_START;
 8003cda:	234f      	movs	r3, #79	@ 0x4f
 8003cdc:	189b      	adds	r3, r3, r2
 8003cde:	19db      	adds	r3, r3, r7
 8003ce0:	2205      	movs	r2, #5
 8003ce2:	701a      	strb	r2, [r3, #0]
    }
    TestChar = *ParsePoint2;
 8003ce4:	213f      	movs	r1, #63	@ 0x3f
 8003ce6:	2018      	movs	r0, #24
 8003ce8:	180b      	adds	r3, r1, r0
 8003cea:	19db      	adds	r3, r3, r7
 8003cec:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003cee:	7812      	ldrb	r2, [r2, #0]
 8003cf0:	701a      	strb	r2, [r3, #0]
    if(TestChar == 'E'){
 8003cf2:	0002      	movs	r2, r0
 8003cf4:	188b      	adds	r3, r1, r2
 8003cf6:	19db      	adds	r3, r3, r7
 8003cf8:	781b      	ldrb	r3, [r3, #0]
 8003cfa:	2b45      	cmp	r3, #69	@ 0x45
 8003cfc:	d104      	bne.n	8003d08 <ParseBuffer+0x238>
      status = RECEIVE_STATUS_ERROR;
 8003cfe:	234f      	movs	r3, #79	@ 0x4f
 8003d00:	189b      	adds	r3, r3, r2
 8003d02:	19db      	adds	r3, r3, r7
 8003d04:	2201      	movs	r2, #1
 8003d06:	701a      	strb	r2, [r3, #0]
    }
    TestChar = *ParsePoint3;
 8003d08:	213f      	movs	r1, #63	@ 0x3f
 8003d0a:	2018      	movs	r0, #24
 8003d0c:	180b      	adds	r3, r1, r0
 8003d0e:	19db      	adds	r3, r3, r7
 8003d10:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003d12:	7812      	ldrb	r2, [r2, #0]
 8003d14:	701a      	strb	r2, [r3, #0]
    if(TestChar == 'W'){
 8003d16:	180b      	adds	r3, r1, r0
 8003d18:	19db      	adds	r3, r3, r7
 8003d1a:	781b      	ldrb	r3, [r3, #0]
 8003d1c:	2b57      	cmp	r3, #87	@ 0x57
 8003d1e:	d102      	bne.n	8003d26 <ParseBuffer+0x256>
      ConnectionMade = true;
 8003d20:	4b0b      	ldr	r3, [pc, #44]	@ (8003d50 <ParseBuffer+0x280>)
 8003d22:	2201      	movs	r2, #1
 8003d24:	701a      	strb	r2, [r3, #0]
    }
  }
  return(status);
 8003d26:	234f      	movs	r3, #79	@ 0x4f
 8003d28:	2218      	movs	r2, #24
 8003d2a:	189b      	adds	r3, r3, r2
 8003d2c:	19db      	adds	r3, r3, r7
 8003d2e:	781b      	ldrb	r3, [r3, #0]
 8003d30:	46c5      	mov	sp, r8

}
 8003d32:	0018      	movs	r0, r3
 8003d34:	46bd      	mov	sp, r7
 8003d36:	b01a      	add	sp, #104	@ 0x68
 8003d38:	bc80      	pop	{r7}
 8003d3a:	46b8      	mov	r8, r7
 8003d3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d3e:	46c0      	nop			@ (mov r8, r8)
 8003d40:	0801ae48 	.word	0x0801ae48
 8003d44:	0801ae4c 	.word	0x0801ae4c
 8003d48:	0801ae54 	.word	0x0801ae54
 8003d4c:	0801ae5c 	.word	0x0801ae5c
 8003d50:	2000053b 	.word	0x2000053b

08003d54 <PollAwake>:
 //PollAwake, RFPOWER and CheckRFPower necesarry when comming out of sleep mode.
bool PollAwake(){
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b082      	sub	sp, #8
 8003d58:	af00      	add	r7, sp, #0
  char* atCommand = "ATE0\r\n";
 8003d5a:	4b0d      	ldr	r3, [pc, #52]	@ (8003d90 <PollAwake+0x3c>)
 8003d5c:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	0018      	movs	r0, r3
 8003d62:	f7ff fe6d 	bl	8003a40 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	0018      	movs	r0, r3
 8003d6a:	f7fc f9cd 	bl	8000108 <strlen>
 8003d6e:	0003      	movs	r3, r0
 8003d70:	b29a      	uxth	r2, r3
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	0011      	movs	r1, r2
 8003d76:	0018      	movs	r0, r3
 8003d78:	f7ff fd00 	bl	800377c <ESP_Send>
 8003d7c:	1e03      	subs	r3, r0, #0
 8003d7e:	d001      	beq.n	8003d84 <PollAwake+0x30>
    return true;
 8003d80:	2301      	movs	r3, #1
 8003d82:	e000      	b.n	8003d86 <PollAwake+0x32>
  }
  else{
    return false;
 8003d84:	2300      	movs	r3, #0
  }
}
 8003d86:	0018      	movs	r0, r3
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	b002      	add	sp, #8
 8003d8c:	bd80      	pop	{r7, pc}
 8003d8e:	46c0      	nop			@ (mov r8, r8)
 8003d90:	0801ae6c 	.word	0x0801ae6c

08003d94 <RFPower>:
bool RFPower(){
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b082      	sub	sp, #8
 8003d98:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER=70\r\n";
 8003d9a:	4b0d      	ldr	r3, [pc, #52]	@ (8003dd0 <RFPower+0x3c>)
 8003d9c:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	0018      	movs	r0, r3
 8003da2:	f7ff fe4d 	bl	8003a40 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	0018      	movs	r0, r3
 8003daa:	f7fc f9ad 	bl	8000108 <strlen>
 8003dae:	0003      	movs	r3, r0
 8003db0:	b29a      	uxth	r2, r3
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	0011      	movs	r1, r2
 8003db6:	0018      	movs	r0, r3
 8003db8:	f7ff fce0 	bl	800377c <ESP_Send>
 8003dbc:	1e03      	subs	r3, r0, #0
 8003dbe:	d001      	beq.n	8003dc4 <RFPower+0x30>
    return true;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	e000      	b.n	8003dc6 <RFPower+0x32>
  }
  else{
    return false;
 8003dc4:	2300      	movs	r3, #0
  }
}
 8003dc6:	0018      	movs	r0, r3
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	b002      	add	sp, #8
 8003dcc:	bd80      	pop	{r7, pc}
 8003dce:	46c0      	nop			@ (mov r8, r8)
 8003dd0:	0801ae74 	.word	0x0801ae74

08003dd4 <CheckRFPower>:
bool CheckRFPower(){
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b082      	sub	sp, #8
 8003dd8:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER?\r\n";
 8003dda:	4b0d      	ldr	r3, [pc, #52]	@ (8003e10 <CheckRFPower+0x3c>)
 8003ddc:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	0018      	movs	r0, r3
 8003de2:	f7ff fe2d 	bl	8003a40 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	0018      	movs	r0, r3
 8003dea:	f7fc f98d 	bl	8000108 <strlen>
 8003dee:	0003      	movs	r3, r0
 8003df0:	b29a      	uxth	r2, r3
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	0011      	movs	r1, r2
 8003df6:	0018      	movs	r0, r3
 8003df8:	f7ff fcc0 	bl	800377c <ESP_Send>
 8003dfc:	1e03      	subs	r3, r0, #0
 8003dfe:	d001      	beq.n	8003e04 <CheckRFPower+0x30>
    return true;
 8003e00:	2301      	movs	r3, #1
 8003e02:	e000      	b.n	8003e06 <CheckRFPower+0x32>
  }
  else{
    return false;
 8003e04:	2300      	movs	r3, #0
  }
}
 8003e06:	0018      	movs	r0, r3
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	b002      	add	sp, #8
 8003e0c:	bd80      	pop	{r7, pc}
 8003e0e:	46c0      	nop			@ (mov r8, r8)
 8003e10:	0801ae84 	.word	0x0801ae84

08003e14 <ATRestore>:
//Only necesarry on first init
bool ATRestore(){
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b082      	sub	sp, #8
 8003e18:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RESTORE\r\n";
 8003e1a:	4b0d      	ldr	r3, [pc, #52]	@ (8003e50 <ATRestore+0x3c>)
 8003e1c:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	0018      	movs	r0, r3
 8003e22:	f7ff fe0d 	bl	8003a40 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	0018      	movs	r0, r3
 8003e2a:	f7fc f96d 	bl	8000108 <strlen>
 8003e2e:	0003      	movs	r3, r0
 8003e30:	b29a      	uxth	r2, r3
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	0011      	movs	r1, r2
 8003e36:	0018      	movs	r0, r3
 8003e38:	f7ff fca0 	bl	800377c <ESP_Send>
 8003e3c:	1e03      	subs	r3, r0, #0
 8003e3e:	d001      	beq.n	8003e44 <ATRestore+0x30>
    return true;
 8003e40:	2301      	movs	r3, #1
 8003e42:	e000      	b.n	8003e46 <ATRestore+0x32>
  }
  else{
    return false;
 8003e44:	2300      	movs	r3, #0
  }
}
 8003e46:	0018      	movs	r0, r3
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	b002      	add	sp, #8
 8003e4c:	bd80      	pop	{r7, pc}
 8003e4e:	46c0      	nop			@ (mov r8, r8)
 8003e50:	0801ae94 	.word	0x0801ae94

08003e54 <CWINIT>:
bool CWINIT(){
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b082      	sub	sp, #8
 8003e58:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWINIT=1\r\n";
 8003e5a:	4b0d      	ldr	r3, [pc, #52]	@ (8003e90 <CWINIT+0x3c>)
 8003e5c:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	0018      	movs	r0, r3
 8003e62:	f7ff fded 	bl	8003a40 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	0018      	movs	r0, r3
 8003e6a:	f7fc f94d 	bl	8000108 <strlen>
 8003e6e:	0003      	movs	r3, r0
 8003e70:	b29a      	uxth	r2, r3
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	0011      	movs	r1, r2
 8003e76:	0018      	movs	r0, r3
 8003e78:	f7ff fc80 	bl	800377c <ESP_Send>
 8003e7c:	1e03      	subs	r3, r0, #0
 8003e7e:	d001      	beq.n	8003e84 <CWINIT+0x30>
    return true;
 8003e80:	2301      	movs	r3, #1
 8003e82:	e000      	b.n	8003e86 <CWINIT+0x32>
  }
  else{
    return false;
 8003e84:	2300      	movs	r3, #0
  }
}
 8003e86:	0018      	movs	r0, r3
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	b002      	add	sp, #8
 8003e8c:	bd80      	pop	{r7, pc}
 8003e8e:	46c0      	nop			@ (mov r8, r8)
 8003e90:	0801aea4 	.word	0x0801aea4

08003e94 <CWMODE1>:
bool CWMODE1(){
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b082      	sub	sp, #8
 8003e98:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=1\r\n";
 8003e9a:	4b0d      	ldr	r3, [pc, #52]	@ (8003ed0 <CWMODE1+0x3c>)
 8003e9c:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	0018      	movs	r0, r3
 8003ea2:	f7ff fdcd 	bl	8003a40 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	0018      	movs	r0, r3
 8003eaa:	f7fc f92d 	bl	8000108 <strlen>
 8003eae:	0003      	movs	r3, r0
 8003eb0:	b29a      	uxth	r2, r3
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	0011      	movs	r1, r2
 8003eb6:	0018      	movs	r0, r3
 8003eb8:	f7ff fc60 	bl	800377c <ESP_Send>
 8003ebc:	1e03      	subs	r3, r0, #0
 8003ebe:	d001      	beq.n	8003ec4 <CWMODE1+0x30>
    return true;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	e000      	b.n	8003ec6 <CWMODE1+0x32>
  }
  else{
    return false;
 8003ec4:	2300      	movs	r3, #0
  }
}
 8003ec6:	0018      	movs	r0, r3
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	b002      	add	sp, #8
 8003ecc:	bd80      	pop	{r7, pc}
 8003ece:	46c0      	nop			@ (mov r8, r8)
 8003ed0:	0801aeb4 	.word	0x0801aeb4

08003ed4 <CWMODE2>:
bool CWMODE2(){
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b082      	sub	sp, #8
 8003ed8:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=2\r\n";
 8003eda:	4b0d      	ldr	r3, [pc, #52]	@ (8003f10 <CWMODE2+0x3c>)
 8003edc:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	0018      	movs	r0, r3
 8003ee2:	f7ff fdad 	bl	8003a40 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	0018      	movs	r0, r3
 8003eea:	f7fc f90d 	bl	8000108 <strlen>
 8003eee:	0003      	movs	r3, r0
 8003ef0:	b29a      	uxth	r2, r3
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	0011      	movs	r1, r2
 8003ef6:	0018      	movs	r0, r3
 8003ef8:	f7ff fc40 	bl	800377c <ESP_Send>
 8003efc:	1e03      	subs	r3, r0, #0
 8003efe:	d001      	beq.n	8003f04 <CWMODE2+0x30>
    return true;
 8003f00:	2301      	movs	r3, #1
 8003f02:	e000      	b.n	8003f06 <CWMODE2+0x32>
  }
  else{
    return false;
 8003f04:	2300      	movs	r3, #0
  }
}
 8003f06:	0018      	movs	r0, r3
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	b002      	add	sp, #8
 8003f0c:	bd80      	pop	{r7, pc}
 8003f0e:	46c0      	nop			@ (mov r8, r8)
 8003f10:	0801aec4 	.word	0x0801aec4

08003f14 <CWAUTOCONN>:
bool CWAUTOCONN(){
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b082      	sub	sp, #8
 8003f18:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWAUTOCONN=1\r\n";
 8003f1a:	4b0d      	ldr	r3, [pc, #52]	@ (8003f50 <CWAUTOCONN+0x3c>)
 8003f1c:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	0018      	movs	r0, r3
 8003f22:	f7ff fd8d 	bl	8003a40 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	0018      	movs	r0, r3
 8003f2a:	f7fc f8ed 	bl	8000108 <strlen>
 8003f2e:	0003      	movs	r3, r0
 8003f30:	b29a      	uxth	r2, r3
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	0011      	movs	r1, r2
 8003f36:	0018      	movs	r0, r3
 8003f38:	f7ff fc20 	bl	800377c <ESP_Send>
 8003f3c:	1e03      	subs	r3, r0, #0
 8003f3e:	d001      	beq.n	8003f44 <CWAUTOCONN+0x30>
    return true;
 8003f40:	2301      	movs	r3, #1
 8003f42:	e000      	b.n	8003f46 <CWAUTOCONN+0x32>
  }
  else{
    return false;
 8003f44:	2300      	movs	r3, #0
  }
}
 8003f46:	0018      	movs	r0, r3
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	b002      	add	sp, #8
 8003f4c:	bd80      	pop	{r7, pc}
 8003f4e:	46c0      	nop			@ (mov r8, r8)
 8003f50:	0801aed4 	.word	0x0801aed4

08003f54 <CWJAP>:
bool CWJAP(){
 8003f54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f56:	46c6      	mov	lr, r8
 8003f58:	b500      	push	{lr}
 8003f5a:	b0a2      	sub	sp, #136	@ 0x88
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	466b      	mov	r3, sp
 8003f60:	4698      	mov	r8, r3
  char atCommandBuff[100];
  memset(atCommandBuff, '\0', 100);
 8003f62:	2618      	movs	r6, #24
 8003f64:	19bb      	adds	r3, r7, r6
 8003f66:	2264      	movs	r2, #100	@ 0x64
 8003f68:	2100      	movs	r1, #0
 8003f6a:	0018      	movs	r0, r3
 8003f6c:	f013 ff6e 	bl	8017e4c <memset>
  sprintf(atCommandBuff, "AT+CWJAP=\"%s\",\"%s\"\r\n", SSIDBeurs, PasswordBeurs);
 8003f70:	4b35      	ldr	r3, [pc, #212]	@ (8004048 <CWJAP+0xf4>)
 8003f72:	4a36      	ldr	r2, [pc, #216]	@ (800404c <CWJAP+0xf8>)
 8003f74:	4936      	ldr	r1, [pc, #216]	@ (8004050 <CWJAP+0xfc>)
 8003f76:	19b8      	adds	r0, r7, r6
 8003f78:	f013 fec4 	bl	8017d04 <siprintf>
  uint8_t len = strlen(atCommandBuff);
 8003f7c:	19bb      	adds	r3, r7, r6
 8003f7e:	0018      	movs	r0, r3
 8003f80:	f7fc f8c2 	bl	8000108 <strlen>
 8003f84:	0002      	movs	r2, r0
 8003f86:	216f      	movs	r1, #111	@ 0x6f
 8003f88:	0030      	movs	r0, r6
 8003f8a:	180b      	adds	r3, r1, r0
 8003f8c:	19db      	adds	r3, r3, r7
 8003f8e:	701a      	strb	r2, [r3, #0]
  char atCommand[len+1];
 8003f90:	180b      	adds	r3, r1, r0
 8003f92:	19db      	adds	r3, r3, r7
 8003f94:	781b      	ldrb	r3, [r3, #0]
 8003f96:	3301      	adds	r3, #1
 8003f98:	1e5a      	subs	r2, r3, #1
 8003f9a:	2180      	movs	r1, #128	@ 0x80
 8003f9c:	1879      	adds	r1, r7, r1
 8003f9e:	600a      	str	r2, [r1, #0]
 8003fa0:	001a      	movs	r2, r3
 8003fa2:	60ba      	str	r2, [r7, #8]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	60fa      	str	r2, [r7, #12]
 8003fa8:	68b8      	ldr	r0, [r7, #8]
 8003faa:	68f9      	ldr	r1, [r7, #12]
 8003fac:	0002      	movs	r2, r0
 8003fae:	0f52      	lsrs	r2, r2, #29
 8003fb0:	000e      	movs	r6, r1
 8003fb2:	00f6      	lsls	r6, r6, #3
 8003fb4:	617e      	str	r6, [r7, #20]
 8003fb6:	697e      	ldr	r6, [r7, #20]
 8003fb8:	4316      	orrs	r6, r2
 8003fba:	617e      	str	r6, [r7, #20]
 8003fbc:	0002      	movs	r2, r0
 8003fbe:	00d2      	lsls	r2, r2, #3
 8003fc0:	613a      	str	r2, [r7, #16]
 8003fc2:	001a      	movs	r2, r3
 8003fc4:	603a      	str	r2, [r7, #0]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	607a      	str	r2, [r7, #4]
 8003fca:	6838      	ldr	r0, [r7, #0]
 8003fcc:	6879      	ldr	r1, [r7, #4]
 8003fce:	0002      	movs	r2, r0
 8003fd0:	0f52      	lsrs	r2, r2, #29
 8003fd2:	000e      	movs	r6, r1
 8003fd4:	00f5      	lsls	r5, r6, #3
 8003fd6:	4315      	orrs	r5, r2
 8003fd8:	0002      	movs	r2, r0
 8003fda:	00d4      	lsls	r4, r2, #3
 8003fdc:	3307      	adds	r3, #7
 8003fde:	08db      	lsrs	r3, r3, #3
 8003fe0:	00db      	lsls	r3, r3, #3
 8003fe2:	466a      	mov	r2, sp
 8003fe4:	1ad3      	subs	r3, r2, r3
 8003fe6:	469d      	mov	sp, r3
 8003fe8:	466b      	mov	r3, sp
 8003fea:	3300      	adds	r3, #0
 8003fec:	67fb      	str	r3, [r7, #124]	@ 0x7c
  memset(atCommand, '\0', len+1);
 8003fee:	246f      	movs	r4, #111	@ 0x6f
 8003ff0:	2518      	movs	r5, #24
 8003ff2:	1963      	adds	r3, r4, r5
 8003ff4:	19db      	adds	r3, r3, r7
 8003ff6:	781b      	ldrb	r3, [r3, #0]
 8003ff8:	3301      	adds	r3, #1
 8003ffa:	001a      	movs	r2, r3
 8003ffc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003ffe:	2100      	movs	r1, #0
 8004000:	0018      	movs	r0, r3
 8004002:	f013 ff23 	bl	8017e4c <memset>
  strncpy(atCommand, atCommandBuff, len);
 8004006:	1963      	adds	r3, r4, r5
 8004008:	19db      	adds	r3, r3, r7
 800400a:	781a      	ldrb	r2, [r3, #0]
 800400c:	1979      	adds	r1, r7, r5
 800400e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004010:	0018      	movs	r0, r3
 8004012:	f013 ff31 	bl	8017e78 <strncpy>
  SetCommandBuffer(atCommand);
 8004016:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004018:	0018      	movs	r0, r3
 800401a:	f7ff fd11 	bl	8003a40 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, len)) {
 800401e:	1963      	adds	r3, r4, r5
 8004020:	19db      	adds	r3, r3, r7
 8004022:	781b      	ldrb	r3, [r3, #0]
 8004024:	b29a      	uxth	r2, r3
 8004026:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004028:	0011      	movs	r1, r2
 800402a:	0018      	movs	r0, r3
 800402c:	f7ff fba6 	bl	800377c <ESP_Send>
 8004030:	1e03      	subs	r3, r0, #0
 8004032:	d001      	beq.n	8004038 <CWJAP+0xe4>
    return true;
 8004034:	2301      	movs	r3, #1
 8004036:	e000      	b.n	800403a <CWJAP+0xe6>
  }
  else{
    return false;
 8004038:	2300      	movs	r3, #0
 800403a:	46c5      	mov	sp, r8
  }
}
 800403c:	0018      	movs	r0, r3
 800403e:	46bd      	mov	sp, r7
 8004040:	b022      	add	sp, #136	@ 0x88
 8004042:	bc80      	pop	{r7}
 8004044:	46b8      	mov	r8, r7
 8004046:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004048:	0801b80c 	.word	0x0801b80c
 800404c:	0801b800 	.word	0x0801b800
 8004050:	0801aee8 	.word	0x0801aee8

08004054 <CWMODE3>:
bool CWMODE3(){
 8004054:	b580      	push	{r7, lr}
 8004056:	b082      	sub	sp, #8
 8004058:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=3\r\n";
 800405a:	4b0d      	ldr	r3, [pc, #52]	@ (8004090 <CWMODE3+0x3c>)
 800405c:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	0018      	movs	r0, r3
 8004062:	f7ff fced 	bl	8003a40 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	0018      	movs	r0, r3
 800406a:	f7fc f84d 	bl	8000108 <strlen>
 800406e:	0003      	movs	r3, r0
 8004070:	b29a      	uxth	r2, r3
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	0011      	movs	r1, r2
 8004076:	0018      	movs	r0, r3
 8004078:	f7ff fb80 	bl	800377c <ESP_Send>
 800407c:	1e03      	subs	r3, r0, #0
 800407e:	d001      	beq.n	8004084 <CWMODE3+0x30>
    return true;
 8004080:	2301      	movs	r3, #1
 8004082:	e000      	b.n	8004086 <CWMODE3+0x32>
  }
  else{
    return false;
 8004084:	2300      	movs	r3, #0
  }
}
 8004086:	0018      	movs	r0, r3
 8004088:	46bd      	mov	sp, r7
 800408a:	b002      	add	sp, #8
 800408c:	bd80      	pop	{r7, pc}
 800408e:	46c0      	nop			@ (mov r8, r8)
 8004090:	0801af00 	.word	0x0801af00

08004094 <CWSAP>:
bool CWSAP(){
 8004094:	b580      	push	{r7, lr}
 8004096:	b082      	sub	sp, #8
 8004098:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWSAP=\"WOTS_Config\",\"\",11,0,1\r\n";
 800409a:	4b0d      	ldr	r3, [pc, #52]	@ (80040d0 <CWSAP+0x3c>)
 800409c:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	0018      	movs	r0, r3
 80040a2:	f7ff fccd 	bl	8003a40 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	0018      	movs	r0, r3
 80040aa:	f7fc f82d 	bl	8000108 <strlen>
 80040ae:	0003      	movs	r3, r0
 80040b0:	b29a      	uxth	r2, r3
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	0011      	movs	r1, r2
 80040b6:	0018      	movs	r0, r3
 80040b8:	f7ff fb60 	bl	800377c <ESP_Send>
 80040bc:	1e03      	subs	r3, r0, #0
 80040be:	d001      	beq.n	80040c4 <CWSAP+0x30>
    return true;
 80040c0:	2301      	movs	r3, #1
 80040c2:	e000      	b.n	80040c6 <CWSAP+0x32>
  }
  else{
    return false;
 80040c4:	2300      	movs	r3, #0
  }
}
 80040c6:	0018      	movs	r0, r3
 80040c8:	46bd      	mov	sp, r7
 80040ca:	b002      	add	sp, #8
 80040cc:	bd80      	pop	{r7, pc}
 80040ce:	46c0      	nop			@ (mov r8, r8)
 80040d0:	0801af10 	.word	0x0801af10

080040d4 <CIPMUX>:
bool CIPMUX(){
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b082      	sub	sp, #8
 80040d8:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPMUX=0\r\n";
 80040da:	4b0d      	ldr	r3, [pc, #52]	@ (8004110 <CIPMUX+0x3c>)
 80040dc:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	0018      	movs	r0, r3
 80040e2:	f7ff fcad 	bl	8003a40 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	0018      	movs	r0, r3
 80040ea:	f7fc f80d 	bl	8000108 <strlen>
 80040ee:	0003      	movs	r3, r0
 80040f0:	b29a      	uxth	r2, r3
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	0011      	movs	r1, r2
 80040f6:	0018      	movs	r0, r3
 80040f8:	f7ff fb40 	bl	800377c <ESP_Send>
 80040fc:	1e03      	subs	r3, r0, #0
 80040fe:	d001      	beq.n	8004104 <CIPMUX+0x30>
    return true;
 8004100:	2301      	movs	r3, #1
 8004102:	e000      	b.n	8004106 <CIPMUX+0x32>
  }
  else{
    return false;
 8004104:	2300      	movs	r3, #0
  }
}
 8004106:	0018      	movs	r0, r3
 8004108:	46bd      	mov	sp, r7
 800410a:	b002      	add	sp, #8
 800410c:	bd80      	pop	{r7, pc}
 800410e:	46c0      	nop			@ (mov r8, r8)
 8004110:	0801af34 	.word	0x0801af34

08004114 <WEBSERVER>:
//This command sets the webserver, only necessary for first initialization.
bool WEBSERVER(){
 8004114:	b580      	push	{r7, lr}
 8004116:	b082      	sub	sp, #8
 8004118:	af00      	add	r7, sp, #0
  char* atCommand = "AT+WEBSERVER=1,80,60\r\n";
 800411a:	4b0d      	ldr	r3, [pc, #52]	@ (8004150 <WEBSERVER+0x3c>)
 800411c:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	0018      	movs	r0, r3
 8004122:	f7ff fc8d 	bl	8003a40 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	0018      	movs	r0, r3
 800412a:	f7fb ffed 	bl	8000108 <strlen>
 800412e:	0003      	movs	r3, r0
 8004130:	b29a      	uxth	r2, r3
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	0011      	movs	r1, r2
 8004136:	0018      	movs	r0, r3
 8004138:	f7ff fb20 	bl	800377c <ESP_Send>
 800413c:	1e03      	subs	r3, r0, #0
 800413e:	d001      	beq.n	8004144 <WEBSERVER+0x30>
    return true;
 8004140:	2301      	movs	r3, #1
 8004142:	e000      	b.n	8004146 <WEBSERVER+0x32>
  }
  else{
    return false;
 8004144:	2300      	movs	r3, #0
  }
}
 8004146:	0018      	movs	r0, r3
 8004148:	46bd      	mov	sp, r7
 800414a:	b002      	add	sp, #8
 800414c:	bd80      	pop	{r7, pc}
 800414e:	46c0      	nop			@ (mov r8, r8)
 8004150:	0801af44 	.word	0x0801af44

08004154 <HTTPCPOST>:
//These are the commands necesarry for sending data.
bool HTTPCPOST(){
 8004154:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004156:	46c6      	mov	lr, r8
 8004158:	b500      	push	{lr}
 800415a:	4c47      	ldr	r4, [pc, #284]	@ (8004278 <HTTPCPOST+0x124>)
 800415c:	44a5      	add	sp, r4
 800415e:	af00      	add	r7, sp, #0
 8004160:	466b      	mov	r3, sp
 8004162:	4698      	mov	r8, r3
  char atCommandBuff[600];
  uint16_t length = CreateMessage();
 8004164:	4b45      	ldr	r3, [pc, #276]	@ (800427c <HTTPCPOST+0x128>)
 8004166:	2218      	movs	r2, #24
 8004168:	189b      	adds	r3, r3, r2
 800416a:	19dc      	adds	r4, r3, r7
 800416c:	f7ff fb8a 	bl	8003884 <CreateMessage>
 8004170:	0003      	movs	r3, r0
 8004172:	8023      	strh	r3, [r4, #0]
  sprintf(atCommandBuff, "AT+HTTPCPOST=%s,%d,1,\"content-type: application/json\"\r\n", APIBeurs, length);
 8004174:	4b41      	ldr	r3, [pc, #260]	@ (800427c <HTTPCPOST+0x128>)
 8004176:	2218      	movs	r2, #24
 8004178:	189b      	adds	r3, r3, r2
 800417a:	19db      	adds	r3, r3, r7
 800417c:	881b      	ldrh	r3, [r3, #0]
 800417e:	4a40      	ldr	r2, [pc, #256]	@ (8004280 <HTTPCPOST+0x12c>)
 8004180:	4940      	ldr	r1, [pc, #256]	@ (8004284 <HTTPCPOST+0x130>)
 8004182:	201c      	movs	r0, #28
 8004184:	1838      	adds	r0, r7, r0
 8004186:	f013 fdbd 	bl	8017d04 <siprintf>
  uint8_t len = strlen(atCommandBuff);
 800418a:	231c      	movs	r3, #28
 800418c:	18fb      	adds	r3, r7, r3
 800418e:	0018      	movs	r0, r3
 8004190:	f7fb ffba 	bl	8000108 <strlen>
 8004194:	0002      	movs	r2, r0
 8004196:	4c3c      	ldr	r4, [pc, #240]	@ (8004288 <HTTPCPOST+0x134>)
 8004198:	2318      	movs	r3, #24
 800419a:	18e3      	adds	r3, r4, r3
 800419c:	19db      	adds	r3, r3, r7
 800419e:	701a      	strb	r2, [r3, #0]
  char atCommand[len+1];
 80041a0:	2318      	movs	r3, #24
 80041a2:	18e3      	adds	r3, r4, r3
 80041a4:	19db      	adds	r3, r3, r7
 80041a6:	781b      	ldrb	r3, [r3, #0]
 80041a8:	3301      	adds	r3, #1
 80041aa:	1e5a      	subs	r2, r3, #1
 80041ac:	2198      	movs	r1, #152	@ 0x98
 80041ae:	0089      	lsls	r1, r1, #2
 80041b0:	2018      	movs	r0, #24
 80041b2:	1809      	adds	r1, r1, r0
 80041b4:	19c9      	adds	r1, r1, r7
 80041b6:	600a      	str	r2, [r1, #0]
 80041b8:	001a      	movs	r2, r3
 80041ba:	0015      	movs	r5, r2
 80041bc:	2200      	movs	r2, #0
 80041be:	0016      	movs	r6, r2
 80041c0:	0028      	movs	r0, r5
 80041c2:	0031      	movs	r1, r6
 80041c4:	0002      	movs	r2, r0
 80041c6:	0f52      	lsrs	r2, r2, #29
 80041c8:	000d      	movs	r5, r1
 80041ca:	00ed      	lsls	r5, r5, #3
 80041cc:	617d      	str	r5, [r7, #20]
 80041ce:	697d      	ldr	r5, [r7, #20]
 80041d0:	4315      	orrs	r5, r2
 80041d2:	617d      	str	r5, [r7, #20]
 80041d4:	0002      	movs	r2, r0
 80041d6:	00d2      	lsls	r2, r2, #3
 80041d8:	613a      	str	r2, [r7, #16]
 80041da:	001a      	movs	r2, r3
 80041dc:	603a      	str	r2, [r7, #0]
 80041de:	2200      	movs	r2, #0
 80041e0:	607a      	str	r2, [r7, #4]
 80041e2:	6838      	ldr	r0, [r7, #0]
 80041e4:	6879      	ldr	r1, [r7, #4]
 80041e6:	0002      	movs	r2, r0
 80041e8:	0f52      	lsrs	r2, r2, #29
 80041ea:	000d      	movs	r5, r1
 80041ec:	00ed      	lsls	r5, r5, #3
 80041ee:	60fd      	str	r5, [r7, #12]
 80041f0:	68fd      	ldr	r5, [r7, #12]
 80041f2:	4315      	orrs	r5, r2
 80041f4:	60fd      	str	r5, [r7, #12]
 80041f6:	0002      	movs	r2, r0
 80041f8:	00d2      	lsls	r2, r2, #3
 80041fa:	60ba      	str	r2, [r7, #8]
 80041fc:	3307      	adds	r3, #7
 80041fe:	08db      	lsrs	r3, r3, #3
 8004200:	00db      	lsls	r3, r3, #3
 8004202:	466a      	mov	r2, sp
 8004204:	1ad3      	subs	r3, r2, r3
 8004206:	469d      	mov	sp, r3
 8004208:	466b      	mov	r3, sp
 800420a:	3300      	adds	r3, #0
 800420c:	2597      	movs	r5, #151	@ 0x97
 800420e:	00ad      	lsls	r5, r5, #2
 8004210:	2218      	movs	r2, #24
 8004212:	18aa      	adds	r2, r5, r2
 8004214:	19d2      	adds	r2, r2, r7
 8004216:	6013      	str	r3, [r2, #0]
  strncpy(atCommand, atCommandBuff, len);
 8004218:	2318      	movs	r3, #24
 800421a:	18e3      	adds	r3, r4, r3
 800421c:	19db      	adds	r3, r3, r7
 800421e:	781a      	ldrb	r2, [r3, #0]
 8004220:	231c      	movs	r3, #28
 8004222:	18f9      	adds	r1, r7, r3
 8004224:	2318      	movs	r3, #24
 8004226:	18eb      	adds	r3, r5, r3
 8004228:	19db      	adds	r3, r3, r7
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	0018      	movs	r0, r3
 800422e:	f013 fe23 	bl	8017e78 <strncpy>
  SetCommandBuffer(atCommand);
 8004232:	2318      	movs	r3, #24
 8004234:	18eb      	adds	r3, r5, r3
 8004236:	19db      	adds	r3, r3, r7
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	0018      	movs	r0, r3
 800423c:	f7ff fc00 	bl	8003a40 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, len)){
 8004240:	2318      	movs	r3, #24
 8004242:	18e3      	adds	r3, r4, r3
 8004244:	19db      	adds	r3, r3, r7
 8004246:	781b      	ldrb	r3, [r3, #0]
 8004248:	b29a      	uxth	r2, r3
 800424a:	2318      	movs	r3, #24
 800424c:	18eb      	adds	r3, r5, r3
 800424e:	19db      	adds	r3, r3, r7
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	0011      	movs	r1, r2
 8004254:	0018      	movs	r0, r3
 8004256:	f7ff fa91 	bl	800377c <ESP_Send>
 800425a:	1e03      	subs	r3, r0, #0
 800425c:	d001      	beq.n	8004262 <HTTPCPOST+0x10e>
    return true;
 800425e:	2301      	movs	r3, #1
 8004260:	e000      	b.n	8004264 <HTTPCPOST+0x110>
  }
  else{
    return false;
 8004262:	2300      	movs	r3, #0
 8004264:	46c5      	mov	sp, r8
  }
}
 8004266:	0018      	movs	r0, r3
 8004268:	46bd      	mov	sp, r7
 800426a:	23a0      	movs	r3, #160	@ 0xa0
 800426c:	009b      	lsls	r3, r3, #2
 800426e:	449d      	add	sp, r3
 8004270:	bc80      	pop	{r7}
 8004272:	46b8      	mov	r8, r7
 8004274:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004276:	46c0      	nop			@ (mov r8, r8)
 8004278:	fffffd80 	.word	0xfffffd80
 800427c:	00000266 	.word	0x00000266
 8004280:	20000004 	.word	0x20000004
 8004284:	0801af5c 	.word	0x0801af5c
 8004288:	00000265 	.word	0x00000265

0800428c <SENDDATA>:
bool SENDDATA(){
 800428c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800428e:	46c6      	mov	lr, r8
 8004290:	b500      	push	{lr}
 8004292:	4c4c      	ldr	r4, [pc, #304]	@ (80043c4 <SENDDATA+0x138>)
 8004294:	44a5      	add	sp, r4
 8004296:	af04      	add	r7, sp, #16
 8004298:	466b      	mov	r3, sp
 800429a:	4698      	mov	r8, r3
  char atCommandBuff[656];
  memset(atCommandBuff, '\0', 656);
 800429c:	23a4      	movs	r3, #164	@ 0xa4
 800429e:	009a      	lsls	r2, r3, #2
 80042a0:	261c      	movs	r6, #28
 80042a2:	19bb      	adds	r3, r7, r6
 80042a4:	2100      	movs	r1, #0
 80042a6:	0018      	movs	r0, r3
 80042a8:	f013 fdd0 	bl	8017e4c <memset>
  sprintf(atCommandBuff,"[{%s}, {%s}, {%s}, {%s}, {%s}]", messagePart1, messagePart2, messagePart3, messagePart4, messagePart5);
 80042ac:	4a46      	ldr	r2, [pc, #280]	@ (80043c8 <SENDDATA+0x13c>)
 80042ae:	4947      	ldr	r1, [pc, #284]	@ (80043cc <SENDDATA+0x140>)
 80042b0:	4847      	ldr	r0, [pc, #284]	@ (80043d0 <SENDDATA+0x144>)
 80042b2:	19be      	adds	r6, r7, r6
 80042b4:	4b47      	ldr	r3, [pc, #284]	@ (80043d4 <SENDDATA+0x148>)
 80042b6:	9302      	str	r3, [sp, #8]
 80042b8:	4b47      	ldr	r3, [pc, #284]	@ (80043d8 <SENDDATA+0x14c>)
 80042ba:	9301      	str	r3, [sp, #4]
 80042bc:	4b47      	ldr	r3, [pc, #284]	@ (80043dc <SENDDATA+0x150>)
 80042be:	9300      	str	r3, [sp, #0]
 80042c0:	0013      	movs	r3, r2
 80042c2:	000a      	movs	r2, r1
 80042c4:	0001      	movs	r1, r0
 80042c6:	0030      	movs	r0, r6
 80042c8:	f013 fd1c 	bl	8017d04 <siprintf>
  uint16_t len = strlen(atCommandBuff);
 80042cc:	231c      	movs	r3, #28
 80042ce:	18fb      	adds	r3, r7, r3
 80042d0:	0018      	movs	r0, r3
 80042d2:	f7fb ff19 	bl	8000108 <strlen>
 80042d6:	0002      	movs	r2, r0
 80042d8:	4e41      	ldr	r6, [pc, #260]	@ (80043e0 <SENDDATA+0x154>)
 80042da:	2018      	movs	r0, #24
 80042dc:	1831      	adds	r1, r6, r0
 80042de:	19cb      	adds	r3, r1, r7
 80042e0:	801a      	strh	r2, [r3, #0]
  char atCommand[len+1];
 80042e2:	1832      	adds	r2, r6, r0
 80042e4:	19d3      	adds	r3, r2, r7
 80042e6:	881b      	ldrh	r3, [r3, #0]
 80042e8:	3301      	adds	r3, #1
 80042ea:	1e5a      	subs	r2, r3, #1
 80042ec:	21a6      	movs	r1, #166	@ 0xa6
 80042ee:	0089      	lsls	r1, r1, #2
 80042f0:	1809      	adds	r1, r1, r0
 80042f2:	19c9      	adds	r1, r1, r7
 80042f4:	600a      	str	r2, [r1, #0]
 80042f6:	001a      	movs	r2, r3
 80042f8:	60ba      	str	r2, [r7, #8]
 80042fa:	2200      	movs	r2, #0
 80042fc:	60fa      	str	r2, [r7, #12]
 80042fe:	68b8      	ldr	r0, [r7, #8]
 8004300:	68f9      	ldr	r1, [r7, #12]
 8004302:	0002      	movs	r2, r0
 8004304:	0f52      	lsrs	r2, r2, #29
 8004306:	000e      	movs	r6, r1
 8004308:	00f6      	lsls	r6, r6, #3
 800430a:	617e      	str	r6, [r7, #20]
 800430c:	697e      	ldr	r6, [r7, #20]
 800430e:	4316      	orrs	r6, r2
 8004310:	617e      	str	r6, [r7, #20]
 8004312:	0002      	movs	r2, r0
 8004314:	00d2      	lsls	r2, r2, #3
 8004316:	613a      	str	r2, [r7, #16]
 8004318:	001a      	movs	r2, r3
 800431a:	603a      	str	r2, [r7, #0]
 800431c:	2200      	movs	r2, #0
 800431e:	607a      	str	r2, [r7, #4]
 8004320:	6838      	ldr	r0, [r7, #0]
 8004322:	6879      	ldr	r1, [r7, #4]
 8004324:	0002      	movs	r2, r0
 8004326:	0f52      	lsrs	r2, r2, #29
 8004328:	000e      	movs	r6, r1
 800432a:	00f5      	lsls	r5, r6, #3
 800432c:	4315      	orrs	r5, r2
 800432e:	0002      	movs	r2, r0
 8004330:	00d4      	lsls	r4, r2, #3
 8004332:	3307      	adds	r3, #7
 8004334:	08db      	lsrs	r3, r3, #3
 8004336:	00db      	lsls	r3, r3, #3
 8004338:	466a      	mov	r2, sp
 800433a:	1ad3      	subs	r3, r2, r3
 800433c:	469d      	mov	sp, r3
 800433e:	ab04      	add	r3, sp, #16
 8004340:	3300      	adds	r3, #0
 8004342:	21a5      	movs	r1, #165	@ 0xa5
 8004344:	0089      	lsls	r1, r1, #2
 8004346:	2018      	movs	r0, #24
 8004348:	180a      	adds	r2, r1, r0
 800434a:	19d2      	adds	r2, r2, r7
 800434c:	6013      	str	r3, [r2, #0]
  memset(atCommand, '\0', len+1);
 800434e:	4e24      	ldr	r6, [pc, #144]	@ (80043e0 <SENDDATA+0x154>)
 8004350:	1832      	adds	r2, r6, r0
 8004352:	19d3      	adds	r3, r2, r7
 8004354:	881b      	ldrh	r3, [r3, #0]
 8004356:	3301      	adds	r3, #1
 8004358:	001a      	movs	r2, r3
 800435a:	000c      	movs	r4, r1
 800435c:	0005      	movs	r5, r0
 800435e:	1821      	adds	r1, r4, r0
 8004360:	19cb      	adds	r3, r1, r7
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	2100      	movs	r1, #0
 8004366:	0018      	movs	r0, r3
 8004368:	f013 fd70 	bl	8017e4c <memset>
  strncpy(atCommand, atCommandBuff, len);
 800436c:	0028      	movs	r0, r5
 800436e:	1832      	adds	r2, r6, r0
 8004370:	19d3      	adds	r3, r2, r7
 8004372:	881a      	ldrh	r2, [r3, #0]
 8004374:	231c      	movs	r3, #28
 8004376:	18f9      	adds	r1, r7, r3
 8004378:	0005      	movs	r5, r0
 800437a:	1963      	adds	r3, r4, r5
 800437c:	19db      	adds	r3, r3, r7
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	0018      	movs	r0, r3
 8004382:	f013 fd79 	bl	8017e78 <strncpy>
  SetCommandBuffer(atCommand);
 8004386:	1963      	adds	r3, r4, r5
 8004388:	19db      	adds	r3, r3, r7
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	0018      	movs	r0, r3
 800438e:	f7ff fb57 	bl	8003a40 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, len)) {
 8004392:	0028      	movs	r0, r5
 8004394:	1833      	adds	r3, r6, r0
 8004396:	19db      	adds	r3, r3, r7
 8004398:	881a      	ldrh	r2, [r3, #0]
 800439a:	1823      	adds	r3, r4, r0
 800439c:	19db      	adds	r3, r3, r7
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	0011      	movs	r1, r2
 80043a2:	0018      	movs	r0, r3
 80043a4:	f7ff f9ea 	bl	800377c <ESP_Send>
 80043a8:	1e03      	subs	r3, r0, #0
 80043aa:	d001      	beq.n	80043b0 <SENDDATA+0x124>
    return true;
 80043ac:	2301      	movs	r3, #1
 80043ae:	e000      	b.n	80043b2 <SENDDATA+0x126>
  }
  else{
    return false;
 80043b0:	2300      	movs	r3, #0
 80043b2:	46c5      	mov	sp, r8
  }
}
 80043b4:	0018      	movs	r0, r3
 80043b6:	46bd      	mov	sp, r7
 80043b8:	23ae      	movs	r3, #174	@ 0xae
 80043ba:	009b      	lsls	r3, r3, #2
 80043bc:	449d      	add	sp, r3
 80043be:	bc80      	pop	{r7}
 80043c0:	46b8      	mov	r8, r7
 80043c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80043c4:	fffffd38 	.word	0xfffffd38
 80043c8:	200005e0 	.word	0x200005e0
 80043cc:	20000560 	.word	0x20000560
 80043d0:	0801af94 	.word	0x0801af94
 80043d4:	20000760 	.word	0x20000760
 80043d8:	200006e0 	.word	0x200006e0
 80043dc:	20000660 	.word	0x20000660
 80043e0:	0000029e 	.word	0x0000029e

080043e4 <SLEEP>:
bool SLEEP(){
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b082      	sub	sp, #8
 80043e8:	af00      	add	r7, sp, #0
  char* atCommand = "AT+GSLP=30000\r\n";
 80043ea:	4b0d      	ldr	r3, [pc, #52]	@ (8004420 <SLEEP+0x3c>)
 80043ec:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	0018      	movs	r0, r3
 80043f2:	f7ff fb25 	bl	8003a40 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	0018      	movs	r0, r3
 80043fa:	f7fb fe85 	bl	8000108 <strlen>
 80043fe:	0003      	movs	r3, r0
 8004400:	b29a      	uxth	r2, r3
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	0011      	movs	r1, r2
 8004406:	0018      	movs	r0, r3
 8004408:	f7ff f9b8 	bl	800377c <ESP_Send>
 800440c:	1e03      	subs	r3, r0, #0
 800440e:	d001      	beq.n	8004414 <SLEEP+0x30>
    return true;
 8004410:	2301      	movs	r3, #1
 8004412:	e000      	b.n	8004416 <SLEEP+0x32>
  }
  else{
    return false;
 8004414:	2300      	movs	r3, #0
  }
}
 8004416:	0018      	movs	r0, r3
 8004418:	46bd      	mov	sp, r7
 800441a:	b002      	add	sp, #8
 800441c:	bd80      	pop	{r7, pc}
 800441e:	46c0      	nop			@ (mov r8, r8)
 8004420:	0801afb4 	.word	0x0801afb4

08004424 <DMA_ProcessBuffer>:

uint8_t DMA_ProcessBuffer(uint8_t expectation) {
 8004424:	b5b0      	push	{r4, r5, r7, lr}
 8004426:	b084      	sub	sp, #16
 8004428:	af00      	add	r7, sp, #0
 800442a:	0002      	movs	r2, r0
 800442c:	1dfb      	adds	r3, r7, #7
 800442e:	701a      	strb	r2, [r3, #0]
    uint8_t pos = ESP_MAX_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(&hdma_usart4_rx);
 8004430:	4b50      	ldr	r3, [pc, #320]	@ (8004574 <DMA_ProcessBuffer+0x150>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	b2da      	uxtb	r2, r3
 8004438:	210e      	movs	r1, #14
 800443a:	187b      	adds	r3, r7, r1
 800443c:	43d2      	mvns	r2, r2
 800443e:	701a      	strb	r2, [r3, #0]
    uint8_t status = RECEIVE_STATUS_INCOMPLETE;
 8004440:	200f      	movs	r0, #15
 8004442:	183b      	adds	r3, r7, r0
 8004444:	2203      	movs	r2, #3
 8004446:	701a      	strb	r2, [r3, #0]
    if(pos > ESP_MAX_BUFFER_SIZE) {
      pos = ESP_MAX_BUFFER_SIZE;
    }
    if(pos == OldPos){
 8004448:	4b4b      	ldr	r3, [pc, #300]	@ (8004578 <DMA_ProcessBuffer+0x154>)
 800444a:	781b      	ldrb	r3, [r3, #0]
 800444c:	b2db      	uxtb	r3, r3
 800444e:	187a      	adds	r2, r7, r1
 8004450:	7812      	ldrb	r2, [r2, #0]
 8004452:	429a      	cmp	r2, r3
 8004454:	d131      	bne.n	80044ba <DMA_ProcessBuffer+0x96>
      if(retry >4){
 8004456:	4b49      	ldr	r3, [pc, #292]	@ (800457c <DMA_ProcessBuffer+0x158>)
 8004458:	781b      	ldrb	r3, [r3, #0]
 800445a:	2b04      	cmp	r3, #4
 800445c:	d91b      	bls.n	8004496 <DMA_ProcessBuffer+0x72>
        retry = 0;
 800445e:	4b47      	ldr	r3, [pc, #284]	@ (800457c <DMA_ProcessBuffer+0x158>)
 8004460:	2200      	movs	r2, #0
 8004462:	701a      	strb	r2, [r3, #0]
        //EspState = ESP_STATE_SEND;
        if(ATCommand == AT_WAKEUP && testRound == true){
 8004464:	4b46      	ldr	r3, [pc, #280]	@ (8004580 <DMA_ProcessBuffer+0x15c>)
 8004466:	781b      	ldrb	r3, [r3, #0]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d106      	bne.n	800447a <DMA_ProcessBuffer+0x56>
 800446c:	4b45      	ldr	r3, [pc, #276]	@ (8004584 <DMA_ProcessBuffer+0x160>)
 800446e:	781b      	ldrb	r3, [r3, #0]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d002      	beq.n	800447a <DMA_ProcessBuffer+0x56>
          status = RECEIVE_STATUS_UNPROGGED;
 8004474:	183b      	adds	r3, r7, r0
 8004476:	2207      	movs	r2, #7
 8004478:	701a      	strb	r2, [r3, #0]
        }
        if(ATCommand == AT_CWJAP){
 800447a:	4b41      	ldr	r3, [pc, #260]	@ (8004580 <DMA_ProcessBuffer+0x15c>)
 800447c:	781b      	ldrb	r3, [r3, #0]
 800447e:	2b08      	cmp	r3, #8
 8004480:	d104      	bne.n	800448c <DMA_ProcessBuffer+0x68>
          status = RECEIVE_STATUS_HOME;
 8004482:	230f      	movs	r3, #15
 8004484:	18fb      	adds	r3, r7, r3
 8004486:	2208      	movs	r2, #8
 8004488:	701a      	strb	r2, [r3, #0]
 800448a:	e016      	b.n	80044ba <DMA_ProcessBuffer+0x96>
        }
        else{
          status = RECEIVE_STATUS_TIMEOUT;
 800448c:	230f      	movs	r3, #15
 800448e:	18fb      	adds	r3, r7, r3
 8004490:	2206      	movs	r2, #6
 8004492:	701a      	strb	r2, [r3, #0]
 8004494:	e011      	b.n	80044ba <DMA_ProcessBuffer+0x96>
        }
      }
     else{
       retry ++;
 8004496:	4b39      	ldr	r3, [pc, #228]	@ (800457c <DMA_ProcessBuffer+0x158>)
 8004498:	781b      	ldrb	r3, [r3, #0]
 800449a:	3301      	adds	r3, #1
 800449c:	b2da      	uxtb	r2, r3
 800449e:	4b37      	ldr	r3, [pc, #220]	@ (800457c <DMA_ProcessBuffer+0x158>)
 80044a0:	701a      	strb	r2, [r3, #0]
       ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 80044a2:	f005 fc65 	bl	8009d70 <HAL_GetTick>
 80044a6:	0003      	movs	r3, r0
 80044a8:	33f5      	adds	r3, #245	@ 0xf5
 80044aa:	33ff      	adds	r3, #255	@ 0xff
 80044ac:	001a      	movs	r2, r3
 80044ae:	4b36      	ldr	r3, [pc, #216]	@ (8004588 <DMA_ProcessBuffer+0x164>)
 80044b0:	601a      	str	r2, [r3, #0]
       status = RECEIVE_STATUS_RETRY;
 80044b2:	230f      	movs	r3, #15
 80044b4:	18fb      	adds	r3, r7, r3
 80044b6:	2204      	movs	r2, #4
 80044b8:	701a      	strb	r2, [r3, #0]
      }
    }
    if (pos != OldPos) {
 80044ba:	4b2f      	ldr	r3, [pc, #188]	@ (8004578 <DMA_ProcessBuffer+0x154>)
 80044bc:	781b      	ldrb	r3, [r3, #0]
 80044be:	b2db      	uxtb	r3, r3
 80044c0:	210e      	movs	r1, #14
 80044c2:	187a      	adds	r2, r7, r1
 80044c4:	7812      	ldrb	r2, [r2, #0]
 80044c6:	429a      	cmp	r2, r3
 80044c8:	d048      	beq.n	800455c <DMA_ProcessBuffer+0x138>
      retry = 0;
 80044ca:	4b2c      	ldr	r3, [pc, #176]	@ (800457c <DMA_ProcessBuffer+0x158>)
 80044cc:	2200      	movs	r2, #0
 80044ce:	701a      	strb	r2, [r3, #0]
        if (pos > OldPos) {
 80044d0:	4b29      	ldr	r3, [pc, #164]	@ (8004578 <DMA_ProcessBuffer+0x154>)
 80044d2:	781b      	ldrb	r3, [r3, #0]
 80044d4:	b2db      	uxtb	r3, r3
 80044d6:	187a      	adds	r2, r7, r1
 80044d8:	7812      	ldrb	r2, [r2, #0]
 80044da:	429a      	cmp	r2, r3
 80044dc:	d917      	bls.n	800450e <DMA_ProcessBuffer+0xea>
            // Direct parsing
            status = ParseBuffer(&RxBuffer[OldPos], (pos - OldPos), expectation);
 80044de:	4b26      	ldr	r3, [pc, #152]	@ (8004578 <DMA_ProcessBuffer+0x154>)
 80044e0:	781b      	ldrb	r3, [r3, #0]
 80044e2:	b2db      	uxtb	r3, r3
 80044e4:	001a      	movs	r2, r3
 80044e6:	4b29      	ldr	r3, [pc, #164]	@ (800458c <DMA_ProcessBuffer+0x168>)
 80044e8:	18d0      	adds	r0, r2, r3
 80044ea:	187b      	adds	r3, r7, r1
 80044ec:	781b      	ldrb	r3, [r3, #0]
 80044ee:	b29b      	uxth	r3, r3
 80044f0:	4a21      	ldr	r2, [pc, #132]	@ (8004578 <DMA_ProcessBuffer+0x154>)
 80044f2:	7812      	ldrb	r2, [r2, #0]
 80044f4:	b2d2      	uxtb	r2, r2
 80044f6:	1a9b      	subs	r3, r3, r2
 80044f8:	b299      	uxth	r1, r3
 80044fa:	230f      	movs	r3, #15
 80044fc:	18fc      	adds	r4, r7, r3
 80044fe:	1dfb      	adds	r3, r7, #7
 8004500:	781b      	ldrb	r3, [r3, #0]
 8004502:	001a      	movs	r2, r3
 8004504:	f7ff fae4 	bl	8003ad0 <ParseBuffer>
 8004508:	0003      	movs	r3, r0
 800450a:	7023      	strb	r3, [r4, #0]
 800450c:	e026      	b.n	800455c <DMA_ProcessBuffer+0x138>
              //memset(RxBuffer, 0, ESP_MAX_BUFFER_SIZE);
              //pos = 0;
            }
        } else {
            // Buffer wrap-around
            status = ParseBuffer(&RxBuffer[OldPos], ESP_MAX_BUFFER_SIZE - OldPos, expectation);
 800450e:	4b1a      	ldr	r3, [pc, #104]	@ (8004578 <DMA_ProcessBuffer+0x154>)
 8004510:	781b      	ldrb	r3, [r3, #0]
 8004512:	b2db      	uxtb	r3, r3
 8004514:	001a      	movs	r2, r3
 8004516:	4b1d      	ldr	r3, [pc, #116]	@ (800458c <DMA_ProcessBuffer+0x168>)
 8004518:	18d0      	adds	r0, r2, r3
 800451a:	4b17      	ldr	r3, [pc, #92]	@ (8004578 <DMA_ProcessBuffer+0x154>)
 800451c:	781b      	ldrb	r3, [r3, #0]
 800451e:	b2db      	uxtb	r3, r3
 8004520:	001a      	movs	r2, r3
 8004522:	23ff      	movs	r3, #255	@ 0xff
 8004524:	1a9b      	subs	r3, r3, r2
 8004526:	b299      	uxth	r1, r3
 8004528:	250f      	movs	r5, #15
 800452a:	197c      	adds	r4, r7, r5
 800452c:	1dfb      	adds	r3, r7, #7
 800452e:	781b      	ldrb	r3, [r3, #0]
 8004530:	001a      	movs	r2, r3
 8004532:	f7ff facd 	bl	8003ad0 <ParseBuffer>
 8004536:	0003      	movs	r3, r0
 8004538:	7023      	strb	r3, [r4, #0]
            if (pos > 0) {
 800453a:	220e      	movs	r2, #14
 800453c:	18bb      	adds	r3, r7, r2
 800453e:	781b      	ldrb	r3, [r3, #0]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d00b      	beq.n	800455c <DMA_ProcessBuffer+0x138>
                status = ParseBuffer(&RxBuffer[0], pos, expectation);
 8004544:	18bb      	adds	r3, r7, r2
 8004546:	781b      	ldrb	r3, [r3, #0]
 8004548:	b299      	uxth	r1, r3
 800454a:	197c      	adds	r4, r7, r5
 800454c:	1dfb      	adds	r3, r7, #7
 800454e:	781a      	ldrb	r2, [r3, #0]
 8004550:	4b0e      	ldr	r3, [pc, #56]	@ (800458c <DMA_ProcessBuffer+0x168>)
 8004552:	0018      	movs	r0, r3
 8004554:	f7ff fabc 	bl	8003ad0 <ParseBuffer>
 8004558:	0003      	movs	r3, r0
 800455a:	7023      	strb	r3, [r4, #0]
            }
        }
    }
    OldPos = pos;
 800455c:	4b06      	ldr	r3, [pc, #24]	@ (8004578 <DMA_ProcessBuffer+0x154>)
 800455e:	220e      	movs	r2, #14
 8004560:	18ba      	adds	r2, r7, r2
 8004562:	7812      	ldrb	r2, [r2, #0]
 8004564:	701a      	strb	r2, [r3, #0]
    return status;
 8004566:	230f      	movs	r3, #15
 8004568:	18fb      	adds	r3, r7, r3
 800456a:	781b      	ldrb	r3, [r3, #0]
}
 800456c:	0018      	movs	r0, r3
 800456e:	46bd      	mov	sp, r7
 8004570:	b004      	add	sp, #16
 8004572:	bdb0      	pop	{r4, r5, r7, pc}
 8004574:	20002a74 	.word	0x20002a74
 8004578:	200007eb 	.word	0x200007eb
 800457c:	200007f0 	.word	0x200007f0
 8004580:	200009f6 	.word	0x200009f6
 8004584:	20000000 	.word	0x20000000
 8004588:	200007ec 	.word	0x200007ec
 800458c:	20000438 	.word	0x20000438

08004590 <ATCompare>:

//Compares the received status to the expected status (OK, ready, >).
bool ATCompare(uint8_t AT_Command_Received, uint8_t AT_Command_Expected){
 8004590:	b580      	push	{r7, lr}
 8004592:	b084      	sub	sp, #16
 8004594:	af00      	add	r7, sp, #0
 8004596:	0002      	movs	r2, r0
 8004598:	1dfb      	adds	r3, r7, #7
 800459a:	701a      	strb	r2, [r3, #0]
 800459c:	1dbb      	adds	r3, r7, #6
 800459e:	1c0a      	adds	r2, r1, #0
 80045a0:	701a      	strb	r2, [r3, #0]
  bool value = false;
 80045a2:	210f      	movs	r1, #15
 80045a4:	187b      	adds	r3, r7, r1
 80045a6:	2200      	movs	r2, #0
 80045a8:	701a      	strb	r2, [r3, #0]
  if(AT_Command_Expected == RECEIVE_EXPECTATION_OK){
 80045aa:	1dbb      	adds	r3, r7, #6
 80045ac:	781b      	ldrb	r3, [r3, #0]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d105      	bne.n	80045be <ATCompare+0x2e>
    value = (AT_Command_Received == RECEIVE_STATUS_OK);
 80045b2:	187b      	adds	r3, r7, r1
 80045b4:	1dfa      	adds	r2, r7, #7
 80045b6:	7812      	ldrb	r2, [r2, #0]
 80045b8:	4251      	negs	r1, r2
 80045ba:	414a      	adcs	r2, r1
 80045bc:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_READY){
 80045be:	1dbb      	adds	r3, r7, #6
 80045c0:	781b      	ldrb	r3, [r3, #0]
 80045c2:	2b01      	cmp	r3, #1
 80045c4:	d107      	bne.n	80045d6 <ATCompare+0x46>
    value = (AT_Command_Received == RECEIVE_STATUS_READY);
 80045c6:	230f      	movs	r3, #15
 80045c8:	18fb      	adds	r3, r7, r3
 80045ca:	1dfa      	adds	r2, r7, #7
 80045cc:	7812      	ldrb	r2, [r2, #0]
 80045ce:	3a02      	subs	r2, #2
 80045d0:	4251      	negs	r1, r2
 80045d2:	414a      	adcs	r2, r1
 80045d4:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_START){
 80045d6:	1dbb      	adds	r3, r7, #6
 80045d8:	781b      	ldrb	r3, [r3, #0]
 80045da:	2b02      	cmp	r3, #2
 80045dc:	d107      	bne.n	80045ee <ATCompare+0x5e>
    value = (AT_Command_Received == RECEIVE_STATUS_START);
 80045de:	230f      	movs	r3, #15
 80045e0:	18fb      	adds	r3, r7, r3
 80045e2:	1dfa      	adds	r2, r7, #7
 80045e4:	7812      	ldrb	r2, [r2, #0]
 80045e6:	3a05      	subs	r2, #5
 80045e8:	4251      	negs	r1, r2
 80045ea:	414a      	adcs	r2, r1
 80045ec:	701a      	strb	r2, [r3, #0]
  }
  return(value);
 80045ee:	230f      	movs	r3, #15
 80045f0:	18fb      	adds	r3, r7, r3
 80045f2:	781b      	ldrb	r3, [r3, #0]
}
 80045f4:	0018      	movs	r0, r3
 80045f6:	46bd      	mov	sp, r7
 80045f8:	b004      	add	sp, #16
 80045fa:	bd80      	pop	{r7, pc}

080045fc <AT_Send>:

bool AT_Send(AT_Commands state){
 80045fc:	b590      	push	{r4, r7, lr}
 80045fe:	b085      	sub	sp, #20
 8004600:	af00      	add	r7, sp, #0
 8004602:	0002      	movs	r2, r0
 8004604:	1dfb      	adds	r3, r7, #7
 8004606:	701a      	strb	r2, [r3, #0]
  bool ATCommandSend = false;
 8004608:	230f      	movs	r3, #15
 800460a:	18fb      	adds	r3, r7, r3
 800460c:	2200      	movs	r2, #0
 800460e:	701a      	strb	r2, [r3, #0]
  switch (state){
 8004610:	1dfb      	adds	r3, r7, #7
 8004612:	781b      	ldrb	r3, [r3, #0]
 8004614:	2b0f      	cmp	r3, #15
 8004616:	d900      	bls.n	800461a <AT_Send+0x1e>
 8004618:	e14a      	b.n	80048b0 <AT_Send+0x2b4>
 800461a:	009a      	lsls	r2, r3, #2
 800461c:	4ba8      	ldr	r3, [pc, #672]	@ (80048c0 <AT_Send+0x2c4>)
 800461e:	18d3      	adds	r3, r2, r3
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	469f      	mov	pc, r3

  case AT_WAKEUP:
  if(TimestampIsReached(ESPTimeStamp)){
 8004624:	4ba7      	ldr	r3, [pc, #668]	@ (80048c4 <AT_Send+0x2c8>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	0018      	movs	r0, r3
 800462a:	f004 ffaf 	bl	800958c <TimestampIsReached>
 800462e:	1e03      	subs	r3, r0, #0
 8004630:	d100      	bne.n	8004634 <AT_Send+0x38>
 8004632:	e13c      	b.n	80048ae <AT_Send+0x2b2>
    ATCommandSend = PollAwake();
 8004634:	230f      	movs	r3, #15
 8004636:	18fc      	adds	r4, r7, r3
 8004638:	f7ff fb8c 	bl	8003d54 <PollAwake>
 800463c:	0003      	movs	r3, r0
 800463e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8004640:	f005 fb96 	bl	8009d70 <HAL_GetTick>
 8004644:	0003      	movs	r3, r0
 8004646:	3332      	adds	r3, #50	@ 0x32
 8004648:	001a      	movs	r2, r3
 800464a:	4b9e      	ldr	r3, [pc, #632]	@ (80048c4 <AT_Send+0x2c8>)
 800464c:	601a      	str	r2, [r3, #0]
  }
  break;
 800464e:	e12e      	b.n	80048ae <AT_Send+0x2b2>

  case AT_SET_RFPOWER:
    Debug("Setting RF Power");
 8004650:	4a9d      	ldr	r2, [pc, #628]	@ (80048c8 <AT_Send+0x2cc>)
 8004652:	4b9e      	ldr	r3, [pc, #632]	@ (80048cc <AT_Send+0x2d0>)
 8004654:	0019      	movs	r1, r3
 8004656:	2003      	movs	r0, #3
 8004658:	f004 ffee 	bl	8009638 <CreateLine>
    ATCommandSend = RFPower();
 800465c:	230f      	movs	r3, #15
 800465e:	18fc      	adds	r4, r7, r3
 8004660:	f7ff fb98 	bl	8003d94 <RFPower>
 8004664:	0003      	movs	r3, r0
 8004666:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004668:	f005 fb82 	bl	8009d70 <HAL_GetTick>
 800466c:	0003      	movs	r3, r0
 800466e:	330a      	adds	r3, #10
 8004670:	001a      	movs	r2, r3
 8004672:	4b94      	ldr	r3, [pc, #592]	@ (80048c4 <AT_Send+0x2c8>)
 8004674:	601a      	str	r2, [r3, #0]
    break;
 8004676:	e11b      	b.n	80048b0 <AT_Send+0x2b4>

  case AT_CHECK_RFPOWER:
    Debug("Checking RF Power");
 8004678:	4a95      	ldr	r2, [pc, #596]	@ (80048d0 <AT_Send+0x2d4>)
 800467a:	4b94      	ldr	r3, [pc, #592]	@ (80048cc <AT_Send+0x2d0>)
 800467c:	0019      	movs	r1, r3
 800467e:	2003      	movs	r0, #3
 8004680:	f004 ffda 	bl	8009638 <CreateLine>
    ATCommandSend = CheckRFPower();
 8004684:	230f      	movs	r3, #15
 8004686:	18fc      	adds	r4, r7, r3
 8004688:	f7ff fba4 	bl	8003dd4 <CheckRFPower>
 800468c:	0003      	movs	r3, r0
 800468e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004690:	f005 fb6e 	bl	8009d70 <HAL_GetTick>
 8004694:	0003      	movs	r3, r0
 8004696:	330a      	adds	r3, #10
 8004698:	001a      	movs	r2, r3
 800469a:	4b8a      	ldr	r3, [pc, #552]	@ (80048c4 <AT_Send+0x2c8>)
 800469c:	601a      	str	r2, [r3, #0]
    break;
 800469e:	e107      	b.n	80048b0 <AT_Send+0x2b4>

  case AT_RESTORE:
    Debug("Restoring ESP");
 80046a0:	4a8c      	ldr	r2, [pc, #560]	@ (80048d4 <AT_Send+0x2d8>)
 80046a2:	4b8a      	ldr	r3, [pc, #552]	@ (80048cc <AT_Send+0x2d0>)
 80046a4:	0019      	movs	r1, r3
 80046a6:	2003      	movs	r0, #3
 80046a8:	f004 ffc6 	bl	8009638 <CreateLine>
    ATCommandSend = ATRestore();
 80046ac:	230f      	movs	r3, #15
 80046ae:	18fc      	adds	r4, r7, r3
 80046b0:	f7ff fbb0 	bl	8003e14 <ATRestore>
 80046b4:	0003      	movs	r3, r0
 80046b6:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 80046b8:	f005 fb5a 	bl	8009d70 <HAL_GetTick>
 80046bc:	0003      	movs	r3, r0
 80046be:	3332      	adds	r3, #50	@ 0x32
 80046c0:	001a      	movs	r2, r3
 80046c2:	4b80      	ldr	r3, [pc, #512]	@ (80048c4 <AT_Send+0x2c8>)
 80046c4:	601a      	str	r2, [r3, #0]
    break;
 80046c6:	e0f3      	b.n	80048b0 <AT_Send+0x2b4>

  case AT_CWINIT:
    Debug("Initializing Wi-Fi");
 80046c8:	4a83      	ldr	r2, [pc, #524]	@ (80048d8 <AT_Send+0x2dc>)
 80046ca:	4b80      	ldr	r3, [pc, #512]	@ (80048cc <AT_Send+0x2d0>)
 80046cc:	0019      	movs	r1, r3
 80046ce:	2003      	movs	r0, #3
 80046d0:	f004 ffb2 	bl	8009638 <CreateLine>
    ATCommandSend = CWINIT();
 80046d4:	230f      	movs	r3, #15
 80046d6:	18fc      	adds	r4, r7, r3
 80046d8:	f7ff fbbc 	bl	8003e54 <CWINIT>
 80046dc:	0003      	movs	r3, r0
 80046de:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 80046e0:	f005 fb46 	bl	8009d70 <HAL_GetTick>
 80046e4:	0003      	movs	r3, r0
 80046e6:	33f5      	adds	r3, #245	@ 0xf5
 80046e8:	33ff      	adds	r3, #255	@ 0xff
 80046ea:	001a      	movs	r2, r3
 80046ec:	4b75      	ldr	r3, [pc, #468]	@ (80048c4 <AT_Send+0x2c8>)
 80046ee:	601a      	str	r2, [r3, #0]
    break;
 80046f0:	e0de      	b.n	80048b0 <AT_Send+0x2b4>

  case AT_CWMODE1:
    Debug("Setting to station mode");
 80046f2:	4a7a      	ldr	r2, [pc, #488]	@ (80048dc <AT_Send+0x2e0>)
 80046f4:	4b75      	ldr	r3, [pc, #468]	@ (80048cc <AT_Send+0x2d0>)
 80046f6:	0019      	movs	r1, r3
 80046f8:	2003      	movs	r0, #3
 80046fa:	f004 ff9d 	bl	8009638 <CreateLine>
    ATCommandSend = CWMODE1();
 80046fe:	230f      	movs	r3, #15
 8004700:	18fc      	adds	r4, r7, r3
 8004702:	f7ff fbc7 	bl	8003e94 <CWMODE1>
 8004706:	0003      	movs	r3, r0
 8004708:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 800470a:	f005 fb31 	bl	8009d70 <HAL_GetTick>
 800470e:	0003      	movs	r3, r0
 8004710:	330a      	adds	r3, #10
 8004712:	001a      	movs	r2, r3
 8004714:	4b6b      	ldr	r3, [pc, #428]	@ (80048c4 <AT_Send+0x2c8>)
 8004716:	601a      	str	r2, [r3, #0]
    break;
 8004718:	e0ca      	b.n	80048b0 <AT_Send+0x2b4>

  case AT_CWMODE2:
    Debug("Setting to station mode");
 800471a:	4a70      	ldr	r2, [pc, #448]	@ (80048dc <AT_Send+0x2e0>)
 800471c:	4b6b      	ldr	r3, [pc, #428]	@ (80048cc <AT_Send+0x2d0>)
 800471e:	0019      	movs	r1, r3
 8004720:	2003      	movs	r0, #3
 8004722:	f004 ff89 	bl	8009638 <CreateLine>
    ATCommandSend = CWMODE2();
 8004726:	230f      	movs	r3, #15
 8004728:	18fc      	adds	r4, r7, r3
 800472a:	f7ff fbd3 	bl	8003ed4 <CWMODE2>
 800472e:	0003      	movs	r3, r0
 8004730:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004732:	f005 fb1d 	bl	8009d70 <HAL_GetTick>
 8004736:	0003      	movs	r3, r0
 8004738:	330a      	adds	r3, #10
 800473a:	001a      	movs	r2, r3
 800473c:	4b61      	ldr	r3, [pc, #388]	@ (80048c4 <AT_Send+0x2c8>)
 800473e:	601a      	str	r2, [r3, #0]
    break;
 8004740:	e0b6      	b.n	80048b0 <AT_Send+0x2b4>

  case AT_CWAUTOCONN:
    Debug("Setting auto connect");
 8004742:	4a67      	ldr	r2, [pc, #412]	@ (80048e0 <AT_Send+0x2e4>)
 8004744:	4b61      	ldr	r3, [pc, #388]	@ (80048cc <AT_Send+0x2d0>)
 8004746:	0019      	movs	r1, r3
 8004748:	2003      	movs	r0, #3
 800474a:	f004 ff75 	bl	8009638 <CreateLine>
    ATCommandSend = CWAUTOCONN();
 800474e:	230f      	movs	r3, #15
 8004750:	18fc      	adds	r4, r7, r3
 8004752:	f7ff fbdf 	bl	8003f14 <CWAUTOCONN>
 8004756:	0003      	movs	r3, r0
 8004758:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 800475a:	f005 fb09 	bl	8009d70 <HAL_GetTick>
 800475e:	0003      	movs	r3, r0
 8004760:	330a      	adds	r3, #10
 8004762:	001a      	movs	r2, r3
 8004764:	4b57      	ldr	r3, [pc, #348]	@ (80048c4 <AT_Send+0x2c8>)
 8004766:	601a      	str	r2, [r3, #0]
    break;
 8004768:	e0a2      	b.n	80048b0 <AT_Send+0x2b4>

  case AT_CWJAP:
    Debug("Connect to Wi-Fi");
 800476a:	4a5e      	ldr	r2, [pc, #376]	@ (80048e4 <AT_Send+0x2e8>)
 800476c:	4b57      	ldr	r3, [pc, #348]	@ (80048cc <AT_Send+0x2d0>)
 800476e:	0019      	movs	r1, r3
 8004770:	2003      	movs	r0, #3
 8004772:	f004 ff61 	bl	8009638 <CreateLine>
    ATCommandSend = CWJAP();
 8004776:	230f      	movs	r3, #15
 8004778:	18fc      	adds	r4, r7, r3
 800477a:	f7ff fbeb 	bl	8003f54 <CWJAP>
 800477e:	0003      	movs	r3, r0
 8004780:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8004782:	f005 faf5 	bl	8009d70 <HAL_GetTick>
 8004786:	0003      	movs	r3, r0
 8004788:	3332      	adds	r3, #50	@ 0x32
 800478a:	001a      	movs	r2, r3
 800478c:	4b4d      	ldr	r3, [pc, #308]	@ (80048c4 <AT_Send+0x2c8>)
 800478e:	601a      	str	r2, [r3, #0]
    break;
 8004790:	e08e      	b.n	80048b0 <AT_Send+0x2b4>

  case AT_CWMODE3:
    Debug("SET in station/soft-ap mode");
 8004792:	4a55      	ldr	r2, [pc, #340]	@ (80048e8 <AT_Send+0x2ec>)
 8004794:	4b4d      	ldr	r3, [pc, #308]	@ (80048cc <AT_Send+0x2d0>)
 8004796:	0019      	movs	r1, r3
 8004798:	2003      	movs	r0, #3
 800479a:	f004 ff4d 	bl	8009638 <CreateLine>
    ATCommandSend = CWMODE3();
 800479e:	230f      	movs	r3, #15
 80047a0:	18fc      	adds	r4, r7, r3
 80047a2:	f7ff fc57 	bl	8004054 <CWMODE3>
 80047a6:	0003      	movs	r3, r0
 80047a8:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80047aa:	f005 fae1 	bl	8009d70 <HAL_GetTick>
 80047ae:	0003      	movs	r3, r0
 80047b0:	330a      	adds	r3, #10
 80047b2:	001a      	movs	r2, r3
 80047b4:	4b43      	ldr	r3, [pc, #268]	@ (80048c4 <AT_Send+0x2c8>)
 80047b6:	601a      	str	r2, [r3, #0]
    break;
 80047b8:	e07a      	b.n	80048b0 <AT_Send+0x2b4>

  case AT_CWSAP:
    Debug("SET soft AP mode parameters");
 80047ba:	4a4c      	ldr	r2, [pc, #304]	@ (80048ec <AT_Send+0x2f0>)
 80047bc:	4b43      	ldr	r3, [pc, #268]	@ (80048cc <AT_Send+0x2d0>)
 80047be:	0019      	movs	r1, r3
 80047c0:	2003      	movs	r0, #3
 80047c2:	f004 ff39 	bl	8009638 <CreateLine>
    ATCommandSend = CWSAP();
 80047c6:	230f      	movs	r3, #15
 80047c8:	18fc      	adds	r4, r7, r3
 80047ca:	f7ff fc63 	bl	8004094 <CWSAP>
 80047ce:	0003      	movs	r3, r0
 80047d0:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80047d2:	f005 facd 	bl	8009d70 <HAL_GetTick>
 80047d6:	0003      	movs	r3, r0
 80047d8:	330a      	adds	r3, #10
 80047da:	001a      	movs	r2, r3
 80047dc:	4b39      	ldr	r3, [pc, #228]	@ (80048c4 <AT_Send+0x2c8>)
 80047de:	601a      	str	r2, [r3, #0]
    break;
 80047e0:	e066      	b.n	80048b0 <AT_Send+0x2b4>

  case AT_CIPMUX:
    Debug("SET multiple communication channels");
 80047e2:	4a43      	ldr	r2, [pc, #268]	@ (80048f0 <AT_Send+0x2f4>)
 80047e4:	4b39      	ldr	r3, [pc, #228]	@ (80048cc <AT_Send+0x2d0>)
 80047e6:	0019      	movs	r1, r3
 80047e8:	2003      	movs	r0, #3
 80047ea:	f004 ff25 	bl	8009638 <CreateLine>
    ATCommandSend = CIPMUX();
 80047ee:	230f      	movs	r3, #15
 80047f0:	18fc      	adds	r4, r7, r3
 80047f2:	f7ff fc6f 	bl	80040d4 <CIPMUX>
 80047f6:	0003      	movs	r3, r0
 80047f8:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80047fa:	f005 fab9 	bl	8009d70 <HAL_GetTick>
 80047fe:	0003      	movs	r3, r0
 8004800:	330a      	adds	r3, #10
 8004802:	001a      	movs	r2, r3
 8004804:	4b2f      	ldr	r3, [pc, #188]	@ (80048c4 <AT_Send+0x2c8>)
 8004806:	601a      	str	r2, [r3, #0]
    break;
 8004808:	e052      	b.n	80048b0 <AT_Send+0x2b4>

  case AT_WEBSERVER:
    Debug("SET in station/soft-ap mode");
 800480a:	4a37      	ldr	r2, [pc, #220]	@ (80048e8 <AT_Send+0x2ec>)
 800480c:	4b2f      	ldr	r3, [pc, #188]	@ (80048cc <AT_Send+0x2d0>)
 800480e:	0019      	movs	r1, r3
 8004810:	2003      	movs	r0, #3
 8004812:	f004 ff11 	bl	8009638 <CreateLine>
    ATCommandSend = WEBSERVER();
 8004816:	230f      	movs	r3, #15
 8004818:	18fc      	adds	r4, r7, r3
 800481a:	f7ff fc7b 	bl	8004114 <WEBSERVER>
 800481e:	0003      	movs	r3, r0
 8004820:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004822:	f005 faa5 	bl	8009d70 <HAL_GetTick>
 8004826:	0003      	movs	r3, r0
 8004828:	330a      	adds	r3, #10
 800482a:	001a      	movs	r2, r3
 800482c:	4b25      	ldr	r3, [pc, #148]	@ (80048c4 <AT_Send+0x2c8>)
 800482e:	601a      	str	r2, [r3, #0]
    break;
 8004830:	e03e      	b.n	80048b0 <AT_Send+0x2b4>

  case AT_HTTPCPOST:
    Debug("SET in station/soft-ap mode");
 8004832:	4a2d      	ldr	r2, [pc, #180]	@ (80048e8 <AT_Send+0x2ec>)
 8004834:	4b25      	ldr	r3, [pc, #148]	@ (80048cc <AT_Send+0x2d0>)
 8004836:	0019      	movs	r1, r3
 8004838:	2003      	movs	r0, #3
 800483a:	f004 fefd 	bl	8009638 <CreateLine>
    ATCommandSend = HTTPCPOST();
 800483e:	230f      	movs	r3, #15
 8004840:	18fc      	adds	r4, r7, r3
 8004842:	f7ff fc87 	bl	8004154 <HTTPCPOST>
 8004846:	0003      	movs	r3, r0
 8004848:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 800484a:	f005 fa91 	bl	8009d70 <HAL_GetTick>
 800484e:	0003      	movs	r3, r0
 8004850:	33f5      	adds	r3, #245	@ 0xf5
 8004852:	33ff      	adds	r3, #255	@ 0xff
 8004854:	001a      	movs	r2, r3
 8004856:	4b1b      	ldr	r3, [pc, #108]	@ (80048c4 <AT_Send+0x2c8>)
 8004858:	601a      	str	r2, [r3, #0]
    break;
 800485a:	e029      	b.n	80048b0 <AT_Send+0x2b4>

  case AT_SENDDATA:
    Debug("Send the data");
 800485c:	4a25      	ldr	r2, [pc, #148]	@ (80048f4 <AT_Send+0x2f8>)
 800485e:	4b1b      	ldr	r3, [pc, #108]	@ (80048cc <AT_Send+0x2d0>)
 8004860:	0019      	movs	r1, r3
 8004862:	2003      	movs	r0, #3
 8004864:	f004 fee8 	bl	8009638 <CreateLine>
    ATCommandSend = SENDDATA();
 8004868:	230f      	movs	r3, #15
 800486a:	18fc      	adds	r4, r7, r3
 800486c:	f7ff fd0e 	bl	800428c <SENDDATA>
 8004870:	0003      	movs	r3, r0
 8004872:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8004874:	f005 fa7c 	bl	8009d70 <HAL_GetTick>
 8004878:	0003      	movs	r3, r0
 800487a:	33f5      	adds	r3, #245	@ 0xf5
 800487c:	33ff      	adds	r3, #255	@ 0xff
 800487e:	001a      	movs	r2, r3
 8004880:	4b10      	ldr	r3, [pc, #64]	@ (80048c4 <AT_Send+0x2c8>)
 8004882:	601a      	str	r2, [r3, #0]
    break;
 8004884:	e014      	b.n	80048b0 <AT_Send+0x2b4>

  case AT_SLEEP:
    Debug("Setting ESP in sleep mode for 5 min");
 8004886:	4a1c      	ldr	r2, [pc, #112]	@ (80048f8 <AT_Send+0x2fc>)
 8004888:	4b10      	ldr	r3, [pc, #64]	@ (80048cc <AT_Send+0x2d0>)
 800488a:	0019      	movs	r1, r3
 800488c:	2003      	movs	r0, #3
 800488e:	f004 fed3 	bl	8009638 <CreateLine>
    ATCommandSend = SLEEP();
 8004892:	230f      	movs	r3, #15
 8004894:	18fc      	adds	r4, r7, r3
 8004896:	f7ff fda5 	bl	80043e4 <SLEEP>
 800489a:	0003      	movs	r3, r0
 800489c:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 800489e:	f005 fa67 	bl	8009d70 <HAL_GetTick>
 80048a2:	0003      	movs	r3, r0
 80048a4:	330a      	adds	r3, #10
 80048a6:	001a      	movs	r2, r3
 80048a8:	4b06      	ldr	r3, [pc, #24]	@ (80048c4 <AT_Send+0x2c8>)
 80048aa:	601a      	str	r2, [r3, #0]
    break;
 80048ac:	e000      	b.n	80048b0 <AT_Send+0x2b4>
  break;
 80048ae:	46c0      	nop			@ (mov r8, r8)
  }

  return(ATCommandSend);
 80048b0:	230f      	movs	r3, #15
 80048b2:	18fb      	adds	r3, r7, r3
 80048b4:	781b      	ldrb	r3, [r3, #0]
}
 80048b6:	0018      	movs	r0, r3
 80048b8:	46bd      	mov	sp, r7
 80048ba:	b005      	add	sp, #20
 80048bc:	bd90      	pop	{r4, r7, pc}
 80048be:	46c0      	nop			@ (mov r8, r8)
 80048c0:	0801b8b0 	.word	0x0801b8b0
 80048c4:	200007ec 	.word	0x200007ec
 80048c8:	0801afc4 	.word	0x0801afc4
 80048cc:	0801ac78 	.word	0x0801ac78
 80048d0:	0801afd8 	.word	0x0801afd8
 80048d4:	0801afec 	.word	0x0801afec
 80048d8:	0801affc 	.word	0x0801affc
 80048dc:	0801b010 	.word	0x0801b010
 80048e0:	0801b028 	.word	0x0801b028
 80048e4:	0801b040 	.word	0x0801b040
 80048e8:	0801b054 	.word	0x0801b054
 80048ec:	0801b070 	.word	0x0801b070
 80048f0:	0801b08c 	.word	0x0801b08c
 80048f4:	0801b0b0 	.word	0x0801b0b0
 80048f8:	0801b0c0 	.word	0x0801b0c0

080048fc <ESP_WakeTest>:

void ESP_WakeTest(void) {
 80048fc:	b590      	push	{r4, r7, lr}
 80048fe:	b083      	sub	sp, #12
 8004900:	af00      	add	r7, sp, #0
  bool ATSend = false;
 8004902:	1dfb      	adds	r3, r7, #7
 8004904:	2200      	movs	r2, #0
 8004906:	701a      	strb	r2, [r3, #0]
  static Receive_Status ATReceived = RECEIVE_STATUS_INCOMPLETE;
  switch (TestState){
 8004908:	4b79      	ldr	r3, [pc, #484]	@ (8004af0 <ESP_WakeTest+0x1f4>)
 800490a:	781b      	ldrb	r3, [r3, #0]
 800490c:	2b05      	cmp	r3, #5
 800490e:	d900      	bls.n	8004912 <ESP_WakeTest+0x16>
 8004910:	e0d4      	b.n	8004abc <ESP_WakeTest+0x1c0>
 8004912:	009a      	lsls	r2, r3, #2
 8004914:	4b77      	ldr	r3, [pc, #476]	@ (8004af4 <ESP_WakeTest+0x1f8>)
 8004916:	18d3      	adds	r3, r2, r3
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	469f      	mov	pc, r3

    case ESP_TEST_INIT:
      if(!EspTurnedOn){
 800491c:	4b76      	ldr	r3, [pc, #472]	@ (8004af8 <ESP_WakeTest+0x1fc>)
 800491e:	781b      	ldrb	r3, [r3, #0]
 8004920:	2201      	movs	r2, #1
 8004922:	4053      	eors	r3, r2
 8004924:	b2db      	uxtb	r3, r3
 8004926:	2b00      	cmp	r3, #0
 8004928:	d036      	beq.n	8004998 <ESP_WakeTest+0x9c>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 800492a:	2380      	movs	r3, #128	@ 0x80
 800492c:	011b      	lsls	r3, r3, #4
 800492e:	4873      	ldr	r0, [pc, #460]	@ (8004afc <ESP_WakeTest+0x200>)
 8004930:	2200      	movs	r2, #0
 8004932:	0019      	movs	r1, r3
 8004934:	f006 fdbb 	bl	800b4ae <HAL_GPIO_WritePin>
        HAL_Delay(50);
 8004938:	2032      	movs	r0, #50	@ 0x32
 800493a:	f005 fa23 	bl	8009d84 <HAL_Delay>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 800493e:	2380      	movs	r3, #128	@ 0x80
 8004940:	011b      	lsls	r3, r3, #4
 8004942:	486e      	ldr	r0, [pc, #440]	@ (8004afc <ESP_WakeTest+0x200>)
 8004944:	2201      	movs	r2, #1
 8004946:	0019      	movs	r1, r3
 8004948:	f006 fdb1 	bl	800b4ae <HAL_GPIO_WritePin>
        HAL_Delay(10);
 800494c:	200a      	movs	r0, #10
 800494e:	f005 fa19 	bl	8009d84 <HAL_Delay>
        // Reset ESP, so we're sure that we're in the right state.
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8004952:	4b6b      	ldr	r3, [pc, #428]	@ (8004b00 <ESP_WakeTest+0x204>)
 8004954:	2200      	movs	r2, #0
 8004956:	2101      	movs	r1, #1
 8004958:	0018      	movs	r0, r3
 800495a:	f006 fda8 	bl	800b4ae <HAL_GPIO_WritePin>
        HAL_Delay(10);
 800495e:	200a      	movs	r0, #10
 8004960:	f005 fa10 	bl	8009d84 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 1);
 8004964:	4b66      	ldr	r3, [pc, #408]	@ (8004b00 <ESP_WakeTest+0x204>)
 8004966:	2201      	movs	r2, #1
 8004968:	2102      	movs	r1, #2
 800496a:	0018      	movs	r0, r3
 800496c:	f006 fd9f 	bl	800b4ae <HAL_GPIO_WritePin>
        HAL_Delay(10);
 8004970:	200a      	movs	r0, #10
 8004972:	f005 fa07 	bl	8009d84 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 8004976:	4b62      	ldr	r3, [pc, #392]	@ (8004b00 <ESP_WakeTest+0x204>)
 8004978:	2201      	movs	r2, #1
 800497a:	2101      	movs	r1, #1
 800497c:	0018      	movs	r0, r3
 800497e:	f006 fd96 	bl	800b4ae <HAL_GPIO_WritePin>
        ESPTimeStamp = HAL_GetTick() + ESP_START_UP_TIME;
 8004982:	f005 f9f5 	bl	8009d70 <HAL_GetTick>
 8004986:	0003      	movs	r3, r0
 8004988:	22af      	movs	r2, #175	@ 0xaf
 800498a:	0092      	lsls	r2, r2, #2
 800498c:	189a      	adds	r2, r3, r2
 800498e:	4b5d      	ldr	r3, [pc, #372]	@ (8004b04 <ESP_WakeTest+0x208>)
 8004990:	601a      	str	r2, [r3, #0]
        EspTurnedOn = true;
 8004992:	4b59      	ldr	r3, [pc, #356]	@ (8004af8 <ESP_WakeTest+0x1fc>)
 8004994:	2201      	movs	r2, #1
 8004996:	701a      	strb	r2, [r3, #0]
      }
      if(ESP_Receive(RxBuffer, ESP_MAX_BUFFER_SIZE)) {
 8004998:	4b5b      	ldr	r3, [pc, #364]	@ (8004b08 <ESP_WakeTest+0x20c>)
 800499a:	21ff      	movs	r1, #255	@ 0xff
 800499c:	0018      	movs	r0, r3
 800499e:	f7fe ff17 	bl	80037d0 <ESP_Receive>
 80049a2:	1e03      	subs	r3, r0, #0
 80049a4:	d100      	bne.n	80049a8 <ESP_WakeTest+0xac>
 80049a6:	e099      	b.n	8004adc <ESP_WakeTest+0x1e0>
        TestState = ESP_TEST_SEND;
 80049a8:	4b51      	ldr	r3, [pc, #324]	@ (8004af0 <ESP_WakeTest+0x1f4>)
 80049aa:	2201      	movs	r2, #1
 80049ac:	701a      	strb	r2, [r3, #0]
      }
      break;
 80049ae:	e095      	b.n	8004adc <ESP_WakeTest+0x1e0>

    case ESP_TEST_SEND:
      if(TimestampIsReached(ESPTimeStamp)){
 80049b0:	4b54      	ldr	r3, [pc, #336]	@ (8004b04 <ESP_WakeTest+0x208>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	0018      	movs	r0, r3
 80049b6:	f004 fde9 	bl	800958c <TimestampIsReached>
 80049ba:	1e03      	subs	r3, r0, #0
 80049bc:	d100      	bne.n	80049c0 <ESP_WakeTest+0xc4>
 80049be:	e08f      	b.n	8004ae0 <ESP_WakeTest+0x1e4>
        ATSend = AT_Send(ATCommand);
 80049c0:	4b52      	ldr	r3, [pc, #328]	@ (8004b0c <ESP_WakeTest+0x210>)
 80049c2:	781b      	ldrb	r3, [r3, #0]
 80049c4:	1dfc      	adds	r4, r7, #7
 80049c6:	0018      	movs	r0, r3
 80049c8:	f7ff fe18 	bl	80045fc <AT_Send>
 80049cc:	0003      	movs	r3, r0
 80049ce:	7023      	strb	r3, [r4, #0]
        if(ATSend){
 80049d0:	1dfb      	adds	r3, r7, #7
 80049d2:	781b      	ldrb	r3, [r3, #0]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d100      	bne.n	80049da <ESP_WakeTest+0xde>
 80049d8:	e082      	b.n	8004ae0 <ESP_WakeTest+0x1e4>
          TestState = ESP_TEST_RECEIVE;
 80049da:	4b45      	ldr	r3, [pc, #276]	@ (8004af0 <ESP_WakeTest+0x1f4>)
 80049dc:	2202      	movs	r2, #2
 80049de:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 80049e0:	e07e      	b.n	8004ae0 <ESP_WakeTest+0x1e4>

    case ESP_TEST_RECEIVE:
      if(TimestampIsReached(ESPTimeStamp)){
 80049e2:	4b48      	ldr	r3, [pc, #288]	@ (8004b04 <ESP_WakeTest+0x208>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	0018      	movs	r0, r3
 80049e8:	f004 fdd0 	bl	800958c <TimestampIsReached>
 80049ec:	1e03      	subs	r3, r0, #0
 80049ee:	d100      	bne.n	80049f2 <ESP_WakeTest+0xf6>
 80049f0:	e078      	b.n	8004ae4 <ESP_WakeTest+0x1e8>
        ATReceived = DMA_ProcessBuffer(ATExpectation);
 80049f2:	4b47      	ldr	r3, [pc, #284]	@ (8004b10 <ESP_WakeTest+0x214>)
 80049f4:	781b      	ldrb	r3, [r3, #0]
 80049f6:	0018      	movs	r0, r3
 80049f8:	f7ff fd14 	bl	8004424 <DMA_ProcessBuffer>
 80049fc:	0003      	movs	r3, r0
 80049fe:	001a      	movs	r2, r3
 8004a00:	4b44      	ldr	r3, [pc, #272]	@ (8004b14 <ESP_WakeTest+0x218>)
 8004a02:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, ATExpectation);
 8004a04:	4b43      	ldr	r3, [pc, #268]	@ (8004b14 <ESP_WakeTest+0x218>)
 8004a06:	781a      	ldrb	r2, [r3, #0]
 8004a08:	4b41      	ldr	r3, [pc, #260]	@ (8004b10 <ESP_WakeTest+0x214>)
 8004a0a:	781b      	ldrb	r3, [r3, #0]
 8004a0c:	1dbc      	adds	r4, r7, #6
 8004a0e:	0019      	movs	r1, r3
 8004a10:	0010      	movs	r0, r2
 8004a12:	f7ff fdbd 	bl	8004590 <ATCompare>
 8004a16:	0003      	movs	r3, r0
 8004a18:	7023      	strb	r3, [r4, #0]
        if(ATReceived == RECEIVE_STATUS_ERROR){
 8004a1a:	4b3e      	ldr	r3, [pc, #248]	@ (8004b14 <ESP_WakeTest+0x218>)
 8004a1c:	781b      	ldrb	r3, [r3, #0]
 8004a1e:	2b01      	cmp	r3, #1
 8004a20:	d102      	bne.n	8004a28 <ESP_WakeTest+0x12c>
          TestState = ESP_TEST_SEND;
 8004a22:	4b33      	ldr	r3, [pc, #204]	@ (8004af0 <ESP_WakeTest+0x1f4>)
 8004a24:	2201      	movs	r2, #1
 8004a26:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_RETRY){
          //TestState = ESP_TEST_SEND;
          //ESPTimeStamp = HAL_GetTick() + 2*ESP_START_UP_TIME;
        }
        if(ATReceived == RECEIVE_STATUS_UNPROGGED){
 8004a28:	4b3a      	ldr	r3, [pc, #232]	@ (8004b14 <ESP_WakeTest+0x218>)
 8004a2a:	781b      	ldrb	r3, [r3, #0]
 8004a2c:	2b07      	cmp	r3, #7
 8004a2e:	d104      	bne.n	8004a3a <ESP_WakeTest+0x13e>
          StartProg();
 8004a30:	f7ff f81c 	bl	8003a6c <StartProg>
          TestState = ESP_TEST_BOOT;
 8004a34:	4b2e      	ldr	r3, [pc, #184]	@ (8004af0 <ESP_WakeTest+0x1f4>)
 8004a36:	2205      	movs	r2, #5
 8004a38:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_INCOMPLETE){
 8004a3a:	4b36      	ldr	r3, [pc, #216]	@ (8004b14 <ESP_WakeTest+0x218>)
 8004a3c:	781b      	ldrb	r3, [r3, #0]
 8004a3e:	2b03      	cmp	r3, #3
 8004a40:	d109      	bne.n	8004a56 <ESP_WakeTest+0x15a>
          ESPTimeStamp = HAL_GetTick() + 50;
 8004a42:	f005 f995 	bl	8009d70 <HAL_GetTick>
 8004a46:	0003      	movs	r3, r0
 8004a48:	3332      	adds	r3, #50	@ 0x32
 8004a4a:	001a      	movs	r2, r3
 8004a4c:	4b2d      	ldr	r3, [pc, #180]	@ (8004b04 <ESP_WakeTest+0x208>)
 8004a4e:	601a      	str	r2, [r3, #0]
          TestState = ESP_TEST_SEND;
 8004a50:	4b27      	ldr	r3, [pc, #156]	@ (8004af0 <ESP_WakeTest+0x1f4>)
 8004a52:	2201      	movs	r2, #1
 8004a54:	701a      	strb	r2, [r3, #0]
        }
        if(proceed){
 8004a56:	1dbb      	adds	r3, r7, #6
 8004a58:	781b      	ldrb	r3, [r3, #0]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d042      	beq.n	8004ae4 <ESP_WakeTest+0x1e8>
          TestState = ESP_TEST_VALIDATE;
 8004a5e:	4b24      	ldr	r3, [pc, #144]	@ (8004af0 <ESP_WakeTest+0x1f4>)
 8004a60:	2203      	movs	r2, #3
 8004a62:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8004a64:	e03e      	b.n	8004ae4 <ESP_WakeTest+0x1e8>

    case ESP_TEST_VALIDATE:
      //Set measurement completed
      TIM3 -> CCR1 = 4000;
 8004a66:	4b2c      	ldr	r3, [pc, #176]	@ (8004b18 <ESP_WakeTest+0x21c>)
 8004a68:	22fa      	movs	r2, #250	@ 0xfa
 8004a6a:	0112      	lsls	r2, r2, #4
 8004a6c:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = 0;
 8004a6e:	4b2a      	ldr	r3, [pc, #168]	@ (8004b18 <ESP_WakeTest+0x21c>)
 8004a70:	2200      	movs	r2, #0
 8004a72:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = 4000;
 8004a74:	4b28      	ldr	r3, [pc, #160]	@ (8004b18 <ESP_WakeTest+0x21c>)
 8004a76:	22fa      	movs	r2, #250	@ 0xfa
 8004a78:	0112      	lsls	r2, r2, #4
 8004a7a:	63da      	str	r2, [r3, #60]	@ 0x3c
      TestState = ESP_TEST_DEINIT;
 8004a7c:	4b1c      	ldr	r3, [pc, #112]	@ (8004af0 <ESP_WakeTest+0x1f4>)
 8004a7e:	2204      	movs	r2, #4
 8004a80:	701a      	strb	r2, [r3, #0]

      break;
 8004a82:	e030      	b.n	8004ae6 <ESP_WakeTest+0x1ea>

    case ESP_TEST_DEINIT:
      testRound = false;
 8004a84:	4b25      	ldr	r3, [pc, #148]	@ (8004b1c <ESP_WakeTest+0x220>)
 8004a86:	2200      	movs	r2, #0
 8004a88:	701a      	strb	r2, [r3, #0]
      EspTurnedOn = false;
 8004a8a:	4b1b      	ldr	r3, [pc, #108]	@ (8004af8 <ESP_WakeTest+0x1fc>)
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8004a90:	4b1b      	ldr	r3, [pc, #108]	@ (8004b00 <ESP_WakeTest+0x204>)
 8004a92:	2200      	movs	r2, #0
 8004a94:	2101      	movs	r1, #1
 8004a96:	0018      	movs	r0, r3
 8004a98:	f006 fd09 	bl	800b4ae <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8004a9c:	2380      	movs	r3, #128	@ 0x80
 8004a9e:	011b      	lsls	r3, r3, #4
 8004aa0:	4816      	ldr	r0, [pc, #88]	@ (8004afc <ESP_WakeTest+0x200>)
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	0019      	movs	r1, r3
 8004aa6:	f006 fd02 	bl	800b4ae <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 8004aaa:	4b15      	ldr	r3, [pc, #84]	@ (8004b00 <ESP_WakeTest+0x204>)
 8004aac:	2200      	movs	r2, #0
 8004aae:	2102      	movs	r1, #2
 8004ab0:	0018      	movs	r0, r3
 8004ab2:	f006 fcfc 	bl	800b4ae <HAL_GPIO_WritePin>
      // Reset ESP, so we're sure that we're in the right state.
      SetESPMeasurementDone();
 8004ab6:	f001 ffc1 	bl	8006a3c <SetESPMeasurementDone>
      break;
 8004aba:	e014      	b.n	8004ae6 <ESP_WakeTest+0x1ea>

    default:
      TestState = ESP_TEST_INIT;
 8004abc:	4b0c      	ldr	r3, [pc, #48]	@ (8004af0 <ESP_WakeTest+0x1f4>)
 8004abe:	2200      	movs	r2, #0
 8004ac0:	701a      	strb	r2, [r3, #0]
      break;
 8004ac2:	e010      	b.n	8004ae6 <ESP_WakeTest+0x1ea>



    case ESP_TEST_BOOT:
      TIM3 -> CCR1 = 4000;
 8004ac4:	4b14      	ldr	r3, [pc, #80]	@ (8004b18 <ESP_WakeTest+0x21c>)
 8004ac6:	22fa      	movs	r2, #250	@ 0xfa
 8004ac8:	0112      	lsls	r2, r2, #4
 8004aca:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = 4000;
 8004acc:	4b12      	ldr	r3, [pc, #72]	@ (8004b18 <ESP_WakeTest+0x21c>)
 8004ace:	22fa      	movs	r2, #250	@ 0xfa
 8004ad0:	0112      	lsls	r2, r2, #4
 8004ad2:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = 0;
 8004ad4:	4b10      	ldr	r3, [pc, #64]	@ (8004b18 <ESP_WakeTest+0x21c>)
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	63da      	str	r2, [r3, #60]	@ 0x3c
      //WAIT FOR RESET;
      break;
 8004ada:	e004      	b.n	8004ae6 <ESP_WakeTest+0x1ea>
      break;
 8004adc:	46c0      	nop			@ (mov r8, r8)
 8004ade:	e002      	b.n	8004ae6 <ESP_WakeTest+0x1ea>
      break;
 8004ae0:	46c0      	nop			@ (mov r8, r8)
 8004ae2:	e000      	b.n	8004ae6 <ESP_WakeTest+0x1ea>
      break;
 8004ae4:	46c0      	nop			@ (mov r8, r8)
  }
}
 8004ae6:	46c0      	nop			@ (mov r8, r8)
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	b003      	add	sp, #12
 8004aec:	bd90      	pop	{r4, r7, pc}
 8004aee:	46c0      	nop			@ (mov r8, r8)
 8004af0:	200009f8 	.word	0x200009f8
 8004af4:	0801b8f0 	.word	0x0801b8f0
 8004af8:	20000537 	.word	0x20000537
 8004afc:	50000800 	.word	0x50000800
 8004b00:	50001c00 	.word	0x50001c00
 8004b04:	200007ec 	.word	0x200007ec
 8004b08:	20000438 	.word	0x20000438
 8004b0c:	200009f6 	.word	0x200009f6
 8004b10:	200009f5 	.word	0x200009f5
 8004b14:	2000006a 	.word	0x2000006a
 8004b18:	40000400 	.word	0x40000400
 8004b1c:	20000000 	.word	0x20000000

08004b20 <ESP_Upkeep>:

void ESP_Upkeep(void) {
 8004b20:	b590      	push	{r4, r7, lr}
 8004b22:	b083      	sub	sp, #12
 8004b24:	af00      	add	r7, sp, #0
  bool ATSend = false;
 8004b26:	1dfb      	adds	r3, r7, #7
 8004b28:	2200      	movs	r2, #0
 8004b2a:	701a      	strb	r2, [r3, #0]
  static Receive_Status ATReceived = RECEIVE_STATUS_INCOMPLETE;
  switch (EspState) {
 8004b2c:	4be0      	ldr	r3, [pc, #896]	@ (8004eb0 <ESP_Upkeep+0x390>)
 8004b2e:	781b      	ldrb	r3, [r3, #0]
 8004b30:	2b0e      	cmp	r3, #14
 8004b32:	d900      	bls.n	8004b36 <ESP_Upkeep+0x16>
 8004b34:	e22f      	b.n	8004f96 <ESP_Upkeep+0x476>
 8004b36:	009a      	lsls	r2, r3, #2
 8004b38:	4bde      	ldr	r3, [pc, #888]	@ (8004eb4 <ESP_Upkeep+0x394>)
 8004b3a:	18d3      	adds	r3, r2, r3
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	469f      	mov	pc, r3
    case ESP_STATE_OFF:
      // Turning off the ESP
      // Disable UART

//      EspTurnedOn = false;
      EspState = ESP_STATE_IDLE;
 8004b40:	4bdb      	ldr	r3, [pc, #876]	@ (8004eb0 <ESP_Upkeep+0x390>)
 8004b42:	2201      	movs	r2, #1
 8004b44:	701a      	strb	r2, [r3, #0]
      break;
 8004b46:	e23d      	b.n	8004fc4 <ESP_Upkeep+0x4a4>
    case ESP_STATE_IDLE:
      // Waiting for wake up call.
      break;

    case ESP_STATE_INIT:
      if(!EspTurnedOn){
 8004b48:	4bdb      	ldr	r3, [pc, #876]	@ (8004eb8 <ESP_Upkeep+0x398>)
 8004b4a:	781b      	ldrb	r3, [r3, #0]
 8004b4c:	2201      	movs	r2, #1
 8004b4e:	4053      	eors	r3, r2
 8004b50:	b2db      	uxtb	r3, r3
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d036      	beq.n	8004bc4 <ESP_Upkeep+0xa4>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8004b56:	2380      	movs	r3, #128	@ 0x80
 8004b58:	011b      	lsls	r3, r3, #4
 8004b5a:	48d8      	ldr	r0, [pc, #864]	@ (8004ebc <ESP_Upkeep+0x39c>)
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	0019      	movs	r1, r3
 8004b60:	f006 fca5 	bl	800b4ae <HAL_GPIO_WritePin>
        HAL_Delay(50);
 8004b64:	2032      	movs	r0, #50	@ 0x32
 8004b66:	f005 f90d 	bl	8009d84 <HAL_Delay>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 8004b6a:	2380      	movs	r3, #128	@ 0x80
 8004b6c:	011b      	lsls	r3, r3, #4
 8004b6e:	48d3      	ldr	r0, [pc, #844]	@ (8004ebc <ESP_Upkeep+0x39c>)
 8004b70:	2201      	movs	r2, #1
 8004b72:	0019      	movs	r1, r3
 8004b74:	f006 fc9b 	bl	800b4ae <HAL_GPIO_WritePin>
        HAL_Delay(10);
 8004b78:	200a      	movs	r0, #10
 8004b7a:	f005 f903 	bl	8009d84 <HAL_Delay>
        // Reset ESP, so we're sure that we're in the right state.
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8004b7e:	4bd0      	ldr	r3, [pc, #832]	@ (8004ec0 <ESP_Upkeep+0x3a0>)
 8004b80:	2200      	movs	r2, #0
 8004b82:	2101      	movs	r1, #1
 8004b84:	0018      	movs	r0, r3
 8004b86:	f006 fc92 	bl	800b4ae <HAL_GPIO_WritePin>
        HAL_Delay(10);
 8004b8a:	200a      	movs	r0, #10
 8004b8c:	f005 f8fa 	bl	8009d84 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 1);
 8004b90:	4bcb      	ldr	r3, [pc, #812]	@ (8004ec0 <ESP_Upkeep+0x3a0>)
 8004b92:	2201      	movs	r2, #1
 8004b94:	2102      	movs	r1, #2
 8004b96:	0018      	movs	r0, r3
 8004b98:	f006 fc89 	bl	800b4ae <HAL_GPIO_WritePin>
        HAL_Delay(10);
 8004b9c:	200a      	movs	r0, #10
 8004b9e:	f005 f8f1 	bl	8009d84 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 8004ba2:	4bc7      	ldr	r3, [pc, #796]	@ (8004ec0 <ESP_Upkeep+0x3a0>)
 8004ba4:	2201      	movs	r2, #1
 8004ba6:	2101      	movs	r1, #1
 8004ba8:	0018      	movs	r0, r3
 8004baa:	f006 fc80 	bl	800b4ae <HAL_GPIO_WritePin>
        ESPTimeStamp = HAL_GetTick() + ESP_START_UP_TIME;
 8004bae:	f005 f8df 	bl	8009d70 <HAL_GetTick>
 8004bb2:	0003      	movs	r3, r0
 8004bb4:	22af      	movs	r2, #175	@ 0xaf
 8004bb6:	0092      	lsls	r2, r2, #2
 8004bb8:	189a      	adds	r2, r3, r2
 8004bba:	4bc2      	ldr	r3, [pc, #776]	@ (8004ec4 <ESP_Upkeep+0x3a4>)
 8004bbc:	601a      	str	r2, [r3, #0]
        EspTurnedOn = true;
 8004bbe:	4bbe      	ldr	r3, [pc, #760]	@ (8004eb8 <ESP_Upkeep+0x398>)
 8004bc0:	2201      	movs	r2, #1
 8004bc2:	701a      	strb	r2, [r3, #0]
      }
      // Wait for ESP to be ready
      // Start reading DMA buffer for AT commands
      if(ESP_Receive(RxBuffer, ESP_MAX_BUFFER_SIZE)) {
 8004bc4:	4bc0      	ldr	r3, [pc, #768]	@ (8004ec8 <ESP_Upkeep+0x3a8>)
 8004bc6:	21ff      	movs	r1, #255	@ 0xff
 8004bc8:	0018      	movs	r0, r3
 8004bca:	f7fe fe01 	bl	80037d0 <ESP_Receive>
 8004bce:	1e03      	subs	r3, r0, #0
 8004bd0:	d100      	bne.n	8004bd4 <ESP_Upkeep+0xb4>
 8004bd2:	e1ec      	b.n	8004fae <ESP_Upkeep+0x48e>
        EspState = ESP_STATE_MODE_SELECT;
 8004bd4:	4bb6      	ldr	r3, [pc, #728]	@ (8004eb0 <ESP_Upkeep+0x390>)
 8004bd6:	220b      	movs	r2, #11
 8004bd8:	701a      	strb	r2, [r3, #0]
      }
      break;
 8004bda:	e1e8      	b.n	8004fae <ESP_Upkeep+0x48e>

    case ESP_STATE_MODE_SELECT:
      memset(ATCommandArray, AT_END, 9);
 8004bdc:	4bbb      	ldr	r3, [pc, #748]	@ (8004ecc <ESP_Upkeep+0x3ac>)
 8004bde:	2209      	movs	r2, #9
 8004be0:	2110      	movs	r1, #16
 8004be2:	0018      	movs	r0, r3
 8004be4:	f013 f932 	bl	8017e4c <memset>
      if(!InitIsDone || WifiReset){
 8004be8:	4bb9      	ldr	r3, [pc, #740]	@ (8004ed0 <ESP_Upkeep+0x3b0>)
 8004bea:	781b      	ldrb	r3, [r3, #0]
 8004bec:	2201      	movs	r2, #1
 8004bee:	4053      	eors	r3, r2
 8004bf0:	b2db      	uxtb	r3, r3
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d103      	bne.n	8004bfe <ESP_Upkeep+0xde>
 8004bf6:	4bb7      	ldr	r3, [pc, #732]	@ (8004ed4 <ESP_Upkeep+0x3b4>)
 8004bf8:	781b      	ldrb	r3, [r3, #0]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d018      	beq.n	8004c30 <ESP_Upkeep+0x110>
        memcpy(ATCommandArray, AT_INIT, 8);
 8004bfe:	49b6      	ldr	r1, [pc, #728]	@ (8004ed8 <ESP_Upkeep+0x3b8>)
 8004c00:	4bb2      	ldr	r3, [pc, #712]	@ (8004ecc <ESP_Upkeep+0x3ac>)
 8004c02:	2208      	movs	r2, #8
 8004c04:	0018      	movs	r0, r3
 8004c06:	f013 f9eb 	bl	8017fe0 <memcpy>
        EspState = ESP_STATE_SEND;
 8004c0a:	4ba9      	ldr	r3, [pc, #676]	@ (8004eb0 <ESP_Upkeep+0x390>)
 8004c0c:	2204      	movs	r2, #4
 8004c0e:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8004c10:	4bb2      	ldr	r3, [pc, #712]	@ (8004edc <ESP_Upkeep+0x3bc>)
 8004c12:	2200      	movs	r2, #0
 8004c14:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_INIT;
 8004c16:	4bb2      	ldr	r3, [pc, #712]	@ (8004ee0 <ESP_Upkeep+0x3c0>)
 8004c18:	2200      	movs	r2, #0
 8004c1a:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8004c1c:	4baf      	ldr	r3, [pc, #700]	@ (8004edc <ESP_Upkeep+0x3bc>)
 8004c1e:	781b      	ldrb	r3, [r3, #0]
 8004c20:	001a      	movs	r2, r3
 8004c22:	4baa      	ldr	r3, [pc, #680]	@ (8004ecc <ESP_Upkeep+0x3ac>)
 8004c24:	5c9a      	ldrb	r2, [r3, r2]
 8004c26:	4baf      	ldr	r3, [pc, #700]	@ (8004ee4 <ESP_Upkeep+0x3c4>)
 8004c28:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8004c2a:	4baf      	ldr	r3, [pc, #700]	@ (8004ee8 <ESP_Upkeep+0x3c8>)
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && !ConnectionMade){
 8004c30:	4ba7      	ldr	r3, [pc, #668]	@ (8004ed0 <ESP_Upkeep+0x3b0>)
 8004c32:	781b      	ldrb	r3, [r3, #0]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d01f      	beq.n	8004c78 <ESP_Upkeep+0x158>
 8004c38:	4bac      	ldr	r3, [pc, #688]	@ (8004eec <ESP_Upkeep+0x3cc>)
 8004c3a:	781b      	ldrb	r3, [r3, #0]
 8004c3c:	2201      	movs	r2, #1
 8004c3e:	4053      	eors	r3, r2
 8004c40:	b2db      	uxtb	r3, r3
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d018      	beq.n	8004c78 <ESP_Upkeep+0x158>
        memcpy(ATCommandArray, AT_WIFI_CONFIG, 6);
 8004c46:	4ba1      	ldr	r3, [pc, #644]	@ (8004ecc <ESP_Upkeep+0x3ac>)
 8004c48:	4aa9      	ldr	r2, [pc, #676]	@ (8004ef0 <ESP_Upkeep+0x3d0>)
 8004c4a:	6811      	ldr	r1, [r2, #0]
 8004c4c:	6019      	str	r1, [r3, #0]
 8004c4e:	8892      	ldrh	r2, [r2, #4]
 8004c50:	809a      	strh	r2, [r3, #4]
        EspState = ESP_STATE_SEND;
 8004c52:	4b97      	ldr	r3, [pc, #604]	@ (8004eb0 <ESP_Upkeep+0x390>)
 8004c54:	2204      	movs	r2, #4
 8004c56:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8004c58:	4ba0      	ldr	r3, [pc, #640]	@ (8004edc <ESP_Upkeep+0x3bc>)
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_CONFIG;
 8004c5e:	4ba0      	ldr	r3, [pc, #640]	@ (8004ee0 <ESP_Upkeep+0x3c0>)
 8004c60:	2201      	movs	r2, #1
 8004c62:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8004c64:	4b9d      	ldr	r3, [pc, #628]	@ (8004edc <ESP_Upkeep+0x3bc>)
 8004c66:	781b      	ldrb	r3, [r3, #0]
 8004c68:	001a      	movs	r2, r3
 8004c6a:	4b98      	ldr	r3, [pc, #608]	@ (8004ecc <ESP_Upkeep+0x3ac>)
 8004c6c:	5c9a      	ldrb	r2, [r3, r2]
 8004c6e:	4b9d      	ldr	r3, [pc, #628]	@ (8004ee4 <ESP_Upkeep+0x3c4>)
 8004c70:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8004c72:	4b9d      	ldr	r3, [pc, #628]	@ (8004ee8 <ESP_Upkeep+0x3c8>)
 8004c74:	2200      	movs	r2, #0
 8004c76:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && !WifiReset){
 8004c78:	4b95      	ldr	r3, [pc, #596]	@ (8004ed0 <ESP_Upkeep+0x3b0>)
 8004c7a:	781b      	ldrb	r3, [r3, #0]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d027      	beq.n	8004cd0 <ESP_Upkeep+0x1b0>
 8004c80:	4b9a      	ldr	r3, [pc, #616]	@ (8004eec <ESP_Upkeep+0x3cc>)
 8004c82:	781b      	ldrb	r3, [r3, #0]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d023      	beq.n	8004cd0 <ESP_Upkeep+0x1b0>
 8004c88:	4b92      	ldr	r3, [pc, #584]	@ (8004ed4 <ESP_Upkeep+0x3b4>)
 8004c8a:	781b      	ldrb	r3, [r3, #0]
 8004c8c:	2201      	movs	r2, #1
 8004c8e:	4053      	eors	r3, r2
 8004c90:	b2db      	uxtb	r3, r3
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d01c      	beq.n	8004cd0 <ESP_Upkeep+0x1b0>
        memcpy(ATCommandArray, AT_SEND, 3);
 8004c96:	4b8d      	ldr	r3, [pc, #564]	@ (8004ecc <ESP_Upkeep+0x3ac>)
 8004c98:	4a96      	ldr	r2, [pc, #600]	@ (8004ef4 <ESP_Upkeep+0x3d4>)
 8004c9a:	8811      	ldrh	r1, [r2, #0]
 8004c9c:	8019      	strh	r1, [r3, #0]
 8004c9e:	7892      	ldrb	r2, [r2, #2]
 8004ca0:	709a      	strb	r2, [r3, #2]
        EspState = ESP_STATE_SEND;
 8004ca2:	4b83      	ldr	r3, [pc, #524]	@ (8004eb0 <ESP_Upkeep+0x390>)
 8004ca4:	2204      	movs	r2, #4
 8004ca6:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8004ca8:	4b8c      	ldr	r3, [pc, #560]	@ (8004edc <ESP_Upkeep+0x3bc>)
 8004caa:	2200      	movs	r2, #0
 8004cac:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_SEND;
 8004cae:	4b8c      	ldr	r3, [pc, #560]	@ (8004ee0 <ESP_Upkeep+0x3c0>)
 8004cb0:	2202      	movs	r2, #2
 8004cb2:	701a      	strb	r2, [r3, #0]
        TIM2 -> CCR4 = 3000;
 8004cb4:	2380      	movs	r3, #128	@ 0x80
 8004cb6:	05db      	lsls	r3, r3, #23
 8004cb8:	4a8f      	ldr	r2, [pc, #572]	@ (8004ef8 <ESP_Upkeep+0x3d8>)
 8004cba:	641a      	str	r2, [r3, #64]	@ 0x40
        ATCommand = ATCommandArray[ATCounter];
 8004cbc:	4b87      	ldr	r3, [pc, #540]	@ (8004edc <ESP_Upkeep+0x3bc>)
 8004cbe:	781b      	ldrb	r3, [r3, #0]
 8004cc0:	001a      	movs	r2, r3
 8004cc2:	4b82      	ldr	r3, [pc, #520]	@ (8004ecc <ESP_Upkeep+0x3ac>)
 8004cc4:	5c9a      	ldrb	r2, [r3, r2]
 8004cc6:	4b87      	ldr	r3, [pc, #540]	@ (8004ee4 <ESP_Upkeep+0x3c4>)
 8004cc8:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8004cca:	4b87      	ldr	r3, [pc, #540]	@ (8004ee8 <ESP_Upkeep+0x3c8>)
 8004ccc:	2200      	movs	r2, #0
 8004cce:	701a      	strb	r2, [r3, #0]
      }
      if(ReconfigSet){
 8004cd0:	4b8a      	ldr	r3, [pc, #552]	@ (8004efc <ESP_Upkeep+0x3dc>)
 8004cd2:	781b      	ldrb	r3, [r3, #0]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d100      	bne.n	8004cda <ESP_Upkeep+0x1ba>
 8004cd8:	e16b      	b.n	8004fb2 <ESP_Upkeep+0x492>
        memcpy(ATCommandArray, AT_WIFI_RECONFIG, 5);
 8004cda:	4b7c      	ldr	r3, [pc, #496]	@ (8004ecc <ESP_Upkeep+0x3ac>)
 8004cdc:	4a88      	ldr	r2, [pc, #544]	@ (8004f00 <ESP_Upkeep+0x3e0>)
 8004cde:	6811      	ldr	r1, [r2, #0]
 8004ce0:	6019      	str	r1, [r3, #0]
 8004ce2:	7912      	ldrb	r2, [r2, #4]
 8004ce4:	711a      	strb	r2, [r3, #4]
        EspState = ESP_STATE_SEND;
 8004ce6:	4b72      	ldr	r3, [pc, #456]	@ (8004eb0 <ESP_Upkeep+0x390>)
 8004ce8:	2204      	movs	r2, #4
 8004cea:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8004cec:	4b7b      	ldr	r3, [pc, #492]	@ (8004edc <ESP_Upkeep+0x3bc>)
 8004cee:	2200      	movs	r2, #0
 8004cf0:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_RECONFIG;
 8004cf2:	4b7b      	ldr	r3, [pc, #492]	@ (8004ee0 <ESP_Upkeep+0x3c0>)
 8004cf4:	2203      	movs	r2, #3
 8004cf6:	701a      	strb	r2, [r3, #0]
        TIM2 -> CCR4 = 3000;
 8004cf8:	2380      	movs	r3, #128	@ 0x80
 8004cfa:	05db      	lsls	r3, r3, #23
 8004cfc:	4a7e      	ldr	r2, [pc, #504]	@ (8004ef8 <ESP_Upkeep+0x3d8>)
 8004cfe:	641a      	str	r2, [r3, #64]	@ 0x40
        ATCommand = ATCommandArray[ATCounter];
 8004d00:	4b76      	ldr	r3, [pc, #472]	@ (8004edc <ESP_Upkeep+0x3bc>)
 8004d02:	781b      	ldrb	r3, [r3, #0]
 8004d04:	001a      	movs	r2, r3
 8004d06:	4b71      	ldr	r3, [pc, #452]	@ (8004ecc <ESP_Upkeep+0x3ac>)
 8004d08:	5c9a      	ldrb	r2, [r3, r2]
 8004d0a:	4b76      	ldr	r3, [pc, #472]	@ (8004ee4 <ESP_Upkeep+0x3c4>)
 8004d0c:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8004d0e:	4b76      	ldr	r3, [pc, #472]	@ (8004ee8 <ESP_Upkeep+0x3c8>)
 8004d10:	2200      	movs	r2, #0
 8004d12:	701a      	strb	r2, [r3, #0]
      }

    break;
 8004d14:	e14d      	b.n	8004fb2 <ESP_Upkeep+0x492>

    case ESP_STATE_SEND:
        ATSend = AT_Send(ATCommand);
 8004d16:	4b73      	ldr	r3, [pc, #460]	@ (8004ee4 <ESP_Upkeep+0x3c4>)
 8004d18:	781b      	ldrb	r3, [r3, #0]
 8004d1a:	1dfc      	adds	r4, r7, #7
 8004d1c:	0018      	movs	r0, r3
 8004d1e:	f7ff fc6d 	bl	80045fc <AT_Send>
 8004d22:	0003      	movs	r3, r0
 8004d24:	7023      	strb	r3, [r4, #0]
        if(ATSend){
 8004d26:	1dfb      	adds	r3, r7, #7
 8004d28:	781b      	ldrb	r3, [r3, #0]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d100      	bne.n	8004d30 <ESP_Upkeep+0x210>
 8004d2e:	e142      	b.n	8004fb6 <ESP_Upkeep+0x496>
          EspState = ESP_STATE_WAIT_FOR_REPLY;
 8004d30:	4b5f      	ldr	r3, [pc, #380]	@ (8004eb0 <ESP_Upkeep+0x390>)
 8004d32:	2203      	movs	r2, #3
 8004d34:	701a      	strb	r2, [r3, #0]
        }
         break;
 8004d36:	e13e      	b.n	8004fb6 <ESP_Upkeep+0x496>


    case ESP_STATE_WAIT_FOR_REPLY:
      if(TimestampIsReached(ESPTimeStamp)){
 8004d38:	4b62      	ldr	r3, [pc, #392]	@ (8004ec4 <ESP_Upkeep+0x3a4>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	0018      	movs	r0, r3
 8004d3e:	f004 fc25 	bl	800958c <TimestampIsReached>
 8004d42:	1e03      	subs	r3, r0, #0
 8004d44:	d100      	bne.n	8004d48 <ESP_Upkeep+0x228>
 8004d46:	e138      	b.n	8004fba <ESP_Upkeep+0x49a>
        ATReceived = DMA_ProcessBuffer(ATExpectation);
 8004d48:	4b67      	ldr	r3, [pc, #412]	@ (8004ee8 <ESP_Upkeep+0x3c8>)
 8004d4a:	781b      	ldrb	r3, [r3, #0]
 8004d4c:	0018      	movs	r0, r3
 8004d4e:	f7ff fb69 	bl	8004424 <DMA_ProcessBuffer>
 8004d52:	0003      	movs	r3, r0
 8004d54:	001a      	movs	r2, r3
 8004d56:	4b6b      	ldr	r3, [pc, #428]	@ (8004f04 <ESP_Upkeep+0x3e4>)
 8004d58:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, ATExpectation);
 8004d5a:	4b6a      	ldr	r3, [pc, #424]	@ (8004f04 <ESP_Upkeep+0x3e4>)
 8004d5c:	781a      	ldrb	r2, [r3, #0]
 8004d5e:	4b62      	ldr	r3, [pc, #392]	@ (8004ee8 <ESP_Upkeep+0x3c8>)
 8004d60:	781b      	ldrb	r3, [r3, #0]
 8004d62:	1dbc      	adds	r4, r7, #6
 8004d64:	0019      	movs	r1, r3
 8004d66:	0010      	movs	r0, r2
 8004d68:	f7ff fc12 	bl	8004590 <ATCompare>
 8004d6c:	0003      	movs	r3, r0
 8004d6e:	7023      	strb	r3, [r4, #0]
        if(ATReceived == RECEIVE_STATUS_ERROR){
 8004d70:	4b64      	ldr	r3, [pc, #400]	@ (8004f04 <ESP_Upkeep+0x3e4>)
 8004d72:	781b      	ldrb	r3, [r3, #0]
 8004d74:	2b01      	cmp	r3, #1
 8004d76:	d102      	bne.n	8004d7e <ESP_Upkeep+0x25e>
          EspState = ESP_STATE_SEND;
 8004d78:	4b4d      	ldr	r3, [pc, #308]	@ (8004eb0 <ESP_Upkeep+0x390>)
 8004d7a:	2204      	movs	r2, #4
 8004d7c:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_INCOMPLETE){
 8004d7e:	4b61      	ldr	r3, [pc, #388]	@ (8004f04 <ESP_Upkeep+0x3e4>)
 8004d80:	781b      	ldrb	r3, [r3, #0]
 8004d82:	2b03      	cmp	r3, #3
 8004d84:	d106      	bne.n	8004d94 <ESP_Upkeep+0x274>
          ESPTimeStamp = HAL_GetTick() + 10;
 8004d86:	f004 fff3 	bl	8009d70 <HAL_GetTick>
 8004d8a:	0003      	movs	r3, r0
 8004d8c:	330a      	adds	r3, #10
 8004d8e:	001a      	movs	r2, r3
 8004d90:	4b4c      	ldr	r3, [pc, #304]	@ (8004ec4 <ESP_Upkeep+0x3a4>)
 8004d92:	601a      	str	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_TIMEOUT){
 8004d94:	4b5b      	ldr	r3, [pc, #364]	@ (8004f04 <ESP_Upkeep+0x3e4>)
 8004d96:	781b      	ldrb	r3, [r3, #0]
 8004d98:	2b06      	cmp	r3, #6
 8004d9a:	d116      	bne.n	8004dca <ESP_Upkeep+0x2aa>
          if(ATCommand != AT_SENDDATA){
 8004d9c:	4b51      	ldr	r3, [pc, #324]	@ (8004ee4 <ESP_Upkeep+0x3c4>)
 8004d9e:	781b      	ldrb	r3, [r3, #0]
 8004da0:	2b0e      	cmp	r3, #14
 8004da2:	d003      	beq.n	8004dac <ESP_Upkeep+0x28c>
            EspState = ESP_STATE_SEND;
 8004da4:	4b42      	ldr	r3, [pc, #264]	@ (8004eb0 <ESP_Upkeep+0x390>)
 8004da6:	2204      	movs	r2, #4
 8004da8:	701a      	strb	r2, [r3, #0]
 8004daa:	e00e      	b.n	8004dca <ESP_Upkeep+0x2aa>
          }
          else{
            ATCommand = AT_HTTPCPOST;
 8004dac:	4b4d      	ldr	r3, [pc, #308]	@ (8004ee4 <ESP_Upkeep+0x3c4>)
 8004dae:	220d      	movs	r2, #13
 8004db0:	701a      	strb	r2, [r3, #0]
            ATCounter -= 1;
 8004db2:	4b4a      	ldr	r3, [pc, #296]	@ (8004edc <ESP_Upkeep+0x3bc>)
 8004db4:	781b      	ldrb	r3, [r3, #0]
 8004db6:	3b01      	subs	r3, #1
 8004db8:	b2da      	uxtb	r2, r3
 8004dba:	4b48      	ldr	r3, [pc, #288]	@ (8004edc <ESP_Upkeep+0x3bc>)
 8004dbc:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_START;
 8004dbe:	4b4a      	ldr	r3, [pc, #296]	@ (8004ee8 <ESP_Upkeep+0x3c8>)
 8004dc0:	2202      	movs	r2, #2
 8004dc2:	701a      	strb	r2, [r3, #0]
            EspState = ESP_STATE_SEND;
 8004dc4:	4b3a      	ldr	r3, [pc, #232]	@ (8004eb0 <ESP_Upkeep+0x390>)
 8004dc6:	2204      	movs	r2, #4
 8004dc8:	701a      	strb	r2, [r3, #0]
          }
        }
        if(proceed){
 8004dca:	1dbb      	adds	r3, r7, #6
 8004dcc:	781b      	ldrb	r3, [r3, #0]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d100      	bne.n	8004dd4 <ESP_Upkeep+0x2b4>
 8004dd2:	e0f2      	b.n	8004fba <ESP_Upkeep+0x49a>
          EspState = ESP_STATE_NEXT_AT;
 8004dd4:	4b36      	ldr	r3, [pc, #216]	@ (8004eb0 <ESP_Upkeep+0x390>)
 8004dd6:	2205      	movs	r2, #5
 8004dd8:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8004dda:	e0ee      	b.n	8004fba <ESP_Upkeep+0x49a>

    case ESP_STATE_NEXT_AT:
      ATCounter += 1;
 8004ddc:	4b3f      	ldr	r3, [pc, #252]	@ (8004edc <ESP_Upkeep+0x3bc>)
 8004dde:	781b      	ldrb	r3, [r3, #0]
 8004de0:	3301      	adds	r3, #1
 8004de2:	b2da      	uxtb	r2, r3
 8004de4:	4b3d      	ldr	r3, [pc, #244]	@ (8004edc <ESP_Upkeep+0x3bc>)
 8004de6:	701a      	strb	r2, [r3, #0]
      ATCommand = ATCommandArray[ATCounter];
 8004de8:	4b3c      	ldr	r3, [pc, #240]	@ (8004edc <ESP_Upkeep+0x3bc>)
 8004dea:	781b      	ldrb	r3, [r3, #0]
 8004dec:	001a      	movs	r2, r3
 8004dee:	4b37      	ldr	r3, [pc, #220]	@ (8004ecc <ESP_Upkeep+0x3ac>)
 8004df0:	5c9a      	ldrb	r2, [r3, r2]
 8004df2:	4b3c      	ldr	r3, [pc, #240]	@ (8004ee4 <ESP_Upkeep+0x3c4>)
 8004df4:	701a      	strb	r2, [r3, #0]
      if(ATCommand == AT_RESTORE){
 8004df6:	4b3b      	ldr	r3, [pc, #236]	@ (8004ee4 <ESP_Upkeep+0x3c4>)
 8004df8:	781b      	ldrb	r3, [r3, #0]
 8004dfa:	2b03      	cmp	r3, #3
 8004dfc:	d102      	bne.n	8004e04 <ESP_Upkeep+0x2e4>
         ATExpectation = RECEIVE_EXPECTATION_READY;
 8004dfe:	4b3a      	ldr	r3, [pc, #232]	@ (8004ee8 <ESP_Upkeep+0x3c8>)
 8004e00:	2201      	movs	r2, #1
 8004e02:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand == AT_HTTPCPOST){
 8004e04:	4b37      	ldr	r3, [pc, #220]	@ (8004ee4 <ESP_Upkeep+0x3c4>)
 8004e06:	781b      	ldrb	r3, [r3, #0]
 8004e08:	2b0d      	cmp	r3, #13
 8004e0a:	d102      	bne.n	8004e12 <ESP_Upkeep+0x2f2>
        ATExpectation = RECEIVE_EXPECTATION_START;
 8004e0c:	4b36      	ldr	r3, [pc, #216]	@ (8004ee8 <ESP_Upkeep+0x3c8>)
 8004e0e:	2202      	movs	r2, #2
 8004e10:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand != AT_HTTPCPOST && ATCommand != AT_RESTORE){
 8004e12:	4b34      	ldr	r3, [pc, #208]	@ (8004ee4 <ESP_Upkeep+0x3c4>)
 8004e14:	781b      	ldrb	r3, [r3, #0]
 8004e16:	2b0d      	cmp	r3, #13
 8004e18:	d006      	beq.n	8004e28 <ESP_Upkeep+0x308>
 8004e1a:	4b32      	ldr	r3, [pc, #200]	@ (8004ee4 <ESP_Upkeep+0x3c4>)
 8004e1c:	781b      	ldrb	r3, [r3, #0]
 8004e1e:	2b03      	cmp	r3, #3
 8004e20:	d002      	beq.n	8004e28 <ESP_Upkeep+0x308>
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8004e22:	4b31      	ldr	r3, [pc, #196]	@ (8004ee8 <ESP_Upkeep+0x3c8>)
 8004e24:	2200      	movs	r2, #0
 8004e26:	701a      	strb	r2, [r3, #0]
      }
      EspState = ESP_STATE_SEND;
 8004e28:	4b21      	ldr	r3, [pc, #132]	@ (8004eb0 <ESP_Upkeep+0x390>)
 8004e2a:	2204      	movs	r2, #4
 8004e2c:	701a      	strb	r2, [r3, #0]
      if(ATCommand == AT_END){
 8004e2e:	4b2d      	ldr	r3, [pc, #180]	@ (8004ee4 <ESP_Upkeep+0x3c4>)
 8004e30:	781b      	ldrb	r3, [r3, #0]
 8004e32:	2b10      	cmp	r3, #16
 8004e34:	d000      	beq.n	8004e38 <ESP_Upkeep+0x318>
 8004e36:	e0c2      	b.n	8004fbe <ESP_Upkeep+0x49e>
        if(Mode == AT_MODE_SEND){
 8004e38:	4b29      	ldr	r3, [pc, #164]	@ (8004ee0 <ESP_Upkeep+0x3c0>)
 8004e3a:	781b      	ldrb	r3, [r3, #0]
 8004e3c:	2b02      	cmp	r3, #2
 8004e3e:	d10f      	bne.n	8004e60 <ESP_Upkeep+0x340>
          ESPTimeStamp = HAL_GetTick() + 300000;
 8004e40:	f004 ff96 	bl	8009d70 <HAL_GetTick>
 8004e44:	0003      	movs	r3, r0
 8004e46:	4a30      	ldr	r2, [pc, #192]	@ (8004f08 <ESP_Upkeep+0x3e8>)
 8004e48:	189a      	adds	r2, r3, r2
 8004e4a:	4b1e      	ldr	r3, [pc, #120]	@ (8004ec4 <ESP_Upkeep+0x3a4>)
 8004e4c:	601a      	str	r2, [r3, #0]
          TIM2 -> CCR4 = 4000;
 8004e4e:	2380      	movs	r3, #128	@ 0x80
 8004e50:	05db      	lsls	r3, r3, #23
 8004e52:	22fa      	movs	r2, #250	@ 0xfa
 8004e54:	0112      	lsls	r2, r2, #4
 8004e56:	641a      	str	r2, [r3, #64]	@ 0x40
          EspState = ESP_STATE_DEINIT;
 8004e58:	4b15      	ldr	r3, [pc, #84]	@ (8004eb0 <ESP_Upkeep+0x390>)
 8004e5a:	220d      	movs	r2, #13
 8004e5c:	701a      	strb	r2, [r3, #0]
        }
        else{
          EspState = ESP_STATE_RESET;
        }
      }
    break;
 8004e5e:	e0ae      	b.n	8004fbe <ESP_Upkeep+0x49e>
          EspState = ESP_STATE_RESET;
 8004e60:	4b13      	ldr	r3, [pc, #76]	@ (8004eb0 <ESP_Upkeep+0x390>)
 8004e62:	2209      	movs	r2, #9
 8004e64:	701a      	strb	r2, [r3, #0]
    break;
 8004e66:	e0aa      	b.n	8004fbe <ESP_Upkeep+0x49e>

    case ESP_STATE_DEINIT:
      EspTurnedOn = false;
 8004e68:	4b13      	ldr	r3, [pc, #76]	@ (8004eb8 <ESP_Upkeep+0x398>)
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8004e6e:	4b14      	ldr	r3, [pc, #80]	@ (8004ec0 <ESP_Upkeep+0x3a0>)
 8004e70:	2200      	movs	r2, #0
 8004e72:	2101      	movs	r1, #1
 8004e74:	0018      	movs	r0, r3
 8004e76:	f006 fb1a 	bl	800b4ae <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8004e7a:	2001      	movs	r0, #1
 8004e7c:	f004 ff82 	bl	8009d84 <HAL_Delay>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8004e80:	2380      	movs	r3, #128	@ 0x80
 8004e82:	011b      	lsls	r3, r3, #4
 8004e84:	480d      	ldr	r0, [pc, #52]	@ (8004ebc <ESP_Upkeep+0x39c>)
 8004e86:	2200      	movs	r2, #0
 8004e88:	0019      	movs	r1, r3
 8004e8a:	f006 fb10 	bl	800b4ae <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8004e8e:	2001      	movs	r0, #1
 8004e90:	f004 ff78 	bl	8009d84 <HAL_Delay>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 8004e94:	4b0a      	ldr	r3, [pc, #40]	@ (8004ec0 <ESP_Upkeep+0x3a0>)
 8004e96:	2200      	movs	r2, #0
 8004e98:	2102      	movs	r1, #2
 8004e9a:	0018      	movs	r0, r3
 8004e9c:	f006 fb07 	bl	800b4ae <HAL_GPIO_WritePin>
      EspState = ESP_STATE_RESET;
 8004ea0:	4b03      	ldr	r3, [pc, #12]	@ (8004eb0 <ESP_Upkeep+0x390>)
 8004ea2:	2209      	movs	r2, #9
 8004ea4:	701a      	strb	r2, [r3, #0]
      HAL_Delay(1);
 8004ea6:	2001      	movs	r0, #1
 8004ea8:	f004 ff6c 	bl	8009d84 <HAL_Delay>
      break;
 8004eac:	e08a      	b.n	8004fc4 <ESP_Upkeep+0x4a4>
 8004eae:	46c0      	nop			@ (mov r8, r8)
 8004eb0:	20000069 	.word	0x20000069
 8004eb4:	0801b908 	.word	0x0801b908
 8004eb8:	20000537 	.word	0x20000537
 8004ebc:	50000800 	.word	0x50000800
 8004ec0:	50001c00 	.word	0x50001c00
 8004ec4:	200007ec 	.word	0x200007ec
 8004ec8:	20000438 	.word	0x20000438
 8004ecc:	200007e0 	.word	0x200007e0
 8004ed0:	20000538 	.word	0x20000538
 8004ed4:	20000539 	.word	0x20000539
 8004ed8:	20000050 	.word	0x20000050
 8004edc:	200007ea 	.word	0x200007ea
 8004ee0:	200009f7 	.word	0x200009f7
 8004ee4:	200009f6 	.word	0x200009f6
 8004ee8:	200009f5 	.word	0x200009f5
 8004eec:	2000053b 	.word	0x2000053b
 8004ef0:	2000005c 	.word	0x2000005c
 8004ef4:	20000058 	.word	0x20000058
 8004ef8:	00000bb8 	.word	0x00000bb8
 8004efc:	2000053a 	.word	0x2000053a
 8004f00:	20000064 	.word	0x20000064
 8004f04:	2000006b 	.word	0x2000006b
 8004f08:	000493e0 	.word	0x000493e0

    case ESP_STATE_RESET:
      if(TimestampIsReached(ESPTimeStamp) || ReconfigSet){
 8004f0c:	4b2f      	ldr	r3, [pc, #188]	@ (8004fcc <ESP_Upkeep+0x4ac>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	0018      	movs	r0, r3
 8004f12:	f004 fb3b 	bl	800958c <TimestampIsReached>
 8004f16:	1e03      	subs	r3, r0, #0
 8004f18:	d103      	bne.n	8004f22 <ESP_Upkeep+0x402>
 8004f1a:	4b2d      	ldr	r3, [pc, #180]	@ (8004fd0 <ESP_Upkeep+0x4b0>)
 8004f1c:	781b      	ldrb	r3, [r3, #0]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d04f      	beq.n	8004fc2 <ESP_Upkeep+0x4a2>
        if(Mode == AT_MODE_INIT){
 8004f22:	4b2c      	ldr	r3, [pc, #176]	@ (8004fd4 <ESP_Upkeep+0x4b4>)
 8004f24:	781b      	ldrb	r3, [r3, #0]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d105      	bne.n	8004f36 <ESP_Upkeep+0x416>
          InitIsDone = true;
 8004f2a:	4b2b      	ldr	r3, [pc, #172]	@ (8004fd8 <ESP_Upkeep+0x4b8>)
 8004f2c:	2201      	movs	r2, #1
 8004f2e:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_MODE_SELECT;
 8004f30:	4b2a      	ldr	r3, [pc, #168]	@ (8004fdc <ESP_Upkeep+0x4bc>)
 8004f32:	220b      	movs	r2, #11
 8004f34:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_CONFIG){
 8004f36:	4b27      	ldr	r3, [pc, #156]	@ (8004fd4 <ESP_Upkeep+0x4b4>)
 8004f38:	781b      	ldrb	r3, [r3, #0]
 8004f3a:	2b01      	cmp	r3, #1
 8004f3c:	d105      	bne.n	8004f4a <ESP_Upkeep+0x42a>
          ConnectionMade = true;
 8004f3e:	4b28      	ldr	r3, [pc, #160]	@ (8004fe0 <ESP_Upkeep+0x4c0>)
 8004f40:	2201      	movs	r2, #1
 8004f42:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_MODE_SELECT;
 8004f44:	4b25      	ldr	r3, [pc, #148]	@ (8004fdc <ESP_Upkeep+0x4bc>)
 8004f46:	220b      	movs	r2, #11
 8004f48:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_SEND){
 8004f4a:	4b22      	ldr	r3, [pc, #136]	@ (8004fd4 <ESP_Upkeep+0x4b4>)
 8004f4c:	781b      	ldrb	r3, [r3, #0]
 8004f4e:	2b02      	cmp	r3, #2
 8004f50:	d102      	bne.n	8004f58 <ESP_Upkeep+0x438>
          EspState = ESP_STATE_INIT;
 8004f52:	4b22      	ldr	r3, [pc, #136]	@ (8004fdc <ESP_Upkeep+0x4bc>)
 8004f54:	2202      	movs	r2, #2
 8004f56:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_RECONFIG){
 8004f58:	4b1e      	ldr	r3, [pc, #120]	@ (8004fd4 <ESP_Upkeep+0x4b4>)
 8004f5a:	781b      	ldrb	r3, [r3, #0]
 8004f5c:	2b03      	cmp	r3, #3
 8004f5e:	d130      	bne.n	8004fc2 <ESP_Upkeep+0x4a2>
          EspState = ESP_STATE_CONFIG;
 8004f60:	4b1e      	ldr	r3, [pc, #120]	@ (8004fdc <ESP_Upkeep+0x4bc>)
 8004f62:	220e      	movs	r2, #14
 8004f64:	701a      	strb	r2, [r3, #0]
        }
      }

      break;
 8004f66:	e02c      	b.n	8004fc2 <ESP_Upkeep+0x4a2>

    case ESP_STATE_CONFIG:
      Debug("Do nothing until reset");
 8004f68:	4a1e      	ldr	r2, [pc, #120]	@ (8004fe4 <ESP_Upkeep+0x4c4>)
 8004f6a:	4b1f      	ldr	r3, [pc, #124]	@ (8004fe8 <ESP_Upkeep+0x4c8>)
 8004f6c:	0019      	movs	r1, r3
 8004f6e:	2003      	movs	r0, #3
 8004f70:	f004 fb62 	bl	8009638 <CreateLine>
      Process_PC_Config(GetUsbRxPointer());
 8004f74:	f011 fcca 	bl	801690c <GetUsbRxPointer>
 8004f78:	0003      	movs	r3, r0
 8004f7a:	0018      	movs	r0, r3
 8004f7c:	f000 f8ac 	bl	80050d8 <Process_PC_Config>

      break;
 8004f80:	e020      	b.n	8004fc4 <ESP_Upkeep+0x4a4>

    case ESP_STATE_ERROR:
      // Handle error state
      Debug("ESP Error occurred");
 8004f82:	4a1a      	ldr	r2, [pc, #104]	@ (8004fec <ESP_Upkeep+0x4cc>)
 8004f84:	4b18      	ldr	r3, [pc, #96]	@ (8004fe8 <ESP_Upkeep+0x4c8>)
 8004f86:	0019      	movs	r1, r3
 8004f88:	2003      	movs	r0, #3
 8004f8a:	f004 fb55 	bl	8009638 <CreateLine>
      EspState = ESP_STATE_INIT;
 8004f8e:	4b13      	ldr	r3, [pc, #76]	@ (8004fdc <ESP_Upkeep+0x4bc>)
 8004f90:	2202      	movs	r2, #2
 8004f92:	701a      	strb	r2, [r3, #0]
      break;
 8004f94:	e016      	b.n	8004fc4 <ESP_Upkeep+0x4a4>

    default:
      // Handle unexpected state
      Debug("Something went wrong");
 8004f96:	4a16      	ldr	r2, [pc, #88]	@ (8004ff0 <ESP_Upkeep+0x4d0>)
 8004f98:	4b13      	ldr	r3, [pc, #76]	@ (8004fe8 <ESP_Upkeep+0x4c8>)
 8004f9a:	0019      	movs	r1, r3
 8004f9c:	2003      	movs	r0, #3
 8004f9e:	f004 fb4b 	bl	8009638 <CreateLine>
      EspState = ESP_STATE_ERROR;
 8004fa2:	4b0e      	ldr	r3, [pc, #56]	@ (8004fdc <ESP_Upkeep+0x4bc>)
 8004fa4:	2207      	movs	r2, #7
 8004fa6:	701a      	strb	r2, [r3, #0]
      break;
 8004fa8:	e00c      	b.n	8004fc4 <ESP_Upkeep+0x4a4>
      break;
 8004faa:	46c0      	nop			@ (mov r8, r8)
 8004fac:	e00a      	b.n	8004fc4 <ESP_Upkeep+0x4a4>
      break;
 8004fae:	46c0      	nop			@ (mov r8, r8)
 8004fb0:	e008      	b.n	8004fc4 <ESP_Upkeep+0x4a4>
    break;
 8004fb2:	46c0      	nop			@ (mov r8, r8)
 8004fb4:	e006      	b.n	8004fc4 <ESP_Upkeep+0x4a4>
         break;
 8004fb6:	46c0      	nop			@ (mov r8, r8)
 8004fb8:	e004      	b.n	8004fc4 <ESP_Upkeep+0x4a4>
      break;
 8004fba:	46c0      	nop			@ (mov r8, r8)
 8004fbc:	e002      	b.n	8004fc4 <ESP_Upkeep+0x4a4>
    break;
 8004fbe:	46c0      	nop			@ (mov r8, r8)
 8004fc0:	e000      	b.n	8004fc4 <ESP_Upkeep+0x4a4>
      break;
 8004fc2:	46c0      	nop			@ (mov r8, r8)
  }
}
 8004fc4:	46c0      	nop			@ (mov r8, r8)
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	b003      	add	sp, #12
 8004fca:	bd90      	pop	{r4, r7, pc}
 8004fcc:	200007ec 	.word	0x200007ec
 8004fd0:	2000053a 	.word	0x2000053a
 8004fd4:	200009f7 	.word	0x200009f7
 8004fd8:	20000538 	.word	0x20000538
 8004fdc:	20000069 	.word	0x20000069
 8004fe0:	2000053b 	.word	0x2000053b
 8004fe4:	0801b0e4 	.word	0x0801b0e4
 8004fe8:	0801ac78 	.word	0x0801ac78
 8004fec:	0801b0fc 	.word	0x0801b0fc
 8004ff0:	0801b110 	.word	0x0801b110

08004ff4 <I2CSensors_Init>:
static I2C_HandleTypeDef* SensorI2C = NULL;

static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);
static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);

void I2CSensors_Init(I2C_HandleTypeDef* sensorI2C) {
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b082      	sub	sp, #8
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
    SensorI2C = sensorI2C;
 8004ffc:	4b09      	ldr	r3, [pc, #36]	@ (8005024 <I2CSensors_Init+0x30>)
 8004ffe:	687a      	ldr	r2, [r7, #4]
 8005000:	601a      	str	r2, [r3, #0]
    HT_Init(ReadI2C, WriteI2C);
 8005002:	4a09      	ldr	r2, [pc, #36]	@ (8005028 <I2CSensors_Init+0x34>)
 8005004:	4b09      	ldr	r3, [pc, #36]	@ (800502c <I2CSensors_Init+0x38>)
 8005006:	0011      	movs	r1, r2
 8005008:	0018      	movs	r0, r3
 800500a:	f000 fdd7 	bl	8005bbc <HT_Init>
    Gas_Init(ReadI2C, WriteI2C);
 800500e:	4a06      	ldr	r2, [pc, #24]	@ (8005028 <I2CSensors_Init+0x34>)
 8005010:	4b06      	ldr	r3, [pc, #24]	@ (800502c <I2CSensors_Init+0x38>)
 8005012:	0011      	movs	r1, r2
 8005014:	0018      	movs	r0, r3
 8005016:	f000 fc41 	bl	800589c <Gas_Init>
}
 800501a:	46c0      	nop			@ (mov r8, r8)
 800501c:	46bd      	mov	sp, r7
 800501e:	b002      	add	sp, #8
 8005020:	bd80      	pop	{r7, pc}
 8005022:	46c0      	nop			@ (mov r8, r8)
 8005024:	200009fc 	.word	0x200009fc
 8005028:	08005085 	.word	0x08005085
 800502c:	08005031 	.word	0x08005031

08005030 <ReadI2C>:

static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8005030:	b5b0      	push	{r4, r5, r7, lr}
 8005032:	b084      	sub	sp, #16
 8005034:	af00      	add	r7, sp, #0
 8005036:	6039      	str	r1, [r7, #0]
 8005038:	0011      	movs	r1, r2
 800503a:	1dfb      	adds	r3, r7, #7
 800503c:	1c02      	adds	r2, r0, #0
 800503e:	701a      	strb	r2, [r3, #0]
 8005040:	1dbb      	adds	r3, r7, #6
 8005042:	1c0a      	adds	r2, r1, #0
 8005044:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Receive_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 8005046:	4b0e      	ldr	r3, [pc, #56]	@ (8005080 <ReadI2C+0x50>)
 8005048:	6818      	ldr	r0, [r3, #0]
 800504a:	1dfb      	adds	r3, r7, #7
 800504c:	781b      	ldrb	r3, [r3, #0]
 800504e:	b29b      	uxth	r3, r3
 8005050:	18db      	adds	r3, r3, r3
 8005052:	b299      	uxth	r1, r3
 8005054:	1dbb      	adds	r3, r7, #6
 8005056:	781b      	ldrb	r3, [r3, #0]
 8005058:	b29b      	uxth	r3, r3
 800505a:	250f      	movs	r5, #15
 800505c:	197c      	adds	r4, r7, r5
 800505e:	683a      	ldr	r2, [r7, #0]
 8005060:	f006 fbde 	bl	800b820 <HAL_I2C_Master_Receive_DMA>
 8005064:	0003      	movs	r3, r0
 8005066:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 8005068:	197b      	adds	r3, r7, r5
 800506a:	781b      	ldrb	r3, [r3, #0]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d001      	beq.n	8005074 <ReadI2C+0x44>
        return false;
 8005070:	2300      	movs	r3, #0
 8005072:	e000      	b.n	8005076 <ReadI2C+0x46>
    }
    return true;
 8005074:	2301      	movs	r3, #1
}
 8005076:	0018      	movs	r0, r3
 8005078:	46bd      	mov	sp, r7
 800507a:	b004      	add	sp, #16
 800507c:	bdb0      	pop	{r4, r5, r7, pc}
 800507e:	46c0      	nop			@ (mov r8, r8)
 8005080:	200009fc 	.word	0x200009fc

08005084 <WriteI2C>:

static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8005084:	b5b0      	push	{r4, r5, r7, lr}
 8005086:	b084      	sub	sp, #16
 8005088:	af00      	add	r7, sp, #0
 800508a:	6039      	str	r1, [r7, #0]
 800508c:	0011      	movs	r1, r2
 800508e:	1dfb      	adds	r3, r7, #7
 8005090:	1c02      	adds	r2, r0, #0
 8005092:	701a      	strb	r2, [r3, #0]
 8005094:	1dbb      	adds	r3, r7, #6
 8005096:	1c0a      	adds	r2, r1, #0
 8005098:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Transmit_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 800509a:	4b0e      	ldr	r3, [pc, #56]	@ (80050d4 <WriteI2C+0x50>)
 800509c:	6818      	ldr	r0, [r3, #0]
 800509e:	1dfb      	adds	r3, r7, #7
 80050a0:	781b      	ldrb	r3, [r3, #0]
 80050a2:	b29b      	uxth	r3, r3
 80050a4:	18db      	adds	r3, r3, r3
 80050a6:	b299      	uxth	r1, r3
 80050a8:	1dbb      	adds	r3, r7, #6
 80050aa:	781b      	ldrb	r3, [r3, #0]
 80050ac:	b29b      	uxth	r3, r3
 80050ae:	250f      	movs	r5, #15
 80050b0:	197c      	adds	r4, r7, r5
 80050b2:	683a      	ldr	r2, [r7, #0]
 80050b4:	f006 faae 	bl	800b614 <HAL_I2C_Master_Transmit_DMA>
 80050b8:	0003      	movs	r3, r0
 80050ba:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 80050bc:	197b      	adds	r3, r7, r5
 80050be:	781b      	ldrb	r3, [r3, #0]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d001      	beq.n	80050c8 <WriteI2C+0x44>
        return false;
 80050c4:	2300      	movs	r3, #0
 80050c6:	e000      	b.n	80050ca <WriteI2C+0x46>
    }
    return true;
 80050c8:	2301      	movs	r3, #1
}
 80050ca:	0018      	movs	r0, r3
 80050cc:	46bd      	mov	sp, r7
 80050ce:	b004      	add	sp, #16
 80050d0:	bdb0      	pop	{r4, r5, r7, pc}
 80050d2:	46c0      	nop			@ (mov r8, r8)
 80050d4:	200009fc 	.word	0x200009fc

080050d8 <Process_PC_Config>:
// Command value:   0 = ...
//                  1 = ...
//**************************************************************************************************

void Process_PC_Config(uint8_t* data) //, uint16_t length)
{
 80050d8:	b590      	push	{r4, r7, lr}
 80050da:	b0c3      	sub	sp, #268	@ 0x10c
 80050dc:	af3e      	add	r7, sp, #248	@ 0xf8
 80050de:	6078      	str	r0, [r7, #4]
    uint32_t length = GetUsbRxDataSize();
 80050e0:	f011 fc34 	bl	801694c <GetUsbRxDataSize>
 80050e4:	0003      	movs	r3, r0
 80050e6:	60fb      	str	r3, [r7, #12]
    if (length > 5)
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2b05      	cmp	r3, #5
 80050ec:	d971      	bls.n	80051d2 <Process_PC_Config+0xfa>
    {
        uint8_t* message = (unsigned char*)strstr((const char*)data, PREABMLE);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2123      	movs	r1, #35	@ 0x23
 80050f2:	0018      	movs	r0, r3
 80050f4:	f012 feb2 	bl	8017e5c <strchr>
 80050f8:	0003      	movs	r3, r0
 80050fa:	60bb      	str	r3, [r7, #8]
        if(message != NULL)// && strlen((const char*)message) > 5)
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d065      	beq.n	80051ce <Process_PC_Config+0xf6>
        {
            received.Command = message[1];
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	785a      	ldrb	r2, [r3, #1]
 8005106:	4b34      	ldr	r3, [pc, #208]	@ (80051d8 <Process_PC_Config+0x100>)
 8005108:	701a      	strb	r2, [r3, #0]
            received.PayloadLength = message[2];
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	789a      	ldrb	r2, [r3, #2]
 800510e:	4b32      	ldr	r3, [pc, #200]	@ (80051d8 <Process_PC_Config+0x100>)
 8005110:	705a      	strb	r2, [r3, #1]
            if (length >= (uint32_t)(received.PayloadLength + HEADER_SIZE + CRC_SIZE))
 8005112:	4b31      	ldr	r3, [pc, #196]	@ (80051d8 <Process_PC_Config+0x100>)
 8005114:	785b      	ldrb	r3, [r3, #1]
 8005116:	3305      	adds	r3, #5
 8005118:	001a      	movs	r2, r3
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	4293      	cmp	r3, r2
 800511e:	d351      	bcc.n	80051c4 <Process_PC_Config+0xec>
            {
                memcpy(received.Payload, &message[3], received.PayloadLength);
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	1cd9      	adds	r1, r3, #3
 8005124:	4b2c      	ldr	r3, [pc, #176]	@ (80051d8 <Process_PC_Config+0x100>)
 8005126:	785b      	ldrb	r3, [r3, #1]
 8005128:	001a      	movs	r2, r3
 800512a:	4b2c      	ldr	r3, [pc, #176]	@ (80051dc <Process_PC_Config+0x104>)
 800512c:	0018      	movs	r0, r3
 800512e:	f012 ff57 	bl	8017fe0 <memcpy>
                received.Crc = message[3 + received.PayloadLength] << 8 | message[3 + received.PayloadLength + 1];
 8005132:	4b29      	ldr	r3, [pc, #164]	@ (80051d8 <Process_PC_Config+0x100>)
 8005134:	785b      	ldrb	r3, [r3, #1]
 8005136:	3303      	adds	r3, #3
 8005138:	001a      	movs	r2, r3
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	189b      	adds	r3, r3, r2
 800513e:	781b      	ldrb	r3, [r3, #0]
 8005140:	021b      	lsls	r3, r3, #8
 8005142:	b21a      	sxth	r2, r3
 8005144:	4b24      	ldr	r3, [pc, #144]	@ (80051d8 <Process_PC_Config+0x100>)
 8005146:	785b      	ldrb	r3, [r3, #1]
 8005148:	3304      	adds	r3, #4
 800514a:	68b9      	ldr	r1, [r7, #8]
 800514c:	18cb      	adds	r3, r1, r3
 800514e:	781b      	ldrb	r3, [r3, #0]
 8005150:	b21b      	sxth	r3, r3
 8005152:	4313      	orrs	r3, r2
 8005154:	b21b      	sxth	r3, r3
 8005156:	b299      	uxth	r1, r3
 8005158:	4a1f      	ldr	r2, [pc, #124]	@ (80051d8 <Process_PC_Config+0x100>)
 800515a:	2381      	movs	r3, #129	@ 0x81
 800515c:	005b      	lsls	r3, r3, #1
 800515e:	52d1      	strh	r1, [r2, r3]

                if (received.Crc != CRC16_ARC(message, received.PayloadLength + 3))
 8005160:	4a1d      	ldr	r2, [pc, #116]	@ (80051d8 <Process_PC_Config+0x100>)
 8005162:	2381      	movs	r3, #129	@ 0x81
 8005164:	005b      	lsls	r3, r3, #1
 8005166:	5ad4      	ldrh	r4, [r2, r3]
 8005168:	4b1b      	ldr	r3, [pc, #108]	@ (80051d8 <Process_PC_Config+0x100>)
 800516a:	785b      	ldrb	r3, [r3, #1]
 800516c:	3303      	adds	r3, #3
 800516e:	b29a      	uxth	r2, r3
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	0011      	movs	r1, r2
 8005174:	0018      	movs	r0, r3
 8005176:	f000 f93f 	bl	80053f8 <CRC16_ARC>
 800517a:	0003      	movs	r3, r0
 800517c:	429c      	cmp	r4, r3
 800517e:	d007      	beq.n	8005190 <Process_PC_Config+0xb8>
                {
                    Create_Message(ERROR, received.Payload, received.PayloadLength);
 8005180:	4b15      	ldr	r3, [pc, #84]	@ (80051d8 <Process_PC_Config+0x100>)
 8005182:	785a      	ldrb	r2, [r3, #1]
 8005184:	4b15      	ldr	r3, [pc, #84]	@ (80051dc <Process_PC_Config+0x104>)
 8005186:	0019      	movs	r1, r3
 8005188:	2001      	movs	r0, #1
 800518a:	f000 f8e3 	bl	8005354 <Create_Message>
 800518e:	e016      	b.n	80051be <Process_PC_Config+0xe6>
                    //Handel het foutief ontvangen bericht af
                }
                else
                {
                    //Handel het correct ontvangen bericht af
                    ProcessCmd(received);
 8005190:	4c11      	ldr	r4, [pc, #68]	@ (80051d8 <Process_PC_Config+0x100>)
 8005192:	466b      	mov	r3, sp
 8005194:	0018      	movs	r0, r3
 8005196:	0023      	movs	r3, r4
 8005198:	3310      	adds	r3, #16
 800519a:	22f4      	movs	r2, #244	@ 0xf4
 800519c:	0019      	movs	r1, r3
 800519e:	f012 ff1f 	bl	8017fe0 <memcpy>
 80051a2:	6820      	ldr	r0, [r4, #0]
 80051a4:	6861      	ldr	r1, [r4, #4]
 80051a6:	68a2      	ldr	r2, [r4, #8]
 80051a8:	68e3      	ldr	r3, [r4, #12]
 80051aa:	f000 f819 	bl	80051e0 <ProcessCmd>
                    Create_Message(received.Command, received.Payload, received.PayloadLength);
 80051ae:	4b0a      	ldr	r3, [pc, #40]	@ (80051d8 <Process_PC_Config+0x100>)
 80051b0:	7818      	ldrb	r0, [r3, #0]
 80051b2:	4b09      	ldr	r3, [pc, #36]	@ (80051d8 <Process_PC_Config+0x100>)
 80051b4:	785a      	ldrb	r2, [r3, #1]
 80051b6:	4b09      	ldr	r3, [pc, #36]	@ (80051dc <Process_PC_Config+0x104>)
 80051b8:	0019      	movs	r1, r3
 80051ba:	f000 f8cb 	bl	8005354 <Create_Message>
                }
                ResetUsbRxDataSize();
 80051be:	f011 fbad 	bl	801691c <ResetUsbRxDataSize>
                return;
 80051c2:	e006      	b.n	80051d2 <Process_PC_Config+0xfa>
            }
            GetUsbRxNextChunk(length);
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	0018      	movs	r0, r3
 80051c8:	f011 fbca 	bl	8016960 <GetUsbRxNextChunk>
 80051cc:	e001      	b.n	80051d2 <Process_PC_Config+0xfa>
        }
        else
        {
            ResetUsbRxDataSize();
 80051ce:	f011 fba5 	bl	801691c <ResetUsbRxDataSize>
        }
    }
}
 80051d2:	46bd      	mov	sp, r7
 80051d4:	b005      	add	sp, #20
 80051d6:	bd90      	pop	{r4, r7, pc}
 80051d8:	20000a00 	.word	0x20000a00
 80051dc:	20000a02 	.word	0x20000a02

080051e0 <ProcessCmd>:

void ProcessCmd(Receive_MSG msg)
{
 80051e0:	b084      	sub	sp, #16
 80051e2:	b5b0      	push	{r4, r5, r7, lr}
 80051e4:	b082      	sub	sp, #8
 80051e6:	af00      	add	r7, sp, #0
 80051e8:	2518      	movs	r5, #24
 80051ea:	197c      	adds	r4, r7, r5
 80051ec:	6020      	str	r0, [r4, #0]
 80051ee:	6061      	str	r1, [r4, #4]
 80051f0:	60a2      	str	r2, [r4, #8]
 80051f2:	60e3      	str	r3, [r4, #12]
    switch (msg.Command)
 80051f4:	197b      	adds	r3, r7, r5
 80051f6:	781b      	ldrb	r3, [r3, #0]
 80051f8:	2bfe      	cmp	r3, #254	@ 0xfe
 80051fa:	d100      	bne.n	80051fe <ProcessCmd+0x1e>
 80051fc:	e06f      	b.n	80052de <ProcessCmd+0xfe>
 80051fe:	dd00      	ble.n	8005202 <ProcessCmd+0x22>
 8005200:	e08f      	b.n	8005322 <ProcessCmd+0x142>
 8005202:	2b0c      	cmp	r3, #12
 8005204:	dc0a      	bgt.n	800521c <ProcessCmd+0x3c>
 8005206:	2b00      	cmp	r3, #0
 8005208:	da00      	bge.n	800520c <ProcessCmd+0x2c>
 800520a:	e08a      	b.n	8005322 <ProcessCmd+0x142>
 800520c:	2b0c      	cmp	r3, #12
 800520e:	d900      	bls.n	8005212 <ProcessCmd+0x32>
 8005210:	e087      	b.n	8005322 <ProcessCmd+0x142>
 8005212:	009a      	lsls	r2, r3, #2
 8005214:	4b46      	ldr	r3, [pc, #280]	@ (8005330 <ProcessCmd+0x150>)
 8005216:	18d3      	adds	r3, r2, r3
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	469f      	mov	pc, r3
 800521c:	2bfd      	cmp	r3, #253	@ 0xfd
 800521e:	d058      	beq.n	80052d2 <ProcessCmd+0xf2>
                ClearEEprom(EEPROM_START, EEPROM_SIZE);
            }
            break;
        }
    }
}
 8005220:	e07f      	b.n	8005322 <ProcessCmd+0x142>
            WriteUint8ArrayEepromSafe(BoxConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005222:	2118      	movs	r1, #24
 8005224:	187b      	adds	r3, r7, r1
 8005226:	785b      	ldrb	r3, [r3, #1]
 8005228:	001a      	movs	r2, r3
 800522a:	187b      	adds	r3, r7, r1
 800522c:	1c99      	adds	r1, r3, #2
 800522e:	4841      	ldr	r0, [pc, #260]	@ (8005334 <ProcessCmd+0x154>)
 8005230:	230c      	movs	r3, #12
 8005232:	f7fe f9c3 	bl	80035bc <WriteUint8ArrayEepromSafe>
        break;
 8005236:	e074      	b.n	8005322 <ProcessCmd+0x142>
            WriteUint8ArrayEepromSafe(TempConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005238:	2118      	movs	r1, #24
 800523a:	187b      	adds	r3, r7, r1
 800523c:	785b      	ldrb	r3, [r3, #1]
 800523e:	001a      	movs	r2, r3
 8005240:	187b      	adds	r3, r7, r1
 8005242:	1c99      	adds	r1, r3, #2
 8005244:	483c      	ldr	r0, [pc, #240]	@ (8005338 <ProcessCmd+0x158>)
 8005246:	230c      	movs	r3, #12
 8005248:	f7fe f9b8 	bl	80035bc <WriteUint8ArrayEepromSafe>
        break;
 800524c:	e069      	b.n	8005322 <ProcessCmd+0x142>
            WriteUint8ArrayEepromSafe(HumidConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800524e:	2118      	movs	r1, #24
 8005250:	187b      	adds	r3, r7, r1
 8005252:	785b      	ldrb	r3, [r3, #1]
 8005254:	001a      	movs	r2, r3
 8005256:	187b      	adds	r3, r7, r1
 8005258:	1c99      	adds	r1, r3, #2
 800525a:	4838      	ldr	r0, [pc, #224]	@ (800533c <ProcessCmd+0x15c>)
 800525c:	230c      	movs	r3, #12
 800525e:	f7fe f9ad 	bl	80035bc <WriteUint8ArrayEepromSafe>
        break;
 8005262:	e05e      	b.n	8005322 <ProcessCmd+0x142>
            WriteUint8ArrayEepromSafe(VocRawConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005264:	2118      	movs	r1, #24
 8005266:	187b      	adds	r3, r7, r1
 8005268:	785b      	ldrb	r3, [r3, #1]
 800526a:	001a      	movs	r2, r3
 800526c:	187b      	adds	r3, r7, r1
 800526e:	1c99      	adds	r1, r3, #2
 8005270:	4833      	ldr	r0, [pc, #204]	@ (8005340 <ProcessCmd+0x160>)
 8005272:	230c      	movs	r3, #12
 8005274:	f7fe f9a2 	bl	80035bc <WriteUint8ArrayEepromSafe>
        break;
 8005278:	e053      	b.n	8005322 <ProcessCmd+0x142>
            WriteUint8ArrayEepromSafe(VocIndexConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800527a:	2118      	movs	r1, #24
 800527c:	187b      	adds	r3, r7, r1
 800527e:	785b      	ldrb	r3, [r3, #1]
 8005280:	001a      	movs	r2, r3
 8005282:	187b      	adds	r3, r7, r1
 8005284:	1c99      	adds	r1, r3, #2
 8005286:	482f      	ldr	r0, [pc, #188]	@ (8005344 <ProcessCmd+0x164>)
 8005288:	230c      	movs	r3, #12
 800528a:	f7fe f997 	bl	80035bc <WriteUint8ArrayEepromSafe>
        break;
 800528e:	e048      	b.n	8005322 <ProcessCmd+0x142>
            WriteUint8ArrayEepromSafe(dBaConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005290:	2118      	movs	r1, #24
 8005292:	187b      	adds	r3, r7, r1
 8005294:	785b      	ldrb	r3, [r3, #1]
 8005296:	001a      	movs	r2, r3
 8005298:	187b      	adds	r3, r7, r1
 800529a:	1c99      	adds	r1, r3, #2
 800529c:	482a      	ldr	r0, [pc, #168]	@ (8005348 <ProcessCmd+0x168>)
 800529e:	230c      	movs	r3, #12
 80052a0:	f7fe f98c 	bl	80035bc <WriteUint8ArrayEepromSafe>
        break;
 80052a4:	e03d      	b.n	8005322 <ProcessCmd+0x142>
            WriteUint8ArrayEepromSafe(dBcConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80052a6:	2118      	movs	r1, #24
 80052a8:	187b      	adds	r3, r7, r1
 80052aa:	785b      	ldrb	r3, [r3, #1]
 80052ac:	001a      	movs	r2, r3
 80052ae:	187b      	adds	r3, r7, r1
 80052b0:	1c99      	adds	r1, r3, #2
 80052b2:	4826      	ldr	r0, [pc, #152]	@ (800534c <ProcessCmd+0x16c>)
 80052b4:	230c      	movs	r3, #12
 80052b6:	f7fe f981 	bl	80035bc <WriteUint8ArrayEepromSafe>
        break;
 80052ba:	e032      	b.n	8005322 <ProcessCmd+0x142>
            WriteUint8ArrayEepromSafe(CustomNameConfigAddr, msg.Payload, msg.PayloadLength, CustomNameMaxLength);
 80052bc:	2118      	movs	r1, #24
 80052be:	187b      	adds	r3, r7, r1
 80052c0:	785b      	ldrb	r3, [r3, #1]
 80052c2:	001a      	movs	r2, r3
 80052c4:	187b      	adds	r3, r7, r1
 80052c6:	1c99      	adds	r1, r3, #2
 80052c8:	4821      	ldr	r0, [pc, #132]	@ (8005350 <ProcessCmd+0x170>)
 80052ca:	231e      	movs	r3, #30
 80052cc:	f7fe f976 	bl	80035bc <WriteUint8ArrayEepromSafe>
        break;
 80052d0:	e027      	b.n	8005322 <ProcessCmd+0x142>
            ClearEEprom(EEPromStartAddr, ConfigSize);
 80052d2:	4b18      	ldr	r3, [pc, #96]	@ (8005334 <ProcessCmd+0x154>)
 80052d4:	21ba      	movs	r1, #186	@ 0xba
 80052d6:	0018      	movs	r0, r3
 80052d8:	f7fe f9b6 	bl	8003648 <ClearEEprom>
        break;
 80052dc:	e021      	b.n	8005322 <ProcessCmd+0x142>
            uint16_t size = ((uint16_t)msg.Payload[0] << 8 | msg.Payload[1]);
 80052de:	2118      	movs	r1, #24
 80052e0:	187b      	adds	r3, r7, r1
 80052e2:	789b      	ldrb	r3, [r3, #2]
 80052e4:	021b      	lsls	r3, r3, #8
 80052e6:	b21a      	sxth	r2, r3
 80052e8:	187b      	adds	r3, r7, r1
 80052ea:	78db      	ldrb	r3, [r3, #3]
 80052ec:	b21b      	sxth	r3, r3
 80052ee:	4313      	orrs	r3, r2
 80052f0:	b21a      	sxth	r2, r3
 80052f2:	1dbb      	adds	r3, r7, #6
 80052f4:	801a      	strh	r2, [r3, #0]
            if (size < EEPROM_SIZE)
 80052f6:	1dbb      	adds	r3, r7, #6
 80052f8:	881a      	ldrh	r2, [r3, #0]
 80052fa:	23c0      	movs	r3, #192	@ 0xc0
 80052fc:	015b      	lsls	r3, r3, #5
 80052fe:	429a      	cmp	r2, r3
 8005300:	d207      	bcs.n	8005312 <ProcessCmd+0x132>
                ClearEEprom(EEPromStartAddr, size);
 8005302:	1dbb      	adds	r3, r7, #6
 8005304:	881b      	ldrh	r3, [r3, #0]
 8005306:	4a0b      	ldr	r2, [pc, #44]	@ (8005334 <ProcessCmd+0x154>)
 8005308:	0019      	movs	r1, r3
 800530a:	0010      	movs	r0, r2
 800530c:	f7fe f99c 	bl	8003648 <ClearEEprom>
            break;
 8005310:	e006      	b.n	8005320 <ProcessCmd+0x140>
                ClearEEprom(EEPROM_START, EEPROM_SIZE);
 8005312:	23c0      	movs	r3, #192	@ 0xc0
 8005314:	015b      	lsls	r3, r3, #5
 8005316:	4a07      	ldr	r2, [pc, #28]	@ (8005334 <ProcessCmd+0x154>)
 8005318:	0019      	movs	r1, r3
 800531a:	0010      	movs	r0, r2
 800531c:	f7fe f994 	bl	8003648 <ClearEEprom>
            break;
 8005320:	46c0      	nop			@ (mov r8, r8)
}
 8005322:	46c0      	nop			@ (mov r8, r8)
 8005324:	46bd      	mov	sp, r7
 8005326:	b002      	add	sp, #8
 8005328:	bcb0      	pop	{r4, r5, r7}
 800532a:	bc08      	pop	{r3}
 800532c:	b004      	add	sp, #16
 800532e:	4718      	bx	r3
 8005330:	0801b944 	.word	0x0801b944
 8005334:	08080000 	.word	0x08080000
 8005338:	0808000c 	.word	0x0808000c
 800533c:	08080018 	.word	0x08080018
 8005340:	08080024 	.word	0x08080024
 8005344:	08080030 	.word	0x08080030
 8005348:	0808003c 	.word	0x0808003c
 800534c:	08080048 	.word	0x08080048
 8005350:	08080090 	.word	0x08080090

08005354 <Create_Message>:

void Create_Message(uint8_t command, uint8_t *payload, uint8_t payloadLength)
{
 8005354:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005356:	b085      	sub	sp, #20
 8005358:	af00      	add	r7, sp, #0
 800535a:	6039      	str	r1, [r7, #0]
 800535c:	0011      	movs	r1, r2
 800535e:	1dfb      	adds	r3, r7, #7
 8005360:	1c02      	adds	r2, r0, #0
 8005362:	701a      	strb	r2, [r3, #0]
 8005364:	1dbb      	adds	r3, r7, #6
 8005366:	1c0a      	adds	r2, r1, #0
 8005368:	701a      	strb	r2, [r3, #0]
    static uint8_t message[TOTAL_BUFFER_SIZE];
    message[0] = (uint8_t)PREABMLE[0];
 800536a:	2223      	movs	r2, #35	@ 0x23
 800536c:	4b20      	ldr	r3, [pc, #128]	@ (80053f0 <Create_Message+0x9c>)
 800536e:	701a      	strb	r2, [r3, #0]
    message[1] = command;
 8005370:	4b1f      	ldr	r3, [pc, #124]	@ (80053f0 <Create_Message+0x9c>)
 8005372:	1dfa      	adds	r2, r7, #7
 8005374:	7812      	ldrb	r2, [r2, #0]
 8005376:	705a      	strb	r2, [r3, #1]
    message[2] = payloadLength;
 8005378:	4b1d      	ldr	r3, [pc, #116]	@ (80053f0 <Create_Message+0x9c>)
 800537a:	1dba      	adds	r2, r7, #6
 800537c:	7812      	ldrb	r2, [r2, #0]
 800537e:	709a      	strb	r2, [r3, #2]
    memcpy(&message[3], payload, payloadLength);
 8005380:	1dbb      	adds	r3, r7, #6
 8005382:	781a      	ldrb	r2, [r3, #0]
 8005384:	6839      	ldr	r1, [r7, #0]
 8005386:	4b1b      	ldr	r3, [pc, #108]	@ (80053f4 <Create_Message+0xa0>)
 8005388:	0018      	movs	r0, r3
 800538a:	f012 fe29 	bl	8017fe0 <memcpy>
    uint16_t crcIndex = (HEADER_SIZE + payloadLength);
 800538e:	1dbb      	adds	r3, r7, #6
 8005390:	781b      	ldrb	r3, [r3, #0]
 8005392:	b29a      	uxth	r2, r3
 8005394:	250e      	movs	r5, #14
 8005396:	197b      	adds	r3, r7, r5
 8005398:	3203      	adds	r2, #3
 800539a:	801a      	strh	r2, [r3, #0]
    uint16_t calculatedCRC = CRC16_ARC(message, crcIndex);
 800539c:	260c      	movs	r6, #12
 800539e:	19bc      	adds	r4, r7, r6
 80053a0:	197b      	adds	r3, r7, r5
 80053a2:	881a      	ldrh	r2, [r3, #0]
 80053a4:	4b12      	ldr	r3, [pc, #72]	@ (80053f0 <Create_Message+0x9c>)
 80053a6:	0011      	movs	r1, r2
 80053a8:	0018      	movs	r0, r3
 80053aa:	f000 f825 	bl	80053f8 <CRC16_ARC>
 80053ae:	0003      	movs	r3, r0
 80053b0:	8023      	strh	r3, [r4, #0]
    message[crcIndex] = calculatedCRC >> 8;
 80053b2:	0030      	movs	r0, r6
 80053b4:	183b      	adds	r3, r7, r0
 80053b6:	881b      	ldrh	r3, [r3, #0]
 80053b8:	0a1b      	lsrs	r3, r3, #8
 80053ba:	b29a      	uxth	r2, r3
 80053bc:	197b      	adds	r3, r7, r5
 80053be:	881b      	ldrh	r3, [r3, #0]
 80053c0:	b2d1      	uxtb	r1, r2
 80053c2:	4a0b      	ldr	r2, [pc, #44]	@ (80053f0 <Create_Message+0x9c>)
 80053c4:	54d1      	strb	r1, [r2, r3]
    message[crcIndex + 1] = calculatedCRC & 0xFF;
 80053c6:	197b      	adds	r3, r7, r5
 80053c8:	881b      	ldrh	r3, [r3, #0]
 80053ca:	3301      	adds	r3, #1
 80053cc:	183a      	adds	r2, r7, r0
 80053ce:	8812      	ldrh	r2, [r2, #0]
 80053d0:	b2d1      	uxtb	r1, r2
 80053d2:	4a07      	ldr	r2, [pc, #28]	@ (80053f0 <Create_Message+0x9c>)
 80053d4:	54d1      	strb	r1, [r2, r3]
    CDC_Transmit_FS(message, (crcIndex + 2));
 80053d6:	197b      	adds	r3, r7, r5
 80053d8:	881b      	ldrh	r3, [r3, #0]
 80053da:	3302      	adds	r3, #2
 80053dc:	b29a      	uxth	r2, r3
 80053de:	4b04      	ldr	r3, [pc, #16]	@ (80053f0 <Create_Message+0x9c>)
 80053e0:	0011      	movs	r1, r2
 80053e2:	0018      	movs	r0, r3
 80053e4:	f011 fa58 	bl	8016898 <CDC_Transmit_FS>
}
 80053e8:	46c0      	nop			@ (mov r8, r8)
 80053ea:	46bd      	mov	sp, r7
 80053ec:	b005      	add	sp, #20
 80053ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80053f0:	20000b04 	.word	0x20000b04
 80053f4:	20000b07 	.word	0x20000b07

080053f8 <CRC16_ARC>:

static uint16_t CRC16_ARC(uint8_t data[], uint16_t size)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b086      	sub	sp, #24
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
 8005400:	000a      	movs	r2, r1
 8005402:	1cbb      	adds	r3, r7, #2
 8005404:	801a      	strh	r2, [r3, #0]
    uint16_t crc = 0;
 8005406:	2316      	movs	r3, #22
 8005408:	18fb      	adds	r3, r7, r3
 800540a:	2200      	movs	r2, #0
 800540c:	801a      	strh	r2, [r3, #0]

    for (int i = 0; i < size; i++)
 800540e:	2300      	movs	r3, #0
 8005410:	613b      	str	r3, [r7, #16]
 8005412:	e02e      	b.n	8005472 <CRC16_ARC+0x7a>
    {
        crc ^= data[i];
 8005414:	693b      	ldr	r3, [r7, #16]
 8005416:	687a      	ldr	r2, [r7, #4]
 8005418:	18d3      	adds	r3, r2, r3
 800541a:	781b      	ldrb	r3, [r3, #0]
 800541c:	0019      	movs	r1, r3
 800541e:	2216      	movs	r2, #22
 8005420:	18bb      	adds	r3, r7, r2
 8005422:	18ba      	adds	r2, r7, r2
 8005424:	8812      	ldrh	r2, [r2, #0]
 8005426:	404a      	eors	r2, r1
 8005428:	801a      	strh	r2, [r3, #0]

        for (int j = 0; j < 8; j++)
 800542a:	2300      	movs	r3, #0
 800542c:	60fb      	str	r3, [r7, #12]
 800542e:	e01a      	b.n	8005466 <CRC16_ARC+0x6e>
        {
            if ((crc & 0x0001) != 0)
 8005430:	2116      	movs	r1, #22
 8005432:	187b      	adds	r3, r7, r1
 8005434:	881b      	ldrh	r3, [r3, #0]
 8005436:	2201      	movs	r2, #1
 8005438:	4013      	ands	r3, r2
 800543a:	d00b      	beq.n	8005454 <CRC16_ARC+0x5c>
            {
                crc >>= 1;
 800543c:	187b      	adds	r3, r7, r1
 800543e:	187a      	adds	r2, r7, r1
 8005440:	8812      	ldrh	r2, [r2, #0]
 8005442:	0852      	lsrs	r2, r2, #1
 8005444:	801a      	strh	r2, [r3, #0]
                crc ^= 0xA001;
 8005446:	187b      	adds	r3, r7, r1
 8005448:	187a      	adds	r2, r7, r1
 800544a:	8812      	ldrh	r2, [r2, #0]
 800544c:	490f      	ldr	r1, [pc, #60]	@ (800548c <CRC16_ARC+0x94>)
 800544e:	404a      	eors	r2, r1
 8005450:	801a      	strh	r2, [r3, #0]
 8005452:	e005      	b.n	8005460 <CRC16_ARC+0x68>
            }
            else
            {
                crc >>= 1;
 8005454:	2216      	movs	r2, #22
 8005456:	18bb      	adds	r3, r7, r2
 8005458:	18ba      	adds	r2, r7, r2
 800545a:	8812      	ldrh	r2, [r2, #0]
 800545c:	0852      	lsrs	r2, r2, #1
 800545e:	801a      	strh	r2, [r3, #0]
        for (int j = 0; j < 8; j++)
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	3301      	adds	r3, #1
 8005464:	60fb      	str	r3, [r7, #12]
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2b07      	cmp	r3, #7
 800546a:	dde1      	ble.n	8005430 <CRC16_ARC+0x38>
    for (int i = 0; i < size; i++)
 800546c:	693b      	ldr	r3, [r7, #16]
 800546e:	3301      	adds	r3, #1
 8005470:	613b      	str	r3, [r7, #16]
 8005472:	1cbb      	adds	r3, r7, #2
 8005474:	881b      	ldrh	r3, [r3, #0]
 8005476:	693a      	ldr	r2, [r7, #16]
 8005478:	429a      	cmp	r2, r3
 800547a:	dbcb      	blt.n	8005414 <CRC16_ARC+0x1c>
            }
        }
    }
    return crc; 
 800547c:	2316      	movs	r3, #22
 800547e:	18fb      	adds	r3, r7, r3
 8005480:	881b      	ldrh	r3, [r3, #0]
}
 8005482:	0018      	movs	r0, r3
 8005484:	46bd      	mov	sp, r7
 8005486:	b006      	add	sp, #24
 8005488:	bd80      	pop	{r7, pc}
 800548a:	46c0      	nop			@ (mov r8, r8)
 800548c:	ffffa001 	.word	0xffffa001

08005490 <ReadBatteryVoltage>:

  ADC_ChannelConfTypeDef sConfig = {0};
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  uint32_t Vref = 2915;   // reference voltage in mV

float ReadBatteryVoltage(void){
 8005490:	b580      	push	{r7, lr}
 8005492:	af00      	add	r7, sp, #0
  /* Channel 14 is de battery voltage */
  static uint32_t value = 0;
  static float trueValue = 0;
   sConfig.Channel = ADC_CHANNEL_14;
 8005494:	4b26      	ldr	r3, [pc, #152]	@ (8005530 <ReadBatteryVoltage+0xa0>)
 8005496:	4a27      	ldr	r2, [pc, #156]	@ (8005534 <ReadBatteryVoltage+0xa4>)
 8005498:	601a      	str	r2, [r3, #0]
   sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800549a:	4b25      	ldr	r3, [pc, #148]	@ (8005530 <ReadBatteryVoltage+0xa0>)
 800549c:	2280      	movs	r2, #128	@ 0x80
 800549e:	0152      	lsls	r2, r2, #5
 80054a0:	605a      	str	r2, [r3, #4]
   if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80054a2:	4a23      	ldr	r2, [pc, #140]	@ (8005530 <ReadBatteryVoltage+0xa0>)
 80054a4:	4b24      	ldr	r3, [pc, #144]	@ (8005538 <ReadBatteryVoltage+0xa8>)
 80054a6:	0011      	movs	r1, r2
 80054a8:	0018      	movs	r0, r3
 80054aa:	f004 ff1d 	bl	800a2e8 <HAL_ADC_ConfigChannel>
 80054ae:	1e03      	subs	r3, r0, #0
 80054b0:	d001      	beq.n	80054b6 <ReadBatteryVoltage+0x26>
   {
     Error_Handler();
 80054b2:	f000 ff33 	bl	800631c <Error_Handler>
   }
   HAL_ADC_Start(&hadc);
 80054b6:	4b20      	ldr	r3, [pc, #128]	@ (8005538 <ReadBatteryVoltage+0xa8>)
 80054b8:	0018      	movs	r0, r3
 80054ba:	f004 fe19 	bl	800a0f0 <HAL_ADC_Start>
   HAL_ADC_PollForConversion(&hadc, 1);
 80054be:	4b1e      	ldr	r3, [pc, #120]	@ (8005538 <ReadBatteryVoltage+0xa8>)
 80054c0:	2101      	movs	r1, #1
 80054c2:	0018      	movs	r0, r3
 80054c4:	f004 fe68 	bl	800a198 <HAL_ADC_PollForConversion>
   value = (HAL_ADC_GetValue(&hadc)*Vref*2)/4095;
 80054c8:	4b1b      	ldr	r3, [pc, #108]	@ (8005538 <ReadBatteryVoltage+0xa8>)
 80054ca:	0018      	movs	r0, r3
 80054cc:	f004 ff00 	bl	800a2d0 <HAL_ADC_GetValue>
 80054d0:	0002      	movs	r2, r0
 80054d2:	4b1a      	ldr	r3, [pc, #104]	@ (800553c <ReadBatteryVoltage+0xac>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4353      	muls	r3, r2
 80054d8:	005b      	lsls	r3, r3, #1
 80054da:	4919      	ldr	r1, [pc, #100]	@ (8005540 <ReadBatteryVoltage+0xb0>)
 80054dc:	0018      	movs	r0, r3
 80054de:	f7fa fe2f 	bl	8000140 <__udivsi3>
 80054e2:	0003      	movs	r3, r0
 80054e4:	001a      	movs	r2, r3
 80054e6:	4b17      	ldr	r3, [pc, #92]	@ (8005544 <ReadBatteryVoltage+0xb4>)
 80054e8:	601a      	str	r2, [r3, #0]
   trueValue = (float)value/1000.0;
 80054ea:	4b16      	ldr	r3, [pc, #88]	@ (8005544 <ReadBatteryVoltage+0xb4>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	0018      	movs	r0, r3
 80054f0:	f7fc f838 	bl	8001564 <__aeabi_ui2f>
 80054f4:	1c03      	adds	r3, r0, #0
 80054f6:	4914      	ldr	r1, [pc, #80]	@ (8005548 <ReadBatteryVoltage+0xb8>)
 80054f8:	1c18      	adds	r0, r3, #0
 80054fa:	f7fb fae9 	bl	8000ad0 <__aeabi_fdiv>
 80054fe:	1c03      	adds	r3, r0, #0
 8005500:	1c1a      	adds	r2, r3, #0
 8005502:	4b12      	ldr	r3, [pc, #72]	@ (800554c <ReadBatteryVoltage+0xbc>)
 8005504:	601a      	str	r2, [r3, #0]
   /* Disable Channel 14 */
   sConfig.Channel = ADC_CHANNEL_14;
 8005506:	4b0a      	ldr	r3, [pc, #40]	@ (8005530 <ReadBatteryVoltage+0xa0>)
 8005508:	4a0a      	ldr	r2, [pc, #40]	@ (8005534 <ReadBatteryVoltage+0xa4>)
 800550a:	601a      	str	r2, [r3, #0]
   sConfig.Rank = ADC_RANK_NONE;
 800550c:	4b08      	ldr	r3, [pc, #32]	@ (8005530 <ReadBatteryVoltage+0xa0>)
 800550e:	4a10      	ldr	r2, [pc, #64]	@ (8005550 <ReadBatteryVoltage+0xc0>)
 8005510:	605a      	str	r2, [r3, #4]
   if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8005512:	4a07      	ldr	r2, [pc, #28]	@ (8005530 <ReadBatteryVoltage+0xa0>)
 8005514:	4b08      	ldr	r3, [pc, #32]	@ (8005538 <ReadBatteryVoltage+0xa8>)
 8005516:	0011      	movs	r1, r2
 8005518:	0018      	movs	r0, r3
 800551a:	f004 fee5 	bl	800a2e8 <HAL_ADC_ConfigChannel>
 800551e:	1e03      	subs	r3, r0, #0
 8005520:	d001      	beq.n	8005526 <ReadBatteryVoltage+0x96>
   {
     Error_Handler();
 8005522:	f000 fefb 	bl	800631c <Error_Handler>
   }
   return trueValue;
 8005526:	4b09      	ldr	r3, [pc, #36]	@ (800554c <ReadBatteryVoltage+0xbc>)
 8005528:	681b      	ldr	r3, [r3, #0]
 }
 800552a:	1c18      	adds	r0, r3, #0
 800552c:	46bd      	mov	sp, r7
 800552e:	bd80      	pop	{r7, pc}
 8005530:	20000c0c 	.word	0x20000c0c
 8005534:	38004000 	.word	0x38004000
 8005538:	20000c24 	.word	0x20000c24
 800553c:	2000006c 	.word	0x2000006c
 8005540:	00000fff 	.word	0x00000fff
 8005544:	20000c14 	.word	0x20000c14
 8005548:	447a0000 	.word	0x447a0000
 800554c:	20000c18 	.word	0x20000c18
 8005550:	00001001 	.word	0x00001001

08005554 <ReadSolarVoltage>:

/* function to read the actual battery voltage */

float ReadSolarVoltage(void){
 8005554:	b580      	push	{r7, lr}
 8005556:	af00      	add	r7, sp, #0
  /* Channel 15 is the Solar voltage */
  static uint32_t value = 0;
  static float trueValue = 0;
   sConfig.Channel = ADC_CHANNEL_15;
 8005558:	4b27      	ldr	r3, [pc, #156]	@ (80055f8 <ReadSolarVoltage+0xa4>)
 800555a:	4a28      	ldr	r2, [pc, #160]	@ (80055fc <ReadSolarVoltage+0xa8>)
 800555c:	601a      	str	r2, [r3, #0]
   sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800555e:	4b26      	ldr	r3, [pc, #152]	@ (80055f8 <ReadSolarVoltage+0xa4>)
 8005560:	2280      	movs	r2, #128	@ 0x80
 8005562:	0152      	lsls	r2, r2, #5
 8005564:	605a      	str	r2, [r3, #4]
   if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8005566:	4a24      	ldr	r2, [pc, #144]	@ (80055f8 <ReadSolarVoltage+0xa4>)
 8005568:	4b25      	ldr	r3, [pc, #148]	@ (8005600 <ReadSolarVoltage+0xac>)
 800556a:	0011      	movs	r1, r2
 800556c:	0018      	movs	r0, r3
 800556e:	f004 febb 	bl	800a2e8 <HAL_ADC_ConfigChannel>
 8005572:	1e03      	subs	r3, r0, #0
 8005574:	d001      	beq.n	800557a <ReadSolarVoltage+0x26>
   {
     Error_Handler();
 8005576:	f000 fed1 	bl	800631c <Error_Handler>
   }
   HAL_ADC_Start(&hadc);
 800557a:	4b21      	ldr	r3, [pc, #132]	@ (8005600 <ReadSolarVoltage+0xac>)
 800557c:	0018      	movs	r0, r3
 800557e:	f004 fdb7 	bl	800a0f0 <HAL_ADC_Start>
   HAL_ADC_PollForConversion(&hadc, 1);
 8005582:	4b1f      	ldr	r3, [pc, #124]	@ (8005600 <ReadSolarVoltage+0xac>)
 8005584:	2101      	movs	r1, #1
 8005586:	0018      	movs	r0, r3
 8005588:	f004 fe06 	bl	800a198 <HAL_ADC_PollForConversion>
   value = (HAL_ADC_GetValue(&hadc)*Vref*3)/4095;
 800558c:	4b1c      	ldr	r3, [pc, #112]	@ (8005600 <ReadSolarVoltage+0xac>)
 800558e:	0018      	movs	r0, r3
 8005590:	f004 fe9e 	bl	800a2d0 <HAL_ADC_GetValue>
 8005594:	0002      	movs	r2, r0
 8005596:	4b1b      	ldr	r3, [pc, #108]	@ (8005604 <ReadSolarVoltage+0xb0>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	435a      	muls	r2, r3
 800559c:	0013      	movs	r3, r2
 800559e:	005b      	lsls	r3, r3, #1
 80055a0:	189b      	adds	r3, r3, r2
 80055a2:	4919      	ldr	r1, [pc, #100]	@ (8005608 <ReadSolarVoltage+0xb4>)
 80055a4:	0018      	movs	r0, r3
 80055a6:	f7fa fdcb 	bl	8000140 <__udivsi3>
 80055aa:	0003      	movs	r3, r0
 80055ac:	001a      	movs	r2, r3
 80055ae:	4b17      	ldr	r3, [pc, #92]	@ (800560c <ReadSolarVoltage+0xb8>)
 80055b0:	601a      	str	r2, [r3, #0]
   trueValue = (float)value / 1000.0;
 80055b2:	4b16      	ldr	r3, [pc, #88]	@ (800560c <ReadSolarVoltage+0xb8>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	0018      	movs	r0, r3
 80055b8:	f7fb ffd4 	bl	8001564 <__aeabi_ui2f>
 80055bc:	1c03      	adds	r3, r0, #0
 80055be:	4914      	ldr	r1, [pc, #80]	@ (8005610 <ReadSolarVoltage+0xbc>)
 80055c0:	1c18      	adds	r0, r3, #0
 80055c2:	f7fb fa85 	bl	8000ad0 <__aeabi_fdiv>
 80055c6:	1c03      	adds	r3, r0, #0
 80055c8:	1c1a      	adds	r2, r3, #0
 80055ca:	4b12      	ldr	r3, [pc, #72]	@ (8005614 <ReadSolarVoltage+0xc0>)
 80055cc:	601a      	str	r2, [r3, #0]
   /* Disable Channel 14 */
   sConfig.Channel = ADC_CHANNEL_15;
 80055ce:	4b0a      	ldr	r3, [pc, #40]	@ (80055f8 <ReadSolarVoltage+0xa4>)
 80055d0:	4a0a      	ldr	r2, [pc, #40]	@ (80055fc <ReadSolarVoltage+0xa8>)
 80055d2:	601a      	str	r2, [r3, #0]
   sConfig.Rank = ADC_RANK_NONE;
 80055d4:	4b08      	ldr	r3, [pc, #32]	@ (80055f8 <ReadSolarVoltage+0xa4>)
 80055d6:	4a10      	ldr	r2, [pc, #64]	@ (8005618 <ReadSolarVoltage+0xc4>)
 80055d8:	605a      	str	r2, [r3, #4]
   if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80055da:	4a07      	ldr	r2, [pc, #28]	@ (80055f8 <ReadSolarVoltage+0xa4>)
 80055dc:	4b08      	ldr	r3, [pc, #32]	@ (8005600 <ReadSolarVoltage+0xac>)
 80055de:	0011      	movs	r1, r2
 80055e0:	0018      	movs	r0, r3
 80055e2:	f004 fe81 	bl	800a2e8 <HAL_ADC_ConfigChannel>
 80055e6:	1e03      	subs	r3, r0, #0
 80055e8:	d001      	beq.n	80055ee <ReadSolarVoltage+0x9a>
   {
     Error_Handler();
 80055ea:	f000 fe97 	bl	800631c <Error_Handler>
   }
   return trueValue;
 80055ee:	4b09      	ldr	r3, [pc, #36]	@ (8005614 <ReadSolarVoltage+0xc0>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 }
 80055f2:	1c18      	adds	r0, r3, #0
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bd80      	pop	{r7, pc}
 80055f8:	20000c0c 	.word	0x20000c0c
 80055fc:	3c008000 	.word	0x3c008000
 8005600:	20000c24 	.word	0x20000c24
 8005604:	2000006c 	.word	0x2000006c
 8005608:	00000fff 	.word	0x00000fff
 800560c:	20000c1c 	.word	0x20000c1c
 8005610:	447a0000 	.word	0x447a0000
 8005614:	20000c20 	.word	0x20000c20
 8005618:	00001001 	.word	0x00001001

0800561c <Check_USB_PowerOn>:

// True if 5V on USB Connector
bool   Check_USB_PowerOn(void){
 800561c:	b580      	push	{r7, lr}
 800561e:	af00      	add	r7, sp, #0
return   (HAL_GPIO_ReadPin(VusbDetect_GPIO_Port, VusbDetect_Pin));
 8005620:	23a0      	movs	r3, #160	@ 0xa0
 8005622:	05db      	lsls	r3, r3, #23
 8005624:	2180      	movs	r1, #128	@ 0x80
 8005626:	0018      	movs	r0, r3
 8005628:	f005 ff24 	bl	800b474 <HAL_GPIO_ReadPin>
 800562c:	0003      	movs	r3, r0
 800562e:	1e5a      	subs	r2, r3, #1
 8005630:	4193      	sbcs	r3, r2
 8005632:	b2db      	uxtb	r3, r3
}
 8005634:	0018      	movs	r0, r3
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}

0800563a <BootButton_Pressed>:

// True if Userbutton A ( Boot ) is pressed
// It is NOT Possible to read the Boot0 pin after powerup / Reset!!
// So a copy is hard wired to PA15

bool     BootButton_Pressed(void){
 800563a:	b580      	push	{r7, lr}
 800563c:	af00      	add	r7, sp, #0
  return   (HAL_GPIO_ReadPin(BOOT0_GPIO_Port, BOOT0_Pin));
 800563e:	2380      	movs	r3, #128	@ 0x80
 8005640:	021a      	lsls	r2, r3, #8
 8005642:	23a0      	movs	r3, #160	@ 0xa0
 8005644:	05db      	lsls	r3, r3, #23
 8005646:	0011      	movs	r1, r2
 8005648:	0018      	movs	r0, r3
 800564a:	f005 ff13 	bl	800b474 <HAL_GPIO_ReadPin>
 800564e:	0003      	movs	r3, r0
 8005650:	1e5a      	subs	r2, r3, #1
 8005652:	4193      	sbcs	r3, r2
 8005654:	b2db      	uxtb	r3, r3
}
 8005656:	0018      	movs	r0, r3
 8005658:	46bd      	mov	sp, r7
 800565a:	bd80      	pop	{r7, pc}

0800565c <UserButton_Pressed>:

// True if Userbutton B is pressed
bool     UserButton_Pressed(void){
 800565c:	b580      	push	{r7, lr}
 800565e:	af00      	add	r7, sp, #0
  return   (!HAL_GPIO_ReadPin(User_Button_GPIO_Port, User_Button_Pin));
 8005660:	4b05      	ldr	r3, [pc, #20]	@ (8005678 <UserButton_Pressed+0x1c>)
 8005662:	2104      	movs	r1, #4
 8005664:	0018      	movs	r0, r3
 8005666:	f005 ff05 	bl	800b474 <HAL_GPIO_ReadPin>
 800566a:	0003      	movs	r3, r0
 800566c:	425a      	negs	r2, r3
 800566e:	4153      	adcs	r3, r2
 8005670:	b2db      	uxtb	r3, r3
}
 8005672:	0018      	movs	r0, r3
 8005674:	46bd      	mov	sp, r7
 8005676:	bd80      	pop	{r7, pc}
 8005678:	50000c00 	.word	0x50000c00

0800567c <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b082      	sub	sp, #8
 8005680:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8005682:	003b      	movs	r3, r7
 8005684:	0018      	movs	r0, r3
 8005686:	2308      	movs	r3, #8
 8005688:	001a      	movs	r2, r3
 800568a:	2100      	movs	r1, #0
 800568c:	f012 fbde 	bl	8017e4c <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8005690:	4b30      	ldr	r3, [pc, #192]	@ (8005754 <MX_ADC_Init+0xd8>)
 8005692:	4a31      	ldr	r2, [pc, #196]	@ (8005758 <MX_ADC_Init+0xdc>)
 8005694:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8005696:	4b2f      	ldr	r3, [pc, #188]	@ (8005754 <MX_ADC_Init+0xd8>)
 8005698:	2200      	movs	r2, #0
 800569a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800569c:	4b2d      	ldr	r3, [pc, #180]	@ (8005754 <MX_ADC_Init+0xd8>)
 800569e:	22c0      	movs	r2, #192	@ 0xc0
 80056a0:	0612      	lsls	r2, r2, #24
 80056a2:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80056a4:	4b2b      	ldr	r3, [pc, #172]	@ (8005754 <MX_ADC_Init+0xd8>)
 80056a6:	2200      	movs	r2, #0
 80056a8:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80056aa:	4b2a      	ldr	r3, [pc, #168]	@ (8005754 <MX_ADC_Init+0xd8>)
 80056ac:	2200      	movs	r2, #0
 80056ae:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80056b0:	4b28      	ldr	r3, [pc, #160]	@ (8005754 <MX_ADC_Init+0xd8>)
 80056b2:	2201      	movs	r2, #1
 80056b4:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80056b6:	4b27      	ldr	r3, [pc, #156]	@ (8005754 <MX_ADC_Init+0xd8>)
 80056b8:	2200      	movs	r2, #0
 80056ba:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 80056bc:	4b25      	ldr	r3, [pc, #148]	@ (8005754 <MX_ADC_Init+0xd8>)
 80056be:	2220      	movs	r2, #32
 80056c0:	2100      	movs	r1, #0
 80056c2:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = ENABLE;
 80056c4:	4b23      	ldr	r3, [pc, #140]	@ (8005754 <MX_ADC_Init+0xd8>)
 80056c6:	2221      	movs	r2, #33	@ 0x21
 80056c8:	2101      	movs	r1, #1
 80056ca:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80056cc:	4b21      	ldr	r3, [pc, #132]	@ (8005754 <MX_ADC_Init+0xd8>)
 80056ce:	2200      	movs	r2, #0
 80056d0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80056d2:	4b20      	ldr	r3, [pc, #128]	@ (8005754 <MX_ADC_Init+0xd8>)
 80056d4:	22c2      	movs	r2, #194	@ 0xc2
 80056d6:	32ff      	adds	r2, #255	@ 0xff
 80056d8:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 80056da:	4b1e      	ldr	r3, [pc, #120]	@ (8005754 <MX_ADC_Init+0xd8>)
 80056dc:	222c      	movs	r2, #44	@ 0x2c
 80056de:	2100      	movs	r1, #0
 80056e0:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80056e2:	4b1c      	ldr	r3, [pc, #112]	@ (8005754 <MX_ADC_Init+0xd8>)
 80056e4:	2204      	movs	r2, #4
 80056e6:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80056e8:	4b1a      	ldr	r3, [pc, #104]	@ (8005754 <MX_ADC_Init+0xd8>)
 80056ea:	2200      	movs	r2, #0
 80056ec:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 80056ee:	4b19      	ldr	r3, [pc, #100]	@ (8005754 <MX_ADC_Init+0xd8>)
 80056f0:	2200      	movs	r2, #0
 80056f2:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 80056f4:	4b17      	ldr	r3, [pc, #92]	@ (8005754 <MX_ADC_Init+0xd8>)
 80056f6:	2200      	movs	r2, #0
 80056f8:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80056fa:	4b16      	ldr	r3, [pc, #88]	@ (8005754 <MX_ADC_Init+0xd8>)
 80056fc:	2200      	movs	r2, #0
 80056fe:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8005700:	4b14      	ldr	r3, [pc, #80]	@ (8005754 <MX_ADC_Init+0xd8>)
 8005702:	0018      	movs	r0, r3
 8005704:	f004 fb80 	bl	8009e08 <HAL_ADC_Init>
 8005708:	1e03      	subs	r3, r0, #0
 800570a:	d001      	beq.n	8005710 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 800570c:	f000 fe06 	bl	800631c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8005710:	003b      	movs	r3, r7
 8005712:	4a12      	ldr	r2, [pc, #72]	@ (800575c <MX_ADC_Init+0xe0>)
 8005714:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8005716:	003b      	movs	r3, r7
 8005718:	2280      	movs	r2, #128	@ 0x80
 800571a:	0152      	lsls	r2, r2, #5
 800571c:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800571e:	003a      	movs	r2, r7
 8005720:	4b0c      	ldr	r3, [pc, #48]	@ (8005754 <MX_ADC_Init+0xd8>)
 8005722:	0011      	movs	r1, r2
 8005724:	0018      	movs	r0, r3
 8005726:	f004 fddf 	bl	800a2e8 <HAL_ADC_ConfigChannel>
 800572a:	1e03      	subs	r3, r0, #0
 800572c:	d001      	beq.n	8005732 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 800572e:	f000 fdf5 	bl	800631c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8005732:	003b      	movs	r3, r7
 8005734:	4a0a      	ldr	r2, [pc, #40]	@ (8005760 <MX_ADC_Init+0xe4>)
 8005736:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8005738:	003a      	movs	r2, r7
 800573a:	4b06      	ldr	r3, [pc, #24]	@ (8005754 <MX_ADC_Init+0xd8>)
 800573c:	0011      	movs	r1, r2
 800573e:	0018      	movs	r0, r3
 8005740:	f004 fdd2 	bl	800a2e8 <HAL_ADC_ConfigChannel>
 8005744:	1e03      	subs	r3, r0, #0
 8005746:	d001      	beq.n	800574c <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 8005748:	f000 fde8 	bl	800631c <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800574c:	46c0      	nop			@ (mov r8, r8)
 800574e:	46bd      	mov	sp, r7
 8005750:	b002      	add	sp, #8
 8005752:	bd80      	pop	{r7, pc}
 8005754:	20000c24 	.word	0x20000c24
 8005758:	40012400 	.word	0x40012400
 800575c:	38004000 	.word	0x38004000
 8005760:	3c008000 	.word	0x3c008000

08005764 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8005764:	b590      	push	{r4, r7, lr}
 8005766:	b089      	sub	sp, #36	@ 0x24
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800576c:	240c      	movs	r4, #12
 800576e:	193b      	adds	r3, r7, r4
 8005770:	0018      	movs	r0, r3
 8005772:	2314      	movs	r3, #20
 8005774:	001a      	movs	r2, r3
 8005776:	2100      	movs	r1, #0
 8005778:	f012 fb68 	bl	8017e4c <memset>
  if(adcHandle->Instance==ADC1)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4a14      	ldr	r2, [pc, #80]	@ (80057d4 <HAL_ADC_MspInit+0x70>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d121      	bne.n	80057ca <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005786:	4b14      	ldr	r3, [pc, #80]	@ (80057d8 <HAL_ADC_MspInit+0x74>)
 8005788:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800578a:	4b13      	ldr	r3, [pc, #76]	@ (80057d8 <HAL_ADC_MspInit+0x74>)
 800578c:	2180      	movs	r1, #128	@ 0x80
 800578e:	0089      	lsls	r1, r1, #2
 8005790:	430a      	orrs	r2, r1
 8005792:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005794:	4b10      	ldr	r3, [pc, #64]	@ (80057d8 <HAL_ADC_MspInit+0x74>)
 8005796:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005798:	4b0f      	ldr	r3, [pc, #60]	@ (80057d8 <HAL_ADC_MspInit+0x74>)
 800579a:	2104      	movs	r1, #4
 800579c:	430a      	orrs	r2, r1
 800579e:	62da      	str	r2, [r3, #44]	@ 0x2c
 80057a0:	4b0d      	ldr	r3, [pc, #52]	@ (80057d8 <HAL_ADC_MspInit+0x74>)
 80057a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057a4:	2204      	movs	r2, #4
 80057a6:	4013      	ands	r3, r2
 80057a8:	60bb      	str	r3, [r7, #8]
 80057aa:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PC4     ------> ADC_IN14
    PC5     ------> ADC_IN15
    */
    GPIO_InitStruct.Pin = BatMeasure_Pin|SolarMeasure_Pin;
 80057ac:	193b      	adds	r3, r7, r4
 80057ae:	2230      	movs	r2, #48	@ 0x30
 80057b0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80057b2:	193b      	adds	r3, r7, r4
 80057b4:	2203      	movs	r2, #3
 80057b6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057b8:	193b      	adds	r3, r7, r4
 80057ba:	2200      	movs	r2, #0
 80057bc:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80057be:	193b      	adds	r3, r7, r4
 80057c0:	4a06      	ldr	r2, [pc, #24]	@ (80057dc <HAL_ADC_MspInit+0x78>)
 80057c2:	0019      	movs	r1, r3
 80057c4:	0010      	movs	r0, r2
 80057c6:	f005 fbf5 	bl	800afb4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80057ca:	46c0      	nop			@ (mov r8, r8)
 80057cc:	46bd      	mov	sp, r7
 80057ce:	b009      	add	sp, #36	@ 0x24
 80057d0:	bd90      	pop	{r4, r7, pc}
 80057d2:	46c0      	nop			@ (mov r8, r8)
 80057d4:	40012400 	.word	0x40012400
 80057d8:	40021000 	.word	0x40021000
 80057dc:	50000800 	.word	0x50000800

080057e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b082      	sub	sp, #8
 80057e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80057e6:	4b10      	ldr	r3, [pc, #64]	@ (8005828 <MX_DMA_Init+0x48>)
 80057e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80057ea:	4b0f      	ldr	r3, [pc, #60]	@ (8005828 <MX_DMA_Init+0x48>)
 80057ec:	2101      	movs	r1, #1
 80057ee:	430a      	orrs	r2, r1
 80057f0:	631a      	str	r2, [r3, #48]	@ 0x30
 80057f2:	4b0d      	ldr	r3, [pc, #52]	@ (8005828 <MX_DMA_Init+0x48>)
 80057f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057f6:	2201      	movs	r2, #1
 80057f8:	4013      	ands	r3, r2
 80057fa:	607b      	str	r3, [r7, #4]
 80057fc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80057fe:	2200      	movs	r2, #0
 8005800:	2100      	movs	r1, #0
 8005802:	200a      	movs	r0, #10
 8005804:	f004 ff2a 	bl	800a65c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8005808:	200a      	movs	r0, #10
 800580a:	f004 ff3c 	bl	800a686 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 3, 0);
 800580e:	2200      	movs	r2, #0
 8005810:	2103      	movs	r1, #3
 8005812:	200b      	movs	r0, #11
 8005814:	f004 ff22 	bl	800a65c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 8005818:	200b      	movs	r0, #11
 800581a:	f004 ff34 	bl	800a686 <HAL_NVIC_EnableIRQ>

}
 800581e:	46c0      	nop			@ (mov r8, r8)
 8005820:	46bd      	mov	sp, r7
 8005822:	b002      	add	sp, #8
 8005824:	bd80      	pop	{r7, pc}
 8005826:	46c0      	nop			@ (mov r8, r8)
 8005828:	40021000 	.word	0x40021000

0800582c <Gadget_Init>:
//    .VOC_measurementEnabled = true,
//    .PM_measurementEnabled = false,
//    .MIC_measurementEnabled = true
//};

void Gadget_Init(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s, UART_HandleTypeDef* espUart, ADC_HandleTypeDef* ADC_HANDLER) {
 800582c:	b580      	push	{r7, lr}
 800582e:	b084      	sub	sp, #16
 8005830:	af00      	add	r7, sp, #0
 8005832:	60f8      	str	r0, [r7, #12]
 8005834:	60b9      	str	r1, [r7, #8]
 8005836:	607a      	str	r2, [r7, #4]
 8005838:	603b      	str	r3, [r7, #0]
  // TODO: Add gadget re-init. So it works after sleep mode again.
  // Check battery power
  // Init sensor + peripherals
  Meas_SetEnabledSensors(SensorSetTest);
 800583a:	4b0c      	ldr	r3, [pc, #48]	@ (800586c <Gadget_Init+0x40>)
 800583c:	6818      	ldr	r0, [r3, #0]
 800583e:	f001 f8af 	bl	80069a0 <Meas_SetEnabledSensors>
  Meas_Init(sensorI2C, micI2s, ADC_HANDLER);
 8005842:	683a      	ldr	r2, [r7, #0]
 8005844:	68b9      	ldr	r1, [r7, #8]
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	0018      	movs	r0, r3
 800584a:	f000 fddb 	bl	8006404 <Meas_Init>
  // Working on ESP, disabling it now
  ESP_Init(espUart);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	0018      	movs	r0, r3
 8005852:	f7fd ff7f 	bl	8003754 <ESP_Init>
//  Gadget_SetSleepDuration();
  Debug("Gadget initialised.");
 8005856:	4a06      	ldr	r2, [pc, #24]	@ (8005870 <Gadget_Init+0x44>)
 8005858:	4b06      	ldr	r3, [pc, #24]	@ (8005874 <Gadget_Init+0x48>)
 800585a:	0019      	movs	r1, r3
 800585c:	2003      	movs	r0, #3
 800585e:	f003 feeb 	bl	8009638 <CreateLine>
}
 8005862:	46c0      	nop			@ (mov r8, r8)
 8005864:	46bd      	mov	sp, r7
 8005866:	b004      	add	sp, #16
 8005868:	bd80      	pop	{r7, pc}
 800586a:	46c0      	nop			@ (mov r8, r8)
 800586c:	20000070 	.word	0x20000070
 8005870:	0801b128 	.word	0x0801b128
 8005874:	0801b13c 	.word	0x0801b13c

08005878 <Gadget_Test>:

void Gadget_ReInit(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s) {

}

void Gadget_Test(){
 8005878:	b580      	push	{r7, lr}
 800587a:	af00      	add	r7, sp, #0
  Meas_Test();
 800587c:	f000 ff02 	bl	8006684 <Meas_Test>
}
 8005880:	46c0      	nop			@ (mov r8, r8)
 8005882:	46bd      	mov	sp, r7
 8005884:	bd80      	pop	{r7, pc}

08005886 <UpkeepGadget>:

void UpkeepGadget() {
 8005886:	b580      	push	{r7, lr}
 8005888:	af00      	add	r7, sp, #0
   * 	Yes: create data format
   * 	Transmit data
   * 	Close connection
   * 	Disable ESP
   */
  Meas_Upkeep();
 800588a:	f000 fff3 	bl	8006874 <Meas_Upkeep>
  Mic_Upkeep();
 800588e:	f000 ffa5 	bl	80067dc <Mic_Upkeep>
  status_Upkeep();
 8005892:	f003 f9e7 	bl	8008c64 <status_Upkeep>
//  }
//  if(Battery) {
//    Meas_SetEnabledSensors(SensorSetBatt);
//  }

}
 8005896:	46c0      	nop			@ (mov r8, r8)
 8005898:	46bd      	mov	sp, r7
 800589a:	bd80      	pop	{r7, pc}

0800589c <Gas_Init>:

#include "gasSensor.h"
#include "stm32l0xx_it.h"
#include "utils.h"

void Gas_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 800589c:	b580      	push	{r7, lr}
 800589e:	b082      	sub	sp, #8
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
 80058a4:	6039      	str	r1, [r7, #0]
  SGP_Init(readFunction, writeFunction);
 80058a6:	683a      	ldr	r2, [r7, #0]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	0011      	movs	r1, r2
 80058ac:	0018      	movs	r0, r3
 80058ae:	f002 fc53 	bl	8008158 <SGP_Init>
}
 80058b2:	46c0      	nop			@ (mov r8, r8)
 80058b4:	46bd      	mov	sp, r7
 80058b6:	b002      	add	sp, #8
 80058b8:	bd80      	pop	{r7, pc}

080058ba <Gas_StartMeasurement>:

void Gas_StartMeasurement(void){
 80058ba:	b580      	push	{r7, lr}
 80058bc:	af00      	add	r7, sp, #0
  SGP_StartMeasurement();
 80058be:	f002 fc65 	bl	800818c <SGP_StartMeasurement>
}
 80058c2:	46c0      	nop			@ (mov r8, r8)
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bd80      	pop	{r7, pc}

080058c8 <Gas_GetMeasurementValues>:

bool Gas_GetMeasurementValues(int32_t* vocIndex) {
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b082      	sub	sp, #8
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
  return SGP_GetMeasurementValues(vocIndex);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	0018      	movs	r0, r3
 80058d4:	f002 fcca 	bl	800826c <SGP_GetMeasurementValues>
 80058d8:	0003      	movs	r3, r0
}
 80058da:	0018      	movs	r0, r3
 80058dc:	46bd      	mov	sp, r7
 80058de:	b002      	add	sp, #8
 80058e0:	bd80      	pop	{r7, pc}

080058e2 <Gas_DeviceConnected>:

bool Gas_DeviceConnected(void) {
 80058e2:	b580      	push	{r7, lr}
 80058e4:	af00      	add	r7, sp, #0
  return SGP_DeviceConnected();
 80058e6:	f002 fedf 	bl	80086a8 <SGP_DeviceConnected>
 80058ea:	0003      	movs	r3, r0
}
 80058ec:	0018      	movs	r0, r3
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bd80      	pop	{r7, pc}
	...

080058f4 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80058f4:	b590      	push	{r4, r7, lr}
 80058f6:	b08b      	sub	sp, #44	@ 0x2c
 80058f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80058fa:	2414      	movs	r4, #20
 80058fc:	193b      	adds	r3, r7, r4
 80058fe:	0018      	movs	r0, r3
 8005900:	2314      	movs	r3, #20
 8005902:	001a      	movs	r2, r3
 8005904:	2100      	movs	r1, #0
 8005906:	f012 faa1 	bl	8017e4c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800590a:	4b7c      	ldr	r3, [pc, #496]	@ (8005afc <MX_GPIO_Init+0x208>)
 800590c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800590e:	4b7b      	ldr	r3, [pc, #492]	@ (8005afc <MX_GPIO_Init+0x208>)
 8005910:	2104      	movs	r1, #4
 8005912:	430a      	orrs	r2, r1
 8005914:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005916:	4b79      	ldr	r3, [pc, #484]	@ (8005afc <MX_GPIO_Init+0x208>)
 8005918:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800591a:	2204      	movs	r2, #4
 800591c:	4013      	ands	r3, r2
 800591e:	613b      	str	r3, [r7, #16]
 8005920:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005922:	4b76      	ldr	r3, [pc, #472]	@ (8005afc <MX_GPIO_Init+0x208>)
 8005924:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005926:	4b75      	ldr	r3, [pc, #468]	@ (8005afc <MX_GPIO_Init+0x208>)
 8005928:	2180      	movs	r1, #128	@ 0x80
 800592a:	430a      	orrs	r2, r1
 800592c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800592e:	4b73      	ldr	r3, [pc, #460]	@ (8005afc <MX_GPIO_Init+0x208>)
 8005930:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005932:	2280      	movs	r2, #128	@ 0x80
 8005934:	4013      	ands	r3, r2
 8005936:	60fb      	str	r3, [r7, #12]
 8005938:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800593a:	4b70      	ldr	r3, [pc, #448]	@ (8005afc <MX_GPIO_Init+0x208>)
 800593c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800593e:	4b6f      	ldr	r3, [pc, #444]	@ (8005afc <MX_GPIO_Init+0x208>)
 8005940:	2101      	movs	r1, #1
 8005942:	430a      	orrs	r2, r1
 8005944:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005946:	4b6d      	ldr	r3, [pc, #436]	@ (8005afc <MX_GPIO_Init+0x208>)
 8005948:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800594a:	2201      	movs	r2, #1
 800594c:	4013      	ands	r3, r2
 800594e:	60bb      	str	r3, [r7, #8]
 8005950:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005952:	4b6a      	ldr	r3, [pc, #424]	@ (8005afc <MX_GPIO_Init+0x208>)
 8005954:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005956:	4b69      	ldr	r3, [pc, #420]	@ (8005afc <MX_GPIO_Init+0x208>)
 8005958:	2102      	movs	r1, #2
 800595a:	430a      	orrs	r2, r1
 800595c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800595e:	4b67      	ldr	r3, [pc, #412]	@ (8005afc <MX_GPIO_Init+0x208>)
 8005960:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005962:	2202      	movs	r2, #2
 8005964:	4013      	ands	r3, r2
 8005966:	607b      	str	r3, [r7, #4]
 8005968:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800596a:	4b64      	ldr	r3, [pc, #400]	@ (8005afc <MX_GPIO_Init+0x208>)
 800596c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800596e:	4b63      	ldr	r3, [pc, #396]	@ (8005afc <MX_GPIO_Init+0x208>)
 8005970:	2108      	movs	r1, #8
 8005972:	430a      	orrs	r2, r1
 8005974:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005976:	4b61      	ldr	r3, [pc, #388]	@ (8005afc <MX_GPIO_Init+0x208>)
 8005978:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800597a:	2208      	movs	r2, #8
 800597c:	4013      	ands	r3, r2
 800597e:	603b      	str	r3, [r7, #0]
 8005980:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 8005982:	4b5f      	ldr	r3, [pc, #380]	@ (8005b00 <MX_GPIO_Init+0x20c>)
 8005984:	2201      	movs	r2, #1
 8005986:	2101      	movs	r1, #1
 8005988:	0018      	movs	r0, r3
 800598a:	f005 fd90 	bl	800b4ae <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 800598e:	4b5c      	ldr	r3, [pc, #368]	@ (8005b00 <MX_GPIO_Init+0x20c>)
 8005990:	2200      	movs	r2, #0
 8005992:	2102      	movs	r1, #2
 8005994:	0018      	movs	r0, r3
 8005996:	f005 fd8a 	bl	800b4ae <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin, GPIO_PIN_SET);
 800599a:	495a      	ldr	r1, [pc, #360]	@ (8005b04 <MX_GPIO_Init+0x210>)
 800599c:	4b5a      	ldr	r3, [pc, #360]	@ (8005b08 <MX_GPIO_Init+0x214>)
 800599e:	2201      	movs	r2, #1
 80059a0:	0018      	movs	r0, r3
 80059a2:	f005 fd84 	bl	800b4ae <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 80059a6:	2380      	movs	r3, #128	@ 0x80
 80059a8:	011b      	lsls	r3, r3, #4
 80059aa:	4858      	ldr	r0, [pc, #352]	@ (8005b0c <MX_GPIO_Init+0x218>)
 80059ac:	2201      	movs	r2, #1
 80059ae:	0019      	movs	r1, r3
 80059b0:	f005 fd7d 	bl	800b4ae <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_RESET);
 80059b4:	2380      	movs	r3, #128	@ 0x80
 80059b6:	015b      	lsls	r3, r3, #5
 80059b8:	4854      	ldr	r0, [pc, #336]	@ (8005b0c <MX_GPIO_Init+0x218>)
 80059ba:	2200      	movs	r2, #0
 80059bc:	0019      	movs	r1, r3
 80059be:	f005 fd76 	bl	800b4ae <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_2|GPIO_PIN_3;
 80059c2:	193b      	adds	r3, r7, r4
 80059c4:	4a52      	ldr	r2, [pc, #328]	@ (8005b10 <MX_GPIO_Init+0x21c>)
 80059c6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80059c8:	193b      	adds	r3, r7, r4
 80059ca:	2203      	movs	r2, #3
 80059cc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059ce:	193b      	adds	r3, r7, r4
 80059d0:	2200      	movs	r2, #0
 80059d2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80059d4:	193b      	adds	r3, r7, r4
 80059d6:	4a4d      	ldr	r2, [pc, #308]	@ (8005b0c <MX_GPIO_Init+0x218>)
 80059d8:	0019      	movs	r1, r3
 80059da:	0010      	movs	r0, r2
 80059dc:	f005 faea 	bl	800afb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = ESP32_EN_Pin|ESP32_BOOT_Pin;
 80059e0:	193b      	adds	r3, r7, r4
 80059e2:	2203      	movs	r2, #3
 80059e4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80059e6:	193b      	adds	r3, r7, r4
 80059e8:	2201      	movs	r2, #1
 80059ea:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059ec:	193b      	adds	r3, r7, r4
 80059ee:	2200      	movs	r2, #0
 80059f0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80059f2:	193b      	adds	r3, r7, r4
 80059f4:	2200      	movs	r2, #0
 80059f6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80059f8:	193b      	adds	r3, r7, r4
 80059fa:	4a41      	ldr	r2, [pc, #260]	@ (8005b00 <MX_GPIO_Init+0x20c>)
 80059fc:	0019      	movs	r1, r3
 80059fe:	0010      	movs	r0, r2
 8005a00:	f005 fad8 	bl	800afb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8005a04:	193b      	adds	r3, r7, r4
 8005a06:	2270      	movs	r2, #112	@ 0x70
 8005a08:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005a0a:	193b      	adds	r3, r7, r4
 8005a0c:	2203      	movs	r2, #3
 8005a0e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a10:	193b      	adds	r3, r7, r4
 8005a12:	2200      	movs	r2, #0
 8005a14:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005a16:	193a      	adds	r2, r7, r4
 8005a18:	23a0      	movs	r3, #160	@ 0xa0
 8005a1a:	05db      	lsls	r3, r3, #23
 8005a1c:	0011      	movs	r1, r2
 8005a1e:	0018      	movs	r0, r3
 8005a20:	f005 fac8 	bl	800afb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = VusbDetect_Pin|Wireless_PSU_PG_Pin|BOOT0_Pin;
 8005a24:	193b      	adds	r3, r7, r4
 8005a26:	4a3b      	ldr	r2, [pc, #236]	@ (8005b14 <MX_GPIO_Init+0x220>)
 8005a28:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005a2a:	193b      	adds	r3, r7, r4
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a30:	193b      	adds	r3, r7, r4
 8005a32:	2200      	movs	r2, #0
 8005a34:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005a36:	193a      	adds	r2, r7, r4
 8005a38:	23a0      	movs	r3, #160	@ 0xa0
 8005a3a:	05db      	lsls	r3, r3, #23
 8005a3c:	0011      	movs	r1, r2
 8005a3e:	0018      	movs	r0, r3
 8005a40:	f005 fab8 	bl	800afb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin;
 8005a44:	193b      	adds	r3, r7, r4
 8005a46:	4a2f      	ldr	r2, [pc, #188]	@ (8005b04 <MX_GPIO_Init+0x210>)
 8005a48:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005a4a:	193b      	adds	r3, r7, r4
 8005a4c:	2201      	movs	r2, #1
 8005a4e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a50:	193b      	adds	r3, r7, r4
 8005a52:	2200      	movs	r2, #0
 8005a54:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a56:	193b      	adds	r3, r7, r4
 8005a58:	2200      	movs	r2, #0
 8005a5a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005a5c:	193b      	adds	r3, r7, r4
 8005a5e:	4a2a      	ldr	r2, [pc, #168]	@ (8005b08 <MX_GPIO_Init+0x214>)
 8005a60:	0019      	movs	r1, r3
 8005a62:	0010      	movs	r0, r2
 8005a64:	f005 faa6 	bl	800afb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB14 PB3
                           PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_14|GPIO_PIN_3
 8005a68:	193b      	adds	r3, r7, r4
 8005a6a:	4a2b      	ldr	r2, [pc, #172]	@ (8005b18 <MX_GPIO_Init+0x224>)
 8005a6c:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005a6e:	193b      	adds	r3, r7, r4
 8005a70:	2203      	movs	r2, #3
 8005a72:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a74:	193b      	adds	r3, r7, r4
 8005a76:	2200      	movs	r2, #0
 8005a78:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005a7a:	193b      	adds	r3, r7, r4
 8005a7c:	4a22      	ldr	r2, [pc, #136]	@ (8005b08 <MX_GPIO_Init+0x214>)
 8005a7e:	0019      	movs	r1, r3
 8005a80:	0010      	movs	r0, r2
 8005a82:	f005 fa97 	bl	800afb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Charger_status_Pin;
 8005a86:	0021      	movs	r1, r4
 8005a88:	187b      	adds	r3, r7, r1
 8005a8a:	2280      	movs	r2, #128	@ 0x80
 8005a8c:	0092      	lsls	r2, r2, #2
 8005a8e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005a90:	000c      	movs	r4, r1
 8005a92:	193b      	adds	r3, r7, r4
 8005a94:	2200      	movs	r2, #0
 8005a96:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a98:	193b      	adds	r3, r7, r4
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Charger_status_GPIO_Port, &GPIO_InitStruct);
 8005a9e:	193b      	adds	r3, r7, r4
 8005aa0:	4a1a      	ldr	r2, [pc, #104]	@ (8005b0c <MX_GPIO_Init+0x218>)
 8005aa2:	0019      	movs	r1, r3
 8005aa4:	0010      	movs	r0, r2
 8005aa6:	f005 fa85 	bl	800afb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Wireless_PSU_EN_Pin|Boost_Enable_Pin;
 8005aaa:	0021      	movs	r1, r4
 8005aac:	187b      	adds	r3, r7, r1
 8005aae:	22c0      	movs	r2, #192	@ 0xc0
 8005ab0:	0152      	lsls	r2, r2, #5
 8005ab2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005ab4:	000c      	movs	r4, r1
 8005ab6:	193b      	adds	r3, r7, r4
 8005ab8:	2201      	movs	r2, #1
 8005aba:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005abc:	193b      	adds	r3, r7, r4
 8005abe:	2200      	movs	r2, #0
 8005ac0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005ac2:	193b      	adds	r3, r7, r4
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005ac8:	193b      	adds	r3, r7, r4
 8005aca:	4a10      	ldr	r2, [pc, #64]	@ (8005b0c <MX_GPIO_Init+0x218>)
 8005acc:	0019      	movs	r1, r3
 8005ace:	0010      	movs	r0, r2
 8005ad0:	f005 fa70 	bl	800afb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = User_Button_Pin;
 8005ad4:	0021      	movs	r1, r4
 8005ad6:	187b      	adds	r3, r7, r1
 8005ad8:	2204      	movs	r2, #4
 8005ada:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005adc:	187b      	adds	r3, r7, r1
 8005ade:	2200      	movs	r2, #0
 8005ae0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005ae2:	187b      	adds	r3, r7, r1
 8005ae4:	2201      	movs	r2, #1
 8005ae6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(User_Button_GPIO_Port, &GPIO_InitStruct);
 8005ae8:	187b      	adds	r3, r7, r1
 8005aea:	4a0c      	ldr	r2, [pc, #48]	@ (8005b1c <MX_GPIO_Init+0x228>)
 8005aec:	0019      	movs	r1, r3
 8005aee:	0010      	movs	r0, r2
 8005af0:	f005 fa60 	bl	800afb4 <HAL_GPIO_Init>

}
 8005af4:	46c0      	nop			@ (mov r8, r8)
 8005af6:	46bd      	mov	sp, r7
 8005af8:	b00b      	add	sp, #44	@ 0x2c
 8005afa:	bd90      	pop	{r4, r7, pc}
 8005afc:	40021000 	.word	0x40021000
 8005b00:	50001c00 	.word	0x50001c00
 8005b04:	00000301 	.word	0x00000301
 8005b08:	50000400 	.word	0x50000400
 8005b0c:	50000800 	.word	0x50000800
 8005b10:	0000200c 	.word	0x0000200c
 8005b14:	00008180 	.word	0x00008180
 8005b18:	0000403e 	.word	0x0000403e
 8005b1c:	50000c00 	.word	0x50000c00

08005b20 <GPIO_InitPWMLEDs>:

/* USER CODE BEGIN 2 */
void GPIO_InitPWMLEDs(TIM_HandleTypeDef* timer2, TIM_HandleTypeDef* timer3) {
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b082      	sub	sp, #8
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
 8005b28:	6039      	str	r1, [r7, #0]
  // Timer 2 PWM init
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_1);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2100      	movs	r1, #0
 8005b2e:	0018      	movs	r0, r3
 8005b30:	f00b f80c 	bl	8010b4c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_3);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2108      	movs	r1, #8
 8005b38:	0018      	movs	r0, r3
 8005b3a:	f00b f807 	bl	8010b4c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_4);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	210c      	movs	r1, #12
 8005b42:	0018      	movs	r0, r3
 8005b44:	f00b f802 	bl	8010b4c <HAL_TIM_PWM_Start>
  TIM2 -> ARR = 4000;
 8005b48:	2380      	movs	r3, #128	@ 0x80
 8005b4a:	05db      	lsls	r3, r3, #23
 8005b4c:	22fa      	movs	r2, #250	@ 0xfa
 8005b4e:	0112      	lsls	r2, r2, #4
 8005b50:	62da      	str	r2, [r3, #44]	@ 0x2c

  // Resetting the LEDs.
  // CCR1 = Red, CCR3 = Green, CCR4 = Blue.
  TIM2 -> CCR1 = 4000;
 8005b52:	2380      	movs	r3, #128	@ 0x80
 8005b54:	05db      	lsls	r3, r3, #23
 8005b56:	22fa      	movs	r2, #250	@ 0xfa
 8005b58:	0112      	lsls	r2, r2, #4
 8005b5a:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2 -> CCR3 = 4000;
 8005b5c:	2380      	movs	r3, #128	@ 0x80
 8005b5e:	05db      	lsls	r3, r3, #23
 8005b60:	22fa      	movs	r2, #250	@ 0xfa
 8005b62:	0112      	lsls	r2, r2, #4
 8005b64:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2 -> CCR4 = 4000;
 8005b66:	2380      	movs	r3, #128	@ 0x80
 8005b68:	05db      	lsls	r3, r3, #23
 8005b6a:	22fa      	movs	r2, #250	@ 0xfa
 8005b6c:	0112      	lsls	r2, r2, #4
 8005b6e:	641a      	str	r2, [r3, #64]	@ 0x40

  // Timer 3 PWM init
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_1);
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	2100      	movs	r1, #0
 8005b74:	0018      	movs	r0, r3
 8005b76:	f00a ffe9 	bl	8010b4c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_2);
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	2104      	movs	r1, #4
 8005b7e:	0018      	movs	r0, r3
 8005b80:	f00a ffe4 	bl	8010b4c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_3);
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	2108      	movs	r1, #8
 8005b88:	0018      	movs	r0, r3
 8005b8a:	f00a ffdf 	bl	8010b4c <HAL_TIM_PWM_Start>
  TIM3 -> ARR = 4000;
 8005b8e:	4b0a      	ldr	r3, [pc, #40]	@ (8005bb8 <GPIO_InitPWMLEDs+0x98>)
 8005b90:	22fa      	movs	r2, #250	@ 0xfa
 8005b92:	0112      	lsls	r2, r2, #4
 8005b94:	62da      	str	r2, [r3, #44]	@ 0x2c

  // CCR1 = Red, CCR2 = Green, CCR3 = Blue.
  TIM3 -> CCR1 = 4000;
 8005b96:	4b08      	ldr	r3, [pc, #32]	@ (8005bb8 <GPIO_InitPWMLEDs+0x98>)
 8005b98:	22fa      	movs	r2, #250	@ 0xfa
 8005b9a:	0112      	lsls	r2, r2, #4
 8005b9c:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3 -> CCR2 = 4000;
 8005b9e:	4b06      	ldr	r3, [pc, #24]	@ (8005bb8 <GPIO_InitPWMLEDs+0x98>)
 8005ba0:	22fa      	movs	r2, #250	@ 0xfa
 8005ba2:	0112      	lsls	r2, r2, #4
 8005ba4:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3 -> CCR3 = 4000;
 8005ba6:	4b04      	ldr	r3, [pc, #16]	@ (8005bb8 <GPIO_InitPWMLEDs+0x98>)
 8005ba8:	22fa      	movs	r2, #250	@ 0xfa
 8005baa:	0112      	lsls	r2, r2, #4
 8005bac:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8005bae:	46c0      	nop			@ (mov r8, r8)
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	b002      	add	sp, #8
 8005bb4:	bd80      	pop	{r7, pc}
 8005bb6:	46c0      	nop			@ (mov r8, r8)
 8005bb8:	40000400 	.word	0x40000400

08005bbc <HT_Init>:
#include <stdlib.h>
#include "humidTemp.h"
#include "utils.h"
#include "wsenHIDS.h"

void HT_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b082      	sub	sp, #8
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
 8005bc4:	6039      	str	r1, [r7, #0]
  HIDS_Init(readFunction, writeFunction);
 8005bc6:	683a      	ldr	r2, [r7, #0]
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	0011      	movs	r1, r2
 8005bcc:	0018      	movs	r0, r3
 8005bce:	f003 fe8b 	bl	80098e8 <HIDS_Init>
}
 8005bd2:	46c0      	nop			@ (mov r8, r8)
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	b002      	add	sp, #8
 8005bd8:	bd80      	pop	{r7, pc}

08005bda <HT_StartMeasurement>:

void HT_StartMeasurement() {
 8005bda:	b580      	push	{r7, lr}
 8005bdc:	af00      	add	r7, sp, #0
  HIDS_StartMeasurement();
 8005bde:	f003 fea5 	bl	800992c <HIDS_StartMeasurement>
}
 8005be2:	46c0      	nop			@ (mov r8, r8)
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bd80      	pop	{r7, pc}

08005be8 <HT_GetMeasurementValues>:

void HT_SetMeasurementDuration(uint32_t duration) {
  HIDS_SetMeasurementDuration(duration);
}

bool HT_GetMeasurementValues(float* humidity_perc, float* temperature) {
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b082      	sub	sp, #8
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
 8005bf0:	6039      	str	r1, [r7, #0]
  return HIDS_GetMeasurementValues(humidity_perc, temperature);
 8005bf2:	683a      	ldr	r2, [r7, #0]
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	0011      	movs	r1, r2
 8005bf8:	0018      	movs	r0, r3
 8005bfa:	f003 ff73 	bl	8009ae4 <HIDS_GetMeasurementValues>
 8005bfe:	0003      	movs	r3, r0
}
 8005c00:	0018      	movs	r0, r3
 8005c02:	46bd      	mov	sp, r7
 8005c04:	b002      	add	sp, #8
 8005c06:	bd80      	pop	{r7, pc}

08005c08 <HT_DeviceConnected>:

bool HT_DeviceConnected() {
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	af00      	add	r7, sp, #0
  return HIDS_DeviceConnected();
 8005c0c:	f003 ff0e 	bl	8009a2c <HIDS_DeviceConnected>
 8005c10:	0003      	movs	r3, r0
}
 8005c12:	0018      	movs	r0, r3
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}

08005c18 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8005c1c:	4b1b      	ldr	r3, [pc, #108]	@ (8005c8c <MX_I2C1_Init+0x74>)
 8005c1e:	4a1c      	ldr	r2, [pc, #112]	@ (8005c90 <MX_I2C1_Init+0x78>)
 8005c20:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00503D58;
 8005c22:	4b1a      	ldr	r3, [pc, #104]	@ (8005c8c <MX_I2C1_Init+0x74>)
 8005c24:	4a1b      	ldr	r2, [pc, #108]	@ (8005c94 <MX_I2C1_Init+0x7c>)
 8005c26:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8005c28:	4b18      	ldr	r3, [pc, #96]	@ (8005c8c <MX_I2C1_Init+0x74>)
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005c2e:	4b17      	ldr	r3, [pc, #92]	@ (8005c8c <MX_I2C1_Init+0x74>)
 8005c30:	2201      	movs	r2, #1
 8005c32:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005c34:	4b15      	ldr	r3, [pc, #84]	@ (8005c8c <MX_I2C1_Init+0x74>)
 8005c36:	2200      	movs	r2, #0
 8005c38:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8005c3a:	4b14      	ldr	r3, [pc, #80]	@ (8005c8c <MX_I2C1_Init+0x74>)
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8005c40:	4b12      	ldr	r3, [pc, #72]	@ (8005c8c <MX_I2C1_Init+0x74>)
 8005c42:	2200      	movs	r2, #0
 8005c44:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005c46:	4b11      	ldr	r3, [pc, #68]	@ (8005c8c <MX_I2C1_Init+0x74>)
 8005c48:	2200      	movs	r2, #0
 8005c4a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005c4c:	4b0f      	ldr	r3, [pc, #60]	@ (8005c8c <MX_I2C1_Init+0x74>)
 8005c4e:	2200      	movs	r2, #0
 8005c50:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005c52:	4b0e      	ldr	r3, [pc, #56]	@ (8005c8c <MX_I2C1_Init+0x74>)
 8005c54:	0018      	movs	r0, r3
 8005c56:	f005 fc47 	bl	800b4e8 <HAL_I2C_Init>
 8005c5a:	1e03      	subs	r3, r0, #0
 8005c5c:	d001      	beq.n	8005c62 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8005c5e:	f000 fb5d 	bl	800631c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8005c62:	4b0a      	ldr	r3, [pc, #40]	@ (8005c8c <MX_I2C1_Init+0x74>)
 8005c64:	2100      	movs	r1, #0
 8005c66:	0018      	movs	r0, r3
 8005c68:	f007 fbb6 	bl	800d3d8 <HAL_I2CEx_ConfigAnalogFilter>
 8005c6c:	1e03      	subs	r3, r0, #0
 8005c6e:	d001      	beq.n	8005c74 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8005c70:	f000 fb54 	bl	800631c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8005c74:	4b05      	ldr	r3, [pc, #20]	@ (8005c8c <MX_I2C1_Init+0x74>)
 8005c76:	2100      	movs	r1, #0
 8005c78:	0018      	movs	r0, r3
 8005c7a:	f007 fbf9 	bl	800d470 <HAL_I2CEx_ConfigDigitalFilter>
 8005c7e:	1e03      	subs	r3, r0, #0
 8005c80:	d001      	beq.n	8005c86 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8005c82:	f000 fb4b 	bl	800631c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8005c86:	46c0      	nop			@ (mov r8, r8)
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	bd80      	pop	{r7, pc}
 8005c8c:	20000c80 	.word	0x20000c80
 8005c90:	40005400 	.word	0x40005400
 8005c94:	00503d58 	.word	0x00503d58

08005c98 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8005c9c:	4b1b      	ldr	r3, [pc, #108]	@ (8005d0c <MX_I2C2_Init+0x74>)
 8005c9e:	4a1c      	ldr	r2, [pc, #112]	@ (8005d10 <MX_I2C2_Init+0x78>)
 8005ca0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00503D58;
 8005ca2:	4b1a      	ldr	r3, [pc, #104]	@ (8005d0c <MX_I2C2_Init+0x74>)
 8005ca4:	4a1b      	ldr	r2, [pc, #108]	@ (8005d14 <MX_I2C2_Init+0x7c>)
 8005ca6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8005ca8:	4b18      	ldr	r3, [pc, #96]	@ (8005d0c <MX_I2C2_Init+0x74>)
 8005caa:	2200      	movs	r2, #0
 8005cac:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005cae:	4b17      	ldr	r3, [pc, #92]	@ (8005d0c <MX_I2C2_Init+0x74>)
 8005cb0:	2201      	movs	r2, #1
 8005cb2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005cb4:	4b15      	ldr	r3, [pc, #84]	@ (8005d0c <MX_I2C2_Init+0x74>)
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8005cba:	4b14      	ldr	r3, [pc, #80]	@ (8005d0c <MX_I2C2_Init+0x74>)
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8005cc0:	4b12      	ldr	r3, [pc, #72]	@ (8005d0c <MX_I2C2_Init+0x74>)
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005cc6:	4b11      	ldr	r3, [pc, #68]	@ (8005d0c <MX_I2C2_Init+0x74>)
 8005cc8:	2200      	movs	r2, #0
 8005cca:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005ccc:	4b0f      	ldr	r3, [pc, #60]	@ (8005d0c <MX_I2C2_Init+0x74>)
 8005cce:	2200      	movs	r2, #0
 8005cd0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8005cd2:	4b0e      	ldr	r3, [pc, #56]	@ (8005d0c <MX_I2C2_Init+0x74>)
 8005cd4:	0018      	movs	r0, r3
 8005cd6:	f005 fc07 	bl	800b4e8 <HAL_I2C_Init>
 8005cda:	1e03      	subs	r3, r0, #0
 8005cdc:	d001      	beq.n	8005ce2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8005cde:	f000 fb1d 	bl	800631c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8005ce2:	4b0a      	ldr	r3, [pc, #40]	@ (8005d0c <MX_I2C2_Init+0x74>)
 8005ce4:	2100      	movs	r1, #0
 8005ce6:	0018      	movs	r0, r3
 8005ce8:	f007 fb76 	bl	800d3d8 <HAL_I2CEx_ConfigAnalogFilter>
 8005cec:	1e03      	subs	r3, r0, #0
 8005cee:	d001      	beq.n	8005cf4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8005cf0:	f000 fb14 	bl	800631c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8005cf4:	4b05      	ldr	r3, [pc, #20]	@ (8005d0c <MX_I2C2_Init+0x74>)
 8005cf6:	2100      	movs	r1, #0
 8005cf8:	0018      	movs	r0, r3
 8005cfa:	f007 fbb9 	bl	800d470 <HAL_I2CEx_ConfigDigitalFilter>
 8005cfe:	1e03      	subs	r3, r0, #0
 8005d00:	d001      	beq.n	8005d06 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8005d02:	f000 fb0b 	bl	800631c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8005d06:	46c0      	nop			@ (mov r8, r8)
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	bd80      	pop	{r7, pc}
 8005d0c:	20000cd4 	.word	0x20000cd4
 8005d10:	40005800 	.word	0x40005800
 8005d14:	00503d58 	.word	0x00503d58

08005d18 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8005d18:	b590      	push	{r4, r7, lr}
 8005d1a:	b08b      	sub	sp, #44	@ 0x2c
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005d20:	2414      	movs	r4, #20
 8005d22:	193b      	adds	r3, r7, r4
 8005d24:	0018      	movs	r0, r3
 8005d26:	2314      	movs	r3, #20
 8005d28:	001a      	movs	r2, r3
 8005d2a:	2100      	movs	r1, #0
 8005d2c:	f012 f88e 	bl	8017e4c <memset>
  if(i2cHandle->Instance==I2C1)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a5d      	ldr	r2, [pc, #372]	@ (8005eac <HAL_I2C_MspInit+0x194>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d000      	beq.n	8005d3c <HAL_I2C_MspInit+0x24>
 8005d3a:	e083      	b.n	8005e44 <HAL_I2C_MspInit+0x12c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005d3c:	4b5c      	ldr	r3, [pc, #368]	@ (8005eb0 <HAL_I2C_MspInit+0x198>)
 8005d3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d40:	4b5b      	ldr	r3, [pc, #364]	@ (8005eb0 <HAL_I2C_MspInit+0x198>)
 8005d42:	2102      	movs	r1, #2
 8005d44:	430a      	orrs	r2, r1
 8005d46:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005d48:	4b59      	ldr	r3, [pc, #356]	@ (8005eb0 <HAL_I2C_MspInit+0x198>)
 8005d4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d4c:	2202      	movs	r2, #2
 8005d4e:	4013      	ands	r3, r2
 8005d50:	613b      	str	r3, [r7, #16]
 8005d52:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005d54:	0021      	movs	r1, r4
 8005d56:	187b      	adds	r3, r7, r1
 8005d58:	22c0      	movs	r2, #192	@ 0xc0
 8005d5a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005d5c:	187b      	adds	r3, r7, r1
 8005d5e:	2212      	movs	r2, #18
 8005d60:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d62:	187b      	adds	r3, r7, r1
 8005d64:	2200      	movs	r2, #0
 8005d66:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005d68:	187b      	adds	r3, r7, r1
 8005d6a:	2203      	movs	r2, #3
 8005d6c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8005d6e:	187b      	adds	r3, r7, r1
 8005d70:	2201      	movs	r2, #1
 8005d72:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005d74:	187b      	adds	r3, r7, r1
 8005d76:	4a4f      	ldr	r2, [pc, #316]	@ (8005eb4 <HAL_I2C_MspInit+0x19c>)
 8005d78:	0019      	movs	r1, r3
 8005d7a:	0010      	movs	r0, r2
 8005d7c:	f005 f91a 	bl	800afb4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005d80:	4b4b      	ldr	r3, [pc, #300]	@ (8005eb0 <HAL_I2C_MspInit+0x198>)
 8005d82:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005d84:	4b4a      	ldr	r3, [pc, #296]	@ (8005eb0 <HAL_I2C_MspInit+0x198>)
 8005d86:	2180      	movs	r1, #128	@ 0x80
 8005d88:	0389      	lsls	r1, r1, #14
 8005d8a:	430a      	orrs	r2, r1
 8005d8c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel3;
 8005d8e:	4b4a      	ldr	r3, [pc, #296]	@ (8005eb8 <HAL_I2C_MspInit+0x1a0>)
 8005d90:	4a4a      	ldr	r2, [pc, #296]	@ (8005ebc <HAL_I2C_MspInit+0x1a4>)
 8005d92:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_6;
 8005d94:	4b48      	ldr	r3, [pc, #288]	@ (8005eb8 <HAL_I2C_MspInit+0x1a0>)
 8005d96:	2206      	movs	r2, #6
 8005d98:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005d9a:	4b47      	ldr	r3, [pc, #284]	@ (8005eb8 <HAL_I2C_MspInit+0x1a0>)
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005da0:	4b45      	ldr	r3, [pc, #276]	@ (8005eb8 <HAL_I2C_MspInit+0x1a0>)
 8005da2:	2200      	movs	r2, #0
 8005da4:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005da6:	4b44      	ldr	r3, [pc, #272]	@ (8005eb8 <HAL_I2C_MspInit+0x1a0>)
 8005da8:	2280      	movs	r2, #128	@ 0x80
 8005daa:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005dac:	4b42      	ldr	r3, [pc, #264]	@ (8005eb8 <HAL_I2C_MspInit+0x1a0>)
 8005dae:	2200      	movs	r2, #0
 8005db0:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005db2:	4b41      	ldr	r3, [pc, #260]	@ (8005eb8 <HAL_I2C_MspInit+0x1a0>)
 8005db4:	2200      	movs	r2, #0
 8005db6:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8005db8:	4b3f      	ldr	r3, [pc, #252]	@ (8005eb8 <HAL_I2C_MspInit+0x1a0>)
 8005dba:	2200      	movs	r2, #0
 8005dbc:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005dbe:	4b3e      	ldr	r3, [pc, #248]	@ (8005eb8 <HAL_I2C_MspInit+0x1a0>)
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8005dc4:	4b3c      	ldr	r3, [pc, #240]	@ (8005eb8 <HAL_I2C_MspInit+0x1a0>)
 8005dc6:	0018      	movs	r0, r3
 8005dc8:	f004 fc7a 	bl	800a6c0 <HAL_DMA_Init>
 8005dcc:	1e03      	subs	r3, r0, #0
 8005dce:	d001      	beq.n	8005dd4 <HAL_I2C_MspInit+0xbc>
    {
      Error_Handler();
 8005dd0:	f000 faa4 	bl	800631c <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	4a38      	ldr	r2, [pc, #224]	@ (8005eb8 <HAL_I2C_MspInit+0x1a0>)
 8005dd8:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005dda:	4b37      	ldr	r3, [pc, #220]	@ (8005eb8 <HAL_I2C_MspInit+0x1a0>)
 8005ddc:	687a      	ldr	r2, [r7, #4]
 8005dde:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel2;
 8005de0:	4b37      	ldr	r3, [pc, #220]	@ (8005ec0 <HAL_I2C_MspInit+0x1a8>)
 8005de2:	4a38      	ldr	r2, [pc, #224]	@ (8005ec4 <HAL_I2C_MspInit+0x1ac>)
 8005de4:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_6;
 8005de6:	4b36      	ldr	r3, [pc, #216]	@ (8005ec0 <HAL_I2C_MspInit+0x1a8>)
 8005de8:	2206      	movs	r2, #6
 8005dea:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005dec:	4b34      	ldr	r3, [pc, #208]	@ (8005ec0 <HAL_I2C_MspInit+0x1a8>)
 8005dee:	2210      	movs	r2, #16
 8005df0:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005df2:	4b33      	ldr	r3, [pc, #204]	@ (8005ec0 <HAL_I2C_MspInit+0x1a8>)
 8005df4:	2200      	movs	r2, #0
 8005df6:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005df8:	4b31      	ldr	r3, [pc, #196]	@ (8005ec0 <HAL_I2C_MspInit+0x1a8>)
 8005dfa:	2280      	movs	r2, #128	@ 0x80
 8005dfc:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005dfe:	4b30      	ldr	r3, [pc, #192]	@ (8005ec0 <HAL_I2C_MspInit+0x1a8>)
 8005e00:	2200      	movs	r2, #0
 8005e02:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005e04:	4b2e      	ldr	r3, [pc, #184]	@ (8005ec0 <HAL_I2C_MspInit+0x1a8>)
 8005e06:	2200      	movs	r2, #0
 8005e08:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8005e0a:	4b2d      	ldr	r3, [pc, #180]	@ (8005ec0 <HAL_I2C_MspInit+0x1a8>)
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005e10:	4b2b      	ldr	r3, [pc, #172]	@ (8005ec0 <HAL_I2C_MspInit+0x1a8>)
 8005e12:	2200      	movs	r2, #0
 8005e14:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8005e16:	4b2a      	ldr	r3, [pc, #168]	@ (8005ec0 <HAL_I2C_MspInit+0x1a8>)
 8005e18:	0018      	movs	r0, r3
 8005e1a:	f004 fc51 	bl	800a6c0 <HAL_DMA_Init>
 8005e1e:	1e03      	subs	r3, r0, #0
 8005e20:	d001      	beq.n	8005e26 <HAL_I2C_MspInit+0x10e>
    {
      Error_Handler();
 8005e22:	f000 fa7b 	bl	800631c <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	4a25      	ldr	r2, [pc, #148]	@ (8005ec0 <HAL_I2C_MspInit+0x1a8>)
 8005e2a:	639a      	str	r2, [r3, #56]	@ 0x38
 8005e2c:	4b24      	ldr	r3, [pc, #144]	@ (8005ec0 <HAL_I2C_MspInit+0x1a8>)
 8005e2e:	687a      	ldr	r2, [r7, #4]
 8005e30:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 8005e32:	2200      	movs	r2, #0
 8005e34:	2100      	movs	r1, #0
 8005e36:	2017      	movs	r0, #23
 8005e38:	f004 fc10 	bl	800a65c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 8005e3c:	2017      	movs	r0, #23
 8005e3e:	f004 fc22 	bl	800a686 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8005e42:	e02e      	b.n	8005ea2 <HAL_I2C_MspInit+0x18a>
  else if(i2cHandle->Instance==I2C2)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4a1f      	ldr	r2, [pc, #124]	@ (8005ec8 <HAL_I2C_MspInit+0x1b0>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d129      	bne.n	8005ea2 <HAL_I2C_MspInit+0x18a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005e4e:	4b18      	ldr	r3, [pc, #96]	@ (8005eb0 <HAL_I2C_MspInit+0x198>)
 8005e50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e52:	4b17      	ldr	r3, [pc, #92]	@ (8005eb0 <HAL_I2C_MspInit+0x198>)
 8005e54:	2102      	movs	r1, #2
 8005e56:	430a      	orrs	r2, r1
 8005e58:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005e5a:	4b15      	ldr	r3, [pc, #84]	@ (8005eb0 <HAL_I2C_MspInit+0x198>)
 8005e5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e5e:	2202      	movs	r2, #2
 8005e60:	4013      	ands	r3, r2
 8005e62:	60fb      	str	r3, [r7, #12]
 8005e64:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8005e66:	2114      	movs	r1, #20
 8005e68:	187b      	adds	r3, r7, r1
 8005e6a:	22c0      	movs	r2, #192	@ 0xc0
 8005e6c:	0112      	lsls	r2, r2, #4
 8005e6e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005e70:	187b      	adds	r3, r7, r1
 8005e72:	2212      	movs	r2, #18
 8005e74:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e76:	187b      	adds	r3, r7, r1
 8005e78:	2200      	movs	r2, #0
 8005e7a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005e7c:	187b      	adds	r3, r7, r1
 8005e7e:	2203      	movs	r2, #3
 8005e80:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 8005e82:	187b      	adds	r3, r7, r1
 8005e84:	2206      	movs	r2, #6
 8005e86:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005e88:	187b      	adds	r3, r7, r1
 8005e8a:	4a0a      	ldr	r2, [pc, #40]	@ (8005eb4 <HAL_I2C_MspInit+0x19c>)
 8005e8c:	0019      	movs	r1, r3
 8005e8e:	0010      	movs	r0, r2
 8005e90:	f005 f890 	bl	800afb4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8005e94:	4b06      	ldr	r3, [pc, #24]	@ (8005eb0 <HAL_I2C_MspInit+0x198>)
 8005e96:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005e98:	4b05      	ldr	r3, [pc, #20]	@ (8005eb0 <HAL_I2C_MspInit+0x198>)
 8005e9a:	2180      	movs	r1, #128	@ 0x80
 8005e9c:	03c9      	lsls	r1, r1, #15
 8005e9e:	430a      	orrs	r2, r1
 8005ea0:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8005ea2:	46c0      	nop			@ (mov r8, r8)
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	b00b      	add	sp, #44	@ 0x2c
 8005ea8:	bd90      	pop	{r4, r7, pc}
 8005eaa:	46c0      	nop			@ (mov r8, r8)
 8005eac:	40005400 	.word	0x40005400
 8005eb0:	40021000 	.word	0x40021000
 8005eb4:	50000400 	.word	0x50000400
 8005eb8:	20000d28 	.word	0x20000d28
 8005ebc:	40020030 	.word	0x40020030
 8005ec0:	20000d70 	.word	0x20000d70
 8005ec4:	4002001c 	.word	0x4002001c
 8005ec8:	40005800 	.word	0x40005800

08005ecc <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
DMA_HandleTypeDef hdma_spi2_rx;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8005ed0:	4b10      	ldr	r3, [pc, #64]	@ (8005f14 <MX_I2S2_Init+0x48>)
 8005ed2:	4a11      	ldr	r2, [pc, #68]	@ (8005f18 <MX_I2S2_Init+0x4c>)
 8005ed4:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 8005ed6:	4b0f      	ldr	r3, [pc, #60]	@ (8005f14 <MX_I2S2_Init+0x48>)
 8005ed8:	22c0      	movs	r2, #192	@ 0xc0
 8005eda:	0092      	lsls	r2, r2, #2
 8005edc:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_MSB;
 8005ede:	4b0d      	ldr	r3, [pc, #52]	@ (8005f14 <MX_I2S2_Init+0x48>)
 8005ee0:	2210      	movs	r2, #16
 8005ee2:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_32B;
 8005ee4:	4b0b      	ldr	r3, [pc, #44]	@ (8005f14 <MX_I2S2_Init+0x48>)
 8005ee6:	2205      	movs	r2, #5
 8005ee8:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8005eea:	4b0a      	ldr	r3, [pc, #40]	@ (8005f14 <MX_I2S2_Init+0x48>)
 8005eec:	2200      	movs	r2, #0
 8005eee:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 8005ef0:	4b08      	ldr	r3, [pc, #32]	@ (8005f14 <MX_I2S2_Init+0x48>)
 8005ef2:	22fa      	movs	r2, #250	@ 0xfa
 8005ef4:	0152      	lsls	r2, r2, #5
 8005ef6:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_HIGH;
 8005ef8:	4b06      	ldr	r3, [pc, #24]	@ (8005f14 <MX_I2S2_Init+0x48>)
 8005efa:	2208      	movs	r2, #8
 8005efc:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8005efe:	4b05      	ldr	r3, [pc, #20]	@ (8005f14 <MX_I2S2_Init+0x48>)
 8005f00:	0018      	movs	r0, r3
 8005f02:	f007 fb01 	bl	800d508 <HAL_I2S_Init>
 8005f06:	1e03      	subs	r3, r0, #0
 8005f08:	d001      	beq.n	8005f0e <MX_I2S2_Init+0x42>
  {
    Error_Handler();
 8005f0a:	f000 fa07 	bl	800631c <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8005f0e:	46c0      	nop			@ (mov r8, r8)
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bd80      	pop	{r7, pc}
 8005f14:	20000db8 	.word	0x20000db8
 8005f18:	40003800 	.word	0x40003800

08005f1c <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8005f1c:	b590      	push	{r4, r7, lr}
 8005f1e:	b089      	sub	sp, #36	@ 0x24
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f24:	240c      	movs	r4, #12
 8005f26:	193b      	adds	r3, r7, r4
 8005f28:	0018      	movs	r0, r3
 8005f2a:	2314      	movs	r3, #20
 8005f2c:	001a      	movs	r2, r3
 8005f2e:	2100      	movs	r1, #0
 8005f30:	f011 ff8c 	bl	8017e4c <memset>
  if(i2sHandle->Instance==SPI2)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4a2d      	ldr	r2, [pc, #180]	@ (8005ff0 <HAL_I2S_MspInit+0xd4>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d154      	bne.n	8005fe8 <HAL_I2S_MspInit+0xcc>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8005f3e:	4b2d      	ldr	r3, [pc, #180]	@ (8005ff4 <HAL_I2S_MspInit+0xd8>)
 8005f40:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005f42:	4b2c      	ldr	r3, [pc, #176]	@ (8005ff4 <HAL_I2S_MspInit+0xd8>)
 8005f44:	2180      	movs	r1, #128	@ 0x80
 8005f46:	01c9      	lsls	r1, r1, #7
 8005f48:	430a      	orrs	r2, r1
 8005f4a:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005f4c:	4b29      	ldr	r3, [pc, #164]	@ (8005ff4 <HAL_I2S_MspInit+0xd8>)
 8005f4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f50:	4b28      	ldr	r3, [pc, #160]	@ (8005ff4 <HAL_I2S_MspInit+0xd8>)
 8005f52:	2102      	movs	r1, #2
 8005f54:	430a      	orrs	r2, r1
 8005f56:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005f58:	4b26      	ldr	r3, [pc, #152]	@ (8005ff4 <HAL_I2S_MspInit+0xd8>)
 8005f5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f5c:	2202      	movs	r2, #2
 8005f5e:	4013      	ands	r3, r2
 8005f60:	60bb      	str	r3, [r7, #8]
 8005f62:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8005f64:	193b      	adds	r3, r7, r4
 8005f66:	22b0      	movs	r2, #176	@ 0xb0
 8005f68:	0212      	lsls	r2, r2, #8
 8005f6a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f6c:	0021      	movs	r1, r4
 8005f6e:	187b      	adds	r3, r7, r1
 8005f70:	2202      	movs	r2, #2
 8005f72:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f74:	187b      	adds	r3, r7, r1
 8005f76:	2200      	movs	r2, #0
 8005f78:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005f7a:	187b      	adds	r3, r7, r1
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8005f80:	187b      	adds	r3, r7, r1
 8005f82:	2200      	movs	r2, #0
 8005f84:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005f86:	187b      	adds	r3, r7, r1
 8005f88:	4a1b      	ldr	r2, [pc, #108]	@ (8005ff8 <HAL_I2S_MspInit+0xdc>)
 8005f8a:	0019      	movs	r1, r3
 8005f8c:	0010      	movs	r0, r2
 8005f8e:	f005 f811 	bl	800afb4 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel4;
 8005f92:	4b1a      	ldr	r3, [pc, #104]	@ (8005ffc <HAL_I2S_MspInit+0xe0>)
 8005f94:	4a1a      	ldr	r2, [pc, #104]	@ (8006000 <HAL_I2S_MspInit+0xe4>)
 8005f96:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_2;
 8005f98:	4b18      	ldr	r3, [pc, #96]	@ (8005ffc <HAL_I2S_MspInit+0xe0>)
 8005f9a:	2202      	movs	r2, #2
 8005f9c:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005f9e:	4b17      	ldr	r3, [pc, #92]	@ (8005ffc <HAL_I2S_MspInit+0xe0>)
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005fa4:	4b15      	ldr	r3, [pc, #84]	@ (8005ffc <HAL_I2S_MspInit+0xe0>)
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005faa:	4b14      	ldr	r3, [pc, #80]	@ (8005ffc <HAL_I2S_MspInit+0xe0>)
 8005fac:	2280      	movs	r2, #128	@ 0x80
 8005fae:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005fb0:	4b12      	ldr	r3, [pc, #72]	@ (8005ffc <HAL_I2S_MspInit+0xe0>)
 8005fb2:	2280      	movs	r2, #128	@ 0x80
 8005fb4:	0052      	lsls	r2, r2, #1
 8005fb6:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005fb8:	4b10      	ldr	r3, [pc, #64]	@ (8005ffc <HAL_I2S_MspInit+0xe0>)
 8005fba:	2280      	movs	r2, #128	@ 0x80
 8005fbc:	00d2      	lsls	r2, r2, #3
 8005fbe:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8005fc0:	4b0e      	ldr	r3, [pc, #56]	@ (8005ffc <HAL_I2S_MspInit+0xe0>)
 8005fc2:	2220      	movs	r2, #32
 8005fc4:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005fc6:	4b0d      	ldr	r3, [pc, #52]	@ (8005ffc <HAL_I2S_MspInit+0xe0>)
 8005fc8:	2200      	movs	r2, #0
 8005fca:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8005fcc:	4b0b      	ldr	r3, [pc, #44]	@ (8005ffc <HAL_I2S_MspInit+0xe0>)
 8005fce:	0018      	movs	r0, r3
 8005fd0:	f004 fb76 	bl	800a6c0 <HAL_DMA_Init>
 8005fd4:	1e03      	subs	r3, r0, #0
 8005fd6:	d001      	beq.n	8005fdc <HAL_I2S_MspInit+0xc0>
    {
      Error_Handler();
 8005fd8:	f000 f9a0 	bl	800631c <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmarx,hdma_spi2_rx);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	4a07      	ldr	r2, [pc, #28]	@ (8005ffc <HAL_I2S_MspInit+0xe0>)
 8005fe0:	631a      	str	r2, [r3, #48]	@ 0x30
 8005fe2:	4b06      	ldr	r3, [pc, #24]	@ (8005ffc <HAL_I2S_MspInit+0xe0>)
 8005fe4:	687a      	ldr	r2, [r7, #4]
 8005fe6:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8005fe8:	46c0      	nop			@ (mov r8, r8)
 8005fea:	46bd      	mov	sp, r7
 8005fec:	b009      	add	sp, #36	@ 0x24
 8005fee:	bd90      	pop	{r4, r7, pc}
 8005ff0:	40003800 	.word	0x40003800
 8005ff4:	40021000 	.word	0x40021000
 8005ff8:	50000400 	.word	0x50000400
 8005ffc:	20000df4 	.word	0x20000df4
 8006000:	40020044 	.word	0x40020044

08006004 <HAL_I2S_MspDeInit>:

void HAL_I2S_MspDeInit(I2S_HandleTypeDef* i2sHandle)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b082      	sub	sp, #8
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]

  if(i2sHandle->Instance==SPI2)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a0c      	ldr	r2, [pc, #48]	@ (8006044 <HAL_I2S_MspDeInit+0x40>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d111      	bne.n	800603a <HAL_I2S_MspDeInit+0x36>
  {
  /* USER CODE BEGIN SPI2_MspDeInit 0 */

  /* USER CODE END SPI2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI2_CLK_DISABLE();
 8006016:	4b0c      	ldr	r3, [pc, #48]	@ (8006048 <HAL_I2S_MspDeInit+0x44>)
 8006018:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800601a:	4b0b      	ldr	r3, [pc, #44]	@ (8006048 <HAL_I2S_MspDeInit+0x44>)
 800601c:	490b      	ldr	r1, [pc, #44]	@ (800604c <HAL_I2S_MspDeInit+0x48>)
 800601e:	400a      	ands	r2, r1
 8006020:	639a      	str	r2, [r3, #56]	@ 0x38
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15);
 8006022:	23b0      	movs	r3, #176	@ 0xb0
 8006024:	021b      	lsls	r3, r3, #8
 8006026:	4a0a      	ldr	r2, [pc, #40]	@ (8006050 <HAL_I2S_MspDeInit+0x4c>)
 8006028:	0019      	movs	r1, r3
 800602a:	0010      	movs	r0, r2
 800602c:	f005 f940 	bl	800b2b0 <HAL_GPIO_DeInit>

    /* I2S2 DMA DeInit */
    HAL_DMA_DeInit(i2sHandle->hdmarx);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006034:	0018      	movs	r0, r3
 8006036:	f004 fbbb 	bl	800a7b0 <HAL_DMA_DeInit>
  /* USER CODE BEGIN SPI2_MspDeInit 1 */

  /* USER CODE END SPI2_MspDeInit 1 */
  }
}
 800603a:	46c0      	nop			@ (mov r8, r8)
 800603c:	46bd      	mov	sp, r7
 800603e:	b002      	add	sp, #8
 8006040:	bd80      	pop	{r7, pc}
 8006042:	46c0      	nop			@ (mov r8, r8)
 8006044:	40003800 	.word	0x40003800
 8006048:	40021000 	.word	0x40021000
 800604c:	ffffbfff 	.word	0xffffbfff
 8006050:	50000400 	.word	0x50000400

08006054 <SetTestDone>:
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void SetTestDone(){
 8006054:	b580      	push	{r7, lr}
 8006056:	af00      	add	r7, sp, #0
  testDone = true;
 8006058:	4b35      	ldr	r3, [pc, #212]	@ (8006130 <SetTestDone+0xdc>)
 800605a:	2201      	movs	r2, #1
 800605c:	701a      	strb	r2, [r3, #0]
  HAL_Delay(1000);
 800605e:	23fa      	movs	r3, #250	@ 0xfa
 8006060:	009b      	lsls	r3, r3, #2
 8006062:	0018      	movs	r0, r3
 8006064:	f003 fe8e 	bl	8009d84 <HAL_Delay>
  HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 1);
 8006068:	4b32      	ldr	r3, [pc, #200]	@ (8006134 <SetTestDone+0xe0>)
 800606a:	2201      	movs	r2, #1
 800606c:	2101      	movs	r1, #1
 800606e:	0018      	movs	r0, r3
 8006070:	f005 fa1d 	bl	800b4ae <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
 8006074:	2380      	movs	r3, #128	@ 0x80
 8006076:	005b      	lsls	r3, r3, #1
 8006078:	482e      	ldr	r0, [pc, #184]	@ (8006134 <SetTestDone+0xe0>)
 800607a:	2201      	movs	r2, #1
 800607c:	0019      	movs	r1, r3
 800607e:	f005 fa16 	bl	800b4ae <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 0);
 8006082:	2380      	movs	r3, #128	@ 0x80
 8006084:	009b      	lsls	r3, r3, #2
 8006086:	482b      	ldr	r0, [pc, #172]	@ (8006134 <SetTestDone+0xe0>)
 8006088:	2200      	movs	r2, #0
 800608a:	0019      	movs	r1, r3
 800608c:	f005 fa0f 	bl	800b4ae <HAL_GPIO_WritePin>
  TIM2 -> CCR1 = 4000;
 8006090:	2380      	movs	r3, #128	@ 0x80
 8006092:	05db      	lsls	r3, r3, #23
 8006094:	22fa      	movs	r2, #250	@ 0xfa
 8006096:	0112      	lsls	r2, r2, #4
 8006098:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2 -> CCR3 = 4000;
 800609a:	2380      	movs	r3, #128	@ 0x80
 800609c:	05db      	lsls	r3, r3, #23
 800609e:	22fa      	movs	r2, #250	@ 0xfa
 80060a0:	0112      	lsls	r2, r2, #4
 80060a2:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2 -> CCR4 = 0;
 80060a4:	2380      	movs	r3, #128	@ 0x80
 80060a6:	05db      	lsls	r3, r3, #23
 80060a8:	2200      	movs	r2, #0
 80060aa:	641a      	str	r2, [r3, #64]	@ 0x40
  TIM3 -> CCR1 = 4000;
 80060ac:	4b22      	ldr	r3, [pc, #136]	@ (8006138 <SetTestDone+0xe4>)
 80060ae:	22fa      	movs	r2, #250	@ 0xfa
 80060b0:	0112      	lsls	r2, r2, #4
 80060b2:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3 -> CCR2 = 4000;
 80060b4:	4b20      	ldr	r3, [pc, #128]	@ (8006138 <SetTestDone+0xe4>)
 80060b6:	22fa      	movs	r2, #250	@ 0xfa
 80060b8:	0112      	lsls	r2, r2, #4
 80060ba:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3 -> CCR3 = 0;
 80060bc:	4b1e      	ldr	r3, [pc, #120]	@ (8006138 <SetTestDone+0xe4>)
 80060be:	2200      	movs	r2, #0
 80060c0:	63da      	str	r2, [r3, #60]	@ 0x3c
  HAL_Delay(1000);
 80060c2:	23fa      	movs	r3, #250	@ 0xfa
 80060c4:	009b      	lsls	r3, r3, #2
 80060c6:	0018      	movs	r0, r3
 80060c8:	f003 fe5c 	bl	8009d84 <HAL_Delay>
  HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 1);
 80060cc:	4b19      	ldr	r3, [pc, #100]	@ (8006134 <SetTestDone+0xe0>)
 80060ce:	2201      	movs	r2, #1
 80060d0:	2101      	movs	r1, #1
 80060d2:	0018      	movs	r0, r3
 80060d4:	f005 f9eb 	bl	800b4ae <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
 80060d8:	2380      	movs	r3, #128	@ 0x80
 80060da:	005b      	lsls	r3, r3, #1
 80060dc:	4815      	ldr	r0, [pc, #84]	@ (8006134 <SetTestDone+0xe0>)
 80060de:	2201      	movs	r2, #1
 80060e0:	0019      	movs	r1, r3
 80060e2:	f005 f9e4 	bl	800b4ae <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
 80060e6:	2380      	movs	r3, #128	@ 0x80
 80060e8:	009b      	lsls	r3, r3, #2
 80060ea:	4812      	ldr	r0, [pc, #72]	@ (8006134 <SetTestDone+0xe0>)
 80060ec:	2201      	movs	r2, #1
 80060ee:	0019      	movs	r1, r3
 80060f0:	f005 f9dd 	bl	800b4ae <HAL_GPIO_WritePin>
  TIM2 -> CCR1 = 4000;
 80060f4:	2380      	movs	r3, #128	@ 0x80
 80060f6:	05db      	lsls	r3, r3, #23
 80060f8:	22fa      	movs	r2, #250	@ 0xfa
 80060fa:	0112      	lsls	r2, r2, #4
 80060fc:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2 -> CCR3 = 4000;
 80060fe:	2380      	movs	r3, #128	@ 0x80
 8006100:	05db      	lsls	r3, r3, #23
 8006102:	22fa      	movs	r2, #250	@ 0xfa
 8006104:	0112      	lsls	r2, r2, #4
 8006106:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2 -> CCR4 = 4000;
 8006108:	2380      	movs	r3, #128	@ 0x80
 800610a:	05db      	lsls	r3, r3, #23
 800610c:	22fa      	movs	r2, #250	@ 0xfa
 800610e:	0112      	lsls	r2, r2, #4
 8006110:	641a      	str	r2, [r3, #64]	@ 0x40
  TIM3 -> CCR1 = 4000;
 8006112:	4b09      	ldr	r3, [pc, #36]	@ (8006138 <SetTestDone+0xe4>)
 8006114:	22fa      	movs	r2, #250	@ 0xfa
 8006116:	0112      	lsls	r2, r2, #4
 8006118:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3 -> CCR2 = 4000;
 800611a:	4b07      	ldr	r3, [pc, #28]	@ (8006138 <SetTestDone+0xe4>)
 800611c:	22fa      	movs	r2, #250	@ 0xfa
 800611e:	0112      	lsls	r2, r2, #4
 8006120:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3 -> CCR3 = 4000;
 8006122:	4b05      	ldr	r3, [pc, #20]	@ (8006138 <SetTestDone+0xe4>)
 8006124:	22fa      	movs	r2, #250	@ 0xfa
 8006126:	0112      	lsls	r2, r2, #4
 8006128:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800612a:	46c0      	nop			@ (mov r8, r8)
 800612c:	46bd      	mov	sp, r7
 800612e:	bd80      	pop	{r7, pc}
 8006130:	20000e3c 	.word	0x20000e3c
 8006134:	50000400 	.word	0x50000400
 8006138:	40000400 	.word	0x40000400

0800613c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006140:	f003 fdb0 	bl	8009ca4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006144:	f000 f864 	bl	8006210 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006148:	f7ff fbd4 	bl	80058f4 <MX_GPIO_Init>
  MX_DMA_Init();
 800614c:	f7ff fb48 	bl	80057e0 <MX_DMA_Init>
  MX_I2C1_Init();
 8006150:	f7ff fd62 	bl	8005c18 <MX_I2C1_Init>
  MX_I2S2_Init();
 8006154:	f7ff feba 	bl	8005ecc <MX_I2S2_Init>
  MX_USART1_UART_Init();
 8006158:	f003 f884 	bl	8009264 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 800615c:	f7ff fd9c 	bl	8005c98 <MX_I2C2_Init>
  MX_TIM2_Init();
 8006160:	f002 fecc 	bl	8008efc <MX_TIM2_Init>
  MX_TIM3_Init();
 8006164:	f002 ff3e 	bl	8008fe4 <MX_TIM3_Init>
  MX_USART4_UART_Init();
 8006168:	f003 f8b0 	bl	80092cc <MX_USART4_UART_Init>
  MX_ADC_Init();
 800616c:	f7ff fa86 	bl	800567c <MX_ADC_Init>
  MX_USB_DEVICE_Init();
 8006170:	f010 faf2 	bl	8016758 <MX_USB_DEVICE_Init>
  MX_RTC_Init();
 8006174:	f001 f87e 	bl	8007274 <MX_RTC_Init>
  MX_LPUART1_UART_Init();
 8006178:	f003 f83e 	bl	80091f8 <MX_LPUART1_UART_Init>
	 * : Default network: Sensor community
	 * : Different modes for outside and inside (check solar?)
	 * : Add CLI via usb-c
	 * : Network not found? Sleep
	 */
  GPIO_InitPWMLEDs(&htim2, &htim3);
 800617c:	4a1c      	ldr	r2, [pc, #112]	@ (80061f0 <main+0xb4>)
 800617e:	4b1d      	ldr	r3, [pc, #116]	@ (80061f4 <main+0xb8>)
 8006180:	0011      	movs	r1, r2
 8006182:	0018      	movs	r0, r3
 8006184:	f7ff fccc 	bl	8005b20 <GPIO_InitPWMLEDs>
  if(UserButton_Pressed()){
 8006188:	f7ff fa68 	bl	800565c <UserButton_Pressed>
 800618c:	1e03      	subs	r3, r0, #0
 800618e:	d004      	beq.n	800619a <main+0x5e>
    EnableESPProg();
 8006190:	f010 fbb2 	bl	80168f8 <EnableESPProg>
    ESP_Programming = true;
 8006194:	4b18      	ldr	r3, [pc, #96]	@ (80061f8 <main+0xbc>)
 8006196:	2201      	movs	r2, #1
 8006198:	701a      	strb	r2, [r3, #0]
  }
  //uint32_t LedBlinkTimestamp = HAL_GetTick() + LED_BLINK_INTERVAL;
  SetVerboseLevel(VERBOSE_ALL);
 800619a:	2003      	movs	r0, #3
 800619c:	f003 fac8 	bl	8009730 <SetVerboseLevel>
  BinaryReleaseInfo();
 80061a0:	f003 fade 	bl	8009760 <BinaryReleaseInfo>
  Gadget_Init(&hi2c1, &hi2s2, &huart4, &hadc);
 80061a4:	4b15      	ldr	r3, [pc, #84]	@ (80061fc <main+0xc0>)
 80061a6:	4a16      	ldr	r2, [pc, #88]	@ (8006200 <main+0xc4>)
 80061a8:	4916      	ldr	r1, [pc, #88]	@ (8006204 <main+0xc8>)
 80061aa:	4817      	ldr	r0, [pc, #92]	@ (8006208 <main+0xcc>)
 80061ac:	f7ff fb3e 	bl	800582c <Gadget_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
	  // Upkeep gadget
    if(testDone && !ESP_Programming){
 80061b0:	4b16      	ldr	r3, [pc, #88]	@ (800620c <main+0xd0>)
 80061b2:	781b      	ldrb	r3, [r3, #0]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d00a      	beq.n	80061ce <main+0x92>
 80061b8:	4b0f      	ldr	r3, [pc, #60]	@ (80061f8 <main+0xbc>)
 80061ba:	781b      	ldrb	r3, [r3, #0]
 80061bc:	2201      	movs	r2, #1
 80061be:	4053      	eors	r3, r2
 80061c0:	b2db      	uxtb	r3, r3
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d003      	beq.n	80061ce <main+0x92>
      UpkeepGadget();
 80061c6:	f7ff fb5e 	bl	8005886 <UpkeepGadget>
      ESP_Upkeep();
 80061ca:	f7fe fca9 	bl	8004b20 <ESP_Upkeep>
    }
    if(!testDone && !ESP_Programming){
 80061ce:	4b0f      	ldr	r3, [pc, #60]	@ (800620c <main+0xd0>)
 80061d0:	781b      	ldrb	r3, [r3, #0]
 80061d2:	2201      	movs	r2, #1
 80061d4:	4053      	eors	r3, r2
 80061d6:	b2db      	uxtb	r3, r3
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d0e9      	beq.n	80061b0 <main+0x74>
 80061dc:	4b06      	ldr	r3, [pc, #24]	@ (80061f8 <main+0xbc>)
 80061de:	781b      	ldrb	r3, [r3, #0]
 80061e0:	2201      	movs	r2, #1
 80061e2:	4053      	eors	r3, r2
 80061e4:	b2db      	uxtb	r3, r3
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d0e2      	beq.n	80061b0 <main+0x74>
      Gadget_Test();
 80061ea:	f7ff fb45 	bl	8005878 <Gadget_Test>
    if(testDone && !ESP_Programming){
 80061ee:	e7df      	b.n	80061b0 <main+0x74>
 80061f0:	2000280c 	.word	0x2000280c
 80061f4:	200027cc 	.word	0x200027cc
 80061f8:	20000e3d 	.word	0x20000e3d
 80061fc:	20000c24 	.word	0x20000c24
 8006200:	200029bc 	.word	0x200029bc
 8006204:	20000db8 	.word	0x20000db8
 8006208:	20000c80 	.word	0x20000c80
 800620c:	20000e3c 	.word	0x20000e3c

08006210 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006210:	b590      	push	{r4, r7, lr}
 8006212:	b09d      	sub	sp, #116	@ 0x74
 8006214:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006216:	2438      	movs	r4, #56	@ 0x38
 8006218:	193b      	adds	r3, r7, r4
 800621a:	0018      	movs	r0, r3
 800621c:	2338      	movs	r3, #56	@ 0x38
 800621e:	001a      	movs	r2, r3
 8006220:	2100      	movs	r1, #0
 8006222:	f011 fe13 	bl	8017e4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006226:	2324      	movs	r3, #36	@ 0x24
 8006228:	18fb      	adds	r3, r7, r3
 800622a:	0018      	movs	r0, r3
 800622c:	2314      	movs	r3, #20
 800622e:	001a      	movs	r2, r3
 8006230:	2100      	movs	r1, #0
 8006232:	f011 fe0b 	bl	8017e4c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006236:	003b      	movs	r3, r7
 8006238:	0018      	movs	r0, r3
 800623a:	2324      	movs	r3, #36	@ 0x24
 800623c:	001a      	movs	r2, r3
 800623e:	2100      	movs	r1, #0
 8006240:	f011 fe04 	bl	8017e4c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006244:	4b32      	ldr	r3, [pc, #200]	@ (8006310 <SystemClock_Config+0x100>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a32      	ldr	r2, [pc, #200]	@ (8006314 <SystemClock_Config+0x104>)
 800624a:	401a      	ands	r2, r3
 800624c:	4b30      	ldr	r3, [pc, #192]	@ (8006310 <SystemClock_Config+0x100>)
 800624e:	2180      	movs	r1, #128	@ 0x80
 8006250:	0109      	lsls	r1, r1, #4
 8006252:	430a      	orrs	r2, r1
 8006254:	601a      	str	r2, [r3, #0]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8006256:	f009 faf7 	bl	800f848 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800625a:	4b2f      	ldr	r3, [pc, #188]	@ (8006318 <SystemClock_Config+0x108>)
 800625c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800625e:	4b2e      	ldr	r3, [pc, #184]	@ (8006318 <SystemClock_Config+0x108>)
 8006260:	492c      	ldr	r1, [pc, #176]	@ (8006314 <SystemClock_Config+0x104>)
 8006262:	400a      	ands	r2, r1
 8006264:	651a      	str	r2, [r3, #80]	@ 0x50

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 8006266:	193b      	adds	r3, r7, r4
 8006268:	2226      	movs	r2, #38	@ 0x26
 800626a:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800626c:	193b      	adds	r3, r7, r4
 800626e:	2280      	movs	r2, #128	@ 0x80
 8006270:	0052      	lsls	r2, r2, #1
 8006272:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006274:	0021      	movs	r1, r4
 8006276:	187b      	adds	r3, r7, r1
 8006278:	2201      	movs	r2, #1
 800627a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800627c:	187b      	adds	r3, r7, r1
 800627e:	2210      	movs	r2, #16
 8006280:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8006282:	187b      	adds	r3, r7, r1
 8006284:	2201      	movs	r2, #1
 8006286:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8006288:	187b      	adds	r3, r7, r1
 800628a:	2200      	movs	r2, #0
 800628c:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800628e:	187b      	adds	r3, r7, r1
 8006290:	0018      	movs	r0, r3
 8006292:	f009 fae7 	bl	800f864 <HAL_RCC_OscConfig>
 8006296:	1e03      	subs	r3, r0, #0
 8006298:	d001      	beq.n	800629e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800629a:	f000 f83f 	bl	800631c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800629e:	2124      	movs	r1, #36	@ 0x24
 80062a0:	187b      	adds	r3, r7, r1
 80062a2:	220f      	movs	r2, #15
 80062a4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80062a6:	187b      	adds	r3, r7, r1
 80062a8:	2201      	movs	r2, #1
 80062aa:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80062ac:	187b      	adds	r3, r7, r1
 80062ae:	2200      	movs	r2, #0
 80062b0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80062b2:	187b      	adds	r3, r7, r1
 80062b4:	2200      	movs	r2, #0
 80062b6:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80062b8:	187b      	adds	r3, r7, r1
 80062ba:	2200      	movs	r2, #0
 80062bc:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80062be:	187b      	adds	r3, r7, r1
 80062c0:	2100      	movs	r1, #0
 80062c2:	0018      	movs	r0, r3
 80062c4:	f009 fea2 	bl	801000c <HAL_RCC_ClockConfig>
 80062c8:	1e03      	subs	r3, r0, #0
 80062ca:	d001      	beq.n	80062d0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80062cc:	f000 f826 	bl	800631c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_LPUART1
 80062d0:	003b      	movs	r3, r7
 80062d2:	226d      	movs	r2, #109	@ 0x6d
 80062d4:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80062d6:	003b      	movs	r3, r7
 80062d8:	2200      	movs	r2, #0
 80062da:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80062dc:	003b      	movs	r3, r7
 80062de:	2200      	movs	r2, #0
 80062e0:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80062e2:	003b      	movs	r3, r7
 80062e4:	2200      	movs	r2, #0
 80062e6:	615a      	str	r2, [r3, #20]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80062e8:	003b      	movs	r3, r7
 80062ea:	2280      	movs	r2, #128	@ 0x80
 80062ec:	0252      	lsls	r2, r2, #9
 80062ee:	605a      	str	r2, [r3, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80062f0:	003b      	movs	r3, r7
 80062f2:	2280      	movs	r2, #128	@ 0x80
 80062f4:	04d2      	lsls	r2, r2, #19
 80062f6:	621a      	str	r2, [r3, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80062f8:	003b      	movs	r3, r7
 80062fa:	0018      	movs	r0, r3
 80062fc:	f00a f8aa 	bl	8010454 <HAL_RCCEx_PeriphCLKConfig>
 8006300:	1e03      	subs	r3, r0, #0
 8006302:	d001      	beq.n	8006308 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 8006304:	f000 f80a 	bl	800631c <Error_Handler>
  }
}
 8006308:	46c0      	nop			@ (mov r8, r8)
 800630a:	46bd      	mov	sp, r7
 800630c:	b01d      	add	sp, #116	@ 0x74
 800630e:	bd90      	pop	{r4, r7, pc}
 8006310:	40007000 	.word	0x40007000
 8006314:	ffffe7ff 	.word	0xffffe7ff
 8006318:	40021000 	.word	0x40021000

0800631c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006320:	b672      	cpsid	i
}
 8006322:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006324:	46c0      	nop			@ (mov r8, r8)
 8006326:	e7fd      	b.n	8006324 <Error_Handler+0x8>

08006328 <HT_StartMeasurementWrapper>:
static MicrophoneState MicState = MIC_STATE_INIT;
static uint8_t CurrentMeasurementIndex = 0;
static uint32_t MeasStamp;
static uint32_t MicStamp;

static void HT_StartMeasurementWrapper(void) {
 8006328:	b580      	push	{r7, lr}
 800632a:	af00      	add	r7, sp, #0
  HT_StartMeasurement();
 800632c:	f7ff fc55 	bl	8005bda <HT_StartMeasurement>
}
 8006330:	46c0      	nop			@ (mov r8, r8)
 8006332:	46bd      	mov	sp, r7
 8006334:	bd80      	pop	{r7, pc}
	...

08006338 <HT_IsMeasurementDoneWrapper>:

static bool HT_IsMeasurementDoneWrapper(void) {
 8006338:	b580      	push	{r7, lr}
 800633a:	af00      	add	r7, sp, #0
  return HT_GetMeasurementValues(&MeasurementCtx.humidityPerc, &MeasurementCtx.temperature);
 800633c:	4a04      	ldr	r2, [pc, #16]	@ (8006350 <HT_IsMeasurementDoneWrapper+0x18>)
 800633e:	4b05      	ldr	r3, [pc, #20]	@ (8006354 <HT_IsMeasurementDoneWrapper+0x1c>)
 8006340:	0011      	movs	r1, r2
 8006342:	0018      	movs	r0, r3
 8006344:	f7ff fc50 	bl	8005be8 <HT_GetMeasurementValues>
 8006348:	0003      	movs	r3, r0
}
 800634a:	0018      	movs	r0, r3
 800634c:	46bd      	mov	sp, r7
 800634e:	bd80      	pop	{r7, pc}
 8006350:	20000e44 	.word	0x20000e44
 8006354:	20000e40 	.word	0x20000e40

08006358 <VOC_StartMeasurementWrapper>:

static void VOC_StartMeasurementWrapper(void) {
 8006358:	b580      	push	{r7, lr}
 800635a:	af00      	add	r7, sp, #0
  Gas_StartMeasurement();
 800635c:	f7ff faad 	bl	80058ba <Gas_StartMeasurement>
}
 8006360:	46c0      	nop			@ (mov r8, r8)
 8006362:	46bd      	mov	sp, r7
 8006364:	bd80      	pop	{r7, pc}
	...

08006368 <VOC_IsMeasurementDoneWrapper>:

static bool VOC_IsMeasurementDoneWrapper(void) {
 8006368:	b580      	push	{r7, lr}
 800636a:	af00      	add	r7, sp, #0
  return Gas_GetMeasurementValues(&MeasurementCtx.vocIndex);
 800636c:	4b03      	ldr	r3, [pc, #12]	@ (800637c <VOC_IsMeasurementDoneWrapper+0x14>)
 800636e:	0018      	movs	r0, r3
 8006370:	f7ff faaa 	bl	80058c8 <Gas_GetMeasurementValues>
 8006374:	0003      	movs	r3, r0
}
 8006376:	0018      	movs	r0, r3
 8006378:	46bd      	mov	sp, r7
 800637a:	bd80      	pop	{r7, pc}
 800637c:	20000e48 	.word	0x20000e48

08006380 <PM_StartMeasurementWrapper>:

static void PM_StartMeasurementWrapper(void) {
 8006380:	b580      	push	{r7, lr}
 8006382:	af00      	add	r7, sp, #0
}
 8006384:	46c0      	nop			@ (mov r8, r8)
 8006386:	46bd      	mov	sp, r7
 8006388:	bd80      	pop	{r7, pc}

0800638a <PM_IsMeasurementDoneWrapper>:

static bool PM_IsMeasurementDoneWrapper(void) {
 800638a:	b580      	push	{r7, lr}
 800638c:	af00      	add	r7, sp, #0
  return true;
 800638e:	2301      	movs	r3, #1
}
 8006390:	0018      	movs	r0, r3
 8006392:	46bd      	mov	sp, r7
 8006394:	bd80      	pop	{r7, pc}

08006396 <MIC_StartMeasurementWrapper>:

static void MIC_StartMeasurementWrapper(void) {
 8006396:	b580      	push	{r7, lr}
 8006398:	af00      	add	r7, sp, #0
  MIC_Start(SAMPLE_RATE_8K, NR_SAMPLES_128);
 800639a:	23fa      	movs	r3, #250	@ 0xfa
 800639c:	015b      	lsls	r3, r3, #5
 800639e:	2180      	movs	r1, #128	@ 0x80
 80063a0:	0018      	movs	r0, r3
 80063a2:	f000 fbbb 	bl	8006b1c <MIC_Start>
}
 80063a6:	46c0      	nop			@ (mov r8, r8)
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bd80      	pop	{r7, pc}

080063ac <MIC_IsMeasurementDoneWrapper>:

static bool MIC_IsMeasurementDoneWrapper(void) {
 80063ac:	b580      	push	{r7, lr}
 80063ae:	af00      	add	r7, sp, #0
  return MIC_MeasurementDone();
 80063b0:	f000 fe84 	bl	80070bc <MIC_MeasurementDone>
 80063b4:	0003      	movs	r3, r0
}
 80063b6:	0018      	movs	r0, r3
 80063b8:	46bd      	mov	sp, r7
 80063ba:	bd80      	pop	{r7, pc}

080063bc <Meas_TestStart>:
void Meas_TestStart(){
 80063bc:	b580      	push	{r7, lr}
 80063be:	af00      	add	r7, sp, #0
  MIC_StartMeasurementWrapper();
 80063c0:	f7ff ffe9 	bl	8006396 <MIC_StartMeasurementWrapper>
}
 80063c4:	46c0      	nop			@ (mov r8, r8)
 80063c6:	46bd      	mov	sp, r7
 80063c8:	bd80      	pop	{r7, pc}

080063ca <MIC_IsTestMeasurementDoneWrapper>:
static bool MIC_IsTestMeasurementDoneWrapper(void) {
 80063ca:	b580      	push	{r7, lr}
 80063cc:	af00      	add	r7, sp, #0
  return MIC_TestMeasurementDone();
 80063ce:	f000 fe99 	bl	8007104 <MIC_TestMeasurementDone>
 80063d2:	0003      	movs	r3, r0
}
 80063d4:	0018      	movs	r0, r3
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bd80      	pop	{r7, pc}
	...

080063dc <testInit>:
void testInit(){
 80063dc:	b580      	push	{r7, lr}
 80063de:	af00      	add	r7, sp, #0
  MeasTest.ESP_Tested = false;
 80063e0:	4b07      	ldr	r3, [pc, #28]	@ (8006400 <testInit+0x24>)
 80063e2:	2200      	movs	r2, #0
 80063e4:	70da      	strb	r2, [r3, #3]
  MeasTest.MIC_Tested = false;
 80063e6:	4b06      	ldr	r3, [pc, #24]	@ (8006400 <testInit+0x24>)
 80063e8:	2200      	movs	r2, #0
 80063ea:	709a      	strb	r2, [r3, #2]
  MeasTest.HT_Tested = false;
 80063ec:	4b04      	ldr	r3, [pc, #16]	@ (8006400 <testInit+0x24>)
 80063ee:	2200      	movs	r2, #0
 80063f0:	701a      	strb	r2, [r3, #0]
  MeasTest.VOC_Tested = false;
 80063f2:	4b03      	ldr	r3, [pc, #12]	@ (8006400 <testInit+0x24>)
 80063f4:	2200      	movs	r2, #0
 80063f6:	705a      	strb	r2, [r3, #1]
}
 80063f8:	46c0      	nop			@ (mov r8, r8)
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bd80      	pop	{r7, pc}
 80063fe:	46c0      	nop			@ (mov r8, r8)
 8006400:	20000e84 	.word	0x20000e84

08006404 <Meas_Init>:
void Meas_Init(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s, ADC_HandleTypeDef* ADC_HANDLER) {
 8006404:	b5b0      	push	{r4, r5, r7, lr}
 8006406:	b092      	sub	sp, #72	@ 0x48
 8006408:	af00      	add	r7, sp, #0
 800640a:	60f8      	str	r0, [r7, #12]
 800640c:	60b9      	str	r1, [r7, #8]
 800640e:	607a      	str	r2, [r7, #4]
  MeasState = MEAS_STATE_INIT;
 8006410:	4b74      	ldr	r3, [pc, #464]	@ (80065e4 <Meas_Init+0x1e0>)
 8006412:	2200      	movs	r2, #0
 8006414:	701a      	strb	r2, [r3, #0]
  testInit();
 8006416:	f7ff ffe1 	bl	80063dc <testInit>
  if(MeasEnabled.HT_measurementEnabled || MeasEnabled.VOC_measurementEnabled) {
 800641a:	4b73      	ldr	r3, [pc, #460]	@ (80065e8 <Meas_Init+0x1e4>)
 800641c:	781b      	ldrb	r3, [r3, #0]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d103      	bne.n	800642a <Meas_Init+0x26>
 8006422:	4b71      	ldr	r3, [pc, #452]	@ (80065e8 <Meas_Init+0x1e4>)
 8006424:	785b      	ldrb	r3, [r3, #1]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d072      	beq.n	8006510 <Meas_Init+0x10c>
    I2CSensors_Init(sensorI2C);
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	0018      	movs	r0, r3
 800642e:	f7fe fde1 	bl	8004ff4 <I2CSensors_Init>
    if(!HT_DeviceConnected()) {
 8006432:	f7ff fbe9 	bl	8005c08 <HT_DeviceConnected>
 8006436:	0003      	movs	r3, r0
 8006438:	001a      	movs	r2, r3
 800643a:	2301      	movs	r3, #1
 800643c:	4053      	eors	r3, r2
 800643e:	b2db      	uxtb	r3, r3
 8006440:	2b00      	cmp	r3, #0
 8006442:	d00c      	beq.n	800645e <Meas_Init+0x5a>
       Error("Humidity / Temperature sensor NOT connected!");
 8006444:	4a69      	ldr	r2, [pc, #420]	@ (80065ec <Meas_Init+0x1e8>)
 8006446:	4b6a      	ldr	r3, [pc, #424]	@ (80065f0 <Meas_Init+0x1ec>)
 8006448:	0019      	movs	r1, r3
 800644a:	2001      	movs	r0, #1
 800644c:	f003 f8f4 	bl	8009638 <CreateLine>
       MeasTest.HT_Tested = false;
 8006450:	4b68      	ldr	r3, [pc, #416]	@ (80065f4 <Meas_Init+0x1f0>)
 8006452:	2200      	movs	r2, #0
 8006454:	701a      	strb	r2, [r3, #0]
       MeasEnabled.HT_measurementEnabled = false;
 8006456:	4b64      	ldr	r3, [pc, #400]	@ (80065e8 <Meas_Init+0x1e4>)
 8006458:	2200      	movs	r2, #0
 800645a:	701a      	strb	r2, [r3, #0]
 800645c:	e008      	b.n	8006470 <Meas_Init+0x6c>
       // HT Device NOT connected, turning LED on RED.
    }else {
      // HT Device is connected, turning led on GREEN.
      // CCR1 = Red, CCR3 = Green, CCR4 = Blue.
      MeasTest.HT_Tested = true;
 800645e:	4b65      	ldr	r3, [pc, #404]	@ (80065f4 <Meas_Init+0x1f0>)
 8006460:	2201      	movs	r2, #1
 8006462:	701a      	strb	r2, [r3, #0]
      Debug("Humidity / Temperature sensor initialised.");
 8006464:	4a64      	ldr	r2, [pc, #400]	@ (80065f8 <Meas_Init+0x1f4>)
 8006466:	4b65      	ldr	r3, [pc, #404]	@ (80065fc <Meas_Init+0x1f8>)
 8006468:	0019      	movs	r1, r3
 800646a:	2003      	movs	r0, #3
 800646c:	f003 f8e4 	bl	8009638 <CreateLine>
    }
    if(!Gas_DeviceConnected()) {
 8006470:	f7ff fa37 	bl	80058e2 <Gas_DeviceConnected>
 8006474:	0003      	movs	r3, r0
 8006476:	001a      	movs	r2, r3
 8006478:	2301      	movs	r3, #1
 800647a:	4053      	eors	r3, r2
 800647c:	b2db      	uxtb	r3, r3
 800647e:	2b00      	cmp	r3, #0
 8006480:	d00c      	beq.n	800649c <Meas_Init+0x98>
      MeasTest.VOC_Tested = false;
 8006482:	4b5c      	ldr	r3, [pc, #368]	@ (80065f4 <Meas_Init+0x1f0>)
 8006484:	2200      	movs	r2, #0
 8006486:	705a      	strb	r2, [r3, #1]
       Error("SGP device not connected!");
 8006488:	4a5d      	ldr	r2, [pc, #372]	@ (8006600 <Meas_Init+0x1fc>)
 800648a:	4b59      	ldr	r3, [pc, #356]	@ (80065f0 <Meas_Init+0x1ec>)
 800648c:	0019      	movs	r1, r3
 800648e:	2001      	movs	r0, #1
 8006490:	f003 f8d2 	bl	8009638 <CreateLine>
       MeasEnabled.VOC_measurementEnabled = false;
 8006494:	4b54      	ldr	r3, [pc, #336]	@ (80065e8 <Meas_Init+0x1e4>)
 8006496:	2200      	movs	r2, #0
 8006498:	705a      	strb	r2, [r3, #1]
 800649a:	e008      	b.n	80064ae <Meas_Init+0xaa>
    }else{
      MeasTest.VOC_Tested = true;
 800649c:	4b55      	ldr	r3, [pc, #340]	@ (80065f4 <Meas_Init+0x1f0>)
 800649e:	2201      	movs	r2, #1
 80064a0:	705a      	strb	r2, [r3, #1]
      Debug("SGP sensor initialised.");
 80064a2:	4a58      	ldr	r2, [pc, #352]	@ (8006604 <Meas_Init+0x200>)
 80064a4:	4b55      	ldr	r3, [pc, #340]	@ (80065fc <Meas_Init+0x1f8>)
 80064a6:	0019      	movs	r1, r3
 80064a8:	2003      	movs	r0, #3
 80064aa:	f003 f8c5 	bl	8009638 <CreateLine>
    }
    if(MeasTest.VOC_Tested && MeasTest.HT_Tested){
 80064ae:	4b51      	ldr	r3, [pc, #324]	@ (80065f4 <Meas_Init+0x1f0>)
 80064b0:	785b      	ldrb	r3, [r3, #1]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d018      	beq.n	80064e8 <Meas_Init+0xe4>
 80064b6:	4b4f      	ldr	r3, [pc, #316]	@ (80065f4 <Meas_Init+0x1f0>)
 80064b8:	781b      	ldrb	r3, [r3, #0]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d014      	beq.n	80064e8 <Meas_Init+0xe4>
      HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 1);
 80064be:	4b52      	ldr	r3, [pc, #328]	@ (8006608 <Meas_Init+0x204>)
 80064c0:	2201      	movs	r2, #1
 80064c2:	2101      	movs	r1, #1
 80064c4:	0018      	movs	r0, r3
 80064c6:	f004 fff2 	bl	800b4ae <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 0);
 80064ca:	2380      	movs	r3, #128	@ 0x80
 80064cc:	005b      	lsls	r3, r3, #1
 80064ce:	484e      	ldr	r0, [pc, #312]	@ (8006608 <Meas_Init+0x204>)
 80064d0:	2200      	movs	r2, #0
 80064d2:	0019      	movs	r1, r3
 80064d4:	f004 ffeb 	bl	800b4ae <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
 80064d8:	2380      	movs	r3, #128	@ 0x80
 80064da:	009b      	lsls	r3, r3, #2
 80064dc:	484a      	ldr	r0, [pc, #296]	@ (8006608 <Meas_Init+0x204>)
 80064de:	2201      	movs	r2, #1
 80064e0:	0019      	movs	r1, r3
 80064e2:	f004 ffe4 	bl	800b4ae <HAL_GPIO_WritePin>
 80064e6:	e013      	b.n	8006510 <Meas_Init+0x10c>
    }
    else{
      HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 0);
 80064e8:	4b47      	ldr	r3, [pc, #284]	@ (8006608 <Meas_Init+0x204>)
 80064ea:	2200      	movs	r2, #0
 80064ec:	2101      	movs	r1, #1
 80064ee:	0018      	movs	r0, r3
 80064f0:	f004 ffdd 	bl	800b4ae <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
 80064f4:	2380      	movs	r3, #128	@ 0x80
 80064f6:	005b      	lsls	r3, r3, #1
 80064f8:	4843      	ldr	r0, [pc, #268]	@ (8006608 <Meas_Init+0x204>)
 80064fa:	2201      	movs	r2, #1
 80064fc:	0019      	movs	r1, r3
 80064fe:	f004 ffd6 	bl	800b4ae <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
 8006502:	2380      	movs	r3, #128	@ 0x80
 8006504:	009b      	lsls	r3, r3, #2
 8006506:	4840      	ldr	r0, [pc, #256]	@ (8006608 <Meas_Init+0x204>)
 8006508:	2201      	movs	r2, #1
 800650a:	0019      	movs	r1, r3
 800650c:	f004 ffcf 	bl	800b4ae <HAL_GPIO_WritePin>
    }
  }
  if(MeasEnabled.MIC_measurementEnabled) {
 8006510:	4b35      	ldr	r3, [pc, #212]	@ (80065e8 <Meas_Init+0x1e4>)
 8006512:	78db      	ldrb	r3, [r3, #3]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d005      	beq.n	8006524 <Meas_Init+0x120>
    MIC_Init(micI2s);
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	0018      	movs	r0, r3
 800651c:	f000 fa98 	bl	8006a50 <MIC_Init>
    Meas_TestStart();
 8006520:	f7ff ff4c 	bl	80063bc <Meas_TestStart>
  }
  uint8_t offset = 0;
 8006524:	2547      	movs	r5, #71	@ 0x47
 8006526:	197b      	adds	r3, r7, r5
 8006528:	2200      	movs	r2, #0
 800652a:	701a      	strb	r2, [r3, #0]
  Measurements[offset++] = (MeasurementParameters) {HT_StartMeasurementWrapper, HT_IsMeasurementDoneWrapper, &MeasurementCtx.HT_measurementDone, MeasEnabled.HT_measurementEnabled};
 800652c:	197b      	adds	r3, r7, r5
 800652e:	781b      	ldrb	r3, [r3, #0]
 8006530:	197a      	adds	r2, r7, r5
 8006532:	1c59      	adds	r1, r3, #1
 8006534:	7011      	strb	r1, [r2, #0]
 8006536:	4a2c      	ldr	r2, [pc, #176]	@ (80065e8 <Meas_Init+0x1e4>)
 8006538:	7814      	ldrb	r4, [r2, #0]
 800653a:	4a34      	ldr	r2, [pc, #208]	@ (800660c <Meas_Init+0x208>)
 800653c:	0119      	lsls	r1, r3, #4
 800653e:	4834      	ldr	r0, [pc, #208]	@ (8006610 <Meas_Init+0x20c>)
 8006540:	5088      	str	r0, [r1, r2]
 8006542:	4932      	ldr	r1, [pc, #200]	@ (800660c <Meas_Init+0x208>)
 8006544:	011a      	lsls	r2, r3, #4
 8006546:	188a      	adds	r2, r1, r2
 8006548:	3204      	adds	r2, #4
 800654a:	4932      	ldr	r1, [pc, #200]	@ (8006614 <Meas_Init+0x210>)
 800654c:	6011      	str	r1, [r2, #0]
 800654e:	492f      	ldr	r1, [pc, #188]	@ (800660c <Meas_Init+0x208>)
 8006550:	011a      	lsls	r2, r3, #4
 8006552:	188a      	adds	r2, r1, r2
 8006554:	3208      	adds	r2, #8
 8006556:	4930      	ldr	r1, [pc, #192]	@ (8006618 <Meas_Init+0x214>)
 8006558:	6011      	str	r1, [r2, #0]
 800655a:	4a2c      	ldr	r2, [pc, #176]	@ (800660c <Meas_Init+0x208>)
 800655c:	011b      	lsls	r3, r3, #4
 800655e:	18d3      	adds	r3, r2, r3
 8006560:	330c      	adds	r3, #12
 8006562:	1c22      	adds	r2, r4, #0
 8006564:	701a      	strb	r2, [r3, #0]
  Measurements[offset++] = (MeasurementParameters) {VOC_StartMeasurementWrapper, VOC_IsMeasurementDoneWrapper, &MeasurementCtx.VOC_measurementDone, MeasEnabled.VOC_measurementEnabled};
 8006566:	197b      	adds	r3, r7, r5
 8006568:	781b      	ldrb	r3, [r3, #0]
 800656a:	197a      	adds	r2, r7, r5
 800656c:	1c59      	adds	r1, r3, #1
 800656e:	7011      	strb	r1, [r2, #0]
 8006570:	4a1d      	ldr	r2, [pc, #116]	@ (80065e8 <Meas_Init+0x1e4>)
 8006572:	7854      	ldrb	r4, [r2, #1]
 8006574:	4a25      	ldr	r2, [pc, #148]	@ (800660c <Meas_Init+0x208>)
 8006576:	0119      	lsls	r1, r3, #4
 8006578:	4828      	ldr	r0, [pc, #160]	@ (800661c <Meas_Init+0x218>)
 800657a:	5088      	str	r0, [r1, r2]
 800657c:	4923      	ldr	r1, [pc, #140]	@ (800660c <Meas_Init+0x208>)
 800657e:	011a      	lsls	r2, r3, #4
 8006580:	188a      	adds	r2, r1, r2
 8006582:	3204      	adds	r2, #4
 8006584:	4926      	ldr	r1, [pc, #152]	@ (8006620 <Meas_Init+0x21c>)
 8006586:	6011      	str	r1, [r2, #0]
 8006588:	4920      	ldr	r1, [pc, #128]	@ (800660c <Meas_Init+0x208>)
 800658a:	011a      	lsls	r2, r3, #4
 800658c:	188a      	adds	r2, r1, r2
 800658e:	3208      	adds	r2, #8
 8006590:	4924      	ldr	r1, [pc, #144]	@ (8006624 <Meas_Init+0x220>)
 8006592:	6011      	str	r1, [r2, #0]
 8006594:	4a1d      	ldr	r2, [pc, #116]	@ (800660c <Meas_Init+0x208>)
 8006596:	011b      	lsls	r3, r3, #4
 8006598:	18d3      	adds	r3, r2, r3
 800659a:	330c      	adds	r3, #12
 800659c:	1c22      	adds	r2, r4, #0
 800659e:	701a      	strb	r2, [r3, #0]
  Measurements[offset++] = (MeasurementParameters) {PM_StartMeasurementWrapper, PM_IsMeasurementDoneWrapper, &MeasurementCtx.PM_measurementDone, MeasEnabled.PM_measurementEnabled};
 80065a0:	197b      	adds	r3, r7, r5
 80065a2:	781b      	ldrb	r3, [r3, #0]
 80065a4:	197a      	adds	r2, r7, r5
 80065a6:	1c59      	adds	r1, r3, #1
 80065a8:	7011      	strb	r1, [r2, #0]
 80065aa:	4a0f      	ldr	r2, [pc, #60]	@ (80065e8 <Meas_Init+0x1e4>)
 80065ac:	7894      	ldrb	r4, [r2, #2]
 80065ae:	4a17      	ldr	r2, [pc, #92]	@ (800660c <Meas_Init+0x208>)
 80065b0:	0119      	lsls	r1, r3, #4
 80065b2:	481d      	ldr	r0, [pc, #116]	@ (8006628 <Meas_Init+0x224>)
 80065b4:	5088      	str	r0, [r1, r2]
 80065b6:	4915      	ldr	r1, [pc, #84]	@ (800660c <Meas_Init+0x208>)
 80065b8:	011a      	lsls	r2, r3, #4
 80065ba:	188a      	adds	r2, r1, r2
 80065bc:	3204      	adds	r2, #4
 80065be:	491b      	ldr	r1, [pc, #108]	@ (800662c <Meas_Init+0x228>)
 80065c0:	6011      	str	r1, [r2, #0]
 80065c2:	4912      	ldr	r1, [pc, #72]	@ (800660c <Meas_Init+0x208>)
 80065c4:	011a      	lsls	r2, r3, #4
 80065c6:	188a      	adds	r2, r1, r2
 80065c8:	3208      	adds	r2, #8
 80065ca:	4919      	ldr	r1, [pc, #100]	@ (8006630 <Meas_Init+0x22c>)
 80065cc:	6011      	str	r1, [r2, #0]
 80065ce:	4a0f      	ldr	r2, [pc, #60]	@ (800660c <Meas_Init+0x208>)
 80065d0:	011b      	lsls	r3, r3, #4
 80065d2:	18d3      	adds	r3, r2, r3
 80065d4:	330c      	adds	r3, #12
 80065d6:	1c22      	adds	r2, r4, #0
 80065d8:	701a      	strb	r2, [r3, #0]
//  Measurements[offset++] = (MeasurementParameters) {MIC_StartMeasurementWrapper, MIC_IsMeasurementDoneWrapper, &MeasurementCtx.MIC_measurementDone, MeasEnabled.MIC_measurementEnabled};
}
 80065da:	46c0      	nop			@ (mov r8, r8)
 80065dc:	46bd      	mov	sp, r7
 80065de:	b012      	add	sp, #72	@ 0x48
 80065e0:	bdb0      	pop	{r4, r5, r7, pc}
 80065e2:	46c0      	nop			@ (mov r8, r8)
 80065e4:	20000e88 	.word	0x20000e88
 80065e8:	20000e80 	.word	0x20000e80
 80065ec:	0801b140 	.word	0x0801b140
 80065f0:	0801b170 	.word	0x0801b170
 80065f4:	20000e84 	.word	0x20000e84
 80065f8:	0801b174 	.word	0x0801b174
 80065fc:	0801b1a0 	.word	0x0801b1a0
 8006600:	0801b1a4 	.word	0x0801b1a4
 8006604:	0801b1c0 	.word	0x0801b1c0
 8006608:	50000400 	.word	0x50000400
 800660c:	20000e50 	.word	0x20000e50
 8006610:	08006329 	.word	0x08006329
 8006614:	08006339 	.word	0x08006339
 8006618:	20000e4c 	.word	0x20000e4c
 800661c:	08006359 	.word	0x08006359
 8006620:	08006369 	.word	0x08006369
 8006624:	20000e4d 	.word	0x20000e4d
 8006628:	08006381 	.word	0x08006381
 800662c:	0800638b 	.word	0x0800638b
 8006630:	20000e4e 	.word	0x20000e4e

08006634 <StartMeasurements>:

void StartMeasurements(void) {
 8006634:	b580      	push	{r7, lr}
 8006636:	af00      	add	r7, sp, #0
  for(CurrentMeasurementIndex = 0; CurrentMeasurementIndex < MEAS_MEASUREMENT_COUNT; CurrentMeasurementIndex++) {
 8006638:	4b10      	ldr	r3, [pc, #64]	@ (800667c <StartMeasurements+0x48>)
 800663a:	2200      	movs	r2, #0
 800663c:	701a      	strb	r2, [r3, #0]
 800663e:	e015      	b.n	800666c <StartMeasurements+0x38>
    if(Measurements[CurrentMeasurementIndex].enabled) {
 8006640:	4b0e      	ldr	r3, [pc, #56]	@ (800667c <StartMeasurements+0x48>)
 8006642:	781b      	ldrb	r3, [r3, #0]
 8006644:	4a0e      	ldr	r2, [pc, #56]	@ (8006680 <StartMeasurements+0x4c>)
 8006646:	011b      	lsls	r3, r3, #4
 8006648:	18d3      	adds	r3, r2, r3
 800664a:	330c      	adds	r3, #12
 800664c:	781b      	ldrb	r3, [r3, #0]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d006      	beq.n	8006660 <StartMeasurements+0x2c>
      Measurements[CurrentMeasurementIndex].startFunc();
 8006652:	4b0a      	ldr	r3, [pc, #40]	@ (800667c <StartMeasurements+0x48>)
 8006654:	781b      	ldrb	r3, [r3, #0]
 8006656:	001a      	movs	r2, r3
 8006658:	4b09      	ldr	r3, [pc, #36]	@ (8006680 <StartMeasurements+0x4c>)
 800665a:	0112      	lsls	r2, r2, #4
 800665c:	58d3      	ldr	r3, [r2, r3]
 800665e:	4798      	blx	r3
  for(CurrentMeasurementIndex = 0; CurrentMeasurementIndex < MEAS_MEASUREMENT_COUNT; CurrentMeasurementIndex++) {
 8006660:	4b06      	ldr	r3, [pc, #24]	@ (800667c <StartMeasurements+0x48>)
 8006662:	781b      	ldrb	r3, [r3, #0]
 8006664:	3301      	adds	r3, #1
 8006666:	b2da      	uxtb	r2, r3
 8006668:	4b04      	ldr	r3, [pc, #16]	@ (800667c <StartMeasurements+0x48>)
 800666a:	701a      	strb	r2, [r3, #0]
 800666c:	4b03      	ldr	r3, [pc, #12]	@ (800667c <StartMeasurements+0x48>)
 800666e:	781b      	ldrb	r3, [r3, #0]
 8006670:	2b02      	cmp	r3, #2
 8006672:	d9e5      	bls.n	8006640 <StartMeasurements+0xc>
    }
  }
}
 8006674:	46c0      	nop			@ (mov r8, r8)
 8006676:	46c0      	nop			@ (mov r8, r8)
 8006678:	46bd      	mov	sp, r7
 800667a:	bd80      	pop	{r7, pc}
 800667c:	20000e8a 	.word	0x20000e8a
 8006680:	20000e50 	.word	0x20000e50

08006684 <Meas_Test>:

void Meas_Test(){
 8006684:	b580      	push	{r7, lr}
 8006686:	af00      	add	r7, sp, #0
  if(!MeasTest.ESP_Tested){
 8006688:	4b27      	ldr	r3, [pc, #156]	@ (8006728 <Meas_Test+0xa4>)
 800668a:	78db      	ldrb	r3, [r3, #3]
 800668c:	2201      	movs	r2, #1
 800668e:	4053      	eors	r3, r2
 8006690:	b2db      	uxtb	r3, r3
 8006692:	2b00      	cmp	r3, #0
 8006694:	d001      	beq.n	800669a <Meas_Test+0x16>
    ESP_WakeTest();
 8006696:	f7fe f931 	bl	80048fc <ESP_WakeTest>
  }
  if(!MeasTest.MIC_Tested){
 800669a:	4b23      	ldr	r3, [pc, #140]	@ (8006728 <Meas_Test+0xa4>)
 800669c:	789b      	ldrb	r3, [r3, #2]
 800669e:	2201      	movs	r2, #1
 80066a0:	4053      	eors	r3, r2
 80066a2:	b2db      	uxtb	r3, r3
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d023      	beq.n	80066f0 <Meas_Test+0x6c>
    if(MIC_IsTestMeasurementDoneWrapper()){
 80066a8:	f7ff fe8f 	bl	80063ca <MIC_IsTestMeasurementDoneWrapper>
 80066ac:	1e03      	subs	r3, r0, #0
 80066ae:	d011      	beq.n	80066d4 <Meas_Test+0x50>
      MeasTest.MIC_Tested = true;
 80066b0:	4b1d      	ldr	r3, [pc, #116]	@ (8006728 <Meas_Test+0xa4>)
 80066b2:	2201      	movs	r2, #1
 80066b4:	709a      	strb	r2, [r3, #2]
      TIM2 -> CCR1 = 4000;
 80066b6:	2380      	movs	r3, #128	@ 0x80
 80066b8:	05db      	lsls	r3, r3, #23
 80066ba:	22fa      	movs	r2, #250	@ 0xfa
 80066bc:	0112      	lsls	r2, r2, #4
 80066be:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM2 -> CCR3 = 0;
 80066c0:	2380      	movs	r3, #128	@ 0x80
 80066c2:	05db      	lsls	r3, r3, #23
 80066c4:	2200      	movs	r2, #0
 80066c6:	63da      	str	r2, [r3, #60]	@ 0x3c
      TIM2 -> CCR4 = 4000;
 80066c8:	2380      	movs	r3, #128	@ 0x80
 80066ca:	05db      	lsls	r3, r3, #23
 80066cc:	22fa      	movs	r2, #250	@ 0xfa
 80066ce:	0112      	lsls	r2, r2, #4
 80066d0:	641a      	str	r2, [r3, #64]	@ 0x40
 80066d2:	e00d      	b.n	80066f0 <Meas_Test+0x6c>
    }
    else{
      TIM2 -> CCR1 = 0;
 80066d4:	2380      	movs	r3, #128	@ 0x80
 80066d6:	05db      	lsls	r3, r3, #23
 80066d8:	2200      	movs	r2, #0
 80066da:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM2 -> CCR3 = 4000;
 80066dc:	2380      	movs	r3, #128	@ 0x80
 80066de:	05db      	lsls	r3, r3, #23
 80066e0:	22fa      	movs	r2, #250	@ 0xfa
 80066e2:	0112      	lsls	r2, r2, #4
 80066e4:	63da      	str	r2, [r3, #60]	@ 0x3c
      TIM2 -> CCR4 = 4000;
 80066e6:	2380      	movs	r3, #128	@ 0x80
 80066e8:	05db      	lsls	r3, r3, #23
 80066ea:	22fa      	movs	r2, #250	@ 0xfa
 80066ec:	0112      	lsls	r2, r2, #4
 80066ee:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }
  if(MeasTest.HT_Tested && MeasTest.VOC_Tested && MeasTest.ESP_Tested && MeasTest.MIC_Tested){
 80066f0:	4b0d      	ldr	r3, [pc, #52]	@ (8006728 <Meas_Test+0xa4>)
 80066f2:	781b      	ldrb	r3, [r3, #0]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d013      	beq.n	8006720 <Meas_Test+0x9c>
 80066f8:	4b0b      	ldr	r3, [pc, #44]	@ (8006728 <Meas_Test+0xa4>)
 80066fa:	785b      	ldrb	r3, [r3, #1]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d00f      	beq.n	8006720 <Meas_Test+0x9c>
 8006700:	4b09      	ldr	r3, [pc, #36]	@ (8006728 <Meas_Test+0xa4>)
 8006702:	78db      	ldrb	r3, [r3, #3]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d00b      	beq.n	8006720 <Meas_Test+0x9c>
 8006708:	4b07      	ldr	r3, [pc, #28]	@ (8006728 <Meas_Test+0xa4>)
 800670a:	789b      	ldrb	r3, [r3, #2]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d007      	beq.n	8006720 <Meas_Test+0x9c>
    Debug("Test completed");
 8006710:	4a06      	ldr	r2, [pc, #24]	@ (800672c <Meas_Test+0xa8>)
 8006712:	4b07      	ldr	r3, [pc, #28]	@ (8006730 <Meas_Test+0xac>)
 8006714:	0019      	movs	r1, r3
 8006716:	2003      	movs	r0, #3
 8006718:	f002 ff8e 	bl	8009638 <CreateLine>
    SetTestDone();
 800671c:	f7ff fc9a 	bl	8006054 <SetTestDone>
  }
}
 8006720:	46c0      	nop			@ (mov r8, r8)
 8006722:	46bd      	mov	sp, r7
 8006724:	bd80      	pop	{r7, pc}
 8006726:	46c0      	nop			@ (mov r8, r8)
 8006728:	20000e84 	.word	0x20000e84
 800672c:	0801b1d8 	.word	0x0801b1d8
 8006730:	0801b1a0 	.word	0x0801b1a0

08006734 <ResetMeasurements>:
void ResetMeasurements(void) {
 8006734:	b580      	push	{r7, lr}
 8006736:	af00      	add	r7, sp, #0
  MeasurementCtx.humidityPerc = 0;
 8006738:	4b0b      	ldr	r3, [pc, #44]	@ (8006768 <ResetMeasurements+0x34>)
 800673a:	2200      	movs	r2, #0
 800673c:	601a      	str	r2, [r3, #0]
  MeasurementCtx.temperature = 0;
 800673e:	4b0a      	ldr	r3, [pc, #40]	@ (8006768 <ResetMeasurements+0x34>)
 8006740:	2200      	movs	r2, #0
 8006742:	605a      	str	r2, [r3, #4]
  MeasurementCtx.vocIndex = 0;
 8006744:	4b08      	ldr	r3, [pc, #32]	@ (8006768 <ResetMeasurements+0x34>)
 8006746:	2200      	movs	r2, #0
 8006748:	609a      	str	r2, [r3, #8]
  MeasurementCtx.HT_measurementDone = false;
 800674a:	4b07      	ldr	r3, [pc, #28]	@ (8006768 <ResetMeasurements+0x34>)
 800674c:	2200      	movs	r2, #0
 800674e:	731a      	strb	r2, [r3, #12]
  MeasurementCtx.VOC_measurementDone = false;
 8006750:	4b05      	ldr	r3, [pc, #20]	@ (8006768 <ResetMeasurements+0x34>)
 8006752:	2200      	movs	r2, #0
 8006754:	735a      	strb	r2, [r3, #13]
  MeasurementCtx.PM_measurementDone = false;
 8006756:	4b04      	ldr	r3, [pc, #16]	@ (8006768 <ResetMeasurements+0x34>)
 8006758:	2200      	movs	r2, #0
 800675a:	739a      	strb	r2, [r3, #14]
  MeasurementCtx.MIC_measurementDone = false;
 800675c:	4b02      	ldr	r3, [pc, #8]	@ (8006768 <ResetMeasurements+0x34>)
 800675e:	2200      	movs	r2, #0
 8006760:	73da      	strb	r2, [r3, #15]
}
 8006762:	46c0      	nop			@ (mov r8, r8)
 8006764:	46bd      	mov	sp, r7
 8006766:	bd80      	pop	{r7, pc}
 8006768:	20000e40 	.word	0x20000e40

0800676c <MeasurementsCompleted>:

bool MeasurementsCompleted(void) {
 800676c:	b580      	push	{r7, lr}
 800676e:	af00      	add	r7, sp, #0
  for(CurrentMeasurementIndex = 0; CurrentMeasurementIndex < MEAS_MEASUREMENT_COUNT; CurrentMeasurementIndex++) {
 8006770:	4b18      	ldr	r3, [pc, #96]	@ (80067d4 <MeasurementsCompleted+0x68>)
 8006772:	2200      	movs	r2, #0
 8006774:	701a      	strb	r2, [r3, #0]
 8006776:	e024      	b.n	80067c2 <MeasurementsCompleted+0x56>
    if(Measurements[CurrentMeasurementIndex].enabled) {
 8006778:	4b16      	ldr	r3, [pc, #88]	@ (80067d4 <MeasurementsCompleted+0x68>)
 800677a:	781b      	ldrb	r3, [r3, #0]
 800677c:	4a16      	ldr	r2, [pc, #88]	@ (80067d8 <MeasurementsCompleted+0x6c>)
 800677e:	011b      	lsls	r3, r3, #4
 8006780:	18d3      	adds	r3, r2, r3
 8006782:	330c      	adds	r3, #12
 8006784:	781b      	ldrb	r3, [r3, #0]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d015      	beq.n	80067b6 <MeasurementsCompleted+0x4a>
      if(Measurements[CurrentMeasurementIndex].doneFunc()) {
 800678a:	4b12      	ldr	r3, [pc, #72]	@ (80067d4 <MeasurementsCompleted+0x68>)
 800678c:	781b      	ldrb	r3, [r3, #0]
 800678e:	4a12      	ldr	r2, [pc, #72]	@ (80067d8 <MeasurementsCompleted+0x6c>)
 8006790:	011b      	lsls	r3, r3, #4
 8006792:	18d3      	adds	r3, r2, r3
 8006794:	3304      	adds	r3, #4
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4798      	blx	r3
 800679a:	1e03      	subs	r3, r0, #0
 800679c:	d009      	beq.n	80067b2 <MeasurementsCompleted+0x46>
        *Measurements[CurrentMeasurementIndex].doneFlag = true;
 800679e:	4b0d      	ldr	r3, [pc, #52]	@ (80067d4 <MeasurementsCompleted+0x68>)
 80067a0:	781b      	ldrb	r3, [r3, #0]
 80067a2:	4a0d      	ldr	r2, [pc, #52]	@ (80067d8 <MeasurementsCompleted+0x6c>)
 80067a4:	011b      	lsls	r3, r3, #4
 80067a6:	18d3      	adds	r3, r2, r3
 80067a8:	3308      	adds	r3, #8
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	2201      	movs	r2, #1
 80067ae:	701a      	strb	r2, [r3, #0]
 80067b0:	e001      	b.n	80067b6 <MeasurementsCompleted+0x4a>
      }else {
        return false;
 80067b2:	2300      	movs	r3, #0
 80067b4:	e00a      	b.n	80067cc <MeasurementsCompleted+0x60>
  for(CurrentMeasurementIndex = 0; CurrentMeasurementIndex < MEAS_MEASUREMENT_COUNT; CurrentMeasurementIndex++) {
 80067b6:	4b07      	ldr	r3, [pc, #28]	@ (80067d4 <MeasurementsCompleted+0x68>)
 80067b8:	781b      	ldrb	r3, [r3, #0]
 80067ba:	3301      	adds	r3, #1
 80067bc:	b2da      	uxtb	r2, r3
 80067be:	4b05      	ldr	r3, [pc, #20]	@ (80067d4 <MeasurementsCompleted+0x68>)
 80067c0:	701a      	strb	r2, [r3, #0]
 80067c2:	4b04      	ldr	r3, [pc, #16]	@ (80067d4 <MeasurementsCompleted+0x68>)
 80067c4:	781b      	ldrb	r3, [r3, #0]
 80067c6:	2b02      	cmp	r3, #2
 80067c8:	d9d6      	bls.n	8006778 <MeasurementsCompleted+0xc>
      }
    }
  }
  return true;
 80067ca:	2301      	movs	r3, #1
}
 80067cc:	0018      	movs	r0, r3
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bd80      	pop	{r7, pc}
 80067d2:	46c0      	nop			@ (mov r8, r8)
 80067d4:	20000e8a 	.word	0x20000e8a
 80067d8:	20000e50 	.word	0x20000e50

080067dc <Mic_Upkeep>:

void Mic_Upkeep(){
 80067dc:	b580      	push	{r7, lr}
 80067de:	af00      	add	r7, sp, #0
  switch(MicState){
 80067e0:	4b20      	ldr	r3, [pc, #128]	@ (8006864 <Mic_Upkeep+0x88>)
 80067e2:	781b      	ldrb	r3, [r3, #0]
 80067e4:	2b03      	cmp	r3, #3
 80067e6:	d022      	beq.n	800682e <Mic_Upkeep+0x52>
 80067e8:	dc2c      	bgt.n	8006844 <Mic_Upkeep+0x68>
 80067ea:	2b02      	cmp	r3, #2
 80067ec:	d00f      	beq.n	800680e <Mic_Upkeep+0x32>
 80067ee:	dc29      	bgt.n	8006844 <Mic_Upkeep+0x68>
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d002      	beq.n	80067fa <Mic_Upkeep+0x1e>
 80067f4:	2b01      	cmp	r3, #1
 80067f6:	d004      	beq.n	8006802 <Mic_Upkeep+0x26>
 80067f8:	e024      	b.n	8006844 <Mic_Upkeep+0x68>

  case MIC_STATE_INIT:
    //reset if necesarry
    MicState = MIC_STATE_START_MEASUREMENT;
 80067fa:	4b1a      	ldr	r3, [pc, #104]	@ (8006864 <Mic_Upkeep+0x88>)
 80067fc:	2201      	movs	r2, #1
 80067fe:	701a      	strb	r2, [r3, #0]
    break;
 8006800:	e02d      	b.n	800685e <Mic_Upkeep+0x82>

  case MIC_STATE_START_MEASUREMENT:
    MIC_StartMeasurementWrapper();
 8006802:	f7ff fdc8 	bl	8006396 <MIC_StartMeasurementWrapper>
    MicState = MIC_STATE_WAIT_FOR_COMPLETION;
 8006806:	4b17      	ldr	r3, [pc, #92]	@ (8006864 <Mic_Upkeep+0x88>)
 8006808:	2202      	movs	r2, #2
 800680a:	701a      	strb	r2, [r3, #0]
    break;
 800680c:	e027      	b.n	800685e <Mic_Upkeep+0x82>

  case MIC_STATE_WAIT_FOR_COMPLETION:
    if(MIC_IsMeasurementDoneWrapper()){
 800680e:	f7ff fdcd 	bl	80063ac <MIC_IsMeasurementDoneWrapper>
 8006812:	1e03      	subs	r3, r0, #0
 8006814:	d020      	beq.n	8006858 <Mic_Upkeep+0x7c>
      MicState = MIC_STATE_WAIT;
 8006816:	4b13      	ldr	r3, [pc, #76]	@ (8006864 <Mic_Upkeep+0x88>)
 8006818:	2203      	movs	r2, #3
 800681a:	701a      	strb	r2, [r3, #0]
      MicStamp = HAL_GetTick() + 1000;
 800681c:	f003 faa8 	bl	8009d70 <HAL_GetTick>
 8006820:	0003      	movs	r3, r0
 8006822:	22fa      	movs	r2, #250	@ 0xfa
 8006824:	0092      	lsls	r2, r2, #2
 8006826:	189a      	adds	r2, r3, r2
 8006828:	4b0f      	ldr	r3, [pc, #60]	@ (8006868 <Mic_Upkeep+0x8c>)
 800682a:	601a      	str	r2, [r3, #0]
    }
    break;
 800682c:	e014      	b.n	8006858 <Mic_Upkeep+0x7c>

  case MIC_STATE_WAIT:
    if(TimestampIsReached(MicStamp)){
 800682e:	4b0e      	ldr	r3, [pc, #56]	@ (8006868 <Mic_Upkeep+0x8c>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	0018      	movs	r0, r3
 8006834:	f002 feaa 	bl	800958c <TimestampIsReached>
 8006838:	1e03      	subs	r3, r0, #0
 800683a:	d00f      	beq.n	800685c <Mic_Upkeep+0x80>
      MicState = MIC_STATE_START_MEASUREMENT;
 800683c:	4b09      	ldr	r3, [pc, #36]	@ (8006864 <Mic_Upkeep+0x88>)
 800683e:	2201      	movs	r2, #1
 8006840:	701a      	strb	r2, [r3, #0]
    }
    break;
 8006842:	e00b      	b.n	800685c <Mic_Upkeep+0x80>

  default:
    Debug("Unexpected ocurrence happened");
 8006844:	4a09      	ldr	r2, [pc, #36]	@ (800686c <Mic_Upkeep+0x90>)
 8006846:	4b0a      	ldr	r3, [pc, #40]	@ (8006870 <Mic_Upkeep+0x94>)
 8006848:	0019      	movs	r1, r3
 800684a:	2003      	movs	r0, #3
 800684c:	f002 fef4 	bl	8009638 <CreateLine>
    MicState = MIC_STATE_INIT;
 8006850:	4b04      	ldr	r3, [pc, #16]	@ (8006864 <Mic_Upkeep+0x88>)
 8006852:	2200      	movs	r2, #0
 8006854:	701a      	strb	r2, [r3, #0]
    break;
 8006856:	e002      	b.n	800685e <Mic_Upkeep+0x82>
    break;
 8006858:	46c0      	nop			@ (mov r8, r8)
 800685a:	e000      	b.n	800685e <Mic_Upkeep+0x82>
    break;
 800685c:	46c0      	nop			@ (mov r8, r8)
  }
}
 800685e:	46c0      	nop			@ (mov r8, r8)
 8006860:	46bd      	mov	sp, r7
 8006862:	bd80      	pop	{r7, pc}
 8006864:	20000e89 	.word	0x20000e89
 8006868:	20000e90 	.word	0x20000e90
 800686c:	0801b1e8 	.word	0x0801b1e8
 8006870:	0801b1a0 	.word	0x0801b1a0

08006874 <Meas_Upkeep>:

void Meas_Upkeep(void) {
 8006874:	b5b0      	push	{r4, r5, r7, lr}
 8006876:	b084      	sub	sp, #16
 8006878:	af04      	add	r7, sp, #16
  switch(MeasState) {
 800687a:	4b3e      	ldr	r3, [pc, #248]	@ (8006974 <Meas_Upkeep+0x100>)
 800687c:	781b      	ldrb	r3, [r3, #0]
 800687e:	2b06      	cmp	r3, #6
 8006880:	d86d      	bhi.n	800695e <Meas_Upkeep+0xea>
 8006882:	009a      	lsls	r2, r3, #2
 8006884:	4b3c      	ldr	r3, [pc, #240]	@ (8006978 <Meas_Upkeep+0x104>)
 8006886:	18d3      	adds	r3, r2, r3
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	469f      	mov	pc, r3
  case MEAS_STATE_OFF:

    Debug("Measurements are turned off.");
 800688c:	4a3b      	ldr	r2, [pc, #236]	@ (800697c <Meas_Upkeep+0x108>)
 800688e:	4b3c      	ldr	r3, [pc, #240]	@ (8006980 <Meas_Upkeep+0x10c>)
 8006890:	0019      	movs	r1, r3
 8006892:	2003      	movs	r0, #3
 8006894:	f002 fed0 	bl	8009638 <CreateLine>
    break;
 8006898:	e068      	b.n	800696c <Meas_Upkeep+0xf8>

  case MEAS_STATE_INIT:
    ResetMeasurements();
 800689a:	f7ff ff4b 	bl	8006734 <ResetMeasurements>
    MeasState = MEAS_STATE_START_MEASUREMENTS;
 800689e:	4b35      	ldr	r3, [pc, #212]	@ (8006974 <Meas_Upkeep+0x100>)
 80068a0:	2201      	movs	r2, #1
 80068a2:	701a      	strb	r2, [r3, #0]
    break;
 80068a4:	e062      	b.n	800696c <Meas_Upkeep+0xf8>

  case MEAS_STATE_START_MEASUREMENTS:
    StartMeasurements();
 80068a6:	f7ff fec5 	bl	8006634 <StartMeasurements>
    TIM2 -> CCR3 = 3000;
 80068aa:	2380      	movs	r3, #128	@ 0x80
 80068ac:	05db      	lsls	r3, r3, #23
 80068ae:	4a35      	ldr	r2, [pc, #212]	@ (8006984 <Meas_Upkeep+0x110>)
 80068b0:	63da      	str	r2, [r3, #60]	@ 0x3c
    MeasState = MEAS_STATE_WAIT_FOR_COMPLETION;
 80068b2:	4b30      	ldr	r3, [pc, #192]	@ (8006974 <Meas_Upkeep+0x100>)
 80068b4:	2202      	movs	r2, #2
 80068b6:	701a      	strb	r2, [r3, #0]
   break;
 80068b8:	e058      	b.n	800696c <Meas_Upkeep+0xf8>

  case MEAS_STATE_WAIT_FOR_COMPLETION:
    if(MeasurementsCompleted()) {
 80068ba:	f7ff ff57 	bl	800676c <MeasurementsCompleted>
 80068be:	1e03      	subs	r3, r0, #0
 80068c0:	d051      	beq.n	8006966 <Meas_Upkeep+0xf2>
      MeasState = MEAS_STATE_PROCESS_RESULTS;
 80068c2:	4b2c      	ldr	r3, [pc, #176]	@ (8006974 <Meas_Upkeep+0x100>)
 80068c4:	2203      	movs	r2, #3
 80068c6:	701a      	strb	r2, [r3, #0]
    }
    break;
 80068c8:	e04d      	b.n	8006966 <Meas_Upkeep+0xf2>

  case MEAS_STATE_PROCESS_RESULTS:

    // TODO: Return values and let gadget handle with too high humidity and the sensor values
    // TODO: Check if all measurements are ready for the next measurement before switching states. Only check for the enabled measurements.
    Debug("Processing results.");
 80068ca:	4a2f      	ldr	r2, [pc, #188]	@ (8006988 <Meas_Upkeep+0x114>)
 80068cc:	4b2c      	ldr	r3, [pc, #176]	@ (8006980 <Meas_Upkeep+0x10c>)
 80068ce:	0019      	movs	r1, r3
 80068d0:	2003      	movs	r0, #3
 80068d2:	f002 feb1 	bl	8009638 <CreateLine>
    Debug("SGP40 index value: %d", MeasurementCtx.vocIndex);
 80068d6:	4b2d      	ldr	r3, [pc, #180]	@ (800698c <Meas_Upkeep+0x118>)
 80068d8:	689b      	ldr	r3, [r3, #8]
 80068da:	4a2d      	ldr	r2, [pc, #180]	@ (8006990 <Meas_Upkeep+0x11c>)
 80068dc:	4928      	ldr	r1, [pc, #160]	@ (8006980 <Meas_Upkeep+0x10c>)
 80068de:	2003      	movs	r0, #3
 80068e0:	f002 feaa 	bl	8009638 <CreateLine>
    Debug("Humidity value: %3.2f%%, Temperature value: %3.2fC", MeasurementCtx.humidityPerc, MeasurementCtx.temperature);
 80068e4:	4b29      	ldr	r3, [pc, #164]	@ (800698c <Meas_Upkeep+0x118>)
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	1c18      	adds	r0, r3, #0
 80068ea:	f7fc fd39 	bl	8003360 <__aeabi_f2d>
 80068ee:	0004      	movs	r4, r0
 80068f0:	000d      	movs	r5, r1
 80068f2:	4b26      	ldr	r3, [pc, #152]	@ (800698c <Meas_Upkeep+0x118>)
 80068f4:	685b      	ldr	r3, [r3, #4]
 80068f6:	1c18      	adds	r0, r3, #0
 80068f8:	f7fc fd32 	bl	8003360 <__aeabi_f2d>
 80068fc:	0002      	movs	r2, r0
 80068fe:	000b      	movs	r3, r1
 8006900:	4824      	ldr	r0, [pc, #144]	@ (8006994 <Meas_Upkeep+0x120>)
 8006902:	491f      	ldr	r1, [pc, #124]	@ (8006980 <Meas_Upkeep+0x10c>)
 8006904:	9202      	str	r2, [sp, #8]
 8006906:	9303      	str	r3, [sp, #12]
 8006908:	9400      	str	r4, [sp, #0]
 800690a:	9501      	str	r5, [sp, #4]
 800690c:	0002      	movs	r2, r0
 800690e:	2003      	movs	r0, #3
 8006910:	f002 fe92 	bl	8009638 <CreateLine>
    setMeasurement(MeasurementCtx.temperature, MeasurementCtx.humidityPerc, MeasurementCtx.vocIndex);
 8006914:	4b1d      	ldr	r3, [pc, #116]	@ (800698c <Meas_Upkeep+0x118>)
 8006916:	6858      	ldr	r0, [r3, #4]
 8006918:	4b1c      	ldr	r3, [pc, #112]	@ (800698c <Meas_Upkeep+0x118>)
 800691a:	6819      	ldr	r1, [r3, #0]
 800691c:	4b1b      	ldr	r3, [pc, #108]	@ (800698c <Meas_Upkeep+0x118>)
 800691e:	689b      	ldr	r3, [r3, #8]
 8006920:	b29b      	uxth	r3, r3
 8006922:	001a      	movs	r2, r3
 8006924:	f7fc fecc 	bl	80036c0 <setMeasurement>
    TIM2 -> CCR3 = 4000;
 8006928:	2380      	movs	r3, #128	@ 0x80
 800692a:	05db      	lsls	r3, r3, #23
 800692c:	22fa      	movs	r2, #250	@ 0xfa
 800692e:	0112      	lsls	r2, r2, #4
 8006930:	63da      	str	r2, [r3, #60]	@ 0x3c
    MeasStamp = HAL_GetTick() + 10000;
 8006932:	f003 fa1d 	bl	8009d70 <HAL_GetTick>
 8006936:	0003      	movs	r3, r0
 8006938:	4a17      	ldr	r2, [pc, #92]	@ (8006998 <Meas_Upkeep+0x124>)
 800693a:	189a      	adds	r2, r3, r2
 800693c:	4b17      	ldr	r3, [pc, #92]	@ (800699c <Meas_Upkeep+0x128>)
 800693e:	601a      	str	r2, [r3, #0]
    MeasState = MEAS_STATE_WAIT;
 8006940:	4b0c      	ldr	r3, [pc, #48]	@ (8006974 <Meas_Upkeep+0x100>)
 8006942:	2206      	movs	r2, #6
 8006944:	701a      	strb	r2, [r3, #0]
    break;
 8006946:	e011      	b.n	800696c <Meas_Upkeep+0xf8>

  case MEAS_STATE_WAIT:
    if(TimestampIsReached(MeasStamp)){
 8006948:	4b14      	ldr	r3, [pc, #80]	@ (800699c <Meas_Upkeep+0x128>)
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	0018      	movs	r0, r3
 800694e:	f002 fe1d 	bl	800958c <TimestampIsReached>
 8006952:	1e03      	subs	r3, r0, #0
 8006954:	d009      	beq.n	800696a <Meas_Upkeep+0xf6>
      MeasState = MEAS_STATE_INIT;
 8006956:	4b07      	ldr	r3, [pc, #28]	@ (8006974 <Meas_Upkeep+0x100>)
 8006958:	2200      	movs	r2, #0
 800695a:	701a      	strb	r2, [r3, #0]
    }

    break;
 800695c:	e005      	b.n	800696a <Meas_Upkeep+0xf6>

  default:
    // Handle unexpected state
    MeasState = MEAS_STATE_INIT;
 800695e:	4b05      	ldr	r3, [pc, #20]	@ (8006974 <Meas_Upkeep+0x100>)
 8006960:	2200      	movs	r2, #0
 8006962:	701a      	strb	r2, [r3, #0]
    break;
 8006964:	e002      	b.n	800696c <Meas_Upkeep+0xf8>
    break;
 8006966:	46c0      	nop			@ (mov r8, r8)
 8006968:	e000      	b.n	800696c <Meas_Upkeep+0xf8>
    break;
 800696a:	46c0      	nop			@ (mov r8, r8)
  }
}
 800696c:	46c0      	nop			@ (mov r8, r8)
 800696e:	46bd      	mov	sp, r7
 8006970:	bdb0      	pop	{r4, r5, r7, pc}
 8006972:	46c0      	nop			@ (mov r8, r8)
 8006974:	20000e88 	.word	0x20000e88
 8006978:	0801b978 	.word	0x0801b978
 800697c:	0801b208 	.word	0x0801b208
 8006980:	0801b1a0 	.word	0x0801b1a0
 8006984:	00000bb8 	.word	0x00000bb8
 8006988:	0801b228 	.word	0x0801b228
 800698c:	20000e40 	.word	0x20000e40
 8006990:	0801b23c 	.word	0x0801b23c
 8006994:	0801b254 	.word	0x0801b254
 8006998:	00002710 	.word	0x00002710
 800699c:	20000e8c 	.word	0x20000e8c

080069a0 <Meas_SetEnabledSensors>:
float getHumidity(){
  float Humidity = MeasurementCtx.humidityPerc;
  return Humidity;
}

void Meas_SetEnabledSensors(EnabledMeasurements enabled) {
 80069a0:	b590      	push	{r4, r7, lr}
 80069a2:	b085      	sub	sp, #20
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	1d3b      	adds	r3, r7, #4
 80069a8:	6018      	str	r0, [r3, #0]
  uint8_t offset = 0;
 80069aa:	240f      	movs	r4, #15
 80069ac:	193b      	adds	r3, r7, r4
 80069ae:	2200      	movs	r2, #0
 80069b0:	701a      	strb	r2, [r3, #0]
  MeasEnabled = enabled;
 80069b2:	4b20      	ldr	r3, [pc, #128]	@ (8006a34 <Meas_SetEnabledSensors+0x94>)
 80069b4:	1d3a      	adds	r2, r7, #4
 80069b6:	6812      	ldr	r2, [r2, #0]
 80069b8:	601a      	str	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.HT_measurementEnabled;
 80069ba:	193b      	adds	r3, r7, r4
 80069bc:	781b      	ldrb	r3, [r3, #0]
 80069be:	193a      	adds	r2, r7, r4
 80069c0:	1c59      	adds	r1, r3, #1
 80069c2:	7011      	strb	r1, [r2, #0]
 80069c4:	0018      	movs	r0, r3
 80069c6:	1d3b      	adds	r3, r7, #4
 80069c8:	7819      	ldrb	r1, [r3, #0]
 80069ca:	4a1b      	ldr	r2, [pc, #108]	@ (8006a38 <Meas_SetEnabledSensors+0x98>)
 80069cc:	0103      	lsls	r3, r0, #4
 80069ce:	18d3      	adds	r3, r2, r3
 80069d0:	330c      	adds	r3, #12
 80069d2:	1c0a      	adds	r2, r1, #0
 80069d4:	701a      	strb	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.VOC_measurementEnabled;
 80069d6:	193b      	adds	r3, r7, r4
 80069d8:	781b      	ldrb	r3, [r3, #0]
 80069da:	193a      	adds	r2, r7, r4
 80069dc:	1c59      	adds	r1, r3, #1
 80069de:	7011      	strb	r1, [r2, #0]
 80069e0:	0018      	movs	r0, r3
 80069e2:	1d3b      	adds	r3, r7, #4
 80069e4:	7859      	ldrb	r1, [r3, #1]
 80069e6:	4a14      	ldr	r2, [pc, #80]	@ (8006a38 <Meas_SetEnabledSensors+0x98>)
 80069e8:	0103      	lsls	r3, r0, #4
 80069ea:	18d3      	adds	r3, r2, r3
 80069ec:	330c      	adds	r3, #12
 80069ee:	1c0a      	adds	r2, r1, #0
 80069f0:	701a      	strb	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.PM_measurementEnabled;
 80069f2:	193b      	adds	r3, r7, r4
 80069f4:	781b      	ldrb	r3, [r3, #0]
 80069f6:	193a      	adds	r2, r7, r4
 80069f8:	1c59      	adds	r1, r3, #1
 80069fa:	7011      	strb	r1, [r2, #0]
 80069fc:	0018      	movs	r0, r3
 80069fe:	1d3b      	adds	r3, r7, #4
 8006a00:	7899      	ldrb	r1, [r3, #2]
 8006a02:	4a0d      	ldr	r2, [pc, #52]	@ (8006a38 <Meas_SetEnabledSensors+0x98>)
 8006a04:	0103      	lsls	r3, r0, #4
 8006a06:	18d3      	adds	r3, r2, r3
 8006a08:	330c      	adds	r3, #12
 8006a0a:	1c0a      	adds	r2, r1, #0
 8006a0c:	701a      	strb	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.MIC_measurementEnabled;
 8006a0e:	193b      	adds	r3, r7, r4
 8006a10:	781b      	ldrb	r3, [r3, #0]
 8006a12:	193a      	adds	r2, r7, r4
 8006a14:	1c59      	adds	r1, r3, #1
 8006a16:	7011      	strb	r1, [r2, #0]
 8006a18:	0018      	movs	r0, r3
 8006a1a:	1d3b      	adds	r3, r7, #4
 8006a1c:	78d9      	ldrb	r1, [r3, #3]
 8006a1e:	4a06      	ldr	r2, [pc, #24]	@ (8006a38 <Meas_SetEnabledSensors+0x98>)
 8006a20:	0103      	lsls	r3, r0, #4
 8006a22:	18d3      	adds	r3, r2, r3
 8006a24:	330c      	adds	r3, #12
 8006a26:	1c0a      	adds	r2, r1, #0
 8006a28:	701a      	strb	r2, [r3, #0]
}
 8006a2a:	46c0      	nop			@ (mov r8, r8)
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	b005      	add	sp, #20
 8006a30:	bd90      	pop	{r4, r7, pc}
 8006a32:	46c0      	nop			@ (mov r8, r8)
 8006a34:	20000e80 	.word	0x20000e80
 8006a38:	20000e50 	.word	0x20000e50

08006a3c <SetESPMeasurementDone>:
  Measurements[offset++].enabled = false;
  Measurements[offset++].enabled = false;
  Measurements[offset++].enabled = false;
}

void SetESPMeasurementDone(){
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	af00      	add	r7, sp, #0
  MeasTest.ESP_Tested = true;
 8006a40:	4b02      	ldr	r3, [pc, #8]	@ (8006a4c <SetESPMeasurementDone+0x10>)
 8006a42:	2201      	movs	r2, #1
 8006a44:	70da      	strb	r2, [r3, #3]
}
 8006a46:	46c0      	nop			@ (mov r8, r8)
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	bd80      	pop	{r7, pc}
 8006a4c:	20000e84 	.word	0x20000e84

08006a50 <MIC_Init>:
float sample[NUMBER_OF_SAMPLES];




void MIC_Init(I2S_HandleTypeDef* i2SHandle) { I2SHandle = i2SHandle; }
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b082      	sub	sp, #8
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
 8006a58:	4b03      	ldr	r3, [pc, #12]	@ (8006a68 <MIC_Init+0x18>)
 8006a5a:	687a      	ldr	r2, [r7, #4]
 8006a5c:	601a      	str	r2, [r3, #0]
 8006a5e:	46c0      	nop			@ (mov r8, r8)
 8006a60:	46bd      	mov	sp, r7
 8006a62:	b002      	add	sp, #8
 8006a64:	bd80      	pop	{r7, pc}
 8006a66:	46c0      	nop			@ (mov r8, r8)
 8006a68:	20000e94 	.word	0x20000e94

08006a6c <UpdateSampleRate>:
//  for(uint8_t i = 0;i < NR_SAMPLES_128; i++) {
//    FFTResult[i] *= energyCorrectionFactor;
//  }
//}

static void UpdateSampleRate(uint32_t sampleRate) {
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b082      	sub	sp, #8
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
  if (I2SHandle->Init.AudioFreq == sampleRate) {
 8006a74:	4b0c      	ldr	r3, [pc, #48]	@ (8006aa8 <UpdateSampleRate+0x3c>)
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	695b      	ldr	r3, [r3, #20]
 8006a7a:	687a      	ldr	r2, [r7, #4]
 8006a7c:	429a      	cmp	r2, r3
 8006a7e:	d00e      	beq.n	8006a9e <UpdateSampleRate+0x32>
    return;
  }

  HAL_I2S_DeInit(I2SHandle);
 8006a80:	4b09      	ldr	r3, [pc, #36]	@ (8006aa8 <UpdateSampleRate+0x3c>)
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	0018      	movs	r0, r3
 8006a86:	f006 fe31 	bl	800d6ec <HAL_I2S_DeInit>
  I2SHandle->Init.AudioFreq = sampleRate;
 8006a8a:	4b07      	ldr	r3, [pc, #28]	@ (8006aa8 <UpdateSampleRate+0x3c>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	687a      	ldr	r2, [r7, #4]
 8006a90:	615a      	str	r2, [r3, #20]
  HAL_I2S_Init(I2SHandle);
 8006a92:	4b05      	ldr	r3, [pc, #20]	@ (8006aa8 <UpdateSampleRate+0x3c>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	0018      	movs	r0, r3
 8006a98:	f006 fd36 	bl	800d508 <HAL_I2S_Init>
 8006a9c:	e000      	b.n	8006aa0 <UpdateSampleRate+0x34>
    return;
 8006a9e:	46c0      	nop			@ (mov r8, r8)
}
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	b002      	add	sp, #8
 8006aa4:	bd80      	pop	{r7, pc}
 8006aa6:	46c0      	nop			@ (mov r8, r8)
 8006aa8:	20000e94 	.word	0x20000e94

08006aac <ConvertAudio>:

static float ConvertAudio(int16_t* data) {
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b088      	sub	sp, #32
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
  uint32_t MSP;
  uint32_t LSP;
  int32_t signedAudioValue;
  float Division = 8388607.0; //Reference?
 8006ab4:	4b18      	ldr	r3, [pc, #96]	@ (8006b18 <ConvertAudio+0x6c>)
 8006ab6:	61bb      	str	r3, [r7, #24]
  float adjustedAudioValue = 0;
 8006ab8:	2300      	movs	r3, #0
 8006aba:	617b      	str	r3, [r7, #20]
  uint32_t audioValue = 0;
 8006abc:	2300      	movs	r3, #0
 8006abe:	61fb      	str	r3, [r7, #28]
  MSP = data[0]<<9;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	5e9b      	ldrsh	r3, [r3, r2]
 8006ac6:	025b      	lsls	r3, r3, #9
 8006ac8:	613b      	str	r3, [r7, #16]
  LSP = (data[1]&0xFF80)>>7;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	3302      	adds	r3, #2
 8006ace:	2200      	movs	r2, #0
 8006ad0:	5e9b      	ldrsh	r3, [r3, r2]
 8006ad2:	11db      	asrs	r3, r3, #7
 8006ad4:	05db      	lsls	r3, r3, #23
 8006ad6:	0ddb      	lsrs	r3, r3, #23
 8006ad8:	60fb      	str	r3, [r7, #12]
  audioValue = MSP | LSP;
 8006ada:	693a      	ldr	r2, [r7, #16]
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	4313      	orrs	r3, r2
 8006ae0:	61fb      	str	r3, [r7, #28]
  if((0x800000 & audioValue) != 0){
 8006ae2:	69fa      	ldr	r2, [r7, #28]
 8006ae4:	2380      	movs	r3, #128	@ 0x80
 8006ae6:	041b      	lsls	r3, r3, #16
 8006ae8:	4013      	ands	r3, r2
 8006aea:	d004      	beq.n	8006af6 <ConvertAudio+0x4a>
    audioValue = 0xFF000000 | audioValue;
 8006aec:	69fb      	ldr	r3, [r7, #28]
 8006aee:	22ff      	movs	r2, #255	@ 0xff
 8006af0:	0612      	lsls	r2, r2, #24
 8006af2:	4313      	orrs	r3, r2
 8006af4:	61fb      	str	r3, [r7, #28]
  }
  signedAudioValue = (int32_t)audioValue;
 8006af6:	69fb      	ldr	r3, [r7, #28]
 8006af8:	60bb      	str	r3, [r7, #8]
  adjustedAudioValue = ((float)signedAudioValue/Division);
 8006afa:	68b8      	ldr	r0, [r7, #8]
 8006afc:	f7fa fce6 	bl	80014cc <__aeabi_i2f>
 8006b00:	1c03      	adds	r3, r0, #0
 8006b02:	69b9      	ldr	r1, [r7, #24]
 8006b04:	1c18      	adds	r0, r3, #0
 8006b06:	f7f9 ffe3 	bl	8000ad0 <__aeabi_fdiv>
 8006b0a:	1c03      	adds	r3, r0, #0
 8006b0c:	617b      	str	r3, [r7, #20]
//  if(audioValue < 0){
//    audioValue = 0xFFFFFFFF-audioValue;
//  }
//  dB = 20 * log10(audioValue / Division);

  return adjustedAudioValue;
 8006b0e:	697b      	ldr	r3, [r7, #20]
}
 8006b10:	1c18      	adds	r0, r3, #0
 8006b12:	46bd      	mov	sp, r7
 8006b14:	b008      	add	sp, #32
 8006b16:	bd80      	pop	{r7, pc}
 8006b18:	4afffffe 	.word	0x4afffffe

08006b1c <MIC_Start>:
//  arm_rfft_q15(&fft_instance, sample, output);
//  arm_abs_q15(output, output, NUMBER_OF_SAMPLES);
//  GetAllOctaves();
//}

void MIC_Start(uint32_t sampleRate, uint16_t nrSamples) {
 8006b1c:	b5b0      	push	{r4, r5, r7, lr}
 8006b1e:	b084      	sub	sp, #16
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
 8006b24:	000a      	movs	r2, r1
 8006b26:	1cbb      	adds	r3, r7, #2
 8006b28:	801a      	strh	r2, [r3, #0]
  if (I2SHandle == NULL) {
 8006b2a:	4b20      	ldr	r3, [pc, #128]	@ (8006bac <MIC_Start+0x90>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d106      	bne.n	8006b40 <MIC_Start+0x24>
    Error("Microphone is not initialised.");
 8006b32:	4a1f      	ldr	r2, [pc, #124]	@ (8006bb0 <MIC_Start+0x94>)
 8006b34:	4b1f      	ldr	r3, [pc, #124]	@ (8006bb4 <MIC_Start+0x98>)
 8006b36:	0019      	movs	r1, r3
 8006b38:	2001      	movs	r0, #1
 8006b3a:	f002 fd7d 	bl	8009638 <CreateLine>
    return;
 8006b3e:	e031      	b.n	8006ba4 <MIC_Start+0x88>
  }
  TIM2 -> CCR1 = 3000;
 8006b40:	2380      	movs	r3, #128	@ 0x80
 8006b42:	05db      	lsls	r3, r3, #23
 8006b44:	4a1c      	ldr	r2, [pc, #112]	@ (8006bb8 <MIC_Start+0x9c>)
 8006b46:	635a      	str	r2, [r3, #52]	@ 0x34
  Debug("In mic start");
 8006b48:	4a1c      	ldr	r2, [pc, #112]	@ (8006bbc <MIC_Start+0xa0>)
 8006b4a:	4b1d      	ldr	r3, [pc, #116]	@ (8006bc0 <MIC_Start+0xa4>)
 8006b4c:	0019      	movs	r1, r3
 8006b4e:	2003      	movs	r0, #3
 8006b50:	f002 fd72 	bl	8009638 <CreateLine>
  UpdateSampleRate(sampleRate);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	0018      	movs	r0, r3
 8006b58:	f7ff ff88 	bl	8006a6c <UpdateSampleRate>
  Samples = (NrOfSamples)nrSamples;
 8006b5c:	4b19      	ldr	r3, [pc, #100]	@ (8006bc4 <MIC_Start+0xa8>)
 8006b5e:	1cba      	adds	r2, r7, #2
 8006b60:	8812      	ldrh	r2, [r2, #0]
 8006b62:	801a      	strh	r2, [r3, #0]

  //StartTime = GetCurrentHalTicks();
  StartupDoneTime = HAL_GetTick() + 20;
 8006b64:	f003 f904 	bl	8009d70 <HAL_GetTick>
 8006b68:	0003      	movs	r3, r0
 8006b6a:	3314      	adds	r3, #20
 8006b6c:	001a      	movs	r2, r3
 8006b6e:	4b16      	ldr	r3, [pc, #88]	@ (8006bc8 <MIC_Start+0xac>)
 8006b70:	601a      	str	r2, [r3, #0]
  StartUpDone = false;
 8006b72:	4b16      	ldr	r3, [pc, #88]	@ (8006bcc <MIC_Start+0xb0>)
 8006b74:	2200      	movs	r2, #0
 8006b76:	701a      	strb	r2, [r3, #0]
  DataReady = false;
 8006b78:	4b15      	ldr	r3, [pc, #84]	@ (8006bd0 <MIC_Start+0xb4>)
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	701a      	strb	r2, [r3, #0]

  HAL_StatusTypeDef status = HAL_I2S_Receive_DMA(I2SHandle, (uint16_t*)AudioRxBuffer, NUMBER_OF_SAMPLES*2);
 8006b7e:	4b0b      	ldr	r3, [pc, #44]	@ (8006bac <MIC_Start+0x90>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	250f      	movs	r5, #15
 8006b84:	197c      	adds	r4, r7, r5
 8006b86:	2280      	movs	r2, #128	@ 0x80
 8006b88:	00d2      	lsls	r2, r2, #3
 8006b8a:	4912      	ldr	r1, [pc, #72]	@ (8006bd4 <MIC_Start+0xb8>)
 8006b8c:	0018      	movs	r0, r3
 8006b8e:	f006 fdd9 	bl	800d744 <HAL_I2S_Receive_DMA>
 8006b92:	0003      	movs	r3, r0
 8006b94:	7023      	strb	r3, [r4, #0]
//      HAL_I2S_Receive_DMA(I2SHandle, (uint16_t*)AudioRxBuffer,
//          Samples >> 1); //>>1 because reading half word

  Info("Status %d", status);
 8006b96:	197b      	adds	r3, r7, r5
 8006b98:	781b      	ldrb	r3, [r3, #0]
 8006b9a:	4a0f      	ldr	r2, [pc, #60]	@ (8006bd8 <MIC_Start+0xbc>)
 8006b9c:	490f      	ldr	r1, [pc, #60]	@ (8006bdc <MIC_Start+0xc0>)
 8006b9e:	2002      	movs	r0, #2
 8006ba0:	f002 fd4a 	bl	8009638 <CreateLine>
}
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	b004      	add	sp, #16
 8006ba8:	bdb0      	pop	{r4, r5, r7, pc}
 8006baa:	46c0      	nop			@ (mov r8, r8)
 8006bac:	20000e94 	.word	0x20000e94
 8006bb0:	0801b288 	.word	0x0801b288
 8006bb4:	0801b2a8 	.word	0x0801b2a8
 8006bb8:	00000bb8 	.word	0x00000bb8
 8006bbc:	0801b2ac 	.word	0x0801b2ac
 8006bc0:	0801b2bc 	.word	0x0801b2bc
 8006bc4:	20000074 	.word	0x20000074
 8006bc8:	20001e98 	.word	0x20001e98
 8006bcc:	20001e9c 	.word	0x20001e9c
 8006bd0:	20001e9d 	.word	0x20001e9d
 8006bd4:	20000e98 	.word	0x20000e98
 8006bd8:	0801b2c0 	.word	0x0801b2c0
 8006bdc:	0801b2cc 	.word	0x0801b2cc

08006be0 <MinimalValue>:

float MinimalValue(uint16_t length){
 8006be0:	b590      	push	{r4, r7, lr}
 8006be2:	b085      	sub	sp, #20
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	0002      	movs	r2, r0
 8006be8:	1dbb      	adds	r3, r7, #6
 8006bea:	801a      	strh	r2, [r3, #0]
  float MinVal = 1;
 8006bec:	23fe      	movs	r3, #254	@ 0xfe
 8006bee:	059b      	lsls	r3, r3, #22
 8006bf0:	60fb      	str	r3, [r7, #12]
  int16_t i;
  for(i =0; i<length;i++){
 8006bf2:	230a      	movs	r3, #10
 8006bf4:	18fb      	adds	r3, r7, r3
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	801a      	strh	r2, [r3, #0]
 8006bfa:	e01c      	b.n	8006c36 <MinimalValue+0x56>
    if(sample[i] < MinVal){
 8006bfc:	240a      	movs	r4, #10
 8006bfe:	193b      	adds	r3, r7, r4
 8006c00:	2200      	movs	r2, #0
 8006c02:	5e9a      	ldrsh	r2, [r3, r2]
 8006c04:	4b12      	ldr	r3, [pc, #72]	@ (8006c50 <MinimalValue+0x70>)
 8006c06:	0092      	lsls	r2, r2, #2
 8006c08:	58d3      	ldr	r3, [r2, r3]
 8006c0a:	1c19      	adds	r1, r3, #0
 8006c0c:	68f8      	ldr	r0, [r7, #12]
 8006c0e:	f7f9 fc71 	bl	80004f4 <__aeabi_fcmpgt>
 8006c12:	1e03      	subs	r3, r0, #0
 8006c14:	d006      	beq.n	8006c24 <MinimalValue+0x44>
      MinVal = sample[i];
 8006c16:	193b      	adds	r3, r7, r4
 8006c18:	2200      	movs	r2, #0
 8006c1a:	5e9a      	ldrsh	r2, [r3, r2]
 8006c1c:	4b0c      	ldr	r3, [pc, #48]	@ (8006c50 <MinimalValue+0x70>)
 8006c1e:	0092      	lsls	r2, r2, #2
 8006c20:	58d3      	ldr	r3, [r2, r3]
 8006c22:	60fb      	str	r3, [r7, #12]
  for(i =0; i<length;i++){
 8006c24:	210a      	movs	r1, #10
 8006c26:	187b      	adds	r3, r7, r1
 8006c28:	2200      	movs	r2, #0
 8006c2a:	5e9b      	ldrsh	r3, [r3, r2]
 8006c2c:	b29b      	uxth	r3, r3
 8006c2e:	3301      	adds	r3, #1
 8006c30:	b29a      	uxth	r2, r3
 8006c32:	187b      	adds	r3, r7, r1
 8006c34:	801a      	strh	r2, [r3, #0]
 8006c36:	230a      	movs	r3, #10
 8006c38:	18fb      	adds	r3, r7, r3
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	5e9a      	ldrsh	r2, [r3, r2]
 8006c3e:	1dbb      	adds	r3, r7, #6
 8006c40:	881b      	ldrh	r3, [r3, #0]
 8006c42:	429a      	cmp	r2, r3
 8006c44:	dbda      	blt.n	8006bfc <MinimalValue+0x1c>
    }
  }
  return(MinVal);
 8006c46:	68fb      	ldr	r3, [r7, #12]
}
 8006c48:	1c18      	adds	r0, r3, #0
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	b005      	add	sp, #20
 8006c4e:	bd90      	pop	{r4, r7, pc}
 8006c50:	20001ed4 	.word	0x20001ed4

08006c54 <MaximalValue>:

float MaximalValue(uint16_t length){
 8006c54:	b590      	push	{r4, r7, lr}
 8006c56:	b085      	sub	sp, #20
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	0002      	movs	r2, r0
 8006c5c:	1dbb      	adds	r3, r7, #6
 8006c5e:	801a      	strh	r2, [r3, #0]
  float MaxVal = -1;
 8006c60:	4b18      	ldr	r3, [pc, #96]	@ (8006cc4 <MaximalValue+0x70>)
 8006c62:	60fb      	str	r3, [r7, #12]
  int16_t i;
  for(i =0; i<length;i++){
 8006c64:	230a      	movs	r3, #10
 8006c66:	18fb      	adds	r3, r7, r3
 8006c68:	2200      	movs	r2, #0
 8006c6a:	801a      	strh	r2, [r3, #0]
 8006c6c:	e01c      	b.n	8006ca8 <MaximalValue+0x54>
    if(sample[i] > MaxVal){
 8006c6e:	240a      	movs	r4, #10
 8006c70:	193b      	adds	r3, r7, r4
 8006c72:	2200      	movs	r2, #0
 8006c74:	5e9a      	ldrsh	r2, [r3, r2]
 8006c76:	4b14      	ldr	r3, [pc, #80]	@ (8006cc8 <MaximalValue+0x74>)
 8006c78:	0092      	lsls	r2, r2, #2
 8006c7a:	58d3      	ldr	r3, [r2, r3]
 8006c7c:	1c19      	adds	r1, r3, #0
 8006c7e:	68f8      	ldr	r0, [r7, #12]
 8006c80:	f7f9 fc24 	bl	80004cc <__aeabi_fcmplt>
 8006c84:	1e03      	subs	r3, r0, #0
 8006c86:	d006      	beq.n	8006c96 <MaximalValue+0x42>
      MaxVal = sample[i];
 8006c88:	193b      	adds	r3, r7, r4
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	5e9a      	ldrsh	r2, [r3, r2]
 8006c8e:	4b0e      	ldr	r3, [pc, #56]	@ (8006cc8 <MaximalValue+0x74>)
 8006c90:	0092      	lsls	r2, r2, #2
 8006c92:	58d3      	ldr	r3, [r2, r3]
 8006c94:	60fb      	str	r3, [r7, #12]
  for(i =0; i<length;i++){
 8006c96:	210a      	movs	r1, #10
 8006c98:	187b      	adds	r3, r7, r1
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	5e9b      	ldrsh	r3, [r3, r2]
 8006c9e:	b29b      	uxth	r3, r3
 8006ca0:	3301      	adds	r3, #1
 8006ca2:	b29a      	uxth	r2, r3
 8006ca4:	187b      	adds	r3, r7, r1
 8006ca6:	801a      	strh	r2, [r3, #0]
 8006ca8:	230a      	movs	r3, #10
 8006caa:	18fb      	adds	r3, r7, r3
 8006cac:	2200      	movs	r2, #0
 8006cae:	5e9a      	ldrsh	r2, [r3, r2]
 8006cb0:	1dbb      	adds	r3, r7, #6
 8006cb2:	881b      	ldrh	r3, [r3, #0]
 8006cb4:	429a      	cmp	r2, r3
 8006cb6:	dbda      	blt.n	8006c6e <MaximalValue+0x1a>
    }
  }
  return(MaxVal);
 8006cb8:	68fb      	ldr	r3, [r7, #12]
}
 8006cba:	1c18      	adds	r0, r3, #0
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	b005      	add	sp, #20
 8006cc0:	bd90      	pop	{r4, r7, pc}
 8006cc2:	46c0      	nop			@ (mov r8, r8)
 8006cc4:	bf800000 	.word	0xbf800000
 8006cc8:	20001ed4 	.word	0x20001ed4

08006ccc <MIC_Check>:
bool MIC_Check(void) {
 8006ccc:	b5b0      	push	{r4, r5, r7, lr}
 8006cce:	b084      	sub	sp, #16
 8006cd0:	af00      	add	r7, sp, #0
  float Max;
  float Min;
  Info("New samples");
 8006cd2:	4a25      	ldr	r2, [pc, #148]	@ (8006d68 <MIC_Check+0x9c>)
 8006cd4:	4b25      	ldr	r3, [pc, #148]	@ (8006d6c <MIC_Check+0xa0>)
 8006cd6:	0019      	movs	r1, r3
 8006cd8:	2002      	movs	r0, #2
 8006cda:	f002 fcad 	bl	8009638 <CreateLine>
  for (uint16_t i = 0; i < NUMBER_OF_SAMPLES; i += 1) {
 8006cde:	230e      	movs	r3, #14
 8006ce0:	18fb      	adds	r3, r7, r3
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	801a      	strh	r2, [r3, #0]
 8006ce6:	e016      	b.n	8006d16 <MIC_Check+0x4a>
    sample[i] = ConvertAudio(&AudioRxBuffer[4*i+2]);
 8006ce8:	210e      	movs	r1, #14
 8006cea:	187b      	adds	r3, r7, r1
 8006cec:	881b      	ldrh	r3, [r3, #0]
 8006cee:	009b      	lsls	r3, r3, #2
 8006cf0:	3302      	adds	r3, #2
 8006cf2:	005a      	lsls	r2, r3, #1
 8006cf4:	4b1e      	ldr	r3, [pc, #120]	@ (8006d70 <MIC_Check+0xa4>)
 8006cf6:	18d2      	adds	r2, r2, r3
 8006cf8:	000d      	movs	r5, r1
 8006cfa:	187b      	adds	r3, r7, r1
 8006cfc:	881c      	ldrh	r4, [r3, #0]
 8006cfe:	0010      	movs	r0, r2
 8006d00:	f7ff fed4 	bl	8006aac <ConvertAudio>
 8006d04:	1c01      	adds	r1, r0, #0
 8006d06:	4b1b      	ldr	r3, [pc, #108]	@ (8006d74 <MIC_Check+0xa8>)
 8006d08:	00a2      	lsls	r2, r4, #2
 8006d0a:	50d1      	str	r1, [r2, r3]
  for (uint16_t i = 0; i < NUMBER_OF_SAMPLES; i += 1) {
 8006d0c:	197b      	adds	r3, r7, r5
 8006d0e:	197a      	adds	r2, r7, r5
 8006d10:	8812      	ldrh	r2, [r2, #0]
 8006d12:	3201      	adds	r2, #1
 8006d14:	801a      	strh	r2, [r3, #0]
 8006d16:	230e      	movs	r3, #14
 8006d18:	18fb      	adds	r3, r7, r3
 8006d1a:	881a      	ldrh	r2, [r3, #0]
 8006d1c:	2380      	movs	r3, #128	@ 0x80
 8006d1e:	009b      	lsls	r3, r3, #2
 8006d20:	429a      	cmp	r2, r3
 8006d22:	d3e1      	bcc.n	8006ce8 <MIC_Check+0x1c>
    //Info("0x%08x", sample);
  }
  Max = MaximalValue(NUMBER_OF_SAMPLES);
 8006d24:	2380      	movs	r3, #128	@ 0x80
 8006d26:	009b      	lsls	r3, r3, #2
 8006d28:	0018      	movs	r0, r3
 8006d2a:	f7ff ff93 	bl	8006c54 <MaximalValue>
 8006d2e:	1c03      	adds	r3, r0, #0
 8006d30:	60bb      	str	r3, [r7, #8]
  Min = MinimalValue(NUMBER_OF_SAMPLES);
 8006d32:	2380      	movs	r3, #128	@ 0x80
 8006d34:	009b      	lsls	r3, r3, #2
 8006d36:	0018      	movs	r0, r3
 8006d38:	f7ff ff52 	bl	8006be0 <MinimalValue>
 8006d3c:	1c03      	adds	r3, r0, #0
 8006d3e:	607b      	str	r3, [r7, #4]
  if(Max > 0.0 || Min < 0.0){
 8006d40:	2100      	movs	r1, #0
 8006d42:	68b8      	ldr	r0, [r7, #8]
 8006d44:	f7f9 fbd6 	bl	80004f4 <__aeabi_fcmpgt>
 8006d48:	1e03      	subs	r3, r0, #0
 8006d4a:	d105      	bne.n	8006d58 <MIC_Check+0x8c>
 8006d4c:	2100      	movs	r1, #0
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	f7f9 fbbc 	bl	80004cc <__aeabi_fcmplt>
 8006d54:	1e03      	subs	r3, r0, #0
 8006d56:	d001      	beq.n	8006d5c <MIC_Check+0x90>
    return(true);
 8006d58:	2301      	movs	r3, #1
 8006d5a:	e000      	b.n	8006d5e <MIC_Check+0x92>
  }
  return(false);
 8006d5c:	2300      	movs	r3, #0
}
 8006d5e:	0018      	movs	r0, r3
 8006d60:	46bd      	mov	sp, r7
 8006d62:	b004      	add	sp, #16
 8006d64:	bdb0      	pop	{r4, r5, r7, pc}
 8006d66:	46c0      	nop			@ (mov r8, r8)
 8006d68:	0801b2d0 	.word	0x0801b2d0
 8006d6c:	0801b2cc 	.word	0x0801b2cc
 8006d70:	20000e98 	.word	0x20000e98
 8006d74:	20001ed4 	.word	0x20001ed4

08006d78 <MIC_Print>:
void MIC_Print(void) {
 8006d78:	b590      	push	{r4, r7, lr}
 8006d7a:	b083      	sub	sp, #12
 8006d7c:	af00      	add	r7, sp, #0
  Info("New samples");
 8006d7e:	4abe      	ldr	r2, [pc, #760]	@ (8007078 <MIC_Print+0x300>)
 8006d80:	4bbe      	ldr	r3, [pc, #760]	@ (800707c <MIC_Print+0x304>)
 8006d82:	0019      	movs	r1, r3
 8006d84:	2002      	movs	r0, #2
 8006d86:	f002 fc57 	bl	8009638 <CreateLine>
  for (uint16_t i = 0; i < NUMBER_OF_SAMPLES; i += 1) {
 8006d8a:	1dbb      	adds	r3, r7, #6
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	801a      	strh	r2, [r3, #0]
 8006d90:	e014      	b.n	8006dbc <MIC_Print+0x44>
    sample[i] = ConvertAudio(&AudioRxBuffer[4*i+2]);
 8006d92:	1dbb      	adds	r3, r7, #6
 8006d94:	881b      	ldrh	r3, [r3, #0]
 8006d96:	009b      	lsls	r3, r3, #2
 8006d98:	3302      	adds	r3, #2
 8006d9a:	005a      	lsls	r2, r3, #1
 8006d9c:	4bb8      	ldr	r3, [pc, #736]	@ (8007080 <MIC_Print+0x308>)
 8006d9e:	18d2      	adds	r2, r2, r3
 8006da0:	1dbb      	adds	r3, r7, #6
 8006da2:	881c      	ldrh	r4, [r3, #0]
 8006da4:	0010      	movs	r0, r2
 8006da6:	f7ff fe81 	bl	8006aac <ConvertAudio>
 8006daa:	1c01      	adds	r1, r0, #0
 8006dac:	4bb5      	ldr	r3, [pc, #724]	@ (8007084 <MIC_Print+0x30c>)
 8006dae:	00a2      	lsls	r2, r4, #2
 8006db0:	50d1      	str	r1, [r2, r3]
  for (uint16_t i = 0; i < NUMBER_OF_SAMPLES; i += 1) {
 8006db2:	1dbb      	adds	r3, r7, #6
 8006db4:	1dba      	adds	r2, r7, #6
 8006db6:	8812      	ldrh	r2, [r2, #0]
 8006db8:	3201      	adds	r2, #1
 8006dba:	801a      	strh	r2, [r3, #0]
 8006dbc:	1dbb      	adds	r3, r7, #6
 8006dbe:	881a      	ldrh	r2, [r3, #0]
 8006dc0:	2380      	movs	r3, #128	@ 0x80
 8006dc2:	009b      	lsls	r3, r3, #2
 8006dc4:	429a      	cmp	r2, r3
 8006dc6:	d3e4      	bcc.n	8006d92 <MIC_Print+0x1a>
    //Info("0x%08x", sample);
  }
  //filter();
  dBc = MIC_GetDB();
 8006dc8:	f000 f9e6 	bl	8007198 <MIC_GetDB>
 8006dcc:	1c02      	adds	r2, r0, #0
 8006dce:	4bae      	ldr	r3, [pc, #696]	@ (8007088 <MIC_Print+0x310>)
 8006dd0:	601a      	str	r2, [r3, #0]
  if(counter < 10){
 8006dd2:	4bae      	ldr	r3, [pc, #696]	@ (800708c <MIC_Print+0x314>)
 8006dd4:	781b      	ldrb	r3, [r3, #0]
 8006dd6:	2b09      	cmp	r3, #9
 8006dd8:	d80e      	bhi.n	8006df8 <MIC_Print+0x80>
    dBcSamples[counter] = dBc;
 8006dda:	4bac      	ldr	r3, [pc, #688]	@ (800708c <MIC_Print+0x314>)
 8006ddc:	781b      	ldrb	r3, [r3, #0]
 8006dde:	001a      	movs	r2, r3
 8006de0:	4ba9      	ldr	r3, [pc, #676]	@ (8007088 <MIC_Print+0x310>)
 8006de2:	6819      	ldr	r1, [r3, #0]
 8006de4:	4baa      	ldr	r3, [pc, #680]	@ (8007090 <MIC_Print+0x318>)
 8006de6:	0092      	lsls	r2, r2, #2
 8006de8:	50d1      	str	r1, [r2, r3]
    counter += 1;
 8006dea:	4ba8      	ldr	r3, [pc, #672]	@ (800708c <MIC_Print+0x314>)
 8006dec:	781b      	ldrb	r3, [r3, #0]
 8006dee:	3301      	adds	r3, #1
 8006df0:	b2da      	uxtb	r2, r3
 8006df2:	4ba6      	ldr	r3, [pc, #664]	@ (800708c <MIC_Print+0x314>)
 8006df4:	701a      	strb	r2, [r3, #0]
 8006df6:	e013      	b.n	8006e20 <MIC_Print+0xa8>
  }
  else{
    counter = 0;
 8006df8:	4ba4      	ldr	r3, [pc, #656]	@ (800708c <MIC_Print+0x314>)
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	701a      	strb	r2, [r3, #0]
    dBcSamples[counter] = dBc;
 8006dfe:	4ba3      	ldr	r3, [pc, #652]	@ (800708c <MIC_Print+0x314>)
 8006e00:	781b      	ldrb	r3, [r3, #0]
 8006e02:	001a      	movs	r2, r3
 8006e04:	4ba0      	ldr	r3, [pc, #640]	@ (8007088 <MIC_Print+0x310>)
 8006e06:	6819      	ldr	r1, [r3, #0]
 8006e08:	4ba1      	ldr	r3, [pc, #644]	@ (8007090 <MIC_Print+0x318>)
 8006e0a:	0092      	lsls	r2, r2, #2
 8006e0c:	50d1      	str	r1, [r2, r3]
    counter += 1;
 8006e0e:	4b9f      	ldr	r3, [pc, #636]	@ (800708c <MIC_Print+0x314>)
 8006e10:	781b      	ldrb	r3, [r3, #0]
 8006e12:	3301      	adds	r3, #1
 8006e14:	b2da      	uxtb	r2, r3
 8006e16:	4b9d      	ldr	r3, [pc, #628]	@ (800708c <MIC_Print+0x314>)
 8006e18:	701a      	strb	r2, [r3, #0]
    averageReached = true;
 8006e1a:	4b9e      	ldr	r3, [pc, #632]	@ (8007094 <MIC_Print+0x31c>)
 8006e1c:	2201      	movs	r2, #1
 8006e1e:	701a      	strb	r2, [r3, #0]
  }
  if(!averageReached){
 8006e20:	4b9c      	ldr	r3, [pc, #624]	@ (8007094 <MIC_Print+0x31c>)
 8006e22:	781b      	ldrb	r3, [r3, #0]
 8006e24:	2201      	movs	r2, #1
 8006e26:	4053      	eors	r3, r2
 8006e28:	b2db      	uxtb	r3, r3
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d005      	beq.n	8006e3a <MIC_Print+0xc2>
    setMic(dBc);
 8006e2e:	4b96      	ldr	r3, [pc, #600]	@ (8007088 <MIC_Print+0x310>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	1c18      	adds	r0, r3, #0
 8006e34:	f7fc fc60 	bl	80036f8 <setMic>
 8006e38:	e02d      	b.n	8006e96 <MIC_Print+0x11e>
  }
  else{
    dBcAverage = 0;
 8006e3a:	4b97      	ldr	r3, [pc, #604]	@ (8007098 <MIC_Print+0x320>)
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	601a      	str	r2, [r3, #0]
    for(uint8_t i=0;i<10;i++){
 8006e40:	1d7b      	adds	r3, r7, #5
 8006e42:	2200      	movs	r2, #0
 8006e44:	701a      	strb	r2, [r3, #0]
 8006e46:	e013      	b.n	8006e70 <MIC_Print+0xf8>
      dBcAverage += dBcSamples[i];
 8006e48:	1d7b      	adds	r3, r7, #5
 8006e4a:	781a      	ldrb	r2, [r3, #0]
 8006e4c:	4b90      	ldr	r3, [pc, #576]	@ (8007090 <MIC_Print+0x318>)
 8006e4e:	0092      	lsls	r2, r2, #2
 8006e50:	58d2      	ldr	r2, [r2, r3]
 8006e52:	4b91      	ldr	r3, [pc, #580]	@ (8007098 <MIC_Print+0x320>)
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	1c19      	adds	r1, r3, #0
 8006e58:	1c10      	adds	r0, r2, #0
 8006e5a:	f7f9 fcaf 	bl	80007bc <__aeabi_fadd>
 8006e5e:	1c03      	adds	r3, r0, #0
 8006e60:	1c1a      	adds	r2, r3, #0
 8006e62:	4b8d      	ldr	r3, [pc, #564]	@ (8007098 <MIC_Print+0x320>)
 8006e64:	601a      	str	r2, [r3, #0]
    for(uint8_t i=0;i<10;i++){
 8006e66:	1d7b      	adds	r3, r7, #5
 8006e68:	781a      	ldrb	r2, [r3, #0]
 8006e6a:	1d7b      	adds	r3, r7, #5
 8006e6c:	3201      	adds	r2, #1
 8006e6e:	701a      	strb	r2, [r3, #0]
 8006e70:	1d7b      	adds	r3, r7, #5
 8006e72:	781b      	ldrb	r3, [r3, #0]
 8006e74:	2b09      	cmp	r3, #9
 8006e76:	d9e7      	bls.n	8006e48 <MIC_Print+0xd0>
    }
    dBcAverage = dBcAverage/10;
 8006e78:	4b87      	ldr	r3, [pc, #540]	@ (8007098 <MIC_Print+0x320>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	4987      	ldr	r1, [pc, #540]	@ (800709c <MIC_Print+0x324>)
 8006e7e:	1c18      	adds	r0, r3, #0
 8006e80:	f7f9 fe26 	bl	8000ad0 <__aeabi_fdiv>
 8006e84:	1c03      	adds	r3, r0, #0
 8006e86:	1c1a      	adds	r2, r3, #0
 8006e88:	4b83      	ldr	r3, [pc, #524]	@ (8007098 <MIC_Print+0x320>)
 8006e8a:	601a      	str	r2, [r3, #0]
    setMic(dBcAverage);
 8006e8c:	4b82      	ldr	r3, [pc, #520]	@ (8007098 <MIC_Print+0x320>)
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	1c18      	adds	r0, r3, #0
 8006e92:	f7fc fc31 	bl	80036f8 <setMic>
  }
  //Currently is set as the individual dBc, should be set to average.
//  HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 1);
//  HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
//  HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
  if(dBc > 85){ //white
 8006e96:	4b7c      	ldr	r3, [pc, #496]	@ (8007088 <MIC_Print+0x310>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	4981      	ldr	r1, [pc, #516]	@ (80070a0 <MIC_Print+0x328>)
 8006e9c:	1c18      	adds	r0, r3, #0
 8006e9e:	f7f9 fb29 	bl	80004f4 <__aeabi_fcmpgt>
 8006ea2:	1e03      	subs	r3, r0, #0
 8006ea4:	d013      	beq.n	8006ece <MIC_Print+0x156>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 0);
 8006ea6:	4b7f      	ldr	r3, [pc, #508]	@ (80070a4 <MIC_Print+0x32c>)
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	2101      	movs	r1, #1
 8006eac:	0018      	movs	r0, r3
 8006eae:	f004 fafe 	bl	800b4ae <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 0);
 8006eb2:	2380      	movs	r3, #128	@ 0x80
 8006eb4:	005b      	lsls	r3, r3, #1
 8006eb6:	487b      	ldr	r0, [pc, #492]	@ (80070a4 <MIC_Print+0x32c>)
 8006eb8:	2200      	movs	r2, #0
 8006eba:	0019      	movs	r1, r3
 8006ebc:	f004 faf7 	bl	800b4ae <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 0);
 8006ec0:	2380      	movs	r3, #128	@ 0x80
 8006ec2:	009b      	lsls	r3, r3, #2
 8006ec4:	4877      	ldr	r0, [pc, #476]	@ (80070a4 <MIC_Print+0x32c>)
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	0019      	movs	r1, r3
 8006eca:	f004 faf0 	bl	800b4ae <HAL_GPIO_WritePin>
  }
  if(dBc < 85 && dBc >= 80){ //red
 8006ece:	4b6e      	ldr	r3, [pc, #440]	@ (8007088 <MIC_Print+0x310>)
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	4973      	ldr	r1, [pc, #460]	@ (80070a0 <MIC_Print+0x328>)
 8006ed4:	1c18      	adds	r0, r3, #0
 8006ed6:	f7f9 faf9 	bl	80004cc <__aeabi_fcmplt>
 8006eda:	1e03      	subs	r3, r0, #0
 8006edc:	d01b      	beq.n	8006f16 <MIC_Print+0x19e>
 8006ede:	4b6a      	ldr	r3, [pc, #424]	@ (8007088 <MIC_Print+0x310>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	4971      	ldr	r1, [pc, #452]	@ (80070a8 <MIC_Print+0x330>)
 8006ee4:	1c18      	adds	r0, r3, #0
 8006ee6:	f7f9 fb0f 	bl	8000508 <__aeabi_fcmpge>
 8006eea:	1e03      	subs	r3, r0, #0
 8006eec:	d013      	beq.n	8006f16 <MIC_Print+0x19e>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 0);
 8006eee:	4b6d      	ldr	r3, [pc, #436]	@ (80070a4 <MIC_Print+0x32c>)
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	2101      	movs	r1, #1
 8006ef4:	0018      	movs	r0, r3
 8006ef6:	f004 fada 	bl	800b4ae <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
 8006efa:	2380      	movs	r3, #128	@ 0x80
 8006efc:	005b      	lsls	r3, r3, #1
 8006efe:	4869      	ldr	r0, [pc, #420]	@ (80070a4 <MIC_Print+0x32c>)
 8006f00:	2201      	movs	r2, #1
 8006f02:	0019      	movs	r1, r3
 8006f04:	f004 fad3 	bl	800b4ae <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
 8006f08:	2380      	movs	r3, #128	@ 0x80
 8006f0a:	009b      	lsls	r3, r3, #2
 8006f0c:	4865      	ldr	r0, [pc, #404]	@ (80070a4 <MIC_Print+0x32c>)
 8006f0e:	2201      	movs	r2, #1
 8006f10:	0019      	movs	r1, r3
 8006f12:	f004 facc 	bl	800b4ae <HAL_GPIO_WritePin>
  }
  if(dBc < 80 && dBc >= 75){//purple
 8006f16:	4b5c      	ldr	r3, [pc, #368]	@ (8007088 <MIC_Print+0x310>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	4963      	ldr	r1, [pc, #396]	@ (80070a8 <MIC_Print+0x330>)
 8006f1c:	1c18      	adds	r0, r3, #0
 8006f1e:	f7f9 fad5 	bl	80004cc <__aeabi_fcmplt>
 8006f22:	1e03      	subs	r3, r0, #0
 8006f24:	d01b      	beq.n	8006f5e <MIC_Print+0x1e6>
 8006f26:	4b58      	ldr	r3, [pc, #352]	@ (8007088 <MIC_Print+0x310>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	4960      	ldr	r1, [pc, #384]	@ (80070ac <MIC_Print+0x334>)
 8006f2c:	1c18      	adds	r0, r3, #0
 8006f2e:	f7f9 faeb 	bl	8000508 <__aeabi_fcmpge>
 8006f32:	1e03      	subs	r3, r0, #0
 8006f34:	d013      	beq.n	8006f5e <MIC_Print+0x1e6>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 0);
 8006f36:	4b5b      	ldr	r3, [pc, #364]	@ (80070a4 <MIC_Print+0x32c>)
 8006f38:	2200      	movs	r2, #0
 8006f3a:	2101      	movs	r1, #1
 8006f3c:	0018      	movs	r0, r3
 8006f3e:	f004 fab6 	bl	800b4ae <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
 8006f42:	2380      	movs	r3, #128	@ 0x80
 8006f44:	005b      	lsls	r3, r3, #1
 8006f46:	4857      	ldr	r0, [pc, #348]	@ (80070a4 <MIC_Print+0x32c>)
 8006f48:	2201      	movs	r2, #1
 8006f4a:	0019      	movs	r1, r3
 8006f4c:	f004 faaf 	bl	800b4ae <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 0);
 8006f50:	2380      	movs	r3, #128	@ 0x80
 8006f52:	009b      	lsls	r3, r3, #2
 8006f54:	4853      	ldr	r0, [pc, #332]	@ (80070a4 <MIC_Print+0x32c>)
 8006f56:	2200      	movs	r2, #0
 8006f58:	0019      	movs	r1, r3
 8006f5a:	f004 faa8 	bl	800b4ae <HAL_GPIO_WritePin>
  }
  if(dBc < 75 && dBc >= 70){//yellow
 8006f5e:	4b4a      	ldr	r3, [pc, #296]	@ (8007088 <MIC_Print+0x310>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	4952      	ldr	r1, [pc, #328]	@ (80070ac <MIC_Print+0x334>)
 8006f64:	1c18      	adds	r0, r3, #0
 8006f66:	f7f9 fab1 	bl	80004cc <__aeabi_fcmplt>
 8006f6a:	1e03      	subs	r3, r0, #0
 8006f6c:	d01b      	beq.n	8006fa6 <MIC_Print+0x22e>
 8006f6e:	4b46      	ldr	r3, [pc, #280]	@ (8007088 <MIC_Print+0x310>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	494f      	ldr	r1, [pc, #316]	@ (80070b0 <MIC_Print+0x338>)
 8006f74:	1c18      	adds	r0, r3, #0
 8006f76:	f7f9 fac7 	bl	8000508 <__aeabi_fcmpge>
 8006f7a:	1e03      	subs	r3, r0, #0
 8006f7c:	d013      	beq.n	8006fa6 <MIC_Print+0x22e>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 0);
 8006f7e:	4b49      	ldr	r3, [pc, #292]	@ (80070a4 <MIC_Print+0x32c>)
 8006f80:	2200      	movs	r2, #0
 8006f82:	2101      	movs	r1, #1
 8006f84:	0018      	movs	r0, r3
 8006f86:	f004 fa92 	bl	800b4ae <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 0);
 8006f8a:	2380      	movs	r3, #128	@ 0x80
 8006f8c:	005b      	lsls	r3, r3, #1
 8006f8e:	4845      	ldr	r0, [pc, #276]	@ (80070a4 <MIC_Print+0x32c>)
 8006f90:	2200      	movs	r2, #0
 8006f92:	0019      	movs	r1, r3
 8006f94:	f004 fa8b 	bl	800b4ae <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
 8006f98:	2380      	movs	r3, #128	@ 0x80
 8006f9a:	009b      	lsls	r3, r3, #2
 8006f9c:	4841      	ldr	r0, [pc, #260]	@ (80070a4 <MIC_Print+0x32c>)
 8006f9e:	2201      	movs	r2, #1
 8006fa0:	0019      	movs	r1, r3
 8006fa2:	f004 fa84 	bl	800b4ae <HAL_GPIO_WritePin>
  }
  if(dBc < 70 && dBc >= 65){//Green
 8006fa6:	4b38      	ldr	r3, [pc, #224]	@ (8007088 <MIC_Print+0x310>)
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	4941      	ldr	r1, [pc, #260]	@ (80070b0 <MIC_Print+0x338>)
 8006fac:	1c18      	adds	r0, r3, #0
 8006fae:	f7f9 fa8d 	bl	80004cc <__aeabi_fcmplt>
 8006fb2:	1e03      	subs	r3, r0, #0
 8006fb4:	d01b      	beq.n	8006fee <MIC_Print+0x276>
 8006fb6:	4b34      	ldr	r3, [pc, #208]	@ (8007088 <MIC_Print+0x310>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	493e      	ldr	r1, [pc, #248]	@ (80070b4 <MIC_Print+0x33c>)
 8006fbc:	1c18      	adds	r0, r3, #0
 8006fbe:	f7f9 faa3 	bl	8000508 <__aeabi_fcmpge>
 8006fc2:	1e03      	subs	r3, r0, #0
 8006fc4:	d013      	beq.n	8006fee <MIC_Print+0x276>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 1);
 8006fc6:	4b37      	ldr	r3, [pc, #220]	@ (80070a4 <MIC_Print+0x32c>)
 8006fc8:	2201      	movs	r2, #1
 8006fca:	2101      	movs	r1, #1
 8006fcc:	0018      	movs	r0, r3
 8006fce:	f004 fa6e 	bl	800b4ae <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 0);
 8006fd2:	2380      	movs	r3, #128	@ 0x80
 8006fd4:	005b      	lsls	r3, r3, #1
 8006fd6:	4833      	ldr	r0, [pc, #204]	@ (80070a4 <MIC_Print+0x32c>)
 8006fd8:	2200      	movs	r2, #0
 8006fda:	0019      	movs	r1, r3
 8006fdc:	f004 fa67 	bl	800b4ae <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
 8006fe0:	2380      	movs	r3, #128	@ 0x80
 8006fe2:	009b      	lsls	r3, r3, #2
 8006fe4:	482f      	ldr	r0, [pc, #188]	@ (80070a4 <MIC_Print+0x32c>)
 8006fe6:	2201      	movs	r2, #1
 8006fe8:	0019      	movs	r1, r3
 8006fea:	f004 fa60 	bl	800b4ae <HAL_GPIO_WritePin>
  }
  if(dBc < 65 && dBc >= 60){//blue
 8006fee:	4b26      	ldr	r3, [pc, #152]	@ (8007088 <MIC_Print+0x310>)
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	4930      	ldr	r1, [pc, #192]	@ (80070b4 <MIC_Print+0x33c>)
 8006ff4:	1c18      	adds	r0, r3, #0
 8006ff6:	f7f9 fa69 	bl	80004cc <__aeabi_fcmplt>
 8006ffa:	1e03      	subs	r3, r0, #0
 8006ffc:	d01b      	beq.n	8007036 <MIC_Print+0x2be>
 8006ffe:	4b22      	ldr	r3, [pc, #136]	@ (8007088 <MIC_Print+0x310>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	492d      	ldr	r1, [pc, #180]	@ (80070b8 <MIC_Print+0x340>)
 8007004:	1c18      	adds	r0, r3, #0
 8007006:	f7f9 fa7f 	bl	8000508 <__aeabi_fcmpge>
 800700a:	1e03      	subs	r3, r0, #0
 800700c:	d013      	beq.n	8007036 <MIC_Print+0x2be>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 1);
 800700e:	4b25      	ldr	r3, [pc, #148]	@ (80070a4 <MIC_Print+0x32c>)
 8007010:	2201      	movs	r2, #1
 8007012:	2101      	movs	r1, #1
 8007014:	0018      	movs	r0, r3
 8007016:	f004 fa4a 	bl	800b4ae <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
 800701a:	2380      	movs	r3, #128	@ 0x80
 800701c:	005b      	lsls	r3, r3, #1
 800701e:	4821      	ldr	r0, [pc, #132]	@ (80070a4 <MIC_Print+0x32c>)
 8007020:	2201      	movs	r2, #1
 8007022:	0019      	movs	r1, r3
 8007024:	f004 fa43 	bl	800b4ae <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 0);
 8007028:	2380      	movs	r3, #128	@ 0x80
 800702a:	009b      	lsls	r3, r3, #2
 800702c:	481d      	ldr	r0, [pc, #116]	@ (80070a4 <MIC_Print+0x32c>)
 800702e:	2200      	movs	r2, #0
 8007030:	0019      	movs	r1, r3
 8007032:	f004 fa3c 	bl	800b4ae <HAL_GPIO_WritePin>
  }
  if(dBc < 60){//light blue
 8007036:	4b14      	ldr	r3, [pc, #80]	@ (8007088 <MIC_Print+0x310>)
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	491f      	ldr	r1, [pc, #124]	@ (80070b8 <MIC_Print+0x340>)
 800703c:	1c18      	adds	r0, r3, #0
 800703e:	f7f9 fa45 	bl	80004cc <__aeabi_fcmplt>
 8007042:	1e03      	subs	r3, r0, #0
 8007044:	d100      	bne.n	8007048 <MIC_Print+0x2d0>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 0);
  }


  //FFT();
}
 8007046:	e013      	b.n	8007070 <MIC_Print+0x2f8>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 1);
 8007048:	4b16      	ldr	r3, [pc, #88]	@ (80070a4 <MIC_Print+0x32c>)
 800704a:	2201      	movs	r2, #1
 800704c:	2101      	movs	r1, #1
 800704e:	0018      	movs	r0, r3
 8007050:	f004 fa2d 	bl	800b4ae <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 0);
 8007054:	2380      	movs	r3, #128	@ 0x80
 8007056:	005b      	lsls	r3, r3, #1
 8007058:	4812      	ldr	r0, [pc, #72]	@ (80070a4 <MIC_Print+0x32c>)
 800705a:	2200      	movs	r2, #0
 800705c:	0019      	movs	r1, r3
 800705e:	f004 fa26 	bl	800b4ae <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 0);
 8007062:	2380      	movs	r3, #128	@ 0x80
 8007064:	009b      	lsls	r3, r3, #2
 8007066:	480f      	ldr	r0, [pc, #60]	@ (80070a4 <MIC_Print+0x32c>)
 8007068:	2200      	movs	r2, #0
 800706a:	0019      	movs	r1, r3
 800706c:	f004 fa1f 	bl	800b4ae <HAL_GPIO_WritePin>
}
 8007070:	46c0      	nop			@ (mov r8, r8)
 8007072:	46bd      	mov	sp, r7
 8007074:	b003      	add	sp, #12
 8007076:	bd90      	pop	{r4, r7, pc}
 8007078:	0801b2d0 	.word	0x0801b2d0
 800707c:	0801b2cc 	.word	0x0801b2cc
 8007080:	20000e98 	.word	0x20000e98
 8007084:	20001ed4 	.word	0x20001ed4
 8007088:	20001ea0 	.word	0x20001ea0
 800708c:	20001ed0 	.word	0x20001ed0
 8007090:	20001ea4 	.word	0x20001ea4
 8007094:	20001ed1 	.word	0x20001ed1
 8007098:	20001ecc 	.word	0x20001ecc
 800709c:	41200000 	.word	0x41200000
 80070a0:	42aa0000 	.word	0x42aa0000
 80070a4:	50000400 	.word	0x50000400
 80070a8:	42a00000 	.word	0x42a00000
 80070ac:	42960000 	.word	0x42960000
 80070b0:	428c0000 	.word	0x428c0000
 80070b4:	42820000 	.word	0x42820000
 80070b8:	42700000 	.word	0x42700000

080070bc <MIC_MeasurementDone>:

bool MIC_MeasurementDone(void) {
 80070bc:	b580      	push	{r7, lr}
 80070be:	af00      	add	r7, sp, #0
  if(DataReady) {
 80070c0:	4b0c      	ldr	r3, [pc, #48]	@ (80070f4 <MIC_MeasurementDone+0x38>)
 80070c2:	781b      	ldrb	r3, [r3, #0]
 80070c4:	b2db      	uxtb	r3, r3
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d00f      	beq.n	80070ea <MIC_MeasurementDone+0x2e>
    MIC_Print();
 80070ca:	f7ff fe55 	bl	8006d78 <MIC_Print>
    Debug("MIC measurement is done with %i samples.", Samples);
 80070ce:	4b0a      	ldr	r3, [pc, #40]	@ (80070f8 <MIC_MeasurementDone+0x3c>)
 80070d0:	881b      	ldrh	r3, [r3, #0]
 80070d2:	4a0a      	ldr	r2, [pc, #40]	@ (80070fc <MIC_MeasurementDone+0x40>)
 80070d4:	490a      	ldr	r1, [pc, #40]	@ (8007100 <MIC_MeasurementDone+0x44>)
 80070d6:	2003      	movs	r0, #3
 80070d8:	f002 faae 	bl	8009638 <CreateLine>
    TIM2 -> CCR1 = 4000;
 80070dc:	2380      	movs	r3, #128	@ 0x80
 80070de:	05db      	lsls	r3, r3, #23
 80070e0:	22fa      	movs	r2, #250	@ 0xfa
 80070e2:	0112      	lsls	r2, r2, #4
 80070e4:	635a      	str	r2, [r3, #52]	@ 0x34
    return true;
 80070e6:	2301      	movs	r3, #1
 80070e8:	e000      	b.n	80070ec <MIC_MeasurementDone+0x30>
  }
  return false;
 80070ea:	2300      	movs	r3, #0
}
 80070ec:	0018      	movs	r0, r3
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bd80      	pop	{r7, pc}
 80070f2:	46c0      	nop			@ (mov r8, r8)
 80070f4:	20001e9d 	.word	0x20001e9d
 80070f8:	20000074 	.word	0x20000074
 80070fc:	0801b2dc 	.word	0x0801b2dc
 8007100:	0801b2bc 	.word	0x0801b2bc

08007104 <MIC_TestMeasurementDone>:
bool MIC_TestMeasurementDone(void) {
 8007104:	b590      	push	{r4, r7, lr}
 8007106:	b083      	sub	sp, #12
 8007108:	af00      	add	r7, sp, #0
  bool Check;
  if(DataReady) {
 800710a:	4b0b      	ldr	r3, [pc, #44]	@ (8007138 <MIC_TestMeasurementDone+0x34>)
 800710c:	781b      	ldrb	r3, [r3, #0]
 800710e:	b2db      	uxtb	r3, r3
 8007110:	2b00      	cmp	r3, #0
 8007112:	d00c      	beq.n	800712e <MIC_TestMeasurementDone+0x2a>
    Check = MIC_Check();
 8007114:	1dfc      	adds	r4, r7, #7
 8007116:	f7ff fdd9 	bl	8006ccc <MIC_Check>
 800711a:	0003      	movs	r3, r0
 800711c:	7023      	strb	r3, [r4, #0]
    TIM2 -> CCR1 = 4000;
 800711e:	2380      	movs	r3, #128	@ 0x80
 8007120:	05db      	lsls	r3, r3, #23
 8007122:	22fa      	movs	r2, #250	@ 0xfa
 8007124:	0112      	lsls	r2, r2, #4
 8007126:	635a      	str	r2, [r3, #52]	@ 0x34
    return Check;
 8007128:	1dfb      	adds	r3, r7, #7
 800712a:	781b      	ldrb	r3, [r3, #0]
 800712c:	e000      	b.n	8007130 <MIC_TestMeasurementDone+0x2c>
  }
  return false;
 800712e:	2300      	movs	r3, #0
}
 8007130:	0018      	movs	r0, r3
 8007132:	46bd      	mov	sp, r7
 8007134:	b003      	add	sp, #12
 8007136:	bd90      	pop	{r4, r7, pc}
 8007138:	20001e9d 	.word	0x20001e9d

0800713c <HAL_I2S_RxCpltCallback>:


// #TODO Also include half full callback
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef* hi2s) {
 800713c:	b580      	push	{r7, lr}
 800713e:	b082      	sub	sp, #8
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
  if (hi2s != I2SHandle)
 8007144:	4b10      	ldr	r3, [pc, #64]	@ (8007188 <HAL_I2S_RxCpltCallback+0x4c>)
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	687a      	ldr	r2, [r7, #4]
 800714a:	429a      	cmp	r2, r3
 800714c:	d118      	bne.n	8007180 <HAL_I2S_RxCpltCallback+0x44>
    return;

  if (StartUpDone) {
 800714e:	4b0f      	ldr	r3, [pc, #60]	@ (800718c <HAL_I2S_RxCpltCallback+0x50>)
 8007150:	781b      	ldrb	r3, [r3, #0]
 8007152:	b2db      	uxtb	r3, r3
 8007154:	2b00      	cmp	r3, #0
 8007156:	d008      	beq.n	800716a <HAL_I2S_RxCpltCallback+0x2e>
    HAL_I2S_DMAStop(I2SHandle);
 8007158:	4b0b      	ldr	r3, [pc, #44]	@ (8007188 <HAL_I2S_RxCpltCallback+0x4c>)
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	0018      	movs	r0, r3
 800715e:	f006 fbb3 	bl	800d8c8 <HAL_I2S_DMAStop>
    DataReady = true;
 8007162:	4b0b      	ldr	r3, [pc, #44]	@ (8007190 <HAL_I2S_RxCpltCallback+0x54>)
 8007164:	2201      	movs	r2, #1
 8007166:	701a      	strb	r2, [r3, #0]
 8007168:	e00b      	b.n	8007182 <HAL_I2S_RxCpltCallback+0x46>
    // MIC trigger pin is used to debug when the measurement has started.
//    HAL_GPIO_WritePin(MIC_Trigger_GPIO_Port, MIC_Trigger_Pin, GPIO_PIN_RESET);
    // TODO: Use different pin for MIC_Trigger.
  } else if (TimestampIsReached(StartupDoneTime)) {
 800716a:	4b0a      	ldr	r3, [pc, #40]	@ (8007194 <HAL_I2S_RxCpltCallback+0x58>)
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	0018      	movs	r0, r3
 8007170:	f002 fa0c 	bl	800958c <TimestampIsReached>
 8007174:	1e03      	subs	r3, r0, #0
 8007176:	d004      	beq.n	8007182 <HAL_I2S_RxCpltCallback+0x46>
    StartUpDone = true;
 8007178:	4b04      	ldr	r3, [pc, #16]	@ (800718c <HAL_I2S_RxCpltCallback+0x50>)
 800717a:	2201      	movs	r2, #1
 800717c:	701a      	strb	r2, [r3, #0]
 800717e:	e000      	b.n	8007182 <HAL_I2S_RxCpltCallback+0x46>
    return;
 8007180:	46c0      	nop			@ (mov r8, r8)
//    HAL_GPIO_WritePin(MIC_Trigger_GPIO_Port, MIC_Trigger_Pin, GPIO_PIN_SET);
  }
}
 8007182:	46bd      	mov	sp, r7
 8007184:	b002      	add	sp, #8
 8007186:	bd80      	pop	{r7, pc}
 8007188:	20000e94 	.word	0x20000e94
 800718c:	20001e9c 	.word	0x20001e9c
 8007190:	20001e9d 	.word	0x20001e9d
 8007194:	20001e98 	.word	0x20001e98

08007198 <MIC_GetDB>:

float MIC_GetDB(void) {
 8007198:	b590      	push	{r4, r7, lr}
 800719a:	b085      	sub	sp, #20
 800719c:	af00      	add	r7, sp, #0
    float sum = 0.0f;
 800719e:	2300      	movs	r3, #0
 80071a0:	60fb      	str	r3, [r7, #12]
    float dBValue = 0.0f;
 80071a2:	2300      	movs	r3, #0
 80071a4:	607b      	str	r3, [r7, #4]

    // Calculate the sum of the magnitudes in FFTResult
    for (uint16_t i = NUMBER_OF_SAMPLES/2; i < NUMBER_OF_SAMPLES; i++) {
 80071a6:	230a      	movs	r3, #10
 80071a8:	18fb      	adds	r3, r7, r3
 80071aa:	2280      	movs	r2, #128	@ 0x80
 80071ac:	0052      	lsls	r2, r2, #1
 80071ae:	801a      	strh	r2, [r3, #0]
 80071b0:	e019      	b.n	80071e6 <MIC_GetDB+0x4e>
      // Sum of squares of magnitudes
      sum += sample[i]*sample[i];
 80071b2:	240a      	movs	r4, #10
 80071b4:	193b      	adds	r3, r7, r4
 80071b6:	881a      	ldrh	r2, [r3, #0]
 80071b8:	4b2b      	ldr	r3, [pc, #172]	@ (8007268 <MIC_GetDB+0xd0>)
 80071ba:	0092      	lsls	r2, r2, #2
 80071bc:	58d0      	ldr	r0, [r2, r3]
 80071be:	193b      	adds	r3, r7, r4
 80071c0:	881a      	ldrh	r2, [r3, #0]
 80071c2:	4b29      	ldr	r3, [pc, #164]	@ (8007268 <MIC_GetDB+0xd0>)
 80071c4:	0092      	lsls	r2, r2, #2
 80071c6:	58d3      	ldr	r3, [r2, r3]
 80071c8:	1c19      	adds	r1, r3, #0
 80071ca:	f7f9 fe67 	bl	8000e9c <__aeabi_fmul>
 80071ce:	1c03      	adds	r3, r0, #0
 80071d0:	1c19      	adds	r1, r3, #0
 80071d2:	68f8      	ldr	r0, [r7, #12]
 80071d4:	f7f9 faf2 	bl	80007bc <__aeabi_fadd>
 80071d8:	1c03      	adds	r3, r0, #0
 80071da:	60fb      	str	r3, [r7, #12]
    for (uint16_t i = NUMBER_OF_SAMPLES/2; i < NUMBER_OF_SAMPLES; i++) {
 80071dc:	193b      	adds	r3, r7, r4
 80071de:	881a      	ldrh	r2, [r3, #0]
 80071e0:	193b      	adds	r3, r7, r4
 80071e2:	3201      	adds	r2, #1
 80071e4:	801a      	strh	r2, [r3, #0]
 80071e6:	230a      	movs	r3, #10
 80071e8:	18fb      	adds	r3, r7, r3
 80071ea:	881a      	ldrh	r2, [r3, #0]
 80071ec:	2380      	movs	r3, #128	@ 0x80
 80071ee:	009b      	lsls	r3, r3, #2
 80071f0:	429a      	cmp	r2, r3
 80071f2:	d3de      	bcc.n	80071b2 <MIC_GetDB+0x1a>
    }

    // Calculate the root mean square (RMS)
    float rms = sqrt(sum/(float)(NUMBER_OF_SAMPLES/2));
 80071f4:	2187      	movs	r1, #135	@ 0x87
 80071f6:	05c9      	lsls	r1, r1, #23
 80071f8:	68f8      	ldr	r0, [r7, #12]
 80071fa:	f7f9 fc69 	bl	8000ad0 <__aeabi_fdiv>
 80071fe:	1c03      	adds	r3, r0, #0
 8007200:	1c18      	adds	r0, r3, #0
 8007202:	f7fc f8ad 	bl	8003360 <__aeabi_f2d>
 8007206:	0002      	movs	r2, r0
 8007208:	000b      	movs	r3, r1
 800720a:	0010      	movs	r0, r2
 800720c:	0019      	movs	r1, r3
 800720e:	f012 ffff 	bl	801a210 <sqrt>
 8007212:	0002      	movs	r2, r0
 8007214:	000b      	movs	r3, r1
 8007216:	0010      	movs	r0, r2
 8007218:	0019      	movs	r1, r3
 800721a:	f7fc f8e9 	bl	80033f0 <__aeabi_d2f>
 800721e:	1c03      	adds	r3, r0, #0
 8007220:	603b      	str	r3, [r7, #0]

    // Convert the RMS value to dB
    dBValue = 20.0f * log10(rms) +120.0;
 8007222:	6838      	ldr	r0, [r7, #0]
 8007224:	f7fc f89c 	bl	8003360 <__aeabi_f2d>
 8007228:	0002      	movs	r2, r0
 800722a:	000b      	movs	r3, r1
 800722c:	0010      	movs	r0, r2
 800722e:	0019      	movs	r1, r3
 8007230:	f012 ffb8 	bl	801a1a4 <log10>
 8007234:	2200      	movs	r2, #0
 8007236:	4b0d      	ldr	r3, [pc, #52]	@ (800726c <MIC_GetDB+0xd4>)
 8007238:	f7fb f97e 	bl	8002538 <__aeabi_dmul>
 800723c:	0002      	movs	r2, r0
 800723e:	000b      	movs	r3, r1
 8007240:	0010      	movs	r0, r2
 8007242:	0019      	movs	r1, r3
 8007244:	2200      	movs	r2, #0
 8007246:	4b0a      	ldr	r3, [pc, #40]	@ (8007270 <MIC_GetDB+0xd8>)
 8007248:	f7fa f9ce 	bl	80015e8 <__aeabi_dadd>
 800724c:	0002      	movs	r2, r0
 800724e:	000b      	movs	r3, r1
 8007250:	0010      	movs	r0, r2
 8007252:	0019      	movs	r1, r3
 8007254:	f7fc f8cc 	bl	80033f0 <__aeabi_d2f>
 8007258:	1c03      	adds	r3, r0, #0
 800725a:	607b      	str	r3, [r7, #4]

    return dBValue;
 800725c:	687b      	ldr	r3, [r7, #4]
}
 800725e:	1c18      	adds	r0, r3, #0
 8007260:	46bd      	mov	sp, r7
 8007262:	b005      	add	sp, #20
 8007264:	bd90      	pop	{r4, r7, pc}
 8007266:	46c0      	nop			@ (mov r8, r8)
 8007268:	20001ed4 	.word	0x20001ed4
 800726c:	40340000 	.word	0x40340000
 8007270:	405e0000 	.word	0x405e0000

08007274 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8007274:	b580      	push	{r7, lr}
 8007276:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8007278:	4b16      	ldr	r3, [pc, #88]	@ (80072d4 <MX_RTC_Init+0x60>)
 800727a:	4a17      	ldr	r2, [pc, #92]	@ (80072d8 <MX_RTC_Init+0x64>)
 800727c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800727e:	4b15      	ldr	r3, [pc, #84]	@ (80072d4 <MX_RTC_Init+0x60>)
 8007280:	2200      	movs	r2, #0
 8007282:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8007284:	4b13      	ldr	r3, [pc, #76]	@ (80072d4 <MX_RTC_Init+0x60>)
 8007286:	227f      	movs	r2, #127	@ 0x7f
 8007288:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800728a:	4b12      	ldr	r3, [pc, #72]	@ (80072d4 <MX_RTC_Init+0x60>)
 800728c:	22ff      	movs	r2, #255	@ 0xff
 800728e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8007290:	4b10      	ldr	r3, [pc, #64]	@ (80072d4 <MX_RTC_Init+0x60>)
 8007292:	2200      	movs	r2, #0
 8007294:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8007296:	4b0f      	ldr	r3, [pc, #60]	@ (80072d4 <MX_RTC_Init+0x60>)
 8007298:	2200      	movs	r2, #0
 800729a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800729c:	4b0d      	ldr	r3, [pc, #52]	@ (80072d4 <MX_RTC_Init+0x60>)
 800729e:	2200      	movs	r2, #0
 80072a0:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80072a2:	4b0c      	ldr	r3, [pc, #48]	@ (80072d4 <MX_RTC_Init+0x60>)
 80072a4:	2200      	movs	r2, #0
 80072a6:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80072a8:	4b0a      	ldr	r3, [pc, #40]	@ (80072d4 <MX_RTC_Init+0x60>)
 80072aa:	0018      	movs	r0, r3
 80072ac:	f009 fa2e 	bl	801070c <HAL_RTC_Init>
 80072b0:	1e03      	subs	r3, r0, #0
 80072b2:	d001      	beq.n	80072b8 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 80072b4:	f7ff f832 	bl	800631c <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 80072b8:	4b06      	ldr	r3, [pc, #24]	@ (80072d4 <MX_RTC_Init+0x60>)
 80072ba:	2200      	movs	r2, #0
 80072bc:	2100      	movs	r1, #0
 80072be:	0018      	movs	r0, r3
 80072c0:	f009 fb56 	bl	8010970 <HAL_RTCEx_SetWakeUpTimer>
 80072c4:	1e03      	subs	r3, r0, #0
 80072c6:	d001      	beq.n	80072cc <MX_RTC_Init+0x58>
  {
    Error_Handler();
 80072c8:	f7ff f828 	bl	800631c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80072cc:	46c0      	nop			@ (mov r8, r8)
 80072ce:	46bd      	mov	sp, r7
 80072d0:	bd80      	pop	{r7, pc}
 80072d2:	46c0      	nop			@ (mov r8, r8)
 80072d4:	200026d4 	.word	0x200026d4
 80072d8:	40002800 	.word	0x40002800

080072dc <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b082      	sub	sp, #8
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	4a06      	ldr	r2, [pc, #24]	@ (8007304 <HAL_RTC_MspInit+0x28>)
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d106      	bne.n	80072fc <HAL_RTC_MspInit+0x20>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80072ee:	4b06      	ldr	r3, [pc, #24]	@ (8007308 <HAL_RTC_MspInit+0x2c>)
 80072f0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80072f2:	4b05      	ldr	r3, [pc, #20]	@ (8007308 <HAL_RTC_MspInit+0x2c>)
 80072f4:	2180      	movs	r1, #128	@ 0x80
 80072f6:	02c9      	lsls	r1, r1, #11
 80072f8:	430a      	orrs	r2, r1
 80072fa:	651a      	str	r2, [r3, #80]	@ 0x50
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80072fc:	46c0      	nop			@ (mov r8, r8)
 80072fe:	46bd      	mov	sp, r7
 8007300:	b002      	add	sp, #8
 8007302:	bd80      	pop	{r7, pc}
 8007304:	40002800 	.word	0x40002800
 8007308:	40021000 	.word	0x40021000

0800730c <GasIndexAlgorithm_init_with_sampling_interval>:
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample);

void GasIndexAlgorithm_init_with_sampling_interval(
    GasIndexAlgorithmParams* params, int32_t algorithm_type,
    float sampling_interval) {
 800730c:	b580      	push	{r7, lr}
 800730e:	b084      	sub	sp, #16
 8007310:	af00      	add	r7, sp, #0
 8007312:	60f8      	str	r0, [r7, #12]
 8007314:	60b9      	str	r1, [r7, #8]
 8007316:	607a      	str	r2, [r7, #4]
    params->mAlgorithm_Type = algorithm_type;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	68ba      	ldr	r2, [r7, #8]
 800731c:	601a      	str	r2, [r3, #0]
    params->mSamplingInterval = sampling_interval;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	687a      	ldr	r2, [r7, #4]
 8007322:	605a      	str	r2, [r3, #4]
    if ((algorithm_type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 8007324:	68bb      	ldr	r3, [r7, #8]
 8007326:	2b01      	cmp	r3, #1
 8007328:	d113      	bne.n	8007352 <GasIndexAlgorithm_init_with_sampling_interval+0x46>
        params->mIndex_Offset = GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	22fe      	movs	r2, #254	@ 0xfe
 800732e:	0592      	lsls	r2, r2, #22
 8007330:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_NOX_SRAW_MINIMUM;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	4a1a      	ldr	r2, [pc, #104]	@ (80073a0 <GasIndexAlgorithm_init_with_sampling_interval+0x94>)
 8007336:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	4a1a      	ldr	r2, [pc, #104]	@ (80073a4 <GasIndexAlgorithm_init_with_sampling_interval+0x98>)
 800733c:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_NOX_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_NOX;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	4a19      	ldr	r2, [pc, #100]	@ (80073a8 <GasIndexAlgorithm_init_with_sampling_interval+0x9c>)
 8007342:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	4a19      	ldr	r2, [pc, #100]	@ (80073ac <GasIndexAlgorithm_init_with_sampling_interval+0xa0>)
 8007348:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_NOX;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_NOX;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	4a18      	ldr	r2, [pc, #96]	@ (80073b0 <GasIndexAlgorithm_init_with_sampling_interval+0xa4>)
 800734e:	61da      	str	r2, [r3, #28]
 8007350:	e011      	b.n	8007376 <GasIndexAlgorithm_init_with_sampling_interval+0x6a>
    } else {
        params->mIndex_Offset = GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	4a17      	ldr	r2, [pc, #92]	@ (80073b4 <GasIndexAlgorithm_init_with_sampling_interval+0xa8>)
 8007356:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_VOC_SRAW_MINIMUM;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	4a17      	ldr	r2, [pc, #92]	@ (80073b8 <GasIndexAlgorithm_init_with_sampling_interval+0xac>)
 800735c:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	4a16      	ldr	r2, [pc, #88]	@ (80073bc <GasIndexAlgorithm_init_with_sampling_interval+0xb0>)
 8007362:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_VOC_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_VOC;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	4a16      	ldr	r2, [pc, #88]	@ (80073c0 <GasIndexAlgorithm_init_with_sampling_interval+0xb4>)
 8007368:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	4a15      	ldr	r2, [pc, #84]	@ (80073c4 <GasIndexAlgorithm_init_with_sampling_interval+0xb8>)
 800736e:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_VOC;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_VOC;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	4a15      	ldr	r2, [pc, #84]	@ (80073c8 <GasIndexAlgorithm_init_with_sampling_interval+0xbc>)
 8007374:	61da      	str	r2, [r3, #28]
    }
    params->mIndex_Gain = GasIndexAlgorithm_INDEX_GAIN;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	4a14      	ldr	r2, [pc, #80]	@ (80073cc <GasIndexAlgorithm_init_with_sampling_interval+0xc0>)
 800737a:	621a      	str	r2, [r3, #32]
    params->mTau_Mean_Hours = GasIndexAlgorithm_TAU_MEAN_HOURS;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	4a14      	ldr	r2, [pc, #80]	@ (80073d0 <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 8007380:	625a      	str	r2, [r3, #36]	@ 0x24
    params->mTau_Variance_Hours = GasIndexAlgorithm_TAU_VARIANCE_HOURS;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	4a12      	ldr	r2, [pc, #72]	@ (80073d0 <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 8007386:	629a      	str	r2, [r3, #40]	@ 0x28
    params->mSraw_Std_Initial = GasIndexAlgorithm_SRAW_STD_INITIAL;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	4a12      	ldr	r2, [pc, #72]	@ (80073d4 <GasIndexAlgorithm_init_with_sampling_interval+0xc8>)
 800738c:	62da      	str	r2, [r3, #44]	@ 0x2c
    GasIndexAlgorithm_reset(params);
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	0018      	movs	r0, r3
 8007392:	f000 f831 	bl	80073f8 <GasIndexAlgorithm_reset>
}
 8007396:	46c0      	nop			@ (mov r8, r8)
 8007398:	46bd      	mov	sp, r7
 800739a:	b004      	add	sp, #16
 800739c:	bd80      	pop	{r7, pc}
 800739e:	46c0      	nop			@ (mov r8, r8)
 80073a0:	00002710 	.word	0x00002710
 80073a4:	44340000 	.word	0x44340000
 80073a8:	46859800 	.word	0x46859800
 80073ac:	46a05000 	.word	0x46a05000
 80073b0:	41f00000 	.word	0x41f00000
 80073b4:	42c80000 	.word	0x42c80000
 80073b8:	00004e20 	.word	0x00004e20
 80073bc:	43340000 	.word	0x43340000
 80073c0:	4528c000 	.word	0x4528c000
 80073c4:	45a32000 	.word	0x45a32000
 80073c8:	43aa0000 	.word	0x43aa0000
 80073cc:	43660000 	.word	0x43660000
 80073d0:	41400000 	.word	0x41400000
 80073d4:	42480000 	.word	0x42480000

080073d8 <GasIndexAlgorithm_init>:

void GasIndexAlgorithm_init(GasIndexAlgorithmParams* params,
                            int32_t algorithm_type) {
 80073d8:	b580      	push	{r7, lr}
 80073da:	b082      	sub	sp, #8
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
 80073e0:	6039      	str	r1, [r7, #0]
    GasIndexAlgorithm_init_with_sampling_interval(
 80073e2:	22fe      	movs	r2, #254	@ 0xfe
 80073e4:	0592      	lsls	r2, r2, #22
 80073e6:	6839      	ldr	r1, [r7, #0]
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	0018      	movs	r0, r3
 80073ec:	f7ff ff8e 	bl	800730c <GasIndexAlgorithm_init_with_sampling_interval>
        params, algorithm_type, GasIndexAlgorithm_DEFAULT_SAMPLING_INTERVAL);
}
 80073f0:	46c0      	nop			@ (mov r8, r8)
 80073f2:	46bd      	mov	sp, r7
 80073f4:	b002      	add	sp, #8
 80073f6:	bd80      	pop	{r7, pc}

080073f8 <GasIndexAlgorithm_reset>:

void GasIndexAlgorithm_reset(GasIndexAlgorithmParams* params) {
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b082      	sub	sp, #8
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
    params->mUptime = 0.f;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2200      	movs	r2, #0
 8007404:	631a      	str	r2, [r3, #48]	@ 0x30
    params->mSraw = 0.f;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2200      	movs	r2, #0
 800740a:	635a      	str	r2, [r3, #52]	@ 0x34
    params->mGas_Index = 0;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2200      	movs	r2, #0
 8007410:	639a      	str	r2, [r3, #56]	@ 0x38
    GasIndexAlgorithm__init_instances(params);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	0018      	movs	r0, r3
 8007416:	f000 f805 	bl	8007424 <GasIndexAlgorithm__init_instances>
}
 800741a:	46c0      	nop			@ (mov r8, r8)
 800741c:	46bd      	mov	sp, r7
 800741e:	b002      	add	sp, #8
 8007420:	bd80      	pop	{r7, pc}
	...

08007424 <GasIndexAlgorithm__init_instances>:

static void GasIndexAlgorithm__init_instances(GasIndexAlgorithmParams* params) {
 8007424:	b590      	push	{r4, r7, lr}
 8007426:	b083      	sub	sp, #12
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]

    GasIndexAlgorithm__mean_variance_estimator__set_parameters(params);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	0018      	movs	r0, r3
 8007430:	f000 f8e8 	bl	8007604 <GasIndexAlgorithm__mean_variance_estimator__set_parameters>
    GasIndexAlgorithm__mox_model__set_parameters(
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	0018      	movs	r0, r3
 8007438:	f000 f9a6 	bl	8007788 <GasIndexAlgorithm__mean_variance_estimator__get_std>
 800743c:	1c04      	adds	r4, r0, #0
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	0018      	movs	r0, r3
 8007442:	f000 f9ab 	bl	800779c <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 8007446:	1c02      	adds	r2, r0, #0
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	1c21      	adds	r1, r4, #0
 800744c:	0018      	movs	r0, r3
 800744e:	f000 fc3b 	bl	8007cc8 <GasIndexAlgorithm__mox_model__set_parameters>
        params, GasIndexAlgorithm__mean_variance_estimator__get_std(params),
        GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	2b01      	cmp	r3, #1
 8007458:	d107      	bne.n	800746a <GasIndexAlgorithm__init_instances+0x46>
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 800745a:	23fe      	movs	r3, #254	@ 0xfe
 800745c:	059b      	lsls	r3, r3, #22
 800745e:	4a0a      	ldr	r2, [pc, #40]	@ (8007488 <GasIndexAlgorithm__init_instances+0x64>)
 8007460:	490a      	ldr	r1, [pc, #40]	@ (800748c <GasIndexAlgorithm__init_instances+0x68>)
 8007462:	6878      	ldr	r0, [r7, #4]
 8007464:	f000 fc86 	bl	8007d74 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
 8007468:	e005      	b.n	8007476 <GasIndexAlgorithm__init_instances+0x52>
            params, GasIndexAlgorithm_SIGMOID_X0_NOX,
            GasIndexAlgorithm_SIGMOID_K_NOX,
            GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT);
    } else {
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 800746a:	4b09      	ldr	r3, [pc, #36]	@ (8007490 <GasIndexAlgorithm__init_instances+0x6c>)
 800746c:	4a09      	ldr	r2, [pc, #36]	@ (8007494 <GasIndexAlgorithm__init_instances+0x70>)
 800746e:	490a      	ldr	r1, [pc, #40]	@ (8007498 <GasIndexAlgorithm__init_instances+0x74>)
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f000 fc7f 	bl	8007d74 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
            params, GasIndexAlgorithm_SIGMOID_X0_VOC,
            GasIndexAlgorithm_SIGMOID_K_VOC,
            GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT);
    }
    GasIndexAlgorithm__adaptive_lowpass__set_parameters(params);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	0018      	movs	r0, r3
 800747a:	f000 fd35 	bl	8007ee8 <GasIndexAlgorithm__adaptive_lowpass__set_parameters>
}
 800747e:	46c0      	nop			@ (mov r8, r8)
 8007480:	46bd      	mov	sp, r7
 8007482:	b003      	add	sp, #12
 8007484:	bd90      	pop	{r4, r7, pc}
 8007486:	46c0      	nop			@ (mov r8, r8)
 8007488:	bc257a78 	.word	0xbc257a78
 800748c:	44198000 	.word	0x44198000
 8007490:	42c80000 	.word	0x42c80000
 8007494:	bbd4fdf4 	.word	0xbbd4fdf4
 8007498:	43550000 	.word	0x43550000

0800749c <GasIndexAlgorithm_process>:
    *gain_factor = ((int32_t)(params->mIndex_Gain));
    return;
}

void GasIndexAlgorithm_process(GasIndexAlgorithmParams* params, int32_t sraw,
                               int32_t* gas_index) {
 800749c:	b590      	push	{r4, r7, lr}
 800749e:	b085      	sub	sp, #20
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	60f8      	str	r0, [r7, #12]
 80074a4:	60b9      	str	r1, [r7, #8]
 80074a6:	607a      	str	r2, [r7, #4]

    if ((params->mUptime <= GasIndexAlgorithm_INITIAL_BLACKOUT)) {
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074ac:	4952      	ldr	r1, [pc, #328]	@ (80075f8 <GasIndexAlgorithm_process+0x15c>)
 80074ae:	1c18      	adds	r0, r3, #0
 80074b0:	f7f9 f816 	bl	80004e0 <__aeabi_fcmple>
 80074b4:	1e03      	subs	r3, r0, #0
 80074b6:	d00c      	beq.n	80074d2 <GasIndexAlgorithm_process+0x36>
        params->mUptime = (params->mUptime + params->mSamplingInterval);
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	685b      	ldr	r3, [r3, #4]
 80074c0:	1c19      	adds	r1, r3, #0
 80074c2:	1c10      	adds	r0, r2, #0
 80074c4:	f7f9 f97a 	bl	80007bc <__aeabi_fadd>
 80074c8:	1c03      	adds	r3, r0, #0
 80074ca:	1c1a      	adds	r2, r3, #0
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	631a      	str	r2, [r3, #48]	@ 0x30
 80074d0:	e080      	b.n	80075d4 <GasIndexAlgorithm_process+0x138>
    } else {
        if (((sraw > 0) && (sraw < 65000))) {
 80074d2:	68bb      	ldr	r3, [r7, #8]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	dd25      	ble.n	8007524 <GasIndexAlgorithm_process+0x88>
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	4a48      	ldr	r2, [pc, #288]	@ (80075fc <GasIndexAlgorithm_process+0x160>)
 80074dc:	4293      	cmp	r3, r2
 80074de:	dc21      	bgt.n	8007524 <GasIndexAlgorithm_process+0x88>
            if ((sraw < (params->mSraw_Minimum + 1))) {
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	68db      	ldr	r3, [r3, #12]
 80074e4:	68ba      	ldr	r2, [r7, #8]
 80074e6:	429a      	cmp	r2, r3
 80074e8:	dc04      	bgt.n	80074f4 <GasIndexAlgorithm_process+0x58>
                sraw = (params->mSraw_Minimum + 1);
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	68db      	ldr	r3, [r3, #12]
 80074ee:	3301      	adds	r3, #1
 80074f0:	60bb      	str	r3, [r7, #8]
 80074f2:	e00d      	b.n	8007510 <GasIndexAlgorithm_process+0x74>
            } else if ((sraw > (params->mSraw_Minimum + 32767))) {
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	68db      	ldr	r3, [r3, #12]
 80074f8:	4a41      	ldr	r2, [pc, #260]	@ (8007600 <GasIndexAlgorithm_process+0x164>)
 80074fa:	4694      	mov	ip, r2
 80074fc:	4463      	add	r3, ip
 80074fe:	68ba      	ldr	r2, [r7, #8]
 8007500:	429a      	cmp	r2, r3
 8007502:	dd05      	ble.n	8007510 <GasIndexAlgorithm_process+0x74>
                sraw = (params->mSraw_Minimum + 32767);
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	68db      	ldr	r3, [r3, #12]
 8007508:	4a3d      	ldr	r2, [pc, #244]	@ (8007600 <GasIndexAlgorithm_process+0x164>)
 800750a:	4694      	mov	ip, r2
 800750c:	4463      	add	r3, ip
 800750e:	60bb      	str	r3, [r7, #8]
            }
            params->mSraw = ((float)((sraw - params->mSraw_Minimum)));
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	68db      	ldr	r3, [r3, #12]
 8007514:	68ba      	ldr	r2, [r7, #8]
 8007516:	1ad3      	subs	r3, r2, r3
 8007518:	0018      	movs	r0, r3
 800751a:	f7f9 ffd7 	bl	80014cc <__aeabi_i2f>
 800751e:	1c02      	adds	r2, r0, #0
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	635a      	str	r2, [r3, #52]	@ 0x34
        }
        if (((params->mAlgorithm_Type ==
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d005      	beq.n	8007538 <GasIndexAlgorithm_process+0x9c>
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
             GasIndexAlgorithm__mean_variance_estimator__is_initialized(
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	0018      	movs	r0, r3
 8007530:	f000 f945 	bl	80077be <GasIndexAlgorithm__mean_variance_estimator__is_initialized>
 8007534:	1e03      	subs	r3, r0, #0
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
 8007536:	d014      	beq.n	8007562 <GasIndexAlgorithm_process+0xc6>
                 params))) {
            params->mGas_Index =
                GasIndexAlgorithm__mox_model__process(params, params->mSraw);
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	1c11      	adds	r1, r2, #0
 8007540:	0018      	movs	r0, r3
 8007542:	f000 fbd1 	bl	8007ce8 <GasIndexAlgorithm__mox_model__process>
 8007546:	1c02      	adds	r2, r0, #0
            params->mGas_Index =
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	639a      	str	r2, [r3, #56]	@ 0x38
            params->mGas_Index = GasIndexAlgorithm__sigmoid_scaled__process(
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	1c11      	adds	r1, r2, #0
 8007554:	0018      	movs	r0, r3
 8007556:	f000 fc25 	bl	8007da4 <GasIndexAlgorithm__sigmoid_scaled__process>
 800755a:	1c02      	adds	r2, r0, #0
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	639a      	str	r2, [r3, #56]	@ 0x38
 8007560:	e003      	b.n	800756a <GasIndexAlgorithm_process+0xce>
                params, params->mGas_Index);
        } else {
            params->mGas_Index = params->mIndex_Offset;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	689a      	ldr	r2, [r3, #8]
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        params->mGas_Index = GasIndexAlgorithm__adaptive_lowpass__process(
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	1c11      	adds	r1, r2, #0
 8007572:	0018      	movs	r0, r3
 8007574:	f000 fcec 	bl	8007f50 <GasIndexAlgorithm__adaptive_lowpass__process>
 8007578:	1c02      	adds	r2, r0, #0
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	639a      	str	r2, [r3, #56]	@ 0x38
            params, params->mGas_Index);
        if ((params->mGas_Index < 0.5f)) {
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007582:	21fc      	movs	r1, #252	@ 0xfc
 8007584:	0589      	lsls	r1, r1, #22
 8007586:	1c18      	adds	r0, r3, #0
 8007588:	f7f8 ffa0 	bl	80004cc <__aeabi_fcmplt>
 800758c:	1e03      	subs	r3, r0, #0
 800758e:	d003      	beq.n	8007598 <GasIndexAlgorithm_process+0xfc>
            params->mGas_Index = 0.5f;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	22fc      	movs	r2, #252	@ 0xfc
 8007594:	0592      	lsls	r2, r2, #22
 8007596:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        if ((params->mSraw > 0.f)) {
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800759c:	2100      	movs	r1, #0
 800759e:	1c18      	adds	r0, r3, #0
 80075a0:	f7f8 ffa8 	bl	80004f4 <__aeabi_fcmpgt>
 80075a4:	1e03      	subs	r3, r0, #0
 80075a6:	d015      	beq.n	80075d4 <GasIndexAlgorithm_process+0x138>
            GasIndexAlgorithm__mean_variance_estimator__process(params,
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	1c11      	adds	r1, r2, #0
 80075b0:	0018      	movs	r0, r3
 80075b2:	f000 fa4f 	bl	8007a54 <GasIndexAlgorithm__mean_variance_estimator__process>
                                                                params->mSraw);
            GasIndexAlgorithm__mox_model__set_parameters(
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	0018      	movs	r0, r3
 80075ba:	f000 f8e5 	bl	8007788 <GasIndexAlgorithm__mean_variance_estimator__get_std>
 80075be:	1c04      	adds	r4, r0, #0
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	0018      	movs	r0, r3
 80075c4:	f000 f8ea 	bl	800779c <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 80075c8:	1c02      	adds	r2, r0, #0
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	1c21      	adds	r1, r4, #0
 80075ce:	0018      	movs	r0, r3
 80075d0:	f000 fb7a 	bl	8007cc8 <GasIndexAlgorithm__mox_model__set_parameters>
                params,
                GasIndexAlgorithm__mean_variance_estimator__get_std(params),
                GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
        }
    }
    *gas_index = ((int32_t)((params->mGas_Index + 0.5f)));
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075d8:	21fc      	movs	r1, #252	@ 0xfc
 80075da:	0589      	lsls	r1, r1, #22
 80075dc:	1c18      	adds	r0, r3, #0
 80075de:	f7f9 f8ed 	bl	80007bc <__aeabi_fadd>
 80075e2:	1c03      	adds	r3, r0, #0
 80075e4:	1c18      	adds	r0, r3, #0
 80075e6:	f7f9 ff51 	bl	800148c <__aeabi_f2iz>
 80075ea:	0002      	movs	r2, r0
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	601a      	str	r2, [r3, #0]
    return;
 80075f0:	46c0      	nop			@ (mov r8, r8)
}
 80075f2:	46bd      	mov	sp, r7
 80075f4:	b005      	add	sp, #20
 80075f6:	bd90      	pop	{r4, r7, pc}
 80075f8:	42340000 	.word	0x42340000
 80075fc:	0000fde7 	.word	0x0000fde7
 8007600:	00007fff 	.word	0x00007fff

08007604 <GasIndexAlgorithm__mean_variance_estimator__set_parameters>:

static void GasIndexAlgorithm__mean_variance_estimator__set_parameters(
    GasIndexAlgorithmParams* params) {
 8007604:	b5b0      	push	{r4, r5, r7, lr}
 8007606:	b082      	sub	sp, #8
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]

    params->m_Mean_Variance_Estimator___Initialized = false;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	223c      	movs	r2, #60	@ 0x3c
 8007610:	2100      	movs	r1, #0
 8007612:	5499      	strb	r1, [r3, r2]
    params->m_Mean_Variance_Estimator___Mean = 0.f;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2200      	movs	r2, #0
 8007618:	641a      	str	r2, [r3, #64]	@ 0x40
    params->m_Mean_Variance_Estimator___Sraw_Offset = 0.f;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2200      	movs	r2, #0
 800761e:	645a      	str	r2, [r3, #68]	@ 0x44
    params->m_Mean_Variance_Estimator___Std = params->mSraw_Std_Initial;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	649a      	str	r2, [r3, #72]	@ 0x48
    params->m_Mean_Variance_Estimator___Gamma_Mean =
        (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
          (params->mSamplingInterval / 3600.f)) /
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	685b      	ldr	r3, [r3, #4]
 800762c:	4952      	ldr	r1, [pc, #328]	@ (8007778 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800762e:	1c18      	adds	r0, r3, #0
 8007630:	f7f9 fa4e 	bl	8000ad0 <__aeabi_fdiv>
 8007634:	1c03      	adds	r3, r0, #0
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 8007636:	2188      	movs	r1, #136	@ 0x88
 8007638:	05c9      	lsls	r1, r1, #23
 800763a:	1c18      	adds	r0, r3, #0
 800763c:	f7f9 fc2e 	bl	8000e9c <__aeabi_fmul>
 8007640:	1c03      	adds	r3, r0, #0
 8007642:	1c1d      	adds	r5, r3, #0
         (params->mTau_Mean_Hours + (params->mSamplingInterval / 3600.f)));
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	685b      	ldr	r3, [r3, #4]
 800764c:	494a      	ldr	r1, [pc, #296]	@ (8007778 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800764e:	1c18      	adds	r0, r3, #0
 8007650:	f7f9 fa3e 	bl	8000ad0 <__aeabi_fdiv>
 8007654:	1c03      	adds	r3, r0, #0
 8007656:	1c19      	adds	r1, r3, #0
 8007658:	1c20      	adds	r0, r4, #0
 800765a:	f7f9 f8af 	bl	80007bc <__aeabi_fadd>
 800765e:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 8007660:	1c19      	adds	r1, r3, #0
 8007662:	1c28      	adds	r0, r5, #0
 8007664:	f7f9 fa34 	bl	8000ad0 <__aeabi_fdiv>
 8007668:	1c03      	adds	r3, r0, #0
 800766a:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Mean =
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	64da      	str	r2, [r3, #76]	@ 0x4c
    params->m_Mean_Variance_Estimator___Gamma_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          (params->mSamplingInterval / 3600.f)) /
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	685b      	ldr	r3, [r3, #4]
 8007674:	4940      	ldr	r1, [pc, #256]	@ (8007778 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 8007676:	1c18      	adds	r0, r3, #0
 8007678:	f7f9 fa2a 	bl	8000ad0 <__aeabi_fdiv>
 800767c:	1c03      	adds	r3, r0, #0
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 800767e:	2185      	movs	r1, #133	@ 0x85
 8007680:	05c9      	lsls	r1, r1, #23
 8007682:	1c18      	adds	r0, r3, #0
 8007684:	f7f9 fc0a 	bl	8000e9c <__aeabi_fmul>
 8007688:	1c03      	adds	r3, r0, #0
 800768a:	1c1d      	adds	r5, r3, #0
         (params->mTau_Variance_Hours + (params->mSamplingInterval / 3600.f)));
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	685b      	ldr	r3, [r3, #4]
 8007694:	4938      	ldr	r1, [pc, #224]	@ (8007778 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 8007696:	1c18      	adds	r0, r3, #0
 8007698:	f7f9 fa1a 	bl	8000ad0 <__aeabi_fdiv>
 800769c:	1c03      	adds	r3, r0, #0
 800769e:	1c19      	adds	r1, r3, #0
 80076a0:	1c20      	adds	r0, r4, #0
 80076a2:	f7f9 f88b 	bl	80007bc <__aeabi_fadd>
 80076a6:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 80076a8:	1c19      	adds	r1, r3, #0
 80076aa:	1c28      	adds	r0, r5, #0
 80076ac:	f7f9 fa10 	bl	8000ad0 <__aeabi_fdiv>
 80076b0:	1c03      	adds	r3, r0, #0
 80076b2:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Variance =
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	651a      	str	r2, [r3, #80]	@ 0x50
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	2b01      	cmp	r3, #1
 80076be:	d118      	bne.n	80076f2 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0xee>
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 80076c4:	2188      	movs	r1, #136	@ 0x88
 80076c6:	05c9      	lsls	r1, r1, #23
 80076c8:	1c18      	adds	r0, r3, #0
 80076ca:	f7f9 fbe7 	bl	8000e9c <__aeabi_fmul>
 80076ce:	1c03      	adds	r3, r0, #0
 80076d0:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
              params->mSamplingInterval));
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
 80076d6:	4929      	ldr	r1, [pc, #164]	@ (800777c <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x178>)
 80076d8:	1c18      	adds	r0, r3, #0
 80076da:	f7f9 f86f 	bl	80007bc <__aeabi_fadd>
 80076de:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 80076e0:	1c19      	adds	r1, r3, #0
 80076e2:	1c20      	adds	r0, r4, #0
 80076e4:	f7f9 f9f4 	bl	8000ad0 <__aeabi_fdiv>
 80076e8:	1c03      	adds	r3, r0, #0
 80076ea:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	655a      	str	r2, [r3, #84]	@ 0x54
 80076f0:	e017      	b.n	8007722 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x11e>
    } else {
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 80076f6:	2188      	movs	r1, #136	@ 0x88
 80076f8:	05c9      	lsls	r1, r1, #23
 80076fa:	1c18      	adds	r0, r3, #0
 80076fc:	f7f9 fbce 	bl	8000e9c <__aeabi_fmul>
 8007700:	1c03      	adds	r3, r0, #0
 8007702:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
              params->mSamplingInterval));
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
 8007708:	491d      	ldr	r1, [pc, #116]	@ (8007780 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x17c>)
 800770a:	1c18      	adds	r0, r3, #0
 800770c:	f7f9 f856 	bl	80007bc <__aeabi_fadd>
 8007710:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 8007712:	1c19      	adds	r1, r3, #0
 8007714:	1c20      	adds	r0, r4, #0
 8007716:	f7f9 f9db 	bl	8000ad0 <__aeabi_fdiv>
 800771a:	1c03      	adds	r3, r0, #0
 800771c:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          params->mSamplingInterval) /
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	685b      	ldr	r3, [r3, #4]
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 8007726:	2185      	movs	r1, #133	@ 0x85
 8007728:	05c9      	lsls	r1, r1, #23
 800772a:	1c18      	adds	r0, r3, #0
 800772c:	f7f9 fbb6 	bl	8000e9c <__aeabi_fmul>
 8007730:	1c03      	adds	r3, r0, #0
 8007732:	1c1c      	adds	r4, r3, #0
         (GasIndexAlgorithm_TAU_INITIAL_VARIANCE + params->mSamplingInterval));
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	685b      	ldr	r3, [r3, #4]
 8007738:	4912      	ldr	r1, [pc, #72]	@ (8007784 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x180>)
 800773a:	1c18      	adds	r0, r3, #0
 800773c:	f7f9 f83e 	bl	80007bc <__aeabi_fadd>
 8007740:	1c03      	adds	r3, r0, #0
          params->mSamplingInterval) /
 8007742:	1c19      	adds	r1, r3, #0
 8007744:	1c20      	adds	r0, r4, #0
 8007746:	f7f9 f9c3 	bl	8000ad0 <__aeabi_fdiv>
 800774a:	1c03      	adds	r3, r0, #0
 800774c:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	659a      	str	r2, [r3, #88]	@ 0x58
    params->m_Mean_Variance_Estimator__Gamma_Mean = 0.f;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2200      	movs	r2, #0
 8007756:	65da      	str	r2, [r3, #92]	@ 0x5c
    params->m_Mean_Variance_Estimator__Gamma_Variance = 0.f;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2200      	movs	r2, #0
 800775c:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Uptime_Gamma = 0.f;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2200      	movs	r2, #0
 8007762:	665a      	str	r2, [r3, #100]	@ 0x64
    params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2200      	movs	r2, #0
 8007768:	669a      	str	r2, [r3, #104]	@ 0x68
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2200      	movs	r2, #0
 800776e:	66da      	str	r2, [r3, #108]	@ 0x6c
}
 8007770:	46c0      	nop			@ (mov r8, r8)
 8007772:	46bd      	mov	sp, r7
 8007774:	b002      	add	sp, #8
 8007776:	bdb0      	pop	{r4, r5, r7, pc}
 8007778:	45610000 	.word	0x45610000
 800777c:	44960000 	.word	0x44960000
 8007780:	41a00000 	.word	0x41a00000
 8007784:	451c4000 	.word	0x451c4000

08007788 <GasIndexAlgorithm__mean_variance_estimator__get_std>:
    params->m_Mean_Variance_Estimator___Uptime_Gamma = uptime_gamma;
    params->m_Mean_Variance_Estimator___Initialized = true;
}

static float GasIndexAlgorithm__mean_variance_estimator__get_std(
    const GasIndexAlgorithmParams* params) {
 8007788:	b580      	push	{r7, lr}
 800778a:	b082      	sub	sp, #8
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Std;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
}
 8007794:	1c18      	adds	r0, r3, #0
 8007796:	46bd      	mov	sp, r7
 8007798:	b002      	add	sp, #8
 800779a:	bd80      	pop	{r7, pc}

0800779c <GasIndexAlgorithm__mean_variance_estimator__get_mean>:

static float GasIndexAlgorithm__mean_variance_estimator__get_mean(
    const GasIndexAlgorithmParams* params) {
 800779c:	b580      	push	{r7, lr}
 800779e:	b082      	sub	sp, #8
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]

    return (params->m_Mean_Variance_Estimator___Mean +
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
            params->m_Mean_Variance_Estimator___Sraw_Offset);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    return (params->m_Mean_Variance_Estimator___Mean +
 80077ac:	1c19      	adds	r1, r3, #0
 80077ae:	1c10      	adds	r0, r2, #0
 80077b0:	f7f9 f804 	bl	80007bc <__aeabi_fadd>
 80077b4:	1c03      	adds	r3, r0, #0
}
 80077b6:	1c18      	adds	r0, r3, #0
 80077b8:	46bd      	mov	sp, r7
 80077ba:	b002      	add	sp, #8
 80077bc:	bd80      	pop	{r7, pc}

080077be <GasIndexAlgorithm__mean_variance_estimator__is_initialized>:

static bool GasIndexAlgorithm__mean_variance_estimator__is_initialized(
    GasIndexAlgorithmParams* params) {
 80077be:	b580      	push	{r7, lr}
 80077c0:	b082      	sub	sp, #8
 80077c2:	af00      	add	r7, sp, #0
 80077c4:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Initialized;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	223c      	movs	r2, #60	@ 0x3c
 80077ca:	5c9b      	ldrb	r3, [r3, r2]
}
 80077cc:	0018      	movs	r0, r3
 80077ce:	46bd      	mov	sp, r7
 80077d0:	b002      	add	sp, #8
 80077d2:	bd80      	pop	{r7, pc}

080077d4 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>:

static void GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(
    GasIndexAlgorithmParams* params) {
 80077d4:	b5b0      	push	{r4, r5, r7, lr}
 80077d6:	b08c      	sub	sp, #48	@ 0x30
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
    float gamma_variance;
    float gating_threshold_variance;
    float sigmoid_gating_variance;

    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
                    params->mSamplingInterval);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	685b      	ldr	r3, [r3, #4]
    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
 80077e0:	1c19      	adds	r1, r3, #0
 80077e2:	4895      	ldr	r0, [pc, #596]	@ (8007a38 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x264>)
 80077e4:	f7f9 fc98 	bl	8001118 <__aeabi_fsub>
 80077e8:	1c03      	adds	r3, r0, #0
 80077ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if ((params->m_Mean_Variance_Estimator___Uptime_Gamma < uptime_limit)) {
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80077f0:	1c19      	adds	r1, r3, #0
 80077f2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80077f4:	f7f8 fe7e 	bl	80004f4 <__aeabi_fcmpgt>
 80077f8:	1e03      	subs	r3, r0, #0
 80077fa:	d00b      	beq.n	8007814 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x40>
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
             params->mSamplingInterval);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 8007804:	1c19      	adds	r1, r3, #0
 8007806:	1c10      	adds	r0, r2, #0
 8007808:	f7f8 ffd8 	bl	80007bc <__aeabi_fadd>
 800780c:	1c03      	adds	r3, r0, #0
 800780e:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    if ((params->m_Mean_Variance_Estimator___Uptime_Gating < uptime_limit)) {
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007818:	1c19      	adds	r1, r3, #0
 800781a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800781c:	f7f8 fe6a 	bl	80004f4 <__aeabi_fcmpgt>
 8007820:	1e03      	subs	r3, r0, #0
 8007822:	d00b      	beq.n	800783c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x68>
        params->m_Mean_Variance_Estimator___Uptime_Gating =
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
             params->mSamplingInterval);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 800782c:	1c19      	adds	r1, r3, #0
 800782e:	1c10      	adds	r0, r2, #0
 8007830:	f7f8 ffc4 	bl	80007bc <__aeabi_fadd>
 8007834:	1c03      	adds	r3, r0, #0
 8007836:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gating =
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	6959      	ldr	r1, [r3, #20]
 8007840:	4a7e      	ldr	r2, [pc, #504]	@ (8007a3c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	0018      	movs	r0, r3
 8007846:	f000 f9f1 	bl	8007c2c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Mean,
        GasIndexAlgorithm_INIT_TRANSITION_MEAN);
    sigmoid_gamma_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	1c11      	adds	r1, r2, #0
 8007852:	0018      	movs	r0, r3
 8007854:	f000 f9fa 	bl	8007c4c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8007858:	1c03      	adds	r3, r0, #0
 800785a:	62bb      	str	r3, [r7, #40]	@ 0x28
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 8007868:	1c19      	adds	r1, r3, #0
 800786a:	1c10      	adds	r0, r2, #0
 800786c:	f7f9 fc54 	bl	8001118 <__aeabi_fsub>
 8007870:	1c03      	adds	r3, r0, #0
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 8007872:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007874:	1c18      	adds	r0, r3, #0
 8007876:	f7f9 fb11 	bl	8000e9c <__aeabi_fmul>
 800787a:	1c03      	adds	r3, r0, #0
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 800787c:	1c19      	adds	r1, r3, #0
 800787e:	1c20      	adds	r0, r4, #0
 8007880:	f7f8 ff9c 	bl	80007bc <__aeabi_fadd>
 8007884:	1c03      	adds	r3, r0, #0
 8007886:	627b      	str	r3, [r7, #36]	@ 0x24
                   sigmoid_gamma_mean));
    gating_threshold_mean =
        (params->mGating_Threshold +
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 8007890:	1c19      	adds	r1, r3, #0
 8007892:	486b      	ldr	r0, [pc, #428]	@ (8007a40 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 8007894:	f7f9 fc40 	bl	8001118 <__aeabi_fsub>
 8007898:	1c03      	adds	r3, r0, #0
 800789a:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	1c11      	adds	r1, r2, #0
 80078a4:	0018      	movs	r0, r3
 80078a6:	f000 f9d1 	bl	8007c4c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 80078aa:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 80078ac:	1c19      	adds	r1, r3, #0
 80078ae:	1c28      	adds	r0, r5, #0
 80078b0:	f7f9 faf4 	bl	8000e9c <__aeabi_fmul>
 80078b4:	1c03      	adds	r3, r0, #0
    gating_threshold_mean =
 80078b6:	1c19      	adds	r1, r3, #0
 80078b8:	1c20      	adds	r0, r4, #0
 80078ba:	f7f8 ff7f 	bl	80007bc <__aeabi_fadd>
 80078be:	1c03      	adds	r3, r0, #0
 80078c0:	623b      	str	r3, [r7, #32]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 80078c2:	4a60      	ldr	r2, [pc, #384]	@ (8007a44 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 80078c4:	6a39      	ldr	r1, [r7, #32]
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	0018      	movs	r0, r3
 80078ca:	f000 f9af 	bl	8007c2c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_mean,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	1c11      	adds	r1, r2, #0
 80078d6:	0018      	movs	r0, r3
 80078d8:	f000 f9b8 	bl	8007c4c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 80078dc:	1c03      	adds	r3, r0, #0
 80078de:	61fb      	str	r3, [r7, #28]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Mean =
        (sigmoid_gating_mean * gamma_mean);
 80078e0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80078e2:	69f8      	ldr	r0, [r7, #28]
 80078e4:	f7f9 fada 	bl	8000e9c <__aeabi_fmul>
 80078e8:	1c03      	adds	r3, r0, #0
 80078ea:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Mean =
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	65da      	str	r2, [r3, #92]	@ 0x5c
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	6999      	ldr	r1, [r3, #24]
 80078f4:	4a51      	ldr	r2, [pc, #324]	@ (8007a3c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	0018      	movs	r0, r3
 80078fa:	f000 f997 	bl	8007c2c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Variance,
        GasIndexAlgorithm_INIT_TRANSITION_VARIANCE);
    sigmoid_gamma_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	1c11      	adds	r1, r2, #0
 8007906:	0018      	movs	r0, r3
 8007908:	f000 f9a0 	bl	8007c4c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800790c:	1c03      	adds	r3, r0, #0
 800790e:	61bb      	str	r3, [r7, #24]
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_variance =
        (params->m_Mean_Variance_Estimator___Gamma_Variance +
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	6d1c      	ldr	r4, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 800791c:	1c19      	adds	r1, r3, #0
 800791e:	1c10      	adds	r0, r2, #0
 8007920:	f7f9 fbfa 	bl	8001118 <__aeabi_fsub>
 8007924:	1c03      	adds	r3, r0, #0
 8007926:	1c1d      	adds	r5, r3, #0
          (sigmoid_gamma_variance - sigmoid_gamma_mean)));
 8007928:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800792a:	69b8      	ldr	r0, [r7, #24]
 800792c:	f7f9 fbf4 	bl	8001118 <__aeabi_fsub>
 8007930:	1c03      	adds	r3, r0, #0
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 8007932:	1c19      	adds	r1, r3, #0
 8007934:	1c28      	adds	r0, r5, #0
 8007936:	f7f9 fab1 	bl	8000e9c <__aeabi_fmul>
 800793a:	1c03      	adds	r3, r0, #0
    gamma_variance =
 800793c:	1c19      	adds	r1, r3, #0
 800793e:	1c20      	adds	r0, r4, #0
 8007940:	f7f8 ff3c 	bl	80007bc <__aeabi_fadd>
 8007944:	1c03      	adds	r3, r0, #0
 8007946:	617b      	str	r3, [r7, #20]
    gating_threshold_variance =
        (params->mGating_Threshold +
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 8007950:	1c19      	adds	r1, r3, #0
 8007952:	483b      	ldr	r0, [pc, #236]	@ (8007a40 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 8007954:	f7f9 fbe0 	bl	8001118 <__aeabi_fsub>
 8007958:	1c03      	adds	r3, r0, #0
 800795a:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	1c11      	adds	r1, r2, #0
 8007964:	0018      	movs	r0, r3
 8007966:	f000 f971 	bl	8007c4c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800796a:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 800796c:	1c19      	adds	r1, r3, #0
 800796e:	1c28      	adds	r0, r5, #0
 8007970:	f7f9 fa94 	bl	8000e9c <__aeabi_fmul>
 8007974:	1c03      	adds	r3, r0, #0
    gating_threshold_variance =
 8007976:	1c19      	adds	r1, r3, #0
 8007978:	1c20      	adds	r0, r4, #0
 800797a:	f7f8 ff1f 	bl	80007bc <__aeabi_fadd>
 800797e:	1c03      	adds	r3, r0, #0
 8007980:	613b      	str	r3, [r7, #16]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 8007982:	4a30      	ldr	r2, [pc, #192]	@ (8007a44 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 8007984:	6939      	ldr	r1, [r7, #16]
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	0018      	movs	r0, r3
 800798a:	f000 f94f 	bl	8007c2c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_variance,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	1c11      	adds	r1, r2, #0
 8007996:	0018      	movs	r0, r3
 8007998:	f000 f958 	bl	8007c4c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800799c:	1c03      	adds	r3, r0, #0
 800799e:	60fb      	str	r3, [r7, #12]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Variance =
        (sigmoid_gating_variance * gamma_variance);
 80079a0:	6979      	ldr	r1, [r7, #20]
 80079a2:	68f8      	ldr	r0, [r7, #12]
 80079a4:	f7f9 fa7a 	bl	8000e9c <__aeabi_fmul>
 80079a8:	1c03      	adds	r3, r0, #0
 80079aa:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Variance =
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	6edc      	ldr	r4, [r3, #108]	@ 0x6c
         ((params->mSamplingInterval / 60.f) *
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	685b      	ldr	r3, [r3, #4]
 80079b8:	4923      	ldr	r1, [pc, #140]	@ (8007a48 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x274>)
 80079ba:	1c18      	adds	r0, r3, #0
 80079bc:	f7f9 f888 	bl	8000ad0 <__aeabi_fdiv>
 80079c0:	1c03      	adds	r3, r0, #0
 80079c2:	1c1d      	adds	r5, r3, #0
          (((1.f - sigmoid_gating_mean) *
 80079c4:	69f9      	ldr	r1, [r7, #28]
 80079c6:	20fe      	movs	r0, #254	@ 0xfe
 80079c8:	0580      	lsls	r0, r0, #22
 80079ca:	f7f9 fba5 	bl	8001118 <__aeabi_fsub>
 80079ce:	1c03      	adds	r3, r0, #0
 80079d0:	491e      	ldr	r1, [pc, #120]	@ (8007a4c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x278>)
 80079d2:	1c18      	adds	r0, r3, #0
 80079d4:	f7f9 fa62 	bl	8000e9c <__aeabi_fmul>
 80079d8:	1c03      	adds	r3, r0, #0
            (1.f + GasIndexAlgorithm_GATING_MAX_RATIO)) -
 80079da:	491d      	ldr	r1, [pc, #116]	@ (8007a50 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x27c>)
 80079dc:	1c18      	adds	r0, r3, #0
 80079de:	f7f9 fb9b 	bl	8001118 <__aeabi_fsub>
 80079e2:	1c03      	adds	r3, r0, #0
         ((params->mSamplingInterval / 60.f) *
 80079e4:	1c19      	adds	r1, r3, #0
 80079e6:	1c28      	adds	r0, r5, #0
 80079e8:	f7f9 fa58 	bl	8000e9c <__aeabi_fmul>
 80079ec:	1c03      	adds	r3, r0, #0
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 80079ee:	1c19      	adds	r1, r3, #0
 80079f0:	1c20      	adds	r0, r4, #0
 80079f2:	f7f8 fee3 	bl	80007bc <__aeabi_fadd>
 80079f6:	1c03      	adds	r3, r0, #0
 80079f8:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	66da      	str	r2, [r3, #108]	@ 0x6c
           GasIndexAlgorithm_GATING_MAX_RATIO)));
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes < 0.f)) {
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007a02:	2100      	movs	r1, #0
 8007a04:	1c18      	adds	r0, r3, #0
 8007a06:	f7f8 fd61 	bl	80004cc <__aeabi_fcmplt>
 8007a0a:	1e03      	subs	r3, r0, #0
 8007a0c:	d002      	beq.n	8007a14 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x240>
        params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	2200      	movs	r2, #0
 8007a12:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
         params->mGating_Max_Duration_Minutes)) {
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	691b      	ldr	r3, [r3, #16]
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 8007a1c:	1c19      	adds	r1, r3, #0
 8007a1e:	1c10      	adds	r0, r2, #0
 8007a20:	f7f8 fd68 	bl	80004f4 <__aeabi_fcmpgt>
 8007a24:	1e03      	subs	r3, r0, #0
 8007a26:	d100      	bne.n	8007a2a <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x256>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
    }
}
 8007a28:	e002      	b.n	8007a30 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x25c>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007a30:	46c0      	nop			@ (mov r8, r8)
 8007a32:	46bd      	mov	sp, r7
 8007a34:	b00c      	add	sp, #48	@ 0x30
 8007a36:	bdb0      	pop	{r4, r5, r7, pc}
 8007a38:	46fffe00 	.word	0x46fffe00
 8007a3c:	3c23d70a 	.word	0x3c23d70a
 8007a40:	43ff0000 	.word	0x43ff0000
 8007a44:	3db851ec 	.word	0x3db851ec
 8007a48:	42700000 	.word	0x42700000
 8007a4c:	3fa66666 	.word	0x3fa66666
 8007a50:	3e99999a 	.word	0x3e99999a

08007a54 <GasIndexAlgorithm__mean_variance_estimator__process>:

static void GasIndexAlgorithm__mean_variance_estimator__process(
    GasIndexAlgorithmParams* params, float sraw) {
 8007a54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a56:	b087      	sub	sp, #28
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
 8007a5c:	6039      	str	r1, [r7, #0]

    float delta_sgp;
    float c;
    float additional_scaling;

    if ((params->m_Mean_Variance_Estimator___Initialized == false)) {
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	223c      	movs	r2, #60	@ 0x3c
 8007a62:	5c9b      	ldrb	r3, [r3, r2]
 8007a64:	2201      	movs	r2, #1
 8007a66:	4053      	eors	r3, r2
 8007a68:	b2db      	uxtb	r3, r3
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d00a      	beq.n	8007a84 <GasIndexAlgorithm__mean_variance_estimator__process+0x30>
        params->m_Mean_Variance_Estimator___Initialized = true;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	223c      	movs	r2, #60	@ 0x3c
 8007a72:	2101      	movs	r1, #1
 8007a74:	5499      	strb	r1, [r3, r2]
        params->m_Mean_Variance_Estimator___Sraw_Offset = sraw;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	683a      	ldr	r2, [r7, #0]
 8007a7a:	645a      	str	r2, [r3, #68]	@ 0x44
        params->m_Mean_Variance_Estimator___Mean = 0.f;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2200      	movs	r2, #0
 8007a80:	641a      	str	r2, [r3, #64]	@ 0x40
        params->m_Mean_Variance_Estimator___Mean =
            (params->m_Mean_Variance_Estimator___Mean +
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
              GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING));
    }
}
 8007a82:	e0c8      	b.n	8007c16 <GasIndexAlgorithm__mean_variance_estimator__process+0x1c2>
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a88:	4965      	ldr	r1, [pc, #404]	@ (8007c20 <GasIndexAlgorithm__mean_variance_estimator__process+0x1cc>)
 8007a8a:	1c18      	adds	r0, r3, #0
 8007a8c:	f7f8 fd3c 	bl	8000508 <__aeabi_fcmpge>
 8007a90:	1e03      	subs	r3, r0, #0
 8007a92:	d107      	bne.n	8007aa4 <GasIndexAlgorithm__mean_variance_estimator__process+0x50>
             (params->m_Mean_Variance_Estimator___Mean <= -100.f))) {
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 8007a98:	4962      	ldr	r1, [pc, #392]	@ (8007c24 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d0>)
 8007a9a:	1c18      	adds	r0, r3, #0
 8007a9c:	f7f8 fd20 	bl	80004e0 <__aeabi_fcmple>
 8007aa0:	1e03      	subs	r3, r0, #0
 8007aa2:	d00e      	beq.n	8007ac2 <GasIndexAlgorithm__mean_variance_estimator__process+0x6e>
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
                 params->m_Mean_Variance_Estimator___Mean);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 8007aac:	1c19      	adds	r1, r3, #0
 8007aae:	1c10      	adds	r0, r2, #0
 8007ab0:	f7f8 fe84 	bl	80007bc <__aeabi_fadd>
 8007ab4:	1c03      	adds	r3, r0, #0
 8007ab6:	1c1a      	adds	r2, r3, #0
            params->m_Mean_Variance_Estimator___Sraw_Offset =
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	645a      	str	r2, [r3, #68]	@ 0x44
            params->m_Mean_Variance_Estimator___Mean = 0.f;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2200      	movs	r2, #0
 8007ac0:	641a      	str	r2, [r3, #64]	@ 0x40
        sraw = (sraw - params->m_Mean_Variance_Estimator___Sraw_Offset);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ac6:	1c19      	adds	r1, r3, #0
 8007ac8:	6838      	ldr	r0, [r7, #0]
 8007aca:	f7f9 fb25 	bl	8001118 <__aeabi_fsub>
 8007ace:	1c03      	adds	r3, r0, #0
 8007ad0:	603b      	str	r3, [r7, #0]
        GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(params);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	0018      	movs	r0, r3
 8007ad6:	f7ff fe7d 	bl	80077d4 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>
        delta_sgp = ((sraw - params->m_Mean_Variance_Estimator___Mean) /
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ade:	1c19      	adds	r1, r3, #0
 8007ae0:	6838      	ldr	r0, [r7, #0]
 8007ae2:	f7f9 fb19 	bl	8001118 <__aeabi_fsub>
 8007ae6:	1c03      	adds	r3, r0, #0
 8007ae8:	2185      	movs	r1, #133	@ 0x85
 8007aea:	05c9      	lsls	r1, r1, #23
 8007aec:	1c18      	adds	r0, r3, #0
 8007aee:	f7f8 ffef 	bl	8000ad0 <__aeabi_fdiv>
 8007af2:	1c03      	adds	r3, r0, #0
 8007af4:	60fb      	str	r3, [r7, #12]
        if ((delta_sgp < 0.f)) {
 8007af6:	2100      	movs	r1, #0
 8007af8:	68f8      	ldr	r0, [r7, #12]
 8007afa:	f7f8 fce7 	bl	80004cc <__aeabi_fcmplt>
 8007afe:	1e03      	subs	r3, r0, #0
 8007b00:	d008      	beq.n	8007b14 <GasIndexAlgorithm__mean_variance_estimator__process+0xc0>
            c = (params->m_Mean_Variance_Estimator___Std - delta_sgp);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007b06:	68f9      	ldr	r1, [r7, #12]
 8007b08:	1c18      	adds	r0, r3, #0
 8007b0a:	f7f9 fb05 	bl	8001118 <__aeabi_fsub>
 8007b0e:	1c03      	adds	r3, r0, #0
 8007b10:	617b      	str	r3, [r7, #20]
 8007b12:	e007      	b.n	8007b24 <GasIndexAlgorithm__mean_variance_estimator__process+0xd0>
            c = (params->m_Mean_Variance_Estimator___Std + delta_sgp);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007b18:	1c19      	adds	r1, r3, #0
 8007b1a:	68f8      	ldr	r0, [r7, #12]
 8007b1c:	f7f8 fe4e 	bl	80007bc <__aeabi_fadd>
 8007b20:	1c03      	adds	r3, r0, #0
 8007b22:	617b      	str	r3, [r7, #20]
        additional_scaling = 1.f;
 8007b24:	23fe      	movs	r3, #254	@ 0xfe
 8007b26:	059b      	lsls	r3, r3, #22
 8007b28:	613b      	str	r3, [r7, #16]
        if ((c > 1440.f)) {
 8007b2a:	493f      	ldr	r1, [pc, #252]	@ (8007c28 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 8007b2c:	6978      	ldr	r0, [r7, #20]
 8007b2e:	f7f8 fce1 	bl	80004f4 <__aeabi_fcmpgt>
 8007b32:	1e03      	subs	r3, r0, #0
 8007b34:	d010      	beq.n	8007b58 <GasIndexAlgorithm__mean_variance_estimator__process+0x104>
            additional_scaling = ((c / 1440.f) * (c / 1440.f));
 8007b36:	493c      	ldr	r1, [pc, #240]	@ (8007c28 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 8007b38:	6978      	ldr	r0, [r7, #20]
 8007b3a:	f7f8 ffc9 	bl	8000ad0 <__aeabi_fdiv>
 8007b3e:	1c03      	adds	r3, r0, #0
 8007b40:	1c1c      	adds	r4, r3, #0
 8007b42:	4939      	ldr	r1, [pc, #228]	@ (8007c28 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 8007b44:	6978      	ldr	r0, [r7, #20]
 8007b46:	f7f8 ffc3 	bl	8000ad0 <__aeabi_fdiv>
 8007b4a:	1c03      	adds	r3, r0, #0
 8007b4c:	1c19      	adds	r1, r3, #0
 8007b4e:	1c20      	adds	r0, r4, #0
 8007b50:	f7f9 f9a4 	bl	8000e9c <__aeabi_fmul>
 8007b54:	1c03      	adds	r3, r0, #0
 8007b56:	613b      	str	r3, [r7, #16]
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING -
 8007b5c:	1c19      	adds	r1, r3, #0
 8007b5e:	2085      	movs	r0, #133	@ 0x85
 8007b60:	05c0      	lsls	r0, r0, #23
 8007b62:	f7f9 fad9 	bl	8001118 <__aeabi_fsub>
 8007b66:	1c03      	adds	r3, r0, #0
            (sqrtf((additional_scaling *
 8007b68:	6939      	ldr	r1, [r7, #16]
 8007b6a:	1c18      	adds	r0, r3, #0
 8007b6c:	f7f9 f996 	bl	8000e9c <__aeabi_fmul>
 8007b70:	1c03      	adds	r3, r0, #0
 8007b72:	1c18      	adds	r0, r3, #0
 8007b74:	f012 fb9a 	bl	801a2ac <sqrtf>
 8007b78:	1c06      	adds	r6, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
                   (params->m_Mean_Variance_Estimator___Std /
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6c9d      	ldr	r5, [r3, #72]	@ 0x48
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 8007b82:	2185      	movs	r1, #133	@ 0x85
 8007b84:	05c9      	lsls	r1, r1, #23
 8007b86:	6938      	ldr	r0, [r7, #16]
 8007b88:	f7f9 f988 	bl	8000e9c <__aeabi_fmul>
 8007b8c:	1c03      	adds	r3, r0, #0
                   (params->m_Mean_Variance_Estimator___Std /
 8007b8e:	1c19      	adds	r1, r3, #0
 8007b90:	1c28      	adds	r0, r5, #0
 8007b92:	f7f8 ff9d 	bl	8000ad0 <__aeabi_fdiv>
 8007b96:	1c03      	adds	r3, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 8007b98:	1c19      	adds	r1, r3, #0
 8007b9a:	1c20      	adds	r0, r4, #0
 8007b9c:	f7f9 f97e 	bl	8000e9c <__aeabi_fmul>
 8007ba0:	1c03      	adds	r3, r0, #0
 8007ba2:	1c1c      	adds	r4, r3, #0
                  (((params->m_Mean_Variance_Estimator__Gamma_Variance *
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007ba8:	68f9      	ldr	r1, [r7, #12]
 8007baa:	1c18      	adds	r0, r3, #0
 8007bac:	f7f9 f976 	bl	8000e9c <__aeabi_fmul>
 8007bb0:	1c03      	adds	r3, r0, #0
                     delta_sgp) /
 8007bb2:	6939      	ldr	r1, [r7, #16]
 8007bb4:	1c18      	adds	r0, r3, #0
 8007bb6:	f7f8 ff8b 	bl	8000ad0 <__aeabi_fdiv>
 8007bba:	1c03      	adds	r3, r0, #0
                    additional_scaling) *
 8007bbc:	68f9      	ldr	r1, [r7, #12]
 8007bbe:	1c18      	adds	r0, r3, #0
 8007bc0:	f7f9 f96c 	bl	8000e9c <__aeabi_fmul>
 8007bc4:	1c03      	adds	r3, r0, #0
             sqrtf(
 8007bc6:	1c19      	adds	r1, r3, #0
 8007bc8:	1c20      	adds	r0, r4, #0
 8007bca:	f7f8 fdf7 	bl	80007bc <__aeabi_fadd>
 8007bce:	1c03      	adds	r3, r0, #0
 8007bd0:	1c18      	adds	r0, r3, #0
 8007bd2:	f012 fb6b 	bl	801a2ac <sqrtf>
 8007bd6:	1c03      	adds	r3, r0, #0
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 8007bd8:	1c19      	adds	r1, r3, #0
 8007bda:	1c30      	adds	r0, r6, #0
 8007bdc:	f7f9 f95e 	bl	8000e9c <__aeabi_fmul>
 8007be0:	1c03      	adds	r3, r0, #0
 8007be2:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Std =
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	649a      	str	r2, [r3, #72]	@ 0x48
            (params->m_Mean_Variance_Estimator___Mean +
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007bf0:	68f9      	ldr	r1, [r7, #12]
 8007bf2:	1c18      	adds	r0, r3, #0
 8007bf4:	f7f9 f952 	bl	8000e9c <__aeabi_fmul>
 8007bf8:	1c03      	adds	r3, r0, #0
 8007bfa:	2182      	movs	r1, #130	@ 0x82
 8007bfc:	05c9      	lsls	r1, r1, #23
 8007bfe:	1c18      	adds	r0, r3, #0
 8007c00:	f7f8 ff66 	bl	8000ad0 <__aeabi_fdiv>
 8007c04:	1c03      	adds	r3, r0, #0
            (params->m_Mean_Variance_Estimator___Mean +
 8007c06:	1c19      	adds	r1, r3, #0
 8007c08:	1c20      	adds	r0, r4, #0
 8007c0a:	f7f8 fdd7 	bl	80007bc <__aeabi_fadd>
 8007c0e:	1c03      	adds	r3, r0, #0
 8007c10:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Mean =
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8007c16:	46c0      	nop			@ (mov r8, r8)
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	b007      	add	sp, #28
 8007c1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c1e:	46c0      	nop			@ (mov r8, r8)
 8007c20:	42c80000 	.word	0x42c80000
 8007c24:	c2c80000 	.word	0xc2c80000
 8007c28:	44b40000 	.word	0x44b40000

08007c2c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>:

static void
GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K) {
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b084      	sub	sp, #16
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	60f8      	str	r0, [r7, #12]
 8007c34:	60b9      	str	r1, [r7, #8]
 8007c36:	607a      	str	r2, [r7, #4]

    params->m_Mean_Variance_Estimator___Sigmoid__K = K;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	687a      	ldr	r2, [r7, #4]
 8007c3c:	671a      	str	r2, [r3, #112]	@ 0x70
    params->m_Mean_Variance_Estimator___Sigmoid__X0 = X0;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	68ba      	ldr	r2, [r7, #8]
 8007c42:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007c44:	46c0      	nop			@ (mov r8, r8)
 8007c46:	46bd      	mov	sp, r7
 8007c48:	b004      	add	sp, #16
 8007c4a:	bd80      	pop	{r7, pc}

08007c4c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>:

static float GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
    GasIndexAlgorithmParams* params, float sample) {
 8007c4c:	b590      	push	{r4, r7, lr}
 8007c4e:	b085      	sub	sp, #20
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
 8007c54:	6039      	str	r1, [r7, #0]

    float x;

    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6f1c      	ldr	r4, [r3, #112]	@ 0x70
         (sample - params->m_Mean_Variance_Estimator___Sigmoid__X0));
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007c5e:	1c19      	adds	r1, r3, #0
 8007c60:	6838      	ldr	r0, [r7, #0]
 8007c62:	f7f9 fa59 	bl	8001118 <__aeabi_fsub>
 8007c66:	1c03      	adds	r3, r0, #0
    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 8007c68:	1c19      	adds	r1, r3, #0
 8007c6a:	1c20      	adds	r0, r4, #0
 8007c6c:	f7f9 f916 	bl	8000e9c <__aeabi_fmul>
 8007c70:	1c03      	adds	r3, r0, #0
 8007c72:	60fb      	str	r3, [r7, #12]
    if ((x < -50.f)) {
 8007c74:	4912      	ldr	r1, [pc, #72]	@ (8007cc0 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x74>)
 8007c76:	68f8      	ldr	r0, [r7, #12]
 8007c78:	f7f8 fc28 	bl	80004cc <__aeabi_fcmplt>
 8007c7c:	1e03      	subs	r3, r0, #0
 8007c7e:	d002      	beq.n	8007c86 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x3a>
        return 1.f;
 8007c80:	23fe      	movs	r3, #254	@ 0xfe
 8007c82:	059b      	lsls	r3, r3, #22
 8007c84:	e018      	b.n	8007cb8 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else if ((x > 50.f)) {
 8007c86:	490f      	ldr	r1, [pc, #60]	@ (8007cc4 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x78>)
 8007c88:	68f8      	ldr	r0, [r7, #12]
 8007c8a:	f7f8 fc33 	bl	80004f4 <__aeabi_fcmpgt>
 8007c8e:	1e03      	subs	r3, r0, #0
 8007c90:	d001      	beq.n	8007c96 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x4a>
        return 0.f;
 8007c92:	2300      	movs	r3, #0
 8007c94:	e010      	b.n	8007cb8 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else {
        return (1.f / (1.f + expf(x)));
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	1c18      	adds	r0, r3, #0
 8007c9a:	f012 fadf 	bl	801a25c <expf>
 8007c9e:	1c03      	adds	r3, r0, #0
 8007ca0:	21fe      	movs	r1, #254	@ 0xfe
 8007ca2:	0589      	lsls	r1, r1, #22
 8007ca4:	1c18      	adds	r0, r3, #0
 8007ca6:	f7f8 fd89 	bl	80007bc <__aeabi_fadd>
 8007caa:	1c03      	adds	r3, r0, #0
 8007cac:	1c19      	adds	r1, r3, #0
 8007cae:	20fe      	movs	r0, #254	@ 0xfe
 8007cb0:	0580      	lsls	r0, r0, #22
 8007cb2:	f7f8 ff0d 	bl	8000ad0 <__aeabi_fdiv>
 8007cb6:	1c03      	adds	r3, r0, #0
    }
}
 8007cb8:	1c18      	adds	r0, r3, #0
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	b005      	add	sp, #20
 8007cbe:	bd90      	pop	{r4, r7, pc}
 8007cc0:	c2480000 	.word	0xc2480000
 8007cc4:	42480000 	.word	0x42480000

08007cc8 <GasIndexAlgorithm__mox_model__set_parameters>:

static void
GasIndexAlgorithm__mox_model__set_parameters(GasIndexAlgorithmParams* params,
                                             float SRAW_STD, float SRAW_MEAN) {
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b084      	sub	sp, #16
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	60f8      	str	r0, [r7, #12]
 8007cd0:	60b9      	str	r1, [r7, #8]
 8007cd2:	607a      	str	r2, [r7, #4]

    params->m_Mox_Model__Sraw_Std = SRAW_STD;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	68ba      	ldr	r2, [r7, #8]
 8007cd8:	679a      	str	r2, [r3, #120]	@ 0x78
    params->m_Mox_Model__Sraw_Mean = SRAW_MEAN;
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	687a      	ldr	r2, [r7, #4]
 8007cde:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8007ce0:	46c0      	nop			@ (mov r8, r8)
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	b004      	add	sp, #16
 8007ce6:	bd80      	pop	{r7, pc}

08007ce8 <GasIndexAlgorithm__mox_model__process>:

static float
GasIndexAlgorithm__mox_model__process(GasIndexAlgorithmParams* params,
                                      float sraw) {
 8007ce8:	b590      	push	{r4, r7, lr}
 8007cea:	b083      	sub	sp, #12
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
 8007cf0:	6039      	str	r1, [r7, #0]

    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	2b01      	cmp	r3, #1
 8007cf8:	d114      	bne.n	8007d24 <GasIndexAlgorithm__mox_model__process+0x3c>
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007cfe:	1c19      	adds	r1, r3, #0
 8007d00:	6838      	ldr	r0, [r7, #0]
 8007d02:	f7f9 fa09 	bl	8001118 <__aeabi_fsub>
 8007d06:	1c03      	adds	r3, r0, #0
 8007d08:	4918      	ldr	r1, [pc, #96]	@ (8007d6c <GasIndexAlgorithm__mox_model__process+0x84>)
 8007d0a:	1c18      	adds	r0, r3, #0
 8007d0c:	f7f8 fee0 	bl	8000ad0 <__aeabi_fdiv>
 8007d10:	1c03      	adds	r3, r0, #0
 8007d12:	1c1a      	adds	r2, r3, #0
                 GasIndexAlgorithm_SRAW_STD_NOX) *
                params->mIndex_Gain);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	6a1b      	ldr	r3, [r3, #32]
                 GasIndexAlgorithm_SRAW_STD_NOX) *
 8007d18:	1c19      	adds	r1, r3, #0
 8007d1a:	1c10      	adds	r0, r2, #0
 8007d1c:	f7f9 f8be 	bl	8000e9c <__aeabi_fmul>
 8007d20:	1c03      	adds	r3, r0, #0
 8007d22:	e01f      	b.n	8007d64 <GasIndexAlgorithm__mox_model__process+0x7c>
    } else {
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007d28:	1c19      	adds	r1, r3, #0
 8007d2a:	6838      	ldr	r0, [r7, #0]
 8007d2c:	f7f9 f9f4 	bl	8001118 <__aeabi_fsub>
 8007d30:	1c03      	adds	r3, r0, #0
 8007d32:	1c1a      	adds	r2, r3, #0
 8007d34:	2380      	movs	r3, #128	@ 0x80
 8007d36:	061b      	lsls	r3, r3, #24
 8007d38:	4053      	eors	r3, r2
 8007d3a:	001c      	movs	r4, r3
                 (-1.f * (params->m_Mox_Model__Sraw_Std +
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007d40:	490b      	ldr	r1, [pc, #44]	@ (8007d70 <GasIndexAlgorithm__mox_model__process+0x88>)
 8007d42:	1c18      	adds	r0, r3, #0
 8007d44:	f7f8 fd3a 	bl	80007bc <__aeabi_fadd>
 8007d48:	1c03      	adds	r3, r0, #0
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 8007d4a:	1c19      	adds	r1, r3, #0
 8007d4c:	1c20      	adds	r0, r4, #0
 8007d4e:	f7f8 febf 	bl	8000ad0 <__aeabi_fdiv>
 8007d52:	1c03      	adds	r3, r0, #0
 8007d54:	1c1a      	adds	r2, r3, #0
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
                params->mIndex_Gain);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	6a1b      	ldr	r3, [r3, #32]
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
 8007d5a:	1c19      	adds	r1, r3, #0
 8007d5c:	1c10      	adds	r0, r2, #0
 8007d5e:	f7f9 f89d 	bl	8000e9c <__aeabi_fmul>
 8007d62:	1c03      	adds	r3, r0, #0
    }
}
 8007d64:	1c18      	adds	r0, r3, #0
 8007d66:	46bd      	mov	sp, r7
 8007d68:	b003      	add	sp, #12
 8007d6a:	bd90      	pop	{r4, r7, pc}
 8007d6c:	44fa0000 	.word	0x44fa0000
 8007d70:	435c0000 	.word	0x435c0000

08007d74 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>:

static void GasIndexAlgorithm__sigmoid_scaled__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K, float offset_default) {
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b084      	sub	sp, #16
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	60f8      	str	r0, [r7, #12]
 8007d7c:	60b9      	str	r1, [r7, #8]
 8007d7e:	607a      	str	r2, [r7, #4]
 8007d80:	603b      	str	r3, [r7, #0]

    params->m_Sigmoid_Scaled__K = K;
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	2180      	movs	r1, #128	@ 0x80
 8007d86:	687a      	ldr	r2, [r7, #4]
 8007d88:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__X0 = X0;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	2184      	movs	r1, #132	@ 0x84
 8007d8e:	68ba      	ldr	r2, [r7, #8]
 8007d90:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__Offset_Default = offset_default;
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	2188      	movs	r1, #136	@ 0x88
 8007d96:	683a      	ldr	r2, [r7, #0]
 8007d98:	505a      	str	r2, [r3, r1]
}
 8007d9a:	46c0      	nop			@ (mov r8, r8)
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	b004      	add	sp, #16
 8007da0:	bd80      	pop	{r7, pc}
	...

08007da4 <GasIndexAlgorithm__sigmoid_scaled__process>:

static float
GasIndexAlgorithm__sigmoid_scaled__process(GasIndexAlgorithmParams* params,
                                           float sample) {
 8007da4:	b590      	push	{r4, r7, lr}
 8007da6:	b085      	sub	sp, #20
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
 8007dac:	6039      	str	r1, [r7, #0]

    float x;
    float shift;

    x = (params->m_Sigmoid_Scaled__K * (sample - params->m_Sigmoid_Scaled__X0));
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	2280      	movs	r2, #128	@ 0x80
 8007db2:	589c      	ldr	r4, [r3, r2]
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2284      	movs	r2, #132	@ 0x84
 8007db8:	589b      	ldr	r3, [r3, r2]
 8007dba:	1c19      	adds	r1, r3, #0
 8007dbc:	6838      	ldr	r0, [r7, #0]
 8007dbe:	f7f9 f9ab 	bl	8001118 <__aeabi_fsub>
 8007dc2:	1c03      	adds	r3, r0, #0
 8007dc4:	1c19      	adds	r1, r3, #0
 8007dc6:	1c20      	adds	r0, r4, #0
 8007dc8:	f7f9 f868 	bl	8000e9c <__aeabi_fmul>
 8007dcc:	1c03      	adds	r3, r0, #0
 8007dce:	60bb      	str	r3, [r7, #8]
    if ((x < -50.f)) {
 8007dd0:	4940      	ldr	r1, [pc, #256]	@ (8007ed4 <GasIndexAlgorithm__sigmoid_scaled__process+0x130>)
 8007dd2:	68b8      	ldr	r0, [r7, #8]
 8007dd4:	f7f8 fb7a 	bl	80004cc <__aeabi_fcmplt>
 8007dd8:	1e03      	subs	r3, r0, #0
 8007dda:	d001      	beq.n	8007de0 <GasIndexAlgorithm__sigmoid_scaled__process+0x3c>
        return GasIndexAlgorithm_SIGMOID_L;
 8007ddc:	4b3e      	ldr	r3, [pc, #248]	@ (8007ed8 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 8007dde:	e075      	b.n	8007ecc <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else if ((x > 50.f)) {
 8007de0:	493e      	ldr	r1, [pc, #248]	@ (8007edc <GasIndexAlgorithm__sigmoid_scaled__process+0x138>)
 8007de2:	68b8      	ldr	r0, [r7, #8]
 8007de4:	f7f8 fb86 	bl	80004f4 <__aeabi_fcmpgt>
 8007de8:	1e03      	subs	r3, r0, #0
 8007dea:	d001      	beq.n	8007df0 <GasIndexAlgorithm__sigmoid_scaled__process+0x4c>
        return 0.f;
 8007dec:	2300      	movs	r3, #0
 8007dee:	e06d      	b.n	8007ecc <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else {
        if ((sample >= 0.f)) {
 8007df0:	2100      	movs	r1, #0
 8007df2:	6838      	ldr	r0, [r7, #0]
 8007df4:	f7f8 fb88 	bl	8000508 <__aeabi_fcmpge>
 8007df8:	1e03      	subs	r3, r0, #0
 8007dfa:	d047      	beq.n	8007e8c <GasIndexAlgorithm__sigmoid_scaled__process+0xe8>
            if ((params->m_Sigmoid_Scaled__Offset_Default == 1.f)) {
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2288      	movs	r2, #136	@ 0x88
 8007e00:	589b      	ldr	r3, [r3, r2]
 8007e02:	21fe      	movs	r1, #254	@ 0xfe
 8007e04:	0589      	lsls	r1, r1, #22
 8007e06:	1c18      	adds	r0, r3, #0
 8007e08:	f7f8 fb5a 	bl	80004c0 <__aeabi_fcmpeq>
 8007e0c:	1e03      	subs	r3, r0, #0
 8007e0e:	d00e      	beq.n	8007e2e <GasIndexAlgorithm__sigmoid_scaled__process+0x8a>
                shift = ((500.f / 499.f) * (1.f - params->mIndex_Offset));
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	689b      	ldr	r3, [r3, #8]
 8007e14:	1c19      	adds	r1, r3, #0
 8007e16:	20fe      	movs	r0, #254	@ 0xfe
 8007e18:	0580      	lsls	r0, r0, #22
 8007e1a:	f7f9 f97d 	bl	8001118 <__aeabi_fsub>
 8007e1e:	1c03      	adds	r3, r0, #0
 8007e20:	492f      	ldr	r1, [pc, #188]	@ (8007ee0 <GasIndexAlgorithm__sigmoid_scaled__process+0x13c>)
 8007e22:	1c18      	adds	r0, r3, #0
 8007e24:	f7f9 f83a 	bl	8000e9c <__aeabi_fmul>
 8007e28:	1c03      	adds	r3, r0, #0
 8007e2a:	60fb      	str	r3, [r7, #12]
 8007e2c:	e012      	b.n	8007e54 <GasIndexAlgorithm__sigmoid_scaled__process+0xb0>
            } else {
                shift = ((GasIndexAlgorithm_SIGMOID_L -
                          (5.f * params->mIndex_Offset)) /
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	689b      	ldr	r3, [r3, #8]
 8007e32:	492c      	ldr	r1, [pc, #176]	@ (8007ee4 <GasIndexAlgorithm__sigmoid_scaled__process+0x140>)
 8007e34:	1c18      	adds	r0, r3, #0
 8007e36:	f7f9 f831 	bl	8000e9c <__aeabi_fmul>
 8007e3a:	1c03      	adds	r3, r0, #0
                shift = ((GasIndexAlgorithm_SIGMOID_L -
 8007e3c:	1c19      	adds	r1, r3, #0
 8007e3e:	4826      	ldr	r0, [pc, #152]	@ (8007ed8 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 8007e40:	f7f9 f96a 	bl	8001118 <__aeabi_fsub>
 8007e44:	1c03      	adds	r3, r0, #0
 8007e46:	2181      	movs	r1, #129	@ 0x81
 8007e48:	05c9      	lsls	r1, r1, #23
 8007e4a:	1c18      	adds	r0, r3, #0
 8007e4c:	f7f8 fe40 	bl	8000ad0 <__aeabi_fdiv>
 8007e50:	1c03      	adds	r3, r0, #0
 8007e52:	60fb      	str	r3, [r7, #12]
                         4.f);
            }
            return (((GasIndexAlgorithm_SIGMOID_L + shift) / (1.f + expf(x))) -
 8007e54:	4920      	ldr	r1, [pc, #128]	@ (8007ed8 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 8007e56:	68f8      	ldr	r0, [r7, #12]
 8007e58:	f7f8 fcb0 	bl	80007bc <__aeabi_fadd>
 8007e5c:	1c03      	adds	r3, r0, #0
 8007e5e:	1c1c      	adds	r4, r3, #0
 8007e60:	68bb      	ldr	r3, [r7, #8]
 8007e62:	1c18      	adds	r0, r3, #0
 8007e64:	f012 f9fa 	bl	801a25c <expf>
 8007e68:	1c03      	adds	r3, r0, #0
 8007e6a:	21fe      	movs	r1, #254	@ 0xfe
 8007e6c:	0589      	lsls	r1, r1, #22
 8007e6e:	1c18      	adds	r0, r3, #0
 8007e70:	f7f8 fca4 	bl	80007bc <__aeabi_fadd>
 8007e74:	1c03      	adds	r3, r0, #0
 8007e76:	1c19      	adds	r1, r3, #0
 8007e78:	1c20      	adds	r0, r4, #0
 8007e7a:	f7f8 fe29 	bl	8000ad0 <__aeabi_fdiv>
 8007e7e:	1c03      	adds	r3, r0, #0
 8007e80:	68f9      	ldr	r1, [r7, #12]
 8007e82:	1c18      	adds	r0, r3, #0
 8007e84:	f7f9 f948 	bl	8001118 <__aeabi_fsub>
 8007e88:	1c03      	adds	r3, r0, #0
 8007e8a:	e01f      	b.n	8007ecc <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
                    shift);
        } else {
            return ((params->mIndex_Offset /
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	689a      	ldr	r2, [r3, #8]
                     params->m_Sigmoid_Scaled__Offset_Default) *
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2188      	movs	r1, #136	@ 0x88
 8007e94:	585b      	ldr	r3, [r3, r1]
            return ((params->mIndex_Offset /
 8007e96:	1c19      	adds	r1, r3, #0
 8007e98:	1c10      	adds	r0, r2, #0
 8007e9a:	f7f8 fe19 	bl	8000ad0 <__aeabi_fdiv>
 8007e9e:	1c03      	adds	r3, r0, #0
 8007ea0:	1c1c      	adds	r4, r3, #0
                    (GasIndexAlgorithm_SIGMOID_L / (1.f + expf(x))));
 8007ea2:	68bb      	ldr	r3, [r7, #8]
 8007ea4:	1c18      	adds	r0, r3, #0
 8007ea6:	f012 f9d9 	bl	801a25c <expf>
 8007eaa:	1c03      	adds	r3, r0, #0
 8007eac:	21fe      	movs	r1, #254	@ 0xfe
 8007eae:	0589      	lsls	r1, r1, #22
 8007eb0:	1c18      	adds	r0, r3, #0
 8007eb2:	f7f8 fc83 	bl	80007bc <__aeabi_fadd>
 8007eb6:	1c03      	adds	r3, r0, #0
 8007eb8:	1c19      	adds	r1, r3, #0
 8007eba:	4807      	ldr	r0, [pc, #28]	@ (8007ed8 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 8007ebc:	f7f8 fe08 	bl	8000ad0 <__aeabi_fdiv>
 8007ec0:	1c03      	adds	r3, r0, #0
                     params->m_Sigmoid_Scaled__Offset_Default) *
 8007ec2:	1c19      	adds	r1, r3, #0
 8007ec4:	1c20      	adds	r0, r4, #0
 8007ec6:	f7f8 ffe9 	bl	8000e9c <__aeabi_fmul>
 8007eca:	1c03      	adds	r3, r0, #0
        }
    }
}
 8007ecc:	1c18      	adds	r0, r3, #0
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	b005      	add	sp, #20
 8007ed2:	bd90      	pop	{r4, r7, pc}
 8007ed4:	c2480000 	.word	0xc2480000
 8007ed8:	43fa0000 	.word	0x43fa0000
 8007edc:	42480000 	.word	0x42480000
 8007ee0:	3f8041ab 	.word	0x3f8041ab
 8007ee4:	40a00000 	.word	0x40a00000

08007ee8 <GasIndexAlgorithm__adaptive_lowpass__set_parameters>:

static void GasIndexAlgorithm__adaptive_lowpass__set_parameters(
    GasIndexAlgorithmParams* params) {
 8007ee8:	b590      	push	{r4, r7, lr}
 8007eea:	b083      	sub	sp, #12
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]

    params->m_Adaptive_Lowpass__A1 =
        (params->mSamplingInterval /
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_FAST + params->mSamplingInterval));
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	685b      	ldr	r3, [r3, #4]
 8007ef8:	4913      	ldr	r1, [pc, #76]	@ (8007f48 <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x60>)
 8007efa:	1c18      	adds	r0, r3, #0
 8007efc:	f7f8 fc5e 	bl	80007bc <__aeabi_fadd>
 8007f00:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 8007f02:	1c19      	adds	r1, r3, #0
 8007f04:	1c20      	adds	r0, r4, #0
 8007f06:	f7f8 fde3 	bl	8000ad0 <__aeabi_fdiv>
 8007f0a:	1c03      	adds	r3, r0, #0
 8007f0c:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A1 =
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	228c      	movs	r2, #140	@ 0x8c
 8007f12:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass__A2 =
        (params->mSamplingInterval /
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_SLOW + params->mSamplingInterval));
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	685b      	ldr	r3, [r3, #4]
 8007f1c:	490b      	ldr	r1, [pc, #44]	@ (8007f4c <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x64>)
 8007f1e:	1c18      	adds	r0, r3, #0
 8007f20:	f7f8 fc4c 	bl	80007bc <__aeabi_fadd>
 8007f24:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 8007f26:	1c19      	adds	r1, r3, #0
 8007f28:	1c20      	adds	r0, r4, #0
 8007f2a:	f7f8 fdd1 	bl	8000ad0 <__aeabi_fdiv>
 8007f2e:	1c03      	adds	r3, r0, #0
 8007f30:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A2 =
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2290      	movs	r2, #144	@ 0x90
 8007f36:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___Initialized = false;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2294      	movs	r2, #148	@ 0x94
 8007f3c:	2100      	movs	r1, #0
 8007f3e:	5499      	strb	r1, [r3, r2]
}
 8007f40:	46c0      	nop			@ (mov r8, r8)
 8007f42:	46bd      	mov	sp, r7
 8007f44:	b003      	add	sp, #12
 8007f46:	bd90      	pop	{r4, r7, pc}
 8007f48:	41a00000 	.word	0x41a00000
 8007f4c:	43fa0000 	.word	0x43fa0000

08007f50 <GasIndexAlgorithm__adaptive_lowpass__process>:

static float
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample) {
 8007f50:	b590      	push	{r4, r7, lr}
 8007f52:	b087      	sub	sp, #28
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
 8007f58:	6039      	str	r1, [r7, #0]
    float abs_delta;
    float F1;
    float tau_a;
    float a3;

    if ((params->m_Adaptive_Lowpass___Initialized == false)) {
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	2294      	movs	r2, #148	@ 0x94
 8007f5e:	5c9b      	ldrb	r3, [r3, r2]
 8007f60:	2201      	movs	r2, #1
 8007f62:	4053      	eors	r3, r2
 8007f64:	b2db      	uxtb	r3, r3
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d00f      	beq.n	8007f8a <GasIndexAlgorithm__adaptive_lowpass__process+0x3a>
        params->m_Adaptive_Lowpass___X1 = sample;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	2198      	movs	r1, #152	@ 0x98
 8007f6e:	683a      	ldr	r2, [r7, #0]
 8007f70:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X2 = sample;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	219c      	movs	r1, #156	@ 0x9c
 8007f76:	683a      	ldr	r2, [r7, #0]
 8007f78:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X3 = sample;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	21a0      	movs	r1, #160	@ 0xa0
 8007f7e:	683a      	ldr	r2, [r7, #0]
 8007f80:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___Initialized = true;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	2294      	movs	r2, #148	@ 0x94
 8007f86:	2101      	movs	r1, #1
 8007f88:	5499      	strb	r1, [r3, r2]
    }
    params->m_Adaptive_Lowpass___X1 =
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	228c      	movs	r2, #140	@ 0x8c
 8007f8e:	589b      	ldr	r3, [r3, r2]
 8007f90:	1c19      	adds	r1, r3, #0
 8007f92:	20fe      	movs	r0, #254	@ 0xfe
 8007f94:	0580      	lsls	r0, r0, #22
 8007f96:	f7f9 f8bf 	bl	8001118 <__aeabi_fsub>
 8007f9a:	1c03      	adds	r3, r0, #0
 8007f9c:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X1) +
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2298      	movs	r2, #152	@ 0x98
 8007fa2:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 8007fa4:	1c19      	adds	r1, r3, #0
 8007fa6:	f7f8 ff79 	bl	8000e9c <__aeabi_fmul>
 8007faa:	1c03      	adds	r3, r0, #0
 8007fac:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A1 * sample));
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	228c      	movs	r2, #140	@ 0x8c
 8007fb2:	589b      	ldr	r3, [r3, r2]
 8007fb4:	6839      	ldr	r1, [r7, #0]
 8007fb6:	1c18      	adds	r0, r3, #0
 8007fb8:	f7f8 ff70 	bl	8000e9c <__aeabi_fmul>
 8007fbc:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X1) +
 8007fbe:	1c19      	adds	r1, r3, #0
 8007fc0:	1c20      	adds	r0, r4, #0
 8007fc2:	f7f8 fbfb 	bl	80007bc <__aeabi_fadd>
 8007fc6:	1c03      	adds	r3, r0, #0
 8007fc8:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X1 =
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	2298      	movs	r2, #152	@ 0x98
 8007fce:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___X2 =
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2290      	movs	r2, #144	@ 0x90
 8007fd4:	589b      	ldr	r3, [r3, r2]
 8007fd6:	1c19      	adds	r1, r3, #0
 8007fd8:	20fe      	movs	r0, #254	@ 0xfe
 8007fda:	0580      	lsls	r0, r0, #22
 8007fdc:	f7f9 f89c 	bl	8001118 <__aeabi_fsub>
 8007fe0:	1c03      	adds	r3, r0, #0
 8007fe2:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X2) +
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	229c      	movs	r2, #156	@ 0x9c
 8007fe8:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 8007fea:	1c19      	adds	r1, r3, #0
 8007fec:	f7f8 ff56 	bl	8000e9c <__aeabi_fmul>
 8007ff0:	1c03      	adds	r3, r0, #0
 8007ff2:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A2 * sample));
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2290      	movs	r2, #144	@ 0x90
 8007ff8:	589b      	ldr	r3, [r3, r2]
 8007ffa:	6839      	ldr	r1, [r7, #0]
 8007ffc:	1c18      	adds	r0, r3, #0
 8007ffe:	f7f8 ff4d 	bl	8000e9c <__aeabi_fmul>
 8008002:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X2) +
 8008004:	1c19      	adds	r1, r3, #0
 8008006:	1c20      	adds	r0, r4, #0
 8008008:	f7f8 fbd8 	bl	80007bc <__aeabi_fadd>
 800800c:	1c03      	adds	r3, r0, #0
 800800e:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X2 =
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	229c      	movs	r2, #156	@ 0x9c
 8008014:	5099      	str	r1, [r3, r2]
    abs_delta =
        (params->m_Adaptive_Lowpass___X1 - params->m_Adaptive_Lowpass___X2);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	2298      	movs	r2, #152	@ 0x98
 800801a:	589a      	ldr	r2, [r3, r2]
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	219c      	movs	r1, #156	@ 0x9c
 8008020:	585b      	ldr	r3, [r3, r1]
    abs_delta =
 8008022:	1c19      	adds	r1, r3, #0
 8008024:	1c10      	adds	r0, r2, #0
 8008026:	f7f9 f877 	bl	8001118 <__aeabi_fsub>
 800802a:	1c03      	adds	r3, r0, #0
 800802c:	617b      	str	r3, [r7, #20]
    if ((abs_delta < 0.f)) {
 800802e:	2100      	movs	r1, #0
 8008030:	6978      	ldr	r0, [r7, #20]
 8008032:	f7f8 fa4b 	bl	80004cc <__aeabi_fcmplt>
 8008036:	1e03      	subs	r3, r0, #0
 8008038:	d004      	beq.n	8008044 <GasIndexAlgorithm__adaptive_lowpass__process+0xf4>
        abs_delta = (-1.f * abs_delta);
 800803a:	697b      	ldr	r3, [r7, #20]
 800803c:	2280      	movs	r2, #128	@ 0x80
 800803e:	0612      	lsls	r2, r2, #24
 8008040:	4053      	eors	r3, r2
 8008042:	617b      	str	r3, [r7, #20]
    }
    F1 = expf((GasIndexAlgorithm_LP_ALPHA * abs_delta));
 8008044:	4923      	ldr	r1, [pc, #140]	@ (80080d4 <GasIndexAlgorithm__adaptive_lowpass__process+0x184>)
 8008046:	6978      	ldr	r0, [r7, #20]
 8008048:	f7f8 ff28 	bl	8000e9c <__aeabi_fmul>
 800804c:	1c03      	adds	r3, r0, #0
 800804e:	1c18      	adds	r0, r3, #0
 8008050:	f012 f904 	bl	801a25c <expf>
 8008054:	1c03      	adds	r3, r0, #0
 8008056:	613b      	str	r3, [r7, #16]
    tau_a = (((GasIndexAlgorithm_LP_TAU_SLOW - GasIndexAlgorithm_LP_TAU_FAST) *
 8008058:	491f      	ldr	r1, [pc, #124]	@ (80080d8 <GasIndexAlgorithm__adaptive_lowpass__process+0x188>)
 800805a:	6938      	ldr	r0, [r7, #16]
 800805c:	f7f8 ff1e 	bl	8000e9c <__aeabi_fmul>
 8008060:	1c03      	adds	r3, r0, #0
 8008062:	491e      	ldr	r1, [pc, #120]	@ (80080dc <GasIndexAlgorithm__adaptive_lowpass__process+0x18c>)
 8008064:	1c18      	adds	r0, r3, #0
 8008066:	f7f8 fba9 	bl	80007bc <__aeabi_fadd>
 800806a:	1c03      	adds	r3, r0, #0
 800806c:	60fb      	str	r3, [r7, #12]
              F1) +
             GasIndexAlgorithm_LP_TAU_FAST);
    a3 = (params->mSamplingInterval / (params->mSamplingInterval + tau_a));
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	685c      	ldr	r4, [r3, #4]
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	685b      	ldr	r3, [r3, #4]
 8008076:	68f9      	ldr	r1, [r7, #12]
 8008078:	1c18      	adds	r0, r3, #0
 800807a:	f7f8 fb9f 	bl	80007bc <__aeabi_fadd>
 800807e:	1c03      	adds	r3, r0, #0
 8008080:	1c19      	adds	r1, r3, #0
 8008082:	1c20      	adds	r0, r4, #0
 8008084:	f7f8 fd24 	bl	8000ad0 <__aeabi_fdiv>
 8008088:	1c03      	adds	r3, r0, #0
 800808a:	60bb      	str	r3, [r7, #8]
    params->m_Adaptive_Lowpass___X3 =
        (((1.f - a3) * params->m_Adaptive_Lowpass___X3) + (a3 * sample));
 800808c:	68b9      	ldr	r1, [r7, #8]
 800808e:	20fe      	movs	r0, #254	@ 0xfe
 8008090:	0580      	lsls	r0, r0, #22
 8008092:	f7f9 f841 	bl	8001118 <__aeabi_fsub>
 8008096:	1c03      	adds	r3, r0, #0
 8008098:	1c18      	adds	r0, r3, #0
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	22a0      	movs	r2, #160	@ 0xa0
 800809e:	589b      	ldr	r3, [r3, r2]
 80080a0:	1c19      	adds	r1, r3, #0
 80080a2:	f7f8 fefb 	bl	8000e9c <__aeabi_fmul>
 80080a6:	1c03      	adds	r3, r0, #0
 80080a8:	1c1c      	adds	r4, r3, #0
 80080aa:	6839      	ldr	r1, [r7, #0]
 80080ac:	68b8      	ldr	r0, [r7, #8]
 80080ae:	f7f8 fef5 	bl	8000e9c <__aeabi_fmul>
 80080b2:	1c03      	adds	r3, r0, #0
 80080b4:	1c19      	adds	r1, r3, #0
 80080b6:	1c20      	adds	r0, r4, #0
 80080b8:	f7f8 fb80 	bl	80007bc <__aeabi_fadd>
 80080bc:	1c03      	adds	r3, r0, #0
 80080be:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X3 =
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	22a0      	movs	r2, #160	@ 0xa0
 80080c4:	5099      	str	r1, [r3, r2]
    return params->m_Adaptive_Lowpass___X3;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	22a0      	movs	r2, #160	@ 0xa0
 80080ca:	589b      	ldr	r3, [r3, r2]
}
 80080cc:	1c18      	adds	r0, r3, #0
 80080ce:	46bd      	mov	sp, r7
 80080d0:	b007      	add	sp, #28
 80080d2:	bd90      	pop	{r4, r7, pc}
 80080d4:	be4ccccd 	.word	0xbe4ccccd
 80080d8:	43f00000 	.word	0x43f00000
 80080dc:	41a00000 	.word	0x41a00000

080080e0 <ReadRegister>:
//#define SGP_TEST_BUFFER_SIZE 6
//#define SGP_TEST_SEGMENT_SIZE 3
// static uint8_t SGP_TestBuffer[SGP_TEST_BUFFER_SIZE] = {0xBE, 0xEF, 0x92,
// 0xBE, 0xEF, 0x92};

static void ReadRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 80080e0:	b590      	push	{r4, r7, lr}
 80080e2:	b083      	sub	sp, #12
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6039      	str	r1, [r7, #0]
 80080e8:	0011      	movs	r1, r2
 80080ea:	1dfb      	adds	r3, r7, #7
 80080ec:	1c02      	adds	r2, r0, #0
 80080ee:	701a      	strb	r2, [r3, #0]
 80080f0:	1dbb      	adds	r3, r7, #6
 80080f2:	1c0a      	adds	r2, r1, #0
 80080f4:	701a      	strb	r2, [r3, #0]
  if (ReadFunction != NULL) {
 80080f6:	4b08      	ldr	r3, [pc, #32]	@ (8008118 <ReadRegister+0x38>)
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d008      	beq.n	8008110 <ReadRegister+0x30>
    ReadFunction(address, buffer, nrBytes);
 80080fe:	4b06      	ldr	r3, [pc, #24]	@ (8008118 <ReadRegister+0x38>)
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	1dba      	adds	r2, r7, #6
 8008104:	7814      	ldrb	r4, [r2, #0]
 8008106:	6839      	ldr	r1, [r7, #0]
 8008108:	1dfa      	adds	r2, r7, #7
 800810a:	7810      	ldrb	r0, [r2, #0]
 800810c:	0022      	movs	r2, r4
 800810e:	4798      	blx	r3
  }
}
 8008110:	46c0      	nop			@ (mov r8, r8)
 8008112:	46bd      	mov	sp, r7
 8008114:	b003      	add	sp, #12
 8008116:	bd90      	pop	{r4, r7, pc}
 8008118:	200026f8 	.word	0x200026f8

0800811c <WriteRegister>:

static void WriteRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 800811c:	b590      	push	{r4, r7, lr}
 800811e:	b083      	sub	sp, #12
 8008120:	af00      	add	r7, sp, #0
 8008122:	6039      	str	r1, [r7, #0]
 8008124:	0011      	movs	r1, r2
 8008126:	1dfb      	adds	r3, r7, #7
 8008128:	1c02      	adds	r2, r0, #0
 800812a:	701a      	strb	r2, [r3, #0]
 800812c:	1dbb      	adds	r3, r7, #6
 800812e:	1c0a      	adds	r2, r1, #0
 8008130:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 8008132:	4b08      	ldr	r3, [pc, #32]	@ (8008154 <WriteRegister+0x38>)
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d008      	beq.n	800814c <WriteRegister+0x30>
    WriteFunction(address, buffer, nrBytes);
 800813a:	4b06      	ldr	r3, [pc, #24]	@ (8008154 <WriteRegister+0x38>)
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	1dba      	adds	r2, r7, #6
 8008140:	7814      	ldrb	r4, [r2, #0]
 8008142:	6839      	ldr	r1, [r7, #0]
 8008144:	1dfa      	adds	r2, r7, #7
 8008146:	7810      	ldrb	r0, [r2, #0]
 8008148:	0022      	movs	r2, r4
 800814a:	4798      	blx	r3
  }
}
 800814c:	46c0      	nop			@ (mov r8, r8)
 800814e:	46bd      	mov	sp, r7
 8008150:	b003      	add	sp, #12
 8008152:	bd90      	pop	{r4, r7, pc}
 8008154:	200026fc 	.word	0x200026fc

08008158 <SGP_Init>:

void SGP_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 8008158:	b580      	push	{r7, lr}
 800815a:	b082      	sub	sp, #8
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
 8008160:	6039      	str	r1, [r7, #0]
  ReadFunction = readFunction;
 8008162:	4b07      	ldr	r3, [pc, #28]	@ (8008180 <SGP_Init+0x28>)
 8008164:	687a      	ldr	r2, [r7, #4]
 8008166:	601a      	str	r2, [r3, #0]
  WriteFunction = writeFunction;
 8008168:	4b06      	ldr	r3, [pc, #24]	@ (8008184 <SGP_Init+0x2c>)
 800816a:	683a      	ldr	r2, [r7, #0]
 800816c:	601a      	str	r2, [r3, #0]
  GasIndexAlgorithm_init(&params, GasIndexAlgorithm_ALGORITHM_TYPE_VOC);
 800816e:	4b06      	ldr	r3, [pc, #24]	@ (8008188 <SGP_Init+0x30>)
 8008170:	2100      	movs	r1, #0
 8008172:	0018      	movs	r0, r3
 8008174:	f7ff f930 	bl	80073d8 <GasIndexAlgorithm_init>
}
 8008178:	46c0      	nop			@ (mov r8, r8)
 800817a:	46bd      	mov	sp, r7
 800817c:	b002      	add	sp, #8
 800817e:	bd80      	pop	{r7, pc}
 8008180:	200026f8 	.word	0x200026f8
 8008184:	200026fc 	.word	0x200026fc
 8008188:	2000270c 	.word	0x2000270c

0800818c <SGP_StartMeasurement>:

void SGP_StartMeasurement(void) {
 800818c:	b580      	push	{r7, lr}
 800818e:	af00      	add	r7, sp, #0
  if(HT_MeasurementReceived){
 8008190:	4b13      	ldr	r3, [pc, #76]	@ (80081e0 <SGP_StartMeasurement+0x54>)
 8008192:	781b      	ldrb	r3, [r3, #0]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d00d      	beq.n	80081b4 <SGP_StartMeasurement+0x28>
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 8008198:	4b12      	ldr	r3, [pc, #72]	@ (80081e4 <SGP_StartMeasurement+0x58>)
 800819a:	2208      	movs	r2, #8
 800819c:	0019      	movs	r1, r3
 800819e:	2059      	movs	r0, #89	@ 0x59
 80081a0:	f7ff ffbc 	bl	800811c <WriteRegister>
    SGP_IdleTime = GetCurrentHalTicks() + SGP_SENSOR_IDLE_TIME;
 80081a4:	f001 fad4 	bl	8009750 <GetCurrentHalTicks>
 80081a8:	0003      	movs	r3, r0
 80081aa:	331e      	adds	r3, #30
 80081ac:	001a      	movs	r2, r3
 80081ae:	4b0e      	ldr	r3, [pc, #56]	@ (80081e8 <SGP_StartMeasurement+0x5c>)
 80081b0:	601a      	str	r2, [r3, #0]
 80081b2:	e00c      	b.n	80081ce <SGP_StartMeasurement+0x42>
  }
  else{
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 80081b4:	4b0d      	ldr	r3, [pc, #52]	@ (80081ec <SGP_StartMeasurement+0x60>)
 80081b6:	2208      	movs	r2, #8
 80081b8:	0019      	movs	r1, r3
 80081ba:	2059      	movs	r0, #89	@ 0x59
 80081bc:	f7ff ffae 	bl	800811c <WriteRegister>
    SGP_HeatUpTime = GetCurrentHalTicks() + SGP_SENSOR_HEATUP_TIME;
 80081c0:	f001 fac6 	bl	8009750 <GetCurrentHalTicks>
 80081c4:	0003      	movs	r3, r0
 80081c6:	33aa      	adds	r3, #170	@ 0xaa
 80081c8:	001a      	movs	r2, r3
 80081ca:	4b09      	ldr	r3, [pc, #36]	@ (80081f0 <SGP_StartMeasurement+0x64>)
 80081cc:	601a      	str	r2, [r3, #0]
  }
  HeatUpIsDone = false;
 80081ce:	4b09      	ldr	r3, [pc, #36]	@ (80081f4 <SGP_StartMeasurement+0x68>)
 80081d0:	2200      	movs	r2, #0
 80081d2:	701a      	strb	r2, [r3, #0]
  MeasurementIsReady = false;
 80081d4:	4b08      	ldr	r3, [pc, #32]	@ (80081f8 <SGP_StartMeasurement+0x6c>)
 80081d6:	2200      	movs	r2, #0
 80081d8:	701a      	strb	r2, [r3, #0]
}
 80081da:	46c0      	nop			@ (mov r8, r8)
 80081dc:	46bd      	mov	sp, r7
 80081de:	bd80      	pop	{r7, pc}
 80081e0:	200027b4 	.word	0x200027b4
 80081e4:	20000088 	.word	0x20000088
 80081e8:	2000009c 	.word	0x2000009c
 80081ec:	20000080 	.word	0x20000080
 80081f0:	20000094 	.word	0x20000094
 80081f4:	2000270a 	.word	0x2000270a
 80081f8:	2000270b 	.word	0x2000270b

080081fc <SGP_HeatedUp>:

static bool SGP_HeatedUp(void) { return TimestampIsReached(SGP_HeatUpTime); }
 80081fc:	b580      	push	{r7, lr}
 80081fe:	af00      	add	r7, sp, #0
 8008200:	4b04      	ldr	r3, [pc, #16]	@ (8008214 <SGP_HeatedUp+0x18>)
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	0018      	movs	r0, r3
 8008206:	f001 f9c1 	bl	800958c <TimestampIsReached>
 800820a:	0003      	movs	r3, r0
 800820c:	0018      	movs	r0, r3
 800820e:	46bd      	mov	sp, r7
 8008210:	bd80      	pop	{r7, pc}
 8008212:	46c0      	nop			@ (mov r8, r8)
 8008214:	20000094 	.word	0x20000094

08008218 <SGP_MeasurementReady>:

static bool SGP_MeasurementReady(void) {
 8008218:	b580      	push	{r7, lr}
 800821a:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_IdleTime);
 800821c:	4b04      	ldr	r3, [pc, #16]	@ (8008230 <SGP_MeasurementReady+0x18>)
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	0018      	movs	r0, r3
 8008222:	f001 f9b3 	bl	800958c <TimestampIsReached>
 8008226:	0003      	movs	r3, r0
}
 8008228:	0018      	movs	r0, r3
 800822a:	46bd      	mov	sp, r7
 800822c:	bd80      	pop	{r7, pc}
 800822e:	46c0      	nop			@ (mov r8, r8)
 8008230:	2000009c 	.word	0x2000009c

08008234 <SGP_MeasurementDone>:

static bool SGP_MeasurementDone(void) {
 8008234:	b580      	push	{r7, lr}
 8008236:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_MeasurementDutyCycle);
 8008238:	4b04      	ldr	r3, [pc, #16]	@ (800824c <SGP_MeasurementDone+0x18>)
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	0018      	movs	r0, r3
 800823e:	f001 f9a5 	bl	800958c <TimestampIsReached>
 8008242:	0003      	movs	r3, r0
}
 8008244:	0018      	movs	r0, r3
 8008246:	46bd      	mov	sp, r7
 8008248:	bd80      	pop	{r7, pc}
 800824a:	46c0      	nop			@ (mov r8, r8)
 800824c:	20000098 	.word	0x20000098

08008250 <SGP_TurnHeaterOff>:

void SGP_TurnHeaterOff(void) {
 8008250:	b580      	push	{r7, lr}
 8008252:	af00      	add	r7, sp, #0
  // This command could take from 0.1 to 1ms.
  WriteRegister(SGP_I2C_ADDRESS, TurnHeaterOffBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 8008254:	4b04      	ldr	r3, [pc, #16]	@ (8008268 <SGP_TurnHeaterOff+0x18>)
 8008256:	2202      	movs	r2, #2
 8008258:	0019      	movs	r1, r3
 800825a:	2059      	movs	r0, #89	@ 0x59
 800825c:	f7ff ff5e 	bl	800811c <WriteRegister>
}
 8008260:	46c0      	nop			@ (mov r8, r8)
 8008262:	46bd      	mov	sp, r7
 8008264:	bd80      	pop	{r7, pc}
 8008266:	46c0      	nop			@ (mov r8, r8)
 8008268:	20000078 	.word	0x20000078

0800826c <SGP_GetMeasurementValues>:

bool SGP_GetMeasurementValues(int32_t *vocIndex) {
 800826c:	b5b0      	push	{r4, r5, r7, lr}
 800826e:	b086      	sub	sp, #24
 8008270:	af02      	add	r7, sp, #8
 8008272:	6078      	str	r0, [r7, #4]
  if (SGP_HeatedUp() && !HeatUpIsDone && !SGP_MsgSent) {
 8008274:	f7ff ffc2 	bl	80081fc <SGP_HeatedUp>
 8008278:	1e03      	subs	r3, r0, #0
 800827a:	d038      	beq.n	80082ee <SGP_GetMeasurementValues+0x82>
 800827c:	4bd8      	ldr	r3, [pc, #864]	@ (80085e0 <SGP_GetMeasurementValues+0x374>)
 800827e:	781b      	ldrb	r3, [r3, #0]
 8008280:	2201      	movs	r2, #1
 8008282:	4053      	eors	r3, r2
 8008284:	b2db      	uxtb	r3, r3
 8008286:	2b00      	cmp	r3, #0
 8008288:	d031      	beq.n	80082ee <SGP_GetMeasurementValues+0x82>
 800828a:	4bd6      	ldr	r3, [pc, #856]	@ (80085e4 <SGP_GetMeasurementValues+0x378>)
 800828c:	781b      	ldrb	r3, [r3, #0]
 800828e:	2201      	movs	r2, #1
 8008290:	4053      	eors	r3, r2
 8008292:	b2db      	uxtb	r3, r3
 8008294:	2b00      	cmp	r3, #0
 8008296:	d02a      	beq.n	80082ee <SGP_GetMeasurementValues+0x82>
    Debug("SGP is heated up, starting the measurement.");
 8008298:	4ad3      	ldr	r2, [pc, #844]	@ (80085e8 <SGP_GetMeasurementValues+0x37c>)
 800829a:	4bd4      	ldr	r3, [pc, #848]	@ (80085ec <SGP_GetMeasurementValues+0x380>)
 800829c:	0019      	movs	r1, r3
 800829e:	2003      	movs	r0, #3
 80082a0:	f001 f9ca 	bl	8009638 <CreateLine>
    HeatUpIsDone = true;
 80082a4:	4bce      	ldr	r3, [pc, #824]	@ (80085e0 <SGP_GetMeasurementValues+0x374>)
 80082a6:	2201      	movs	r2, #1
 80082a8:	701a      	strb	r2, [r3, #0]
    // SGP is heated up, we ignore the output and start another measurement.
    if(HT_MeasurementReceived){
 80082aa:	4bd1      	ldr	r3, [pc, #836]	@ (80085f0 <SGP_GetMeasurementValues+0x384>)
 80082ac:	781b      	ldrb	r3, [r3, #0]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d00d      	beq.n	80082ce <SGP_GetMeasurementValues+0x62>
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 80082b2:	4bd0      	ldr	r3, [pc, #832]	@ (80085f4 <SGP_GetMeasurementValues+0x388>)
 80082b4:	2208      	movs	r2, #8
 80082b6:	0019      	movs	r1, r3
 80082b8:	2059      	movs	r0, #89	@ 0x59
 80082ba:	f7ff ff2f 	bl	800811c <WriteRegister>
      SGP_IdleTime = GetCurrentHalTicks() + SGP_SENSOR_IDLE_TIME;
 80082be:	f001 fa47 	bl	8009750 <GetCurrentHalTicks>
 80082c2:	0003      	movs	r3, r0
 80082c4:	331e      	adds	r3, #30
 80082c6:	001a      	movs	r2, r3
 80082c8:	4bcb      	ldr	r3, [pc, #812]	@ (80085f8 <SGP_GetMeasurementValues+0x38c>)
 80082ca:	601a      	str	r2, [r3, #0]
 80082cc:	e00c      	b.n	80082e8 <SGP_GetMeasurementValues+0x7c>
    }
    else{
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 80082ce:	4bcb      	ldr	r3, [pc, #812]	@ (80085fc <SGP_GetMeasurementValues+0x390>)
 80082d0:	2208      	movs	r2, #8
 80082d2:	0019      	movs	r1, r3
 80082d4:	2059      	movs	r0, #89	@ 0x59
 80082d6:	f7ff ff21 	bl	800811c <WriteRegister>
      SGP_IdleTime = GetCurrentHalTicks() + SGP_SENSOR_IDLE_TIME;
 80082da:	f001 fa39 	bl	8009750 <GetCurrentHalTicks>
 80082de:	0003      	movs	r3, r0
 80082e0:	331e      	adds	r3, #30
 80082e2:	001a      	movs	r2, r3
 80082e4:	4bc4      	ldr	r3, [pc, #784]	@ (80085f8 <SGP_GetMeasurementValues+0x38c>)
 80082e6:	601a      	str	r2, [r3, #0]
    }
    SGP_MsgSent = true;
 80082e8:	4bbe      	ldr	r3, [pc, #760]	@ (80085e4 <SGP_GetMeasurementValues+0x378>)
 80082ea:	2201      	movs	r2, #1
 80082ec:	701a      	strb	r2, [r3, #0]
  }
  if (HeatUpIsDone && SGP_MeasurementReady() && !MeasurementIsReady) {
 80082ee:	4bbc      	ldr	r3, [pc, #752]	@ (80085e0 <SGP_GetMeasurementValues+0x374>)
 80082f0:	781b      	ldrb	r3, [r3, #0]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d100      	bne.n	80082f8 <SGP_GetMeasurementValues+0x8c>
 80082f6:	e1b1      	b.n	800865c <SGP_GetMeasurementValues+0x3f0>
 80082f8:	f7ff ff8e 	bl	8008218 <SGP_MeasurementReady>
 80082fc:	1e03      	subs	r3, r0, #0
 80082fe:	d100      	bne.n	8008302 <SGP_GetMeasurementValues+0x96>
 8008300:	e1ac      	b.n	800865c <SGP_GetMeasurementValues+0x3f0>
 8008302:	4bbf      	ldr	r3, [pc, #764]	@ (8008600 <SGP_GetMeasurementValues+0x394>)
 8008304:	781b      	ldrb	r3, [r3, #0]
 8008306:	2201      	movs	r2, #1
 8008308:	4053      	eors	r3, r2
 800830a:	b2db      	uxtb	r3, r3
 800830c:	2b00      	cmp	r3, #0
 800830e:	d100      	bne.n	8008312 <SGP_GetMeasurementValues+0xa6>
 8008310:	e1a4      	b.n	800865c <SGP_GetMeasurementValues+0x3f0>
    Debug("SGP_Measurement[%i] is ready, reading buffer.", SGP_AmountOfSamplesDone + 1);
 8008312:	4bbc      	ldr	r3, [pc, #752]	@ (8008604 <SGP_GetMeasurementValues+0x398>)
 8008314:	781b      	ldrb	r3, [r3, #0]
 8008316:	3301      	adds	r3, #1
 8008318:	4abb      	ldr	r2, [pc, #748]	@ (8008608 <SGP_GetMeasurementValues+0x39c>)
 800831a:	49b4      	ldr	r1, [pc, #720]	@ (80085ec <SGP_GetMeasurementValues+0x380>)
 800831c:	2003      	movs	r0, #3
 800831e:	f001 f98b 	bl	8009638 <CreateLine>
    MeasurementIsReady = true;
 8008322:	4bb7      	ldr	r3, [pc, #732]	@ (8008600 <SGP_GetMeasurementValues+0x394>)
 8008324:	2201      	movs	r2, #1
 8008326:	701a      	strb	r2, [r3, #0]
    // Measurement is ready to be read, also turning the heater off.
    ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH);
 8008328:	4bb8      	ldr	r3, [pc, #736]	@ (800860c <SGP_GetMeasurementValues+0x3a0>)
 800832a:	2203      	movs	r2, #3
 800832c:	0019      	movs	r1, r3
 800832e:	2059      	movs	r0, #89	@ 0x59
 8008330:	f7ff fed6 	bl	80080e0 <ReadRegister>
    if (!CheckCRC(SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH, SGP_MEASURE_BUFFER_RESPONSE_LENGTH)) {
 8008334:	4bb5      	ldr	r3, [pc, #724]	@ (800860c <SGP_GetMeasurementValues+0x3a0>)
 8008336:	2203      	movs	r2, #3
 8008338:	2103      	movs	r1, #3
 800833a:	0018      	movs	r0, r3
 800833c:	f000 f9f4 	bl	8008728 <CheckCRC>
 8008340:	0003      	movs	r3, r0
 8008342:	001a      	movs	r2, r3
 8008344:	2301      	movs	r3, #1
 8008346:	4053      	eors	r3, r2
 8008348:	b2db      	uxtb	r3, r3
 800834a:	2b00      	cmp	r3, #0
 800834c:	d02a      	beq.n	80083a4 <SGP_GetMeasurementValues+0x138>
      Error("SGP measurements CRC check failed.");
 800834e:	4ab0      	ldr	r2, [pc, #704]	@ (8008610 <SGP_GetMeasurementValues+0x3a4>)
 8008350:	4bb0      	ldr	r3, [pc, #704]	@ (8008614 <SGP_GetMeasurementValues+0x3a8>)
 8008352:	0019      	movs	r1, r3
 8008354:	2001      	movs	r0, #1
 8008356:	f001 f96f 	bl	8009638 <CreateLine>
      Info("SGP_Measure buffer structure:");
 800835a:	4aaf      	ldr	r2, [pc, #700]	@ (8008618 <SGP_GetMeasurementValues+0x3ac>)
 800835c:	4baf      	ldr	r3, [pc, #700]	@ (800861c <SGP_GetMeasurementValues+0x3b0>)
 800835e:	0019      	movs	r1, r3
 8008360:	2002      	movs	r0, #2
 8008362:	f001 f969 	bl	8009638 <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 8008366:	230f      	movs	r3, #15
 8008368:	18fb      	adds	r3, r7, r3
 800836a:	2200      	movs	r2, #0
 800836c:	701a      	strb	r2, [r3, #0]
 800836e:	e012      	b.n	8008396 <SGP_GetMeasurementValues+0x12a>
        Debug("SGP_Measurement buffer[%d]: %d", i, SGP_ReadBuffer[i]);
 8008370:	240f      	movs	r4, #15
 8008372:	193b      	adds	r3, r7, r4
 8008374:	7818      	ldrb	r0, [r3, #0]
 8008376:	193b      	adds	r3, r7, r4
 8008378:	781b      	ldrb	r3, [r3, #0]
 800837a:	4aa4      	ldr	r2, [pc, #656]	@ (800860c <SGP_GetMeasurementValues+0x3a0>)
 800837c:	5cd3      	ldrb	r3, [r2, r3]
 800837e:	4aa8      	ldr	r2, [pc, #672]	@ (8008620 <SGP_GetMeasurementValues+0x3b4>)
 8008380:	499a      	ldr	r1, [pc, #616]	@ (80085ec <SGP_GetMeasurementValues+0x380>)
 8008382:	9300      	str	r3, [sp, #0]
 8008384:	0003      	movs	r3, r0
 8008386:	2003      	movs	r0, #3
 8008388:	f001 f956 	bl	8009638 <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 800838c:	193b      	adds	r3, r7, r4
 800838e:	781a      	ldrb	r2, [r3, #0]
 8008390:	193b      	adds	r3, r7, r4
 8008392:	3201      	adds	r2, #1
 8008394:	701a      	strb	r2, [r3, #0]
 8008396:	230f      	movs	r3, #15
 8008398:	18fb      	adds	r3, r7, r3
 800839a:	781b      	ldrb	r3, [r3, #0]
 800839c:	2b02      	cmp	r3, #2
 800839e:	d9e7      	bls.n	8008370 <SGP_GetMeasurementValues+0x104>
      }
      return false;
 80083a0:	2300      	movs	r3, #0
 80083a2:	e173      	b.n	800868c <SGP_GetMeasurementValues+0x420>
    }
    SGP_MeasurementDutyCycle = GetCurrentHalTicks() + SGP_SENSOR_DUTYCYCLE;
 80083a4:	f001 f9d4 	bl	8009750 <GetCurrentHalTicks>
 80083a8:	0003      	movs	r3, r0
 80083aa:	22fa      	movs	r2, #250	@ 0xfa
 80083ac:	0092      	lsls	r2, r2, #2
 80083ae:	189a      	adds	r2, r3, r2
 80083b0:	4b9c      	ldr	r3, [pc, #624]	@ (8008624 <SGP_GetMeasurementValues+0x3b8>)
 80083b2:	601a      	str	r2, [r3, #0]
    SGP_TurnHeaterOff();
 80083b4:	f7ff ff4c 	bl	8008250 <SGP_TurnHeaterOff>
    SGP_AmountOfSamplesDone += 1;
 80083b8:	4b92      	ldr	r3, [pc, #584]	@ (8008604 <SGP_GetMeasurementValues+0x398>)
 80083ba:	781b      	ldrb	r3, [r3, #0]
 80083bc:	3301      	adds	r3, #1
 80083be:	b2da      	uxtb	r2, r3
 80083c0:	4b90      	ldr	r3, [pc, #576]	@ (8008604 <SGP_GetMeasurementValues+0x398>)
 80083c2:	701a      	strb	r2, [r3, #0]
    if (SGP_AmountOfSamplesDone >= SGP_TotalSamples) {
 80083c4:	4b8f      	ldr	r3, [pc, #572]	@ (8008604 <SGP_GetMeasurementValues+0x398>)
 80083c6:	781a      	ldrb	r2, [r3, #0]
 80083c8:	4b97      	ldr	r3, [pc, #604]	@ (8008628 <SGP_GetMeasurementValues+0x3bc>)
 80083ca:	781b      	ldrb	r3, [r3, #0]
 80083cc:	429a      	cmp	r2, r3
 80083ce:	d200      	bcs.n	80083d2 <SGP_GetMeasurementValues+0x166>
 80083d0:	e144      	b.n	800865c <SGP_GetMeasurementValues+0x3f0>
      uint16_t rawSignal = ((SGP_ReadBuffer[1] << 8) | (SGP_ReadBuffer[0]));
 80083d2:	4b8e      	ldr	r3, [pc, #568]	@ (800860c <SGP_GetMeasurementValues+0x3a0>)
 80083d4:	785b      	ldrb	r3, [r3, #1]
 80083d6:	021b      	lsls	r3, r3, #8
 80083d8:	b21a      	sxth	r2, r3
 80083da:	4b8c      	ldr	r3, [pc, #560]	@ (800860c <SGP_GetMeasurementValues+0x3a0>)
 80083dc:	781b      	ldrb	r3, [r3, #0]
 80083de:	b21b      	sxth	r3, r3
 80083e0:	4313      	orrs	r3, r2
 80083e2:	b21a      	sxth	r2, r3
 80083e4:	240c      	movs	r4, #12
 80083e6:	193b      	adds	r3, r7, r4
 80083e8:	801a      	strh	r2, [r3, #0]
      Debug("rawSignal value: %d", rawSignal);
 80083ea:	193b      	adds	r3, r7, r4
 80083ec:	881b      	ldrh	r3, [r3, #0]
 80083ee:	4a8f      	ldr	r2, [pc, #572]	@ (800862c <SGP_GetMeasurementValues+0x3c0>)
 80083f0:	497e      	ldr	r1, [pc, #504]	@ (80085ec <SGP_GetMeasurementValues+0x380>)
 80083f2:	2003      	movs	r0, #3
 80083f4:	f001 f920 	bl	8009638 <CreateLine>
      int32_t tempVocIndex = 0;
 80083f8:	2300      	movs	r3, #0
 80083fa:	60bb      	str	r3, [r7, #8]
      GasIndexAlgorithm_process(&params, rawSignal, &tempVocIndex);
 80083fc:	193b      	adds	r3, r7, r4
 80083fe:	8819      	ldrh	r1, [r3, #0]
 8008400:	2308      	movs	r3, #8
 8008402:	18fa      	adds	r2, r7, r3
 8008404:	4b8a      	ldr	r3, [pc, #552]	@ (8008630 <SGP_GetMeasurementValues+0x3c4>)
 8008406:	0018      	movs	r0, r3
 8008408:	f7ff f848 	bl	800749c <GasIndexAlgorithm_process>
      Debug("vocIndex value: %d", tempVocIndex);
 800840c:	68bb      	ldr	r3, [r7, #8]
 800840e:	4a89      	ldr	r2, [pc, #548]	@ (8008634 <SGP_GetMeasurementValues+0x3c8>)
 8008410:	4976      	ldr	r1, [pc, #472]	@ (80085ec <SGP_GetMeasurementValues+0x380>)
 8008412:	2003      	movs	r0, #3
 8008414:	f001 f910 	bl	8009638 <CreateLine>
//      *vocIndex = 1337;
      *vocIndex = tempVocIndex;
 8008418:	68ba      	ldr	r2, [r7, #8]
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	601a      	str	r2, [r3, #0]
      if(*vocIndex > 0){
        // TODO add status LED logic.
//        HAL_GPIO_TogglePin(STATUS2_LED_GPIO_Port, STATUS2_LED_Pin);
      }
      if(*vocIndex > 0 && *vocIndex <= 100){
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	2b00      	cmp	r3, #0
 8008424:	dd5d      	ble.n	80084e2 <SGP_GetMeasurementValues+0x276>
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	2b64      	cmp	r3, #100	@ 0x64
 800842c:	dc59      	bgt.n	80084e2 <SGP_GetMeasurementValues+0x276>
      Green = (1.0-(*vocIndex/100.0))*TimeValue;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	0018      	movs	r0, r3
 8008434:	f7fa ff42 	bl	80032bc <__aeabi_i2d>
 8008438:	2200      	movs	r2, #0
 800843a:	4b7f      	ldr	r3, [pc, #508]	@ (8008638 <SGP_GetMeasurementValues+0x3cc>)
 800843c:	f7f9 fc38 	bl	8001cb0 <__aeabi_ddiv>
 8008440:	0002      	movs	r2, r0
 8008442:	000b      	movs	r3, r1
 8008444:	2000      	movs	r0, #0
 8008446:	497d      	ldr	r1, [pc, #500]	@ (800863c <SGP_GetMeasurementValues+0x3d0>)
 8008448:	f7fa fb3e 	bl	8002ac8 <__aeabi_dsub>
 800844c:	0002      	movs	r2, r0
 800844e:	000b      	movs	r3, r1
 8008450:	0014      	movs	r4, r2
 8008452:	001d      	movs	r5, r3
 8008454:	4b7a      	ldr	r3, [pc, #488]	@ (8008640 <SGP_GetMeasurementValues+0x3d4>)
 8008456:	881b      	ldrh	r3, [r3, #0]
 8008458:	0018      	movs	r0, r3
 800845a:	f7fa ff2f 	bl	80032bc <__aeabi_i2d>
 800845e:	0002      	movs	r2, r0
 8008460:	000b      	movs	r3, r1
 8008462:	0020      	movs	r0, r4
 8008464:	0029      	movs	r1, r5
 8008466:	f7fa f867 	bl	8002538 <__aeabi_dmul>
 800846a:	0002      	movs	r2, r0
 800846c:	000b      	movs	r3, r1
 800846e:	0010      	movs	r0, r2
 8008470:	0019      	movs	r1, r3
 8008472:	f7f8 f8b9 	bl	80005e8 <__aeabi_d2uiz>
 8008476:	0003      	movs	r3, r0
 8008478:	b29a      	uxth	r2, r3
 800847a:	4b72      	ldr	r3, [pc, #456]	@ (8008644 <SGP_GetMeasurementValues+0x3d8>)
 800847c:	801a      	strh	r2, [r3, #0]
      Blue = (*vocIndex/100.0)*TimeValue;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	0018      	movs	r0, r3
 8008484:	f7fa ff1a 	bl	80032bc <__aeabi_i2d>
 8008488:	2200      	movs	r2, #0
 800848a:	4b6b      	ldr	r3, [pc, #428]	@ (8008638 <SGP_GetMeasurementValues+0x3cc>)
 800848c:	f7f9 fc10 	bl	8001cb0 <__aeabi_ddiv>
 8008490:	0002      	movs	r2, r0
 8008492:	000b      	movs	r3, r1
 8008494:	0014      	movs	r4, r2
 8008496:	001d      	movs	r5, r3
 8008498:	4b69      	ldr	r3, [pc, #420]	@ (8008640 <SGP_GetMeasurementValues+0x3d4>)
 800849a:	881b      	ldrh	r3, [r3, #0]
 800849c:	0018      	movs	r0, r3
 800849e:	f7fa ff0d 	bl	80032bc <__aeabi_i2d>
 80084a2:	0002      	movs	r2, r0
 80084a4:	000b      	movs	r3, r1
 80084a6:	0020      	movs	r0, r4
 80084a8:	0029      	movs	r1, r5
 80084aa:	f7fa f845 	bl	8002538 <__aeabi_dmul>
 80084ae:	0002      	movs	r2, r0
 80084b0:	000b      	movs	r3, r1
 80084b2:	0010      	movs	r0, r2
 80084b4:	0019      	movs	r1, r3
 80084b6:	f7f8 f897 	bl	80005e8 <__aeabi_d2uiz>
 80084ba:	0003      	movs	r3, r0
 80084bc:	b29a      	uxth	r2, r3
 80084be:	4b62      	ldr	r3, [pc, #392]	@ (8008648 <SGP_GetMeasurementValues+0x3dc>)
 80084c0:	801a      	strh	r2, [r3, #0]
      Red = TimeValue;
 80084c2:	4b5f      	ldr	r3, [pc, #380]	@ (8008640 <SGP_GetMeasurementValues+0x3d4>)
 80084c4:	881a      	ldrh	r2, [r3, #0]
 80084c6:	4b61      	ldr	r3, [pc, #388]	@ (800864c <SGP_GetMeasurementValues+0x3e0>)
 80084c8:	801a      	strh	r2, [r3, #0]
      TIM3->CCR1 = Red;
 80084ca:	4b60      	ldr	r3, [pc, #384]	@ (800864c <SGP_GetMeasurementValues+0x3e0>)
 80084cc:	881a      	ldrh	r2, [r3, #0]
 80084ce:	4b60      	ldr	r3, [pc, #384]	@ (8008650 <SGP_GetMeasurementValues+0x3e4>)
 80084d0:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3->CCR2 = Green;
 80084d2:	4b5c      	ldr	r3, [pc, #368]	@ (8008644 <SGP_GetMeasurementValues+0x3d8>)
 80084d4:	881a      	ldrh	r2, [r3, #0]
 80084d6:	4b5e      	ldr	r3, [pc, #376]	@ (8008650 <SGP_GetMeasurementValues+0x3e4>)
 80084d8:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3->CCR3 = Blue;
 80084da:	4b5b      	ldr	r3, [pc, #364]	@ (8008648 <SGP_GetMeasurementValues+0x3dc>)
 80084dc:	881a      	ldrh	r2, [r3, #0]
 80084de:	4b5c      	ldr	r3, [pc, #368]	@ (8008650 <SGP_GetMeasurementValues+0x3e4>)
 80084e0:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
      if(*vocIndex > 100){
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	2b64      	cmp	r3, #100	@ 0x64
 80084e8:	dd69      	ble.n	80085be <SGP_GetMeasurementValues+0x352>
        Green = (((*vocIndex-100.0)/400.0))*TimeValue;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	0018      	movs	r0, r3
 80084f0:	f7fa fee4 	bl	80032bc <__aeabi_i2d>
 80084f4:	2200      	movs	r2, #0
 80084f6:	4b50      	ldr	r3, [pc, #320]	@ (8008638 <SGP_GetMeasurementValues+0x3cc>)
 80084f8:	f7fa fae6 	bl	8002ac8 <__aeabi_dsub>
 80084fc:	0002      	movs	r2, r0
 80084fe:	000b      	movs	r3, r1
 8008500:	0010      	movs	r0, r2
 8008502:	0019      	movs	r1, r3
 8008504:	2200      	movs	r2, #0
 8008506:	4b53      	ldr	r3, [pc, #332]	@ (8008654 <SGP_GetMeasurementValues+0x3e8>)
 8008508:	f7f9 fbd2 	bl	8001cb0 <__aeabi_ddiv>
 800850c:	0002      	movs	r2, r0
 800850e:	000b      	movs	r3, r1
 8008510:	0014      	movs	r4, r2
 8008512:	001d      	movs	r5, r3
 8008514:	4b4a      	ldr	r3, [pc, #296]	@ (8008640 <SGP_GetMeasurementValues+0x3d4>)
 8008516:	881b      	ldrh	r3, [r3, #0]
 8008518:	0018      	movs	r0, r3
 800851a:	f7fa fecf 	bl	80032bc <__aeabi_i2d>
 800851e:	0002      	movs	r2, r0
 8008520:	000b      	movs	r3, r1
 8008522:	0020      	movs	r0, r4
 8008524:	0029      	movs	r1, r5
 8008526:	f7fa f807 	bl	8002538 <__aeabi_dmul>
 800852a:	0002      	movs	r2, r0
 800852c:	000b      	movs	r3, r1
 800852e:	0010      	movs	r0, r2
 8008530:	0019      	movs	r1, r3
 8008532:	f7f8 f859 	bl	80005e8 <__aeabi_d2uiz>
 8008536:	0003      	movs	r3, r0
 8008538:	b29a      	uxth	r2, r3
 800853a:	4b42      	ldr	r3, [pc, #264]	@ (8008644 <SGP_GetMeasurementValues+0x3d8>)
 800853c:	801a      	strh	r2, [r3, #0]
        Red = (1.0-((*vocIndex-100.0)/400.0))*TimeValue;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	0018      	movs	r0, r3
 8008544:	f7fa feba 	bl	80032bc <__aeabi_i2d>
 8008548:	2200      	movs	r2, #0
 800854a:	4b3b      	ldr	r3, [pc, #236]	@ (8008638 <SGP_GetMeasurementValues+0x3cc>)
 800854c:	f7fa fabc 	bl	8002ac8 <__aeabi_dsub>
 8008550:	0002      	movs	r2, r0
 8008552:	000b      	movs	r3, r1
 8008554:	0010      	movs	r0, r2
 8008556:	0019      	movs	r1, r3
 8008558:	2200      	movs	r2, #0
 800855a:	4b3e      	ldr	r3, [pc, #248]	@ (8008654 <SGP_GetMeasurementValues+0x3e8>)
 800855c:	f7f9 fba8 	bl	8001cb0 <__aeabi_ddiv>
 8008560:	0002      	movs	r2, r0
 8008562:	000b      	movs	r3, r1
 8008564:	2000      	movs	r0, #0
 8008566:	4935      	ldr	r1, [pc, #212]	@ (800863c <SGP_GetMeasurementValues+0x3d0>)
 8008568:	f7fa faae 	bl	8002ac8 <__aeabi_dsub>
 800856c:	0002      	movs	r2, r0
 800856e:	000b      	movs	r3, r1
 8008570:	0014      	movs	r4, r2
 8008572:	001d      	movs	r5, r3
 8008574:	4b32      	ldr	r3, [pc, #200]	@ (8008640 <SGP_GetMeasurementValues+0x3d4>)
 8008576:	881b      	ldrh	r3, [r3, #0]
 8008578:	0018      	movs	r0, r3
 800857a:	f7fa fe9f 	bl	80032bc <__aeabi_i2d>
 800857e:	0002      	movs	r2, r0
 8008580:	000b      	movs	r3, r1
 8008582:	0020      	movs	r0, r4
 8008584:	0029      	movs	r1, r5
 8008586:	f7f9 ffd7 	bl	8002538 <__aeabi_dmul>
 800858a:	0002      	movs	r2, r0
 800858c:	000b      	movs	r3, r1
 800858e:	0010      	movs	r0, r2
 8008590:	0019      	movs	r1, r3
 8008592:	f7f8 f829 	bl	80005e8 <__aeabi_d2uiz>
 8008596:	0003      	movs	r3, r0
 8008598:	b29a      	uxth	r2, r3
 800859a:	4b2c      	ldr	r3, [pc, #176]	@ (800864c <SGP_GetMeasurementValues+0x3e0>)
 800859c:	801a      	strh	r2, [r3, #0]
        Blue = TimeValue;
 800859e:	4b28      	ldr	r3, [pc, #160]	@ (8008640 <SGP_GetMeasurementValues+0x3d4>)
 80085a0:	881a      	ldrh	r2, [r3, #0]
 80085a2:	4b29      	ldr	r3, [pc, #164]	@ (8008648 <SGP_GetMeasurementValues+0x3dc>)
 80085a4:	801a      	strh	r2, [r3, #0]
        TIM3->CCR1 = Red;
 80085a6:	4b29      	ldr	r3, [pc, #164]	@ (800864c <SGP_GetMeasurementValues+0x3e0>)
 80085a8:	881a      	ldrh	r2, [r3, #0]
 80085aa:	4b29      	ldr	r3, [pc, #164]	@ (8008650 <SGP_GetMeasurementValues+0x3e4>)
 80085ac:	635a      	str	r2, [r3, #52]	@ 0x34
        TIM3->CCR2 = Green;
 80085ae:	4b25      	ldr	r3, [pc, #148]	@ (8008644 <SGP_GetMeasurementValues+0x3d8>)
 80085b0:	881a      	ldrh	r2, [r3, #0]
 80085b2:	4b27      	ldr	r3, [pc, #156]	@ (8008650 <SGP_GetMeasurementValues+0x3e4>)
 80085b4:	639a      	str	r2, [r3, #56]	@ 0x38
        TIM3->CCR3 = Blue;
 80085b6:	4b24      	ldr	r3, [pc, #144]	@ (8008648 <SGP_GetMeasurementValues+0x3dc>)
 80085b8:	881a      	ldrh	r2, [r3, #0]
 80085ba:	4b25      	ldr	r3, [pc, #148]	@ (8008650 <SGP_GetMeasurementValues+0x3e4>)
 80085bc:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
      SGP_AmountOfSamplesDone = 0;
 80085be:	4b11      	ldr	r3, [pc, #68]	@ (8008604 <SGP_GetMeasurementValues+0x398>)
 80085c0:	2200      	movs	r2, #0
 80085c2:	701a      	strb	r2, [r3, #0]
      Debug("SGP_Measurement completely done.");
 80085c4:	4a24      	ldr	r2, [pc, #144]	@ (8008658 <SGP_GetMeasurementValues+0x3ec>)
 80085c6:	4b09      	ldr	r3, [pc, #36]	@ (80085ec <SGP_GetMeasurementValues+0x380>)
 80085c8:	0019      	movs	r1, r3
 80085ca:	2003      	movs	r0, #3
 80085cc:	f001 f834 	bl	8009638 <CreateLine>
      HT_MeasurementReceived = false;
 80085d0:	4b07      	ldr	r3, [pc, #28]	@ (80085f0 <SGP_GetMeasurementValues+0x384>)
 80085d2:	2200      	movs	r2, #0
 80085d4:	701a      	strb	r2, [r3, #0]
      SGP_MsgSent = false;
 80085d6:	4b03      	ldr	r3, [pc, #12]	@ (80085e4 <SGP_GetMeasurementValues+0x378>)
 80085d8:	2200      	movs	r2, #0
 80085da:	701a      	strb	r2, [r3, #0]
//      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
//        Debug("SGP_Measurement buffer[%d]: %d", i, SGP_ReadBuffer[i]);
//      }
      return true;
 80085dc:	2301      	movs	r3, #1
 80085de:	e055      	b.n	800868c <SGP_GetMeasurementValues+0x420>
 80085e0:	2000270a 	.word	0x2000270a
 80085e4:	200027b5 	.word	0x200027b5
 80085e8:	0801b308 	.word	0x0801b308
 80085ec:	0801b334 	.word	0x0801b334
 80085f0:	200027b4 	.word	0x200027b4
 80085f4:	20000088 	.word	0x20000088
 80085f8:	2000009c 	.word	0x2000009c
 80085fc:	20000080 	.word	0x20000080
 8008600:	2000270b 	.word	0x2000270b
 8008604:	20002709 	.word	0x20002709
 8008608:	0801b338 	.word	0x0801b338
 800860c:	20002700 	.word	0x20002700
 8008610:	0801b368 	.word	0x0801b368
 8008614:	0801b38c 	.word	0x0801b38c
 8008618:	0801b390 	.word	0x0801b390
 800861c:	0801b3b0 	.word	0x0801b3b0
 8008620:	0801b3b4 	.word	0x0801b3b4
 8008624:	20000098 	.word	0x20000098
 8008628:	20000090 	.word	0x20000090
 800862c:	0801b3d4 	.word	0x0801b3d4
 8008630:	2000270c 	.word	0x2000270c
 8008634:	0801b3e8 	.word	0x0801b3e8
 8008638:	40590000 	.word	0x40590000
 800863c:	3ff00000 	.word	0x3ff00000
 8008640:	200000a0 	.word	0x200000a0
 8008644:	200027ba 	.word	0x200027ba
 8008648:	200027b8 	.word	0x200027b8
 800864c:	200027b6 	.word	0x200027b6
 8008650:	40000400 	.word	0x40000400
 8008654:	40790000 	.word	0x40790000
 8008658:	0801b3fc 	.word	0x0801b3fc
    }
  }
  if (SGP_MeasurementDone() && HeatUpIsDone && MeasurementIsReady) {
 800865c:	f7ff fdea 	bl	8008234 <SGP_MeasurementDone>
 8008660:	1e03      	subs	r3, r0, #0
 8008662:	d012      	beq.n	800868a <SGP_GetMeasurementValues+0x41e>
 8008664:	4b0b      	ldr	r3, [pc, #44]	@ (8008694 <SGP_GetMeasurementValues+0x428>)
 8008666:	781b      	ldrb	r3, [r3, #0]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d00e      	beq.n	800868a <SGP_GetMeasurementValues+0x41e>
 800866c:	4b0a      	ldr	r3, [pc, #40]	@ (8008698 <SGP_GetMeasurementValues+0x42c>)
 800866e:	781b      	ldrb	r3, [r3, #0]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d00a      	beq.n	800868a <SGP_GetMeasurementValues+0x41e>
    // Starting next measurement
    Debug("Starting next SGP_measurement.");
 8008674:	4a09      	ldr	r2, [pc, #36]	@ (800869c <SGP_GetMeasurementValues+0x430>)
 8008676:	4b0a      	ldr	r3, [pc, #40]	@ (80086a0 <SGP_GetMeasurementValues+0x434>)
 8008678:	0019      	movs	r1, r3
 800867a:	2003      	movs	r0, #3
 800867c:	f000 ffdc 	bl	8009638 <CreateLine>
    SGP_StartMeasurement();
 8008680:	f7ff fd84 	bl	800818c <SGP_StartMeasurement>
    SGP_MsgSent = false;
 8008684:	4b07      	ldr	r3, [pc, #28]	@ (80086a4 <SGP_GetMeasurementValues+0x438>)
 8008686:	2200      	movs	r2, #0
 8008688:	701a      	strb	r2, [r3, #0]
  }
  return false;
 800868a:	2300      	movs	r3, #0
}
 800868c:	0018      	movs	r0, r3
 800868e:	46bd      	mov	sp, r7
 8008690:	b004      	add	sp, #16
 8008692:	bdb0      	pop	{r4, r5, r7, pc}
 8008694:	2000270a 	.word	0x2000270a
 8008698:	2000270b 	.word	0x2000270b
 800869c:	0801b420 	.word	0x0801b420
 80086a0:	0801b334 	.word	0x0801b334
 80086a4:	200027b5 	.word	0x200027b5

080086a8 <SGP_DeviceConnected>:

bool SGP_DeviceConnected(void) {
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b084      	sub	sp, #16
 80086ac:	af02      	add	r7, sp, #8
  WriteRegister(SGP_I2C_ADDRESS, GetSerialNumberBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 80086ae:	4b1a      	ldr	r3, [pc, #104]	@ (8008718 <SGP_DeviceConnected+0x70>)
 80086b0:	2202      	movs	r2, #2
 80086b2:	0019      	movs	r1, r3
 80086b4:	2059      	movs	r0, #89	@ 0x59
 80086b6:	f7ff fd31 	bl	800811c <WriteRegister>
  HAL_Delay(1); // 1ms delay for the sensor to respond (according to datasheet)
 80086ba:	2001      	movs	r0, #1
 80086bc:	f001 fb62 	bl	8009d84 <HAL_Delay>
  ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH);
 80086c0:	4b16      	ldr	r3, [pc, #88]	@ (800871c <SGP_DeviceConnected+0x74>)
 80086c2:	2209      	movs	r2, #9
 80086c4:	0019      	movs	r1, r3
 80086c6:	2059      	movs	r0, #89	@ 0x59
 80086c8:	f7ff fd0a 	bl	80080e0 <ReadRegister>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 80086cc:	1dfb      	adds	r3, r7, #7
 80086ce:	2200      	movs	r2, #0
 80086d0:	701a      	strb	r2, [r3, #0]
 80086d2:	e011      	b.n	80086f8 <SGP_DeviceConnected+0x50>
    Info("SGP_Device serial ID[%d]: 0x%X", i, SGP_ReadBuffer[i]);
 80086d4:	1dfb      	adds	r3, r7, #7
 80086d6:	7818      	ldrb	r0, [r3, #0]
 80086d8:	1dfb      	adds	r3, r7, #7
 80086da:	781b      	ldrb	r3, [r3, #0]
 80086dc:	4a0f      	ldr	r2, [pc, #60]	@ (800871c <SGP_DeviceConnected+0x74>)
 80086de:	5cd3      	ldrb	r3, [r2, r3]
 80086e0:	4a0f      	ldr	r2, [pc, #60]	@ (8008720 <SGP_DeviceConnected+0x78>)
 80086e2:	4910      	ldr	r1, [pc, #64]	@ (8008724 <SGP_DeviceConnected+0x7c>)
 80086e4:	9300      	str	r3, [sp, #0]
 80086e6:	0003      	movs	r3, r0
 80086e8:	2002      	movs	r0, #2
 80086ea:	f000 ffa5 	bl	8009638 <CreateLine>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 80086ee:	1dfb      	adds	r3, r7, #7
 80086f0:	781a      	ldrb	r2, [r3, #0]
 80086f2:	1dfb      	adds	r3, r7, #7
 80086f4:	3201      	adds	r2, #1
 80086f6:	701a      	strb	r2, [r3, #0]
 80086f8:	1dfb      	adds	r3, r7, #7
 80086fa:	781b      	ldrb	r3, [r3, #0]
 80086fc:	2b08      	cmp	r3, #8
 80086fe:	d9e9      	bls.n	80086d4 <SGP_DeviceConnected+0x2c>
  }
  return CheckCRC(SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH, SGP_SERIAL_NUMBER_SEGMENT_SIZE);
 8008700:	4b06      	ldr	r3, [pc, #24]	@ (800871c <SGP_DeviceConnected+0x74>)
 8008702:	2203      	movs	r2, #3
 8008704:	2109      	movs	r1, #9
 8008706:	0018      	movs	r0, r3
 8008708:	f000 f80e 	bl	8008728 <CheckCRC>
 800870c:	0003      	movs	r3, r0
}
 800870e:	0018      	movs	r0, r3
 8008710:	46bd      	mov	sp, r7
 8008712:	b002      	add	sp, #8
 8008714:	bd80      	pop	{r7, pc}
 8008716:	46c0      	nop			@ (mov r8, r8)
 8008718:	2000007c 	.word	0x2000007c
 800871c:	20002700 	.word	0x20002700
 8008720:	0801b440 	.word	0x0801b440
 8008724:	0801b3b0 	.word	0x0801b3b0

08008728 <CheckCRC>:

static bool CheckCRC(uint8_t *data, uint8_t dataLength, uint8_t segmentSize) {
 8008728:	b5f0      	push	{r4, r5, r6, r7, lr}
 800872a:	b08f      	sub	sp, #60	@ 0x3c
 800872c:	af00      	add	r7, sp, #0
 800872e:	6278      	str	r0, [r7, #36]	@ 0x24
 8008730:	0008      	movs	r0, r1
 8008732:	0011      	movs	r1, r2
 8008734:	2323      	movs	r3, #35	@ 0x23
 8008736:	18fb      	adds	r3, r7, r3
 8008738:	1c02      	adds	r2, r0, #0
 800873a:	701a      	strb	r2, [r3, #0]
 800873c:	2322      	movs	r3, #34	@ 0x22
 800873e:	18fb      	adds	r3, r7, r3
 8008740:	1c0a      	adds	r2, r1, #0
 8008742:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 8008744:	2317      	movs	r3, #23
 8008746:	2220      	movs	r2, #32
 8008748:	189b      	adds	r3, r3, r2
 800874a:	19db      	adds	r3, r3, r7
 800874c:	2200      	movs	r2, #0
 800874e:	701a      	strb	r2, [r3, #0]
 8008750:	e09f      	b.n	8008892 <CheckCRC+0x16a>
 8008752:	466b      	mov	r3, sp
 8008754:	001e      	movs	r6, r3
    uint8_t crcData[segmentSize];
 8008756:	2322      	movs	r3, #34	@ 0x22
 8008758:	18fb      	adds	r3, r7, r3
 800875a:	781b      	ldrb	r3, [r3, #0]
 800875c:	001a      	movs	r2, r3
 800875e:	3a01      	subs	r2, #1
 8008760:	633a      	str	r2, [r7, #48]	@ 0x30
 8008762:	60bb      	str	r3, [r7, #8]
 8008764:	2200      	movs	r2, #0
 8008766:	60fa      	str	r2, [r7, #12]
 8008768:	68b8      	ldr	r0, [r7, #8]
 800876a:	68f9      	ldr	r1, [r7, #12]
 800876c:	0002      	movs	r2, r0
 800876e:	0f52      	lsrs	r2, r2, #29
 8008770:	000c      	movs	r4, r1
 8008772:	00e4      	lsls	r4, r4, #3
 8008774:	61fc      	str	r4, [r7, #28]
 8008776:	69fc      	ldr	r4, [r7, #28]
 8008778:	4314      	orrs	r4, r2
 800877a:	61fc      	str	r4, [r7, #28]
 800877c:	0002      	movs	r2, r0
 800877e:	00d2      	lsls	r2, r2, #3
 8008780:	61ba      	str	r2, [r7, #24]
 8008782:	603b      	str	r3, [r7, #0]
 8008784:	2200      	movs	r2, #0
 8008786:	607a      	str	r2, [r7, #4]
 8008788:	6838      	ldr	r0, [r7, #0]
 800878a:	6879      	ldr	r1, [r7, #4]
 800878c:	0002      	movs	r2, r0
 800878e:	0f52      	lsrs	r2, r2, #29
 8008790:	000c      	movs	r4, r1
 8008792:	00e4      	lsls	r4, r4, #3
 8008794:	617c      	str	r4, [r7, #20]
 8008796:	697c      	ldr	r4, [r7, #20]
 8008798:	4314      	orrs	r4, r2
 800879a:	617c      	str	r4, [r7, #20]
 800879c:	0002      	movs	r2, r0
 800879e:	00d2      	lsls	r2, r2, #3
 80087a0:	613a      	str	r2, [r7, #16]
 80087a2:	3307      	adds	r3, #7
 80087a4:	08db      	lsrs	r3, r3, #3
 80087a6:	00db      	lsls	r3, r3, #3
 80087a8:	466a      	mov	r2, sp
 80087aa:	1ad3      	subs	r3, r2, r3
 80087ac:	469d      	mov	sp, r3
 80087ae:	466b      	mov	r3, sp
 80087b0:	3300      	adds	r3, #0
 80087b2:	62fb      	str	r3, [r7, #44]	@ 0x2c

    for (uint8_t j = 0; j < segmentSize; j++) {
 80087b4:	2316      	movs	r3, #22
 80087b6:	2220      	movs	r2, #32
 80087b8:	189b      	adds	r3, r3, r2
 80087ba:	19db      	adds	r3, r3, r7
 80087bc:	2200      	movs	r2, #0
 80087be:	701a      	strb	r2, [r3, #0]
 80087c0:	e01e      	b.n	8008800 <CheckCRC+0xd8>
      crcData[j] = data[i + j];
 80087c2:	2317      	movs	r3, #23
 80087c4:	2220      	movs	r2, #32
 80087c6:	189b      	adds	r3, r3, r2
 80087c8:	19db      	adds	r3, r3, r7
 80087ca:	781a      	ldrb	r2, [r3, #0]
 80087cc:	2116      	movs	r1, #22
 80087ce:	2320      	movs	r3, #32
 80087d0:	18cb      	adds	r3, r1, r3
 80087d2:	19db      	adds	r3, r3, r7
 80087d4:	781b      	ldrb	r3, [r3, #0]
 80087d6:	18d3      	adds	r3, r2, r3
 80087d8:	001a      	movs	r2, r3
 80087da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087dc:	189a      	adds	r2, r3, r2
 80087de:	0008      	movs	r0, r1
 80087e0:	2320      	movs	r3, #32
 80087e2:	18cb      	adds	r3, r1, r3
 80087e4:	19db      	adds	r3, r3, r7
 80087e6:	781b      	ldrb	r3, [r3, #0]
 80087e8:	7811      	ldrb	r1, [r2, #0]
 80087ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80087ec:	54d1      	strb	r1, [r2, r3]
    for (uint8_t j = 0; j < segmentSize; j++) {
 80087ee:	2320      	movs	r3, #32
 80087f0:	18c3      	adds	r3, r0, r3
 80087f2:	19db      	adds	r3, r3, r7
 80087f4:	781a      	ldrb	r2, [r3, #0]
 80087f6:	2320      	movs	r3, #32
 80087f8:	18c3      	adds	r3, r0, r3
 80087fa:	19db      	adds	r3, r3, r7
 80087fc:	3201      	adds	r2, #1
 80087fe:	701a      	strb	r2, [r3, #0]
 8008800:	2316      	movs	r3, #22
 8008802:	2220      	movs	r2, #32
 8008804:	189b      	adds	r3, r3, r2
 8008806:	19da      	adds	r2, r3, r7
 8008808:	2322      	movs	r3, #34	@ 0x22
 800880a:	18fb      	adds	r3, r7, r3
 800880c:	7812      	ldrb	r2, [r2, #0]
 800880e:	781b      	ldrb	r3, [r3, #0]
 8008810:	429a      	cmp	r2, r3
 8008812:	d3d6      	bcc.n	80087c2 <CheckCRC+0x9a>
    }
    uint8_t crc = data[i + segmentSize - 1];
 8008814:	2417      	movs	r4, #23
 8008816:	2320      	movs	r3, #32
 8008818:	18e3      	adds	r3, r4, r3
 800881a:	19db      	adds	r3, r3, r7
 800881c:	781a      	ldrb	r2, [r3, #0]
 800881e:	2322      	movs	r3, #34	@ 0x22
 8008820:	18fb      	adds	r3, r7, r3
 8008822:	781b      	ldrb	r3, [r3, #0]
 8008824:	18d3      	adds	r3, r2, r3
 8008826:	3b01      	subs	r3, #1
 8008828:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800882a:	18d2      	adds	r2, r2, r3
 800882c:	250b      	movs	r5, #11
 800882e:	2320      	movs	r3, #32
 8008830:	18eb      	adds	r3, r5, r3
 8008832:	19db      	adds	r3, r3, r7
 8008834:	7812      	ldrb	r2, [r2, #0]
 8008836:	701a      	strb	r2, [r3, #0]

    if (CalculateCRC(crcData, segmentSize - 1) != crc) {
 8008838:	2322      	movs	r3, #34	@ 0x22
 800883a:	18fb      	adds	r3, r7, r3
 800883c:	781b      	ldrb	r3, [r3, #0]
 800883e:	3b01      	subs	r3, #1
 8008840:	b2da      	uxtb	r2, r3
 8008842:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008844:	0011      	movs	r1, r2
 8008846:	0018      	movs	r0, r3
 8008848:	f000 f838 	bl	80088bc <CalculateCRC>
 800884c:	0003      	movs	r3, r0
 800884e:	001a      	movs	r2, r3
 8008850:	2320      	movs	r3, #32
 8008852:	18eb      	adds	r3, r5, r3
 8008854:	19db      	adds	r3, r3, r7
 8008856:	781b      	ldrb	r3, [r3, #0]
 8008858:	4293      	cmp	r3, r2
 800885a:	d00c      	beq.n	8008876 <CheckCRC+0x14e>
      Error("CRC check failed for segment: %d.", i + 1);
 800885c:	2320      	movs	r3, #32
 800885e:	18e3      	adds	r3, r4, r3
 8008860:	19db      	adds	r3, r3, r7
 8008862:	781b      	ldrb	r3, [r3, #0]
 8008864:	3301      	adds	r3, #1
 8008866:	4a13      	ldr	r2, [pc, #76]	@ (80088b4 <CheckCRC+0x18c>)
 8008868:	4913      	ldr	r1, [pc, #76]	@ (80088b8 <CheckCRC+0x190>)
 800886a:	2001      	movs	r0, #1
 800886c:	f000 fee4 	bl	8009638 <CreateLine>
      return false;
 8008870:	2300      	movs	r3, #0
 8008872:	46b5      	mov	sp, r6
 8008874:	e019      	b.n	80088aa <CheckCRC+0x182>
 8008876:	46b5      	mov	sp, r6
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 8008878:	2217      	movs	r2, #23
 800887a:	2320      	movs	r3, #32
 800887c:	18d3      	adds	r3, r2, r3
 800887e:	19db      	adds	r3, r3, r7
 8008880:	2120      	movs	r1, #32
 8008882:	1852      	adds	r2, r2, r1
 8008884:	19d1      	adds	r1, r2, r7
 8008886:	2222      	movs	r2, #34	@ 0x22
 8008888:	18ba      	adds	r2, r7, r2
 800888a:	7809      	ldrb	r1, [r1, #0]
 800888c:	7812      	ldrb	r2, [r2, #0]
 800888e:	188a      	adds	r2, r1, r2
 8008890:	701a      	strb	r2, [r3, #0]
 8008892:	2317      	movs	r3, #23
 8008894:	2220      	movs	r2, #32
 8008896:	189b      	adds	r3, r3, r2
 8008898:	19da      	adds	r2, r3, r7
 800889a:	2323      	movs	r3, #35	@ 0x23
 800889c:	18fb      	adds	r3, r7, r3
 800889e:	7812      	ldrb	r2, [r2, #0]
 80088a0:	781b      	ldrb	r3, [r3, #0]
 80088a2:	429a      	cmp	r2, r3
 80088a4:	d200      	bcs.n	80088a8 <CheckCRC+0x180>
 80088a6:	e754      	b.n	8008752 <CheckCRC+0x2a>
    }
  }
  return true;
 80088a8:	2301      	movs	r3, #1
}
 80088aa:	0018      	movs	r0, r3
 80088ac:	46bd      	mov	sp, r7
 80088ae:	b00f      	add	sp, #60	@ 0x3c
 80088b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80088b2:	46c0      	nop			@ (mov r8, r8)
 80088b4:	0801b460 	.word	0x0801b460
 80088b8:	0801b38c 	.word	0x0801b38c

080088bc <CalculateCRC>:

static uint8_t CalculateCRC(uint8_t *data, uint8_t length) {
 80088bc:	b580      	push	{r7, lr}
 80088be:	b084      	sub	sp, #16
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
 80088c4:	000a      	movs	r2, r1
 80088c6:	1cfb      	adds	r3, r7, #3
 80088c8:	701a      	strb	r2, [r3, #0]
  uint8_t crc = SGP_CRC_INIT_VALUE;
 80088ca:	230f      	movs	r3, #15
 80088cc:	18fb      	adds	r3, r7, r3
 80088ce:	22ff      	movs	r2, #255	@ 0xff
 80088d0:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 80088d2:	230e      	movs	r3, #14
 80088d4:	18fb      	adds	r3, r7, r3
 80088d6:	2200      	movs	r2, #0
 80088d8:	701a      	strb	r2, [r3, #0]
 80088da:	e037      	b.n	800894c <CalculateCRC+0x90>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 80088dc:	230e      	movs	r3, #14
 80088de:	18fb      	adds	r3, r7, r3
 80088e0:	781b      	ldrb	r3, [r3, #0]
 80088e2:	687a      	ldr	r2, [r7, #4]
 80088e4:	18d3      	adds	r3, r2, r3
 80088e6:	7819      	ldrb	r1, [r3, #0]
 80088e8:	220f      	movs	r2, #15
 80088ea:	18bb      	adds	r3, r7, r2
 80088ec:	18ba      	adds	r2, r7, r2
 80088ee:	7812      	ldrb	r2, [r2, #0]
 80088f0:	404a      	eors	r2, r1
 80088f2:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 80088f4:	230d      	movs	r3, #13
 80088f6:	18fb      	adds	r3, r7, r3
 80088f8:	2200      	movs	r2, #0
 80088fa:	701a      	strb	r2, [r3, #0]
 80088fc:	e01b      	b.n	8008936 <CalculateCRC+0x7a>
      // If the leftmost (most significant) bit is set
      if (crc & SGP_CRC_MSB_MASK) {
 80088fe:	210f      	movs	r1, #15
 8008900:	187b      	adds	r3, r7, r1
 8008902:	781b      	ldrb	r3, [r3, #0]
 8008904:	b25b      	sxtb	r3, r3
 8008906:	2b00      	cmp	r3, #0
 8008908:	da09      	bge.n	800891e <CalculateCRC+0x62>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ SGP_CRC_POLYNOMIAL;
 800890a:	187b      	adds	r3, r7, r1
 800890c:	781b      	ldrb	r3, [r3, #0]
 800890e:	005b      	lsls	r3, r3, #1
 8008910:	b25b      	sxtb	r3, r3
 8008912:	2231      	movs	r2, #49	@ 0x31
 8008914:	4053      	eors	r3, r2
 8008916:	b25a      	sxtb	r2, r3
 8008918:	187b      	adds	r3, r7, r1
 800891a:	701a      	strb	r2, [r3, #0]
 800891c:	e005      	b.n	800892a <CalculateCRC+0x6e>
      } else {
        crc <<= 1;
 800891e:	230f      	movs	r3, #15
 8008920:	18fa      	adds	r2, r7, r3
 8008922:	18fb      	adds	r3, r7, r3
 8008924:	781b      	ldrb	r3, [r3, #0]
 8008926:	18db      	adds	r3, r3, r3
 8008928:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 800892a:	210d      	movs	r1, #13
 800892c:	187b      	adds	r3, r7, r1
 800892e:	781a      	ldrb	r2, [r3, #0]
 8008930:	187b      	adds	r3, r7, r1
 8008932:	3201      	adds	r2, #1
 8008934:	701a      	strb	r2, [r3, #0]
 8008936:	230d      	movs	r3, #13
 8008938:	18fb      	adds	r3, r7, r3
 800893a:	781b      	ldrb	r3, [r3, #0]
 800893c:	2b07      	cmp	r3, #7
 800893e:	d9de      	bls.n	80088fe <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 8008940:	210e      	movs	r1, #14
 8008942:	187b      	adds	r3, r7, r1
 8008944:	781a      	ldrb	r2, [r3, #0]
 8008946:	187b      	adds	r3, r7, r1
 8008948:	3201      	adds	r2, #1
 800894a:	701a      	strb	r2, [r3, #0]
 800894c:	230e      	movs	r3, #14
 800894e:	18fa      	adds	r2, r7, r3
 8008950:	1cfb      	adds	r3, r7, #3
 8008952:	7812      	ldrb	r2, [r2, #0]
 8008954:	781b      	ldrb	r3, [r3, #0]
 8008956:	429a      	cmp	r2, r3
 8008958:	d3c0      	bcc.n	80088dc <CalculateCRC+0x20>
      }
    }
  }
  //  Info("SGP_CRC calculated value: 0x%X", crc);
  return crc;
 800895a:	230f      	movs	r3, #15
 800895c:	18fb      	adds	r3, r7, r3
 800895e:	781b      	ldrb	r3, [r3, #0]
}
 8008960:	0018      	movs	r0, r3
 8008962:	46bd      	mov	sp, r7
 8008964:	b004      	add	sp, #16
 8008966:	bd80      	pop	{r7, pc}

08008968 <SGP_GetHT>:

void SGP_GetHT(float* temperature, float* humidity){
 8008968:	b580      	push	{r7, lr}
 800896a:	b084      	sub	sp, #16
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
 8008970:	6039      	str	r1, [r7, #0]
  uint8_t humBuf[2];
  uint8_t tempBuf[2];
  SGP_Temp = (uint16_t)(((*temperature+45.0f)/175.0f)*(float)0xFFFF);
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	4936      	ldr	r1, [pc, #216]	@ (8008a50 <SGP_GetHT+0xe8>)
 8008978:	1c18      	adds	r0, r3, #0
 800897a:	f7f7 ff1f 	bl	80007bc <__aeabi_fadd>
 800897e:	1c03      	adds	r3, r0, #0
 8008980:	4934      	ldr	r1, [pc, #208]	@ (8008a54 <SGP_GetHT+0xec>)
 8008982:	1c18      	adds	r0, r3, #0
 8008984:	f7f8 f8a4 	bl	8000ad0 <__aeabi_fdiv>
 8008988:	1c03      	adds	r3, r0, #0
 800898a:	4933      	ldr	r1, [pc, #204]	@ (8008a58 <SGP_GetHT+0xf0>)
 800898c:	1c18      	adds	r0, r3, #0
 800898e:	f7f8 fa85 	bl	8000e9c <__aeabi_fmul>
 8008992:	1c03      	adds	r3, r0, #0
 8008994:	1c18      	adds	r0, r3, #0
 8008996:	f7f7 fe0f 	bl	80005b8 <__aeabi_f2uiz>
 800899a:	0003      	movs	r3, r0
 800899c:	b29a      	uxth	r2, r3
 800899e:	4b2f      	ldr	r3, [pc, #188]	@ (8008a5c <SGP_GetHT+0xf4>)
 80089a0:	801a      	strh	r2, [r3, #0]
  SGP_Hum = ((*humidity/100.0f)*(float)0xFFFF);
 80089a2:	683b      	ldr	r3, [r7, #0]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	492e      	ldr	r1, [pc, #184]	@ (8008a60 <SGP_GetHT+0xf8>)
 80089a8:	1c18      	adds	r0, r3, #0
 80089aa:	f7f8 f891 	bl	8000ad0 <__aeabi_fdiv>
 80089ae:	1c03      	adds	r3, r0, #0
 80089b0:	4929      	ldr	r1, [pc, #164]	@ (8008a58 <SGP_GetHT+0xf0>)
 80089b2:	1c18      	adds	r0, r3, #0
 80089b4:	f7f8 fa72 	bl	8000e9c <__aeabi_fmul>
 80089b8:	1c03      	adds	r3, r0, #0
 80089ba:	1c18      	adds	r0, r3, #0
 80089bc:	f7f7 fdfc 	bl	80005b8 <__aeabi_f2uiz>
 80089c0:	0003      	movs	r3, r0
 80089c2:	b29a      	uxth	r2, r3
 80089c4:	4b27      	ldr	r3, [pc, #156]	@ (8008a64 <SGP_GetHT+0xfc>)
 80089c6:	801a      	strh	r2, [r3, #0]
  humBuf[0] = MeasureRawWithCompBuffer[2] = SGP_Hum >> 8;
 80089c8:	4b26      	ldr	r3, [pc, #152]	@ (8008a64 <SGP_GetHT+0xfc>)
 80089ca:	881b      	ldrh	r3, [r3, #0]
 80089cc:	0a1b      	lsrs	r3, r3, #8
 80089ce:	b29b      	uxth	r3, r3
 80089d0:	b2da      	uxtb	r2, r3
 80089d2:	4b25      	ldr	r3, [pc, #148]	@ (8008a68 <SGP_GetHT+0x100>)
 80089d4:	709a      	strb	r2, [r3, #2]
 80089d6:	4b24      	ldr	r3, [pc, #144]	@ (8008a68 <SGP_GetHT+0x100>)
 80089d8:	789a      	ldrb	r2, [r3, #2]
 80089da:	210c      	movs	r1, #12
 80089dc:	187b      	adds	r3, r7, r1
 80089de:	701a      	strb	r2, [r3, #0]
  humBuf[1] = MeasureRawWithCompBuffer[3] = SGP_Hum;
 80089e0:	4b20      	ldr	r3, [pc, #128]	@ (8008a64 <SGP_GetHT+0xfc>)
 80089e2:	881b      	ldrh	r3, [r3, #0]
 80089e4:	b2da      	uxtb	r2, r3
 80089e6:	4b20      	ldr	r3, [pc, #128]	@ (8008a68 <SGP_GetHT+0x100>)
 80089e8:	70da      	strb	r2, [r3, #3]
 80089ea:	4b1f      	ldr	r3, [pc, #124]	@ (8008a68 <SGP_GetHT+0x100>)
 80089ec:	78da      	ldrb	r2, [r3, #3]
 80089ee:	187b      	adds	r3, r7, r1
 80089f0:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[4] = CalculateCRC(humBuf, 2);
 80089f2:	187b      	adds	r3, r7, r1
 80089f4:	2102      	movs	r1, #2
 80089f6:	0018      	movs	r0, r3
 80089f8:	f7ff ff60 	bl	80088bc <CalculateCRC>
 80089fc:	0003      	movs	r3, r0
 80089fe:	001a      	movs	r2, r3
 8008a00:	4b19      	ldr	r3, [pc, #100]	@ (8008a68 <SGP_GetHT+0x100>)
 8008a02:	711a      	strb	r2, [r3, #4]
  tempBuf[0] = MeasureRawWithCompBuffer[5] = SGP_Temp >> 8;
 8008a04:	4b15      	ldr	r3, [pc, #84]	@ (8008a5c <SGP_GetHT+0xf4>)
 8008a06:	881b      	ldrh	r3, [r3, #0]
 8008a08:	0a1b      	lsrs	r3, r3, #8
 8008a0a:	b29b      	uxth	r3, r3
 8008a0c:	b2da      	uxtb	r2, r3
 8008a0e:	4b16      	ldr	r3, [pc, #88]	@ (8008a68 <SGP_GetHT+0x100>)
 8008a10:	715a      	strb	r2, [r3, #5]
 8008a12:	4b15      	ldr	r3, [pc, #84]	@ (8008a68 <SGP_GetHT+0x100>)
 8008a14:	795a      	ldrb	r2, [r3, #5]
 8008a16:	2108      	movs	r1, #8
 8008a18:	187b      	adds	r3, r7, r1
 8008a1a:	701a      	strb	r2, [r3, #0]
  tempBuf[1] = MeasureRawWithCompBuffer[6] = SGP_Temp;
 8008a1c:	4b0f      	ldr	r3, [pc, #60]	@ (8008a5c <SGP_GetHT+0xf4>)
 8008a1e:	881b      	ldrh	r3, [r3, #0]
 8008a20:	b2da      	uxtb	r2, r3
 8008a22:	4b11      	ldr	r3, [pc, #68]	@ (8008a68 <SGP_GetHT+0x100>)
 8008a24:	719a      	strb	r2, [r3, #6]
 8008a26:	4b10      	ldr	r3, [pc, #64]	@ (8008a68 <SGP_GetHT+0x100>)
 8008a28:	799a      	ldrb	r2, [r3, #6]
 8008a2a:	187b      	adds	r3, r7, r1
 8008a2c:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[7] = CalculateCRC(tempBuf, 2);
 8008a2e:	187b      	adds	r3, r7, r1
 8008a30:	2102      	movs	r1, #2
 8008a32:	0018      	movs	r0, r3
 8008a34:	f7ff ff42 	bl	80088bc <CalculateCRC>
 8008a38:	0003      	movs	r3, r0
 8008a3a:	001a      	movs	r2, r3
 8008a3c:	4b0a      	ldr	r3, [pc, #40]	@ (8008a68 <SGP_GetHT+0x100>)
 8008a3e:	71da      	strb	r2, [r3, #7]
  HT_MeasurementReceived = true;
 8008a40:	4b0a      	ldr	r3, [pc, #40]	@ (8008a6c <SGP_GetHT+0x104>)
 8008a42:	2201      	movs	r2, #1
 8008a44:	701a      	strb	r2, [r3, #0]
}
 8008a46:	46c0      	nop			@ (mov r8, r8)
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	b004      	add	sp, #16
 8008a4c:	bd80      	pop	{r7, pc}
 8008a4e:	46c0      	nop			@ (mov r8, r8)
 8008a50:	42340000 	.word	0x42340000
 8008a54:	432f0000 	.word	0x432f0000
 8008a58:	477fff00 	.word	0x477fff00
 8008a5c:	200027b2 	.word	0x200027b2
 8008a60:	42c80000 	.word	0x42c80000
 8008a64:	200027b0 	.word	0x200027b0
 8008a68:	20000088 	.word	0x20000088
 8008a6c:	200027b4 	.word	0x200027b4

08008a70 <batteryChargeCheck>:
bool configSet = false;
bool energyGood = false;
uint32_t ConfigStamp;
uint32_t PowerStamp = 0;

Battery_Status batteryChargeCheck(){
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b082      	sub	sp, #8
 8008a74:	af00      	add	r7, sp, #0
  Battery_Status status;
  float batteryCharge = ReadBatteryVoltage();
 8008a76:	f7fc fd0b 	bl	8005490 <ReadBatteryVoltage>
 8008a7a:	1c03      	adds	r3, r0, #0
 8008a7c:	603b      	str	r3, [r7, #0]
  if(batteryCharge < 3.5){
 8008a7e:	491f      	ldr	r1, [pc, #124]	@ (8008afc <batteryChargeCheck+0x8c>)
 8008a80:	6838      	ldr	r0, [r7, #0]
 8008a82:	f7f7 fd23 	bl	80004cc <__aeabi_fcmplt>
 8008a86:	1e03      	subs	r3, r0, #0
 8008a88:	d002      	beq.n	8008a90 <batteryChargeCheck+0x20>
    status = BATTERY_CRITICAL;
 8008a8a:	1dfb      	adds	r3, r7, #7
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge < 3.7 && batteryCharge >= 3.5){
 8008a90:	6838      	ldr	r0, [r7, #0]
 8008a92:	f7fa fc65 	bl	8003360 <__aeabi_f2d>
 8008a96:	4a1a      	ldr	r2, [pc, #104]	@ (8008b00 <batteryChargeCheck+0x90>)
 8008a98:	4b1a      	ldr	r3, [pc, #104]	@ (8008b04 <batteryChargeCheck+0x94>)
 8008a9a:	f7f7 fcdd 	bl	8000458 <__aeabi_dcmplt>
 8008a9e:	1e03      	subs	r3, r0, #0
 8008aa0:	d008      	beq.n	8008ab4 <batteryChargeCheck+0x44>
 8008aa2:	4916      	ldr	r1, [pc, #88]	@ (8008afc <batteryChargeCheck+0x8c>)
 8008aa4:	6838      	ldr	r0, [r7, #0]
 8008aa6:	f7f7 fd2f 	bl	8000508 <__aeabi_fcmpge>
 8008aaa:	1e03      	subs	r3, r0, #0
 8008aac:	d002      	beq.n	8008ab4 <batteryChargeCheck+0x44>
    status = BATTERY_LOW;
 8008aae:	1dfb      	adds	r3, r7, #7
 8008ab0:	2202      	movs	r2, #2
 8008ab2:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge < 4.0 && batteryCharge >= 3.7){
 8008ab4:	2181      	movs	r1, #129	@ 0x81
 8008ab6:	05c9      	lsls	r1, r1, #23
 8008ab8:	6838      	ldr	r0, [r7, #0]
 8008aba:	f7f7 fd07 	bl	80004cc <__aeabi_fcmplt>
 8008abe:	1e03      	subs	r3, r0, #0
 8008ac0:	d00b      	beq.n	8008ada <batteryChargeCheck+0x6a>
 8008ac2:	6838      	ldr	r0, [r7, #0]
 8008ac4:	f7fa fc4c 	bl	8003360 <__aeabi_f2d>
 8008ac8:	4a0d      	ldr	r2, [pc, #52]	@ (8008b00 <batteryChargeCheck+0x90>)
 8008aca:	4b0e      	ldr	r3, [pc, #56]	@ (8008b04 <batteryChargeCheck+0x94>)
 8008acc:	f7f7 fce2 	bl	8000494 <__aeabi_dcmpge>
 8008ad0:	1e03      	subs	r3, r0, #0
 8008ad2:	d002      	beq.n	8008ada <batteryChargeCheck+0x6a>
    status = BATTERY_GOOD;
 8008ad4:	1dfb      	adds	r3, r7, #7
 8008ad6:	2203      	movs	r2, #3
 8008ad8:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge >= 4.0){
 8008ada:	2181      	movs	r1, #129	@ 0x81
 8008adc:	05c9      	lsls	r1, r1, #23
 8008ade:	6838      	ldr	r0, [r7, #0]
 8008ae0:	f7f7 fd12 	bl	8000508 <__aeabi_fcmpge>
 8008ae4:	1e03      	subs	r3, r0, #0
 8008ae6:	d002      	beq.n	8008aee <batteryChargeCheck+0x7e>
    status = BATTERY_FULL;
 8008ae8:	1dfb      	adds	r3, r7, #7
 8008aea:	2204      	movs	r2, #4
 8008aec:	701a      	strb	r2, [r3, #0]
  }
  return(status);
 8008aee:	1dfb      	adds	r3, r7, #7
 8008af0:	781b      	ldrb	r3, [r3, #0]
}
 8008af2:	0018      	movs	r0, r3
 8008af4:	46bd      	mov	sp, r7
 8008af6:	b002      	add	sp, #8
 8008af8:	bd80      	pop	{r7, pc}
 8008afa:	46c0      	nop			@ (mov r8, r8)
 8008afc:	40600000 	.word	0x40600000
 8008b00:	9999999a 	.word	0x9999999a
 8008b04:	400d9999 	.word	0x400d9999

08008b08 <powerCheck>:

Battery_Status powerCheck(){
 8008b08:	b590      	push	{r4, r7, lr}
 8008b0a:	b083      	sub	sp, #12
 8008b0c:	af00      	add	r7, sp, #0
  PowerStamp = HAL_GetTick() + 10000;
 8008b0e:	f001 f92f 	bl	8009d70 <HAL_GetTick>
 8008b12:	0003      	movs	r3, r0
 8008b14:	4a0b      	ldr	r2, [pc, #44]	@ (8008b44 <powerCheck+0x3c>)
 8008b16:	189a      	adds	r2, r3, r2
 8008b18:	4b0b      	ldr	r3, [pc, #44]	@ (8008b48 <powerCheck+0x40>)
 8008b1a:	601a      	str	r2, [r3, #0]
  Battery_Status status;
  if(Check_USB_PowerOn()){
 8008b1c:	f7fc fd7e 	bl	800561c <Check_USB_PowerOn>
 8008b20:	1e03      	subs	r3, r0, #0
 8008b22:	d003      	beq.n	8008b2c <powerCheck+0x24>
    status = USB_PLUGGED_IN;
 8008b24:	1dfb      	adds	r3, r7, #7
 8008b26:	2201      	movs	r2, #1
 8008b28:	701a      	strb	r2, [r3, #0]
 8008b2a:	e004      	b.n	8008b36 <powerCheck+0x2e>
  }
  else{
    status = batteryChargeCheck();
 8008b2c:	1dfc      	adds	r4, r7, #7
 8008b2e:	f7ff ff9f 	bl	8008a70 <batteryChargeCheck>
 8008b32:	0003      	movs	r3, r0
 8008b34:	7023      	strb	r3, [r4, #0]
  }
  return status;
 8008b36:	1dfb      	adds	r3, r7, #7
 8008b38:	781b      	ldrb	r3, [r3, #0]
}
 8008b3a:	0018      	movs	r0, r3
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	b003      	add	sp, #12
 8008b40:	bd90      	pop	{r4, r7, pc}
 8008b42:	46c0      	nop			@ (mov r8, r8)
 8008b44:	00002710 	.word	0x00002710
 8008b48:	200027c4 	.word	0x200027c4

08008b4c <powerDisplay>:

void powerDisplay(Battery_Status status){
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	b082      	sub	sp, #8
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	0002      	movs	r2, r0
 8008b54:	1dfb      	adds	r3, r7, #7
 8008b56:	701a      	strb	r2, [r3, #0]
  if(status == USB_PLUGGED_IN){
 8008b58:	1dfb      	adds	r3, r7, #7
 8008b5a:	781b      	ldrb	r3, [r3, #0]
 8008b5c:	2b01      	cmp	r3, #1
 8008b5e:	d105      	bne.n	8008b6c <powerDisplay+0x20>
    Debug("LEDS are okay");
 8008b60:	4a18      	ldr	r2, [pc, #96]	@ (8008bc4 <powerDisplay+0x78>)
 8008b62:	4b19      	ldr	r3, [pc, #100]	@ (8008bc8 <powerDisplay+0x7c>)
 8008b64:	0019      	movs	r1, r3
 8008b66:	2003      	movs	r0, #3
 8008b68:	f000 fd66 	bl	8009638 <CreateLine>
  }
  if(status == BATTERY_FULL){
 8008b6c:	1dfb      	adds	r3, r7, #7
 8008b6e:	781b      	ldrb	r3, [r3, #0]
 8008b70:	2b04      	cmp	r3, #4
 8008b72:	d105      	bne.n	8008b80 <powerDisplay+0x34>
    Debug("Battery fully charged");
 8008b74:	4a15      	ldr	r2, [pc, #84]	@ (8008bcc <powerDisplay+0x80>)
 8008b76:	4b14      	ldr	r3, [pc, #80]	@ (8008bc8 <powerDisplay+0x7c>)
 8008b78:	0019      	movs	r1, r3
 8008b7a:	2003      	movs	r0, #3
 8008b7c:	f000 fd5c 	bl	8009638 <CreateLine>
  }
  if(status == BATTERY_GOOD){
 8008b80:	1dfb      	adds	r3, r7, #7
 8008b82:	781b      	ldrb	r3, [r3, #0]
 8008b84:	2b03      	cmp	r3, #3
 8008b86:	d105      	bne.n	8008b94 <powerDisplay+0x48>
    Debug("Battery charge is doing well");
 8008b88:	4a11      	ldr	r2, [pc, #68]	@ (8008bd0 <powerDisplay+0x84>)
 8008b8a:	4b0f      	ldr	r3, [pc, #60]	@ (8008bc8 <powerDisplay+0x7c>)
 8008b8c:	0019      	movs	r1, r3
 8008b8e:	2003      	movs	r0, #3
 8008b90:	f000 fd52 	bl	8009638 <CreateLine>
  }
  if(status == BATTERY_LOW){
 8008b94:	1dfb      	adds	r3, r7, #7
 8008b96:	781b      	ldrb	r3, [r3, #0]
 8008b98:	2b02      	cmp	r3, #2
 8008b9a:	d105      	bne.n	8008ba8 <powerDisplay+0x5c>
    Debug("Battery is getting low");
 8008b9c:	4a0d      	ldr	r2, [pc, #52]	@ (8008bd4 <powerDisplay+0x88>)
 8008b9e:	4b0a      	ldr	r3, [pc, #40]	@ (8008bc8 <powerDisplay+0x7c>)
 8008ba0:	0019      	movs	r1, r3
 8008ba2:	2003      	movs	r0, #3
 8008ba4:	f000 fd48 	bl	8009638 <CreateLine>
  }
  if(status == BATTERY_CRITICAL){
 8008ba8:	1dfb      	adds	r3, r7, #7
 8008baa:	781b      	ldrb	r3, [r3, #0]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d105      	bne.n	8008bbc <powerDisplay+0x70>
    Debug("Battery is critical, stop processes");
 8008bb0:	4a09      	ldr	r2, [pc, #36]	@ (8008bd8 <powerDisplay+0x8c>)
 8008bb2:	4b05      	ldr	r3, [pc, #20]	@ (8008bc8 <powerDisplay+0x7c>)
 8008bb4:	0019      	movs	r1, r3
 8008bb6:	2003      	movs	r0, #3
 8008bb8:	f000 fd3e 	bl	8009638 <CreateLine>
  }
}
 8008bbc:	46c0      	nop			@ (mov r8, r8)
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	b002      	add	sp, #8
 8008bc2:	bd80      	pop	{r7, pc}
 8008bc4:	0801b508 	.word	0x0801b508
 8008bc8:	0801b518 	.word	0x0801b518
 8008bcc:	0801b51c 	.word	0x0801b51c
 8008bd0:	0801b534 	.word	0x0801b534
 8008bd4:	0801b554 	.word	0x0801b554
 8008bd8:	0801b56c 	.word	0x0801b56c

08008bdc <configCheck>:

void configCheck(){
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	af00      	add	r7, sp, #0
  if(BootButton_Pressed() && UserButton_Pressed()){
 8008be0:	f7fc fd2b 	bl	800563a <BootButton_Pressed>
 8008be4:	1e03      	subs	r3, r0, #0
 8008be6:	d007      	beq.n	8008bf8 <configCheck+0x1c>
 8008be8:	f7fc fd38 	bl	800565c <UserButton_Pressed>
 8008bec:	1e03      	subs	r3, r0, #0
 8008bee:	d003      	beq.n	8008bf8 <configCheck+0x1c>
    configSet = true;
 8008bf0:	4b19      	ldr	r3, [pc, #100]	@ (8008c58 <configCheck+0x7c>)
 8008bf2:	2201      	movs	r2, #1
 8008bf4:	701a      	strb	r2, [r3, #0]
 8008bf6:	e00a      	b.n	8008c0e <configCheck+0x32>
  }
  else{
    configSet = false;
 8008bf8:	4b17      	ldr	r3, [pc, #92]	@ (8008c58 <configCheck+0x7c>)
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	701a      	strb	r2, [r3, #0]
    ConfigStamp = HAL_GetTick() + 2000;
 8008bfe:	f001 f8b7 	bl	8009d70 <HAL_GetTick>
 8008c02:	0003      	movs	r3, r0
 8008c04:	22fa      	movs	r2, #250	@ 0xfa
 8008c06:	00d2      	lsls	r2, r2, #3
 8008c08:	189a      	adds	r2, r3, r2
 8008c0a:	4b14      	ldr	r3, [pc, #80]	@ (8008c5c <configCheck+0x80>)
 8008c0c:	601a      	str	r2, [r3, #0]
  }
  if(configSet && TimestampIsReached(ConfigStamp)){
 8008c0e:	4b12      	ldr	r3, [pc, #72]	@ (8008c58 <configCheck+0x7c>)
 8008c10:	781b      	ldrb	r3, [r3, #0]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d01c      	beq.n	8008c50 <configCheck+0x74>
 8008c16:	4b11      	ldr	r3, [pc, #68]	@ (8008c5c <configCheck+0x80>)
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	0018      	movs	r0, r3
 8008c1c:	f000 fcb6 	bl	800958c <TimestampIsReached>
 8008c20:	1e03      	subs	r3, r0, #0
 8008c22:	d015      	beq.n	8008c50 <configCheck+0x74>
    SetConfigMode(); //Make config mode wifi
 8008c24:	f7fa fd76 	bl	8003714 <SetConfigMode>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 0);
 8008c28:	4b0d      	ldr	r3, [pc, #52]	@ (8008c60 <configCheck+0x84>)
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	2101      	movs	r1, #1
 8008c2e:	0018      	movs	r0, r3
 8008c30:	f002 fc3d 	bl	800b4ae <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 0);
 8008c34:	2380      	movs	r3, #128	@ 0x80
 8008c36:	005b      	lsls	r3, r3, #1
 8008c38:	4809      	ldr	r0, [pc, #36]	@ (8008c60 <configCheck+0x84>)
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	0019      	movs	r1, r3
 8008c3e:	f002 fc36 	bl	800b4ae <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 0);
 8008c42:	2380      	movs	r3, #128	@ 0x80
 8008c44:	009b      	lsls	r3, r3, #2
 8008c46:	4806      	ldr	r0, [pc, #24]	@ (8008c60 <configCheck+0x84>)
 8008c48:	2200      	movs	r2, #0
 8008c4a:	0019      	movs	r1, r3
 8008c4c:	f002 fc2f 	bl	800b4ae <HAL_GPIO_WritePin>
  }
}
 8008c50:	46c0      	nop			@ (mov r8, r8)
 8008c52:	46bd      	mov	sp, r7
 8008c54:	bd80      	pop	{r7, pc}
 8008c56:	46c0      	nop			@ (mov r8, r8)
 8008c58:	200027bc 	.word	0x200027bc
 8008c5c:	200027c0 	.word	0x200027c0
 8008c60:	50000400 	.word	0x50000400

08008c64 <status_Upkeep>:
  //RTC_SetWakeUpTimer(RTC_Handler, 300000);
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON,PWR_SLEEPENTRY_WFI);
  HAL_ResumeTick();
}

void status_Upkeep(){
 8008c64:	b590      	push	{r4, r7, lr}
 8008c66:	b083      	sub	sp, #12
 8008c68:	af00      	add	r7, sp, #0
  Battery_Status status;
  configCheck();
 8008c6a:	f7ff ffb7 	bl	8008bdc <configCheck>
  if(TimestampIsReached(PowerStamp)){
 8008c6e:	4b0a      	ldr	r3, [pc, #40]	@ (8008c98 <status_Upkeep+0x34>)
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	0018      	movs	r0, r3
 8008c74:	f000 fc8a 	bl	800958c <TimestampIsReached>
 8008c78:	1e03      	subs	r3, r0, #0
 8008c7a:	d009      	beq.n	8008c90 <status_Upkeep+0x2c>
    status = powerCheck();
 8008c7c:	1dfc      	adds	r4, r7, #7
 8008c7e:	f7ff ff43 	bl	8008b08 <powerCheck>
 8008c82:	0003      	movs	r3, r0
 8008c84:	7023      	strb	r3, [r4, #0]
    powerDisplay(status);
 8008c86:	1dfb      	adds	r3, r7, #7
 8008c88:	781b      	ldrb	r3, [r3, #0]
 8008c8a:	0018      	movs	r0, r3
 8008c8c:	f7ff ff5e 	bl	8008b4c <powerDisplay>
  }
}
 8008c90:	46c0      	nop			@ (mov r8, r8)
 8008c92:	46bd      	mov	sp, r7
 8008c94:	b003      	add	sp, #12
 8008c96:	bd90      	pop	{r4, r7, pc}
 8008c98:	200027c4 	.word	0x200027c4

08008c9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008ca0:	4b07      	ldr	r3, [pc, #28]	@ (8008cc0 <HAL_MspInit+0x24>)
 8008ca2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008ca4:	4b06      	ldr	r3, [pc, #24]	@ (8008cc0 <HAL_MspInit+0x24>)
 8008ca6:	2101      	movs	r1, #1
 8008ca8:	430a      	orrs	r2, r1
 8008caa:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8008cac:	4b04      	ldr	r3, [pc, #16]	@ (8008cc0 <HAL_MspInit+0x24>)
 8008cae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008cb0:	4b03      	ldr	r3, [pc, #12]	@ (8008cc0 <HAL_MspInit+0x24>)
 8008cb2:	2180      	movs	r1, #128	@ 0x80
 8008cb4:	0549      	lsls	r1, r1, #21
 8008cb6:	430a      	orrs	r2, r1
 8008cb8:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008cba:	46c0      	nop			@ (mov r8, r8)
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	bd80      	pop	{r7, pc}
 8008cc0:	40021000 	.word	0x40021000

08008cc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8008cc8:	46c0      	nop			@ (mov r8, r8)
 8008cca:	e7fd      	b.n	8008cc8 <NMI_Handler+0x4>

08008ccc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008cd0:	46c0      	nop			@ (mov r8, r8)
 8008cd2:	e7fd      	b.n	8008cd0 <HardFault_Handler+0x4>

08008cd4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8008cd8:	46c0      	nop			@ (mov r8, r8)
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	bd80      	pop	{r7, pc}

08008cde <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008cde:	b580      	push	{r7, lr}
 8008ce0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008ce2:	46c0      	nop			@ (mov r8, r8)
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	bd80      	pop	{r7, pc}

08008ce8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008cec:	f001 f82e 	bl	8009d4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008cf0:	46c0      	nop			@ (mov r8, r8)
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	bd80      	pop	{r7, pc}
	...

08008cf8 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8008cfc:	4b05      	ldr	r3, [pc, #20]	@ (8008d14 <DMA1_Channel2_3_IRQHandler+0x1c>)
 8008cfe:	0018      	movs	r0, r3
 8008d00:	f001 fea1 	bl	800aa46 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8008d04:	4b04      	ldr	r3, [pc, #16]	@ (8008d18 <DMA1_Channel2_3_IRQHandler+0x20>)
 8008d06:	0018      	movs	r0, r3
 8008d08:	f001 fe9d 	bl	800aa46 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8008d0c:	46c0      	nop			@ (mov r8, r8)
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	bd80      	pop	{r7, pc}
 8008d12:	46c0      	nop			@ (mov r8, r8)
 8008d14:	20000d70 	.word	0x20000d70
 8008d18:	20000d28 	.word	0x20000d28

08008d1c <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8008d20:	4b07      	ldr	r3, [pc, #28]	@ (8008d40 <DMA1_Channel4_5_6_7_IRQHandler+0x24>)
 8008d22:	0018      	movs	r0, r3
 8008d24:	f001 fe8f 	bl	800aa46 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_rx);
 8008d28:	4b06      	ldr	r3, [pc, #24]	@ (8008d44 <DMA1_Channel4_5_6_7_IRQHandler+0x28>)
 8008d2a:	0018      	movs	r0, r3
 8008d2c:	f001 fe8b 	bl	800aa46 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_tx);
 8008d30:	4b05      	ldr	r3, [pc, #20]	@ (8008d48 <DMA1_Channel4_5_6_7_IRQHandler+0x2c>)
 8008d32:	0018      	movs	r0, r3
 8008d34:	f001 fe87 	bl	800aa46 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 8008d38:	46c0      	nop			@ (mov r8, r8)
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	bd80      	pop	{r7, pc}
 8008d3e:	46c0      	nop			@ (mov r8, r8)
 8008d40:	20000df4 	.word	0x20000df4
 8008d44:	20002a74 	.word	0x20002a74
 8008d48:	20002abc 	.word	0x20002abc

08008d4c <USART4_5_IRQHandler>:

/**
  * @brief This function handles USART4 and USART5 interrupt.
  */
void USART4_5_IRQHandler(void)
{
 8008d4c:	b580      	push	{r7, lr}
 8008d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART4_5_IRQn 0 */

  /* USER CODE END USART4_5_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8008d50:	4b03      	ldr	r3, [pc, #12]	@ (8008d60 <USART4_5_IRQHandler+0x14>)
 8008d52:	0018      	movs	r0, r3
 8008d54:	f008 fc48 	bl	80115e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART4_5_IRQn 1 */

  /* USER CODE END USART4_5_IRQn 1 */
}
 8008d58:	46c0      	nop			@ (mov r8, r8)
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	bd80      	pop	{r7, pc}
 8008d5e:	46c0      	nop			@ (mov r8, r8)
 8008d60:	200029bc 	.word	0x200029bc

08008d64 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 8008d64:	b580      	push	{r7, lr}
 8008d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8008d68:	4b09      	ldr	r3, [pc, #36]	@ (8008d90 <I2C1_IRQHandler+0x2c>)
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	699a      	ldr	r2, [r3, #24]
 8008d6e:	23e0      	movs	r3, #224	@ 0xe0
 8008d70:	00db      	lsls	r3, r3, #3
 8008d72:	4013      	ands	r3, r2
 8008d74:	d004      	beq.n	8008d80 <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 8008d76:	4b06      	ldr	r3, [pc, #24]	@ (8008d90 <I2C1_IRQHandler+0x2c>)
 8008d78:	0018      	movs	r0, r3
 8008d7a:	f002 fe71 	bl	800ba60 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 8008d7e:	e003      	b.n	8008d88 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 8008d80:	4b03      	ldr	r3, [pc, #12]	@ (8008d90 <I2C1_IRQHandler+0x2c>)
 8008d82:	0018      	movs	r0, r3
 8008d84:	f002 fe52 	bl	800ba2c <HAL_I2C_EV_IRQHandler>
}
 8008d88:	46c0      	nop			@ (mov r8, r8)
 8008d8a:	46bd      	mov	sp, r7
 8008d8c:	bd80      	pop	{r7, pc}
 8008d8e:	46c0      	nop			@ (mov r8, r8)
 8008d90:	20000c80 	.word	0x20000c80

08008d94 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 8008d94:	b580      	push	{r7, lr}
 8008d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8008d98:	4b03      	ldr	r3, [pc, #12]	@ (8008da8 <USB_IRQHandler+0x14>)
 8008d9a:	0018      	movs	r0, r3
 8008d9c:	f005 f828 	bl	800ddf0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8008da0:	46c0      	nop			@ (mov r8, r8)
 8008da2:	46bd      	mov	sp, r7
 8008da4:	bd80      	pop	{r7, pc}
 8008da6:	46c0      	nop			@ (mov r8, r8)
 8008da8:	200038c4 	.word	0x200038c4

08008dac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	af00      	add	r7, sp, #0
  return 1;
 8008db0:	2301      	movs	r3, #1
}
 8008db2:	0018      	movs	r0, r3
 8008db4:	46bd      	mov	sp, r7
 8008db6:	bd80      	pop	{r7, pc}

08008db8 <_kill>:

int _kill(int pid, int sig)
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b082      	sub	sp, #8
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
 8008dc0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8008dc2:	f00f f8d5 	bl	8017f70 <__errno>
 8008dc6:	0003      	movs	r3, r0
 8008dc8:	2216      	movs	r2, #22
 8008dca:	601a      	str	r2, [r3, #0]
  return -1;
 8008dcc:	2301      	movs	r3, #1
 8008dce:	425b      	negs	r3, r3
}
 8008dd0:	0018      	movs	r0, r3
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	b002      	add	sp, #8
 8008dd6:	bd80      	pop	{r7, pc}

08008dd8 <_exit>:

void _exit (int status)
{
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b082      	sub	sp, #8
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8008de0:	2301      	movs	r3, #1
 8008de2:	425a      	negs	r2, r3
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	0011      	movs	r1, r2
 8008de8:	0018      	movs	r0, r3
 8008dea:	f7ff ffe5 	bl	8008db8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8008dee:	46c0      	nop			@ (mov r8, r8)
 8008df0:	e7fd      	b.n	8008dee <_exit+0x16>

08008df2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8008df2:	b580      	push	{r7, lr}
 8008df4:	b086      	sub	sp, #24
 8008df6:	af00      	add	r7, sp, #0
 8008df8:	60f8      	str	r0, [r7, #12]
 8008dfa:	60b9      	str	r1, [r7, #8]
 8008dfc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008dfe:	2300      	movs	r3, #0
 8008e00:	617b      	str	r3, [r7, #20]
 8008e02:	e00a      	b.n	8008e1a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8008e04:	e000      	b.n	8008e08 <_read+0x16>
 8008e06:	bf00      	nop
 8008e08:	0001      	movs	r1, r0
 8008e0a:	68bb      	ldr	r3, [r7, #8]
 8008e0c:	1c5a      	adds	r2, r3, #1
 8008e0e:	60ba      	str	r2, [r7, #8]
 8008e10:	b2ca      	uxtb	r2, r1
 8008e12:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008e14:	697b      	ldr	r3, [r7, #20]
 8008e16:	3301      	adds	r3, #1
 8008e18:	617b      	str	r3, [r7, #20]
 8008e1a:	697a      	ldr	r2, [r7, #20]
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	429a      	cmp	r2, r3
 8008e20:	dbf0      	blt.n	8008e04 <_read+0x12>
  }

  return len;
 8008e22:	687b      	ldr	r3, [r7, #4]
}
 8008e24:	0018      	movs	r0, r3
 8008e26:	46bd      	mov	sp, r7
 8008e28:	b006      	add	sp, #24
 8008e2a:	bd80      	pop	{r7, pc}

08008e2c <_close>:
  }
  return len;
}

int _close(int file)
{
 8008e2c:	b580      	push	{r7, lr}
 8008e2e:	b082      	sub	sp, #8
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8008e34:	2301      	movs	r3, #1
 8008e36:	425b      	negs	r3, r3
}
 8008e38:	0018      	movs	r0, r3
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	b002      	add	sp, #8
 8008e3e:	bd80      	pop	{r7, pc}

08008e40 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b082      	sub	sp, #8
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
 8008e48:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8008e4a:	683b      	ldr	r3, [r7, #0]
 8008e4c:	2280      	movs	r2, #128	@ 0x80
 8008e4e:	0192      	lsls	r2, r2, #6
 8008e50:	605a      	str	r2, [r3, #4]
  return 0;
 8008e52:	2300      	movs	r3, #0
}
 8008e54:	0018      	movs	r0, r3
 8008e56:	46bd      	mov	sp, r7
 8008e58:	b002      	add	sp, #8
 8008e5a:	bd80      	pop	{r7, pc}

08008e5c <_isatty>:

int _isatty(int file)
{
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	b082      	sub	sp, #8
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8008e64:	2301      	movs	r3, #1
}
 8008e66:	0018      	movs	r0, r3
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	b002      	add	sp, #8
 8008e6c:	bd80      	pop	{r7, pc}

08008e6e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8008e6e:	b580      	push	{r7, lr}
 8008e70:	b084      	sub	sp, #16
 8008e72:	af00      	add	r7, sp, #0
 8008e74:	60f8      	str	r0, [r7, #12]
 8008e76:	60b9      	str	r1, [r7, #8]
 8008e78:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8008e7a:	2300      	movs	r3, #0
}
 8008e7c:	0018      	movs	r0, r3
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	b004      	add	sp, #16
 8008e82:	bd80      	pop	{r7, pc}

08008e84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b086      	sub	sp, #24
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008e8c:	4a14      	ldr	r2, [pc, #80]	@ (8008ee0 <_sbrk+0x5c>)
 8008e8e:	4b15      	ldr	r3, [pc, #84]	@ (8008ee4 <_sbrk+0x60>)
 8008e90:	1ad3      	subs	r3, r2, r3
 8008e92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008e94:	697b      	ldr	r3, [r7, #20]
 8008e96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008e98:	4b13      	ldr	r3, [pc, #76]	@ (8008ee8 <_sbrk+0x64>)
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d102      	bne.n	8008ea6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008ea0:	4b11      	ldr	r3, [pc, #68]	@ (8008ee8 <_sbrk+0x64>)
 8008ea2:	4a12      	ldr	r2, [pc, #72]	@ (8008eec <_sbrk+0x68>)
 8008ea4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8008ea6:	4b10      	ldr	r3, [pc, #64]	@ (8008ee8 <_sbrk+0x64>)
 8008ea8:	681a      	ldr	r2, [r3, #0]
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	18d3      	adds	r3, r2, r3
 8008eae:	693a      	ldr	r2, [r7, #16]
 8008eb0:	429a      	cmp	r2, r3
 8008eb2:	d207      	bcs.n	8008ec4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008eb4:	f00f f85c 	bl	8017f70 <__errno>
 8008eb8:	0003      	movs	r3, r0
 8008eba:	220c      	movs	r2, #12
 8008ebc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8008ebe:	2301      	movs	r3, #1
 8008ec0:	425b      	negs	r3, r3
 8008ec2:	e009      	b.n	8008ed8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008ec4:	4b08      	ldr	r3, [pc, #32]	@ (8008ee8 <_sbrk+0x64>)
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8008eca:	4b07      	ldr	r3, [pc, #28]	@ (8008ee8 <_sbrk+0x64>)
 8008ecc:	681a      	ldr	r2, [r3, #0]
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	18d2      	adds	r2, r2, r3
 8008ed2:	4b05      	ldr	r3, [pc, #20]	@ (8008ee8 <_sbrk+0x64>)
 8008ed4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8008ed6:	68fb      	ldr	r3, [r7, #12]
}
 8008ed8:	0018      	movs	r0, r3
 8008eda:	46bd      	mov	sp, r7
 8008edc:	b006      	add	sp, #24
 8008ede:	bd80      	pop	{r7, pc}
 8008ee0:	20005000 	.word	0x20005000
 8008ee4:	00000400 	.word	0x00000400
 8008ee8:	200027c8 	.word	0x200027c8
 8008eec:	20003f28 	.word	0x20003f28

08008ef0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008ef4:	46c0      	nop			@ (mov r8, r8)
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	bd80      	pop	{r7, pc}
	...

08008efc <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b086      	sub	sp, #24
 8008f00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008f02:	2310      	movs	r3, #16
 8008f04:	18fb      	adds	r3, r7, r3
 8008f06:	0018      	movs	r0, r3
 8008f08:	2308      	movs	r3, #8
 8008f0a:	001a      	movs	r2, r3
 8008f0c:	2100      	movs	r1, #0
 8008f0e:	f00e ff9d 	bl	8017e4c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8008f12:	003b      	movs	r3, r7
 8008f14:	0018      	movs	r0, r3
 8008f16:	2310      	movs	r3, #16
 8008f18:	001a      	movs	r2, r3
 8008f1a:	2100      	movs	r1, #0
 8008f1c:	f00e ff96 	bl	8017e4c <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8008f20:	4b2e      	ldr	r3, [pc, #184]	@ (8008fdc <MX_TIM2_Init+0xe0>)
 8008f22:	2280      	movs	r2, #128	@ 0x80
 8008f24:	05d2      	lsls	r2, r2, #23
 8008f26:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8008f28:	4b2c      	ldr	r3, [pc, #176]	@ (8008fdc <MX_TIM2_Init+0xe0>)
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008f2e:	4b2b      	ldr	r3, [pc, #172]	@ (8008fdc <MX_TIM2_Init+0xe0>)
 8008f30:	2200      	movs	r2, #0
 8008f32:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8008f34:	4b29      	ldr	r3, [pc, #164]	@ (8008fdc <MX_TIM2_Init+0xe0>)
 8008f36:	4a2a      	ldr	r2, [pc, #168]	@ (8008fe0 <MX_TIM2_Init+0xe4>)
 8008f38:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008f3a:	4b28      	ldr	r3, [pc, #160]	@ (8008fdc <MX_TIM2_Init+0xe0>)
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008f40:	4b26      	ldr	r3, [pc, #152]	@ (8008fdc <MX_TIM2_Init+0xe0>)
 8008f42:	2200      	movs	r2, #0
 8008f44:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8008f46:	4b25      	ldr	r3, [pc, #148]	@ (8008fdc <MX_TIM2_Init+0xe0>)
 8008f48:	0018      	movs	r0, r3
 8008f4a:	f007 fdbf 	bl	8010acc <HAL_TIM_PWM_Init>
 8008f4e:	1e03      	subs	r3, r0, #0
 8008f50:	d001      	beq.n	8008f56 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8008f52:	f7fd f9e3 	bl	800631c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008f56:	2110      	movs	r1, #16
 8008f58:	187b      	adds	r3, r7, r1
 8008f5a:	2200      	movs	r2, #0
 8008f5c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008f5e:	187b      	adds	r3, r7, r1
 8008f60:	2200      	movs	r2, #0
 8008f62:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8008f64:	187a      	adds	r2, r7, r1
 8008f66:	4b1d      	ldr	r3, [pc, #116]	@ (8008fdc <MX_TIM2_Init+0xe0>)
 8008f68:	0011      	movs	r1, r2
 8008f6a:	0018      	movs	r0, r3
 8008f6c:	f008 f8cc 	bl	8011108 <HAL_TIMEx_MasterConfigSynchronization>
 8008f70:	1e03      	subs	r3, r0, #0
 8008f72:	d001      	beq.n	8008f78 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8008f74:	f7fd f9d2 	bl	800631c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008f78:	003b      	movs	r3, r7
 8008f7a:	2260      	movs	r2, #96	@ 0x60
 8008f7c:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8008f7e:	003b      	movs	r3, r7
 8008f80:	2200      	movs	r2, #0
 8008f82:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008f84:	003b      	movs	r3, r7
 8008f86:	2200      	movs	r2, #0
 8008f88:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008f8a:	003b      	movs	r3, r7
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8008f90:	0039      	movs	r1, r7
 8008f92:	4b12      	ldr	r3, [pc, #72]	@ (8008fdc <MX_TIM2_Init+0xe0>)
 8008f94:	2200      	movs	r2, #0
 8008f96:	0018      	movs	r0, r3
 8008f98:	f007 fe6a 	bl	8010c70 <HAL_TIM_PWM_ConfigChannel>
 8008f9c:	1e03      	subs	r3, r0, #0
 8008f9e:	d001      	beq.n	8008fa4 <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 8008fa0:	f7fd f9bc 	bl	800631c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8008fa4:	0039      	movs	r1, r7
 8008fa6:	4b0d      	ldr	r3, [pc, #52]	@ (8008fdc <MX_TIM2_Init+0xe0>)
 8008fa8:	2208      	movs	r2, #8
 8008faa:	0018      	movs	r0, r3
 8008fac:	f007 fe60 	bl	8010c70 <HAL_TIM_PWM_ConfigChannel>
 8008fb0:	1e03      	subs	r3, r0, #0
 8008fb2:	d001      	beq.n	8008fb8 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8008fb4:	f7fd f9b2 	bl	800631c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8008fb8:	0039      	movs	r1, r7
 8008fba:	4b08      	ldr	r3, [pc, #32]	@ (8008fdc <MX_TIM2_Init+0xe0>)
 8008fbc:	220c      	movs	r2, #12
 8008fbe:	0018      	movs	r0, r3
 8008fc0:	f007 fe56 	bl	8010c70 <HAL_TIM_PWM_ConfigChannel>
 8008fc4:	1e03      	subs	r3, r0, #0
 8008fc6:	d001      	beq.n	8008fcc <MX_TIM2_Init+0xd0>
  {
    Error_Handler();
 8008fc8:	f7fd f9a8 	bl	800631c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8008fcc:	4b03      	ldr	r3, [pc, #12]	@ (8008fdc <MX_TIM2_Init+0xe0>)
 8008fce:	0018      	movs	r0, r3
 8008fd0:	f000 f8aa 	bl	8009128 <HAL_TIM_MspPostInit>

}
 8008fd4:	46c0      	nop			@ (mov r8, r8)
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	b006      	add	sp, #24
 8008fda:	bd80      	pop	{r7, pc}
 8008fdc:	200027cc 	.word	0x200027cc
 8008fe0:	0000ffff 	.word	0x0000ffff

08008fe4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b086      	sub	sp, #24
 8008fe8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008fea:	2310      	movs	r3, #16
 8008fec:	18fb      	adds	r3, r7, r3
 8008fee:	0018      	movs	r0, r3
 8008ff0:	2308      	movs	r3, #8
 8008ff2:	001a      	movs	r2, r3
 8008ff4:	2100      	movs	r1, #0
 8008ff6:	f00e ff29 	bl	8017e4c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8008ffa:	003b      	movs	r3, r7
 8008ffc:	0018      	movs	r0, r3
 8008ffe:	2310      	movs	r3, #16
 8009000:	001a      	movs	r2, r3
 8009002:	2100      	movs	r1, #0
 8009004:	f00e ff22 	bl	8017e4c <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8009008:	4b32      	ldr	r3, [pc, #200]	@ (80090d4 <MX_TIM3_Init+0xf0>)
 800900a:	4a33      	ldr	r2, [pc, #204]	@ (80090d8 <MX_TIM3_Init+0xf4>)
 800900c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800900e:	4b31      	ldr	r3, [pc, #196]	@ (80090d4 <MX_TIM3_Init+0xf0>)
 8009010:	2200      	movs	r2, #0
 8009012:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009014:	4b2f      	ldr	r3, [pc, #188]	@ (80090d4 <MX_TIM3_Init+0xf0>)
 8009016:	2200      	movs	r2, #0
 8009018:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800901a:	4b2e      	ldr	r3, [pc, #184]	@ (80090d4 <MX_TIM3_Init+0xf0>)
 800901c:	4a2f      	ldr	r2, [pc, #188]	@ (80090dc <MX_TIM3_Init+0xf8>)
 800901e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009020:	4b2c      	ldr	r3, [pc, #176]	@ (80090d4 <MX_TIM3_Init+0xf0>)
 8009022:	2200      	movs	r2, #0
 8009024:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009026:	4b2b      	ldr	r3, [pc, #172]	@ (80090d4 <MX_TIM3_Init+0xf0>)
 8009028:	2200      	movs	r2, #0
 800902a:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800902c:	4b29      	ldr	r3, [pc, #164]	@ (80090d4 <MX_TIM3_Init+0xf0>)
 800902e:	0018      	movs	r0, r3
 8009030:	f007 fd4c 	bl	8010acc <HAL_TIM_PWM_Init>
 8009034:	1e03      	subs	r3, r0, #0
 8009036:	d001      	beq.n	800903c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8009038:	f7fd f970 	bl	800631c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800903c:	2110      	movs	r1, #16
 800903e:	187b      	adds	r3, r7, r1
 8009040:	2200      	movs	r2, #0
 8009042:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009044:	187b      	adds	r3, r7, r1
 8009046:	2200      	movs	r2, #0
 8009048:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800904a:	187a      	adds	r2, r7, r1
 800904c:	4b21      	ldr	r3, [pc, #132]	@ (80090d4 <MX_TIM3_Init+0xf0>)
 800904e:	0011      	movs	r1, r2
 8009050:	0018      	movs	r0, r3
 8009052:	f008 f859 	bl	8011108 <HAL_TIMEx_MasterConfigSynchronization>
 8009056:	1e03      	subs	r3, r0, #0
 8009058:	d001      	beq.n	800905e <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 800905a:	f7fd f95f 	bl	800631c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800905e:	003b      	movs	r3, r7
 8009060:	2260      	movs	r2, #96	@ 0x60
 8009062:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8009064:	003b      	movs	r3, r7
 8009066:	2200      	movs	r2, #0
 8009068:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800906a:	003b      	movs	r3, r7
 800906c:	2200      	movs	r2, #0
 800906e:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009070:	003b      	movs	r3, r7
 8009072:	2200      	movs	r2, #0
 8009074:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009076:	0039      	movs	r1, r7
 8009078:	4b16      	ldr	r3, [pc, #88]	@ (80090d4 <MX_TIM3_Init+0xf0>)
 800907a:	2200      	movs	r2, #0
 800907c:	0018      	movs	r0, r3
 800907e:	f007 fdf7 	bl	8010c70 <HAL_TIM_PWM_ConfigChannel>
 8009082:	1e03      	subs	r3, r0, #0
 8009084:	d001      	beq.n	800908a <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 8009086:	f7fd f949 	bl	800631c <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim3, TIM3_TI1_GPIO) != HAL_OK)
 800908a:	4b12      	ldr	r3, [pc, #72]	@ (80090d4 <MX_TIM3_Init+0xf0>)
 800908c:	2104      	movs	r1, #4
 800908e:	0018      	movs	r0, r3
 8009090:	f008 f898 	bl	80111c4 <HAL_TIMEx_RemapConfig>
 8009094:	1e03      	subs	r3, r0, #0
 8009096:	d001      	beq.n	800909c <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8009098:	f7fd f940 	bl	800631c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800909c:	0039      	movs	r1, r7
 800909e:	4b0d      	ldr	r3, [pc, #52]	@ (80090d4 <MX_TIM3_Init+0xf0>)
 80090a0:	2204      	movs	r2, #4
 80090a2:	0018      	movs	r0, r3
 80090a4:	f007 fde4 	bl	8010c70 <HAL_TIM_PWM_ConfigChannel>
 80090a8:	1e03      	subs	r3, r0, #0
 80090aa:	d001      	beq.n	80090b0 <MX_TIM3_Init+0xcc>
  {
    Error_Handler();
 80090ac:	f7fd f936 	bl	800631c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80090b0:	0039      	movs	r1, r7
 80090b2:	4b08      	ldr	r3, [pc, #32]	@ (80090d4 <MX_TIM3_Init+0xf0>)
 80090b4:	2208      	movs	r2, #8
 80090b6:	0018      	movs	r0, r3
 80090b8:	f007 fdda 	bl	8010c70 <HAL_TIM_PWM_ConfigChannel>
 80090bc:	1e03      	subs	r3, r0, #0
 80090be:	d001      	beq.n	80090c4 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 80090c0:	f7fd f92c 	bl	800631c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80090c4:	4b03      	ldr	r3, [pc, #12]	@ (80090d4 <MX_TIM3_Init+0xf0>)
 80090c6:	0018      	movs	r0, r3
 80090c8:	f000 f82e 	bl	8009128 <HAL_TIM_MspPostInit>

}
 80090cc:	46c0      	nop			@ (mov r8, r8)
 80090ce:	46bd      	mov	sp, r7
 80090d0:	b006      	add	sp, #24
 80090d2:	bd80      	pop	{r7, pc}
 80090d4:	2000280c 	.word	0x2000280c
 80090d8:	40000400 	.word	0x40000400
 80090dc:	0000ffff 	.word	0x0000ffff

080090e0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80090e0:	b580      	push	{r7, lr}
 80090e2:	b082      	sub	sp, #8
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681a      	ldr	r2, [r3, #0]
 80090ec:	2380      	movs	r3, #128	@ 0x80
 80090ee:	05db      	lsls	r3, r3, #23
 80090f0:	429a      	cmp	r2, r3
 80090f2:	d106      	bne.n	8009102 <HAL_TIM_PWM_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80090f4:	4b0a      	ldr	r3, [pc, #40]	@ (8009120 <HAL_TIM_PWM_MspInit+0x40>)
 80090f6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80090f8:	4b09      	ldr	r3, [pc, #36]	@ (8009120 <HAL_TIM_PWM_MspInit+0x40>)
 80090fa:	2101      	movs	r1, #1
 80090fc:	430a      	orrs	r2, r1
 80090fe:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8009100:	e00a      	b.n	8009118 <HAL_TIM_PWM_MspInit+0x38>
  else if(tim_pwmHandle->Instance==TIM3)
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	4a07      	ldr	r2, [pc, #28]	@ (8009124 <HAL_TIM_PWM_MspInit+0x44>)
 8009108:	4293      	cmp	r3, r2
 800910a:	d105      	bne.n	8009118 <HAL_TIM_PWM_MspInit+0x38>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800910c:	4b04      	ldr	r3, [pc, #16]	@ (8009120 <HAL_TIM_PWM_MspInit+0x40>)
 800910e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009110:	4b03      	ldr	r3, [pc, #12]	@ (8009120 <HAL_TIM_PWM_MspInit+0x40>)
 8009112:	2102      	movs	r1, #2
 8009114:	430a      	orrs	r2, r1
 8009116:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8009118:	46c0      	nop			@ (mov r8, r8)
 800911a:	46bd      	mov	sp, r7
 800911c:	b002      	add	sp, #8
 800911e:	bd80      	pop	{r7, pc}
 8009120:	40021000 	.word	0x40021000
 8009124:	40000400 	.word	0x40000400

08009128 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8009128:	b590      	push	{r4, r7, lr}
 800912a:	b08b      	sub	sp, #44	@ 0x2c
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009130:	2414      	movs	r4, #20
 8009132:	193b      	adds	r3, r7, r4
 8009134:	0018      	movs	r0, r3
 8009136:	2314      	movs	r3, #20
 8009138:	001a      	movs	r2, r3
 800913a:	2100      	movs	r1, #0
 800913c:	f00e fe86 	bl	8017e4c <memset>
  if(timHandle->Instance==TIM2)
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681a      	ldr	r2, [r3, #0]
 8009144:	2380      	movs	r3, #128	@ 0x80
 8009146:	05db      	lsls	r3, r3, #23
 8009148:	429a      	cmp	r2, r3
 800914a:	d123      	bne.n	8009194 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800914c:	4b27      	ldr	r3, [pc, #156]	@ (80091ec <HAL_TIM_MspPostInit+0xc4>)
 800914e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009150:	4b26      	ldr	r3, [pc, #152]	@ (80091ec <HAL_TIM_MspPostInit+0xc4>)
 8009152:	2101      	movs	r1, #1
 8009154:	430a      	orrs	r2, r1
 8009156:	62da      	str	r2, [r3, #44]	@ 0x2c
 8009158:	4b24      	ldr	r3, [pc, #144]	@ (80091ec <HAL_TIM_MspPostInit+0xc4>)
 800915a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800915c:	2201      	movs	r2, #1
 800915e:	4013      	ands	r3, r2
 8009160:	613b      	str	r3, [r7, #16]
 8009162:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = MCU_LED_B_R_Pin|MCU_LED_B_G_Pin|MCU_LED_B_B_Pin;
 8009164:	0021      	movs	r1, r4
 8009166:	187b      	adds	r3, r7, r1
 8009168:	220d      	movs	r2, #13
 800916a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800916c:	187b      	adds	r3, r7, r1
 800916e:	2202      	movs	r2, #2
 8009170:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009172:	187b      	adds	r3, r7, r1
 8009174:	2200      	movs	r2, #0
 8009176:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009178:	187b      	adds	r3, r7, r1
 800917a:	2200      	movs	r2, #0
 800917c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 800917e:	187b      	adds	r3, r7, r1
 8009180:	2202      	movs	r2, #2
 8009182:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009184:	187a      	adds	r2, r7, r1
 8009186:	23a0      	movs	r3, #160	@ 0xa0
 8009188:	05db      	lsls	r3, r3, #23
 800918a:	0011      	movs	r1, r2
 800918c:	0018      	movs	r0, r3
 800918e:	f001 ff11 	bl	800afb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8009192:	e027      	b.n	80091e4 <HAL_TIM_MspPostInit+0xbc>
  else if(timHandle->Instance==TIM3)
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	4a15      	ldr	r2, [pc, #84]	@ (80091f0 <HAL_TIM_MspPostInit+0xc8>)
 800919a:	4293      	cmp	r3, r2
 800919c:	d122      	bne.n	80091e4 <HAL_TIM_MspPostInit+0xbc>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800919e:	4b13      	ldr	r3, [pc, #76]	@ (80091ec <HAL_TIM_MspPostInit+0xc4>)
 80091a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091a2:	4b12      	ldr	r3, [pc, #72]	@ (80091ec <HAL_TIM_MspPostInit+0xc4>)
 80091a4:	2104      	movs	r1, #4
 80091a6:	430a      	orrs	r2, r1
 80091a8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80091aa:	4b10      	ldr	r3, [pc, #64]	@ (80091ec <HAL_TIM_MspPostInit+0xc4>)
 80091ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091ae:	2204      	movs	r2, #4
 80091b0:	4013      	ands	r3, r2
 80091b2:	60fb      	str	r3, [r7, #12]
 80091b4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MCU_LED_A_R_Pin|MCU_LED_A_G_Pin|MCU_LED_A_B_Pin;
 80091b6:	2114      	movs	r1, #20
 80091b8:	187b      	adds	r3, r7, r1
 80091ba:	22e0      	movs	r2, #224	@ 0xe0
 80091bc:	0052      	lsls	r2, r2, #1
 80091be:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80091c0:	187b      	adds	r3, r7, r1
 80091c2:	2202      	movs	r2, #2
 80091c4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80091c6:	187b      	adds	r3, r7, r1
 80091c8:	2200      	movs	r2, #0
 80091ca:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80091cc:	187b      	adds	r3, r7, r1
 80091ce:	2200      	movs	r2, #0
 80091d0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80091d2:	187b      	adds	r3, r7, r1
 80091d4:	2202      	movs	r2, #2
 80091d6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80091d8:	187b      	adds	r3, r7, r1
 80091da:	4a06      	ldr	r2, [pc, #24]	@ (80091f4 <HAL_TIM_MspPostInit+0xcc>)
 80091dc:	0019      	movs	r1, r3
 80091de:	0010      	movs	r0, r2
 80091e0:	f001 fee8 	bl	800afb4 <HAL_GPIO_Init>
}
 80091e4:	46c0      	nop			@ (mov r8, r8)
 80091e6:	46bd      	mov	sp, r7
 80091e8:	b00b      	add	sp, #44	@ 0x2c
 80091ea:	bd90      	pop	{r4, r7, pc}
 80091ec:	40021000 	.word	0x40021000
 80091f0:	40000400 	.word	0x40000400
 80091f4:	50000800 	.word	0x50000800

080091f8 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart4_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80091fc:	4b17      	ldr	r3, [pc, #92]	@ (800925c <MX_LPUART1_UART_Init+0x64>)
 80091fe:	4a18      	ldr	r2, [pc, #96]	@ (8009260 <MX_LPUART1_UART_Init+0x68>)
 8009200:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8009202:	4b16      	ldr	r3, [pc, #88]	@ (800925c <MX_LPUART1_UART_Init+0x64>)
 8009204:	22e1      	movs	r2, #225	@ 0xe1
 8009206:	0252      	lsls	r2, r2, #9
 8009208:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800920a:	4b14      	ldr	r3, [pc, #80]	@ (800925c <MX_LPUART1_UART_Init+0x64>)
 800920c:	2200      	movs	r2, #0
 800920e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8009210:	4b12      	ldr	r3, [pc, #72]	@ (800925c <MX_LPUART1_UART_Init+0x64>)
 8009212:	2200      	movs	r2, #0
 8009214:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8009216:	4b11      	ldr	r3, [pc, #68]	@ (800925c <MX_LPUART1_UART_Init+0x64>)
 8009218:	2200      	movs	r2, #0
 800921a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800921c:	4b0f      	ldr	r3, [pc, #60]	@ (800925c <MX_LPUART1_UART_Init+0x64>)
 800921e:	220c      	movs	r2, #12
 8009220:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009222:	4b0e      	ldr	r3, [pc, #56]	@ (800925c <MX_LPUART1_UART_Init+0x64>)
 8009224:	2200      	movs	r2, #0
 8009226:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8009228:	4b0c      	ldr	r3, [pc, #48]	@ (800925c <MX_LPUART1_UART_Init+0x64>)
 800922a:	2200      	movs	r2, #0
 800922c:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT|UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 800922e:	4b0b      	ldr	r3, [pc, #44]	@ (800925c <MX_LPUART1_UART_Init+0x64>)
 8009230:	2218      	movs	r2, #24
 8009232:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8009234:	4b09      	ldr	r3, [pc, #36]	@ (800925c <MX_LPUART1_UART_Init+0x64>)
 8009236:	2280      	movs	r2, #128	@ 0x80
 8009238:	0212      	lsls	r2, r2, #8
 800923a:	635a      	str	r2, [r3, #52]	@ 0x34
  hlpuart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 800923c:	4b07      	ldr	r3, [pc, #28]	@ (800925c <MX_LPUART1_UART_Init+0x64>)
 800923e:	2280      	movs	r2, #128	@ 0x80
 8009240:	0152      	lsls	r2, r2, #5
 8009242:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8009244:	4b05      	ldr	r3, [pc, #20]	@ (800925c <MX_LPUART1_UART_Init+0x64>)
 8009246:	0018      	movs	r0, r3
 8009248:	f007 ffda 	bl	8011200 <HAL_UART_Init>
 800924c:	1e03      	subs	r3, r0, #0
 800924e:	d001      	beq.n	8009254 <MX_LPUART1_UART_Init+0x5c>
  {
    Error_Handler();
 8009250:	f7fd f864 	bl	800631c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8009254:	46c0      	nop			@ (mov r8, r8)
 8009256:	46bd      	mov	sp, r7
 8009258:	bd80      	pop	{r7, pc}
 800925a:	46c0      	nop			@ (mov r8, r8)
 800925c:	2000284c 	.word	0x2000284c
 8009260:	40004800 	.word	0x40004800

08009264 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8009264:	b580      	push	{r7, lr}
 8009266:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8009268:	4b16      	ldr	r3, [pc, #88]	@ (80092c4 <MX_USART1_UART_Init+0x60>)
 800926a:	4a17      	ldr	r2, [pc, #92]	@ (80092c8 <MX_USART1_UART_Init+0x64>)
 800926c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800926e:	4b15      	ldr	r3, [pc, #84]	@ (80092c4 <MX_USART1_UART_Init+0x60>)
 8009270:	22e1      	movs	r2, #225	@ 0xe1
 8009272:	0252      	lsls	r2, r2, #9
 8009274:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8009276:	4b13      	ldr	r3, [pc, #76]	@ (80092c4 <MX_USART1_UART_Init+0x60>)
 8009278:	2200      	movs	r2, #0
 800927a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800927c:	4b11      	ldr	r3, [pc, #68]	@ (80092c4 <MX_USART1_UART_Init+0x60>)
 800927e:	2200      	movs	r2, #0
 8009280:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8009282:	4b10      	ldr	r3, [pc, #64]	@ (80092c4 <MX_USART1_UART_Init+0x60>)
 8009284:	2200      	movs	r2, #0
 8009286:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8009288:	4b0e      	ldr	r3, [pc, #56]	@ (80092c4 <MX_USART1_UART_Init+0x60>)
 800928a:	220c      	movs	r2, #12
 800928c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800928e:	4b0d      	ldr	r3, [pc, #52]	@ (80092c4 <MX_USART1_UART_Init+0x60>)
 8009290:	2200      	movs	r2, #0
 8009292:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8009294:	4b0b      	ldr	r3, [pc, #44]	@ (80092c4 <MX_USART1_UART_Init+0x60>)
 8009296:	2200      	movs	r2, #0
 8009298:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800929a:	4b0a      	ldr	r3, [pc, #40]	@ (80092c4 <MX_USART1_UART_Init+0x60>)
 800929c:	2200      	movs	r2, #0
 800929e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 80092a0:	4b08      	ldr	r3, [pc, #32]	@ (80092c4 <MX_USART1_UART_Init+0x60>)
 80092a2:	2208      	movs	r2, #8
 80092a4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 80092a6:	4b07      	ldr	r3, [pc, #28]	@ (80092c4 <MX_USART1_UART_Init+0x60>)
 80092a8:	2280      	movs	r2, #128	@ 0x80
 80092aa:	0212      	lsls	r2, r2, #8
 80092ac:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80092ae:	4b05      	ldr	r3, [pc, #20]	@ (80092c4 <MX_USART1_UART_Init+0x60>)
 80092b0:	0018      	movs	r0, r3
 80092b2:	f007 ffa5 	bl	8011200 <HAL_UART_Init>
 80092b6:	1e03      	subs	r3, r0, #0
 80092b8:	d001      	beq.n	80092be <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 80092ba:	f7fd f82f 	bl	800631c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80092be:	46c0      	nop			@ (mov r8, r8)
 80092c0:	46bd      	mov	sp, r7
 80092c2:	bd80      	pop	{r7, pc}
 80092c4:	20002904 	.word	0x20002904
 80092c8:	40013800 	.word	0x40013800

080092cc <MX_USART4_UART_Init>:
/* USART4 init function */

void MX_USART4_UART_Init(void)
{
 80092cc:	b580      	push	{r7, lr}
 80092ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 80092d0:	4b14      	ldr	r3, [pc, #80]	@ (8009324 <MX_USART4_UART_Init+0x58>)
 80092d2:	4a15      	ldr	r2, [pc, #84]	@ (8009328 <MX_USART4_UART_Init+0x5c>)
 80092d4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80092d6:	4b13      	ldr	r3, [pc, #76]	@ (8009324 <MX_USART4_UART_Init+0x58>)
 80092d8:	22e1      	movs	r2, #225	@ 0xe1
 80092da:	0252      	lsls	r2, r2, #9
 80092dc:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80092de:	4b11      	ldr	r3, [pc, #68]	@ (8009324 <MX_USART4_UART_Init+0x58>)
 80092e0:	2200      	movs	r2, #0
 80092e2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80092e4:	4b0f      	ldr	r3, [pc, #60]	@ (8009324 <MX_USART4_UART_Init+0x58>)
 80092e6:	2200      	movs	r2, #0
 80092e8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80092ea:	4b0e      	ldr	r3, [pc, #56]	@ (8009324 <MX_USART4_UART_Init+0x58>)
 80092ec:	2200      	movs	r2, #0
 80092ee:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80092f0:	4b0c      	ldr	r3, [pc, #48]	@ (8009324 <MX_USART4_UART_Init+0x58>)
 80092f2:	220c      	movs	r2, #12
 80092f4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80092f6:	4b0b      	ldr	r3, [pc, #44]	@ (8009324 <MX_USART4_UART_Init+0x58>)
 80092f8:	2200      	movs	r2, #0
 80092fa:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80092fc:	4b09      	ldr	r3, [pc, #36]	@ (8009324 <MX_USART4_UART_Init+0x58>)
 80092fe:	2200      	movs	r2, #0
 8009300:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8009302:	4b08      	ldr	r3, [pc, #32]	@ (8009324 <MX_USART4_UART_Init+0x58>)
 8009304:	2200      	movs	r2, #0
 8009306:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8009308:	4b06      	ldr	r3, [pc, #24]	@ (8009324 <MX_USART4_UART_Init+0x58>)
 800930a:	2200      	movs	r2, #0
 800930c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800930e:	4b05      	ldr	r3, [pc, #20]	@ (8009324 <MX_USART4_UART_Init+0x58>)
 8009310:	0018      	movs	r0, r3
 8009312:	f007 ff75 	bl	8011200 <HAL_UART_Init>
 8009316:	1e03      	subs	r3, r0, #0
 8009318:	d001      	beq.n	800931e <MX_USART4_UART_Init+0x52>
  {
    Error_Handler();
 800931a:	f7fc ffff 	bl	800631c <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 800931e:	46c0      	nop			@ (mov r8, r8)
 8009320:	46bd      	mov	sp, r7
 8009322:	bd80      	pop	{r7, pc}
 8009324:	200029bc 	.word	0x200029bc
 8009328:	40004c00 	.word	0x40004c00

0800932c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800932c:	b590      	push	{r4, r7, lr}
 800932e:	b08d      	sub	sp, #52	@ 0x34
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009334:	241c      	movs	r4, #28
 8009336:	193b      	adds	r3, r7, r4
 8009338:	0018      	movs	r0, r3
 800933a:	2314      	movs	r3, #20
 800933c:	001a      	movs	r2, r3
 800933e:	2100      	movs	r1, #0
 8009340:	f00e fd84 	bl	8017e4c <memset>
  if(uartHandle->Instance==LPUART1)
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	4a87      	ldr	r2, [pc, #540]	@ (8009568 <HAL_UART_MspInit+0x23c>)
 800934a:	4293      	cmp	r3, r2
 800934c:	d129      	bne.n	80093a2 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800934e:	4b87      	ldr	r3, [pc, #540]	@ (800956c <HAL_UART_MspInit+0x240>)
 8009350:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009352:	4b86      	ldr	r3, [pc, #536]	@ (800956c <HAL_UART_MspInit+0x240>)
 8009354:	2180      	movs	r1, #128	@ 0x80
 8009356:	02c9      	lsls	r1, r1, #11
 8009358:	430a      	orrs	r2, r1
 800935a:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800935c:	4b83      	ldr	r3, [pc, #524]	@ (800956c <HAL_UART_MspInit+0x240>)
 800935e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009360:	4b82      	ldr	r3, [pc, #520]	@ (800956c <HAL_UART_MspInit+0x240>)
 8009362:	2104      	movs	r1, #4
 8009364:	430a      	orrs	r2, r1
 8009366:	62da      	str	r2, [r3, #44]	@ 0x2c
 8009368:	4b80      	ldr	r3, [pc, #512]	@ (800956c <HAL_UART_MspInit+0x240>)
 800936a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800936c:	2204      	movs	r2, #4
 800936e:	4013      	ands	r3, r2
 8009370:	61bb      	str	r3, [r7, #24]
 8009372:	69bb      	ldr	r3, [r7, #24]
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8009374:	0021      	movs	r1, r4
 8009376:	187b      	adds	r3, r7, r1
 8009378:	2203      	movs	r2, #3
 800937a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800937c:	187b      	adds	r3, r7, r1
 800937e:	2202      	movs	r2, #2
 8009380:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009382:	187b      	adds	r3, r7, r1
 8009384:	2200      	movs	r2, #0
 8009386:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009388:	187b      	adds	r3, r7, r1
 800938a:	2203      	movs	r2, #3
 800938c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 800938e:	187b      	adds	r3, r7, r1
 8009390:	2206      	movs	r2, #6
 8009392:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009394:	187b      	adds	r3, r7, r1
 8009396:	4a76      	ldr	r2, [pc, #472]	@ (8009570 <HAL_UART_MspInit+0x244>)
 8009398:	0019      	movs	r1, r3
 800939a:	0010      	movs	r0, r2
 800939c:	f001 fe0a 	bl	800afb4 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }
}
 80093a0:	e0dd      	b.n	800955e <HAL_UART_MspInit+0x232>
  else if(uartHandle->Instance==USART1)
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	4a73      	ldr	r2, [pc, #460]	@ (8009574 <HAL_UART_MspInit+0x248>)
 80093a8:	4293      	cmp	r3, r2
 80093aa:	d12b      	bne.n	8009404 <HAL_UART_MspInit+0xd8>
    __HAL_RCC_USART1_CLK_ENABLE();
 80093ac:	4b6f      	ldr	r3, [pc, #444]	@ (800956c <HAL_UART_MspInit+0x240>)
 80093ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80093b0:	4b6e      	ldr	r3, [pc, #440]	@ (800956c <HAL_UART_MspInit+0x240>)
 80093b2:	2180      	movs	r1, #128	@ 0x80
 80093b4:	01c9      	lsls	r1, r1, #7
 80093b6:	430a      	orrs	r2, r1
 80093b8:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80093ba:	4b6c      	ldr	r3, [pc, #432]	@ (800956c <HAL_UART_MspInit+0x240>)
 80093bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80093be:	4b6b      	ldr	r3, [pc, #428]	@ (800956c <HAL_UART_MspInit+0x240>)
 80093c0:	2101      	movs	r1, #1
 80093c2:	430a      	orrs	r2, r1
 80093c4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80093c6:	4b69      	ldr	r3, [pc, #420]	@ (800956c <HAL_UART_MspInit+0x240>)
 80093c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093ca:	2201      	movs	r2, #1
 80093cc:	4013      	ands	r3, r2
 80093ce:	617b      	str	r3, [r7, #20]
 80093d0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80093d2:	211c      	movs	r1, #28
 80093d4:	187b      	adds	r3, r7, r1
 80093d6:	22c0      	movs	r2, #192	@ 0xc0
 80093d8:	00d2      	lsls	r2, r2, #3
 80093da:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80093dc:	187b      	adds	r3, r7, r1
 80093de:	2202      	movs	r2, #2
 80093e0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80093e2:	187b      	adds	r3, r7, r1
 80093e4:	2200      	movs	r2, #0
 80093e6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80093e8:	187b      	adds	r3, r7, r1
 80093ea:	2203      	movs	r2, #3
 80093ec:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80093ee:	187b      	adds	r3, r7, r1
 80093f0:	2204      	movs	r2, #4
 80093f2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80093f4:	187a      	adds	r2, r7, r1
 80093f6:	23a0      	movs	r3, #160	@ 0xa0
 80093f8:	05db      	lsls	r3, r3, #23
 80093fa:	0011      	movs	r1, r2
 80093fc:	0018      	movs	r0, r3
 80093fe:	f001 fdd9 	bl	800afb4 <HAL_GPIO_Init>
}
 8009402:	e0ac      	b.n	800955e <HAL_UART_MspInit+0x232>
  else if(uartHandle->Instance==USART4)
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	4a5b      	ldr	r2, [pc, #364]	@ (8009578 <HAL_UART_MspInit+0x24c>)
 800940a:	4293      	cmp	r3, r2
 800940c:	d000      	beq.n	8009410 <HAL_UART_MspInit+0xe4>
 800940e:	e0a6      	b.n	800955e <HAL_UART_MspInit+0x232>
    __HAL_RCC_USART4_CLK_ENABLE();
 8009410:	4b56      	ldr	r3, [pc, #344]	@ (800956c <HAL_UART_MspInit+0x240>)
 8009412:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009414:	4b55      	ldr	r3, [pc, #340]	@ (800956c <HAL_UART_MspInit+0x240>)
 8009416:	2180      	movs	r1, #128	@ 0x80
 8009418:	0309      	lsls	r1, r1, #12
 800941a:	430a      	orrs	r2, r1
 800941c:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800941e:	4b53      	ldr	r3, [pc, #332]	@ (800956c <HAL_UART_MspInit+0x240>)
 8009420:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009422:	4b52      	ldr	r3, [pc, #328]	@ (800956c <HAL_UART_MspInit+0x240>)
 8009424:	2101      	movs	r1, #1
 8009426:	430a      	orrs	r2, r1
 8009428:	62da      	str	r2, [r3, #44]	@ 0x2c
 800942a:	4b50      	ldr	r3, [pc, #320]	@ (800956c <HAL_UART_MspInit+0x240>)
 800942c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800942e:	2201      	movs	r2, #1
 8009430:	4013      	ands	r3, r2
 8009432:	613b      	str	r3, [r7, #16]
 8009434:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009436:	4b4d      	ldr	r3, [pc, #308]	@ (800956c <HAL_UART_MspInit+0x240>)
 8009438:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800943a:	4b4c      	ldr	r3, [pc, #304]	@ (800956c <HAL_UART_MspInit+0x240>)
 800943c:	2104      	movs	r1, #4
 800943e:	430a      	orrs	r2, r1
 8009440:	62da      	str	r2, [r3, #44]	@ 0x2c
 8009442:	4b4a      	ldr	r3, [pc, #296]	@ (800956c <HAL_UART_MspInit+0x240>)
 8009444:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009446:	2204      	movs	r2, #4
 8009448:	4013      	ands	r3, r2
 800944a:	60fb      	str	r3, [r7, #12]
 800944c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800944e:	241c      	movs	r4, #28
 8009450:	193b      	adds	r3, r7, r4
 8009452:	2202      	movs	r2, #2
 8009454:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009456:	193b      	adds	r3, r7, r4
 8009458:	2202      	movs	r2, #2
 800945a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800945c:	193b      	adds	r3, r7, r4
 800945e:	2200      	movs	r2, #0
 8009460:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009462:	193b      	adds	r3, r7, r4
 8009464:	2203      	movs	r2, #3
 8009466:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 8009468:	193b      	adds	r3, r7, r4
 800946a:	2206      	movs	r2, #6
 800946c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800946e:	193a      	adds	r2, r7, r4
 8009470:	23a0      	movs	r3, #160	@ 0xa0
 8009472:	05db      	lsls	r3, r3, #23
 8009474:	0011      	movs	r1, r2
 8009476:	0018      	movs	r0, r3
 8009478:	f001 fd9c 	bl	800afb4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800947c:	0021      	movs	r1, r4
 800947e:	187b      	adds	r3, r7, r1
 8009480:	2280      	movs	r2, #128	@ 0x80
 8009482:	00d2      	lsls	r2, r2, #3
 8009484:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009486:	187b      	adds	r3, r7, r1
 8009488:	2202      	movs	r2, #2
 800948a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800948c:	187b      	adds	r3, r7, r1
 800948e:	2200      	movs	r2, #0
 8009490:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009492:	187b      	adds	r3, r7, r1
 8009494:	2203      	movs	r2, #3
 8009496:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 8009498:	187b      	adds	r3, r7, r1
 800949a:	2206      	movs	r2, #6
 800949c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800949e:	187b      	adds	r3, r7, r1
 80094a0:	4a33      	ldr	r2, [pc, #204]	@ (8009570 <HAL_UART_MspInit+0x244>)
 80094a2:	0019      	movs	r1, r3
 80094a4:	0010      	movs	r0, r2
 80094a6:	f001 fd85 	bl	800afb4 <HAL_GPIO_Init>
    hdma_usart4_rx.Instance = DMA1_Channel6;
 80094aa:	4b34      	ldr	r3, [pc, #208]	@ (800957c <HAL_UART_MspInit+0x250>)
 80094ac:	4a34      	ldr	r2, [pc, #208]	@ (8009580 <HAL_UART_MspInit+0x254>)
 80094ae:	601a      	str	r2, [r3, #0]
    hdma_usart4_rx.Init.Request = DMA_REQUEST_12;
 80094b0:	4b32      	ldr	r3, [pc, #200]	@ (800957c <HAL_UART_MspInit+0x250>)
 80094b2:	220c      	movs	r2, #12
 80094b4:	605a      	str	r2, [r3, #4]
    hdma_usart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80094b6:	4b31      	ldr	r3, [pc, #196]	@ (800957c <HAL_UART_MspInit+0x250>)
 80094b8:	2200      	movs	r2, #0
 80094ba:	609a      	str	r2, [r3, #8]
    hdma_usart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80094bc:	4b2f      	ldr	r3, [pc, #188]	@ (800957c <HAL_UART_MspInit+0x250>)
 80094be:	2200      	movs	r2, #0
 80094c0:	60da      	str	r2, [r3, #12]
    hdma_usart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80094c2:	4b2e      	ldr	r3, [pc, #184]	@ (800957c <HAL_UART_MspInit+0x250>)
 80094c4:	2280      	movs	r2, #128	@ 0x80
 80094c6:	611a      	str	r2, [r3, #16]
    hdma_usart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80094c8:	4b2c      	ldr	r3, [pc, #176]	@ (800957c <HAL_UART_MspInit+0x250>)
 80094ca:	2200      	movs	r2, #0
 80094cc:	615a      	str	r2, [r3, #20]
    hdma_usart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80094ce:	4b2b      	ldr	r3, [pc, #172]	@ (800957c <HAL_UART_MspInit+0x250>)
 80094d0:	2200      	movs	r2, #0
 80094d2:	619a      	str	r2, [r3, #24]
    hdma_usart4_rx.Init.Mode = DMA_CIRCULAR;
 80094d4:	4b29      	ldr	r3, [pc, #164]	@ (800957c <HAL_UART_MspInit+0x250>)
 80094d6:	2220      	movs	r2, #32
 80094d8:	61da      	str	r2, [r3, #28]
    hdma_usart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80094da:	4b28      	ldr	r3, [pc, #160]	@ (800957c <HAL_UART_MspInit+0x250>)
 80094dc:	2200      	movs	r2, #0
 80094de:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_rx) != HAL_OK)
 80094e0:	4b26      	ldr	r3, [pc, #152]	@ (800957c <HAL_UART_MspInit+0x250>)
 80094e2:	0018      	movs	r0, r3
 80094e4:	f001 f8ec 	bl	800a6c0 <HAL_DMA_Init>
 80094e8:	1e03      	subs	r3, r0, #0
 80094ea:	d001      	beq.n	80094f0 <HAL_UART_MspInit+0x1c4>
      Error_Handler();
 80094ec:	f7fc ff16 	bl	800631c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart4_rx);
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	4a22      	ldr	r2, [pc, #136]	@ (800957c <HAL_UART_MspInit+0x250>)
 80094f4:	675a      	str	r2, [r3, #116]	@ 0x74
 80094f6:	4b21      	ldr	r3, [pc, #132]	@ (800957c <HAL_UART_MspInit+0x250>)
 80094f8:	687a      	ldr	r2, [r7, #4]
 80094fa:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_usart4_tx.Instance = DMA1_Channel7;
 80094fc:	4b21      	ldr	r3, [pc, #132]	@ (8009584 <HAL_UART_MspInit+0x258>)
 80094fe:	4a22      	ldr	r2, [pc, #136]	@ (8009588 <HAL_UART_MspInit+0x25c>)
 8009500:	601a      	str	r2, [r3, #0]
    hdma_usart4_tx.Init.Request = DMA_REQUEST_12;
 8009502:	4b20      	ldr	r3, [pc, #128]	@ (8009584 <HAL_UART_MspInit+0x258>)
 8009504:	220c      	movs	r2, #12
 8009506:	605a      	str	r2, [r3, #4]
    hdma_usart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009508:	4b1e      	ldr	r3, [pc, #120]	@ (8009584 <HAL_UART_MspInit+0x258>)
 800950a:	2210      	movs	r2, #16
 800950c:	609a      	str	r2, [r3, #8]
    hdma_usart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800950e:	4b1d      	ldr	r3, [pc, #116]	@ (8009584 <HAL_UART_MspInit+0x258>)
 8009510:	2200      	movs	r2, #0
 8009512:	60da      	str	r2, [r3, #12]
    hdma_usart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8009514:	4b1b      	ldr	r3, [pc, #108]	@ (8009584 <HAL_UART_MspInit+0x258>)
 8009516:	2280      	movs	r2, #128	@ 0x80
 8009518:	611a      	str	r2, [r3, #16]
    hdma_usart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800951a:	4b1a      	ldr	r3, [pc, #104]	@ (8009584 <HAL_UART_MspInit+0x258>)
 800951c:	2200      	movs	r2, #0
 800951e:	615a      	str	r2, [r3, #20]
    hdma_usart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009520:	4b18      	ldr	r3, [pc, #96]	@ (8009584 <HAL_UART_MspInit+0x258>)
 8009522:	2200      	movs	r2, #0
 8009524:	619a      	str	r2, [r3, #24]
    hdma_usart4_tx.Init.Mode = DMA_NORMAL;
 8009526:	4b17      	ldr	r3, [pc, #92]	@ (8009584 <HAL_UART_MspInit+0x258>)
 8009528:	2200      	movs	r2, #0
 800952a:	61da      	str	r2, [r3, #28]
    hdma_usart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 800952c:	4b15      	ldr	r3, [pc, #84]	@ (8009584 <HAL_UART_MspInit+0x258>)
 800952e:	2200      	movs	r2, #0
 8009530:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_tx) != HAL_OK)
 8009532:	4b14      	ldr	r3, [pc, #80]	@ (8009584 <HAL_UART_MspInit+0x258>)
 8009534:	0018      	movs	r0, r3
 8009536:	f001 f8c3 	bl	800a6c0 <HAL_DMA_Init>
 800953a:	1e03      	subs	r3, r0, #0
 800953c:	d001      	beq.n	8009542 <HAL_UART_MspInit+0x216>
      Error_Handler();
 800953e:	f7fc feed 	bl	800631c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart4_tx);
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	4a0f      	ldr	r2, [pc, #60]	@ (8009584 <HAL_UART_MspInit+0x258>)
 8009546:	671a      	str	r2, [r3, #112]	@ 0x70
 8009548:	4b0e      	ldr	r3, [pc, #56]	@ (8009584 <HAL_UART_MspInit+0x258>)
 800954a:	687a      	ldr	r2, [r7, #4]
 800954c:	629a      	str	r2, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART4_5_IRQn, 0, 0);
 800954e:	2200      	movs	r2, #0
 8009550:	2100      	movs	r1, #0
 8009552:	200e      	movs	r0, #14
 8009554:	f001 f882 	bl	800a65c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
 8009558:	200e      	movs	r0, #14
 800955a:	f001 f894 	bl	800a686 <HAL_NVIC_EnableIRQ>
}
 800955e:	46c0      	nop			@ (mov r8, r8)
 8009560:	46bd      	mov	sp, r7
 8009562:	b00d      	add	sp, #52	@ 0x34
 8009564:	bd90      	pop	{r4, r7, pc}
 8009566:	46c0      	nop			@ (mov r8, r8)
 8009568:	40004800 	.word	0x40004800
 800956c:	40021000 	.word	0x40021000
 8009570:	50000800 	.word	0x50000800
 8009574:	40013800 	.word	0x40013800
 8009578:	40004c00 	.word	0x40004c00
 800957c:	20002a74 	.word	0x20002a74
 8009580:	4002006c 	.word	0x4002006c
 8009584:	20002abc 	.word	0x20002abc
 8009588:	40020080 	.word	0x40020080

0800958c <TimestampIsReached>:
VerboseLevel CurrentVerboseLevel = VERBOSE_ALL;
#define TEXTBUFFER_LEN 1024

extern UART_HandleTypeDef huart1;

bool TimestampIsReached(uint32_t timestamp) {
 800958c:	b580      	push	{r7, lr}
 800958e:	b086      	sub	sp, #24
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
  uint32_t now = HAL_GetTick();
 8009594:	f000 fbec 	bl	8009d70 <HAL_GetTick>
 8009598:	0003      	movs	r3, r0
 800959a:	617b      	str	r3, [r7, #20]
  const uint32_t HALF_TIME = 0x7FFFFFFF; // ~25 days max timestamp delay
 800959c:	4b1c      	ldr	r3, [pc, #112]	@ (8009610 <TimestampIsReached+0x84>)
 800959e:	613b      	str	r3, [r7, #16]

  // Ensures that the difference between now and timestamp is less than half of
  // the maximum value of the counter. This confirms that the timestamp is not
  // too far in the past.
  bool noOverflow = (now >= timestamp && now - timestamp < HALF_TIME);
 80095a0:	697a      	ldr	r2, [r7, #20]
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	429a      	cmp	r2, r3
 80095a6:	d307      	bcc.n	80095b8 <TimestampIsReached+0x2c>
 80095a8:	697a      	ldr	r2, [r7, #20]
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	1ad3      	subs	r3, r2, r3
 80095ae:	693a      	ldr	r2, [r7, #16]
 80095b0:	429a      	cmp	r2, r3
 80095b2:	d901      	bls.n	80095b8 <TimestampIsReached+0x2c>
 80095b4:	2201      	movs	r2, #1
 80095b6:	e000      	b.n	80095ba <TimestampIsReached+0x2e>
 80095b8:	2200      	movs	r2, #0
 80095ba:	230f      	movs	r3, #15
 80095bc:	18fb      	adds	r3, r7, r3
 80095be:	701a      	strb	r2, [r3, #0]
 80095c0:	781a      	ldrb	r2, [r3, #0]
 80095c2:	2101      	movs	r1, #1
 80095c4:	400a      	ands	r2, r1
 80095c6:	701a      	strb	r2, [r3, #0]
  // Ensures that the timestamp is so far ahead that it would have wrapped
  // around past the maximum value of the counter indicating an overflow
  // scenario.
  bool overflowWithTimestampAhead =
      (now < timestamp && timestamp - now > HALF_TIME);
 80095c8:	697a      	ldr	r2, [r7, #20]
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	429a      	cmp	r2, r3
 80095ce:	d207      	bcs.n	80095e0 <TimestampIsReached+0x54>
 80095d0:	687a      	ldr	r2, [r7, #4]
 80095d2:	697b      	ldr	r3, [r7, #20]
 80095d4:	1ad3      	subs	r3, r2, r3
 80095d6:	693a      	ldr	r2, [r7, #16]
 80095d8:	429a      	cmp	r2, r3
 80095da:	d201      	bcs.n	80095e0 <TimestampIsReached+0x54>
 80095dc:	2201      	movs	r2, #1
 80095de:	e000      	b.n	80095e2 <TimestampIsReached+0x56>
 80095e0:	2200      	movs	r2, #0
  bool overflowWithTimestampAhead =
 80095e2:	200e      	movs	r0, #14
 80095e4:	183b      	adds	r3, r7, r0
 80095e6:	701a      	strb	r2, [r3, #0]
 80095e8:	781a      	ldrb	r2, [r3, #0]
 80095ea:	2101      	movs	r1, #1
 80095ec:	400a      	ands	r2, r1
 80095ee:	701a      	strb	r2, [r3, #0]

  if (noOverflow || overflowWithTimestampAhead) {
 80095f0:	230f      	movs	r3, #15
 80095f2:	18fb      	adds	r3, r7, r3
 80095f4:	781b      	ldrb	r3, [r3, #0]
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d103      	bne.n	8009602 <TimestampIsReached+0x76>
 80095fa:	183b      	adds	r3, r7, r0
 80095fc:	781b      	ldrb	r3, [r3, #0]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d001      	beq.n	8009606 <TimestampIsReached+0x7a>
    // Timestamp has been reached
    return true;
 8009602:	2301      	movs	r3, #1
 8009604:	e000      	b.n	8009608 <TimestampIsReached+0x7c>
  }

  // Timestamp not yet reached
  return false;
 8009606:	2300      	movs	r3, #0
}
 8009608:	0018      	movs	r0, r3
 800960a:	46bd      	mov	sp, r7
 800960c:	b006      	add	sp, #24
 800960e:	bd80      	pop	{r7, pc}
 8009610:	7fffffff 	.word	0x7fffffff

08009614 <AddTimestamp>:

static void AddTimestamp(char *stamp) {
 8009614:	b580      	push	{r7, lr}
 8009616:	b082      	sub	sp, #8
 8009618:	af00      	add	r7, sp, #0
 800961a:	6078      	str	r0, [r7, #4]
  sprintf(stamp, "[%08lu] ", (uint32_t)HAL_GetTick());
 800961c:	f000 fba8 	bl	8009d70 <HAL_GetTick>
 8009620:	0002      	movs	r2, r0
 8009622:	4904      	ldr	r1, [pc, #16]	@ (8009634 <AddTimestamp+0x20>)
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	0018      	movs	r0, r3
 8009628:	f00e fb6c 	bl	8017d04 <siprintf>
}
 800962c:	46c0      	nop			@ (mov r8, r8)
 800962e:	46bd      	mov	sp, r7
 8009630:	b002      	add	sp, #8
 8009632:	bd80      	pop	{r7, pc}
 8009634:	0801b590 	.word	0x0801b590

08009638 <CreateLine>:

void CreateLine(VerboseLevel verboseLevel, char *tag, char *format, ...) {
 8009638:	b40c      	push	{r2, r3}
 800963a:	b5b0      	push	{r4, r5, r7, lr}
 800963c:	4c2b      	ldr	r4, [pc, #172]	@ (80096ec <CreateLine+0xb4>)
 800963e:	44a5      	add	sp, r4
 8009640:	af00      	add	r7, sp, #0
 8009642:	0002      	movs	r2, r0
 8009644:	6039      	str	r1, [r7, #0]
 8009646:	4b2a      	ldr	r3, [pc, #168]	@ (80096f0 <CreateLine+0xb8>)
 8009648:	2182      	movs	r1, #130	@ 0x82
 800964a:	00c9      	lsls	r1, r1, #3
 800964c:	185b      	adds	r3, r3, r1
 800964e:	19db      	adds	r3, r3, r7
 8009650:	701a      	strb	r2, [r3, #0]

  if (verboseLevel > CurrentVerboseLevel) {
 8009652:	4b28      	ldr	r3, [pc, #160]	@ (80096f4 <CreateLine+0xbc>)
 8009654:	781b      	ldrb	r3, [r3, #0]
 8009656:	4a26      	ldr	r2, [pc, #152]	@ (80096f0 <CreateLine+0xb8>)
 8009658:	1852      	adds	r2, r2, r1
 800965a:	19d2      	adds	r2, r2, r7
 800965c:	7812      	ldrb	r2, [r2, #0]
 800965e:	429a      	cmp	r2, r3
 8009660:	d83b      	bhi.n	80096da <CreateLine+0xa2>
    return;
  }
  char textBuffer[TEXTBUFFER_LEN];

  // Format the initial part of the message with the tag and timestamp
  sprintf(textBuffer, "%s ", tag);
 8009662:	683a      	ldr	r2, [r7, #0]
 8009664:	4924      	ldr	r1, [pc, #144]	@ (80096f8 <CreateLine+0xc0>)
 8009666:	240c      	movs	r4, #12
 8009668:	193b      	adds	r3, r7, r4
 800966a:	0018      	movs	r0, r3
 800966c:	f00e fb4a 	bl	8017d04 <siprintf>

  if (CurrentVerboseLevel > VERBOSE_MINIMAL) {
 8009670:	4b20      	ldr	r3, [pc, #128]	@ (80096f4 <CreateLine+0xbc>)
 8009672:	781b      	ldrb	r3, [r3, #0]
 8009674:	2b01      	cmp	r3, #1
 8009676:	d909      	bls.n	800968c <CreateLine+0x54>
    AddTimestamp(&textBuffer[strlen(textBuffer)]);
 8009678:	193b      	adds	r3, r7, r4
 800967a:	0018      	movs	r0, r3
 800967c:	f7f6 fd44 	bl	8000108 <strlen>
 8009680:	0002      	movs	r2, r0
 8009682:	193b      	adds	r3, r7, r4
 8009684:	189b      	adds	r3, r3, r2
 8009686:	0018      	movs	r0, r3
 8009688:	f7ff ffc4 	bl	8009614 <AddTimestamp>
  }
  int lineOffset = strlen(textBuffer);
 800968c:	240c      	movs	r4, #12
 800968e:	193b      	adds	r3, r7, r4
 8009690:	0018      	movs	r0, r3
 8009692:	f7f6 fd39 	bl	8000108 <strlen>
 8009696:	0003      	movs	r3, r0
 8009698:	4918      	ldr	r1, [pc, #96]	@ (80096fc <CreateLine+0xc4>)
 800969a:	187a      	adds	r2, r7, r1
 800969c:	6013      	str	r3, [r2, #0]

  // Format the rest of the message with the variable arguments
  va_list args;
  va_start(args, format);
 800969e:	4b18      	ldr	r3, [pc, #96]	@ (8009700 <CreateLine+0xc8>)
 80096a0:	2508      	movs	r5, #8
 80096a2:	195b      	adds	r3, r3, r5
 80096a4:	19db      	adds	r3, r3, r7
 80096a6:	60bb      	str	r3, [r7, #8]
  vsnprintf(&textBuffer[lineOffset], TEXTBUFFER_LEN - lineOffset, format, args);
 80096a8:	193a      	adds	r2, r7, r4
 80096aa:	187b      	adds	r3, r7, r1
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	18d0      	adds	r0, r2, r3
 80096b0:	187b      	adds	r3, r7, r1
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	2280      	movs	r2, #128	@ 0x80
 80096b6:	00d2      	lsls	r2, r2, #3
 80096b8:	1ad3      	subs	r3, r2, r3
 80096ba:	0019      	movs	r1, r3
 80096bc:	68bb      	ldr	r3, [r7, #8]
 80096be:	2283      	movs	r2, #131	@ 0x83
 80096c0:	00d2      	lsls	r2, r2, #3
 80096c2:	1952      	adds	r2, r2, r5
 80096c4:	19d2      	adds	r2, r2, r7
 80096c6:	6812      	ldr	r2, [r2, #0]
 80096c8:	f00e fbb4 	bl	8017e34 <vsniprintf>
  va_end(args);

  // Print the final formatted message
  printf("%s\r\n", textBuffer);
 80096cc:	193a      	adds	r2, r7, r4
 80096ce:	4b0d      	ldr	r3, [pc, #52]	@ (8009704 <CreateLine+0xcc>)
 80096d0:	0011      	movs	r1, r2
 80096d2:	0018      	movs	r0, r3
 80096d4:	f00e fb06 	bl	8017ce4 <iprintf>
 80096d8:	e000      	b.n	80096dc <CreateLine+0xa4>
    return;
 80096da:	46c0      	nop			@ (mov r8, r8)
}
 80096dc:	46bd      	mov	sp, r7
 80096de:	2382      	movs	r3, #130	@ 0x82
 80096e0:	00db      	lsls	r3, r3, #3
 80096e2:	449d      	add	sp, r3
 80096e4:	bcb0      	pop	{r4, r5, r7}
 80096e6:	bc08      	pop	{r3}
 80096e8:	b002      	add	sp, #8
 80096ea:	4718      	bx	r3
 80096ec:	fffffbf0 	.word	0xfffffbf0
 80096f0:	fffffbf7 	.word	0xfffffbf7
 80096f4:	200000a8 	.word	0x200000a8
 80096f8:	0801b59c 	.word	0x0801b59c
 80096fc:	0000040c 	.word	0x0000040c
 8009700:	0000041c 	.word	0x0000041c
 8009704:	0801b5a0 	.word	0x0801b5a0

08009708 <_write>:

int _write(int fd, const void *buf, size_t count) {
 8009708:	b580      	push	{r7, lr}
 800970a:	b084      	sub	sp, #16
 800970c:	af00      	add	r7, sp, #0
 800970e:	60f8      	str	r0, [r7, #12]
 8009710:	60b9      	str	r1, [r7, #8]
 8009712:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart1, buf, count, 100);
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	b29a      	uxth	r2, r3
 8009718:	68b9      	ldr	r1, [r7, #8]
 800971a:	4804      	ldr	r0, [pc, #16]	@ (800972c <_write+0x24>)
 800971c:	2364      	movs	r3, #100	@ 0x64
 800971e:	f007 fdd5 	bl	80112cc <HAL_UART_Transmit>
  return count;
 8009722:	687b      	ldr	r3, [r7, #4]
}
 8009724:	0018      	movs	r0, r3
 8009726:	46bd      	mov	sp, r7
 8009728:	b004      	add	sp, #16
 800972a:	bd80      	pop	{r7, pc}
 800972c:	20002904 	.word	0x20002904

08009730 <SetVerboseLevel>:

void SetVerboseLevel(VerboseLevel level) { CurrentVerboseLevel = level; }
 8009730:	b580      	push	{r7, lr}
 8009732:	b082      	sub	sp, #8
 8009734:	af00      	add	r7, sp, #0
 8009736:	0002      	movs	r2, r0
 8009738:	1dfb      	adds	r3, r7, #7
 800973a:	701a      	strb	r2, [r3, #0]
 800973c:	4b03      	ldr	r3, [pc, #12]	@ (800974c <SetVerboseLevel+0x1c>)
 800973e:	1dfa      	adds	r2, r7, #7
 8009740:	7812      	ldrb	r2, [r2, #0]
 8009742:	701a      	strb	r2, [r3, #0]
 8009744:	46c0      	nop			@ (mov r8, r8)
 8009746:	46bd      	mov	sp, r7
 8009748:	b002      	add	sp, #8
 800974a:	bd80      	pop	{r7, pc}
 800974c:	200000a8 	.word	0x200000a8

08009750 <GetCurrentHalTicks>:

uint32_t GetCurrentHalTicks(void) {
 8009750:	b580      	push	{r7, lr}
 8009752:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8009754:	f000 fb0c 	bl	8009d70 <HAL_GetTick>
 8009758:	0003      	movs	r3, r0
}
 800975a:	0018      	movs	r0, r3
 800975c:	46bd      	mov	sp, r7
 800975e:	bd80      	pop	{r7, pc}

08009760 <BinaryReleaseInfo>:

void BinaryReleaseInfo() {
 8009760:	b580      	push	{r7, lr}
 8009762:	b082      	sub	sp, #8
 8009764:	af02      	add	r7, sp, #8
  Info("=-=-=-=-=-=WOTS Gadget started.=-=-=-=-=-=");
 8009766:	4a0f      	ldr	r2, [pc, #60]	@ (80097a4 <BinaryReleaseInfo+0x44>)
 8009768:	4b0f      	ldr	r3, [pc, #60]	@ (80097a8 <BinaryReleaseInfo+0x48>)
 800976a:	0019      	movs	r1, r3
 800976c:	2002      	movs	r0, #2
 800976e:	f7ff ff63 	bl	8009638 <CreateLine>
  Info("Build on: %s at %s", __DATE__, __TIME__);
 8009772:	480e      	ldr	r0, [pc, #56]	@ (80097ac <BinaryReleaseInfo+0x4c>)
 8009774:	4a0e      	ldr	r2, [pc, #56]	@ (80097b0 <BinaryReleaseInfo+0x50>)
 8009776:	490c      	ldr	r1, [pc, #48]	@ (80097a8 <BinaryReleaseInfo+0x48>)
 8009778:	4b0e      	ldr	r3, [pc, #56]	@ (80097b4 <BinaryReleaseInfo+0x54>)
 800977a:	9300      	str	r3, [sp, #0]
 800977c:	0003      	movs	r3, r0
 800977e:	2002      	movs	r0, #2
 8009780:	f7ff ff5a 	bl	8009638 <CreateLine>
  // Format: YY'w'WWv
  Info("Git: 24w33a");
 8009784:	4a0c      	ldr	r2, [pc, #48]	@ (80097b8 <BinaryReleaseInfo+0x58>)
 8009786:	4b08      	ldr	r3, [pc, #32]	@ (80097a8 <BinaryReleaseInfo+0x48>)
 8009788:	0019      	movs	r1, r3
 800978a:	2002      	movs	r0, #2
 800978c:	f7ff ff54 	bl	8009638 <CreateLine>
  Info("Software version: %s", SRC_VERSION);
 8009790:	4b0a      	ldr	r3, [pc, #40]	@ (80097bc <BinaryReleaseInfo+0x5c>)
 8009792:	4a0b      	ldr	r2, [pc, #44]	@ (80097c0 <BinaryReleaseInfo+0x60>)
 8009794:	4904      	ldr	r1, [pc, #16]	@ (80097a8 <BinaryReleaseInfo+0x48>)
 8009796:	2002      	movs	r0, #2
 8009798:	f7ff ff4e 	bl	8009638 <CreateLine>
}
 800979c:	46c0      	nop			@ (mov r8, r8)
 800979e:	46bd      	mov	sp, r7
 80097a0:	bd80      	pop	{r7, pc}
 80097a2:	46c0      	nop			@ (mov r8, r8)
 80097a4:	0801b5a8 	.word	0x0801b5a8
 80097a8:	0801b5d4 	.word	0x0801b5d4
 80097ac:	0801b5d8 	.word	0x0801b5d8
 80097b0:	0801b5e4 	.word	0x0801b5e4
 80097b4:	0801b5f8 	.word	0x0801b5f8
 80097b8:	0801b604 	.word	0x0801b604
 80097bc:	0801b610 	.word	0x0801b610
 80097c0:	0801b618 	.word	0x0801b618

080097c4 <ReadRegister>:
static bool MeasurementDone = false;

//static uint32_t SensorNextRunTime = HIDS_SENSOR_WAIT_TIME_HIGH;
//static uint32_t SensorWaitTime_ms = HIDS_SENSOR_WAIT_TIME_HIGH;

static void ReadRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 80097c4:	b590      	push	{r4, r7, lr}
 80097c6:	b083      	sub	sp, #12
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	6039      	str	r1, [r7, #0]
 80097cc:	0011      	movs	r1, r2
 80097ce:	1dfb      	adds	r3, r7, #7
 80097d0:	1c02      	adds	r2, r0, #0
 80097d2:	701a      	strb	r2, [r3, #0]
 80097d4:	1dbb      	adds	r3, r7, #6
 80097d6:	1c0a      	adds	r2, r1, #0
 80097d8:	701a      	strb	r2, [r3, #0]
	if (ReadFunction != NULL) {
 80097da:	4b08      	ldr	r3, [pc, #32]	@ (80097fc <ReadRegister+0x38>)
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d008      	beq.n	80097f4 <ReadRegister+0x30>
		ReadFunction(address, buffer, nrBytes);
 80097e2:	4b06      	ldr	r3, [pc, #24]	@ (80097fc <ReadRegister+0x38>)
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	1dba      	adds	r2, r7, #6
 80097e8:	7814      	ldrb	r4, [r2, #0]
 80097ea:	6839      	ldr	r1, [r7, #0]
 80097ec:	1dfa      	adds	r2, r7, #7
 80097ee:	7810      	ldrb	r0, [r2, #0]
 80097f0:	0022      	movs	r2, r4
 80097f2:	4798      	blx	r3
	}
}
 80097f4:	46c0      	nop			@ (mov r8, r8)
 80097f6:	46bd      	mov	sp, r7
 80097f8:	b003      	add	sp, #12
 80097fa:	bd90      	pop	{r4, r7, pc}
 80097fc:	20002b04 	.word	0x20002b04

08009800 <WriteRegister>:

static void WriteRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8009800:	b590      	push	{r4, r7, lr}
 8009802:	b083      	sub	sp, #12
 8009804:	af00      	add	r7, sp, #0
 8009806:	6039      	str	r1, [r7, #0]
 8009808:	0011      	movs	r1, r2
 800980a:	1dfb      	adds	r3, r7, #7
 800980c:	1c02      	adds	r2, r0, #0
 800980e:	701a      	strb	r2, [r3, #0]
 8009810:	1dbb      	adds	r3, r7, #6
 8009812:	1c0a      	adds	r2, r1, #0
 8009814:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 8009816:	4b08      	ldr	r3, [pc, #32]	@ (8009838 <WriteRegister+0x38>)
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	2b00      	cmp	r3, #0
 800981c:	d008      	beq.n	8009830 <WriteRegister+0x30>
    WriteFunction(address, buffer, nrBytes);
 800981e:	4b06      	ldr	r3, [pc, #24]	@ (8009838 <WriteRegister+0x38>)
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	1dba      	adds	r2, r7, #6
 8009824:	7814      	ldrb	r4, [r2, #0]
 8009826:	6839      	ldr	r1, [r7, #0]
 8009828:	1dfa      	adds	r2, r7, #7
 800982a:	7810      	ldrb	r0, [r2, #0]
 800982c:	0022      	movs	r2, r4
 800982e:	4798      	blx	r3
  }
}
 8009830:	46c0      	nop			@ (mov r8, r8)
 8009832:	46bd      	mov	sp, r7
 8009834:	b003      	add	sp, #12
 8009836:	bd90      	pop	{r4, r7, pc}
 8009838:	20002b08 	.word	0x20002b08

0800983c <CalculateCRC>:

static uint8_t CalculateCRC(uint8_t* data, uint8_t length) {
 800983c:	b580      	push	{r7, lr}
 800983e:	b084      	sub	sp, #16
 8009840:	af00      	add	r7, sp, #0
 8009842:	6078      	str	r0, [r7, #4]
 8009844:	000a      	movs	r2, r1
 8009846:	1cfb      	adds	r3, r7, #3
 8009848:	701a      	strb	r2, [r3, #0]
  uint8_t crc = HIDS_CRC_INIT_VALUE;
 800984a:	230f      	movs	r3, #15
 800984c:	18fb      	adds	r3, r7, r3
 800984e:	22ff      	movs	r2, #255	@ 0xff
 8009850:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 8009852:	230e      	movs	r3, #14
 8009854:	18fb      	adds	r3, r7, r3
 8009856:	2200      	movs	r2, #0
 8009858:	701a      	strb	r2, [r3, #0]
 800985a:	e037      	b.n	80098cc <CalculateCRC+0x90>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 800985c:	230e      	movs	r3, #14
 800985e:	18fb      	adds	r3, r7, r3
 8009860:	781b      	ldrb	r3, [r3, #0]
 8009862:	687a      	ldr	r2, [r7, #4]
 8009864:	18d3      	adds	r3, r2, r3
 8009866:	7819      	ldrb	r1, [r3, #0]
 8009868:	220f      	movs	r2, #15
 800986a:	18bb      	adds	r3, r7, r2
 800986c:	18ba      	adds	r2, r7, r2
 800986e:	7812      	ldrb	r2, [r2, #0]
 8009870:	404a      	eors	r2, r1
 8009872:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 8009874:	230d      	movs	r3, #13
 8009876:	18fb      	adds	r3, r7, r3
 8009878:	2200      	movs	r2, #0
 800987a:	701a      	strb	r2, [r3, #0]
 800987c:	e01b      	b.n	80098b6 <CalculateCRC+0x7a>
      // If the leftmost (most significant) bit is set
      if (crc & HIDS_CRC_MSB_MASK) {
 800987e:	210f      	movs	r1, #15
 8009880:	187b      	adds	r3, r7, r1
 8009882:	781b      	ldrb	r3, [r3, #0]
 8009884:	b25b      	sxtb	r3, r3
 8009886:	2b00      	cmp	r3, #0
 8009888:	da09      	bge.n	800989e <CalculateCRC+0x62>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ HIDS_CRC_POLYNOMIAL;
 800988a:	187b      	adds	r3, r7, r1
 800988c:	781b      	ldrb	r3, [r3, #0]
 800988e:	005b      	lsls	r3, r3, #1
 8009890:	b25b      	sxtb	r3, r3
 8009892:	2231      	movs	r2, #49	@ 0x31
 8009894:	4053      	eors	r3, r2
 8009896:	b25a      	sxtb	r2, r3
 8009898:	187b      	adds	r3, r7, r1
 800989a:	701a      	strb	r2, [r3, #0]
 800989c:	e005      	b.n	80098aa <CalculateCRC+0x6e>
      } else {
          crc <<= 1;
 800989e:	230f      	movs	r3, #15
 80098a0:	18fa      	adds	r2, r7, r3
 80098a2:	18fb      	adds	r3, r7, r3
 80098a4:	781b      	ldrb	r3, [r3, #0]
 80098a6:	18db      	adds	r3, r3, r3
 80098a8:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 80098aa:	210d      	movs	r1, #13
 80098ac:	187b      	adds	r3, r7, r1
 80098ae:	781a      	ldrb	r2, [r3, #0]
 80098b0:	187b      	adds	r3, r7, r1
 80098b2:	3201      	adds	r2, #1
 80098b4:	701a      	strb	r2, [r3, #0]
 80098b6:	230d      	movs	r3, #13
 80098b8:	18fb      	adds	r3, r7, r3
 80098ba:	781b      	ldrb	r3, [r3, #0]
 80098bc:	2b07      	cmp	r3, #7
 80098be:	d9de      	bls.n	800987e <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 80098c0:	210e      	movs	r1, #14
 80098c2:	187b      	adds	r3, r7, r1
 80098c4:	781a      	ldrb	r2, [r3, #0]
 80098c6:	187b      	adds	r3, r7, r1
 80098c8:	3201      	adds	r2, #1
 80098ca:	701a      	strb	r2, [r3, #0]
 80098cc:	230e      	movs	r3, #14
 80098ce:	18fa      	adds	r2, r7, r3
 80098d0:	1cfb      	adds	r3, r7, #3
 80098d2:	7812      	ldrb	r2, [r2, #0]
 80098d4:	781b      	ldrb	r3, [r3, #0]
 80098d6:	429a      	cmp	r2, r3
 80098d8:	d3c0      	bcc.n	800985c <CalculateCRC+0x20>
      }
    }
  }

//  Debug("CRC calculated value: 0x%X", crc);
  return crc;
 80098da:	230f      	movs	r3, #15
 80098dc:	18fb      	adds	r3, r7, r3
 80098de:	781b      	ldrb	r3, [r3, #0]
}
 80098e0:	0018      	movs	r0, r3
 80098e2:	46bd      	mov	sp, r7
 80098e4:	b004      	add	sp, #16
 80098e6:	bd80      	pop	{r7, pc}

080098e8 <HIDS_Init>:
  uint8_t heaterReg = HeaterMode;
  WriteRegister(HIDS_I2C_ADDRESS, &heaterReg, 1);
  Info("Started the heater in mode: %d", heaterReg);
}

void HIDS_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 80098e8:	b580      	push	{r7, lr}
 80098ea:	b082      	sub	sp, #8
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	6078      	str	r0, [r7, #4]
 80098f0:	6039      	str	r1, [r7, #0]
	ReadFunction = readFunction;
 80098f2:	4b0a      	ldr	r3, [pc, #40]	@ (800991c <HIDS_Init+0x34>)
 80098f4:	687a      	ldr	r2, [r7, #4]
 80098f6:	601a      	str	r2, [r3, #0]
	WriteFunction = writeFunction;
 80098f8:	4b09      	ldr	r3, [pc, #36]	@ (8009920 <HIDS_Init+0x38>)
 80098fa:	683a      	ldr	r2, [r7, #0]
 80098fc:	601a      	str	r2, [r3, #0]
	HIDS_SetMeasurementMode(MeasureMode);
 80098fe:	4b09      	ldr	r3, [pc, #36]	@ (8009924 <HIDS_Init+0x3c>)
 8009900:	781b      	ldrb	r3, [r3, #0]
 8009902:	0018      	movs	r0, r3
 8009904:	f000 f8d0 	bl	8009aa8 <HIDS_SetMeasurementMode>
	HIDS_SetHeaterMode(HeaterMode);
 8009908:	4b07      	ldr	r3, [pc, #28]	@ (8009928 <HIDS_Init+0x40>)
 800990a:	781b      	ldrb	r3, [r3, #0]
 800990c:	0018      	movs	r0, r3
 800990e:	f000 f82b 	bl	8009968 <HIDS_SetHeaterMode>
//	HIDS_EnableHeater();
	// TODO: Enable heater after measurement is done and humidity is above a certain percentage, use formula.
}
 8009912:	46c0      	nop			@ (mov r8, r8)
 8009914:	46bd      	mov	sp, r7
 8009916:	b002      	add	sp, #8
 8009918:	bd80      	pop	{r7, pc}
 800991a:	46c0      	nop			@ (mov r8, r8)
 800991c:	20002b04 	.word	0x20002b04
 8009920:	20002b08 	.word	0x20002b08
 8009924:	200000aa 	.word	0x200000aa
 8009928:	200000a9 	.word	0x200000a9

0800992c <HIDS_StartMeasurement>:

void HIDS_StartMeasurement(void) {
 800992c:	b580      	push	{r7, lr}
 800992e:	af00      	add	r7, sp, #0
  HIDS_NextRunTime = GetCurrentHalTicks() + HIDS_Interval_ms;
 8009930:	f7ff ff0e 	bl	8009750 <GetCurrentHalTicks>
 8009934:	0002      	movs	r2, r0
 8009936:	4b08      	ldr	r3, [pc, #32]	@ (8009958 <HIDS_StartMeasurement+0x2c>)
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	18d2      	adds	r2, r2, r3
 800993c:	4b07      	ldr	r3, [pc, #28]	@ (800995c <HIDS_StartMeasurement+0x30>)
 800993e:	601a      	str	r2, [r3, #0]
  WriteRegister(HIDS_I2C_ADDRESS, &MeasureMode, 1);
 8009940:	4b07      	ldr	r3, [pc, #28]	@ (8009960 <HIDS_StartMeasurement+0x34>)
 8009942:	2201      	movs	r2, #1
 8009944:	0019      	movs	r1, r3
 8009946:	2044      	movs	r0, #68	@ 0x44
 8009948:	f7ff ff5a 	bl	8009800 <WriteRegister>
  MeasurementDone = false;
 800994c:	4b05      	ldr	r3, [pc, #20]	@ (8009964 <HIDS_StartMeasurement+0x38>)
 800994e:	2200      	movs	r2, #0
 8009950:	701a      	strb	r2, [r3, #0]
}
 8009952:	46c0      	nop			@ (mov r8, r8)
 8009954:	46bd      	mov	sp, r7
 8009956:	bd80      	pop	{r7, pc}
 8009958:	200000b0 	.word	0x200000b0
 800995c:	200000ac 	.word	0x200000ac
 8009960:	200000aa 	.word	0x200000aa
 8009964:	20002b1a 	.word	0x20002b1a

08009968 <HIDS_SetHeaterMode>:

void HIDS_SetMeasurementDuration(uint32_t duration) {
  HIDS_MeasurementDuration = duration;
}

void HIDS_SetHeaterMode(HIDSHeaterModes modeHeater) {
 8009968:	b580      	push	{r7, lr}
 800996a:	b082      	sub	sp, #8
 800996c:	af00      	add	r7, sp, #0
 800996e:	0002      	movs	r2, r0
 8009970:	1dfb      	adds	r3, r7, #7
 8009972:	701a      	strb	r2, [r3, #0]
  HeaterMode = modeHeater;
 8009974:	4b03      	ldr	r3, [pc, #12]	@ (8009984 <HIDS_SetHeaterMode+0x1c>)
 8009976:	1dfa      	adds	r2, r7, #7
 8009978:	7812      	ldrb	r2, [r2, #0]
 800997a:	701a      	strb	r2, [r3, #0]
}
 800997c:	46c0      	nop			@ (mov r8, r8)
 800997e:	46bd      	mov	sp, r7
 8009980:	b002      	add	sp, #8
 8009982:	bd80      	pop	{r7, pc}
 8009984:	200000a9 	.word	0x200000a9

08009988 <CheckCRC>:

static bool CheckCRC(uint8_t* data) {
 8009988:	b590      	push	{r4, r7, lr}
 800998a:	b085      	sub	sp, #20
 800998c:	af00      	add	r7, sp, #0
 800998e:	6078      	str	r0, [r7, #4]
  // Data format: 2 bytes for data, followed by an 8-bit CRC

	// Check CRC for the first segment
	uint8_t crcData1[2] = {data[0], data[1]};
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	781a      	ldrb	r2, [r3, #0]
 8009994:	210c      	movs	r1, #12
 8009996:	187b      	adds	r3, r7, r1
 8009998:	701a      	strb	r2, [r3, #0]
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	785a      	ldrb	r2, [r3, #1]
 800999e:	187b      	adds	r3, r7, r1
 80099a0:	705a      	strb	r2, [r3, #1]
	uint8_t crc1 = data[2];
 80099a2:	240f      	movs	r4, #15
 80099a4:	193b      	adds	r3, r7, r4
 80099a6:	687a      	ldr	r2, [r7, #4]
 80099a8:	7892      	ldrb	r2, [r2, #2]
 80099aa:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData1, 2) != crc1) {
 80099ac:	187b      	adds	r3, r7, r1
 80099ae:	2102      	movs	r1, #2
 80099b0:	0018      	movs	r0, r3
 80099b2:	f7ff ff43 	bl	800983c <CalculateCRC>
 80099b6:	0003      	movs	r3, r0
 80099b8:	001a      	movs	r2, r3
 80099ba:	193b      	adds	r3, r7, r4
 80099bc:	781b      	ldrb	r3, [r3, #0]
 80099be:	4293      	cmp	r3, r2
 80099c0:	d007      	beq.n	80099d2 <CheckCRC+0x4a>
		Error("CRC check failed for the first segment.");
 80099c2:	4a17      	ldr	r2, [pc, #92]	@ (8009a20 <CheckCRC+0x98>)
 80099c4:	4b17      	ldr	r3, [pc, #92]	@ (8009a24 <CheckCRC+0x9c>)
 80099c6:	0019      	movs	r1, r3
 80099c8:	2001      	movs	r0, #1
 80099ca:	f7ff fe35 	bl	8009638 <CreateLine>
		return false;
 80099ce:	2300      	movs	r3, #0
 80099d0:	e021      	b.n	8009a16 <CheckCRC+0x8e>
	}

	// Check CRC for the second segment
	uint8_t crcData2[2] = {data[3], data[4]};
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	78da      	ldrb	r2, [r3, #3]
 80099d6:	2108      	movs	r1, #8
 80099d8:	187b      	adds	r3, r7, r1
 80099da:	701a      	strb	r2, [r3, #0]
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	791a      	ldrb	r2, [r3, #4]
 80099e0:	187b      	adds	r3, r7, r1
 80099e2:	705a      	strb	r2, [r3, #1]
	uint8_t crc2 = data[5];
 80099e4:	240e      	movs	r4, #14
 80099e6:	193b      	adds	r3, r7, r4
 80099e8:	687a      	ldr	r2, [r7, #4]
 80099ea:	7952      	ldrb	r2, [r2, #5]
 80099ec:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData2, 2) != crc2) {
 80099ee:	187b      	adds	r3, r7, r1
 80099f0:	2102      	movs	r1, #2
 80099f2:	0018      	movs	r0, r3
 80099f4:	f7ff ff22 	bl	800983c <CalculateCRC>
 80099f8:	0003      	movs	r3, r0
 80099fa:	001a      	movs	r2, r3
 80099fc:	193b      	adds	r3, r7, r4
 80099fe:	781b      	ldrb	r3, [r3, #0]
 8009a00:	4293      	cmp	r3, r2
 8009a02:	d007      	beq.n	8009a14 <CheckCRC+0x8c>
		Error("CRC check failed for the second segment.");
 8009a04:	4a08      	ldr	r2, [pc, #32]	@ (8009a28 <CheckCRC+0xa0>)
 8009a06:	4b07      	ldr	r3, [pc, #28]	@ (8009a24 <CheckCRC+0x9c>)
 8009a08:	0019      	movs	r1, r3
 8009a0a:	2001      	movs	r0, #1
 8009a0c:	f7ff fe14 	bl	8009638 <CreateLine>
		return false;
 8009a10:	2300      	movs	r3, #0
 8009a12:	e000      	b.n	8009a16 <CheckCRC+0x8e>
	}
	return true;
 8009a14:	2301      	movs	r3, #1
}
 8009a16:	0018      	movs	r0, r3
 8009a18:	46bd      	mov	sp, r7
 8009a1a:	b005      	add	sp, #20
 8009a1c:	bd90      	pop	{r4, r7, pc}
 8009a1e:	46c0      	nop			@ (mov r8, r8)
 8009a20:	0801b654 	.word	0x0801b654
 8009a24:	0801b67c 	.word	0x0801b67c
 8009a28:	0801b680 	.word	0x0801b680

08009a2c <HIDS_DeviceConnected>:

bool HIDS_DeviceConnected(void) {
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	b084      	sub	sp, #16
 8009a30:	af02      	add	r7, sp, #8
	uint8_t serialReg = HIDS_SERIAL_NUMBER_REG;
 8009a32:	1dbb      	adds	r3, r7, #6
 8009a34:	2289      	movs	r2, #137	@ 0x89
 8009a36:	701a      	strb	r2, [r3, #0]
	WriteRegister(HIDS_I2C_ADDRESS, &serialReg, 1);
 8009a38:	1dbb      	adds	r3, r7, #6
 8009a3a:	2201      	movs	r2, #1
 8009a3c:	0019      	movs	r1, r3
 8009a3e:	2044      	movs	r0, #68	@ 0x44
 8009a40:	f7ff fede 	bl	8009800 <WriteRegister>
	HAL_Delay(30);
 8009a44:	201e      	movs	r0, #30
 8009a46:	f000 f99d 	bl	8009d84 <HAL_Delay>
	ReadRegister(HIDS_I2C_ADDRESS, SerialBuffer, HIDS_SERIAL_BUFFER_LENGTH);
 8009a4a:	4b14      	ldr	r3, [pc, #80]	@ (8009a9c <HIDS_DeviceConnected+0x70>)
 8009a4c:	2206      	movs	r2, #6
 8009a4e:	0019      	movs	r1, r3
 8009a50:	2044      	movs	r0, #68	@ 0x44
 8009a52:	f7ff feb7 	bl	80097c4 <ReadRegister>

	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 8009a56:	1dfb      	adds	r3, r7, #7
 8009a58:	2200      	movs	r2, #0
 8009a5a:	701a      	strb	r2, [r3, #0]
 8009a5c:	e011      	b.n	8009a82 <HIDS_DeviceConnected+0x56>
		Info("HIDS_Device serial ID[%d]: 0x%X", i, SerialBuffer[i]);
 8009a5e:	1dfb      	adds	r3, r7, #7
 8009a60:	7818      	ldrb	r0, [r3, #0]
 8009a62:	1dfb      	adds	r3, r7, #7
 8009a64:	781b      	ldrb	r3, [r3, #0]
 8009a66:	4a0d      	ldr	r2, [pc, #52]	@ (8009a9c <HIDS_DeviceConnected+0x70>)
 8009a68:	5cd3      	ldrb	r3, [r2, r3]
 8009a6a:	4a0d      	ldr	r2, [pc, #52]	@ (8009aa0 <HIDS_DeviceConnected+0x74>)
 8009a6c:	490d      	ldr	r1, [pc, #52]	@ (8009aa4 <HIDS_DeviceConnected+0x78>)
 8009a6e:	9300      	str	r3, [sp, #0]
 8009a70:	0003      	movs	r3, r0
 8009a72:	2002      	movs	r0, #2
 8009a74:	f7ff fde0 	bl	8009638 <CreateLine>
	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 8009a78:	1dfb      	adds	r3, r7, #7
 8009a7a:	781a      	ldrb	r2, [r3, #0]
 8009a7c:	1dfb      	adds	r3, r7, #7
 8009a7e:	3201      	adds	r2, #1
 8009a80:	701a      	strb	r2, [r3, #0]
 8009a82:	1dfb      	adds	r3, r7, #7
 8009a84:	781b      	ldrb	r3, [r3, #0]
 8009a86:	2b05      	cmp	r3, #5
 8009a88:	d9e9      	bls.n	8009a5e <HIDS_DeviceConnected+0x32>
	}
	return CheckCRC(SerialBuffer);
 8009a8a:	4b04      	ldr	r3, [pc, #16]	@ (8009a9c <HIDS_DeviceConnected+0x70>)
 8009a8c:	0018      	movs	r0, r3
 8009a8e:	f7ff ff7b 	bl	8009988 <CheckCRC>
 8009a92:	0003      	movs	r3, r0
}
 8009a94:	0018      	movs	r0, r3
 8009a96:	46bd      	mov	sp, r7
 8009a98:	b002      	add	sp, #8
 8009a9a:	bd80      	pop	{r7, pc}
 8009a9c:	20002b0c 	.word	0x20002b0c
 8009aa0:	0801b6ac 	.word	0x0801b6ac
 8009aa4:	0801b650 	.word	0x0801b650

08009aa8 <HIDS_SetMeasurementMode>:

void HIDS_SetMeasurementMode(HIDSMeasureModes modeMeasure) {
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b082      	sub	sp, #8
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	0002      	movs	r2, r0
 8009ab0:	1dfb      	adds	r3, r7, #7
 8009ab2:	701a      	strb	r2, [r3, #0]
	MeasureMode = modeMeasure;
 8009ab4:	4b03      	ldr	r3, [pc, #12]	@ (8009ac4 <HIDS_SetMeasurementMode+0x1c>)
 8009ab6:	1dfa      	adds	r2, r7, #7
 8009ab8:	7812      	ldrb	r2, [r2, #0]
 8009aba:	701a      	strb	r2, [r3, #0]
}
 8009abc:	46c0      	nop			@ (mov r8, r8)
 8009abe:	46bd      	mov	sp, r7
 8009ac0:	b002      	add	sp, #8
 8009ac2:	bd80      	pop	{r7, pc}
 8009ac4:	200000aa 	.word	0x200000aa

08009ac8 <HIDS_MeasurementReady>:

bool HIDS_MeasurementReady(void) {
 8009ac8:	b580      	push	{r7, lr}
 8009aca:	af00      	add	r7, sp, #0
  return TimestampIsReached(HIDS_NextRunTime);
 8009acc:	4b04      	ldr	r3, [pc, #16]	@ (8009ae0 <HIDS_MeasurementReady+0x18>)
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	0018      	movs	r0, r3
 8009ad2:	f7ff fd5b 	bl	800958c <TimestampIsReached>
 8009ad6:	0003      	movs	r3, r0
}
 8009ad8:	0018      	movs	r0, r3
 8009ada:	46bd      	mov	sp, r7
 8009adc:	bd80      	pop	{r7, pc}
 8009ade:	46c0      	nop			@ (mov r8, r8)
 8009ae0:	200000ac 	.word	0x200000ac

08009ae4 <HIDS_GetMeasurementValues>:
//    green = (1- ((humidity - 80)/20))*Full;
//    blue = Full;
//  }
}

bool HIDS_GetMeasurementValues(float* humidity, float* temperature) {
 8009ae4:	b580      	push	{r7, lr}
 8009ae6:	b088      	sub	sp, #32
 8009ae8:	af02      	add	r7, sp, #8
 8009aea:	6078      	str	r0, [r7, #4]
 8009aec:	6039      	str	r1, [r7, #0]
  // TODO: Store last measurement humidity for sgp40 measurement.
  if(MeasurementDone) return true;
 8009aee:	4b4e      	ldr	r3, [pc, #312]	@ (8009c28 <HIDS_GetMeasurementValues+0x144>)
 8009af0:	781b      	ldrb	r3, [r3, #0]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d001      	beq.n	8009afa <HIDS_GetMeasurementValues+0x16>
 8009af6:	2301      	movs	r3, #1
 8009af8:	e092      	b.n	8009c20 <HIDS_GetMeasurementValues+0x13c>
  if(!HIDS_MeasurementReady()) return false;
 8009afa:	f7ff ffe5 	bl	8009ac8 <HIDS_MeasurementReady>
 8009afe:	0003      	movs	r3, r0
 8009b00:	001a      	movs	r2, r3
 8009b02:	2301      	movs	r3, #1
 8009b04:	4053      	eors	r3, r2
 8009b06:	b2db      	uxtb	r3, r3
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d001      	beq.n	8009b10 <HIDS_GetMeasurementValues+0x2c>
 8009b0c:	2300      	movs	r3, #0
 8009b0e:	e087      	b.n	8009c20 <HIDS_GetMeasurementValues+0x13c>
  uint32_t amountOfMeasurements = HIDS_MeasurementDuration / HIDS_Interval_ms;
 8009b10:	4b46      	ldr	r3, [pc, #280]	@ (8009c2c <HIDS_GetMeasurementValues+0x148>)
 8009b12:	681a      	ldr	r2, [r3, #0]
 8009b14:	4b46      	ldr	r3, [pc, #280]	@ (8009c30 <HIDS_GetMeasurementValues+0x14c>)
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	0019      	movs	r1, r3
 8009b1a:	0010      	movs	r0, r2
 8009b1c:	f7f6 fb10 	bl	8000140 <__udivsi3>
 8009b20:	0003      	movs	r3, r0
 8009b22:	613b      	str	r3, [r7, #16]
  float currentTemperature;
  float currentHumidity;
  //static float temperatures[HIDS_MAX_MEASUREMENTS];
  //static float humidities[HIDS_MAX_MEASUREMENTS];

  Debug("HT measurements: %d out of %d completed.", measurements + 1, amountOfMeasurements);
 8009b24:	4b43      	ldr	r3, [pc, #268]	@ (8009c34 <HIDS_GetMeasurementValues+0x150>)
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	1c58      	adds	r0, r3, #1
 8009b2a:	4a43      	ldr	r2, [pc, #268]	@ (8009c38 <HIDS_GetMeasurementValues+0x154>)
 8009b2c:	4943      	ldr	r1, [pc, #268]	@ (8009c3c <HIDS_GetMeasurementValues+0x158>)
 8009b2e:	693b      	ldr	r3, [r7, #16]
 8009b30:	9300      	str	r3, [sp, #0]
 8009b32:	0003      	movs	r3, r0
 8009b34:	2003      	movs	r0, #3
 8009b36:	f7ff fd7f 	bl	8009638 <CreateLine>
  ReadRegister(HIDS_I2C_ADDRESS, MeasureBuffer, HIDS_MEASURE_BUFFER_LENGTH);
 8009b3a:	4b41      	ldr	r3, [pc, #260]	@ (8009c40 <HIDS_GetMeasurementValues+0x15c>)
 8009b3c:	2206      	movs	r2, #6
 8009b3e:	0019      	movs	r1, r3
 8009b40:	2044      	movs	r0, #68	@ 0x44
 8009b42:	f7ff fe3f 	bl	80097c4 <ReadRegister>
	if(!CheckCRC(MeasureBuffer)) {
 8009b46:	4b3e      	ldr	r3, [pc, #248]	@ (8009c40 <HIDS_GetMeasurementValues+0x15c>)
 8009b48:	0018      	movs	r0, r3
 8009b4a:	f7ff ff1d 	bl	8009988 <CheckCRC>
 8009b4e:	0003      	movs	r3, r0
 8009b50:	001a      	movs	r2, r3
 8009b52:	2301      	movs	r3, #1
 8009b54:	4053      	eors	r3, r2
 8009b56:	b2db      	uxtb	r3, r3
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d011      	beq.n	8009b80 <HIDS_GetMeasurementValues+0x9c>
		//Error("HIDS measurements CRC check failed.");
		//Info("Measure buffer structure:");
		for(uint8_t i = 0; i < HIDS_MEASURE_BUFFER_LENGTH; i++) {
 8009b5c:	2317      	movs	r3, #23
 8009b5e:	18fb      	adds	r3, r7, r3
 8009b60:	2200      	movs	r2, #0
 8009b62:	701a      	strb	r2, [r3, #0]
 8009b64:	e005      	b.n	8009b72 <HIDS_GetMeasurementValues+0x8e>
 8009b66:	2117      	movs	r1, #23
 8009b68:	187b      	adds	r3, r7, r1
 8009b6a:	781a      	ldrb	r2, [r3, #0]
 8009b6c:	187b      	adds	r3, r7, r1
 8009b6e:	3201      	adds	r2, #1
 8009b70:	701a      	strb	r2, [r3, #0]
 8009b72:	2317      	movs	r3, #23
 8009b74:	18fb      	adds	r3, r7, r3
 8009b76:	781b      	ldrb	r3, [r3, #0]
 8009b78:	2b05      	cmp	r3, #5
 8009b7a:	d9f4      	bls.n	8009b66 <HIDS_GetMeasurementValues+0x82>
			//Debug("HIDS_Measurement buffer[%d]: %d", i, MeasureBuffer[i]);
		}
		return false;
 8009b7c:	2300      	movs	r3, #0
 8009b7e:	e04f      	b.n	8009c20 <HIDS_GetMeasurementValues+0x13c>

  // Humidity formula in percentage:
  //  RH = ((-6 + 125 * SRH) / (2^16 - 1))
  // Temperature formula in degrees Celsius:
  //  T = ((-45 + (175 * ST) / (2^16 - 1)))
	currentTemperature = (((175 * (MeasureBuffer[0] << 8) | MeasureBuffer[1])) / HIDS_POW_2_16_MINUS_1);
 8009b80:	4b2f      	ldr	r3, [pc, #188]	@ (8009c40 <HIDS_GetMeasurementValues+0x15c>)
 8009b82:	781b      	ldrb	r3, [r3, #0]
 8009b84:	021b      	lsls	r3, r3, #8
 8009b86:	22af      	movs	r2, #175	@ 0xaf
 8009b88:	4353      	muls	r3, r2
 8009b8a:	4a2d      	ldr	r2, [pc, #180]	@ (8009c40 <HIDS_GetMeasurementValues+0x15c>)
 8009b8c:	7852      	ldrb	r2, [r2, #1]
 8009b8e:	4313      	orrs	r3, r2
 8009b90:	0018      	movs	r0, r3
 8009b92:	f7f9 fb93 	bl	80032bc <__aeabi_i2d>
 8009b96:	2200      	movs	r2, #0
 8009b98:	4b2a      	ldr	r3, [pc, #168]	@ (8009c44 <HIDS_GetMeasurementValues+0x160>)
 8009b9a:	f7f8 f889 	bl	8001cb0 <__aeabi_ddiv>
 8009b9e:	0002      	movs	r2, r0
 8009ba0:	000b      	movs	r3, r1
 8009ba2:	0010      	movs	r0, r2
 8009ba4:	0019      	movs	r1, r3
 8009ba6:	f7f9 fc23 	bl	80033f0 <__aeabi_d2f>
 8009baa:	1c03      	adds	r3, r0, #0
 8009bac:	60fb      	str	r3, [r7, #12]
	currentTemperature += -45;
 8009bae:	4926      	ldr	r1, [pc, #152]	@ (8009c48 <HIDS_GetMeasurementValues+0x164>)
 8009bb0:	68f8      	ldr	r0, [r7, #12]
 8009bb2:	f7f7 fab1 	bl	8001118 <__aeabi_fsub>
 8009bb6:	1c03      	adds	r3, r0, #0
 8009bb8:	60fb      	str	r3, [r7, #12]
	currentHumidity = ((125 * ((MeasureBuffer[3] << 8) | MeasureBuffer[4]) / HIDS_POW_2_16_MINUS_1));
 8009bba:	4b21      	ldr	r3, [pc, #132]	@ (8009c40 <HIDS_GetMeasurementValues+0x15c>)
 8009bbc:	78db      	ldrb	r3, [r3, #3]
 8009bbe:	021b      	lsls	r3, r3, #8
 8009bc0:	4a1f      	ldr	r2, [pc, #124]	@ (8009c40 <HIDS_GetMeasurementValues+0x15c>)
 8009bc2:	7912      	ldrb	r2, [r2, #4]
 8009bc4:	431a      	orrs	r2, r3
 8009bc6:	0013      	movs	r3, r2
 8009bc8:	015b      	lsls	r3, r3, #5
 8009bca:	1a9b      	subs	r3, r3, r2
 8009bcc:	009b      	lsls	r3, r3, #2
 8009bce:	189b      	adds	r3, r3, r2
 8009bd0:	0018      	movs	r0, r3
 8009bd2:	f7f9 fb73 	bl	80032bc <__aeabi_i2d>
 8009bd6:	2200      	movs	r2, #0
 8009bd8:	4b1a      	ldr	r3, [pc, #104]	@ (8009c44 <HIDS_GetMeasurementValues+0x160>)
 8009bda:	f7f8 f869 	bl	8001cb0 <__aeabi_ddiv>
 8009bde:	0002      	movs	r2, r0
 8009be0:	000b      	movs	r3, r1
 8009be2:	0010      	movs	r0, r2
 8009be4:	0019      	movs	r1, r3
 8009be6:	f7f9 fc03 	bl	80033f0 <__aeabi_d2f>
 8009bea:	1c03      	adds	r3, r0, #0
 8009bec:	60bb      	str	r3, [r7, #8]
	currentHumidity += -6;
 8009bee:	4917      	ldr	r1, [pc, #92]	@ (8009c4c <HIDS_GetMeasurementValues+0x168>)
 8009bf0:	68b8      	ldr	r0, [r7, #8]
 8009bf2:	f7f7 fa91 	bl	8001118 <__aeabi_fsub>
 8009bf6:	1c03      	adds	r3, r0, #0
 8009bf8:	60bb      	str	r3, [r7, #8]
//    for (uint8_t i = 0; i < measurements; i++) {
//        sumTemperature += temperatures[i];
//        sumHumidity += humidities[i];
//    }

   *temperature = currentTemperature;
 8009bfa:	683b      	ldr	r3, [r7, #0]
 8009bfc:	68fa      	ldr	r2, [r7, #12]
 8009bfe:	601a      	str	r2, [r3, #0]
   *humidity = currentHumidity;
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	68ba      	ldr	r2, [r7, #8]
 8009c04:	601a      	str	r2, [r3, #0]

   SGP_GetHT(temperature, humidity);
 8009c06:	687a      	ldr	r2, [r7, #4]
 8009c08:	683b      	ldr	r3, [r7, #0]
 8009c0a:	0011      	movs	r1, r2
 8009c0c:	0018      	movs	r0, r3
 8009c0e:	f7fe feab 	bl	8008968 <SGP_GetHT>

   measurements = 0;
 8009c12:	4b08      	ldr	r3, [pc, #32]	@ (8009c34 <HIDS_GetMeasurementValues+0x150>)
 8009c14:	2200      	movs	r2, #0
 8009c16:	601a      	str	r2, [r3, #0]
   MeasurementDone = true;
 8009c18:	4b03      	ldr	r3, [pc, #12]	@ (8009c28 <HIDS_GetMeasurementValues+0x144>)
 8009c1a:	2201      	movs	r2, #1
 8009c1c:	701a      	strb	r2, [r3, #0]
    //Debug("HIDS measurement is done.");
   return true;
 8009c1e:	2301      	movs	r3, #1
	// Starting another measurement, still not done with all measurements.
	//HIDS_StartMeasurement();
	//return false;
}
 8009c20:	0018      	movs	r0, r3
 8009c22:	46bd      	mov	sp, r7
 8009c24:	b006      	add	sp, #24
 8009c26:	bd80      	pop	{r7, pc}
 8009c28:	20002b1a 	.word	0x20002b1a
 8009c2c:	200000b4 	.word	0x200000b4
 8009c30:	200000b0 	.word	0x200000b0
 8009c34:	20002b1c 	.word	0x20002b1c
 8009c38:	0801b6cc 	.word	0x0801b6cc
 8009c3c:	0801b6f8 	.word	0x0801b6f8
 8009c40:	20002b14 	.word	0x20002b14
 8009c44:	40efffe0 	.word	0x40efffe0
 8009c48:	42340000 	.word	0x42340000
 8009c4c:	40c00000 	.word	0x40c00000

08009c50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8009c50:	480d      	ldr	r0, [pc, #52]	@ (8009c88 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8009c52:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8009c54:	f7ff f94c 	bl	8008ef0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8009c58:	480c      	ldr	r0, [pc, #48]	@ (8009c8c <LoopForever+0x6>)
  ldr r1, =_edata
 8009c5a:	490d      	ldr	r1, [pc, #52]	@ (8009c90 <LoopForever+0xa>)
  ldr r2, =_sidata
 8009c5c:	4a0d      	ldr	r2, [pc, #52]	@ (8009c94 <LoopForever+0xe>)
  movs r3, #0
 8009c5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8009c60:	e002      	b.n	8009c68 <LoopCopyDataInit>

08009c62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8009c62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8009c64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8009c66:	3304      	adds	r3, #4

08009c68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8009c68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8009c6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8009c6c:	d3f9      	bcc.n	8009c62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8009c6e:	4a0a      	ldr	r2, [pc, #40]	@ (8009c98 <LoopForever+0x12>)
  ldr r4, =_ebss
 8009c70:	4c0a      	ldr	r4, [pc, #40]	@ (8009c9c <LoopForever+0x16>)
  movs r3, #0
 8009c72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8009c74:	e001      	b.n	8009c7a <LoopFillZerobss>

08009c76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8009c76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8009c78:	3204      	adds	r2, #4

08009c7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8009c7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8009c7c:	d3fb      	bcc.n	8009c76 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8009c7e:	f00e f97d 	bl	8017f7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8009c82:	f7fc fa5b 	bl	800613c <main>

08009c86 <LoopForever>:

LoopForever:
    b LoopForever
 8009c86:	e7fe      	b.n	8009c86 <LoopForever>
   ldr   r0, =_estack
 8009c88:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8009c8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8009c90:	20000410 	.word	0x20000410
  ldr r2, =_sidata
 8009c94:	0801be88 	.word	0x0801be88
  ldr r2, =_sbss
 8009c98:	20000410 	.word	0x20000410
  ldr r4, =_ebss
 8009c9c:	20003f24 	.word	0x20003f24

08009ca0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8009ca0:	e7fe      	b.n	8009ca0 <ADC1_COMP_IRQHandler>
	...

08009ca4 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009ca4:	b580      	push	{r7, lr}
 8009ca6:	b082      	sub	sp, #8
 8009ca8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8009caa:	1dfb      	adds	r3, r7, #7
 8009cac:	2200      	movs	r2, #0
 8009cae:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8009cb0:	4b0b      	ldr	r3, [pc, #44]	@ (8009ce0 <HAL_Init+0x3c>)
 8009cb2:	681a      	ldr	r2, [r3, #0]
 8009cb4:	4b0a      	ldr	r3, [pc, #40]	@ (8009ce0 <HAL_Init+0x3c>)
 8009cb6:	2140      	movs	r1, #64	@ 0x40
 8009cb8:	430a      	orrs	r2, r1
 8009cba:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8009cbc:	2003      	movs	r0, #3
 8009cbe:	f000 f811 	bl	8009ce4 <HAL_InitTick>
 8009cc2:	1e03      	subs	r3, r0, #0
 8009cc4:	d003      	beq.n	8009cce <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8009cc6:	1dfb      	adds	r3, r7, #7
 8009cc8:	2201      	movs	r2, #1
 8009cca:	701a      	strb	r2, [r3, #0]
 8009ccc:	e001      	b.n	8009cd2 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8009cce:	f7fe ffe5 	bl	8008c9c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8009cd2:	1dfb      	adds	r3, r7, #7
 8009cd4:	781b      	ldrb	r3, [r3, #0]
}
 8009cd6:	0018      	movs	r0, r3
 8009cd8:	46bd      	mov	sp, r7
 8009cda:	b002      	add	sp, #8
 8009cdc:	bd80      	pop	{r7, pc}
 8009cde:	46c0      	nop			@ (mov r8, r8)
 8009ce0:	40022000 	.word	0x40022000

08009ce4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009ce4:	b590      	push	{r4, r7, lr}
 8009ce6:	b083      	sub	sp, #12
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8009cec:	4b14      	ldr	r3, [pc, #80]	@ (8009d40 <HAL_InitTick+0x5c>)
 8009cee:	681c      	ldr	r4, [r3, #0]
 8009cf0:	4b14      	ldr	r3, [pc, #80]	@ (8009d44 <HAL_InitTick+0x60>)
 8009cf2:	781b      	ldrb	r3, [r3, #0]
 8009cf4:	0019      	movs	r1, r3
 8009cf6:	23fa      	movs	r3, #250	@ 0xfa
 8009cf8:	0098      	lsls	r0, r3, #2
 8009cfa:	f7f6 fa21 	bl	8000140 <__udivsi3>
 8009cfe:	0003      	movs	r3, r0
 8009d00:	0019      	movs	r1, r3
 8009d02:	0020      	movs	r0, r4
 8009d04:	f7f6 fa1c 	bl	8000140 <__udivsi3>
 8009d08:	0003      	movs	r3, r0
 8009d0a:	0018      	movs	r0, r3
 8009d0c:	f000 fccb 	bl	800a6a6 <HAL_SYSTICK_Config>
 8009d10:	1e03      	subs	r3, r0, #0
 8009d12:	d001      	beq.n	8009d18 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8009d14:	2301      	movs	r3, #1
 8009d16:	e00f      	b.n	8009d38 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	2b03      	cmp	r3, #3
 8009d1c:	d80b      	bhi.n	8009d36 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009d1e:	6879      	ldr	r1, [r7, #4]
 8009d20:	2301      	movs	r3, #1
 8009d22:	425b      	negs	r3, r3
 8009d24:	2200      	movs	r2, #0
 8009d26:	0018      	movs	r0, r3
 8009d28:	f000 fc98 	bl	800a65c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8009d2c:	4b06      	ldr	r3, [pc, #24]	@ (8009d48 <HAL_InitTick+0x64>)
 8009d2e:	687a      	ldr	r2, [r7, #4]
 8009d30:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8009d32:	2300      	movs	r3, #0
 8009d34:	e000      	b.n	8009d38 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8009d36:	2301      	movs	r3, #1
}
 8009d38:	0018      	movs	r0, r3
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	b003      	add	sp, #12
 8009d3e:	bd90      	pop	{r4, r7, pc}
 8009d40:	200000a4 	.word	0x200000a4
 8009d44:	200000bc 	.word	0x200000bc
 8009d48:	200000b8 	.word	0x200000b8

08009d4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009d50:	4b05      	ldr	r3, [pc, #20]	@ (8009d68 <HAL_IncTick+0x1c>)
 8009d52:	781b      	ldrb	r3, [r3, #0]
 8009d54:	001a      	movs	r2, r3
 8009d56:	4b05      	ldr	r3, [pc, #20]	@ (8009d6c <HAL_IncTick+0x20>)
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	18d2      	adds	r2, r2, r3
 8009d5c:	4b03      	ldr	r3, [pc, #12]	@ (8009d6c <HAL_IncTick+0x20>)
 8009d5e:	601a      	str	r2, [r3, #0]
}
 8009d60:	46c0      	nop			@ (mov r8, r8)
 8009d62:	46bd      	mov	sp, r7
 8009d64:	bd80      	pop	{r7, pc}
 8009d66:	46c0      	nop			@ (mov r8, r8)
 8009d68:	200000bc 	.word	0x200000bc
 8009d6c:	20002b20 	.word	0x20002b20

08009d70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009d70:	b580      	push	{r7, lr}
 8009d72:	af00      	add	r7, sp, #0
  return uwTick;
 8009d74:	4b02      	ldr	r3, [pc, #8]	@ (8009d80 <HAL_GetTick+0x10>)
 8009d76:	681b      	ldr	r3, [r3, #0]
}
 8009d78:	0018      	movs	r0, r3
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	bd80      	pop	{r7, pc}
 8009d7e:	46c0      	nop			@ (mov r8, r8)
 8009d80:	20002b20 	.word	0x20002b20

08009d84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009d84:	b580      	push	{r7, lr}
 8009d86:	b084      	sub	sp, #16
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009d8c:	f7ff fff0 	bl	8009d70 <HAL_GetTick>
 8009d90:	0003      	movs	r3, r0
 8009d92:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	3301      	adds	r3, #1
 8009d9c:	d005      	beq.n	8009daa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8009d9e:	4b0a      	ldr	r3, [pc, #40]	@ (8009dc8 <HAL_Delay+0x44>)
 8009da0:	781b      	ldrb	r3, [r3, #0]
 8009da2:	001a      	movs	r2, r3
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	189b      	adds	r3, r3, r2
 8009da8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8009daa:	46c0      	nop			@ (mov r8, r8)
 8009dac:	f7ff ffe0 	bl	8009d70 <HAL_GetTick>
 8009db0:	0002      	movs	r2, r0
 8009db2:	68bb      	ldr	r3, [r7, #8]
 8009db4:	1ad3      	subs	r3, r2, r3
 8009db6:	68fa      	ldr	r2, [r7, #12]
 8009db8:	429a      	cmp	r2, r3
 8009dba:	d8f7      	bhi.n	8009dac <HAL_Delay+0x28>
  {
  }
}
 8009dbc:	46c0      	nop			@ (mov r8, r8)
 8009dbe:	46c0      	nop			@ (mov r8, r8)
 8009dc0:	46bd      	mov	sp, r7
 8009dc2:	b004      	add	sp, #16
 8009dc4:	bd80      	pop	{r7, pc}
 8009dc6:	46c0      	nop			@ (mov r8, r8)
 8009dc8:	200000bc 	.word	0x200000bc

08009dcc <HAL_GetUIDw0>:
/**
  * @brief  Returns the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8009dcc:	b580      	push	{r7, lr}
 8009dce:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
 8009dd0:	4b02      	ldr	r3, [pc, #8]	@ (8009ddc <HAL_GetUIDw0+0x10>)
 8009dd2:	681b      	ldr	r3, [r3, #0]
}
 8009dd4:	0018      	movs	r0, r3
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	bd80      	pop	{r7, pc}
 8009dda:	46c0      	nop			@ (mov r8, r8)
 8009ddc:	1ff80050 	.word	0x1ff80050

08009de0 <HAL_GetUIDw1>:
/**
  * @brief  Returns the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8009de0:	b580      	push	{r7, lr}
 8009de2:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x04U))));
 8009de4:	4b02      	ldr	r3, [pc, #8]	@ (8009df0 <HAL_GetUIDw1+0x10>)
 8009de6:	681b      	ldr	r3, [r3, #0]
}
 8009de8:	0018      	movs	r0, r3
 8009dea:	46bd      	mov	sp, r7
 8009dec:	bd80      	pop	{r7, pc}
 8009dee:	46c0      	nop			@ (mov r8, r8)
 8009df0:	1ff80054 	.word	0x1ff80054

08009df4 <HAL_GetUIDw2>:
/**
  * @brief  Returns the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8009df4:	b580      	push	{r7, lr}
 8009df6:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x14U))));
 8009df8:	4b02      	ldr	r3, [pc, #8]	@ (8009e04 <HAL_GetUIDw2+0x10>)
 8009dfa:	681b      	ldr	r3, [r3, #0]
}
 8009dfc:	0018      	movs	r0, r3
 8009dfe:	46bd      	mov	sp, r7
 8009e00:	bd80      	pop	{r7, pc}
 8009e02:	46c0      	nop			@ (mov r8, r8)
 8009e04:	1ff80064 	.word	0x1ff80064

08009e08 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8009e08:	b580      	push	{r7, lr}
 8009e0a:	b082      	sub	sp, #8
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d101      	bne.n	8009e1a <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8009e16:	2301      	movs	r3, #1
 8009e18:	e159      	b.n	800a0ce <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d10a      	bne.n	8009e38 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	2200      	movs	r2, #0
 8009e26:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	2250      	movs	r2, #80	@ 0x50
 8009e2c:	2100      	movs	r1, #0
 8009e2e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	0018      	movs	r0, r3
 8009e34:	f7fb fc96 	bl	8005764 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e3c:	2210      	movs	r2, #16
 8009e3e:	4013      	ands	r3, r2
 8009e40:	2b10      	cmp	r3, #16
 8009e42:	d005      	beq.n	8009e50 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	689b      	ldr	r3, [r3, #8]
 8009e4a:	2204      	movs	r2, #4
 8009e4c:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8009e4e:	d00b      	beq.n	8009e68 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e54:	2210      	movs	r2, #16
 8009e56:	431a      	orrs	r2, r3
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	2250      	movs	r2, #80	@ 0x50
 8009e60:	2100      	movs	r1, #0
 8009e62:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8009e64:	2301      	movs	r3, #1
 8009e66:	e132      	b.n	800a0ce <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e6c:	4a9a      	ldr	r2, [pc, #616]	@ (800a0d8 <HAL_ADC_Init+0x2d0>)
 8009e6e:	4013      	ands	r3, r2
 8009e70:	2202      	movs	r2, #2
 8009e72:	431a      	orrs	r2, r3
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	689b      	ldr	r3, [r3, #8]
 8009e7e:	2203      	movs	r2, #3
 8009e80:	4013      	ands	r3, r2
 8009e82:	2b01      	cmp	r3, #1
 8009e84:	d108      	bne.n	8009e98 <HAL_ADC_Init+0x90>
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	2201      	movs	r2, #1
 8009e8e:	4013      	ands	r3, r2
 8009e90:	2b01      	cmp	r3, #1
 8009e92:	d101      	bne.n	8009e98 <HAL_ADC_Init+0x90>
 8009e94:	2301      	movs	r3, #1
 8009e96:	e000      	b.n	8009e9a <HAL_ADC_Init+0x92>
 8009e98:	2300      	movs	r3, #0
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d149      	bne.n	8009f32 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	685a      	ldr	r2, [r3, #4]
 8009ea2:	23c0      	movs	r3, #192	@ 0xc0
 8009ea4:	061b      	lsls	r3, r3, #24
 8009ea6:	429a      	cmp	r2, r3
 8009ea8:	d00b      	beq.n	8009ec2 <HAL_ADC_Init+0xba>
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	685a      	ldr	r2, [r3, #4]
 8009eae:	2380      	movs	r3, #128	@ 0x80
 8009eb0:	05db      	lsls	r3, r3, #23
 8009eb2:	429a      	cmp	r2, r3
 8009eb4:	d005      	beq.n	8009ec2 <HAL_ADC_Init+0xba>
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	685a      	ldr	r2, [r3, #4]
 8009eba:	2380      	movs	r3, #128	@ 0x80
 8009ebc:	061b      	lsls	r3, r3, #24
 8009ebe:	429a      	cmp	r2, r3
 8009ec0:	d111      	bne.n	8009ee6 <HAL_ADC_Init+0xde>
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	691a      	ldr	r2, [r3, #16]
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	0092      	lsls	r2, r2, #2
 8009ece:	0892      	lsrs	r2, r2, #2
 8009ed0:	611a      	str	r2, [r3, #16]
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	6919      	ldr	r1, [r3, #16]
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	685a      	ldr	r2, [r3, #4]
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	430a      	orrs	r2, r1
 8009ee2:	611a      	str	r2, [r3, #16]
 8009ee4:	e014      	b.n	8009f10 <HAL_ADC_Init+0x108>
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	691a      	ldr	r2, [r3, #16]
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	0092      	lsls	r2, r2, #2
 8009ef2:	0892      	lsrs	r2, r2, #2
 8009ef4:	611a      	str	r2, [r3, #16]
 8009ef6:	4b79      	ldr	r3, [pc, #484]	@ (800a0dc <HAL_ADC_Init+0x2d4>)
 8009ef8:	681a      	ldr	r2, [r3, #0]
 8009efa:	4b78      	ldr	r3, [pc, #480]	@ (800a0dc <HAL_ADC_Init+0x2d4>)
 8009efc:	4978      	ldr	r1, [pc, #480]	@ (800a0e0 <HAL_ADC_Init+0x2d8>)
 8009efe:	400a      	ands	r2, r1
 8009f00:	601a      	str	r2, [r3, #0]
 8009f02:	4b76      	ldr	r3, [pc, #472]	@ (800a0dc <HAL_ADC_Init+0x2d4>)
 8009f04:	6819      	ldr	r1, [r3, #0]
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	685a      	ldr	r2, [r3, #4]
 8009f0a:	4b74      	ldr	r3, [pc, #464]	@ (800a0dc <HAL_ADC_Init+0x2d4>)
 8009f0c:	430a      	orrs	r2, r1
 8009f0e:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	68da      	ldr	r2, [r3, #12]
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	2118      	movs	r1, #24
 8009f1c:	438a      	bics	r2, r1
 8009f1e:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	68d9      	ldr	r1, [r3, #12]
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	689a      	ldr	r2, [r3, #8]
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	430a      	orrs	r2, r1
 8009f30:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8009f32:	4b6a      	ldr	r3, [pc, #424]	@ (800a0dc <HAL_ADC_Init+0x2d4>)
 8009f34:	681a      	ldr	r2, [r3, #0]
 8009f36:	4b69      	ldr	r3, [pc, #420]	@ (800a0dc <HAL_ADC_Init+0x2d4>)
 8009f38:	496a      	ldr	r1, [pc, #424]	@ (800a0e4 <HAL_ADC_Init+0x2dc>)
 8009f3a:	400a      	ands	r2, r1
 8009f3c:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 8009f3e:	4b67      	ldr	r3, [pc, #412]	@ (800a0dc <HAL_ADC_Init+0x2d4>)
 8009f40:	6819      	ldr	r1, [r3, #0]
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f46:	065a      	lsls	r2, r3, #25
 8009f48:	4b64      	ldr	r3, [pc, #400]	@ (800a0dc <HAL_ADC_Init+0x2d4>)
 8009f4a:	430a      	orrs	r2, r1
 8009f4c:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	689a      	ldr	r2, [r3, #8]
 8009f54:	2380      	movs	r3, #128	@ 0x80
 8009f56:	055b      	lsls	r3, r3, #21
 8009f58:	4013      	ands	r3, r2
 8009f5a:	d108      	bne.n	8009f6e <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	689a      	ldr	r2, [r3, #8]
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	2180      	movs	r1, #128	@ 0x80
 8009f68:	0549      	lsls	r1, r1, #21
 8009f6a:	430a      	orrs	r2, r1
 8009f6c:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	68da      	ldr	r2, [r3, #12]
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	495b      	ldr	r1, [pc, #364]	@ (800a0e8 <HAL_ADC_Init+0x2e0>)
 8009f7a:	400a      	ands	r2, r1
 8009f7c:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	68d9      	ldr	r1, [r3, #12]
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	691b      	ldr	r3, [r3, #16]
 8009f8c:	2b02      	cmp	r3, #2
 8009f8e:	d101      	bne.n	8009f94 <HAL_ADC_Init+0x18c>
 8009f90:	2304      	movs	r3, #4
 8009f92:	e000      	b.n	8009f96 <HAL_ADC_Init+0x18e>
 8009f94:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8009f96:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	2020      	movs	r0, #32
 8009f9c:	5c1b      	ldrb	r3, [r3, r0]
 8009f9e:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8009fa0:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	202c      	movs	r0, #44	@ 0x2c
 8009fa6:	5c1b      	ldrb	r3, [r3, r0]
 8009fa8:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8009faa:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8009fb0:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	699b      	ldr	r3, [r3, #24]
 8009fb6:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8009fb8:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	69db      	ldr	r3, [r3, #28]
 8009fbe:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8009fc0:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	430a      	orrs	r2, r1
 8009fc8:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009fce:	23c2      	movs	r3, #194	@ 0xc2
 8009fd0:	33ff      	adds	r3, #255	@ 0xff
 8009fd2:	429a      	cmp	r2, r3
 8009fd4:	d00b      	beq.n	8009fee <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	68d9      	ldr	r1, [r3, #12]
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8009fe4:	431a      	orrs	r2, r3
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	430a      	orrs	r2, r1
 8009fec:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	2221      	movs	r2, #33	@ 0x21
 8009ff2:	5c9b      	ldrb	r3, [r3, r2]
 8009ff4:	2b01      	cmp	r3, #1
 8009ff6:	d11a      	bne.n	800a02e <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	2220      	movs	r2, #32
 8009ffc:	5c9b      	ldrb	r3, [r3, r2]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d109      	bne.n	800a016 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	68da      	ldr	r2, [r3, #12]
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	2180      	movs	r1, #128	@ 0x80
 800a00e:	0249      	lsls	r1, r1, #9
 800a010:	430a      	orrs	r2, r1
 800a012:	60da      	str	r2, [r3, #12]
 800a014:	e00b      	b.n	800a02e <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a01a:	2220      	movs	r2, #32
 800a01c:	431a      	orrs	r2, r3
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a026:	2201      	movs	r2, #1
 800a028:	431a      	orrs	r2, r3
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a032:	2b01      	cmp	r3, #1
 800a034:	d11f      	bne.n	800a076 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	691a      	ldr	r2, [r3, #16]
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	492a      	ldr	r1, [pc, #168]	@ (800a0ec <HAL_ADC_Init+0x2e4>)
 800a042:	400a      	ands	r2, r1
 800a044:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	6919      	ldr	r1, [r3, #16]
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                              hadc->Init.Oversample.RightBitShift             |
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800a054:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                              hadc->Init.Oversample.RightBitShift             |
 800a05a:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	430a      	orrs	r2, r1
 800a062:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	691a      	ldr	r2, [r3, #16]
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	2101      	movs	r1, #1
 800a070:	430a      	orrs	r2, r1
 800a072:	611a      	str	r2, [r3, #16]
 800a074:	e00e      	b.n	800a094 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	691b      	ldr	r3, [r3, #16]
 800a07c:	2201      	movs	r2, #1
 800a07e:	4013      	ands	r3, r2
 800a080:	2b01      	cmp	r3, #1
 800a082:	d107      	bne.n	800a094 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	691a      	ldr	r2, [r3, #16]
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	2101      	movs	r1, #1
 800a090:	438a      	bics	r2, r1
 800a092:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	695a      	ldr	r2, [r3, #20]
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	2107      	movs	r1, #7
 800a0a0:	438a      	bics	r2, r1
 800a0a2:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	6959      	ldr	r1, [r3, #20]
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	430a      	orrs	r2, r1
 800a0b4:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	2200      	movs	r2, #0
 800a0ba:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a0c0:	2203      	movs	r2, #3
 800a0c2:	4393      	bics	r3, r2
 800a0c4:	2201      	movs	r2, #1
 800a0c6:	431a      	orrs	r2, r3
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 800a0cc:	2300      	movs	r3, #0
}
 800a0ce:	0018      	movs	r0, r3
 800a0d0:	46bd      	mov	sp, r7
 800a0d2:	b002      	add	sp, #8
 800a0d4:	bd80      	pop	{r7, pc}
 800a0d6:	46c0      	nop			@ (mov r8, r8)
 800a0d8:	fffffefd 	.word	0xfffffefd
 800a0dc:	40012708 	.word	0x40012708
 800a0e0:	ffc3ffff 	.word	0xffc3ffff
 800a0e4:	fdffffff 	.word	0xfdffffff
 800a0e8:	fffe0219 	.word	0xfffe0219
 800a0ec:	fffffc03 	.word	0xfffffc03

0800a0f0 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800a0f0:	b590      	push	{r4, r7, lr}
 800a0f2:	b085      	sub	sp, #20
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800a0f8:	230f      	movs	r3, #15
 800a0fa:	18fb      	adds	r3, r7, r3
 800a0fc:	2200      	movs	r2, #0
 800a0fe:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	689b      	ldr	r3, [r3, #8]
 800a106:	2204      	movs	r2, #4
 800a108:	4013      	ands	r3, r2
 800a10a:	d138      	bne.n	800a17e <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	2250      	movs	r2, #80	@ 0x50
 800a110:	5c9b      	ldrb	r3, [r3, r2]
 800a112:	2b01      	cmp	r3, #1
 800a114:	d101      	bne.n	800a11a <HAL_ADC_Start+0x2a>
 800a116:	2302      	movs	r3, #2
 800a118:	e038      	b.n	800a18c <HAL_ADC_Start+0x9c>
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	2250      	movs	r2, #80	@ 0x50
 800a11e:	2101      	movs	r1, #1
 800a120:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	69db      	ldr	r3, [r3, #28]
 800a126:	2b01      	cmp	r3, #1
 800a128:	d007      	beq.n	800a13a <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800a12a:	230f      	movs	r3, #15
 800a12c:	18fc      	adds	r4, r7, r3
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	0018      	movs	r0, r3
 800a132:	f000 f95f 	bl	800a3f4 <ADC_Enable>
 800a136:	0003      	movs	r3, r0
 800a138:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800a13a:	230f      	movs	r3, #15
 800a13c:	18fb      	adds	r3, r7, r3
 800a13e:	781b      	ldrb	r3, [r3, #0]
 800a140:	2b00      	cmp	r3, #0
 800a142:	d120      	bne.n	800a186 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a148:	4a12      	ldr	r2, [pc, #72]	@ (800a194 <HAL_ADC_Start+0xa4>)
 800a14a:	4013      	ands	r3, r2
 800a14c:	2280      	movs	r2, #128	@ 0x80
 800a14e:	0052      	lsls	r2, r2, #1
 800a150:	431a      	orrs	r2, r3
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	2200      	movs	r2, #0
 800a15a:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	2250      	movs	r2, #80	@ 0x50
 800a160:	2100      	movs	r1, #0
 800a162:	5499      	strb	r1, [r3, r2]

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	221c      	movs	r2, #28
 800a16a:	601a      	str	r2, [r3, #0]

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	689a      	ldr	r2, [r3, #8]
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	2104      	movs	r1, #4
 800a178:	430a      	orrs	r2, r1
 800a17a:	609a      	str	r2, [r3, #8]
 800a17c:	e003      	b.n	800a186 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800a17e:	230f      	movs	r3, #15
 800a180:	18fb      	adds	r3, r7, r3
 800a182:	2202      	movs	r2, #2
 800a184:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 800a186:	230f      	movs	r3, #15
 800a188:	18fb      	adds	r3, r7, r3
 800a18a:	781b      	ldrb	r3, [r3, #0]
}
 800a18c:	0018      	movs	r0, r3
 800a18e:	46bd      	mov	sp, r7
 800a190:	b005      	add	sp, #20
 800a192:	bd90      	pop	{r4, r7, pc}
 800a194:	fffff0fe 	.word	0xfffff0fe

0800a198 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800a198:	b580      	push	{r7, lr}
 800a19a:	b084      	sub	sp, #16
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	6078      	str	r0, [r7, #4]
 800a1a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800a1a2:	2300      	movs	r3, #0
 800a1a4:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	695b      	ldr	r3, [r3, #20]
 800a1ae:	2b08      	cmp	r3, #8
 800a1b0:	d102      	bne.n	800a1b8 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800a1b2:	2308      	movs	r3, #8
 800a1b4:	60fb      	str	r3, [r7, #12]
 800a1b6:	e014      	b.n	800a1e2 <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	68db      	ldr	r3, [r3, #12]
 800a1be:	2201      	movs	r2, #1
 800a1c0:	4013      	ands	r3, r2
 800a1c2:	2b01      	cmp	r3, #1
 800a1c4:	d10b      	bne.n	800a1de <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a1ca:	2220      	movs	r2, #32
 800a1cc:	431a      	orrs	r2, r3
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	2250      	movs	r2, #80	@ 0x50
 800a1d6:	2100      	movs	r1, #0
 800a1d8:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800a1da:	2301      	movs	r3, #1
 800a1dc:	e072      	b.n	800a2c4 <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800a1de:	230c      	movs	r3, #12
 800a1e0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800a1e2:	f7ff fdc5 	bl	8009d70 <HAL_GetTick>
 800a1e6:	0003      	movs	r3, r0
 800a1e8:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800a1ea:	e01f      	b.n	800a22c <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800a1ec:	683b      	ldr	r3, [r7, #0]
 800a1ee:	3301      	adds	r3, #1
 800a1f0:	d01c      	beq.n	800a22c <HAL_ADC_PollForConversion+0x94>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800a1f2:	683b      	ldr	r3, [r7, #0]
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d007      	beq.n	800a208 <HAL_ADC_PollForConversion+0x70>
 800a1f8:	f7ff fdba 	bl	8009d70 <HAL_GetTick>
 800a1fc:	0002      	movs	r2, r0
 800a1fe:	68bb      	ldr	r3, [r7, #8]
 800a200:	1ad3      	subs	r3, r2, r3
 800a202:	683a      	ldr	r2, [r7, #0]
 800a204:	429a      	cmp	r2, r3
 800a206:	d211      	bcs.n	800a22c <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	68fa      	ldr	r2, [r7, #12]
 800a210:	4013      	ands	r3, r2
 800a212:	d10b      	bne.n	800a22c <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a218:	2204      	movs	r2, #4
 800a21a:	431a      	orrs	r2, r3
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	2250      	movs	r2, #80	@ 0x50
 800a224:	2100      	movs	r1, #0
 800a226:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800a228:	2303      	movs	r3, #3
 800a22a:	e04b      	b.n	800a2c4 <HAL_ADC_PollForConversion+0x12c>
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	68fa      	ldr	r2, [r7, #12]
 800a234:	4013      	ands	r3, r2
 800a236:	d0d9      	beq.n	800a1ec <HAL_ADC_PollForConversion+0x54>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a23c:	2280      	movs	r2, #128	@ 0x80
 800a23e:	0092      	lsls	r2, r2, #2
 800a240:	431a      	orrs	r2, r3
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	68da      	ldr	r2, [r3, #12]
 800a24c:	23c0      	movs	r3, #192	@ 0xc0
 800a24e:	011b      	lsls	r3, r3, #4
 800a250:	4013      	ands	r3, r2
 800a252:	d12e      	bne.n	800a2b2 <HAL_ADC_PollForConversion+0x11a>
      (hadc->Init.ContinuousConvMode == DISABLE))
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	2220      	movs	r2, #32
 800a258:	5c9b      	ldrb	r3, [r3, r2]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d129      	bne.n	800a2b2 <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	2208      	movs	r2, #8
 800a266:	4013      	ands	r3, r2
 800a268:	2b08      	cmp	r3, #8
 800a26a:	d122      	bne.n	800a2b2 <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	689b      	ldr	r3, [r3, #8]
 800a272:	2204      	movs	r2, #4
 800a274:	4013      	ands	r3, r2
 800a276:	d110      	bne.n	800a29a <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	685a      	ldr	r2, [r3, #4]
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	210c      	movs	r1, #12
 800a284:	438a      	bics	r2, r1
 800a286:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a28c:	4a0f      	ldr	r2, [pc, #60]	@ (800a2cc <HAL_ADC_PollForConversion+0x134>)
 800a28e:	4013      	ands	r3, r2
 800a290:	2201      	movs	r2, #1
 800a292:	431a      	orrs	r2, r3
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	655a      	str	r2, [r3, #84]	@ 0x54
 800a298:	e00b      	b.n	800a2b2 <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a29e:	2220      	movs	r2, #32
 800a2a0:	431a      	orrs	r2, r3
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a2aa:	2201      	movs	r2, #1
 800a2ac:	431a      	orrs	r2, r3
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	699b      	ldr	r3, [r3, #24]
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d103      	bne.n	800a2c2 <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	220c      	movs	r2, #12
 800a2c0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a2c2:	2300      	movs	r3, #0
}
 800a2c4:	0018      	movs	r0, r3
 800a2c6:	46bd      	mov	sp, r7
 800a2c8:	b004      	add	sp, #16
 800a2ca:	bd80      	pop	{r7, pc}
 800a2cc:	fffffefe 	.word	0xfffffefe

0800a2d0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800a2d0:	b580      	push	{r7, lr}
 800a2d2:	b082      	sub	sp, #8
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800a2de:	0018      	movs	r0, r3
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	b002      	add	sp, #8
 800a2e4:	bd80      	pop	{r7, pc}
	...

0800a2e8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800a2e8:	b580      	push	{r7, lr}
 800a2ea:	b082      	sub	sp, #8
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	6078      	str	r0, [r7, #4]
 800a2f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	2250      	movs	r2, #80	@ 0x50
 800a2f6:	5c9b      	ldrb	r3, [r3, r2]
 800a2f8:	2b01      	cmp	r3, #1
 800a2fa:	d101      	bne.n	800a300 <HAL_ADC_ConfigChannel+0x18>
 800a2fc:	2302      	movs	r3, #2
 800a2fe:	e06c      	b.n	800a3da <HAL_ADC_ConfigChannel+0xf2>
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	2250      	movs	r2, #80	@ 0x50
 800a304:	2101      	movs	r1, #1
 800a306:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	689b      	ldr	r3, [r3, #8]
 800a30e:	2204      	movs	r2, #4
 800a310:	4013      	ands	r3, r2
 800a312:	d00b      	beq.n	800a32c <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a318:	2220      	movs	r2, #32
 800a31a:	431a      	orrs	r2, r3
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	2250      	movs	r2, #80	@ 0x50
 800a324:	2100      	movs	r1, #0
 800a326:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800a328:	2301      	movs	r3, #1
 800a32a:	e056      	b.n	800a3da <HAL_ADC_ConfigChannel+0xf2>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 800a32c:	683b      	ldr	r3, [r7, #0]
 800a32e:	685b      	ldr	r3, [r3, #4]
 800a330:	4a2c      	ldr	r2, [pc, #176]	@ (800a3e4 <HAL_ADC_ConfigChannel+0xfc>)
 800a332:	4293      	cmp	r3, r2
 800a334:	d028      	beq.n	800a388 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800a33c:	683b      	ldr	r3, [r7, #0]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	035b      	lsls	r3, r3, #13
 800a342:	0b5a      	lsrs	r2, r3, #13
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	430a      	orrs	r2, r1
 800a34a:	629a      	str	r2, [r3, #40]	@ 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800a34c:	683b      	ldr	r3, [r7, #0]
 800a34e:	681a      	ldr	r2, [r3, #0]
 800a350:	2380      	movs	r3, #128	@ 0x80
 800a352:	02db      	lsls	r3, r3, #11
 800a354:	4013      	ands	r3, r2
 800a356:	d009      	beq.n	800a36c <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 800a358:	4b23      	ldr	r3, [pc, #140]	@ (800a3e8 <HAL_ADC_ConfigChannel+0x100>)
 800a35a:	681a      	ldr	r2, [r3, #0]
 800a35c:	4b22      	ldr	r3, [pc, #136]	@ (800a3e8 <HAL_ADC_ConfigChannel+0x100>)
 800a35e:	2180      	movs	r1, #128	@ 0x80
 800a360:	0409      	lsls	r1, r1, #16
 800a362:	430a      	orrs	r2, r1
 800a364:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 800a366:	200a      	movs	r0, #10
 800a368:	f000 f8ac 	bl	800a4c4 <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800a36c:	683b      	ldr	r3, [r7, #0]
 800a36e:	681a      	ldr	r2, [r3, #0]
 800a370:	2380      	movs	r3, #128	@ 0x80
 800a372:	029b      	lsls	r3, r3, #10
 800a374:	4013      	ands	r3, r2
 800a376:	d02b      	beq.n	800a3d0 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 800a378:	4b1b      	ldr	r3, [pc, #108]	@ (800a3e8 <HAL_ADC_ConfigChannel+0x100>)
 800a37a:	681a      	ldr	r2, [r3, #0]
 800a37c:	4b1a      	ldr	r3, [pc, #104]	@ (800a3e8 <HAL_ADC_ConfigChannel+0x100>)
 800a37e:	2180      	movs	r1, #128	@ 0x80
 800a380:	03c9      	lsls	r1, r1, #15
 800a382:	430a      	orrs	r2, r1
 800a384:	601a      	str	r2, [r3, #0]
 800a386:	e023      	b.n	800a3d0 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a38e:	683b      	ldr	r3, [r7, #0]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	035b      	lsls	r3, r3, #13
 800a394:	0b5b      	lsrs	r3, r3, #13
 800a396:	43d9      	mvns	r1, r3
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	400a      	ands	r2, r1
 800a39e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800a3a0:	683b      	ldr	r3, [r7, #0]
 800a3a2:	681a      	ldr	r2, [r3, #0]
 800a3a4:	2380      	movs	r3, #128	@ 0x80
 800a3a6:	02db      	lsls	r3, r3, #11
 800a3a8:	4013      	ands	r3, r2
 800a3aa:	d005      	beq.n	800a3b8 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 800a3ac:	4b0e      	ldr	r3, [pc, #56]	@ (800a3e8 <HAL_ADC_ConfigChannel+0x100>)
 800a3ae:	681a      	ldr	r2, [r3, #0]
 800a3b0:	4b0d      	ldr	r3, [pc, #52]	@ (800a3e8 <HAL_ADC_ConfigChannel+0x100>)
 800a3b2:	490e      	ldr	r1, [pc, #56]	@ (800a3ec <HAL_ADC_ConfigChannel+0x104>)
 800a3b4:	400a      	ands	r2, r1
 800a3b6:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800a3b8:	683b      	ldr	r3, [r7, #0]
 800a3ba:	681a      	ldr	r2, [r3, #0]
 800a3bc:	2380      	movs	r3, #128	@ 0x80
 800a3be:	029b      	lsls	r3, r3, #10
 800a3c0:	4013      	ands	r3, r2
 800a3c2:	d005      	beq.n	800a3d0 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 800a3c4:	4b08      	ldr	r3, [pc, #32]	@ (800a3e8 <HAL_ADC_ConfigChannel+0x100>)
 800a3c6:	681a      	ldr	r2, [r3, #0]
 800a3c8:	4b07      	ldr	r3, [pc, #28]	@ (800a3e8 <HAL_ADC_ConfigChannel+0x100>)
 800a3ca:	4909      	ldr	r1, [pc, #36]	@ (800a3f0 <HAL_ADC_ConfigChannel+0x108>)
 800a3cc:	400a      	ands	r2, r1
 800a3ce:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	2250      	movs	r2, #80	@ 0x50
 800a3d4:	2100      	movs	r1, #0
 800a3d6:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800a3d8:	2300      	movs	r3, #0
}
 800a3da:	0018      	movs	r0, r3
 800a3dc:	46bd      	mov	sp, r7
 800a3de:	b002      	add	sp, #8
 800a3e0:	bd80      	pop	{r7, pc}
 800a3e2:	46c0      	nop			@ (mov r8, r8)
 800a3e4:	00001001 	.word	0x00001001
 800a3e8:	40012708 	.word	0x40012708
 800a3ec:	ff7fffff 	.word	0xff7fffff
 800a3f0:	ffbfffff 	.word	0xffbfffff

0800a3f4 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800a3f4:	b580      	push	{r7, lr}
 800a3f6:	b084      	sub	sp, #16
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a3fc:	2300      	movs	r3, #0
 800a3fe:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	689b      	ldr	r3, [r3, #8]
 800a406:	2203      	movs	r2, #3
 800a408:	4013      	ands	r3, r2
 800a40a:	2b01      	cmp	r3, #1
 800a40c:	d108      	bne.n	800a420 <ADC_Enable+0x2c>
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	2201      	movs	r2, #1
 800a416:	4013      	ands	r3, r2
 800a418:	2b01      	cmp	r3, #1
 800a41a:	d101      	bne.n	800a420 <ADC_Enable+0x2c>
 800a41c:	2301      	movs	r3, #1
 800a41e:	e000      	b.n	800a422 <ADC_Enable+0x2e>
 800a420:	2300      	movs	r3, #0
 800a422:	2b00      	cmp	r3, #0
 800a424:	d146      	bne.n	800a4b4 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	689b      	ldr	r3, [r3, #8]
 800a42c:	4a24      	ldr	r2, [pc, #144]	@ (800a4c0 <ADC_Enable+0xcc>)
 800a42e:	4013      	ands	r3, r2
 800a430:	d00d      	beq.n	800a44e <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a436:	2210      	movs	r2, #16
 800a438:	431a      	orrs	r2, r3
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a442:	2201      	movs	r2, #1
 800a444:	431a      	orrs	r2, r3
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800a44a:	2301      	movs	r3, #1
 800a44c:	e033      	b.n	800a4b6 <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	689a      	ldr	r2, [r3, #8]
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	2101      	movs	r1, #1
 800a45a:	430a      	orrs	r2, r1
 800a45c:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 800a45e:	2001      	movs	r0, #1
 800a460:	f000 f830 	bl	800a4c4 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 800a464:	f7ff fc84 	bl	8009d70 <HAL_GetTick>
 800a468:	0003      	movs	r3, r0
 800a46a:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800a46c:	e01b      	b.n	800a4a6 <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800a46e:	f7ff fc7f 	bl	8009d70 <HAL_GetTick>
 800a472:	0002      	movs	r2, r0
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	1ad3      	subs	r3, r2, r3
 800a478:	2b0a      	cmp	r3, #10
 800a47a:	d914      	bls.n	800a4a6 <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	2201      	movs	r2, #1
 800a484:	4013      	ands	r3, r2
 800a486:	2b01      	cmp	r3, #1
 800a488:	d00d      	beq.n	800a4a6 <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a48e:	2210      	movs	r2, #16
 800a490:	431a      	orrs	r2, r3
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a49a:	2201      	movs	r2, #1
 800a49c:	431a      	orrs	r2, r3
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800a4a2:	2301      	movs	r3, #1
 800a4a4:	e007      	b.n	800a4b6 <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	2201      	movs	r2, #1
 800a4ae:	4013      	ands	r3, r2
 800a4b0:	2b01      	cmp	r3, #1
 800a4b2:	d1dc      	bne.n	800a46e <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800a4b4:	2300      	movs	r3, #0
}
 800a4b6:	0018      	movs	r0, r3
 800a4b8:	46bd      	mov	sp, r7
 800a4ba:	b004      	add	sp, #16
 800a4bc:	bd80      	pop	{r7, pc}
 800a4be:	46c0      	nop			@ (mov r8, r8)
 800a4c0:	80000017 	.word	0x80000017

0800a4c4 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 800a4c4:	b580      	push	{r7, lr}
 800a4c6:	b084      	sub	sp, #16
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 800a4cc:	4b0b      	ldr	r3, [pc, #44]	@ (800a4fc <ADC_DelayMicroSecond+0x38>)
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	490b      	ldr	r1, [pc, #44]	@ (800a500 <ADC_DelayMicroSecond+0x3c>)
 800a4d2:	0018      	movs	r0, r3
 800a4d4:	f7f5 fe34 	bl	8000140 <__udivsi3>
 800a4d8:	0003      	movs	r3, r0
 800a4da:	001a      	movs	r2, r3
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	4353      	muls	r3, r2
 800a4e0:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 800a4e2:	e002      	b.n	800a4ea <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	3b01      	subs	r3, #1
 800a4e8:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d1f9      	bne.n	800a4e4 <ADC_DelayMicroSecond+0x20>
  }
}
 800a4f0:	46c0      	nop			@ (mov r8, r8)
 800a4f2:	46c0      	nop			@ (mov r8, r8)
 800a4f4:	46bd      	mov	sp, r7
 800a4f6:	b004      	add	sp, #16
 800a4f8:	bd80      	pop	{r7, pc}
 800a4fa:	46c0      	nop			@ (mov r8, r8)
 800a4fc:	200000a4 	.word	0x200000a4
 800a500:	000f4240 	.word	0x000f4240

0800a504 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a504:	b580      	push	{r7, lr}
 800a506:	b082      	sub	sp, #8
 800a508:	af00      	add	r7, sp, #0
 800a50a:	0002      	movs	r2, r0
 800a50c:	1dfb      	adds	r3, r7, #7
 800a50e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800a510:	1dfb      	adds	r3, r7, #7
 800a512:	781b      	ldrb	r3, [r3, #0]
 800a514:	2b7f      	cmp	r3, #127	@ 0x7f
 800a516:	d809      	bhi.n	800a52c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a518:	1dfb      	adds	r3, r7, #7
 800a51a:	781b      	ldrb	r3, [r3, #0]
 800a51c:	001a      	movs	r2, r3
 800a51e:	231f      	movs	r3, #31
 800a520:	401a      	ands	r2, r3
 800a522:	4b04      	ldr	r3, [pc, #16]	@ (800a534 <__NVIC_EnableIRQ+0x30>)
 800a524:	2101      	movs	r1, #1
 800a526:	4091      	lsls	r1, r2
 800a528:	000a      	movs	r2, r1
 800a52a:	601a      	str	r2, [r3, #0]
  }
}
 800a52c:	46c0      	nop			@ (mov r8, r8)
 800a52e:	46bd      	mov	sp, r7
 800a530:	b002      	add	sp, #8
 800a532:	bd80      	pop	{r7, pc}
 800a534:	e000e100 	.word	0xe000e100

0800a538 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800a538:	b590      	push	{r4, r7, lr}
 800a53a:	b083      	sub	sp, #12
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	0002      	movs	r2, r0
 800a540:	6039      	str	r1, [r7, #0]
 800a542:	1dfb      	adds	r3, r7, #7
 800a544:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800a546:	1dfb      	adds	r3, r7, #7
 800a548:	781b      	ldrb	r3, [r3, #0]
 800a54a:	2b7f      	cmp	r3, #127	@ 0x7f
 800a54c:	d828      	bhi.n	800a5a0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800a54e:	4a2f      	ldr	r2, [pc, #188]	@ (800a60c <__NVIC_SetPriority+0xd4>)
 800a550:	1dfb      	adds	r3, r7, #7
 800a552:	781b      	ldrb	r3, [r3, #0]
 800a554:	b25b      	sxtb	r3, r3
 800a556:	089b      	lsrs	r3, r3, #2
 800a558:	33c0      	adds	r3, #192	@ 0xc0
 800a55a:	009b      	lsls	r3, r3, #2
 800a55c:	589b      	ldr	r3, [r3, r2]
 800a55e:	1dfa      	adds	r2, r7, #7
 800a560:	7812      	ldrb	r2, [r2, #0]
 800a562:	0011      	movs	r1, r2
 800a564:	2203      	movs	r2, #3
 800a566:	400a      	ands	r2, r1
 800a568:	00d2      	lsls	r2, r2, #3
 800a56a:	21ff      	movs	r1, #255	@ 0xff
 800a56c:	4091      	lsls	r1, r2
 800a56e:	000a      	movs	r2, r1
 800a570:	43d2      	mvns	r2, r2
 800a572:	401a      	ands	r2, r3
 800a574:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800a576:	683b      	ldr	r3, [r7, #0]
 800a578:	019b      	lsls	r3, r3, #6
 800a57a:	22ff      	movs	r2, #255	@ 0xff
 800a57c:	401a      	ands	r2, r3
 800a57e:	1dfb      	adds	r3, r7, #7
 800a580:	781b      	ldrb	r3, [r3, #0]
 800a582:	0018      	movs	r0, r3
 800a584:	2303      	movs	r3, #3
 800a586:	4003      	ands	r3, r0
 800a588:	00db      	lsls	r3, r3, #3
 800a58a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800a58c:	481f      	ldr	r0, [pc, #124]	@ (800a60c <__NVIC_SetPriority+0xd4>)
 800a58e:	1dfb      	adds	r3, r7, #7
 800a590:	781b      	ldrb	r3, [r3, #0]
 800a592:	b25b      	sxtb	r3, r3
 800a594:	089b      	lsrs	r3, r3, #2
 800a596:	430a      	orrs	r2, r1
 800a598:	33c0      	adds	r3, #192	@ 0xc0
 800a59a:	009b      	lsls	r3, r3, #2
 800a59c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800a59e:	e031      	b.n	800a604 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800a5a0:	4a1b      	ldr	r2, [pc, #108]	@ (800a610 <__NVIC_SetPriority+0xd8>)
 800a5a2:	1dfb      	adds	r3, r7, #7
 800a5a4:	781b      	ldrb	r3, [r3, #0]
 800a5a6:	0019      	movs	r1, r3
 800a5a8:	230f      	movs	r3, #15
 800a5aa:	400b      	ands	r3, r1
 800a5ac:	3b08      	subs	r3, #8
 800a5ae:	089b      	lsrs	r3, r3, #2
 800a5b0:	3306      	adds	r3, #6
 800a5b2:	009b      	lsls	r3, r3, #2
 800a5b4:	18d3      	adds	r3, r2, r3
 800a5b6:	3304      	adds	r3, #4
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	1dfa      	adds	r2, r7, #7
 800a5bc:	7812      	ldrb	r2, [r2, #0]
 800a5be:	0011      	movs	r1, r2
 800a5c0:	2203      	movs	r2, #3
 800a5c2:	400a      	ands	r2, r1
 800a5c4:	00d2      	lsls	r2, r2, #3
 800a5c6:	21ff      	movs	r1, #255	@ 0xff
 800a5c8:	4091      	lsls	r1, r2
 800a5ca:	000a      	movs	r2, r1
 800a5cc:	43d2      	mvns	r2, r2
 800a5ce:	401a      	ands	r2, r3
 800a5d0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800a5d2:	683b      	ldr	r3, [r7, #0]
 800a5d4:	019b      	lsls	r3, r3, #6
 800a5d6:	22ff      	movs	r2, #255	@ 0xff
 800a5d8:	401a      	ands	r2, r3
 800a5da:	1dfb      	adds	r3, r7, #7
 800a5dc:	781b      	ldrb	r3, [r3, #0]
 800a5de:	0018      	movs	r0, r3
 800a5e0:	2303      	movs	r3, #3
 800a5e2:	4003      	ands	r3, r0
 800a5e4:	00db      	lsls	r3, r3, #3
 800a5e6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800a5e8:	4809      	ldr	r0, [pc, #36]	@ (800a610 <__NVIC_SetPriority+0xd8>)
 800a5ea:	1dfb      	adds	r3, r7, #7
 800a5ec:	781b      	ldrb	r3, [r3, #0]
 800a5ee:	001c      	movs	r4, r3
 800a5f0:	230f      	movs	r3, #15
 800a5f2:	4023      	ands	r3, r4
 800a5f4:	3b08      	subs	r3, #8
 800a5f6:	089b      	lsrs	r3, r3, #2
 800a5f8:	430a      	orrs	r2, r1
 800a5fa:	3306      	adds	r3, #6
 800a5fc:	009b      	lsls	r3, r3, #2
 800a5fe:	18c3      	adds	r3, r0, r3
 800a600:	3304      	adds	r3, #4
 800a602:	601a      	str	r2, [r3, #0]
}
 800a604:	46c0      	nop			@ (mov r8, r8)
 800a606:	46bd      	mov	sp, r7
 800a608:	b003      	add	sp, #12
 800a60a:	bd90      	pop	{r4, r7, pc}
 800a60c:	e000e100 	.word	0xe000e100
 800a610:	e000ed00 	.word	0xe000ed00

0800a614 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800a614:	b580      	push	{r7, lr}
 800a616:	b082      	sub	sp, #8
 800a618:	af00      	add	r7, sp, #0
 800a61a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	1e5a      	subs	r2, r3, #1
 800a620:	2380      	movs	r3, #128	@ 0x80
 800a622:	045b      	lsls	r3, r3, #17
 800a624:	429a      	cmp	r2, r3
 800a626:	d301      	bcc.n	800a62c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800a628:	2301      	movs	r3, #1
 800a62a:	e010      	b.n	800a64e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800a62c:	4b0a      	ldr	r3, [pc, #40]	@ (800a658 <SysTick_Config+0x44>)
 800a62e:	687a      	ldr	r2, [r7, #4]
 800a630:	3a01      	subs	r2, #1
 800a632:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800a634:	2301      	movs	r3, #1
 800a636:	425b      	negs	r3, r3
 800a638:	2103      	movs	r1, #3
 800a63a:	0018      	movs	r0, r3
 800a63c:	f7ff ff7c 	bl	800a538 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800a640:	4b05      	ldr	r3, [pc, #20]	@ (800a658 <SysTick_Config+0x44>)
 800a642:	2200      	movs	r2, #0
 800a644:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800a646:	4b04      	ldr	r3, [pc, #16]	@ (800a658 <SysTick_Config+0x44>)
 800a648:	2207      	movs	r2, #7
 800a64a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800a64c:	2300      	movs	r3, #0
}
 800a64e:	0018      	movs	r0, r3
 800a650:	46bd      	mov	sp, r7
 800a652:	b002      	add	sp, #8
 800a654:	bd80      	pop	{r7, pc}
 800a656:	46c0      	nop			@ (mov r8, r8)
 800a658:	e000e010 	.word	0xe000e010

0800a65c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800a65c:	b580      	push	{r7, lr}
 800a65e:	b084      	sub	sp, #16
 800a660:	af00      	add	r7, sp, #0
 800a662:	60b9      	str	r1, [r7, #8]
 800a664:	607a      	str	r2, [r7, #4]
 800a666:	210f      	movs	r1, #15
 800a668:	187b      	adds	r3, r7, r1
 800a66a:	1c02      	adds	r2, r0, #0
 800a66c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800a66e:	68ba      	ldr	r2, [r7, #8]
 800a670:	187b      	adds	r3, r7, r1
 800a672:	781b      	ldrb	r3, [r3, #0]
 800a674:	b25b      	sxtb	r3, r3
 800a676:	0011      	movs	r1, r2
 800a678:	0018      	movs	r0, r3
 800a67a:	f7ff ff5d 	bl	800a538 <__NVIC_SetPriority>
}
 800a67e:	46c0      	nop			@ (mov r8, r8)
 800a680:	46bd      	mov	sp, r7
 800a682:	b004      	add	sp, #16
 800a684:	bd80      	pop	{r7, pc}

0800a686 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a686:	b580      	push	{r7, lr}
 800a688:	b082      	sub	sp, #8
 800a68a:	af00      	add	r7, sp, #0
 800a68c:	0002      	movs	r2, r0
 800a68e:	1dfb      	adds	r3, r7, #7
 800a690:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a692:	1dfb      	adds	r3, r7, #7
 800a694:	781b      	ldrb	r3, [r3, #0]
 800a696:	b25b      	sxtb	r3, r3
 800a698:	0018      	movs	r0, r3
 800a69a:	f7ff ff33 	bl	800a504 <__NVIC_EnableIRQ>
}
 800a69e:	46c0      	nop			@ (mov r8, r8)
 800a6a0:	46bd      	mov	sp, r7
 800a6a2:	b002      	add	sp, #8
 800a6a4:	bd80      	pop	{r7, pc}

0800a6a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800a6a6:	b580      	push	{r7, lr}
 800a6a8:	b082      	sub	sp, #8
 800a6aa:	af00      	add	r7, sp, #0
 800a6ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	0018      	movs	r0, r3
 800a6b2:	f7ff ffaf 	bl	800a614 <SysTick_Config>
 800a6b6:	0003      	movs	r3, r0
}
 800a6b8:	0018      	movs	r0, r3
 800a6ba:	46bd      	mov	sp, r7
 800a6bc:	b002      	add	sp, #8
 800a6be:	bd80      	pop	{r7, pc}

0800a6c0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800a6c0:	b580      	push	{r7, lr}
 800a6c2:	b084      	sub	sp, #16
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d101      	bne.n	800a6d2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800a6ce:	2301      	movs	r3, #1
 800a6d0:	e061      	b.n	800a796 <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	4a32      	ldr	r2, [pc, #200]	@ (800a7a0 <HAL_DMA_Init+0xe0>)
 800a6d8:	4694      	mov	ip, r2
 800a6da:	4463      	add	r3, ip
 800a6dc:	2114      	movs	r1, #20
 800a6de:	0018      	movs	r0, r3
 800a6e0:	f7f5 fd2e 	bl	8000140 <__udivsi3>
 800a6e4:	0003      	movs	r3, r0
 800a6e6:	009a      	lsls	r2, r3, #2
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	4a2d      	ldr	r2, [pc, #180]	@ (800a7a4 <HAL_DMA_Init+0xe4>)
 800a6f0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	2225      	movs	r2, #37	@ 0x25
 800a6f6:	2102      	movs	r1, #2
 800a6f8:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	4a28      	ldr	r2, [pc, #160]	@ (800a7a8 <HAL_DMA_Init+0xe8>)
 800a706:	4013      	ands	r3, r2
 800a708:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800a712:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	691b      	ldr	r3, [r3, #16]
 800a718:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a71e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	699b      	ldr	r3, [r3, #24]
 800a724:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a72a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	6a1b      	ldr	r3, [r3, #32]
 800a730:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800a732:	68fa      	ldr	r2, [r7, #12]
 800a734:	4313      	orrs	r3, r2
 800a736:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	68fa      	ldr	r2, [r7, #12]
 800a73e:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	689a      	ldr	r2, [r3, #8]
 800a744:	2380      	movs	r3, #128	@ 0x80
 800a746:	01db      	lsls	r3, r3, #7
 800a748:	429a      	cmp	r2, r3
 800a74a:	d018      	beq.n	800a77e <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800a74c:	4b17      	ldr	r3, [pc, #92]	@ (800a7ac <HAL_DMA_Init+0xec>)
 800a74e:	681a      	ldr	r2, [r3, #0]
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a754:	211c      	movs	r1, #28
 800a756:	400b      	ands	r3, r1
 800a758:	210f      	movs	r1, #15
 800a75a:	4099      	lsls	r1, r3
 800a75c:	000b      	movs	r3, r1
 800a75e:	43d9      	mvns	r1, r3
 800a760:	4b12      	ldr	r3, [pc, #72]	@ (800a7ac <HAL_DMA_Init+0xec>)
 800a762:	400a      	ands	r2, r1
 800a764:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800a766:	4b11      	ldr	r3, [pc, #68]	@ (800a7ac <HAL_DMA_Init+0xec>)
 800a768:	6819      	ldr	r1, [r3, #0]
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	685a      	ldr	r2, [r3, #4]
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a772:	201c      	movs	r0, #28
 800a774:	4003      	ands	r3, r0
 800a776:	409a      	lsls	r2, r3
 800a778:	4b0c      	ldr	r3, [pc, #48]	@ (800a7ac <HAL_DMA_Init+0xec>)
 800a77a:	430a      	orrs	r2, r1
 800a77c:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	2200      	movs	r2, #0
 800a782:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	2225      	movs	r2, #37	@ 0x25
 800a788:	2101      	movs	r1, #1
 800a78a:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	2224      	movs	r2, #36	@ 0x24
 800a790:	2100      	movs	r1, #0
 800a792:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a794:	2300      	movs	r3, #0
}
 800a796:	0018      	movs	r0, r3
 800a798:	46bd      	mov	sp, r7
 800a79a:	b004      	add	sp, #16
 800a79c:	bd80      	pop	{r7, pc}
 800a79e:	46c0      	nop			@ (mov r8, r8)
 800a7a0:	bffdfff8 	.word	0xbffdfff8
 800a7a4:	40020000 	.word	0x40020000
 800a7a8:	ffff800f 	.word	0xffff800f
 800a7ac:	400200a8 	.word	0x400200a8

0800a7b0 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800a7b0:	b580      	push	{r7, lr}
 800a7b2:	b082      	sub	sp, #8
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma )
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d101      	bne.n	800a7c2 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800a7be:	2301      	movs	r3, #1
 800a7c0:	e04a      	b.n	800a858 <HAL_DMA_DeInit+0xa8>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	681a      	ldr	r2, [r3, #0]
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	2101      	movs	r1, #1
 800a7ce:	438a      	bics	r2, r1
 800a7d0:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	4a22      	ldr	r2, [pc, #136]	@ (800a860 <HAL_DMA_DeInit+0xb0>)
 800a7d8:	4694      	mov	ip, r2
 800a7da:	4463      	add	r3, ip
 800a7dc:	2114      	movs	r1, #20
 800a7de:	0018      	movs	r0, r3
 800a7e0:	f7f5 fcae 	bl	8000140 <__udivsi3>
 800a7e4:	0003      	movs	r3, r0
 800a7e6:	009a      	lsls	r2, r3, #2
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	4a1d      	ldr	r2, [pc, #116]	@ (800a864 <HAL_DMA_DeInit+0xb4>)
 800a7f0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	2200      	movs	r2, #0
 800a7f8:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a7fe:	221c      	movs	r2, #28
 800a800:	401a      	ands	r2, r3
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a806:	2101      	movs	r1, #1
 800a808:	4091      	lsls	r1, r2
 800a80a:	000a      	movs	r2, r1
 800a80c:	605a      	str	r2, [r3, #4]

  /* Reset DMA channel selection register */
  /* DMA1 */
  DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800a80e:	4b16      	ldr	r3, [pc, #88]	@ (800a868 <HAL_DMA_DeInit+0xb8>)
 800a810:	681a      	ldr	r2, [r3, #0]
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a816:	211c      	movs	r1, #28
 800a818:	400b      	ands	r3, r1
 800a81a:	210f      	movs	r1, #15
 800a81c:	4099      	lsls	r1, r3
 800a81e:	000b      	movs	r3, r1
 800a820:	43d9      	mvns	r1, r3
 800a822:	4b11      	ldr	r3, [pc, #68]	@ (800a868 <HAL_DMA_DeInit+0xb8>)
 800a824:	400a      	ands	r2, r1
 800a826:	601a      	str	r2, [r3, #0]

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	2200      	movs	r2, #0
 800a82c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	2200      	movs	r2, #0
 800a832:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	2200      	movs	r2, #0
 800a838:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	2200      	movs	r2, #0
 800a83e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	2200      	movs	r2, #0
 800a844:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	2225      	movs	r2, #37	@ 0x25
 800a84a:	2100      	movs	r1, #0
 800a84c:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	2224      	movs	r2, #36	@ 0x24
 800a852:	2100      	movs	r1, #0
 800a854:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a856:	2300      	movs	r3, #0
}
 800a858:	0018      	movs	r0, r3
 800a85a:	46bd      	mov	sp, r7
 800a85c:	b002      	add	sp, #8
 800a85e:	bd80      	pop	{r7, pc}
 800a860:	bffdfff8 	.word	0xbffdfff8
 800a864:	40020000 	.word	0x40020000
 800a868:	400200a8 	.word	0x400200a8

0800a86c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a86c:	b580      	push	{r7, lr}
 800a86e:	b086      	sub	sp, #24
 800a870:	af00      	add	r7, sp, #0
 800a872:	60f8      	str	r0, [r7, #12]
 800a874:	60b9      	str	r1, [r7, #8]
 800a876:	607a      	str	r2, [r7, #4]
 800a878:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a87a:	2317      	movs	r3, #23
 800a87c:	18fb      	adds	r3, r7, r3
 800a87e:	2200      	movs	r2, #0
 800a880:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	2224      	movs	r2, #36	@ 0x24
 800a886:	5c9b      	ldrb	r3, [r3, r2]
 800a888:	2b01      	cmp	r3, #1
 800a88a:	d101      	bne.n	800a890 <HAL_DMA_Start_IT+0x24>
 800a88c:	2302      	movs	r3, #2
 800a88e:	e04f      	b.n	800a930 <HAL_DMA_Start_IT+0xc4>
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	2224      	movs	r2, #36	@ 0x24
 800a894:	2101      	movs	r1, #1
 800a896:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	2225      	movs	r2, #37	@ 0x25
 800a89c:	5c9b      	ldrb	r3, [r3, r2]
 800a89e:	b2db      	uxtb	r3, r3
 800a8a0:	2b01      	cmp	r3, #1
 800a8a2:	d13a      	bne.n	800a91a <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	2225      	movs	r2, #37	@ 0x25
 800a8a8:	2102      	movs	r1, #2
 800a8aa:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	2200      	movs	r2, #0
 800a8b0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	681a      	ldr	r2, [r3, #0]
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	2101      	movs	r1, #1
 800a8be:	438a      	bics	r2, r1
 800a8c0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800a8c2:	683b      	ldr	r3, [r7, #0]
 800a8c4:	687a      	ldr	r2, [r7, #4]
 800a8c6:	68b9      	ldr	r1, [r7, #8]
 800a8c8:	68f8      	ldr	r0, [r7, #12]
 800a8ca:	f000 f976 	bl	800abba <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d008      	beq.n	800a8e8 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	681a      	ldr	r2, [r3, #0]
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	210e      	movs	r1, #14
 800a8e2:	430a      	orrs	r2, r1
 800a8e4:	601a      	str	r2, [r3, #0]
 800a8e6:	e00f      	b.n	800a908 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	681a      	ldr	r2, [r3, #0]
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	2104      	movs	r1, #4
 800a8f4:	438a      	bics	r2, r1
 800a8f6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	681a      	ldr	r2, [r3, #0]
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	210a      	movs	r1, #10
 800a904:	430a      	orrs	r2, r1
 800a906:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	681a      	ldr	r2, [r3, #0]
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	2101      	movs	r1, #1
 800a914:	430a      	orrs	r2, r1
 800a916:	601a      	str	r2, [r3, #0]
 800a918:	e007      	b.n	800a92a <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	2224      	movs	r2, #36	@ 0x24
 800a91e:	2100      	movs	r1, #0
 800a920:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 800a922:	2317      	movs	r3, #23
 800a924:	18fb      	adds	r3, r7, r3
 800a926:	2202      	movs	r2, #2
 800a928:	701a      	strb	r2, [r3, #0]
  }
  return status;
 800a92a:	2317      	movs	r3, #23
 800a92c:	18fb      	adds	r3, r7, r3
 800a92e:	781b      	ldrb	r3, [r3, #0]
}
 800a930:	0018      	movs	r0, r3
 800a932:	46bd      	mov	sp, r7
 800a934:	b006      	add	sp, #24
 800a936:	bd80      	pop	{r7, pc}

0800a938 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800a938:	b580      	push	{r7, lr}
 800a93a:	b084      	sub	sp, #16
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a940:	230f      	movs	r3, #15
 800a942:	18fb      	adds	r3, r7, r3
 800a944:	2200      	movs	r2, #0
 800a946:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	2225      	movs	r2, #37	@ 0x25
 800a94c:	5c9b      	ldrb	r3, [r3, r2]
 800a94e:	b2db      	uxtb	r3, r3
 800a950:	2b02      	cmp	r3, #2
 800a952:	d008      	beq.n	800a966 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	2204      	movs	r2, #4
 800a958:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	2224      	movs	r2, #36	@ 0x24
 800a95e:	2100      	movs	r1, #0
 800a960:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800a962:	2301      	movs	r3, #1
 800a964:	e024      	b.n	800a9b0 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	681a      	ldr	r2, [r3, #0]
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	210e      	movs	r1, #14
 800a972:	438a      	bics	r2, r1
 800a974:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	681a      	ldr	r2, [r3, #0]
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	2101      	movs	r1, #1
 800a982:	438a      	bics	r2, r1
 800a984:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a98a:	221c      	movs	r2, #28
 800a98c:	401a      	ands	r2, r3
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a992:	2101      	movs	r1, #1
 800a994:	4091      	lsls	r1, r2
 800a996:	000a      	movs	r2, r1
 800a998:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	2225      	movs	r2, #37	@ 0x25
 800a99e:	2101      	movs	r1, #1
 800a9a0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	2224      	movs	r2, #36	@ 0x24
 800a9a6:	2100      	movs	r1, #0
 800a9a8:	5499      	strb	r1, [r3, r2]

    return status;
 800a9aa:	230f      	movs	r3, #15
 800a9ac:	18fb      	adds	r3, r7, r3
 800a9ae:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a9b0:	0018      	movs	r0, r3
 800a9b2:	46bd      	mov	sp, r7
 800a9b4:	b004      	add	sp, #16
 800a9b6:	bd80      	pop	{r7, pc}

0800a9b8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800a9b8:	b580      	push	{r7, lr}
 800a9ba:	b084      	sub	sp, #16
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a9c0:	210f      	movs	r1, #15
 800a9c2:	187b      	adds	r3, r7, r1
 800a9c4:	2200      	movs	r2, #0
 800a9c6:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	2225      	movs	r2, #37	@ 0x25
 800a9cc:	5c9b      	ldrb	r3, [r3, r2]
 800a9ce:	b2db      	uxtb	r3, r3
 800a9d0:	2b02      	cmp	r3, #2
 800a9d2:	d006      	beq.n	800a9e2 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	2204      	movs	r2, #4
 800a9d8:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800a9da:	187b      	adds	r3, r7, r1
 800a9dc:	2201      	movs	r2, #1
 800a9de:	701a      	strb	r2, [r3, #0]
 800a9e0:	e02a      	b.n	800aa38 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	681a      	ldr	r2, [r3, #0]
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	210e      	movs	r1, #14
 800a9ee:	438a      	bics	r2, r1
 800a9f0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	681a      	ldr	r2, [r3, #0]
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	2101      	movs	r1, #1
 800a9fe:	438a      	bics	r2, r1
 800aa00:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aa06:	221c      	movs	r2, #28
 800aa08:	401a      	ands	r2, r3
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa0e:	2101      	movs	r1, #1
 800aa10:	4091      	lsls	r1, r2
 800aa12:	000a      	movs	r2, r1
 800aa14:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	2225      	movs	r2, #37	@ 0x25
 800aa1a:	2101      	movs	r1, #1
 800aa1c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	2224      	movs	r2, #36	@ 0x24
 800aa22:	2100      	movs	r1, #0
 800aa24:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d004      	beq.n	800aa38 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa32:	687a      	ldr	r2, [r7, #4]
 800aa34:	0010      	movs	r0, r2
 800aa36:	4798      	blx	r3
    }
  }
  return status;
 800aa38:	230f      	movs	r3, #15
 800aa3a:	18fb      	adds	r3, r7, r3
 800aa3c:	781b      	ldrb	r3, [r3, #0]
}
 800aa3e:	0018      	movs	r0, r3
 800aa40:	46bd      	mov	sp, r7
 800aa42:	b004      	add	sp, #16
 800aa44:	bd80      	pop	{r7, pc}

0800aa46 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800aa46:	b580      	push	{r7, lr}
 800aa48:	b084      	sub	sp, #16
 800aa4a:	af00      	add	r7, sp, #0
 800aa4c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aa62:	221c      	movs	r2, #28
 800aa64:	4013      	ands	r3, r2
 800aa66:	2204      	movs	r2, #4
 800aa68:	409a      	lsls	r2, r3
 800aa6a:	0013      	movs	r3, r2
 800aa6c:	68fa      	ldr	r2, [r7, #12]
 800aa6e:	4013      	ands	r3, r2
 800aa70:	d026      	beq.n	800aac0 <HAL_DMA_IRQHandler+0x7a>
 800aa72:	68bb      	ldr	r3, [r7, #8]
 800aa74:	2204      	movs	r2, #4
 800aa76:	4013      	ands	r3, r2
 800aa78:	d022      	beq.n	800aac0 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	2220      	movs	r2, #32
 800aa82:	4013      	ands	r3, r2
 800aa84:	d107      	bne.n	800aa96 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	681a      	ldr	r2, [r3, #0]
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	2104      	movs	r1, #4
 800aa92:	438a      	bics	r2, r1
 800aa94:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aa9a:	221c      	movs	r2, #28
 800aa9c:	401a      	ands	r2, r3
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aaa2:	2104      	movs	r1, #4
 800aaa4:	4091      	lsls	r1, r2
 800aaa6:	000a      	movs	r2, r1
 800aaa8:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d100      	bne.n	800aab4 <HAL_DMA_IRQHandler+0x6e>
 800aab2:	e071      	b.n	800ab98 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aab8:	687a      	ldr	r2, [r7, #4]
 800aaba:	0010      	movs	r0, r2
 800aabc:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 800aabe:	e06b      	b.n	800ab98 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aac4:	221c      	movs	r2, #28
 800aac6:	4013      	ands	r3, r2
 800aac8:	2202      	movs	r2, #2
 800aaca:	409a      	lsls	r2, r3
 800aacc:	0013      	movs	r3, r2
 800aace:	68fa      	ldr	r2, [r7, #12]
 800aad0:	4013      	ands	r3, r2
 800aad2:	d02d      	beq.n	800ab30 <HAL_DMA_IRQHandler+0xea>
 800aad4:	68bb      	ldr	r3, [r7, #8]
 800aad6:	2202      	movs	r2, #2
 800aad8:	4013      	ands	r3, r2
 800aada:	d029      	beq.n	800ab30 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	2220      	movs	r2, #32
 800aae4:	4013      	ands	r3, r2
 800aae6:	d10b      	bne.n	800ab00 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	681a      	ldr	r2, [r3, #0]
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	210a      	movs	r1, #10
 800aaf4:	438a      	bics	r2, r1
 800aaf6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	2225      	movs	r2, #37	@ 0x25
 800aafc:	2101      	movs	r1, #1
 800aafe:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ab04:	221c      	movs	r2, #28
 800ab06:	401a      	ands	r2, r3
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab0c:	2102      	movs	r1, #2
 800ab0e:	4091      	lsls	r1, r2
 800ab10:	000a      	movs	r2, r1
 800ab12:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	2224      	movs	r2, #36	@ 0x24
 800ab18:	2100      	movs	r1, #0
 800ab1a:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d039      	beq.n	800ab98 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab28:	687a      	ldr	r2, [r7, #4]
 800ab2a:	0010      	movs	r0, r2
 800ab2c:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800ab2e:	e033      	b.n	800ab98 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ab34:	221c      	movs	r2, #28
 800ab36:	4013      	ands	r3, r2
 800ab38:	2208      	movs	r2, #8
 800ab3a:	409a      	lsls	r2, r3
 800ab3c:	0013      	movs	r3, r2
 800ab3e:	68fa      	ldr	r2, [r7, #12]
 800ab40:	4013      	ands	r3, r2
 800ab42:	d02a      	beq.n	800ab9a <HAL_DMA_IRQHandler+0x154>
 800ab44:	68bb      	ldr	r3, [r7, #8]
 800ab46:	2208      	movs	r2, #8
 800ab48:	4013      	ands	r3, r2
 800ab4a:	d026      	beq.n	800ab9a <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	681a      	ldr	r2, [r3, #0]
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	210e      	movs	r1, #14
 800ab58:	438a      	bics	r2, r1
 800ab5a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ab60:	221c      	movs	r2, #28
 800ab62:	401a      	ands	r2, r3
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab68:	2101      	movs	r1, #1
 800ab6a:	4091      	lsls	r1, r2
 800ab6c:	000a      	movs	r2, r1
 800ab6e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	2201      	movs	r2, #1
 800ab74:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	2225      	movs	r2, #37	@ 0x25
 800ab7a:	2101      	movs	r1, #1
 800ab7c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	2224      	movs	r2, #36	@ 0x24
 800ab82:	2100      	movs	r1, #0
 800ab84:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d005      	beq.n	800ab9a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ab92:	687a      	ldr	r2, [r7, #4]
 800ab94:	0010      	movs	r0, r2
 800ab96:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800ab98:	46c0      	nop			@ (mov r8, r8)
 800ab9a:	46c0      	nop			@ (mov r8, r8)
}
 800ab9c:	46bd      	mov	sp, r7
 800ab9e:	b004      	add	sp, #16
 800aba0:	bd80      	pop	{r7, pc}

0800aba2 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800aba2:	b580      	push	{r7, lr}
 800aba4:	b082      	sub	sp, #8
 800aba6:	af00      	add	r7, sp, #0
 800aba8:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	2225      	movs	r2, #37	@ 0x25
 800abae:	5c9b      	ldrb	r3, [r3, r2]
 800abb0:	b2db      	uxtb	r3, r3
}
 800abb2:	0018      	movs	r0, r3
 800abb4:	46bd      	mov	sp, r7
 800abb6:	b002      	add	sp, #8
 800abb8:	bd80      	pop	{r7, pc}

0800abba <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800abba:	b580      	push	{r7, lr}
 800abbc:	b084      	sub	sp, #16
 800abbe:	af00      	add	r7, sp, #0
 800abc0:	60f8      	str	r0, [r7, #12]
 800abc2:	60b9      	str	r1, [r7, #8]
 800abc4:	607a      	str	r2, [r7, #4]
 800abc6:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800abcc:	221c      	movs	r2, #28
 800abce:	401a      	ands	r2, r3
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800abd4:	2101      	movs	r1, #1
 800abd6:	4091      	lsls	r1, r2
 800abd8:	000a      	movs	r2, r1
 800abda:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	683a      	ldr	r2, [r7, #0]
 800abe2:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	689b      	ldr	r3, [r3, #8]
 800abe8:	2b10      	cmp	r3, #16
 800abea:	d108      	bne.n	800abfe <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	687a      	ldr	r2, [r7, #4]
 800abf2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	68ba      	ldr	r2, [r7, #8]
 800abfa:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800abfc:	e007      	b.n	800ac0e <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	68ba      	ldr	r2, [r7, #8]
 800ac04:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	687a      	ldr	r2, [r7, #4]
 800ac0c:	60da      	str	r2, [r3, #12]
}
 800ac0e:	46c0      	nop			@ (mov r8, r8)
 800ac10:	46bd      	mov	sp, r7
 800ac12:	b004      	add	sp, #16
 800ac14:	bd80      	pop	{r7, pc}
	...

0800ac18 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800ac18:	b580      	push	{r7, lr}
 800ac1a:	b084      	sub	sp, #16
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 800ac20:	f7ff f8a6 	bl	8009d70 <HAL_GetTick>
 800ac24:	0003      	movs	r3, r0
 800ac26:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800ac28:	e00f      	b.n	800ac4a <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	3301      	adds	r3, #1
 800ac2e:	d00c      	beq.n	800ac4a <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d007      	beq.n	800ac46 <FLASH_WaitForLastOperation+0x2e>
 800ac36:	f7ff f89b 	bl	8009d70 <HAL_GetTick>
 800ac3a:	0002      	movs	r2, r0
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	1ad3      	subs	r3, r2, r3
 800ac40:	687a      	ldr	r2, [r7, #4]
 800ac42:	429a      	cmp	r2, r3
 800ac44:	d201      	bcs.n	800ac4a <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800ac46:	2303      	movs	r3, #3
 800ac48:	e052      	b.n	800acf0 <FLASH_WaitForLastOperation+0xd8>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800ac4a:	4b2b      	ldr	r3, [pc, #172]	@ (800acf8 <FLASH_WaitForLastOperation+0xe0>)
 800ac4c:	699b      	ldr	r3, [r3, #24]
 800ac4e:	2201      	movs	r2, #1
 800ac50:	4013      	ands	r3, r2
 800ac52:	2b01      	cmp	r3, #1
 800ac54:	d0e9      	beq.n	800ac2a <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800ac56:	4b28      	ldr	r3, [pc, #160]	@ (800acf8 <FLASH_WaitForLastOperation+0xe0>)
 800ac58:	699b      	ldr	r3, [r3, #24]
 800ac5a:	2202      	movs	r2, #2
 800ac5c:	4013      	ands	r3, r2
 800ac5e:	2b02      	cmp	r3, #2
 800ac60:	d102      	bne.n	800ac68 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800ac62:	4b25      	ldr	r3, [pc, #148]	@ (800acf8 <FLASH_WaitForLastOperation+0xe0>)
 800ac64:	2202      	movs	r2, #2
 800ac66:	619a      	str	r2, [r3, #24]
  }
  
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 800ac68:	4b23      	ldr	r3, [pc, #140]	@ (800acf8 <FLASH_WaitForLastOperation+0xe0>)
 800ac6a:	699a      	ldr	r2, [r3, #24]
 800ac6c:	2380      	movs	r3, #128	@ 0x80
 800ac6e:	005b      	lsls	r3, r3, #1
 800ac70:	401a      	ands	r2, r3
 800ac72:	2380      	movs	r3, #128	@ 0x80
 800ac74:	005b      	lsls	r3, r3, #1
 800ac76:	429a      	cmp	r2, r3
 800ac78:	d035      	beq.n	800ace6 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 800ac7a:	4b1f      	ldr	r3, [pc, #124]	@ (800acf8 <FLASH_WaitForLastOperation+0xe0>)
 800ac7c:	699a      	ldr	r2, [r3, #24]
 800ac7e:	2380      	movs	r3, #128	@ 0x80
 800ac80:	009b      	lsls	r3, r3, #2
 800ac82:	401a      	ands	r2, r3
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 800ac84:	2380      	movs	r3, #128	@ 0x80
 800ac86:	009b      	lsls	r3, r3, #2
 800ac88:	429a      	cmp	r2, r3
 800ac8a:	d02c      	beq.n	800ace6 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 800ac8c:	4b1a      	ldr	r3, [pc, #104]	@ (800acf8 <FLASH_WaitForLastOperation+0xe0>)
 800ac8e:	699a      	ldr	r2, [r3, #24]
 800ac90:	2380      	movs	r3, #128	@ 0x80
 800ac92:	00db      	lsls	r3, r3, #3
 800ac94:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 800ac96:	2380      	movs	r3, #128	@ 0x80
 800ac98:	00db      	lsls	r3, r3, #3
 800ac9a:	429a      	cmp	r2, r3
 800ac9c:	d023      	beq.n	800ace6 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 800ac9e:	4b16      	ldr	r3, [pc, #88]	@ (800acf8 <FLASH_WaitForLastOperation+0xe0>)
 800aca0:	699a      	ldr	r2, [r3, #24]
 800aca2:	2380      	movs	r3, #128	@ 0x80
 800aca4:	011b      	lsls	r3, r3, #4
 800aca6:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 800aca8:	2380      	movs	r3, #128	@ 0x80
 800acaa:	011b      	lsls	r3, r3, #4
 800acac:	429a      	cmp	r2, r3
 800acae:	d01a      	beq.n	800ace6 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 800acb0:	4b11      	ldr	r3, [pc, #68]	@ (800acf8 <FLASH_WaitForLastOperation+0xe0>)
 800acb2:	699a      	ldr	r2, [r3, #24]
 800acb4:	2380      	movs	r3, #128	@ 0x80
 800acb6:	019b      	lsls	r3, r3, #6
 800acb8:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 800acba:	2380      	movs	r3, #128	@ 0x80
 800acbc:	019b      	lsls	r3, r3, #6
 800acbe:	429a      	cmp	r2, r3
 800acc0:	d011      	beq.n	800ace6 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 800acc2:	4b0d      	ldr	r3, [pc, #52]	@ (800acf8 <FLASH_WaitForLastOperation+0xe0>)
 800acc4:	699a      	ldr	r2, [r3, #24]
 800acc6:	2380      	movs	r3, #128	@ 0x80
 800acc8:	029b      	lsls	r3, r3, #10
 800acca:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 800accc:	2380      	movs	r3, #128	@ 0x80
 800acce:	029b      	lsls	r3, r3, #10
 800acd0:	429a      	cmp	r2, r3
 800acd2:	d008      	beq.n	800ace6 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR) )
 800acd4:	4b08      	ldr	r3, [pc, #32]	@ (800acf8 <FLASH_WaitForLastOperation+0xe0>)
 800acd6:	699a      	ldr	r2, [r3, #24]
 800acd8:	2380      	movs	r3, #128	@ 0x80
 800acda:	025b      	lsls	r3, r3, #9
 800acdc:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 800acde:	2380      	movs	r3, #128	@ 0x80
 800ace0:	025b      	lsls	r3, r3, #9
 800ace2:	429a      	cmp	r2, r3
 800ace4:	d103      	bne.n	800acee <FLASH_WaitForLastOperation+0xd6>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    FLASH_SetErrorCode();
 800ace6:	f000 f809 	bl	800acfc <FLASH_SetErrorCode>
    return HAL_ERROR;
 800acea:	2301      	movs	r3, #1
 800acec:	e000      	b.n	800acf0 <FLASH_WaitForLastOperation+0xd8>
  }

  /* There is no error flag set */
  return HAL_OK;
 800acee:	2300      	movs	r3, #0
}
 800acf0:	0018      	movs	r0, r3
 800acf2:	46bd      	mov	sp, r7
 800acf4:	b004      	add	sp, #16
 800acf6:	bd80      	pop	{r7, pc}
 800acf8:	40022000 	.word	0x40022000

0800acfc <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 800acfc:	b580      	push	{r7, lr}
 800acfe:	b082      	sub	sp, #8
 800ad00:	af00      	add	r7, sp, #0
  uint32_t flags = 0;
 800ad02:	2300      	movs	r3, #0
 800ad04:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800ad06:	4b49      	ldr	r3, [pc, #292]	@ (800ae2c <FLASH_SetErrorCode+0x130>)
 800ad08:	699a      	ldr	r2, [r3, #24]
 800ad0a:	2380      	movs	r3, #128	@ 0x80
 800ad0c:	005b      	lsls	r3, r3, #1
 800ad0e:	401a      	ands	r2, r3
 800ad10:	2380      	movs	r3, #128	@ 0x80
 800ad12:	005b      	lsls	r3, r3, #1
 800ad14:	429a      	cmp	r2, r3
 800ad16:	d10a      	bne.n	800ad2e <FLASH_SetErrorCode+0x32>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800ad18:	4b45      	ldr	r3, [pc, #276]	@ (800ae30 <FLASH_SetErrorCode+0x134>)
 800ad1a:	695b      	ldr	r3, [r3, #20]
 800ad1c:	2202      	movs	r2, #2
 800ad1e:	431a      	orrs	r2, r3
 800ad20:	4b43      	ldr	r3, [pc, #268]	@ (800ae30 <FLASH_SetErrorCode+0x134>)
 800ad22:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_WRPERR;
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	2280      	movs	r2, #128	@ 0x80
 800ad28:	0052      	lsls	r2, r2, #1
 800ad2a:	4313      	orrs	r3, r2
 800ad2c:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 800ad2e:	4b3f      	ldr	r3, [pc, #252]	@ (800ae2c <FLASH_SetErrorCode+0x130>)
 800ad30:	699a      	ldr	r2, [r3, #24]
 800ad32:	2380      	movs	r3, #128	@ 0x80
 800ad34:	009b      	lsls	r3, r3, #2
 800ad36:	401a      	ands	r2, r3
 800ad38:	2380      	movs	r3, #128	@ 0x80
 800ad3a:	009b      	lsls	r3, r3, #2
 800ad3c:	429a      	cmp	r2, r3
 800ad3e:	d10a      	bne.n	800ad56 <FLASH_SetErrorCode+0x5a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800ad40:	4b3b      	ldr	r3, [pc, #236]	@ (800ae30 <FLASH_SetErrorCode+0x134>)
 800ad42:	695b      	ldr	r3, [r3, #20]
 800ad44:	2201      	movs	r2, #1
 800ad46:	431a      	orrs	r2, r3
 800ad48:	4b39      	ldr	r3, [pc, #228]	@ (800ae30 <FLASH_SetErrorCode+0x134>)
 800ad4a:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_PGAERR;
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	2280      	movs	r2, #128	@ 0x80
 800ad50:	0092      	lsls	r2, r2, #2
 800ad52:	4313      	orrs	r3, r2
 800ad54:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 800ad56:	4b35      	ldr	r3, [pc, #212]	@ (800ae2c <FLASH_SetErrorCode+0x130>)
 800ad58:	699a      	ldr	r2, [r3, #24]
 800ad5a:	2380      	movs	r3, #128	@ 0x80
 800ad5c:	00db      	lsls	r3, r3, #3
 800ad5e:	401a      	ands	r2, r3
 800ad60:	2380      	movs	r3, #128	@ 0x80
 800ad62:	00db      	lsls	r3, r3, #3
 800ad64:	429a      	cmp	r2, r3
 800ad66:	d10a      	bne.n	800ad7e <FLASH_SetErrorCode+0x82>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 800ad68:	4b31      	ldr	r3, [pc, #196]	@ (800ae30 <FLASH_SetErrorCode+0x134>)
 800ad6a:	695b      	ldr	r3, [r3, #20]
 800ad6c:	2208      	movs	r2, #8
 800ad6e:	431a      	orrs	r2, r3
 800ad70:	4b2f      	ldr	r3, [pc, #188]	@ (800ae30 <FLASH_SetErrorCode+0x134>)
 800ad72:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_SIZERR;
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	2280      	movs	r2, #128	@ 0x80
 800ad78:	00d2      	lsls	r2, r2, #3
 800ad7a:	4313      	orrs	r3, r2
 800ad7c:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800ad7e:	4b2b      	ldr	r3, [pc, #172]	@ (800ae2c <FLASH_SetErrorCode+0x130>)
 800ad80:	699a      	ldr	r2, [r3, #24]
 800ad82:	2380      	movs	r3, #128	@ 0x80
 800ad84:	011b      	lsls	r3, r3, #4
 800ad86:	401a      	ands	r2, r3
 800ad88:	2380      	movs	r3, #128	@ 0x80
 800ad8a:	011b      	lsls	r3, r3, #4
 800ad8c:	429a      	cmp	r2, r3
 800ad8e:	d10a      	bne.n	800ada6 <FLASH_SetErrorCode+0xaa>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800ad90:	4b27      	ldr	r3, [pc, #156]	@ (800ae30 <FLASH_SetErrorCode+0x134>)
 800ad92:	695b      	ldr	r3, [r3, #20]
 800ad94:	2204      	movs	r2, #4
 800ad96:	431a      	orrs	r2, r3
 800ad98:	4b25      	ldr	r3, [pc, #148]	@ (800ae30 <FLASH_SetErrorCode+0x134>)
 800ad9a:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_OPTVERR;
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	2280      	movs	r2, #128	@ 0x80
 800ada0:	0112      	lsls	r2, r2, #4
 800ada2:	4313      	orrs	r3, r2
 800ada4:	607b      	str	r3, [r7, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))
 800ada6:	4b21      	ldr	r3, [pc, #132]	@ (800ae2c <FLASH_SetErrorCode+0x130>)
 800ada8:	699a      	ldr	r2, [r3, #24]
 800adaa:	2380      	movs	r3, #128	@ 0x80
 800adac:	019b      	lsls	r3, r3, #6
 800adae:	401a      	ands	r2, r3
 800adb0:	2380      	movs	r3, #128	@ 0x80
 800adb2:	019b      	lsls	r3, r3, #6
 800adb4:	429a      	cmp	r2, r3
 800adb6:	d10a      	bne.n	800adce <FLASH_SetErrorCode+0xd2>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 800adb8:	4b1d      	ldr	r3, [pc, #116]	@ (800ae30 <FLASH_SetErrorCode+0x134>)
 800adba:	695b      	ldr	r3, [r3, #20]
 800adbc:	2210      	movs	r2, #16
 800adbe:	431a      	orrs	r2, r3
 800adc0:	4b1b      	ldr	r3, [pc, #108]	@ (800ae30 <FLASH_SetErrorCode+0x134>)
 800adc2:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_RDERR;
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	2280      	movs	r2, #128	@ 0x80
 800adc8:	0192      	lsls	r2, r2, #6
 800adca:	4313      	orrs	r3, r2
 800adcc:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR))
 800adce:	4b17      	ldr	r3, [pc, #92]	@ (800ae2c <FLASH_SetErrorCode+0x130>)
 800add0:	699a      	ldr	r2, [r3, #24]
 800add2:	2380      	movs	r3, #128	@ 0x80
 800add4:	029b      	lsls	r3, r3, #10
 800add6:	401a      	ands	r2, r3
 800add8:	2380      	movs	r3, #128	@ 0x80
 800adda:	029b      	lsls	r3, r3, #10
 800addc:	429a      	cmp	r2, r3
 800adde:	d109      	bne.n	800adf4 <FLASH_SetErrorCode+0xf8>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 800ade0:	4b13      	ldr	r3, [pc, #76]	@ (800ae30 <FLASH_SetErrorCode+0x134>)
 800ade2:	695b      	ldr	r3, [r3, #20]
 800ade4:	2220      	movs	r2, #32
 800ade6:	431a      	orrs	r2, r3
 800ade8:	4b11      	ldr	r3, [pc, #68]	@ (800ae30 <FLASH_SetErrorCode+0x134>)
 800adea:	615a      	str	r2, [r3, #20]
    flags |= HAL_FLASH_ERROR_FWWERR;
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	2220      	movs	r2, #32
 800adf0:	4313      	orrs	r3, r2
 800adf2:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR))
 800adf4:	4b0d      	ldr	r3, [pc, #52]	@ (800ae2c <FLASH_SetErrorCode+0x130>)
 800adf6:	699a      	ldr	r2, [r3, #24]
 800adf8:	2380      	movs	r3, #128	@ 0x80
 800adfa:	025b      	lsls	r3, r3, #9
 800adfc:	401a      	ands	r2, r3
 800adfe:	2380      	movs	r3, #128	@ 0x80
 800ae00:	025b      	lsls	r3, r3, #9
 800ae02:	429a      	cmp	r2, r3
 800ae04:	d10a      	bne.n	800ae1c <FLASH_SetErrorCode+0x120>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 800ae06:	4b0a      	ldr	r3, [pc, #40]	@ (800ae30 <FLASH_SetErrorCode+0x134>)
 800ae08:	695b      	ldr	r3, [r3, #20]
 800ae0a:	2240      	movs	r2, #64	@ 0x40
 800ae0c:	431a      	orrs	r2, r3
 800ae0e:	4b08      	ldr	r3, [pc, #32]	@ (800ae30 <FLASH_SetErrorCode+0x134>)
 800ae10:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_NOTZEROERR;
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	2280      	movs	r2, #128	@ 0x80
 800ae16:	0252      	lsls	r2, r2, #9
 800ae18:	4313      	orrs	r3, r2
 800ae1a:	607b      	str	r3, [r7, #4]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800ae1c:	4b03      	ldr	r3, [pc, #12]	@ (800ae2c <FLASH_SetErrorCode+0x130>)
 800ae1e:	687a      	ldr	r2, [r7, #4]
 800ae20:	619a      	str	r2, [r3, #24]
}  
 800ae22:	46c0      	nop			@ (mov r8, r8)
 800ae24:	46bd      	mov	sp, r7
 800ae26:	b002      	add	sp, #8
 800ae28:	bd80      	pop	{r7, pc}
 800ae2a:	46c0      	nop			@ (mov r8, r8)
 800ae2c:	40022000 	.word	0x40022000
 800ae30:	20002b24 	.word	0x20002b24

0800ae34 <HAL_FLASHEx_DATAEEPROM_Unlock>:
/**
  * @brief  Unlocks the data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Unlock(void)
{
 800ae34:	b580      	push	{r7, lr}
 800ae36:	b084      	sub	sp, #16
 800ae38:	af00      	add	r7, sp, #0
  uint32_t primask_bit;

  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 800ae3a:	4b12      	ldr	r3, [pc, #72]	@ (800ae84 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800ae3c:	685b      	ldr	r3, [r3, #4]
 800ae3e:	2201      	movs	r2, #1
 800ae40:	4013      	ands	r3, r2
 800ae42:	d019      	beq.n	800ae78 <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ae44:	f3ef 8310 	mrs	r3, PRIMASK
 800ae48:	607b      	str	r3, [r7, #4]
  return(result);
 800ae4a:	687b      	ldr	r3, [r7, #4]
  {  
    /* Disable interrupts to avoid any interruption during unlock sequence */
    primask_bit = __get_PRIMASK();
 800ae4c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800ae4e:	b672      	cpsid	i
}
 800ae50:	46c0      	nop			@ (mov r8, r8)
    __disable_irq();

    /* Unlocking the Data memory and FLASH_PECR register access*/
    FLASH->PEKEYR = FLASH_PEKEY1;
 800ae52:	4b0c      	ldr	r3, [pc, #48]	@ (800ae84 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800ae54:	4a0c      	ldr	r2, [pc, #48]	@ (800ae88 <HAL_FLASHEx_DATAEEPROM_Unlock+0x54>)
 800ae56:	60da      	str	r2, [r3, #12]
    FLASH->PEKEYR = FLASH_PEKEY2;
 800ae58:	4b0a      	ldr	r3, [pc, #40]	@ (800ae84 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800ae5a:	4a0c      	ldr	r2, [pc, #48]	@ (800ae8c <HAL_FLASHEx_DATAEEPROM_Unlock+0x58>)
 800ae5c:	60da      	str	r2, [r3, #12]
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	60bb      	str	r3, [r7, #8]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ae62:	68bb      	ldr	r3, [r7, #8]
 800ae64:	f383 8810 	msr	PRIMASK, r3
}
 800ae68:	46c0      	nop			@ (mov r8, r8)

    /* Re-enable the interrupts: restore previous priority mask */
    __set_PRIMASK(primask_bit);

    if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 800ae6a:	4b06      	ldr	r3, [pc, #24]	@ (800ae84 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800ae6c:	685b      	ldr	r3, [r3, #4]
 800ae6e:	2201      	movs	r2, #1
 800ae70:	4013      	ands	r3, r2
 800ae72:	d001      	beq.n	800ae78 <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
    {
      return HAL_ERROR;
 800ae74:	2301      	movs	r3, #1
 800ae76:	e000      	b.n	800ae7a <HAL_FLASHEx_DATAEEPROM_Unlock+0x46>
    }
  }

  return HAL_OK;  
 800ae78:	2300      	movs	r3, #0
}
 800ae7a:	0018      	movs	r0, r3
 800ae7c:	46bd      	mov	sp, r7
 800ae7e:	b004      	add	sp, #16
 800ae80:	bd80      	pop	{r7, pc}
 800ae82:	46c0      	nop			@ (mov r8, r8)
 800ae84:	40022000 	.word	0x40022000
 800ae88:	89abcdef 	.word	0x89abcdef
 800ae8c:	02030405 	.word	0x02030405

0800ae90 <HAL_FLASHEx_DATAEEPROM_Lock>:
/**
  * @brief  Locks the Data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Lock(void)
{
 800ae90:	b580      	push	{r7, lr}
 800ae92:	af00      	add	r7, sp, #0
  /* Set the PELOCK Bit to lock the data memory and FLASH_PECR register access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 800ae94:	4b04      	ldr	r3, [pc, #16]	@ (800aea8 <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 800ae96:	685a      	ldr	r2, [r3, #4]
 800ae98:	4b03      	ldr	r3, [pc, #12]	@ (800aea8 <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 800ae9a:	2101      	movs	r1, #1
 800ae9c:	430a      	orrs	r2, r1
 800ae9e:	605a      	str	r2, [r3, #4]
  
  return HAL_OK;
 800aea0:	2300      	movs	r3, #0
}
 800aea2:	0018      	movs	r0, r3
 800aea4:	46bd      	mov	sp, r7
 800aea6:	bd80      	pop	{r7, pc}
 800aea8:	40022000 	.word	0x40022000

0800aeac <HAL_FLASHEx_DATAEEPROM_Erase>:
  *         and Flash program erase control register access(recommended to protect 
  *         the DATA_EEPROM against possible unwanted operation).
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Erase(uint32_t Address)
{
 800aeac:	b5b0      	push	{r4, r5, r7, lr}
 800aeae:	b084      	sub	sp, #16
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800aeb4:	250f      	movs	r5, #15
 800aeb6:	197b      	adds	r3, r7, r5
 800aeb8:	2200      	movs	r2, #0
 800aeba:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800aebc:	197c      	adds	r4, r7, r5
 800aebe:	4b0f      	ldr	r3, [pc, #60]	@ (800aefc <HAL_FLASHEx_DATAEEPROM_Erase+0x50>)
 800aec0:	0018      	movs	r0, r3
 800aec2:	f7ff fea9 	bl	800ac18 <FLASH_WaitForLastOperation>
 800aec6:	0003      	movs	r3, r0
 800aec8:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 800aeca:	0029      	movs	r1, r5
 800aecc:	187b      	adds	r3, r7, r1
 800aece:	781b      	ldrb	r3, [r3, #0]
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d10c      	bne.n	800aeee <HAL_FLASHEx_DATAEEPROM_Erase+0x42>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800aed4:	4b0a      	ldr	r3, [pc, #40]	@ (800af00 <HAL_FLASHEx_DATAEEPROM_Erase+0x54>)
 800aed6:	2200      	movs	r2, #0
 800aed8:	615a      	str	r2, [r3, #20]

      /* Write 00000000h to valid address in the data memory */
      *(__IO uint32_t *) Address = 0x00000000U;
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	2200      	movs	r2, #0
 800aede:	601a      	str	r2, [r3, #0]

    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800aee0:	187c      	adds	r4, r7, r1
 800aee2:	4b06      	ldr	r3, [pc, #24]	@ (800aefc <HAL_FLASHEx_DATAEEPROM_Erase+0x50>)
 800aee4:	0018      	movs	r0, r3
 800aee6:	f7ff fe97 	bl	800ac18 <FLASH_WaitForLastOperation>
 800aeea:	0003      	movs	r3, r0
 800aeec:	7023      	strb	r3, [r4, #0]
  }
   
  /* Return the erase status */
  return status;
 800aeee:	230f      	movs	r3, #15
 800aef0:	18fb      	adds	r3, r7, r3
 800aef2:	781b      	ldrb	r3, [r3, #0]
}  
 800aef4:	0018      	movs	r0, r3
 800aef6:	46bd      	mov	sp, r7
 800aef8:	b004      	add	sp, #16
 800aefa:	bdb0      	pop	{r4, r5, r7, pc}
 800aefc:	0000c350 	.word	0x0000c350
 800af00:	20002b24 	.word	0x20002b24

0800af04 <HAL_FLASHEx_DATAEEPROM_Program>:
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */

HAL_StatusTypeDef   HAL_FLASHEx_DATAEEPROM_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
 800af04:	b5b0      	push	{r4, r5, r7, lr}
 800af06:	b086      	sub	sp, #24
 800af08:	af00      	add	r7, sp, #0
 800af0a:	60f8      	str	r0, [r7, #12]
 800af0c:	60b9      	str	r1, [r7, #8]
 800af0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800af10:	2317      	movs	r3, #23
 800af12:	18fb      	adds	r3, r7, r3
 800af14:	2201      	movs	r2, #1
 800af16:	701a      	strb	r2, [r3, #0]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800af18:	4b24      	ldr	r3, [pc, #144]	@ (800afac <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 800af1a:	7c1b      	ldrb	r3, [r3, #16]
 800af1c:	2b01      	cmp	r3, #1
 800af1e:	d101      	bne.n	800af24 <HAL_FLASHEx_DATAEEPROM_Program+0x20>
 800af20:	2302      	movs	r3, #2
 800af22:	e03e      	b.n	800afa2 <HAL_FLASHEx_DATAEEPROM_Program+0x9e>
 800af24:	4b21      	ldr	r3, [pc, #132]	@ (800afac <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 800af26:	2201      	movs	r2, #1
 800af28:	741a      	strb	r2, [r3, #16]
  /* Check the parameters */
  assert_param(IS_TYPEPROGRAMDATA(TypeProgram));
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800af2a:	2517      	movs	r5, #23
 800af2c:	197c      	adds	r4, r7, r5
 800af2e:	4b20      	ldr	r3, [pc, #128]	@ (800afb0 <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 800af30:	0018      	movs	r0, r3
 800af32:	f7ff fe71 	bl	800ac18 <FLASH_WaitForLastOperation>
 800af36:	0003      	movs	r3, r0
 800af38:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 800af3a:	197b      	adds	r3, r7, r5
 800af3c:	781b      	ldrb	r3, [r3, #0]
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d129      	bne.n	800af96 <HAL_FLASHEx_DATAEEPROM_Program+0x92>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800af42:	4b1a      	ldr	r3, [pc, #104]	@ (800afac <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 800af44:	2200      	movs	r2, #0
 800af46:	615a      	str	r2, [r3, #20]

    if(TypeProgram == FLASH_TYPEPROGRAMDATA_WORD)
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	2b02      	cmp	r3, #2
 800af4c:	d103      	bne.n	800af56 <HAL_FLASHEx_DATAEEPROM_Program+0x52>
    {
      /* Program word (32-bit) at a specified address.*/
      *(__IO uint32_t *)Address = Data;
 800af4e:	68bb      	ldr	r3, [r7, #8]
 800af50:	687a      	ldr	r2, [r7, #4]
 800af52:	601a      	str	r2, [r3, #0]
 800af54:	e013      	b.n	800af7e <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_HALFWORD)
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	2b01      	cmp	r3, #1
 800af5a:	d104      	bne.n	800af66 <HAL_FLASHEx_DATAEEPROM_Program+0x62>
    {
      /* Program halfword (16-bit) at a specified address.*/
      *(__IO uint16_t *)Address = (uint16_t) Data;
 800af5c:	68bb      	ldr	r3, [r7, #8]
 800af5e:	687a      	ldr	r2, [r7, #4]
 800af60:	b292      	uxth	r2, r2
 800af62:	801a      	strh	r2, [r3, #0]
 800af64:	e00b      	b.n	800af7e <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_BYTE)
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d104      	bne.n	800af76 <HAL_FLASHEx_DATAEEPROM_Program+0x72>
    {
      /* Program byte (8-bit) at a specified address.*/
      *(__IO uint8_t *)Address = (uint8_t) Data;
 800af6c:	68bb      	ldr	r3, [r7, #8]
 800af6e:	687a      	ldr	r2, [r7, #4]
 800af70:	b2d2      	uxtb	r2, r2
 800af72:	701a      	strb	r2, [r3, #0]
 800af74:	e003      	b.n	800af7e <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else
    {
      status = HAL_ERROR;
 800af76:	2317      	movs	r3, #23
 800af78:	18fb      	adds	r3, r7, r3
 800af7a:	2201      	movs	r2, #1
 800af7c:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 800af7e:	2217      	movs	r2, #23
 800af80:	18bb      	adds	r3, r7, r2
 800af82:	781b      	ldrb	r3, [r3, #0]
 800af84:	2b00      	cmp	r3, #0
 800af86:	d106      	bne.n	800af96 <HAL_FLASHEx_DATAEEPROM_Program+0x92>
    {
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800af88:	18bc      	adds	r4, r7, r2
 800af8a:	4b09      	ldr	r3, [pc, #36]	@ (800afb0 <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 800af8c:	0018      	movs	r0, r3
 800af8e:	f7ff fe43 	bl	800ac18 <FLASH_WaitForLastOperation>
 800af92:	0003      	movs	r3, r0
 800af94:	7023      	strb	r3, [r4, #0]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800af96:	4b05      	ldr	r3, [pc, #20]	@ (800afac <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 800af98:	2200      	movs	r2, #0
 800af9a:	741a      	strb	r2, [r3, #16]

  return status;
 800af9c:	2317      	movs	r3, #23
 800af9e:	18fb      	adds	r3, r7, r3
 800afa0:	781b      	ldrb	r3, [r3, #0]
}
 800afa2:	0018      	movs	r0, r3
 800afa4:	46bd      	mov	sp, r7
 800afa6:	b006      	add	sp, #24
 800afa8:	bdb0      	pop	{r4, r5, r7, pc}
 800afaa:	46c0      	nop			@ (mov r8, r8)
 800afac:	20002b24 	.word	0x20002b24
 800afb0:	0000c350 	.word	0x0000c350

0800afb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800afb4:	b580      	push	{r7, lr}
 800afb6:	b086      	sub	sp, #24
 800afb8:	af00      	add	r7, sp, #0
 800afba:	6078      	str	r0, [r7, #4]
 800afbc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800afbe:	2300      	movs	r3, #0
 800afc0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800afc2:	2300      	movs	r3, #0
 800afc4:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800afc6:	2300      	movs	r3, #0
 800afc8:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800afca:	e155      	b.n	800b278 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800afcc:	683b      	ldr	r3, [r7, #0]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	2101      	movs	r1, #1
 800afd2:	697a      	ldr	r2, [r7, #20]
 800afd4:	4091      	lsls	r1, r2
 800afd6:	000a      	movs	r2, r1
 800afd8:	4013      	ands	r3, r2
 800afda:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d100      	bne.n	800afe4 <HAL_GPIO_Init+0x30>
 800afe2:	e146      	b.n	800b272 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800afe4:	683b      	ldr	r3, [r7, #0]
 800afe6:	685b      	ldr	r3, [r3, #4]
 800afe8:	2203      	movs	r2, #3
 800afea:	4013      	ands	r3, r2
 800afec:	2b01      	cmp	r3, #1
 800afee:	d005      	beq.n	800affc <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800aff0:	683b      	ldr	r3, [r7, #0]
 800aff2:	685b      	ldr	r3, [r3, #4]
 800aff4:	2203      	movs	r2, #3
 800aff6:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800aff8:	2b02      	cmp	r3, #2
 800affa:	d130      	bne.n	800b05e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	689b      	ldr	r3, [r3, #8]
 800b000:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800b002:	697b      	ldr	r3, [r7, #20]
 800b004:	005b      	lsls	r3, r3, #1
 800b006:	2203      	movs	r2, #3
 800b008:	409a      	lsls	r2, r3
 800b00a:	0013      	movs	r3, r2
 800b00c:	43da      	mvns	r2, r3
 800b00e:	693b      	ldr	r3, [r7, #16]
 800b010:	4013      	ands	r3, r2
 800b012:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800b014:	683b      	ldr	r3, [r7, #0]
 800b016:	68da      	ldr	r2, [r3, #12]
 800b018:	697b      	ldr	r3, [r7, #20]
 800b01a:	005b      	lsls	r3, r3, #1
 800b01c:	409a      	lsls	r2, r3
 800b01e:	0013      	movs	r3, r2
 800b020:	693a      	ldr	r2, [r7, #16]
 800b022:	4313      	orrs	r3, r2
 800b024:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	693a      	ldr	r2, [r7, #16]
 800b02a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	685b      	ldr	r3, [r3, #4]
 800b030:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800b032:	2201      	movs	r2, #1
 800b034:	697b      	ldr	r3, [r7, #20]
 800b036:	409a      	lsls	r2, r3
 800b038:	0013      	movs	r3, r2
 800b03a:	43da      	mvns	r2, r3
 800b03c:	693b      	ldr	r3, [r7, #16]
 800b03e:	4013      	ands	r3, r2
 800b040:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800b042:	683b      	ldr	r3, [r7, #0]
 800b044:	685b      	ldr	r3, [r3, #4]
 800b046:	091b      	lsrs	r3, r3, #4
 800b048:	2201      	movs	r2, #1
 800b04a:	401a      	ands	r2, r3
 800b04c:	697b      	ldr	r3, [r7, #20]
 800b04e:	409a      	lsls	r2, r3
 800b050:	0013      	movs	r3, r2
 800b052:	693a      	ldr	r2, [r7, #16]
 800b054:	4313      	orrs	r3, r2
 800b056:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	693a      	ldr	r2, [r7, #16]
 800b05c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800b05e:	683b      	ldr	r3, [r7, #0]
 800b060:	685b      	ldr	r3, [r3, #4]
 800b062:	2203      	movs	r2, #3
 800b064:	4013      	ands	r3, r2
 800b066:	2b03      	cmp	r3, #3
 800b068:	d017      	beq.n	800b09a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	68db      	ldr	r3, [r3, #12]
 800b06e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800b070:	697b      	ldr	r3, [r7, #20]
 800b072:	005b      	lsls	r3, r3, #1
 800b074:	2203      	movs	r2, #3
 800b076:	409a      	lsls	r2, r3
 800b078:	0013      	movs	r3, r2
 800b07a:	43da      	mvns	r2, r3
 800b07c:	693b      	ldr	r3, [r7, #16]
 800b07e:	4013      	ands	r3, r2
 800b080:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800b082:	683b      	ldr	r3, [r7, #0]
 800b084:	689a      	ldr	r2, [r3, #8]
 800b086:	697b      	ldr	r3, [r7, #20]
 800b088:	005b      	lsls	r3, r3, #1
 800b08a:	409a      	lsls	r2, r3
 800b08c:	0013      	movs	r3, r2
 800b08e:	693a      	ldr	r2, [r7, #16]
 800b090:	4313      	orrs	r3, r2
 800b092:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	693a      	ldr	r2, [r7, #16]
 800b098:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b09a:	683b      	ldr	r3, [r7, #0]
 800b09c:	685b      	ldr	r3, [r3, #4]
 800b09e:	2203      	movs	r2, #3
 800b0a0:	4013      	ands	r3, r2
 800b0a2:	2b02      	cmp	r3, #2
 800b0a4:	d123      	bne.n	800b0ee <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800b0a6:	697b      	ldr	r3, [r7, #20]
 800b0a8:	08da      	lsrs	r2, r3, #3
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	3208      	adds	r2, #8
 800b0ae:	0092      	lsls	r2, r2, #2
 800b0b0:	58d3      	ldr	r3, [r2, r3]
 800b0b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800b0b4:	697b      	ldr	r3, [r7, #20]
 800b0b6:	2207      	movs	r2, #7
 800b0b8:	4013      	ands	r3, r2
 800b0ba:	009b      	lsls	r3, r3, #2
 800b0bc:	220f      	movs	r2, #15
 800b0be:	409a      	lsls	r2, r3
 800b0c0:	0013      	movs	r3, r2
 800b0c2:	43da      	mvns	r2, r3
 800b0c4:	693b      	ldr	r3, [r7, #16]
 800b0c6:	4013      	ands	r3, r2
 800b0c8:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800b0ca:	683b      	ldr	r3, [r7, #0]
 800b0cc:	691a      	ldr	r2, [r3, #16]
 800b0ce:	697b      	ldr	r3, [r7, #20]
 800b0d0:	2107      	movs	r1, #7
 800b0d2:	400b      	ands	r3, r1
 800b0d4:	009b      	lsls	r3, r3, #2
 800b0d6:	409a      	lsls	r2, r3
 800b0d8:	0013      	movs	r3, r2
 800b0da:	693a      	ldr	r2, [r7, #16]
 800b0dc:	4313      	orrs	r3, r2
 800b0de:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800b0e0:	697b      	ldr	r3, [r7, #20]
 800b0e2:	08da      	lsrs	r2, r3, #3
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	3208      	adds	r2, #8
 800b0e8:	0092      	lsls	r2, r2, #2
 800b0ea:	6939      	ldr	r1, [r7, #16]
 800b0ec:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800b0f4:	697b      	ldr	r3, [r7, #20]
 800b0f6:	005b      	lsls	r3, r3, #1
 800b0f8:	2203      	movs	r2, #3
 800b0fa:	409a      	lsls	r2, r3
 800b0fc:	0013      	movs	r3, r2
 800b0fe:	43da      	mvns	r2, r3
 800b100:	693b      	ldr	r3, [r7, #16]
 800b102:	4013      	ands	r3, r2
 800b104:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800b106:	683b      	ldr	r3, [r7, #0]
 800b108:	685b      	ldr	r3, [r3, #4]
 800b10a:	2203      	movs	r2, #3
 800b10c:	401a      	ands	r2, r3
 800b10e:	697b      	ldr	r3, [r7, #20]
 800b110:	005b      	lsls	r3, r3, #1
 800b112:	409a      	lsls	r2, r3
 800b114:	0013      	movs	r3, r2
 800b116:	693a      	ldr	r2, [r7, #16]
 800b118:	4313      	orrs	r3, r2
 800b11a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	693a      	ldr	r2, [r7, #16]
 800b120:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800b122:	683b      	ldr	r3, [r7, #0]
 800b124:	685a      	ldr	r2, [r3, #4]
 800b126:	23c0      	movs	r3, #192	@ 0xc0
 800b128:	029b      	lsls	r3, r3, #10
 800b12a:	4013      	ands	r3, r2
 800b12c:	d100      	bne.n	800b130 <HAL_GPIO_Init+0x17c>
 800b12e:	e0a0      	b.n	800b272 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b130:	4b57      	ldr	r3, [pc, #348]	@ (800b290 <HAL_GPIO_Init+0x2dc>)
 800b132:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b134:	4b56      	ldr	r3, [pc, #344]	@ (800b290 <HAL_GPIO_Init+0x2dc>)
 800b136:	2101      	movs	r1, #1
 800b138:	430a      	orrs	r2, r1
 800b13a:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 800b13c:	4a55      	ldr	r2, [pc, #340]	@ (800b294 <HAL_GPIO_Init+0x2e0>)
 800b13e:	697b      	ldr	r3, [r7, #20]
 800b140:	089b      	lsrs	r3, r3, #2
 800b142:	3302      	adds	r3, #2
 800b144:	009b      	lsls	r3, r3, #2
 800b146:	589b      	ldr	r3, [r3, r2]
 800b148:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800b14a:	697b      	ldr	r3, [r7, #20]
 800b14c:	2203      	movs	r2, #3
 800b14e:	4013      	ands	r3, r2
 800b150:	009b      	lsls	r3, r3, #2
 800b152:	220f      	movs	r2, #15
 800b154:	409a      	lsls	r2, r3
 800b156:	0013      	movs	r3, r2
 800b158:	43da      	mvns	r2, r3
 800b15a:	693b      	ldr	r3, [r7, #16]
 800b15c:	4013      	ands	r3, r2
 800b15e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800b160:	687a      	ldr	r2, [r7, #4]
 800b162:	23a0      	movs	r3, #160	@ 0xa0
 800b164:	05db      	lsls	r3, r3, #23
 800b166:	429a      	cmp	r2, r3
 800b168:	d01f      	beq.n	800b1aa <HAL_GPIO_Init+0x1f6>
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	4a4a      	ldr	r2, [pc, #296]	@ (800b298 <HAL_GPIO_Init+0x2e4>)
 800b16e:	4293      	cmp	r3, r2
 800b170:	d019      	beq.n	800b1a6 <HAL_GPIO_Init+0x1f2>
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	4a49      	ldr	r2, [pc, #292]	@ (800b29c <HAL_GPIO_Init+0x2e8>)
 800b176:	4293      	cmp	r3, r2
 800b178:	d013      	beq.n	800b1a2 <HAL_GPIO_Init+0x1ee>
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	4a48      	ldr	r2, [pc, #288]	@ (800b2a0 <HAL_GPIO_Init+0x2ec>)
 800b17e:	4293      	cmp	r3, r2
 800b180:	d00d      	beq.n	800b19e <HAL_GPIO_Init+0x1ea>
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	4a47      	ldr	r2, [pc, #284]	@ (800b2a4 <HAL_GPIO_Init+0x2f0>)
 800b186:	4293      	cmp	r3, r2
 800b188:	d007      	beq.n	800b19a <HAL_GPIO_Init+0x1e6>
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	4a46      	ldr	r2, [pc, #280]	@ (800b2a8 <HAL_GPIO_Init+0x2f4>)
 800b18e:	4293      	cmp	r3, r2
 800b190:	d101      	bne.n	800b196 <HAL_GPIO_Init+0x1e2>
 800b192:	2305      	movs	r3, #5
 800b194:	e00a      	b.n	800b1ac <HAL_GPIO_Init+0x1f8>
 800b196:	2306      	movs	r3, #6
 800b198:	e008      	b.n	800b1ac <HAL_GPIO_Init+0x1f8>
 800b19a:	2304      	movs	r3, #4
 800b19c:	e006      	b.n	800b1ac <HAL_GPIO_Init+0x1f8>
 800b19e:	2303      	movs	r3, #3
 800b1a0:	e004      	b.n	800b1ac <HAL_GPIO_Init+0x1f8>
 800b1a2:	2302      	movs	r3, #2
 800b1a4:	e002      	b.n	800b1ac <HAL_GPIO_Init+0x1f8>
 800b1a6:	2301      	movs	r3, #1
 800b1a8:	e000      	b.n	800b1ac <HAL_GPIO_Init+0x1f8>
 800b1aa:	2300      	movs	r3, #0
 800b1ac:	697a      	ldr	r2, [r7, #20]
 800b1ae:	2103      	movs	r1, #3
 800b1b0:	400a      	ands	r2, r1
 800b1b2:	0092      	lsls	r2, r2, #2
 800b1b4:	4093      	lsls	r3, r2
 800b1b6:	693a      	ldr	r2, [r7, #16]
 800b1b8:	4313      	orrs	r3, r2
 800b1ba:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800b1bc:	4935      	ldr	r1, [pc, #212]	@ (800b294 <HAL_GPIO_Init+0x2e0>)
 800b1be:	697b      	ldr	r3, [r7, #20]
 800b1c0:	089b      	lsrs	r3, r3, #2
 800b1c2:	3302      	adds	r3, #2
 800b1c4:	009b      	lsls	r3, r3, #2
 800b1c6:	693a      	ldr	r2, [r7, #16]
 800b1c8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800b1ca:	4b38      	ldr	r3, [pc, #224]	@ (800b2ac <HAL_GPIO_Init+0x2f8>)
 800b1cc:	689b      	ldr	r3, [r3, #8]
 800b1ce:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	43da      	mvns	r2, r3
 800b1d4:	693b      	ldr	r3, [r7, #16]
 800b1d6:	4013      	ands	r3, r2
 800b1d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800b1da:	683b      	ldr	r3, [r7, #0]
 800b1dc:	685a      	ldr	r2, [r3, #4]
 800b1de:	2380      	movs	r3, #128	@ 0x80
 800b1e0:	035b      	lsls	r3, r3, #13
 800b1e2:	4013      	ands	r3, r2
 800b1e4:	d003      	beq.n	800b1ee <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 800b1e6:	693a      	ldr	r2, [r7, #16]
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	4313      	orrs	r3, r2
 800b1ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800b1ee:	4b2f      	ldr	r3, [pc, #188]	@ (800b2ac <HAL_GPIO_Init+0x2f8>)
 800b1f0:	693a      	ldr	r2, [r7, #16]
 800b1f2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800b1f4:	4b2d      	ldr	r3, [pc, #180]	@ (800b2ac <HAL_GPIO_Init+0x2f8>)
 800b1f6:	68db      	ldr	r3, [r3, #12]
 800b1f8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	43da      	mvns	r2, r3
 800b1fe:	693b      	ldr	r3, [r7, #16]
 800b200:	4013      	ands	r3, r2
 800b202:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800b204:	683b      	ldr	r3, [r7, #0]
 800b206:	685a      	ldr	r2, [r3, #4]
 800b208:	2380      	movs	r3, #128	@ 0x80
 800b20a:	039b      	lsls	r3, r3, #14
 800b20c:	4013      	ands	r3, r2
 800b20e:	d003      	beq.n	800b218 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800b210:	693a      	ldr	r2, [r7, #16]
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	4313      	orrs	r3, r2
 800b216:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800b218:	4b24      	ldr	r3, [pc, #144]	@ (800b2ac <HAL_GPIO_Init+0x2f8>)
 800b21a:	693a      	ldr	r2, [r7, #16]
 800b21c:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 800b21e:	4b23      	ldr	r3, [pc, #140]	@ (800b2ac <HAL_GPIO_Init+0x2f8>)
 800b220:	685b      	ldr	r3, [r3, #4]
 800b222:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	43da      	mvns	r2, r3
 800b228:	693b      	ldr	r3, [r7, #16]
 800b22a:	4013      	ands	r3, r2
 800b22c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800b22e:	683b      	ldr	r3, [r7, #0]
 800b230:	685a      	ldr	r2, [r3, #4]
 800b232:	2380      	movs	r3, #128	@ 0x80
 800b234:	029b      	lsls	r3, r3, #10
 800b236:	4013      	ands	r3, r2
 800b238:	d003      	beq.n	800b242 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 800b23a:	693a      	ldr	r2, [r7, #16]
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	4313      	orrs	r3, r2
 800b240:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800b242:	4b1a      	ldr	r3, [pc, #104]	@ (800b2ac <HAL_GPIO_Init+0x2f8>)
 800b244:	693a      	ldr	r2, [r7, #16]
 800b246:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800b248:	4b18      	ldr	r3, [pc, #96]	@ (800b2ac <HAL_GPIO_Init+0x2f8>)
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	43da      	mvns	r2, r3
 800b252:	693b      	ldr	r3, [r7, #16]
 800b254:	4013      	ands	r3, r2
 800b256:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800b258:	683b      	ldr	r3, [r7, #0]
 800b25a:	685a      	ldr	r2, [r3, #4]
 800b25c:	2380      	movs	r3, #128	@ 0x80
 800b25e:	025b      	lsls	r3, r3, #9
 800b260:	4013      	ands	r3, r2
 800b262:	d003      	beq.n	800b26c <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 800b264:	693a      	ldr	r2, [r7, #16]
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	4313      	orrs	r3, r2
 800b26a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800b26c:	4b0f      	ldr	r3, [pc, #60]	@ (800b2ac <HAL_GPIO_Init+0x2f8>)
 800b26e:	693a      	ldr	r2, [r7, #16]
 800b270:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 800b272:	697b      	ldr	r3, [r7, #20]
 800b274:	3301      	adds	r3, #1
 800b276:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800b278:	683b      	ldr	r3, [r7, #0]
 800b27a:	681a      	ldr	r2, [r3, #0]
 800b27c:	697b      	ldr	r3, [r7, #20]
 800b27e:	40da      	lsrs	r2, r3
 800b280:	1e13      	subs	r3, r2, #0
 800b282:	d000      	beq.n	800b286 <HAL_GPIO_Init+0x2d2>
 800b284:	e6a2      	b.n	800afcc <HAL_GPIO_Init+0x18>
  }
}
 800b286:	46c0      	nop			@ (mov r8, r8)
 800b288:	46c0      	nop			@ (mov r8, r8)
 800b28a:	46bd      	mov	sp, r7
 800b28c:	b006      	add	sp, #24
 800b28e:	bd80      	pop	{r7, pc}
 800b290:	40021000 	.word	0x40021000
 800b294:	40010000 	.word	0x40010000
 800b298:	50000400 	.word	0x50000400
 800b29c:	50000800 	.word	0x50000800
 800b2a0:	50000c00 	.word	0x50000c00
 800b2a4:	50001000 	.word	0x50001000
 800b2a8:	50001c00 	.word	0x50001c00
 800b2ac:	40010400 	.word	0x40010400

0800b2b0 <HAL_GPIO_DeInit>:
  *                   This parameter can be one of GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800b2b0:	b580      	push	{r7, lr}
 800b2b2:	b086      	sub	sp, #24
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	6078      	str	r0, [r7, #4]
 800b2b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800b2ba:	2300      	movs	r3, #0
 800b2bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800b2be:	2300      	movs	r3, #0
 800b2c0:	613b      	str	r3, [r7, #16]
  uint32_t tmp = 0x00U;
 800b2c2:	2300      	movs	r3, #0
 800b2c4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0)
 800b2c6:	e0bc      	b.n	800b442 <HAL_GPIO_DeInit+0x192>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Pin) & (1U << position);
 800b2c8:	2201      	movs	r2, #1
 800b2ca:	697b      	ldr	r3, [r7, #20]
 800b2cc:	409a      	lsls	r2, r3
 800b2ce:	683b      	ldr	r3, [r7, #0]
 800b2d0:	4013      	ands	r3, r2
 800b2d2:	613b      	str	r3, [r7, #16]

    if (iocurrent)
 800b2d4:	693b      	ldr	r3, [r7, #16]
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d100      	bne.n	800b2dc <HAL_GPIO_DeInit+0x2c>
 800b2da:	e0af      	b.n	800b43c <HAL_GPIO_DeInit+0x18c>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 800b2dc:	4a5e      	ldr	r2, [pc, #376]	@ (800b458 <HAL_GPIO_DeInit+0x1a8>)
 800b2de:	697b      	ldr	r3, [r7, #20]
 800b2e0:	089b      	lsrs	r3, r3, #2
 800b2e2:	3302      	adds	r3, #2
 800b2e4:	009b      	lsls	r3, r3, #2
 800b2e6:	589b      	ldr	r3, [r3, r2]
 800b2e8:	60fb      	str	r3, [r7, #12]
      tmp &= ((0x0FUL) << (4U * (position & 0x03U)));
 800b2ea:	697b      	ldr	r3, [r7, #20]
 800b2ec:	2203      	movs	r2, #3
 800b2ee:	4013      	ands	r3, r2
 800b2f0:	009b      	lsls	r3, r3, #2
 800b2f2:	220f      	movs	r2, #15
 800b2f4:	409a      	lsls	r2, r3
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	4013      	ands	r3, r2
 800b2fa:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800b2fc:	687a      	ldr	r2, [r7, #4]
 800b2fe:	23a0      	movs	r3, #160	@ 0xa0
 800b300:	05db      	lsls	r3, r3, #23
 800b302:	429a      	cmp	r2, r3
 800b304:	d01f      	beq.n	800b346 <HAL_GPIO_DeInit+0x96>
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	4a54      	ldr	r2, [pc, #336]	@ (800b45c <HAL_GPIO_DeInit+0x1ac>)
 800b30a:	4293      	cmp	r3, r2
 800b30c:	d019      	beq.n	800b342 <HAL_GPIO_DeInit+0x92>
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	4a53      	ldr	r2, [pc, #332]	@ (800b460 <HAL_GPIO_DeInit+0x1b0>)
 800b312:	4293      	cmp	r3, r2
 800b314:	d013      	beq.n	800b33e <HAL_GPIO_DeInit+0x8e>
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	4a52      	ldr	r2, [pc, #328]	@ (800b464 <HAL_GPIO_DeInit+0x1b4>)
 800b31a:	4293      	cmp	r3, r2
 800b31c:	d00d      	beq.n	800b33a <HAL_GPIO_DeInit+0x8a>
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	4a51      	ldr	r2, [pc, #324]	@ (800b468 <HAL_GPIO_DeInit+0x1b8>)
 800b322:	4293      	cmp	r3, r2
 800b324:	d007      	beq.n	800b336 <HAL_GPIO_DeInit+0x86>
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	4a50      	ldr	r2, [pc, #320]	@ (800b46c <HAL_GPIO_DeInit+0x1bc>)
 800b32a:	4293      	cmp	r3, r2
 800b32c:	d101      	bne.n	800b332 <HAL_GPIO_DeInit+0x82>
 800b32e:	2305      	movs	r3, #5
 800b330:	e00a      	b.n	800b348 <HAL_GPIO_DeInit+0x98>
 800b332:	2306      	movs	r3, #6
 800b334:	e008      	b.n	800b348 <HAL_GPIO_DeInit+0x98>
 800b336:	2304      	movs	r3, #4
 800b338:	e006      	b.n	800b348 <HAL_GPIO_DeInit+0x98>
 800b33a:	2303      	movs	r3, #3
 800b33c:	e004      	b.n	800b348 <HAL_GPIO_DeInit+0x98>
 800b33e:	2302      	movs	r3, #2
 800b340:	e002      	b.n	800b348 <HAL_GPIO_DeInit+0x98>
 800b342:	2301      	movs	r3, #1
 800b344:	e000      	b.n	800b348 <HAL_GPIO_DeInit+0x98>
 800b346:	2300      	movs	r3, #0
 800b348:	697a      	ldr	r2, [r7, #20]
 800b34a:	2103      	movs	r1, #3
 800b34c:	400a      	ands	r2, r1
 800b34e:	0092      	lsls	r2, r2, #2
 800b350:	4093      	lsls	r3, r2
 800b352:	68fa      	ldr	r2, [r7, #12]
 800b354:	429a      	cmp	r2, r3
 800b356:	d132      	bne.n	800b3be <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800b358:	4b45      	ldr	r3, [pc, #276]	@ (800b470 <HAL_GPIO_DeInit+0x1c0>)
 800b35a:	681a      	ldr	r2, [r3, #0]
 800b35c:	693b      	ldr	r3, [r7, #16]
 800b35e:	43d9      	mvns	r1, r3
 800b360:	4b43      	ldr	r3, [pc, #268]	@ (800b470 <HAL_GPIO_DeInit+0x1c0>)
 800b362:	400a      	ands	r2, r1
 800b364:	601a      	str	r2, [r3, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800b366:	4b42      	ldr	r3, [pc, #264]	@ (800b470 <HAL_GPIO_DeInit+0x1c0>)
 800b368:	685a      	ldr	r2, [r3, #4]
 800b36a:	693b      	ldr	r3, [r7, #16]
 800b36c:	43d9      	mvns	r1, r3
 800b36e:	4b40      	ldr	r3, [pc, #256]	@ (800b470 <HAL_GPIO_DeInit+0x1c0>)
 800b370:	400a      	ands	r2, r1
 800b372:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800b374:	4b3e      	ldr	r3, [pc, #248]	@ (800b470 <HAL_GPIO_DeInit+0x1c0>)
 800b376:	68da      	ldr	r2, [r3, #12]
 800b378:	693b      	ldr	r3, [r7, #16]
 800b37a:	43d9      	mvns	r1, r3
 800b37c:	4b3c      	ldr	r3, [pc, #240]	@ (800b470 <HAL_GPIO_DeInit+0x1c0>)
 800b37e:	400a      	ands	r2, r1
 800b380:	60da      	str	r2, [r3, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800b382:	4b3b      	ldr	r3, [pc, #236]	@ (800b470 <HAL_GPIO_DeInit+0x1c0>)
 800b384:	689a      	ldr	r2, [r3, #8]
 800b386:	693b      	ldr	r3, [r7, #16]
 800b388:	43d9      	mvns	r1, r3
 800b38a:	4b39      	ldr	r3, [pc, #228]	@ (800b470 <HAL_GPIO_DeInit+0x1c0>)
 800b38c:	400a      	ands	r2, r1
 800b38e:	609a      	str	r2, [r3, #8]

        tmp = (0x0FUL) << (4U * (position & 0x03U));
 800b390:	697b      	ldr	r3, [r7, #20]
 800b392:	2203      	movs	r2, #3
 800b394:	4013      	ands	r3, r2
 800b396:	009b      	lsls	r3, r3, #2
 800b398:	220f      	movs	r2, #15
 800b39a:	409a      	lsls	r2, r3
 800b39c:	0013      	movs	r3, r2
 800b39e:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800b3a0:	4a2d      	ldr	r2, [pc, #180]	@ (800b458 <HAL_GPIO_DeInit+0x1a8>)
 800b3a2:	697b      	ldr	r3, [r7, #20]
 800b3a4:	089b      	lsrs	r3, r3, #2
 800b3a6:	3302      	adds	r3, #2
 800b3a8:	009b      	lsls	r3, r3, #2
 800b3aa:	589a      	ldr	r2, [r3, r2]
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	43d9      	mvns	r1, r3
 800b3b0:	4829      	ldr	r0, [pc, #164]	@ (800b458 <HAL_GPIO_DeInit+0x1a8>)
 800b3b2:	697b      	ldr	r3, [r7, #20]
 800b3b4:	089b      	lsrs	r3, r3, #2
 800b3b6:	400a      	ands	r2, r1
 800b3b8:	3302      	adds	r3, #2
 800b3ba:	009b      	lsls	r3, r3, #2
 800b3bc:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Analog Mode (reset state) */
      GPIOx->MODER |= (GPIO_MODE_ANALOG << (position * 2U));
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	681a      	ldr	r2, [r3, #0]
 800b3c2:	697b      	ldr	r3, [r7, #20]
 800b3c4:	005b      	lsls	r3, r3, #1
 800b3c6:	2103      	movs	r1, #3
 800b3c8:	4099      	lsls	r1, r3
 800b3ca:	000b      	movs	r3, r1
 800b3cc:	431a      	orrs	r2, r3
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800b3d2:	697b      	ldr	r3, [r7, #20]
 800b3d4:	08da      	lsrs	r2, r3, #3
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	3208      	adds	r2, #8
 800b3da:	0092      	lsls	r2, r2, #2
 800b3dc:	58d3      	ldr	r3, [r2, r3]
 800b3de:	697a      	ldr	r2, [r7, #20]
 800b3e0:	2107      	movs	r1, #7
 800b3e2:	400a      	ands	r2, r1
 800b3e4:	0092      	lsls	r2, r2, #2
 800b3e6:	210f      	movs	r1, #15
 800b3e8:	4091      	lsls	r1, r2
 800b3ea:	000a      	movs	r2, r1
 800b3ec:	43d1      	mvns	r1, r2
 800b3ee:	697a      	ldr	r2, [r7, #20]
 800b3f0:	08d2      	lsrs	r2, r2, #3
 800b3f2:	4019      	ands	r1, r3
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	3208      	adds	r2, #8
 800b3f8:	0092      	lsls	r2, r2, #2
 800b3fa:	50d1      	str	r1, [r2, r3]

      /* Deactivate the Pull-up oand Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	68db      	ldr	r3, [r3, #12]
 800b400:	697a      	ldr	r2, [r7, #20]
 800b402:	0052      	lsls	r2, r2, #1
 800b404:	2103      	movs	r1, #3
 800b406:	4091      	lsls	r1, r2
 800b408:	000a      	movs	r2, r1
 800b40a:	43d2      	mvns	r2, r2
 800b40c:	401a      	ands	r2, r3
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position);
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	685b      	ldr	r3, [r3, #4]
 800b416:	2101      	movs	r1, #1
 800b418:	697a      	ldr	r2, [r7, #20]
 800b41a:	4091      	lsls	r1, r2
 800b41c:	000a      	movs	r2, r1
 800b41e:	43d2      	mvns	r2, r2
 800b420:	401a      	ands	r2, r3
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	689b      	ldr	r3, [r3, #8]
 800b42a:	697a      	ldr	r2, [r7, #20]
 800b42c:	0052      	lsls	r2, r2, #1
 800b42e:	2103      	movs	r1, #3
 800b430:	4091      	lsls	r1, r2
 800b432:	000a      	movs	r2, r1
 800b434:	43d2      	mvns	r2, r2
 800b436:	401a      	ands	r2, r3
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	609a      	str	r2, [r3, #8]
    }
    position++;
 800b43c:	697b      	ldr	r3, [r7, #20]
 800b43e:	3301      	adds	r3, #1
 800b440:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0)
 800b442:	683a      	ldr	r2, [r7, #0]
 800b444:	697b      	ldr	r3, [r7, #20]
 800b446:	40da      	lsrs	r2, r3
 800b448:	1e13      	subs	r3, r2, #0
 800b44a:	d000      	beq.n	800b44e <HAL_GPIO_DeInit+0x19e>
 800b44c:	e73c      	b.n	800b2c8 <HAL_GPIO_DeInit+0x18>
  }
}
 800b44e:	46c0      	nop			@ (mov r8, r8)
 800b450:	46c0      	nop			@ (mov r8, r8)
 800b452:	46bd      	mov	sp, r7
 800b454:	b006      	add	sp, #24
 800b456:	bd80      	pop	{r7, pc}
 800b458:	40010000 	.word	0x40010000
 800b45c:	50000400 	.word	0x50000400
 800b460:	50000800 	.word	0x50000800
 800b464:	50000c00 	.word	0x50000c00
 800b468:	50001000 	.word	0x50001000
 800b46c:	50001c00 	.word	0x50001c00
 800b470:	40010400 	.word	0x40010400

0800b474 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800b474:	b580      	push	{r7, lr}
 800b476:	b084      	sub	sp, #16
 800b478:	af00      	add	r7, sp, #0
 800b47a:	6078      	str	r0, [r7, #4]
 800b47c:	000a      	movs	r2, r1
 800b47e:	1cbb      	adds	r3, r7, #2
 800b480:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	691b      	ldr	r3, [r3, #16]
 800b486:	1cba      	adds	r2, r7, #2
 800b488:	8812      	ldrh	r2, [r2, #0]
 800b48a:	4013      	ands	r3, r2
 800b48c:	d004      	beq.n	800b498 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800b48e:	230f      	movs	r3, #15
 800b490:	18fb      	adds	r3, r7, r3
 800b492:	2201      	movs	r2, #1
 800b494:	701a      	strb	r2, [r3, #0]
 800b496:	e003      	b.n	800b4a0 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800b498:	230f      	movs	r3, #15
 800b49a:	18fb      	adds	r3, r7, r3
 800b49c:	2200      	movs	r2, #0
 800b49e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800b4a0:	230f      	movs	r3, #15
 800b4a2:	18fb      	adds	r3, r7, r3
 800b4a4:	781b      	ldrb	r3, [r3, #0]
}
 800b4a6:	0018      	movs	r0, r3
 800b4a8:	46bd      	mov	sp, r7
 800b4aa:	b004      	add	sp, #16
 800b4ac:	bd80      	pop	{r7, pc}

0800b4ae <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b4ae:	b580      	push	{r7, lr}
 800b4b0:	b082      	sub	sp, #8
 800b4b2:	af00      	add	r7, sp, #0
 800b4b4:	6078      	str	r0, [r7, #4]
 800b4b6:	0008      	movs	r0, r1
 800b4b8:	0011      	movs	r1, r2
 800b4ba:	1cbb      	adds	r3, r7, #2
 800b4bc:	1c02      	adds	r2, r0, #0
 800b4be:	801a      	strh	r2, [r3, #0]
 800b4c0:	1c7b      	adds	r3, r7, #1
 800b4c2:	1c0a      	adds	r2, r1, #0
 800b4c4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800b4c6:	1c7b      	adds	r3, r7, #1
 800b4c8:	781b      	ldrb	r3, [r3, #0]
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d004      	beq.n	800b4d8 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 800b4ce:	1cbb      	adds	r3, r7, #2
 800b4d0:	881a      	ldrh	r2, [r3, #0]
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800b4d6:	e003      	b.n	800b4e0 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800b4d8:	1cbb      	adds	r3, r7, #2
 800b4da:	881a      	ldrh	r2, [r3, #0]
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800b4e0:	46c0      	nop			@ (mov r8, r8)
 800b4e2:	46bd      	mov	sp, r7
 800b4e4:	b002      	add	sp, #8
 800b4e6:	bd80      	pop	{r7, pc}

0800b4e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800b4e8:	b580      	push	{r7, lr}
 800b4ea:	b082      	sub	sp, #8
 800b4ec:	af00      	add	r7, sp, #0
 800b4ee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d101      	bne.n	800b4fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800b4f6:	2301      	movs	r3, #1
 800b4f8:	e082      	b.n	800b600 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	2241      	movs	r2, #65	@ 0x41
 800b4fe:	5c9b      	ldrb	r3, [r3, r2]
 800b500:	b2db      	uxtb	r3, r3
 800b502:	2b00      	cmp	r3, #0
 800b504:	d107      	bne.n	800b516 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	2240      	movs	r2, #64	@ 0x40
 800b50a:	2100      	movs	r1, #0
 800b50c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	0018      	movs	r0, r3
 800b512:	f7fa fc01 	bl	8005d18 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	2241      	movs	r2, #65	@ 0x41
 800b51a:	2124      	movs	r1, #36	@ 0x24
 800b51c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	681a      	ldr	r2, [r3, #0]
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	2101      	movs	r1, #1
 800b52a:	438a      	bics	r2, r1
 800b52c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	685a      	ldr	r2, [r3, #4]
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	4934      	ldr	r1, [pc, #208]	@ (800b608 <HAL_I2C_Init+0x120>)
 800b538:	400a      	ands	r2, r1
 800b53a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	689a      	ldr	r2, [r3, #8]
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	4931      	ldr	r1, [pc, #196]	@ (800b60c <HAL_I2C_Init+0x124>)
 800b548:	400a      	ands	r2, r1
 800b54a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	68db      	ldr	r3, [r3, #12]
 800b550:	2b01      	cmp	r3, #1
 800b552:	d108      	bne.n	800b566 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	689a      	ldr	r2, [r3, #8]
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	2180      	movs	r1, #128	@ 0x80
 800b55e:	0209      	lsls	r1, r1, #8
 800b560:	430a      	orrs	r2, r1
 800b562:	609a      	str	r2, [r3, #8]
 800b564:	e007      	b.n	800b576 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	689a      	ldr	r2, [r3, #8]
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	2184      	movs	r1, #132	@ 0x84
 800b570:	0209      	lsls	r1, r1, #8
 800b572:	430a      	orrs	r2, r1
 800b574:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	68db      	ldr	r3, [r3, #12]
 800b57a:	2b02      	cmp	r3, #2
 800b57c:	d104      	bne.n	800b588 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	2280      	movs	r2, #128	@ 0x80
 800b584:	0112      	lsls	r2, r2, #4
 800b586:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	685a      	ldr	r2, [r3, #4]
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	491f      	ldr	r1, [pc, #124]	@ (800b610 <HAL_I2C_Init+0x128>)
 800b594:	430a      	orrs	r2, r1
 800b596:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	68da      	ldr	r2, [r3, #12]
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	491a      	ldr	r1, [pc, #104]	@ (800b60c <HAL_I2C_Init+0x124>)
 800b5a4:	400a      	ands	r2, r1
 800b5a6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	691a      	ldr	r2, [r3, #16]
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	695b      	ldr	r3, [r3, #20]
 800b5b0:	431a      	orrs	r2, r3
 800b5b2:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	699b      	ldr	r3, [r3, #24]
 800b5b8:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	430a      	orrs	r2, r1
 800b5c0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	69d9      	ldr	r1, [r3, #28]
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	6a1a      	ldr	r2, [r3, #32]
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	430a      	orrs	r2, r1
 800b5d0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	681a      	ldr	r2, [r3, #0]
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	2101      	movs	r1, #1
 800b5de:	430a      	orrs	r2, r1
 800b5e0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	2200      	movs	r2, #0
 800b5e6:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	2241      	movs	r2, #65	@ 0x41
 800b5ec:	2120      	movs	r1, #32
 800b5ee:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	2200      	movs	r2, #0
 800b5f4:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	2242      	movs	r2, #66	@ 0x42
 800b5fa:	2100      	movs	r1, #0
 800b5fc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b5fe:	2300      	movs	r3, #0
}
 800b600:	0018      	movs	r0, r3
 800b602:	46bd      	mov	sp, r7
 800b604:	b002      	add	sp, #8
 800b606:	bd80      	pop	{r7, pc}
 800b608:	f0ffffff 	.word	0xf0ffffff
 800b60c:	ffff7fff 	.word	0xffff7fff
 800b610:	02008000 	.word	0x02008000

0800b614 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 800b614:	b5b0      	push	{r4, r5, r7, lr}
 800b616:	b088      	sub	sp, #32
 800b618:	af02      	add	r7, sp, #8
 800b61a:	60f8      	str	r0, [r7, #12]
 800b61c:	0008      	movs	r0, r1
 800b61e:	607a      	str	r2, [r7, #4]
 800b620:	0019      	movs	r1, r3
 800b622:	230a      	movs	r3, #10
 800b624:	18fb      	adds	r3, r7, r3
 800b626:	1c02      	adds	r2, r0, #0
 800b628:	801a      	strh	r2, [r3, #0]
 800b62a:	2308      	movs	r3, #8
 800b62c:	18fb      	adds	r3, r7, r3
 800b62e:	1c0a      	adds	r2, r1, #0
 800b630:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	2241      	movs	r2, #65	@ 0x41
 800b636:	5c9b      	ldrb	r3, [r3, r2]
 800b638:	b2db      	uxtb	r3, r3
 800b63a:	2b20      	cmp	r3, #32
 800b63c:	d000      	beq.n	800b640 <HAL_I2C_Master_Transmit_DMA+0x2c>
 800b63e:	e0dd      	b.n	800b7fc <HAL_I2C_Master_Transmit_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	699a      	ldr	r2, [r3, #24]
 800b646:	2380      	movs	r3, #128	@ 0x80
 800b648:	021b      	lsls	r3, r3, #8
 800b64a:	401a      	ands	r2, r3
 800b64c:	2380      	movs	r3, #128	@ 0x80
 800b64e:	021b      	lsls	r3, r3, #8
 800b650:	429a      	cmp	r2, r3
 800b652:	d101      	bne.n	800b658 <HAL_I2C_Master_Transmit_DMA+0x44>
    {
      return HAL_BUSY;
 800b654:	2302      	movs	r3, #2
 800b656:	e0d2      	b.n	800b7fe <HAL_I2C_Master_Transmit_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	2240      	movs	r2, #64	@ 0x40
 800b65c:	5c9b      	ldrb	r3, [r3, r2]
 800b65e:	2b01      	cmp	r3, #1
 800b660:	d101      	bne.n	800b666 <HAL_I2C_Master_Transmit_DMA+0x52>
 800b662:	2302      	movs	r3, #2
 800b664:	e0cb      	b.n	800b7fe <HAL_I2C_Master_Transmit_DMA+0x1ea>
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	2240      	movs	r2, #64	@ 0x40
 800b66a:	2101      	movs	r1, #1
 800b66c:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	2241      	movs	r2, #65	@ 0x41
 800b672:	2121      	movs	r1, #33	@ 0x21
 800b674:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	2242      	movs	r2, #66	@ 0x42
 800b67a:	2110      	movs	r1, #16
 800b67c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	2200      	movs	r2, #0
 800b682:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	687a      	ldr	r2, [r7, #4]
 800b688:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	2208      	movs	r2, #8
 800b68e:	18ba      	adds	r2, r7, r2
 800b690:	8812      	ldrh	r2, [r2, #0]
 800b692:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	4a5c      	ldr	r2, [pc, #368]	@ (800b808 <HAL_I2C_Master_Transmit_DMA+0x1f4>)
 800b698:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	4a5b      	ldr	r2, [pc, #364]	@ (800b80c <HAL_I2C_Master_Transmit_DMA+0x1f8>)
 800b69e:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b6a4:	b29b      	uxth	r3, r3
 800b6a6:	2bff      	cmp	r3, #255	@ 0xff
 800b6a8:	d906      	bls.n	800b6b8 <HAL_I2C_Master_Transmit_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	22ff      	movs	r2, #255	@ 0xff
 800b6ae:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800b6b0:	2380      	movs	r3, #128	@ 0x80
 800b6b2:	045b      	lsls	r3, r3, #17
 800b6b4:	617b      	str	r3, [r7, #20]
 800b6b6:	e007      	b.n	800b6c8 <HAL_I2C_Master_Transmit_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b6bc:	b29a      	uxth	r2, r3
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800b6c2:	2380      	movs	r3, #128	@ 0x80
 800b6c4:	049b      	lsls	r3, r3, #18
 800b6c6:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d100      	bne.n	800b6d2 <HAL_I2C_Master_Transmit_DMA+0xbe>
 800b6d0:	e078      	b.n	800b7c4 <HAL_I2C_Master_Transmit_DMA+0x1b0>
    {
      if (hi2c->hdmatx != NULL)
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d023      	beq.n	800b722 <HAL_I2C_Master_Transmit_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b6de:	4a4c      	ldr	r2, [pc, #304]	@ (800b810 <HAL_I2C_Master_Transmit_DMA+0x1fc>)
 800b6e0:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b6e6:	4a4b      	ldr	r2, [pc, #300]	@ (800b814 <HAL_I2C_Master_Transmit_DMA+0x200>)
 800b6e8:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b6ee:	2200      	movs	r2, #0
 800b6f0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b6f6:	2200      	movs	r2, #0
 800b6f8:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800b6fe:	6879      	ldr	r1, [r7, #4]
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	3328      	adds	r3, #40	@ 0x28
 800b706:	001a      	movs	r2, r3
                                         hi2c->XferSize);
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 800b70c:	2513      	movs	r5, #19
 800b70e:	197c      	adds	r4, r7, r5
 800b710:	f7ff f8ac 	bl	800a86c <HAL_DMA_Start_IT>
 800b714:	0003      	movs	r3, r0
 800b716:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800b718:	197b      	adds	r3, r7, r5
 800b71a:	781b      	ldrb	r3, [r3, #0]
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d13d      	bne.n	800b79c <HAL_I2C_Master_Transmit_DMA+0x188>
 800b720:	e013      	b.n	800b74a <HAL_I2C_Master_Transmit_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	2241      	movs	r2, #65	@ 0x41
 800b726:	2120      	movs	r1, #32
 800b728:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	2242      	movs	r2, #66	@ 0x42
 800b72e:	2100      	movs	r1, #0
 800b730:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b736:	2280      	movs	r2, #128	@ 0x80
 800b738:	431a      	orrs	r2, r3
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	2240      	movs	r2, #64	@ 0x40
 800b742:	2100      	movs	r1, #0
 800b744:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800b746:	2301      	movs	r3, #1
 800b748:	e059      	b.n	800b7fe <HAL_I2C_Master_Transmit_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b74e:	b2da      	uxtb	r2, r3
 800b750:	697c      	ldr	r4, [r7, #20]
 800b752:	230a      	movs	r3, #10
 800b754:	18fb      	adds	r3, r7, r3
 800b756:	8819      	ldrh	r1, [r3, #0]
 800b758:	68f8      	ldr	r0, [r7, #12]
 800b75a:	4b2f      	ldr	r3, [pc, #188]	@ (800b818 <HAL_I2C_Master_Transmit_DMA+0x204>)
 800b75c:	9300      	str	r3, [sp, #0]
 800b75e:	0023      	movs	r3, r4
 800b760:	f001 fd0e 	bl	800d180 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b768:	b29a      	uxth	r2, r3
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b76e:	1ad3      	subs	r3, r2, r3
 800b770:	b29a      	uxth	r2, r3
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	2240      	movs	r2, #64	@ 0x40
 800b77a:	2100      	movs	r1, #0
 800b77c:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	2110      	movs	r1, #16
 800b782:	0018      	movs	r0, r3
 800b784:	f001 fd36 	bl	800d1f4 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	681a      	ldr	r2, [r3, #0]
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	2180      	movs	r1, #128	@ 0x80
 800b794:	01c9      	lsls	r1, r1, #7
 800b796:	430a      	orrs	r2, r1
 800b798:	601a      	str	r2, [r3, #0]
 800b79a:	e02d      	b.n	800b7f8 <HAL_I2C_Master_Transmit_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	2241      	movs	r2, #65	@ 0x41
 800b7a0:	2120      	movs	r1, #32
 800b7a2:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	2242      	movs	r2, #66	@ 0x42
 800b7a8:	2100      	movs	r1, #0
 800b7aa:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b7b0:	2210      	movs	r2, #16
 800b7b2:	431a      	orrs	r2, r3
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	2240      	movs	r2, #64	@ 0x40
 800b7bc:	2100      	movs	r1, #0
 800b7be:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800b7c0:	2301      	movs	r3, #1
 800b7c2:	e01c      	b.n	800b7fe <HAL_I2C_Master_Transmit_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	4a15      	ldr	r2, [pc, #84]	@ (800b81c <HAL_I2C_Master_Transmit_DMA+0x208>)
 800b7c8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b7ce:	b2da      	uxtb	r2, r3
 800b7d0:	2380      	movs	r3, #128	@ 0x80
 800b7d2:	049c      	lsls	r4, r3, #18
 800b7d4:	230a      	movs	r3, #10
 800b7d6:	18fb      	adds	r3, r7, r3
 800b7d8:	8819      	ldrh	r1, [r3, #0]
 800b7da:	68f8      	ldr	r0, [r7, #12]
 800b7dc:	4b0e      	ldr	r3, [pc, #56]	@ (800b818 <HAL_I2C_Master_Transmit_DMA+0x204>)
 800b7de:	9300      	str	r3, [sp, #0]
 800b7e0:	0023      	movs	r3, r4
 800b7e2:	f001 fccd 	bl	800d180 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	2240      	movs	r2, #64	@ 0x40
 800b7ea:	2100      	movs	r1, #0
 800b7ec:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	2101      	movs	r1, #1
 800b7f2:	0018      	movs	r0, r3
 800b7f4:	f001 fcfe 	bl	800d1f4 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 800b7f8:	2300      	movs	r3, #0
 800b7fa:	e000      	b.n	800b7fe <HAL_I2C_Master_Transmit_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800b7fc:	2302      	movs	r3, #2
  }
}
 800b7fe:	0018      	movs	r0, r3
 800b800:	46bd      	mov	sp, r7
 800b802:	b006      	add	sp, #24
 800b804:	bdb0      	pop	{r4, r5, r7, pc}
 800b806:	46c0      	nop			@ (mov r8, r8)
 800b808:	ffff0000 	.word	0xffff0000
 800b80c:	0800c019 	.word	0x0800c019
 800b810:	0800cfd1 	.word	0x0800cfd1
 800b814:	0800d111 	.word	0x0800d111
 800b818:	80002000 	.word	0x80002000
 800b81c:	0800bbc5 	.word	0x0800bbc5

0800b820 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 800b820:	b5b0      	push	{r4, r5, r7, lr}
 800b822:	b088      	sub	sp, #32
 800b824:	af02      	add	r7, sp, #8
 800b826:	60f8      	str	r0, [r7, #12]
 800b828:	0008      	movs	r0, r1
 800b82a:	607a      	str	r2, [r7, #4]
 800b82c:	0019      	movs	r1, r3
 800b82e:	230a      	movs	r3, #10
 800b830:	18fb      	adds	r3, r7, r3
 800b832:	1c02      	adds	r2, r0, #0
 800b834:	801a      	strh	r2, [r3, #0]
 800b836:	2308      	movs	r3, #8
 800b838:	18fb      	adds	r3, r7, r3
 800b83a:	1c0a      	adds	r2, r1, #0
 800b83c:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	2241      	movs	r2, #65	@ 0x41
 800b842:	5c9b      	ldrb	r3, [r3, r2]
 800b844:	b2db      	uxtb	r3, r3
 800b846:	2b20      	cmp	r3, #32
 800b848:	d000      	beq.n	800b84c <HAL_I2C_Master_Receive_DMA+0x2c>
 800b84a:	e0dd      	b.n	800ba08 <HAL_I2C_Master_Receive_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	699a      	ldr	r2, [r3, #24]
 800b852:	2380      	movs	r3, #128	@ 0x80
 800b854:	021b      	lsls	r3, r3, #8
 800b856:	401a      	ands	r2, r3
 800b858:	2380      	movs	r3, #128	@ 0x80
 800b85a:	021b      	lsls	r3, r3, #8
 800b85c:	429a      	cmp	r2, r3
 800b85e:	d101      	bne.n	800b864 <HAL_I2C_Master_Receive_DMA+0x44>
    {
      return HAL_BUSY;
 800b860:	2302      	movs	r3, #2
 800b862:	e0d2      	b.n	800ba0a <HAL_I2C_Master_Receive_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	2240      	movs	r2, #64	@ 0x40
 800b868:	5c9b      	ldrb	r3, [r3, r2]
 800b86a:	2b01      	cmp	r3, #1
 800b86c:	d101      	bne.n	800b872 <HAL_I2C_Master_Receive_DMA+0x52>
 800b86e:	2302      	movs	r3, #2
 800b870:	e0cb      	b.n	800ba0a <HAL_I2C_Master_Receive_DMA+0x1ea>
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	2240      	movs	r2, #64	@ 0x40
 800b876:	2101      	movs	r1, #1
 800b878:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	2241      	movs	r2, #65	@ 0x41
 800b87e:	2122      	movs	r1, #34	@ 0x22
 800b880:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	2242      	movs	r2, #66	@ 0x42
 800b886:	2110      	movs	r1, #16
 800b888:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	2200      	movs	r2, #0
 800b88e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	687a      	ldr	r2, [r7, #4]
 800b894:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	2208      	movs	r2, #8
 800b89a:	18ba      	adds	r2, r7, r2
 800b89c:	8812      	ldrh	r2, [r2, #0]
 800b89e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	4a5c      	ldr	r2, [pc, #368]	@ (800ba14 <HAL_I2C_Master_Receive_DMA+0x1f4>)
 800b8a4:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	4a5b      	ldr	r2, [pc, #364]	@ (800ba18 <HAL_I2C_Master_Receive_DMA+0x1f8>)
 800b8aa:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b8b0:	b29b      	uxth	r3, r3
 800b8b2:	2bff      	cmp	r3, #255	@ 0xff
 800b8b4:	d906      	bls.n	800b8c4 <HAL_I2C_Master_Receive_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	22ff      	movs	r2, #255	@ 0xff
 800b8ba:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800b8bc:	2380      	movs	r3, #128	@ 0x80
 800b8be:	045b      	lsls	r3, r3, #17
 800b8c0:	617b      	str	r3, [r7, #20]
 800b8c2:	e007      	b.n	800b8d4 <HAL_I2C_Master_Receive_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b8c8:	b29a      	uxth	r2, r3
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800b8ce:	2380      	movs	r3, #128	@ 0x80
 800b8d0:	049b      	lsls	r3, r3, #18
 800b8d2:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d100      	bne.n	800b8de <HAL_I2C_Master_Receive_DMA+0xbe>
 800b8dc:	e078      	b.n	800b9d0 <HAL_I2C_Master_Receive_DMA+0x1b0>
    {
      if (hi2c->hdmarx != NULL)
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d023      	beq.n	800b92e <HAL_I2C_Master_Receive_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b8ea:	4a4c      	ldr	r2, [pc, #304]	@ (800ba1c <HAL_I2C_Master_Receive_DMA+0x1fc>)
 800b8ec:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b8f2:	4a4b      	ldr	r2, [pc, #300]	@ (800ba20 <HAL_I2C_Master_Receive_DMA+0x200>)
 800b8f4:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b8fa:	2200      	movs	r2, #0
 800b8fc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b902:	2200      	movs	r2, #0
 800b904:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	3324      	adds	r3, #36	@ 0x24
 800b910:	0019      	movs	r1, r3
 800b912:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800b918:	2513      	movs	r5, #19
 800b91a:	197c      	adds	r4, r7, r5
 800b91c:	f7fe ffa6 	bl	800a86c <HAL_DMA_Start_IT>
 800b920:	0003      	movs	r3, r0
 800b922:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800b924:	197b      	adds	r3, r7, r5
 800b926:	781b      	ldrb	r3, [r3, #0]
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d13d      	bne.n	800b9a8 <HAL_I2C_Master_Receive_DMA+0x188>
 800b92c:	e013      	b.n	800b956 <HAL_I2C_Master_Receive_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	2241      	movs	r2, #65	@ 0x41
 800b932:	2120      	movs	r1, #32
 800b934:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	2242      	movs	r2, #66	@ 0x42
 800b93a:	2100      	movs	r1, #0
 800b93c:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b942:	2280      	movs	r2, #128	@ 0x80
 800b944:	431a      	orrs	r2, r3
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	2240      	movs	r2, #64	@ 0x40
 800b94e:	2100      	movs	r1, #0
 800b950:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800b952:	2301      	movs	r3, #1
 800b954:	e059      	b.n	800ba0a <HAL_I2C_Master_Receive_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b95a:	b2da      	uxtb	r2, r3
 800b95c:	697c      	ldr	r4, [r7, #20]
 800b95e:	230a      	movs	r3, #10
 800b960:	18fb      	adds	r3, r7, r3
 800b962:	8819      	ldrh	r1, [r3, #0]
 800b964:	68f8      	ldr	r0, [r7, #12]
 800b966:	4b2f      	ldr	r3, [pc, #188]	@ (800ba24 <HAL_I2C_Master_Receive_DMA+0x204>)
 800b968:	9300      	str	r3, [sp, #0]
 800b96a:	0023      	movs	r3, r4
 800b96c:	f001 fc08 	bl	800d180 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b974:	b29a      	uxth	r2, r3
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b97a:	1ad3      	subs	r3, r2, r3
 800b97c:	b29a      	uxth	r2, r3
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	2240      	movs	r2, #64	@ 0x40
 800b986:	2100      	movs	r1, #0
 800b988:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	2110      	movs	r1, #16
 800b98e:	0018      	movs	r0, r3
 800b990:	f001 fc30 	bl	800d1f4 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	681a      	ldr	r2, [r3, #0]
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	2180      	movs	r1, #128	@ 0x80
 800b9a0:	0209      	lsls	r1, r1, #8
 800b9a2:	430a      	orrs	r2, r1
 800b9a4:	601a      	str	r2, [r3, #0]
 800b9a6:	e02d      	b.n	800ba04 <HAL_I2C_Master_Receive_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	2241      	movs	r2, #65	@ 0x41
 800b9ac:	2120      	movs	r1, #32
 800b9ae:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	2242      	movs	r2, #66	@ 0x42
 800b9b4:	2100      	movs	r1, #0
 800b9b6:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b9bc:	2210      	movs	r2, #16
 800b9be:	431a      	orrs	r2, r3
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	2240      	movs	r2, #64	@ 0x40
 800b9c8:	2100      	movs	r1, #0
 800b9ca:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800b9cc:	2301      	movs	r3, #1
 800b9ce:	e01c      	b.n	800ba0a <HAL_I2C_Master_Receive_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	4a15      	ldr	r2, [pc, #84]	@ (800ba28 <HAL_I2C_Master_Receive_DMA+0x208>)
 800b9d4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b9da:	b2da      	uxtb	r2, r3
 800b9dc:	2380      	movs	r3, #128	@ 0x80
 800b9de:	049c      	lsls	r4, r3, #18
 800b9e0:	230a      	movs	r3, #10
 800b9e2:	18fb      	adds	r3, r7, r3
 800b9e4:	8819      	ldrh	r1, [r3, #0]
 800b9e6:	68f8      	ldr	r0, [r7, #12]
 800b9e8:	4b0e      	ldr	r3, [pc, #56]	@ (800ba24 <HAL_I2C_Master_Receive_DMA+0x204>)
 800b9ea:	9300      	str	r3, [sp, #0]
 800b9ec:	0023      	movs	r3, r4
 800b9ee:	f001 fbc7 	bl	800d180 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	2240      	movs	r2, #64	@ 0x40
 800b9f6:	2100      	movs	r1, #0
 800b9f8:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	2101      	movs	r1, #1
 800b9fe:	0018      	movs	r0, r3
 800ba00:	f001 fbf8 	bl	800d1f4 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 800ba04:	2300      	movs	r3, #0
 800ba06:	e000      	b.n	800ba0a <HAL_I2C_Master_Receive_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800ba08:	2302      	movs	r3, #2
  }
}
 800ba0a:	0018      	movs	r0, r3
 800ba0c:	46bd      	mov	sp, r7
 800ba0e:	b006      	add	sp, #24
 800ba10:	bdb0      	pop	{r4, r5, r7, pc}
 800ba12:	46c0      	nop			@ (mov r8, r8)
 800ba14:	ffff0000 	.word	0xffff0000
 800ba18:	0800c019 	.word	0x0800c019
 800ba1c:	0800d071 	.word	0x0800d071
 800ba20:	0800d111 	.word	0x0800d111
 800ba24:	80002400 	.word	0x80002400
 800ba28:	0800bbc5 	.word	0x0800bbc5

0800ba2c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800ba2c:	b580      	push	{r7, lr}
 800ba2e:	b084      	sub	sp, #16
 800ba30:	af00      	add	r7, sp, #0
 800ba32:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	699b      	ldr	r3, [r3, #24]
 800ba3a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d005      	beq.n	800ba58 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba50:	68ba      	ldr	r2, [r7, #8]
 800ba52:	68f9      	ldr	r1, [r7, #12]
 800ba54:	6878      	ldr	r0, [r7, #4]
 800ba56:	4798      	blx	r3
  }
}
 800ba58:	46c0      	nop			@ (mov r8, r8)
 800ba5a:	46bd      	mov	sp, r7
 800ba5c:	b004      	add	sp, #16
 800ba5e:	bd80      	pop	{r7, pc}

0800ba60 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800ba60:	b580      	push	{r7, lr}
 800ba62:	b086      	sub	sp, #24
 800ba64:	af00      	add	r7, sp, #0
 800ba66:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	699b      	ldr	r3, [r3, #24]
 800ba6e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800ba78:	697a      	ldr	r2, [r7, #20]
 800ba7a:	2380      	movs	r3, #128	@ 0x80
 800ba7c:	005b      	lsls	r3, r3, #1
 800ba7e:	4013      	ands	r3, r2
 800ba80:	d00e      	beq.n	800baa0 <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800ba82:	693b      	ldr	r3, [r7, #16]
 800ba84:	2280      	movs	r2, #128	@ 0x80
 800ba86:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800ba88:	d00a      	beq.n	800baa0 <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ba8e:	2201      	movs	r2, #1
 800ba90:	431a      	orrs	r2, r3
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	2280      	movs	r2, #128	@ 0x80
 800ba9c:	0052      	lsls	r2, r2, #1
 800ba9e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800baa0:	697a      	ldr	r2, [r7, #20]
 800baa2:	2380      	movs	r3, #128	@ 0x80
 800baa4:	00db      	lsls	r3, r3, #3
 800baa6:	4013      	ands	r3, r2
 800baa8:	d00e      	beq.n	800bac8 <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800baaa:	693b      	ldr	r3, [r7, #16]
 800baac:	2280      	movs	r2, #128	@ 0x80
 800baae:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800bab0:	d00a      	beq.n	800bac8 <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bab6:	2208      	movs	r2, #8
 800bab8:	431a      	orrs	r2, r3
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	2280      	movs	r2, #128	@ 0x80
 800bac4:	00d2      	lsls	r2, r2, #3
 800bac6:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800bac8:	697a      	ldr	r2, [r7, #20]
 800baca:	2380      	movs	r3, #128	@ 0x80
 800bacc:	009b      	lsls	r3, r3, #2
 800bace:	4013      	ands	r3, r2
 800bad0:	d00e      	beq.n	800baf0 <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800bad2:	693b      	ldr	r3, [r7, #16]
 800bad4:	2280      	movs	r2, #128	@ 0x80
 800bad6:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800bad8:	d00a      	beq.n	800baf0 <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bade:	2202      	movs	r2, #2
 800bae0:	431a      	orrs	r2, r3
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	2280      	movs	r2, #128	@ 0x80
 800baec:	0092      	lsls	r2, r2, #2
 800baee:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800baf4:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	220b      	movs	r2, #11
 800bafa:	4013      	ands	r3, r2
 800bafc:	d005      	beq.n	800bb0a <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 800bafe:	68fa      	ldr	r2, [r7, #12]
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	0011      	movs	r1, r2
 800bb04:	0018      	movs	r0, r3
 800bb06:	f001 f915 	bl	800cd34 <I2C_ITError>
  }
}
 800bb0a:	46c0      	nop			@ (mov r8, r8)
 800bb0c:	46bd      	mov	sp, r7
 800bb0e:	b006      	add	sp, #24
 800bb10:	bd80      	pop	{r7, pc}

0800bb12 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800bb12:	b580      	push	{r7, lr}
 800bb14:	b082      	sub	sp, #8
 800bb16:	af00      	add	r7, sp, #0
 800bb18:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800bb1a:	46c0      	nop			@ (mov r8, r8)
 800bb1c:	46bd      	mov	sp, r7
 800bb1e:	b002      	add	sp, #8
 800bb20:	bd80      	pop	{r7, pc}

0800bb22 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800bb22:	b580      	push	{r7, lr}
 800bb24:	b082      	sub	sp, #8
 800bb26:	af00      	add	r7, sp, #0
 800bb28:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800bb2a:	46c0      	nop			@ (mov r8, r8)
 800bb2c:	46bd      	mov	sp, r7
 800bb2e:	b002      	add	sp, #8
 800bb30:	bd80      	pop	{r7, pc}

0800bb32 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800bb32:	b580      	push	{r7, lr}
 800bb34:	b082      	sub	sp, #8
 800bb36:	af00      	add	r7, sp, #0
 800bb38:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800bb3a:	46c0      	nop			@ (mov r8, r8)
 800bb3c:	46bd      	mov	sp, r7
 800bb3e:	b002      	add	sp, #8
 800bb40:	bd80      	pop	{r7, pc}

0800bb42 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800bb42:	b580      	push	{r7, lr}
 800bb44:	b082      	sub	sp, #8
 800bb46:	af00      	add	r7, sp, #0
 800bb48:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800bb4a:	46c0      	nop			@ (mov r8, r8)
 800bb4c:	46bd      	mov	sp, r7
 800bb4e:	b002      	add	sp, #8
 800bb50:	bd80      	pop	{r7, pc}

0800bb52 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800bb52:	b580      	push	{r7, lr}
 800bb54:	b082      	sub	sp, #8
 800bb56:	af00      	add	r7, sp, #0
 800bb58:	6078      	str	r0, [r7, #4]
 800bb5a:	0008      	movs	r0, r1
 800bb5c:	0011      	movs	r1, r2
 800bb5e:	1cfb      	adds	r3, r7, #3
 800bb60:	1c02      	adds	r2, r0, #0
 800bb62:	701a      	strb	r2, [r3, #0]
 800bb64:	003b      	movs	r3, r7
 800bb66:	1c0a      	adds	r2, r1, #0
 800bb68:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800bb6a:	46c0      	nop			@ (mov r8, r8)
 800bb6c:	46bd      	mov	sp, r7
 800bb6e:	b002      	add	sp, #8
 800bb70:	bd80      	pop	{r7, pc}

0800bb72 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800bb72:	b580      	push	{r7, lr}
 800bb74:	b082      	sub	sp, #8
 800bb76:	af00      	add	r7, sp, #0
 800bb78:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800bb7a:	46c0      	nop			@ (mov r8, r8)
 800bb7c:	46bd      	mov	sp, r7
 800bb7e:	b002      	add	sp, #8
 800bb80:	bd80      	pop	{r7, pc}

0800bb82 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800bb82:	b580      	push	{r7, lr}
 800bb84:	b082      	sub	sp, #8
 800bb86:	af00      	add	r7, sp, #0
 800bb88:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800bb8a:	46c0      	nop			@ (mov r8, r8)
 800bb8c:	46bd      	mov	sp, r7
 800bb8e:	b002      	add	sp, #8
 800bb90:	bd80      	pop	{r7, pc}

0800bb92 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800bb92:	b580      	push	{r7, lr}
 800bb94:	b082      	sub	sp, #8
 800bb96:	af00      	add	r7, sp, #0
 800bb98:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800bb9a:	46c0      	nop			@ (mov r8, r8)
 800bb9c:	46bd      	mov	sp, r7
 800bb9e:	b002      	add	sp, #8
 800bba0:	bd80      	pop	{r7, pc}

0800bba2 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800bba2:	b580      	push	{r7, lr}
 800bba4:	b082      	sub	sp, #8
 800bba6:	af00      	add	r7, sp, #0
 800bba8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800bbaa:	46c0      	nop			@ (mov r8, r8)
 800bbac:	46bd      	mov	sp, r7
 800bbae:	b002      	add	sp, #8
 800bbb0:	bd80      	pop	{r7, pc}

0800bbb2 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800bbb2:	b580      	push	{r7, lr}
 800bbb4:	b082      	sub	sp, #8
 800bbb6:	af00      	add	r7, sp, #0
 800bbb8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800bbba:	46c0      	nop			@ (mov r8, r8)
 800bbbc:	46bd      	mov	sp, r7
 800bbbe:	b002      	add	sp, #8
 800bbc0:	bd80      	pop	{r7, pc}
	...

0800bbc4 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800bbc4:	b590      	push	{r4, r7, lr}
 800bbc6:	b089      	sub	sp, #36	@ 0x24
 800bbc8:	af02      	add	r7, sp, #8
 800bbca:	60f8      	str	r0, [r7, #12]
 800bbcc:	60b9      	str	r1, [r7, #8]
 800bbce:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 800bbd0:	68bb      	ldr	r3, [r7, #8]
 800bbd2:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	2240      	movs	r2, #64	@ 0x40
 800bbd8:	5c9b      	ldrb	r3, [r3, r2]
 800bbda:	2b01      	cmp	r3, #1
 800bbdc:	d101      	bne.n	800bbe2 <I2C_Master_ISR_IT+0x1e>
 800bbde:	2302      	movs	r3, #2
 800bbe0:	e113      	b.n	800be0a <I2C_Master_ISR_IT+0x246>
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	2240      	movs	r2, #64	@ 0x40
 800bbe6:	2101      	movs	r1, #1
 800bbe8:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800bbea:	697b      	ldr	r3, [r7, #20]
 800bbec:	2210      	movs	r2, #16
 800bbee:	4013      	ands	r3, r2
 800bbf0:	d012      	beq.n	800bc18 <I2C_Master_ISR_IT+0x54>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	2210      	movs	r2, #16
 800bbf6:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800bbf8:	d00e      	beq.n	800bc18 <I2C_Master_ISR_IT+0x54>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	2210      	movs	r2, #16
 800bc00:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bc06:	2204      	movs	r2, #4
 800bc08:	431a      	orrs	r2, r3
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	0018      	movs	r0, r3
 800bc12:	f001 f9ba 	bl	800cf8a <I2C_Flush_TXDR>
 800bc16:	e0e5      	b.n	800bde4 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800bc18:	697b      	ldr	r3, [r7, #20]
 800bc1a:	2204      	movs	r2, #4
 800bc1c:	4013      	ands	r3, r2
 800bc1e:	d021      	beq.n	800bc64 <I2C_Master_ISR_IT+0xa0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	2204      	movs	r2, #4
 800bc24:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800bc26:	d01d      	beq.n	800bc64 <I2C_Master_ISR_IT+0xa0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800bc28:	697b      	ldr	r3, [r7, #20]
 800bc2a:	2204      	movs	r2, #4
 800bc2c:	4393      	bics	r3, r2
 800bc2e:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc3a:	b2d2      	uxtb	r2, r2
 800bc3c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc42:	1c5a      	adds	r2, r3, #1
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bc4c:	3b01      	subs	r3, #1
 800bc4e:	b29a      	uxth	r2, r3
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bc58:	b29b      	uxth	r3, r3
 800bc5a:	3b01      	subs	r3, #1
 800bc5c:	b29a      	uxth	r2, r3
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800bc62:	e0bf      	b.n	800bde4 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800bc64:	697b      	ldr	r3, [r7, #20]
 800bc66:	2202      	movs	r2, #2
 800bc68:	4013      	ands	r3, r2
 800bc6a:	d01c      	beq.n	800bca6 <I2C_Master_ISR_IT+0xe2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	2202      	movs	r2, #2
 800bc70:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800bc72:	d018      	beq.n	800bca6 <I2C_Master_ISR_IT+0xe2>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc78:	781a      	ldrb	r2, [r3, #0]
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc84:	1c5a      	adds	r2, r3, #1
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bc8e:	3b01      	subs	r3, #1
 800bc90:	b29a      	uxth	r2, r3
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bc9a:	b29b      	uxth	r3, r3
 800bc9c:	3b01      	subs	r3, #1
 800bc9e:	b29a      	uxth	r2, r3
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800bca4:	e09e      	b.n	800bde4 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800bca6:	697b      	ldr	r3, [r7, #20]
 800bca8:	2280      	movs	r2, #128	@ 0x80
 800bcaa:	4013      	ands	r3, r2
 800bcac:	d100      	bne.n	800bcb0 <I2C_Master_ISR_IT+0xec>
 800bcae:	e069      	b.n	800bd84 <I2C_Master_ISR_IT+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	2240      	movs	r2, #64	@ 0x40
 800bcb4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800bcb6:	d065      	beq.n	800bd84 <I2C_Master_ISR_IT+0x1c0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bcbc:	b29b      	uxth	r3, r3
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d04a      	beq.n	800bd58 <I2C_Master_ISR_IT+0x194>
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d146      	bne.n	800bd58 <I2C_Master_ISR_IT+0x194>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	685b      	ldr	r3, [r3, #4]
 800bcd0:	b29a      	uxth	r2, r3
 800bcd2:	2112      	movs	r1, #18
 800bcd4:	187b      	adds	r3, r7, r1
 800bcd6:	0592      	lsls	r2, r2, #22
 800bcd8:	0d92      	lsrs	r2, r2, #22
 800bcda:	801a      	strh	r2, [r3, #0]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bce0:	b29b      	uxth	r3, r3
 800bce2:	2bff      	cmp	r3, #255	@ 0xff
 800bce4:	d910      	bls.n	800bd08 <I2C_Master_ISR_IT+0x144>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	22ff      	movs	r2, #255	@ 0xff
 800bcea:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bcf0:	b2da      	uxtb	r2, r3
 800bcf2:	2380      	movs	r3, #128	@ 0x80
 800bcf4:	045c      	lsls	r4, r3, #17
 800bcf6:	187b      	adds	r3, r7, r1
 800bcf8:	8819      	ldrh	r1, [r3, #0]
 800bcfa:	68f8      	ldr	r0, [r7, #12]
 800bcfc:	2300      	movs	r3, #0
 800bcfe:	9300      	str	r3, [sp, #0]
 800bd00:	0023      	movs	r3, r4
 800bd02:	f001 fa3d 	bl	800d180 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bd06:	e03c      	b.n	800bd82 <I2C_Master_ISR_IT+0x1be>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bd0c:	b29a      	uxth	r2, r3
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd16:	4a3f      	ldr	r2, [pc, #252]	@ (800be14 <I2C_Master_ISR_IT+0x250>)
 800bd18:	4293      	cmp	r3, r2
 800bd1a:	d00e      	beq.n	800bd3a <I2C_Master_ISR_IT+0x176>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bd20:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800bd26:	2312      	movs	r3, #18
 800bd28:	18fb      	adds	r3, r7, r3
 800bd2a:	8819      	ldrh	r1, [r3, #0]
 800bd2c:	68f8      	ldr	r0, [r7, #12]
 800bd2e:	2300      	movs	r3, #0
 800bd30:	9300      	str	r3, [sp, #0]
 800bd32:	0023      	movs	r3, r4
 800bd34:	f001 fa24 	bl	800d180 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bd38:	e023      	b.n	800bd82 <I2C_Master_ISR_IT+0x1be>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bd3e:	b2da      	uxtb	r2, r3
 800bd40:	2380      	movs	r3, #128	@ 0x80
 800bd42:	049c      	lsls	r4, r3, #18
 800bd44:	2312      	movs	r3, #18
 800bd46:	18fb      	adds	r3, r7, r3
 800bd48:	8819      	ldrh	r1, [r3, #0]
 800bd4a:	68f8      	ldr	r0, [r7, #12]
 800bd4c:	2300      	movs	r3, #0
 800bd4e:	9300      	str	r3, [sp, #0]
 800bd50:	0023      	movs	r3, r4
 800bd52:	f001 fa15 	bl	800d180 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bd56:	e014      	b.n	800bd82 <I2C_Master_ISR_IT+0x1be>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	685a      	ldr	r2, [r3, #4]
 800bd5e:	2380      	movs	r3, #128	@ 0x80
 800bd60:	049b      	lsls	r3, r3, #18
 800bd62:	401a      	ands	r2, r3
 800bd64:	2380      	movs	r3, #128	@ 0x80
 800bd66:	049b      	lsls	r3, r3, #18
 800bd68:	429a      	cmp	r2, r3
 800bd6a:	d004      	beq.n	800bd76 <I2C_Master_ISR_IT+0x1b2>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	0018      	movs	r0, r3
 800bd70:	f000 fcf4 	bl	800c75c <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800bd74:	e036      	b.n	800bde4 <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	2140      	movs	r1, #64	@ 0x40
 800bd7a:	0018      	movs	r0, r3
 800bd7c:	f000 ffda 	bl	800cd34 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800bd80:	e030      	b.n	800bde4 <I2C_Master_ISR_IT+0x220>
 800bd82:	e02f      	b.n	800bde4 <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800bd84:	697b      	ldr	r3, [r7, #20]
 800bd86:	2240      	movs	r2, #64	@ 0x40
 800bd88:	4013      	ands	r3, r2
 800bd8a:	d02b      	beq.n	800bde4 <I2C_Master_ISR_IT+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	2240      	movs	r2, #64	@ 0x40
 800bd90:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800bd92:	d027      	beq.n	800bde4 <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bd98:	b29b      	uxth	r3, r3
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d11d      	bne.n	800bdda <I2C_Master_ISR_IT+0x216>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	685a      	ldr	r2, [r3, #4]
 800bda4:	2380      	movs	r3, #128	@ 0x80
 800bda6:	049b      	lsls	r3, r3, #18
 800bda8:	401a      	ands	r2, r3
 800bdaa:	2380      	movs	r3, #128	@ 0x80
 800bdac:	049b      	lsls	r3, r3, #18
 800bdae:	429a      	cmp	r2, r3
 800bdb0:	d018      	beq.n	800bde4 <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bdb6:	4a17      	ldr	r2, [pc, #92]	@ (800be14 <I2C_Master_ISR_IT+0x250>)
 800bdb8:	4293      	cmp	r3, r2
 800bdba:	d109      	bne.n	800bdd0 <I2C_Master_ISR_IT+0x20c>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	685a      	ldr	r2, [r3, #4]
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	2180      	movs	r1, #128	@ 0x80
 800bdc8:	01c9      	lsls	r1, r1, #7
 800bdca:	430a      	orrs	r2, r1
 800bdcc:	605a      	str	r2, [r3, #4]
 800bdce:	e009      	b.n	800bde4 <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	0018      	movs	r0, r3
 800bdd4:	f000 fcc2 	bl	800c75c <I2C_ITMasterSeqCplt>
 800bdd8:	e004      	b.n	800bde4 <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	2140      	movs	r1, #64	@ 0x40
 800bdde:	0018      	movs	r0, r3
 800bde0:	f000 ffa8 	bl	800cd34 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800bde4:	697b      	ldr	r3, [r7, #20]
 800bde6:	2220      	movs	r2, #32
 800bde8:	4013      	ands	r3, r2
 800bdea:	d009      	beq.n	800be00 <I2C_Master_ISR_IT+0x23c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	2220      	movs	r2, #32
 800bdf0:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800bdf2:	d005      	beq.n	800be00 <I2C_Master_ISR_IT+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 800bdf4:	697a      	ldr	r2, [r7, #20]
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	0011      	movs	r1, r2
 800bdfa:	0018      	movs	r0, r3
 800bdfc:	f000 fd54 	bl	800c8a8 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	2240      	movs	r2, #64	@ 0x40
 800be04:	2100      	movs	r1, #0
 800be06:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800be08:	2300      	movs	r3, #0
}
 800be0a:	0018      	movs	r0, r3
 800be0c:	46bd      	mov	sp, r7
 800be0e:	b007      	add	sp, #28
 800be10:	bd90      	pop	{r4, r7, pc}
 800be12:	46c0      	nop			@ (mov r8, r8)
 800be14:	ffff0000 	.word	0xffff0000

0800be18 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800be18:	b580      	push	{r7, lr}
 800be1a:	b086      	sub	sp, #24
 800be1c:	af00      	add	r7, sp, #0
 800be1e:	60f8      	str	r0, [r7, #12]
 800be20:	60b9      	str	r1, [r7, #8]
 800be22:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be28:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800be2a:	68bb      	ldr	r3, [r7, #8]
 800be2c:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	2240      	movs	r2, #64	@ 0x40
 800be32:	5c9b      	ldrb	r3, [r3, r2]
 800be34:	2b01      	cmp	r3, #1
 800be36:	d101      	bne.n	800be3c <I2C_Slave_ISR_IT+0x24>
 800be38:	2302      	movs	r3, #2
 800be3a:	e0e6      	b.n	800c00a <I2C_Slave_ISR_IT+0x1f2>
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	2240      	movs	r2, #64	@ 0x40
 800be40:	2101      	movs	r1, #1
 800be42:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800be44:	693b      	ldr	r3, [r7, #16]
 800be46:	2220      	movs	r2, #32
 800be48:	4013      	ands	r3, r2
 800be4a:	d009      	beq.n	800be60 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	2220      	movs	r2, #32
 800be50:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800be52:	d005      	beq.n	800be60 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800be54:	693a      	ldr	r2, [r7, #16]
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	0011      	movs	r1, r2
 800be5a:	0018      	movs	r0, r3
 800be5c:	f000 fdf2 	bl	800ca44 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800be60:	693b      	ldr	r3, [r7, #16]
 800be62:	2210      	movs	r2, #16
 800be64:	4013      	ands	r3, r2
 800be66:	d052      	beq.n	800bf0e <I2C_Slave_ISR_IT+0xf6>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	2210      	movs	r2, #16
 800be6c:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800be6e:	d04e      	beq.n	800bf0e <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800be74:	b29b      	uxth	r3, r3
 800be76:	2b00      	cmp	r3, #0
 800be78:	d12d      	bne.n	800bed6 <I2C_Slave_ISR_IT+0xbe>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	2241      	movs	r2, #65	@ 0x41
 800be7e:	5c9b      	ldrb	r3, [r3, r2]
 800be80:	b2db      	uxtb	r3, r3
 800be82:	2b28      	cmp	r3, #40	@ 0x28
 800be84:	d10b      	bne.n	800be9e <I2C_Slave_ISR_IT+0x86>
 800be86:	697a      	ldr	r2, [r7, #20]
 800be88:	2380      	movs	r3, #128	@ 0x80
 800be8a:	049b      	lsls	r3, r3, #18
 800be8c:	429a      	cmp	r2, r3
 800be8e:	d106      	bne.n	800be9e <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800be90:	693a      	ldr	r2, [r7, #16]
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	0011      	movs	r1, r2
 800be96:	0018      	movs	r0, r3
 800be98:	f000 fef4 	bl	800cc84 <I2C_ITListenCplt>
 800be9c:	e036      	b.n	800bf0c <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	2241      	movs	r2, #65	@ 0x41
 800bea2:	5c9b      	ldrb	r3, [r3, r2]
 800bea4:	b2db      	uxtb	r3, r3
 800bea6:	2b29      	cmp	r3, #41	@ 0x29
 800bea8:	d110      	bne.n	800becc <I2C_Slave_ISR_IT+0xb4>
 800beaa:	697b      	ldr	r3, [r7, #20]
 800beac:	4a59      	ldr	r2, [pc, #356]	@ (800c014 <I2C_Slave_ISR_IT+0x1fc>)
 800beae:	4293      	cmp	r3, r2
 800beb0:	d00c      	beq.n	800becc <I2C_Slave_ISR_IT+0xb4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	2210      	movs	r2, #16
 800beb8:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	0018      	movs	r0, r3
 800bebe:	f001 f864 	bl	800cf8a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	0018      	movs	r0, r3
 800bec6:	f000 fc8b 	bl	800c7e0 <I2C_ITSlaveSeqCplt>
 800beca:	e01f      	b.n	800bf0c <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	2210      	movs	r2, #16
 800bed2:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800bed4:	e091      	b.n	800bffa <I2C_Slave_ISR_IT+0x1e2>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	2210      	movs	r2, #16
 800bedc:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bee2:	2204      	movs	r2, #4
 800bee4:	431a      	orrs	r2, r3
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800beea:	697b      	ldr	r3, [r7, #20]
 800beec:	2b00      	cmp	r3, #0
 800beee:	d005      	beq.n	800befc <I2C_Slave_ISR_IT+0xe4>
 800bef0:	697a      	ldr	r2, [r7, #20]
 800bef2:	2380      	movs	r3, #128	@ 0x80
 800bef4:	045b      	lsls	r3, r3, #17
 800bef6:	429a      	cmp	r2, r3
 800bef8:	d000      	beq.n	800befc <I2C_Slave_ISR_IT+0xe4>
 800befa:	e07e      	b.n	800bffa <I2C_Slave_ISR_IT+0x1e2>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	0011      	movs	r1, r2
 800bf04:	0018      	movs	r0, r3
 800bf06:	f000 ff15 	bl	800cd34 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800bf0a:	e076      	b.n	800bffa <I2C_Slave_ISR_IT+0x1e2>
 800bf0c:	e075      	b.n	800bffa <I2C_Slave_ISR_IT+0x1e2>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800bf0e:	693b      	ldr	r3, [r7, #16]
 800bf10:	2204      	movs	r2, #4
 800bf12:	4013      	ands	r3, r2
 800bf14:	d02f      	beq.n	800bf76 <I2C_Slave_ISR_IT+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	2204      	movs	r2, #4
 800bf1a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800bf1c:	d02b      	beq.n	800bf76 <I2C_Slave_ISR_IT+0x15e>
  {
    if (hi2c->XferCount > 0U)
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bf22:	b29b      	uxth	r3, r3
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d018      	beq.n	800bf5a <I2C_Slave_ISR_IT+0x142>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf32:	b2d2      	uxtb	r2, r2
 800bf34:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf3a:	1c5a      	adds	r2, r3, #1
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bf44:	3b01      	subs	r3, #1
 800bf46:	b29a      	uxth	r2, r3
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bf50:	b29b      	uxth	r3, r3
 800bf52:	3b01      	subs	r3, #1
 800bf54:	b29a      	uxth	r2, r3
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bf5e:	b29b      	uxth	r3, r3
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d14c      	bne.n	800bffe <I2C_Slave_ISR_IT+0x1e6>
 800bf64:	697b      	ldr	r3, [r7, #20]
 800bf66:	4a2b      	ldr	r2, [pc, #172]	@ (800c014 <I2C_Slave_ISR_IT+0x1fc>)
 800bf68:	4293      	cmp	r3, r2
 800bf6a:	d048      	beq.n	800bffe <I2C_Slave_ISR_IT+0x1e6>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	0018      	movs	r0, r3
 800bf70:	f000 fc36 	bl	800c7e0 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800bf74:	e043      	b.n	800bffe <I2C_Slave_ISR_IT+0x1e6>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800bf76:	693b      	ldr	r3, [r7, #16]
 800bf78:	2208      	movs	r2, #8
 800bf7a:	4013      	ands	r3, r2
 800bf7c:	d00a      	beq.n	800bf94 <I2C_Slave_ISR_IT+0x17c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	2208      	movs	r2, #8
 800bf82:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800bf84:	d006      	beq.n	800bf94 <I2C_Slave_ISR_IT+0x17c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800bf86:	693a      	ldr	r2, [r7, #16]
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	0011      	movs	r1, r2
 800bf8c:	0018      	movs	r0, r3
 800bf8e:	f000 fb41 	bl	800c614 <I2C_ITAddrCplt>
 800bf92:	e035      	b.n	800c000 <I2C_Slave_ISR_IT+0x1e8>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800bf94:	693b      	ldr	r3, [r7, #16]
 800bf96:	2202      	movs	r2, #2
 800bf98:	4013      	ands	r3, r2
 800bf9a:	d031      	beq.n	800c000 <I2C_Slave_ISR_IT+0x1e8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	2202      	movs	r2, #2
 800bfa0:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800bfa2:	d02d      	beq.n	800c000 <I2C_Slave_ISR_IT+0x1e8>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bfa8:	b29b      	uxth	r3, r3
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d018      	beq.n	800bfe0 <I2C_Slave_ISR_IT+0x1c8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bfb2:	781a      	ldrb	r2, [r3, #0]
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bfbe:	1c5a      	adds	r2, r3, #1
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bfc8:	b29b      	uxth	r3, r3
 800bfca:	3b01      	subs	r3, #1
 800bfcc:	b29a      	uxth	r2, r3
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bfd6:	3b01      	subs	r3, #1
 800bfd8:	b29a      	uxth	r2, r3
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	851a      	strh	r2, [r3, #40]	@ 0x28
 800bfde:	e00f      	b.n	800c000 <I2C_Slave_ISR_IT+0x1e8>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800bfe0:	697a      	ldr	r2, [r7, #20]
 800bfe2:	2380      	movs	r3, #128	@ 0x80
 800bfe4:	045b      	lsls	r3, r3, #17
 800bfe6:	429a      	cmp	r2, r3
 800bfe8:	d002      	beq.n	800bff0 <I2C_Slave_ISR_IT+0x1d8>
 800bfea:	697b      	ldr	r3, [r7, #20]
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d107      	bne.n	800c000 <I2C_Slave_ISR_IT+0x1e8>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	0018      	movs	r0, r3
 800bff4:	f000 fbf4 	bl	800c7e0 <I2C_ITSlaveSeqCplt>
 800bff8:	e002      	b.n	800c000 <I2C_Slave_ISR_IT+0x1e8>
    if (hi2c->XferCount == 0U)
 800bffa:	46c0      	nop			@ (mov r8, r8)
 800bffc:	e000      	b.n	800c000 <I2C_Slave_ISR_IT+0x1e8>
    if ((hi2c->XferCount == 0U) && \
 800bffe:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	2240      	movs	r2, #64	@ 0x40
 800c004:	2100      	movs	r1, #0
 800c006:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c008:	2300      	movs	r3, #0
}
 800c00a:	0018      	movs	r0, r3
 800c00c:	46bd      	mov	sp, r7
 800c00e:	b006      	add	sp, #24
 800c010:	bd80      	pop	{r7, pc}
 800c012:	46c0      	nop			@ (mov r8, r8)
 800c014:	ffff0000 	.word	0xffff0000

0800c018 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 800c018:	b590      	push	{r4, r7, lr}
 800c01a:	b089      	sub	sp, #36	@ 0x24
 800c01c:	af02      	add	r7, sp, #8
 800c01e:	60f8      	str	r0, [r7, #12]
 800c020:	60b9      	str	r1, [r7, #8]
 800c022:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	2240      	movs	r2, #64	@ 0x40
 800c028:	5c9b      	ldrb	r3, [r3, r2]
 800c02a:	2b01      	cmp	r3, #1
 800c02c:	d101      	bne.n	800c032 <I2C_Master_ISR_DMA+0x1a>
 800c02e:	2302      	movs	r3, #2
 800c030:	e0e7      	b.n	800c202 <I2C_Master_ISR_DMA+0x1ea>
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	2240      	movs	r2, #64	@ 0x40
 800c036:	2101      	movs	r1, #1
 800c038:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800c03a:	68bb      	ldr	r3, [r7, #8]
 800c03c:	2210      	movs	r2, #16
 800c03e:	4013      	ands	r3, r2
 800c040:	d017      	beq.n	800c072 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	2210      	movs	r2, #16
 800c046:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800c048:	d013      	beq.n	800c072 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	2210      	movs	r2, #16
 800c050:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c056:	2204      	movs	r2, #4
 800c058:	431a      	orrs	r2, r3
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	2120      	movs	r1, #32
 800c062:	0018      	movs	r0, r3
 800c064:	f001 f8c6 	bl	800d1f4 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	0018      	movs	r0, r3
 800c06c:	f000 ff8d 	bl	800cf8a <I2C_Flush_TXDR>
 800c070:	e0c2      	b.n	800c1f8 <I2C_Master_ISR_DMA+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800c072:	68bb      	ldr	r3, [r7, #8]
 800c074:	2280      	movs	r2, #128	@ 0x80
 800c076:	4013      	ands	r3, r2
 800c078:	d100      	bne.n	800c07c <I2C_Master_ISR_DMA+0x64>
 800c07a:	e07c      	b.n	800c176 <I2C_Master_ISR_DMA+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	2240      	movs	r2, #64	@ 0x40
 800c080:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800c082:	d100      	bne.n	800c086 <I2C_Master_ISR_DMA+0x6e>
 800c084:	e077      	b.n	800c176 <I2C_Master_ISR_DMA+0x15e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	681a      	ldr	r2, [r3, #0]
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	2140      	movs	r1, #64	@ 0x40
 800c092:	438a      	bics	r2, r1
 800c094:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c09a:	b29b      	uxth	r3, r3
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d055      	beq.n	800c14c <I2C_Master_ISR_DMA+0x134>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	685b      	ldr	r3, [r3, #4]
 800c0a6:	b29a      	uxth	r2, r3
 800c0a8:	2312      	movs	r3, #18
 800c0aa:	18fb      	adds	r3, r7, r3
 800c0ac:	0592      	lsls	r2, r2, #22
 800c0ae:	0d92      	lsrs	r2, r2, #22
 800c0b0:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c0b6:	b29b      	uxth	r3, r3
 800c0b8:	2bff      	cmp	r3, #255	@ 0xff
 800c0ba:	d906      	bls.n	800c0ca <I2C_Master_ISR_DMA+0xb2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	22ff      	movs	r2, #255	@ 0xff
 800c0c0:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 800c0c2:	2380      	movs	r3, #128	@ 0x80
 800c0c4:	045b      	lsls	r3, r3, #17
 800c0c6:	617b      	str	r3, [r7, #20]
 800c0c8:	e010      	b.n	800c0ec <I2C_Master_ISR_DMA+0xd4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c0ce:	b29a      	uxth	r2, r3
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c0d8:	4a4c      	ldr	r2, [pc, #304]	@ (800c20c <I2C_Master_ISR_DMA+0x1f4>)
 800c0da:	4293      	cmp	r3, r2
 800c0dc:	d003      	beq.n	800c0e6 <I2C_Master_ISR_DMA+0xce>
        {
          xfermode = hi2c->XferOptions;
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c0e2:	617b      	str	r3, [r7, #20]
 800c0e4:	e002      	b.n	800c0ec <I2C_Master_ISR_DMA+0xd4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800c0e6:	2380      	movs	r3, #128	@ 0x80
 800c0e8:	049b      	lsls	r3, r3, #18
 800c0ea:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c0f0:	b2da      	uxtb	r2, r3
 800c0f2:	697c      	ldr	r4, [r7, #20]
 800c0f4:	2312      	movs	r3, #18
 800c0f6:	18fb      	adds	r3, r7, r3
 800c0f8:	8819      	ldrh	r1, [r3, #0]
 800c0fa:	68f8      	ldr	r0, [r7, #12]
 800c0fc:	2300      	movs	r3, #0
 800c0fe:	9300      	str	r3, [sp, #0]
 800c100:	0023      	movs	r3, r4
 800c102:	f001 f83d 	bl	800d180 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c10a:	b29a      	uxth	r2, r3
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c110:	1ad3      	subs	r3, r2, r3
 800c112:	b29a      	uxth	r2, r3
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	2241      	movs	r2, #65	@ 0x41
 800c11c:	5c9b      	ldrb	r3, [r3, r2]
 800c11e:	b2db      	uxtb	r3, r3
 800c120:	2b22      	cmp	r3, #34	@ 0x22
 800c122:	d109      	bne.n	800c138 <I2C_Master_ISR_DMA+0x120>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	681a      	ldr	r2, [r3, #0]
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	2180      	movs	r1, #128	@ 0x80
 800c130:	0209      	lsls	r1, r1, #8
 800c132:	430a      	orrs	r2, r1
 800c134:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800c136:	e05f      	b.n	800c1f8 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	681a      	ldr	r2, [r3, #0]
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	2180      	movs	r1, #128	@ 0x80
 800c144:	01c9      	lsls	r1, r1, #7
 800c146:	430a      	orrs	r2, r1
 800c148:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800c14a:	e055      	b.n	800c1f8 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	685a      	ldr	r2, [r3, #4]
 800c152:	2380      	movs	r3, #128	@ 0x80
 800c154:	049b      	lsls	r3, r3, #18
 800c156:	401a      	ands	r2, r3
 800c158:	2380      	movs	r3, #128	@ 0x80
 800c15a:	049b      	lsls	r3, r3, #18
 800c15c:	429a      	cmp	r2, r3
 800c15e:	d004      	beq.n	800c16a <I2C_Master_ISR_DMA+0x152>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	0018      	movs	r0, r3
 800c164:	f000 fafa 	bl	800c75c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800c168:	e046      	b.n	800c1f8 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	2140      	movs	r1, #64	@ 0x40
 800c16e:	0018      	movs	r0, r3
 800c170:	f000 fde0 	bl	800cd34 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800c174:	e040      	b.n	800c1f8 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800c176:	68bb      	ldr	r3, [r7, #8]
 800c178:	2240      	movs	r2, #64	@ 0x40
 800c17a:	4013      	ands	r3, r2
 800c17c:	d02c      	beq.n	800c1d8 <I2C_Master_ISR_DMA+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	2240      	movs	r2, #64	@ 0x40
 800c182:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800c184:	d028      	beq.n	800c1d8 <I2C_Master_ISR_DMA+0x1c0>
  {
    if (hi2c->XferCount == 0U)
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c18a:	b29b      	uxth	r3, r3
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d11d      	bne.n	800c1cc <I2C_Master_ISR_DMA+0x1b4>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	685a      	ldr	r2, [r3, #4]
 800c196:	2380      	movs	r3, #128	@ 0x80
 800c198:	049b      	lsls	r3, r3, #18
 800c19a:	401a      	ands	r2, r3
 800c19c:	2380      	movs	r3, #128	@ 0x80
 800c19e:	049b      	lsls	r3, r3, #18
 800c1a0:	429a      	cmp	r2, r3
 800c1a2:	d028      	beq.n	800c1f6 <I2C_Master_ISR_DMA+0x1de>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c1a8:	4a18      	ldr	r2, [pc, #96]	@ (800c20c <I2C_Master_ISR_DMA+0x1f4>)
 800c1aa:	4293      	cmp	r3, r2
 800c1ac:	d109      	bne.n	800c1c2 <I2C_Master_ISR_DMA+0x1aa>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	685a      	ldr	r2, [r3, #4]
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	2180      	movs	r1, #128	@ 0x80
 800c1ba:	01c9      	lsls	r1, r1, #7
 800c1bc:	430a      	orrs	r2, r1
 800c1be:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800c1c0:	e019      	b.n	800c1f6 <I2C_Master_ISR_DMA+0x1de>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	0018      	movs	r0, r3
 800c1c6:	f000 fac9 	bl	800c75c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800c1ca:	e014      	b.n	800c1f6 <I2C_Master_ISR_DMA+0x1de>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	2140      	movs	r1, #64	@ 0x40
 800c1d0:	0018      	movs	r0, r3
 800c1d2:	f000 fdaf 	bl	800cd34 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800c1d6:	e00e      	b.n	800c1f6 <I2C_Master_ISR_DMA+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c1d8:	68bb      	ldr	r3, [r7, #8]
 800c1da:	2220      	movs	r2, #32
 800c1dc:	4013      	ands	r3, r2
 800c1de:	d00b      	beq.n	800c1f8 <I2C_Master_ISR_DMA+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	2220      	movs	r2, #32
 800c1e4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c1e6:	d007      	beq.n	800c1f8 <I2C_Master_ISR_DMA+0x1e0>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800c1e8:	68ba      	ldr	r2, [r7, #8]
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	0011      	movs	r1, r2
 800c1ee:	0018      	movs	r0, r3
 800c1f0:	f000 fb5a 	bl	800c8a8 <I2C_ITMasterCplt>
 800c1f4:	e000      	b.n	800c1f8 <I2C_Master_ISR_DMA+0x1e0>
    if (hi2c->XferCount == 0U)
 800c1f6:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	2240      	movs	r2, #64	@ 0x40
 800c1fc:	2100      	movs	r1, #0
 800c1fe:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c200:	2300      	movs	r3, #0
}
 800c202:	0018      	movs	r0, r3
 800c204:	46bd      	mov	sp, r7
 800c206:	b007      	add	sp, #28
 800c208:	bd90      	pop	{r4, r7, pc}
 800c20a:	46c0      	nop			@ (mov r8, r8)
 800c20c:	ffff0000 	.word	0xffff0000

0800c210 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 800c210:	b590      	push	{r4, r7, lr}
 800c212:	b089      	sub	sp, #36	@ 0x24
 800c214:	af02      	add	r7, sp, #8
 800c216:	60f8      	str	r0, [r7, #12]
 800c218:	60b9      	str	r1, [r7, #8]
 800c21a:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 800c21c:	4b88      	ldr	r3, [pc, #544]	@ (800c440 <I2C_Mem_ISR_DMA+0x230>)
 800c21e:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	2240      	movs	r2, #64	@ 0x40
 800c224:	5c9b      	ldrb	r3, [r3, r2]
 800c226:	2b01      	cmp	r3, #1
 800c228:	d101      	bne.n	800c22e <I2C_Mem_ISR_DMA+0x1e>
 800c22a:	2302      	movs	r3, #2
 800c22c:	e104      	b.n	800c438 <I2C_Mem_ISR_DMA+0x228>
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	2240      	movs	r2, #64	@ 0x40
 800c232:	2101      	movs	r1, #1
 800c234:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800c236:	68bb      	ldr	r3, [r7, #8]
 800c238:	2210      	movs	r2, #16
 800c23a:	4013      	ands	r3, r2
 800c23c:	d017      	beq.n	800c26e <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	2210      	movs	r2, #16
 800c242:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800c244:	d013      	beq.n	800c26e <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	2210      	movs	r2, #16
 800c24c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c252:	2204      	movs	r2, #4
 800c254:	431a      	orrs	r2, r3
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	2120      	movs	r1, #32
 800c25e:	0018      	movs	r0, r3
 800c260:	f000 ffc8 	bl	800d1f4 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	0018      	movs	r0, r3
 800c268:	f000 fe8f 	bl	800cf8a <I2C_Flush_TXDR>
 800c26c:	e0df      	b.n	800c42e <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800c26e:	68bb      	ldr	r3, [r7, #8]
 800c270:	2202      	movs	r2, #2
 800c272:	4013      	ands	r3, r2
 800c274:	d00d      	beq.n	800c292 <I2C_Mem_ISR_DMA+0x82>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	2202      	movs	r2, #2
 800c27a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800c27c:	d009      	beq.n	800c292 <I2C_Mem_ISR_DMA+0x82>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	68fa      	ldr	r2, [r7, #12]
 800c284:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800c286:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	2201      	movs	r2, #1
 800c28c:	4252      	negs	r2, r2
 800c28e:	651a      	str	r2, [r3, #80]	@ 0x50
 800c290:	e0cd      	b.n	800c42e <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800c292:	68bb      	ldr	r3, [r7, #8]
 800c294:	2280      	movs	r2, #128	@ 0x80
 800c296:	4013      	ands	r3, r2
 800c298:	d05e      	beq.n	800c358 <I2C_Mem_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	2240      	movs	r2, #64	@ 0x40
 800c29e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800c2a0:	d05a      	beq.n	800c358 <I2C_Mem_ISR_DMA+0x148>
  {
    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	2110      	movs	r1, #16
 800c2a6:	0018      	movs	r0, r3
 800c2a8:	f000 ffa4 	bl	800d1f4 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c2b0:	b29b      	uxth	r3, r3
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d04a      	beq.n	800c34c <I2C_Mem_ISR_DMA+0x13c>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c2ba:	b29b      	uxth	r3, r3
 800c2bc:	2bff      	cmp	r3, #255	@ 0xff
 800c2be:	d910      	bls.n	800c2e2 <I2C_Mem_ISR_DMA+0xd2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	22ff      	movs	r2, #255	@ 0xff
 800c2c4:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c2ca:	b299      	uxth	r1, r3
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c2d0:	b2da      	uxtb	r2, r3
 800c2d2:	2380      	movs	r3, #128	@ 0x80
 800c2d4:	045b      	lsls	r3, r3, #17
 800c2d6:	68f8      	ldr	r0, [r7, #12]
 800c2d8:	2400      	movs	r4, #0
 800c2da:	9400      	str	r4, [sp, #0]
 800c2dc:	f000 ff50 	bl	800d180 <I2C_TransferConfig>
 800c2e0:	e011      	b.n	800c306 <I2C_Mem_ISR_DMA+0xf6>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c2e6:	b29a      	uxth	r2, r3
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c2f0:	b299      	uxth	r1, r3
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c2f6:	b2da      	uxtb	r2, r3
 800c2f8:	2380      	movs	r3, #128	@ 0x80
 800c2fa:	049b      	lsls	r3, r3, #18
 800c2fc:	68f8      	ldr	r0, [r7, #12]
 800c2fe:	2400      	movs	r4, #0
 800c300:	9400      	str	r4, [sp, #0]
 800c302:	f000 ff3d 	bl	800d180 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c30a:	b29a      	uxth	r2, r3
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c310:	1ad3      	subs	r3, r2, r3
 800c312:	b29a      	uxth	r2, r3
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	2241      	movs	r2, #65	@ 0x41
 800c31c:	5c9b      	ldrb	r3, [r3, r2]
 800c31e:	b2db      	uxtb	r3, r3
 800c320:	2b22      	cmp	r3, #34	@ 0x22
 800c322:	d109      	bne.n	800c338 <I2C_Mem_ISR_DMA+0x128>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	681a      	ldr	r2, [r3, #0]
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	2180      	movs	r1, #128	@ 0x80
 800c330:	0209      	lsls	r1, r1, #8
 800c332:	430a      	orrs	r2, r1
 800c334:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800c336:	e07a      	b.n	800c42e <I2C_Mem_ISR_DMA+0x21e>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	681a      	ldr	r2, [r3, #0]
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	2180      	movs	r1, #128	@ 0x80
 800c344:	01c9      	lsls	r1, r1, #7
 800c346:	430a      	orrs	r2, r1
 800c348:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800c34a:	e070      	b.n	800c42e <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	2140      	movs	r1, #64	@ 0x40
 800c350:	0018      	movs	r0, r3
 800c352:	f000 fcef 	bl	800cd34 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800c356:	e06a      	b.n	800c42e <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800c358:	68bb      	ldr	r3, [r7, #8]
 800c35a:	2240      	movs	r2, #64	@ 0x40
 800c35c:	4013      	ands	r3, r2
 800c35e:	d058      	beq.n	800c412 <I2C_Mem_ISR_DMA+0x202>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	2240      	movs	r2, #64	@ 0x40
 800c364:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800c366:	d054      	beq.n	800c412 <I2C_Mem_ISR_DMA+0x202>
  {
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	2241      	movs	r2, #65	@ 0x41
 800c36c:	5c9b      	ldrb	r3, [r3, r2]
 800c36e:	b2db      	uxtb	r3, r3
 800c370:	2b22      	cmp	r3, #34	@ 0x22
 800c372:	d101      	bne.n	800c378 <I2C_Mem_ISR_DMA+0x168>
    {
      direction = I2C_GENERATE_START_READ;
 800c374:	4b33      	ldr	r3, [pc, #204]	@ (800c444 <I2C_Mem_ISR_DMA+0x234>)
 800c376:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c37c:	b29b      	uxth	r3, r3
 800c37e:	2bff      	cmp	r3, #255	@ 0xff
 800c380:	d911      	bls.n	800c3a6 <I2C_Mem_ISR_DMA+0x196>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	22ff      	movs	r2, #255	@ 0xff
 800c386:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c38c:	b299      	uxth	r1, r3
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c392:	b2da      	uxtb	r2, r3
 800c394:	2380      	movs	r3, #128	@ 0x80
 800c396:	045c      	lsls	r4, r3, #17
 800c398:	68f8      	ldr	r0, [r7, #12]
 800c39a:	697b      	ldr	r3, [r7, #20]
 800c39c:	9300      	str	r3, [sp, #0]
 800c39e:	0023      	movs	r3, r4
 800c3a0:	f000 feee 	bl	800d180 <I2C_TransferConfig>
 800c3a4:	e012      	b.n	800c3cc <I2C_Mem_ISR_DMA+0x1bc>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c3aa:	b29a      	uxth	r2, r3
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c3b4:	b299      	uxth	r1, r3
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c3ba:	b2da      	uxtb	r2, r3
 800c3bc:	2380      	movs	r3, #128	@ 0x80
 800c3be:	049c      	lsls	r4, r3, #18
 800c3c0:	68f8      	ldr	r0, [r7, #12]
 800c3c2:	697b      	ldr	r3, [r7, #20]
 800c3c4:	9300      	str	r3, [sp, #0]
 800c3c6:	0023      	movs	r3, r4
 800c3c8:	f000 feda 	bl	800d180 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c3d0:	b29a      	uxth	r2, r3
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c3d6:	1ad3      	subs	r3, r2, r3
 800c3d8:	b29a      	uxth	r2, r3
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	2241      	movs	r2, #65	@ 0x41
 800c3e2:	5c9b      	ldrb	r3, [r3, r2]
 800c3e4:	b2db      	uxtb	r3, r3
 800c3e6:	2b22      	cmp	r3, #34	@ 0x22
 800c3e8:	d109      	bne.n	800c3fe <I2C_Mem_ISR_DMA+0x1ee>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	681a      	ldr	r2, [r3, #0]
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	2180      	movs	r1, #128	@ 0x80
 800c3f6:	0209      	lsls	r1, r1, #8
 800c3f8:	430a      	orrs	r2, r1
 800c3fa:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c3fc:	e017      	b.n	800c42e <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	681a      	ldr	r2, [r3, #0]
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	2180      	movs	r1, #128	@ 0x80
 800c40a:	01c9      	lsls	r1, r1, #7
 800c40c:	430a      	orrs	r2, r1
 800c40e:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c410:	e00d      	b.n	800c42e <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c412:	68bb      	ldr	r3, [r7, #8]
 800c414:	2220      	movs	r2, #32
 800c416:	4013      	ands	r3, r2
 800c418:	d009      	beq.n	800c42e <I2C_Mem_ISR_DMA+0x21e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	2220      	movs	r2, #32
 800c41e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c420:	d005      	beq.n	800c42e <I2C_Mem_ISR_DMA+0x21e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800c422:	68ba      	ldr	r2, [r7, #8]
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	0011      	movs	r1, r2
 800c428:	0018      	movs	r0, r3
 800c42a:	f000 fa3d 	bl	800c8a8 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	2240      	movs	r2, #64	@ 0x40
 800c432:	2100      	movs	r1, #0
 800c434:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c436:	2300      	movs	r3, #0
}
 800c438:	0018      	movs	r0, r3
 800c43a:	46bd      	mov	sp, r7
 800c43c:	b007      	add	sp, #28
 800c43e:	bd90      	pop	{r4, r7, pc}
 800c440:	80002000 	.word	0x80002000
 800c444:	80002400 	.word	0x80002400

0800c448 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800c448:	b580      	push	{r7, lr}
 800c44a:	b088      	sub	sp, #32
 800c44c:	af00      	add	r7, sp, #0
 800c44e:	60f8      	str	r0, [r7, #12]
 800c450:	60b9      	str	r1, [r7, #8]
 800c452:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c458:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800c45a:	2300      	movs	r3, #0
 800c45c:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	2240      	movs	r2, #64	@ 0x40
 800c462:	5c9b      	ldrb	r3, [r3, r2]
 800c464:	2b01      	cmp	r3, #1
 800c466:	d101      	bne.n	800c46c <I2C_Slave_ISR_DMA+0x24>
 800c468:	2302      	movs	r3, #2
 800c46a:	e0cd      	b.n	800c608 <I2C_Slave_ISR_DMA+0x1c0>
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	2240      	movs	r2, #64	@ 0x40
 800c470:	2101      	movs	r1, #1
 800c472:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c474:	68bb      	ldr	r3, [r7, #8]
 800c476:	2220      	movs	r2, #32
 800c478:	4013      	ands	r3, r2
 800c47a:	d009      	beq.n	800c490 <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	2220      	movs	r2, #32
 800c480:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c482:	d005      	beq.n	800c490 <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800c484:	68ba      	ldr	r2, [r7, #8]
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	0011      	movs	r1, r2
 800c48a:	0018      	movs	r0, r3
 800c48c:	f000 fada 	bl	800ca44 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800c490:	68bb      	ldr	r3, [r7, #8]
 800c492:	2210      	movs	r2, #16
 800c494:	4013      	ands	r3, r2
 800c496:	d100      	bne.n	800c49a <I2C_Slave_ISR_DMA+0x52>
 800c498:	e0a3      	b.n	800c5e2 <I2C_Slave_ISR_DMA+0x19a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	2210      	movs	r2, #16
 800c49e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800c4a0:	d100      	bne.n	800c4a4 <I2C_Slave_ISR_DMA+0x5c>
 800c4a2:	e09e      	b.n	800c5e2 <I2C_Slave_ISR_DMA+0x19a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800c4a4:	687a      	ldr	r2, [r7, #4]
 800c4a6:	2380      	movs	r3, #128	@ 0x80
 800c4a8:	01db      	lsls	r3, r3, #7
 800c4aa:	4013      	ands	r3, r2
 800c4ac:	d105      	bne.n	800c4ba <I2C_Slave_ISR_DMA+0x72>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800c4ae:	687a      	ldr	r2, [r7, #4]
 800c4b0:	2380      	movs	r3, #128	@ 0x80
 800c4b2:	021b      	lsls	r3, r3, #8
 800c4b4:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800c4b6:	d100      	bne.n	800c4ba <I2C_Slave_ISR_DMA+0x72>
 800c4b8:	e08c      	b.n	800c5d4 <I2C_Slave_ISR_DMA+0x18c>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d00c      	beq.n	800c4dc <I2C_Slave_ISR_DMA+0x94>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800c4c2:	687a      	ldr	r2, [r7, #4]
 800c4c4:	2380      	movs	r3, #128	@ 0x80
 800c4c6:	021b      	lsls	r3, r3, #8
 800c4c8:	4013      	ands	r3, r2
 800c4ca:	d007      	beq.n	800c4dc <I2C_Slave_ISR_DMA+0x94>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	685b      	ldr	r3, [r3, #4]
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d101      	bne.n	800c4dc <I2C_Slave_ISR_DMA+0x94>
          {
            treatdmanack = 1U;
 800c4d8:	2301      	movs	r3, #1
 800c4da:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d00c      	beq.n	800c4fe <I2C_Slave_ISR_DMA+0xb6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800c4e4:	687a      	ldr	r2, [r7, #4]
 800c4e6:	2380      	movs	r3, #128	@ 0x80
 800c4e8:	01db      	lsls	r3, r3, #7
 800c4ea:	4013      	ands	r3, r2
 800c4ec:	d007      	beq.n	800c4fe <I2C_Slave_ISR_DMA+0xb6>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	685b      	ldr	r3, [r3, #4]
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d101      	bne.n	800c4fe <I2C_Slave_ISR_DMA+0xb6>
          {
            treatdmanack = 1U;
 800c4fa:	2301      	movs	r3, #1
 800c4fc:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800c4fe:	69fb      	ldr	r3, [r7, #28]
 800c500:	2b01      	cmp	r3, #1
 800c502:	d12d      	bne.n	800c560 <I2C_Slave_ISR_DMA+0x118>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	2241      	movs	r2, #65	@ 0x41
 800c508:	5c9b      	ldrb	r3, [r3, r2]
 800c50a:	b2db      	uxtb	r3, r3
 800c50c:	2b28      	cmp	r3, #40	@ 0x28
 800c50e:	d10b      	bne.n	800c528 <I2C_Slave_ISR_DMA+0xe0>
 800c510:	69ba      	ldr	r2, [r7, #24]
 800c512:	2380      	movs	r3, #128	@ 0x80
 800c514:	049b      	lsls	r3, r3, #18
 800c516:	429a      	cmp	r2, r3
 800c518:	d106      	bne.n	800c528 <I2C_Slave_ISR_DMA+0xe0>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800c51a:	68ba      	ldr	r2, [r7, #8]
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	0011      	movs	r1, r2
 800c520:	0018      	movs	r0, r3
 800c522:	f000 fbaf 	bl	800cc84 <I2C_ITListenCplt>
 800c526:	e054      	b.n	800c5d2 <I2C_Slave_ISR_DMA+0x18a>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	2241      	movs	r2, #65	@ 0x41
 800c52c:	5c9b      	ldrb	r3, [r3, r2]
 800c52e:	b2db      	uxtb	r3, r3
 800c530:	2b29      	cmp	r3, #41	@ 0x29
 800c532:	d110      	bne.n	800c556 <I2C_Slave_ISR_DMA+0x10e>
 800c534:	69bb      	ldr	r3, [r7, #24]
 800c536:	4a36      	ldr	r2, [pc, #216]	@ (800c610 <I2C_Slave_ISR_DMA+0x1c8>)
 800c538:	4293      	cmp	r3, r2
 800c53a:	d00c      	beq.n	800c556 <I2C_Slave_ISR_DMA+0x10e>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	2210      	movs	r2, #16
 800c542:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	0018      	movs	r0, r3
 800c548:	f000 fd1f 	bl	800cf8a <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	0018      	movs	r0, r3
 800c550:	f000 f946 	bl	800c7e0 <I2C_ITSlaveSeqCplt>
 800c554:	e03d      	b.n	800c5d2 <I2C_Slave_ISR_DMA+0x18a>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	2210      	movs	r2, #16
 800c55c:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800c55e:	e03e      	b.n	800c5de <I2C_Slave_ISR_DMA+0x196>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	2210      	movs	r2, #16
 800c566:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c56c:	2204      	movs	r2, #4
 800c56e:	431a      	orrs	r2, r3
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800c574:	2317      	movs	r3, #23
 800c576:	18fb      	adds	r3, r7, r3
 800c578:	68fa      	ldr	r2, [r7, #12]
 800c57a:	2141      	movs	r1, #65	@ 0x41
 800c57c:	5c52      	ldrb	r2, [r2, r1]
 800c57e:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800c580:	69bb      	ldr	r3, [r7, #24]
 800c582:	2b00      	cmp	r3, #0
 800c584:	d004      	beq.n	800c590 <I2C_Slave_ISR_DMA+0x148>
 800c586:	69ba      	ldr	r2, [r7, #24]
 800c588:	2380      	movs	r3, #128	@ 0x80
 800c58a:	045b      	lsls	r3, r3, #17
 800c58c:	429a      	cmp	r2, r3
 800c58e:	d126      	bne.n	800c5de <I2C_Slave_ISR_DMA+0x196>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800c590:	2217      	movs	r2, #23
 800c592:	18bb      	adds	r3, r7, r2
 800c594:	781b      	ldrb	r3, [r3, #0]
 800c596:	2b21      	cmp	r3, #33	@ 0x21
 800c598:	d003      	beq.n	800c5a2 <I2C_Slave_ISR_DMA+0x15a>
 800c59a:	18bb      	adds	r3, r7, r2
 800c59c:	781b      	ldrb	r3, [r3, #0]
 800c59e:	2b29      	cmp	r3, #41	@ 0x29
 800c5a0:	d103      	bne.n	800c5aa <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	2221      	movs	r2, #33	@ 0x21
 800c5a6:	631a      	str	r2, [r3, #48]	@ 0x30
 800c5a8:	e00b      	b.n	800c5c2 <I2C_Slave_ISR_DMA+0x17a>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800c5aa:	2217      	movs	r2, #23
 800c5ac:	18bb      	adds	r3, r7, r2
 800c5ae:	781b      	ldrb	r3, [r3, #0]
 800c5b0:	2b22      	cmp	r3, #34	@ 0x22
 800c5b2:	d003      	beq.n	800c5bc <I2C_Slave_ISR_DMA+0x174>
 800c5b4:	18bb      	adds	r3, r7, r2
 800c5b6:	781b      	ldrb	r3, [r3, #0]
 800c5b8:	2b2a      	cmp	r3, #42	@ 0x2a
 800c5ba:	d102      	bne.n	800c5c2 <I2C_Slave_ISR_DMA+0x17a>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	2222      	movs	r2, #34	@ 0x22
 800c5c0:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	0011      	movs	r1, r2
 800c5ca:	0018      	movs	r0, r3
 800c5cc:	f000 fbb2 	bl	800cd34 <I2C_ITError>
      if (treatdmanack == 1U)
 800c5d0:	e005      	b.n	800c5de <I2C_Slave_ISR_DMA+0x196>
 800c5d2:	e004      	b.n	800c5de <I2C_Slave_ISR_DMA+0x196>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	2210      	movs	r2, #16
 800c5da:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800c5dc:	e00f      	b.n	800c5fe <I2C_Slave_ISR_DMA+0x1b6>
      if (treatdmanack == 1U)
 800c5de:	46c0      	nop			@ (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800c5e0:	e00d      	b.n	800c5fe <I2C_Slave_ISR_DMA+0x1b6>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800c5e2:	68bb      	ldr	r3, [r7, #8]
 800c5e4:	2208      	movs	r2, #8
 800c5e6:	4013      	ands	r3, r2
 800c5e8:	d009      	beq.n	800c5fe <I2C_Slave_ISR_DMA+0x1b6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	2208      	movs	r2, #8
 800c5ee:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800c5f0:	d005      	beq.n	800c5fe <I2C_Slave_ISR_DMA+0x1b6>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800c5f2:	68ba      	ldr	r2, [r7, #8]
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	0011      	movs	r1, r2
 800c5f8:	0018      	movs	r0, r3
 800c5fa:	f000 f80b 	bl	800c614 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	2240      	movs	r2, #64	@ 0x40
 800c602:	2100      	movs	r1, #0
 800c604:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c606:	2300      	movs	r3, #0
}
 800c608:	0018      	movs	r0, r3
 800c60a:	46bd      	mov	sp, r7
 800c60c:	b008      	add	sp, #32
 800c60e:	bd80      	pop	{r7, pc}
 800c610:	ffff0000 	.word	0xffff0000

0800c614 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800c614:	b5b0      	push	{r4, r5, r7, lr}
 800c616:	b084      	sub	sp, #16
 800c618:	af00      	add	r7, sp, #0
 800c61a:	6078      	str	r0, [r7, #4]
 800c61c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	2241      	movs	r2, #65	@ 0x41
 800c622:	5c9b      	ldrb	r3, [r3, r2]
 800c624:	b2db      	uxtb	r3, r3
 800c626:	001a      	movs	r2, r3
 800c628:	2328      	movs	r3, #40	@ 0x28
 800c62a:	4013      	ands	r3, r2
 800c62c:	2b28      	cmp	r3, #40	@ 0x28
 800c62e:	d000      	beq.n	800c632 <I2C_ITAddrCplt+0x1e>
 800c630:	e088      	b.n	800c744 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	699b      	ldr	r3, [r3, #24]
 800c638:	0c1b      	lsrs	r3, r3, #16
 800c63a:	b2da      	uxtb	r2, r3
 800c63c:	250f      	movs	r5, #15
 800c63e:	197b      	adds	r3, r7, r5
 800c640:	2101      	movs	r1, #1
 800c642:	400a      	ands	r2, r1
 800c644:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	699b      	ldr	r3, [r3, #24]
 800c64c:	0c1b      	lsrs	r3, r3, #16
 800c64e:	b29a      	uxth	r2, r3
 800c650:	200c      	movs	r0, #12
 800c652:	183b      	adds	r3, r7, r0
 800c654:	21fe      	movs	r1, #254	@ 0xfe
 800c656:	400a      	ands	r2, r1
 800c658:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	689b      	ldr	r3, [r3, #8]
 800c660:	b29a      	uxth	r2, r3
 800c662:	240a      	movs	r4, #10
 800c664:	193b      	adds	r3, r7, r4
 800c666:	0592      	lsls	r2, r2, #22
 800c668:	0d92      	lsrs	r2, r2, #22
 800c66a:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	68db      	ldr	r3, [r3, #12]
 800c672:	b29a      	uxth	r2, r3
 800c674:	2308      	movs	r3, #8
 800c676:	18fb      	adds	r3, r7, r3
 800c678:	21fe      	movs	r1, #254	@ 0xfe
 800c67a:	400a      	ands	r2, r1
 800c67c:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	68db      	ldr	r3, [r3, #12]
 800c682:	2b02      	cmp	r3, #2
 800c684:	d148      	bne.n	800c718 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800c686:	0021      	movs	r1, r4
 800c688:	187b      	adds	r3, r7, r1
 800c68a:	881b      	ldrh	r3, [r3, #0]
 800c68c:	09db      	lsrs	r3, r3, #7
 800c68e:	b29a      	uxth	r2, r3
 800c690:	183b      	adds	r3, r7, r0
 800c692:	881b      	ldrh	r3, [r3, #0]
 800c694:	4053      	eors	r3, r2
 800c696:	b29b      	uxth	r3, r3
 800c698:	001a      	movs	r2, r3
 800c69a:	2306      	movs	r3, #6
 800c69c:	4013      	ands	r3, r2
 800c69e:	d120      	bne.n	800c6e2 <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 800c6a0:	183b      	adds	r3, r7, r0
 800c6a2:	187a      	adds	r2, r7, r1
 800c6a4:	8812      	ldrh	r2, [r2, #0]
 800c6a6:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c6ac:	1c5a      	adds	r2, r3, #1
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c6b6:	2b02      	cmp	r3, #2
 800c6b8:	d14c      	bne.n	800c754 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	2200      	movs	r2, #0
 800c6be:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	2208      	movs	r2, #8
 800c6c6:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	2240      	movs	r2, #64	@ 0x40
 800c6cc:	2100      	movs	r1, #0
 800c6ce:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800c6d0:	183b      	adds	r3, r7, r0
 800c6d2:	881a      	ldrh	r2, [r3, #0]
 800c6d4:	197b      	adds	r3, r7, r5
 800c6d6:	7819      	ldrb	r1, [r3, #0]
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	0018      	movs	r0, r3
 800c6dc:	f7ff fa39 	bl	800bb52 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800c6e0:	e038      	b.n	800c754 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 800c6e2:	240c      	movs	r4, #12
 800c6e4:	193b      	adds	r3, r7, r4
 800c6e6:	2208      	movs	r2, #8
 800c6e8:	18ba      	adds	r2, r7, r2
 800c6ea:	8812      	ldrh	r2, [r2, #0]
 800c6ec:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800c6ee:	2380      	movs	r3, #128	@ 0x80
 800c6f0:	021a      	lsls	r2, r3, #8
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	0011      	movs	r1, r2
 800c6f6:	0018      	movs	r0, r3
 800c6f8:	f000 fe0a 	bl	800d310 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	2240      	movs	r2, #64	@ 0x40
 800c700:	2100      	movs	r1, #0
 800c702:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800c704:	193b      	adds	r3, r7, r4
 800c706:	881a      	ldrh	r2, [r3, #0]
 800c708:	230f      	movs	r3, #15
 800c70a:	18fb      	adds	r3, r7, r3
 800c70c:	7819      	ldrb	r1, [r3, #0]
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	0018      	movs	r0, r3
 800c712:	f7ff fa1e 	bl	800bb52 <HAL_I2C_AddrCallback>
}
 800c716:	e01d      	b.n	800c754 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800c718:	2380      	movs	r3, #128	@ 0x80
 800c71a:	021a      	lsls	r2, r3, #8
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	0011      	movs	r1, r2
 800c720:	0018      	movs	r0, r3
 800c722:	f000 fdf5 	bl	800d310 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	2240      	movs	r2, #64	@ 0x40
 800c72a:	2100      	movs	r1, #0
 800c72c:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800c72e:	230c      	movs	r3, #12
 800c730:	18fb      	adds	r3, r7, r3
 800c732:	881a      	ldrh	r2, [r3, #0]
 800c734:	230f      	movs	r3, #15
 800c736:	18fb      	adds	r3, r7, r3
 800c738:	7819      	ldrb	r1, [r3, #0]
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	0018      	movs	r0, r3
 800c73e:	f7ff fa08 	bl	800bb52 <HAL_I2C_AddrCallback>
}
 800c742:	e007      	b.n	800c754 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	2208      	movs	r2, #8
 800c74a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	2240      	movs	r2, #64	@ 0x40
 800c750:	2100      	movs	r1, #0
 800c752:	5499      	strb	r1, [r3, r2]
}
 800c754:	46c0      	nop			@ (mov r8, r8)
 800c756:	46bd      	mov	sp, r7
 800c758:	b004      	add	sp, #16
 800c75a:	bdb0      	pop	{r4, r5, r7, pc}

0800c75c <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800c75c:	b580      	push	{r7, lr}
 800c75e:	b082      	sub	sp, #8
 800c760:	af00      	add	r7, sp, #0
 800c762:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	2242      	movs	r2, #66	@ 0x42
 800c768:	2100      	movs	r1, #0
 800c76a:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	2241      	movs	r2, #65	@ 0x41
 800c770:	5c9b      	ldrb	r3, [r3, r2]
 800c772:	b2db      	uxtb	r3, r3
 800c774:	2b21      	cmp	r3, #33	@ 0x21
 800c776:	d117      	bne.n	800c7a8 <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	2241      	movs	r2, #65	@ 0x41
 800c77c:	2120      	movs	r1, #32
 800c77e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	2211      	movs	r2, #17
 800c784:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	2200      	movs	r2, #0
 800c78a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	2101      	movs	r1, #1
 800c790:	0018      	movs	r0, r3
 800c792:	f000 fdbd 	bl	800d310 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	2240      	movs	r2, #64	@ 0x40
 800c79a:	2100      	movs	r1, #0
 800c79c:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	0018      	movs	r0, r3
 800c7a2:	f7ff f9b6 	bl	800bb12 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800c7a6:	e016      	b.n	800c7d6 <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	2241      	movs	r2, #65	@ 0x41
 800c7ac:	2120      	movs	r1, #32
 800c7ae:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	2212      	movs	r2, #18
 800c7b4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	2200      	movs	r2, #0
 800c7ba:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	2102      	movs	r1, #2
 800c7c0:	0018      	movs	r0, r3
 800c7c2:	f000 fda5 	bl	800d310 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	2240      	movs	r2, #64	@ 0x40
 800c7ca:	2100      	movs	r1, #0
 800c7cc:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	0018      	movs	r0, r3
 800c7d2:	f7ff f9a6 	bl	800bb22 <HAL_I2C_MasterRxCpltCallback>
}
 800c7d6:	46c0      	nop			@ (mov r8, r8)
 800c7d8:	46bd      	mov	sp, r7
 800c7da:	b002      	add	sp, #8
 800c7dc:	bd80      	pop	{r7, pc}
	...

0800c7e0 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800c7e0:	b580      	push	{r7, lr}
 800c7e2:	b084      	sub	sp, #16
 800c7e4:	af00      	add	r7, sp, #0
 800c7e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	2242      	movs	r2, #66	@ 0x42
 800c7f4:	2100      	movs	r1, #0
 800c7f6:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800c7f8:	68fa      	ldr	r2, [r7, #12]
 800c7fa:	2380      	movs	r3, #128	@ 0x80
 800c7fc:	01db      	lsls	r3, r3, #7
 800c7fe:	4013      	ands	r3, r2
 800c800:	d008      	beq.n	800c814 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	681a      	ldr	r2, [r3, #0]
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	4924      	ldr	r1, [pc, #144]	@ (800c8a0 <I2C_ITSlaveSeqCplt+0xc0>)
 800c80e:	400a      	ands	r2, r1
 800c810:	601a      	str	r2, [r3, #0]
 800c812:	e00c      	b.n	800c82e <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800c814:	68fa      	ldr	r2, [r7, #12]
 800c816:	2380      	movs	r3, #128	@ 0x80
 800c818:	021b      	lsls	r3, r3, #8
 800c81a:	4013      	ands	r3, r2
 800c81c:	d007      	beq.n	800c82e <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	681a      	ldr	r2, [r3, #0]
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	491e      	ldr	r1, [pc, #120]	@ (800c8a4 <I2C_ITSlaveSeqCplt+0xc4>)
 800c82a:	400a      	ands	r2, r1
 800c82c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	2241      	movs	r2, #65	@ 0x41
 800c832:	5c9b      	ldrb	r3, [r3, r2]
 800c834:	b2db      	uxtb	r3, r3
 800c836:	2b29      	cmp	r3, #41	@ 0x29
 800c838:	d114      	bne.n	800c864 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	2241      	movs	r2, #65	@ 0x41
 800c83e:	2128      	movs	r1, #40	@ 0x28
 800c840:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	2221      	movs	r2, #33	@ 0x21
 800c846:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	2101      	movs	r1, #1
 800c84c:	0018      	movs	r0, r3
 800c84e:	f000 fd5f 	bl	800d310 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	2240      	movs	r2, #64	@ 0x40
 800c856:	2100      	movs	r1, #0
 800c858:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	0018      	movs	r0, r3
 800c85e:	f7ff f968 	bl	800bb32 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800c862:	e019      	b.n	800c898 <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	2241      	movs	r2, #65	@ 0x41
 800c868:	5c9b      	ldrb	r3, [r3, r2]
 800c86a:	b2db      	uxtb	r3, r3
 800c86c:	2b2a      	cmp	r3, #42	@ 0x2a
 800c86e:	d113      	bne.n	800c898 <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	2241      	movs	r2, #65	@ 0x41
 800c874:	2128      	movs	r1, #40	@ 0x28
 800c876:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	2222      	movs	r2, #34	@ 0x22
 800c87c:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	2102      	movs	r1, #2
 800c882:	0018      	movs	r0, r3
 800c884:	f000 fd44 	bl	800d310 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	2240      	movs	r2, #64	@ 0x40
 800c88c:	2100      	movs	r1, #0
 800c88e:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	0018      	movs	r0, r3
 800c894:	f7ff f955 	bl	800bb42 <HAL_I2C_SlaveRxCpltCallback>
}
 800c898:	46c0      	nop			@ (mov r8, r8)
 800c89a:	46bd      	mov	sp, r7
 800c89c:	b004      	add	sp, #16
 800c89e:	bd80      	pop	{r7, pc}
 800c8a0:	ffffbfff 	.word	0xffffbfff
 800c8a4:	ffff7fff 	.word	0xffff7fff

0800c8a8 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800c8a8:	b580      	push	{r7, lr}
 800c8aa:	b086      	sub	sp, #24
 800c8ac:	af00      	add	r7, sp, #0
 800c8ae:	6078      	str	r0, [r7, #4]
 800c8b0:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800c8b2:	683b      	ldr	r3, [r7, #0]
 800c8b4:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	2220      	movs	r2, #32
 800c8bc:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	2241      	movs	r2, #65	@ 0x41
 800c8c2:	5c9b      	ldrb	r3, [r3, r2]
 800c8c4:	b2db      	uxtb	r3, r3
 800c8c6:	2b21      	cmp	r3, #33	@ 0x21
 800c8c8:	d108      	bne.n	800c8dc <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	2101      	movs	r1, #1
 800c8ce:	0018      	movs	r0, r3
 800c8d0:	f000 fd1e 	bl	800d310 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	2211      	movs	r2, #17
 800c8d8:	631a      	str	r2, [r3, #48]	@ 0x30
 800c8da:	e00d      	b.n	800c8f8 <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	2241      	movs	r2, #65	@ 0x41
 800c8e0:	5c9b      	ldrb	r3, [r3, r2]
 800c8e2:	b2db      	uxtb	r3, r3
 800c8e4:	2b22      	cmp	r3, #34	@ 0x22
 800c8e6:	d107      	bne.n	800c8f8 <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	2102      	movs	r1, #2
 800c8ec:	0018      	movs	r0, r3
 800c8ee:	f000 fd0f 	bl	800d310 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	2212      	movs	r2, #18
 800c8f6:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	685a      	ldr	r2, [r3, #4]
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	494e      	ldr	r1, [pc, #312]	@ (800ca3c <I2C_ITMasterCplt+0x194>)
 800c904:	400a      	ands	r2, r1
 800c906:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	2200      	movs	r2, #0
 800c90c:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	4a4b      	ldr	r2, [pc, #300]	@ (800ca40 <I2C_ITMasterCplt+0x198>)
 800c912:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 800c914:	697b      	ldr	r3, [r7, #20]
 800c916:	2210      	movs	r2, #16
 800c918:	4013      	ands	r3, r2
 800c91a:	d009      	beq.n	800c930 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	2210      	movs	r2, #16
 800c922:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c928:	2204      	movs	r2, #4
 800c92a:	431a      	orrs	r2, r3
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	2241      	movs	r2, #65	@ 0x41
 800c934:	5c9b      	ldrb	r3, [r3, r2]
 800c936:	b2db      	uxtb	r3, r3
 800c938:	2b60      	cmp	r3, #96	@ 0x60
 800c93a:	d109      	bne.n	800c950 <I2C_ITMasterCplt+0xa8>
 800c93c:	697b      	ldr	r3, [r7, #20]
 800c93e:	2204      	movs	r2, #4
 800c940:	4013      	ands	r3, r2
 800c942:	d005      	beq.n	800c950 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c94a:	b2db      	uxtb	r3, r3
 800c94c:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800c94e:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	0018      	movs	r0, r3
 800c954:	f000 fb19 	bl	800cf8a <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c95c:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	2241      	movs	r2, #65	@ 0x41
 800c962:	5c9b      	ldrb	r3, [r3, r2]
 800c964:	b2db      	uxtb	r3, r3
 800c966:	2b60      	cmp	r3, #96	@ 0x60
 800c968:	d002      	beq.n	800c970 <I2C_ITMasterCplt+0xc8>
 800c96a:	693b      	ldr	r3, [r7, #16]
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d007      	beq.n	800c980 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	0011      	movs	r1, r2
 800c978:	0018      	movs	r0, r3
 800c97a:	f000 f9db 	bl	800cd34 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800c97e:	e058      	b.n	800ca32 <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	2241      	movs	r2, #65	@ 0x41
 800c984:	5c9b      	ldrb	r3, [r3, r2]
 800c986:	b2db      	uxtb	r3, r3
 800c988:	2b21      	cmp	r3, #33	@ 0x21
 800c98a:	d126      	bne.n	800c9da <I2C_ITMasterCplt+0x132>
    hi2c->State = HAL_I2C_STATE_READY;
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	2241      	movs	r2, #65	@ 0x41
 800c990:	2120      	movs	r1, #32
 800c992:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	2200      	movs	r2, #0
 800c998:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	2242      	movs	r2, #66	@ 0x42
 800c99e:	5c9b      	ldrb	r3, [r3, r2]
 800c9a0:	b2db      	uxtb	r3, r3
 800c9a2:	2b40      	cmp	r3, #64	@ 0x40
 800c9a4:	d10c      	bne.n	800c9c0 <I2C_ITMasterCplt+0x118>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	2242      	movs	r2, #66	@ 0x42
 800c9aa:	2100      	movs	r1, #0
 800c9ac:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	2240      	movs	r2, #64	@ 0x40
 800c9b2:	2100      	movs	r1, #0
 800c9b4:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	0018      	movs	r0, r3
 800c9ba:	f7ff f8e2 	bl	800bb82 <HAL_I2C_MemTxCpltCallback>
}
 800c9be:	e038      	b.n	800ca32 <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	2242      	movs	r2, #66	@ 0x42
 800c9c4:	2100      	movs	r1, #0
 800c9c6:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	2240      	movs	r2, #64	@ 0x40
 800c9cc:	2100      	movs	r1, #0
 800c9ce:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	0018      	movs	r0, r3
 800c9d4:	f7ff f89d 	bl	800bb12 <HAL_I2C_MasterTxCpltCallback>
}
 800c9d8:	e02b      	b.n	800ca32 <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	2241      	movs	r2, #65	@ 0x41
 800c9de:	5c9b      	ldrb	r3, [r3, r2]
 800c9e0:	b2db      	uxtb	r3, r3
 800c9e2:	2b22      	cmp	r3, #34	@ 0x22
 800c9e4:	d125      	bne.n	800ca32 <I2C_ITMasterCplt+0x18a>
    hi2c->State = HAL_I2C_STATE_READY;
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	2241      	movs	r2, #65	@ 0x41
 800c9ea:	2120      	movs	r1, #32
 800c9ec:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	2200      	movs	r2, #0
 800c9f2:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	2242      	movs	r2, #66	@ 0x42
 800c9f8:	5c9b      	ldrb	r3, [r3, r2]
 800c9fa:	b2db      	uxtb	r3, r3
 800c9fc:	2b40      	cmp	r3, #64	@ 0x40
 800c9fe:	d10c      	bne.n	800ca1a <I2C_ITMasterCplt+0x172>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	2242      	movs	r2, #66	@ 0x42
 800ca04:	2100      	movs	r1, #0
 800ca06:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	2240      	movs	r2, #64	@ 0x40
 800ca0c:	2100      	movs	r1, #0
 800ca0e:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	0018      	movs	r0, r3
 800ca14:	f7ff f8bd 	bl	800bb92 <HAL_I2C_MemRxCpltCallback>
}
 800ca18:	e00b      	b.n	800ca32 <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	2242      	movs	r2, #66	@ 0x42
 800ca1e:	2100      	movs	r1, #0
 800ca20:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	2240      	movs	r2, #64	@ 0x40
 800ca26:	2100      	movs	r1, #0
 800ca28:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	0018      	movs	r0, r3
 800ca2e:	f7ff f878 	bl	800bb22 <HAL_I2C_MasterRxCpltCallback>
}
 800ca32:	46c0      	nop			@ (mov r8, r8)
 800ca34:	46bd      	mov	sp, r7
 800ca36:	b006      	add	sp, #24
 800ca38:	bd80      	pop	{r7, pc}
 800ca3a:	46c0      	nop			@ (mov r8, r8)
 800ca3c:	fe00e800 	.word	0xfe00e800
 800ca40:	ffff0000 	.word	0xffff0000

0800ca44 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800ca44:	b580      	push	{r7, lr}
 800ca46:	b086      	sub	sp, #24
 800ca48:	af00      	add	r7, sp, #0
 800ca4a:	6078      	str	r0, [r7, #4]
 800ca4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800ca56:	683b      	ldr	r3, [r7, #0]
 800ca58:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800ca5a:	200f      	movs	r0, #15
 800ca5c:	183b      	adds	r3, r7, r0
 800ca5e:	687a      	ldr	r2, [r7, #4]
 800ca60:	2141      	movs	r1, #65	@ 0x41
 800ca62:	5c52      	ldrb	r2, [r2, r1]
 800ca64:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	2220      	movs	r2, #32
 800ca6c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800ca6e:	183b      	adds	r3, r7, r0
 800ca70:	781b      	ldrb	r3, [r3, #0]
 800ca72:	2b21      	cmp	r3, #33	@ 0x21
 800ca74:	d003      	beq.n	800ca7e <I2C_ITSlaveCplt+0x3a>
 800ca76:	183b      	adds	r3, r7, r0
 800ca78:	781b      	ldrb	r3, [r3, #0]
 800ca7a:	2b29      	cmp	r3, #41	@ 0x29
 800ca7c:	d109      	bne.n	800ca92 <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800ca7e:	4a7b      	ldr	r2, [pc, #492]	@ (800cc6c <I2C_ITSlaveCplt+0x228>)
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	0011      	movs	r1, r2
 800ca84:	0018      	movs	r0, r3
 800ca86:	f000 fc43 	bl	800d310 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	2221      	movs	r2, #33	@ 0x21
 800ca8e:	631a      	str	r2, [r3, #48]	@ 0x30
 800ca90:	e011      	b.n	800cab6 <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800ca92:	220f      	movs	r2, #15
 800ca94:	18bb      	adds	r3, r7, r2
 800ca96:	781b      	ldrb	r3, [r3, #0]
 800ca98:	2b22      	cmp	r3, #34	@ 0x22
 800ca9a:	d003      	beq.n	800caa4 <I2C_ITSlaveCplt+0x60>
 800ca9c:	18bb      	adds	r3, r7, r2
 800ca9e:	781b      	ldrb	r3, [r3, #0]
 800caa0:	2b2a      	cmp	r3, #42	@ 0x2a
 800caa2:	d108      	bne.n	800cab6 <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800caa4:	4a72      	ldr	r2, [pc, #456]	@ (800cc70 <I2C_ITSlaveCplt+0x22c>)
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	0011      	movs	r1, r2
 800caaa:	0018      	movs	r0, r3
 800caac:	f000 fc30 	bl	800d310 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	2222      	movs	r2, #34	@ 0x22
 800cab4:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	685a      	ldr	r2, [r3, #4]
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	2180      	movs	r1, #128	@ 0x80
 800cac2:	0209      	lsls	r1, r1, #8
 800cac4:	430a      	orrs	r2, r1
 800cac6:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	685a      	ldr	r2, [r3, #4]
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	4968      	ldr	r1, [pc, #416]	@ (800cc74 <I2C_ITSlaveCplt+0x230>)
 800cad4:	400a      	ands	r2, r1
 800cad6:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	0018      	movs	r0, r3
 800cadc:	f000 fa55 	bl	800cf8a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800cae0:	693a      	ldr	r2, [r7, #16]
 800cae2:	2380      	movs	r3, #128	@ 0x80
 800cae4:	01db      	lsls	r3, r3, #7
 800cae6:	4013      	ands	r3, r2
 800cae8:	d013      	beq.n	800cb12 <I2C_ITSlaveCplt+0xce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	681a      	ldr	r2, [r3, #0]
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	4960      	ldr	r1, [pc, #384]	@ (800cc78 <I2C_ITSlaveCplt+0x234>)
 800caf6:	400a      	ands	r2, r1
 800caf8:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d01f      	beq.n	800cb42 <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	685b      	ldr	r3, [r3, #4]
 800cb0a:	b29a      	uxth	r2, r3
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800cb10:	e017      	b.n	800cb42 <I2C_ITSlaveCplt+0xfe>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800cb12:	693a      	ldr	r2, [r7, #16]
 800cb14:	2380      	movs	r3, #128	@ 0x80
 800cb16:	021b      	lsls	r3, r3, #8
 800cb18:	4013      	ands	r3, r2
 800cb1a:	d012      	beq.n	800cb42 <I2C_ITSlaveCplt+0xfe>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	681a      	ldr	r2, [r3, #0]
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	4955      	ldr	r1, [pc, #340]	@ (800cc7c <I2C_ITSlaveCplt+0x238>)
 800cb28:	400a      	ands	r2, r1
 800cb2a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d006      	beq.n	800cb42 <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	685b      	ldr	r3, [r3, #4]
 800cb3c:	b29a      	uxth	r2, r3
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800cb42:	697b      	ldr	r3, [r7, #20]
 800cb44:	2204      	movs	r2, #4
 800cb46:	4013      	ands	r3, r2
 800cb48:	d020      	beq.n	800cb8c <I2C_ITSlaveCplt+0x148>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800cb4a:	697b      	ldr	r3, [r7, #20]
 800cb4c:	2204      	movs	r2, #4
 800cb4e:	4393      	bics	r3, r2
 800cb50:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cb5c:	b2d2      	uxtb	r2, r2
 800cb5e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cb64:	1c5a      	adds	r2, r3, #1
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d00c      	beq.n	800cb8c <I2C_ITSlaveCplt+0x148>
    {
      hi2c->XferSize--;
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cb76:	3b01      	subs	r3, #1
 800cb78:	b29a      	uxth	r2, r3
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800cb82:	b29b      	uxth	r3, r3
 800cb84:	3b01      	subs	r3, #1
 800cb86:	b29a      	uxth	r2, r3
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800cb90:	b29b      	uxth	r3, r3
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d005      	beq.n	800cba2 <I2C_ITSlaveCplt+0x15e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cb9a:	2204      	movs	r2, #4
 800cb9c:	431a      	orrs	r2, r3
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	2242      	movs	r2, #66	@ 0x42
 800cba6:	2100      	movs	r1, #0
 800cba8:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	2200      	movs	r2, #0
 800cbae:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d013      	beq.n	800cbe0 <I2C_ITSlaveCplt+0x19c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	0011      	movs	r1, r2
 800cbc0:	0018      	movs	r0, r3
 800cbc2:	f000 f8b7 	bl	800cd34 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	2241      	movs	r2, #65	@ 0x41
 800cbca:	5c9b      	ldrb	r3, [r3, r2]
 800cbcc:	b2db      	uxtb	r3, r3
 800cbce:	2b28      	cmp	r3, #40	@ 0x28
 800cbd0:	d147      	bne.n	800cc62 <I2C_ITSlaveCplt+0x21e>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800cbd2:	697a      	ldr	r2, [r7, #20]
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	0011      	movs	r1, r2
 800cbd8:	0018      	movs	r0, r3
 800cbda:	f000 f853 	bl	800cc84 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800cbde:	e040      	b.n	800cc62 <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cbe4:	4a26      	ldr	r2, [pc, #152]	@ (800cc80 <I2C_ITSlaveCplt+0x23c>)
 800cbe6:	4293      	cmp	r3, r2
 800cbe8:	d016      	beq.n	800cc18 <I2C_ITSlaveCplt+0x1d4>
    I2C_ITSlaveSeqCplt(hi2c);
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	0018      	movs	r0, r3
 800cbee:	f7ff fdf7 	bl	800c7e0 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	4a22      	ldr	r2, [pc, #136]	@ (800cc80 <I2C_ITSlaveCplt+0x23c>)
 800cbf6:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	2241      	movs	r2, #65	@ 0x41
 800cbfc:	2120      	movs	r1, #32
 800cbfe:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	2200      	movs	r2, #0
 800cc04:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	2240      	movs	r2, #64	@ 0x40
 800cc0a:	2100      	movs	r1, #0
 800cc0c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	0018      	movs	r0, r3
 800cc12:	f7fe ffae 	bl	800bb72 <HAL_I2C_ListenCpltCallback>
}
 800cc16:	e024      	b.n	800cc62 <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	2241      	movs	r2, #65	@ 0x41
 800cc1c:	5c9b      	ldrb	r3, [r3, r2]
 800cc1e:	b2db      	uxtb	r3, r3
 800cc20:	2b22      	cmp	r3, #34	@ 0x22
 800cc22:	d10f      	bne.n	800cc44 <I2C_ITSlaveCplt+0x200>
    hi2c->State = HAL_I2C_STATE_READY;
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	2241      	movs	r2, #65	@ 0x41
 800cc28:	2120      	movs	r1, #32
 800cc2a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	2200      	movs	r2, #0
 800cc30:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	2240      	movs	r2, #64	@ 0x40
 800cc36:	2100      	movs	r1, #0
 800cc38:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	0018      	movs	r0, r3
 800cc3e:	f7fe ff80 	bl	800bb42 <HAL_I2C_SlaveRxCpltCallback>
}
 800cc42:	e00e      	b.n	800cc62 <I2C_ITSlaveCplt+0x21e>
    hi2c->State = HAL_I2C_STATE_READY;
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	2241      	movs	r2, #65	@ 0x41
 800cc48:	2120      	movs	r1, #32
 800cc4a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	2200      	movs	r2, #0
 800cc50:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	2240      	movs	r2, #64	@ 0x40
 800cc56:	2100      	movs	r1, #0
 800cc58:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	0018      	movs	r0, r3
 800cc5e:	f7fe ff68 	bl	800bb32 <HAL_I2C_SlaveTxCpltCallback>
}
 800cc62:	46c0      	nop			@ (mov r8, r8)
 800cc64:	46bd      	mov	sp, r7
 800cc66:	b006      	add	sp, #24
 800cc68:	bd80      	pop	{r7, pc}
 800cc6a:	46c0      	nop			@ (mov r8, r8)
 800cc6c:	00008001 	.word	0x00008001
 800cc70:	00008002 	.word	0x00008002
 800cc74:	fe00e800 	.word	0xfe00e800
 800cc78:	ffffbfff 	.word	0xffffbfff
 800cc7c:	ffff7fff 	.word	0xffff7fff
 800cc80:	ffff0000 	.word	0xffff0000

0800cc84 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800cc84:	b580      	push	{r7, lr}
 800cc86:	b082      	sub	sp, #8
 800cc88:	af00      	add	r7, sp, #0
 800cc8a:	6078      	str	r0, [r7, #4]
 800cc8c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	4a26      	ldr	r2, [pc, #152]	@ (800cd2c <I2C_ITListenCplt+0xa8>)
 800cc92:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	2200      	movs	r2, #0
 800cc98:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	2241      	movs	r2, #65	@ 0x41
 800cc9e:	2120      	movs	r1, #32
 800cca0:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	2242      	movs	r2, #66	@ 0x42
 800cca6:	2100      	movs	r1, #0
 800cca8:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	2200      	movs	r2, #0
 800ccae:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800ccb0:	683b      	ldr	r3, [r7, #0]
 800ccb2:	2204      	movs	r2, #4
 800ccb4:	4013      	ands	r3, r2
 800ccb6:	d022      	beq.n	800ccfe <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ccc2:	b2d2      	uxtb	r2, r2
 800ccc4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ccca:	1c5a      	adds	r2, r3, #1
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d012      	beq.n	800ccfe <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ccdc:	3b01      	subs	r3, #1
 800ccde:	b29a      	uxth	r2, r3
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800cce8:	b29b      	uxth	r3, r3
 800ccea:	3b01      	subs	r3, #1
 800ccec:	b29a      	uxth	r2, r3
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ccf6:	2204      	movs	r2, #4
 800ccf8:	431a      	orrs	r2, r3
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800ccfe:	4a0c      	ldr	r2, [pc, #48]	@ (800cd30 <I2C_ITListenCplt+0xac>)
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	0011      	movs	r1, r2
 800cd04:	0018      	movs	r0, r3
 800cd06:	f000 fb03 	bl	800d310 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	2210      	movs	r2, #16
 800cd10:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	2240      	movs	r2, #64	@ 0x40
 800cd16:	2100      	movs	r1, #0
 800cd18:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	0018      	movs	r0, r3
 800cd1e:	f7fe ff28 	bl	800bb72 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800cd22:	46c0      	nop			@ (mov r8, r8)
 800cd24:	46bd      	mov	sp, r7
 800cd26:	b002      	add	sp, #8
 800cd28:	bd80      	pop	{r7, pc}
 800cd2a:	46c0      	nop			@ (mov r8, r8)
 800cd2c:	ffff0000 	.word	0xffff0000
 800cd30:	00008003 	.word	0x00008003

0800cd34 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800cd34:	b580      	push	{r7, lr}
 800cd36:	b084      	sub	sp, #16
 800cd38:	af00      	add	r7, sp, #0
 800cd3a:	6078      	str	r0, [r7, #4]
 800cd3c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800cd3e:	200f      	movs	r0, #15
 800cd40:	183b      	adds	r3, r7, r0
 800cd42:	687a      	ldr	r2, [r7, #4]
 800cd44:	2141      	movs	r1, #65	@ 0x41
 800cd46:	5c52      	ldrb	r2, [r2, r1]
 800cd48:	701a      	strb	r2, [r3, #0]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	2242      	movs	r2, #66	@ 0x42
 800cd4e:	2100      	movs	r1, #0
 800cd50:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	4a72      	ldr	r2, [pc, #456]	@ (800cf20 <I2C_ITError+0x1ec>)
 800cd56:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	2200      	movs	r2, #0
 800cd5c:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cd62:	683b      	ldr	r3, [r7, #0]
 800cd64:	431a      	orrs	r2, r3
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800cd6a:	183b      	adds	r3, r7, r0
 800cd6c:	781b      	ldrb	r3, [r3, #0]
 800cd6e:	2b28      	cmp	r3, #40	@ 0x28
 800cd70:	d007      	beq.n	800cd82 <I2C_ITError+0x4e>
 800cd72:	183b      	adds	r3, r7, r0
 800cd74:	781b      	ldrb	r3, [r3, #0]
 800cd76:	2b29      	cmp	r3, #41	@ 0x29
 800cd78:	d003      	beq.n	800cd82 <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800cd7a:	183b      	adds	r3, r7, r0
 800cd7c:	781b      	ldrb	r3, [r3, #0]
 800cd7e:	2b2a      	cmp	r3, #42	@ 0x2a
 800cd80:	d10c      	bne.n	800cd9c <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	2103      	movs	r1, #3
 800cd86:	0018      	movs	r0, r3
 800cd88:	f000 fac2 	bl	800d310 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	2241      	movs	r2, #65	@ 0x41
 800cd90:	2128      	movs	r1, #40	@ 0x28
 800cd92:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	4a63      	ldr	r2, [pc, #396]	@ (800cf24 <I2C_ITError+0x1f0>)
 800cd98:	635a      	str	r2, [r3, #52]	@ 0x34
 800cd9a:	e032      	b.n	800ce02 <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800cd9c:	4a62      	ldr	r2, [pc, #392]	@ (800cf28 <I2C_ITError+0x1f4>)
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	0011      	movs	r1, r2
 800cda2:	0018      	movs	r0, r3
 800cda4:	f000 fab4 	bl	800d310 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	0018      	movs	r0, r3
 800cdac:	f000 f8ed 	bl	800cf8a <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	2241      	movs	r2, #65	@ 0x41
 800cdb4:	5c9b      	ldrb	r3, [r3, r2]
 800cdb6:	b2db      	uxtb	r3, r3
 800cdb8:	2b60      	cmp	r3, #96	@ 0x60
 800cdba:	d01f      	beq.n	800cdfc <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	2241      	movs	r2, #65	@ 0x41
 800cdc0:	2120      	movs	r1, #32
 800cdc2:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	699b      	ldr	r3, [r3, #24]
 800cdca:	2220      	movs	r2, #32
 800cdcc:	4013      	ands	r3, r2
 800cdce:	2b20      	cmp	r3, #32
 800cdd0:	d114      	bne.n	800cdfc <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	699b      	ldr	r3, [r3, #24]
 800cdd8:	2210      	movs	r2, #16
 800cdda:	4013      	ands	r3, r2
 800cddc:	2b10      	cmp	r3, #16
 800cdde:	d109      	bne.n	800cdf4 <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	2210      	movs	r2, #16
 800cde6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cdec:	2204      	movs	r2, #4
 800cdee:	431a      	orrs	r2, r3
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	2220      	movs	r2, #32
 800cdfa:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	2200      	movs	r2, #0
 800ce00:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ce06:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d03b      	beq.n	800ce88 <I2C_ITError+0x154>
 800ce10:	68bb      	ldr	r3, [r7, #8]
 800ce12:	2b11      	cmp	r3, #17
 800ce14:	d002      	beq.n	800ce1c <I2C_ITError+0xe8>
 800ce16:	68bb      	ldr	r3, [r7, #8]
 800ce18:	2b21      	cmp	r3, #33	@ 0x21
 800ce1a:	d135      	bne.n	800ce88 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	681a      	ldr	r2, [r3, #0]
 800ce22:	2380      	movs	r3, #128	@ 0x80
 800ce24:	01db      	lsls	r3, r3, #7
 800ce26:	401a      	ands	r2, r3
 800ce28:	2380      	movs	r3, #128	@ 0x80
 800ce2a:	01db      	lsls	r3, r3, #7
 800ce2c:	429a      	cmp	r2, r3
 800ce2e:	d107      	bne.n	800ce40 <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	681a      	ldr	r2, [r3, #0]
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	493c      	ldr	r1, [pc, #240]	@ (800cf2c <I2C_ITError+0x1f8>)
 800ce3c:	400a      	ands	r2, r1
 800ce3e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ce44:	0018      	movs	r0, r3
 800ce46:	f7fd feac 	bl	800aba2 <HAL_DMA_GetState>
 800ce4a:	0003      	movs	r3, r0
 800ce4c:	2b01      	cmp	r3, #1
 800ce4e:	d016      	beq.n	800ce7e <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ce54:	4a36      	ldr	r2, [pc, #216]	@ (800cf30 <I2C_ITError+0x1fc>)
 800ce56:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	2240      	movs	r2, #64	@ 0x40
 800ce5c:	2100      	movs	r1, #0
 800ce5e:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ce64:	0018      	movs	r0, r3
 800ce66:	f7fd fda7 	bl	800a9b8 <HAL_DMA_Abort_IT>
 800ce6a:	1e03      	subs	r3, r0, #0
 800ce6c:	d051      	beq.n	800cf12 <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ce72:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ce78:	0018      	movs	r0, r3
 800ce7a:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800ce7c:	e049      	b.n	800cf12 <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	0018      	movs	r0, r3
 800ce82:	f000 f859 	bl	800cf38 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800ce86:	e044      	b.n	800cf12 <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d03b      	beq.n	800cf08 <I2C_ITError+0x1d4>
 800ce90:	68bb      	ldr	r3, [r7, #8]
 800ce92:	2b12      	cmp	r3, #18
 800ce94:	d002      	beq.n	800ce9c <I2C_ITError+0x168>
 800ce96:	68bb      	ldr	r3, [r7, #8]
 800ce98:	2b22      	cmp	r3, #34	@ 0x22
 800ce9a:	d135      	bne.n	800cf08 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	681a      	ldr	r2, [r3, #0]
 800cea2:	2380      	movs	r3, #128	@ 0x80
 800cea4:	021b      	lsls	r3, r3, #8
 800cea6:	401a      	ands	r2, r3
 800cea8:	2380      	movs	r3, #128	@ 0x80
 800ceaa:	021b      	lsls	r3, r3, #8
 800ceac:	429a      	cmp	r2, r3
 800ceae:	d107      	bne.n	800cec0 <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	681a      	ldr	r2, [r3, #0]
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	491e      	ldr	r1, [pc, #120]	@ (800cf34 <I2C_ITError+0x200>)
 800cebc:	400a      	ands	r2, r1
 800cebe:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cec4:	0018      	movs	r0, r3
 800cec6:	f7fd fe6c 	bl	800aba2 <HAL_DMA_GetState>
 800ceca:	0003      	movs	r3, r0
 800cecc:	2b01      	cmp	r3, #1
 800cece:	d016      	beq.n	800cefe <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ced4:	4a16      	ldr	r2, [pc, #88]	@ (800cf30 <I2C_ITError+0x1fc>)
 800ced6:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	2240      	movs	r2, #64	@ 0x40
 800cedc:	2100      	movs	r1, #0
 800cede:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cee4:	0018      	movs	r0, r3
 800cee6:	f7fd fd67 	bl	800a9b8 <HAL_DMA_Abort_IT>
 800ceea:	1e03      	subs	r3, r0, #0
 800ceec:	d013      	beq.n	800cf16 <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cef2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cef8:	0018      	movs	r0, r3
 800cefa:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800cefc:	e00b      	b.n	800cf16 <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	0018      	movs	r0, r3
 800cf02:	f000 f819 	bl	800cf38 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800cf06:	e006      	b.n	800cf16 <I2C_ITError+0x1e2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	0018      	movs	r0, r3
 800cf0c:	f000 f814 	bl	800cf38 <I2C_TreatErrorCallback>
  }
}
 800cf10:	e002      	b.n	800cf18 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800cf12:	46c0      	nop			@ (mov r8, r8)
 800cf14:	e000      	b.n	800cf18 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800cf16:	46c0      	nop			@ (mov r8, r8)
}
 800cf18:	46c0      	nop			@ (mov r8, r8)
 800cf1a:	46bd      	mov	sp, r7
 800cf1c:	b004      	add	sp, #16
 800cf1e:	bd80      	pop	{r7, pc}
 800cf20:	ffff0000 	.word	0xffff0000
 800cf24:	0800be19 	.word	0x0800be19
 800cf28:	00008003 	.word	0x00008003
 800cf2c:	ffffbfff 	.word	0xffffbfff
 800cf30:	0800d143 	.word	0x0800d143
 800cf34:	ffff7fff 	.word	0xffff7fff

0800cf38 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800cf38:	b580      	push	{r7, lr}
 800cf3a:	b082      	sub	sp, #8
 800cf3c:	af00      	add	r7, sp, #0
 800cf3e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	2241      	movs	r2, #65	@ 0x41
 800cf44:	5c9b      	ldrb	r3, [r3, r2]
 800cf46:	b2db      	uxtb	r3, r3
 800cf48:	2b60      	cmp	r3, #96	@ 0x60
 800cf4a:	d10f      	bne.n	800cf6c <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	2241      	movs	r2, #65	@ 0x41
 800cf50:	2120      	movs	r1, #32
 800cf52:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	2200      	movs	r2, #0
 800cf58:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	2240      	movs	r2, #64	@ 0x40
 800cf5e:	2100      	movs	r1, #0
 800cf60:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	0018      	movs	r0, r3
 800cf66:	f7fe fe24 	bl	800bbb2 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800cf6a:	e00a      	b.n	800cf82 <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	2200      	movs	r2, #0
 800cf70:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	2240      	movs	r2, #64	@ 0x40
 800cf76:	2100      	movs	r1, #0
 800cf78:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	0018      	movs	r0, r3
 800cf7e:	f7fe fe10 	bl	800bba2 <HAL_I2C_ErrorCallback>
}
 800cf82:	46c0      	nop			@ (mov r8, r8)
 800cf84:	46bd      	mov	sp, r7
 800cf86:	b002      	add	sp, #8
 800cf88:	bd80      	pop	{r7, pc}

0800cf8a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800cf8a:	b580      	push	{r7, lr}
 800cf8c:	b082      	sub	sp, #8
 800cf8e:	af00      	add	r7, sp, #0
 800cf90:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	699b      	ldr	r3, [r3, #24]
 800cf98:	2202      	movs	r2, #2
 800cf9a:	4013      	ands	r3, r2
 800cf9c:	2b02      	cmp	r3, #2
 800cf9e:	d103      	bne.n	800cfa8 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	2200      	movs	r2, #0
 800cfa6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	699b      	ldr	r3, [r3, #24]
 800cfae:	2201      	movs	r2, #1
 800cfb0:	4013      	ands	r3, r2
 800cfb2:	2b01      	cmp	r3, #1
 800cfb4:	d007      	beq.n	800cfc6 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	699a      	ldr	r2, [r3, #24]
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	2101      	movs	r1, #1
 800cfc2:	430a      	orrs	r2, r1
 800cfc4:	619a      	str	r2, [r3, #24]
  }
}
 800cfc6:	46c0      	nop			@ (mov r8, r8)
 800cfc8:	46bd      	mov	sp, r7
 800cfca:	b002      	add	sp, #8
 800cfcc:	bd80      	pop	{r7, pc}
	...

0800cfd0 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800cfd0:	b580      	push	{r7, lr}
 800cfd2:	b084      	sub	sp, #16
 800cfd4:	af00      	add	r7, sp, #0
 800cfd6:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cfdc:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	681a      	ldr	r2, [r3, #0]
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	4920      	ldr	r1, [pc, #128]	@ (800d06c <I2C_DMAMasterTransmitCplt+0x9c>)
 800cfea:	400a      	ands	r2, r1
 800cfec:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800cff2:	b29b      	uxth	r3, r3
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d105      	bne.n	800d004 <I2C_DMAMasterTransmitCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	2120      	movs	r1, #32
 800cffc:	0018      	movs	r0, r3
 800cffe:	f000 f8f9 	bl	800d1f4 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800d002:	e02e      	b.n	800d062 <I2C_DMAMasterTransmitCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d008:	68fa      	ldr	r2, [r7, #12]
 800d00a:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800d00c:	189a      	adds	r2, r3, r2
 800d00e:	68fb      	ldr	r3, [r7, #12]
 800d010:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d016:	b29b      	uxth	r3, r3
 800d018:	2bff      	cmp	r3, #255	@ 0xff
 800d01a:	d903      	bls.n	800d024 <I2C_DMAMasterTransmitCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	22ff      	movs	r2, #255	@ 0xff
 800d020:	851a      	strh	r2, [r3, #40]	@ 0x28
 800d022:	e004      	b.n	800d02e <I2C_DMAMasterTransmitCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 800d024:	68fb      	ldr	r3, [r7, #12]
 800d026:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d028:	b29a      	uxth	r2, r3
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800d02e:	68fb      	ldr	r3, [r7, #12]
 800d030:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d036:	0019      	movs	r1, r3
 800d038:	68fb      	ldr	r3, [r7, #12]
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	3328      	adds	r3, #40	@ 0x28
 800d03e:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800d040:	68fb      	ldr	r3, [r7, #12]
 800d042:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800d044:	f7fd fc12 	bl	800a86c <HAL_DMA_Start_IT>
 800d048:	1e03      	subs	r3, r0, #0
 800d04a:	d005      	beq.n	800d058 <I2C_DMAMasterTransmitCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	2110      	movs	r1, #16
 800d050:	0018      	movs	r0, r3
 800d052:	f7ff fe6f 	bl	800cd34 <I2C_ITError>
}
 800d056:	e004      	b.n	800d062 <I2C_DMAMasterTransmitCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800d058:	68fb      	ldr	r3, [r7, #12]
 800d05a:	2140      	movs	r1, #64	@ 0x40
 800d05c:	0018      	movs	r0, r3
 800d05e:	f000 f8c9 	bl	800d1f4 <I2C_Enable_IRQ>
}
 800d062:	46c0      	nop			@ (mov r8, r8)
 800d064:	46bd      	mov	sp, r7
 800d066:	b004      	add	sp, #16
 800d068:	bd80      	pop	{r7, pc}
 800d06a:	46c0      	nop			@ (mov r8, r8)
 800d06c:	ffffbfff 	.word	0xffffbfff

0800d070 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d070:	b580      	push	{r7, lr}
 800d072:	b084      	sub	sp, #16
 800d074:	af00      	add	r7, sp, #0
 800d076:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d07c:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800d07e:	68fb      	ldr	r3, [r7, #12]
 800d080:	681b      	ldr	r3, [r3, #0]
 800d082:	681a      	ldr	r2, [r3, #0]
 800d084:	68fb      	ldr	r3, [r7, #12]
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	4920      	ldr	r1, [pc, #128]	@ (800d10c <I2C_DMAMasterReceiveCplt+0x9c>)
 800d08a:	400a      	ands	r2, r1
 800d08c:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d092:	b29b      	uxth	r3, r3
 800d094:	2b00      	cmp	r3, #0
 800d096:	d105      	bne.n	800d0a4 <I2C_DMAMasterReceiveCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	2120      	movs	r1, #32
 800d09c:	0018      	movs	r0, r3
 800d09e:	f000 f8a9 	bl	800d1f4 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800d0a2:	e02e      	b.n	800d102 <I2C_DMAMasterReceiveCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d0a8:	68fa      	ldr	r2, [r7, #12]
 800d0aa:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800d0ac:	189a      	adds	r2, r3, r2
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d0b2:	68fb      	ldr	r3, [r7, #12]
 800d0b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d0b6:	b29b      	uxth	r3, r3
 800d0b8:	2bff      	cmp	r3, #255	@ 0xff
 800d0ba:	d903      	bls.n	800d0c4 <I2C_DMAMasterReceiveCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	22ff      	movs	r2, #255	@ 0xff
 800d0c0:	851a      	strh	r2, [r3, #40]	@ 0x28
 800d0c2:	e004      	b.n	800d0ce <I2C_DMAMasterReceiveCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d0c8:	b29a      	uxth	r2, r3
 800d0ca:	68fb      	ldr	r3, [r7, #12]
 800d0cc:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800d0d2:	68fb      	ldr	r3, [r7, #12]
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	3324      	adds	r3, #36	@ 0x24
 800d0d8:	0019      	movs	r1, r3
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d0de:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800d0e0:	68fb      	ldr	r3, [r7, #12]
 800d0e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800d0e4:	f7fd fbc2 	bl	800a86c <HAL_DMA_Start_IT>
 800d0e8:	1e03      	subs	r3, r0, #0
 800d0ea:	d005      	beq.n	800d0f8 <I2C_DMAMasterReceiveCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	2110      	movs	r1, #16
 800d0f0:	0018      	movs	r0, r3
 800d0f2:	f7ff fe1f 	bl	800cd34 <I2C_ITError>
}
 800d0f6:	e004      	b.n	800d102 <I2C_DMAMasterReceiveCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	2140      	movs	r1, #64	@ 0x40
 800d0fc:	0018      	movs	r0, r3
 800d0fe:	f000 f879 	bl	800d1f4 <I2C_Enable_IRQ>
}
 800d102:	46c0      	nop			@ (mov r8, r8)
 800d104:	46bd      	mov	sp, r7
 800d106:	b004      	add	sp, #16
 800d108:	bd80      	pop	{r7, pc}
 800d10a:	46c0      	nop			@ (mov r8, r8)
 800d10c:	ffff7fff 	.word	0xffff7fff

0800d110 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800d110:	b580      	push	{r7, lr}
 800d112:	b084      	sub	sp, #16
 800d114:	af00      	add	r7, sp, #0
 800d116:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d11c:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800d11e:	68fb      	ldr	r3, [r7, #12]
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	685a      	ldr	r2, [r3, #4]
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	2180      	movs	r1, #128	@ 0x80
 800d12a:	0209      	lsls	r1, r1, #8
 800d12c:	430a      	orrs	r2, r1
 800d12e:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800d130:	68fb      	ldr	r3, [r7, #12]
 800d132:	2110      	movs	r1, #16
 800d134:	0018      	movs	r0, r3
 800d136:	f7ff fdfd 	bl	800cd34 <I2C_ITError>
}
 800d13a:	46c0      	nop			@ (mov r8, r8)
 800d13c:	46bd      	mov	sp, r7
 800d13e:	b004      	add	sp, #16
 800d140:	bd80      	pop	{r7, pc}

0800d142 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800d142:	b580      	push	{r7, lr}
 800d144:	b084      	sub	sp, #16
 800d146:	af00      	add	r7, sp, #0
 800d148:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d14e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d154:	2b00      	cmp	r3, #0
 800d156:	d003      	beq.n	800d160 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800d158:	68fb      	ldr	r3, [r7, #12]
 800d15a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d15c:	2200      	movs	r2, #0
 800d15e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d164:	2b00      	cmp	r3, #0
 800d166:	d003      	beq.n	800d170 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800d168:	68fb      	ldr	r3, [r7, #12]
 800d16a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d16c:	2200      	movs	r2, #0
 800d16e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	0018      	movs	r0, r3
 800d174:	f7ff fee0 	bl	800cf38 <I2C_TreatErrorCallback>
}
 800d178:	46c0      	nop			@ (mov r8, r8)
 800d17a:	46bd      	mov	sp, r7
 800d17c:	b004      	add	sp, #16
 800d17e:	bd80      	pop	{r7, pc}

0800d180 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800d180:	b590      	push	{r4, r7, lr}
 800d182:	b087      	sub	sp, #28
 800d184:	af00      	add	r7, sp, #0
 800d186:	60f8      	str	r0, [r7, #12]
 800d188:	0008      	movs	r0, r1
 800d18a:	0011      	movs	r1, r2
 800d18c:	607b      	str	r3, [r7, #4]
 800d18e:	240a      	movs	r4, #10
 800d190:	193b      	adds	r3, r7, r4
 800d192:	1c02      	adds	r2, r0, #0
 800d194:	801a      	strh	r2, [r3, #0]
 800d196:	2009      	movs	r0, #9
 800d198:	183b      	adds	r3, r7, r0
 800d19a:	1c0a      	adds	r2, r1, #0
 800d19c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800d19e:	193b      	adds	r3, r7, r4
 800d1a0:	881b      	ldrh	r3, [r3, #0]
 800d1a2:	059b      	lsls	r3, r3, #22
 800d1a4:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800d1a6:	183b      	adds	r3, r7, r0
 800d1a8:	781b      	ldrb	r3, [r3, #0]
 800d1aa:	0419      	lsls	r1, r3, #16
 800d1ac:	23ff      	movs	r3, #255	@ 0xff
 800d1ae:	041b      	lsls	r3, r3, #16
 800d1b0:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800d1b2:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800d1b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1ba:	4313      	orrs	r3, r2
 800d1bc:	005b      	lsls	r3, r3, #1
 800d1be:	085b      	lsrs	r3, r3, #1
 800d1c0:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800d1c2:	68fb      	ldr	r3, [r7, #12]
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	685b      	ldr	r3, [r3, #4]
 800d1c8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d1ca:	0d51      	lsrs	r1, r2, #21
 800d1cc:	2280      	movs	r2, #128	@ 0x80
 800d1ce:	00d2      	lsls	r2, r2, #3
 800d1d0:	400a      	ands	r2, r1
 800d1d2:	4907      	ldr	r1, [pc, #28]	@ (800d1f0 <I2C_TransferConfig+0x70>)
 800d1d4:	430a      	orrs	r2, r1
 800d1d6:	43d2      	mvns	r2, r2
 800d1d8:	401a      	ands	r2, r3
 800d1da:	0011      	movs	r1, r2
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	697a      	ldr	r2, [r7, #20]
 800d1e2:	430a      	orrs	r2, r1
 800d1e4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800d1e6:	46c0      	nop			@ (mov r8, r8)
 800d1e8:	46bd      	mov	sp, r7
 800d1ea:	b007      	add	sp, #28
 800d1ec:	bd90      	pop	{r4, r7, pc}
 800d1ee:	46c0      	nop			@ (mov r8, r8)
 800d1f0:	03ff63ff 	.word	0x03ff63ff

0800d1f4 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800d1f4:	b580      	push	{r7, lr}
 800d1f6:	b084      	sub	sp, #16
 800d1f8:	af00      	add	r7, sp, #0
 800d1fa:	6078      	str	r0, [r7, #4]
 800d1fc:	000a      	movs	r2, r1
 800d1fe:	1cbb      	adds	r3, r7, #2
 800d200:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 800d202:	2300      	movs	r3, #0
 800d204:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d20a:	4b3e      	ldr	r3, [pc, #248]	@ (800d304 <I2C_Enable_IRQ+0x110>)
 800d20c:	429a      	cmp	r2, r3
 800d20e:	d035      	beq.n	800d27c <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800d214:	4b3c      	ldr	r3, [pc, #240]	@ (800d308 <I2C_Enable_IRQ+0x114>)
 800d216:	429a      	cmp	r2, r3
 800d218:	d030      	beq.n	800d27c <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800d21e:	4b3b      	ldr	r3, [pc, #236]	@ (800d30c <I2C_Enable_IRQ+0x118>)
 800d220:	429a      	cmp	r2, r3
 800d222:	d02b      	beq.n	800d27c <I2C_Enable_IRQ+0x88>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800d224:	1cbb      	adds	r3, r7, #2
 800d226:	2200      	movs	r2, #0
 800d228:	5e9b      	ldrsh	r3, [r3, r2]
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	da03      	bge.n	800d236 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	22b8      	movs	r2, #184	@ 0xb8
 800d232:	4313      	orrs	r3, r2
 800d234:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800d236:	1cbb      	adds	r3, r7, #2
 800d238:	881b      	ldrh	r3, [r3, #0]
 800d23a:	2201      	movs	r2, #1
 800d23c:	4013      	ands	r3, r2
 800d23e:	d003      	beq.n	800d248 <I2C_Enable_IRQ+0x54>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	22f2      	movs	r2, #242	@ 0xf2
 800d244:	4313      	orrs	r3, r2
 800d246:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800d248:	1cbb      	adds	r3, r7, #2
 800d24a:	881b      	ldrh	r3, [r3, #0]
 800d24c:	2202      	movs	r2, #2
 800d24e:	4013      	ands	r3, r2
 800d250:	d003      	beq.n	800d25a <I2C_Enable_IRQ+0x66>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	22f4      	movs	r2, #244	@ 0xf4
 800d256:	4313      	orrs	r3, r2
 800d258:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800d25a:	1cbb      	adds	r3, r7, #2
 800d25c:	881b      	ldrh	r3, [r3, #0]
 800d25e:	2b10      	cmp	r3, #16
 800d260:	d103      	bne.n	800d26a <I2C_Enable_IRQ+0x76>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	2290      	movs	r2, #144	@ 0x90
 800d266:	4313      	orrs	r3, r2
 800d268:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800d26a:	1cbb      	adds	r3, r7, #2
 800d26c:	881b      	ldrh	r3, [r3, #0]
 800d26e:	2b20      	cmp	r3, #32
 800d270:	d13c      	bne.n	800d2ec <I2C_Enable_IRQ+0xf8>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	2220      	movs	r2, #32
 800d276:	4313      	orrs	r3, r2
 800d278:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800d27a:	e037      	b.n	800d2ec <I2C_Enable_IRQ+0xf8>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800d27c:	1cbb      	adds	r3, r7, #2
 800d27e:	2200      	movs	r2, #0
 800d280:	5e9b      	ldrsh	r3, [r3, r2]
 800d282:	2b00      	cmp	r3, #0
 800d284:	da03      	bge.n	800d28e <I2C_Enable_IRQ+0x9a>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	22b8      	movs	r2, #184	@ 0xb8
 800d28a:	4313      	orrs	r3, r2
 800d28c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800d28e:	1cbb      	adds	r3, r7, #2
 800d290:	881b      	ldrh	r3, [r3, #0]
 800d292:	2201      	movs	r2, #1
 800d294:	4013      	ands	r3, r2
 800d296:	d003      	beq.n	800d2a0 <I2C_Enable_IRQ+0xac>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800d298:	68fb      	ldr	r3, [r7, #12]
 800d29a:	22f2      	movs	r2, #242	@ 0xf2
 800d29c:	4313      	orrs	r3, r2
 800d29e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800d2a0:	1cbb      	adds	r3, r7, #2
 800d2a2:	881b      	ldrh	r3, [r3, #0]
 800d2a4:	2202      	movs	r2, #2
 800d2a6:	4013      	ands	r3, r2
 800d2a8:	d003      	beq.n	800d2b2 <I2C_Enable_IRQ+0xbe>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800d2aa:	68fb      	ldr	r3, [r7, #12]
 800d2ac:	22f4      	movs	r2, #244	@ 0xf4
 800d2ae:	4313      	orrs	r3, r2
 800d2b0:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800d2b2:	1cbb      	adds	r3, r7, #2
 800d2b4:	881b      	ldrh	r3, [r3, #0]
 800d2b6:	2b10      	cmp	r3, #16
 800d2b8:	d103      	bne.n	800d2c2 <I2C_Enable_IRQ+0xce>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	2290      	movs	r2, #144	@ 0x90
 800d2be:	4313      	orrs	r3, r2
 800d2c0:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800d2c2:	1cbb      	adds	r3, r7, #2
 800d2c4:	881b      	ldrh	r3, [r3, #0]
 800d2c6:	2b20      	cmp	r3, #32
 800d2c8:	d103      	bne.n	800d2d2 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	2260      	movs	r2, #96	@ 0x60
 800d2ce:	4313      	orrs	r3, r2
 800d2d0:	60fb      	str	r3, [r7, #12]
    }

    if ((hi2c->XferISR != I2C_Mem_ISR_DMA) && (InterruptRequest == I2C_XFER_RELOAD_IT))
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d2d6:	4b0d      	ldr	r3, [pc, #52]	@ (800d30c <I2C_Enable_IRQ+0x118>)
 800d2d8:	429a      	cmp	r2, r3
 800d2da:	d007      	beq.n	800d2ec <I2C_Enable_IRQ+0xf8>
 800d2dc:	1cbb      	adds	r3, r7, #2
 800d2de:	881b      	ldrh	r3, [r3, #0]
 800d2e0:	2b40      	cmp	r3, #64	@ 0x40
 800d2e2:	d103      	bne.n	800d2ec <I2C_Enable_IRQ+0xf8>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	2240      	movs	r2, #64	@ 0x40
 800d2e8:	4313      	orrs	r3, r2
 800d2ea:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	6819      	ldr	r1, [r3, #0]
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	68fa      	ldr	r2, [r7, #12]
 800d2f8:	430a      	orrs	r2, r1
 800d2fa:	601a      	str	r2, [r3, #0]
}
 800d2fc:	46c0      	nop			@ (mov r8, r8)
 800d2fe:	46bd      	mov	sp, r7
 800d300:	b004      	add	sp, #16
 800d302:	bd80      	pop	{r7, pc}
 800d304:	0800c019 	.word	0x0800c019
 800d308:	0800c449 	.word	0x0800c449
 800d30c:	0800c211 	.word	0x0800c211

0800d310 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800d310:	b580      	push	{r7, lr}
 800d312:	b084      	sub	sp, #16
 800d314:	af00      	add	r7, sp, #0
 800d316:	6078      	str	r0, [r7, #4]
 800d318:	000a      	movs	r2, r1
 800d31a:	1cbb      	adds	r3, r7, #2
 800d31c:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 800d31e:	2300      	movs	r3, #0
 800d320:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800d322:	1cbb      	adds	r3, r7, #2
 800d324:	881b      	ldrh	r3, [r3, #0]
 800d326:	2201      	movs	r2, #1
 800d328:	4013      	ands	r3, r2
 800d32a:	d010      	beq.n	800d34e <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800d32c:	68fb      	ldr	r3, [r7, #12]
 800d32e:	2242      	movs	r2, #66	@ 0x42
 800d330:	4313      	orrs	r3, r2
 800d332:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	2241      	movs	r2, #65	@ 0x41
 800d338:	5c9b      	ldrb	r3, [r3, r2]
 800d33a:	b2db      	uxtb	r3, r3
 800d33c:	001a      	movs	r2, r3
 800d33e:	2328      	movs	r3, #40	@ 0x28
 800d340:	4013      	ands	r3, r2
 800d342:	2b28      	cmp	r3, #40	@ 0x28
 800d344:	d003      	beq.n	800d34e <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800d346:	68fb      	ldr	r3, [r7, #12]
 800d348:	22b0      	movs	r2, #176	@ 0xb0
 800d34a:	4313      	orrs	r3, r2
 800d34c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800d34e:	1cbb      	adds	r3, r7, #2
 800d350:	881b      	ldrh	r3, [r3, #0]
 800d352:	2202      	movs	r2, #2
 800d354:	4013      	ands	r3, r2
 800d356:	d010      	beq.n	800d37a <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800d358:	68fb      	ldr	r3, [r7, #12]
 800d35a:	2244      	movs	r2, #68	@ 0x44
 800d35c:	4313      	orrs	r3, r2
 800d35e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	2241      	movs	r2, #65	@ 0x41
 800d364:	5c9b      	ldrb	r3, [r3, r2]
 800d366:	b2db      	uxtb	r3, r3
 800d368:	001a      	movs	r2, r3
 800d36a:	2328      	movs	r3, #40	@ 0x28
 800d36c:	4013      	ands	r3, r2
 800d36e:	2b28      	cmp	r3, #40	@ 0x28
 800d370:	d003      	beq.n	800d37a <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	22b0      	movs	r2, #176	@ 0xb0
 800d376:	4313      	orrs	r3, r2
 800d378:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800d37a:	1cbb      	adds	r3, r7, #2
 800d37c:	2200      	movs	r2, #0
 800d37e:	5e9b      	ldrsh	r3, [r3, r2]
 800d380:	2b00      	cmp	r3, #0
 800d382:	da03      	bge.n	800d38c <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800d384:	68fb      	ldr	r3, [r7, #12]
 800d386:	22b8      	movs	r2, #184	@ 0xb8
 800d388:	4313      	orrs	r3, r2
 800d38a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800d38c:	1cbb      	adds	r3, r7, #2
 800d38e:	881b      	ldrh	r3, [r3, #0]
 800d390:	2b10      	cmp	r3, #16
 800d392:	d103      	bne.n	800d39c <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800d394:	68fb      	ldr	r3, [r7, #12]
 800d396:	2290      	movs	r2, #144	@ 0x90
 800d398:	4313      	orrs	r3, r2
 800d39a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800d39c:	1cbb      	adds	r3, r7, #2
 800d39e:	881b      	ldrh	r3, [r3, #0]
 800d3a0:	2b20      	cmp	r3, #32
 800d3a2:	d103      	bne.n	800d3ac <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	2220      	movs	r2, #32
 800d3a8:	4313      	orrs	r3, r2
 800d3aa:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800d3ac:	1cbb      	adds	r3, r7, #2
 800d3ae:	881b      	ldrh	r3, [r3, #0]
 800d3b0:	2b40      	cmp	r3, #64	@ 0x40
 800d3b2:	d103      	bne.n	800d3bc <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	2240      	movs	r2, #64	@ 0x40
 800d3b8:	4313      	orrs	r3, r2
 800d3ba:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	681a      	ldr	r2, [r3, #0]
 800d3c2:	68fb      	ldr	r3, [r7, #12]
 800d3c4:	43d9      	mvns	r1, r3
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	681b      	ldr	r3, [r3, #0]
 800d3ca:	400a      	ands	r2, r1
 800d3cc:	601a      	str	r2, [r3, #0]
}
 800d3ce:	46c0      	nop			@ (mov r8, r8)
 800d3d0:	46bd      	mov	sp, r7
 800d3d2:	b004      	add	sp, #16
 800d3d4:	bd80      	pop	{r7, pc}
	...

0800d3d8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800d3d8:	b580      	push	{r7, lr}
 800d3da:	b082      	sub	sp, #8
 800d3dc:	af00      	add	r7, sp, #0
 800d3de:	6078      	str	r0, [r7, #4]
 800d3e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	2241      	movs	r2, #65	@ 0x41
 800d3e6:	5c9b      	ldrb	r3, [r3, r2]
 800d3e8:	b2db      	uxtb	r3, r3
 800d3ea:	2b20      	cmp	r3, #32
 800d3ec:	d138      	bne.n	800d460 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	2240      	movs	r2, #64	@ 0x40
 800d3f2:	5c9b      	ldrb	r3, [r3, r2]
 800d3f4:	2b01      	cmp	r3, #1
 800d3f6:	d101      	bne.n	800d3fc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800d3f8:	2302      	movs	r3, #2
 800d3fa:	e032      	b.n	800d462 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	2240      	movs	r2, #64	@ 0x40
 800d400:	2101      	movs	r1, #1
 800d402:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	2241      	movs	r2, #65	@ 0x41
 800d408:	2124      	movs	r1, #36	@ 0x24
 800d40a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	681a      	ldr	r2, [r3, #0]
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	2101      	movs	r1, #1
 800d418:	438a      	bics	r2, r1
 800d41a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	681a      	ldr	r2, [r3, #0]
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	4911      	ldr	r1, [pc, #68]	@ (800d46c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800d428:	400a      	ands	r2, r1
 800d42a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	6819      	ldr	r1, [r3, #0]
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	683a      	ldr	r2, [r7, #0]
 800d438:	430a      	orrs	r2, r1
 800d43a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	681a      	ldr	r2, [r3, #0]
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	2101      	movs	r1, #1
 800d448:	430a      	orrs	r2, r1
 800d44a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	2241      	movs	r2, #65	@ 0x41
 800d450:	2120      	movs	r1, #32
 800d452:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	2240      	movs	r2, #64	@ 0x40
 800d458:	2100      	movs	r1, #0
 800d45a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800d45c:	2300      	movs	r3, #0
 800d45e:	e000      	b.n	800d462 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800d460:	2302      	movs	r3, #2
  }
}
 800d462:	0018      	movs	r0, r3
 800d464:	46bd      	mov	sp, r7
 800d466:	b002      	add	sp, #8
 800d468:	bd80      	pop	{r7, pc}
 800d46a:	46c0      	nop			@ (mov r8, r8)
 800d46c:	ffffefff 	.word	0xffffefff

0800d470 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800d470:	b580      	push	{r7, lr}
 800d472:	b084      	sub	sp, #16
 800d474:	af00      	add	r7, sp, #0
 800d476:	6078      	str	r0, [r7, #4]
 800d478:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	2241      	movs	r2, #65	@ 0x41
 800d47e:	5c9b      	ldrb	r3, [r3, r2]
 800d480:	b2db      	uxtb	r3, r3
 800d482:	2b20      	cmp	r3, #32
 800d484:	d139      	bne.n	800d4fa <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	2240      	movs	r2, #64	@ 0x40
 800d48a:	5c9b      	ldrb	r3, [r3, r2]
 800d48c:	2b01      	cmp	r3, #1
 800d48e:	d101      	bne.n	800d494 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800d490:	2302      	movs	r3, #2
 800d492:	e033      	b.n	800d4fc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	2240      	movs	r2, #64	@ 0x40
 800d498:	2101      	movs	r1, #1
 800d49a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	2241      	movs	r2, #65	@ 0x41
 800d4a0:	2124      	movs	r1, #36	@ 0x24
 800d4a2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	681a      	ldr	r2, [r3, #0]
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	2101      	movs	r1, #1
 800d4b0:	438a      	bics	r2, r1
 800d4b2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	681b      	ldr	r3, [r3, #0]
 800d4ba:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800d4bc:	68fb      	ldr	r3, [r7, #12]
 800d4be:	4a11      	ldr	r2, [pc, #68]	@ (800d504 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800d4c0:	4013      	ands	r3, r2
 800d4c2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800d4c4:	683b      	ldr	r3, [r7, #0]
 800d4c6:	021b      	lsls	r3, r3, #8
 800d4c8:	68fa      	ldr	r2, [r7, #12]
 800d4ca:	4313      	orrs	r3, r2
 800d4cc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	681b      	ldr	r3, [r3, #0]
 800d4d2:	68fa      	ldr	r2, [r7, #12]
 800d4d4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	681a      	ldr	r2, [r3, #0]
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	2101      	movs	r1, #1
 800d4e2:	430a      	orrs	r2, r1
 800d4e4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	2241      	movs	r2, #65	@ 0x41
 800d4ea:	2120      	movs	r1, #32
 800d4ec:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	2240      	movs	r2, #64	@ 0x40
 800d4f2:	2100      	movs	r1, #0
 800d4f4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800d4f6:	2300      	movs	r3, #0
 800d4f8:	e000      	b.n	800d4fc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800d4fa:	2302      	movs	r3, #2
  }
}
 800d4fc:	0018      	movs	r0, r3
 800d4fe:	46bd      	mov	sp, r7
 800d500:	b004      	add	sp, #16
 800d502:	bd80      	pop	{r7, pc}
 800d504:	fffff0ff 	.word	0xfffff0ff

0800d508 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800d508:	b580      	push	{r7, lr}
 800d50a:	b088      	sub	sp, #32
 800d50c:	af00      	add	r7, sp, #0
 800d50e:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	2b00      	cmp	r3, #0
 800d514:	d101      	bne.n	800d51a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800d516:	2301      	movs	r3, #1
 800d518:	e0e1      	b.n	800d6de <HAL_I2S_Init+0x1d6>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	2235      	movs	r2, #53	@ 0x35
 800d51e:	5c9b      	ldrb	r3, [r3, r2]
 800d520:	b2db      	uxtb	r3, r3
 800d522:	2b00      	cmp	r3, #0
 800d524:	d107      	bne.n	800d536 <HAL_I2S_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	2234      	movs	r2, #52	@ 0x34
 800d52a:	2100      	movs	r1, #0
 800d52c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	0018      	movs	r0, r3
 800d532:	f7f8 fcf3 	bl	8005f1c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	2235      	movs	r2, #53	@ 0x35
 800d53a:	2102      	movs	r1, #2
 800d53c:	5499      	strb	r1, [r3, r2]

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	69da      	ldr	r2, [r3, #28]
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	4967      	ldr	r1, [pc, #412]	@ (800d6e8 <HAL_I2S_Init+0x1e0>)
 800d54a:	400a      	ands	r2, r1
 800d54c:	61da      	str	r2, [r3, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	681b      	ldr	r3, [r3, #0]
 800d552:	2202      	movs	r2, #2
 800d554:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	695b      	ldr	r3, [r3, #20]
 800d55a:	2b02      	cmp	r3, #2
 800d55c:	d073      	beq.n	800d646 <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	68db      	ldr	r3, [r3, #12]
 800d562:	2b00      	cmp	r3, #0
 800d564:	d102      	bne.n	800d56c <HAL_I2S_Init+0x64>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800d566:	2310      	movs	r3, #16
 800d568:	617b      	str	r3, [r7, #20]
 800d56a:	e001      	b.n	800d570 <HAL_I2S_Init+0x68>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800d56c:	2320      	movs	r3, #32
 800d56e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	689b      	ldr	r3, [r3, #8]
 800d574:	2b20      	cmp	r3, #32
 800d576:	d802      	bhi.n	800d57e <HAL_I2S_Init+0x76>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800d578:	697b      	ldr	r3, [r7, #20]
 800d57a:	005b      	lsls	r3, r3, #1
 800d57c:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCC_GetSysClockFreq();
 800d57e:	f002 fe8d 	bl	801029c <HAL_RCC_GetSysClockFreq>
 800d582:	0003      	movs	r3, r0
 800d584:	60fb      	str	r3, [r7, #12]

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	691a      	ldr	r2, [r3, #16]
 800d58a:	2380      	movs	r3, #128	@ 0x80
 800d58c:	009b      	lsls	r3, r3, #2
 800d58e:	429a      	cmp	r2, r3
 800d590:	d131      	bne.n	800d5f6 <HAL_I2S_Init+0xee>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	68db      	ldr	r3, [r3, #12]
 800d596:	2b00      	cmp	r3, #0
 800d598:	d016      	beq.n	800d5c8 <HAL_I2S_Init+0xc0>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800d59a:	697b      	ldr	r3, [r7, #20]
 800d59c:	009b      	lsls	r3, r3, #2
 800d59e:	0019      	movs	r1, r3
 800d5a0:	68f8      	ldr	r0, [r7, #12]
 800d5a2:	f7f2 fdcd 	bl	8000140 <__udivsi3>
 800d5a6:	0003      	movs	r3, r0
 800d5a8:	001a      	movs	r2, r3
 800d5aa:	0013      	movs	r3, r2
 800d5ac:	009b      	lsls	r3, r3, #2
 800d5ae:	189b      	adds	r3, r3, r2
 800d5b0:	005b      	lsls	r3, r3, #1
 800d5b2:	001a      	movs	r2, r3
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	695b      	ldr	r3, [r3, #20]
 800d5b8:	0019      	movs	r1, r3
 800d5ba:	0010      	movs	r0, r2
 800d5bc:	f7f2 fdc0 	bl	8000140 <__udivsi3>
 800d5c0:	0003      	movs	r3, r0
 800d5c2:	3305      	adds	r3, #5
 800d5c4:	613b      	str	r3, [r7, #16]
 800d5c6:	e02a      	b.n	800d61e <HAL_I2S_Init+0x116>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800d5c8:	697b      	ldr	r3, [r7, #20]
 800d5ca:	00db      	lsls	r3, r3, #3
 800d5cc:	0019      	movs	r1, r3
 800d5ce:	68f8      	ldr	r0, [r7, #12]
 800d5d0:	f7f2 fdb6 	bl	8000140 <__udivsi3>
 800d5d4:	0003      	movs	r3, r0
 800d5d6:	001a      	movs	r2, r3
 800d5d8:	0013      	movs	r3, r2
 800d5da:	009b      	lsls	r3, r3, #2
 800d5dc:	189b      	adds	r3, r3, r2
 800d5de:	005b      	lsls	r3, r3, #1
 800d5e0:	001a      	movs	r2, r3
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	695b      	ldr	r3, [r3, #20]
 800d5e6:	0019      	movs	r1, r3
 800d5e8:	0010      	movs	r0, r2
 800d5ea:	f7f2 fda9 	bl	8000140 <__udivsi3>
 800d5ee:	0003      	movs	r3, r0
 800d5f0:	3305      	adds	r3, #5
 800d5f2:	613b      	str	r3, [r7, #16]
 800d5f4:	e013      	b.n	800d61e <HAL_I2S_Init+0x116>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800d5f6:	6979      	ldr	r1, [r7, #20]
 800d5f8:	68f8      	ldr	r0, [r7, #12]
 800d5fa:	f7f2 fda1 	bl	8000140 <__udivsi3>
 800d5fe:	0003      	movs	r3, r0
 800d600:	001a      	movs	r2, r3
 800d602:	0013      	movs	r3, r2
 800d604:	009b      	lsls	r3, r3, #2
 800d606:	189b      	adds	r3, r3, r2
 800d608:	005b      	lsls	r3, r3, #1
 800d60a:	001a      	movs	r2, r3
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	695b      	ldr	r3, [r3, #20]
 800d610:	0019      	movs	r1, r3
 800d612:	0010      	movs	r0, r2
 800d614:	f7f2 fd94 	bl	8000140 <__udivsi3>
 800d618:	0003      	movs	r3, r0
 800d61a:	3305      	adds	r3, #5
 800d61c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800d61e:	693b      	ldr	r3, [r7, #16]
 800d620:	210a      	movs	r1, #10
 800d622:	0018      	movs	r0, r3
 800d624:	f7f2 fd8c 	bl	8000140 <__udivsi3>
 800d628:	0003      	movs	r3, r0
 800d62a:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800d62c:	693b      	ldr	r3, [r7, #16]
 800d62e:	2201      	movs	r2, #1
 800d630:	4013      	ands	r3, r2
 800d632:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800d634:	693a      	ldr	r2, [r7, #16]
 800d636:	69bb      	ldr	r3, [r7, #24]
 800d638:	1ad3      	subs	r3, r2, r3
 800d63a:	085b      	lsrs	r3, r3, #1
 800d63c:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800d63e:	69bb      	ldr	r3, [r7, #24]
 800d640:	021b      	lsls	r3, r3, #8
 800d642:	61bb      	str	r3, [r7, #24]
 800d644:	e003      	b.n	800d64e <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800d646:	2302      	movs	r3, #2
 800d648:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800d64a:	2300      	movs	r3, #0
 800d64c:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800d64e:	69fb      	ldr	r3, [r7, #28]
 800d650:	2b01      	cmp	r3, #1
 800d652:	d902      	bls.n	800d65a <HAL_I2S_Init+0x152>
 800d654:	69fb      	ldr	r3, [r7, #28]
 800d656:	2bff      	cmp	r3, #255	@ 0xff
 800d658:	d907      	bls.n	800d66a <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d65e:	2210      	movs	r2, #16
 800d660:	431a      	orrs	r2, r3
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	639a      	str	r2, [r3, #56]	@ 0x38
    return  HAL_ERROR;
 800d666:	2301      	movs	r3, #1
 800d668:	e039      	b.n	800d6de <HAL_I2S_Init+0x1d6>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	691a      	ldr	r2, [r3, #16]
 800d66e:	69bb      	ldr	r3, [r7, #24]
 800d670:	431a      	orrs	r2, r3
 800d672:	0011      	movs	r1, r2
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	69fa      	ldr	r2, [r7, #28]
 800d67a:	430a      	orrs	r2, r1
 800d67c:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	69db      	ldr	r3, [r3, #28]
 800d684:	4a18      	ldr	r2, [pc, #96]	@ (800d6e8 <HAL_I2S_Init+0x1e0>)
 800d686:	401a      	ands	r2, r3
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	6859      	ldr	r1, [r3, #4]
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	689b      	ldr	r3, [r3, #8]
 800d690:	4319      	orrs	r1, r3
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	68db      	ldr	r3, [r3, #12]
 800d696:	4319      	orrs	r1, r3
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	699b      	ldr	r3, [r3, #24]
 800d69c:	430b      	orrs	r3, r1
 800d69e:	431a      	orrs	r2, r3
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	2180      	movs	r1, #128	@ 0x80
 800d6a6:	0109      	lsls	r1, r1, #4
 800d6a8:	430a      	orrs	r2, r1
 800d6aa:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	689b      	ldr	r3, [r3, #8]
 800d6b0:	2b30      	cmp	r3, #48	@ 0x30
 800d6b2:	d003      	beq.n	800d6bc <HAL_I2S_Init+0x1b4>
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	689b      	ldr	r3, [r3, #8]
 800d6b8:	2bb0      	cmp	r3, #176	@ 0xb0
 800d6ba:	d108      	bne.n	800d6ce <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	69da      	ldr	r2, [r3, #28]
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	681b      	ldr	r3, [r3, #0]
 800d6c6:	2180      	movs	r1, #128	@ 0x80
 800d6c8:	0149      	lsls	r1, r1, #5
 800d6ca:	430a      	orrs	r2, r1
 800d6cc:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	2200      	movs	r2, #0
 800d6d2:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	2235      	movs	r2, #53	@ 0x35
 800d6d8:	2101      	movs	r1, #1
 800d6da:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800d6dc:	2300      	movs	r3, #0
}
 800d6de:	0018      	movs	r0, r3
 800d6e0:	46bd      	mov	sp, r7
 800d6e2:	b008      	add	sp, #32
 800d6e4:	bd80      	pop	{r7, pc}
 800d6e6:	46c0      	nop			@ (mov r8, r8)
 800d6e8:	fffff040 	.word	0xfffff040

0800d6ec <HAL_I2S_DeInit>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DeInit(I2S_HandleTypeDef *hi2s)
{
 800d6ec:	b580      	push	{r7, lr}
 800d6ee:	b082      	sub	sp, #8
 800d6f0:	af00      	add	r7, sp, #0
 800d6f2:	6078      	str	r0, [r7, #4]
  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d101      	bne.n	800d6fe <HAL_I2S_DeInit+0x12>
  {
    return HAL_ERROR;
 800d6fa:	2301      	movs	r3, #1
 800d6fc:	e01b      	b.n	800d736 <HAL_I2S_DeInit+0x4a>
  }

  /* Check the parameters */
  assert_param(IS_I2S_ALL_INSTANCE(hi2s->Instance));

  hi2s->State = HAL_I2S_STATE_BUSY;
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	2235      	movs	r2, #53	@ 0x35
 800d702:	2102      	movs	r1, #2
 800d704:	5499      	strb	r1, [r3, r2]

  /* Disable the I2S Peripheral Clock */
  __HAL_I2S_DISABLE(hi2s);
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	69da      	ldr	r2, [r3, #28]
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	490b      	ldr	r1, [pc, #44]	@ (800d740 <HAL_I2S_DeInit+0x54>)
 800d712:	400a      	ands	r2, r1
 800d714:	61da      	str	r2, [r3, #28]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hi2s->MspDeInitCallback(hi2s);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_I2S_MspDeInit(hi2s);
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	0018      	movs	r0, r3
 800d71a:	f7f8 fc73 	bl	8006004 <HAL_I2S_MspDeInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	2200      	movs	r2, #0
 800d722:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->State     = HAL_I2S_STATE_RESET;
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	2235      	movs	r2, #53	@ 0x35
 800d728:	2100      	movs	r1, #0
 800d72a:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hi2s);
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	2234      	movs	r2, #52	@ 0x34
 800d730:	2100      	movs	r1, #0
 800d732:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800d734:	2300      	movs	r3, #0
}
 800d736:	0018      	movs	r0, r3
 800d738:	46bd      	mov	sp, r7
 800d73a:	b002      	add	sp, #8
 800d73c:	bd80      	pop	{r7, pc}
 800d73e:	46c0      	nop			@ (mov r8, r8)
 800d740:	fffffbff 	.word	0xfffffbff

0800d744 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 800d744:	b580      	push	{r7, lr}
 800d746:	b086      	sub	sp, #24
 800d748:	af00      	add	r7, sp, #0
 800d74a:	60f8      	str	r0, [r7, #12]
 800d74c:	60b9      	str	r1, [r7, #8]
 800d74e:	1dbb      	adds	r3, r7, #6
 800d750:	801a      	strh	r2, [r3, #0]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 800d752:	68bb      	ldr	r3, [r7, #8]
 800d754:	2b00      	cmp	r3, #0
 800d756:	d003      	beq.n	800d760 <HAL_I2S_Receive_DMA+0x1c>
 800d758:	1dbb      	adds	r3, r7, #6
 800d75a:	881b      	ldrh	r3, [r3, #0]
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d101      	bne.n	800d764 <HAL_I2S_Receive_DMA+0x20>
  {
    return  HAL_ERROR;
 800d760:	2301      	movs	r3, #1
 800d762:	e0a6      	b.n	800d8b2 <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 800d764:	68fb      	ldr	r3, [r7, #12]
 800d766:	2234      	movs	r2, #52	@ 0x34
 800d768:	5c9b      	ldrb	r3, [r3, r2]
 800d76a:	b2db      	uxtb	r3, r3
 800d76c:	2b01      	cmp	r3, #1
 800d76e:	d101      	bne.n	800d774 <HAL_I2S_Receive_DMA+0x30>
 800d770:	2302      	movs	r3, #2
 800d772:	e09e      	b.n	800d8b2 <HAL_I2S_Receive_DMA+0x16e>
 800d774:	68fb      	ldr	r3, [r7, #12]
 800d776:	2234      	movs	r2, #52	@ 0x34
 800d778:	2101      	movs	r1, #1
 800d77a:	5499      	strb	r1, [r3, r2]

  if (hi2s->State != HAL_I2S_STATE_READY)
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	2235      	movs	r2, #53	@ 0x35
 800d780:	5c9b      	ldrb	r3, [r3, r2]
 800d782:	b2db      	uxtb	r3, r3
 800d784:	2b01      	cmp	r3, #1
 800d786:	d005      	beq.n	800d794 <HAL_I2S_Receive_DMA+0x50>
  {
    __HAL_UNLOCK(hi2s);
 800d788:	68fb      	ldr	r3, [r7, #12]
 800d78a:	2234      	movs	r2, #52	@ 0x34
 800d78c:	2100      	movs	r1, #0
 800d78e:	5499      	strb	r1, [r3, r2]
    return HAL_BUSY;
 800d790:	2302      	movs	r3, #2
 800d792:	e08e      	b.n	800d8b2 <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	2235      	movs	r2, #53	@ 0x35
 800d798:	2104      	movs	r1, #4
 800d79a:	5499      	strb	r1, [r3, r2]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	2200      	movs	r2, #0
 800d7a0:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->pRxBuffPtr = pData;
 800d7a2:	68fb      	ldr	r3, [r7, #12]
 800d7a4:	68ba      	ldr	r2, [r7, #8]
 800d7a6:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 800d7a8:	68fb      	ldr	r3, [r7, #12]
 800d7aa:	681b      	ldr	r3, [r3, #0]
 800d7ac:	69db      	ldr	r3, [r3, #28]
 800d7ae:	2207      	movs	r2, #7
 800d7b0:	4013      	ands	r3, r2
 800d7b2:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 800d7b4:	697b      	ldr	r3, [r7, #20]
 800d7b6:	2b03      	cmp	r3, #3
 800d7b8:	d002      	beq.n	800d7c0 <HAL_I2S_Receive_DMA+0x7c>
 800d7ba:	697b      	ldr	r3, [r7, #20]
 800d7bc:	2b05      	cmp	r3, #5
 800d7be:	d10c      	bne.n	800d7da <HAL_I2S_Receive_DMA+0x96>
  {
    hi2s->RxXferSize = (Size << 1U);
 800d7c0:	1dbb      	adds	r3, r7, #6
 800d7c2:	881b      	ldrh	r3, [r3, #0]
 800d7c4:	18db      	adds	r3, r3, r3
 800d7c6:	b29a      	uxth	r2, r3
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = (Size << 1U);
 800d7cc:	1dbb      	adds	r3, r7, #6
 800d7ce:	881b      	ldrh	r3, [r3, #0]
 800d7d0:	18db      	adds	r3, r3, r3
 800d7d2:	b29a      	uxth	r2, r3
 800d7d4:	68fb      	ldr	r3, [r7, #12]
 800d7d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800d7d8:	e007      	b.n	800d7ea <HAL_I2S_Receive_DMA+0xa6>
  }
  else
  {
    hi2s->RxXferSize = Size;
 800d7da:	68fb      	ldr	r3, [r7, #12]
 800d7dc:	1dba      	adds	r2, r7, #6
 800d7de:	8812      	ldrh	r2, [r2, #0]
 800d7e0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = Size;
 800d7e2:	68fb      	ldr	r3, [r7, #12]
 800d7e4:	1dba      	adds	r2, r7, #6
 800d7e6:	8812      	ldrh	r2, [r2, #0]
 800d7e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 800d7ea:	68fb      	ldr	r3, [r7, #12]
 800d7ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d7ee:	4a33      	ldr	r2, [pc, #204]	@ (800d8bc <HAL_I2S_Receive_DMA+0x178>)
 800d7f0:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 800d7f2:	68fb      	ldr	r3, [r7, #12]
 800d7f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d7f6:	4a32      	ldr	r2, [pc, #200]	@ (800d8c0 <HAL_I2S_Receive_DMA+0x17c>)
 800d7f8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 800d7fa:	68fb      	ldr	r3, [r7, #12]
 800d7fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d7fe:	4a31      	ldr	r2, [pc, #196]	@ (800d8c4 <HAL_I2S_Receive_DMA+0x180>)
 800d800:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 800d802:	68fb      	ldr	r3, [r7, #12]
 800d804:	681b      	ldr	r3, [r3, #0]
 800d806:	69da      	ldr	r2, [r3, #28]
 800d808:	23c0      	movs	r3, #192	@ 0xc0
 800d80a:	009b      	lsls	r3, r3, #2
 800d80c:	401a      	ands	r2, r3
 800d80e:	23c0      	movs	r3, #192	@ 0xc0
 800d810:	009b      	lsls	r3, r3, #2
 800d812:	429a      	cmp	r2, r3
 800d814:	d10a      	bne.n	800d82c <HAL_I2S_Receive_DMA+0xe8>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800d816:	2300      	movs	r3, #0
 800d818:	613b      	str	r3, [r7, #16]
 800d81a:	68fb      	ldr	r3, [r7, #12]
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	68db      	ldr	r3, [r3, #12]
 800d820:	613b      	str	r3, [r7, #16]
 800d822:	68fb      	ldr	r3, [r7, #12]
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	689b      	ldr	r3, [r3, #8]
 800d828:	613b      	str	r3, [r7, #16]
 800d82a:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 800d82c:	68fb      	ldr	r3, [r7, #12]
 800d82e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	681b      	ldr	r3, [r3, #0]
 800d834:	330c      	adds	r3, #12
 800d836:	0019      	movs	r1, r3
 800d838:	68fb      	ldr	r3, [r7, #12]
 800d83a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d83c:	001a      	movs	r2, r3
                                 hi2s->RxXferSize))
 800d83e:	68fb      	ldr	r3, [r7, #12]
 800d840:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d842:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 800d844:	f7fd f812 	bl	800a86c <HAL_DMA_Start_IT>
 800d848:	1e03      	subs	r3, r0, #0
 800d84a:	d00f      	beq.n	800d86c <HAL_I2S_Receive_DMA+0x128>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800d84c:	68fb      	ldr	r3, [r7, #12]
 800d84e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d850:	2208      	movs	r2, #8
 800d852:	431a      	orrs	r2, r3
 800d854:	68fb      	ldr	r3, [r7, #12]
 800d856:	639a      	str	r2, [r3, #56]	@ 0x38
    hi2s->State = HAL_I2S_STATE_READY;
 800d858:	68fb      	ldr	r3, [r7, #12]
 800d85a:	2235      	movs	r2, #53	@ 0x35
 800d85c:	2101      	movs	r1, #1
 800d85e:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hi2s);
 800d860:	68fb      	ldr	r3, [r7, #12]
 800d862:	2234      	movs	r2, #52	@ 0x34
 800d864:	2100      	movs	r1, #0
 800d866:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800d868:	2301      	movs	r3, #1
 800d86a:	e022      	b.n	800d8b2 <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	69da      	ldr	r2, [r3, #28]
 800d872:	2380      	movs	r3, #128	@ 0x80
 800d874:	00db      	lsls	r3, r3, #3
 800d876:	4013      	ands	r3, r2
 800d878:	d108      	bne.n	800d88c <HAL_I2S_Receive_DMA+0x148>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 800d87a:	68fb      	ldr	r3, [r7, #12]
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	69da      	ldr	r2, [r3, #28]
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	2180      	movs	r1, #128	@ 0x80
 800d886:	00c9      	lsls	r1, r1, #3
 800d888:	430a      	orrs	r2, r1
 800d88a:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	685b      	ldr	r3, [r3, #4]
 800d892:	2201      	movs	r2, #1
 800d894:	4013      	ands	r3, r2
 800d896:	d107      	bne.n	800d8a8 <HAL_I2S_Receive_DMA+0x164>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800d898:	68fb      	ldr	r3, [r7, #12]
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	685a      	ldr	r2, [r3, #4]
 800d89e:	68fb      	ldr	r3, [r7, #12]
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	2101      	movs	r1, #1
 800d8a4:	430a      	orrs	r2, r1
 800d8a6:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 800d8a8:	68fb      	ldr	r3, [r7, #12]
 800d8aa:	2234      	movs	r2, #52	@ 0x34
 800d8ac:	2100      	movs	r1, #0
 800d8ae:	5499      	strb	r1, [r3, r2]
  return HAL_OK;
 800d8b0:	2300      	movs	r3, #0
}
 800d8b2:	0018      	movs	r0, r3
 800d8b4:	46bd      	mov	sp, r7
 800d8b6:	b006      	add	sp, #24
 800d8b8:	bd80      	pop	{r7, pc}
 800d8ba:	46c0      	nop			@ (mov r8, r8)
 800d8bc:	0800dac5 	.word	0x0800dac5
 800d8c0:	0800da81 	.word	0x0800da81
 800d8c4:	0800dae3 	.word	0x0800dae3

0800d8c8 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 800d8c8:	b580      	push	{r7, lr}
 800d8ca:	b086      	sub	sp, #24
 800d8cc:	af00      	add	r7, sp, #0
 800d8ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800d8d0:	2317      	movs	r3, #23
 800d8d2:	18fb      	adds	r3, r7, r3
 800d8d4:	2200      	movs	r2, #0
 800d8d6:	701a      	strb	r2, [r3, #0]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	685a      	ldr	r2, [r3, #4]
 800d8dc:	2380      	movs	r3, #128	@ 0x80
 800d8de:	009b      	lsls	r3, r3, #2
 800d8e0:	429a      	cmp	r2, r3
 800d8e2:	d003      	beq.n	800d8ec <HAL_I2S_DMAStop+0x24>
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	685b      	ldr	r3, [r3, #4]
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d158      	bne.n	800d99e <HAL_I2S_DMAStop+0xd6>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d010      	beq.n	800d916 <HAL_I2S_DMAStop+0x4e>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d8f8:	0018      	movs	r0, r3
 800d8fa:	f7fd f81d 	bl	800a938 <HAL_DMA_Abort>
 800d8fe:	1e03      	subs	r3, r0, #0
 800d900:	d009      	beq.n	800d916 <HAL_I2S_DMAStop+0x4e>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d906:	2208      	movs	r2, #8
 800d908:	431a      	orrs	r2, r3
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 800d90e:	2317      	movs	r3, #23
 800d910:	18fb      	adds	r3, r7, r3
 800d912:	2201      	movs	r2, #1
 800d914:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 800d916:	6878      	ldr	r0, [r7, #4]
 800d918:	2364      	movs	r3, #100	@ 0x64
 800d91a:	2201      	movs	r2, #1
 800d91c:	2102      	movs	r1, #2
 800d91e:	f000 f907 	bl	800db30 <I2S_WaitFlagStateUntilTimeout>
 800d922:	1e03      	subs	r3, r0, #0
 800d924:	d00d      	beq.n	800d942 <HAL_I2S_DMAStop+0x7a>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d92a:	2201      	movs	r2, #1
 800d92c:	431a      	orrs	r2, r3
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	2235      	movs	r2, #53	@ 0x35
 800d936:	2101      	movs	r1, #1
 800d938:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 800d93a:	2317      	movs	r3, #23
 800d93c:	18fb      	adds	r3, r7, r3
 800d93e:	2201      	movs	r2, #1
 800d940:	701a      	strb	r2, [r3, #0]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 800d942:	6878      	ldr	r0, [r7, #4]
 800d944:	2364      	movs	r3, #100	@ 0x64
 800d946:	2200      	movs	r2, #0
 800d948:	2180      	movs	r1, #128	@ 0x80
 800d94a:	f000 f8f1 	bl	800db30 <I2S_WaitFlagStateUntilTimeout>
 800d94e:	1e03      	subs	r3, r0, #0
 800d950:	d00d      	beq.n	800d96e <HAL_I2S_DMAStop+0xa6>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d956:	2201      	movs	r2, #1
 800d958:	431a      	orrs	r2, r3
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	2235      	movs	r2, #53	@ 0x35
 800d962:	2101      	movs	r1, #1
 800d964:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 800d966:	2317      	movs	r3, #23
 800d968:	18fb      	adds	r3, r7, r3
 800d96a:	2201      	movs	r2, #1
 800d96c:	701a      	strb	r2, [r3, #0]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	681b      	ldr	r3, [r3, #0]
 800d972:	69da      	ldr	r2, [r3, #28]
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	681b      	ldr	r3, [r3, #0]
 800d978:	4938      	ldr	r1, [pc, #224]	@ (800da5c <HAL_I2S_DMAStop+0x194>)
 800d97a:	400a      	ands	r2, r1
 800d97c:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800d97e:	2300      	movs	r3, #0
 800d980:	613b      	str	r3, [r7, #16]
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	681b      	ldr	r3, [r3, #0]
 800d986:	689b      	ldr	r3, [r3, #8]
 800d988:	613b      	str	r3, [r7, #16]
 800d98a:	693b      	ldr	r3, [r7, #16]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	685a      	ldr	r2, [r3, #4]
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	2102      	movs	r1, #2
 800d998:	438a      	bics	r2, r1
 800d99a:	605a      	str	r2, [r3, #4]
 800d99c:	e053      	b.n	800da46 <HAL_I2S_DMAStop+0x17e>

  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	685a      	ldr	r2, [r3, #4]
 800d9a2:	23c0      	movs	r3, #192	@ 0xc0
 800d9a4:	009b      	lsls	r3, r3, #2
 800d9a6:	429a      	cmp	r2, r3
 800d9a8:	d005      	beq.n	800d9b6 <HAL_I2S_DMAStop+0xee>
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	685a      	ldr	r2, [r3, #4]
 800d9ae:	2380      	movs	r3, #128	@ 0x80
 800d9b0:	005b      	lsls	r3, r3, #1
 800d9b2:	429a      	cmp	r2, r3
 800d9b4:	d147      	bne.n	800da46 <HAL_I2S_DMAStop+0x17e>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d010      	beq.n	800d9e0 <HAL_I2S_DMAStop+0x118>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d9c2:	0018      	movs	r0, r3
 800d9c4:	f7fc ffb8 	bl	800a938 <HAL_DMA_Abort>
 800d9c8:	1e03      	subs	r3, r0, #0
 800d9ca:	d009      	beq.n	800d9e0 <HAL_I2S_DMAStop+0x118>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d9d0:	2208      	movs	r2, #8
 800d9d2:	431a      	orrs	r2, r3
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 800d9d8:	2317      	movs	r3, #23
 800d9da:	18fb      	adds	r3, r7, r3
 800d9dc:	2201      	movs	r2, #1
 800d9de:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	69da      	ldr	r2, [r3, #28]
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	491c      	ldr	r1, [pc, #112]	@ (800da5c <HAL_I2S_DMAStop+0x194>)
 800d9ec:	400a      	ands	r2, r1
 800d9ee:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800d9f0:	2300      	movs	r3, #0
 800d9f2:	60fb      	str	r3, [r7, #12]
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	681b      	ldr	r3, [r3, #0]
 800d9f8:	68db      	ldr	r3, [r3, #12]
 800d9fa:	60fb      	str	r3, [r7, #12]
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	689b      	ldr	r3, [r3, #8]
 800da02:	60fb      	str	r3, [r7, #12]
 800da04:	68fb      	ldr	r3, [r7, #12]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	685a      	ldr	r2, [r3, #4]
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	2101      	movs	r1, #1
 800da12:	438a      	bics	r2, r1
 800da14:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	685a      	ldr	r2, [r3, #4]
 800da1a:	2380      	movs	r3, #128	@ 0x80
 800da1c:	005b      	lsls	r3, r3, #1
 800da1e:	429a      	cmp	r2, r3
 800da20:	d10e      	bne.n	800da40 <HAL_I2S_DMAStop+0x178>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800da26:	2240      	movs	r2, #64	@ 0x40
 800da28:	431a      	orrs	r2, r3
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	2235      	movs	r2, #53	@ 0x35
 800da32:	2101      	movs	r1, #1
 800da34:	5499      	strb	r1, [r3, r2]
      errorcode = HAL_ERROR;
 800da36:	2317      	movs	r3, #23
 800da38:	18fb      	adds	r3, r7, r3
 800da3a:	2201      	movs	r2, #1
 800da3c:	701a      	strb	r2, [r3, #0]
 800da3e:	e002      	b.n	800da46 <HAL_I2S_DMAStop+0x17e>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	2235      	movs	r2, #53	@ 0x35
 800da4a:	2101      	movs	r1, #1
 800da4c:	5499      	strb	r1, [r3, r2]

  return errorcode;
 800da4e:	2317      	movs	r3, #23
 800da50:	18fb      	adds	r3, r7, r3
 800da52:	781b      	ldrb	r3, [r3, #0]
}
 800da54:	0018      	movs	r0, r3
 800da56:	46bd      	mov	sp, r7
 800da58:	b006      	add	sp, #24
 800da5a:	bd80      	pop	{r7, pc}
 800da5c:	fffffbff 	.word	0xfffffbff

0800da60 <HAL_I2S_RxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800da60:	b580      	push	{r7, lr}
 800da62:	b082      	sub	sp, #8
 800da64:	af00      	add	r7, sp, #0
 800da66:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxHalfCpltCallback could be implemented in the user file
   */
}
 800da68:	46c0      	nop			@ (mov r8, r8)
 800da6a:	46bd      	mov	sp, r7
 800da6c:	b002      	add	sp, #8
 800da6e:	bd80      	pop	{r7, pc}

0800da70 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800da70:	b580      	push	{r7, lr}
 800da72:	b082      	sub	sp, #8
 800da74:	af00      	add	r7, sp, #0
 800da76:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800da78:	46c0      	nop			@ (mov r8, r8)
 800da7a:	46bd      	mov	sp, r7
 800da7c:	b002      	add	sp, #8
 800da7e:	bd80      	pop	{r7, pc}

0800da80 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 800da80:	b580      	push	{r7, lr}
 800da82:	b084      	sub	sp, #16
 800da84:	af00      	add	r7, sp, #0
 800da86:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800da8c:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	69db      	ldr	r3, [r3, #28]
 800da92:	2b00      	cmp	r3, #0
 800da94:	d10e      	bne.n	800dab4 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	681b      	ldr	r3, [r3, #0]
 800da9a:	685a      	ldr	r2, [r3, #4]
 800da9c:	68fb      	ldr	r3, [r7, #12]
 800da9e:	681b      	ldr	r3, [r3, #0]
 800daa0:	2101      	movs	r1, #1
 800daa2:	438a      	bics	r2, r1
 800daa4:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	2200      	movs	r2, #0
 800daaa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 800daac:	68fb      	ldr	r3, [r7, #12]
 800daae:	2235      	movs	r2, #53	@ 0x35
 800dab0:	2101      	movs	r1, #1
 800dab2:	5499      	strb	r1, [r3, r2]
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 800dab4:	68fb      	ldr	r3, [r7, #12]
 800dab6:	0018      	movs	r0, r3
 800dab8:	f7f9 fb40 	bl	800713c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800dabc:	46c0      	nop			@ (mov r8, r8)
 800dabe:	46bd      	mov	sp, r7
 800dac0:	b004      	add	sp, #16
 800dac2:	bd80      	pop	{r7, pc}

0800dac4 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800dac4:	b580      	push	{r7, lr}
 800dac6:	b084      	sub	sp, #16
 800dac8:	af00      	add	r7, sp, #0
 800daca:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dad0:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 800dad2:	68fb      	ldr	r3, [r7, #12]
 800dad4:	0018      	movs	r0, r3
 800dad6:	f7ff ffc3 	bl	800da60 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800dada:	46c0      	nop			@ (mov r8, r8)
 800dadc:	46bd      	mov	sp, r7
 800dade:	b004      	add	sp, #16
 800dae0:	bd80      	pop	{r7, pc}

0800dae2 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 800dae2:	b580      	push	{r7, lr}
 800dae4:	b084      	sub	sp, #16
 800dae6:	af00      	add	r7, sp, #0
 800dae8:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800daee:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 800daf0:	68fb      	ldr	r3, [r7, #12]
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	685a      	ldr	r2, [r3, #4]
 800daf6:	68fb      	ldr	r3, [r7, #12]
 800daf8:	681b      	ldr	r3, [r3, #0]
 800dafa:	2103      	movs	r1, #3
 800dafc:	438a      	bics	r2, r1
 800dafe:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 800db00:	68fb      	ldr	r3, [r7, #12]
 800db02:	2200      	movs	r2, #0
 800db04:	845a      	strh	r2, [r3, #34]	@ 0x22
  hi2s->RxXferCount = 0U;
 800db06:	68fb      	ldr	r3, [r7, #12]
 800db08:	2200      	movs	r2, #0
 800db0a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  hi2s->State = HAL_I2S_STATE_READY;
 800db0c:	68fb      	ldr	r3, [r7, #12]
 800db0e:	2235      	movs	r2, #53	@ 0x35
 800db10:	2101      	movs	r1, #1
 800db12:	5499      	strb	r1, [r3, r2]

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800db14:	68fb      	ldr	r3, [r7, #12]
 800db16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800db18:	2208      	movs	r2, #8
 800db1a:	431a      	orrs	r2, r3
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 800db20:	68fb      	ldr	r3, [r7, #12]
 800db22:	0018      	movs	r0, r3
 800db24:	f7ff ffa4 	bl	800da70 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800db28:	46c0      	nop			@ (mov r8, r8)
 800db2a:	46bd      	mov	sp, r7
 800db2c:	b004      	add	sp, #16
 800db2e:	bd80      	pop	{r7, pc}

0800db30 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 800db30:	b580      	push	{r7, lr}
 800db32:	b086      	sub	sp, #24
 800db34:	af00      	add	r7, sp, #0
 800db36:	60f8      	str	r0, [r7, #12]
 800db38:	60b9      	str	r1, [r7, #8]
 800db3a:	603b      	str	r3, [r7, #0]
 800db3c:	1dfb      	adds	r3, r7, #7
 800db3e:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 800db40:	f7fc f916 	bl	8009d70 <HAL_GetTick>
 800db44:	0003      	movs	r3, r0
 800db46:	617b      	str	r3, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 800db48:	e017      	b.n	800db7a <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 800db4a:	683b      	ldr	r3, [r7, #0]
 800db4c:	3301      	adds	r3, #1
 800db4e:	d014      	beq.n	800db7a <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 800db50:	f7fc f90e 	bl	8009d70 <HAL_GetTick>
 800db54:	0002      	movs	r2, r0
 800db56:	697b      	ldr	r3, [r7, #20]
 800db58:	1ad3      	subs	r3, r2, r3
 800db5a:	683a      	ldr	r2, [r7, #0]
 800db5c:	429a      	cmp	r2, r3
 800db5e:	d902      	bls.n	800db66 <I2S_WaitFlagStateUntilTimeout+0x36>
 800db60:	683b      	ldr	r3, [r7, #0]
 800db62:	2b00      	cmp	r3, #0
 800db64:	d109      	bne.n	800db7a <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 800db66:	68fb      	ldr	r3, [r7, #12]
 800db68:	2235      	movs	r2, #53	@ 0x35
 800db6a:	2101      	movs	r1, #1
 800db6c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 800db6e:	68fb      	ldr	r3, [r7, #12]
 800db70:	2234      	movs	r2, #52	@ 0x34
 800db72:	2100      	movs	r1, #0
 800db74:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800db76:	2303      	movs	r3, #3
 800db78:	e00f      	b.n	800db9a <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 800db7a:	68fb      	ldr	r3, [r7, #12]
 800db7c:	681b      	ldr	r3, [r3, #0]
 800db7e:	689b      	ldr	r3, [r3, #8]
 800db80:	68ba      	ldr	r2, [r7, #8]
 800db82:	4013      	ands	r3, r2
 800db84:	68ba      	ldr	r2, [r7, #8]
 800db86:	1ad3      	subs	r3, r2, r3
 800db88:	425a      	negs	r2, r3
 800db8a:	4153      	adcs	r3, r2
 800db8c:	b2db      	uxtb	r3, r3
 800db8e:	001a      	movs	r2, r3
 800db90:	1dfb      	adds	r3, r7, #7
 800db92:	781b      	ldrb	r3, [r3, #0]
 800db94:	429a      	cmp	r2, r3
 800db96:	d1d8      	bne.n	800db4a <I2S_WaitFlagStateUntilTimeout+0x1a>
      }
    }
  }
  return HAL_OK;
 800db98:	2300      	movs	r3, #0
}
 800db9a:	0018      	movs	r0, r3
 800db9c:	46bd      	mov	sp, r7
 800db9e:	b006      	add	sp, #24
 800dba0:	bd80      	pop	{r7, pc}
	...

0800dba4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800dba4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dba6:	b08b      	sub	sp, #44	@ 0x2c
 800dba8:	af06      	add	r7, sp, #24
 800dbaa:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	d101      	bne.n	800dbb6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800dbb2:	2301      	movs	r3, #1
 800dbb4:	e0f0      	b.n	800dd98 <HAL_PCD_Init+0x1f4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	4a79      	ldr	r2, [pc, #484]	@ (800dda0 <HAL_PCD_Init+0x1fc>)
 800dbba:	5c9b      	ldrb	r3, [r3, r2]
 800dbbc:	b2db      	uxtb	r3, r3
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d108      	bne.n	800dbd4 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800dbc2:	687a      	ldr	r2, [r7, #4]
 800dbc4:	23aa      	movs	r3, #170	@ 0xaa
 800dbc6:	009b      	lsls	r3, r3, #2
 800dbc8:	2100      	movs	r1, #0
 800dbca:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	0018      	movs	r0, r3
 800dbd0:	f009 f80c 	bl	8016bec <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	4a72      	ldr	r2, [pc, #456]	@ (800dda0 <HAL_PCD_Init+0x1fc>)
 800dbd8:	2103      	movs	r1, #3
 800dbda:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	0018      	movs	r0, r3
 800dbe2:	f004 ffbf 	bl	8012b64 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800dbe6:	230f      	movs	r3, #15
 800dbe8:	18fb      	adds	r3, r7, r3
 800dbea:	2200      	movs	r2, #0
 800dbec:	701a      	strb	r2, [r3, #0]
 800dbee:	e049      	b.n	800dc84 <HAL_PCD_Init+0xe0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800dbf0:	200f      	movs	r0, #15
 800dbf2:	183b      	adds	r3, r7, r0
 800dbf4:	781b      	ldrb	r3, [r3, #0]
 800dbf6:	6879      	ldr	r1, [r7, #4]
 800dbf8:	1c5a      	adds	r2, r3, #1
 800dbfa:	0013      	movs	r3, r2
 800dbfc:	009b      	lsls	r3, r3, #2
 800dbfe:	189b      	adds	r3, r3, r2
 800dc00:	00db      	lsls	r3, r3, #3
 800dc02:	18cb      	adds	r3, r1, r3
 800dc04:	3301      	adds	r3, #1
 800dc06:	2201      	movs	r2, #1
 800dc08:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800dc0a:	183b      	adds	r3, r7, r0
 800dc0c:	781b      	ldrb	r3, [r3, #0]
 800dc0e:	6879      	ldr	r1, [r7, #4]
 800dc10:	1c5a      	adds	r2, r3, #1
 800dc12:	0013      	movs	r3, r2
 800dc14:	009b      	lsls	r3, r3, #2
 800dc16:	189b      	adds	r3, r3, r2
 800dc18:	00db      	lsls	r3, r3, #3
 800dc1a:	183a      	adds	r2, r7, r0
 800dc1c:	7812      	ldrb	r2, [r2, #0]
 800dc1e:	545a      	strb	r2, [r3, r1]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800dc20:	183b      	adds	r3, r7, r0
 800dc22:	781b      	ldrb	r3, [r3, #0]
 800dc24:	6879      	ldr	r1, [r7, #4]
 800dc26:	1c5a      	adds	r2, r3, #1
 800dc28:	0013      	movs	r3, r2
 800dc2a:	009b      	lsls	r3, r3, #2
 800dc2c:	189b      	adds	r3, r3, r2
 800dc2e:	00db      	lsls	r3, r3, #3
 800dc30:	18cb      	adds	r3, r1, r3
 800dc32:	3303      	adds	r3, #3
 800dc34:	2200      	movs	r2, #0
 800dc36:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800dc38:	183b      	adds	r3, r7, r0
 800dc3a:	781a      	ldrb	r2, [r3, #0]
 800dc3c:	6879      	ldr	r1, [r7, #4]
 800dc3e:	0013      	movs	r3, r2
 800dc40:	009b      	lsls	r3, r3, #2
 800dc42:	189b      	adds	r3, r3, r2
 800dc44:	00db      	lsls	r3, r3, #3
 800dc46:	18cb      	adds	r3, r1, r3
 800dc48:	3338      	adds	r3, #56	@ 0x38
 800dc4a:	2200      	movs	r2, #0
 800dc4c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800dc4e:	183b      	adds	r3, r7, r0
 800dc50:	781a      	ldrb	r2, [r3, #0]
 800dc52:	6879      	ldr	r1, [r7, #4]
 800dc54:	0013      	movs	r3, r2
 800dc56:	009b      	lsls	r3, r3, #2
 800dc58:	189b      	adds	r3, r3, r2
 800dc5a:	00db      	lsls	r3, r3, #3
 800dc5c:	18cb      	adds	r3, r1, r3
 800dc5e:	333c      	adds	r3, #60	@ 0x3c
 800dc60:	2200      	movs	r2, #0
 800dc62:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800dc64:	183b      	adds	r3, r7, r0
 800dc66:	781a      	ldrb	r2, [r3, #0]
 800dc68:	6879      	ldr	r1, [r7, #4]
 800dc6a:	0013      	movs	r3, r2
 800dc6c:	009b      	lsls	r3, r3, #2
 800dc6e:	189b      	adds	r3, r3, r2
 800dc70:	00db      	lsls	r3, r3, #3
 800dc72:	18cb      	adds	r3, r1, r3
 800dc74:	3340      	adds	r3, #64	@ 0x40
 800dc76:	2200      	movs	r2, #0
 800dc78:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800dc7a:	183b      	adds	r3, r7, r0
 800dc7c:	781a      	ldrb	r2, [r3, #0]
 800dc7e:	183b      	adds	r3, r7, r0
 800dc80:	3201      	adds	r2, #1
 800dc82:	701a      	strb	r2, [r3, #0]
 800dc84:	210f      	movs	r1, #15
 800dc86:	187b      	adds	r3, r7, r1
 800dc88:	781a      	ldrb	r2, [r3, #0]
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	685b      	ldr	r3, [r3, #4]
 800dc8e:	429a      	cmp	r2, r3
 800dc90:	d3ae      	bcc.n	800dbf0 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800dc92:	187b      	adds	r3, r7, r1
 800dc94:	2200      	movs	r2, #0
 800dc96:	701a      	strb	r2, [r3, #0]
 800dc98:	e056      	b.n	800dd48 <HAL_PCD_Init+0x1a4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800dc9a:	240f      	movs	r4, #15
 800dc9c:	193b      	adds	r3, r7, r4
 800dc9e:	781a      	ldrb	r2, [r3, #0]
 800dca0:	6878      	ldr	r0, [r7, #4]
 800dca2:	236a      	movs	r3, #106	@ 0x6a
 800dca4:	33ff      	adds	r3, #255	@ 0xff
 800dca6:	0019      	movs	r1, r3
 800dca8:	0013      	movs	r3, r2
 800dcaa:	009b      	lsls	r3, r3, #2
 800dcac:	189b      	adds	r3, r3, r2
 800dcae:	00db      	lsls	r3, r3, #3
 800dcb0:	18c3      	adds	r3, r0, r3
 800dcb2:	185b      	adds	r3, r3, r1
 800dcb4:	2200      	movs	r2, #0
 800dcb6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800dcb8:	193b      	adds	r3, r7, r4
 800dcba:	781a      	ldrb	r2, [r3, #0]
 800dcbc:	6878      	ldr	r0, [r7, #4]
 800dcbe:	23b4      	movs	r3, #180	@ 0xb4
 800dcc0:	0059      	lsls	r1, r3, #1
 800dcc2:	0013      	movs	r3, r2
 800dcc4:	009b      	lsls	r3, r3, #2
 800dcc6:	189b      	adds	r3, r3, r2
 800dcc8:	00db      	lsls	r3, r3, #3
 800dcca:	18c3      	adds	r3, r0, r3
 800dccc:	185b      	adds	r3, r3, r1
 800dcce:	193a      	adds	r2, r7, r4
 800dcd0:	7812      	ldrb	r2, [r2, #0]
 800dcd2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800dcd4:	193b      	adds	r3, r7, r4
 800dcd6:	781a      	ldrb	r2, [r3, #0]
 800dcd8:	6878      	ldr	r0, [r7, #4]
 800dcda:	236c      	movs	r3, #108	@ 0x6c
 800dcdc:	33ff      	adds	r3, #255	@ 0xff
 800dcde:	0019      	movs	r1, r3
 800dce0:	0013      	movs	r3, r2
 800dce2:	009b      	lsls	r3, r3, #2
 800dce4:	189b      	adds	r3, r3, r2
 800dce6:	00db      	lsls	r3, r3, #3
 800dce8:	18c3      	adds	r3, r0, r3
 800dcea:	185b      	adds	r3, r3, r1
 800dcec:	2200      	movs	r2, #0
 800dcee:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800dcf0:	193b      	adds	r3, r7, r4
 800dcf2:	781a      	ldrb	r2, [r3, #0]
 800dcf4:	6878      	ldr	r0, [r7, #4]
 800dcf6:	23bc      	movs	r3, #188	@ 0xbc
 800dcf8:	0059      	lsls	r1, r3, #1
 800dcfa:	0013      	movs	r3, r2
 800dcfc:	009b      	lsls	r3, r3, #2
 800dcfe:	189b      	adds	r3, r3, r2
 800dd00:	00db      	lsls	r3, r3, #3
 800dd02:	18c3      	adds	r3, r0, r3
 800dd04:	185b      	adds	r3, r3, r1
 800dd06:	2200      	movs	r2, #0
 800dd08:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800dd0a:	193b      	adds	r3, r7, r4
 800dd0c:	781a      	ldrb	r2, [r3, #0]
 800dd0e:	6878      	ldr	r0, [r7, #4]
 800dd10:	23be      	movs	r3, #190	@ 0xbe
 800dd12:	0059      	lsls	r1, r3, #1
 800dd14:	0013      	movs	r3, r2
 800dd16:	009b      	lsls	r3, r3, #2
 800dd18:	189b      	adds	r3, r3, r2
 800dd1a:	00db      	lsls	r3, r3, #3
 800dd1c:	18c3      	adds	r3, r0, r3
 800dd1e:	185b      	adds	r3, r3, r1
 800dd20:	2200      	movs	r2, #0
 800dd22:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800dd24:	193b      	adds	r3, r7, r4
 800dd26:	781a      	ldrb	r2, [r3, #0]
 800dd28:	6878      	ldr	r0, [r7, #4]
 800dd2a:	23c0      	movs	r3, #192	@ 0xc0
 800dd2c:	0059      	lsls	r1, r3, #1
 800dd2e:	0013      	movs	r3, r2
 800dd30:	009b      	lsls	r3, r3, #2
 800dd32:	189b      	adds	r3, r3, r2
 800dd34:	00db      	lsls	r3, r3, #3
 800dd36:	18c3      	adds	r3, r0, r3
 800dd38:	185b      	adds	r3, r3, r1
 800dd3a:	2200      	movs	r2, #0
 800dd3c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800dd3e:	193b      	adds	r3, r7, r4
 800dd40:	781a      	ldrb	r2, [r3, #0]
 800dd42:	193b      	adds	r3, r7, r4
 800dd44:	3201      	adds	r2, #1
 800dd46:	701a      	strb	r2, [r3, #0]
 800dd48:	230f      	movs	r3, #15
 800dd4a:	18fb      	adds	r3, r7, r3
 800dd4c:	781a      	ldrb	r2, [r3, #0]
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	685b      	ldr	r3, [r3, #4]
 800dd52:	429a      	cmp	r2, r3
 800dd54:	d3a1      	bcc.n	800dc9a <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	6818      	ldr	r0, [r3, #0]
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	466a      	mov	r2, sp
 800dd5e:	0011      	movs	r1, r2
 800dd60:	001a      	movs	r2, r3
 800dd62:	3210      	adds	r2, #16
 800dd64:	ca70      	ldmia	r2!, {r4, r5, r6}
 800dd66:	c170      	stmia	r1!, {r4, r5, r6}
 800dd68:	ca30      	ldmia	r2!, {r4, r5}
 800dd6a:	c130      	stmia	r1!, {r4, r5}
 800dd6c:	6859      	ldr	r1, [r3, #4]
 800dd6e:	689a      	ldr	r2, [r3, #8]
 800dd70:	68db      	ldr	r3, [r3, #12]
 800dd72:	f004 ff11 	bl	8012b98 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	2224      	movs	r2, #36	@ 0x24
 800dd7a:	2100      	movs	r1, #0
 800dd7c:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	4a07      	ldr	r2, [pc, #28]	@ (800dda0 <HAL_PCD_Init+0x1fc>)
 800dd82:	2101      	movs	r1, #1
 800dd84:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	69db      	ldr	r3, [r3, #28]
 800dd8a:	2b01      	cmp	r3, #1
 800dd8c:	d103      	bne.n	800dd96 <HAL_PCD_Init+0x1f2>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	0018      	movs	r0, r3
 800dd92:	f001 fd23 	bl	800f7dc <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800dd96:	2300      	movs	r3, #0
}
 800dd98:	0018      	movs	r0, r3
 800dd9a:	46bd      	mov	sp, r7
 800dd9c:	b005      	add	sp, #20
 800dd9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dda0:	000002a9 	.word	0x000002a9

0800dda4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800dda4:	b580      	push	{r7, lr}
 800dda6:	b082      	sub	sp, #8
 800dda8:	af00      	add	r7, sp, #0
 800ddaa:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800ddac:	687a      	ldr	r2, [r7, #4]
 800ddae:	23aa      	movs	r3, #170	@ 0xaa
 800ddb0:	009b      	lsls	r3, r3, #2
 800ddb2:	5cd3      	ldrb	r3, [r2, r3]
 800ddb4:	2b01      	cmp	r3, #1
 800ddb6:	d101      	bne.n	800ddbc <HAL_PCD_Start+0x18>
 800ddb8:	2302      	movs	r3, #2
 800ddba:	e014      	b.n	800dde6 <HAL_PCD_Start+0x42>
 800ddbc:	687a      	ldr	r2, [r7, #4]
 800ddbe:	23aa      	movs	r3, #170	@ 0xaa
 800ddc0:	009b      	lsls	r3, r3, #2
 800ddc2:	2101      	movs	r1, #1
 800ddc4:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	681b      	ldr	r3, [r3, #0]
 800ddca:	0018      	movs	r0, r3
 800ddcc:	f004 feb4 	bl	8012b38 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	0018      	movs	r0, r3
 800ddd6:	f006 feb7 	bl	8014b48 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800ddda:	687a      	ldr	r2, [r7, #4]
 800dddc:	23aa      	movs	r3, #170	@ 0xaa
 800ddde:	009b      	lsls	r3, r3, #2
 800dde0:	2100      	movs	r1, #0
 800dde2:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800dde4:	2300      	movs	r3, #0
}
 800dde6:	0018      	movs	r0, r3
 800dde8:	46bd      	mov	sp, r7
 800ddea:	b002      	add	sp, #8
 800ddec:	bd80      	pop	{r7, pc}
	...

0800ddf0 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800ddf0:	b580      	push	{r7, lr}
 800ddf2:	b084      	sub	sp, #16
 800ddf4:	af00      	add	r7, sp, #0
 800ddf6:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	0018      	movs	r0, r3
 800ddfe:	f006 feb9 	bl	8014b74 <USB_ReadInterrupts>
 800de02:	0003      	movs	r3, r0
 800de04:	60fb      	str	r3, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800de06:	68fa      	ldr	r2, [r7, #12]
 800de08:	2380      	movs	r3, #128	@ 0x80
 800de0a:	021b      	lsls	r3, r3, #8
 800de0c:	4013      	ands	r3, r2
 800de0e:	d004      	beq.n	800de1a <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	0018      	movs	r0, r3
 800de14:	f000 fb62 	bl	800e4dc <PCD_EP_ISR_Handler>

    return;
 800de18:	e11d      	b.n	800e056 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800de1a:	68fa      	ldr	r2, [r7, #12]
 800de1c:	2380      	movs	r3, #128	@ 0x80
 800de1e:	00db      	lsls	r3, r3, #3
 800de20:	4013      	ands	r3, r2
 800de22:	d015      	beq.n	800de50 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	681b      	ldr	r3, [r3, #0]
 800de28:	2244      	movs	r2, #68	@ 0x44
 800de2a:	5a9b      	ldrh	r3, [r3, r2]
 800de2c:	b29a      	uxth	r2, r3
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	681b      	ldr	r3, [r3, #0]
 800de32:	498a      	ldr	r1, [pc, #552]	@ (800e05c <HAL_PCD_IRQHandler+0x26c>)
 800de34:	400a      	ands	r2, r1
 800de36:	b291      	uxth	r1, r2
 800de38:	2244      	movs	r2, #68	@ 0x44
 800de3a:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	0018      	movs	r0, r3
 800de40:	f008 ff57 	bl	8016cf2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	2100      	movs	r1, #0
 800de48:	0018      	movs	r0, r3
 800de4a:	f000 f915 	bl	800e078 <HAL_PCD_SetAddress>

    return;
 800de4e:	e102      	b.n	800e056 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800de50:	68fa      	ldr	r2, [r7, #12]
 800de52:	2380      	movs	r3, #128	@ 0x80
 800de54:	01db      	lsls	r3, r3, #7
 800de56:	4013      	ands	r3, r2
 800de58:	d00c      	beq.n	800de74 <HAL_PCD_IRQHandler+0x84>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	681b      	ldr	r3, [r3, #0]
 800de5e:	2244      	movs	r2, #68	@ 0x44
 800de60:	5a9b      	ldrh	r3, [r3, r2]
 800de62:	b29a      	uxth	r2, r3
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	497d      	ldr	r1, [pc, #500]	@ (800e060 <HAL_PCD_IRQHandler+0x270>)
 800de6a:	400a      	ands	r2, r1
 800de6c:	b291      	uxth	r1, r2
 800de6e:	2244      	movs	r2, #68	@ 0x44
 800de70:	5299      	strh	r1, [r3, r2]

    return;
 800de72:	e0f0      	b.n	800e056 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800de74:	68fa      	ldr	r2, [r7, #12]
 800de76:	2380      	movs	r3, #128	@ 0x80
 800de78:	019b      	lsls	r3, r3, #6
 800de7a:	4013      	ands	r3, r2
 800de7c:	d00c      	beq.n	800de98 <HAL_PCD_IRQHandler+0xa8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	681b      	ldr	r3, [r3, #0]
 800de82:	2244      	movs	r2, #68	@ 0x44
 800de84:	5a9b      	ldrh	r3, [r3, r2]
 800de86:	b29a      	uxth	r2, r3
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	681b      	ldr	r3, [r3, #0]
 800de8c:	4975      	ldr	r1, [pc, #468]	@ (800e064 <HAL_PCD_IRQHandler+0x274>)
 800de8e:	400a      	ands	r2, r1
 800de90:	b291      	uxth	r1, r2
 800de92:	2244      	movs	r2, #68	@ 0x44
 800de94:	5299      	strh	r1, [r3, r2]

    return;
 800de96:	e0de      	b.n	800e056 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800de98:	68fa      	ldr	r2, [r7, #12]
 800de9a:	2380      	movs	r3, #128	@ 0x80
 800de9c:	015b      	lsls	r3, r3, #5
 800de9e:	4013      	ands	r3, r2
 800dea0:	d038      	beq.n	800df14 <HAL_PCD_IRQHandler+0x124>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	2240      	movs	r2, #64	@ 0x40
 800dea8:	5a9b      	ldrh	r3, [r3, r2]
 800deaa:	b29a      	uxth	r2, r3
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	681b      	ldr	r3, [r3, #0]
 800deb0:	2104      	movs	r1, #4
 800deb2:	438a      	bics	r2, r1
 800deb4:	b291      	uxth	r1, r2
 800deb6:	2240      	movs	r2, #64	@ 0x40
 800deb8:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	681b      	ldr	r3, [r3, #0]
 800debe:	2240      	movs	r2, #64	@ 0x40
 800dec0:	5a9b      	ldrh	r3, [r3, r2]
 800dec2:	b29a      	uxth	r2, r3
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	2108      	movs	r1, #8
 800deca:	438a      	bics	r2, r1
 800decc:	b291      	uxth	r1, r2
 800dece:	2240      	movs	r2, #64	@ 0x40
 800ded0:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 800ded2:	687a      	ldr	r2, [r7, #4]
 800ded4:	23b8      	movs	r3, #184	@ 0xb8
 800ded6:	009b      	lsls	r3, r3, #2
 800ded8:	5cd3      	ldrb	r3, [r2, r3]
 800deda:	2b01      	cmp	r3, #1
 800dedc:	d109      	bne.n	800def2 <HAL_PCD_IRQHandler+0x102>
    {
      hpcd->LPM_State = LPM_L0;
 800dede:	687a      	ldr	r2, [r7, #4]
 800dee0:	23b8      	movs	r3, #184	@ 0xb8
 800dee2:	009b      	lsls	r3, r3, #2
 800dee4:	2100      	movs	r1, #0
 800dee6:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	2100      	movs	r1, #0
 800deec:	0018      	movs	r0, r3
 800deee:	f001 fc9f 	bl	800f830 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	0018      	movs	r0, r3
 800def6:	f008 ff3d 	bl	8016d74 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	681b      	ldr	r3, [r3, #0]
 800defe:	2244      	movs	r2, #68	@ 0x44
 800df00:	5a9b      	ldrh	r3, [r3, r2]
 800df02:	b29a      	uxth	r2, r3
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	681b      	ldr	r3, [r3, #0]
 800df08:	4957      	ldr	r1, [pc, #348]	@ (800e068 <HAL_PCD_IRQHandler+0x278>)
 800df0a:	400a      	ands	r2, r1
 800df0c:	b291      	uxth	r1, r2
 800df0e:	2244      	movs	r2, #68	@ 0x44
 800df10:	5299      	strh	r1, [r3, r2]

    return;
 800df12:	e0a0      	b.n	800e056 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800df14:	68fa      	ldr	r2, [r7, #12]
 800df16:	2380      	movs	r3, #128	@ 0x80
 800df18:	011b      	lsls	r3, r3, #4
 800df1a:	4013      	ands	r3, r2
 800df1c:	d028      	beq.n	800df70 <HAL_PCD_IRQHandler+0x180>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	681b      	ldr	r3, [r3, #0]
 800df22:	2240      	movs	r2, #64	@ 0x40
 800df24:	5a9b      	ldrh	r3, [r3, r2]
 800df26:	b29a      	uxth	r2, r3
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	2108      	movs	r1, #8
 800df2e:	430a      	orrs	r2, r1
 800df30:	b291      	uxth	r1, r2
 800df32:	2240      	movs	r2, #64	@ 0x40
 800df34:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	681b      	ldr	r3, [r3, #0]
 800df3a:	2244      	movs	r2, #68	@ 0x44
 800df3c:	5a9b      	ldrh	r3, [r3, r2]
 800df3e:	b29a      	uxth	r2, r3
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	4949      	ldr	r1, [pc, #292]	@ (800e06c <HAL_PCD_IRQHandler+0x27c>)
 800df46:	400a      	ands	r2, r1
 800df48:	b291      	uxth	r1, r2
 800df4a:	2244      	movs	r2, #68	@ 0x44
 800df4c:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	681b      	ldr	r3, [r3, #0]
 800df52:	2240      	movs	r2, #64	@ 0x40
 800df54:	5a9b      	ldrh	r3, [r3, r2]
 800df56:	b29a      	uxth	r2, r3
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	2104      	movs	r1, #4
 800df5e:	430a      	orrs	r2, r1
 800df60:	b291      	uxth	r1, r2
 800df62:	2240      	movs	r2, #64	@ 0x40
 800df64:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	0018      	movs	r0, r3
 800df6a:	f008 fee7 	bl	8016d3c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800df6e:	e072      	b.n	800e056 <HAL_PCD_IRQHandler+0x266>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 800df70:	68fb      	ldr	r3, [r7, #12]
 800df72:	2280      	movs	r2, #128	@ 0x80
 800df74:	4013      	ands	r3, r2
 800df76:	d046      	beq.n	800e006 <HAL_PCD_IRQHandler+0x216>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	681b      	ldr	r3, [r3, #0]
 800df7c:	2244      	movs	r2, #68	@ 0x44
 800df7e:	5a9b      	ldrh	r3, [r3, r2]
 800df80:	b29a      	uxth	r2, r3
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	681b      	ldr	r3, [r3, #0]
 800df86:	2180      	movs	r1, #128	@ 0x80
 800df88:	438a      	bics	r2, r1
 800df8a:	b291      	uxth	r1, r2
 800df8c:	2244      	movs	r2, #68	@ 0x44
 800df8e:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 800df90:	687a      	ldr	r2, [r7, #4]
 800df92:	23b8      	movs	r3, #184	@ 0xb8
 800df94:	009b      	lsls	r3, r3, #2
 800df96:	5cd3      	ldrb	r3, [r2, r3]
 800df98:	2b00      	cmp	r3, #0
 800df9a:	d12f      	bne.n	800dffc <HAL_PCD_IRQHandler+0x20c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	681b      	ldr	r3, [r3, #0]
 800dfa0:	2240      	movs	r2, #64	@ 0x40
 800dfa2:	5a9b      	ldrh	r3, [r3, r2]
 800dfa4:	b29a      	uxth	r2, r3
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	681b      	ldr	r3, [r3, #0]
 800dfaa:	2104      	movs	r1, #4
 800dfac:	430a      	orrs	r2, r1
 800dfae:	b291      	uxth	r1, r2
 800dfb0:	2240      	movs	r2, #64	@ 0x40
 800dfb2:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	2240      	movs	r2, #64	@ 0x40
 800dfba:	5a9b      	ldrh	r3, [r3, r2]
 800dfbc:	b29a      	uxth	r2, r3
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	681b      	ldr	r3, [r3, #0]
 800dfc2:	2108      	movs	r1, #8
 800dfc4:	430a      	orrs	r2, r1
 800dfc6:	b291      	uxth	r1, r2
 800dfc8:	2240      	movs	r2, #64	@ 0x40
 800dfca:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 800dfcc:	687a      	ldr	r2, [r7, #4]
 800dfce:	23b8      	movs	r3, #184	@ 0xb8
 800dfd0:	009b      	lsls	r3, r3, #2
 800dfd2:	2101      	movs	r1, #1
 800dfd4:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	681b      	ldr	r3, [r3, #0]
 800dfda:	2254      	movs	r2, #84	@ 0x54
 800dfdc:	5a9b      	ldrh	r3, [r3, r2]
 800dfde:	b29b      	uxth	r3, r3
 800dfe0:	089b      	lsrs	r3, r3, #2
 800dfe2:	223c      	movs	r2, #60	@ 0x3c
 800dfe4:	4013      	ands	r3, r2
 800dfe6:	0019      	movs	r1, r3
 800dfe8:	687a      	ldr	r2, [r7, #4]
 800dfea:	23b9      	movs	r3, #185	@ 0xb9
 800dfec:	009b      	lsls	r3, r3, #2
 800dfee:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	2101      	movs	r1, #1
 800dff4:	0018      	movs	r0, r3
 800dff6:	f001 fc1b 	bl	800f830 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800dffa:	e02c      	b.n	800e056 <HAL_PCD_IRQHandler+0x266>
      HAL_PCD_SuspendCallback(hpcd);
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	0018      	movs	r0, r3
 800e000:	f008 fe9c 	bl	8016d3c <HAL_PCD_SuspendCallback>
    return;
 800e004:	e027      	b.n	800e056 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800e006:	68fa      	ldr	r2, [r7, #12]
 800e008:	2380      	movs	r3, #128	@ 0x80
 800e00a:	009b      	lsls	r3, r3, #2
 800e00c:	4013      	ands	r3, r2
 800e00e:	d010      	beq.n	800e032 <HAL_PCD_IRQHandler+0x242>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	2244      	movs	r2, #68	@ 0x44
 800e016:	5a9b      	ldrh	r3, [r3, r2]
 800e018:	b29a      	uxth	r2, r3
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	681b      	ldr	r3, [r3, #0]
 800e01e:	4914      	ldr	r1, [pc, #80]	@ (800e070 <HAL_PCD_IRQHandler+0x280>)
 800e020:	400a      	ands	r2, r1
 800e022:	b291      	uxth	r1, r2
 800e024:	2244      	movs	r2, #68	@ 0x44
 800e026:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	0018      	movs	r0, r3
 800e02c:	f008 fe52 	bl	8016cd4 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800e030:	e011      	b.n	800e056 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800e032:	68fa      	ldr	r2, [r7, #12]
 800e034:	2380      	movs	r3, #128	@ 0x80
 800e036:	005b      	lsls	r3, r3, #1
 800e038:	4013      	ands	r3, r2
 800e03a:	d00c      	beq.n	800e056 <HAL_PCD_IRQHandler+0x266>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	2244      	movs	r2, #68	@ 0x44
 800e042:	5a9b      	ldrh	r3, [r3, r2]
 800e044:	b29a      	uxth	r2, r3
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	681b      	ldr	r3, [r3, #0]
 800e04a:	490a      	ldr	r1, [pc, #40]	@ (800e074 <HAL_PCD_IRQHandler+0x284>)
 800e04c:	400a      	ands	r2, r1
 800e04e:	b291      	uxth	r1, r2
 800e050:	2244      	movs	r2, #68	@ 0x44
 800e052:	5299      	strh	r1, [r3, r2]

    return;
 800e054:	46c0      	nop			@ (mov r8, r8)
  }
}
 800e056:	46bd      	mov	sp, r7
 800e058:	b004      	add	sp, #16
 800e05a:	bd80      	pop	{r7, pc}
 800e05c:	fffffbff 	.word	0xfffffbff
 800e060:	ffffbfff 	.word	0xffffbfff
 800e064:	ffffdfff 	.word	0xffffdfff
 800e068:	ffffefff 	.word	0xffffefff
 800e06c:	fffff7ff 	.word	0xfffff7ff
 800e070:	fffffdff 	.word	0xfffffdff
 800e074:	fffffeff 	.word	0xfffffeff

0800e078 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800e078:	b580      	push	{r7, lr}
 800e07a:	b082      	sub	sp, #8
 800e07c:	af00      	add	r7, sp, #0
 800e07e:	6078      	str	r0, [r7, #4]
 800e080:	000a      	movs	r2, r1
 800e082:	1cfb      	adds	r3, r7, #3
 800e084:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 800e086:	687a      	ldr	r2, [r7, #4]
 800e088:	23aa      	movs	r3, #170	@ 0xaa
 800e08a:	009b      	lsls	r3, r3, #2
 800e08c:	5cd3      	ldrb	r3, [r2, r3]
 800e08e:	2b01      	cmp	r3, #1
 800e090:	d101      	bne.n	800e096 <HAL_PCD_SetAddress+0x1e>
 800e092:	2302      	movs	r3, #2
 800e094:	e017      	b.n	800e0c6 <HAL_PCD_SetAddress+0x4e>
 800e096:	687a      	ldr	r2, [r7, #4]
 800e098:	23aa      	movs	r3, #170	@ 0xaa
 800e09a:	009b      	lsls	r3, r3, #2
 800e09c:	2101      	movs	r1, #1
 800e09e:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	1cfa      	adds	r2, r7, #3
 800e0a4:	2124      	movs	r1, #36	@ 0x24
 800e0a6:	7812      	ldrb	r2, [r2, #0]
 800e0a8:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	681a      	ldr	r2, [r3, #0]
 800e0ae:	1cfb      	adds	r3, r7, #3
 800e0b0:	781b      	ldrb	r3, [r3, #0]
 800e0b2:	0019      	movs	r1, r3
 800e0b4:	0010      	movs	r0, r2
 800e0b6:	f006 fd33 	bl	8014b20 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800e0ba:	687a      	ldr	r2, [r7, #4]
 800e0bc:	23aa      	movs	r3, #170	@ 0xaa
 800e0be:	009b      	lsls	r3, r3, #2
 800e0c0:	2100      	movs	r1, #0
 800e0c2:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800e0c4:	2300      	movs	r3, #0
}
 800e0c6:	0018      	movs	r0, r3
 800e0c8:	46bd      	mov	sp, r7
 800e0ca:	b002      	add	sp, #8
 800e0cc:	bd80      	pop	{r7, pc}

0800e0ce <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800e0ce:	b590      	push	{r4, r7, lr}
 800e0d0:	b085      	sub	sp, #20
 800e0d2:	af00      	add	r7, sp, #0
 800e0d4:	6078      	str	r0, [r7, #4]
 800e0d6:	000c      	movs	r4, r1
 800e0d8:	0010      	movs	r0, r2
 800e0da:	0019      	movs	r1, r3
 800e0dc:	1cfb      	adds	r3, r7, #3
 800e0de:	1c22      	adds	r2, r4, #0
 800e0e0:	701a      	strb	r2, [r3, #0]
 800e0e2:	003b      	movs	r3, r7
 800e0e4:	1c02      	adds	r2, r0, #0
 800e0e6:	801a      	strh	r2, [r3, #0]
 800e0e8:	1cbb      	adds	r3, r7, #2
 800e0ea:	1c0a      	adds	r2, r1, #0
 800e0ec:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 800e0ee:	230b      	movs	r3, #11
 800e0f0:	18fb      	adds	r3, r7, r3
 800e0f2:	2200      	movs	r2, #0
 800e0f4:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800e0f6:	1cfb      	adds	r3, r7, #3
 800e0f8:	781b      	ldrb	r3, [r3, #0]
 800e0fa:	b25b      	sxtb	r3, r3
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	da0f      	bge.n	800e120 <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e100:	1cfb      	adds	r3, r7, #3
 800e102:	781b      	ldrb	r3, [r3, #0]
 800e104:	2207      	movs	r2, #7
 800e106:	4013      	ands	r3, r2
 800e108:	1c5a      	adds	r2, r3, #1
 800e10a:	0013      	movs	r3, r2
 800e10c:	009b      	lsls	r3, r3, #2
 800e10e:	189b      	adds	r3, r3, r2
 800e110:	00db      	lsls	r3, r3, #3
 800e112:	687a      	ldr	r2, [r7, #4]
 800e114:	18d3      	adds	r3, r2, r3
 800e116:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800e118:	68fb      	ldr	r3, [r7, #12]
 800e11a:	2201      	movs	r2, #1
 800e11c:	705a      	strb	r2, [r3, #1]
 800e11e:	e00f      	b.n	800e140 <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800e120:	1cfb      	adds	r3, r7, #3
 800e122:	781b      	ldrb	r3, [r3, #0]
 800e124:	2207      	movs	r2, #7
 800e126:	401a      	ands	r2, r3
 800e128:	0013      	movs	r3, r2
 800e12a:	009b      	lsls	r3, r3, #2
 800e12c:	189b      	adds	r3, r3, r2
 800e12e:	00db      	lsls	r3, r3, #3
 800e130:	3369      	adds	r3, #105	@ 0x69
 800e132:	33ff      	adds	r3, #255	@ 0xff
 800e134:	687a      	ldr	r2, [r7, #4]
 800e136:	18d3      	adds	r3, r2, r3
 800e138:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800e13a:	68fb      	ldr	r3, [r7, #12]
 800e13c:	2200      	movs	r2, #0
 800e13e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800e140:	1cfb      	adds	r3, r7, #3
 800e142:	781b      	ldrb	r3, [r3, #0]
 800e144:	2207      	movs	r2, #7
 800e146:	4013      	ands	r3, r2
 800e148:	b2da      	uxtb	r2, r3
 800e14a:	68fb      	ldr	r3, [r7, #12]
 800e14c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800e14e:	003b      	movs	r3, r7
 800e150:	881a      	ldrh	r2, [r3, #0]
 800e152:	68fb      	ldr	r3, [r7, #12]
 800e154:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800e156:	68fb      	ldr	r3, [r7, #12]
 800e158:	1cba      	adds	r2, r7, #2
 800e15a:	7812      	ldrb	r2, [r2, #0]
 800e15c:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800e15e:	1cbb      	adds	r3, r7, #2
 800e160:	781b      	ldrb	r3, [r3, #0]
 800e162:	2b02      	cmp	r3, #2
 800e164:	d102      	bne.n	800e16c <HAL_PCD_EP_Open+0x9e>
  {
    ep->data_pid_start = 0U;
 800e166:	68fb      	ldr	r3, [r7, #12]
 800e168:	2200      	movs	r2, #0
 800e16a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800e16c:	687a      	ldr	r2, [r7, #4]
 800e16e:	23aa      	movs	r3, #170	@ 0xaa
 800e170:	009b      	lsls	r3, r3, #2
 800e172:	5cd3      	ldrb	r3, [r2, r3]
 800e174:	2b01      	cmp	r3, #1
 800e176:	d101      	bne.n	800e17c <HAL_PCD_EP_Open+0xae>
 800e178:	2302      	movs	r3, #2
 800e17a:	e013      	b.n	800e1a4 <HAL_PCD_EP_Open+0xd6>
 800e17c:	687a      	ldr	r2, [r7, #4]
 800e17e:	23aa      	movs	r3, #170	@ 0xaa
 800e180:	009b      	lsls	r3, r3, #2
 800e182:	2101      	movs	r1, #1
 800e184:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	681b      	ldr	r3, [r3, #0]
 800e18a:	68fa      	ldr	r2, [r7, #12]
 800e18c:	0011      	movs	r1, r2
 800e18e:	0018      	movs	r0, r3
 800e190:	f004 fd2a 	bl	8012be8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800e194:	687a      	ldr	r2, [r7, #4]
 800e196:	23aa      	movs	r3, #170	@ 0xaa
 800e198:	009b      	lsls	r3, r3, #2
 800e19a:	2100      	movs	r1, #0
 800e19c:	54d1      	strb	r1, [r2, r3]

  return ret;
 800e19e:	230b      	movs	r3, #11
 800e1a0:	18fb      	adds	r3, r7, r3
 800e1a2:	781b      	ldrb	r3, [r3, #0]
}
 800e1a4:	0018      	movs	r0, r3
 800e1a6:	46bd      	mov	sp, r7
 800e1a8:	b005      	add	sp, #20
 800e1aa:	bd90      	pop	{r4, r7, pc}

0800e1ac <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800e1ac:	b580      	push	{r7, lr}
 800e1ae:	b084      	sub	sp, #16
 800e1b0:	af00      	add	r7, sp, #0
 800e1b2:	6078      	str	r0, [r7, #4]
 800e1b4:	000a      	movs	r2, r1
 800e1b6:	1cfb      	adds	r3, r7, #3
 800e1b8:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800e1ba:	1cfb      	adds	r3, r7, #3
 800e1bc:	781b      	ldrb	r3, [r3, #0]
 800e1be:	b25b      	sxtb	r3, r3
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	da0f      	bge.n	800e1e4 <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e1c4:	1cfb      	adds	r3, r7, #3
 800e1c6:	781b      	ldrb	r3, [r3, #0]
 800e1c8:	2207      	movs	r2, #7
 800e1ca:	4013      	ands	r3, r2
 800e1cc:	1c5a      	adds	r2, r3, #1
 800e1ce:	0013      	movs	r3, r2
 800e1d0:	009b      	lsls	r3, r3, #2
 800e1d2:	189b      	adds	r3, r3, r2
 800e1d4:	00db      	lsls	r3, r3, #3
 800e1d6:	687a      	ldr	r2, [r7, #4]
 800e1d8:	18d3      	adds	r3, r2, r3
 800e1da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800e1dc:	68fb      	ldr	r3, [r7, #12]
 800e1de:	2201      	movs	r2, #1
 800e1e0:	705a      	strb	r2, [r3, #1]
 800e1e2:	e00f      	b.n	800e204 <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800e1e4:	1cfb      	adds	r3, r7, #3
 800e1e6:	781b      	ldrb	r3, [r3, #0]
 800e1e8:	2207      	movs	r2, #7
 800e1ea:	401a      	ands	r2, r3
 800e1ec:	0013      	movs	r3, r2
 800e1ee:	009b      	lsls	r3, r3, #2
 800e1f0:	189b      	adds	r3, r3, r2
 800e1f2:	00db      	lsls	r3, r3, #3
 800e1f4:	3369      	adds	r3, #105	@ 0x69
 800e1f6:	33ff      	adds	r3, #255	@ 0xff
 800e1f8:	687a      	ldr	r2, [r7, #4]
 800e1fa:	18d3      	adds	r3, r2, r3
 800e1fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800e1fe:	68fb      	ldr	r3, [r7, #12]
 800e200:	2200      	movs	r2, #0
 800e202:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800e204:	1cfb      	adds	r3, r7, #3
 800e206:	781b      	ldrb	r3, [r3, #0]
 800e208:	2207      	movs	r2, #7
 800e20a:	4013      	ands	r3, r2
 800e20c:	b2da      	uxtb	r2, r3
 800e20e:	68fb      	ldr	r3, [r7, #12]
 800e210:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800e212:	687a      	ldr	r2, [r7, #4]
 800e214:	23aa      	movs	r3, #170	@ 0xaa
 800e216:	009b      	lsls	r3, r3, #2
 800e218:	5cd3      	ldrb	r3, [r2, r3]
 800e21a:	2b01      	cmp	r3, #1
 800e21c:	d101      	bne.n	800e222 <HAL_PCD_EP_Close+0x76>
 800e21e:	2302      	movs	r3, #2
 800e220:	e011      	b.n	800e246 <HAL_PCD_EP_Close+0x9a>
 800e222:	687a      	ldr	r2, [r7, #4]
 800e224:	23aa      	movs	r3, #170	@ 0xaa
 800e226:	009b      	lsls	r3, r3, #2
 800e228:	2101      	movs	r1, #1
 800e22a:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	681b      	ldr	r3, [r3, #0]
 800e230:	68fa      	ldr	r2, [r7, #12]
 800e232:	0011      	movs	r1, r2
 800e234:	0018      	movs	r0, r3
 800e236:	f005 f879 	bl	801332c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800e23a:	687a      	ldr	r2, [r7, #4]
 800e23c:	23aa      	movs	r3, #170	@ 0xaa
 800e23e:	009b      	lsls	r3, r3, #2
 800e240:	2100      	movs	r1, #0
 800e242:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 800e244:	2300      	movs	r3, #0
}
 800e246:	0018      	movs	r0, r3
 800e248:	46bd      	mov	sp, r7
 800e24a:	b004      	add	sp, #16
 800e24c:	bd80      	pop	{r7, pc}

0800e24e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800e24e:	b580      	push	{r7, lr}
 800e250:	b086      	sub	sp, #24
 800e252:	af00      	add	r7, sp, #0
 800e254:	60f8      	str	r0, [r7, #12]
 800e256:	607a      	str	r2, [r7, #4]
 800e258:	603b      	str	r3, [r7, #0]
 800e25a:	200b      	movs	r0, #11
 800e25c:	183b      	adds	r3, r7, r0
 800e25e:	1c0a      	adds	r2, r1, #0
 800e260:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800e262:	0001      	movs	r1, r0
 800e264:	187b      	adds	r3, r7, r1
 800e266:	781b      	ldrb	r3, [r3, #0]
 800e268:	2207      	movs	r2, #7
 800e26a:	401a      	ands	r2, r3
 800e26c:	0013      	movs	r3, r2
 800e26e:	009b      	lsls	r3, r3, #2
 800e270:	189b      	adds	r3, r3, r2
 800e272:	00db      	lsls	r3, r3, #3
 800e274:	3369      	adds	r3, #105	@ 0x69
 800e276:	33ff      	adds	r3, #255	@ 0xff
 800e278:	68fa      	ldr	r2, [r7, #12]
 800e27a:	18d3      	adds	r3, r2, r3
 800e27c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800e27e:	697b      	ldr	r3, [r7, #20]
 800e280:	687a      	ldr	r2, [r7, #4]
 800e282:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800e284:	697b      	ldr	r3, [r7, #20]
 800e286:	683a      	ldr	r2, [r7, #0]
 800e288:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800e28a:	697b      	ldr	r3, [r7, #20]
 800e28c:	2200      	movs	r2, #0
 800e28e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800e290:	697b      	ldr	r3, [r7, #20]
 800e292:	2200      	movs	r2, #0
 800e294:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800e296:	187b      	adds	r3, r7, r1
 800e298:	781b      	ldrb	r3, [r3, #0]
 800e29a:	2207      	movs	r2, #7
 800e29c:	4013      	ands	r3, r2
 800e29e:	b2da      	uxtb	r2, r3
 800e2a0:	697b      	ldr	r3, [r7, #20]
 800e2a2:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800e2a4:	68fb      	ldr	r3, [r7, #12]
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	697a      	ldr	r2, [r7, #20]
 800e2aa:	0011      	movs	r1, r2
 800e2ac:	0018      	movs	r0, r3
 800e2ae:	f005 f9fd 	bl	80136ac <USB_EPStartXfer>

  return HAL_OK;
 800e2b2:	2300      	movs	r3, #0
}
 800e2b4:	0018      	movs	r0, r3
 800e2b6:	46bd      	mov	sp, r7
 800e2b8:	b006      	add	sp, #24
 800e2ba:	bd80      	pop	{r7, pc}

0800e2bc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800e2bc:	b580      	push	{r7, lr}
 800e2be:	b082      	sub	sp, #8
 800e2c0:	af00      	add	r7, sp, #0
 800e2c2:	6078      	str	r0, [r7, #4]
 800e2c4:	000a      	movs	r2, r1
 800e2c6:	1cfb      	adds	r3, r7, #3
 800e2c8:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800e2ca:	1cfb      	adds	r3, r7, #3
 800e2cc:	781b      	ldrb	r3, [r3, #0]
 800e2ce:	2207      	movs	r2, #7
 800e2d0:	401a      	ands	r2, r3
 800e2d2:	6878      	ldr	r0, [r7, #4]
 800e2d4:	23c2      	movs	r3, #194	@ 0xc2
 800e2d6:	0059      	lsls	r1, r3, #1
 800e2d8:	0013      	movs	r3, r2
 800e2da:	009b      	lsls	r3, r3, #2
 800e2dc:	189b      	adds	r3, r3, r2
 800e2de:	00db      	lsls	r3, r3, #3
 800e2e0:	18c3      	adds	r3, r0, r3
 800e2e2:	185b      	adds	r3, r3, r1
 800e2e4:	681b      	ldr	r3, [r3, #0]
}
 800e2e6:	0018      	movs	r0, r3
 800e2e8:	46bd      	mov	sp, r7
 800e2ea:	b002      	add	sp, #8
 800e2ec:	bd80      	pop	{r7, pc}

0800e2ee <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800e2ee:	b580      	push	{r7, lr}
 800e2f0:	b086      	sub	sp, #24
 800e2f2:	af00      	add	r7, sp, #0
 800e2f4:	60f8      	str	r0, [r7, #12]
 800e2f6:	607a      	str	r2, [r7, #4]
 800e2f8:	603b      	str	r3, [r7, #0]
 800e2fa:	200b      	movs	r0, #11
 800e2fc:	183b      	adds	r3, r7, r0
 800e2fe:	1c0a      	adds	r2, r1, #0
 800e300:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e302:	183b      	adds	r3, r7, r0
 800e304:	781b      	ldrb	r3, [r3, #0]
 800e306:	2207      	movs	r2, #7
 800e308:	4013      	ands	r3, r2
 800e30a:	1c5a      	adds	r2, r3, #1
 800e30c:	0013      	movs	r3, r2
 800e30e:	009b      	lsls	r3, r3, #2
 800e310:	189b      	adds	r3, r3, r2
 800e312:	00db      	lsls	r3, r3, #3
 800e314:	68fa      	ldr	r2, [r7, #12]
 800e316:	18d3      	adds	r3, r2, r3
 800e318:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800e31a:	697b      	ldr	r3, [r7, #20]
 800e31c:	687a      	ldr	r2, [r7, #4]
 800e31e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800e320:	697b      	ldr	r3, [r7, #20]
 800e322:	683a      	ldr	r2, [r7, #0]
 800e324:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800e326:	697b      	ldr	r3, [r7, #20]
 800e328:	2224      	movs	r2, #36	@ 0x24
 800e32a:	2101      	movs	r1, #1
 800e32c:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 800e32e:	697b      	ldr	r3, [r7, #20]
 800e330:	683a      	ldr	r2, [r7, #0]
 800e332:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800e334:	697b      	ldr	r3, [r7, #20]
 800e336:	2200      	movs	r2, #0
 800e338:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800e33a:	697b      	ldr	r3, [r7, #20]
 800e33c:	2201      	movs	r2, #1
 800e33e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800e340:	183b      	adds	r3, r7, r0
 800e342:	781b      	ldrb	r3, [r3, #0]
 800e344:	2207      	movs	r2, #7
 800e346:	4013      	ands	r3, r2
 800e348:	b2da      	uxtb	r2, r3
 800e34a:	697b      	ldr	r3, [r7, #20]
 800e34c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800e34e:	68fb      	ldr	r3, [r7, #12]
 800e350:	681b      	ldr	r3, [r3, #0]
 800e352:	697a      	ldr	r2, [r7, #20]
 800e354:	0011      	movs	r1, r2
 800e356:	0018      	movs	r0, r3
 800e358:	f005 f9a8 	bl	80136ac <USB_EPStartXfer>

  return HAL_OK;
 800e35c:	2300      	movs	r3, #0
}
 800e35e:	0018      	movs	r0, r3
 800e360:	46bd      	mov	sp, r7
 800e362:	b006      	add	sp, #24
 800e364:	bd80      	pop	{r7, pc}

0800e366 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800e366:	b580      	push	{r7, lr}
 800e368:	b084      	sub	sp, #16
 800e36a:	af00      	add	r7, sp, #0
 800e36c:	6078      	str	r0, [r7, #4]
 800e36e:	000a      	movs	r2, r1
 800e370:	1cfb      	adds	r3, r7, #3
 800e372:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800e374:	1cfb      	adds	r3, r7, #3
 800e376:	781b      	ldrb	r3, [r3, #0]
 800e378:	2207      	movs	r2, #7
 800e37a:	401a      	ands	r2, r3
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	685b      	ldr	r3, [r3, #4]
 800e380:	429a      	cmp	r2, r3
 800e382:	d901      	bls.n	800e388 <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 800e384:	2301      	movs	r3, #1
 800e386:	e046      	b.n	800e416 <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800e388:	1cfb      	adds	r3, r7, #3
 800e38a:	781b      	ldrb	r3, [r3, #0]
 800e38c:	b25b      	sxtb	r3, r3
 800e38e:	2b00      	cmp	r3, #0
 800e390:	da0f      	bge.n	800e3b2 <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e392:	1cfb      	adds	r3, r7, #3
 800e394:	781b      	ldrb	r3, [r3, #0]
 800e396:	2207      	movs	r2, #7
 800e398:	4013      	ands	r3, r2
 800e39a:	1c5a      	adds	r2, r3, #1
 800e39c:	0013      	movs	r3, r2
 800e39e:	009b      	lsls	r3, r3, #2
 800e3a0:	189b      	adds	r3, r3, r2
 800e3a2:	00db      	lsls	r3, r3, #3
 800e3a4:	687a      	ldr	r2, [r7, #4]
 800e3a6:	18d3      	adds	r3, r2, r3
 800e3a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800e3aa:	68fb      	ldr	r3, [r7, #12]
 800e3ac:	2201      	movs	r2, #1
 800e3ae:	705a      	strb	r2, [r3, #1]
 800e3b0:	e00d      	b.n	800e3ce <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800e3b2:	1cfb      	adds	r3, r7, #3
 800e3b4:	781a      	ldrb	r2, [r3, #0]
 800e3b6:	0013      	movs	r3, r2
 800e3b8:	009b      	lsls	r3, r3, #2
 800e3ba:	189b      	adds	r3, r3, r2
 800e3bc:	00db      	lsls	r3, r3, #3
 800e3be:	3369      	adds	r3, #105	@ 0x69
 800e3c0:	33ff      	adds	r3, #255	@ 0xff
 800e3c2:	687a      	ldr	r2, [r7, #4]
 800e3c4:	18d3      	adds	r3, r2, r3
 800e3c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800e3c8:	68fb      	ldr	r3, [r7, #12]
 800e3ca:	2200      	movs	r2, #0
 800e3cc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800e3ce:	68fb      	ldr	r3, [r7, #12]
 800e3d0:	2201      	movs	r2, #1
 800e3d2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800e3d4:	1cfb      	adds	r3, r7, #3
 800e3d6:	781b      	ldrb	r3, [r3, #0]
 800e3d8:	2207      	movs	r2, #7
 800e3da:	4013      	ands	r3, r2
 800e3dc:	b2da      	uxtb	r2, r3
 800e3de:	68fb      	ldr	r3, [r7, #12]
 800e3e0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800e3e2:	687a      	ldr	r2, [r7, #4]
 800e3e4:	23aa      	movs	r3, #170	@ 0xaa
 800e3e6:	009b      	lsls	r3, r3, #2
 800e3e8:	5cd3      	ldrb	r3, [r2, r3]
 800e3ea:	2b01      	cmp	r3, #1
 800e3ec:	d101      	bne.n	800e3f2 <HAL_PCD_EP_SetStall+0x8c>
 800e3ee:	2302      	movs	r3, #2
 800e3f0:	e011      	b.n	800e416 <HAL_PCD_EP_SetStall+0xb0>
 800e3f2:	687a      	ldr	r2, [r7, #4]
 800e3f4:	23aa      	movs	r3, #170	@ 0xaa
 800e3f6:	009b      	lsls	r3, r3, #2
 800e3f8:	2101      	movs	r1, #1
 800e3fa:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	681b      	ldr	r3, [r3, #0]
 800e400:	68fa      	ldr	r2, [r7, #12]
 800e402:	0011      	movs	r1, r2
 800e404:	0018      	movs	r0, r3
 800e406:	f006 fa89 	bl	801491c <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800e40a:	687a      	ldr	r2, [r7, #4]
 800e40c:	23aa      	movs	r3, #170	@ 0xaa
 800e40e:	009b      	lsls	r3, r3, #2
 800e410:	2100      	movs	r1, #0
 800e412:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800e414:	2300      	movs	r3, #0
}
 800e416:	0018      	movs	r0, r3
 800e418:	46bd      	mov	sp, r7
 800e41a:	b004      	add	sp, #16
 800e41c:	bd80      	pop	{r7, pc}

0800e41e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800e41e:	b580      	push	{r7, lr}
 800e420:	b084      	sub	sp, #16
 800e422:	af00      	add	r7, sp, #0
 800e424:	6078      	str	r0, [r7, #4]
 800e426:	000a      	movs	r2, r1
 800e428:	1cfb      	adds	r3, r7, #3
 800e42a:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800e42c:	1cfb      	adds	r3, r7, #3
 800e42e:	781b      	ldrb	r3, [r3, #0]
 800e430:	220f      	movs	r2, #15
 800e432:	401a      	ands	r2, r3
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	685b      	ldr	r3, [r3, #4]
 800e438:	429a      	cmp	r2, r3
 800e43a:	d901      	bls.n	800e440 <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 800e43c:	2301      	movs	r3, #1
 800e43e:	e048      	b.n	800e4d2 <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800e440:	1cfb      	adds	r3, r7, #3
 800e442:	781b      	ldrb	r3, [r3, #0]
 800e444:	b25b      	sxtb	r3, r3
 800e446:	2b00      	cmp	r3, #0
 800e448:	da0f      	bge.n	800e46a <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e44a:	1cfb      	adds	r3, r7, #3
 800e44c:	781b      	ldrb	r3, [r3, #0]
 800e44e:	2207      	movs	r2, #7
 800e450:	4013      	ands	r3, r2
 800e452:	1c5a      	adds	r2, r3, #1
 800e454:	0013      	movs	r3, r2
 800e456:	009b      	lsls	r3, r3, #2
 800e458:	189b      	adds	r3, r3, r2
 800e45a:	00db      	lsls	r3, r3, #3
 800e45c:	687a      	ldr	r2, [r7, #4]
 800e45e:	18d3      	adds	r3, r2, r3
 800e460:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800e462:	68fb      	ldr	r3, [r7, #12]
 800e464:	2201      	movs	r2, #1
 800e466:	705a      	strb	r2, [r3, #1]
 800e468:	e00f      	b.n	800e48a <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800e46a:	1cfb      	adds	r3, r7, #3
 800e46c:	781b      	ldrb	r3, [r3, #0]
 800e46e:	2207      	movs	r2, #7
 800e470:	401a      	ands	r2, r3
 800e472:	0013      	movs	r3, r2
 800e474:	009b      	lsls	r3, r3, #2
 800e476:	189b      	adds	r3, r3, r2
 800e478:	00db      	lsls	r3, r3, #3
 800e47a:	3369      	adds	r3, #105	@ 0x69
 800e47c:	33ff      	adds	r3, #255	@ 0xff
 800e47e:	687a      	ldr	r2, [r7, #4]
 800e480:	18d3      	adds	r3, r2, r3
 800e482:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800e484:	68fb      	ldr	r3, [r7, #12]
 800e486:	2200      	movs	r2, #0
 800e488:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800e48a:	68fb      	ldr	r3, [r7, #12]
 800e48c:	2200      	movs	r2, #0
 800e48e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800e490:	1cfb      	adds	r3, r7, #3
 800e492:	781b      	ldrb	r3, [r3, #0]
 800e494:	2207      	movs	r2, #7
 800e496:	4013      	ands	r3, r2
 800e498:	b2da      	uxtb	r2, r3
 800e49a:	68fb      	ldr	r3, [r7, #12]
 800e49c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800e49e:	687a      	ldr	r2, [r7, #4]
 800e4a0:	23aa      	movs	r3, #170	@ 0xaa
 800e4a2:	009b      	lsls	r3, r3, #2
 800e4a4:	5cd3      	ldrb	r3, [r2, r3]
 800e4a6:	2b01      	cmp	r3, #1
 800e4a8:	d101      	bne.n	800e4ae <HAL_PCD_EP_ClrStall+0x90>
 800e4aa:	2302      	movs	r3, #2
 800e4ac:	e011      	b.n	800e4d2 <HAL_PCD_EP_ClrStall+0xb4>
 800e4ae:	687a      	ldr	r2, [r7, #4]
 800e4b0:	23aa      	movs	r3, #170	@ 0xaa
 800e4b2:	009b      	lsls	r3, r3, #2
 800e4b4:	2101      	movs	r1, #1
 800e4b6:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	68fa      	ldr	r2, [r7, #12]
 800e4be:	0011      	movs	r1, r2
 800e4c0:	0018      	movs	r0, r3
 800e4c2:	f006 fa7b 	bl	80149bc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800e4c6:	687a      	ldr	r2, [r7, #4]
 800e4c8:	23aa      	movs	r3, #170	@ 0xaa
 800e4ca:	009b      	lsls	r3, r3, #2
 800e4cc:	2100      	movs	r1, #0
 800e4ce:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800e4d0:	2300      	movs	r3, #0
}
 800e4d2:	0018      	movs	r0, r3
 800e4d4:	46bd      	mov	sp, r7
 800e4d6:	b004      	add	sp, #16
 800e4d8:	bd80      	pop	{r7, pc}
	...

0800e4dc <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800e4dc:	b5b0      	push	{r4, r5, r7, lr}
 800e4de:	b096      	sub	sp, #88	@ 0x58
 800e4e0:	af00      	add	r7, sp, #0
 800e4e2:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800e4e4:	f000 fbec 	bl	800ecc0 <PCD_EP_ISR_Handler+0x7e4>
  {
    wIstr = hpcd->Instance->ISTR;
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	681a      	ldr	r2, [r3, #0]
 800e4ec:	204e      	movs	r0, #78	@ 0x4e
 800e4ee:	183b      	adds	r3, r7, r0
 800e4f0:	2144      	movs	r1, #68	@ 0x44
 800e4f2:	5a52      	ldrh	r2, [r2, r1]
 800e4f4:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800e4f6:	183b      	adds	r3, r7, r0
 800e4f8:	881b      	ldrh	r3, [r3, #0]
 800e4fa:	b2da      	uxtb	r2, r3
 800e4fc:	244d      	movs	r4, #77	@ 0x4d
 800e4fe:	193b      	adds	r3, r7, r4
 800e500:	210f      	movs	r1, #15
 800e502:	400a      	ands	r2, r1
 800e504:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 800e506:	193b      	adds	r3, r7, r4
 800e508:	781b      	ldrb	r3, [r3, #0]
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	d000      	beq.n	800e510 <PCD_EP_ISR_Handler+0x34>
 800e50e:	e18f      	b.n	800e830 <PCD_EP_ISR_Handler+0x354>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800e510:	183b      	adds	r3, r7, r0
 800e512:	881b      	ldrh	r3, [r3, #0]
 800e514:	2210      	movs	r2, #16
 800e516:	4013      	ands	r3, r2
 800e518:	d155      	bne.n	800e5c6 <PCD_EP_ISR_Handler+0xea>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	681b      	ldr	r3, [r3, #0]
 800e51e:	881b      	ldrh	r3, [r3, #0]
 800e520:	b29a      	uxth	r2, r3
 800e522:	200e      	movs	r0, #14
 800e524:	183b      	adds	r3, r7, r0
 800e526:	49bb      	ldr	r1, [pc, #748]	@ (800e814 <PCD_EP_ISR_Handler+0x338>)
 800e528:	400a      	ands	r2, r1
 800e52a:	801a      	strh	r2, [r3, #0]
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	681b      	ldr	r3, [r3, #0]
 800e530:	183a      	adds	r2, r7, r0
 800e532:	8812      	ldrh	r2, [r2, #0]
 800e534:	49b8      	ldr	r1, [pc, #736]	@ (800e818 <PCD_EP_ISR_Handler+0x33c>)
 800e536:	430a      	orrs	r2, r1
 800e538:	b292      	uxth	r2, r2
 800e53a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	3328      	adds	r3, #40	@ 0x28
 800e540:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	681b      	ldr	r3, [r3, #0]
 800e546:	2250      	movs	r2, #80	@ 0x50
 800e548:	5a9b      	ldrh	r3, [r3, r2]
 800e54a:	b29b      	uxth	r3, r3
 800e54c:	001a      	movs	r2, r3
 800e54e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e550:	781b      	ldrb	r3, [r3, #0]
 800e552:	00db      	lsls	r3, r3, #3
 800e554:	18d2      	adds	r2, r2, r3
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	681b      	ldr	r3, [r3, #0]
 800e55a:	18d3      	adds	r3, r2, r3
 800e55c:	4aaf      	ldr	r2, [pc, #700]	@ (800e81c <PCD_EP_ISR_Handler+0x340>)
 800e55e:	4694      	mov	ip, r2
 800e560:	4463      	add	r3, ip
 800e562:	881b      	ldrh	r3, [r3, #0]
 800e564:	059b      	lsls	r3, r3, #22
 800e566:	0d9a      	lsrs	r2, r3, #22
 800e568:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e56a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800e56c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e56e:	695a      	ldr	r2, [r3, #20]
 800e570:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e572:	69db      	ldr	r3, [r3, #28]
 800e574:	18d2      	adds	r2, r2, r3
 800e576:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e578:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	2100      	movs	r1, #0
 800e57e:	0018      	movs	r0, r3
 800e580:	f008 fb8a 	bl	8016c98 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	2224      	movs	r2, #36	@ 0x24
 800e588:	5c9b      	ldrb	r3, [r3, r2]
 800e58a:	b2db      	uxtb	r3, r3
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	d101      	bne.n	800e594 <PCD_EP_ISR_Handler+0xb8>
 800e590:	f000 fb96 	bl	800ecc0 <PCD_EP_ISR_Handler+0x7e4>
 800e594:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e596:	699b      	ldr	r3, [r3, #24]
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d001      	beq.n	800e5a0 <PCD_EP_ISR_Handler+0xc4>
 800e59c:	f000 fb90 	bl	800ecc0 <PCD_EP_ISR_Handler+0x7e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	2224      	movs	r2, #36	@ 0x24
 800e5a4:	5c9b      	ldrb	r3, [r3, r2]
 800e5a6:	b2db      	uxtb	r3, r3
 800e5a8:	2280      	movs	r2, #128	@ 0x80
 800e5aa:	4252      	negs	r2, r2
 800e5ac:	4313      	orrs	r3, r2
 800e5ae:	b2da      	uxtb	r2, r3
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	681b      	ldr	r3, [r3, #0]
 800e5b4:	0011      	movs	r1, r2
 800e5b6:	224c      	movs	r2, #76	@ 0x4c
 800e5b8:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	2224      	movs	r2, #36	@ 0x24
 800e5be:	2100      	movs	r1, #0
 800e5c0:	5499      	strb	r1, [r3, r2]
 800e5c2:	f000 fb7d 	bl	800ecc0 <PCD_EP_ISR_Handler+0x7e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	3369      	adds	r3, #105	@ 0x69
 800e5ca:	33ff      	adds	r3, #255	@ 0xff
 800e5cc:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	681a      	ldr	r2, [r3, #0]
 800e5d2:	214a      	movs	r1, #74	@ 0x4a
 800e5d4:	187b      	adds	r3, r7, r1
 800e5d6:	8812      	ldrh	r2, [r2, #0]
 800e5d8:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800e5da:	187b      	adds	r3, r7, r1
 800e5dc:	881a      	ldrh	r2, [r3, #0]
 800e5de:	2380      	movs	r3, #128	@ 0x80
 800e5e0:	011b      	lsls	r3, r3, #4
 800e5e2:	4013      	ands	r3, r2
 800e5e4:	d037      	beq.n	800e656 <PCD_EP_ISR_Handler+0x17a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	681b      	ldr	r3, [r3, #0]
 800e5ea:	2250      	movs	r2, #80	@ 0x50
 800e5ec:	5a9b      	ldrh	r3, [r3, r2]
 800e5ee:	b29b      	uxth	r3, r3
 800e5f0:	001a      	movs	r2, r3
 800e5f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e5f4:	781b      	ldrb	r3, [r3, #0]
 800e5f6:	00db      	lsls	r3, r3, #3
 800e5f8:	18d2      	adds	r2, r2, r3
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	681b      	ldr	r3, [r3, #0]
 800e5fe:	18d3      	adds	r3, r2, r3
 800e600:	4a87      	ldr	r2, [pc, #540]	@ (800e820 <PCD_EP_ISR_Handler+0x344>)
 800e602:	4694      	mov	ip, r2
 800e604:	4463      	add	r3, ip
 800e606:	881b      	ldrh	r3, [r3, #0]
 800e608:	059b      	lsls	r3, r3, #22
 800e60a:	0d9a      	lsrs	r2, r3, #22
 800e60c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e60e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	6818      	ldr	r0, [r3, #0]
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	22ac      	movs	r2, #172	@ 0xac
 800e618:	0092      	lsls	r2, r2, #2
 800e61a:	1899      	adds	r1, r3, r2
 800e61c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e61e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800e620:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e622:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800e624:	b29b      	uxth	r3, r3
 800e626:	f006 fafc 	bl	8014c22 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	681b      	ldr	r3, [r3, #0]
 800e62e:	881b      	ldrh	r3, [r3, #0]
 800e630:	b29a      	uxth	r2, r3
 800e632:	2010      	movs	r0, #16
 800e634:	183b      	adds	r3, r7, r0
 800e636:	497b      	ldr	r1, [pc, #492]	@ (800e824 <PCD_EP_ISR_Handler+0x348>)
 800e638:	400a      	ands	r2, r1
 800e63a:	801a      	strh	r2, [r3, #0]
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	681b      	ldr	r3, [r3, #0]
 800e640:	183a      	adds	r2, r7, r0
 800e642:	8812      	ldrh	r2, [r2, #0]
 800e644:	2180      	movs	r1, #128	@ 0x80
 800e646:	430a      	orrs	r2, r1
 800e648:	b292      	uxth	r2, r2
 800e64a:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	0018      	movs	r0, r3
 800e650:	f008 faec 	bl	8016c2c <HAL_PCD_SetupStageCallback>
 800e654:	e334      	b.n	800ecc0 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800e656:	234a      	movs	r3, #74	@ 0x4a
 800e658:	18fb      	adds	r3, r7, r3
 800e65a:	2200      	movs	r2, #0
 800e65c:	5e9b      	ldrsh	r3, [r3, r2]
 800e65e:	2b00      	cmp	r3, #0
 800e660:	db00      	blt.n	800e664 <PCD_EP_ISR_Handler+0x188>
 800e662:	e32d      	b.n	800ecc0 <PCD_EP_ISR_Handler+0x7e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	681b      	ldr	r3, [r3, #0]
 800e668:	881b      	ldrh	r3, [r3, #0]
 800e66a:	b29a      	uxth	r2, r3
 800e66c:	201e      	movs	r0, #30
 800e66e:	183b      	adds	r3, r7, r0
 800e670:	496c      	ldr	r1, [pc, #432]	@ (800e824 <PCD_EP_ISR_Handler+0x348>)
 800e672:	400a      	ands	r2, r1
 800e674:	801a      	strh	r2, [r3, #0]
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	681b      	ldr	r3, [r3, #0]
 800e67a:	183a      	adds	r2, r7, r0
 800e67c:	8812      	ldrh	r2, [r2, #0]
 800e67e:	2180      	movs	r1, #128	@ 0x80
 800e680:	430a      	orrs	r2, r1
 800e682:	b292      	uxth	r2, r2
 800e684:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	2250      	movs	r2, #80	@ 0x50
 800e68c:	5a9b      	ldrh	r3, [r3, r2]
 800e68e:	b29b      	uxth	r3, r3
 800e690:	001a      	movs	r2, r3
 800e692:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e694:	781b      	ldrb	r3, [r3, #0]
 800e696:	00db      	lsls	r3, r3, #3
 800e698:	18d2      	adds	r2, r2, r3
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	681b      	ldr	r3, [r3, #0]
 800e69e:	18d3      	adds	r3, r2, r3
 800e6a0:	4a5f      	ldr	r2, [pc, #380]	@ (800e820 <PCD_EP_ISR_Handler+0x344>)
 800e6a2:	4694      	mov	ip, r2
 800e6a4:	4463      	add	r3, ip
 800e6a6:	881b      	ldrh	r3, [r3, #0]
 800e6a8:	059b      	lsls	r3, r3, #22
 800e6aa:	0d9a      	lsrs	r2, r3, #22
 800e6ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e6ae:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800e6b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e6b2:	69db      	ldr	r3, [r3, #28]
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	d01a      	beq.n	800e6ee <PCD_EP_ISR_Handler+0x212>
 800e6b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e6ba:	695b      	ldr	r3, [r3, #20]
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	d016      	beq.n	800e6ee <PCD_EP_ISR_Handler+0x212>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	6818      	ldr	r0, [r3, #0]
 800e6c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e6c6:	6959      	ldr	r1, [r3, #20]
 800e6c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e6ca:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800e6cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e6ce:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800e6d0:	b29b      	uxth	r3, r3
 800e6d2:	f006 faa6 	bl	8014c22 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800e6d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e6d8:	695a      	ldr	r2, [r3, #20]
 800e6da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e6dc:	69db      	ldr	r3, [r3, #28]
 800e6de:	18d2      	adds	r2, r2, r3
 800e6e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e6e2:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	2100      	movs	r1, #0
 800e6e8:	0018      	movs	r0, r3
 800e6ea:	f008 fab4 	bl	8016c56 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	681a      	ldr	r2, [r3, #0]
 800e6f2:	214a      	movs	r1, #74	@ 0x4a
 800e6f4:	187b      	adds	r3, r7, r1
 800e6f6:	8812      	ldrh	r2, [r2, #0]
 800e6f8:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800e6fa:	187b      	adds	r3, r7, r1
 800e6fc:	881a      	ldrh	r2, [r3, #0]
 800e6fe:	2380      	movs	r3, #128	@ 0x80
 800e700:	011b      	lsls	r3, r3, #4
 800e702:	4013      	ands	r3, r2
 800e704:	d000      	beq.n	800e708 <PCD_EP_ISR_Handler+0x22c>
 800e706:	e2db      	b.n	800ecc0 <PCD_EP_ISR_Handler+0x7e4>
 800e708:	187b      	adds	r3, r7, r1
 800e70a:	881a      	ldrh	r2, [r3, #0]
 800e70c:	23c0      	movs	r3, #192	@ 0xc0
 800e70e:	019b      	lsls	r3, r3, #6
 800e710:	401a      	ands	r2, r3
 800e712:	23c0      	movs	r3, #192	@ 0xc0
 800e714:	019b      	lsls	r3, r3, #6
 800e716:	429a      	cmp	r2, r3
 800e718:	d100      	bne.n	800e71c <PCD_EP_ISR_Handler+0x240>
 800e71a:	e2d1      	b.n	800ecc0 <PCD_EP_ISR_Handler+0x7e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	681b      	ldr	r3, [r3, #0]
 800e720:	61bb      	str	r3, [r7, #24]
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	681b      	ldr	r3, [r3, #0]
 800e726:	2250      	movs	r2, #80	@ 0x50
 800e728:	5a9b      	ldrh	r3, [r3, r2]
 800e72a:	b29b      	uxth	r3, r3
 800e72c:	001a      	movs	r2, r3
 800e72e:	69bb      	ldr	r3, [r7, #24]
 800e730:	189b      	adds	r3, r3, r2
 800e732:	61bb      	str	r3, [r7, #24]
 800e734:	69bb      	ldr	r3, [r7, #24]
 800e736:	4a3a      	ldr	r2, [pc, #232]	@ (800e820 <PCD_EP_ISR_Handler+0x344>)
 800e738:	4694      	mov	ip, r2
 800e73a:	4463      	add	r3, ip
 800e73c:	617b      	str	r3, [r7, #20]
 800e73e:	697b      	ldr	r3, [r7, #20]
 800e740:	881b      	ldrh	r3, [r3, #0]
 800e742:	b29b      	uxth	r3, r3
 800e744:	059b      	lsls	r3, r3, #22
 800e746:	0d9b      	lsrs	r3, r3, #22
 800e748:	b29a      	uxth	r2, r3
 800e74a:	697b      	ldr	r3, [r7, #20]
 800e74c:	801a      	strh	r2, [r3, #0]
 800e74e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e750:	691b      	ldr	r3, [r3, #16]
 800e752:	2b3e      	cmp	r3, #62	@ 0x3e
 800e754:	d91a      	bls.n	800e78c <PCD_EP_ISR_Handler+0x2b0>
 800e756:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e758:	691b      	ldr	r3, [r3, #16]
 800e75a:	095b      	lsrs	r3, r3, #5
 800e75c:	647b      	str	r3, [r7, #68]	@ 0x44
 800e75e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e760:	691b      	ldr	r3, [r3, #16]
 800e762:	221f      	movs	r2, #31
 800e764:	4013      	ands	r3, r2
 800e766:	d102      	bne.n	800e76e <PCD_EP_ISR_Handler+0x292>
 800e768:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e76a:	3b01      	subs	r3, #1
 800e76c:	647b      	str	r3, [r7, #68]	@ 0x44
 800e76e:	697b      	ldr	r3, [r7, #20]
 800e770:	881b      	ldrh	r3, [r3, #0]
 800e772:	b29a      	uxth	r2, r3
 800e774:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e776:	b29b      	uxth	r3, r3
 800e778:	029b      	lsls	r3, r3, #10
 800e77a:	b29b      	uxth	r3, r3
 800e77c:	4313      	orrs	r3, r2
 800e77e:	b29b      	uxth	r3, r3
 800e780:	4a25      	ldr	r2, [pc, #148]	@ (800e818 <PCD_EP_ISR_Handler+0x33c>)
 800e782:	4313      	orrs	r3, r2
 800e784:	b29a      	uxth	r2, r3
 800e786:	697b      	ldr	r3, [r7, #20]
 800e788:	801a      	strh	r2, [r3, #0]
 800e78a:	e023      	b.n	800e7d4 <PCD_EP_ISR_Handler+0x2f8>
 800e78c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e78e:	691b      	ldr	r3, [r3, #16]
 800e790:	2b00      	cmp	r3, #0
 800e792:	d108      	bne.n	800e7a6 <PCD_EP_ISR_Handler+0x2ca>
 800e794:	697b      	ldr	r3, [r7, #20]
 800e796:	881b      	ldrh	r3, [r3, #0]
 800e798:	b29b      	uxth	r3, r3
 800e79a:	4a1f      	ldr	r2, [pc, #124]	@ (800e818 <PCD_EP_ISR_Handler+0x33c>)
 800e79c:	4313      	orrs	r3, r2
 800e79e:	b29a      	uxth	r2, r3
 800e7a0:	697b      	ldr	r3, [r7, #20]
 800e7a2:	801a      	strh	r2, [r3, #0]
 800e7a4:	e016      	b.n	800e7d4 <PCD_EP_ISR_Handler+0x2f8>
 800e7a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e7a8:	691b      	ldr	r3, [r3, #16]
 800e7aa:	085b      	lsrs	r3, r3, #1
 800e7ac:	647b      	str	r3, [r7, #68]	@ 0x44
 800e7ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e7b0:	691b      	ldr	r3, [r3, #16]
 800e7b2:	2201      	movs	r2, #1
 800e7b4:	4013      	ands	r3, r2
 800e7b6:	d002      	beq.n	800e7be <PCD_EP_ISR_Handler+0x2e2>
 800e7b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e7ba:	3301      	adds	r3, #1
 800e7bc:	647b      	str	r3, [r7, #68]	@ 0x44
 800e7be:	697b      	ldr	r3, [r7, #20]
 800e7c0:	881b      	ldrh	r3, [r3, #0]
 800e7c2:	b29a      	uxth	r2, r3
 800e7c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e7c6:	b29b      	uxth	r3, r3
 800e7c8:	029b      	lsls	r3, r3, #10
 800e7ca:	b29b      	uxth	r3, r3
 800e7cc:	4313      	orrs	r3, r2
 800e7ce:	b29a      	uxth	r2, r3
 800e7d0:	697b      	ldr	r3, [r7, #20]
 800e7d2:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	881b      	ldrh	r3, [r3, #0]
 800e7da:	b29a      	uxth	r2, r3
 800e7dc:	2012      	movs	r0, #18
 800e7de:	183b      	adds	r3, r7, r0
 800e7e0:	4911      	ldr	r1, [pc, #68]	@ (800e828 <PCD_EP_ISR_Handler+0x34c>)
 800e7e2:	400a      	ands	r2, r1
 800e7e4:	801a      	strh	r2, [r3, #0]
 800e7e6:	183b      	adds	r3, r7, r0
 800e7e8:	183a      	adds	r2, r7, r0
 800e7ea:	8812      	ldrh	r2, [r2, #0]
 800e7ec:	2180      	movs	r1, #128	@ 0x80
 800e7ee:	0149      	lsls	r1, r1, #5
 800e7f0:	404a      	eors	r2, r1
 800e7f2:	801a      	strh	r2, [r3, #0]
 800e7f4:	183b      	adds	r3, r7, r0
 800e7f6:	183a      	adds	r2, r7, r0
 800e7f8:	8812      	ldrh	r2, [r2, #0]
 800e7fa:	2180      	movs	r1, #128	@ 0x80
 800e7fc:	0189      	lsls	r1, r1, #6
 800e7fe:	404a      	eors	r2, r1
 800e800:	801a      	strh	r2, [r3, #0]
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	681b      	ldr	r3, [r3, #0]
 800e806:	183a      	adds	r2, r7, r0
 800e808:	8812      	ldrh	r2, [r2, #0]
 800e80a:	4908      	ldr	r1, [pc, #32]	@ (800e82c <PCD_EP_ISR_Handler+0x350>)
 800e80c:	430a      	orrs	r2, r1
 800e80e:	b292      	uxth	r2, r2
 800e810:	801a      	strh	r2, [r3, #0]
 800e812:	e255      	b.n	800ecc0 <PCD_EP_ISR_Handler+0x7e4>
 800e814:	ffff8f0f 	.word	0xffff8f0f
 800e818:	ffff8000 	.word	0xffff8000
 800e81c:	00000402 	.word	0x00000402
 800e820:	00000406 	.word	0x00000406
 800e824:	00000f8f 	.word	0x00000f8f
 800e828:	ffffbf8f 	.word	0xffffbf8f
 800e82c:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	681b      	ldr	r3, [r3, #0]
 800e834:	001a      	movs	r2, r3
 800e836:	204d      	movs	r0, #77	@ 0x4d
 800e838:	183b      	adds	r3, r7, r0
 800e83a:	781b      	ldrb	r3, [r3, #0]
 800e83c:	009b      	lsls	r3, r3, #2
 800e83e:	18d2      	adds	r2, r2, r3
 800e840:	214a      	movs	r1, #74	@ 0x4a
 800e842:	187b      	adds	r3, r7, r1
 800e844:	8812      	ldrh	r2, [r2, #0]
 800e846:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800e848:	187b      	adds	r3, r7, r1
 800e84a:	2200      	movs	r2, #0
 800e84c:	5e9b      	ldrsh	r3, [r3, r2]
 800e84e:	2b00      	cmp	r3, #0
 800e850:	db00      	blt.n	800e854 <PCD_EP_ISR_Handler+0x378>
 800e852:	e0fa      	b.n	800ea4a <PCD_EP_ISR_Handler+0x56e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	681b      	ldr	r3, [r3, #0]
 800e858:	001a      	movs	r2, r3
 800e85a:	183b      	adds	r3, r7, r0
 800e85c:	781b      	ldrb	r3, [r3, #0]
 800e85e:	009b      	lsls	r3, r3, #2
 800e860:	18d3      	adds	r3, r2, r3
 800e862:	881b      	ldrh	r3, [r3, #0]
 800e864:	b29a      	uxth	r2, r3
 800e866:	2448      	movs	r4, #72	@ 0x48
 800e868:	193b      	adds	r3, r7, r4
 800e86a:	49d1      	ldr	r1, [pc, #836]	@ (800ebb0 <PCD_EP_ISR_Handler+0x6d4>)
 800e86c:	400a      	ands	r2, r1
 800e86e:	801a      	strh	r2, [r3, #0]
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	681b      	ldr	r3, [r3, #0]
 800e874:	001a      	movs	r2, r3
 800e876:	183b      	adds	r3, r7, r0
 800e878:	781b      	ldrb	r3, [r3, #0]
 800e87a:	009b      	lsls	r3, r3, #2
 800e87c:	18d3      	adds	r3, r2, r3
 800e87e:	193a      	adds	r2, r7, r4
 800e880:	8812      	ldrh	r2, [r2, #0]
 800e882:	2180      	movs	r1, #128	@ 0x80
 800e884:	430a      	orrs	r2, r1
 800e886:	b292      	uxth	r2, r2
 800e888:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800e88a:	183b      	adds	r3, r7, r0
 800e88c:	781a      	ldrb	r2, [r3, #0]
 800e88e:	0013      	movs	r3, r2
 800e890:	009b      	lsls	r3, r3, #2
 800e892:	189b      	adds	r3, r3, r2
 800e894:	00db      	lsls	r3, r3, #3
 800e896:	3369      	adds	r3, #105	@ 0x69
 800e898:	33ff      	adds	r3, #255	@ 0xff
 800e89a:	687a      	ldr	r2, [r7, #4]
 800e89c:	18d3      	adds	r3, r2, r3
 800e89e:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800e8a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e8a2:	7b1b      	ldrb	r3, [r3, #12]
 800e8a4:	2b00      	cmp	r3, #0
 800e8a6:	d125      	bne.n	800e8f4 <PCD_EP_ISR_Handler+0x418>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	681b      	ldr	r3, [r3, #0]
 800e8ac:	2250      	movs	r2, #80	@ 0x50
 800e8ae:	5a9b      	ldrh	r3, [r3, r2]
 800e8b0:	b29b      	uxth	r3, r3
 800e8b2:	001a      	movs	r2, r3
 800e8b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e8b6:	781b      	ldrb	r3, [r3, #0]
 800e8b8:	00db      	lsls	r3, r3, #3
 800e8ba:	18d2      	adds	r2, r2, r3
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	681b      	ldr	r3, [r3, #0]
 800e8c0:	18d3      	adds	r3, r2, r3
 800e8c2:	4abc      	ldr	r2, [pc, #752]	@ (800ebb4 <PCD_EP_ISR_Handler+0x6d8>)
 800e8c4:	4694      	mov	ip, r2
 800e8c6:	4463      	add	r3, ip
 800e8c8:	881a      	ldrh	r2, [r3, #0]
 800e8ca:	2450      	movs	r4, #80	@ 0x50
 800e8cc:	193b      	adds	r3, r7, r4
 800e8ce:	0592      	lsls	r2, r2, #22
 800e8d0:	0d92      	lsrs	r2, r2, #22
 800e8d2:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 800e8d4:	193b      	adds	r3, r7, r4
 800e8d6:	881b      	ldrh	r3, [r3, #0]
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	d100      	bne.n	800e8de <PCD_EP_ISR_Handler+0x402>
 800e8dc:	e08d      	b.n	800e9fa <PCD_EP_ISR_Handler+0x51e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	6818      	ldr	r0, [r3, #0]
 800e8e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e8e4:	6959      	ldr	r1, [r3, #20]
 800e8e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e8e8:	88da      	ldrh	r2, [r3, #6]
 800e8ea:	193b      	adds	r3, r7, r4
 800e8ec:	881b      	ldrh	r3, [r3, #0]
 800e8ee:	f006 f998 	bl	8014c22 <USB_ReadPMA>
 800e8f2:	e082      	b.n	800e9fa <PCD_EP_ISR_Handler+0x51e>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800e8f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e8f6:	78db      	ldrb	r3, [r3, #3]
 800e8f8:	2b02      	cmp	r3, #2
 800e8fa:	d10c      	bne.n	800e916 <PCD_EP_ISR_Handler+0x43a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800e8fc:	2350      	movs	r3, #80	@ 0x50
 800e8fe:	18fc      	adds	r4, r7, r3
 800e900:	234a      	movs	r3, #74	@ 0x4a
 800e902:	18fb      	adds	r3, r7, r3
 800e904:	881a      	ldrh	r2, [r3, #0]
 800e906:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	0018      	movs	r0, r3
 800e90c:	f000 f9ec 	bl	800ece8 <HAL_PCD_EP_DB_Receive>
 800e910:	0003      	movs	r3, r0
 800e912:	8023      	strh	r3, [r4, #0]
 800e914:	e071      	b.n	800e9fa <PCD_EP_ISR_Handler+0x51e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	681b      	ldr	r3, [r3, #0]
 800e91a:	001a      	movs	r2, r3
 800e91c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e91e:	781b      	ldrb	r3, [r3, #0]
 800e920:	009b      	lsls	r3, r3, #2
 800e922:	18d3      	adds	r3, r2, r3
 800e924:	881b      	ldrh	r3, [r3, #0]
 800e926:	b29a      	uxth	r2, r3
 800e928:	2052      	movs	r0, #82	@ 0x52
 800e92a:	183b      	adds	r3, r7, r0
 800e92c:	49a2      	ldr	r1, [pc, #648]	@ (800ebb8 <PCD_EP_ISR_Handler+0x6dc>)
 800e92e:	400a      	ands	r2, r1
 800e930:	801a      	strh	r2, [r3, #0]
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	681b      	ldr	r3, [r3, #0]
 800e936:	001a      	movs	r2, r3
 800e938:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e93a:	781b      	ldrb	r3, [r3, #0]
 800e93c:	009b      	lsls	r3, r3, #2
 800e93e:	18d3      	adds	r3, r2, r3
 800e940:	183a      	adds	r2, r7, r0
 800e942:	8812      	ldrh	r2, [r2, #0]
 800e944:	499d      	ldr	r1, [pc, #628]	@ (800ebbc <PCD_EP_ISR_Handler+0x6e0>)
 800e946:	430a      	orrs	r2, r1
 800e948:	b292      	uxth	r2, r2
 800e94a:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	681b      	ldr	r3, [r3, #0]
 800e950:	001a      	movs	r2, r3
 800e952:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e954:	781b      	ldrb	r3, [r3, #0]
 800e956:	009b      	lsls	r3, r3, #2
 800e958:	18d3      	adds	r3, r2, r3
 800e95a:	881b      	ldrh	r3, [r3, #0]
 800e95c:	b29b      	uxth	r3, r3
 800e95e:	001a      	movs	r2, r3
 800e960:	2380      	movs	r3, #128	@ 0x80
 800e962:	01db      	lsls	r3, r3, #7
 800e964:	4013      	ands	r3, r2
 800e966:	d024      	beq.n	800e9b2 <PCD_EP_ISR_Handler+0x4d6>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	681b      	ldr	r3, [r3, #0]
 800e96c:	2250      	movs	r2, #80	@ 0x50
 800e96e:	5a9b      	ldrh	r3, [r3, r2]
 800e970:	b29b      	uxth	r3, r3
 800e972:	001a      	movs	r2, r3
 800e974:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e976:	781b      	ldrb	r3, [r3, #0]
 800e978:	00db      	lsls	r3, r3, #3
 800e97a:	18d2      	adds	r2, r2, r3
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	681b      	ldr	r3, [r3, #0]
 800e980:	18d3      	adds	r3, r2, r3
 800e982:	4a8f      	ldr	r2, [pc, #572]	@ (800ebc0 <PCD_EP_ISR_Handler+0x6e4>)
 800e984:	4694      	mov	ip, r2
 800e986:	4463      	add	r3, ip
 800e988:	881a      	ldrh	r2, [r3, #0]
 800e98a:	2450      	movs	r4, #80	@ 0x50
 800e98c:	193b      	adds	r3, r7, r4
 800e98e:	0592      	lsls	r2, r2, #22
 800e990:	0d92      	lsrs	r2, r2, #22
 800e992:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 800e994:	193b      	adds	r3, r7, r4
 800e996:	881b      	ldrh	r3, [r3, #0]
 800e998:	2b00      	cmp	r3, #0
 800e99a:	d02e      	beq.n	800e9fa <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	6818      	ldr	r0, [r3, #0]
 800e9a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e9a2:	6959      	ldr	r1, [r3, #20]
 800e9a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e9a6:	891a      	ldrh	r2, [r3, #8]
 800e9a8:	193b      	adds	r3, r7, r4
 800e9aa:	881b      	ldrh	r3, [r3, #0]
 800e9ac:	f006 f939 	bl	8014c22 <USB_ReadPMA>
 800e9b0:	e023      	b.n	800e9fa <PCD_EP_ISR_Handler+0x51e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	681b      	ldr	r3, [r3, #0]
 800e9b6:	2250      	movs	r2, #80	@ 0x50
 800e9b8:	5a9b      	ldrh	r3, [r3, r2]
 800e9ba:	b29b      	uxth	r3, r3
 800e9bc:	001a      	movs	r2, r3
 800e9be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e9c0:	781b      	ldrb	r3, [r3, #0]
 800e9c2:	00db      	lsls	r3, r3, #3
 800e9c4:	18d2      	adds	r2, r2, r3
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	681b      	ldr	r3, [r3, #0]
 800e9ca:	18d3      	adds	r3, r2, r3
 800e9cc:	4a79      	ldr	r2, [pc, #484]	@ (800ebb4 <PCD_EP_ISR_Handler+0x6d8>)
 800e9ce:	4694      	mov	ip, r2
 800e9d0:	4463      	add	r3, ip
 800e9d2:	881a      	ldrh	r2, [r3, #0]
 800e9d4:	2450      	movs	r4, #80	@ 0x50
 800e9d6:	193b      	adds	r3, r7, r4
 800e9d8:	0592      	lsls	r2, r2, #22
 800e9da:	0d92      	lsrs	r2, r2, #22
 800e9dc:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 800e9de:	193b      	adds	r3, r7, r4
 800e9e0:	881b      	ldrh	r3, [r3, #0]
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	d009      	beq.n	800e9fa <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	6818      	ldr	r0, [r3, #0]
 800e9ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e9ec:	6959      	ldr	r1, [r3, #20]
 800e9ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e9f0:	895a      	ldrh	r2, [r3, #10]
 800e9f2:	193b      	adds	r3, r7, r4
 800e9f4:	881b      	ldrh	r3, [r3, #0]
 800e9f6:	f006 f914 	bl	8014c22 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800e9fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e9fc:	69da      	ldr	r2, [r3, #28]
 800e9fe:	2150      	movs	r1, #80	@ 0x50
 800ea00:	187b      	adds	r3, r7, r1
 800ea02:	881b      	ldrh	r3, [r3, #0]
 800ea04:	18d2      	adds	r2, r2, r3
 800ea06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ea08:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800ea0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ea0c:	695a      	ldr	r2, [r3, #20]
 800ea0e:	187b      	adds	r3, r7, r1
 800ea10:	881b      	ldrh	r3, [r3, #0]
 800ea12:	18d2      	adds	r2, r2, r3
 800ea14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ea16:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800ea18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ea1a:	699b      	ldr	r3, [r3, #24]
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	d005      	beq.n	800ea2c <PCD_EP_ISR_Handler+0x550>
 800ea20:	187b      	adds	r3, r7, r1
 800ea22:	881a      	ldrh	r2, [r3, #0]
 800ea24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ea26:	691b      	ldr	r3, [r3, #16]
 800ea28:	429a      	cmp	r2, r3
 800ea2a:	d207      	bcs.n	800ea3c <PCD_EP_ISR_Handler+0x560>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800ea2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ea2e:	781a      	ldrb	r2, [r3, #0]
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	0011      	movs	r1, r2
 800ea34:	0018      	movs	r0, r3
 800ea36:	f008 f90e 	bl	8016c56 <HAL_PCD_DataOutStageCallback>
 800ea3a:	e006      	b.n	800ea4a <PCD_EP_ISR_Handler+0x56e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	681b      	ldr	r3, [r3, #0]
 800ea40:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ea42:	0011      	movs	r1, r2
 800ea44:	0018      	movs	r0, r3
 800ea46:	f004 fe31 	bl	80136ac <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800ea4a:	244a      	movs	r4, #74	@ 0x4a
 800ea4c:	193b      	adds	r3, r7, r4
 800ea4e:	881b      	ldrh	r3, [r3, #0]
 800ea50:	2280      	movs	r2, #128	@ 0x80
 800ea52:	4013      	ands	r3, r2
 800ea54:	d100      	bne.n	800ea58 <PCD_EP_ISR_Handler+0x57c>
 800ea56:	e133      	b.n	800ecc0 <PCD_EP_ISR_Handler+0x7e4>
      {
        ep = &hpcd->IN_ep[epindex];
 800ea58:	204d      	movs	r0, #77	@ 0x4d
 800ea5a:	183b      	adds	r3, r7, r0
 800ea5c:	781b      	ldrb	r3, [r3, #0]
 800ea5e:	1c5a      	adds	r2, r3, #1
 800ea60:	0013      	movs	r3, r2
 800ea62:	009b      	lsls	r3, r3, #2
 800ea64:	189b      	adds	r3, r3, r2
 800ea66:	00db      	lsls	r3, r3, #3
 800ea68:	687a      	ldr	r2, [r7, #4]
 800ea6a:	18d3      	adds	r3, r2, r3
 800ea6c:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	681b      	ldr	r3, [r3, #0]
 800ea72:	001a      	movs	r2, r3
 800ea74:	183b      	adds	r3, r7, r0
 800ea76:	781b      	ldrb	r3, [r3, #0]
 800ea78:	009b      	lsls	r3, r3, #2
 800ea7a:	18d3      	adds	r3, r2, r3
 800ea7c:	881b      	ldrh	r3, [r3, #0]
 800ea7e:	b29a      	uxth	r2, r3
 800ea80:	2542      	movs	r5, #66	@ 0x42
 800ea82:	197b      	adds	r3, r7, r5
 800ea84:	494f      	ldr	r1, [pc, #316]	@ (800ebc4 <PCD_EP_ISR_Handler+0x6e8>)
 800ea86:	400a      	ands	r2, r1
 800ea88:	801a      	strh	r2, [r3, #0]
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	681b      	ldr	r3, [r3, #0]
 800ea8e:	001a      	movs	r2, r3
 800ea90:	183b      	adds	r3, r7, r0
 800ea92:	781b      	ldrb	r3, [r3, #0]
 800ea94:	009b      	lsls	r3, r3, #2
 800ea96:	18d3      	adds	r3, r2, r3
 800ea98:	197a      	adds	r2, r7, r5
 800ea9a:	8812      	ldrh	r2, [r2, #0]
 800ea9c:	494a      	ldr	r1, [pc, #296]	@ (800ebc8 <PCD_EP_ISR_Handler+0x6ec>)
 800ea9e:	430a      	orrs	r2, r1
 800eaa0:	b292      	uxth	r2, r2
 800eaa2:	801a      	strh	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 800eaa4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eaa6:	78db      	ldrb	r3, [r3, #3]
 800eaa8:	2b01      	cmp	r3, #1
 800eaaa:	d000      	beq.n	800eaae <PCD_EP_ISR_Handler+0x5d2>
 800eaac:	e0af      	b.n	800ec0e <PCD_EP_ISR_Handler+0x732>
        {
          ep->xfer_len = 0U;
 800eaae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eab0:	2200      	movs	r2, #0
 800eab2:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800eab4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eab6:	7b1b      	ldrb	r3, [r3, #12]
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	d100      	bne.n	800eabe <PCD_EP_ISR_Handler+0x5e2>
 800eabc:	e09f      	b.n	800ebfe <PCD_EP_ISR_Handler+0x722>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800eabe:	193b      	adds	r3, r7, r4
 800eac0:	881b      	ldrh	r3, [r3, #0]
 800eac2:	2240      	movs	r2, #64	@ 0x40
 800eac4:	4013      	ands	r3, r2
 800eac6:	d046      	beq.n	800eb56 <PCD_EP_ISR_Handler+0x67a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800eac8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eaca:	785b      	ldrb	r3, [r3, #1]
 800eacc:	2b00      	cmp	r3, #0
 800eace:	d125      	bne.n	800eb1c <PCD_EP_ISR_Handler+0x640>
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	681b      	ldr	r3, [r3, #0]
 800ead4:	627b      	str	r3, [r7, #36]	@ 0x24
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	681b      	ldr	r3, [r3, #0]
 800eada:	2250      	movs	r2, #80	@ 0x50
 800eadc:	5a9b      	ldrh	r3, [r3, r2]
 800eade:	b29b      	uxth	r3, r3
 800eae0:	001a      	movs	r2, r3
 800eae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eae4:	189b      	adds	r3, r3, r2
 800eae6:	627b      	str	r3, [r7, #36]	@ 0x24
 800eae8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eaea:	781b      	ldrb	r3, [r3, #0]
 800eaec:	00da      	lsls	r2, r3, #3
 800eaee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eaf0:	18d3      	adds	r3, r2, r3
 800eaf2:	4a33      	ldr	r2, [pc, #204]	@ (800ebc0 <PCD_EP_ISR_Handler+0x6e4>)
 800eaf4:	4694      	mov	ip, r2
 800eaf6:	4463      	add	r3, ip
 800eaf8:	623b      	str	r3, [r7, #32]
 800eafa:	6a3b      	ldr	r3, [r7, #32]
 800eafc:	881b      	ldrh	r3, [r3, #0]
 800eafe:	b29b      	uxth	r3, r3
 800eb00:	059b      	lsls	r3, r3, #22
 800eb02:	0d9b      	lsrs	r3, r3, #22
 800eb04:	b29a      	uxth	r2, r3
 800eb06:	6a3b      	ldr	r3, [r7, #32]
 800eb08:	801a      	strh	r2, [r3, #0]
 800eb0a:	6a3b      	ldr	r3, [r7, #32]
 800eb0c:	881b      	ldrh	r3, [r3, #0]
 800eb0e:	b29b      	uxth	r3, r3
 800eb10:	4a2d      	ldr	r2, [pc, #180]	@ (800ebc8 <PCD_EP_ISR_Handler+0x6ec>)
 800eb12:	4313      	orrs	r3, r2
 800eb14:	b29a      	uxth	r2, r3
 800eb16:	6a3b      	ldr	r3, [r7, #32]
 800eb18:	801a      	strh	r2, [r3, #0]
 800eb1a:	e070      	b.n	800ebfe <PCD_EP_ISR_Handler+0x722>
 800eb1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eb1e:	785b      	ldrb	r3, [r3, #1]
 800eb20:	2b01      	cmp	r3, #1
 800eb22:	d16c      	bne.n	800ebfe <PCD_EP_ISR_Handler+0x722>
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	681b      	ldr	r3, [r3, #0]
 800eb28:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	681b      	ldr	r3, [r3, #0]
 800eb2e:	2250      	movs	r2, #80	@ 0x50
 800eb30:	5a9b      	ldrh	r3, [r3, r2]
 800eb32:	b29b      	uxth	r3, r3
 800eb34:	001a      	movs	r2, r3
 800eb36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb38:	189b      	adds	r3, r3, r2
 800eb3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800eb3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eb3e:	781b      	ldrb	r3, [r3, #0]
 800eb40:	00da      	lsls	r2, r3, #3
 800eb42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb44:	18d3      	adds	r3, r2, r3
 800eb46:	4a1e      	ldr	r2, [pc, #120]	@ (800ebc0 <PCD_EP_ISR_Handler+0x6e4>)
 800eb48:	4694      	mov	ip, r2
 800eb4a:	4463      	add	r3, ip
 800eb4c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800eb4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb50:	2200      	movs	r2, #0
 800eb52:	801a      	strh	r2, [r3, #0]
 800eb54:	e053      	b.n	800ebfe <PCD_EP_ISR_Handler+0x722>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	681b      	ldr	r3, [r3, #0]
 800eb5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800eb5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eb5e:	785b      	ldrb	r3, [r3, #1]
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d133      	bne.n	800ebcc <PCD_EP_ISR_Handler+0x6f0>
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	681b      	ldr	r3, [r3, #0]
 800eb68:	637b      	str	r3, [r7, #52]	@ 0x34
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	681b      	ldr	r3, [r3, #0]
 800eb6e:	2250      	movs	r2, #80	@ 0x50
 800eb70:	5a9b      	ldrh	r3, [r3, r2]
 800eb72:	b29b      	uxth	r3, r3
 800eb74:	001a      	movs	r2, r3
 800eb76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eb78:	189b      	adds	r3, r3, r2
 800eb7a:	637b      	str	r3, [r7, #52]	@ 0x34
 800eb7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eb7e:	781b      	ldrb	r3, [r3, #0]
 800eb80:	00da      	lsls	r2, r3, #3
 800eb82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eb84:	18d3      	adds	r3, r2, r3
 800eb86:	4a0b      	ldr	r2, [pc, #44]	@ (800ebb4 <PCD_EP_ISR_Handler+0x6d8>)
 800eb88:	4694      	mov	ip, r2
 800eb8a:	4463      	add	r3, ip
 800eb8c:	633b      	str	r3, [r7, #48]	@ 0x30
 800eb8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb90:	881b      	ldrh	r3, [r3, #0]
 800eb92:	b29b      	uxth	r3, r3
 800eb94:	059b      	lsls	r3, r3, #22
 800eb96:	0d9b      	lsrs	r3, r3, #22
 800eb98:	b29a      	uxth	r2, r3
 800eb9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb9c:	801a      	strh	r2, [r3, #0]
 800eb9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eba0:	881b      	ldrh	r3, [r3, #0]
 800eba2:	b29b      	uxth	r3, r3
 800eba4:	4a08      	ldr	r2, [pc, #32]	@ (800ebc8 <PCD_EP_ISR_Handler+0x6ec>)
 800eba6:	4313      	orrs	r3, r2
 800eba8:	b29a      	uxth	r2, r3
 800ebaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ebac:	801a      	strh	r2, [r3, #0]
 800ebae:	e026      	b.n	800ebfe <PCD_EP_ISR_Handler+0x722>
 800ebb0:	00000f8f 	.word	0x00000f8f
 800ebb4:	00000406 	.word	0x00000406
 800ebb8:	ffff8f8f 	.word	0xffff8f8f
 800ebbc:	ffff80c0 	.word	0xffff80c0
 800ebc0:	00000402 	.word	0x00000402
 800ebc4:	ffff8f0f 	.word	0xffff8f0f
 800ebc8:	ffff8000 	.word	0xffff8000
 800ebcc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ebce:	785b      	ldrb	r3, [r3, #1]
 800ebd0:	2b01      	cmp	r3, #1
 800ebd2:	d114      	bne.n	800ebfe <PCD_EP_ISR_Handler+0x722>
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	681b      	ldr	r3, [r3, #0]
 800ebd8:	2250      	movs	r2, #80	@ 0x50
 800ebda:	5a9b      	ldrh	r3, [r3, r2]
 800ebdc:	b29b      	uxth	r3, r3
 800ebde:	001a      	movs	r2, r3
 800ebe0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ebe2:	189b      	adds	r3, r3, r2
 800ebe4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ebe6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ebe8:	781b      	ldrb	r3, [r3, #0]
 800ebea:	00da      	lsls	r2, r3, #3
 800ebec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ebee:	18d3      	adds	r3, r2, r3
 800ebf0:	4a3b      	ldr	r2, [pc, #236]	@ (800ece0 <PCD_EP_ISR_Handler+0x804>)
 800ebf2:	4694      	mov	ip, r2
 800ebf4:	4463      	add	r3, ip
 800ebf6:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ebf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ebfa:	2200      	movs	r2, #0
 800ebfc:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800ebfe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ec00:	781a      	ldrb	r2, [r3, #0]
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	0011      	movs	r1, r2
 800ec06:	0018      	movs	r0, r3
 800ec08:	f008 f846 	bl	8016c98 <HAL_PCD_DataInStageCallback>
 800ec0c:	e058      	b.n	800ecc0 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800ec0e:	234a      	movs	r3, #74	@ 0x4a
 800ec10:	18fb      	adds	r3, r7, r3
 800ec12:	881a      	ldrh	r2, [r3, #0]
 800ec14:	2380      	movs	r3, #128	@ 0x80
 800ec16:	005b      	lsls	r3, r3, #1
 800ec18:	4013      	ands	r3, r2
 800ec1a:	d149      	bne.n	800ecb0 <PCD_EP_ISR_Handler+0x7d4>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	681b      	ldr	r3, [r3, #0]
 800ec20:	2250      	movs	r2, #80	@ 0x50
 800ec22:	5a9b      	ldrh	r3, [r3, r2]
 800ec24:	b29b      	uxth	r3, r3
 800ec26:	001a      	movs	r2, r3
 800ec28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ec2a:	781b      	ldrb	r3, [r3, #0]
 800ec2c:	00db      	lsls	r3, r3, #3
 800ec2e:	18d2      	adds	r2, r2, r3
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	681b      	ldr	r3, [r3, #0]
 800ec34:	18d3      	adds	r3, r2, r3
 800ec36:	4a2b      	ldr	r2, [pc, #172]	@ (800ece4 <PCD_EP_ISR_Handler+0x808>)
 800ec38:	4694      	mov	ip, r2
 800ec3a:	4463      	add	r3, ip
 800ec3c:	881a      	ldrh	r2, [r3, #0]
 800ec3e:	2140      	movs	r1, #64	@ 0x40
 800ec40:	187b      	adds	r3, r7, r1
 800ec42:	0592      	lsls	r2, r2, #22
 800ec44:	0d92      	lsrs	r2, r2, #22
 800ec46:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 800ec48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ec4a:	699a      	ldr	r2, [r3, #24]
 800ec4c:	187b      	adds	r3, r7, r1
 800ec4e:	881b      	ldrh	r3, [r3, #0]
 800ec50:	429a      	cmp	r2, r3
 800ec52:	d907      	bls.n	800ec64 <PCD_EP_ISR_Handler+0x788>
            {
              ep->xfer_len -= TxPctSize;
 800ec54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ec56:	699a      	ldr	r2, [r3, #24]
 800ec58:	187b      	adds	r3, r7, r1
 800ec5a:	881b      	ldrh	r3, [r3, #0]
 800ec5c:	1ad2      	subs	r2, r2, r3
 800ec5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ec60:	619a      	str	r2, [r3, #24]
 800ec62:	e002      	b.n	800ec6a <PCD_EP_ISR_Handler+0x78e>
            }
            else
            {
              ep->xfer_len = 0U;
 800ec64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ec66:	2200      	movs	r2, #0
 800ec68:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800ec6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ec6c:	699b      	ldr	r3, [r3, #24]
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	d107      	bne.n	800ec82 <PCD_EP_ISR_Handler+0x7a6>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800ec72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ec74:	781a      	ldrb	r2, [r3, #0]
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	0011      	movs	r1, r2
 800ec7a:	0018      	movs	r0, r3
 800ec7c:	f008 f80c 	bl	8016c98 <HAL_PCD_DataInStageCallback>
 800ec80:	e01e      	b.n	800ecc0 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800ec82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ec84:	695a      	ldr	r2, [r3, #20]
 800ec86:	2140      	movs	r1, #64	@ 0x40
 800ec88:	187b      	adds	r3, r7, r1
 800ec8a:	881b      	ldrh	r3, [r3, #0]
 800ec8c:	18d2      	adds	r2, r2, r3
 800ec8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ec90:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800ec92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ec94:	69da      	ldr	r2, [r3, #28]
 800ec96:	187b      	adds	r3, r7, r1
 800ec98:	881b      	ldrh	r3, [r3, #0]
 800ec9a:	18d2      	adds	r2, r2, r3
 800ec9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ec9e:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	681b      	ldr	r3, [r3, #0]
 800eca4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800eca6:	0011      	movs	r1, r2
 800eca8:	0018      	movs	r0, r3
 800ecaa:	f004 fcff 	bl	80136ac <USB_EPStartXfer>
 800ecae:	e007      	b.n	800ecc0 <PCD_EP_ISR_Handler+0x7e4>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800ecb0:	234a      	movs	r3, #74	@ 0x4a
 800ecb2:	18fb      	adds	r3, r7, r3
 800ecb4:	881a      	ldrh	r2, [r3, #0]
 800ecb6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	0018      	movs	r0, r3
 800ecbc:	f000 f930 	bl	800ef20 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	681b      	ldr	r3, [r3, #0]
 800ecc4:	2244      	movs	r2, #68	@ 0x44
 800ecc6:	5a9b      	ldrh	r3, [r3, r2]
 800ecc8:	b29b      	uxth	r3, r3
 800ecca:	b21b      	sxth	r3, r3
 800eccc:	2b00      	cmp	r3, #0
 800ecce:	da01      	bge.n	800ecd4 <PCD_EP_ISR_Handler+0x7f8>
 800ecd0:	f7ff fc0a 	bl	800e4e8 <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 800ecd4:	2300      	movs	r3, #0
}
 800ecd6:	0018      	movs	r0, r3
 800ecd8:	46bd      	mov	sp, r7
 800ecda:	b016      	add	sp, #88	@ 0x58
 800ecdc:	bdb0      	pop	{r4, r5, r7, pc}
 800ecde:	46c0      	nop			@ (mov r8, r8)
 800ece0:	00000406 	.word	0x00000406
 800ece4:	00000402 	.word	0x00000402

0800ece8 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800ece8:	b590      	push	{r4, r7, lr}
 800ecea:	b089      	sub	sp, #36	@ 0x24
 800ecec:	af00      	add	r7, sp, #0
 800ecee:	60f8      	str	r0, [r7, #12]
 800ecf0:	60b9      	str	r1, [r7, #8]
 800ecf2:	1dbb      	adds	r3, r7, #6
 800ecf4:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800ecf6:	1dbb      	adds	r3, r7, #6
 800ecf8:	881a      	ldrh	r2, [r3, #0]
 800ecfa:	2380      	movs	r3, #128	@ 0x80
 800ecfc:	01db      	lsls	r3, r3, #7
 800ecfe:	4013      	ands	r3, r2
 800ed00:	d100      	bne.n	800ed04 <HAL_PCD_EP_DB_Receive+0x1c>
 800ed02:	e07d      	b.n	800ee00 <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800ed04:	68fb      	ldr	r3, [r7, #12]
 800ed06:	681b      	ldr	r3, [r3, #0]
 800ed08:	2250      	movs	r2, #80	@ 0x50
 800ed0a:	5a9b      	ldrh	r3, [r3, r2]
 800ed0c:	b29b      	uxth	r3, r3
 800ed0e:	001a      	movs	r2, r3
 800ed10:	68bb      	ldr	r3, [r7, #8]
 800ed12:	781b      	ldrb	r3, [r3, #0]
 800ed14:	00db      	lsls	r3, r3, #3
 800ed16:	18d2      	adds	r2, r2, r3
 800ed18:	68fb      	ldr	r3, [r7, #12]
 800ed1a:	681b      	ldr	r3, [r3, #0]
 800ed1c:	18d3      	adds	r3, r2, r3
 800ed1e:	4a7a      	ldr	r2, [pc, #488]	@ (800ef08 <HAL_PCD_EP_DB_Receive+0x220>)
 800ed20:	4694      	mov	ip, r2
 800ed22:	4463      	add	r3, ip
 800ed24:	881a      	ldrh	r2, [r3, #0]
 800ed26:	211a      	movs	r1, #26
 800ed28:	187b      	adds	r3, r7, r1
 800ed2a:	0592      	lsls	r2, r2, #22
 800ed2c:	0d92      	lsrs	r2, r2, #22
 800ed2e:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 800ed30:	68bb      	ldr	r3, [r7, #8]
 800ed32:	699a      	ldr	r2, [r3, #24]
 800ed34:	187b      	adds	r3, r7, r1
 800ed36:	881b      	ldrh	r3, [r3, #0]
 800ed38:	429a      	cmp	r2, r3
 800ed3a:	d307      	bcc.n	800ed4c <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 800ed3c:	68bb      	ldr	r3, [r7, #8]
 800ed3e:	699a      	ldr	r2, [r3, #24]
 800ed40:	187b      	adds	r3, r7, r1
 800ed42:	881b      	ldrh	r3, [r3, #0]
 800ed44:	1ad2      	subs	r2, r2, r3
 800ed46:	68bb      	ldr	r3, [r7, #8]
 800ed48:	619a      	str	r2, [r3, #24]
 800ed4a:	e002      	b.n	800ed52 <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 800ed4c:	68bb      	ldr	r3, [r7, #8]
 800ed4e:	2200      	movs	r2, #0
 800ed50:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800ed52:	68bb      	ldr	r3, [r7, #8]
 800ed54:	699b      	ldr	r3, [r3, #24]
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	d121      	bne.n	800ed9e <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800ed5a:	68fb      	ldr	r3, [r7, #12]
 800ed5c:	681b      	ldr	r3, [r3, #0]
 800ed5e:	001a      	movs	r2, r3
 800ed60:	68bb      	ldr	r3, [r7, #8]
 800ed62:	781b      	ldrb	r3, [r3, #0]
 800ed64:	009b      	lsls	r3, r3, #2
 800ed66:	18d3      	adds	r3, r2, r3
 800ed68:	881b      	ldrh	r3, [r3, #0]
 800ed6a:	b29a      	uxth	r2, r3
 800ed6c:	2018      	movs	r0, #24
 800ed6e:	183b      	adds	r3, r7, r0
 800ed70:	4966      	ldr	r1, [pc, #408]	@ (800ef0c <HAL_PCD_EP_DB_Receive+0x224>)
 800ed72:	400a      	ands	r2, r1
 800ed74:	801a      	strh	r2, [r3, #0]
 800ed76:	183b      	adds	r3, r7, r0
 800ed78:	183a      	adds	r2, r7, r0
 800ed7a:	8812      	ldrh	r2, [r2, #0]
 800ed7c:	2180      	movs	r1, #128	@ 0x80
 800ed7e:	0189      	lsls	r1, r1, #6
 800ed80:	404a      	eors	r2, r1
 800ed82:	801a      	strh	r2, [r3, #0]
 800ed84:	68fb      	ldr	r3, [r7, #12]
 800ed86:	681b      	ldr	r3, [r3, #0]
 800ed88:	001a      	movs	r2, r3
 800ed8a:	68bb      	ldr	r3, [r7, #8]
 800ed8c:	781b      	ldrb	r3, [r3, #0]
 800ed8e:	009b      	lsls	r3, r3, #2
 800ed90:	18d3      	adds	r3, r2, r3
 800ed92:	183a      	adds	r2, r7, r0
 800ed94:	8812      	ldrh	r2, [r2, #0]
 800ed96:	495e      	ldr	r1, [pc, #376]	@ (800ef10 <HAL_PCD_EP_DB_Receive+0x228>)
 800ed98:	430a      	orrs	r2, r1
 800ed9a:	b292      	uxth	r2, r2
 800ed9c:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800ed9e:	1dbb      	adds	r3, r7, #6
 800eda0:	881b      	ldrh	r3, [r3, #0]
 800eda2:	2240      	movs	r2, #64	@ 0x40
 800eda4:	4013      	ands	r3, r2
 800eda6:	d01a      	beq.n	800edde <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800eda8:	68fb      	ldr	r3, [r7, #12]
 800edaa:	681b      	ldr	r3, [r3, #0]
 800edac:	001a      	movs	r2, r3
 800edae:	68bb      	ldr	r3, [r7, #8]
 800edb0:	781b      	ldrb	r3, [r3, #0]
 800edb2:	009b      	lsls	r3, r3, #2
 800edb4:	18d3      	adds	r3, r2, r3
 800edb6:	881b      	ldrh	r3, [r3, #0]
 800edb8:	b29a      	uxth	r2, r3
 800edba:	2016      	movs	r0, #22
 800edbc:	183b      	adds	r3, r7, r0
 800edbe:	4955      	ldr	r1, [pc, #340]	@ (800ef14 <HAL_PCD_EP_DB_Receive+0x22c>)
 800edc0:	400a      	ands	r2, r1
 800edc2:	801a      	strh	r2, [r3, #0]
 800edc4:	68fb      	ldr	r3, [r7, #12]
 800edc6:	681b      	ldr	r3, [r3, #0]
 800edc8:	001a      	movs	r2, r3
 800edca:	68bb      	ldr	r3, [r7, #8]
 800edcc:	781b      	ldrb	r3, [r3, #0]
 800edce:	009b      	lsls	r3, r3, #2
 800edd0:	18d3      	adds	r3, r2, r3
 800edd2:	183a      	adds	r2, r7, r0
 800edd4:	8812      	ldrh	r2, [r2, #0]
 800edd6:	4950      	ldr	r1, [pc, #320]	@ (800ef18 <HAL_PCD_EP_DB_Receive+0x230>)
 800edd8:	430a      	orrs	r2, r1
 800edda:	b292      	uxth	r2, r2
 800eddc:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 800edde:	241a      	movs	r4, #26
 800ede0:	193b      	adds	r3, r7, r4
 800ede2:	881b      	ldrh	r3, [r3, #0]
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	d100      	bne.n	800edea <HAL_PCD_EP_DB_Receive+0x102>
 800ede8:	e086      	b.n	800eef8 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800edea:	68fb      	ldr	r3, [r7, #12]
 800edec:	6818      	ldr	r0, [r3, #0]
 800edee:	68bb      	ldr	r3, [r7, #8]
 800edf0:	6959      	ldr	r1, [r3, #20]
 800edf2:	68bb      	ldr	r3, [r7, #8]
 800edf4:	891a      	ldrh	r2, [r3, #8]
 800edf6:	193b      	adds	r3, r7, r4
 800edf8:	881b      	ldrh	r3, [r3, #0]
 800edfa:	f005 ff12 	bl	8014c22 <USB_ReadPMA>
 800edfe:	e07b      	b.n	800eef8 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800ee00:	68fb      	ldr	r3, [r7, #12]
 800ee02:	681b      	ldr	r3, [r3, #0]
 800ee04:	2250      	movs	r2, #80	@ 0x50
 800ee06:	5a9b      	ldrh	r3, [r3, r2]
 800ee08:	b29b      	uxth	r3, r3
 800ee0a:	001a      	movs	r2, r3
 800ee0c:	68bb      	ldr	r3, [r7, #8]
 800ee0e:	781b      	ldrb	r3, [r3, #0]
 800ee10:	00db      	lsls	r3, r3, #3
 800ee12:	18d2      	adds	r2, r2, r3
 800ee14:	68fb      	ldr	r3, [r7, #12]
 800ee16:	681b      	ldr	r3, [r3, #0]
 800ee18:	18d3      	adds	r3, r2, r3
 800ee1a:	4a40      	ldr	r2, [pc, #256]	@ (800ef1c <HAL_PCD_EP_DB_Receive+0x234>)
 800ee1c:	4694      	mov	ip, r2
 800ee1e:	4463      	add	r3, ip
 800ee20:	881a      	ldrh	r2, [r3, #0]
 800ee22:	211a      	movs	r1, #26
 800ee24:	187b      	adds	r3, r7, r1
 800ee26:	0592      	lsls	r2, r2, #22
 800ee28:	0d92      	lsrs	r2, r2, #22
 800ee2a:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 800ee2c:	68bb      	ldr	r3, [r7, #8]
 800ee2e:	699a      	ldr	r2, [r3, #24]
 800ee30:	187b      	adds	r3, r7, r1
 800ee32:	881b      	ldrh	r3, [r3, #0]
 800ee34:	429a      	cmp	r2, r3
 800ee36:	d307      	bcc.n	800ee48 <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 800ee38:	68bb      	ldr	r3, [r7, #8]
 800ee3a:	699a      	ldr	r2, [r3, #24]
 800ee3c:	187b      	adds	r3, r7, r1
 800ee3e:	881b      	ldrh	r3, [r3, #0]
 800ee40:	1ad2      	subs	r2, r2, r3
 800ee42:	68bb      	ldr	r3, [r7, #8]
 800ee44:	619a      	str	r2, [r3, #24]
 800ee46:	e002      	b.n	800ee4e <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 800ee48:	68bb      	ldr	r3, [r7, #8]
 800ee4a:	2200      	movs	r2, #0
 800ee4c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800ee4e:	68bb      	ldr	r3, [r7, #8]
 800ee50:	699b      	ldr	r3, [r3, #24]
 800ee52:	2b00      	cmp	r3, #0
 800ee54:	d121      	bne.n	800ee9a <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800ee56:	68fb      	ldr	r3, [r7, #12]
 800ee58:	681b      	ldr	r3, [r3, #0]
 800ee5a:	001a      	movs	r2, r3
 800ee5c:	68bb      	ldr	r3, [r7, #8]
 800ee5e:	781b      	ldrb	r3, [r3, #0]
 800ee60:	009b      	lsls	r3, r3, #2
 800ee62:	18d3      	adds	r3, r2, r3
 800ee64:	881b      	ldrh	r3, [r3, #0]
 800ee66:	b29a      	uxth	r2, r3
 800ee68:	201e      	movs	r0, #30
 800ee6a:	183b      	adds	r3, r7, r0
 800ee6c:	4927      	ldr	r1, [pc, #156]	@ (800ef0c <HAL_PCD_EP_DB_Receive+0x224>)
 800ee6e:	400a      	ands	r2, r1
 800ee70:	801a      	strh	r2, [r3, #0]
 800ee72:	183b      	adds	r3, r7, r0
 800ee74:	183a      	adds	r2, r7, r0
 800ee76:	8812      	ldrh	r2, [r2, #0]
 800ee78:	2180      	movs	r1, #128	@ 0x80
 800ee7a:	0189      	lsls	r1, r1, #6
 800ee7c:	404a      	eors	r2, r1
 800ee7e:	801a      	strh	r2, [r3, #0]
 800ee80:	68fb      	ldr	r3, [r7, #12]
 800ee82:	681b      	ldr	r3, [r3, #0]
 800ee84:	001a      	movs	r2, r3
 800ee86:	68bb      	ldr	r3, [r7, #8]
 800ee88:	781b      	ldrb	r3, [r3, #0]
 800ee8a:	009b      	lsls	r3, r3, #2
 800ee8c:	18d3      	adds	r3, r2, r3
 800ee8e:	183a      	adds	r2, r7, r0
 800ee90:	8812      	ldrh	r2, [r2, #0]
 800ee92:	491f      	ldr	r1, [pc, #124]	@ (800ef10 <HAL_PCD_EP_DB_Receive+0x228>)
 800ee94:	430a      	orrs	r2, r1
 800ee96:	b292      	uxth	r2, r2
 800ee98:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800ee9a:	1dbb      	adds	r3, r7, #6
 800ee9c:	881b      	ldrh	r3, [r3, #0]
 800ee9e:	2240      	movs	r2, #64	@ 0x40
 800eea0:	4013      	ands	r3, r2
 800eea2:	d11a      	bne.n	800eeda <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800eea4:	68fb      	ldr	r3, [r7, #12]
 800eea6:	681b      	ldr	r3, [r3, #0]
 800eea8:	001a      	movs	r2, r3
 800eeaa:	68bb      	ldr	r3, [r7, #8]
 800eeac:	781b      	ldrb	r3, [r3, #0]
 800eeae:	009b      	lsls	r3, r3, #2
 800eeb0:	18d3      	adds	r3, r2, r3
 800eeb2:	881b      	ldrh	r3, [r3, #0]
 800eeb4:	b29a      	uxth	r2, r3
 800eeb6:	201c      	movs	r0, #28
 800eeb8:	183b      	adds	r3, r7, r0
 800eeba:	4916      	ldr	r1, [pc, #88]	@ (800ef14 <HAL_PCD_EP_DB_Receive+0x22c>)
 800eebc:	400a      	ands	r2, r1
 800eebe:	801a      	strh	r2, [r3, #0]
 800eec0:	68fb      	ldr	r3, [r7, #12]
 800eec2:	681b      	ldr	r3, [r3, #0]
 800eec4:	001a      	movs	r2, r3
 800eec6:	68bb      	ldr	r3, [r7, #8]
 800eec8:	781b      	ldrb	r3, [r3, #0]
 800eeca:	009b      	lsls	r3, r3, #2
 800eecc:	18d3      	adds	r3, r2, r3
 800eece:	183a      	adds	r2, r7, r0
 800eed0:	8812      	ldrh	r2, [r2, #0]
 800eed2:	4911      	ldr	r1, [pc, #68]	@ (800ef18 <HAL_PCD_EP_DB_Receive+0x230>)
 800eed4:	430a      	orrs	r2, r1
 800eed6:	b292      	uxth	r2, r2
 800eed8:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 800eeda:	241a      	movs	r4, #26
 800eedc:	193b      	adds	r3, r7, r4
 800eede:	881b      	ldrh	r3, [r3, #0]
 800eee0:	2b00      	cmp	r3, #0
 800eee2:	d009      	beq.n	800eef8 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800eee4:	68fb      	ldr	r3, [r7, #12]
 800eee6:	6818      	ldr	r0, [r3, #0]
 800eee8:	68bb      	ldr	r3, [r7, #8]
 800eeea:	6959      	ldr	r1, [r3, #20]
 800eeec:	68bb      	ldr	r3, [r7, #8]
 800eeee:	895a      	ldrh	r2, [r3, #10]
 800eef0:	193b      	adds	r3, r7, r4
 800eef2:	881b      	ldrh	r3, [r3, #0]
 800eef4:	f005 fe95 	bl	8014c22 <USB_ReadPMA>
    }
  }

  return count;
 800eef8:	231a      	movs	r3, #26
 800eefa:	18fb      	adds	r3, r7, r3
 800eefc:	881b      	ldrh	r3, [r3, #0]
}
 800eefe:	0018      	movs	r0, r3
 800ef00:	46bd      	mov	sp, r7
 800ef02:	b009      	add	sp, #36	@ 0x24
 800ef04:	bd90      	pop	{r4, r7, pc}
 800ef06:	46c0      	nop			@ (mov r8, r8)
 800ef08:	00000402 	.word	0x00000402
 800ef0c:	ffffbf8f 	.word	0xffffbf8f
 800ef10:	ffff8080 	.word	0xffff8080
 800ef14:	ffff8f8f 	.word	0xffff8f8f
 800ef18:	ffff80c0 	.word	0xffff80c0
 800ef1c:	00000406 	.word	0x00000406

0800ef20 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800ef20:	b580      	push	{r7, lr}
 800ef22:	b0a4      	sub	sp, #144	@ 0x90
 800ef24:	af00      	add	r7, sp, #0
 800ef26:	60f8      	str	r0, [r7, #12]
 800ef28:	60b9      	str	r1, [r7, #8]
 800ef2a:	1dbb      	adds	r3, r7, #6
 800ef2c:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800ef2e:	1dbb      	adds	r3, r7, #6
 800ef30:	881b      	ldrh	r3, [r3, #0]
 800ef32:	2240      	movs	r2, #64	@ 0x40
 800ef34:	4013      	ands	r3, r2
 800ef36:	d100      	bne.n	800ef3a <HAL_PCD_EP_DB_Transmit+0x1a>
 800ef38:	e1e4      	b.n	800f304 <HAL_PCD_EP_DB_Transmit+0x3e4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800ef3a:	68fb      	ldr	r3, [r7, #12]
 800ef3c:	681b      	ldr	r3, [r3, #0]
 800ef3e:	2250      	movs	r2, #80	@ 0x50
 800ef40:	5a9b      	ldrh	r3, [r3, r2]
 800ef42:	b29b      	uxth	r3, r3
 800ef44:	001a      	movs	r2, r3
 800ef46:	68bb      	ldr	r3, [r7, #8]
 800ef48:	781b      	ldrb	r3, [r3, #0]
 800ef4a:	00db      	lsls	r3, r3, #3
 800ef4c:	18d2      	adds	r2, r2, r3
 800ef4e:	68fb      	ldr	r3, [r7, #12]
 800ef50:	681b      	ldr	r3, [r3, #0]
 800ef52:	18d3      	adds	r3, r2, r3
 800ef54:	4ad0      	ldr	r2, [pc, #832]	@ (800f298 <HAL_PCD_EP_DB_Transmit+0x378>)
 800ef56:	4694      	mov	ip, r2
 800ef58:	4463      	add	r3, ip
 800ef5a:	881a      	ldrh	r2, [r3, #0]
 800ef5c:	2186      	movs	r1, #134	@ 0x86
 800ef5e:	187b      	adds	r3, r7, r1
 800ef60:	0592      	lsls	r2, r2, #22
 800ef62:	0d92      	lsrs	r2, r2, #22
 800ef64:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxPctSize)
 800ef66:	68bb      	ldr	r3, [r7, #8]
 800ef68:	699a      	ldr	r2, [r3, #24]
 800ef6a:	187b      	adds	r3, r7, r1
 800ef6c:	881b      	ldrh	r3, [r3, #0]
 800ef6e:	429a      	cmp	r2, r3
 800ef70:	d907      	bls.n	800ef82 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 800ef72:	68bb      	ldr	r3, [r7, #8]
 800ef74:	699a      	ldr	r2, [r3, #24]
 800ef76:	187b      	adds	r3, r7, r1
 800ef78:	881b      	ldrh	r3, [r3, #0]
 800ef7a:	1ad2      	subs	r2, r2, r3
 800ef7c:	68bb      	ldr	r3, [r7, #8]
 800ef7e:	619a      	str	r2, [r3, #24]
 800ef80:	e002      	b.n	800ef88 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800ef82:	68bb      	ldr	r3, [r7, #8]
 800ef84:	2200      	movs	r2, #0
 800ef86:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800ef88:	68bb      	ldr	r3, [r7, #8]
 800ef8a:	699b      	ldr	r3, [r3, #24]
 800ef8c:	2b00      	cmp	r3, #0
 800ef8e:	d000      	beq.n	800ef92 <HAL_PCD_EP_DB_Transmit+0x72>
 800ef90:	e0b5      	b.n	800f0fe <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800ef92:	68bb      	ldr	r3, [r7, #8]
 800ef94:	785b      	ldrb	r3, [r3, #1]
 800ef96:	2b00      	cmp	r3, #0
 800ef98:	d125      	bne.n	800efe6 <HAL_PCD_EP_DB_Transmit+0xc6>
 800ef9a:	68fb      	ldr	r3, [r7, #12]
 800ef9c:	681b      	ldr	r3, [r3, #0]
 800ef9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800efa0:	68fb      	ldr	r3, [r7, #12]
 800efa2:	681b      	ldr	r3, [r3, #0]
 800efa4:	2250      	movs	r2, #80	@ 0x50
 800efa6:	5a9b      	ldrh	r3, [r3, r2]
 800efa8:	b29b      	uxth	r3, r3
 800efaa:	001a      	movs	r2, r3
 800efac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800efae:	189b      	adds	r3, r3, r2
 800efb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800efb2:	68bb      	ldr	r3, [r7, #8]
 800efb4:	781b      	ldrb	r3, [r3, #0]
 800efb6:	00da      	lsls	r2, r3, #3
 800efb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800efba:	18d3      	adds	r3, r2, r3
 800efbc:	4ab6      	ldr	r2, [pc, #728]	@ (800f298 <HAL_PCD_EP_DB_Transmit+0x378>)
 800efbe:	4694      	mov	ip, r2
 800efc0:	4463      	add	r3, ip
 800efc2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800efc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800efc6:	881b      	ldrh	r3, [r3, #0]
 800efc8:	b29b      	uxth	r3, r3
 800efca:	059b      	lsls	r3, r3, #22
 800efcc:	0d9b      	lsrs	r3, r3, #22
 800efce:	b29a      	uxth	r2, r3
 800efd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800efd2:	801a      	strh	r2, [r3, #0]
 800efd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800efd6:	881b      	ldrh	r3, [r3, #0]
 800efd8:	b29b      	uxth	r3, r3
 800efda:	4ab0      	ldr	r2, [pc, #704]	@ (800f29c <HAL_PCD_EP_DB_Transmit+0x37c>)
 800efdc:	4313      	orrs	r3, r2
 800efde:	b29a      	uxth	r2, r3
 800efe0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800efe2:	801a      	strh	r2, [r3, #0]
 800efe4:	e01b      	b.n	800f01e <HAL_PCD_EP_DB_Transmit+0xfe>
 800efe6:	68bb      	ldr	r3, [r7, #8]
 800efe8:	785b      	ldrb	r3, [r3, #1]
 800efea:	2b01      	cmp	r3, #1
 800efec:	d117      	bne.n	800f01e <HAL_PCD_EP_DB_Transmit+0xfe>
 800efee:	68fb      	ldr	r3, [r7, #12]
 800eff0:	681b      	ldr	r3, [r3, #0]
 800eff2:	637b      	str	r3, [r7, #52]	@ 0x34
 800eff4:	68fb      	ldr	r3, [r7, #12]
 800eff6:	681b      	ldr	r3, [r3, #0]
 800eff8:	2250      	movs	r2, #80	@ 0x50
 800effa:	5a9b      	ldrh	r3, [r3, r2]
 800effc:	b29b      	uxth	r3, r3
 800effe:	001a      	movs	r2, r3
 800f000:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f002:	189b      	adds	r3, r3, r2
 800f004:	637b      	str	r3, [r7, #52]	@ 0x34
 800f006:	68bb      	ldr	r3, [r7, #8]
 800f008:	781b      	ldrb	r3, [r3, #0]
 800f00a:	00da      	lsls	r2, r3, #3
 800f00c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f00e:	18d3      	adds	r3, r2, r3
 800f010:	4aa1      	ldr	r2, [pc, #644]	@ (800f298 <HAL_PCD_EP_DB_Transmit+0x378>)
 800f012:	4694      	mov	ip, r2
 800f014:	4463      	add	r3, ip
 800f016:	633b      	str	r3, [r7, #48]	@ 0x30
 800f018:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f01a:	2200      	movs	r2, #0
 800f01c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800f01e:	68fb      	ldr	r3, [r7, #12]
 800f020:	681b      	ldr	r3, [r3, #0]
 800f022:	627b      	str	r3, [r7, #36]	@ 0x24
 800f024:	68bb      	ldr	r3, [r7, #8]
 800f026:	785b      	ldrb	r3, [r3, #1]
 800f028:	2b00      	cmp	r3, #0
 800f02a:	d125      	bne.n	800f078 <HAL_PCD_EP_DB_Transmit+0x158>
 800f02c:	68fb      	ldr	r3, [r7, #12]
 800f02e:	681b      	ldr	r3, [r3, #0]
 800f030:	61fb      	str	r3, [r7, #28]
 800f032:	68fb      	ldr	r3, [r7, #12]
 800f034:	681b      	ldr	r3, [r3, #0]
 800f036:	2250      	movs	r2, #80	@ 0x50
 800f038:	5a9b      	ldrh	r3, [r3, r2]
 800f03a:	b29b      	uxth	r3, r3
 800f03c:	001a      	movs	r2, r3
 800f03e:	69fb      	ldr	r3, [r7, #28]
 800f040:	189b      	adds	r3, r3, r2
 800f042:	61fb      	str	r3, [r7, #28]
 800f044:	68bb      	ldr	r3, [r7, #8]
 800f046:	781b      	ldrb	r3, [r3, #0]
 800f048:	00da      	lsls	r2, r3, #3
 800f04a:	69fb      	ldr	r3, [r7, #28]
 800f04c:	18d3      	adds	r3, r2, r3
 800f04e:	4a94      	ldr	r2, [pc, #592]	@ (800f2a0 <HAL_PCD_EP_DB_Transmit+0x380>)
 800f050:	4694      	mov	ip, r2
 800f052:	4463      	add	r3, ip
 800f054:	61bb      	str	r3, [r7, #24]
 800f056:	69bb      	ldr	r3, [r7, #24]
 800f058:	881b      	ldrh	r3, [r3, #0]
 800f05a:	b29b      	uxth	r3, r3
 800f05c:	059b      	lsls	r3, r3, #22
 800f05e:	0d9b      	lsrs	r3, r3, #22
 800f060:	b29a      	uxth	r2, r3
 800f062:	69bb      	ldr	r3, [r7, #24]
 800f064:	801a      	strh	r2, [r3, #0]
 800f066:	69bb      	ldr	r3, [r7, #24]
 800f068:	881b      	ldrh	r3, [r3, #0]
 800f06a:	b29b      	uxth	r3, r3
 800f06c:	4a8b      	ldr	r2, [pc, #556]	@ (800f29c <HAL_PCD_EP_DB_Transmit+0x37c>)
 800f06e:	4313      	orrs	r3, r2
 800f070:	b29a      	uxth	r2, r3
 800f072:	69bb      	ldr	r3, [r7, #24]
 800f074:	801a      	strh	r2, [r3, #0]
 800f076:	e018      	b.n	800f0aa <HAL_PCD_EP_DB_Transmit+0x18a>
 800f078:	68bb      	ldr	r3, [r7, #8]
 800f07a:	785b      	ldrb	r3, [r3, #1]
 800f07c:	2b01      	cmp	r3, #1
 800f07e:	d114      	bne.n	800f0aa <HAL_PCD_EP_DB_Transmit+0x18a>
 800f080:	68fb      	ldr	r3, [r7, #12]
 800f082:	681b      	ldr	r3, [r3, #0]
 800f084:	2250      	movs	r2, #80	@ 0x50
 800f086:	5a9b      	ldrh	r3, [r3, r2]
 800f088:	b29b      	uxth	r3, r3
 800f08a:	001a      	movs	r2, r3
 800f08c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f08e:	189b      	adds	r3, r3, r2
 800f090:	627b      	str	r3, [r7, #36]	@ 0x24
 800f092:	68bb      	ldr	r3, [r7, #8]
 800f094:	781b      	ldrb	r3, [r3, #0]
 800f096:	00da      	lsls	r2, r3, #3
 800f098:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f09a:	18d3      	adds	r3, r2, r3
 800f09c:	4a80      	ldr	r2, [pc, #512]	@ (800f2a0 <HAL_PCD_EP_DB_Transmit+0x380>)
 800f09e:	4694      	mov	ip, r2
 800f0a0:	4463      	add	r3, ip
 800f0a2:	623b      	str	r3, [r7, #32]
 800f0a4:	6a3b      	ldr	r3, [r7, #32]
 800f0a6:	2200      	movs	r2, #0
 800f0a8:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800f0aa:	68bb      	ldr	r3, [r7, #8]
 800f0ac:	781a      	ldrb	r2, [r3, #0]
 800f0ae:	68fb      	ldr	r3, [r7, #12]
 800f0b0:	0011      	movs	r1, r2
 800f0b2:	0018      	movs	r0, r3
 800f0b4:	f007 fdf0 	bl	8016c98 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800f0b8:	1dbb      	adds	r3, r7, #6
 800f0ba:	881a      	ldrh	r2, [r3, #0]
 800f0bc:	2380      	movs	r3, #128	@ 0x80
 800f0be:	01db      	lsls	r3, r3, #7
 800f0c0:	4013      	ands	r3, r2
 800f0c2:	d100      	bne.n	800f0c6 <HAL_PCD_EP_DB_Transmit+0x1a6>
 800f0c4:	e309      	b.n	800f6da <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800f0c6:	68fb      	ldr	r3, [r7, #12]
 800f0c8:	681b      	ldr	r3, [r3, #0]
 800f0ca:	001a      	movs	r2, r3
 800f0cc:	68bb      	ldr	r3, [r7, #8]
 800f0ce:	781b      	ldrb	r3, [r3, #0]
 800f0d0:	009b      	lsls	r3, r3, #2
 800f0d2:	18d3      	adds	r3, r2, r3
 800f0d4:	881b      	ldrh	r3, [r3, #0]
 800f0d6:	b29a      	uxth	r2, r3
 800f0d8:	2016      	movs	r0, #22
 800f0da:	183b      	adds	r3, r7, r0
 800f0dc:	4971      	ldr	r1, [pc, #452]	@ (800f2a4 <HAL_PCD_EP_DB_Transmit+0x384>)
 800f0de:	400a      	ands	r2, r1
 800f0e0:	801a      	strh	r2, [r3, #0]
 800f0e2:	68fb      	ldr	r3, [r7, #12]
 800f0e4:	681b      	ldr	r3, [r3, #0]
 800f0e6:	001a      	movs	r2, r3
 800f0e8:	68bb      	ldr	r3, [r7, #8]
 800f0ea:	781b      	ldrb	r3, [r3, #0]
 800f0ec:	009b      	lsls	r3, r3, #2
 800f0ee:	18d3      	adds	r3, r2, r3
 800f0f0:	183a      	adds	r2, r7, r0
 800f0f2:	8812      	ldrh	r2, [r2, #0]
 800f0f4:	496c      	ldr	r1, [pc, #432]	@ (800f2a8 <HAL_PCD_EP_DB_Transmit+0x388>)
 800f0f6:	430a      	orrs	r2, r1
 800f0f8:	b292      	uxth	r2, r2
 800f0fa:	801a      	strh	r2, [r3, #0]
 800f0fc:	e2ed      	b.n	800f6da <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800f0fe:	1dbb      	adds	r3, r7, #6
 800f100:	881a      	ldrh	r2, [r3, #0]
 800f102:	2380      	movs	r3, #128	@ 0x80
 800f104:	01db      	lsls	r3, r3, #7
 800f106:	4013      	ands	r3, r2
 800f108:	d01a      	beq.n	800f140 <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800f10a:	68fb      	ldr	r3, [r7, #12]
 800f10c:	681b      	ldr	r3, [r3, #0]
 800f10e:	001a      	movs	r2, r3
 800f110:	68bb      	ldr	r3, [r7, #8]
 800f112:	781b      	ldrb	r3, [r3, #0]
 800f114:	009b      	lsls	r3, r3, #2
 800f116:	18d3      	adds	r3, r2, r3
 800f118:	881b      	ldrh	r3, [r3, #0]
 800f11a:	b29a      	uxth	r2, r3
 800f11c:	208a      	movs	r0, #138	@ 0x8a
 800f11e:	183b      	adds	r3, r7, r0
 800f120:	4960      	ldr	r1, [pc, #384]	@ (800f2a4 <HAL_PCD_EP_DB_Transmit+0x384>)
 800f122:	400a      	ands	r2, r1
 800f124:	801a      	strh	r2, [r3, #0]
 800f126:	68fb      	ldr	r3, [r7, #12]
 800f128:	681b      	ldr	r3, [r3, #0]
 800f12a:	001a      	movs	r2, r3
 800f12c:	68bb      	ldr	r3, [r7, #8]
 800f12e:	781b      	ldrb	r3, [r3, #0]
 800f130:	009b      	lsls	r3, r3, #2
 800f132:	18d3      	adds	r3, r2, r3
 800f134:	183a      	adds	r2, r7, r0
 800f136:	8812      	ldrh	r2, [r2, #0]
 800f138:	495b      	ldr	r1, [pc, #364]	@ (800f2a8 <HAL_PCD_EP_DB_Transmit+0x388>)
 800f13a:	430a      	orrs	r2, r1
 800f13c:	b292      	uxth	r2, r2
 800f13e:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800f140:	68bb      	ldr	r3, [r7, #8]
 800f142:	2224      	movs	r2, #36	@ 0x24
 800f144:	5c9b      	ldrb	r3, [r3, r2]
 800f146:	2b01      	cmp	r3, #1
 800f148:	d000      	beq.n	800f14c <HAL_PCD_EP_DB_Transmit+0x22c>
 800f14a:	e2c6      	b.n	800f6da <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 800f14c:	68bb      	ldr	r3, [r7, #8]
 800f14e:	695a      	ldr	r2, [r3, #20]
 800f150:	2186      	movs	r1, #134	@ 0x86
 800f152:	187b      	adds	r3, r7, r1
 800f154:	881b      	ldrh	r3, [r3, #0]
 800f156:	18d2      	adds	r2, r2, r3
 800f158:	68bb      	ldr	r3, [r7, #8]
 800f15a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800f15c:	68bb      	ldr	r3, [r7, #8]
 800f15e:	69da      	ldr	r2, [r3, #28]
 800f160:	187b      	adds	r3, r7, r1
 800f162:	881b      	ldrh	r3, [r3, #0]
 800f164:	18d2      	adds	r2, r2, r3
 800f166:	68bb      	ldr	r3, [r7, #8]
 800f168:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800f16a:	68bb      	ldr	r3, [r7, #8]
 800f16c:	6a1a      	ldr	r2, [r3, #32]
 800f16e:	68bb      	ldr	r3, [r7, #8]
 800f170:	691b      	ldr	r3, [r3, #16]
 800f172:	429a      	cmp	r2, r3
 800f174:	d30c      	bcc.n	800f190 <HAL_PCD_EP_DB_Transmit+0x270>
        {
          len = ep->maxpacket;
 800f176:	68bb      	ldr	r3, [r7, #8]
 800f178:	691b      	ldr	r3, [r3, #16]
 800f17a:	218c      	movs	r1, #140	@ 0x8c
 800f17c:	187a      	adds	r2, r7, r1
 800f17e:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 800f180:	68bb      	ldr	r3, [r7, #8]
 800f182:	6a1a      	ldr	r2, [r3, #32]
 800f184:	187b      	adds	r3, r7, r1
 800f186:	681b      	ldr	r3, [r3, #0]
 800f188:	1ad2      	subs	r2, r2, r3
 800f18a:	68bb      	ldr	r3, [r7, #8]
 800f18c:	621a      	str	r2, [r3, #32]
 800f18e:	e01a      	b.n	800f1c6 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 800f190:	68bb      	ldr	r3, [r7, #8]
 800f192:	6a1b      	ldr	r3, [r3, #32]
 800f194:	2b00      	cmp	r3, #0
 800f196:	d10a      	bne.n	800f1ae <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 800f198:	2386      	movs	r3, #134	@ 0x86
 800f19a:	18fb      	adds	r3, r7, r3
 800f19c:	881b      	ldrh	r3, [r3, #0]
 800f19e:	228c      	movs	r2, #140	@ 0x8c
 800f1a0:	18ba      	adds	r2, r7, r2
 800f1a2:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 800f1a4:	68bb      	ldr	r3, [r7, #8]
 800f1a6:	2224      	movs	r2, #36	@ 0x24
 800f1a8:	2100      	movs	r1, #0
 800f1aa:	5499      	strb	r1, [r3, r2]
 800f1ac:	e00b      	b.n	800f1c6 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800f1ae:	68bb      	ldr	r3, [r7, #8]
 800f1b0:	2224      	movs	r2, #36	@ 0x24
 800f1b2:	2100      	movs	r1, #0
 800f1b4:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 800f1b6:	68bb      	ldr	r3, [r7, #8]
 800f1b8:	6a1b      	ldr	r3, [r3, #32]
 800f1ba:	228c      	movs	r2, #140	@ 0x8c
 800f1bc:	18ba      	adds	r2, r7, r2
 800f1be:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 800f1c0:	68bb      	ldr	r3, [r7, #8]
 800f1c2:	2200      	movs	r2, #0
 800f1c4:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800f1c6:	68bb      	ldr	r3, [r7, #8]
 800f1c8:	785b      	ldrb	r3, [r3, #1]
 800f1ca:	2b00      	cmp	r3, #0
 800f1cc:	d000      	beq.n	800f1d0 <HAL_PCD_EP_DB_Transmit+0x2b0>
 800f1ce:	e06d      	b.n	800f2ac <HAL_PCD_EP_DB_Transmit+0x38c>
 800f1d0:	68fb      	ldr	r3, [r7, #12]
 800f1d2:	681b      	ldr	r3, [r3, #0]
 800f1d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f1d6:	68fb      	ldr	r3, [r7, #12]
 800f1d8:	681b      	ldr	r3, [r3, #0]
 800f1da:	2250      	movs	r2, #80	@ 0x50
 800f1dc:	5a9b      	ldrh	r3, [r3, r2]
 800f1de:	b29b      	uxth	r3, r3
 800f1e0:	001a      	movs	r2, r3
 800f1e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f1e4:	189b      	adds	r3, r3, r2
 800f1e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f1e8:	68bb      	ldr	r3, [r7, #8]
 800f1ea:	781b      	ldrb	r3, [r3, #0]
 800f1ec:	00da      	lsls	r2, r3, #3
 800f1ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f1f0:	18d3      	adds	r3, r2, r3
 800f1f2:	4a29      	ldr	r2, [pc, #164]	@ (800f298 <HAL_PCD_EP_DB_Transmit+0x378>)
 800f1f4:	4694      	mov	ip, r2
 800f1f6:	4463      	add	r3, ip
 800f1f8:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f1fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1fc:	881b      	ldrh	r3, [r3, #0]
 800f1fe:	b29b      	uxth	r3, r3
 800f200:	059b      	lsls	r3, r3, #22
 800f202:	0d9b      	lsrs	r3, r3, #22
 800f204:	b29a      	uxth	r2, r3
 800f206:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f208:	801a      	strh	r2, [r3, #0]
 800f20a:	228c      	movs	r2, #140	@ 0x8c
 800f20c:	18bb      	adds	r3, r7, r2
 800f20e:	681b      	ldr	r3, [r3, #0]
 800f210:	2b3e      	cmp	r3, #62	@ 0x3e
 800f212:	d91a      	bls.n	800f24a <HAL_PCD_EP_DB_Transmit+0x32a>
 800f214:	18bb      	adds	r3, r7, r2
 800f216:	681b      	ldr	r3, [r3, #0]
 800f218:	095b      	lsrs	r3, r3, #5
 800f21a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f21c:	18bb      	adds	r3, r7, r2
 800f21e:	681b      	ldr	r3, [r3, #0]
 800f220:	221f      	movs	r2, #31
 800f222:	4013      	ands	r3, r2
 800f224:	d102      	bne.n	800f22c <HAL_PCD_EP_DB_Transmit+0x30c>
 800f226:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f228:	3b01      	subs	r3, #1
 800f22a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f22c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f22e:	881b      	ldrh	r3, [r3, #0]
 800f230:	b29a      	uxth	r2, r3
 800f232:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f234:	b29b      	uxth	r3, r3
 800f236:	029b      	lsls	r3, r3, #10
 800f238:	b29b      	uxth	r3, r3
 800f23a:	4313      	orrs	r3, r2
 800f23c:	b29b      	uxth	r3, r3
 800f23e:	4a17      	ldr	r2, [pc, #92]	@ (800f29c <HAL_PCD_EP_DB_Transmit+0x37c>)
 800f240:	4313      	orrs	r3, r2
 800f242:	b29a      	uxth	r2, r3
 800f244:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f246:	801a      	strh	r2, [r3, #0]
 800f248:	e04f      	b.n	800f2ea <HAL_PCD_EP_DB_Transmit+0x3ca>
 800f24a:	238c      	movs	r3, #140	@ 0x8c
 800f24c:	18fb      	adds	r3, r7, r3
 800f24e:	681b      	ldr	r3, [r3, #0]
 800f250:	2b00      	cmp	r3, #0
 800f252:	d108      	bne.n	800f266 <HAL_PCD_EP_DB_Transmit+0x346>
 800f254:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f256:	881b      	ldrh	r3, [r3, #0]
 800f258:	b29b      	uxth	r3, r3
 800f25a:	4a10      	ldr	r2, [pc, #64]	@ (800f29c <HAL_PCD_EP_DB_Transmit+0x37c>)
 800f25c:	4313      	orrs	r3, r2
 800f25e:	b29a      	uxth	r2, r3
 800f260:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f262:	801a      	strh	r2, [r3, #0]
 800f264:	e041      	b.n	800f2ea <HAL_PCD_EP_DB_Transmit+0x3ca>
 800f266:	228c      	movs	r2, #140	@ 0x8c
 800f268:	18bb      	adds	r3, r7, r2
 800f26a:	681b      	ldr	r3, [r3, #0]
 800f26c:	085b      	lsrs	r3, r3, #1
 800f26e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f270:	18bb      	adds	r3, r7, r2
 800f272:	681b      	ldr	r3, [r3, #0]
 800f274:	2201      	movs	r2, #1
 800f276:	4013      	ands	r3, r2
 800f278:	d002      	beq.n	800f280 <HAL_PCD_EP_DB_Transmit+0x360>
 800f27a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f27c:	3301      	adds	r3, #1
 800f27e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f280:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f282:	881b      	ldrh	r3, [r3, #0]
 800f284:	b29a      	uxth	r2, r3
 800f286:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f288:	b29b      	uxth	r3, r3
 800f28a:	029b      	lsls	r3, r3, #10
 800f28c:	b29b      	uxth	r3, r3
 800f28e:	4313      	orrs	r3, r2
 800f290:	b29a      	uxth	r2, r3
 800f292:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f294:	801a      	strh	r2, [r3, #0]
 800f296:	e028      	b.n	800f2ea <HAL_PCD_EP_DB_Transmit+0x3ca>
 800f298:	00000402 	.word	0x00000402
 800f29c:	ffff8000 	.word	0xffff8000
 800f2a0:	00000406 	.word	0x00000406
 800f2a4:	ffff8f8f 	.word	0xffff8f8f
 800f2a8:	ffffc080 	.word	0xffffc080
 800f2ac:	68bb      	ldr	r3, [r7, #8]
 800f2ae:	785b      	ldrb	r3, [r3, #1]
 800f2b0:	2b01      	cmp	r3, #1
 800f2b2:	d11a      	bne.n	800f2ea <HAL_PCD_EP_DB_Transmit+0x3ca>
 800f2b4:	68fb      	ldr	r3, [r7, #12]
 800f2b6:	681b      	ldr	r3, [r3, #0]
 800f2b8:	647b      	str	r3, [r7, #68]	@ 0x44
 800f2ba:	68fb      	ldr	r3, [r7, #12]
 800f2bc:	681b      	ldr	r3, [r3, #0]
 800f2be:	2250      	movs	r2, #80	@ 0x50
 800f2c0:	5a9b      	ldrh	r3, [r3, r2]
 800f2c2:	b29b      	uxth	r3, r3
 800f2c4:	001a      	movs	r2, r3
 800f2c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f2c8:	189b      	adds	r3, r3, r2
 800f2ca:	647b      	str	r3, [r7, #68]	@ 0x44
 800f2cc:	68bb      	ldr	r3, [r7, #8]
 800f2ce:	781b      	ldrb	r3, [r3, #0]
 800f2d0:	00da      	lsls	r2, r3, #3
 800f2d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f2d4:	18d3      	adds	r3, r2, r3
 800f2d6:	4adb      	ldr	r2, [pc, #876]	@ (800f644 <HAL_PCD_EP_DB_Transmit+0x724>)
 800f2d8:	4694      	mov	ip, r2
 800f2da:	4463      	add	r3, ip
 800f2dc:	643b      	str	r3, [r7, #64]	@ 0x40
 800f2de:	238c      	movs	r3, #140	@ 0x8c
 800f2e0:	18fb      	adds	r3, r7, r3
 800f2e2:	681b      	ldr	r3, [r3, #0]
 800f2e4:	b29a      	uxth	r2, r3
 800f2e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f2e8:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800f2ea:	68fb      	ldr	r3, [r7, #12]
 800f2ec:	6818      	ldr	r0, [r3, #0]
 800f2ee:	68bb      	ldr	r3, [r7, #8]
 800f2f0:	6959      	ldr	r1, [r3, #20]
 800f2f2:	68bb      	ldr	r3, [r7, #8]
 800f2f4:	891a      	ldrh	r2, [r3, #8]
 800f2f6:	238c      	movs	r3, #140	@ 0x8c
 800f2f8:	18fb      	adds	r3, r7, r3
 800f2fa:	681b      	ldr	r3, [r3, #0]
 800f2fc:	b29b      	uxth	r3, r3
 800f2fe:	f005 fc47 	bl	8014b90 <USB_WritePMA>
 800f302:	e1ea      	b.n	800f6da <HAL_PCD_EP_DB_Transmit+0x7ba>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800f304:	68fb      	ldr	r3, [r7, #12]
 800f306:	681b      	ldr	r3, [r3, #0]
 800f308:	2250      	movs	r2, #80	@ 0x50
 800f30a:	5a9b      	ldrh	r3, [r3, r2]
 800f30c:	b29b      	uxth	r3, r3
 800f30e:	001a      	movs	r2, r3
 800f310:	68bb      	ldr	r3, [r7, #8]
 800f312:	781b      	ldrb	r3, [r3, #0]
 800f314:	00db      	lsls	r3, r3, #3
 800f316:	18d2      	adds	r2, r2, r3
 800f318:	68fb      	ldr	r3, [r7, #12]
 800f31a:	681b      	ldr	r3, [r3, #0]
 800f31c:	18d3      	adds	r3, r2, r3
 800f31e:	4aca      	ldr	r2, [pc, #808]	@ (800f648 <HAL_PCD_EP_DB_Transmit+0x728>)
 800f320:	4694      	mov	ip, r2
 800f322:	4463      	add	r3, ip
 800f324:	881a      	ldrh	r2, [r3, #0]
 800f326:	2186      	movs	r1, #134	@ 0x86
 800f328:	187b      	adds	r3, r7, r1
 800f32a:	0592      	lsls	r2, r2, #22
 800f32c:	0d92      	lsrs	r2, r2, #22
 800f32e:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxPctSize)
 800f330:	68bb      	ldr	r3, [r7, #8]
 800f332:	699a      	ldr	r2, [r3, #24]
 800f334:	187b      	adds	r3, r7, r1
 800f336:	881b      	ldrh	r3, [r3, #0]
 800f338:	429a      	cmp	r2, r3
 800f33a:	d307      	bcc.n	800f34c <HAL_PCD_EP_DB_Transmit+0x42c>
    {
      ep->xfer_len -= TxPctSize;
 800f33c:	68bb      	ldr	r3, [r7, #8]
 800f33e:	699a      	ldr	r2, [r3, #24]
 800f340:	187b      	adds	r3, r7, r1
 800f342:	881b      	ldrh	r3, [r3, #0]
 800f344:	1ad2      	subs	r2, r2, r3
 800f346:	68bb      	ldr	r3, [r7, #8]
 800f348:	619a      	str	r2, [r3, #24]
 800f34a:	e002      	b.n	800f352 <HAL_PCD_EP_DB_Transmit+0x432>
    }
    else
    {
      ep->xfer_len = 0U;
 800f34c:	68bb      	ldr	r3, [r7, #8]
 800f34e:	2200      	movs	r2, #0
 800f350:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800f352:	68bb      	ldr	r3, [r7, #8]
 800f354:	699b      	ldr	r3, [r3, #24]
 800f356:	2b00      	cmp	r3, #0
 800f358:	d000      	beq.n	800f35c <HAL_PCD_EP_DB_Transmit+0x43c>
 800f35a:	e0bb      	b.n	800f4d4 <HAL_PCD_EP_DB_Transmit+0x5b4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800f35c:	68bb      	ldr	r3, [r7, #8]
 800f35e:	785b      	ldrb	r3, [r3, #1]
 800f360:	2b00      	cmp	r3, #0
 800f362:	d125      	bne.n	800f3b0 <HAL_PCD_EP_DB_Transmit+0x490>
 800f364:	68fb      	ldr	r3, [r7, #12]
 800f366:	681b      	ldr	r3, [r3, #0]
 800f368:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800f36a:	68fb      	ldr	r3, [r7, #12]
 800f36c:	681b      	ldr	r3, [r3, #0]
 800f36e:	2250      	movs	r2, #80	@ 0x50
 800f370:	5a9b      	ldrh	r3, [r3, r2]
 800f372:	b29b      	uxth	r3, r3
 800f374:	001a      	movs	r2, r3
 800f376:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800f378:	189b      	adds	r3, r3, r2
 800f37a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800f37c:	68bb      	ldr	r3, [r7, #8]
 800f37e:	781b      	ldrb	r3, [r3, #0]
 800f380:	00da      	lsls	r2, r3, #3
 800f382:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800f384:	18d3      	adds	r3, r2, r3
 800f386:	4aaf      	ldr	r2, [pc, #700]	@ (800f644 <HAL_PCD_EP_DB_Transmit+0x724>)
 800f388:	4694      	mov	ip, r2
 800f38a:	4463      	add	r3, ip
 800f38c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800f38e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f390:	881b      	ldrh	r3, [r3, #0]
 800f392:	b29b      	uxth	r3, r3
 800f394:	059b      	lsls	r3, r3, #22
 800f396:	0d9b      	lsrs	r3, r3, #22
 800f398:	b29a      	uxth	r2, r3
 800f39a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f39c:	801a      	strh	r2, [r3, #0]
 800f39e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f3a0:	881b      	ldrh	r3, [r3, #0]
 800f3a2:	b29b      	uxth	r3, r3
 800f3a4:	4aa9      	ldr	r2, [pc, #676]	@ (800f64c <HAL_PCD_EP_DB_Transmit+0x72c>)
 800f3a6:	4313      	orrs	r3, r2
 800f3a8:	b29a      	uxth	r2, r3
 800f3aa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f3ac:	801a      	strh	r2, [r3, #0]
 800f3ae:	e01b      	b.n	800f3e8 <HAL_PCD_EP_DB_Transmit+0x4c8>
 800f3b0:	68bb      	ldr	r3, [r7, #8]
 800f3b2:	785b      	ldrb	r3, [r3, #1]
 800f3b4:	2b01      	cmp	r3, #1
 800f3b6:	d117      	bne.n	800f3e8 <HAL_PCD_EP_DB_Transmit+0x4c8>
 800f3b8:	68fb      	ldr	r3, [r7, #12]
 800f3ba:	681b      	ldr	r3, [r3, #0]
 800f3bc:	667b      	str	r3, [r7, #100]	@ 0x64
 800f3be:	68fb      	ldr	r3, [r7, #12]
 800f3c0:	681b      	ldr	r3, [r3, #0]
 800f3c2:	2250      	movs	r2, #80	@ 0x50
 800f3c4:	5a9b      	ldrh	r3, [r3, r2]
 800f3c6:	b29b      	uxth	r3, r3
 800f3c8:	001a      	movs	r2, r3
 800f3ca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f3cc:	189b      	adds	r3, r3, r2
 800f3ce:	667b      	str	r3, [r7, #100]	@ 0x64
 800f3d0:	68bb      	ldr	r3, [r7, #8]
 800f3d2:	781b      	ldrb	r3, [r3, #0]
 800f3d4:	00da      	lsls	r2, r3, #3
 800f3d6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f3d8:	18d3      	adds	r3, r2, r3
 800f3da:	4a9a      	ldr	r2, [pc, #616]	@ (800f644 <HAL_PCD_EP_DB_Transmit+0x724>)
 800f3dc:	4694      	mov	ip, r2
 800f3de:	4463      	add	r3, ip
 800f3e0:	663b      	str	r3, [r7, #96]	@ 0x60
 800f3e2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f3e4:	2200      	movs	r2, #0
 800f3e6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800f3e8:	68fb      	ldr	r3, [r7, #12]
 800f3ea:	681b      	ldr	r3, [r3, #0]
 800f3ec:	677b      	str	r3, [r7, #116]	@ 0x74
 800f3ee:	68bb      	ldr	r3, [r7, #8]
 800f3f0:	785b      	ldrb	r3, [r3, #1]
 800f3f2:	2b00      	cmp	r3, #0
 800f3f4:	d12b      	bne.n	800f44e <HAL_PCD_EP_DB_Transmit+0x52e>
 800f3f6:	68fb      	ldr	r3, [r7, #12]
 800f3f8:	681b      	ldr	r3, [r3, #0]
 800f3fa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800f3fc:	68fb      	ldr	r3, [r7, #12]
 800f3fe:	681b      	ldr	r3, [r3, #0]
 800f400:	2250      	movs	r2, #80	@ 0x50
 800f402:	5a9b      	ldrh	r3, [r3, r2]
 800f404:	b29b      	uxth	r3, r3
 800f406:	001a      	movs	r2, r3
 800f408:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f40a:	189b      	adds	r3, r3, r2
 800f40c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800f40e:	68bb      	ldr	r3, [r7, #8]
 800f410:	781b      	ldrb	r3, [r3, #0]
 800f412:	00da      	lsls	r2, r3, #3
 800f414:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f416:	18d3      	adds	r3, r2, r3
 800f418:	4a8b      	ldr	r2, [pc, #556]	@ (800f648 <HAL_PCD_EP_DB_Transmit+0x728>)
 800f41a:	4694      	mov	ip, r2
 800f41c:	4463      	add	r3, ip
 800f41e:	2180      	movs	r1, #128	@ 0x80
 800f420:	187a      	adds	r2, r7, r1
 800f422:	6013      	str	r3, [r2, #0]
 800f424:	187b      	adds	r3, r7, r1
 800f426:	681b      	ldr	r3, [r3, #0]
 800f428:	881b      	ldrh	r3, [r3, #0]
 800f42a:	b29b      	uxth	r3, r3
 800f42c:	059b      	lsls	r3, r3, #22
 800f42e:	0d9b      	lsrs	r3, r3, #22
 800f430:	b29a      	uxth	r2, r3
 800f432:	187b      	adds	r3, r7, r1
 800f434:	681b      	ldr	r3, [r3, #0]
 800f436:	801a      	strh	r2, [r3, #0]
 800f438:	187b      	adds	r3, r7, r1
 800f43a:	681b      	ldr	r3, [r3, #0]
 800f43c:	881b      	ldrh	r3, [r3, #0]
 800f43e:	b29b      	uxth	r3, r3
 800f440:	4a82      	ldr	r2, [pc, #520]	@ (800f64c <HAL_PCD_EP_DB_Transmit+0x72c>)
 800f442:	4313      	orrs	r3, r2
 800f444:	b29a      	uxth	r2, r3
 800f446:	187b      	adds	r3, r7, r1
 800f448:	681b      	ldr	r3, [r3, #0]
 800f44a:	801a      	strh	r2, [r3, #0]
 800f44c:	e018      	b.n	800f480 <HAL_PCD_EP_DB_Transmit+0x560>
 800f44e:	68bb      	ldr	r3, [r7, #8]
 800f450:	785b      	ldrb	r3, [r3, #1]
 800f452:	2b01      	cmp	r3, #1
 800f454:	d114      	bne.n	800f480 <HAL_PCD_EP_DB_Transmit+0x560>
 800f456:	68fb      	ldr	r3, [r7, #12]
 800f458:	681b      	ldr	r3, [r3, #0]
 800f45a:	2250      	movs	r2, #80	@ 0x50
 800f45c:	5a9b      	ldrh	r3, [r3, r2]
 800f45e:	b29b      	uxth	r3, r3
 800f460:	001a      	movs	r2, r3
 800f462:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800f464:	189b      	adds	r3, r3, r2
 800f466:	677b      	str	r3, [r7, #116]	@ 0x74
 800f468:	68bb      	ldr	r3, [r7, #8]
 800f46a:	781b      	ldrb	r3, [r3, #0]
 800f46c:	00da      	lsls	r2, r3, #3
 800f46e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800f470:	18d3      	adds	r3, r2, r3
 800f472:	4a75      	ldr	r2, [pc, #468]	@ (800f648 <HAL_PCD_EP_DB_Transmit+0x728>)
 800f474:	4694      	mov	ip, r2
 800f476:	4463      	add	r3, ip
 800f478:	673b      	str	r3, [r7, #112]	@ 0x70
 800f47a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800f47c:	2200      	movs	r2, #0
 800f47e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800f480:	68bb      	ldr	r3, [r7, #8]
 800f482:	781a      	ldrb	r2, [r3, #0]
 800f484:	68fb      	ldr	r3, [r7, #12]
 800f486:	0011      	movs	r1, r2
 800f488:	0018      	movs	r0, r3
 800f48a:	f007 fc05 	bl	8016c98 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800f48e:	1dbb      	adds	r3, r7, #6
 800f490:	881a      	ldrh	r2, [r3, #0]
 800f492:	2380      	movs	r3, #128	@ 0x80
 800f494:	01db      	lsls	r3, r3, #7
 800f496:	4013      	ands	r3, r2
 800f498:	d000      	beq.n	800f49c <HAL_PCD_EP_DB_Transmit+0x57c>
 800f49a:	e11e      	b.n	800f6da <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800f49c:	68fb      	ldr	r3, [r7, #12]
 800f49e:	681b      	ldr	r3, [r3, #0]
 800f4a0:	001a      	movs	r2, r3
 800f4a2:	68bb      	ldr	r3, [r7, #8]
 800f4a4:	781b      	ldrb	r3, [r3, #0]
 800f4a6:	009b      	lsls	r3, r3, #2
 800f4a8:	18d3      	adds	r3, r2, r3
 800f4aa:	881b      	ldrh	r3, [r3, #0]
 800f4ac:	b29a      	uxth	r2, r3
 800f4ae:	2088      	movs	r0, #136	@ 0x88
 800f4b0:	183b      	adds	r3, r7, r0
 800f4b2:	4967      	ldr	r1, [pc, #412]	@ (800f650 <HAL_PCD_EP_DB_Transmit+0x730>)
 800f4b4:	400a      	ands	r2, r1
 800f4b6:	801a      	strh	r2, [r3, #0]
 800f4b8:	68fb      	ldr	r3, [r7, #12]
 800f4ba:	681b      	ldr	r3, [r3, #0]
 800f4bc:	001a      	movs	r2, r3
 800f4be:	68bb      	ldr	r3, [r7, #8]
 800f4c0:	781b      	ldrb	r3, [r3, #0]
 800f4c2:	009b      	lsls	r3, r3, #2
 800f4c4:	18d3      	adds	r3, r2, r3
 800f4c6:	183a      	adds	r2, r7, r0
 800f4c8:	8812      	ldrh	r2, [r2, #0]
 800f4ca:	4962      	ldr	r1, [pc, #392]	@ (800f654 <HAL_PCD_EP_DB_Transmit+0x734>)
 800f4cc:	430a      	orrs	r2, r1
 800f4ce:	b292      	uxth	r2, r2
 800f4d0:	801a      	strh	r2, [r3, #0]
 800f4d2:	e102      	b.n	800f6da <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800f4d4:	1dbb      	adds	r3, r7, #6
 800f4d6:	881a      	ldrh	r2, [r3, #0]
 800f4d8:	2380      	movs	r3, #128	@ 0x80
 800f4da:	01db      	lsls	r3, r3, #7
 800f4dc:	4013      	ands	r3, r2
 800f4de:	d11a      	bne.n	800f516 <HAL_PCD_EP_DB_Transmit+0x5f6>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800f4e0:	68fb      	ldr	r3, [r7, #12]
 800f4e2:	681b      	ldr	r3, [r3, #0]
 800f4e4:	001a      	movs	r2, r3
 800f4e6:	68bb      	ldr	r3, [r7, #8]
 800f4e8:	781b      	ldrb	r3, [r3, #0]
 800f4ea:	009b      	lsls	r3, r3, #2
 800f4ec:	18d3      	adds	r3, r2, r3
 800f4ee:	881b      	ldrh	r3, [r3, #0]
 800f4f0:	b29a      	uxth	r2, r3
 800f4f2:	204e      	movs	r0, #78	@ 0x4e
 800f4f4:	183b      	adds	r3, r7, r0
 800f4f6:	4956      	ldr	r1, [pc, #344]	@ (800f650 <HAL_PCD_EP_DB_Transmit+0x730>)
 800f4f8:	400a      	ands	r2, r1
 800f4fa:	801a      	strh	r2, [r3, #0]
 800f4fc:	68fb      	ldr	r3, [r7, #12]
 800f4fe:	681b      	ldr	r3, [r3, #0]
 800f500:	001a      	movs	r2, r3
 800f502:	68bb      	ldr	r3, [r7, #8]
 800f504:	781b      	ldrb	r3, [r3, #0]
 800f506:	009b      	lsls	r3, r3, #2
 800f508:	18d3      	adds	r3, r2, r3
 800f50a:	183a      	adds	r2, r7, r0
 800f50c:	8812      	ldrh	r2, [r2, #0]
 800f50e:	4951      	ldr	r1, [pc, #324]	@ (800f654 <HAL_PCD_EP_DB_Transmit+0x734>)
 800f510:	430a      	orrs	r2, r1
 800f512:	b292      	uxth	r2, r2
 800f514:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800f516:	68bb      	ldr	r3, [r7, #8]
 800f518:	2224      	movs	r2, #36	@ 0x24
 800f51a:	5c9b      	ldrb	r3, [r3, r2]
 800f51c:	2b01      	cmp	r3, #1
 800f51e:	d000      	beq.n	800f522 <HAL_PCD_EP_DB_Transmit+0x602>
 800f520:	e0db      	b.n	800f6da <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 800f522:	68bb      	ldr	r3, [r7, #8]
 800f524:	695a      	ldr	r2, [r3, #20]
 800f526:	2186      	movs	r1, #134	@ 0x86
 800f528:	187b      	adds	r3, r7, r1
 800f52a:	881b      	ldrh	r3, [r3, #0]
 800f52c:	18d2      	adds	r2, r2, r3
 800f52e:	68bb      	ldr	r3, [r7, #8]
 800f530:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800f532:	68bb      	ldr	r3, [r7, #8]
 800f534:	69da      	ldr	r2, [r3, #28]
 800f536:	187b      	adds	r3, r7, r1
 800f538:	881b      	ldrh	r3, [r3, #0]
 800f53a:	18d2      	adds	r2, r2, r3
 800f53c:	68bb      	ldr	r3, [r7, #8]
 800f53e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800f540:	68bb      	ldr	r3, [r7, #8]
 800f542:	6a1a      	ldr	r2, [r3, #32]
 800f544:	68bb      	ldr	r3, [r7, #8]
 800f546:	691b      	ldr	r3, [r3, #16]
 800f548:	429a      	cmp	r2, r3
 800f54a:	d30c      	bcc.n	800f566 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 800f54c:	68bb      	ldr	r3, [r7, #8]
 800f54e:	691b      	ldr	r3, [r3, #16]
 800f550:	218c      	movs	r1, #140	@ 0x8c
 800f552:	187a      	adds	r2, r7, r1
 800f554:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 800f556:	68bb      	ldr	r3, [r7, #8]
 800f558:	6a1a      	ldr	r2, [r3, #32]
 800f55a:	187b      	adds	r3, r7, r1
 800f55c:	681b      	ldr	r3, [r3, #0]
 800f55e:	1ad2      	subs	r2, r2, r3
 800f560:	68bb      	ldr	r3, [r7, #8]
 800f562:	621a      	str	r2, [r3, #32]
 800f564:	e01a      	b.n	800f59c <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else if (ep->xfer_len_db == 0U)
 800f566:	68bb      	ldr	r3, [r7, #8]
 800f568:	6a1b      	ldr	r3, [r3, #32]
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	d10a      	bne.n	800f584 <HAL_PCD_EP_DB_Transmit+0x664>
        {
          len = TxPctSize;
 800f56e:	2386      	movs	r3, #134	@ 0x86
 800f570:	18fb      	adds	r3, r7, r3
 800f572:	881b      	ldrh	r3, [r3, #0]
 800f574:	228c      	movs	r2, #140	@ 0x8c
 800f576:	18ba      	adds	r2, r7, r2
 800f578:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 800f57a:	68bb      	ldr	r3, [r7, #8]
 800f57c:	2224      	movs	r2, #36	@ 0x24
 800f57e:	2100      	movs	r1, #0
 800f580:	5499      	strb	r1, [r3, r2]
 800f582:	e00b      	b.n	800f59c <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else
        {
          len = ep->xfer_len_db;
 800f584:	68bb      	ldr	r3, [r7, #8]
 800f586:	6a1b      	ldr	r3, [r3, #32]
 800f588:	228c      	movs	r2, #140	@ 0x8c
 800f58a:	18ba      	adds	r2, r7, r2
 800f58c:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 800f58e:	68bb      	ldr	r3, [r7, #8]
 800f590:	2200      	movs	r2, #0
 800f592:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800f594:	68bb      	ldr	r3, [r7, #8]
 800f596:	2224      	movs	r2, #36	@ 0x24
 800f598:	2100      	movs	r1, #0
 800f59a:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800f59c:	68fb      	ldr	r3, [r7, #12]
 800f59e:	681b      	ldr	r3, [r3, #0]
 800f5a0:	657b      	str	r3, [r7, #84]	@ 0x54
 800f5a2:	68bb      	ldr	r3, [r7, #8]
 800f5a4:	785b      	ldrb	r3, [r3, #1]
 800f5a6:	2b00      	cmp	r3, #0
 800f5a8:	d000      	beq.n	800f5ac <HAL_PCD_EP_DB_Transmit+0x68c>
 800f5aa:	e06e      	b.n	800f68a <HAL_PCD_EP_DB_Transmit+0x76a>
 800f5ac:	68fb      	ldr	r3, [r7, #12]
 800f5ae:	681b      	ldr	r3, [r3, #0]
 800f5b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800f5b2:	68fb      	ldr	r3, [r7, #12]
 800f5b4:	681b      	ldr	r3, [r3, #0]
 800f5b6:	2250      	movs	r2, #80	@ 0x50
 800f5b8:	5a9b      	ldrh	r3, [r3, r2]
 800f5ba:	b29b      	uxth	r3, r3
 800f5bc:	001a      	movs	r2, r3
 800f5be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f5c0:	189b      	adds	r3, r3, r2
 800f5c2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800f5c4:	68bb      	ldr	r3, [r7, #8]
 800f5c6:	781b      	ldrb	r3, [r3, #0]
 800f5c8:	00da      	lsls	r2, r3, #3
 800f5ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f5cc:	18d3      	adds	r3, r2, r3
 800f5ce:	4a1e      	ldr	r2, [pc, #120]	@ (800f648 <HAL_PCD_EP_DB_Transmit+0x728>)
 800f5d0:	4694      	mov	ip, r2
 800f5d2:	4463      	add	r3, ip
 800f5d4:	65bb      	str	r3, [r7, #88]	@ 0x58
 800f5d6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f5d8:	881b      	ldrh	r3, [r3, #0]
 800f5da:	b29b      	uxth	r3, r3
 800f5dc:	059b      	lsls	r3, r3, #22
 800f5de:	0d9b      	lsrs	r3, r3, #22
 800f5e0:	b29a      	uxth	r2, r3
 800f5e2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f5e4:	801a      	strh	r2, [r3, #0]
 800f5e6:	228c      	movs	r2, #140	@ 0x8c
 800f5e8:	18bb      	adds	r3, r7, r2
 800f5ea:	681b      	ldr	r3, [r3, #0]
 800f5ec:	2b3e      	cmp	r3, #62	@ 0x3e
 800f5ee:	d91a      	bls.n	800f626 <HAL_PCD_EP_DB_Transmit+0x706>
 800f5f0:	18bb      	adds	r3, r7, r2
 800f5f2:	681b      	ldr	r3, [r3, #0]
 800f5f4:	095b      	lsrs	r3, r3, #5
 800f5f6:	66bb      	str	r3, [r7, #104]	@ 0x68
 800f5f8:	18bb      	adds	r3, r7, r2
 800f5fa:	681b      	ldr	r3, [r3, #0]
 800f5fc:	221f      	movs	r2, #31
 800f5fe:	4013      	ands	r3, r2
 800f600:	d102      	bne.n	800f608 <HAL_PCD_EP_DB_Transmit+0x6e8>
 800f602:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800f604:	3b01      	subs	r3, #1
 800f606:	66bb      	str	r3, [r7, #104]	@ 0x68
 800f608:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f60a:	881b      	ldrh	r3, [r3, #0]
 800f60c:	b29a      	uxth	r2, r3
 800f60e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800f610:	b29b      	uxth	r3, r3
 800f612:	029b      	lsls	r3, r3, #10
 800f614:	b29b      	uxth	r3, r3
 800f616:	4313      	orrs	r3, r2
 800f618:	b29b      	uxth	r3, r3
 800f61a:	4a0c      	ldr	r2, [pc, #48]	@ (800f64c <HAL_PCD_EP_DB_Transmit+0x72c>)
 800f61c:	4313      	orrs	r3, r2
 800f61e:	b29a      	uxth	r2, r3
 800f620:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f622:	801a      	strh	r2, [r3, #0]
 800f624:	e04d      	b.n	800f6c2 <HAL_PCD_EP_DB_Transmit+0x7a2>
 800f626:	238c      	movs	r3, #140	@ 0x8c
 800f628:	18fb      	adds	r3, r7, r3
 800f62a:	681b      	ldr	r3, [r3, #0]
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	d113      	bne.n	800f658 <HAL_PCD_EP_DB_Transmit+0x738>
 800f630:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f632:	881b      	ldrh	r3, [r3, #0]
 800f634:	b29b      	uxth	r3, r3
 800f636:	4a05      	ldr	r2, [pc, #20]	@ (800f64c <HAL_PCD_EP_DB_Transmit+0x72c>)
 800f638:	4313      	orrs	r3, r2
 800f63a:	b29a      	uxth	r2, r3
 800f63c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f63e:	801a      	strh	r2, [r3, #0]
 800f640:	e03f      	b.n	800f6c2 <HAL_PCD_EP_DB_Transmit+0x7a2>
 800f642:	46c0      	nop			@ (mov r8, r8)
 800f644:	00000402 	.word	0x00000402
 800f648:	00000406 	.word	0x00000406
 800f64c:	ffff8000 	.word	0xffff8000
 800f650:	ffff8f8f 	.word	0xffff8f8f
 800f654:	ffffc080 	.word	0xffffc080
 800f658:	228c      	movs	r2, #140	@ 0x8c
 800f65a:	18bb      	adds	r3, r7, r2
 800f65c:	681b      	ldr	r3, [r3, #0]
 800f65e:	085b      	lsrs	r3, r3, #1
 800f660:	66bb      	str	r3, [r7, #104]	@ 0x68
 800f662:	18bb      	adds	r3, r7, r2
 800f664:	681b      	ldr	r3, [r3, #0]
 800f666:	2201      	movs	r2, #1
 800f668:	4013      	ands	r3, r2
 800f66a:	d002      	beq.n	800f672 <HAL_PCD_EP_DB_Transmit+0x752>
 800f66c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800f66e:	3301      	adds	r3, #1
 800f670:	66bb      	str	r3, [r7, #104]	@ 0x68
 800f672:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f674:	881b      	ldrh	r3, [r3, #0]
 800f676:	b29a      	uxth	r2, r3
 800f678:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800f67a:	b29b      	uxth	r3, r3
 800f67c:	029b      	lsls	r3, r3, #10
 800f67e:	b29b      	uxth	r3, r3
 800f680:	4313      	orrs	r3, r2
 800f682:	b29a      	uxth	r2, r3
 800f684:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f686:	801a      	strh	r2, [r3, #0]
 800f688:	e01b      	b.n	800f6c2 <HAL_PCD_EP_DB_Transmit+0x7a2>
 800f68a:	68bb      	ldr	r3, [r7, #8]
 800f68c:	785b      	ldrb	r3, [r3, #1]
 800f68e:	2b01      	cmp	r3, #1
 800f690:	d117      	bne.n	800f6c2 <HAL_PCD_EP_DB_Transmit+0x7a2>
 800f692:	68fb      	ldr	r3, [r7, #12]
 800f694:	681b      	ldr	r3, [r3, #0]
 800f696:	2250      	movs	r2, #80	@ 0x50
 800f698:	5a9b      	ldrh	r3, [r3, r2]
 800f69a:	b29b      	uxth	r3, r3
 800f69c:	001a      	movs	r2, r3
 800f69e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f6a0:	189b      	adds	r3, r3, r2
 800f6a2:	657b      	str	r3, [r7, #84]	@ 0x54
 800f6a4:	68bb      	ldr	r3, [r7, #8]
 800f6a6:	781b      	ldrb	r3, [r3, #0]
 800f6a8:	00da      	lsls	r2, r3, #3
 800f6aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f6ac:	18d3      	adds	r3, r2, r3
 800f6ae:	4a21      	ldr	r2, [pc, #132]	@ (800f734 <HAL_PCD_EP_DB_Transmit+0x814>)
 800f6b0:	4694      	mov	ip, r2
 800f6b2:	4463      	add	r3, ip
 800f6b4:	653b      	str	r3, [r7, #80]	@ 0x50
 800f6b6:	238c      	movs	r3, #140	@ 0x8c
 800f6b8:	18fb      	adds	r3, r7, r3
 800f6ba:	681b      	ldr	r3, [r3, #0]
 800f6bc:	b29a      	uxth	r2, r3
 800f6be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f6c0:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800f6c2:	68fb      	ldr	r3, [r7, #12]
 800f6c4:	6818      	ldr	r0, [r3, #0]
 800f6c6:	68bb      	ldr	r3, [r7, #8]
 800f6c8:	6959      	ldr	r1, [r3, #20]
 800f6ca:	68bb      	ldr	r3, [r7, #8]
 800f6cc:	895a      	ldrh	r2, [r3, #10]
 800f6ce:	238c      	movs	r3, #140	@ 0x8c
 800f6d0:	18fb      	adds	r3, r7, r3
 800f6d2:	681b      	ldr	r3, [r3, #0]
 800f6d4:	b29b      	uxth	r3, r3
 800f6d6:	f005 fa5b 	bl	8014b90 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800f6da:	68fb      	ldr	r3, [r7, #12]
 800f6dc:	681b      	ldr	r3, [r3, #0]
 800f6de:	001a      	movs	r2, r3
 800f6e0:	68bb      	ldr	r3, [r7, #8]
 800f6e2:	781b      	ldrb	r3, [r3, #0]
 800f6e4:	009b      	lsls	r3, r3, #2
 800f6e6:	18d3      	adds	r3, r2, r3
 800f6e8:	881b      	ldrh	r3, [r3, #0]
 800f6ea:	b29a      	uxth	r2, r3
 800f6ec:	2014      	movs	r0, #20
 800f6ee:	183b      	adds	r3, r7, r0
 800f6f0:	4911      	ldr	r1, [pc, #68]	@ (800f738 <HAL_PCD_EP_DB_Transmit+0x818>)
 800f6f2:	400a      	ands	r2, r1
 800f6f4:	801a      	strh	r2, [r3, #0]
 800f6f6:	183b      	adds	r3, r7, r0
 800f6f8:	183a      	adds	r2, r7, r0
 800f6fa:	8812      	ldrh	r2, [r2, #0]
 800f6fc:	2110      	movs	r1, #16
 800f6fe:	404a      	eors	r2, r1
 800f700:	801a      	strh	r2, [r3, #0]
 800f702:	183b      	adds	r3, r7, r0
 800f704:	183a      	adds	r2, r7, r0
 800f706:	8812      	ldrh	r2, [r2, #0]
 800f708:	2120      	movs	r1, #32
 800f70a:	404a      	eors	r2, r1
 800f70c:	801a      	strh	r2, [r3, #0]
 800f70e:	68fb      	ldr	r3, [r7, #12]
 800f710:	681b      	ldr	r3, [r3, #0]
 800f712:	001a      	movs	r2, r3
 800f714:	68bb      	ldr	r3, [r7, #8]
 800f716:	781b      	ldrb	r3, [r3, #0]
 800f718:	009b      	lsls	r3, r3, #2
 800f71a:	18d3      	adds	r3, r2, r3
 800f71c:	183a      	adds	r2, r7, r0
 800f71e:	8812      	ldrh	r2, [r2, #0]
 800f720:	4906      	ldr	r1, [pc, #24]	@ (800f73c <HAL_PCD_EP_DB_Transmit+0x81c>)
 800f722:	430a      	orrs	r2, r1
 800f724:	b292      	uxth	r2, r2
 800f726:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 800f728:	2300      	movs	r3, #0
}
 800f72a:	0018      	movs	r0, r3
 800f72c:	46bd      	mov	sp, r7
 800f72e:	b024      	add	sp, #144	@ 0x90
 800f730:	bd80      	pop	{r7, pc}
 800f732:	46c0      	nop			@ (mov r8, r8)
 800f734:	00000406 	.word	0x00000406
 800f738:	ffff8fbf 	.word	0xffff8fbf
 800f73c:	ffff8080 	.word	0xffff8080

0800f740 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800f740:	b590      	push	{r4, r7, lr}
 800f742:	b087      	sub	sp, #28
 800f744:	af00      	add	r7, sp, #0
 800f746:	60f8      	str	r0, [r7, #12]
 800f748:	0008      	movs	r0, r1
 800f74a:	0011      	movs	r1, r2
 800f74c:	607b      	str	r3, [r7, #4]
 800f74e:	240a      	movs	r4, #10
 800f750:	193b      	adds	r3, r7, r4
 800f752:	1c02      	adds	r2, r0, #0
 800f754:	801a      	strh	r2, [r3, #0]
 800f756:	2308      	movs	r3, #8
 800f758:	18fb      	adds	r3, r7, r3
 800f75a:	1c0a      	adds	r2, r1, #0
 800f75c:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800f75e:	0021      	movs	r1, r4
 800f760:	187b      	adds	r3, r7, r1
 800f762:	881b      	ldrh	r3, [r3, #0]
 800f764:	2280      	movs	r2, #128	@ 0x80
 800f766:	4013      	ands	r3, r2
 800f768:	b29b      	uxth	r3, r3
 800f76a:	2b00      	cmp	r3, #0
 800f76c:	d00c      	beq.n	800f788 <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800f76e:	187b      	adds	r3, r7, r1
 800f770:	881b      	ldrh	r3, [r3, #0]
 800f772:	2207      	movs	r2, #7
 800f774:	4013      	ands	r3, r2
 800f776:	1c5a      	adds	r2, r3, #1
 800f778:	0013      	movs	r3, r2
 800f77a:	009b      	lsls	r3, r3, #2
 800f77c:	189b      	adds	r3, r3, r2
 800f77e:	00db      	lsls	r3, r3, #3
 800f780:	68fa      	ldr	r2, [r7, #12]
 800f782:	18d3      	adds	r3, r2, r3
 800f784:	617b      	str	r3, [r7, #20]
 800f786:	e00b      	b.n	800f7a0 <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800f788:	230a      	movs	r3, #10
 800f78a:	18fb      	adds	r3, r7, r3
 800f78c:	881a      	ldrh	r2, [r3, #0]
 800f78e:	0013      	movs	r3, r2
 800f790:	009b      	lsls	r3, r3, #2
 800f792:	189b      	adds	r3, r3, r2
 800f794:	00db      	lsls	r3, r3, #3
 800f796:	3369      	adds	r3, #105	@ 0x69
 800f798:	33ff      	adds	r3, #255	@ 0xff
 800f79a:	68fa      	ldr	r2, [r7, #12]
 800f79c:	18d3      	adds	r3, r2, r3
 800f79e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800f7a0:	2308      	movs	r3, #8
 800f7a2:	18fb      	adds	r3, r7, r3
 800f7a4:	881b      	ldrh	r3, [r3, #0]
 800f7a6:	2b00      	cmp	r3, #0
 800f7a8:	d107      	bne.n	800f7ba <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800f7aa:	697b      	ldr	r3, [r7, #20]
 800f7ac:	2200      	movs	r2, #0
 800f7ae:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	b29a      	uxth	r2, r3
 800f7b4:	697b      	ldr	r3, [r7, #20]
 800f7b6:	80da      	strh	r2, [r3, #6]
 800f7b8:	e00b      	b.n	800f7d2 <HAL_PCDEx_PMAConfig+0x92>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800f7ba:	697b      	ldr	r3, [r7, #20]
 800f7bc:	2201      	movs	r2, #1
 800f7be:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	b29a      	uxth	r2, r3
 800f7c4:	697b      	ldr	r3, [r7, #20]
 800f7c6:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	0c1b      	lsrs	r3, r3, #16
 800f7cc:	b29a      	uxth	r2, r3
 800f7ce:	697b      	ldr	r3, [r7, #20]
 800f7d0:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800f7d2:	2300      	movs	r3, #0
}
 800f7d4:	0018      	movs	r0, r3
 800f7d6:	46bd      	mov	sp, r7
 800f7d8:	b007      	add	sp, #28
 800f7da:	bd90      	pop	{r4, r7, pc}

0800f7dc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800f7dc:	b580      	push	{r7, lr}
 800f7de:	b084      	sub	sp, #16
 800f7e0:	af00      	add	r7, sp, #0
 800f7e2:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	681b      	ldr	r3, [r3, #0]
 800f7e8:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800f7ea:	687a      	ldr	r2, [r7, #4]
 800f7ec:	23ba      	movs	r3, #186	@ 0xba
 800f7ee:	009b      	lsls	r3, r3, #2
 800f7f0:	2101      	movs	r1, #1
 800f7f2:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 800f7f4:	687a      	ldr	r2, [r7, #4]
 800f7f6:	23b8      	movs	r3, #184	@ 0xb8
 800f7f8:	009b      	lsls	r3, r3, #2
 800f7fa:	2100      	movs	r1, #0
 800f7fc:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800f7fe:	68fb      	ldr	r3, [r7, #12]
 800f800:	2254      	movs	r2, #84	@ 0x54
 800f802:	5a9b      	ldrh	r3, [r3, r2]
 800f804:	b29b      	uxth	r3, r3
 800f806:	2201      	movs	r2, #1
 800f808:	4313      	orrs	r3, r2
 800f80a:	b299      	uxth	r1, r3
 800f80c:	68fb      	ldr	r3, [r7, #12]
 800f80e:	2254      	movs	r2, #84	@ 0x54
 800f810:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800f812:	68fb      	ldr	r3, [r7, #12]
 800f814:	2254      	movs	r2, #84	@ 0x54
 800f816:	5a9b      	ldrh	r3, [r3, r2]
 800f818:	b29b      	uxth	r3, r3
 800f81a:	2202      	movs	r2, #2
 800f81c:	4313      	orrs	r3, r2
 800f81e:	b299      	uxth	r1, r3
 800f820:	68fb      	ldr	r3, [r7, #12]
 800f822:	2254      	movs	r2, #84	@ 0x54
 800f824:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800f826:	2300      	movs	r3, #0
}
 800f828:	0018      	movs	r0, r3
 800f82a:	46bd      	mov	sp, r7
 800f82c:	b004      	add	sp, #16
 800f82e:	bd80      	pop	{r7, pc}

0800f830 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800f830:	b580      	push	{r7, lr}
 800f832:	b082      	sub	sp, #8
 800f834:	af00      	add	r7, sp, #0
 800f836:	6078      	str	r0, [r7, #4]
 800f838:	000a      	movs	r2, r1
 800f83a:	1cfb      	adds	r3, r7, #3
 800f83c:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800f83e:	46c0      	nop			@ (mov r8, r8)
 800f840:	46bd      	mov	sp, r7
 800f842:	b002      	add	sp, #8
 800f844:	bd80      	pop	{r7, pc}
	...

0800f848 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800f848:	b580      	push	{r7, lr}
 800f84a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 800f84c:	4b04      	ldr	r3, [pc, #16]	@ (800f860 <HAL_PWR_EnableBkUpAccess+0x18>)
 800f84e:	681a      	ldr	r2, [r3, #0]
 800f850:	4b03      	ldr	r3, [pc, #12]	@ (800f860 <HAL_PWR_EnableBkUpAccess+0x18>)
 800f852:	2180      	movs	r1, #128	@ 0x80
 800f854:	0049      	lsls	r1, r1, #1
 800f856:	430a      	orrs	r2, r1
 800f858:	601a      	str	r2, [r3, #0]
}
 800f85a:	46c0      	nop			@ (mov r8, r8)
 800f85c:	46bd      	mov	sp, r7
 800f85e:	bd80      	pop	{r7, pc}
 800f860:	40007000 	.word	0x40007000

0800f864 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800f864:	b5b0      	push	{r4, r5, r7, lr}
 800f866:	b08a      	sub	sp, #40	@ 0x28
 800f868:	af00      	add	r7, sp, #0
 800f86a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	2b00      	cmp	r3, #0
 800f870:	d102      	bne.n	800f878 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800f872:	2301      	movs	r3, #1
 800f874:	f000 fbbf 	bl	800fff6 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800f878:	4bc9      	ldr	r3, [pc, #804]	@ (800fba0 <HAL_RCC_OscConfig+0x33c>)
 800f87a:	68db      	ldr	r3, [r3, #12]
 800f87c:	220c      	movs	r2, #12
 800f87e:	4013      	ands	r3, r2
 800f880:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800f882:	4bc7      	ldr	r3, [pc, #796]	@ (800fba0 <HAL_RCC_OscConfig+0x33c>)
 800f884:	68da      	ldr	r2, [r3, #12]
 800f886:	2380      	movs	r3, #128	@ 0x80
 800f888:	025b      	lsls	r3, r3, #9
 800f88a:	4013      	ands	r3, r2
 800f88c:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	681b      	ldr	r3, [r3, #0]
 800f892:	2201      	movs	r2, #1
 800f894:	4013      	ands	r3, r2
 800f896:	d100      	bne.n	800f89a <HAL_RCC_OscConfig+0x36>
 800f898:	e07e      	b.n	800f998 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800f89a:	69fb      	ldr	r3, [r7, #28]
 800f89c:	2b08      	cmp	r3, #8
 800f89e:	d007      	beq.n	800f8b0 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800f8a0:	69fb      	ldr	r3, [r7, #28]
 800f8a2:	2b0c      	cmp	r3, #12
 800f8a4:	d112      	bne.n	800f8cc <HAL_RCC_OscConfig+0x68>
 800f8a6:	69ba      	ldr	r2, [r7, #24]
 800f8a8:	2380      	movs	r3, #128	@ 0x80
 800f8aa:	025b      	lsls	r3, r3, #9
 800f8ac:	429a      	cmp	r2, r3
 800f8ae:	d10d      	bne.n	800f8cc <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800f8b0:	4bbb      	ldr	r3, [pc, #748]	@ (800fba0 <HAL_RCC_OscConfig+0x33c>)
 800f8b2:	681a      	ldr	r2, [r3, #0]
 800f8b4:	2380      	movs	r3, #128	@ 0x80
 800f8b6:	029b      	lsls	r3, r3, #10
 800f8b8:	4013      	ands	r3, r2
 800f8ba:	d100      	bne.n	800f8be <HAL_RCC_OscConfig+0x5a>
 800f8bc:	e06b      	b.n	800f996 <HAL_RCC_OscConfig+0x132>
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	685b      	ldr	r3, [r3, #4]
 800f8c2:	2b00      	cmp	r3, #0
 800f8c4:	d167      	bne.n	800f996 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800f8c6:	2301      	movs	r3, #1
 800f8c8:	f000 fb95 	bl	800fff6 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	685a      	ldr	r2, [r3, #4]
 800f8d0:	2380      	movs	r3, #128	@ 0x80
 800f8d2:	025b      	lsls	r3, r3, #9
 800f8d4:	429a      	cmp	r2, r3
 800f8d6:	d107      	bne.n	800f8e8 <HAL_RCC_OscConfig+0x84>
 800f8d8:	4bb1      	ldr	r3, [pc, #708]	@ (800fba0 <HAL_RCC_OscConfig+0x33c>)
 800f8da:	681a      	ldr	r2, [r3, #0]
 800f8dc:	4bb0      	ldr	r3, [pc, #704]	@ (800fba0 <HAL_RCC_OscConfig+0x33c>)
 800f8de:	2180      	movs	r1, #128	@ 0x80
 800f8e0:	0249      	lsls	r1, r1, #9
 800f8e2:	430a      	orrs	r2, r1
 800f8e4:	601a      	str	r2, [r3, #0]
 800f8e6:	e027      	b.n	800f938 <HAL_RCC_OscConfig+0xd4>
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	685a      	ldr	r2, [r3, #4]
 800f8ec:	23a0      	movs	r3, #160	@ 0xa0
 800f8ee:	02db      	lsls	r3, r3, #11
 800f8f0:	429a      	cmp	r2, r3
 800f8f2:	d10e      	bne.n	800f912 <HAL_RCC_OscConfig+0xae>
 800f8f4:	4baa      	ldr	r3, [pc, #680]	@ (800fba0 <HAL_RCC_OscConfig+0x33c>)
 800f8f6:	681a      	ldr	r2, [r3, #0]
 800f8f8:	4ba9      	ldr	r3, [pc, #676]	@ (800fba0 <HAL_RCC_OscConfig+0x33c>)
 800f8fa:	2180      	movs	r1, #128	@ 0x80
 800f8fc:	02c9      	lsls	r1, r1, #11
 800f8fe:	430a      	orrs	r2, r1
 800f900:	601a      	str	r2, [r3, #0]
 800f902:	4ba7      	ldr	r3, [pc, #668]	@ (800fba0 <HAL_RCC_OscConfig+0x33c>)
 800f904:	681a      	ldr	r2, [r3, #0]
 800f906:	4ba6      	ldr	r3, [pc, #664]	@ (800fba0 <HAL_RCC_OscConfig+0x33c>)
 800f908:	2180      	movs	r1, #128	@ 0x80
 800f90a:	0249      	lsls	r1, r1, #9
 800f90c:	430a      	orrs	r2, r1
 800f90e:	601a      	str	r2, [r3, #0]
 800f910:	e012      	b.n	800f938 <HAL_RCC_OscConfig+0xd4>
 800f912:	4ba3      	ldr	r3, [pc, #652]	@ (800fba0 <HAL_RCC_OscConfig+0x33c>)
 800f914:	681a      	ldr	r2, [r3, #0]
 800f916:	4ba2      	ldr	r3, [pc, #648]	@ (800fba0 <HAL_RCC_OscConfig+0x33c>)
 800f918:	49a2      	ldr	r1, [pc, #648]	@ (800fba4 <HAL_RCC_OscConfig+0x340>)
 800f91a:	400a      	ands	r2, r1
 800f91c:	601a      	str	r2, [r3, #0]
 800f91e:	4ba0      	ldr	r3, [pc, #640]	@ (800fba0 <HAL_RCC_OscConfig+0x33c>)
 800f920:	681a      	ldr	r2, [r3, #0]
 800f922:	2380      	movs	r3, #128	@ 0x80
 800f924:	025b      	lsls	r3, r3, #9
 800f926:	4013      	ands	r3, r2
 800f928:	60fb      	str	r3, [r7, #12]
 800f92a:	68fb      	ldr	r3, [r7, #12]
 800f92c:	4b9c      	ldr	r3, [pc, #624]	@ (800fba0 <HAL_RCC_OscConfig+0x33c>)
 800f92e:	681a      	ldr	r2, [r3, #0]
 800f930:	4b9b      	ldr	r3, [pc, #620]	@ (800fba0 <HAL_RCC_OscConfig+0x33c>)
 800f932:	499d      	ldr	r1, [pc, #628]	@ (800fba8 <HAL_RCC_OscConfig+0x344>)
 800f934:	400a      	ands	r2, r1
 800f936:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	685b      	ldr	r3, [r3, #4]
 800f93c:	2b00      	cmp	r3, #0
 800f93e:	d015      	beq.n	800f96c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f940:	f7fa fa16 	bl	8009d70 <HAL_GetTick>
 800f944:	0003      	movs	r3, r0
 800f946:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800f948:	e009      	b.n	800f95e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800f94a:	f7fa fa11 	bl	8009d70 <HAL_GetTick>
 800f94e:	0002      	movs	r2, r0
 800f950:	697b      	ldr	r3, [r7, #20]
 800f952:	1ad3      	subs	r3, r2, r3
 800f954:	2b64      	cmp	r3, #100	@ 0x64
 800f956:	d902      	bls.n	800f95e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800f958:	2303      	movs	r3, #3
 800f95a:	f000 fb4c 	bl	800fff6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800f95e:	4b90      	ldr	r3, [pc, #576]	@ (800fba0 <HAL_RCC_OscConfig+0x33c>)
 800f960:	681a      	ldr	r2, [r3, #0]
 800f962:	2380      	movs	r3, #128	@ 0x80
 800f964:	029b      	lsls	r3, r3, #10
 800f966:	4013      	ands	r3, r2
 800f968:	d0ef      	beq.n	800f94a <HAL_RCC_OscConfig+0xe6>
 800f96a:	e015      	b.n	800f998 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f96c:	f7fa fa00 	bl	8009d70 <HAL_GetTick>
 800f970:	0003      	movs	r3, r0
 800f972:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800f974:	e008      	b.n	800f988 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800f976:	f7fa f9fb 	bl	8009d70 <HAL_GetTick>
 800f97a:	0002      	movs	r2, r0
 800f97c:	697b      	ldr	r3, [r7, #20]
 800f97e:	1ad3      	subs	r3, r2, r3
 800f980:	2b64      	cmp	r3, #100	@ 0x64
 800f982:	d901      	bls.n	800f988 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 800f984:	2303      	movs	r3, #3
 800f986:	e336      	b.n	800fff6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800f988:	4b85      	ldr	r3, [pc, #532]	@ (800fba0 <HAL_RCC_OscConfig+0x33c>)
 800f98a:	681a      	ldr	r2, [r3, #0]
 800f98c:	2380      	movs	r3, #128	@ 0x80
 800f98e:	029b      	lsls	r3, r3, #10
 800f990:	4013      	ands	r3, r2
 800f992:	d1f0      	bne.n	800f976 <HAL_RCC_OscConfig+0x112>
 800f994:	e000      	b.n	800f998 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800f996:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	681b      	ldr	r3, [r3, #0]
 800f99c:	2202      	movs	r2, #2
 800f99e:	4013      	ands	r3, r2
 800f9a0:	d100      	bne.n	800f9a4 <HAL_RCC_OscConfig+0x140>
 800f9a2:	e099      	b.n	800fad8 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	68db      	ldr	r3, [r3, #12]
 800f9a8:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 800f9aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f9ac:	2220      	movs	r2, #32
 800f9ae:	4013      	ands	r3, r2
 800f9b0:	d009      	beq.n	800f9c6 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 800f9b2:	4b7b      	ldr	r3, [pc, #492]	@ (800fba0 <HAL_RCC_OscConfig+0x33c>)
 800f9b4:	681a      	ldr	r2, [r3, #0]
 800f9b6:	4b7a      	ldr	r3, [pc, #488]	@ (800fba0 <HAL_RCC_OscConfig+0x33c>)
 800f9b8:	2120      	movs	r1, #32
 800f9ba:	430a      	orrs	r2, r1
 800f9bc:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 800f9be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f9c0:	2220      	movs	r2, #32
 800f9c2:	4393      	bics	r3, r2
 800f9c4:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800f9c6:	69fb      	ldr	r3, [r7, #28]
 800f9c8:	2b04      	cmp	r3, #4
 800f9ca:	d005      	beq.n	800f9d8 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800f9cc:	69fb      	ldr	r3, [r7, #28]
 800f9ce:	2b0c      	cmp	r3, #12
 800f9d0:	d13e      	bne.n	800fa50 <HAL_RCC_OscConfig+0x1ec>
 800f9d2:	69bb      	ldr	r3, [r7, #24]
 800f9d4:	2b00      	cmp	r3, #0
 800f9d6:	d13b      	bne.n	800fa50 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800f9d8:	4b71      	ldr	r3, [pc, #452]	@ (800fba0 <HAL_RCC_OscConfig+0x33c>)
 800f9da:	681b      	ldr	r3, [r3, #0]
 800f9dc:	2204      	movs	r2, #4
 800f9de:	4013      	ands	r3, r2
 800f9e0:	d004      	beq.n	800f9ec <HAL_RCC_OscConfig+0x188>
 800f9e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f9e4:	2b00      	cmp	r3, #0
 800f9e6:	d101      	bne.n	800f9ec <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 800f9e8:	2301      	movs	r3, #1
 800f9ea:	e304      	b.n	800fff6 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800f9ec:	4b6c      	ldr	r3, [pc, #432]	@ (800fba0 <HAL_RCC_OscConfig+0x33c>)
 800f9ee:	685b      	ldr	r3, [r3, #4]
 800f9f0:	4a6e      	ldr	r2, [pc, #440]	@ (800fbac <HAL_RCC_OscConfig+0x348>)
 800f9f2:	4013      	ands	r3, r2
 800f9f4:	0019      	movs	r1, r3
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	691b      	ldr	r3, [r3, #16]
 800f9fa:	021a      	lsls	r2, r3, #8
 800f9fc:	4b68      	ldr	r3, [pc, #416]	@ (800fba0 <HAL_RCC_OscConfig+0x33c>)
 800f9fe:	430a      	orrs	r2, r1
 800fa00:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800fa02:	4b67      	ldr	r3, [pc, #412]	@ (800fba0 <HAL_RCC_OscConfig+0x33c>)
 800fa04:	681b      	ldr	r3, [r3, #0]
 800fa06:	2209      	movs	r2, #9
 800fa08:	4393      	bics	r3, r2
 800fa0a:	0019      	movs	r1, r3
 800fa0c:	4b64      	ldr	r3, [pc, #400]	@ (800fba0 <HAL_RCC_OscConfig+0x33c>)
 800fa0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fa10:	430a      	orrs	r2, r1
 800fa12:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800fa14:	f000 fc42 	bl	801029c <HAL_RCC_GetSysClockFreq>
 800fa18:	0001      	movs	r1, r0
 800fa1a:	4b61      	ldr	r3, [pc, #388]	@ (800fba0 <HAL_RCC_OscConfig+0x33c>)
 800fa1c:	68db      	ldr	r3, [r3, #12]
 800fa1e:	091b      	lsrs	r3, r3, #4
 800fa20:	220f      	movs	r2, #15
 800fa22:	4013      	ands	r3, r2
 800fa24:	4a62      	ldr	r2, [pc, #392]	@ (800fbb0 <HAL_RCC_OscConfig+0x34c>)
 800fa26:	5cd3      	ldrb	r3, [r2, r3]
 800fa28:	000a      	movs	r2, r1
 800fa2a:	40da      	lsrs	r2, r3
 800fa2c:	4b61      	ldr	r3, [pc, #388]	@ (800fbb4 <HAL_RCC_OscConfig+0x350>)
 800fa2e:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 800fa30:	4b61      	ldr	r3, [pc, #388]	@ (800fbb8 <HAL_RCC_OscConfig+0x354>)
 800fa32:	681b      	ldr	r3, [r3, #0]
 800fa34:	2513      	movs	r5, #19
 800fa36:	197c      	adds	r4, r7, r5
 800fa38:	0018      	movs	r0, r3
 800fa3a:	f7fa f953 	bl	8009ce4 <HAL_InitTick>
 800fa3e:	0003      	movs	r3, r0
 800fa40:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800fa42:	197b      	adds	r3, r7, r5
 800fa44:	781b      	ldrb	r3, [r3, #0]
 800fa46:	2b00      	cmp	r3, #0
 800fa48:	d046      	beq.n	800fad8 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 800fa4a:	197b      	adds	r3, r7, r5
 800fa4c:	781b      	ldrb	r3, [r3, #0]
 800fa4e:	e2d2      	b.n	800fff6 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800fa50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa52:	2b00      	cmp	r3, #0
 800fa54:	d027      	beq.n	800faa6 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800fa56:	4b52      	ldr	r3, [pc, #328]	@ (800fba0 <HAL_RCC_OscConfig+0x33c>)
 800fa58:	681b      	ldr	r3, [r3, #0]
 800fa5a:	2209      	movs	r2, #9
 800fa5c:	4393      	bics	r3, r2
 800fa5e:	0019      	movs	r1, r3
 800fa60:	4b4f      	ldr	r3, [pc, #316]	@ (800fba0 <HAL_RCC_OscConfig+0x33c>)
 800fa62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fa64:	430a      	orrs	r2, r1
 800fa66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800fa68:	f7fa f982 	bl	8009d70 <HAL_GetTick>
 800fa6c:	0003      	movs	r3, r0
 800fa6e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800fa70:	e008      	b.n	800fa84 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800fa72:	f7fa f97d 	bl	8009d70 <HAL_GetTick>
 800fa76:	0002      	movs	r2, r0
 800fa78:	697b      	ldr	r3, [r7, #20]
 800fa7a:	1ad3      	subs	r3, r2, r3
 800fa7c:	2b02      	cmp	r3, #2
 800fa7e:	d901      	bls.n	800fa84 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 800fa80:	2303      	movs	r3, #3
 800fa82:	e2b8      	b.n	800fff6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800fa84:	4b46      	ldr	r3, [pc, #280]	@ (800fba0 <HAL_RCC_OscConfig+0x33c>)
 800fa86:	681b      	ldr	r3, [r3, #0]
 800fa88:	2204      	movs	r2, #4
 800fa8a:	4013      	ands	r3, r2
 800fa8c:	d0f1      	beq.n	800fa72 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800fa8e:	4b44      	ldr	r3, [pc, #272]	@ (800fba0 <HAL_RCC_OscConfig+0x33c>)
 800fa90:	685b      	ldr	r3, [r3, #4]
 800fa92:	4a46      	ldr	r2, [pc, #280]	@ (800fbac <HAL_RCC_OscConfig+0x348>)
 800fa94:	4013      	ands	r3, r2
 800fa96:	0019      	movs	r1, r3
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	691b      	ldr	r3, [r3, #16]
 800fa9c:	021a      	lsls	r2, r3, #8
 800fa9e:	4b40      	ldr	r3, [pc, #256]	@ (800fba0 <HAL_RCC_OscConfig+0x33c>)
 800faa0:	430a      	orrs	r2, r1
 800faa2:	605a      	str	r2, [r3, #4]
 800faa4:	e018      	b.n	800fad8 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800faa6:	4b3e      	ldr	r3, [pc, #248]	@ (800fba0 <HAL_RCC_OscConfig+0x33c>)
 800faa8:	681a      	ldr	r2, [r3, #0]
 800faaa:	4b3d      	ldr	r3, [pc, #244]	@ (800fba0 <HAL_RCC_OscConfig+0x33c>)
 800faac:	2101      	movs	r1, #1
 800faae:	438a      	bics	r2, r1
 800fab0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800fab2:	f7fa f95d 	bl	8009d70 <HAL_GetTick>
 800fab6:	0003      	movs	r3, r0
 800fab8:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800faba:	e008      	b.n	800face <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800fabc:	f7fa f958 	bl	8009d70 <HAL_GetTick>
 800fac0:	0002      	movs	r2, r0
 800fac2:	697b      	ldr	r3, [r7, #20]
 800fac4:	1ad3      	subs	r3, r2, r3
 800fac6:	2b02      	cmp	r3, #2
 800fac8:	d901      	bls.n	800face <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 800faca:	2303      	movs	r3, #3
 800facc:	e293      	b.n	800fff6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800face:	4b34      	ldr	r3, [pc, #208]	@ (800fba0 <HAL_RCC_OscConfig+0x33c>)
 800fad0:	681b      	ldr	r3, [r3, #0]
 800fad2:	2204      	movs	r2, #4
 800fad4:	4013      	ands	r3, r2
 800fad6:	d1f1      	bne.n	800fabc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	681b      	ldr	r3, [r3, #0]
 800fadc:	2210      	movs	r2, #16
 800fade:	4013      	ands	r3, r2
 800fae0:	d100      	bne.n	800fae4 <HAL_RCC_OscConfig+0x280>
 800fae2:	e0a2      	b.n	800fc2a <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800fae4:	69fb      	ldr	r3, [r7, #28]
 800fae6:	2b00      	cmp	r3, #0
 800fae8:	d140      	bne.n	800fb6c <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800faea:	4b2d      	ldr	r3, [pc, #180]	@ (800fba0 <HAL_RCC_OscConfig+0x33c>)
 800faec:	681a      	ldr	r2, [r3, #0]
 800faee:	2380      	movs	r3, #128	@ 0x80
 800faf0:	009b      	lsls	r3, r3, #2
 800faf2:	4013      	ands	r3, r2
 800faf4:	d005      	beq.n	800fb02 <HAL_RCC_OscConfig+0x29e>
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	69db      	ldr	r3, [r3, #28]
 800fafa:	2b00      	cmp	r3, #0
 800fafc:	d101      	bne.n	800fb02 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800fafe:	2301      	movs	r3, #1
 800fb00:	e279      	b.n	800fff6 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800fb02:	4b27      	ldr	r3, [pc, #156]	@ (800fba0 <HAL_RCC_OscConfig+0x33c>)
 800fb04:	685b      	ldr	r3, [r3, #4]
 800fb06:	4a2d      	ldr	r2, [pc, #180]	@ (800fbbc <HAL_RCC_OscConfig+0x358>)
 800fb08:	4013      	ands	r3, r2
 800fb0a:	0019      	movs	r1, r3
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fb10:	4b23      	ldr	r3, [pc, #140]	@ (800fba0 <HAL_RCC_OscConfig+0x33c>)
 800fb12:	430a      	orrs	r2, r1
 800fb14:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800fb16:	4b22      	ldr	r3, [pc, #136]	@ (800fba0 <HAL_RCC_OscConfig+0x33c>)
 800fb18:	685b      	ldr	r3, [r3, #4]
 800fb1a:	021b      	lsls	r3, r3, #8
 800fb1c:	0a19      	lsrs	r1, r3, #8
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	6a1b      	ldr	r3, [r3, #32]
 800fb22:	061a      	lsls	r2, r3, #24
 800fb24:	4b1e      	ldr	r3, [pc, #120]	@ (800fba0 <HAL_RCC_OscConfig+0x33c>)
 800fb26:	430a      	orrs	r2, r1
 800fb28:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fb2e:	0b5b      	lsrs	r3, r3, #13
 800fb30:	3301      	adds	r3, #1
 800fb32:	2280      	movs	r2, #128	@ 0x80
 800fb34:	0212      	lsls	r2, r2, #8
 800fb36:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800fb38:	4b19      	ldr	r3, [pc, #100]	@ (800fba0 <HAL_RCC_OscConfig+0x33c>)
 800fb3a:	68db      	ldr	r3, [r3, #12]
 800fb3c:	091b      	lsrs	r3, r3, #4
 800fb3e:	210f      	movs	r1, #15
 800fb40:	400b      	ands	r3, r1
 800fb42:	491b      	ldr	r1, [pc, #108]	@ (800fbb0 <HAL_RCC_OscConfig+0x34c>)
 800fb44:	5ccb      	ldrb	r3, [r1, r3]
 800fb46:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800fb48:	4b1a      	ldr	r3, [pc, #104]	@ (800fbb4 <HAL_RCC_OscConfig+0x350>)
 800fb4a:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 800fb4c:	4b1a      	ldr	r3, [pc, #104]	@ (800fbb8 <HAL_RCC_OscConfig+0x354>)
 800fb4e:	681b      	ldr	r3, [r3, #0]
 800fb50:	2513      	movs	r5, #19
 800fb52:	197c      	adds	r4, r7, r5
 800fb54:	0018      	movs	r0, r3
 800fb56:	f7fa f8c5 	bl	8009ce4 <HAL_InitTick>
 800fb5a:	0003      	movs	r3, r0
 800fb5c:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800fb5e:	197b      	adds	r3, r7, r5
 800fb60:	781b      	ldrb	r3, [r3, #0]
 800fb62:	2b00      	cmp	r3, #0
 800fb64:	d061      	beq.n	800fc2a <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 800fb66:	197b      	adds	r3, r7, r5
 800fb68:	781b      	ldrb	r3, [r3, #0]
 800fb6a:	e244      	b.n	800fff6 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	69db      	ldr	r3, [r3, #28]
 800fb70:	2b00      	cmp	r3, #0
 800fb72:	d040      	beq.n	800fbf6 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800fb74:	4b0a      	ldr	r3, [pc, #40]	@ (800fba0 <HAL_RCC_OscConfig+0x33c>)
 800fb76:	681a      	ldr	r2, [r3, #0]
 800fb78:	4b09      	ldr	r3, [pc, #36]	@ (800fba0 <HAL_RCC_OscConfig+0x33c>)
 800fb7a:	2180      	movs	r1, #128	@ 0x80
 800fb7c:	0049      	lsls	r1, r1, #1
 800fb7e:	430a      	orrs	r2, r1
 800fb80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800fb82:	f7fa f8f5 	bl	8009d70 <HAL_GetTick>
 800fb86:	0003      	movs	r3, r0
 800fb88:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800fb8a:	e019      	b.n	800fbc0 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800fb8c:	f7fa f8f0 	bl	8009d70 <HAL_GetTick>
 800fb90:	0002      	movs	r2, r0
 800fb92:	697b      	ldr	r3, [r7, #20]
 800fb94:	1ad3      	subs	r3, r2, r3
 800fb96:	2b02      	cmp	r3, #2
 800fb98:	d912      	bls.n	800fbc0 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 800fb9a:	2303      	movs	r3, #3
 800fb9c:	e22b      	b.n	800fff6 <HAL_RCC_OscConfig+0x792>
 800fb9e:	46c0      	nop			@ (mov r8, r8)
 800fba0:	40021000 	.word	0x40021000
 800fba4:	fffeffff 	.word	0xfffeffff
 800fba8:	fffbffff 	.word	0xfffbffff
 800fbac:	ffffe0ff 	.word	0xffffe0ff
 800fbb0:	0801b994 	.word	0x0801b994
 800fbb4:	200000a4 	.word	0x200000a4
 800fbb8:	200000b8 	.word	0x200000b8
 800fbbc:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800fbc0:	4bca      	ldr	r3, [pc, #808]	@ (800feec <HAL_RCC_OscConfig+0x688>)
 800fbc2:	681a      	ldr	r2, [r3, #0]
 800fbc4:	2380      	movs	r3, #128	@ 0x80
 800fbc6:	009b      	lsls	r3, r3, #2
 800fbc8:	4013      	ands	r3, r2
 800fbca:	d0df      	beq.n	800fb8c <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800fbcc:	4bc7      	ldr	r3, [pc, #796]	@ (800feec <HAL_RCC_OscConfig+0x688>)
 800fbce:	685b      	ldr	r3, [r3, #4]
 800fbd0:	4ac7      	ldr	r2, [pc, #796]	@ (800fef0 <HAL_RCC_OscConfig+0x68c>)
 800fbd2:	4013      	ands	r3, r2
 800fbd4:	0019      	movs	r1, r3
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fbda:	4bc4      	ldr	r3, [pc, #784]	@ (800feec <HAL_RCC_OscConfig+0x688>)
 800fbdc:	430a      	orrs	r2, r1
 800fbde:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800fbe0:	4bc2      	ldr	r3, [pc, #776]	@ (800feec <HAL_RCC_OscConfig+0x688>)
 800fbe2:	685b      	ldr	r3, [r3, #4]
 800fbe4:	021b      	lsls	r3, r3, #8
 800fbe6:	0a19      	lsrs	r1, r3, #8
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	6a1b      	ldr	r3, [r3, #32]
 800fbec:	061a      	lsls	r2, r3, #24
 800fbee:	4bbf      	ldr	r3, [pc, #764]	@ (800feec <HAL_RCC_OscConfig+0x688>)
 800fbf0:	430a      	orrs	r2, r1
 800fbf2:	605a      	str	r2, [r3, #4]
 800fbf4:	e019      	b.n	800fc2a <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800fbf6:	4bbd      	ldr	r3, [pc, #756]	@ (800feec <HAL_RCC_OscConfig+0x688>)
 800fbf8:	681a      	ldr	r2, [r3, #0]
 800fbfa:	4bbc      	ldr	r3, [pc, #752]	@ (800feec <HAL_RCC_OscConfig+0x688>)
 800fbfc:	49bd      	ldr	r1, [pc, #756]	@ (800fef4 <HAL_RCC_OscConfig+0x690>)
 800fbfe:	400a      	ands	r2, r1
 800fc00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800fc02:	f7fa f8b5 	bl	8009d70 <HAL_GetTick>
 800fc06:	0003      	movs	r3, r0
 800fc08:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800fc0a:	e008      	b.n	800fc1e <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800fc0c:	f7fa f8b0 	bl	8009d70 <HAL_GetTick>
 800fc10:	0002      	movs	r2, r0
 800fc12:	697b      	ldr	r3, [r7, #20]
 800fc14:	1ad3      	subs	r3, r2, r3
 800fc16:	2b02      	cmp	r3, #2
 800fc18:	d901      	bls.n	800fc1e <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 800fc1a:	2303      	movs	r3, #3
 800fc1c:	e1eb      	b.n	800fff6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800fc1e:	4bb3      	ldr	r3, [pc, #716]	@ (800feec <HAL_RCC_OscConfig+0x688>)
 800fc20:	681a      	ldr	r2, [r3, #0]
 800fc22:	2380      	movs	r3, #128	@ 0x80
 800fc24:	009b      	lsls	r3, r3, #2
 800fc26:	4013      	ands	r3, r2
 800fc28:	d1f0      	bne.n	800fc0c <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	681b      	ldr	r3, [r3, #0]
 800fc2e:	2208      	movs	r2, #8
 800fc30:	4013      	ands	r3, r2
 800fc32:	d036      	beq.n	800fca2 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	695b      	ldr	r3, [r3, #20]
 800fc38:	2b00      	cmp	r3, #0
 800fc3a:	d019      	beq.n	800fc70 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800fc3c:	4bab      	ldr	r3, [pc, #684]	@ (800feec <HAL_RCC_OscConfig+0x688>)
 800fc3e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800fc40:	4baa      	ldr	r3, [pc, #680]	@ (800feec <HAL_RCC_OscConfig+0x688>)
 800fc42:	2101      	movs	r1, #1
 800fc44:	430a      	orrs	r2, r1
 800fc46:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800fc48:	f7fa f892 	bl	8009d70 <HAL_GetTick>
 800fc4c:	0003      	movs	r3, r0
 800fc4e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800fc50:	e008      	b.n	800fc64 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800fc52:	f7fa f88d 	bl	8009d70 <HAL_GetTick>
 800fc56:	0002      	movs	r2, r0
 800fc58:	697b      	ldr	r3, [r7, #20]
 800fc5a:	1ad3      	subs	r3, r2, r3
 800fc5c:	2b02      	cmp	r3, #2
 800fc5e:	d901      	bls.n	800fc64 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 800fc60:	2303      	movs	r3, #3
 800fc62:	e1c8      	b.n	800fff6 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800fc64:	4ba1      	ldr	r3, [pc, #644]	@ (800feec <HAL_RCC_OscConfig+0x688>)
 800fc66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fc68:	2202      	movs	r2, #2
 800fc6a:	4013      	ands	r3, r2
 800fc6c:	d0f1      	beq.n	800fc52 <HAL_RCC_OscConfig+0x3ee>
 800fc6e:	e018      	b.n	800fca2 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800fc70:	4b9e      	ldr	r3, [pc, #632]	@ (800feec <HAL_RCC_OscConfig+0x688>)
 800fc72:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800fc74:	4b9d      	ldr	r3, [pc, #628]	@ (800feec <HAL_RCC_OscConfig+0x688>)
 800fc76:	2101      	movs	r1, #1
 800fc78:	438a      	bics	r2, r1
 800fc7a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800fc7c:	f7fa f878 	bl	8009d70 <HAL_GetTick>
 800fc80:	0003      	movs	r3, r0
 800fc82:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800fc84:	e008      	b.n	800fc98 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800fc86:	f7fa f873 	bl	8009d70 <HAL_GetTick>
 800fc8a:	0002      	movs	r2, r0
 800fc8c:	697b      	ldr	r3, [r7, #20]
 800fc8e:	1ad3      	subs	r3, r2, r3
 800fc90:	2b02      	cmp	r3, #2
 800fc92:	d901      	bls.n	800fc98 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 800fc94:	2303      	movs	r3, #3
 800fc96:	e1ae      	b.n	800fff6 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800fc98:	4b94      	ldr	r3, [pc, #592]	@ (800feec <HAL_RCC_OscConfig+0x688>)
 800fc9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fc9c:	2202      	movs	r2, #2
 800fc9e:	4013      	ands	r3, r2
 800fca0:	d1f1      	bne.n	800fc86 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	681b      	ldr	r3, [r3, #0]
 800fca6:	2204      	movs	r2, #4
 800fca8:	4013      	ands	r3, r2
 800fcaa:	d100      	bne.n	800fcae <HAL_RCC_OscConfig+0x44a>
 800fcac:	e0ae      	b.n	800fe0c <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800fcae:	2023      	movs	r0, #35	@ 0x23
 800fcb0:	183b      	adds	r3, r7, r0
 800fcb2:	2200      	movs	r2, #0
 800fcb4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800fcb6:	4b8d      	ldr	r3, [pc, #564]	@ (800feec <HAL_RCC_OscConfig+0x688>)
 800fcb8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800fcba:	2380      	movs	r3, #128	@ 0x80
 800fcbc:	055b      	lsls	r3, r3, #21
 800fcbe:	4013      	ands	r3, r2
 800fcc0:	d109      	bne.n	800fcd6 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800fcc2:	4b8a      	ldr	r3, [pc, #552]	@ (800feec <HAL_RCC_OscConfig+0x688>)
 800fcc4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800fcc6:	4b89      	ldr	r3, [pc, #548]	@ (800feec <HAL_RCC_OscConfig+0x688>)
 800fcc8:	2180      	movs	r1, #128	@ 0x80
 800fcca:	0549      	lsls	r1, r1, #21
 800fccc:	430a      	orrs	r2, r1
 800fcce:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 800fcd0:	183b      	adds	r3, r7, r0
 800fcd2:	2201      	movs	r2, #1
 800fcd4:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800fcd6:	4b88      	ldr	r3, [pc, #544]	@ (800fef8 <HAL_RCC_OscConfig+0x694>)
 800fcd8:	681a      	ldr	r2, [r3, #0]
 800fcda:	2380      	movs	r3, #128	@ 0x80
 800fcdc:	005b      	lsls	r3, r3, #1
 800fcde:	4013      	ands	r3, r2
 800fce0:	d11a      	bne.n	800fd18 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800fce2:	4b85      	ldr	r3, [pc, #532]	@ (800fef8 <HAL_RCC_OscConfig+0x694>)
 800fce4:	681a      	ldr	r2, [r3, #0]
 800fce6:	4b84      	ldr	r3, [pc, #528]	@ (800fef8 <HAL_RCC_OscConfig+0x694>)
 800fce8:	2180      	movs	r1, #128	@ 0x80
 800fcea:	0049      	lsls	r1, r1, #1
 800fcec:	430a      	orrs	r2, r1
 800fcee:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800fcf0:	f7fa f83e 	bl	8009d70 <HAL_GetTick>
 800fcf4:	0003      	movs	r3, r0
 800fcf6:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800fcf8:	e008      	b.n	800fd0c <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800fcfa:	f7fa f839 	bl	8009d70 <HAL_GetTick>
 800fcfe:	0002      	movs	r2, r0
 800fd00:	697b      	ldr	r3, [r7, #20]
 800fd02:	1ad3      	subs	r3, r2, r3
 800fd04:	2b64      	cmp	r3, #100	@ 0x64
 800fd06:	d901      	bls.n	800fd0c <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 800fd08:	2303      	movs	r3, #3
 800fd0a:	e174      	b.n	800fff6 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800fd0c:	4b7a      	ldr	r3, [pc, #488]	@ (800fef8 <HAL_RCC_OscConfig+0x694>)
 800fd0e:	681a      	ldr	r2, [r3, #0]
 800fd10:	2380      	movs	r3, #128	@ 0x80
 800fd12:	005b      	lsls	r3, r3, #1
 800fd14:	4013      	ands	r3, r2
 800fd16:	d0f0      	beq.n	800fcfa <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	689a      	ldr	r2, [r3, #8]
 800fd1c:	2380      	movs	r3, #128	@ 0x80
 800fd1e:	005b      	lsls	r3, r3, #1
 800fd20:	429a      	cmp	r2, r3
 800fd22:	d107      	bne.n	800fd34 <HAL_RCC_OscConfig+0x4d0>
 800fd24:	4b71      	ldr	r3, [pc, #452]	@ (800feec <HAL_RCC_OscConfig+0x688>)
 800fd26:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800fd28:	4b70      	ldr	r3, [pc, #448]	@ (800feec <HAL_RCC_OscConfig+0x688>)
 800fd2a:	2180      	movs	r1, #128	@ 0x80
 800fd2c:	0049      	lsls	r1, r1, #1
 800fd2e:	430a      	orrs	r2, r1
 800fd30:	651a      	str	r2, [r3, #80]	@ 0x50
 800fd32:	e031      	b.n	800fd98 <HAL_RCC_OscConfig+0x534>
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	689b      	ldr	r3, [r3, #8]
 800fd38:	2b00      	cmp	r3, #0
 800fd3a:	d10c      	bne.n	800fd56 <HAL_RCC_OscConfig+0x4f2>
 800fd3c:	4b6b      	ldr	r3, [pc, #428]	@ (800feec <HAL_RCC_OscConfig+0x688>)
 800fd3e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800fd40:	4b6a      	ldr	r3, [pc, #424]	@ (800feec <HAL_RCC_OscConfig+0x688>)
 800fd42:	496c      	ldr	r1, [pc, #432]	@ (800fef4 <HAL_RCC_OscConfig+0x690>)
 800fd44:	400a      	ands	r2, r1
 800fd46:	651a      	str	r2, [r3, #80]	@ 0x50
 800fd48:	4b68      	ldr	r3, [pc, #416]	@ (800feec <HAL_RCC_OscConfig+0x688>)
 800fd4a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800fd4c:	4b67      	ldr	r3, [pc, #412]	@ (800feec <HAL_RCC_OscConfig+0x688>)
 800fd4e:	496b      	ldr	r1, [pc, #428]	@ (800fefc <HAL_RCC_OscConfig+0x698>)
 800fd50:	400a      	ands	r2, r1
 800fd52:	651a      	str	r2, [r3, #80]	@ 0x50
 800fd54:	e020      	b.n	800fd98 <HAL_RCC_OscConfig+0x534>
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	689a      	ldr	r2, [r3, #8]
 800fd5a:	23a0      	movs	r3, #160	@ 0xa0
 800fd5c:	00db      	lsls	r3, r3, #3
 800fd5e:	429a      	cmp	r2, r3
 800fd60:	d10e      	bne.n	800fd80 <HAL_RCC_OscConfig+0x51c>
 800fd62:	4b62      	ldr	r3, [pc, #392]	@ (800feec <HAL_RCC_OscConfig+0x688>)
 800fd64:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800fd66:	4b61      	ldr	r3, [pc, #388]	@ (800feec <HAL_RCC_OscConfig+0x688>)
 800fd68:	2180      	movs	r1, #128	@ 0x80
 800fd6a:	00c9      	lsls	r1, r1, #3
 800fd6c:	430a      	orrs	r2, r1
 800fd6e:	651a      	str	r2, [r3, #80]	@ 0x50
 800fd70:	4b5e      	ldr	r3, [pc, #376]	@ (800feec <HAL_RCC_OscConfig+0x688>)
 800fd72:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800fd74:	4b5d      	ldr	r3, [pc, #372]	@ (800feec <HAL_RCC_OscConfig+0x688>)
 800fd76:	2180      	movs	r1, #128	@ 0x80
 800fd78:	0049      	lsls	r1, r1, #1
 800fd7a:	430a      	orrs	r2, r1
 800fd7c:	651a      	str	r2, [r3, #80]	@ 0x50
 800fd7e:	e00b      	b.n	800fd98 <HAL_RCC_OscConfig+0x534>
 800fd80:	4b5a      	ldr	r3, [pc, #360]	@ (800feec <HAL_RCC_OscConfig+0x688>)
 800fd82:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800fd84:	4b59      	ldr	r3, [pc, #356]	@ (800feec <HAL_RCC_OscConfig+0x688>)
 800fd86:	495b      	ldr	r1, [pc, #364]	@ (800fef4 <HAL_RCC_OscConfig+0x690>)
 800fd88:	400a      	ands	r2, r1
 800fd8a:	651a      	str	r2, [r3, #80]	@ 0x50
 800fd8c:	4b57      	ldr	r3, [pc, #348]	@ (800feec <HAL_RCC_OscConfig+0x688>)
 800fd8e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800fd90:	4b56      	ldr	r3, [pc, #344]	@ (800feec <HAL_RCC_OscConfig+0x688>)
 800fd92:	495a      	ldr	r1, [pc, #360]	@ (800fefc <HAL_RCC_OscConfig+0x698>)
 800fd94:	400a      	ands	r2, r1
 800fd96:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	689b      	ldr	r3, [r3, #8]
 800fd9c:	2b00      	cmp	r3, #0
 800fd9e:	d015      	beq.n	800fdcc <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800fda0:	f7f9 ffe6 	bl	8009d70 <HAL_GetTick>
 800fda4:	0003      	movs	r3, r0
 800fda6:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800fda8:	e009      	b.n	800fdbe <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800fdaa:	f7f9 ffe1 	bl	8009d70 <HAL_GetTick>
 800fdae:	0002      	movs	r2, r0
 800fdb0:	697b      	ldr	r3, [r7, #20]
 800fdb2:	1ad3      	subs	r3, r2, r3
 800fdb4:	4a52      	ldr	r2, [pc, #328]	@ (800ff00 <HAL_RCC_OscConfig+0x69c>)
 800fdb6:	4293      	cmp	r3, r2
 800fdb8:	d901      	bls.n	800fdbe <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 800fdba:	2303      	movs	r3, #3
 800fdbc:	e11b      	b.n	800fff6 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800fdbe:	4b4b      	ldr	r3, [pc, #300]	@ (800feec <HAL_RCC_OscConfig+0x688>)
 800fdc0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800fdc2:	2380      	movs	r3, #128	@ 0x80
 800fdc4:	009b      	lsls	r3, r3, #2
 800fdc6:	4013      	ands	r3, r2
 800fdc8:	d0ef      	beq.n	800fdaa <HAL_RCC_OscConfig+0x546>
 800fdca:	e014      	b.n	800fdf6 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800fdcc:	f7f9 ffd0 	bl	8009d70 <HAL_GetTick>
 800fdd0:	0003      	movs	r3, r0
 800fdd2:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800fdd4:	e009      	b.n	800fdea <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800fdd6:	f7f9 ffcb 	bl	8009d70 <HAL_GetTick>
 800fdda:	0002      	movs	r2, r0
 800fddc:	697b      	ldr	r3, [r7, #20]
 800fdde:	1ad3      	subs	r3, r2, r3
 800fde0:	4a47      	ldr	r2, [pc, #284]	@ (800ff00 <HAL_RCC_OscConfig+0x69c>)
 800fde2:	4293      	cmp	r3, r2
 800fde4:	d901      	bls.n	800fdea <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 800fde6:	2303      	movs	r3, #3
 800fde8:	e105      	b.n	800fff6 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800fdea:	4b40      	ldr	r3, [pc, #256]	@ (800feec <HAL_RCC_OscConfig+0x688>)
 800fdec:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800fdee:	2380      	movs	r3, #128	@ 0x80
 800fdf0:	009b      	lsls	r3, r3, #2
 800fdf2:	4013      	ands	r3, r2
 800fdf4:	d1ef      	bne.n	800fdd6 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800fdf6:	2323      	movs	r3, #35	@ 0x23
 800fdf8:	18fb      	adds	r3, r7, r3
 800fdfa:	781b      	ldrb	r3, [r3, #0]
 800fdfc:	2b01      	cmp	r3, #1
 800fdfe:	d105      	bne.n	800fe0c <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800fe00:	4b3a      	ldr	r3, [pc, #232]	@ (800feec <HAL_RCC_OscConfig+0x688>)
 800fe02:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800fe04:	4b39      	ldr	r3, [pc, #228]	@ (800feec <HAL_RCC_OscConfig+0x688>)
 800fe06:	493f      	ldr	r1, [pc, #252]	@ (800ff04 <HAL_RCC_OscConfig+0x6a0>)
 800fe08:	400a      	ands	r2, r1
 800fe0a:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	681b      	ldr	r3, [r3, #0]
 800fe10:	2220      	movs	r2, #32
 800fe12:	4013      	ands	r3, r2
 800fe14:	d049      	beq.n	800feaa <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	699b      	ldr	r3, [r3, #24]
 800fe1a:	2b00      	cmp	r3, #0
 800fe1c:	d026      	beq.n	800fe6c <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800fe1e:	4b33      	ldr	r3, [pc, #204]	@ (800feec <HAL_RCC_OscConfig+0x688>)
 800fe20:	689a      	ldr	r2, [r3, #8]
 800fe22:	4b32      	ldr	r3, [pc, #200]	@ (800feec <HAL_RCC_OscConfig+0x688>)
 800fe24:	2101      	movs	r1, #1
 800fe26:	430a      	orrs	r2, r1
 800fe28:	609a      	str	r2, [r3, #8]
 800fe2a:	4b30      	ldr	r3, [pc, #192]	@ (800feec <HAL_RCC_OscConfig+0x688>)
 800fe2c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800fe2e:	4b2f      	ldr	r3, [pc, #188]	@ (800feec <HAL_RCC_OscConfig+0x688>)
 800fe30:	2101      	movs	r1, #1
 800fe32:	430a      	orrs	r2, r1
 800fe34:	635a      	str	r2, [r3, #52]	@ 0x34
 800fe36:	4b34      	ldr	r3, [pc, #208]	@ (800ff08 <HAL_RCC_OscConfig+0x6a4>)
 800fe38:	6a1a      	ldr	r2, [r3, #32]
 800fe3a:	4b33      	ldr	r3, [pc, #204]	@ (800ff08 <HAL_RCC_OscConfig+0x6a4>)
 800fe3c:	2180      	movs	r1, #128	@ 0x80
 800fe3e:	0189      	lsls	r1, r1, #6
 800fe40:	430a      	orrs	r2, r1
 800fe42:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800fe44:	f7f9 ff94 	bl	8009d70 <HAL_GetTick>
 800fe48:	0003      	movs	r3, r0
 800fe4a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800fe4c:	e008      	b.n	800fe60 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800fe4e:	f7f9 ff8f 	bl	8009d70 <HAL_GetTick>
 800fe52:	0002      	movs	r2, r0
 800fe54:	697b      	ldr	r3, [r7, #20]
 800fe56:	1ad3      	subs	r3, r2, r3
 800fe58:	2b02      	cmp	r3, #2
 800fe5a:	d901      	bls.n	800fe60 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 800fe5c:	2303      	movs	r3, #3
 800fe5e:	e0ca      	b.n	800fff6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800fe60:	4b22      	ldr	r3, [pc, #136]	@ (800feec <HAL_RCC_OscConfig+0x688>)
 800fe62:	689b      	ldr	r3, [r3, #8]
 800fe64:	2202      	movs	r2, #2
 800fe66:	4013      	ands	r3, r2
 800fe68:	d0f1      	beq.n	800fe4e <HAL_RCC_OscConfig+0x5ea>
 800fe6a:	e01e      	b.n	800feaa <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800fe6c:	4b1f      	ldr	r3, [pc, #124]	@ (800feec <HAL_RCC_OscConfig+0x688>)
 800fe6e:	689a      	ldr	r2, [r3, #8]
 800fe70:	4b1e      	ldr	r3, [pc, #120]	@ (800feec <HAL_RCC_OscConfig+0x688>)
 800fe72:	2101      	movs	r1, #1
 800fe74:	438a      	bics	r2, r1
 800fe76:	609a      	str	r2, [r3, #8]
 800fe78:	4b23      	ldr	r3, [pc, #140]	@ (800ff08 <HAL_RCC_OscConfig+0x6a4>)
 800fe7a:	6a1a      	ldr	r2, [r3, #32]
 800fe7c:	4b22      	ldr	r3, [pc, #136]	@ (800ff08 <HAL_RCC_OscConfig+0x6a4>)
 800fe7e:	4923      	ldr	r1, [pc, #140]	@ (800ff0c <HAL_RCC_OscConfig+0x6a8>)
 800fe80:	400a      	ands	r2, r1
 800fe82:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800fe84:	f7f9 ff74 	bl	8009d70 <HAL_GetTick>
 800fe88:	0003      	movs	r3, r0
 800fe8a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800fe8c:	e008      	b.n	800fea0 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800fe8e:	f7f9 ff6f 	bl	8009d70 <HAL_GetTick>
 800fe92:	0002      	movs	r2, r0
 800fe94:	697b      	ldr	r3, [r7, #20]
 800fe96:	1ad3      	subs	r3, r2, r3
 800fe98:	2b02      	cmp	r3, #2
 800fe9a:	d901      	bls.n	800fea0 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 800fe9c:	2303      	movs	r3, #3
 800fe9e:	e0aa      	b.n	800fff6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800fea0:	4b12      	ldr	r3, [pc, #72]	@ (800feec <HAL_RCC_OscConfig+0x688>)
 800fea2:	689b      	ldr	r3, [r3, #8]
 800fea4:	2202      	movs	r2, #2
 800fea6:	4013      	ands	r3, r2
 800fea8:	d1f1      	bne.n	800fe8e <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800feae:	2b00      	cmp	r3, #0
 800feb0:	d100      	bne.n	800feb4 <HAL_RCC_OscConfig+0x650>
 800feb2:	e09f      	b.n	800fff4 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800feb4:	69fb      	ldr	r3, [r7, #28]
 800feb6:	2b0c      	cmp	r3, #12
 800feb8:	d100      	bne.n	800febc <HAL_RCC_OscConfig+0x658>
 800feba:	e078      	b.n	800ffae <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fec0:	2b02      	cmp	r3, #2
 800fec2:	d159      	bne.n	800ff78 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800fec4:	4b09      	ldr	r3, [pc, #36]	@ (800feec <HAL_RCC_OscConfig+0x688>)
 800fec6:	681a      	ldr	r2, [r3, #0]
 800fec8:	4b08      	ldr	r3, [pc, #32]	@ (800feec <HAL_RCC_OscConfig+0x688>)
 800feca:	4911      	ldr	r1, [pc, #68]	@ (800ff10 <HAL_RCC_OscConfig+0x6ac>)
 800fecc:	400a      	ands	r2, r1
 800fece:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800fed0:	f7f9 ff4e 	bl	8009d70 <HAL_GetTick>
 800fed4:	0003      	movs	r3, r0
 800fed6:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800fed8:	e01c      	b.n	800ff14 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800feda:	f7f9 ff49 	bl	8009d70 <HAL_GetTick>
 800fede:	0002      	movs	r2, r0
 800fee0:	697b      	ldr	r3, [r7, #20]
 800fee2:	1ad3      	subs	r3, r2, r3
 800fee4:	2b02      	cmp	r3, #2
 800fee6:	d915      	bls.n	800ff14 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 800fee8:	2303      	movs	r3, #3
 800feea:	e084      	b.n	800fff6 <HAL_RCC_OscConfig+0x792>
 800feec:	40021000 	.word	0x40021000
 800fef0:	ffff1fff 	.word	0xffff1fff
 800fef4:	fffffeff 	.word	0xfffffeff
 800fef8:	40007000 	.word	0x40007000
 800fefc:	fffffbff 	.word	0xfffffbff
 800ff00:	00001388 	.word	0x00001388
 800ff04:	efffffff 	.word	0xefffffff
 800ff08:	40010000 	.word	0x40010000
 800ff0c:	ffffdfff 	.word	0xffffdfff
 800ff10:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800ff14:	4b3a      	ldr	r3, [pc, #232]	@ (8010000 <HAL_RCC_OscConfig+0x79c>)
 800ff16:	681a      	ldr	r2, [r3, #0]
 800ff18:	2380      	movs	r3, #128	@ 0x80
 800ff1a:	049b      	lsls	r3, r3, #18
 800ff1c:	4013      	ands	r3, r2
 800ff1e:	d1dc      	bne.n	800feda <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ff20:	4b37      	ldr	r3, [pc, #220]	@ (8010000 <HAL_RCC_OscConfig+0x79c>)
 800ff22:	68db      	ldr	r3, [r3, #12]
 800ff24:	4a37      	ldr	r2, [pc, #220]	@ (8010004 <HAL_RCC_OscConfig+0x7a0>)
 800ff26:	4013      	ands	r3, r2
 800ff28:	0019      	movs	r1, r3
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ff32:	431a      	orrs	r2, r3
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ff38:	431a      	orrs	r2, r3
 800ff3a:	4b31      	ldr	r3, [pc, #196]	@ (8010000 <HAL_RCC_OscConfig+0x79c>)
 800ff3c:	430a      	orrs	r2, r1
 800ff3e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ff40:	4b2f      	ldr	r3, [pc, #188]	@ (8010000 <HAL_RCC_OscConfig+0x79c>)
 800ff42:	681a      	ldr	r2, [r3, #0]
 800ff44:	4b2e      	ldr	r3, [pc, #184]	@ (8010000 <HAL_RCC_OscConfig+0x79c>)
 800ff46:	2180      	movs	r1, #128	@ 0x80
 800ff48:	0449      	lsls	r1, r1, #17
 800ff4a:	430a      	orrs	r2, r1
 800ff4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ff4e:	f7f9 ff0f 	bl	8009d70 <HAL_GetTick>
 800ff52:	0003      	movs	r3, r0
 800ff54:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800ff56:	e008      	b.n	800ff6a <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ff58:	f7f9 ff0a 	bl	8009d70 <HAL_GetTick>
 800ff5c:	0002      	movs	r2, r0
 800ff5e:	697b      	ldr	r3, [r7, #20]
 800ff60:	1ad3      	subs	r3, r2, r3
 800ff62:	2b02      	cmp	r3, #2
 800ff64:	d901      	bls.n	800ff6a <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 800ff66:	2303      	movs	r3, #3
 800ff68:	e045      	b.n	800fff6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800ff6a:	4b25      	ldr	r3, [pc, #148]	@ (8010000 <HAL_RCC_OscConfig+0x79c>)
 800ff6c:	681a      	ldr	r2, [r3, #0]
 800ff6e:	2380      	movs	r3, #128	@ 0x80
 800ff70:	049b      	lsls	r3, r3, #18
 800ff72:	4013      	ands	r3, r2
 800ff74:	d0f0      	beq.n	800ff58 <HAL_RCC_OscConfig+0x6f4>
 800ff76:	e03d      	b.n	800fff4 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ff78:	4b21      	ldr	r3, [pc, #132]	@ (8010000 <HAL_RCC_OscConfig+0x79c>)
 800ff7a:	681a      	ldr	r2, [r3, #0]
 800ff7c:	4b20      	ldr	r3, [pc, #128]	@ (8010000 <HAL_RCC_OscConfig+0x79c>)
 800ff7e:	4922      	ldr	r1, [pc, #136]	@ (8010008 <HAL_RCC_OscConfig+0x7a4>)
 800ff80:	400a      	ands	r2, r1
 800ff82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ff84:	f7f9 fef4 	bl	8009d70 <HAL_GetTick>
 800ff88:	0003      	movs	r3, r0
 800ff8a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800ff8c:	e008      	b.n	800ffa0 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ff8e:	f7f9 feef 	bl	8009d70 <HAL_GetTick>
 800ff92:	0002      	movs	r2, r0
 800ff94:	697b      	ldr	r3, [r7, #20]
 800ff96:	1ad3      	subs	r3, r2, r3
 800ff98:	2b02      	cmp	r3, #2
 800ff9a:	d901      	bls.n	800ffa0 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 800ff9c:	2303      	movs	r3, #3
 800ff9e:	e02a      	b.n	800fff6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800ffa0:	4b17      	ldr	r3, [pc, #92]	@ (8010000 <HAL_RCC_OscConfig+0x79c>)
 800ffa2:	681a      	ldr	r2, [r3, #0]
 800ffa4:	2380      	movs	r3, #128	@ 0x80
 800ffa6:	049b      	lsls	r3, r3, #18
 800ffa8:	4013      	ands	r3, r2
 800ffaa:	d1f0      	bne.n	800ff8e <HAL_RCC_OscConfig+0x72a>
 800ffac:	e022      	b.n	800fff4 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ffb2:	2b01      	cmp	r3, #1
 800ffb4:	d101      	bne.n	800ffba <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 800ffb6:	2301      	movs	r3, #1
 800ffb8:	e01d      	b.n	800fff6 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800ffba:	4b11      	ldr	r3, [pc, #68]	@ (8010000 <HAL_RCC_OscConfig+0x79c>)
 800ffbc:	68db      	ldr	r3, [r3, #12]
 800ffbe:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ffc0:	69ba      	ldr	r2, [r7, #24]
 800ffc2:	2380      	movs	r3, #128	@ 0x80
 800ffc4:	025b      	lsls	r3, r3, #9
 800ffc6:	401a      	ands	r2, r3
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ffcc:	429a      	cmp	r2, r3
 800ffce:	d10f      	bne.n	800fff0 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800ffd0:	69ba      	ldr	r2, [r7, #24]
 800ffd2:	23f0      	movs	r3, #240	@ 0xf0
 800ffd4:	039b      	lsls	r3, r3, #14
 800ffd6:	401a      	ands	r2, r3
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ffdc:	429a      	cmp	r2, r3
 800ffde:	d107      	bne.n	800fff0 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800ffe0:	69ba      	ldr	r2, [r7, #24]
 800ffe2:	23c0      	movs	r3, #192	@ 0xc0
 800ffe4:	041b      	lsls	r3, r3, #16
 800ffe6:	401a      	ands	r2, r3
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800ffec:	429a      	cmp	r2, r3
 800ffee:	d001      	beq.n	800fff4 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 800fff0:	2301      	movs	r3, #1
 800fff2:	e000      	b.n	800fff6 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 800fff4:	2300      	movs	r3, #0
}
 800fff6:	0018      	movs	r0, r3
 800fff8:	46bd      	mov	sp, r7
 800fffa:	b00a      	add	sp, #40	@ 0x28
 800fffc:	bdb0      	pop	{r4, r5, r7, pc}
 800fffe:	46c0      	nop			@ (mov r8, r8)
 8010000:	40021000 	.word	0x40021000
 8010004:	ff02ffff 	.word	0xff02ffff
 8010008:	feffffff 	.word	0xfeffffff

0801000c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801000c:	b5b0      	push	{r4, r5, r7, lr}
 801000e:	b084      	sub	sp, #16
 8010010:	af00      	add	r7, sp, #0
 8010012:	6078      	str	r0, [r7, #4]
 8010014:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	2b00      	cmp	r3, #0
 801001a:	d101      	bne.n	8010020 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 801001c:	2301      	movs	r3, #1
 801001e:	e128      	b.n	8010272 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8010020:	4b96      	ldr	r3, [pc, #600]	@ (801027c <HAL_RCC_ClockConfig+0x270>)
 8010022:	681b      	ldr	r3, [r3, #0]
 8010024:	2201      	movs	r2, #1
 8010026:	4013      	ands	r3, r2
 8010028:	683a      	ldr	r2, [r7, #0]
 801002a:	429a      	cmp	r2, r3
 801002c:	d91e      	bls.n	801006c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801002e:	4b93      	ldr	r3, [pc, #588]	@ (801027c <HAL_RCC_ClockConfig+0x270>)
 8010030:	681b      	ldr	r3, [r3, #0]
 8010032:	2201      	movs	r2, #1
 8010034:	4393      	bics	r3, r2
 8010036:	0019      	movs	r1, r3
 8010038:	4b90      	ldr	r3, [pc, #576]	@ (801027c <HAL_RCC_ClockConfig+0x270>)
 801003a:	683a      	ldr	r2, [r7, #0]
 801003c:	430a      	orrs	r2, r1
 801003e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8010040:	f7f9 fe96 	bl	8009d70 <HAL_GetTick>
 8010044:	0003      	movs	r3, r0
 8010046:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8010048:	e009      	b.n	801005e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801004a:	f7f9 fe91 	bl	8009d70 <HAL_GetTick>
 801004e:	0002      	movs	r2, r0
 8010050:	68fb      	ldr	r3, [r7, #12]
 8010052:	1ad3      	subs	r3, r2, r3
 8010054:	4a8a      	ldr	r2, [pc, #552]	@ (8010280 <HAL_RCC_ClockConfig+0x274>)
 8010056:	4293      	cmp	r3, r2
 8010058:	d901      	bls.n	801005e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 801005a:	2303      	movs	r3, #3
 801005c:	e109      	b.n	8010272 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801005e:	4b87      	ldr	r3, [pc, #540]	@ (801027c <HAL_RCC_ClockConfig+0x270>)
 8010060:	681b      	ldr	r3, [r3, #0]
 8010062:	2201      	movs	r2, #1
 8010064:	4013      	ands	r3, r2
 8010066:	683a      	ldr	r2, [r7, #0]
 8010068:	429a      	cmp	r2, r3
 801006a:	d1ee      	bne.n	801004a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	681b      	ldr	r3, [r3, #0]
 8010070:	2202      	movs	r2, #2
 8010072:	4013      	ands	r3, r2
 8010074:	d009      	beq.n	801008a <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8010076:	4b83      	ldr	r3, [pc, #524]	@ (8010284 <HAL_RCC_ClockConfig+0x278>)
 8010078:	68db      	ldr	r3, [r3, #12]
 801007a:	22f0      	movs	r2, #240	@ 0xf0
 801007c:	4393      	bics	r3, r2
 801007e:	0019      	movs	r1, r3
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	689a      	ldr	r2, [r3, #8]
 8010084:	4b7f      	ldr	r3, [pc, #508]	@ (8010284 <HAL_RCC_ClockConfig+0x278>)
 8010086:	430a      	orrs	r2, r1
 8010088:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	681b      	ldr	r3, [r3, #0]
 801008e:	2201      	movs	r2, #1
 8010090:	4013      	ands	r3, r2
 8010092:	d100      	bne.n	8010096 <HAL_RCC_ClockConfig+0x8a>
 8010094:	e089      	b.n	80101aa <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	685b      	ldr	r3, [r3, #4]
 801009a:	2b02      	cmp	r3, #2
 801009c:	d107      	bne.n	80100ae <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801009e:	4b79      	ldr	r3, [pc, #484]	@ (8010284 <HAL_RCC_ClockConfig+0x278>)
 80100a0:	681a      	ldr	r2, [r3, #0]
 80100a2:	2380      	movs	r3, #128	@ 0x80
 80100a4:	029b      	lsls	r3, r3, #10
 80100a6:	4013      	ands	r3, r2
 80100a8:	d120      	bne.n	80100ec <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80100aa:	2301      	movs	r3, #1
 80100ac:	e0e1      	b.n	8010272 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	685b      	ldr	r3, [r3, #4]
 80100b2:	2b03      	cmp	r3, #3
 80100b4:	d107      	bne.n	80100c6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80100b6:	4b73      	ldr	r3, [pc, #460]	@ (8010284 <HAL_RCC_ClockConfig+0x278>)
 80100b8:	681a      	ldr	r2, [r3, #0]
 80100ba:	2380      	movs	r3, #128	@ 0x80
 80100bc:	049b      	lsls	r3, r3, #18
 80100be:	4013      	ands	r3, r2
 80100c0:	d114      	bne.n	80100ec <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80100c2:	2301      	movs	r3, #1
 80100c4:	e0d5      	b.n	8010272 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	685b      	ldr	r3, [r3, #4]
 80100ca:	2b01      	cmp	r3, #1
 80100cc:	d106      	bne.n	80100dc <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80100ce:	4b6d      	ldr	r3, [pc, #436]	@ (8010284 <HAL_RCC_ClockConfig+0x278>)
 80100d0:	681b      	ldr	r3, [r3, #0]
 80100d2:	2204      	movs	r2, #4
 80100d4:	4013      	ands	r3, r2
 80100d6:	d109      	bne.n	80100ec <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80100d8:	2301      	movs	r3, #1
 80100da:	e0ca      	b.n	8010272 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80100dc:	4b69      	ldr	r3, [pc, #420]	@ (8010284 <HAL_RCC_ClockConfig+0x278>)
 80100de:	681a      	ldr	r2, [r3, #0]
 80100e0:	2380      	movs	r3, #128	@ 0x80
 80100e2:	009b      	lsls	r3, r3, #2
 80100e4:	4013      	ands	r3, r2
 80100e6:	d101      	bne.n	80100ec <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80100e8:	2301      	movs	r3, #1
 80100ea:	e0c2      	b.n	8010272 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80100ec:	4b65      	ldr	r3, [pc, #404]	@ (8010284 <HAL_RCC_ClockConfig+0x278>)
 80100ee:	68db      	ldr	r3, [r3, #12]
 80100f0:	2203      	movs	r2, #3
 80100f2:	4393      	bics	r3, r2
 80100f4:	0019      	movs	r1, r3
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	685a      	ldr	r2, [r3, #4]
 80100fa:	4b62      	ldr	r3, [pc, #392]	@ (8010284 <HAL_RCC_ClockConfig+0x278>)
 80100fc:	430a      	orrs	r2, r1
 80100fe:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8010100:	f7f9 fe36 	bl	8009d70 <HAL_GetTick>
 8010104:	0003      	movs	r3, r0
 8010106:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	685b      	ldr	r3, [r3, #4]
 801010c:	2b02      	cmp	r3, #2
 801010e:	d111      	bne.n	8010134 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8010110:	e009      	b.n	8010126 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010112:	f7f9 fe2d 	bl	8009d70 <HAL_GetTick>
 8010116:	0002      	movs	r2, r0
 8010118:	68fb      	ldr	r3, [r7, #12]
 801011a:	1ad3      	subs	r3, r2, r3
 801011c:	4a58      	ldr	r2, [pc, #352]	@ (8010280 <HAL_RCC_ClockConfig+0x274>)
 801011e:	4293      	cmp	r3, r2
 8010120:	d901      	bls.n	8010126 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8010122:	2303      	movs	r3, #3
 8010124:	e0a5      	b.n	8010272 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8010126:	4b57      	ldr	r3, [pc, #348]	@ (8010284 <HAL_RCC_ClockConfig+0x278>)
 8010128:	68db      	ldr	r3, [r3, #12]
 801012a:	220c      	movs	r2, #12
 801012c:	4013      	ands	r3, r2
 801012e:	2b08      	cmp	r3, #8
 8010130:	d1ef      	bne.n	8010112 <HAL_RCC_ClockConfig+0x106>
 8010132:	e03a      	b.n	80101aa <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	685b      	ldr	r3, [r3, #4]
 8010138:	2b03      	cmp	r3, #3
 801013a:	d111      	bne.n	8010160 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801013c:	e009      	b.n	8010152 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801013e:	f7f9 fe17 	bl	8009d70 <HAL_GetTick>
 8010142:	0002      	movs	r2, r0
 8010144:	68fb      	ldr	r3, [r7, #12]
 8010146:	1ad3      	subs	r3, r2, r3
 8010148:	4a4d      	ldr	r2, [pc, #308]	@ (8010280 <HAL_RCC_ClockConfig+0x274>)
 801014a:	4293      	cmp	r3, r2
 801014c:	d901      	bls.n	8010152 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 801014e:	2303      	movs	r3, #3
 8010150:	e08f      	b.n	8010272 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8010152:	4b4c      	ldr	r3, [pc, #304]	@ (8010284 <HAL_RCC_ClockConfig+0x278>)
 8010154:	68db      	ldr	r3, [r3, #12]
 8010156:	220c      	movs	r2, #12
 8010158:	4013      	ands	r3, r2
 801015a:	2b0c      	cmp	r3, #12
 801015c:	d1ef      	bne.n	801013e <HAL_RCC_ClockConfig+0x132>
 801015e:	e024      	b.n	80101aa <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	685b      	ldr	r3, [r3, #4]
 8010164:	2b01      	cmp	r3, #1
 8010166:	d11b      	bne.n	80101a0 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8010168:	e009      	b.n	801017e <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801016a:	f7f9 fe01 	bl	8009d70 <HAL_GetTick>
 801016e:	0002      	movs	r2, r0
 8010170:	68fb      	ldr	r3, [r7, #12]
 8010172:	1ad3      	subs	r3, r2, r3
 8010174:	4a42      	ldr	r2, [pc, #264]	@ (8010280 <HAL_RCC_ClockConfig+0x274>)
 8010176:	4293      	cmp	r3, r2
 8010178:	d901      	bls.n	801017e <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 801017a:	2303      	movs	r3, #3
 801017c:	e079      	b.n	8010272 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 801017e:	4b41      	ldr	r3, [pc, #260]	@ (8010284 <HAL_RCC_ClockConfig+0x278>)
 8010180:	68db      	ldr	r3, [r3, #12]
 8010182:	220c      	movs	r2, #12
 8010184:	4013      	ands	r3, r2
 8010186:	2b04      	cmp	r3, #4
 8010188:	d1ef      	bne.n	801016a <HAL_RCC_ClockConfig+0x15e>
 801018a:	e00e      	b.n	80101aa <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801018c:	f7f9 fdf0 	bl	8009d70 <HAL_GetTick>
 8010190:	0002      	movs	r2, r0
 8010192:	68fb      	ldr	r3, [r7, #12]
 8010194:	1ad3      	subs	r3, r2, r3
 8010196:	4a3a      	ldr	r2, [pc, #232]	@ (8010280 <HAL_RCC_ClockConfig+0x274>)
 8010198:	4293      	cmp	r3, r2
 801019a:	d901      	bls.n	80101a0 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 801019c:	2303      	movs	r3, #3
 801019e:	e068      	b.n	8010272 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80101a0:	4b38      	ldr	r3, [pc, #224]	@ (8010284 <HAL_RCC_ClockConfig+0x278>)
 80101a2:	68db      	ldr	r3, [r3, #12]
 80101a4:	220c      	movs	r2, #12
 80101a6:	4013      	ands	r3, r2
 80101a8:	d1f0      	bne.n	801018c <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80101aa:	4b34      	ldr	r3, [pc, #208]	@ (801027c <HAL_RCC_ClockConfig+0x270>)
 80101ac:	681b      	ldr	r3, [r3, #0]
 80101ae:	2201      	movs	r2, #1
 80101b0:	4013      	ands	r3, r2
 80101b2:	683a      	ldr	r2, [r7, #0]
 80101b4:	429a      	cmp	r2, r3
 80101b6:	d21e      	bcs.n	80101f6 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80101b8:	4b30      	ldr	r3, [pc, #192]	@ (801027c <HAL_RCC_ClockConfig+0x270>)
 80101ba:	681b      	ldr	r3, [r3, #0]
 80101bc:	2201      	movs	r2, #1
 80101be:	4393      	bics	r3, r2
 80101c0:	0019      	movs	r1, r3
 80101c2:	4b2e      	ldr	r3, [pc, #184]	@ (801027c <HAL_RCC_ClockConfig+0x270>)
 80101c4:	683a      	ldr	r2, [r7, #0]
 80101c6:	430a      	orrs	r2, r1
 80101c8:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80101ca:	f7f9 fdd1 	bl	8009d70 <HAL_GetTick>
 80101ce:	0003      	movs	r3, r0
 80101d0:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80101d2:	e009      	b.n	80101e8 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80101d4:	f7f9 fdcc 	bl	8009d70 <HAL_GetTick>
 80101d8:	0002      	movs	r2, r0
 80101da:	68fb      	ldr	r3, [r7, #12]
 80101dc:	1ad3      	subs	r3, r2, r3
 80101de:	4a28      	ldr	r2, [pc, #160]	@ (8010280 <HAL_RCC_ClockConfig+0x274>)
 80101e0:	4293      	cmp	r3, r2
 80101e2:	d901      	bls.n	80101e8 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80101e4:	2303      	movs	r3, #3
 80101e6:	e044      	b.n	8010272 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80101e8:	4b24      	ldr	r3, [pc, #144]	@ (801027c <HAL_RCC_ClockConfig+0x270>)
 80101ea:	681b      	ldr	r3, [r3, #0]
 80101ec:	2201      	movs	r2, #1
 80101ee:	4013      	ands	r3, r2
 80101f0:	683a      	ldr	r2, [r7, #0]
 80101f2:	429a      	cmp	r2, r3
 80101f4:	d1ee      	bne.n	80101d4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	681b      	ldr	r3, [r3, #0]
 80101fa:	2204      	movs	r2, #4
 80101fc:	4013      	ands	r3, r2
 80101fe:	d009      	beq.n	8010214 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8010200:	4b20      	ldr	r3, [pc, #128]	@ (8010284 <HAL_RCC_ClockConfig+0x278>)
 8010202:	68db      	ldr	r3, [r3, #12]
 8010204:	4a20      	ldr	r2, [pc, #128]	@ (8010288 <HAL_RCC_ClockConfig+0x27c>)
 8010206:	4013      	ands	r3, r2
 8010208:	0019      	movs	r1, r3
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	68da      	ldr	r2, [r3, #12]
 801020e:	4b1d      	ldr	r3, [pc, #116]	@ (8010284 <HAL_RCC_ClockConfig+0x278>)
 8010210:	430a      	orrs	r2, r1
 8010212:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	681b      	ldr	r3, [r3, #0]
 8010218:	2208      	movs	r2, #8
 801021a:	4013      	ands	r3, r2
 801021c:	d00a      	beq.n	8010234 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 801021e:	4b19      	ldr	r3, [pc, #100]	@ (8010284 <HAL_RCC_ClockConfig+0x278>)
 8010220:	68db      	ldr	r3, [r3, #12]
 8010222:	4a1a      	ldr	r2, [pc, #104]	@ (801028c <HAL_RCC_ClockConfig+0x280>)
 8010224:	4013      	ands	r3, r2
 8010226:	0019      	movs	r1, r3
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	691b      	ldr	r3, [r3, #16]
 801022c:	00da      	lsls	r2, r3, #3
 801022e:	4b15      	ldr	r3, [pc, #84]	@ (8010284 <HAL_RCC_ClockConfig+0x278>)
 8010230:	430a      	orrs	r2, r1
 8010232:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8010234:	f000 f832 	bl	801029c <HAL_RCC_GetSysClockFreq>
 8010238:	0001      	movs	r1, r0
 801023a:	4b12      	ldr	r3, [pc, #72]	@ (8010284 <HAL_RCC_ClockConfig+0x278>)
 801023c:	68db      	ldr	r3, [r3, #12]
 801023e:	091b      	lsrs	r3, r3, #4
 8010240:	220f      	movs	r2, #15
 8010242:	4013      	ands	r3, r2
 8010244:	4a12      	ldr	r2, [pc, #72]	@ (8010290 <HAL_RCC_ClockConfig+0x284>)
 8010246:	5cd3      	ldrb	r3, [r2, r3]
 8010248:	000a      	movs	r2, r1
 801024a:	40da      	lsrs	r2, r3
 801024c:	4b11      	ldr	r3, [pc, #68]	@ (8010294 <HAL_RCC_ClockConfig+0x288>)
 801024e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8010250:	4b11      	ldr	r3, [pc, #68]	@ (8010298 <HAL_RCC_ClockConfig+0x28c>)
 8010252:	681b      	ldr	r3, [r3, #0]
 8010254:	250b      	movs	r5, #11
 8010256:	197c      	adds	r4, r7, r5
 8010258:	0018      	movs	r0, r3
 801025a:	f7f9 fd43 	bl	8009ce4 <HAL_InitTick>
 801025e:	0003      	movs	r3, r0
 8010260:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8010262:	197b      	adds	r3, r7, r5
 8010264:	781b      	ldrb	r3, [r3, #0]
 8010266:	2b00      	cmp	r3, #0
 8010268:	d002      	beq.n	8010270 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 801026a:	197b      	adds	r3, r7, r5
 801026c:	781b      	ldrb	r3, [r3, #0]
 801026e:	e000      	b.n	8010272 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8010270:	2300      	movs	r3, #0
}
 8010272:	0018      	movs	r0, r3
 8010274:	46bd      	mov	sp, r7
 8010276:	b004      	add	sp, #16
 8010278:	bdb0      	pop	{r4, r5, r7, pc}
 801027a:	46c0      	nop			@ (mov r8, r8)
 801027c:	40022000 	.word	0x40022000
 8010280:	00001388 	.word	0x00001388
 8010284:	40021000 	.word	0x40021000
 8010288:	fffff8ff 	.word	0xfffff8ff
 801028c:	ffffc7ff 	.word	0xffffc7ff
 8010290:	0801b994 	.word	0x0801b994
 8010294:	200000a4 	.word	0x200000a4
 8010298:	200000b8 	.word	0x200000b8

0801029c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801029c:	b5b0      	push	{r4, r5, r7, lr}
 801029e:	b08e      	sub	sp, #56	@ 0x38
 80102a0:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80102a2:	4b4c      	ldr	r3, [pc, #304]	@ (80103d4 <HAL_RCC_GetSysClockFreq+0x138>)
 80102a4:	68db      	ldr	r3, [r3, #12]
 80102a6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80102a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80102aa:	230c      	movs	r3, #12
 80102ac:	4013      	ands	r3, r2
 80102ae:	2b0c      	cmp	r3, #12
 80102b0:	d014      	beq.n	80102dc <HAL_RCC_GetSysClockFreq+0x40>
 80102b2:	d900      	bls.n	80102b6 <HAL_RCC_GetSysClockFreq+0x1a>
 80102b4:	e07b      	b.n	80103ae <HAL_RCC_GetSysClockFreq+0x112>
 80102b6:	2b04      	cmp	r3, #4
 80102b8:	d002      	beq.n	80102c0 <HAL_RCC_GetSysClockFreq+0x24>
 80102ba:	2b08      	cmp	r3, #8
 80102bc:	d00b      	beq.n	80102d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80102be:	e076      	b.n	80103ae <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80102c0:	4b44      	ldr	r3, [pc, #272]	@ (80103d4 <HAL_RCC_GetSysClockFreq+0x138>)
 80102c2:	681b      	ldr	r3, [r3, #0]
 80102c4:	2210      	movs	r2, #16
 80102c6:	4013      	ands	r3, r2
 80102c8:	d002      	beq.n	80102d0 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80102ca:	4b43      	ldr	r3, [pc, #268]	@ (80103d8 <HAL_RCC_GetSysClockFreq+0x13c>)
 80102cc:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80102ce:	e07c      	b.n	80103ca <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 80102d0:	4b42      	ldr	r3, [pc, #264]	@ (80103dc <HAL_RCC_GetSysClockFreq+0x140>)
 80102d2:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80102d4:	e079      	b.n	80103ca <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80102d6:	4b42      	ldr	r3, [pc, #264]	@ (80103e0 <HAL_RCC_GetSysClockFreq+0x144>)
 80102d8:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80102da:	e076      	b.n	80103ca <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80102dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80102de:	0c9a      	lsrs	r2, r3, #18
 80102e0:	230f      	movs	r3, #15
 80102e2:	401a      	ands	r2, r3
 80102e4:	4b3f      	ldr	r3, [pc, #252]	@ (80103e4 <HAL_RCC_GetSysClockFreq+0x148>)
 80102e6:	5c9b      	ldrb	r3, [r3, r2]
 80102e8:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80102ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80102ec:	0d9a      	lsrs	r2, r3, #22
 80102ee:	2303      	movs	r3, #3
 80102f0:	4013      	ands	r3, r2
 80102f2:	3301      	adds	r3, #1
 80102f4:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80102f6:	4b37      	ldr	r3, [pc, #220]	@ (80103d4 <HAL_RCC_GetSysClockFreq+0x138>)
 80102f8:	68da      	ldr	r2, [r3, #12]
 80102fa:	2380      	movs	r3, #128	@ 0x80
 80102fc:	025b      	lsls	r3, r3, #9
 80102fe:	4013      	ands	r3, r2
 8010300:	d01a      	beq.n	8010338 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8010302:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010304:	61bb      	str	r3, [r7, #24]
 8010306:	2300      	movs	r3, #0
 8010308:	61fb      	str	r3, [r7, #28]
 801030a:	4a35      	ldr	r2, [pc, #212]	@ (80103e0 <HAL_RCC_GetSysClockFreq+0x144>)
 801030c:	2300      	movs	r3, #0
 801030e:	69b8      	ldr	r0, [r7, #24]
 8010310:	69f9      	ldr	r1, [r7, #28]
 8010312:	f7f0 f923 	bl	800055c <__aeabi_lmul>
 8010316:	0002      	movs	r2, r0
 8010318:	000b      	movs	r3, r1
 801031a:	0010      	movs	r0, r2
 801031c:	0019      	movs	r1, r3
 801031e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010320:	613b      	str	r3, [r7, #16]
 8010322:	2300      	movs	r3, #0
 8010324:	617b      	str	r3, [r7, #20]
 8010326:	693a      	ldr	r2, [r7, #16]
 8010328:	697b      	ldr	r3, [r7, #20]
 801032a:	f7f0 f8f7 	bl	800051c <__aeabi_uldivmod>
 801032e:	0002      	movs	r2, r0
 8010330:	000b      	movs	r3, r1
 8010332:	0013      	movs	r3, r2
 8010334:	637b      	str	r3, [r7, #52]	@ 0x34
 8010336:	e037      	b.n	80103a8 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8010338:	4b26      	ldr	r3, [pc, #152]	@ (80103d4 <HAL_RCC_GetSysClockFreq+0x138>)
 801033a:	681b      	ldr	r3, [r3, #0]
 801033c:	2210      	movs	r2, #16
 801033e:	4013      	ands	r3, r2
 8010340:	d01a      	beq.n	8010378 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8010342:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010344:	60bb      	str	r3, [r7, #8]
 8010346:	2300      	movs	r3, #0
 8010348:	60fb      	str	r3, [r7, #12]
 801034a:	4a23      	ldr	r2, [pc, #140]	@ (80103d8 <HAL_RCC_GetSysClockFreq+0x13c>)
 801034c:	2300      	movs	r3, #0
 801034e:	68b8      	ldr	r0, [r7, #8]
 8010350:	68f9      	ldr	r1, [r7, #12]
 8010352:	f7f0 f903 	bl	800055c <__aeabi_lmul>
 8010356:	0002      	movs	r2, r0
 8010358:	000b      	movs	r3, r1
 801035a:	0010      	movs	r0, r2
 801035c:	0019      	movs	r1, r3
 801035e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010360:	603b      	str	r3, [r7, #0]
 8010362:	2300      	movs	r3, #0
 8010364:	607b      	str	r3, [r7, #4]
 8010366:	683a      	ldr	r2, [r7, #0]
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	f7f0 f8d7 	bl	800051c <__aeabi_uldivmod>
 801036e:	0002      	movs	r2, r0
 8010370:	000b      	movs	r3, r1
 8010372:	0013      	movs	r3, r2
 8010374:	637b      	str	r3, [r7, #52]	@ 0x34
 8010376:	e017      	b.n	80103a8 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8010378:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801037a:	0018      	movs	r0, r3
 801037c:	2300      	movs	r3, #0
 801037e:	0019      	movs	r1, r3
 8010380:	4a16      	ldr	r2, [pc, #88]	@ (80103dc <HAL_RCC_GetSysClockFreq+0x140>)
 8010382:	2300      	movs	r3, #0
 8010384:	f7f0 f8ea 	bl	800055c <__aeabi_lmul>
 8010388:	0002      	movs	r2, r0
 801038a:	000b      	movs	r3, r1
 801038c:	0010      	movs	r0, r2
 801038e:	0019      	movs	r1, r3
 8010390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010392:	001c      	movs	r4, r3
 8010394:	2300      	movs	r3, #0
 8010396:	001d      	movs	r5, r3
 8010398:	0022      	movs	r2, r4
 801039a:	002b      	movs	r3, r5
 801039c:	f7f0 f8be 	bl	800051c <__aeabi_uldivmod>
 80103a0:	0002      	movs	r2, r0
 80103a2:	000b      	movs	r3, r1
 80103a4:	0013      	movs	r3, r2
 80103a6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 80103a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80103aa:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80103ac:	e00d      	b.n	80103ca <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80103ae:	4b09      	ldr	r3, [pc, #36]	@ (80103d4 <HAL_RCC_GetSysClockFreq+0x138>)
 80103b0:	685b      	ldr	r3, [r3, #4]
 80103b2:	0b5b      	lsrs	r3, r3, #13
 80103b4:	2207      	movs	r2, #7
 80103b6:	4013      	ands	r3, r2
 80103b8:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80103ba:	6a3b      	ldr	r3, [r7, #32]
 80103bc:	3301      	adds	r3, #1
 80103be:	2280      	movs	r2, #128	@ 0x80
 80103c0:	0212      	lsls	r2, r2, #8
 80103c2:	409a      	lsls	r2, r3
 80103c4:	0013      	movs	r3, r2
 80103c6:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80103c8:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80103ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 80103cc:	0018      	movs	r0, r3
 80103ce:	46bd      	mov	sp, r7
 80103d0:	b00e      	add	sp, #56	@ 0x38
 80103d2:	bdb0      	pop	{r4, r5, r7, pc}
 80103d4:	40021000 	.word	0x40021000
 80103d8:	003d0900 	.word	0x003d0900
 80103dc:	00f42400 	.word	0x00f42400
 80103e0:	007a1200 	.word	0x007a1200
 80103e4:	0801b9ac 	.word	0x0801b9ac

080103e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80103e8:	b580      	push	{r7, lr}
 80103ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80103ec:	4b02      	ldr	r3, [pc, #8]	@ (80103f8 <HAL_RCC_GetHCLKFreq+0x10>)
 80103ee:	681b      	ldr	r3, [r3, #0]
}
 80103f0:	0018      	movs	r0, r3
 80103f2:	46bd      	mov	sp, r7
 80103f4:	bd80      	pop	{r7, pc}
 80103f6:	46c0      	nop			@ (mov r8, r8)
 80103f8:	200000a4 	.word	0x200000a4

080103fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80103fc:	b580      	push	{r7, lr}
 80103fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8010400:	f7ff fff2 	bl	80103e8 <HAL_RCC_GetHCLKFreq>
 8010404:	0001      	movs	r1, r0
 8010406:	4b06      	ldr	r3, [pc, #24]	@ (8010420 <HAL_RCC_GetPCLK1Freq+0x24>)
 8010408:	68db      	ldr	r3, [r3, #12]
 801040a:	0a1b      	lsrs	r3, r3, #8
 801040c:	2207      	movs	r2, #7
 801040e:	4013      	ands	r3, r2
 8010410:	4a04      	ldr	r2, [pc, #16]	@ (8010424 <HAL_RCC_GetPCLK1Freq+0x28>)
 8010412:	5cd3      	ldrb	r3, [r2, r3]
 8010414:	40d9      	lsrs	r1, r3
 8010416:	000b      	movs	r3, r1
}
 8010418:	0018      	movs	r0, r3
 801041a:	46bd      	mov	sp, r7
 801041c:	bd80      	pop	{r7, pc}
 801041e:	46c0      	nop			@ (mov r8, r8)
 8010420:	40021000 	.word	0x40021000
 8010424:	0801b9a4 	.word	0x0801b9a4

08010428 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8010428:	b580      	push	{r7, lr}
 801042a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 801042c:	f7ff ffdc 	bl	80103e8 <HAL_RCC_GetHCLKFreq>
 8010430:	0001      	movs	r1, r0
 8010432:	4b06      	ldr	r3, [pc, #24]	@ (801044c <HAL_RCC_GetPCLK2Freq+0x24>)
 8010434:	68db      	ldr	r3, [r3, #12]
 8010436:	0adb      	lsrs	r3, r3, #11
 8010438:	2207      	movs	r2, #7
 801043a:	4013      	ands	r3, r2
 801043c:	4a04      	ldr	r2, [pc, #16]	@ (8010450 <HAL_RCC_GetPCLK2Freq+0x28>)
 801043e:	5cd3      	ldrb	r3, [r2, r3]
 8010440:	40d9      	lsrs	r1, r3
 8010442:	000b      	movs	r3, r1
}
 8010444:	0018      	movs	r0, r3
 8010446:	46bd      	mov	sp, r7
 8010448:	bd80      	pop	{r7, pc}
 801044a:	46c0      	nop			@ (mov r8, r8)
 801044c:	40021000 	.word	0x40021000
 8010450:	0801b9a4 	.word	0x0801b9a4

08010454 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8010454:	b580      	push	{r7, lr}
 8010456:	b086      	sub	sp, #24
 8010458:	af00      	add	r7, sp, #0
 801045a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 801045c:	2017      	movs	r0, #23
 801045e:	183b      	adds	r3, r7, r0
 8010460:	2200      	movs	r2, #0
 8010462:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	681b      	ldr	r3, [r3, #0]
 8010468:	2220      	movs	r2, #32
 801046a:	4013      	ands	r3, r2
 801046c:	d100      	bne.n	8010470 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 801046e:	e0c7      	b.n	8010600 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8010470:	4b9b      	ldr	r3, [pc, #620]	@ (80106e0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010472:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010474:	2380      	movs	r3, #128	@ 0x80
 8010476:	055b      	lsls	r3, r3, #21
 8010478:	4013      	ands	r3, r2
 801047a:	d109      	bne.n	8010490 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801047c:	4b98      	ldr	r3, [pc, #608]	@ (80106e0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801047e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010480:	4b97      	ldr	r3, [pc, #604]	@ (80106e0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010482:	2180      	movs	r1, #128	@ 0x80
 8010484:	0549      	lsls	r1, r1, #21
 8010486:	430a      	orrs	r2, r1
 8010488:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 801048a:	183b      	adds	r3, r7, r0
 801048c:	2201      	movs	r2, #1
 801048e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8010490:	4b94      	ldr	r3, [pc, #592]	@ (80106e4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8010492:	681a      	ldr	r2, [r3, #0]
 8010494:	2380      	movs	r3, #128	@ 0x80
 8010496:	005b      	lsls	r3, r3, #1
 8010498:	4013      	ands	r3, r2
 801049a:	d11a      	bne.n	80104d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 801049c:	4b91      	ldr	r3, [pc, #580]	@ (80106e4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 801049e:	681a      	ldr	r2, [r3, #0]
 80104a0:	4b90      	ldr	r3, [pc, #576]	@ (80106e4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80104a2:	2180      	movs	r1, #128	@ 0x80
 80104a4:	0049      	lsls	r1, r1, #1
 80104a6:	430a      	orrs	r2, r1
 80104a8:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80104aa:	f7f9 fc61 	bl	8009d70 <HAL_GetTick>
 80104ae:	0003      	movs	r3, r0
 80104b0:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80104b2:	e008      	b.n	80104c6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80104b4:	f7f9 fc5c 	bl	8009d70 <HAL_GetTick>
 80104b8:	0002      	movs	r2, r0
 80104ba:	693b      	ldr	r3, [r7, #16]
 80104bc:	1ad3      	subs	r3, r2, r3
 80104be:	2b64      	cmp	r3, #100	@ 0x64
 80104c0:	d901      	bls.n	80104c6 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 80104c2:	2303      	movs	r3, #3
 80104c4:	e107      	b.n	80106d6 <HAL_RCCEx_PeriphCLKConfig+0x282>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80104c6:	4b87      	ldr	r3, [pc, #540]	@ (80106e4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80104c8:	681a      	ldr	r2, [r3, #0]
 80104ca:	2380      	movs	r3, #128	@ 0x80
 80104cc:	005b      	lsls	r3, r3, #1
 80104ce:	4013      	ands	r3, r2
 80104d0:	d0f0      	beq.n	80104b4 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80104d2:	4b83      	ldr	r3, [pc, #524]	@ (80106e0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80104d4:	681a      	ldr	r2, [r3, #0]
 80104d6:	23c0      	movs	r3, #192	@ 0xc0
 80104d8:	039b      	lsls	r3, r3, #14
 80104da:	4013      	ands	r3, r2
 80104dc:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	685a      	ldr	r2, [r3, #4]
 80104e2:	23c0      	movs	r3, #192	@ 0xc0
 80104e4:	039b      	lsls	r3, r3, #14
 80104e6:	4013      	ands	r3, r2
 80104e8:	68fa      	ldr	r2, [r7, #12]
 80104ea:	429a      	cmp	r2, r3
 80104ec:	d013      	beq.n	8010516 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	685a      	ldr	r2, [r3, #4]
 80104f2:	23c0      	movs	r3, #192	@ 0xc0
 80104f4:	029b      	lsls	r3, r3, #10
 80104f6:	401a      	ands	r2, r3
 80104f8:	23c0      	movs	r3, #192	@ 0xc0
 80104fa:	029b      	lsls	r3, r3, #10
 80104fc:	429a      	cmp	r2, r3
 80104fe:	d10a      	bne.n	8010516 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8010500:	4b77      	ldr	r3, [pc, #476]	@ (80106e0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010502:	681a      	ldr	r2, [r3, #0]
 8010504:	2380      	movs	r3, #128	@ 0x80
 8010506:	029b      	lsls	r3, r3, #10
 8010508:	401a      	ands	r2, r3
 801050a:	2380      	movs	r3, #128	@ 0x80
 801050c:	029b      	lsls	r3, r3, #10
 801050e:	429a      	cmp	r2, r3
 8010510:	d101      	bne.n	8010516 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8010512:	2301      	movs	r3, #1
 8010514:	e0df      	b.n	80106d6 <HAL_RCCEx_PeriphCLKConfig+0x282>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8010516:	4b72      	ldr	r3, [pc, #456]	@ (80106e0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010518:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801051a:	23c0      	movs	r3, #192	@ 0xc0
 801051c:	029b      	lsls	r3, r3, #10
 801051e:	4013      	ands	r3, r2
 8010520:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8010522:	68fb      	ldr	r3, [r7, #12]
 8010524:	2b00      	cmp	r3, #0
 8010526:	d03b      	beq.n	80105a0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	685a      	ldr	r2, [r3, #4]
 801052c:	23c0      	movs	r3, #192	@ 0xc0
 801052e:	029b      	lsls	r3, r3, #10
 8010530:	4013      	ands	r3, r2
 8010532:	68fa      	ldr	r2, [r7, #12]
 8010534:	429a      	cmp	r2, r3
 8010536:	d033      	beq.n	80105a0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	681b      	ldr	r3, [r3, #0]
 801053c:	2220      	movs	r2, #32
 801053e:	4013      	ands	r3, r2
 8010540:	d02e      	beq.n	80105a0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8010542:	4b67      	ldr	r3, [pc, #412]	@ (80106e0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010544:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010546:	4a68      	ldr	r2, [pc, #416]	@ (80106e8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8010548:	4013      	ands	r3, r2
 801054a:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 801054c:	4b64      	ldr	r3, [pc, #400]	@ (80106e0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801054e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010550:	4b63      	ldr	r3, [pc, #396]	@ (80106e0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010552:	2180      	movs	r1, #128	@ 0x80
 8010554:	0309      	lsls	r1, r1, #12
 8010556:	430a      	orrs	r2, r1
 8010558:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 801055a:	4b61      	ldr	r3, [pc, #388]	@ (80106e0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801055c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801055e:	4b60      	ldr	r3, [pc, #384]	@ (80106e0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010560:	4962      	ldr	r1, [pc, #392]	@ (80106ec <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8010562:	400a      	ands	r2, r1
 8010564:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8010566:	4b5e      	ldr	r3, [pc, #376]	@ (80106e0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010568:	68fa      	ldr	r2, [r7, #12]
 801056a:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 801056c:	68fa      	ldr	r2, [r7, #12]
 801056e:	2380      	movs	r3, #128	@ 0x80
 8010570:	005b      	lsls	r3, r3, #1
 8010572:	4013      	ands	r3, r2
 8010574:	d014      	beq.n	80105a0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8010576:	f7f9 fbfb 	bl	8009d70 <HAL_GetTick>
 801057a:	0003      	movs	r3, r0
 801057c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801057e:	e009      	b.n	8010594 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8010580:	f7f9 fbf6 	bl	8009d70 <HAL_GetTick>
 8010584:	0002      	movs	r2, r0
 8010586:	693b      	ldr	r3, [r7, #16]
 8010588:	1ad3      	subs	r3, r2, r3
 801058a:	4a59      	ldr	r2, [pc, #356]	@ (80106f0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 801058c:	4293      	cmp	r3, r2
 801058e:	d901      	bls.n	8010594 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8010590:	2303      	movs	r3, #3
 8010592:	e0a0      	b.n	80106d6 <HAL_RCCEx_PeriphCLKConfig+0x282>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8010594:	4b52      	ldr	r3, [pc, #328]	@ (80106e0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010596:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010598:	2380      	movs	r3, #128	@ 0x80
 801059a:	009b      	lsls	r3, r3, #2
 801059c:	4013      	ands	r3, r2
 801059e:	d0ef      	beq.n	8010580 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	681b      	ldr	r3, [r3, #0]
 80105a4:	2220      	movs	r2, #32
 80105a6:	4013      	ands	r3, r2
 80105a8:	d01f      	beq.n	80105ea <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	685a      	ldr	r2, [r3, #4]
 80105ae:	23c0      	movs	r3, #192	@ 0xc0
 80105b0:	029b      	lsls	r3, r3, #10
 80105b2:	401a      	ands	r2, r3
 80105b4:	23c0      	movs	r3, #192	@ 0xc0
 80105b6:	029b      	lsls	r3, r3, #10
 80105b8:	429a      	cmp	r2, r3
 80105ba:	d10c      	bne.n	80105d6 <HAL_RCCEx_PeriphCLKConfig+0x182>
 80105bc:	4b48      	ldr	r3, [pc, #288]	@ (80106e0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80105be:	681b      	ldr	r3, [r3, #0]
 80105c0:	4a4c      	ldr	r2, [pc, #304]	@ (80106f4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80105c2:	4013      	ands	r3, r2
 80105c4:	0019      	movs	r1, r3
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	685a      	ldr	r2, [r3, #4]
 80105ca:	23c0      	movs	r3, #192	@ 0xc0
 80105cc:	039b      	lsls	r3, r3, #14
 80105ce:	401a      	ands	r2, r3
 80105d0:	4b43      	ldr	r3, [pc, #268]	@ (80106e0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80105d2:	430a      	orrs	r2, r1
 80105d4:	601a      	str	r2, [r3, #0]
 80105d6:	4b42      	ldr	r3, [pc, #264]	@ (80106e0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80105d8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	685a      	ldr	r2, [r3, #4]
 80105de:	23c0      	movs	r3, #192	@ 0xc0
 80105e0:	029b      	lsls	r3, r3, #10
 80105e2:	401a      	ands	r2, r3
 80105e4:	4b3e      	ldr	r3, [pc, #248]	@ (80106e0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80105e6:	430a      	orrs	r2, r1
 80105e8:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80105ea:	2317      	movs	r3, #23
 80105ec:	18fb      	adds	r3, r7, r3
 80105ee:	781b      	ldrb	r3, [r3, #0]
 80105f0:	2b01      	cmp	r3, #1
 80105f2:	d105      	bne.n	8010600 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80105f4:	4b3a      	ldr	r3, [pc, #232]	@ (80106e0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80105f6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80105f8:	4b39      	ldr	r3, [pc, #228]	@ (80106e0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80105fa:	493f      	ldr	r1, [pc, #252]	@ (80106f8 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 80105fc:	400a      	ands	r2, r1
 80105fe:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	681b      	ldr	r3, [r3, #0]
 8010604:	2201      	movs	r2, #1
 8010606:	4013      	ands	r3, r2
 8010608:	d009      	beq.n	801061e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 801060a:	4b35      	ldr	r3, [pc, #212]	@ (80106e0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801060c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801060e:	2203      	movs	r2, #3
 8010610:	4393      	bics	r3, r2
 8010612:	0019      	movs	r1, r3
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	689a      	ldr	r2, [r3, #8]
 8010618:	4b31      	ldr	r3, [pc, #196]	@ (80106e0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801061a:	430a      	orrs	r2, r1
 801061c:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 801061e:	687b      	ldr	r3, [r7, #4]
 8010620:	681b      	ldr	r3, [r3, #0]
 8010622:	2202      	movs	r2, #2
 8010624:	4013      	ands	r3, r2
 8010626:	d009      	beq.n	801063c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8010628:	4b2d      	ldr	r3, [pc, #180]	@ (80106e0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801062a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801062c:	220c      	movs	r2, #12
 801062e:	4393      	bics	r3, r2
 8010630:	0019      	movs	r1, r3
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	68da      	ldr	r2, [r3, #12]
 8010636:	4b2a      	ldr	r3, [pc, #168]	@ (80106e0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010638:	430a      	orrs	r2, r1
 801063a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	681b      	ldr	r3, [r3, #0]
 8010640:	2204      	movs	r2, #4
 8010642:	4013      	ands	r3, r2
 8010644:	d009      	beq.n	801065a <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8010646:	4b26      	ldr	r3, [pc, #152]	@ (80106e0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010648:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801064a:	4a2c      	ldr	r2, [pc, #176]	@ (80106fc <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 801064c:	4013      	ands	r3, r2
 801064e:	0019      	movs	r1, r3
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	691a      	ldr	r2, [r3, #16]
 8010654:	4b22      	ldr	r3, [pc, #136]	@ (80106e0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010656:	430a      	orrs	r2, r1
 8010658:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	681b      	ldr	r3, [r3, #0]
 801065e:	2208      	movs	r2, #8
 8010660:	4013      	ands	r3, r2
 8010662:	d009      	beq.n	8010678 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8010664:	4b1e      	ldr	r3, [pc, #120]	@ (80106e0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010666:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010668:	4a25      	ldr	r2, [pc, #148]	@ (8010700 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 801066a:	4013      	ands	r3, r2
 801066c:	0019      	movs	r1, r3
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	695a      	ldr	r2, [r3, #20]
 8010672:	4b1b      	ldr	r3, [pc, #108]	@ (80106e0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010674:	430a      	orrs	r2, r1
 8010676:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	681a      	ldr	r2, [r3, #0]
 801067c:	2380      	movs	r3, #128	@ 0x80
 801067e:	005b      	lsls	r3, r3, #1
 8010680:	4013      	ands	r3, r2
 8010682:	d009      	beq.n	8010698 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8010684:	4b16      	ldr	r3, [pc, #88]	@ (80106e0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010686:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010688:	4a17      	ldr	r2, [pc, #92]	@ (80106e8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 801068a:	4013      	ands	r3, r2
 801068c:	0019      	movs	r1, r3
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	699a      	ldr	r2, [r3, #24]
 8010692:	4b13      	ldr	r3, [pc, #76]	@ (80106e0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010694:	430a      	orrs	r2, r1
 8010696:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8010698:	687b      	ldr	r3, [r7, #4]
 801069a:	681b      	ldr	r3, [r3, #0]
 801069c:	2240      	movs	r2, #64	@ 0x40
 801069e:	4013      	ands	r3, r2
 80106a0:	d009      	beq.n	80106b6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80106a2:	4b0f      	ldr	r3, [pc, #60]	@ (80106e0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80106a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80106a6:	4a17      	ldr	r2, [pc, #92]	@ (8010704 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 80106a8:	4013      	ands	r3, r2
 80106aa:	0019      	movs	r1, r3
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	6a1a      	ldr	r2, [r3, #32]
 80106b0:	4b0b      	ldr	r3, [pc, #44]	@ (80106e0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80106b2:	430a      	orrs	r2, r1
 80106b4:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	681b      	ldr	r3, [r3, #0]
 80106ba:	2280      	movs	r2, #128	@ 0x80
 80106bc:	4013      	ands	r3, r2
 80106be:	d009      	beq.n	80106d4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80106c0:	4b07      	ldr	r3, [pc, #28]	@ (80106e0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80106c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80106c4:	4a10      	ldr	r2, [pc, #64]	@ (8010708 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 80106c6:	4013      	ands	r3, r2
 80106c8:	0019      	movs	r1, r3
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	69da      	ldr	r2, [r3, #28]
 80106ce:	4b04      	ldr	r3, [pc, #16]	@ (80106e0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80106d0:	430a      	orrs	r2, r1
 80106d2:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80106d4:	2300      	movs	r3, #0
}
 80106d6:	0018      	movs	r0, r3
 80106d8:	46bd      	mov	sp, r7
 80106da:	b006      	add	sp, #24
 80106dc:	bd80      	pop	{r7, pc}
 80106de:	46c0      	nop			@ (mov r8, r8)
 80106e0:	40021000 	.word	0x40021000
 80106e4:	40007000 	.word	0x40007000
 80106e8:	fffcffff 	.word	0xfffcffff
 80106ec:	fff7ffff 	.word	0xfff7ffff
 80106f0:	00001388 	.word	0x00001388
 80106f4:	ffcfffff 	.word	0xffcfffff
 80106f8:	efffffff 	.word	0xefffffff
 80106fc:	fffff3ff 	.word	0xfffff3ff
 8010700:	ffffcfff 	.word	0xffffcfff
 8010704:	fbffffff 	.word	0xfbffffff
 8010708:	fff3ffff 	.word	0xfff3ffff

0801070c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 801070c:	b5b0      	push	{r4, r5, r7, lr}
 801070e:	b084      	sub	sp, #16
 8010710:	af00      	add	r7, sp, #0
 8010712:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8010714:	230f      	movs	r3, #15
 8010716:	18fb      	adds	r3, r7, r3
 8010718:	2201      	movs	r2, #1
 801071a:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	2b00      	cmp	r3, #0
 8010720:	d101      	bne.n	8010726 <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 8010722:	2301      	movs	r3, #1
 8010724:	e088      	b.n	8010838 <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	2221      	movs	r2, #33	@ 0x21
 801072a:	5c9b      	ldrb	r3, [r3, r2]
 801072c:	b2db      	uxtb	r3, r3
 801072e:	2b00      	cmp	r3, #0
 8010730:	d107      	bne.n	8010742 <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8010732:	687b      	ldr	r3, [r7, #4]
 8010734:	2220      	movs	r2, #32
 8010736:	2100      	movs	r1, #0
 8010738:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	0018      	movs	r0, r3
 801073e:	f7f6 fdcd 	bl	80072dc <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	2221      	movs	r2, #33	@ 0x21
 8010746:	2102      	movs	r1, #2
 8010748:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	681b      	ldr	r3, [r3, #0]
 801074e:	68db      	ldr	r3, [r3, #12]
 8010750:	2210      	movs	r2, #16
 8010752:	4013      	ands	r3, r2
 8010754:	2b10      	cmp	r3, #16
 8010756:	d05f      	beq.n	8010818 <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	681b      	ldr	r3, [r3, #0]
 801075c:	22ca      	movs	r2, #202	@ 0xca
 801075e:	625a      	str	r2, [r3, #36]	@ 0x24
 8010760:	687b      	ldr	r3, [r7, #4]
 8010762:	681b      	ldr	r3, [r3, #0]
 8010764:	2253      	movs	r2, #83	@ 0x53
 8010766:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8010768:	250f      	movs	r5, #15
 801076a:	197c      	adds	r4, r7, r5
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	0018      	movs	r0, r3
 8010770:	f000 f890 	bl	8010894 <RTC_EnterInitMode>
 8010774:	0003      	movs	r3, r0
 8010776:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 8010778:	0028      	movs	r0, r5
 801077a:	183b      	adds	r3, r7, r0
 801077c:	781b      	ldrb	r3, [r3, #0]
 801077e:	2b00      	cmp	r3, #0
 8010780:	d12c      	bne.n	80107dc <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	681b      	ldr	r3, [r3, #0]
 8010786:	689a      	ldr	r2, [r3, #8]
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	681b      	ldr	r3, [r3, #0]
 801078c:	492c      	ldr	r1, [pc, #176]	@ (8010840 <HAL_RTC_Init+0x134>)
 801078e:	400a      	ands	r2, r1
 8010790:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	681b      	ldr	r3, [r3, #0]
 8010796:	6899      	ldr	r1, [r3, #8]
 8010798:	687b      	ldr	r3, [r7, #4]
 801079a:	685a      	ldr	r2, [r3, #4]
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	691b      	ldr	r3, [r3, #16]
 80107a0:	431a      	orrs	r2, r3
 80107a2:	687b      	ldr	r3, [r7, #4]
 80107a4:	699b      	ldr	r3, [r3, #24]
 80107a6:	431a      	orrs	r2, r3
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	681b      	ldr	r3, [r3, #0]
 80107ac:	430a      	orrs	r2, r1
 80107ae:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80107b0:	687b      	ldr	r3, [r7, #4]
 80107b2:	681b      	ldr	r3, [r3, #0]
 80107b4:	687a      	ldr	r2, [r7, #4]
 80107b6:	68d2      	ldr	r2, [r2, #12]
 80107b8:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80107ba:	687b      	ldr	r3, [r7, #4]
 80107bc:	681b      	ldr	r3, [r3, #0]
 80107be:	6919      	ldr	r1, [r3, #16]
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	689b      	ldr	r3, [r3, #8]
 80107c4:	041a      	lsls	r2, r3, #16
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	681b      	ldr	r3, [r3, #0]
 80107ca:	430a      	orrs	r2, r1
 80107cc:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80107ce:	183c      	adds	r4, r7, r0
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	0018      	movs	r0, r3
 80107d4:	f000 f8a2 	bl	801091c <RTC_ExitInitMode>
 80107d8:	0003      	movs	r3, r0
 80107da:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 80107dc:	230f      	movs	r3, #15
 80107de:	18fb      	adds	r3, r7, r3
 80107e0:	781b      	ldrb	r3, [r3, #0]
 80107e2:	2b00      	cmp	r3, #0
 80107e4:	d113      	bne.n	801080e <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	681b      	ldr	r3, [r3, #0]
 80107ea:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	681b      	ldr	r3, [r3, #0]
 80107f0:	2103      	movs	r1, #3
 80107f2:	438a      	bics	r2, r1
 80107f4:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	681b      	ldr	r3, [r3, #0]
 80107fa:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80107fc:	687b      	ldr	r3, [r7, #4]
 80107fe:	69da      	ldr	r2, [r3, #28]
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	695b      	ldr	r3, [r3, #20]
 8010804:	431a      	orrs	r2, r3
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	681b      	ldr	r3, [r3, #0]
 801080a:	430a      	orrs	r2, r1
 801080c:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	681b      	ldr	r3, [r3, #0]
 8010812:	22ff      	movs	r2, #255	@ 0xff
 8010814:	625a      	str	r2, [r3, #36]	@ 0x24
 8010816:	e003      	b.n	8010820 <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8010818:	230f      	movs	r3, #15
 801081a:	18fb      	adds	r3, r7, r3
 801081c:	2200      	movs	r2, #0
 801081e:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 8010820:	230f      	movs	r3, #15
 8010822:	18fb      	adds	r3, r7, r3
 8010824:	781b      	ldrb	r3, [r3, #0]
 8010826:	2b00      	cmp	r3, #0
 8010828:	d103      	bne.n	8010832 <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	2221      	movs	r2, #33	@ 0x21
 801082e:	2101      	movs	r1, #1
 8010830:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8010832:	230f      	movs	r3, #15
 8010834:	18fb      	adds	r3, r7, r3
 8010836:	781b      	ldrb	r3, [r3, #0]
}
 8010838:	0018      	movs	r0, r3
 801083a:	46bd      	mov	sp, r7
 801083c:	b004      	add	sp, #16
 801083e:	bdb0      	pop	{r4, r5, r7, pc}
 8010840:	ff8fffbf 	.word	0xff8fffbf

08010844 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8010844:	b580      	push	{r7, lr}
 8010846:	b084      	sub	sp, #16
 8010848:	af00      	add	r7, sp, #0
 801084a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 801084c:	2300      	movs	r3, #0
 801084e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	681b      	ldr	r3, [r3, #0]
 8010854:	4a0e      	ldr	r2, [pc, #56]	@ (8010890 <HAL_RTC_WaitForSynchro+0x4c>)
 8010856:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8010858:	f7f9 fa8a 	bl	8009d70 <HAL_GetTick>
 801085c:	0003      	movs	r3, r0
 801085e:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8010860:	e00a      	b.n	8010878 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8010862:	f7f9 fa85 	bl	8009d70 <HAL_GetTick>
 8010866:	0002      	movs	r2, r0
 8010868:	68fb      	ldr	r3, [r7, #12]
 801086a:	1ad2      	subs	r2, r2, r3
 801086c:	23fa      	movs	r3, #250	@ 0xfa
 801086e:	009b      	lsls	r3, r3, #2
 8010870:	429a      	cmp	r2, r3
 8010872:	d901      	bls.n	8010878 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8010874:	2303      	movs	r3, #3
 8010876:	e006      	b.n	8010886 <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	681b      	ldr	r3, [r3, #0]
 801087c:	68db      	ldr	r3, [r3, #12]
 801087e:	2220      	movs	r2, #32
 8010880:	4013      	ands	r3, r2
 8010882:	d0ee      	beq.n	8010862 <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 8010884:	2300      	movs	r3, #0
}
 8010886:	0018      	movs	r0, r3
 8010888:	46bd      	mov	sp, r7
 801088a:	b004      	add	sp, #16
 801088c:	bd80      	pop	{r7, pc}
 801088e:	46c0      	nop			@ (mov r8, r8)
 8010890:	0001ff5f 	.word	0x0001ff5f

08010894 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8010894:	b580      	push	{r7, lr}
 8010896:	b084      	sub	sp, #16
 8010898:	af00      	add	r7, sp, #0
 801089a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 801089c:	2300      	movs	r3, #0
 801089e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80108a0:	230f      	movs	r3, #15
 80108a2:	18fb      	adds	r3, r7, r3
 80108a4:	2200      	movs	r2, #0
 80108a6:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	681b      	ldr	r3, [r3, #0]
 80108ac:	68db      	ldr	r3, [r3, #12]
 80108ae:	2240      	movs	r2, #64	@ 0x40
 80108b0:	4013      	ands	r3, r2
 80108b2:	d12c      	bne.n	801090e <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	681b      	ldr	r3, [r3, #0]
 80108b8:	68da      	ldr	r2, [r3, #12]
 80108ba:	687b      	ldr	r3, [r7, #4]
 80108bc:	681b      	ldr	r3, [r3, #0]
 80108be:	2180      	movs	r1, #128	@ 0x80
 80108c0:	430a      	orrs	r2, r1
 80108c2:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80108c4:	f7f9 fa54 	bl	8009d70 <HAL_GetTick>
 80108c8:	0003      	movs	r3, r0
 80108ca:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80108cc:	e014      	b.n	80108f8 <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80108ce:	f7f9 fa4f 	bl	8009d70 <HAL_GetTick>
 80108d2:	0002      	movs	r2, r0
 80108d4:	68bb      	ldr	r3, [r7, #8]
 80108d6:	1ad2      	subs	r2, r2, r3
 80108d8:	200f      	movs	r0, #15
 80108da:	183b      	adds	r3, r7, r0
 80108dc:	1839      	adds	r1, r7, r0
 80108de:	7809      	ldrb	r1, [r1, #0]
 80108e0:	7019      	strb	r1, [r3, #0]
 80108e2:	23fa      	movs	r3, #250	@ 0xfa
 80108e4:	009b      	lsls	r3, r3, #2
 80108e6:	429a      	cmp	r2, r3
 80108e8:	d906      	bls.n	80108f8 <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	2221      	movs	r2, #33	@ 0x21
 80108ee:	2104      	movs	r1, #4
 80108f0:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 80108f2:	183b      	adds	r3, r7, r0
 80108f4:	2201      	movs	r2, #1
 80108f6:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80108f8:	687b      	ldr	r3, [r7, #4]
 80108fa:	681b      	ldr	r3, [r3, #0]
 80108fc:	68db      	ldr	r3, [r3, #12]
 80108fe:	2240      	movs	r2, #64	@ 0x40
 8010900:	4013      	ands	r3, r2
 8010902:	d104      	bne.n	801090e <RTC_EnterInitMode+0x7a>
 8010904:	230f      	movs	r3, #15
 8010906:	18fb      	adds	r3, r7, r3
 8010908:	781b      	ldrb	r3, [r3, #0]
 801090a:	2b01      	cmp	r3, #1
 801090c:	d1df      	bne.n	80108ce <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 801090e:	230f      	movs	r3, #15
 8010910:	18fb      	adds	r3, r7, r3
 8010912:	781b      	ldrb	r3, [r3, #0]
}
 8010914:	0018      	movs	r0, r3
 8010916:	46bd      	mov	sp, r7
 8010918:	b004      	add	sp, #16
 801091a:	bd80      	pop	{r7, pc}

0801091c <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 801091c:	b590      	push	{r4, r7, lr}
 801091e:	b085      	sub	sp, #20
 8010920:	af00      	add	r7, sp, #0
 8010922:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8010924:	240f      	movs	r4, #15
 8010926:	193b      	adds	r3, r7, r4
 8010928:	2200      	movs	r2, #0
 801092a:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	681b      	ldr	r3, [r3, #0]
 8010930:	68da      	ldr	r2, [r3, #12]
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	681b      	ldr	r3, [r3, #0]
 8010936:	2180      	movs	r1, #128	@ 0x80
 8010938:	438a      	bics	r2, r1
 801093a:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 801093c:	687b      	ldr	r3, [r7, #4]
 801093e:	681b      	ldr	r3, [r3, #0]
 8010940:	689b      	ldr	r3, [r3, #8]
 8010942:	2220      	movs	r2, #32
 8010944:	4013      	ands	r3, r2
 8010946:	d10c      	bne.n	8010962 <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	0018      	movs	r0, r3
 801094c:	f7ff ff7a 	bl	8010844 <HAL_RTC_WaitForSynchro>
 8010950:	1e03      	subs	r3, r0, #0
 8010952:	d006      	beq.n	8010962 <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8010954:	687b      	ldr	r3, [r7, #4]
 8010956:	2221      	movs	r2, #33	@ 0x21
 8010958:	2104      	movs	r1, #4
 801095a:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 801095c:	193b      	adds	r3, r7, r4
 801095e:	2201      	movs	r2, #1
 8010960:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8010962:	230f      	movs	r3, #15
 8010964:	18fb      	adds	r3, r7, r3
 8010966:	781b      	ldrb	r3, [r3, #0]
}
 8010968:	0018      	movs	r0, r3
 801096a:	46bd      	mov	sp, r7
 801096c:	b005      	add	sp, #20
 801096e:	bd90      	pop	{r4, r7, pc}

08010970 <HAL_RTCEx_SetWakeUpTimer>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8010970:	b580      	push	{r7, lr}
 8010972:	b086      	sub	sp, #24
 8010974:	af00      	add	r7, sp, #0
 8010976:	60f8      	str	r0, [r7, #12]
 8010978:	60b9      	str	r1, [r7, #8]
 801097a:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 801097c:	2300      	movs	r3, #0
 801097e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8010980:	68fb      	ldr	r3, [r7, #12]
 8010982:	2220      	movs	r2, #32
 8010984:	5c9b      	ldrb	r3, [r3, r2]
 8010986:	2b01      	cmp	r3, #1
 8010988:	d101      	bne.n	801098e <HAL_RTCEx_SetWakeUpTimer+0x1e>
 801098a:	2302      	movs	r3, #2
 801098c:	e096      	b.n	8010abc <HAL_RTCEx_SetWakeUpTimer+0x14c>
 801098e:	68fb      	ldr	r3, [r7, #12]
 8010990:	2220      	movs	r2, #32
 8010992:	2101      	movs	r1, #1
 8010994:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8010996:	68fb      	ldr	r3, [r7, #12]
 8010998:	2221      	movs	r2, #33	@ 0x21
 801099a:	2102      	movs	r1, #2
 801099c:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801099e:	68fb      	ldr	r3, [r7, #12]
 80109a0:	681b      	ldr	r3, [r3, #0]
 80109a2:	22ca      	movs	r2, #202	@ 0xca
 80109a4:	625a      	str	r2, [r3, #36]	@ 0x24
 80109a6:	68fb      	ldr	r3, [r7, #12]
 80109a8:	681b      	ldr	r3, [r3, #0]
 80109aa:	2253      	movs	r2, #83	@ 0x53
 80109ac:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 80109ae:	68fb      	ldr	r3, [r7, #12]
 80109b0:	681b      	ldr	r3, [r3, #0]
 80109b2:	689a      	ldr	r2, [r3, #8]
 80109b4:	2380      	movs	r3, #128	@ 0x80
 80109b6:	00db      	lsls	r3, r3, #3
 80109b8:	4013      	ands	r3, r2
 80109ba:	d021      	beq.n	8010a00 <HAL_RTCEx_SetWakeUpTimer+0x90>
  {
    tickstart = HAL_GetTick();
 80109bc:	f7f9 f9d8 	bl	8009d70 <HAL_GetTick>
 80109c0:	0003      	movs	r3, r0
 80109c2:	617b      	str	r3, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U)
 80109c4:	e016      	b.n	80109f4 <HAL_RTCEx_SetWakeUpTimer+0x84>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80109c6:	f7f9 f9d3 	bl	8009d70 <HAL_GetTick>
 80109ca:	0002      	movs	r2, r0
 80109cc:	697b      	ldr	r3, [r7, #20]
 80109ce:	1ad2      	subs	r2, r2, r3
 80109d0:	23fa      	movs	r3, #250	@ 0xfa
 80109d2:	009b      	lsls	r3, r3, #2
 80109d4:	429a      	cmp	r2, r3
 80109d6:	d90d      	bls.n	80109f4 <HAL_RTCEx_SetWakeUpTimer+0x84>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80109d8:	68fb      	ldr	r3, [r7, #12]
 80109da:	681b      	ldr	r3, [r3, #0]
 80109dc:	22ff      	movs	r2, #255	@ 0xff
 80109de:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80109e0:	68fb      	ldr	r3, [r7, #12]
 80109e2:	2221      	movs	r2, #33	@ 0x21
 80109e4:	2103      	movs	r1, #3
 80109e6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80109e8:	68fb      	ldr	r3, [r7, #12]
 80109ea:	2220      	movs	r2, #32
 80109ec:	2100      	movs	r1, #0
 80109ee:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80109f0:	2303      	movs	r3, #3
 80109f2:	e063      	b.n	8010abc <HAL_RTCEx_SetWakeUpTimer+0x14c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U)
 80109f4:	68fb      	ldr	r3, [r7, #12]
 80109f6:	681b      	ldr	r3, [r3, #0]
 80109f8:	68db      	ldr	r3, [r3, #12]
 80109fa:	2204      	movs	r2, #4
 80109fc:	4013      	ands	r3, r2
 80109fe:	d1e2      	bne.n	80109c6 <HAL_RTCEx_SetWakeUpTimer+0x56>
      }
    }
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8010a00:	68fb      	ldr	r3, [r7, #12]
 8010a02:	681b      	ldr	r3, [r3, #0]
 8010a04:	689a      	ldr	r2, [r3, #8]
 8010a06:	68fb      	ldr	r3, [r7, #12]
 8010a08:	681b      	ldr	r3, [r3, #0]
 8010a0a:	492e      	ldr	r1, [pc, #184]	@ (8010ac4 <HAL_RTCEx_SetWakeUpTimer+0x154>)
 8010a0c:	400a      	ands	r2, r1
 8010a0e:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8010a10:	68fb      	ldr	r3, [r7, #12]
 8010a12:	681b      	ldr	r3, [r3, #0]
 8010a14:	68db      	ldr	r3, [r3, #12]
 8010a16:	22ff      	movs	r2, #255	@ 0xff
 8010a18:	401a      	ands	r2, r3
 8010a1a:	68fb      	ldr	r3, [r7, #12]
 8010a1c:	681b      	ldr	r3, [r3, #0]
 8010a1e:	492a      	ldr	r1, [pc, #168]	@ (8010ac8 <HAL_RTCEx_SetWakeUpTimer+0x158>)
 8010a20:	430a      	orrs	r2, r1
 8010a22:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8010a24:	f7f9 f9a4 	bl	8009d70 <HAL_GetTick>
 8010a28:	0003      	movs	r3, r0
 8010a2a:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8010a2c:	e016      	b.n	8010a5c <HAL_RTCEx_SetWakeUpTimer+0xec>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8010a2e:	f7f9 f99f 	bl	8009d70 <HAL_GetTick>
 8010a32:	0002      	movs	r2, r0
 8010a34:	697b      	ldr	r3, [r7, #20]
 8010a36:	1ad2      	subs	r2, r2, r3
 8010a38:	23fa      	movs	r3, #250	@ 0xfa
 8010a3a:	009b      	lsls	r3, r3, #2
 8010a3c:	429a      	cmp	r2, r3
 8010a3e:	d90d      	bls.n	8010a5c <HAL_RTCEx_SetWakeUpTimer+0xec>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8010a40:	68fb      	ldr	r3, [r7, #12]
 8010a42:	681b      	ldr	r3, [r3, #0]
 8010a44:	22ff      	movs	r2, #255	@ 0xff
 8010a46:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8010a48:	68fb      	ldr	r3, [r7, #12]
 8010a4a:	2221      	movs	r2, #33	@ 0x21
 8010a4c:	2103      	movs	r1, #3
 8010a4e:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8010a50:	68fb      	ldr	r3, [r7, #12]
 8010a52:	2220      	movs	r2, #32
 8010a54:	2100      	movs	r1, #0
 8010a56:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8010a58:	2303      	movs	r3, #3
 8010a5a:	e02f      	b.n	8010abc <HAL_RTCEx_SetWakeUpTimer+0x14c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8010a5c:	68fb      	ldr	r3, [r7, #12]
 8010a5e:	681b      	ldr	r3, [r3, #0]
 8010a60:	68db      	ldr	r3, [r3, #12]
 8010a62:	2204      	movs	r2, #4
 8010a64:	4013      	ands	r3, r2
 8010a66:	d0e2      	beq.n	8010a2e <HAL_RTCEx_SetWakeUpTimer+0xbe>
    }
  }

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8010a68:	68fb      	ldr	r3, [r7, #12]
 8010a6a:	681b      	ldr	r3, [r3, #0]
 8010a6c:	689a      	ldr	r2, [r3, #8]
 8010a6e:	68fb      	ldr	r3, [r7, #12]
 8010a70:	681b      	ldr	r3, [r3, #0]
 8010a72:	2107      	movs	r1, #7
 8010a74:	438a      	bics	r2, r1
 8010a76:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8010a78:	68fb      	ldr	r3, [r7, #12]
 8010a7a:	681b      	ldr	r3, [r3, #0]
 8010a7c:	6899      	ldr	r1, [r3, #8]
 8010a7e:	68fb      	ldr	r3, [r7, #12]
 8010a80:	681b      	ldr	r3, [r3, #0]
 8010a82:	687a      	ldr	r2, [r7, #4]
 8010a84:	430a      	orrs	r2, r1
 8010a86:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8010a88:	68fb      	ldr	r3, [r7, #12]
 8010a8a:	681b      	ldr	r3, [r3, #0]
 8010a8c:	68ba      	ldr	r2, [r7, #8]
 8010a8e:	615a      	str	r2, [r3, #20]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8010a90:	68fb      	ldr	r3, [r7, #12]
 8010a92:	681b      	ldr	r3, [r3, #0]
 8010a94:	689a      	ldr	r2, [r3, #8]
 8010a96:	68fb      	ldr	r3, [r7, #12]
 8010a98:	681b      	ldr	r3, [r3, #0]
 8010a9a:	2180      	movs	r1, #128	@ 0x80
 8010a9c:	00c9      	lsls	r1, r1, #3
 8010a9e:	430a      	orrs	r2, r1
 8010aa0:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8010aa2:	68fb      	ldr	r3, [r7, #12]
 8010aa4:	681b      	ldr	r3, [r3, #0]
 8010aa6:	22ff      	movs	r2, #255	@ 0xff
 8010aa8:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8010aaa:	68fb      	ldr	r3, [r7, #12]
 8010aac:	2221      	movs	r2, #33	@ 0x21
 8010aae:	2101      	movs	r1, #1
 8010ab0:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8010ab2:	68fb      	ldr	r3, [r7, #12]
 8010ab4:	2220      	movs	r2, #32
 8010ab6:	2100      	movs	r1, #0
 8010ab8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8010aba:	2300      	movs	r3, #0
}
 8010abc:	0018      	movs	r0, r3
 8010abe:	46bd      	mov	sp, r7
 8010ac0:	b006      	add	sp, #24
 8010ac2:	bd80      	pop	{r7, pc}
 8010ac4:	fffffbff 	.word	0xfffffbff
 8010ac8:	fffffb7f 	.word	0xfffffb7f

08010acc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8010acc:	b580      	push	{r7, lr}
 8010ace:	b082      	sub	sp, #8
 8010ad0:	af00      	add	r7, sp, #0
 8010ad2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	2b00      	cmp	r3, #0
 8010ad8:	d101      	bne.n	8010ade <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8010ada:	2301      	movs	r3, #1
 8010adc:	e032      	b.n	8010b44 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	2239      	movs	r2, #57	@ 0x39
 8010ae2:	5c9b      	ldrb	r3, [r3, r2]
 8010ae4:	b2db      	uxtb	r3, r3
 8010ae6:	2b00      	cmp	r3, #0
 8010ae8:	d107      	bne.n	8010afa <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	2238      	movs	r2, #56	@ 0x38
 8010aee:	2100      	movs	r1, #0
 8010af0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8010af2:	687b      	ldr	r3, [r7, #4]
 8010af4:	0018      	movs	r0, r3
 8010af6:	f7f8 faf3 	bl	80090e0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	2239      	movs	r2, #57	@ 0x39
 8010afe:	2102      	movs	r1, #2
 8010b00:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	681a      	ldr	r2, [r3, #0]
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	3304      	adds	r3, #4
 8010b0a:	0019      	movs	r1, r3
 8010b0c:	0010      	movs	r0, r2
 8010b0e:	f000 f975 	bl	8010dfc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8010b12:	687b      	ldr	r3, [r7, #4]
 8010b14:	223e      	movs	r2, #62	@ 0x3e
 8010b16:	2101      	movs	r1, #1
 8010b18:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010b1a:	687b      	ldr	r3, [r7, #4]
 8010b1c:	223a      	movs	r2, #58	@ 0x3a
 8010b1e:	2101      	movs	r1, #1
 8010b20:	5499      	strb	r1, [r3, r2]
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	223b      	movs	r2, #59	@ 0x3b
 8010b26:	2101      	movs	r1, #1
 8010b28:	5499      	strb	r1, [r3, r2]
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	223c      	movs	r2, #60	@ 0x3c
 8010b2e:	2101      	movs	r1, #1
 8010b30:	5499      	strb	r1, [r3, r2]
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	223d      	movs	r2, #61	@ 0x3d
 8010b36:	2101      	movs	r1, #1
 8010b38:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	2239      	movs	r2, #57	@ 0x39
 8010b3e:	2101      	movs	r1, #1
 8010b40:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8010b42:	2300      	movs	r3, #0
}
 8010b44:	0018      	movs	r0, r3
 8010b46:	46bd      	mov	sp, r7
 8010b48:	b002      	add	sp, #8
 8010b4a:	bd80      	pop	{r7, pc}

08010b4c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8010b4c:	b580      	push	{r7, lr}
 8010b4e:	b084      	sub	sp, #16
 8010b50:	af00      	add	r7, sp, #0
 8010b52:	6078      	str	r0, [r7, #4]
 8010b54:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8010b56:	683b      	ldr	r3, [r7, #0]
 8010b58:	2b00      	cmp	r3, #0
 8010b5a:	d108      	bne.n	8010b6e <HAL_TIM_PWM_Start+0x22>
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	223a      	movs	r2, #58	@ 0x3a
 8010b60:	5c9b      	ldrb	r3, [r3, r2]
 8010b62:	b2db      	uxtb	r3, r3
 8010b64:	3b01      	subs	r3, #1
 8010b66:	1e5a      	subs	r2, r3, #1
 8010b68:	4193      	sbcs	r3, r2
 8010b6a:	b2db      	uxtb	r3, r3
 8010b6c:	e01f      	b.n	8010bae <HAL_TIM_PWM_Start+0x62>
 8010b6e:	683b      	ldr	r3, [r7, #0]
 8010b70:	2b04      	cmp	r3, #4
 8010b72:	d108      	bne.n	8010b86 <HAL_TIM_PWM_Start+0x3a>
 8010b74:	687b      	ldr	r3, [r7, #4]
 8010b76:	223b      	movs	r2, #59	@ 0x3b
 8010b78:	5c9b      	ldrb	r3, [r3, r2]
 8010b7a:	b2db      	uxtb	r3, r3
 8010b7c:	3b01      	subs	r3, #1
 8010b7e:	1e5a      	subs	r2, r3, #1
 8010b80:	4193      	sbcs	r3, r2
 8010b82:	b2db      	uxtb	r3, r3
 8010b84:	e013      	b.n	8010bae <HAL_TIM_PWM_Start+0x62>
 8010b86:	683b      	ldr	r3, [r7, #0]
 8010b88:	2b08      	cmp	r3, #8
 8010b8a:	d108      	bne.n	8010b9e <HAL_TIM_PWM_Start+0x52>
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	223c      	movs	r2, #60	@ 0x3c
 8010b90:	5c9b      	ldrb	r3, [r3, r2]
 8010b92:	b2db      	uxtb	r3, r3
 8010b94:	3b01      	subs	r3, #1
 8010b96:	1e5a      	subs	r2, r3, #1
 8010b98:	4193      	sbcs	r3, r2
 8010b9a:	b2db      	uxtb	r3, r3
 8010b9c:	e007      	b.n	8010bae <HAL_TIM_PWM_Start+0x62>
 8010b9e:	687b      	ldr	r3, [r7, #4]
 8010ba0:	223d      	movs	r2, #61	@ 0x3d
 8010ba2:	5c9b      	ldrb	r3, [r3, r2]
 8010ba4:	b2db      	uxtb	r3, r3
 8010ba6:	3b01      	subs	r3, #1
 8010ba8:	1e5a      	subs	r2, r3, #1
 8010baa:	4193      	sbcs	r3, r2
 8010bac:	b2db      	uxtb	r3, r3
 8010bae:	2b00      	cmp	r3, #0
 8010bb0:	d001      	beq.n	8010bb6 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8010bb2:	2301      	movs	r3, #1
 8010bb4:	e052      	b.n	8010c5c <HAL_TIM_PWM_Start+0x110>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8010bb6:	683b      	ldr	r3, [r7, #0]
 8010bb8:	2b00      	cmp	r3, #0
 8010bba:	d104      	bne.n	8010bc6 <HAL_TIM_PWM_Start+0x7a>
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	223a      	movs	r2, #58	@ 0x3a
 8010bc0:	2102      	movs	r1, #2
 8010bc2:	5499      	strb	r1, [r3, r2]
 8010bc4:	e013      	b.n	8010bee <HAL_TIM_PWM_Start+0xa2>
 8010bc6:	683b      	ldr	r3, [r7, #0]
 8010bc8:	2b04      	cmp	r3, #4
 8010bca:	d104      	bne.n	8010bd6 <HAL_TIM_PWM_Start+0x8a>
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	223b      	movs	r2, #59	@ 0x3b
 8010bd0:	2102      	movs	r1, #2
 8010bd2:	5499      	strb	r1, [r3, r2]
 8010bd4:	e00b      	b.n	8010bee <HAL_TIM_PWM_Start+0xa2>
 8010bd6:	683b      	ldr	r3, [r7, #0]
 8010bd8:	2b08      	cmp	r3, #8
 8010bda:	d104      	bne.n	8010be6 <HAL_TIM_PWM_Start+0x9a>
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	223c      	movs	r2, #60	@ 0x3c
 8010be0:	2102      	movs	r1, #2
 8010be2:	5499      	strb	r1, [r3, r2]
 8010be4:	e003      	b.n	8010bee <HAL_TIM_PWM_Start+0xa2>
 8010be6:	687b      	ldr	r3, [r7, #4]
 8010be8:	223d      	movs	r2, #61	@ 0x3d
 8010bea:	2102      	movs	r1, #2
 8010bec:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8010bee:	687b      	ldr	r3, [r7, #4]
 8010bf0:	681b      	ldr	r3, [r3, #0]
 8010bf2:	6839      	ldr	r1, [r7, #0]
 8010bf4:	2201      	movs	r2, #1
 8010bf6:	0018      	movs	r0, r3
 8010bf8:	f000 fa62 	bl	80110c0 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	681a      	ldr	r2, [r3, #0]
 8010c00:	2380      	movs	r3, #128	@ 0x80
 8010c02:	05db      	lsls	r3, r3, #23
 8010c04:	429a      	cmp	r2, r3
 8010c06:	d00e      	beq.n	8010c26 <HAL_TIM_PWM_Start+0xda>
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	681b      	ldr	r3, [r3, #0]
 8010c0c:	4a15      	ldr	r2, [pc, #84]	@ (8010c64 <HAL_TIM_PWM_Start+0x118>)
 8010c0e:	4293      	cmp	r3, r2
 8010c10:	d009      	beq.n	8010c26 <HAL_TIM_PWM_Start+0xda>
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	681b      	ldr	r3, [r3, #0]
 8010c16:	4a14      	ldr	r2, [pc, #80]	@ (8010c68 <HAL_TIM_PWM_Start+0x11c>)
 8010c18:	4293      	cmp	r3, r2
 8010c1a:	d004      	beq.n	8010c26 <HAL_TIM_PWM_Start+0xda>
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	681b      	ldr	r3, [r3, #0]
 8010c20:	4a12      	ldr	r2, [pc, #72]	@ (8010c6c <HAL_TIM_PWM_Start+0x120>)
 8010c22:	4293      	cmp	r3, r2
 8010c24:	d111      	bne.n	8010c4a <HAL_TIM_PWM_Start+0xfe>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	681b      	ldr	r3, [r3, #0]
 8010c2a:	689b      	ldr	r3, [r3, #8]
 8010c2c:	2207      	movs	r2, #7
 8010c2e:	4013      	ands	r3, r2
 8010c30:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010c32:	68fb      	ldr	r3, [r7, #12]
 8010c34:	2b06      	cmp	r3, #6
 8010c36:	d010      	beq.n	8010c5a <HAL_TIM_PWM_Start+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	681b      	ldr	r3, [r3, #0]
 8010c3c:	681a      	ldr	r2, [r3, #0]
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	681b      	ldr	r3, [r3, #0]
 8010c42:	2101      	movs	r1, #1
 8010c44:	430a      	orrs	r2, r1
 8010c46:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010c48:	e007      	b.n	8010c5a <HAL_TIM_PWM_Start+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8010c4a:	687b      	ldr	r3, [r7, #4]
 8010c4c:	681b      	ldr	r3, [r3, #0]
 8010c4e:	681a      	ldr	r2, [r3, #0]
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	681b      	ldr	r3, [r3, #0]
 8010c54:	2101      	movs	r1, #1
 8010c56:	430a      	orrs	r2, r1
 8010c58:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8010c5a:	2300      	movs	r3, #0
}
 8010c5c:	0018      	movs	r0, r3
 8010c5e:	46bd      	mov	sp, r7
 8010c60:	b004      	add	sp, #16
 8010c62:	bd80      	pop	{r7, pc}
 8010c64:	40000400 	.word	0x40000400
 8010c68:	40010800 	.word	0x40010800
 8010c6c:	40011400 	.word	0x40011400

08010c70 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8010c70:	b580      	push	{r7, lr}
 8010c72:	b086      	sub	sp, #24
 8010c74:	af00      	add	r7, sp, #0
 8010c76:	60f8      	str	r0, [r7, #12]
 8010c78:	60b9      	str	r1, [r7, #8]
 8010c7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8010c7c:	2317      	movs	r3, #23
 8010c7e:	18fb      	adds	r3, r7, r3
 8010c80:	2200      	movs	r2, #0
 8010c82:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8010c84:	68fb      	ldr	r3, [r7, #12]
 8010c86:	2238      	movs	r2, #56	@ 0x38
 8010c88:	5c9b      	ldrb	r3, [r3, r2]
 8010c8a:	2b01      	cmp	r3, #1
 8010c8c:	d101      	bne.n	8010c92 <HAL_TIM_PWM_ConfigChannel+0x22>
 8010c8e:	2302      	movs	r3, #2
 8010c90:	e0ad      	b.n	8010dee <HAL_TIM_PWM_ConfigChannel+0x17e>
 8010c92:	68fb      	ldr	r3, [r7, #12]
 8010c94:	2238      	movs	r2, #56	@ 0x38
 8010c96:	2101      	movs	r1, #1
 8010c98:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	2b0c      	cmp	r3, #12
 8010c9e:	d100      	bne.n	8010ca2 <HAL_TIM_PWM_ConfigChannel+0x32>
 8010ca0:	e076      	b.n	8010d90 <HAL_TIM_PWM_ConfigChannel+0x120>
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	2b0c      	cmp	r3, #12
 8010ca6:	d900      	bls.n	8010caa <HAL_TIM_PWM_ConfigChannel+0x3a>
 8010ca8:	e095      	b.n	8010dd6 <HAL_TIM_PWM_ConfigChannel+0x166>
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	2b08      	cmp	r3, #8
 8010cae:	d04e      	beq.n	8010d4e <HAL_TIM_PWM_ConfigChannel+0xde>
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	2b08      	cmp	r3, #8
 8010cb4:	d900      	bls.n	8010cb8 <HAL_TIM_PWM_ConfigChannel+0x48>
 8010cb6:	e08e      	b.n	8010dd6 <HAL_TIM_PWM_ConfigChannel+0x166>
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	2b00      	cmp	r3, #0
 8010cbc:	d003      	beq.n	8010cc6 <HAL_TIM_PWM_ConfigChannel+0x56>
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	2b04      	cmp	r3, #4
 8010cc2:	d021      	beq.n	8010d08 <HAL_TIM_PWM_ConfigChannel+0x98>
 8010cc4:	e087      	b.n	8010dd6 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8010cc6:	68fb      	ldr	r3, [r7, #12]
 8010cc8:	681b      	ldr	r3, [r3, #0]
 8010cca:	68ba      	ldr	r2, [r7, #8]
 8010ccc:	0011      	movs	r1, r2
 8010cce:	0018      	movs	r0, r3
 8010cd0:	f000 f8f2 	bl	8010eb8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8010cd4:	68fb      	ldr	r3, [r7, #12]
 8010cd6:	681b      	ldr	r3, [r3, #0]
 8010cd8:	699a      	ldr	r2, [r3, #24]
 8010cda:	68fb      	ldr	r3, [r7, #12]
 8010cdc:	681b      	ldr	r3, [r3, #0]
 8010cde:	2108      	movs	r1, #8
 8010ce0:	430a      	orrs	r2, r1
 8010ce2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8010ce4:	68fb      	ldr	r3, [r7, #12]
 8010ce6:	681b      	ldr	r3, [r3, #0]
 8010ce8:	699a      	ldr	r2, [r3, #24]
 8010cea:	68fb      	ldr	r3, [r7, #12]
 8010cec:	681b      	ldr	r3, [r3, #0]
 8010cee:	2104      	movs	r1, #4
 8010cf0:	438a      	bics	r2, r1
 8010cf2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8010cf4:	68fb      	ldr	r3, [r7, #12]
 8010cf6:	681b      	ldr	r3, [r3, #0]
 8010cf8:	6999      	ldr	r1, [r3, #24]
 8010cfa:	68bb      	ldr	r3, [r7, #8]
 8010cfc:	68da      	ldr	r2, [r3, #12]
 8010cfe:	68fb      	ldr	r3, [r7, #12]
 8010d00:	681b      	ldr	r3, [r3, #0]
 8010d02:	430a      	orrs	r2, r1
 8010d04:	619a      	str	r2, [r3, #24]
      break;
 8010d06:	e06b      	b.n	8010de0 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8010d08:	68fb      	ldr	r3, [r7, #12]
 8010d0a:	681b      	ldr	r3, [r3, #0]
 8010d0c:	68ba      	ldr	r2, [r7, #8]
 8010d0e:	0011      	movs	r1, r2
 8010d10:	0018      	movs	r0, r3
 8010d12:	f000 f90d 	bl	8010f30 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8010d16:	68fb      	ldr	r3, [r7, #12]
 8010d18:	681b      	ldr	r3, [r3, #0]
 8010d1a:	699a      	ldr	r2, [r3, #24]
 8010d1c:	68fb      	ldr	r3, [r7, #12]
 8010d1e:	681b      	ldr	r3, [r3, #0]
 8010d20:	2180      	movs	r1, #128	@ 0x80
 8010d22:	0109      	lsls	r1, r1, #4
 8010d24:	430a      	orrs	r2, r1
 8010d26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8010d28:	68fb      	ldr	r3, [r7, #12]
 8010d2a:	681b      	ldr	r3, [r3, #0]
 8010d2c:	699a      	ldr	r2, [r3, #24]
 8010d2e:	68fb      	ldr	r3, [r7, #12]
 8010d30:	681b      	ldr	r3, [r3, #0]
 8010d32:	4931      	ldr	r1, [pc, #196]	@ (8010df8 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8010d34:	400a      	ands	r2, r1
 8010d36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8010d38:	68fb      	ldr	r3, [r7, #12]
 8010d3a:	681b      	ldr	r3, [r3, #0]
 8010d3c:	6999      	ldr	r1, [r3, #24]
 8010d3e:	68bb      	ldr	r3, [r7, #8]
 8010d40:	68db      	ldr	r3, [r3, #12]
 8010d42:	021a      	lsls	r2, r3, #8
 8010d44:	68fb      	ldr	r3, [r7, #12]
 8010d46:	681b      	ldr	r3, [r3, #0]
 8010d48:	430a      	orrs	r2, r1
 8010d4a:	619a      	str	r2, [r3, #24]
      break;
 8010d4c:	e048      	b.n	8010de0 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8010d4e:	68fb      	ldr	r3, [r7, #12]
 8010d50:	681b      	ldr	r3, [r3, #0]
 8010d52:	68ba      	ldr	r2, [r7, #8]
 8010d54:	0011      	movs	r1, r2
 8010d56:	0018      	movs	r0, r3
 8010d58:	f000 f92c 	bl	8010fb4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8010d5c:	68fb      	ldr	r3, [r7, #12]
 8010d5e:	681b      	ldr	r3, [r3, #0]
 8010d60:	69da      	ldr	r2, [r3, #28]
 8010d62:	68fb      	ldr	r3, [r7, #12]
 8010d64:	681b      	ldr	r3, [r3, #0]
 8010d66:	2108      	movs	r1, #8
 8010d68:	430a      	orrs	r2, r1
 8010d6a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8010d6c:	68fb      	ldr	r3, [r7, #12]
 8010d6e:	681b      	ldr	r3, [r3, #0]
 8010d70:	69da      	ldr	r2, [r3, #28]
 8010d72:	68fb      	ldr	r3, [r7, #12]
 8010d74:	681b      	ldr	r3, [r3, #0]
 8010d76:	2104      	movs	r1, #4
 8010d78:	438a      	bics	r2, r1
 8010d7a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8010d7c:	68fb      	ldr	r3, [r7, #12]
 8010d7e:	681b      	ldr	r3, [r3, #0]
 8010d80:	69d9      	ldr	r1, [r3, #28]
 8010d82:	68bb      	ldr	r3, [r7, #8]
 8010d84:	68da      	ldr	r2, [r3, #12]
 8010d86:	68fb      	ldr	r3, [r7, #12]
 8010d88:	681b      	ldr	r3, [r3, #0]
 8010d8a:	430a      	orrs	r2, r1
 8010d8c:	61da      	str	r2, [r3, #28]
      break;
 8010d8e:	e027      	b.n	8010de0 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8010d90:	68fb      	ldr	r3, [r7, #12]
 8010d92:	681b      	ldr	r3, [r3, #0]
 8010d94:	68ba      	ldr	r2, [r7, #8]
 8010d96:	0011      	movs	r1, r2
 8010d98:	0018      	movs	r0, r3
 8010d9a:	f000 f94b 	bl	8011034 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8010d9e:	68fb      	ldr	r3, [r7, #12]
 8010da0:	681b      	ldr	r3, [r3, #0]
 8010da2:	69da      	ldr	r2, [r3, #28]
 8010da4:	68fb      	ldr	r3, [r7, #12]
 8010da6:	681b      	ldr	r3, [r3, #0]
 8010da8:	2180      	movs	r1, #128	@ 0x80
 8010daa:	0109      	lsls	r1, r1, #4
 8010dac:	430a      	orrs	r2, r1
 8010dae:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8010db0:	68fb      	ldr	r3, [r7, #12]
 8010db2:	681b      	ldr	r3, [r3, #0]
 8010db4:	69da      	ldr	r2, [r3, #28]
 8010db6:	68fb      	ldr	r3, [r7, #12]
 8010db8:	681b      	ldr	r3, [r3, #0]
 8010dba:	490f      	ldr	r1, [pc, #60]	@ (8010df8 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8010dbc:	400a      	ands	r2, r1
 8010dbe:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8010dc0:	68fb      	ldr	r3, [r7, #12]
 8010dc2:	681b      	ldr	r3, [r3, #0]
 8010dc4:	69d9      	ldr	r1, [r3, #28]
 8010dc6:	68bb      	ldr	r3, [r7, #8]
 8010dc8:	68db      	ldr	r3, [r3, #12]
 8010dca:	021a      	lsls	r2, r3, #8
 8010dcc:	68fb      	ldr	r3, [r7, #12]
 8010dce:	681b      	ldr	r3, [r3, #0]
 8010dd0:	430a      	orrs	r2, r1
 8010dd2:	61da      	str	r2, [r3, #28]
      break;
 8010dd4:	e004      	b.n	8010de0 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8010dd6:	2317      	movs	r3, #23
 8010dd8:	18fb      	adds	r3, r7, r3
 8010dda:	2201      	movs	r2, #1
 8010ddc:	701a      	strb	r2, [r3, #0]
      break;
 8010dde:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8010de0:	68fb      	ldr	r3, [r7, #12]
 8010de2:	2238      	movs	r2, #56	@ 0x38
 8010de4:	2100      	movs	r1, #0
 8010de6:	5499      	strb	r1, [r3, r2]

  return status;
 8010de8:	2317      	movs	r3, #23
 8010dea:	18fb      	adds	r3, r7, r3
 8010dec:	781b      	ldrb	r3, [r3, #0]
}
 8010dee:	0018      	movs	r0, r3
 8010df0:	46bd      	mov	sp, r7
 8010df2:	b006      	add	sp, #24
 8010df4:	bd80      	pop	{r7, pc}
 8010df6:	46c0      	nop			@ (mov r8, r8)
 8010df8:	fffffbff 	.word	0xfffffbff

08010dfc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8010dfc:	b580      	push	{r7, lr}
 8010dfe:	b084      	sub	sp, #16
 8010e00:	af00      	add	r7, sp, #0
 8010e02:	6078      	str	r0, [r7, #4]
 8010e04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	681b      	ldr	r3, [r3, #0]
 8010e0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8010e0c:	687a      	ldr	r2, [r7, #4]
 8010e0e:	2380      	movs	r3, #128	@ 0x80
 8010e10:	05db      	lsls	r3, r3, #23
 8010e12:	429a      	cmp	r2, r3
 8010e14:	d00b      	beq.n	8010e2e <TIM_Base_SetConfig+0x32>
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	4a23      	ldr	r2, [pc, #140]	@ (8010ea8 <TIM_Base_SetConfig+0xac>)
 8010e1a:	4293      	cmp	r3, r2
 8010e1c:	d007      	beq.n	8010e2e <TIM_Base_SetConfig+0x32>
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	4a22      	ldr	r2, [pc, #136]	@ (8010eac <TIM_Base_SetConfig+0xb0>)
 8010e22:	4293      	cmp	r3, r2
 8010e24:	d003      	beq.n	8010e2e <TIM_Base_SetConfig+0x32>
 8010e26:	687b      	ldr	r3, [r7, #4]
 8010e28:	4a21      	ldr	r2, [pc, #132]	@ (8010eb0 <TIM_Base_SetConfig+0xb4>)
 8010e2a:	4293      	cmp	r3, r2
 8010e2c:	d108      	bne.n	8010e40 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8010e2e:	68fb      	ldr	r3, [r7, #12]
 8010e30:	2270      	movs	r2, #112	@ 0x70
 8010e32:	4393      	bics	r3, r2
 8010e34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8010e36:	683b      	ldr	r3, [r7, #0]
 8010e38:	685b      	ldr	r3, [r3, #4]
 8010e3a:	68fa      	ldr	r2, [r7, #12]
 8010e3c:	4313      	orrs	r3, r2
 8010e3e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8010e40:	687a      	ldr	r2, [r7, #4]
 8010e42:	2380      	movs	r3, #128	@ 0x80
 8010e44:	05db      	lsls	r3, r3, #23
 8010e46:	429a      	cmp	r2, r3
 8010e48:	d00b      	beq.n	8010e62 <TIM_Base_SetConfig+0x66>
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	4a16      	ldr	r2, [pc, #88]	@ (8010ea8 <TIM_Base_SetConfig+0xac>)
 8010e4e:	4293      	cmp	r3, r2
 8010e50:	d007      	beq.n	8010e62 <TIM_Base_SetConfig+0x66>
 8010e52:	687b      	ldr	r3, [r7, #4]
 8010e54:	4a15      	ldr	r2, [pc, #84]	@ (8010eac <TIM_Base_SetConfig+0xb0>)
 8010e56:	4293      	cmp	r3, r2
 8010e58:	d003      	beq.n	8010e62 <TIM_Base_SetConfig+0x66>
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	4a14      	ldr	r2, [pc, #80]	@ (8010eb0 <TIM_Base_SetConfig+0xb4>)
 8010e5e:	4293      	cmp	r3, r2
 8010e60:	d108      	bne.n	8010e74 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8010e62:	68fb      	ldr	r3, [r7, #12]
 8010e64:	4a13      	ldr	r2, [pc, #76]	@ (8010eb4 <TIM_Base_SetConfig+0xb8>)
 8010e66:	4013      	ands	r3, r2
 8010e68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8010e6a:	683b      	ldr	r3, [r7, #0]
 8010e6c:	68db      	ldr	r3, [r3, #12]
 8010e6e:	68fa      	ldr	r2, [r7, #12]
 8010e70:	4313      	orrs	r3, r2
 8010e72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8010e74:	68fb      	ldr	r3, [r7, #12]
 8010e76:	2280      	movs	r2, #128	@ 0x80
 8010e78:	4393      	bics	r3, r2
 8010e7a:	001a      	movs	r2, r3
 8010e7c:	683b      	ldr	r3, [r7, #0]
 8010e7e:	691b      	ldr	r3, [r3, #16]
 8010e80:	4313      	orrs	r3, r2
 8010e82:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	68fa      	ldr	r2, [r7, #12]
 8010e88:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8010e8a:	683b      	ldr	r3, [r7, #0]
 8010e8c:	689a      	ldr	r2, [r3, #8]
 8010e8e:	687b      	ldr	r3, [r7, #4]
 8010e90:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8010e92:	683b      	ldr	r3, [r7, #0]
 8010e94:	681a      	ldr	r2, [r3, #0]
 8010e96:	687b      	ldr	r3, [r7, #4]
 8010e98:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	2201      	movs	r2, #1
 8010e9e:	615a      	str	r2, [r3, #20]
}
 8010ea0:	46c0      	nop			@ (mov r8, r8)
 8010ea2:	46bd      	mov	sp, r7
 8010ea4:	b004      	add	sp, #16
 8010ea6:	bd80      	pop	{r7, pc}
 8010ea8:	40000400 	.word	0x40000400
 8010eac:	40010800 	.word	0x40010800
 8010eb0:	40011400 	.word	0x40011400
 8010eb4:	fffffcff 	.word	0xfffffcff

08010eb8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010eb8:	b580      	push	{r7, lr}
 8010eba:	b086      	sub	sp, #24
 8010ebc:	af00      	add	r7, sp, #0
 8010ebe:	6078      	str	r0, [r7, #4]
 8010ec0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	6a1b      	ldr	r3, [r3, #32]
 8010ec6:	2201      	movs	r2, #1
 8010ec8:	4393      	bics	r3, r2
 8010eca:	001a      	movs	r2, r3
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	6a1b      	ldr	r3, [r3, #32]
 8010ed4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010ed6:	687b      	ldr	r3, [r7, #4]
 8010ed8:	685b      	ldr	r3, [r3, #4]
 8010eda:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8010edc:	687b      	ldr	r3, [r7, #4]
 8010ede:	699b      	ldr	r3, [r3, #24]
 8010ee0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8010ee2:	68fb      	ldr	r3, [r7, #12]
 8010ee4:	2270      	movs	r2, #112	@ 0x70
 8010ee6:	4393      	bics	r3, r2
 8010ee8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8010eea:	68fb      	ldr	r3, [r7, #12]
 8010eec:	2203      	movs	r2, #3
 8010eee:	4393      	bics	r3, r2
 8010ef0:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010ef2:	683b      	ldr	r3, [r7, #0]
 8010ef4:	681b      	ldr	r3, [r3, #0]
 8010ef6:	68fa      	ldr	r2, [r7, #12]
 8010ef8:	4313      	orrs	r3, r2
 8010efa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8010efc:	697b      	ldr	r3, [r7, #20]
 8010efe:	2202      	movs	r2, #2
 8010f00:	4393      	bics	r3, r2
 8010f02:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8010f04:	683b      	ldr	r3, [r7, #0]
 8010f06:	689b      	ldr	r3, [r3, #8]
 8010f08:	697a      	ldr	r2, [r7, #20]
 8010f0a:	4313      	orrs	r3, r2
 8010f0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	693a      	ldr	r2, [r7, #16]
 8010f12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	68fa      	ldr	r2, [r7, #12]
 8010f18:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8010f1a:	683b      	ldr	r3, [r7, #0]
 8010f1c:	685a      	ldr	r2, [r3, #4]
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010f22:	687b      	ldr	r3, [r7, #4]
 8010f24:	697a      	ldr	r2, [r7, #20]
 8010f26:	621a      	str	r2, [r3, #32]
}
 8010f28:	46c0      	nop			@ (mov r8, r8)
 8010f2a:	46bd      	mov	sp, r7
 8010f2c:	b006      	add	sp, #24
 8010f2e:	bd80      	pop	{r7, pc}

08010f30 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010f30:	b580      	push	{r7, lr}
 8010f32:	b086      	sub	sp, #24
 8010f34:	af00      	add	r7, sp, #0
 8010f36:	6078      	str	r0, [r7, #4]
 8010f38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	6a1b      	ldr	r3, [r3, #32]
 8010f3e:	2210      	movs	r2, #16
 8010f40:	4393      	bics	r3, r2
 8010f42:	001a      	movs	r2, r3
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010f48:	687b      	ldr	r3, [r7, #4]
 8010f4a:	6a1b      	ldr	r3, [r3, #32]
 8010f4c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010f4e:	687b      	ldr	r3, [r7, #4]
 8010f50:	685b      	ldr	r3, [r3, #4]
 8010f52:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8010f54:	687b      	ldr	r3, [r7, #4]
 8010f56:	699b      	ldr	r3, [r3, #24]
 8010f58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8010f5a:	68fb      	ldr	r3, [r7, #12]
 8010f5c:	4a13      	ldr	r2, [pc, #76]	@ (8010fac <TIM_OC2_SetConfig+0x7c>)
 8010f5e:	4013      	ands	r3, r2
 8010f60:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8010f62:	68fb      	ldr	r3, [r7, #12]
 8010f64:	4a12      	ldr	r2, [pc, #72]	@ (8010fb0 <TIM_OC2_SetConfig+0x80>)
 8010f66:	4013      	ands	r3, r2
 8010f68:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010f6a:	683b      	ldr	r3, [r7, #0]
 8010f6c:	681b      	ldr	r3, [r3, #0]
 8010f6e:	021b      	lsls	r3, r3, #8
 8010f70:	68fa      	ldr	r2, [r7, #12]
 8010f72:	4313      	orrs	r3, r2
 8010f74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8010f76:	697b      	ldr	r3, [r7, #20]
 8010f78:	2220      	movs	r2, #32
 8010f7a:	4393      	bics	r3, r2
 8010f7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8010f7e:	683b      	ldr	r3, [r7, #0]
 8010f80:	689b      	ldr	r3, [r3, #8]
 8010f82:	011b      	lsls	r3, r3, #4
 8010f84:	697a      	ldr	r2, [r7, #20]
 8010f86:	4313      	orrs	r3, r2
 8010f88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010f8a:	687b      	ldr	r3, [r7, #4]
 8010f8c:	693a      	ldr	r2, [r7, #16]
 8010f8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010f90:	687b      	ldr	r3, [r7, #4]
 8010f92:	68fa      	ldr	r2, [r7, #12]
 8010f94:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8010f96:	683b      	ldr	r3, [r7, #0]
 8010f98:	685a      	ldr	r2, [r3, #4]
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010f9e:	687b      	ldr	r3, [r7, #4]
 8010fa0:	697a      	ldr	r2, [r7, #20]
 8010fa2:	621a      	str	r2, [r3, #32]
}
 8010fa4:	46c0      	nop			@ (mov r8, r8)
 8010fa6:	46bd      	mov	sp, r7
 8010fa8:	b006      	add	sp, #24
 8010faa:	bd80      	pop	{r7, pc}
 8010fac:	ffff8fff 	.word	0xffff8fff
 8010fb0:	fffffcff 	.word	0xfffffcff

08010fb4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010fb4:	b580      	push	{r7, lr}
 8010fb6:	b086      	sub	sp, #24
 8010fb8:	af00      	add	r7, sp, #0
 8010fba:	6078      	str	r0, [r7, #4]
 8010fbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8010fbe:	687b      	ldr	r3, [r7, #4]
 8010fc0:	6a1b      	ldr	r3, [r3, #32]
 8010fc2:	4a1a      	ldr	r2, [pc, #104]	@ (801102c <TIM_OC3_SetConfig+0x78>)
 8010fc4:	401a      	ands	r2, r3
 8010fc6:	687b      	ldr	r3, [r7, #4]
 8010fc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010fca:	687b      	ldr	r3, [r7, #4]
 8010fcc:	6a1b      	ldr	r3, [r3, #32]
 8010fce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010fd0:	687b      	ldr	r3, [r7, #4]
 8010fd2:	685b      	ldr	r3, [r3, #4]
 8010fd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	69db      	ldr	r3, [r3, #28]
 8010fda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8010fdc:	68fb      	ldr	r3, [r7, #12]
 8010fde:	2270      	movs	r2, #112	@ 0x70
 8010fe0:	4393      	bics	r3, r2
 8010fe2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8010fe4:	68fb      	ldr	r3, [r7, #12]
 8010fe6:	2203      	movs	r2, #3
 8010fe8:	4393      	bics	r3, r2
 8010fea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010fec:	683b      	ldr	r3, [r7, #0]
 8010fee:	681b      	ldr	r3, [r3, #0]
 8010ff0:	68fa      	ldr	r2, [r7, #12]
 8010ff2:	4313      	orrs	r3, r2
 8010ff4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8010ff6:	697b      	ldr	r3, [r7, #20]
 8010ff8:	4a0d      	ldr	r2, [pc, #52]	@ (8011030 <TIM_OC3_SetConfig+0x7c>)
 8010ffa:	4013      	ands	r3, r2
 8010ffc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8010ffe:	683b      	ldr	r3, [r7, #0]
 8011000:	689b      	ldr	r3, [r3, #8]
 8011002:	021b      	lsls	r3, r3, #8
 8011004:	697a      	ldr	r2, [r7, #20]
 8011006:	4313      	orrs	r3, r2
 8011008:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	693a      	ldr	r2, [r7, #16]
 801100e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8011010:	687b      	ldr	r3, [r7, #4]
 8011012:	68fa      	ldr	r2, [r7, #12]
 8011014:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8011016:	683b      	ldr	r3, [r7, #0]
 8011018:	685a      	ldr	r2, [r3, #4]
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	697a      	ldr	r2, [r7, #20]
 8011022:	621a      	str	r2, [r3, #32]
}
 8011024:	46c0      	nop			@ (mov r8, r8)
 8011026:	46bd      	mov	sp, r7
 8011028:	b006      	add	sp, #24
 801102a:	bd80      	pop	{r7, pc}
 801102c:	fffffeff 	.word	0xfffffeff
 8011030:	fffffdff 	.word	0xfffffdff

08011034 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8011034:	b580      	push	{r7, lr}
 8011036:	b086      	sub	sp, #24
 8011038:	af00      	add	r7, sp, #0
 801103a:	6078      	str	r0, [r7, #4]
 801103c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801103e:	687b      	ldr	r3, [r7, #4]
 8011040:	6a1b      	ldr	r3, [r3, #32]
 8011042:	4a1b      	ldr	r2, [pc, #108]	@ (80110b0 <TIM_OC4_SetConfig+0x7c>)
 8011044:	401a      	ands	r2, r3
 8011046:	687b      	ldr	r3, [r7, #4]
 8011048:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	6a1b      	ldr	r3, [r3, #32]
 801104e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	685b      	ldr	r3, [r3, #4]
 8011054:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8011056:	687b      	ldr	r3, [r7, #4]
 8011058:	69db      	ldr	r3, [r3, #28]
 801105a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 801105c:	68fb      	ldr	r3, [r7, #12]
 801105e:	4a15      	ldr	r2, [pc, #84]	@ (80110b4 <TIM_OC4_SetConfig+0x80>)
 8011060:	4013      	ands	r3, r2
 8011062:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8011064:	68fb      	ldr	r3, [r7, #12]
 8011066:	4a14      	ldr	r2, [pc, #80]	@ (80110b8 <TIM_OC4_SetConfig+0x84>)
 8011068:	4013      	ands	r3, r2
 801106a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801106c:	683b      	ldr	r3, [r7, #0]
 801106e:	681b      	ldr	r3, [r3, #0]
 8011070:	021b      	lsls	r3, r3, #8
 8011072:	68fa      	ldr	r2, [r7, #12]
 8011074:	4313      	orrs	r3, r2
 8011076:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8011078:	697b      	ldr	r3, [r7, #20]
 801107a:	4a10      	ldr	r2, [pc, #64]	@ (80110bc <TIM_OC4_SetConfig+0x88>)
 801107c:	4013      	ands	r3, r2
 801107e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8011080:	683b      	ldr	r3, [r7, #0]
 8011082:	689b      	ldr	r3, [r3, #8]
 8011084:	031b      	lsls	r3, r3, #12
 8011086:	697a      	ldr	r2, [r7, #20]
 8011088:	4313      	orrs	r3, r2
 801108a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801108c:	687b      	ldr	r3, [r7, #4]
 801108e:	693a      	ldr	r2, [r7, #16]
 8011090:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	68fa      	ldr	r2, [r7, #12]
 8011096:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8011098:	683b      	ldr	r3, [r7, #0]
 801109a:	685a      	ldr	r2, [r3, #4]
 801109c:	687b      	ldr	r3, [r7, #4]
 801109e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	697a      	ldr	r2, [r7, #20]
 80110a4:	621a      	str	r2, [r3, #32]
}
 80110a6:	46c0      	nop			@ (mov r8, r8)
 80110a8:	46bd      	mov	sp, r7
 80110aa:	b006      	add	sp, #24
 80110ac:	bd80      	pop	{r7, pc}
 80110ae:	46c0      	nop			@ (mov r8, r8)
 80110b0:	ffffefff 	.word	0xffffefff
 80110b4:	ffff8fff 	.word	0xffff8fff
 80110b8:	fffffcff 	.word	0xfffffcff
 80110bc:	ffffdfff 	.word	0xffffdfff

080110c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80110c0:	b580      	push	{r7, lr}
 80110c2:	b086      	sub	sp, #24
 80110c4:	af00      	add	r7, sp, #0
 80110c6:	60f8      	str	r0, [r7, #12]
 80110c8:	60b9      	str	r1, [r7, #8]
 80110ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80110cc:	68bb      	ldr	r3, [r7, #8]
 80110ce:	221f      	movs	r2, #31
 80110d0:	4013      	ands	r3, r2
 80110d2:	2201      	movs	r2, #1
 80110d4:	409a      	lsls	r2, r3
 80110d6:	0013      	movs	r3, r2
 80110d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80110da:	68fb      	ldr	r3, [r7, #12]
 80110dc:	6a1b      	ldr	r3, [r3, #32]
 80110de:	697a      	ldr	r2, [r7, #20]
 80110e0:	43d2      	mvns	r2, r2
 80110e2:	401a      	ands	r2, r3
 80110e4:	68fb      	ldr	r3, [r7, #12]
 80110e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80110e8:	68fb      	ldr	r3, [r7, #12]
 80110ea:	6a1a      	ldr	r2, [r3, #32]
 80110ec:	68bb      	ldr	r3, [r7, #8]
 80110ee:	211f      	movs	r1, #31
 80110f0:	400b      	ands	r3, r1
 80110f2:	6879      	ldr	r1, [r7, #4]
 80110f4:	4099      	lsls	r1, r3
 80110f6:	000b      	movs	r3, r1
 80110f8:	431a      	orrs	r2, r3
 80110fa:	68fb      	ldr	r3, [r7, #12]
 80110fc:	621a      	str	r2, [r3, #32]
}
 80110fe:	46c0      	nop			@ (mov r8, r8)
 8011100:	46bd      	mov	sp, r7
 8011102:	b006      	add	sp, #24
 8011104:	bd80      	pop	{r7, pc}
	...

08011108 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8011108:	b580      	push	{r7, lr}
 801110a:	b084      	sub	sp, #16
 801110c:	af00      	add	r7, sp, #0
 801110e:	6078      	str	r0, [r7, #4]
 8011110:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8011112:	687b      	ldr	r3, [r7, #4]
 8011114:	2238      	movs	r2, #56	@ 0x38
 8011116:	5c9b      	ldrb	r3, [r3, r2]
 8011118:	2b01      	cmp	r3, #1
 801111a:	d101      	bne.n	8011120 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801111c:	2302      	movs	r3, #2
 801111e:	e047      	b.n	80111b0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	2238      	movs	r2, #56	@ 0x38
 8011124:	2101      	movs	r1, #1
 8011126:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	2239      	movs	r2, #57	@ 0x39
 801112c:	2102      	movs	r1, #2
 801112e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8011130:	687b      	ldr	r3, [r7, #4]
 8011132:	681b      	ldr	r3, [r3, #0]
 8011134:	685b      	ldr	r3, [r3, #4]
 8011136:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8011138:	687b      	ldr	r3, [r7, #4]
 801113a:	681b      	ldr	r3, [r3, #0]
 801113c:	689b      	ldr	r3, [r3, #8]
 801113e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8011140:	68fb      	ldr	r3, [r7, #12]
 8011142:	2270      	movs	r2, #112	@ 0x70
 8011144:	4393      	bics	r3, r2
 8011146:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8011148:	683b      	ldr	r3, [r7, #0]
 801114a:	681b      	ldr	r3, [r3, #0]
 801114c:	68fa      	ldr	r2, [r7, #12]
 801114e:	4313      	orrs	r3, r2
 8011150:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	681b      	ldr	r3, [r3, #0]
 8011156:	68fa      	ldr	r2, [r7, #12]
 8011158:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801115a:	687b      	ldr	r3, [r7, #4]
 801115c:	681a      	ldr	r2, [r3, #0]
 801115e:	2380      	movs	r3, #128	@ 0x80
 8011160:	05db      	lsls	r3, r3, #23
 8011162:	429a      	cmp	r2, r3
 8011164:	d00e      	beq.n	8011184 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8011166:	687b      	ldr	r3, [r7, #4]
 8011168:	681b      	ldr	r3, [r3, #0]
 801116a:	4a13      	ldr	r2, [pc, #76]	@ (80111b8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 801116c:	4293      	cmp	r3, r2
 801116e:	d009      	beq.n	8011184 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	681b      	ldr	r3, [r3, #0]
 8011174:	4a11      	ldr	r2, [pc, #68]	@ (80111bc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8011176:	4293      	cmp	r3, r2
 8011178:	d004      	beq.n	8011184 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	681b      	ldr	r3, [r3, #0]
 801117e:	4a10      	ldr	r2, [pc, #64]	@ (80111c0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8011180:	4293      	cmp	r3, r2
 8011182:	d10c      	bne.n	801119e <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8011184:	68bb      	ldr	r3, [r7, #8]
 8011186:	2280      	movs	r2, #128	@ 0x80
 8011188:	4393      	bics	r3, r2
 801118a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801118c:	683b      	ldr	r3, [r7, #0]
 801118e:	685b      	ldr	r3, [r3, #4]
 8011190:	68ba      	ldr	r2, [r7, #8]
 8011192:	4313      	orrs	r3, r2
 8011194:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	681b      	ldr	r3, [r3, #0]
 801119a:	68ba      	ldr	r2, [r7, #8]
 801119c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801119e:	687b      	ldr	r3, [r7, #4]
 80111a0:	2239      	movs	r2, #57	@ 0x39
 80111a2:	2101      	movs	r1, #1
 80111a4:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80111a6:	687b      	ldr	r3, [r7, #4]
 80111a8:	2238      	movs	r2, #56	@ 0x38
 80111aa:	2100      	movs	r1, #0
 80111ac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80111ae:	2300      	movs	r3, #0
}
 80111b0:	0018      	movs	r0, r3
 80111b2:	46bd      	mov	sp, r7
 80111b4:	b004      	add	sp, #16
 80111b6:	bd80      	pop	{r7, pc}
 80111b8:	40000400 	.word	0x40000400
 80111bc:	40010800 	.word	0x40010800
 80111c0:	40011400 	.word	0x40011400

080111c4 <HAL_TIMEx_RemapConfig>:
  @endif
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 80111c4:	b580      	push	{r7, lr}
 80111c6:	b082      	sub	sp, #8
 80111c8:	af00      	add	r7, sp, #0
 80111ca:	6078      	str	r0, [r7, #4]
 80111cc:	6039      	str	r1, [r7, #0]

  /* Check parameters */
  assert_param(IS_TIM_REMAP(htim->Instance, Remap));

  __HAL_LOCK(htim);
 80111ce:	687b      	ldr	r3, [r7, #4]
 80111d0:	2238      	movs	r2, #56	@ 0x38
 80111d2:	5c9b      	ldrb	r3, [r3, r2]
 80111d4:	2b01      	cmp	r3, #1
 80111d6:	d101      	bne.n	80111dc <HAL_TIMEx_RemapConfig+0x18>
 80111d8:	2302      	movs	r3, #2
 80111da:	e00c      	b.n	80111f6 <HAL_TIMEx_RemapConfig+0x32>
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	2238      	movs	r2, #56	@ 0x38
 80111e0:	2101      	movs	r1, #1
 80111e2:	5499      	strb	r1, [r3, r2]

  /* Set the Timer remapping configuration */
  WRITE_REG(htim->Instance->OR, Remap);
 80111e4:	687b      	ldr	r3, [r7, #4]
 80111e6:	681b      	ldr	r3, [r3, #0]
 80111e8:	683a      	ldr	r2, [r7, #0]
 80111ea:	651a      	str	r2, [r3, #80]	@ 0x50

  __HAL_UNLOCK(htim);
 80111ec:	687b      	ldr	r3, [r7, #4]
 80111ee:	2238      	movs	r2, #56	@ 0x38
 80111f0:	2100      	movs	r1, #0
 80111f2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80111f4:	2300      	movs	r3, #0
}
 80111f6:	0018      	movs	r0, r3
 80111f8:	46bd      	mov	sp, r7
 80111fa:	b002      	add	sp, #8
 80111fc:	bd80      	pop	{r7, pc}
	...

08011200 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8011200:	b580      	push	{r7, lr}
 8011202:	b082      	sub	sp, #8
 8011204:	af00      	add	r7, sp, #0
 8011206:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	2b00      	cmp	r3, #0
 801120c:	d101      	bne.n	8011212 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801120e:	2301      	movs	r3, #1
 8011210:	e053      	b.n	80112ba <HAL_UART_Init+0xba>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8011216:	2b00      	cmp	r3, #0
 8011218:	d116      	bne.n	8011248 <HAL_UART_Init+0x48>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801121a:	687b      	ldr	r3, [r7, #4]
 801121c:	2278      	movs	r2, #120	@ 0x78
 801121e:	2100      	movs	r1, #0
 8011220:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	0018      	movs	r0, r3
 8011226:	f000 fd07 	bl	8011c38 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 801122a:	687b      	ldr	r3, [r7, #4]
 801122c:	22b0      	movs	r2, #176	@ 0xb0
 801122e:	589b      	ldr	r3, [r3, r2]
 8011230:	2b00      	cmp	r3, #0
 8011232:	d103      	bne.n	801123c <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	21b0      	movs	r1, #176	@ 0xb0
 8011238:	4a22      	ldr	r2, [pc, #136]	@ (80112c4 <HAL_UART_Init+0xc4>)
 801123a:	505a      	str	r2, [r3, r1]
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	22b0      	movs	r2, #176	@ 0xb0
 8011240:	589b      	ldr	r3, [r3, r2]
 8011242:	687a      	ldr	r2, [r7, #4]
 8011244:	0010      	movs	r0, r2
 8011246:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	2224      	movs	r2, #36	@ 0x24
 801124c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	681b      	ldr	r3, [r3, #0]
 8011252:	681a      	ldr	r2, [r3, #0]
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	681b      	ldr	r3, [r3, #0]
 8011258:	2101      	movs	r1, #1
 801125a:	438a      	bics	r2, r1
 801125c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801125e:	687b      	ldr	r3, [r7, #4]
 8011260:	0018      	movs	r0, r3
 8011262:	f000 fd2d 	bl	8011cc0 <UART_SetConfig>
 8011266:	0003      	movs	r3, r0
 8011268:	2b01      	cmp	r3, #1
 801126a:	d101      	bne.n	8011270 <HAL_UART_Init+0x70>
  {
    return HAL_ERROR;
 801126c:	2301      	movs	r3, #1
 801126e:	e024      	b.n	80112ba <HAL_UART_Init+0xba>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8011270:	687b      	ldr	r3, [r7, #4]
 8011272:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011274:	2b00      	cmp	r3, #0
 8011276:	d003      	beq.n	8011280 <HAL_UART_Init+0x80>
  {
    UART_AdvFeatureConfig(huart);
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	0018      	movs	r0, r3
 801127c:	f000 ffbe 	bl	80121fc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	681b      	ldr	r3, [r3, #0]
 8011284:	685a      	ldr	r2, [r3, #4]
 8011286:	687b      	ldr	r3, [r7, #4]
 8011288:	681b      	ldr	r3, [r3, #0]
 801128a:	490f      	ldr	r1, [pc, #60]	@ (80112c8 <HAL_UART_Init+0xc8>)
 801128c:	400a      	ands	r2, r1
 801128e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8011290:	687b      	ldr	r3, [r7, #4]
 8011292:	681b      	ldr	r3, [r3, #0]
 8011294:	689a      	ldr	r2, [r3, #8]
 8011296:	687b      	ldr	r3, [r7, #4]
 8011298:	681b      	ldr	r3, [r3, #0]
 801129a:	212a      	movs	r1, #42	@ 0x2a
 801129c:	438a      	bics	r2, r1
 801129e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80112a0:	687b      	ldr	r3, [r7, #4]
 80112a2:	681b      	ldr	r3, [r3, #0]
 80112a4:	681a      	ldr	r2, [r3, #0]
 80112a6:	687b      	ldr	r3, [r7, #4]
 80112a8:	681b      	ldr	r3, [r3, #0]
 80112aa:	2101      	movs	r1, #1
 80112ac:	430a      	orrs	r2, r1
 80112ae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80112b0:	687b      	ldr	r3, [r7, #4]
 80112b2:	0018      	movs	r0, r3
 80112b4:	f001 f856 	bl	8012364 <UART_CheckIdleState>
 80112b8:	0003      	movs	r3, r0
}
 80112ba:	0018      	movs	r0, r3
 80112bc:	46bd      	mov	sp, r7
 80112be:	b002      	add	sp, #8
 80112c0:	bd80      	pop	{r7, pc}
 80112c2:	46c0      	nop			@ (mov r8, r8)
 80112c4:	0800932d 	.word	0x0800932d
 80112c8:	ffffb7ff 	.word	0xffffb7ff

080112cc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80112cc:	b580      	push	{r7, lr}
 80112ce:	b08a      	sub	sp, #40	@ 0x28
 80112d0:	af02      	add	r7, sp, #8
 80112d2:	60f8      	str	r0, [r7, #12]
 80112d4:	60b9      	str	r1, [r7, #8]
 80112d6:	603b      	str	r3, [r7, #0]
 80112d8:	1dbb      	adds	r3, r7, #6
 80112da:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80112dc:	68fb      	ldr	r3, [r7, #12]
 80112de:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80112e0:	2b20      	cmp	r3, #32
 80112e2:	d000      	beq.n	80112e6 <HAL_UART_Transmit+0x1a>
 80112e4:	e08c      	b.n	8011400 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 80112e6:	68bb      	ldr	r3, [r7, #8]
 80112e8:	2b00      	cmp	r3, #0
 80112ea:	d003      	beq.n	80112f4 <HAL_UART_Transmit+0x28>
 80112ec:	1dbb      	adds	r3, r7, #6
 80112ee:	881b      	ldrh	r3, [r3, #0]
 80112f0:	2b00      	cmp	r3, #0
 80112f2:	d101      	bne.n	80112f8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80112f4:	2301      	movs	r3, #1
 80112f6:	e084      	b.n	8011402 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80112f8:	68fb      	ldr	r3, [r7, #12]
 80112fa:	689a      	ldr	r2, [r3, #8]
 80112fc:	2380      	movs	r3, #128	@ 0x80
 80112fe:	015b      	lsls	r3, r3, #5
 8011300:	429a      	cmp	r2, r3
 8011302:	d109      	bne.n	8011318 <HAL_UART_Transmit+0x4c>
 8011304:	68fb      	ldr	r3, [r7, #12]
 8011306:	691b      	ldr	r3, [r3, #16]
 8011308:	2b00      	cmp	r3, #0
 801130a:	d105      	bne.n	8011318 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 801130c:	68bb      	ldr	r3, [r7, #8]
 801130e:	2201      	movs	r2, #1
 8011310:	4013      	ands	r3, r2
 8011312:	d001      	beq.n	8011318 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8011314:	2301      	movs	r3, #1
 8011316:	e074      	b.n	8011402 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011318:	68fb      	ldr	r3, [r7, #12]
 801131a:	2284      	movs	r2, #132	@ 0x84
 801131c:	2100      	movs	r1, #0
 801131e:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8011320:	68fb      	ldr	r3, [r7, #12]
 8011322:	2221      	movs	r2, #33	@ 0x21
 8011324:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8011326:	f7f8 fd23 	bl	8009d70 <HAL_GetTick>
 801132a:	0003      	movs	r3, r0
 801132c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 801132e:	68fb      	ldr	r3, [r7, #12]
 8011330:	1dba      	adds	r2, r7, #6
 8011332:	2150      	movs	r1, #80	@ 0x50
 8011334:	8812      	ldrh	r2, [r2, #0]
 8011336:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8011338:	68fb      	ldr	r3, [r7, #12]
 801133a:	1dba      	adds	r2, r7, #6
 801133c:	2152      	movs	r1, #82	@ 0x52
 801133e:	8812      	ldrh	r2, [r2, #0]
 8011340:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011342:	68fb      	ldr	r3, [r7, #12]
 8011344:	689a      	ldr	r2, [r3, #8]
 8011346:	2380      	movs	r3, #128	@ 0x80
 8011348:	015b      	lsls	r3, r3, #5
 801134a:	429a      	cmp	r2, r3
 801134c:	d108      	bne.n	8011360 <HAL_UART_Transmit+0x94>
 801134e:	68fb      	ldr	r3, [r7, #12]
 8011350:	691b      	ldr	r3, [r3, #16]
 8011352:	2b00      	cmp	r3, #0
 8011354:	d104      	bne.n	8011360 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8011356:	2300      	movs	r3, #0
 8011358:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 801135a:	68bb      	ldr	r3, [r7, #8]
 801135c:	61bb      	str	r3, [r7, #24]
 801135e:	e003      	b.n	8011368 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8011360:	68bb      	ldr	r3, [r7, #8]
 8011362:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8011364:	2300      	movs	r3, #0
 8011366:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8011368:	e02f      	b.n	80113ca <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801136a:	697a      	ldr	r2, [r7, #20]
 801136c:	68f8      	ldr	r0, [r7, #12]
 801136e:	683b      	ldr	r3, [r7, #0]
 8011370:	9300      	str	r3, [sp, #0]
 8011372:	0013      	movs	r3, r2
 8011374:	2200      	movs	r2, #0
 8011376:	2180      	movs	r1, #128	@ 0x80
 8011378:	f001 f89c 	bl	80124b4 <UART_WaitOnFlagUntilTimeout>
 801137c:	1e03      	subs	r3, r0, #0
 801137e:	d004      	beq.n	801138a <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8011380:	68fb      	ldr	r3, [r7, #12]
 8011382:	2220      	movs	r2, #32
 8011384:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8011386:	2303      	movs	r3, #3
 8011388:	e03b      	b.n	8011402 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 801138a:	69fb      	ldr	r3, [r7, #28]
 801138c:	2b00      	cmp	r3, #0
 801138e:	d10b      	bne.n	80113a8 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8011390:	69bb      	ldr	r3, [r7, #24]
 8011392:	881b      	ldrh	r3, [r3, #0]
 8011394:	001a      	movs	r2, r3
 8011396:	68fb      	ldr	r3, [r7, #12]
 8011398:	681b      	ldr	r3, [r3, #0]
 801139a:	05d2      	lsls	r2, r2, #23
 801139c:	0dd2      	lsrs	r2, r2, #23
 801139e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80113a0:	69bb      	ldr	r3, [r7, #24]
 80113a2:	3302      	adds	r3, #2
 80113a4:	61bb      	str	r3, [r7, #24]
 80113a6:	e007      	b.n	80113b8 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80113a8:	69fb      	ldr	r3, [r7, #28]
 80113aa:	781a      	ldrb	r2, [r3, #0]
 80113ac:	68fb      	ldr	r3, [r7, #12]
 80113ae:	681b      	ldr	r3, [r3, #0]
 80113b0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80113b2:	69fb      	ldr	r3, [r7, #28]
 80113b4:	3301      	adds	r3, #1
 80113b6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80113b8:	68fb      	ldr	r3, [r7, #12]
 80113ba:	2252      	movs	r2, #82	@ 0x52
 80113bc:	5a9b      	ldrh	r3, [r3, r2]
 80113be:	b29b      	uxth	r3, r3
 80113c0:	3b01      	subs	r3, #1
 80113c2:	b299      	uxth	r1, r3
 80113c4:	68fb      	ldr	r3, [r7, #12]
 80113c6:	2252      	movs	r2, #82	@ 0x52
 80113c8:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80113ca:	68fb      	ldr	r3, [r7, #12]
 80113cc:	2252      	movs	r2, #82	@ 0x52
 80113ce:	5a9b      	ldrh	r3, [r3, r2]
 80113d0:	b29b      	uxth	r3, r3
 80113d2:	2b00      	cmp	r3, #0
 80113d4:	d1c9      	bne.n	801136a <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80113d6:	697a      	ldr	r2, [r7, #20]
 80113d8:	68f8      	ldr	r0, [r7, #12]
 80113da:	683b      	ldr	r3, [r7, #0]
 80113dc:	9300      	str	r3, [sp, #0]
 80113de:	0013      	movs	r3, r2
 80113e0:	2200      	movs	r2, #0
 80113e2:	2140      	movs	r1, #64	@ 0x40
 80113e4:	f001 f866 	bl	80124b4 <UART_WaitOnFlagUntilTimeout>
 80113e8:	1e03      	subs	r3, r0, #0
 80113ea:	d004      	beq.n	80113f6 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 80113ec:	68fb      	ldr	r3, [r7, #12]
 80113ee:	2220      	movs	r2, #32
 80113f0:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80113f2:	2303      	movs	r3, #3
 80113f4:	e005      	b.n	8011402 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80113f6:	68fb      	ldr	r3, [r7, #12]
 80113f8:	2220      	movs	r2, #32
 80113fa:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80113fc:	2300      	movs	r3, #0
 80113fe:	e000      	b.n	8011402 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8011400:	2302      	movs	r3, #2
  }
}
 8011402:	0018      	movs	r0, r3
 8011404:	46bd      	mov	sp, r7
 8011406:	b008      	add	sp, #32
 8011408:	bd80      	pop	{r7, pc}
	...

0801140c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 801140c:	b580      	push	{r7, lr}
 801140e:	b088      	sub	sp, #32
 8011410:	af00      	add	r7, sp, #0
 8011412:	60f8      	str	r0, [r7, #12]
 8011414:	60b9      	str	r1, [r7, #8]
 8011416:	1dbb      	adds	r3, r7, #6
 8011418:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801141a:	68fb      	ldr	r3, [r7, #12]
 801141c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801141e:	2b20      	cmp	r3, #32
 8011420:	d000      	beq.n	8011424 <HAL_UART_Transmit_DMA+0x18>
 8011422:	e077      	b.n	8011514 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8011424:	68bb      	ldr	r3, [r7, #8]
 8011426:	2b00      	cmp	r3, #0
 8011428:	d003      	beq.n	8011432 <HAL_UART_Transmit_DMA+0x26>
 801142a:	1dbb      	adds	r3, r7, #6
 801142c:	881b      	ldrh	r3, [r3, #0]
 801142e:	2b00      	cmp	r3, #0
 8011430:	d101      	bne.n	8011436 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8011432:	2301      	movs	r3, #1
 8011434:	e06f      	b.n	8011516 <HAL_UART_Transmit_DMA+0x10a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011436:	68fb      	ldr	r3, [r7, #12]
 8011438:	689a      	ldr	r2, [r3, #8]
 801143a:	2380      	movs	r3, #128	@ 0x80
 801143c:	015b      	lsls	r3, r3, #5
 801143e:	429a      	cmp	r2, r3
 8011440:	d109      	bne.n	8011456 <HAL_UART_Transmit_DMA+0x4a>
 8011442:	68fb      	ldr	r3, [r7, #12]
 8011444:	691b      	ldr	r3, [r3, #16]
 8011446:	2b00      	cmp	r3, #0
 8011448:	d105      	bne.n	8011456 <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 801144a:	68bb      	ldr	r3, [r7, #8]
 801144c:	2201      	movs	r2, #1
 801144e:	4013      	ands	r3, r2
 8011450:	d001      	beq.n	8011456 <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 8011452:	2301      	movs	r3, #1
 8011454:	e05f      	b.n	8011516 <HAL_UART_Transmit_DMA+0x10a>
      }
    }

    huart->pTxBuffPtr  = pData;
 8011456:	68fb      	ldr	r3, [r7, #12]
 8011458:	68ba      	ldr	r2, [r7, #8]
 801145a:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 801145c:	68fb      	ldr	r3, [r7, #12]
 801145e:	1dba      	adds	r2, r7, #6
 8011460:	2150      	movs	r1, #80	@ 0x50
 8011462:	8812      	ldrh	r2, [r2, #0]
 8011464:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8011466:	68fb      	ldr	r3, [r7, #12]
 8011468:	1dba      	adds	r2, r7, #6
 801146a:	2152      	movs	r1, #82	@ 0x52
 801146c:	8812      	ldrh	r2, [r2, #0]
 801146e:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011470:	68fb      	ldr	r3, [r7, #12]
 8011472:	2284      	movs	r2, #132	@ 0x84
 8011474:	2100      	movs	r1, #0
 8011476:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8011478:	68fb      	ldr	r3, [r7, #12]
 801147a:	2221      	movs	r2, #33	@ 0x21
 801147c:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 801147e:	68fb      	ldr	r3, [r7, #12]
 8011480:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011482:	2b00      	cmp	r3, #0
 8011484:	d027      	beq.n	80114d6 <HAL_UART_Transmit_DMA+0xca>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8011486:	68fb      	ldr	r3, [r7, #12]
 8011488:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801148a:	4a25      	ldr	r2, [pc, #148]	@ (8011520 <HAL_UART_Transmit_DMA+0x114>)
 801148c:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 801148e:	68fb      	ldr	r3, [r7, #12]
 8011490:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011492:	4a24      	ldr	r2, [pc, #144]	@ (8011524 <HAL_UART_Transmit_DMA+0x118>)
 8011494:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8011496:	68fb      	ldr	r3, [r7, #12]
 8011498:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801149a:	4a23      	ldr	r2, [pc, #140]	@ (8011528 <HAL_UART_Transmit_DMA+0x11c>)
 801149c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 801149e:	68fb      	ldr	r3, [r7, #12]
 80114a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80114a2:	2200      	movs	r2, #0
 80114a4:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80114a6:	68fb      	ldr	r3, [r7, #12]
 80114a8:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 80114aa:	68fb      	ldr	r3, [r7, #12]
 80114ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80114ae:	0019      	movs	r1, r3
 80114b0:	68fb      	ldr	r3, [r7, #12]
 80114b2:	681b      	ldr	r3, [r3, #0]
 80114b4:	3328      	adds	r3, #40	@ 0x28
 80114b6:	001a      	movs	r2, r3
 80114b8:	1dbb      	adds	r3, r7, #6
 80114ba:	881b      	ldrh	r3, [r3, #0]
 80114bc:	f7f9 f9d6 	bl	800a86c <HAL_DMA_Start_IT>
 80114c0:	1e03      	subs	r3, r0, #0
 80114c2:	d008      	beq.n	80114d6 <HAL_UART_Transmit_DMA+0xca>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80114c4:	68fb      	ldr	r3, [r7, #12]
 80114c6:	2284      	movs	r2, #132	@ 0x84
 80114c8:	2110      	movs	r1, #16
 80114ca:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80114cc:	68fb      	ldr	r3, [r7, #12]
 80114ce:	2220      	movs	r2, #32
 80114d0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 80114d2:	2301      	movs	r3, #1
 80114d4:	e01f      	b.n	8011516 <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80114d6:	68fb      	ldr	r3, [r7, #12]
 80114d8:	681b      	ldr	r3, [r3, #0]
 80114da:	2240      	movs	r2, #64	@ 0x40
 80114dc:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80114de:	f3ef 8310 	mrs	r3, PRIMASK
 80114e2:	613b      	str	r3, [r7, #16]
  return(result);
 80114e4:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80114e6:	61fb      	str	r3, [r7, #28]
 80114e8:	2301      	movs	r3, #1
 80114ea:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80114ec:	697b      	ldr	r3, [r7, #20]
 80114ee:	f383 8810 	msr	PRIMASK, r3
}
 80114f2:	46c0      	nop			@ (mov r8, r8)
 80114f4:	68fb      	ldr	r3, [r7, #12]
 80114f6:	681b      	ldr	r3, [r3, #0]
 80114f8:	689a      	ldr	r2, [r3, #8]
 80114fa:	68fb      	ldr	r3, [r7, #12]
 80114fc:	681b      	ldr	r3, [r3, #0]
 80114fe:	2180      	movs	r1, #128	@ 0x80
 8011500:	430a      	orrs	r2, r1
 8011502:	609a      	str	r2, [r3, #8]
 8011504:	69fb      	ldr	r3, [r7, #28]
 8011506:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011508:	69bb      	ldr	r3, [r7, #24]
 801150a:	f383 8810 	msr	PRIMASK, r3
}
 801150e:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 8011510:	2300      	movs	r3, #0
 8011512:	e000      	b.n	8011516 <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8011514:	2302      	movs	r3, #2
  }
}
 8011516:	0018      	movs	r0, r3
 8011518:	46bd      	mov	sp, r7
 801151a:	b008      	add	sp, #32
 801151c:	bd80      	pop	{r7, pc}
 801151e:	46c0      	nop			@ (mov r8, r8)
 8011520:	080127d9 	.word	0x080127d9
 8011524:	08012875 	.word	0x08012875
 8011528:	08012a15 	.word	0x08012a15

0801152c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801152c:	b580      	push	{r7, lr}
 801152e:	b088      	sub	sp, #32
 8011530:	af00      	add	r7, sp, #0
 8011532:	60f8      	str	r0, [r7, #12]
 8011534:	60b9      	str	r1, [r7, #8]
 8011536:	1dbb      	adds	r3, r7, #6
 8011538:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801153a:	68fb      	ldr	r3, [r7, #12]
 801153c:	2280      	movs	r2, #128	@ 0x80
 801153e:	589b      	ldr	r3, [r3, r2]
 8011540:	2b20      	cmp	r3, #32
 8011542:	d14a      	bne.n	80115da <HAL_UART_Receive_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8011544:	68bb      	ldr	r3, [r7, #8]
 8011546:	2b00      	cmp	r3, #0
 8011548:	d003      	beq.n	8011552 <HAL_UART_Receive_DMA+0x26>
 801154a:	1dbb      	adds	r3, r7, #6
 801154c:	881b      	ldrh	r3, [r3, #0]
 801154e:	2b00      	cmp	r3, #0
 8011550:	d101      	bne.n	8011556 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8011552:	2301      	movs	r3, #1
 8011554:	e042      	b.n	80115dc <HAL_UART_Receive_DMA+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011556:	68fb      	ldr	r3, [r7, #12]
 8011558:	689a      	ldr	r2, [r3, #8]
 801155a:	2380      	movs	r3, #128	@ 0x80
 801155c:	015b      	lsls	r3, r3, #5
 801155e:	429a      	cmp	r2, r3
 8011560:	d109      	bne.n	8011576 <HAL_UART_Receive_DMA+0x4a>
 8011562:	68fb      	ldr	r3, [r7, #12]
 8011564:	691b      	ldr	r3, [r3, #16]
 8011566:	2b00      	cmp	r3, #0
 8011568:	d105      	bne.n	8011576 <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 801156a:	68bb      	ldr	r3, [r7, #8]
 801156c:	2201      	movs	r2, #1
 801156e:	4013      	ands	r3, r2
 8011570:	d001      	beq.n	8011576 <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 8011572:	2301      	movs	r3, #1
 8011574:	e032      	b.n	80115dc <HAL_UART_Receive_DMA+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011576:	68fb      	ldr	r3, [r7, #12]
 8011578:	2200      	movs	r2, #0
 801157a:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801157c:	68fb      	ldr	r3, [r7, #12]
 801157e:	681b      	ldr	r3, [r3, #0]
 8011580:	4a18      	ldr	r2, [pc, #96]	@ (80115e4 <HAL_UART_Receive_DMA+0xb8>)
 8011582:	4293      	cmp	r3, r2
 8011584:	d020      	beq.n	80115c8 <HAL_UART_Receive_DMA+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8011586:	68fb      	ldr	r3, [r7, #12]
 8011588:	681b      	ldr	r3, [r3, #0]
 801158a:	685a      	ldr	r2, [r3, #4]
 801158c:	2380      	movs	r3, #128	@ 0x80
 801158e:	041b      	lsls	r3, r3, #16
 8011590:	4013      	ands	r3, r2
 8011592:	d019      	beq.n	80115c8 <HAL_UART_Receive_DMA+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011594:	f3ef 8310 	mrs	r3, PRIMASK
 8011598:	613b      	str	r3, [r7, #16]
  return(result);
 801159a:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801159c:	61fb      	str	r3, [r7, #28]
 801159e:	2301      	movs	r3, #1
 80115a0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80115a2:	697b      	ldr	r3, [r7, #20]
 80115a4:	f383 8810 	msr	PRIMASK, r3
}
 80115a8:	46c0      	nop			@ (mov r8, r8)
 80115aa:	68fb      	ldr	r3, [r7, #12]
 80115ac:	681b      	ldr	r3, [r3, #0]
 80115ae:	681a      	ldr	r2, [r3, #0]
 80115b0:	68fb      	ldr	r3, [r7, #12]
 80115b2:	681b      	ldr	r3, [r3, #0]
 80115b4:	2180      	movs	r1, #128	@ 0x80
 80115b6:	04c9      	lsls	r1, r1, #19
 80115b8:	430a      	orrs	r2, r1
 80115ba:	601a      	str	r2, [r3, #0]
 80115bc:	69fb      	ldr	r3, [r7, #28]
 80115be:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80115c0:	69bb      	ldr	r3, [r7, #24]
 80115c2:	f383 8810 	msr	PRIMASK, r3
}
 80115c6:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80115c8:	1dbb      	adds	r3, r7, #6
 80115ca:	881a      	ldrh	r2, [r3, #0]
 80115cc:	68b9      	ldr	r1, [r7, #8]
 80115ce:	68fb      	ldr	r3, [r7, #12]
 80115d0:	0018      	movs	r0, r3
 80115d2:	f000 ffd9 	bl	8012588 <UART_Start_Receive_DMA>
 80115d6:	0003      	movs	r3, r0
 80115d8:	e000      	b.n	80115dc <HAL_UART_Receive_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 80115da:	2302      	movs	r3, #2
  }
}
 80115dc:	0018      	movs	r0, r3
 80115de:	46bd      	mov	sp, r7
 80115e0:	b008      	add	sp, #32
 80115e2:	bd80      	pop	{r7, pc}
 80115e4:	40004800 	.word	0x40004800

080115e8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80115e8:	b590      	push	{r4, r7, lr}
 80115ea:	b0ab      	sub	sp, #172	@ 0xac
 80115ec:	af00      	add	r7, sp, #0
 80115ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80115f0:	687b      	ldr	r3, [r7, #4]
 80115f2:	681b      	ldr	r3, [r3, #0]
 80115f4:	69db      	ldr	r3, [r3, #28]
 80115f6:	22a4      	movs	r2, #164	@ 0xa4
 80115f8:	18b9      	adds	r1, r7, r2
 80115fa:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80115fc:	687b      	ldr	r3, [r7, #4]
 80115fe:	681b      	ldr	r3, [r3, #0]
 8011600:	681b      	ldr	r3, [r3, #0]
 8011602:	20a0      	movs	r0, #160	@ 0xa0
 8011604:	1839      	adds	r1, r7, r0
 8011606:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8011608:	687b      	ldr	r3, [r7, #4]
 801160a:	681b      	ldr	r3, [r3, #0]
 801160c:	689b      	ldr	r3, [r3, #8]
 801160e:	219c      	movs	r1, #156	@ 0x9c
 8011610:	1879      	adds	r1, r7, r1
 8011612:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8011614:	0011      	movs	r1, r2
 8011616:	18bb      	adds	r3, r7, r2
 8011618:	681b      	ldr	r3, [r3, #0]
 801161a:	4a9c      	ldr	r2, [pc, #624]	@ (801188c <HAL_UART_IRQHandler+0x2a4>)
 801161c:	4013      	ands	r3, r2
 801161e:	2298      	movs	r2, #152	@ 0x98
 8011620:	18bc      	adds	r4, r7, r2
 8011622:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8011624:	18bb      	adds	r3, r7, r2
 8011626:	681b      	ldr	r3, [r3, #0]
 8011628:	2b00      	cmp	r3, #0
 801162a:	d114      	bne.n	8011656 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 801162c:	187b      	adds	r3, r7, r1
 801162e:	681b      	ldr	r3, [r3, #0]
 8011630:	2220      	movs	r2, #32
 8011632:	4013      	ands	r3, r2
 8011634:	d00f      	beq.n	8011656 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8011636:	183b      	adds	r3, r7, r0
 8011638:	681b      	ldr	r3, [r3, #0]
 801163a:	2220      	movs	r2, #32
 801163c:	4013      	ands	r3, r2
 801163e:	d00a      	beq.n	8011656 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8011640:	687b      	ldr	r3, [r7, #4]
 8011642:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8011644:	2b00      	cmp	r3, #0
 8011646:	d100      	bne.n	801164a <HAL_UART_IRQHandler+0x62>
 8011648:	e2aa      	b.n	8011ba0 <HAL_UART_IRQHandler+0x5b8>
      {
        huart->RxISR(huart);
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801164e:	687a      	ldr	r2, [r7, #4]
 8011650:	0010      	movs	r0, r2
 8011652:	4798      	blx	r3
      }
      return;
 8011654:	e2a4      	b.n	8011ba0 <HAL_UART_IRQHandler+0x5b8>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8011656:	2398      	movs	r3, #152	@ 0x98
 8011658:	18fb      	adds	r3, r7, r3
 801165a:	681b      	ldr	r3, [r3, #0]
 801165c:	2b00      	cmp	r3, #0
 801165e:	d100      	bne.n	8011662 <HAL_UART_IRQHandler+0x7a>
 8011660:	e11a      	b.n	8011898 <HAL_UART_IRQHandler+0x2b0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8011662:	239c      	movs	r3, #156	@ 0x9c
 8011664:	18fb      	adds	r3, r7, r3
 8011666:	681b      	ldr	r3, [r3, #0]
 8011668:	2201      	movs	r2, #1
 801166a:	4013      	ands	r3, r2
 801166c:	d106      	bne.n	801167c <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 801166e:	23a0      	movs	r3, #160	@ 0xa0
 8011670:	18fb      	adds	r3, r7, r3
 8011672:	681b      	ldr	r3, [r3, #0]
 8011674:	4a86      	ldr	r2, [pc, #536]	@ (8011890 <HAL_UART_IRQHandler+0x2a8>)
 8011676:	4013      	ands	r3, r2
 8011678:	d100      	bne.n	801167c <HAL_UART_IRQHandler+0x94>
 801167a:	e10d      	b.n	8011898 <HAL_UART_IRQHandler+0x2b0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801167c:	23a4      	movs	r3, #164	@ 0xa4
 801167e:	18fb      	adds	r3, r7, r3
 8011680:	681b      	ldr	r3, [r3, #0]
 8011682:	2201      	movs	r2, #1
 8011684:	4013      	ands	r3, r2
 8011686:	d012      	beq.n	80116ae <HAL_UART_IRQHandler+0xc6>
 8011688:	23a0      	movs	r3, #160	@ 0xa0
 801168a:	18fb      	adds	r3, r7, r3
 801168c:	681a      	ldr	r2, [r3, #0]
 801168e:	2380      	movs	r3, #128	@ 0x80
 8011690:	005b      	lsls	r3, r3, #1
 8011692:	4013      	ands	r3, r2
 8011694:	d00b      	beq.n	80116ae <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8011696:	687b      	ldr	r3, [r7, #4]
 8011698:	681b      	ldr	r3, [r3, #0]
 801169a:	2201      	movs	r2, #1
 801169c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 801169e:	687b      	ldr	r3, [r7, #4]
 80116a0:	2284      	movs	r2, #132	@ 0x84
 80116a2:	589b      	ldr	r3, [r3, r2]
 80116a4:	2201      	movs	r2, #1
 80116a6:	431a      	orrs	r2, r3
 80116a8:	687b      	ldr	r3, [r7, #4]
 80116aa:	2184      	movs	r1, #132	@ 0x84
 80116ac:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80116ae:	23a4      	movs	r3, #164	@ 0xa4
 80116b0:	18fb      	adds	r3, r7, r3
 80116b2:	681b      	ldr	r3, [r3, #0]
 80116b4:	2202      	movs	r2, #2
 80116b6:	4013      	ands	r3, r2
 80116b8:	d011      	beq.n	80116de <HAL_UART_IRQHandler+0xf6>
 80116ba:	239c      	movs	r3, #156	@ 0x9c
 80116bc:	18fb      	adds	r3, r7, r3
 80116be:	681b      	ldr	r3, [r3, #0]
 80116c0:	2201      	movs	r2, #1
 80116c2:	4013      	ands	r3, r2
 80116c4:	d00b      	beq.n	80116de <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80116c6:	687b      	ldr	r3, [r7, #4]
 80116c8:	681b      	ldr	r3, [r3, #0]
 80116ca:	2202      	movs	r2, #2
 80116cc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80116ce:	687b      	ldr	r3, [r7, #4]
 80116d0:	2284      	movs	r2, #132	@ 0x84
 80116d2:	589b      	ldr	r3, [r3, r2]
 80116d4:	2204      	movs	r2, #4
 80116d6:	431a      	orrs	r2, r3
 80116d8:	687b      	ldr	r3, [r7, #4]
 80116da:	2184      	movs	r1, #132	@ 0x84
 80116dc:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80116de:	23a4      	movs	r3, #164	@ 0xa4
 80116e0:	18fb      	adds	r3, r7, r3
 80116e2:	681b      	ldr	r3, [r3, #0]
 80116e4:	2204      	movs	r2, #4
 80116e6:	4013      	ands	r3, r2
 80116e8:	d011      	beq.n	801170e <HAL_UART_IRQHandler+0x126>
 80116ea:	239c      	movs	r3, #156	@ 0x9c
 80116ec:	18fb      	adds	r3, r7, r3
 80116ee:	681b      	ldr	r3, [r3, #0]
 80116f0:	2201      	movs	r2, #1
 80116f2:	4013      	ands	r3, r2
 80116f4:	d00b      	beq.n	801170e <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80116f6:	687b      	ldr	r3, [r7, #4]
 80116f8:	681b      	ldr	r3, [r3, #0]
 80116fa:	2204      	movs	r2, #4
 80116fc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	2284      	movs	r2, #132	@ 0x84
 8011702:	589b      	ldr	r3, [r3, r2]
 8011704:	2202      	movs	r2, #2
 8011706:	431a      	orrs	r2, r3
 8011708:	687b      	ldr	r3, [r7, #4]
 801170a:	2184      	movs	r1, #132	@ 0x84
 801170c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 801170e:	23a4      	movs	r3, #164	@ 0xa4
 8011710:	18fb      	adds	r3, r7, r3
 8011712:	681b      	ldr	r3, [r3, #0]
 8011714:	2208      	movs	r2, #8
 8011716:	4013      	ands	r3, r2
 8011718:	d017      	beq.n	801174a <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 801171a:	23a0      	movs	r3, #160	@ 0xa0
 801171c:	18fb      	adds	r3, r7, r3
 801171e:	681b      	ldr	r3, [r3, #0]
 8011720:	2220      	movs	r2, #32
 8011722:	4013      	ands	r3, r2
 8011724:	d105      	bne.n	8011732 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8011726:	239c      	movs	r3, #156	@ 0x9c
 8011728:	18fb      	adds	r3, r7, r3
 801172a:	681b      	ldr	r3, [r3, #0]
 801172c:	2201      	movs	r2, #1
 801172e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8011730:	d00b      	beq.n	801174a <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8011732:	687b      	ldr	r3, [r7, #4]
 8011734:	681b      	ldr	r3, [r3, #0]
 8011736:	2208      	movs	r2, #8
 8011738:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801173a:	687b      	ldr	r3, [r7, #4]
 801173c:	2284      	movs	r2, #132	@ 0x84
 801173e:	589b      	ldr	r3, [r3, r2]
 8011740:	2208      	movs	r2, #8
 8011742:	431a      	orrs	r2, r3
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	2184      	movs	r1, #132	@ 0x84
 8011748:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 801174a:	23a4      	movs	r3, #164	@ 0xa4
 801174c:	18fb      	adds	r3, r7, r3
 801174e:	681a      	ldr	r2, [r3, #0]
 8011750:	2380      	movs	r3, #128	@ 0x80
 8011752:	011b      	lsls	r3, r3, #4
 8011754:	4013      	ands	r3, r2
 8011756:	d013      	beq.n	8011780 <HAL_UART_IRQHandler+0x198>
 8011758:	23a0      	movs	r3, #160	@ 0xa0
 801175a:	18fb      	adds	r3, r7, r3
 801175c:	681a      	ldr	r2, [r3, #0]
 801175e:	2380      	movs	r3, #128	@ 0x80
 8011760:	04db      	lsls	r3, r3, #19
 8011762:	4013      	ands	r3, r2
 8011764:	d00c      	beq.n	8011780 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8011766:	687b      	ldr	r3, [r7, #4]
 8011768:	681b      	ldr	r3, [r3, #0]
 801176a:	2280      	movs	r2, #128	@ 0x80
 801176c:	0112      	lsls	r2, r2, #4
 801176e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8011770:	687b      	ldr	r3, [r7, #4]
 8011772:	2284      	movs	r2, #132	@ 0x84
 8011774:	589b      	ldr	r3, [r3, r2]
 8011776:	2220      	movs	r2, #32
 8011778:	431a      	orrs	r2, r3
 801177a:	687b      	ldr	r3, [r7, #4]
 801177c:	2184      	movs	r1, #132	@ 0x84
 801177e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8011780:	687b      	ldr	r3, [r7, #4]
 8011782:	2284      	movs	r2, #132	@ 0x84
 8011784:	589b      	ldr	r3, [r3, r2]
 8011786:	2b00      	cmp	r3, #0
 8011788:	d100      	bne.n	801178c <HAL_UART_IRQHandler+0x1a4>
 801178a:	e20b      	b.n	8011ba4 <HAL_UART_IRQHandler+0x5bc>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 801178c:	23a4      	movs	r3, #164	@ 0xa4
 801178e:	18fb      	adds	r3, r7, r3
 8011790:	681b      	ldr	r3, [r3, #0]
 8011792:	2220      	movs	r2, #32
 8011794:	4013      	ands	r3, r2
 8011796:	d00e      	beq.n	80117b6 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8011798:	23a0      	movs	r3, #160	@ 0xa0
 801179a:	18fb      	adds	r3, r7, r3
 801179c:	681b      	ldr	r3, [r3, #0]
 801179e:	2220      	movs	r2, #32
 80117a0:	4013      	ands	r3, r2
 80117a2:	d008      	beq.n	80117b6 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 80117a4:	687b      	ldr	r3, [r7, #4]
 80117a6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80117a8:	2b00      	cmp	r3, #0
 80117aa:	d004      	beq.n	80117b6 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 80117ac:	687b      	ldr	r3, [r7, #4]
 80117ae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80117b0:	687a      	ldr	r2, [r7, #4]
 80117b2:	0010      	movs	r0, r2
 80117b4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80117b6:	687b      	ldr	r3, [r7, #4]
 80117b8:	2284      	movs	r2, #132	@ 0x84
 80117ba:	589b      	ldr	r3, [r3, r2]
 80117bc:	2194      	movs	r1, #148	@ 0x94
 80117be:	187a      	adds	r2, r7, r1
 80117c0:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80117c2:	687b      	ldr	r3, [r7, #4]
 80117c4:	681b      	ldr	r3, [r3, #0]
 80117c6:	689b      	ldr	r3, [r3, #8]
 80117c8:	2240      	movs	r2, #64	@ 0x40
 80117ca:	4013      	ands	r3, r2
 80117cc:	2b40      	cmp	r3, #64	@ 0x40
 80117ce:	d004      	beq.n	80117da <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80117d0:	187b      	adds	r3, r7, r1
 80117d2:	681b      	ldr	r3, [r3, #0]
 80117d4:	2228      	movs	r2, #40	@ 0x28
 80117d6:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80117d8:	d04b      	beq.n	8011872 <HAL_UART_IRQHandler+0x28a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	0018      	movs	r0, r3
 80117de:	f000 ff97 	bl	8012710 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	681b      	ldr	r3, [r3, #0]
 80117e6:	689b      	ldr	r3, [r3, #8]
 80117e8:	2240      	movs	r2, #64	@ 0x40
 80117ea:	4013      	ands	r3, r2
 80117ec:	2b40      	cmp	r3, #64	@ 0x40
 80117ee:	d139      	bne.n	8011864 <HAL_UART_IRQHandler+0x27c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80117f0:	f3ef 8310 	mrs	r3, PRIMASK
 80117f4:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 80117f6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80117f8:	2090      	movs	r0, #144	@ 0x90
 80117fa:	183a      	adds	r2, r7, r0
 80117fc:	6013      	str	r3, [r2, #0]
 80117fe:	2301      	movs	r3, #1
 8011800:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011802:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011804:	f383 8810 	msr	PRIMASK, r3
}
 8011808:	46c0      	nop			@ (mov r8, r8)
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	681b      	ldr	r3, [r3, #0]
 801180e:	689a      	ldr	r2, [r3, #8]
 8011810:	687b      	ldr	r3, [r7, #4]
 8011812:	681b      	ldr	r3, [r3, #0]
 8011814:	2140      	movs	r1, #64	@ 0x40
 8011816:	438a      	bics	r2, r1
 8011818:	609a      	str	r2, [r3, #8]
 801181a:	183b      	adds	r3, r7, r0
 801181c:	681b      	ldr	r3, [r3, #0]
 801181e:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011820:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011822:	f383 8810 	msr	PRIMASK, r3
}
 8011826:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801182c:	2b00      	cmp	r3, #0
 801182e:	d012      	beq.n	8011856 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8011830:	687b      	ldr	r3, [r7, #4]
 8011832:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011834:	4a17      	ldr	r2, [pc, #92]	@ (8011894 <HAL_UART_IRQHandler+0x2ac>)
 8011836:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801183c:	0018      	movs	r0, r3
 801183e:	f7f9 f8bb 	bl	800a9b8 <HAL_DMA_Abort_IT>
 8011842:	1e03      	subs	r3, r0, #0
 8011844:	d020      	beq.n	8011888 <HAL_UART_IRQHandler+0x2a0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8011846:	687b      	ldr	r3, [r7, #4]
 8011848:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801184a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801184c:	687b      	ldr	r3, [r7, #4]
 801184e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011850:	0018      	movs	r0, r3
 8011852:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011854:	e018      	b.n	8011888 <HAL_UART_IRQHandler+0x2a0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8011856:	687b      	ldr	r3, [r7, #4]
 8011858:	2298      	movs	r2, #152	@ 0x98
 801185a:	589b      	ldr	r3, [r3, r2]
 801185c:	687a      	ldr	r2, [r7, #4]
 801185e:	0010      	movs	r0, r2
 8011860:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011862:	e011      	b.n	8011888 <HAL_UART_IRQHandler+0x2a0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8011864:	687b      	ldr	r3, [r7, #4]
 8011866:	2298      	movs	r2, #152	@ 0x98
 8011868:	589b      	ldr	r3, [r3, r2]
 801186a:	687a      	ldr	r2, [r7, #4]
 801186c:	0010      	movs	r0, r2
 801186e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011870:	e00a      	b.n	8011888 <HAL_UART_IRQHandler+0x2a0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8011872:	687b      	ldr	r3, [r7, #4]
 8011874:	2298      	movs	r2, #152	@ 0x98
 8011876:	589b      	ldr	r3, [r3, r2]
 8011878:	687a      	ldr	r2, [r7, #4]
 801187a:	0010      	movs	r0, r2
 801187c:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801187e:	687b      	ldr	r3, [r7, #4]
 8011880:	2284      	movs	r2, #132	@ 0x84
 8011882:	2100      	movs	r1, #0
 8011884:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8011886:	e18d      	b.n	8011ba4 <HAL_UART_IRQHandler+0x5bc>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011888:	46c0      	nop			@ (mov r8, r8)
    return;
 801188a:	e18b      	b.n	8011ba4 <HAL_UART_IRQHandler+0x5bc>
 801188c:	0000080f 	.word	0x0000080f
 8011890:	04000120 	.word	0x04000120
 8011894:	08012a9d 	.word	0x08012a9d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801189c:	2b01      	cmp	r3, #1
 801189e:	d000      	beq.n	80118a2 <HAL_UART_IRQHandler+0x2ba>
 80118a0:	e13d      	b.n	8011b1e <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80118a2:	23a4      	movs	r3, #164	@ 0xa4
 80118a4:	18fb      	adds	r3, r7, r3
 80118a6:	681b      	ldr	r3, [r3, #0]
 80118a8:	2210      	movs	r2, #16
 80118aa:	4013      	ands	r3, r2
 80118ac:	d100      	bne.n	80118b0 <HAL_UART_IRQHandler+0x2c8>
 80118ae:	e136      	b.n	8011b1e <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80118b0:	23a0      	movs	r3, #160	@ 0xa0
 80118b2:	18fb      	adds	r3, r7, r3
 80118b4:	681b      	ldr	r3, [r3, #0]
 80118b6:	2210      	movs	r2, #16
 80118b8:	4013      	ands	r3, r2
 80118ba:	d100      	bne.n	80118be <HAL_UART_IRQHandler+0x2d6>
 80118bc:	e12f      	b.n	8011b1e <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80118be:	687b      	ldr	r3, [r7, #4]
 80118c0:	681b      	ldr	r3, [r3, #0]
 80118c2:	2210      	movs	r2, #16
 80118c4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80118c6:	687b      	ldr	r3, [r7, #4]
 80118c8:	681b      	ldr	r3, [r3, #0]
 80118ca:	689b      	ldr	r3, [r3, #8]
 80118cc:	2240      	movs	r2, #64	@ 0x40
 80118ce:	4013      	ands	r3, r2
 80118d0:	2b40      	cmp	r3, #64	@ 0x40
 80118d2:	d000      	beq.n	80118d6 <HAL_UART_IRQHandler+0x2ee>
 80118d4:	e0a2      	b.n	8011a1c <HAL_UART_IRQHandler+0x434>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80118d6:	687b      	ldr	r3, [r7, #4]
 80118d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80118da:	681b      	ldr	r3, [r3, #0]
 80118dc:	685a      	ldr	r2, [r3, #4]
 80118de:	217e      	movs	r1, #126	@ 0x7e
 80118e0:	187b      	adds	r3, r7, r1
 80118e2:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80118e4:	187b      	adds	r3, r7, r1
 80118e6:	881b      	ldrh	r3, [r3, #0]
 80118e8:	2b00      	cmp	r3, #0
 80118ea:	d100      	bne.n	80118ee <HAL_UART_IRQHandler+0x306>
 80118ec:	e15c      	b.n	8011ba8 <HAL_UART_IRQHandler+0x5c0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80118ee:	687b      	ldr	r3, [r7, #4]
 80118f0:	2258      	movs	r2, #88	@ 0x58
 80118f2:	5a9b      	ldrh	r3, [r3, r2]
 80118f4:	187a      	adds	r2, r7, r1
 80118f6:	8812      	ldrh	r2, [r2, #0]
 80118f8:	429a      	cmp	r2, r3
 80118fa:	d300      	bcc.n	80118fe <HAL_UART_IRQHandler+0x316>
 80118fc:	e154      	b.n	8011ba8 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80118fe:	687b      	ldr	r3, [r7, #4]
 8011900:	187a      	adds	r2, r7, r1
 8011902:	215a      	movs	r1, #90	@ 0x5a
 8011904:	8812      	ldrh	r2, [r2, #0]
 8011906:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801190c:	681b      	ldr	r3, [r3, #0]
 801190e:	681b      	ldr	r3, [r3, #0]
 8011910:	2220      	movs	r2, #32
 8011912:	4013      	ands	r3, r2
 8011914:	d16f      	bne.n	80119f6 <HAL_UART_IRQHandler+0x40e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011916:	f3ef 8310 	mrs	r3, PRIMASK
 801191a:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 801191c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801191e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8011920:	2301      	movs	r3, #1
 8011922:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011924:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011926:	f383 8810 	msr	PRIMASK, r3
}
 801192a:	46c0      	nop			@ (mov r8, r8)
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	681b      	ldr	r3, [r3, #0]
 8011930:	681a      	ldr	r2, [r3, #0]
 8011932:	687b      	ldr	r3, [r7, #4]
 8011934:	681b      	ldr	r3, [r3, #0]
 8011936:	49a0      	ldr	r1, [pc, #640]	@ (8011bb8 <HAL_UART_IRQHandler+0x5d0>)
 8011938:	400a      	ands	r2, r1
 801193a:	601a      	str	r2, [r3, #0]
 801193c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801193e:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011940:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011942:	f383 8810 	msr	PRIMASK, r3
}
 8011946:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011948:	f3ef 8310 	mrs	r3, PRIMASK
 801194c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 801194e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011950:	677b      	str	r3, [r7, #116]	@ 0x74
 8011952:	2301      	movs	r3, #1
 8011954:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011956:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011958:	f383 8810 	msr	PRIMASK, r3
}
 801195c:	46c0      	nop			@ (mov r8, r8)
 801195e:	687b      	ldr	r3, [r7, #4]
 8011960:	681b      	ldr	r3, [r3, #0]
 8011962:	689a      	ldr	r2, [r3, #8]
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	681b      	ldr	r3, [r3, #0]
 8011968:	2101      	movs	r1, #1
 801196a:	438a      	bics	r2, r1
 801196c:	609a      	str	r2, [r3, #8]
 801196e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8011970:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011972:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011974:	f383 8810 	msr	PRIMASK, r3
}
 8011978:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801197a:	f3ef 8310 	mrs	r3, PRIMASK
 801197e:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8011980:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011982:	673b      	str	r3, [r7, #112]	@ 0x70
 8011984:	2301      	movs	r3, #1
 8011986:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011988:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801198a:	f383 8810 	msr	PRIMASK, r3
}
 801198e:	46c0      	nop			@ (mov r8, r8)
 8011990:	687b      	ldr	r3, [r7, #4]
 8011992:	681b      	ldr	r3, [r3, #0]
 8011994:	689a      	ldr	r2, [r3, #8]
 8011996:	687b      	ldr	r3, [r7, #4]
 8011998:	681b      	ldr	r3, [r3, #0]
 801199a:	2140      	movs	r1, #64	@ 0x40
 801199c:	438a      	bics	r2, r1
 801199e:	609a      	str	r2, [r3, #8]
 80119a0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80119a2:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80119a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80119a6:	f383 8810 	msr	PRIMASK, r3
}
 80119aa:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80119ac:	687b      	ldr	r3, [r7, #4]
 80119ae:	2280      	movs	r2, #128	@ 0x80
 80119b0:	2120      	movs	r1, #32
 80119b2:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80119b4:	687b      	ldr	r3, [r7, #4]
 80119b6:	2200      	movs	r2, #0
 80119b8:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80119ba:	f3ef 8310 	mrs	r3, PRIMASK
 80119be:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 80119c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80119c2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80119c4:	2301      	movs	r3, #1
 80119c6:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80119c8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80119ca:	f383 8810 	msr	PRIMASK, r3
}
 80119ce:	46c0      	nop			@ (mov r8, r8)
 80119d0:	687b      	ldr	r3, [r7, #4]
 80119d2:	681b      	ldr	r3, [r3, #0]
 80119d4:	681a      	ldr	r2, [r3, #0]
 80119d6:	687b      	ldr	r3, [r7, #4]
 80119d8:	681b      	ldr	r3, [r3, #0]
 80119da:	2110      	movs	r1, #16
 80119dc:	438a      	bics	r2, r1
 80119de:	601a      	str	r2, [r3, #0]
 80119e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80119e2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80119e4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80119e6:	f383 8810 	msr	PRIMASK, r3
}
 80119ea:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80119ec:	687b      	ldr	r3, [r7, #4]
 80119ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80119f0:	0018      	movs	r0, r3
 80119f2:	f7f8 ffa1 	bl	800a938 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80119f6:	687b      	ldr	r3, [r7, #4]
 80119f8:	2202      	movs	r2, #2
 80119fa:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	22ac      	movs	r2, #172	@ 0xac
 8011a00:	589b      	ldr	r3, [r3, r2]
 8011a02:	687a      	ldr	r2, [r7, #4]
 8011a04:	2158      	movs	r1, #88	@ 0x58
 8011a06:	5a51      	ldrh	r1, [r2, r1]
 8011a08:	687a      	ldr	r2, [r7, #4]
 8011a0a:	205a      	movs	r0, #90	@ 0x5a
 8011a0c:	5a12      	ldrh	r2, [r2, r0]
 8011a0e:	b292      	uxth	r2, r2
 8011a10:	1a8a      	subs	r2, r1, r2
 8011a12:	b291      	uxth	r1, r2
 8011a14:	687a      	ldr	r2, [r7, #4]
 8011a16:	0010      	movs	r0, r2
 8011a18:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8011a1a:	e0c5      	b.n	8011ba8 <HAL_UART_IRQHandler+0x5c0>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8011a1c:	687b      	ldr	r3, [r7, #4]
 8011a1e:	2258      	movs	r2, #88	@ 0x58
 8011a20:	5a99      	ldrh	r1, [r3, r2]
 8011a22:	687b      	ldr	r3, [r7, #4]
 8011a24:	225a      	movs	r2, #90	@ 0x5a
 8011a26:	5a9b      	ldrh	r3, [r3, r2]
 8011a28:	b29a      	uxth	r2, r3
 8011a2a:	208e      	movs	r0, #142	@ 0x8e
 8011a2c:	183b      	adds	r3, r7, r0
 8011a2e:	1a8a      	subs	r2, r1, r2
 8011a30:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8011a32:	687b      	ldr	r3, [r7, #4]
 8011a34:	225a      	movs	r2, #90	@ 0x5a
 8011a36:	5a9b      	ldrh	r3, [r3, r2]
 8011a38:	b29b      	uxth	r3, r3
 8011a3a:	2b00      	cmp	r3, #0
 8011a3c:	d100      	bne.n	8011a40 <HAL_UART_IRQHandler+0x458>
 8011a3e:	e0b5      	b.n	8011bac <HAL_UART_IRQHandler+0x5c4>
          && (nb_rx_data > 0U))
 8011a40:	183b      	adds	r3, r7, r0
 8011a42:	881b      	ldrh	r3, [r3, #0]
 8011a44:	2b00      	cmp	r3, #0
 8011a46:	d100      	bne.n	8011a4a <HAL_UART_IRQHandler+0x462>
 8011a48:	e0b0      	b.n	8011bac <HAL_UART_IRQHandler+0x5c4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011a4a:	f3ef 8310 	mrs	r3, PRIMASK
 8011a4e:	60fb      	str	r3, [r7, #12]
  return(result);
 8011a50:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8011a52:	2488      	movs	r4, #136	@ 0x88
 8011a54:	193a      	adds	r2, r7, r4
 8011a56:	6013      	str	r3, [r2, #0]
 8011a58:	2301      	movs	r3, #1
 8011a5a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011a5c:	693b      	ldr	r3, [r7, #16]
 8011a5e:	f383 8810 	msr	PRIMASK, r3
}
 8011a62:	46c0      	nop			@ (mov r8, r8)
 8011a64:	687b      	ldr	r3, [r7, #4]
 8011a66:	681b      	ldr	r3, [r3, #0]
 8011a68:	681a      	ldr	r2, [r3, #0]
 8011a6a:	687b      	ldr	r3, [r7, #4]
 8011a6c:	681b      	ldr	r3, [r3, #0]
 8011a6e:	4953      	ldr	r1, [pc, #332]	@ (8011bbc <HAL_UART_IRQHandler+0x5d4>)
 8011a70:	400a      	ands	r2, r1
 8011a72:	601a      	str	r2, [r3, #0]
 8011a74:	193b      	adds	r3, r7, r4
 8011a76:	681b      	ldr	r3, [r3, #0]
 8011a78:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011a7a:	697b      	ldr	r3, [r7, #20]
 8011a7c:	f383 8810 	msr	PRIMASK, r3
}
 8011a80:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011a82:	f3ef 8310 	mrs	r3, PRIMASK
 8011a86:	61bb      	str	r3, [r7, #24]
  return(result);
 8011a88:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011a8a:	2484      	movs	r4, #132	@ 0x84
 8011a8c:	193a      	adds	r2, r7, r4
 8011a8e:	6013      	str	r3, [r2, #0]
 8011a90:	2301      	movs	r3, #1
 8011a92:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011a94:	69fb      	ldr	r3, [r7, #28]
 8011a96:	f383 8810 	msr	PRIMASK, r3
}
 8011a9a:	46c0      	nop			@ (mov r8, r8)
 8011a9c:	687b      	ldr	r3, [r7, #4]
 8011a9e:	681b      	ldr	r3, [r3, #0]
 8011aa0:	689a      	ldr	r2, [r3, #8]
 8011aa2:	687b      	ldr	r3, [r7, #4]
 8011aa4:	681b      	ldr	r3, [r3, #0]
 8011aa6:	2101      	movs	r1, #1
 8011aa8:	438a      	bics	r2, r1
 8011aaa:	609a      	str	r2, [r3, #8]
 8011aac:	193b      	adds	r3, r7, r4
 8011aae:	681b      	ldr	r3, [r3, #0]
 8011ab0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011ab2:	6a3b      	ldr	r3, [r7, #32]
 8011ab4:	f383 8810 	msr	PRIMASK, r3
}
 8011ab8:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8011aba:	687b      	ldr	r3, [r7, #4]
 8011abc:	2280      	movs	r2, #128	@ 0x80
 8011abe:	2120      	movs	r1, #32
 8011ac0:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011ac2:	687b      	ldr	r3, [r7, #4]
 8011ac4:	2200      	movs	r2, #0
 8011ac6:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8011ac8:	687b      	ldr	r3, [r7, #4]
 8011aca:	2200      	movs	r2, #0
 8011acc:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011ace:	f3ef 8310 	mrs	r3, PRIMASK
 8011ad2:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8011ad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011ad6:	2480      	movs	r4, #128	@ 0x80
 8011ad8:	193a      	adds	r2, r7, r4
 8011ada:	6013      	str	r3, [r2, #0]
 8011adc:	2301      	movs	r3, #1
 8011ade:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011ae0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011ae2:	f383 8810 	msr	PRIMASK, r3
}
 8011ae6:	46c0      	nop			@ (mov r8, r8)
 8011ae8:	687b      	ldr	r3, [r7, #4]
 8011aea:	681b      	ldr	r3, [r3, #0]
 8011aec:	681a      	ldr	r2, [r3, #0]
 8011aee:	687b      	ldr	r3, [r7, #4]
 8011af0:	681b      	ldr	r3, [r3, #0]
 8011af2:	2110      	movs	r1, #16
 8011af4:	438a      	bics	r2, r1
 8011af6:	601a      	str	r2, [r3, #0]
 8011af8:	193b      	adds	r3, r7, r4
 8011afa:	681b      	ldr	r3, [r3, #0]
 8011afc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011afe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011b00:	f383 8810 	msr	PRIMASK, r3
}
 8011b04:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8011b06:	687b      	ldr	r3, [r7, #4]
 8011b08:	2202      	movs	r2, #2
 8011b0a:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	22ac      	movs	r2, #172	@ 0xac
 8011b10:	589b      	ldr	r3, [r3, r2]
 8011b12:	183a      	adds	r2, r7, r0
 8011b14:	8811      	ldrh	r1, [r2, #0]
 8011b16:	687a      	ldr	r2, [r7, #4]
 8011b18:	0010      	movs	r0, r2
 8011b1a:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8011b1c:	e046      	b.n	8011bac <HAL_UART_IRQHandler+0x5c4>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8011b1e:	23a4      	movs	r3, #164	@ 0xa4
 8011b20:	18fb      	adds	r3, r7, r3
 8011b22:	681a      	ldr	r2, [r3, #0]
 8011b24:	2380      	movs	r3, #128	@ 0x80
 8011b26:	035b      	lsls	r3, r3, #13
 8011b28:	4013      	ands	r3, r2
 8011b2a:	d012      	beq.n	8011b52 <HAL_UART_IRQHandler+0x56a>
 8011b2c:	239c      	movs	r3, #156	@ 0x9c
 8011b2e:	18fb      	adds	r3, r7, r3
 8011b30:	681a      	ldr	r2, [r3, #0]
 8011b32:	2380      	movs	r3, #128	@ 0x80
 8011b34:	03db      	lsls	r3, r3, #15
 8011b36:	4013      	ands	r3, r2
 8011b38:	d00b      	beq.n	8011b52 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8011b3a:	687b      	ldr	r3, [r7, #4]
 8011b3c:	681b      	ldr	r3, [r3, #0]
 8011b3e:	2280      	movs	r2, #128	@ 0x80
 8011b40:	0352      	lsls	r2, r2, #13
 8011b42:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 8011b44:	687b      	ldr	r3, [r7, #4]
 8011b46:	22a8      	movs	r2, #168	@ 0xa8
 8011b48:	589b      	ldr	r3, [r3, r2]
 8011b4a:	687a      	ldr	r2, [r7, #4]
 8011b4c:	0010      	movs	r0, r2
 8011b4e:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8011b50:	e02f      	b.n	8011bb2 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8011b52:	23a4      	movs	r3, #164	@ 0xa4
 8011b54:	18fb      	adds	r3, r7, r3
 8011b56:	681b      	ldr	r3, [r3, #0]
 8011b58:	2280      	movs	r2, #128	@ 0x80
 8011b5a:	4013      	ands	r3, r2
 8011b5c:	d00f      	beq.n	8011b7e <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8011b5e:	23a0      	movs	r3, #160	@ 0xa0
 8011b60:	18fb      	adds	r3, r7, r3
 8011b62:	681b      	ldr	r3, [r3, #0]
 8011b64:	2280      	movs	r2, #128	@ 0x80
 8011b66:	4013      	ands	r3, r2
 8011b68:	d009      	beq.n	8011b7e <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8011b6a:	687b      	ldr	r3, [r7, #4]
 8011b6c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011b6e:	2b00      	cmp	r3, #0
 8011b70:	d01e      	beq.n	8011bb0 <HAL_UART_IRQHandler+0x5c8>
    {
      huart->TxISR(huart);
 8011b72:	687b      	ldr	r3, [r7, #4]
 8011b74:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011b76:	687a      	ldr	r2, [r7, #4]
 8011b78:	0010      	movs	r0, r2
 8011b7a:	4798      	blx	r3
    }
    return;
 8011b7c:	e018      	b.n	8011bb0 <HAL_UART_IRQHandler+0x5c8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8011b7e:	23a4      	movs	r3, #164	@ 0xa4
 8011b80:	18fb      	adds	r3, r7, r3
 8011b82:	681b      	ldr	r3, [r3, #0]
 8011b84:	2240      	movs	r2, #64	@ 0x40
 8011b86:	4013      	ands	r3, r2
 8011b88:	d013      	beq.n	8011bb2 <HAL_UART_IRQHandler+0x5ca>
 8011b8a:	23a0      	movs	r3, #160	@ 0xa0
 8011b8c:	18fb      	adds	r3, r7, r3
 8011b8e:	681b      	ldr	r3, [r3, #0]
 8011b90:	2240      	movs	r2, #64	@ 0x40
 8011b92:	4013      	ands	r3, r2
 8011b94:	d00d      	beq.n	8011bb2 <HAL_UART_IRQHandler+0x5ca>
  {
    UART_EndTransmit_IT(huart);
 8011b96:	687b      	ldr	r3, [r7, #4]
 8011b98:	0018      	movs	r0, r3
 8011b9a:	f000 ff98 	bl	8012ace <UART_EndTransmit_IT>
    return;
 8011b9e:	e008      	b.n	8011bb2 <HAL_UART_IRQHandler+0x5ca>
      return;
 8011ba0:	46c0      	nop			@ (mov r8, r8)
 8011ba2:	e006      	b.n	8011bb2 <HAL_UART_IRQHandler+0x5ca>
    return;
 8011ba4:	46c0      	nop			@ (mov r8, r8)
 8011ba6:	e004      	b.n	8011bb2 <HAL_UART_IRQHandler+0x5ca>
      return;
 8011ba8:	46c0      	nop			@ (mov r8, r8)
 8011baa:	e002      	b.n	8011bb2 <HAL_UART_IRQHandler+0x5ca>
      return;
 8011bac:	46c0      	nop			@ (mov r8, r8)
 8011bae:	e000      	b.n	8011bb2 <HAL_UART_IRQHandler+0x5ca>
    return;
 8011bb0:	46c0      	nop			@ (mov r8, r8)
  }

}
 8011bb2:	46bd      	mov	sp, r7
 8011bb4:	b02b      	add	sp, #172	@ 0xac
 8011bb6:	bd90      	pop	{r4, r7, pc}
 8011bb8:	fffffeff 	.word	0xfffffeff
 8011bbc:	fffffedf 	.word	0xfffffedf

08011bc0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8011bc0:	b580      	push	{r7, lr}
 8011bc2:	b082      	sub	sp, #8
 8011bc4:	af00      	add	r7, sp, #0
 8011bc6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8011bc8:	46c0      	nop			@ (mov r8, r8)
 8011bca:	46bd      	mov	sp, r7
 8011bcc:	b002      	add	sp, #8
 8011bce:	bd80      	pop	{r7, pc}

08011bd0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8011bd0:	b580      	push	{r7, lr}
 8011bd2:	b082      	sub	sp, #8
 8011bd4:	af00      	add	r7, sp, #0
 8011bd6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8011bd8:	46c0      	nop			@ (mov r8, r8)
 8011bda:	46bd      	mov	sp, r7
 8011bdc:	b002      	add	sp, #8
 8011bde:	bd80      	pop	{r7, pc}

08011be0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8011be0:	b580      	push	{r7, lr}
 8011be2:	b082      	sub	sp, #8
 8011be4:	af00      	add	r7, sp, #0
 8011be6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8011be8:	46c0      	nop			@ (mov r8, r8)
 8011bea:	46bd      	mov	sp, r7
 8011bec:	b002      	add	sp, #8
 8011bee:	bd80      	pop	{r7, pc}

08011bf0 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8011bf0:	b580      	push	{r7, lr}
 8011bf2:	b082      	sub	sp, #8
 8011bf4:	af00      	add	r7, sp, #0
 8011bf6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8011bf8:	46c0      	nop			@ (mov r8, r8)
 8011bfa:	46bd      	mov	sp, r7
 8011bfc:	b002      	add	sp, #8
 8011bfe:	bd80      	pop	{r7, pc}

08011c00 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8011c00:	b580      	push	{r7, lr}
 8011c02:	b082      	sub	sp, #8
 8011c04:	af00      	add	r7, sp, #0
 8011c06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8011c08:	46c0      	nop			@ (mov r8, r8)
 8011c0a:	46bd      	mov	sp, r7
 8011c0c:	b002      	add	sp, #8
 8011c0e:	bd80      	pop	{r7, pc}

08011c10 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8011c10:	b580      	push	{r7, lr}
 8011c12:	b082      	sub	sp, #8
 8011c14:	af00      	add	r7, sp, #0
 8011c16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8011c18:	46c0      	nop			@ (mov r8, r8)
 8011c1a:	46bd      	mov	sp, r7
 8011c1c:	b002      	add	sp, #8
 8011c1e:	bd80      	pop	{r7, pc}

08011c20 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8011c20:	b580      	push	{r7, lr}
 8011c22:	b082      	sub	sp, #8
 8011c24:	af00      	add	r7, sp, #0
 8011c26:	6078      	str	r0, [r7, #4]
 8011c28:	000a      	movs	r2, r1
 8011c2a:	1cbb      	adds	r3, r7, #2
 8011c2c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8011c2e:	46c0      	nop			@ (mov r8, r8)
 8011c30:	46bd      	mov	sp, r7
 8011c32:	b002      	add	sp, #8
 8011c34:	bd80      	pop	{r7, pc}
	...

08011c38 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8011c38:	b580      	push	{r7, lr}
 8011c3a:	b082      	sub	sp, #8
 8011c3c:	af00      	add	r7, sp, #0
 8011c3e:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8011c40:	687b      	ldr	r3, [r7, #4]
 8011c42:	2188      	movs	r1, #136	@ 0x88
 8011c44:	4a14      	ldr	r2, [pc, #80]	@ (8011c98 <UART_InitCallbacksToDefault+0x60>)
 8011c46:	505a      	str	r2, [r3, r1]
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8011c48:	687b      	ldr	r3, [r7, #4]
 8011c4a:	218c      	movs	r1, #140	@ 0x8c
 8011c4c:	4a13      	ldr	r2, [pc, #76]	@ (8011c9c <UART_InitCallbacksToDefault+0x64>)
 8011c4e:	505a      	str	r2, [r3, r1]
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8011c50:	687b      	ldr	r3, [r7, #4]
 8011c52:	2190      	movs	r1, #144	@ 0x90
 8011c54:	4a12      	ldr	r2, [pc, #72]	@ (8011ca0 <UART_InitCallbacksToDefault+0x68>)
 8011c56:	505a      	str	r2, [r3, r1]
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8011c58:	687b      	ldr	r3, [r7, #4]
 8011c5a:	2194      	movs	r1, #148	@ 0x94
 8011c5c:	4a11      	ldr	r2, [pc, #68]	@ (8011ca4 <UART_InitCallbacksToDefault+0x6c>)
 8011c5e:	505a      	str	r2, [r3, r1]
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8011c60:	687b      	ldr	r3, [r7, #4]
 8011c62:	2198      	movs	r1, #152	@ 0x98
 8011c64:	4a10      	ldr	r2, [pc, #64]	@ (8011ca8 <UART_InitCallbacksToDefault+0x70>)
 8011c66:	505a      	str	r2, [r3, r1]
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8011c68:	687b      	ldr	r3, [r7, #4]
 8011c6a:	219c      	movs	r1, #156	@ 0x9c
 8011c6c:	4a0f      	ldr	r2, [pc, #60]	@ (8011cac <UART_InitCallbacksToDefault+0x74>)
 8011c6e:	505a      	str	r2, [r3, r1]
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8011c70:	687b      	ldr	r3, [r7, #4]
 8011c72:	21a0      	movs	r1, #160	@ 0xa0
 8011c74:	4a0e      	ldr	r2, [pc, #56]	@ (8011cb0 <UART_InitCallbacksToDefault+0x78>)
 8011c76:	505a      	str	r2, [r3, r1]
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8011c78:	687b      	ldr	r3, [r7, #4]
 8011c7a:	21a4      	movs	r1, #164	@ 0xa4
 8011c7c:	4a0d      	ldr	r2, [pc, #52]	@ (8011cb4 <UART_InitCallbacksToDefault+0x7c>)
 8011c7e:	505a      	str	r2, [r3, r1]
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 8011c80:	687b      	ldr	r3, [r7, #4]
 8011c82:	21a8      	movs	r1, #168	@ 0xa8
 8011c84:	4a0c      	ldr	r2, [pc, #48]	@ (8011cb8 <UART_InitCallbacksToDefault+0x80>)
 8011c86:	505a      	str	r2, [r3, r1]
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8011c88:	687b      	ldr	r3, [r7, #4]
 8011c8a:	21ac      	movs	r1, #172	@ 0xac
 8011c8c:	4a0b      	ldr	r2, [pc, #44]	@ (8011cbc <UART_InitCallbacksToDefault+0x84>)
 8011c8e:	505a      	str	r2, [r3, r1]

}
 8011c90:	46c0      	nop			@ (mov r8, r8)
 8011c92:	46bd      	mov	sp, r7
 8011c94:	b002      	add	sp, #8
 8011c96:	bd80      	pop	{r7, pc}
 8011c98:	08011bd1 	.word	0x08011bd1
 8011c9c:	08011bc1 	.word	0x08011bc1
 8011ca0:	08011be1 	.word	0x08011be1
 8011ca4:	08003839 	.word	0x08003839
 8011ca8:	08003875 	.word	0x08003875
 8011cac:	08011bf1 	.word	0x08011bf1
 8011cb0:	08011c01 	.word	0x08011c01
 8011cb4:	08011c11 	.word	0x08011c11
 8011cb8:	08012b29 	.word	0x08012b29
 8011cbc:	08011c21 	.word	0x08011c21

08011cc0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8011cc0:	b5b0      	push	{r4, r5, r7, lr}
 8011cc2:	b08e      	sub	sp, #56	@ 0x38
 8011cc4:	af00      	add	r7, sp, #0
 8011cc6:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8011cc8:	231a      	movs	r3, #26
 8011cca:	2218      	movs	r2, #24
 8011ccc:	189b      	adds	r3, r3, r2
 8011cce:	19db      	adds	r3, r3, r7
 8011cd0:	2200      	movs	r2, #0
 8011cd2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8011cd4:	69fb      	ldr	r3, [r7, #28]
 8011cd6:	689a      	ldr	r2, [r3, #8]
 8011cd8:	69fb      	ldr	r3, [r7, #28]
 8011cda:	691b      	ldr	r3, [r3, #16]
 8011cdc:	431a      	orrs	r2, r3
 8011cde:	69fb      	ldr	r3, [r7, #28]
 8011ce0:	695b      	ldr	r3, [r3, #20]
 8011ce2:	431a      	orrs	r2, r3
 8011ce4:	69fb      	ldr	r3, [r7, #28]
 8011ce6:	69db      	ldr	r3, [r3, #28]
 8011ce8:	4313      	orrs	r3, r2
 8011cea:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8011cec:	69fb      	ldr	r3, [r7, #28]
 8011cee:	681b      	ldr	r3, [r3, #0]
 8011cf0:	681b      	ldr	r3, [r3, #0]
 8011cf2:	4ac3      	ldr	r2, [pc, #780]	@ (8012000 <UART_SetConfig+0x340>)
 8011cf4:	4013      	ands	r3, r2
 8011cf6:	0019      	movs	r1, r3
 8011cf8:	69fb      	ldr	r3, [r7, #28]
 8011cfa:	681b      	ldr	r3, [r3, #0]
 8011cfc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011cfe:	430a      	orrs	r2, r1
 8011d00:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8011d02:	69fb      	ldr	r3, [r7, #28]
 8011d04:	681b      	ldr	r3, [r3, #0]
 8011d06:	685b      	ldr	r3, [r3, #4]
 8011d08:	4abe      	ldr	r2, [pc, #760]	@ (8012004 <UART_SetConfig+0x344>)
 8011d0a:	4013      	ands	r3, r2
 8011d0c:	0019      	movs	r1, r3
 8011d0e:	69fb      	ldr	r3, [r7, #28]
 8011d10:	68da      	ldr	r2, [r3, #12]
 8011d12:	69fb      	ldr	r3, [r7, #28]
 8011d14:	681b      	ldr	r3, [r3, #0]
 8011d16:	430a      	orrs	r2, r1
 8011d18:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8011d1a:	69fb      	ldr	r3, [r7, #28]
 8011d1c:	699b      	ldr	r3, [r3, #24]
 8011d1e:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8011d20:	69fb      	ldr	r3, [r7, #28]
 8011d22:	681b      	ldr	r3, [r3, #0]
 8011d24:	4ab8      	ldr	r2, [pc, #736]	@ (8012008 <UART_SetConfig+0x348>)
 8011d26:	4293      	cmp	r3, r2
 8011d28:	d004      	beq.n	8011d34 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8011d2a:	69fb      	ldr	r3, [r7, #28]
 8011d2c:	6a1b      	ldr	r3, [r3, #32]
 8011d2e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011d30:	4313      	orrs	r3, r2
 8011d32:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8011d34:	69fb      	ldr	r3, [r7, #28]
 8011d36:	681b      	ldr	r3, [r3, #0]
 8011d38:	689b      	ldr	r3, [r3, #8]
 8011d3a:	4ab4      	ldr	r2, [pc, #720]	@ (801200c <UART_SetConfig+0x34c>)
 8011d3c:	4013      	ands	r3, r2
 8011d3e:	0019      	movs	r1, r3
 8011d40:	69fb      	ldr	r3, [r7, #28]
 8011d42:	681b      	ldr	r3, [r3, #0]
 8011d44:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011d46:	430a      	orrs	r2, r1
 8011d48:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8011d4a:	69fb      	ldr	r3, [r7, #28]
 8011d4c:	681b      	ldr	r3, [r3, #0]
 8011d4e:	4ab0      	ldr	r2, [pc, #704]	@ (8012010 <UART_SetConfig+0x350>)
 8011d50:	4293      	cmp	r3, r2
 8011d52:	d131      	bne.n	8011db8 <UART_SetConfig+0xf8>
 8011d54:	4baf      	ldr	r3, [pc, #700]	@ (8012014 <UART_SetConfig+0x354>)
 8011d56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011d58:	2203      	movs	r2, #3
 8011d5a:	4013      	ands	r3, r2
 8011d5c:	2b03      	cmp	r3, #3
 8011d5e:	d01d      	beq.n	8011d9c <UART_SetConfig+0xdc>
 8011d60:	d823      	bhi.n	8011daa <UART_SetConfig+0xea>
 8011d62:	2b02      	cmp	r3, #2
 8011d64:	d00c      	beq.n	8011d80 <UART_SetConfig+0xc0>
 8011d66:	d820      	bhi.n	8011daa <UART_SetConfig+0xea>
 8011d68:	2b00      	cmp	r3, #0
 8011d6a:	d002      	beq.n	8011d72 <UART_SetConfig+0xb2>
 8011d6c:	2b01      	cmp	r3, #1
 8011d6e:	d00e      	beq.n	8011d8e <UART_SetConfig+0xce>
 8011d70:	e01b      	b.n	8011daa <UART_SetConfig+0xea>
 8011d72:	231b      	movs	r3, #27
 8011d74:	2218      	movs	r2, #24
 8011d76:	189b      	adds	r3, r3, r2
 8011d78:	19db      	adds	r3, r3, r7
 8011d7a:	2201      	movs	r2, #1
 8011d7c:	701a      	strb	r2, [r3, #0]
 8011d7e:	e0b4      	b.n	8011eea <UART_SetConfig+0x22a>
 8011d80:	231b      	movs	r3, #27
 8011d82:	2218      	movs	r2, #24
 8011d84:	189b      	adds	r3, r3, r2
 8011d86:	19db      	adds	r3, r3, r7
 8011d88:	2202      	movs	r2, #2
 8011d8a:	701a      	strb	r2, [r3, #0]
 8011d8c:	e0ad      	b.n	8011eea <UART_SetConfig+0x22a>
 8011d8e:	231b      	movs	r3, #27
 8011d90:	2218      	movs	r2, #24
 8011d92:	189b      	adds	r3, r3, r2
 8011d94:	19db      	adds	r3, r3, r7
 8011d96:	2204      	movs	r2, #4
 8011d98:	701a      	strb	r2, [r3, #0]
 8011d9a:	e0a6      	b.n	8011eea <UART_SetConfig+0x22a>
 8011d9c:	231b      	movs	r3, #27
 8011d9e:	2218      	movs	r2, #24
 8011da0:	189b      	adds	r3, r3, r2
 8011da2:	19db      	adds	r3, r3, r7
 8011da4:	2208      	movs	r2, #8
 8011da6:	701a      	strb	r2, [r3, #0]
 8011da8:	e09f      	b.n	8011eea <UART_SetConfig+0x22a>
 8011daa:	231b      	movs	r3, #27
 8011dac:	2218      	movs	r2, #24
 8011dae:	189b      	adds	r3, r3, r2
 8011db0:	19db      	adds	r3, r3, r7
 8011db2:	2210      	movs	r2, #16
 8011db4:	701a      	strb	r2, [r3, #0]
 8011db6:	e098      	b.n	8011eea <UART_SetConfig+0x22a>
 8011db8:	69fb      	ldr	r3, [r7, #28]
 8011dba:	681b      	ldr	r3, [r3, #0]
 8011dbc:	4a96      	ldr	r2, [pc, #600]	@ (8012018 <UART_SetConfig+0x358>)
 8011dbe:	4293      	cmp	r3, r2
 8011dc0:	d131      	bne.n	8011e26 <UART_SetConfig+0x166>
 8011dc2:	4b94      	ldr	r3, [pc, #592]	@ (8012014 <UART_SetConfig+0x354>)
 8011dc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011dc6:	220c      	movs	r2, #12
 8011dc8:	4013      	ands	r3, r2
 8011dca:	2b0c      	cmp	r3, #12
 8011dcc:	d01d      	beq.n	8011e0a <UART_SetConfig+0x14a>
 8011dce:	d823      	bhi.n	8011e18 <UART_SetConfig+0x158>
 8011dd0:	2b08      	cmp	r3, #8
 8011dd2:	d00c      	beq.n	8011dee <UART_SetConfig+0x12e>
 8011dd4:	d820      	bhi.n	8011e18 <UART_SetConfig+0x158>
 8011dd6:	2b00      	cmp	r3, #0
 8011dd8:	d002      	beq.n	8011de0 <UART_SetConfig+0x120>
 8011dda:	2b04      	cmp	r3, #4
 8011ddc:	d00e      	beq.n	8011dfc <UART_SetConfig+0x13c>
 8011dde:	e01b      	b.n	8011e18 <UART_SetConfig+0x158>
 8011de0:	231b      	movs	r3, #27
 8011de2:	2218      	movs	r2, #24
 8011de4:	189b      	adds	r3, r3, r2
 8011de6:	19db      	adds	r3, r3, r7
 8011de8:	2200      	movs	r2, #0
 8011dea:	701a      	strb	r2, [r3, #0]
 8011dec:	e07d      	b.n	8011eea <UART_SetConfig+0x22a>
 8011dee:	231b      	movs	r3, #27
 8011df0:	2218      	movs	r2, #24
 8011df2:	189b      	adds	r3, r3, r2
 8011df4:	19db      	adds	r3, r3, r7
 8011df6:	2202      	movs	r2, #2
 8011df8:	701a      	strb	r2, [r3, #0]
 8011dfa:	e076      	b.n	8011eea <UART_SetConfig+0x22a>
 8011dfc:	231b      	movs	r3, #27
 8011dfe:	2218      	movs	r2, #24
 8011e00:	189b      	adds	r3, r3, r2
 8011e02:	19db      	adds	r3, r3, r7
 8011e04:	2204      	movs	r2, #4
 8011e06:	701a      	strb	r2, [r3, #0]
 8011e08:	e06f      	b.n	8011eea <UART_SetConfig+0x22a>
 8011e0a:	231b      	movs	r3, #27
 8011e0c:	2218      	movs	r2, #24
 8011e0e:	189b      	adds	r3, r3, r2
 8011e10:	19db      	adds	r3, r3, r7
 8011e12:	2208      	movs	r2, #8
 8011e14:	701a      	strb	r2, [r3, #0]
 8011e16:	e068      	b.n	8011eea <UART_SetConfig+0x22a>
 8011e18:	231b      	movs	r3, #27
 8011e1a:	2218      	movs	r2, #24
 8011e1c:	189b      	adds	r3, r3, r2
 8011e1e:	19db      	adds	r3, r3, r7
 8011e20:	2210      	movs	r2, #16
 8011e22:	701a      	strb	r2, [r3, #0]
 8011e24:	e061      	b.n	8011eea <UART_SetConfig+0x22a>
 8011e26:	69fb      	ldr	r3, [r7, #28]
 8011e28:	681b      	ldr	r3, [r3, #0]
 8011e2a:	4a7c      	ldr	r2, [pc, #496]	@ (801201c <UART_SetConfig+0x35c>)
 8011e2c:	4293      	cmp	r3, r2
 8011e2e:	d106      	bne.n	8011e3e <UART_SetConfig+0x17e>
 8011e30:	231b      	movs	r3, #27
 8011e32:	2218      	movs	r2, #24
 8011e34:	189b      	adds	r3, r3, r2
 8011e36:	19db      	adds	r3, r3, r7
 8011e38:	2200      	movs	r2, #0
 8011e3a:	701a      	strb	r2, [r3, #0]
 8011e3c:	e055      	b.n	8011eea <UART_SetConfig+0x22a>
 8011e3e:	69fb      	ldr	r3, [r7, #28]
 8011e40:	681b      	ldr	r3, [r3, #0]
 8011e42:	4a77      	ldr	r2, [pc, #476]	@ (8012020 <UART_SetConfig+0x360>)
 8011e44:	4293      	cmp	r3, r2
 8011e46:	d106      	bne.n	8011e56 <UART_SetConfig+0x196>
 8011e48:	231b      	movs	r3, #27
 8011e4a:	2218      	movs	r2, #24
 8011e4c:	189b      	adds	r3, r3, r2
 8011e4e:	19db      	adds	r3, r3, r7
 8011e50:	2200      	movs	r2, #0
 8011e52:	701a      	strb	r2, [r3, #0]
 8011e54:	e049      	b.n	8011eea <UART_SetConfig+0x22a>
 8011e56:	69fb      	ldr	r3, [r7, #28]
 8011e58:	681b      	ldr	r3, [r3, #0]
 8011e5a:	4a6b      	ldr	r2, [pc, #428]	@ (8012008 <UART_SetConfig+0x348>)
 8011e5c:	4293      	cmp	r3, r2
 8011e5e:	d13e      	bne.n	8011ede <UART_SetConfig+0x21e>
 8011e60:	4b6c      	ldr	r3, [pc, #432]	@ (8012014 <UART_SetConfig+0x354>)
 8011e62:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8011e64:	23c0      	movs	r3, #192	@ 0xc0
 8011e66:	011b      	lsls	r3, r3, #4
 8011e68:	4013      	ands	r3, r2
 8011e6a:	22c0      	movs	r2, #192	@ 0xc0
 8011e6c:	0112      	lsls	r2, r2, #4
 8011e6e:	4293      	cmp	r3, r2
 8011e70:	d027      	beq.n	8011ec2 <UART_SetConfig+0x202>
 8011e72:	22c0      	movs	r2, #192	@ 0xc0
 8011e74:	0112      	lsls	r2, r2, #4
 8011e76:	4293      	cmp	r3, r2
 8011e78:	d82a      	bhi.n	8011ed0 <UART_SetConfig+0x210>
 8011e7a:	2280      	movs	r2, #128	@ 0x80
 8011e7c:	0112      	lsls	r2, r2, #4
 8011e7e:	4293      	cmp	r3, r2
 8011e80:	d011      	beq.n	8011ea6 <UART_SetConfig+0x1e6>
 8011e82:	2280      	movs	r2, #128	@ 0x80
 8011e84:	0112      	lsls	r2, r2, #4
 8011e86:	4293      	cmp	r3, r2
 8011e88:	d822      	bhi.n	8011ed0 <UART_SetConfig+0x210>
 8011e8a:	2b00      	cmp	r3, #0
 8011e8c:	d004      	beq.n	8011e98 <UART_SetConfig+0x1d8>
 8011e8e:	2280      	movs	r2, #128	@ 0x80
 8011e90:	00d2      	lsls	r2, r2, #3
 8011e92:	4293      	cmp	r3, r2
 8011e94:	d00e      	beq.n	8011eb4 <UART_SetConfig+0x1f4>
 8011e96:	e01b      	b.n	8011ed0 <UART_SetConfig+0x210>
 8011e98:	231b      	movs	r3, #27
 8011e9a:	2218      	movs	r2, #24
 8011e9c:	189b      	adds	r3, r3, r2
 8011e9e:	19db      	adds	r3, r3, r7
 8011ea0:	2200      	movs	r2, #0
 8011ea2:	701a      	strb	r2, [r3, #0]
 8011ea4:	e021      	b.n	8011eea <UART_SetConfig+0x22a>
 8011ea6:	231b      	movs	r3, #27
 8011ea8:	2218      	movs	r2, #24
 8011eaa:	189b      	adds	r3, r3, r2
 8011eac:	19db      	adds	r3, r3, r7
 8011eae:	2202      	movs	r2, #2
 8011eb0:	701a      	strb	r2, [r3, #0]
 8011eb2:	e01a      	b.n	8011eea <UART_SetConfig+0x22a>
 8011eb4:	231b      	movs	r3, #27
 8011eb6:	2218      	movs	r2, #24
 8011eb8:	189b      	adds	r3, r3, r2
 8011eba:	19db      	adds	r3, r3, r7
 8011ebc:	2204      	movs	r2, #4
 8011ebe:	701a      	strb	r2, [r3, #0]
 8011ec0:	e013      	b.n	8011eea <UART_SetConfig+0x22a>
 8011ec2:	231b      	movs	r3, #27
 8011ec4:	2218      	movs	r2, #24
 8011ec6:	189b      	adds	r3, r3, r2
 8011ec8:	19db      	adds	r3, r3, r7
 8011eca:	2208      	movs	r2, #8
 8011ecc:	701a      	strb	r2, [r3, #0]
 8011ece:	e00c      	b.n	8011eea <UART_SetConfig+0x22a>
 8011ed0:	231b      	movs	r3, #27
 8011ed2:	2218      	movs	r2, #24
 8011ed4:	189b      	adds	r3, r3, r2
 8011ed6:	19db      	adds	r3, r3, r7
 8011ed8:	2210      	movs	r2, #16
 8011eda:	701a      	strb	r2, [r3, #0]
 8011edc:	e005      	b.n	8011eea <UART_SetConfig+0x22a>
 8011ede:	231b      	movs	r3, #27
 8011ee0:	2218      	movs	r2, #24
 8011ee2:	189b      	adds	r3, r3, r2
 8011ee4:	19db      	adds	r3, r3, r7
 8011ee6:	2210      	movs	r2, #16
 8011ee8:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8011eea:	69fb      	ldr	r3, [r7, #28]
 8011eec:	681b      	ldr	r3, [r3, #0]
 8011eee:	4a46      	ldr	r2, [pc, #280]	@ (8012008 <UART_SetConfig+0x348>)
 8011ef0:	4293      	cmp	r3, r2
 8011ef2:	d000      	beq.n	8011ef6 <UART_SetConfig+0x236>
 8011ef4:	e09a      	b.n	801202c <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8011ef6:	231b      	movs	r3, #27
 8011ef8:	2218      	movs	r2, #24
 8011efa:	189b      	adds	r3, r3, r2
 8011efc:	19db      	adds	r3, r3, r7
 8011efe:	781b      	ldrb	r3, [r3, #0]
 8011f00:	2b08      	cmp	r3, #8
 8011f02:	d01d      	beq.n	8011f40 <UART_SetConfig+0x280>
 8011f04:	dc20      	bgt.n	8011f48 <UART_SetConfig+0x288>
 8011f06:	2b04      	cmp	r3, #4
 8011f08:	d015      	beq.n	8011f36 <UART_SetConfig+0x276>
 8011f0a:	dc1d      	bgt.n	8011f48 <UART_SetConfig+0x288>
 8011f0c:	2b00      	cmp	r3, #0
 8011f0e:	d002      	beq.n	8011f16 <UART_SetConfig+0x256>
 8011f10:	2b02      	cmp	r3, #2
 8011f12:	d005      	beq.n	8011f20 <UART_SetConfig+0x260>
 8011f14:	e018      	b.n	8011f48 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011f16:	f7fe fa71 	bl	80103fc <HAL_RCC_GetPCLK1Freq>
 8011f1a:	0003      	movs	r3, r0
 8011f1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8011f1e:	e01c      	b.n	8011f5a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011f20:	4b3c      	ldr	r3, [pc, #240]	@ (8012014 <UART_SetConfig+0x354>)
 8011f22:	681b      	ldr	r3, [r3, #0]
 8011f24:	2210      	movs	r2, #16
 8011f26:	4013      	ands	r3, r2
 8011f28:	d002      	beq.n	8011f30 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8011f2a:	4b3e      	ldr	r3, [pc, #248]	@ (8012024 <UART_SetConfig+0x364>)
 8011f2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011f2e:	e014      	b.n	8011f5a <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8011f30:	4b3d      	ldr	r3, [pc, #244]	@ (8012028 <UART_SetConfig+0x368>)
 8011f32:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8011f34:	e011      	b.n	8011f5a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8011f36:	f7fe f9b1 	bl	801029c <HAL_RCC_GetSysClockFreq>
 8011f3a:	0003      	movs	r3, r0
 8011f3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8011f3e:	e00c      	b.n	8011f5a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011f40:	2380      	movs	r3, #128	@ 0x80
 8011f42:	021b      	lsls	r3, r3, #8
 8011f44:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8011f46:	e008      	b.n	8011f5a <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 8011f48:	2300      	movs	r3, #0
 8011f4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8011f4c:	231a      	movs	r3, #26
 8011f4e:	2218      	movs	r2, #24
 8011f50:	189b      	adds	r3, r3, r2
 8011f52:	19db      	adds	r3, r3, r7
 8011f54:	2201      	movs	r2, #1
 8011f56:	701a      	strb	r2, [r3, #0]
        break;
 8011f58:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8011f5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011f5c:	2b00      	cmp	r3, #0
 8011f5e:	d100      	bne.n	8011f62 <UART_SetConfig+0x2a2>
 8011f60:	e133      	b.n	80121ca <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8011f62:	69fb      	ldr	r3, [r7, #28]
 8011f64:	685a      	ldr	r2, [r3, #4]
 8011f66:	0013      	movs	r3, r2
 8011f68:	005b      	lsls	r3, r3, #1
 8011f6a:	189b      	adds	r3, r3, r2
 8011f6c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011f6e:	429a      	cmp	r2, r3
 8011f70:	d305      	bcc.n	8011f7e <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 8011f72:	69fb      	ldr	r3, [r7, #28]
 8011f74:	685b      	ldr	r3, [r3, #4]
 8011f76:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8011f78:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011f7a:	429a      	cmp	r2, r3
 8011f7c:	d906      	bls.n	8011f8c <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 8011f7e:	231a      	movs	r3, #26
 8011f80:	2218      	movs	r2, #24
 8011f82:	189b      	adds	r3, r3, r2
 8011f84:	19db      	adds	r3, r3, r7
 8011f86:	2201      	movs	r2, #1
 8011f88:	701a      	strb	r2, [r3, #0]
 8011f8a:	e11e      	b.n	80121ca <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8011f8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011f8e:	613b      	str	r3, [r7, #16]
 8011f90:	2300      	movs	r3, #0
 8011f92:	617b      	str	r3, [r7, #20]
 8011f94:	6939      	ldr	r1, [r7, #16]
 8011f96:	697a      	ldr	r2, [r7, #20]
 8011f98:	000b      	movs	r3, r1
 8011f9a:	0e1b      	lsrs	r3, r3, #24
 8011f9c:	0010      	movs	r0, r2
 8011f9e:	0205      	lsls	r5, r0, #8
 8011fa0:	431d      	orrs	r5, r3
 8011fa2:	000b      	movs	r3, r1
 8011fa4:	021c      	lsls	r4, r3, #8
 8011fa6:	69fb      	ldr	r3, [r7, #28]
 8011fa8:	685b      	ldr	r3, [r3, #4]
 8011faa:	085b      	lsrs	r3, r3, #1
 8011fac:	60bb      	str	r3, [r7, #8]
 8011fae:	2300      	movs	r3, #0
 8011fb0:	60fb      	str	r3, [r7, #12]
 8011fb2:	68b8      	ldr	r0, [r7, #8]
 8011fb4:	68f9      	ldr	r1, [r7, #12]
 8011fb6:	1900      	adds	r0, r0, r4
 8011fb8:	4169      	adcs	r1, r5
 8011fba:	69fb      	ldr	r3, [r7, #28]
 8011fbc:	685b      	ldr	r3, [r3, #4]
 8011fbe:	603b      	str	r3, [r7, #0]
 8011fc0:	2300      	movs	r3, #0
 8011fc2:	607b      	str	r3, [r7, #4]
 8011fc4:	683a      	ldr	r2, [r7, #0]
 8011fc6:	687b      	ldr	r3, [r7, #4]
 8011fc8:	f7ee faa8 	bl	800051c <__aeabi_uldivmod>
 8011fcc:	0002      	movs	r2, r0
 8011fce:	000b      	movs	r3, r1
 8011fd0:	0013      	movs	r3, r2
 8011fd2:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8011fd4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011fd6:	23c0      	movs	r3, #192	@ 0xc0
 8011fd8:	009b      	lsls	r3, r3, #2
 8011fda:	429a      	cmp	r2, r3
 8011fdc:	d309      	bcc.n	8011ff2 <UART_SetConfig+0x332>
 8011fde:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011fe0:	2380      	movs	r3, #128	@ 0x80
 8011fe2:	035b      	lsls	r3, r3, #13
 8011fe4:	429a      	cmp	r2, r3
 8011fe6:	d204      	bcs.n	8011ff2 <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 8011fe8:	69fb      	ldr	r3, [r7, #28]
 8011fea:	681b      	ldr	r3, [r3, #0]
 8011fec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011fee:	60da      	str	r2, [r3, #12]
 8011ff0:	e0eb      	b.n	80121ca <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 8011ff2:	231a      	movs	r3, #26
 8011ff4:	2218      	movs	r2, #24
 8011ff6:	189b      	adds	r3, r3, r2
 8011ff8:	19db      	adds	r3, r3, r7
 8011ffa:	2201      	movs	r2, #1
 8011ffc:	701a      	strb	r2, [r3, #0]
 8011ffe:	e0e4      	b.n	80121ca <UART_SetConfig+0x50a>
 8012000:	efff69f3 	.word	0xefff69f3
 8012004:	ffffcfff 	.word	0xffffcfff
 8012008:	40004800 	.word	0x40004800
 801200c:	fffff4ff 	.word	0xfffff4ff
 8012010:	40013800 	.word	0x40013800
 8012014:	40021000 	.word	0x40021000
 8012018:	40004400 	.word	0x40004400
 801201c:	40004c00 	.word	0x40004c00
 8012020:	40005000 	.word	0x40005000
 8012024:	003d0900 	.word	0x003d0900
 8012028:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801202c:	69fb      	ldr	r3, [r7, #28]
 801202e:	69da      	ldr	r2, [r3, #28]
 8012030:	2380      	movs	r3, #128	@ 0x80
 8012032:	021b      	lsls	r3, r3, #8
 8012034:	429a      	cmp	r2, r3
 8012036:	d000      	beq.n	801203a <UART_SetConfig+0x37a>
 8012038:	e070      	b.n	801211c <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 801203a:	231b      	movs	r3, #27
 801203c:	2218      	movs	r2, #24
 801203e:	189b      	adds	r3, r3, r2
 8012040:	19db      	adds	r3, r3, r7
 8012042:	781b      	ldrb	r3, [r3, #0]
 8012044:	2b08      	cmp	r3, #8
 8012046:	d822      	bhi.n	801208e <UART_SetConfig+0x3ce>
 8012048:	009a      	lsls	r2, r3, #2
 801204a:	4b67      	ldr	r3, [pc, #412]	@ (80121e8 <UART_SetConfig+0x528>)
 801204c:	18d3      	adds	r3, r2, r3
 801204e:	681b      	ldr	r3, [r3, #0]
 8012050:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8012052:	f7fe f9d3 	bl	80103fc <HAL_RCC_GetPCLK1Freq>
 8012056:	0003      	movs	r3, r0
 8012058:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801205a:	e021      	b.n	80120a0 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801205c:	f7fe f9e4 	bl	8010428 <HAL_RCC_GetPCLK2Freq>
 8012060:	0003      	movs	r3, r0
 8012062:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8012064:	e01c      	b.n	80120a0 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8012066:	4b61      	ldr	r3, [pc, #388]	@ (80121ec <UART_SetConfig+0x52c>)
 8012068:	681b      	ldr	r3, [r3, #0]
 801206a:	2210      	movs	r2, #16
 801206c:	4013      	ands	r3, r2
 801206e:	d002      	beq.n	8012076 <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8012070:	4b5f      	ldr	r3, [pc, #380]	@ (80121f0 <UART_SetConfig+0x530>)
 8012072:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8012074:	e014      	b.n	80120a0 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 8012076:	4b5f      	ldr	r3, [pc, #380]	@ (80121f4 <UART_SetConfig+0x534>)
 8012078:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801207a:	e011      	b.n	80120a0 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801207c:	f7fe f90e 	bl	801029c <HAL_RCC_GetSysClockFreq>
 8012080:	0003      	movs	r3, r0
 8012082:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8012084:	e00c      	b.n	80120a0 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8012086:	2380      	movs	r3, #128	@ 0x80
 8012088:	021b      	lsls	r3, r3, #8
 801208a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801208c:	e008      	b.n	80120a0 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 801208e:	2300      	movs	r3, #0
 8012090:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8012092:	231a      	movs	r3, #26
 8012094:	2218      	movs	r2, #24
 8012096:	189b      	adds	r3, r3, r2
 8012098:	19db      	adds	r3, r3, r7
 801209a:	2201      	movs	r2, #1
 801209c:	701a      	strb	r2, [r3, #0]
        break;
 801209e:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80120a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80120a2:	2b00      	cmp	r3, #0
 80120a4:	d100      	bne.n	80120a8 <UART_SetConfig+0x3e8>
 80120a6:	e090      	b.n	80121ca <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80120a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80120aa:	005a      	lsls	r2, r3, #1
 80120ac:	69fb      	ldr	r3, [r7, #28]
 80120ae:	685b      	ldr	r3, [r3, #4]
 80120b0:	085b      	lsrs	r3, r3, #1
 80120b2:	18d2      	adds	r2, r2, r3
 80120b4:	69fb      	ldr	r3, [r7, #28]
 80120b6:	685b      	ldr	r3, [r3, #4]
 80120b8:	0019      	movs	r1, r3
 80120ba:	0010      	movs	r0, r2
 80120bc:	f7ee f840 	bl	8000140 <__udivsi3>
 80120c0:	0003      	movs	r3, r0
 80120c2:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80120c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80120c6:	2b0f      	cmp	r3, #15
 80120c8:	d921      	bls.n	801210e <UART_SetConfig+0x44e>
 80120ca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80120cc:	2380      	movs	r3, #128	@ 0x80
 80120ce:	025b      	lsls	r3, r3, #9
 80120d0:	429a      	cmp	r2, r3
 80120d2:	d21c      	bcs.n	801210e <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80120d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80120d6:	b29a      	uxth	r2, r3
 80120d8:	200e      	movs	r0, #14
 80120da:	2418      	movs	r4, #24
 80120dc:	1903      	adds	r3, r0, r4
 80120de:	19db      	adds	r3, r3, r7
 80120e0:	210f      	movs	r1, #15
 80120e2:	438a      	bics	r2, r1
 80120e4:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80120e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80120e8:	085b      	lsrs	r3, r3, #1
 80120ea:	b29b      	uxth	r3, r3
 80120ec:	2207      	movs	r2, #7
 80120ee:	4013      	ands	r3, r2
 80120f0:	b299      	uxth	r1, r3
 80120f2:	1903      	adds	r3, r0, r4
 80120f4:	19db      	adds	r3, r3, r7
 80120f6:	1902      	adds	r2, r0, r4
 80120f8:	19d2      	adds	r2, r2, r7
 80120fa:	8812      	ldrh	r2, [r2, #0]
 80120fc:	430a      	orrs	r2, r1
 80120fe:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8012100:	69fb      	ldr	r3, [r7, #28]
 8012102:	681b      	ldr	r3, [r3, #0]
 8012104:	1902      	adds	r2, r0, r4
 8012106:	19d2      	adds	r2, r2, r7
 8012108:	8812      	ldrh	r2, [r2, #0]
 801210a:	60da      	str	r2, [r3, #12]
 801210c:	e05d      	b.n	80121ca <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 801210e:	231a      	movs	r3, #26
 8012110:	2218      	movs	r2, #24
 8012112:	189b      	adds	r3, r3, r2
 8012114:	19db      	adds	r3, r3, r7
 8012116:	2201      	movs	r2, #1
 8012118:	701a      	strb	r2, [r3, #0]
 801211a:	e056      	b.n	80121ca <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 801211c:	231b      	movs	r3, #27
 801211e:	2218      	movs	r2, #24
 8012120:	189b      	adds	r3, r3, r2
 8012122:	19db      	adds	r3, r3, r7
 8012124:	781b      	ldrb	r3, [r3, #0]
 8012126:	2b08      	cmp	r3, #8
 8012128:	d822      	bhi.n	8012170 <UART_SetConfig+0x4b0>
 801212a:	009a      	lsls	r2, r3, #2
 801212c:	4b32      	ldr	r3, [pc, #200]	@ (80121f8 <UART_SetConfig+0x538>)
 801212e:	18d3      	adds	r3, r2, r3
 8012130:	681b      	ldr	r3, [r3, #0]
 8012132:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8012134:	f7fe f962 	bl	80103fc <HAL_RCC_GetPCLK1Freq>
 8012138:	0003      	movs	r3, r0
 801213a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801213c:	e021      	b.n	8012182 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801213e:	f7fe f973 	bl	8010428 <HAL_RCC_GetPCLK2Freq>
 8012142:	0003      	movs	r3, r0
 8012144:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8012146:	e01c      	b.n	8012182 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8012148:	4b28      	ldr	r3, [pc, #160]	@ (80121ec <UART_SetConfig+0x52c>)
 801214a:	681b      	ldr	r3, [r3, #0]
 801214c:	2210      	movs	r2, #16
 801214e:	4013      	ands	r3, r2
 8012150:	d002      	beq.n	8012158 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8012152:	4b27      	ldr	r3, [pc, #156]	@ (80121f0 <UART_SetConfig+0x530>)
 8012154:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8012156:	e014      	b.n	8012182 <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 8012158:	4b26      	ldr	r3, [pc, #152]	@ (80121f4 <UART_SetConfig+0x534>)
 801215a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801215c:	e011      	b.n	8012182 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801215e:	f7fe f89d 	bl	801029c <HAL_RCC_GetSysClockFreq>
 8012162:	0003      	movs	r3, r0
 8012164:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8012166:	e00c      	b.n	8012182 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8012168:	2380      	movs	r3, #128	@ 0x80
 801216a:	021b      	lsls	r3, r3, #8
 801216c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801216e:	e008      	b.n	8012182 <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8012170:	2300      	movs	r3, #0
 8012172:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8012174:	231a      	movs	r3, #26
 8012176:	2218      	movs	r2, #24
 8012178:	189b      	adds	r3, r3, r2
 801217a:	19db      	adds	r3, r3, r7
 801217c:	2201      	movs	r2, #1
 801217e:	701a      	strb	r2, [r3, #0]
        break;
 8012180:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8012182:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012184:	2b00      	cmp	r3, #0
 8012186:	d020      	beq.n	80121ca <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8012188:	69fb      	ldr	r3, [r7, #28]
 801218a:	685b      	ldr	r3, [r3, #4]
 801218c:	085a      	lsrs	r2, r3, #1
 801218e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012190:	18d2      	adds	r2, r2, r3
 8012192:	69fb      	ldr	r3, [r7, #28]
 8012194:	685b      	ldr	r3, [r3, #4]
 8012196:	0019      	movs	r1, r3
 8012198:	0010      	movs	r0, r2
 801219a:	f7ed ffd1 	bl	8000140 <__udivsi3>
 801219e:	0003      	movs	r3, r0
 80121a0:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80121a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80121a4:	2b0f      	cmp	r3, #15
 80121a6:	d90a      	bls.n	80121be <UART_SetConfig+0x4fe>
 80121a8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80121aa:	2380      	movs	r3, #128	@ 0x80
 80121ac:	025b      	lsls	r3, r3, #9
 80121ae:	429a      	cmp	r2, r3
 80121b0:	d205      	bcs.n	80121be <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80121b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80121b4:	b29a      	uxth	r2, r3
 80121b6:	69fb      	ldr	r3, [r7, #28]
 80121b8:	681b      	ldr	r3, [r3, #0]
 80121ba:	60da      	str	r2, [r3, #12]
 80121bc:	e005      	b.n	80121ca <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 80121be:	231a      	movs	r3, #26
 80121c0:	2218      	movs	r2, #24
 80121c2:	189b      	adds	r3, r3, r2
 80121c4:	19db      	adds	r3, r3, r7
 80121c6:	2201      	movs	r2, #1
 80121c8:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80121ca:	69fb      	ldr	r3, [r7, #28]
 80121cc:	2200      	movs	r2, #0
 80121ce:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80121d0:	69fb      	ldr	r3, [r7, #28]
 80121d2:	2200      	movs	r2, #0
 80121d4:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80121d6:	231a      	movs	r3, #26
 80121d8:	2218      	movs	r2, #24
 80121da:	189b      	adds	r3, r3, r2
 80121dc:	19db      	adds	r3, r3, r7
 80121de:	781b      	ldrb	r3, [r3, #0]
}
 80121e0:	0018      	movs	r0, r3
 80121e2:	46bd      	mov	sp, r7
 80121e4:	b00e      	add	sp, #56	@ 0x38
 80121e6:	bdb0      	pop	{r4, r5, r7, pc}
 80121e8:	0801b9b8 	.word	0x0801b9b8
 80121ec:	40021000 	.word	0x40021000
 80121f0:	003d0900 	.word	0x003d0900
 80121f4:	00f42400 	.word	0x00f42400
 80121f8:	0801b9dc 	.word	0x0801b9dc

080121fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80121fc:	b580      	push	{r7, lr}
 80121fe:	b082      	sub	sp, #8
 8012200:	af00      	add	r7, sp, #0
 8012202:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8012204:	687b      	ldr	r3, [r7, #4]
 8012206:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012208:	2201      	movs	r2, #1
 801220a:	4013      	ands	r3, r2
 801220c:	d00b      	beq.n	8012226 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801220e:	687b      	ldr	r3, [r7, #4]
 8012210:	681b      	ldr	r3, [r3, #0]
 8012212:	685b      	ldr	r3, [r3, #4]
 8012214:	4a4a      	ldr	r2, [pc, #296]	@ (8012340 <UART_AdvFeatureConfig+0x144>)
 8012216:	4013      	ands	r3, r2
 8012218:	0019      	movs	r1, r3
 801221a:	687b      	ldr	r3, [r7, #4]
 801221c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801221e:	687b      	ldr	r3, [r7, #4]
 8012220:	681b      	ldr	r3, [r3, #0]
 8012222:	430a      	orrs	r2, r1
 8012224:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8012226:	687b      	ldr	r3, [r7, #4]
 8012228:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801222a:	2202      	movs	r2, #2
 801222c:	4013      	ands	r3, r2
 801222e:	d00b      	beq.n	8012248 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8012230:	687b      	ldr	r3, [r7, #4]
 8012232:	681b      	ldr	r3, [r3, #0]
 8012234:	685b      	ldr	r3, [r3, #4]
 8012236:	4a43      	ldr	r2, [pc, #268]	@ (8012344 <UART_AdvFeatureConfig+0x148>)
 8012238:	4013      	ands	r3, r2
 801223a:	0019      	movs	r1, r3
 801223c:	687b      	ldr	r3, [r7, #4]
 801223e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012240:	687b      	ldr	r3, [r7, #4]
 8012242:	681b      	ldr	r3, [r3, #0]
 8012244:	430a      	orrs	r2, r1
 8012246:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8012248:	687b      	ldr	r3, [r7, #4]
 801224a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801224c:	2204      	movs	r2, #4
 801224e:	4013      	ands	r3, r2
 8012250:	d00b      	beq.n	801226a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8012252:	687b      	ldr	r3, [r7, #4]
 8012254:	681b      	ldr	r3, [r3, #0]
 8012256:	685b      	ldr	r3, [r3, #4]
 8012258:	4a3b      	ldr	r2, [pc, #236]	@ (8012348 <UART_AdvFeatureConfig+0x14c>)
 801225a:	4013      	ands	r3, r2
 801225c:	0019      	movs	r1, r3
 801225e:	687b      	ldr	r3, [r7, #4]
 8012260:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8012262:	687b      	ldr	r3, [r7, #4]
 8012264:	681b      	ldr	r3, [r3, #0]
 8012266:	430a      	orrs	r2, r1
 8012268:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801226a:	687b      	ldr	r3, [r7, #4]
 801226c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801226e:	2208      	movs	r2, #8
 8012270:	4013      	ands	r3, r2
 8012272:	d00b      	beq.n	801228c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8012274:	687b      	ldr	r3, [r7, #4]
 8012276:	681b      	ldr	r3, [r3, #0]
 8012278:	685b      	ldr	r3, [r3, #4]
 801227a:	4a34      	ldr	r2, [pc, #208]	@ (801234c <UART_AdvFeatureConfig+0x150>)
 801227c:	4013      	ands	r3, r2
 801227e:	0019      	movs	r1, r3
 8012280:	687b      	ldr	r3, [r7, #4]
 8012282:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8012284:	687b      	ldr	r3, [r7, #4]
 8012286:	681b      	ldr	r3, [r3, #0]
 8012288:	430a      	orrs	r2, r1
 801228a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801228c:	687b      	ldr	r3, [r7, #4]
 801228e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012290:	2210      	movs	r2, #16
 8012292:	4013      	ands	r3, r2
 8012294:	d00b      	beq.n	80122ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8012296:	687b      	ldr	r3, [r7, #4]
 8012298:	681b      	ldr	r3, [r3, #0]
 801229a:	689b      	ldr	r3, [r3, #8]
 801229c:	4a2c      	ldr	r2, [pc, #176]	@ (8012350 <UART_AdvFeatureConfig+0x154>)
 801229e:	4013      	ands	r3, r2
 80122a0:	0019      	movs	r1, r3
 80122a2:	687b      	ldr	r3, [r7, #4]
 80122a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80122a6:	687b      	ldr	r3, [r7, #4]
 80122a8:	681b      	ldr	r3, [r3, #0]
 80122aa:	430a      	orrs	r2, r1
 80122ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80122ae:	687b      	ldr	r3, [r7, #4]
 80122b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80122b2:	2220      	movs	r2, #32
 80122b4:	4013      	ands	r3, r2
 80122b6:	d00b      	beq.n	80122d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80122b8:	687b      	ldr	r3, [r7, #4]
 80122ba:	681b      	ldr	r3, [r3, #0]
 80122bc:	689b      	ldr	r3, [r3, #8]
 80122be:	4a25      	ldr	r2, [pc, #148]	@ (8012354 <UART_AdvFeatureConfig+0x158>)
 80122c0:	4013      	ands	r3, r2
 80122c2:	0019      	movs	r1, r3
 80122c4:	687b      	ldr	r3, [r7, #4]
 80122c6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80122c8:	687b      	ldr	r3, [r7, #4]
 80122ca:	681b      	ldr	r3, [r3, #0]
 80122cc:	430a      	orrs	r2, r1
 80122ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80122d0:	687b      	ldr	r3, [r7, #4]
 80122d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80122d4:	2240      	movs	r2, #64	@ 0x40
 80122d6:	4013      	ands	r3, r2
 80122d8:	d01d      	beq.n	8012316 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80122da:	687b      	ldr	r3, [r7, #4]
 80122dc:	681b      	ldr	r3, [r3, #0]
 80122de:	685b      	ldr	r3, [r3, #4]
 80122e0:	4a1d      	ldr	r2, [pc, #116]	@ (8012358 <UART_AdvFeatureConfig+0x15c>)
 80122e2:	4013      	ands	r3, r2
 80122e4:	0019      	movs	r1, r3
 80122e6:	687b      	ldr	r3, [r7, #4]
 80122e8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80122ea:	687b      	ldr	r3, [r7, #4]
 80122ec:	681b      	ldr	r3, [r3, #0]
 80122ee:	430a      	orrs	r2, r1
 80122f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80122f2:	687b      	ldr	r3, [r7, #4]
 80122f4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80122f6:	2380      	movs	r3, #128	@ 0x80
 80122f8:	035b      	lsls	r3, r3, #13
 80122fa:	429a      	cmp	r2, r3
 80122fc:	d10b      	bne.n	8012316 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80122fe:	687b      	ldr	r3, [r7, #4]
 8012300:	681b      	ldr	r3, [r3, #0]
 8012302:	685b      	ldr	r3, [r3, #4]
 8012304:	4a15      	ldr	r2, [pc, #84]	@ (801235c <UART_AdvFeatureConfig+0x160>)
 8012306:	4013      	ands	r3, r2
 8012308:	0019      	movs	r1, r3
 801230a:	687b      	ldr	r3, [r7, #4]
 801230c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801230e:	687b      	ldr	r3, [r7, #4]
 8012310:	681b      	ldr	r3, [r3, #0]
 8012312:	430a      	orrs	r2, r1
 8012314:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8012316:	687b      	ldr	r3, [r7, #4]
 8012318:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801231a:	2280      	movs	r2, #128	@ 0x80
 801231c:	4013      	ands	r3, r2
 801231e:	d00b      	beq.n	8012338 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8012320:	687b      	ldr	r3, [r7, #4]
 8012322:	681b      	ldr	r3, [r3, #0]
 8012324:	685b      	ldr	r3, [r3, #4]
 8012326:	4a0e      	ldr	r2, [pc, #56]	@ (8012360 <UART_AdvFeatureConfig+0x164>)
 8012328:	4013      	ands	r3, r2
 801232a:	0019      	movs	r1, r3
 801232c:	687b      	ldr	r3, [r7, #4]
 801232e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8012330:	687b      	ldr	r3, [r7, #4]
 8012332:	681b      	ldr	r3, [r3, #0]
 8012334:	430a      	orrs	r2, r1
 8012336:	605a      	str	r2, [r3, #4]
  }
}
 8012338:	46c0      	nop			@ (mov r8, r8)
 801233a:	46bd      	mov	sp, r7
 801233c:	b002      	add	sp, #8
 801233e:	bd80      	pop	{r7, pc}
 8012340:	fffdffff 	.word	0xfffdffff
 8012344:	fffeffff 	.word	0xfffeffff
 8012348:	fffbffff 	.word	0xfffbffff
 801234c:	ffff7fff 	.word	0xffff7fff
 8012350:	ffffefff 	.word	0xffffefff
 8012354:	ffffdfff 	.word	0xffffdfff
 8012358:	ffefffff 	.word	0xffefffff
 801235c:	ff9fffff 	.word	0xff9fffff
 8012360:	fff7ffff 	.word	0xfff7ffff

08012364 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8012364:	b580      	push	{r7, lr}
 8012366:	b092      	sub	sp, #72	@ 0x48
 8012368:	af02      	add	r7, sp, #8
 801236a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801236c:	687b      	ldr	r3, [r7, #4]
 801236e:	2284      	movs	r2, #132	@ 0x84
 8012370:	2100      	movs	r1, #0
 8012372:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8012374:	f7f7 fcfc 	bl	8009d70 <HAL_GetTick>
 8012378:	0003      	movs	r3, r0
 801237a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801237c:	687b      	ldr	r3, [r7, #4]
 801237e:	681b      	ldr	r3, [r3, #0]
 8012380:	681b      	ldr	r3, [r3, #0]
 8012382:	2208      	movs	r2, #8
 8012384:	4013      	ands	r3, r2
 8012386:	2b08      	cmp	r3, #8
 8012388:	d12c      	bne.n	80123e4 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801238a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801238c:	2280      	movs	r2, #128	@ 0x80
 801238e:	0391      	lsls	r1, r2, #14
 8012390:	6878      	ldr	r0, [r7, #4]
 8012392:	4a46      	ldr	r2, [pc, #280]	@ (80124ac <UART_CheckIdleState+0x148>)
 8012394:	9200      	str	r2, [sp, #0]
 8012396:	2200      	movs	r2, #0
 8012398:	f000 f88c 	bl	80124b4 <UART_WaitOnFlagUntilTimeout>
 801239c:	1e03      	subs	r3, r0, #0
 801239e:	d021      	beq.n	80123e4 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80123a0:	f3ef 8310 	mrs	r3, PRIMASK
 80123a4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80123a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80123a8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80123aa:	2301      	movs	r3, #1
 80123ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80123ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80123b0:	f383 8810 	msr	PRIMASK, r3
}
 80123b4:	46c0      	nop			@ (mov r8, r8)
 80123b6:	687b      	ldr	r3, [r7, #4]
 80123b8:	681b      	ldr	r3, [r3, #0]
 80123ba:	681a      	ldr	r2, [r3, #0]
 80123bc:	687b      	ldr	r3, [r7, #4]
 80123be:	681b      	ldr	r3, [r3, #0]
 80123c0:	2180      	movs	r1, #128	@ 0x80
 80123c2:	438a      	bics	r2, r1
 80123c4:	601a      	str	r2, [r3, #0]
 80123c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80123c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80123ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80123cc:	f383 8810 	msr	PRIMASK, r3
}
 80123d0:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80123d2:	687b      	ldr	r3, [r7, #4]
 80123d4:	2220      	movs	r2, #32
 80123d6:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80123d8:	687b      	ldr	r3, [r7, #4]
 80123da:	2278      	movs	r2, #120	@ 0x78
 80123dc:	2100      	movs	r1, #0
 80123de:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80123e0:	2303      	movs	r3, #3
 80123e2:	e05f      	b.n	80124a4 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80123e4:	687b      	ldr	r3, [r7, #4]
 80123e6:	681b      	ldr	r3, [r3, #0]
 80123e8:	681b      	ldr	r3, [r3, #0]
 80123ea:	2204      	movs	r2, #4
 80123ec:	4013      	ands	r3, r2
 80123ee:	2b04      	cmp	r3, #4
 80123f0:	d146      	bne.n	8012480 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80123f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80123f4:	2280      	movs	r2, #128	@ 0x80
 80123f6:	03d1      	lsls	r1, r2, #15
 80123f8:	6878      	ldr	r0, [r7, #4]
 80123fa:	4a2c      	ldr	r2, [pc, #176]	@ (80124ac <UART_CheckIdleState+0x148>)
 80123fc:	9200      	str	r2, [sp, #0]
 80123fe:	2200      	movs	r2, #0
 8012400:	f000 f858 	bl	80124b4 <UART_WaitOnFlagUntilTimeout>
 8012404:	1e03      	subs	r3, r0, #0
 8012406:	d03b      	beq.n	8012480 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012408:	f3ef 8310 	mrs	r3, PRIMASK
 801240c:	60fb      	str	r3, [r7, #12]
  return(result);
 801240e:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8012410:	637b      	str	r3, [r7, #52]	@ 0x34
 8012412:	2301      	movs	r3, #1
 8012414:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012416:	693b      	ldr	r3, [r7, #16]
 8012418:	f383 8810 	msr	PRIMASK, r3
}
 801241c:	46c0      	nop			@ (mov r8, r8)
 801241e:	687b      	ldr	r3, [r7, #4]
 8012420:	681b      	ldr	r3, [r3, #0]
 8012422:	681a      	ldr	r2, [r3, #0]
 8012424:	687b      	ldr	r3, [r7, #4]
 8012426:	681b      	ldr	r3, [r3, #0]
 8012428:	4921      	ldr	r1, [pc, #132]	@ (80124b0 <UART_CheckIdleState+0x14c>)
 801242a:	400a      	ands	r2, r1
 801242c:	601a      	str	r2, [r3, #0]
 801242e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012430:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012432:	697b      	ldr	r3, [r7, #20]
 8012434:	f383 8810 	msr	PRIMASK, r3
}
 8012438:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801243a:	f3ef 8310 	mrs	r3, PRIMASK
 801243e:	61bb      	str	r3, [r7, #24]
  return(result);
 8012440:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012442:	633b      	str	r3, [r7, #48]	@ 0x30
 8012444:	2301      	movs	r3, #1
 8012446:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012448:	69fb      	ldr	r3, [r7, #28]
 801244a:	f383 8810 	msr	PRIMASK, r3
}
 801244e:	46c0      	nop			@ (mov r8, r8)
 8012450:	687b      	ldr	r3, [r7, #4]
 8012452:	681b      	ldr	r3, [r3, #0]
 8012454:	689a      	ldr	r2, [r3, #8]
 8012456:	687b      	ldr	r3, [r7, #4]
 8012458:	681b      	ldr	r3, [r3, #0]
 801245a:	2101      	movs	r1, #1
 801245c:	438a      	bics	r2, r1
 801245e:	609a      	str	r2, [r3, #8]
 8012460:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012462:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012464:	6a3b      	ldr	r3, [r7, #32]
 8012466:	f383 8810 	msr	PRIMASK, r3
}
 801246a:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 801246c:	687b      	ldr	r3, [r7, #4]
 801246e:	2280      	movs	r2, #128	@ 0x80
 8012470:	2120      	movs	r1, #32
 8012472:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8012474:	687b      	ldr	r3, [r7, #4]
 8012476:	2278      	movs	r2, #120	@ 0x78
 8012478:	2100      	movs	r1, #0
 801247a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801247c:	2303      	movs	r3, #3
 801247e:	e011      	b.n	80124a4 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8012480:	687b      	ldr	r3, [r7, #4]
 8012482:	2220      	movs	r2, #32
 8012484:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8012486:	687b      	ldr	r3, [r7, #4]
 8012488:	2280      	movs	r2, #128	@ 0x80
 801248a:	2120      	movs	r1, #32
 801248c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801248e:	687b      	ldr	r3, [r7, #4]
 8012490:	2200      	movs	r2, #0
 8012492:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012494:	687b      	ldr	r3, [r7, #4]
 8012496:	2200      	movs	r2, #0
 8012498:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 801249a:	687b      	ldr	r3, [r7, #4]
 801249c:	2278      	movs	r2, #120	@ 0x78
 801249e:	2100      	movs	r1, #0
 80124a0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80124a2:	2300      	movs	r3, #0
}
 80124a4:	0018      	movs	r0, r3
 80124a6:	46bd      	mov	sp, r7
 80124a8:	b010      	add	sp, #64	@ 0x40
 80124aa:	bd80      	pop	{r7, pc}
 80124ac:	01ffffff 	.word	0x01ffffff
 80124b0:	fffffedf 	.word	0xfffffedf

080124b4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80124b4:	b580      	push	{r7, lr}
 80124b6:	b084      	sub	sp, #16
 80124b8:	af00      	add	r7, sp, #0
 80124ba:	60f8      	str	r0, [r7, #12]
 80124bc:	60b9      	str	r1, [r7, #8]
 80124be:	603b      	str	r3, [r7, #0]
 80124c0:	1dfb      	adds	r3, r7, #7
 80124c2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80124c4:	e04b      	b.n	801255e <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80124c6:	69bb      	ldr	r3, [r7, #24]
 80124c8:	3301      	adds	r3, #1
 80124ca:	d048      	beq.n	801255e <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80124cc:	f7f7 fc50 	bl	8009d70 <HAL_GetTick>
 80124d0:	0002      	movs	r2, r0
 80124d2:	683b      	ldr	r3, [r7, #0]
 80124d4:	1ad3      	subs	r3, r2, r3
 80124d6:	69ba      	ldr	r2, [r7, #24]
 80124d8:	429a      	cmp	r2, r3
 80124da:	d302      	bcc.n	80124e2 <UART_WaitOnFlagUntilTimeout+0x2e>
 80124dc:	69bb      	ldr	r3, [r7, #24]
 80124de:	2b00      	cmp	r3, #0
 80124e0:	d101      	bne.n	80124e6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80124e2:	2303      	movs	r3, #3
 80124e4:	e04b      	b.n	801257e <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80124e6:	68fb      	ldr	r3, [r7, #12]
 80124e8:	681b      	ldr	r3, [r3, #0]
 80124ea:	681b      	ldr	r3, [r3, #0]
 80124ec:	2204      	movs	r2, #4
 80124ee:	4013      	ands	r3, r2
 80124f0:	d035      	beq.n	801255e <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80124f2:	68fb      	ldr	r3, [r7, #12]
 80124f4:	681b      	ldr	r3, [r3, #0]
 80124f6:	69db      	ldr	r3, [r3, #28]
 80124f8:	2208      	movs	r2, #8
 80124fa:	4013      	ands	r3, r2
 80124fc:	2b08      	cmp	r3, #8
 80124fe:	d111      	bne.n	8012524 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8012500:	68fb      	ldr	r3, [r7, #12]
 8012502:	681b      	ldr	r3, [r3, #0]
 8012504:	2208      	movs	r2, #8
 8012506:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8012508:	68fb      	ldr	r3, [r7, #12]
 801250a:	0018      	movs	r0, r3
 801250c:	f000 f900 	bl	8012710 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8012510:	68fb      	ldr	r3, [r7, #12]
 8012512:	2284      	movs	r2, #132	@ 0x84
 8012514:	2108      	movs	r1, #8
 8012516:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8012518:	68fb      	ldr	r3, [r7, #12]
 801251a:	2278      	movs	r2, #120	@ 0x78
 801251c:	2100      	movs	r1, #0
 801251e:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8012520:	2301      	movs	r3, #1
 8012522:	e02c      	b.n	801257e <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8012524:	68fb      	ldr	r3, [r7, #12]
 8012526:	681b      	ldr	r3, [r3, #0]
 8012528:	69da      	ldr	r2, [r3, #28]
 801252a:	2380      	movs	r3, #128	@ 0x80
 801252c:	011b      	lsls	r3, r3, #4
 801252e:	401a      	ands	r2, r3
 8012530:	2380      	movs	r3, #128	@ 0x80
 8012532:	011b      	lsls	r3, r3, #4
 8012534:	429a      	cmp	r2, r3
 8012536:	d112      	bne.n	801255e <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8012538:	68fb      	ldr	r3, [r7, #12]
 801253a:	681b      	ldr	r3, [r3, #0]
 801253c:	2280      	movs	r2, #128	@ 0x80
 801253e:	0112      	lsls	r2, r2, #4
 8012540:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8012542:	68fb      	ldr	r3, [r7, #12]
 8012544:	0018      	movs	r0, r3
 8012546:	f000 f8e3 	bl	8012710 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801254a:	68fb      	ldr	r3, [r7, #12]
 801254c:	2284      	movs	r2, #132	@ 0x84
 801254e:	2120      	movs	r1, #32
 8012550:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8012552:	68fb      	ldr	r3, [r7, #12]
 8012554:	2278      	movs	r2, #120	@ 0x78
 8012556:	2100      	movs	r1, #0
 8012558:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 801255a:	2303      	movs	r3, #3
 801255c:	e00f      	b.n	801257e <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801255e:	68fb      	ldr	r3, [r7, #12]
 8012560:	681b      	ldr	r3, [r3, #0]
 8012562:	69db      	ldr	r3, [r3, #28]
 8012564:	68ba      	ldr	r2, [r7, #8]
 8012566:	4013      	ands	r3, r2
 8012568:	68ba      	ldr	r2, [r7, #8]
 801256a:	1ad3      	subs	r3, r2, r3
 801256c:	425a      	negs	r2, r3
 801256e:	4153      	adcs	r3, r2
 8012570:	b2db      	uxtb	r3, r3
 8012572:	001a      	movs	r2, r3
 8012574:	1dfb      	adds	r3, r7, #7
 8012576:	781b      	ldrb	r3, [r3, #0]
 8012578:	429a      	cmp	r2, r3
 801257a:	d0a4      	beq.n	80124c6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801257c:	2300      	movs	r3, #0
}
 801257e:	0018      	movs	r0, r3
 8012580:	46bd      	mov	sp, r7
 8012582:	b004      	add	sp, #16
 8012584:	bd80      	pop	{r7, pc}
	...

08012588 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8012588:	b580      	push	{r7, lr}
 801258a:	b090      	sub	sp, #64	@ 0x40
 801258c:	af00      	add	r7, sp, #0
 801258e:	60f8      	str	r0, [r7, #12]
 8012590:	60b9      	str	r1, [r7, #8]
 8012592:	1dbb      	adds	r3, r7, #6
 8012594:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8012596:	68fb      	ldr	r3, [r7, #12]
 8012598:	68ba      	ldr	r2, [r7, #8]
 801259a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 801259c:	68fb      	ldr	r3, [r7, #12]
 801259e:	1dba      	adds	r2, r7, #6
 80125a0:	2158      	movs	r1, #88	@ 0x58
 80125a2:	8812      	ldrh	r2, [r2, #0]
 80125a4:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80125a6:	68fb      	ldr	r3, [r7, #12]
 80125a8:	2284      	movs	r2, #132	@ 0x84
 80125aa:	2100      	movs	r1, #0
 80125ac:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80125ae:	68fb      	ldr	r3, [r7, #12]
 80125b0:	2280      	movs	r2, #128	@ 0x80
 80125b2:	2122      	movs	r1, #34	@ 0x22
 80125b4:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 80125b6:	68fb      	ldr	r3, [r7, #12]
 80125b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80125ba:	2b00      	cmp	r3, #0
 80125bc:	d028      	beq.n	8012610 <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80125be:	68fb      	ldr	r3, [r7, #12]
 80125c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80125c2:	4a3e      	ldr	r2, [pc, #248]	@ (80126bc <UART_Start_Receive_DMA+0x134>)
 80125c4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80125c6:	68fb      	ldr	r3, [r7, #12]
 80125c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80125ca:	4a3d      	ldr	r2, [pc, #244]	@ (80126c0 <UART_Start_Receive_DMA+0x138>)
 80125cc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80125ce:	68fb      	ldr	r3, [r7, #12]
 80125d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80125d2:	4a3c      	ldr	r2, [pc, #240]	@ (80126c4 <UART_Start_Receive_DMA+0x13c>)
 80125d4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80125d6:	68fb      	ldr	r3, [r7, #12]
 80125d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80125da:	2200      	movs	r2, #0
 80125dc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80125de:	68fb      	ldr	r3, [r7, #12]
 80125e0:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 80125e2:	68fb      	ldr	r3, [r7, #12]
 80125e4:	681b      	ldr	r3, [r3, #0]
 80125e6:	3324      	adds	r3, #36	@ 0x24
 80125e8:	0019      	movs	r1, r3
 80125ea:	68fb      	ldr	r3, [r7, #12]
 80125ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80125ee:	001a      	movs	r2, r3
 80125f0:	1dbb      	adds	r3, r7, #6
 80125f2:	881b      	ldrh	r3, [r3, #0]
 80125f4:	f7f8 f93a 	bl	800a86c <HAL_DMA_Start_IT>
 80125f8:	1e03      	subs	r3, r0, #0
 80125fa:	d009      	beq.n	8012610 <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80125fc:	68fb      	ldr	r3, [r7, #12]
 80125fe:	2284      	movs	r2, #132	@ 0x84
 8012600:	2110      	movs	r1, #16
 8012602:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8012604:	68fb      	ldr	r3, [r7, #12]
 8012606:	2280      	movs	r2, #128	@ 0x80
 8012608:	2120      	movs	r1, #32
 801260a:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 801260c:	2301      	movs	r3, #1
 801260e:	e050      	b.n	80126b2 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8012610:	68fb      	ldr	r3, [r7, #12]
 8012612:	691b      	ldr	r3, [r3, #16]
 8012614:	2b00      	cmp	r3, #0
 8012616:	d019      	beq.n	801264c <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012618:	f3ef 8310 	mrs	r3, PRIMASK
 801261c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 801261e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8012620:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012622:	2301      	movs	r3, #1
 8012624:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012626:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012628:	f383 8810 	msr	PRIMASK, r3
}
 801262c:	46c0      	nop			@ (mov r8, r8)
 801262e:	68fb      	ldr	r3, [r7, #12]
 8012630:	681b      	ldr	r3, [r3, #0]
 8012632:	681a      	ldr	r2, [r3, #0]
 8012634:	68fb      	ldr	r3, [r7, #12]
 8012636:	681b      	ldr	r3, [r3, #0]
 8012638:	2180      	movs	r1, #128	@ 0x80
 801263a:	0049      	lsls	r1, r1, #1
 801263c:	430a      	orrs	r2, r1
 801263e:	601a      	str	r2, [r3, #0]
 8012640:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012642:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012644:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012646:	f383 8810 	msr	PRIMASK, r3
}
 801264a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801264c:	f3ef 8310 	mrs	r3, PRIMASK
 8012650:	613b      	str	r3, [r7, #16]
  return(result);
 8012652:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012654:	63bb      	str	r3, [r7, #56]	@ 0x38
 8012656:	2301      	movs	r3, #1
 8012658:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801265a:	697b      	ldr	r3, [r7, #20]
 801265c:	f383 8810 	msr	PRIMASK, r3
}
 8012660:	46c0      	nop			@ (mov r8, r8)
 8012662:	68fb      	ldr	r3, [r7, #12]
 8012664:	681b      	ldr	r3, [r3, #0]
 8012666:	689a      	ldr	r2, [r3, #8]
 8012668:	68fb      	ldr	r3, [r7, #12]
 801266a:	681b      	ldr	r3, [r3, #0]
 801266c:	2101      	movs	r1, #1
 801266e:	430a      	orrs	r2, r1
 8012670:	609a      	str	r2, [r3, #8]
 8012672:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012674:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012676:	69bb      	ldr	r3, [r7, #24]
 8012678:	f383 8810 	msr	PRIMASK, r3
}
 801267c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801267e:	f3ef 8310 	mrs	r3, PRIMASK
 8012682:	61fb      	str	r3, [r7, #28]
  return(result);
 8012684:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8012686:	637b      	str	r3, [r7, #52]	@ 0x34
 8012688:	2301      	movs	r3, #1
 801268a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801268c:	6a3b      	ldr	r3, [r7, #32]
 801268e:	f383 8810 	msr	PRIMASK, r3
}
 8012692:	46c0      	nop			@ (mov r8, r8)
 8012694:	68fb      	ldr	r3, [r7, #12]
 8012696:	681b      	ldr	r3, [r3, #0]
 8012698:	689a      	ldr	r2, [r3, #8]
 801269a:	68fb      	ldr	r3, [r7, #12]
 801269c:	681b      	ldr	r3, [r3, #0]
 801269e:	2140      	movs	r1, #64	@ 0x40
 80126a0:	430a      	orrs	r2, r1
 80126a2:	609a      	str	r2, [r3, #8]
 80126a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80126a6:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80126a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80126aa:	f383 8810 	msr	PRIMASK, r3
}
 80126ae:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 80126b0:	2300      	movs	r3, #0
}
 80126b2:	0018      	movs	r0, r3
 80126b4:	46bd      	mov	sp, r7
 80126b6:	b010      	add	sp, #64	@ 0x40
 80126b8:	bd80      	pop	{r7, pc}
 80126ba:	46c0      	nop			@ (mov r8, r8)
 80126bc:	08012899 	.word	0x08012899
 80126c0:	080129cd 	.word	0x080129cd
 80126c4:	08012a15 	.word	0x08012a15

080126c8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80126c8:	b580      	push	{r7, lr}
 80126ca:	b086      	sub	sp, #24
 80126cc:	af00      	add	r7, sp, #0
 80126ce:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80126d0:	f3ef 8310 	mrs	r3, PRIMASK
 80126d4:	60bb      	str	r3, [r7, #8]
  return(result);
 80126d6:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80126d8:	617b      	str	r3, [r7, #20]
 80126da:	2301      	movs	r3, #1
 80126dc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80126de:	68fb      	ldr	r3, [r7, #12]
 80126e0:	f383 8810 	msr	PRIMASK, r3
}
 80126e4:	46c0      	nop			@ (mov r8, r8)
 80126e6:	687b      	ldr	r3, [r7, #4]
 80126e8:	681b      	ldr	r3, [r3, #0]
 80126ea:	681a      	ldr	r2, [r3, #0]
 80126ec:	687b      	ldr	r3, [r7, #4]
 80126ee:	681b      	ldr	r3, [r3, #0]
 80126f0:	21c0      	movs	r1, #192	@ 0xc0
 80126f2:	438a      	bics	r2, r1
 80126f4:	601a      	str	r2, [r3, #0]
 80126f6:	697b      	ldr	r3, [r7, #20]
 80126f8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80126fa:	693b      	ldr	r3, [r7, #16]
 80126fc:	f383 8810 	msr	PRIMASK, r3
}
 8012700:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8012702:	687b      	ldr	r3, [r7, #4]
 8012704:	2220      	movs	r2, #32
 8012706:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8012708:	46c0      	nop			@ (mov r8, r8)
 801270a:	46bd      	mov	sp, r7
 801270c:	b006      	add	sp, #24
 801270e:	bd80      	pop	{r7, pc}

08012710 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8012710:	b580      	push	{r7, lr}
 8012712:	b08e      	sub	sp, #56	@ 0x38
 8012714:	af00      	add	r7, sp, #0
 8012716:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012718:	f3ef 8310 	mrs	r3, PRIMASK
 801271c:	617b      	str	r3, [r7, #20]
  return(result);
 801271e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8012720:	637b      	str	r3, [r7, #52]	@ 0x34
 8012722:	2301      	movs	r3, #1
 8012724:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012726:	69bb      	ldr	r3, [r7, #24]
 8012728:	f383 8810 	msr	PRIMASK, r3
}
 801272c:	46c0      	nop			@ (mov r8, r8)
 801272e:	687b      	ldr	r3, [r7, #4]
 8012730:	681b      	ldr	r3, [r3, #0]
 8012732:	681a      	ldr	r2, [r3, #0]
 8012734:	687b      	ldr	r3, [r7, #4]
 8012736:	681b      	ldr	r3, [r3, #0]
 8012738:	4926      	ldr	r1, [pc, #152]	@ (80127d4 <UART_EndRxTransfer+0xc4>)
 801273a:	400a      	ands	r2, r1
 801273c:	601a      	str	r2, [r3, #0]
 801273e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012740:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012742:	69fb      	ldr	r3, [r7, #28]
 8012744:	f383 8810 	msr	PRIMASK, r3
}
 8012748:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801274a:	f3ef 8310 	mrs	r3, PRIMASK
 801274e:	623b      	str	r3, [r7, #32]
  return(result);
 8012750:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012752:	633b      	str	r3, [r7, #48]	@ 0x30
 8012754:	2301      	movs	r3, #1
 8012756:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801275a:	f383 8810 	msr	PRIMASK, r3
}
 801275e:	46c0      	nop			@ (mov r8, r8)
 8012760:	687b      	ldr	r3, [r7, #4]
 8012762:	681b      	ldr	r3, [r3, #0]
 8012764:	689a      	ldr	r2, [r3, #8]
 8012766:	687b      	ldr	r3, [r7, #4]
 8012768:	681b      	ldr	r3, [r3, #0]
 801276a:	2101      	movs	r1, #1
 801276c:	438a      	bics	r2, r1
 801276e:	609a      	str	r2, [r3, #8]
 8012770:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012772:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012774:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012776:	f383 8810 	msr	PRIMASK, r3
}
 801277a:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801277c:	687b      	ldr	r3, [r7, #4]
 801277e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8012780:	2b01      	cmp	r3, #1
 8012782:	d118      	bne.n	80127b6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012784:	f3ef 8310 	mrs	r3, PRIMASK
 8012788:	60bb      	str	r3, [r7, #8]
  return(result);
 801278a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801278c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801278e:	2301      	movs	r3, #1
 8012790:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012792:	68fb      	ldr	r3, [r7, #12]
 8012794:	f383 8810 	msr	PRIMASK, r3
}
 8012798:	46c0      	nop			@ (mov r8, r8)
 801279a:	687b      	ldr	r3, [r7, #4]
 801279c:	681b      	ldr	r3, [r3, #0]
 801279e:	681a      	ldr	r2, [r3, #0]
 80127a0:	687b      	ldr	r3, [r7, #4]
 80127a2:	681b      	ldr	r3, [r3, #0]
 80127a4:	2110      	movs	r1, #16
 80127a6:	438a      	bics	r2, r1
 80127a8:	601a      	str	r2, [r3, #0]
 80127aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80127ac:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80127ae:	693b      	ldr	r3, [r7, #16]
 80127b0:	f383 8810 	msr	PRIMASK, r3
}
 80127b4:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80127b6:	687b      	ldr	r3, [r7, #4]
 80127b8:	2280      	movs	r2, #128	@ 0x80
 80127ba:	2120      	movs	r1, #32
 80127bc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80127be:	687b      	ldr	r3, [r7, #4]
 80127c0:	2200      	movs	r2, #0
 80127c2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80127c4:	687b      	ldr	r3, [r7, #4]
 80127c6:	2200      	movs	r2, #0
 80127c8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80127ca:	46c0      	nop			@ (mov r8, r8)
 80127cc:	46bd      	mov	sp, r7
 80127ce:	b00e      	add	sp, #56	@ 0x38
 80127d0:	bd80      	pop	{r7, pc}
 80127d2:	46c0      	nop			@ (mov r8, r8)
 80127d4:	fffffedf 	.word	0xfffffedf

080127d8 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80127d8:	b580      	push	{r7, lr}
 80127da:	b08c      	sub	sp, #48	@ 0x30
 80127dc:	af00      	add	r7, sp, #0
 80127de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80127e0:	687b      	ldr	r3, [r7, #4]
 80127e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80127e4:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80127e6:	687b      	ldr	r3, [r7, #4]
 80127e8:	681b      	ldr	r3, [r3, #0]
 80127ea:	681b      	ldr	r3, [r3, #0]
 80127ec:	2220      	movs	r2, #32
 80127ee:	4013      	ands	r3, r2
 80127f0:	d135      	bne.n	801285e <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 80127f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80127f4:	2252      	movs	r2, #82	@ 0x52
 80127f6:	2100      	movs	r1, #0
 80127f8:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80127fa:	f3ef 8310 	mrs	r3, PRIMASK
 80127fe:	60fb      	str	r3, [r7, #12]
  return(result);
 8012800:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8012802:	62bb      	str	r3, [r7, #40]	@ 0x28
 8012804:	2301      	movs	r3, #1
 8012806:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012808:	693b      	ldr	r3, [r7, #16]
 801280a:	f383 8810 	msr	PRIMASK, r3
}
 801280e:	46c0      	nop			@ (mov r8, r8)
 8012810:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012812:	681b      	ldr	r3, [r3, #0]
 8012814:	689a      	ldr	r2, [r3, #8]
 8012816:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012818:	681b      	ldr	r3, [r3, #0]
 801281a:	2180      	movs	r1, #128	@ 0x80
 801281c:	438a      	bics	r2, r1
 801281e:	609a      	str	r2, [r3, #8]
 8012820:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012822:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012824:	697b      	ldr	r3, [r7, #20]
 8012826:	f383 8810 	msr	PRIMASK, r3
}
 801282a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801282c:	f3ef 8310 	mrs	r3, PRIMASK
 8012830:	61bb      	str	r3, [r7, #24]
  return(result);
 8012832:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8012834:	627b      	str	r3, [r7, #36]	@ 0x24
 8012836:	2301      	movs	r3, #1
 8012838:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801283a:	69fb      	ldr	r3, [r7, #28]
 801283c:	f383 8810 	msr	PRIMASK, r3
}
 8012840:	46c0      	nop			@ (mov r8, r8)
 8012842:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012844:	681b      	ldr	r3, [r3, #0]
 8012846:	681a      	ldr	r2, [r3, #0]
 8012848:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801284a:	681b      	ldr	r3, [r3, #0]
 801284c:	2140      	movs	r1, #64	@ 0x40
 801284e:	430a      	orrs	r2, r1
 8012850:	601a      	str	r2, [r3, #0]
 8012852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012854:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012856:	6a3b      	ldr	r3, [r7, #32]
 8012858:	f383 8810 	msr	PRIMASK, r3
}
 801285c:	e006      	b.n	801286c <UART_DMATransmitCplt+0x94>
  /* DMA Circular mode */
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
 801285e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012860:	228c      	movs	r2, #140	@ 0x8c
 8012862:	589b      	ldr	r3, [r3, r2]
 8012864:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012866:	0010      	movs	r0, r2
 8012868:	4798      	blx	r3
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801286a:	46c0      	nop			@ (mov r8, r8)
 801286c:	46c0      	nop			@ (mov r8, r8)
 801286e:	46bd      	mov	sp, r7
 8012870:	b00c      	add	sp, #48	@ 0x30
 8012872:	bd80      	pop	{r7, pc}

08012874 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8012874:	b580      	push	{r7, lr}
 8012876:	b084      	sub	sp, #16
 8012878:	af00      	add	r7, sp, #0
 801287a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801287c:	687b      	ldr	r3, [r7, #4]
 801287e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012880:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 8012882:	68fb      	ldr	r3, [r7, #12]
 8012884:	2288      	movs	r2, #136	@ 0x88
 8012886:	589b      	ldr	r3, [r3, r2]
 8012888:	68fa      	ldr	r2, [r7, #12]
 801288a:	0010      	movs	r0, r2
 801288c:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801288e:	46c0      	nop			@ (mov r8, r8)
 8012890:	46bd      	mov	sp, r7
 8012892:	b004      	add	sp, #16
 8012894:	bd80      	pop	{r7, pc}
	...

08012898 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8012898:	b580      	push	{r7, lr}
 801289a:	b094      	sub	sp, #80	@ 0x50
 801289c:	af00      	add	r7, sp, #0
 801289e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80128a0:	687b      	ldr	r3, [r7, #4]
 80128a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80128a4:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80128a6:	687b      	ldr	r3, [r7, #4]
 80128a8:	681b      	ldr	r3, [r3, #0]
 80128aa:	681b      	ldr	r3, [r3, #0]
 80128ac:	2220      	movs	r2, #32
 80128ae:	4013      	ands	r3, r2
 80128b0:	d16f      	bne.n	8012992 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 80128b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80128b4:	225a      	movs	r2, #90	@ 0x5a
 80128b6:	2100      	movs	r1, #0
 80128b8:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80128ba:	f3ef 8310 	mrs	r3, PRIMASK
 80128be:	61bb      	str	r3, [r7, #24]
  return(result);
 80128c0:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80128c2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80128c4:	2301      	movs	r3, #1
 80128c6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80128c8:	69fb      	ldr	r3, [r7, #28]
 80128ca:	f383 8810 	msr	PRIMASK, r3
}
 80128ce:	46c0      	nop			@ (mov r8, r8)
 80128d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80128d2:	681b      	ldr	r3, [r3, #0]
 80128d4:	681a      	ldr	r2, [r3, #0]
 80128d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80128d8:	681b      	ldr	r3, [r3, #0]
 80128da:	493b      	ldr	r1, [pc, #236]	@ (80129c8 <UART_DMAReceiveCplt+0x130>)
 80128dc:	400a      	ands	r2, r1
 80128de:	601a      	str	r2, [r3, #0]
 80128e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80128e2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80128e4:	6a3b      	ldr	r3, [r7, #32]
 80128e6:	f383 8810 	msr	PRIMASK, r3
}
 80128ea:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80128ec:	f3ef 8310 	mrs	r3, PRIMASK
 80128f0:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80128f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80128f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80128f6:	2301      	movs	r3, #1
 80128f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80128fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80128fc:	f383 8810 	msr	PRIMASK, r3
}
 8012900:	46c0      	nop			@ (mov r8, r8)
 8012902:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012904:	681b      	ldr	r3, [r3, #0]
 8012906:	689a      	ldr	r2, [r3, #8]
 8012908:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801290a:	681b      	ldr	r3, [r3, #0]
 801290c:	2101      	movs	r1, #1
 801290e:	438a      	bics	r2, r1
 8012910:	609a      	str	r2, [r3, #8]
 8012912:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012914:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012916:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012918:	f383 8810 	msr	PRIMASK, r3
}
 801291c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801291e:	f3ef 8310 	mrs	r3, PRIMASK
 8012922:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8012924:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8012926:	643b      	str	r3, [r7, #64]	@ 0x40
 8012928:	2301      	movs	r3, #1
 801292a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801292c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801292e:	f383 8810 	msr	PRIMASK, r3
}
 8012932:	46c0      	nop			@ (mov r8, r8)
 8012934:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012936:	681b      	ldr	r3, [r3, #0]
 8012938:	689a      	ldr	r2, [r3, #8]
 801293a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801293c:	681b      	ldr	r3, [r3, #0]
 801293e:	2140      	movs	r1, #64	@ 0x40
 8012940:	438a      	bics	r2, r1
 8012942:	609a      	str	r2, [r3, #8]
 8012944:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012946:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012948:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801294a:	f383 8810 	msr	PRIMASK, r3
}
 801294e:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8012950:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012952:	2280      	movs	r2, #128	@ 0x80
 8012954:	2120      	movs	r1, #32
 8012956:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012958:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801295a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801295c:	2b01      	cmp	r3, #1
 801295e:	d118      	bne.n	8012992 <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012960:	f3ef 8310 	mrs	r3, PRIMASK
 8012964:	60fb      	str	r3, [r7, #12]
  return(result);
 8012966:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012968:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801296a:	2301      	movs	r3, #1
 801296c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801296e:	693b      	ldr	r3, [r7, #16]
 8012970:	f383 8810 	msr	PRIMASK, r3
}
 8012974:	46c0      	nop			@ (mov r8, r8)
 8012976:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012978:	681b      	ldr	r3, [r3, #0]
 801297a:	681a      	ldr	r2, [r3, #0]
 801297c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801297e:	681b      	ldr	r3, [r3, #0]
 8012980:	2110      	movs	r1, #16
 8012982:	438a      	bics	r2, r1
 8012984:	601a      	str	r2, [r3, #0]
 8012986:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012988:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801298a:	697b      	ldr	r3, [r7, #20]
 801298c:	f383 8810 	msr	PRIMASK, r3
}
 8012990:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012992:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012994:	2200      	movs	r2, #0
 8012996:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012998:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801299a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801299c:	2b01      	cmp	r3, #1
 801299e:	d109      	bne.n	80129b4 <UART_DMAReceiveCplt+0x11c>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 80129a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80129a2:	22ac      	movs	r2, #172	@ 0xac
 80129a4:	589b      	ldr	r3, [r3, r2]
 80129a6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80129a8:	2158      	movs	r1, #88	@ 0x58
 80129aa:	5a51      	ldrh	r1, [r2, r1]
 80129ac:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80129ae:	0010      	movs	r0, r2
 80129b0:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80129b2:	e005      	b.n	80129c0 <UART_DMAReceiveCplt+0x128>
    huart->RxCpltCallback(huart);
 80129b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80129b6:	2294      	movs	r2, #148	@ 0x94
 80129b8:	589b      	ldr	r3, [r3, r2]
 80129ba:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80129bc:	0010      	movs	r0, r2
 80129be:	4798      	blx	r3
}
 80129c0:	46c0      	nop			@ (mov r8, r8)
 80129c2:	46bd      	mov	sp, r7
 80129c4:	b014      	add	sp, #80	@ 0x50
 80129c6:	bd80      	pop	{r7, pc}
 80129c8:	fffffeff 	.word	0xfffffeff

080129cc <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80129cc:	b580      	push	{r7, lr}
 80129ce:	b084      	sub	sp, #16
 80129d0:	af00      	add	r7, sp, #0
 80129d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80129d4:	687b      	ldr	r3, [r7, #4]
 80129d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80129d8:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80129da:	68fb      	ldr	r3, [r7, #12]
 80129dc:	2201      	movs	r2, #1
 80129de:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80129e0:	68fb      	ldr	r3, [r7, #12]
 80129e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80129e4:	2b01      	cmp	r3, #1
 80129e6:	d10b      	bne.n	8012a00 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 80129e8:	68fb      	ldr	r3, [r7, #12]
 80129ea:	22ac      	movs	r2, #172	@ 0xac
 80129ec:	589b      	ldr	r3, [r3, r2]
 80129ee:	68fa      	ldr	r2, [r7, #12]
 80129f0:	2158      	movs	r1, #88	@ 0x58
 80129f2:	5a52      	ldrh	r2, [r2, r1]
 80129f4:	0852      	lsrs	r2, r2, #1
 80129f6:	b291      	uxth	r1, r2
 80129f8:	68fa      	ldr	r2, [r7, #12]
 80129fa:	0010      	movs	r0, r2
 80129fc:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80129fe:	e005      	b.n	8012a0c <UART_DMARxHalfCplt+0x40>
    huart->RxHalfCpltCallback(huart);
 8012a00:	68fb      	ldr	r3, [r7, #12]
 8012a02:	2290      	movs	r2, #144	@ 0x90
 8012a04:	589b      	ldr	r3, [r3, r2]
 8012a06:	68fa      	ldr	r2, [r7, #12]
 8012a08:	0010      	movs	r0, r2
 8012a0a:	4798      	blx	r3
}
 8012a0c:	46c0      	nop			@ (mov r8, r8)
 8012a0e:	46bd      	mov	sp, r7
 8012a10:	b004      	add	sp, #16
 8012a12:	bd80      	pop	{r7, pc}

08012a14 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8012a14:	b580      	push	{r7, lr}
 8012a16:	b086      	sub	sp, #24
 8012a18:	af00      	add	r7, sp, #0
 8012a1a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8012a1c:	687b      	ldr	r3, [r7, #4]
 8012a1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012a20:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8012a22:	697b      	ldr	r3, [r7, #20]
 8012a24:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8012a26:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8012a28:	697b      	ldr	r3, [r7, #20]
 8012a2a:	2280      	movs	r2, #128	@ 0x80
 8012a2c:	589b      	ldr	r3, [r3, r2]
 8012a2e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8012a30:	697b      	ldr	r3, [r7, #20]
 8012a32:	681b      	ldr	r3, [r3, #0]
 8012a34:	689b      	ldr	r3, [r3, #8]
 8012a36:	2280      	movs	r2, #128	@ 0x80
 8012a38:	4013      	ands	r3, r2
 8012a3a:	2b80      	cmp	r3, #128	@ 0x80
 8012a3c:	d10a      	bne.n	8012a54 <UART_DMAError+0x40>
 8012a3e:	693b      	ldr	r3, [r7, #16]
 8012a40:	2b21      	cmp	r3, #33	@ 0x21
 8012a42:	d107      	bne.n	8012a54 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8012a44:	697b      	ldr	r3, [r7, #20]
 8012a46:	2252      	movs	r2, #82	@ 0x52
 8012a48:	2100      	movs	r1, #0
 8012a4a:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8012a4c:	697b      	ldr	r3, [r7, #20]
 8012a4e:	0018      	movs	r0, r3
 8012a50:	f7ff fe3a 	bl	80126c8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8012a54:	697b      	ldr	r3, [r7, #20]
 8012a56:	681b      	ldr	r3, [r3, #0]
 8012a58:	689b      	ldr	r3, [r3, #8]
 8012a5a:	2240      	movs	r2, #64	@ 0x40
 8012a5c:	4013      	ands	r3, r2
 8012a5e:	2b40      	cmp	r3, #64	@ 0x40
 8012a60:	d10a      	bne.n	8012a78 <UART_DMAError+0x64>
 8012a62:	68fb      	ldr	r3, [r7, #12]
 8012a64:	2b22      	cmp	r3, #34	@ 0x22
 8012a66:	d107      	bne.n	8012a78 <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8012a68:	697b      	ldr	r3, [r7, #20]
 8012a6a:	225a      	movs	r2, #90	@ 0x5a
 8012a6c:	2100      	movs	r1, #0
 8012a6e:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8012a70:	697b      	ldr	r3, [r7, #20]
 8012a72:	0018      	movs	r0, r3
 8012a74:	f7ff fe4c 	bl	8012710 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8012a78:	697b      	ldr	r3, [r7, #20]
 8012a7a:	2284      	movs	r2, #132	@ 0x84
 8012a7c:	589b      	ldr	r3, [r3, r2]
 8012a7e:	2210      	movs	r2, #16
 8012a80:	431a      	orrs	r2, r3
 8012a82:	697b      	ldr	r3, [r7, #20]
 8012a84:	2184      	movs	r1, #132	@ 0x84
 8012a86:	505a      	str	r2, [r3, r1]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8012a88:	697b      	ldr	r3, [r7, #20]
 8012a8a:	2298      	movs	r2, #152	@ 0x98
 8012a8c:	589b      	ldr	r3, [r3, r2]
 8012a8e:	697a      	ldr	r2, [r7, #20]
 8012a90:	0010      	movs	r0, r2
 8012a92:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8012a94:	46c0      	nop			@ (mov r8, r8)
 8012a96:	46bd      	mov	sp, r7
 8012a98:	b006      	add	sp, #24
 8012a9a:	bd80      	pop	{r7, pc}

08012a9c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8012a9c:	b580      	push	{r7, lr}
 8012a9e:	b084      	sub	sp, #16
 8012aa0:	af00      	add	r7, sp, #0
 8012aa2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8012aa4:	687b      	ldr	r3, [r7, #4]
 8012aa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012aa8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8012aaa:	68fb      	ldr	r3, [r7, #12]
 8012aac:	225a      	movs	r2, #90	@ 0x5a
 8012aae:	2100      	movs	r1, #0
 8012ab0:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8012ab2:	68fb      	ldr	r3, [r7, #12]
 8012ab4:	2252      	movs	r2, #82	@ 0x52
 8012ab6:	2100      	movs	r1, #0
 8012ab8:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8012aba:	68fb      	ldr	r3, [r7, #12]
 8012abc:	2298      	movs	r2, #152	@ 0x98
 8012abe:	589b      	ldr	r3, [r3, r2]
 8012ac0:	68fa      	ldr	r2, [r7, #12]
 8012ac2:	0010      	movs	r0, r2
 8012ac4:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8012ac6:	46c0      	nop			@ (mov r8, r8)
 8012ac8:	46bd      	mov	sp, r7
 8012aca:	b004      	add	sp, #16
 8012acc:	bd80      	pop	{r7, pc}

08012ace <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8012ace:	b580      	push	{r7, lr}
 8012ad0:	b086      	sub	sp, #24
 8012ad2:	af00      	add	r7, sp, #0
 8012ad4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012ad6:	f3ef 8310 	mrs	r3, PRIMASK
 8012ada:	60bb      	str	r3, [r7, #8]
  return(result);
 8012adc:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8012ade:	617b      	str	r3, [r7, #20]
 8012ae0:	2301      	movs	r3, #1
 8012ae2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012ae4:	68fb      	ldr	r3, [r7, #12]
 8012ae6:	f383 8810 	msr	PRIMASK, r3
}
 8012aea:	46c0      	nop			@ (mov r8, r8)
 8012aec:	687b      	ldr	r3, [r7, #4]
 8012aee:	681b      	ldr	r3, [r3, #0]
 8012af0:	681a      	ldr	r2, [r3, #0]
 8012af2:	687b      	ldr	r3, [r7, #4]
 8012af4:	681b      	ldr	r3, [r3, #0]
 8012af6:	2140      	movs	r1, #64	@ 0x40
 8012af8:	438a      	bics	r2, r1
 8012afa:	601a      	str	r2, [r3, #0]
 8012afc:	697b      	ldr	r3, [r7, #20]
 8012afe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012b00:	693b      	ldr	r3, [r7, #16]
 8012b02:	f383 8810 	msr	PRIMASK, r3
}
 8012b06:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8012b08:	687b      	ldr	r3, [r7, #4]
 8012b0a:	2220      	movs	r2, #32
 8012b0c:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8012b0e:	687b      	ldr	r3, [r7, #4]
 8012b10:	2200      	movs	r2, #0
 8012b12:	66da      	str	r2, [r3, #108]	@ 0x6c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8012b14:	687b      	ldr	r3, [r7, #4]
 8012b16:	228c      	movs	r2, #140	@ 0x8c
 8012b18:	589b      	ldr	r3, [r3, r2]
 8012b1a:	687a      	ldr	r2, [r7, #4]
 8012b1c:	0010      	movs	r0, r2
 8012b1e:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8012b20:	46c0      	nop			@ (mov r8, r8)
 8012b22:	46bd      	mov	sp, r7
 8012b24:	b006      	add	sp, #24
 8012b26:	bd80      	pop	{r7, pc}

08012b28 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8012b28:	b580      	push	{r7, lr}
 8012b2a:	b082      	sub	sp, #8
 8012b2c:	af00      	add	r7, sp, #0
 8012b2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8012b30:	46c0      	nop			@ (mov r8, r8)
 8012b32:	46bd      	mov	sp, r7
 8012b34:	b002      	add	sp, #8
 8012b36:	bd80      	pop	{r7, pc}

08012b38 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8012b38:	b580      	push	{r7, lr}
 8012b3a:	b084      	sub	sp, #16
 8012b3c:	af00      	add	r7, sp, #0
 8012b3e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8012b40:	687b      	ldr	r3, [r7, #4]
 8012b42:	2244      	movs	r2, #68	@ 0x44
 8012b44:	2100      	movs	r1, #0
 8012b46:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8012b48:	4b05      	ldr	r3, [pc, #20]	@ (8012b60 <USB_EnableGlobalInt+0x28>)
 8012b4a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8012b4c:	68fb      	ldr	r3, [r7, #12]
 8012b4e:	b299      	uxth	r1, r3
 8012b50:	687b      	ldr	r3, [r7, #4]
 8012b52:	2240      	movs	r2, #64	@ 0x40
 8012b54:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8012b56:	2300      	movs	r3, #0
}
 8012b58:	0018      	movs	r0, r3
 8012b5a:	46bd      	mov	sp, r7
 8012b5c:	b004      	add	sp, #16
 8012b5e:	bd80      	pop	{r7, pc}
 8012b60:	0000bf80 	.word	0x0000bf80

08012b64 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8012b64:	b580      	push	{r7, lr}
 8012b66:	b084      	sub	sp, #16
 8012b68:	af00      	add	r7, sp, #0
 8012b6a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8012b6c:	4b09      	ldr	r3, [pc, #36]	@ (8012b94 <USB_DisableGlobalInt+0x30>)
 8012b6e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8012b70:	687b      	ldr	r3, [r7, #4]
 8012b72:	2240      	movs	r2, #64	@ 0x40
 8012b74:	5a9b      	ldrh	r3, [r3, r2]
 8012b76:	b29b      	uxth	r3, r3
 8012b78:	68fa      	ldr	r2, [r7, #12]
 8012b7a:	b292      	uxth	r2, r2
 8012b7c:	43d2      	mvns	r2, r2
 8012b7e:	b292      	uxth	r2, r2
 8012b80:	4013      	ands	r3, r2
 8012b82:	b299      	uxth	r1, r3
 8012b84:	687b      	ldr	r3, [r7, #4]
 8012b86:	2240      	movs	r2, #64	@ 0x40
 8012b88:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8012b8a:	2300      	movs	r3, #0
}
 8012b8c:	0018      	movs	r0, r3
 8012b8e:	46bd      	mov	sp, r7
 8012b90:	b004      	add	sp, #16
 8012b92:	bd80      	pop	{r7, pc}
 8012b94:	0000bf80 	.word	0x0000bf80

08012b98 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8012b98:	b084      	sub	sp, #16
 8012b9a:	b590      	push	{r4, r7, lr}
 8012b9c:	b083      	sub	sp, #12
 8012b9e:	af00      	add	r7, sp, #0
 8012ba0:	6078      	str	r0, [r7, #4]
 8012ba2:	2004      	movs	r0, #4
 8012ba4:	2410      	movs	r4, #16
 8012ba6:	1900      	adds	r0, r0, r4
 8012ba8:	2408      	movs	r4, #8
 8012baa:	46a4      	mov	ip, r4
 8012bac:	44bc      	add	ip, r7
 8012bae:	4460      	add	r0, ip
 8012bb0:	6001      	str	r1, [r0, #0]
 8012bb2:	6042      	str	r2, [r0, #4]
 8012bb4:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8012bb6:	687b      	ldr	r3, [r7, #4]
 8012bb8:	2240      	movs	r2, #64	@ 0x40
 8012bba:	2101      	movs	r1, #1
 8012bbc:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8012bbe:	687b      	ldr	r3, [r7, #4]
 8012bc0:	2240      	movs	r2, #64	@ 0x40
 8012bc2:	2100      	movs	r1, #0
 8012bc4:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8012bc6:	687b      	ldr	r3, [r7, #4]
 8012bc8:	2244      	movs	r2, #68	@ 0x44
 8012bca:	2100      	movs	r1, #0
 8012bcc:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8012bce:	687b      	ldr	r3, [r7, #4]
 8012bd0:	2250      	movs	r2, #80	@ 0x50
 8012bd2:	2100      	movs	r1, #0
 8012bd4:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8012bd6:	2300      	movs	r3, #0
}
 8012bd8:	0018      	movs	r0, r3
 8012bda:	46bd      	mov	sp, r7
 8012bdc:	b003      	add	sp, #12
 8012bde:	bc90      	pop	{r4, r7}
 8012be0:	bc08      	pop	{r3}
 8012be2:	b004      	add	sp, #16
 8012be4:	4718      	bx	r3
	...

08012be8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8012be8:	b580      	push	{r7, lr}
 8012bea:	b09c      	sub	sp, #112	@ 0x70
 8012bec:	af00      	add	r7, sp, #0
 8012bee:	6078      	str	r0, [r7, #4]
 8012bf0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8012bf2:	236f      	movs	r3, #111	@ 0x6f
 8012bf4:	18fb      	adds	r3, r7, r3
 8012bf6:	2200      	movs	r2, #0
 8012bf8:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8012bfa:	687a      	ldr	r2, [r7, #4]
 8012bfc:	683b      	ldr	r3, [r7, #0]
 8012bfe:	781b      	ldrb	r3, [r3, #0]
 8012c00:	009b      	lsls	r3, r3, #2
 8012c02:	18d3      	adds	r3, r2, r3
 8012c04:	881b      	ldrh	r3, [r3, #0]
 8012c06:	b29a      	uxth	r2, r3
 8012c08:	236c      	movs	r3, #108	@ 0x6c
 8012c0a:	18fb      	adds	r3, r7, r3
 8012c0c:	49a3      	ldr	r1, [pc, #652]	@ (8012e9c <USB_ActivateEndpoint+0x2b4>)
 8012c0e:	400a      	ands	r2, r1
 8012c10:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 8012c12:	683b      	ldr	r3, [r7, #0]
 8012c14:	78db      	ldrb	r3, [r3, #3]
 8012c16:	2b03      	cmp	r3, #3
 8012c18:	d017      	beq.n	8012c4a <USB_ActivateEndpoint+0x62>
 8012c1a:	dc28      	bgt.n	8012c6e <USB_ActivateEndpoint+0x86>
 8012c1c:	2b02      	cmp	r3, #2
 8012c1e:	d00e      	beq.n	8012c3e <USB_ActivateEndpoint+0x56>
 8012c20:	dc25      	bgt.n	8012c6e <USB_ActivateEndpoint+0x86>
 8012c22:	2b00      	cmp	r3, #0
 8012c24:	d002      	beq.n	8012c2c <USB_ActivateEndpoint+0x44>
 8012c26:	2b01      	cmp	r3, #1
 8012c28:	d018      	beq.n	8012c5c <USB_ActivateEndpoint+0x74>
 8012c2a:	e020      	b.n	8012c6e <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8012c2c:	226c      	movs	r2, #108	@ 0x6c
 8012c2e:	18bb      	adds	r3, r7, r2
 8012c30:	18ba      	adds	r2, r7, r2
 8012c32:	8812      	ldrh	r2, [r2, #0]
 8012c34:	2180      	movs	r1, #128	@ 0x80
 8012c36:	0089      	lsls	r1, r1, #2
 8012c38:	430a      	orrs	r2, r1
 8012c3a:	801a      	strh	r2, [r3, #0]
      break;
 8012c3c:	e01c      	b.n	8012c78 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 8012c3e:	226c      	movs	r2, #108	@ 0x6c
 8012c40:	18bb      	adds	r3, r7, r2
 8012c42:	18ba      	adds	r2, r7, r2
 8012c44:	8812      	ldrh	r2, [r2, #0]
 8012c46:	801a      	strh	r2, [r3, #0]
      break;
 8012c48:	e016      	b.n	8012c78 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8012c4a:	226c      	movs	r2, #108	@ 0x6c
 8012c4c:	18bb      	adds	r3, r7, r2
 8012c4e:	18ba      	adds	r2, r7, r2
 8012c50:	8812      	ldrh	r2, [r2, #0]
 8012c52:	21c0      	movs	r1, #192	@ 0xc0
 8012c54:	00c9      	lsls	r1, r1, #3
 8012c56:	430a      	orrs	r2, r1
 8012c58:	801a      	strh	r2, [r3, #0]
      break;
 8012c5a:	e00d      	b.n	8012c78 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8012c5c:	226c      	movs	r2, #108	@ 0x6c
 8012c5e:	18bb      	adds	r3, r7, r2
 8012c60:	18ba      	adds	r2, r7, r2
 8012c62:	8812      	ldrh	r2, [r2, #0]
 8012c64:	2180      	movs	r1, #128	@ 0x80
 8012c66:	00c9      	lsls	r1, r1, #3
 8012c68:	430a      	orrs	r2, r1
 8012c6a:	801a      	strh	r2, [r3, #0]
      break;
 8012c6c:	e004      	b.n	8012c78 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 8012c6e:	236f      	movs	r3, #111	@ 0x6f
 8012c70:	18fb      	adds	r3, r7, r3
 8012c72:	2201      	movs	r2, #1
 8012c74:	701a      	strb	r2, [r3, #0]
      break;
 8012c76:	46c0      	nop			@ (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8012c78:	687a      	ldr	r2, [r7, #4]
 8012c7a:	683b      	ldr	r3, [r7, #0]
 8012c7c:	781b      	ldrb	r3, [r3, #0]
 8012c7e:	009b      	lsls	r3, r3, #2
 8012c80:	18d3      	adds	r3, r2, r3
 8012c82:	226c      	movs	r2, #108	@ 0x6c
 8012c84:	18ba      	adds	r2, r7, r2
 8012c86:	8812      	ldrh	r2, [r2, #0]
 8012c88:	4985      	ldr	r1, [pc, #532]	@ (8012ea0 <USB_ActivateEndpoint+0x2b8>)
 8012c8a:	430a      	orrs	r2, r1
 8012c8c:	b292      	uxth	r2, r2
 8012c8e:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8012c90:	687a      	ldr	r2, [r7, #4]
 8012c92:	683b      	ldr	r3, [r7, #0]
 8012c94:	781b      	ldrb	r3, [r3, #0]
 8012c96:	009b      	lsls	r3, r3, #2
 8012c98:	18d3      	adds	r3, r2, r3
 8012c9a:	881b      	ldrh	r3, [r3, #0]
 8012c9c:	b29b      	uxth	r3, r3
 8012c9e:	b21b      	sxth	r3, r3
 8012ca0:	4a80      	ldr	r2, [pc, #512]	@ (8012ea4 <USB_ActivateEndpoint+0x2bc>)
 8012ca2:	4013      	ands	r3, r2
 8012ca4:	b21a      	sxth	r2, r3
 8012ca6:	683b      	ldr	r3, [r7, #0]
 8012ca8:	781b      	ldrb	r3, [r3, #0]
 8012caa:	b21b      	sxth	r3, r3
 8012cac:	4313      	orrs	r3, r2
 8012cae:	b21a      	sxth	r2, r3
 8012cb0:	2166      	movs	r1, #102	@ 0x66
 8012cb2:	187b      	adds	r3, r7, r1
 8012cb4:	801a      	strh	r2, [r3, #0]
 8012cb6:	687a      	ldr	r2, [r7, #4]
 8012cb8:	683b      	ldr	r3, [r7, #0]
 8012cba:	781b      	ldrb	r3, [r3, #0]
 8012cbc:	009b      	lsls	r3, r3, #2
 8012cbe:	18d3      	adds	r3, r2, r3
 8012cc0:	187a      	adds	r2, r7, r1
 8012cc2:	8812      	ldrh	r2, [r2, #0]
 8012cc4:	4976      	ldr	r1, [pc, #472]	@ (8012ea0 <USB_ActivateEndpoint+0x2b8>)
 8012cc6:	430a      	orrs	r2, r1
 8012cc8:	b292      	uxth	r2, r2
 8012cca:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 8012ccc:	683b      	ldr	r3, [r7, #0]
 8012cce:	7b1b      	ldrb	r3, [r3, #12]
 8012cd0:	2b00      	cmp	r3, #0
 8012cd2:	d000      	beq.n	8012cd6 <USB_ActivateEndpoint+0xee>
 8012cd4:	e178      	b.n	8012fc8 <USB_ActivateEndpoint+0x3e0>
  {
    if (ep->is_in != 0U)
 8012cd6:	683b      	ldr	r3, [r7, #0]
 8012cd8:	785b      	ldrb	r3, [r3, #1]
 8012cda:	2b00      	cmp	r3, #0
 8012cdc:	d100      	bne.n	8012ce0 <USB_ActivateEndpoint+0xf8>
 8012cde:	e07a      	b.n	8012dd6 <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8012ce0:	687b      	ldr	r3, [r7, #4]
 8012ce2:	61bb      	str	r3, [r7, #24]
 8012ce4:	687b      	ldr	r3, [r7, #4]
 8012ce6:	2250      	movs	r2, #80	@ 0x50
 8012ce8:	5a9b      	ldrh	r3, [r3, r2]
 8012cea:	b29b      	uxth	r3, r3
 8012cec:	001a      	movs	r2, r3
 8012cee:	69bb      	ldr	r3, [r7, #24]
 8012cf0:	189b      	adds	r3, r3, r2
 8012cf2:	61bb      	str	r3, [r7, #24]
 8012cf4:	683b      	ldr	r3, [r7, #0]
 8012cf6:	781b      	ldrb	r3, [r3, #0]
 8012cf8:	00da      	lsls	r2, r3, #3
 8012cfa:	69bb      	ldr	r3, [r7, #24]
 8012cfc:	18d3      	adds	r3, r2, r3
 8012cfe:	2280      	movs	r2, #128	@ 0x80
 8012d00:	00d2      	lsls	r2, r2, #3
 8012d02:	4694      	mov	ip, r2
 8012d04:	4463      	add	r3, ip
 8012d06:	617b      	str	r3, [r7, #20]
 8012d08:	683b      	ldr	r3, [r7, #0]
 8012d0a:	88db      	ldrh	r3, [r3, #6]
 8012d0c:	085b      	lsrs	r3, r3, #1
 8012d0e:	b29b      	uxth	r3, r3
 8012d10:	18db      	adds	r3, r3, r3
 8012d12:	b29a      	uxth	r2, r3
 8012d14:	697b      	ldr	r3, [r7, #20]
 8012d16:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8012d18:	687a      	ldr	r2, [r7, #4]
 8012d1a:	683b      	ldr	r3, [r7, #0]
 8012d1c:	781b      	ldrb	r3, [r3, #0]
 8012d1e:	009b      	lsls	r3, r3, #2
 8012d20:	18d2      	adds	r2, r2, r3
 8012d22:	2112      	movs	r1, #18
 8012d24:	187b      	adds	r3, r7, r1
 8012d26:	8812      	ldrh	r2, [r2, #0]
 8012d28:	801a      	strh	r2, [r3, #0]
 8012d2a:	187b      	adds	r3, r7, r1
 8012d2c:	881b      	ldrh	r3, [r3, #0]
 8012d2e:	2240      	movs	r2, #64	@ 0x40
 8012d30:	4013      	ands	r3, r2
 8012d32:	d016      	beq.n	8012d62 <USB_ActivateEndpoint+0x17a>
 8012d34:	687a      	ldr	r2, [r7, #4]
 8012d36:	683b      	ldr	r3, [r7, #0]
 8012d38:	781b      	ldrb	r3, [r3, #0]
 8012d3a:	009b      	lsls	r3, r3, #2
 8012d3c:	18d3      	adds	r3, r2, r3
 8012d3e:	881b      	ldrh	r3, [r3, #0]
 8012d40:	b29a      	uxth	r2, r3
 8012d42:	2010      	movs	r0, #16
 8012d44:	183b      	adds	r3, r7, r0
 8012d46:	4957      	ldr	r1, [pc, #348]	@ (8012ea4 <USB_ActivateEndpoint+0x2bc>)
 8012d48:	400a      	ands	r2, r1
 8012d4a:	801a      	strh	r2, [r3, #0]
 8012d4c:	687a      	ldr	r2, [r7, #4]
 8012d4e:	683b      	ldr	r3, [r7, #0]
 8012d50:	781b      	ldrb	r3, [r3, #0]
 8012d52:	009b      	lsls	r3, r3, #2
 8012d54:	18d3      	adds	r3, r2, r3
 8012d56:	183a      	adds	r2, r7, r0
 8012d58:	8812      	ldrh	r2, [r2, #0]
 8012d5a:	4953      	ldr	r1, [pc, #332]	@ (8012ea8 <USB_ActivateEndpoint+0x2c0>)
 8012d5c:	430a      	orrs	r2, r1
 8012d5e:	b292      	uxth	r2, r2
 8012d60:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8012d62:	683b      	ldr	r3, [r7, #0]
 8012d64:	78db      	ldrb	r3, [r3, #3]
 8012d66:	2b01      	cmp	r3, #1
 8012d68:	d01d      	beq.n	8012da6 <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8012d6a:	687a      	ldr	r2, [r7, #4]
 8012d6c:	683b      	ldr	r3, [r7, #0]
 8012d6e:	781b      	ldrb	r3, [r3, #0]
 8012d70:	009b      	lsls	r3, r3, #2
 8012d72:	18d3      	adds	r3, r2, r3
 8012d74:	881b      	ldrh	r3, [r3, #0]
 8012d76:	b29a      	uxth	r2, r3
 8012d78:	200c      	movs	r0, #12
 8012d7a:	183b      	adds	r3, r7, r0
 8012d7c:	494b      	ldr	r1, [pc, #300]	@ (8012eac <USB_ActivateEndpoint+0x2c4>)
 8012d7e:	400a      	ands	r2, r1
 8012d80:	801a      	strh	r2, [r3, #0]
 8012d82:	183b      	adds	r3, r7, r0
 8012d84:	183a      	adds	r2, r7, r0
 8012d86:	8812      	ldrh	r2, [r2, #0]
 8012d88:	2120      	movs	r1, #32
 8012d8a:	404a      	eors	r2, r1
 8012d8c:	801a      	strh	r2, [r3, #0]
 8012d8e:	687a      	ldr	r2, [r7, #4]
 8012d90:	683b      	ldr	r3, [r7, #0]
 8012d92:	781b      	ldrb	r3, [r3, #0]
 8012d94:	009b      	lsls	r3, r3, #2
 8012d96:	18d3      	adds	r3, r2, r3
 8012d98:	183a      	adds	r2, r7, r0
 8012d9a:	8812      	ldrh	r2, [r2, #0]
 8012d9c:	4940      	ldr	r1, [pc, #256]	@ (8012ea0 <USB_ActivateEndpoint+0x2b8>)
 8012d9e:	430a      	orrs	r2, r1
 8012da0:	b292      	uxth	r2, r2
 8012da2:	801a      	strh	r2, [r3, #0]
 8012da4:	e2b4      	b.n	8013310 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8012da6:	687a      	ldr	r2, [r7, #4]
 8012da8:	683b      	ldr	r3, [r7, #0]
 8012daa:	781b      	ldrb	r3, [r3, #0]
 8012dac:	009b      	lsls	r3, r3, #2
 8012dae:	18d3      	adds	r3, r2, r3
 8012db0:	881b      	ldrh	r3, [r3, #0]
 8012db2:	b29a      	uxth	r2, r3
 8012db4:	200e      	movs	r0, #14
 8012db6:	183b      	adds	r3, r7, r0
 8012db8:	493c      	ldr	r1, [pc, #240]	@ (8012eac <USB_ActivateEndpoint+0x2c4>)
 8012dba:	400a      	ands	r2, r1
 8012dbc:	801a      	strh	r2, [r3, #0]
 8012dbe:	687a      	ldr	r2, [r7, #4]
 8012dc0:	683b      	ldr	r3, [r7, #0]
 8012dc2:	781b      	ldrb	r3, [r3, #0]
 8012dc4:	009b      	lsls	r3, r3, #2
 8012dc6:	18d3      	adds	r3, r2, r3
 8012dc8:	183a      	adds	r2, r7, r0
 8012dca:	8812      	ldrh	r2, [r2, #0]
 8012dcc:	4934      	ldr	r1, [pc, #208]	@ (8012ea0 <USB_ActivateEndpoint+0x2b8>)
 8012dce:	430a      	orrs	r2, r1
 8012dd0:	b292      	uxth	r2, r2
 8012dd2:	801a      	strh	r2, [r3, #0]
 8012dd4:	e29c      	b.n	8013310 <USB_ActivateEndpoint+0x728>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8012dd6:	687b      	ldr	r3, [r7, #4]
 8012dd8:	633b      	str	r3, [r7, #48]	@ 0x30
 8012dda:	687b      	ldr	r3, [r7, #4]
 8012ddc:	2250      	movs	r2, #80	@ 0x50
 8012dde:	5a9b      	ldrh	r3, [r3, r2]
 8012de0:	b29b      	uxth	r3, r3
 8012de2:	001a      	movs	r2, r3
 8012de4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012de6:	189b      	adds	r3, r3, r2
 8012de8:	633b      	str	r3, [r7, #48]	@ 0x30
 8012dea:	683b      	ldr	r3, [r7, #0]
 8012dec:	781b      	ldrb	r3, [r3, #0]
 8012dee:	00da      	lsls	r2, r3, #3
 8012df0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012df2:	18d3      	adds	r3, r2, r3
 8012df4:	4a2e      	ldr	r2, [pc, #184]	@ (8012eb0 <USB_ActivateEndpoint+0x2c8>)
 8012df6:	4694      	mov	ip, r2
 8012df8:	4463      	add	r3, ip
 8012dfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012dfc:	683b      	ldr	r3, [r7, #0]
 8012dfe:	88db      	ldrh	r3, [r3, #6]
 8012e00:	085b      	lsrs	r3, r3, #1
 8012e02:	b29b      	uxth	r3, r3
 8012e04:	18db      	adds	r3, r3, r3
 8012e06:	b29a      	uxth	r2, r3
 8012e08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012e0a:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8012e0c:	687b      	ldr	r3, [r7, #4]
 8012e0e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8012e10:	687b      	ldr	r3, [r7, #4]
 8012e12:	2250      	movs	r2, #80	@ 0x50
 8012e14:	5a9b      	ldrh	r3, [r3, r2]
 8012e16:	b29b      	uxth	r3, r3
 8012e18:	001a      	movs	r2, r3
 8012e1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012e1c:	189b      	adds	r3, r3, r2
 8012e1e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8012e20:	683b      	ldr	r3, [r7, #0]
 8012e22:	781b      	ldrb	r3, [r3, #0]
 8012e24:	00da      	lsls	r2, r3, #3
 8012e26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012e28:	18d3      	adds	r3, r2, r3
 8012e2a:	4a22      	ldr	r2, [pc, #136]	@ (8012eb4 <USB_ActivateEndpoint+0x2cc>)
 8012e2c:	4694      	mov	ip, r2
 8012e2e:	4463      	add	r3, ip
 8012e30:	627b      	str	r3, [r7, #36]	@ 0x24
 8012e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012e34:	881b      	ldrh	r3, [r3, #0]
 8012e36:	b29b      	uxth	r3, r3
 8012e38:	059b      	lsls	r3, r3, #22
 8012e3a:	0d9b      	lsrs	r3, r3, #22
 8012e3c:	b29a      	uxth	r2, r3
 8012e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012e40:	801a      	strh	r2, [r3, #0]
 8012e42:	683b      	ldr	r3, [r7, #0]
 8012e44:	691b      	ldr	r3, [r3, #16]
 8012e46:	2b3e      	cmp	r3, #62	@ 0x3e
 8012e48:	d91a      	bls.n	8012e80 <USB_ActivateEndpoint+0x298>
 8012e4a:	683b      	ldr	r3, [r7, #0]
 8012e4c:	691b      	ldr	r3, [r3, #16]
 8012e4e:	095b      	lsrs	r3, r3, #5
 8012e50:	66bb      	str	r3, [r7, #104]	@ 0x68
 8012e52:	683b      	ldr	r3, [r7, #0]
 8012e54:	691b      	ldr	r3, [r3, #16]
 8012e56:	221f      	movs	r2, #31
 8012e58:	4013      	ands	r3, r2
 8012e5a:	d102      	bne.n	8012e62 <USB_ActivateEndpoint+0x27a>
 8012e5c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8012e5e:	3b01      	subs	r3, #1
 8012e60:	66bb      	str	r3, [r7, #104]	@ 0x68
 8012e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012e64:	881b      	ldrh	r3, [r3, #0]
 8012e66:	b29a      	uxth	r2, r3
 8012e68:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8012e6a:	b29b      	uxth	r3, r3
 8012e6c:	029b      	lsls	r3, r3, #10
 8012e6e:	b29b      	uxth	r3, r3
 8012e70:	4313      	orrs	r3, r2
 8012e72:	b29b      	uxth	r3, r3
 8012e74:	4a10      	ldr	r2, [pc, #64]	@ (8012eb8 <USB_ActivateEndpoint+0x2d0>)
 8012e76:	4313      	orrs	r3, r2
 8012e78:	b29a      	uxth	r2, r3
 8012e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012e7c:	801a      	strh	r2, [r3, #0]
 8012e7e:	e034      	b.n	8012eea <USB_ActivateEndpoint+0x302>
 8012e80:	683b      	ldr	r3, [r7, #0]
 8012e82:	691b      	ldr	r3, [r3, #16]
 8012e84:	2b00      	cmp	r3, #0
 8012e86:	d119      	bne.n	8012ebc <USB_ActivateEndpoint+0x2d4>
 8012e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012e8a:	881b      	ldrh	r3, [r3, #0]
 8012e8c:	b29b      	uxth	r3, r3
 8012e8e:	4a0a      	ldr	r2, [pc, #40]	@ (8012eb8 <USB_ActivateEndpoint+0x2d0>)
 8012e90:	4313      	orrs	r3, r2
 8012e92:	b29a      	uxth	r2, r3
 8012e94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012e96:	801a      	strh	r2, [r3, #0]
 8012e98:	e027      	b.n	8012eea <USB_ActivateEndpoint+0x302>
 8012e9a:	46c0      	nop			@ (mov r8, r8)
 8012e9c:	ffff898f 	.word	0xffff898f
 8012ea0:	ffff8080 	.word	0xffff8080
 8012ea4:	ffff8f8f 	.word	0xffff8f8f
 8012ea8:	ffff80c0 	.word	0xffff80c0
 8012eac:	ffff8fbf 	.word	0xffff8fbf
 8012eb0:	00000404 	.word	0x00000404
 8012eb4:	00000406 	.word	0x00000406
 8012eb8:	ffff8000 	.word	0xffff8000
 8012ebc:	683b      	ldr	r3, [r7, #0]
 8012ebe:	691b      	ldr	r3, [r3, #16]
 8012ec0:	085b      	lsrs	r3, r3, #1
 8012ec2:	66bb      	str	r3, [r7, #104]	@ 0x68
 8012ec4:	683b      	ldr	r3, [r7, #0]
 8012ec6:	691b      	ldr	r3, [r3, #16]
 8012ec8:	2201      	movs	r2, #1
 8012eca:	4013      	ands	r3, r2
 8012ecc:	d002      	beq.n	8012ed4 <USB_ActivateEndpoint+0x2ec>
 8012ece:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8012ed0:	3301      	adds	r3, #1
 8012ed2:	66bb      	str	r3, [r7, #104]	@ 0x68
 8012ed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012ed6:	881b      	ldrh	r3, [r3, #0]
 8012ed8:	b29a      	uxth	r2, r3
 8012eda:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8012edc:	b29b      	uxth	r3, r3
 8012ede:	029b      	lsls	r3, r3, #10
 8012ee0:	b29b      	uxth	r3, r3
 8012ee2:	4313      	orrs	r3, r2
 8012ee4:	b29a      	uxth	r2, r3
 8012ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012ee8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8012eea:	687a      	ldr	r2, [r7, #4]
 8012eec:	683b      	ldr	r3, [r7, #0]
 8012eee:	781b      	ldrb	r3, [r3, #0]
 8012ef0:	009b      	lsls	r3, r3, #2
 8012ef2:	18d2      	adds	r2, r2, r3
 8012ef4:	2122      	movs	r1, #34	@ 0x22
 8012ef6:	187b      	adds	r3, r7, r1
 8012ef8:	8812      	ldrh	r2, [r2, #0]
 8012efa:	801a      	strh	r2, [r3, #0]
 8012efc:	187b      	adds	r3, r7, r1
 8012efe:	881a      	ldrh	r2, [r3, #0]
 8012f00:	2380      	movs	r3, #128	@ 0x80
 8012f02:	01db      	lsls	r3, r3, #7
 8012f04:	4013      	ands	r3, r2
 8012f06:	d016      	beq.n	8012f36 <USB_ActivateEndpoint+0x34e>
 8012f08:	687a      	ldr	r2, [r7, #4]
 8012f0a:	683b      	ldr	r3, [r7, #0]
 8012f0c:	781b      	ldrb	r3, [r3, #0]
 8012f0e:	009b      	lsls	r3, r3, #2
 8012f10:	18d3      	adds	r3, r2, r3
 8012f12:	881b      	ldrh	r3, [r3, #0]
 8012f14:	b29a      	uxth	r2, r3
 8012f16:	2020      	movs	r0, #32
 8012f18:	183b      	adds	r3, r7, r0
 8012f1a:	49dd      	ldr	r1, [pc, #884]	@ (8013290 <USB_ActivateEndpoint+0x6a8>)
 8012f1c:	400a      	ands	r2, r1
 8012f1e:	801a      	strh	r2, [r3, #0]
 8012f20:	687a      	ldr	r2, [r7, #4]
 8012f22:	683b      	ldr	r3, [r7, #0]
 8012f24:	781b      	ldrb	r3, [r3, #0]
 8012f26:	009b      	lsls	r3, r3, #2
 8012f28:	18d3      	adds	r3, r2, r3
 8012f2a:	183a      	adds	r2, r7, r0
 8012f2c:	8812      	ldrh	r2, [r2, #0]
 8012f2e:	49d9      	ldr	r1, [pc, #868]	@ (8013294 <USB_ActivateEndpoint+0x6ac>)
 8012f30:	430a      	orrs	r2, r1
 8012f32:	b292      	uxth	r2, r2
 8012f34:	801a      	strh	r2, [r3, #0]

      if (ep->num == 0U)
 8012f36:	683b      	ldr	r3, [r7, #0]
 8012f38:	781b      	ldrb	r3, [r3, #0]
 8012f3a:	2b00      	cmp	r3, #0
 8012f3c:	d125      	bne.n	8012f8a <USB_ActivateEndpoint+0x3a2>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8012f3e:	687a      	ldr	r2, [r7, #4]
 8012f40:	683b      	ldr	r3, [r7, #0]
 8012f42:	781b      	ldrb	r3, [r3, #0]
 8012f44:	009b      	lsls	r3, r3, #2
 8012f46:	18d3      	adds	r3, r2, r3
 8012f48:	881b      	ldrh	r3, [r3, #0]
 8012f4a:	b29a      	uxth	r2, r3
 8012f4c:	201c      	movs	r0, #28
 8012f4e:	183b      	adds	r3, r7, r0
 8012f50:	49d1      	ldr	r1, [pc, #836]	@ (8013298 <USB_ActivateEndpoint+0x6b0>)
 8012f52:	400a      	ands	r2, r1
 8012f54:	801a      	strh	r2, [r3, #0]
 8012f56:	183b      	adds	r3, r7, r0
 8012f58:	183a      	adds	r2, r7, r0
 8012f5a:	8812      	ldrh	r2, [r2, #0]
 8012f5c:	2180      	movs	r1, #128	@ 0x80
 8012f5e:	0149      	lsls	r1, r1, #5
 8012f60:	404a      	eors	r2, r1
 8012f62:	801a      	strh	r2, [r3, #0]
 8012f64:	183b      	adds	r3, r7, r0
 8012f66:	183a      	adds	r2, r7, r0
 8012f68:	8812      	ldrh	r2, [r2, #0]
 8012f6a:	2180      	movs	r1, #128	@ 0x80
 8012f6c:	0189      	lsls	r1, r1, #6
 8012f6e:	404a      	eors	r2, r1
 8012f70:	801a      	strh	r2, [r3, #0]
 8012f72:	687a      	ldr	r2, [r7, #4]
 8012f74:	683b      	ldr	r3, [r7, #0]
 8012f76:	781b      	ldrb	r3, [r3, #0]
 8012f78:	009b      	lsls	r3, r3, #2
 8012f7a:	18d3      	adds	r3, r2, r3
 8012f7c:	183a      	adds	r2, r7, r0
 8012f7e:	8812      	ldrh	r2, [r2, #0]
 8012f80:	49c6      	ldr	r1, [pc, #792]	@ (801329c <USB_ActivateEndpoint+0x6b4>)
 8012f82:	430a      	orrs	r2, r1
 8012f84:	b292      	uxth	r2, r2
 8012f86:	801a      	strh	r2, [r3, #0]
 8012f88:	e1c2      	b.n	8013310 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8012f8a:	687a      	ldr	r2, [r7, #4]
 8012f8c:	683b      	ldr	r3, [r7, #0]
 8012f8e:	781b      	ldrb	r3, [r3, #0]
 8012f90:	009b      	lsls	r3, r3, #2
 8012f92:	18d3      	adds	r3, r2, r3
 8012f94:	881b      	ldrh	r3, [r3, #0]
 8012f96:	b29a      	uxth	r2, r3
 8012f98:	201e      	movs	r0, #30
 8012f9a:	183b      	adds	r3, r7, r0
 8012f9c:	49be      	ldr	r1, [pc, #760]	@ (8013298 <USB_ActivateEndpoint+0x6b0>)
 8012f9e:	400a      	ands	r2, r1
 8012fa0:	801a      	strh	r2, [r3, #0]
 8012fa2:	183b      	adds	r3, r7, r0
 8012fa4:	183a      	adds	r2, r7, r0
 8012fa6:	8812      	ldrh	r2, [r2, #0]
 8012fa8:	2180      	movs	r1, #128	@ 0x80
 8012faa:	0189      	lsls	r1, r1, #6
 8012fac:	404a      	eors	r2, r1
 8012fae:	801a      	strh	r2, [r3, #0]
 8012fb0:	687a      	ldr	r2, [r7, #4]
 8012fb2:	683b      	ldr	r3, [r7, #0]
 8012fb4:	781b      	ldrb	r3, [r3, #0]
 8012fb6:	009b      	lsls	r3, r3, #2
 8012fb8:	18d3      	adds	r3, r2, r3
 8012fba:	183a      	adds	r2, r7, r0
 8012fbc:	8812      	ldrh	r2, [r2, #0]
 8012fbe:	49b7      	ldr	r1, [pc, #732]	@ (801329c <USB_ActivateEndpoint+0x6b4>)
 8012fc0:	430a      	orrs	r2, r1
 8012fc2:	b292      	uxth	r2, r2
 8012fc4:	801a      	strh	r2, [r3, #0]
 8012fc6:	e1a3      	b.n	8013310 <USB_ActivateEndpoint+0x728>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8012fc8:	683b      	ldr	r3, [r7, #0]
 8012fca:	78db      	ldrb	r3, [r3, #3]
 8012fcc:	2b02      	cmp	r3, #2
 8012fce:	d117      	bne.n	8013000 <USB_ActivateEndpoint+0x418>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8012fd0:	687a      	ldr	r2, [r7, #4]
 8012fd2:	683b      	ldr	r3, [r7, #0]
 8012fd4:	781b      	ldrb	r3, [r3, #0]
 8012fd6:	009b      	lsls	r3, r3, #2
 8012fd8:	18d3      	adds	r3, r2, r3
 8012fda:	881b      	ldrh	r3, [r3, #0]
 8012fdc:	b29a      	uxth	r2, r3
 8012fde:	2062      	movs	r0, #98	@ 0x62
 8012fe0:	183b      	adds	r3, r7, r0
 8012fe2:	49ab      	ldr	r1, [pc, #684]	@ (8013290 <USB_ActivateEndpoint+0x6a8>)
 8012fe4:	400a      	ands	r2, r1
 8012fe6:	801a      	strh	r2, [r3, #0]
 8012fe8:	687a      	ldr	r2, [r7, #4]
 8012fea:	683b      	ldr	r3, [r7, #0]
 8012fec:	781b      	ldrb	r3, [r3, #0]
 8012fee:	009b      	lsls	r3, r3, #2
 8012ff0:	18d3      	adds	r3, r2, r3
 8012ff2:	183a      	adds	r2, r7, r0
 8012ff4:	8812      	ldrh	r2, [r2, #0]
 8012ff6:	49aa      	ldr	r1, [pc, #680]	@ (80132a0 <USB_ActivateEndpoint+0x6b8>)
 8012ff8:	430a      	orrs	r2, r1
 8012ffa:	b292      	uxth	r2, r2
 8012ffc:	801a      	strh	r2, [r3, #0]
 8012ffe:	e016      	b.n	801302e <USB_ActivateEndpoint+0x446>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8013000:	687a      	ldr	r2, [r7, #4]
 8013002:	683b      	ldr	r3, [r7, #0]
 8013004:	781b      	ldrb	r3, [r3, #0]
 8013006:	009b      	lsls	r3, r3, #2
 8013008:	18d3      	adds	r3, r2, r3
 801300a:	881b      	ldrh	r3, [r3, #0]
 801300c:	b29a      	uxth	r2, r3
 801300e:	2064      	movs	r0, #100	@ 0x64
 8013010:	183b      	adds	r3, r7, r0
 8013012:	49a4      	ldr	r1, [pc, #656]	@ (80132a4 <USB_ActivateEndpoint+0x6bc>)
 8013014:	400a      	ands	r2, r1
 8013016:	801a      	strh	r2, [r3, #0]
 8013018:	687a      	ldr	r2, [r7, #4]
 801301a:	683b      	ldr	r3, [r7, #0]
 801301c:	781b      	ldrb	r3, [r3, #0]
 801301e:	009b      	lsls	r3, r3, #2
 8013020:	18d3      	adds	r3, r2, r3
 8013022:	183a      	adds	r2, r7, r0
 8013024:	8812      	ldrh	r2, [r2, #0]
 8013026:	499d      	ldr	r1, [pc, #628]	@ (801329c <USB_ActivateEndpoint+0x6b4>)
 8013028:	430a      	orrs	r2, r1
 801302a:	b292      	uxth	r2, r2
 801302c:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 801302e:	687b      	ldr	r3, [r7, #4]
 8013030:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8013032:	687b      	ldr	r3, [r7, #4]
 8013034:	2250      	movs	r2, #80	@ 0x50
 8013036:	5a9b      	ldrh	r3, [r3, r2]
 8013038:	b29b      	uxth	r3, r3
 801303a:	001a      	movs	r2, r3
 801303c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801303e:	189b      	adds	r3, r3, r2
 8013040:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8013042:	683b      	ldr	r3, [r7, #0]
 8013044:	781b      	ldrb	r3, [r3, #0]
 8013046:	00da      	lsls	r2, r3, #3
 8013048:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801304a:	18d3      	adds	r3, r2, r3
 801304c:	2280      	movs	r2, #128	@ 0x80
 801304e:	00d2      	lsls	r2, r2, #3
 8013050:	4694      	mov	ip, r2
 8013052:	4463      	add	r3, ip
 8013054:	65bb      	str	r3, [r7, #88]	@ 0x58
 8013056:	683b      	ldr	r3, [r7, #0]
 8013058:	891b      	ldrh	r3, [r3, #8]
 801305a:	085b      	lsrs	r3, r3, #1
 801305c:	b29b      	uxth	r3, r3
 801305e:	18db      	adds	r3, r3, r3
 8013060:	b29a      	uxth	r2, r3
 8013062:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013064:	801a      	strh	r2, [r3, #0]
 8013066:	687b      	ldr	r3, [r7, #4]
 8013068:	657b      	str	r3, [r7, #84]	@ 0x54
 801306a:	687b      	ldr	r3, [r7, #4]
 801306c:	2250      	movs	r2, #80	@ 0x50
 801306e:	5a9b      	ldrh	r3, [r3, r2]
 8013070:	b29b      	uxth	r3, r3
 8013072:	001a      	movs	r2, r3
 8013074:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013076:	189b      	adds	r3, r3, r2
 8013078:	657b      	str	r3, [r7, #84]	@ 0x54
 801307a:	683b      	ldr	r3, [r7, #0]
 801307c:	781b      	ldrb	r3, [r3, #0]
 801307e:	00da      	lsls	r2, r3, #3
 8013080:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013082:	18d3      	adds	r3, r2, r3
 8013084:	4a88      	ldr	r2, [pc, #544]	@ (80132a8 <USB_ActivateEndpoint+0x6c0>)
 8013086:	4694      	mov	ip, r2
 8013088:	4463      	add	r3, ip
 801308a:	653b      	str	r3, [r7, #80]	@ 0x50
 801308c:	683b      	ldr	r3, [r7, #0]
 801308e:	895b      	ldrh	r3, [r3, #10]
 8013090:	085b      	lsrs	r3, r3, #1
 8013092:	b29b      	uxth	r3, r3
 8013094:	18db      	adds	r3, r3, r3
 8013096:	b29a      	uxth	r2, r3
 8013098:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801309a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 801309c:	683b      	ldr	r3, [r7, #0]
 801309e:	785b      	ldrb	r3, [r3, #1]
 80130a0:	2b00      	cmp	r3, #0
 80130a2:	d000      	beq.n	80130a6 <USB_ActivateEndpoint+0x4be>
 80130a4:	e087      	b.n	80131b6 <USB_ActivateEndpoint+0x5ce>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80130a6:	687a      	ldr	r2, [r7, #4]
 80130a8:	683b      	ldr	r3, [r7, #0]
 80130aa:	781b      	ldrb	r3, [r3, #0]
 80130ac:	009b      	lsls	r3, r3, #2
 80130ae:	18d2      	adds	r2, r2, r3
 80130b0:	2140      	movs	r1, #64	@ 0x40
 80130b2:	187b      	adds	r3, r7, r1
 80130b4:	8812      	ldrh	r2, [r2, #0]
 80130b6:	801a      	strh	r2, [r3, #0]
 80130b8:	187b      	adds	r3, r7, r1
 80130ba:	881a      	ldrh	r2, [r3, #0]
 80130bc:	2380      	movs	r3, #128	@ 0x80
 80130be:	01db      	lsls	r3, r3, #7
 80130c0:	4013      	ands	r3, r2
 80130c2:	d016      	beq.n	80130f2 <USB_ActivateEndpoint+0x50a>
 80130c4:	687a      	ldr	r2, [r7, #4]
 80130c6:	683b      	ldr	r3, [r7, #0]
 80130c8:	781b      	ldrb	r3, [r3, #0]
 80130ca:	009b      	lsls	r3, r3, #2
 80130cc:	18d3      	adds	r3, r2, r3
 80130ce:	881b      	ldrh	r3, [r3, #0]
 80130d0:	b29a      	uxth	r2, r3
 80130d2:	203e      	movs	r0, #62	@ 0x3e
 80130d4:	183b      	adds	r3, r7, r0
 80130d6:	496e      	ldr	r1, [pc, #440]	@ (8013290 <USB_ActivateEndpoint+0x6a8>)
 80130d8:	400a      	ands	r2, r1
 80130da:	801a      	strh	r2, [r3, #0]
 80130dc:	687a      	ldr	r2, [r7, #4]
 80130de:	683b      	ldr	r3, [r7, #0]
 80130e0:	781b      	ldrb	r3, [r3, #0]
 80130e2:	009b      	lsls	r3, r3, #2
 80130e4:	18d3      	adds	r3, r2, r3
 80130e6:	183a      	adds	r2, r7, r0
 80130e8:	8812      	ldrh	r2, [r2, #0]
 80130ea:	496a      	ldr	r1, [pc, #424]	@ (8013294 <USB_ActivateEndpoint+0x6ac>)
 80130ec:	430a      	orrs	r2, r1
 80130ee:	b292      	uxth	r2, r2
 80130f0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80130f2:	687a      	ldr	r2, [r7, #4]
 80130f4:	683b      	ldr	r3, [r7, #0]
 80130f6:	781b      	ldrb	r3, [r3, #0]
 80130f8:	009b      	lsls	r3, r3, #2
 80130fa:	18d2      	adds	r2, r2, r3
 80130fc:	213c      	movs	r1, #60	@ 0x3c
 80130fe:	187b      	adds	r3, r7, r1
 8013100:	8812      	ldrh	r2, [r2, #0]
 8013102:	801a      	strh	r2, [r3, #0]
 8013104:	187b      	adds	r3, r7, r1
 8013106:	881b      	ldrh	r3, [r3, #0]
 8013108:	2240      	movs	r2, #64	@ 0x40
 801310a:	4013      	ands	r3, r2
 801310c:	d016      	beq.n	801313c <USB_ActivateEndpoint+0x554>
 801310e:	687a      	ldr	r2, [r7, #4]
 8013110:	683b      	ldr	r3, [r7, #0]
 8013112:	781b      	ldrb	r3, [r3, #0]
 8013114:	009b      	lsls	r3, r3, #2
 8013116:	18d3      	adds	r3, r2, r3
 8013118:	881b      	ldrh	r3, [r3, #0]
 801311a:	b29a      	uxth	r2, r3
 801311c:	203a      	movs	r0, #58	@ 0x3a
 801311e:	183b      	adds	r3, r7, r0
 8013120:	495b      	ldr	r1, [pc, #364]	@ (8013290 <USB_ActivateEndpoint+0x6a8>)
 8013122:	400a      	ands	r2, r1
 8013124:	801a      	strh	r2, [r3, #0]
 8013126:	687a      	ldr	r2, [r7, #4]
 8013128:	683b      	ldr	r3, [r7, #0]
 801312a:	781b      	ldrb	r3, [r3, #0]
 801312c:	009b      	lsls	r3, r3, #2
 801312e:	18d3      	adds	r3, r2, r3
 8013130:	183a      	adds	r2, r7, r0
 8013132:	8812      	ldrh	r2, [r2, #0]
 8013134:	495d      	ldr	r1, [pc, #372]	@ (80132ac <USB_ActivateEndpoint+0x6c4>)
 8013136:	430a      	orrs	r2, r1
 8013138:	b292      	uxth	r2, r2
 801313a:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801313c:	687a      	ldr	r2, [r7, #4]
 801313e:	683b      	ldr	r3, [r7, #0]
 8013140:	781b      	ldrb	r3, [r3, #0]
 8013142:	009b      	lsls	r3, r3, #2
 8013144:	18d3      	adds	r3, r2, r3
 8013146:	881b      	ldrh	r3, [r3, #0]
 8013148:	b29a      	uxth	r2, r3
 801314a:	2038      	movs	r0, #56	@ 0x38
 801314c:	183b      	adds	r3, r7, r0
 801314e:	4952      	ldr	r1, [pc, #328]	@ (8013298 <USB_ActivateEndpoint+0x6b0>)
 8013150:	400a      	ands	r2, r1
 8013152:	801a      	strh	r2, [r3, #0]
 8013154:	183b      	adds	r3, r7, r0
 8013156:	183a      	adds	r2, r7, r0
 8013158:	8812      	ldrh	r2, [r2, #0]
 801315a:	2180      	movs	r1, #128	@ 0x80
 801315c:	0149      	lsls	r1, r1, #5
 801315e:	404a      	eors	r2, r1
 8013160:	801a      	strh	r2, [r3, #0]
 8013162:	183b      	adds	r3, r7, r0
 8013164:	183a      	adds	r2, r7, r0
 8013166:	8812      	ldrh	r2, [r2, #0]
 8013168:	2180      	movs	r1, #128	@ 0x80
 801316a:	0189      	lsls	r1, r1, #6
 801316c:	404a      	eors	r2, r1
 801316e:	801a      	strh	r2, [r3, #0]
 8013170:	687a      	ldr	r2, [r7, #4]
 8013172:	683b      	ldr	r3, [r7, #0]
 8013174:	781b      	ldrb	r3, [r3, #0]
 8013176:	009b      	lsls	r3, r3, #2
 8013178:	18d3      	adds	r3, r2, r3
 801317a:	183a      	adds	r2, r7, r0
 801317c:	8812      	ldrh	r2, [r2, #0]
 801317e:	4947      	ldr	r1, [pc, #284]	@ (801329c <USB_ActivateEndpoint+0x6b4>)
 8013180:	430a      	orrs	r2, r1
 8013182:	b292      	uxth	r2, r2
 8013184:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8013186:	687a      	ldr	r2, [r7, #4]
 8013188:	683b      	ldr	r3, [r7, #0]
 801318a:	781b      	ldrb	r3, [r3, #0]
 801318c:	009b      	lsls	r3, r3, #2
 801318e:	18d3      	adds	r3, r2, r3
 8013190:	881b      	ldrh	r3, [r3, #0]
 8013192:	b29a      	uxth	r2, r3
 8013194:	2036      	movs	r0, #54	@ 0x36
 8013196:	183b      	adds	r3, r7, r0
 8013198:	4945      	ldr	r1, [pc, #276]	@ (80132b0 <USB_ActivateEndpoint+0x6c8>)
 801319a:	400a      	ands	r2, r1
 801319c:	801a      	strh	r2, [r3, #0]
 801319e:	687a      	ldr	r2, [r7, #4]
 80131a0:	683b      	ldr	r3, [r7, #0]
 80131a2:	781b      	ldrb	r3, [r3, #0]
 80131a4:	009b      	lsls	r3, r3, #2
 80131a6:	18d3      	adds	r3, r2, r3
 80131a8:	183a      	adds	r2, r7, r0
 80131aa:	8812      	ldrh	r2, [r2, #0]
 80131ac:	493b      	ldr	r1, [pc, #236]	@ (801329c <USB_ActivateEndpoint+0x6b4>)
 80131ae:	430a      	orrs	r2, r1
 80131b0:	b292      	uxth	r2, r2
 80131b2:	801a      	strh	r2, [r3, #0]
 80131b4:	e0ac      	b.n	8013310 <USB_ActivateEndpoint+0x728>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80131b6:	687a      	ldr	r2, [r7, #4]
 80131b8:	683b      	ldr	r3, [r7, #0]
 80131ba:	781b      	ldrb	r3, [r3, #0]
 80131bc:	009b      	lsls	r3, r3, #2
 80131be:	18d2      	adds	r2, r2, r3
 80131c0:	214e      	movs	r1, #78	@ 0x4e
 80131c2:	187b      	adds	r3, r7, r1
 80131c4:	8812      	ldrh	r2, [r2, #0]
 80131c6:	801a      	strh	r2, [r3, #0]
 80131c8:	187b      	adds	r3, r7, r1
 80131ca:	881a      	ldrh	r2, [r3, #0]
 80131cc:	2380      	movs	r3, #128	@ 0x80
 80131ce:	01db      	lsls	r3, r3, #7
 80131d0:	4013      	ands	r3, r2
 80131d2:	d016      	beq.n	8013202 <USB_ActivateEndpoint+0x61a>
 80131d4:	687a      	ldr	r2, [r7, #4]
 80131d6:	683b      	ldr	r3, [r7, #0]
 80131d8:	781b      	ldrb	r3, [r3, #0]
 80131da:	009b      	lsls	r3, r3, #2
 80131dc:	18d3      	adds	r3, r2, r3
 80131de:	881b      	ldrh	r3, [r3, #0]
 80131e0:	b29a      	uxth	r2, r3
 80131e2:	204c      	movs	r0, #76	@ 0x4c
 80131e4:	183b      	adds	r3, r7, r0
 80131e6:	492a      	ldr	r1, [pc, #168]	@ (8013290 <USB_ActivateEndpoint+0x6a8>)
 80131e8:	400a      	ands	r2, r1
 80131ea:	801a      	strh	r2, [r3, #0]
 80131ec:	687a      	ldr	r2, [r7, #4]
 80131ee:	683b      	ldr	r3, [r7, #0]
 80131f0:	781b      	ldrb	r3, [r3, #0]
 80131f2:	009b      	lsls	r3, r3, #2
 80131f4:	18d3      	adds	r3, r2, r3
 80131f6:	183a      	adds	r2, r7, r0
 80131f8:	8812      	ldrh	r2, [r2, #0]
 80131fa:	4926      	ldr	r1, [pc, #152]	@ (8013294 <USB_ActivateEndpoint+0x6ac>)
 80131fc:	430a      	orrs	r2, r1
 80131fe:	b292      	uxth	r2, r2
 8013200:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8013202:	687a      	ldr	r2, [r7, #4]
 8013204:	683b      	ldr	r3, [r7, #0]
 8013206:	781b      	ldrb	r3, [r3, #0]
 8013208:	009b      	lsls	r3, r3, #2
 801320a:	18d2      	adds	r2, r2, r3
 801320c:	214a      	movs	r1, #74	@ 0x4a
 801320e:	187b      	adds	r3, r7, r1
 8013210:	8812      	ldrh	r2, [r2, #0]
 8013212:	801a      	strh	r2, [r3, #0]
 8013214:	187b      	adds	r3, r7, r1
 8013216:	881b      	ldrh	r3, [r3, #0]
 8013218:	2240      	movs	r2, #64	@ 0x40
 801321a:	4013      	ands	r3, r2
 801321c:	d016      	beq.n	801324c <USB_ActivateEndpoint+0x664>
 801321e:	687a      	ldr	r2, [r7, #4]
 8013220:	683b      	ldr	r3, [r7, #0]
 8013222:	781b      	ldrb	r3, [r3, #0]
 8013224:	009b      	lsls	r3, r3, #2
 8013226:	18d3      	adds	r3, r2, r3
 8013228:	881b      	ldrh	r3, [r3, #0]
 801322a:	b29a      	uxth	r2, r3
 801322c:	2048      	movs	r0, #72	@ 0x48
 801322e:	183b      	adds	r3, r7, r0
 8013230:	4917      	ldr	r1, [pc, #92]	@ (8013290 <USB_ActivateEndpoint+0x6a8>)
 8013232:	400a      	ands	r2, r1
 8013234:	801a      	strh	r2, [r3, #0]
 8013236:	687a      	ldr	r2, [r7, #4]
 8013238:	683b      	ldr	r3, [r7, #0]
 801323a:	781b      	ldrb	r3, [r3, #0]
 801323c:	009b      	lsls	r3, r3, #2
 801323e:	18d3      	adds	r3, r2, r3
 8013240:	183a      	adds	r2, r7, r0
 8013242:	8812      	ldrh	r2, [r2, #0]
 8013244:	4919      	ldr	r1, [pc, #100]	@ (80132ac <USB_ActivateEndpoint+0x6c4>)
 8013246:	430a      	orrs	r2, r1
 8013248:	b292      	uxth	r2, r2
 801324a:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 801324c:	683b      	ldr	r3, [r7, #0]
 801324e:	78db      	ldrb	r3, [r3, #3]
 8013250:	2b01      	cmp	r3, #1
 8013252:	d02f      	beq.n	80132b4 <USB_ActivateEndpoint+0x6cc>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8013254:	687a      	ldr	r2, [r7, #4]
 8013256:	683b      	ldr	r3, [r7, #0]
 8013258:	781b      	ldrb	r3, [r3, #0]
 801325a:	009b      	lsls	r3, r3, #2
 801325c:	18d3      	adds	r3, r2, r3
 801325e:	881b      	ldrh	r3, [r3, #0]
 8013260:	b29a      	uxth	r2, r3
 8013262:	2044      	movs	r0, #68	@ 0x44
 8013264:	183b      	adds	r3, r7, r0
 8013266:	4912      	ldr	r1, [pc, #72]	@ (80132b0 <USB_ActivateEndpoint+0x6c8>)
 8013268:	400a      	ands	r2, r1
 801326a:	801a      	strh	r2, [r3, #0]
 801326c:	183b      	adds	r3, r7, r0
 801326e:	183a      	adds	r2, r7, r0
 8013270:	8812      	ldrh	r2, [r2, #0]
 8013272:	2120      	movs	r1, #32
 8013274:	404a      	eors	r2, r1
 8013276:	801a      	strh	r2, [r3, #0]
 8013278:	687a      	ldr	r2, [r7, #4]
 801327a:	683b      	ldr	r3, [r7, #0]
 801327c:	781b      	ldrb	r3, [r3, #0]
 801327e:	009b      	lsls	r3, r3, #2
 8013280:	18d3      	adds	r3, r2, r3
 8013282:	183a      	adds	r2, r7, r0
 8013284:	8812      	ldrh	r2, [r2, #0]
 8013286:	4905      	ldr	r1, [pc, #20]	@ (801329c <USB_ActivateEndpoint+0x6b4>)
 8013288:	430a      	orrs	r2, r1
 801328a:	b292      	uxth	r2, r2
 801328c:	801a      	strh	r2, [r3, #0]
 801328e:	e028      	b.n	80132e2 <USB_ActivateEndpoint+0x6fa>
 8013290:	ffff8f8f 	.word	0xffff8f8f
 8013294:	ffffc080 	.word	0xffffc080
 8013298:	ffffbf8f 	.word	0xffffbf8f
 801329c:	ffff8080 	.word	0xffff8080
 80132a0:	ffff8180 	.word	0xffff8180
 80132a4:	ffff8e8f 	.word	0xffff8e8f
 80132a8:	00000404 	.word	0x00000404
 80132ac:	ffff80c0 	.word	0xffff80c0
 80132b0:	ffff8fbf 	.word	0xffff8fbf
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80132b4:	687a      	ldr	r2, [r7, #4]
 80132b6:	683b      	ldr	r3, [r7, #0]
 80132b8:	781b      	ldrb	r3, [r3, #0]
 80132ba:	009b      	lsls	r3, r3, #2
 80132bc:	18d3      	adds	r3, r2, r3
 80132be:	881b      	ldrh	r3, [r3, #0]
 80132c0:	b29a      	uxth	r2, r3
 80132c2:	2046      	movs	r0, #70	@ 0x46
 80132c4:	183b      	adds	r3, r7, r0
 80132c6:	4916      	ldr	r1, [pc, #88]	@ (8013320 <USB_ActivateEndpoint+0x738>)
 80132c8:	400a      	ands	r2, r1
 80132ca:	801a      	strh	r2, [r3, #0]
 80132cc:	687a      	ldr	r2, [r7, #4]
 80132ce:	683b      	ldr	r3, [r7, #0]
 80132d0:	781b      	ldrb	r3, [r3, #0]
 80132d2:	009b      	lsls	r3, r3, #2
 80132d4:	18d3      	adds	r3, r2, r3
 80132d6:	183a      	adds	r2, r7, r0
 80132d8:	8812      	ldrh	r2, [r2, #0]
 80132da:	4912      	ldr	r1, [pc, #72]	@ (8013324 <USB_ActivateEndpoint+0x73c>)
 80132dc:	430a      	orrs	r2, r1
 80132de:	b292      	uxth	r2, r2
 80132e0:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80132e2:	687a      	ldr	r2, [r7, #4]
 80132e4:	683b      	ldr	r3, [r7, #0]
 80132e6:	781b      	ldrb	r3, [r3, #0]
 80132e8:	009b      	lsls	r3, r3, #2
 80132ea:	18d3      	adds	r3, r2, r3
 80132ec:	881b      	ldrh	r3, [r3, #0]
 80132ee:	b29a      	uxth	r2, r3
 80132f0:	2042      	movs	r0, #66	@ 0x42
 80132f2:	183b      	adds	r3, r7, r0
 80132f4:	490c      	ldr	r1, [pc, #48]	@ (8013328 <USB_ActivateEndpoint+0x740>)
 80132f6:	400a      	ands	r2, r1
 80132f8:	801a      	strh	r2, [r3, #0]
 80132fa:	687a      	ldr	r2, [r7, #4]
 80132fc:	683b      	ldr	r3, [r7, #0]
 80132fe:	781b      	ldrb	r3, [r3, #0]
 8013300:	009b      	lsls	r3, r3, #2
 8013302:	18d3      	adds	r3, r2, r3
 8013304:	183a      	adds	r2, r7, r0
 8013306:	8812      	ldrh	r2, [r2, #0]
 8013308:	4906      	ldr	r1, [pc, #24]	@ (8013324 <USB_ActivateEndpoint+0x73c>)
 801330a:	430a      	orrs	r2, r1
 801330c:	b292      	uxth	r2, r2
 801330e:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8013310:	236f      	movs	r3, #111	@ 0x6f
 8013312:	18fb      	adds	r3, r7, r3
 8013314:	781b      	ldrb	r3, [r3, #0]
}
 8013316:	0018      	movs	r0, r3
 8013318:	46bd      	mov	sp, r7
 801331a:	b01c      	add	sp, #112	@ 0x70
 801331c:	bd80      	pop	{r7, pc}
 801331e:	46c0      	nop			@ (mov r8, r8)
 8013320:	ffff8fbf 	.word	0xffff8fbf
 8013324:	ffff8080 	.word	0xffff8080
 8013328:	ffffbf8f 	.word	0xffffbf8f

0801332c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801332c:	b580      	push	{r7, lr}
 801332e:	b08c      	sub	sp, #48	@ 0x30
 8013330:	af00      	add	r7, sp, #0
 8013332:	6078      	str	r0, [r7, #4]
 8013334:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8013336:	683b      	ldr	r3, [r7, #0]
 8013338:	7b1b      	ldrb	r3, [r3, #12]
 801333a:	2b00      	cmp	r3, #0
 801333c:	d000      	beq.n	8013340 <USB_DeactivateEndpoint+0x14>
 801333e:	e07e      	b.n	801343e <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 8013340:	683b      	ldr	r3, [r7, #0]
 8013342:	785b      	ldrb	r3, [r3, #1]
 8013344:	2b00      	cmp	r3, #0
 8013346:	d03c      	beq.n	80133c2 <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8013348:	687a      	ldr	r2, [r7, #4]
 801334a:	683b      	ldr	r3, [r7, #0]
 801334c:	781b      	ldrb	r3, [r3, #0]
 801334e:	009b      	lsls	r3, r3, #2
 8013350:	18d2      	adds	r2, r2, r3
 8013352:	210c      	movs	r1, #12
 8013354:	187b      	adds	r3, r7, r1
 8013356:	8812      	ldrh	r2, [r2, #0]
 8013358:	801a      	strh	r2, [r3, #0]
 801335a:	187b      	adds	r3, r7, r1
 801335c:	881b      	ldrh	r3, [r3, #0]
 801335e:	2240      	movs	r2, #64	@ 0x40
 8013360:	4013      	ands	r3, r2
 8013362:	d016      	beq.n	8013392 <USB_DeactivateEndpoint+0x66>
 8013364:	687a      	ldr	r2, [r7, #4]
 8013366:	683b      	ldr	r3, [r7, #0]
 8013368:	781b      	ldrb	r3, [r3, #0]
 801336a:	009b      	lsls	r3, r3, #2
 801336c:	18d3      	adds	r3, r2, r3
 801336e:	881b      	ldrh	r3, [r3, #0]
 8013370:	b29a      	uxth	r2, r3
 8013372:	200a      	movs	r0, #10
 8013374:	183b      	adds	r3, r7, r0
 8013376:	49c7      	ldr	r1, [pc, #796]	@ (8013694 <USB_DeactivateEndpoint+0x368>)
 8013378:	400a      	ands	r2, r1
 801337a:	801a      	strh	r2, [r3, #0]
 801337c:	687a      	ldr	r2, [r7, #4]
 801337e:	683b      	ldr	r3, [r7, #0]
 8013380:	781b      	ldrb	r3, [r3, #0]
 8013382:	009b      	lsls	r3, r3, #2
 8013384:	18d3      	adds	r3, r2, r3
 8013386:	183a      	adds	r2, r7, r0
 8013388:	8812      	ldrh	r2, [r2, #0]
 801338a:	49c3      	ldr	r1, [pc, #780]	@ (8013698 <USB_DeactivateEndpoint+0x36c>)
 801338c:	430a      	orrs	r2, r1
 801338e:	b292      	uxth	r2, r2
 8013390:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8013392:	687a      	ldr	r2, [r7, #4]
 8013394:	683b      	ldr	r3, [r7, #0]
 8013396:	781b      	ldrb	r3, [r3, #0]
 8013398:	009b      	lsls	r3, r3, #2
 801339a:	18d3      	adds	r3, r2, r3
 801339c:	881b      	ldrh	r3, [r3, #0]
 801339e:	b29a      	uxth	r2, r3
 80133a0:	2008      	movs	r0, #8
 80133a2:	183b      	adds	r3, r7, r0
 80133a4:	49bd      	ldr	r1, [pc, #756]	@ (801369c <USB_DeactivateEndpoint+0x370>)
 80133a6:	400a      	ands	r2, r1
 80133a8:	801a      	strh	r2, [r3, #0]
 80133aa:	687a      	ldr	r2, [r7, #4]
 80133ac:	683b      	ldr	r3, [r7, #0]
 80133ae:	781b      	ldrb	r3, [r3, #0]
 80133b0:	009b      	lsls	r3, r3, #2
 80133b2:	18d3      	adds	r3, r2, r3
 80133b4:	183a      	adds	r2, r7, r0
 80133b6:	8812      	ldrh	r2, [r2, #0]
 80133b8:	49b9      	ldr	r1, [pc, #740]	@ (80136a0 <USB_DeactivateEndpoint+0x374>)
 80133ba:	430a      	orrs	r2, r1
 80133bc:	b292      	uxth	r2, r2
 80133be:	801a      	strh	r2, [r3, #0]
 80133c0:	e163      	b.n	801368a <USB_DeactivateEndpoint+0x35e>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80133c2:	687a      	ldr	r2, [r7, #4]
 80133c4:	683b      	ldr	r3, [r7, #0]
 80133c6:	781b      	ldrb	r3, [r3, #0]
 80133c8:	009b      	lsls	r3, r3, #2
 80133ca:	18d2      	adds	r2, r2, r3
 80133cc:	2112      	movs	r1, #18
 80133ce:	187b      	adds	r3, r7, r1
 80133d0:	8812      	ldrh	r2, [r2, #0]
 80133d2:	801a      	strh	r2, [r3, #0]
 80133d4:	187b      	adds	r3, r7, r1
 80133d6:	881a      	ldrh	r2, [r3, #0]
 80133d8:	2380      	movs	r3, #128	@ 0x80
 80133da:	01db      	lsls	r3, r3, #7
 80133dc:	4013      	ands	r3, r2
 80133de:	d016      	beq.n	801340e <USB_DeactivateEndpoint+0xe2>
 80133e0:	687a      	ldr	r2, [r7, #4]
 80133e2:	683b      	ldr	r3, [r7, #0]
 80133e4:	781b      	ldrb	r3, [r3, #0]
 80133e6:	009b      	lsls	r3, r3, #2
 80133e8:	18d3      	adds	r3, r2, r3
 80133ea:	881b      	ldrh	r3, [r3, #0]
 80133ec:	b29a      	uxth	r2, r3
 80133ee:	2010      	movs	r0, #16
 80133f0:	183b      	adds	r3, r7, r0
 80133f2:	49a8      	ldr	r1, [pc, #672]	@ (8013694 <USB_DeactivateEndpoint+0x368>)
 80133f4:	400a      	ands	r2, r1
 80133f6:	801a      	strh	r2, [r3, #0]
 80133f8:	687a      	ldr	r2, [r7, #4]
 80133fa:	683b      	ldr	r3, [r7, #0]
 80133fc:	781b      	ldrb	r3, [r3, #0]
 80133fe:	009b      	lsls	r3, r3, #2
 8013400:	18d3      	adds	r3, r2, r3
 8013402:	183a      	adds	r2, r7, r0
 8013404:	8812      	ldrh	r2, [r2, #0]
 8013406:	49a7      	ldr	r1, [pc, #668]	@ (80136a4 <USB_DeactivateEndpoint+0x378>)
 8013408:	430a      	orrs	r2, r1
 801340a:	b292      	uxth	r2, r2
 801340c:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801340e:	687a      	ldr	r2, [r7, #4]
 8013410:	683b      	ldr	r3, [r7, #0]
 8013412:	781b      	ldrb	r3, [r3, #0]
 8013414:	009b      	lsls	r3, r3, #2
 8013416:	18d3      	adds	r3, r2, r3
 8013418:	881b      	ldrh	r3, [r3, #0]
 801341a:	b29a      	uxth	r2, r3
 801341c:	200e      	movs	r0, #14
 801341e:	183b      	adds	r3, r7, r0
 8013420:	49a1      	ldr	r1, [pc, #644]	@ (80136a8 <USB_DeactivateEndpoint+0x37c>)
 8013422:	400a      	ands	r2, r1
 8013424:	801a      	strh	r2, [r3, #0]
 8013426:	687a      	ldr	r2, [r7, #4]
 8013428:	683b      	ldr	r3, [r7, #0]
 801342a:	781b      	ldrb	r3, [r3, #0]
 801342c:	009b      	lsls	r3, r3, #2
 801342e:	18d3      	adds	r3, r2, r3
 8013430:	183a      	adds	r2, r7, r0
 8013432:	8812      	ldrh	r2, [r2, #0]
 8013434:	499a      	ldr	r1, [pc, #616]	@ (80136a0 <USB_DeactivateEndpoint+0x374>)
 8013436:	430a      	orrs	r2, r1
 8013438:	b292      	uxth	r2, r2
 801343a:	801a      	strh	r2, [r3, #0]
 801343c:	e125      	b.n	801368a <USB_DeactivateEndpoint+0x35e>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 801343e:	683b      	ldr	r3, [r7, #0]
 8013440:	785b      	ldrb	r3, [r3, #1]
 8013442:	2b00      	cmp	r3, #0
 8013444:	d000      	beq.n	8013448 <USB_DeactivateEndpoint+0x11c>
 8013446:	e090      	b.n	801356a <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8013448:	687a      	ldr	r2, [r7, #4]
 801344a:	683b      	ldr	r3, [r7, #0]
 801344c:	781b      	ldrb	r3, [r3, #0]
 801344e:	009b      	lsls	r3, r3, #2
 8013450:	18d2      	adds	r2, r2, r3
 8013452:	2120      	movs	r1, #32
 8013454:	187b      	adds	r3, r7, r1
 8013456:	8812      	ldrh	r2, [r2, #0]
 8013458:	801a      	strh	r2, [r3, #0]
 801345a:	187b      	adds	r3, r7, r1
 801345c:	881a      	ldrh	r2, [r3, #0]
 801345e:	2380      	movs	r3, #128	@ 0x80
 8013460:	01db      	lsls	r3, r3, #7
 8013462:	4013      	ands	r3, r2
 8013464:	d016      	beq.n	8013494 <USB_DeactivateEndpoint+0x168>
 8013466:	687a      	ldr	r2, [r7, #4]
 8013468:	683b      	ldr	r3, [r7, #0]
 801346a:	781b      	ldrb	r3, [r3, #0]
 801346c:	009b      	lsls	r3, r3, #2
 801346e:	18d3      	adds	r3, r2, r3
 8013470:	881b      	ldrh	r3, [r3, #0]
 8013472:	b29a      	uxth	r2, r3
 8013474:	201e      	movs	r0, #30
 8013476:	183b      	adds	r3, r7, r0
 8013478:	4986      	ldr	r1, [pc, #536]	@ (8013694 <USB_DeactivateEndpoint+0x368>)
 801347a:	400a      	ands	r2, r1
 801347c:	801a      	strh	r2, [r3, #0]
 801347e:	687a      	ldr	r2, [r7, #4]
 8013480:	683b      	ldr	r3, [r7, #0]
 8013482:	781b      	ldrb	r3, [r3, #0]
 8013484:	009b      	lsls	r3, r3, #2
 8013486:	18d3      	adds	r3, r2, r3
 8013488:	183a      	adds	r2, r7, r0
 801348a:	8812      	ldrh	r2, [r2, #0]
 801348c:	4985      	ldr	r1, [pc, #532]	@ (80136a4 <USB_DeactivateEndpoint+0x378>)
 801348e:	430a      	orrs	r2, r1
 8013490:	b292      	uxth	r2, r2
 8013492:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8013494:	687a      	ldr	r2, [r7, #4]
 8013496:	683b      	ldr	r3, [r7, #0]
 8013498:	781b      	ldrb	r3, [r3, #0]
 801349a:	009b      	lsls	r3, r3, #2
 801349c:	18d2      	adds	r2, r2, r3
 801349e:	211c      	movs	r1, #28
 80134a0:	187b      	adds	r3, r7, r1
 80134a2:	8812      	ldrh	r2, [r2, #0]
 80134a4:	801a      	strh	r2, [r3, #0]
 80134a6:	187b      	adds	r3, r7, r1
 80134a8:	881b      	ldrh	r3, [r3, #0]
 80134aa:	2240      	movs	r2, #64	@ 0x40
 80134ac:	4013      	ands	r3, r2
 80134ae:	d016      	beq.n	80134de <USB_DeactivateEndpoint+0x1b2>
 80134b0:	687a      	ldr	r2, [r7, #4]
 80134b2:	683b      	ldr	r3, [r7, #0]
 80134b4:	781b      	ldrb	r3, [r3, #0]
 80134b6:	009b      	lsls	r3, r3, #2
 80134b8:	18d3      	adds	r3, r2, r3
 80134ba:	881b      	ldrh	r3, [r3, #0]
 80134bc:	b29a      	uxth	r2, r3
 80134be:	201a      	movs	r0, #26
 80134c0:	183b      	adds	r3, r7, r0
 80134c2:	4974      	ldr	r1, [pc, #464]	@ (8013694 <USB_DeactivateEndpoint+0x368>)
 80134c4:	400a      	ands	r2, r1
 80134c6:	801a      	strh	r2, [r3, #0]
 80134c8:	687a      	ldr	r2, [r7, #4]
 80134ca:	683b      	ldr	r3, [r7, #0]
 80134cc:	781b      	ldrb	r3, [r3, #0]
 80134ce:	009b      	lsls	r3, r3, #2
 80134d0:	18d3      	adds	r3, r2, r3
 80134d2:	183a      	adds	r2, r7, r0
 80134d4:	8812      	ldrh	r2, [r2, #0]
 80134d6:	4970      	ldr	r1, [pc, #448]	@ (8013698 <USB_DeactivateEndpoint+0x36c>)
 80134d8:	430a      	orrs	r2, r1
 80134da:	b292      	uxth	r2, r2
 80134dc:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80134de:	687a      	ldr	r2, [r7, #4]
 80134e0:	683b      	ldr	r3, [r7, #0]
 80134e2:	781b      	ldrb	r3, [r3, #0]
 80134e4:	009b      	lsls	r3, r3, #2
 80134e6:	18d3      	adds	r3, r2, r3
 80134e8:	881b      	ldrh	r3, [r3, #0]
 80134ea:	b29a      	uxth	r2, r3
 80134ec:	2018      	movs	r0, #24
 80134ee:	183b      	adds	r3, r7, r0
 80134f0:	4968      	ldr	r1, [pc, #416]	@ (8013694 <USB_DeactivateEndpoint+0x368>)
 80134f2:	400a      	ands	r2, r1
 80134f4:	801a      	strh	r2, [r3, #0]
 80134f6:	687a      	ldr	r2, [r7, #4]
 80134f8:	683b      	ldr	r3, [r7, #0]
 80134fa:	781b      	ldrb	r3, [r3, #0]
 80134fc:	009b      	lsls	r3, r3, #2
 80134fe:	18d3      	adds	r3, r2, r3
 8013500:	183a      	adds	r2, r7, r0
 8013502:	8812      	ldrh	r2, [r2, #0]
 8013504:	4964      	ldr	r1, [pc, #400]	@ (8013698 <USB_DeactivateEndpoint+0x36c>)
 8013506:	430a      	orrs	r2, r1
 8013508:	b292      	uxth	r2, r2
 801350a:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801350c:	687a      	ldr	r2, [r7, #4]
 801350e:	683b      	ldr	r3, [r7, #0]
 8013510:	781b      	ldrb	r3, [r3, #0]
 8013512:	009b      	lsls	r3, r3, #2
 8013514:	18d3      	adds	r3, r2, r3
 8013516:	881b      	ldrh	r3, [r3, #0]
 8013518:	b29a      	uxth	r2, r3
 801351a:	2016      	movs	r0, #22
 801351c:	183b      	adds	r3, r7, r0
 801351e:	4962      	ldr	r1, [pc, #392]	@ (80136a8 <USB_DeactivateEndpoint+0x37c>)
 8013520:	400a      	ands	r2, r1
 8013522:	801a      	strh	r2, [r3, #0]
 8013524:	687a      	ldr	r2, [r7, #4]
 8013526:	683b      	ldr	r3, [r7, #0]
 8013528:	781b      	ldrb	r3, [r3, #0]
 801352a:	009b      	lsls	r3, r3, #2
 801352c:	18d3      	adds	r3, r2, r3
 801352e:	183a      	adds	r2, r7, r0
 8013530:	8812      	ldrh	r2, [r2, #0]
 8013532:	495b      	ldr	r1, [pc, #364]	@ (80136a0 <USB_DeactivateEndpoint+0x374>)
 8013534:	430a      	orrs	r2, r1
 8013536:	b292      	uxth	r2, r2
 8013538:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801353a:	687a      	ldr	r2, [r7, #4]
 801353c:	683b      	ldr	r3, [r7, #0]
 801353e:	781b      	ldrb	r3, [r3, #0]
 8013540:	009b      	lsls	r3, r3, #2
 8013542:	18d3      	adds	r3, r2, r3
 8013544:	881b      	ldrh	r3, [r3, #0]
 8013546:	b29a      	uxth	r2, r3
 8013548:	2014      	movs	r0, #20
 801354a:	183b      	adds	r3, r7, r0
 801354c:	4953      	ldr	r1, [pc, #332]	@ (801369c <USB_DeactivateEndpoint+0x370>)
 801354e:	400a      	ands	r2, r1
 8013550:	801a      	strh	r2, [r3, #0]
 8013552:	687a      	ldr	r2, [r7, #4]
 8013554:	683b      	ldr	r3, [r7, #0]
 8013556:	781b      	ldrb	r3, [r3, #0]
 8013558:	009b      	lsls	r3, r3, #2
 801355a:	18d3      	adds	r3, r2, r3
 801355c:	183a      	adds	r2, r7, r0
 801355e:	8812      	ldrh	r2, [r2, #0]
 8013560:	494f      	ldr	r1, [pc, #316]	@ (80136a0 <USB_DeactivateEndpoint+0x374>)
 8013562:	430a      	orrs	r2, r1
 8013564:	b292      	uxth	r2, r2
 8013566:	801a      	strh	r2, [r3, #0]
 8013568:	e08f      	b.n	801368a <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801356a:	687a      	ldr	r2, [r7, #4]
 801356c:	683b      	ldr	r3, [r7, #0]
 801356e:	781b      	ldrb	r3, [r3, #0]
 8013570:	009b      	lsls	r3, r3, #2
 8013572:	18d2      	adds	r2, r2, r3
 8013574:	212e      	movs	r1, #46	@ 0x2e
 8013576:	187b      	adds	r3, r7, r1
 8013578:	8812      	ldrh	r2, [r2, #0]
 801357a:	801a      	strh	r2, [r3, #0]
 801357c:	187b      	adds	r3, r7, r1
 801357e:	881a      	ldrh	r2, [r3, #0]
 8013580:	2380      	movs	r3, #128	@ 0x80
 8013582:	01db      	lsls	r3, r3, #7
 8013584:	4013      	ands	r3, r2
 8013586:	d016      	beq.n	80135b6 <USB_DeactivateEndpoint+0x28a>
 8013588:	687a      	ldr	r2, [r7, #4]
 801358a:	683b      	ldr	r3, [r7, #0]
 801358c:	781b      	ldrb	r3, [r3, #0]
 801358e:	009b      	lsls	r3, r3, #2
 8013590:	18d3      	adds	r3, r2, r3
 8013592:	881b      	ldrh	r3, [r3, #0]
 8013594:	b29a      	uxth	r2, r3
 8013596:	202c      	movs	r0, #44	@ 0x2c
 8013598:	183b      	adds	r3, r7, r0
 801359a:	493e      	ldr	r1, [pc, #248]	@ (8013694 <USB_DeactivateEndpoint+0x368>)
 801359c:	400a      	ands	r2, r1
 801359e:	801a      	strh	r2, [r3, #0]
 80135a0:	687a      	ldr	r2, [r7, #4]
 80135a2:	683b      	ldr	r3, [r7, #0]
 80135a4:	781b      	ldrb	r3, [r3, #0]
 80135a6:	009b      	lsls	r3, r3, #2
 80135a8:	18d3      	adds	r3, r2, r3
 80135aa:	183a      	adds	r2, r7, r0
 80135ac:	8812      	ldrh	r2, [r2, #0]
 80135ae:	493d      	ldr	r1, [pc, #244]	@ (80136a4 <USB_DeactivateEndpoint+0x378>)
 80135b0:	430a      	orrs	r2, r1
 80135b2:	b292      	uxth	r2, r2
 80135b4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80135b6:	687a      	ldr	r2, [r7, #4]
 80135b8:	683b      	ldr	r3, [r7, #0]
 80135ba:	781b      	ldrb	r3, [r3, #0]
 80135bc:	009b      	lsls	r3, r3, #2
 80135be:	18d2      	adds	r2, r2, r3
 80135c0:	212a      	movs	r1, #42	@ 0x2a
 80135c2:	187b      	adds	r3, r7, r1
 80135c4:	8812      	ldrh	r2, [r2, #0]
 80135c6:	801a      	strh	r2, [r3, #0]
 80135c8:	187b      	adds	r3, r7, r1
 80135ca:	881b      	ldrh	r3, [r3, #0]
 80135cc:	2240      	movs	r2, #64	@ 0x40
 80135ce:	4013      	ands	r3, r2
 80135d0:	d016      	beq.n	8013600 <USB_DeactivateEndpoint+0x2d4>
 80135d2:	687a      	ldr	r2, [r7, #4]
 80135d4:	683b      	ldr	r3, [r7, #0]
 80135d6:	781b      	ldrb	r3, [r3, #0]
 80135d8:	009b      	lsls	r3, r3, #2
 80135da:	18d3      	adds	r3, r2, r3
 80135dc:	881b      	ldrh	r3, [r3, #0]
 80135de:	b29a      	uxth	r2, r3
 80135e0:	2028      	movs	r0, #40	@ 0x28
 80135e2:	183b      	adds	r3, r7, r0
 80135e4:	492b      	ldr	r1, [pc, #172]	@ (8013694 <USB_DeactivateEndpoint+0x368>)
 80135e6:	400a      	ands	r2, r1
 80135e8:	801a      	strh	r2, [r3, #0]
 80135ea:	687a      	ldr	r2, [r7, #4]
 80135ec:	683b      	ldr	r3, [r7, #0]
 80135ee:	781b      	ldrb	r3, [r3, #0]
 80135f0:	009b      	lsls	r3, r3, #2
 80135f2:	18d3      	adds	r3, r2, r3
 80135f4:	183a      	adds	r2, r7, r0
 80135f6:	8812      	ldrh	r2, [r2, #0]
 80135f8:	4927      	ldr	r1, [pc, #156]	@ (8013698 <USB_DeactivateEndpoint+0x36c>)
 80135fa:	430a      	orrs	r2, r1
 80135fc:	b292      	uxth	r2, r2
 80135fe:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8013600:	687a      	ldr	r2, [r7, #4]
 8013602:	683b      	ldr	r3, [r7, #0]
 8013604:	781b      	ldrb	r3, [r3, #0]
 8013606:	009b      	lsls	r3, r3, #2
 8013608:	18d3      	adds	r3, r2, r3
 801360a:	881b      	ldrh	r3, [r3, #0]
 801360c:	b29a      	uxth	r2, r3
 801360e:	2026      	movs	r0, #38	@ 0x26
 8013610:	183b      	adds	r3, r7, r0
 8013612:	4920      	ldr	r1, [pc, #128]	@ (8013694 <USB_DeactivateEndpoint+0x368>)
 8013614:	400a      	ands	r2, r1
 8013616:	801a      	strh	r2, [r3, #0]
 8013618:	687a      	ldr	r2, [r7, #4]
 801361a:	683b      	ldr	r3, [r7, #0]
 801361c:	781b      	ldrb	r3, [r3, #0]
 801361e:	009b      	lsls	r3, r3, #2
 8013620:	18d3      	adds	r3, r2, r3
 8013622:	183a      	adds	r2, r7, r0
 8013624:	8812      	ldrh	r2, [r2, #0]
 8013626:	491f      	ldr	r1, [pc, #124]	@ (80136a4 <USB_DeactivateEndpoint+0x378>)
 8013628:	430a      	orrs	r2, r1
 801362a:	b292      	uxth	r2, r2
 801362c:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801362e:	687a      	ldr	r2, [r7, #4]
 8013630:	683b      	ldr	r3, [r7, #0]
 8013632:	781b      	ldrb	r3, [r3, #0]
 8013634:	009b      	lsls	r3, r3, #2
 8013636:	18d3      	adds	r3, r2, r3
 8013638:	881b      	ldrh	r3, [r3, #0]
 801363a:	b29a      	uxth	r2, r3
 801363c:	2024      	movs	r0, #36	@ 0x24
 801363e:	183b      	adds	r3, r7, r0
 8013640:	4916      	ldr	r1, [pc, #88]	@ (801369c <USB_DeactivateEndpoint+0x370>)
 8013642:	400a      	ands	r2, r1
 8013644:	801a      	strh	r2, [r3, #0]
 8013646:	687a      	ldr	r2, [r7, #4]
 8013648:	683b      	ldr	r3, [r7, #0]
 801364a:	781b      	ldrb	r3, [r3, #0]
 801364c:	009b      	lsls	r3, r3, #2
 801364e:	18d3      	adds	r3, r2, r3
 8013650:	183a      	adds	r2, r7, r0
 8013652:	8812      	ldrh	r2, [r2, #0]
 8013654:	4912      	ldr	r1, [pc, #72]	@ (80136a0 <USB_DeactivateEndpoint+0x374>)
 8013656:	430a      	orrs	r2, r1
 8013658:	b292      	uxth	r2, r2
 801365a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801365c:	687a      	ldr	r2, [r7, #4]
 801365e:	683b      	ldr	r3, [r7, #0]
 8013660:	781b      	ldrb	r3, [r3, #0]
 8013662:	009b      	lsls	r3, r3, #2
 8013664:	18d3      	adds	r3, r2, r3
 8013666:	881b      	ldrh	r3, [r3, #0]
 8013668:	b29a      	uxth	r2, r3
 801366a:	2022      	movs	r0, #34	@ 0x22
 801366c:	183b      	adds	r3, r7, r0
 801366e:	490e      	ldr	r1, [pc, #56]	@ (80136a8 <USB_DeactivateEndpoint+0x37c>)
 8013670:	400a      	ands	r2, r1
 8013672:	801a      	strh	r2, [r3, #0]
 8013674:	687a      	ldr	r2, [r7, #4]
 8013676:	683b      	ldr	r3, [r7, #0]
 8013678:	781b      	ldrb	r3, [r3, #0]
 801367a:	009b      	lsls	r3, r3, #2
 801367c:	18d3      	adds	r3, r2, r3
 801367e:	183a      	adds	r2, r7, r0
 8013680:	8812      	ldrh	r2, [r2, #0]
 8013682:	4907      	ldr	r1, [pc, #28]	@ (80136a0 <USB_DeactivateEndpoint+0x374>)
 8013684:	430a      	orrs	r2, r1
 8013686:	b292      	uxth	r2, r2
 8013688:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 801368a:	2300      	movs	r3, #0
}
 801368c:	0018      	movs	r0, r3
 801368e:	46bd      	mov	sp, r7
 8013690:	b00c      	add	sp, #48	@ 0x30
 8013692:	bd80      	pop	{r7, pc}
 8013694:	ffff8f8f 	.word	0xffff8f8f
 8013698:	ffff80c0 	.word	0xffff80c0
 801369c:	ffff8fbf 	.word	0xffff8fbf
 80136a0:	ffff8080 	.word	0xffff8080
 80136a4:	ffffc080 	.word	0xffffc080
 80136a8:	ffffbf8f 	.word	0xffffbf8f

080136ac <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80136ac:	b590      	push	{r4, r7, lr}
 80136ae:	b0c3      	sub	sp, #268	@ 0x10c
 80136b0:	af00      	add	r7, sp, #0
 80136b2:	6078      	str	r0, [r7, #4]
 80136b4:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80136b6:	683b      	ldr	r3, [r7, #0]
 80136b8:	785b      	ldrb	r3, [r3, #1]
 80136ba:	2b01      	cmp	r3, #1
 80136bc:	d001      	beq.n	80136c2 <USB_EPStartXfer+0x16>
 80136be:	f000 fd2d 	bl	801411c <USB_EPStartXfer+0xa70>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80136c2:	683b      	ldr	r3, [r7, #0]
 80136c4:	699a      	ldr	r2, [r3, #24]
 80136c6:	683b      	ldr	r3, [r7, #0]
 80136c8:	691b      	ldr	r3, [r3, #16]
 80136ca:	429a      	cmp	r2, r3
 80136cc:	d905      	bls.n	80136da <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 80136ce:	683b      	ldr	r3, [r7, #0]
 80136d0:	691b      	ldr	r3, [r3, #16]
 80136d2:	1d7a      	adds	r2, r7, #5
 80136d4:	32ff      	adds	r2, #255	@ 0xff
 80136d6:	6013      	str	r3, [r2, #0]
 80136d8:	e004      	b.n	80136e4 <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 80136da:	683b      	ldr	r3, [r7, #0]
 80136dc:	699b      	ldr	r3, [r3, #24]
 80136de:	1d7a      	adds	r2, r7, #5
 80136e0:	32ff      	adds	r2, #255	@ 0xff
 80136e2:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80136e4:	683b      	ldr	r3, [r7, #0]
 80136e6:	7b1b      	ldrb	r3, [r3, #12]
 80136e8:	2b00      	cmp	r3, #0
 80136ea:	d125      	bne.n	8013738 <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80136ec:	683b      	ldr	r3, [r7, #0]
 80136ee:	6959      	ldr	r1, [r3, #20]
 80136f0:	683b      	ldr	r3, [r7, #0]
 80136f2:	88da      	ldrh	r2, [r3, #6]
 80136f4:	1d7b      	adds	r3, r7, #5
 80136f6:	33ff      	adds	r3, #255	@ 0xff
 80136f8:	681b      	ldr	r3, [r3, #0]
 80136fa:	b29b      	uxth	r3, r3
 80136fc:	6878      	ldr	r0, [r7, #4]
 80136fe:	f001 fa47 	bl	8014b90 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8013702:	687b      	ldr	r3, [r7, #4]
 8013704:	613b      	str	r3, [r7, #16]
 8013706:	687b      	ldr	r3, [r7, #4]
 8013708:	2250      	movs	r2, #80	@ 0x50
 801370a:	5a9b      	ldrh	r3, [r3, r2]
 801370c:	b29b      	uxth	r3, r3
 801370e:	001a      	movs	r2, r3
 8013710:	693b      	ldr	r3, [r7, #16]
 8013712:	189b      	adds	r3, r3, r2
 8013714:	613b      	str	r3, [r7, #16]
 8013716:	683b      	ldr	r3, [r7, #0]
 8013718:	781b      	ldrb	r3, [r3, #0]
 801371a:	00da      	lsls	r2, r3, #3
 801371c:	693b      	ldr	r3, [r7, #16]
 801371e:	18d3      	adds	r3, r2, r3
 8013720:	4ad7      	ldr	r2, [pc, #860]	@ (8013a80 <USB_EPStartXfer+0x3d4>)
 8013722:	4694      	mov	ip, r2
 8013724:	4463      	add	r3, ip
 8013726:	60fb      	str	r3, [r7, #12]
 8013728:	1d7b      	adds	r3, r7, #5
 801372a:	33ff      	adds	r3, #255	@ 0xff
 801372c:	681b      	ldr	r3, [r3, #0]
 801372e:	b29a      	uxth	r2, r3
 8013730:	68fb      	ldr	r3, [r7, #12]
 8013732:	801a      	strh	r2, [r3, #0]
 8013734:	f000 fccd 	bl	80140d2 <USB_EPStartXfer+0xa26>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8013738:	683b      	ldr	r3, [r7, #0]
 801373a:	78db      	ldrb	r3, [r3, #3]
 801373c:	2b02      	cmp	r3, #2
 801373e:	d000      	beq.n	8013742 <USB_EPStartXfer+0x96>
 8013740:	e362      	b.n	8013e08 <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8013742:	683b      	ldr	r3, [r7, #0]
 8013744:	6a1a      	ldr	r2, [r3, #32]
 8013746:	683b      	ldr	r3, [r7, #0]
 8013748:	691b      	ldr	r3, [r3, #16]
 801374a:	429a      	cmp	r2, r3
 801374c:	d800      	bhi.n	8013750 <USB_EPStartXfer+0xa4>
 801374e:	e309      	b.n	8013d64 <USB_EPStartXfer+0x6b8>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8013750:	687a      	ldr	r2, [r7, #4]
 8013752:	683b      	ldr	r3, [r7, #0]
 8013754:	781b      	ldrb	r3, [r3, #0]
 8013756:	009b      	lsls	r3, r3, #2
 8013758:	18d3      	adds	r3, r2, r3
 801375a:	881b      	ldrh	r3, [r3, #0]
 801375c:	b29a      	uxth	r2, r3
 801375e:	2056      	movs	r0, #86	@ 0x56
 8013760:	183b      	adds	r3, r7, r0
 8013762:	49c8      	ldr	r1, [pc, #800]	@ (8013a84 <USB_EPStartXfer+0x3d8>)
 8013764:	400a      	ands	r2, r1
 8013766:	801a      	strh	r2, [r3, #0]
 8013768:	687a      	ldr	r2, [r7, #4]
 801376a:	683b      	ldr	r3, [r7, #0]
 801376c:	781b      	ldrb	r3, [r3, #0]
 801376e:	009b      	lsls	r3, r3, #2
 8013770:	18d3      	adds	r3, r2, r3
 8013772:	183a      	adds	r2, r7, r0
 8013774:	8812      	ldrh	r2, [r2, #0]
 8013776:	49c4      	ldr	r1, [pc, #784]	@ (8013a88 <USB_EPStartXfer+0x3dc>)
 8013778:	430a      	orrs	r2, r1
 801377a:	b292      	uxth	r2, r2
 801377c:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 801377e:	683b      	ldr	r3, [r7, #0]
 8013780:	6a1a      	ldr	r2, [r3, #32]
 8013782:	1d7b      	adds	r3, r7, #5
 8013784:	33ff      	adds	r3, #255	@ 0xff
 8013786:	681b      	ldr	r3, [r3, #0]
 8013788:	1ad2      	subs	r2, r2, r3
 801378a:	683b      	ldr	r3, [r7, #0]
 801378c:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 801378e:	687a      	ldr	r2, [r7, #4]
 8013790:	683b      	ldr	r3, [r7, #0]
 8013792:	781b      	ldrb	r3, [r3, #0]
 8013794:	009b      	lsls	r3, r3, #2
 8013796:	18d3      	adds	r3, r2, r3
 8013798:	881b      	ldrh	r3, [r3, #0]
 801379a:	b29b      	uxth	r3, r3
 801379c:	001a      	movs	r2, r3
 801379e:	2340      	movs	r3, #64	@ 0x40
 80137a0:	4013      	ands	r3, r2
 80137a2:	d100      	bne.n	80137a6 <USB_EPStartXfer+0xfa>
 80137a4:	e176      	b.n	8013a94 <USB_EPStartXfer+0x3e8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80137a6:	687b      	ldr	r3, [r7, #4]
 80137a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80137aa:	683b      	ldr	r3, [r7, #0]
 80137ac:	785b      	ldrb	r3, [r3, #1]
 80137ae:	2b00      	cmp	r3, #0
 80137b0:	d000      	beq.n	80137b4 <USB_EPStartXfer+0x108>
 80137b2:	e074      	b.n	801389e <USB_EPStartXfer+0x1f2>
 80137b4:	687b      	ldr	r3, [r7, #4]
 80137b6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80137b8:	687b      	ldr	r3, [r7, #4]
 80137ba:	2250      	movs	r2, #80	@ 0x50
 80137bc:	5a9b      	ldrh	r3, [r3, r2]
 80137be:	b29b      	uxth	r3, r3
 80137c0:	001a      	movs	r2, r3
 80137c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80137c4:	189b      	adds	r3, r3, r2
 80137c6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80137c8:	683b      	ldr	r3, [r7, #0]
 80137ca:	781b      	ldrb	r3, [r3, #0]
 80137cc:	00da      	lsls	r2, r3, #3
 80137ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80137d0:	18d3      	adds	r3, r2, r3
 80137d2:	4aae      	ldr	r2, [pc, #696]	@ (8013a8c <USB_EPStartXfer+0x3e0>)
 80137d4:	4694      	mov	ip, r2
 80137d6:	4463      	add	r3, ip
 80137d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80137da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80137dc:	881b      	ldrh	r3, [r3, #0]
 80137de:	b29b      	uxth	r3, r3
 80137e0:	059b      	lsls	r3, r3, #22
 80137e2:	0d9b      	lsrs	r3, r3, #22
 80137e4:	b29a      	uxth	r2, r3
 80137e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80137e8:	801a      	strh	r2, [r3, #0]
 80137ea:	1d7b      	adds	r3, r7, #5
 80137ec:	33ff      	adds	r3, #255	@ 0xff
 80137ee:	681b      	ldr	r3, [r3, #0]
 80137f0:	2b3e      	cmp	r3, #62	@ 0x3e
 80137f2:	d924      	bls.n	801383e <USB_EPStartXfer+0x192>
 80137f4:	1d7b      	adds	r3, r7, #5
 80137f6:	33ff      	adds	r3, #255	@ 0xff
 80137f8:	681b      	ldr	r3, [r3, #0]
 80137fa:	095b      	lsrs	r3, r3, #5
 80137fc:	1c7a      	adds	r2, r7, #1
 80137fe:	32ff      	adds	r2, #255	@ 0xff
 8013800:	6013      	str	r3, [r2, #0]
 8013802:	1d7b      	adds	r3, r7, #5
 8013804:	33ff      	adds	r3, #255	@ 0xff
 8013806:	681b      	ldr	r3, [r3, #0]
 8013808:	221f      	movs	r2, #31
 801380a:	4013      	ands	r3, r2
 801380c:	d106      	bne.n	801381c <USB_EPStartXfer+0x170>
 801380e:	1c7b      	adds	r3, r7, #1
 8013810:	33ff      	adds	r3, #255	@ 0xff
 8013812:	681b      	ldr	r3, [r3, #0]
 8013814:	3b01      	subs	r3, #1
 8013816:	1c7a      	adds	r2, r7, #1
 8013818:	32ff      	adds	r2, #255	@ 0xff
 801381a:	6013      	str	r3, [r2, #0]
 801381c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801381e:	881b      	ldrh	r3, [r3, #0]
 8013820:	b29a      	uxth	r2, r3
 8013822:	1c7b      	adds	r3, r7, #1
 8013824:	33ff      	adds	r3, #255	@ 0xff
 8013826:	681b      	ldr	r3, [r3, #0]
 8013828:	b29b      	uxth	r3, r3
 801382a:	029b      	lsls	r3, r3, #10
 801382c:	b29b      	uxth	r3, r3
 801382e:	4313      	orrs	r3, r2
 8013830:	b29b      	uxth	r3, r3
 8013832:	4a97      	ldr	r2, [pc, #604]	@ (8013a90 <USB_EPStartXfer+0x3e4>)
 8013834:	4313      	orrs	r3, r2
 8013836:	b29a      	uxth	r2, r3
 8013838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801383a:	801a      	strh	r2, [r3, #0]
 801383c:	e04a      	b.n	80138d4 <USB_EPStartXfer+0x228>
 801383e:	1d7b      	adds	r3, r7, #5
 8013840:	33ff      	adds	r3, #255	@ 0xff
 8013842:	681b      	ldr	r3, [r3, #0]
 8013844:	2b00      	cmp	r3, #0
 8013846:	d108      	bne.n	801385a <USB_EPStartXfer+0x1ae>
 8013848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801384a:	881b      	ldrh	r3, [r3, #0]
 801384c:	b29b      	uxth	r3, r3
 801384e:	4a90      	ldr	r2, [pc, #576]	@ (8013a90 <USB_EPStartXfer+0x3e4>)
 8013850:	4313      	orrs	r3, r2
 8013852:	b29a      	uxth	r2, r3
 8013854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013856:	801a      	strh	r2, [r3, #0]
 8013858:	e03c      	b.n	80138d4 <USB_EPStartXfer+0x228>
 801385a:	1d7b      	adds	r3, r7, #5
 801385c:	33ff      	adds	r3, #255	@ 0xff
 801385e:	681b      	ldr	r3, [r3, #0]
 8013860:	085b      	lsrs	r3, r3, #1
 8013862:	1c7a      	adds	r2, r7, #1
 8013864:	32ff      	adds	r2, #255	@ 0xff
 8013866:	6013      	str	r3, [r2, #0]
 8013868:	1d7b      	adds	r3, r7, #5
 801386a:	33ff      	adds	r3, #255	@ 0xff
 801386c:	681b      	ldr	r3, [r3, #0]
 801386e:	2201      	movs	r2, #1
 8013870:	4013      	ands	r3, r2
 8013872:	d006      	beq.n	8013882 <USB_EPStartXfer+0x1d6>
 8013874:	1c7b      	adds	r3, r7, #1
 8013876:	33ff      	adds	r3, #255	@ 0xff
 8013878:	681b      	ldr	r3, [r3, #0]
 801387a:	3301      	adds	r3, #1
 801387c:	1c7a      	adds	r2, r7, #1
 801387e:	32ff      	adds	r2, #255	@ 0xff
 8013880:	6013      	str	r3, [r2, #0]
 8013882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013884:	881b      	ldrh	r3, [r3, #0]
 8013886:	b29a      	uxth	r2, r3
 8013888:	1c7b      	adds	r3, r7, #1
 801388a:	33ff      	adds	r3, #255	@ 0xff
 801388c:	681b      	ldr	r3, [r3, #0]
 801388e:	b29b      	uxth	r3, r3
 8013890:	029b      	lsls	r3, r3, #10
 8013892:	b29b      	uxth	r3, r3
 8013894:	4313      	orrs	r3, r2
 8013896:	b29a      	uxth	r2, r3
 8013898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801389a:	801a      	strh	r2, [r3, #0]
 801389c:	e01a      	b.n	80138d4 <USB_EPStartXfer+0x228>
 801389e:	683b      	ldr	r3, [r7, #0]
 80138a0:	785b      	ldrb	r3, [r3, #1]
 80138a2:	2b01      	cmp	r3, #1
 80138a4:	d116      	bne.n	80138d4 <USB_EPStartXfer+0x228>
 80138a6:	687b      	ldr	r3, [r7, #4]
 80138a8:	2250      	movs	r2, #80	@ 0x50
 80138aa:	5a9b      	ldrh	r3, [r3, r2]
 80138ac:	b29b      	uxth	r3, r3
 80138ae:	001a      	movs	r2, r3
 80138b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80138b2:	189b      	adds	r3, r3, r2
 80138b4:	633b      	str	r3, [r7, #48]	@ 0x30
 80138b6:	683b      	ldr	r3, [r7, #0]
 80138b8:	781b      	ldrb	r3, [r3, #0]
 80138ba:	00da      	lsls	r2, r3, #3
 80138bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80138be:	18d3      	adds	r3, r2, r3
 80138c0:	4a72      	ldr	r2, [pc, #456]	@ (8013a8c <USB_EPStartXfer+0x3e0>)
 80138c2:	4694      	mov	ip, r2
 80138c4:	4463      	add	r3, ip
 80138c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80138c8:	1d7b      	adds	r3, r7, #5
 80138ca:	33ff      	adds	r3, #255	@ 0xff
 80138cc:	681b      	ldr	r3, [r3, #0]
 80138ce:	b29a      	uxth	r2, r3
 80138d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80138d2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80138d4:	2076      	movs	r0, #118	@ 0x76
 80138d6:	183b      	adds	r3, r7, r0
 80138d8:	683a      	ldr	r2, [r7, #0]
 80138da:	8952      	ldrh	r2, [r2, #10]
 80138dc:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80138de:	683b      	ldr	r3, [r7, #0]
 80138e0:	6959      	ldr	r1, [r3, #20]
 80138e2:	1d7b      	adds	r3, r7, #5
 80138e4:	33ff      	adds	r3, #255	@ 0xff
 80138e6:	681b      	ldr	r3, [r3, #0]
 80138e8:	b29c      	uxth	r4, r3
 80138ea:	183b      	adds	r3, r7, r0
 80138ec:	881a      	ldrh	r2, [r3, #0]
 80138ee:	6878      	ldr	r0, [r7, #4]
 80138f0:	0023      	movs	r3, r4
 80138f2:	f001 f94d 	bl	8014b90 <USB_WritePMA>
            ep->xfer_buff += len;
 80138f6:	683b      	ldr	r3, [r7, #0]
 80138f8:	695a      	ldr	r2, [r3, #20]
 80138fa:	1d7b      	adds	r3, r7, #5
 80138fc:	33ff      	adds	r3, #255	@ 0xff
 80138fe:	681b      	ldr	r3, [r3, #0]
 8013900:	18d2      	adds	r2, r2, r3
 8013902:	683b      	ldr	r3, [r7, #0]
 8013904:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8013906:	683b      	ldr	r3, [r7, #0]
 8013908:	6a1a      	ldr	r2, [r3, #32]
 801390a:	683b      	ldr	r3, [r7, #0]
 801390c:	691b      	ldr	r3, [r3, #16]
 801390e:	429a      	cmp	r2, r3
 8013910:	d908      	bls.n	8013924 <USB_EPStartXfer+0x278>
            {
              ep->xfer_len_db -= len;
 8013912:	683b      	ldr	r3, [r7, #0]
 8013914:	6a1a      	ldr	r2, [r3, #32]
 8013916:	1d7b      	adds	r3, r7, #5
 8013918:	33ff      	adds	r3, #255	@ 0xff
 801391a:	681b      	ldr	r3, [r3, #0]
 801391c:	1ad2      	subs	r2, r2, r3
 801391e:	683b      	ldr	r3, [r7, #0]
 8013920:	621a      	str	r2, [r3, #32]
 8013922:	e007      	b.n	8013934 <USB_EPStartXfer+0x288>
            }
            else
            {
              len = ep->xfer_len_db;
 8013924:	683b      	ldr	r3, [r7, #0]
 8013926:	6a1b      	ldr	r3, [r3, #32]
 8013928:	1d7a      	adds	r2, r7, #5
 801392a:	32ff      	adds	r2, #255	@ 0xff
 801392c:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 801392e:	683b      	ldr	r3, [r7, #0]
 8013930:	2200      	movs	r2, #0
 8013932:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8013934:	683b      	ldr	r3, [r7, #0]
 8013936:	785b      	ldrb	r3, [r3, #1]
 8013938:	2b00      	cmp	r3, #0
 801393a:	d000      	beq.n	801393e <USB_EPStartXfer+0x292>
 801393c:	e070      	b.n	8013a20 <USB_EPStartXfer+0x374>
 801393e:	687b      	ldr	r3, [r7, #4]
 8013940:	61bb      	str	r3, [r7, #24]
 8013942:	687b      	ldr	r3, [r7, #4]
 8013944:	2250      	movs	r2, #80	@ 0x50
 8013946:	5a9b      	ldrh	r3, [r3, r2]
 8013948:	b29b      	uxth	r3, r3
 801394a:	001a      	movs	r2, r3
 801394c:	69bb      	ldr	r3, [r7, #24]
 801394e:	189b      	adds	r3, r3, r2
 8013950:	61bb      	str	r3, [r7, #24]
 8013952:	683b      	ldr	r3, [r7, #0]
 8013954:	781b      	ldrb	r3, [r3, #0]
 8013956:	00da      	lsls	r2, r3, #3
 8013958:	69bb      	ldr	r3, [r7, #24]
 801395a:	18d3      	adds	r3, r2, r3
 801395c:	4a48      	ldr	r2, [pc, #288]	@ (8013a80 <USB_EPStartXfer+0x3d4>)
 801395e:	4694      	mov	ip, r2
 8013960:	4463      	add	r3, ip
 8013962:	617b      	str	r3, [r7, #20]
 8013964:	697b      	ldr	r3, [r7, #20]
 8013966:	881b      	ldrh	r3, [r3, #0]
 8013968:	b29b      	uxth	r3, r3
 801396a:	059b      	lsls	r3, r3, #22
 801396c:	0d9b      	lsrs	r3, r3, #22
 801396e:	b29a      	uxth	r2, r3
 8013970:	697b      	ldr	r3, [r7, #20]
 8013972:	801a      	strh	r2, [r3, #0]
 8013974:	1d7b      	adds	r3, r7, #5
 8013976:	33ff      	adds	r3, #255	@ 0xff
 8013978:	681b      	ldr	r3, [r3, #0]
 801397a:	2b3e      	cmp	r3, #62	@ 0x3e
 801397c:	d922      	bls.n	80139c4 <USB_EPStartXfer+0x318>
 801397e:	1d7b      	adds	r3, r7, #5
 8013980:	33ff      	adds	r3, #255	@ 0xff
 8013982:	681b      	ldr	r3, [r3, #0]
 8013984:	095b      	lsrs	r3, r3, #5
 8013986:	21fc      	movs	r1, #252	@ 0xfc
 8013988:	187a      	adds	r2, r7, r1
 801398a:	6013      	str	r3, [r2, #0]
 801398c:	1d7b      	adds	r3, r7, #5
 801398e:	33ff      	adds	r3, #255	@ 0xff
 8013990:	681b      	ldr	r3, [r3, #0]
 8013992:	221f      	movs	r2, #31
 8013994:	4013      	ands	r3, r2
 8013996:	d104      	bne.n	80139a2 <USB_EPStartXfer+0x2f6>
 8013998:	187b      	adds	r3, r7, r1
 801399a:	681b      	ldr	r3, [r3, #0]
 801399c:	3b01      	subs	r3, #1
 801399e:	187a      	adds	r2, r7, r1
 80139a0:	6013      	str	r3, [r2, #0]
 80139a2:	697b      	ldr	r3, [r7, #20]
 80139a4:	881b      	ldrh	r3, [r3, #0]
 80139a6:	b29a      	uxth	r2, r3
 80139a8:	23fc      	movs	r3, #252	@ 0xfc
 80139aa:	18fb      	adds	r3, r7, r3
 80139ac:	681b      	ldr	r3, [r3, #0]
 80139ae:	b29b      	uxth	r3, r3
 80139b0:	029b      	lsls	r3, r3, #10
 80139b2:	b29b      	uxth	r3, r3
 80139b4:	4313      	orrs	r3, r2
 80139b6:	b29b      	uxth	r3, r3
 80139b8:	4a35      	ldr	r2, [pc, #212]	@ (8013a90 <USB_EPStartXfer+0x3e4>)
 80139ba:	4313      	orrs	r3, r2
 80139bc:	b29a      	uxth	r2, r3
 80139be:	697b      	ldr	r3, [r7, #20]
 80139c0:	801a      	strh	r2, [r3, #0]
 80139c2:	e04a      	b.n	8013a5a <USB_EPStartXfer+0x3ae>
 80139c4:	1d7b      	adds	r3, r7, #5
 80139c6:	33ff      	adds	r3, #255	@ 0xff
 80139c8:	681b      	ldr	r3, [r3, #0]
 80139ca:	2b00      	cmp	r3, #0
 80139cc:	d108      	bne.n	80139e0 <USB_EPStartXfer+0x334>
 80139ce:	697b      	ldr	r3, [r7, #20]
 80139d0:	881b      	ldrh	r3, [r3, #0]
 80139d2:	b29b      	uxth	r3, r3
 80139d4:	4a2e      	ldr	r2, [pc, #184]	@ (8013a90 <USB_EPStartXfer+0x3e4>)
 80139d6:	4313      	orrs	r3, r2
 80139d8:	b29a      	uxth	r2, r3
 80139da:	697b      	ldr	r3, [r7, #20]
 80139dc:	801a      	strh	r2, [r3, #0]
 80139de:	e03c      	b.n	8013a5a <USB_EPStartXfer+0x3ae>
 80139e0:	1d7b      	adds	r3, r7, #5
 80139e2:	33ff      	adds	r3, #255	@ 0xff
 80139e4:	681b      	ldr	r3, [r3, #0]
 80139e6:	085b      	lsrs	r3, r3, #1
 80139e8:	21fc      	movs	r1, #252	@ 0xfc
 80139ea:	187a      	adds	r2, r7, r1
 80139ec:	6013      	str	r3, [r2, #0]
 80139ee:	1d7b      	adds	r3, r7, #5
 80139f0:	33ff      	adds	r3, #255	@ 0xff
 80139f2:	681b      	ldr	r3, [r3, #0]
 80139f4:	2201      	movs	r2, #1
 80139f6:	4013      	ands	r3, r2
 80139f8:	d004      	beq.n	8013a04 <USB_EPStartXfer+0x358>
 80139fa:	187b      	adds	r3, r7, r1
 80139fc:	681b      	ldr	r3, [r3, #0]
 80139fe:	3301      	adds	r3, #1
 8013a00:	187a      	adds	r2, r7, r1
 8013a02:	6013      	str	r3, [r2, #0]
 8013a04:	697b      	ldr	r3, [r7, #20]
 8013a06:	881b      	ldrh	r3, [r3, #0]
 8013a08:	b29a      	uxth	r2, r3
 8013a0a:	23fc      	movs	r3, #252	@ 0xfc
 8013a0c:	18fb      	adds	r3, r7, r3
 8013a0e:	681b      	ldr	r3, [r3, #0]
 8013a10:	b29b      	uxth	r3, r3
 8013a12:	029b      	lsls	r3, r3, #10
 8013a14:	b29b      	uxth	r3, r3
 8013a16:	4313      	orrs	r3, r2
 8013a18:	b29a      	uxth	r2, r3
 8013a1a:	697b      	ldr	r3, [r7, #20]
 8013a1c:	801a      	strh	r2, [r3, #0]
 8013a1e:	e01c      	b.n	8013a5a <USB_EPStartXfer+0x3ae>
 8013a20:	683b      	ldr	r3, [r7, #0]
 8013a22:	785b      	ldrb	r3, [r3, #1]
 8013a24:	2b01      	cmp	r3, #1
 8013a26:	d118      	bne.n	8013a5a <USB_EPStartXfer+0x3ae>
 8013a28:	687b      	ldr	r3, [r7, #4]
 8013a2a:	623b      	str	r3, [r7, #32]
 8013a2c:	687b      	ldr	r3, [r7, #4]
 8013a2e:	2250      	movs	r2, #80	@ 0x50
 8013a30:	5a9b      	ldrh	r3, [r3, r2]
 8013a32:	b29b      	uxth	r3, r3
 8013a34:	001a      	movs	r2, r3
 8013a36:	6a3b      	ldr	r3, [r7, #32]
 8013a38:	189b      	adds	r3, r3, r2
 8013a3a:	623b      	str	r3, [r7, #32]
 8013a3c:	683b      	ldr	r3, [r7, #0]
 8013a3e:	781b      	ldrb	r3, [r3, #0]
 8013a40:	00da      	lsls	r2, r3, #3
 8013a42:	6a3b      	ldr	r3, [r7, #32]
 8013a44:	18d3      	adds	r3, r2, r3
 8013a46:	4a0e      	ldr	r2, [pc, #56]	@ (8013a80 <USB_EPStartXfer+0x3d4>)
 8013a48:	4694      	mov	ip, r2
 8013a4a:	4463      	add	r3, ip
 8013a4c:	61fb      	str	r3, [r7, #28]
 8013a4e:	1d7b      	adds	r3, r7, #5
 8013a50:	33ff      	adds	r3, #255	@ 0xff
 8013a52:	681b      	ldr	r3, [r3, #0]
 8013a54:	b29a      	uxth	r2, r3
 8013a56:	69fb      	ldr	r3, [r7, #28]
 8013a58:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8013a5a:	2076      	movs	r0, #118	@ 0x76
 8013a5c:	183b      	adds	r3, r7, r0
 8013a5e:	683a      	ldr	r2, [r7, #0]
 8013a60:	8912      	ldrh	r2, [r2, #8]
 8013a62:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8013a64:	683b      	ldr	r3, [r7, #0]
 8013a66:	6959      	ldr	r1, [r3, #20]
 8013a68:	1d7b      	adds	r3, r7, #5
 8013a6a:	33ff      	adds	r3, #255	@ 0xff
 8013a6c:	681b      	ldr	r3, [r3, #0]
 8013a6e:	b29c      	uxth	r4, r3
 8013a70:	183b      	adds	r3, r7, r0
 8013a72:	881a      	ldrh	r2, [r3, #0]
 8013a74:	6878      	ldr	r0, [r7, #4]
 8013a76:	0023      	movs	r3, r4
 8013a78:	f001 f88a 	bl	8014b90 <USB_WritePMA>
 8013a7c:	e329      	b.n	80140d2 <USB_EPStartXfer+0xa26>
 8013a7e:	46c0      	nop			@ (mov r8, r8)
 8013a80:	00000402 	.word	0x00000402
 8013a84:	ffff8f8f 	.word	0xffff8f8f
 8013a88:	ffff8180 	.word	0xffff8180
 8013a8c:	00000406 	.word	0x00000406
 8013a90:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8013a94:	683b      	ldr	r3, [r7, #0]
 8013a96:	785b      	ldrb	r3, [r3, #1]
 8013a98:	2b00      	cmp	r3, #0
 8013a9a:	d000      	beq.n	8013a9e <USB_EPStartXfer+0x3f2>
 8013a9c:	e070      	b.n	8013b80 <USB_EPStartXfer+0x4d4>
 8013a9e:	687b      	ldr	r3, [r7, #4]
 8013aa0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8013aa2:	687b      	ldr	r3, [r7, #4]
 8013aa4:	2250      	movs	r2, #80	@ 0x50
 8013aa6:	5a9b      	ldrh	r3, [r3, r2]
 8013aa8:	b29b      	uxth	r3, r3
 8013aaa:	001a      	movs	r2, r3
 8013aac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013aae:	189b      	adds	r3, r3, r2
 8013ab0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8013ab2:	683b      	ldr	r3, [r7, #0]
 8013ab4:	781b      	ldrb	r3, [r3, #0]
 8013ab6:	00da      	lsls	r2, r3, #3
 8013ab8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013aba:	18d3      	adds	r3, r2, r3
 8013abc:	4acd      	ldr	r2, [pc, #820]	@ (8013df4 <USB_EPStartXfer+0x748>)
 8013abe:	4694      	mov	ip, r2
 8013ac0:	4463      	add	r3, ip
 8013ac2:	647b      	str	r3, [r7, #68]	@ 0x44
 8013ac4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013ac6:	881b      	ldrh	r3, [r3, #0]
 8013ac8:	b29b      	uxth	r3, r3
 8013aca:	059b      	lsls	r3, r3, #22
 8013acc:	0d9b      	lsrs	r3, r3, #22
 8013ace:	b29a      	uxth	r2, r3
 8013ad0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013ad2:	801a      	strh	r2, [r3, #0]
 8013ad4:	1d7b      	adds	r3, r7, #5
 8013ad6:	33ff      	adds	r3, #255	@ 0xff
 8013ad8:	681b      	ldr	r3, [r3, #0]
 8013ada:	2b3e      	cmp	r3, #62	@ 0x3e
 8013adc:	d922      	bls.n	8013b24 <USB_EPStartXfer+0x478>
 8013ade:	1d7b      	adds	r3, r7, #5
 8013ae0:	33ff      	adds	r3, #255	@ 0xff
 8013ae2:	681b      	ldr	r3, [r3, #0]
 8013ae4:	095b      	lsrs	r3, r3, #5
 8013ae6:	21f8      	movs	r1, #248	@ 0xf8
 8013ae8:	187a      	adds	r2, r7, r1
 8013aea:	6013      	str	r3, [r2, #0]
 8013aec:	1d7b      	adds	r3, r7, #5
 8013aee:	33ff      	adds	r3, #255	@ 0xff
 8013af0:	681b      	ldr	r3, [r3, #0]
 8013af2:	221f      	movs	r2, #31
 8013af4:	4013      	ands	r3, r2
 8013af6:	d104      	bne.n	8013b02 <USB_EPStartXfer+0x456>
 8013af8:	187b      	adds	r3, r7, r1
 8013afa:	681b      	ldr	r3, [r3, #0]
 8013afc:	3b01      	subs	r3, #1
 8013afe:	187a      	adds	r2, r7, r1
 8013b00:	6013      	str	r3, [r2, #0]
 8013b02:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013b04:	881b      	ldrh	r3, [r3, #0]
 8013b06:	b29a      	uxth	r2, r3
 8013b08:	23f8      	movs	r3, #248	@ 0xf8
 8013b0a:	18fb      	adds	r3, r7, r3
 8013b0c:	681b      	ldr	r3, [r3, #0]
 8013b0e:	b29b      	uxth	r3, r3
 8013b10:	029b      	lsls	r3, r3, #10
 8013b12:	b29b      	uxth	r3, r3
 8013b14:	4313      	orrs	r3, r2
 8013b16:	b29b      	uxth	r3, r3
 8013b18:	4ab7      	ldr	r2, [pc, #732]	@ (8013df8 <USB_EPStartXfer+0x74c>)
 8013b1a:	4313      	orrs	r3, r2
 8013b1c:	b29a      	uxth	r2, r3
 8013b1e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013b20:	801a      	strh	r2, [r3, #0]
 8013b22:	e04a      	b.n	8013bba <USB_EPStartXfer+0x50e>
 8013b24:	1d7b      	adds	r3, r7, #5
 8013b26:	33ff      	adds	r3, #255	@ 0xff
 8013b28:	681b      	ldr	r3, [r3, #0]
 8013b2a:	2b00      	cmp	r3, #0
 8013b2c:	d108      	bne.n	8013b40 <USB_EPStartXfer+0x494>
 8013b2e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013b30:	881b      	ldrh	r3, [r3, #0]
 8013b32:	b29b      	uxth	r3, r3
 8013b34:	4ab0      	ldr	r2, [pc, #704]	@ (8013df8 <USB_EPStartXfer+0x74c>)
 8013b36:	4313      	orrs	r3, r2
 8013b38:	b29a      	uxth	r2, r3
 8013b3a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013b3c:	801a      	strh	r2, [r3, #0]
 8013b3e:	e03c      	b.n	8013bba <USB_EPStartXfer+0x50e>
 8013b40:	1d7b      	adds	r3, r7, #5
 8013b42:	33ff      	adds	r3, #255	@ 0xff
 8013b44:	681b      	ldr	r3, [r3, #0]
 8013b46:	085b      	lsrs	r3, r3, #1
 8013b48:	21f8      	movs	r1, #248	@ 0xf8
 8013b4a:	187a      	adds	r2, r7, r1
 8013b4c:	6013      	str	r3, [r2, #0]
 8013b4e:	1d7b      	adds	r3, r7, #5
 8013b50:	33ff      	adds	r3, #255	@ 0xff
 8013b52:	681b      	ldr	r3, [r3, #0]
 8013b54:	2201      	movs	r2, #1
 8013b56:	4013      	ands	r3, r2
 8013b58:	d004      	beq.n	8013b64 <USB_EPStartXfer+0x4b8>
 8013b5a:	187b      	adds	r3, r7, r1
 8013b5c:	681b      	ldr	r3, [r3, #0]
 8013b5e:	3301      	adds	r3, #1
 8013b60:	187a      	adds	r2, r7, r1
 8013b62:	6013      	str	r3, [r2, #0]
 8013b64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013b66:	881b      	ldrh	r3, [r3, #0]
 8013b68:	b29a      	uxth	r2, r3
 8013b6a:	23f8      	movs	r3, #248	@ 0xf8
 8013b6c:	18fb      	adds	r3, r7, r3
 8013b6e:	681b      	ldr	r3, [r3, #0]
 8013b70:	b29b      	uxth	r3, r3
 8013b72:	029b      	lsls	r3, r3, #10
 8013b74:	b29b      	uxth	r3, r3
 8013b76:	4313      	orrs	r3, r2
 8013b78:	b29a      	uxth	r2, r3
 8013b7a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013b7c:	801a      	strh	r2, [r3, #0]
 8013b7e:	e01c      	b.n	8013bba <USB_EPStartXfer+0x50e>
 8013b80:	683b      	ldr	r3, [r7, #0]
 8013b82:	785b      	ldrb	r3, [r3, #1]
 8013b84:	2b01      	cmp	r3, #1
 8013b86:	d118      	bne.n	8013bba <USB_EPStartXfer+0x50e>
 8013b88:	687b      	ldr	r3, [r7, #4]
 8013b8a:	653b      	str	r3, [r7, #80]	@ 0x50
 8013b8c:	687b      	ldr	r3, [r7, #4]
 8013b8e:	2250      	movs	r2, #80	@ 0x50
 8013b90:	5a9b      	ldrh	r3, [r3, r2]
 8013b92:	b29b      	uxth	r3, r3
 8013b94:	001a      	movs	r2, r3
 8013b96:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013b98:	189b      	adds	r3, r3, r2
 8013b9a:	653b      	str	r3, [r7, #80]	@ 0x50
 8013b9c:	683b      	ldr	r3, [r7, #0]
 8013b9e:	781b      	ldrb	r3, [r3, #0]
 8013ba0:	00da      	lsls	r2, r3, #3
 8013ba2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013ba4:	18d3      	adds	r3, r2, r3
 8013ba6:	4a93      	ldr	r2, [pc, #588]	@ (8013df4 <USB_EPStartXfer+0x748>)
 8013ba8:	4694      	mov	ip, r2
 8013baa:	4463      	add	r3, ip
 8013bac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8013bae:	1d7b      	adds	r3, r7, #5
 8013bb0:	33ff      	adds	r3, #255	@ 0xff
 8013bb2:	681b      	ldr	r3, [r3, #0]
 8013bb4:	b29a      	uxth	r2, r3
 8013bb6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013bb8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8013bba:	2076      	movs	r0, #118	@ 0x76
 8013bbc:	183b      	adds	r3, r7, r0
 8013bbe:	683a      	ldr	r2, [r7, #0]
 8013bc0:	8912      	ldrh	r2, [r2, #8]
 8013bc2:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8013bc4:	683b      	ldr	r3, [r7, #0]
 8013bc6:	6959      	ldr	r1, [r3, #20]
 8013bc8:	1d7b      	adds	r3, r7, #5
 8013bca:	33ff      	adds	r3, #255	@ 0xff
 8013bcc:	681b      	ldr	r3, [r3, #0]
 8013bce:	b29c      	uxth	r4, r3
 8013bd0:	183b      	adds	r3, r7, r0
 8013bd2:	881a      	ldrh	r2, [r3, #0]
 8013bd4:	6878      	ldr	r0, [r7, #4]
 8013bd6:	0023      	movs	r3, r4
 8013bd8:	f000 ffda 	bl	8014b90 <USB_WritePMA>
            ep->xfer_buff += len;
 8013bdc:	683b      	ldr	r3, [r7, #0]
 8013bde:	695a      	ldr	r2, [r3, #20]
 8013be0:	1d7b      	adds	r3, r7, #5
 8013be2:	33ff      	adds	r3, #255	@ 0xff
 8013be4:	681b      	ldr	r3, [r3, #0]
 8013be6:	18d2      	adds	r2, r2, r3
 8013be8:	683b      	ldr	r3, [r7, #0]
 8013bea:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8013bec:	683b      	ldr	r3, [r7, #0]
 8013bee:	6a1a      	ldr	r2, [r3, #32]
 8013bf0:	683b      	ldr	r3, [r7, #0]
 8013bf2:	691b      	ldr	r3, [r3, #16]
 8013bf4:	429a      	cmp	r2, r3
 8013bf6:	d908      	bls.n	8013c0a <USB_EPStartXfer+0x55e>
            {
              ep->xfer_len_db -= len;
 8013bf8:	683b      	ldr	r3, [r7, #0]
 8013bfa:	6a1a      	ldr	r2, [r3, #32]
 8013bfc:	1d7b      	adds	r3, r7, #5
 8013bfe:	33ff      	adds	r3, #255	@ 0xff
 8013c00:	681b      	ldr	r3, [r3, #0]
 8013c02:	1ad2      	subs	r2, r2, r3
 8013c04:	683b      	ldr	r3, [r7, #0]
 8013c06:	621a      	str	r2, [r3, #32]
 8013c08:	e007      	b.n	8013c1a <USB_EPStartXfer+0x56e>
            }
            else
            {
              len = ep->xfer_len_db;
 8013c0a:	683b      	ldr	r3, [r7, #0]
 8013c0c:	6a1b      	ldr	r3, [r3, #32]
 8013c0e:	1d7a      	adds	r2, r7, #5
 8013c10:	32ff      	adds	r2, #255	@ 0xff
 8013c12:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8013c14:	683b      	ldr	r3, [r7, #0]
 8013c16:	2200      	movs	r2, #0
 8013c18:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8013c1a:	687b      	ldr	r3, [r7, #4]
 8013c1c:	643b      	str	r3, [r7, #64]	@ 0x40
 8013c1e:	683b      	ldr	r3, [r7, #0]
 8013c20:	785b      	ldrb	r3, [r3, #1]
 8013c22:	2b00      	cmp	r3, #0
 8013c24:	d000      	beq.n	8013c28 <USB_EPStartXfer+0x57c>
 8013c26:	e070      	b.n	8013d0a <USB_EPStartXfer+0x65e>
 8013c28:	687b      	ldr	r3, [r7, #4]
 8013c2a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8013c2c:	687b      	ldr	r3, [r7, #4]
 8013c2e:	2250      	movs	r2, #80	@ 0x50
 8013c30:	5a9b      	ldrh	r3, [r3, r2]
 8013c32:	b29b      	uxth	r3, r3
 8013c34:	001a      	movs	r2, r3
 8013c36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013c38:	189b      	adds	r3, r3, r2
 8013c3a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8013c3c:	683b      	ldr	r3, [r7, #0]
 8013c3e:	781b      	ldrb	r3, [r3, #0]
 8013c40:	00da      	lsls	r2, r3, #3
 8013c42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013c44:	18d3      	adds	r3, r2, r3
 8013c46:	4a6d      	ldr	r2, [pc, #436]	@ (8013dfc <USB_EPStartXfer+0x750>)
 8013c48:	4694      	mov	ip, r2
 8013c4a:	4463      	add	r3, ip
 8013c4c:	637b      	str	r3, [r7, #52]	@ 0x34
 8013c4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013c50:	881b      	ldrh	r3, [r3, #0]
 8013c52:	b29b      	uxth	r3, r3
 8013c54:	059b      	lsls	r3, r3, #22
 8013c56:	0d9b      	lsrs	r3, r3, #22
 8013c58:	b29a      	uxth	r2, r3
 8013c5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013c5c:	801a      	strh	r2, [r3, #0]
 8013c5e:	1d7b      	adds	r3, r7, #5
 8013c60:	33ff      	adds	r3, #255	@ 0xff
 8013c62:	681b      	ldr	r3, [r3, #0]
 8013c64:	2b3e      	cmp	r3, #62	@ 0x3e
 8013c66:	d922      	bls.n	8013cae <USB_EPStartXfer+0x602>
 8013c68:	1d7b      	adds	r3, r7, #5
 8013c6a:	33ff      	adds	r3, #255	@ 0xff
 8013c6c:	681b      	ldr	r3, [r3, #0]
 8013c6e:	095b      	lsrs	r3, r3, #5
 8013c70:	21f4      	movs	r1, #244	@ 0xf4
 8013c72:	187a      	adds	r2, r7, r1
 8013c74:	6013      	str	r3, [r2, #0]
 8013c76:	1d7b      	adds	r3, r7, #5
 8013c78:	33ff      	adds	r3, #255	@ 0xff
 8013c7a:	681b      	ldr	r3, [r3, #0]
 8013c7c:	221f      	movs	r2, #31
 8013c7e:	4013      	ands	r3, r2
 8013c80:	d104      	bne.n	8013c8c <USB_EPStartXfer+0x5e0>
 8013c82:	187b      	adds	r3, r7, r1
 8013c84:	681b      	ldr	r3, [r3, #0]
 8013c86:	3b01      	subs	r3, #1
 8013c88:	187a      	adds	r2, r7, r1
 8013c8a:	6013      	str	r3, [r2, #0]
 8013c8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013c8e:	881b      	ldrh	r3, [r3, #0]
 8013c90:	b29a      	uxth	r2, r3
 8013c92:	23f4      	movs	r3, #244	@ 0xf4
 8013c94:	18fb      	adds	r3, r7, r3
 8013c96:	681b      	ldr	r3, [r3, #0]
 8013c98:	b29b      	uxth	r3, r3
 8013c9a:	029b      	lsls	r3, r3, #10
 8013c9c:	b29b      	uxth	r3, r3
 8013c9e:	4313      	orrs	r3, r2
 8013ca0:	b29b      	uxth	r3, r3
 8013ca2:	4a55      	ldr	r2, [pc, #340]	@ (8013df8 <USB_EPStartXfer+0x74c>)
 8013ca4:	4313      	orrs	r3, r2
 8013ca6:	b29a      	uxth	r2, r3
 8013ca8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013caa:	801a      	strh	r2, [r3, #0]
 8013cac:	e048      	b.n	8013d40 <USB_EPStartXfer+0x694>
 8013cae:	1d7b      	adds	r3, r7, #5
 8013cb0:	33ff      	adds	r3, #255	@ 0xff
 8013cb2:	681b      	ldr	r3, [r3, #0]
 8013cb4:	2b00      	cmp	r3, #0
 8013cb6:	d108      	bne.n	8013cca <USB_EPStartXfer+0x61e>
 8013cb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013cba:	881b      	ldrh	r3, [r3, #0]
 8013cbc:	b29b      	uxth	r3, r3
 8013cbe:	4a4e      	ldr	r2, [pc, #312]	@ (8013df8 <USB_EPStartXfer+0x74c>)
 8013cc0:	4313      	orrs	r3, r2
 8013cc2:	b29a      	uxth	r2, r3
 8013cc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013cc6:	801a      	strh	r2, [r3, #0]
 8013cc8:	e03a      	b.n	8013d40 <USB_EPStartXfer+0x694>
 8013cca:	1d7b      	adds	r3, r7, #5
 8013ccc:	33ff      	adds	r3, #255	@ 0xff
 8013cce:	681b      	ldr	r3, [r3, #0]
 8013cd0:	085b      	lsrs	r3, r3, #1
 8013cd2:	21f4      	movs	r1, #244	@ 0xf4
 8013cd4:	187a      	adds	r2, r7, r1
 8013cd6:	6013      	str	r3, [r2, #0]
 8013cd8:	1d7b      	adds	r3, r7, #5
 8013cda:	33ff      	adds	r3, #255	@ 0xff
 8013cdc:	681b      	ldr	r3, [r3, #0]
 8013cde:	2201      	movs	r2, #1
 8013ce0:	4013      	ands	r3, r2
 8013ce2:	d004      	beq.n	8013cee <USB_EPStartXfer+0x642>
 8013ce4:	187b      	adds	r3, r7, r1
 8013ce6:	681b      	ldr	r3, [r3, #0]
 8013ce8:	3301      	adds	r3, #1
 8013cea:	187a      	adds	r2, r7, r1
 8013cec:	6013      	str	r3, [r2, #0]
 8013cee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013cf0:	881b      	ldrh	r3, [r3, #0]
 8013cf2:	b29a      	uxth	r2, r3
 8013cf4:	23f4      	movs	r3, #244	@ 0xf4
 8013cf6:	18fb      	adds	r3, r7, r3
 8013cf8:	681b      	ldr	r3, [r3, #0]
 8013cfa:	b29b      	uxth	r3, r3
 8013cfc:	029b      	lsls	r3, r3, #10
 8013cfe:	b29b      	uxth	r3, r3
 8013d00:	4313      	orrs	r3, r2
 8013d02:	b29a      	uxth	r2, r3
 8013d04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013d06:	801a      	strh	r2, [r3, #0]
 8013d08:	e01a      	b.n	8013d40 <USB_EPStartXfer+0x694>
 8013d0a:	683b      	ldr	r3, [r7, #0]
 8013d0c:	785b      	ldrb	r3, [r3, #1]
 8013d0e:	2b01      	cmp	r3, #1
 8013d10:	d116      	bne.n	8013d40 <USB_EPStartXfer+0x694>
 8013d12:	687b      	ldr	r3, [r7, #4]
 8013d14:	2250      	movs	r2, #80	@ 0x50
 8013d16:	5a9b      	ldrh	r3, [r3, r2]
 8013d18:	b29b      	uxth	r3, r3
 8013d1a:	001a      	movs	r2, r3
 8013d1c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013d1e:	189b      	adds	r3, r3, r2
 8013d20:	643b      	str	r3, [r7, #64]	@ 0x40
 8013d22:	683b      	ldr	r3, [r7, #0]
 8013d24:	781b      	ldrb	r3, [r3, #0]
 8013d26:	00da      	lsls	r2, r3, #3
 8013d28:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013d2a:	18d3      	adds	r3, r2, r3
 8013d2c:	4a33      	ldr	r2, [pc, #204]	@ (8013dfc <USB_EPStartXfer+0x750>)
 8013d2e:	4694      	mov	ip, r2
 8013d30:	4463      	add	r3, ip
 8013d32:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013d34:	1d7b      	adds	r3, r7, #5
 8013d36:	33ff      	adds	r3, #255	@ 0xff
 8013d38:	681b      	ldr	r3, [r3, #0]
 8013d3a:	b29a      	uxth	r2, r3
 8013d3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013d3e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8013d40:	2076      	movs	r0, #118	@ 0x76
 8013d42:	183b      	adds	r3, r7, r0
 8013d44:	683a      	ldr	r2, [r7, #0]
 8013d46:	8952      	ldrh	r2, [r2, #10]
 8013d48:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8013d4a:	683b      	ldr	r3, [r7, #0]
 8013d4c:	6959      	ldr	r1, [r3, #20]
 8013d4e:	1d7b      	adds	r3, r7, #5
 8013d50:	33ff      	adds	r3, #255	@ 0xff
 8013d52:	681b      	ldr	r3, [r3, #0]
 8013d54:	b29c      	uxth	r4, r3
 8013d56:	183b      	adds	r3, r7, r0
 8013d58:	881a      	ldrh	r2, [r3, #0]
 8013d5a:	6878      	ldr	r0, [r7, #4]
 8013d5c:	0023      	movs	r3, r4
 8013d5e:	f000 ff17 	bl	8014b90 <USB_WritePMA>
 8013d62:	e1b6      	b.n	80140d2 <USB_EPStartXfer+0xa26>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8013d64:	683b      	ldr	r3, [r7, #0]
 8013d66:	6a1b      	ldr	r3, [r3, #32]
 8013d68:	1d7a      	adds	r2, r7, #5
 8013d6a:	32ff      	adds	r2, #255	@ 0xff
 8013d6c:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8013d6e:	687a      	ldr	r2, [r7, #4]
 8013d70:	683b      	ldr	r3, [r7, #0]
 8013d72:	781b      	ldrb	r3, [r3, #0]
 8013d74:	009b      	lsls	r3, r3, #2
 8013d76:	18d3      	adds	r3, r2, r3
 8013d78:	881b      	ldrh	r3, [r3, #0]
 8013d7a:	b29a      	uxth	r2, r3
 8013d7c:	2062      	movs	r0, #98	@ 0x62
 8013d7e:	183b      	adds	r3, r7, r0
 8013d80:	491f      	ldr	r1, [pc, #124]	@ (8013e00 <USB_EPStartXfer+0x754>)
 8013d82:	400a      	ands	r2, r1
 8013d84:	801a      	strh	r2, [r3, #0]
 8013d86:	687a      	ldr	r2, [r7, #4]
 8013d88:	683b      	ldr	r3, [r7, #0]
 8013d8a:	781b      	ldrb	r3, [r3, #0]
 8013d8c:	009b      	lsls	r3, r3, #2
 8013d8e:	18d3      	adds	r3, r2, r3
 8013d90:	183a      	adds	r2, r7, r0
 8013d92:	8812      	ldrh	r2, [r2, #0]
 8013d94:	491b      	ldr	r1, [pc, #108]	@ (8013e04 <USB_EPStartXfer+0x758>)
 8013d96:	430a      	orrs	r2, r1
 8013d98:	b292      	uxth	r2, r2
 8013d9a:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8013d9c:	687b      	ldr	r3, [r7, #4]
 8013d9e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8013da0:	687b      	ldr	r3, [r7, #4]
 8013da2:	2250      	movs	r2, #80	@ 0x50
 8013da4:	5a9b      	ldrh	r3, [r3, r2]
 8013da6:	b29b      	uxth	r3, r3
 8013da8:	001a      	movs	r2, r3
 8013daa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013dac:	189b      	adds	r3, r3, r2
 8013dae:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8013db0:	683b      	ldr	r3, [r7, #0]
 8013db2:	781b      	ldrb	r3, [r3, #0]
 8013db4:	00da      	lsls	r2, r3, #3
 8013db6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013db8:	18d3      	adds	r3, r2, r3
 8013dba:	4a0e      	ldr	r2, [pc, #56]	@ (8013df4 <USB_EPStartXfer+0x748>)
 8013dbc:	4694      	mov	ip, r2
 8013dbe:	4463      	add	r3, ip
 8013dc0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8013dc2:	1d7b      	adds	r3, r7, #5
 8013dc4:	33ff      	adds	r3, #255	@ 0xff
 8013dc6:	681b      	ldr	r3, [r3, #0]
 8013dc8:	b29a      	uxth	r2, r3
 8013dca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013dcc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8013dce:	2076      	movs	r0, #118	@ 0x76
 8013dd0:	183b      	adds	r3, r7, r0
 8013dd2:	683a      	ldr	r2, [r7, #0]
 8013dd4:	8912      	ldrh	r2, [r2, #8]
 8013dd6:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8013dd8:	683b      	ldr	r3, [r7, #0]
 8013dda:	6959      	ldr	r1, [r3, #20]
 8013ddc:	1d7b      	adds	r3, r7, #5
 8013dde:	33ff      	adds	r3, #255	@ 0xff
 8013de0:	681b      	ldr	r3, [r3, #0]
 8013de2:	b29c      	uxth	r4, r3
 8013de4:	183b      	adds	r3, r7, r0
 8013de6:	881a      	ldrh	r2, [r3, #0]
 8013de8:	6878      	ldr	r0, [r7, #4]
 8013dea:	0023      	movs	r3, r4
 8013dec:	f000 fed0 	bl	8014b90 <USB_WritePMA>
 8013df0:	e16f      	b.n	80140d2 <USB_EPStartXfer+0xa26>
 8013df2:	46c0      	nop			@ (mov r8, r8)
 8013df4:	00000402 	.word	0x00000402
 8013df8:	ffff8000 	.word	0xffff8000
 8013dfc:	00000406 	.word	0x00000406
 8013e00:	ffff8e8f 	.word	0xffff8e8f
 8013e04:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8013e08:	683b      	ldr	r3, [r7, #0]
 8013e0a:	6a1a      	ldr	r2, [r3, #32]
 8013e0c:	1d7b      	adds	r3, r7, #5
 8013e0e:	33ff      	adds	r3, #255	@ 0xff
 8013e10:	681b      	ldr	r3, [r3, #0]
 8013e12:	1ad2      	subs	r2, r2, r3
 8013e14:	683b      	ldr	r3, [r7, #0]
 8013e16:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8013e18:	687a      	ldr	r2, [r7, #4]
 8013e1a:	683b      	ldr	r3, [r7, #0]
 8013e1c:	781b      	ldrb	r3, [r3, #0]
 8013e1e:	009b      	lsls	r3, r3, #2
 8013e20:	18d3      	adds	r3, r2, r3
 8013e22:	881b      	ldrh	r3, [r3, #0]
 8013e24:	b29b      	uxth	r3, r3
 8013e26:	001a      	movs	r2, r3
 8013e28:	2340      	movs	r3, #64	@ 0x40
 8013e2a:	4013      	ands	r3, r2
 8013e2c:	d100      	bne.n	8013e30 <USB_EPStartXfer+0x784>
 8013e2e:	e0a4      	b.n	8013f7a <USB_EPStartXfer+0x8ce>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8013e30:	687b      	ldr	r3, [r7, #4]
 8013e32:	673b      	str	r3, [r7, #112]	@ 0x70
 8013e34:	683b      	ldr	r3, [r7, #0]
 8013e36:	785b      	ldrb	r3, [r3, #1]
 8013e38:	2b00      	cmp	r3, #0
 8013e3a:	d000      	beq.n	8013e3e <USB_EPStartXfer+0x792>
 8013e3c:	e070      	b.n	8013f20 <USB_EPStartXfer+0x874>
 8013e3e:	687b      	ldr	r3, [r7, #4]
 8013e40:	66bb      	str	r3, [r7, #104]	@ 0x68
 8013e42:	687b      	ldr	r3, [r7, #4]
 8013e44:	2250      	movs	r2, #80	@ 0x50
 8013e46:	5a9b      	ldrh	r3, [r3, r2]
 8013e48:	b29b      	uxth	r3, r3
 8013e4a:	001a      	movs	r2, r3
 8013e4c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8013e4e:	189b      	adds	r3, r3, r2
 8013e50:	66bb      	str	r3, [r7, #104]	@ 0x68
 8013e52:	683b      	ldr	r3, [r7, #0]
 8013e54:	781b      	ldrb	r3, [r3, #0]
 8013e56:	00da      	lsls	r2, r3, #3
 8013e58:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8013e5a:	18d3      	adds	r3, r2, r3
 8013e5c:	4abc      	ldr	r2, [pc, #752]	@ (8014150 <USB_EPStartXfer+0xaa4>)
 8013e5e:	4694      	mov	ip, r2
 8013e60:	4463      	add	r3, ip
 8013e62:	667b      	str	r3, [r7, #100]	@ 0x64
 8013e64:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8013e66:	881b      	ldrh	r3, [r3, #0]
 8013e68:	b29b      	uxth	r3, r3
 8013e6a:	059b      	lsls	r3, r3, #22
 8013e6c:	0d9b      	lsrs	r3, r3, #22
 8013e6e:	b29a      	uxth	r2, r3
 8013e70:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8013e72:	801a      	strh	r2, [r3, #0]
 8013e74:	1d7b      	adds	r3, r7, #5
 8013e76:	33ff      	adds	r3, #255	@ 0xff
 8013e78:	681b      	ldr	r3, [r3, #0]
 8013e7a:	2b3e      	cmp	r3, #62	@ 0x3e
 8013e7c:	d922      	bls.n	8013ec4 <USB_EPStartXfer+0x818>
 8013e7e:	1d7b      	adds	r3, r7, #5
 8013e80:	33ff      	adds	r3, #255	@ 0xff
 8013e82:	681b      	ldr	r3, [r3, #0]
 8013e84:	095b      	lsrs	r3, r3, #5
 8013e86:	21f0      	movs	r1, #240	@ 0xf0
 8013e88:	187a      	adds	r2, r7, r1
 8013e8a:	6013      	str	r3, [r2, #0]
 8013e8c:	1d7b      	adds	r3, r7, #5
 8013e8e:	33ff      	adds	r3, #255	@ 0xff
 8013e90:	681b      	ldr	r3, [r3, #0]
 8013e92:	221f      	movs	r2, #31
 8013e94:	4013      	ands	r3, r2
 8013e96:	d104      	bne.n	8013ea2 <USB_EPStartXfer+0x7f6>
 8013e98:	187b      	adds	r3, r7, r1
 8013e9a:	681b      	ldr	r3, [r3, #0]
 8013e9c:	3b01      	subs	r3, #1
 8013e9e:	187a      	adds	r2, r7, r1
 8013ea0:	6013      	str	r3, [r2, #0]
 8013ea2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8013ea4:	881b      	ldrh	r3, [r3, #0]
 8013ea6:	b29a      	uxth	r2, r3
 8013ea8:	23f0      	movs	r3, #240	@ 0xf0
 8013eaa:	18fb      	adds	r3, r7, r3
 8013eac:	681b      	ldr	r3, [r3, #0]
 8013eae:	b29b      	uxth	r3, r3
 8013eb0:	029b      	lsls	r3, r3, #10
 8013eb2:	b29b      	uxth	r3, r3
 8013eb4:	4313      	orrs	r3, r2
 8013eb6:	b29b      	uxth	r3, r3
 8013eb8:	4aa6      	ldr	r2, [pc, #664]	@ (8014154 <USB_EPStartXfer+0xaa8>)
 8013eba:	4313      	orrs	r3, r2
 8013ebc:	b29a      	uxth	r2, r3
 8013ebe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8013ec0:	801a      	strh	r2, [r3, #0]
 8013ec2:	e048      	b.n	8013f56 <USB_EPStartXfer+0x8aa>
 8013ec4:	1d7b      	adds	r3, r7, #5
 8013ec6:	33ff      	adds	r3, #255	@ 0xff
 8013ec8:	681b      	ldr	r3, [r3, #0]
 8013eca:	2b00      	cmp	r3, #0
 8013ecc:	d108      	bne.n	8013ee0 <USB_EPStartXfer+0x834>
 8013ece:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8013ed0:	881b      	ldrh	r3, [r3, #0]
 8013ed2:	b29b      	uxth	r3, r3
 8013ed4:	4a9f      	ldr	r2, [pc, #636]	@ (8014154 <USB_EPStartXfer+0xaa8>)
 8013ed6:	4313      	orrs	r3, r2
 8013ed8:	b29a      	uxth	r2, r3
 8013eda:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8013edc:	801a      	strh	r2, [r3, #0]
 8013ede:	e03a      	b.n	8013f56 <USB_EPStartXfer+0x8aa>
 8013ee0:	1d7b      	adds	r3, r7, #5
 8013ee2:	33ff      	adds	r3, #255	@ 0xff
 8013ee4:	681b      	ldr	r3, [r3, #0]
 8013ee6:	085b      	lsrs	r3, r3, #1
 8013ee8:	21f0      	movs	r1, #240	@ 0xf0
 8013eea:	187a      	adds	r2, r7, r1
 8013eec:	6013      	str	r3, [r2, #0]
 8013eee:	1d7b      	adds	r3, r7, #5
 8013ef0:	33ff      	adds	r3, #255	@ 0xff
 8013ef2:	681b      	ldr	r3, [r3, #0]
 8013ef4:	2201      	movs	r2, #1
 8013ef6:	4013      	ands	r3, r2
 8013ef8:	d004      	beq.n	8013f04 <USB_EPStartXfer+0x858>
 8013efa:	187b      	adds	r3, r7, r1
 8013efc:	681b      	ldr	r3, [r3, #0]
 8013efe:	3301      	adds	r3, #1
 8013f00:	187a      	adds	r2, r7, r1
 8013f02:	6013      	str	r3, [r2, #0]
 8013f04:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8013f06:	881b      	ldrh	r3, [r3, #0]
 8013f08:	b29a      	uxth	r2, r3
 8013f0a:	23f0      	movs	r3, #240	@ 0xf0
 8013f0c:	18fb      	adds	r3, r7, r3
 8013f0e:	681b      	ldr	r3, [r3, #0]
 8013f10:	b29b      	uxth	r3, r3
 8013f12:	029b      	lsls	r3, r3, #10
 8013f14:	b29b      	uxth	r3, r3
 8013f16:	4313      	orrs	r3, r2
 8013f18:	b29a      	uxth	r2, r3
 8013f1a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8013f1c:	801a      	strh	r2, [r3, #0]
 8013f1e:	e01a      	b.n	8013f56 <USB_EPStartXfer+0x8aa>
 8013f20:	683b      	ldr	r3, [r7, #0]
 8013f22:	785b      	ldrb	r3, [r3, #1]
 8013f24:	2b01      	cmp	r3, #1
 8013f26:	d116      	bne.n	8013f56 <USB_EPStartXfer+0x8aa>
 8013f28:	687b      	ldr	r3, [r7, #4]
 8013f2a:	2250      	movs	r2, #80	@ 0x50
 8013f2c:	5a9b      	ldrh	r3, [r3, r2]
 8013f2e:	b29b      	uxth	r3, r3
 8013f30:	001a      	movs	r2, r3
 8013f32:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8013f34:	189b      	adds	r3, r3, r2
 8013f36:	673b      	str	r3, [r7, #112]	@ 0x70
 8013f38:	683b      	ldr	r3, [r7, #0]
 8013f3a:	781b      	ldrb	r3, [r3, #0]
 8013f3c:	00da      	lsls	r2, r3, #3
 8013f3e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8013f40:	18d3      	adds	r3, r2, r3
 8013f42:	4a83      	ldr	r2, [pc, #524]	@ (8014150 <USB_EPStartXfer+0xaa4>)
 8013f44:	4694      	mov	ip, r2
 8013f46:	4463      	add	r3, ip
 8013f48:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8013f4a:	1d7b      	adds	r3, r7, #5
 8013f4c:	33ff      	adds	r3, #255	@ 0xff
 8013f4e:	681b      	ldr	r3, [r3, #0]
 8013f50:	b29a      	uxth	r2, r3
 8013f52:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013f54:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8013f56:	2076      	movs	r0, #118	@ 0x76
 8013f58:	183b      	adds	r3, r7, r0
 8013f5a:	683a      	ldr	r2, [r7, #0]
 8013f5c:	8952      	ldrh	r2, [r2, #10]
 8013f5e:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8013f60:	683b      	ldr	r3, [r7, #0]
 8013f62:	6959      	ldr	r1, [r3, #20]
 8013f64:	1d7b      	adds	r3, r7, #5
 8013f66:	33ff      	adds	r3, #255	@ 0xff
 8013f68:	681b      	ldr	r3, [r3, #0]
 8013f6a:	b29c      	uxth	r4, r3
 8013f6c:	183b      	adds	r3, r7, r0
 8013f6e:	881a      	ldrh	r2, [r3, #0]
 8013f70:	6878      	ldr	r0, [r7, #4]
 8013f72:	0023      	movs	r3, r4
 8013f74:	f000 fe0c 	bl	8014b90 <USB_WritePMA>
 8013f78:	e0ab      	b.n	80140d2 <USB_EPStartXfer+0xa26>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8013f7a:	683b      	ldr	r3, [r7, #0]
 8013f7c:	785b      	ldrb	r3, [r3, #1]
 8013f7e:	2b00      	cmp	r3, #0
 8013f80:	d000      	beq.n	8013f84 <USB_EPStartXfer+0x8d8>
 8013f82:	e070      	b.n	8014066 <USB_EPStartXfer+0x9ba>
 8013f84:	687b      	ldr	r3, [r7, #4]
 8013f86:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8013f88:	687b      	ldr	r3, [r7, #4]
 8013f8a:	2250      	movs	r2, #80	@ 0x50
 8013f8c:	5a9b      	ldrh	r3, [r3, r2]
 8013f8e:	b29b      	uxth	r3, r3
 8013f90:	001a      	movs	r2, r3
 8013f92:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8013f94:	189b      	adds	r3, r3, r2
 8013f96:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8013f98:	683b      	ldr	r3, [r7, #0]
 8013f9a:	781b      	ldrb	r3, [r3, #0]
 8013f9c:	00da      	lsls	r2, r3, #3
 8013f9e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8013fa0:	18d3      	adds	r3, r2, r3
 8013fa2:	4a6d      	ldr	r2, [pc, #436]	@ (8014158 <USB_EPStartXfer+0xaac>)
 8013fa4:	4694      	mov	ip, r2
 8013fa6:	4463      	add	r3, ip
 8013fa8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8013faa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8013fac:	881b      	ldrh	r3, [r3, #0]
 8013fae:	b29b      	uxth	r3, r3
 8013fb0:	059b      	lsls	r3, r3, #22
 8013fb2:	0d9b      	lsrs	r3, r3, #22
 8013fb4:	b29a      	uxth	r2, r3
 8013fb6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8013fb8:	801a      	strh	r2, [r3, #0]
 8013fba:	1d7b      	adds	r3, r7, #5
 8013fbc:	33ff      	adds	r3, #255	@ 0xff
 8013fbe:	681b      	ldr	r3, [r3, #0]
 8013fc0:	2b3e      	cmp	r3, #62	@ 0x3e
 8013fc2:	d922      	bls.n	801400a <USB_EPStartXfer+0x95e>
 8013fc4:	1d7b      	adds	r3, r7, #5
 8013fc6:	33ff      	adds	r3, #255	@ 0xff
 8013fc8:	681b      	ldr	r3, [r3, #0]
 8013fca:	095b      	lsrs	r3, r3, #5
 8013fcc:	21ec      	movs	r1, #236	@ 0xec
 8013fce:	187a      	adds	r2, r7, r1
 8013fd0:	6013      	str	r3, [r2, #0]
 8013fd2:	1d7b      	adds	r3, r7, #5
 8013fd4:	33ff      	adds	r3, #255	@ 0xff
 8013fd6:	681b      	ldr	r3, [r3, #0]
 8013fd8:	221f      	movs	r2, #31
 8013fda:	4013      	ands	r3, r2
 8013fdc:	d104      	bne.n	8013fe8 <USB_EPStartXfer+0x93c>
 8013fde:	187b      	adds	r3, r7, r1
 8013fe0:	681b      	ldr	r3, [r3, #0]
 8013fe2:	3b01      	subs	r3, #1
 8013fe4:	187a      	adds	r2, r7, r1
 8013fe6:	6013      	str	r3, [r2, #0]
 8013fe8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8013fea:	881b      	ldrh	r3, [r3, #0]
 8013fec:	b29a      	uxth	r2, r3
 8013fee:	23ec      	movs	r3, #236	@ 0xec
 8013ff0:	18fb      	adds	r3, r7, r3
 8013ff2:	681b      	ldr	r3, [r3, #0]
 8013ff4:	b29b      	uxth	r3, r3
 8013ff6:	029b      	lsls	r3, r3, #10
 8013ff8:	b29b      	uxth	r3, r3
 8013ffa:	4313      	orrs	r3, r2
 8013ffc:	b29b      	uxth	r3, r3
 8013ffe:	4a55      	ldr	r2, [pc, #340]	@ (8014154 <USB_EPStartXfer+0xaa8>)
 8014000:	4313      	orrs	r3, r2
 8014002:	b29a      	uxth	r2, r3
 8014004:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014006:	801a      	strh	r2, [r3, #0]
 8014008:	e052      	b.n	80140b0 <USB_EPStartXfer+0xa04>
 801400a:	1d7b      	adds	r3, r7, #5
 801400c:	33ff      	adds	r3, #255	@ 0xff
 801400e:	681b      	ldr	r3, [r3, #0]
 8014010:	2b00      	cmp	r3, #0
 8014012:	d108      	bne.n	8014026 <USB_EPStartXfer+0x97a>
 8014014:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014016:	881b      	ldrh	r3, [r3, #0]
 8014018:	b29b      	uxth	r3, r3
 801401a:	4a4e      	ldr	r2, [pc, #312]	@ (8014154 <USB_EPStartXfer+0xaa8>)
 801401c:	4313      	orrs	r3, r2
 801401e:	b29a      	uxth	r2, r3
 8014020:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014022:	801a      	strh	r2, [r3, #0]
 8014024:	e044      	b.n	80140b0 <USB_EPStartXfer+0xa04>
 8014026:	1d7b      	adds	r3, r7, #5
 8014028:	33ff      	adds	r3, #255	@ 0xff
 801402a:	681b      	ldr	r3, [r3, #0]
 801402c:	085b      	lsrs	r3, r3, #1
 801402e:	21ec      	movs	r1, #236	@ 0xec
 8014030:	187a      	adds	r2, r7, r1
 8014032:	6013      	str	r3, [r2, #0]
 8014034:	1d7b      	adds	r3, r7, #5
 8014036:	33ff      	adds	r3, #255	@ 0xff
 8014038:	681b      	ldr	r3, [r3, #0]
 801403a:	2201      	movs	r2, #1
 801403c:	4013      	ands	r3, r2
 801403e:	d004      	beq.n	801404a <USB_EPStartXfer+0x99e>
 8014040:	187b      	adds	r3, r7, r1
 8014042:	681b      	ldr	r3, [r3, #0]
 8014044:	3301      	adds	r3, #1
 8014046:	187a      	adds	r2, r7, r1
 8014048:	6013      	str	r3, [r2, #0]
 801404a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801404c:	881b      	ldrh	r3, [r3, #0]
 801404e:	b29a      	uxth	r2, r3
 8014050:	23ec      	movs	r3, #236	@ 0xec
 8014052:	18fb      	adds	r3, r7, r3
 8014054:	681b      	ldr	r3, [r3, #0]
 8014056:	b29b      	uxth	r3, r3
 8014058:	029b      	lsls	r3, r3, #10
 801405a:	b29b      	uxth	r3, r3
 801405c:	4313      	orrs	r3, r2
 801405e:	b29a      	uxth	r2, r3
 8014060:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014062:	801a      	strh	r2, [r3, #0]
 8014064:	e024      	b.n	80140b0 <USB_EPStartXfer+0xa04>
 8014066:	683b      	ldr	r3, [r7, #0]
 8014068:	785b      	ldrb	r3, [r3, #1]
 801406a:	2b01      	cmp	r3, #1
 801406c:	d120      	bne.n	80140b0 <USB_EPStartXfer+0xa04>
 801406e:	687b      	ldr	r3, [r7, #4]
 8014070:	2184      	movs	r1, #132	@ 0x84
 8014072:	187a      	adds	r2, r7, r1
 8014074:	6013      	str	r3, [r2, #0]
 8014076:	687b      	ldr	r3, [r7, #4]
 8014078:	2250      	movs	r2, #80	@ 0x50
 801407a:	5a9b      	ldrh	r3, [r3, r2]
 801407c:	b29b      	uxth	r3, r3
 801407e:	001a      	movs	r2, r3
 8014080:	187b      	adds	r3, r7, r1
 8014082:	681b      	ldr	r3, [r3, #0]
 8014084:	189b      	adds	r3, r3, r2
 8014086:	187a      	adds	r2, r7, r1
 8014088:	6013      	str	r3, [r2, #0]
 801408a:	683b      	ldr	r3, [r7, #0]
 801408c:	781b      	ldrb	r3, [r3, #0]
 801408e:	00da      	lsls	r2, r3, #3
 8014090:	187b      	adds	r3, r7, r1
 8014092:	681b      	ldr	r3, [r3, #0]
 8014094:	18d3      	adds	r3, r2, r3
 8014096:	4a30      	ldr	r2, [pc, #192]	@ (8014158 <USB_EPStartXfer+0xaac>)
 8014098:	4694      	mov	ip, r2
 801409a:	4463      	add	r3, ip
 801409c:	2180      	movs	r1, #128	@ 0x80
 801409e:	187a      	adds	r2, r7, r1
 80140a0:	6013      	str	r3, [r2, #0]
 80140a2:	1d7b      	adds	r3, r7, #5
 80140a4:	33ff      	adds	r3, #255	@ 0xff
 80140a6:	681b      	ldr	r3, [r3, #0]
 80140a8:	b29a      	uxth	r2, r3
 80140aa:	187b      	adds	r3, r7, r1
 80140ac:	681b      	ldr	r3, [r3, #0]
 80140ae:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80140b0:	2076      	movs	r0, #118	@ 0x76
 80140b2:	183b      	adds	r3, r7, r0
 80140b4:	683a      	ldr	r2, [r7, #0]
 80140b6:	8912      	ldrh	r2, [r2, #8]
 80140b8:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80140ba:	683b      	ldr	r3, [r7, #0]
 80140bc:	6959      	ldr	r1, [r3, #20]
 80140be:	1d7b      	adds	r3, r7, #5
 80140c0:	33ff      	adds	r3, #255	@ 0xff
 80140c2:	681b      	ldr	r3, [r3, #0]
 80140c4:	b29c      	uxth	r4, r3
 80140c6:	183b      	adds	r3, r7, r0
 80140c8:	881a      	ldrh	r2, [r3, #0]
 80140ca:	6878      	ldr	r0, [r7, #4]
 80140cc:	0023      	movs	r3, r4
 80140ce:	f000 fd5f 	bl	8014b90 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80140d2:	687a      	ldr	r2, [r7, #4]
 80140d4:	683b      	ldr	r3, [r7, #0]
 80140d6:	781b      	ldrb	r3, [r3, #0]
 80140d8:	009b      	lsls	r3, r3, #2
 80140da:	18d3      	adds	r3, r2, r3
 80140dc:	881b      	ldrh	r3, [r3, #0]
 80140de:	b29a      	uxth	r2, r3
 80140e0:	200a      	movs	r0, #10
 80140e2:	183b      	adds	r3, r7, r0
 80140e4:	491d      	ldr	r1, [pc, #116]	@ (801415c <USB_EPStartXfer+0xab0>)
 80140e6:	400a      	ands	r2, r1
 80140e8:	801a      	strh	r2, [r3, #0]
 80140ea:	183b      	adds	r3, r7, r0
 80140ec:	183a      	adds	r2, r7, r0
 80140ee:	8812      	ldrh	r2, [r2, #0]
 80140f0:	2110      	movs	r1, #16
 80140f2:	404a      	eors	r2, r1
 80140f4:	801a      	strh	r2, [r3, #0]
 80140f6:	183b      	adds	r3, r7, r0
 80140f8:	183a      	adds	r2, r7, r0
 80140fa:	8812      	ldrh	r2, [r2, #0]
 80140fc:	2120      	movs	r1, #32
 80140fe:	404a      	eors	r2, r1
 8014100:	801a      	strh	r2, [r3, #0]
 8014102:	687a      	ldr	r2, [r7, #4]
 8014104:	683b      	ldr	r3, [r7, #0]
 8014106:	781b      	ldrb	r3, [r3, #0]
 8014108:	009b      	lsls	r3, r3, #2
 801410a:	18d3      	adds	r3, r2, r3
 801410c:	183a      	adds	r2, r7, r0
 801410e:	8812      	ldrh	r2, [r2, #0]
 8014110:	4913      	ldr	r1, [pc, #76]	@ (8014160 <USB_EPStartXfer+0xab4>)
 8014112:	430a      	orrs	r2, r1
 8014114:	b292      	uxth	r2, r2
 8014116:	801a      	strh	r2, [r3, #0]
 8014118:	f000 fbf4 	bl	8014904 <USB_EPStartXfer+0x1258>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 801411c:	683b      	ldr	r3, [r7, #0]
 801411e:	7b1b      	ldrb	r3, [r3, #12]
 8014120:	2b00      	cmp	r3, #0
 8014122:	d000      	beq.n	8014126 <USB_EPStartXfer+0xa7a>
 8014124:	e0a9      	b.n	801427a <USB_EPStartXfer+0xbce>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8014126:	683b      	ldr	r3, [r7, #0]
 8014128:	699a      	ldr	r2, [r3, #24]
 801412a:	683b      	ldr	r3, [r7, #0]
 801412c:	691b      	ldr	r3, [r3, #16]
 801412e:	429a      	cmp	r2, r3
 8014130:	d918      	bls.n	8014164 <USB_EPStartXfer+0xab8>
      {
        len = ep->maxpacket;
 8014132:	683b      	ldr	r3, [r7, #0]
 8014134:	691b      	ldr	r3, [r3, #16]
 8014136:	1d7a      	adds	r2, r7, #5
 8014138:	32ff      	adds	r2, #255	@ 0xff
 801413a:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 801413c:	683b      	ldr	r3, [r7, #0]
 801413e:	699a      	ldr	r2, [r3, #24]
 8014140:	1d7b      	adds	r3, r7, #5
 8014142:	33ff      	adds	r3, #255	@ 0xff
 8014144:	681b      	ldr	r3, [r3, #0]
 8014146:	1ad2      	subs	r2, r2, r3
 8014148:	683b      	ldr	r3, [r7, #0]
 801414a:	619a      	str	r2, [r3, #24]
 801414c:	e012      	b.n	8014174 <USB_EPStartXfer+0xac8>
 801414e:	46c0      	nop			@ (mov r8, r8)
 8014150:	00000406 	.word	0x00000406
 8014154:	ffff8000 	.word	0xffff8000
 8014158:	00000402 	.word	0x00000402
 801415c:	ffff8fbf 	.word	0xffff8fbf
 8014160:	ffff8080 	.word	0xffff8080
      }
      else
      {
        len = ep->xfer_len;
 8014164:	683b      	ldr	r3, [r7, #0]
 8014166:	699b      	ldr	r3, [r3, #24]
 8014168:	1d7a      	adds	r2, r7, #5
 801416a:	32ff      	adds	r2, #255	@ 0xff
 801416c:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 801416e:	683b      	ldr	r3, [r7, #0]
 8014170:	2200      	movs	r2, #0
 8014172:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8014174:	687b      	ldr	r3, [r7, #4]
 8014176:	2190      	movs	r1, #144	@ 0x90
 8014178:	187a      	adds	r2, r7, r1
 801417a:	6013      	str	r3, [r2, #0]
 801417c:	687b      	ldr	r3, [r7, #4]
 801417e:	2250      	movs	r2, #80	@ 0x50
 8014180:	5a9b      	ldrh	r3, [r3, r2]
 8014182:	b29b      	uxth	r3, r3
 8014184:	001a      	movs	r2, r3
 8014186:	187b      	adds	r3, r7, r1
 8014188:	681b      	ldr	r3, [r3, #0]
 801418a:	189b      	adds	r3, r3, r2
 801418c:	187a      	adds	r2, r7, r1
 801418e:	6013      	str	r3, [r2, #0]
 8014190:	683b      	ldr	r3, [r7, #0]
 8014192:	781b      	ldrb	r3, [r3, #0]
 8014194:	00da      	lsls	r2, r3, #3
 8014196:	187b      	adds	r3, r7, r1
 8014198:	681b      	ldr	r3, [r3, #0]
 801419a:	18d3      	adds	r3, r2, r3
 801419c:	4acf      	ldr	r2, [pc, #828]	@ (80144dc <USB_EPStartXfer+0xe30>)
 801419e:	4694      	mov	ip, r2
 80141a0:	4463      	add	r3, ip
 80141a2:	218c      	movs	r1, #140	@ 0x8c
 80141a4:	187a      	adds	r2, r7, r1
 80141a6:	6013      	str	r3, [r2, #0]
 80141a8:	187b      	adds	r3, r7, r1
 80141aa:	681b      	ldr	r3, [r3, #0]
 80141ac:	881b      	ldrh	r3, [r3, #0]
 80141ae:	b29b      	uxth	r3, r3
 80141b0:	059b      	lsls	r3, r3, #22
 80141b2:	0d9b      	lsrs	r3, r3, #22
 80141b4:	b29a      	uxth	r2, r3
 80141b6:	187b      	adds	r3, r7, r1
 80141b8:	681b      	ldr	r3, [r3, #0]
 80141ba:	801a      	strh	r2, [r3, #0]
 80141bc:	1d7b      	adds	r3, r7, #5
 80141be:	33ff      	adds	r3, #255	@ 0xff
 80141c0:	681b      	ldr	r3, [r3, #0]
 80141c2:	2b3e      	cmp	r3, #62	@ 0x3e
 80141c4:	d925      	bls.n	8014212 <USB_EPStartXfer+0xb66>
 80141c6:	1d7b      	adds	r3, r7, #5
 80141c8:	33ff      	adds	r3, #255	@ 0xff
 80141ca:	681b      	ldr	r3, [r3, #0]
 80141cc:	095b      	lsrs	r3, r3, #5
 80141ce:	21e8      	movs	r1, #232	@ 0xe8
 80141d0:	187a      	adds	r2, r7, r1
 80141d2:	6013      	str	r3, [r2, #0]
 80141d4:	1d7b      	adds	r3, r7, #5
 80141d6:	33ff      	adds	r3, #255	@ 0xff
 80141d8:	681b      	ldr	r3, [r3, #0]
 80141da:	221f      	movs	r2, #31
 80141dc:	4013      	ands	r3, r2
 80141de:	d104      	bne.n	80141ea <USB_EPStartXfer+0xb3e>
 80141e0:	187b      	adds	r3, r7, r1
 80141e2:	681b      	ldr	r3, [r3, #0]
 80141e4:	3b01      	subs	r3, #1
 80141e6:	187a      	adds	r2, r7, r1
 80141e8:	6013      	str	r3, [r2, #0]
 80141ea:	218c      	movs	r1, #140	@ 0x8c
 80141ec:	187b      	adds	r3, r7, r1
 80141ee:	681b      	ldr	r3, [r3, #0]
 80141f0:	881b      	ldrh	r3, [r3, #0]
 80141f2:	b29a      	uxth	r2, r3
 80141f4:	23e8      	movs	r3, #232	@ 0xe8
 80141f6:	18fb      	adds	r3, r7, r3
 80141f8:	681b      	ldr	r3, [r3, #0]
 80141fa:	b29b      	uxth	r3, r3
 80141fc:	029b      	lsls	r3, r3, #10
 80141fe:	b29b      	uxth	r3, r3
 8014200:	4313      	orrs	r3, r2
 8014202:	b29b      	uxth	r3, r3
 8014204:	4ab6      	ldr	r2, [pc, #728]	@ (80144e0 <USB_EPStartXfer+0xe34>)
 8014206:	4313      	orrs	r3, r2
 8014208:	b29a      	uxth	r2, r3
 801420a:	187b      	adds	r3, r7, r1
 801420c:	681b      	ldr	r3, [r3, #0]
 801420e:	801a      	strh	r2, [r3, #0]
 8014210:	e353      	b.n	80148ba <USB_EPStartXfer+0x120e>
 8014212:	1d7b      	adds	r3, r7, #5
 8014214:	33ff      	adds	r3, #255	@ 0xff
 8014216:	681b      	ldr	r3, [r3, #0]
 8014218:	2b00      	cmp	r3, #0
 801421a:	d10b      	bne.n	8014234 <USB_EPStartXfer+0xb88>
 801421c:	218c      	movs	r1, #140	@ 0x8c
 801421e:	187b      	adds	r3, r7, r1
 8014220:	681b      	ldr	r3, [r3, #0]
 8014222:	881b      	ldrh	r3, [r3, #0]
 8014224:	b29b      	uxth	r3, r3
 8014226:	4aae      	ldr	r2, [pc, #696]	@ (80144e0 <USB_EPStartXfer+0xe34>)
 8014228:	4313      	orrs	r3, r2
 801422a:	b29a      	uxth	r2, r3
 801422c:	187b      	adds	r3, r7, r1
 801422e:	681b      	ldr	r3, [r3, #0]
 8014230:	801a      	strh	r2, [r3, #0]
 8014232:	e342      	b.n	80148ba <USB_EPStartXfer+0x120e>
 8014234:	1d7b      	adds	r3, r7, #5
 8014236:	33ff      	adds	r3, #255	@ 0xff
 8014238:	681b      	ldr	r3, [r3, #0]
 801423a:	085b      	lsrs	r3, r3, #1
 801423c:	21e8      	movs	r1, #232	@ 0xe8
 801423e:	187a      	adds	r2, r7, r1
 8014240:	6013      	str	r3, [r2, #0]
 8014242:	1d7b      	adds	r3, r7, #5
 8014244:	33ff      	adds	r3, #255	@ 0xff
 8014246:	681b      	ldr	r3, [r3, #0]
 8014248:	2201      	movs	r2, #1
 801424a:	4013      	ands	r3, r2
 801424c:	d004      	beq.n	8014258 <USB_EPStartXfer+0xbac>
 801424e:	187b      	adds	r3, r7, r1
 8014250:	681b      	ldr	r3, [r3, #0]
 8014252:	3301      	adds	r3, #1
 8014254:	187a      	adds	r2, r7, r1
 8014256:	6013      	str	r3, [r2, #0]
 8014258:	218c      	movs	r1, #140	@ 0x8c
 801425a:	187b      	adds	r3, r7, r1
 801425c:	681b      	ldr	r3, [r3, #0]
 801425e:	881b      	ldrh	r3, [r3, #0]
 8014260:	b29a      	uxth	r2, r3
 8014262:	23e8      	movs	r3, #232	@ 0xe8
 8014264:	18fb      	adds	r3, r7, r3
 8014266:	681b      	ldr	r3, [r3, #0]
 8014268:	b29b      	uxth	r3, r3
 801426a:	029b      	lsls	r3, r3, #10
 801426c:	b29b      	uxth	r3, r3
 801426e:	4313      	orrs	r3, r2
 8014270:	b29a      	uxth	r2, r3
 8014272:	187b      	adds	r3, r7, r1
 8014274:	681b      	ldr	r3, [r3, #0]
 8014276:	801a      	strh	r2, [r3, #0]
 8014278:	e31f      	b.n	80148ba <USB_EPStartXfer+0x120e>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 801427a:	683b      	ldr	r3, [r7, #0]
 801427c:	78db      	ldrb	r3, [r3, #3]
 801427e:	2b02      	cmp	r3, #2
 8014280:	d000      	beq.n	8014284 <USB_EPStartXfer+0xbd8>
 8014282:	e191      	b.n	80145a8 <USB_EPStartXfer+0xefc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8014284:	683b      	ldr	r3, [r7, #0]
 8014286:	785b      	ldrb	r3, [r3, #1]
 8014288:	2b00      	cmp	r3, #0
 801428a:	d000      	beq.n	801428e <USB_EPStartXfer+0xbe2>
 801428c:	e07c      	b.n	8014388 <USB_EPStartXfer+0xcdc>
 801428e:	687b      	ldr	r3, [r7, #4]
 8014290:	21ac      	movs	r1, #172	@ 0xac
 8014292:	187a      	adds	r2, r7, r1
 8014294:	6013      	str	r3, [r2, #0]
 8014296:	687b      	ldr	r3, [r7, #4]
 8014298:	2250      	movs	r2, #80	@ 0x50
 801429a:	5a9b      	ldrh	r3, [r3, r2]
 801429c:	b29b      	uxth	r3, r3
 801429e:	001a      	movs	r2, r3
 80142a0:	187b      	adds	r3, r7, r1
 80142a2:	681b      	ldr	r3, [r3, #0]
 80142a4:	189b      	adds	r3, r3, r2
 80142a6:	187a      	adds	r2, r7, r1
 80142a8:	6013      	str	r3, [r2, #0]
 80142aa:	683b      	ldr	r3, [r7, #0]
 80142ac:	781b      	ldrb	r3, [r3, #0]
 80142ae:	00da      	lsls	r2, r3, #3
 80142b0:	187b      	adds	r3, r7, r1
 80142b2:	681b      	ldr	r3, [r3, #0]
 80142b4:	18d3      	adds	r3, r2, r3
 80142b6:	4a8b      	ldr	r2, [pc, #556]	@ (80144e4 <USB_EPStartXfer+0xe38>)
 80142b8:	4694      	mov	ip, r2
 80142ba:	4463      	add	r3, ip
 80142bc:	21a8      	movs	r1, #168	@ 0xa8
 80142be:	187a      	adds	r2, r7, r1
 80142c0:	6013      	str	r3, [r2, #0]
 80142c2:	187b      	adds	r3, r7, r1
 80142c4:	681b      	ldr	r3, [r3, #0]
 80142c6:	881b      	ldrh	r3, [r3, #0]
 80142c8:	b29b      	uxth	r3, r3
 80142ca:	059b      	lsls	r3, r3, #22
 80142cc:	0d9b      	lsrs	r3, r3, #22
 80142ce:	b29a      	uxth	r2, r3
 80142d0:	187b      	adds	r3, r7, r1
 80142d2:	681b      	ldr	r3, [r3, #0]
 80142d4:	801a      	strh	r2, [r3, #0]
 80142d6:	683b      	ldr	r3, [r7, #0]
 80142d8:	691b      	ldr	r3, [r3, #16]
 80142da:	2b3e      	cmp	r3, #62	@ 0x3e
 80142dc:	d923      	bls.n	8014326 <USB_EPStartXfer+0xc7a>
 80142de:	683b      	ldr	r3, [r7, #0]
 80142e0:	691b      	ldr	r3, [r3, #16]
 80142e2:	095b      	lsrs	r3, r3, #5
 80142e4:	21e4      	movs	r1, #228	@ 0xe4
 80142e6:	187a      	adds	r2, r7, r1
 80142e8:	6013      	str	r3, [r2, #0]
 80142ea:	683b      	ldr	r3, [r7, #0]
 80142ec:	691b      	ldr	r3, [r3, #16]
 80142ee:	221f      	movs	r2, #31
 80142f0:	4013      	ands	r3, r2
 80142f2:	d104      	bne.n	80142fe <USB_EPStartXfer+0xc52>
 80142f4:	187b      	adds	r3, r7, r1
 80142f6:	681b      	ldr	r3, [r3, #0]
 80142f8:	3b01      	subs	r3, #1
 80142fa:	187a      	adds	r2, r7, r1
 80142fc:	6013      	str	r3, [r2, #0]
 80142fe:	21a8      	movs	r1, #168	@ 0xa8
 8014300:	187b      	adds	r3, r7, r1
 8014302:	681b      	ldr	r3, [r3, #0]
 8014304:	881b      	ldrh	r3, [r3, #0]
 8014306:	b29a      	uxth	r2, r3
 8014308:	23e4      	movs	r3, #228	@ 0xe4
 801430a:	18fb      	adds	r3, r7, r3
 801430c:	681b      	ldr	r3, [r3, #0]
 801430e:	b29b      	uxth	r3, r3
 8014310:	029b      	lsls	r3, r3, #10
 8014312:	b29b      	uxth	r3, r3
 8014314:	4313      	orrs	r3, r2
 8014316:	b29b      	uxth	r3, r3
 8014318:	4a71      	ldr	r2, [pc, #452]	@ (80144e0 <USB_EPStartXfer+0xe34>)
 801431a:	4313      	orrs	r3, r2
 801431c:	b29a      	uxth	r2, r3
 801431e:	187b      	adds	r3, r7, r1
 8014320:	681b      	ldr	r3, [r3, #0]
 8014322:	801a      	strh	r2, [r3, #0]
 8014324:	e054      	b.n	80143d0 <USB_EPStartXfer+0xd24>
 8014326:	683b      	ldr	r3, [r7, #0]
 8014328:	691b      	ldr	r3, [r3, #16]
 801432a:	2b00      	cmp	r3, #0
 801432c:	d10b      	bne.n	8014346 <USB_EPStartXfer+0xc9a>
 801432e:	21a8      	movs	r1, #168	@ 0xa8
 8014330:	187b      	adds	r3, r7, r1
 8014332:	681b      	ldr	r3, [r3, #0]
 8014334:	881b      	ldrh	r3, [r3, #0]
 8014336:	b29b      	uxth	r3, r3
 8014338:	4a69      	ldr	r2, [pc, #420]	@ (80144e0 <USB_EPStartXfer+0xe34>)
 801433a:	4313      	orrs	r3, r2
 801433c:	b29a      	uxth	r2, r3
 801433e:	187b      	adds	r3, r7, r1
 8014340:	681b      	ldr	r3, [r3, #0]
 8014342:	801a      	strh	r2, [r3, #0]
 8014344:	e044      	b.n	80143d0 <USB_EPStartXfer+0xd24>
 8014346:	683b      	ldr	r3, [r7, #0]
 8014348:	691b      	ldr	r3, [r3, #16]
 801434a:	085b      	lsrs	r3, r3, #1
 801434c:	21e4      	movs	r1, #228	@ 0xe4
 801434e:	187a      	adds	r2, r7, r1
 8014350:	6013      	str	r3, [r2, #0]
 8014352:	683b      	ldr	r3, [r7, #0]
 8014354:	691b      	ldr	r3, [r3, #16]
 8014356:	2201      	movs	r2, #1
 8014358:	4013      	ands	r3, r2
 801435a:	d004      	beq.n	8014366 <USB_EPStartXfer+0xcba>
 801435c:	187b      	adds	r3, r7, r1
 801435e:	681b      	ldr	r3, [r3, #0]
 8014360:	3301      	adds	r3, #1
 8014362:	187a      	adds	r2, r7, r1
 8014364:	6013      	str	r3, [r2, #0]
 8014366:	21a8      	movs	r1, #168	@ 0xa8
 8014368:	187b      	adds	r3, r7, r1
 801436a:	681b      	ldr	r3, [r3, #0]
 801436c:	881b      	ldrh	r3, [r3, #0]
 801436e:	b29a      	uxth	r2, r3
 8014370:	23e4      	movs	r3, #228	@ 0xe4
 8014372:	18fb      	adds	r3, r7, r3
 8014374:	681b      	ldr	r3, [r3, #0]
 8014376:	b29b      	uxth	r3, r3
 8014378:	029b      	lsls	r3, r3, #10
 801437a:	b29b      	uxth	r3, r3
 801437c:	4313      	orrs	r3, r2
 801437e:	b29a      	uxth	r2, r3
 8014380:	187b      	adds	r3, r7, r1
 8014382:	681b      	ldr	r3, [r3, #0]
 8014384:	801a      	strh	r2, [r3, #0]
 8014386:	e023      	b.n	80143d0 <USB_EPStartXfer+0xd24>
 8014388:	683b      	ldr	r3, [r7, #0]
 801438a:	785b      	ldrb	r3, [r3, #1]
 801438c:	2b01      	cmp	r3, #1
 801438e:	d11f      	bne.n	80143d0 <USB_EPStartXfer+0xd24>
 8014390:	687b      	ldr	r3, [r7, #4]
 8014392:	21b4      	movs	r1, #180	@ 0xb4
 8014394:	187a      	adds	r2, r7, r1
 8014396:	6013      	str	r3, [r2, #0]
 8014398:	687b      	ldr	r3, [r7, #4]
 801439a:	2250      	movs	r2, #80	@ 0x50
 801439c:	5a9b      	ldrh	r3, [r3, r2]
 801439e:	b29b      	uxth	r3, r3
 80143a0:	001a      	movs	r2, r3
 80143a2:	187b      	adds	r3, r7, r1
 80143a4:	681b      	ldr	r3, [r3, #0]
 80143a6:	189b      	adds	r3, r3, r2
 80143a8:	187a      	adds	r2, r7, r1
 80143aa:	6013      	str	r3, [r2, #0]
 80143ac:	683b      	ldr	r3, [r7, #0]
 80143ae:	781b      	ldrb	r3, [r3, #0]
 80143b0:	00da      	lsls	r2, r3, #3
 80143b2:	187b      	adds	r3, r7, r1
 80143b4:	681b      	ldr	r3, [r3, #0]
 80143b6:	18d3      	adds	r3, r2, r3
 80143b8:	4a4a      	ldr	r2, [pc, #296]	@ (80144e4 <USB_EPStartXfer+0xe38>)
 80143ba:	4694      	mov	ip, r2
 80143bc:	4463      	add	r3, ip
 80143be:	21b0      	movs	r1, #176	@ 0xb0
 80143c0:	187a      	adds	r2, r7, r1
 80143c2:	6013      	str	r3, [r2, #0]
 80143c4:	683b      	ldr	r3, [r7, #0]
 80143c6:	691b      	ldr	r3, [r3, #16]
 80143c8:	b29a      	uxth	r2, r3
 80143ca:	187b      	adds	r3, r7, r1
 80143cc:	681b      	ldr	r3, [r3, #0]
 80143ce:	801a      	strh	r2, [r3, #0]
 80143d0:	687b      	ldr	r3, [r7, #4]
 80143d2:	22a4      	movs	r2, #164	@ 0xa4
 80143d4:	18ba      	adds	r2, r7, r2
 80143d6:	6013      	str	r3, [r2, #0]
 80143d8:	683b      	ldr	r3, [r7, #0]
 80143da:	785b      	ldrb	r3, [r3, #1]
 80143dc:	2b00      	cmp	r3, #0
 80143de:	d000      	beq.n	80143e2 <USB_EPStartXfer+0xd36>
 80143e0:	e082      	b.n	80144e8 <USB_EPStartXfer+0xe3c>
 80143e2:	687b      	ldr	r3, [r7, #4]
 80143e4:	219c      	movs	r1, #156	@ 0x9c
 80143e6:	187a      	adds	r2, r7, r1
 80143e8:	6013      	str	r3, [r2, #0]
 80143ea:	687b      	ldr	r3, [r7, #4]
 80143ec:	2250      	movs	r2, #80	@ 0x50
 80143ee:	5a9b      	ldrh	r3, [r3, r2]
 80143f0:	b29b      	uxth	r3, r3
 80143f2:	001a      	movs	r2, r3
 80143f4:	187b      	adds	r3, r7, r1
 80143f6:	681b      	ldr	r3, [r3, #0]
 80143f8:	189b      	adds	r3, r3, r2
 80143fa:	187a      	adds	r2, r7, r1
 80143fc:	6013      	str	r3, [r2, #0]
 80143fe:	683b      	ldr	r3, [r7, #0]
 8014400:	781b      	ldrb	r3, [r3, #0]
 8014402:	00da      	lsls	r2, r3, #3
 8014404:	187b      	adds	r3, r7, r1
 8014406:	681b      	ldr	r3, [r3, #0]
 8014408:	18d3      	adds	r3, r2, r3
 801440a:	4a34      	ldr	r2, [pc, #208]	@ (80144dc <USB_EPStartXfer+0xe30>)
 801440c:	4694      	mov	ip, r2
 801440e:	4463      	add	r3, ip
 8014410:	2198      	movs	r1, #152	@ 0x98
 8014412:	187a      	adds	r2, r7, r1
 8014414:	6013      	str	r3, [r2, #0]
 8014416:	187b      	adds	r3, r7, r1
 8014418:	681b      	ldr	r3, [r3, #0]
 801441a:	881b      	ldrh	r3, [r3, #0]
 801441c:	b29b      	uxth	r3, r3
 801441e:	059b      	lsls	r3, r3, #22
 8014420:	0d9b      	lsrs	r3, r3, #22
 8014422:	b29a      	uxth	r2, r3
 8014424:	187b      	adds	r3, r7, r1
 8014426:	681b      	ldr	r3, [r3, #0]
 8014428:	801a      	strh	r2, [r3, #0]
 801442a:	683b      	ldr	r3, [r7, #0]
 801442c:	691b      	ldr	r3, [r3, #16]
 801442e:	2b3e      	cmp	r3, #62	@ 0x3e
 8014430:	d923      	bls.n	801447a <USB_EPStartXfer+0xdce>
 8014432:	683b      	ldr	r3, [r7, #0]
 8014434:	691b      	ldr	r3, [r3, #16]
 8014436:	095b      	lsrs	r3, r3, #5
 8014438:	21e0      	movs	r1, #224	@ 0xe0
 801443a:	187a      	adds	r2, r7, r1
 801443c:	6013      	str	r3, [r2, #0]
 801443e:	683b      	ldr	r3, [r7, #0]
 8014440:	691b      	ldr	r3, [r3, #16]
 8014442:	221f      	movs	r2, #31
 8014444:	4013      	ands	r3, r2
 8014446:	d104      	bne.n	8014452 <USB_EPStartXfer+0xda6>
 8014448:	187b      	adds	r3, r7, r1
 801444a:	681b      	ldr	r3, [r3, #0]
 801444c:	3b01      	subs	r3, #1
 801444e:	187a      	adds	r2, r7, r1
 8014450:	6013      	str	r3, [r2, #0]
 8014452:	2198      	movs	r1, #152	@ 0x98
 8014454:	187b      	adds	r3, r7, r1
 8014456:	681b      	ldr	r3, [r3, #0]
 8014458:	881b      	ldrh	r3, [r3, #0]
 801445a:	b29a      	uxth	r2, r3
 801445c:	23e0      	movs	r3, #224	@ 0xe0
 801445e:	18fb      	adds	r3, r7, r3
 8014460:	681b      	ldr	r3, [r3, #0]
 8014462:	b29b      	uxth	r3, r3
 8014464:	029b      	lsls	r3, r3, #10
 8014466:	b29b      	uxth	r3, r3
 8014468:	4313      	orrs	r3, r2
 801446a:	b29b      	uxth	r3, r3
 801446c:	4a1c      	ldr	r2, [pc, #112]	@ (80144e0 <USB_EPStartXfer+0xe34>)
 801446e:	4313      	orrs	r3, r2
 8014470:	b29a      	uxth	r2, r3
 8014472:	187b      	adds	r3, r7, r1
 8014474:	681b      	ldr	r3, [r3, #0]
 8014476:	801a      	strh	r2, [r3, #0]
 8014478:	e057      	b.n	801452a <USB_EPStartXfer+0xe7e>
 801447a:	683b      	ldr	r3, [r7, #0]
 801447c:	691b      	ldr	r3, [r3, #16]
 801447e:	2b00      	cmp	r3, #0
 8014480:	d10b      	bne.n	801449a <USB_EPStartXfer+0xdee>
 8014482:	2198      	movs	r1, #152	@ 0x98
 8014484:	187b      	adds	r3, r7, r1
 8014486:	681b      	ldr	r3, [r3, #0]
 8014488:	881b      	ldrh	r3, [r3, #0]
 801448a:	b29b      	uxth	r3, r3
 801448c:	4a14      	ldr	r2, [pc, #80]	@ (80144e0 <USB_EPStartXfer+0xe34>)
 801448e:	4313      	orrs	r3, r2
 8014490:	b29a      	uxth	r2, r3
 8014492:	187b      	adds	r3, r7, r1
 8014494:	681b      	ldr	r3, [r3, #0]
 8014496:	801a      	strh	r2, [r3, #0]
 8014498:	e047      	b.n	801452a <USB_EPStartXfer+0xe7e>
 801449a:	683b      	ldr	r3, [r7, #0]
 801449c:	691b      	ldr	r3, [r3, #16]
 801449e:	085b      	lsrs	r3, r3, #1
 80144a0:	21e0      	movs	r1, #224	@ 0xe0
 80144a2:	187a      	adds	r2, r7, r1
 80144a4:	6013      	str	r3, [r2, #0]
 80144a6:	683b      	ldr	r3, [r7, #0]
 80144a8:	691b      	ldr	r3, [r3, #16]
 80144aa:	2201      	movs	r2, #1
 80144ac:	4013      	ands	r3, r2
 80144ae:	d004      	beq.n	80144ba <USB_EPStartXfer+0xe0e>
 80144b0:	187b      	adds	r3, r7, r1
 80144b2:	681b      	ldr	r3, [r3, #0]
 80144b4:	3301      	adds	r3, #1
 80144b6:	187a      	adds	r2, r7, r1
 80144b8:	6013      	str	r3, [r2, #0]
 80144ba:	2198      	movs	r1, #152	@ 0x98
 80144bc:	187b      	adds	r3, r7, r1
 80144be:	681b      	ldr	r3, [r3, #0]
 80144c0:	881b      	ldrh	r3, [r3, #0]
 80144c2:	b29a      	uxth	r2, r3
 80144c4:	23e0      	movs	r3, #224	@ 0xe0
 80144c6:	18fb      	adds	r3, r7, r3
 80144c8:	681b      	ldr	r3, [r3, #0]
 80144ca:	b29b      	uxth	r3, r3
 80144cc:	029b      	lsls	r3, r3, #10
 80144ce:	b29b      	uxth	r3, r3
 80144d0:	4313      	orrs	r3, r2
 80144d2:	b29a      	uxth	r2, r3
 80144d4:	187b      	adds	r3, r7, r1
 80144d6:	681b      	ldr	r3, [r3, #0]
 80144d8:	801a      	strh	r2, [r3, #0]
 80144da:	e026      	b.n	801452a <USB_EPStartXfer+0xe7e>
 80144dc:	00000406 	.word	0x00000406
 80144e0:	ffff8000 	.word	0xffff8000
 80144e4:	00000402 	.word	0x00000402
 80144e8:	683b      	ldr	r3, [r7, #0]
 80144ea:	785b      	ldrb	r3, [r3, #1]
 80144ec:	2b01      	cmp	r3, #1
 80144ee:	d11c      	bne.n	801452a <USB_EPStartXfer+0xe7e>
 80144f0:	687b      	ldr	r3, [r7, #4]
 80144f2:	2250      	movs	r2, #80	@ 0x50
 80144f4:	5a9b      	ldrh	r3, [r3, r2]
 80144f6:	b29b      	uxth	r3, r3
 80144f8:	001a      	movs	r2, r3
 80144fa:	21a4      	movs	r1, #164	@ 0xa4
 80144fc:	187b      	adds	r3, r7, r1
 80144fe:	681b      	ldr	r3, [r3, #0]
 8014500:	189b      	adds	r3, r3, r2
 8014502:	187a      	adds	r2, r7, r1
 8014504:	6013      	str	r3, [r2, #0]
 8014506:	683b      	ldr	r3, [r7, #0]
 8014508:	781b      	ldrb	r3, [r3, #0]
 801450a:	00da      	lsls	r2, r3, #3
 801450c:	187b      	adds	r3, r7, r1
 801450e:	681b      	ldr	r3, [r3, #0]
 8014510:	18d3      	adds	r3, r2, r3
 8014512:	4ad2      	ldr	r2, [pc, #840]	@ (801485c <USB_EPStartXfer+0x11b0>)
 8014514:	4694      	mov	ip, r2
 8014516:	4463      	add	r3, ip
 8014518:	21a0      	movs	r1, #160	@ 0xa0
 801451a:	187a      	adds	r2, r7, r1
 801451c:	6013      	str	r3, [r2, #0]
 801451e:	683b      	ldr	r3, [r7, #0]
 8014520:	691b      	ldr	r3, [r3, #16]
 8014522:	b29a      	uxth	r2, r3
 8014524:	187b      	adds	r3, r7, r1
 8014526:	681b      	ldr	r3, [r3, #0]
 8014528:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 801452a:	683b      	ldr	r3, [r7, #0]
 801452c:	69db      	ldr	r3, [r3, #28]
 801452e:	2b00      	cmp	r3, #0
 8014530:	d100      	bne.n	8014534 <USB_EPStartXfer+0xe88>
 8014532:	e1c2      	b.n	80148ba <USB_EPStartXfer+0x120e>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8014534:	687a      	ldr	r2, [r7, #4]
 8014536:	683b      	ldr	r3, [r7, #0]
 8014538:	781b      	ldrb	r3, [r3, #0]
 801453a:	009b      	lsls	r3, r3, #2
 801453c:	18d2      	adds	r2, r2, r3
 801453e:	2196      	movs	r1, #150	@ 0x96
 8014540:	187b      	adds	r3, r7, r1
 8014542:	8812      	ldrh	r2, [r2, #0]
 8014544:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8014546:	187b      	adds	r3, r7, r1
 8014548:	881a      	ldrh	r2, [r3, #0]
 801454a:	2380      	movs	r3, #128	@ 0x80
 801454c:	01db      	lsls	r3, r3, #7
 801454e:	4013      	ands	r3, r2
 8014550:	d004      	beq.n	801455c <USB_EPStartXfer+0xeb0>
 8014552:	187b      	adds	r3, r7, r1
 8014554:	881b      	ldrh	r3, [r3, #0]
 8014556:	2240      	movs	r2, #64	@ 0x40
 8014558:	4013      	ands	r3, r2
 801455a:	d10d      	bne.n	8014578 <USB_EPStartXfer+0xecc>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 801455c:	2196      	movs	r1, #150	@ 0x96
 801455e:	187b      	adds	r3, r7, r1
 8014560:	881a      	ldrh	r2, [r3, #0]
 8014562:	2380      	movs	r3, #128	@ 0x80
 8014564:	01db      	lsls	r3, r3, #7
 8014566:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8014568:	d000      	beq.n	801456c <USB_EPStartXfer+0xec0>
 801456a:	e1a6      	b.n	80148ba <USB_EPStartXfer+0x120e>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 801456c:	187b      	adds	r3, r7, r1
 801456e:	881b      	ldrh	r3, [r3, #0]
 8014570:	2240      	movs	r2, #64	@ 0x40
 8014572:	4013      	ands	r3, r2
 8014574:	d000      	beq.n	8014578 <USB_EPStartXfer+0xecc>
 8014576:	e1a0      	b.n	80148ba <USB_EPStartXfer+0x120e>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8014578:	687a      	ldr	r2, [r7, #4]
 801457a:	683b      	ldr	r3, [r7, #0]
 801457c:	781b      	ldrb	r3, [r3, #0]
 801457e:	009b      	lsls	r3, r3, #2
 8014580:	18d3      	adds	r3, r2, r3
 8014582:	881b      	ldrh	r3, [r3, #0]
 8014584:	b29a      	uxth	r2, r3
 8014586:	2094      	movs	r0, #148	@ 0x94
 8014588:	183b      	adds	r3, r7, r0
 801458a:	49b5      	ldr	r1, [pc, #724]	@ (8014860 <USB_EPStartXfer+0x11b4>)
 801458c:	400a      	ands	r2, r1
 801458e:	801a      	strh	r2, [r3, #0]
 8014590:	687a      	ldr	r2, [r7, #4]
 8014592:	683b      	ldr	r3, [r7, #0]
 8014594:	781b      	ldrb	r3, [r3, #0]
 8014596:	009b      	lsls	r3, r3, #2
 8014598:	18d3      	adds	r3, r2, r3
 801459a:	183a      	adds	r2, r7, r0
 801459c:	8812      	ldrh	r2, [r2, #0]
 801459e:	49b1      	ldr	r1, [pc, #708]	@ (8014864 <USB_EPStartXfer+0x11b8>)
 80145a0:	430a      	orrs	r2, r1
 80145a2:	b292      	uxth	r2, r2
 80145a4:	801a      	strh	r2, [r3, #0]
 80145a6:	e188      	b.n	80148ba <USB_EPStartXfer+0x120e>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80145a8:	683b      	ldr	r3, [r7, #0]
 80145aa:	78db      	ldrb	r3, [r3, #3]
 80145ac:	2b01      	cmp	r3, #1
 80145ae:	d000      	beq.n	80145b2 <USB_EPStartXfer+0xf06>
 80145b0:	e181      	b.n	80148b6 <USB_EPStartXfer+0x120a>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80145b2:	683b      	ldr	r3, [r7, #0]
 80145b4:	699a      	ldr	r2, [r3, #24]
 80145b6:	683b      	ldr	r3, [r7, #0]
 80145b8:	691b      	ldr	r3, [r3, #16]
 80145ba:	429a      	cmp	r2, r3
 80145bc:	d90d      	bls.n	80145da <USB_EPStartXfer+0xf2e>
        {
          len = ep->maxpacket;
 80145be:	683b      	ldr	r3, [r7, #0]
 80145c0:	691b      	ldr	r3, [r3, #16]
 80145c2:	1d7a      	adds	r2, r7, #5
 80145c4:	32ff      	adds	r2, #255	@ 0xff
 80145c6:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 80145c8:	683b      	ldr	r3, [r7, #0]
 80145ca:	699a      	ldr	r2, [r3, #24]
 80145cc:	1d7b      	adds	r3, r7, #5
 80145ce:	33ff      	adds	r3, #255	@ 0xff
 80145d0:	681b      	ldr	r3, [r3, #0]
 80145d2:	1ad2      	subs	r2, r2, r3
 80145d4:	683b      	ldr	r3, [r7, #0]
 80145d6:	619a      	str	r2, [r3, #24]
 80145d8:	e007      	b.n	80145ea <USB_EPStartXfer+0xf3e>
        }
        else
        {
          len = ep->xfer_len;
 80145da:	683b      	ldr	r3, [r7, #0]
 80145dc:	699b      	ldr	r3, [r3, #24]
 80145de:	1d7a      	adds	r2, r7, #5
 80145e0:	32ff      	adds	r2, #255	@ 0xff
 80145e2:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 80145e4:	683b      	ldr	r3, [r7, #0]
 80145e6:	2200      	movs	r2, #0
 80145e8:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80145ea:	683b      	ldr	r3, [r7, #0]
 80145ec:	785b      	ldrb	r3, [r3, #1]
 80145ee:	2b00      	cmp	r3, #0
 80145f0:	d000      	beq.n	80145f4 <USB_EPStartXfer+0xf48>
 80145f2:	e082      	b.n	80146fa <USB_EPStartXfer+0x104e>
 80145f4:	687b      	ldr	r3, [r7, #4]
 80145f6:	21cc      	movs	r1, #204	@ 0xcc
 80145f8:	187a      	adds	r2, r7, r1
 80145fa:	6013      	str	r3, [r2, #0]
 80145fc:	687b      	ldr	r3, [r7, #4]
 80145fe:	2250      	movs	r2, #80	@ 0x50
 8014600:	5a9b      	ldrh	r3, [r3, r2]
 8014602:	b29b      	uxth	r3, r3
 8014604:	001a      	movs	r2, r3
 8014606:	187b      	adds	r3, r7, r1
 8014608:	681b      	ldr	r3, [r3, #0]
 801460a:	189b      	adds	r3, r3, r2
 801460c:	187a      	adds	r2, r7, r1
 801460e:	6013      	str	r3, [r2, #0]
 8014610:	683b      	ldr	r3, [r7, #0]
 8014612:	781b      	ldrb	r3, [r3, #0]
 8014614:	00da      	lsls	r2, r3, #3
 8014616:	187b      	adds	r3, r7, r1
 8014618:	681b      	ldr	r3, [r3, #0]
 801461a:	18d3      	adds	r3, r2, r3
 801461c:	4a92      	ldr	r2, [pc, #584]	@ (8014868 <USB_EPStartXfer+0x11bc>)
 801461e:	4694      	mov	ip, r2
 8014620:	4463      	add	r3, ip
 8014622:	21c8      	movs	r1, #200	@ 0xc8
 8014624:	187a      	adds	r2, r7, r1
 8014626:	6013      	str	r3, [r2, #0]
 8014628:	187b      	adds	r3, r7, r1
 801462a:	681b      	ldr	r3, [r3, #0]
 801462c:	881b      	ldrh	r3, [r3, #0]
 801462e:	b29b      	uxth	r3, r3
 8014630:	059b      	lsls	r3, r3, #22
 8014632:	0d9b      	lsrs	r3, r3, #22
 8014634:	b29a      	uxth	r2, r3
 8014636:	187b      	adds	r3, r7, r1
 8014638:	681b      	ldr	r3, [r3, #0]
 801463a:	801a      	strh	r2, [r3, #0]
 801463c:	1d7b      	adds	r3, r7, #5
 801463e:	33ff      	adds	r3, #255	@ 0xff
 8014640:	681b      	ldr	r3, [r3, #0]
 8014642:	2b3e      	cmp	r3, #62	@ 0x3e
 8014644:	d925      	bls.n	8014692 <USB_EPStartXfer+0xfe6>
 8014646:	1d7b      	adds	r3, r7, #5
 8014648:	33ff      	adds	r3, #255	@ 0xff
 801464a:	681b      	ldr	r3, [r3, #0]
 801464c:	095b      	lsrs	r3, r3, #5
 801464e:	21dc      	movs	r1, #220	@ 0xdc
 8014650:	187a      	adds	r2, r7, r1
 8014652:	6013      	str	r3, [r2, #0]
 8014654:	1d7b      	adds	r3, r7, #5
 8014656:	33ff      	adds	r3, #255	@ 0xff
 8014658:	681b      	ldr	r3, [r3, #0]
 801465a:	221f      	movs	r2, #31
 801465c:	4013      	ands	r3, r2
 801465e:	d104      	bne.n	801466a <USB_EPStartXfer+0xfbe>
 8014660:	187b      	adds	r3, r7, r1
 8014662:	681b      	ldr	r3, [r3, #0]
 8014664:	3b01      	subs	r3, #1
 8014666:	187a      	adds	r2, r7, r1
 8014668:	6013      	str	r3, [r2, #0]
 801466a:	21c8      	movs	r1, #200	@ 0xc8
 801466c:	187b      	adds	r3, r7, r1
 801466e:	681b      	ldr	r3, [r3, #0]
 8014670:	881b      	ldrh	r3, [r3, #0]
 8014672:	b29a      	uxth	r2, r3
 8014674:	23dc      	movs	r3, #220	@ 0xdc
 8014676:	18fb      	adds	r3, r7, r3
 8014678:	681b      	ldr	r3, [r3, #0]
 801467a:	b29b      	uxth	r3, r3
 801467c:	029b      	lsls	r3, r3, #10
 801467e:	b29b      	uxth	r3, r3
 8014680:	4313      	orrs	r3, r2
 8014682:	b29b      	uxth	r3, r3
 8014684:	4a79      	ldr	r2, [pc, #484]	@ (801486c <USB_EPStartXfer+0x11c0>)
 8014686:	4313      	orrs	r3, r2
 8014688:	b29a      	uxth	r2, r3
 801468a:	187b      	adds	r3, r7, r1
 801468c:	681b      	ldr	r3, [r3, #0]
 801468e:	801a      	strh	r2, [r3, #0]
 8014690:	e058      	b.n	8014744 <USB_EPStartXfer+0x1098>
 8014692:	1d7b      	adds	r3, r7, #5
 8014694:	33ff      	adds	r3, #255	@ 0xff
 8014696:	681b      	ldr	r3, [r3, #0]
 8014698:	2b00      	cmp	r3, #0
 801469a:	d10b      	bne.n	80146b4 <USB_EPStartXfer+0x1008>
 801469c:	21c8      	movs	r1, #200	@ 0xc8
 801469e:	187b      	adds	r3, r7, r1
 80146a0:	681b      	ldr	r3, [r3, #0]
 80146a2:	881b      	ldrh	r3, [r3, #0]
 80146a4:	b29b      	uxth	r3, r3
 80146a6:	4a71      	ldr	r2, [pc, #452]	@ (801486c <USB_EPStartXfer+0x11c0>)
 80146a8:	4313      	orrs	r3, r2
 80146aa:	b29a      	uxth	r2, r3
 80146ac:	187b      	adds	r3, r7, r1
 80146ae:	681b      	ldr	r3, [r3, #0]
 80146b0:	801a      	strh	r2, [r3, #0]
 80146b2:	e047      	b.n	8014744 <USB_EPStartXfer+0x1098>
 80146b4:	1d7b      	adds	r3, r7, #5
 80146b6:	33ff      	adds	r3, #255	@ 0xff
 80146b8:	681b      	ldr	r3, [r3, #0]
 80146ba:	085b      	lsrs	r3, r3, #1
 80146bc:	21dc      	movs	r1, #220	@ 0xdc
 80146be:	187a      	adds	r2, r7, r1
 80146c0:	6013      	str	r3, [r2, #0]
 80146c2:	1d7b      	adds	r3, r7, #5
 80146c4:	33ff      	adds	r3, #255	@ 0xff
 80146c6:	681b      	ldr	r3, [r3, #0]
 80146c8:	2201      	movs	r2, #1
 80146ca:	4013      	ands	r3, r2
 80146cc:	d004      	beq.n	80146d8 <USB_EPStartXfer+0x102c>
 80146ce:	187b      	adds	r3, r7, r1
 80146d0:	681b      	ldr	r3, [r3, #0]
 80146d2:	3301      	adds	r3, #1
 80146d4:	187a      	adds	r2, r7, r1
 80146d6:	6013      	str	r3, [r2, #0]
 80146d8:	21c8      	movs	r1, #200	@ 0xc8
 80146da:	187b      	adds	r3, r7, r1
 80146dc:	681b      	ldr	r3, [r3, #0]
 80146de:	881b      	ldrh	r3, [r3, #0]
 80146e0:	b29a      	uxth	r2, r3
 80146e2:	23dc      	movs	r3, #220	@ 0xdc
 80146e4:	18fb      	adds	r3, r7, r3
 80146e6:	681b      	ldr	r3, [r3, #0]
 80146e8:	b29b      	uxth	r3, r3
 80146ea:	029b      	lsls	r3, r3, #10
 80146ec:	b29b      	uxth	r3, r3
 80146ee:	4313      	orrs	r3, r2
 80146f0:	b29a      	uxth	r2, r3
 80146f2:	187b      	adds	r3, r7, r1
 80146f4:	681b      	ldr	r3, [r3, #0]
 80146f6:	801a      	strh	r2, [r3, #0]
 80146f8:	e024      	b.n	8014744 <USB_EPStartXfer+0x1098>
 80146fa:	683b      	ldr	r3, [r7, #0]
 80146fc:	785b      	ldrb	r3, [r3, #1]
 80146fe:	2b01      	cmp	r3, #1
 8014700:	d120      	bne.n	8014744 <USB_EPStartXfer+0x1098>
 8014702:	687b      	ldr	r3, [r7, #4]
 8014704:	21d4      	movs	r1, #212	@ 0xd4
 8014706:	187a      	adds	r2, r7, r1
 8014708:	6013      	str	r3, [r2, #0]
 801470a:	687b      	ldr	r3, [r7, #4]
 801470c:	2250      	movs	r2, #80	@ 0x50
 801470e:	5a9b      	ldrh	r3, [r3, r2]
 8014710:	b29b      	uxth	r3, r3
 8014712:	001a      	movs	r2, r3
 8014714:	187b      	adds	r3, r7, r1
 8014716:	681b      	ldr	r3, [r3, #0]
 8014718:	189b      	adds	r3, r3, r2
 801471a:	187a      	adds	r2, r7, r1
 801471c:	6013      	str	r3, [r2, #0]
 801471e:	683b      	ldr	r3, [r7, #0]
 8014720:	781b      	ldrb	r3, [r3, #0]
 8014722:	00da      	lsls	r2, r3, #3
 8014724:	187b      	adds	r3, r7, r1
 8014726:	681b      	ldr	r3, [r3, #0]
 8014728:	18d3      	adds	r3, r2, r3
 801472a:	4a4f      	ldr	r2, [pc, #316]	@ (8014868 <USB_EPStartXfer+0x11bc>)
 801472c:	4694      	mov	ip, r2
 801472e:	4463      	add	r3, ip
 8014730:	21d0      	movs	r1, #208	@ 0xd0
 8014732:	187a      	adds	r2, r7, r1
 8014734:	6013      	str	r3, [r2, #0]
 8014736:	1d7b      	adds	r3, r7, #5
 8014738:	33ff      	adds	r3, #255	@ 0xff
 801473a:	681b      	ldr	r3, [r3, #0]
 801473c:	b29a      	uxth	r2, r3
 801473e:	187b      	adds	r3, r7, r1
 8014740:	681b      	ldr	r3, [r3, #0]
 8014742:	801a      	strh	r2, [r3, #0]
 8014744:	687b      	ldr	r3, [r7, #4]
 8014746:	22c4      	movs	r2, #196	@ 0xc4
 8014748:	18ba      	adds	r2, r7, r2
 801474a:	6013      	str	r3, [r2, #0]
 801474c:	683b      	ldr	r3, [r7, #0]
 801474e:	785b      	ldrb	r3, [r3, #1]
 8014750:	2b00      	cmp	r3, #0
 8014752:	d000      	beq.n	8014756 <USB_EPStartXfer+0x10aa>
 8014754:	e08c      	b.n	8014870 <USB_EPStartXfer+0x11c4>
 8014756:	687b      	ldr	r3, [r7, #4]
 8014758:	21bc      	movs	r1, #188	@ 0xbc
 801475a:	187a      	adds	r2, r7, r1
 801475c:	6013      	str	r3, [r2, #0]
 801475e:	687b      	ldr	r3, [r7, #4]
 8014760:	2250      	movs	r2, #80	@ 0x50
 8014762:	5a9b      	ldrh	r3, [r3, r2]
 8014764:	b29b      	uxth	r3, r3
 8014766:	001a      	movs	r2, r3
 8014768:	187b      	adds	r3, r7, r1
 801476a:	681b      	ldr	r3, [r3, #0]
 801476c:	189b      	adds	r3, r3, r2
 801476e:	187a      	adds	r2, r7, r1
 8014770:	6013      	str	r3, [r2, #0]
 8014772:	683b      	ldr	r3, [r7, #0]
 8014774:	781b      	ldrb	r3, [r3, #0]
 8014776:	00da      	lsls	r2, r3, #3
 8014778:	187b      	adds	r3, r7, r1
 801477a:	681b      	ldr	r3, [r3, #0]
 801477c:	18d3      	adds	r3, r2, r3
 801477e:	4a37      	ldr	r2, [pc, #220]	@ (801485c <USB_EPStartXfer+0x11b0>)
 8014780:	4694      	mov	ip, r2
 8014782:	4463      	add	r3, ip
 8014784:	21b8      	movs	r1, #184	@ 0xb8
 8014786:	187a      	adds	r2, r7, r1
 8014788:	6013      	str	r3, [r2, #0]
 801478a:	187b      	adds	r3, r7, r1
 801478c:	681b      	ldr	r3, [r3, #0]
 801478e:	881b      	ldrh	r3, [r3, #0]
 8014790:	b29b      	uxth	r3, r3
 8014792:	059b      	lsls	r3, r3, #22
 8014794:	0d9b      	lsrs	r3, r3, #22
 8014796:	b29a      	uxth	r2, r3
 8014798:	187b      	adds	r3, r7, r1
 801479a:	681b      	ldr	r3, [r3, #0]
 801479c:	801a      	strh	r2, [r3, #0]
 801479e:	1d7b      	adds	r3, r7, #5
 80147a0:	33ff      	adds	r3, #255	@ 0xff
 80147a2:	681b      	ldr	r3, [r3, #0]
 80147a4:	2b3e      	cmp	r3, #62	@ 0x3e
 80147a6:	d925      	bls.n	80147f4 <USB_EPStartXfer+0x1148>
 80147a8:	1d7b      	adds	r3, r7, #5
 80147aa:	33ff      	adds	r3, #255	@ 0xff
 80147ac:	681b      	ldr	r3, [r3, #0]
 80147ae:	095b      	lsrs	r3, r3, #5
 80147b0:	21d8      	movs	r1, #216	@ 0xd8
 80147b2:	187a      	adds	r2, r7, r1
 80147b4:	6013      	str	r3, [r2, #0]
 80147b6:	1d7b      	adds	r3, r7, #5
 80147b8:	33ff      	adds	r3, #255	@ 0xff
 80147ba:	681b      	ldr	r3, [r3, #0]
 80147bc:	221f      	movs	r2, #31
 80147be:	4013      	ands	r3, r2
 80147c0:	d104      	bne.n	80147cc <USB_EPStartXfer+0x1120>
 80147c2:	187b      	adds	r3, r7, r1
 80147c4:	681b      	ldr	r3, [r3, #0]
 80147c6:	3b01      	subs	r3, #1
 80147c8:	187a      	adds	r2, r7, r1
 80147ca:	6013      	str	r3, [r2, #0]
 80147cc:	21b8      	movs	r1, #184	@ 0xb8
 80147ce:	187b      	adds	r3, r7, r1
 80147d0:	681b      	ldr	r3, [r3, #0]
 80147d2:	881b      	ldrh	r3, [r3, #0]
 80147d4:	b29a      	uxth	r2, r3
 80147d6:	23d8      	movs	r3, #216	@ 0xd8
 80147d8:	18fb      	adds	r3, r7, r3
 80147da:	681b      	ldr	r3, [r3, #0]
 80147dc:	b29b      	uxth	r3, r3
 80147de:	029b      	lsls	r3, r3, #10
 80147e0:	b29b      	uxth	r3, r3
 80147e2:	4313      	orrs	r3, r2
 80147e4:	b29b      	uxth	r3, r3
 80147e6:	4a21      	ldr	r2, [pc, #132]	@ (801486c <USB_EPStartXfer+0x11c0>)
 80147e8:	4313      	orrs	r3, r2
 80147ea:	b29a      	uxth	r2, r3
 80147ec:	187b      	adds	r3, r7, r1
 80147ee:	681b      	ldr	r3, [r3, #0]
 80147f0:	801a      	strh	r2, [r3, #0]
 80147f2:	e062      	b.n	80148ba <USB_EPStartXfer+0x120e>
 80147f4:	1d7b      	adds	r3, r7, #5
 80147f6:	33ff      	adds	r3, #255	@ 0xff
 80147f8:	681b      	ldr	r3, [r3, #0]
 80147fa:	2b00      	cmp	r3, #0
 80147fc:	d10b      	bne.n	8014816 <USB_EPStartXfer+0x116a>
 80147fe:	21b8      	movs	r1, #184	@ 0xb8
 8014800:	187b      	adds	r3, r7, r1
 8014802:	681b      	ldr	r3, [r3, #0]
 8014804:	881b      	ldrh	r3, [r3, #0]
 8014806:	b29b      	uxth	r3, r3
 8014808:	4a18      	ldr	r2, [pc, #96]	@ (801486c <USB_EPStartXfer+0x11c0>)
 801480a:	4313      	orrs	r3, r2
 801480c:	b29a      	uxth	r2, r3
 801480e:	187b      	adds	r3, r7, r1
 8014810:	681b      	ldr	r3, [r3, #0]
 8014812:	801a      	strh	r2, [r3, #0]
 8014814:	e051      	b.n	80148ba <USB_EPStartXfer+0x120e>
 8014816:	1d7b      	adds	r3, r7, #5
 8014818:	33ff      	adds	r3, #255	@ 0xff
 801481a:	681b      	ldr	r3, [r3, #0]
 801481c:	085b      	lsrs	r3, r3, #1
 801481e:	21d8      	movs	r1, #216	@ 0xd8
 8014820:	187a      	adds	r2, r7, r1
 8014822:	6013      	str	r3, [r2, #0]
 8014824:	1d7b      	adds	r3, r7, #5
 8014826:	33ff      	adds	r3, #255	@ 0xff
 8014828:	681b      	ldr	r3, [r3, #0]
 801482a:	2201      	movs	r2, #1
 801482c:	4013      	ands	r3, r2
 801482e:	d004      	beq.n	801483a <USB_EPStartXfer+0x118e>
 8014830:	187b      	adds	r3, r7, r1
 8014832:	681b      	ldr	r3, [r3, #0]
 8014834:	3301      	adds	r3, #1
 8014836:	187a      	adds	r2, r7, r1
 8014838:	6013      	str	r3, [r2, #0]
 801483a:	21b8      	movs	r1, #184	@ 0xb8
 801483c:	187b      	adds	r3, r7, r1
 801483e:	681b      	ldr	r3, [r3, #0]
 8014840:	881b      	ldrh	r3, [r3, #0]
 8014842:	b29a      	uxth	r2, r3
 8014844:	23d8      	movs	r3, #216	@ 0xd8
 8014846:	18fb      	adds	r3, r7, r3
 8014848:	681b      	ldr	r3, [r3, #0]
 801484a:	b29b      	uxth	r3, r3
 801484c:	029b      	lsls	r3, r3, #10
 801484e:	b29b      	uxth	r3, r3
 8014850:	4313      	orrs	r3, r2
 8014852:	b29a      	uxth	r2, r3
 8014854:	187b      	adds	r3, r7, r1
 8014856:	681b      	ldr	r3, [r3, #0]
 8014858:	801a      	strh	r2, [r3, #0]
 801485a:	e02e      	b.n	80148ba <USB_EPStartXfer+0x120e>
 801485c:	00000406 	.word	0x00000406
 8014860:	ffff8f8f 	.word	0xffff8f8f
 8014864:	ffff80c0 	.word	0xffff80c0
 8014868:	00000402 	.word	0x00000402
 801486c:	ffff8000 	.word	0xffff8000
 8014870:	683b      	ldr	r3, [r7, #0]
 8014872:	785b      	ldrb	r3, [r3, #1]
 8014874:	2b01      	cmp	r3, #1
 8014876:	d120      	bne.n	80148ba <USB_EPStartXfer+0x120e>
 8014878:	687b      	ldr	r3, [r7, #4]
 801487a:	2250      	movs	r2, #80	@ 0x50
 801487c:	5a9b      	ldrh	r3, [r3, r2]
 801487e:	b29b      	uxth	r3, r3
 8014880:	001a      	movs	r2, r3
 8014882:	21c4      	movs	r1, #196	@ 0xc4
 8014884:	187b      	adds	r3, r7, r1
 8014886:	681b      	ldr	r3, [r3, #0]
 8014888:	189b      	adds	r3, r3, r2
 801488a:	187a      	adds	r2, r7, r1
 801488c:	6013      	str	r3, [r2, #0]
 801488e:	683b      	ldr	r3, [r7, #0]
 8014890:	781b      	ldrb	r3, [r3, #0]
 8014892:	00da      	lsls	r2, r3, #3
 8014894:	187b      	adds	r3, r7, r1
 8014896:	681b      	ldr	r3, [r3, #0]
 8014898:	18d3      	adds	r3, r2, r3
 801489a:	4a1d      	ldr	r2, [pc, #116]	@ (8014910 <USB_EPStartXfer+0x1264>)
 801489c:	4694      	mov	ip, r2
 801489e:	4463      	add	r3, ip
 80148a0:	21c0      	movs	r1, #192	@ 0xc0
 80148a2:	187a      	adds	r2, r7, r1
 80148a4:	6013      	str	r3, [r2, #0]
 80148a6:	1d7b      	adds	r3, r7, #5
 80148a8:	33ff      	adds	r3, #255	@ 0xff
 80148aa:	681b      	ldr	r3, [r3, #0]
 80148ac:	b29a      	uxth	r2, r3
 80148ae:	187b      	adds	r3, r7, r1
 80148b0:	681b      	ldr	r3, [r3, #0]
 80148b2:	801a      	strh	r2, [r3, #0]
 80148b4:	e001      	b.n	80148ba <USB_EPStartXfer+0x120e>
      }
      else
      {
        return HAL_ERROR;
 80148b6:	2301      	movs	r3, #1
 80148b8:	e025      	b.n	8014906 <USB_EPStartXfer+0x125a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80148ba:	687a      	ldr	r2, [r7, #4]
 80148bc:	683b      	ldr	r3, [r7, #0]
 80148be:	781b      	ldrb	r3, [r3, #0]
 80148c0:	009b      	lsls	r3, r3, #2
 80148c2:	18d3      	adds	r3, r2, r3
 80148c4:	881b      	ldrh	r3, [r3, #0]
 80148c6:	b29a      	uxth	r2, r3
 80148c8:	208a      	movs	r0, #138	@ 0x8a
 80148ca:	183b      	adds	r3, r7, r0
 80148cc:	4911      	ldr	r1, [pc, #68]	@ (8014914 <USB_EPStartXfer+0x1268>)
 80148ce:	400a      	ands	r2, r1
 80148d0:	801a      	strh	r2, [r3, #0]
 80148d2:	183b      	adds	r3, r7, r0
 80148d4:	183a      	adds	r2, r7, r0
 80148d6:	8812      	ldrh	r2, [r2, #0]
 80148d8:	2180      	movs	r1, #128	@ 0x80
 80148da:	0149      	lsls	r1, r1, #5
 80148dc:	404a      	eors	r2, r1
 80148de:	801a      	strh	r2, [r3, #0]
 80148e0:	183b      	adds	r3, r7, r0
 80148e2:	183a      	adds	r2, r7, r0
 80148e4:	8812      	ldrh	r2, [r2, #0]
 80148e6:	2180      	movs	r1, #128	@ 0x80
 80148e8:	0189      	lsls	r1, r1, #6
 80148ea:	404a      	eors	r2, r1
 80148ec:	801a      	strh	r2, [r3, #0]
 80148ee:	687a      	ldr	r2, [r7, #4]
 80148f0:	683b      	ldr	r3, [r7, #0]
 80148f2:	781b      	ldrb	r3, [r3, #0]
 80148f4:	009b      	lsls	r3, r3, #2
 80148f6:	18d3      	adds	r3, r2, r3
 80148f8:	183a      	adds	r2, r7, r0
 80148fa:	8812      	ldrh	r2, [r2, #0]
 80148fc:	4906      	ldr	r1, [pc, #24]	@ (8014918 <USB_EPStartXfer+0x126c>)
 80148fe:	430a      	orrs	r2, r1
 8014900:	b292      	uxth	r2, r2
 8014902:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 8014904:	2300      	movs	r3, #0
}
 8014906:	0018      	movs	r0, r3
 8014908:	46bd      	mov	sp, r7
 801490a:	b043      	add	sp, #268	@ 0x10c
 801490c:	bd90      	pop	{r4, r7, pc}
 801490e:	46c0      	nop			@ (mov r8, r8)
 8014910:	00000406 	.word	0x00000406
 8014914:	ffffbf8f 	.word	0xffffbf8f
 8014918:	ffff8080 	.word	0xffff8080

0801491c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801491c:	b580      	push	{r7, lr}
 801491e:	b084      	sub	sp, #16
 8014920:	af00      	add	r7, sp, #0
 8014922:	6078      	str	r0, [r7, #4]
 8014924:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8014926:	683b      	ldr	r3, [r7, #0]
 8014928:	785b      	ldrb	r3, [r3, #1]
 801492a:	2b00      	cmp	r3, #0
 801492c:	d01d      	beq.n	801496a <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 801492e:	687a      	ldr	r2, [r7, #4]
 8014930:	683b      	ldr	r3, [r7, #0]
 8014932:	781b      	ldrb	r3, [r3, #0]
 8014934:	009b      	lsls	r3, r3, #2
 8014936:	18d3      	adds	r3, r2, r3
 8014938:	881b      	ldrh	r3, [r3, #0]
 801493a:	b29a      	uxth	r2, r3
 801493c:	200c      	movs	r0, #12
 801493e:	183b      	adds	r3, r7, r0
 8014940:	491b      	ldr	r1, [pc, #108]	@ (80149b0 <USB_EPSetStall+0x94>)
 8014942:	400a      	ands	r2, r1
 8014944:	801a      	strh	r2, [r3, #0]
 8014946:	183b      	adds	r3, r7, r0
 8014948:	183a      	adds	r2, r7, r0
 801494a:	8812      	ldrh	r2, [r2, #0]
 801494c:	2110      	movs	r1, #16
 801494e:	404a      	eors	r2, r1
 8014950:	801a      	strh	r2, [r3, #0]
 8014952:	687a      	ldr	r2, [r7, #4]
 8014954:	683b      	ldr	r3, [r7, #0]
 8014956:	781b      	ldrb	r3, [r3, #0]
 8014958:	009b      	lsls	r3, r3, #2
 801495a:	18d3      	adds	r3, r2, r3
 801495c:	183a      	adds	r2, r7, r0
 801495e:	8812      	ldrh	r2, [r2, #0]
 8014960:	4914      	ldr	r1, [pc, #80]	@ (80149b4 <USB_EPSetStall+0x98>)
 8014962:	430a      	orrs	r2, r1
 8014964:	b292      	uxth	r2, r2
 8014966:	801a      	strh	r2, [r3, #0]
 8014968:	e01d      	b.n	80149a6 <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 801496a:	687a      	ldr	r2, [r7, #4]
 801496c:	683b      	ldr	r3, [r7, #0]
 801496e:	781b      	ldrb	r3, [r3, #0]
 8014970:	009b      	lsls	r3, r3, #2
 8014972:	18d3      	adds	r3, r2, r3
 8014974:	881b      	ldrh	r3, [r3, #0]
 8014976:	b29a      	uxth	r2, r3
 8014978:	200e      	movs	r0, #14
 801497a:	183b      	adds	r3, r7, r0
 801497c:	490e      	ldr	r1, [pc, #56]	@ (80149b8 <USB_EPSetStall+0x9c>)
 801497e:	400a      	ands	r2, r1
 8014980:	801a      	strh	r2, [r3, #0]
 8014982:	183b      	adds	r3, r7, r0
 8014984:	183a      	adds	r2, r7, r0
 8014986:	8812      	ldrh	r2, [r2, #0]
 8014988:	2180      	movs	r1, #128	@ 0x80
 801498a:	0149      	lsls	r1, r1, #5
 801498c:	404a      	eors	r2, r1
 801498e:	801a      	strh	r2, [r3, #0]
 8014990:	687a      	ldr	r2, [r7, #4]
 8014992:	683b      	ldr	r3, [r7, #0]
 8014994:	781b      	ldrb	r3, [r3, #0]
 8014996:	009b      	lsls	r3, r3, #2
 8014998:	18d3      	adds	r3, r2, r3
 801499a:	183a      	adds	r2, r7, r0
 801499c:	8812      	ldrh	r2, [r2, #0]
 801499e:	4905      	ldr	r1, [pc, #20]	@ (80149b4 <USB_EPSetStall+0x98>)
 80149a0:	430a      	orrs	r2, r1
 80149a2:	b292      	uxth	r2, r2
 80149a4:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 80149a6:	2300      	movs	r3, #0
}
 80149a8:	0018      	movs	r0, r3
 80149aa:	46bd      	mov	sp, r7
 80149ac:	b004      	add	sp, #16
 80149ae:	bd80      	pop	{r7, pc}
 80149b0:	ffff8fbf 	.word	0xffff8fbf
 80149b4:	ffff8080 	.word	0xffff8080
 80149b8:	ffffbf8f 	.word	0xffffbf8f

080149bc <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80149bc:	b580      	push	{r7, lr}
 80149be:	b086      	sub	sp, #24
 80149c0:	af00      	add	r7, sp, #0
 80149c2:	6078      	str	r0, [r7, #4]
 80149c4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80149c6:	683b      	ldr	r3, [r7, #0]
 80149c8:	7b1b      	ldrb	r3, [r3, #12]
 80149ca:	2b00      	cmp	r3, #0
 80149cc:	d000      	beq.n	80149d0 <USB_EPClearStall+0x14>
 80149ce:	e095      	b.n	8014afc <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 80149d0:	683b      	ldr	r3, [r7, #0]
 80149d2:	785b      	ldrb	r3, [r3, #1]
 80149d4:	2b00      	cmp	r3, #0
 80149d6:	d046      	beq.n	8014a66 <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80149d8:	687a      	ldr	r2, [r7, #4]
 80149da:	683b      	ldr	r3, [r7, #0]
 80149dc:	781b      	ldrb	r3, [r3, #0]
 80149de:	009b      	lsls	r3, r3, #2
 80149e0:	18d2      	adds	r2, r2, r3
 80149e2:	2110      	movs	r1, #16
 80149e4:	187b      	adds	r3, r7, r1
 80149e6:	8812      	ldrh	r2, [r2, #0]
 80149e8:	801a      	strh	r2, [r3, #0]
 80149ea:	187b      	adds	r3, r7, r1
 80149ec:	881b      	ldrh	r3, [r3, #0]
 80149ee:	2240      	movs	r2, #64	@ 0x40
 80149f0:	4013      	ands	r3, r2
 80149f2:	d016      	beq.n	8014a22 <USB_EPClearStall+0x66>
 80149f4:	687a      	ldr	r2, [r7, #4]
 80149f6:	683b      	ldr	r3, [r7, #0]
 80149f8:	781b      	ldrb	r3, [r3, #0]
 80149fa:	009b      	lsls	r3, r3, #2
 80149fc:	18d3      	adds	r3, r2, r3
 80149fe:	881b      	ldrh	r3, [r3, #0]
 8014a00:	b29a      	uxth	r2, r3
 8014a02:	200e      	movs	r0, #14
 8014a04:	183b      	adds	r3, r7, r0
 8014a06:	4940      	ldr	r1, [pc, #256]	@ (8014b08 <USB_EPClearStall+0x14c>)
 8014a08:	400a      	ands	r2, r1
 8014a0a:	801a      	strh	r2, [r3, #0]
 8014a0c:	687a      	ldr	r2, [r7, #4]
 8014a0e:	683b      	ldr	r3, [r7, #0]
 8014a10:	781b      	ldrb	r3, [r3, #0]
 8014a12:	009b      	lsls	r3, r3, #2
 8014a14:	18d3      	adds	r3, r2, r3
 8014a16:	183a      	adds	r2, r7, r0
 8014a18:	8812      	ldrh	r2, [r2, #0]
 8014a1a:	493c      	ldr	r1, [pc, #240]	@ (8014b0c <USB_EPClearStall+0x150>)
 8014a1c:	430a      	orrs	r2, r1
 8014a1e:	b292      	uxth	r2, r2
 8014a20:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8014a22:	683b      	ldr	r3, [r7, #0]
 8014a24:	78db      	ldrb	r3, [r3, #3]
 8014a26:	2b01      	cmp	r3, #1
 8014a28:	d068      	beq.n	8014afc <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8014a2a:	687a      	ldr	r2, [r7, #4]
 8014a2c:	683b      	ldr	r3, [r7, #0]
 8014a2e:	781b      	ldrb	r3, [r3, #0]
 8014a30:	009b      	lsls	r3, r3, #2
 8014a32:	18d3      	adds	r3, r2, r3
 8014a34:	881b      	ldrh	r3, [r3, #0]
 8014a36:	b29a      	uxth	r2, r3
 8014a38:	200c      	movs	r0, #12
 8014a3a:	183b      	adds	r3, r7, r0
 8014a3c:	4934      	ldr	r1, [pc, #208]	@ (8014b10 <USB_EPClearStall+0x154>)
 8014a3e:	400a      	ands	r2, r1
 8014a40:	801a      	strh	r2, [r3, #0]
 8014a42:	183b      	adds	r3, r7, r0
 8014a44:	183a      	adds	r2, r7, r0
 8014a46:	8812      	ldrh	r2, [r2, #0]
 8014a48:	2120      	movs	r1, #32
 8014a4a:	404a      	eors	r2, r1
 8014a4c:	801a      	strh	r2, [r3, #0]
 8014a4e:	687a      	ldr	r2, [r7, #4]
 8014a50:	683b      	ldr	r3, [r7, #0]
 8014a52:	781b      	ldrb	r3, [r3, #0]
 8014a54:	009b      	lsls	r3, r3, #2
 8014a56:	18d3      	adds	r3, r2, r3
 8014a58:	183a      	adds	r2, r7, r0
 8014a5a:	8812      	ldrh	r2, [r2, #0]
 8014a5c:	492d      	ldr	r1, [pc, #180]	@ (8014b14 <USB_EPClearStall+0x158>)
 8014a5e:	430a      	orrs	r2, r1
 8014a60:	b292      	uxth	r2, r2
 8014a62:	801a      	strh	r2, [r3, #0]
 8014a64:	e04a      	b.n	8014afc <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8014a66:	687a      	ldr	r2, [r7, #4]
 8014a68:	683b      	ldr	r3, [r7, #0]
 8014a6a:	781b      	ldrb	r3, [r3, #0]
 8014a6c:	009b      	lsls	r3, r3, #2
 8014a6e:	18d2      	adds	r2, r2, r3
 8014a70:	2116      	movs	r1, #22
 8014a72:	187b      	adds	r3, r7, r1
 8014a74:	8812      	ldrh	r2, [r2, #0]
 8014a76:	801a      	strh	r2, [r3, #0]
 8014a78:	187b      	adds	r3, r7, r1
 8014a7a:	881a      	ldrh	r2, [r3, #0]
 8014a7c:	2380      	movs	r3, #128	@ 0x80
 8014a7e:	01db      	lsls	r3, r3, #7
 8014a80:	4013      	ands	r3, r2
 8014a82:	d016      	beq.n	8014ab2 <USB_EPClearStall+0xf6>
 8014a84:	687a      	ldr	r2, [r7, #4]
 8014a86:	683b      	ldr	r3, [r7, #0]
 8014a88:	781b      	ldrb	r3, [r3, #0]
 8014a8a:	009b      	lsls	r3, r3, #2
 8014a8c:	18d3      	adds	r3, r2, r3
 8014a8e:	881b      	ldrh	r3, [r3, #0]
 8014a90:	b29a      	uxth	r2, r3
 8014a92:	2014      	movs	r0, #20
 8014a94:	183b      	adds	r3, r7, r0
 8014a96:	491c      	ldr	r1, [pc, #112]	@ (8014b08 <USB_EPClearStall+0x14c>)
 8014a98:	400a      	ands	r2, r1
 8014a9a:	801a      	strh	r2, [r3, #0]
 8014a9c:	687a      	ldr	r2, [r7, #4]
 8014a9e:	683b      	ldr	r3, [r7, #0]
 8014aa0:	781b      	ldrb	r3, [r3, #0]
 8014aa2:	009b      	lsls	r3, r3, #2
 8014aa4:	18d3      	adds	r3, r2, r3
 8014aa6:	183a      	adds	r2, r7, r0
 8014aa8:	8812      	ldrh	r2, [r2, #0]
 8014aaa:	491b      	ldr	r1, [pc, #108]	@ (8014b18 <USB_EPClearStall+0x15c>)
 8014aac:	430a      	orrs	r2, r1
 8014aae:	b292      	uxth	r2, r2
 8014ab0:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8014ab2:	687a      	ldr	r2, [r7, #4]
 8014ab4:	683b      	ldr	r3, [r7, #0]
 8014ab6:	781b      	ldrb	r3, [r3, #0]
 8014ab8:	009b      	lsls	r3, r3, #2
 8014aba:	18d3      	adds	r3, r2, r3
 8014abc:	881b      	ldrh	r3, [r3, #0]
 8014abe:	b29a      	uxth	r2, r3
 8014ac0:	2012      	movs	r0, #18
 8014ac2:	183b      	adds	r3, r7, r0
 8014ac4:	4915      	ldr	r1, [pc, #84]	@ (8014b1c <USB_EPClearStall+0x160>)
 8014ac6:	400a      	ands	r2, r1
 8014ac8:	801a      	strh	r2, [r3, #0]
 8014aca:	183b      	adds	r3, r7, r0
 8014acc:	183a      	adds	r2, r7, r0
 8014ace:	8812      	ldrh	r2, [r2, #0]
 8014ad0:	2180      	movs	r1, #128	@ 0x80
 8014ad2:	0149      	lsls	r1, r1, #5
 8014ad4:	404a      	eors	r2, r1
 8014ad6:	801a      	strh	r2, [r3, #0]
 8014ad8:	183b      	adds	r3, r7, r0
 8014ada:	183a      	adds	r2, r7, r0
 8014adc:	8812      	ldrh	r2, [r2, #0]
 8014ade:	2180      	movs	r1, #128	@ 0x80
 8014ae0:	0189      	lsls	r1, r1, #6
 8014ae2:	404a      	eors	r2, r1
 8014ae4:	801a      	strh	r2, [r3, #0]
 8014ae6:	687a      	ldr	r2, [r7, #4]
 8014ae8:	683b      	ldr	r3, [r7, #0]
 8014aea:	781b      	ldrb	r3, [r3, #0]
 8014aec:	009b      	lsls	r3, r3, #2
 8014aee:	18d3      	adds	r3, r2, r3
 8014af0:	183a      	adds	r2, r7, r0
 8014af2:	8812      	ldrh	r2, [r2, #0]
 8014af4:	4907      	ldr	r1, [pc, #28]	@ (8014b14 <USB_EPClearStall+0x158>)
 8014af6:	430a      	orrs	r2, r1
 8014af8:	b292      	uxth	r2, r2
 8014afa:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 8014afc:	2300      	movs	r3, #0
}
 8014afe:	0018      	movs	r0, r3
 8014b00:	46bd      	mov	sp, r7
 8014b02:	b006      	add	sp, #24
 8014b04:	bd80      	pop	{r7, pc}
 8014b06:	46c0      	nop			@ (mov r8, r8)
 8014b08:	ffff8f8f 	.word	0xffff8f8f
 8014b0c:	ffff80c0 	.word	0xffff80c0
 8014b10:	ffff8fbf 	.word	0xffff8fbf
 8014b14:	ffff8080 	.word	0xffff8080
 8014b18:	ffffc080 	.word	0xffffc080
 8014b1c:	ffffbf8f 	.word	0xffffbf8f

08014b20 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8014b20:	b580      	push	{r7, lr}
 8014b22:	b082      	sub	sp, #8
 8014b24:	af00      	add	r7, sp, #0
 8014b26:	6078      	str	r0, [r7, #4]
 8014b28:	000a      	movs	r2, r1
 8014b2a:	1cfb      	adds	r3, r7, #3
 8014b2c:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 8014b2e:	1cfb      	adds	r3, r7, #3
 8014b30:	781b      	ldrb	r3, [r3, #0]
 8014b32:	2b00      	cmp	r3, #0
 8014b34:	d103      	bne.n	8014b3e <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8014b36:	687b      	ldr	r3, [r7, #4]
 8014b38:	224c      	movs	r2, #76	@ 0x4c
 8014b3a:	2180      	movs	r1, #128	@ 0x80
 8014b3c:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 8014b3e:	2300      	movs	r3, #0
}
 8014b40:	0018      	movs	r0, r3
 8014b42:	46bd      	mov	sp, r7
 8014b44:	b002      	add	sp, #8
 8014b46:	bd80      	pop	{r7, pc}

08014b48 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8014b48:	b580      	push	{r7, lr}
 8014b4a:	b082      	sub	sp, #8
 8014b4c:	af00      	add	r7, sp, #0
 8014b4e:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8014b50:	687b      	ldr	r3, [r7, #4]
 8014b52:	2258      	movs	r2, #88	@ 0x58
 8014b54:	5a9b      	ldrh	r3, [r3, r2]
 8014b56:	b29b      	uxth	r3, r3
 8014b58:	4a05      	ldr	r2, [pc, #20]	@ (8014b70 <USB_DevConnect+0x28>)
 8014b5a:	4313      	orrs	r3, r2
 8014b5c:	b299      	uxth	r1, r3
 8014b5e:	687b      	ldr	r3, [r7, #4]
 8014b60:	2258      	movs	r2, #88	@ 0x58
 8014b62:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8014b64:	2300      	movs	r3, #0
}
 8014b66:	0018      	movs	r0, r3
 8014b68:	46bd      	mov	sp, r7
 8014b6a:	b002      	add	sp, #8
 8014b6c:	bd80      	pop	{r7, pc}
 8014b6e:	46c0      	nop			@ (mov r8, r8)
 8014b70:	ffff8000 	.word	0xffff8000

08014b74 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8014b74:	b580      	push	{r7, lr}
 8014b76:	b084      	sub	sp, #16
 8014b78:	af00      	add	r7, sp, #0
 8014b7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8014b7c:	687b      	ldr	r3, [r7, #4]
 8014b7e:	2244      	movs	r2, #68	@ 0x44
 8014b80:	5a9b      	ldrh	r3, [r3, r2]
 8014b82:	b29b      	uxth	r3, r3
 8014b84:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8014b86:	68fb      	ldr	r3, [r7, #12]
}
 8014b88:	0018      	movs	r0, r3
 8014b8a:	46bd      	mov	sp, r7
 8014b8c:	b004      	add	sp, #16
 8014b8e:	bd80      	pop	{r7, pc}

08014b90 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8014b90:	b580      	push	{r7, lr}
 8014b92:	b08a      	sub	sp, #40	@ 0x28
 8014b94:	af00      	add	r7, sp, #0
 8014b96:	60f8      	str	r0, [r7, #12]
 8014b98:	60b9      	str	r1, [r7, #8]
 8014b9a:	0019      	movs	r1, r3
 8014b9c:	1dbb      	adds	r3, r7, #6
 8014b9e:	801a      	strh	r2, [r3, #0]
 8014ba0:	1d3b      	adds	r3, r7, #4
 8014ba2:	1c0a      	adds	r2, r1, #0
 8014ba4:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8014ba6:	1d3b      	adds	r3, r7, #4
 8014ba8:	881b      	ldrh	r3, [r3, #0]
 8014baa:	3301      	adds	r3, #1
 8014bac:	085b      	lsrs	r3, r3, #1
 8014bae:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8014bb0:	68fb      	ldr	r3, [r7, #12]
 8014bb2:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8014bb4:	68bb      	ldr	r3, [r7, #8]
 8014bb6:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8014bb8:	1dbb      	adds	r3, r7, #6
 8014bba:	881a      	ldrh	r2, [r3, #0]
 8014bbc:	697b      	ldr	r3, [r7, #20]
 8014bbe:	18d3      	adds	r3, r2, r3
 8014bc0:	2280      	movs	r2, #128	@ 0x80
 8014bc2:	00d2      	lsls	r2, r2, #3
 8014bc4:	4694      	mov	ip, r2
 8014bc6:	4463      	add	r3, ip
 8014bc8:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8014bca:	69bb      	ldr	r3, [r7, #24]
 8014bcc:	627b      	str	r3, [r7, #36]	@ 0x24
 8014bce:	e020      	b.n	8014c12 <USB_WritePMA+0x82>
  {
    WrVal = pBuf[0];
 8014bd0:	69fb      	ldr	r3, [r7, #28]
 8014bd2:	781a      	ldrb	r2, [r3, #0]
 8014bd4:	2112      	movs	r1, #18
 8014bd6:	187b      	adds	r3, r7, r1
 8014bd8:	801a      	strh	r2, [r3, #0]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8014bda:	69fb      	ldr	r3, [r7, #28]
 8014bdc:	3301      	adds	r3, #1
 8014bde:	781b      	ldrb	r3, [r3, #0]
 8014be0:	021b      	lsls	r3, r3, #8
 8014be2:	b21a      	sxth	r2, r3
 8014be4:	187b      	adds	r3, r7, r1
 8014be6:	2000      	movs	r0, #0
 8014be8:	5e1b      	ldrsh	r3, [r3, r0]
 8014bea:	4313      	orrs	r3, r2
 8014bec:	b21a      	sxth	r2, r3
 8014bee:	187b      	adds	r3, r7, r1
 8014bf0:	801a      	strh	r2, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 8014bf2:	6a3b      	ldr	r3, [r7, #32]
 8014bf4:	187a      	adds	r2, r7, r1
 8014bf6:	8812      	ldrh	r2, [r2, #0]
 8014bf8:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8014bfa:	6a3b      	ldr	r3, [r7, #32]
 8014bfc:	3302      	adds	r3, #2
 8014bfe:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8014c00:	69fb      	ldr	r3, [r7, #28]
 8014c02:	3301      	adds	r3, #1
 8014c04:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8014c06:	69fb      	ldr	r3, [r7, #28]
 8014c08:	3301      	adds	r3, #1
 8014c0a:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8014c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014c0e:	3b01      	subs	r3, #1
 8014c10:	627b      	str	r3, [r7, #36]	@ 0x24
 8014c12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014c14:	2b00      	cmp	r3, #0
 8014c16:	d1db      	bne.n	8014bd0 <USB_WritePMA+0x40>
  }
}
 8014c18:	46c0      	nop			@ (mov r8, r8)
 8014c1a:	46c0      	nop			@ (mov r8, r8)
 8014c1c:	46bd      	mov	sp, r7
 8014c1e:	b00a      	add	sp, #40	@ 0x28
 8014c20:	bd80      	pop	{r7, pc}

08014c22 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8014c22:	b580      	push	{r7, lr}
 8014c24:	b08a      	sub	sp, #40	@ 0x28
 8014c26:	af00      	add	r7, sp, #0
 8014c28:	60f8      	str	r0, [r7, #12]
 8014c2a:	60b9      	str	r1, [r7, #8]
 8014c2c:	0019      	movs	r1, r3
 8014c2e:	1dbb      	adds	r3, r7, #6
 8014c30:	801a      	strh	r2, [r3, #0]
 8014c32:	1d3b      	adds	r3, r7, #4
 8014c34:	1c0a      	adds	r2, r1, #0
 8014c36:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8014c38:	1d3b      	adds	r3, r7, #4
 8014c3a:	881b      	ldrh	r3, [r3, #0]
 8014c3c:	085b      	lsrs	r3, r3, #1
 8014c3e:	b29b      	uxth	r3, r3
 8014c40:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8014c42:	68fb      	ldr	r3, [r7, #12]
 8014c44:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8014c46:	68bb      	ldr	r3, [r7, #8]
 8014c48:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8014c4a:	1dbb      	adds	r3, r7, #6
 8014c4c:	881a      	ldrh	r2, [r3, #0]
 8014c4e:	697b      	ldr	r3, [r7, #20]
 8014c50:	18d3      	adds	r3, r2, r3
 8014c52:	2280      	movs	r2, #128	@ 0x80
 8014c54:	00d2      	lsls	r2, r2, #3
 8014c56:	4694      	mov	ip, r2
 8014c58:	4463      	add	r3, ip
 8014c5a:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8014c5c:	69bb      	ldr	r3, [r7, #24]
 8014c5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8014c60:	e018      	b.n	8014c94 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8014c62:	6a3b      	ldr	r3, [r7, #32]
 8014c64:	881b      	ldrh	r3, [r3, #0]
 8014c66:	b29b      	uxth	r3, r3
 8014c68:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8014c6a:	6a3b      	ldr	r3, [r7, #32]
 8014c6c:	3302      	adds	r3, #2
 8014c6e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8014c70:	693b      	ldr	r3, [r7, #16]
 8014c72:	b2da      	uxtb	r2, r3
 8014c74:	69fb      	ldr	r3, [r7, #28]
 8014c76:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8014c78:	69fb      	ldr	r3, [r7, #28]
 8014c7a:	3301      	adds	r3, #1
 8014c7c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8014c7e:	693b      	ldr	r3, [r7, #16]
 8014c80:	0a1b      	lsrs	r3, r3, #8
 8014c82:	b2da      	uxtb	r2, r3
 8014c84:	69fb      	ldr	r3, [r7, #28]
 8014c86:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8014c88:	69fb      	ldr	r3, [r7, #28]
 8014c8a:	3301      	adds	r3, #1
 8014c8c:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8014c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014c90:	3b01      	subs	r3, #1
 8014c92:	627b      	str	r3, [r7, #36]	@ 0x24
 8014c94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014c96:	2b00      	cmp	r3, #0
 8014c98:	d1e3      	bne.n	8014c62 <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8014c9a:	1d3b      	adds	r3, r7, #4
 8014c9c:	881b      	ldrh	r3, [r3, #0]
 8014c9e:	2201      	movs	r2, #1
 8014ca0:	4013      	ands	r3, r2
 8014ca2:	b29b      	uxth	r3, r3
 8014ca4:	2b00      	cmp	r3, #0
 8014ca6:	d007      	beq.n	8014cb8 <USB_ReadPMA+0x96>
  {
    RdVal = *pdwVal;
 8014ca8:	6a3b      	ldr	r3, [r7, #32]
 8014caa:	881b      	ldrh	r3, [r3, #0]
 8014cac:	b29b      	uxth	r3, r3
 8014cae:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8014cb0:	693b      	ldr	r3, [r7, #16]
 8014cb2:	b2da      	uxtb	r2, r3
 8014cb4:	69fb      	ldr	r3, [r7, #28]
 8014cb6:	701a      	strb	r2, [r3, #0]
  }
}
 8014cb8:	46c0      	nop			@ (mov r8, r8)
 8014cba:	46bd      	mov	sp, r7
 8014cbc:	b00a      	add	sp, #40	@ 0x28
 8014cbe:	bd80      	pop	{r7, pc}

08014cc0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014cc0:	b580      	push	{r7, lr}
 8014cc2:	b084      	sub	sp, #16
 8014cc4:	af00      	add	r7, sp, #0
 8014cc6:	6078      	str	r0, [r7, #4]
 8014cc8:	000a      	movs	r2, r1
 8014cca:	1cfb      	adds	r3, r7, #3
 8014ccc:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 8014cce:	230f      	movs	r3, #15
 8014cd0:	18fb      	adds	r3, r7, r3
 8014cd2:	2200      	movs	r2, #0
 8014cd4:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014cd6:	687b      	ldr	r3, [r7, #4]
 8014cd8:	7c1b      	ldrb	r3, [r3, #16]
 8014cda:	2b00      	cmp	r3, #0
 8014cdc:	d116      	bne.n	8014d0c <USBD_CDC_Init+0x4c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8014cde:	2380      	movs	r3, #128	@ 0x80
 8014ce0:	009b      	lsls	r3, r3, #2
 8014ce2:	6878      	ldr	r0, [r7, #4]
 8014ce4:	2202      	movs	r2, #2
 8014ce6:	2181      	movs	r1, #129	@ 0x81
 8014ce8:	f002 f8eb 	bl	8016ec2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8014cec:	687b      	ldr	r3, [r7, #4]
 8014cee:	2201      	movs	r2, #1
 8014cf0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8014cf2:	2380      	movs	r3, #128	@ 0x80
 8014cf4:	009b      	lsls	r3, r3, #2
 8014cf6:	6878      	ldr	r0, [r7, #4]
 8014cf8:	2202      	movs	r2, #2
 8014cfa:	2101      	movs	r1, #1
 8014cfc:	f002 f8e1 	bl	8016ec2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8014d00:	687a      	ldr	r2, [r7, #4]
 8014d02:	23b6      	movs	r3, #182	@ 0xb6
 8014d04:	005b      	lsls	r3, r3, #1
 8014d06:	2101      	movs	r1, #1
 8014d08:	50d1      	str	r1, [r2, r3]
 8014d0a:	e013      	b.n	8014d34 <USBD_CDC_Init+0x74>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8014d0c:	6878      	ldr	r0, [r7, #4]
 8014d0e:	2340      	movs	r3, #64	@ 0x40
 8014d10:	2202      	movs	r2, #2
 8014d12:	2181      	movs	r1, #129	@ 0x81
 8014d14:	f002 f8d5 	bl	8016ec2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8014d18:	687b      	ldr	r3, [r7, #4]
 8014d1a:	2201      	movs	r2, #1
 8014d1c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8014d1e:	6878      	ldr	r0, [r7, #4]
 8014d20:	2340      	movs	r3, #64	@ 0x40
 8014d22:	2202      	movs	r2, #2
 8014d24:	2101      	movs	r1, #1
 8014d26:	f002 f8cc 	bl	8016ec2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8014d2a:	687a      	ldr	r2, [r7, #4]
 8014d2c:	23b6      	movs	r3, #182	@ 0xb6
 8014d2e:	005b      	lsls	r3, r3, #1
 8014d30:	2101      	movs	r1, #1
 8014d32:	50d1      	str	r1, [r2, r3]
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8014d34:	6878      	ldr	r0, [r7, #4]
 8014d36:	2308      	movs	r3, #8
 8014d38:	2203      	movs	r2, #3
 8014d3a:	2182      	movs	r1, #130	@ 0x82
 8014d3c:	f002 f8c1 	bl	8016ec2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8014d40:	687b      	ldr	r3, [r7, #4]
 8014d42:	2201      	movs	r2, #1
 8014d44:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8014d46:	2387      	movs	r3, #135	@ 0x87
 8014d48:	009b      	lsls	r3, r3, #2
 8014d4a:	0018      	movs	r0, r3
 8014d4c:	f002 fa52 	bl	80171f4 <USBD_static_malloc>
 8014d50:	0001      	movs	r1, r0
 8014d52:	687a      	ldr	r2, [r7, #4]
 8014d54:	23ae      	movs	r3, #174	@ 0xae
 8014d56:	009b      	lsls	r3, r3, #2
 8014d58:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 8014d5a:	687a      	ldr	r2, [r7, #4]
 8014d5c:	23ae      	movs	r3, #174	@ 0xae
 8014d5e:	009b      	lsls	r3, r3, #2
 8014d60:	58d3      	ldr	r3, [r2, r3]
 8014d62:	2b00      	cmp	r3, #0
 8014d64:	d104      	bne.n	8014d70 <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 8014d66:	230f      	movs	r3, #15
 8014d68:	18fb      	adds	r3, r7, r3
 8014d6a:	2201      	movs	r2, #1
 8014d6c:	701a      	strb	r2, [r3, #0]
 8014d6e:	e02c      	b.n	8014dca <USBD_CDC_Init+0x10a>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8014d70:	687a      	ldr	r2, [r7, #4]
 8014d72:	23ae      	movs	r3, #174	@ 0xae
 8014d74:	009b      	lsls	r3, r3, #2
 8014d76:	58d3      	ldr	r3, [r2, r3]
 8014d78:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8014d7a:	687a      	ldr	r2, [r7, #4]
 8014d7c:	23af      	movs	r3, #175	@ 0xaf
 8014d7e:	009b      	lsls	r3, r3, #2
 8014d80:	58d3      	ldr	r3, [r2, r3]
 8014d82:	681b      	ldr	r3, [r3, #0]
 8014d84:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8014d86:	68ba      	ldr	r2, [r7, #8]
 8014d88:	2385      	movs	r3, #133	@ 0x85
 8014d8a:	009b      	lsls	r3, r3, #2
 8014d8c:	2100      	movs	r1, #0
 8014d8e:	50d1      	str	r1, [r2, r3]
    hcdc->RxState = 0U;
 8014d90:	68ba      	ldr	r2, [r7, #8]
 8014d92:	2386      	movs	r3, #134	@ 0x86
 8014d94:	009b      	lsls	r3, r3, #2
 8014d96:	2100      	movs	r1, #0
 8014d98:	50d1      	str	r1, [r2, r3]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014d9a:	687b      	ldr	r3, [r7, #4]
 8014d9c:	7c1b      	ldrb	r3, [r3, #16]
 8014d9e:	2b00      	cmp	r3, #0
 8014da0:	d10a      	bne.n	8014db8 <USBD_CDC_Init+0xf8>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8014da2:	68ba      	ldr	r2, [r7, #8]
 8014da4:	2381      	movs	r3, #129	@ 0x81
 8014da6:	009b      	lsls	r3, r3, #2
 8014da8:	58d2      	ldr	r2, [r2, r3]
 8014daa:	2380      	movs	r3, #128	@ 0x80
 8014dac:	009b      	lsls	r3, r3, #2
 8014dae:	6878      	ldr	r0, [r7, #4]
 8014db0:	2101      	movs	r1, #1
 8014db2:	f002 f9d1 	bl	8017158 <USBD_LL_PrepareReceive>
 8014db6:	e008      	b.n	8014dca <USBD_CDC_Init+0x10a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8014db8:	68ba      	ldr	r2, [r7, #8]
 8014dba:	2381      	movs	r3, #129	@ 0x81
 8014dbc:	009b      	lsls	r3, r3, #2
 8014dbe:	58d2      	ldr	r2, [r2, r3]
 8014dc0:	6878      	ldr	r0, [r7, #4]
 8014dc2:	2340      	movs	r3, #64	@ 0x40
 8014dc4:	2101      	movs	r1, #1
 8014dc6:	f002 f9c7 	bl	8017158 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8014dca:	230f      	movs	r3, #15
 8014dcc:	18fb      	adds	r3, r7, r3
 8014dce:	781b      	ldrb	r3, [r3, #0]
}
 8014dd0:	0018      	movs	r0, r3
 8014dd2:	46bd      	mov	sp, r7
 8014dd4:	b004      	add	sp, #16
 8014dd6:	bd80      	pop	{r7, pc}

08014dd8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014dd8:	b580      	push	{r7, lr}
 8014dda:	b084      	sub	sp, #16
 8014ddc:	af00      	add	r7, sp, #0
 8014dde:	6078      	str	r0, [r7, #4]
 8014de0:	000a      	movs	r2, r1
 8014de2:	1cfb      	adds	r3, r7, #3
 8014de4:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 8014de6:	230f      	movs	r3, #15
 8014de8:	18fb      	adds	r3, r7, r3
 8014dea:	2200      	movs	r2, #0
 8014dec:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8014dee:	687b      	ldr	r3, [r7, #4]
 8014df0:	2181      	movs	r1, #129	@ 0x81
 8014df2:	0018      	movs	r0, r3
 8014df4:	f002 f89c 	bl	8016f30 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8014df8:	687b      	ldr	r3, [r7, #4]
 8014dfa:	2200      	movs	r2, #0
 8014dfc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8014dfe:	687b      	ldr	r3, [r7, #4]
 8014e00:	2101      	movs	r1, #1
 8014e02:	0018      	movs	r0, r3
 8014e04:	f002 f894 	bl	8016f30 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8014e08:	687a      	ldr	r2, [r7, #4]
 8014e0a:	23b6      	movs	r3, #182	@ 0xb6
 8014e0c:	005b      	lsls	r3, r3, #1
 8014e0e:	2100      	movs	r1, #0
 8014e10:	50d1      	str	r1, [r2, r3]

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8014e12:	687b      	ldr	r3, [r7, #4]
 8014e14:	2182      	movs	r1, #130	@ 0x82
 8014e16:	0018      	movs	r0, r3
 8014e18:	f002 f88a 	bl	8016f30 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8014e1c:	687b      	ldr	r3, [r7, #4]
 8014e1e:	2200      	movs	r2, #0
 8014e20:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8014e22:	687a      	ldr	r2, [r7, #4]
 8014e24:	23ae      	movs	r3, #174	@ 0xae
 8014e26:	009b      	lsls	r3, r3, #2
 8014e28:	58d3      	ldr	r3, [r2, r3]
 8014e2a:	2b00      	cmp	r3, #0
 8014e2c:	d011      	beq.n	8014e52 <USBD_CDC_DeInit+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8014e2e:	687a      	ldr	r2, [r7, #4]
 8014e30:	23af      	movs	r3, #175	@ 0xaf
 8014e32:	009b      	lsls	r3, r3, #2
 8014e34:	58d3      	ldr	r3, [r2, r3]
 8014e36:	685b      	ldr	r3, [r3, #4]
 8014e38:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8014e3a:	687a      	ldr	r2, [r7, #4]
 8014e3c:	23ae      	movs	r3, #174	@ 0xae
 8014e3e:	009b      	lsls	r3, r3, #2
 8014e40:	58d3      	ldr	r3, [r2, r3]
 8014e42:	0018      	movs	r0, r3
 8014e44:	f002 f9e2 	bl	801720c <USBD_static_free>
    pdev->pClassData = NULL;
 8014e48:	687a      	ldr	r2, [r7, #4]
 8014e4a:	23ae      	movs	r3, #174	@ 0xae
 8014e4c:	009b      	lsls	r3, r3, #2
 8014e4e:	2100      	movs	r1, #0
 8014e50:	50d1      	str	r1, [r2, r3]
  }

  return ret;
 8014e52:	230f      	movs	r3, #15
 8014e54:	18fb      	adds	r3, r7, r3
 8014e56:	781b      	ldrb	r3, [r3, #0]
}
 8014e58:	0018      	movs	r0, r3
 8014e5a:	46bd      	mov	sp, r7
 8014e5c:	b004      	add	sp, #16
 8014e5e:	bd80      	pop	{r7, pc}

08014e60 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8014e60:	b580      	push	{r7, lr}
 8014e62:	b086      	sub	sp, #24
 8014e64:	af00      	add	r7, sp, #0
 8014e66:	6078      	str	r0, [r7, #4]
 8014e68:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8014e6a:	687a      	ldr	r2, [r7, #4]
 8014e6c:	23ae      	movs	r3, #174	@ 0xae
 8014e6e:	009b      	lsls	r3, r3, #2
 8014e70:	58d3      	ldr	r3, [r2, r3]
 8014e72:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8014e74:	230f      	movs	r3, #15
 8014e76:	18fb      	adds	r3, r7, r3
 8014e78:	2200      	movs	r2, #0
 8014e7a:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 8014e7c:	230c      	movs	r3, #12
 8014e7e:	18fb      	adds	r3, r7, r3
 8014e80:	2200      	movs	r2, #0
 8014e82:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 8014e84:	2317      	movs	r3, #23
 8014e86:	18fb      	adds	r3, r7, r3
 8014e88:	2200      	movs	r2, #0
 8014e8a:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014e8c:	683b      	ldr	r3, [r7, #0]
 8014e8e:	781b      	ldrb	r3, [r3, #0]
 8014e90:	001a      	movs	r2, r3
 8014e92:	2360      	movs	r3, #96	@ 0x60
 8014e94:	4013      	ands	r3, r2
 8014e96:	d03d      	beq.n	8014f14 <USBD_CDC_Setup+0xb4>
 8014e98:	2b20      	cmp	r3, #32
 8014e9a:	d000      	beq.n	8014e9e <USBD_CDC_Setup+0x3e>
 8014e9c:	e094      	b.n	8014fc8 <USBD_CDC_Setup+0x168>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8014e9e:	683b      	ldr	r3, [r7, #0]
 8014ea0:	88db      	ldrh	r3, [r3, #6]
 8014ea2:	2b00      	cmp	r3, #0
 8014ea4:	d02b      	beq.n	8014efe <USBD_CDC_Setup+0x9e>
      {
        if (req->bmRequest & 0x80U)
 8014ea6:	683b      	ldr	r3, [r7, #0]
 8014ea8:	781b      	ldrb	r3, [r3, #0]
 8014eaa:	b25b      	sxtb	r3, r3
 8014eac:	2b00      	cmp	r3, #0
 8014eae:	da12      	bge.n	8014ed6 <USBD_CDC_Setup+0x76>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8014eb0:	687a      	ldr	r2, [r7, #4]
 8014eb2:	23af      	movs	r3, #175	@ 0xaf
 8014eb4:	009b      	lsls	r3, r3, #2
 8014eb6:	58d3      	ldr	r3, [r2, r3]
 8014eb8:	689b      	ldr	r3, [r3, #8]
 8014eba:	683a      	ldr	r2, [r7, #0]
 8014ebc:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8014ebe:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8014ec0:	683a      	ldr	r2, [r7, #0]
 8014ec2:	88d2      	ldrh	r2, [r2, #6]
 8014ec4:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8014ec6:	6939      	ldr	r1, [r7, #16]
 8014ec8:	683b      	ldr	r3, [r7, #0]
 8014eca:	88da      	ldrh	r2, [r3, #6]
 8014ecc:	687b      	ldr	r3, [r7, #4]
 8014ece:	0018      	movs	r0, r3
 8014ed0:	f001 fbaf 	bl	8016632 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8014ed4:	e083      	b.n	8014fde <USBD_CDC_Setup+0x17e>
          hcdc->CmdOpCode = req->bRequest;
 8014ed6:	683b      	ldr	r3, [r7, #0]
 8014ed8:	7859      	ldrb	r1, [r3, #1]
 8014eda:	693a      	ldr	r2, [r7, #16]
 8014edc:	2380      	movs	r3, #128	@ 0x80
 8014ede:	009b      	lsls	r3, r3, #2
 8014ee0:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 8014ee2:	683b      	ldr	r3, [r7, #0]
 8014ee4:	88db      	ldrh	r3, [r3, #6]
 8014ee6:	b2d9      	uxtb	r1, r3
 8014ee8:	693b      	ldr	r3, [r7, #16]
 8014eea:	4a40      	ldr	r2, [pc, #256]	@ (8014fec <USBD_CDC_Setup+0x18c>)
 8014eec:	5499      	strb	r1, [r3, r2]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8014eee:	6939      	ldr	r1, [r7, #16]
 8014ef0:	683b      	ldr	r3, [r7, #0]
 8014ef2:	88da      	ldrh	r2, [r3, #6]
 8014ef4:	687b      	ldr	r3, [r7, #4]
 8014ef6:	0018      	movs	r0, r3
 8014ef8:	f001 fbce 	bl	8016698 <USBD_CtlPrepareRx>
      break;
 8014efc:	e06f      	b.n	8014fde <USBD_CDC_Setup+0x17e>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8014efe:	687a      	ldr	r2, [r7, #4]
 8014f00:	23af      	movs	r3, #175	@ 0xaf
 8014f02:	009b      	lsls	r3, r3, #2
 8014f04:	58d3      	ldr	r3, [r2, r3]
 8014f06:	689b      	ldr	r3, [r3, #8]
 8014f08:	683a      	ldr	r2, [r7, #0]
 8014f0a:	7850      	ldrb	r0, [r2, #1]
 8014f0c:	6839      	ldr	r1, [r7, #0]
 8014f0e:	2200      	movs	r2, #0
 8014f10:	4798      	blx	r3
      break;
 8014f12:	e064      	b.n	8014fde <USBD_CDC_Setup+0x17e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8014f14:	683b      	ldr	r3, [r7, #0]
 8014f16:	785b      	ldrb	r3, [r3, #1]
 8014f18:	2b0b      	cmp	r3, #11
 8014f1a:	d037      	beq.n	8014f8c <USBD_CDC_Setup+0x12c>
 8014f1c:	dc47      	bgt.n	8014fae <USBD_CDC_Setup+0x14e>
 8014f1e:	2b00      	cmp	r3, #0
 8014f20:	d002      	beq.n	8014f28 <USBD_CDC_Setup+0xc8>
 8014f22:	2b0a      	cmp	r3, #10
 8014f24:	d019      	beq.n	8014f5a <USBD_CDC_Setup+0xfa>
 8014f26:	e042      	b.n	8014fae <USBD_CDC_Setup+0x14e>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014f28:	687a      	ldr	r2, [r7, #4]
 8014f2a:	23a7      	movs	r3, #167	@ 0xa7
 8014f2c:	009b      	lsls	r3, r3, #2
 8014f2e:	5cd3      	ldrb	r3, [r2, r3]
 8014f30:	2b03      	cmp	r3, #3
 8014f32:	d107      	bne.n	8014f44 <USBD_CDC_Setup+0xe4>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8014f34:	230c      	movs	r3, #12
 8014f36:	18f9      	adds	r1, r7, r3
 8014f38:	687b      	ldr	r3, [r7, #4]
 8014f3a:	2202      	movs	r2, #2
 8014f3c:	0018      	movs	r0, r3
 8014f3e:	f001 fb78 	bl	8016632 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8014f42:	e040      	b.n	8014fc6 <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 8014f44:	683a      	ldr	r2, [r7, #0]
 8014f46:	687b      	ldr	r3, [r7, #4]
 8014f48:	0011      	movs	r1, r2
 8014f4a:	0018      	movs	r0, r3
 8014f4c:	f001 faf3 	bl	8016536 <USBD_CtlError>
            ret = USBD_FAIL;
 8014f50:	2317      	movs	r3, #23
 8014f52:	18fb      	adds	r3, r7, r3
 8014f54:	2202      	movs	r2, #2
 8014f56:	701a      	strb	r2, [r3, #0]
          break;
 8014f58:	e035      	b.n	8014fc6 <USBD_CDC_Setup+0x166>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014f5a:	687a      	ldr	r2, [r7, #4]
 8014f5c:	23a7      	movs	r3, #167	@ 0xa7
 8014f5e:	009b      	lsls	r3, r3, #2
 8014f60:	5cd3      	ldrb	r3, [r2, r3]
 8014f62:	2b03      	cmp	r3, #3
 8014f64:	d107      	bne.n	8014f76 <USBD_CDC_Setup+0x116>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8014f66:	230f      	movs	r3, #15
 8014f68:	18f9      	adds	r1, r7, r3
 8014f6a:	687b      	ldr	r3, [r7, #4]
 8014f6c:	2201      	movs	r2, #1
 8014f6e:	0018      	movs	r0, r3
 8014f70:	f001 fb5f 	bl	8016632 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8014f74:	e027      	b.n	8014fc6 <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 8014f76:	683a      	ldr	r2, [r7, #0]
 8014f78:	687b      	ldr	r3, [r7, #4]
 8014f7a:	0011      	movs	r1, r2
 8014f7c:	0018      	movs	r0, r3
 8014f7e:	f001 fada 	bl	8016536 <USBD_CtlError>
            ret = USBD_FAIL;
 8014f82:	2317      	movs	r3, #23
 8014f84:	18fb      	adds	r3, r7, r3
 8014f86:	2202      	movs	r2, #2
 8014f88:	701a      	strb	r2, [r3, #0]
          break;
 8014f8a:	e01c      	b.n	8014fc6 <USBD_CDC_Setup+0x166>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8014f8c:	687a      	ldr	r2, [r7, #4]
 8014f8e:	23a7      	movs	r3, #167	@ 0xa7
 8014f90:	009b      	lsls	r3, r3, #2
 8014f92:	5cd3      	ldrb	r3, [r2, r3]
 8014f94:	2b03      	cmp	r3, #3
 8014f96:	d015      	beq.n	8014fc4 <USBD_CDC_Setup+0x164>
          {
            USBD_CtlError(pdev, req);
 8014f98:	683a      	ldr	r2, [r7, #0]
 8014f9a:	687b      	ldr	r3, [r7, #4]
 8014f9c:	0011      	movs	r1, r2
 8014f9e:	0018      	movs	r0, r3
 8014fa0:	f001 fac9 	bl	8016536 <USBD_CtlError>
            ret = USBD_FAIL;
 8014fa4:	2317      	movs	r3, #23
 8014fa6:	18fb      	adds	r3, r7, r3
 8014fa8:	2202      	movs	r2, #2
 8014faa:	701a      	strb	r2, [r3, #0]
          }
          break;
 8014fac:	e00a      	b.n	8014fc4 <USBD_CDC_Setup+0x164>

        default:
          USBD_CtlError(pdev, req);
 8014fae:	683a      	ldr	r2, [r7, #0]
 8014fb0:	687b      	ldr	r3, [r7, #4]
 8014fb2:	0011      	movs	r1, r2
 8014fb4:	0018      	movs	r0, r3
 8014fb6:	f001 fabe 	bl	8016536 <USBD_CtlError>
          ret = USBD_FAIL;
 8014fba:	2317      	movs	r3, #23
 8014fbc:	18fb      	adds	r3, r7, r3
 8014fbe:	2202      	movs	r2, #2
 8014fc0:	701a      	strb	r2, [r3, #0]
          break;
 8014fc2:	e000      	b.n	8014fc6 <USBD_CDC_Setup+0x166>
          break;
 8014fc4:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8014fc6:	e00a      	b.n	8014fde <USBD_CDC_Setup+0x17e>

    default:
      USBD_CtlError(pdev, req);
 8014fc8:	683a      	ldr	r2, [r7, #0]
 8014fca:	687b      	ldr	r3, [r7, #4]
 8014fcc:	0011      	movs	r1, r2
 8014fce:	0018      	movs	r0, r3
 8014fd0:	f001 fab1 	bl	8016536 <USBD_CtlError>
      ret = USBD_FAIL;
 8014fd4:	2317      	movs	r3, #23
 8014fd6:	18fb      	adds	r3, r7, r3
 8014fd8:	2202      	movs	r2, #2
 8014fda:	701a      	strb	r2, [r3, #0]
      break;
 8014fdc:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 8014fde:	2317      	movs	r3, #23
 8014fe0:	18fb      	adds	r3, r7, r3
 8014fe2:	781b      	ldrb	r3, [r3, #0]
}
 8014fe4:	0018      	movs	r0, r3
 8014fe6:	46bd      	mov	sp, r7
 8014fe8:	b006      	add	sp, #24
 8014fea:	bd80      	pop	{r7, pc}
 8014fec:	00000201 	.word	0x00000201

08014ff0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8014ff0:	b580      	push	{r7, lr}
 8014ff2:	b084      	sub	sp, #16
 8014ff4:	af00      	add	r7, sp, #0
 8014ff6:	6078      	str	r0, [r7, #4]
 8014ff8:	000a      	movs	r2, r1
 8014ffa:	1cfb      	adds	r3, r7, #3
 8014ffc:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8014ffe:	687a      	ldr	r2, [r7, #4]
 8015000:	23ae      	movs	r3, #174	@ 0xae
 8015002:	009b      	lsls	r3, r3, #2
 8015004:	58d3      	ldr	r3, [r2, r3]
 8015006:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8015008:	687a      	ldr	r2, [r7, #4]
 801500a:	23b0      	movs	r3, #176	@ 0xb0
 801500c:	009b      	lsls	r3, r3, #2
 801500e:	58d3      	ldr	r3, [r2, r3]
 8015010:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8015012:	687a      	ldr	r2, [r7, #4]
 8015014:	23ae      	movs	r3, #174	@ 0xae
 8015016:	009b      	lsls	r3, r3, #2
 8015018:	58d3      	ldr	r3, [r2, r3]
 801501a:	2b00      	cmp	r3, #0
 801501c:	d03e      	beq.n	801509c <USBD_CDC_DataIn+0xac>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 801501e:	1cfb      	adds	r3, r7, #3
 8015020:	781a      	ldrb	r2, [r3, #0]
 8015022:	6879      	ldr	r1, [r7, #4]
 8015024:	0013      	movs	r3, r2
 8015026:	009b      	lsls	r3, r3, #2
 8015028:	189b      	adds	r3, r3, r2
 801502a:	009b      	lsls	r3, r3, #2
 801502c:	18cb      	adds	r3, r1, r3
 801502e:	331c      	adds	r3, #28
 8015030:	681b      	ldr	r3, [r3, #0]
 8015032:	2b00      	cmp	r3, #0
 8015034:	d02b      	beq.n	801508e <USBD_CDC_DataIn+0x9e>
 8015036:	1cfb      	adds	r3, r7, #3
 8015038:	781a      	ldrb	r2, [r3, #0]
 801503a:	6879      	ldr	r1, [r7, #4]
 801503c:	0013      	movs	r3, r2
 801503e:	009b      	lsls	r3, r3, #2
 8015040:	189b      	adds	r3, r3, r2
 8015042:	009b      	lsls	r3, r3, #2
 8015044:	18cb      	adds	r3, r1, r3
 8015046:	331c      	adds	r3, #28
 8015048:	6818      	ldr	r0, [r3, #0]
 801504a:	1cfb      	adds	r3, r7, #3
 801504c:	781a      	ldrb	r2, [r3, #0]
 801504e:	68b9      	ldr	r1, [r7, #8]
 8015050:	0013      	movs	r3, r2
 8015052:	009b      	lsls	r3, r3, #2
 8015054:	189b      	adds	r3, r3, r2
 8015056:	00db      	lsls	r3, r3, #3
 8015058:	18cb      	adds	r3, r1, r3
 801505a:	3338      	adds	r3, #56	@ 0x38
 801505c:	681b      	ldr	r3, [r3, #0]
 801505e:	0019      	movs	r1, r3
 8015060:	f7eb f8f4 	bl	800024c <__aeabi_uidivmod>
 8015064:	1e0b      	subs	r3, r1, #0
 8015066:	d112      	bne.n	801508e <USBD_CDC_DataIn+0x9e>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8015068:	1cfb      	adds	r3, r7, #3
 801506a:	781a      	ldrb	r2, [r3, #0]
 801506c:	6879      	ldr	r1, [r7, #4]
 801506e:	0013      	movs	r3, r2
 8015070:	009b      	lsls	r3, r3, #2
 8015072:	189b      	adds	r3, r3, r2
 8015074:	009b      	lsls	r3, r3, #2
 8015076:	18cb      	adds	r3, r1, r3
 8015078:	331c      	adds	r3, #28
 801507a:	2200      	movs	r2, #0
 801507c:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801507e:	1cfb      	adds	r3, r7, #3
 8015080:	7819      	ldrb	r1, [r3, #0]
 8015082:	6878      	ldr	r0, [r7, #4]
 8015084:	2300      	movs	r3, #0
 8015086:	2200      	movs	r2, #0
 8015088:	f002 f82f 	bl	80170ea <USBD_LL_Transmit>
 801508c:	e004      	b.n	8015098 <USBD_CDC_DataIn+0xa8>
    }
    else
    {
      hcdc->TxState = 0U;
 801508e:	68fa      	ldr	r2, [r7, #12]
 8015090:	2385      	movs	r3, #133	@ 0x85
 8015092:	009b      	lsls	r3, r3, #2
 8015094:	2100      	movs	r1, #0
 8015096:	50d1      	str	r1, [r2, r3]
    }
    return USBD_OK;
 8015098:	2300      	movs	r3, #0
 801509a:	e000      	b.n	801509e <USBD_CDC_DataIn+0xae>
  }
  else
  {
    return USBD_FAIL;
 801509c:	2302      	movs	r3, #2
  }
}
 801509e:	0018      	movs	r0, r3
 80150a0:	46bd      	mov	sp, r7
 80150a2:	b004      	add	sp, #16
 80150a4:	bd80      	pop	{r7, pc}

080150a6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80150a6:	b580      	push	{r7, lr}
 80150a8:	b084      	sub	sp, #16
 80150aa:	af00      	add	r7, sp, #0
 80150ac:	6078      	str	r0, [r7, #4]
 80150ae:	000a      	movs	r2, r1
 80150b0:	1cfb      	adds	r3, r7, #3
 80150b2:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80150b4:	687a      	ldr	r2, [r7, #4]
 80150b6:	23ae      	movs	r3, #174	@ 0xae
 80150b8:	009b      	lsls	r3, r3, #2
 80150ba:	58d3      	ldr	r3, [r2, r3]
 80150bc:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80150be:	1cfb      	adds	r3, r7, #3
 80150c0:	781a      	ldrb	r2, [r3, #0]
 80150c2:	687b      	ldr	r3, [r7, #4]
 80150c4:	0011      	movs	r1, r2
 80150c6:	0018      	movs	r0, r3
 80150c8:	f002 f87d 	bl	80171c6 <USBD_LL_GetRxDataSize>
 80150cc:	0001      	movs	r1, r0
 80150ce:	68fa      	ldr	r2, [r7, #12]
 80150d0:	2383      	movs	r3, #131	@ 0x83
 80150d2:	009b      	lsls	r3, r3, #2
 80150d4:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80150d6:	687a      	ldr	r2, [r7, #4]
 80150d8:	23ae      	movs	r3, #174	@ 0xae
 80150da:	009b      	lsls	r3, r3, #2
 80150dc:	58d3      	ldr	r3, [r2, r3]
 80150de:	2b00      	cmp	r3, #0
 80150e0:	d011      	beq.n	8015106 <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80150e2:	687a      	ldr	r2, [r7, #4]
 80150e4:	23af      	movs	r3, #175	@ 0xaf
 80150e6:	009b      	lsls	r3, r3, #2
 80150e8:	58d3      	ldr	r3, [r2, r3]
 80150ea:	68da      	ldr	r2, [r3, #12]
 80150ec:	68f9      	ldr	r1, [r7, #12]
 80150ee:	2381      	movs	r3, #129	@ 0x81
 80150f0:	009b      	lsls	r3, r3, #2
 80150f2:	58c8      	ldr	r0, [r1, r3]
 80150f4:	68fb      	ldr	r3, [r7, #12]
 80150f6:	2183      	movs	r1, #131	@ 0x83
 80150f8:	0089      	lsls	r1, r1, #2
 80150fa:	468c      	mov	ip, r1
 80150fc:	4463      	add	r3, ip
 80150fe:	0019      	movs	r1, r3
 8015100:	4790      	blx	r2

    return USBD_OK;
 8015102:	2300      	movs	r3, #0
 8015104:	e000      	b.n	8015108 <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 8015106:	2302      	movs	r3, #2
  }
}
 8015108:	0018      	movs	r0, r3
 801510a:	46bd      	mov	sp, r7
 801510c:	b004      	add	sp, #16
 801510e:	bd80      	pop	{r7, pc}

08015110 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8015110:	b590      	push	{r4, r7, lr}
 8015112:	b085      	sub	sp, #20
 8015114:	af00      	add	r7, sp, #0
 8015116:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8015118:	687a      	ldr	r2, [r7, #4]
 801511a:	23ae      	movs	r3, #174	@ 0xae
 801511c:	009b      	lsls	r3, r3, #2
 801511e:	58d3      	ldr	r3, [r2, r3]
 8015120:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8015122:	687a      	ldr	r2, [r7, #4]
 8015124:	23af      	movs	r3, #175	@ 0xaf
 8015126:	009b      	lsls	r3, r3, #2
 8015128:	58d3      	ldr	r3, [r2, r3]
 801512a:	2b00      	cmp	r3, #0
 801512c:	d018      	beq.n	8015160 <USBD_CDC_EP0_RxReady+0x50>
 801512e:	68fa      	ldr	r2, [r7, #12]
 8015130:	2380      	movs	r3, #128	@ 0x80
 8015132:	009b      	lsls	r3, r3, #2
 8015134:	5cd3      	ldrb	r3, [r2, r3]
 8015136:	2bff      	cmp	r3, #255	@ 0xff
 8015138:	d012      	beq.n	8015160 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 801513a:	687a      	ldr	r2, [r7, #4]
 801513c:	23af      	movs	r3, #175	@ 0xaf
 801513e:	009b      	lsls	r3, r3, #2
 8015140:	58d3      	ldr	r3, [r2, r3]
 8015142:	689b      	ldr	r3, [r3, #8]
 8015144:	68f9      	ldr	r1, [r7, #12]
 8015146:	2280      	movs	r2, #128	@ 0x80
 8015148:	0092      	lsls	r2, r2, #2
 801514a:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)(void *)hcdc->data,
 801514c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 801514e:	68fa      	ldr	r2, [r7, #12]
 8015150:	4c06      	ldr	r4, [pc, #24]	@ (801516c <USBD_CDC_EP0_RxReady+0x5c>)
 8015152:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8015154:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8015156:	68fa      	ldr	r2, [r7, #12]
 8015158:	2380      	movs	r3, #128	@ 0x80
 801515a:	009b      	lsls	r3, r3, #2
 801515c:	21ff      	movs	r1, #255	@ 0xff
 801515e:	54d1      	strb	r1, [r2, r3]

  }
  return USBD_OK;
 8015160:	2300      	movs	r3, #0
}
 8015162:	0018      	movs	r0, r3
 8015164:	46bd      	mov	sp, r7
 8015166:	b005      	add	sp, #20
 8015168:	bd90      	pop	{r4, r7, pc}
 801516a:	46c0      	nop			@ (mov r8, r8)
 801516c:	00000201 	.word	0x00000201

08015170 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8015170:	b580      	push	{r7, lr}
 8015172:	b082      	sub	sp, #8
 8015174:	af00      	add	r7, sp, #0
 8015176:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8015178:	687b      	ldr	r3, [r7, #4]
 801517a:	2243      	movs	r2, #67	@ 0x43
 801517c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 801517e:	4b02      	ldr	r3, [pc, #8]	@ (8015188 <USBD_CDC_GetFSCfgDesc+0x18>)
}
 8015180:	0018      	movs	r0, r3
 8015182:	46bd      	mov	sp, r7
 8015184:	b002      	add	sp, #8
 8015186:	bd80      	pop	{r7, pc}
 8015188:	20000148 	.word	0x20000148

0801518c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 801518c:	b580      	push	{r7, lr}
 801518e:	b082      	sub	sp, #8
 8015190:	af00      	add	r7, sp, #0
 8015192:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8015194:	687b      	ldr	r3, [r7, #4]
 8015196:	2243      	movs	r2, #67	@ 0x43
 8015198:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 801519a:	4b02      	ldr	r3, [pc, #8]	@ (80151a4 <USBD_CDC_GetHSCfgDesc+0x18>)
}
 801519c:	0018      	movs	r0, r3
 801519e:	46bd      	mov	sp, r7
 80151a0:	b002      	add	sp, #8
 80151a2:	bd80      	pop	{r7, pc}
 80151a4:	20000104 	.word	0x20000104

080151a8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80151a8:	b580      	push	{r7, lr}
 80151aa:	b082      	sub	sp, #8
 80151ac:	af00      	add	r7, sp, #0
 80151ae:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80151b0:	687b      	ldr	r3, [r7, #4]
 80151b2:	2243      	movs	r2, #67	@ 0x43
 80151b4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80151b6:	4b02      	ldr	r3, [pc, #8]	@ (80151c0 <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 80151b8:	0018      	movs	r0, r3
 80151ba:	46bd      	mov	sp, r7
 80151bc:	b002      	add	sp, #8
 80151be:	bd80      	pop	{r7, pc}
 80151c0:	2000018c 	.word	0x2000018c

080151c4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80151c4:	b580      	push	{r7, lr}
 80151c6:	b082      	sub	sp, #8
 80151c8:	af00      	add	r7, sp, #0
 80151ca:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80151cc:	687b      	ldr	r3, [r7, #4]
 80151ce:	220a      	movs	r2, #10
 80151d0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80151d2:	4b02      	ldr	r3, [pc, #8]	@ (80151dc <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 80151d4:	0018      	movs	r0, r3
 80151d6:	46bd      	mov	sp, r7
 80151d8:	b002      	add	sp, #8
 80151da:	bd80      	pop	{r7, pc}
 80151dc:	200000c0 	.word	0x200000c0

080151e0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80151e0:	b580      	push	{r7, lr}
 80151e2:	b084      	sub	sp, #16
 80151e4:	af00      	add	r7, sp, #0
 80151e6:	6078      	str	r0, [r7, #4]
 80151e8:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80151ea:	200f      	movs	r0, #15
 80151ec:	183b      	adds	r3, r7, r0
 80151ee:	2202      	movs	r2, #2
 80151f0:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 80151f2:	683b      	ldr	r3, [r7, #0]
 80151f4:	2b00      	cmp	r3, #0
 80151f6:	d007      	beq.n	8015208 <USBD_CDC_RegisterInterface+0x28>
  {
    pdev->pUserData = fops;
 80151f8:	687a      	ldr	r2, [r7, #4]
 80151fa:	23af      	movs	r3, #175	@ 0xaf
 80151fc:	009b      	lsls	r3, r3, #2
 80151fe:	6839      	ldr	r1, [r7, #0]
 8015200:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 8015202:	183b      	adds	r3, r7, r0
 8015204:	2200      	movs	r2, #0
 8015206:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8015208:	230f      	movs	r3, #15
 801520a:	18fb      	adds	r3, r7, r3
 801520c:	781b      	ldrb	r3, [r3, #0]
}
 801520e:	0018      	movs	r0, r3
 8015210:	46bd      	mov	sp, r7
 8015212:	b004      	add	sp, #16
 8015214:	bd80      	pop	{r7, pc}

08015216 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8015216:	b580      	push	{r7, lr}
 8015218:	b086      	sub	sp, #24
 801521a:	af00      	add	r7, sp, #0
 801521c:	60f8      	str	r0, [r7, #12]
 801521e:	60b9      	str	r1, [r7, #8]
 8015220:	1dbb      	adds	r3, r7, #6
 8015222:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8015224:	68fa      	ldr	r2, [r7, #12]
 8015226:	23ae      	movs	r3, #174	@ 0xae
 8015228:	009b      	lsls	r3, r3, #2
 801522a:	58d3      	ldr	r3, [r2, r3]
 801522c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 801522e:	697a      	ldr	r2, [r7, #20]
 8015230:	2382      	movs	r3, #130	@ 0x82
 8015232:	009b      	lsls	r3, r3, #2
 8015234:	68b9      	ldr	r1, [r7, #8]
 8015236:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 8015238:	1dbb      	adds	r3, r7, #6
 801523a:	8819      	ldrh	r1, [r3, #0]
 801523c:	697a      	ldr	r2, [r7, #20]
 801523e:	2384      	movs	r3, #132	@ 0x84
 8015240:	009b      	lsls	r3, r3, #2
 8015242:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 8015244:	2300      	movs	r3, #0
}
 8015246:	0018      	movs	r0, r3
 8015248:	46bd      	mov	sp, r7
 801524a:	b006      	add	sp, #24
 801524c:	bd80      	pop	{r7, pc}

0801524e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 801524e:	b580      	push	{r7, lr}
 8015250:	b084      	sub	sp, #16
 8015252:	af00      	add	r7, sp, #0
 8015254:	6078      	str	r0, [r7, #4]
 8015256:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8015258:	687a      	ldr	r2, [r7, #4]
 801525a:	23ae      	movs	r3, #174	@ 0xae
 801525c:	009b      	lsls	r3, r3, #2
 801525e:	58d3      	ldr	r3, [r2, r3]
 8015260:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8015262:	68fa      	ldr	r2, [r7, #12]
 8015264:	2381      	movs	r3, #129	@ 0x81
 8015266:	009b      	lsls	r3, r3, #2
 8015268:	6839      	ldr	r1, [r7, #0]
 801526a:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 801526c:	2300      	movs	r3, #0
}
 801526e:	0018      	movs	r0, r3
 8015270:	46bd      	mov	sp, r7
 8015272:	b004      	add	sp, #16
 8015274:	bd80      	pop	{r7, pc}

08015276 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8015276:	b580      	push	{r7, lr}
 8015278:	b084      	sub	sp, #16
 801527a:	af00      	add	r7, sp, #0
 801527c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801527e:	687a      	ldr	r2, [r7, #4]
 8015280:	23ae      	movs	r3, #174	@ 0xae
 8015282:	009b      	lsls	r3, r3, #2
 8015284:	58d3      	ldr	r3, [r2, r3]
 8015286:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8015288:	687a      	ldr	r2, [r7, #4]
 801528a:	23ae      	movs	r3, #174	@ 0xae
 801528c:	009b      	lsls	r3, r3, #2
 801528e:	58d3      	ldr	r3, [r2, r3]
 8015290:	2b00      	cmp	r3, #0
 8015292:	d022      	beq.n	80152da <USBD_CDC_TransmitPacket+0x64>
  {
    if (hcdc->TxState == 0U)
 8015294:	68fa      	ldr	r2, [r7, #12]
 8015296:	2385      	movs	r3, #133	@ 0x85
 8015298:	009b      	lsls	r3, r3, #2
 801529a:	58d3      	ldr	r3, [r2, r3]
 801529c:	2b00      	cmp	r3, #0
 801529e:	d11a      	bne.n	80152d6 <USBD_CDC_TransmitPacket+0x60>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80152a0:	68fa      	ldr	r2, [r7, #12]
 80152a2:	2385      	movs	r3, #133	@ 0x85
 80152a4:	009b      	lsls	r3, r3, #2
 80152a6:	2101      	movs	r1, #1
 80152a8:	50d1      	str	r1, [r2, r3]

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80152aa:	68fa      	ldr	r2, [r7, #12]
 80152ac:	2384      	movs	r3, #132	@ 0x84
 80152ae:	009b      	lsls	r3, r3, #2
 80152b0:	58d2      	ldr	r2, [r2, r3]
 80152b2:	687b      	ldr	r3, [r7, #4]
 80152b4:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80152b6:	68fa      	ldr	r2, [r7, #12]
 80152b8:	2382      	movs	r3, #130	@ 0x82
 80152ba:	009b      	lsls	r3, r3, #2
 80152bc:	58d1      	ldr	r1, [r2, r3]
                       (uint16_t)hcdc->TxLength);
 80152be:	68fa      	ldr	r2, [r7, #12]
 80152c0:	2384      	movs	r3, #132	@ 0x84
 80152c2:	009b      	lsls	r3, r3, #2
 80152c4:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80152c6:	b29b      	uxth	r3, r3
 80152c8:	6878      	ldr	r0, [r7, #4]
 80152ca:	000a      	movs	r2, r1
 80152cc:	2181      	movs	r1, #129	@ 0x81
 80152ce:	f001 ff0c 	bl	80170ea <USBD_LL_Transmit>

      return USBD_OK;
 80152d2:	2300      	movs	r3, #0
 80152d4:	e002      	b.n	80152dc <USBD_CDC_TransmitPacket+0x66>
    }
    else
    {
      return USBD_BUSY;
 80152d6:	2301      	movs	r3, #1
 80152d8:	e000      	b.n	80152dc <USBD_CDC_TransmitPacket+0x66>
    }
  }
  else
  {
    return USBD_FAIL;
 80152da:	2302      	movs	r3, #2
  }
}
 80152dc:	0018      	movs	r0, r3
 80152de:	46bd      	mov	sp, r7
 80152e0:	b004      	add	sp, #16
 80152e2:	bd80      	pop	{r7, pc}

080152e4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80152e4:	b580      	push	{r7, lr}
 80152e6:	b084      	sub	sp, #16
 80152e8:	af00      	add	r7, sp, #0
 80152ea:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80152ec:	687a      	ldr	r2, [r7, #4]
 80152ee:	23ae      	movs	r3, #174	@ 0xae
 80152f0:	009b      	lsls	r3, r3, #2
 80152f2:	58d3      	ldr	r3, [r2, r3]
 80152f4:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80152f6:	687a      	ldr	r2, [r7, #4]
 80152f8:	23ae      	movs	r3, #174	@ 0xae
 80152fa:	009b      	lsls	r3, r3, #2
 80152fc:	58d3      	ldr	r3, [r2, r3]
 80152fe:	2b00      	cmp	r3, #0
 8015300:	d019      	beq.n	8015336 <USBD_CDC_ReceivePacket+0x52>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015302:	687b      	ldr	r3, [r7, #4]
 8015304:	7c1b      	ldrb	r3, [r3, #16]
 8015306:	2b00      	cmp	r3, #0
 8015308:	d10a      	bne.n	8015320 <USBD_CDC_ReceivePacket+0x3c>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 801530a:	68fa      	ldr	r2, [r7, #12]
 801530c:	2381      	movs	r3, #129	@ 0x81
 801530e:	009b      	lsls	r3, r3, #2
 8015310:	58d2      	ldr	r2, [r2, r3]
 8015312:	2380      	movs	r3, #128	@ 0x80
 8015314:	009b      	lsls	r3, r3, #2
 8015316:	6878      	ldr	r0, [r7, #4]
 8015318:	2101      	movs	r1, #1
 801531a:	f001 ff1d 	bl	8017158 <USBD_LL_PrepareReceive>
 801531e:	e008      	b.n	8015332 <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8015320:	68fa      	ldr	r2, [r7, #12]
 8015322:	2381      	movs	r3, #129	@ 0x81
 8015324:	009b      	lsls	r3, r3, #2
 8015326:	58d2      	ldr	r2, [r2, r3]
 8015328:	6878      	ldr	r0, [r7, #4]
 801532a:	2340      	movs	r3, #64	@ 0x40
 801532c:	2101      	movs	r1, #1
 801532e:	f001 ff13 	bl	8017158 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8015332:	2300      	movs	r3, #0
 8015334:	e000      	b.n	8015338 <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 8015336:	2302      	movs	r3, #2
  }
}
 8015338:	0018      	movs	r0, r3
 801533a:	46bd      	mov	sp, r7
 801533c:	b004      	add	sp, #16
 801533e:	bd80      	pop	{r7, pc}

08015340 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8015340:	b580      	push	{r7, lr}
 8015342:	b084      	sub	sp, #16
 8015344:	af00      	add	r7, sp, #0
 8015346:	60f8      	str	r0, [r7, #12]
 8015348:	60b9      	str	r1, [r7, #8]
 801534a:	1dfb      	adds	r3, r7, #7
 801534c:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 801534e:	68fb      	ldr	r3, [r7, #12]
 8015350:	2b00      	cmp	r3, #0
 8015352:	d101      	bne.n	8015358 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8015354:	2302      	movs	r3, #2
 8015356:	e020      	b.n	801539a <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8015358:	68fa      	ldr	r2, [r7, #12]
 801535a:	23ad      	movs	r3, #173	@ 0xad
 801535c:	009b      	lsls	r3, r3, #2
 801535e:	58d3      	ldr	r3, [r2, r3]
 8015360:	2b00      	cmp	r3, #0
 8015362:	d004      	beq.n	801536e <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 8015364:	68fa      	ldr	r2, [r7, #12]
 8015366:	23ad      	movs	r3, #173	@ 0xad
 8015368:	009b      	lsls	r3, r3, #2
 801536a:	2100      	movs	r1, #0
 801536c:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 801536e:	68bb      	ldr	r3, [r7, #8]
 8015370:	2b00      	cmp	r3, #0
 8015372:	d004      	beq.n	801537e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8015374:	68fa      	ldr	r2, [r7, #12]
 8015376:	23ac      	movs	r3, #172	@ 0xac
 8015378:	009b      	lsls	r3, r3, #2
 801537a:	68b9      	ldr	r1, [r7, #8]
 801537c:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801537e:	68fa      	ldr	r2, [r7, #12]
 8015380:	23a7      	movs	r3, #167	@ 0xa7
 8015382:	009b      	lsls	r3, r3, #2
 8015384:	2101      	movs	r1, #1
 8015386:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 8015388:	68fb      	ldr	r3, [r7, #12]
 801538a:	1dfa      	adds	r2, r7, #7
 801538c:	7812      	ldrb	r2, [r2, #0]
 801538e:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8015390:	68fb      	ldr	r3, [r7, #12]
 8015392:	0018      	movs	r0, r3
 8015394:	f001 fd0c 	bl	8016db0 <USBD_LL_Init>

  return USBD_OK;
 8015398:	2300      	movs	r3, #0
}
 801539a:	0018      	movs	r0, r3
 801539c:	46bd      	mov	sp, r7
 801539e:	b004      	add	sp, #16
 80153a0:	bd80      	pop	{r7, pc}

080153a2 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80153a2:	b580      	push	{r7, lr}
 80153a4:	b084      	sub	sp, #16
 80153a6:	af00      	add	r7, sp, #0
 80153a8:	6078      	str	r0, [r7, #4]
 80153aa:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80153ac:	200f      	movs	r0, #15
 80153ae:	183b      	adds	r3, r7, r0
 80153b0:	2200      	movs	r2, #0
 80153b2:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 80153b4:	683b      	ldr	r3, [r7, #0]
 80153b6:	2b00      	cmp	r3, #0
 80153b8:	d008      	beq.n	80153cc <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80153ba:	687a      	ldr	r2, [r7, #4]
 80153bc:	23ad      	movs	r3, #173	@ 0xad
 80153be:	009b      	lsls	r3, r3, #2
 80153c0:	6839      	ldr	r1, [r7, #0]
 80153c2:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 80153c4:	183b      	adds	r3, r7, r0
 80153c6:	2200      	movs	r2, #0
 80153c8:	701a      	strb	r2, [r3, #0]
 80153ca:	e003      	b.n	80153d4 <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80153cc:	230f      	movs	r3, #15
 80153ce:	18fb      	adds	r3, r7, r3
 80153d0:	2202      	movs	r2, #2
 80153d2:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80153d4:	230f      	movs	r3, #15
 80153d6:	18fb      	adds	r3, r7, r3
 80153d8:	781b      	ldrb	r3, [r3, #0]
}
 80153da:	0018      	movs	r0, r3
 80153dc:	46bd      	mov	sp, r7
 80153de:	b004      	add	sp, #16
 80153e0:	bd80      	pop	{r7, pc}

080153e2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80153e2:	b580      	push	{r7, lr}
 80153e4:	b082      	sub	sp, #8
 80153e6:	af00      	add	r7, sp, #0
 80153e8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80153ea:	687b      	ldr	r3, [r7, #4]
 80153ec:	0018      	movs	r0, r3
 80153ee:	f001 fd43 	bl	8016e78 <USBD_LL_Start>

  return USBD_OK;
 80153f2:	2300      	movs	r3, #0
}
 80153f4:	0018      	movs	r0, r3
 80153f6:	46bd      	mov	sp, r7
 80153f8:	b002      	add	sp, #8
 80153fa:	bd80      	pop	{r7, pc}

080153fc <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80153fc:	b580      	push	{r7, lr}
 80153fe:	b082      	sub	sp, #8
 8015400:	af00      	add	r7, sp, #0
 8015402:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8015404:	2300      	movs	r3, #0
}
 8015406:	0018      	movs	r0, r3
 8015408:	46bd      	mov	sp, r7
 801540a:	b002      	add	sp, #8
 801540c:	bd80      	pop	{r7, pc}

0801540e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 801540e:	b590      	push	{r4, r7, lr}
 8015410:	b085      	sub	sp, #20
 8015412:	af00      	add	r7, sp, #0
 8015414:	6078      	str	r0, [r7, #4]
 8015416:	000a      	movs	r2, r1
 8015418:	1cfb      	adds	r3, r7, #3
 801541a:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 801541c:	240f      	movs	r4, #15
 801541e:	193b      	adds	r3, r7, r4
 8015420:	2202      	movs	r2, #2
 8015422:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 8015424:	687a      	ldr	r2, [r7, #4]
 8015426:	23ad      	movs	r3, #173	@ 0xad
 8015428:	009b      	lsls	r3, r3, #2
 801542a:	58d3      	ldr	r3, [r2, r3]
 801542c:	2b00      	cmp	r3, #0
 801542e:	d00e      	beq.n	801544e <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8015430:	687a      	ldr	r2, [r7, #4]
 8015432:	23ad      	movs	r3, #173	@ 0xad
 8015434:	009b      	lsls	r3, r3, #2
 8015436:	58d3      	ldr	r3, [r2, r3]
 8015438:	681b      	ldr	r3, [r3, #0]
 801543a:	1cfa      	adds	r2, r7, #3
 801543c:	7811      	ldrb	r1, [r2, #0]
 801543e:	687a      	ldr	r2, [r7, #4]
 8015440:	0010      	movs	r0, r2
 8015442:	4798      	blx	r3
 8015444:	1e03      	subs	r3, r0, #0
 8015446:	d102      	bne.n	801544e <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 8015448:	193b      	adds	r3, r7, r4
 801544a:	2200      	movs	r2, #0
 801544c:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 801544e:	230f      	movs	r3, #15
 8015450:	18fb      	adds	r3, r7, r3
 8015452:	781b      	ldrb	r3, [r3, #0]
}
 8015454:	0018      	movs	r0, r3
 8015456:	46bd      	mov	sp, r7
 8015458:	b005      	add	sp, #20
 801545a:	bd90      	pop	{r4, r7, pc}

0801545c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 801545c:	b580      	push	{r7, lr}
 801545e:	b082      	sub	sp, #8
 8015460:	af00      	add	r7, sp, #0
 8015462:	6078      	str	r0, [r7, #4]
 8015464:	000a      	movs	r2, r1
 8015466:	1cfb      	adds	r3, r7, #3
 8015468:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 801546a:	687a      	ldr	r2, [r7, #4]
 801546c:	23ad      	movs	r3, #173	@ 0xad
 801546e:	009b      	lsls	r3, r3, #2
 8015470:	58d3      	ldr	r3, [r2, r3]
 8015472:	685b      	ldr	r3, [r3, #4]
 8015474:	1cfa      	adds	r2, r7, #3
 8015476:	7811      	ldrb	r1, [r2, #0]
 8015478:	687a      	ldr	r2, [r7, #4]
 801547a:	0010      	movs	r0, r2
 801547c:	4798      	blx	r3

  return USBD_OK;
 801547e:	2300      	movs	r3, #0
}
 8015480:	0018      	movs	r0, r3
 8015482:	46bd      	mov	sp, r7
 8015484:	b002      	add	sp, #8
 8015486:	bd80      	pop	{r7, pc}

08015488 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8015488:	b580      	push	{r7, lr}
 801548a:	b082      	sub	sp, #8
 801548c:	af00      	add	r7, sp, #0
 801548e:	6078      	str	r0, [r7, #4]
 8015490:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8015492:	687b      	ldr	r3, [r7, #4]
 8015494:	22aa      	movs	r2, #170	@ 0xaa
 8015496:	0092      	lsls	r2, r2, #2
 8015498:	4694      	mov	ip, r2
 801549a:	4463      	add	r3, ip
 801549c:	683a      	ldr	r2, [r7, #0]
 801549e:	0011      	movs	r1, r2
 80154a0:	0018      	movs	r0, r3
 80154a2:	f001 f810 	bl	80164c6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80154a6:	687a      	ldr	r2, [r7, #4]
 80154a8:	23a5      	movs	r3, #165	@ 0xa5
 80154aa:	009b      	lsls	r3, r3, #2
 80154ac:	2101      	movs	r1, #1
 80154ae:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 80154b0:	687b      	ldr	r3, [r7, #4]
 80154b2:	4a23      	ldr	r2, [pc, #140]	@ (8015540 <USBD_LL_SetupStage+0xb8>)
 80154b4:	5a9b      	ldrh	r3, [r3, r2]
 80154b6:	0019      	movs	r1, r3
 80154b8:	687a      	ldr	r2, [r7, #4]
 80154ba:	23a6      	movs	r3, #166	@ 0xa6
 80154bc:	009b      	lsls	r3, r3, #2
 80154be:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 80154c0:	687a      	ldr	r2, [r7, #4]
 80154c2:	23aa      	movs	r3, #170	@ 0xaa
 80154c4:	009b      	lsls	r3, r3, #2
 80154c6:	5cd3      	ldrb	r3, [r2, r3]
 80154c8:	001a      	movs	r2, r3
 80154ca:	231f      	movs	r3, #31
 80154cc:	4013      	ands	r3, r2
 80154ce:	2b02      	cmp	r3, #2
 80154d0:	d019      	beq.n	8015506 <USBD_LL_SetupStage+0x7e>
 80154d2:	d822      	bhi.n	801551a <USBD_LL_SetupStage+0x92>
 80154d4:	2b00      	cmp	r3, #0
 80154d6:	d002      	beq.n	80154de <USBD_LL_SetupStage+0x56>
 80154d8:	2b01      	cmp	r3, #1
 80154da:	d00a      	beq.n	80154f2 <USBD_LL_SetupStage+0x6a>
 80154dc:	e01d      	b.n	801551a <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80154de:	687b      	ldr	r3, [r7, #4]
 80154e0:	22aa      	movs	r2, #170	@ 0xaa
 80154e2:	0092      	lsls	r2, r2, #2
 80154e4:	189a      	adds	r2, r3, r2
 80154e6:	687b      	ldr	r3, [r7, #4]
 80154e8:	0011      	movs	r1, r2
 80154ea:	0018      	movs	r0, r3
 80154ec:	f000 fa10 	bl	8015910 <USBD_StdDevReq>
      break;
 80154f0:	e020      	b.n	8015534 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80154f2:	687b      	ldr	r3, [r7, #4]
 80154f4:	22aa      	movs	r2, #170	@ 0xaa
 80154f6:	0092      	lsls	r2, r2, #2
 80154f8:	189a      	adds	r2, r3, r2
 80154fa:	687b      	ldr	r3, [r7, #4]
 80154fc:	0011      	movs	r1, r2
 80154fe:	0018      	movs	r0, r3
 8015500:	f000 fa78 	bl	80159f4 <USBD_StdItfReq>
      break;
 8015504:	e016      	b.n	8015534 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8015506:	687b      	ldr	r3, [r7, #4]
 8015508:	22aa      	movs	r2, #170	@ 0xaa
 801550a:	0092      	lsls	r2, r2, #2
 801550c:	189a      	adds	r2, r3, r2
 801550e:	687b      	ldr	r3, [r7, #4]
 8015510:	0011      	movs	r1, r2
 8015512:	0018      	movs	r0, r3
 8015514:	f000 fac5 	bl	8015aa2 <USBD_StdEPReq>
      break;
 8015518:	e00c      	b.n	8015534 <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 801551a:	687a      	ldr	r2, [r7, #4]
 801551c:	23aa      	movs	r3, #170	@ 0xaa
 801551e:	009b      	lsls	r3, r3, #2
 8015520:	5cd3      	ldrb	r3, [r2, r3]
 8015522:	227f      	movs	r2, #127	@ 0x7f
 8015524:	4393      	bics	r3, r2
 8015526:	b2da      	uxtb	r2, r3
 8015528:	687b      	ldr	r3, [r7, #4]
 801552a:	0011      	movs	r1, r2
 801552c:	0018      	movs	r0, r3
 801552e:	f001 fd2a 	bl	8016f86 <USBD_LL_StallEP>
      break;
 8015532:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 8015534:	2300      	movs	r3, #0
}
 8015536:	0018      	movs	r0, r3
 8015538:	46bd      	mov	sp, r7
 801553a:	b002      	add	sp, #8
 801553c:	bd80      	pop	{r7, pc}
 801553e:	46c0      	nop			@ (mov r8, r8)
 8015540:	000002ae 	.word	0x000002ae

08015544 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8015544:	b580      	push	{r7, lr}
 8015546:	b086      	sub	sp, #24
 8015548:	af00      	add	r7, sp, #0
 801554a:	60f8      	str	r0, [r7, #12]
 801554c:	607a      	str	r2, [r7, #4]
 801554e:	200b      	movs	r0, #11
 8015550:	183b      	adds	r3, r7, r0
 8015552:	1c0a      	adds	r2, r1, #0
 8015554:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8015556:	183b      	adds	r3, r7, r0
 8015558:	781b      	ldrb	r3, [r3, #0]
 801555a:	2b00      	cmp	r3, #0
 801555c:	d154      	bne.n	8015608 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 801555e:	68fb      	ldr	r3, [r7, #12]
 8015560:	3355      	adds	r3, #85	@ 0x55
 8015562:	33ff      	adds	r3, #255	@ 0xff
 8015564:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8015566:	68fa      	ldr	r2, [r7, #12]
 8015568:	23a5      	movs	r3, #165	@ 0xa5
 801556a:	009b      	lsls	r3, r3, #2
 801556c:	58d3      	ldr	r3, [r2, r3]
 801556e:	2b03      	cmp	r3, #3
 8015570:	d139      	bne.n	80155e6 <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 8015572:	697b      	ldr	r3, [r7, #20]
 8015574:	68da      	ldr	r2, [r3, #12]
 8015576:	697b      	ldr	r3, [r7, #20]
 8015578:	691b      	ldr	r3, [r3, #16]
 801557a:	429a      	cmp	r2, r3
 801557c:	d919      	bls.n	80155b2 <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 801557e:	697b      	ldr	r3, [r7, #20]
 8015580:	68da      	ldr	r2, [r3, #12]
 8015582:	697b      	ldr	r3, [r7, #20]
 8015584:	691b      	ldr	r3, [r3, #16]
 8015586:	1ad2      	subs	r2, r2, r3
 8015588:	697b      	ldr	r3, [r7, #20]
 801558a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 801558c:	697b      	ldr	r3, [r7, #20]
 801558e:	68da      	ldr	r2, [r3, #12]
 8015590:	697b      	ldr	r3, [r7, #20]
 8015592:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8015594:	429a      	cmp	r2, r3
 8015596:	d203      	bcs.n	80155a0 <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8015598:	697b      	ldr	r3, [r7, #20]
 801559a:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 801559c:	b29b      	uxth	r3, r3
 801559e:	e002      	b.n	80155a6 <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80155a0:	697b      	ldr	r3, [r7, #20]
 80155a2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80155a4:	b29b      	uxth	r3, r3
 80155a6:	6879      	ldr	r1, [r7, #4]
 80155a8:	68f8      	ldr	r0, [r7, #12]
 80155aa:	001a      	movs	r2, r3
 80155ac:	f001 f898 	bl	80166e0 <USBD_CtlContinueRx>
 80155b0:	e045      	b.n	801563e <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80155b2:	68fa      	ldr	r2, [r7, #12]
 80155b4:	23ad      	movs	r3, #173	@ 0xad
 80155b6:	009b      	lsls	r3, r3, #2
 80155b8:	58d3      	ldr	r3, [r2, r3]
 80155ba:	691b      	ldr	r3, [r3, #16]
 80155bc:	2b00      	cmp	r3, #0
 80155be:	d00d      	beq.n	80155dc <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80155c0:	68fa      	ldr	r2, [r7, #12]
 80155c2:	23a7      	movs	r3, #167	@ 0xa7
 80155c4:	009b      	lsls	r3, r3, #2
 80155c6:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80155c8:	2b03      	cmp	r3, #3
 80155ca:	d107      	bne.n	80155dc <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80155cc:	68fa      	ldr	r2, [r7, #12]
 80155ce:	23ad      	movs	r3, #173	@ 0xad
 80155d0:	009b      	lsls	r3, r3, #2
 80155d2:	58d3      	ldr	r3, [r2, r3]
 80155d4:	691b      	ldr	r3, [r3, #16]
 80155d6:	68fa      	ldr	r2, [r7, #12]
 80155d8:	0010      	movs	r0, r2
 80155da:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80155dc:	68fb      	ldr	r3, [r7, #12]
 80155de:	0018      	movs	r0, r3
 80155e0:	f001 f891 	bl	8016706 <USBD_CtlSendStatus>
 80155e4:	e02b      	b.n	801563e <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80155e6:	68fa      	ldr	r2, [r7, #12]
 80155e8:	23a5      	movs	r3, #165	@ 0xa5
 80155ea:	009b      	lsls	r3, r3, #2
 80155ec:	58d3      	ldr	r3, [r2, r3]
 80155ee:	2b05      	cmp	r3, #5
 80155f0:	d125      	bne.n	801563e <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80155f2:	68fa      	ldr	r2, [r7, #12]
 80155f4:	23a5      	movs	r3, #165	@ 0xa5
 80155f6:	009b      	lsls	r3, r3, #2
 80155f8:	2100      	movs	r1, #0
 80155fa:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 80155fc:	68fb      	ldr	r3, [r7, #12]
 80155fe:	2100      	movs	r1, #0
 8015600:	0018      	movs	r0, r3
 8015602:	f001 fcc0 	bl	8016f86 <USBD_LL_StallEP>
 8015606:	e01a      	b.n	801563e <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8015608:	68fa      	ldr	r2, [r7, #12]
 801560a:	23ad      	movs	r3, #173	@ 0xad
 801560c:	009b      	lsls	r3, r3, #2
 801560e:	58d3      	ldr	r3, [r2, r3]
 8015610:	699b      	ldr	r3, [r3, #24]
 8015612:	2b00      	cmp	r3, #0
 8015614:	d011      	beq.n	801563a <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8015616:	68fa      	ldr	r2, [r7, #12]
 8015618:	23a7      	movs	r3, #167	@ 0xa7
 801561a:	009b      	lsls	r3, r3, #2
 801561c:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 801561e:	2b03      	cmp	r3, #3
 8015620:	d10b      	bne.n	801563a <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8015622:	68fa      	ldr	r2, [r7, #12]
 8015624:	23ad      	movs	r3, #173	@ 0xad
 8015626:	009b      	lsls	r3, r3, #2
 8015628:	58d3      	ldr	r3, [r2, r3]
 801562a:	699b      	ldr	r3, [r3, #24]
 801562c:	220b      	movs	r2, #11
 801562e:	18ba      	adds	r2, r7, r2
 8015630:	7811      	ldrb	r1, [r2, #0]
 8015632:	68fa      	ldr	r2, [r7, #12]
 8015634:	0010      	movs	r0, r2
 8015636:	4798      	blx	r3
 8015638:	e001      	b.n	801563e <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 801563a:	2302      	movs	r3, #2
 801563c:	e000      	b.n	8015640 <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 801563e:	2300      	movs	r3, #0
}
 8015640:	0018      	movs	r0, r3
 8015642:	46bd      	mov	sp, r7
 8015644:	b006      	add	sp, #24
 8015646:	bd80      	pop	{r7, pc}

08015648 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8015648:	b580      	push	{r7, lr}
 801564a:	b086      	sub	sp, #24
 801564c:	af00      	add	r7, sp, #0
 801564e:	60f8      	str	r0, [r7, #12]
 8015650:	607a      	str	r2, [r7, #4]
 8015652:	200b      	movs	r0, #11
 8015654:	183b      	adds	r3, r7, r0
 8015656:	1c0a      	adds	r2, r1, #0
 8015658:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 801565a:	183b      	adds	r3, r7, r0
 801565c:	781b      	ldrb	r3, [r3, #0]
 801565e:	2b00      	cmp	r3, #0
 8015660:	d000      	beq.n	8015664 <USBD_LL_DataInStage+0x1c>
 8015662:	e08e      	b.n	8015782 <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 8015664:	68fb      	ldr	r3, [r7, #12]
 8015666:	3314      	adds	r3, #20
 8015668:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 801566a:	68fa      	ldr	r2, [r7, #12]
 801566c:	23a5      	movs	r3, #165	@ 0xa5
 801566e:	009b      	lsls	r3, r3, #2
 8015670:	58d3      	ldr	r3, [r2, r3]
 8015672:	2b02      	cmp	r3, #2
 8015674:	d164      	bne.n	8015740 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 8015676:	697b      	ldr	r3, [r7, #20]
 8015678:	68da      	ldr	r2, [r3, #12]
 801567a:	697b      	ldr	r3, [r7, #20]
 801567c:	691b      	ldr	r3, [r3, #16]
 801567e:	429a      	cmp	r2, r3
 8015680:	d915      	bls.n	80156ae <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8015682:	697b      	ldr	r3, [r7, #20]
 8015684:	68da      	ldr	r2, [r3, #12]
 8015686:	697b      	ldr	r3, [r7, #20]
 8015688:	691b      	ldr	r3, [r3, #16]
 801568a:	1ad2      	subs	r2, r2, r3
 801568c:	697b      	ldr	r3, [r7, #20]
 801568e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8015690:	697b      	ldr	r3, [r7, #20]
 8015692:	68db      	ldr	r3, [r3, #12]
 8015694:	b29a      	uxth	r2, r3
 8015696:	6879      	ldr	r1, [r7, #4]
 8015698:	68fb      	ldr	r3, [r7, #12]
 801569a:	0018      	movs	r0, r3
 801569c:	f000 ffe9 	bl	8016672 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80156a0:	68f8      	ldr	r0, [r7, #12]
 80156a2:	2300      	movs	r3, #0
 80156a4:	2200      	movs	r2, #0
 80156a6:	2100      	movs	r1, #0
 80156a8:	f001 fd56 	bl	8017158 <USBD_LL_PrepareReceive>
 80156ac:	e059      	b.n	8015762 <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80156ae:	697b      	ldr	r3, [r7, #20]
 80156b0:	689a      	ldr	r2, [r3, #8]
 80156b2:	697b      	ldr	r3, [r7, #20]
 80156b4:	691b      	ldr	r3, [r3, #16]
 80156b6:	0019      	movs	r1, r3
 80156b8:	0010      	movs	r0, r2
 80156ba:	f7ea fdc7 	bl	800024c <__aeabi_uidivmod>
 80156be:	1e0b      	subs	r3, r1, #0
 80156c0:	d11f      	bne.n	8015702 <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 80156c2:	697b      	ldr	r3, [r7, #20]
 80156c4:	689a      	ldr	r2, [r3, #8]
 80156c6:	697b      	ldr	r3, [r7, #20]
 80156c8:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80156ca:	429a      	cmp	r2, r3
 80156cc:	d319      	bcc.n	8015702 <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 80156ce:	697b      	ldr	r3, [r7, #20]
 80156d0:	689a      	ldr	r2, [r3, #8]
 80156d2:	68f9      	ldr	r1, [r7, #12]
 80156d4:	23a6      	movs	r3, #166	@ 0xa6
 80156d6:	009b      	lsls	r3, r3, #2
 80156d8:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 80156da:	429a      	cmp	r2, r3
 80156dc:	d211      	bcs.n	8015702 <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80156de:	68fb      	ldr	r3, [r7, #12]
 80156e0:	2200      	movs	r2, #0
 80156e2:	2100      	movs	r1, #0
 80156e4:	0018      	movs	r0, r3
 80156e6:	f000 ffc4 	bl	8016672 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80156ea:	68fa      	ldr	r2, [r7, #12]
 80156ec:	23a6      	movs	r3, #166	@ 0xa6
 80156ee:	009b      	lsls	r3, r3, #2
 80156f0:	2100      	movs	r1, #0
 80156f2:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80156f4:	68f8      	ldr	r0, [r7, #12]
 80156f6:	2300      	movs	r3, #0
 80156f8:	2200      	movs	r2, #0
 80156fa:	2100      	movs	r1, #0
 80156fc:	f001 fd2c 	bl	8017158 <USBD_LL_PrepareReceive>
 8015700:	e02f      	b.n	8015762 <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8015702:	68fa      	ldr	r2, [r7, #12]
 8015704:	23ad      	movs	r3, #173	@ 0xad
 8015706:	009b      	lsls	r3, r3, #2
 8015708:	58d3      	ldr	r3, [r2, r3]
 801570a:	68db      	ldr	r3, [r3, #12]
 801570c:	2b00      	cmp	r3, #0
 801570e:	d00d      	beq.n	801572c <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8015710:	68fa      	ldr	r2, [r7, #12]
 8015712:	23a7      	movs	r3, #167	@ 0xa7
 8015714:	009b      	lsls	r3, r3, #2
 8015716:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8015718:	2b03      	cmp	r3, #3
 801571a:	d107      	bne.n	801572c <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 801571c:	68fa      	ldr	r2, [r7, #12]
 801571e:	23ad      	movs	r3, #173	@ 0xad
 8015720:	009b      	lsls	r3, r3, #2
 8015722:	58d3      	ldr	r3, [r2, r3]
 8015724:	68db      	ldr	r3, [r3, #12]
 8015726:	68fa      	ldr	r2, [r7, #12]
 8015728:	0010      	movs	r0, r2
 801572a:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 801572c:	68fb      	ldr	r3, [r7, #12]
 801572e:	2180      	movs	r1, #128	@ 0x80
 8015730:	0018      	movs	r0, r3
 8015732:	f001 fc28 	bl	8016f86 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8015736:	68fb      	ldr	r3, [r7, #12]
 8015738:	0018      	movs	r0, r3
 801573a:	f000 fff8 	bl	801672e <USBD_CtlReceiveStatus>
 801573e:	e010      	b.n	8015762 <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8015740:	68fa      	ldr	r2, [r7, #12]
 8015742:	23a5      	movs	r3, #165	@ 0xa5
 8015744:	009b      	lsls	r3, r3, #2
 8015746:	58d3      	ldr	r3, [r2, r3]
 8015748:	2b04      	cmp	r3, #4
 801574a:	d005      	beq.n	8015758 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 801574c:	68fa      	ldr	r2, [r7, #12]
 801574e:	23a5      	movs	r3, #165	@ 0xa5
 8015750:	009b      	lsls	r3, r3, #2
 8015752:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8015754:	2b00      	cmp	r3, #0
 8015756:	d104      	bne.n	8015762 <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8015758:	68fb      	ldr	r3, [r7, #12]
 801575a:	2180      	movs	r1, #128	@ 0x80
 801575c:	0018      	movs	r0, r3
 801575e:	f001 fc12 	bl	8016f86 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8015762:	68fa      	ldr	r2, [r7, #12]
 8015764:	23a8      	movs	r3, #168	@ 0xa8
 8015766:	009b      	lsls	r3, r3, #2
 8015768:	5cd3      	ldrb	r3, [r2, r3]
 801576a:	2b01      	cmp	r3, #1
 801576c:	d124      	bne.n	80157b8 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 801576e:	68fb      	ldr	r3, [r7, #12]
 8015770:	0018      	movs	r0, r3
 8015772:	f7ff fe43 	bl	80153fc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8015776:	68fa      	ldr	r2, [r7, #12]
 8015778:	23a8      	movs	r3, #168	@ 0xa8
 801577a:	009b      	lsls	r3, r3, #2
 801577c:	2100      	movs	r1, #0
 801577e:	54d1      	strb	r1, [r2, r3]
 8015780:	e01a      	b.n	80157b8 <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8015782:	68fa      	ldr	r2, [r7, #12]
 8015784:	23ad      	movs	r3, #173	@ 0xad
 8015786:	009b      	lsls	r3, r3, #2
 8015788:	58d3      	ldr	r3, [r2, r3]
 801578a:	695b      	ldr	r3, [r3, #20]
 801578c:	2b00      	cmp	r3, #0
 801578e:	d011      	beq.n	80157b4 <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8015790:	68fa      	ldr	r2, [r7, #12]
 8015792:	23a7      	movs	r3, #167	@ 0xa7
 8015794:	009b      	lsls	r3, r3, #2
 8015796:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 8015798:	2b03      	cmp	r3, #3
 801579a:	d10b      	bne.n	80157b4 <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 801579c:	68fa      	ldr	r2, [r7, #12]
 801579e:	23ad      	movs	r3, #173	@ 0xad
 80157a0:	009b      	lsls	r3, r3, #2
 80157a2:	58d3      	ldr	r3, [r2, r3]
 80157a4:	695b      	ldr	r3, [r3, #20]
 80157a6:	220b      	movs	r2, #11
 80157a8:	18ba      	adds	r2, r7, r2
 80157aa:	7811      	ldrb	r1, [r2, #0]
 80157ac:	68fa      	ldr	r2, [r7, #12]
 80157ae:	0010      	movs	r0, r2
 80157b0:	4798      	blx	r3
 80157b2:	e001      	b.n	80157b8 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80157b4:	2302      	movs	r3, #2
 80157b6:	e000      	b.n	80157ba <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 80157b8:	2300      	movs	r3, #0
}
 80157ba:	0018      	movs	r0, r3
 80157bc:	46bd      	mov	sp, r7
 80157be:	b006      	add	sp, #24
 80157c0:	bd80      	pop	{r7, pc}

080157c2 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80157c2:	b580      	push	{r7, lr}
 80157c4:	b082      	sub	sp, #8
 80157c6:	af00      	add	r7, sp, #0
 80157c8:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80157ca:	6878      	ldr	r0, [r7, #4]
 80157cc:	2340      	movs	r3, #64	@ 0x40
 80157ce:	2200      	movs	r2, #0
 80157d0:	2100      	movs	r1, #0
 80157d2:	f001 fb76 	bl	8016ec2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80157d6:	687a      	ldr	r2, [r7, #4]
 80157d8:	23ac      	movs	r3, #172	@ 0xac
 80157da:	005b      	lsls	r3, r3, #1
 80157dc:	2101      	movs	r1, #1
 80157de:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80157e0:	687a      	ldr	r2, [r7, #4]
 80157e2:	23b2      	movs	r3, #178	@ 0xb2
 80157e4:	005b      	lsls	r3, r3, #1
 80157e6:	2140      	movs	r1, #64	@ 0x40
 80157e8:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80157ea:	6878      	ldr	r0, [r7, #4]
 80157ec:	2340      	movs	r3, #64	@ 0x40
 80157ee:	2200      	movs	r2, #0
 80157f0:	2180      	movs	r1, #128	@ 0x80
 80157f2:	f001 fb66 	bl	8016ec2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80157f6:	687b      	ldr	r3, [r7, #4]
 80157f8:	2201      	movs	r2, #1
 80157fa:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80157fc:	687b      	ldr	r3, [r7, #4]
 80157fe:	2240      	movs	r2, #64	@ 0x40
 8015800:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015802:	687a      	ldr	r2, [r7, #4]
 8015804:	23a7      	movs	r3, #167	@ 0xa7
 8015806:	009b      	lsls	r3, r3, #2
 8015808:	2101      	movs	r1, #1
 801580a:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 801580c:	687a      	ldr	r2, [r7, #4]
 801580e:	23a5      	movs	r3, #165	@ 0xa5
 8015810:	009b      	lsls	r3, r3, #2
 8015812:	2100      	movs	r1, #0
 8015814:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 8015816:	687b      	ldr	r3, [r7, #4]
 8015818:	2200      	movs	r2, #0
 801581a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 801581c:	687a      	ldr	r2, [r7, #4]
 801581e:	23a9      	movs	r3, #169	@ 0xa9
 8015820:	009b      	lsls	r3, r3, #2
 8015822:	2100      	movs	r1, #0
 8015824:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 8015826:	687a      	ldr	r2, [r7, #4]
 8015828:	23ae      	movs	r3, #174	@ 0xae
 801582a:	009b      	lsls	r3, r3, #2
 801582c:	58d3      	ldr	r3, [r2, r3]
 801582e:	2b00      	cmp	r3, #0
 8015830:	d00a      	beq.n	8015848 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8015832:	687a      	ldr	r2, [r7, #4]
 8015834:	23ad      	movs	r3, #173	@ 0xad
 8015836:	009b      	lsls	r3, r3, #2
 8015838:	58d3      	ldr	r3, [r2, r3]
 801583a:	685a      	ldr	r2, [r3, #4]
 801583c:	687b      	ldr	r3, [r7, #4]
 801583e:	685b      	ldr	r3, [r3, #4]
 8015840:	b2d9      	uxtb	r1, r3
 8015842:	687b      	ldr	r3, [r7, #4]
 8015844:	0018      	movs	r0, r3
 8015846:	4790      	blx	r2
  }

  return USBD_OK;
 8015848:	2300      	movs	r3, #0
}
 801584a:	0018      	movs	r0, r3
 801584c:	46bd      	mov	sp, r7
 801584e:	b002      	add	sp, #8
 8015850:	bd80      	pop	{r7, pc}

08015852 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8015852:	b580      	push	{r7, lr}
 8015854:	b082      	sub	sp, #8
 8015856:	af00      	add	r7, sp, #0
 8015858:	6078      	str	r0, [r7, #4]
 801585a:	000a      	movs	r2, r1
 801585c:	1cfb      	adds	r3, r7, #3
 801585e:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 8015860:	687b      	ldr	r3, [r7, #4]
 8015862:	1cfa      	adds	r2, r7, #3
 8015864:	7812      	ldrb	r2, [r2, #0]
 8015866:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8015868:	2300      	movs	r3, #0
}
 801586a:	0018      	movs	r0, r3
 801586c:	46bd      	mov	sp, r7
 801586e:	b002      	add	sp, #8
 8015870:	bd80      	pop	{r7, pc}
	...

08015874 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8015874:	b580      	push	{r7, lr}
 8015876:	b082      	sub	sp, #8
 8015878:	af00      	add	r7, sp, #0
 801587a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 801587c:	687a      	ldr	r2, [r7, #4]
 801587e:	23a7      	movs	r3, #167	@ 0xa7
 8015880:	009b      	lsls	r3, r3, #2
 8015882:	5cd1      	ldrb	r1, [r2, r3]
 8015884:	687b      	ldr	r3, [r7, #4]
 8015886:	4a06      	ldr	r2, [pc, #24]	@ (80158a0 <USBD_LL_Suspend+0x2c>)
 8015888:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 801588a:	687a      	ldr	r2, [r7, #4]
 801588c:	23a7      	movs	r3, #167	@ 0xa7
 801588e:	009b      	lsls	r3, r3, #2
 8015890:	2104      	movs	r1, #4
 8015892:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 8015894:	2300      	movs	r3, #0
}
 8015896:	0018      	movs	r0, r3
 8015898:	46bd      	mov	sp, r7
 801589a:	b002      	add	sp, #8
 801589c:	bd80      	pop	{r7, pc}
 801589e:	46c0      	nop			@ (mov r8, r8)
 80158a0:	0000029d 	.word	0x0000029d

080158a4 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80158a4:	b580      	push	{r7, lr}
 80158a6:	b082      	sub	sp, #8
 80158a8:	af00      	add	r7, sp, #0
 80158aa:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80158ac:	687a      	ldr	r2, [r7, #4]
 80158ae:	23a7      	movs	r3, #167	@ 0xa7
 80158b0:	009b      	lsls	r3, r3, #2
 80158b2:	5cd3      	ldrb	r3, [r2, r3]
 80158b4:	2b04      	cmp	r3, #4
 80158b6:	d106      	bne.n	80158c6 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80158b8:	687b      	ldr	r3, [r7, #4]
 80158ba:	4a05      	ldr	r2, [pc, #20]	@ (80158d0 <USBD_LL_Resume+0x2c>)
 80158bc:	5c99      	ldrb	r1, [r3, r2]
 80158be:	687a      	ldr	r2, [r7, #4]
 80158c0:	23a7      	movs	r3, #167	@ 0xa7
 80158c2:	009b      	lsls	r3, r3, #2
 80158c4:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 80158c6:	2300      	movs	r3, #0
}
 80158c8:	0018      	movs	r0, r3
 80158ca:	46bd      	mov	sp, r7
 80158cc:	b002      	add	sp, #8
 80158ce:	bd80      	pop	{r7, pc}
 80158d0:	0000029d 	.word	0x0000029d

080158d4 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80158d4:	b580      	push	{r7, lr}
 80158d6:	b082      	sub	sp, #8
 80158d8:	af00      	add	r7, sp, #0
 80158da:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80158dc:	687a      	ldr	r2, [r7, #4]
 80158de:	23a7      	movs	r3, #167	@ 0xa7
 80158e0:	009b      	lsls	r3, r3, #2
 80158e2:	5cd3      	ldrb	r3, [r2, r3]
 80158e4:	2b03      	cmp	r3, #3
 80158e6:	d10e      	bne.n	8015906 <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 80158e8:	687a      	ldr	r2, [r7, #4]
 80158ea:	23ad      	movs	r3, #173	@ 0xad
 80158ec:	009b      	lsls	r3, r3, #2
 80158ee:	58d3      	ldr	r3, [r2, r3]
 80158f0:	69db      	ldr	r3, [r3, #28]
 80158f2:	2b00      	cmp	r3, #0
 80158f4:	d007      	beq.n	8015906 <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 80158f6:	687a      	ldr	r2, [r7, #4]
 80158f8:	23ad      	movs	r3, #173	@ 0xad
 80158fa:	009b      	lsls	r3, r3, #2
 80158fc:	58d3      	ldr	r3, [r2, r3]
 80158fe:	69db      	ldr	r3, [r3, #28]
 8015900:	687a      	ldr	r2, [r7, #4]
 8015902:	0010      	movs	r0, r2
 8015904:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8015906:	2300      	movs	r3, #0
}
 8015908:	0018      	movs	r0, r3
 801590a:	46bd      	mov	sp, r7
 801590c:	b002      	add	sp, #8
 801590e:	bd80      	pop	{r7, pc}

08015910 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8015910:	b580      	push	{r7, lr}
 8015912:	b084      	sub	sp, #16
 8015914:	af00      	add	r7, sp, #0
 8015916:	6078      	str	r0, [r7, #4]
 8015918:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801591a:	230f      	movs	r3, #15
 801591c:	18fb      	adds	r3, r7, r3
 801591e:	2200      	movs	r2, #0
 8015920:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015922:	683b      	ldr	r3, [r7, #0]
 8015924:	781b      	ldrb	r3, [r3, #0]
 8015926:	001a      	movs	r2, r3
 8015928:	2360      	movs	r3, #96	@ 0x60
 801592a:	4013      	ands	r3, r2
 801592c:	2b40      	cmp	r3, #64	@ 0x40
 801592e:	d004      	beq.n	801593a <USBD_StdDevReq+0x2a>
 8015930:	d84f      	bhi.n	80159d2 <USBD_StdDevReq+0xc2>
 8015932:	2b00      	cmp	r3, #0
 8015934:	d00b      	beq.n	801594e <USBD_StdDevReq+0x3e>
 8015936:	2b20      	cmp	r3, #32
 8015938:	d14b      	bne.n	80159d2 <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 801593a:	687a      	ldr	r2, [r7, #4]
 801593c:	23ad      	movs	r3, #173	@ 0xad
 801593e:	009b      	lsls	r3, r3, #2
 8015940:	58d3      	ldr	r3, [r2, r3]
 8015942:	689b      	ldr	r3, [r3, #8]
 8015944:	6839      	ldr	r1, [r7, #0]
 8015946:	687a      	ldr	r2, [r7, #4]
 8015948:	0010      	movs	r0, r2
 801594a:	4798      	blx	r3
      break;
 801594c:	e048      	b.n	80159e0 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801594e:	683b      	ldr	r3, [r7, #0]
 8015950:	785b      	ldrb	r3, [r3, #1]
 8015952:	2b09      	cmp	r3, #9
 8015954:	d835      	bhi.n	80159c2 <USBD_StdDevReq+0xb2>
 8015956:	009a      	lsls	r2, r3, #2
 8015958:	4b25      	ldr	r3, [pc, #148]	@ (80159f0 <USBD_StdDevReq+0xe0>)
 801595a:	18d3      	adds	r3, r2, r3
 801595c:	681b      	ldr	r3, [r3, #0]
 801595e:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8015960:	683a      	ldr	r2, [r7, #0]
 8015962:	687b      	ldr	r3, [r7, #4]
 8015964:	0011      	movs	r1, r2
 8015966:	0018      	movs	r0, r3
 8015968:	f000 fa52 	bl	8015e10 <USBD_GetDescriptor>
          break;
 801596c:	e030      	b.n	80159d0 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801596e:	683a      	ldr	r2, [r7, #0]
 8015970:	687b      	ldr	r3, [r7, #4]
 8015972:	0011      	movs	r1, r2
 8015974:	0018      	movs	r0, r3
 8015976:	f000 fbfd 	bl	8016174 <USBD_SetAddress>
          break;
 801597a:	e029      	b.n	80159d0 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 801597c:	683a      	ldr	r2, [r7, #0]
 801597e:	687b      	ldr	r3, [r7, #4]
 8015980:	0011      	movs	r1, r2
 8015982:	0018      	movs	r0, r3
 8015984:	f000 fc4a 	bl	801621c <USBD_SetConfig>
          break;
 8015988:	e022      	b.n	80159d0 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801598a:	683a      	ldr	r2, [r7, #0]
 801598c:	687b      	ldr	r3, [r7, #4]
 801598e:	0011      	movs	r1, r2
 8015990:	0018      	movs	r0, r3
 8015992:	f000 fce7 	bl	8016364 <USBD_GetConfig>
          break;
 8015996:	e01b      	b.n	80159d0 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8015998:	683a      	ldr	r2, [r7, #0]
 801599a:	687b      	ldr	r3, [r7, #4]
 801599c:	0011      	movs	r1, r2
 801599e:	0018      	movs	r0, r3
 80159a0:	f000 fd1b 	bl	80163da <USBD_GetStatus>
          break;
 80159a4:	e014      	b.n	80159d0 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80159a6:	683a      	ldr	r2, [r7, #0]
 80159a8:	687b      	ldr	r3, [r7, #4]
 80159aa:	0011      	movs	r1, r2
 80159ac:	0018      	movs	r0, r3
 80159ae:	f000 fd4e 	bl	801644e <USBD_SetFeature>
          break;
 80159b2:	e00d      	b.n	80159d0 <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80159b4:	683a      	ldr	r2, [r7, #0]
 80159b6:	687b      	ldr	r3, [r7, #4]
 80159b8:	0011      	movs	r1, r2
 80159ba:	0018      	movs	r0, r3
 80159bc:	f000 fd5d 	bl	801647a <USBD_ClrFeature>
          break;
 80159c0:	e006      	b.n	80159d0 <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80159c2:	683a      	ldr	r2, [r7, #0]
 80159c4:	687b      	ldr	r3, [r7, #4]
 80159c6:	0011      	movs	r1, r2
 80159c8:	0018      	movs	r0, r3
 80159ca:	f000 fdb4 	bl	8016536 <USBD_CtlError>
          break;
 80159ce:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 80159d0:	e006      	b.n	80159e0 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80159d2:	683a      	ldr	r2, [r7, #0]
 80159d4:	687b      	ldr	r3, [r7, #4]
 80159d6:	0011      	movs	r1, r2
 80159d8:	0018      	movs	r0, r3
 80159da:	f000 fdac 	bl	8016536 <USBD_CtlError>
      break;
 80159de:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 80159e0:	230f      	movs	r3, #15
 80159e2:	18fb      	adds	r3, r7, r3
 80159e4:	781b      	ldrb	r3, [r3, #0]
}
 80159e6:	0018      	movs	r0, r3
 80159e8:	46bd      	mov	sp, r7
 80159ea:	b004      	add	sp, #16
 80159ec:	bd80      	pop	{r7, pc}
 80159ee:	46c0      	nop			@ (mov r8, r8)
 80159f0:	0801ba00 	.word	0x0801ba00

080159f4 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80159f4:	b5b0      	push	{r4, r5, r7, lr}
 80159f6:	b084      	sub	sp, #16
 80159f8:	af00      	add	r7, sp, #0
 80159fa:	6078      	str	r0, [r7, #4]
 80159fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80159fe:	230f      	movs	r3, #15
 8015a00:	18fb      	adds	r3, r7, r3
 8015a02:	2200      	movs	r2, #0
 8015a04:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015a06:	683b      	ldr	r3, [r7, #0]
 8015a08:	781b      	ldrb	r3, [r3, #0]
 8015a0a:	001a      	movs	r2, r3
 8015a0c:	2360      	movs	r3, #96	@ 0x60
 8015a0e:	4013      	ands	r3, r2
 8015a10:	2b40      	cmp	r3, #64	@ 0x40
 8015a12:	d004      	beq.n	8015a1e <USBD_StdItfReq+0x2a>
 8015a14:	d839      	bhi.n	8015a8a <USBD_StdItfReq+0x96>
 8015a16:	2b00      	cmp	r3, #0
 8015a18:	d001      	beq.n	8015a1e <USBD_StdItfReq+0x2a>
 8015a1a:	2b20      	cmp	r3, #32
 8015a1c:	d135      	bne.n	8015a8a <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8015a1e:	687a      	ldr	r2, [r7, #4]
 8015a20:	23a7      	movs	r3, #167	@ 0xa7
 8015a22:	009b      	lsls	r3, r3, #2
 8015a24:	5cd3      	ldrb	r3, [r2, r3]
 8015a26:	3b01      	subs	r3, #1
 8015a28:	2b02      	cmp	r3, #2
 8015a2a:	d825      	bhi.n	8015a78 <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8015a2c:	683b      	ldr	r3, [r7, #0]
 8015a2e:	889b      	ldrh	r3, [r3, #4]
 8015a30:	b2db      	uxtb	r3, r3
 8015a32:	2b01      	cmp	r3, #1
 8015a34:	d819      	bhi.n	8015a6a <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8015a36:	687a      	ldr	r2, [r7, #4]
 8015a38:	23ad      	movs	r3, #173	@ 0xad
 8015a3a:	009b      	lsls	r3, r3, #2
 8015a3c:	58d3      	ldr	r3, [r2, r3]
 8015a3e:	689b      	ldr	r3, [r3, #8]
 8015a40:	250f      	movs	r5, #15
 8015a42:	197c      	adds	r4, r7, r5
 8015a44:	6839      	ldr	r1, [r7, #0]
 8015a46:	687a      	ldr	r2, [r7, #4]
 8015a48:	0010      	movs	r0, r2
 8015a4a:	4798      	blx	r3
 8015a4c:	0003      	movs	r3, r0
 8015a4e:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8015a50:	683b      	ldr	r3, [r7, #0]
 8015a52:	88db      	ldrh	r3, [r3, #6]
 8015a54:	2b00      	cmp	r3, #0
 8015a56:	d116      	bne.n	8015a86 <USBD_StdItfReq+0x92>
 8015a58:	197b      	adds	r3, r7, r5
 8015a5a:	781b      	ldrb	r3, [r3, #0]
 8015a5c:	2b00      	cmp	r3, #0
 8015a5e:	d112      	bne.n	8015a86 <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 8015a60:	687b      	ldr	r3, [r7, #4]
 8015a62:	0018      	movs	r0, r3
 8015a64:	f000 fe4f 	bl	8016706 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8015a68:	e00d      	b.n	8015a86 <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 8015a6a:	683a      	ldr	r2, [r7, #0]
 8015a6c:	687b      	ldr	r3, [r7, #4]
 8015a6e:	0011      	movs	r1, r2
 8015a70:	0018      	movs	r0, r3
 8015a72:	f000 fd60 	bl	8016536 <USBD_CtlError>
          break;
 8015a76:	e006      	b.n	8015a86 <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 8015a78:	683a      	ldr	r2, [r7, #0]
 8015a7a:	687b      	ldr	r3, [r7, #4]
 8015a7c:	0011      	movs	r1, r2
 8015a7e:	0018      	movs	r0, r3
 8015a80:	f000 fd59 	bl	8016536 <USBD_CtlError>
          break;
 8015a84:	e000      	b.n	8015a88 <USBD_StdItfReq+0x94>
          break;
 8015a86:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8015a88:	e006      	b.n	8015a98 <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 8015a8a:	683a      	ldr	r2, [r7, #0]
 8015a8c:	687b      	ldr	r3, [r7, #4]
 8015a8e:	0011      	movs	r1, r2
 8015a90:	0018      	movs	r0, r3
 8015a92:	f000 fd50 	bl	8016536 <USBD_CtlError>
      break;
 8015a96:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 8015a98:	2300      	movs	r3, #0
}
 8015a9a:	0018      	movs	r0, r3
 8015a9c:	46bd      	mov	sp, r7
 8015a9e:	b004      	add	sp, #16
 8015aa0:	bdb0      	pop	{r4, r5, r7, pc}

08015aa2 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8015aa2:	b5b0      	push	{r4, r5, r7, lr}
 8015aa4:	b084      	sub	sp, #16
 8015aa6:	af00      	add	r7, sp, #0
 8015aa8:	6078      	str	r0, [r7, #4]
 8015aaa:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8015aac:	230f      	movs	r3, #15
 8015aae:	18fb      	adds	r3, r7, r3
 8015ab0:	2200      	movs	r2, #0
 8015ab2:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 8015ab4:	683b      	ldr	r3, [r7, #0]
 8015ab6:	889a      	ldrh	r2, [r3, #4]
 8015ab8:	230e      	movs	r3, #14
 8015aba:	18fb      	adds	r3, r7, r3
 8015abc:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015abe:	683b      	ldr	r3, [r7, #0]
 8015ac0:	781b      	ldrb	r3, [r3, #0]
 8015ac2:	001a      	movs	r2, r3
 8015ac4:	2360      	movs	r3, #96	@ 0x60
 8015ac6:	4013      	ands	r3, r2
 8015ac8:	2b40      	cmp	r3, #64	@ 0x40
 8015aca:	d006      	beq.n	8015ada <USBD_StdEPReq+0x38>
 8015acc:	d900      	bls.n	8015ad0 <USBD_StdEPReq+0x2e>
 8015ace:	e190      	b.n	8015df2 <USBD_StdEPReq+0x350>
 8015ad0:	2b00      	cmp	r3, #0
 8015ad2:	d00c      	beq.n	8015aee <USBD_StdEPReq+0x4c>
 8015ad4:	2b20      	cmp	r3, #32
 8015ad6:	d000      	beq.n	8015ada <USBD_StdEPReq+0x38>
 8015ad8:	e18b      	b.n	8015df2 <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8015ada:	687a      	ldr	r2, [r7, #4]
 8015adc:	23ad      	movs	r3, #173	@ 0xad
 8015ade:	009b      	lsls	r3, r3, #2
 8015ae0:	58d3      	ldr	r3, [r2, r3]
 8015ae2:	689b      	ldr	r3, [r3, #8]
 8015ae4:	6839      	ldr	r1, [r7, #0]
 8015ae6:	687a      	ldr	r2, [r7, #4]
 8015ae8:	0010      	movs	r0, r2
 8015aea:	4798      	blx	r3
      break;
 8015aec:	e188      	b.n	8015e00 <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8015aee:	683b      	ldr	r3, [r7, #0]
 8015af0:	781b      	ldrb	r3, [r3, #0]
 8015af2:	001a      	movs	r2, r3
 8015af4:	2360      	movs	r3, #96	@ 0x60
 8015af6:	4013      	ands	r3, r2
 8015af8:	2b20      	cmp	r3, #32
 8015afa:	d10f      	bne.n	8015b1c <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8015afc:	687a      	ldr	r2, [r7, #4]
 8015afe:	23ad      	movs	r3, #173	@ 0xad
 8015b00:	009b      	lsls	r3, r3, #2
 8015b02:	58d3      	ldr	r3, [r2, r3]
 8015b04:	689b      	ldr	r3, [r3, #8]
 8015b06:	250f      	movs	r5, #15
 8015b08:	197c      	adds	r4, r7, r5
 8015b0a:	6839      	ldr	r1, [r7, #0]
 8015b0c:	687a      	ldr	r2, [r7, #4]
 8015b0e:	0010      	movs	r0, r2
 8015b10:	4798      	blx	r3
 8015b12:	0003      	movs	r3, r0
 8015b14:	7023      	strb	r3, [r4, #0]

        return ret;
 8015b16:	197b      	adds	r3, r7, r5
 8015b18:	781b      	ldrb	r3, [r3, #0]
 8015b1a:	e174      	b.n	8015e06 <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 8015b1c:	683b      	ldr	r3, [r7, #0]
 8015b1e:	785b      	ldrb	r3, [r3, #1]
 8015b20:	2b03      	cmp	r3, #3
 8015b22:	d007      	beq.n	8015b34 <USBD_StdEPReq+0x92>
 8015b24:	dd00      	ble.n	8015b28 <USBD_StdEPReq+0x86>
 8015b26:	e15c      	b.n	8015de2 <USBD_StdEPReq+0x340>
 8015b28:	2b00      	cmp	r3, #0
 8015b2a:	d100      	bne.n	8015b2e <USBD_StdEPReq+0x8c>
 8015b2c:	e092      	b.n	8015c54 <USBD_StdEPReq+0x1b2>
 8015b2e:	2b01      	cmp	r3, #1
 8015b30:	d04b      	beq.n	8015bca <USBD_StdEPReq+0x128>
 8015b32:	e156      	b.n	8015de2 <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8015b34:	687a      	ldr	r2, [r7, #4]
 8015b36:	23a7      	movs	r3, #167	@ 0xa7
 8015b38:	009b      	lsls	r3, r3, #2
 8015b3a:	5cd3      	ldrb	r3, [r2, r3]
 8015b3c:	2b02      	cmp	r3, #2
 8015b3e:	d002      	beq.n	8015b46 <USBD_StdEPReq+0xa4>
 8015b40:	2b03      	cmp	r3, #3
 8015b42:	d01d      	beq.n	8015b80 <USBD_StdEPReq+0xde>
 8015b44:	e039      	b.n	8015bba <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015b46:	220e      	movs	r2, #14
 8015b48:	18bb      	adds	r3, r7, r2
 8015b4a:	781b      	ldrb	r3, [r3, #0]
 8015b4c:	2b00      	cmp	r3, #0
 8015b4e:	d010      	beq.n	8015b72 <USBD_StdEPReq+0xd0>
 8015b50:	18bb      	adds	r3, r7, r2
 8015b52:	781b      	ldrb	r3, [r3, #0]
 8015b54:	2b80      	cmp	r3, #128	@ 0x80
 8015b56:	d00c      	beq.n	8015b72 <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8015b58:	18bb      	adds	r3, r7, r2
 8015b5a:	781a      	ldrb	r2, [r3, #0]
 8015b5c:	687b      	ldr	r3, [r7, #4]
 8015b5e:	0011      	movs	r1, r2
 8015b60:	0018      	movs	r0, r3
 8015b62:	f001 fa10 	bl	8016f86 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8015b66:	687b      	ldr	r3, [r7, #4]
 8015b68:	2180      	movs	r1, #128	@ 0x80
 8015b6a:	0018      	movs	r0, r3
 8015b6c:	f001 fa0b 	bl	8016f86 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8015b70:	e02a      	b.n	8015bc8 <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 8015b72:	683a      	ldr	r2, [r7, #0]
 8015b74:	687b      	ldr	r3, [r7, #4]
 8015b76:	0011      	movs	r1, r2
 8015b78:	0018      	movs	r0, r3
 8015b7a:	f000 fcdc 	bl	8016536 <USBD_CtlError>
              break;
 8015b7e:	e023      	b.n	8015bc8 <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8015b80:	683b      	ldr	r3, [r7, #0]
 8015b82:	885b      	ldrh	r3, [r3, #2]
 8015b84:	2b00      	cmp	r3, #0
 8015b86:	d113      	bne.n	8015bb0 <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 8015b88:	220e      	movs	r2, #14
 8015b8a:	18bb      	adds	r3, r7, r2
 8015b8c:	781b      	ldrb	r3, [r3, #0]
 8015b8e:	2b00      	cmp	r3, #0
 8015b90:	d00e      	beq.n	8015bb0 <USBD_StdEPReq+0x10e>
 8015b92:	18bb      	adds	r3, r7, r2
 8015b94:	781b      	ldrb	r3, [r3, #0]
 8015b96:	2b80      	cmp	r3, #128	@ 0x80
 8015b98:	d00a      	beq.n	8015bb0 <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8015b9a:	683b      	ldr	r3, [r7, #0]
 8015b9c:	88db      	ldrh	r3, [r3, #6]
 8015b9e:	2b00      	cmp	r3, #0
 8015ba0:	d106      	bne.n	8015bb0 <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8015ba2:	18bb      	adds	r3, r7, r2
 8015ba4:	781a      	ldrb	r2, [r3, #0]
 8015ba6:	687b      	ldr	r3, [r7, #4]
 8015ba8:	0011      	movs	r1, r2
 8015baa:	0018      	movs	r0, r3
 8015bac:	f001 f9eb 	bl	8016f86 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8015bb0:	687b      	ldr	r3, [r7, #4]
 8015bb2:	0018      	movs	r0, r3
 8015bb4:	f000 fda7 	bl	8016706 <USBD_CtlSendStatus>

              break;
 8015bb8:	e006      	b.n	8015bc8 <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 8015bba:	683a      	ldr	r2, [r7, #0]
 8015bbc:	687b      	ldr	r3, [r7, #4]
 8015bbe:	0011      	movs	r1, r2
 8015bc0:	0018      	movs	r0, r3
 8015bc2:	f000 fcb8 	bl	8016536 <USBD_CtlError>
              break;
 8015bc6:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 8015bc8:	e112      	b.n	8015df0 <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8015bca:	687a      	ldr	r2, [r7, #4]
 8015bcc:	23a7      	movs	r3, #167	@ 0xa7
 8015bce:	009b      	lsls	r3, r3, #2
 8015bd0:	5cd3      	ldrb	r3, [r2, r3]
 8015bd2:	2b02      	cmp	r3, #2
 8015bd4:	d002      	beq.n	8015bdc <USBD_StdEPReq+0x13a>
 8015bd6:	2b03      	cmp	r3, #3
 8015bd8:	d01d      	beq.n	8015c16 <USBD_StdEPReq+0x174>
 8015bda:	e032      	b.n	8015c42 <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015bdc:	220e      	movs	r2, #14
 8015bde:	18bb      	adds	r3, r7, r2
 8015be0:	781b      	ldrb	r3, [r3, #0]
 8015be2:	2b00      	cmp	r3, #0
 8015be4:	d010      	beq.n	8015c08 <USBD_StdEPReq+0x166>
 8015be6:	18bb      	adds	r3, r7, r2
 8015be8:	781b      	ldrb	r3, [r3, #0]
 8015bea:	2b80      	cmp	r3, #128	@ 0x80
 8015bec:	d00c      	beq.n	8015c08 <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8015bee:	18bb      	adds	r3, r7, r2
 8015bf0:	781a      	ldrb	r2, [r3, #0]
 8015bf2:	687b      	ldr	r3, [r7, #4]
 8015bf4:	0011      	movs	r1, r2
 8015bf6:	0018      	movs	r0, r3
 8015bf8:	f001 f9c5 	bl	8016f86 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8015bfc:	687b      	ldr	r3, [r7, #4]
 8015bfe:	2180      	movs	r1, #128	@ 0x80
 8015c00:	0018      	movs	r0, r3
 8015c02:	f001 f9c0 	bl	8016f86 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8015c06:	e024      	b.n	8015c52 <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 8015c08:	683a      	ldr	r2, [r7, #0]
 8015c0a:	687b      	ldr	r3, [r7, #4]
 8015c0c:	0011      	movs	r1, r2
 8015c0e:	0018      	movs	r0, r3
 8015c10:	f000 fc91 	bl	8016536 <USBD_CtlError>
              break;
 8015c14:	e01d      	b.n	8015c52 <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8015c16:	683b      	ldr	r3, [r7, #0]
 8015c18:	885b      	ldrh	r3, [r3, #2]
 8015c1a:	2b00      	cmp	r3, #0
 8015c1c:	d118      	bne.n	8015c50 <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8015c1e:	210e      	movs	r1, #14
 8015c20:	187b      	adds	r3, r7, r1
 8015c22:	781b      	ldrb	r3, [r3, #0]
 8015c24:	227f      	movs	r2, #127	@ 0x7f
 8015c26:	4013      	ands	r3, r2
 8015c28:	d006      	beq.n	8015c38 <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8015c2a:	187b      	adds	r3, r7, r1
 8015c2c:	781a      	ldrb	r2, [r3, #0]
 8015c2e:	687b      	ldr	r3, [r7, #4]
 8015c30:	0011      	movs	r1, r2
 8015c32:	0018      	movs	r0, r3
 8015c34:	f001 f9d2 	bl	8016fdc <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8015c38:	687b      	ldr	r3, [r7, #4]
 8015c3a:	0018      	movs	r0, r3
 8015c3c:	f000 fd63 	bl	8016706 <USBD_CtlSendStatus>
              }
              break;
 8015c40:	e006      	b.n	8015c50 <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 8015c42:	683a      	ldr	r2, [r7, #0]
 8015c44:	687b      	ldr	r3, [r7, #4]
 8015c46:	0011      	movs	r1, r2
 8015c48:	0018      	movs	r0, r3
 8015c4a:	f000 fc74 	bl	8016536 <USBD_CtlError>
              break;
 8015c4e:	e000      	b.n	8015c52 <USBD_StdEPReq+0x1b0>
              break;
 8015c50:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 8015c52:	e0cd      	b.n	8015df0 <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8015c54:	687a      	ldr	r2, [r7, #4]
 8015c56:	23a7      	movs	r3, #167	@ 0xa7
 8015c58:	009b      	lsls	r3, r3, #2
 8015c5a:	5cd3      	ldrb	r3, [r2, r3]
 8015c5c:	2b02      	cmp	r3, #2
 8015c5e:	d002      	beq.n	8015c66 <USBD_StdEPReq+0x1c4>
 8015c60:	2b03      	cmp	r3, #3
 8015c62:	d03c      	beq.n	8015cde <USBD_StdEPReq+0x23c>
 8015c64:	e0b5      	b.n	8015dd2 <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015c66:	220e      	movs	r2, #14
 8015c68:	18bb      	adds	r3, r7, r2
 8015c6a:	781b      	ldrb	r3, [r3, #0]
 8015c6c:	2b00      	cmp	r3, #0
 8015c6e:	d00a      	beq.n	8015c86 <USBD_StdEPReq+0x1e4>
 8015c70:	18bb      	adds	r3, r7, r2
 8015c72:	781b      	ldrb	r3, [r3, #0]
 8015c74:	2b80      	cmp	r3, #128	@ 0x80
 8015c76:	d006      	beq.n	8015c86 <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 8015c78:	683a      	ldr	r2, [r7, #0]
 8015c7a:	687b      	ldr	r3, [r7, #4]
 8015c7c:	0011      	movs	r1, r2
 8015c7e:	0018      	movs	r0, r3
 8015c80:	f000 fc59 	bl	8016536 <USBD_CtlError>
                break;
 8015c84:	e0ac      	b.n	8015de0 <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015c86:	220e      	movs	r2, #14
 8015c88:	18bb      	adds	r3, r7, r2
 8015c8a:	781b      	ldrb	r3, [r3, #0]
 8015c8c:	b25b      	sxtb	r3, r3
 8015c8e:	2b00      	cmp	r3, #0
 8015c90:	da0c      	bge.n	8015cac <USBD_StdEPReq+0x20a>
 8015c92:	18bb      	adds	r3, r7, r2
 8015c94:	781b      	ldrb	r3, [r3, #0]
 8015c96:	227f      	movs	r2, #127	@ 0x7f
 8015c98:	401a      	ands	r2, r3
 8015c9a:	0013      	movs	r3, r2
 8015c9c:	009b      	lsls	r3, r3, #2
 8015c9e:	189b      	adds	r3, r3, r2
 8015ca0:	009b      	lsls	r3, r3, #2
 8015ca2:	3310      	adds	r3, #16
 8015ca4:	687a      	ldr	r2, [r7, #4]
 8015ca6:	18d3      	adds	r3, r2, r3
 8015ca8:	3304      	adds	r3, #4
 8015caa:	e00d      	b.n	8015cc8 <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8015cac:	230e      	movs	r3, #14
 8015cae:	18fb      	adds	r3, r7, r3
 8015cb0:	781b      	ldrb	r3, [r3, #0]
 8015cb2:	227f      	movs	r2, #127	@ 0x7f
 8015cb4:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015cb6:	0013      	movs	r3, r2
 8015cb8:	009b      	lsls	r3, r3, #2
 8015cba:	189b      	adds	r3, r3, r2
 8015cbc:	009b      	lsls	r3, r3, #2
 8015cbe:	3351      	adds	r3, #81	@ 0x51
 8015cc0:	33ff      	adds	r3, #255	@ 0xff
 8015cc2:	687a      	ldr	r2, [r7, #4]
 8015cc4:	18d3      	adds	r3, r2, r3
 8015cc6:	3304      	adds	r3, #4
 8015cc8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8015cca:	68bb      	ldr	r3, [r7, #8]
 8015ccc:	2200      	movs	r2, #0
 8015cce:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8015cd0:	68b9      	ldr	r1, [r7, #8]
 8015cd2:	687b      	ldr	r3, [r7, #4]
 8015cd4:	2202      	movs	r2, #2
 8015cd6:	0018      	movs	r0, r3
 8015cd8:	f000 fcab 	bl	8016632 <USBD_CtlSendData>
              break;
 8015cdc:	e080      	b.n	8015de0 <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8015cde:	220e      	movs	r2, #14
 8015ce0:	18bb      	adds	r3, r7, r2
 8015ce2:	781b      	ldrb	r3, [r3, #0]
 8015ce4:	b25b      	sxtb	r3, r3
 8015ce6:	2b00      	cmp	r3, #0
 8015ce8:	da14      	bge.n	8015d14 <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8015cea:	18bb      	adds	r3, r7, r2
 8015cec:	781b      	ldrb	r3, [r3, #0]
 8015cee:	220f      	movs	r2, #15
 8015cf0:	401a      	ands	r2, r3
 8015cf2:	6879      	ldr	r1, [r7, #4]
 8015cf4:	0013      	movs	r3, r2
 8015cf6:	009b      	lsls	r3, r3, #2
 8015cf8:	189b      	adds	r3, r3, r2
 8015cfa:	009b      	lsls	r3, r3, #2
 8015cfc:	18cb      	adds	r3, r1, r3
 8015cfe:	3318      	adds	r3, #24
 8015d00:	681b      	ldr	r3, [r3, #0]
 8015d02:	2b00      	cmp	r3, #0
 8015d04:	d11e      	bne.n	8015d44 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 8015d06:	683a      	ldr	r2, [r7, #0]
 8015d08:	687b      	ldr	r3, [r7, #4]
 8015d0a:	0011      	movs	r1, r2
 8015d0c:	0018      	movs	r0, r3
 8015d0e:	f000 fc12 	bl	8016536 <USBD_CtlError>
                  break;
 8015d12:	e065      	b.n	8015de0 <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8015d14:	230e      	movs	r3, #14
 8015d16:	18fb      	adds	r3, r7, r3
 8015d18:	781b      	ldrb	r3, [r3, #0]
 8015d1a:	220f      	movs	r2, #15
 8015d1c:	401a      	ands	r2, r3
 8015d1e:	6878      	ldr	r0, [r7, #4]
 8015d20:	23ac      	movs	r3, #172	@ 0xac
 8015d22:	0059      	lsls	r1, r3, #1
 8015d24:	0013      	movs	r3, r2
 8015d26:	009b      	lsls	r3, r3, #2
 8015d28:	189b      	adds	r3, r3, r2
 8015d2a:	009b      	lsls	r3, r3, #2
 8015d2c:	18c3      	adds	r3, r0, r3
 8015d2e:	185b      	adds	r3, r3, r1
 8015d30:	681b      	ldr	r3, [r3, #0]
 8015d32:	2b00      	cmp	r3, #0
 8015d34:	d106      	bne.n	8015d44 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 8015d36:	683a      	ldr	r2, [r7, #0]
 8015d38:	687b      	ldr	r3, [r7, #4]
 8015d3a:	0011      	movs	r1, r2
 8015d3c:	0018      	movs	r0, r3
 8015d3e:	f000 fbfa 	bl	8016536 <USBD_CtlError>
                  break;
 8015d42:	e04d      	b.n	8015de0 <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015d44:	220e      	movs	r2, #14
 8015d46:	18bb      	adds	r3, r7, r2
 8015d48:	781b      	ldrb	r3, [r3, #0]
 8015d4a:	b25b      	sxtb	r3, r3
 8015d4c:	2b00      	cmp	r3, #0
 8015d4e:	da0c      	bge.n	8015d6a <USBD_StdEPReq+0x2c8>
 8015d50:	18bb      	adds	r3, r7, r2
 8015d52:	781b      	ldrb	r3, [r3, #0]
 8015d54:	227f      	movs	r2, #127	@ 0x7f
 8015d56:	401a      	ands	r2, r3
 8015d58:	0013      	movs	r3, r2
 8015d5a:	009b      	lsls	r3, r3, #2
 8015d5c:	189b      	adds	r3, r3, r2
 8015d5e:	009b      	lsls	r3, r3, #2
 8015d60:	3310      	adds	r3, #16
 8015d62:	687a      	ldr	r2, [r7, #4]
 8015d64:	18d3      	adds	r3, r2, r3
 8015d66:	3304      	adds	r3, #4
 8015d68:	e00d      	b.n	8015d86 <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8015d6a:	230e      	movs	r3, #14
 8015d6c:	18fb      	adds	r3, r7, r3
 8015d6e:	781b      	ldrb	r3, [r3, #0]
 8015d70:	227f      	movs	r2, #127	@ 0x7f
 8015d72:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015d74:	0013      	movs	r3, r2
 8015d76:	009b      	lsls	r3, r3, #2
 8015d78:	189b      	adds	r3, r3, r2
 8015d7a:	009b      	lsls	r3, r3, #2
 8015d7c:	3351      	adds	r3, #81	@ 0x51
 8015d7e:	33ff      	adds	r3, #255	@ 0xff
 8015d80:	687a      	ldr	r2, [r7, #4]
 8015d82:	18d3      	adds	r3, r2, r3
 8015d84:	3304      	adds	r3, #4
 8015d86:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8015d88:	220e      	movs	r2, #14
 8015d8a:	18bb      	adds	r3, r7, r2
 8015d8c:	781b      	ldrb	r3, [r3, #0]
 8015d8e:	2b00      	cmp	r3, #0
 8015d90:	d003      	beq.n	8015d9a <USBD_StdEPReq+0x2f8>
 8015d92:	18bb      	adds	r3, r7, r2
 8015d94:	781b      	ldrb	r3, [r3, #0]
 8015d96:	2b80      	cmp	r3, #128	@ 0x80
 8015d98:	d103      	bne.n	8015da2 <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 8015d9a:	68bb      	ldr	r3, [r7, #8]
 8015d9c:	2200      	movs	r2, #0
 8015d9e:	601a      	str	r2, [r3, #0]
 8015da0:	e010      	b.n	8015dc4 <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8015da2:	230e      	movs	r3, #14
 8015da4:	18fb      	adds	r3, r7, r3
 8015da6:	781a      	ldrb	r2, [r3, #0]
 8015da8:	687b      	ldr	r3, [r7, #4]
 8015daa:	0011      	movs	r1, r2
 8015dac:	0018      	movs	r0, r3
 8015dae:	f001 f940 	bl	8017032 <USBD_LL_IsStallEP>
 8015db2:	1e03      	subs	r3, r0, #0
 8015db4:	d003      	beq.n	8015dbe <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 8015db6:	68bb      	ldr	r3, [r7, #8]
 8015db8:	2201      	movs	r2, #1
 8015dba:	601a      	str	r2, [r3, #0]
 8015dbc:	e002      	b.n	8015dc4 <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 8015dbe:	68bb      	ldr	r3, [r7, #8]
 8015dc0:	2200      	movs	r2, #0
 8015dc2:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8015dc4:	68b9      	ldr	r1, [r7, #8]
 8015dc6:	687b      	ldr	r3, [r7, #4]
 8015dc8:	2202      	movs	r2, #2
 8015dca:	0018      	movs	r0, r3
 8015dcc:	f000 fc31 	bl	8016632 <USBD_CtlSendData>
              break;
 8015dd0:	e006      	b.n	8015de0 <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 8015dd2:	683a      	ldr	r2, [r7, #0]
 8015dd4:	687b      	ldr	r3, [r7, #4]
 8015dd6:	0011      	movs	r1, r2
 8015dd8:	0018      	movs	r0, r3
 8015dda:	f000 fbac 	bl	8016536 <USBD_CtlError>
              break;
 8015dde:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 8015de0:	e006      	b.n	8015df0 <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 8015de2:	683a      	ldr	r2, [r7, #0]
 8015de4:	687b      	ldr	r3, [r7, #4]
 8015de6:	0011      	movs	r1, r2
 8015de8:	0018      	movs	r0, r3
 8015dea:	f000 fba4 	bl	8016536 <USBD_CtlError>
          break;
 8015dee:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8015df0:	e006      	b.n	8015e00 <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 8015df2:	683a      	ldr	r2, [r7, #0]
 8015df4:	687b      	ldr	r3, [r7, #4]
 8015df6:	0011      	movs	r1, r2
 8015df8:	0018      	movs	r0, r3
 8015dfa:	f000 fb9c 	bl	8016536 <USBD_CtlError>
      break;
 8015dfe:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 8015e00:	230f      	movs	r3, #15
 8015e02:	18fb      	adds	r3, r7, r3
 8015e04:	781b      	ldrb	r3, [r3, #0]
}
 8015e06:	0018      	movs	r0, r3
 8015e08:	46bd      	mov	sp, r7
 8015e0a:	b004      	add	sp, #16
 8015e0c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08015e10 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8015e10:	b580      	push	{r7, lr}
 8015e12:	b084      	sub	sp, #16
 8015e14:	af00      	add	r7, sp, #0
 8015e16:	6078      	str	r0, [r7, #4]
 8015e18:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8015e1a:	2308      	movs	r3, #8
 8015e1c:	18fb      	adds	r3, r7, r3
 8015e1e:	2200      	movs	r2, #0
 8015e20:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 8015e22:	2300      	movs	r3, #0
 8015e24:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8015e26:	230b      	movs	r3, #11
 8015e28:	18fb      	adds	r3, r7, r3
 8015e2a:	2200      	movs	r2, #0
 8015e2c:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 8015e2e:	683b      	ldr	r3, [r7, #0]
 8015e30:	885b      	ldrh	r3, [r3, #2]
 8015e32:	0a1b      	lsrs	r3, r3, #8
 8015e34:	b29b      	uxth	r3, r3
 8015e36:	2b07      	cmp	r3, #7
 8015e38:	d900      	bls.n	8015e3c <USBD_GetDescriptor+0x2c>
 8015e3a:	e159      	b.n	80160f0 <USBD_GetDescriptor+0x2e0>
 8015e3c:	009a      	lsls	r2, r3, #2
 8015e3e:	4bcb      	ldr	r3, [pc, #812]	@ (801616c <USBD_GetDescriptor+0x35c>)
 8015e40:	18d3      	adds	r3, r2, r3
 8015e42:	681b      	ldr	r3, [r3, #0]
 8015e44:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8015e46:	687a      	ldr	r2, [r7, #4]
 8015e48:	23ac      	movs	r3, #172	@ 0xac
 8015e4a:	009b      	lsls	r3, r3, #2
 8015e4c:	58d3      	ldr	r3, [r2, r3]
 8015e4e:	681b      	ldr	r3, [r3, #0]
 8015e50:	687a      	ldr	r2, [r7, #4]
 8015e52:	7c12      	ldrb	r2, [r2, #16]
 8015e54:	2108      	movs	r1, #8
 8015e56:	1879      	adds	r1, r7, r1
 8015e58:	0010      	movs	r0, r2
 8015e5a:	4798      	blx	r3
 8015e5c:	0003      	movs	r3, r0
 8015e5e:	60fb      	str	r3, [r7, #12]
      break;
 8015e60:	e153      	b.n	801610a <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015e62:	687b      	ldr	r3, [r7, #4]
 8015e64:	7c1b      	ldrb	r3, [r3, #16]
 8015e66:	2b00      	cmp	r3, #0
 8015e68:	d10f      	bne.n	8015e8a <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8015e6a:	687a      	ldr	r2, [r7, #4]
 8015e6c:	23ad      	movs	r3, #173	@ 0xad
 8015e6e:	009b      	lsls	r3, r3, #2
 8015e70:	58d3      	ldr	r3, [r2, r3]
 8015e72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015e74:	2208      	movs	r2, #8
 8015e76:	18ba      	adds	r2, r7, r2
 8015e78:	0010      	movs	r0, r2
 8015e7a:	4798      	blx	r3
 8015e7c:	0003      	movs	r3, r0
 8015e7e:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8015e80:	68fb      	ldr	r3, [r7, #12]
 8015e82:	3301      	adds	r3, #1
 8015e84:	2202      	movs	r2, #2
 8015e86:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8015e88:	e13f      	b.n	801610a <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8015e8a:	687a      	ldr	r2, [r7, #4]
 8015e8c:	23ad      	movs	r3, #173	@ 0xad
 8015e8e:	009b      	lsls	r3, r3, #2
 8015e90:	58d3      	ldr	r3, [r2, r3]
 8015e92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015e94:	2208      	movs	r2, #8
 8015e96:	18ba      	adds	r2, r7, r2
 8015e98:	0010      	movs	r0, r2
 8015e9a:	4798      	blx	r3
 8015e9c:	0003      	movs	r3, r0
 8015e9e:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8015ea0:	68fb      	ldr	r3, [r7, #12]
 8015ea2:	3301      	adds	r3, #1
 8015ea4:	2202      	movs	r2, #2
 8015ea6:	701a      	strb	r2, [r3, #0]
      break;
 8015ea8:	e12f      	b.n	801610a <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8015eaa:	683b      	ldr	r3, [r7, #0]
 8015eac:	885b      	ldrh	r3, [r3, #2]
 8015eae:	b2db      	uxtb	r3, r3
 8015eb0:	2b05      	cmp	r3, #5
 8015eb2:	d900      	bls.n	8015eb6 <USBD_GetDescriptor+0xa6>
 8015eb4:	e0d0      	b.n	8016058 <USBD_GetDescriptor+0x248>
 8015eb6:	009a      	lsls	r2, r3, #2
 8015eb8:	4bad      	ldr	r3, [pc, #692]	@ (8016170 <USBD_GetDescriptor+0x360>)
 8015eba:	18d3      	adds	r3, r2, r3
 8015ebc:	681b      	ldr	r3, [r3, #0]
 8015ebe:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8015ec0:	687a      	ldr	r2, [r7, #4]
 8015ec2:	23ac      	movs	r3, #172	@ 0xac
 8015ec4:	009b      	lsls	r3, r3, #2
 8015ec6:	58d3      	ldr	r3, [r2, r3]
 8015ec8:	685b      	ldr	r3, [r3, #4]
 8015eca:	2b00      	cmp	r3, #0
 8015ecc:	d00d      	beq.n	8015eea <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8015ece:	687a      	ldr	r2, [r7, #4]
 8015ed0:	23ac      	movs	r3, #172	@ 0xac
 8015ed2:	009b      	lsls	r3, r3, #2
 8015ed4:	58d3      	ldr	r3, [r2, r3]
 8015ed6:	685b      	ldr	r3, [r3, #4]
 8015ed8:	687a      	ldr	r2, [r7, #4]
 8015eda:	7c12      	ldrb	r2, [r2, #16]
 8015edc:	2108      	movs	r1, #8
 8015ede:	1879      	adds	r1, r7, r1
 8015ee0:	0010      	movs	r0, r2
 8015ee2:	4798      	blx	r3
 8015ee4:	0003      	movs	r3, r0
 8015ee6:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015ee8:	e0c3      	b.n	8016072 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8015eea:	683a      	ldr	r2, [r7, #0]
 8015eec:	687b      	ldr	r3, [r7, #4]
 8015eee:	0011      	movs	r1, r2
 8015ef0:	0018      	movs	r0, r3
 8015ef2:	f000 fb20 	bl	8016536 <USBD_CtlError>
            err++;
 8015ef6:	210b      	movs	r1, #11
 8015ef8:	187b      	adds	r3, r7, r1
 8015efa:	781a      	ldrb	r2, [r3, #0]
 8015efc:	187b      	adds	r3, r7, r1
 8015efe:	3201      	adds	r2, #1
 8015f00:	701a      	strb	r2, [r3, #0]
          break;
 8015f02:	e0b6      	b.n	8016072 <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8015f04:	687a      	ldr	r2, [r7, #4]
 8015f06:	23ac      	movs	r3, #172	@ 0xac
 8015f08:	009b      	lsls	r3, r3, #2
 8015f0a:	58d3      	ldr	r3, [r2, r3]
 8015f0c:	689b      	ldr	r3, [r3, #8]
 8015f0e:	2b00      	cmp	r3, #0
 8015f10:	d00d      	beq.n	8015f2e <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8015f12:	687a      	ldr	r2, [r7, #4]
 8015f14:	23ac      	movs	r3, #172	@ 0xac
 8015f16:	009b      	lsls	r3, r3, #2
 8015f18:	58d3      	ldr	r3, [r2, r3]
 8015f1a:	689b      	ldr	r3, [r3, #8]
 8015f1c:	687a      	ldr	r2, [r7, #4]
 8015f1e:	7c12      	ldrb	r2, [r2, #16]
 8015f20:	2108      	movs	r1, #8
 8015f22:	1879      	adds	r1, r7, r1
 8015f24:	0010      	movs	r0, r2
 8015f26:	4798      	blx	r3
 8015f28:	0003      	movs	r3, r0
 8015f2a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015f2c:	e0a1      	b.n	8016072 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8015f2e:	683a      	ldr	r2, [r7, #0]
 8015f30:	687b      	ldr	r3, [r7, #4]
 8015f32:	0011      	movs	r1, r2
 8015f34:	0018      	movs	r0, r3
 8015f36:	f000 fafe 	bl	8016536 <USBD_CtlError>
            err++;
 8015f3a:	210b      	movs	r1, #11
 8015f3c:	187b      	adds	r3, r7, r1
 8015f3e:	781a      	ldrb	r2, [r3, #0]
 8015f40:	187b      	adds	r3, r7, r1
 8015f42:	3201      	adds	r2, #1
 8015f44:	701a      	strb	r2, [r3, #0]
          break;
 8015f46:	e094      	b.n	8016072 <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8015f48:	687a      	ldr	r2, [r7, #4]
 8015f4a:	23ac      	movs	r3, #172	@ 0xac
 8015f4c:	009b      	lsls	r3, r3, #2
 8015f4e:	58d3      	ldr	r3, [r2, r3]
 8015f50:	68db      	ldr	r3, [r3, #12]
 8015f52:	2b00      	cmp	r3, #0
 8015f54:	d00d      	beq.n	8015f72 <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8015f56:	687a      	ldr	r2, [r7, #4]
 8015f58:	23ac      	movs	r3, #172	@ 0xac
 8015f5a:	009b      	lsls	r3, r3, #2
 8015f5c:	58d3      	ldr	r3, [r2, r3]
 8015f5e:	68db      	ldr	r3, [r3, #12]
 8015f60:	687a      	ldr	r2, [r7, #4]
 8015f62:	7c12      	ldrb	r2, [r2, #16]
 8015f64:	2108      	movs	r1, #8
 8015f66:	1879      	adds	r1, r7, r1
 8015f68:	0010      	movs	r0, r2
 8015f6a:	4798      	blx	r3
 8015f6c:	0003      	movs	r3, r0
 8015f6e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015f70:	e07f      	b.n	8016072 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8015f72:	683a      	ldr	r2, [r7, #0]
 8015f74:	687b      	ldr	r3, [r7, #4]
 8015f76:	0011      	movs	r1, r2
 8015f78:	0018      	movs	r0, r3
 8015f7a:	f000 fadc 	bl	8016536 <USBD_CtlError>
            err++;
 8015f7e:	210b      	movs	r1, #11
 8015f80:	187b      	adds	r3, r7, r1
 8015f82:	781a      	ldrb	r2, [r3, #0]
 8015f84:	187b      	adds	r3, r7, r1
 8015f86:	3201      	adds	r2, #1
 8015f88:	701a      	strb	r2, [r3, #0]
          break;
 8015f8a:	e072      	b.n	8016072 <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8015f8c:	687a      	ldr	r2, [r7, #4]
 8015f8e:	23ac      	movs	r3, #172	@ 0xac
 8015f90:	009b      	lsls	r3, r3, #2
 8015f92:	58d3      	ldr	r3, [r2, r3]
 8015f94:	691b      	ldr	r3, [r3, #16]
 8015f96:	2b00      	cmp	r3, #0
 8015f98:	d00d      	beq.n	8015fb6 <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8015f9a:	687a      	ldr	r2, [r7, #4]
 8015f9c:	23ac      	movs	r3, #172	@ 0xac
 8015f9e:	009b      	lsls	r3, r3, #2
 8015fa0:	58d3      	ldr	r3, [r2, r3]
 8015fa2:	691b      	ldr	r3, [r3, #16]
 8015fa4:	687a      	ldr	r2, [r7, #4]
 8015fa6:	7c12      	ldrb	r2, [r2, #16]
 8015fa8:	2108      	movs	r1, #8
 8015faa:	1879      	adds	r1, r7, r1
 8015fac:	0010      	movs	r0, r2
 8015fae:	4798      	blx	r3
 8015fb0:	0003      	movs	r3, r0
 8015fb2:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015fb4:	e05d      	b.n	8016072 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8015fb6:	683a      	ldr	r2, [r7, #0]
 8015fb8:	687b      	ldr	r3, [r7, #4]
 8015fba:	0011      	movs	r1, r2
 8015fbc:	0018      	movs	r0, r3
 8015fbe:	f000 faba 	bl	8016536 <USBD_CtlError>
            err++;
 8015fc2:	210b      	movs	r1, #11
 8015fc4:	187b      	adds	r3, r7, r1
 8015fc6:	781a      	ldrb	r2, [r3, #0]
 8015fc8:	187b      	adds	r3, r7, r1
 8015fca:	3201      	adds	r2, #1
 8015fcc:	701a      	strb	r2, [r3, #0]
          break;
 8015fce:	e050      	b.n	8016072 <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8015fd0:	687a      	ldr	r2, [r7, #4]
 8015fd2:	23ac      	movs	r3, #172	@ 0xac
 8015fd4:	009b      	lsls	r3, r3, #2
 8015fd6:	58d3      	ldr	r3, [r2, r3]
 8015fd8:	695b      	ldr	r3, [r3, #20]
 8015fda:	2b00      	cmp	r3, #0
 8015fdc:	d00d      	beq.n	8015ffa <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8015fde:	687a      	ldr	r2, [r7, #4]
 8015fe0:	23ac      	movs	r3, #172	@ 0xac
 8015fe2:	009b      	lsls	r3, r3, #2
 8015fe4:	58d3      	ldr	r3, [r2, r3]
 8015fe6:	695b      	ldr	r3, [r3, #20]
 8015fe8:	687a      	ldr	r2, [r7, #4]
 8015fea:	7c12      	ldrb	r2, [r2, #16]
 8015fec:	2108      	movs	r1, #8
 8015fee:	1879      	adds	r1, r7, r1
 8015ff0:	0010      	movs	r0, r2
 8015ff2:	4798      	blx	r3
 8015ff4:	0003      	movs	r3, r0
 8015ff6:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015ff8:	e03b      	b.n	8016072 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8015ffa:	683a      	ldr	r2, [r7, #0]
 8015ffc:	687b      	ldr	r3, [r7, #4]
 8015ffe:	0011      	movs	r1, r2
 8016000:	0018      	movs	r0, r3
 8016002:	f000 fa98 	bl	8016536 <USBD_CtlError>
            err++;
 8016006:	210b      	movs	r1, #11
 8016008:	187b      	adds	r3, r7, r1
 801600a:	781a      	ldrb	r2, [r3, #0]
 801600c:	187b      	adds	r3, r7, r1
 801600e:	3201      	adds	r2, #1
 8016010:	701a      	strb	r2, [r3, #0]
          break;
 8016012:	e02e      	b.n	8016072 <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8016014:	687a      	ldr	r2, [r7, #4]
 8016016:	23ac      	movs	r3, #172	@ 0xac
 8016018:	009b      	lsls	r3, r3, #2
 801601a:	58d3      	ldr	r3, [r2, r3]
 801601c:	699b      	ldr	r3, [r3, #24]
 801601e:	2b00      	cmp	r3, #0
 8016020:	d00d      	beq.n	801603e <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8016022:	687a      	ldr	r2, [r7, #4]
 8016024:	23ac      	movs	r3, #172	@ 0xac
 8016026:	009b      	lsls	r3, r3, #2
 8016028:	58d3      	ldr	r3, [r2, r3]
 801602a:	699b      	ldr	r3, [r3, #24]
 801602c:	687a      	ldr	r2, [r7, #4]
 801602e:	7c12      	ldrb	r2, [r2, #16]
 8016030:	2108      	movs	r1, #8
 8016032:	1879      	adds	r1, r7, r1
 8016034:	0010      	movs	r0, r2
 8016036:	4798      	blx	r3
 8016038:	0003      	movs	r3, r0
 801603a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801603c:	e019      	b.n	8016072 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801603e:	683a      	ldr	r2, [r7, #0]
 8016040:	687b      	ldr	r3, [r7, #4]
 8016042:	0011      	movs	r1, r2
 8016044:	0018      	movs	r0, r3
 8016046:	f000 fa76 	bl	8016536 <USBD_CtlError>
            err++;
 801604a:	210b      	movs	r1, #11
 801604c:	187b      	adds	r3, r7, r1
 801604e:	781a      	ldrb	r2, [r3, #0]
 8016050:	187b      	adds	r3, r7, r1
 8016052:	3201      	adds	r2, #1
 8016054:	701a      	strb	r2, [r3, #0]
          break;
 8016056:	e00c      	b.n	8016072 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8016058:	683a      	ldr	r2, [r7, #0]
 801605a:	687b      	ldr	r3, [r7, #4]
 801605c:	0011      	movs	r1, r2
 801605e:	0018      	movs	r0, r3
 8016060:	f000 fa69 	bl	8016536 <USBD_CtlError>
          err++;
 8016064:	210b      	movs	r1, #11
 8016066:	187b      	adds	r3, r7, r1
 8016068:	781a      	ldrb	r2, [r3, #0]
 801606a:	187b      	adds	r3, r7, r1
 801606c:	3201      	adds	r2, #1
 801606e:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 8016070:	e04b      	b.n	801610a <USBD_GetDescriptor+0x2fa>
 8016072:	e04a      	b.n	801610a <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016074:	687b      	ldr	r3, [r7, #4]
 8016076:	7c1b      	ldrb	r3, [r3, #16]
 8016078:	2b00      	cmp	r3, #0
 801607a:	d10b      	bne.n	8016094 <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 801607c:	687a      	ldr	r2, [r7, #4]
 801607e:	23ad      	movs	r3, #173	@ 0xad
 8016080:	009b      	lsls	r3, r3, #2
 8016082:	58d3      	ldr	r3, [r2, r3]
 8016084:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8016086:	2208      	movs	r2, #8
 8016088:	18ba      	adds	r2, r7, r2
 801608a:	0010      	movs	r0, r2
 801608c:	4798      	blx	r3
 801608e:	0003      	movs	r3, r0
 8016090:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8016092:	e03a      	b.n	801610a <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 8016094:	683a      	ldr	r2, [r7, #0]
 8016096:	687b      	ldr	r3, [r7, #4]
 8016098:	0011      	movs	r1, r2
 801609a:	0018      	movs	r0, r3
 801609c:	f000 fa4b 	bl	8016536 <USBD_CtlError>
        err++;
 80160a0:	210b      	movs	r1, #11
 80160a2:	187b      	adds	r3, r7, r1
 80160a4:	781a      	ldrb	r2, [r3, #0]
 80160a6:	187b      	adds	r3, r7, r1
 80160a8:	3201      	adds	r2, #1
 80160aa:	701a      	strb	r2, [r3, #0]
      break;
 80160ac:	e02d      	b.n	801610a <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80160ae:	687b      	ldr	r3, [r7, #4]
 80160b0:	7c1b      	ldrb	r3, [r3, #16]
 80160b2:	2b00      	cmp	r3, #0
 80160b4:	d10f      	bne.n	80160d6 <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80160b6:	687a      	ldr	r2, [r7, #4]
 80160b8:	23ad      	movs	r3, #173	@ 0xad
 80160ba:	009b      	lsls	r3, r3, #2
 80160bc:	58d3      	ldr	r3, [r2, r3]
 80160be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80160c0:	2208      	movs	r2, #8
 80160c2:	18ba      	adds	r2, r7, r2
 80160c4:	0010      	movs	r0, r2
 80160c6:	4798      	blx	r3
 80160c8:	0003      	movs	r3, r0
 80160ca:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80160cc:	68fb      	ldr	r3, [r7, #12]
 80160ce:	3301      	adds	r3, #1
 80160d0:	2207      	movs	r2, #7
 80160d2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80160d4:	e019      	b.n	801610a <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 80160d6:	683a      	ldr	r2, [r7, #0]
 80160d8:	687b      	ldr	r3, [r7, #4]
 80160da:	0011      	movs	r1, r2
 80160dc:	0018      	movs	r0, r3
 80160de:	f000 fa2a 	bl	8016536 <USBD_CtlError>
        err++;
 80160e2:	210b      	movs	r1, #11
 80160e4:	187b      	adds	r3, r7, r1
 80160e6:	781a      	ldrb	r2, [r3, #0]
 80160e8:	187b      	adds	r3, r7, r1
 80160ea:	3201      	adds	r2, #1
 80160ec:	701a      	strb	r2, [r3, #0]
      break;
 80160ee:	e00c      	b.n	801610a <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 80160f0:	683a      	ldr	r2, [r7, #0]
 80160f2:	687b      	ldr	r3, [r7, #4]
 80160f4:	0011      	movs	r1, r2
 80160f6:	0018      	movs	r0, r3
 80160f8:	f000 fa1d 	bl	8016536 <USBD_CtlError>
      err++;
 80160fc:	210b      	movs	r1, #11
 80160fe:	187b      	adds	r3, r7, r1
 8016100:	781a      	ldrb	r2, [r3, #0]
 8016102:	187b      	adds	r3, r7, r1
 8016104:	3201      	adds	r2, #1
 8016106:	701a      	strb	r2, [r3, #0]
      break;
 8016108:	46c0      	nop			@ (mov r8, r8)
  }

  if (err != 0U)
 801610a:	230b      	movs	r3, #11
 801610c:	18fb      	adds	r3, r7, r3
 801610e:	781b      	ldrb	r3, [r3, #0]
 8016110:	2b00      	cmp	r3, #0
 8016112:	d127      	bne.n	8016164 <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8016114:	2108      	movs	r1, #8
 8016116:	187b      	adds	r3, r7, r1
 8016118:	881b      	ldrh	r3, [r3, #0]
 801611a:	2b00      	cmp	r3, #0
 801611c:	d019      	beq.n	8016152 <USBD_GetDescriptor+0x342>
 801611e:	683b      	ldr	r3, [r7, #0]
 8016120:	88db      	ldrh	r3, [r3, #6]
 8016122:	2b00      	cmp	r3, #0
 8016124:	d015      	beq.n	8016152 <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 8016126:	683b      	ldr	r3, [r7, #0]
 8016128:	88da      	ldrh	r2, [r3, #6]
 801612a:	187b      	adds	r3, r7, r1
 801612c:	881b      	ldrh	r3, [r3, #0]
 801612e:	1c18      	adds	r0, r3, #0
 8016130:	1c11      	adds	r1, r2, #0
 8016132:	b28a      	uxth	r2, r1
 8016134:	b283      	uxth	r3, r0
 8016136:	429a      	cmp	r2, r3
 8016138:	d900      	bls.n	801613c <USBD_GetDescriptor+0x32c>
 801613a:	1c01      	adds	r1, r0, #0
 801613c:	b28a      	uxth	r2, r1
 801613e:	2108      	movs	r1, #8
 8016140:	187b      	adds	r3, r7, r1
 8016142:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8016144:	187b      	adds	r3, r7, r1
 8016146:	881a      	ldrh	r2, [r3, #0]
 8016148:	68f9      	ldr	r1, [r7, #12]
 801614a:	687b      	ldr	r3, [r7, #4]
 801614c:	0018      	movs	r0, r3
 801614e:	f000 fa70 	bl	8016632 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8016152:	683b      	ldr	r3, [r7, #0]
 8016154:	88db      	ldrh	r3, [r3, #6]
 8016156:	2b00      	cmp	r3, #0
 8016158:	d105      	bne.n	8016166 <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 801615a:	687b      	ldr	r3, [r7, #4]
 801615c:	0018      	movs	r0, r3
 801615e:	f000 fad2 	bl	8016706 <USBD_CtlSendStatus>
 8016162:	e000      	b.n	8016166 <USBD_GetDescriptor+0x356>
    return;
 8016164:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 8016166:	46bd      	mov	sp, r7
 8016168:	b004      	add	sp, #16
 801616a:	bd80      	pop	{r7, pc}
 801616c:	0801ba28 	.word	0x0801ba28
 8016170:	0801ba48 	.word	0x0801ba48

08016174 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8016174:	b590      	push	{r4, r7, lr}
 8016176:	b085      	sub	sp, #20
 8016178:	af00      	add	r7, sp, #0
 801617a:	6078      	str	r0, [r7, #4]
 801617c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801617e:	683b      	ldr	r3, [r7, #0]
 8016180:	889b      	ldrh	r3, [r3, #4]
 8016182:	2b00      	cmp	r3, #0
 8016184:	d13d      	bne.n	8016202 <USBD_SetAddress+0x8e>
 8016186:	683b      	ldr	r3, [r7, #0]
 8016188:	88db      	ldrh	r3, [r3, #6]
 801618a:	2b00      	cmp	r3, #0
 801618c:	d139      	bne.n	8016202 <USBD_SetAddress+0x8e>
 801618e:	683b      	ldr	r3, [r7, #0]
 8016190:	885b      	ldrh	r3, [r3, #2]
 8016192:	2b7f      	cmp	r3, #127	@ 0x7f
 8016194:	d835      	bhi.n	8016202 <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8016196:	683b      	ldr	r3, [r7, #0]
 8016198:	885b      	ldrh	r3, [r3, #2]
 801619a:	b2da      	uxtb	r2, r3
 801619c:	230f      	movs	r3, #15
 801619e:	18fb      	adds	r3, r7, r3
 80161a0:	217f      	movs	r1, #127	@ 0x7f
 80161a2:	400a      	ands	r2, r1
 80161a4:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80161a6:	687a      	ldr	r2, [r7, #4]
 80161a8:	23a7      	movs	r3, #167	@ 0xa7
 80161aa:	009b      	lsls	r3, r3, #2
 80161ac:	5cd3      	ldrb	r3, [r2, r3]
 80161ae:	2b03      	cmp	r3, #3
 80161b0:	d106      	bne.n	80161c0 <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 80161b2:	683a      	ldr	r2, [r7, #0]
 80161b4:	687b      	ldr	r3, [r7, #4]
 80161b6:	0011      	movs	r1, r2
 80161b8:	0018      	movs	r0, r3
 80161ba:	f000 f9bc 	bl	8016536 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80161be:	e027      	b.n	8016210 <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80161c0:	687b      	ldr	r3, [r7, #4]
 80161c2:	240f      	movs	r4, #15
 80161c4:	193a      	adds	r2, r7, r4
 80161c6:	4914      	ldr	r1, [pc, #80]	@ (8016218 <USBD_SetAddress+0xa4>)
 80161c8:	7812      	ldrb	r2, [r2, #0]
 80161ca:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80161cc:	193b      	adds	r3, r7, r4
 80161ce:	781a      	ldrb	r2, [r3, #0]
 80161d0:	687b      	ldr	r3, [r7, #4]
 80161d2:	0011      	movs	r1, r2
 80161d4:	0018      	movs	r0, r3
 80161d6:	f000 ff5d 	bl	8017094 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80161da:	687b      	ldr	r3, [r7, #4]
 80161dc:	0018      	movs	r0, r3
 80161de:	f000 fa92 	bl	8016706 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80161e2:	193b      	adds	r3, r7, r4
 80161e4:	781b      	ldrb	r3, [r3, #0]
 80161e6:	2b00      	cmp	r3, #0
 80161e8:	d005      	beq.n	80161f6 <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80161ea:	687a      	ldr	r2, [r7, #4]
 80161ec:	23a7      	movs	r3, #167	@ 0xa7
 80161ee:	009b      	lsls	r3, r3, #2
 80161f0:	2102      	movs	r1, #2
 80161f2:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80161f4:	e00c      	b.n	8016210 <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80161f6:	687a      	ldr	r2, [r7, #4]
 80161f8:	23a7      	movs	r3, #167	@ 0xa7
 80161fa:	009b      	lsls	r3, r3, #2
 80161fc:	2101      	movs	r1, #1
 80161fe:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016200:	e006      	b.n	8016210 <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8016202:	683a      	ldr	r2, [r7, #0]
 8016204:	687b      	ldr	r3, [r7, #4]
 8016206:	0011      	movs	r1, r2
 8016208:	0018      	movs	r0, r3
 801620a:	f000 f994 	bl	8016536 <USBD_CtlError>
  }
}
 801620e:	46c0      	nop			@ (mov r8, r8)
 8016210:	46c0      	nop			@ (mov r8, r8)
 8016212:	46bd      	mov	sp, r7
 8016214:	b005      	add	sp, #20
 8016216:	bd90      	pop	{r4, r7, pc}
 8016218:	0000029e 	.word	0x0000029e

0801621c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801621c:	b580      	push	{r7, lr}
 801621e:	b082      	sub	sp, #8
 8016220:	af00      	add	r7, sp, #0
 8016222:	6078      	str	r0, [r7, #4]
 8016224:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8016226:	683b      	ldr	r3, [r7, #0]
 8016228:	885b      	ldrh	r3, [r3, #2]
 801622a:	b2da      	uxtb	r2, r3
 801622c:	4b4c      	ldr	r3, [pc, #304]	@ (8016360 <USBD_SetConfig+0x144>)
 801622e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8016230:	4b4b      	ldr	r3, [pc, #300]	@ (8016360 <USBD_SetConfig+0x144>)
 8016232:	781b      	ldrb	r3, [r3, #0]
 8016234:	2b01      	cmp	r3, #1
 8016236:	d906      	bls.n	8016246 <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 8016238:	683a      	ldr	r2, [r7, #0]
 801623a:	687b      	ldr	r3, [r7, #4]
 801623c:	0011      	movs	r1, r2
 801623e:	0018      	movs	r0, r3
 8016240:	f000 f979 	bl	8016536 <USBD_CtlError>
 8016244:	e088      	b.n	8016358 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 8016246:	687a      	ldr	r2, [r7, #4]
 8016248:	23a7      	movs	r3, #167	@ 0xa7
 801624a:	009b      	lsls	r3, r3, #2
 801624c:	5cd3      	ldrb	r3, [r2, r3]
 801624e:	2b02      	cmp	r3, #2
 8016250:	d002      	beq.n	8016258 <USBD_SetConfig+0x3c>
 8016252:	2b03      	cmp	r3, #3
 8016254:	d029      	beq.n	80162aa <USBD_SetConfig+0x8e>
 8016256:	e071      	b.n	801633c <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8016258:	4b41      	ldr	r3, [pc, #260]	@ (8016360 <USBD_SetConfig+0x144>)
 801625a:	781b      	ldrb	r3, [r3, #0]
 801625c:	2b00      	cmp	r3, #0
 801625e:	d01f      	beq.n	80162a0 <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 8016260:	4b3f      	ldr	r3, [pc, #252]	@ (8016360 <USBD_SetConfig+0x144>)
 8016262:	781b      	ldrb	r3, [r3, #0]
 8016264:	001a      	movs	r2, r3
 8016266:	687b      	ldr	r3, [r7, #4]
 8016268:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801626a:	687a      	ldr	r2, [r7, #4]
 801626c:	23a7      	movs	r3, #167	@ 0xa7
 801626e:	009b      	lsls	r3, r3, #2
 8016270:	2103      	movs	r1, #3
 8016272:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8016274:	4b3a      	ldr	r3, [pc, #232]	@ (8016360 <USBD_SetConfig+0x144>)
 8016276:	781a      	ldrb	r2, [r3, #0]
 8016278:	687b      	ldr	r3, [r7, #4]
 801627a:	0011      	movs	r1, r2
 801627c:	0018      	movs	r0, r3
 801627e:	f7ff f8c6 	bl	801540e <USBD_SetClassConfig>
 8016282:	0003      	movs	r3, r0
 8016284:	2b02      	cmp	r3, #2
 8016286:	d106      	bne.n	8016296 <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 8016288:	683a      	ldr	r2, [r7, #0]
 801628a:	687b      	ldr	r3, [r7, #4]
 801628c:	0011      	movs	r1, r2
 801628e:	0018      	movs	r0, r3
 8016290:	f000 f951 	bl	8016536 <USBD_CtlError>
            return;
 8016294:	e060      	b.n	8016358 <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 8016296:	687b      	ldr	r3, [r7, #4]
 8016298:	0018      	movs	r0, r3
 801629a:	f000 fa34 	bl	8016706 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 801629e:	e05b      	b.n	8016358 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 80162a0:	687b      	ldr	r3, [r7, #4]
 80162a2:	0018      	movs	r0, r3
 80162a4:	f000 fa2f 	bl	8016706 <USBD_CtlSendStatus>
        break;
 80162a8:	e056      	b.n	8016358 <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80162aa:	4b2d      	ldr	r3, [pc, #180]	@ (8016360 <USBD_SetConfig+0x144>)
 80162ac:	781b      	ldrb	r3, [r3, #0]
 80162ae:	2b00      	cmp	r3, #0
 80162b0:	d115      	bne.n	80162de <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80162b2:	687a      	ldr	r2, [r7, #4]
 80162b4:	23a7      	movs	r3, #167	@ 0xa7
 80162b6:	009b      	lsls	r3, r3, #2
 80162b8:	2102      	movs	r1, #2
 80162ba:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 80162bc:	4b28      	ldr	r3, [pc, #160]	@ (8016360 <USBD_SetConfig+0x144>)
 80162be:	781b      	ldrb	r3, [r3, #0]
 80162c0:	001a      	movs	r2, r3
 80162c2:	687b      	ldr	r3, [r7, #4]
 80162c4:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80162c6:	4b26      	ldr	r3, [pc, #152]	@ (8016360 <USBD_SetConfig+0x144>)
 80162c8:	781a      	ldrb	r2, [r3, #0]
 80162ca:	687b      	ldr	r3, [r7, #4]
 80162cc:	0011      	movs	r1, r2
 80162ce:	0018      	movs	r0, r3
 80162d0:	f7ff f8c4 	bl	801545c <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80162d4:	687b      	ldr	r3, [r7, #4]
 80162d6:	0018      	movs	r0, r3
 80162d8:	f000 fa15 	bl	8016706 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80162dc:	e03c      	b.n	8016358 <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 80162de:	4b20      	ldr	r3, [pc, #128]	@ (8016360 <USBD_SetConfig+0x144>)
 80162e0:	781b      	ldrb	r3, [r3, #0]
 80162e2:	001a      	movs	r2, r3
 80162e4:	687b      	ldr	r3, [r7, #4]
 80162e6:	685b      	ldr	r3, [r3, #4]
 80162e8:	429a      	cmp	r2, r3
 80162ea:	d022      	beq.n	8016332 <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80162ec:	687b      	ldr	r3, [r7, #4]
 80162ee:	685b      	ldr	r3, [r3, #4]
 80162f0:	b2da      	uxtb	r2, r3
 80162f2:	687b      	ldr	r3, [r7, #4]
 80162f4:	0011      	movs	r1, r2
 80162f6:	0018      	movs	r0, r3
 80162f8:	f7ff f8b0 	bl	801545c <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80162fc:	4b18      	ldr	r3, [pc, #96]	@ (8016360 <USBD_SetConfig+0x144>)
 80162fe:	781b      	ldrb	r3, [r3, #0]
 8016300:	001a      	movs	r2, r3
 8016302:	687b      	ldr	r3, [r7, #4]
 8016304:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8016306:	4b16      	ldr	r3, [pc, #88]	@ (8016360 <USBD_SetConfig+0x144>)
 8016308:	781a      	ldrb	r2, [r3, #0]
 801630a:	687b      	ldr	r3, [r7, #4]
 801630c:	0011      	movs	r1, r2
 801630e:	0018      	movs	r0, r3
 8016310:	f7ff f87d 	bl	801540e <USBD_SetClassConfig>
 8016314:	0003      	movs	r3, r0
 8016316:	2b02      	cmp	r3, #2
 8016318:	d106      	bne.n	8016328 <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 801631a:	683a      	ldr	r2, [r7, #0]
 801631c:	687b      	ldr	r3, [r7, #4]
 801631e:	0011      	movs	r1, r2
 8016320:	0018      	movs	r0, r3
 8016322:	f000 f908 	bl	8016536 <USBD_CtlError>
            return;
 8016326:	e017      	b.n	8016358 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8016328:	687b      	ldr	r3, [r7, #4]
 801632a:	0018      	movs	r0, r3
 801632c:	f000 f9eb 	bl	8016706 <USBD_CtlSendStatus>
        break;
 8016330:	e012      	b.n	8016358 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8016332:	687b      	ldr	r3, [r7, #4]
 8016334:	0018      	movs	r0, r3
 8016336:	f000 f9e6 	bl	8016706 <USBD_CtlSendStatus>
        break;
 801633a:	e00d      	b.n	8016358 <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 801633c:	683a      	ldr	r2, [r7, #0]
 801633e:	687b      	ldr	r3, [r7, #4]
 8016340:	0011      	movs	r1, r2
 8016342:	0018      	movs	r0, r3
 8016344:	f000 f8f7 	bl	8016536 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8016348:	4b05      	ldr	r3, [pc, #20]	@ (8016360 <USBD_SetConfig+0x144>)
 801634a:	781a      	ldrb	r2, [r3, #0]
 801634c:	687b      	ldr	r3, [r7, #4]
 801634e:	0011      	movs	r1, r2
 8016350:	0018      	movs	r0, r3
 8016352:	f7ff f883 	bl	801545c <USBD_ClrClassConfig>
        break;
 8016356:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 8016358:	46bd      	mov	sp, r7
 801635a:	b002      	add	sp, #8
 801635c:	bd80      	pop	{r7, pc}
 801635e:	46c0      	nop			@ (mov r8, r8)
 8016360:	20002b3c 	.word	0x20002b3c

08016364 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016364:	b580      	push	{r7, lr}
 8016366:	b082      	sub	sp, #8
 8016368:	af00      	add	r7, sp, #0
 801636a:	6078      	str	r0, [r7, #4]
 801636c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801636e:	683b      	ldr	r3, [r7, #0]
 8016370:	88db      	ldrh	r3, [r3, #6]
 8016372:	2b01      	cmp	r3, #1
 8016374:	d006      	beq.n	8016384 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 8016376:	683a      	ldr	r2, [r7, #0]
 8016378:	687b      	ldr	r3, [r7, #4]
 801637a:	0011      	movs	r1, r2
 801637c:	0018      	movs	r0, r3
 801637e:	f000 f8da 	bl	8016536 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8016382:	e026      	b.n	80163d2 <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 8016384:	687a      	ldr	r2, [r7, #4]
 8016386:	23a7      	movs	r3, #167	@ 0xa7
 8016388:	009b      	lsls	r3, r3, #2
 801638a:	5cd3      	ldrb	r3, [r2, r3]
 801638c:	2b02      	cmp	r3, #2
 801638e:	dc02      	bgt.n	8016396 <USBD_GetConfig+0x32>
 8016390:	2b00      	cmp	r3, #0
 8016392:	dc03      	bgt.n	801639c <USBD_GetConfig+0x38>
 8016394:	e016      	b.n	80163c4 <USBD_GetConfig+0x60>
 8016396:	2b03      	cmp	r3, #3
 8016398:	d00c      	beq.n	80163b4 <USBD_GetConfig+0x50>
 801639a:	e013      	b.n	80163c4 <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 801639c:	687b      	ldr	r3, [r7, #4]
 801639e:	2200      	movs	r2, #0
 80163a0:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80163a2:	687b      	ldr	r3, [r7, #4]
 80163a4:	3308      	adds	r3, #8
 80163a6:	0019      	movs	r1, r3
 80163a8:	687b      	ldr	r3, [r7, #4]
 80163aa:	2201      	movs	r2, #1
 80163ac:	0018      	movs	r0, r3
 80163ae:	f000 f940 	bl	8016632 <USBD_CtlSendData>
        break;
 80163b2:	e00e      	b.n	80163d2 <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80163b4:	687b      	ldr	r3, [r7, #4]
 80163b6:	1d19      	adds	r1, r3, #4
 80163b8:	687b      	ldr	r3, [r7, #4]
 80163ba:	2201      	movs	r2, #1
 80163bc:	0018      	movs	r0, r3
 80163be:	f000 f938 	bl	8016632 <USBD_CtlSendData>
        break;
 80163c2:	e006      	b.n	80163d2 <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 80163c4:	683a      	ldr	r2, [r7, #0]
 80163c6:	687b      	ldr	r3, [r7, #4]
 80163c8:	0011      	movs	r1, r2
 80163ca:	0018      	movs	r0, r3
 80163cc:	f000 f8b3 	bl	8016536 <USBD_CtlError>
        break;
 80163d0:	46c0      	nop			@ (mov r8, r8)
}
 80163d2:	46c0      	nop			@ (mov r8, r8)
 80163d4:	46bd      	mov	sp, r7
 80163d6:	b002      	add	sp, #8
 80163d8:	bd80      	pop	{r7, pc}

080163da <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80163da:	b580      	push	{r7, lr}
 80163dc:	b082      	sub	sp, #8
 80163de:	af00      	add	r7, sp, #0
 80163e0:	6078      	str	r0, [r7, #4]
 80163e2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80163e4:	687a      	ldr	r2, [r7, #4]
 80163e6:	23a7      	movs	r3, #167	@ 0xa7
 80163e8:	009b      	lsls	r3, r3, #2
 80163ea:	5cd3      	ldrb	r3, [r2, r3]
 80163ec:	3b01      	subs	r3, #1
 80163ee:	2b02      	cmp	r3, #2
 80163f0:	d822      	bhi.n	8016438 <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80163f2:	683b      	ldr	r3, [r7, #0]
 80163f4:	88db      	ldrh	r3, [r3, #6]
 80163f6:	2b02      	cmp	r3, #2
 80163f8:	d006      	beq.n	8016408 <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 80163fa:	683a      	ldr	r2, [r7, #0]
 80163fc:	687b      	ldr	r3, [r7, #4]
 80163fe:	0011      	movs	r1, r2
 8016400:	0018      	movs	r0, r3
 8016402:	f000 f898 	bl	8016536 <USBD_CtlError>
        break;
 8016406:	e01e      	b.n	8016446 <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8016408:	687b      	ldr	r3, [r7, #4]
 801640a:	2201      	movs	r2, #1
 801640c:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 801640e:	687a      	ldr	r2, [r7, #4]
 8016410:	23a9      	movs	r3, #169	@ 0xa9
 8016412:	009b      	lsls	r3, r3, #2
 8016414:	58d3      	ldr	r3, [r2, r3]
 8016416:	2b00      	cmp	r3, #0
 8016418:	d005      	beq.n	8016426 <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801641a:	687b      	ldr	r3, [r7, #4]
 801641c:	68db      	ldr	r3, [r3, #12]
 801641e:	2202      	movs	r2, #2
 8016420:	431a      	orrs	r2, r3
 8016422:	687b      	ldr	r3, [r7, #4]
 8016424:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8016426:	687b      	ldr	r3, [r7, #4]
 8016428:	330c      	adds	r3, #12
 801642a:	0019      	movs	r1, r3
 801642c:	687b      	ldr	r3, [r7, #4]
 801642e:	2202      	movs	r2, #2
 8016430:	0018      	movs	r0, r3
 8016432:	f000 f8fe 	bl	8016632 <USBD_CtlSendData>
      break;
 8016436:	e006      	b.n	8016446 <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 8016438:	683a      	ldr	r2, [r7, #0]
 801643a:	687b      	ldr	r3, [r7, #4]
 801643c:	0011      	movs	r1, r2
 801643e:	0018      	movs	r0, r3
 8016440:	f000 f879 	bl	8016536 <USBD_CtlError>
      break;
 8016444:	46c0      	nop			@ (mov r8, r8)
  }
}
 8016446:	46c0      	nop			@ (mov r8, r8)
 8016448:	46bd      	mov	sp, r7
 801644a:	b002      	add	sp, #8
 801644c:	bd80      	pop	{r7, pc}

0801644e <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 801644e:	b580      	push	{r7, lr}
 8016450:	b082      	sub	sp, #8
 8016452:	af00      	add	r7, sp, #0
 8016454:	6078      	str	r0, [r7, #4]
 8016456:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8016458:	683b      	ldr	r3, [r7, #0]
 801645a:	885b      	ldrh	r3, [r3, #2]
 801645c:	2b01      	cmp	r3, #1
 801645e:	d108      	bne.n	8016472 <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 8016460:	687a      	ldr	r2, [r7, #4]
 8016462:	23a9      	movs	r3, #169	@ 0xa9
 8016464:	009b      	lsls	r3, r3, #2
 8016466:	2101      	movs	r1, #1
 8016468:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 801646a:	687b      	ldr	r3, [r7, #4]
 801646c:	0018      	movs	r0, r3
 801646e:	f000 f94a 	bl	8016706 <USBD_CtlSendStatus>
  }
}
 8016472:	46c0      	nop			@ (mov r8, r8)
 8016474:	46bd      	mov	sp, r7
 8016476:	b002      	add	sp, #8
 8016478:	bd80      	pop	{r7, pc}

0801647a <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 801647a:	b580      	push	{r7, lr}
 801647c:	b082      	sub	sp, #8
 801647e:	af00      	add	r7, sp, #0
 8016480:	6078      	str	r0, [r7, #4]
 8016482:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8016484:	687a      	ldr	r2, [r7, #4]
 8016486:	23a7      	movs	r3, #167	@ 0xa7
 8016488:	009b      	lsls	r3, r3, #2
 801648a:	5cd3      	ldrb	r3, [r2, r3]
 801648c:	3b01      	subs	r3, #1
 801648e:	2b02      	cmp	r3, #2
 8016490:	d80d      	bhi.n	80164ae <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8016492:	683b      	ldr	r3, [r7, #0]
 8016494:	885b      	ldrh	r3, [r3, #2]
 8016496:	2b01      	cmp	r3, #1
 8016498:	d110      	bne.n	80164bc <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 801649a:	687a      	ldr	r2, [r7, #4]
 801649c:	23a9      	movs	r3, #169	@ 0xa9
 801649e:	009b      	lsls	r3, r3, #2
 80164a0:	2100      	movs	r1, #0
 80164a2:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 80164a4:	687b      	ldr	r3, [r7, #4]
 80164a6:	0018      	movs	r0, r3
 80164a8:	f000 f92d 	bl	8016706 <USBD_CtlSendStatus>
      }
      break;
 80164ac:	e006      	b.n	80164bc <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 80164ae:	683a      	ldr	r2, [r7, #0]
 80164b0:	687b      	ldr	r3, [r7, #4]
 80164b2:	0011      	movs	r1, r2
 80164b4:	0018      	movs	r0, r3
 80164b6:	f000 f83e 	bl	8016536 <USBD_CtlError>
      break;
 80164ba:	e000      	b.n	80164be <USBD_ClrFeature+0x44>
      break;
 80164bc:	46c0      	nop			@ (mov r8, r8)
  }
}
 80164be:	46c0      	nop			@ (mov r8, r8)
 80164c0:	46bd      	mov	sp, r7
 80164c2:	b002      	add	sp, #8
 80164c4:	bd80      	pop	{r7, pc}

080164c6 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80164c6:	b580      	push	{r7, lr}
 80164c8:	b082      	sub	sp, #8
 80164ca:	af00      	add	r7, sp, #0
 80164cc:	6078      	str	r0, [r7, #4]
 80164ce:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80164d0:	683b      	ldr	r3, [r7, #0]
 80164d2:	781a      	ldrb	r2, [r3, #0]
 80164d4:	687b      	ldr	r3, [r7, #4]
 80164d6:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80164d8:	683b      	ldr	r3, [r7, #0]
 80164da:	785a      	ldrb	r2, [r3, #1]
 80164dc:	687b      	ldr	r3, [r7, #4]
 80164de:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80164e0:	683b      	ldr	r3, [r7, #0]
 80164e2:	3302      	adds	r3, #2
 80164e4:	781b      	ldrb	r3, [r3, #0]
 80164e6:	001a      	movs	r2, r3
 80164e8:	683b      	ldr	r3, [r7, #0]
 80164ea:	3303      	adds	r3, #3
 80164ec:	781b      	ldrb	r3, [r3, #0]
 80164ee:	021b      	lsls	r3, r3, #8
 80164f0:	b29b      	uxth	r3, r3
 80164f2:	18d3      	adds	r3, r2, r3
 80164f4:	b29a      	uxth	r2, r3
 80164f6:	687b      	ldr	r3, [r7, #4]
 80164f8:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80164fa:	683b      	ldr	r3, [r7, #0]
 80164fc:	3304      	adds	r3, #4
 80164fe:	781b      	ldrb	r3, [r3, #0]
 8016500:	001a      	movs	r2, r3
 8016502:	683b      	ldr	r3, [r7, #0]
 8016504:	3305      	adds	r3, #5
 8016506:	781b      	ldrb	r3, [r3, #0]
 8016508:	021b      	lsls	r3, r3, #8
 801650a:	b29b      	uxth	r3, r3
 801650c:	18d3      	adds	r3, r2, r3
 801650e:	b29a      	uxth	r2, r3
 8016510:	687b      	ldr	r3, [r7, #4]
 8016512:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8016514:	683b      	ldr	r3, [r7, #0]
 8016516:	3306      	adds	r3, #6
 8016518:	781b      	ldrb	r3, [r3, #0]
 801651a:	001a      	movs	r2, r3
 801651c:	683b      	ldr	r3, [r7, #0]
 801651e:	3307      	adds	r3, #7
 8016520:	781b      	ldrb	r3, [r3, #0]
 8016522:	021b      	lsls	r3, r3, #8
 8016524:	b29b      	uxth	r3, r3
 8016526:	18d3      	adds	r3, r2, r3
 8016528:	b29a      	uxth	r2, r3
 801652a:	687b      	ldr	r3, [r7, #4]
 801652c:	80da      	strh	r2, [r3, #6]

}
 801652e:	46c0      	nop			@ (mov r8, r8)
 8016530:	46bd      	mov	sp, r7
 8016532:	b002      	add	sp, #8
 8016534:	bd80      	pop	{r7, pc}

08016536 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8016536:	b580      	push	{r7, lr}
 8016538:	b082      	sub	sp, #8
 801653a:	af00      	add	r7, sp, #0
 801653c:	6078      	str	r0, [r7, #4]
 801653e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8016540:	687b      	ldr	r3, [r7, #4]
 8016542:	2180      	movs	r1, #128	@ 0x80
 8016544:	0018      	movs	r0, r3
 8016546:	f000 fd1e 	bl	8016f86 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 801654a:	687b      	ldr	r3, [r7, #4]
 801654c:	2100      	movs	r1, #0
 801654e:	0018      	movs	r0, r3
 8016550:	f000 fd19 	bl	8016f86 <USBD_LL_StallEP>
}
 8016554:	46c0      	nop			@ (mov r8, r8)
 8016556:	46bd      	mov	sp, r7
 8016558:	b002      	add	sp, #8
 801655a:	bd80      	pop	{r7, pc}

0801655c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801655c:	b590      	push	{r4, r7, lr}
 801655e:	b087      	sub	sp, #28
 8016560:	af00      	add	r7, sp, #0
 8016562:	60f8      	str	r0, [r7, #12]
 8016564:	60b9      	str	r1, [r7, #8]
 8016566:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8016568:	2417      	movs	r4, #23
 801656a:	193b      	adds	r3, r7, r4
 801656c:	2200      	movs	r2, #0
 801656e:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 8016570:	68fb      	ldr	r3, [r7, #12]
 8016572:	2b00      	cmp	r3, #0
 8016574:	d03c      	beq.n	80165f0 <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8016576:	68fb      	ldr	r3, [r7, #12]
 8016578:	0018      	movs	r0, r3
 801657a:	f000 f83d 	bl	80165f8 <USBD_GetLen>
 801657e:	0003      	movs	r3, r0
 8016580:	3301      	adds	r3, #1
 8016582:	b29b      	uxth	r3, r3
 8016584:	18db      	adds	r3, r3, r3
 8016586:	b29a      	uxth	r2, r3
 8016588:	687b      	ldr	r3, [r7, #4]
 801658a:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 801658c:	193b      	adds	r3, r7, r4
 801658e:	781b      	ldrb	r3, [r3, #0]
 8016590:	193a      	adds	r2, r7, r4
 8016592:	1c59      	adds	r1, r3, #1
 8016594:	7011      	strb	r1, [r2, #0]
 8016596:	001a      	movs	r2, r3
 8016598:	68bb      	ldr	r3, [r7, #8]
 801659a:	189b      	adds	r3, r3, r2
 801659c:	687a      	ldr	r2, [r7, #4]
 801659e:	7812      	ldrb	r2, [r2, #0]
 80165a0:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80165a2:	193b      	adds	r3, r7, r4
 80165a4:	781b      	ldrb	r3, [r3, #0]
 80165a6:	193a      	adds	r2, r7, r4
 80165a8:	1c59      	adds	r1, r3, #1
 80165aa:	7011      	strb	r1, [r2, #0]
 80165ac:	001a      	movs	r2, r3
 80165ae:	68bb      	ldr	r3, [r7, #8]
 80165b0:	189b      	adds	r3, r3, r2
 80165b2:	2203      	movs	r2, #3
 80165b4:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80165b6:	e017      	b.n	80165e8 <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 80165b8:	68fb      	ldr	r3, [r7, #12]
 80165ba:	1c5a      	adds	r2, r3, #1
 80165bc:	60fa      	str	r2, [r7, #12]
 80165be:	2417      	movs	r4, #23
 80165c0:	193a      	adds	r2, r7, r4
 80165c2:	7812      	ldrb	r2, [r2, #0]
 80165c4:	1939      	adds	r1, r7, r4
 80165c6:	1c50      	adds	r0, r2, #1
 80165c8:	7008      	strb	r0, [r1, #0]
 80165ca:	0011      	movs	r1, r2
 80165cc:	68ba      	ldr	r2, [r7, #8]
 80165ce:	1852      	adds	r2, r2, r1
 80165d0:	781b      	ldrb	r3, [r3, #0]
 80165d2:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80165d4:	193b      	adds	r3, r7, r4
 80165d6:	781b      	ldrb	r3, [r3, #0]
 80165d8:	193a      	adds	r2, r7, r4
 80165da:	1c59      	adds	r1, r3, #1
 80165dc:	7011      	strb	r1, [r2, #0]
 80165de:	001a      	movs	r2, r3
 80165e0:	68bb      	ldr	r3, [r7, #8]
 80165e2:	189b      	adds	r3, r3, r2
 80165e4:	2200      	movs	r2, #0
 80165e6:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80165e8:	68fb      	ldr	r3, [r7, #12]
 80165ea:	781b      	ldrb	r3, [r3, #0]
 80165ec:	2b00      	cmp	r3, #0
 80165ee:	d1e3      	bne.n	80165b8 <USBD_GetString+0x5c>
    }
  }
}
 80165f0:	46c0      	nop			@ (mov r8, r8)
 80165f2:	46bd      	mov	sp, r7
 80165f4:	b007      	add	sp, #28
 80165f6:	bd90      	pop	{r4, r7, pc}

080165f8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80165f8:	b580      	push	{r7, lr}
 80165fa:	b084      	sub	sp, #16
 80165fc:	af00      	add	r7, sp, #0
 80165fe:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8016600:	230f      	movs	r3, #15
 8016602:	18fb      	adds	r3, r7, r3
 8016604:	2200      	movs	r2, #0
 8016606:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 8016608:	e008      	b.n	801661c <USBD_GetLen+0x24>
  {
    len++;
 801660a:	210f      	movs	r1, #15
 801660c:	187b      	adds	r3, r7, r1
 801660e:	781a      	ldrb	r2, [r3, #0]
 8016610:	187b      	adds	r3, r7, r1
 8016612:	3201      	adds	r2, #1
 8016614:	701a      	strb	r2, [r3, #0]
    buf++;
 8016616:	687b      	ldr	r3, [r7, #4]
 8016618:	3301      	adds	r3, #1
 801661a:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 801661c:	687b      	ldr	r3, [r7, #4]
 801661e:	781b      	ldrb	r3, [r3, #0]
 8016620:	2b00      	cmp	r3, #0
 8016622:	d1f2      	bne.n	801660a <USBD_GetLen+0x12>
  }

  return len;
 8016624:	230f      	movs	r3, #15
 8016626:	18fb      	adds	r3, r7, r3
 8016628:	781b      	ldrb	r3, [r3, #0]
}
 801662a:	0018      	movs	r0, r3
 801662c:	46bd      	mov	sp, r7
 801662e:	b004      	add	sp, #16
 8016630:	bd80      	pop	{r7, pc}

08016632 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8016632:	b580      	push	{r7, lr}
 8016634:	b084      	sub	sp, #16
 8016636:	af00      	add	r7, sp, #0
 8016638:	60f8      	str	r0, [r7, #12]
 801663a:	60b9      	str	r1, [r7, #8]
 801663c:	1dbb      	adds	r3, r7, #6
 801663e:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8016640:	68fa      	ldr	r2, [r7, #12]
 8016642:	23a5      	movs	r3, #165	@ 0xa5
 8016644:	009b      	lsls	r3, r3, #2
 8016646:	2102      	movs	r1, #2
 8016648:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 801664a:	1dbb      	adds	r3, r7, #6
 801664c:	881a      	ldrh	r2, [r3, #0]
 801664e:	68fb      	ldr	r3, [r7, #12]
 8016650:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8016652:	1dbb      	adds	r3, r7, #6
 8016654:	881a      	ldrh	r2, [r3, #0]
 8016656:	68fb      	ldr	r3, [r7, #12]
 8016658:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801665a:	1dbb      	adds	r3, r7, #6
 801665c:	881b      	ldrh	r3, [r3, #0]
 801665e:	68ba      	ldr	r2, [r7, #8]
 8016660:	68f8      	ldr	r0, [r7, #12]
 8016662:	2100      	movs	r1, #0
 8016664:	f000 fd41 	bl	80170ea <USBD_LL_Transmit>

  return USBD_OK;
 8016668:	2300      	movs	r3, #0
}
 801666a:	0018      	movs	r0, r3
 801666c:	46bd      	mov	sp, r7
 801666e:	b004      	add	sp, #16
 8016670:	bd80      	pop	{r7, pc}

08016672 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8016672:	b580      	push	{r7, lr}
 8016674:	b084      	sub	sp, #16
 8016676:	af00      	add	r7, sp, #0
 8016678:	60f8      	str	r0, [r7, #12]
 801667a:	60b9      	str	r1, [r7, #8]
 801667c:	1dbb      	adds	r3, r7, #6
 801667e:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8016680:	1dbb      	adds	r3, r7, #6
 8016682:	881b      	ldrh	r3, [r3, #0]
 8016684:	68ba      	ldr	r2, [r7, #8]
 8016686:	68f8      	ldr	r0, [r7, #12]
 8016688:	2100      	movs	r1, #0
 801668a:	f000 fd2e 	bl	80170ea <USBD_LL_Transmit>

  return USBD_OK;
 801668e:	2300      	movs	r3, #0
}
 8016690:	0018      	movs	r0, r3
 8016692:	46bd      	mov	sp, r7
 8016694:	b004      	add	sp, #16
 8016696:	bd80      	pop	{r7, pc}

08016698 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8016698:	b580      	push	{r7, lr}
 801669a:	b084      	sub	sp, #16
 801669c:	af00      	add	r7, sp, #0
 801669e:	60f8      	str	r0, [r7, #12]
 80166a0:	60b9      	str	r1, [r7, #8]
 80166a2:	1dbb      	adds	r3, r7, #6
 80166a4:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80166a6:	68fa      	ldr	r2, [r7, #12]
 80166a8:	23a5      	movs	r3, #165	@ 0xa5
 80166aa:	009b      	lsls	r3, r3, #2
 80166ac:	2103      	movs	r1, #3
 80166ae:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 80166b0:	1dbb      	adds	r3, r7, #6
 80166b2:	8819      	ldrh	r1, [r3, #0]
 80166b4:	68fa      	ldr	r2, [r7, #12]
 80166b6:	23ae      	movs	r3, #174	@ 0xae
 80166b8:	005b      	lsls	r3, r3, #1
 80166ba:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 80166bc:	1dbb      	adds	r3, r7, #6
 80166be:	8819      	ldrh	r1, [r3, #0]
 80166c0:	68fa      	ldr	r2, [r7, #12]
 80166c2:	23b0      	movs	r3, #176	@ 0xb0
 80166c4:	005b      	lsls	r3, r3, #1
 80166c6:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80166c8:	1dbb      	adds	r3, r7, #6
 80166ca:	881b      	ldrh	r3, [r3, #0]
 80166cc:	68ba      	ldr	r2, [r7, #8]
 80166ce:	68f8      	ldr	r0, [r7, #12]
 80166d0:	2100      	movs	r1, #0
 80166d2:	f000 fd41 	bl	8017158 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80166d6:	2300      	movs	r3, #0
}
 80166d8:	0018      	movs	r0, r3
 80166da:	46bd      	mov	sp, r7
 80166dc:	b004      	add	sp, #16
 80166de:	bd80      	pop	{r7, pc}

080166e0 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80166e0:	b580      	push	{r7, lr}
 80166e2:	b084      	sub	sp, #16
 80166e4:	af00      	add	r7, sp, #0
 80166e6:	60f8      	str	r0, [r7, #12]
 80166e8:	60b9      	str	r1, [r7, #8]
 80166ea:	1dbb      	adds	r3, r7, #6
 80166ec:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80166ee:	1dbb      	adds	r3, r7, #6
 80166f0:	881b      	ldrh	r3, [r3, #0]
 80166f2:	68ba      	ldr	r2, [r7, #8]
 80166f4:	68f8      	ldr	r0, [r7, #12]
 80166f6:	2100      	movs	r1, #0
 80166f8:	f000 fd2e 	bl	8017158 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80166fc:	2300      	movs	r3, #0
}
 80166fe:	0018      	movs	r0, r3
 8016700:	46bd      	mov	sp, r7
 8016702:	b004      	add	sp, #16
 8016704:	bd80      	pop	{r7, pc}

08016706 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8016706:	b580      	push	{r7, lr}
 8016708:	b082      	sub	sp, #8
 801670a:	af00      	add	r7, sp, #0
 801670c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801670e:	687a      	ldr	r2, [r7, #4]
 8016710:	23a5      	movs	r3, #165	@ 0xa5
 8016712:	009b      	lsls	r3, r3, #2
 8016714:	2104      	movs	r1, #4
 8016716:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8016718:	6878      	ldr	r0, [r7, #4]
 801671a:	2300      	movs	r3, #0
 801671c:	2200      	movs	r2, #0
 801671e:	2100      	movs	r1, #0
 8016720:	f000 fce3 	bl	80170ea <USBD_LL_Transmit>

  return USBD_OK;
 8016724:	2300      	movs	r3, #0
}
 8016726:	0018      	movs	r0, r3
 8016728:	46bd      	mov	sp, r7
 801672a:	b002      	add	sp, #8
 801672c:	bd80      	pop	{r7, pc}

0801672e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801672e:	b580      	push	{r7, lr}
 8016730:	b082      	sub	sp, #8
 8016732:	af00      	add	r7, sp, #0
 8016734:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8016736:	687a      	ldr	r2, [r7, #4]
 8016738:	23a5      	movs	r3, #165	@ 0xa5
 801673a:	009b      	lsls	r3, r3, #2
 801673c:	2105      	movs	r1, #5
 801673e:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8016740:	6878      	ldr	r0, [r7, #4]
 8016742:	2300      	movs	r3, #0
 8016744:	2200      	movs	r2, #0
 8016746:	2100      	movs	r1, #0
 8016748:	f000 fd06 	bl	8017158 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801674c:	2300      	movs	r3, #0
}
 801674e:	0018      	movs	r0, r3
 8016750:	46bd      	mov	sp, r7
 8016752:	b002      	add	sp, #8
 8016754:	bd80      	pop	{r7, pc}
	...

08016758 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8016758:	b580      	push	{r7, lr}
 801675a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801675c:	4914      	ldr	r1, [pc, #80]	@ (80167b0 <MX_USB_DEVICE_Init+0x58>)
 801675e:	4b15      	ldr	r3, [pc, #84]	@ (80167b4 <MX_USB_DEVICE_Init+0x5c>)
 8016760:	2200      	movs	r2, #0
 8016762:	0018      	movs	r0, r3
 8016764:	f7fe fdec 	bl	8015340 <USBD_Init>
 8016768:	1e03      	subs	r3, r0, #0
 801676a:	d001      	beq.n	8016770 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801676c:	f7ef fdd6 	bl	800631c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8016770:	4a11      	ldr	r2, [pc, #68]	@ (80167b8 <MX_USB_DEVICE_Init+0x60>)
 8016772:	4b10      	ldr	r3, [pc, #64]	@ (80167b4 <MX_USB_DEVICE_Init+0x5c>)
 8016774:	0011      	movs	r1, r2
 8016776:	0018      	movs	r0, r3
 8016778:	f7fe fe13 	bl	80153a2 <USBD_RegisterClass>
 801677c:	1e03      	subs	r3, r0, #0
 801677e:	d001      	beq.n	8016784 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 8016780:	f7ef fdcc 	bl	800631c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8016784:	4a0d      	ldr	r2, [pc, #52]	@ (80167bc <MX_USB_DEVICE_Init+0x64>)
 8016786:	4b0b      	ldr	r3, [pc, #44]	@ (80167b4 <MX_USB_DEVICE_Init+0x5c>)
 8016788:	0011      	movs	r1, r2
 801678a:	0018      	movs	r0, r3
 801678c:	f7fe fd28 	bl	80151e0 <USBD_CDC_RegisterInterface>
 8016790:	1e03      	subs	r3, r0, #0
 8016792:	d001      	beq.n	8016798 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 8016794:	f7ef fdc2 	bl	800631c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8016798:	4b06      	ldr	r3, [pc, #24]	@ (80167b4 <MX_USB_DEVICE_Init+0x5c>)
 801679a:	0018      	movs	r0, r3
 801679c:	f7fe fe21 	bl	80153e2 <USBD_Start>
 80167a0:	1e03      	subs	r3, r0, #0
 80167a2:	d001      	beq.n	80167a8 <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 80167a4:	f7ef fdba 	bl	800631c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80167a8:	46c0      	nop			@ (mov r8, r8)
 80167aa:	46bd      	mov	sp, r7
 80167ac:	bd80      	pop	{r7, pc}
 80167ae:	46c0      	nop			@ (mov r8, r8)
 80167b0:	200001e0 	.word	0x200001e0
 80167b4:	20002b40 	.word	0x20002b40
 80167b8:	200000cc 	.word	0x200000cc
 80167bc:	200001d0 	.word	0x200001d0

080167c0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80167c0:	b580      	push	{r7, lr}
 80167c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80167c4:	4907      	ldr	r1, [pc, #28]	@ (80167e4 <CDC_Init_FS+0x24>)
 80167c6:	4b08      	ldr	r3, [pc, #32]	@ (80167e8 <CDC_Init_FS+0x28>)
 80167c8:	2200      	movs	r2, #0
 80167ca:	0018      	movs	r0, r3
 80167cc:	f7fe fd23 	bl	8015216 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80167d0:	4a06      	ldr	r2, [pc, #24]	@ (80167ec <CDC_Init_FS+0x2c>)
 80167d2:	4b05      	ldr	r3, [pc, #20]	@ (80167e8 <CDC_Init_FS+0x28>)
 80167d4:	0011      	movs	r1, r2
 80167d6:	0018      	movs	r0, r3
 80167d8:	f7fe fd39 	bl	801524e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80167dc:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80167de:	0018      	movs	r0, r3
 80167e0:	46bd      	mov	sp, r7
 80167e2:	bd80      	pop	{r7, pc}
 80167e4:	200032c4 	.word	0x200032c4
 80167e8:	20002b40 	.word	0x20002b40
 80167ec:	20002ec4 	.word	0x20002ec4

080167f0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80167f0:	b580      	push	{r7, lr}
 80167f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80167f4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80167f6:	0018      	movs	r0, r3
 80167f8:	46bd      	mov	sp, r7
 80167fa:	bd80      	pop	{r7, pc}

080167fc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80167fc:	b580      	push	{r7, lr}
 80167fe:	b082      	sub	sp, #8
 8016800:	af00      	add	r7, sp, #0
 8016802:	6039      	str	r1, [r7, #0]
 8016804:	0011      	movs	r1, r2
 8016806:	1dfb      	adds	r3, r7, #7
 8016808:	1c02      	adds	r2, r0, #0
 801680a:	701a      	strb	r2, [r3, #0]
 801680c:	1d3b      	adds	r3, r7, #4
 801680e:	1c0a      	adds	r2, r1, #0
 8016810:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8016812:	1dfb      	adds	r3, r7, #7
 8016814:	781b      	ldrb	r3, [r3, #0]
 8016816:	2b23      	cmp	r3, #35	@ 0x23
 8016818:	d804      	bhi.n	8016824 <CDC_Control_FS+0x28>
 801681a:	009a      	lsls	r2, r3, #2
 801681c:	4b04      	ldr	r3, [pc, #16]	@ (8016830 <CDC_Control_FS+0x34>)
 801681e:	18d3      	adds	r3, r2, r3
 8016820:	681b      	ldr	r3, [r3, #0]
 8016822:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8016824:	46c0      	nop			@ (mov r8, r8)
  }

  return (USBD_OK);
 8016826:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8016828:	0018      	movs	r0, r3
 801682a:	46bd      	mov	sp, r7
 801682c:	b002      	add	sp, #8
 801682e:	bd80      	pop	{r7, pc}
 8016830:	0801ba60 	.word	0x0801ba60

08016834 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8016834:	b580      	push	{r7, lr}
 8016836:	b082      	sub	sp, #8
 8016838:	af00      	add	r7, sp, #0
 801683a:	6078      	str	r0, [r7, #4]
 801683c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  if (ESPProg)
 801683e:	4b12      	ldr	r3, [pc, #72]	@ (8016888 <CDC_Receive_FS+0x54>)
 8016840:	781b      	ldrb	r3, [r3, #0]
 8016842:	2b00      	cmp	r3, #0
 8016844:	d013      	beq.n	801686e <CDC_Receive_FS+0x3a>
  {
    HAL_UART_Transmit(&UsedUart, Buf, *Len, HAL_MAX_DELAY);
 8016846:	683b      	ldr	r3, [r7, #0]
 8016848:	681b      	ldr	r3, [r3, #0]
 801684a:	b29a      	uxth	r2, r3
 801684c:	2301      	movs	r3, #1
 801684e:	425b      	negs	r3, r3
 8016850:	6879      	ldr	r1, [r7, #4]
 8016852:	480e      	ldr	r0, [pc, #56]	@ (801688c <CDC_Receive_FS+0x58>)
 8016854:	f7fa fd3a 	bl	80112cc <HAL_UART_Transmit>
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8016858:	687a      	ldr	r2, [r7, #4]
 801685a:	4b0d      	ldr	r3, [pc, #52]	@ (8016890 <CDC_Receive_FS+0x5c>)
 801685c:	0011      	movs	r1, r2
 801685e:	0018      	movs	r0, r3
 8016860:	f7fe fcf5 	bl	801524e <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8016864:	4b0a      	ldr	r3, [pc, #40]	@ (8016890 <CDC_Receive_FS+0x5c>)
 8016866:	0018      	movs	r0, r3
 8016868:	f7fe fd3c 	bl	80152e4 <USBD_CDC_ReceivePacket>
 801686c:	e006      	b.n	801687c <CDC_Receive_FS+0x48>
  }
  else
   {
     UsbRxDataSize += *Len;
 801686e:	683b      	ldr	r3, [r7, #0]
 8016870:	681a      	ldr	r2, [r3, #0]
 8016872:	4b08      	ldr	r3, [pc, #32]	@ (8016894 <CDC_Receive_FS+0x60>)
 8016874:	681b      	ldr	r3, [r3, #0]
 8016876:	18d2      	adds	r2, r2, r3
 8016878:	4b06      	ldr	r3, [pc, #24]	@ (8016894 <CDC_Receive_FS+0x60>)
 801687a:	601a      	str	r2, [r3, #0]
   }
   return (USBD_OK);
 801687c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801687e:	0018      	movs	r0, r3
 8016880:	46bd      	mov	sp, r7
 8016882:	b002      	add	sp, #8
 8016884:	bd80      	pop	{r7, pc}
 8016886:	46c0      	nop			@ (mov r8, r8)
 8016888:	20002e04 	.word	0x20002e04
 801688c:	20002e08 	.word	0x20002e08
 8016890:	20002b40 	.word	0x20002b40
 8016894:	20002ec0 	.word	0x20002ec0

08016898 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8016898:	b5b0      	push	{r4, r5, r7, lr}
 801689a:	b084      	sub	sp, #16
 801689c:	af00      	add	r7, sp, #0
 801689e:	6078      	str	r0, [r7, #4]
 80168a0:	000a      	movs	r2, r1
 80168a2:	1cbb      	adds	r3, r7, #2
 80168a4:	801a      	strh	r2, [r3, #0]
  uint8_t result = USBD_OK;
 80168a6:	230f      	movs	r3, #15
 80168a8:	18fb      	adds	r3, r7, r3
 80168aa:	2200      	movs	r2, #0
 80168ac:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80168ae:	4a11      	ldr	r2, [pc, #68]	@ (80168f4 <CDC_Transmit_FS+0x5c>)
 80168b0:	23ae      	movs	r3, #174	@ 0xae
 80168b2:	009b      	lsls	r3, r3, #2
 80168b4:	58d3      	ldr	r3, [r2, r3]
 80168b6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80168b8:	68ba      	ldr	r2, [r7, #8]
 80168ba:	2385      	movs	r3, #133	@ 0x85
 80168bc:	009b      	lsls	r3, r3, #2
 80168be:	58d3      	ldr	r3, [r2, r3]
 80168c0:	2b00      	cmp	r3, #0
 80168c2:	d001      	beq.n	80168c8 <CDC_Transmit_FS+0x30>
    return USBD_BUSY;
 80168c4:	2301      	movs	r3, #1
 80168c6:	e010      	b.n	80168ea <CDC_Transmit_FS+0x52>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80168c8:	1cbb      	adds	r3, r7, #2
 80168ca:	881a      	ldrh	r2, [r3, #0]
 80168cc:	6879      	ldr	r1, [r7, #4]
 80168ce:	4b09      	ldr	r3, [pc, #36]	@ (80168f4 <CDC_Transmit_FS+0x5c>)
 80168d0:	0018      	movs	r0, r3
 80168d2:	f7fe fca0 	bl	8015216 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80168d6:	250f      	movs	r5, #15
 80168d8:	197c      	adds	r4, r7, r5
 80168da:	4b06      	ldr	r3, [pc, #24]	@ (80168f4 <CDC_Transmit_FS+0x5c>)
 80168dc:	0018      	movs	r0, r3
 80168de:	f7fe fcca 	bl	8015276 <USBD_CDC_TransmitPacket>
 80168e2:	0003      	movs	r3, r0
 80168e4:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 7 */
  return result;
 80168e6:	197b      	adds	r3, r7, r5
 80168e8:	781b      	ldrb	r3, [r3, #0]
}
 80168ea:	0018      	movs	r0, r3
 80168ec:	46bd      	mov	sp, r7
 80168ee:	b004      	add	sp, #16
 80168f0:	bdb0      	pop	{r4, r5, r7, pc}
 80168f2:	46c0      	nop			@ (mov r8, r8)
 80168f4:	20002b40 	.word	0x20002b40

080168f8 <EnableESPProg>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void EnableESPProg(){
 80168f8:	b580      	push	{r7, lr}
 80168fa:	af00      	add	r7, sp, #0
  ESPProg = true;
 80168fc:	4b02      	ldr	r3, [pc, #8]	@ (8016908 <EnableESPProg+0x10>)
 80168fe:	2201      	movs	r2, #1
 8016900:	701a      	strb	r2, [r3, #0]
}
 8016902:	46c0      	nop			@ (mov r8, r8)
 8016904:	46bd      	mov	sp, r7
 8016906:	bd80      	pop	{r7, pc}
 8016908:	20002e04 	.word	0x20002e04

0801690c <GetUsbRxPointer>:
{
  UsedUart = *uart;
}

uint8_t* GetUsbRxPointer(void)
{
 801690c:	b580      	push	{r7, lr}
 801690e:	af00      	add	r7, sp, #0
  return UserRxBufferFS;
 8016910:	4b01      	ldr	r3, [pc, #4]	@ (8016918 <GetUsbRxPointer+0xc>)
}
 8016912:	0018      	movs	r0, r3
 8016914:	46bd      	mov	sp, r7
 8016916:	bd80      	pop	{r7, pc}
 8016918:	20002ec4 	.word	0x20002ec4

0801691c <ResetUsbRxDataSize>:

void ResetUsbRxDataSize(void)
{
 801691c:	b580      	push	{r7, lr}
 801691e:	af00      	add	r7, sp, #0
  UsbRxDataSize = 0;
 8016920:	4b07      	ldr	r3, [pc, #28]	@ (8016940 <ResetUsbRxDataSize+0x24>)
 8016922:	2200      	movs	r2, #0
 8016924:	601a      	str	r2, [r3, #0]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &UserRxBufferFS[0]);
 8016926:	4a07      	ldr	r2, [pc, #28]	@ (8016944 <ResetUsbRxDataSize+0x28>)
 8016928:	4b07      	ldr	r3, [pc, #28]	@ (8016948 <ResetUsbRxDataSize+0x2c>)
 801692a:	0011      	movs	r1, r2
 801692c:	0018      	movs	r0, r3
 801692e:	f7fe fc8e 	bl	801524e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8016932:	4b05      	ldr	r3, [pc, #20]	@ (8016948 <ResetUsbRxDataSize+0x2c>)
 8016934:	0018      	movs	r0, r3
 8016936:	f7fe fcd5 	bl	80152e4 <USBD_CDC_ReceivePacket>
}
 801693a:	46c0      	nop			@ (mov r8, r8)
 801693c:	46bd      	mov	sp, r7
 801693e:	bd80      	pop	{r7, pc}
 8016940:	20002ec0 	.word	0x20002ec0
 8016944:	20002ec4 	.word	0x20002ec4
 8016948:	20002b40 	.word	0x20002b40

0801694c <GetUsbRxDataSize>:

uint32_t GetUsbRxDataSize()
{
 801694c:	b580      	push	{r7, lr}
 801694e:	af00      	add	r7, sp, #0
  return UsbRxDataSize;
 8016950:	4b02      	ldr	r3, [pc, #8]	@ (801695c <GetUsbRxDataSize+0x10>)
 8016952:	681b      	ldr	r3, [r3, #0]
}
 8016954:	0018      	movs	r0, r3
 8016956:	46bd      	mov	sp, r7
 8016958:	bd80      	pop	{r7, pc}
 801695a:	46c0      	nop			@ (mov r8, r8)
 801695c:	20002ec0 	.word	0x20002ec0

08016960 <GetUsbRxNextChunk>:

void GetUsbRxNextChunk(uint32_t writePointer)
{
 8016960:	b580      	push	{r7, lr}
 8016962:	b082      	sub	sp, #8
 8016964:	af00      	add	r7, sp, #0
 8016966:	6078      	str	r0, [r7, #4]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &UserRxBufferFS[writePointer]);
 8016968:	687a      	ldr	r2, [r7, #4]
 801696a:	4b07      	ldr	r3, [pc, #28]	@ (8016988 <GetUsbRxNextChunk+0x28>)
 801696c:	18d2      	adds	r2, r2, r3
 801696e:	4b07      	ldr	r3, [pc, #28]	@ (801698c <GetUsbRxNextChunk+0x2c>)
 8016970:	0011      	movs	r1, r2
 8016972:	0018      	movs	r0, r3
 8016974:	f7fe fc6b 	bl	801524e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8016978:	4b04      	ldr	r3, [pc, #16]	@ (801698c <GetUsbRxNextChunk+0x2c>)
 801697a:	0018      	movs	r0, r3
 801697c:	f7fe fcb2 	bl	80152e4 <USBD_CDC_ReceivePacket>
}
 8016980:	46c0      	nop			@ (mov r8, r8)
 8016982:	46bd      	mov	sp, r7
 8016984:	b002      	add	sp, #8
 8016986:	bd80      	pop	{r7, pc}
 8016988:	20002ec4 	.word	0x20002ec4
 801698c:	20002b40 	.word	0x20002b40

08016990 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016990:	b580      	push	{r7, lr}
 8016992:	b082      	sub	sp, #8
 8016994:	af00      	add	r7, sp, #0
 8016996:	0002      	movs	r2, r0
 8016998:	6039      	str	r1, [r7, #0]
 801699a:	1dfb      	adds	r3, r7, #7
 801699c:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801699e:	683b      	ldr	r3, [r7, #0]
 80169a0:	2212      	movs	r2, #18
 80169a2:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80169a4:	4b02      	ldr	r3, [pc, #8]	@ (80169b0 <USBD_FS_DeviceDescriptor+0x20>)
}
 80169a6:	0018      	movs	r0, r3
 80169a8:	46bd      	mov	sp, r7
 80169aa:	b002      	add	sp, #8
 80169ac:	bd80      	pop	{r7, pc}
 80169ae:	46c0      	nop			@ (mov r8, r8)
 80169b0:	200001fc 	.word	0x200001fc

080169b4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80169b4:	b580      	push	{r7, lr}
 80169b6:	b082      	sub	sp, #8
 80169b8:	af00      	add	r7, sp, #0
 80169ba:	0002      	movs	r2, r0
 80169bc:	6039      	str	r1, [r7, #0]
 80169be:	1dfb      	adds	r3, r7, #7
 80169c0:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80169c2:	683b      	ldr	r3, [r7, #0]
 80169c4:	2204      	movs	r2, #4
 80169c6:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80169c8:	4b02      	ldr	r3, [pc, #8]	@ (80169d4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80169ca:	0018      	movs	r0, r3
 80169cc:	46bd      	mov	sp, r7
 80169ce:	b002      	add	sp, #8
 80169d0:	bd80      	pop	{r7, pc}
 80169d2:	46c0      	nop			@ (mov r8, r8)
 80169d4:	20000210 	.word	0x20000210

080169d8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80169d8:	b580      	push	{r7, lr}
 80169da:	b082      	sub	sp, #8
 80169dc:	af00      	add	r7, sp, #0
 80169de:	0002      	movs	r2, r0
 80169e0:	6039      	str	r1, [r7, #0]
 80169e2:	1dfb      	adds	r3, r7, #7
 80169e4:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 80169e6:	1dfb      	adds	r3, r7, #7
 80169e8:	781b      	ldrb	r3, [r3, #0]
 80169ea:	2b00      	cmp	r3, #0
 80169ec:	d106      	bne.n	80169fc <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80169ee:	683a      	ldr	r2, [r7, #0]
 80169f0:	4908      	ldr	r1, [pc, #32]	@ (8016a14 <USBD_FS_ProductStrDescriptor+0x3c>)
 80169f2:	4b09      	ldr	r3, [pc, #36]	@ (8016a18 <USBD_FS_ProductStrDescriptor+0x40>)
 80169f4:	0018      	movs	r0, r3
 80169f6:	f7ff fdb1 	bl	801655c <USBD_GetString>
 80169fa:	e005      	b.n	8016a08 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80169fc:	683a      	ldr	r2, [r7, #0]
 80169fe:	4905      	ldr	r1, [pc, #20]	@ (8016a14 <USBD_FS_ProductStrDescriptor+0x3c>)
 8016a00:	4b05      	ldr	r3, [pc, #20]	@ (8016a18 <USBD_FS_ProductStrDescriptor+0x40>)
 8016a02:	0018      	movs	r0, r3
 8016a04:	f7ff fdaa 	bl	801655c <USBD_GetString>
  }
  return USBD_StrDesc;
 8016a08:	4b02      	ldr	r3, [pc, #8]	@ (8016a14 <USBD_FS_ProductStrDescriptor+0x3c>)
}
 8016a0a:	0018      	movs	r0, r3
 8016a0c:	46bd      	mov	sp, r7
 8016a0e:	b002      	add	sp, #8
 8016a10:	bd80      	pop	{r7, pc}
 8016a12:	46c0      	nop			@ (mov r8, r8)
 8016a14:	200036c4 	.word	0x200036c4
 8016a18:	0801b6fc 	.word	0x0801b6fc

08016a1c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016a1c:	b580      	push	{r7, lr}
 8016a1e:	b082      	sub	sp, #8
 8016a20:	af00      	add	r7, sp, #0
 8016a22:	0002      	movs	r2, r0
 8016a24:	6039      	str	r1, [r7, #0]
 8016a26:	1dfb      	adds	r3, r7, #7
 8016a28:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8016a2a:	683a      	ldr	r2, [r7, #0]
 8016a2c:	4904      	ldr	r1, [pc, #16]	@ (8016a40 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8016a2e:	4b05      	ldr	r3, [pc, #20]	@ (8016a44 <USBD_FS_ManufacturerStrDescriptor+0x28>)
 8016a30:	0018      	movs	r0, r3
 8016a32:	f7ff fd93 	bl	801655c <USBD_GetString>
  return USBD_StrDesc;
 8016a36:	4b02      	ldr	r3, [pc, #8]	@ (8016a40 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 8016a38:	0018      	movs	r0, r3
 8016a3a:	46bd      	mov	sp, r7
 8016a3c:	b002      	add	sp, #8
 8016a3e:	bd80      	pop	{r7, pc}
 8016a40:	200036c4 	.word	0x200036c4
 8016a44:	0801b714 	.word	0x0801b714

08016a48 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016a48:	b580      	push	{r7, lr}
 8016a4a:	b082      	sub	sp, #8
 8016a4c:	af00      	add	r7, sp, #0
 8016a4e:	0002      	movs	r2, r0
 8016a50:	6039      	str	r1, [r7, #0]
 8016a52:	1dfb      	adds	r3, r7, #7
 8016a54:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8016a56:	683b      	ldr	r3, [r7, #0]
 8016a58:	221a      	movs	r2, #26
 8016a5a:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8016a5c:	f000 f84c 	bl	8016af8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8016a60:	4b02      	ldr	r3, [pc, #8]	@ (8016a6c <USBD_FS_SerialStrDescriptor+0x24>)
}
 8016a62:	0018      	movs	r0, r3
 8016a64:	46bd      	mov	sp, r7
 8016a66:	b002      	add	sp, #8
 8016a68:	bd80      	pop	{r7, pc}
 8016a6a:	46c0      	nop			@ (mov r8, r8)
 8016a6c:	20000214 	.word	0x20000214

08016a70 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016a70:	b580      	push	{r7, lr}
 8016a72:	b082      	sub	sp, #8
 8016a74:	af00      	add	r7, sp, #0
 8016a76:	0002      	movs	r2, r0
 8016a78:	6039      	str	r1, [r7, #0]
 8016a7a:	1dfb      	adds	r3, r7, #7
 8016a7c:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 8016a7e:	1dfb      	adds	r3, r7, #7
 8016a80:	781b      	ldrb	r3, [r3, #0]
 8016a82:	2b00      	cmp	r3, #0
 8016a84:	d106      	bne.n	8016a94 <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8016a86:	683a      	ldr	r2, [r7, #0]
 8016a88:	4908      	ldr	r1, [pc, #32]	@ (8016aac <USBD_FS_ConfigStrDescriptor+0x3c>)
 8016a8a:	4b09      	ldr	r3, [pc, #36]	@ (8016ab0 <USBD_FS_ConfigStrDescriptor+0x40>)
 8016a8c:	0018      	movs	r0, r3
 8016a8e:	f7ff fd65 	bl	801655c <USBD_GetString>
 8016a92:	e005      	b.n	8016aa0 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8016a94:	683a      	ldr	r2, [r7, #0]
 8016a96:	4905      	ldr	r1, [pc, #20]	@ (8016aac <USBD_FS_ConfigStrDescriptor+0x3c>)
 8016a98:	4b05      	ldr	r3, [pc, #20]	@ (8016ab0 <USBD_FS_ConfigStrDescriptor+0x40>)
 8016a9a:	0018      	movs	r0, r3
 8016a9c:	f7ff fd5e 	bl	801655c <USBD_GetString>
  }
  return USBD_StrDesc;
 8016aa0:	4b02      	ldr	r3, [pc, #8]	@ (8016aac <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 8016aa2:	0018      	movs	r0, r3
 8016aa4:	46bd      	mov	sp, r7
 8016aa6:	b002      	add	sp, #8
 8016aa8:	bd80      	pop	{r7, pc}
 8016aaa:	46c0      	nop			@ (mov r8, r8)
 8016aac:	200036c4 	.word	0x200036c4
 8016ab0:	0801b728 	.word	0x0801b728

08016ab4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016ab4:	b580      	push	{r7, lr}
 8016ab6:	b082      	sub	sp, #8
 8016ab8:	af00      	add	r7, sp, #0
 8016aba:	0002      	movs	r2, r0
 8016abc:	6039      	str	r1, [r7, #0]
 8016abe:	1dfb      	adds	r3, r7, #7
 8016ac0:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 8016ac2:	1dfb      	adds	r3, r7, #7
 8016ac4:	781b      	ldrb	r3, [r3, #0]
 8016ac6:	2b00      	cmp	r3, #0
 8016ac8:	d106      	bne.n	8016ad8 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8016aca:	683a      	ldr	r2, [r7, #0]
 8016acc:	4908      	ldr	r1, [pc, #32]	@ (8016af0 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 8016ace:	4b09      	ldr	r3, [pc, #36]	@ (8016af4 <USBD_FS_InterfaceStrDescriptor+0x40>)
 8016ad0:	0018      	movs	r0, r3
 8016ad2:	f7ff fd43 	bl	801655c <USBD_GetString>
 8016ad6:	e005      	b.n	8016ae4 <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8016ad8:	683a      	ldr	r2, [r7, #0]
 8016ada:	4905      	ldr	r1, [pc, #20]	@ (8016af0 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 8016adc:	4b05      	ldr	r3, [pc, #20]	@ (8016af4 <USBD_FS_InterfaceStrDescriptor+0x40>)
 8016ade:	0018      	movs	r0, r3
 8016ae0:	f7ff fd3c 	bl	801655c <USBD_GetString>
  }
  return USBD_StrDesc;
 8016ae4:	4b02      	ldr	r3, [pc, #8]	@ (8016af0 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 8016ae6:	0018      	movs	r0, r3
 8016ae8:	46bd      	mov	sp, r7
 8016aea:	b002      	add	sp, #8
 8016aec:	bd80      	pop	{r7, pc}
 8016aee:	46c0      	nop			@ (mov r8, r8)
 8016af0:	200036c4 	.word	0x200036c4
 8016af4:	0801b734 	.word	0x0801b734

08016af8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8016af8:	b580      	push	{r7, lr}
 8016afa:	b084      	sub	sp, #16
 8016afc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8016afe:	4b10      	ldr	r3, [pc, #64]	@ (8016b40 <Get_SerialNum+0x48>)
 8016b00:	681b      	ldr	r3, [r3, #0]
 8016b02:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8016b04:	4b0f      	ldr	r3, [pc, #60]	@ (8016b44 <Get_SerialNum+0x4c>)
 8016b06:	681b      	ldr	r3, [r3, #0]
 8016b08:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8016b0a:	4b0f      	ldr	r3, [pc, #60]	@ (8016b48 <Get_SerialNum+0x50>)
 8016b0c:	681b      	ldr	r3, [r3, #0]
 8016b0e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8016b10:	68fa      	ldr	r2, [r7, #12]
 8016b12:	687b      	ldr	r3, [r7, #4]
 8016b14:	18d3      	adds	r3, r2, r3
 8016b16:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8016b18:	68fb      	ldr	r3, [r7, #12]
 8016b1a:	2b00      	cmp	r3, #0
 8016b1c:	d00b      	beq.n	8016b36 <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8016b1e:	490b      	ldr	r1, [pc, #44]	@ (8016b4c <Get_SerialNum+0x54>)
 8016b20:	68fb      	ldr	r3, [r7, #12]
 8016b22:	2208      	movs	r2, #8
 8016b24:	0018      	movs	r0, r3
 8016b26:	f000 f815 	bl	8016b54 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8016b2a:	4909      	ldr	r1, [pc, #36]	@ (8016b50 <Get_SerialNum+0x58>)
 8016b2c:	68bb      	ldr	r3, [r7, #8]
 8016b2e:	2204      	movs	r2, #4
 8016b30:	0018      	movs	r0, r3
 8016b32:	f000 f80f 	bl	8016b54 <IntToUnicode>
  }
}
 8016b36:	46c0      	nop			@ (mov r8, r8)
 8016b38:	46bd      	mov	sp, r7
 8016b3a:	b004      	add	sp, #16
 8016b3c:	bd80      	pop	{r7, pc}
 8016b3e:	46c0      	nop			@ (mov r8, r8)
 8016b40:	1ff80050 	.word	0x1ff80050
 8016b44:	1ff80054 	.word	0x1ff80054
 8016b48:	1ff80058 	.word	0x1ff80058
 8016b4c:	20000216 	.word	0x20000216
 8016b50:	20000226 	.word	0x20000226

08016b54 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8016b54:	b580      	push	{r7, lr}
 8016b56:	b086      	sub	sp, #24
 8016b58:	af00      	add	r7, sp, #0
 8016b5a:	60f8      	str	r0, [r7, #12]
 8016b5c:	60b9      	str	r1, [r7, #8]
 8016b5e:	1dfb      	adds	r3, r7, #7
 8016b60:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 8016b62:	2117      	movs	r1, #23
 8016b64:	187b      	adds	r3, r7, r1
 8016b66:	2200      	movs	r2, #0
 8016b68:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 8016b6a:	187b      	adds	r3, r7, r1
 8016b6c:	2200      	movs	r2, #0
 8016b6e:	701a      	strb	r2, [r3, #0]
 8016b70:	e02f      	b.n	8016bd2 <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 8016b72:	68fb      	ldr	r3, [r7, #12]
 8016b74:	0f1b      	lsrs	r3, r3, #28
 8016b76:	2b09      	cmp	r3, #9
 8016b78:	d80d      	bhi.n	8016b96 <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8016b7a:	68fb      	ldr	r3, [r7, #12]
 8016b7c:	0f1b      	lsrs	r3, r3, #28
 8016b7e:	b2da      	uxtb	r2, r3
 8016b80:	2317      	movs	r3, #23
 8016b82:	18fb      	adds	r3, r7, r3
 8016b84:	781b      	ldrb	r3, [r3, #0]
 8016b86:	005b      	lsls	r3, r3, #1
 8016b88:	0019      	movs	r1, r3
 8016b8a:	68bb      	ldr	r3, [r7, #8]
 8016b8c:	185b      	adds	r3, r3, r1
 8016b8e:	3230      	adds	r2, #48	@ 0x30
 8016b90:	b2d2      	uxtb	r2, r2
 8016b92:	701a      	strb	r2, [r3, #0]
 8016b94:	e00c      	b.n	8016bb0 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8016b96:	68fb      	ldr	r3, [r7, #12]
 8016b98:	0f1b      	lsrs	r3, r3, #28
 8016b9a:	b2da      	uxtb	r2, r3
 8016b9c:	2317      	movs	r3, #23
 8016b9e:	18fb      	adds	r3, r7, r3
 8016ba0:	781b      	ldrb	r3, [r3, #0]
 8016ba2:	005b      	lsls	r3, r3, #1
 8016ba4:	0019      	movs	r1, r3
 8016ba6:	68bb      	ldr	r3, [r7, #8]
 8016ba8:	185b      	adds	r3, r3, r1
 8016baa:	3237      	adds	r2, #55	@ 0x37
 8016bac:	b2d2      	uxtb	r2, r2
 8016bae:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8016bb0:	68fb      	ldr	r3, [r7, #12]
 8016bb2:	011b      	lsls	r3, r3, #4
 8016bb4:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8016bb6:	2117      	movs	r1, #23
 8016bb8:	187b      	adds	r3, r7, r1
 8016bba:	781b      	ldrb	r3, [r3, #0]
 8016bbc:	005b      	lsls	r3, r3, #1
 8016bbe:	3301      	adds	r3, #1
 8016bc0:	68ba      	ldr	r2, [r7, #8]
 8016bc2:	18d3      	adds	r3, r2, r3
 8016bc4:	2200      	movs	r2, #0
 8016bc6:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8016bc8:	187b      	adds	r3, r7, r1
 8016bca:	781a      	ldrb	r2, [r3, #0]
 8016bcc:	187b      	adds	r3, r7, r1
 8016bce:	3201      	adds	r2, #1
 8016bd0:	701a      	strb	r2, [r3, #0]
 8016bd2:	2317      	movs	r3, #23
 8016bd4:	18fa      	adds	r2, r7, r3
 8016bd6:	1dfb      	adds	r3, r7, #7
 8016bd8:	7812      	ldrb	r2, [r2, #0]
 8016bda:	781b      	ldrb	r3, [r3, #0]
 8016bdc:	429a      	cmp	r2, r3
 8016bde:	d3c8      	bcc.n	8016b72 <IntToUnicode+0x1e>
  }
}
 8016be0:	46c0      	nop			@ (mov r8, r8)
 8016be2:	46c0      	nop			@ (mov r8, r8)
 8016be4:	46bd      	mov	sp, r7
 8016be6:	b006      	add	sp, #24
 8016be8:	bd80      	pop	{r7, pc}
	...

08016bec <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8016bec:	b580      	push	{r7, lr}
 8016bee:	b082      	sub	sp, #8
 8016bf0:	af00      	add	r7, sp, #0
 8016bf2:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8016bf4:	687b      	ldr	r3, [r7, #4]
 8016bf6:	681b      	ldr	r3, [r3, #0]
 8016bf8:	4a0a      	ldr	r2, [pc, #40]	@ (8016c24 <HAL_PCD_MspInit+0x38>)
 8016bfa:	4293      	cmp	r3, r2
 8016bfc:	d10e      	bne.n	8016c1c <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8016bfe:	4b0a      	ldr	r3, [pc, #40]	@ (8016c28 <HAL_PCD_MspInit+0x3c>)
 8016c00:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8016c02:	4b09      	ldr	r3, [pc, #36]	@ (8016c28 <HAL_PCD_MspInit+0x3c>)
 8016c04:	2180      	movs	r1, #128	@ 0x80
 8016c06:	0409      	lsls	r1, r1, #16
 8016c08:	430a      	orrs	r2, r1
 8016c0a:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8016c0c:	2200      	movs	r2, #0
 8016c0e:	2100      	movs	r1, #0
 8016c10:	201f      	movs	r0, #31
 8016c12:	f7f3 fd23 	bl	800a65c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 8016c16:	201f      	movs	r0, #31
 8016c18:	f7f3 fd35 	bl	800a686 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8016c1c:	46c0      	nop			@ (mov r8, r8)
 8016c1e:	46bd      	mov	sp, r7
 8016c20:	b002      	add	sp, #8
 8016c22:	bd80      	pop	{r7, pc}
 8016c24:	40005c00 	.word	0x40005c00
 8016c28:	40021000 	.word	0x40021000

08016c2c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016c2c:	b580      	push	{r7, lr}
 8016c2e:	b082      	sub	sp, #8
 8016c30:	af00      	add	r7, sp, #0
 8016c32:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8016c34:	687a      	ldr	r2, [r7, #4]
 8016c36:	23bc      	movs	r3, #188	@ 0xbc
 8016c38:	009b      	lsls	r3, r3, #2
 8016c3a:	58d2      	ldr	r2, [r2, r3]
 8016c3c:	687b      	ldr	r3, [r7, #4]
 8016c3e:	21ac      	movs	r1, #172	@ 0xac
 8016c40:	0089      	lsls	r1, r1, #2
 8016c42:	468c      	mov	ip, r1
 8016c44:	4463      	add	r3, ip
 8016c46:	0019      	movs	r1, r3
 8016c48:	0010      	movs	r0, r2
 8016c4a:	f7fe fc1d 	bl	8015488 <USBD_LL_SetupStage>
}
 8016c4e:	46c0      	nop			@ (mov r8, r8)
 8016c50:	46bd      	mov	sp, r7
 8016c52:	b002      	add	sp, #8
 8016c54:	bd80      	pop	{r7, pc}

08016c56 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016c56:	b590      	push	{r4, r7, lr}
 8016c58:	b083      	sub	sp, #12
 8016c5a:	af00      	add	r7, sp, #0
 8016c5c:	6078      	str	r0, [r7, #4]
 8016c5e:	000a      	movs	r2, r1
 8016c60:	1cfb      	adds	r3, r7, #3
 8016c62:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8016c64:	687a      	ldr	r2, [r7, #4]
 8016c66:	23bc      	movs	r3, #188	@ 0xbc
 8016c68:	009b      	lsls	r3, r3, #2
 8016c6a:	58d4      	ldr	r4, [r2, r3]
 8016c6c:	1cfb      	adds	r3, r7, #3
 8016c6e:	781a      	ldrb	r2, [r3, #0]
 8016c70:	6878      	ldr	r0, [r7, #4]
 8016c72:	23be      	movs	r3, #190	@ 0xbe
 8016c74:	0059      	lsls	r1, r3, #1
 8016c76:	0013      	movs	r3, r2
 8016c78:	009b      	lsls	r3, r3, #2
 8016c7a:	189b      	adds	r3, r3, r2
 8016c7c:	00db      	lsls	r3, r3, #3
 8016c7e:	18c3      	adds	r3, r0, r3
 8016c80:	185b      	adds	r3, r3, r1
 8016c82:	681a      	ldr	r2, [r3, #0]
 8016c84:	1cfb      	adds	r3, r7, #3
 8016c86:	781b      	ldrb	r3, [r3, #0]
 8016c88:	0019      	movs	r1, r3
 8016c8a:	0020      	movs	r0, r4
 8016c8c:	f7fe fc5a 	bl	8015544 <USBD_LL_DataOutStage>
}
 8016c90:	46c0      	nop			@ (mov r8, r8)
 8016c92:	46bd      	mov	sp, r7
 8016c94:	b003      	add	sp, #12
 8016c96:	bd90      	pop	{r4, r7, pc}

08016c98 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016c98:	b580      	push	{r7, lr}
 8016c9a:	b082      	sub	sp, #8
 8016c9c:	af00      	add	r7, sp, #0
 8016c9e:	6078      	str	r0, [r7, #4]
 8016ca0:	000a      	movs	r2, r1
 8016ca2:	1cfb      	adds	r3, r7, #3
 8016ca4:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8016ca6:	687a      	ldr	r2, [r7, #4]
 8016ca8:	23bc      	movs	r3, #188	@ 0xbc
 8016caa:	009b      	lsls	r3, r3, #2
 8016cac:	58d0      	ldr	r0, [r2, r3]
 8016cae:	1cfb      	adds	r3, r7, #3
 8016cb0:	781a      	ldrb	r2, [r3, #0]
 8016cb2:	6879      	ldr	r1, [r7, #4]
 8016cb4:	0013      	movs	r3, r2
 8016cb6:	009b      	lsls	r3, r3, #2
 8016cb8:	189b      	adds	r3, r3, r2
 8016cba:	00db      	lsls	r3, r3, #3
 8016cbc:	18cb      	adds	r3, r1, r3
 8016cbe:	333c      	adds	r3, #60	@ 0x3c
 8016cc0:	681a      	ldr	r2, [r3, #0]
 8016cc2:	1cfb      	adds	r3, r7, #3
 8016cc4:	781b      	ldrb	r3, [r3, #0]
 8016cc6:	0019      	movs	r1, r3
 8016cc8:	f7fe fcbe 	bl	8015648 <USBD_LL_DataInStage>
}
 8016ccc:	46c0      	nop			@ (mov r8, r8)
 8016cce:	46bd      	mov	sp, r7
 8016cd0:	b002      	add	sp, #8
 8016cd2:	bd80      	pop	{r7, pc}

08016cd4 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016cd4:	b580      	push	{r7, lr}
 8016cd6:	b082      	sub	sp, #8
 8016cd8:	af00      	add	r7, sp, #0
 8016cda:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8016cdc:	687a      	ldr	r2, [r7, #4]
 8016cde:	23bc      	movs	r3, #188	@ 0xbc
 8016ce0:	009b      	lsls	r3, r3, #2
 8016ce2:	58d3      	ldr	r3, [r2, r3]
 8016ce4:	0018      	movs	r0, r3
 8016ce6:	f7fe fdf5 	bl	80158d4 <USBD_LL_SOF>
}
 8016cea:	46c0      	nop			@ (mov r8, r8)
 8016cec:	46bd      	mov	sp, r7
 8016cee:	b002      	add	sp, #8
 8016cf0:	bd80      	pop	{r7, pc}

08016cf2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016cf2:	b580      	push	{r7, lr}
 8016cf4:	b084      	sub	sp, #16
 8016cf6:	af00      	add	r7, sp, #0
 8016cf8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8016cfa:	230f      	movs	r3, #15
 8016cfc:	18fb      	adds	r3, r7, r3
 8016cfe:	2201      	movs	r2, #1
 8016d00:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8016d02:	687b      	ldr	r3, [r7, #4]
 8016d04:	689b      	ldr	r3, [r3, #8]
 8016d06:	2b02      	cmp	r3, #2
 8016d08:	d001      	beq.n	8016d0e <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 8016d0a:	f7ef fb07 	bl	800631c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8016d0e:	687a      	ldr	r2, [r7, #4]
 8016d10:	23bc      	movs	r3, #188	@ 0xbc
 8016d12:	009b      	lsls	r3, r3, #2
 8016d14:	58d2      	ldr	r2, [r2, r3]
 8016d16:	230f      	movs	r3, #15
 8016d18:	18fb      	adds	r3, r7, r3
 8016d1a:	781b      	ldrb	r3, [r3, #0]
 8016d1c:	0019      	movs	r1, r3
 8016d1e:	0010      	movs	r0, r2
 8016d20:	f7fe fd97 	bl	8015852 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8016d24:	687a      	ldr	r2, [r7, #4]
 8016d26:	23bc      	movs	r3, #188	@ 0xbc
 8016d28:	009b      	lsls	r3, r3, #2
 8016d2a:	58d3      	ldr	r3, [r2, r3]
 8016d2c:	0018      	movs	r0, r3
 8016d2e:	f7fe fd48 	bl	80157c2 <USBD_LL_Reset>
}
 8016d32:	46c0      	nop			@ (mov r8, r8)
 8016d34:	46bd      	mov	sp, r7
 8016d36:	b004      	add	sp, #16
 8016d38:	bd80      	pop	{r7, pc}
	...

08016d3c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016d3c:	b580      	push	{r7, lr}
 8016d3e:	b082      	sub	sp, #8
 8016d40:	af00      	add	r7, sp, #0
 8016d42:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8016d44:	687a      	ldr	r2, [r7, #4]
 8016d46:	23bc      	movs	r3, #188	@ 0xbc
 8016d48:	009b      	lsls	r3, r3, #2
 8016d4a:	58d3      	ldr	r3, [r2, r3]
 8016d4c:	0018      	movs	r0, r3
 8016d4e:	f7fe fd91 	bl	8015874 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8016d52:	687b      	ldr	r3, [r7, #4]
 8016d54:	699b      	ldr	r3, [r3, #24]
 8016d56:	2b00      	cmp	r3, #0
 8016d58:	d005      	beq.n	8016d66 <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8016d5a:	4b05      	ldr	r3, [pc, #20]	@ (8016d70 <HAL_PCD_SuspendCallback+0x34>)
 8016d5c:	691a      	ldr	r2, [r3, #16]
 8016d5e:	4b04      	ldr	r3, [pc, #16]	@ (8016d70 <HAL_PCD_SuspendCallback+0x34>)
 8016d60:	2106      	movs	r1, #6
 8016d62:	430a      	orrs	r2, r1
 8016d64:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 8016d66:	46c0      	nop			@ (mov r8, r8)
 8016d68:	46bd      	mov	sp, r7
 8016d6a:	b002      	add	sp, #8
 8016d6c:	bd80      	pop	{r7, pc}
 8016d6e:	46c0      	nop			@ (mov r8, r8)
 8016d70:	e000ed00 	.word	0xe000ed00

08016d74 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016d74:	b580      	push	{r7, lr}
 8016d76:	b082      	sub	sp, #8
 8016d78:	af00      	add	r7, sp, #0
 8016d7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8016d7c:	687b      	ldr	r3, [r7, #4]
 8016d7e:	699b      	ldr	r3, [r3, #24]
 8016d80:	2b00      	cmp	r3, #0
 8016d82:	d007      	beq.n	8016d94 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8016d84:	4b09      	ldr	r3, [pc, #36]	@ (8016dac <HAL_PCD_ResumeCallback+0x38>)
 8016d86:	691a      	ldr	r2, [r3, #16]
 8016d88:	4b08      	ldr	r3, [pc, #32]	@ (8016dac <HAL_PCD_ResumeCallback+0x38>)
 8016d8a:	2106      	movs	r1, #6
 8016d8c:	438a      	bics	r2, r1
 8016d8e:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 8016d90:	f000 fa44 	bl	801721c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8016d94:	687a      	ldr	r2, [r7, #4]
 8016d96:	23bc      	movs	r3, #188	@ 0xbc
 8016d98:	009b      	lsls	r3, r3, #2
 8016d9a:	58d3      	ldr	r3, [r2, r3]
 8016d9c:	0018      	movs	r0, r3
 8016d9e:	f7fe fd81 	bl	80158a4 <USBD_LL_Resume>
}
 8016da2:	46c0      	nop			@ (mov r8, r8)
 8016da4:	46bd      	mov	sp, r7
 8016da6:	b002      	add	sp, #8
 8016da8:	bd80      	pop	{r7, pc}
 8016daa:	46c0      	nop			@ (mov r8, r8)
 8016dac:	e000ed00 	.word	0xe000ed00

08016db0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8016db0:	b580      	push	{r7, lr}
 8016db2:	b082      	sub	sp, #8
 8016db4:	af00      	add	r7, sp, #0
 8016db6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8016db8:	4a2d      	ldr	r2, [pc, #180]	@ (8016e70 <USBD_LL_Init+0xc0>)
 8016dba:	23bc      	movs	r3, #188	@ 0xbc
 8016dbc:	009b      	lsls	r3, r3, #2
 8016dbe:	6879      	ldr	r1, [r7, #4]
 8016dc0:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 8016dc2:	687a      	ldr	r2, [r7, #4]
 8016dc4:	23b0      	movs	r3, #176	@ 0xb0
 8016dc6:	009b      	lsls	r3, r3, #2
 8016dc8:	4929      	ldr	r1, [pc, #164]	@ (8016e70 <USBD_LL_Init+0xc0>)
 8016dca:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 8016dcc:	4b28      	ldr	r3, [pc, #160]	@ (8016e70 <USBD_LL_Init+0xc0>)
 8016dce:	4a29      	ldr	r2, [pc, #164]	@ (8016e74 <USBD_LL_Init+0xc4>)
 8016dd0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8016dd2:	4b27      	ldr	r3, [pc, #156]	@ (8016e70 <USBD_LL_Init+0xc0>)
 8016dd4:	2208      	movs	r2, #8
 8016dd6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8016dd8:	4b25      	ldr	r3, [pc, #148]	@ (8016e70 <USBD_LL_Init+0xc0>)
 8016dda:	2202      	movs	r2, #2
 8016ddc:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8016dde:	4b24      	ldr	r3, [pc, #144]	@ (8016e70 <USBD_LL_Init+0xc0>)
 8016de0:	2202      	movs	r2, #2
 8016de2:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8016de4:	4b22      	ldr	r3, [pc, #136]	@ (8016e70 <USBD_LL_Init+0xc0>)
 8016de6:	2200      	movs	r2, #0
 8016de8:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8016dea:	4b21      	ldr	r3, [pc, #132]	@ (8016e70 <USBD_LL_Init+0xc0>)
 8016dec:	2200      	movs	r2, #0
 8016dee:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8016df0:	4b1f      	ldr	r3, [pc, #124]	@ (8016e70 <USBD_LL_Init+0xc0>)
 8016df2:	2200      	movs	r2, #0
 8016df4:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8016df6:	4b1e      	ldr	r3, [pc, #120]	@ (8016e70 <USBD_LL_Init+0xc0>)
 8016df8:	0018      	movs	r0, r3
 8016dfa:	f7f6 fed3 	bl	800dba4 <HAL_PCD_Init>
 8016dfe:	1e03      	subs	r3, r0, #0
 8016e00:	d001      	beq.n	8016e06 <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 8016e02:	f7ef fa8b 	bl	800631c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8016e06:	687a      	ldr	r2, [r7, #4]
 8016e08:	23b0      	movs	r3, #176	@ 0xb0
 8016e0a:	009b      	lsls	r3, r3, #2
 8016e0c:	58d0      	ldr	r0, [r2, r3]
 8016e0e:	2318      	movs	r3, #24
 8016e10:	2200      	movs	r2, #0
 8016e12:	2100      	movs	r1, #0
 8016e14:	f7f8 fc94 	bl	800f740 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8016e18:	687a      	ldr	r2, [r7, #4]
 8016e1a:	23b0      	movs	r3, #176	@ 0xb0
 8016e1c:	009b      	lsls	r3, r3, #2
 8016e1e:	58d0      	ldr	r0, [r2, r3]
 8016e20:	2358      	movs	r3, #88	@ 0x58
 8016e22:	2200      	movs	r2, #0
 8016e24:	2180      	movs	r1, #128	@ 0x80
 8016e26:	f7f8 fc8b 	bl	800f740 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8016e2a:	687a      	ldr	r2, [r7, #4]
 8016e2c:	23b0      	movs	r3, #176	@ 0xb0
 8016e2e:	009b      	lsls	r3, r3, #2
 8016e30:	58d0      	ldr	r0, [r2, r3]
 8016e32:	23c0      	movs	r3, #192	@ 0xc0
 8016e34:	2200      	movs	r2, #0
 8016e36:	2181      	movs	r1, #129	@ 0x81
 8016e38:	f7f8 fc82 	bl	800f740 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8016e3c:	687a      	ldr	r2, [r7, #4]
 8016e3e:	23b0      	movs	r3, #176	@ 0xb0
 8016e40:	009b      	lsls	r3, r3, #2
 8016e42:	58d0      	ldr	r0, [r2, r3]
 8016e44:	2388      	movs	r3, #136	@ 0x88
 8016e46:	005b      	lsls	r3, r3, #1
 8016e48:	2200      	movs	r2, #0
 8016e4a:	2101      	movs	r1, #1
 8016e4c:	f7f8 fc78 	bl	800f740 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8016e50:	687a      	ldr	r2, [r7, #4]
 8016e52:	23b0      	movs	r3, #176	@ 0xb0
 8016e54:	009b      	lsls	r3, r3, #2
 8016e56:	58d0      	ldr	r0, [r2, r3]
 8016e58:	2380      	movs	r3, #128	@ 0x80
 8016e5a:	005b      	lsls	r3, r3, #1
 8016e5c:	2200      	movs	r2, #0
 8016e5e:	2182      	movs	r1, #130	@ 0x82
 8016e60:	f7f8 fc6e 	bl	800f740 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8016e64:	2300      	movs	r3, #0
}
 8016e66:	0018      	movs	r0, r3
 8016e68:	46bd      	mov	sp, r7
 8016e6a:	b002      	add	sp, #8
 8016e6c:	bd80      	pop	{r7, pc}
 8016e6e:	46c0      	nop			@ (mov r8, r8)
 8016e70:	200038c4 	.word	0x200038c4
 8016e74:	40005c00 	.word	0x40005c00

08016e78 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8016e78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016e7a:	b085      	sub	sp, #20
 8016e7c:	af00      	add	r7, sp, #0
 8016e7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016e80:	210f      	movs	r1, #15
 8016e82:	187b      	adds	r3, r7, r1
 8016e84:	2200      	movs	r2, #0
 8016e86:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016e88:	260e      	movs	r6, #14
 8016e8a:	19bb      	adds	r3, r7, r6
 8016e8c:	2200      	movs	r2, #0
 8016e8e:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 8016e90:	687a      	ldr	r2, [r7, #4]
 8016e92:	23b0      	movs	r3, #176	@ 0xb0
 8016e94:	009b      	lsls	r3, r3, #2
 8016e96:	58d3      	ldr	r3, [r2, r3]
 8016e98:	000d      	movs	r5, r1
 8016e9a:	187c      	adds	r4, r7, r1
 8016e9c:	0018      	movs	r0, r3
 8016e9e:	f7f6 ff81 	bl	800dda4 <HAL_PCD_Start>
 8016ea2:	0003      	movs	r3, r0
 8016ea4:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016ea6:	19bc      	adds	r4, r7, r6
 8016ea8:	197b      	adds	r3, r7, r5
 8016eaa:	781b      	ldrb	r3, [r3, #0]
 8016eac:	0018      	movs	r0, r3
 8016eae:	f000 f9bc 	bl	801722a <USBD_Get_USB_Status>
 8016eb2:	0003      	movs	r3, r0
 8016eb4:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8016eb6:	19bb      	adds	r3, r7, r6
 8016eb8:	781b      	ldrb	r3, [r3, #0]
}
 8016eba:	0018      	movs	r0, r3
 8016ebc:	46bd      	mov	sp, r7
 8016ebe:	b005      	add	sp, #20
 8016ec0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016ec2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8016ec2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016ec4:	b085      	sub	sp, #20
 8016ec6:	af00      	add	r7, sp, #0
 8016ec8:	6078      	str	r0, [r7, #4]
 8016eca:	000c      	movs	r4, r1
 8016ecc:	0010      	movs	r0, r2
 8016ece:	0019      	movs	r1, r3
 8016ed0:	1cfb      	adds	r3, r7, #3
 8016ed2:	1c22      	adds	r2, r4, #0
 8016ed4:	701a      	strb	r2, [r3, #0]
 8016ed6:	1cbb      	adds	r3, r7, #2
 8016ed8:	1c02      	adds	r2, r0, #0
 8016eda:	701a      	strb	r2, [r3, #0]
 8016edc:	003b      	movs	r3, r7
 8016ede:	1c0a      	adds	r2, r1, #0
 8016ee0:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016ee2:	260f      	movs	r6, #15
 8016ee4:	19bb      	adds	r3, r7, r6
 8016ee6:	2200      	movs	r2, #0
 8016ee8:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016eea:	250e      	movs	r5, #14
 8016eec:	197b      	adds	r3, r7, r5
 8016eee:	2200      	movs	r2, #0
 8016ef0:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8016ef2:	687a      	ldr	r2, [r7, #4]
 8016ef4:	23b0      	movs	r3, #176	@ 0xb0
 8016ef6:	009b      	lsls	r3, r3, #2
 8016ef8:	58d0      	ldr	r0, [r2, r3]
 8016efa:	19bc      	adds	r4, r7, r6
 8016efc:	1cbb      	adds	r3, r7, #2
 8016efe:	781d      	ldrb	r5, [r3, #0]
 8016f00:	003b      	movs	r3, r7
 8016f02:	881a      	ldrh	r2, [r3, #0]
 8016f04:	1cfb      	adds	r3, r7, #3
 8016f06:	7819      	ldrb	r1, [r3, #0]
 8016f08:	002b      	movs	r3, r5
 8016f0a:	f7f7 f8e0 	bl	800e0ce <HAL_PCD_EP_Open>
 8016f0e:	0003      	movs	r3, r0
 8016f10:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016f12:	250e      	movs	r5, #14
 8016f14:	197c      	adds	r4, r7, r5
 8016f16:	19bb      	adds	r3, r7, r6
 8016f18:	781b      	ldrb	r3, [r3, #0]
 8016f1a:	0018      	movs	r0, r3
 8016f1c:	f000 f985 	bl	801722a <USBD_Get_USB_Status>
 8016f20:	0003      	movs	r3, r0
 8016f22:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8016f24:	197b      	adds	r3, r7, r5
 8016f26:	781b      	ldrb	r3, [r3, #0]
}
 8016f28:	0018      	movs	r0, r3
 8016f2a:	46bd      	mov	sp, r7
 8016f2c:	b005      	add	sp, #20
 8016f2e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016f30 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016f30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016f32:	b085      	sub	sp, #20
 8016f34:	af00      	add	r7, sp, #0
 8016f36:	6078      	str	r0, [r7, #4]
 8016f38:	000a      	movs	r2, r1
 8016f3a:	1cfb      	adds	r3, r7, #3
 8016f3c:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016f3e:	210f      	movs	r1, #15
 8016f40:	187b      	adds	r3, r7, r1
 8016f42:	2200      	movs	r2, #0
 8016f44:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016f46:	260e      	movs	r6, #14
 8016f48:	19bb      	adds	r3, r7, r6
 8016f4a:	2200      	movs	r2, #0
 8016f4c:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8016f4e:	687a      	ldr	r2, [r7, #4]
 8016f50:	23b0      	movs	r3, #176	@ 0xb0
 8016f52:	009b      	lsls	r3, r3, #2
 8016f54:	58d2      	ldr	r2, [r2, r3]
 8016f56:	000d      	movs	r5, r1
 8016f58:	187c      	adds	r4, r7, r1
 8016f5a:	1cfb      	adds	r3, r7, #3
 8016f5c:	781b      	ldrb	r3, [r3, #0]
 8016f5e:	0019      	movs	r1, r3
 8016f60:	0010      	movs	r0, r2
 8016f62:	f7f7 f923 	bl	800e1ac <HAL_PCD_EP_Close>
 8016f66:	0003      	movs	r3, r0
 8016f68:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016f6a:	19bc      	adds	r4, r7, r6
 8016f6c:	197b      	adds	r3, r7, r5
 8016f6e:	781b      	ldrb	r3, [r3, #0]
 8016f70:	0018      	movs	r0, r3
 8016f72:	f000 f95a 	bl	801722a <USBD_Get_USB_Status>
 8016f76:	0003      	movs	r3, r0
 8016f78:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8016f7a:	19bb      	adds	r3, r7, r6
 8016f7c:	781b      	ldrb	r3, [r3, #0]
}
 8016f7e:	0018      	movs	r0, r3
 8016f80:	46bd      	mov	sp, r7
 8016f82:	b005      	add	sp, #20
 8016f84:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016f86 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016f86:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016f88:	b085      	sub	sp, #20
 8016f8a:	af00      	add	r7, sp, #0
 8016f8c:	6078      	str	r0, [r7, #4]
 8016f8e:	000a      	movs	r2, r1
 8016f90:	1cfb      	adds	r3, r7, #3
 8016f92:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016f94:	210f      	movs	r1, #15
 8016f96:	187b      	adds	r3, r7, r1
 8016f98:	2200      	movs	r2, #0
 8016f9a:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016f9c:	260e      	movs	r6, #14
 8016f9e:	19bb      	adds	r3, r7, r6
 8016fa0:	2200      	movs	r2, #0
 8016fa2:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8016fa4:	687a      	ldr	r2, [r7, #4]
 8016fa6:	23b0      	movs	r3, #176	@ 0xb0
 8016fa8:	009b      	lsls	r3, r3, #2
 8016faa:	58d2      	ldr	r2, [r2, r3]
 8016fac:	000d      	movs	r5, r1
 8016fae:	187c      	adds	r4, r7, r1
 8016fb0:	1cfb      	adds	r3, r7, #3
 8016fb2:	781b      	ldrb	r3, [r3, #0]
 8016fb4:	0019      	movs	r1, r3
 8016fb6:	0010      	movs	r0, r2
 8016fb8:	f7f7 f9d5 	bl	800e366 <HAL_PCD_EP_SetStall>
 8016fbc:	0003      	movs	r3, r0
 8016fbe:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016fc0:	19bc      	adds	r4, r7, r6
 8016fc2:	197b      	adds	r3, r7, r5
 8016fc4:	781b      	ldrb	r3, [r3, #0]
 8016fc6:	0018      	movs	r0, r3
 8016fc8:	f000 f92f 	bl	801722a <USBD_Get_USB_Status>
 8016fcc:	0003      	movs	r3, r0
 8016fce:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8016fd0:	19bb      	adds	r3, r7, r6
 8016fd2:	781b      	ldrb	r3, [r3, #0]
}
 8016fd4:	0018      	movs	r0, r3
 8016fd6:	46bd      	mov	sp, r7
 8016fd8:	b005      	add	sp, #20
 8016fda:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016fdc <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016fdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016fde:	b085      	sub	sp, #20
 8016fe0:	af00      	add	r7, sp, #0
 8016fe2:	6078      	str	r0, [r7, #4]
 8016fe4:	000a      	movs	r2, r1
 8016fe6:	1cfb      	adds	r3, r7, #3
 8016fe8:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016fea:	210f      	movs	r1, #15
 8016fec:	187b      	adds	r3, r7, r1
 8016fee:	2200      	movs	r2, #0
 8016ff0:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016ff2:	260e      	movs	r6, #14
 8016ff4:	19bb      	adds	r3, r7, r6
 8016ff6:	2200      	movs	r2, #0
 8016ff8:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8016ffa:	687a      	ldr	r2, [r7, #4]
 8016ffc:	23b0      	movs	r3, #176	@ 0xb0
 8016ffe:	009b      	lsls	r3, r3, #2
 8017000:	58d2      	ldr	r2, [r2, r3]
 8017002:	000d      	movs	r5, r1
 8017004:	187c      	adds	r4, r7, r1
 8017006:	1cfb      	adds	r3, r7, #3
 8017008:	781b      	ldrb	r3, [r3, #0]
 801700a:	0019      	movs	r1, r3
 801700c:	0010      	movs	r0, r2
 801700e:	f7f7 fa06 	bl	800e41e <HAL_PCD_EP_ClrStall>
 8017012:	0003      	movs	r3, r0
 8017014:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017016:	19bc      	adds	r4, r7, r6
 8017018:	197b      	adds	r3, r7, r5
 801701a:	781b      	ldrb	r3, [r3, #0]
 801701c:	0018      	movs	r0, r3
 801701e:	f000 f904 	bl	801722a <USBD_Get_USB_Status>
 8017022:	0003      	movs	r3, r0
 8017024:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8017026:	19bb      	adds	r3, r7, r6
 8017028:	781b      	ldrb	r3, [r3, #0]
}
 801702a:	0018      	movs	r0, r3
 801702c:	46bd      	mov	sp, r7
 801702e:	b005      	add	sp, #20
 8017030:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017032 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017032:	b580      	push	{r7, lr}
 8017034:	b084      	sub	sp, #16
 8017036:	af00      	add	r7, sp, #0
 8017038:	6078      	str	r0, [r7, #4]
 801703a:	000a      	movs	r2, r1
 801703c:	1cfb      	adds	r3, r7, #3
 801703e:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8017040:	687a      	ldr	r2, [r7, #4]
 8017042:	23b0      	movs	r3, #176	@ 0xb0
 8017044:	009b      	lsls	r3, r3, #2
 8017046:	58d3      	ldr	r3, [r2, r3]
 8017048:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801704a:	1cfb      	adds	r3, r7, #3
 801704c:	781b      	ldrb	r3, [r3, #0]
 801704e:	b25b      	sxtb	r3, r3
 8017050:	2b00      	cmp	r3, #0
 8017052:	da0d      	bge.n	8017070 <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8017054:	1cfb      	adds	r3, r7, #3
 8017056:	781b      	ldrb	r3, [r3, #0]
 8017058:	227f      	movs	r2, #127	@ 0x7f
 801705a:	4013      	ands	r3, r2
 801705c:	68f9      	ldr	r1, [r7, #12]
 801705e:	1c5a      	adds	r2, r3, #1
 8017060:	0013      	movs	r3, r2
 8017062:	009b      	lsls	r3, r3, #2
 8017064:	189b      	adds	r3, r3, r2
 8017066:	00db      	lsls	r3, r3, #3
 8017068:	18cb      	adds	r3, r1, r3
 801706a:	3302      	adds	r3, #2
 801706c:	781b      	ldrb	r3, [r3, #0]
 801706e:	e00d      	b.n	801708c <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8017070:	1cfb      	adds	r3, r7, #3
 8017072:	781b      	ldrb	r3, [r3, #0]
 8017074:	227f      	movs	r2, #127	@ 0x7f
 8017076:	401a      	ands	r2, r3
 8017078:	68f8      	ldr	r0, [r7, #12]
 801707a:	23b5      	movs	r3, #181	@ 0xb5
 801707c:	0059      	lsls	r1, r3, #1
 801707e:	0013      	movs	r3, r2
 8017080:	009b      	lsls	r3, r3, #2
 8017082:	189b      	adds	r3, r3, r2
 8017084:	00db      	lsls	r3, r3, #3
 8017086:	18c3      	adds	r3, r0, r3
 8017088:	185b      	adds	r3, r3, r1
 801708a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801708c:	0018      	movs	r0, r3
 801708e:	46bd      	mov	sp, r7
 8017090:	b004      	add	sp, #16
 8017092:	bd80      	pop	{r7, pc}

08017094 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8017094:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017096:	b085      	sub	sp, #20
 8017098:	af00      	add	r7, sp, #0
 801709a:	6078      	str	r0, [r7, #4]
 801709c:	000a      	movs	r2, r1
 801709e:	1cfb      	adds	r3, r7, #3
 80170a0:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80170a2:	210f      	movs	r1, #15
 80170a4:	187b      	adds	r3, r7, r1
 80170a6:	2200      	movs	r2, #0
 80170a8:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80170aa:	260e      	movs	r6, #14
 80170ac:	19bb      	adds	r3, r7, r6
 80170ae:	2200      	movs	r2, #0
 80170b0:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80170b2:	687a      	ldr	r2, [r7, #4]
 80170b4:	23b0      	movs	r3, #176	@ 0xb0
 80170b6:	009b      	lsls	r3, r3, #2
 80170b8:	58d2      	ldr	r2, [r2, r3]
 80170ba:	000d      	movs	r5, r1
 80170bc:	187c      	adds	r4, r7, r1
 80170be:	1cfb      	adds	r3, r7, #3
 80170c0:	781b      	ldrb	r3, [r3, #0]
 80170c2:	0019      	movs	r1, r3
 80170c4:	0010      	movs	r0, r2
 80170c6:	f7f6 ffd7 	bl	800e078 <HAL_PCD_SetAddress>
 80170ca:	0003      	movs	r3, r0
 80170cc:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80170ce:	19bc      	adds	r4, r7, r6
 80170d0:	197b      	adds	r3, r7, r5
 80170d2:	781b      	ldrb	r3, [r3, #0]
 80170d4:	0018      	movs	r0, r3
 80170d6:	f000 f8a8 	bl	801722a <USBD_Get_USB_Status>
 80170da:	0003      	movs	r3, r0
 80170dc:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80170de:	19bb      	adds	r3, r7, r6
 80170e0:	781b      	ldrb	r3, [r3, #0]
}
 80170e2:	0018      	movs	r0, r3
 80170e4:	46bd      	mov	sp, r7
 80170e6:	b005      	add	sp, #20
 80170e8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080170ea <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80170ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 80170ec:	b087      	sub	sp, #28
 80170ee:	af00      	add	r7, sp, #0
 80170f0:	60f8      	str	r0, [r7, #12]
 80170f2:	0008      	movs	r0, r1
 80170f4:	607a      	str	r2, [r7, #4]
 80170f6:	0019      	movs	r1, r3
 80170f8:	230b      	movs	r3, #11
 80170fa:	18fb      	adds	r3, r7, r3
 80170fc:	1c02      	adds	r2, r0, #0
 80170fe:	701a      	strb	r2, [r3, #0]
 8017100:	2408      	movs	r4, #8
 8017102:	193b      	adds	r3, r7, r4
 8017104:	1c0a      	adds	r2, r1, #0
 8017106:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017108:	2117      	movs	r1, #23
 801710a:	187b      	adds	r3, r7, r1
 801710c:	2200      	movs	r2, #0
 801710e:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017110:	2516      	movs	r5, #22
 8017112:	197b      	adds	r3, r7, r5
 8017114:	2200      	movs	r2, #0
 8017116:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8017118:	68fa      	ldr	r2, [r7, #12]
 801711a:	23b0      	movs	r3, #176	@ 0xb0
 801711c:	009b      	lsls	r3, r3, #2
 801711e:	58d0      	ldr	r0, [r2, r3]
 8017120:	193b      	adds	r3, r7, r4
 8017122:	881d      	ldrh	r5, [r3, #0]
 8017124:	000e      	movs	r6, r1
 8017126:	187c      	adds	r4, r7, r1
 8017128:	687a      	ldr	r2, [r7, #4]
 801712a:	230b      	movs	r3, #11
 801712c:	18fb      	adds	r3, r7, r3
 801712e:	7819      	ldrb	r1, [r3, #0]
 8017130:	002b      	movs	r3, r5
 8017132:	f7f7 f8dc 	bl	800e2ee <HAL_PCD_EP_Transmit>
 8017136:	0003      	movs	r3, r0
 8017138:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801713a:	2516      	movs	r5, #22
 801713c:	197c      	adds	r4, r7, r5
 801713e:	19bb      	adds	r3, r7, r6
 8017140:	781b      	ldrb	r3, [r3, #0]
 8017142:	0018      	movs	r0, r3
 8017144:	f000 f871 	bl	801722a <USBD_Get_USB_Status>
 8017148:	0003      	movs	r3, r0
 801714a:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801714c:	197b      	adds	r3, r7, r5
 801714e:	781b      	ldrb	r3, [r3, #0]
}
 8017150:	0018      	movs	r0, r3
 8017152:	46bd      	mov	sp, r7
 8017154:	b007      	add	sp, #28
 8017156:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017158 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8017158:	b5f0      	push	{r4, r5, r6, r7, lr}
 801715a:	b087      	sub	sp, #28
 801715c:	af00      	add	r7, sp, #0
 801715e:	60f8      	str	r0, [r7, #12]
 8017160:	0008      	movs	r0, r1
 8017162:	607a      	str	r2, [r7, #4]
 8017164:	0019      	movs	r1, r3
 8017166:	230b      	movs	r3, #11
 8017168:	18fb      	adds	r3, r7, r3
 801716a:	1c02      	adds	r2, r0, #0
 801716c:	701a      	strb	r2, [r3, #0]
 801716e:	2408      	movs	r4, #8
 8017170:	193b      	adds	r3, r7, r4
 8017172:	1c0a      	adds	r2, r1, #0
 8017174:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017176:	2117      	movs	r1, #23
 8017178:	187b      	adds	r3, r7, r1
 801717a:	2200      	movs	r2, #0
 801717c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801717e:	2516      	movs	r5, #22
 8017180:	197b      	adds	r3, r7, r5
 8017182:	2200      	movs	r2, #0
 8017184:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8017186:	68fa      	ldr	r2, [r7, #12]
 8017188:	23b0      	movs	r3, #176	@ 0xb0
 801718a:	009b      	lsls	r3, r3, #2
 801718c:	58d0      	ldr	r0, [r2, r3]
 801718e:	193b      	adds	r3, r7, r4
 8017190:	881d      	ldrh	r5, [r3, #0]
 8017192:	000e      	movs	r6, r1
 8017194:	187c      	adds	r4, r7, r1
 8017196:	687a      	ldr	r2, [r7, #4]
 8017198:	230b      	movs	r3, #11
 801719a:	18fb      	adds	r3, r7, r3
 801719c:	7819      	ldrb	r1, [r3, #0]
 801719e:	002b      	movs	r3, r5
 80171a0:	f7f7 f855 	bl	800e24e <HAL_PCD_EP_Receive>
 80171a4:	0003      	movs	r3, r0
 80171a6:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80171a8:	2516      	movs	r5, #22
 80171aa:	197c      	adds	r4, r7, r5
 80171ac:	19bb      	adds	r3, r7, r6
 80171ae:	781b      	ldrb	r3, [r3, #0]
 80171b0:	0018      	movs	r0, r3
 80171b2:	f000 f83a 	bl	801722a <USBD_Get_USB_Status>
 80171b6:	0003      	movs	r3, r0
 80171b8:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80171ba:	197b      	adds	r3, r7, r5
 80171bc:	781b      	ldrb	r3, [r3, #0]
}
 80171be:	0018      	movs	r0, r3
 80171c0:	46bd      	mov	sp, r7
 80171c2:	b007      	add	sp, #28
 80171c4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080171c6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80171c6:	b580      	push	{r7, lr}
 80171c8:	b082      	sub	sp, #8
 80171ca:	af00      	add	r7, sp, #0
 80171cc:	6078      	str	r0, [r7, #4]
 80171ce:	000a      	movs	r2, r1
 80171d0:	1cfb      	adds	r3, r7, #3
 80171d2:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80171d4:	687a      	ldr	r2, [r7, #4]
 80171d6:	23b0      	movs	r3, #176	@ 0xb0
 80171d8:	009b      	lsls	r3, r3, #2
 80171da:	58d2      	ldr	r2, [r2, r3]
 80171dc:	1cfb      	adds	r3, r7, #3
 80171de:	781b      	ldrb	r3, [r3, #0]
 80171e0:	0019      	movs	r1, r3
 80171e2:	0010      	movs	r0, r2
 80171e4:	f7f7 f86a 	bl	800e2bc <HAL_PCD_EP_GetRxCount>
 80171e8:	0003      	movs	r3, r0
}
 80171ea:	0018      	movs	r0, r3
 80171ec:	46bd      	mov	sp, r7
 80171ee:	b002      	add	sp, #8
 80171f0:	bd80      	pop	{r7, pc}
	...

080171f4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80171f4:	b580      	push	{r7, lr}
 80171f6:	b082      	sub	sp, #8
 80171f8:	af00      	add	r7, sp, #0
 80171fa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80171fc:	4b02      	ldr	r3, [pc, #8]	@ (8017208 <USBD_static_malloc+0x14>)
}
 80171fe:	0018      	movs	r0, r3
 8017200:	46bd      	mov	sp, r7
 8017202:	b002      	add	sp, #8
 8017204:	bd80      	pop	{r7, pc}
 8017206:	46c0      	nop			@ (mov r8, r8)
 8017208:	20003bb8 	.word	0x20003bb8

0801720c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801720c:	b580      	push	{r7, lr}
 801720e:	b082      	sub	sp, #8
 8017210:	af00      	add	r7, sp, #0
 8017212:	6078      	str	r0, [r7, #4]

}
 8017214:	46c0      	nop			@ (mov r8, r8)
 8017216:	46bd      	mov	sp, r7
 8017218:	b002      	add	sp, #8
 801721a:	bd80      	pop	{r7, pc}

0801721c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 801721c:	b580      	push	{r7, lr}
 801721e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8017220:	f7ee fff6 	bl	8006210 <SystemClock_Config>
}
 8017224:	46c0      	nop			@ (mov r8, r8)
 8017226:	46bd      	mov	sp, r7
 8017228:	bd80      	pop	{r7, pc}

0801722a <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801722a:	b580      	push	{r7, lr}
 801722c:	b084      	sub	sp, #16
 801722e:	af00      	add	r7, sp, #0
 8017230:	0002      	movs	r2, r0
 8017232:	1dfb      	adds	r3, r7, #7
 8017234:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017236:	230f      	movs	r3, #15
 8017238:	18fb      	adds	r3, r7, r3
 801723a:	2200      	movs	r2, #0
 801723c:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 801723e:	1dfb      	adds	r3, r7, #7
 8017240:	781b      	ldrb	r3, [r3, #0]
 8017242:	2b03      	cmp	r3, #3
 8017244:	d017      	beq.n	8017276 <USBD_Get_USB_Status+0x4c>
 8017246:	dc1b      	bgt.n	8017280 <USBD_Get_USB_Status+0x56>
 8017248:	2b02      	cmp	r3, #2
 801724a:	d00f      	beq.n	801726c <USBD_Get_USB_Status+0x42>
 801724c:	dc18      	bgt.n	8017280 <USBD_Get_USB_Status+0x56>
 801724e:	2b00      	cmp	r3, #0
 8017250:	d002      	beq.n	8017258 <USBD_Get_USB_Status+0x2e>
 8017252:	2b01      	cmp	r3, #1
 8017254:	d005      	beq.n	8017262 <USBD_Get_USB_Status+0x38>
 8017256:	e013      	b.n	8017280 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8017258:	230f      	movs	r3, #15
 801725a:	18fb      	adds	r3, r7, r3
 801725c:	2200      	movs	r2, #0
 801725e:	701a      	strb	r2, [r3, #0]
    break;
 8017260:	e013      	b.n	801728a <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8017262:	230f      	movs	r3, #15
 8017264:	18fb      	adds	r3, r7, r3
 8017266:	2202      	movs	r2, #2
 8017268:	701a      	strb	r2, [r3, #0]
    break;
 801726a:	e00e      	b.n	801728a <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801726c:	230f      	movs	r3, #15
 801726e:	18fb      	adds	r3, r7, r3
 8017270:	2201      	movs	r2, #1
 8017272:	701a      	strb	r2, [r3, #0]
    break;
 8017274:	e009      	b.n	801728a <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8017276:	230f      	movs	r3, #15
 8017278:	18fb      	adds	r3, r7, r3
 801727a:	2202      	movs	r2, #2
 801727c:	701a      	strb	r2, [r3, #0]
    break;
 801727e:	e004      	b.n	801728a <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 8017280:	230f      	movs	r3, #15
 8017282:	18fb      	adds	r3, r7, r3
 8017284:	2202      	movs	r2, #2
 8017286:	701a      	strb	r2, [r3, #0]
    break;
 8017288:	46c0      	nop			@ (mov r8, r8)
  }
  return usb_status;
 801728a:	230f      	movs	r3, #15
 801728c:	18fb      	adds	r3, r7, r3
 801728e:	781b      	ldrb	r3, [r3, #0]
}
 8017290:	0018      	movs	r0, r3
 8017292:	46bd      	mov	sp, r7
 8017294:	b004      	add	sp, #16
 8017296:	bd80      	pop	{r7, pc}

08017298 <__cvt>:
 8017298:	b5f0      	push	{r4, r5, r6, r7, lr}
 801729a:	001f      	movs	r7, r3
 801729c:	2300      	movs	r3, #0
 801729e:	0016      	movs	r6, r2
 80172a0:	b08b      	sub	sp, #44	@ 0x2c
 80172a2:	429f      	cmp	r7, r3
 80172a4:	da04      	bge.n	80172b0 <__cvt+0x18>
 80172a6:	2180      	movs	r1, #128	@ 0x80
 80172a8:	0609      	lsls	r1, r1, #24
 80172aa:	187b      	adds	r3, r7, r1
 80172ac:	001f      	movs	r7, r3
 80172ae:	232d      	movs	r3, #45	@ 0x2d
 80172b0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80172b2:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 80172b4:	7013      	strb	r3, [r2, #0]
 80172b6:	2320      	movs	r3, #32
 80172b8:	2203      	movs	r2, #3
 80172ba:	439d      	bics	r5, r3
 80172bc:	2d46      	cmp	r5, #70	@ 0x46
 80172be:	d007      	beq.n	80172d0 <__cvt+0x38>
 80172c0:	002b      	movs	r3, r5
 80172c2:	3b45      	subs	r3, #69	@ 0x45
 80172c4:	4259      	negs	r1, r3
 80172c6:	414b      	adcs	r3, r1
 80172c8:	9910      	ldr	r1, [sp, #64]	@ 0x40
 80172ca:	3a01      	subs	r2, #1
 80172cc:	18cb      	adds	r3, r1, r3
 80172ce:	9310      	str	r3, [sp, #64]	@ 0x40
 80172d0:	ab09      	add	r3, sp, #36	@ 0x24
 80172d2:	9304      	str	r3, [sp, #16]
 80172d4:	ab08      	add	r3, sp, #32
 80172d6:	9303      	str	r3, [sp, #12]
 80172d8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80172da:	9200      	str	r2, [sp, #0]
 80172dc:	9302      	str	r3, [sp, #8]
 80172de:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80172e0:	0032      	movs	r2, r6
 80172e2:	9301      	str	r3, [sp, #4]
 80172e4:	003b      	movs	r3, r7
 80172e6:	f000 ff13 	bl	8018110 <_dtoa_r>
 80172ea:	0004      	movs	r4, r0
 80172ec:	2d47      	cmp	r5, #71	@ 0x47
 80172ee:	d11b      	bne.n	8017328 <__cvt+0x90>
 80172f0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80172f2:	07db      	lsls	r3, r3, #31
 80172f4:	d511      	bpl.n	801731a <__cvt+0x82>
 80172f6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80172f8:	18c3      	adds	r3, r0, r3
 80172fa:	9307      	str	r3, [sp, #28]
 80172fc:	2200      	movs	r2, #0
 80172fe:	2300      	movs	r3, #0
 8017300:	0030      	movs	r0, r6
 8017302:	0039      	movs	r1, r7
 8017304:	f7e9 f8a2 	bl	800044c <__aeabi_dcmpeq>
 8017308:	2800      	cmp	r0, #0
 801730a:	d001      	beq.n	8017310 <__cvt+0x78>
 801730c:	9b07      	ldr	r3, [sp, #28]
 801730e:	9309      	str	r3, [sp, #36]	@ 0x24
 8017310:	2230      	movs	r2, #48	@ 0x30
 8017312:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017314:	9907      	ldr	r1, [sp, #28]
 8017316:	428b      	cmp	r3, r1
 8017318:	d320      	bcc.n	801735c <__cvt+0xc4>
 801731a:	0020      	movs	r0, r4
 801731c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801731e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8017320:	1b1b      	subs	r3, r3, r4
 8017322:	6013      	str	r3, [r2, #0]
 8017324:	b00b      	add	sp, #44	@ 0x2c
 8017326:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017328:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801732a:	18c3      	adds	r3, r0, r3
 801732c:	9307      	str	r3, [sp, #28]
 801732e:	2d46      	cmp	r5, #70	@ 0x46
 8017330:	d1e4      	bne.n	80172fc <__cvt+0x64>
 8017332:	7803      	ldrb	r3, [r0, #0]
 8017334:	2b30      	cmp	r3, #48	@ 0x30
 8017336:	d10c      	bne.n	8017352 <__cvt+0xba>
 8017338:	2200      	movs	r2, #0
 801733a:	2300      	movs	r3, #0
 801733c:	0030      	movs	r0, r6
 801733e:	0039      	movs	r1, r7
 8017340:	f7e9 f884 	bl	800044c <__aeabi_dcmpeq>
 8017344:	2800      	cmp	r0, #0
 8017346:	d104      	bne.n	8017352 <__cvt+0xba>
 8017348:	2301      	movs	r3, #1
 801734a:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801734c:	1a9b      	subs	r3, r3, r2
 801734e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8017350:	6013      	str	r3, [r2, #0]
 8017352:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8017354:	9a07      	ldr	r2, [sp, #28]
 8017356:	681b      	ldr	r3, [r3, #0]
 8017358:	18d3      	adds	r3, r2, r3
 801735a:	e7ce      	b.n	80172fa <__cvt+0x62>
 801735c:	1c59      	adds	r1, r3, #1
 801735e:	9109      	str	r1, [sp, #36]	@ 0x24
 8017360:	701a      	strb	r2, [r3, #0]
 8017362:	e7d6      	b.n	8017312 <__cvt+0x7a>

08017364 <__exponent>:
 8017364:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017366:	232b      	movs	r3, #43	@ 0x2b
 8017368:	0005      	movs	r5, r0
 801736a:	000c      	movs	r4, r1
 801736c:	b085      	sub	sp, #20
 801736e:	7002      	strb	r2, [r0, #0]
 8017370:	2900      	cmp	r1, #0
 8017372:	da01      	bge.n	8017378 <__exponent+0x14>
 8017374:	424c      	negs	r4, r1
 8017376:	3302      	adds	r3, #2
 8017378:	706b      	strb	r3, [r5, #1]
 801737a:	2c09      	cmp	r4, #9
 801737c:	dd2c      	ble.n	80173d8 <__exponent+0x74>
 801737e:	ab02      	add	r3, sp, #8
 8017380:	1dde      	adds	r6, r3, #7
 8017382:	0020      	movs	r0, r4
 8017384:	210a      	movs	r1, #10
 8017386:	f7e9 f84b 	bl	8000420 <__aeabi_idivmod>
 801738a:	0037      	movs	r7, r6
 801738c:	3130      	adds	r1, #48	@ 0x30
 801738e:	3e01      	subs	r6, #1
 8017390:	0020      	movs	r0, r4
 8017392:	7031      	strb	r1, [r6, #0]
 8017394:	210a      	movs	r1, #10
 8017396:	9401      	str	r4, [sp, #4]
 8017398:	f7e8 ff5c 	bl	8000254 <__divsi3>
 801739c:	9b01      	ldr	r3, [sp, #4]
 801739e:	0004      	movs	r4, r0
 80173a0:	2b63      	cmp	r3, #99	@ 0x63
 80173a2:	dcee      	bgt.n	8017382 <__exponent+0x1e>
 80173a4:	1eba      	subs	r2, r7, #2
 80173a6:	1ca8      	adds	r0, r5, #2
 80173a8:	0001      	movs	r1, r0
 80173aa:	0013      	movs	r3, r2
 80173ac:	3430      	adds	r4, #48	@ 0x30
 80173ae:	7014      	strb	r4, [r2, #0]
 80173b0:	ac02      	add	r4, sp, #8
 80173b2:	3407      	adds	r4, #7
 80173b4:	429c      	cmp	r4, r3
 80173b6:	d80a      	bhi.n	80173ce <__exponent+0x6a>
 80173b8:	2300      	movs	r3, #0
 80173ba:	42a2      	cmp	r2, r4
 80173bc:	d803      	bhi.n	80173c6 <__exponent+0x62>
 80173be:	3309      	adds	r3, #9
 80173c0:	aa02      	add	r2, sp, #8
 80173c2:	189b      	adds	r3, r3, r2
 80173c4:	1bdb      	subs	r3, r3, r7
 80173c6:	18c0      	adds	r0, r0, r3
 80173c8:	1b40      	subs	r0, r0, r5
 80173ca:	b005      	add	sp, #20
 80173cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80173ce:	781c      	ldrb	r4, [r3, #0]
 80173d0:	3301      	adds	r3, #1
 80173d2:	700c      	strb	r4, [r1, #0]
 80173d4:	3101      	adds	r1, #1
 80173d6:	e7eb      	b.n	80173b0 <__exponent+0x4c>
 80173d8:	2330      	movs	r3, #48	@ 0x30
 80173da:	18e4      	adds	r4, r4, r3
 80173dc:	70ab      	strb	r3, [r5, #2]
 80173de:	1d28      	adds	r0, r5, #4
 80173e0:	70ec      	strb	r4, [r5, #3]
 80173e2:	e7f1      	b.n	80173c8 <__exponent+0x64>

080173e4 <_printf_float>:
 80173e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80173e6:	b097      	sub	sp, #92	@ 0x5c
 80173e8:	000d      	movs	r5, r1
 80173ea:	920a      	str	r2, [sp, #40]	@ 0x28
 80173ec:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 80173ee:	930b      	str	r3, [sp, #44]	@ 0x2c
 80173f0:	9009      	str	r0, [sp, #36]	@ 0x24
 80173f2:	f000 fd6b 	bl	8017ecc <_localeconv_r>
 80173f6:	6803      	ldr	r3, [r0, #0]
 80173f8:	0018      	movs	r0, r3
 80173fa:	930d      	str	r3, [sp, #52]	@ 0x34
 80173fc:	f7e8 fe84 	bl	8000108 <strlen>
 8017400:	2300      	movs	r3, #0
 8017402:	900f      	str	r0, [sp, #60]	@ 0x3c
 8017404:	9314      	str	r3, [sp, #80]	@ 0x50
 8017406:	7e2b      	ldrb	r3, [r5, #24]
 8017408:	2207      	movs	r2, #7
 801740a:	930c      	str	r3, [sp, #48]	@ 0x30
 801740c:	682b      	ldr	r3, [r5, #0]
 801740e:	930e      	str	r3, [sp, #56]	@ 0x38
 8017410:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8017412:	6823      	ldr	r3, [r4, #0]
 8017414:	05c9      	lsls	r1, r1, #23
 8017416:	d545      	bpl.n	80174a4 <_printf_float+0xc0>
 8017418:	189b      	adds	r3, r3, r2
 801741a:	4393      	bics	r3, r2
 801741c:	001a      	movs	r2, r3
 801741e:	3208      	adds	r2, #8
 8017420:	6022      	str	r2, [r4, #0]
 8017422:	2201      	movs	r2, #1
 8017424:	681e      	ldr	r6, [r3, #0]
 8017426:	685f      	ldr	r7, [r3, #4]
 8017428:	007b      	lsls	r3, r7, #1
 801742a:	085b      	lsrs	r3, r3, #1
 801742c:	9311      	str	r3, [sp, #68]	@ 0x44
 801742e:	9610      	str	r6, [sp, #64]	@ 0x40
 8017430:	64ae      	str	r6, [r5, #72]	@ 0x48
 8017432:	64ef      	str	r7, [r5, #76]	@ 0x4c
 8017434:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8017436:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8017438:	4ba7      	ldr	r3, [pc, #668]	@ (80176d8 <_printf_float+0x2f4>)
 801743a:	4252      	negs	r2, r2
 801743c:	f7eb fee0 	bl	8003200 <__aeabi_dcmpun>
 8017440:	2800      	cmp	r0, #0
 8017442:	d131      	bne.n	80174a8 <_printf_float+0xc4>
 8017444:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8017446:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8017448:	2201      	movs	r2, #1
 801744a:	4ba3      	ldr	r3, [pc, #652]	@ (80176d8 <_printf_float+0x2f4>)
 801744c:	4252      	negs	r2, r2
 801744e:	f7e9 f80d 	bl	800046c <__aeabi_dcmple>
 8017452:	2800      	cmp	r0, #0
 8017454:	d128      	bne.n	80174a8 <_printf_float+0xc4>
 8017456:	2200      	movs	r2, #0
 8017458:	2300      	movs	r3, #0
 801745a:	0030      	movs	r0, r6
 801745c:	0039      	movs	r1, r7
 801745e:	f7e8 fffb 	bl	8000458 <__aeabi_dcmplt>
 8017462:	2800      	cmp	r0, #0
 8017464:	d003      	beq.n	801746e <_printf_float+0x8a>
 8017466:	002b      	movs	r3, r5
 8017468:	222d      	movs	r2, #45	@ 0x2d
 801746a:	3343      	adds	r3, #67	@ 0x43
 801746c:	701a      	strb	r2, [r3, #0]
 801746e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017470:	4f9a      	ldr	r7, [pc, #616]	@ (80176dc <_printf_float+0x2f8>)
 8017472:	2b47      	cmp	r3, #71	@ 0x47
 8017474:	d900      	bls.n	8017478 <_printf_float+0x94>
 8017476:	4f9a      	ldr	r7, [pc, #616]	@ (80176e0 <_printf_float+0x2fc>)
 8017478:	2303      	movs	r3, #3
 801747a:	2400      	movs	r4, #0
 801747c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801747e:	612b      	str	r3, [r5, #16]
 8017480:	3301      	adds	r3, #1
 8017482:	439a      	bics	r2, r3
 8017484:	602a      	str	r2, [r5, #0]
 8017486:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8017488:	0029      	movs	r1, r5
 801748a:	9300      	str	r3, [sp, #0]
 801748c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801748e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8017490:	aa15      	add	r2, sp, #84	@ 0x54
 8017492:	f000 f9e5 	bl	8017860 <_printf_common>
 8017496:	3001      	adds	r0, #1
 8017498:	d000      	beq.n	801749c <_printf_float+0xb8>
 801749a:	e09f      	b.n	80175dc <_printf_float+0x1f8>
 801749c:	2001      	movs	r0, #1
 801749e:	4240      	negs	r0, r0
 80174a0:	b017      	add	sp, #92	@ 0x5c
 80174a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80174a4:	3307      	adds	r3, #7
 80174a6:	e7b8      	b.n	801741a <_printf_float+0x36>
 80174a8:	0032      	movs	r2, r6
 80174aa:	003b      	movs	r3, r7
 80174ac:	0030      	movs	r0, r6
 80174ae:	0039      	movs	r1, r7
 80174b0:	f7eb fea6 	bl	8003200 <__aeabi_dcmpun>
 80174b4:	2800      	cmp	r0, #0
 80174b6:	d00b      	beq.n	80174d0 <_printf_float+0xec>
 80174b8:	2f00      	cmp	r7, #0
 80174ba:	da03      	bge.n	80174c4 <_printf_float+0xe0>
 80174bc:	002b      	movs	r3, r5
 80174be:	222d      	movs	r2, #45	@ 0x2d
 80174c0:	3343      	adds	r3, #67	@ 0x43
 80174c2:	701a      	strb	r2, [r3, #0]
 80174c4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80174c6:	4f87      	ldr	r7, [pc, #540]	@ (80176e4 <_printf_float+0x300>)
 80174c8:	2b47      	cmp	r3, #71	@ 0x47
 80174ca:	d9d5      	bls.n	8017478 <_printf_float+0x94>
 80174cc:	4f86      	ldr	r7, [pc, #536]	@ (80176e8 <_printf_float+0x304>)
 80174ce:	e7d3      	b.n	8017478 <_printf_float+0x94>
 80174d0:	2220      	movs	r2, #32
 80174d2:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 80174d4:	686b      	ldr	r3, [r5, #4]
 80174d6:	4394      	bics	r4, r2
 80174d8:	1c5a      	adds	r2, r3, #1
 80174da:	d146      	bne.n	801756a <_printf_float+0x186>
 80174dc:	3307      	adds	r3, #7
 80174de:	606b      	str	r3, [r5, #4]
 80174e0:	2380      	movs	r3, #128	@ 0x80
 80174e2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80174e4:	00db      	lsls	r3, r3, #3
 80174e6:	4313      	orrs	r3, r2
 80174e8:	2200      	movs	r2, #0
 80174ea:	602b      	str	r3, [r5, #0]
 80174ec:	9206      	str	r2, [sp, #24]
 80174ee:	aa14      	add	r2, sp, #80	@ 0x50
 80174f0:	9205      	str	r2, [sp, #20]
 80174f2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80174f4:	a90a      	add	r1, sp, #40	@ 0x28
 80174f6:	9204      	str	r2, [sp, #16]
 80174f8:	aa13      	add	r2, sp, #76	@ 0x4c
 80174fa:	9203      	str	r2, [sp, #12]
 80174fc:	2223      	movs	r2, #35	@ 0x23
 80174fe:	1852      	adds	r2, r2, r1
 8017500:	9202      	str	r2, [sp, #8]
 8017502:	9301      	str	r3, [sp, #4]
 8017504:	686b      	ldr	r3, [r5, #4]
 8017506:	0032      	movs	r2, r6
 8017508:	9300      	str	r3, [sp, #0]
 801750a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801750c:	003b      	movs	r3, r7
 801750e:	f7ff fec3 	bl	8017298 <__cvt>
 8017512:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8017514:	0007      	movs	r7, r0
 8017516:	2c47      	cmp	r4, #71	@ 0x47
 8017518:	d12d      	bne.n	8017576 <_printf_float+0x192>
 801751a:	1cd3      	adds	r3, r2, #3
 801751c:	db02      	blt.n	8017524 <_printf_float+0x140>
 801751e:	686b      	ldr	r3, [r5, #4]
 8017520:	429a      	cmp	r2, r3
 8017522:	dd48      	ble.n	80175b6 <_printf_float+0x1d2>
 8017524:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017526:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8017528:	3b02      	subs	r3, #2
 801752a:	b2db      	uxtb	r3, r3
 801752c:	930c      	str	r3, [sp, #48]	@ 0x30
 801752e:	0028      	movs	r0, r5
 8017530:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8017532:	3901      	subs	r1, #1
 8017534:	3050      	adds	r0, #80	@ 0x50
 8017536:	9113      	str	r1, [sp, #76]	@ 0x4c
 8017538:	f7ff ff14 	bl	8017364 <__exponent>
 801753c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801753e:	0004      	movs	r4, r0
 8017540:	1813      	adds	r3, r2, r0
 8017542:	612b      	str	r3, [r5, #16]
 8017544:	2a01      	cmp	r2, #1
 8017546:	dc02      	bgt.n	801754e <_printf_float+0x16a>
 8017548:	682a      	ldr	r2, [r5, #0]
 801754a:	07d2      	lsls	r2, r2, #31
 801754c:	d501      	bpl.n	8017552 <_printf_float+0x16e>
 801754e:	3301      	adds	r3, #1
 8017550:	612b      	str	r3, [r5, #16]
 8017552:	2323      	movs	r3, #35	@ 0x23
 8017554:	aa0a      	add	r2, sp, #40	@ 0x28
 8017556:	189b      	adds	r3, r3, r2
 8017558:	781b      	ldrb	r3, [r3, #0]
 801755a:	2b00      	cmp	r3, #0
 801755c:	d100      	bne.n	8017560 <_printf_float+0x17c>
 801755e:	e792      	b.n	8017486 <_printf_float+0xa2>
 8017560:	002b      	movs	r3, r5
 8017562:	222d      	movs	r2, #45	@ 0x2d
 8017564:	3343      	adds	r3, #67	@ 0x43
 8017566:	701a      	strb	r2, [r3, #0]
 8017568:	e78d      	b.n	8017486 <_printf_float+0xa2>
 801756a:	2c47      	cmp	r4, #71	@ 0x47
 801756c:	d1b8      	bne.n	80174e0 <_printf_float+0xfc>
 801756e:	2b00      	cmp	r3, #0
 8017570:	d1b6      	bne.n	80174e0 <_printf_float+0xfc>
 8017572:	3301      	adds	r3, #1
 8017574:	e7b3      	b.n	80174de <_printf_float+0xfa>
 8017576:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017578:	0011      	movs	r1, r2
 801757a:	2b65      	cmp	r3, #101	@ 0x65
 801757c:	d9d7      	bls.n	801752e <_printf_float+0x14a>
 801757e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017580:	2b66      	cmp	r3, #102	@ 0x66
 8017582:	d11a      	bne.n	80175ba <_printf_float+0x1d6>
 8017584:	686b      	ldr	r3, [r5, #4]
 8017586:	2a00      	cmp	r2, #0
 8017588:	dd09      	ble.n	801759e <_printf_float+0x1ba>
 801758a:	612a      	str	r2, [r5, #16]
 801758c:	2b00      	cmp	r3, #0
 801758e:	d102      	bne.n	8017596 <_printf_float+0x1b2>
 8017590:	6829      	ldr	r1, [r5, #0]
 8017592:	07c9      	lsls	r1, r1, #31
 8017594:	d50b      	bpl.n	80175ae <_printf_float+0x1ca>
 8017596:	3301      	adds	r3, #1
 8017598:	189b      	adds	r3, r3, r2
 801759a:	612b      	str	r3, [r5, #16]
 801759c:	e007      	b.n	80175ae <_printf_float+0x1ca>
 801759e:	2b00      	cmp	r3, #0
 80175a0:	d103      	bne.n	80175aa <_printf_float+0x1c6>
 80175a2:	2201      	movs	r2, #1
 80175a4:	6829      	ldr	r1, [r5, #0]
 80175a6:	4211      	tst	r1, r2
 80175a8:	d000      	beq.n	80175ac <_printf_float+0x1c8>
 80175aa:	1c9a      	adds	r2, r3, #2
 80175ac:	612a      	str	r2, [r5, #16]
 80175ae:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80175b0:	2400      	movs	r4, #0
 80175b2:	65ab      	str	r3, [r5, #88]	@ 0x58
 80175b4:	e7cd      	b.n	8017552 <_printf_float+0x16e>
 80175b6:	2367      	movs	r3, #103	@ 0x67
 80175b8:	930c      	str	r3, [sp, #48]	@ 0x30
 80175ba:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80175bc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80175be:	4299      	cmp	r1, r3
 80175c0:	db06      	blt.n	80175d0 <_printf_float+0x1ec>
 80175c2:	682b      	ldr	r3, [r5, #0]
 80175c4:	6129      	str	r1, [r5, #16]
 80175c6:	07db      	lsls	r3, r3, #31
 80175c8:	d5f1      	bpl.n	80175ae <_printf_float+0x1ca>
 80175ca:	3101      	adds	r1, #1
 80175cc:	6129      	str	r1, [r5, #16]
 80175ce:	e7ee      	b.n	80175ae <_printf_float+0x1ca>
 80175d0:	2201      	movs	r2, #1
 80175d2:	2900      	cmp	r1, #0
 80175d4:	dce0      	bgt.n	8017598 <_printf_float+0x1b4>
 80175d6:	1892      	adds	r2, r2, r2
 80175d8:	1a52      	subs	r2, r2, r1
 80175da:	e7dd      	b.n	8017598 <_printf_float+0x1b4>
 80175dc:	682a      	ldr	r2, [r5, #0]
 80175de:	0553      	lsls	r3, r2, #21
 80175e0:	d408      	bmi.n	80175f4 <_printf_float+0x210>
 80175e2:	692b      	ldr	r3, [r5, #16]
 80175e4:	003a      	movs	r2, r7
 80175e6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80175e8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80175ea:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80175ec:	47a0      	blx	r4
 80175ee:	3001      	adds	r0, #1
 80175f0:	d129      	bne.n	8017646 <_printf_float+0x262>
 80175f2:	e753      	b.n	801749c <_printf_float+0xb8>
 80175f4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80175f6:	2b65      	cmp	r3, #101	@ 0x65
 80175f8:	d800      	bhi.n	80175fc <_printf_float+0x218>
 80175fa:	e0da      	b.n	80177b2 <_printf_float+0x3ce>
 80175fc:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 80175fe:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8017600:	2200      	movs	r2, #0
 8017602:	2300      	movs	r3, #0
 8017604:	f7e8 ff22 	bl	800044c <__aeabi_dcmpeq>
 8017608:	2800      	cmp	r0, #0
 801760a:	d033      	beq.n	8017674 <_printf_float+0x290>
 801760c:	2301      	movs	r3, #1
 801760e:	4a37      	ldr	r2, [pc, #220]	@ (80176ec <_printf_float+0x308>)
 8017610:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8017612:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017614:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8017616:	47a0      	blx	r4
 8017618:	3001      	adds	r0, #1
 801761a:	d100      	bne.n	801761e <_printf_float+0x23a>
 801761c:	e73e      	b.n	801749c <_printf_float+0xb8>
 801761e:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8017620:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8017622:	42b3      	cmp	r3, r6
 8017624:	db02      	blt.n	801762c <_printf_float+0x248>
 8017626:	682b      	ldr	r3, [r5, #0]
 8017628:	07db      	lsls	r3, r3, #31
 801762a:	d50c      	bpl.n	8017646 <_printf_float+0x262>
 801762c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801762e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017630:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8017632:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8017634:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017636:	47a0      	blx	r4
 8017638:	2400      	movs	r4, #0
 801763a:	3001      	adds	r0, #1
 801763c:	d100      	bne.n	8017640 <_printf_float+0x25c>
 801763e:	e72d      	b.n	801749c <_printf_float+0xb8>
 8017640:	1e73      	subs	r3, r6, #1
 8017642:	42a3      	cmp	r3, r4
 8017644:	dc0a      	bgt.n	801765c <_printf_float+0x278>
 8017646:	682b      	ldr	r3, [r5, #0]
 8017648:	079b      	lsls	r3, r3, #30
 801764a:	d500      	bpl.n	801764e <_printf_float+0x26a>
 801764c:	e105      	b.n	801785a <_printf_float+0x476>
 801764e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8017650:	68e8      	ldr	r0, [r5, #12]
 8017652:	4298      	cmp	r0, r3
 8017654:	db00      	blt.n	8017658 <_printf_float+0x274>
 8017656:	e723      	b.n	80174a0 <_printf_float+0xbc>
 8017658:	0018      	movs	r0, r3
 801765a:	e721      	b.n	80174a0 <_printf_float+0xbc>
 801765c:	002a      	movs	r2, r5
 801765e:	2301      	movs	r3, #1
 8017660:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8017662:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017664:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8017666:	321a      	adds	r2, #26
 8017668:	47b8      	blx	r7
 801766a:	3001      	adds	r0, #1
 801766c:	d100      	bne.n	8017670 <_printf_float+0x28c>
 801766e:	e715      	b.n	801749c <_printf_float+0xb8>
 8017670:	3401      	adds	r4, #1
 8017672:	e7e5      	b.n	8017640 <_printf_float+0x25c>
 8017674:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8017676:	2b00      	cmp	r3, #0
 8017678:	dc3a      	bgt.n	80176f0 <_printf_float+0x30c>
 801767a:	2301      	movs	r3, #1
 801767c:	4a1b      	ldr	r2, [pc, #108]	@ (80176ec <_printf_float+0x308>)
 801767e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8017680:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017682:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8017684:	47a0      	blx	r4
 8017686:	3001      	adds	r0, #1
 8017688:	d100      	bne.n	801768c <_printf_float+0x2a8>
 801768a:	e707      	b.n	801749c <_printf_float+0xb8>
 801768c:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801768e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8017690:	4333      	orrs	r3, r6
 8017692:	d102      	bne.n	801769a <_printf_float+0x2b6>
 8017694:	682b      	ldr	r3, [r5, #0]
 8017696:	07db      	lsls	r3, r3, #31
 8017698:	d5d5      	bpl.n	8017646 <_printf_float+0x262>
 801769a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801769c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801769e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80176a0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80176a2:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80176a4:	47a0      	blx	r4
 80176a6:	2300      	movs	r3, #0
 80176a8:	3001      	adds	r0, #1
 80176aa:	d100      	bne.n	80176ae <_printf_float+0x2ca>
 80176ac:	e6f6      	b.n	801749c <_printf_float+0xb8>
 80176ae:	930c      	str	r3, [sp, #48]	@ 0x30
 80176b0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80176b2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80176b4:	425b      	negs	r3, r3
 80176b6:	4293      	cmp	r3, r2
 80176b8:	dc01      	bgt.n	80176be <_printf_float+0x2da>
 80176ba:	0033      	movs	r3, r6
 80176bc:	e792      	b.n	80175e4 <_printf_float+0x200>
 80176be:	002a      	movs	r2, r5
 80176c0:	2301      	movs	r3, #1
 80176c2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80176c4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80176c6:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80176c8:	321a      	adds	r2, #26
 80176ca:	47a0      	blx	r4
 80176cc:	3001      	adds	r0, #1
 80176ce:	d100      	bne.n	80176d2 <_printf_float+0x2ee>
 80176d0:	e6e4      	b.n	801749c <_printf_float+0xb8>
 80176d2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80176d4:	3301      	adds	r3, #1
 80176d6:	e7ea      	b.n	80176ae <_printf_float+0x2ca>
 80176d8:	7fefffff 	.word	0x7fefffff
 80176dc:	0801baf0 	.word	0x0801baf0
 80176e0:	0801baf4 	.word	0x0801baf4
 80176e4:	0801baf8 	.word	0x0801baf8
 80176e8:	0801bafc 	.word	0x0801bafc
 80176ec:	0801bb00 	.word	0x0801bb00
 80176f0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80176f2:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 80176f4:	930c      	str	r3, [sp, #48]	@ 0x30
 80176f6:	429e      	cmp	r6, r3
 80176f8:	dd00      	ble.n	80176fc <_printf_float+0x318>
 80176fa:	001e      	movs	r6, r3
 80176fc:	2e00      	cmp	r6, #0
 80176fe:	dc31      	bgt.n	8017764 <_printf_float+0x380>
 8017700:	43f3      	mvns	r3, r6
 8017702:	2400      	movs	r4, #0
 8017704:	17db      	asrs	r3, r3, #31
 8017706:	4033      	ands	r3, r6
 8017708:	930e      	str	r3, [sp, #56]	@ 0x38
 801770a:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 801770c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801770e:	1af3      	subs	r3, r6, r3
 8017710:	42a3      	cmp	r3, r4
 8017712:	dc30      	bgt.n	8017776 <_printf_float+0x392>
 8017714:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8017716:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8017718:	429a      	cmp	r2, r3
 801771a:	dc38      	bgt.n	801778e <_printf_float+0x3aa>
 801771c:	682b      	ldr	r3, [r5, #0]
 801771e:	07db      	lsls	r3, r3, #31
 8017720:	d435      	bmi.n	801778e <_printf_float+0x3aa>
 8017722:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8017724:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017726:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8017728:	1b9b      	subs	r3, r3, r6
 801772a:	1b14      	subs	r4, r2, r4
 801772c:	429c      	cmp	r4, r3
 801772e:	dd00      	ble.n	8017732 <_printf_float+0x34e>
 8017730:	001c      	movs	r4, r3
 8017732:	2c00      	cmp	r4, #0
 8017734:	dc34      	bgt.n	80177a0 <_printf_float+0x3bc>
 8017736:	43e3      	mvns	r3, r4
 8017738:	2600      	movs	r6, #0
 801773a:	17db      	asrs	r3, r3, #31
 801773c:	401c      	ands	r4, r3
 801773e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8017740:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8017742:	1ad3      	subs	r3, r2, r3
 8017744:	1b1b      	subs	r3, r3, r4
 8017746:	42b3      	cmp	r3, r6
 8017748:	dc00      	bgt.n	801774c <_printf_float+0x368>
 801774a:	e77c      	b.n	8017646 <_printf_float+0x262>
 801774c:	002a      	movs	r2, r5
 801774e:	2301      	movs	r3, #1
 8017750:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8017752:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017754:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8017756:	321a      	adds	r2, #26
 8017758:	47b8      	blx	r7
 801775a:	3001      	adds	r0, #1
 801775c:	d100      	bne.n	8017760 <_printf_float+0x37c>
 801775e:	e69d      	b.n	801749c <_printf_float+0xb8>
 8017760:	3601      	adds	r6, #1
 8017762:	e7ec      	b.n	801773e <_printf_float+0x35a>
 8017764:	0033      	movs	r3, r6
 8017766:	003a      	movs	r2, r7
 8017768:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801776a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801776c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801776e:	47a0      	blx	r4
 8017770:	3001      	adds	r0, #1
 8017772:	d1c5      	bne.n	8017700 <_printf_float+0x31c>
 8017774:	e692      	b.n	801749c <_printf_float+0xb8>
 8017776:	002a      	movs	r2, r5
 8017778:	2301      	movs	r3, #1
 801777a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801777c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801777e:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8017780:	321a      	adds	r2, #26
 8017782:	47b0      	blx	r6
 8017784:	3001      	adds	r0, #1
 8017786:	d100      	bne.n	801778a <_printf_float+0x3a6>
 8017788:	e688      	b.n	801749c <_printf_float+0xb8>
 801778a:	3401      	adds	r4, #1
 801778c:	e7bd      	b.n	801770a <_printf_float+0x326>
 801778e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017790:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8017792:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8017794:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017796:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8017798:	47a0      	blx	r4
 801779a:	3001      	adds	r0, #1
 801779c:	d1c1      	bne.n	8017722 <_printf_float+0x33e>
 801779e:	e67d      	b.n	801749c <_printf_float+0xb8>
 80177a0:	19ba      	adds	r2, r7, r6
 80177a2:	0023      	movs	r3, r4
 80177a4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80177a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80177a8:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80177aa:	47b0      	blx	r6
 80177ac:	3001      	adds	r0, #1
 80177ae:	d1c2      	bne.n	8017736 <_printf_float+0x352>
 80177b0:	e674      	b.n	801749c <_printf_float+0xb8>
 80177b2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80177b4:	930c      	str	r3, [sp, #48]	@ 0x30
 80177b6:	2b01      	cmp	r3, #1
 80177b8:	dc02      	bgt.n	80177c0 <_printf_float+0x3dc>
 80177ba:	2301      	movs	r3, #1
 80177bc:	421a      	tst	r2, r3
 80177be:	d039      	beq.n	8017834 <_printf_float+0x450>
 80177c0:	2301      	movs	r3, #1
 80177c2:	003a      	movs	r2, r7
 80177c4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80177c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80177c8:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80177ca:	47b0      	blx	r6
 80177cc:	3001      	adds	r0, #1
 80177ce:	d100      	bne.n	80177d2 <_printf_float+0x3ee>
 80177d0:	e664      	b.n	801749c <_printf_float+0xb8>
 80177d2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80177d4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80177d6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80177d8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80177da:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80177dc:	47b0      	blx	r6
 80177de:	3001      	adds	r0, #1
 80177e0:	d100      	bne.n	80177e4 <_printf_float+0x400>
 80177e2:	e65b      	b.n	801749c <_printf_float+0xb8>
 80177e4:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 80177e6:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 80177e8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80177ea:	2200      	movs	r2, #0
 80177ec:	3b01      	subs	r3, #1
 80177ee:	930c      	str	r3, [sp, #48]	@ 0x30
 80177f0:	2300      	movs	r3, #0
 80177f2:	f7e8 fe2b 	bl	800044c <__aeabi_dcmpeq>
 80177f6:	2800      	cmp	r0, #0
 80177f8:	d11a      	bne.n	8017830 <_printf_float+0x44c>
 80177fa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80177fc:	1c7a      	adds	r2, r7, #1
 80177fe:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8017800:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017802:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8017804:	47b0      	blx	r6
 8017806:	3001      	adds	r0, #1
 8017808:	d10e      	bne.n	8017828 <_printf_float+0x444>
 801780a:	e647      	b.n	801749c <_printf_float+0xb8>
 801780c:	002a      	movs	r2, r5
 801780e:	2301      	movs	r3, #1
 8017810:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8017812:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017814:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8017816:	321a      	adds	r2, #26
 8017818:	47b8      	blx	r7
 801781a:	3001      	adds	r0, #1
 801781c:	d100      	bne.n	8017820 <_printf_float+0x43c>
 801781e:	e63d      	b.n	801749c <_printf_float+0xb8>
 8017820:	3601      	adds	r6, #1
 8017822:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017824:	429e      	cmp	r6, r3
 8017826:	dbf1      	blt.n	801780c <_printf_float+0x428>
 8017828:	002a      	movs	r2, r5
 801782a:	0023      	movs	r3, r4
 801782c:	3250      	adds	r2, #80	@ 0x50
 801782e:	e6da      	b.n	80175e6 <_printf_float+0x202>
 8017830:	2600      	movs	r6, #0
 8017832:	e7f6      	b.n	8017822 <_printf_float+0x43e>
 8017834:	003a      	movs	r2, r7
 8017836:	e7e2      	b.n	80177fe <_printf_float+0x41a>
 8017838:	002a      	movs	r2, r5
 801783a:	2301      	movs	r3, #1
 801783c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801783e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017840:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8017842:	3219      	adds	r2, #25
 8017844:	47b0      	blx	r6
 8017846:	3001      	adds	r0, #1
 8017848:	d100      	bne.n	801784c <_printf_float+0x468>
 801784a:	e627      	b.n	801749c <_printf_float+0xb8>
 801784c:	3401      	adds	r4, #1
 801784e:	68eb      	ldr	r3, [r5, #12]
 8017850:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8017852:	1a9b      	subs	r3, r3, r2
 8017854:	42a3      	cmp	r3, r4
 8017856:	dcef      	bgt.n	8017838 <_printf_float+0x454>
 8017858:	e6f9      	b.n	801764e <_printf_float+0x26a>
 801785a:	2400      	movs	r4, #0
 801785c:	e7f7      	b.n	801784e <_printf_float+0x46a>
 801785e:	46c0      	nop			@ (mov r8, r8)

08017860 <_printf_common>:
 8017860:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017862:	0016      	movs	r6, r2
 8017864:	9301      	str	r3, [sp, #4]
 8017866:	688a      	ldr	r2, [r1, #8]
 8017868:	690b      	ldr	r3, [r1, #16]
 801786a:	000c      	movs	r4, r1
 801786c:	9000      	str	r0, [sp, #0]
 801786e:	4293      	cmp	r3, r2
 8017870:	da00      	bge.n	8017874 <_printf_common+0x14>
 8017872:	0013      	movs	r3, r2
 8017874:	0022      	movs	r2, r4
 8017876:	6033      	str	r3, [r6, #0]
 8017878:	3243      	adds	r2, #67	@ 0x43
 801787a:	7812      	ldrb	r2, [r2, #0]
 801787c:	2a00      	cmp	r2, #0
 801787e:	d001      	beq.n	8017884 <_printf_common+0x24>
 8017880:	3301      	adds	r3, #1
 8017882:	6033      	str	r3, [r6, #0]
 8017884:	6823      	ldr	r3, [r4, #0]
 8017886:	069b      	lsls	r3, r3, #26
 8017888:	d502      	bpl.n	8017890 <_printf_common+0x30>
 801788a:	6833      	ldr	r3, [r6, #0]
 801788c:	3302      	adds	r3, #2
 801788e:	6033      	str	r3, [r6, #0]
 8017890:	6822      	ldr	r2, [r4, #0]
 8017892:	2306      	movs	r3, #6
 8017894:	0015      	movs	r5, r2
 8017896:	401d      	ands	r5, r3
 8017898:	421a      	tst	r2, r3
 801789a:	d027      	beq.n	80178ec <_printf_common+0x8c>
 801789c:	0023      	movs	r3, r4
 801789e:	3343      	adds	r3, #67	@ 0x43
 80178a0:	781b      	ldrb	r3, [r3, #0]
 80178a2:	1e5a      	subs	r2, r3, #1
 80178a4:	4193      	sbcs	r3, r2
 80178a6:	6822      	ldr	r2, [r4, #0]
 80178a8:	0692      	lsls	r2, r2, #26
 80178aa:	d430      	bmi.n	801790e <_printf_common+0xae>
 80178ac:	0022      	movs	r2, r4
 80178ae:	9901      	ldr	r1, [sp, #4]
 80178b0:	9800      	ldr	r0, [sp, #0]
 80178b2:	9d08      	ldr	r5, [sp, #32]
 80178b4:	3243      	adds	r2, #67	@ 0x43
 80178b6:	47a8      	blx	r5
 80178b8:	3001      	adds	r0, #1
 80178ba:	d025      	beq.n	8017908 <_printf_common+0xa8>
 80178bc:	2206      	movs	r2, #6
 80178be:	6823      	ldr	r3, [r4, #0]
 80178c0:	2500      	movs	r5, #0
 80178c2:	4013      	ands	r3, r2
 80178c4:	2b04      	cmp	r3, #4
 80178c6:	d105      	bne.n	80178d4 <_printf_common+0x74>
 80178c8:	6833      	ldr	r3, [r6, #0]
 80178ca:	68e5      	ldr	r5, [r4, #12]
 80178cc:	1aed      	subs	r5, r5, r3
 80178ce:	43eb      	mvns	r3, r5
 80178d0:	17db      	asrs	r3, r3, #31
 80178d2:	401d      	ands	r5, r3
 80178d4:	68a3      	ldr	r3, [r4, #8]
 80178d6:	6922      	ldr	r2, [r4, #16]
 80178d8:	4293      	cmp	r3, r2
 80178da:	dd01      	ble.n	80178e0 <_printf_common+0x80>
 80178dc:	1a9b      	subs	r3, r3, r2
 80178de:	18ed      	adds	r5, r5, r3
 80178e0:	2600      	movs	r6, #0
 80178e2:	42b5      	cmp	r5, r6
 80178e4:	d120      	bne.n	8017928 <_printf_common+0xc8>
 80178e6:	2000      	movs	r0, #0
 80178e8:	e010      	b.n	801790c <_printf_common+0xac>
 80178ea:	3501      	adds	r5, #1
 80178ec:	68e3      	ldr	r3, [r4, #12]
 80178ee:	6832      	ldr	r2, [r6, #0]
 80178f0:	1a9b      	subs	r3, r3, r2
 80178f2:	42ab      	cmp	r3, r5
 80178f4:	ddd2      	ble.n	801789c <_printf_common+0x3c>
 80178f6:	0022      	movs	r2, r4
 80178f8:	2301      	movs	r3, #1
 80178fa:	9901      	ldr	r1, [sp, #4]
 80178fc:	9800      	ldr	r0, [sp, #0]
 80178fe:	9f08      	ldr	r7, [sp, #32]
 8017900:	3219      	adds	r2, #25
 8017902:	47b8      	blx	r7
 8017904:	3001      	adds	r0, #1
 8017906:	d1f0      	bne.n	80178ea <_printf_common+0x8a>
 8017908:	2001      	movs	r0, #1
 801790a:	4240      	negs	r0, r0
 801790c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801790e:	2030      	movs	r0, #48	@ 0x30
 8017910:	18e1      	adds	r1, r4, r3
 8017912:	3143      	adds	r1, #67	@ 0x43
 8017914:	7008      	strb	r0, [r1, #0]
 8017916:	0021      	movs	r1, r4
 8017918:	1c5a      	adds	r2, r3, #1
 801791a:	3145      	adds	r1, #69	@ 0x45
 801791c:	7809      	ldrb	r1, [r1, #0]
 801791e:	18a2      	adds	r2, r4, r2
 8017920:	3243      	adds	r2, #67	@ 0x43
 8017922:	3302      	adds	r3, #2
 8017924:	7011      	strb	r1, [r2, #0]
 8017926:	e7c1      	b.n	80178ac <_printf_common+0x4c>
 8017928:	0022      	movs	r2, r4
 801792a:	2301      	movs	r3, #1
 801792c:	9901      	ldr	r1, [sp, #4]
 801792e:	9800      	ldr	r0, [sp, #0]
 8017930:	9f08      	ldr	r7, [sp, #32]
 8017932:	321a      	adds	r2, #26
 8017934:	47b8      	blx	r7
 8017936:	3001      	adds	r0, #1
 8017938:	d0e6      	beq.n	8017908 <_printf_common+0xa8>
 801793a:	3601      	adds	r6, #1
 801793c:	e7d1      	b.n	80178e2 <_printf_common+0x82>
	...

08017940 <_printf_i>:
 8017940:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017942:	b08b      	sub	sp, #44	@ 0x2c
 8017944:	9206      	str	r2, [sp, #24]
 8017946:	000a      	movs	r2, r1
 8017948:	3243      	adds	r2, #67	@ 0x43
 801794a:	9307      	str	r3, [sp, #28]
 801794c:	9005      	str	r0, [sp, #20]
 801794e:	9203      	str	r2, [sp, #12]
 8017950:	7e0a      	ldrb	r2, [r1, #24]
 8017952:	000c      	movs	r4, r1
 8017954:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8017956:	2a78      	cmp	r2, #120	@ 0x78
 8017958:	d809      	bhi.n	801796e <_printf_i+0x2e>
 801795a:	2a62      	cmp	r2, #98	@ 0x62
 801795c:	d80b      	bhi.n	8017976 <_printf_i+0x36>
 801795e:	2a00      	cmp	r2, #0
 8017960:	d100      	bne.n	8017964 <_printf_i+0x24>
 8017962:	e0bc      	b.n	8017ade <_printf_i+0x19e>
 8017964:	497b      	ldr	r1, [pc, #492]	@ (8017b54 <_printf_i+0x214>)
 8017966:	9104      	str	r1, [sp, #16]
 8017968:	2a58      	cmp	r2, #88	@ 0x58
 801796a:	d100      	bne.n	801796e <_printf_i+0x2e>
 801796c:	e090      	b.n	8017a90 <_printf_i+0x150>
 801796e:	0025      	movs	r5, r4
 8017970:	3542      	adds	r5, #66	@ 0x42
 8017972:	702a      	strb	r2, [r5, #0]
 8017974:	e022      	b.n	80179bc <_printf_i+0x7c>
 8017976:	0010      	movs	r0, r2
 8017978:	3863      	subs	r0, #99	@ 0x63
 801797a:	2815      	cmp	r0, #21
 801797c:	d8f7      	bhi.n	801796e <_printf_i+0x2e>
 801797e:	f7e8 fbd5 	bl	800012c <__gnu_thumb1_case_shi>
 8017982:	0016      	.short	0x0016
 8017984:	fff6001f 	.word	0xfff6001f
 8017988:	fff6fff6 	.word	0xfff6fff6
 801798c:	001ffff6 	.word	0x001ffff6
 8017990:	fff6fff6 	.word	0xfff6fff6
 8017994:	fff6fff6 	.word	0xfff6fff6
 8017998:	003600a1 	.word	0x003600a1
 801799c:	fff60080 	.word	0xfff60080
 80179a0:	00b2fff6 	.word	0x00b2fff6
 80179a4:	0036fff6 	.word	0x0036fff6
 80179a8:	fff6fff6 	.word	0xfff6fff6
 80179ac:	0084      	.short	0x0084
 80179ae:	0025      	movs	r5, r4
 80179b0:	681a      	ldr	r2, [r3, #0]
 80179b2:	3542      	adds	r5, #66	@ 0x42
 80179b4:	1d11      	adds	r1, r2, #4
 80179b6:	6019      	str	r1, [r3, #0]
 80179b8:	6813      	ldr	r3, [r2, #0]
 80179ba:	702b      	strb	r3, [r5, #0]
 80179bc:	2301      	movs	r3, #1
 80179be:	e0a0      	b.n	8017b02 <_printf_i+0x1c2>
 80179c0:	6818      	ldr	r0, [r3, #0]
 80179c2:	6809      	ldr	r1, [r1, #0]
 80179c4:	1d02      	adds	r2, r0, #4
 80179c6:	060d      	lsls	r5, r1, #24
 80179c8:	d50b      	bpl.n	80179e2 <_printf_i+0xa2>
 80179ca:	6806      	ldr	r6, [r0, #0]
 80179cc:	601a      	str	r2, [r3, #0]
 80179ce:	2e00      	cmp	r6, #0
 80179d0:	da03      	bge.n	80179da <_printf_i+0x9a>
 80179d2:	232d      	movs	r3, #45	@ 0x2d
 80179d4:	9a03      	ldr	r2, [sp, #12]
 80179d6:	4276      	negs	r6, r6
 80179d8:	7013      	strb	r3, [r2, #0]
 80179da:	4b5e      	ldr	r3, [pc, #376]	@ (8017b54 <_printf_i+0x214>)
 80179dc:	270a      	movs	r7, #10
 80179de:	9304      	str	r3, [sp, #16]
 80179e0:	e018      	b.n	8017a14 <_printf_i+0xd4>
 80179e2:	6806      	ldr	r6, [r0, #0]
 80179e4:	601a      	str	r2, [r3, #0]
 80179e6:	0649      	lsls	r1, r1, #25
 80179e8:	d5f1      	bpl.n	80179ce <_printf_i+0x8e>
 80179ea:	b236      	sxth	r6, r6
 80179ec:	e7ef      	b.n	80179ce <_printf_i+0x8e>
 80179ee:	6808      	ldr	r0, [r1, #0]
 80179f0:	6819      	ldr	r1, [r3, #0]
 80179f2:	c940      	ldmia	r1!, {r6}
 80179f4:	0605      	lsls	r5, r0, #24
 80179f6:	d402      	bmi.n	80179fe <_printf_i+0xbe>
 80179f8:	0640      	lsls	r0, r0, #25
 80179fa:	d500      	bpl.n	80179fe <_printf_i+0xbe>
 80179fc:	b2b6      	uxth	r6, r6
 80179fe:	6019      	str	r1, [r3, #0]
 8017a00:	4b54      	ldr	r3, [pc, #336]	@ (8017b54 <_printf_i+0x214>)
 8017a02:	270a      	movs	r7, #10
 8017a04:	9304      	str	r3, [sp, #16]
 8017a06:	2a6f      	cmp	r2, #111	@ 0x6f
 8017a08:	d100      	bne.n	8017a0c <_printf_i+0xcc>
 8017a0a:	3f02      	subs	r7, #2
 8017a0c:	0023      	movs	r3, r4
 8017a0e:	2200      	movs	r2, #0
 8017a10:	3343      	adds	r3, #67	@ 0x43
 8017a12:	701a      	strb	r2, [r3, #0]
 8017a14:	6863      	ldr	r3, [r4, #4]
 8017a16:	60a3      	str	r3, [r4, #8]
 8017a18:	2b00      	cmp	r3, #0
 8017a1a:	db03      	blt.n	8017a24 <_printf_i+0xe4>
 8017a1c:	2104      	movs	r1, #4
 8017a1e:	6822      	ldr	r2, [r4, #0]
 8017a20:	438a      	bics	r2, r1
 8017a22:	6022      	str	r2, [r4, #0]
 8017a24:	2e00      	cmp	r6, #0
 8017a26:	d102      	bne.n	8017a2e <_printf_i+0xee>
 8017a28:	9d03      	ldr	r5, [sp, #12]
 8017a2a:	2b00      	cmp	r3, #0
 8017a2c:	d00c      	beq.n	8017a48 <_printf_i+0x108>
 8017a2e:	9d03      	ldr	r5, [sp, #12]
 8017a30:	0030      	movs	r0, r6
 8017a32:	0039      	movs	r1, r7
 8017a34:	f7e8 fc0a 	bl	800024c <__aeabi_uidivmod>
 8017a38:	9b04      	ldr	r3, [sp, #16]
 8017a3a:	3d01      	subs	r5, #1
 8017a3c:	5c5b      	ldrb	r3, [r3, r1]
 8017a3e:	702b      	strb	r3, [r5, #0]
 8017a40:	0033      	movs	r3, r6
 8017a42:	0006      	movs	r6, r0
 8017a44:	429f      	cmp	r7, r3
 8017a46:	d9f3      	bls.n	8017a30 <_printf_i+0xf0>
 8017a48:	2f08      	cmp	r7, #8
 8017a4a:	d109      	bne.n	8017a60 <_printf_i+0x120>
 8017a4c:	6823      	ldr	r3, [r4, #0]
 8017a4e:	07db      	lsls	r3, r3, #31
 8017a50:	d506      	bpl.n	8017a60 <_printf_i+0x120>
 8017a52:	6862      	ldr	r2, [r4, #4]
 8017a54:	6923      	ldr	r3, [r4, #16]
 8017a56:	429a      	cmp	r2, r3
 8017a58:	dc02      	bgt.n	8017a60 <_printf_i+0x120>
 8017a5a:	2330      	movs	r3, #48	@ 0x30
 8017a5c:	3d01      	subs	r5, #1
 8017a5e:	702b      	strb	r3, [r5, #0]
 8017a60:	9b03      	ldr	r3, [sp, #12]
 8017a62:	1b5b      	subs	r3, r3, r5
 8017a64:	6123      	str	r3, [r4, #16]
 8017a66:	9b07      	ldr	r3, [sp, #28]
 8017a68:	0021      	movs	r1, r4
 8017a6a:	9300      	str	r3, [sp, #0]
 8017a6c:	9805      	ldr	r0, [sp, #20]
 8017a6e:	9b06      	ldr	r3, [sp, #24]
 8017a70:	aa09      	add	r2, sp, #36	@ 0x24
 8017a72:	f7ff fef5 	bl	8017860 <_printf_common>
 8017a76:	3001      	adds	r0, #1
 8017a78:	d148      	bne.n	8017b0c <_printf_i+0x1cc>
 8017a7a:	2001      	movs	r0, #1
 8017a7c:	4240      	negs	r0, r0
 8017a7e:	b00b      	add	sp, #44	@ 0x2c
 8017a80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017a82:	2220      	movs	r2, #32
 8017a84:	6809      	ldr	r1, [r1, #0]
 8017a86:	430a      	orrs	r2, r1
 8017a88:	6022      	str	r2, [r4, #0]
 8017a8a:	2278      	movs	r2, #120	@ 0x78
 8017a8c:	4932      	ldr	r1, [pc, #200]	@ (8017b58 <_printf_i+0x218>)
 8017a8e:	9104      	str	r1, [sp, #16]
 8017a90:	0021      	movs	r1, r4
 8017a92:	3145      	adds	r1, #69	@ 0x45
 8017a94:	700a      	strb	r2, [r1, #0]
 8017a96:	6819      	ldr	r1, [r3, #0]
 8017a98:	6822      	ldr	r2, [r4, #0]
 8017a9a:	c940      	ldmia	r1!, {r6}
 8017a9c:	0610      	lsls	r0, r2, #24
 8017a9e:	d402      	bmi.n	8017aa6 <_printf_i+0x166>
 8017aa0:	0650      	lsls	r0, r2, #25
 8017aa2:	d500      	bpl.n	8017aa6 <_printf_i+0x166>
 8017aa4:	b2b6      	uxth	r6, r6
 8017aa6:	6019      	str	r1, [r3, #0]
 8017aa8:	07d3      	lsls	r3, r2, #31
 8017aaa:	d502      	bpl.n	8017ab2 <_printf_i+0x172>
 8017aac:	2320      	movs	r3, #32
 8017aae:	4313      	orrs	r3, r2
 8017ab0:	6023      	str	r3, [r4, #0]
 8017ab2:	2e00      	cmp	r6, #0
 8017ab4:	d001      	beq.n	8017aba <_printf_i+0x17a>
 8017ab6:	2710      	movs	r7, #16
 8017ab8:	e7a8      	b.n	8017a0c <_printf_i+0xcc>
 8017aba:	2220      	movs	r2, #32
 8017abc:	6823      	ldr	r3, [r4, #0]
 8017abe:	4393      	bics	r3, r2
 8017ac0:	6023      	str	r3, [r4, #0]
 8017ac2:	e7f8      	b.n	8017ab6 <_printf_i+0x176>
 8017ac4:	681a      	ldr	r2, [r3, #0]
 8017ac6:	680d      	ldr	r5, [r1, #0]
 8017ac8:	1d10      	adds	r0, r2, #4
 8017aca:	6949      	ldr	r1, [r1, #20]
 8017acc:	6018      	str	r0, [r3, #0]
 8017ace:	6813      	ldr	r3, [r2, #0]
 8017ad0:	062e      	lsls	r6, r5, #24
 8017ad2:	d501      	bpl.n	8017ad8 <_printf_i+0x198>
 8017ad4:	6019      	str	r1, [r3, #0]
 8017ad6:	e002      	b.n	8017ade <_printf_i+0x19e>
 8017ad8:	066d      	lsls	r5, r5, #25
 8017ada:	d5fb      	bpl.n	8017ad4 <_printf_i+0x194>
 8017adc:	8019      	strh	r1, [r3, #0]
 8017ade:	2300      	movs	r3, #0
 8017ae0:	9d03      	ldr	r5, [sp, #12]
 8017ae2:	6123      	str	r3, [r4, #16]
 8017ae4:	e7bf      	b.n	8017a66 <_printf_i+0x126>
 8017ae6:	681a      	ldr	r2, [r3, #0]
 8017ae8:	1d11      	adds	r1, r2, #4
 8017aea:	6019      	str	r1, [r3, #0]
 8017aec:	6815      	ldr	r5, [r2, #0]
 8017aee:	2100      	movs	r1, #0
 8017af0:	0028      	movs	r0, r5
 8017af2:	6862      	ldr	r2, [r4, #4]
 8017af4:	f000 fa69 	bl	8017fca <memchr>
 8017af8:	2800      	cmp	r0, #0
 8017afa:	d001      	beq.n	8017b00 <_printf_i+0x1c0>
 8017afc:	1b40      	subs	r0, r0, r5
 8017afe:	6060      	str	r0, [r4, #4]
 8017b00:	6863      	ldr	r3, [r4, #4]
 8017b02:	6123      	str	r3, [r4, #16]
 8017b04:	2300      	movs	r3, #0
 8017b06:	9a03      	ldr	r2, [sp, #12]
 8017b08:	7013      	strb	r3, [r2, #0]
 8017b0a:	e7ac      	b.n	8017a66 <_printf_i+0x126>
 8017b0c:	002a      	movs	r2, r5
 8017b0e:	6923      	ldr	r3, [r4, #16]
 8017b10:	9906      	ldr	r1, [sp, #24]
 8017b12:	9805      	ldr	r0, [sp, #20]
 8017b14:	9d07      	ldr	r5, [sp, #28]
 8017b16:	47a8      	blx	r5
 8017b18:	3001      	adds	r0, #1
 8017b1a:	d0ae      	beq.n	8017a7a <_printf_i+0x13a>
 8017b1c:	6823      	ldr	r3, [r4, #0]
 8017b1e:	079b      	lsls	r3, r3, #30
 8017b20:	d415      	bmi.n	8017b4e <_printf_i+0x20e>
 8017b22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017b24:	68e0      	ldr	r0, [r4, #12]
 8017b26:	4298      	cmp	r0, r3
 8017b28:	daa9      	bge.n	8017a7e <_printf_i+0x13e>
 8017b2a:	0018      	movs	r0, r3
 8017b2c:	e7a7      	b.n	8017a7e <_printf_i+0x13e>
 8017b2e:	0022      	movs	r2, r4
 8017b30:	2301      	movs	r3, #1
 8017b32:	9906      	ldr	r1, [sp, #24]
 8017b34:	9805      	ldr	r0, [sp, #20]
 8017b36:	9e07      	ldr	r6, [sp, #28]
 8017b38:	3219      	adds	r2, #25
 8017b3a:	47b0      	blx	r6
 8017b3c:	3001      	adds	r0, #1
 8017b3e:	d09c      	beq.n	8017a7a <_printf_i+0x13a>
 8017b40:	3501      	adds	r5, #1
 8017b42:	68e3      	ldr	r3, [r4, #12]
 8017b44:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017b46:	1a9b      	subs	r3, r3, r2
 8017b48:	42ab      	cmp	r3, r5
 8017b4a:	dcf0      	bgt.n	8017b2e <_printf_i+0x1ee>
 8017b4c:	e7e9      	b.n	8017b22 <_printf_i+0x1e2>
 8017b4e:	2500      	movs	r5, #0
 8017b50:	e7f7      	b.n	8017b42 <_printf_i+0x202>
 8017b52:	46c0      	nop			@ (mov r8, r8)
 8017b54:	0801bb02 	.word	0x0801bb02
 8017b58:	0801bb13 	.word	0x0801bb13

08017b5c <std>:
 8017b5c:	2300      	movs	r3, #0
 8017b5e:	b510      	push	{r4, lr}
 8017b60:	0004      	movs	r4, r0
 8017b62:	6003      	str	r3, [r0, #0]
 8017b64:	6043      	str	r3, [r0, #4]
 8017b66:	6083      	str	r3, [r0, #8]
 8017b68:	8181      	strh	r1, [r0, #12]
 8017b6a:	6643      	str	r3, [r0, #100]	@ 0x64
 8017b6c:	81c2      	strh	r2, [r0, #14]
 8017b6e:	6103      	str	r3, [r0, #16]
 8017b70:	6143      	str	r3, [r0, #20]
 8017b72:	6183      	str	r3, [r0, #24]
 8017b74:	0019      	movs	r1, r3
 8017b76:	2208      	movs	r2, #8
 8017b78:	305c      	adds	r0, #92	@ 0x5c
 8017b7a:	f000 f967 	bl	8017e4c <memset>
 8017b7e:	4b0b      	ldr	r3, [pc, #44]	@ (8017bac <std+0x50>)
 8017b80:	6224      	str	r4, [r4, #32]
 8017b82:	6263      	str	r3, [r4, #36]	@ 0x24
 8017b84:	4b0a      	ldr	r3, [pc, #40]	@ (8017bb0 <std+0x54>)
 8017b86:	62a3      	str	r3, [r4, #40]	@ 0x28
 8017b88:	4b0a      	ldr	r3, [pc, #40]	@ (8017bb4 <std+0x58>)
 8017b8a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8017b8c:	4b0a      	ldr	r3, [pc, #40]	@ (8017bb8 <std+0x5c>)
 8017b8e:	6323      	str	r3, [r4, #48]	@ 0x30
 8017b90:	4b0a      	ldr	r3, [pc, #40]	@ (8017bbc <std+0x60>)
 8017b92:	429c      	cmp	r4, r3
 8017b94:	d005      	beq.n	8017ba2 <std+0x46>
 8017b96:	4b0a      	ldr	r3, [pc, #40]	@ (8017bc0 <std+0x64>)
 8017b98:	429c      	cmp	r4, r3
 8017b9a:	d002      	beq.n	8017ba2 <std+0x46>
 8017b9c:	4b09      	ldr	r3, [pc, #36]	@ (8017bc4 <std+0x68>)
 8017b9e:	429c      	cmp	r4, r3
 8017ba0:	d103      	bne.n	8017baa <std+0x4e>
 8017ba2:	0020      	movs	r0, r4
 8017ba4:	3058      	adds	r0, #88	@ 0x58
 8017ba6:	f000 fa0d 	bl	8017fc4 <__retarget_lock_init_recursive>
 8017baa:	bd10      	pop	{r4, pc}
 8017bac:	08017d45 	.word	0x08017d45
 8017bb0:	08017d6d 	.word	0x08017d6d
 8017bb4:	08017da5 	.word	0x08017da5
 8017bb8:	08017dd1 	.word	0x08017dd1
 8017bbc:	20003dd8 	.word	0x20003dd8
 8017bc0:	20003e40 	.word	0x20003e40
 8017bc4:	20003ea8 	.word	0x20003ea8

08017bc8 <stdio_exit_handler>:
 8017bc8:	b510      	push	{r4, lr}
 8017bca:	4a03      	ldr	r2, [pc, #12]	@ (8017bd8 <stdio_exit_handler+0x10>)
 8017bcc:	4903      	ldr	r1, [pc, #12]	@ (8017bdc <stdio_exit_handler+0x14>)
 8017bce:	4804      	ldr	r0, [pc, #16]	@ (8017be0 <stdio_exit_handler+0x18>)
 8017bd0:	f000 f86c 	bl	8017cac <_fwalk_sglue>
 8017bd4:	bd10      	pop	{r4, pc}
 8017bd6:	46c0      	nop			@ (mov r8, r8)
 8017bd8:	20000230 	.word	0x20000230
 8017bdc:	08019c9d 	.word	0x08019c9d
 8017be0:	20000240 	.word	0x20000240

08017be4 <cleanup_stdio>:
 8017be4:	6841      	ldr	r1, [r0, #4]
 8017be6:	4b0b      	ldr	r3, [pc, #44]	@ (8017c14 <cleanup_stdio+0x30>)
 8017be8:	b510      	push	{r4, lr}
 8017bea:	0004      	movs	r4, r0
 8017bec:	4299      	cmp	r1, r3
 8017bee:	d001      	beq.n	8017bf4 <cleanup_stdio+0x10>
 8017bf0:	f002 f854 	bl	8019c9c <_fflush_r>
 8017bf4:	68a1      	ldr	r1, [r4, #8]
 8017bf6:	4b08      	ldr	r3, [pc, #32]	@ (8017c18 <cleanup_stdio+0x34>)
 8017bf8:	4299      	cmp	r1, r3
 8017bfa:	d002      	beq.n	8017c02 <cleanup_stdio+0x1e>
 8017bfc:	0020      	movs	r0, r4
 8017bfe:	f002 f84d 	bl	8019c9c <_fflush_r>
 8017c02:	68e1      	ldr	r1, [r4, #12]
 8017c04:	4b05      	ldr	r3, [pc, #20]	@ (8017c1c <cleanup_stdio+0x38>)
 8017c06:	4299      	cmp	r1, r3
 8017c08:	d002      	beq.n	8017c10 <cleanup_stdio+0x2c>
 8017c0a:	0020      	movs	r0, r4
 8017c0c:	f002 f846 	bl	8019c9c <_fflush_r>
 8017c10:	bd10      	pop	{r4, pc}
 8017c12:	46c0      	nop			@ (mov r8, r8)
 8017c14:	20003dd8 	.word	0x20003dd8
 8017c18:	20003e40 	.word	0x20003e40
 8017c1c:	20003ea8 	.word	0x20003ea8

08017c20 <global_stdio_init.part.0>:
 8017c20:	b510      	push	{r4, lr}
 8017c22:	4b09      	ldr	r3, [pc, #36]	@ (8017c48 <global_stdio_init.part.0+0x28>)
 8017c24:	4a09      	ldr	r2, [pc, #36]	@ (8017c4c <global_stdio_init.part.0+0x2c>)
 8017c26:	2104      	movs	r1, #4
 8017c28:	601a      	str	r2, [r3, #0]
 8017c2a:	4809      	ldr	r0, [pc, #36]	@ (8017c50 <global_stdio_init.part.0+0x30>)
 8017c2c:	2200      	movs	r2, #0
 8017c2e:	f7ff ff95 	bl	8017b5c <std>
 8017c32:	2201      	movs	r2, #1
 8017c34:	2109      	movs	r1, #9
 8017c36:	4807      	ldr	r0, [pc, #28]	@ (8017c54 <global_stdio_init.part.0+0x34>)
 8017c38:	f7ff ff90 	bl	8017b5c <std>
 8017c3c:	2202      	movs	r2, #2
 8017c3e:	2112      	movs	r1, #18
 8017c40:	4805      	ldr	r0, [pc, #20]	@ (8017c58 <global_stdio_init.part.0+0x38>)
 8017c42:	f7ff ff8b 	bl	8017b5c <std>
 8017c46:	bd10      	pop	{r4, pc}
 8017c48:	20003f10 	.word	0x20003f10
 8017c4c:	08017bc9 	.word	0x08017bc9
 8017c50:	20003dd8 	.word	0x20003dd8
 8017c54:	20003e40 	.word	0x20003e40
 8017c58:	20003ea8 	.word	0x20003ea8

08017c5c <__sfp_lock_acquire>:
 8017c5c:	b510      	push	{r4, lr}
 8017c5e:	4802      	ldr	r0, [pc, #8]	@ (8017c68 <__sfp_lock_acquire+0xc>)
 8017c60:	f000 f9b1 	bl	8017fc6 <__retarget_lock_acquire_recursive>
 8017c64:	bd10      	pop	{r4, pc}
 8017c66:	46c0      	nop			@ (mov r8, r8)
 8017c68:	20003f19 	.word	0x20003f19

08017c6c <__sfp_lock_release>:
 8017c6c:	b510      	push	{r4, lr}
 8017c6e:	4802      	ldr	r0, [pc, #8]	@ (8017c78 <__sfp_lock_release+0xc>)
 8017c70:	f000 f9aa 	bl	8017fc8 <__retarget_lock_release_recursive>
 8017c74:	bd10      	pop	{r4, pc}
 8017c76:	46c0      	nop			@ (mov r8, r8)
 8017c78:	20003f19 	.word	0x20003f19

08017c7c <__sinit>:
 8017c7c:	b510      	push	{r4, lr}
 8017c7e:	0004      	movs	r4, r0
 8017c80:	f7ff ffec 	bl	8017c5c <__sfp_lock_acquire>
 8017c84:	6a23      	ldr	r3, [r4, #32]
 8017c86:	2b00      	cmp	r3, #0
 8017c88:	d002      	beq.n	8017c90 <__sinit+0x14>
 8017c8a:	f7ff ffef 	bl	8017c6c <__sfp_lock_release>
 8017c8e:	bd10      	pop	{r4, pc}
 8017c90:	4b04      	ldr	r3, [pc, #16]	@ (8017ca4 <__sinit+0x28>)
 8017c92:	6223      	str	r3, [r4, #32]
 8017c94:	4b04      	ldr	r3, [pc, #16]	@ (8017ca8 <__sinit+0x2c>)
 8017c96:	681b      	ldr	r3, [r3, #0]
 8017c98:	2b00      	cmp	r3, #0
 8017c9a:	d1f6      	bne.n	8017c8a <__sinit+0xe>
 8017c9c:	f7ff ffc0 	bl	8017c20 <global_stdio_init.part.0>
 8017ca0:	e7f3      	b.n	8017c8a <__sinit+0xe>
 8017ca2:	46c0      	nop			@ (mov r8, r8)
 8017ca4:	08017be5 	.word	0x08017be5
 8017ca8:	20003f10 	.word	0x20003f10

08017cac <_fwalk_sglue>:
 8017cac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017cae:	0014      	movs	r4, r2
 8017cb0:	2600      	movs	r6, #0
 8017cb2:	9000      	str	r0, [sp, #0]
 8017cb4:	9101      	str	r1, [sp, #4]
 8017cb6:	68a5      	ldr	r5, [r4, #8]
 8017cb8:	6867      	ldr	r7, [r4, #4]
 8017cba:	3f01      	subs	r7, #1
 8017cbc:	d504      	bpl.n	8017cc8 <_fwalk_sglue+0x1c>
 8017cbe:	6824      	ldr	r4, [r4, #0]
 8017cc0:	2c00      	cmp	r4, #0
 8017cc2:	d1f8      	bne.n	8017cb6 <_fwalk_sglue+0xa>
 8017cc4:	0030      	movs	r0, r6
 8017cc6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8017cc8:	89ab      	ldrh	r3, [r5, #12]
 8017cca:	2b01      	cmp	r3, #1
 8017ccc:	d908      	bls.n	8017ce0 <_fwalk_sglue+0x34>
 8017cce:	220e      	movs	r2, #14
 8017cd0:	5eab      	ldrsh	r3, [r5, r2]
 8017cd2:	3301      	adds	r3, #1
 8017cd4:	d004      	beq.n	8017ce0 <_fwalk_sglue+0x34>
 8017cd6:	0029      	movs	r1, r5
 8017cd8:	9800      	ldr	r0, [sp, #0]
 8017cda:	9b01      	ldr	r3, [sp, #4]
 8017cdc:	4798      	blx	r3
 8017cde:	4306      	orrs	r6, r0
 8017ce0:	3568      	adds	r5, #104	@ 0x68
 8017ce2:	e7ea      	b.n	8017cba <_fwalk_sglue+0xe>

08017ce4 <iprintf>:
 8017ce4:	b40f      	push	{r0, r1, r2, r3}
 8017ce6:	b507      	push	{r0, r1, r2, lr}
 8017ce8:	4905      	ldr	r1, [pc, #20]	@ (8017d00 <iprintf+0x1c>)
 8017cea:	ab04      	add	r3, sp, #16
 8017cec:	6808      	ldr	r0, [r1, #0]
 8017cee:	cb04      	ldmia	r3!, {r2}
 8017cf0:	6881      	ldr	r1, [r0, #8]
 8017cf2:	9301      	str	r3, [sp, #4]
 8017cf4:	f001 fe30 	bl	8019958 <_vfiprintf_r>
 8017cf8:	b003      	add	sp, #12
 8017cfa:	bc08      	pop	{r3}
 8017cfc:	b004      	add	sp, #16
 8017cfe:	4718      	bx	r3
 8017d00:	2000023c 	.word	0x2000023c

08017d04 <siprintf>:
 8017d04:	b40e      	push	{r1, r2, r3}
 8017d06:	b500      	push	{lr}
 8017d08:	490b      	ldr	r1, [pc, #44]	@ (8017d38 <siprintf+0x34>)
 8017d0a:	b09c      	sub	sp, #112	@ 0x70
 8017d0c:	ab1d      	add	r3, sp, #116	@ 0x74
 8017d0e:	9002      	str	r0, [sp, #8]
 8017d10:	9006      	str	r0, [sp, #24]
 8017d12:	9107      	str	r1, [sp, #28]
 8017d14:	9104      	str	r1, [sp, #16]
 8017d16:	4809      	ldr	r0, [pc, #36]	@ (8017d3c <siprintf+0x38>)
 8017d18:	4909      	ldr	r1, [pc, #36]	@ (8017d40 <siprintf+0x3c>)
 8017d1a:	cb04      	ldmia	r3!, {r2}
 8017d1c:	9105      	str	r1, [sp, #20]
 8017d1e:	6800      	ldr	r0, [r0, #0]
 8017d20:	a902      	add	r1, sp, #8
 8017d22:	9301      	str	r3, [sp, #4]
 8017d24:	f001 fcf2 	bl	801970c <_svfiprintf_r>
 8017d28:	2200      	movs	r2, #0
 8017d2a:	9b02      	ldr	r3, [sp, #8]
 8017d2c:	701a      	strb	r2, [r3, #0]
 8017d2e:	b01c      	add	sp, #112	@ 0x70
 8017d30:	bc08      	pop	{r3}
 8017d32:	b003      	add	sp, #12
 8017d34:	4718      	bx	r3
 8017d36:	46c0      	nop			@ (mov r8, r8)
 8017d38:	7fffffff 	.word	0x7fffffff
 8017d3c:	2000023c 	.word	0x2000023c
 8017d40:	ffff0208 	.word	0xffff0208

08017d44 <__sread>:
 8017d44:	b570      	push	{r4, r5, r6, lr}
 8017d46:	000c      	movs	r4, r1
 8017d48:	250e      	movs	r5, #14
 8017d4a:	5f49      	ldrsh	r1, [r1, r5]
 8017d4c:	f000 f8e8 	bl	8017f20 <_read_r>
 8017d50:	2800      	cmp	r0, #0
 8017d52:	db03      	blt.n	8017d5c <__sread+0x18>
 8017d54:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8017d56:	181b      	adds	r3, r3, r0
 8017d58:	6563      	str	r3, [r4, #84]	@ 0x54
 8017d5a:	bd70      	pop	{r4, r5, r6, pc}
 8017d5c:	89a3      	ldrh	r3, [r4, #12]
 8017d5e:	4a02      	ldr	r2, [pc, #8]	@ (8017d68 <__sread+0x24>)
 8017d60:	4013      	ands	r3, r2
 8017d62:	81a3      	strh	r3, [r4, #12]
 8017d64:	e7f9      	b.n	8017d5a <__sread+0x16>
 8017d66:	46c0      	nop			@ (mov r8, r8)
 8017d68:	ffffefff 	.word	0xffffefff

08017d6c <__swrite>:
 8017d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017d6e:	001f      	movs	r7, r3
 8017d70:	898b      	ldrh	r3, [r1, #12]
 8017d72:	0005      	movs	r5, r0
 8017d74:	000c      	movs	r4, r1
 8017d76:	0016      	movs	r6, r2
 8017d78:	05db      	lsls	r3, r3, #23
 8017d7a:	d505      	bpl.n	8017d88 <__swrite+0x1c>
 8017d7c:	230e      	movs	r3, #14
 8017d7e:	5ec9      	ldrsh	r1, [r1, r3]
 8017d80:	2200      	movs	r2, #0
 8017d82:	2302      	movs	r3, #2
 8017d84:	f000 f8b8 	bl	8017ef8 <_lseek_r>
 8017d88:	89a3      	ldrh	r3, [r4, #12]
 8017d8a:	4a05      	ldr	r2, [pc, #20]	@ (8017da0 <__swrite+0x34>)
 8017d8c:	0028      	movs	r0, r5
 8017d8e:	4013      	ands	r3, r2
 8017d90:	81a3      	strh	r3, [r4, #12]
 8017d92:	0032      	movs	r2, r6
 8017d94:	230e      	movs	r3, #14
 8017d96:	5ee1      	ldrsh	r1, [r4, r3]
 8017d98:	003b      	movs	r3, r7
 8017d9a:	f000 f8d5 	bl	8017f48 <_write_r>
 8017d9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017da0:	ffffefff 	.word	0xffffefff

08017da4 <__sseek>:
 8017da4:	b570      	push	{r4, r5, r6, lr}
 8017da6:	000c      	movs	r4, r1
 8017da8:	250e      	movs	r5, #14
 8017daa:	5f49      	ldrsh	r1, [r1, r5]
 8017dac:	f000 f8a4 	bl	8017ef8 <_lseek_r>
 8017db0:	89a3      	ldrh	r3, [r4, #12]
 8017db2:	1c42      	adds	r2, r0, #1
 8017db4:	d103      	bne.n	8017dbe <__sseek+0x1a>
 8017db6:	4a05      	ldr	r2, [pc, #20]	@ (8017dcc <__sseek+0x28>)
 8017db8:	4013      	ands	r3, r2
 8017dba:	81a3      	strh	r3, [r4, #12]
 8017dbc:	bd70      	pop	{r4, r5, r6, pc}
 8017dbe:	2280      	movs	r2, #128	@ 0x80
 8017dc0:	0152      	lsls	r2, r2, #5
 8017dc2:	4313      	orrs	r3, r2
 8017dc4:	81a3      	strh	r3, [r4, #12]
 8017dc6:	6560      	str	r0, [r4, #84]	@ 0x54
 8017dc8:	e7f8      	b.n	8017dbc <__sseek+0x18>
 8017dca:	46c0      	nop			@ (mov r8, r8)
 8017dcc:	ffffefff 	.word	0xffffefff

08017dd0 <__sclose>:
 8017dd0:	b510      	push	{r4, lr}
 8017dd2:	230e      	movs	r3, #14
 8017dd4:	5ec9      	ldrsh	r1, [r1, r3]
 8017dd6:	f000 f87d 	bl	8017ed4 <_close_r>
 8017dda:	bd10      	pop	{r4, pc}

08017ddc <_vsniprintf_r>:
 8017ddc:	b530      	push	{r4, r5, lr}
 8017dde:	0014      	movs	r4, r2
 8017de0:	0005      	movs	r5, r0
 8017de2:	001a      	movs	r2, r3
 8017de4:	b09b      	sub	sp, #108	@ 0x6c
 8017de6:	2c00      	cmp	r4, #0
 8017de8:	da05      	bge.n	8017df6 <_vsniprintf_r+0x1a>
 8017dea:	238b      	movs	r3, #139	@ 0x8b
 8017dec:	6003      	str	r3, [r0, #0]
 8017dee:	2001      	movs	r0, #1
 8017df0:	4240      	negs	r0, r0
 8017df2:	b01b      	add	sp, #108	@ 0x6c
 8017df4:	bd30      	pop	{r4, r5, pc}
 8017df6:	2382      	movs	r3, #130	@ 0x82
 8017df8:	4668      	mov	r0, sp
 8017dfa:	009b      	lsls	r3, r3, #2
 8017dfc:	8183      	strh	r3, [r0, #12]
 8017dfe:	2300      	movs	r3, #0
 8017e00:	9100      	str	r1, [sp, #0]
 8017e02:	9104      	str	r1, [sp, #16]
 8017e04:	429c      	cmp	r4, r3
 8017e06:	d000      	beq.n	8017e0a <_vsniprintf_r+0x2e>
 8017e08:	1e63      	subs	r3, r4, #1
 8017e0a:	9302      	str	r3, [sp, #8]
 8017e0c:	9305      	str	r3, [sp, #20]
 8017e0e:	2301      	movs	r3, #1
 8017e10:	4669      	mov	r1, sp
 8017e12:	425b      	negs	r3, r3
 8017e14:	81cb      	strh	r3, [r1, #14]
 8017e16:	0028      	movs	r0, r5
 8017e18:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8017e1a:	f001 fc77 	bl	801970c <_svfiprintf_r>
 8017e1e:	1c43      	adds	r3, r0, #1
 8017e20:	da01      	bge.n	8017e26 <_vsniprintf_r+0x4a>
 8017e22:	238b      	movs	r3, #139	@ 0x8b
 8017e24:	602b      	str	r3, [r5, #0]
 8017e26:	2c00      	cmp	r4, #0
 8017e28:	d0e3      	beq.n	8017df2 <_vsniprintf_r+0x16>
 8017e2a:	2200      	movs	r2, #0
 8017e2c:	9b00      	ldr	r3, [sp, #0]
 8017e2e:	701a      	strb	r2, [r3, #0]
 8017e30:	e7df      	b.n	8017df2 <_vsniprintf_r+0x16>
	...

08017e34 <vsniprintf>:
 8017e34:	b513      	push	{r0, r1, r4, lr}
 8017e36:	4c04      	ldr	r4, [pc, #16]	@ (8017e48 <vsniprintf+0x14>)
 8017e38:	9300      	str	r3, [sp, #0]
 8017e3a:	0013      	movs	r3, r2
 8017e3c:	000a      	movs	r2, r1
 8017e3e:	0001      	movs	r1, r0
 8017e40:	6820      	ldr	r0, [r4, #0]
 8017e42:	f7ff ffcb 	bl	8017ddc <_vsniprintf_r>
 8017e46:	bd16      	pop	{r1, r2, r4, pc}
 8017e48:	2000023c 	.word	0x2000023c

08017e4c <memset>:
 8017e4c:	0003      	movs	r3, r0
 8017e4e:	1882      	adds	r2, r0, r2
 8017e50:	4293      	cmp	r3, r2
 8017e52:	d100      	bne.n	8017e56 <memset+0xa>
 8017e54:	4770      	bx	lr
 8017e56:	7019      	strb	r1, [r3, #0]
 8017e58:	3301      	adds	r3, #1
 8017e5a:	e7f9      	b.n	8017e50 <memset+0x4>

08017e5c <strchr>:
 8017e5c:	b2c9      	uxtb	r1, r1
 8017e5e:	7803      	ldrb	r3, [r0, #0]
 8017e60:	2b00      	cmp	r3, #0
 8017e62:	d004      	beq.n	8017e6e <strchr+0x12>
 8017e64:	428b      	cmp	r3, r1
 8017e66:	d100      	bne.n	8017e6a <strchr+0xe>
 8017e68:	4770      	bx	lr
 8017e6a:	3001      	adds	r0, #1
 8017e6c:	e7f7      	b.n	8017e5e <strchr+0x2>
 8017e6e:	424b      	negs	r3, r1
 8017e70:	4159      	adcs	r1, r3
 8017e72:	4249      	negs	r1, r1
 8017e74:	4008      	ands	r0, r1
 8017e76:	e7f7      	b.n	8017e68 <strchr+0xc>

08017e78 <strncpy>:
 8017e78:	0003      	movs	r3, r0
 8017e7a:	b530      	push	{r4, r5, lr}
 8017e7c:	001d      	movs	r5, r3
 8017e7e:	2a00      	cmp	r2, #0
 8017e80:	d006      	beq.n	8017e90 <strncpy+0x18>
 8017e82:	780c      	ldrb	r4, [r1, #0]
 8017e84:	3a01      	subs	r2, #1
 8017e86:	3301      	adds	r3, #1
 8017e88:	702c      	strb	r4, [r5, #0]
 8017e8a:	3101      	adds	r1, #1
 8017e8c:	2c00      	cmp	r4, #0
 8017e8e:	d1f5      	bne.n	8017e7c <strncpy+0x4>
 8017e90:	2100      	movs	r1, #0
 8017e92:	189a      	adds	r2, r3, r2
 8017e94:	4293      	cmp	r3, r2
 8017e96:	d100      	bne.n	8017e9a <strncpy+0x22>
 8017e98:	bd30      	pop	{r4, r5, pc}
 8017e9a:	7019      	strb	r1, [r3, #0]
 8017e9c:	3301      	adds	r3, #1
 8017e9e:	e7f9      	b.n	8017e94 <strncpy+0x1c>

08017ea0 <strstr>:
 8017ea0:	780a      	ldrb	r2, [r1, #0]
 8017ea2:	b530      	push	{r4, r5, lr}
 8017ea4:	2a00      	cmp	r2, #0
 8017ea6:	d10c      	bne.n	8017ec2 <strstr+0x22>
 8017ea8:	bd30      	pop	{r4, r5, pc}
 8017eaa:	429a      	cmp	r2, r3
 8017eac:	d108      	bne.n	8017ec0 <strstr+0x20>
 8017eae:	2301      	movs	r3, #1
 8017eb0:	5ccc      	ldrb	r4, [r1, r3]
 8017eb2:	2c00      	cmp	r4, #0
 8017eb4:	d0f8      	beq.n	8017ea8 <strstr+0x8>
 8017eb6:	5cc5      	ldrb	r5, [r0, r3]
 8017eb8:	42a5      	cmp	r5, r4
 8017eba:	d101      	bne.n	8017ec0 <strstr+0x20>
 8017ebc:	3301      	adds	r3, #1
 8017ebe:	e7f7      	b.n	8017eb0 <strstr+0x10>
 8017ec0:	3001      	adds	r0, #1
 8017ec2:	7803      	ldrb	r3, [r0, #0]
 8017ec4:	2b00      	cmp	r3, #0
 8017ec6:	d1f0      	bne.n	8017eaa <strstr+0xa>
 8017ec8:	0018      	movs	r0, r3
 8017eca:	e7ed      	b.n	8017ea8 <strstr+0x8>

08017ecc <_localeconv_r>:
 8017ecc:	4800      	ldr	r0, [pc, #0]	@ (8017ed0 <_localeconv_r+0x4>)
 8017ece:	4770      	bx	lr
 8017ed0:	2000037c 	.word	0x2000037c

08017ed4 <_close_r>:
 8017ed4:	2300      	movs	r3, #0
 8017ed6:	b570      	push	{r4, r5, r6, lr}
 8017ed8:	4d06      	ldr	r5, [pc, #24]	@ (8017ef4 <_close_r+0x20>)
 8017eda:	0004      	movs	r4, r0
 8017edc:	0008      	movs	r0, r1
 8017ede:	602b      	str	r3, [r5, #0]
 8017ee0:	f7f0 ffa4 	bl	8008e2c <_close>
 8017ee4:	1c43      	adds	r3, r0, #1
 8017ee6:	d103      	bne.n	8017ef0 <_close_r+0x1c>
 8017ee8:	682b      	ldr	r3, [r5, #0]
 8017eea:	2b00      	cmp	r3, #0
 8017eec:	d000      	beq.n	8017ef0 <_close_r+0x1c>
 8017eee:	6023      	str	r3, [r4, #0]
 8017ef0:	bd70      	pop	{r4, r5, r6, pc}
 8017ef2:	46c0      	nop			@ (mov r8, r8)
 8017ef4:	20003f14 	.word	0x20003f14

08017ef8 <_lseek_r>:
 8017ef8:	b570      	push	{r4, r5, r6, lr}
 8017efa:	0004      	movs	r4, r0
 8017efc:	0008      	movs	r0, r1
 8017efe:	0011      	movs	r1, r2
 8017f00:	001a      	movs	r2, r3
 8017f02:	2300      	movs	r3, #0
 8017f04:	4d05      	ldr	r5, [pc, #20]	@ (8017f1c <_lseek_r+0x24>)
 8017f06:	602b      	str	r3, [r5, #0]
 8017f08:	f7f0 ffb1 	bl	8008e6e <_lseek>
 8017f0c:	1c43      	adds	r3, r0, #1
 8017f0e:	d103      	bne.n	8017f18 <_lseek_r+0x20>
 8017f10:	682b      	ldr	r3, [r5, #0]
 8017f12:	2b00      	cmp	r3, #0
 8017f14:	d000      	beq.n	8017f18 <_lseek_r+0x20>
 8017f16:	6023      	str	r3, [r4, #0]
 8017f18:	bd70      	pop	{r4, r5, r6, pc}
 8017f1a:	46c0      	nop			@ (mov r8, r8)
 8017f1c:	20003f14 	.word	0x20003f14

08017f20 <_read_r>:
 8017f20:	b570      	push	{r4, r5, r6, lr}
 8017f22:	0004      	movs	r4, r0
 8017f24:	0008      	movs	r0, r1
 8017f26:	0011      	movs	r1, r2
 8017f28:	001a      	movs	r2, r3
 8017f2a:	2300      	movs	r3, #0
 8017f2c:	4d05      	ldr	r5, [pc, #20]	@ (8017f44 <_read_r+0x24>)
 8017f2e:	602b      	str	r3, [r5, #0]
 8017f30:	f7f0 ff5f 	bl	8008df2 <_read>
 8017f34:	1c43      	adds	r3, r0, #1
 8017f36:	d103      	bne.n	8017f40 <_read_r+0x20>
 8017f38:	682b      	ldr	r3, [r5, #0]
 8017f3a:	2b00      	cmp	r3, #0
 8017f3c:	d000      	beq.n	8017f40 <_read_r+0x20>
 8017f3e:	6023      	str	r3, [r4, #0]
 8017f40:	bd70      	pop	{r4, r5, r6, pc}
 8017f42:	46c0      	nop			@ (mov r8, r8)
 8017f44:	20003f14 	.word	0x20003f14

08017f48 <_write_r>:
 8017f48:	b570      	push	{r4, r5, r6, lr}
 8017f4a:	0004      	movs	r4, r0
 8017f4c:	0008      	movs	r0, r1
 8017f4e:	0011      	movs	r1, r2
 8017f50:	001a      	movs	r2, r3
 8017f52:	2300      	movs	r3, #0
 8017f54:	4d05      	ldr	r5, [pc, #20]	@ (8017f6c <_write_r+0x24>)
 8017f56:	602b      	str	r3, [r5, #0]
 8017f58:	f7f1 fbd6 	bl	8009708 <_write>
 8017f5c:	1c43      	adds	r3, r0, #1
 8017f5e:	d103      	bne.n	8017f68 <_write_r+0x20>
 8017f60:	682b      	ldr	r3, [r5, #0]
 8017f62:	2b00      	cmp	r3, #0
 8017f64:	d000      	beq.n	8017f68 <_write_r+0x20>
 8017f66:	6023      	str	r3, [r4, #0]
 8017f68:	bd70      	pop	{r4, r5, r6, pc}
 8017f6a:	46c0      	nop			@ (mov r8, r8)
 8017f6c:	20003f14 	.word	0x20003f14

08017f70 <__errno>:
 8017f70:	4b01      	ldr	r3, [pc, #4]	@ (8017f78 <__errno+0x8>)
 8017f72:	6818      	ldr	r0, [r3, #0]
 8017f74:	4770      	bx	lr
 8017f76:	46c0      	nop			@ (mov r8, r8)
 8017f78:	2000023c 	.word	0x2000023c

08017f7c <__libc_init_array>:
 8017f7c:	b570      	push	{r4, r5, r6, lr}
 8017f7e:	2600      	movs	r6, #0
 8017f80:	4c0c      	ldr	r4, [pc, #48]	@ (8017fb4 <__libc_init_array+0x38>)
 8017f82:	4d0d      	ldr	r5, [pc, #52]	@ (8017fb8 <__libc_init_array+0x3c>)
 8017f84:	1b64      	subs	r4, r4, r5
 8017f86:	10a4      	asrs	r4, r4, #2
 8017f88:	42a6      	cmp	r6, r4
 8017f8a:	d109      	bne.n	8017fa0 <__libc_init_array+0x24>
 8017f8c:	2600      	movs	r6, #0
 8017f8e:	f002 fe57 	bl	801ac40 <_init>
 8017f92:	4c0a      	ldr	r4, [pc, #40]	@ (8017fbc <__libc_init_array+0x40>)
 8017f94:	4d0a      	ldr	r5, [pc, #40]	@ (8017fc0 <__libc_init_array+0x44>)
 8017f96:	1b64      	subs	r4, r4, r5
 8017f98:	10a4      	asrs	r4, r4, #2
 8017f9a:	42a6      	cmp	r6, r4
 8017f9c:	d105      	bne.n	8017faa <__libc_init_array+0x2e>
 8017f9e:	bd70      	pop	{r4, r5, r6, pc}
 8017fa0:	00b3      	lsls	r3, r6, #2
 8017fa2:	58eb      	ldr	r3, [r5, r3]
 8017fa4:	4798      	blx	r3
 8017fa6:	3601      	adds	r6, #1
 8017fa8:	e7ee      	b.n	8017f88 <__libc_init_array+0xc>
 8017faa:	00b3      	lsls	r3, r6, #2
 8017fac:	58eb      	ldr	r3, [r5, r3]
 8017fae:	4798      	blx	r3
 8017fb0:	3601      	adds	r6, #1
 8017fb2:	e7f2      	b.n	8017f9a <__libc_init_array+0x1e>
 8017fb4:	0801be80 	.word	0x0801be80
 8017fb8:	0801be80 	.word	0x0801be80
 8017fbc:	0801be84 	.word	0x0801be84
 8017fc0:	0801be80 	.word	0x0801be80

08017fc4 <__retarget_lock_init_recursive>:
 8017fc4:	4770      	bx	lr

08017fc6 <__retarget_lock_acquire_recursive>:
 8017fc6:	4770      	bx	lr

08017fc8 <__retarget_lock_release_recursive>:
 8017fc8:	4770      	bx	lr

08017fca <memchr>:
 8017fca:	b2c9      	uxtb	r1, r1
 8017fcc:	1882      	adds	r2, r0, r2
 8017fce:	4290      	cmp	r0, r2
 8017fd0:	d101      	bne.n	8017fd6 <memchr+0xc>
 8017fd2:	2000      	movs	r0, #0
 8017fd4:	4770      	bx	lr
 8017fd6:	7803      	ldrb	r3, [r0, #0]
 8017fd8:	428b      	cmp	r3, r1
 8017fda:	d0fb      	beq.n	8017fd4 <memchr+0xa>
 8017fdc:	3001      	adds	r0, #1
 8017fde:	e7f6      	b.n	8017fce <memchr+0x4>

08017fe0 <memcpy>:
 8017fe0:	2300      	movs	r3, #0
 8017fe2:	b510      	push	{r4, lr}
 8017fe4:	429a      	cmp	r2, r3
 8017fe6:	d100      	bne.n	8017fea <memcpy+0xa>
 8017fe8:	bd10      	pop	{r4, pc}
 8017fea:	5ccc      	ldrb	r4, [r1, r3]
 8017fec:	54c4      	strb	r4, [r0, r3]
 8017fee:	3301      	adds	r3, #1
 8017ff0:	e7f8      	b.n	8017fe4 <memcpy+0x4>

08017ff2 <quorem>:
 8017ff2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017ff4:	6902      	ldr	r2, [r0, #16]
 8017ff6:	690f      	ldr	r7, [r1, #16]
 8017ff8:	b087      	sub	sp, #28
 8017ffa:	0006      	movs	r6, r0
 8017ffc:	000b      	movs	r3, r1
 8017ffe:	2000      	movs	r0, #0
 8018000:	9102      	str	r1, [sp, #8]
 8018002:	42ba      	cmp	r2, r7
 8018004:	db6d      	blt.n	80180e2 <quorem+0xf0>
 8018006:	3f01      	subs	r7, #1
 8018008:	00bc      	lsls	r4, r7, #2
 801800a:	3314      	adds	r3, #20
 801800c:	9305      	str	r3, [sp, #20]
 801800e:	191b      	adds	r3, r3, r4
 8018010:	9303      	str	r3, [sp, #12]
 8018012:	0033      	movs	r3, r6
 8018014:	3314      	adds	r3, #20
 8018016:	191c      	adds	r4, r3, r4
 8018018:	9301      	str	r3, [sp, #4]
 801801a:	6823      	ldr	r3, [r4, #0]
 801801c:	9304      	str	r3, [sp, #16]
 801801e:	9b03      	ldr	r3, [sp, #12]
 8018020:	9804      	ldr	r0, [sp, #16]
 8018022:	681d      	ldr	r5, [r3, #0]
 8018024:	3501      	adds	r5, #1
 8018026:	0029      	movs	r1, r5
 8018028:	f7e8 f88a 	bl	8000140 <__udivsi3>
 801802c:	9b04      	ldr	r3, [sp, #16]
 801802e:	9000      	str	r0, [sp, #0]
 8018030:	42ab      	cmp	r3, r5
 8018032:	d32b      	bcc.n	801808c <quorem+0x9a>
 8018034:	9b05      	ldr	r3, [sp, #20]
 8018036:	9d01      	ldr	r5, [sp, #4]
 8018038:	469c      	mov	ip, r3
 801803a:	2300      	movs	r3, #0
 801803c:	9305      	str	r3, [sp, #20]
 801803e:	9304      	str	r3, [sp, #16]
 8018040:	4662      	mov	r2, ip
 8018042:	ca08      	ldmia	r2!, {r3}
 8018044:	6828      	ldr	r0, [r5, #0]
 8018046:	4694      	mov	ip, r2
 8018048:	9a00      	ldr	r2, [sp, #0]
 801804a:	b299      	uxth	r1, r3
 801804c:	4351      	muls	r1, r2
 801804e:	9a05      	ldr	r2, [sp, #20]
 8018050:	0c1b      	lsrs	r3, r3, #16
 8018052:	1889      	adds	r1, r1, r2
 8018054:	9a00      	ldr	r2, [sp, #0]
 8018056:	4353      	muls	r3, r2
 8018058:	0c0a      	lsrs	r2, r1, #16
 801805a:	189b      	adds	r3, r3, r2
 801805c:	0c1a      	lsrs	r2, r3, #16
 801805e:	b289      	uxth	r1, r1
 8018060:	9205      	str	r2, [sp, #20]
 8018062:	b282      	uxth	r2, r0
 8018064:	1a52      	subs	r2, r2, r1
 8018066:	9904      	ldr	r1, [sp, #16]
 8018068:	0c00      	lsrs	r0, r0, #16
 801806a:	1852      	adds	r2, r2, r1
 801806c:	b29b      	uxth	r3, r3
 801806e:	1411      	asrs	r1, r2, #16
 8018070:	1ac3      	subs	r3, r0, r3
 8018072:	185b      	adds	r3, r3, r1
 8018074:	1419      	asrs	r1, r3, #16
 8018076:	b292      	uxth	r2, r2
 8018078:	041b      	lsls	r3, r3, #16
 801807a:	431a      	orrs	r2, r3
 801807c:	9b03      	ldr	r3, [sp, #12]
 801807e:	9104      	str	r1, [sp, #16]
 8018080:	c504      	stmia	r5!, {r2}
 8018082:	4563      	cmp	r3, ip
 8018084:	d2dc      	bcs.n	8018040 <quorem+0x4e>
 8018086:	6823      	ldr	r3, [r4, #0]
 8018088:	2b00      	cmp	r3, #0
 801808a:	d030      	beq.n	80180ee <quorem+0xfc>
 801808c:	0030      	movs	r0, r6
 801808e:	9902      	ldr	r1, [sp, #8]
 8018090:	f001 f9c6 	bl	8019420 <__mcmp>
 8018094:	2800      	cmp	r0, #0
 8018096:	db23      	blt.n	80180e0 <quorem+0xee>
 8018098:	0034      	movs	r4, r6
 801809a:	2500      	movs	r5, #0
 801809c:	9902      	ldr	r1, [sp, #8]
 801809e:	3414      	adds	r4, #20
 80180a0:	3114      	adds	r1, #20
 80180a2:	6823      	ldr	r3, [r4, #0]
 80180a4:	c901      	ldmia	r1!, {r0}
 80180a6:	9302      	str	r3, [sp, #8]
 80180a8:	466b      	mov	r3, sp
 80180aa:	891b      	ldrh	r3, [r3, #8]
 80180ac:	b282      	uxth	r2, r0
 80180ae:	1a9a      	subs	r2, r3, r2
 80180b0:	9b02      	ldr	r3, [sp, #8]
 80180b2:	1952      	adds	r2, r2, r5
 80180b4:	0c00      	lsrs	r0, r0, #16
 80180b6:	0c1b      	lsrs	r3, r3, #16
 80180b8:	1a1b      	subs	r3, r3, r0
 80180ba:	1410      	asrs	r0, r2, #16
 80180bc:	181b      	adds	r3, r3, r0
 80180be:	141d      	asrs	r5, r3, #16
 80180c0:	b292      	uxth	r2, r2
 80180c2:	041b      	lsls	r3, r3, #16
 80180c4:	431a      	orrs	r2, r3
 80180c6:	9b03      	ldr	r3, [sp, #12]
 80180c8:	c404      	stmia	r4!, {r2}
 80180ca:	428b      	cmp	r3, r1
 80180cc:	d2e9      	bcs.n	80180a2 <quorem+0xb0>
 80180ce:	9a01      	ldr	r2, [sp, #4]
 80180d0:	00bb      	lsls	r3, r7, #2
 80180d2:	18d3      	adds	r3, r2, r3
 80180d4:	681a      	ldr	r2, [r3, #0]
 80180d6:	2a00      	cmp	r2, #0
 80180d8:	d013      	beq.n	8018102 <quorem+0x110>
 80180da:	9b00      	ldr	r3, [sp, #0]
 80180dc:	3301      	adds	r3, #1
 80180de:	9300      	str	r3, [sp, #0]
 80180e0:	9800      	ldr	r0, [sp, #0]
 80180e2:	b007      	add	sp, #28
 80180e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80180e6:	6823      	ldr	r3, [r4, #0]
 80180e8:	2b00      	cmp	r3, #0
 80180ea:	d104      	bne.n	80180f6 <quorem+0x104>
 80180ec:	3f01      	subs	r7, #1
 80180ee:	9b01      	ldr	r3, [sp, #4]
 80180f0:	3c04      	subs	r4, #4
 80180f2:	42a3      	cmp	r3, r4
 80180f4:	d3f7      	bcc.n	80180e6 <quorem+0xf4>
 80180f6:	6137      	str	r7, [r6, #16]
 80180f8:	e7c8      	b.n	801808c <quorem+0x9a>
 80180fa:	681a      	ldr	r2, [r3, #0]
 80180fc:	2a00      	cmp	r2, #0
 80180fe:	d104      	bne.n	801810a <quorem+0x118>
 8018100:	3f01      	subs	r7, #1
 8018102:	9a01      	ldr	r2, [sp, #4]
 8018104:	3b04      	subs	r3, #4
 8018106:	429a      	cmp	r2, r3
 8018108:	d3f7      	bcc.n	80180fa <quorem+0x108>
 801810a:	6137      	str	r7, [r6, #16]
 801810c:	e7e5      	b.n	80180da <quorem+0xe8>
	...

08018110 <_dtoa_r>:
 8018110:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018112:	0014      	movs	r4, r2
 8018114:	001d      	movs	r5, r3
 8018116:	69c6      	ldr	r6, [r0, #28]
 8018118:	b09d      	sub	sp, #116	@ 0x74
 801811a:	940a      	str	r4, [sp, #40]	@ 0x28
 801811c:	950b      	str	r5, [sp, #44]	@ 0x2c
 801811e:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 8018120:	9003      	str	r0, [sp, #12]
 8018122:	2e00      	cmp	r6, #0
 8018124:	d10f      	bne.n	8018146 <_dtoa_r+0x36>
 8018126:	2010      	movs	r0, #16
 8018128:	f000 fe30 	bl	8018d8c <malloc>
 801812c:	9b03      	ldr	r3, [sp, #12]
 801812e:	1e02      	subs	r2, r0, #0
 8018130:	61d8      	str	r0, [r3, #28]
 8018132:	d104      	bne.n	801813e <_dtoa_r+0x2e>
 8018134:	21ef      	movs	r1, #239	@ 0xef
 8018136:	4bc7      	ldr	r3, [pc, #796]	@ (8018454 <_dtoa_r+0x344>)
 8018138:	48c7      	ldr	r0, [pc, #796]	@ (8018458 <_dtoa_r+0x348>)
 801813a:	f001 fea1 	bl	8019e80 <__assert_func>
 801813e:	6046      	str	r6, [r0, #4]
 8018140:	6086      	str	r6, [r0, #8]
 8018142:	6006      	str	r6, [r0, #0]
 8018144:	60c6      	str	r6, [r0, #12]
 8018146:	9b03      	ldr	r3, [sp, #12]
 8018148:	69db      	ldr	r3, [r3, #28]
 801814a:	6819      	ldr	r1, [r3, #0]
 801814c:	2900      	cmp	r1, #0
 801814e:	d00b      	beq.n	8018168 <_dtoa_r+0x58>
 8018150:	685a      	ldr	r2, [r3, #4]
 8018152:	2301      	movs	r3, #1
 8018154:	4093      	lsls	r3, r2
 8018156:	604a      	str	r2, [r1, #4]
 8018158:	608b      	str	r3, [r1, #8]
 801815a:	9803      	ldr	r0, [sp, #12]
 801815c:	f000 ff16 	bl	8018f8c <_Bfree>
 8018160:	2200      	movs	r2, #0
 8018162:	9b03      	ldr	r3, [sp, #12]
 8018164:	69db      	ldr	r3, [r3, #28]
 8018166:	601a      	str	r2, [r3, #0]
 8018168:	2d00      	cmp	r5, #0
 801816a:	da1e      	bge.n	80181aa <_dtoa_r+0x9a>
 801816c:	2301      	movs	r3, #1
 801816e:	603b      	str	r3, [r7, #0]
 8018170:	006b      	lsls	r3, r5, #1
 8018172:	085b      	lsrs	r3, r3, #1
 8018174:	930b      	str	r3, [sp, #44]	@ 0x2c
 8018176:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8018178:	4bb8      	ldr	r3, [pc, #736]	@ (801845c <_dtoa_r+0x34c>)
 801817a:	4ab8      	ldr	r2, [pc, #736]	@ (801845c <_dtoa_r+0x34c>)
 801817c:	403b      	ands	r3, r7
 801817e:	4293      	cmp	r3, r2
 8018180:	d116      	bne.n	80181b0 <_dtoa_r+0xa0>
 8018182:	4bb7      	ldr	r3, [pc, #732]	@ (8018460 <_dtoa_r+0x350>)
 8018184:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8018186:	6013      	str	r3, [r2, #0]
 8018188:	033b      	lsls	r3, r7, #12
 801818a:	0b1b      	lsrs	r3, r3, #12
 801818c:	4323      	orrs	r3, r4
 801818e:	d101      	bne.n	8018194 <_dtoa_r+0x84>
 8018190:	f000 fd83 	bl	8018c9a <_dtoa_r+0xb8a>
 8018194:	4bb3      	ldr	r3, [pc, #716]	@ (8018464 <_dtoa_r+0x354>)
 8018196:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8018198:	9308      	str	r3, [sp, #32]
 801819a:	2a00      	cmp	r2, #0
 801819c:	d002      	beq.n	80181a4 <_dtoa_r+0x94>
 801819e:	4bb2      	ldr	r3, [pc, #712]	@ (8018468 <_dtoa_r+0x358>)
 80181a0:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 80181a2:	6013      	str	r3, [r2, #0]
 80181a4:	9808      	ldr	r0, [sp, #32]
 80181a6:	b01d      	add	sp, #116	@ 0x74
 80181a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80181aa:	2300      	movs	r3, #0
 80181ac:	603b      	str	r3, [r7, #0]
 80181ae:	e7e2      	b.n	8018176 <_dtoa_r+0x66>
 80181b0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80181b2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80181b4:	9212      	str	r2, [sp, #72]	@ 0x48
 80181b6:	9313      	str	r3, [sp, #76]	@ 0x4c
 80181b8:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80181ba:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80181bc:	2200      	movs	r2, #0
 80181be:	2300      	movs	r3, #0
 80181c0:	f7e8 f944 	bl	800044c <__aeabi_dcmpeq>
 80181c4:	1e06      	subs	r6, r0, #0
 80181c6:	d00b      	beq.n	80181e0 <_dtoa_r+0xd0>
 80181c8:	2301      	movs	r3, #1
 80181ca:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80181cc:	6013      	str	r3, [r2, #0]
 80181ce:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80181d0:	2b00      	cmp	r3, #0
 80181d2:	d002      	beq.n	80181da <_dtoa_r+0xca>
 80181d4:	4ba5      	ldr	r3, [pc, #660]	@ (801846c <_dtoa_r+0x35c>)
 80181d6:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 80181d8:	6013      	str	r3, [r2, #0]
 80181da:	4ba5      	ldr	r3, [pc, #660]	@ (8018470 <_dtoa_r+0x360>)
 80181dc:	9308      	str	r3, [sp, #32]
 80181de:	e7e1      	b.n	80181a4 <_dtoa_r+0x94>
 80181e0:	ab1a      	add	r3, sp, #104	@ 0x68
 80181e2:	9301      	str	r3, [sp, #4]
 80181e4:	ab1b      	add	r3, sp, #108	@ 0x6c
 80181e6:	9300      	str	r3, [sp, #0]
 80181e8:	9803      	ldr	r0, [sp, #12]
 80181ea:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80181ec:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80181ee:	f001 f9cd 	bl	801958c <__d2b>
 80181f2:	007a      	lsls	r2, r7, #1
 80181f4:	9005      	str	r0, [sp, #20]
 80181f6:	0d52      	lsrs	r2, r2, #21
 80181f8:	d100      	bne.n	80181fc <_dtoa_r+0xec>
 80181fa:	e07b      	b.n	80182f4 <_dtoa_r+0x1e4>
 80181fc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80181fe:	9618      	str	r6, [sp, #96]	@ 0x60
 8018200:	0319      	lsls	r1, r3, #12
 8018202:	4b9c      	ldr	r3, [pc, #624]	@ (8018474 <_dtoa_r+0x364>)
 8018204:	0b09      	lsrs	r1, r1, #12
 8018206:	430b      	orrs	r3, r1
 8018208:	499b      	ldr	r1, [pc, #620]	@ (8018478 <_dtoa_r+0x368>)
 801820a:	1857      	adds	r7, r2, r1
 801820c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801820e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8018210:	0019      	movs	r1, r3
 8018212:	2200      	movs	r2, #0
 8018214:	4b99      	ldr	r3, [pc, #612]	@ (801847c <_dtoa_r+0x36c>)
 8018216:	f7ea fc57 	bl	8002ac8 <__aeabi_dsub>
 801821a:	4a99      	ldr	r2, [pc, #612]	@ (8018480 <_dtoa_r+0x370>)
 801821c:	4b99      	ldr	r3, [pc, #612]	@ (8018484 <_dtoa_r+0x374>)
 801821e:	f7ea f98b 	bl	8002538 <__aeabi_dmul>
 8018222:	4a99      	ldr	r2, [pc, #612]	@ (8018488 <_dtoa_r+0x378>)
 8018224:	4b99      	ldr	r3, [pc, #612]	@ (801848c <_dtoa_r+0x37c>)
 8018226:	f7e9 f9df 	bl	80015e8 <__aeabi_dadd>
 801822a:	0004      	movs	r4, r0
 801822c:	0038      	movs	r0, r7
 801822e:	000d      	movs	r5, r1
 8018230:	f7eb f844 	bl	80032bc <__aeabi_i2d>
 8018234:	4a96      	ldr	r2, [pc, #600]	@ (8018490 <_dtoa_r+0x380>)
 8018236:	4b97      	ldr	r3, [pc, #604]	@ (8018494 <_dtoa_r+0x384>)
 8018238:	f7ea f97e 	bl	8002538 <__aeabi_dmul>
 801823c:	0002      	movs	r2, r0
 801823e:	000b      	movs	r3, r1
 8018240:	0020      	movs	r0, r4
 8018242:	0029      	movs	r1, r5
 8018244:	f7e9 f9d0 	bl	80015e8 <__aeabi_dadd>
 8018248:	0004      	movs	r4, r0
 801824a:	000d      	movs	r5, r1
 801824c:	f7ea fffa 	bl	8003244 <__aeabi_d2iz>
 8018250:	2200      	movs	r2, #0
 8018252:	9004      	str	r0, [sp, #16]
 8018254:	2300      	movs	r3, #0
 8018256:	0020      	movs	r0, r4
 8018258:	0029      	movs	r1, r5
 801825a:	f7e8 f8fd 	bl	8000458 <__aeabi_dcmplt>
 801825e:	2800      	cmp	r0, #0
 8018260:	d00b      	beq.n	801827a <_dtoa_r+0x16a>
 8018262:	9804      	ldr	r0, [sp, #16]
 8018264:	f7eb f82a 	bl	80032bc <__aeabi_i2d>
 8018268:	002b      	movs	r3, r5
 801826a:	0022      	movs	r2, r4
 801826c:	f7e8 f8ee 	bl	800044c <__aeabi_dcmpeq>
 8018270:	4243      	negs	r3, r0
 8018272:	4158      	adcs	r0, r3
 8018274:	9b04      	ldr	r3, [sp, #16]
 8018276:	1a1b      	subs	r3, r3, r0
 8018278:	9304      	str	r3, [sp, #16]
 801827a:	2301      	movs	r3, #1
 801827c:	9315      	str	r3, [sp, #84]	@ 0x54
 801827e:	9b04      	ldr	r3, [sp, #16]
 8018280:	2b16      	cmp	r3, #22
 8018282:	d810      	bhi.n	80182a6 <_dtoa_r+0x196>
 8018284:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8018286:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8018288:	9a04      	ldr	r2, [sp, #16]
 801828a:	4b83      	ldr	r3, [pc, #524]	@ (8018498 <_dtoa_r+0x388>)
 801828c:	00d2      	lsls	r2, r2, #3
 801828e:	189b      	adds	r3, r3, r2
 8018290:	681a      	ldr	r2, [r3, #0]
 8018292:	685b      	ldr	r3, [r3, #4]
 8018294:	f7e8 f8e0 	bl	8000458 <__aeabi_dcmplt>
 8018298:	2800      	cmp	r0, #0
 801829a:	d047      	beq.n	801832c <_dtoa_r+0x21c>
 801829c:	9b04      	ldr	r3, [sp, #16]
 801829e:	3b01      	subs	r3, #1
 80182a0:	9304      	str	r3, [sp, #16]
 80182a2:	2300      	movs	r3, #0
 80182a4:	9315      	str	r3, [sp, #84]	@ 0x54
 80182a6:	2200      	movs	r2, #0
 80182a8:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80182aa:	9206      	str	r2, [sp, #24]
 80182ac:	1bdb      	subs	r3, r3, r7
 80182ae:	1e5a      	subs	r2, r3, #1
 80182b0:	d53e      	bpl.n	8018330 <_dtoa_r+0x220>
 80182b2:	2201      	movs	r2, #1
 80182b4:	1ad3      	subs	r3, r2, r3
 80182b6:	9306      	str	r3, [sp, #24]
 80182b8:	2300      	movs	r3, #0
 80182ba:	930d      	str	r3, [sp, #52]	@ 0x34
 80182bc:	9b04      	ldr	r3, [sp, #16]
 80182be:	2b00      	cmp	r3, #0
 80182c0:	db38      	blt.n	8018334 <_dtoa_r+0x224>
 80182c2:	9a04      	ldr	r2, [sp, #16]
 80182c4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80182c6:	4694      	mov	ip, r2
 80182c8:	4463      	add	r3, ip
 80182ca:	930d      	str	r3, [sp, #52]	@ 0x34
 80182cc:	2300      	movs	r3, #0
 80182ce:	9214      	str	r2, [sp, #80]	@ 0x50
 80182d0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80182d2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80182d4:	2401      	movs	r4, #1
 80182d6:	2b09      	cmp	r3, #9
 80182d8:	d867      	bhi.n	80183aa <_dtoa_r+0x29a>
 80182da:	2b05      	cmp	r3, #5
 80182dc:	dd02      	ble.n	80182e4 <_dtoa_r+0x1d4>
 80182de:	2400      	movs	r4, #0
 80182e0:	3b04      	subs	r3, #4
 80182e2:	9322      	str	r3, [sp, #136]	@ 0x88
 80182e4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80182e6:	1e98      	subs	r0, r3, #2
 80182e8:	2803      	cmp	r0, #3
 80182ea:	d867      	bhi.n	80183bc <_dtoa_r+0x2ac>
 80182ec:	f7e7 ff14 	bl	8000118 <__gnu_thumb1_case_uqi>
 80182f0:	5b383a2b 	.word	0x5b383a2b
 80182f4:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80182f6:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 80182f8:	18f6      	adds	r6, r6, r3
 80182fa:	4b68      	ldr	r3, [pc, #416]	@ (801849c <_dtoa_r+0x38c>)
 80182fc:	18f2      	adds	r2, r6, r3
 80182fe:	2a20      	cmp	r2, #32
 8018300:	dd0f      	ble.n	8018322 <_dtoa_r+0x212>
 8018302:	2340      	movs	r3, #64	@ 0x40
 8018304:	1a9b      	subs	r3, r3, r2
 8018306:	409f      	lsls	r7, r3
 8018308:	4b65      	ldr	r3, [pc, #404]	@ (80184a0 <_dtoa_r+0x390>)
 801830a:	0038      	movs	r0, r7
 801830c:	18f3      	adds	r3, r6, r3
 801830e:	40dc      	lsrs	r4, r3
 8018310:	4320      	orrs	r0, r4
 8018312:	f7eb f801 	bl	8003318 <__aeabi_ui2d>
 8018316:	2201      	movs	r2, #1
 8018318:	4b62      	ldr	r3, [pc, #392]	@ (80184a4 <_dtoa_r+0x394>)
 801831a:	1e77      	subs	r7, r6, #1
 801831c:	18cb      	adds	r3, r1, r3
 801831e:	9218      	str	r2, [sp, #96]	@ 0x60
 8018320:	e776      	b.n	8018210 <_dtoa_r+0x100>
 8018322:	2320      	movs	r3, #32
 8018324:	0020      	movs	r0, r4
 8018326:	1a9b      	subs	r3, r3, r2
 8018328:	4098      	lsls	r0, r3
 801832a:	e7f2      	b.n	8018312 <_dtoa_r+0x202>
 801832c:	9015      	str	r0, [sp, #84]	@ 0x54
 801832e:	e7ba      	b.n	80182a6 <_dtoa_r+0x196>
 8018330:	920d      	str	r2, [sp, #52]	@ 0x34
 8018332:	e7c3      	b.n	80182bc <_dtoa_r+0x1ac>
 8018334:	9b06      	ldr	r3, [sp, #24]
 8018336:	9a04      	ldr	r2, [sp, #16]
 8018338:	1a9b      	subs	r3, r3, r2
 801833a:	9306      	str	r3, [sp, #24]
 801833c:	4253      	negs	r3, r2
 801833e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8018340:	2300      	movs	r3, #0
 8018342:	9314      	str	r3, [sp, #80]	@ 0x50
 8018344:	e7c5      	b.n	80182d2 <_dtoa_r+0x1c2>
 8018346:	2300      	movs	r3, #0
 8018348:	9310      	str	r3, [sp, #64]	@ 0x40
 801834a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801834c:	930e      	str	r3, [sp, #56]	@ 0x38
 801834e:	9309      	str	r3, [sp, #36]	@ 0x24
 8018350:	2b00      	cmp	r3, #0
 8018352:	dc13      	bgt.n	801837c <_dtoa_r+0x26c>
 8018354:	2301      	movs	r3, #1
 8018356:	001a      	movs	r2, r3
 8018358:	930e      	str	r3, [sp, #56]	@ 0x38
 801835a:	9309      	str	r3, [sp, #36]	@ 0x24
 801835c:	9223      	str	r2, [sp, #140]	@ 0x8c
 801835e:	e00d      	b.n	801837c <_dtoa_r+0x26c>
 8018360:	2301      	movs	r3, #1
 8018362:	e7f1      	b.n	8018348 <_dtoa_r+0x238>
 8018364:	2300      	movs	r3, #0
 8018366:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8018368:	9310      	str	r3, [sp, #64]	@ 0x40
 801836a:	4694      	mov	ip, r2
 801836c:	9b04      	ldr	r3, [sp, #16]
 801836e:	4463      	add	r3, ip
 8018370:	930e      	str	r3, [sp, #56]	@ 0x38
 8018372:	3301      	adds	r3, #1
 8018374:	9309      	str	r3, [sp, #36]	@ 0x24
 8018376:	2b00      	cmp	r3, #0
 8018378:	dc00      	bgt.n	801837c <_dtoa_r+0x26c>
 801837a:	2301      	movs	r3, #1
 801837c:	9a03      	ldr	r2, [sp, #12]
 801837e:	2100      	movs	r1, #0
 8018380:	69d0      	ldr	r0, [r2, #28]
 8018382:	2204      	movs	r2, #4
 8018384:	0015      	movs	r5, r2
 8018386:	3514      	adds	r5, #20
 8018388:	429d      	cmp	r5, r3
 801838a:	d91b      	bls.n	80183c4 <_dtoa_r+0x2b4>
 801838c:	6041      	str	r1, [r0, #4]
 801838e:	9803      	ldr	r0, [sp, #12]
 8018390:	f000 fdb8 	bl	8018f04 <_Balloc>
 8018394:	9008      	str	r0, [sp, #32]
 8018396:	2800      	cmp	r0, #0
 8018398:	d117      	bne.n	80183ca <_dtoa_r+0x2ba>
 801839a:	21b0      	movs	r1, #176	@ 0xb0
 801839c:	4b42      	ldr	r3, [pc, #264]	@ (80184a8 <_dtoa_r+0x398>)
 801839e:	482e      	ldr	r0, [pc, #184]	@ (8018458 <_dtoa_r+0x348>)
 80183a0:	9a08      	ldr	r2, [sp, #32]
 80183a2:	31ff      	adds	r1, #255	@ 0xff
 80183a4:	e6c9      	b.n	801813a <_dtoa_r+0x2a>
 80183a6:	2301      	movs	r3, #1
 80183a8:	e7dd      	b.n	8018366 <_dtoa_r+0x256>
 80183aa:	2300      	movs	r3, #0
 80183ac:	9410      	str	r4, [sp, #64]	@ 0x40
 80183ae:	9322      	str	r3, [sp, #136]	@ 0x88
 80183b0:	3b01      	subs	r3, #1
 80183b2:	930e      	str	r3, [sp, #56]	@ 0x38
 80183b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80183b6:	2200      	movs	r2, #0
 80183b8:	3313      	adds	r3, #19
 80183ba:	e7cf      	b.n	801835c <_dtoa_r+0x24c>
 80183bc:	2301      	movs	r3, #1
 80183be:	9310      	str	r3, [sp, #64]	@ 0x40
 80183c0:	3b02      	subs	r3, #2
 80183c2:	e7f6      	b.n	80183b2 <_dtoa_r+0x2a2>
 80183c4:	3101      	adds	r1, #1
 80183c6:	0052      	lsls	r2, r2, #1
 80183c8:	e7dc      	b.n	8018384 <_dtoa_r+0x274>
 80183ca:	9b03      	ldr	r3, [sp, #12]
 80183cc:	9a08      	ldr	r2, [sp, #32]
 80183ce:	69db      	ldr	r3, [r3, #28]
 80183d0:	601a      	str	r2, [r3, #0]
 80183d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80183d4:	2b0e      	cmp	r3, #14
 80183d6:	d900      	bls.n	80183da <_dtoa_r+0x2ca>
 80183d8:	e0d9      	b.n	801858e <_dtoa_r+0x47e>
 80183da:	2c00      	cmp	r4, #0
 80183dc:	d100      	bne.n	80183e0 <_dtoa_r+0x2d0>
 80183de:	e0d6      	b.n	801858e <_dtoa_r+0x47e>
 80183e0:	9b04      	ldr	r3, [sp, #16]
 80183e2:	2b00      	cmp	r3, #0
 80183e4:	dd64      	ble.n	80184b0 <_dtoa_r+0x3a0>
 80183e6:	210f      	movs	r1, #15
 80183e8:	9a04      	ldr	r2, [sp, #16]
 80183ea:	4b2b      	ldr	r3, [pc, #172]	@ (8018498 <_dtoa_r+0x388>)
 80183ec:	400a      	ands	r2, r1
 80183ee:	00d2      	lsls	r2, r2, #3
 80183f0:	189b      	adds	r3, r3, r2
 80183f2:	681e      	ldr	r6, [r3, #0]
 80183f4:	685f      	ldr	r7, [r3, #4]
 80183f6:	9b04      	ldr	r3, [sp, #16]
 80183f8:	2402      	movs	r4, #2
 80183fa:	111d      	asrs	r5, r3, #4
 80183fc:	05db      	lsls	r3, r3, #23
 80183fe:	d50a      	bpl.n	8018416 <_dtoa_r+0x306>
 8018400:	4b2a      	ldr	r3, [pc, #168]	@ (80184ac <_dtoa_r+0x39c>)
 8018402:	400d      	ands	r5, r1
 8018404:	6a1a      	ldr	r2, [r3, #32]
 8018406:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018408:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801840a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801840c:	f7e9 fc50 	bl	8001cb0 <__aeabi_ddiv>
 8018410:	900a      	str	r0, [sp, #40]	@ 0x28
 8018412:	910b      	str	r1, [sp, #44]	@ 0x2c
 8018414:	3401      	adds	r4, #1
 8018416:	4b25      	ldr	r3, [pc, #148]	@ (80184ac <_dtoa_r+0x39c>)
 8018418:	930c      	str	r3, [sp, #48]	@ 0x30
 801841a:	2d00      	cmp	r5, #0
 801841c:	d108      	bne.n	8018430 <_dtoa_r+0x320>
 801841e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8018420:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8018422:	0032      	movs	r2, r6
 8018424:	003b      	movs	r3, r7
 8018426:	f7e9 fc43 	bl	8001cb0 <__aeabi_ddiv>
 801842a:	900a      	str	r0, [sp, #40]	@ 0x28
 801842c:	910b      	str	r1, [sp, #44]	@ 0x2c
 801842e:	e05a      	b.n	80184e6 <_dtoa_r+0x3d6>
 8018430:	2301      	movs	r3, #1
 8018432:	421d      	tst	r5, r3
 8018434:	d009      	beq.n	801844a <_dtoa_r+0x33a>
 8018436:	18e4      	adds	r4, r4, r3
 8018438:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801843a:	0030      	movs	r0, r6
 801843c:	681a      	ldr	r2, [r3, #0]
 801843e:	685b      	ldr	r3, [r3, #4]
 8018440:	0039      	movs	r1, r7
 8018442:	f7ea f879 	bl	8002538 <__aeabi_dmul>
 8018446:	0006      	movs	r6, r0
 8018448:	000f      	movs	r7, r1
 801844a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801844c:	106d      	asrs	r5, r5, #1
 801844e:	3308      	adds	r3, #8
 8018450:	e7e2      	b.n	8018418 <_dtoa_r+0x308>
 8018452:	46c0      	nop			@ (mov r8, r8)
 8018454:	0801bb31 	.word	0x0801bb31
 8018458:	0801bb48 	.word	0x0801bb48
 801845c:	7ff00000 	.word	0x7ff00000
 8018460:	0000270f 	.word	0x0000270f
 8018464:	0801bb2d 	.word	0x0801bb2d
 8018468:	0801bb30 	.word	0x0801bb30
 801846c:	0801bb01 	.word	0x0801bb01
 8018470:	0801bb00 	.word	0x0801bb00
 8018474:	3ff00000 	.word	0x3ff00000
 8018478:	fffffc01 	.word	0xfffffc01
 801847c:	3ff80000 	.word	0x3ff80000
 8018480:	636f4361 	.word	0x636f4361
 8018484:	3fd287a7 	.word	0x3fd287a7
 8018488:	8b60c8b3 	.word	0x8b60c8b3
 801848c:	3fc68a28 	.word	0x3fc68a28
 8018490:	509f79fb 	.word	0x509f79fb
 8018494:	3fd34413 	.word	0x3fd34413
 8018498:	0801bc40 	.word	0x0801bc40
 801849c:	00000432 	.word	0x00000432
 80184a0:	00000412 	.word	0x00000412
 80184a4:	fe100000 	.word	0xfe100000
 80184a8:	0801bba0 	.word	0x0801bba0
 80184ac:	0801bc18 	.word	0x0801bc18
 80184b0:	9b04      	ldr	r3, [sp, #16]
 80184b2:	2402      	movs	r4, #2
 80184b4:	2b00      	cmp	r3, #0
 80184b6:	d016      	beq.n	80184e6 <_dtoa_r+0x3d6>
 80184b8:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80184ba:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80184bc:	220f      	movs	r2, #15
 80184be:	425d      	negs	r5, r3
 80184c0:	402a      	ands	r2, r5
 80184c2:	4bd7      	ldr	r3, [pc, #860]	@ (8018820 <_dtoa_r+0x710>)
 80184c4:	00d2      	lsls	r2, r2, #3
 80184c6:	189b      	adds	r3, r3, r2
 80184c8:	681a      	ldr	r2, [r3, #0]
 80184ca:	685b      	ldr	r3, [r3, #4]
 80184cc:	f7ea f834 	bl	8002538 <__aeabi_dmul>
 80184d0:	2701      	movs	r7, #1
 80184d2:	2300      	movs	r3, #0
 80184d4:	900a      	str	r0, [sp, #40]	@ 0x28
 80184d6:	910b      	str	r1, [sp, #44]	@ 0x2c
 80184d8:	4ed2      	ldr	r6, [pc, #840]	@ (8018824 <_dtoa_r+0x714>)
 80184da:	112d      	asrs	r5, r5, #4
 80184dc:	2d00      	cmp	r5, #0
 80184de:	d000      	beq.n	80184e2 <_dtoa_r+0x3d2>
 80184e0:	e0ba      	b.n	8018658 <_dtoa_r+0x548>
 80184e2:	2b00      	cmp	r3, #0
 80184e4:	d1a1      	bne.n	801842a <_dtoa_r+0x31a>
 80184e6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80184e8:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80184ea:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80184ec:	2b00      	cmp	r3, #0
 80184ee:	d100      	bne.n	80184f2 <_dtoa_r+0x3e2>
 80184f0:	e0bd      	b.n	801866e <_dtoa_r+0x55e>
 80184f2:	2200      	movs	r2, #0
 80184f4:	0030      	movs	r0, r6
 80184f6:	0039      	movs	r1, r7
 80184f8:	4bcb      	ldr	r3, [pc, #812]	@ (8018828 <_dtoa_r+0x718>)
 80184fa:	f7e7 ffad 	bl	8000458 <__aeabi_dcmplt>
 80184fe:	2800      	cmp	r0, #0
 8018500:	d100      	bne.n	8018504 <_dtoa_r+0x3f4>
 8018502:	e0b4      	b.n	801866e <_dtoa_r+0x55e>
 8018504:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018506:	2b00      	cmp	r3, #0
 8018508:	d100      	bne.n	801850c <_dtoa_r+0x3fc>
 801850a:	e0b0      	b.n	801866e <_dtoa_r+0x55e>
 801850c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801850e:	2b00      	cmp	r3, #0
 8018510:	dd39      	ble.n	8018586 <_dtoa_r+0x476>
 8018512:	9b04      	ldr	r3, [sp, #16]
 8018514:	2200      	movs	r2, #0
 8018516:	3b01      	subs	r3, #1
 8018518:	930c      	str	r3, [sp, #48]	@ 0x30
 801851a:	0030      	movs	r0, r6
 801851c:	4bc3      	ldr	r3, [pc, #780]	@ (801882c <_dtoa_r+0x71c>)
 801851e:	0039      	movs	r1, r7
 8018520:	f7ea f80a 	bl	8002538 <__aeabi_dmul>
 8018524:	900a      	str	r0, [sp, #40]	@ 0x28
 8018526:	910b      	str	r1, [sp, #44]	@ 0x2c
 8018528:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801852a:	3401      	adds	r4, #1
 801852c:	0020      	movs	r0, r4
 801852e:	9311      	str	r3, [sp, #68]	@ 0x44
 8018530:	f7ea fec4 	bl	80032bc <__aeabi_i2d>
 8018534:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8018536:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8018538:	f7e9 fffe 	bl	8002538 <__aeabi_dmul>
 801853c:	4bbc      	ldr	r3, [pc, #752]	@ (8018830 <_dtoa_r+0x720>)
 801853e:	2200      	movs	r2, #0
 8018540:	f7e9 f852 	bl	80015e8 <__aeabi_dadd>
 8018544:	4bbb      	ldr	r3, [pc, #748]	@ (8018834 <_dtoa_r+0x724>)
 8018546:	0006      	movs	r6, r0
 8018548:	18cf      	adds	r7, r1, r3
 801854a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801854c:	2b00      	cmp	r3, #0
 801854e:	d000      	beq.n	8018552 <_dtoa_r+0x442>
 8018550:	e091      	b.n	8018676 <_dtoa_r+0x566>
 8018552:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8018554:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8018556:	2200      	movs	r2, #0
 8018558:	4bb7      	ldr	r3, [pc, #732]	@ (8018838 <_dtoa_r+0x728>)
 801855a:	f7ea fab5 	bl	8002ac8 <__aeabi_dsub>
 801855e:	0032      	movs	r2, r6
 8018560:	003b      	movs	r3, r7
 8018562:	0004      	movs	r4, r0
 8018564:	000d      	movs	r5, r1
 8018566:	f7e7 ff8b 	bl	8000480 <__aeabi_dcmpgt>
 801856a:	2800      	cmp	r0, #0
 801856c:	d000      	beq.n	8018570 <_dtoa_r+0x460>
 801856e:	e29d      	b.n	8018aac <_dtoa_r+0x99c>
 8018570:	2180      	movs	r1, #128	@ 0x80
 8018572:	0609      	lsls	r1, r1, #24
 8018574:	187b      	adds	r3, r7, r1
 8018576:	0032      	movs	r2, r6
 8018578:	0020      	movs	r0, r4
 801857a:	0029      	movs	r1, r5
 801857c:	f7e7 ff6c 	bl	8000458 <__aeabi_dcmplt>
 8018580:	2800      	cmp	r0, #0
 8018582:	d000      	beq.n	8018586 <_dtoa_r+0x476>
 8018584:	e130      	b.n	80187e8 <_dtoa_r+0x6d8>
 8018586:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8018588:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801858a:	930a      	str	r3, [sp, #40]	@ 0x28
 801858c:	940b      	str	r4, [sp, #44]	@ 0x2c
 801858e:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8018590:	2b00      	cmp	r3, #0
 8018592:	da00      	bge.n	8018596 <_dtoa_r+0x486>
 8018594:	e177      	b.n	8018886 <_dtoa_r+0x776>
 8018596:	9a04      	ldr	r2, [sp, #16]
 8018598:	2a0e      	cmp	r2, #14
 801859a:	dd00      	ble.n	801859e <_dtoa_r+0x48e>
 801859c:	e173      	b.n	8018886 <_dtoa_r+0x776>
 801859e:	4ba0      	ldr	r3, [pc, #640]	@ (8018820 <_dtoa_r+0x710>)
 80185a0:	00d2      	lsls	r2, r2, #3
 80185a2:	189b      	adds	r3, r3, r2
 80185a4:	685c      	ldr	r4, [r3, #4]
 80185a6:	681b      	ldr	r3, [r3, #0]
 80185a8:	9306      	str	r3, [sp, #24]
 80185aa:	9407      	str	r4, [sp, #28]
 80185ac:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80185ae:	2b00      	cmp	r3, #0
 80185b0:	da03      	bge.n	80185ba <_dtoa_r+0x4aa>
 80185b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80185b4:	2b00      	cmp	r3, #0
 80185b6:	dc00      	bgt.n	80185ba <_dtoa_r+0x4aa>
 80185b8:	e106      	b.n	80187c8 <_dtoa_r+0x6b8>
 80185ba:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80185bc:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80185be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80185c0:	9d08      	ldr	r5, [sp, #32]
 80185c2:	3b01      	subs	r3, #1
 80185c4:	195b      	adds	r3, r3, r5
 80185c6:	930a      	str	r3, [sp, #40]	@ 0x28
 80185c8:	9a06      	ldr	r2, [sp, #24]
 80185ca:	9b07      	ldr	r3, [sp, #28]
 80185cc:	0030      	movs	r0, r6
 80185ce:	0039      	movs	r1, r7
 80185d0:	f7e9 fb6e 	bl	8001cb0 <__aeabi_ddiv>
 80185d4:	f7ea fe36 	bl	8003244 <__aeabi_d2iz>
 80185d8:	9009      	str	r0, [sp, #36]	@ 0x24
 80185da:	f7ea fe6f 	bl	80032bc <__aeabi_i2d>
 80185de:	9a06      	ldr	r2, [sp, #24]
 80185e0:	9b07      	ldr	r3, [sp, #28]
 80185e2:	f7e9 ffa9 	bl	8002538 <__aeabi_dmul>
 80185e6:	0002      	movs	r2, r0
 80185e8:	000b      	movs	r3, r1
 80185ea:	0030      	movs	r0, r6
 80185ec:	0039      	movs	r1, r7
 80185ee:	f7ea fa6b 	bl	8002ac8 <__aeabi_dsub>
 80185f2:	002b      	movs	r3, r5
 80185f4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80185f6:	3501      	adds	r5, #1
 80185f8:	3230      	adds	r2, #48	@ 0x30
 80185fa:	701a      	strb	r2, [r3, #0]
 80185fc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80185fe:	002c      	movs	r4, r5
 8018600:	429a      	cmp	r2, r3
 8018602:	d000      	beq.n	8018606 <_dtoa_r+0x4f6>
 8018604:	e131      	b.n	801886a <_dtoa_r+0x75a>
 8018606:	0002      	movs	r2, r0
 8018608:	000b      	movs	r3, r1
 801860a:	f7e8 ffed 	bl	80015e8 <__aeabi_dadd>
 801860e:	9a06      	ldr	r2, [sp, #24]
 8018610:	9b07      	ldr	r3, [sp, #28]
 8018612:	0006      	movs	r6, r0
 8018614:	000f      	movs	r7, r1
 8018616:	f7e7 ff33 	bl	8000480 <__aeabi_dcmpgt>
 801861a:	2800      	cmp	r0, #0
 801861c:	d000      	beq.n	8018620 <_dtoa_r+0x510>
 801861e:	e10f      	b.n	8018840 <_dtoa_r+0x730>
 8018620:	9a06      	ldr	r2, [sp, #24]
 8018622:	9b07      	ldr	r3, [sp, #28]
 8018624:	0030      	movs	r0, r6
 8018626:	0039      	movs	r1, r7
 8018628:	f7e7 ff10 	bl	800044c <__aeabi_dcmpeq>
 801862c:	2800      	cmp	r0, #0
 801862e:	d003      	beq.n	8018638 <_dtoa_r+0x528>
 8018630:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018632:	07dd      	lsls	r5, r3, #31
 8018634:	d500      	bpl.n	8018638 <_dtoa_r+0x528>
 8018636:	e103      	b.n	8018840 <_dtoa_r+0x730>
 8018638:	9905      	ldr	r1, [sp, #20]
 801863a:	9803      	ldr	r0, [sp, #12]
 801863c:	f000 fca6 	bl	8018f8c <_Bfree>
 8018640:	2300      	movs	r3, #0
 8018642:	7023      	strb	r3, [r4, #0]
 8018644:	9b04      	ldr	r3, [sp, #16]
 8018646:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8018648:	3301      	adds	r3, #1
 801864a:	6013      	str	r3, [r2, #0]
 801864c:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801864e:	2b00      	cmp	r3, #0
 8018650:	d100      	bne.n	8018654 <_dtoa_r+0x544>
 8018652:	e5a7      	b.n	80181a4 <_dtoa_r+0x94>
 8018654:	601c      	str	r4, [r3, #0]
 8018656:	e5a5      	b.n	80181a4 <_dtoa_r+0x94>
 8018658:	423d      	tst	r5, r7
 801865a:	d005      	beq.n	8018668 <_dtoa_r+0x558>
 801865c:	6832      	ldr	r2, [r6, #0]
 801865e:	6873      	ldr	r3, [r6, #4]
 8018660:	f7e9 ff6a 	bl	8002538 <__aeabi_dmul>
 8018664:	003b      	movs	r3, r7
 8018666:	3401      	adds	r4, #1
 8018668:	106d      	asrs	r5, r5, #1
 801866a:	3608      	adds	r6, #8
 801866c:	e736      	b.n	80184dc <_dtoa_r+0x3cc>
 801866e:	9b04      	ldr	r3, [sp, #16]
 8018670:	930c      	str	r3, [sp, #48]	@ 0x30
 8018672:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018674:	e75a      	b.n	801852c <_dtoa_r+0x41c>
 8018676:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8018678:	4b69      	ldr	r3, [pc, #420]	@ (8018820 <_dtoa_r+0x710>)
 801867a:	3a01      	subs	r2, #1
 801867c:	00d2      	lsls	r2, r2, #3
 801867e:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8018680:	189b      	adds	r3, r3, r2
 8018682:	681a      	ldr	r2, [r3, #0]
 8018684:	685b      	ldr	r3, [r3, #4]
 8018686:	2900      	cmp	r1, #0
 8018688:	d04c      	beq.n	8018724 <_dtoa_r+0x614>
 801868a:	2000      	movs	r0, #0
 801868c:	496b      	ldr	r1, [pc, #428]	@ (801883c <_dtoa_r+0x72c>)
 801868e:	f7e9 fb0f 	bl	8001cb0 <__aeabi_ddiv>
 8018692:	0032      	movs	r2, r6
 8018694:	003b      	movs	r3, r7
 8018696:	f7ea fa17 	bl	8002ac8 <__aeabi_dsub>
 801869a:	9a08      	ldr	r2, [sp, #32]
 801869c:	0006      	movs	r6, r0
 801869e:	4694      	mov	ip, r2
 80186a0:	000f      	movs	r7, r1
 80186a2:	9b08      	ldr	r3, [sp, #32]
 80186a4:	9316      	str	r3, [sp, #88]	@ 0x58
 80186a6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80186a8:	4463      	add	r3, ip
 80186aa:	9311      	str	r3, [sp, #68]	@ 0x44
 80186ac:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80186ae:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80186b0:	f7ea fdc8 	bl	8003244 <__aeabi_d2iz>
 80186b4:	0005      	movs	r5, r0
 80186b6:	f7ea fe01 	bl	80032bc <__aeabi_i2d>
 80186ba:	0002      	movs	r2, r0
 80186bc:	000b      	movs	r3, r1
 80186be:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80186c0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80186c2:	f7ea fa01 	bl	8002ac8 <__aeabi_dsub>
 80186c6:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80186c8:	3530      	adds	r5, #48	@ 0x30
 80186ca:	1c5c      	adds	r4, r3, #1
 80186cc:	701d      	strb	r5, [r3, #0]
 80186ce:	0032      	movs	r2, r6
 80186d0:	003b      	movs	r3, r7
 80186d2:	900a      	str	r0, [sp, #40]	@ 0x28
 80186d4:	910b      	str	r1, [sp, #44]	@ 0x2c
 80186d6:	f7e7 febf 	bl	8000458 <__aeabi_dcmplt>
 80186da:	2800      	cmp	r0, #0
 80186dc:	d16a      	bne.n	80187b4 <_dtoa_r+0x6a4>
 80186de:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80186e0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80186e2:	2000      	movs	r0, #0
 80186e4:	4950      	ldr	r1, [pc, #320]	@ (8018828 <_dtoa_r+0x718>)
 80186e6:	f7ea f9ef 	bl	8002ac8 <__aeabi_dsub>
 80186ea:	0032      	movs	r2, r6
 80186ec:	003b      	movs	r3, r7
 80186ee:	f7e7 feb3 	bl	8000458 <__aeabi_dcmplt>
 80186f2:	2800      	cmp	r0, #0
 80186f4:	d000      	beq.n	80186f8 <_dtoa_r+0x5e8>
 80186f6:	e0a5      	b.n	8018844 <_dtoa_r+0x734>
 80186f8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80186fa:	42a3      	cmp	r3, r4
 80186fc:	d100      	bne.n	8018700 <_dtoa_r+0x5f0>
 80186fe:	e742      	b.n	8018586 <_dtoa_r+0x476>
 8018700:	2200      	movs	r2, #0
 8018702:	0030      	movs	r0, r6
 8018704:	0039      	movs	r1, r7
 8018706:	4b49      	ldr	r3, [pc, #292]	@ (801882c <_dtoa_r+0x71c>)
 8018708:	f7e9 ff16 	bl	8002538 <__aeabi_dmul>
 801870c:	2200      	movs	r2, #0
 801870e:	0006      	movs	r6, r0
 8018710:	000f      	movs	r7, r1
 8018712:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8018714:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8018716:	4b45      	ldr	r3, [pc, #276]	@ (801882c <_dtoa_r+0x71c>)
 8018718:	f7e9 ff0e 	bl	8002538 <__aeabi_dmul>
 801871c:	9416      	str	r4, [sp, #88]	@ 0x58
 801871e:	900a      	str	r0, [sp, #40]	@ 0x28
 8018720:	910b      	str	r1, [sp, #44]	@ 0x2c
 8018722:	e7c3      	b.n	80186ac <_dtoa_r+0x59c>
 8018724:	0030      	movs	r0, r6
 8018726:	0039      	movs	r1, r7
 8018728:	f7e9 ff06 	bl	8002538 <__aeabi_dmul>
 801872c:	9d08      	ldr	r5, [sp, #32]
 801872e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8018730:	002b      	movs	r3, r5
 8018732:	4694      	mov	ip, r2
 8018734:	9016      	str	r0, [sp, #88]	@ 0x58
 8018736:	9117      	str	r1, [sp, #92]	@ 0x5c
 8018738:	4463      	add	r3, ip
 801873a:	9319      	str	r3, [sp, #100]	@ 0x64
 801873c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801873e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8018740:	f7ea fd80 	bl	8003244 <__aeabi_d2iz>
 8018744:	0004      	movs	r4, r0
 8018746:	f7ea fdb9 	bl	80032bc <__aeabi_i2d>
 801874a:	000b      	movs	r3, r1
 801874c:	0002      	movs	r2, r0
 801874e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8018750:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8018752:	f7ea f9b9 	bl	8002ac8 <__aeabi_dsub>
 8018756:	3430      	adds	r4, #48	@ 0x30
 8018758:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801875a:	702c      	strb	r4, [r5, #0]
 801875c:	3501      	adds	r5, #1
 801875e:	0006      	movs	r6, r0
 8018760:	000f      	movs	r7, r1
 8018762:	42ab      	cmp	r3, r5
 8018764:	d129      	bne.n	80187ba <_dtoa_r+0x6aa>
 8018766:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8018768:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801876a:	9b08      	ldr	r3, [sp, #32]
 801876c:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801876e:	469c      	mov	ip, r3
 8018770:	2200      	movs	r2, #0
 8018772:	4b32      	ldr	r3, [pc, #200]	@ (801883c <_dtoa_r+0x72c>)
 8018774:	4464      	add	r4, ip
 8018776:	f7e8 ff37 	bl	80015e8 <__aeabi_dadd>
 801877a:	0002      	movs	r2, r0
 801877c:	000b      	movs	r3, r1
 801877e:	0030      	movs	r0, r6
 8018780:	0039      	movs	r1, r7
 8018782:	f7e7 fe7d 	bl	8000480 <__aeabi_dcmpgt>
 8018786:	2800      	cmp	r0, #0
 8018788:	d15c      	bne.n	8018844 <_dtoa_r+0x734>
 801878a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801878c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801878e:	2000      	movs	r0, #0
 8018790:	492a      	ldr	r1, [pc, #168]	@ (801883c <_dtoa_r+0x72c>)
 8018792:	f7ea f999 	bl	8002ac8 <__aeabi_dsub>
 8018796:	0002      	movs	r2, r0
 8018798:	000b      	movs	r3, r1
 801879a:	0030      	movs	r0, r6
 801879c:	0039      	movs	r1, r7
 801879e:	f7e7 fe5b 	bl	8000458 <__aeabi_dcmplt>
 80187a2:	2800      	cmp	r0, #0
 80187a4:	d100      	bne.n	80187a8 <_dtoa_r+0x698>
 80187a6:	e6ee      	b.n	8018586 <_dtoa_r+0x476>
 80187a8:	0023      	movs	r3, r4
 80187aa:	3c01      	subs	r4, #1
 80187ac:	7822      	ldrb	r2, [r4, #0]
 80187ae:	2a30      	cmp	r2, #48	@ 0x30
 80187b0:	d0fa      	beq.n	80187a8 <_dtoa_r+0x698>
 80187b2:	001c      	movs	r4, r3
 80187b4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80187b6:	9304      	str	r3, [sp, #16]
 80187b8:	e73e      	b.n	8018638 <_dtoa_r+0x528>
 80187ba:	2200      	movs	r2, #0
 80187bc:	4b1b      	ldr	r3, [pc, #108]	@ (801882c <_dtoa_r+0x71c>)
 80187be:	f7e9 febb 	bl	8002538 <__aeabi_dmul>
 80187c2:	900a      	str	r0, [sp, #40]	@ 0x28
 80187c4:	910b      	str	r1, [sp, #44]	@ 0x2c
 80187c6:	e7b9      	b.n	801873c <_dtoa_r+0x62c>
 80187c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80187ca:	2b00      	cmp	r3, #0
 80187cc:	d10c      	bne.n	80187e8 <_dtoa_r+0x6d8>
 80187ce:	9806      	ldr	r0, [sp, #24]
 80187d0:	9907      	ldr	r1, [sp, #28]
 80187d2:	2200      	movs	r2, #0
 80187d4:	4b18      	ldr	r3, [pc, #96]	@ (8018838 <_dtoa_r+0x728>)
 80187d6:	f7e9 feaf 	bl	8002538 <__aeabi_dmul>
 80187da:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80187dc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80187de:	f7e7 fe59 	bl	8000494 <__aeabi_dcmpge>
 80187e2:	2800      	cmp	r0, #0
 80187e4:	d100      	bne.n	80187e8 <_dtoa_r+0x6d8>
 80187e6:	e164      	b.n	8018ab2 <_dtoa_r+0x9a2>
 80187e8:	2600      	movs	r6, #0
 80187ea:	0037      	movs	r7, r6
 80187ec:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80187ee:	9c08      	ldr	r4, [sp, #32]
 80187f0:	43db      	mvns	r3, r3
 80187f2:	930c      	str	r3, [sp, #48]	@ 0x30
 80187f4:	2300      	movs	r3, #0
 80187f6:	9304      	str	r3, [sp, #16]
 80187f8:	0031      	movs	r1, r6
 80187fa:	9803      	ldr	r0, [sp, #12]
 80187fc:	f000 fbc6 	bl	8018f8c <_Bfree>
 8018800:	2f00      	cmp	r7, #0
 8018802:	d0d7      	beq.n	80187b4 <_dtoa_r+0x6a4>
 8018804:	9b04      	ldr	r3, [sp, #16]
 8018806:	2b00      	cmp	r3, #0
 8018808:	d005      	beq.n	8018816 <_dtoa_r+0x706>
 801880a:	42bb      	cmp	r3, r7
 801880c:	d003      	beq.n	8018816 <_dtoa_r+0x706>
 801880e:	0019      	movs	r1, r3
 8018810:	9803      	ldr	r0, [sp, #12]
 8018812:	f000 fbbb 	bl	8018f8c <_Bfree>
 8018816:	0039      	movs	r1, r7
 8018818:	9803      	ldr	r0, [sp, #12]
 801881a:	f000 fbb7 	bl	8018f8c <_Bfree>
 801881e:	e7c9      	b.n	80187b4 <_dtoa_r+0x6a4>
 8018820:	0801bc40 	.word	0x0801bc40
 8018824:	0801bc18 	.word	0x0801bc18
 8018828:	3ff00000 	.word	0x3ff00000
 801882c:	40240000 	.word	0x40240000
 8018830:	401c0000 	.word	0x401c0000
 8018834:	fcc00000 	.word	0xfcc00000
 8018838:	40140000 	.word	0x40140000
 801883c:	3fe00000 	.word	0x3fe00000
 8018840:	9b04      	ldr	r3, [sp, #16]
 8018842:	930c      	str	r3, [sp, #48]	@ 0x30
 8018844:	0023      	movs	r3, r4
 8018846:	001c      	movs	r4, r3
 8018848:	3b01      	subs	r3, #1
 801884a:	781a      	ldrb	r2, [r3, #0]
 801884c:	2a39      	cmp	r2, #57	@ 0x39
 801884e:	d108      	bne.n	8018862 <_dtoa_r+0x752>
 8018850:	9a08      	ldr	r2, [sp, #32]
 8018852:	429a      	cmp	r2, r3
 8018854:	d1f7      	bne.n	8018846 <_dtoa_r+0x736>
 8018856:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8018858:	9908      	ldr	r1, [sp, #32]
 801885a:	3201      	adds	r2, #1
 801885c:	920c      	str	r2, [sp, #48]	@ 0x30
 801885e:	2230      	movs	r2, #48	@ 0x30
 8018860:	700a      	strb	r2, [r1, #0]
 8018862:	781a      	ldrb	r2, [r3, #0]
 8018864:	3201      	adds	r2, #1
 8018866:	701a      	strb	r2, [r3, #0]
 8018868:	e7a4      	b.n	80187b4 <_dtoa_r+0x6a4>
 801886a:	2200      	movs	r2, #0
 801886c:	4bc6      	ldr	r3, [pc, #792]	@ (8018b88 <_dtoa_r+0xa78>)
 801886e:	f7e9 fe63 	bl	8002538 <__aeabi_dmul>
 8018872:	2200      	movs	r2, #0
 8018874:	2300      	movs	r3, #0
 8018876:	0006      	movs	r6, r0
 8018878:	000f      	movs	r7, r1
 801887a:	f7e7 fde7 	bl	800044c <__aeabi_dcmpeq>
 801887e:	2800      	cmp	r0, #0
 8018880:	d100      	bne.n	8018884 <_dtoa_r+0x774>
 8018882:	e6a1      	b.n	80185c8 <_dtoa_r+0x4b8>
 8018884:	e6d8      	b.n	8018638 <_dtoa_r+0x528>
 8018886:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8018888:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 801888a:	9c06      	ldr	r4, [sp, #24]
 801888c:	2f00      	cmp	r7, #0
 801888e:	d014      	beq.n	80188ba <_dtoa_r+0x7aa>
 8018890:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8018892:	2a01      	cmp	r2, #1
 8018894:	dd00      	ble.n	8018898 <_dtoa_r+0x788>
 8018896:	e0c8      	b.n	8018a2a <_dtoa_r+0x91a>
 8018898:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801889a:	2a00      	cmp	r2, #0
 801889c:	d100      	bne.n	80188a0 <_dtoa_r+0x790>
 801889e:	e0be      	b.n	8018a1e <_dtoa_r+0x90e>
 80188a0:	4aba      	ldr	r2, [pc, #744]	@ (8018b8c <_dtoa_r+0xa7c>)
 80188a2:	189b      	adds	r3, r3, r2
 80188a4:	9a06      	ldr	r2, [sp, #24]
 80188a6:	2101      	movs	r1, #1
 80188a8:	18d2      	adds	r2, r2, r3
 80188aa:	9206      	str	r2, [sp, #24]
 80188ac:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80188ae:	9803      	ldr	r0, [sp, #12]
 80188b0:	18d3      	adds	r3, r2, r3
 80188b2:	930d      	str	r3, [sp, #52]	@ 0x34
 80188b4:	f000 fc22 	bl	80190fc <__i2b>
 80188b8:	0007      	movs	r7, r0
 80188ba:	2c00      	cmp	r4, #0
 80188bc:	d00e      	beq.n	80188dc <_dtoa_r+0x7cc>
 80188be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80188c0:	2b00      	cmp	r3, #0
 80188c2:	dd0b      	ble.n	80188dc <_dtoa_r+0x7cc>
 80188c4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80188c6:	0023      	movs	r3, r4
 80188c8:	4294      	cmp	r4, r2
 80188ca:	dd00      	ble.n	80188ce <_dtoa_r+0x7be>
 80188cc:	0013      	movs	r3, r2
 80188ce:	9a06      	ldr	r2, [sp, #24]
 80188d0:	1ae4      	subs	r4, r4, r3
 80188d2:	1ad2      	subs	r2, r2, r3
 80188d4:	9206      	str	r2, [sp, #24]
 80188d6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80188d8:	1ad3      	subs	r3, r2, r3
 80188da:	930d      	str	r3, [sp, #52]	@ 0x34
 80188dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80188de:	2b00      	cmp	r3, #0
 80188e0:	d01f      	beq.n	8018922 <_dtoa_r+0x812>
 80188e2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80188e4:	2b00      	cmp	r3, #0
 80188e6:	d100      	bne.n	80188ea <_dtoa_r+0x7da>
 80188e8:	e0b5      	b.n	8018a56 <_dtoa_r+0x946>
 80188ea:	2d00      	cmp	r5, #0
 80188ec:	d010      	beq.n	8018910 <_dtoa_r+0x800>
 80188ee:	0039      	movs	r1, r7
 80188f0:	002a      	movs	r2, r5
 80188f2:	9803      	ldr	r0, [sp, #12]
 80188f4:	f000 fccc 	bl	8019290 <__pow5mult>
 80188f8:	9a05      	ldr	r2, [sp, #20]
 80188fa:	0001      	movs	r1, r0
 80188fc:	0007      	movs	r7, r0
 80188fe:	9803      	ldr	r0, [sp, #12]
 8018900:	f000 fc14 	bl	801912c <__multiply>
 8018904:	0006      	movs	r6, r0
 8018906:	9905      	ldr	r1, [sp, #20]
 8018908:	9803      	ldr	r0, [sp, #12]
 801890a:	f000 fb3f 	bl	8018f8c <_Bfree>
 801890e:	9605      	str	r6, [sp, #20]
 8018910:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018912:	1b5a      	subs	r2, r3, r5
 8018914:	42ab      	cmp	r3, r5
 8018916:	d004      	beq.n	8018922 <_dtoa_r+0x812>
 8018918:	9905      	ldr	r1, [sp, #20]
 801891a:	9803      	ldr	r0, [sp, #12]
 801891c:	f000 fcb8 	bl	8019290 <__pow5mult>
 8018920:	9005      	str	r0, [sp, #20]
 8018922:	2101      	movs	r1, #1
 8018924:	9803      	ldr	r0, [sp, #12]
 8018926:	f000 fbe9 	bl	80190fc <__i2b>
 801892a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801892c:	0006      	movs	r6, r0
 801892e:	2b00      	cmp	r3, #0
 8018930:	d100      	bne.n	8018934 <_dtoa_r+0x824>
 8018932:	e1bc      	b.n	8018cae <_dtoa_r+0xb9e>
 8018934:	001a      	movs	r2, r3
 8018936:	0001      	movs	r1, r0
 8018938:	9803      	ldr	r0, [sp, #12]
 801893a:	f000 fca9 	bl	8019290 <__pow5mult>
 801893e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8018940:	0006      	movs	r6, r0
 8018942:	2500      	movs	r5, #0
 8018944:	2b01      	cmp	r3, #1
 8018946:	dc16      	bgt.n	8018976 <_dtoa_r+0x866>
 8018948:	2500      	movs	r5, #0
 801894a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801894c:	42ab      	cmp	r3, r5
 801894e:	d10e      	bne.n	801896e <_dtoa_r+0x85e>
 8018950:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8018952:	031b      	lsls	r3, r3, #12
 8018954:	42ab      	cmp	r3, r5
 8018956:	d10a      	bne.n	801896e <_dtoa_r+0x85e>
 8018958:	4b8d      	ldr	r3, [pc, #564]	@ (8018b90 <_dtoa_r+0xa80>)
 801895a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801895c:	4213      	tst	r3, r2
 801895e:	d006      	beq.n	801896e <_dtoa_r+0x85e>
 8018960:	9b06      	ldr	r3, [sp, #24]
 8018962:	3501      	adds	r5, #1
 8018964:	3301      	adds	r3, #1
 8018966:	9306      	str	r3, [sp, #24]
 8018968:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801896a:	3301      	adds	r3, #1
 801896c:	930d      	str	r3, [sp, #52]	@ 0x34
 801896e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8018970:	2001      	movs	r0, #1
 8018972:	2b00      	cmp	r3, #0
 8018974:	d008      	beq.n	8018988 <_dtoa_r+0x878>
 8018976:	6933      	ldr	r3, [r6, #16]
 8018978:	3303      	adds	r3, #3
 801897a:	009b      	lsls	r3, r3, #2
 801897c:	18f3      	adds	r3, r6, r3
 801897e:	6858      	ldr	r0, [r3, #4]
 8018980:	f000 fb6c 	bl	801905c <__hi0bits>
 8018984:	2320      	movs	r3, #32
 8018986:	1a18      	subs	r0, r3, r0
 8018988:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801898a:	1818      	adds	r0, r3, r0
 801898c:	0002      	movs	r2, r0
 801898e:	231f      	movs	r3, #31
 8018990:	401a      	ands	r2, r3
 8018992:	4218      	tst	r0, r3
 8018994:	d065      	beq.n	8018a62 <_dtoa_r+0x952>
 8018996:	3301      	adds	r3, #1
 8018998:	1a9b      	subs	r3, r3, r2
 801899a:	2b04      	cmp	r3, #4
 801899c:	dd5d      	ble.n	8018a5a <_dtoa_r+0x94a>
 801899e:	231c      	movs	r3, #28
 80189a0:	1a9b      	subs	r3, r3, r2
 80189a2:	9a06      	ldr	r2, [sp, #24]
 80189a4:	18e4      	adds	r4, r4, r3
 80189a6:	18d2      	adds	r2, r2, r3
 80189a8:	9206      	str	r2, [sp, #24]
 80189aa:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80189ac:	18d3      	adds	r3, r2, r3
 80189ae:	930d      	str	r3, [sp, #52]	@ 0x34
 80189b0:	9b06      	ldr	r3, [sp, #24]
 80189b2:	2b00      	cmp	r3, #0
 80189b4:	dd05      	ble.n	80189c2 <_dtoa_r+0x8b2>
 80189b6:	001a      	movs	r2, r3
 80189b8:	9905      	ldr	r1, [sp, #20]
 80189ba:	9803      	ldr	r0, [sp, #12]
 80189bc:	f000 fcc4 	bl	8019348 <__lshift>
 80189c0:	9005      	str	r0, [sp, #20]
 80189c2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80189c4:	2b00      	cmp	r3, #0
 80189c6:	dd05      	ble.n	80189d4 <_dtoa_r+0x8c4>
 80189c8:	0031      	movs	r1, r6
 80189ca:	001a      	movs	r2, r3
 80189cc:	9803      	ldr	r0, [sp, #12]
 80189ce:	f000 fcbb 	bl	8019348 <__lshift>
 80189d2:	0006      	movs	r6, r0
 80189d4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80189d6:	2b00      	cmp	r3, #0
 80189d8:	d045      	beq.n	8018a66 <_dtoa_r+0x956>
 80189da:	0031      	movs	r1, r6
 80189dc:	9805      	ldr	r0, [sp, #20]
 80189de:	f000 fd1f 	bl	8019420 <__mcmp>
 80189e2:	2800      	cmp	r0, #0
 80189e4:	da3f      	bge.n	8018a66 <_dtoa_r+0x956>
 80189e6:	9b04      	ldr	r3, [sp, #16]
 80189e8:	220a      	movs	r2, #10
 80189ea:	3b01      	subs	r3, #1
 80189ec:	930c      	str	r3, [sp, #48]	@ 0x30
 80189ee:	9905      	ldr	r1, [sp, #20]
 80189f0:	2300      	movs	r3, #0
 80189f2:	9803      	ldr	r0, [sp, #12]
 80189f4:	f000 faee 	bl	8018fd4 <__multadd>
 80189f8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80189fa:	9005      	str	r0, [sp, #20]
 80189fc:	2b00      	cmp	r3, #0
 80189fe:	d100      	bne.n	8018a02 <_dtoa_r+0x8f2>
 8018a00:	e15c      	b.n	8018cbc <_dtoa_r+0xbac>
 8018a02:	2300      	movs	r3, #0
 8018a04:	0039      	movs	r1, r7
 8018a06:	220a      	movs	r2, #10
 8018a08:	9803      	ldr	r0, [sp, #12]
 8018a0a:	f000 fae3 	bl	8018fd4 <__multadd>
 8018a0e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018a10:	0007      	movs	r7, r0
 8018a12:	2b00      	cmp	r3, #0
 8018a14:	dc55      	bgt.n	8018ac2 <_dtoa_r+0x9b2>
 8018a16:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8018a18:	2b02      	cmp	r3, #2
 8018a1a:	dc2d      	bgt.n	8018a78 <_dtoa_r+0x968>
 8018a1c:	e051      	b.n	8018ac2 <_dtoa_r+0x9b2>
 8018a1e:	2336      	movs	r3, #54	@ 0x36
 8018a20:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8018a22:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8018a24:	9c06      	ldr	r4, [sp, #24]
 8018a26:	1a9b      	subs	r3, r3, r2
 8018a28:	e73c      	b.n	80188a4 <_dtoa_r+0x794>
 8018a2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018a2c:	1e5d      	subs	r5, r3, #1
 8018a2e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018a30:	42ab      	cmp	r3, r5
 8018a32:	db08      	blt.n	8018a46 <_dtoa_r+0x936>
 8018a34:	1b5d      	subs	r5, r3, r5
 8018a36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018a38:	9c06      	ldr	r4, [sp, #24]
 8018a3a:	2b00      	cmp	r3, #0
 8018a3c:	db00      	blt.n	8018a40 <_dtoa_r+0x930>
 8018a3e:	e731      	b.n	80188a4 <_dtoa_r+0x794>
 8018a40:	1ae4      	subs	r4, r4, r3
 8018a42:	2300      	movs	r3, #0
 8018a44:	e72e      	b.n	80188a4 <_dtoa_r+0x794>
 8018a46:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018a48:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8018a4a:	1aeb      	subs	r3, r5, r3
 8018a4c:	18d3      	adds	r3, r2, r3
 8018a4e:	950f      	str	r5, [sp, #60]	@ 0x3c
 8018a50:	9314      	str	r3, [sp, #80]	@ 0x50
 8018a52:	2500      	movs	r5, #0
 8018a54:	e7ef      	b.n	8018a36 <_dtoa_r+0x926>
 8018a56:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8018a58:	e75e      	b.n	8018918 <_dtoa_r+0x808>
 8018a5a:	2b04      	cmp	r3, #4
 8018a5c:	d0a8      	beq.n	80189b0 <_dtoa_r+0x8a0>
 8018a5e:	331c      	adds	r3, #28
 8018a60:	e79f      	b.n	80189a2 <_dtoa_r+0x892>
 8018a62:	0013      	movs	r3, r2
 8018a64:	e7fb      	b.n	8018a5e <_dtoa_r+0x94e>
 8018a66:	9b04      	ldr	r3, [sp, #16]
 8018a68:	930c      	str	r3, [sp, #48]	@ 0x30
 8018a6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018a6c:	930e      	str	r3, [sp, #56]	@ 0x38
 8018a6e:	2b00      	cmp	r3, #0
 8018a70:	dc23      	bgt.n	8018aba <_dtoa_r+0x9aa>
 8018a72:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8018a74:	2b02      	cmp	r3, #2
 8018a76:	dd20      	ble.n	8018aba <_dtoa_r+0x9aa>
 8018a78:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018a7a:	2b00      	cmp	r3, #0
 8018a7c:	d000      	beq.n	8018a80 <_dtoa_r+0x970>
 8018a7e:	e6b5      	b.n	80187ec <_dtoa_r+0x6dc>
 8018a80:	0031      	movs	r1, r6
 8018a82:	2205      	movs	r2, #5
 8018a84:	9803      	ldr	r0, [sp, #12]
 8018a86:	f000 faa5 	bl	8018fd4 <__multadd>
 8018a8a:	0006      	movs	r6, r0
 8018a8c:	0001      	movs	r1, r0
 8018a8e:	9805      	ldr	r0, [sp, #20]
 8018a90:	f000 fcc6 	bl	8019420 <__mcmp>
 8018a94:	2800      	cmp	r0, #0
 8018a96:	dc00      	bgt.n	8018a9a <_dtoa_r+0x98a>
 8018a98:	e6a8      	b.n	80187ec <_dtoa_r+0x6dc>
 8018a9a:	9b08      	ldr	r3, [sp, #32]
 8018a9c:	9a08      	ldr	r2, [sp, #32]
 8018a9e:	1c5c      	adds	r4, r3, #1
 8018aa0:	2331      	movs	r3, #49	@ 0x31
 8018aa2:	7013      	strb	r3, [r2, #0]
 8018aa4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018aa6:	3301      	adds	r3, #1
 8018aa8:	930c      	str	r3, [sp, #48]	@ 0x30
 8018aaa:	e6a3      	b.n	80187f4 <_dtoa_r+0x6e4>
 8018aac:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8018aae:	0037      	movs	r7, r6
 8018ab0:	e7f3      	b.n	8018a9a <_dtoa_r+0x98a>
 8018ab2:	9b04      	ldr	r3, [sp, #16]
 8018ab4:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8018ab6:	930c      	str	r3, [sp, #48]	@ 0x30
 8018ab8:	e7f9      	b.n	8018aae <_dtoa_r+0x99e>
 8018aba:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8018abc:	2b00      	cmp	r3, #0
 8018abe:	d100      	bne.n	8018ac2 <_dtoa_r+0x9b2>
 8018ac0:	e100      	b.n	8018cc4 <_dtoa_r+0xbb4>
 8018ac2:	2c00      	cmp	r4, #0
 8018ac4:	dd05      	ble.n	8018ad2 <_dtoa_r+0x9c2>
 8018ac6:	0039      	movs	r1, r7
 8018ac8:	0022      	movs	r2, r4
 8018aca:	9803      	ldr	r0, [sp, #12]
 8018acc:	f000 fc3c 	bl	8019348 <__lshift>
 8018ad0:	0007      	movs	r7, r0
 8018ad2:	0038      	movs	r0, r7
 8018ad4:	2d00      	cmp	r5, #0
 8018ad6:	d018      	beq.n	8018b0a <_dtoa_r+0x9fa>
 8018ad8:	6879      	ldr	r1, [r7, #4]
 8018ada:	9803      	ldr	r0, [sp, #12]
 8018adc:	f000 fa12 	bl	8018f04 <_Balloc>
 8018ae0:	1e04      	subs	r4, r0, #0
 8018ae2:	d105      	bne.n	8018af0 <_dtoa_r+0x9e0>
 8018ae4:	0022      	movs	r2, r4
 8018ae6:	4b2b      	ldr	r3, [pc, #172]	@ (8018b94 <_dtoa_r+0xa84>)
 8018ae8:	482b      	ldr	r0, [pc, #172]	@ (8018b98 <_dtoa_r+0xa88>)
 8018aea:	492c      	ldr	r1, [pc, #176]	@ (8018b9c <_dtoa_r+0xa8c>)
 8018aec:	f7ff fb25 	bl	801813a <_dtoa_r+0x2a>
 8018af0:	0039      	movs	r1, r7
 8018af2:	693a      	ldr	r2, [r7, #16]
 8018af4:	310c      	adds	r1, #12
 8018af6:	3202      	adds	r2, #2
 8018af8:	0092      	lsls	r2, r2, #2
 8018afa:	300c      	adds	r0, #12
 8018afc:	f7ff fa70 	bl	8017fe0 <memcpy>
 8018b00:	2201      	movs	r2, #1
 8018b02:	0021      	movs	r1, r4
 8018b04:	9803      	ldr	r0, [sp, #12]
 8018b06:	f000 fc1f 	bl	8019348 <__lshift>
 8018b0a:	9b08      	ldr	r3, [sp, #32]
 8018b0c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8018b0e:	9306      	str	r3, [sp, #24]
 8018b10:	3b01      	subs	r3, #1
 8018b12:	189b      	adds	r3, r3, r2
 8018b14:	2201      	movs	r2, #1
 8018b16:	9704      	str	r7, [sp, #16]
 8018b18:	0007      	movs	r7, r0
 8018b1a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8018b1c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8018b1e:	4013      	ands	r3, r2
 8018b20:	930e      	str	r3, [sp, #56]	@ 0x38
 8018b22:	0031      	movs	r1, r6
 8018b24:	9805      	ldr	r0, [sp, #20]
 8018b26:	f7ff fa64 	bl	8017ff2 <quorem>
 8018b2a:	9904      	ldr	r1, [sp, #16]
 8018b2c:	0005      	movs	r5, r0
 8018b2e:	900a      	str	r0, [sp, #40]	@ 0x28
 8018b30:	9805      	ldr	r0, [sp, #20]
 8018b32:	f000 fc75 	bl	8019420 <__mcmp>
 8018b36:	003a      	movs	r2, r7
 8018b38:	900d      	str	r0, [sp, #52]	@ 0x34
 8018b3a:	0031      	movs	r1, r6
 8018b3c:	9803      	ldr	r0, [sp, #12]
 8018b3e:	f000 fc8b 	bl	8019458 <__mdiff>
 8018b42:	2201      	movs	r2, #1
 8018b44:	68c3      	ldr	r3, [r0, #12]
 8018b46:	0004      	movs	r4, r0
 8018b48:	3530      	adds	r5, #48	@ 0x30
 8018b4a:	9209      	str	r2, [sp, #36]	@ 0x24
 8018b4c:	2b00      	cmp	r3, #0
 8018b4e:	d104      	bne.n	8018b5a <_dtoa_r+0xa4a>
 8018b50:	0001      	movs	r1, r0
 8018b52:	9805      	ldr	r0, [sp, #20]
 8018b54:	f000 fc64 	bl	8019420 <__mcmp>
 8018b58:	9009      	str	r0, [sp, #36]	@ 0x24
 8018b5a:	0021      	movs	r1, r4
 8018b5c:	9803      	ldr	r0, [sp, #12]
 8018b5e:	f000 fa15 	bl	8018f8c <_Bfree>
 8018b62:	9b06      	ldr	r3, [sp, #24]
 8018b64:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018b66:	1c5c      	adds	r4, r3, #1
 8018b68:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8018b6a:	4313      	orrs	r3, r2
 8018b6c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8018b6e:	4313      	orrs	r3, r2
 8018b70:	d116      	bne.n	8018ba0 <_dtoa_r+0xa90>
 8018b72:	2d39      	cmp	r5, #57	@ 0x39
 8018b74:	d02f      	beq.n	8018bd6 <_dtoa_r+0xac6>
 8018b76:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8018b78:	2b00      	cmp	r3, #0
 8018b7a:	dd01      	ble.n	8018b80 <_dtoa_r+0xa70>
 8018b7c:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8018b7e:	3531      	adds	r5, #49	@ 0x31
 8018b80:	9b06      	ldr	r3, [sp, #24]
 8018b82:	701d      	strb	r5, [r3, #0]
 8018b84:	e638      	b.n	80187f8 <_dtoa_r+0x6e8>
 8018b86:	46c0      	nop			@ (mov r8, r8)
 8018b88:	40240000 	.word	0x40240000
 8018b8c:	00000433 	.word	0x00000433
 8018b90:	7ff00000 	.word	0x7ff00000
 8018b94:	0801bba0 	.word	0x0801bba0
 8018b98:	0801bb48 	.word	0x0801bb48
 8018b9c:	000002ef 	.word	0x000002ef
 8018ba0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8018ba2:	2b00      	cmp	r3, #0
 8018ba4:	db04      	blt.n	8018bb0 <_dtoa_r+0xaa0>
 8018ba6:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8018ba8:	4313      	orrs	r3, r2
 8018baa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8018bac:	4313      	orrs	r3, r2
 8018bae:	d11e      	bne.n	8018bee <_dtoa_r+0xade>
 8018bb0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018bb2:	2b00      	cmp	r3, #0
 8018bb4:	dde4      	ble.n	8018b80 <_dtoa_r+0xa70>
 8018bb6:	9905      	ldr	r1, [sp, #20]
 8018bb8:	2201      	movs	r2, #1
 8018bba:	9803      	ldr	r0, [sp, #12]
 8018bbc:	f000 fbc4 	bl	8019348 <__lshift>
 8018bc0:	0031      	movs	r1, r6
 8018bc2:	9005      	str	r0, [sp, #20]
 8018bc4:	f000 fc2c 	bl	8019420 <__mcmp>
 8018bc8:	2800      	cmp	r0, #0
 8018bca:	dc02      	bgt.n	8018bd2 <_dtoa_r+0xac2>
 8018bcc:	d1d8      	bne.n	8018b80 <_dtoa_r+0xa70>
 8018bce:	07eb      	lsls	r3, r5, #31
 8018bd0:	d5d6      	bpl.n	8018b80 <_dtoa_r+0xa70>
 8018bd2:	2d39      	cmp	r5, #57	@ 0x39
 8018bd4:	d1d2      	bne.n	8018b7c <_dtoa_r+0xa6c>
 8018bd6:	2339      	movs	r3, #57	@ 0x39
 8018bd8:	9a06      	ldr	r2, [sp, #24]
 8018bda:	7013      	strb	r3, [r2, #0]
 8018bdc:	0023      	movs	r3, r4
 8018bde:	001c      	movs	r4, r3
 8018be0:	3b01      	subs	r3, #1
 8018be2:	781a      	ldrb	r2, [r3, #0]
 8018be4:	2a39      	cmp	r2, #57	@ 0x39
 8018be6:	d04f      	beq.n	8018c88 <_dtoa_r+0xb78>
 8018be8:	3201      	adds	r2, #1
 8018bea:	701a      	strb	r2, [r3, #0]
 8018bec:	e604      	b.n	80187f8 <_dtoa_r+0x6e8>
 8018bee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018bf0:	2b00      	cmp	r3, #0
 8018bf2:	dd03      	ble.n	8018bfc <_dtoa_r+0xaec>
 8018bf4:	2d39      	cmp	r5, #57	@ 0x39
 8018bf6:	d0ee      	beq.n	8018bd6 <_dtoa_r+0xac6>
 8018bf8:	3501      	adds	r5, #1
 8018bfa:	e7c1      	b.n	8018b80 <_dtoa_r+0xa70>
 8018bfc:	9b06      	ldr	r3, [sp, #24]
 8018bfe:	9a06      	ldr	r2, [sp, #24]
 8018c00:	701d      	strb	r5, [r3, #0]
 8018c02:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018c04:	4293      	cmp	r3, r2
 8018c06:	d02a      	beq.n	8018c5e <_dtoa_r+0xb4e>
 8018c08:	2300      	movs	r3, #0
 8018c0a:	220a      	movs	r2, #10
 8018c0c:	9905      	ldr	r1, [sp, #20]
 8018c0e:	9803      	ldr	r0, [sp, #12]
 8018c10:	f000 f9e0 	bl	8018fd4 <__multadd>
 8018c14:	9b04      	ldr	r3, [sp, #16]
 8018c16:	9005      	str	r0, [sp, #20]
 8018c18:	42bb      	cmp	r3, r7
 8018c1a:	d109      	bne.n	8018c30 <_dtoa_r+0xb20>
 8018c1c:	2300      	movs	r3, #0
 8018c1e:	220a      	movs	r2, #10
 8018c20:	9904      	ldr	r1, [sp, #16]
 8018c22:	9803      	ldr	r0, [sp, #12]
 8018c24:	f000 f9d6 	bl	8018fd4 <__multadd>
 8018c28:	9004      	str	r0, [sp, #16]
 8018c2a:	0007      	movs	r7, r0
 8018c2c:	9406      	str	r4, [sp, #24]
 8018c2e:	e778      	b.n	8018b22 <_dtoa_r+0xa12>
 8018c30:	9904      	ldr	r1, [sp, #16]
 8018c32:	2300      	movs	r3, #0
 8018c34:	220a      	movs	r2, #10
 8018c36:	9803      	ldr	r0, [sp, #12]
 8018c38:	f000 f9cc 	bl	8018fd4 <__multadd>
 8018c3c:	2300      	movs	r3, #0
 8018c3e:	9004      	str	r0, [sp, #16]
 8018c40:	220a      	movs	r2, #10
 8018c42:	0039      	movs	r1, r7
 8018c44:	9803      	ldr	r0, [sp, #12]
 8018c46:	f000 f9c5 	bl	8018fd4 <__multadd>
 8018c4a:	e7ee      	b.n	8018c2a <_dtoa_r+0xb1a>
 8018c4c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018c4e:	2401      	movs	r4, #1
 8018c50:	2b00      	cmp	r3, #0
 8018c52:	dd00      	ble.n	8018c56 <_dtoa_r+0xb46>
 8018c54:	001c      	movs	r4, r3
 8018c56:	9b08      	ldr	r3, [sp, #32]
 8018c58:	191c      	adds	r4, r3, r4
 8018c5a:	2300      	movs	r3, #0
 8018c5c:	9304      	str	r3, [sp, #16]
 8018c5e:	9905      	ldr	r1, [sp, #20]
 8018c60:	2201      	movs	r2, #1
 8018c62:	9803      	ldr	r0, [sp, #12]
 8018c64:	f000 fb70 	bl	8019348 <__lshift>
 8018c68:	0031      	movs	r1, r6
 8018c6a:	9005      	str	r0, [sp, #20]
 8018c6c:	f000 fbd8 	bl	8019420 <__mcmp>
 8018c70:	2800      	cmp	r0, #0
 8018c72:	dcb3      	bgt.n	8018bdc <_dtoa_r+0xacc>
 8018c74:	d101      	bne.n	8018c7a <_dtoa_r+0xb6a>
 8018c76:	07ed      	lsls	r5, r5, #31
 8018c78:	d4b0      	bmi.n	8018bdc <_dtoa_r+0xacc>
 8018c7a:	0023      	movs	r3, r4
 8018c7c:	001c      	movs	r4, r3
 8018c7e:	3b01      	subs	r3, #1
 8018c80:	781a      	ldrb	r2, [r3, #0]
 8018c82:	2a30      	cmp	r2, #48	@ 0x30
 8018c84:	d0fa      	beq.n	8018c7c <_dtoa_r+0xb6c>
 8018c86:	e5b7      	b.n	80187f8 <_dtoa_r+0x6e8>
 8018c88:	9a08      	ldr	r2, [sp, #32]
 8018c8a:	429a      	cmp	r2, r3
 8018c8c:	d1a7      	bne.n	8018bde <_dtoa_r+0xace>
 8018c8e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018c90:	3301      	adds	r3, #1
 8018c92:	930c      	str	r3, [sp, #48]	@ 0x30
 8018c94:	2331      	movs	r3, #49	@ 0x31
 8018c96:	7013      	strb	r3, [r2, #0]
 8018c98:	e5ae      	b.n	80187f8 <_dtoa_r+0x6e8>
 8018c9a:	4b15      	ldr	r3, [pc, #84]	@ (8018cf0 <_dtoa_r+0xbe0>)
 8018c9c:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8018c9e:	9308      	str	r3, [sp, #32]
 8018ca0:	4b14      	ldr	r3, [pc, #80]	@ (8018cf4 <_dtoa_r+0xbe4>)
 8018ca2:	2a00      	cmp	r2, #0
 8018ca4:	d001      	beq.n	8018caa <_dtoa_r+0xb9a>
 8018ca6:	f7ff fa7b 	bl	80181a0 <_dtoa_r+0x90>
 8018caa:	f7ff fa7b 	bl	80181a4 <_dtoa_r+0x94>
 8018cae:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8018cb0:	2b01      	cmp	r3, #1
 8018cb2:	dc00      	bgt.n	8018cb6 <_dtoa_r+0xba6>
 8018cb4:	e648      	b.n	8018948 <_dtoa_r+0x838>
 8018cb6:	2001      	movs	r0, #1
 8018cb8:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8018cba:	e665      	b.n	8018988 <_dtoa_r+0x878>
 8018cbc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018cbe:	2b00      	cmp	r3, #0
 8018cc0:	dc00      	bgt.n	8018cc4 <_dtoa_r+0xbb4>
 8018cc2:	e6d6      	b.n	8018a72 <_dtoa_r+0x962>
 8018cc4:	2400      	movs	r4, #0
 8018cc6:	0031      	movs	r1, r6
 8018cc8:	9805      	ldr	r0, [sp, #20]
 8018cca:	f7ff f992 	bl	8017ff2 <quorem>
 8018cce:	9b08      	ldr	r3, [sp, #32]
 8018cd0:	3030      	adds	r0, #48	@ 0x30
 8018cd2:	5518      	strb	r0, [r3, r4]
 8018cd4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018cd6:	3401      	adds	r4, #1
 8018cd8:	0005      	movs	r5, r0
 8018cda:	429c      	cmp	r4, r3
 8018cdc:	dab6      	bge.n	8018c4c <_dtoa_r+0xb3c>
 8018cde:	2300      	movs	r3, #0
 8018ce0:	220a      	movs	r2, #10
 8018ce2:	9905      	ldr	r1, [sp, #20]
 8018ce4:	9803      	ldr	r0, [sp, #12]
 8018ce6:	f000 f975 	bl	8018fd4 <__multadd>
 8018cea:	9005      	str	r0, [sp, #20]
 8018cec:	e7eb      	b.n	8018cc6 <_dtoa_r+0xbb6>
 8018cee:	46c0      	nop			@ (mov r8, r8)
 8018cf0:	0801bb24 	.word	0x0801bb24
 8018cf4:	0801bb2c 	.word	0x0801bb2c

08018cf8 <_free_r>:
 8018cf8:	b570      	push	{r4, r5, r6, lr}
 8018cfa:	0005      	movs	r5, r0
 8018cfc:	1e0c      	subs	r4, r1, #0
 8018cfe:	d010      	beq.n	8018d22 <_free_r+0x2a>
 8018d00:	3c04      	subs	r4, #4
 8018d02:	6823      	ldr	r3, [r4, #0]
 8018d04:	2b00      	cmp	r3, #0
 8018d06:	da00      	bge.n	8018d0a <_free_r+0x12>
 8018d08:	18e4      	adds	r4, r4, r3
 8018d0a:	0028      	movs	r0, r5
 8018d0c:	f000 f8ea 	bl	8018ee4 <__malloc_lock>
 8018d10:	4a1d      	ldr	r2, [pc, #116]	@ (8018d88 <_free_r+0x90>)
 8018d12:	6813      	ldr	r3, [r2, #0]
 8018d14:	2b00      	cmp	r3, #0
 8018d16:	d105      	bne.n	8018d24 <_free_r+0x2c>
 8018d18:	6063      	str	r3, [r4, #4]
 8018d1a:	6014      	str	r4, [r2, #0]
 8018d1c:	0028      	movs	r0, r5
 8018d1e:	f000 f8e9 	bl	8018ef4 <__malloc_unlock>
 8018d22:	bd70      	pop	{r4, r5, r6, pc}
 8018d24:	42a3      	cmp	r3, r4
 8018d26:	d908      	bls.n	8018d3a <_free_r+0x42>
 8018d28:	6820      	ldr	r0, [r4, #0]
 8018d2a:	1821      	adds	r1, r4, r0
 8018d2c:	428b      	cmp	r3, r1
 8018d2e:	d1f3      	bne.n	8018d18 <_free_r+0x20>
 8018d30:	6819      	ldr	r1, [r3, #0]
 8018d32:	685b      	ldr	r3, [r3, #4]
 8018d34:	1809      	adds	r1, r1, r0
 8018d36:	6021      	str	r1, [r4, #0]
 8018d38:	e7ee      	b.n	8018d18 <_free_r+0x20>
 8018d3a:	001a      	movs	r2, r3
 8018d3c:	685b      	ldr	r3, [r3, #4]
 8018d3e:	2b00      	cmp	r3, #0
 8018d40:	d001      	beq.n	8018d46 <_free_r+0x4e>
 8018d42:	42a3      	cmp	r3, r4
 8018d44:	d9f9      	bls.n	8018d3a <_free_r+0x42>
 8018d46:	6811      	ldr	r1, [r2, #0]
 8018d48:	1850      	adds	r0, r2, r1
 8018d4a:	42a0      	cmp	r0, r4
 8018d4c:	d10b      	bne.n	8018d66 <_free_r+0x6e>
 8018d4e:	6820      	ldr	r0, [r4, #0]
 8018d50:	1809      	adds	r1, r1, r0
 8018d52:	1850      	adds	r0, r2, r1
 8018d54:	6011      	str	r1, [r2, #0]
 8018d56:	4283      	cmp	r3, r0
 8018d58:	d1e0      	bne.n	8018d1c <_free_r+0x24>
 8018d5a:	6818      	ldr	r0, [r3, #0]
 8018d5c:	685b      	ldr	r3, [r3, #4]
 8018d5e:	1841      	adds	r1, r0, r1
 8018d60:	6011      	str	r1, [r2, #0]
 8018d62:	6053      	str	r3, [r2, #4]
 8018d64:	e7da      	b.n	8018d1c <_free_r+0x24>
 8018d66:	42a0      	cmp	r0, r4
 8018d68:	d902      	bls.n	8018d70 <_free_r+0x78>
 8018d6a:	230c      	movs	r3, #12
 8018d6c:	602b      	str	r3, [r5, #0]
 8018d6e:	e7d5      	b.n	8018d1c <_free_r+0x24>
 8018d70:	6820      	ldr	r0, [r4, #0]
 8018d72:	1821      	adds	r1, r4, r0
 8018d74:	428b      	cmp	r3, r1
 8018d76:	d103      	bne.n	8018d80 <_free_r+0x88>
 8018d78:	6819      	ldr	r1, [r3, #0]
 8018d7a:	685b      	ldr	r3, [r3, #4]
 8018d7c:	1809      	adds	r1, r1, r0
 8018d7e:	6021      	str	r1, [r4, #0]
 8018d80:	6063      	str	r3, [r4, #4]
 8018d82:	6054      	str	r4, [r2, #4]
 8018d84:	e7ca      	b.n	8018d1c <_free_r+0x24>
 8018d86:	46c0      	nop			@ (mov r8, r8)
 8018d88:	20003f20 	.word	0x20003f20

08018d8c <malloc>:
 8018d8c:	b510      	push	{r4, lr}
 8018d8e:	4b03      	ldr	r3, [pc, #12]	@ (8018d9c <malloc+0x10>)
 8018d90:	0001      	movs	r1, r0
 8018d92:	6818      	ldr	r0, [r3, #0]
 8018d94:	f000 f826 	bl	8018de4 <_malloc_r>
 8018d98:	bd10      	pop	{r4, pc}
 8018d9a:	46c0      	nop			@ (mov r8, r8)
 8018d9c:	2000023c 	.word	0x2000023c

08018da0 <sbrk_aligned>:
 8018da0:	b570      	push	{r4, r5, r6, lr}
 8018da2:	4e0f      	ldr	r6, [pc, #60]	@ (8018de0 <sbrk_aligned+0x40>)
 8018da4:	000d      	movs	r5, r1
 8018da6:	6831      	ldr	r1, [r6, #0]
 8018da8:	0004      	movs	r4, r0
 8018daa:	2900      	cmp	r1, #0
 8018dac:	d102      	bne.n	8018db4 <sbrk_aligned+0x14>
 8018dae:	f001 f855 	bl	8019e5c <_sbrk_r>
 8018db2:	6030      	str	r0, [r6, #0]
 8018db4:	0029      	movs	r1, r5
 8018db6:	0020      	movs	r0, r4
 8018db8:	f001 f850 	bl	8019e5c <_sbrk_r>
 8018dbc:	1c43      	adds	r3, r0, #1
 8018dbe:	d103      	bne.n	8018dc8 <sbrk_aligned+0x28>
 8018dc0:	2501      	movs	r5, #1
 8018dc2:	426d      	negs	r5, r5
 8018dc4:	0028      	movs	r0, r5
 8018dc6:	bd70      	pop	{r4, r5, r6, pc}
 8018dc8:	2303      	movs	r3, #3
 8018dca:	1cc5      	adds	r5, r0, #3
 8018dcc:	439d      	bics	r5, r3
 8018dce:	42a8      	cmp	r0, r5
 8018dd0:	d0f8      	beq.n	8018dc4 <sbrk_aligned+0x24>
 8018dd2:	1a29      	subs	r1, r5, r0
 8018dd4:	0020      	movs	r0, r4
 8018dd6:	f001 f841 	bl	8019e5c <_sbrk_r>
 8018dda:	3001      	adds	r0, #1
 8018ddc:	d1f2      	bne.n	8018dc4 <sbrk_aligned+0x24>
 8018dde:	e7ef      	b.n	8018dc0 <sbrk_aligned+0x20>
 8018de0:	20003f1c 	.word	0x20003f1c

08018de4 <_malloc_r>:
 8018de4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018de6:	2203      	movs	r2, #3
 8018de8:	1ccb      	adds	r3, r1, #3
 8018dea:	4393      	bics	r3, r2
 8018dec:	3308      	adds	r3, #8
 8018dee:	0005      	movs	r5, r0
 8018df0:	001f      	movs	r7, r3
 8018df2:	2b0c      	cmp	r3, #12
 8018df4:	d234      	bcs.n	8018e60 <_malloc_r+0x7c>
 8018df6:	270c      	movs	r7, #12
 8018df8:	42b9      	cmp	r1, r7
 8018dfa:	d833      	bhi.n	8018e64 <_malloc_r+0x80>
 8018dfc:	0028      	movs	r0, r5
 8018dfe:	f000 f871 	bl	8018ee4 <__malloc_lock>
 8018e02:	4e37      	ldr	r6, [pc, #220]	@ (8018ee0 <_malloc_r+0xfc>)
 8018e04:	6833      	ldr	r3, [r6, #0]
 8018e06:	001c      	movs	r4, r3
 8018e08:	2c00      	cmp	r4, #0
 8018e0a:	d12f      	bne.n	8018e6c <_malloc_r+0x88>
 8018e0c:	0039      	movs	r1, r7
 8018e0e:	0028      	movs	r0, r5
 8018e10:	f7ff ffc6 	bl	8018da0 <sbrk_aligned>
 8018e14:	0004      	movs	r4, r0
 8018e16:	1c43      	adds	r3, r0, #1
 8018e18:	d15f      	bne.n	8018eda <_malloc_r+0xf6>
 8018e1a:	6834      	ldr	r4, [r6, #0]
 8018e1c:	9400      	str	r4, [sp, #0]
 8018e1e:	9b00      	ldr	r3, [sp, #0]
 8018e20:	2b00      	cmp	r3, #0
 8018e22:	d14a      	bne.n	8018eba <_malloc_r+0xd6>
 8018e24:	2c00      	cmp	r4, #0
 8018e26:	d052      	beq.n	8018ece <_malloc_r+0xea>
 8018e28:	6823      	ldr	r3, [r4, #0]
 8018e2a:	0028      	movs	r0, r5
 8018e2c:	18e3      	adds	r3, r4, r3
 8018e2e:	9900      	ldr	r1, [sp, #0]
 8018e30:	9301      	str	r3, [sp, #4]
 8018e32:	f001 f813 	bl	8019e5c <_sbrk_r>
 8018e36:	9b01      	ldr	r3, [sp, #4]
 8018e38:	4283      	cmp	r3, r0
 8018e3a:	d148      	bne.n	8018ece <_malloc_r+0xea>
 8018e3c:	6823      	ldr	r3, [r4, #0]
 8018e3e:	0028      	movs	r0, r5
 8018e40:	1aff      	subs	r7, r7, r3
 8018e42:	0039      	movs	r1, r7
 8018e44:	f7ff ffac 	bl	8018da0 <sbrk_aligned>
 8018e48:	3001      	adds	r0, #1
 8018e4a:	d040      	beq.n	8018ece <_malloc_r+0xea>
 8018e4c:	6823      	ldr	r3, [r4, #0]
 8018e4e:	19db      	adds	r3, r3, r7
 8018e50:	6023      	str	r3, [r4, #0]
 8018e52:	6833      	ldr	r3, [r6, #0]
 8018e54:	685a      	ldr	r2, [r3, #4]
 8018e56:	2a00      	cmp	r2, #0
 8018e58:	d133      	bne.n	8018ec2 <_malloc_r+0xde>
 8018e5a:	9b00      	ldr	r3, [sp, #0]
 8018e5c:	6033      	str	r3, [r6, #0]
 8018e5e:	e019      	b.n	8018e94 <_malloc_r+0xb0>
 8018e60:	2b00      	cmp	r3, #0
 8018e62:	dac9      	bge.n	8018df8 <_malloc_r+0x14>
 8018e64:	230c      	movs	r3, #12
 8018e66:	602b      	str	r3, [r5, #0]
 8018e68:	2000      	movs	r0, #0
 8018e6a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8018e6c:	6821      	ldr	r1, [r4, #0]
 8018e6e:	1bc9      	subs	r1, r1, r7
 8018e70:	d420      	bmi.n	8018eb4 <_malloc_r+0xd0>
 8018e72:	290b      	cmp	r1, #11
 8018e74:	d90a      	bls.n	8018e8c <_malloc_r+0xa8>
 8018e76:	19e2      	adds	r2, r4, r7
 8018e78:	6027      	str	r7, [r4, #0]
 8018e7a:	42a3      	cmp	r3, r4
 8018e7c:	d104      	bne.n	8018e88 <_malloc_r+0xa4>
 8018e7e:	6032      	str	r2, [r6, #0]
 8018e80:	6863      	ldr	r3, [r4, #4]
 8018e82:	6011      	str	r1, [r2, #0]
 8018e84:	6053      	str	r3, [r2, #4]
 8018e86:	e005      	b.n	8018e94 <_malloc_r+0xb0>
 8018e88:	605a      	str	r2, [r3, #4]
 8018e8a:	e7f9      	b.n	8018e80 <_malloc_r+0x9c>
 8018e8c:	6862      	ldr	r2, [r4, #4]
 8018e8e:	42a3      	cmp	r3, r4
 8018e90:	d10e      	bne.n	8018eb0 <_malloc_r+0xcc>
 8018e92:	6032      	str	r2, [r6, #0]
 8018e94:	0028      	movs	r0, r5
 8018e96:	f000 f82d 	bl	8018ef4 <__malloc_unlock>
 8018e9a:	0020      	movs	r0, r4
 8018e9c:	2207      	movs	r2, #7
 8018e9e:	300b      	adds	r0, #11
 8018ea0:	1d23      	adds	r3, r4, #4
 8018ea2:	4390      	bics	r0, r2
 8018ea4:	1ac2      	subs	r2, r0, r3
 8018ea6:	4298      	cmp	r0, r3
 8018ea8:	d0df      	beq.n	8018e6a <_malloc_r+0x86>
 8018eaa:	1a1b      	subs	r3, r3, r0
 8018eac:	50a3      	str	r3, [r4, r2]
 8018eae:	e7dc      	b.n	8018e6a <_malloc_r+0x86>
 8018eb0:	605a      	str	r2, [r3, #4]
 8018eb2:	e7ef      	b.n	8018e94 <_malloc_r+0xb0>
 8018eb4:	0023      	movs	r3, r4
 8018eb6:	6864      	ldr	r4, [r4, #4]
 8018eb8:	e7a6      	b.n	8018e08 <_malloc_r+0x24>
 8018eba:	9c00      	ldr	r4, [sp, #0]
 8018ebc:	6863      	ldr	r3, [r4, #4]
 8018ebe:	9300      	str	r3, [sp, #0]
 8018ec0:	e7ad      	b.n	8018e1e <_malloc_r+0x3a>
 8018ec2:	001a      	movs	r2, r3
 8018ec4:	685b      	ldr	r3, [r3, #4]
 8018ec6:	42a3      	cmp	r3, r4
 8018ec8:	d1fb      	bne.n	8018ec2 <_malloc_r+0xde>
 8018eca:	2300      	movs	r3, #0
 8018ecc:	e7da      	b.n	8018e84 <_malloc_r+0xa0>
 8018ece:	230c      	movs	r3, #12
 8018ed0:	0028      	movs	r0, r5
 8018ed2:	602b      	str	r3, [r5, #0]
 8018ed4:	f000 f80e 	bl	8018ef4 <__malloc_unlock>
 8018ed8:	e7c6      	b.n	8018e68 <_malloc_r+0x84>
 8018eda:	6007      	str	r7, [r0, #0]
 8018edc:	e7da      	b.n	8018e94 <_malloc_r+0xb0>
 8018ede:	46c0      	nop			@ (mov r8, r8)
 8018ee0:	20003f20 	.word	0x20003f20

08018ee4 <__malloc_lock>:
 8018ee4:	b510      	push	{r4, lr}
 8018ee6:	4802      	ldr	r0, [pc, #8]	@ (8018ef0 <__malloc_lock+0xc>)
 8018ee8:	f7ff f86d 	bl	8017fc6 <__retarget_lock_acquire_recursive>
 8018eec:	bd10      	pop	{r4, pc}
 8018eee:	46c0      	nop			@ (mov r8, r8)
 8018ef0:	20003f18 	.word	0x20003f18

08018ef4 <__malloc_unlock>:
 8018ef4:	b510      	push	{r4, lr}
 8018ef6:	4802      	ldr	r0, [pc, #8]	@ (8018f00 <__malloc_unlock+0xc>)
 8018ef8:	f7ff f866 	bl	8017fc8 <__retarget_lock_release_recursive>
 8018efc:	bd10      	pop	{r4, pc}
 8018efe:	46c0      	nop			@ (mov r8, r8)
 8018f00:	20003f18 	.word	0x20003f18

08018f04 <_Balloc>:
 8018f04:	b570      	push	{r4, r5, r6, lr}
 8018f06:	69c5      	ldr	r5, [r0, #28]
 8018f08:	0006      	movs	r6, r0
 8018f0a:	000c      	movs	r4, r1
 8018f0c:	2d00      	cmp	r5, #0
 8018f0e:	d10e      	bne.n	8018f2e <_Balloc+0x2a>
 8018f10:	2010      	movs	r0, #16
 8018f12:	f7ff ff3b 	bl	8018d8c <malloc>
 8018f16:	1e02      	subs	r2, r0, #0
 8018f18:	61f0      	str	r0, [r6, #28]
 8018f1a:	d104      	bne.n	8018f26 <_Balloc+0x22>
 8018f1c:	216b      	movs	r1, #107	@ 0x6b
 8018f1e:	4b19      	ldr	r3, [pc, #100]	@ (8018f84 <_Balloc+0x80>)
 8018f20:	4819      	ldr	r0, [pc, #100]	@ (8018f88 <_Balloc+0x84>)
 8018f22:	f000 ffad 	bl	8019e80 <__assert_func>
 8018f26:	6045      	str	r5, [r0, #4]
 8018f28:	6085      	str	r5, [r0, #8]
 8018f2a:	6005      	str	r5, [r0, #0]
 8018f2c:	60c5      	str	r5, [r0, #12]
 8018f2e:	69f5      	ldr	r5, [r6, #28]
 8018f30:	68eb      	ldr	r3, [r5, #12]
 8018f32:	2b00      	cmp	r3, #0
 8018f34:	d013      	beq.n	8018f5e <_Balloc+0x5a>
 8018f36:	69f3      	ldr	r3, [r6, #28]
 8018f38:	00a2      	lsls	r2, r4, #2
 8018f3a:	68db      	ldr	r3, [r3, #12]
 8018f3c:	189b      	adds	r3, r3, r2
 8018f3e:	6818      	ldr	r0, [r3, #0]
 8018f40:	2800      	cmp	r0, #0
 8018f42:	d118      	bne.n	8018f76 <_Balloc+0x72>
 8018f44:	2101      	movs	r1, #1
 8018f46:	000d      	movs	r5, r1
 8018f48:	40a5      	lsls	r5, r4
 8018f4a:	1d6a      	adds	r2, r5, #5
 8018f4c:	0030      	movs	r0, r6
 8018f4e:	0092      	lsls	r2, r2, #2
 8018f50:	f000 ffb4 	bl	8019ebc <_calloc_r>
 8018f54:	2800      	cmp	r0, #0
 8018f56:	d00c      	beq.n	8018f72 <_Balloc+0x6e>
 8018f58:	6044      	str	r4, [r0, #4]
 8018f5a:	6085      	str	r5, [r0, #8]
 8018f5c:	e00d      	b.n	8018f7a <_Balloc+0x76>
 8018f5e:	2221      	movs	r2, #33	@ 0x21
 8018f60:	2104      	movs	r1, #4
 8018f62:	0030      	movs	r0, r6
 8018f64:	f000 ffaa 	bl	8019ebc <_calloc_r>
 8018f68:	69f3      	ldr	r3, [r6, #28]
 8018f6a:	60e8      	str	r0, [r5, #12]
 8018f6c:	68db      	ldr	r3, [r3, #12]
 8018f6e:	2b00      	cmp	r3, #0
 8018f70:	d1e1      	bne.n	8018f36 <_Balloc+0x32>
 8018f72:	2000      	movs	r0, #0
 8018f74:	bd70      	pop	{r4, r5, r6, pc}
 8018f76:	6802      	ldr	r2, [r0, #0]
 8018f78:	601a      	str	r2, [r3, #0]
 8018f7a:	2300      	movs	r3, #0
 8018f7c:	6103      	str	r3, [r0, #16]
 8018f7e:	60c3      	str	r3, [r0, #12]
 8018f80:	e7f8      	b.n	8018f74 <_Balloc+0x70>
 8018f82:	46c0      	nop			@ (mov r8, r8)
 8018f84:	0801bb31 	.word	0x0801bb31
 8018f88:	0801bbb1 	.word	0x0801bbb1

08018f8c <_Bfree>:
 8018f8c:	b570      	push	{r4, r5, r6, lr}
 8018f8e:	69c6      	ldr	r6, [r0, #28]
 8018f90:	0005      	movs	r5, r0
 8018f92:	000c      	movs	r4, r1
 8018f94:	2e00      	cmp	r6, #0
 8018f96:	d10e      	bne.n	8018fb6 <_Bfree+0x2a>
 8018f98:	2010      	movs	r0, #16
 8018f9a:	f7ff fef7 	bl	8018d8c <malloc>
 8018f9e:	1e02      	subs	r2, r0, #0
 8018fa0:	61e8      	str	r0, [r5, #28]
 8018fa2:	d104      	bne.n	8018fae <_Bfree+0x22>
 8018fa4:	218f      	movs	r1, #143	@ 0x8f
 8018fa6:	4b09      	ldr	r3, [pc, #36]	@ (8018fcc <_Bfree+0x40>)
 8018fa8:	4809      	ldr	r0, [pc, #36]	@ (8018fd0 <_Bfree+0x44>)
 8018faa:	f000 ff69 	bl	8019e80 <__assert_func>
 8018fae:	6046      	str	r6, [r0, #4]
 8018fb0:	6086      	str	r6, [r0, #8]
 8018fb2:	6006      	str	r6, [r0, #0]
 8018fb4:	60c6      	str	r6, [r0, #12]
 8018fb6:	2c00      	cmp	r4, #0
 8018fb8:	d007      	beq.n	8018fca <_Bfree+0x3e>
 8018fba:	69eb      	ldr	r3, [r5, #28]
 8018fbc:	6862      	ldr	r2, [r4, #4]
 8018fbe:	68db      	ldr	r3, [r3, #12]
 8018fc0:	0092      	lsls	r2, r2, #2
 8018fc2:	189b      	adds	r3, r3, r2
 8018fc4:	681a      	ldr	r2, [r3, #0]
 8018fc6:	6022      	str	r2, [r4, #0]
 8018fc8:	601c      	str	r4, [r3, #0]
 8018fca:	bd70      	pop	{r4, r5, r6, pc}
 8018fcc:	0801bb31 	.word	0x0801bb31
 8018fd0:	0801bbb1 	.word	0x0801bbb1

08018fd4 <__multadd>:
 8018fd4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018fd6:	000f      	movs	r7, r1
 8018fd8:	9001      	str	r0, [sp, #4]
 8018fda:	000c      	movs	r4, r1
 8018fdc:	001e      	movs	r6, r3
 8018fde:	2000      	movs	r0, #0
 8018fe0:	690d      	ldr	r5, [r1, #16]
 8018fe2:	3714      	adds	r7, #20
 8018fe4:	683b      	ldr	r3, [r7, #0]
 8018fe6:	3001      	adds	r0, #1
 8018fe8:	b299      	uxth	r1, r3
 8018fea:	4351      	muls	r1, r2
 8018fec:	0c1b      	lsrs	r3, r3, #16
 8018fee:	4353      	muls	r3, r2
 8018ff0:	1989      	adds	r1, r1, r6
 8018ff2:	0c0e      	lsrs	r6, r1, #16
 8018ff4:	199b      	adds	r3, r3, r6
 8018ff6:	0c1e      	lsrs	r6, r3, #16
 8018ff8:	b289      	uxth	r1, r1
 8018ffa:	041b      	lsls	r3, r3, #16
 8018ffc:	185b      	adds	r3, r3, r1
 8018ffe:	c708      	stmia	r7!, {r3}
 8019000:	4285      	cmp	r5, r0
 8019002:	dcef      	bgt.n	8018fe4 <__multadd+0x10>
 8019004:	2e00      	cmp	r6, #0
 8019006:	d022      	beq.n	801904e <__multadd+0x7a>
 8019008:	68a3      	ldr	r3, [r4, #8]
 801900a:	42ab      	cmp	r3, r5
 801900c:	dc19      	bgt.n	8019042 <__multadd+0x6e>
 801900e:	6861      	ldr	r1, [r4, #4]
 8019010:	9801      	ldr	r0, [sp, #4]
 8019012:	3101      	adds	r1, #1
 8019014:	f7ff ff76 	bl	8018f04 <_Balloc>
 8019018:	1e07      	subs	r7, r0, #0
 801901a:	d105      	bne.n	8019028 <__multadd+0x54>
 801901c:	003a      	movs	r2, r7
 801901e:	21ba      	movs	r1, #186	@ 0xba
 8019020:	4b0c      	ldr	r3, [pc, #48]	@ (8019054 <__multadd+0x80>)
 8019022:	480d      	ldr	r0, [pc, #52]	@ (8019058 <__multadd+0x84>)
 8019024:	f000 ff2c 	bl	8019e80 <__assert_func>
 8019028:	0021      	movs	r1, r4
 801902a:	6922      	ldr	r2, [r4, #16]
 801902c:	310c      	adds	r1, #12
 801902e:	3202      	adds	r2, #2
 8019030:	0092      	lsls	r2, r2, #2
 8019032:	300c      	adds	r0, #12
 8019034:	f7fe ffd4 	bl	8017fe0 <memcpy>
 8019038:	0021      	movs	r1, r4
 801903a:	9801      	ldr	r0, [sp, #4]
 801903c:	f7ff ffa6 	bl	8018f8c <_Bfree>
 8019040:	003c      	movs	r4, r7
 8019042:	1d2b      	adds	r3, r5, #4
 8019044:	009b      	lsls	r3, r3, #2
 8019046:	18e3      	adds	r3, r4, r3
 8019048:	3501      	adds	r5, #1
 801904a:	605e      	str	r6, [r3, #4]
 801904c:	6125      	str	r5, [r4, #16]
 801904e:	0020      	movs	r0, r4
 8019050:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8019052:	46c0      	nop			@ (mov r8, r8)
 8019054:	0801bba0 	.word	0x0801bba0
 8019058:	0801bbb1 	.word	0x0801bbb1

0801905c <__hi0bits>:
 801905c:	2280      	movs	r2, #128	@ 0x80
 801905e:	0003      	movs	r3, r0
 8019060:	0252      	lsls	r2, r2, #9
 8019062:	2000      	movs	r0, #0
 8019064:	4293      	cmp	r3, r2
 8019066:	d201      	bcs.n	801906c <__hi0bits+0x10>
 8019068:	041b      	lsls	r3, r3, #16
 801906a:	3010      	adds	r0, #16
 801906c:	2280      	movs	r2, #128	@ 0x80
 801906e:	0452      	lsls	r2, r2, #17
 8019070:	4293      	cmp	r3, r2
 8019072:	d201      	bcs.n	8019078 <__hi0bits+0x1c>
 8019074:	3008      	adds	r0, #8
 8019076:	021b      	lsls	r3, r3, #8
 8019078:	2280      	movs	r2, #128	@ 0x80
 801907a:	0552      	lsls	r2, r2, #21
 801907c:	4293      	cmp	r3, r2
 801907e:	d201      	bcs.n	8019084 <__hi0bits+0x28>
 8019080:	3004      	adds	r0, #4
 8019082:	011b      	lsls	r3, r3, #4
 8019084:	2280      	movs	r2, #128	@ 0x80
 8019086:	05d2      	lsls	r2, r2, #23
 8019088:	4293      	cmp	r3, r2
 801908a:	d201      	bcs.n	8019090 <__hi0bits+0x34>
 801908c:	3002      	adds	r0, #2
 801908e:	009b      	lsls	r3, r3, #2
 8019090:	2b00      	cmp	r3, #0
 8019092:	db03      	blt.n	801909c <__hi0bits+0x40>
 8019094:	3001      	adds	r0, #1
 8019096:	4213      	tst	r3, r2
 8019098:	d100      	bne.n	801909c <__hi0bits+0x40>
 801909a:	2020      	movs	r0, #32
 801909c:	4770      	bx	lr

0801909e <__lo0bits>:
 801909e:	6803      	ldr	r3, [r0, #0]
 80190a0:	0001      	movs	r1, r0
 80190a2:	2207      	movs	r2, #7
 80190a4:	0018      	movs	r0, r3
 80190a6:	4010      	ands	r0, r2
 80190a8:	4213      	tst	r3, r2
 80190aa:	d00d      	beq.n	80190c8 <__lo0bits+0x2a>
 80190ac:	3a06      	subs	r2, #6
 80190ae:	2000      	movs	r0, #0
 80190b0:	4213      	tst	r3, r2
 80190b2:	d105      	bne.n	80190c0 <__lo0bits+0x22>
 80190b4:	3002      	adds	r0, #2
 80190b6:	4203      	tst	r3, r0
 80190b8:	d003      	beq.n	80190c2 <__lo0bits+0x24>
 80190ba:	40d3      	lsrs	r3, r2
 80190bc:	0010      	movs	r0, r2
 80190be:	600b      	str	r3, [r1, #0]
 80190c0:	4770      	bx	lr
 80190c2:	089b      	lsrs	r3, r3, #2
 80190c4:	600b      	str	r3, [r1, #0]
 80190c6:	e7fb      	b.n	80190c0 <__lo0bits+0x22>
 80190c8:	b29a      	uxth	r2, r3
 80190ca:	2a00      	cmp	r2, #0
 80190cc:	d101      	bne.n	80190d2 <__lo0bits+0x34>
 80190ce:	2010      	movs	r0, #16
 80190d0:	0c1b      	lsrs	r3, r3, #16
 80190d2:	b2da      	uxtb	r2, r3
 80190d4:	2a00      	cmp	r2, #0
 80190d6:	d101      	bne.n	80190dc <__lo0bits+0x3e>
 80190d8:	3008      	adds	r0, #8
 80190da:	0a1b      	lsrs	r3, r3, #8
 80190dc:	071a      	lsls	r2, r3, #28
 80190de:	d101      	bne.n	80190e4 <__lo0bits+0x46>
 80190e0:	3004      	adds	r0, #4
 80190e2:	091b      	lsrs	r3, r3, #4
 80190e4:	079a      	lsls	r2, r3, #30
 80190e6:	d101      	bne.n	80190ec <__lo0bits+0x4e>
 80190e8:	3002      	adds	r0, #2
 80190ea:	089b      	lsrs	r3, r3, #2
 80190ec:	07da      	lsls	r2, r3, #31
 80190ee:	d4e9      	bmi.n	80190c4 <__lo0bits+0x26>
 80190f0:	3001      	adds	r0, #1
 80190f2:	085b      	lsrs	r3, r3, #1
 80190f4:	d1e6      	bne.n	80190c4 <__lo0bits+0x26>
 80190f6:	2020      	movs	r0, #32
 80190f8:	e7e2      	b.n	80190c0 <__lo0bits+0x22>
	...

080190fc <__i2b>:
 80190fc:	b510      	push	{r4, lr}
 80190fe:	000c      	movs	r4, r1
 8019100:	2101      	movs	r1, #1
 8019102:	f7ff feff 	bl	8018f04 <_Balloc>
 8019106:	2800      	cmp	r0, #0
 8019108:	d107      	bne.n	801911a <__i2b+0x1e>
 801910a:	2146      	movs	r1, #70	@ 0x46
 801910c:	4c05      	ldr	r4, [pc, #20]	@ (8019124 <__i2b+0x28>)
 801910e:	0002      	movs	r2, r0
 8019110:	4b05      	ldr	r3, [pc, #20]	@ (8019128 <__i2b+0x2c>)
 8019112:	0020      	movs	r0, r4
 8019114:	31ff      	adds	r1, #255	@ 0xff
 8019116:	f000 feb3 	bl	8019e80 <__assert_func>
 801911a:	2301      	movs	r3, #1
 801911c:	6144      	str	r4, [r0, #20]
 801911e:	6103      	str	r3, [r0, #16]
 8019120:	bd10      	pop	{r4, pc}
 8019122:	46c0      	nop			@ (mov r8, r8)
 8019124:	0801bbb1 	.word	0x0801bbb1
 8019128:	0801bba0 	.word	0x0801bba0

0801912c <__multiply>:
 801912c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801912e:	0014      	movs	r4, r2
 8019130:	690a      	ldr	r2, [r1, #16]
 8019132:	6923      	ldr	r3, [r4, #16]
 8019134:	000d      	movs	r5, r1
 8019136:	b08b      	sub	sp, #44	@ 0x2c
 8019138:	429a      	cmp	r2, r3
 801913a:	db02      	blt.n	8019142 <__multiply+0x16>
 801913c:	0023      	movs	r3, r4
 801913e:	000c      	movs	r4, r1
 8019140:	001d      	movs	r5, r3
 8019142:	6927      	ldr	r7, [r4, #16]
 8019144:	692e      	ldr	r6, [r5, #16]
 8019146:	6861      	ldr	r1, [r4, #4]
 8019148:	19bb      	adds	r3, r7, r6
 801914a:	9303      	str	r3, [sp, #12]
 801914c:	68a3      	ldr	r3, [r4, #8]
 801914e:	19ba      	adds	r2, r7, r6
 8019150:	4293      	cmp	r3, r2
 8019152:	da00      	bge.n	8019156 <__multiply+0x2a>
 8019154:	3101      	adds	r1, #1
 8019156:	f7ff fed5 	bl	8018f04 <_Balloc>
 801915a:	9002      	str	r0, [sp, #8]
 801915c:	2800      	cmp	r0, #0
 801915e:	d106      	bne.n	801916e <__multiply+0x42>
 8019160:	21b1      	movs	r1, #177	@ 0xb1
 8019162:	4b49      	ldr	r3, [pc, #292]	@ (8019288 <__multiply+0x15c>)
 8019164:	4849      	ldr	r0, [pc, #292]	@ (801928c <__multiply+0x160>)
 8019166:	9a02      	ldr	r2, [sp, #8]
 8019168:	0049      	lsls	r1, r1, #1
 801916a:	f000 fe89 	bl	8019e80 <__assert_func>
 801916e:	9b02      	ldr	r3, [sp, #8]
 8019170:	2200      	movs	r2, #0
 8019172:	3314      	adds	r3, #20
 8019174:	469c      	mov	ip, r3
 8019176:	19bb      	adds	r3, r7, r6
 8019178:	009b      	lsls	r3, r3, #2
 801917a:	4463      	add	r3, ip
 801917c:	9304      	str	r3, [sp, #16]
 801917e:	4663      	mov	r3, ip
 8019180:	9904      	ldr	r1, [sp, #16]
 8019182:	428b      	cmp	r3, r1
 8019184:	d32a      	bcc.n	80191dc <__multiply+0xb0>
 8019186:	0023      	movs	r3, r4
 8019188:	00bf      	lsls	r7, r7, #2
 801918a:	3314      	adds	r3, #20
 801918c:	3514      	adds	r5, #20
 801918e:	9308      	str	r3, [sp, #32]
 8019190:	00b6      	lsls	r6, r6, #2
 8019192:	19db      	adds	r3, r3, r7
 8019194:	9305      	str	r3, [sp, #20]
 8019196:	19ab      	adds	r3, r5, r6
 8019198:	9309      	str	r3, [sp, #36]	@ 0x24
 801919a:	2304      	movs	r3, #4
 801919c:	9306      	str	r3, [sp, #24]
 801919e:	0023      	movs	r3, r4
 80191a0:	9a05      	ldr	r2, [sp, #20]
 80191a2:	3315      	adds	r3, #21
 80191a4:	9501      	str	r5, [sp, #4]
 80191a6:	429a      	cmp	r2, r3
 80191a8:	d305      	bcc.n	80191b6 <__multiply+0x8a>
 80191aa:	1b13      	subs	r3, r2, r4
 80191ac:	3b15      	subs	r3, #21
 80191ae:	089b      	lsrs	r3, r3, #2
 80191b0:	3301      	adds	r3, #1
 80191b2:	009b      	lsls	r3, r3, #2
 80191b4:	9306      	str	r3, [sp, #24]
 80191b6:	9b01      	ldr	r3, [sp, #4]
 80191b8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80191ba:	4293      	cmp	r3, r2
 80191bc:	d310      	bcc.n	80191e0 <__multiply+0xb4>
 80191be:	9b03      	ldr	r3, [sp, #12]
 80191c0:	2b00      	cmp	r3, #0
 80191c2:	dd05      	ble.n	80191d0 <__multiply+0xa4>
 80191c4:	9b04      	ldr	r3, [sp, #16]
 80191c6:	3b04      	subs	r3, #4
 80191c8:	9304      	str	r3, [sp, #16]
 80191ca:	681b      	ldr	r3, [r3, #0]
 80191cc:	2b00      	cmp	r3, #0
 80191ce:	d056      	beq.n	801927e <__multiply+0x152>
 80191d0:	9b02      	ldr	r3, [sp, #8]
 80191d2:	9a03      	ldr	r2, [sp, #12]
 80191d4:	0018      	movs	r0, r3
 80191d6:	611a      	str	r2, [r3, #16]
 80191d8:	b00b      	add	sp, #44	@ 0x2c
 80191da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80191dc:	c304      	stmia	r3!, {r2}
 80191de:	e7cf      	b.n	8019180 <__multiply+0x54>
 80191e0:	9b01      	ldr	r3, [sp, #4]
 80191e2:	6818      	ldr	r0, [r3, #0]
 80191e4:	b280      	uxth	r0, r0
 80191e6:	2800      	cmp	r0, #0
 80191e8:	d01e      	beq.n	8019228 <__multiply+0xfc>
 80191ea:	4667      	mov	r7, ip
 80191ec:	2500      	movs	r5, #0
 80191ee:	9e08      	ldr	r6, [sp, #32]
 80191f0:	ce02      	ldmia	r6!, {r1}
 80191f2:	683b      	ldr	r3, [r7, #0]
 80191f4:	9307      	str	r3, [sp, #28]
 80191f6:	b28b      	uxth	r3, r1
 80191f8:	4343      	muls	r3, r0
 80191fa:	001a      	movs	r2, r3
 80191fc:	466b      	mov	r3, sp
 80191fe:	0c09      	lsrs	r1, r1, #16
 8019200:	8b9b      	ldrh	r3, [r3, #28]
 8019202:	4341      	muls	r1, r0
 8019204:	18d3      	adds	r3, r2, r3
 8019206:	9a07      	ldr	r2, [sp, #28]
 8019208:	195b      	adds	r3, r3, r5
 801920a:	0c12      	lsrs	r2, r2, #16
 801920c:	1889      	adds	r1, r1, r2
 801920e:	0c1a      	lsrs	r2, r3, #16
 8019210:	188a      	adds	r2, r1, r2
 8019212:	b29b      	uxth	r3, r3
 8019214:	0c15      	lsrs	r5, r2, #16
 8019216:	0412      	lsls	r2, r2, #16
 8019218:	431a      	orrs	r2, r3
 801921a:	9b05      	ldr	r3, [sp, #20]
 801921c:	c704      	stmia	r7!, {r2}
 801921e:	42b3      	cmp	r3, r6
 8019220:	d8e6      	bhi.n	80191f0 <__multiply+0xc4>
 8019222:	4663      	mov	r3, ip
 8019224:	9a06      	ldr	r2, [sp, #24]
 8019226:	509d      	str	r5, [r3, r2]
 8019228:	9b01      	ldr	r3, [sp, #4]
 801922a:	6818      	ldr	r0, [r3, #0]
 801922c:	0c00      	lsrs	r0, r0, #16
 801922e:	d020      	beq.n	8019272 <__multiply+0x146>
 8019230:	4663      	mov	r3, ip
 8019232:	0025      	movs	r5, r4
 8019234:	4661      	mov	r1, ip
 8019236:	2700      	movs	r7, #0
 8019238:	681b      	ldr	r3, [r3, #0]
 801923a:	3514      	adds	r5, #20
 801923c:	682a      	ldr	r2, [r5, #0]
 801923e:	680e      	ldr	r6, [r1, #0]
 8019240:	b292      	uxth	r2, r2
 8019242:	4342      	muls	r2, r0
 8019244:	0c36      	lsrs	r6, r6, #16
 8019246:	1992      	adds	r2, r2, r6
 8019248:	19d2      	adds	r2, r2, r7
 801924a:	0416      	lsls	r6, r2, #16
 801924c:	b29b      	uxth	r3, r3
 801924e:	431e      	orrs	r6, r3
 8019250:	600e      	str	r6, [r1, #0]
 8019252:	cd40      	ldmia	r5!, {r6}
 8019254:	684b      	ldr	r3, [r1, #4]
 8019256:	0c36      	lsrs	r6, r6, #16
 8019258:	4346      	muls	r6, r0
 801925a:	b29b      	uxth	r3, r3
 801925c:	0c12      	lsrs	r2, r2, #16
 801925e:	18f3      	adds	r3, r6, r3
 8019260:	189b      	adds	r3, r3, r2
 8019262:	9a05      	ldr	r2, [sp, #20]
 8019264:	0c1f      	lsrs	r7, r3, #16
 8019266:	3104      	adds	r1, #4
 8019268:	42aa      	cmp	r2, r5
 801926a:	d8e7      	bhi.n	801923c <__multiply+0x110>
 801926c:	4662      	mov	r2, ip
 801926e:	9906      	ldr	r1, [sp, #24]
 8019270:	5053      	str	r3, [r2, r1]
 8019272:	9b01      	ldr	r3, [sp, #4]
 8019274:	3304      	adds	r3, #4
 8019276:	9301      	str	r3, [sp, #4]
 8019278:	2304      	movs	r3, #4
 801927a:	449c      	add	ip, r3
 801927c:	e79b      	b.n	80191b6 <__multiply+0x8a>
 801927e:	9b03      	ldr	r3, [sp, #12]
 8019280:	3b01      	subs	r3, #1
 8019282:	9303      	str	r3, [sp, #12]
 8019284:	e79b      	b.n	80191be <__multiply+0x92>
 8019286:	46c0      	nop			@ (mov r8, r8)
 8019288:	0801bba0 	.word	0x0801bba0
 801928c:	0801bbb1 	.word	0x0801bbb1

08019290 <__pow5mult>:
 8019290:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019292:	2303      	movs	r3, #3
 8019294:	0015      	movs	r5, r2
 8019296:	0007      	movs	r7, r0
 8019298:	000e      	movs	r6, r1
 801929a:	401a      	ands	r2, r3
 801929c:	421d      	tst	r5, r3
 801929e:	d008      	beq.n	80192b2 <__pow5mult+0x22>
 80192a0:	4925      	ldr	r1, [pc, #148]	@ (8019338 <__pow5mult+0xa8>)
 80192a2:	3a01      	subs	r2, #1
 80192a4:	0092      	lsls	r2, r2, #2
 80192a6:	5852      	ldr	r2, [r2, r1]
 80192a8:	2300      	movs	r3, #0
 80192aa:	0031      	movs	r1, r6
 80192ac:	f7ff fe92 	bl	8018fd4 <__multadd>
 80192b0:	0006      	movs	r6, r0
 80192b2:	10ad      	asrs	r5, r5, #2
 80192b4:	d03d      	beq.n	8019332 <__pow5mult+0xa2>
 80192b6:	69fc      	ldr	r4, [r7, #28]
 80192b8:	2c00      	cmp	r4, #0
 80192ba:	d10f      	bne.n	80192dc <__pow5mult+0x4c>
 80192bc:	2010      	movs	r0, #16
 80192be:	f7ff fd65 	bl	8018d8c <malloc>
 80192c2:	1e02      	subs	r2, r0, #0
 80192c4:	61f8      	str	r0, [r7, #28]
 80192c6:	d105      	bne.n	80192d4 <__pow5mult+0x44>
 80192c8:	21b4      	movs	r1, #180	@ 0xb4
 80192ca:	4b1c      	ldr	r3, [pc, #112]	@ (801933c <__pow5mult+0xac>)
 80192cc:	481c      	ldr	r0, [pc, #112]	@ (8019340 <__pow5mult+0xb0>)
 80192ce:	31ff      	adds	r1, #255	@ 0xff
 80192d0:	f000 fdd6 	bl	8019e80 <__assert_func>
 80192d4:	6044      	str	r4, [r0, #4]
 80192d6:	6084      	str	r4, [r0, #8]
 80192d8:	6004      	str	r4, [r0, #0]
 80192da:	60c4      	str	r4, [r0, #12]
 80192dc:	69fb      	ldr	r3, [r7, #28]
 80192de:	689c      	ldr	r4, [r3, #8]
 80192e0:	9301      	str	r3, [sp, #4]
 80192e2:	2c00      	cmp	r4, #0
 80192e4:	d108      	bne.n	80192f8 <__pow5mult+0x68>
 80192e6:	0038      	movs	r0, r7
 80192e8:	4916      	ldr	r1, [pc, #88]	@ (8019344 <__pow5mult+0xb4>)
 80192ea:	f7ff ff07 	bl	80190fc <__i2b>
 80192ee:	9b01      	ldr	r3, [sp, #4]
 80192f0:	0004      	movs	r4, r0
 80192f2:	6098      	str	r0, [r3, #8]
 80192f4:	2300      	movs	r3, #0
 80192f6:	6003      	str	r3, [r0, #0]
 80192f8:	2301      	movs	r3, #1
 80192fa:	421d      	tst	r5, r3
 80192fc:	d00a      	beq.n	8019314 <__pow5mult+0x84>
 80192fe:	0031      	movs	r1, r6
 8019300:	0022      	movs	r2, r4
 8019302:	0038      	movs	r0, r7
 8019304:	f7ff ff12 	bl	801912c <__multiply>
 8019308:	0031      	movs	r1, r6
 801930a:	9001      	str	r0, [sp, #4]
 801930c:	0038      	movs	r0, r7
 801930e:	f7ff fe3d 	bl	8018f8c <_Bfree>
 8019312:	9e01      	ldr	r6, [sp, #4]
 8019314:	106d      	asrs	r5, r5, #1
 8019316:	d00c      	beq.n	8019332 <__pow5mult+0xa2>
 8019318:	6820      	ldr	r0, [r4, #0]
 801931a:	2800      	cmp	r0, #0
 801931c:	d107      	bne.n	801932e <__pow5mult+0x9e>
 801931e:	0022      	movs	r2, r4
 8019320:	0021      	movs	r1, r4
 8019322:	0038      	movs	r0, r7
 8019324:	f7ff ff02 	bl	801912c <__multiply>
 8019328:	2300      	movs	r3, #0
 801932a:	6020      	str	r0, [r4, #0]
 801932c:	6003      	str	r3, [r0, #0]
 801932e:	0004      	movs	r4, r0
 8019330:	e7e2      	b.n	80192f8 <__pow5mult+0x68>
 8019332:	0030      	movs	r0, r6
 8019334:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8019336:	46c0      	nop			@ (mov r8, r8)
 8019338:	0801bc0c 	.word	0x0801bc0c
 801933c:	0801bb31 	.word	0x0801bb31
 8019340:	0801bbb1 	.word	0x0801bbb1
 8019344:	00000271 	.word	0x00000271

08019348 <__lshift>:
 8019348:	b5f0      	push	{r4, r5, r6, r7, lr}
 801934a:	000c      	movs	r4, r1
 801934c:	0016      	movs	r6, r2
 801934e:	6923      	ldr	r3, [r4, #16]
 8019350:	1157      	asrs	r7, r2, #5
 8019352:	b085      	sub	sp, #20
 8019354:	18fb      	adds	r3, r7, r3
 8019356:	9301      	str	r3, [sp, #4]
 8019358:	3301      	adds	r3, #1
 801935a:	9300      	str	r3, [sp, #0]
 801935c:	6849      	ldr	r1, [r1, #4]
 801935e:	68a3      	ldr	r3, [r4, #8]
 8019360:	9002      	str	r0, [sp, #8]
 8019362:	9a00      	ldr	r2, [sp, #0]
 8019364:	4293      	cmp	r3, r2
 8019366:	db10      	blt.n	801938a <__lshift+0x42>
 8019368:	9802      	ldr	r0, [sp, #8]
 801936a:	f7ff fdcb 	bl	8018f04 <_Balloc>
 801936e:	2300      	movs	r3, #0
 8019370:	0001      	movs	r1, r0
 8019372:	0005      	movs	r5, r0
 8019374:	001a      	movs	r2, r3
 8019376:	3114      	adds	r1, #20
 8019378:	4298      	cmp	r0, r3
 801937a:	d10c      	bne.n	8019396 <__lshift+0x4e>
 801937c:	21ef      	movs	r1, #239	@ 0xef
 801937e:	002a      	movs	r2, r5
 8019380:	4b25      	ldr	r3, [pc, #148]	@ (8019418 <__lshift+0xd0>)
 8019382:	4826      	ldr	r0, [pc, #152]	@ (801941c <__lshift+0xd4>)
 8019384:	0049      	lsls	r1, r1, #1
 8019386:	f000 fd7b 	bl	8019e80 <__assert_func>
 801938a:	3101      	adds	r1, #1
 801938c:	005b      	lsls	r3, r3, #1
 801938e:	e7e8      	b.n	8019362 <__lshift+0x1a>
 8019390:	0098      	lsls	r0, r3, #2
 8019392:	500a      	str	r2, [r1, r0]
 8019394:	3301      	adds	r3, #1
 8019396:	42bb      	cmp	r3, r7
 8019398:	dbfa      	blt.n	8019390 <__lshift+0x48>
 801939a:	43fb      	mvns	r3, r7
 801939c:	17db      	asrs	r3, r3, #31
 801939e:	401f      	ands	r7, r3
 80193a0:	00bf      	lsls	r7, r7, #2
 80193a2:	0023      	movs	r3, r4
 80193a4:	201f      	movs	r0, #31
 80193a6:	19c9      	adds	r1, r1, r7
 80193a8:	0037      	movs	r7, r6
 80193aa:	6922      	ldr	r2, [r4, #16]
 80193ac:	3314      	adds	r3, #20
 80193ae:	0092      	lsls	r2, r2, #2
 80193b0:	189a      	adds	r2, r3, r2
 80193b2:	4007      	ands	r7, r0
 80193b4:	4206      	tst	r6, r0
 80193b6:	d029      	beq.n	801940c <__lshift+0xc4>
 80193b8:	3001      	adds	r0, #1
 80193ba:	1bc0      	subs	r0, r0, r7
 80193bc:	9003      	str	r0, [sp, #12]
 80193be:	468c      	mov	ip, r1
 80193c0:	2000      	movs	r0, #0
 80193c2:	681e      	ldr	r6, [r3, #0]
 80193c4:	40be      	lsls	r6, r7
 80193c6:	4306      	orrs	r6, r0
 80193c8:	4660      	mov	r0, ip
 80193ca:	c040      	stmia	r0!, {r6}
 80193cc:	4684      	mov	ip, r0
 80193ce:	9e03      	ldr	r6, [sp, #12]
 80193d0:	cb01      	ldmia	r3!, {r0}
 80193d2:	40f0      	lsrs	r0, r6
 80193d4:	429a      	cmp	r2, r3
 80193d6:	d8f4      	bhi.n	80193c2 <__lshift+0x7a>
 80193d8:	0026      	movs	r6, r4
 80193da:	3615      	adds	r6, #21
 80193dc:	2304      	movs	r3, #4
 80193de:	42b2      	cmp	r2, r6
 80193e0:	d304      	bcc.n	80193ec <__lshift+0xa4>
 80193e2:	1b13      	subs	r3, r2, r4
 80193e4:	3b15      	subs	r3, #21
 80193e6:	089b      	lsrs	r3, r3, #2
 80193e8:	3301      	adds	r3, #1
 80193ea:	009b      	lsls	r3, r3, #2
 80193ec:	50c8      	str	r0, [r1, r3]
 80193ee:	2800      	cmp	r0, #0
 80193f0:	d002      	beq.n	80193f8 <__lshift+0xb0>
 80193f2:	9b01      	ldr	r3, [sp, #4]
 80193f4:	3302      	adds	r3, #2
 80193f6:	9300      	str	r3, [sp, #0]
 80193f8:	9b00      	ldr	r3, [sp, #0]
 80193fa:	9802      	ldr	r0, [sp, #8]
 80193fc:	3b01      	subs	r3, #1
 80193fe:	0021      	movs	r1, r4
 8019400:	612b      	str	r3, [r5, #16]
 8019402:	f7ff fdc3 	bl	8018f8c <_Bfree>
 8019406:	0028      	movs	r0, r5
 8019408:	b005      	add	sp, #20
 801940a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801940c:	cb01      	ldmia	r3!, {r0}
 801940e:	c101      	stmia	r1!, {r0}
 8019410:	429a      	cmp	r2, r3
 8019412:	d8fb      	bhi.n	801940c <__lshift+0xc4>
 8019414:	e7f0      	b.n	80193f8 <__lshift+0xb0>
 8019416:	46c0      	nop			@ (mov r8, r8)
 8019418:	0801bba0 	.word	0x0801bba0
 801941c:	0801bbb1 	.word	0x0801bbb1

08019420 <__mcmp>:
 8019420:	b530      	push	{r4, r5, lr}
 8019422:	690b      	ldr	r3, [r1, #16]
 8019424:	6904      	ldr	r4, [r0, #16]
 8019426:	0002      	movs	r2, r0
 8019428:	1ae0      	subs	r0, r4, r3
 801942a:	429c      	cmp	r4, r3
 801942c:	d10f      	bne.n	801944e <__mcmp+0x2e>
 801942e:	3214      	adds	r2, #20
 8019430:	009b      	lsls	r3, r3, #2
 8019432:	3114      	adds	r1, #20
 8019434:	0014      	movs	r4, r2
 8019436:	18c9      	adds	r1, r1, r3
 8019438:	18d2      	adds	r2, r2, r3
 801943a:	3a04      	subs	r2, #4
 801943c:	3904      	subs	r1, #4
 801943e:	6815      	ldr	r5, [r2, #0]
 8019440:	680b      	ldr	r3, [r1, #0]
 8019442:	429d      	cmp	r5, r3
 8019444:	d004      	beq.n	8019450 <__mcmp+0x30>
 8019446:	2001      	movs	r0, #1
 8019448:	429d      	cmp	r5, r3
 801944a:	d200      	bcs.n	801944e <__mcmp+0x2e>
 801944c:	3802      	subs	r0, #2
 801944e:	bd30      	pop	{r4, r5, pc}
 8019450:	4294      	cmp	r4, r2
 8019452:	d3f2      	bcc.n	801943a <__mcmp+0x1a>
 8019454:	e7fb      	b.n	801944e <__mcmp+0x2e>
	...

08019458 <__mdiff>:
 8019458:	b5f0      	push	{r4, r5, r6, r7, lr}
 801945a:	000c      	movs	r4, r1
 801945c:	b087      	sub	sp, #28
 801945e:	9000      	str	r0, [sp, #0]
 8019460:	0011      	movs	r1, r2
 8019462:	0020      	movs	r0, r4
 8019464:	0017      	movs	r7, r2
 8019466:	f7ff ffdb 	bl	8019420 <__mcmp>
 801946a:	1e05      	subs	r5, r0, #0
 801946c:	d110      	bne.n	8019490 <__mdiff+0x38>
 801946e:	0001      	movs	r1, r0
 8019470:	9800      	ldr	r0, [sp, #0]
 8019472:	f7ff fd47 	bl	8018f04 <_Balloc>
 8019476:	1e02      	subs	r2, r0, #0
 8019478:	d104      	bne.n	8019484 <__mdiff+0x2c>
 801947a:	4b40      	ldr	r3, [pc, #256]	@ (801957c <__mdiff+0x124>)
 801947c:	4840      	ldr	r0, [pc, #256]	@ (8019580 <__mdiff+0x128>)
 801947e:	4941      	ldr	r1, [pc, #260]	@ (8019584 <__mdiff+0x12c>)
 8019480:	f000 fcfe 	bl	8019e80 <__assert_func>
 8019484:	2301      	movs	r3, #1
 8019486:	6145      	str	r5, [r0, #20]
 8019488:	6103      	str	r3, [r0, #16]
 801948a:	0010      	movs	r0, r2
 801948c:	b007      	add	sp, #28
 801948e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019490:	2600      	movs	r6, #0
 8019492:	42b0      	cmp	r0, r6
 8019494:	da03      	bge.n	801949e <__mdiff+0x46>
 8019496:	0023      	movs	r3, r4
 8019498:	003c      	movs	r4, r7
 801949a:	001f      	movs	r7, r3
 801949c:	3601      	adds	r6, #1
 801949e:	6861      	ldr	r1, [r4, #4]
 80194a0:	9800      	ldr	r0, [sp, #0]
 80194a2:	f7ff fd2f 	bl	8018f04 <_Balloc>
 80194a6:	1e02      	subs	r2, r0, #0
 80194a8:	d103      	bne.n	80194b2 <__mdiff+0x5a>
 80194aa:	4b34      	ldr	r3, [pc, #208]	@ (801957c <__mdiff+0x124>)
 80194ac:	4834      	ldr	r0, [pc, #208]	@ (8019580 <__mdiff+0x128>)
 80194ae:	4936      	ldr	r1, [pc, #216]	@ (8019588 <__mdiff+0x130>)
 80194b0:	e7e6      	b.n	8019480 <__mdiff+0x28>
 80194b2:	6923      	ldr	r3, [r4, #16]
 80194b4:	3414      	adds	r4, #20
 80194b6:	9300      	str	r3, [sp, #0]
 80194b8:	009b      	lsls	r3, r3, #2
 80194ba:	18e3      	adds	r3, r4, r3
 80194bc:	0021      	movs	r1, r4
 80194be:	9401      	str	r4, [sp, #4]
 80194c0:	003c      	movs	r4, r7
 80194c2:	9302      	str	r3, [sp, #8]
 80194c4:	693b      	ldr	r3, [r7, #16]
 80194c6:	3414      	adds	r4, #20
 80194c8:	009b      	lsls	r3, r3, #2
 80194ca:	18e3      	adds	r3, r4, r3
 80194cc:	9303      	str	r3, [sp, #12]
 80194ce:	0003      	movs	r3, r0
 80194d0:	60c6      	str	r6, [r0, #12]
 80194d2:	468c      	mov	ip, r1
 80194d4:	2000      	movs	r0, #0
 80194d6:	3314      	adds	r3, #20
 80194d8:	9304      	str	r3, [sp, #16]
 80194da:	9305      	str	r3, [sp, #20]
 80194dc:	4663      	mov	r3, ip
 80194de:	cb20      	ldmia	r3!, {r5}
 80194e0:	b2a9      	uxth	r1, r5
 80194e2:	000e      	movs	r6, r1
 80194e4:	469c      	mov	ip, r3
 80194e6:	cc08      	ldmia	r4!, {r3}
 80194e8:	0c2d      	lsrs	r5, r5, #16
 80194ea:	b299      	uxth	r1, r3
 80194ec:	1a71      	subs	r1, r6, r1
 80194ee:	1809      	adds	r1, r1, r0
 80194f0:	0c1b      	lsrs	r3, r3, #16
 80194f2:	1408      	asrs	r0, r1, #16
 80194f4:	1aeb      	subs	r3, r5, r3
 80194f6:	181b      	adds	r3, r3, r0
 80194f8:	1418      	asrs	r0, r3, #16
 80194fa:	b289      	uxth	r1, r1
 80194fc:	041b      	lsls	r3, r3, #16
 80194fe:	4319      	orrs	r1, r3
 8019500:	9b05      	ldr	r3, [sp, #20]
 8019502:	c302      	stmia	r3!, {r1}
 8019504:	9305      	str	r3, [sp, #20]
 8019506:	9b03      	ldr	r3, [sp, #12]
 8019508:	42a3      	cmp	r3, r4
 801950a:	d8e7      	bhi.n	80194dc <__mdiff+0x84>
 801950c:	0039      	movs	r1, r7
 801950e:	9c03      	ldr	r4, [sp, #12]
 8019510:	3115      	adds	r1, #21
 8019512:	2304      	movs	r3, #4
 8019514:	428c      	cmp	r4, r1
 8019516:	d304      	bcc.n	8019522 <__mdiff+0xca>
 8019518:	1be3      	subs	r3, r4, r7
 801951a:	3b15      	subs	r3, #21
 801951c:	089b      	lsrs	r3, r3, #2
 801951e:	3301      	adds	r3, #1
 8019520:	009b      	lsls	r3, r3, #2
 8019522:	9901      	ldr	r1, [sp, #4]
 8019524:	18cd      	adds	r5, r1, r3
 8019526:	9904      	ldr	r1, [sp, #16]
 8019528:	002e      	movs	r6, r5
 801952a:	18cb      	adds	r3, r1, r3
 801952c:	001f      	movs	r7, r3
 801952e:	9902      	ldr	r1, [sp, #8]
 8019530:	428e      	cmp	r6, r1
 8019532:	d311      	bcc.n	8019558 <__mdiff+0x100>
 8019534:	9c02      	ldr	r4, [sp, #8]
 8019536:	1ee9      	subs	r1, r5, #3
 8019538:	2000      	movs	r0, #0
 801953a:	428c      	cmp	r4, r1
 801953c:	d304      	bcc.n	8019548 <__mdiff+0xf0>
 801953e:	0021      	movs	r1, r4
 8019540:	3103      	adds	r1, #3
 8019542:	1b49      	subs	r1, r1, r5
 8019544:	0889      	lsrs	r1, r1, #2
 8019546:	0088      	lsls	r0, r1, #2
 8019548:	181b      	adds	r3, r3, r0
 801954a:	3b04      	subs	r3, #4
 801954c:	6819      	ldr	r1, [r3, #0]
 801954e:	2900      	cmp	r1, #0
 8019550:	d010      	beq.n	8019574 <__mdiff+0x11c>
 8019552:	9b00      	ldr	r3, [sp, #0]
 8019554:	6113      	str	r3, [r2, #16]
 8019556:	e798      	b.n	801948a <__mdiff+0x32>
 8019558:	4684      	mov	ip, r0
 801955a:	ce02      	ldmia	r6!, {r1}
 801955c:	b288      	uxth	r0, r1
 801955e:	4460      	add	r0, ip
 8019560:	1400      	asrs	r0, r0, #16
 8019562:	0c0c      	lsrs	r4, r1, #16
 8019564:	1904      	adds	r4, r0, r4
 8019566:	4461      	add	r1, ip
 8019568:	1420      	asrs	r0, r4, #16
 801956a:	b289      	uxth	r1, r1
 801956c:	0424      	lsls	r4, r4, #16
 801956e:	4321      	orrs	r1, r4
 8019570:	c702      	stmia	r7!, {r1}
 8019572:	e7dc      	b.n	801952e <__mdiff+0xd6>
 8019574:	9900      	ldr	r1, [sp, #0]
 8019576:	3901      	subs	r1, #1
 8019578:	9100      	str	r1, [sp, #0]
 801957a:	e7e6      	b.n	801954a <__mdiff+0xf2>
 801957c:	0801bba0 	.word	0x0801bba0
 8019580:	0801bbb1 	.word	0x0801bbb1
 8019584:	00000237 	.word	0x00000237
 8019588:	00000245 	.word	0x00000245

0801958c <__d2b>:
 801958c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801958e:	2101      	movs	r1, #1
 8019590:	0016      	movs	r6, r2
 8019592:	001f      	movs	r7, r3
 8019594:	f7ff fcb6 	bl	8018f04 <_Balloc>
 8019598:	1e04      	subs	r4, r0, #0
 801959a:	d105      	bne.n	80195a8 <__d2b+0x1c>
 801959c:	0022      	movs	r2, r4
 801959e:	4b25      	ldr	r3, [pc, #148]	@ (8019634 <__d2b+0xa8>)
 80195a0:	4825      	ldr	r0, [pc, #148]	@ (8019638 <__d2b+0xac>)
 80195a2:	4926      	ldr	r1, [pc, #152]	@ (801963c <__d2b+0xb0>)
 80195a4:	f000 fc6c 	bl	8019e80 <__assert_func>
 80195a8:	033b      	lsls	r3, r7, #12
 80195aa:	007d      	lsls	r5, r7, #1
 80195ac:	0b1b      	lsrs	r3, r3, #12
 80195ae:	0d6d      	lsrs	r5, r5, #21
 80195b0:	d002      	beq.n	80195b8 <__d2b+0x2c>
 80195b2:	2280      	movs	r2, #128	@ 0x80
 80195b4:	0352      	lsls	r2, r2, #13
 80195b6:	4313      	orrs	r3, r2
 80195b8:	9301      	str	r3, [sp, #4]
 80195ba:	2e00      	cmp	r6, #0
 80195bc:	d025      	beq.n	801960a <__d2b+0x7e>
 80195be:	4668      	mov	r0, sp
 80195c0:	9600      	str	r6, [sp, #0]
 80195c2:	f7ff fd6c 	bl	801909e <__lo0bits>
 80195c6:	9b01      	ldr	r3, [sp, #4]
 80195c8:	9900      	ldr	r1, [sp, #0]
 80195ca:	2800      	cmp	r0, #0
 80195cc:	d01b      	beq.n	8019606 <__d2b+0x7a>
 80195ce:	2220      	movs	r2, #32
 80195d0:	001e      	movs	r6, r3
 80195d2:	1a12      	subs	r2, r2, r0
 80195d4:	4096      	lsls	r6, r2
 80195d6:	0032      	movs	r2, r6
 80195d8:	40c3      	lsrs	r3, r0
 80195da:	430a      	orrs	r2, r1
 80195dc:	6162      	str	r2, [r4, #20]
 80195de:	9301      	str	r3, [sp, #4]
 80195e0:	9e01      	ldr	r6, [sp, #4]
 80195e2:	61a6      	str	r6, [r4, #24]
 80195e4:	1e73      	subs	r3, r6, #1
 80195e6:	419e      	sbcs	r6, r3
 80195e8:	3601      	adds	r6, #1
 80195ea:	6126      	str	r6, [r4, #16]
 80195ec:	2d00      	cmp	r5, #0
 80195ee:	d014      	beq.n	801961a <__d2b+0x8e>
 80195f0:	2635      	movs	r6, #53	@ 0x35
 80195f2:	4b13      	ldr	r3, [pc, #76]	@ (8019640 <__d2b+0xb4>)
 80195f4:	18ed      	adds	r5, r5, r3
 80195f6:	9b08      	ldr	r3, [sp, #32]
 80195f8:	182d      	adds	r5, r5, r0
 80195fa:	601d      	str	r5, [r3, #0]
 80195fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80195fe:	1a36      	subs	r6, r6, r0
 8019600:	601e      	str	r6, [r3, #0]
 8019602:	0020      	movs	r0, r4
 8019604:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8019606:	6161      	str	r1, [r4, #20]
 8019608:	e7ea      	b.n	80195e0 <__d2b+0x54>
 801960a:	a801      	add	r0, sp, #4
 801960c:	f7ff fd47 	bl	801909e <__lo0bits>
 8019610:	9b01      	ldr	r3, [sp, #4]
 8019612:	2601      	movs	r6, #1
 8019614:	6163      	str	r3, [r4, #20]
 8019616:	3020      	adds	r0, #32
 8019618:	e7e7      	b.n	80195ea <__d2b+0x5e>
 801961a:	4b0a      	ldr	r3, [pc, #40]	@ (8019644 <__d2b+0xb8>)
 801961c:	18c0      	adds	r0, r0, r3
 801961e:	9b08      	ldr	r3, [sp, #32]
 8019620:	6018      	str	r0, [r3, #0]
 8019622:	4b09      	ldr	r3, [pc, #36]	@ (8019648 <__d2b+0xbc>)
 8019624:	18f3      	adds	r3, r6, r3
 8019626:	009b      	lsls	r3, r3, #2
 8019628:	18e3      	adds	r3, r4, r3
 801962a:	6958      	ldr	r0, [r3, #20]
 801962c:	f7ff fd16 	bl	801905c <__hi0bits>
 8019630:	0176      	lsls	r6, r6, #5
 8019632:	e7e3      	b.n	80195fc <__d2b+0x70>
 8019634:	0801bba0 	.word	0x0801bba0
 8019638:	0801bbb1 	.word	0x0801bbb1
 801963c:	0000030f 	.word	0x0000030f
 8019640:	fffffbcd 	.word	0xfffffbcd
 8019644:	fffffbce 	.word	0xfffffbce
 8019648:	3fffffff 	.word	0x3fffffff

0801964c <__ssputs_r>:
 801964c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801964e:	688e      	ldr	r6, [r1, #8]
 8019650:	b085      	sub	sp, #20
 8019652:	001f      	movs	r7, r3
 8019654:	000c      	movs	r4, r1
 8019656:	680b      	ldr	r3, [r1, #0]
 8019658:	9002      	str	r0, [sp, #8]
 801965a:	9203      	str	r2, [sp, #12]
 801965c:	42be      	cmp	r6, r7
 801965e:	d830      	bhi.n	80196c2 <__ssputs_r+0x76>
 8019660:	210c      	movs	r1, #12
 8019662:	5e62      	ldrsh	r2, [r4, r1]
 8019664:	2190      	movs	r1, #144	@ 0x90
 8019666:	00c9      	lsls	r1, r1, #3
 8019668:	420a      	tst	r2, r1
 801966a:	d028      	beq.n	80196be <__ssputs_r+0x72>
 801966c:	2003      	movs	r0, #3
 801966e:	6921      	ldr	r1, [r4, #16]
 8019670:	1a5b      	subs	r3, r3, r1
 8019672:	9301      	str	r3, [sp, #4]
 8019674:	6963      	ldr	r3, [r4, #20]
 8019676:	4343      	muls	r3, r0
 8019678:	9801      	ldr	r0, [sp, #4]
 801967a:	0fdd      	lsrs	r5, r3, #31
 801967c:	18ed      	adds	r5, r5, r3
 801967e:	1c7b      	adds	r3, r7, #1
 8019680:	181b      	adds	r3, r3, r0
 8019682:	106d      	asrs	r5, r5, #1
 8019684:	42ab      	cmp	r3, r5
 8019686:	d900      	bls.n	801968a <__ssputs_r+0x3e>
 8019688:	001d      	movs	r5, r3
 801968a:	0552      	lsls	r2, r2, #21
 801968c:	d528      	bpl.n	80196e0 <__ssputs_r+0x94>
 801968e:	0029      	movs	r1, r5
 8019690:	9802      	ldr	r0, [sp, #8]
 8019692:	f7ff fba7 	bl	8018de4 <_malloc_r>
 8019696:	1e06      	subs	r6, r0, #0
 8019698:	d02c      	beq.n	80196f4 <__ssputs_r+0xa8>
 801969a:	9a01      	ldr	r2, [sp, #4]
 801969c:	6921      	ldr	r1, [r4, #16]
 801969e:	f7fe fc9f 	bl	8017fe0 <memcpy>
 80196a2:	89a2      	ldrh	r2, [r4, #12]
 80196a4:	4b18      	ldr	r3, [pc, #96]	@ (8019708 <__ssputs_r+0xbc>)
 80196a6:	401a      	ands	r2, r3
 80196a8:	2380      	movs	r3, #128	@ 0x80
 80196aa:	4313      	orrs	r3, r2
 80196ac:	81a3      	strh	r3, [r4, #12]
 80196ae:	9b01      	ldr	r3, [sp, #4]
 80196b0:	6126      	str	r6, [r4, #16]
 80196b2:	18f6      	adds	r6, r6, r3
 80196b4:	6026      	str	r6, [r4, #0]
 80196b6:	003e      	movs	r6, r7
 80196b8:	6165      	str	r5, [r4, #20]
 80196ba:	1aed      	subs	r5, r5, r3
 80196bc:	60a5      	str	r5, [r4, #8]
 80196be:	42be      	cmp	r6, r7
 80196c0:	d900      	bls.n	80196c4 <__ssputs_r+0x78>
 80196c2:	003e      	movs	r6, r7
 80196c4:	0032      	movs	r2, r6
 80196c6:	9903      	ldr	r1, [sp, #12]
 80196c8:	6820      	ldr	r0, [r4, #0]
 80196ca:	f000 fbb3 	bl	8019e34 <memmove>
 80196ce:	2000      	movs	r0, #0
 80196d0:	68a3      	ldr	r3, [r4, #8]
 80196d2:	1b9b      	subs	r3, r3, r6
 80196d4:	60a3      	str	r3, [r4, #8]
 80196d6:	6823      	ldr	r3, [r4, #0]
 80196d8:	199b      	adds	r3, r3, r6
 80196da:	6023      	str	r3, [r4, #0]
 80196dc:	b005      	add	sp, #20
 80196de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80196e0:	002a      	movs	r2, r5
 80196e2:	9802      	ldr	r0, [sp, #8]
 80196e4:	f000 fc29 	bl	8019f3a <_realloc_r>
 80196e8:	1e06      	subs	r6, r0, #0
 80196ea:	d1e0      	bne.n	80196ae <__ssputs_r+0x62>
 80196ec:	6921      	ldr	r1, [r4, #16]
 80196ee:	9802      	ldr	r0, [sp, #8]
 80196f0:	f7ff fb02 	bl	8018cf8 <_free_r>
 80196f4:	230c      	movs	r3, #12
 80196f6:	2001      	movs	r0, #1
 80196f8:	9a02      	ldr	r2, [sp, #8]
 80196fa:	4240      	negs	r0, r0
 80196fc:	6013      	str	r3, [r2, #0]
 80196fe:	89a2      	ldrh	r2, [r4, #12]
 8019700:	3334      	adds	r3, #52	@ 0x34
 8019702:	4313      	orrs	r3, r2
 8019704:	81a3      	strh	r3, [r4, #12]
 8019706:	e7e9      	b.n	80196dc <__ssputs_r+0x90>
 8019708:	fffffb7f 	.word	0xfffffb7f

0801970c <_svfiprintf_r>:
 801970c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801970e:	b0a1      	sub	sp, #132	@ 0x84
 8019710:	9003      	str	r0, [sp, #12]
 8019712:	001d      	movs	r5, r3
 8019714:	898b      	ldrh	r3, [r1, #12]
 8019716:	000f      	movs	r7, r1
 8019718:	0016      	movs	r6, r2
 801971a:	061b      	lsls	r3, r3, #24
 801971c:	d511      	bpl.n	8019742 <_svfiprintf_r+0x36>
 801971e:	690b      	ldr	r3, [r1, #16]
 8019720:	2b00      	cmp	r3, #0
 8019722:	d10e      	bne.n	8019742 <_svfiprintf_r+0x36>
 8019724:	2140      	movs	r1, #64	@ 0x40
 8019726:	f7ff fb5d 	bl	8018de4 <_malloc_r>
 801972a:	6038      	str	r0, [r7, #0]
 801972c:	6138      	str	r0, [r7, #16]
 801972e:	2800      	cmp	r0, #0
 8019730:	d105      	bne.n	801973e <_svfiprintf_r+0x32>
 8019732:	230c      	movs	r3, #12
 8019734:	9a03      	ldr	r2, [sp, #12]
 8019736:	6013      	str	r3, [r2, #0]
 8019738:	2001      	movs	r0, #1
 801973a:	4240      	negs	r0, r0
 801973c:	e0cf      	b.n	80198de <_svfiprintf_r+0x1d2>
 801973e:	2340      	movs	r3, #64	@ 0x40
 8019740:	617b      	str	r3, [r7, #20]
 8019742:	2300      	movs	r3, #0
 8019744:	ac08      	add	r4, sp, #32
 8019746:	6163      	str	r3, [r4, #20]
 8019748:	3320      	adds	r3, #32
 801974a:	7663      	strb	r3, [r4, #25]
 801974c:	3310      	adds	r3, #16
 801974e:	76a3      	strb	r3, [r4, #26]
 8019750:	9507      	str	r5, [sp, #28]
 8019752:	0035      	movs	r5, r6
 8019754:	782b      	ldrb	r3, [r5, #0]
 8019756:	2b00      	cmp	r3, #0
 8019758:	d001      	beq.n	801975e <_svfiprintf_r+0x52>
 801975a:	2b25      	cmp	r3, #37	@ 0x25
 801975c:	d148      	bne.n	80197f0 <_svfiprintf_r+0xe4>
 801975e:	1bab      	subs	r3, r5, r6
 8019760:	9305      	str	r3, [sp, #20]
 8019762:	42b5      	cmp	r5, r6
 8019764:	d00b      	beq.n	801977e <_svfiprintf_r+0x72>
 8019766:	0032      	movs	r2, r6
 8019768:	0039      	movs	r1, r7
 801976a:	9803      	ldr	r0, [sp, #12]
 801976c:	f7ff ff6e 	bl	801964c <__ssputs_r>
 8019770:	3001      	adds	r0, #1
 8019772:	d100      	bne.n	8019776 <_svfiprintf_r+0x6a>
 8019774:	e0ae      	b.n	80198d4 <_svfiprintf_r+0x1c8>
 8019776:	6963      	ldr	r3, [r4, #20]
 8019778:	9a05      	ldr	r2, [sp, #20]
 801977a:	189b      	adds	r3, r3, r2
 801977c:	6163      	str	r3, [r4, #20]
 801977e:	782b      	ldrb	r3, [r5, #0]
 8019780:	2b00      	cmp	r3, #0
 8019782:	d100      	bne.n	8019786 <_svfiprintf_r+0x7a>
 8019784:	e0a6      	b.n	80198d4 <_svfiprintf_r+0x1c8>
 8019786:	2201      	movs	r2, #1
 8019788:	2300      	movs	r3, #0
 801978a:	4252      	negs	r2, r2
 801978c:	6062      	str	r2, [r4, #4]
 801978e:	a904      	add	r1, sp, #16
 8019790:	3254      	adds	r2, #84	@ 0x54
 8019792:	1852      	adds	r2, r2, r1
 8019794:	1c6e      	adds	r6, r5, #1
 8019796:	6023      	str	r3, [r4, #0]
 8019798:	60e3      	str	r3, [r4, #12]
 801979a:	60a3      	str	r3, [r4, #8]
 801979c:	7013      	strb	r3, [r2, #0]
 801979e:	65a3      	str	r3, [r4, #88]	@ 0x58
 80197a0:	4b54      	ldr	r3, [pc, #336]	@ (80198f4 <_svfiprintf_r+0x1e8>)
 80197a2:	2205      	movs	r2, #5
 80197a4:	0018      	movs	r0, r3
 80197a6:	7831      	ldrb	r1, [r6, #0]
 80197a8:	9305      	str	r3, [sp, #20]
 80197aa:	f7fe fc0e 	bl	8017fca <memchr>
 80197ae:	1c75      	adds	r5, r6, #1
 80197b0:	2800      	cmp	r0, #0
 80197b2:	d11f      	bne.n	80197f4 <_svfiprintf_r+0xe8>
 80197b4:	6822      	ldr	r2, [r4, #0]
 80197b6:	06d3      	lsls	r3, r2, #27
 80197b8:	d504      	bpl.n	80197c4 <_svfiprintf_r+0xb8>
 80197ba:	2353      	movs	r3, #83	@ 0x53
 80197bc:	a904      	add	r1, sp, #16
 80197be:	185b      	adds	r3, r3, r1
 80197c0:	2120      	movs	r1, #32
 80197c2:	7019      	strb	r1, [r3, #0]
 80197c4:	0713      	lsls	r3, r2, #28
 80197c6:	d504      	bpl.n	80197d2 <_svfiprintf_r+0xc6>
 80197c8:	2353      	movs	r3, #83	@ 0x53
 80197ca:	a904      	add	r1, sp, #16
 80197cc:	185b      	adds	r3, r3, r1
 80197ce:	212b      	movs	r1, #43	@ 0x2b
 80197d0:	7019      	strb	r1, [r3, #0]
 80197d2:	7833      	ldrb	r3, [r6, #0]
 80197d4:	2b2a      	cmp	r3, #42	@ 0x2a
 80197d6:	d016      	beq.n	8019806 <_svfiprintf_r+0xfa>
 80197d8:	0035      	movs	r5, r6
 80197da:	2100      	movs	r1, #0
 80197dc:	200a      	movs	r0, #10
 80197de:	68e3      	ldr	r3, [r4, #12]
 80197e0:	782a      	ldrb	r2, [r5, #0]
 80197e2:	1c6e      	adds	r6, r5, #1
 80197e4:	3a30      	subs	r2, #48	@ 0x30
 80197e6:	2a09      	cmp	r2, #9
 80197e8:	d950      	bls.n	801988c <_svfiprintf_r+0x180>
 80197ea:	2900      	cmp	r1, #0
 80197ec:	d111      	bne.n	8019812 <_svfiprintf_r+0x106>
 80197ee:	e017      	b.n	8019820 <_svfiprintf_r+0x114>
 80197f0:	3501      	adds	r5, #1
 80197f2:	e7af      	b.n	8019754 <_svfiprintf_r+0x48>
 80197f4:	9b05      	ldr	r3, [sp, #20]
 80197f6:	6822      	ldr	r2, [r4, #0]
 80197f8:	1ac0      	subs	r0, r0, r3
 80197fa:	2301      	movs	r3, #1
 80197fc:	4083      	lsls	r3, r0
 80197fe:	4313      	orrs	r3, r2
 8019800:	002e      	movs	r6, r5
 8019802:	6023      	str	r3, [r4, #0]
 8019804:	e7cc      	b.n	80197a0 <_svfiprintf_r+0x94>
 8019806:	9b07      	ldr	r3, [sp, #28]
 8019808:	1d19      	adds	r1, r3, #4
 801980a:	681b      	ldr	r3, [r3, #0]
 801980c:	9107      	str	r1, [sp, #28]
 801980e:	2b00      	cmp	r3, #0
 8019810:	db01      	blt.n	8019816 <_svfiprintf_r+0x10a>
 8019812:	930b      	str	r3, [sp, #44]	@ 0x2c
 8019814:	e004      	b.n	8019820 <_svfiprintf_r+0x114>
 8019816:	425b      	negs	r3, r3
 8019818:	60e3      	str	r3, [r4, #12]
 801981a:	2302      	movs	r3, #2
 801981c:	4313      	orrs	r3, r2
 801981e:	6023      	str	r3, [r4, #0]
 8019820:	782b      	ldrb	r3, [r5, #0]
 8019822:	2b2e      	cmp	r3, #46	@ 0x2e
 8019824:	d10c      	bne.n	8019840 <_svfiprintf_r+0x134>
 8019826:	786b      	ldrb	r3, [r5, #1]
 8019828:	2b2a      	cmp	r3, #42	@ 0x2a
 801982a:	d134      	bne.n	8019896 <_svfiprintf_r+0x18a>
 801982c:	9b07      	ldr	r3, [sp, #28]
 801982e:	3502      	adds	r5, #2
 8019830:	1d1a      	adds	r2, r3, #4
 8019832:	681b      	ldr	r3, [r3, #0]
 8019834:	9207      	str	r2, [sp, #28]
 8019836:	2b00      	cmp	r3, #0
 8019838:	da01      	bge.n	801983e <_svfiprintf_r+0x132>
 801983a:	2301      	movs	r3, #1
 801983c:	425b      	negs	r3, r3
 801983e:	9309      	str	r3, [sp, #36]	@ 0x24
 8019840:	4e2d      	ldr	r6, [pc, #180]	@ (80198f8 <_svfiprintf_r+0x1ec>)
 8019842:	2203      	movs	r2, #3
 8019844:	0030      	movs	r0, r6
 8019846:	7829      	ldrb	r1, [r5, #0]
 8019848:	f7fe fbbf 	bl	8017fca <memchr>
 801984c:	2800      	cmp	r0, #0
 801984e:	d006      	beq.n	801985e <_svfiprintf_r+0x152>
 8019850:	2340      	movs	r3, #64	@ 0x40
 8019852:	1b80      	subs	r0, r0, r6
 8019854:	4083      	lsls	r3, r0
 8019856:	6822      	ldr	r2, [r4, #0]
 8019858:	3501      	adds	r5, #1
 801985a:	4313      	orrs	r3, r2
 801985c:	6023      	str	r3, [r4, #0]
 801985e:	7829      	ldrb	r1, [r5, #0]
 8019860:	2206      	movs	r2, #6
 8019862:	4826      	ldr	r0, [pc, #152]	@ (80198fc <_svfiprintf_r+0x1f0>)
 8019864:	1c6e      	adds	r6, r5, #1
 8019866:	7621      	strb	r1, [r4, #24]
 8019868:	f7fe fbaf 	bl	8017fca <memchr>
 801986c:	2800      	cmp	r0, #0
 801986e:	d038      	beq.n	80198e2 <_svfiprintf_r+0x1d6>
 8019870:	4b23      	ldr	r3, [pc, #140]	@ (8019900 <_svfiprintf_r+0x1f4>)
 8019872:	2b00      	cmp	r3, #0
 8019874:	d122      	bne.n	80198bc <_svfiprintf_r+0x1b0>
 8019876:	2207      	movs	r2, #7
 8019878:	9b07      	ldr	r3, [sp, #28]
 801987a:	3307      	adds	r3, #7
 801987c:	4393      	bics	r3, r2
 801987e:	3308      	adds	r3, #8
 8019880:	9307      	str	r3, [sp, #28]
 8019882:	6963      	ldr	r3, [r4, #20]
 8019884:	9a04      	ldr	r2, [sp, #16]
 8019886:	189b      	adds	r3, r3, r2
 8019888:	6163      	str	r3, [r4, #20]
 801988a:	e762      	b.n	8019752 <_svfiprintf_r+0x46>
 801988c:	4343      	muls	r3, r0
 801988e:	0035      	movs	r5, r6
 8019890:	2101      	movs	r1, #1
 8019892:	189b      	adds	r3, r3, r2
 8019894:	e7a4      	b.n	80197e0 <_svfiprintf_r+0xd4>
 8019896:	2300      	movs	r3, #0
 8019898:	200a      	movs	r0, #10
 801989a:	0019      	movs	r1, r3
 801989c:	3501      	adds	r5, #1
 801989e:	6063      	str	r3, [r4, #4]
 80198a0:	782a      	ldrb	r2, [r5, #0]
 80198a2:	1c6e      	adds	r6, r5, #1
 80198a4:	3a30      	subs	r2, #48	@ 0x30
 80198a6:	2a09      	cmp	r2, #9
 80198a8:	d903      	bls.n	80198b2 <_svfiprintf_r+0x1a6>
 80198aa:	2b00      	cmp	r3, #0
 80198ac:	d0c8      	beq.n	8019840 <_svfiprintf_r+0x134>
 80198ae:	9109      	str	r1, [sp, #36]	@ 0x24
 80198b0:	e7c6      	b.n	8019840 <_svfiprintf_r+0x134>
 80198b2:	4341      	muls	r1, r0
 80198b4:	0035      	movs	r5, r6
 80198b6:	2301      	movs	r3, #1
 80198b8:	1889      	adds	r1, r1, r2
 80198ba:	e7f1      	b.n	80198a0 <_svfiprintf_r+0x194>
 80198bc:	aa07      	add	r2, sp, #28
 80198be:	9200      	str	r2, [sp, #0]
 80198c0:	0021      	movs	r1, r4
 80198c2:	003a      	movs	r2, r7
 80198c4:	4b0f      	ldr	r3, [pc, #60]	@ (8019904 <_svfiprintf_r+0x1f8>)
 80198c6:	9803      	ldr	r0, [sp, #12]
 80198c8:	f7fd fd8c 	bl	80173e4 <_printf_float>
 80198cc:	9004      	str	r0, [sp, #16]
 80198ce:	9b04      	ldr	r3, [sp, #16]
 80198d0:	3301      	adds	r3, #1
 80198d2:	d1d6      	bne.n	8019882 <_svfiprintf_r+0x176>
 80198d4:	89bb      	ldrh	r3, [r7, #12]
 80198d6:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80198d8:	065b      	lsls	r3, r3, #25
 80198da:	d500      	bpl.n	80198de <_svfiprintf_r+0x1d2>
 80198dc:	e72c      	b.n	8019738 <_svfiprintf_r+0x2c>
 80198de:	b021      	add	sp, #132	@ 0x84
 80198e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80198e2:	aa07      	add	r2, sp, #28
 80198e4:	9200      	str	r2, [sp, #0]
 80198e6:	0021      	movs	r1, r4
 80198e8:	003a      	movs	r2, r7
 80198ea:	4b06      	ldr	r3, [pc, #24]	@ (8019904 <_svfiprintf_r+0x1f8>)
 80198ec:	9803      	ldr	r0, [sp, #12]
 80198ee:	f7fe f827 	bl	8017940 <_printf_i>
 80198f2:	e7eb      	b.n	80198cc <_svfiprintf_r+0x1c0>
 80198f4:	0801bd08 	.word	0x0801bd08
 80198f8:	0801bd0e 	.word	0x0801bd0e
 80198fc:	0801bd12 	.word	0x0801bd12
 8019900:	080173e5 	.word	0x080173e5
 8019904:	0801964d 	.word	0x0801964d

08019908 <__sfputc_r>:
 8019908:	6893      	ldr	r3, [r2, #8]
 801990a:	b510      	push	{r4, lr}
 801990c:	3b01      	subs	r3, #1
 801990e:	6093      	str	r3, [r2, #8]
 8019910:	2b00      	cmp	r3, #0
 8019912:	da04      	bge.n	801991e <__sfputc_r+0x16>
 8019914:	6994      	ldr	r4, [r2, #24]
 8019916:	42a3      	cmp	r3, r4
 8019918:	db07      	blt.n	801992a <__sfputc_r+0x22>
 801991a:	290a      	cmp	r1, #10
 801991c:	d005      	beq.n	801992a <__sfputc_r+0x22>
 801991e:	6813      	ldr	r3, [r2, #0]
 8019920:	1c58      	adds	r0, r3, #1
 8019922:	6010      	str	r0, [r2, #0]
 8019924:	7019      	strb	r1, [r3, #0]
 8019926:	0008      	movs	r0, r1
 8019928:	bd10      	pop	{r4, pc}
 801992a:	f000 f9e2 	bl	8019cf2 <__swbuf_r>
 801992e:	0001      	movs	r1, r0
 8019930:	e7f9      	b.n	8019926 <__sfputc_r+0x1e>

08019932 <__sfputs_r>:
 8019932:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019934:	0006      	movs	r6, r0
 8019936:	000f      	movs	r7, r1
 8019938:	0014      	movs	r4, r2
 801993a:	18d5      	adds	r5, r2, r3
 801993c:	42ac      	cmp	r4, r5
 801993e:	d101      	bne.n	8019944 <__sfputs_r+0x12>
 8019940:	2000      	movs	r0, #0
 8019942:	e007      	b.n	8019954 <__sfputs_r+0x22>
 8019944:	7821      	ldrb	r1, [r4, #0]
 8019946:	003a      	movs	r2, r7
 8019948:	0030      	movs	r0, r6
 801994a:	f7ff ffdd 	bl	8019908 <__sfputc_r>
 801994e:	3401      	adds	r4, #1
 8019950:	1c43      	adds	r3, r0, #1
 8019952:	d1f3      	bne.n	801993c <__sfputs_r+0xa>
 8019954:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08019958 <_vfiprintf_r>:
 8019958:	b5f0      	push	{r4, r5, r6, r7, lr}
 801995a:	b0a1      	sub	sp, #132	@ 0x84
 801995c:	000f      	movs	r7, r1
 801995e:	0015      	movs	r5, r2
 8019960:	001e      	movs	r6, r3
 8019962:	9003      	str	r0, [sp, #12]
 8019964:	2800      	cmp	r0, #0
 8019966:	d004      	beq.n	8019972 <_vfiprintf_r+0x1a>
 8019968:	6a03      	ldr	r3, [r0, #32]
 801996a:	2b00      	cmp	r3, #0
 801996c:	d101      	bne.n	8019972 <_vfiprintf_r+0x1a>
 801996e:	f7fe f985 	bl	8017c7c <__sinit>
 8019972:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8019974:	07db      	lsls	r3, r3, #31
 8019976:	d405      	bmi.n	8019984 <_vfiprintf_r+0x2c>
 8019978:	89bb      	ldrh	r3, [r7, #12]
 801997a:	059b      	lsls	r3, r3, #22
 801997c:	d402      	bmi.n	8019984 <_vfiprintf_r+0x2c>
 801997e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8019980:	f7fe fb21 	bl	8017fc6 <__retarget_lock_acquire_recursive>
 8019984:	89bb      	ldrh	r3, [r7, #12]
 8019986:	071b      	lsls	r3, r3, #28
 8019988:	d502      	bpl.n	8019990 <_vfiprintf_r+0x38>
 801998a:	693b      	ldr	r3, [r7, #16]
 801998c:	2b00      	cmp	r3, #0
 801998e:	d113      	bne.n	80199b8 <_vfiprintf_r+0x60>
 8019990:	0039      	movs	r1, r7
 8019992:	9803      	ldr	r0, [sp, #12]
 8019994:	f000 f9f0 	bl	8019d78 <__swsetup_r>
 8019998:	2800      	cmp	r0, #0
 801999a:	d00d      	beq.n	80199b8 <_vfiprintf_r+0x60>
 801999c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801999e:	07db      	lsls	r3, r3, #31
 80199a0:	d503      	bpl.n	80199aa <_vfiprintf_r+0x52>
 80199a2:	2001      	movs	r0, #1
 80199a4:	4240      	negs	r0, r0
 80199a6:	b021      	add	sp, #132	@ 0x84
 80199a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80199aa:	89bb      	ldrh	r3, [r7, #12]
 80199ac:	059b      	lsls	r3, r3, #22
 80199ae:	d4f8      	bmi.n	80199a2 <_vfiprintf_r+0x4a>
 80199b0:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80199b2:	f7fe fb09 	bl	8017fc8 <__retarget_lock_release_recursive>
 80199b6:	e7f4      	b.n	80199a2 <_vfiprintf_r+0x4a>
 80199b8:	2300      	movs	r3, #0
 80199ba:	ac08      	add	r4, sp, #32
 80199bc:	6163      	str	r3, [r4, #20]
 80199be:	3320      	adds	r3, #32
 80199c0:	7663      	strb	r3, [r4, #25]
 80199c2:	3310      	adds	r3, #16
 80199c4:	76a3      	strb	r3, [r4, #26]
 80199c6:	9607      	str	r6, [sp, #28]
 80199c8:	002e      	movs	r6, r5
 80199ca:	7833      	ldrb	r3, [r6, #0]
 80199cc:	2b00      	cmp	r3, #0
 80199ce:	d001      	beq.n	80199d4 <_vfiprintf_r+0x7c>
 80199d0:	2b25      	cmp	r3, #37	@ 0x25
 80199d2:	d148      	bne.n	8019a66 <_vfiprintf_r+0x10e>
 80199d4:	1b73      	subs	r3, r6, r5
 80199d6:	9305      	str	r3, [sp, #20]
 80199d8:	42ae      	cmp	r6, r5
 80199da:	d00b      	beq.n	80199f4 <_vfiprintf_r+0x9c>
 80199dc:	002a      	movs	r2, r5
 80199de:	0039      	movs	r1, r7
 80199e0:	9803      	ldr	r0, [sp, #12]
 80199e2:	f7ff ffa6 	bl	8019932 <__sfputs_r>
 80199e6:	3001      	adds	r0, #1
 80199e8:	d100      	bne.n	80199ec <_vfiprintf_r+0x94>
 80199ea:	e0ae      	b.n	8019b4a <_vfiprintf_r+0x1f2>
 80199ec:	6963      	ldr	r3, [r4, #20]
 80199ee:	9a05      	ldr	r2, [sp, #20]
 80199f0:	189b      	adds	r3, r3, r2
 80199f2:	6163      	str	r3, [r4, #20]
 80199f4:	7833      	ldrb	r3, [r6, #0]
 80199f6:	2b00      	cmp	r3, #0
 80199f8:	d100      	bne.n	80199fc <_vfiprintf_r+0xa4>
 80199fa:	e0a6      	b.n	8019b4a <_vfiprintf_r+0x1f2>
 80199fc:	2201      	movs	r2, #1
 80199fe:	2300      	movs	r3, #0
 8019a00:	4252      	negs	r2, r2
 8019a02:	6062      	str	r2, [r4, #4]
 8019a04:	a904      	add	r1, sp, #16
 8019a06:	3254      	adds	r2, #84	@ 0x54
 8019a08:	1852      	adds	r2, r2, r1
 8019a0a:	1c75      	adds	r5, r6, #1
 8019a0c:	6023      	str	r3, [r4, #0]
 8019a0e:	60e3      	str	r3, [r4, #12]
 8019a10:	60a3      	str	r3, [r4, #8]
 8019a12:	7013      	strb	r3, [r2, #0]
 8019a14:	65a3      	str	r3, [r4, #88]	@ 0x58
 8019a16:	4b59      	ldr	r3, [pc, #356]	@ (8019b7c <_vfiprintf_r+0x224>)
 8019a18:	2205      	movs	r2, #5
 8019a1a:	0018      	movs	r0, r3
 8019a1c:	7829      	ldrb	r1, [r5, #0]
 8019a1e:	9305      	str	r3, [sp, #20]
 8019a20:	f7fe fad3 	bl	8017fca <memchr>
 8019a24:	1c6e      	adds	r6, r5, #1
 8019a26:	2800      	cmp	r0, #0
 8019a28:	d11f      	bne.n	8019a6a <_vfiprintf_r+0x112>
 8019a2a:	6822      	ldr	r2, [r4, #0]
 8019a2c:	06d3      	lsls	r3, r2, #27
 8019a2e:	d504      	bpl.n	8019a3a <_vfiprintf_r+0xe2>
 8019a30:	2353      	movs	r3, #83	@ 0x53
 8019a32:	a904      	add	r1, sp, #16
 8019a34:	185b      	adds	r3, r3, r1
 8019a36:	2120      	movs	r1, #32
 8019a38:	7019      	strb	r1, [r3, #0]
 8019a3a:	0713      	lsls	r3, r2, #28
 8019a3c:	d504      	bpl.n	8019a48 <_vfiprintf_r+0xf0>
 8019a3e:	2353      	movs	r3, #83	@ 0x53
 8019a40:	a904      	add	r1, sp, #16
 8019a42:	185b      	adds	r3, r3, r1
 8019a44:	212b      	movs	r1, #43	@ 0x2b
 8019a46:	7019      	strb	r1, [r3, #0]
 8019a48:	782b      	ldrb	r3, [r5, #0]
 8019a4a:	2b2a      	cmp	r3, #42	@ 0x2a
 8019a4c:	d016      	beq.n	8019a7c <_vfiprintf_r+0x124>
 8019a4e:	002e      	movs	r6, r5
 8019a50:	2100      	movs	r1, #0
 8019a52:	200a      	movs	r0, #10
 8019a54:	68e3      	ldr	r3, [r4, #12]
 8019a56:	7832      	ldrb	r2, [r6, #0]
 8019a58:	1c75      	adds	r5, r6, #1
 8019a5a:	3a30      	subs	r2, #48	@ 0x30
 8019a5c:	2a09      	cmp	r2, #9
 8019a5e:	d950      	bls.n	8019b02 <_vfiprintf_r+0x1aa>
 8019a60:	2900      	cmp	r1, #0
 8019a62:	d111      	bne.n	8019a88 <_vfiprintf_r+0x130>
 8019a64:	e017      	b.n	8019a96 <_vfiprintf_r+0x13e>
 8019a66:	3601      	adds	r6, #1
 8019a68:	e7af      	b.n	80199ca <_vfiprintf_r+0x72>
 8019a6a:	9b05      	ldr	r3, [sp, #20]
 8019a6c:	6822      	ldr	r2, [r4, #0]
 8019a6e:	1ac0      	subs	r0, r0, r3
 8019a70:	2301      	movs	r3, #1
 8019a72:	4083      	lsls	r3, r0
 8019a74:	4313      	orrs	r3, r2
 8019a76:	0035      	movs	r5, r6
 8019a78:	6023      	str	r3, [r4, #0]
 8019a7a:	e7cc      	b.n	8019a16 <_vfiprintf_r+0xbe>
 8019a7c:	9b07      	ldr	r3, [sp, #28]
 8019a7e:	1d19      	adds	r1, r3, #4
 8019a80:	681b      	ldr	r3, [r3, #0]
 8019a82:	9107      	str	r1, [sp, #28]
 8019a84:	2b00      	cmp	r3, #0
 8019a86:	db01      	blt.n	8019a8c <_vfiprintf_r+0x134>
 8019a88:	930b      	str	r3, [sp, #44]	@ 0x2c
 8019a8a:	e004      	b.n	8019a96 <_vfiprintf_r+0x13e>
 8019a8c:	425b      	negs	r3, r3
 8019a8e:	60e3      	str	r3, [r4, #12]
 8019a90:	2302      	movs	r3, #2
 8019a92:	4313      	orrs	r3, r2
 8019a94:	6023      	str	r3, [r4, #0]
 8019a96:	7833      	ldrb	r3, [r6, #0]
 8019a98:	2b2e      	cmp	r3, #46	@ 0x2e
 8019a9a:	d10c      	bne.n	8019ab6 <_vfiprintf_r+0x15e>
 8019a9c:	7873      	ldrb	r3, [r6, #1]
 8019a9e:	2b2a      	cmp	r3, #42	@ 0x2a
 8019aa0:	d134      	bne.n	8019b0c <_vfiprintf_r+0x1b4>
 8019aa2:	9b07      	ldr	r3, [sp, #28]
 8019aa4:	3602      	adds	r6, #2
 8019aa6:	1d1a      	adds	r2, r3, #4
 8019aa8:	681b      	ldr	r3, [r3, #0]
 8019aaa:	9207      	str	r2, [sp, #28]
 8019aac:	2b00      	cmp	r3, #0
 8019aae:	da01      	bge.n	8019ab4 <_vfiprintf_r+0x15c>
 8019ab0:	2301      	movs	r3, #1
 8019ab2:	425b      	negs	r3, r3
 8019ab4:	9309      	str	r3, [sp, #36]	@ 0x24
 8019ab6:	4d32      	ldr	r5, [pc, #200]	@ (8019b80 <_vfiprintf_r+0x228>)
 8019ab8:	2203      	movs	r2, #3
 8019aba:	0028      	movs	r0, r5
 8019abc:	7831      	ldrb	r1, [r6, #0]
 8019abe:	f7fe fa84 	bl	8017fca <memchr>
 8019ac2:	2800      	cmp	r0, #0
 8019ac4:	d006      	beq.n	8019ad4 <_vfiprintf_r+0x17c>
 8019ac6:	2340      	movs	r3, #64	@ 0x40
 8019ac8:	1b40      	subs	r0, r0, r5
 8019aca:	4083      	lsls	r3, r0
 8019acc:	6822      	ldr	r2, [r4, #0]
 8019ace:	3601      	adds	r6, #1
 8019ad0:	4313      	orrs	r3, r2
 8019ad2:	6023      	str	r3, [r4, #0]
 8019ad4:	7831      	ldrb	r1, [r6, #0]
 8019ad6:	2206      	movs	r2, #6
 8019ad8:	482a      	ldr	r0, [pc, #168]	@ (8019b84 <_vfiprintf_r+0x22c>)
 8019ada:	1c75      	adds	r5, r6, #1
 8019adc:	7621      	strb	r1, [r4, #24]
 8019ade:	f7fe fa74 	bl	8017fca <memchr>
 8019ae2:	2800      	cmp	r0, #0
 8019ae4:	d040      	beq.n	8019b68 <_vfiprintf_r+0x210>
 8019ae6:	4b28      	ldr	r3, [pc, #160]	@ (8019b88 <_vfiprintf_r+0x230>)
 8019ae8:	2b00      	cmp	r3, #0
 8019aea:	d122      	bne.n	8019b32 <_vfiprintf_r+0x1da>
 8019aec:	2207      	movs	r2, #7
 8019aee:	9b07      	ldr	r3, [sp, #28]
 8019af0:	3307      	adds	r3, #7
 8019af2:	4393      	bics	r3, r2
 8019af4:	3308      	adds	r3, #8
 8019af6:	9307      	str	r3, [sp, #28]
 8019af8:	6963      	ldr	r3, [r4, #20]
 8019afa:	9a04      	ldr	r2, [sp, #16]
 8019afc:	189b      	adds	r3, r3, r2
 8019afe:	6163      	str	r3, [r4, #20]
 8019b00:	e762      	b.n	80199c8 <_vfiprintf_r+0x70>
 8019b02:	4343      	muls	r3, r0
 8019b04:	002e      	movs	r6, r5
 8019b06:	2101      	movs	r1, #1
 8019b08:	189b      	adds	r3, r3, r2
 8019b0a:	e7a4      	b.n	8019a56 <_vfiprintf_r+0xfe>
 8019b0c:	2300      	movs	r3, #0
 8019b0e:	200a      	movs	r0, #10
 8019b10:	0019      	movs	r1, r3
 8019b12:	3601      	adds	r6, #1
 8019b14:	6063      	str	r3, [r4, #4]
 8019b16:	7832      	ldrb	r2, [r6, #0]
 8019b18:	1c75      	adds	r5, r6, #1
 8019b1a:	3a30      	subs	r2, #48	@ 0x30
 8019b1c:	2a09      	cmp	r2, #9
 8019b1e:	d903      	bls.n	8019b28 <_vfiprintf_r+0x1d0>
 8019b20:	2b00      	cmp	r3, #0
 8019b22:	d0c8      	beq.n	8019ab6 <_vfiprintf_r+0x15e>
 8019b24:	9109      	str	r1, [sp, #36]	@ 0x24
 8019b26:	e7c6      	b.n	8019ab6 <_vfiprintf_r+0x15e>
 8019b28:	4341      	muls	r1, r0
 8019b2a:	002e      	movs	r6, r5
 8019b2c:	2301      	movs	r3, #1
 8019b2e:	1889      	adds	r1, r1, r2
 8019b30:	e7f1      	b.n	8019b16 <_vfiprintf_r+0x1be>
 8019b32:	aa07      	add	r2, sp, #28
 8019b34:	9200      	str	r2, [sp, #0]
 8019b36:	0021      	movs	r1, r4
 8019b38:	003a      	movs	r2, r7
 8019b3a:	4b14      	ldr	r3, [pc, #80]	@ (8019b8c <_vfiprintf_r+0x234>)
 8019b3c:	9803      	ldr	r0, [sp, #12]
 8019b3e:	f7fd fc51 	bl	80173e4 <_printf_float>
 8019b42:	9004      	str	r0, [sp, #16]
 8019b44:	9b04      	ldr	r3, [sp, #16]
 8019b46:	3301      	adds	r3, #1
 8019b48:	d1d6      	bne.n	8019af8 <_vfiprintf_r+0x1a0>
 8019b4a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8019b4c:	07db      	lsls	r3, r3, #31
 8019b4e:	d405      	bmi.n	8019b5c <_vfiprintf_r+0x204>
 8019b50:	89bb      	ldrh	r3, [r7, #12]
 8019b52:	059b      	lsls	r3, r3, #22
 8019b54:	d402      	bmi.n	8019b5c <_vfiprintf_r+0x204>
 8019b56:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8019b58:	f7fe fa36 	bl	8017fc8 <__retarget_lock_release_recursive>
 8019b5c:	89bb      	ldrh	r3, [r7, #12]
 8019b5e:	065b      	lsls	r3, r3, #25
 8019b60:	d500      	bpl.n	8019b64 <_vfiprintf_r+0x20c>
 8019b62:	e71e      	b.n	80199a2 <_vfiprintf_r+0x4a>
 8019b64:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8019b66:	e71e      	b.n	80199a6 <_vfiprintf_r+0x4e>
 8019b68:	aa07      	add	r2, sp, #28
 8019b6a:	9200      	str	r2, [sp, #0]
 8019b6c:	0021      	movs	r1, r4
 8019b6e:	003a      	movs	r2, r7
 8019b70:	4b06      	ldr	r3, [pc, #24]	@ (8019b8c <_vfiprintf_r+0x234>)
 8019b72:	9803      	ldr	r0, [sp, #12]
 8019b74:	f7fd fee4 	bl	8017940 <_printf_i>
 8019b78:	e7e3      	b.n	8019b42 <_vfiprintf_r+0x1ea>
 8019b7a:	46c0      	nop			@ (mov r8, r8)
 8019b7c:	0801bd08 	.word	0x0801bd08
 8019b80:	0801bd0e 	.word	0x0801bd0e
 8019b84:	0801bd12 	.word	0x0801bd12
 8019b88:	080173e5 	.word	0x080173e5
 8019b8c:	08019933 	.word	0x08019933

08019b90 <__sflush_r>:
 8019b90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019b92:	220c      	movs	r2, #12
 8019b94:	5e8b      	ldrsh	r3, [r1, r2]
 8019b96:	0005      	movs	r5, r0
 8019b98:	000c      	movs	r4, r1
 8019b9a:	071a      	lsls	r2, r3, #28
 8019b9c:	d456      	bmi.n	8019c4c <__sflush_r+0xbc>
 8019b9e:	684a      	ldr	r2, [r1, #4]
 8019ba0:	2a00      	cmp	r2, #0
 8019ba2:	dc02      	bgt.n	8019baa <__sflush_r+0x1a>
 8019ba4:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8019ba6:	2a00      	cmp	r2, #0
 8019ba8:	dd4e      	ble.n	8019c48 <__sflush_r+0xb8>
 8019baa:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8019bac:	2f00      	cmp	r7, #0
 8019bae:	d04b      	beq.n	8019c48 <__sflush_r+0xb8>
 8019bb0:	2200      	movs	r2, #0
 8019bb2:	2080      	movs	r0, #128	@ 0x80
 8019bb4:	682e      	ldr	r6, [r5, #0]
 8019bb6:	602a      	str	r2, [r5, #0]
 8019bb8:	001a      	movs	r2, r3
 8019bba:	0140      	lsls	r0, r0, #5
 8019bbc:	6a21      	ldr	r1, [r4, #32]
 8019bbe:	4002      	ands	r2, r0
 8019bc0:	4203      	tst	r3, r0
 8019bc2:	d033      	beq.n	8019c2c <__sflush_r+0x9c>
 8019bc4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8019bc6:	89a3      	ldrh	r3, [r4, #12]
 8019bc8:	075b      	lsls	r3, r3, #29
 8019bca:	d506      	bpl.n	8019bda <__sflush_r+0x4a>
 8019bcc:	6863      	ldr	r3, [r4, #4]
 8019bce:	1ad2      	subs	r2, r2, r3
 8019bd0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8019bd2:	2b00      	cmp	r3, #0
 8019bd4:	d001      	beq.n	8019bda <__sflush_r+0x4a>
 8019bd6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8019bd8:	1ad2      	subs	r2, r2, r3
 8019bda:	2300      	movs	r3, #0
 8019bdc:	0028      	movs	r0, r5
 8019bde:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8019be0:	6a21      	ldr	r1, [r4, #32]
 8019be2:	47b8      	blx	r7
 8019be4:	89a2      	ldrh	r2, [r4, #12]
 8019be6:	1c43      	adds	r3, r0, #1
 8019be8:	d106      	bne.n	8019bf8 <__sflush_r+0x68>
 8019bea:	6829      	ldr	r1, [r5, #0]
 8019bec:	291d      	cmp	r1, #29
 8019bee:	d846      	bhi.n	8019c7e <__sflush_r+0xee>
 8019bf0:	4b29      	ldr	r3, [pc, #164]	@ (8019c98 <__sflush_r+0x108>)
 8019bf2:	410b      	asrs	r3, r1
 8019bf4:	07db      	lsls	r3, r3, #31
 8019bf6:	d442      	bmi.n	8019c7e <__sflush_r+0xee>
 8019bf8:	2300      	movs	r3, #0
 8019bfa:	6063      	str	r3, [r4, #4]
 8019bfc:	6923      	ldr	r3, [r4, #16]
 8019bfe:	6023      	str	r3, [r4, #0]
 8019c00:	04d2      	lsls	r2, r2, #19
 8019c02:	d505      	bpl.n	8019c10 <__sflush_r+0x80>
 8019c04:	1c43      	adds	r3, r0, #1
 8019c06:	d102      	bne.n	8019c0e <__sflush_r+0x7e>
 8019c08:	682b      	ldr	r3, [r5, #0]
 8019c0a:	2b00      	cmp	r3, #0
 8019c0c:	d100      	bne.n	8019c10 <__sflush_r+0x80>
 8019c0e:	6560      	str	r0, [r4, #84]	@ 0x54
 8019c10:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8019c12:	602e      	str	r6, [r5, #0]
 8019c14:	2900      	cmp	r1, #0
 8019c16:	d017      	beq.n	8019c48 <__sflush_r+0xb8>
 8019c18:	0023      	movs	r3, r4
 8019c1a:	3344      	adds	r3, #68	@ 0x44
 8019c1c:	4299      	cmp	r1, r3
 8019c1e:	d002      	beq.n	8019c26 <__sflush_r+0x96>
 8019c20:	0028      	movs	r0, r5
 8019c22:	f7ff f869 	bl	8018cf8 <_free_r>
 8019c26:	2300      	movs	r3, #0
 8019c28:	6363      	str	r3, [r4, #52]	@ 0x34
 8019c2a:	e00d      	b.n	8019c48 <__sflush_r+0xb8>
 8019c2c:	2301      	movs	r3, #1
 8019c2e:	0028      	movs	r0, r5
 8019c30:	47b8      	blx	r7
 8019c32:	0002      	movs	r2, r0
 8019c34:	1c43      	adds	r3, r0, #1
 8019c36:	d1c6      	bne.n	8019bc6 <__sflush_r+0x36>
 8019c38:	682b      	ldr	r3, [r5, #0]
 8019c3a:	2b00      	cmp	r3, #0
 8019c3c:	d0c3      	beq.n	8019bc6 <__sflush_r+0x36>
 8019c3e:	2b1d      	cmp	r3, #29
 8019c40:	d001      	beq.n	8019c46 <__sflush_r+0xb6>
 8019c42:	2b16      	cmp	r3, #22
 8019c44:	d11a      	bne.n	8019c7c <__sflush_r+0xec>
 8019c46:	602e      	str	r6, [r5, #0]
 8019c48:	2000      	movs	r0, #0
 8019c4a:	e01e      	b.n	8019c8a <__sflush_r+0xfa>
 8019c4c:	690e      	ldr	r6, [r1, #16]
 8019c4e:	2e00      	cmp	r6, #0
 8019c50:	d0fa      	beq.n	8019c48 <__sflush_r+0xb8>
 8019c52:	680f      	ldr	r7, [r1, #0]
 8019c54:	600e      	str	r6, [r1, #0]
 8019c56:	1bba      	subs	r2, r7, r6
 8019c58:	9201      	str	r2, [sp, #4]
 8019c5a:	2200      	movs	r2, #0
 8019c5c:	079b      	lsls	r3, r3, #30
 8019c5e:	d100      	bne.n	8019c62 <__sflush_r+0xd2>
 8019c60:	694a      	ldr	r2, [r1, #20]
 8019c62:	60a2      	str	r2, [r4, #8]
 8019c64:	9b01      	ldr	r3, [sp, #4]
 8019c66:	2b00      	cmp	r3, #0
 8019c68:	ddee      	ble.n	8019c48 <__sflush_r+0xb8>
 8019c6a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8019c6c:	0032      	movs	r2, r6
 8019c6e:	001f      	movs	r7, r3
 8019c70:	0028      	movs	r0, r5
 8019c72:	9b01      	ldr	r3, [sp, #4]
 8019c74:	6a21      	ldr	r1, [r4, #32]
 8019c76:	47b8      	blx	r7
 8019c78:	2800      	cmp	r0, #0
 8019c7a:	dc07      	bgt.n	8019c8c <__sflush_r+0xfc>
 8019c7c:	89a2      	ldrh	r2, [r4, #12]
 8019c7e:	2340      	movs	r3, #64	@ 0x40
 8019c80:	2001      	movs	r0, #1
 8019c82:	4313      	orrs	r3, r2
 8019c84:	b21b      	sxth	r3, r3
 8019c86:	81a3      	strh	r3, [r4, #12]
 8019c88:	4240      	negs	r0, r0
 8019c8a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8019c8c:	9b01      	ldr	r3, [sp, #4]
 8019c8e:	1836      	adds	r6, r6, r0
 8019c90:	1a1b      	subs	r3, r3, r0
 8019c92:	9301      	str	r3, [sp, #4]
 8019c94:	e7e6      	b.n	8019c64 <__sflush_r+0xd4>
 8019c96:	46c0      	nop			@ (mov r8, r8)
 8019c98:	dfbffffe 	.word	0xdfbffffe

08019c9c <_fflush_r>:
 8019c9c:	690b      	ldr	r3, [r1, #16]
 8019c9e:	b570      	push	{r4, r5, r6, lr}
 8019ca0:	0005      	movs	r5, r0
 8019ca2:	000c      	movs	r4, r1
 8019ca4:	2b00      	cmp	r3, #0
 8019ca6:	d102      	bne.n	8019cae <_fflush_r+0x12>
 8019ca8:	2500      	movs	r5, #0
 8019caa:	0028      	movs	r0, r5
 8019cac:	bd70      	pop	{r4, r5, r6, pc}
 8019cae:	2800      	cmp	r0, #0
 8019cb0:	d004      	beq.n	8019cbc <_fflush_r+0x20>
 8019cb2:	6a03      	ldr	r3, [r0, #32]
 8019cb4:	2b00      	cmp	r3, #0
 8019cb6:	d101      	bne.n	8019cbc <_fflush_r+0x20>
 8019cb8:	f7fd ffe0 	bl	8017c7c <__sinit>
 8019cbc:	220c      	movs	r2, #12
 8019cbe:	5ea3      	ldrsh	r3, [r4, r2]
 8019cc0:	2b00      	cmp	r3, #0
 8019cc2:	d0f1      	beq.n	8019ca8 <_fflush_r+0xc>
 8019cc4:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8019cc6:	07d2      	lsls	r2, r2, #31
 8019cc8:	d404      	bmi.n	8019cd4 <_fflush_r+0x38>
 8019cca:	059b      	lsls	r3, r3, #22
 8019ccc:	d402      	bmi.n	8019cd4 <_fflush_r+0x38>
 8019cce:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8019cd0:	f7fe f979 	bl	8017fc6 <__retarget_lock_acquire_recursive>
 8019cd4:	0028      	movs	r0, r5
 8019cd6:	0021      	movs	r1, r4
 8019cd8:	f7ff ff5a 	bl	8019b90 <__sflush_r>
 8019cdc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8019cde:	0005      	movs	r5, r0
 8019ce0:	07db      	lsls	r3, r3, #31
 8019ce2:	d4e2      	bmi.n	8019caa <_fflush_r+0xe>
 8019ce4:	89a3      	ldrh	r3, [r4, #12]
 8019ce6:	059b      	lsls	r3, r3, #22
 8019ce8:	d4df      	bmi.n	8019caa <_fflush_r+0xe>
 8019cea:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8019cec:	f7fe f96c 	bl	8017fc8 <__retarget_lock_release_recursive>
 8019cf0:	e7db      	b.n	8019caa <_fflush_r+0xe>

08019cf2 <__swbuf_r>:
 8019cf2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019cf4:	0006      	movs	r6, r0
 8019cf6:	000d      	movs	r5, r1
 8019cf8:	0014      	movs	r4, r2
 8019cfa:	2800      	cmp	r0, #0
 8019cfc:	d004      	beq.n	8019d08 <__swbuf_r+0x16>
 8019cfe:	6a03      	ldr	r3, [r0, #32]
 8019d00:	2b00      	cmp	r3, #0
 8019d02:	d101      	bne.n	8019d08 <__swbuf_r+0x16>
 8019d04:	f7fd ffba 	bl	8017c7c <__sinit>
 8019d08:	69a3      	ldr	r3, [r4, #24]
 8019d0a:	60a3      	str	r3, [r4, #8]
 8019d0c:	89a3      	ldrh	r3, [r4, #12]
 8019d0e:	071b      	lsls	r3, r3, #28
 8019d10:	d502      	bpl.n	8019d18 <__swbuf_r+0x26>
 8019d12:	6923      	ldr	r3, [r4, #16]
 8019d14:	2b00      	cmp	r3, #0
 8019d16:	d109      	bne.n	8019d2c <__swbuf_r+0x3a>
 8019d18:	0021      	movs	r1, r4
 8019d1a:	0030      	movs	r0, r6
 8019d1c:	f000 f82c 	bl	8019d78 <__swsetup_r>
 8019d20:	2800      	cmp	r0, #0
 8019d22:	d003      	beq.n	8019d2c <__swbuf_r+0x3a>
 8019d24:	2501      	movs	r5, #1
 8019d26:	426d      	negs	r5, r5
 8019d28:	0028      	movs	r0, r5
 8019d2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019d2c:	6923      	ldr	r3, [r4, #16]
 8019d2e:	6820      	ldr	r0, [r4, #0]
 8019d30:	b2ef      	uxtb	r7, r5
 8019d32:	1ac0      	subs	r0, r0, r3
 8019d34:	6963      	ldr	r3, [r4, #20]
 8019d36:	b2ed      	uxtb	r5, r5
 8019d38:	4283      	cmp	r3, r0
 8019d3a:	dc05      	bgt.n	8019d48 <__swbuf_r+0x56>
 8019d3c:	0021      	movs	r1, r4
 8019d3e:	0030      	movs	r0, r6
 8019d40:	f7ff ffac 	bl	8019c9c <_fflush_r>
 8019d44:	2800      	cmp	r0, #0
 8019d46:	d1ed      	bne.n	8019d24 <__swbuf_r+0x32>
 8019d48:	68a3      	ldr	r3, [r4, #8]
 8019d4a:	3001      	adds	r0, #1
 8019d4c:	3b01      	subs	r3, #1
 8019d4e:	60a3      	str	r3, [r4, #8]
 8019d50:	6823      	ldr	r3, [r4, #0]
 8019d52:	1c5a      	adds	r2, r3, #1
 8019d54:	6022      	str	r2, [r4, #0]
 8019d56:	701f      	strb	r7, [r3, #0]
 8019d58:	6963      	ldr	r3, [r4, #20]
 8019d5a:	4283      	cmp	r3, r0
 8019d5c:	d004      	beq.n	8019d68 <__swbuf_r+0x76>
 8019d5e:	89a3      	ldrh	r3, [r4, #12]
 8019d60:	07db      	lsls	r3, r3, #31
 8019d62:	d5e1      	bpl.n	8019d28 <__swbuf_r+0x36>
 8019d64:	2d0a      	cmp	r5, #10
 8019d66:	d1df      	bne.n	8019d28 <__swbuf_r+0x36>
 8019d68:	0021      	movs	r1, r4
 8019d6a:	0030      	movs	r0, r6
 8019d6c:	f7ff ff96 	bl	8019c9c <_fflush_r>
 8019d70:	2800      	cmp	r0, #0
 8019d72:	d0d9      	beq.n	8019d28 <__swbuf_r+0x36>
 8019d74:	e7d6      	b.n	8019d24 <__swbuf_r+0x32>
	...

08019d78 <__swsetup_r>:
 8019d78:	4b2d      	ldr	r3, [pc, #180]	@ (8019e30 <__swsetup_r+0xb8>)
 8019d7a:	b570      	push	{r4, r5, r6, lr}
 8019d7c:	0005      	movs	r5, r0
 8019d7e:	6818      	ldr	r0, [r3, #0]
 8019d80:	000c      	movs	r4, r1
 8019d82:	2800      	cmp	r0, #0
 8019d84:	d004      	beq.n	8019d90 <__swsetup_r+0x18>
 8019d86:	6a03      	ldr	r3, [r0, #32]
 8019d88:	2b00      	cmp	r3, #0
 8019d8a:	d101      	bne.n	8019d90 <__swsetup_r+0x18>
 8019d8c:	f7fd ff76 	bl	8017c7c <__sinit>
 8019d90:	230c      	movs	r3, #12
 8019d92:	5ee2      	ldrsh	r2, [r4, r3]
 8019d94:	0713      	lsls	r3, r2, #28
 8019d96:	d423      	bmi.n	8019de0 <__swsetup_r+0x68>
 8019d98:	06d3      	lsls	r3, r2, #27
 8019d9a:	d407      	bmi.n	8019dac <__swsetup_r+0x34>
 8019d9c:	2309      	movs	r3, #9
 8019d9e:	602b      	str	r3, [r5, #0]
 8019da0:	2340      	movs	r3, #64	@ 0x40
 8019da2:	2001      	movs	r0, #1
 8019da4:	4313      	orrs	r3, r2
 8019da6:	81a3      	strh	r3, [r4, #12]
 8019da8:	4240      	negs	r0, r0
 8019daa:	e03a      	b.n	8019e22 <__swsetup_r+0xaa>
 8019dac:	0752      	lsls	r2, r2, #29
 8019dae:	d513      	bpl.n	8019dd8 <__swsetup_r+0x60>
 8019db0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8019db2:	2900      	cmp	r1, #0
 8019db4:	d008      	beq.n	8019dc8 <__swsetup_r+0x50>
 8019db6:	0023      	movs	r3, r4
 8019db8:	3344      	adds	r3, #68	@ 0x44
 8019dba:	4299      	cmp	r1, r3
 8019dbc:	d002      	beq.n	8019dc4 <__swsetup_r+0x4c>
 8019dbe:	0028      	movs	r0, r5
 8019dc0:	f7fe ff9a 	bl	8018cf8 <_free_r>
 8019dc4:	2300      	movs	r3, #0
 8019dc6:	6363      	str	r3, [r4, #52]	@ 0x34
 8019dc8:	2224      	movs	r2, #36	@ 0x24
 8019dca:	89a3      	ldrh	r3, [r4, #12]
 8019dcc:	4393      	bics	r3, r2
 8019dce:	81a3      	strh	r3, [r4, #12]
 8019dd0:	2300      	movs	r3, #0
 8019dd2:	6063      	str	r3, [r4, #4]
 8019dd4:	6923      	ldr	r3, [r4, #16]
 8019dd6:	6023      	str	r3, [r4, #0]
 8019dd8:	2308      	movs	r3, #8
 8019dda:	89a2      	ldrh	r2, [r4, #12]
 8019ddc:	4313      	orrs	r3, r2
 8019dde:	81a3      	strh	r3, [r4, #12]
 8019de0:	6923      	ldr	r3, [r4, #16]
 8019de2:	2b00      	cmp	r3, #0
 8019de4:	d10b      	bne.n	8019dfe <__swsetup_r+0x86>
 8019de6:	21a0      	movs	r1, #160	@ 0xa0
 8019de8:	2280      	movs	r2, #128	@ 0x80
 8019dea:	89a3      	ldrh	r3, [r4, #12]
 8019dec:	0089      	lsls	r1, r1, #2
 8019dee:	0092      	lsls	r2, r2, #2
 8019df0:	400b      	ands	r3, r1
 8019df2:	4293      	cmp	r3, r2
 8019df4:	d003      	beq.n	8019dfe <__swsetup_r+0x86>
 8019df6:	0021      	movs	r1, r4
 8019df8:	0028      	movs	r0, r5
 8019dfa:	f000 f915 	bl	801a028 <__smakebuf_r>
 8019dfe:	230c      	movs	r3, #12
 8019e00:	5ee2      	ldrsh	r2, [r4, r3]
 8019e02:	2101      	movs	r1, #1
 8019e04:	0013      	movs	r3, r2
 8019e06:	400b      	ands	r3, r1
 8019e08:	420a      	tst	r2, r1
 8019e0a:	d00b      	beq.n	8019e24 <__swsetup_r+0xac>
 8019e0c:	2300      	movs	r3, #0
 8019e0e:	60a3      	str	r3, [r4, #8]
 8019e10:	6963      	ldr	r3, [r4, #20]
 8019e12:	425b      	negs	r3, r3
 8019e14:	61a3      	str	r3, [r4, #24]
 8019e16:	2000      	movs	r0, #0
 8019e18:	6923      	ldr	r3, [r4, #16]
 8019e1a:	4283      	cmp	r3, r0
 8019e1c:	d101      	bne.n	8019e22 <__swsetup_r+0xaa>
 8019e1e:	0613      	lsls	r3, r2, #24
 8019e20:	d4be      	bmi.n	8019da0 <__swsetup_r+0x28>
 8019e22:	bd70      	pop	{r4, r5, r6, pc}
 8019e24:	0791      	lsls	r1, r2, #30
 8019e26:	d400      	bmi.n	8019e2a <__swsetup_r+0xb2>
 8019e28:	6963      	ldr	r3, [r4, #20]
 8019e2a:	60a3      	str	r3, [r4, #8]
 8019e2c:	e7f3      	b.n	8019e16 <__swsetup_r+0x9e>
 8019e2e:	46c0      	nop			@ (mov r8, r8)
 8019e30:	2000023c 	.word	0x2000023c

08019e34 <memmove>:
 8019e34:	b510      	push	{r4, lr}
 8019e36:	4288      	cmp	r0, r1
 8019e38:	d806      	bhi.n	8019e48 <memmove+0x14>
 8019e3a:	2300      	movs	r3, #0
 8019e3c:	429a      	cmp	r2, r3
 8019e3e:	d008      	beq.n	8019e52 <memmove+0x1e>
 8019e40:	5ccc      	ldrb	r4, [r1, r3]
 8019e42:	54c4      	strb	r4, [r0, r3]
 8019e44:	3301      	adds	r3, #1
 8019e46:	e7f9      	b.n	8019e3c <memmove+0x8>
 8019e48:	188b      	adds	r3, r1, r2
 8019e4a:	4298      	cmp	r0, r3
 8019e4c:	d2f5      	bcs.n	8019e3a <memmove+0x6>
 8019e4e:	3a01      	subs	r2, #1
 8019e50:	d200      	bcs.n	8019e54 <memmove+0x20>
 8019e52:	bd10      	pop	{r4, pc}
 8019e54:	5c8b      	ldrb	r3, [r1, r2]
 8019e56:	5483      	strb	r3, [r0, r2]
 8019e58:	e7f9      	b.n	8019e4e <memmove+0x1a>
	...

08019e5c <_sbrk_r>:
 8019e5c:	2300      	movs	r3, #0
 8019e5e:	b570      	push	{r4, r5, r6, lr}
 8019e60:	4d06      	ldr	r5, [pc, #24]	@ (8019e7c <_sbrk_r+0x20>)
 8019e62:	0004      	movs	r4, r0
 8019e64:	0008      	movs	r0, r1
 8019e66:	602b      	str	r3, [r5, #0]
 8019e68:	f7ef f80c 	bl	8008e84 <_sbrk>
 8019e6c:	1c43      	adds	r3, r0, #1
 8019e6e:	d103      	bne.n	8019e78 <_sbrk_r+0x1c>
 8019e70:	682b      	ldr	r3, [r5, #0]
 8019e72:	2b00      	cmp	r3, #0
 8019e74:	d000      	beq.n	8019e78 <_sbrk_r+0x1c>
 8019e76:	6023      	str	r3, [r4, #0]
 8019e78:	bd70      	pop	{r4, r5, r6, pc}
 8019e7a:	46c0      	nop			@ (mov r8, r8)
 8019e7c:	20003f14 	.word	0x20003f14

08019e80 <__assert_func>:
 8019e80:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8019e82:	0014      	movs	r4, r2
 8019e84:	001a      	movs	r2, r3
 8019e86:	4b09      	ldr	r3, [pc, #36]	@ (8019eac <__assert_func+0x2c>)
 8019e88:	0005      	movs	r5, r0
 8019e8a:	681b      	ldr	r3, [r3, #0]
 8019e8c:	000e      	movs	r6, r1
 8019e8e:	68d8      	ldr	r0, [r3, #12]
 8019e90:	4b07      	ldr	r3, [pc, #28]	@ (8019eb0 <__assert_func+0x30>)
 8019e92:	2c00      	cmp	r4, #0
 8019e94:	d101      	bne.n	8019e9a <__assert_func+0x1a>
 8019e96:	4b07      	ldr	r3, [pc, #28]	@ (8019eb4 <__assert_func+0x34>)
 8019e98:	001c      	movs	r4, r3
 8019e9a:	4907      	ldr	r1, [pc, #28]	@ (8019eb8 <__assert_func+0x38>)
 8019e9c:	9301      	str	r3, [sp, #4]
 8019e9e:	9402      	str	r4, [sp, #8]
 8019ea0:	002b      	movs	r3, r5
 8019ea2:	9600      	str	r6, [sp, #0]
 8019ea4:	f000 f886 	bl	8019fb4 <fiprintf>
 8019ea8:	f000 f924 	bl	801a0f4 <abort>
 8019eac:	2000023c 	.word	0x2000023c
 8019eb0:	0801bd23 	.word	0x0801bd23
 8019eb4:	0801bd5e 	.word	0x0801bd5e
 8019eb8:	0801bd30 	.word	0x0801bd30

08019ebc <_calloc_r>:
 8019ebc:	b570      	push	{r4, r5, r6, lr}
 8019ebe:	0c0b      	lsrs	r3, r1, #16
 8019ec0:	0c15      	lsrs	r5, r2, #16
 8019ec2:	2b00      	cmp	r3, #0
 8019ec4:	d11e      	bne.n	8019f04 <_calloc_r+0x48>
 8019ec6:	2d00      	cmp	r5, #0
 8019ec8:	d10c      	bne.n	8019ee4 <_calloc_r+0x28>
 8019eca:	b289      	uxth	r1, r1
 8019ecc:	b294      	uxth	r4, r2
 8019ece:	434c      	muls	r4, r1
 8019ed0:	0021      	movs	r1, r4
 8019ed2:	f7fe ff87 	bl	8018de4 <_malloc_r>
 8019ed6:	1e05      	subs	r5, r0, #0
 8019ed8:	d01a      	beq.n	8019f10 <_calloc_r+0x54>
 8019eda:	0022      	movs	r2, r4
 8019edc:	2100      	movs	r1, #0
 8019ede:	f7fd ffb5 	bl	8017e4c <memset>
 8019ee2:	e016      	b.n	8019f12 <_calloc_r+0x56>
 8019ee4:	1c2b      	adds	r3, r5, #0
 8019ee6:	1c0c      	adds	r4, r1, #0
 8019ee8:	b289      	uxth	r1, r1
 8019eea:	b292      	uxth	r2, r2
 8019eec:	434a      	muls	r2, r1
 8019eee:	b29b      	uxth	r3, r3
 8019ef0:	b2a1      	uxth	r1, r4
 8019ef2:	4359      	muls	r1, r3
 8019ef4:	0c14      	lsrs	r4, r2, #16
 8019ef6:	190c      	adds	r4, r1, r4
 8019ef8:	0c23      	lsrs	r3, r4, #16
 8019efa:	d107      	bne.n	8019f0c <_calloc_r+0x50>
 8019efc:	0424      	lsls	r4, r4, #16
 8019efe:	b292      	uxth	r2, r2
 8019f00:	4314      	orrs	r4, r2
 8019f02:	e7e5      	b.n	8019ed0 <_calloc_r+0x14>
 8019f04:	2d00      	cmp	r5, #0
 8019f06:	d101      	bne.n	8019f0c <_calloc_r+0x50>
 8019f08:	1c14      	adds	r4, r2, #0
 8019f0a:	e7ed      	b.n	8019ee8 <_calloc_r+0x2c>
 8019f0c:	230c      	movs	r3, #12
 8019f0e:	6003      	str	r3, [r0, #0]
 8019f10:	2500      	movs	r5, #0
 8019f12:	0028      	movs	r0, r5
 8019f14:	bd70      	pop	{r4, r5, r6, pc}

08019f16 <__ascii_mbtowc>:
 8019f16:	b082      	sub	sp, #8
 8019f18:	2900      	cmp	r1, #0
 8019f1a:	d100      	bne.n	8019f1e <__ascii_mbtowc+0x8>
 8019f1c:	a901      	add	r1, sp, #4
 8019f1e:	1e10      	subs	r0, r2, #0
 8019f20:	d006      	beq.n	8019f30 <__ascii_mbtowc+0x1a>
 8019f22:	2b00      	cmp	r3, #0
 8019f24:	d006      	beq.n	8019f34 <__ascii_mbtowc+0x1e>
 8019f26:	7813      	ldrb	r3, [r2, #0]
 8019f28:	600b      	str	r3, [r1, #0]
 8019f2a:	7810      	ldrb	r0, [r2, #0]
 8019f2c:	1e43      	subs	r3, r0, #1
 8019f2e:	4198      	sbcs	r0, r3
 8019f30:	b002      	add	sp, #8
 8019f32:	4770      	bx	lr
 8019f34:	2002      	movs	r0, #2
 8019f36:	4240      	negs	r0, r0
 8019f38:	e7fa      	b.n	8019f30 <__ascii_mbtowc+0x1a>

08019f3a <_realloc_r>:
 8019f3a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019f3c:	0006      	movs	r6, r0
 8019f3e:	000c      	movs	r4, r1
 8019f40:	0015      	movs	r5, r2
 8019f42:	2900      	cmp	r1, #0
 8019f44:	d105      	bne.n	8019f52 <_realloc_r+0x18>
 8019f46:	0011      	movs	r1, r2
 8019f48:	f7fe ff4c 	bl	8018de4 <_malloc_r>
 8019f4c:	0004      	movs	r4, r0
 8019f4e:	0020      	movs	r0, r4
 8019f50:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8019f52:	2a00      	cmp	r2, #0
 8019f54:	d103      	bne.n	8019f5e <_realloc_r+0x24>
 8019f56:	f7fe fecf 	bl	8018cf8 <_free_r>
 8019f5a:	2400      	movs	r4, #0
 8019f5c:	e7f7      	b.n	8019f4e <_realloc_r+0x14>
 8019f5e:	f000 f8d0 	bl	801a102 <_malloc_usable_size_r>
 8019f62:	0007      	movs	r7, r0
 8019f64:	4285      	cmp	r5, r0
 8019f66:	d802      	bhi.n	8019f6e <_realloc_r+0x34>
 8019f68:	0843      	lsrs	r3, r0, #1
 8019f6a:	42ab      	cmp	r3, r5
 8019f6c:	d3ef      	bcc.n	8019f4e <_realloc_r+0x14>
 8019f6e:	0029      	movs	r1, r5
 8019f70:	0030      	movs	r0, r6
 8019f72:	f7fe ff37 	bl	8018de4 <_malloc_r>
 8019f76:	9001      	str	r0, [sp, #4]
 8019f78:	2800      	cmp	r0, #0
 8019f7a:	d0ee      	beq.n	8019f5a <_realloc_r+0x20>
 8019f7c:	002a      	movs	r2, r5
 8019f7e:	42bd      	cmp	r5, r7
 8019f80:	d900      	bls.n	8019f84 <_realloc_r+0x4a>
 8019f82:	003a      	movs	r2, r7
 8019f84:	0021      	movs	r1, r4
 8019f86:	9801      	ldr	r0, [sp, #4]
 8019f88:	f7fe f82a 	bl	8017fe0 <memcpy>
 8019f8c:	0021      	movs	r1, r4
 8019f8e:	0030      	movs	r0, r6
 8019f90:	f7fe feb2 	bl	8018cf8 <_free_r>
 8019f94:	9c01      	ldr	r4, [sp, #4]
 8019f96:	e7da      	b.n	8019f4e <_realloc_r+0x14>

08019f98 <__ascii_wctomb>:
 8019f98:	0003      	movs	r3, r0
 8019f9a:	1e08      	subs	r0, r1, #0
 8019f9c:	d005      	beq.n	8019faa <__ascii_wctomb+0x12>
 8019f9e:	2aff      	cmp	r2, #255	@ 0xff
 8019fa0:	d904      	bls.n	8019fac <__ascii_wctomb+0x14>
 8019fa2:	228a      	movs	r2, #138	@ 0x8a
 8019fa4:	2001      	movs	r0, #1
 8019fa6:	601a      	str	r2, [r3, #0]
 8019fa8:	4240      	negs	r0, r0
 8019faa:	4770      	bx	lr
 8019fac:	2001      	movs	r0, #1
 8019fae:	700a      	strb	r2, [r1, #0]
 8019fb0:	e7fb      	b.n	8019faa <__ascii_wctomb+0x12>
	...

08019fb4 <fiprintf>:
 8019fb4:	b40e      	push	{r1, r2, r3}
 8019fb6:	b517      	push	{r0, r1, r2, r4, lr}
 8019fb8:	4c05      	ldr	r4, [pc, #20]	@ (8019fd0 <fiprintf+0x1c>)
 8019fba:	ab05      	add	r3, sp, #20
 8019fbc:	cb04      	ldmia	r3!, {r2}
 8019fbe:	0001      	movs	r1, r0
 8019fc0:	6820      	ldr	r0, [r4, #0]
 8019fc2:	9301      	str	r3, [sp, #4]
 8019fc4:	f7ff fcc8 	bl	8019958 <_vfiprintf_r>
 8019fc8:	bc1e      	pop	{r1, r2, r3, r4}
 8019fca:	bc08      	pop	{r3}
 8019fcc:	b003      	add	sp, #12
 8019fce:	4718      	bx	r3
 8019fd0:	2000023c 	.word	0x2000023c

08019fd4 <__swhatbuf_r>:
 8019fd4:	b570      	push	{r4, r5, r6, lr}
 8019fd6:	000e      	movs	r6, r1
 8019fd8:	001d      	movs	r5, r3
 8019fda:	230e      	movs	r3, #14
 8019fdc:	5ec9      	ldrsh	r1, [r1, r3]
 8019fde:	0014      	movs	r4, r2
 8019fe0:	b096      	sub	sp, #88	@ 0x58
 8019fe2:	2900      	cmp	r1, #0
 8019fe4:	da0c      	bge.n	801a000 <__swhatbuf_r+0x2c>
 8019fe6:	89b2      	ldrh	r2, [r6, #12]
 8019fe8:	2380      	movs	r3, #128	@ 0x80
 8019fea:	0011      	movs	r1, r2
 8019fec:	4019      	ands	r1, r3
 8019fee:	421a      	tst	r2, r3
 8019ff0:	d114      	bne.n	801a01c <__swhatbuf_r+0x48>
 8019ff2:	2380      	movs	r3, #128	@ 0x80
 8019ff4:	00db      	lsls	r3, r3, #3
 8019ff6:	2000      	movs	r0, #0
 8019ff8:	6029      	str	r1, [r5, #0]
 8019ffa:	6023      	str	r3, [r4, #0]
 8019ffc:	b016      	add	sp, #88	@ 0x58
 8019ffe:	bd70      	pop	{r4, r5, r6, pc}
 801a000:	466a      	mov	r2, sp
 801a002:	f000 f853 	bl	801a0ac <_fstat_r>
 801a006:	2800      	cmp	r0, #0
 801a008:	dbed      	blt.n	8019fe6 <__swhatbuf_r+0x12>
 801a00a:	23f0      	movs	r3, #240	@ 0xf0
 801a00c:	9901      	ldr	r1, [sp, #4]
 801a00e:	021b      	lsls	r3, r3, #8
 801a010:	4019      	ands	r1, r3
 801a012:	4b04      	ldr	r3, [pc, #16]	@ (801a024 <__swhatbuf_r+0x50>)
 801a014:	18c9      	adds	r1, r1, r3
 801a016:	424b      	negs	r3, r1
 801a018:	4159      	adcs	r1, r3
 801a01a:	e7ea      	b.n	8019ff2 <__swhatbuf_r+0x1e>
 801a01c:	2100      	movs	r1, #0
 801a01e:	2340      	movs	r3, #64	@ 0x40
 801a020:	e7e9      	b.n	8019ff6 <__swhatbuf_r+0x22>
 801a022:	46c0      	nop			@ (mov r8, r8)
 801a024:	ffffe000 	.word	0xffffe000

0801a028 <__smakebuf_r>:
 801a028:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a02a:	2602      	movs	r6, #2
 801a02c:	898b      	ldrh	r3, [r1, #12]
 801a02e:	0005      	movs	r5, r0
 801a030:	000c      	movs	r4, r1
 801a032:	b085      	sub	sp, #20
 801a034:	4233      	tst	r3, r6
 801a036:	d007      	beq.n	801a048 <__smakebuf_r+0x20>
 801a038:	0023      	movs	r3, r4
 801a03a:	3347      	adds	r3, #71	@ 0x47
 801a03c:	6023      	str	r3, [r4, #0]
 801a03e:	6123      	str	r3, [r4, #16]
 801a040:	2301      	movs	r3, #1
 801a042:	6163      	str	r3, [r4, #20]
 801a044:	b005      	add	sp, #20
 801a046:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a048:	ab03      	add	r3, sp, #12
 801a04a:	aa02      	add	r2, sp, #8
 801a04c:	f7ff ffc2 	bl	8019fd4 <__swhatbuf_r>
 801a050:	9f02      	ldr	r7, [sp, #8]
 801a052:	9001      	str	r0, [sp, #4]
 801a054:	0039      	movs	r1, r7
 801a056:	0028      	movs	r0, r5
 801a058:	f7fe fec4 	bl	8018de4 <_malloc_r>
 801a05c:	2800      	cmp	r0, #0
 801a05e:	d108      	bne.n	801a072 <__smakebuf_r+0x4a>
 801a060:	220c      	movs	r2, #12
 801a062:	5ea3      	ldrsh	r3, [r4, r2]
 801a064:	059a      	lsls	r2, r3, #22
 801a066:	d4ed      	bmi.n	801a044 <__smakebuf_r+0x1c>
 801a068:	2203      	movs	r2, #3
 801a06a:	4393      	bics	r3, r2
 801a06c:	431e      	orrs	r6, r3
 801a06e:	81a6      	strh	r6, [r4, #12]
 801a070:	e7e2      	b.n	801a038 <__smakebuf_r+0x10>
 801a072:	2380      	movs	r3, #128	@ 0x80
 801a074:	89a2      	ldrh	r2, [r4, #12]
 801a076:	6020      	str	r0, [r4, #0]
 801a078:	4313      	orrs	r3, r2
 801a07a:	81a3      	strh	r3, [r4, #12]
 801a07c:	9b03      	ldr	r3, [sp, #12]
 801a07e:	6120      	str	r0, [r4, #16]
 801a080:	6167      	str	r7, [r4, #20]
 801a082:	2b00      	cmp	r3, #0
 801a084:	d00c      	beq.n	801a0a0 <__smakebuf_r+0x78>
 801a086:	0028      	movs	r0, r5
 801a088:	230e      	movs	r3, #14
 801a08a:	5ee1      	ldrsh	r1, [r4, r3]
 801a08c:	f000 f820 	bl	801a0d0 <_isatty_r>
 801a090:	2800      	cmp	r0, #0
 801a092:	d005      	beq.n	801a0a0 <__smakebuf_r+0x78>
 801a094:	2303      	movs	r3, #3
 801a096:	89a2      	ldrh	r2, [r4, #12]
 801a098:	439a      	bics	r2, r3
 801a09a:	3b02      	subs	r3, #2
 801a09c:	4313      	orrs	r3, r2
 801a09e:	81a3      	strh	r3, [r4, #12]
 801a0a0:	89a3      	ldrh	r3, [r4, #12]
 801a0a2:	9a01      	ldr	r2, [sp, #4]
 801a0a4:	4313      	orrs	r3, r2
 801a0a6:	81a3      	strh	r3, [r4, #12]
 801a0a8:	e7cc      	b.n	801a044 <__smakebuf_r+0x1c>
	...

0801a0ac <_fstat_r>:
 801a0ac:	2300      	movs	r3, #0
 801a0ae:	b570      	push	{r4, r5, r6, lr}
 801a0b0:	4d06      	ldr	r5, [pc, #24]	@ (801a0cc <_fstat_r+0x20>)
 801a0b2:	0004      	movs	r4, r0
 801a0b4:	0008      	movs	r0, r1
 801a0b6:	0011      	movs	r1, r2
 801a0b8:	602b      	str	r3, [r5, #0]
 801a0ba:	f7ee fec1 	bl	8008e40 <_fstat>
 801a0be:	1c43      	adds	r3, r0, #1
 801a0c0:	d103      	bne.n	801a0ca <_fstat_r+0x1e>
 801a0c2:	682b      	ldr	r3, [r5, #0]
 801a0c4:	2b00      	cmp	r3, #0
 801a0c6:	d000      	beq.n	801a0ca <_fstat_r+0x1e>
 801a0c8:	6023      	str	r3, [r4, #0]
 801a0ca:	bd70      	pop	{r4, r5, r6, pc}
 801a0cc:	20003f14 	.word	0x20003f14

0801a0d0 <_isatty_r>:
 801a0d0:	2300      	movs	r3, #0
 801a0d2:	b570      	push	{r4, r5, r6, lr}
 801a0d4:	4d06      	ldr	r5, [pc, #24]	@ (801a0f0 <_isatty_r+0x20>)
 801a0d6:	0004      	movs	r4, r0
 801a0d8:	0008      	movs	r0, r1
 801a0da:	602b      	str	r3, [r5, #0]
 801a0dc:	f7ee febe 	bl	8008e5c <_isatty>
 801a0e0:	1c43      	adds	r3, r0, #1
 801a0e2:	d103      	bne.n	801a0ec <_isatty_r+0x1c>
 801a0e4:	682b      	ldr	r3, [r5, #0]
 801a0e6:	2b00      	cmp	r3, #0
 801a0e8:	d000      	beq.n	801a0ec <_isatty_r+0x1c>
 801a0ea:	6023      	str	r3, [r4, #0]
 801a0ec:	bd70      	pop	{r4, r5, r6, pc}
 801a0ee:	46c0      	nop			@ (mov r8, r8)
 801a0f0:	20003f14 	.word	0x20003f14

0801a0f4 <abort>:
 801a0f4:	2006      	movs	r0, #6
 801a0f6:	b510      	push	{r4, lr}
 801a0f8:	f000 f834 	bl	801a164 <raise>
 801a0fc:	2001      	movs	r0, #1
 801a0fe:	f7ee fe6b 	bl	8008dd8 <_exit>

0801a102 <_malloc_usable_size_r>:
 801a102:	1f0b      	subs	r3, r1, #4
 801a104:	681b      	ldr	r3, [r3, #0]
 801a106:	1f18      	subs	r0, r3, #4
 801a108:	2b00      	cmp	r3, #0
 801a10a:	da01      	bge.n	801a110 <_malloc_usable_size_r+0xe>
 801a10c:	580b      	ldr	r3, [r1, r0]
 801a10e:	18c0      	adds	r0, r0, r3
 801a110:	4770      	bx	lr

0801a112 <_raise_r>:
 801a112:	b570      	push	{r4, r5, r6, lr}
 801a114:	0004      	movs	r4, r0
 801a116:	000d      	movs	r5, r1
 801a118:	291f      	cmp	r1, #31
 801a11a:	d904      	bls.n	801a126 <_raise_r+0x14>
 801a11c:	2316      	movs	r3, #22
 801a11e:	6003      	str	r3, [r0, #0]
 801a120:	2001      	movs	r0, #1
 801a122:	4240      	negs	r0, r0
 801a124:	bd70      	pop	{r4, r5, r6, pc}
 801a126:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 801a128:	2b00      	cmp	r3, #0
 801a12a:	d004      	beq.n	801a136 <_raise_r+0x24>
 801a12c:	008a      	lsls	r2, r1, #2
 801a12e:	189b      	adds	r3, r3, r2
 801a130:	681a      	ldr	r2, [r3, #0]
 801a132:	2a00      	cmp	r2, #0
 801a134:	d108      	bne.n	801a148 <_raise_r+0x36>
 801a136:	0020      	movs	r0, r4
 801a138:	f000 f830 	bl	801a19c <_getpid_r>
 801a13c:	002a      	movs	r2, r5
 801a13e:	0001      	movs	r1, r0
 801a140:	0020      	movs	r0, r4
 801a142:	f000 f819 	bl	801a178 <_kill_r>
 801a146:	e7ed      	b.n	801a124 <_raise_r+0x12>
 801a148:	2a01      	cmp	r2, #1
 801a14a:	d009      	beq.n	801a160 <_raise_r+0x4e>
 801a14c:	1c51      	adds	r1, r2, #1
 801a14e:	d103      	bne.n	801a158 <_raise_r+0x46>
 801a150:	2316      	movs	r3, #22
 801a152:	6003      	str	r3, [r0, #0]
 801a154:	2001      	movs	r0, #1
 801a156:	e7e5      	b.n	801a124 <_raise_r+0x12>
 801a158:	2100      	movs	r1, #0
 801a15a:	0028      	movs	r0, r5
 801a15c:	6019      	str	r1, [r3, #0]
 801a15e:	4790      	blx	r2
 801a160:	2000      	movs	r0, #0
 801a162:	e7df      	b.n	801a124 <_raise_r+0x12>

0801a164 <raise>:
 801a164:	b510      	push	{r4, lr}
 801a166:	4b03      	ldr	r3, [pc, #12]	@ (801a174 <raise+0x10>)
 801a168:	0001      	movs	r1, r0
 801a16a:	6818      	ldr	r0, [r3, #0]
 801a16c:	f7ff ffd1 	bl	801a112 <_raise_r>
 801a170:	bd10      	pop	{r4, pc}
 801a172:	46c0      	nop			@ (mov r8, r8)
 801a174:	2000023c 	.word	0x2000023c

0801a178 <_kill_r>:
 801a178:	2300      	movs	r3, #0
 801a17a:	b570      	push	{r4, r5, r6, lr}
 801a17c:	4d06      	ldr	r5, [pc, #24]	@ (801a198 <_kill_r+0x20>)
 801a17e:	0004      	movs	r4, r0
 801a180:	0008      	movs	r0, r1
 801a182:	0011      	movs	r1, r2
 801a184:	602b      	str	r3, [r5, #0]
 801a186:	f7ee fe17 	bl	8008db8 <_kill>
 801a18a:	1c43      	adds	r3, r0, #1
 801a18c:	d103      	bne.n	801a196 <_kill_r+0x1e>
 801a18e:	682b      	ldr	r3, [r5, #0]
 801a190:	2b00      	cmp	r3, #0
 801a192:	d000      	beq.n	801a196 <_kill_r+0x1e>
 801a194:	6023      	str	r3, [r4, #0]
 801a196:	bd70      	pop	{r4, r5, r6, pc}
 801a198:	20003f14 	.word	0x20003f14

0801a19c <_getpid_r>:
 801a19c:	b510      	push	{r4, lr}
 801a19e:	f7ee fe05 	bl	8008dac <_getpid>
 801a1a2:	bd10      	pop	{r4, pc}

0801a1a4 <log10>:
 801a1a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a1a6:	0004      	movs	r4, r0
 801a1a8:	000d      	movs	r5, r1
 801a1aa:	f000 fa0b 	bl	801a5c4 <__ieee754_log10>
 801a1ae:	0022      	movs	r2, r4
 801a1b0:	0006      	movs	r6, r0
 801a1b2:	000f      	movs	r7, r1
 801a1b4:	002b      	movs	r3, r5
 801a1b6:	0020      	movs	r0, r4
 801a1b8:	0029      	movs	r1, r5
 801a1ba:	f7e9 f821 	bl	8003200 <__aeabi_dcmpun>
 801a1be:	2800      	cmp	r0, #0
 801a1c0:	d115      	bne.n	801a1ee <log10+0x4a>
 801a1c2:	2200      	movs	r2, #0
 801a1c4:	2300      	movs	r3, #0
 801a1c6:	0020      	movs	r0, r4
 801a1c8:	0029      	movs	r1, r5
 801a1ca:	f7e6 f94f 	bl	800046c <__aeabi_dcmple>
 801a1ce:	2800      	cmp	r0, #0
 801a1d0:	d00d      	beq.n	801a1ee <log10+0x4a>
 801a1d2:	2200      	movs	r2, #0
 801a1d4:	2300      	movs	r3, #0
 801a1d6:	0020      	movs	r0, r4
 801a1d8:	0029      	movs	r1, r5
 801a1da:	f7e6 f937 	bl	800044c <__aeabi_dcmpeq>
 801a1de:	2800      	cmp	r0, #0
 801a1e0:	d008      	beq.n	801a1f4 <log10+0x50>
 801a1e2:	f7fd fec5 	bl	8017f70 <__errno>
 801a1e6:	2322      	movs	r3, #34	@ 0x22
 801a1e8:	2600      	movs	r6, #0
 801a1ea:	4f07      	ldr	r7, [pc, #28]	@ (801a208 <log10+0x64>)
 801a1ec:	6003      	str	r3, [r0, #0]
 801a1ee:	0030      	movs	r0, r6
 801a1f0:	0039      	movs	r1, r7
 801a1f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a1f4:	f7fd febc 	bl	8017f70 <__errno>
 801a1f8:	2321      	movs	r3, #33	@ 0x21
 801a1fa:	6003      	str	r3, [r0, #0]
 801a1fc:	4803      	ldr	r0, [pc, #12]	@ (801a20c <log10+0x68>)
 801a1fe:	f000 f871 	bl	801a2e4 <nan>
 801a202:	0006      	movs	r6, r0
 801a204:	000f      	movs	r7, r1
 801a206:	e7f2      	b.n	801a1ee <log10+0x4a>
 801a208:	fff00000 	.word	0xfff00000
 801a20c:	0801bd5e 	.word	0x0801bd5e

0801a210 <sqrt>:
 801a210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a212:	0004      	movs	r4, r0
 801a214:	000d      	movs	r5, r1
 801a216:	f000 f875 	bl	801a304 <__ieee754_sqrt>
 801a21a:	0022      	movs	r2, r4
 801a21c:	0006      	movs	r6, r0
 801a21e:	000f      	movs	r7, r1
 801a220:	002b      	movs	r3, r5
 801a222:	0020      	movs	r0, r4
 801a224:	0029      	movs	r1, r5
 801a226:	f7e8 ffeb 	bl	8003200 <__aeabi_dcmpun>
 801a22a:	2800      	cmp	r0, #0
 801a22c:	d113      	bne.n	801a256 <sqrt+0x46>
 801a22e:	2200      	movs	r2, #0
 801a230:	2300      	movs	r3, #0
 801a232:	0020      	movs	r0, r4
 801a234:	0029      	movs	r1, r5
 801a236:	f7e6 f90f 	bl	8000458 <__aeabi_dcmplt>
 801a23a:	2800      	cmp	r0, #0
 801a23c:	d00b      	beq.n	801a256 <sqrt+0x46>
 801a23e:	f7fd fe97 	bl	8017f70 <__errno>
 801a242:	2321      	movs	r3, #33	@ 0x21
 801a244:	2200      	movs	r2, #0
 801a246:	6003      	str	r3, [r0, #0]
 801a248:	2300      	movs	r3, #0
 801a24a:	0010      	movs	r0, r2
 801a24c:	0019      	movs	r1, r3
 801a24e:	f7e7 fd2f 	bl	8001cb0 <__aeabi_ddiv>
 801a252:	0006      	movs	r6, r0
 801a254:	000f      	movs	r7, r1
 801a256:	0030      	movs	r0, r6
 801a258:	0039      	movs	r1, r7
 801a25a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801a25c <expf>:
 801a25c:	b570      	push	{r4, r5, r6, lr}
 801a25e:	1c04      	adds	r4, r0, #0
 801a260:	f000 fa2a 	bl	801a6b8 <__ieee754_expf>
 801a264:	1c05      	adds	r5, r0, #0
 801a266:	1c20      	adds	r0, r4, #0
 801a268:	f000 f842 	bl	801a2f0 <finitef>
 801a26c:	2800      	cmp	r0, #0
 801a26e:	d00b      	beq.n	801a288 <expf+0x2c>
 801a270:	490c      	ldr	r1, [pc, #48]	@ (801a2a4 <expf+0x48>)
 801a272:	1c20      	adds	r0, r4, #0
 801a274:	f7e6 f93e 	bl	80004f4 <__aeabi_fcmpgt>
 801a278:	2800      	cmp	r0, #0
 801a27a:	d007      	beq.n	801a28c <expf+0x30>
 801a27c:	f7fd fe78 	bl	8017f70 <__errno>
 801a280:	25ff      	movs	r5, #255	@ 0xff
 801a282:	2322      	movs	r3, #34	@ 0x22
 801a284:	05ed      	lsls	r5, r5, #23
 801a286:	6003      	str	r3, [r0, #0]
 801a288:	1c28      	adds	r0, r5, #0
 801a28a:	bd70      	pop	{r4, r5, r6, pc}
 801a28c:	4906      	ldr	r1, [pc, #24]	@ (801a2a8 <expf+0x4c>)
 801a28e:	1c20      	adds	r0, r4, #0
 801a290:	f7e6 f91c 	bl	80004cc <__aeabi_fcmplt>
 801a294:	2800      	cmp	r0, #0
 801a296:	d0f7      	beq.n	801a288 <expf+0x2c>
 801a298:	f7fd fe6a 	bl	8017f70 <__errno>
 801a29c:	2322      	movs	r3, #34	@ 0x22
 801a29e:	2500      	movs	r5, #0
 801a2a0:	6003      	str	r3, [r0, #0]
 801a2a2:	e7f1      	b.n	801a288 <expf+0x2c>
 801a2a4:	42b17217 	.word	0x42b17217
 801a2a8:	c2cff1b5 	.word	0xc2cff1b5

0801a2ac <sqrtf>:
 801a2ac:	b570      	push	{r4, r5, r6, lr}
 801a2ae:	1c05      	adds	r5, r0, #0
 801a2b0:	f000 f910 	bl	801a4d4 <__ieee754_sqrtf>
 801a2b4:	1c29      	adds	r1, r5, #0
 801a2b6:	1c04      	adds	r4, r0, #0
 801a2b8:	1c28      	adds	r0, r5, #0
 801a2ba:	f7e7 f8d1 	bl	8001460 <__aeabi_fcmpun>
 801a2be:	2800      	cmp	r0, #0
 801a2c0:	d10e      	bne.n	801a2e0 <sqrtf+0x34>
 801a2c2:	2100      	movs	r1, #0
 801a2c4:	1c28      	adds	r0, r5, #0
 801a2c6:	f7e6 f901 	bl	80004cc <__aeabi_fcmplt>
 801a2ca:	2800      	cmp	r0, #0
 801a2cc:	d008      	beq.n	801a2e0 <sqrtf+0x34>
 801a2ce:	f7fd fe4f 	bl	8017f70 <__errno>
 801a2d2:	2321      	movs	r3, #33	@ 0x21
 801a2d4:	2100      	movs	r1, #0
 801a2d6:	6003      	str	r3, [r0, #0]
 801a2d8:	1c08      	adds	r0, r1, #0
 801a2da:	f7e6 fbf9 	bl	8000ad0 <__aeabi_fdiv>
 801a2de:	1c04      	adds	r4, r0, #0
 801a2e0:	1c20      	adds	r0, r4, #0
 801a2e2:	bd70      	pop	{r4, r5, r6, pc}

0801a2e4 <nan>:
 801a2e4:	2000      	movs	r0, #0
 801a2e6:	4901      	ldr	r1, [pc, #4]	@ (801a2ec <nan+0x8>)
 801a2e8:	4770      	bx	lr
 801a2ea:	46c0      	nop			@ (mov r8, r8)
 801a2ec:	7ff80000 	.word	0x7ff80000

0801a2f0 <finitef>:
 801a2f0:	22ff      	movs	r2, #255	@ 0xff
 801a2f2:	0043      	lsls	r3, r0, #1
 801a2f4:	085b      	lsrs	r3, r3, #1
 801a2f6:	2001      	movs	r0, #1
 801a2f8:	05d2      	lsls	r2, r2, #23
 801a2fa:	4293      	cmp	r3, r2
 801a2fc:	db00      	blt.n	801a300 <finitef+0x10>
 801a2fe:	2000      	movs	r0, #0
 801a300:	4770      	bx	lr
	...

0801a304 <__ieee754_sqrt>:
 801a304:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a306:	000a      	movs	r2, r1
 801a308:	000d      	movs	r5, r1
 801a30a:	496d      	ldr	r1, [pc, #436]	@ (801a4c0 <__ieee754_sqrt+0x1bc>)
 801a30c:	0004      	movs	r4, r0
 801a30e:	0003      	movs	r3, r0
 801a310:	0008      	movs	r0, r1
 801a312:	b087      	sub	sp, #28
 801a314:	4028      	ands	r0, r5
 801a316:	4288      	cmp	r0, r1
 801a318:	d111      	bne.n	801a33e <__ieee754_sqrt+0x3a>
 801a31a:	0022      	movs	r2, r4
 801a31c:	002b      	movs	r3, r5
 801a31e:	0020      	movs	r0, r4
 801a320:	0029      	movs	r1, r5
 801a322:	f7e8 f909 	bl	8002538 <__aeabi_dmul>
 801a326:	0002      	movs	r2, r0
 801a328:	000b      	movs	r3, r1
 801a32a:	0020      	movs	r0, r4
 801a32c:	0029      	movs	r1, r5
 801a32e:	f7e7 f95b 	bl	80015e8 <__aeabi_dadd>
 801a332:	0004      	movs	r4, r0
 801a334:	000d      	movs	r5, r1
 801a336:	0020      	movs	r0, r4
 801a338:	0029      	movs	r1, r5
 801a33a:	b007      	add	sp, #28
 801a33c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a33e:	2d00      	cmp	r5, #0
 801a340:	dc11      	bgt.n	801a366 <__ieee754_sqrt+0x62>
 801a342:	0069      	lsls	r1, r5, #1
 801a344:	0849      	lsrs	r1, r1, #1
 801a346:	4321      	orrs	r1, r4
 801a348:	d0f5      	beq.n	801a336 <__ieee754_sqrt+0x32>
 801a34a:	2000      	movs	r0, #0
 801a34c:	4285      	cmp	r5, r0
 801a34e:	d010      	beq.n	801a372 <__ieee754_sqrt+0x6e>
 801a350:	0022      	movs	r2, r4
 801a352:	002b      	movs	r3, r5
 801a354:	0020      	movs	r0, r4
 801a356:	0029      	movs	r1, r5
 801a358:	f7e8 fbb6 	bl	8002ac8 <__aeabi_dsub>
 801a35c:	0002      	movs	r2, r0
 801a35e:	000b      	movs	r3, r1
 801a360:	f7e7 fca6 	bl	8001cb0 <__aeabi_ddiv>
 801a364:	e7e5      	b.n	801a332 <__ieee754_sqrt+0x2e>
 801a366:	1528      	asrs	r0, r5, #20
 801a368:	d115      	bne.n	801a396 <__ieee754_sqrt+0x92>
 801a36a:	2480      	movs	r4, #128	@ 0x80
 801a36c:	2100      	movs	r1, #0
 801a36e:	0364      	lsls	r4, r4, #13
 801a370:	e007      	b.n	801a382 <__ieee754_sqrt+0x7e>
 801a372:	0ada      	lsrs	r2, r3, #11
 801a374:	3815      	subs	r0, #21
 801a376:	055b      	lsls	r3, r3, #21
 801a378:	2a00      	cmp	r2, #0
 801a37a:	d0fa      	beq.n	801a372 <__ieee754_sqrt+0x6e>
 801a37c:	e7f5      	b.n	801a36a <__ieee754_sqrt+0x66>
 801a37e:	0052      	lsls	r2, r2, #1
 801a380:	3101      	adds	r1, #1
 801a382:	4222      	tst	r2, r4
 801a384:	d0fb      	beq.n	801a37e <__ieee754_sqrt+0x7a>
 801a386:	1e4c      	subs	r4, r1, #1
 801a388:	1b00      	subs	r0, r0, r4
 801a38a:	2420      	movs	r4, #32
 801a38c:	001d      	movs	r5, r3
 801a38e:	1a64      	subs	r4, r4, r1
 801a390:	40e5      	lsrs	r5, r4
 801a392:	408b      	lsls	r3, r1
 801a394:	432a      	orrs	r2, r5
 801a396:	494b      	ldr	r1, [pc, #300]	@ (801a4c4 <__ieee754_sqrt+0x1c0>)
 801a398:	0312      	lsls	r2, r2, #12
 801a39a:	1844      	adds	r4, r0, r1
 801a39c:	2180      	movs	r1, #128	@ 0x80
 801a39e:	0b12      	lsrs	r2, r2, #12
 801a3a0:	0349      	lsls	r1, r1, #13
 801a3a2:	4311      	orrs	r1, r2
 801a3a4:	07c0      	lsls	r0, r0, #31
 801a3a6:	d403      	bmi.n	801a3b0 <__ieee754_sqrt+0xac>
 801a3a8:	0fda      	lsrs	r2, r3, #31
 801a3aa:	0049      	lsls	r1, r1, #1
 801a3ac:	1851      	adds	r1, r2, r1
 801a3ae:	005b      	lsls	r3, r3, #1
 801a3b0:	2500      	movs	r5, #0
 801a3b2:	1062      	asrs	r2, r4, #1
 801a3b4:	0049      	lsls	r1, r1, #1
 801a3b6:	2480      	movs	r4, #128	@ 0x80
 801a3b8:	9205      	str	r2, [sp, #20]
 801a3ba:	0fda      	lsrs	r2, r3, #31
 801a3bc:	1852      	adds	r2, r2, r1
 801a3be:	2016      	movs	r0, #22
 801a3c0:	0029      	movs	r1, r5
 801a3c2:	005b      	lsls	r3, r3, #1
 801a3c4:	03a4      	lsls	r4, r4, #14
 801a3c6:	190e      	adds	r6, r1, r4
 801a3c8:	4296      	cmp	r6, r2
 801a3ca:	dc02      	bgt.n	801a3d2 <__ieee754_sqrt+0xce>
 801a3cc:	1931      	adds	r1, r6, r4
 801a3ce:	1b92      	subs	r2, r2, r6
 801a3d0:	192d      	adds	r5, r5, r4
 801a3d2:	0fde      	lsrs	r6, r3, #31
 801a3d4:	0052      	lsls	r2, r2, #1
 801a3d6:	3801      	subs	r0, #1
 801a3d8:	1992      	adds	r2, r2, r6
 801a3da:	005b      	lsls	r3, r3, #1
 801a3dc:	0864      	lsrs	r4, r4, #1
 801a3de:	2800      	cmp	r0, #0
 801a3e0:	d1f1      	bne.n	801a3c6 <__ieee754_sqrt+0xc2>
 801a3e2:	2620      	movs	r6, #32
 801a3e4:	2780      	movs	r7, #128	@ 0x80
 801a3e6:	0004      	movs	r4, r0
 801a3e8:	9604      	str	r6, [sp, #16]
 801a3ea:	063f      	lsls	r7, r7, #24
 801a3ec:	19c6      	adds	r6, r0, r7
 801a3ee:	46b4      	mov	ip, r6
 801a3f0:	4291      	cmp	r1, r2
 801a3f2:	db02      	blt.n	801a3fa <__ieee754_sqrt+0xf6>
 801a3f4:	d114      	bne.n	801a420 <__ieee754_sqrt+0x11c>
 801a3f6:	429e      	cmp	r6, r3
 801a3f8:	d812      	bhi.n	801a420 <__ieee754_sqrt+0x11c>
 801a3fa:	4660      	mov	r0, ip
 801a3fc:	4666      	mov	r6, ip
 801a3fe:	19c0      	adds	r0, r0, r7
 801a400:	9100      	str	r1, [sp, #0]
 801a402:	2e00      	cmp	r6, #0
 801a404:	da03      	bge.n	801a40e <__ieee754_sqrt+0x10a>
 801a406:	43c6      	mvns	r6, r0
 801a408:	0ff6      	lsrs	r6, r6, #31
 801a40a:	198e      	adds	r6, r1, r6
 801a40c:	9600      	str	r6, [sp, #0]
 801a40e:	1a52      	subs	r2, r2, r1
 801a410:	4563      	cmp	r3, ip
 801a412:	4189      	sbcs	r1, r1
 801a414:	4249      	negs	r1, r1
 801a416:	1a52      	subs	r2, r2, r1
 801a418:	4661      	mov	r1, ip
 801a41a:	1a5b      	subs	r3, r3, r1
 801a41c:	9900      	ldr	r1, [sp, #0]
 801a41e:	19e4      	adds	r4, r4, r7
 801a420:	0fde      	lsrs	r6, r3, #31
 801a422:	0052      	lsls	r2, r2, #1
 801a424:	1992      	adds	r2, r2, r6
 801a426:	9e04      	ldr	r6, [sp, #16]
 801a428:	005b      	lsls	r3, r3, #1
 801a42a:	3e01      	subs	r6, #1
 801a42c:	087f      	lsrs	r7, r7, #1
 801a42e:	9604      	str	r6, [sp, #16]
 801a430:	2e00      	cmp	r6, #0
 801a432:	d1db      	bne.n	801a3ec <__ieee754_sqrt+0xe8>
 801a434:	431a      	orrs	r2, r3
 801a436:	d01f      	beq.n	801a478 <__ieee754_sqrt+0x174>
 801a438:	4e23      	ldr	r6, [pc, #140]	@ (801a4c8 <__ieee754_sqrt+0x1c4>)
 801a43a:	4f24      	ldr	r7, [pc, #144]	@ (801a4cc <__ieee754_sqrt+0x1c8>)
 801a43c:	6830      	ldr	r0, [r6, #0]
 801a43e:	6871      	ldr	r1, [r6, #4]
 801a440:	683a      	ldr	r2, [r7, #0]
 801a442:	687b      	ldr	r3, [r7, #4]
 801a444:	9200      	str	r2, [sp, #0]
 801a446:	9301      	str	r3, [sp, #4]
 801a448:	6832      	ldr	r2, [r6, #0]
 801a44a:	6873      	ldr	r3, [r6, #4]
 801a44c:	9202      	str	r2, [sp, #8]
 801a44e:	9303      	str	r3, [sp, #12]
 801a450:	9a00      	ldr	r2, [sp, #0]
 801a452:	9b01      	ldr	r3, [sp, #4]
 801a454:	f7e8 fb38 	bl	8002ac8 <__aeabi_dsub>
 801a458:	0002      	movs	r2, r0
 801a45a:	000b      	movs	r3, r1
 801a45c:	9802      	ldr	r0, [sp, #8]
 801a45e:	9903      	ldr	r1, [sp, #12]
 801a460:	f7e6 f804 	bl	800046c <__aeabi_dcmple>
 801a464:	2800      	cmp	r0, #0
 801a466:	d007      	beq.n	801a478 <__ieee754_sqrt+0x174>
 801a468:	6830      	ldr	r0, [r6, #0]
 801a46a:	6871      	ldr	r1, [r6, #4]
 801a46c:	683a      	ldr	r2, [r7, #0]
 801a46e:	687b      	ldr	r3, [r7, #4]
 801a470:	1c67      	adds	r7, r4, #1
 801a472:	d10f      	bne.n	801a494 <__ieee754_sqrt+0x190>
 801a474:	9c04      	ldr	r4, [sp, #16]
 801a476:	3501      	adds	r5, #1
 801a478:	4b15      	ldr	r3, [pc, #84]	@ (801a4d0 <__ieee754_sqrt+0x1cc>)
 801a47a:	106a      	asrs	r2, r5, #1
 801a47c:	18d2      	adds	r2, r2, r3
 801a47e:	0863      	lsrs	r3, r4, #1
 801a480:	07ed      	lsls	r5, r5, #31
 801a482:	d502      	bpl.n	801a48a <__ieee754_sqrt+0x186>
 801a484:	2180      	movs	r1, #128	@ 0x80
 801a486:	0609      	lsls	r1, r1, #24
 801a488:	430b      	orrs	r3, r1
 801a48a:	9905      	ldr	r1, [sp, #20]
 801a48c:	001c      	movs	r4, r3
 801a48e:	0509      	lsls	r1, r1, #20
 801a490:	188d      	adds	r5, r1, r2
 801a492:	e750      	b.n	801a336 <__ieee754_sqrt+0x32>
 801a494:	f7e7 f8a8 	bl	80015e8 <__aeabi_dadd>
 801a498:	6877      	ldr	r7, [r6, #4]
 801a49a:	6836      	ldr	r6, [r6, #0]
 801a49c:	0002      	movs	r2, r0
 801a49e:	000b      	movs	r3, r1
 801a4a0:	0030      	movs	r0, r6
 801a4a2:	0039      	movs	r1, r7
 801a4a4:	f7e5 ffd8 	bl	8000458 <__aeabi_dcmplt>
 801a4a8:	2800      	cmp	r0, #0
 801a4aa:	d004      	beq.n	801a4b6 <__ieee754_sqrt+0x1b2>
 801a4ac:	3402      	adds	r4, #2
 801a4ae:	4263      	negs	r3, r4
 801a4b0:	4163      	adcs	r3, r4
 801a4b2:	18ed      	adds	r5, r5, r3
 801a4b4:	e7e0      	b.n	801a478 <__ieee754_sqrt+0x174>
 801a4b6:	2301      	movs	r3, #1
 801a4b8:	3401      	adds	r4, #1
 801a4ba:	439c      	bics	r4, r3
 801a4bc:	e7dc      	b.n	801a478 <__ieee754_sqrt+0x174>
 801a4be:	46c0      	nop			@ (mov r8, r8)
 801a4c0:	7ff00000 	.word	0x7ff00000
 801a4c4:	fffffc01 	.word	0xfffffc01
 801a4c8:	20000400 	.word	0x20000400
 801a4cc:	200003f8 	.word	0x200003f8
 801a4d0:	3fe00000 	.word	0x3fe00000

0801a4d4 <__ieee754_sqrtf>:
 801a4d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a4d6:	0003      	movs	r3, r0
 801a4d8:	0042      	lsls	r2, r0, #1
 801a4da:	1c04      	adds	r4, r0, #0
 801a4dc:	20ff      	movs	r0, #255	@ 0xff
 801a4de:	0852      	lsrs	r2, r2, #1
 801a4e0:	05c0      	lsls	r0, r0, #23
 801a4e2:	4282      	cmp	r2, r0
 801a4e4:	d30a      	bcc.n	801a4fc <__ieee754_sqrtf+0x28>
 801a4e6:	1c21      	adds	r1, r4, #0
 801a4e8:	1c20      	adds	r0, r4, #0
 801a4ea:	f7e6 fcd7 	bl	8000e9c <__aeabi_fmul>
 801a4ee:	1c01      	adds	r1, r0, #0
 801a4f0:	1c20      	adds	r0, r4, #0
 801a4f2:	f7e6 f963 	bl	80007bc <__aeabi_fadd>
 801a4f6:	1c04      	adds	r4, r0, #0
 801a4f8:	1c20      	adds	r0, r4, #0
 801a4fa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801a4fc:	2a00      	cmp	r2, #0
 801a4fe:	d0fb      	beq.n	801a4f8 <__ieee754_sqrtf+0x24>
 801a500:	2c00      	cmp	r4, #0
 801a502:	da07      	bge.n	801a514 <__ieee754_sqrtf+0x40>
 801a504:	1c21      	adds	r1, r4, #0
 801a506:	1c20      	adds	r0, r4, #0
 801a508:	f7e6 fe06 	bl	8001118 <__aeabi_fsub>
 801a50c:	1c01      	adds	r1, r0, #0
 801a50e:	f7e6 fadf 	bl	8000ad0 <__aeabi_fdiv>
 801a512:	e7f0      	b.n	801a4f6 <__ieee754_sqrtf+0x22>
 801a514:	0022      	movs	r2, r4
 801a516:	15e1      	asrs	r1, r4, #23
 801a518:	4002      	ands	r2, r0
 801a51a:	4204      	tst	r4, r0
 801a51c:	d046      	beq.n	801a5ac <__ieee754_sqrtf+0xd8>
 801a51e:	2280      	movs	r2, #128	@ 0x80
 801a520:	000f      	movs	r7, r1
 801a522:	025b      	lsls	r3, r3, #9
 801a524:	0a5b      	lsrs	r3, r3, #9
 801a526:	0412      	lsls	r2, r2, #16
 801a528:	3f7f      	subs	r7, #127	@ 0x7f
 801a52a:	4313      	orrs	r3, r2
 801a52c:	07c9      	lsls	r1, r1, #31
 801a52e:	d400      	bmi.n	801a532 <__ieee754_sqrtf+0x5e>
 801a530:	005b      	lsls	r3, r3, #1
 801a532:	2400      	movs	r4, #0
 801a534:	2180      	movs	r1, #128	@ 0x80
 801a536:	2019      	movs	r0, #25
 801a538:	0026      	movs	r6, r4
 801a53a:	107f      	asrs	r7, r7, #1
 801a53c:	005b      	lsls	r3, r3, #1
 801a53e:	0449      	lsls	r1, r1, #17
 801a540:	1875      	adds	r5, r6, r1
 801a542:	001a      	movs	r2, r3
 801a544:	429d      	cmp	r5, r3
 801a546:	dc02      	bgt.n	801a54e <__ieee754_sqrtf+0x7a>
 801a548:	186e      	adds	r6, r5, r1
 801a54a:	1b5a      	subs	r2, r3, r5
 801a54c:	1864      	adds	r4, r4, r1
 801a54e:	3801      	subs	r0, #1
 801a550:	0053      	lsls	r3, r2, #1
 801a552:	0849      	lsrs	r1, r1, #1
 801a554:	2800      	cmp	r0, #0
 801a556:	d1f3      	bne.n	801a540 <__ieee754_sqrtf+0x6c>
 801a558:	2a00      	cmp	r2, #0
 801a55a:	d019      	beq.n	801a590 <__ieee754_sqrtf+0xbc>
 801a55c:	4d17      	ldr	r5, [pc, #92]	@ (801a5bc <__ieee754_sqrtf+0xe8>)
 801a55e:	4e18      	ldr	r6, [pc, #96]	@ (801a5c0 <__ieee754_sqrtf+0xec>)
 801a560:	6828      	ldr	r0, [r5, #0]
 801a562:	6831      	ldr	r1, [r6, #0]
 801a564:	682b      	ldr	r3, [r5, #0]
 801a566:	9301      	str	r3, [sp, #4]
 801a568:	f7e6 fdd6 	bl	8001118 <__aeabi_fsub>
 801a56c:	1c01      	adds	r1, r0, #0
 801a56e:	9801      	ldr	r0, [sp, #4]
 801a570:	f7e5 ffb6 	bl	80004e0 <__aeabi_fcmple>
 801a574:	2800      	cmp	r0, #0
 801a576:	d00b      	beq.n	801a590 <__ieee754_sqrtf+0xbc>
 801a578:	6828      	ldr	r0, [r5, #0]
 801a57a:	6831      	ldr	r1, [r6, #0]
 801a57c:	f7e6 f91e 	bl	80007bc <__aeabi_fadd>
 801a580:	682d      	ldr	r5, [r5, #0]
 801a582:	1c01      	adds	r1, r0, #0
 801a584:	1c28      	adds	r0, r5, #0
 801a586:	f7e5 ffa1 	bl	80004cc <__aeabi_fcmplt>
 801a58a:	2800      	cmp	r0, #0
 801a58c:	d011      	beq.n	801a5b2 <__ieee754_sqrtf+0xde>
 801a58e:	3402      	adds	r4, #2
 801a590:	23fc      	movs	r3, #252	@ 0xfc
 801a592:	1064      	asrs	r4, r4, #1
 801a594:	059b      	lsls	r3, r3, #22
 801a596:	18e3      	adds	r3, r4, r3
 801a598:	05fc      	lsls	r4, r7, #23
 801a59a:	18e4      	adds	r4, r4, r3
 801a59c:	e7ac      	b.n	801a4f8 <__ieee754_sqrtf+0x24>
 801a59e:	005b      	lsls	r3, r3, #1
 801a5a0:	3201      	adds	r2, #1
 801a5a2:	4203      	tst	r3, r0
 801a5a4:	d0fb      	beq.n	801a59e <__ieee754_sqrtf+0xca>
 801a5a6:	3a01      	subs	r2, #1
 801a5a8:	1a89      	subs	r1, r1, r2
 801a5aa:	e7b8      	b.n	801a51e <__ieee754_sqrtf+0x4a>
 801a5ac:	2080      	movs	r0, #128	@ 0x80
 801a5ae:	0400      	lsls	r0, r0, #16
 801a5b0:	e7f7      	b.n	801a5a2 <__ieee754_sqrtf+0xce>
 801a5b2:	2301      	movs	r3, #1
 801a5b4:	3401      	adds	r4, #1
 801a5b6:	439c      	bics	r4, r3
 801a5b8:	e7ea      	b.n	801a590 <__ieee754_sqrtf+0xbc>
 801a5ba:	46c0      	nop			@ (mov r8, r8)
 801a5bc:	2000040c 	.word	0x2000040c
 801a5c0:	20000408 	.word	0x20000408

0801a5c4 <__ieee754_log10>:
 801a5c4:	2280      	movs	r2, #128	@ 0x80
 801a5c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a5c8:	000b      	movs	r3, r1
 801a5ca:	0004      	movs	r4, r0
 801a5cc:	000d      	movs	r5, r1
 801a5ce:	b085      	sub	sp, #20
 801a5d0:	0352      	lsls	r2, r2, #13
 801a5d2:	4291      	cmp	r1, r2
 801a5d4:	da26      	bge.n	801a624 <__ieee754_log10+0x60>
 801a5d6:	004a      	lsls	r2, r1, #1
 801a5d8:	0852      	lsrs	r2, r2, #1
 801a5da:	4302      	orrs	r2, r0
 801a5dc:	d107      	bne.n	801a5ee <__ieee754_log10+0x2a>
 801a5de:	2200      	movs	r2, #0
 801a5e0:	2300      	movs	r3, #0
 801a5e2:	2000      	movs	r0, #0
 801a5e4:	4929      	ldr	r1, [pc, #164]	@ (801a68c <__ieee754_log10+0xc8>)
 801a5e6:	f7e7 fb63 	bl	8001cb0 <__aeabi_ddiv>
 801a5ea:	b005      	add	sp, #20
 801a5ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a5ee:	2900      	cmp	r1, #0
 801a5f0:	da05      	bge.n	801a5fe <__ieee754_log10+0x3a>
 801a5f2:	0002      	movs	r2, r0
 801a5f4:	f7e8 fa68 	bl	8002ac8 <__aeabi_dsub>
 801a5f8:	2200      	movs	r2, #0
 801a5fa:	2300      	movs	r3, #0
 801a5fc:	e7f3      	b.n	801a5e6 <__ieee754_log10+0x22>
 801a5fe:	2200      	movs	r2, #0
 801a600:	4b23      	ldr	r3, [pc, #140]	@ (801a690 <__ieee754_log10+0xcc>)
 801a602:	f7e7 ff99 	bl	8002538 <__aeabi_dmul>
 801a606:	2236      	movs	r2, #54	@ 0x36
 801a608:	0004      	movs	r4, r0
 801a60a:	000d      	movs	r5, r1
 801a60c:	000b      	movs	r3, r1
 801a60e:	4252      	negs	r2, r2
 801a610:	4920      	ldr	r1, [pc, #128]	@ (801a694 <__ieee754_log10+0xd0>)
 801a612:	428b      	cmp	r3, r1
 801a614:	dd08      	ble.n	801a628 <__ieee754_log10+0x64>
 801a616:	0022      	movs	r2, r4
 801a618:	002b      	movs	r3, r5
 801a61a:	0020      	movs	r0, r4
 801a61c:	0029      	movs	r1, r5
 801a61e:	f7e6 ffe3 	bl	80015e8 <__aeabi_dadd>
 801a622:	e7e2      	b.n	801a5ea <__ieee754_log10+0x26>
 801a624:	2200      	movs	r2, #0
 801a626:	e7f3      	b.n	801a610 <__ieee754_log10+0x4c>
 801a628:	491b      	ldr	r1, [pc, #108]	@ (801a698 <__ieee754_log10+0xd4>)
 801a62a:	1518      	asrs	r0, r3, #20
 801a62c:	1840      	adds	r0, r0, r1
 801a62e:	1880      	adds	r0, r0, r2
 801a630:	0fc2      	lsrs	r2, r0, #31
 801a632:	031b      	lsls	r3, r3, #12
 801a634:	0b1b      	lsrs	r3, r3, #12
 801a636:	1880      	adds	r0, r0, r2
 801a638:	9203      	str	r2, [sp, #12]
 801a63a:	9300      	str	r3, [sp, #0]
 801a63c:	f7e8 fe3e 	bl	80032bc <__aeabi_i2d>
 801a640:	9a03      	ldr	r2, [sp, #12]
 801a642:	4b16      	ldr	r3, [pc, #88]	@ (801a69c <__ieee754_log10+0xd8>)
 801a644:	0006      	movs	r6, r0
 801a646:	1a9b      	subs	r3, r3, r2
 801a648:	9a00      	ldr	r2, [sp, #0]
 801a64a:	051b      	lsls	r3, r3, #20
 801a64c:	431a      	orrs	r2, r3
 801a64e:	0015      	movs	r5, r2
 801a650:	4b13      	ldr	r3, [pc, #76]	@ (801a6a0 <__ieee754_log10+0xdc>)
 801a652:	4a14      	ldr	r2, [pc, #80]	@ (801a6a4 <__ieee754_log10+0xe0>)
 801a654:	000f      	movs	r7, r1
 801a656:	f7e7 ff6f 	bl	8002538 <__aeabi_dmul>
 801a65a:	9000      	str	r0, [sp, #0]
 801a65c:	9101      	str	r1, [sp, #4]
 801a65e:	0020      	movs	r0, r4
 801a660:	0029      	movs	r1, r5
 801a662:	f000 f93b 	bl	801a8dc <__ieee754_log>
 801a666:	4a10      	ldr	r2, [pc, #64]	@ (801a6a8 <__ieee754_log10+0xe4>)
 801a668:	4b10      	ldr	r3, [pc, #64]	@ (801a6ac <__ieee754_log10+0xe8>)
 801a66a:	f7e7 ff65 	bl	8002538 <__aeabi_dmul>
 801a66e:	9a00      	ldr	r2, [sp, #0]
 801a670:	9b01      	ldr	r3, [sp, #4]
 801a672:	f7e6 ffb9 	bl	80015e8 <__aeabi_dadd>
 801a676:	4a0e      	ldr	r2, [pc, #56]	@ (801a6b0 <__ieee754_log10+0xec>)
 801a678:	4b0e      	ldr	r3, [pc, #56]	@ (801a6b4 <__ieee754_log10+0xf0>)
 801a67a:	0004      	movs	r4, r0
 801a67c:	000d      	movs	r5, r1
 801a67e:	0030      	movs	r0, r6
 801a680:	0039      	movs	r1, r7
 801a682:	f7e7 ff59 	bl	8002538 <__aeabi_dmul>
 801a686:	0002      	movs	r2, r0
 801a688:	000b      	movs	r3, r1
 801a68a:	e7c6      	b.n	801a61a <__ieee754_log10+0x56>
 801a68c:	c3500000 	.word	0xc3500000
 801a690:	43500000 	.word	0x43500000
 801a694:	7fefffff 	.word	0x7fefffff
 801a698:	fffffc01 	.word	0xfffffc01
 801a69c:	000003ff 	.word	0x000003ff
 801a6a0:	3d59fef3 	.word	0x3d59fef3
 801a6a4:	11f12b36 	.word	0x11f12b36
 801a6a8:	1526e50e 	.word	0x1526e50e
 801a6ac:	3fdbcb7b 	.word	0x3fdbcb7b
 801a6b0:	509f6000 	.word	0x509f6000
 801a6b4:	3fd34413 	.word	0x3fd34413

0801a6b8 <__ieee754_expf>:
 801a6b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a6ba:	21ff      	movs	r1, #255	@ 0xff
 801a6bc:	0043      	lsls	r3, r0, #1
 801a6be:	1c04      	adds	r4, r0, #0
 801a6c0:	085b      	lsrs	r3, r3, #1
 801a6c2:	05c9      	lsls	r1, r1, #23
 801a6c4:	428b      	cmp	r3, r1
 801a6c6:	d904      	bls.n	801a6d2 <__ieee754_expf+0x1a>
 801a6c8:	1c01      	adds	r1, r0, #0
 801a6ca:	1c20      	adds	r0, r4, #0
 801a6cc:	f7e6 f876 	bl	80007bc <__aeabi_fadd>
 801a6d0:	e00d      	b.n	801a6ee <__ieee754_expf+0x36>
 801a6d2:	0fc6      	lsrs	r6, r0, #31
 801a6d4:	428b      	cmp	r3, r1
 801a6d6:	d104      	bne.n	801a6e2 <__ieee754_expf+0x2a>
 801a6d8:	2e00      	cmp	r6, #0
 801a6da:	d000      	beq.n	801a6de <__ieee754_expf+0x26>
 801a6dc:	e0ba      	b.n	801a854 <__ieee754_expf+0x19c>
 801a6de:	1c20      	adds	r0, r4, #0
 801a6e0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801a6e2:	495d      	ldr	r1, [pc, #372]	@ (801a858 <__ieee754_expf+0x1a0>)
 801a6e4:	4288      	cmp	r0, r1
 801a6e6:	dd04      	ble.n	801a6f2 <__ieee754_expf+0x3a>
 801a6e8:	2000      	movs	r0, #0
 801a6ea:	f000 f8f1 	bl	801a8d0 <__math_oflowf>
 801a6ee:	1c04      	adds	r4, r0, #0
 801a6f0:	e7f5      	b.n	801a6de <__ieee754_expf+0x26>
 801a6f2:	2800      	cmp	r0, #0
 801a6f4:	da06      	bge.n	801a704 <__ieee754_expf+0x4c>
 801a6f6:	4a59      	ldr	r2, [pc, #356]	@ (801a85c <__ieee754_expf+0x1a4>)
 801a6f8:	4293      	cmp	r3, r2
 801a6fa:	d903      	bls.n	801a704 <__ieee754_expf+0x4c>
 801a6fc:	2000      	movs	r0, #0
 801a6fe:	f000 f8e1 	bl	801a8c4 <__math_uflowf>
 801a702:	e7f4      	b.n	801a6ee <__ieee754_expf+0x36>
 801a704:	4a56      	ldr	r2, [pc, #344]	@ (801a860 <__ieee754_expf+0x1a8>)
 801a706:	4293      	cmp	r3, r2
 801a708:	d96e      	bls.n	801a7e8 <__ieee754_expf+0x130>
 801a70a:	4a56      	ldr	r2, [pc, #344]	@ (801a864 <__ieee754_expf+0x1ac>)
 801a70c:	00b5      	lsls	r5, r6, #2
 801a70e:	4293      	cmp	r3, r2
 801a710:	d84e      	bhi.n	801a7b0 <__ieee754_expf+0xf8>
 801a712:	4b55      	ldr	r3, [pc, #340]	@ (801a868 <__ieee754_expf+0x1b0>)
 801a714:	1c20      	adds	r0, r4, #0
 801a716:	5959      	ldr	r1, [r3, r5]
 801a718:	f7e6 fcfe 	bl	8001118 <__aeabi_fsub>
 801a71c:	4b53      	ldr	r3, [pc, #332]	@ (801a86c <__ieee754_expf+0x1b4>)
 801a71e:	1c07      	adds	r7, r0, #0
 801a720:	595b      	ldr	r3, [r3, r5]
 801a722:	2501      	movs	r5, #1
 801a724:	1bad      	subs	r5, r5, r6
 801a726:	9300      	str	r3, [sp, #0]
 801a728:	1bad      	subs	r5, r5, r6
 801a72a:	9900      	ldr	r1, [sp, #0]
 801a72c:	1c38      	adds	r0, r7, #0
 801a72e:	f7e6 fcf3 	bl	8001118 <__aeabi_fsub>
 801a732:	1c04      	adds	r4, r0, #0
 801a734:	1c21      	adds	r1, r4, #0
 801a736:	1c20      	adds	r0, r4, #0
 801a738:	f7e6 fbb0 	bl	8000e9c <__aeabi_fmul>
 801a73c:	494c      	ldr	r1, [pc, #304]	@ (801a870 <__ieee754_expf+0x1b8>)
 801a73e:	1c06      	adds	r6, r0, #0
 801a740:	f7e6 fbac 	bl	8000e9c <__aeabi_fmul>
 801a744:	494b      	ldr	r1, [pc, #300]	@ (801a874 <__ieee754_expf+0x1bc>)
 801a746:	f7e6 fce7 	bl	8001118 <__aeabi_fsub>
 801a74a:	1c31      	adds	r1, r6, #0
 801a74c:	f7e6 fba6 	bl	8000e9c <__aeabi_fmul>
 801a750:	4949      	ldr	r1, [pc, #292]	@ (801a878 <__ieee754_expf+0x1c0>)
 801a752:	f7e6 f833 	bl	80007bc <__aeabi_fadd>
 801a756:	1c31      	adds	r1, r6, #0
 801a758:	f7e6 fba0 	bl	8000e9c <__aeabi_fmul>
 801a75c:	4947      	ldr	r1, [pc, #284]	@ (801a87c <__ieee754_expf+0x1c4>)
 801a75e:	f7e6 fcdb 	bl	8001118 <__aeabi_fsub>
 801a762:	1c31      	adds	r1, r6, #0
 801a764:	f7e6 fb9a 	bl	8000e9c <__aeabi_fmul>
 801a768:	4945      	ldr	r1, [pc, #276]	@ (801a880 <__ieee754_expf+0x1c8>)
 801a76a:	f7e6 f827 	bl	80007bc <__aeabi_fadd>
 801a76e:	1c31      	adds	r1, r6, #0
 801a770:	f7e6 fb94 	bl	8000e9c <__aeabi_fmul>
 801a774:	1c01      	adds	r1, r0, #0
 801a776:	1c20      	adds	r0, r4, #0
 801a778:	f7e6 fcce 	bl	8001118 <__aeabi_fsub>
 801a77c:	1c01      	adds	r1, r0, #0
 801a77e:	1c06      	adds	r6, r0, #0
 801a780:	1c20      	adds	r0, r4, #0
 801a782:	f7e6 fb8b 	bl	8000e9c <__aeabi_fmul>
 801a786:	9001      	str	r0, [sp, #4]
 801a788:	2d00      	cmp	r5, #0
 801a78a:	d140      	bne.n	801a80e <__ieee754_expf+0x156>
 801a78c:	2180      	movs	r1, #128	@ 0x80
 801a78e:	1c30      	adds	r0, r6, #0
 801a790:	05c9      	lsls	r1, r1, #23
 801a792:	f7e6 fcc1 	bl	8001118 <__aeabi_fsub>
 801a796:	1c01      	adds	r1, r0, #0
 801a798:	9801      	ldr	r0, [sp, #4]
 801a79a:	f7e6 f999 	bl	8000ad0 <__aeabi_fdiv>
 801a79e:	1c21      	adds	r1, r4, #0
 801a7a0:	f7e6 fcba 	bl	8001118 <__aeabi_fsub>
 801a7a4:	1c01      	adds	r1, r0, #0
 801a7a6:	20fe      	movs	r0, #254	@ 0xfe
 801a7a8:	0580      	lsls	r0, r0, #22
 801a7aa:	f7e6 fcb5 	bl	8001118 <__aeabi_fsub>
 801a7ae:	e79e      	b.n	801a6ee <__ieee754_expf+0x36>
 801a7b0:	4934      	ldr	r1, [pc, #208]	@ (801a884 <__ieee754_expf+0x1cc>)
 801a7b2:	1c20      	adds	r0, r4, #0
 801a7b4:	f7e6 fb72 	bl	8000e9c <__aeabi_fmul>
 801a7b8:	4b33      	ldr	r3, [pc, #204]	@ (801a888 <__ieee754_expf+0x1d0>)
 801a7ba:	5959      	ldr	r1, [r3, r5]
 801a7bc:	f7e5 fffe 	bl	80007bc <__aeabi_fadd>
 801a7c0:	f7e6 fe64 	bl	800148c <__aeabi_f2iz>
 801a7c4:	0005      	movs	r5, r0
 801a7c6:	f7e6 fe81 	bl	80014cc <__aeabi_i2f>
 801a7ca:	4930      	ldr	r1, [pc, #192]	@ (801a88c <__ieee754_expf+0x1d4>)
 801a7cc:	1c06      	adds	r6, r0, #0
 801a7ce:	f7e6 fb65 	bl	8000e9c <__aeabi_fmul>
 801a7d2:	1c01      	adds	r1, r0, #0
 801a7d4:	1c20      	adds	r0, r4, #0
 801a7d6:	f7e6 fc9f 	bl	8001118 <__aeabi_fsub>
 801a7da:	492d      	ldr	r1, [pc, #180]	@ (801a890 <__ieee754_expf+0x1d8>)
 801a7dc:	1c07      	adds	r7, r0, #0
 801a7de:	1c30      	adds	r0, r6, #0
 801a7e0:	f7e6 fb5c 	bl	8000e9c <__aeabi_fmul>
 801a7e4:	9000      	str	r0, [sp, #0]
 801a7e6:	e7a0      	b.n	801a72a <__ieee754_expf+0x72>
 801a7e8:	22d0      	movs	r2, #208	@ 0xd0
 801a7ea:	0592      	lsls	r2, r2, #22
 801a7ec:	4293      	cmp	r3, r2
 801a7ee:	d20c      	bcs.n	801a80a <__ieee754_expf+0x152>
 801a7f0:	4928      	ldr	r1, [pc, #160]	@ (801a894 <__ieee754_expf+0x1dc>)
 801a7f2:	1c20      	adds	r0, r4, #0
 801a7f4:	f7e5 ffe2 	bl	80007bc <__aeabi_fadd>
 801a7f8:	21fe      	movs	r1, #254	@ 0xfe
 801a7fa:	0589      	lsls	r1, r1, #22
 801a7fc:	f7e5 fe7a 	bl	80004f4 <__aeabi_fcmpgt>
 801a800:	1e05      	subs	r5, r0, #0
 801a802:	d097      	beq.n	801a734 <__ieee754_expf+0x7c>
 801a804:	21fe      	movs	r1, #254	@ 0xfe
 801a806:	0589      	lsls	r1, r1, #22
 801a808:	e75f      	b.n	801a6ca <__ieee754_expf+0x12>
 801a80a:	2500      	movs	r5, #0
 801a80c:	e792      	b.n	801a734 <__ieee754_expf+0x7c>
 801a80e:	2080      	movs	r0, #128	@ 0x80
 801a810:	1c31      	adds	r1, r6, #0
 801a812:	05c0      	lsls	r0, r0, #23
 801a814:	f7e6 fc80 	bl	8001118 <__aeabi_fsub>
 801a818:	1c01      	adds	r1, r0, #0
 801a81a:	9801      	ldr	r0, [sp, #4]
 801a81c:	f7e6 f958 	bl	8000ad0 <__aeabi_fdiv>
 801a820:	1c01      	adds	r1, r0, #0
 801a822:	9800      	ldr	r0, [sp, #0]
 801a824:	f7e6 fc78 	bl	8001118 <__aeabi_fsub>
 801a828:	1c39      	adds	r1, r7, #0
 801a82a:	f7e6 fc75 	bl	8001118 <__aeabi_fsub>
 801a82e:	1c01      	adds	r1, r0, #0
 801a830:	20fe      	movs	r0, #254	@ 0xfe
 801a832:	0580      	lsls	r0, r0, #22
 801a834:	f7e6 fc70 	bl	8001118 <__aeabi_fsub>
 801a838:	002b      	movs	r3, r5
 801a83a:	337d      	adds	r3, #125	@ 0x7d
 801a83c:	db02      	blt.n	801a844 <__ieee754_expf+0x18c>
 801a83e:	05ec      	lsls	r4, r5, #23
 801a840:	1824      	adds	r4, r4, r0
 801a842:	e74c      	b.n	801a6de <__ieee754_expf+0x26>
 801a844:	21d8      	movs	r1, #216	@ 0xd8
 801a846:	3564      	adds	r5, #100	@ 0x64
 801a848:	05ed      	lsls	r5, r5, #23
 801a84a:	1828      	adds	r0, r5, r0
 801a84c:	0509      	lsls	r1, r1, #20
 801a84e:	f7e6 fb25 	bl	8000e9c <__aeabi_fmul>
 801a852:	e74c      	b.n	801a6ee <__ieee754_expf+0x36>
 801a854:	2400      	movs	r4, #0
 801a856:	e742      	b.n	801a6de <__ieee754_expf+0x26>
 801a858:	42b17217 	.word	0x42b17217
 801a85c:	42cff1b5 	.word	0x42cff1b5
 801a860:	3eb17218 	.word	0x3eb17218
 801a864:	3f851591 	.word	0x3f851591
 801a868:	0801be68 	.word	0x0801be68
 801a86c:	0801be60 	.word	0x0801be60
 801a870:	3331bb4c 	.word	0x3331bb4c
 801a874:	35ddea0e 	.word	0x35ddea0e
 801a878:	388ab355 	.word	0x388ab355
 801a87c:	3b360b61 	.word	0x3b360b61
 801a880:	3e2aaaab 	.word	0x3e2aaaab
 801a884:	3fb8aa3b 	.word	0x3fb8aa3b
 801a888:	0801be70 	.word	0x0801be70
 801a88c:	3f317180 	.word	0x3f317180
 801a890:	3717f7d1 	.word	0x3717f7d1
 801a894:	7149f2ca 	.word	0x7149f2ca

0801a898 <with_errnof>:
 801a898:	b570      	push	{r4, r5, r6, lr}
 801a89a:	000d      	movs	r5, r1
 801a89c:	1c04      	adds	r4, r0, #0
 801a89e:	f7fd fb67 	bl	8017f70 <__errno>
 801a8a2:	6005      	str	r5, [r0, #0]
 801a8a4:	1c20      	adds	r0, r4, #0
 801a8a6:	bd70      	pop	{r4, r5, r6, pc}

0801a8a8 <xflowf>:
 801a8a8:	b510      	push	{r4, lr}
 801a8aa:	1c0b      	adds	r3, r1, #0
 801a8ac:	2800      	cmp	r0, #0
 801a8ae:	d002      	beq.n	801a8b6 <xflowf+0xe>
 801a8b0:	2380      	movs	r3, #128	@ 0x80
 801a8b2:	061b      	lsls	r3, r3, #24
 801a8b4:	18cb      	adds	r3, r1, r3
 801a8b6:	1c18      	adds	r0, r3, #0
 801a8b8:	f7e6 faf0 	bl	8000e9c <__aeabi_fmul>
 801a8bc:	2122      	movs	r1, #34	@ 0x22
 801a8be:	f7ff ffeb 	bl	801a898 <with_errnof>
 801a8c2:	bd10      	pop	{r4, pc}

0801a8c4 <__math_uflowf>:
 801a8c4:	2180      	movs	r1, #128	@ 0x80
 801a8c6:	b510      	push	{r4, lr}
 801a8c8:	0549      	lsls	r1, r1, #21
 801a8ca:	f7ff ffed 	bl	801a8a8 <xflowf>
 801a8ce:	bd10      	pop	{r4, pc}

0801a8d0 <__math_oflowf>:
 801a8d0:	21e0      	movs	r1, #224	@ 0xe0
 801a8d2:	b510      	push	{r4, lr}
 801a8d4:	05c9      	lsls	r1, r1, #23
 801a8d6:	f7ff ffe7 	bl	801a8a8 <xflowf>
 801a8da:	bd10      	pop	{r4, pc}

0801a8dc <__ieee754_log>:
 801a8dc:	2380      	movs	r3, #128	@ 0x80
 801a8de:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a8e0:	035b      	lsls	r3, r3, #13
 801a8e2:	000e      	movs	r6, r1
 801a8e4:	b08d      	sub	sp, #52	@ 0x34
 801a8e6:	4299      	cmp	r1, r3
 801a8e8:	da23      	bge.n	801a932 <__ieee754_log+0x56>
 801a8ea:	004b      	lsls	r3, r1, #1
 801a8ec:	085b      	lsrs	r3, r3, #1
 801a8ee:	4303      	orrs	r3, r0
 801a8f0:	d107      	bne.n	801a902 <__ieee754_log+0x26>
 801a8f2:	2200      	movs	r2, #0
 801a8f4:	2300      	movs	r3, #0
 801a8f6:	2000      	movs	r0, #0
 801a8f8:	49b4      	ldr	r1, [pc, #720]	@ (801abcc <__ieee754_log+0x2f0>)
 801a8fa:	f7e7 f9d9 	bl	8001cb0 <__aeabi_ddiv>
 801a8fe:	b00d      	add	sp, #52	@ 0x34
 801a900:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a902:	2900      	cmp	r1, #0
 801a904:	da06      	bge.n	801a914 <__ieee754_log+0x38>
 801a906:	0002      	movs	r2, r0
 801a908:	000b      	movs	r3, r1
 801a90a:	f7e8 f8dd 	bl	8002ac8 <__aeabi_dsub>
 801a90e:	2200      	movs	r2, #0
 801a910:	2300      	movs	r3, #0
 801a912:	e7f2      	b.n	801a8fa <__ieee754_log+0x1e>
 801a914:	4bae      	ldr	r3, [pc, #696]	@ (801abd0 <__ieee754_log+0x2f4>)
 801a916:	2200      	movs	r2, #0
 801a918:	f7e7 fe0e 	bl	8002538 <__aeabi_dmul>
 801a91c:	2336      	movs	r3, #54	@ 0x36
 801a91e:	000e      	movs	r6, r1
 801a920:	425b      	negs	r3, r3
 801a922:	4aac      	ldr	r2, [pc, #688]	@ (801abd4 <__ieee754_log+0x2f8>)
 801a924:	4296      	cmp	r6, r2
 801a926:	dd06      	ble.n	801a936 <__ieee754_log+0x5a>
 801a928:	0002      	movs	r2, r0
 801a92a:	000b      	movs	r3, r1
 801a92c:	f7e6 fe5c 	bl	80015e8 <__aeabi_dadd>
 801a930:	e7e5      	b.n	801a8fe <__ieee754_log+0x22>
 801a932:	2300      	movs	r3, #0
 801a934:	e7f5      	b.n	801a922 <__ieee754_log+0x46>
 801a936:	4ca8      	ldr	r4, [pc, #672]	@ (801abd8 <__ieee754_log+0x2fc>)
 801a938:	1532      	asrs	r2, r6, #20
 801a93a:	1912      	adds	r2, r2, r4
 801a93c:	0336      	lsls	r6, r6, #12
 801a93e:	4ca7      	ldr	r4, [pc, #668]	@ (801abdc <__ieee754_log+0x300>)
 801a940:	18d2      	adds	r2, r2, r3
 801a942:	0b33      	lsrs	r3, r6, #12
 801a944:	9302      	str	r3, [sp, #8]
 801a946:	191b      	adds	r3, r3, r4
 801a948:	2480      	movs	r4, #128	@ 0x80
 801a94a:	0364      	lsls	r4, r4, #13
 801a94c:	4023      	ands	r3, r4
 801a94e:	4ca4      	ldr	r4, [pc, #656]	@ (801abe0 <__ieee754_log+0x304>)
 801a950:	9d02      	ldr	r5, [sp, #8]
 801a952:	405c      	eors	r4, r3
 801a954:	151b      	asrs	r3, r3, #20
 801a956:	189b      	adds	r3, r3, r2
 801a958:	4325      	orrs	r5, r4
 801a95a:	2200      	movs	r2, #0
 801a95c:	9300      	str	r3, [sp, #0]
 801a95e:	0029      	movs	r1, r5
 801a960:	4b9f      	ldr	r3, [pc, #636]	@ (801abe0 <__ieee754_log+0x304>)
 801a962:	f7e8 f8b1 	bl	8002ac8 <__aeabi_dsub>
 801a966:	9b02      	ldr	r3, [sp, #8]
 801a968:	0006      	movs	r6, r0
 801a96a:	3302      	adds	r3, #2
 801a96c:	031b      	lsls	r3, r3, #12
 801a96e:	000f      	movs	r7, r1
 801a970:	2200      	movs	r2, #0
 801a972:	0b1b      	lsrs	r3, r3, #12
 801a974:	2b02      	cmp	r3, #2
 801a976:	dc64      	bgt.n	801aa42 <__ieee754_log+0x166>
 801a978:	2300      	movs	r3, #0
 801a97a:	f7e5 fd67 	bl	800044c <__aeabi_dcmpeq>
 801a97e:	2800      	cmp	r0, #0
 801a980:	d019      	beq.n	801a9b6 <__ieee754_log+0xda>
 801a982:	9b00      	ldr	r3, [sp, #0]
 801a984:	2b00      	cmp	r3, #0
 801a986:	d100      	bne.n	801a98a <__ieee754_log+0xae>
 801a988:	e11c      	b.n	801abc4 <__ieee754_log+0x2e8>
 801a98a:	0018      	movs	r0, r3
 801a98c:	f7e8 fc96 	bl	80032bc <__aeabi_i2d>
 801a990:	4a94      	ldr	r2, [pc, #592]	@ (801abe4 <__ieee754_log+0x308>)
 801a992:	4b95      	ldr	r3, [pc, #596]	@ (801abe8 <__ieee754_log+0x30c>)
 801a994:	0004      	movs	r4, r0
 801a996:	000d      	movs	r5, r1
 801a998:	f7e7 fdce 	bl	8002538 <__aeabi_dmul>
 801a99c:	4a93      	ldr	r2, [pc, #588]	@ (801abec <__ieee754_log+0x310>)
 801a99e:	0006      	movs	r6, r0
 801a9a0:	000f      	movs	r7, r1
 801a9a2:	4b93      	ldr	r3, [pc, #588]	@ (801abf0 <__ieee754_log+0x314>)
 801a9a4:	0020      	movs	r0, r4
 801a9a6:	0029      	movs	r1, r5
 801a9a8:	f7e7 fdc6 	bl	8002538 <__aeabi_dmul>
 801a9ac:	0002      	movs	r2, r0
 801a9ae:	000b      	movs	r3, r1
 801a9b0:	0030      	movs	r0, r6
 801a9b2:	0039      	movs	r1, r7
 801a9b4:	e7ba      	b.n	801a92c <__ieee754_log+0x50>
 801a9b6:	4a8f      	ldr	r2, [pc, #572]	@ (801abf4 <__ieee754_log+0x318>)
 801a9b8:	4b8f      	ldr	r3, [pc, #572]	@ (801abf8 <__ieee754_log+0x31c>)
 801a9ba:	0030      	movs	r0, r6
 801a9bc:	0039      	movs	r1, r7
 801a9be:	f7e7 fdbb 	bl	8002538 <__aeabi_dmul>
 801a9c2:	0002      	movs	r2, r0
 801a9c4:	000b      	movs	r3, r1
 801a9c6:	2000      	movs	r0, #0
 801a9c8:	498c      	ldr	r1, [pc, #560]	@ (801abfc <__ieee754_log+0x320>)
 801a9ca:	f7e8 f87d 	bl	8002ac8 <__aeabi_dsub>
 801a9ce:	0032      	movs	r2, r6
 801a9d0:	0004      	movs	r4, r0
 801a9d2:	000d      	movs	r5, r1
 801a9d4:	003b      	movs	r3, r7
 801a9d6:	0030      	movs	r0, r6
 801a9d8:	0039      	movs	r1, r7
 801a9da:	f7e7 fdad 	bl	8002538 <__aeabi_dmul>
 801a9de:	000b      	movs	r3, r1
 801a9e0:	0002      	movs	r2, r0
 801a9e2:	0029      	movs	r1, r5
 801a9e4:	0020      	movs	r0, r4
 801a9e6:	f7e7 fda7 	bl	8002538 <__aeabi_dmul>
 801a9ea:	9b00      	ldr	r3, [sp, #0]
 801a9ec:	9002      	str	r0, [sp, #8]
 801a9ee:	9103      	str	r1, [sp, #12]
 801a9f0:	2b00      	cmp	r3, #0
 801a9f2:	d106      	bne.n	801aa02 <__ieee754_log+0x126>
 801a9f4:	0002      	movs	r2, r0
 801a9f6:	000b      	movs	r3, r1
 801a9f8:	0030      	movs	r0, r6
 801a9fa:	0039      	movs	r1, r7
 801a9fc:	f7e8 f864 	bl	8002ac8 <__aeabi_dsub>
 801aa00:	e77d      	b.n	801a8fe <__ieee754_log+0x22>
 801aa02:	9800      	ldr	r0, [sp, #0]
 801aa04:	f7e8 fc5a 	bl	80032bc <__aeabi_i2d>
 801aa08:	4a76      	ldr	r2, [pc, #472]	@ (801abe4 <__ieee754_log+0x308>)
 801aa0a:	4b77      	ldr	r3, [pc, #476]	@ (801abe8 <__ieee754_log+0x30c>)
 801aa0c:	0004      	movs	r4, r0
 801aa0e:	000d      	movs	r5, r1
 801aa10:	f7e7 fd92 	bl	8002538 <__aeabi_dmul>
 801aa14:	4a75      	ldr	r2, [pc, #468]	@ (801abec <__ieee754_log+0x310>)
 801aa16:	9000      	str	r0, [sp, #0]
 801aa18:	9101      	str	r1, [sp, #4]
 801aa1a:	4b75      	ldr	r3, [pc, #468]	@ (801abf0 <__ieee754_log+0x314>)
 801aa1c:	0020      	movs	r0, r4
 801aa1e:	0029      	movs	r1, r5
 801aa20:	f7e7 fd8a 	bl	8002538 <__aeabi_dmul>
 801aa24:	0002      	movs	r2, r0
 801aa26:	000b      	movs	r3, r1
 801aa28:	9802      	ldr	r0, [sp, #8]
 801aa2a:	9903      	ldr	r1, [sp, #12]
 801aa2c:	f7e8 f84c 	bl	8002ac8 <__aeabi_dsub>
 801aa30:	0032      	movs	r2, r6
 801aa32:	003b      	movs	r3, r7
 801aa34:	f7e8 f848 	bl	8002ac8 <__aeabi_dsub>
 801aa38:	0002      	movs	r2, r0
 801aa3a:	000b      	movs	r3, r1
 801aa3c:	9800      	ldr	r0, [sp, #0]
 801aa3e:	9901      	ldr	r1, [sp, #4]
 801aa40:	e7dc      	b.n	801a9fc <__ieee754_log+0x120>
 801aa42:	2380      	movs	r3, #128	@ 0x80
 801aa44:	05db      	lsls	r3, r3, #23
 801aa46:	f7e6 fdcf 	bl	80015e8 <__aeabi_dadd>
 801aa4a:	0002      	movs	r2, r0
 801aa4c:	000b      	movs	r3, r1
 801aa4e:	0030      	movs	r0, r6
 801aa50:	0039      	movs	r1, r7
 801aa52:	f7e7 f92d 	bl	8001cb0 <__aeabi_ddiv>
 801aa56:	9004      	str	r0, [sp, #16]
 801aa58:	9105      	str	r1, [sp, #20]
 801aa5a:	9800      	ldr	r0, [sp, #0]
 801aa5c:	f7e8 fc2e 	bl	80032bc <__aeabi_i2d>
 801aa60:	9a04      	ldr	r2, [sp, #16]
 801aa62:	9b05      	ldr	r3, [sp, #20]
 801aa64:	9006      	str	r0, [sp, #24]
 801aa66:	9107      	str	r1, [sp, #28]
 801aa68:	0010      	movs	r0, r2
 801aa6a:	0019      	movs	r1, r3
 801aa6c:	f7e7 fd64 	bl	8002538 <__aeabi_dmul>
 801aa70:	4a63      	ldr	r2, [pc, #396]	@ (801ac00 <__ieee754_log+0x324>)
 801aa72:	9b02      	ldr	r3, [sp, #8]
 801aa74:	4694      	mov	ip, r2
 801aa76:	4463      	add	r3, ip
 801aa78:	0002      	movs	r2, r0
 801aa7a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801aa7c:	000b      	movs	r3, r1
 801aa7e:	9008      	str	r0, [sp, #32]
 801aa80:	9109      	str	r1, [sp, #36]	@ 0x24
 801aa82:	f7e7 fd59 	bl	8002538 <__aeabi_dmul>
 801aa86:	0004      	movs	r4, r0
 801aa88:	000d      	movs	r5, r1
 801aa8a:	4a5e      	ldr	r2, [pc, #376]	@ (801ac04 <__ieee754_log+0x328>)
 801aa8c:	4b5e      	ldr	r3, [pc, #376]	@ (801ac08 <__ieee754_log+0x32c>)
 801aa8e:	f7e7 fd53 	bl	8002538 <__aeabi_dmul>
 801aa92:	4a5e      	ldr	r2, [pc, #376]	@ (801ac0c <__ieee754_log+0x330>)
 801aa94:	4b5e      	ldr	r3, [pc, #376]	@ (801ac10 <__ieee754_log+0x334>)
 801aa96:	f7e6 fda7 	bl	80015e8 <__aeabi_dadd>
 801aa9a:	0022      	movs	r2, r4
 801aa9c:	002b      	movs	r3, r5
 801aa9e:	f7e7 fd4b 	bl	8002538 <__aeabi_dmul>
 801aaa2:	4a5c      	ldr	r2, [pc, #368]	@ (801ac14 <__ieee754_log+0x338>)
 801aaa4:	4b5c      	ldr	r3, [pc, #368]	@ (801ac18 <__ieee754_log+0x33c>)
 801aaa6:	f7e6 fd9f 	bl	80015e8 <__aeabi_dadd>
 801aaaa:	0022      	movs	r2, r4
 801aaac:	002b      	movs	r3, r5
 801aaae:	f7e7 fd43 	bl	8002538 <__aeabi_dmul>
 801aab2:	4a5a      	ldr	r2, [pc, #360]	@ (801ac1c <__ieee754_log+0x340>)
 801aab4:	4b5a      	ldr	r3, [pc, #360]	@ (801ac20 <__ieee754_log+0x344>)
 801aab6:	f7e6 fd97 	bl	80015e8 <__aeabi_dadd>
 801aaba:	9a08      	ldr	r2, [sp, #32]
 801aabc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801aabe:	f7e7 fd3b 	bl	8002538 <__aeabi_dmul>
 801aac2:	4a58      	ldr	r2, [pc, #352]	@ (801ac24 <__ieee754_log+0x348>)
 801aac4:	9008      	str	r0, [sp, #32]
 801aac6:	9109      	str	r1, [sp, #36]	@ 0x24
 801aac8:	4b57      	ldr	r3, [pc, #348]	@ (801ac28 <__ieee754_log+0x34c>)
 801aaca:	0020      	movs	r0, r4
 801aacc:	0029      	movs	r1, r5
 801aace:	f7e7 fd33 	bl	8002538 <__aeabi_dmul>
 801aad2:	4a56      	ldr	r2, [pc, #344]	@ (801ac2c <__ieee754_log+0x350>)
 801aad4:	4b56      	ldr	r3, [pc, #344]	@ (801ac30 <__ieee754_log+0x354>)
 801aad6:	f7e6 fd87 	bl	80015e8 <__aeabi_dadd>
 801aada:	0022      	movs	r2, r4
 801aadc:	002b      	movs	r3, r5
 801aade:	f7e7 fd2b 	bl	8002538 <__aeabi_dmul>
 801aae2:	4a54      	ldr	r2, [pc, #336]	@ (801ac34 <__ieee754_log+0x358>)
 801aae4:	4b54      	ldr	r3, [pc, #336]	@ (801ac38 <__ieee754_log+0x35c>)
 801aae6:	f7e6 fd7f 	bl	80015e8 <__aeabi_dadd>
 801aaea:	0022      	movs	r2, r4
 801aaec:	002b      	movs	r3, r5
 801aaee:	f7e7 fd23 	bl	8002538 <__aeabi_dmul>
 801aaf2:	0002      	movs	r2, r0
 801aaf4:	000b      	movs	r3, r1
 801aaf6:	9808      	ldr	r0, [sp, #32]
 801aaf8:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801aafa:	f7e6 fd75 	bl	80015e8 <__aeabi_dadd>
 801aafe:	9a02      	ldr	r2, [sp, #8]
 801ab00:	4b4e      	ldr	r3, [pc, #312]	@ (801ac3c <__ieee754_log+0x360>)
 801ab02:	0004      	movs	r4, r0
 801ab04:	1a9b      	subs	r3, r3, r2
 801ab06:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801ab08:	000d      	movs	r5, r1
 801ab0a:	4313      	orrs	r3, r2
 801ab0c:	2b00      	cmp	r3, #0
 801ab0e:	dd34      	ble.n	801ab7a <__ieee754_log+0x29e>
 801ab10:	2200      	movs	r2, #0
 801ab12:	4b3a      	ldr	r3, [pc, #232]	@ (801abfc <__ieee754_log+0x320>)
 801ab14:	0030      	movs	r0, r6
 801ab16:	0039      	movs	r1, r7
 801ab18:	f7e7 fd0e 	bl	8002538 <__aeabi_dmul>
 801ab1c:	0032      	movs	r2, r6
 801ab1e:	003b      	movs	r3, r7
 801ab20:	f7e7 fd0a 	bl	8002538 <__aeabi_dmul>
 801ab24:	0002      	movs	r2, r0
 801ab26:	000b      	movs	r3, r1
 801ab28:	9002      	str	r0, [sp, #8]
 801ab2a:	9103      	str	r1, [sp, #12]
 801ab2c:	0020      	movs	r0, r4
 801ab2e:	0029      	movs	r1, r5
 801ab30:	f7e6 fd5a 	bl	80015e8 <__aeabi_dadd>
 801ab34:	9a04      	ldr	r2, [sp, #16]
 801ab36:	9b05      	ldr	r3, [sp, #20]
 801ab38:	f7e7 fcfe 	bl	8002538 <__aeabi_dmul>
 801ab3c:	9b00      	ldr	r3, [sp, #0]
 801ab3e:	0004      	movs	r4, r0
 801ab40:	000d      	movs	r5, r1
 801ab42:	2b00      	cmp	r3, #0
 801ab44:	d106      	bne.n	801ab54 <__ieee754_log+0x278>
 801ab46:	0002      	movs	r2, r0
 801ab48:	000b      	movs	r3, r1
 801ab4a:	9802      	ldr	r0, [sp, #8]
 801ab4c:	9903      	ldr	r1, [sp, #12]
 801ab4e:	f7e7 ffbb 	bl	8002ac8 <__aeabi_dsub>
 801ab52:	e74f      	b.n	801a9f4 <__ieee754_log+0x118>
 801ab54:	4a23      	ldr	r2, [pc, #140]	@ (801abe4 <__ieee754_log+0x308>)
 801ab56:	4b24      	ldr	r3, [pc, #144]	@ (801abe8 <__ieee754_log+0x30c>)
 801ab58:	9806      	ldr	r0, [sp, #24]
 801ab5a:	9907      	ldr	r1, [sp, #28]
 801ab5c:	f7e7 fcec 	bl	8002538 <__aeabi_dmul>
 801ab60:	4a22      	ldr	r2, [pc, #136]	@ (801abec <__ieee754_log+0x310>)
 801ab62:	9000      	str	r0, [sp, #0]
 801ab64:	9101      	str	r1, [sp, #4]
 801ab66:	9806      	ldr	r0, [sp, #24]
 801ab68:	9907      	ldr	r1, [sp, #28]
 801ab6a:	4b21      	ldr	r3, [pc, #132]	@ (801abf0 <__ieee754_log+0x314>)
 801ab6c:	f7e7 fce4 	bl	8002538 <__aeabi_dmul>
 801ab70:	0022      	movs	r2, r4
 801ab72:	002b      	movs	r3, r5
 801ab74:	f7e6 fd38 	bl	80015e8 <__aeabi_dadd>
 801ab78:	e754      	b.n	801aa24 <__ieee754_log+0x148>
 801ab7a:	0002      	movs	r2, r0
 801ab7c:	000b      	movs	r3, r1
 801ab7e:	0030      	movs	r0, r6
 801ab80:	0039      	movs	r1, r7
 801ab82:	f7e7 ffa1 	bl	8002ac8 <__aeabi_dsub>
 801ab86:	9a04      	ldr	r2, [sp, #16]
 801ab88:	9b05      	ldr	r3, [sp, #20]
 801ab8a:	f7e7 fcd5 	bl	8002538 <__aeabi_dmul>
 801ab8e:	9b00      	ldr	r3, [sp, #0]
 801ab90:	0004      	movs	r4, r0
 801ab92:	000d      	movs	r5, r1
 801ab94:	2b00      	cmp	r3, #0
 801ab96:	d102      	bne.n	801ab9e <__ieee754_log+0x2c2>
 801ab98:	0002      	movs	r2, r0
 801ab9a:	000b      	movs	r3, r1
 801ab9c:	e72c      	b.n	801a9f8 <__ieee754_log+0x11c>
 801ab9e:	4a11      	ldr	r2, [pc, #68]	@ (801abe4 <__ieee754_log+0x308>)
 801aba0:	4b11      	ldr	r3, [pc, #68]	@ (801abe8 <__ieee754_log+0x30c>)
 801aba2:	9806      	ldr	r0, [sp, #24]
 801aba4:	9907      	ldr	r1, [sp, #28]
 801aba6:	f7e7 fcc7 	bl	8002538 <__aeabi_dmul>
 801abaa:	4a10      	ldr	r2, [pc, #64]	@ (801abec <__ieee754_log+0x310>)
 801abac:	9000      	str	r0, [sp, #0]
 801abae:	9101      	str	r1, [sp, #4]
 801abb0:	9806      	ldr	r0, [sp, #24]
 801abb2:	9907      	ldr	r1, [sp, #28]
 801abb4:	4b0e      	ldr	r3, [pc, #56]	@ (801abf0 <__ieee754_log+0x314>)
 801abb6:	f7e7 fcbf 	bl	8002538 <__aeabi_dmul>
 801abba:	0002      	movs	r2, r0
 801abbc:	000b      	movs	r3, r1
 801abbe:	0020      	movs	r0, r4
 801abc0:	0029      	movs	r1, r5
 801abc2:	e733      	b.n	801aa2c <__ieee754_log+0x150>
 801abc4:	2000      	movs	r0, #0
 801abc6:	2100      	movs	r1, #0
 801abc8:	e699      	b.n	801a8fe <__ieee754_log+0x22>
 801abca:	46c0      	nop			@ (mov r8, r8)
 801abcc:	c3500000 	.word	0xc3500000
 801abd0:	43500000 	.word	0x43500000
 801abd4:	7fefffff 	.word	0x7fefffff
 801abd8:	fffffc01 	.word	0xfffffc01
 801abdc:	00095f64 	.word	0x00095f64
 801abe0:	3ff00000 	.word	0x3ff00000
 801abe4:	fee00000 	.word	0xfee00000
 801abe8:	3fe62e42 	.word	0x3fe62e42
 801abec:	35793c76 	.word	0x35793c76
 801abf0:	3dea39ef 	.word	0x3dea39ef
 801abf4:	55555555 	.word	0x55555555
 801abf8:	3fd55555 	.word	0x3fd55555
 801abfc:	3fe00000 	.word	0x3fe00000
 801ac00:	fff9eb86 	.word	0xfff9eb86
 801ac04:	df3e5244 	.word	0xdf3e5244
 801ac08:	3fc2f112 	.word	0x3fc2f112
 801ac0c:	96cb03de 	.word	0x96cb03de
 801ac10:	3fc74664 	.word	0x3fc74664
 801ac14:	94229359 	.word	0x94229359
 801ac18:	3fd24924 	.word	0x3fd24924
 801ac1c:	55555593 	.word	0x55555593
 801ac20:	3fe55555 	.word	0x3fe55555
 801ac24:	d078c69f 	.word	0xd078c69f
 801ac28:	3fc39a09 	.word	0x3fc39a09
 801ac2c:	1d8e78af 	.word	0x1d8e78af
 801ac30:	3fcc71c5 	.word	0x3fcc71c5
 801ac34:	9997fa04 	.word	0x9997fa04
 801ac38:	3fd99999 	.word	0x3fd99999
 801ac3c:	0006b851 	.word	0x0006b851

0801ac40 <_init>:
 801ac40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ac42:	46c0      	nop			@ (mov r8, r8)
 801ac44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ac46:	bc08      	pop	{r3}
 801ac48:	469e      	mov	lr, r3
 801ac4a:	4770      	bx	lr

0801ac4c <_fini>:
 801ac4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ac4e:	46c0      	nop			@ (mov r8, r8)
 801ac50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ac52:	bc08      	pop	{r3}
 801ac54:	469e      	mov	lr, r3
 801ac56:	4770      	bx	lr
